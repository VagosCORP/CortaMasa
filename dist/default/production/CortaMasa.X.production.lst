

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sat Nov 19 23:30:42 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1
   138                           	psect	text119,global,reloc=2,class=CODE,delta=1
   139                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   140                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   141                           	psect	text121,global,reloc=2,class=CODE,delta=1
   142                           	psect	text122,global,reloc=2,class=CODE,delta=1
   143                           	psect	text123,global,reloc=2,class=CODE,delta=1
   144                           	psect	text124,global,reloc=2,class=CODE,delta=1
   145                           	psect	text125,global,reloc=2,class=CODE,delta=1
   146                           	psect	text126,global,reloc=2,class=CODE,delta=1
   147                           	psect	text127,global,reloc=2,class=CODE,delta=1
   148                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   149                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   150                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   151  0000                     
   152                           	psect	idataCOMRAM
   153  007318                     __pidataCOMRAM:
   154                           	opt stack 0
   155                           
   156                           ;initializer for _maxTimePerCut
   157  007318  1388               	dw	5000
   158  00731A  0000               	dw	0
   159                           
   160                           ;initializer for _timeDOWN
   161  00731C  0032               	dw	50
   162  00731E  0000               	dw	0
   163                           
   164                           ;initializer for _pi
   165  007320  10                 	db	16
   166  007321  49                 	db	73
   167  007322  40                 	db	64
   168                           
   169                           ;initializer for _tempkgXcorte
   170  007323  CD                 	db	205
   171  007324  CC                 	db	204
   172  007325  3D                 	db	61
   173                           
   174                           ;initializer for _timsXcorte
   175  007326  40                 	db	64
   176  007327  1C                 	db	28
   177  007328  46                 	db	70
   178                           
   179                           	psect	idataBANK0
   180  007329                     __pidataBANK0:
   181                           	opt stack 0
   182                           
   183                           ;initializer for lcd_init@F7567
   184  007329  28                 	db	40
   185  00732A  0C                 	db	12
   186  00732B  01                 	db	1
   187  00732C  06                 	db	6
   188                           
   189                           ;initializer for _temptiXcorte
   190  00732D  00                 	db	0
   191  00732E  20                 	db	32
   192  00732F  41                 	db	65
   193                           
   194                           ;initializer for _numCortes
   195  007330  0005               	dw	5
   196                           
   197                           ;initializer for _tempNumCortes
   198  007332  0001               	dw	1
   199                           
   200                           ;initializer for _bladeIsUP
   201  007334  01                 	db	1
   202                           
   203                           ;initializer for _lastSttDOWN
   204  007335  01                 	db	1
   205                           
   206                           ;initializer for _lastSttENTER
   207  007336  01                 	db	1
   208                           
   209                           ;initializer for _lastSttRETRO
   210  007337  01                 	db	1
   211                           
   212                           ;initializer for _lastSttUP
   213  007338  01                 	db	1
   214                           
   215                           	psect	idataBANK1
   216  007136                     __pidataBANK1:
   217                           	opt stack 0
   218                           
   219                           ;initializer for _exp10
   220  007136  86A0               	dw	34464
   221  007138  0001               	dw	1
   222  00713A  2710               	dw	10000
   223  00713C  0000               	dw	0
   224  00713E  03E8               	dw	1000
   225  007140  0000               	dw	0
   226  007142  0064               	dw	100
   227  007144  0000               	dw	0
   228  007146  000A               	dw	10
   229  007148  0000               	dw	0
   230  00714A  0001               	dw	1
   231  00714C  0000               	dw	0
   232                           
   233                           ;initializer for _kgXcorte
   234  00714E  00                 	db	0
   235  00714F  80                 	db	128
   236  007150  3F                 	db	63
   237                           
   238                           ;initializer for _tempVelocidadMasa3
   239  007151  CD                 	db	205
   240  007152  4C                 	db	76
   241  007153  3E                 	db	62
   242                           
   243                           ;initializer for _tiXcorte
   244  007154  00                 	db	0
   245  007155  20                 	db	32
   246  007156  41                 	db	65
   247                           
   248                           ;initializer for _velocidadMasa
   249  007157  CD                 	db	205
   250  007158  4C                 	db	76
   251  007159  3E                 	db	62
   252                           
   253                           ;initializer for _chanValSection
   254  00715A  05                 	db	5
   255                           
   256                           ;initializer for _flech
   257  00715B  7E                 	db	126
   258                           
   259                           ;initializer for _tempVelocidadMasa1
   260  00715C  CD                 	db	205
   261  00715D  4C                 	db	76
   262  00715E  3E                 	db	62
   263                           
   264                           ;initializer for _tempVelocidadMasa2
   265  00715F  CD                 	db	205
   266  007160  4C                 	db	76
   267  007161  3E                 	db	62
   268                           
   269                           	psect	mediumconst
   270  007CD4                     __pmediumconst:
   271                           	opt stack 0
   272  007CD4  00                 	db	0
   273  007CD5                     _dpowers:
   274                           	opt stack 0
   275  007CD5  0001               	dw	1
   276  007CD7  0000               	dw	0
   277  007CD9  000A               	dw	10
   278  007CDB  0000               	dw	0
   279  007CDD  0064               	dw	100
   280  007CDF  0000               	dw	0
   281  007CE1  03E8               	dw	1000
   282  007CE3  0000               	dw	0
   283  007CE5  2710               	dw	10000
   284  007CE7  0000               	dw	0
   285  007CE9  86A0               	dw	34464
   286  007CEB  0001               	dw	1
   287  007CED  4240               	dw	16960
   288  007CEF  000F               	dw	15
   289  007CF1  9680               	dw	38528
   290  007CF3  0098               	dw	152
   291  007CF5  E100               	dw	57600
   292  007CF7  05F5               	dw	1525
   293  007CF9  CA00               	dw	51712
   294  007CFB  3B9A               	dw	15258
   295  007CFD                     __end_of_dpowers:
   296                           	opt stack 0
   297  007CFD                     __npowers_:
   298                           	opt stack 0
   299  007CFD  00                 	db	0
   300  007CFE  80                 	db	128
   301  007CFF  3F                 	db	63
   302  007D00  CD                 	db	205
   303  007D01  CC                 	db	204
   304  007D02  3D                 	db	61
   305  007D03  D7                 	db	215
   306  007D04  23                 	db	35
   307  007D05  3C                 	db	60
   308  007D06  12                 	db	18
   309  007D07  83                 	db	131
   310  007D08  3A                 	db	58
   311  007D09  B7                 	db	183
   312  007D0A  D1                 	db	209
   313  007D0B  38                 	db	56
   314  007D0C  C6                 	db	198
   315  007D0D  27                 	db	39
   316  007D0E  37                 	db	55
   317  007D0F  38                 	db	56
   318  007D10  86                 	db	134
   319  007D11  35                 	db	53
   320  007D12  C0                 	db	192
   321  007D13  D6                 	db	214
   322  007D14  33                 	db	51
   323  007D15  CC                 	db	204
   324  007D16  2B                 	db	43
   325  007D17  32                 	db	50
   326  007D18  70                 	db	112
   327  007D19  89                 	db	137
   328  007D1A  30                 	db	48
   329  007D1B  E7                 	db	231
   330  007D1C  DB                 	db	219
   331  007D1D  2E                 	db	46
   332  007D1E  E5                 	db	229
   333  007D1F  3C                 	db	60
   334  007D20  1E                 	db	30
   335  007D21  42                 	db	66
   336  007D22  A2                 	db	162
   337  007D23  0D                 	db	13
   338  007D24                     __end_of__npowers_:
   339                           	opt stack 0
   340  007D24                     __powers_:
   341                           	opt stack 0
   342  007D24  00                 	db	0
   343  007D25  80                 	db	128
   344  007D26  3F                 	db	63
   345  007D27  00                 	db	0
   346  007D28  20                 	db	32
   347  007D29  41                 	db	65
   348  007D2A  00                 	db	0
   349  007D2B  C8                 	db	200
   350  007D2C  42                 	db	66
   351  007D2D  00                 	db	0
   352  007D2E  7A                 	db	122
   353  007D2F  44                 	db	68
   354  007D30  40                 	db	64
   355  007D31  1C                 	db	28
   356  007D32  46                 	db	70
   357  007D33  50                 	db	80
   358  007D34  C3                 	db	195
   359  007D35  47                 	db	71
   360  007D36  24                 	db	36
   361  007D37  74                 	db	116
   362  007D38  49                 	db	73
   363  007D39  97                 	db	151
   364  007D3A  18                 	db	24
   365  007D3B  4B                 	db	75
   366  007D3C  BC                 	db	188
   367  007D3D  BE                 	db	190
   368  007D3E  4C                 	db	76
   369  007D3F  6B                 	db	107
   370  007D40  6E                 	db	110
   371  007D41  4E                 	db	78
   372  007D42  03                 	db	3
   373  007D43  15                 	db	21
   374  007D44  50                 	db	80
   375  007D45  79                 	db	121
   376  007D46  AD                 	db	173
   377  007D47  60                 	db	96
   378  007D48  F3                 	db	243
   379  007D49  49                 	db	73
   380  007D4A  71                 	db	113
   381  007D4B                     __end_of__powers_:
   382                           	opt stack 0
   383  0000                     _ANSELAbits	set	3896
   384  0000                     _ANSELCbits	set	3898
   385  0000                     _CCPTMRS0bits	set	3913
   386  0000                     _PR4	set	3922
   387  0000                     _T4CONbits	set	3921
   388  0000                     _BAUDCON1bits	set	4024
   389  0000                     _CCP2CONbits	set	3942
   390  0000                     _CCPR2L	set	3943
   391  0000                     _ECCP2ASbits	set	3940
   392  0000                     _EEADR	set	4009
   393  0000                     _EECON1bits	set	4006
   394  0000                     _EECON2	set	4007
   395  0000                     _EEDATA	set	4008
   396  0000                     _INTCONbits	set	4082
   397  0000                     _IPR1bits	set	3999
   398  0000                     _IPR5bits	set	3967
   399  0000                     _LATBbits	set	3978
   400  0000                     _LATCbits	set	3979
   401  0000                     _OSCCON2bits	set	4050
   402  0000                     _OSCCONbits	set	4051
   403  0000                     _OSCTUNEbits	set	3995
   404  0000                     _PIE1bits	set	3997
   405  0000                     _PIE5bits	set	3965
   406  0000                     _PIR1bits	set	3998
   407  0000                     _PIR5bits	set	3966
   408  0000                     _PORTAbits	set	3968
   409  0000                     _PORTBbits	set	3969
   410  0000                     _PR2	set	4027
   411  0000                     _PSTR2CONbits	set	3939
   412  0000                     _PWM2CONbits	set	3941
   413  0000                     _RCONbits	set	4048
   414  0000                     _RCREG1	set	4014
   415  0000                     _RCSTA1bits	set	4011
   416  0000                     _SPBRG1	set	4015
   417  0000                     _SPBRGH1	set	4016
   418  0000                     _T2CONbits	set	4026
   419  0000                     _TRISAbits	set	3986
   420  0000                     _TRISBbits	set	3987
   421  0000                     _TRISCbits	set	3988
   422  0000                     _TXREG1	set	4013
   423  0000                     _TXSTA1bits	set	4012
   424  0000                     _WDTCONbits	set	4049
   425  007D4B                     STR_21:
   426                           
   427                           ; BSR set to: 1
   428  007D4B  20                 	db	32
   429  007D4C  20                 	db	32
   430  007D4D  20                 	db	32
   431  007D4E  20                 	db	32
   432  007D4F  25                 	db	37
   433  007D50  63                 	db	99	;'c'
   434  007D51  25                 	db	37
   435  007D52  75                 	db	117	;'u'
   436  007D53  25                 	db	37
   437  007D54  63                 	db	99	;'c'
   438  007D55  25                 	db	37
   439  007D56  75                 	db	117	;'u'
   440  007D57  25                 	db	37
   441  007D58  63                 	db	99	;'c'
   442  007D59  25                 	db	37
   443  007D5A  75                 	db	117	;'u'
   444  007D5B  25                 	db	37
   445  007D5C  63                 	db	99	;'c'
   446  007D5D  25                 	db	37
   447  007D5E  75                 	db	117	;'u'
   448  007D5F  20                 	db	32
   449  007D60  20                 	db	32
   450  007D61  20                 	db	32
   451  007D62  20                 	db	32
   452  007D63  00                 	db	0
   453  007D64                     STR_9:
   454                           
   455                           ; BSR set to: 1
   456  007D64  20                 	db	32
   457  007D65  20                 	db	32
   458  007D66  20                 	db	32
   459  007D67  20                 	db	32
   460  007D68  44                 	db	68	;'D'
   461  007D69  65                 	db	101	;'e'
   462  007D6A  74                 	db	116	;'t'
   463  007D6B  65                 	db	101	;'e'
   464  007D6C  6E                 	db	110	;'n'
   465  007D6D  69                 	db	105	;'i'
   466  007D6E  64                 	db	100	;'d'
   467  007D6F  6F                 	db	111	;'o'
   468  007D70  20                 	db	32
   469  007D71  20                 	db	32
   470  007D72  20                 	db	32
   471  007D73  20                 	db	32
   472  007D74  20                 	db	32
   473  007D75  20                 	db	32
   474  007D76  20                 	db	32
   475  007D77  00                 	db	0
   476  007D78                     STR_15:
   477                           
   478                           ; BSR set to: 1
   479  007D78  20                 	db	32
   480  007D79  20                 	db	32
   481  007D7A  25                 	db	37
   482  007D7B  33                 	db	51	;'3'
   483  007D7C  2E                 	db	46
   484  007D7D  33                 	db	51	;'3'
   485  007D7E  66                 	db	102	;'f'
   486  007D7F  20                 	db	32
   487  007D80  6B                 	db	107	;'k'
   488  007D81  67                 	db	103	;'g'
   489  007D82  2F                 	db	47
   490  007D83  73                 	db	115	;'s'
   491  007D84  20                 	db	32
   492  007D85  20                 	db	32
   493  007D86  20                 	db	32
   494  007D87  20                 	db	32
   495  007D88  20                 	db	32
   496  007D89  20                 	db	32
   497  007D8A  00                 	db	0
   498  007D8B                     STR_31:
   499                           
   500                           ; BSR set to: 1
   501  007D8B  20                 	db	32
   502  007D8C  20                 	db	32
   503  007D8D  20                 	db	32
   504  007D8E  25                 	db	37
   505  007D8F  63                 	db	99	;'c'
   506  007D90  53                 	db	83	;'S'
   507  007D91  49                 	db	73	;'I'
   508  007D92  20                 	db	32
   509  007D93  20                 	db	32
   510  007D94  20                 	db	32
   511  007D95  20                 	db	32
   512  007D96  25                 	db	37
   513  007D97  63                 	db	99	;'c'
   514  007D98  4E                 	db	78	;'N'
   515  007D99  4F                 	db	79	;'O'
   516  007D9A  20                 	db	32
   517  007D9B  20                 	db	32
   518  007D9C  20                 	db	32
   519  007D9D  00                 	db	0
   520  007D9E                     STR_32:
   521                           
   522                           ; BSR set to: 1
   523  007D9E  50                 	db	80	;'P'
   524  007D9F  65                 	db	101	;'e'
   525  007DA0  73                 	db	115	;'s'
   526  007DA1  6F                 	db	111	;'o'
   527  007DA2  20                 	db	32
   528  007DA3  52                 	db	82	;'R'
   529  007DA4  65                 	db	101	;'e'
   530  007DA5  61                 	db	97	;'a'
   531  007DA6  6C                 	db	108	;'l'
   532  007DA7  3A                 	db	58	;':'
   533  007DA8  20                 	db	32
   534  007DA9  20                 	db	32
   535  007DAA  20                 	db	32
   536  007DAB  20                 	db	32
   537  007DAC  20                 	db	32
   538  007DAD  20                 	db	32
   539  007DAE  0A                 	db	10
   540  007DAF  00                 	db	0
   541  007DB0                     STR_34:
   542                           
   543                           ; BSR set to: 1
   544  007DB0  47                 	db	71	;'G'
   545  007DB1  75                 	db	117	;'u'
   546  007DB2  69                 	db	105	;'i'
   547  007DB3  6C                 	db	108	;'l'
   548  007DB4  6C                 	db	108	;'l'
   549  007DB5  6F                 	db	111	;'o'
   550  007DB6  74                 	db	116	;'t'
   551  007DB7  69                 	db	105	;'i'
   552  007DB8  6E                 	db	110	;'n'
   553  007DB9  61                 	db	97	;'a'
   554  007DBA  20                 	db	32
   555  007DBB  20                 	db	32
   556  007DBC  20                 	db	32
   557  007DBD  20                 	db	32
   558  007DBE  20                 	db	32
   559  007DBF  20                 	db	32
   560  007DC0  0A                 	db	10
   561  007DC1  00                 	db	0
   562  007DC2                     STR_20:
   563                           
   564                           ; BSR set to: 1
   565  007DC2  43                 	db	67	;'C'
   566  007DC3  6F                 	db	111	;'o'
   567  007DC4  6E                 	db	110	;'n'
   568  007DC5  74                 	db	116	;'t'
   569  007DC6  72                 	db	114	;'r'
   570  007DC7  61                 	db	97	;'a'
   571  007DC8  73                 	db	115	;'s'
   572  007DC9  65                 	db	101	;'e'
   573  007DCA  6E                 	db	110	;'n'
   574  007DCB  61                 	db	97	;'a'
   575  007DCC  3A                 	db	58	;':'
   576  007DCD  20                 	db	32
   577  007DCE  20                 	db	32
   578  007DCF  20                 	db	32
   579  007DD0  20                 	db	32
   580  007DD1  20                 	db	32
   581  007DD2  0A                 	db	10
   582  007DD3  00                 	db	0
   583  007DD4                     STR_38:
   584                           
   585                           ; BSR set to: 1
   586  007DD4  41                 	db	65	;'A'
   587  007DD5  75                 	db	117	;'u'
   588  007DD6  74                 	db	116	;'t'
   589  007DD7  6F                 	db	111	;'o'
   590  007DD8  63                 	db	99	;'c'
   591  007DD9  61                 	db	97	;'a'
   592  007DDA  6C                 	db	108	;'l'
   593  007DDB  69                 	db	105	;'i'
   594  007DDC  62                 	db	98	;'b'
   595  007DDD  20                 	db	32
   596  007DDE  63                 	db	99	;'c'
   597  007DDF  6F                 	db	111	;'o'
   598  007DE0  6E                 	db	110	;'n'
   599  007DE1  20                 	db	32
   600  007DE2  20                 	db	32
   601  007DE3  20                 	db	32
   602  007DE4  0A                 	db	10
   603  007DE5  00                 	db	0
   604  007DE6                     STR_36:
   605                           
   606                           ; BSR set to: 1
   607  007DE6  20                 	db	32
   608  007DE7  20                 	db	32
   609  007DE8  20                 	db	32
   610  007DE9  45                 	db	69	;'E'
   611  007DEA  6E                 	db	110	;'n'
   612  007DEB  74                 	db	116	;'t'
   613  007DEC  65                 	db	101	;'e'
   614  007DED  72                 	db	114	;'r'
   615  007DEE  20                 	db	32
   616  007DEF  70                 	db	112	;'p'
   617  007DF0  61                 	db	97	;'a'
   618  007DF1  72                 	db	114	;'r'
   619  007DF2  61                 	db	97	;'a'
   620  007DF3  3A                 	db	58	;':'
   621  007DF4  20                 	db	32
   622  007DF5  20                 	db	32
   623  007DF6  0A                 	db	10
   624  007DF7  00                 	db	0
   625  007DF8                     STR_14:
   626                           
   627                           ; BSR set to: 1
   628  007DF8  56                 	db	86	;'V'
   629  007DF9  65                 	db	101	;'e'
   630  007DFA  6C                 	db	108	;'l'
   631  007DFB  6F                 	db	111	;'o'
   632  007DFC  63                 	db	99	;'c'
   633  007DFD  69                 	db	105	;'i'
   634  007DFE  64                 	db	100	;'d'
   635  007DFF  61                 	db	97	;'a'
   636  007E00  64                 	db	100	;'d'
   637  007E01  20                 	db	32
   638  007E02  4D                 	db	77	;'M'
   639  007E03  61                 	db	97	;'a'
   640  007E04  73                 	db	115	;'s'
   641  007E05  61                 	db	97	;'a'
   642  007E06  3A                 	db	58	;':'
   643  007E07  20                 	db	32
   644  007E08  0A                 	db	10
   645  007E09  00                 	db	0
   646  007E0A                     STR_7:
   647                           
   648                           ; BSR set to: 1
   649  007E0A  45                 	db	69	;'E'
   650  007E0B  73                 	db	115	;'s'
   651  007E0C  74                 	db	116	;'t'
   652  007E0D  61                 	db	97	;'a'
   653  007E0E  64                 	db	100	;'d'
   654  007E0F  6F                 	db	111	;'o'
   655  007E10  20                 	db	32
   656  007E11  70                 	db	112	;'p'
   657  007E12  72                 	db	114	;'r'
   658  007E13  6F                 	db	111	;'o'
   659  007E14  63                 	db	99	;'c'
   660  007E15  65                 	db	101	;'e'
   661  007E16  73                 	db	115	;'s'
   662  007E17  6F                 	db	111	;'o'
   663  007E18  3A                 	db	58	;':'
   664  007E19  20                 	db	32
   665  007E1A  0A                 	db	10
   666  007E1B  00                 	db	0
   667  007E1C                     STR_30:
   668                           
   669                           ; BSR set to: 1
   670  007E1C  53                 	db	83	;'S'
   671  007E1D  74                 	db	116	;'t'
   672  007E1E  6F                 	db	111	;'o'
   673  007E1F  70                 	db	112	;'p'
   674  007E20  20                 	db	32
   675  007E21  41                 	db	65	;'A'
   676  007E22  75                 	db	117	;'u'
   677  007E23  74                 	db	116	;'t'
   678  007E24  6F                 	db	111	;'o'
   679  007E25  43                 	db	67	;'C'
   680  007E26  61                 	db	97	;'a'
   681  007E27  6C                 	db	108	;'l'
   682  007E28  69                 	db	105	;'i'
   683  007E29  62                 	db	98	;'b'
   684  007E2A  3F                 	db	63	;'?'
   685  007E2B  20                 	db	32
   686  007E2C  0A                 	db	10
   687  007E2D  00                 	db	0
   688  007E2E                     STR_29:
   689                           
   690                           ; BSR set to: 1
   691  007E2E  49                 	db	73	;'I'
   692  007E2F  6E                 	db	110	;'n'
   693  007E30  69                 	db	105	;'i'
   694  007E31  74                 	db	116	;'t'
   695  007E32  20                 	db	32
   696  007E33  41                 	db	65	;'A'
   697  007E34  75                 	db	117	;'u'
   698  007E35  74                 	db	116	;'t'
   699  007E36  6F                 	db	111	;'o'
   700  007E37  43                 	db	67	;'C'
   701  007E38  61                 	db	97	;'a'
   702  007E39  6C                 	db	108	;'l'
   703  007E3A  69                 	db	105	;'i'
   704  007E3B  62                 	db	98	;'b'
   705  007E3C  3F                 	db	63	;'?'
   706  007E3D  20                 	db	32
   707  007E3E  0A                 	db	10
   708  007E3F  00                 	db	0
   709  007E40                     STR_28:
   710                           
   711                           ; BSR set to: 1
   712  007E40  47                 	db	71	;'G'
   713  007E41  75                 	db	117	;'u'
   714  007E42  61                 	db	97	;'a'
   715  007E43  72                 	db	114	;'r'
   716  007E44  64                 	db	100	;'d'
   717  007E45  61                 	db	97	;'a'
   718  007E46  72                 	db	114	;'r'
   719  007E47  20                 	db	32
   720  007E48  43                 	db	67	;'C'
   721  007E49  61                 	db	97	;'a'
   722  007E4A  6D                 	db	109	;'m'
   723  007E4B  62                 	db	98	;'b'
   724  007E4C  69                 	db	105	;'i'
   725  007E4D  6F                 	db	111	;'o'
   726  007E4E  3F                 	db	63	;'?'
   727  007E4F  20                 	db	32
   728  007E50  0A                 	db	10
   729  007E51  00                 	db	0
   730  007E52                     STR_10:
   731                           
   732                           ; BSR set to: 1
   733  007E52  56                 	db	86	;'V'
   734  007E53  61                 	db	97	;'a'
   735  007E54  6C                 	db	108	;'l'
   736  007E55  6F                 	db	111	;'o'
   737  007E56  72                 	db	114	;'r'
   738  007E57  20                 	db	32
   739  007E58  70                 	db	112	;'p'
   740  007E59  6F                 	db	111	;'o'
   741  007E5A  72                 	db	114	;'r'
   742  007E5B  20                 	db	32
   743  007E5C  43                 	db	67	;'C'
   744  007E5D  6F                 	db	111	;'o'
   745  007E5E  72                 	db	114	;'r'
   746  007E5F  74                 	db	116	;'t'
   747  007E60  65                 	db	101	;'e'
   748  007E61  3A                 	db	58	;':'
   749  007E62  0A                 	db	10
   750  007E63  00                 	db	0
   751  007E64                     STR_23:
   752                           
   753                           ; BSR set to: 1
   754  007E64  4D                 	db	77	;'M'
   755  007E65  6F                 	db	111	;'o'
   756  007E66  64                 	db	100	;'d'
   757  007E67  6F                 	db	111	;'o'
   758  007E68  20                 	db	32
   759  007E69  43                 	db	67	;'C'
   760  007E6A  6F                 	db	111	;'o'
   761  007E6B  6E                 	db	110	;'n'
   762  007E6C  66                 	db	102	;'f'
   763  007E6D  69                 	db	105	;'i'
   764  007E6E  67                 	db	103	;'g'
   765  007E6F  75                 	db	117	;'u'
   766  007E70  72                 	db	114	;'r'
   767  007E71  61                 	db	97	;'a'
   768  007E72  72                 	db	114	;'r'
   769  007E73  3A                 	db	58	;':'
   770  007E74  0A                 	db	10
   771  007E75  00                 	db	0
   772  007E76                     STR_12:
   773                           
   774                           ; BSR set to: 1
   775  007E76  43                 	db	67	;'C'
   776  007E77  61                 	db	97	;'a'
   777  007E78  6E                 	db	110	;'n'
   778  007E79  74                 	db	116	;'t'
   779  007E7A  69                 	db	105	;'i'
   780  007E7B  64                 	db	100	;'d'
   781  007E7C  61                 	db	97	;'a'
   782  007E7D  64                 	db	100	;'d'
   783  007E7E  20                 	db	32
   784  007E7F  43                 	db	67	;'C'
   785  007E80  6F                 	db	111	;'o'
   786  007E81  72                 	db	114	;'r'
   787  007E82  74                 	db	116	;'t'
   788  007E83  65                 	db	101	;'e'
   789  007E84  73                 	db	115	;'s'
   790  007E85  3A                 	db	58	;':'
   791  007E86  0A                 	db	10
   792  007E87  00                 	db	0
   793  007E88                     STR_26:
   794                           
   795                           ; BSR set to: 1
   796  007E88  49                 	db	73	;'I'
   797  007E89  6E                 	db	110	;'n'
   798  007E8A  69                 	db	105	;'i'
   799  007E8B  63                 	db	99	;'c'
   800  007E8C  69                 	db	105	;'i'
   801  007E8D  61                 	db	97	;'a'
   802  007E8E  72                 	db	114	;'r'
   803  007E8F  20                 	db	32
   804  007E90  50                 	db	80	;'P'
   805  007E91  72                 	db	114	;'r'
   806  007E92  6F                 	db	111	;'o'
   807  007E93  63                 	db	99	;'c'
   808  007E94  65                 	db	101	;'e'
   809  007E95  73                 	db	115	;'s'
   810  007E96  6F                 	db	111	;'o'
   811  007E97  3F                 	db	63	;'?'
   812  007E98  0A                 	db	10
   813  007E99  00                 	db	0
   814  007E9A                     STR_27:
   815                           
   816                           ; BSR set to: 1
   817  007E9A  44                 	db	68	;'D'
   818  007E9B  65                 	db	101	;'e'
   819  007E9C  74                 	db	116	;'t'
   820  007E9D  65                 	db	101	;'e'
   821  007E9E  6E                 	db	110	;'n'
   822  007E9F  65                 	db	101	;'e'
   823  007EA0  72                 	db	114	;'r'
   824  007EA1  20                 	db	32
   825  007EA2  50                 	db	80	;'P'
   826  007EA3  72                 	db	114	;'r'
   827  007EA4  6F                 	db	111	;'o'
   828  007EA5  63                 	db	99	;'c'
   829  007EA6  65                 	db	101	;'e'
   830  007EA7  73                 	db	115	;'s'
   831  007EA8  6F                 	db	111	;'o'
   832  007EA9  3F                 	db	63	;'?'
   833  007EAA  0A                 	db	10
   834  007EAB  00                 	db	0
   835  007EAC                     STR_40:
   836                           
   837                           ; BSR set to: 1
   838  007EAC  41                 	db	65	;'A'
   839  007EAD  75                 	db	117	;'u'
   840  007EAE  74                 	db	116	;'t'
   841  007EAF  6F                 	db	111	;'o'
   842  007EB0  63                 	db	99	;'c'
   843  007EB1  61                 	db	97	;'a'
   844  007EB2  6C                 	db	108	;'l'
   845  007EB3  69                 	db	105	;'i'
   846  007EB4  62                 	db	98	;'b'
   847  007EB5  20                 	db	32
   848  007EB6  75                 	db	117	;'u'
   849  007EB7  73                 	db	115	;'s'
   850  007EB8  61                 	db	97	;'a'
   851  007EB9  6E                 	db	110	;'n'
   852  007EBA  64                 	db	100	;'d'
   853  007EBB  6F                 	db	111	;'o'
   854  007EBC  0A                 	db	10
   855  007EBD  00                 	db	0
   856  007EBE                     STR_13:
   857                           
   858                           ; BSR set to: 1
   859  007EBE  20                 	db	32
   860  007EBF  20                 	db	32
   861  007EC0  20                 	db	32
   862  007EC1  20                 	db	32
   863  007EC2  20                 	db	32
   864  007EC3  20                 	db	32
   865  007EC4  25                 	db	37
   866  007EC5  64                 	db	100	;'d'
   867  007EC6  20                 	db	32
   868  007EC7  20                 	db	32
   869  007EC8  20                 	db	32
   870  007EC9  20                 	db	32
   871  007ECA  20                 	db	32
   872  007ECB  20                 	db	32
   873  007ECC  20                 	db	32
   874  007ECD  20                 	db	32
   875  007ECE  20                 	db	32
   876  007ECF  00                 	db	0
   877  007ED0                     STR_8:
   878                           
   879                           ; BSR set to: 1
   880  007ED0  20                 	db	32
   881  007ED1  20                 	db	32
   882  007ED2  20                 	db	32
   883  007ED3  25                 	db	37
   884  007ED4  64                 	db	100	;'d'
   885  007ED5  20                 	db	32
   886  007ED6  2F                 	db	47
   887  007ED7  20                 	db	32
   888  007ED8  25                 	db	37
   889  007ED9  64                 	db	100	;'d'
   890  007EDA  20                 	db	32
   891  007EDB  20                 	db	32
   892  007EDC  20                 	db	32
   893  007EDD  20                 	db	32
   894  007EDE  20                 	db	32
   895  007EDF  20                 	db	32
   896  007EE0  20                 	db	32
   897  007EE1  00                 	db	0
   898  007EE2                     STR_11:
   899                           
   900                           ; BSR set to: 1
   901  007EE2  20                 	db	32
   902  007EE3  20                 	db	32
   903  007EE4  20                 	db	32
   904  007EE5  25                 	db	37
   905  007EE6  33                 	db	51	;'3'
   906  007EE7  2E                 	db	46
   907  007EE8  33                 	db	51	;'3'
   908  007EE9  66                 	db	102	;'f'
   909  007EEA  20                 	db	32
   910  007EEB  6B                 	db	107	;'k'
   911  007EEC  67                 	db	103	;'g'
   912  007EED  20                 	db	32
   913  007EEE  20                 	db	32
   914  007EEF  20                 	db	32
   915  007EF0  20                 	db	32
   916  007EF1  20                 	db	32
   917  007EF2  20                 	db	32
   918  007EF3  00                 	db	0
   919  007EF4                     STR_1:
   920                           
   921                           ; BSR set to: 1
   922  007EF4  20                 	db	32
   923  007EF5  25                 	db	37
   924  007EF6  75                 	db	117	;'u'
   925  007EF7  25                 	db	37
   926  007EF8  75                 	db	117	;'u'
   927  007EF9  25                 	db	37
   928  007EFA  75                 	db	117	;'u'
   929  007EFB  2E                 	db	46
   930  007EFC  25                 	db	37
   931  007EFD  75                 	db	117	;'u'
   932  007EFE  25                 	db	37
   933  007EFF  75                 	db	117	;'u'
   934  007F00  25                 	db	37
   935  007F01  63                 	db	99	;'c'
   936  007F02  25                 	db	37
   937  007F03  75                 	db	117	;'u'
   938  007F04  20                 	db	32
   939  007F05  00                 	db	0
   940  007F06                     STR_2:
   941                           
   942                           ; BSR set to: 1
   943  007F06  20                 	db	32
   944  007F07  25                 	db	37
   945  007F08  75                 	db	117	;'u'
   946  007F09  25                 	db	37
   947  007F0A  75                 	db	117	;'u'
   948  007F0B  25                 	db	37
   949  007F0C  75                 	db	117	;'u'
   950  007F0D  2E                 	db	46
   951  007F0E  25                 	db	37
   952  007F0F  75                 	db	117	;'u'
   953  007F10  25                 	db	37
   954  007F11  63                 	db	99	;'c'
   955  007F12  25                 	db	37
   956  007F13  75                 	db	117	;'u'
   957  007F14  25                 	db	37
   958  007F15  75                 	db	117	;'u'
   959  007F16  20                 	db	32
   960  007F17  00                 	db	0
   961  007F18                     STR_4:
   962                           
   963                           ; BSR set to: 1
   964  007F18  20                 	db	32
   965  007F19  25                 	db	37
   966  007F1A  75                 	db	117	;'u'
   967  007F1B  25                 	db	37
   968  007F1C  75                 	db	117	;'u'
   969  007F1D  25                 	db	37
   970  007F1E  63                 	db	99	;'c'
   971  007F1F  25                 	db	37
   972  007F20  75                 	db	117	;'u'
   973  007F21  2E                 	db	46
   974  007F22  25                 	db	37
   975  007F23  75                 	db	117	;'u'
   976  007F24  25                 	db	37
   977  007F25  75                 	db	117	;'u'
   978  007F26  25                 	db	37
   979  007F27  75                 	db	117	;'u'
   980  007F28  20                 	db	32
   981  007F29  00                 	db	0
   982  007F2A                     STR_5:
   983                           
   984                           ; BSR set to: 1
   985  007F2A  20                 	db	32
   986  007F2B  25                 	db	37
   987  007F2C  75                 	db	117	;'u'
   988  007F2D  25                 	db	37
   989  007F2E  63                 	db	99	;'c'
   990  007F2F  25                 	db	37
   991  007F30  75                 	db	117	;'u'
   992  007F31  25                 	db	37
   993  007F32  75                 	db	117	;'u'
   994  007F33  2E                 	db	46
   995  007F34  25                 	db	37
   996  007F35  75                 	db	117	;'u'
   997  007F36  25                 	db	37
   998  007F37  75                 	db	117	;'u'
   999  007F38  25                 	db	37
  1000  007F39  75                 	db	117	;'u'
  1001  007F3A  20                 	db	32
  1002  007F3B  00                 	db	0
  1003  007F3C                     STR_6:
  1004                           
  1005                           ; BSR set to: 1
  1006  007F3C  20                 	db	32
  1007  007F3D  25                 	db	37
  1008  007F3E  63                 	db	99	;'c'
  1009  007F3F  25                 	db	37
  1010  007F40  75                 	db	117	;'u'
  1011  007F41  25                 	db	37
  1012  007F42  75                 	db	117	;'u'
  1013  007F43  25                 	db	37
  1014  007F44  75                 	db	117	;'u'
  1015  007F45  2E                 	db	46
  1016  007F46  25                 	db	37
  1017  007F47  75                 	db	117	;'u'
  1018  007F48  25                 	db	37
  1019  007F49  75                 	db	117	;'u'
  1020  007F4A  25                 	db	37
  1021  007F4B  75                 	db	117	;'u'
  1022  007F4C  20                 	db	32
  1023  007F4D  00                 	db	0
  1024  007F4E                     STR_3:
  1025                           
  1026                           ; BSR set to: 1
  1027  007F4E  20                 	db	32
  1028  007F4F  25                 	db	37
  1029  007F50  75                 	db	117	;'u'
  1030  007F51  25                 	db	37
  1031  007F52  75                 	db	117	;'u'
  1032  007F53  25                 	db	37
  1033  007F54  75                 	db	117	;'u'
  1034  007F55  2E                 	db	46
  1035  007F56  25                 	db	37
  1036  007F57  63                 	db	99	;'c'
  1037  007F58  25                 	db	37
  1038  007F59  75                 	db	117	;'u'
  1039  007F5A  25                 	db	37
  1040  007F5B  75                 	db	117	;'u'
  1041  007F5C  25                 	db	37
  1042  007F5D  75                 	db	117	;'u'
  1043  007F5E  20                 	db	32
  1044  007F5F  00                 	db	0
  1045  007F60                     STR_41:
  1046                           
  1047                           ; BSR set to: 1
  1048  007F60  20                 	db	32
  1049  007F61  20                 	db	32
  1050  007F62  20                 	db	32
  1051  007F63  20                 	db	32
  1052  007F64  20                 	db	32
  1053  007F65  30                 	db	48	;'0'
  1054  007F66  2E                 	db	46
  1055  007F67  35                 	db	53	;'5'
  1056  007F68  20                 	db	32
  1057  007F69  6B                 	db	107	;'k'
  1058  007F6A  67                 	db	103	;'g'
  1059  007F6B  20                 	db	32
  1060  007F6C  20                 	db	32
  1061  007F6D  20                 	db	32
  1062  007F6E  20                 	db	32
  1063  007F6F  20                 	db	32
  1064  007F70  00                 	db	0
  1065  007F71                     STR_43:
  1066                           
  1067                           ; BSR set to: 1
  1068  007F71  20                 	db	32
  1069  007F72  20                 	db	32
  1070  007F73  20                 	db	32
  1071  007F74  20                 	db	32
  1072  007F75  30                 	db	48	;'0'
  1073  007F76  2E                 	db	46
  1074  007F77  32                 	db	50	;'2'
  1075  007F78  35                 	db	53	;'5'
  1076  007F79  20                 	db	32
  1077  007F7A  6B                 	db	107	;'k'
  1078  007F7B  67                 	db	103	;'g'
  1079  007F7C  20                 	db	32
  1080  007F7D  20                 	db	32
  1081  007F7E  20                 	db	32
  1082  007F7F  20                 	db	32
  1083  007F80  20                 	db	32
  1084  007F81  00                 	db	0
  1085  007F82                     STR_22:
  1086                           
  1087                           ; BSR set to: 1
  1088  007F82  20                 	db	32
  1089  007F83  20                 	db	32
  1090  007F84  20                 	db	32
  1091  007F85  20                 	db	32
  1092  007F86  20                 	db	32
  1093  007F87  45                 	db	69	;'E'
  1094  007F88  72                 	db	114	;'r'
  1095  007F89  72                 	db	114	;'r'
  1096  007F8A  6F                 	db	111	;'o'
  1097  007F8B  6E                 	db	110	;'n'
  1098  007F8C  65                 	db	101	;'e'
  1099  007F8D  61                 	db	97	;'a'
  1100  007F8E  20                 	db	32
  1101  007F8F  20                 	db	32
  1102  007F90  20                 	db	32
  1103  007F91  20                 	db	32
  1104  007F92  00                 	db	0
  1105  007F93                     STR_24:
  1106                           
  1107                           ; BSR set to: 1
  1108  007F93  20                 	db	32
  1109  007F94  20                 	db	32
  1110  007F95  20                 	db	32
  1111  007F96  20                 	db	32
  1112  007F97  49                 	db	73	;'I'
  1113  007F98  6E                 	db	110	;'n'
  1114  007F99  69                 	db	105	;'i'
  1115  007F9A  63                 	db	99	;'c'
  1116  007F9B  69                 	db	105	;'i'
  1117  007F9C  61                 	db	97	;'a'
  1118  007F9D  64                 	db	100	;'d'
  1119  007F9E  6F                 	db	111	;'o'
  1120  007F9F  20                 	db	32
  1121  007FA0  20                 	db	32
  1122  007FA1  20                 	db	32
  1123  007FA2  20                 	db	32
  1124  007FA3  00                 	db	0
  1125  007FA4                     STR_25:
  1126                           
  1127                           ; BSR set to: 1
  1128  007FA4  20                 	db	32
  1129  007FA5  20                 	db	32
  1130  007FA6  20                 	db	32
  1131  007FA7  46                 	db	70	;'F'
  1132  007FA8  69                 	db	105	;'i'
  1133  007FA9  6E                 	db	110	;'n'
  1134  007FAA  61                 	db	97	;'a'
  1135  007FAB  6C                 	db	108	;'l'
  1136  007FAC  69                 	db	105	;'i'
  1137  007FAD  7A                 	db	122	;'z'
  1138  007FAE  61                 	db	97	;'a'
  1139  007FAF  64                 	db	100	;'d'
  1140  007FB0  6F                 	db	111	;'o'
  1141  007FB1  20                 	db	32
  1142  007FB2  20                 	db	32
  1143  007FB3  20                 	db	32
  1144  007FB4  00                 	db	0
  1145  007FB5                     STR_35:
  1146                           
  1147                           ; BSR set to: 1
  1148  007FB5  20                 	db	32
  1149  007FB6  20                 	db	32
  1150  007FB7  20                 	db	32
  1151  007FB8  20                 	db	32
  1152  007FB9  20                 	db	32
  1153  007FBA  20                 	db	32
  1154  007FBB  54                 	db	84	;'T'
  1155  007FBC  72                 	db	114	;'r'
  1156  007FBD  61                 	db	97	;'a'
  1157  007FBE  6E                 	db	110	;'n'
  1158  007FBF  63                 	db	99	;'c'
  1159  007FC0  61                 	db	97	;'a'
  1160  007FC1  64                 	db	100	;'d'
  1161  007FC2  61                 	db	97	;'a'
  1162  007FC3  20                 	db	32
  1163  007FC4  20                 	db	32
  1164  007FC5  00                 	db	0
  1165  007FC6                     STR_39:
  1166                           
  1167                           ; BSR set to: 1
  1168  007FC6  43                 	db	67	;'C'
  1169  007FC7  6F                 	db	111	;'o'
  1170  007FC8  72                 	db	114	;'r'
  1171  007FC9  74                 	db	116	;'t'
  1172  007FCA  65                 	db	101	;'e'
  1173  007FCB  20                 	db	32
  1174  007FCC  72                 	db	114	;'r'
  1175  007FCD  65                 	db	101	;'e'
  1176  007FCE  66                 	db	102	;'f'
  1177  007FCF  65                 	db	101	;'e'
  1178  007FD0  72                 	db	114	;'r'
  1179  007FD1  65                 	db	101	;'e'
  1180  007FD2  6E                 	db	110	;'n'
  1181  007FD3  63                 	db	99	;'c'
  1182  007FD4  69                 	db	105	;'i'
  1183  007FD5  61                 	db	97	;'a'
  1184  007FD6  00                 	db	0
  1185  007FD7                     STR_37:
  1186                           
  1187                           ; BSR set to: 1
  1188  007FD7  45                 	db	69	;'E'
  1189  007FD8  6D                 	db	109	;'m'
  1190  007FD9  70                 	db	112	;'p'
  1191  007FDA  65                 	db	101	;'e'
  1192  007FDB  7A                 	db	122	;'z'
  1193  007FDC  61                 	db	97	;'a'
  1194  007FDD  72                 	db	114	;'r'
  1195  007FDE  20                 	db	32
  1196  007FDF  61                 	db	97	;'a'
  1197  007FE0  20                 	db	32
  1198  007FE1  63                 	db	99	;'c'
  1199  007FE2  6F                 	db	111	;'o'
  1200  007FE3  72                 	db	114	;'r'
  1201  007FE4  74                 	db	116	;'t'
  1202  007FE5  61                 	db	97	;'a'
  1203  007FE6  72                 	db	114	;'r'
  1204  007FE7  00                 	db	0
  1205  007FE8                     STR_19:
  1206                           
  1207                           ; BSR set to: 1
  1208  007FE8  20                 	db	32
  1209  007FE9  20                 	db	32
  1210  007FEA  20                 	db	32
  1211  007FEB  20                 	db	32
  1212  007FEC  20                 	db	32
  1213  007FED  20                 	db	32
  1214  007FEE  25                 	db	37
  1215  007FEF  64                 	db	100	;'d'
  1216  007FF0  20                 	db	32
  1217  007FF1  20                 	db	32
  1218  007FF2  20                 	db	32
  1219  007FF3  20                 	db	32
  1220  007FF4  20                 	db	32
  1221  007FF5  20                 	db	32
  1222  007FF6  20                 	db	32
  1223  007FF7  00                 	db	0
  1224  007FF8                     STR_17:
  1225                           
  1226                           ; BSR set to: 1
  1227  007FF8  6B                 	db	107	;'k'
  1228  007FF9  67                 	db	103	;'g'
  1229  007FFA  20                 	db	32
  1230  007FFB  20                 	db	32
  1231  007FFC  20                 	db	32
  1232  007FFD  20                 	db	32
  1233  007FFE  00                 	db	0
  1234  0000                     
  1235                           ; #config settings
  1236  007FFF  00                 	db	0	; dummy byte at the end
  1237  0000                     
  1238                           	psect	cinit
  1239  006032                     __pcinit:
  1240                           	opt stack 0
  1241  006032                     start_initialization:
  1242                           	opt stack 0
  1243  006032                     __initialization:
  1244                           	opt stack 0
  1245                           
  1246                           ; Initialize objects allocated to BANK1 (44 bytes)
  1247                           ; load TBLPTR registers with __pidataBANK1
  1248  006032  0E36               	movlw	low __pidataBANK1
  1249  006034  6EF6               	movwf	tblptrl,c
  1250  006036  0E71               	movlw	high __pidataBANK1
  1251  006038  6EF7               	movwf	tblptrh,c
  1252  00603A  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1253  00603C  6EF8               	movwf	tblptru,c
  1254  00603E  EE01  F077         	lfsr	0,__pdataBANK1
  1255  006042  EE10 F02C          	lfsr	1,44
  1256  006046                     copy_data0:
  1257  006046  0009               	tblrd		*+
  1258  006048  CFF5 FFEE          	movff	tablat,postinc0
  1259  00604C  50E5               	movf	postdec1,w,c
  1260  00604E  50E1               	movf	fsr1l,w,c
  1261  006050  E1FA               	bnz	copy_data0
  1262                           
  1263                           ; Initialize objects allocated to BANK0 (16 bytes)
  1264                           ; load TBLPTR registers with __pidataBANK0
  1265  006052  0E29               	movlw	low __pidataBANK0
  1266  006054  6EF6               	movwf	tblptrl,c
  1267  006056  0E73               	movlw	high __pidataBANK0
  1268  006058  6EF7               	movwf	tblptrh,c
  1269  00605A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1270  00605C  6EF8               	movwf	tblptru,c
  1271  00605E  EE00  F0C9         	lfsr	0,__pdataBANK0
  1272  006062  EE10 F010          	lfsr	1,16
  1273  006066                     copy_data1:
  1274  006066  0009               	tblrd		*+
  1275  006068  CFF5 FFEE          	movff	tablat,postinc0
  1276  00606C  50E5               	movf	postdec1,w,c
  1277  00606E  50E1               	movf	fsr1l,w,c
  1278  006070  E1FA               	bnz	copy_data1
  1279                           
  1280                           ; Initialize objects allocated to COMRAM (17 bytes)
  1281                           ; load TBLPTR registers with __pidataCOMRAM
  1282  006072  0E18               	movlw	low __pidataCOMRAM
  1283  006074  6EF6               	movwf	tblptrl,c
  1284  006076  0E73               	movlw	high __pidataCOMRAM
  1285  006078  6EF7               	movwf	tblptrh,c
  1286  00607A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1287  00607C  6EF8               	movwf	tblptru,c
  1288  00607E  EE00  F04B         	lfsr	0,__pdataCOMRAM
  1289  006082  EE10 F011          	lfsr	1,17
  1290  006086                     copy_data2:
  1291  006086  0009               	tblrd		*+
  1292  006088  CFF5 FFEE          	movff	tablat,postinc0
  1293  00608C  50E5               	movf	postdec1,w,c
  1294  00608E  50E1               	movf	fsr1l,w,c
  1295  006090  E1FA               	bnz	copy_data2
  1296                           
  1297                           ; Clear objects allocated to BANK1 (29 bytes)
  1298  006092  EE01  F0A3         	lfsr	0,__pbssBANK1
  1299  006096  0E1D               	movlw	29
  1300  006098                     clear_0:
  1301  006098  6AEE               	clrf	postinc0,c
  1302  00609A  06E8               	decf	wreg,f,c
  1303  00609C  E1FD               	bnz	clear_0
  1304                           
  1305                           ; Clear objects allocated to BANK0 (36 bytes)
  1306  00609E  EE00  F0A5         	lfsr	0,__pbssBANK0
  1307  0060A2  0E24               	movlw	36
  1308  0060A4                     clear_1:
  1309  0060A4  6AEE               	clrf	postinc0,c
  1310  0060A6  06E8               	decf	wreg,f,c
  1311  0060A8  E1FD               	bnz	clear_1
  1312                           
  1313                           ; Clear objects allocated to COMRAM (20 bytes)
  1314  0060AA  EE00  F037         	lfsr	0,__pbssCOMRAM
  1315  0060AE  0E14               	movlw	20
  1316  0060B0                     clear_2:
  1317  0060B0  6AEE               	clrf	postinc0,c
  1318  0060B2  06E8               	decf	wreg,f,c
  1319  0060B4  E1FD               	bnz	clear_2
  1320  0060B6                     end_of_initialization:
  1321                           	opt stack 0
  1322  0060B6                     __end_of__initialization:
  1323                           	opt stack 0
  1324  0060B6  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1325  0060B8  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1326  0060BA  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1327  0060BC  6EF8               	movwf	tblptru,c
  1328  0060BE  0100               	movlb	0
  1329  0060C0  EFEF  F036         	goto	_main	;jump to C main() function
  1330                           tblptru	equ	0xFF8
  1331                           tblptrh	equ	0xFF7
  1332                           tblptrl	equ	0xFF6
  1333                           tablat	equ	0xFF5
  1334                           postinc0	equ	0xFEE
  1335                           wreg	equ	0xFE8
  1336                           postdec1	equ	0xFE5
  1337                           fsr1l	equ	0xFE1
  1338                           
  1339                           	psect	bssCOMRAM
  1340  000037                     __pbssCOMRAM:
  1341                           	opt stack 0
  1342  000037                     _processTimer:
  1343                           	opt stack 0
  1344  000037                     	ds	4
  1345  00003B                     _securTimer:
  1346                           	opt stack 0
  1347  00003B                     	ds	4
  1348  00003F                     _calFactor:
  1349                           	opt stack 0
  1350  00003F                     	ds	3
  1351  000042                     _questKMT:
  1352                           	opt stack 0
  1353  000042                     	ds	3
  1354  000045                     _DOWNisLP:
  1355                           	opt stack 0
  1356  000045                     	ds	1
  1357  000046                     _FC1securLock:
  1358                           	opt stack 0
  1359  000046                     	ds	1
  1360  000047                     _FC2securLock:
  1361                           	opt stack 0
  1362  000047                     	ds	1
  1363  000048                     _UPisLP:
  1364                           	opt stack 0
  1365  000048                     	ds	1
  1366  000049                     _screen_calibVelRes:
  1367                           	opt stack 0
  1368  000049                     	ds	1
  1369  00004A                     _selKMT:
  1370                           	opt stack 0
  1371  00004A                     	ds	1
  1372                           tblptru	equ	0xFF8
  1373                           tblptrh	equ	0xFF7
  1374                           tblptrl	equ	0xFF6
  1375                           tablat	equ	0xFF5
  1376                           postinc0	equ	0xFEE
  1377                           wreg	equ	0xFE8
  1378                           postdec1	equ	0xFE5
  1379                           fsr1l	equ	0xFE1
  1380                           
  1381                           	psect	dataCOMRAM
  1382  00004B                     __pdataCOMRAM:
  1383                           	opt stack 0
  1384  00004B                     _maxTimePerCut:
  1385                           	opt stack 0
  1386  00004B                     	ds	4
  1387  00004F                     _timeDOWN:
  1388                           	opt stack 0
  1389  00004F                     	ds	4
  1390  000053                     _pi:
  1391                           	opt stack 0
  1392  000053                     	ds	3
  1393  000056                     _tempkgXcorte:
  1394                           	opt stack 0
  1395  000056                     	ds	3
  1396  000059                     _timsXcorte:
  1397                           	opt stack 0
  1398  000059                     	ds	3
  1399                           tblptru	equ	0xFF8
  1400                           tblptrh	equ	0xFF7
  1401                           tblptrl	equ	0xFF6
  1402                           tablat	equ	0xFF5
  1403                           postinc0	equ	0xFEE
  1404                           wreg	equ	0xFE8
  1405                           postdec1	equ	0xFE5
  1406                           fsr1l	equ	0xFE1
  1407                           
  1408                           	psect	bssBANK0
  1409  0000A5                     __pbssBANK0:
  1410                           	opt stack 0
  1411  0000A5                     _chanValChar:
  1412                           	opt stack 0
  1413  0000A5                     	ds	6
  1414  0000AB                     _contra:
  1415                           	opt stack 0
  1416  0000AB                     	ds	4
  1417  0000AF                     _fData:
  1418                           	opt stack 0
  1419  0000AF                     	ds	3
  1420  0000B2                     _i16Data:
  1421                           	opt stack 0
  1422  0000B2                     	ds	2
  1423  0000B4                     _processState:
  1424                           	opt stack 0
  1425  0000B4                     	ds	2
  1426  0000B6                     _DOWNsecurLock:
  1427                           	opt stack 0
  1428  0000B6                     	ds	1
  1429  0000B7                     _ENTERsecurLock:
  1430                           	opt stack 0
  1431  0000B7                     	ds	1
  1432  0000B8                     _RETROisLP:
  1433                           	opt stack 0
  1434  0000B8                     	ds	1
  1435  0000B9                     _RETROsecurLock:
  1436                           	opt stack 0
  1437  0000B9                     	ds	1
  1438  0000BA                     _UPsecurLock:
  1439                           	opt stack 0
  1440  0000BA                     	ds	1
  1441  0000BB                     _calibMode:
  1442                           	opt stack 0
  1443  0000BB                     	ds	1
  1444  0000BC                     _holdDOWNcont:
  1445                           	opt stack 0
  1446  0000BC                     	ds	1
  1447  0000BD                     _holdENTERcont:
  1448                           	opt stack 0
  1449  0000BD                     	ds	1
  1450  0000BE                     _holdFC1cont:
  1451                           	opt stack 0
  1452  0000BE                     	ds	1
  1453  0000BF                     _holdFC2cont:
  1454                           	opt stack 0
  1455  0000BF                     	ds	1
  1456  0000C0                     _holdRETROcont:
  1457                           	opt stack 0
  1458  0000C0                     	ds	1
  1459  0000C1                     _ie:
  1460                           	opt stack 0
  1461  0000C1                     	ds	1
  1462  0000C2                     _lastSttFC1:
  1463                           	opt stack 0
  1464  0000C2                     	ds	1
  1465  0000C3                     _lastSttFC2:
  1466                           	opt stack 0
  1467  0000C3                     	ds	1
  1468  0000C4                     _processStarted:
  1469                           	opt stack 0
  1470  0000C4                     	ds	1
  1471  0000C5                     _ready2Cut:
  1472                           	opt stack 0
  1473  0000C5                     	ds	1
  1474  0000C6                     _t2Cont1:
  1475                           	opt stack 0
  1476  0000C6                     	ds	1
  1477  0000C7                     _t2Cont2:
  1478                           	opt stack 0
  1479  0000C7                     	ds	1
  1480  0000C8                     _tempLastScreen:
  1481                           	opt stack 0
  1482  0000C8                     	ds	1
  1483                           tblptru	equ	0xFF8
  1484                           tblptrh	equ	0xFF7
  1485                           tblptrl	equ	0xFF6
  1486                           tablat	equ	0xFF5
  1487                           postinc0	equ	0xFEE
  1488                           wreg	equ	0xFE8
  1489                           postdec1	equ	0xFE5
  1490                           fsr1l	equ	0xFE1
  1491                           
  1492                           	psect	dataBANK0
  1493  0000C9                     __pdataBANK0:
  1494                           	opt stack 0
  1495  0000C9                     lcd_init@F7567:
  1496                           	opt stack 0
  1497  0000C9                     	ds	4
  1498  0000CD                     _temptiXcorte:
  1499                           	opt stack 0
  1500  0000CD                     	ds	3
  1501  0000D0                     _numCortes:
  1502                           	opt stack 0
  1503  0000D0                     	ds	2
  1504  0000D2                     _tempNumCortes:
  1505                           	opt stack 0
  1506  0000D2                     	ds	2
  1507  0000D4                     _bladeIsUP:
  1508                           	opt stack 0
  1509  0000D4                     	ds	1
  1510  0000D5                     _lastSttDOWN:
  1511                           	opt stack 0
  1512  0000D5                     	ds	1
  1513  0000D6                     _lastSttENTER:
  1514                           	opt stack 0
  1515  0000D6                     	ds	1
  1516  0000D7                     _lastSttRETRO:
  1517                           	opt stack 0
  1518  0000D7                     	ds	1
  1519  0000D8                     _lastSttUP:
  1520                           	opt stack 0
  1521  0000D8                     	ds	1
  1522                           tblptru	equ	0xFF8
  1523                           tblptrh	equ	0xFF7
  1524                           tblptrl	equ	0xFF6
  1525                           tablat	equ	0xFF5
  1526                           postinc0	equ	0xFEE
  1527                           wreg	equ	0xFE8
  1528                           postdec1	equ	0xFE5
  1529                           fsr1l	equ	0xFE1
  1530                           
  1531                           	psect	bssBANK1
  1532  0001A3                     __pbssBANK1:
  1533                           	opt stack 0
  1534  0001A3                     _chanValdig:
  1535                           	opt stack 0
  1536  0001A3                     	ds	6
  1537  0001A9                     _introducido:
  1538                           	opt stack 0
  1539  0001A9                     	ds	4
  1540  0001AD                     _passChar:
  1541                           	opt stack 0
  1542  0001AD                     	ds	4
  1543  0001B1                     _chanValf:
  1544                           	opt stack 0
  1545  0001B1                     	ds	3
  1546  0001B4                     _chanVals:
  1547                           	opt stack 0
  1548  0001B4                     	ds	2
  1549  0001B6                     _questSN:
  1550                           	opt stack 0
  1551  0001B6                     	ds	2
  1552  0001B8                     _ENTERisLP:
  1553                           	opt stack 0
  1554  0001B8                     	ds	1
  1555  0001B9                     _actualScreen:
  1556                           	opt stack 0
  1557  0001B9                     	ds	1
  1558  0001BA                     _calibLevel:
  1559                           	opt stack 0
  1560  0001BA                     	ds	1
  1561  0001BB                     _fd:
  1562                           	opt stack 0
  1563  0001BB                     	ds	1
  1564  0001BC                     _holdUPcont:
  1565                           	opt stack 0
  1566  0001BC                     	ds	1
  1567  0001BD                     _menuSection:
  1568                           	opt stack 0
  1569  0001BD                     	ds	1
  1570  0001BE                     _passSection:
  1571                           	opt stack 0
  1572  0001BE                     	ds	1
  1573  0001BF                     _selSN:
  1574                           	opt stack 0
  1575  0001BF                     	ds	1
  1576                           tblptru	equ	0xFF8
  1577                           tblptrh	equ	0xFF7
  1578                           tblptrl	equ	0xFF6
  1579                           tablat	equ	0xFF5
  1580                           postinc0	equ	0xFEE
  1581                           wreg	equ	0xFE8
  1582                           postdec1	equ	0xFE5
  1583                           fsr1l	equ	0xFE1
  1584                           
  1585                           	psect	dataBANK1
  1586  000177                     __pdataBANK1:
  1587                           	opt stack 0
  1588  000177                     _exp10:
  1589                           	opt stack 0
  1590  000177                     	ds	24
  1591  00018F                     _kgXcorte:
  1592                           	opt stack 0
  1593  00018F                     	ds	3
  1594  000192                     _tempVelocidadMasa3:
  1595                           	opt stack 0
  1596  000192                     	ds	3
  1597  000195                     _tiXcorte:
  1598                           	opt stack 0
  1599  000195                     	ds	3
  1600  000198                     _velocidadMasa:
  1601                           	opt stack 0
  1602  000198                     	ds	3
  1603  00019B                     _chanValSection:
  1604                           	opt stack 0
  1605  00019B                     	ds	1
  1606  00019C                     _flech:
  1607                           	opt stack 0
  1608  00019C                     	ds	1
  1609  00019D                     _tempVelocidadMasa1:
  1610                           	opt stack 0
  1611  00019D                     	ds	3
  1612  0001A0                     _tempVelocidadMasa2:
  1613                           	opt stack 0
  1614  0001A0                     	ds	3
  1615                           tblptru	equ	0xFF8
  1616                           tblptrh	equ	0xFF7
  1617                           tblptrl	equ	0xFF6
  1618                           tablat	equ	0xFF5
  1619                           postinc0	equ	0xFEE
  1620                           wreg	equ	0xFE8
  1621                           postdec1	equ	0xFE5
  1622                           fsr1l	equ	0xFE1
  1623                           
  1624                           	psect	cstackBANK1
  1625  000100                     __pcstackBANK1:
  1626                           	opt stack 0
  1627  000100                     ??_isdigit:
  1628  000100                     ??_lcd_read_4bits:
  1629  000100                     ??_checkPass:
  1630  000100                     ??_chanValDigUP:
  1631  000100                     ??_chanValDigDOWN:
  1632  000100                     ?___awmod:
  1633                           	opt stack 0
  1634  000100                     ?___ftpack:
  1635                           	opt stack 0
  1636  000100                     ?___ftneg:
  1637                           	opt stack 0
  1638  000100                     ?__tdiv_to_l_:
  1639                           	opt stack 0
  1640  000100                     ?__div_to_l_:
  1641                           	opt stack 0
  1642  000100                     ?___lmul:
  1643                           	opt stack 0
  1644  000100                     ?___aldiv:
  1645                           	opt stack 0
  1646  000100                     ?___lldiv:
  1647                           	opt stack 0
  1648  000100                     _lcd_send_4bits$1688:
  1649                           	opt stack 0
  1650  000100                     putchUART@val:
  1651                           	opt stack 0
  1652  000100                     writeEEPROM@data:
  1653                           	opt stack 0
  1654  000100                     readEEPROM@adr:
  1655                           	opt stack 0
  1656  000100                     setPWM2on@on:
  1657                           	opt stack 0
  1658  000100                     delay_ms@del:
  1659                           	opt stack 0
  1660  000100                     setPWM2duty@actuator:
  1661                           	opt stack 0
  1662  000100                     ___awmod@dividend:
  1663                           	opt stack 0
  1664  000100                     __div_to_l_@f1:
  1665                           	opt stack 0
  1666  000100                     ___ftpack@arg:
  1667                           	opt stack 0
  1668  000100                     __tdiv_to_l_@f1:
  1669                           	opt stack 0
  1670  000100                     ___ftge@ff1:
  1671                           	opt stack 0
  1672  000100                     ___ftneg@f1:
  1673                           	opt stack 0
  1674  000100                     ___lmul@multiplier:
  1675                           	opt stack 0
  1676  000100                     ___aldiv@dividend:
  1677                           	opt stack 0
  1678  000100                     ___lldiv@dividend:
  1679                           	opt stack 0
  1680                           
  1681                           ; 4 bytes @ 0x0
  1682  000100                     	ds	1
  1683  000101                     lcd_read_4bits@n:
  1684                           	opt stack 0
  1685  000101                     _lcd_send_4bits$1689:
  1686                           	opt stack 0
  1687  000101                     writeEEPROM@adr:
  1688                           	opt stack 0
  1689  000101                     _isdigit$2512:
  1690                           	opt stack 0
  1691                           
  1692                           ; 1 bytes @ 0x1
  1693  000101                     	ds	1
  1694  000102                     ??_delay_ms:
  1695  000102                     ??_setPWM2duty:
  1696  000102                     lcd_read_byte@low:
  1697                           	opt stack 0
  1698  000102                     _lcd_send_4bits$1690:
  1699                           	opt stack 0
  1700  000102                     isdigit@c:
  1701                           	opt stack 0
  1702  000102                     ___awmod@divisor:
  1703                           	opt stack 0
  1704                           
  1705                           ; 2 bytes @ 0x2
  1706  000102                     	ds	1
  1707  000103                     lcd_read_byte@high:
  1708                           	opt stack 0
  1709  000103                     _lcd_send_4bits$1691:
  1710                           	opt stack 0
  1711  000103                     ___ftpack@exp:
  1712                           	opt stack 0
  1713  000103                     delay_ms@i:
  1714                           	opt stack 0
  1715  000103                     __div_to_l_@f2:
  1716                           	opt stack 0
  1717  000103                     __tdiv_to_l_@f2:
  1718                           	opt stack 0
  1719  000103                     ___ftge@ff2:
  1720                           	opt stack 0
  1721                           
  1722                           ; 3 bytes @ 0x3
  1723  000103                     	ds	1
  1724  000104                     lcd_send_4bits@n:
  1725                           	opt stack 0
  1726  000104                     checkPass@passOK:
  1727                           	opt stack 0
  1728  000104                     ___awmod@counter:
  1729                           	opt stack 0
  1730  000104                     ___ftpack@sign:
  1731                           	opt stack 0
  1732  000104                     setPWM2duty@act:
  1733                           	opt stack 0
  1734  000104                     ___lmul@multiplicand:
  1735                           	opt stack 0
  1736  000104                     ___aldiv@divisor:
  1737                           	opt stack 0
  1738  000104                     ___lldiv@divisor:
  1739                           	opt stack 0
  1740                           
  1741                           ; 4 bytes @ 0x4
  1742  000104                     	ds	1
  1743  000105                     ??___ftpack:
  1744  000105                     lcd_send_byte@n:
  1745                           	opt stack 0
  1746  000105                     ___awmod@sign:
  1747                           	opt stack 0
  1748  000105                     checkPass@i:
  1749                           	opt stack 0
  1750                           
  1751                           ; 2 bytes @ 0x5
  1752  000105                     	ds	1
  1753  000106                     ??__tdiv_to_l_:
  1754  000106                     ??_lcd_send_byte:
  1755  000106                     ??___ftge:
  1756  000106                     ?___awdiv:
  1757                           	opt stack 0
  1758  000106                     initProtocoll@init:
  1759                           	opt stack 0
  1760  000106                     ___awdiv@dividend:
  1761                           	opt stack 0
  1762  000106                     __div_to_l_@quot:
  1763                           	opt stack 0
  1764                           
  1765                           ; 4 bytes @ 0x6
  1766  000106                     	ds	1
  1767  000107                     lcd_send_byte@address:
  1768                           	opt stack 0
  1769                           
  1770                           ; 1 bytes @ 0x7
  1771  000107                     	ds	1
  1772  000108                     ??_lcd_init:
  1773  000108                     ?___altoft:
  1774                           	opt stack 0
  1775  000108                     ?___lltoft:
  1776                           	opt stack 0
  1777  000108                     lcd_gotoxy@fila:
  1778                           	opt stack 0
  1779  000108                     ___aldiv@counter:
  1780                           	opt stack 0
  1781  000108                     ___awdiv@divisor:
  1782                           	opt stack 0
  1783  000108                     ___lmul@product:
  1784                           	opt stack 0
  1785  000108                     ___altoft@c:
  1786                           	opt stack 0
  1787  000108                     ___lldiv@quotient:
  1788                           	opt stack 0
  1789  000108                     ___lltoft@c:
  1790                           	opt stack 0
  1791                           
  1792                           ; 4 bytes @ 0x8
  1793  000108                     	ds	1
  1794  000109                     lcd_gotoxy@pos:
  1795                           	opt stack 0
  1796  000109                     ___aldiv@sign:
  1797                           	opt stack 0
  1798  000109                     lcd_init@LCD_INIT_STRING:
  1799                           	opt stack 0
  1800  000109                     __tdiv_to_l_@quot:
  1801                           	opt stack 0
  1802                           
  1803                           ; 4 bytes @ 0x9
  1804  000109                     	ds	1
  1805  00010A                     lcd_gotoxy@address:
  1806                           	opt stack 0
  1807  00010A                     ___awdiv@counter:
  1808                           	opt stack 0
  1809  00010A                     __div_to_l_@cntr:
  1810                           	opt stack 0
  1811  00010A                     ___aldiv@quotient:
  1812                           	opt stack 0
  1813                           
  1814                           ; 4 bytes @ 0xA
  1815  00010A                     	ds	1
  1816  00010B                     ??_lcd_putc:
  1817  00010B                     ___awdiv@sign:
  1818                           	opt stack 0
  1819  00010B                     __div_to_l_@exp1:
  1820                           	opt stack 0
  1821                           
  1822                           ; 1 bytes @ 0xB
  1823  00010B                     	ds	1
  1824  00010C                     ??___altoft:
  1825  00010C                     ??___lltoft:
  1826  00010C                     lcd_putc@cha:
  1827                           	opt stack 0
  1828  00010C                     ___lldiv@counter:
  1829                           	opt stack 0
  1830  00010C                     ___awdiv@quotient:
  1831                           	opt stack 0
  1832                           
  1833                           ; 2 bytes @ 0xC
  1834  00010C                     	ds	1
  1835  00010D                     ?___llmod:
  1836                           	opt stack 0
  1837  00010D                     lcd_init@i:
  1838                           	opt stack 0
  1839  00010D                     putch@val:
  1840                           	opt stack 0
  1841  00010D                     __tdiv_to_l_@cntr:
  1842                           	opt stack 0
  1843  00010D                     ___llmod@dividend:
  1844                           	opt stack 0
  1845                           
  1846                           ; 4 bytes @ 0xD
  1847  00010D                     	ds	1
  1848  00010E                     ?___wmul:
  1849                           	opt stack 0
  1850  00010E                     __tdiv_to_l_@exp1:
  1851                           	opt stack 0
  1852  00010E                     ___wmul@multiplier:
  1853                           	opt stack 0
  1854                           
  1855                           ; 2 bytes @ 0xE
  1856  00010E                     	ds	2
  1857  000110                     ___altoft@exp:
  1858                           	opt stack 0
  1859  000110                     ___lltoft@exp:
  1860                           	opt stack 0
  1861  000110                     ___wmul@multiplicand:
  1862                           	opt stack 0
  1863                           
  1864                           ; 2 bytes @ 0x10
  1865  000110                     	ds	1
  1866  000111                     ___altoft@sign:
  1867                           	opt stack 0
  1868  000111                     ___llmod@divisor:
  1869                           	opt stack 0
  1870                           
  1871                           ; 4 bytes @ 0x11
  1872  000111                     	ds	1
  1873  000112                     ?___ftdiv:
  1874                           	opt stack 0
  1875  000112                     ___wmul@product:
  1876                           	opt stack 0
  1877  000112                     ___ftdiv@f1:
  1878                           	opt stack 0
  1879                           
  1880                           ; 3 bytes @ 0x12
  1881  000112                     	ds	2
  1882  000114                     ?___ftmul:
  1883                           	opt stack 0
  1884  000114                     ___ftmul@f1:
  1885                           	opt stack 0
  1886                           
  1887                           ; 3 bytes @ 0x14
  1888  000114                     	ds	1
  1889  000115                     ___llmod@counter:
  1890                           	opt stack 0
  1891  000115                     ___ftdiv@f2:
  1892                           	opt stack 0
  1893                           
  1894                           ; 3 bytes @ 0x15
  1895  000115                     	ds	2
  1896  000117                     ___ftmul@f2:
  1897                           	opt stack 0
  1898                           
  1899                           ; 3 bytes @ 0x17
  1900  000117                     	ds	1
  1901  000118                     ??___ftdiv:
  1902                           
  1903                           ; 1 bytes @ 0x18
  1904  000118                     	ds	2
  1905  00011A                     ??___ftmul:
  1906                           
  1907                           ; 1 bytes @ 0x1A
  1908  00011A                     	ds	1
  1909  00011B                     ___ftdiv@cntr:
  1910                           	opt stack 0
  1911                           
  1912                           ; 1 bytes @ 0x1B
  1913  00011B                     	ds	1
  1914  00011C                     ___ftdiv@f3:
  1915                           	opt stack 0
  1916                           
  1917                           ; 3 bytes @ 0x1C
  1918  00011C                     	ds	1
  1919  00011D                     ___ftmul@exp:
  1920                           	opt stack 0
  1921                           
  1922                           ; 1 bytes @ 0x1D
  1923  00011D                     	ds	1
  1924  00011E                     ___ftmul@f3_as_product:
  1925                           	opt stack 0
  1926                           
  1927                           ; 3 bytes @ 0x1E
  1928  00011E                     	ds	1
  1929  00011F                     ___ftdiv@exp:
  1930                           	opt stack 0
  1931                           
  1932                           ; 1 bytes @ 0x1F
  1933  00011F                     	ds	1
  1934  000120                     ___ftdiv@sign:
  1935                           	opt stack 0
  1936                           
  1937                           ; 1 bytes @ 0x20
  1938  000120                     	ds	1
  1939  000121                     ??_integrator:
  1940  000121                     ___ftmul@cntr:
  1941                           	opt stack 0
  1942                           
  1943                           ; 1 bytes @ 0x21
  1944  000121                     	ds	1
  1945  000122                     ___ftmul@sign:
  1946                           	opt stack 0
  1947                           
  1948                           ; 1 bytes @ 0x22
  1949  000122                     	ds	1
  1950  000123                     ?_fround:
  1951                           	opt stack 0
  1952  000123                     ?_scale:
  1953                           	opt stack 0
  1954  000123                     confirmEdition@yes:
  1955                           	opt stack 0
  1956  000123                     calcSysVars@temp:
  1957                           	opt stack 0
  1958  000123                     integrator@acum:
  1959                           	opt stack 0
  1960                           
  1961                           ; 4 bytes @ 0x23
  1962  000123                     	ds	3
  1963  000126                     _fround$3020:
  1964                           	opt stack 0
  1965  000126                     _scale$3021:
  1966                           	opt stack 0
  1967                           
  1968                           ; 3 bytes @ 0x26
  1969  000126                     	ds	1
  1970  000127                     integrator@temp:
  1971                           	opt stack 0
  1972                           
  1973                           ; 4 bytes @ 0x27
  1974  000127                     	ds	2
  1975  000129                     scale@scl:
  1976                           	opt stack 0
  1977  000129                     _fround$3019:
  1978                           	opt stack 0
  1979                           
  1980                           ; 3 bytes @ 0x29
  1981  000129                     	ds	1
  1982  00012A                     ?___fttol:
  1983                           	opt stack 0
  1984  00012A                     ___fttol@f1:
  1985                           	opt stack 0
  1986                           
  1987                           ; 3 bytes @ 0x2A
  1988  00012A                     	ds	1
  1989  00012B                     integrator@i:
  1990                           	opt stack 0
  1991                           
  1992                           ; 2 bytes @ 0x2B
  1993  00012B                     	ds	1
  1994  00012C                     fround@prec:
  1995                           	opt stack 0
  1996                           
  1997                           ; 1 bytes @ 0x2C
  1998  00012C                     	ds	1
  1999  00012D                     ?___ftadd:
  2000                           	opt stack 0
  2001  00012D                     ___ftadd@f1:
  2002                           	opt stack 0
  2003                           
  2004                           ; 3 bytes @ 0x2D
  2005  00012D                     	ds	1
  2006  00012E                     ??___fttol:
  2007                           
  2008                           ; 1 bytes @ 0x2E
  2009  00012E                     	ds	2
  2010  000130                     ___ftadd@f2:
  2011                           	opt stack 0
  2012                           
  2013                           ; 3 bytes @ 0x30
  2014  000130                     	ds	3
  2015  000133                     ??___ftadd:
  2016  000133                     ___fttol@sign1:
  2017                           	opt stack 0
  2018                           
  2019                           ; 1 bytes @ 0x33
  2020  000133                     	ds	1
  2021  000134                     ___fttol@lval:
  2022                           	opt stack 0
  2023                           
  2024                           ; 4 bytes @ 0x34
  2025  000134                     	ds	2
  2026  000136                     ___ftadd@sign:
  2027                           	opt stack 0
  2028                           
  2029                           ; 1 bytes @ 0x36
  2030  000136                     	ds	1
  2031  000137                     ___ftadd@exp2:
  2032                           	opt stack 0
  2033                           
  2034                           ; 1 bytes @ 0x37
  2035  000137                     	ds	1
  2036  000138                     ___ftadd@exp1:
  2037                           	opt stack 0
  2038  000138                     ___fttol@exp1:
  2039                           	opt stack 0
  2040                           
  2041                           ; 1 bytes @ 0x38
  2042  000138                     	ds	1
  2043  000139                     ??_desintegrator:
  2044  000139                     ?___ftsub:
  2045                           	opt stack 0
  2046  000139                     ___ftsub@f1:
  2047                           	opt stack 0
  2048                           
  2049                           ; 3 bytes @ 0x39
  2050  000139                     	ds	2
  2051  00013B                     desintegrator@temp:
  2052                           	opt stack 0
  2053                           
  2054                           ; 3 bytes @ 0x3B
  2055  00013B                     	ds	1
  2056  00013C                     ___ftsub@f2:
  2057                           	opt stack 0
  2058                           
  2059                           ; 3 bytes @ 0x3C
  2060  00013C                     	ds	2
  2061  00013E                     desintegrator@tempL:
  2062                           	opt stack 0
  2063                           
  2064                           ; 4 bytes @ 0x3E
  2065  00013E                     	ds	1
  2066  00013F                     ?_printf:
  2067                           	opt stack 0
  2068  00013F                     printf@f:
  2069                           	opt stack 0
  2070                           
  2071                           ; 2 bytes @ 0x3F
  2072  00013F                     	ds	3
  2073  000142                     desintegrator@temp3:
  2074                           	opt stack 0
  2075                           
  2076                           ; 4 bytes @ 0x42
  2077  000142                     	ds	4
  2078  000146                     desintegrator@temp2:
  2079                           	opt stack 0
  2080                           
  2081                           ; 4 bytes @ 0x46
  2082  000146                     	ds	4
  2083  00014A                     desintegrator@i:
  2084                           	opt stack 0
  2085                           
  2086                           ; 2 bytes @ 0x4A
  2087  00014A                     	ds	2
  2088  00014C                     longPressENTER@temp:
  2089                           	opt stack 0
  2090                           
  2091                           ; 3 bytes @ 0x4C
  2092  00014C                     	ds	3
  2093  00014F                     _longPressENTER$3018:
  2094                           	opt stack 0
  2095                           
  2096                           ; 3 bytes @ 0x4F
  2097  00014F                     	ds	2
  2098  000151                     ??_printf:
  2099                           
  2100                           ; 1 bytes @ 0x51
  2101  000151                     	ds	1
  2102  000152                     
  2103                           ; 1 bytes @ 0x52
  2104  000152                     	ds	5
  2105  000157                     _printf$3022:
  2106                           	opt stack 0
  2107                           
  2108                           ; 3 bytes @ 0x57
  2109  000157                     	ds	3
  2110  00015A                     printf@cp:
  2111                           	opt stack 0
  2112                           
  2113                           ; 2 bytes @ 0x5A
  2114  00015A                     	ds	2
  2115  00015C                     printf@len:
  2116                           	opt stack 0
  2117                           
  2118                           ; 2 bytes @ 0x5C
  2119  00015C                     	ds	2
  2120  00015E                     printf@ap:
  2121                           	opt stack 0
  2122                           
  2123                           ; 2 bytes @ 0x5E
  2124  00015E                     	ds	2
  2125  000160                     printf@flag:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x60
  2129  000160                     	ds	2
  2130  000162                     printf@tmpval:
  2131                           	opt stack 0
  2132                           
  2133                           ; 4 bytes @ 0x62
  2134  000162                     	ds	4
  2135  000166                     printf@val:
  2136                           	opt stack 0
  2137                           
  2138                           ; 4 bytes @ 0x66
  2139  000166                     	ds	4
  2140  00016A                     printf@exp:
  2141                           	opt stack 0
  2142                           
  2143                           ; 2 bytes @ 0x6A
  2144  00016A                     	ds	2
  2145  00016C                     printf@width:
  2146                           	opt stack 0
  2147                           
  2148                           ; 2 bytes @ 0x6C
  2149  00016C                     	ds	2
  2150  00016E                     printf@fval:
  2151                           	opt stack 0
  2152                           
  2153                           ; 3 bytes @ 0x6E
  2154  00016E                     	ds	3
  2155  000171                     printf@prec:
  2156                           	opt stack 0
  2157                           
  2158                           ; 2 bytes @ 0x71
  2159  000171                     	ds	2
  2160  000173                     printf@c:
  2161                           	opt stack 0
  2162                           
  2163                           ; 1 bytes @ 0x73
  2164  000173                     	ds	1
  2165  000174                     drawMenu@adv:
  2166                           	opt stack 0
  2167  000174                     drawAdvON@on:
  2168                           	opt stack 0
  2169  000174                     drawPassWord@i:
  2170                           	opt stack 0
  2171  000174                     drawSNquest@i:
  2172                           	opt stack 0
  2173                           
  2174                           ; 2 bytes @ 0x74
  2175  000174                     	ds	2
  2176  000176                     drawSNquest@tq:
  2177                           	opt stack 0
  2178                           
  2179                           ; 1 bytes @ 0x76
  2180  000176                     	ds	1
  2181  000177                     tblptru	equ	0xFF8
  2182                           tblptrh	equ	0xFF7
  2183                           tblptrl	equ	0xFF6
  2184                           tablat	equ	0xFF5
  2185                           postinc0	equ	0xFEE
  2186                           wreg	equ	0xFE8
  2187                           postdec1	equ	0xFE5
  2188                           fsr1l	equ	0xFE1
  2189                           
  2190                           ; 1 bytes @ 0x77
  2191                           
  2192                           	psect	cstackBANK0
  2193  000060                     __pcstackBANK0:
  2194                           	opt stack 0
  2195  000060                     ??i1_checkPass:
  2196  000060                     ??i1_chanValDigUP:
  2197  000060                     ??i1_chanValDigDOWN:
  2198  000060                     ?i1___ftpack:
  2199                           	opt stack 0
  2200  000060                     ?i1___lmul:
  2201                           	opt stack 0
  2202  000060                     ?i1___aldiv:
  2203                           	opt stack 0
  2204  000060                     ?i1___fttol:
  2205                           	opt stack 0
  2206  000060                     i1putchUART@val:
  2207                           	opt stack 0
  2208  000060                     i1writeEEPROM@data:
  2209                           	opt stack 0
  2210  000060                     i1readEEPROM@adr:
  2211                           	opt stack 0
  2212  000060                     i1setPWM2duty@actuator:
  2213                           	opt stack 0
  2214  000060                     i1___ftpack@arg:
  2215                           	opt stack 0
  2216  000060                     i1___fttol@f1:
  2217                           	opt stack 0
  2218  000060                     i1___lmul@multiplier:
  2219                           	opt stack 0
  2220  000060                     i1___aldiv@dividend:
  2221                           	opt stack 0
  2222                           
  2223                           ; 4 bytes @ 0x0
  2224  000060                     	ds	1
  2225  000061                     i1writeEEPROM@adr:
  2226                           	opt stack 0
  2227                           
  2228                           ; 1 bytes @ 0x1
  2229  000061                     	ds	1
  2230  000062                     ??i1_setPWM2duty:
  2231                           
  2232                           ; 1 bytes @ 0x2
  2233  000062                     	ds	1
  2234  000063                     i1___ftpack@exp:
  2235                           	opt stack 0
  2236                           
  2237                           ; 1 bytes @ 0x3
  2238  000063                     	ds	1
  2239  000064                     ??i1___fttol:
  2240  000064                     i1checkPass@passOK:
  2241                           	opt stack 0
  2242  000064                     i1___ftpack@sign:
  2243                           	opt stack 0
  2244  000064                     i1setPWM2duty@act:
  2245                           	opt stack 0
  2246  000064                     i1___lmul@multiplicand:
  2247                           	opt stack 0
  2248  000064                     i1___aldiv@divisor:
  2249                           	opt stack 0
  2250                           
  2251                           ; 4 bytes @ 0x4
  2252  000064                     	ds	1
  2253  000065                     ??i1___ftpack:
  2254  000065                     i1checkPass@i:
  2255                           	opt stack 0
  2256                           
  2257                           ; 2 bytes @ 0x5
  2258  000065                     	ds	1
  2259  000066                     i1initProtocoll@init:
  2260                           	opt stack 0
  2261                           
  2262                           ; 1 bytes @ 0x6
  2263  000066                     	ds	1
  2264  000067                     ??_T2int:
  2265  000067                     
  2266                           ; 1 bytes @ 0x7
  2267  000067                     	ds	1
  2268  000068                     ?i1___altoft:
  2269                           	opt stack 0
  2270  000068                     ?i1___ftadd:
  2271                           	opt stack 0
  2272  000068                     ?i1___ftmul:
  2273                           	opt stack 0
  2274  000068                     i1___aldiv@counter:
  2275                           	opt stack 0
  2276  000068                     i1___ftadd@f1:
  2277                           	opt stack 0
  2278  000068                     i1___ftmul@f1:
  2279                           	opt stack 0
  2280  000068                     i1___lmul@product:
  2281                           	opt stack 0
  2282  000068                     i1___altoft@c:
  2283                           	opt stack 0
  2284                           
  2285                           ; 4 bytes @ 0x8
  2286  000068                     	ds	1
  2287  000069                     i1___aldiv@sign:
  2288                           	opt stack 0
  2289  000069                     i1___fttol@sign1:
  2290                           	opt stack 0
  2291                           
  2292                           ; 1 bytes @ 0x9
  2293  000069                     	ds	1
  2294  00006A                     i1___aldiv@quotient:
  2295                           	opt stack 0
  2296  00006A                     i1___fttol@lval:
  2297                           	opt stack 0
  2298                           
  2299                           ; 4 bytes @ 0xA
  2300  00006A                     	ds	1
  2301  00006B                     i1___ftadd@f2:
  2302                           	opt stack 0
  2303  00006B                     i1___ftmul@f2:
  2304                           	opt stack 0
  2305                           
  2306                           ; 3 bytes @ 0xB
  2307  00006B                     	ds	1
  2308  00006C                     ??i1___altoft:
  2309                           
  2310                           ; 1 bytes @ 0xC
  2311  00006C                     	ds	2
  2312  00006E                     ??i1___ftadd:
  2313  00006E                     ??i1___ftmul:
  2314  00006E                     i1___fttol@exp1:
  2315                           	opt stack 0
  2316                           
  2317                           ; 1 bytes @ 0xE
  2318  00006E                     	ds	2
  2319  000070                     i1___altoft@exp:
  2320                           	opt stack 0
  2321                           
  2322                           ; 1 bytes @ 0x10
  2323  000070                     	ds	1
  2324  000071                     i1___altoft@sign:
  2325                           	opt stack 0
  2326  000071                     i1___ftadd@sign:
  2327                           	opt stack 0
  2328  000071                     i1___ftmul@exp:
  2329                           	opt stack 0
  2330                           
  2331                           ; 1 bytes @ 0x11
  2332  000071                     	ds	1
  2333  000072                     ?i1___ftdiv:
  2334                           	opt stack 0
  2335  000072                     i1___ftadd@exp2:
  2336                           	opt stack 0
  2337  000072                     i1___ftdiv@f1:
  2338                           	opt stack 0
  2339  000072                     i1___ftmul@f3_as_product:
  2340                           	opt stack 0
  2341                           
  2342                           ; 3 bytes @ 0x12
  2343  000072                     	ds	1
  2344  000073                     i1___ftadd@exp1:
  2345                           	opt stack 0
  2346                           
  2347                           ; 1 bytes @ 0x13
  2348  000073                     	ds	2
  2349  000075                     i1___ftmul@cntr:
  2350                           	opt stack 0
  2351  000075                     i1___ftdiv@f2:
  2352                           	opt stack 0
  2353                           
  2354                           ; 3 bytes @ 0x15
  2355  000075                     	ds	1
  2356  000076                     i1___ftmul@sign:
  2357                           	opt stack 0
  2358                           
  2359                           ; 1 bytes @ 0x16
  2360  000076                     	ds	1
  2361  000077                     ??i1_desintegrator:
  2362  000077                     i1calcSysVars@temp:
  2363                           	opt stack 0
  2364                           
  2365                           ; 3 bytes @ 0x17
  2366  000077                     	ds	1
  2367  000078                     ??i1___ftdiv:
  2368                           
  2369                           ; 1 bytes @ 0x18
  2370  000078                     	ds	1
  2371  000079                     i1desintegrator@temp:
  2372                           	opt stack 0
  2373                           
  2374                           ; 3 bytes @ 0x19
  2375  000079                     	ds	1
  2376  00007A                     
  2377                           ; 1 bytes @ 0x1A
  2378  00007A                     	ds	1
  2379  00007B                     i1___ftdiv@cntr:
  2380                           	opt stack 0
  2381                           
  2382                           ; 1 bytes @ 0x1B
  2383  00007B                     	ds	1
  2384  00007C                     i1___ftdiv@f3:
  2385                           	opt stack 0
  2386  00007C                     i1desintegrator@tempL:
  2387                           	opt stack 0
  2388                           
  2389                           ; 4 bytes @ 0x1C
  2390  00007C                     	ds	3
  2391  00007F                     i1___ftdiv@exp:
  2392                           	opt stack 0
  2393                           
  2394                           ; 1 bytes @ 0x1F
  2395  00007F                     	ds	1
  2396  000080                     i1___ftdiv@sign:
  2397                           	opt stack 0
  2398  000080                     i1desintegrator@temp3:
  2399                           	opt stack 0
  2400                           
  2401                           ; 4 bytes @ 0x20
  2402  000080                     	ds	1
  2403  000081                     ??i1_integrator:
  2404  000081                     i1confirmEdition@yes:
  2405                           	opt stack 0
  2406                           
  2407                           ; 1 bytes @ 0x21
  2408  000081                     	ds	2
  2409  000083                     i1integrator@acum:
  2410                           	opt stack 0
  2411                           
  2412                           ; 4 bytes @ 0x23
  2413  000083                     	ds	1
  2414  000084                     i1desintegrator@temp2:
  2415                           	opt stack 0
  2416                           
  2417                           ; 4 bytes @ 0x24
  2418  000084                     	ds	3
  2419  000087                     i1integrator@temp:
  2420                           	opt stack 0
  2421                           
  2422                           ; 4 bytes @ 0x27
  2423  000087                     	ds	1
  2424  000088                     i1desintegrator@i:
  2425                           	opt stack 0
  2426                           
  2427                           ; 2 bytes @ 0x28
  2428  000088                     	ds	2
  2429  00008A                     
  2430                           ; 1 bytes @ 0x2A
  2431  00008A                     	ds	1
  2432  00008B                     i1integrator@i:
  2433                           	opt stack 0
  2434                           
  2435                           ; 2 bytes @ 0x2B
  2436  00008B                     	ds	2
  2437  00008D                     i1longPressENTER@temp:
  2438                           	opt stack 0
  2439                           
  2440                           ; 3 bytes @ 0x2D
  2441  00008D                     	ds	3
  2442  000090                     i1_longPressENTER$3238:
  2443                           	opt stack 0
  2444                           
  2445                           ; 3 bytes @ 0x30
  2446  000090                     	ds	3
  2447  000093                     UARTint@sas:
  2448                           	opt stack 0
  2449                           
  2450                           ; 1 bytes @ 0x33
  2451  000093                     	ds	1
  2452  000094                     ??_isr:
  2453                           
  2454                           ; 1 bytes @ 0x34
  2455  000094                     	ds	17
  2456                           tblptru	equ	0xFF8
  2457                           tblptrh	equ	0xFF7
  2458                           tblptrl	equ	0xFF6
  2459                           tablat	equ	0xFF5
  2460                           postinc0	equ	0xFEE
  2461                           wreg	equ	0xFE8
  2462                           postdec1	equ	0xFE5
  2463                           fsr1l	equ	0xFE1
  2464                           
  2465                           	psect	cstackCOMRAM
  2466  000001                     __pcstackCOMRAM:
  2467                           	opt stack 0
  2468  000001                     ?i2___ftpack:
  2469                           	opt stack 0
  2470  000001                     i2setPWM2duty@actuator:
  2471                           	opt stack 0
  2472  000001                     i2___ftpack@arg:
  2473                           	opt stack 0
  2474                           
  2475                           ; 3 bytes @ 0x0
  2476  000001                     	ds	2
  2477  000003                     ??i2_setPWM2duty:
  2478                           
  2479                           ; 1 bytes @ 0x2
  2480  000003                     	ds	1
  2481  000004                     i2___ftpack@exp:
  2482                           	opt stack 0
  2483                           
  2484                           ; 1 bytes @ 0x3
  2485  000004                     	ds	1
  2486  000005                     i2___ftpack@sign:
  2487                           	opt stack 0
  2488  000005                     i2setPWM2duty@act:
  2489                           	opt stack 0
  2490                           
  2491                           ; 2 bytes @ 0x4
  2492  000005                     	ds	1
  2493  000006                     ??i2___ftpack:
  2494                           
  2495                           ; 1 bytes @ 0x5
  2496  000006                     	ds	3
  2497  000009                     ?i2___altoft:
  2498                           	opt stack 0
  2499  000009                     i2___altoft@c:
  2500                           	opt stack 0
  2501                           
  2502                           ; 4 bytes @ 0x8
  2503  000009                     	ds	4
  2504  00000D                     ??i2___altoft:
  2505                           
  2506                           ; 1 bytes @ 0xC
  2507  00000D                     	ds	4
  2508  000011                     i2___altoft@exp:
  2509                           	opt stack 0
  2510                           
  2511                           ; 1 bytes @ 0x10
  2512  000011                     	ds	1
  2513  000012                     i2___altoft@sign:
  2514                           	opt stack 0
  2515                           
  2516                           ; 1 bytes @ 0x11
  2517  000012                     	ds	1
  2518  000013                     ?i2___ftadd:
  2519                           	opt stack 0
  2520  000013                     i2___ftadd@f1:
  2521                           	opt stack 0
  2522                           
  2523                           ; 3 bytes @ 0x12
  2524  000013                     	ds	3
  2525  000016                     i2___ftadd@f2:
  2526                           	opt stack 0
  2527                           
  2528                           ; 3 bytes @ 0x15
  2529  000016                     	ds	3
  2530  000019                     ??i2___ftadd:
  2531                           
  2532                           ; 1 bytes @ 0x18
  2533  000019                     	ds	3
  2534  00001C                     i2___ftadd@sign:
  2535                           	opt stack 0
  2536                           
  2537                           ; 1 bytes @ 0x1B
  2538  00001C                     	ds	1
  2539  00001D                     i2___ftadd@exp2:
  2540                           	opt stack 0
  2541                           
  2542                           ; 1 bytes @ 0x1C
  2543  00001D                     	ds	1
  2544  00001E                     i2___ftadd@exp1:
  2545                           	opt stack 0
  2546                           
  2547                           ; 1 bytes @ 0x1D
  2548  00001E                     	ds	1
  2549  00001F                     i2___ftge@ff1:
  2550                           	opt stack 0
  2551                           
  2552                           ; 3 bytes @ 0x1E
  2553  00001F                     	ds	3
  2554  000022                     i2___ftge@ff2:
  2555                           	opt stack 0
  2556                           
  2557                           ; 3 bytes @ 0x21
  2558  000022                     	ds	3
  2559  000025                     ??i2___ftge:
  2560                           
  2561                           ; 1 bytes @ 0x24
  2562  000025                     	ds	3
  2563  000028                     ??_T4int:
  2564                           
  2565                           ; 1 bytes @ 0x27
  2566  000028                     	ds	1
  2567  000029                     ??_hp_isr:
  2568                           
  2569                           ; 1 bytes @ 0x28
  2570  000029                     	ds	14
  2571                           tblptru	equ	0xFF8
  2572                           tblptrh	equ	0xFF7
  2573                           tblptrl	equ	0xFF6
  2574                           tablat	equ	0xFF5
  2575                           postinc0	equ	0xFEE
  2576                           wreg	equ	0xFE8
  2577                           postdec1	equ	0xFE5
  2578                           fsr1l	equ	0xFE1
  2579                           
  2580 ;;
  2581 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2582 ;;
  2583 ;; *************** function _main *****************
  2584 ;; Defined at:
  2585 ;;		line 31 in file "source/main.c"
  2586 ;; Parameters:    Size  Location     Type
  2587 ;;		None
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;		None
  2590 ;; Return value:  Size  Location     Type
  2591 ;;                  1    wreg      void 
  2592 ;; Registers used:
  2593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2599 ;;      Params:         0       0       0       0       0       0       0
  2600 ;;      Locals:         0       0       0       0       0       0       0
  2601 ;;      Temps:          0       0       0       0       0       0       0
  2602 ;;      Totals:         0       0       0       0       0       0       0
  2603 ;;Total ram usage:        0 bytes
  2604 ;; Hardware stack levels required when called:   22
  2605 ;; This function calls:
  2606 ;;		_EEPROMConfig
  2607 ;;		_PWM2Config
  2608 ;;		_UARTConfig
  2609 ;;		_buttonChecking
  2610 ;;		_clockConfig
  2611 ;;		_drawScreen
  2612 ;;		_interruptConfig
  2613 ;;		_ioConfig
  2614 ;;		_ioInitStt
  2615 ;;		_lcd_init
  2616 ;;		_setPWM2duty
  2617 ;;		_setPWM2on
  2618 ;;		_sysParamInit
  2619 ;;		_t4config
  2620 ;; This function is called by:
  2621 ;;		Startup code after reset
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           	psect	text0
  2626  006DDE                     __ptext0:
  2627                           	opt stack 0
  2628  006DDE                     _main:
  2629                           	opt stack 9
  2630                           
  2631                           ;main.c: 33: clockConfig();
  2632                           
  2633                           ; BSR set to: 1
  2634                           ;incstack = 0
  2635  006DDE  EC05  F039         	call	_clockConfig	;wreg free
  2636                           
  2637                           ;main.c: 34: t4config();
  2638  006DE2  ECB1  F038         	call	_t4config	;wreg free
  2639                           
  2640                           ;main.c: 35: ioInitStt();
  2641  006DE6  ECC5  F039         	call	_ioInitStt	;wreg free
  2642                           
  2643                           ;main.c: 36: EEPROMConfig();
  2644  006DEA  ECCD  F039         	call	_EEPROMConfig	;wreg free
  2645                           
  2646                           ;main.c: 38: sysParamInit();
  2647  006DEE  ECC9  F033         	call	_sysParamInit	;wreg free
  2648                           
  2649                           ;main.c: 39: ioConfig();
  2650  006DF2  ECF4  F037         	call	_ioConfig	;wreg free
  2651                           
  2652                           ;main.c: 40: lcd_init();
  2653  006DF6  ECF8  F02D         	call	_lcd_init	;wreg free
  2654                           
  2655                           ;main.c: 41: PWM2Config();
  2656  006DFA  ECCB  F035         	call	_PWM2Config	;wreg free
  2657                           
  2658                           ;main.c: 42: UARTConfig();
  2659  006DFE  ECBD  F037         	call	_UARTConfig	;wreg free
  2660                           
  2661                           ;main.c: 43: interruptConfig();
  2662  006E02  ECC9  F039         	call	_interruptConfig	;wreg free
  2663  006E06  0004               	clrwdt		;# 
  2664                           
  2665                           ;main.c: 46: WDTCONbits.SWDTEN = 1;
  2666  006E08  80D1               	bsf	4049,0,c	;volatile
  2667                           
  2668                           ;main.c: 47: setPWM2duty(-400);
  2669  006E0A  0EFE               	movlw	254
  2670  006E0C  0101               	movlb	1	; () banked
  2671  006E0E  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
  2672  006E10  0E70               	movlw	112
  2673  006E12  6F00               	movwf	setPWM2duty@actuator& (0+255),b
  2674  006E14  EC85  F02F         	call	_setPWM2duty	;wreg free
  2675                           
  2676                           ;main.c: 48: setPWM2on(1);
  2677  006E18  0E01               	movlw	1
  2678  006E1A  EC47  F039         	call	_setPWM2on
  2679  006E1E                     l12054:
  2680                           
  2681                           ;main.c: 51: drawScreen();
  2682  006E1E  ECF9  F028         	call	_drawScreen	;wreg free
  2683                           
  2684                           ;main.c: 52: buttonChecking();
  2685  006E22  EC3D  F011         	call	_buttonChecking	;wreg free
  2686  006E26  D7FB               	goto	l12054
  2687  006E28                     __end_of_main:
  2688                           	opt stack 0
  2689                           tblptru	equ	0xFF8
  2690                           tblptrh	equ	0xFF7
  2691                           tblptrl	equ	0xFF6
  2692                           tablat	equ	0xFF5
  2693                           postinc0	equ	0xFEE
  2694                           wreg	equ	0xFE8
  2695                           postdec1	equ	0xFE5
  2696                           fsr1l	equ	0xFE1
  2697                           
  2698 ;; *************** function _t4config *****************
  2699 ;; Defined at:
  2700 ;;		line 49 in file "source/T4Config.h"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;		None
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;		None
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  1    wreg      void 
  2707 ;; Registers used:
  2708 ;;		wreg, status,2
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2714 ;;      Params:         0       0       0       0       0       0       0
  2715 ;;      Locals:         0       0       0       0       0       0       0
  2716 ;;      Temps:          0       0       0       0       0       0       0
  2717 ;;      Totals:         0       0       0       0       0       0       0
  2718 ;;Total ram usage:        0 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; Hardware stack levels required when called:   12
  2721 ;; This function calls:
  2722 ;;		Nothing
  2723 ;; This function is called by:
  2724 ;;		_main
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727                           
  2728                           	psect	text1
  2729  007162                     __ptext1:
  2730                           	opt stack 0
  2731  007162                     _t4config:
  2732                           	opt stack 18
  2733                           
  2734                           ;T4Config.h: 50: T4CONbits.TMR4ON = 0;
  2735                           
  2736                           ;incstack = 0
  2737  007162  010F               	movlb	15	; () banked
  2738  007164  9551               	bcf	81,2,b	;volatile
  2739                           
  2740                           ; BSR set to: 15
  2741                           ;T4Config.h: 51: T4CONbits.T4CKPS = 0b01;
  2742  007166  010F               	movlb	15	; () banked
  2743  007168  5151               	movf	81,w,b	;volatile
  2744  00716A  0BFC               	andlw	-4
  2745  00716C  0901               	iorlw	1
  2746  00716E  6F51               	movwf	81,b	;volatile
  2747                           
  2748                           ;T4Config.h: 52: T4CONbits.T4OUTPS = 0b0100;
  2749  007170  010F               	movlb	15	; () banked
  2750  007172  5151               	movf	81,w,b	;volatile
  2751  007174  0B87               	andlw	-121
  2752  007176  0920               	iorlw	32
  2753  007178  6F51               	movwf	81,b	;volatile
  2754                           
  2755                           ;T4Config.h: 53: PR4 = 199;
  2756  00717A  0EC7               	movlw	199
  2757  00717C  010F               	movlb	15	; () banked
  2758  00717E  6F52               	movwf	82,b	;volatile
  2759                           
  2760                           ; BSR set to: 15
  2761                           ;T4Config.h: 54: PIR5bits.TMR4IF = 0;
  2762  007180  907E               	bcf	3966,0,c	;volatile
  2763                           
  2764                           ; BSR set to: 15
  2765                           ;T4Config.h: 55: IPR5bits.TMR4IP = 1;
  2766  007182  807F               	bsf	3967,0,c	;volatile
  2767                           
  2768                           ; BSR set to: 15
  2769                           ;T4Config.h: 56: PIE5bits.TMR4IE = 1;
  2770  007184  807D               	bsf	3965,0,c	;volatile
  2771                           
  2772                           ; BSR set to: 15
  2773                           ;T4Config.h: 57: T4CONbits.TMR4ON = 1;
  2774  007186  010F               	movlb	15	; () banked
  2775  007188  8551               	bsf	81,2,b	;volatile
  2776                           
  2777                           ; BSR set to: 15
  2778  00718A  0012               	return		;funcret
  2779  00718C                     __end_of_t4config:
  2780                           	opt stack 0
  2781                           tblptru	equ	0xFF8
  2782                           tblptrh	equ	0xFF7
  2783                           tblptrl	equ	0xFF6
  2784                           tablat	equ	0xFF5
  2785                           postinc0	equ	0xFEE
  2786                           wreg	equ	0xFE8
  2787                           postdec1	equ	0xFE5
  2788                           fsr1l	equ	0xFE1
  2789                           
  2790 ;; *************** function _sysParamInit *****************
  2791 ;; Defined at:
  2792 ;;		line 168 in file "source/sysParams.h"
  2793 ;; Parameters:    Size  Location     Type
  2794 ;;		None
  2795 ;; Auto vars:     Size  Location     Type
  2796 ;;		None
  2797 ;; Return value:  Size  Location     Type
  2798 ;;                  1    wreg      void 
  2799 ;; Registers used:
  2800 ;;		wreg, status,2, status,0, cstack
  2801 ;; Tracked objects:
  2802 ;;		On entry : 0/0
  2803 ;;		On exit  : 0/0
  2804 ;;		Unchanged: 0/0
  2805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2806 ;;      Params:         0       0       0       0       0       0       0
  2807 ;;      Locals:         0       0       0       0       0       0       0
  2808 ;;      Temps:          0       0       0       0       0       0       0
  2809 ;;      Totals:         0       0       0       0       0       0       0
  2810 ;;Total ram usage:        0 bytes
  2811 ;; Hardware stack levels used:    1
  2812 ;; Hardware stack levels required when called:   15
  2813 ;; This function calls:
  2814 ;;		_calcSysVars
  2815 ;;		_readEEPROM
  2816 ;; This function is called by:
  2817 ;;		_main
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           	psect	text2
  2822  006792                     __ptext2:
  2823                           	opt stack 0
  2824  006792                     _sysParamInit:
  2825                           	opt stack 15
  2826                           
  2827                           ;sysParams.h: 171: fData.floatUB = readEEPROM(3);
  2828                           
  2829                           ; BSR set to: 15
  2830                           ;incstack = 0
  2831  006792  0E03               	movlw	3
  2832  006794  EC60  F039         	call	_readEEPROM
  2833  006798  0100               	movlb	0	; () banked
  2834  00679A  6FB1               	movwf	(_fData+2)& (0+255),b
  2835                           
  2836                           ;sysParams.h: 172: fData.floatHB = readEEPROM(4);
  2837  00679C  0E04               	movlw	4
  2838  00679E  EC60  F039         	call	_readEEPROM
  2839  0067A2  0100               	movlb	0	; () banked
  2840  0067A4  6FB0               	movwf	(_fData+1)& (0+255),b
  2841                           
  2842                           ;sysParams.h: 173: fData.floatLB = readEEPROM(5);
  2843  0067A6  0E05               	movlw	5
  2844  0067A8  EC60  F039         	call	_readEEPROM
  2845  0067AC  0100               	movlb	0	; () banked
  2846  0067AE  6FAF               	movwf	_fData& (0+255),b
  2847                           
  2848                           ; BSR set to: 0
  2849                           ;sysParams.h: 174: tiXcorte = fData.floatdat;
  2850  0067B0  C0AF  F195         	movff	_fData,_tiXcorte
  2851  0067B4  C0B0  F196         	movff	_fData+1,_tiXcorte+1
  2852  0067B8  C0B1  F197         	movff	_fData+2,_tiXcorte+2
  2853                           
  2854                           ;sysParams.h: 175: i16Data.int16HB = readEEPROM(6);
  2855  0067BC  0E06               	movlw	6
  2856  0067BE  EC60  F039         	call	_readEEPROM
  2857  0067C2  0100               	movlb	0	; () banked
  2858  0067C4  6FB3               	movwf	(_i16Data+1)& (0+255),b
  2859                           
  2860                           ;sysParams.h: 176: i16Data.int16LB = readEEPROM(7);
  2861  0067C6  0E07               	movlw	7
  2862  0067C8  EC60  F039         	call	_readEEPROM
  2863  0067CC  0100               	movlb	0	; () banked
  2864  0067CE  6FB2               	movwf	_i16Data& (0+255),b
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;sysParams.h: 177: numCortes = i16Data.int16dat;
  2868  0067D0  C0B2  F0D0         	movff	_i16Data,_numCortes
  2869  0067D4  C0B3  F0D1         	movff	_i16Data+1,_numCortes+1
  2870                           
  2871                           ;sysParams.h: 189: fData.floatUB = readEEPROM(17);
  2872  0067D8  0E11               	movlw	17
  2873  0067DA  EC60  F039         	call	_readEEPROM
  2874  0067DE  0100               	movlb	0	; () banked
  2875  0067E0  6FB1               	movwf	(_fData+2)& (0+255),b
  2876                           
  2877                           ;sysParams.h: 190: fData.floatHB = readEEPROM(18);
  2878  0067E2  0E12               	movlw	18
  2879  0067E4  EC60  F039         	call	_readEEPROM
  2880  0067E8  0100               	movlb	0	; () banked
  2881  0067EA  6FB0               	movwf	(_fData+1)& (0+255),b
  2882                           
  2883                           ;sysParams.h: 191: fData.floatLB = readEEPROM(19);
  2884  0067EC  0E13               	movlw	19
  2885  0067EE  EC60  F039         	call	_readEEPROM
  2886  0067F2  0100               	movlb	0	; () banked
  2887  0067F4  6FAF               	movwf	_fData& (0+255),b
  2888                           
  2889                           ; BSR set to: 0
  2890                           ;sysParams.h: 192: velocidadMasa = fData.floatdat;
  2891  0067F6  C0AF  F198         	movff	_fData,_velocidadMasa
  2892  0067FA  C0B0  F199         	movff	_fData+1,_velocidadMasa+1
  2893  0067FE  C0B1  F19A         	movff	_fData+2,_velocidadMasa+2
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;sysParams.h: 193: calcSysVars();
  2897  006802  EC61  F035         	call	_calcSysVars	;wreg free
  2898  006806  0012               	return		;funcret
  2899  006808                     __end_of_sysParamInit:
  2900                           	opt stack 0
  2901                           tblptru	equ	0xFF8
  2902                           tblptrh	equ	0xFF7
  2903                           tblptrl	equ	0xFF6
  2904                           tablat	equ	0xFF5
  2905                           postinc0	equ	0xFEE
  2906                           wreg	equ	0xFE8
  2907                           postdec1	equ	0xFE5
  2908                           fsr1l	equ	0xFE1
  2909                           
  2910 ;; *************** function _readEEPROM *****************
  2911 ;; Defined at:
  2912 ;;		line 64 in file "source/sysParams.h"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;  adr             1    wreg     unsigned char 
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;  adr             1    0[BANK1 ] unsigned char 
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  1    wreg      unsigned char 
  2919 ;; Registers used:
  2920 ;;		wreg, status,2
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2926 ;;      Params:         0       0       0       0       0       0       0
  2927 ;;      Locals:         0       0       1       0       0       0       0
  2928 ;;      Temps:          0       0       0       0       0       0       0
  2929 ;;      Totals:         0       0       1       0       0       0       0
  2930 ;;Total ram usage:        1 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:   12
  2933 ;; This function calls:
  2934 ;;		Nothing
  2935 ;; This function is called by:
  2936 ;;		_sysParamInit
  2937 ;; This function uses a non-reentrant model
  2938 ;;
  2939                           
  2940                           	psect	text3
  2941  0072C0                     __ptext3:
  2942                           	opt stack 0
  2943  0072C0                     _readEEPROM:
  2944                           	opt stack 17
  2945                           
  2946                           ;incstack = 0
  2947                           ;readEEPROM@adr stored from wreg
  2948  0072C0  0101               	movlb	1	; () banked
  2949  0072C2  6F00               	movwf	readEEPROM@adr& (0+255),b
  2950                           
  2951                           ;sysParams.h: 65: EEADR = adr;
  2952  0072C4  C100  FFA9         	movff	readEEPROM@adr,4009	;volatile
  2953                           
  2954                           ;sysParams.h: 66: EECON1bits.EEPGD = 0;
  2955  0072C8  9EA6               	bcf	4006,7,c	;volatile
  2956                           
  2957                           ;sysParams.h: 67: EECON1bits.CFGS = 0;
  2958  0072CA  9CA6               	bcf	4006,6,c	;volatile
  2959                           
  2960                           ;sysParams.h: 68: EECON1bits.RD = 1;
  2961  0072CC  80A6               	bsf	4006,0,c	;volatile
  2962  0072CE                     l287:
  2963  0072CE  B0A6               	btfsc	4006,0,c	;volatile
  2964  0072D0  D7FE               	goto	l287
  2965                           
  2966                           ;sysParams.h: 70: return EEDATA;
  2967  0072D2  50A8               	movf	4008,w,c	;volatile
  2968  0072D4  0012               	return		;funcret
  2969  0072D6                     __end_of_readEEPROM:
  2970                           	opt stack 0
  2971                           tblptru	equ	0xFF8
  2972                           tblptrh	equ	0xFF7
  2973                           tblptrl	equ	0xFF6
  2974                           tablat	equ	0xFF5
  2975                           postinc0	equ	0xFEE
  2976                           wreg	equ	0xFE8
  2977                           postdec1	equ	0xFE5
  2978                           fsr1l	equ	0xFE1
  2979                           
  2980 ;; *************** function _calcSysVars *****************
  2981 ;; Defined at:
  2982 ;;		line 78 in file "source/sysParams.h"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;		None
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;  temp            3   35[BANK1 ] float 
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  1    wreg      void 
  2989 ;; Registers used:
  2990 ;;		wreg, status,2, status,0, cstack
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2996 ;;      Params:         0       0       0       0       0       0       0
  2997 ;;      Locals:         0       0       3       0       0       0       0
  2998 ;;      Temps:          0       0       0       0       0       0       0
  2999 ;;      Totals:         0       0       3       0       0       0       0
  3000 ;;Total ram usage:        3 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; Hardware stack levels required when called:   14
  3003 ;; This function calls:
  3004 ;;		___ftmul
  3005 ;; This function is called by:
  3006 ;;		_sysParamInit
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           	psect	text4
  3011  006AC2                     __ptext4:
  3012                           	opt stack 0
  3013  006AC2                     _calcSysVars:
  3014                           	opt stack 15
  3015                           
  3016                           ;sysParams.h: 79: float temp = 0;
  3017                           
  3018                           ;incstack = 0
  3019  006AC2  0E00               	movlw	0
  3020  006AC4  0101               	movlb	1	; () banked
  3021  006AC6  6F23               	movwf	calcSysVars@temp& (0+255),b
  3022  006AC8  0E00               	movlw	0
  3023  006ACA  0101               	movlb	1	; () banked
  3024  006ACC  6F24               	movwf	(calcSysVars@temp+1)& (0+255),b
  3025  006ACE  0E00               	movlw	0
  3026  006AD0  0101               	movlb	1	; () banked
  3027  006AD2  6F25               	movwf	(calcSysVars@temp+2)& (0+255),b
  3028                           
  3029                           ; BSR set to: 1
  3030                           ;sysParams.h: 80: timsXcorte = (float)tiXcorte * 1000;
  3031  006AD4  C195  F114         	movff	_tiXcorte,___ftmul@f1
  3032  006AD8  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
  3033  006ADC  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
  3034  006AE0  0E00               	movlw	0
  3035  006AE2  0101               	movlb	1	; () banked
  3036  006AE4  6F17               	movwf	___ftmul@f2& (0+255),b
  3037  006AE6  0E7A               	movlw	122
  3038  006AE8  0101               	movlb	1	; () banked
  3039  006AEA  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  3040  006AEC  0E44               	movlw	68
  3041  006AEE  0101               	movlb	1	; () banked
  3042  006AF0  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  3043  006AF2  EC1F  F01D         	call	___ftmul	;wreg free
  3044  006AF6  C114  F059         	movff	?___ftmul,_timsXcorte
  3045  006AFA  C115  F05A         	movff	?___ftmul+1,_timsXcorte+1
  3046  006AFE  C116  F05B         	movff	?___ftmul+2,_timsXcorte+2
  3047                           
  3048                           ;sysParams.h: 86: kgXcorte = (float)velocidadMasa * tiXcorte;
  3049  006B02  C198  F114         	movff	_velocidadMasa,___ftmul@f1
  3050  006B06  C199  F115         	movff	_velocidadMasa+1,___ftmul@f1+1
  3051  006B0A  C19A  F116         	movff	_velocidadMasa+2,___ftmul@f1+2
  3052  006B0E  C195  F117         	movff	_tiXcorte,___ftmul@f2
  3053  006B12  C196  F118         	movff	_tiXcorte+1,___ftmul@f2+1
  3054  006B16  C197  F119         	movff	_tiXcorte+2,___ftmul@f2+2
  3055  006B1A  EC1F  F01D         	call	___ftmul	;wreg free
  3056  006B1E  C114  F18F         	movff	?___ftmul,_kgXcorte
  3057  006B22  C115  F190         	movff	?___ftmul+1,_kgXcorte+1
  3058  006B26  C116  F191         	movff	?___ftmul+2,_kgXcorte+2
  3059  006B2A  0012               	return		;funcret
  3060  006B2C                     __end_of_calcSysVars:
  3061                           	opt stack 0
  3062                           tblptru	equ	0xFF8
  3063                           tblptrh	equ	0xFF7
  3064                           tblptrl	equ	0xFF6
  3065                           tablat	equ	0xFF5
  3066                           postinc0	equ	0xFEE
  3067                           wreg	equ	0xFE8
  3068                           postdec1	equ	0xFE5
  3069                           fsr1l	equ	0xFE1
  3070                           
  3071 ;; *************** function _setPWM2on *****************
  3072 ;; Defined at:
  3073 ;;		line 183 in file "source/PWMConfig.h"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;  on              1    wreg     unsigned char 
  3076 ;; Auto vars:     Size  Location     Type
  3077 ;;  on              1    0[BANK1 ] unsigned char 
  3078 ;; Return value:  Size  Location     Type
  3079 ;;                  1    wreg      void 
  3080 ;; Registers used:
  3081 ;;		wreg, status,2
  3082 ;; Tracked objects:
  3083 ;;		On entry : 0/0
  3084 ;;		On exit  : 0/0
  3085 ;;		Unchanged: 0/0
  3086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3087 ;;      Params:         0       0       0       0       0       0       0
  3088 ;;      Locals:         0       0       1       0       0       0       0
  3089 ;;      Temps:          0       0       0       0       0       0       0
  3090 ;;      Totals:         0       0       1       0       0       0       0
  3091 ;;Total ram usage:        1 bytes
  3092 ;; Hardware stack levels used:    1
  3093 ;; Hardware stack levels required when called:   12
  3094 ;; This function calls:
  3095 ;;		Nothing
  3096 ;; This function is called by:
  3097 ;;		_main
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101                           	psect	text5
  3102  00728E                     __ptext5:
  3103                           	opt stack 0
  3104  00728E                     _setPWM2on:
  3105                           	opt stack 18
  3106                           
  3107                           ;incstack = 0
  3108                           ;setPWM2on@on stored from wreg
  3109  00728E  0101               	movlb	1	; () banked
  3110  007290  6F00               	movwf	setPWM2on@on& (0+255),b
  3111                           
  3112                           ;PWMConfig.h: 184: if(on) {
  3113  007292  0101               	movlb	1	; () banked
  3114  007294  5100               	movf	setPWM2on@on& (0+255),w,b
  3115  007296  0101               	movlb	1	; () banked
  3116  007298  B4D8               	btfsc	status,2,c
  3117  00729A  D003               	goto	l535
  3118                           
  3119                           ; BSR set to: 1
  3120                           ;PWMConfig.h: 185: TRISCbits.TRISC0 = 0;
  3121  00729C  9094               	bcf	3988,0,c	;volatile
  3122                           
  3123                           ;PWMConfig.h: 186: TRISCbits.TRISC1 = 0;
  3124  00729E  9294               	bcf	3988,1,c	;volatile
  3125                           
  3126                           ;PWMConfig.h: 187: }else {
  3127  0072A0  0012               	return	
  3128  0072A2                     l535:
  3129                           
  3130                           ; BSR set to: 1
  3131                           ;PWMConfig.h: 188: TRISCbits.TRISC0 = 1;
  3132  0072A2  8094               	bsf	3988,0,c	;volatile
  3133                           
  3134                           ;PWMConfig.h: 189: TRISCbits.TRISC1 = 1;
  3135  0072A4  8294               	bsf	3988,1,c	;volatile
  3136  0072A6  0012               	return	
  3137  0072A8                     __end_of_setPWM2on:
  3138                           	opt stack 0
  3139                           tblptru	equ	0xFF8
  3140                           tblptrh	equ	0xFF7
  3141                           tblptrl	equ	0xFF6
  3142                           tablat	equ	0xFF5
  3143                           postinc0	equ	0xFEE
  3144                           wreg	equ	0xFE8
  3145                           postdec1	equ	0xFE5
  3146                           fsr1l	equ	0xFE1
  3147                           status	equ	0xFD8
  3148                           
  3149 ;; *************** function _lcd_init *****************
  3150 ;; Defined at:
  3151 ;;		line 179 in file "source/../../vclib_lcd.h"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;		None
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;  LCD_INIT_STR    4    9[BANK1 ] unsigned char [4]
  3156 ;;  i               1   13[BANK1 ] unsigned char 
  3157 ;; Return value:  Size  Location     Type
  3158 ;;                  1    wreg      void 
  3159 ;; Registers used:
  3160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3166 ;;      Params:         0       0       0       0       0       0       0
  3167 ;;      Locals:         0       0       5       0       0       0       0
  3168 ;;      Temps:          0       0       1       0       0       0       0
  3169 ;;      Totals:         0       0       6       0       0       0       0
  3170 ;;Total ram usage:        6 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:   15
  3173 ;; This function calls:
  3174 ;;		_lcd_send_4bits
  3175 ;;		_lcd_send_byte
  3176 ;; This function is called by:
  3177 ;;		_main
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           	psect	text6
  3182  005BF0                     __ptext6:
  3183                           	opt stack 0
  3184  005BF0                     _lcd_init:
  3185                           	opt stack 15
  3186                           
  3187                           ;vclib_lcd.h: 180: unsigned char i;
  3188                           ;vclib_lcd.h: 181: unsigned char LCD_INIT_STRING[4] = {0x20 | (2 << 2), 0xc, 1, 6};
  3189                           
  3190                           ; BSR set to: 1
  3191                           ;incstack = 0
  3192  005BF0  C0C9  F109         	movff	lcd_init@F7567,lcd_init@LCD_INIT_STRING
  3193  005BF4  C0CA  F10A         	movff	lcd_init@F7567+1,lcd_init@LCD_INIT_STRING+1
  3194  005BF8  C0CB  F10B         	movff	lcd_init@F7567+2,lcd_init@LCD_INIT_STRING+2
  3195  005BFC  C0CC  F10C         	movff	lcd_init@F7567+3,lcd_init@LCD_INIT_STRING+3
  3196                           
  3197                           ;vclib_lcd.h: 184: PORTBbits.RB3 = 0;
  3198  005C00  9681               	bcf	3969,3,c	;volatile
  3199                           
  3200                           ;vclib_lcd.h: 185: PORTBbits.RB1 = 0;
  3201  005C02  9281               	bcf	3969,1,c	;volatile
  3202                           
  3203                           ;vclib_lcd.h: 186: PORTBbits.RB2 = 0;
  3204  005C04  9481               	bcf	3969,2,c	;volatile
  3205                           
  3206                           ;vclib_lcd.h: 187: _delay((unsigned long)((15)*(16000000/4000.0)));
  3207  005C06  0E4E               	movlw	78
  3208  005C08  0101               	movlb	1	; () banked
  3209  005C0A  6F08               	movwf	??_lcd_init& (0+255),b
  3210  005C0C  0EEB               	movlw	235
  3211  005C0E                     u17997:
  3212  005C0E  2EE8               	decfsz	wreg,f,c
  3213  005C10  D7FE               	goto	u17997
  3214  005C12  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3215  005C14  D7FC               	goto	u17997
  3216  005C16  F000               	nop	
  3217                           
  3218                           ;vclib_lcd.h: 188: for (i = 1; i <= 3; ++i) {
  3219  005C18  0E01               	movlw	1
  3220  005C1A  0101               	movlb	1	; () banked
  3221  005C1C  6F0D               	movwf	lcd_init@i& (0+255),b
  3222  005C1E                     l11612:
  3223                           
  3224                           ; BSR set to: 1
  3225  005C1E  0E03               	movlw	3
  3226  005C20  0101               	movlb	1	; () banked
  3227  005C22  650D               	cpfsgt	lcd_init@i& (0+255),b
  3228  005C24  D001               	goto	l11616
  3229  005C26  D00F               	goto	l11624
  3230  005C28                     l11616:
  3231                           
  3232                           ; BSR set to: 1
  3233                           ;vclib_lcd.h: 189: lcd_send_4bits(3);
  3234  005C28  0E03               	movlw	3
  3235  005C2A  EC3C  F031         	call	_lcd_send_4bits
  3236                           
  3237                           ;vclib_lcd.h: 190: _delay((unsigned long)((5)*(16000000/4000.0)));
  3238  005C2E  0E1A               	movlw	26
  3239  005C30  0101               	movlb	1	; () banked
  3240  005C32  6F08               	movwf	??_lcd_init& (0+255),b
  3241  005C34  0EF8               	movlw	248
  3242  005C36                     u18007:
  3243  005C36  2EE8               	decfsz	wreg,f,c
  3244  005C38  D7FE               	goto	u18007
  3245  005C3A  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3246  005C3C  D7FC               	goto	u18007
  3247  005C3E  D000               	nop2	
  3248  005C40  0101               	movlb	1	; () banked
  3249  005C42  2B0D               	incf	lcd_init@i& (0+255),f,b
  3250  005C44  D7EC               	goto	l11612
  3251  005C46                     l11624:
  3252                           
  3253                           ; BSR set to: 1
  3254                           ;vclib_lcd.h: 191: }
  3255                           ;vclib_lcd.h: 192: lcd_send_4bits(2);
  3256  005C46  0E02               	movlw	2
  3257  005C48  EC3C  F031         	call	_lcd_send_4bits
  3258                           
  3259                           ;vclib_lcd.h: 193: _delay((unsigned long)((5)*(16000000/4000.0)));
  3260  005C4C  0E1A               	movlw	26
  3261  005C4E  0101               	movlb	1	; () banked
  3262  005C50  6F08               	movwf	??_lcd_init& (0+255),b
  3263  005C52  0EF8               	movlw	248
  3264  005C54                     u18017:
  3265  005C54  2EE8               	decfsz	wreg,f,c
  3266  005C56  D7FE               	goto	u18017
  3267  005C58  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3268  005C5A  D7FC               	goto	u18017
  3269  005C5C  D000               	nop2	
  3270                           
  3271                           ;vclib_lcd.h: 194: for (i = 0; i <= 3; ++i)
  3272  005C5E  0E00               	movlw	0
  3273  005C60  0101               	movlb	1	; () banked
  3274  005C62  6F0D               	movwf	lcd_init@i& (0+255),b
  3275  005C64                     l11630:
  3276                           
  3277                           ; BSR set to: 1
  3278  005C64  0E03               	movlw	3
  3279  005C66  0101               	movlb	1	; () banked
  3280  005C68  650D               	cpfsgt	lcd_init@i& (0+255),b
  3281  005C6A  D001               	goto	l11634
  3282  005C6C  0012               	return	
  3283  005C6E                     l11634:
  3284                           
  3285                           ; BSR set to: 1
  3286                           ;vclib_lcd.h: 195: lcd_send_byte(0, LCD_INIT_STRING[i]);
  3287  005C6E  0101               	movlb	1	; () banked
  3288  005C70  510D               	movf	lcd_init@i& (0+255),w,b
  3289  005C72  0D01               	mullw	1
  3290  005C74  0E09               	movlw	low lcd_init@LCD_INIT_STRING
  3291  005C76  24F3               	addwf	prodl,w,c
  3292  005C78  6ED9               	movwf	fsr2l,c
  3293  005C7A  0E01               	movlw	high lcd_init@LCD_INIT_STRING
  3294  005C7C  20F4               	addwfc	prodh,w,c
  3295  005C7E  6EDA               	movwf	fsr2h,c
  3296  005C80  50DF               	movf	indf2,w,c
  3297  005C82  0101               	movlb	1	; () banked
  3298  005C84  6F05               	movwf	lcd_send_byte@n& (0+255),b
  3299  005C86  0E00               	movlw	0
  3300  005C88  EC7E  F037         	call	_lcd_send_byte
  3301  005C8C  0101               	movlb	1	; () banked
  3302  005C8E  2B0D               	incf	lcd_init@i& (0+255),f,b
  3303  005C90  D7E9               	goto	l11630
  3304  005C92                     __end_of_lcd_init:
  3305                           	opt stack 0
  3306                           tblptru	equ	0xFF8
  3307                           tblptrh	equ	0xFF7
  3308                           tblptrl	equ	0xFF6
  3309                           tablat	equ	0xFF5
  3310                           prodh	equ	0xFF4
  3311                           prodl	equ	0xFF3
  3312                           postinc0	equ	0xFEE
  3313                           wreg	equ	0xFE8
  3314                           postdec1	equ	0xFE5
  3315                           fsr1l	equ	0xFE1
  3316                           indf2	equ	0xFDF
  3317                           fsr2h	equ	0xFDA
  3318                           fsr2l	equ	0xFD9
  3319                           status	equ	0xFD8
  3320                           
  3321 ;; *************** function _ioInitStt *****************
  3322 ;; Defined at:
  3323 ;;		line 86 in file "source/IOConfig.h"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;		None
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;		None
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  1    wreg      void 
  3330 ;; Registers used:
  3331 ;;		None
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3337 ;;      Params:         0       0       0       0       0       0       0
  3338 ;;      Locals:         0       0       0       0       0       0       0
  3339 ;;      Temps:          0       0       0       0       0       0       0
  3340 ;;      Totals:         0       0       0       0       0       0       0
  3341 ;;Total ram usage:        0 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:   12
  3344 ;; This function calls:
  3345 ;;		Nothing
  3346 ;; This function is called by:
  3347 ;;		_main
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           	psect	text7
  3352  00738A                     __ptext7:
  3353                           	opt stack 0
  3354  00738A                     _ioInitStt:
  3355                           	opt stack 18
  3356                           
  3357                           ;IOConfig.h: 87: LATCbits.LATC4 = 0;
  3358                           
  3359                           ; BSR set to: 1
  3360                           ;incstack = 0
  3361  00738A  988B               	bcf	3979,4,c	;volatile
  3362                           
  3363                           ;IOConfig.h: 88: LATBbits.LATB0 = 0;
  3364  00738C  908A               	bcf	3978,0,c	;volatile
  3365                           
  3366                           ;IOConfig.h: 89: LATCbits.LATC5 = 0;
  3367  00738E  9A8B               	bcf	3979,5,c	;volatile
  3368  007390  0012               	return		;funcret
  3369  007392                     __end_of_ioInitStt:
  3370                           	opt stack 0
  3371                           tblptru	equ	0xFF8
  3372                           tblptrh	equ	0xFF7
  3373                           tblptrl	equ	0xFF6
  3374                           tablat	equ	0xFF5
  3375                           prodh	equ	0xFF4
  3376                           prodl	equ	0xFF3
  3377                           postinc0	equ	0xFEE
  3378                           wreg	equ	0xFE8
  3379                           postdec1	equ	0xFE5
  3380                           fsr1l	equ	0xFE1
  3381                           indf2	equ	0xFDF
  3382                           fsr2h	equ	0xFDA
  3383                           fsr2l	equ	0xFD9
  3384                           status	equ	0xFD8
  3385                           
  3386 ;; *************** function _ioConfig *****************
  3387 ;; Defined at:
  3388 ;;		line 69 in file "source/IOConfig.h"
  3389 ;; Parameters:    Size  Location     Type
  3390 ;;		None
  3391 ;; Auto vars:     Size  Location     Type
  3392 ;;		None
  3393 ;; Return value:  Size  Location     Type
  3394 ;;                  1    wreg      void 
  3395 ;; Registers used:
  3396 ;;		None
  3397 ;; Tracked objects:
  3398 ;;		On entry : 0/0
  3399 ;;		On exit  : 0/0
  3400 ;;		Unchanged: 0/0
  3401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3402 ;;      Params:         0       0       0       0       0       0       0
  3403 ;;      Locals:         0       0       0       0       0       0       0
  3404 ;;      Temps:          0       0       0       0       0       0       0
  3405 ;;      Totals:         0       0       0       0       0       0       0
  3406 ;;Total ram usage:        0 bytes
  3407 ;; Hardware stack levels used:    1
  3408 ;; Hardware stack levels required when called:   12
  3409 ;; This function calls:
  3410 ;;		Nothing
  3411 ;; This function is called by:
  3412 ;;		_main
  3413 ;; This function uses a non-reentrant model
  3414 ;;
  3415                           
  3416                           	psect	text8
  3417  006FE8                     __ptext8:
  3418                           	opt stack 0
  3419  006FE8                     _ioConfig:
  3420                           	opt stack 18
  3421                           
  3422                           ;IOConfig.h: 70: TRISBbits.TRISB1 = 0;
  3423                           
  3424                           ;incstack = 0
  3425  006FE8  9293               	bcf	3987,1,c	;volatile
  3426                           
  3427                           ;IOConfig.h: 71: TRISBbits.TRISB2 = 0;
  3428  006FEA  9493               	bcf	3987,2,c	;volatile
  3429                           
  3430                           ;IOConfig.h: 72: TRISBbits.TRISB3 = 0;
  3431  006FEC  9693               	bcf	3987,3,c	;volatile
  3432                           
  3433                           ;IOConfig.h: 73: TRISBbits.TRISB0 = 0;
  3434  006FEE  9093               	bcf	3987,0,c	;volatile
  3435                           
  3436                           ;IOConfig.h: 74: TRISCbits.TRISC5 = 0;
  3437  006FF0  9A94               	bcf	3988,5,c	;volatile
  3438                           
  3439                           ;IOConfig.h: 75: TRISAbits.TRISA7 = 1;
  3440  006FF2  8E92               	bsf	3986,7,c	;volatile
  3441                           
  3442                           ;IOConfig.h: 76: TRISAbits.TRISA6 = 1;
  3443  006FF4  8C92               	bsf	3986,6,c	;volatile
  3444                           
  3445                           ;IOConfig.h: 77: TRISCbits.TRISC2 = 1; ANSELCbits.ANSC2 = 0;
  3446  006FF6  8494               	bsf	3988,2,c	;volatile
  3447  006FF8  010F               	movlb	15	; () banked
  3448  006FFA  953A               	bcf	58,2,b	;volatile
  3449                           
  3450                           ;IOConfig.h: 78: TRISCbits.TRISC3 = 1; ANSELCbits.ANSC3 = 0;
  3451  006FFC  8694               	bsf	3988,3,c	;volatile
  3452  006FFE  010F               	movlb	15	; () banked
  3453  007000  973A               	bcf	58,3,b	;volatile
  3454                           
  3455                           ;IOConfig.h: 79: TRISAbits.TRISA2 = 1; ANSELAbits.ANSA2 = 0;
  3456  007002  8492               	bsf	3986,2,c	;volatile
  3457  007004  010F               	movlb	15	; () banked
  3458  007006  9538               	bcf	56,2,b	;volatile
  3459                           
  3460                           ;IOConfig.h: 80: TRISAbits.TRISA3 = 1; ANSELAbits.ANSA3 = 0;
  3461  007008  8692               	bsf	3986,3,c	;volatile
  3462  00700A  010F               	movlb	15	; () banked
  3463  00700C  9738               	bcf	56,3,b	;volatile
  3464                           
  3465                           ;IOConfig.h: 81: TRISAbits.TRISA4 = 1;
  3466  00700E  8892               	bsf	3986,4,c	;volatile
  3467                           
  3468                           ;IOConfig.h: 82: TRISAbits.TRISA5 = 1; ANSELAbits.ANSA5 = 0;
  3469  007010  8A92               	bsf	3986,5,c	;volatile
  3470  007012  010F               	movlb	15	; () banked
  3471  007014  9B38               	bcf	56,5,b	;volatile
  3472                           
  3473                           ;IOConfig.h: 83: TRISCbits.TRISC4 = 0;
  3474  007016  9894               	bcf	3988,4,c	;volatile
  3475                           
  3476                           ; BSR set to: 15
  3477  007018  0012               	return		;funcret
  3478  00701A                     __end_of_ioConfig:
  3479                           	opt stack 0
  3480                           tblptru	equ	0xFF8
  3481                           tblptrh	equ	0xFF7
  3482                           tblptrl	equ	0xFF6
  3483                           tablat	equ	0xFF5
  3484                           prodh	equ	0xFF4
  3485                           prodl	equ	0xFF3
  3486                           postinc0	equ	0xFEE
  3487                           wreg	equ	0xFE8
  3488                           postdec1	equ	0xFE5
  3489                           fsr1l	equ	0xFE1
  3490                           indf2	equ	0xFDF
  3491                           fsr2h	equ	0xFDA
  3492                           fsr2l	equ	0xFD9
  3493                           status	equ	0xFD8
  3494                           
  3495 ;; *************** function _interruptConfig *****************
  3496 ;; Defined at:
  3497 ;;		line 89 in file "source/SYSConfig.h"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;		None
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;		None
  3502 ;; Return value:  Size  Location     Type
  3503 ;;                  1    wreg      void 
  3504 ;; Registers used:
  3505 ;;		None
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3511 ;;      Params:         0       0       0       0       0       0       0
  3512 ;;      Locals:         0       0       0       0       0       0       0
  3513 ;;      Temps:          0       0       0       0       0       0       0
  3514 ;;      Totals:         0       0       0       0       0       0       0
  3515 ;;Total ram usage:        0 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:   12
  3518 ;; This function calls:
  3519 ;;		Nothing
  3520 ;; This function is called by:
  3521 ;;		_main
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           	psect	text9
  3526  007392                     __ptext9:
  3527                           	opt stack 0
  3528  007392                     _interruptConfig:
  3529                           	opt stack 18
  3530                           
  3531                           ;SYSConfig.h: 90: RCONbits.IPEN = 1;
  3532                           
  3533                           ; BSR set to: 15
  3534                           ;incstack = 0
  3535  007392  8ED0               	bsf	4048,7,c	;volatile
  3536                           
  3537                           ;SYSConfig.h: 91: INTCONbits.PEIE = 1;
  3538  007394  8CF2               	bsf	intcon,6,c	;volatile
  3539                           
  3540                           ;SYSConfig.h: 92: INTCONbits.GIE = 1;
  3541  007396  8EF2               	bsf	intcon,7,c	;volatile
  3542  007398  0012               	return		;funcret
  3543  00739A                     __end_of_interruptConfig:
  3544                           	opt stack 0
  3545                           tblptru	equ	0xFF8
  3546                           tblptrh	equ	0xFF7
  3547                           tblptrl	equ	0xFF6
  3548                           tablat	equ	0xFF5
  3549                           prodh	equ	0xFF4
  3550                           prodl	equ	0xFF3
  3551                           intcon	equ	0xFF2
  3552                           postinc0	equ	0xFEE
  3553                           wreg	equ	0xFE8
  3554                           postdec1	equ	0xFE5
  3555                           fsr1l	equ	0xFE1
  3556                           indf2	equ	0xFDF
  3557                           fsr2h	equ	0xFDA
  3558                           fsr2l	equ	0xFD9
  3559                           status	equ	0xFD8
  3560                           
  3561 ;; *************** function _drawScreen *****************
  3562 ;; Defined at:
  3563 ;;		line 250 in file "source/screenDrawers.h"
  3564 ;; Parameters:    Size  Location     Type
  3565 ;;		None
  3566 ;; Auto vars:     Size  Location     Type
  3567 ;;		None
  3568 ;; Return value:  Size  Location     Type
  3569 ;;                  1    wreg      void 
  3570 ;; Registers used:
  3571 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3572 ;; Tracked objects:
  3573 ;;		On entry : 0/0
  3574 ;;		On exit  : 0/0
  3575 ;;		Unchanged: 0/0
  3576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3577 ;;      Params:         0       0       0       0       0       0       0
  3578 ;;      Locals:         0       0       0       0       0       0       0
  3579 ;;      Temps:          0       0       0       0       0       0       0
  3580 ;;      Totals:         0       0       0       0       0       0       0
  3581 ;;Total ram usage:        0 bytes
  3582 ;; Hardware stack levels used:    1
  3583 ;; Hardware stack levels required when called:   21
  3584 ;; This function calls:
  3585 ;;		_drawAdvON
  3586 ;;		_drawAutoCalibRM
  3587 ;;		_drawBadPass
  3588 ;;		_drawCalibProc
  3589 ;;		_drawChanVal
  3590 ;;		_drawCutError
  3591 ;;		_drawMenu
  3592 ;;		_drawPassWord
  3593 ;;		_drawReady2Cut
  3594 ;;		_drawSNquest
  3595 ;; This function is called by:
  3596 ;;		_main
  3597 ;; This function uses a non-reentrant model
  3598 ;;
  3599                           
  3600                           	psect	text10
  3601  0051F2                     __ptext10:
  3602                           	opt stack 0
  3603  0051F2                     _drawScreen:
  3604                           	opt stack 9
  3605                           
  3606                           ;screenDrawers.h: 251: switch (actualScreen) {
  3607                           
  3608                           ;incstack = 0
  3609  0051F2  D039               	goto	l11692
  3610  0051F4                     l11658:
  3611                           
  3612                           ;screenDrawers.h: 253: drawMenu(0);
  3613  0051F4  0E00               	movlw	0
  3614  0051F6  EC35  F018         	call	_drawMenu
  3615                           
  3616                           ;screenDrawers.h: 254: break;
  3617  0051FA  0012               	return	
  3618  0051FC                     l11660:
  3619                           
  3620                           ;screenDrawers.h: 256: drawPassWord();
  3621  0051FC  EC83  F028         	call	_drawPassWord	;wreg free
  3622                           
  3623                           ;screenDrawers.h: 257: break;
  3624  005200  0012               	return	
  3625  005202                     l11662:
  3626                           
  3627                           ;screenDrawers.h: 259: drawBadPass();
  3628  005202  EC6B  F039         	call	_drawBadPass	;wreg free
  3629                           
  3630                           ;screenDrawers.h: 260: break;
  3631  005206  0012               	return	
  3632  005208                     l11664:
  3633                           
  3634                           ;screenDrawers.h: 262: drawMenu(1);
  3635  005208  0E01               	movlw	1
  3636  00520A  EC35  F018         	call	_drawMenu
  3637                           
  3638                           ;screenDrawers.h: 263: break;
  3639  00520E  0012               	return	
  3640  005210                     l11666:
  3641                           
  3642                           ;screenDrawers.h: 265: drawAdvON(1);
  3643  005210  0E01               	movlw	1
  3644  005212  EC56  F036         	call	_drawAdvON
  3645                           
  3646                           ;screenDrawers.h: 266: break;
  3647  005216  0012               	return	
  3648  005218                     l11668:
  3649                           
  3650                           ;screenDrawers.h: 268: drawAdvON(0);
  3651  005218  0E00               	movlw	0
  3652  00521A  EC56  F036         	call	_drawAdvON
  3653                           
  3654                           ;screenDrawers.h: 269: break;
  3655  00521E  0012               	return	
  3656  005220                     l11670:
  3657                           
  3658                           ;screenDrawers.h: 271: drawChanVal();
  3659  005220  EC57  F032         	call	_drawChanVal	;wreg free
  3660                           
  3661                           ;screenDrawers.h: 272: break;
  3662  005224  0012               	return	
  3663  005226                     l11672:
  3664                           
  3665                           ;screenDrawers.h: 274: drawSNquest(0);
  3666  005226  0E00               	movlw	0
  3667  005228  ECE3  F024         	call	_drawSNquest
  3668                           
  3669                           ;screenDrawers.h: 275: break;
  3670  00522C  0012               	return	
  3671  00522E                     l11674:
  3672                           
  3673                           ;screenDrawers.h: 277: drawSNquest(1);
  3674  00522E  0E01               	movlw	1
  3675  005230  ECE3  F024         	call	_drawSNquest
  3676                           
  3677                           ;screenDrawers.h: 278: break;
  3678  005234  0012               	return	
  3679  005236                     l11676:
  3680                           
  3681                           ;screenDrawers.h: 280: drawSNquest(2);
  3682  005236  0E02               	movlw	2
  3683  005238  ECE3  F024         	call	_drawSNquest
  3684                           
  3685                           ;screenDrawers.h: 281: break;
  3686  00523C  0012               	return	
  3687  00523E                     l11678:
  3688                           
  3689                           ;screenDrawers.h: 283: drawSNquest(3);
  3690  00523E  0E03               	movlw	3
  3691  005240  ECE3  F024         	call	_drawSNquest
  3692                           
  3693                           ;screenDrawers.h: 284: break;
  3694  005244  0012               	return	
  3695  005246                     l11680:
  3696                           
  3697                           ;screenDrawers.h: 286: drawCalibProc();
  3698  005246  EC11  F032         	call	_drawCalibProc	;wreg free
  3699                           
  3700                           ;screenDrawers.h: 287: break;
  3701  00524A  0012               	return	
  3702  00524C                     l11682:
  3703                           
  3704                           ;screenDrawers.h: 289: drawAutoCalibRM();
  3705  00524C  EC0D  F038         	call	_drawAutoCalibRM	;wreg free
  3706                           
  3707                           ;screenDrawers.h: 290: break;
  3708  005250  0012               	return	
  3709  005252                     l11684:
  3710                           
  3711                           ;screenDrawers.h: 292: drawCutError();
  3712  005252  EC6D  F038         	call	_drawCutError	;wreg free
  3713                           
  3714                           ;screenDrawers.h: 293: break;
  3715  005256  0012               	return	
  3716  005258                     l11686:
  3717                           
  3718                           ;screenDrawers.h: 295: drawReady2Cut();
  3719  005258  EC56  F038         	call	_drawReady2Cut	;wreg free
  3720                           
  3721                           ;screenDrawers.h: 296: break;
  3722  00525C  0012               	return	
  3723  00525E                     l11688:
  3724                           
  3725                           ;screenDrawers.h: 298: drawSNquest(4);
  3726  00525E  0E04               	movlw	4
  3727  005260  ECE3  F024         	call	_drawSNquest
  3728                           
  3729                           ;screenDrawers.h: 300: }
  3730                           ;screenDrawers.h: 301: }
  3731                           
  3732                           ;screenDrawers.h: 299: break;
  3733  005264  0012               	return	
  3734  005266                     l11692:
  3735  005266  0101               	movlb	1	; () banked
  3736  005268  51B9               	movf	_actualScreen& (0+255),w,b
  3737                           
  3738                           ; Switch size 1, requested type "space"
  3739                           ; Number of cases is 16, Range of values is 0 to 15
  3740                           ; switch strategies available:
  3741                           ; Name         Instructions Cycles
  3742                           ; simple_byte           49    25 (average)
  3743                           ;	Chosen strategy is simple_byte
  3744  00526A  0A00               	xorlw	0	; case 0
  3745  00526C  B4D8               	btfsc	status,2,c
  3746  00526E  D7C2               	goto	l11658
  3747  005270  0A01               	xorlw	1	; case 1
  3748  005272  B4D8               	btfsc	status,2,c
  3749  005274  D7C3               	goto	l11660
  3750  005276  0A03               	xorlw	3	; case 2
  3751  005278  B4D8               	btfsc	status,2,c
  3752  00527A  D7D5               	goto	l11672
  3753  00527C  0A01               	xorlw	1	; case 3
  3754  00527E  B4D8               	btfsc	status,2,c
  3755  005280  D7D6               	goto	l11674
  3756  005282  0A07               	xorlw	7	; case 4
  3757  005284  B4D8               	btfsc	status,2,c
  3758  005286  D7C0               	goto	l11664
  3759  005288  0A01               	xorlw	1	; case 5
  3760  00528A  B4D8               	btfsc	status,2,c
  3761  00528C  D7C9               	goto	l11670
  3762  00528E  0A03               	xorlw	3	; case 6
  3763  005290  B4D8               	btfsc	status,2,c
  3764  005292  D7D9               	goto	l11680
  3765  005294  0A01               	xorlw	1	; case 7
  3766  005296  B4D8               	btfsc	status,2,c
  3767  005298  D7B4               	goto	l11662
  3768  00529A  0A0F               	xorlw	15	; case 8
  3769  00529C  B4D8               	btfsc	status,2,c
  3770  00529E  D7B8               	goto	l11666
  3771  0052A0  0A01               	xorlw	1	; case 9
  3772  0052A2  B4D8               	btfsc	status,2,c
  3773  0052A4  D7B9               	goto	l11668
  3774  0052A6  0A03               	xorlw	3	; case 10
  3775  0052A8  B4D8               	btfsc	status,2,c
  3776  0052AA  D7C5               	goto	l11676
  3777  0052AC  0A01               	xorlw	1	; case 11
  3778  0052AE  B4D8               	btfsc	status,2,c
  3779  0052B0  D7C6               	goto	l11678
  3780  0052B2  0A07               	xorlw	7	; case 12
  3781  0052B4  B4D8               	btfsc	status,2,c
  3782  0052B6  D7CA               	goto	l11682
  3783  0052B8  0A01               	xorlw	1	; case 13
  3784  0052BA  B4D8               	btfsc	status,2,c
  3785  0052BC  D7CA               	goto	l11684
  3786  0052BE  0A03               	xorlw	3	; case 14
  3787  0052C0  B4D8               	btfsc	status,2,c
  3788  0052C2  D7CA               	goto	l11686
  3789  0052C4  0A01               	xorlw	1	; case 15
  3790  0052C6  A4D8               	btfss	status,2,c
  3791  0052C8  0012               	return	
  3792  0052CA  D7C9               	goto	l11688
  3793  0052CC                     __end_of_drawScreen:
  3794                           	opt stack 0
  3795                           tblptru	equ	0xFF8
  3796                           tblptrh	equ	0xFF7
  3797                           tblptrl	equ	0xFF6
  3798                           tablat	equ	0xFF5
  3799                           prodh	equ	0xFF4
  3800                           prodl	equ	0xFF3
  3801                           intcon	equ	0xFF2
  3802                           postinc0	equ	0xFEE
  3803                           wreg	equ	0xFE8
  3804                           postdec1	equ	0xFE5
  3805                           fsr1l	equ	0xFE1
  3806                           indf2	equ	0xFDF
  3807                           fsr2h	equ	0xFDA
  3808                           fsr2l	equ	0xFD9
  3809                           status	equ	0xFD8
  3810                           
  3811 ;; *************** function _drawSNquest *****************
  3812 ;; Defined at:
  3813 ;;		line 198 in file "source/screenDrawers.h"
  3814 ;; Parameters:    Size  Location     Type
  3815 ;;  tq              1    wreg     unsigned char 
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;  tq              1  118[BANK1 ] unsigned char 
  3818 ;;  i               2  116[BANK1 ] int 
  3819 ;; Return value:  Size  Location     Type
  3820 ;;                  1    wreg      void 
  3821 ;; Registers used:
  3822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3823 ;; Tracked objects:
  3824 ;;		On entry : 0/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3828 ;;      Params:         0       0       0       0       0       0       0
  3829 ;;      Locals:         0       0       3       0       0       0       0
  3830 ;;      Temps:          0       0       0       0       0       0       0
  3831 ;;      Totals:         0       0       3       0       0       0       0
  3832 ;;Total ram usage:        3 bytes
  3833 ;; Hardware stack levels used:    1
  3834 ;; Hardware stack levels required when called:   19
  3835 ;; This function calls:
  3836 ;;		_lcd_gotoxy
  3837 ;;		_printf
  3838 ;; This function is called by:
  3839 ;;		_drawScreen
  3840 ;; This function uses a non-reentrant model
  3841 ;;
  3842                           
  3843                           	psect	text11
  3844  0049C6                     __ptext11:
  3845                           	opt stack 0
  3846  0049C6                     _drawSNquest:
  3847                           	opt stack 10
  3848                           
  3849                           ;incstack = 0
  3850                           ;drawSNquest@tq stored from wreg
  3851  0049C6  0101               	movlb	1	; () banked
  3852  0049C8  6F76               	movwf	drawSNquest@tq& (0+255),b
  3853                           
  3854                           ;screenDrawers.h: 199: int i;
  3855                           ;screenDrawers.h: 200: for (i = 0; i < 2; i++)
  3856  0049CA  0E00               	movlw	0
  3857  0049CC  0101               	movlb	1	; () banked
  3858  0049CE  6F75               	movwf	(drawSNquest@i+1)& (0+255),b
  3859  0049D0  0E00               	movlw	0
  3860  0049D2  6F74               	movwf	drawSNquest@i& (0+255),b
  3861  0049D4                     l11014:
  3862                           
  3863                           ; BSR set to: 1
  3864  0049D4  0101               	movlb	1	; () banked
  3865  0049D6  BF75               	btfsc	(drawSNquest@i+1)& (0+255),7,b
  3866  0049D8  D008               	goto	l11018
  3867  0049DA  0101               	movlb	1	; () banked
  3868  0049DC  5175               	movf	(drawSNquest@i+1)& (0+255),w,b
  3869  0049DE  E113               	bnz	l11024
  3870  0049E0  0E02               	movlw	2
  3871  0049E2  0101               	movlb	1	; () banked
  3872  0049E4  5D74               	subwf	drawSNquest@i& (0+255),w,b
  3873  0049E6  B0D8               	btfsc	status,0,c
  3874  0049E8  D00E               	goto	l11024
  3875  0049EA                     l11018:
  3876                           
  3877                           ; BSR set to: 1
  3878                           ;screenDrawers.h: 201: questSN[i] = ' ';
  3879  0049EA  0EB6               	movlw	low _questSN
  3880  0049EC  0101               	movlb	1	; () banked
  3881  0049EE  2574               	addwf	drawSNquest@i& (0+255),w,b
  3882  0049F0  6ED9               	movwf	fsr2l,c
  3883  0049F2  0E01               	movlw	high _questSN
  3884  0049F4  0101               	movlb	1	; () banked
  3885  0049F6  2175               	addwfc	(drawSNquest@i+1)& (0+255),w,b
  3886  0049F8  6EDA               	movwf	fsr2h,c
  3887  0049FA  0E20               	movlw	32
  3888  0049FC  6EDF               	movwf	indf2,c
  3889                           
  3890                           ; BSR set to: 1
  3891  0049FE  0101               	movlb	1	; () banked
  3892  004A00  4B74               	infsnz	drawSNquest@i& (0+255),f,b
  3893  004A02  2B75               	incf	(drawSNquest@i+1)& (0+255),f,b
  3894  004A04  D7E7               	goto	l11014
  3895  004A06                     l11024:
  3896                           
  3897                           ; BSR set to: 1
  3898                           ;screenDrawers.h: 202: questSN[selSN] = flech;
  3899  004A06  0101               	movlb	1	; () banked
  3900  004A08  51BF               	movf	_selSN& (0+255),w,b
  3901  004A0A  0D01               	mullw	1
  3902  004A0C  0EB6               	movlw	low _questSN
  3903  004A0E  24F3               	addwf	prodl,w,c
  3904  004A10  6ED9               	movwf	fsr2l,c
  3905  004A12  0E01               	movlw	high _questSN
  3906  004A14  20F4               	addwfc	prodh,w,c
  3907  004A16  6EDA               	movwf	fsr2h,c
  3908  004A18  C19C  FFDF         	movff	_flech,indf2
  3909                           
  3910                           ; BSR set to: 1
  3911                           ;screenDrawers.h: 203: lcd_gotoxy(1, 1);
  3912  004A1C  0E01               	movlw	1
  3913  004A1E  0101               	movlb	1	; () banked
  3914  004A20  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  3915  004A22  0E01               	movlw	1
  3916  004A24  EC26  F038         	call	_lcd_gotoxy
  3917                           
  3918                           ;screenDrawers.h: 204: if (tq == 0)
  3919  004A28  0101               	movlb	1	; () banked
  3920  004A2A  5176               	movf	drawSNquest@tq& (0+255),w,b
  3921  004A2C  0101               	movlb	1	; () banked
  3922  004A2E  A4D8               	btfss	status,2,c
  3923  004A30  D009               	goto	l11032
  3924                           
  3925                           ; BSR set to: 1
  3926                           ;screenDrawers.h: 205: printf("Iniciar Proceso?\n");
  3927  004A32  0E88               	movlw	low STR_26
  3928  004A34  0101               	movlb	1	; () banked
  3929  004A36  6F3F               	movwf	printf@f& (0+255),b
  3930  004A38  0E7E               	movlw	high STR_26
  3931  004A3A  0101               	movlb	1	; () banked
  3932  004A3C  6F40               	movwf	(printf@f+1)& (0+255),b
  3933  004A3E  EC61  F000         	call	_printf	;wreg free
  3934  004A42  D036               	goto	l418
  3935  004A44                     l11032:
  3936                           
  3937                           ;screenDrawers.h: 206: else if(tq == 1)
  3938  004A44  0101               	movlb	1	; () banked
  3939  004A46  0576               	decf	drawSNquest@tq& (0+255),w,b
  3940  004A48  A4D8               	btfss	status,2,c
  3941  004A4A  D009               	goto	l11036
  3942                           
  3943                           ; BSR set to: 1
  3944                           ;screenDrawers.h: 207: printf("Detener Proceso?\n");
  3945  004A4C  0E9A               	movlw	low STR_27
  3946  004A4E  0101               	movlb	1	; () banked
  3947  004A50  6F3F               	movwf	printf@f& (0+255),b
  3948  004A52  0E7E               	movlw	high STR_27
  3949  004A54  0101               	movlb	1	; () banked
  3950  004A56  6F40               	movwf	(printf@f+1)& (0+255),b
  3951  004A58  EC61  F000         	call	_printf	;wreg free
  3952  004A5C  D029               	goto	l418
  3953  004A5E                     l11036:
  3954                           
  3955                           ;screenDrawers.h: 208: else if(tq == 2)
  3956  004A5E  0E02               	movlw	2
  3957  004A60  0101               	movlb	1	; () banked
  3958  004A62  1976               	xorwf	drawSNquest@tq& (0+255),w,b
  3959  004A64  A4D8               	btfss	status,2,c
  3960  004A66  D009               	goto	l11040
  3961                           
  3962                           ; BSR set to: 1
  3963                           ;screenDrawers.h: 209: printf("Guardar Cambio? \n");
  3964  004A68  0E40               	movlw	low STR_28
  3965  004A6A  0101               	movlb	1	; () banked
  3966  004A6C  6F3F               	movwf	printf@f& (0+255),b
  3967  004A6E  0E7E               	movlw	high STR_28
  3968  004A70  0101               	movlb	1	; () banked
  3969  004A72  6F40               	movwf	(printf@f+1)& (0+255),b
  3970  004A74  EC61  F000         	call	_printf	;wreg free
  3971  004A78  D01B               	goto	l418
  3972  004A7A                     l11040:
  3973                           
  3974                           ;screenDrawers.h: 210: else if(tq == 3)
  3975  004A7A  0E03               	movlw	3
  3976  004A7C  0101               	movlb	1	; () banked
  3977  004A7E  1976               	xorwf	drawSNquest@tq& (0+255),w,b
  3978  004A80  A4D8               	btfss	status,2,c
  3979  004A82  D009               	goto	l11044
  3980                           
  3981                           ; BSR set to: 1
  3982                           ;screenDrawers.h: 211: printf("Init AutoCalib? \n");
  3983  004A84  0E2E               	movlw	low STR_29
  3984  004A86  0101               	movlb	1	; () banked
  3985  004A88  6F3F               	movwf	printf@f& (0+255),b
  3986  004A8A  0E7E               	movlw	high STR_29
  3987  004A8C  0101               	movlb	1	; () banked
  3988  004A8E  6F40               	movwf	(printf@f+1)& (0+255),b
  3989  004A90  EC61  F000         	call	_printf	;wreg free
  3990  004A94  D00D               	goto	l418
  3991  004A96                     l11044:
  3992                           
  3993                           ;screenDrawers.h: 212: else if(tq == 4)
  3994  004A96  0E04               	movlw	4
  3995  004A98  0101               	movlb	1	; () banked
  3996  004A9A  1976               	xorwf	drawSNquest@tq& (0+255),w,b
  3997  004A9C  A4D8               	btfss	status,2,c
  3998  004A9E  D008               	goto	l418
  3999                           
  4000                           ; BSR set to: 1
  4001                           ;screenDrawers.h: 213: printf("Stop AutoCalib? \n");
  4002  004AA0  0E1C               	movlw	low STR_30
  4003  004AA2  0101               	movlb	1	; () banked
  4004  004AA4  6F3F               	movwf	printf@f& (0+255),b
  4005  004AA6  0E7E               	movlw	high STR_30
  4006  004AA8  0101               	movlb	1	; () banked
  4007  004AAA  6F40               	movwf	(printf@f+1)& (0+255),b
  4008  004AAC  EC61  F000         	call	_printf	;wreg free
  4009  004AB0                     l418:
  4010                           
  4011                           ;screenDrawers.h: 214: printf("   %cSI    %cNO   ", questSN[0], questSN[1]);
  4012  004AB0  0E8B               	movlw	low STR_31
  4013  004AB2  0101               	movlb	1	; () banked
  4014  004AB4  6F3F               	movwf	printf@f& (0+255),b
  4015  004AB6  0E7D               	movlw	high STR_31
  4016  004AB8  0101               	movlb	1	; () banked
  4017  004ABA  6F40               	movwf	(printf@f+1)& (0+255),b
  4018  004ABC  C1B6  F141         	movff	_questSN,?_printf+2
  4019  004AC0  0101               	movlb	1	; () banked
  4020  004AC2  6B42               	clrf	(?_printf+3)& (0+255),b
  4021  004AC4  C1B7  F143         	movff	_questSN+1,?_printf+4
  4022  004AC8  0101               	movlb	1	; () banked
  4023  004ACA  6B44               	clrf	(?_printf+5)& (0+255),b
  4024  004ACC  EC61  F000         	call	_printf	;wreg free
  4025  004AD0  0012               	return		;funcret
  4026  004AD2                     __end_of_drawSNquest:
  4027                           	opt stack 0
  4028                           tblptru	equ	0xFF8
  4029                           tblptrh	equ	0xFF7
  4030                           tblptrl	equ	0xFF6
  4031                           tablat	equ	0xFF5
  4032                           prodh	equ	0xFF4
  4033                           prodl	equ	0xFF3
  4034                           intcon	equ	0xFF2
  4035                           postinc0	equ	0xFEE
  4036                           wreg	equ	0xFE8
  4037                           postdec1	equ	0xFE5
  4038                           fsr1l	equ	0xFE1
  4039                           indf2	equ	0xFDF
  4040                           fsr2h	equ	0xFDA
  4041                           fsr2l	equ	0xFD9
  4042                           status	equ	0xFD8
  4043                           
  4044 ;; *************** function _drawReady2Cut *****************
  4045 ;; Defined at:
  4046 ;;		line 230 in file "source/screenDrawers.h"
  4047 ;; Parameters:    Size  Location     Type
  4048 ;;		None
  4049 ;; Auto vars:     Size  Location     Type
  4050 ;;		None
  4051 ;; Return value:  Size  Location     Type
  4052 ;;                  1    wreg      void 
  4053 ;; Registers used:
  4054 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4055 ;; Tracked objects:
  4056 ;;		On entry : 0/0
  4057 ;;		On exit  : 0/0
  4058 ;;		Unchanged: 0/0
  4059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4060 ;;      Params:         0       0       0       0       0       0       0
  4061 ;;      Locals:         0       0       0       0       0       0       0
  4062 ;;      Temps:          0       0       0       0       0       0       0
  4063 ;;      Totals:         0       0       0       0       0       0       0
  4064 ;;Total ram usage:        0 bytes
  4065 ;; Hardware stack levels used:    1
  4066 ;; Hardware stack levels required when called:   19
  4067 ;; This function calls:
  4068 ;;		_lcd_gotoxy
  4069 ;;		_printf
  4070 ;; This function is called by:
  4071 ;;		_drawScreen
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           	psect	text12
  4076  0070AC                     __ptext12:
  4077                           	opt stack 0
  4078  0070AC                     _drawReady2Cut:
  4079                           	opt stack 10
  4080                           
  4081                           ;screenDrawers.h: 231: lcd_gotoxy(1, 1);
  4082                           
  4083                           ;incstack = 0
  4084  0070AC  0E01               	movlw	1
  4085  0070AE  0101               	movlb	1	; () banked
  4086  0070B0  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4087  0070B2  0E01               	movlw	1
  4088  0070B4  EC26  F038         	call	_lcd_gotoxy
  4089                           
  4090                           ;screenDrawers.h: 232: printf("   Enter para:  \n");
  4091  0070B8  0EE6               	movlw	low STR_36
  4092  0070BA  0101               	movlb	1	; () banked
  4093  0070BC  6F3F               	movwf	printf@f& (0+255),b
  4094  0070BE  0E7D               	movlw	high STR_36
  4095  0070C0  0101               	movlb	1	; () banked
  4096  0070C2  6F40               	movwf	(printf@f+1)& (0+255),b
  4097  0070C4  EC61  F000         	call	_printf	;wreg free
  4098                           
  4099                           ;screenDrawers.h: 233: printf("Empezar a cortar");
  4100  0070C8  0ED7               	movlw	low STR_37
  4101  0070CA  0101               	movlb	1	; () banked
  4102  0070CC  6F3F               	movwf	printf@f& (0+255),b
  4103  0070CE  0E7F               	movlw	high STR_37
  4104  0070D0  0101               	movlb	1	; () banked
  4105  0070D2  6F40               	movwf	(printf@f+1)& (0+255),b
  4106  0070D4  EC61  F000         	call	_printf	;wreg free
  4107  0070D8  0012               	return		;funcret
  4108  0070DA                     __end_of_drawReady2Cut:
  4109                           	opt stack 0
  4110                           tblptru	equ	0xFF8
  4111                           tblptrh	equ	0xFF7
  4112                           tblptrl	equ	0xFF6
  4113                           tablat	equ	0xFF5
  4114                           prodh	equ	0xFF4
  4115                           prodl	equ	0xFF3
  4116                           intcon	equ	0xFF2
  4117                           postinc0	equ	0xFEE
  4118                           wreg	equ	0xFE8
  4119                           postdec1	equ	0xFE5
  4120                           fsr1l	equ	0xFE1
  4121                           indf2	equ	0xFDF
  4122                           fsr2h	equ	0xFDA
  4123                           fsr2l	equ	0xFD9
  4124                           status	equ	0xFD8
  4125                           
  4126 ;; *************** function _drawPassWord *****************
  4127 ;; Defined at:
  4128 ;;		line 166 in file "source/screenDrawers.h"
  4129 ;; Parameters:    Size  Location     Type
  4130 ;;		None
  4131 ;; Auto vars:     Size  Location     Type
  4132 ;;  i               2  116[BANK1 ] int 
  4133 ;; Return value:  Size  Location     Type
  4134 ;;                  1    wreg      void 
  4135 ;; Registers used:
  4136 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4137 ;; Tracked objects:
  4138 ;;		On entry : 0/0
  4139 ;;		On exit  : 0/0
  4140 ;;		Unchanged: 0/0
  4141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4142 ;;      Params:         0       0       0       0       0       0       0
  4143 ;;      Locals:         0       0       2       0       0       0       0
  4144 ;;      Temps:          0       0       0       0       0       0       0
  4145 ;;      Totals:         0       0       2       0       0       0       0
  4146 ;;Total ram usage:        2 bytes
  4147 ;; Hardware stack levels used:    1
  4148 ;; Hardware stack levels required when called:   20
  4149 ;; This function calls:
  4150 ;;		_drawPass1Lin
  4151 ;;		_printf
  4152 ;; This function is called by:
  4153 ;;		_drawScreen
  4154 ;; This function uses a non-reentrant model
  4155 ;;
  4156                           
  4157                           	psect	text13
  4158  005106                     __ptext13:
  4159                           	opt stack 0
  4160  005106                     _drawPassWord:
  4161                           	opt stack 9
  4162                           
  4163                           ;screenDrawers.h: 167: if (!fd) {
  4164                           
  4165                           ;incstack = 0
  4166  005106  0101               	movlb	1	; () banked
  4167  005108  51BB               	movf	_fd& (0+255),w,b
  4168  00510A  A4D8               	btfss	status,2,c
  4169  00510C  D012               	goto	l401
  4170                           
  4171                           ; BSR set to: 1
  4172                           ;screenDrawers.h: 168: passSection = 0;
  4173  00510E  0E00               	movlw	0
  4174  005110  0101               	movlb	1	; () banked
  4175  005112  6FBE               	movwf	_passSection& (0+255),b
  4176                           
  4177                           ;screenDrawers.h: 169: introducido[0] = 0;
  4178  005114  0E00               	movlw	0
  4179  005116  0101               	movlb	1	; () banked
  4180  005118  6FA9               	movwf	_introducido& (0+255),b
  4181                           
  4182                           ;screenDrawers.h: 170: introducido[1] = 0;
  4183  00511A  0E00               	movlw	0
  4184  00511C  0101               	movlb	1	; () banked
  4185  00511E  6FAA               	movwf	(_introducido+1)& (0+255),b
  4186                           
  4187                           ;screenDrawers.h: 171: introducido[2] = 0;
  4188  005120  0E00               	movlw	0
  4189  005122  0101               	movlb	1	; () banked
  4190  005124  6FAB               	movwf	(_introducido+2)& (0+255),b
  4191                           
  4192                           ;screenDrawers.h: 172: introducido[3] = 0;
  4193  005126  0E00               	movlw	0
  4194  005128  0101               	movlb	1	; () banked
  4195  00512A  6FAC               	movwf	(_introducido+3)& (0+255),b
  4196                           
  4197                           ;screenDrawers.h: 173: fd = 1;
  4198  00512C  0E01               	movlw	1
  4199  00512E  0101               	movlb	1	; () banked
  4200  005130  6FBB               	movwf	_fd& (0+255),b
  4201  005132                     l401:
  4202                           
  4203                           ; BSR set to: 1
  4204                           ;screenDrawers.h: 174: }
  4205                           ;screenDrawers.h: 175: int i;
  4206                           ;screenDrawers.h: 176: for (i = 0; i < 4; i++)
  4207  005132  0E00               	movlw	0
  4208  005134  0101               	movlb	1	; () banked
  4209  005136  6F75               	movwf	(drawPassWord@i+1)& (0+255),b
  4210  005138  0E00               	movlw	0
  4211  00513A  6F74               	movwf	drawPassWord@i& (0+255),b
  4212  00513C                     l10984:
  4213                           
  4214                           ; BSR set to: 1
  4215  00513C  0101               	movlb	1	; () banked
  4216  00513E  BF75               	btfsc	(drawPassWord@i+1)& (0+255),7,b
  4217  005140  D008               	goto	l10988
  4218  005142  0101               	movlb	1	; () banked
  4219  005144  5175               	movf	(drawPassWord@i+1)& (0+255),w,b
  4220  005146  E113               	bnz	l10994
  4221  005148  0E04               	movlw	4
  4222  00514A  0101               	movlb	1	; () banked
  4223  00514C  5D74               	subwf	drawPassWord@i& (0+255),w,b
  4224  00514E  B0D8               	btfsc	status,0,c
  4225  005150  D00E               	goto	l10994
  4226  005152                     l10988:
  4227                           
  4228                           ; BSR set to: 1
  4229                           ;screenDrawers.h: 177: passChar[i] = ' ';
  4230  005152  0EAD               	movlw	low _passChar
  4231  005154  0101               	movlb	1	; () banked
  4232  005156  2574               	addwf	drawPassWord@i& (0+255),w,b
  4233  005158  6ED9               	movwf	fsr2l,c
  4234  00515A  0E01               	movlw	high _passChar
  4235  00515C  0101               	movlb	1	; () banked
  4236  00515E  2175               	addwfc	(drawPassWord@i+1)& (0+255),w,b
  4237  005160  6EDA               	movwf	fsr2h,c
  4238  005162  0E20               	movlw	32
  4239  005164  6EDF               	movwf	indf2,c
  4240                           
  4241                           ; BSR set to: 1
  4242  005166  0101               	movlb	1	; () banked
  4243  005168  4B74               	infsnz	drawPassWord@i& (0+255),f,b
  4244  00516A  2B75               	incf	(drawPassWord@i+1)& (0+255),f,b
  4245  00516C  D7E7               	goto	l10984
  4246  00516E                     l10994:
  4247                           
  4248                           ; BSR set to: 1
  4249                           ;screenDrawers.h: 178: passChar[passSection] = flech;
  4250  00516E  0101               	movlb	1	; () banked
  4251  005170  51BE               	movf	_passSection& (0+255),w,b
  4252  005172  0D01               	mullw	1
  4253  005174  0EAD               	movlw	low _passChar
  4254  005176  24F3               	addwf	prodl,w,c
  4255  005178  6ED9               	movwf	fsr2l,c
  4256  00517A  0E01               	movlw	high _passChar
  4257  00517C  20F4               	addwfc	prodh,w,c
  4258  00517E  6EDA               	movwf	fsr2h,c
  4259  005180  C19C  FFDF         	movff	_flech,indf2
  4260                           
  4261                           ; BSR set to: 1
  4262                           ;screenDrawers.h: 179: drawPass1Lin();
  4263  005184  EC38  F039         	call	_drawPass1Lin	;wreg free
  4264                           
  4265                           ;screenDrawers.h: 180: printf("    %c%u%c%u%c%u%c%u    ", passChar[0], introducido[0], p
      +                          assChar[1], introducido[1],
  4266                           ;screenDrawers.h: 181: passChar[2], introducido[2], passChar[3], introducido[3]);
  4267  005188  0E4B               	movlw	low STR_21
  4268  00518A  0101               	movlb	1	; () banked
  4269  00518C  6F3F               	movwf	printf@f& (0+255),b
  4270  00518E  0E7D               	movlw	high STR_21
  4271  005190  0101               	movlb	1	; () banked
  4272  005192  6F40               	movwf	(printf@f+1)& (0+255),b
  4273  005194  C1AD  F141         	movff	_passChar,?_printf+2
  4274  005198  0101               	movlb	1	; () banked
  4275  00519A  6B42               	clrf	(?_printf+3)& (0+255),b
  4276  00519C  0101               	movlb	1	; () banked
  4277  00519E  51A9               	movf	_introducido& (0+255),w,b
  4278  0051A0  0101               	movlb	1	; () banked
  4279  0051A2  6F43               	movwf	(?_printf+4)& (0+255),b
  4280  0051A4  6B44               	clrf	(?_printf+5)& (0+255),b
  4281  0051A6  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  4282  0051A8  0744               	decf	(?_printf+5)& (0+255),f,b
  4283  0051AA  C1AE  F145         	movff	_passChar+1,?_printf+6
  4284  0051AE  0101               	movlb	1	; () banked
  4285  0051B0  6B46               	clrf	(?_printf+7)& (0+255),b
  4286  0051B2  0101               	movlb	1	; () banked
  4287  0051B4  51AA               	movf	(_introducido+1)& (0+255),w,b
  4288  0051B6  0101               	movlb	1	; () banked
  4289  0051B8  6F47               	movwf	(?_printf+8)& (0+255),b
  4290  0051BA  6B48               	clrf	(?_printf+9)& (0+255),b
  4291  0051BC  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  4292  0051BE  0748               	decf	(?_printf+9)& (0+255),f,b
  4293  0051C0  C1AF  F149         	movff	_passChar+2,?_printf+10
  4294  0051C4  0101               	movlb	1	; () banked
  4295  0051C6  6B4A               	clrf	(?_printf+11)& (0+255),b
  4296  0051C8  0101               	movlb	1	; () banked
  4297  0051CA  51AB               	movf	(_introducido+2)& (0+255),w,b
  4298  0051CC  0101               	movlb	1	; () banked
  4299  0051CE  6F4B               	movwf	(?_printf+12)& (0+255),b
  4300  0051D0  6B4C               	clrf	(?_printf+13)& (0+255),b
  4301  0051D2  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  4302  0051D4  074C               	decf	(?_printf+13)& (0+255),f,b
  4303  0051D6  C1B0  F14D         	movff	_passChar+3,?_printf+14
  4304  0051DA  0101               	movlb	1	; () banked
  4305  0051DC  6B4E               	clrf	(?_printf+15)& (0+255),b
  4306  0051DE  0101               	movlb	1	; () banked
  4307  0051E0  51AC               	movf	(_introducido+3)& (0+255),w,b
  4308  0051E2  0101               	movlb	1	; () banked
  4309  0051E4  6F4F               	movwf	(?_printf+16)& (0+255),b
  4310  0051E6  6B50               	clrf	(?_printf+17)& (0+255),b
  4311  0051E8  BF4F               	btfsc	(?_printf+16)& (0+255),7,b
  4312  0051EA  0750               	decf	(?_printf+17)& (0+255),f,b
  4313  0051EC  EC61  F000         	call	_printf	;wreg free
  4314  0051F0  0012               	return		;funcret
  4315  0051F2                     __end_of_drawPassWord:
  4316                           	opt stack 0
  4317                           tblptru	equ	0xFF8
  4318                           tblptrh	equ	0xFF7
  4319                           tblptrl	equ	0xFF6
  4320                           tablat	equ	0xFF5
  4321                           prodh	equ	0xFF4
  4322                           prodl	equ	0xFF3
  4323                           intcon	equ	0xFF2
  4324                           postinc0	equ	0xFEE
  4325                           wreg	equ	0xFE8
  4326                           postdec1	equ	0xFE5
  4327                           fsr1l	equ	0xFE1
  4328                           indf2	equ	0xFDF
  4329                           fsr2h	equ	0xFDA
  4330                           fsr2l	equ	0xFD9
  4331                           status	equ	0xFD8
  4332                           
  4333 ;; *************** function _drawMenu *****************
  4334 ;; Defined at:
  4335 ;;		line 91 in file "source/screenDrawers.h"
  4336 ;; Parameters:    Size  Location     Type
  4337 ;;  adv             1    wreg     unsigned char 
  4338 ;; Auto vars:     Size  Location     Type
  4339 ;;  adv             1  116[BANK1 ] unsigned char 
  4340 ;; Return value:  Size  Location     Type
  4341 ;;                  1    wreg      void 
  4342 ;; Registers used:
  4343 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4344 ;; Tracked objects:
  4345 ;;		On entry : 0/0
  4346 ;;		On exit  : 0/0
  4347 ;;		Unchanged: 0/0
  4348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4349 ;;      Params:         0       0       0       0       0       0       0
  4350 ;;      Locals:         0       0       1       0       0       0       0
  4351 ;;      Temps:          0       0       0       0       0       0       0
  4352 ;;      Totals:         0       0       1       0       0       0       0
  4353 ;;Total ram usage:        1 bytes
  4354 ;; Hardware stack levels used:    1
  4355 ;; Hardware stack levels required when called:   19
  4356 ;; This function calls:
  4357 ;;		_lcd_gotoxy
  4358 ;;		_lcd_putc
  4359 ;;		_printf
  4360 ;; This function is called by:
  4361 ;;		_drawScreen
  4362 ;; This function uses a non-reentrant model
  4363 ;;
  4364                           
  4365                           	psect	text14
  4366  00306A                     __ptext14:
  4367                           	opt stack 0
  4368  00306A                     _drawMenu:
  4369                           	opt stack 10
  4370                           
  4371                           ;incstack = 0
  4372                           ;drawMenu@adv stored from wreg
  4373  00306A  0101               	movlb	1	; () banked
  4374  00306C  6F74               	movwf	drawMenu@adv& (0+255),b
  4375                           
  4376                           ;screenDrawers.h: 92: switch (menuSection) {
  4377  00306E  D0C9               	goto	l10958
  4378  003070                     l10904:
  4379                           
  4380                           ;screenDrawers.h: 94: lcd_gotoxy(1, 1);
  4381  003070  0E01               	movlw	1
  4382  003072  0101               	movlb	1	; () banked
  4383  003074  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4384  003076  0E01               	movlw	1
  4385  003078  EC26  F038         	call	_lcd_gotoxy
  4386                           
  4387                           ;screenDrawers.h: 95: printf("Estado proceso: \n");
  4388  00307C  0E0A               	movlw	low STR_7
  4389  00307E  0101               	movlb	1	; () banked
  4390  003080  6F3F               	movwf	printf@f& (0+255),b
  4391  003082  0E7E               	movlw	high STR_7
  4392  003084  0101               	movlb	1	; () banked
  4393  003086  6F40               	movwf	(printf@f+1)& (0+255),b
  4394  003088  EC61  F000         	call	_printf	;wreg free
  4395                           
  4396                           ;screenDrawers.h: 96: if (adv)
  4397  00308C  0101               	movlb	1	; () banked
  4398  00308E  5174               	movf	drawMenu@adv& (0+255),w,b
  4399  003090  0101               	movlb	1	; () banked
  4400  003092  B4D8               	btfsc	status,2,c
  4401  003094  D004               	goto	l10912
  4402                           
  4403                           ; BSR set to: 1
  4404                           ;screenDrawers.h: 97: lcd_putc('A');
  4405  003096  0E41               	movlw	65
  4406  003098  ECD7  F032         	call	_lcd_putc
  4407  00309C  D003               	goto	l373
  4408  00309E                     l10912:
  4409                           
  4410                           ;screenDrawers.h: 98: else
  4411                           ;screenDrawers.h: 99: lcd_putc(' ');
  4412  00309E  0E20               	movlw	32
  4413  0030A0  ECD7  F032         	call	_lcd_putc
  4414  0030A4                     l373:
  4415                           
  4416                           ;screenDrawers.h: 100: lcd_gotoxy(2, 2);
  4417  0030A4  0E02               	movlw	2
  4418  0030A6  0101               	movlb	1	; () banked
  4419  0030A8  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4420  0030AA  0E02               	movlw	2
  4421  0030AC  EC26  F038         	call	_lcd_gotoxy
  4422                           
  4423                           ;screenDrawers.h: 101: if(processStarted)
  4424  0030B0  0100               	movlb	0	; () banked
  4425  0030B2  51C4               	movf	_processStarted& (0+255),w,b
  4426  0030B4  B4D8               	btfsc	status,2,c
  4427  0030B6  D011               	goto	l10918
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;screenDrawers.h: 102: printf("   %d / %d       ", processState, numCortes);
  4431  0030B8  0ED0               	movlw	low STR_8
  4432  0030BA  0101               	movlb	1	; () banked
  4433  0030BC  6F3F               	movwf	printf@f& (0+255),b
  4434  0030BE  0E7E               	movlw	high STR_8
  4435  0030C0  0101               	movlb	1	; () banked
  4436  0030C2  6F40               	movwf	(printf@f+1)& (0+255),b
  4437  0030C4  C0B4  F141         	movff	_processState,?_printf+2
  4438  0030C8  C0B5  F142         	movff	_processState+1,?_printf+3
  4439  0030CC  C0D0  F143         	movff	_numCortes,?_printf+4
  4440  0030D0  C0D1  F144         	movff	_numCortes+1,?_printf+5
  4441  0030D4  EC61  F000         	call	_printf	;wreg free
  4442  0030D8  0012               	return	
  4443  0030DA                     l10918:
  4444                           
  4445                           ;screenDrawers.h: 103: else
  4446                           ;screenDrawers.h: 104: printf("    Detenido       ");
  4447  0030DA  0E64               	movlw	low STR_9
  4448  0030DC  0101               	movlb	1	; () banked
  4449  0030DE  6F3F               	movwf	printf@f& (0+255),b
  4450  0030E0  0E7D               	movlw	high STR_9
  4451  0030E2  0101               	movlb	1	; () banked
  4452  0030E4  6F40               	movwf	(printf@f+1)& (0+255),b
  4453  0030E6  EC61  F000         	call	_printf	;wreg free
  4454                           
  4455                           ;screenDrawers.h: 105: break;
  4456  0030EA  0012               	return	
  4457  0030EC                     l10920:
  4458                           
  4459                           ;screenDrawers.h: 107: lcd_gotoxy(1, 1);
  4460  0030EC  0E01               	movlw	1
  4461  0030EE  0101               	movlb	1	; () banked
  4462  0030F0  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4463  0030F2  0E01               	movlw	1
  4464  0030F4  EC26  F038         	call	_lcd_gotoxy
  4465                           
  4466                           ;screenDrawers.h: 108: printf("Valor por Corte:\n");
  4467  0030F8  0E52               	movlw	low STR_10
  4468  0030FA  0101               	movlb	1	; () banked
  4469  0030FC  6F3F               	movwf	printf@f& (0+255),b
  4470  0030FE  0E7E               	movlw	high STR_10
  4471  003100  0101               	movlb	1	; () banked
  4472  003102  6F40               	movwf	(printf@f+1)& (0+255),b
  4473  003104  EC61  F000         	call	_printf	;wreg free
  4474                           
  4475                           ;screenDrawers.h: 109: if (adv)
  4476  003108  0101               	movlb	1	; () banked
  4477  00310A  5174               	movf	drawMenu@adv& (0+255),w,b
  4478  00310C  0101               	movlb	1	; () banked
  4479  00310E  B4D8               	btfsc	status,2,c
  4480  003110  D004               	goto	l10928
  4481                           
  4482                           ; BSR set to: 1
  4483                           ;screenDrawers.h: 110: lcd_putc('A');
  4484  003112  0E41               	movlw	65
  4485  003114  ECD7  F032         	call	_lcd_putc
  4486  003118  D003               	goto	l379
  4487  00311A                     l10928:
  4488                           
  4489                           ;screenDrawers.h: 111: else
  4490                           ;screenDrawers.h: 112: lcd_putc(' ');
  4491  00311A  0E20               	movlw	32
  4492  00311C  ECD7  F032         	call	_lcd_putc
  4493  003120                     l379:
  4494                           
  4495                           ;screenDrawers.h: 113: lcd_gotoxy(2, 2);
  4496  003120  0E02               	movlw	2
  4497  003122  0101               	movlb	1	; () banked
  4498  003124  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4499  003126  0E02               	movlw	2
  4500  003128  EC26  F038         	call	_lcd_gotoxy
  4501                           
  4502                           ;screenDrawers.h: 114: printf("   %3.3f kg      ", kgXcorte);
  4503  00312C  0EE2               	movlw	low STR_11
  4504  00312E  0101               	movlb	1	; () banked
  4505  003130  6F3F               	movwf	printf@f& (0+255),b
  4506  003132  0E7E               	movlw	high STR_11
  4507  003134  0101               	movlb	1	; () banked
  4508  003136  6F40               	movwf	(printf@f+1)& (0+255),b
  4509  003138  C18F  F141         	movff	_kgXcorte,?_printf+2
  4510  00313C  C190  F142         	movff	_kgXcorte+1,?_printf+3
  4511  003140  C191  F143         	movff	_kgXcorte+2,?_printf+4
  4512  003144  EC61  F000         	call	_printf	;wreg free
  4513                           
  4514                           ;screenDrawers.h: 115: break;
  4515  003148  0012               	return	
  4516  00314A                     l10932:
  4517                           
  4518                           ;screenDrawers.h: 117: lcd_gotoxy(1, 1);
  4519  00314A  0E01               	movlw	1
  4520  00314C  0101               	movlb	1	; () banked
  4521  00314E  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4522  003150  0E01               	movlw	1
  4523  003152  EC26  F038         	call	_lcd_gotoxy
  4524                           
  4525                           ;screenDrawers.h: 118: printf("Cantidad Cortes:\n");
  4526  003156  0E76               	movlw	low STR_12
  4527  003158  0101               	movlb	1	; () banked
  4528  00315A  6F3F               	movwf	printf@f& (0+255),b
  4529  00315C  0E7E               	movlw	high STR_12
  4530  00315E  0101               	movlb	1	; () banked
  4531  003160  6F40               	movwf	(printf@f+1)& (0+255),b
  4532  003162  EC61  F000         	call	_printf	;wreg free
  4533                           
  4534                           ;screenDrawers.h: 119: if (adv)
  4535  003166  0101               	movlb	1	; () banked
  4536  003168  5174               	movf	drawMenu@adv& (0+255),w,b
  4537  00316A  0101               	movlb	1	; () banked
  4538  00316C  B4D8               	btfsc	status,2,c
  4539  00316E  D004               	goto	l10940
  4540                           
  4541                           ; BSR set to: 1
  4542                           ;screenDrawers.h: 120: lcd_putc('A');
  4543  003170  0E41               	movlw	65
  4544  003172  ECD7  F032         	call	_lcd_putc
  4545  003176  D003               	goto	l382
  4546  003178                     l10940:
  4547                           
  4548                           ;screenDrawers.h: 121: else
  4549                           ;screenDrawers.h: 122: lcd_putc(' ');
  4550  003178  0E20               	movlw	32
  4551  00317A  ECD7  F032         	call	_lcd_putc
  4552  00317E                     l382:
  4553                           
  4554                           ;screenDrawers.h: 123: lcd_gotoxy(2, 2);
  4555  00317E  0E02               	movlw	2
  4556  003180  0101               	movlb	1	; () banked
  4557  003182  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4558  003184  0E02               	movlw	2
  4559  003186  EC26  F038         	call	_lcd_gotoxy
  4560                           
  4561                           ;screenDrawers.h: 124: printf("      %d         ", numCortes);
  4562  00318A  0EBE               	movlw	low STR_13
  4563  00318C  0101               	movlb	1	; () banked
  4564  00318E  6F3F               	movwf	printf@f& (0+255),b
  4565  003190  0E7E               	movlw	high STR_13
  4566  003192  0101               	movlb	1	; () banked
  4567  003194  6F40               	movwf	(printf@f+1)& (0+255),b
  4568  003196  C0D0  F141         	movff	_numCortes,?_printf+2
  4569  00319A  C0D1  F142         	movff	_numCortes+1,?_printf+3
  4570  00319E  EC61  F000         	call	_printf	;wreg free
  4571                           
  4572                           ;screenDrawers.h: 125: break;
  4573  0031A2  0012               	return	
  4574  0031A4                     l10944:
  4575                           
  4576                           ;screenDrawers.h: 127: lcd_gotoxy(1, 1);
  4577  0031A4  0E01               	movlw	1
  4578  0031A6  0101               	movlb	1	; () banked
  4579  0031A8  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4580  0031AA  0E01               	movlw	1
  4581  0031AC  EC26  F038         	call	_lcd_gotoxy
  4582                           
  4583                           ;screenDrawers.h: 128: printf("Velocidad Masa: \n");
  4584  0031B0  0EF8               	movlw	low STR_14
  4585  0031B2  0101               	movlb	1	; () banked
  4586  0031B4  6F3F               	movwf	printf@f& (0+255),b
  4587  0031B6  0E7D               	movlw	high STR_14
  4588  0031B8  0101               	movlb	1	; () banked
  4589  0031BA  6F40               	movwf	(printf@f+1)& (0+255),b
  4590  0031BC  EC61  F000         	call	_printf	;wreg free
  4591                           
  4592                           ;screenDrawers.h: 129: if (adv)
  4593  0031C0  0101               	movlb	1	; () banked
  4594  0031C2  5174               	movf	drawMenu@adv& (0+255),w,b
  4595  0031C4  0101               	movlb	1	; () banked
  4596  0031C6  B4D8               	btfsc	status,2,c
  4597  0031C8  D004               	goto	l10952
  4598                           
  4599                           ; BSR set to: 1
  4600                           ;screenDrawers.h: 130: lcd_putc('A');
  4601  0031CA  0E41               	movlw	65
  4602  0031CC  ECD7  F032         	call	_lcd_putc
  4603  0031D0  D003               	goto	l385
  4604  0031D2                     l10952:
  4605                           
  4606                           ;screenDrawers.h: 131: else
  4607                           ;screenDrawers.h: 132: lcd_putc(' ');
  4608  0031D2  0E20               	movlw	32
  4609  0031D4  ECD7  F032         	call	_lcd_putc
  4610  0031D8                     l385:
  4611                           
  4612                           ;screenDrawers.h: 133: lcd_gotoxy(2, 2);
  4613  0031D8  0E02               	movlw	2
  4614  0031DA  0101               	movlb	1	; () banked
  4615  0031DC  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4616  0031DE  0E02               	movlw	2
  4617  0031E0  EC26  F038         	call	_lcd_gotoxy
  4618                           
  4619                           ;screenDrawers.h: 134: printf("  %3.3f kg/s      ", velocidadMasa);
  4620  0031E4  0E78               	movlw	low STR_15
  4621  0031E6  0101               	movlb	1	; () banked
  4622  0031E8  6F3F               	movwf	printf@f& (0+255),b
  4623  0031EA  0E7D               	movlw	high STR_15
  4624  0031EC  0101               	movlb	1	; () banked
  4625  0031EE  6F40               	movwf	(printf@f+1)& (0+255),b
  4626  0031F0  C198  F141         	movff	_velocidadMasa,?_printf+2
  4627  0031F4  C199  F142         	movff	_velocidadMasa+1,?_printf+3
  4628  0031F8  C19A  F143         	movff	_velocidadMasa+2,?_printf+4
  4629  0031FC  EC61  F000         	call	_printf	;wreg free
  4630                           
  4631                           ;screenDrawers.h: 136: }
  4632                           ;screenDrawers.h: 137: }
  4633                           
  4634                           ;screenDrawers.h: 135: break;
  4635  003200  0012               	return	
  4636  003202                     l10958:
  4637  003202  0101               	movlb	1	; () banked
  4638  003204  51BD               	movf	_menuSection& (0+255),w,b
  4639                           
  4640                           ; Switch size 1, requested type "space"
  4641                           ; Number of cases is 4, Range of values is 0 to 3
  4642                           ; switch strategies available:
  4643                           ; Name         Instructions Cycles
  4644                           ; simple_byte           13     7 (average)
  4645                           ;	Chosen strategy is simple_byte
  4646  003206  0A00               	xorlw	0	; case 0
  4647  003208  B4D8               	btfsc	status,2,c
  4648  00320A  D732               	goto	l10904
  4649  00320C  0A01               	xorlw	1	; case 1
  4650  00320E  B4D8               	btfsc	status,2,c
  4651  003210  D76D               	goto	l10920
  4652  003212  0A03               	xorlw	3	; case 2
  4653  003214  B4D8               	btfsc	status,2,c
  4654  003216  D799               	goto	l10932
  4655  003218  0A01               	xorlw	1	; case 3
  4656  00321A  A4D8               	btfss	status,2,c
  4657  00321C  0012               	return	
  4658  00321E  D7C2               	goto	l10944
  4659  003220                     __end_of_drawMenu:
  4660                           	opt stack 0
  4661                           tblptru	equ	0xFF8
  4662                           tblptrh	equ	0xFF7
  4663                           tblptrl	equ	0xFF6
  4664                           tablat	equ	0xFF5
  4665                           prodh	equ	0xFF4
  4666                           prodl	equ	0xFF3
  4667                           intcon	equ	0xFF2
  4668                           postinc0	equ	0xFEE
  4669                           wreg	equ	0xFE8
  4670                           postdec1	equ	0xFE5
  4671                           fsr1l	equ	0xFE1
  4672                           indf2	equ	0xFDF
  4673                           fsr2h	equ	0xFDA
  4674                           fsr2l	equ	0xFD9
  4675                           status	equ	0xFD8
  4676                           
  4677 ;; *************** function _drawCutError *****************
  4678 ;; Defined at:
  4679 ;;		line 224 in file "source/screenDrawers.h"
  4680 ;; Parameters:    Size  Location     Type
  4681 ;;		None
  4682 ;; Auto vars:     Size  Location     Type
  4683 ;;		None
  4684 ;; Return value:  Size  Location     Type
  4685 ;;                  1    wreg      void 
  4686 ;; Registers used:
  4687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4688 ;; Tracked objects:
  4689 ;;		On entry : 0/0
  4690 ;;		On exit  : 0/0
  4691 ;;		Unchanged: 0/0
  4692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4693 ;;      Params:         0       0       0       0       0       0       0
  4694 ;;      Locals:         0       0       0       0       0       0       0
  4695 ;;      Temps:          0       0       0       0       0       0       0
  4696 ;;      Totals:         0       0       0       0       0       0       0
  4697 ;;Total ram usage:        0 bytes
  4698 ;; Hardware stack levels used:    1
  4699 ;; Hardware stack levels required when called:   19
  4700 ;; This function calls:
  4701 ;;		_lcd_gotoxy
  4702 ;;		_printf
  4703 ;; This function is called by:
  4704 ;;		_drawScreen
  4705 ;; This function uses a non-reentrant model
  4706 ;;
  4707                           
  4708                           	psect	text15
  4709  0070DA                     __ptext15:
  4710                           	opt stack 0
  4711  0070DA                     _drawCutError:
  4712                           	opt stack 10
  4713                           
  4714                           ;screenDrawers.h: 225: lcd_gotoxy(1, 1);
  4715                           
  4716                           ;incstack = 0
  4717  0070DA  0E01               	movlw	1
  4718  0070DC  0101               	movlb	1	; () banked
  4719  0070DE  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4720  0070E0  0E01               	movlw	1
  4721  0070E2  EC26  F038         	call	_lcd_gotoxy
  4722                           
  4723                           ;screenDrawers.h: 226: printf("Guillotina      \n");
  4724  0070E6  0EB0               	movlw	low STR_34
  4725  0070E8  0101               	movlb	1	; () banked
  4726  0070EA  6F3F               	movwf	printf@f& (0+255),b
  4727  0070EC  0E7D               	movlw	high STR_34
  4728  0070EE  0101               	movlb	1	; () banked
  4729  0070F0  6F40               	movwf	(printf@f+1)& (0+255),b
  4730  0070F2  EC61  F000         	call	_printf	;wreg free
  4731                           
  4732                           ;screenDrawers.h: 227: printf("      Trancada  ");
  4733  0070F6  0EB5               	movlw	low STR_35
  4734  0070F8  0101               	movlb	1	; () banked
  4735  0070FA  6F3F               	movwf	printf@f& (0+255),b
  4736  0070FC  0E7F               	movlw	high STR_35
  4737  0070FE  0101               	movlb	1	; () banked
  4738  007100  6F40               	movwf	(printf@f+1)& (0+255),b
  4739  007102  EC61  F000         	call	_printf	;wreg free
  4740  007106  0012               	return		;funcret
  4741  007108                     __end_of_drawCutError:
  4742                           	opt stack 0
  4743                           tblptru	equ	0xFF8
  4744                           tblptrh	equ	0xFF7
  4745                           tblptrl	equ	0xFF6
  4746                           tablat	equ	0xFF5
  4747                           prodh	equ	0xFF4
  4748                           prodl	equ	0xFF3
  4749                           intcon	equ	0xFF2
  4750                           postinc0	equ	0xFEE
  4751                           wreg	equ	0xFE8
  4752                           postdec1	equ	0xFE5
  4753                           fsr1l	equ	0xFE1
  4754                           indf2	equ	0xFDF
  4755                           fsr2h	equ	0xFDA
  4756                           fsr2l	equ	0xFD9
  4757                           status	equ	0xFD8
  4758                           
  4759 ;; *************** function _drawChanVal *****************
  4760 ;; Defined at:
  4761 ;;		line 140 in file "source/screenDrawers.h"
  4762 ;; Parameters:    Size  Location     Type
  4763 ;;		None
  4764 ;; Auto vars:     Size  Location     Type
  4765 ;;		None
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  1    wreg      void 
  4768 ;; Registers used:
  4769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4775 ;;      Params:         0       0       0       0       0       0       0
  4776 ;;      Locals:         0       0       0       0       0       0       0
  4777 ;;      Temps:          0       0       0       0       0       0       0
  4778 ;;      Totals:         0       0       0       0       0       0       0
  4779 ;;Total ram usage:        0 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; Hardware stack levels required when called:   20
  4782 ;; This function calls:
  4783 ;;		_drawValEditor
  4784 ;;		_lcd_gotoxy
  4785 ;;		_printf
  4786 ;; This function is called by:
  4787 ;;		_drawScreen
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           	psect	text16
  4792  0064AE                     __ptext16:
  4793                           	opt stack 0
  4794  0064AE                     _drawChanVal:
  4795                           	opt stack 9
  4796                           
  4797                           ;screenDrawers.h: 141: switch (menuSection) {
  4798                           
  4799                           ;incstack = 0
  4800  0064AE  D034               	goto	l10978
  4801  0064B0                     l10962:
  4802                           
  4803                           ;screenDrawers.h: 145: lcd_gotoxy(1, 1);
  4804  0064B0  0E01               	movlw	1
  4805  0064B2  0101               	movlb	1	; () banked
  4806  0064B4  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4807  0064B6  0E01               	movlw	1
  4808  0064B8  EC26  F038         	call	_lcd_gotoxy
  4809                           
  4810                           ;screenDrawers.h: 146: printf("Valor por Corte:\n");
  4811  0064BC  0E52               	movlw	low STR_10
  4812  0064BE  0101               	movlb	1	; () banked
  4813  0064C0  6F3F               	movwf	printf@f& (0+255),b
  4814  0064C2  0E7E               	movlw	high STR_10
  4815  0064C4  0101               	movlb	1	; () banked
  4816  0064C6  6F40               	movwf	(printf@f+1)& (0+255),b
  4817  0064C8  EC61  F000         	call	_printf	;wreg free
  4818                           
  4819                           ;screenDrawers.h: 147: drawValEditor();
  4820  0064CC  ECD1  F00F         	call	_drawValEditor	;wreg free
  4821                           
  4822                           ;screenDrawers.h: 148: printf("kg    ");
  4823  0064D0  0EF8               	movlw	low STR_17
  4824  0064D2  0101               	movlb	1	; () banked
  4825  0064D4  6F3F               	movwf	printf@f& (0+255),b
  4826  0064D6  0E7F               	movlw	high STR_17
  4827  0064D8  0101               	movlb	1	; () banked
  4828  0064DA  6F40               	movwf	(printf@f+1)& (0+255),b
  4829  0064DC  EC61  F000         	call	_printf	;wreg free
  4830                           
  4831                           ;screenDrawers.h: 149: break;
  4832  0064E0  0012               	return	
  4833  0064E2                     l10970:
  4834                           
  4835                           ;screenDrawers.h: 151: lcd_gotoxy(1, 1);
  4836  0064E2  0E01               	movlw	1
  4837  0064E4  0101               	movlb	1	; () banked
  4838  0064E6  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4839  0064E8  0E01               	movlw	1
  4840  0064EA  EC26  F038         	call	_lcd_gotoxy
  4841                           
  4842                           ;screenDrawers.h: 152: printf("Cantidad Cortes:\n");
  4843  0064EE  0E76               	movlw	low STR_12
  4844  0064F0  0101               	movlb	1	; () banked
  4845  0064F2  6F3F               	movwf	printf@f& (0+255),b
  4846  0064F4  0E7E               	movlw	high STR_12
  4847  0064F6  0101               	movlb	1	; () banked
  4848  0064F8  6F40               	movwf	(printf@f+1)& (0+255),b
  4849  0064FA  EC61  F000         	call	_printf	;wreg free
  4850                           
  4851                           ;screenDrawers.h: 153: printf("      %d       ", chanVals);
  4852  0064FE  0EE8               	movlw	low STR_19
  4853  006500  0101               	movlb	1	; () banked
  4854  006502  6F3F               	movwf	printf@f& (0+255),b
  4855  006504  0E7F               	movlw	high STR_19
  4856  006506  0101               	movlb	1	; () banked
  4857  006508  6F40               	movwf	(printf@f+1)& (0+255),b
  4858  00650A  C1B4  F141         	movff	_chanVals,?_printf+2
  4859  00650E  C1B5  F142         	movff	_chanVals+1,?_printf+3
  4860  006512  EC61  F000         	call	_printf	;wreg free
  4861                           
  4862                           ;screenDrawers.h: 157: }
  4863                           ;screenDrawers.h: 158: }
  4864                           
  4865                           ;screenDrawers.h: 156: break;
  4866                           
  4867                           ;screenDrawers.h: 155: }case (3): {
  4868                           
  4869                           ;screenDrawers.h: 154: break;
  4870  006516  0012               	return	
  4871  006518                     l10978:
  4872  006518  0101               	movlb	1	; () banked
  4873  00651A  51BD               	movf	_menuSection& (0+255),w,b
  4874                           
  4875                           ; Switch size 1, requested type "space"
  4876                           ; Number of cases is 4, Range of values is 0 to 3
  4877                           ; switch strategies available:
  4878                           ; Name         Instructions Cycles
  4879                           ; simple_byte           13     7 (average)
  4880                           ;	Chosen strategy is simple_byte
  4881  00651C  0A00               	xorlw	0	; case 0
  4882  00651E  B4D8               	btfsc	status,2,c
  4883  006520  0012               	return	
  4884  006522  0A01               	xorlw	1	; case 1
  4885  006524  B4D8               	btfsc	status,2,c
  4886  006526  D7C4               	goto	l10962
  4887  006528  0A03               	xorlw	3	; case 2
  4888  00652A  B4D8               	btfsc	status,2,c
  4889  00652C  D7DA               	goto	l10970
  4890  00652E  0A01               	xorlw	1	; case 3
  4891  006530  0012               	return	
  4892  006532                     __end_of_drawChanVal:
  4893                           	opt stack 0
  4894                           tblptru	equ	0xFF8
  4895                           tblptrh	equ	0xFF7
  4896                           tblptrl	equ	0xFF6
  4897                           tablat	equ	0xFF5
  4898                           prodh	equ	0xFF4
  4899                           prodl	equ	0xFF3
  4900                           intcon	equ	0xFF2
  4901                           postinc0	equ	0xFEE
  4902                           wreg	equ	0xFE8
  4903                           postdec1	equ	0xFE5
  4904                           fsr1l	equ	0xFE1
  4905                           indf2	equ	0xFDF
  4906                           fsr2h	equ	0xFDA
  4907                           fsr2l	equ	0xFD9
  4908                           status	equ	0xFD8
  4909                           
  4910 ;; *************** function _drawCalibProc *****************
  4911 ;; Defined at:
  4912 ;;		line 236 in file "source/screenDrawers.h"
  4913 ;; Parameters:    Size  Location     Type
  4914 ;;		None
  4915 ;; Auto vars:     Size  Location     Type
  4916 ;;		None
  4917 ;; Return value:  Size  Location     Type
  4918 ;;                  1    wreg      void 
  4919 ;; Registers used:
  4920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4921 ;; Tracked objects:
  4922 ;;		On entry : 0/0
  4923 ;;		On exit  : 0/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4926 ;;      Params:         0       0       0       0       0       0       0
  4927 ;;      Locals:         0       0       0       0       0       0       0
  4928 ;;      Temps:          0       0       0       0       0       0       0
  4929 ;;      Totals:         0       0       0       0       0       0       0
  4930 ;;Total ram usage:        0 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; Hardware stack levels required when called:   19
  4933 ;; This function calls:
  4934 ;;		_lcd_gotoxy
  4935 ;;		_printf
  4936 ;; This function is called by:
  4937 ;;		_drawScreen
  4938 ;; This function uses a non-reentrant model
  4939 ;;
  4940                           
  4941                           	psect	text17
  4942  006422                     __ptext17:
  4943                           	opt stack 0
  4944  006422                     _drawCalibProc:
  4945                           	opt stack 10
  4946                           
  4947                           ;screenDrawers.h: 237: lcd_gotoxy(1, 1);
  4948                           
  4949                           ;incstack = 0
  4950  006422  0E01               	movlw	1
  4951  006424  0101               	movlb	1	; () banked
  4952  006426  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4953  006428  0E01               	movlw	1
  4954  00642A  EC26  F038         	call	_lcd_gotoxy
  4955                           
  4956                           ;screenDrawers.h: 238: if(calibLevel == 0) {
  4957  00642E  0101               	movlb	1	; () banked
  4958  006430  51BA               	movf	_calibLevel& (0+255),w,b
  4959  006432  A4D8               	btfss	status,2,c
  4960  006434  D011               	goto	l11074
  4961                           
  4962                           ; BSR set to: 1
  4963                           ;screenDrawers.h: 239: printf("Autocalib con   \n");
  4964  006436  0ED4               	movlw	low STR_38
  4965  006438  0101               	movlb	1	; () banked
  4966  00643A  6F3F               	movwf	printf@f& (0+255),b
  4967  00643C  0E7D               	movlw	high STR_38
  4968  00643E  0101               	movlb	1	; () banked
  4969  006440  6F40               	movwf	(printf@f+1)& (0+255),b
  4970  006442  EC61  F000         	call	_printf	;wreg free
  4971                           
  4972                           ;screenDrawers.h: 240: printf("Corte referencia");
  4973  006446  0EC6               	movlw	low STR_39
  4974  006448  0101               	movlb	1	; () banked
  4975  00644A  6F3F               	movwf	printf@f& (0+255),b
  4976  00644C  0E7F               	movlw	high STR_39
  4977  00644E  0101               	movlb	1	; () banked
  4978  006450  6F40               	movwf	(printf@f+1)& (0+255),b
  4979  006452  EC61  F000         	call	_printf	;wreg free
  4980                           
  4981                           ;screenDrawers.h: 241: }else if(calibLevel == 1) {
  4982  006456  0012               	return	
  4983  006458                     l11074:
  4984  006458  0101               	movlb	1	; () banked
  4985  00645A  05BA               	decf	_calibLevel& (0+255),w,b
  4986  00645C  A4D8               	btfss	status,2,c
  4987  00645E  D011               	goto	l11078
  4988                           
  4989                           ; BSR set to: 1
  4990                           ;screenDrawers.h: 242: printf("Autocalib usando\n");
  4991  006460  0EAC               	movlw	low STR_40
  4992  006462  0101               	movlb	1	; () banked
  4993  006464  6F3F               	movwf	printf@f& (0+255),b
  4994  006466  0E7E               	movlw	high STR_40
  4995  006468  0101               	movlb	1	; () banked
  4996  00646A  6F40               	movwf	(printf@f+1)& (0+255),b
  4997  00646C  EC61  F000         	call	_printf	;wreg free
  4998                           
  4999                           ;screenDrawers.h: 243: printf("     0.5 kg     ");
  5000  006470  0E60               	movlw	low STR_41
  5001  006472  0101               	movlb	1	; () banked
  5002  006474  6F3F               	movwf	printf@f& (0+255),b
  5003  006476  0E7F               	movlw	high STR_41
  5004  006478  0101               	movlb	1	; () banked
  5005  00647A  6F40               	movwf	(printf@f+1)& (0+255),b
  5006  00647C  EC61  F000         	call	_printf	;wreg free
  5007                           
  5008                           ;screenDrawers.h: 244: }else if(calibLevel == 2) {
  5009  006480  0012               	return	
  5010  006482                     l11078:
  5011  006482  0E02               	movlw	2
  5012  006484  0101               	movlb	1	; () banked
  5013  006486  19BA               	xorwf	_calibLevel& (0+255),w,b
  5014  006488  A4D8               	btfss	status,2,c
  5015  00648A  0012               	return	
  5016                           
  5017                           ; BSR set to: 1
  5018                           ;screenDrawers.h: 245: printf("Autocalib usando\n");
  5019  00648C  0EAC               	movlw	low STR_40
  5020  00648E  0101               	movlb	1	; () banked
  5021  006490  6F3F               	movwf	printf@f& (0+255),b
  5022  006492  0E7E               	movlw	high STR_40
  5023  006494  0101               	movlb	1	; () banked
  5024  006496  6F40               	movwf	(printf@f+1)& (0+255),b
  5025  006498  EC61  F000         	call	_printf	;wreg free
  5026                           
  5027                           ;screenDrawers.h: 246: printf("    0.25 kg     ");
  5028  00649C  0E71               	movlw	low STR_43
  5029  00649E  0101               	movlb	1	; () banked
  5030  0064A0  6F3F               	movwf	printf@f& (0+255),b
  5031  0064A2  0E7F               	movlw	high STR_43
  5032  0064A4  0101               	movlb	1	; () banked
  5033  0064A6  6F40               	movwf	(printf@f+1)& (0+255),b
  5034  0064A8  EC61  F000         	call	_printf	;wreg free
  5035  0064AC  0012               	return	
  5036  0064AE                     __end_of_drawCalibProc:
  5037                           	opt stack 0
  5038                           tblptru	equ	0xFF8
  5039                           tblptrh	equ	0xFF7
  5040                           tblptrl	equ	0xFF6
  5041                           tablat	equ	0xFF5
  5042                           prodh	equ	0xFF4
  5043                           prodl	equ	0xFF3
  5044                           intcon	equ	0xFF2
  5045                           postinc0	equ	0xFEE
  5046                           wreg	equ	0xFE8
  5047                           postdec1	equ	0xFE5
  5048                           fsr1l	equ	0xFE1
  5049                           indf2	equ	0xFDF
  5050                           fsr2h	equ	0xFDA
  5051                           fsr2l	equ	0xFD9
  5052                           status	equ	0xFD8
  5053                           
  5054 ;; *************** function _drawBadPass *****************
  5055 ;; Defined at:
  5056 ;;		line 184 in file "source/screenDrawers.h"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;		None
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;		None
  5061 ;; Return value:  Size  Location     Type
  5062 ;;                  1    wreg      void 
  5063 ;; Registers used:
  5064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5065 ;; Tracked objects:
  5066 ;;		On entry : 0/0
  5067 ;;		On exit  : 0/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5070 ;;      Params:         0       0       0       0       0       0       0
  5071 ;;      Locals:         0       0       0       0       0       0       0
  5072 ;;      Temps:          0       0       0       0       0       0       0
  5073 ;;      Totals:         0       0       0       0       0       0       0
  5074 ;;Total ram usage:        0 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:   20
  5077 ;; This function calls:
  5078 ;;		_drawPass1Lin
  5079 ;;		_printf
  5080 ;; This function is called by:
  5081 ;;		_drawScreen
  5082 ;; This function uses a non-reentrant model
  5083 ;;
  5084                           
  5085                           	psect	text18
  5086  0072D6                     __ptext18:
  5087                           	opt stack 0
  5088  0072D6                     _drawBadPass:
  5089                           	opt stack 9
  5090                           
  5091                           ;screenDrawers.h: 185: drawPass1Lin();
  5092                           
  5093                           ;incstack = 0
  5094  0072D6  EC38  F039         	call	_drawPass1Lin	;wreg free
  5095                           
  5096                           ;screenDrawers.h: 186: printf("     Erronea    ");
  5097  0072DA  0E82               	movlw	low STR_22
  5098  0072DC  0101               	movlb	1	; () banked
  5099  0072DE  6F3F               	movwf	printf@f& (0+255),b
  5100  0072E0  0E7F               	movlw	high STR_22
  5101  0072E2  0101               	movlb	1	; () banked
  5102  0072E4  6F40               	movwf	(printf@f+1)& (0+255),b
  5103  0072E6  EC61  F000         	call	_printf	;wreg free
  5104  0072EA  0012               	return		;funcret
  5105  0072EC                     __end_of_drawBadPass:
  5106                           	opt stack 0
  5107                           tblptru	equ	0xFF8
  5108                           tblptrh	equ	0xFF7
  5109                           tblptrl	equ	0xFF6
  5110                           tablat	equ	0xFF5
  5111                           prodh	equ	0xFF4
  5112                           prodl	equ	0xFF3
  5113                           intcon	equ	0xFF2
  5114                           postinc0	equ	0xFEE
  5115                           wreg	equ	0xFE8
  5116                           postdec1	equ	0xFE5
  5117                           fsr1l	equ	0xFE1
  5118                           indf2	equ	0xFDF
  5119                           fsr2h	equ	0xFDA
  5120                           fsr2l	equ	0xFD9
  5121                           status	equ	0xFD8
  5122                           
  5123 ;; *************** function _drawPass1Lin *****************
  5124 ;; Defined at:
  5125 ;;		line 161 in file "source/screenDrawers.h"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;		None
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;		None
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  1    wreg      void 
  5132 ;; Registers used:
  5133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5139 ;;      Params:         0       0       0       0       0       0       0
  5140 ;;      Locals:         0       0       0       0       0       0       0
  5141 ;;      Temps:          0       0       0       0       0       0       0
  5142 ;;      Totals:         0       0       0       0       0       0       0
  5143 ;;Total ram usage:        0 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:   19
  5146 ;; This function calls:
  5147 ;;		_lcd_gotoxy
  5148 ;;		_printf
  5149 ;; This function is called by:
  5150 ;;		_drawPassWord
  5151 ;;		_drawBadPass
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           	psect	text19
  5156  007270                     __ptext19:
  5157                           	opt stack 0
  5158  007270                     _drawPass1Lin:
  5159                           	opt stack 9
  5160                           
  5161                           ;screenDrawers.h: 162: lcd_gotoxy(1, 1);
  5162                           
  5163                           ;incstack = 0
  5164  007270  0E01               	movlw	1
  5165  007272  0101               	movlb	1	; () banked
  5166  007274  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5167  007276  0E01               	movlw	1
  5168  007278  EC26  F038         	call	_lcd_gotoxy
  5169                           
  5170                           ;screenDrawers.h: 163: printf("Contrasena:     \n");
  5171  00727C  0EC2               	movlw	low STR_20
  5172  00727E  0101               	movlb	1	; () banked
  5173  007280  6F3F               	movwf	printf@f& (0+255),b
  5174  007282  0E7D               	movlw	high STR_20
  5175  007284  0101               	movlb	1	; () banked
  5176  007286  6F40               	movwf	(printf@f+1)& (0+255),b
  5177  007288  EC61  F000         	call	_printf	;wreg free
  5178  00728C  0012               	return		;funcret
  5179  00728E                     __end_of_drawPass1Lin:
  5180                           	opt stack 0
  5181                           tblptru	equ	0xFF8
  5182                           tblptrh	equ	0xFF7
  5183                           tblptrl	equ	0xFF6
  5184                           tablat	equ	0xFF5
  5185                           prodh	equ	0xFF4
  5186                           prodl	equ	0xFF3
  5187                           intcon	equ	0xFF2
  5188                           postinc0	equ	0xFEE
  5189                           wreg	equ	0xFE8
  5190                           postdec1	equ	0xFE5
  5191                           fsr1l	equ	0xFE1
  5192                           indf2	equ	0xFDF
  5193                           fsr2h	equ	0xFDA
  5194                           fsr2l	equ	0xFD9
  5195                           status	equ	0xFD8
  5196                           
  5197 ;; *************** function _drawAutoCalibRM *****************
  5198 ;; Defined at:
  5199 ;;		line 217 in file "source/screenDrawers.h"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;		None
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;		None
  5204 ;; Return value:  Size  Location     Type
  5205 ;;                  1    wreg      void 
  5206 ;; Registers used:
  5207 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5213 ;;      Params:         0       0       0       0       0       0       0
  5214 ;;      Locals:         0       0       0       0       0       0       0
  5215 ;;      Temps:          0       0       0       0       0       0       0
  5216 ;;      Totals:         0       0       0       0       0       0       0
  5217 ;;Total ram usage:        0 bytes
  5218 ;; Hardware stack levels used:    1
  5219 ;; Hardware stack levels required when called:   20
  5220 ;; This function calls:
  5221 ;;		_drawValEditor
  5222 ;;		_lcd_gotoxy
  5223 ;;		_printf
  5224 ;; This function is called by:
  5225 ;;		_drawScreen
  5226 ;; This function uses a non-reentrant model
  5227 ;;
  5228                           
  5229                           	psect	text20
  5230  00701A                     __ptext20:
  5231                           	opt stack 0
  5232  00701A                     _drawAutoCalibRM:
  5233                           	opt stack 9
  5234                           
  5235                           ;screenDrawers.h: 218: lcd_gotoxy(1, 1);
  5236                           
  5237                           ;incstack = 0
  5238  00701A  0E01               	movlw	1
  5239  00701C  0101               	movlb	1	; () banked
  5240  00701E  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5241  007020  0E01               	movlw	1
  5242  007022  EC26  F038         	call	_lcd_gotoxy
  5243                           
  5244                           ;screenDrawers.h: 219: printf("Peso Real:      \n");
  5245  007026  0E9E               	movlw	low STR_32
  5246  007028  0101               	movlb	1	; () banked
  5247  00702A  6F3F               	movwf	printf@f& (0+255),b
  5248  00702C  0E7D               	movlw	high STR_32
  5249  00702E  0101               	movlb	1	; () banked
  5250  007030  6F40               	movwf	(printf@f+1)& (0+255),b
  5251  007032  EC61  F000         	call	_printf	;wreg free
  5252                           
  5253                           ;screenDrawers.h: 220: drawValEditor();
  5254  007036  ECD1  F00F         	call	_drawValEditor	;wreg free
  5255                           
  5256                           ;screenDrawers.h: 221: printf("kg    ");
  5257  00703A  0EF8               	movlw	low STR_17
  5258  00703C  0101               	movlb	1	; () banked
  5259  00703E  6F3F               	movwf	printf@f& (0+255),b
  5260  007040  0E7F               	movlw	high STR_17
  5261  007042  0101               	movlb	1	; () banked
  5262  007044  6F40               	movwf	(printf@f+1)& (0+255),b
  5263  007046  EC61  F000         	call	_printf	;wreg free
  5264  00704A  0012               	return		;funcret
  5265  00704C                     __end_of_drawAutoCalibRM:
  5266                           	opt stack 0
  5267                           tblptru	equ	0xFF8
  5268                           tblptrh	equ	0xFF7
  5269                           tblptrl	equ	0xFF6
  5270                           tablat	equ	0xFF5
  5271                           prodh	equ	0xFF4
  5272                           prodl	equ	0xFF3
  5273                           intcon	equ	0xFF2
  5274                           postinc0	equ	0xFEE
  5275                           wreg	equ	0xFE8
  5276                           postdec1	equ	0xFE5
  5277                           fsr1l	equ	0xFE1
  5278                           indf2	equ	0xFDF
  5279                           fsr2h	equ	0xFDA
  5280                           fsr2l	equ	0xFD9
  5281                           status	equ	0xFD8
  5282                           
  5283 ;; *************** function _drawValEditor *****************
  5284 ;; Defined at:
  5285 ;;		line 62 in file "source/screenDrawers.h"
  5286 ;; Parameters:    Size  Location     Type
  5287 ;;		None
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;		None
  5290 ;; Return value:  Size  Location     Type
  5291 ;;                  1    wreg      void 
  5292 ;; Registers used:
  5293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5294 ;; Tracked objects:
  5295 ;;		On entry : 0/0
  5296 ;;		On exit  : 0/0
  5297 ;;		Unchanged: 0/0
  5298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5299 ;;      Params:         0       0       0       0       0       0       0
  5300 ;;      Locals:         0       0       0       0       0       0       0
  5301 ;;      Temps:          0       0       0       0       0       0       0
  5302 ;;      Totals:         0       0       0       0       0       0       0
  5303 ;;Total ram usage:        0 bytes
  5304 ;; Hardware stack levels used:    1
  5305 ;; Hardware stack levels required when called:   19
  5306 ;; This function calls:
  5307 ;;		_lcd_gotoxy
  5308 ;;		_printf
  5309 ;; This function is called by:
  5310 ;;		_drawChanVal
  5311 ;;		_drawAutoCalibRM
  5312 ;; This function uses a non-reentrant model
  5313 ;;
  5314                           
  5315                           	psect	text21
  5316  001FA2                     __ptext21:
  5317                           	opt stack 0
  5318  001FA2                     _drawValEditor:
  5319                           	opt stack 9
  5320                           
  5321                           ;screenDrawers.h: 63: if(chanValSection == 5) {
  5322                           
  5323                           ;incstack = 0
  5324  001FA2  0E05               	movlw	5
  5325  001FA4  0101               	movlb	1	; () banked
  5326  001FA6  199B               	xorwf	_chanValSection& (0+255),w,b
  5327  001FA8  A4D8               	btfss	status,2,c
  5328  001FAA  D037               	goto	l10730
  5329                           
  5330                           ; BSR set to: 1
  5331                           ;screenDrawers.h: 64: printf(" %u%u%u.%u%u%c%u ", chanValdig[0], chanValdig[1],
  5332                           ;screenDrawers.h: 65: chanValdig[2], chanValdig[3], chanValdig[4], flech, chanValdig[5])
      +                          ;
  5333  001FAC  0EF4               	movlw	low STR_1
  5334  001FAE  0101               	movlb	1	; () banked
  5335  001FB0  6F3F               	movwf	printf@f& (0+255),b
  5336  001FB2  0E7E               	movlw	high STR_1
  5337  001FB4  0101               	movlb	1	; () banked
  5338  001FB6  6F40               	movwf	(printf@f+1)& (0+255),b
  5339  001FB8  0101               	movlb	1	; () banked
  5340  001FBA  51A3               	movf	_chanValdig& (0+255),w,b
  5341  001FBC  0101               	movlb	1	; () banked
  5342  001FBE  6F41               	movwf	(?_printf+2)& (0+255),b
  5343  001FC0  6B42               	clrf	(?_printf+3)& (0+255),b
  5344  001FC2  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5345  001FC4  0742               	decf	(?_printf+3)& (0+255),f,b
  5346  001FC6  0101               	movlb	1	; () banked
  5347  001FC8  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5348  001FCA  0101               	movlb	1	; () banked
  5349  001FCC  6F43               	movwf	(?_printf+4)& (0+255),b
  5350  001FCE  6B44               	clrf	(?_printf+5)& (0+255),b
  5351  001FD0  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5352  001FD2  0744               	decf	(?_printf+5)& (0+255),f,b
  5353  001FD4  0101               	movlb	1	; () banked
  5354  001FD6  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5355  001FD8  0101               	movlb	1	; () banked
  5356  001FDA  6F45               	movwf	(?_printf+6)& (0+255),b
  5357  001FDC  6B46               	clrf	(?_printf+7)& (0+255),b
  5358  001FDE  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5359  001FE0  0746               	decf	(?_printf+7)& (0+255),f,b
  5360  001FE2  0101               	movlb	1	; () banked
  5361  001FE4  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5362  001FE6  0101               	movlb	1	; () banked
  5363  001FE8  6F47               	movwf	(?_printf+8)& (0+255),b
  5364  001FEA  6B48               	clrf	(?_printf+9)& (0+255),b
  5365  001FEC  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5366  001FEE  0748               	decf	(?_printf+9)& (0+255),f,b
  5367  001FF0  0101               	movlb	1	; () banked
  5368  001FF2  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5369  001FF4  0101               	movlb	1	; () banked
  5370  001FF6  6F49               	movwf	(?_printf+10)& (0+255),b
  5371  001FF8  6B4A               	clrf	(?_printf+11)& (0+255),b
  5372  001FFA  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5373  001FFC  074A               	decf	(?_printf+11)& (0+255),f,b
  5374  001FFE  C19C  F14B         	movff	_flech,?_printf+12
  5375  002002  0101               	movlb	1	; () banked
  5376  002004  6B4C               	clrf	(?_printf+13)& (0+255),b
  5377  002006  0101               	movlb	1	; () banked
  5378  002008  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5379  00200A  0101               	movlb	1	; () banked
  5380  00200C  6F4D               	movwf	(?_printf+14)& (0+255),b
  5381  00200E  6B4E               	clrf	(?_printf+15)& (0+255),b
  5382  002010  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5383  002012  074E               	decf	(?_printf+15)& (0+255),f,b
  5384  002014  EC61  F000         	call	_printf	;wreg free
  5385                           
  5386                           ;screenDrawers.h: 66: }else if(chanValSection == 4) {
  5387  002018  D129               	goto	l10750
  5388  00201A                     l10730:
  5389  00201A  0E04               	movlw	4
  5390  00201C  0101               	movlb	1	; () banked
  5391  00201E  199B               	xorwf	_chanValSection& (0+255),w,b
  5392  002020  A4D8               	btfss	status,2,c
  5393  002022  D037               	goto	l10734
  5394                           
  5395                           ; BSR set to: 1
  5396                           ;screenDrawers.h: 67: printf(" %u%u%u.%u%c%u%u ", chanValdig[0], chanValdig[1],
  5397                           ;screenDrawers.h: 68: chanValdig[2], chanValdig[3], flech, chanValdig[4], chanValdig[5])
      +                          ;
  5398  002024  0E06               	movlw	low STR_2
  5399  002026  0101               	movlb	1	; () banked
  5400  002028  6F3F               	movwf	printf@f& (0+255),b
  5401  00202A  0E7F               	movlw	high STR_2
  5402  00202C  0101               	movlb	1	; () banked
  5403  00202E  6F40               	movwf	(printf@f+1)& (0+255),b
  5404  002030  0101               	movlb	1	; () banked
  5405  002032  51A3               	movf	_chanValdig& (0+255),w,b
  5406  002034  0101               	movlb	1	; () banked
  5407  002036  6F41               	movwf	(?_printf+2)& (0+255),b
  5408  002038  6B42               	clrf	(?_printf+3)& (0+255),b
  5409  00203A  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5410  00203C  0742               	decf	(?_printf+3)& (0+255),f,b
  5411  00203E  0101               	movlb	1	; () banked
  5412  002040  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5413  002042  0101               	movlb	1	; () banked
  5414  002044  6F43               	movwf	(?_printf+4)& (0+255),b
  5415  002046  6B44               	clrf	(?_printf+5)& (0+255),b
  5416  002048  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5417  00204A  0744               	decf	(?_printf+5)& (0+255),f,b
  5418  00204C  0101               	movlb	1	; () banked
  5419  00204E  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5420  002050  0101               	movlb	1	; () banked
  5421  002052  6F45               	movwf	(?_printf+6)& (0+255),b
  5422  002054  6B46               	clrf	(?_printf+7)& (0+255),b
  5423  002056  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5424  002058  0746               	decf	(?_printf+7)& (0+255),f,b
  5425  00205A  0101               	movlb	1	; () banked
  5426  00205C  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5427  00205E  0101               	movlb	1	; () banked
  5428  002060  6F47               	movwf	(?_printf+8)& (0+255),b
  5429  002062  6B48               	clrf	(?_printf+9)& (0+255),b
  5430  002064  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5431  002066  0748               	decf	(?_printf+9)& (0+255),f,b
  5432  002068  C19C  F149         	movff	_flech,?_printf+10
  5433  00206C  0101               	movlb	1	; () banked
  5434  00206E  6B4A               	clrf	(?_printf+11)& (0+255),b
  5435  002070  0101               	movlb	1	; () banked
  5436  002072  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5437  002074  0101               	movlb	1	; () banked
  5438  002076  6F4B               	movwf	(?_printf+12)& (0+255),b
  5439  002078  6B4C               	clrf	(?_printf+13)& (0+255),b
  5440  00207A  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5441  00207C  074C               	decf	(?_printf+13)& (0+255),f,b
  5442  00207E  0101               	movlb	1	; () banked
  5443  002080  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5444  002082  0101               	movlb	1	; () banked
  5445  002084  6F4D               	movwf	(?_printf+14)& (0+255),b
  5446  002086  6B4E               	clrf	(?_printf+15)& (0+255),b
  5447  002088  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5448  00208A  074E               	decf	(?_printf+15)& (0+255),f,b
  5449  00208C  EC61  F000         	call	_printf	;wreg free
  5450                           
  5451                           ;screenDrawers.h: 69: }else if(chanValSection == 3) {
  5452  002090  D0ED               	goto	l10750
  5453  002092                     l10734:
  5454  002092  0E03               	movlw	3
  5455  002094  0101               	movlb	1	; () banked
  5456  002096  199B               	xorwf	_chanValSection& (0+255),w,b
  5457  002098  A4D8               	btfss	status,2,c
  5458  00209A  D037               	goto	l10738
  5459                           
  5460                           ; BSR set to: 1
  5461                           ;screenDrawers.h: 70: printf(" %u%u%u.%c%u%u%u ", chanValdig[0], chanValdig[1],
  5462                           ;screenDrawers.h: 71: chanValdig[2], flech, chanValdig[3], chanValdig[4], chanValdig[5])
      +                          ;
  5463  00209C  0E4E               	movlw	low STR_3
  5464  00209E  0101               	movlb	1	; () banked
  5465  0020A0  6F3F               	movwf	printf@f& (0+255),b
  5466  0020A2  0E7F               	movlw	high STR_3
  5467  0020A4  0101               	movlb	1	; () banked
  5468  0020A6  6F40               	movwf	(printf@f+1)& (0+255),b
  5469  0020A8  0101               	movlb	1	; () banked
  5470  0020AA  51A3               	movf	_chanValdig& (0+255),w,b
  5471  0020AC  0101               	movlb	1	; () banked
  5472  0020AE  6F41               	movwf	(?_printf+2)& (0+255),b
  5473  0020B0  6B42               	clrf	(?_printf+3)& (0+255),b
  5474  0020B2  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5475  0020B4  0742               	decf	(?_printf+3)& (0+255),f,b
  5476  0020B6  0101               	movlb	1	; () banked
  5477  0020B8  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5478  0020BA  0101               	movlb	1	; () banked
  5479  0020BC  6F43               	movwf	(?_printf+4)& (0+255),b
  5480  0020BE  6B44               	clrf	(?_printf+5)& (0+255),b
  5481  0020C0  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5482  0020C2  0744               	decf	(?_printf+5)& (0+255),f,b
  5483  0020C4  0101               	movlb	1	; () banked
  5484  0020C6  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5485  0020C8  0101               	movlb	1	; () banked
  5486  0020CA  6F45               	movwf	(?_printf+6)& (0+255),b
  5487  0020CC  6B46               	clrf	(?_printf+7)& (0+255),b
  5488  0020CE  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5489  0020D0  0746               	decf	(?_printf+7)& (0+255),f,b
  5490  0020D2  C19C  F147         	movff	_flech,?_printf+8
  5491  0020D6  0101               	movlb	1	; () banked
  5492  0020D8  6B48               	clrf	(?_printf+9)& (0+255),b
  5493  0020DA  0101               	movlb	1	; () banked
  5494  0020DC  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5495  0020DE  0101               	movlb	1	; () banked
  5496  0020E0  6F49               	movwf	(?_printf+10)& (0+255),b
  5497  0020E2  6B4A               	clrf	(?_printf+11)& (0+255),b
  5498  0020E4  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5499  0020E6  074A               	decf	(?_printf+11)& (0+255),f,b
  5500  0020E8  0101               	movlb	1	; () banked
  5501  0020EA  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5502  0020EC  0101               	movlb	1	; () banked
  5503  0020EE  6F4B               	movwf	(?_printf+12)& (0+255),b
  5504  0020F0  6B4C               	clrf	(?_printf+13)& (0+255),b
  5505  0020F2  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5506  0020F4  074C               	decf	(?_printf+13)& (0+255),f,b
  5507  0020F6  0101               	movlb	1	; () banked
  5508  0020F8  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5509  0020FA  0101               	movlb	1	; () banked
  5510  0020FC  6F4D               	movwf	(?_printf+14)& (0+255),b
  5511  0020FE  6B4E               	clrf	(?_printf+15)& (0+255),b
  5512  002100  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5513  002102  074E               	decf	(?_printf+15)& (0+255),f,b
  5514  002104  EC61  F000         	call	_printf	;wreg free
  5515                           
  5516                           ;screenDrawers.h: 72: }else if(chanValSection == 2) {
  5517  002108  D0B1               	goto	l10750
  5518  00210A                     l10738:
  5519  00210A  0E02               	movlw	2
  5520  00210C  0101               	movlb	1	; () banked
  5521  00210E  199B               	xorwf	_chanValSection& (0+255),w,b
  5522  002110  A4D8               	btfss	status,2,c
  5523  002112  D037               	goto	l10742
  5524                           
  5525                           ; BSR set to: 1
  5526                           ;screenDrawers.h: 73: printf(" %u%u%c%u.%u%u%u ", chanValdig[0], chanValdig[1], flech,
  5527                           ;screenDrawers.h: 74: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5528  002114  0E18               	movlw	low STR_4
  5529  002116  0101               	movlb	1	; () banked
  5530  002118  6F3F               	movwf	printf@f& (0+255),b
  5531  00211A  0E7F               	movlw	high STR_4
  5532  00211C  0101               	movlb	1	; () banked
  5533  00211E  6F40               	movwf	(printf@f+1)& (0+255),b
  5534  002120  0101               	movlb	1	; () banked
  5535  002122  51A3               	movf	_chanValdig& (0+255),w,b
  5536  002124  0101               	movlb	1	; () banked
  5537  002126  6F41               	movwf	(?_printf+2)& (0+255),b
  5538  002128  6B42               	clrf	(?_printf+3)& (0+255),b
  5539  00212A  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5540  00212C  0742               	decf	(?_printf+3)& (0+255),f,b
  5541  00212E  0101               	movlb	1	; () banked
  5542  002130  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5543  002132  0101               	movlb	1	; () banked
  5544  002134  6F43               	movwf	(?_printf+4)& (0+255),b
  5545  002136  6B44               	clrf	(?_printf+5)& (0+255),b
  5546  002138  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5547  00213A  0744               	decf	(?_printf+5)& (0+255),f,b
  5548  00213C  C19C  F145         	movff	_flech,?_printf+6
  5549  002140  0101               	movlb	1	; () banked
  5550  002142  6B46               	clrf	(?_printf+7)& (0+255),b
  5551  002144  0101               	movlb	1	; () banked
  5552  002146  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5553  002148  0101               	movlb	1	; () banked
  5554  00214A  6F47               	movwf	(?_printf+8)& (0+255),b
  5555  00214C  6B48               	clrf	(?_printf+9)& (0+255),b
  5556  00214E  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5557  002150  0748               	decf	(?_printf+9)& (0+255),f,b
  5558  002152  0101               	movlb	1	; () banked
  5559  002154  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5560  002156  0101               	movlb	1	; () banked
  5561  002158  6F49               	movwf	(?_printf+10)& (0+255),b
  5562  00215A  6B4A               	clrf	(?_printf+11)& (0+255),b
  5563  00215C  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5564  00215E  074A               	decf	(?_printf+11)& (0+255),f,b
  5565  002160  0101               	movlb	1	; () banked
  5566  002162  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5567  002164  0101               	movlb	1	; () banked
  5568  002166  6F4B               	movwf	(?_printf+12)& (0+255),b
  5569  002168  6B4C               	clrf	(?_printf+13)& (0+255),b
  5570  00216A  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5571  00216C  074C               	decf	(?_printf+13)& (0+255),f,b
  5572  00216E  0101               	movlb	1	; () banked
  5573  002170  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5574  002172  0101               	movlb	1	; () banked
  5575  002174  6F4D               	movwf	(?_printf+14)& (0+255),b
  5576  002176  6B4E               	clrf	(?_printf+15)& (0+255),b
  5577  002178  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5578  00217A  074E               	decf	(?_printf+15)& (0+255),f,b
  5579  00217C  EC61  F000         	call	_printf	;wreg free
  5580                           
  5581                           ;screenDrawers.h: 75: }else if(chanValSection == 1) {
  5582  002180  D075               	goto	l10750
  5583  002182                     l10742:
  5584  002182  0101               	movlb	1	; () banked
  5585  002184  059B               	decf	_chanValSection& (0+255),w,b
  5586  002186  A4D8               	btfss	status,2,c
  5587  002188  D037               	goto	l10746
  5588                           
  5589                           ; BSR set to: 1
  5590                           ;screenDrawers.h: 76: printf(" %u%c%u%u.%u%u%u ", chanValdig[0], flech, chanValdig[1],
  5591                           ;screenDrawers.h: 77: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5592  00218A  0E2A               	movlw	low STR_5
  5593  00218C  0101               	movlb	1	; () banked
  5594  00218E  6F3F               	movwf	printf@f& (0+255),b
  5595  002190  0E7F               	movlw	high STR_5
  5596  002192  0101               	movlb	1	; () banked
  5597  002194  6F40               	movwf	(printf@f+1)& (0+255),b
  5598  002196  0101               	movlb	1	; () banked
  5599  002198  51A3               	movf	_chanValdig& (0+255),w,b
  5600  00219A  0101               	movlb	1	; () banked
  5601  00219C  6F41               	movwf	(?_printf+2)& (0+255),b
  5602  00219E  6B42               	clrf	(?_printf+3)& (0+255),b
  5603  0021A0  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5604  0021A2  0742               	decf	(?_printf+3)& (0+255),f,b
  5605  0021A4  C19C  F143         	movff	_flech,?_printf+4
  5606  0021A8  0101               	movlb	1	; () banked
  5607  0021AA  6B44               	clrf	(?_printf+5)& (0+255),b
  5608  0021AC  0101               	movlb	1	; () banked
  5609  0021AE  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5610  0021B0  0101               	movlb	1	; () banked
  5611  0021B2  6F45               	movwf	(?_printf+6)& (0+255),b
  5612  0021B4  6B46               	clrf	(?_printf+7)& (0+255),b
  5613  0021B6  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5614  0021B8  0746               	decf	(?_printf+7)& (0+255),f,b
  5615  0021BA  0101               	movlb	1	; () banked
  5616  0021BC  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5617  0021BE  0101               	movlb	1	; () banked
  5618  0021C0  6F47               	movwf	(?_printf+8)& (0+255),b
  5619  0021C2  6B48               	clrf	(?_printf+9)& (0+255),b
  5620  0021C4  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5621  0021C6  0748               	decf	(?_printf+9)& (0+255),f,b
  5622  0021C8  0101               	movlb	1	; () banked
  5623  0021CA  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5624  0021CC  0101               	movlb	1	; () banked
  5625  0021CE  6F49               	movwf	(?_printf+10)& (0+255),b
  5626  0021D0  6B4A               	clrf	(?_printf+11)& (0+255),b
  5627  0021D2  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5628  0021D4  074A               	decf	(?_printf+11)& (0+255),f,b
  5629  0021D6  0101               	movlb	1	; () banked
  5630  0021D8  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5631  0021DA  0101               	movlb	1	; () banked
  5632  0021DC  6F4B               	movwf	(?_printf+12)& (0+255),b
  5633  0021DE  6B4C               	clrf	(?_printf+13)& (0+255),b
  5634  0021E0  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5635  0021E2  074C               	decf	(?_printf+13)& (0+255),f,b
  5636  0021E4  0101               	movlb	1	; () banked
  5637  0021E6  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5638  0021E8  0101               	movlb	1	; () banked
  5639  0021EA  6F4D               	movwf	(?_printf+14)& (0+255),b
  5640  0021EC  6B4E               	clrf	(?_printf+15)& (0+255),b
  5641  0021EE  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5642  0021F0  074E               	decf	(?_printf+15)& (0+255),f,b
  5643  0021F2  EC61  F000         	call	_printf	;wreg free
  5644                           
  5645                           ;screenDrawers.h: 78: }else if(chanValSection == 0) {
  5646  0021F6  D03A               	goto	l10750
  5647  0021F8                     l10746:
  5648  0021F8  0101               	movlb	1	; () banked
  5649  0021FA  519B               	movf	_chanValSection& (0+255),w,b
  5650  0021FC  A4D8               	btfss	status,2,c
  5651  0021FE  D036               	goto	l10750
  5652                           
  5653                           ; BSR set to: 1
  5654                           ;screenDrawers.h: 79: printf(" %c%u%u%u.%u%u%u ", flech, chanValdig[0], chanValdig[1],
  5655                           ;screenDrawers.h: 80: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5656  002200  0E3C               	movlw	low STR_6
  5657  002202  0101               	movlb	1	; () banked
  5658  002204  6F3F               	movwf	printf@f& (0+255),b
  5659  002206  0E7F               	movlw	high STR_6
  5660  002208  0101               	movlb	1	; () banked
  5661  00220A  6F40               	movwf	(printf@f+1)& (0+255),b
  5662  00220C  C19C  F141         	movff	_flech,?_printf+2
  5663  002210  0101               	movlb	1	; () banked
  5664  002212  6B42               	clrf	(?_printf+3)& (0+255),b
  5665  002214  0101               	movlb	1	; () banked
  5666  002216  51A3               	movf	_chanValdig& (0+255),w,b
  5667  002218  0101               	movlb	1	; () banked
  5668  00221A  6F43               	movwf	(?_printf+4)& (0+255),b
  5669  00221C  6B44               	clrf	(?_printf+5)& (0+255),b
  5670  00221E  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5671  002220  0744               	decf	(?_printf+5)& (0+255),f,b
  5672  002222  0101               	movlb	1	; () banked
  5673  002224  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5674  002226  0101               	movlb	1	; () banked
  5675  002228  6F45               	movwf	(?_printf+6)& (0+255),b
  5676  00222A  6B46               	clrf	(?_printf+7)& (0+255),b
  5677  00222C  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5678  00222E  0746               	decf	(?_printf+7)& (0+255),f,b
  5679  002230  0101               	movlb	1	; () banked
  5680  002232  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5681  002234  0101               	movlb	1	; () banked
  5682  002236  6F47               	movwf	(?_printf+8)& (0+255),b
  5683  002238  6B48               	clrf	(?_printf+9)& (0+255),b
  5684  00223A  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5685  00223C  0748               	decf	(?_printf+9)& (0+255),f,b
  5686  00223E  0101               	movlb	1	; () banked
  5687  002240  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5688  002242  0101               	movlb	1	; () banked
  5689  002244  6F49               	movwf	(?_printf+10)& (0+255),b
  5690  002246  6B4A               	clrf	(?_printf+11)& (0+255),b
  5691  002248  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5692  00224A  074A               	decf	(?_printf+11)& (0+255),f,b
  5693  00224C  0101               	movlb	1	; () banked
  5694  00224E  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5695  002250  0101               	movlb	1	; () banked
  5696  002252  6F4B               	movwf	(?_printf+12)& (0+255),b
  5697  002254  6B4C               	clrf	(?_printf+13)& (0+255),b
  5698  002256  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5699  002258  074C               	decf	(?_printf+13)& (0+255),f,b
  5700  00225A  0101               	movlb	1	; () banked
  5701  00225C  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5702  00225E  0101               	movlb	1	; () banked
  5703  002260  6F4D               	movwf	(?_printf+14)& (0+255),b
  5704  002262  6B4E               	clrf	(?_printf+15)& (0+255),b
  5705  002264  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5706  002266  074E               	decf	(?_printf+15)& (0+255),f,b
  5707  002268  EC61  F000         	call	_printf	;wreg free
  5708  00226C                     l10750:
  5709                           
  5710                           ;screenDrawers.h: 81: }
  5711                           ;screenDrawers.h: 82: lcd_gotoxy(11, 2);
  5712  00226C  0E02               	movlw	2
  5713  00226E  0101               	movlb	1	; () banked
  5714  002270  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5715  002272  0E0B               	movlw	11
  5716  002274  EC26  F038         	call	_lcd_gotoxy
  5717  002278  0012               	return		;funcret
  5718  00227A                     __end_of_drawValEditor:
  5719                           	opt stack 0
  5720                           tblptru	equ	0xFF8
  5721                           tblptrh	equ	0xFF7
  5722                           tblptrl	equ	0xFF6
  5723                           tablat	equ	0xFF5
  5724                           prodh	equ	0xFF4
  5725                           prodl	equ	0xFF3
  5726                           intcon	equ	0xFF2
  5727                           postinc0	equ	0xFEE
  5728                           wreg	equ	0xFE8
  5729                           postdec1	equ	0xFE5
  5730                           fsr1l	equ	0xFE1
  5731                           indf2	equ	0xFDF
  5732                           fsr2h	equ	0xFDA
  5733                           fsr2l	equ	0xFD9
  5734                           status	equ	0xFD8
  5735                           
  5736 ;; *************** function _drawAdvON *****************
  5737 ;; Defined at:
  5738 ;;		line 189 in file "source/screenDrawers.h"
  5739 ;; Parameters:    Size  Location     Type
  5740 ;;  on              1    wreg     unsigned char 
  5741 ;; Auto vars:     Size  Location     Type
  5742 ;;  on              1  116[BANK1 ] unsigned char 
  5743 ;; Return value:  Size  Location     Type
  5744 ;;                  1    wreg      void 
  5745 ;; Registers used:
  5746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5747 ;; Tracked objects:
  5748 ;;		On entry : 0/0
  5749 ;;		On exit  : 0/0
  5750 ;;		Unchanged: 0/0
  5751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5752 ;;      Params:         0       0       0       0       0       0       0
  5753 ;;      Locals:         0       0       1       0       0       0       0
  5754 ;;      Temps:          0       0       0       0       0       0       0
  5755 ;;      Totals:         0       0       1       0       0       0       0
  5756 ;;Total ram usage:        1 bytes
  5757 ;; Hardware stack levels used:    1
  5758 ;; Hardware stack levels required when called:   19
  5759 ;; This function calls:
  5760 ;;		_lcd_gotoxy
  5761 ;;		_printf
  5762 ;; This function is called by:
  5763 ;;		_drawScreen
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           	psect	text22
  5768  006CAC                     __ptext22:
  5769                           	opt stack 0
  5770  006CAC                     _drawAdvON:
  5771                           	opt stack 10
  5772                           
  5773                           ;incstack = 0
  5774                           ;drawAdvON@on stored from wreg
  5775  006CAC  0101               	movlb	1	; () banked
  5776  006CAE  6F74               	movwf	drawAdvON@on& (0+255),b
  5777                           
  5778                           ;screenDrawers.h: 190: lcd_gotoxy(1, 1);
  5779  006CB0  0E01               	movlw	1
  5780  006CB2  0101               	movlb	1	; () banked
  5781  006CB4  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5782  006CB6  0E01               	movlw	1
  5783  006CB8  EC26  F038         	call	_lcd_gotoxy
  5784                           
  5785                           ;screenDrawers.h: 191: printf("Modo Configurar:\n");
  5786  006CBC  0E64               	movlw	low STR_23
  5787  006CBE  0101               	movlb	1	; () banked
  5788  006CC0  6F3F               	movwf	printf@f& (0+255),b
  5789  006CC2  0E7E               	movlw	high STR_23
  5790  006CC4  0101               	movlb	1	; () banked
  5791  006CC6  6F40               	movwf	(printf@f+1)& (0+255),b
  5792  006CC8  EC61  F000         	call	_printf	;wreg free
  5793                           
  5794                           ;screenDrawers.h: 192: if(on)
  5795  006CCC  0101               	movlb	1	; () banked
  5796  006CCE  5174               	movf	drawAdvON@on& (0+255),w,b
  5797  006CD0  0101               	movlb	1	; () banked
  5798  006CD2  B4D8               	btfsc	status,2,c
  5799  006CD4  D009               	goto	l11010
  5800                           
  5801                           ; BSR set to: 1
  5802                           ;screenDrawers.h: 193: printf("    Iniciado    ");
  5803  006CD6  0E93               	movlw	low STR_24
  5804  006CD8  0101               	movlb	1	; () banked
  5805  006CDA  6F3F               	movwf	printf@f& (0+255),b
  5806  006CDC  0E7F               	movlw	high STR_24
  5807  006CDE  0101               	movlb	1	; () banked
  5808  006CE0  6F40               	movwf	(printf@f+1)& (0+255),b
  5809  006CE2  EC61  F000         	call	_printf	;wreg free
  5810  006CE6  0012               	return	
  5811  006CE8                     l11010:
  5812                           
  5813                           ;screenDrawers.h: 194: else
  5814                           ;screenDrawers.h: 195: printf("   Finalizado   ");
  5815  006CE8  0EA4               	movlw	low STR_25
  5816  006CEA  0101               	movlb	1	; () banked
  5817  006CEC  6F3F               	movwf	printf@f& (0+255),b
  5818  006CEE  0E7F               	movlw	high STR_25
  5819  006CF0  0101               	movlb	1	; () banked
  5820  006CF2  6F40               	movwf	(printf@f+1)& (0+255),b
  5821  006CF4  EC61  F000         	call	_printf	;wreg free
  5822  006CF8  0012               	return	
  5823  006CFA                     __end_of_drawAdvON:
  5824                           	opt stack 0
  5825                           tblptru	equ	0xFF8
  5826                           tblptrh	equ	0xFF7
  5827                           tblptrl	equ	0xFF6
  5828                           tablat	equ	0xFF5
  5829                           prodh	equ	0xFF4
  5830                           prodl	equ	0xFF3
  5831                           intcon	equ	0xFF2
  5832                           postinc0	equ	0xFEE
  5833                           wreg	equ	0xFE8
  5834                           postdec1	equ	0xFE5
  5835                           fsr1l	equ	0xFE1
  5836                           indf2	equ	0xFDF
  5837                           fsr2h	equ	0xFDA
  5838                           fsr2l	equ	0xFD9
  5839                           status	equ	0xFD8
  5840                           
  5841 ;; *************** function _printf *****************
  5842 ;; Defined at:
  5843 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;  f               2   63[BANK1 ] PTR const unsigned char 
  5846 ;;		 -> STR_43(17), STR_42(18), STR_41(17), STR_40(18), 
  5847 ;;		 -> STR_39(17), STR_38(18), STR_37(17), STR_36(18), 
  5848 ;;		 -> STR_35(17), STR_34(18), STR_33(7), STR_32(18), 
  5849 ;;		 -> STR_31(19), STR_30(18), STR_29(18), STR_28(18), 
  5850 ;;		 -> STR_27(18), STR_26(18), STR_25(17), STR_24(17), 
  5851 ;;		 -> STR_23(18), STR_22(17), STR_21(25), STR_20(18), 
  5852 ;;		 -> STR_19(16), STR_18(18), STR_17(7), STR_16(18), 
  5853 ;;		 -> STR_15(19), STR_14(18), STR_13(18), STR_12(18), 
  5854 ;;		 -> STR_11(18), STR_10(18), STR_9(20), STR_8(18), 
  5855 ;;		 -> STR_7(18), STR_6(18), STR_5(18), STR_4(18), 
  5856 ;;		 -> STR_3(18), STR_2(18), STR_1(18), 
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;  val             4  102[BANK1 ] unsigned long 
  5859 ;;  tmpval          4   98[BANK1 ] struct .
  5860 ;;  fval            3  110[BANK1 ] struct .
  5861 ;;  prec            2  113[BANK1 ] int 
  5862 ;;  width           2  108[BANK1 ] int 
  5863 ;;  exp             2  106[BANK1 ] int 
  5864 ;;  flag            2   96[BANK1 ] unsigned short 
  5865 ;;  ap              2   94[BANK1 ] PTR void [1]
  5866 ;;		 -> ?_printf(2), 
  5867 ;;  len             2   92[BANK1 ] unsigned int 
  5868 ;;  cp              2   90[BANK1 ] PTR const unsigned char 
  5869 ;;		 -> printf@c(1), 
  5870 ;;  c               1  115[BANK1 ] char 
  5871 ;;  d               1    0        unsigned char 
  5872 ;; Return value:  Size  Location     Type
  5873 ;;                  2   63[BANK1 ] int 
  5874 ;; Registers used:
  5875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5876 ;; Tracked objects:
  5877 ;;		On entry : 0/0
  5878 ;;		On exit  : 0/0
  5879 ;;		Unchanged: 0/0
  5880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5881 ;;      Params:         0       0      18       0       0       0       0
  5882 ;;      Locals:         0       0      29       0       0       0       0
  5883 ;;      Temps:          0       0       6       0       0       0       0
  5884 ;;      Totals:         0       0      53       0       0       0       0
  5885 ;;Total ram usage:       53 bytes
  5886 ;; Hardware stack levels used:    1
  5887 ;; Hardware stack levels required when called:   18
  5888 ;; This function calls:
  5889 ;;		___awdiv
  5890 ;;		___ftadd
  5891 ;;		___ftge
  5892 ;;		___ftmul
  5893 ;;		___ftneg
  5894 ;;		___ftsub
  5895 ;;		___fttol
  5896 ;;		___lldiv
  5897 ;;		___llmod
  5898 ;;		___lltoft
  5899 ;;		___wmul
  5900 ;;		__div_to_l_
  5901 ;;		__tdiv_to_l_
  5902 ;;		_fround
  5903 ;;		_isdigit
  5904 ;;		_putch
  5905 ;;		_scale
  5906 ;; This function is called by:
  5907 ;;		_drawValEditor
  5908 ;;		_drawMenu
  5909 ;;		_drawChanVal
  5910 ;;		_drawPass1Lin
  5911 ;;		_drawPassWord
  5912 ;;		_drawBadPass
  5913 ;;		_drawAdvON
  5914 ;;		_drawSNquest
  5915 ;;		_drawAutoCalibRM
  5916 ;;		_drawCutError
  5917 ;;		_drawReady2Cut
  5918 ;;		_drawCalibProc
  5919 ;; This function uses a non-reentrant model
  5920 ;;
  5921                           
  5922                           	psect	text23
  5923  0000C2                     __ptext23:
  5924                           	opt stack 0
  5925  0000C2                     _printf:
  5926                           	opt stack 10
  5927                           
  5928                           ;doprnt.c: 466: va_list ap;
  5929                           ;doprnt.c: 499: signed char c;
  5930                           ;doprnt.c: 501: int width;
  5931                           ;doprnt.c: 504: int prec;
  5932                           ;doprnt.c: 508: unsigned short flag;
  5933                           ;doprnt.c: 515: char d;
  5934                           ;doprnt.c: 516: double fval;
  5935                           ;doprnt.c: 517: int exp;
  5936                           ;doprnt.c: 523: union {
  5937                           ;doprnt.c: 524: unsigned long vd;
  5938                           ;doprnt.c: 525: double integ;
  5939                           ;doprnt.c: 526: } tmpval;
  5940                           ;doprnt.c: 528: unsigned long val;
  5941                           ;doprnt.c: 529: unsigned len;
  5942                           ;doprnt.c: 530: const char * cp;
  5943                           ;doprnt.c: 533: *ap = __va_start();
  5944                           
  5945                           ;incstack = 0
  5946  0000C2  0E41               	movlw	low (?_printf+2)
  5947  0000C4  0101               	movlb	1	; () banked
  5948  0000C6  6F5E               	movwf	printf@ap& (0+255),b
  5949  0000C8  0E01               	movlw	high (?_printf+2)
  5950  0000CA  0101               	movlb	1	; () banked
  5951  0000CC  6F5F               	movwf	(printf@ap+1)& (0+255),b
  5952                           
  5953                           ;doprnt.c: 536: while(c = *f++) {
  5954  0000CE  EF6A  F006         	goto	l10642
  5955  0000D2                     l10344:
  5956                           
  5957                           ; BSR set to: 1
  5958                           ;doprnt.c: 538: if(c != '%')
  5959  0000D2  0E25               	movlw	37
  5960  0000D4  0101               	movlb	1	; () banked
  5961  0000D6  1973               	xorwf	printf@c& (0+255),w,b
  5962  0000D8  B4D8               	btfsc	status,2,c
  5963  0000DA  D006               	goto	l10348
  5964                           
  5965                           ; BSR set to: 1
  5966                           ;doprnt.c: 540: {
  5967                           ;doprnt.c: 541: (putch(c) );
  5968  0000DC  0101               	movlb	1	; () banked
  5969  0000DE  5173               	movf	printf@c& (0+255),w,b
  5970  0000E0  EC76  F039         	call	_putch
  5971                           
  5972                           ;doprnt.c: 542: continue;
  5973  0000E4  EF6A  F006         	goto	l10642
  5974  0000E8                     l10348:
  5975                           
  5976                           ;doprnt.c: 543: }
  5977                           ;doprnt.c: 546: width = 0;
  5978  0000E8  0E00               	movlw	0
  5979  0000EA  0101               	movlb	1	; () banked
  5980  0000EC  6F6D               	movwf	(printf@width+1)& (0+255),b
  5981  0000EE  0E00               	movlw	0
  5982  0000F0  6F6C               	movwf	printf@width& (0+255),b
  5983                           
  5984                           ;doprnt.c: 548: flag = 0;
  5985  0000F2  0E00               	movlw	0
  5986  0000F4  0101               	movlb	1	; () banked
  5987  0000F6  6F61               	movwf	(printf@flag+1)& (0+255),b
  5988  0000F8  0E00               	movlw	0
  5989  0000FA  6F60               	movwf	printf@flag& (0+255),b
  5990                           
  5991                           ; BSR set to: 1
  5992                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5993  0000FC  C13F  FFF6         	movff	printf@f,tblptrl
  5994  000100  C140  FFF7         	movff	printf@f+1,tblptrh
  5995  000104                     	if	0	;tblptru may be non-zero
  5996  000104                     	endif
  5997  000104                     	if	0	;tblptru may be non-zero
  5998  000104                     	endif
  5999  000104  0008               	tblrd		*
  6000  000106  50F5               	movf	tablat,w,c
  6001  000108  ECC6  F038         	call	_isdigit
  6002  00010C  A0D8               	btfss	status,0,c
  6003  00010E  D040               	goto	l10362
  6004                           
  6005                           ;doprnt.c: 598: width = 0;
  6006  000110  0E00               	movlw	0
  6007  000112  0101               	movlb	1	; () banked
  6008  000114  6F6D               	movwf	(printf@width+1)& (0+255),b
  6009  000116  0E00               	movlw	0
  6010  000118  6F6C               	movwf	printf@width& (0+255),b
  6011  00011A                     l10354:
  6012                           
  6013                           ;doprnt.c: 600: width *= 10;
  6014  00011A  C16C  F10E         	movff	printf@width,___wmul@multiplier
  6015  00011E  C16D  F10F         	movff	printf@width+1,___wmul@multiplier+1
  6016  000122  0E00               	movlw	0
  6017  000124  0101               	movlb	1	; () banked
  6018  000126  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6019  000128  0E0A               	movlw	10
  6020  00012A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  6021  00012C  ECD9  F037         	call	___wmul	;wreg free
  6022  000130  C10E  F16C         	movff	?___wmul,printf@width
  6023  000134  C10F  F16D         	movff	?___wmul+1,printf@width+1
  6024                           
  6025                           ;doprnt.c: 601: width += *f++ - '0';
  6026  000138  0ED0               	movlw	208
  6027  00013A  0101               	movlb	1	; () banked
  6028  00013C  6F51               	movwf	??_printf& (0+255),b
  6029  00013E  0EFF               	movlw	255
  6030  000140  0101               	movlb	1	; () banked
  6031  000142  6F52               	movwf	(??_printf+1)& (0+255),b
  6032  000144  C13F  FFF6         	movff	printf@f,tblptrl
  6033  000148  C140  FFF7         	movff	printf@f+1,tblptrh
  6034  00014C                     	if	0	;tblptru may be non-zero
  6035  00014C                     	endif
  6036  00014C                     	if	0	;tblptru may be non-zero
  6037  00014C                     	endif
  6038  00014C  0008               	tblrd		*
  6039  00014E  50F5               	movf	tablat,w,c
  6040  000150  0101               	movlb	1	; () banked
  6041  000152  6F53               	movwf	(??_printf+2)& (0+255),b
  6042  000154  6B54               	clrf	(??_printf+3)& (0+255),b
  6043  000156  0101               	movlb	1	; () banked
  6044  000158  5151               	movf	??_printf& (0+255),w,b
  6045  00015A  0101               	movlb	1	; () banked
  6046  00015C  2753               	addwf	(??_printf+2)& (0+255),f,b
  6047  00015E  0101               	movlb	1	; () banked
  6048  000160  5152               	movf	(??_printf+1)& (0+255),w,b
  6049  000162  0101               	movlb	1	; () banked
  6050  000164  2354               	addwfc	(??_printf+3)& (0+255),f,b
  6051  000166  0101               	movlb	1	; () banked
  6052  000168  5153               	movf	(??_printf+2)& (0+255),w,b
  6053  00016A  0101               	movlb	1	; () banked
  6054  00016C  276C               	addwf	printf@width& (0+255),f,b
  6055  00016E  0101               	movlb	1	; () banked
  6056  000170  5154               	movf	(??_printf+3)& (0+255),w,b
  6057  000172  0101               	movlb	1	; () banked
  6058  000174  236D               	addwfc	(printf@width+1)& (0+255),f,b
  6059                           
  6060                           ; BSR set to: 1
  6061  000176  0101               	movlb	1	; () banked
  6062  000178  4B3F               	infsnz	printf@f& (0+255),f,b
  6063  00017A  2B40               	incf	(printf@f+1)& (0+255),f,b
  6064                           
  6065                           ; BSR set to: 1
  6066                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6067  00017C  C13F  FFF6         	movff	printf@f,tblptrl
  6068  000180  C140  FFF7         	movff	printf@f+1,tblptrh
  6069  000184                     	if	0	;tblptru may be non-zero
  6070  000184                     	endif
  6071  000184                     	if	0	;tblptru may be non-zero
  6072  000184                     	endif
  6073  000184  0008               	tblrd		*
  6074  000186  50F5               	movf	tablat,w,c
  6075  000188  ECC6  F038         	call	_isdigit
  6076  00018C  B0D8               	btfsc	status,0,c
  6077  00018E  D7C5               	goto	l10354
  6078  000190                     l10362:
  6079                           
  6080                           ;doprnt.c: 608: }
  6081                           ;doprnt.c: 611: if(*f == '.') {
  6082  000190  C13F  FFF6         	movff	printf@f,tblptrl
  6083  000194  C140  FFF7         	movff	printf@f+1,tblptrh
  6084  000198                     	if	0	;tblptru may be non-zero
  6085  000198                     	endif
  6086  000198                     	if	0	;tblptru may be non-zero
  6087  000198                     	endif
  6088  000198  0008               	tblrd		*
  6089  00019A  50F5               	movf	tablat,w,c
  6090  00019C  0A2E               	xorlw	46
  6091  00019E  A4D8               	btfss	status,2,c
  6092  0001A0  D039               	goto	l10374
  6093                           
  6094                           ;doprnt.c: 612: flag |= 0x4000;
  6095  0001A2  0101               	movlb	1	; () banked
  6096  0001A4  8D61               	bsf	(printf@flag+1)& (0+255),6,b
  6097                           
  6098                           ;doprnt.c: 613: f++;
  6099  0001A6  0101               	movlb	1	; () banked
  6100  0001A8  4B3F               	infsnz	printf@f& (0+255),f,b
  6101  0001AA  2B40               	incf	(printf@f+1)& (0+255),f,b
  6102                           
  6103                           ; BSR set to: 1
  6104                           ;doprnt.c: 620: {
  6105                           ;doprnt.c: 621: prec = 0;
  6106  0001AC  0E00               	movlw	0
  6107  0001AE  0101               	movlb	1	; () banked
  6108  0001B0  6F72               	movwf	(printf@prec+1)& (0+255),b
  6109  0001B2  0E00               	movlw	0
  6110  0001B4  6F71               	movwf	printf@prec& (0+255),b
  6111                           
  6112                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6113  0001B6  D023               	goto	l10372
  6114  0001B8                     l10368:
  6115                           
  6116                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6117  0001B8  C171  F10E         	movff	printf@prec,___wmul@multiplier
  6118  0001BC  C172  F10F         	movff	printf@prec+1,___wmul@multiplier+1
  6119  0001C0  0E00               	movlw	0
  6120  0001C2  0101               	movlb	1	; () banked
  6121  0001C4  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6122  0001C6  0E0A               	movlw	10
  6123  0001C8  6F10               	movwf	___wmul@multiplicand& (0+255),b
  6124  0001CA  ECD9  F037         	call	___wmul	;wreg free
  6125  0001CE  C13F  FFF6         	movff	printf@f,tblptrl
  6126  0001D2  C140  FFF7         	movff	printf@f+1,tblptrh
  6127  0001D6                     	if	0	;tblptru may be non-zero
  6128  0001D6                     	endif
  6129  0001D6                     	if	0	;tblptru may be non-zero
  6130  0001D6                     	endif
  6131  0001D6  0008               	tblrd		*
  6132  0001D8  50F5               	movf	tablat,w,c
  6133  0001DA  0101               	movlb	1	; () banked
  6134  0001DC  270E               	addwf	?___wmul& (0+255),f,b
  6135  0001DE  0E00               	movlw	0
  6136  0001E0  0101               	movlb	1	; () banked
  6137  0001E2  230F               	addwfc	(?___wmul+1)& (0+255),f,b
  6138  0001E4  0ED0               	movlw	208
  6139  0001E6  0101               	movlb	1	; () banked
  6140  0001E8  250E               	addwf	?___wmul& (0+255),w,b
  6141  0001EA  0101               	movlb	1	; () banked
  6142  0001EC  6F71               	movwf	printf@prec& (0+255),b
  6143  0001EE  0EFF               	movlw	255
  6144  0001F0  0101               	movlb	1	; () banked
  6145  0001F2  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  6146  0001F4  0101               	movlb	1	; () banked
  6147  0001F6  6F72               	movwf	(printf@prec+1)& (0+255),b
  6148                           
  6149                           ; BSR set to: 1
  6150  0001F8  0101               	movlb	1	; () banked
  6151  0001FA  4B3F               	infsnz	printf@f& (0+255),f,b
  6152  0001FC  2B40               	incf	(printf@f+1)& (0+255),f,b
  6153  0001FE                     l10372:
  6154                           
  6155                           ; BSR set to: 1
  6156  0001FE  C13F  FFF6         	movff	printf@f,tblptrl
  6157  000202  C140  FFF7         	movff	printf@f+1,tblptrh
  6158  000206                     	if	0	;tblptru may be non-zero
  6159  000206                     	endif
  6160  000206                     	if	0	;tblptru may be non-zero
  6161  000206                     	endif
  6162  000206  0008               	tblrd		*
  6163  000208  50F5               	movf	tablat,w,c
  6164  00020A  ECC6  F038         	call	_isdigit
  6165  00020E  A0D8               	btfss	status,0,c
  6166  000210  D07A               	goto	l10414
  6167  000212  D7D2               	goto	l10368
  6168  000214                     l10374:
  6169                           
  6170                           ;doprnt.c: 626: prec = 0;
  6171  000214  0E00               	movlw	0
  6172  000216  0101               	movlb	1	; () banked
  6173  000218  6F72               	movwf	(printf@prec+1)& (0+255),b
  6174  00021A  0E00               	movlw	0
  6175  00021C  6F71               	movwf	printf@prec& (0+255),b
  6176                           
  6177                           ; BSR set to: 1
  6178                           ;doprnt.c: 628: flag |= 0x1000;
  6179  00021E  0101               	movlb	1	; () banked
  6180  000220  8961               	bsf	(printf@flag+1)& (0+255),4,b
  6181                           
  6182                           ; BSR set to: 1
  6183                           ;doprnt.c: 630: }
  6184                           ;doprnt.c: 635: switch(c = *f++) {
  6185  000222  D071               	goto	l10414
  6186  000224                     l10378:
  6187                           
  6188                           ; BSR set to: 1
  6189                           ;doprnt.c: 663: flag |= 0x400;
  6190  000224  0101               	movlb	1	; () banked
  6191  000226  8561               	bsf	(printf@flag+1)& (0+255),2,b
  6192                           
  6193                           ; BSR set to: 1
  6194                           ;doprnt.c: 698: case 'i':
  6195                           ;doprnt.c: 699: break;
  6196                           
  6197                           ; BSR set to: 1
  6198                           
  6199                           ;doprnt.c: 697: case 'd':
  6200                           
  6201                           ;doprnt.c: 664: break;
  6202  000228  D08D               	goto	l10416
  6203  00022A                     l10380:
  6204                           
  6205                           ; BSR set to: 1
  6206                           ;doprnt.c: 753: if(prec && prec < len)
  6207  00022A  0101               	movlb	1	; () banked
  6208  00022C  5171               	movf	printf@prec& (0+255),w,b
  6209  00022E  0101               	movlb	1	; () banked
  6210  000230  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  6211  000232  B4D8               	btfsc	status,2,c
  6212  000234  D00E               	goto	l10386
  6213                           
  6214                           ; BSR set to: 1
  6215  000236  0101               	movlb	1	; () banked
  6216  000238  515C               	movf	printf@len& (0+255),w,b
  6217  00023A  0101               	movlb	1	; () banked
  6218  00023C  5D71               	subwf	printf@prec& (0+255),w,b
  6219  00023E  0101               	movlb	1	; () banked
  6220  000240  515D               	movf	(printf@len+1)& (0+255),w,b
  6221  000242  0101               	movlb	1	; () banked
  6222  000244  5972               	subwfb	(printf@prec+1)& (0+255),w,b
  6223  000246  B0D8               	btfsc	status,0,c
  6224  000248  D004               	goto	l10386
  6225                           
  6226                           ; BSR set to: 1
  6227                           ;doprnt.c: 754: len = prec;
  6228  00024A  C171  F15C         	movff	printf@prec,printf@len
  6229  00024E  C172  F15D         	movff	printf@prec+1,printf@len+1
  6230  000252                     l10386:
  6231                           
  6232                           ; BSR set to: 1
  6233                           ;doprnt.c: 757: if(width > len)
  6234  000252  0101               	movlb	1	; () banked
  6235  000254  516C               	movf	printf@width& (0+255),w,b
  6236  000256  0101               	movlb	1	; () banked
  6237  000258  5D5C               	subwf	printf@len& (0+255),w,b
  6238  00025A  0101               	movlb	1	; () banked
  6239  00025C  516D               	movf	(printf@width+1)& (0+255),w,b
  6240  00025E  0101               	movlb	1	; () banked
  6241  000260  595D               	subwfb	(printf@len+1)& (0+255),w,b
  6242  000262  B0D8               	btfsc	status,0,c
  6243  000264  D009               	goto	l10390
  6244                           
  6245                           ; BSR set to: 1
  6246                           ;doprnt.c: 758: width -= len;
  6247  000266  0101               	movlb	1	; () banked
  6248  000268  515C               	movf	printf@len& (0+255),w,b
  6249  00026A  0101               	movlb	1	; () banked
  6250  00026C  5F6C               	subwf	printf@width& (0+255),f,b
  6251  00026E  0101               	movlb	1	; () banked
  6252  000270  515D               	movf	(printf@len+1)& (0+255),w,b
  6253  000272  0101               	movlb	1	; () banked
  6254  000274  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  6255  000276  D009               	goto	l10394
  6256  000278                     l10390:
  6257                           
  6258                           ; BSR set to: 1
  6259                           ;doprnt.c: 759: else
  6260                           ;doprnt.c: 760: width = 0;
  6261  000278  0E00               	movlw	0
  6262  00027A  0101               	movlb	1	; () banked
  6263  00027C  6F6D               	movwf	(printf@width+1)& (0+255),b
  6264  00027E  0E00               	movlw	0
  6265  000280  6F6C               	movwf	printf@width& (0+255),b
  6266                           
  6267                           ; BSR set to: 1
  6268                           ;doprnt.c: 764: while(width--)
  6269  000282  D003               	goto	l10394
  6270  000284                     l10392:
  6271                           
  6272                           ; BSR set to: 1
  6273                           ;doprnt.c: 765: (putch(' ') );
  6274  000284  0E20               	movlw	32
  6275  000286  EC76  F039         	call	_putch
  6276  00028A                     l10394:
  6277  00028A  0101               	movlb	1	; () banked
  6278  00028C  076C               	decf	printf@width& (0+255),f,b
  6279  00028E  A0D8               	btfss	status,0,c
  6280  000290  076D               	decf	(printf@width+1)& (0+255),f,b
  6281  000292  0101               	movlb	1	; () banked
  6282  000294  296C               	incf	printf@width& (0+255),w,b
  6283  000296  E1F6               	bnz	l10392
  6284  000298  0101               	movlb	1	; () banked
  6285  00029A  296D               	incf	(printf@width+1)& (0+255),w,b
  6286  00029C  B4D8               	btfsc	status,2,c
  6287  00029E  D00B               	goto	l10400
  6288  0002A0  D7F1               	goto	l10392
  6289  0002A2                     l10396:
  6290                           
  6291                           ; BSR set to: 1
  6292                           ;doprnt.c: 768: (putch(*cp++) );
  6293  0002A2  C15A  FFD9         	movff	printf@cp,fsr2l
  6294  0002A6  C15B  FFDA         	movff	printf@cp+1,fsr2h
  6295  0002AA  50DF               	movf	indf2,w,c
  6296  0002AC  EC76  F039         	call	_putch
  6297  0002B0  0101               	movlb	1	; () banked
  6298  0002B2  4B5A               	infsnz	printf@cp& (0+255),f,b
  6299  0002B4  2B5B               	incf	(printf@cp+1)& (0+255),f,b
  6300  0002B6                     l10400:
  6301                           
  6302                           ; BSR set to: 1
  6303  0002B6  0101               	movlb	1	; () banked
  6304  0002B8  075C               	decf	printf@len& (0+255),f,b
  6305  0002BA  A0D8               	btfss	status,0,c
  6306  0002BC  075D               	decf	(printf@len+1)& (0+255),f,b
  6307  0002BE  0101               	movlb	1	; () banked
  6308  0002C0  295C               	incf	printf@len& (0+255),w,b
  6309  0002C2  E1EF               	bnz	l10396
  6310  0002C4  0101               	movlb	1	; () banked
  6311  0002C6  295D               	incf	(printf@len+1)& (0+255),w,b
  6312  0002C8  B4D8               	btfsc	status,2,c
  6313  0002CA  EF6A  F006         	goto	l10642
  6314  0002CE  D7E9               	goto	l10396
  6315  0002D0                     l10402:
  6316                           
  6317                           ; BSR set to: 1
  6318                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6319  0002D0  C15E  FFD9         	movff	printf@ap,fsr2l
  6320  0002D4  C15F  FFDA         	movff	printf@ap+1,fsr2h
  6321  0002D8  50DF               	movf	indf2,w,c
  6322  0002DA  0101               	movlb	1	; () banked
  6323  0002DC  6F73               	movwf	printf@c& (0+255),b
  6324                           
  6325                           ; BSR set to: 1
  6326  0002DE  0E02               	movlw	2
  6327  0002E0  0101               	movlb	1	; () banked
  6328  0002E2  275E               	addwf	printf@ap& (0+255),f,b
  6329  0002E4  0E00               	movlw	0
  6330  0002E6  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  6331  0002E8                     l10406:
  6332                           
  6333                           ; BSR set to: 1
  6334                           ;doprnt.c: 805: cp = (char *)&c;
  6335  0002E8  0E73               	movlw	low printf@c
  6336  0002EA  0101               	movlb	1	; () banked
  6337  0002EC  6F5A               	movwf	printf@cp& (0+255),b
  6338  0002EE  0E01               	movlw	high printf@c
  6339  0002F0  0101               	movlb	1	; () banked
  6340  0002F2  6F5B               	movwf	(printf@cp+1)& (0+255),b
  6341                           
  6342                           ; BSR set to: 1
  6343                           ;doprnt.c: 806: len = 1;
  6344  0002F4  0E00               	movlw	0
  6345  0002F6  0101               	movlb	1	; () banked
  6346  0002F8  6F5D               	movwf	(printf@len+1)& (0+255),b
  6347  0002FA  0E01               	movlw	1
  6348  0002FC  6F5C               	movwf	printf@len& (0+255),b
  6349                           
  6350                           ;doprnt.c: 807: goto dostring;
  6351  0002FE  D795               	goto	l10380
  6352  000300                     l10410:
  6353                           
  6354                           ; BSR set to: 1
  6355                           ;doprnt.c: 818: flag |= 0x40;
  6356  000300  0101               	movlb	1	; () banked
  6357  000302  8D60               	bsf	printf@flag& (0+255),6,b
  6358                           
  6359                           ; BSR set to: 1
  6360                           ;doprnt.c: 822: }
  6361                           
  6362                           ;doprnt.c: 819: break;
  6363  000304  D01F               	goto	l10416
  6364  000306                     l10414:
  6365  000306  C13F  FFF6         	movff	printf@f,tblptrl
  6366  00030A  C140  FFF7         	movff	printf@f+1,tblptrh
  6367  00030E  0101               	movlb	1	; () banked
  6368  000310  4B3F               	infsnz	printf@f& (0+255),f,b
  6369  000312  2B40               	incf	(printf@f+1)& (0+255),f,b
  6370  000314                     	if	0	;tblptru may be non-zero
  6371  000314                     	endif
  6372  000314                     	if	0	;tblptru may be non-zero
  6373  000314                     	endif
  6374  000314  0008               	tblrd		*
  6375  000316  CFF5 F173          	movff	tablat,printf@c
  6376  00031A  0101               	movlb	1	; () banked
  6377  00031C  5173               	movf	printf@c& (0+255),w,b
  6378                           
  6379                           ; Switch size 1, requested type "space"
  6380                           ; Number of cases is 6, Range of values is 0 to 117
  6381                           ; switch strategies available:
  6382                           ; Name         Instructions Cycles
  6383                           ; simple_byte           19    10 (average)
  6384                           ;	Chosen strategy is simple_byte
  6385  00031E  0A00               	xorlw	0	; case 0
  6386  000320  B4D8               	btfsc	status,2,c
  6387  000322  0012               	return	
  6388  000324  0A63               	xorlw	99	; case 99
  6389  000326  B4D8               	btfsc	status,2,c
  6390  000328  D7D3               	goto	l10402
  6391  00032A  0A07               	xorlw	7	; case 100
  6392  00032C  B4D8               	btfsc	status,2,c
  6393  00032E  D00A               	goto	l10416
  6394  000330  0A02               	xorlw	2	; case 102
  6395  000332  B4D8               	btfsc	status,2,c
  6396  000334  D777               	goto	l10378
  6397  000336  0A0F               	xorlw	15	; case 105
  6398  000338  B4D8               	btfsc	status,2,c
  6399  00033A  D004               	goto	l10416
  6400  00033C  0A1C               	xorlw	28	; case 117
  6401  00033E  B4D8               	btfsc	status,2,c
  6402  000340  D7DF               	goto	l10410
  6403  000342  D7D2               	goto	l10406
  6404  000344                     l10416:
  6405                           
  6406                           ; BSR set to: 1
  6407                           ;doprnt.c: 825: if(flag & (0x700)) {
  6408  000344  0E07               	movlw	7
  6409  000346  0101               	movlb	1	; () banked
  6410  000348  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6411  00034A  B4D8               	btfsc	status,2,c
  6412  00034C  D351               	goto	l1002
  6413                           
  6414                           ; BSR set to: 1
  6415                           ;doprnt.c: 827: if(flag & 0x1000)
  6416  00034E  0101               	movlb	1	; () banked
  6417  000350  A961               	btfss	(printf@flag+1)& (0+255),4,b
  6418  000352  D005               	goto	l10422
  6419                           
  6420                           ; BSR set to: 1
  6421                           ;doprnt.c: 829: prec = 6;
  6422  000354  0E00               	movlw	0
  6423  000356  0101               	movlb	1	; () banked
  6424  000358  6F72               	movwf	(printf@prec+1)& (0+255),b
  6425  00035A  0E06               	movlw	6
  6426  00035C  6F71               	movwf	printf@prec& (0+255),b
  6427  00035E                     l10422:
  6428                           
  6429                           ; BSR set to: 1
  6430                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6431  00035E  C15E  FFD9         	movff	printf@ap,fsr2l
  6432  000362  C15F  FFDA         	movff	printf@ap+1,fsr2h
  6433  000366  CFDE F16E          	movff	postinc2,printf@fval
  6434  00036A  CFDE F16F          	movff	postinc2,printf@fval+1
  6435  00036E  CFDD F170          	movff	postdec2,printf@fval+2
  6436                           
  6437                           ; BSR set to: 1
  6438  000372  0E03               	movlw	3
  6439  000374  0101               	movlb	1	; () banked
  6440  000376  275E               	addwf	printf@ap& (0+255),f,b
  6441  000378  0E00               	movlw	0
  6442  00037A  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  6443                           
  6444                           ; BSR set to: 1
  6445                           ;doprnt.c: 831: if(fval < 0.0) {
  6446  00037C  0101               	movlb	1	; () banked
  6447  00037E  AF70               	btfss	(printf@fval+2)& (0+255),7,b
  6448  000380  D011               	goto	l10432
  6449                           
  6450                           ; BSR set to: 1
  6451                           ;doprnt.c: 832: fval = -fval;
  6452  000382  C16E  F100         	movff	printf@fval,___ftneg@f1
  6453  000386  C16F  F101         	movff	printf@fval+1,___ftneg@f1+1
  6454  00038A  C170  F102         	movff	printf@fval+2,___ftneg@f1+2
  6455  00038E  EC3E  F038         	call	___ftneg	;wreg free
  6456  000392  C100  F16E         	movff	?___ftneg,printf@fval
  6457  000396  C101  F16F         	movff	?___ftneg+1,printf@fval+1
  6458  00039A  C102  F170         	movff	?___ftneg+2,printf@fval+2
  6459                           
  6460                           ;doprnt.c: 833: flag |= 0x03;
  6461  00039E  0E03               	movlw	3
  6462  0003A0  0101               	movlb	1	; () banked
  6463  0003A2  1360               	iorwf	printf@flag& (0+255),f,b
  6464  0003A4                     l10432:
  6465                           
  6466                           ; BSR set to: 1
  6467                           ;doprnt.c: 834: }
  6468                           ;doprnt.c: 835: exp = 0;
  6469  0003A4  0E00               	movlw	0
  6470  0003A6  0101               	movlb	1	; () banked
  6471  0003A8  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6472  0003AA  0E00               	movlw	0
  6473  0003AC  6F6A               	movwf	printf@exp& (0+255),b
  6474                           
  6475                           ; BSR set to: 1
  6476                           ;doprnt.c: 836: if( fval!=0) {
  6477  0003AE  0101               	movlb	1	; () banked
  6478  0003B0  516E               	movf	printf@fval& (0+255),w,b
  6479  0003B2  0101               	movlb	1	; () banked
  6480  0003B4  116F               	iorwf	(printf@fval+1)& (0+255),w,b
  6481  0003B6  0101               	movlb	1	; () banked
  6482  0003B8  1170               	iorwf	(printf@fval+2)& (0+255),w,b
  6483  0003BA  B4D8               	btfsc	status,2,c
  6484  0003BC  D09B               	goto	l10460
  6485                           
  6486                           ; BSR set to: 1
  6487                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6488  0003BE  0E82               	movlw	130
  6489  0003C0  0101               	movlb	1	; () banked
  6490  0003C2  6F51               	movwf	??_printf& (0+255),b
  6491  0003C4  0EFF               	movlw	255
  6492  0003C6  0101               	movlb	1	; () banked
  6493  0003C8  6F52               	movwf	(??_printf+1)& (0+255),b
  6494  0003CA  C16E  F153         	movff	printf@fval,??_printf+2
  6495  0003CE  C16F  F154         	movff	printf@fval+1,??_printf+3
  6496  0003D2  C170  F155         	movff	printf@fval+2,??_printf+4
  6497  0003D6  C171  F156         	movff	printf@fval+3,??_printf+5
  6498  0003DA  0E10               	movlw	16
  6499  0003DC  D006               	goto	u15260
  6500  0003DE                     u15265:
  6501  0003DE  0101               	movlb	1	; () banked
  6502  0003E0  90D8               	bcf	status,0,c
  6503  0003E2  3356               	rrcf	(??_printf+5)& (0+255),f,b
  6504  0003E4  3355               	rrcf	(??_printf+4)& (0+255),f,b
  6505  0003E6  3354               	rrcf	(??_printf+3)& (0+255),f,b
  6506  0003E8  3353               	rrcf	(??_printf+2)& (0+255),f,b
  6507  0003EA                     u15260:
  6508  0003EA  2EE8               	decfsz	wreg,f,c
  6509  0003EC  D7F8               	goto	u15265
  6510  0003EE  0101               	movlb	1	; () banked
  6511  0003F0  5153               	movf	(??_printf+2)& (0+255),w,b
  6512  0003F2  0101               	movlb	1	; () banked
  6513  0003F4  2551               	addwf	??_printf& (0+255),w,b
  6514  0003F6  0101               	movlb	1	; () banked
  6515  0003F8  6F6A               	movwf	printf@exp& (0+255),b
  6516  0003FA  0E00               	movlw	0
  6517  0003FC  0101               	movlb	1	; () banked
  6518  0003FE  2152               	addwfc	(??_printf+1)& (0+255),w,b
  6519  000400  0101               	movlb	1	; () banked
  6520  000402  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6521                           
  6522                           ; BSR set to: 1
  6523                           ;doprnt.c: 838: exp--;
  6524  000404  0101               	movlb	1	; () banked
  6525  000406  076A               	decf	printf@exp& (0+255),f,b
  6526  000408  A0D8               	btfss	status,0,c
  6527  00040A  076B               	decf	(printf@exp+1)& (0+255),f,b
  6528                           
  6529                           ; BSR set to: 1
  6530                           ;doprnt.c: 839: exp *= 3;
  6531  00040C  C16A  F10E         	movff	printf@exp,___wmul@multiplier
  6532  000410  C16B  F10F         	movff	printf@exp+1,___wmul@multiplier+1
  6533  000414  0E00               	movlw	0
  6534  000416  0101               	movlb	1	; () banked
  6535  000418  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6536  00041A  0E03               	movlw	3
  6537  00041C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  6538  00041E  ECD9  F037         	call	___wmul	;wreg free
  6539  000422  C10E  F16A         	movff	?___wmul,printf@exp
  6540  000426  C10F  F16B         	movff	?___wmul+1,printf@exp+1
  6541                           
  6542                           ;doprnt.c: 840: exp /= 10;
  6543  00042A  C16A  F106         	movff	printf@exp,___awdiv@dividend
  6544  00042E  C16B  F107         	movff	printf@exp+1,___awdiv@dividend+1
  6545  000432  0E00               	movlw	0
  6546  000434  0101               	movlb	1	; () banked
  6547  000436  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  6548  000438  0E0A               	movlw	10
  6549  00043A  6F08               	movwf	___awdiv@divisor& (0+255),b
  6550  00043C  EC28  F02C         	call	___awdiv	;wreg free
  6551  000440  C106  F16A         	movff	?___awdiv,printf@exp
  6552  000444  C107  F16B         	movff	?___awdiv+1,printf@exp+1
  6553                           
  6554                           ;doprnt.c: 841: if(exp < 0)
  6555  000448  0101               	movlb	1	; () banked
  6556  00044A  AF6B               	btfss	(printf@exp+1)& (0+255),7,b
  6557  00044C  D004               	goto	l10448
  6558                           
  6559                           ; BSR set to: 1
  6560                           ;doprnt.c: 842: exp--;
  6561  00044E  0101               	movlb	1	; () banked
  6562  000450  076A               	decf	printf@exp& (0+255),f,b
  6563  000452  A0D8               	btfss	status,0,c
  6564  000454  076B               	decf	(printf@exp+1)& (0+255),f,b
  6565  000456                     l10448:
  6566                           
  6567                           ; BSR set to: 1
  6568                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6569  000456  0101               	movlb	1	; () banked
  6570  000458  516A               	movf	printf@exp& (0+255),w,b
  6571  00045A  0800               	sublw	0
  6572  00045C  EC7A  F006         	call	_scale
  6573  000460  C123  F162         	movff	?_scale,printf@tmpval
  6574  000464  C124  F163         	movff	?_scale+1,printf@tmpval+1
  6575  000468  C125  F164         	movff	?_scale+2,printf@tmpval+2
  6576                           
  6577                           ;doprnt.c: 847: tmpval.integ *= fval;
  6578  00046C  C162  F114         	movff	printf@tmpval,___ftmul@f1
  6579  000470  C163  F115         	movff	printf@tmpval+1,___ftmul@f1+1
  6580  000474  C164  F116         	movff	printf@tmpval+2,___ftmul@f1+2
  6581  000478  C16E  F117         	movff	printf@fval,___ftmul@f2
  6582  00047C  C16F  F118         	movff	printf@fval+1,___ftmul@f2+1
  6583  000480  C170  F119         	movff	printf@fval+2,___ftmul@f2+2
  6584  000484  EC1F  F01D         	call	___ftmul	;wreg free
  6585  000488  C114  F162         	movff	?___ftmul,printf@tmpval
  6586  00048C  C115  F163         	movff	?___ftmul+1,printf@tmpval+1
  6587  000490  C116  F164         	movff	?___ftmul+2,printf@tmpval+2
  6588                           
  6589                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6590  000494  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6591  000498  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6592  00049C  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6593  0004A0  0E00               	movlw	0
  6594  0004A2  0101               	movlb	1	; () banked
  6595  0004A4  6F03               	movwf	___ftge@ff2& (0+255),b
  6596  0004A6  0E80               	movlw	128
  6597  0004A8  0101               	movlb	1	; () banked
  6598  0004AA  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6599  0004AC  0E3F               	movlw	63
  6600  0004AE  0101               	movlb	1	; () banked
  6601  0004B0  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6602  0004B2  EC02  F02B         	call	___ftge	;wreg free
  6603  0004B6  0101               	movlb	1	; () banked
  6604  0004B8  B0D8               	btfsc	status,0,c
  6605  0004BA  D005               	goto	l10456
  6606                           
  6607                           ; BSR set to: 1
  6608                           ;doprnt.c: 849: exp--;
  6609  0004BC  0101               	movlb	1	; () banked
  6610  0004BE  076A               	decf	printf@exp& (0+255),f,b
  6611  0004C0  A0D8               	btfss	status,0,c
  6612  0004C2  076B               	decf	(printf@exp+1)& (0+255),f,b
  6613  0004C4  D017               	goto	l10460
  6614  0004C6                     l10456:
  6615                           
  6616                           ; BSR set to: 1
  6617                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6618  0004C6  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6619  0004CA  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6620  0004CE  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6621  0004D2  0E00               	movlw	0
  6622  0004D4  0101               	movlb	1	; () banked
  6623  0004D6  6F03               	movwf	___ftge@ff2& (0+255),b
  6624  0004D8  0E20               	movlw	32
  6625  0004DA  0101               	movlb	1	; () banked
  6626  0004DC  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6627  0004DE  0E41               	movlw	65
  6628  0004E0  0101               	movlb	1	; () banked
  6629  0004E2  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6630  0004E4  EC02  F02B         	call	___ftge	;wreg free
  6631  0004E8  0101               	movlb	1	; () banked
  6632  0004EA  A0D8               	btfss	status,0,c
  6633  0004EC  D003               	goto	l10460
  6634                           
  6635                           ; BSR set to: 1
  6636                           ;doprnt.c: 851: exp++;
  6637  0004EE  0101               	movlb	1	; () banked
  6638  0004F0  4B6A               	infsnz	printf@exp& (0+255),f,b
  6639  0004F2  2B6B               	incf	(printf@exp+1)& (0+255),f,b
  6640  0004F4                     l10460:
  6641                           
  6642                           ; BSR set to: 1
  6643                           ;doprnt.c: 852: }
  6644                           ;doprnt.c: 1112: if(prec <= 12)
  6645  0004F4  0101               	movlb	1	; () banked
  6646  0004F6  BF72               	btfsc	(printf@prec+1)& (0+255),7,b
  6647  0004F8  D008               	goto	l10462
  6648  0004FA  0101               	movlb	1	; () banked
  6649  0004FC  5172               	movf	(printf@prec+1)& (0+255),w,b
  6650  0004FE  E11D               	bnz	l10464
  6651  000500  0E0D               	movlw	13
  6652  000502  0101               	movlb	1	; () banked
  6653  000504  5D71               	subwf	printf@prec& (0+255),w,b
  6654  000506  B0D8               	btfsc	status,0,c
  6655  000508  D018               	goto	l10464
  6656  00050A                     l10462:
  6657                           
  6658                           ; BSR set to: 1
  6659                           ;doprnt.c: 1113: fval += fround(prec);
  6660  00050A  C16E  F12D         	movff	printf@fval,___ftadd@f1
  6661  00050E  C16F  F12E         	movff	printf@fval+1,___ftadd@f1+1
  6662  000512  C170  F12F         	movff	printf@fval+2,___ftadd@f1+2
  6663  000516  0101               	movlb	1	; () banked
  6664  000518  5171               	movf	printf@prec& (0+255),w,b
  6665  00051A  EC96  F012         	call	_fround
  6666  00051E  C123  F130         	movff	?_fround,___ftadd@f2
  6667  000522  C124  F131         	movff	?_fround+1,___ftadd@f2+1
  6668  000526  C125  F132         	movff	?_fround+2,___ftadd@f2+2
  6669  00052A  ECEC  F013         	call	___ftadd	;wreg free
  6670  00052E  C12D  F16E         	movff	?___ftadd,printf@fval
  6671  000532  C12E  F16F         	movff	?___ftadd+1,printf@fval+1
  6672  000536  C12F  F170         	movff	?___ftadd+2,printf@fval+2
  6673  00053A                     l10464:
  6674                           
  6675                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6676  00053A  0101               	movlb	1	; () banked
  6677  00053C  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  6678  00053E  D008               	goto	l10466
  6679  000540  0101               	movlb	1	; () banked
  6680  000542  516B               	movf	(printf@exp+1)& (0+255),w,b
  6681  000544  E12A               	bnz	l10472
  6682  000546  0E0A               	movlw	10
  6683  000548  0101               	movlb	1	; () banked
  6684  00054A  5D6A               	subwf	printf@exp& (0+255),w,b
  6685  00054C  B0D8               	btfsc	status,0,c
  6686  00054E  D025               	goto	l10472
  6687  000550                     l10466:
  6688                           
  6689                           ; BSR set to: 1
  6690  000550  0101               	movlb	1	; () banked
  6691  000552  516E               	movf	printf@fval& (0+255),w,b
  6692  000554  0101               	movlb	1	; () banked
  6693  000556  116F               	iorwf	(printf@fval+1)& (0+255),w,b
  6694  000558  0101               	movlb	1	; () banked
  6695  00055A  1170               	iorwf	(printf@fval+2)& (0+255),w,b
  6696  00055C  B4D8               	btfsc	status,2,c
  6697  00055E  D063               	goto	l10486
  6698                           
  6699                           ; BSR set to: 1
  6700  000560  C16E  F12A         	movff	printf@fval,___fttol@f1
  6701  000564  C16F  F12B         	movff	printf@fval+1,___fttol@f1+1
  6702  000568  C170  F12C         	movff	printf@fval+2,___fttol@f1+2
  6703  00056C  ECC9  F01F         	call	___fttol	;wreg free
  6704  000570  0101               	movlb	1	; () banked
  6705  000572  512A               	movf	?___fttol& (0+255),w,b
  6706  000574  0101               	movlb	1	; () banked
  6707  000576  112B               	iorwf	(?___fttol+1)& (0+255),w,b
  6708  000578  0101               	movlb	1	; () banked
  6709  00057A  112C               	iorwf	(?___fttol+2)& (0+255),w,b
  6710  00057C  0101               	movlb	1	; () banked
  6711  00057E  112D               	iorwf	(?___fttol+3)& (0+255),w,b
  6712  000580  A4D8               	btfss	status,2,c
  6713  000582  D051               	goto	l10486
  6714                           
  6715                           ; BSR set to: 1
  6716  000584  0101               	movlb	1	; () banked
  6717  000586  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  6718  000588  D04E               	goto	l10486
  6719  00058A  0101               	movlb	1	; () banked
  6720  00058C  516B               	movf	(printf@exp+1)& (0+255),w,b
  6721  00058E  E105               	bnz	l10472
  6722  000590  0E02               	movlw	2
  6723  000592  0101               	movlb	1	; () banked
  6724  000594  5D6A               	subwf	printf@exp& (0+255),w,b
  6725  000596  A0D8               	btfss	status,0,c
  6726  000598  D046               	goto	l10486
  6727  00059A                     l10472:
  6728                           
  6729                           ; BSR set to: 1
  6730                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6731  00059A  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6732  00059E  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6733  0005A2  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6734  0005A6  0E70               	movlw	112
  6735  0005A8  0101               	movlb	1	; () banked
  6736  0005AA  6F03               	movwf	___ftge@ff2& (0+255),b
  6737  0005AC  0E89               	movlw	137
  6738  0005AE  0101               	movlb	1	; () banked
  6739  0005B0  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6740  0005B2  0E40               	movlw	64
  6741  0005B4  0101               	movlb	1	; () banked
  6742  0005B6  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6743  0005B8  EC02  F02B         	call	___ftge	;wreg free
  6744  0005BC  0101               	movlb	1	; () banked
  6745  0005BE  B0D8               	btfsc	status,0,c
  6746  0005C0  D003               	goto	l10476
  6747                           
  6748                           ; BSR set to: 1
  6749                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6750  0005C2  0101               	movlb	1	; () banked
  6751  0005C4  0EF7               	movlw	247
  6752  0005C6  D002               	goto	L1
  6753  0005C8                     l10476:
  6754                           
  6755                           ; BSR set to: 1
  6756                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6757  0005C8  0101               	movlb	1	; () banked
  6758  0005CA  0EF8               	movlw	248
  6759  0005CC                     L1:
  6760  0005CC  276A               	addwf	printf@exp& (0+255),f,b
  6761  0005CE  0EFF               	movlw	255
  6762  0005D0  236B               	addwfc	(printf@exp+1)& (0+255),f,b
  6763                           
  6764                           ; BSR set to: 1
  6765                           ;doprnt.c: 1124: }
  6766                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6767                           
  6768                           ; BSR set to: 1
  6769  0005D2  0101               	movlb	1	; () banked
  6770  0005D4  516A               	movf	printf@exp& (0+255),w,b
  6771  0005D6  EC7A  F006         	call	_scale
  6772  0005DA  C123  F162         	movff	?_scale,printf@tmpval
  6773  0005DE  C124  F163         	movff	?_scale+1,printf@tmpval+1
  6774  0005E2  C125  F164         	movff	?_scale+2,printf@tmpval+2
  6775                           
  6776                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6777  0005E6  C16E  F100         	movff	printf@fval,__tdiv_to_l_@f1
  6778  0005EA  C16F  F101         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  6779  0005EE  C170  F102         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  6780  0005F2  C162  F103         	movff	printf@tmpval,__tdiv_to_l_@f2
  6781  0005F6  C163  F104         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  6782  0005FA  C164  F105         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  6783  0005FE  EC8C  F01B         	call	__tdiv_to_l_	;wreg free
  6784  000602  C100  F166         	movff	?__tdiv_to_l_,printf@val
  6785  000606  C101  F167         	movff	?__tdiv_to_l_+1,printf@val+1
  6786  00060A  C102  F168         	movff	?__tdiv_to_l_+2,printf@val+2
  6787  00060E  C103  F169         	movff	?__tdiv_to_l_+3,printf@val+3
  6788                           
  6789                           ;doprnt.c: 1129: fval = 0.0;
  6790  000612  0E00               	movlw	0
  6791  000614  0101               	movlb	1	; () banked
  6792  000616  6F6E               	movwf	printf@fval& (0+255),b
  6793  000618  0E00               	movlw	0
  6794  00061A  0101               	movlb	1	; () banked
  6795  00061C  6F6F               	movwf	(printf@fval+1)& (0+255),b
  6796  00061E  0E00               	movlw	0
  6797  000620  0101               	movlb	1	; () banked
  6798  000622  6F70               	movwf	(printf@fval+2)& (0+255),b
  6799                           
  6800                           ;doprnt.c: 1130: } else {
  6801  000624  D033               	goto	l10490
  6802  000626                     l10486:
  6803                           
  6804                           ; BSR set to: 1
  6805                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6806  000626  C16E  F12A         	movff	printf@fval,___fttol@f1
  6807  00062A  C16F  F12B         	movff	printf@fval+1,___fttol@f1+1
  6808  00062E  C170  F12C         	movff	printf@fval+2,___fttol@f1+2
  6809  000632  ECC9  F01F         	call	___fttol	;wreg free
  6810  000636  C12A  F166         	movff	?___fttol,printf@val
  6811  00063A  C12B  F167         	movff	?___fttol+1,printf@val+1
  6812  00063E  C12C  F168         	movff	?___fttol+2,printf@val+2
  6813  000642  C12D  F169         	movff	?___fttol+3,printf@val+3
  6814                           
  6815                           ;doprnt.c: 1132: fval -= (double)val;
  6816  000646  C16E  F139         	movff	printf@fval,___ftsub@f1
  6817  00064A  C16F  F13A         	movff	printf@fval+1,___ftsub@f1+1
  6818  00064E  C170  F13B         	movff	printf@fval+2,___ftsub@f1+2
  6819  000652  C166  F108         	movff	printf@val,___lltoft@c
  6820  000656  C167  F109         	movff	printf@val+1,___lltoft@c+1
  6821  00065A  C168  F10A         	movff	printf@val+2,___lltoft@c+2
  6822  00065E  C169  F10B         	movff	printf@val+3,___lltoft@c+3
  6823  000662  EC99  F032         	call	___lltoft	;wreg free
  6824  000666  C108  F13C         	movff	?___lltoft,___ftsub@f2
  6825  00066A  C109  F13D         	movff	?___lltoft+1,___ftsub@f2+1
  6826  00066E  C10A  F13E         	movff	?___lltoft+2,___ftsub@f2+2
  6827  000672  EC7D  F036         	call	___ftsub	;wreg free
  6828  000676  C139  F16E         	movff	?___ftsub,printf@fval
  6829  00067A  C13A  F16F         	movff	?___ftsub+1,printf@fval+1
  6830  00067E  C13B  F170         	movff	?___ftsub+2,printf@fval+2
  6831                           
  6832                           ;doprnt.c: 1133: exp = 0;
  6833  000682  0E00               	movlw	0
  6834  000684  0101               	movlb	1	; () banked
  6835  000686  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6836  000688  0E00               	movlw	0
  6837  00068A  6F6A               	movwf	printf@exp& (0+255),b
  6838  00068C                     l10490:
  6839                           
  6840                           ; BSR set to: 1
  6841                           ;doprnt.c: 1134: }
  6842                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6843  00068C  0E01               	movlw	1
  6844  00068E  0101               	movlb	1	; () banked
  6845  000690  6F73               	movwf	printf@c& (0+255),b
  6846  000692                     l10492:
  6847                           
  6848                           ; BSR set to: 1
  6849  000692  0E0A               	movlw	10
  6850  000694  0101               	movlb	1	; () banked
  6851  000696  1973               	xorwf	printf@c& (0+255),w,b
  6852  000698  B4D8               	btfsc	status,2,c
  6853  00069A  D01E               	goto	l10504
  6854                           
  6855                           ; BSR set to: 1
  6856                           ;doprnt.c: 1137: if(val < dpowers[c])
  6857                           
  6858                           ; BSR set to: 1
  6859                           
  6860                           ; BSR set to: 1
  6861  00069C  0101               	movlb	1	; () banked
  6862  00069E  5173               	movf	printf@c& (0+255),w,b
  6863  0006A0  0D04               	mullw	4
  6864  0006A2  0ED5               	movlw	low _dpowers
  6865  0006A4  24F3               	addwf	prodl,w,c
  6866  0006A6  6EF6               	movwf	tblptrl,c
  6867  0006A8  0E7C               	movlw	high _dpowers
  6868  0006AA  20F4               	addwfc	prodh,w,c
  6869  0006AC  6EF7               	movwf	tblptrh,c
  6870  0006AE                     	if	0	;There are less than 3 active tblptr bytes
  6871  0006AE                     	endif
  6872  0006AE  0009               	tblrd		*+
  6873  0006B0  50F5               	movf	tablat,w,c
  6874  0006B2  0101               	movlb	1	; () banked
  6875  0006B4  5D66               	subwf	printf@val& (0+255),w,b
  6876  0006B6  0009               	tblrd		*+
  6877  0006B8  50F5               	movf	tablat,w,c
  6878  0006BA  0101               	movlb	1	; () banked
  6879  0006BC  5967               	subwfb	(printf@val+1)& (0+255),w,b
  6880  0006BE  0009               	tblrd		*+
  6881  0006C0  50F5               	movf	tablat,w,c
  6882  0006C2  0101               	movlb	1	; () banked
  6883  0006C4  5968               	subwfb	(printf@val+2)& (0+255),w,b
  6884  0006C6  0009               	tblrd		*+
  6885  0006C8  50F5               	movf	tablat,w,c
  6886  0006CA  0101               	movlb	1	; () banked
  6887  0006CC  5969               	subwfb	(printf@val+3)& (0+255),w,b
  6888  0006CE  A0D8               	btfss	status,0,c
  6889  0006D0  D003               	goto	l10504
  6890                           
  6891                           ; BSR set to: 1
  6892                           
  6893                           ; BSR set to: 1
  6894                           
  6895                           ; BSR set to: 1
  6896                           ;doprnt.c: 1138: break;
  6897  0006D2  0101               	movlb	1	; () banked
  6898  0006D4  2B73               	incf	printf@c& (0+255),f,b
  6899  0006D6  D7DD               	goto	l10492
  6900  0006D8                     l10504:
  6901                           
  6902                           ; BSR set to: 1
  6903                           ;doprnt.c: 1142: width -= prec + c + exp;
  6904  0006D8  C173  F151         	movff	printf@c,??_printf
  6905  0006DC  0101               	movlb	1	; () banked
  6906  0006DE  6B52               	clrf	(??_printf+1)& (0+255),b
  6907  0006E0  BF51               	btfsc	??_printf& (0+255),7,b
  6908  0006E2  0752               	decf	(??_printf+1)& (0+255),f,b
  6909  0006E4  0101               	movlb	1	; () banked
  6910  0006E6  5171               	movf	printf@prec& (0+255),w,b
  6911  0006E8  0101               	movlb	1	; () banked
  6912  0006EA  2751               	addwf	??_printf& (0+255),f,b
  6913  0006EC  0101               	movlb	1	; () banked
  6914  0006EE  5172               	movf	(printf@prec+1)& (0+255),w,b
  6915  0006F0  0101               	movlb	1	; () banked
  6916  0006F2  2352               	addwfc	(??_printf+1)& (0+255),f,b
  6917  0006F4  0101               	movlb	1	; () banked
  6918  0006F6  516A               	movf	printf@exp& (0+255),w,b
  6919  0006F8  0101               	movlb	1	; () banked
  6920  0006FA  2751               	addwf	??_printf& (0+255),f,b
  6921  0006FC  0101               	movlb	1	; () banked
  6922  0006FE  516B               	movf	(printf@exp+1)& (0+255),w,b
  6923  000700  0101               	movlb	1	; () banked
  6924  000702  2352               	addwfc	(??_printf+1)& (0+255),f,b
  6925  000704  0101               	movlb	1	; () banked
  6926  000706  5151               	movf	??_printf& (0+255),w,b
  6927  000708  0101               	movlb	1	; () banked
  6928  00070A  5F6C               	subwf	printf@width& (0+255),f,b
  6929  00070C  0101               	movlb	1	; () banked
  6930  00070E  5152               	movf	(??_printf+1)& (0+255),w,b
  6931  000710  0101               	movlb	1	; () banked
  6932  000712  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  6933                           
  6934                           ;doprnt.c: 1143: if(
  6935                           ;doprnt.c: 1147: prec)
  6936  000714  0101               	movlb	1	; () banked
  6937  000716  5171               	movf	printf@prec& (0+255),w,b
  6938  000718  0101               	movlb	1	; () banked
  6939  00071A  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  6940  00071C  B4D8               	btfsc	status,2,c
  6941  00071E  D004               	goto	l10508
  6942                           
  6943                           ; BSR set to: 1
  6944                           ;doprnt.c: 1148: width--;
  6945  000720  0101               	movlb	1	; () banked
  6946  000722  076C               	decf	printf@width& (0+255),f,b
  6947  000724  A0D8               	btfss	status,0,c
  6948  000726  076D               	decf	(printf@width+1)& (0+255),f,b
  6949  000728                     l10508:
  6950                           
  6951                           ; BSR set to: 1
  6952                           ;doprnt.c: 1149: if(flag & 0x03)
  6953  000728  0E03               	movlw	3
  6954  00072A  0101               	movlb	1	; () banked
  6955  00072C  1560               	andwf	printf@flag& (0+255),w,b
  6956  00072E  0101               	movlb	1	; () banked
  6957  000730  6F51               	movwf	??_printf& (0+255),b
  6958  000732  0E00               	movlw	0
  6959  000734  0101               	movlb	1	; () banked
  6960  000736  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6961  000738  0101               	movlb	1	; () banked
  6962  00073A  6F52               	movwf	(??_printf+1)& (0+255),b
  6963  00073C  0101               	movlb	1	; () banked
  6964  00073E  5151               	movf	??_printf& (0+255),w,b
  6965  000740  0101               	movlb	1	; () banked
  6966  000742  1152               	iorwf	(??_printf+1)& (0+255),w,b
  6967  000744  B4D8               	btfsc	status,2,c
  6968  000746  D008               	goto	l10516
  6969  000748  D003               	goto	l10514
  6970  00074A                     l10512:
  6971                           
  6972                           ; BSR set to: 1
  6973                           ;doprnt.c: 1181: (putch(' ') );
  6974  00074A  0E20               	movlw	32
  6975  00074C  EC76  F039         	call	_putch
  6976  000750                     l10514:
  6977                           
  6978                           ;doprnt.c: 1182: width--;
  6979  000750  0101               	movlb	1	; () banked
  6980  000752  076C               	decf	printf@width& (0+255),f,b
  6981  000754  A0D8               	btfss	status,0,c
  6982  000756  076D               	decf	(printf@width+1)& (0+255),f,b
  6983  000758                     l10516:
  6984                           
  6985                           ; BSR set to: 1
  6986  000758  0101               	movlb	1	; () banked
  6987  00075A  BF6D               	btfsc	(printf@width+1)& (0+255),7,b
  6988  00075C  D007               	goto	l10518
  6989  00075E  0101               	movlb	1	; () banked
  6990  000760  516D               	movf	(printf@width+1)& (0+255),w,b
  6991  000762  E1F3               	bnz	l10512
  6992  000764  0101               	movlb	1	; () banked
  6993  000766  056C               	decf	printf@width& (0+255),w,b
  6994  000768  B0D8               	btfsc	status,0,c
  6995  00076A  D7EF               	goto	l10512
  6996  00076C                     l10518:
  6997                           
  6998                           ; BSR set to: 1
  6999                           ;doprnt.c: 1183: }
  7000                           ;doprnt.c: 1188: if(flag & 0x03)
  7001  00076C  0E03               	movlw	3
  7002  00076E  0101               	movlb	1	; () banked
  7003  000770  1560               	andwf	printf@flag& (0+255),w,b
  7004  000772  0101               	movlb	1	; () banked
  7005  000774  6F51               	movwf	??_printf& (0+255),b
  7006  000776  0E00               	movlw	0
  7007  000778  0101               	movlb	1	; () banked
  7008  00077A  1561               	andwf	(printf@flag+1)& (0+255),w,b
  7009  00077C  0101               	movlb	1	; () banked
  7010  00077E  6F52               	movwf	(??_printf+1)& (0+255),b
  7011  000780  0101               	movlb	1	; () banked
  7012  000782  5151               	movf	??_printf& (0+255),w,b
  7013  000784  0101               	movlb	1	; () banked
  7014  000786  1152               	iorwf	(??_printf+1)& (0+255),w,b
  7015  000788  B4D8               	btfsc	status,2,c
  7016  00078A  D04B               	goto	l10528
  7017                           
  7018                           ; BSR set to: 1
  7019                           ;doprnt.c: 1190: (putch('-') );
  7020  00078C  0E2D               	movlw	45
  7021  00078E  EC76  F039         	call	_putch
  7022                           
  7023                           ;doprnt.c: 1195: }
  7024                           ;doprnt.c: 1196: while(c--) {
  7025  000792  D047               	goto	l10528
  7026  000794                     l10522:
  7027                           
  7028                           ;doprnt.c: 1200: {
  7029                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  7030  000794  C166  F100         	movff	printf@val,___lldiv@dividend
  7031  000798  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  7032  00079C  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  7033  0007A0  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  7034  0007A4  0101               	movlb	1	; () banked
  7035  0007A6  5173               	movf	printf@c& (0+255),w,b
  7036  0007A8  0D04               	mullw	4
  7037  0007AA  0ED5               	movlw	low _dpowers
  7038  0007AC  24F3               	addwf	prodl,w,c
  7039  0007AE  6EF6               	movwf	tblptrl,c
  7040  0007B0  0E7C               	movlw	high _dpowers
  7041  0007B2  20F4               	addwfc	prodh,w,c
  7042  0007B4  6EF7               	movwf	tblptrh,c
  7043  0007B6                     	if	0	;There are less than 3 active tblptr bytes
  7044  0007B6                     	endif
  7045  0007B6  0009               	tblrd		*+
  7046  0007B8  CFF5 F104          	movff	tablat,___lldiv@divisor
  7047  0007BC  0009               	tblrd		*+
  7048  0007BE  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  7049  0007C2  0009               	tblrd		*+
  7050  0007C4  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  7051  0007C8  000A               	tblrd		*-
  7052  0007CA  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  7053  0007CE  EC87  F02C         	call	___lldiv	;wreg free
  7054  0007D2  C100  F162         	movff	?___lldiv,printf@tmpval
  7055  0007D6  C101  F163         	movff	?___lldiv+1,printf@tmpval+1
  7056  0007DA  C102  F164         	movff	?___lldiv+2,printf@tmpval+2
  7057  0007DE  C103  F165         	movff	?___lldiv+3,printf@tmpval+3
  7058                           
  7059                           ;doprnt.c: 1202: tmpval.vd %= 10;
  7060  0007E2  C162  F10D         	movff	printf@tmpval,___llmod@dividend
  7061  0007E6  C163  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  7062  0007EA  C164  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  7063  0007EE  C165  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  7064  0007F2  0E0A               	movlw	10
  7065  0007F4  0101               	movlb	1	; () banked
  7066  0007F6  6F11               	movwf	___llmod@divisor& (0+255),b
  7067  0007F8  0E00               	movlw	0
  7068  0007FA  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  7069  0007FC  0E00               	movlw	0
  7070  0007FE  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  7071  000800  0E00               	movlw	0
  7072  000802  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  7073  000804  EC38  F02F         	call	___llmod	;wreg free
  7074  000808  C10D  F162         	movff	?___llmod,printf@tmpval
  7075  00080C  C10E  F163         	movff	?___llmod+1,printf@tmpval+1
  7076  000810  C10F  F164         	movff	?___llmod+2,printf@tmpval+2
  7077  000814  C110  F165         	movff	?___llmod+3,printf@tmpval+3
  7078                           
  7079                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  7080  000818  0101               	movlb	1	; () banked
  7081  00081A  5162               	movf	printf@tmpval& (0+255),w,b
  7082  00081C  0F30               	addlw	48
  7083  00081E  EC76  F039         	call	_putch
  7084  000822                     l10528:
  7085  000822  0101               	movlb	1	; () banked
  7086  000824  0773               	decf	printf@c& (0+255),f,b
  7087  000826  0101               	movlb	1	; () banked
  7088  000828  2973               	incf	printf@c& (0+255),w,b
  7089  00082A  B4D8               	btfsc	status,2,c
  7090  00082C  D008               	goto	l10534
  7091  00082E  D7B2               	goto	l10522
  7092  000830                     l10530:
  7093                           
  7094                           ; BSR set to: 1
  7095                           ;doprnt.c: 1208: (putch('0') );
  7096  000830  0E30               	movlw	48
  7097  000832  EC76  F039         	call	_putch
  7098                           
  7099                           ;doprnt.c: 1209: exp--;
  7100  000836  0101               	movlb	1	; () banked
  7101  000838  076A               	decf	printf@exp& (0+255),f,b
  7102  00083A  A0D8               	btfss	status,0,c
  7103  00083C  076B               	decf	(printf@exp+1)& (0+255),f,b
  7104  00083E                     l10534:
  7105                           
  7106                           ; BSR set to: 1
  7107  00083E  0101               	movlb	1	; () banked
  7108  000840  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  7109  000842  D007               	goto	l10536
  7110  000844  0101               	movlb	1	; () banked
  7111  000846  516B               	movf	(printf@exp+1)& (0+255),w,b
  7112  000848  E1F3               	bnz	l10530
  7113  00084A  0101               	movlb	1	; () banked
  7114  00084C  056A               	decf	printf@exp& (0+255),w,b
  7115  00084E  B0D8               	btfsc	status,0,c
  7116  000850  D7EF               	goto	l10530
  7117  000852                     l10536:
  7118                           
  7119                           ; BSR set to: 1
  7120                           ;doprnt.c: 1210: }
  7121                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7122  000852  0101               	movlb	1	; () banked
  7123  000854  BF72               	btfsc	(printf@prec+1)& (0+255),7,b
  7124  000856  D00C               	goto	l1036
  7125  000858  0101               	movlb	1	; () banked
  7126  00085A  5172               	movf	(printf@prec+1)& (0+255),w,b
  7127  00085C  E105               	bnz	u15450
  7128  00085E  0E09               	movlw	9
  7129  000860  0101               	movlb	1	; () banked
  7130  000862  5D71               	subwf	printf@prec& (0+255),w,b
  7131  000864  A0D8               	btfss	status,0,c
  7132  000866  D004               	goto	l1036
  7133  000868                     u15450:
  7134                           
  7135                           ; BSR set to: 1
  7136                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7137  000868  0E08               	movlw	8
  7138  00086A  0101               	movlb	1	; () banked
  7139  00086C  6F73               	movwf	printf@c& (0+255),b
  7140  00086E  D002               	goto	l10540
  7141  000870                     l1036:
  7142                           
  7143                           ; BSR set to: 1
  7144                           ;doprnt.c: 1213: else
  7145                           ;doprnt.c: 1214: c = prec;
  7146  000870  C171  F173         	movff	printf@prec,printf@c
  7147  000874                     l10540:
  7148                           
  7149                           ; BSR set to: 1
  7150                           ;doprnt.c: 1215: prec -= c;
  7151  000874  0101               	movlb	1	; () banked
  7152  000876  5173               	movf	printf@c& (0+255),w,b
  7153  000878  0101               	movlb	1	; () banked
  7154  00087A  5F71               	subwf	printf@prec& (0+255),f,b
  7155  00087C  0E00               	movlw	0
  7156  00087E  0101               	movlb	1	; () banked
  7157  000880  BF73               	btfsc	printf@c& (0+255),7,b
  7158  000882  0EFF               	movlw	255
  7159  000884  0101               	movlb	1	; () banked
  7160  000886  5B72               	subwfb	(printf@prec+1)& (0+255),f,b
  7161                           
  7162                           ; BSR set to: 1
  7163                           ;doprnt.c: 1219: if(c)
  7164  000888  0101               	movlb	1	; () banked
  7165  00088A  5173               	movf	printf@c& (0+255),w,b
  7166  00088C  0101               	movlb	1	; () banked
  7167  00088E  B4D8               	btfsc	status,2,c
  7168  000890  D003               	goto	l10546
  7169                           
  7170                           ; BSR set to: 1
  7171                           ;doprnt.c: 1221: (putch('.') );
  7172  000892  0E2E               	movlw	46
  7173  000894  EC76  F039         	call	_putch
  7174  000898                     l10546:
  7175                           
  7176                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7177  000898  0101               	movlb	1	; () banked
  7178  00089A  5173               	movf	printf@c& (0+255),w,b
  7179  00089C  EC7A  F006         	call	_scale
  7180  0008A0  C123  F157         	movff	?_scale,_printf$3022
  7181  0008A4  C124  F158         	movff	?_scale+1,_printf$3022+1
  7182  0008A8  C125  F159         	movff	?_scale+2,_printf$3022+2
  7183                           
  7184                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7185  0008AC  C16E  F117         	movff	printf@fval,___ftmul@f2
  7186  0008B0  C16F  F118         	movff	printf@fval+1,___ftmul@f2+1
  7187  0008B4  C170  F119         	movff	printf@fval+2,___ftmul@f2+2
  7188  0008B8  C157  F114         	movff	_printf$3022,___ftmul@f1
  7189  0008BC  C158  F115         	movff	_printf$3022+1,___ftmul@f1+1
  7190  0008C0  C159  F116         	movff	_printf$3022+2,___ftmul@f1+2
  7191  0008C4  EC1F  F01D         	call	___ftmul	;wreg free
  7192  0008C8  C114  F12A         	movff	?___ftmul,___fttol@f1
  7193  0008CC  C115  F12B         	movff	?___ftmul+1,___fttol@f1+1
  7194  0008D0  C116  F12C         	movff	?___ftmul+2,___fttol@f1+2
  7195  0008D4  ECC9  F01F         	call	___fttol	;wreg free
  7196  0008D8  C12A  F166         	movff	?___fttol,printf@val
  7197  0008DC  C12B  F167         	movff	?___fttol+1,printf@val+1
  7198  0008E0  C12C  F168         	movff	?___fttol+2,printf@val+2
  7199  0008E4  C12D  F169         	movff	?___fttol+3,printf@val+3
  7200                           
  7201                           ;doprnt.c: 1228: while(c--) {
  7202  0008E8  D06E               	goto	l10556
  7203  0008EA                     l10550:
  7204                           
  7205                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7206  0008EA  C166  F100         	movff	printf@val,___lldiv@dividend
  7207  0008EE  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  7208  0008F2  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  7209  0008F6  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  7210  0008FA  0101               	movlb	1	; () banked
  7211  0008FC  5173               	movf	printf@c& (0+255),w,b
  7212  0008FE  0D04               	mullw	4
  7213  000900  0ED5               	movlw	low _dpowers
  7214  000902  24F3               	addwf	prodl,w,c
  7215  000904  6EF6               	movwf	tblptrl,c
  7216  000906  0E7C               	movlw	high _dpowers
  7217  000908  20F4               	addwfc	prodh,w,c
  7218  00090A  6EF7               	movwf	tblptrh,c
  7219  00090C                     	if	0	;There are less than 3 active tblptr bytes
  7220  00090C                     	endif
  7221  00090C  0009               	tblrd		*+
  7222  00090E  CFF5 F104          	movff	tablat,___lldiv@divisor
  7223  000912  0009               	tblrd		*+
  7224  000914  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  7225  000918  0009               	tblrd		*+
  7226  00091A  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  7227  00091E  000A               	tblrd		*-
  7228  000920  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  7229  000924  EC87  F02C         	call	___lldiv	;wreg free
  7230  000928  C100  F162         	movff	?___lldiv,printf@tmpval
  7231  00092C  C101  F163         	movff	?___lldiv+1,printf@tmpval+1
  7232  000930  C102  F164         	movff	?___lldiv+2,printf@tmpval+2
  7233  000934  C103  F165         	movff	?___lldiv+3,printf@tmpval+3
  7234                           
  7235                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7236  000938  C162  F10D         	movff	printf@tmpval,___llmod@dividend
  7237  00093C  C163  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  7238  000940  C164  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  7239  000944  C165  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  7240  000948  0E0A               	movlw	10
  7241  00094A  0101               	movlb	1	; () banked
  7242  00094C  6F11               	movwf	___llmod@divisor& (0+255),b
  7243  00094E  0E00               	movlw	0
  7244  000950  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  7245  000952  0E00               	movlw	0
  7246  000954  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  7247  000956  0E00               	movlw	0
  7248  000958  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  7249  00095A  EC38  F02F         	call	___llmod	;wreg free
  7250  00095E  C10D  F162         	movff	?___llmod,printf@tmpval
  7251  000962  C10E  F163         	movff	?___llmod+1,printf@tmpval+1
  7252  000966  C10F  F164         	movff	?___llmod+2,printf@tmpval+2
  7253  00096A  C110  F165         	movff	?___llmod+3,printf@tmpval+3
  7254                           
  7255                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  7256  00096E  0101               	movlb	1	; () banked
  7257  000970  5162               	movf	printf@tmpval& (0+255),w,b
  7258  000972  0F30               	addlw	48
  7259  000974  EC76  F039         	call	_putch
  7260                           
  7261                           ;doprnt.c: 1232: val %= dpowers[c];
  7262  000978  C166  F10D         	movff	printf@val,___llmod@dividend
  7263  00097C  C167  F10E         	movff	printf@val+1,___llmod@dividend+1
  7264  000980  C168  F10F         	movff	printf@val+2,___llmod@dividend+2
  7265  000984  C169  F110         	movff	printf@val+3,___llmod@dividend+3
  7266  000988  0101               	movlb	1	; () banked
  7267  00098A  5173               	movf	printf@c& (0+255),w,b
  7268  00098C  0D04               	mullw	4
  7269  00098E  0ED5               	movlw	low _dpowers
  7270  000990  24F3               	addwf	prodl,w,c
  7271  000992  6EF6               	movwf	tblptrl,c
  7272  000994  0E7C               	movlw	high _dpowers
  7273  000996  20F4               	addwfc	prodh,w,c
  7274  000998  6EF7               	movwf	tblptrh,c
  7275  00099A                     	if	0	;There are less than 3 active tblptr bytes
  7276  00099A                     	endif
  7277  00099A  0009               	tblrd		*+
  7278  00099C  CFF5 F111          	movff	tablat,___llmod@divisor
  7279  0009A0  0009               	tblrd		*+
  7280  0009A2  CFF5 F112          	movff	tablat,___llmod@divisor+1
  7281  0009A6  0009               	tblrd		*+
  7282  0009A8  CFF5 F113          	movff	tablat,___llmod@divisor+2
  7283  0009AC  000A               	tblrd		*-
  7284  0009AE  CFF5 F114          	movff	tablat,___llmod@divisor+3
  7285  0009B2  EC38  F02F         	call	___llmod	;wreg free
  7286  0009B6  C10D  F166         	movff	?___llmod,printf@val
  7287  0009BA  C10E  F167         	movff	?___llmod+1,printf@val+1
  7288  0009BE  C10F  F168         	movff	?___llmod+2,printf@val+2
  7289  0009C2  C110  F169         	movff	?___llmod+3,printf@val+3
  7290  0009C6                     l10556:
  7291  0009C6  0101               	movlb	1	; () banked
  7292  0009C8  0773               	decf	printf@c& (0+255),f,b
  7293  0009CA  0101               	movlb	1	; () banked
  7294  0009CC  2973               	incf	printf@c& (0+255),w,b
  7295  0009CE  B4D8               	btfsc	status,2,c
  7296  0009D0  D008               	goto	l10562
  7297  0009D2  D78B               	goto	l10550
  7298  0009D4                     l10558:
  7299                           
  7300                           ; BSR set to: 1
  7301                           ;doprnt.c: 1236: (putch('0') );
  7302  0009D4  0E30               	movlw	48
  7303  0009D6  EC76  F039         	call	_putch
  7304                           
  7305                           ;doprnt.c: 1237: prec--;
  7306  0009DA  0101               	movlb	1	; () banked
  7307  0009DC  0771               	decf	printf@prec& (0+255),f,b
  7308  0009DE  A0D8               	btfss	status,0,c
  7309  0009E0  0772               	decf	(printf@prec+1)& (0+255),f,b
  7310  0009E2                     l10562:
  7311                           
  7312                           ; BSR set to: 1
  7313  0009E2  0101               	movlb	1	; () banked
  7314  0009E4  5171               	movf	printf@prec& (0+255),w,b
  7315  0009E6  0101               	movlb	1	; () banked
  7316  0009E8  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  7317  0009EA  B4D8               	btfsc	status,2,c
  7318  0009EC  D173               	goto	l10642
  7319  0009EE  D7F2               	goto	l10558
  7320  0009F0                     l1002:
  7321                           
  7322                           ; BSR set to: 1
  7323                           ;doprnt.c: 1246: }
  7324                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  7325  0009F0  0101               	movlb	1	; () banked
  7326  0009F2  BD60               	btfsc	printf@flag& (0+255),6,b
  7327  0009F4  D023               	goto	l10574
  7328                           
  7329                           ; BSR set to: 1
  7330                           ;doprnt.c: 1253: {
  7331                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7332  0009F6  C15E  FFD9         	movff	printf@ap,fsr2l
  7333  0009FA  C15F  FFDA         	movff	printf@ap+1,fsr2h
  7334  0009FE  CFDE F166          	movff	postinc2,printf@val
  7335  000A02  CFDD F167          	movff	postdec2,printf@val+1
  7336  000A06  0101               	movlb	1	; () banked
  7337  000A08  0E00               	movlw	0
  7338  000A0A  BF67               	btfsc	(printf@val+1)& (0+255),7,b
  7339  000A0C  0EFF               	movlw	-1
  7340  000A0E  6F68               	movwf	(printf@val+2)& (0+255),b
  7341  000A10  6F69               	movwf	(printf@val+3)& (0+255),b
  7342                           
  7343                           ; BSR set to: 1
  7344  000A12  0E02               	movlw	2
  7345  000A14  0101               	movlb	1	; () banked
  7346  000A16  275E               	addwf	printf@ap& (0+255),f,b
  7347  000A18  0E00               	movlw	0
  7348  000A1A  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  7349                           
  7350                           ; BSR set to: 1
  7351                           ;doprnt.c: 1261: if((long)val < 0) {
  7352  000A1C  0101               	movlb	1	; () banked
  7353  000A1E  AF69               	btfss	(printf@val+3)& (0+255),7,b
  7354  000A20  D021               	goto	l10578
  7355                           
  7356                           ; BSR set to: 1
  7357                           ;doprnt.c: 1262: flag |= 0x03;
  7358  000A22  0E03               	movlw	3
  7359  000A24  0101               	movlb	1	; () banked
  7360  000A26  1360               	iorwf	printf@flag& (0+255),f,b
  7361                           
  7362                           ; BSR set to: 1
  7363                           ;doprnt.c: 1263: val = -val;
  7364  000A28  0101               	movlb	1	; () banked
  7365  000A2A  1F69               	comf	(printf@val+3)& (0+255),f,b
  7366  000A2C  1F68               	comf	(printf@val+2)& (0+255),f,b
  7367  000A2E  1F67               	comf	(printf@val+1)& (0+255),f,b
  7368  000A30  6D66               	negf	printf@val& (0+255),b
  7369  000A32  0E00               	movlw	0
  7370  000A34  2367               	addwfc	(printf@val+1)& (0+255),f,b
  7371  000A36  2368               	addwfc	(printf@val+2)& (0+255),f,b
  7372  000A38  2369               	addwfc	(printf@val+3)& (0+255),f,b
  7373                           
  7374                           ; BSR set to: 1
  7375                           ;doprnt.c: 1264: }
  7376                           ;doprnt.c: 1266: }
  7377  000A3A  D014               	goto	l10578
  7378  000A3C                     l10574:
  7379                           
  7380                           ; BSR set to: 1
  7381                           ;doprnt.c: 1268: else
  7382                           ;doprnt.c: 1273: {
  7383                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7384  000A3C  C15E  FFD9         	movff	printf@ap,fsr2l
  7385  000A40  C15F  FFDA         	movff	printf@ap+1,fsr2h
  7386  000A44  CFDE F151          	movff	postinc2,??_printf
  7387  000A48  CFDD F152          	movff	postdec2,??_printf+1
  7388  000A4C  C151  F166         	movff	??_printf,printf@val
  7389  000A50  C152  F167         	movff	??_printf+1,printf@val+1
  7390  000A54  0101               	movlb	1	; () banked
  7391  000A56  6B68               	clrf	(printf@val+2)& (0+255),b
  7392  000A58  6B69               	clrf	(printf@val+3)& (0+255),b
  7393                           
  7394                           ; BSR set to: 1
  7395  000A5A  0E02               	movlw	2
  7396  000A5C  0101               	movlb	1	; () banked
  7397  000A5E  275E               	addwf	printf@ap& (0+255),f,b
  7398  000A60  0E00               	movlw	0
  7399  000A62  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  7400  000A64                     l10578:
  7401                           
  7402                           ; BSR set to: 1
  7403                           ;doprnt.c: 1287: }
  7404                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7405  000A64  0101               	movlb	1	; () banked
  7406  000A66  5171               	movf	printf@prec& (0+255),w,b
  7407  000A68  0101               	movlb	1	; () banked
  7408  000A6A  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  7409  000A6C  A4D8               	btfss	status,2,c
  7410  000A6E  D00D               	goto	l10584
  7411                           
  7412                           ; BSR set to: 1
  7413  000A70  0101               	movlb	1	; () banked
  7414  000A72  5166               	movf	printf@val& (0+255),w,b
  7415  000A74  0101               	movlb	1	; () banked
  7416  000A76  1167               	iorwf	(printf@val+1)& (0+255),w,b
  7417  000A78  0101               	movlb	1	; () banked
  7418  000A7A  1168               	iorwf	(printf@val+2)& (0+255),w,b
  7419  000A7C  0101               	movlb	1	; () banked
  7420  000A7E  1169               	iorwf	(printf@val+3)& (0+255),w,b
  7421  000A80  A4D8               	btfss	status,2,c
  7422  000A82  D003               	goto	l10584
  7423                           
  7424                           ; BSR set to: 1
  7425                           ;doprnt.c: 1291: prec++;
  7426  000A84  0101               	movlb	1	; () banked
  7427  000A86  4B71               	infsnz	printf@prec& (0+255),f,b
  7428  000A88  2B72               	incf	(printf@prec+1)& (0+255),f,b
  7429  000A8A                     l10584:
  7430                           
  7431                           ; BSR set to: 1
  7432                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7433  000A8A  0E01               	movlw	1
  7434  000A8C  0101               	movlb	1	; () banked
  7435  000A8E  6F73               	movwf	printf@c& (0+255),b
  7436  000A90                     l10586:
  7437                           
  7438                           ; BSR set to: 1
  7439  000A90  0E0A               	movlw	10
  7440  000A92  0101               	movlb	1	; () banked
  7441  000A94  1973               	xorwf	printf@c& (0+255),w,b
  7442  000A96  B4D8               	btfsc	status,2,c
  7443  000A98  D01E               	goto	l10598
  7444                           
  7445                           ; BSR set to: 1
  7446                           ;doprnt.c: 1306: if(val < dpowers[c])
  7447                           
  7448                           ; BSR set to: 1
  7449                           
  7450                           ; BSR set to: 1
  7451  000A9A  0101               	movlb	1	; () banked
  7452  000A9C  5173               	movf	printf@c& (0+255),w,b
  7453  000A9E  0D04               	mullw	4
  7454  000AA0  0ED5               	movlw	low _dpowers
  7455  000AA2  24F3               	addwf	prodl,w,c
  7456  000AA4  6EF6               	movwf	tblptrl,c
  7457  000AA6  0E7C               	movlw	high _dpowers
  7458  000AA8  20F4               	addwfc	prodh,w,c
  7459  000AAA  6EF7               	movwf	tblptrh,c
  7460  000AAC                     	if	0	;There are less than 3 active tblptr bytes
  7461  000AAC                     	endif
  7462  000AAC  0009               	tblrd		*+
  7463  000AAE  50F5               	movf	tablat,w,c
  7464  000AB0  0101               	movlb	1	; () banked
  7465  000AB2  5D66               	subwf	printf@val& (0+255),w,b
  7466  000AB4  0009               	tblrd		*+
  7467  000AB6  50F5               	movf	tablat,w,c
  7468  000AB8  0101               	movlb	1	; () banked
  7469  000ABA  5967               	subwfb	(printf@val+1)& (0+255),w,b
  7470  000ABC  0009               	tblrd		*+
  7471  000ABE  50F5               	movf	tablat,w,c
  7472  000AC0  0101               	movlb	1	; () banked
  7473  000AC2  5968               	subwfb	(printf@val+2)& (0+255),w,b
  7474  000AC4  0009               	tblrd		*+
  7475  000AC6  50F5               	movf	tablat,w,c
  7476  000AC8  0101               	movlb	1	; () banked
  7477  000ACA  5969               	subwfb	(printf@val+3)& (0+255),w,b
  7478  000ACC  A0D8               	btfss	status,0,c
  7479  000ACE  D003               	goto	l10598
  7480                           
  7481                           ; BSR set to: 1
  7482                           
  7483                           ; BSR set to: 1
  7484                           
  7485                           ; BSR set to: 1
  7486                           ;doprnt.c: 1307: break;
  7487  000AD0  0101               	movlb	1	; () banked
  7488  000AD2  2B73               	incf	printf@c& (0+255),f,b
  7489  000AD4  D7DD               	goto	l10586
  7490  000AD6                     l10598:
  7491                           
  7492                           ; BSR set to: 1
  7493                           ;doprnt.c: 1339: if(c < prec)
  7494  000AD6  0E80               	movlw	128
  7495  000AD8  0101               	movlb	1	; () banked
  7496  000ADA  BF73               	btfsc	printf@c& (0+255),7,b
  7497  000ADC  0E7F               	movlw	127
  7498  000ADE  0101               	movlb	1	; () banked
  7499  000AE0  6F51               	movwf	??_printf& (0+255),b
  7500  000AE2  0101               	movlb	1	; () banked
  7501  000AE4  5171               	movf	printf@prec& (0+255),w,b
  7502  000AE6  0101               	movlb	1	; () banked
  7503  000AE8  5D73               	subwf	printf@c& (0+255),w,b
  7504  000AEA  0101               	movlb	1	; () banked
  7505  000AEC  5172               	movf	(printf@prec+1)& (0+255),w,b
  7506  000AEE  0A80               	xorlw	128
  7507  000AF0  0101               	movlb	1	; () banked
  7508  000AF2  5951               	subwfb	??_printf& (0+255),w,b
  7509  000AF4  B0D8               	btfsc	status,0,c
  7510  000AF6  D003               	goto	l10602
  7511                           
  7512                           ; BSR set to: 1
  7513                           ;doprnt.c: 1340: c = prec;
  7514  000AF8  C171  F173         	movff	printf@prec,printf@c
  7515  000AFC  D018               	goto	l10606
  7516  000AFE                     l10602:
  7517                           
  7518                           ; BSR set to: 1
  7519                           ;doprnt.c: 1341: else if(prec < c)
  7520  000AFE  0101               	movlb	1	; () banked
  7521  000B00  5172               	movf	(printf@prec+1)& (0+255),w,b
  7522  000B02  0A80               	xorlw	128
  7523  000B04  0101               	movlb	1	; () banked
  7524  000B06  6F51               	movwf	??_printf& (0+255),b
  7525  000B08  0101               	movlb	1	; () banked
  7526  000B0A  5173               	movf	printf@c& (0+255),w,b
  7527  000B0C  0101               	movlb	1	; () banked
  7528  000B0E  5D71               	subwf	printf@prec& (0+255),w,b
  7529  000B10  0E80               	movlw	128
  7530  000B12  0101               	movlb	1	; () banked
  7531  000B14  BF73               	btfsc	printf@c& (0+255),7,b
  7532  000B16  0E7F               	movlw	127
  7533  000B18  0101               	movlb	1	; () banked
  7534  000B1A  5951               	subwfb	??_printf& (0+255),w,b
  7535  000B1C  B0D8               	btfsc	status,0,c
  7536  000B1E  D007               	goto	l10606
  7537                           
  7538                           ; BSR set to: 1
  7539                           ;doprnt.c: 1342: prec = c;
  7540  000B20  0101               	movlb	1	; () banked
  7541  000B22  5173               	movf	printf@c& (0+255),w,b
  7542  000B24  0101               	movlb	1	; () banked
  7543  000B26  6F71               	movwf	printf@prec& (0+255),b
  7544  000B28  6B72               	clrf	(printf@prec+1)& (0+255),b
  7545  000B2A  BF71               	btfsc	printf@prec& (0+255),7,b
  7546  000B2C  0772               	decf	(printf@prec+1)& (0+255),f,b
  7547  000B2E                     l10606:
  7548                           
  7549                           ; BSR set to: 1
  7550                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7551  000B2E  0101               	movlb	1	; () banked
  7552  000B30  516C               	movf	printf@width& (0+255),w,b
  7553  000B32  0101               	movlb	1	; () banked
  7554  000B34  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7555  000B36  B4D8               	btfsc	status,2,c
  7556  000B38  D014               	goto	l10612
  7557                           
  7558                           ; BSR set to: 1
  7559  000B3A  0E03               	movlw	3
  7560  000B3C  0101               	movlb	1	; () banked
  7561  000B3E  1560               	andwf	printf@flag& (0+255),w,b
  7562  000B40  0101               	movlb	1	; () banked
  7563  000B42  6F51               	movwf	??_printf& (0+255),b
  7564  000B44  0E00               	movlw	0
  7565  000B46  0101               	movlb	1	; () banked
  7566  000B48  1561               	andwf	(printf@flag+1)& (0+255),w,b
  7567  000B4A  0101               	movlb	1	; () banked
  7568  000B4C  6F52               	movwf	(??_printf+1)& (0+255),b
  7569  000B4E  0101               	movlb	1	; () banked
  7570  000B50  5151               	movf	??_printf& (0+255),w,b
  7571  000B52  0101               	movlb	1	; () banked
  7572  000B54  1152               	iorwf	(??_printf+1)& (0+255),w,b
  7573  000B56  B4D8               	btfsc	status,2,c
  7574  000B58  D004               	goto	l10612
  7575                           
  7576                           ; BSR set to: 1
  7577                           ;doprnt.c: 1346: width--;
  7578  000B5A  0101               	movlb	1	; () banked
  7579  000B5C  076C               	decf	printf@width& (0+255),f,b
  7580  000B5E  A0D8               	btfss	status,0,c
  7581  000B60  076D               	decf	(printf@width+1)& (0+255),f,b
  7582  000B62                     l10612:
  7583                           
  7584                           ; BSR set to: 1
  7585                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7586  000B62  0101               	movlb	1	; () banked
  7587  000B64  AD61               	btfss	(printf@flag+1)& (0+255),6,b
  7588  000B66  D01E               	goto	l10620
  7589                           
  7590                           ; BSR set to: 1
  7591                           ;doprnt.c: 1349: if(width > prec)
  7592  000B68  0101               	movlb	1	; () banked
  7593  000B6A  516C               	movf	printf@width& (0+255),w,b
  7594  000B6C  0101               	movlb	1	; () banked
  7595  000B6E  5D71               	subwf	printf@prec& (0+255),w,b
  7596  000B70  0101               	movlb	1	; () banked
  7597  000B72  5172               	movf	(printf@prec+1)& (0+255),w,b
  7598  000B74  0A80               	xorlw	128
  7599  000B76  0101               	movlb	1	; () banked
  7600  000B78  6F51               	movwf	??_printf& (0+255),b
  7601  000B7A  0101               	movlb	1	; () banked
  7602  000B7C  516D               	movf	(printf@width+1)& (0+255),w,b
  7603  000B7E  0A80               	xorlw	128
  7604  000B80  0101               	movlb	1	; () banked
  7605  000B82  5951               	subwfb	??_printf& (0+255),w,b
  7606  000B84  B0D8               	btfsc	status,0,c
  7607  000B86  D009               	goto	l10618
  7608                           
  7609                           ; BSR set to: 1
  7610                           ;doprnt.c: 1350: width -= prec;
  7611  000B88  0101               	movlb	1	; () banked
  7612  000B8A  5171               	movf	printf@prec& (0+255),w,b
  7613  000B8C  0101               	movlb	1	; () banked
  7614  000B8E  5F6C               	subwf	printf@width& (0+255),f,b
  7615  000B90  0101               	movlb	1	; () banked
  7616  000B92  5172               	movf	(printf@prec+1)& (0+255),w,b
  7617  000B94  0101               	movlb	1	; () banked
  7618  000B96  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  7619  000B98  D005               	goto	l10620
  7620  000B9A                     l10618:
  7621                           
  7622                           ; BSR set to: 1
  7623                           ;doprnt.c: 1351: else
  7624                           ;doprnt.c: 1352: width = 0;
  7625  000B9A  0E00               	movlw	0
  7626  000B9C  0101               	movlb	1	; () banked
  7627  000B9E  6F6D               	movwf	(printf@width+1)& (0+255),b
  7628  000BA0  0E00               	movlw	0
  7629  000BA2  6F6C               	movwf	printf@width& (0+255),b
  7630  000BA4                     l10620:
  7631                           
  7632                           ; BSR set to: 1
  7633                           ;doprnt.c: 1353: }
  7634                           ;doprnt.c: 1381: if(width > c)
  7635  000BA4  0E80               	movlw	128
  7636  000BA6  0101               	movlb	1	; () banked
  7637  000BA8  BF73               	btfsc	printf@c& (0+255),7,b
  7638  000BAA  0E7F               	movlw	127
  7639  000BAC  0101               	movlb	1	; () banked
  7640  000BAE  6F51               	movwf	??_printf& (0+255),b
  7641  000BB0  0101               	movlb	1	; () banked
  7642  000BB2  516C               	movf	printf@width& (0+255),w,b
  7643  000BB4  0101               	movlb	1	; () banked
  7644  000BB6  5D73               	subwf	printf@c& (0+255),w,b
  7645  000BB8  0101               	movlb	1	; () banked
  7646  000BBA  516D               	movf	(printf@width+1)& (0+255),w,b
  7647  000BBC  0A80               	xorlw	128
  7648  000BBE  0101               	movlb	1	; () banked
  7649  000BC0  5951               	subwfb	??_printf& (0+255),w,b
  7650  000BC2  B0D8               	btfsc	status,0,c
  7651  000BC4  D00B               	goto	l10624
  7652                           
  7653                           ; BSR set to: 1
  7654                           ;doprnt.c: 1382: width -= c;
  7655  000BC6  0101               	movlb	1	; () banked
  7656  000BC8  5173               	movf	printf@c& (0+255),w,b
  7657  000BCA  0101               	movlb	1	; () banked
  7658  000BCC  5F6C               	subwf	printf@width& (0+255),f,b
  7659  000BCE  0E00               	movlw	0
  7660  000BD0  0101               	movlb	1	; () banked
  7661  000BD2  BF73               	btfsc	printf@c& (0+255),7,b
  7662  000BD4  0EFF               	movlw	255
  7663  000BD6  0101               	movlb	1	; () banked
  7664  000BD8  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  7665  000BDA  D005               	goto	l10626
  7666  000BDC                     l10624:
  7667                           
  7668                           ; BSR set to: 1
  7669                           ;doprnt.c: 1383: else
  7670                           ;doprnt.c: 1384: width = 0;
  7671  000BDC  0E00               	movlw	0
  7672  000BDE  0101               	movlb	1	; () banked
  7673  000BE0  6F6D               	movwf	(printf@width+1)& (0+255),b
  7674  000BE2  0E00               	movlw	0
  7675  000BE4  6F6C               	movwf	printf@width& (0+255),b
  7676  000BE6                     l10626:
  7677                           
  7678                           ; BSR set to: 1
  7679                           ;doprnt.c: 1422: {
  7680                           ;doprnt.c: 1424: if(width
  7681                           ;doprnt.c: 1428: )
  7682  000BE6  0101               	movlb	1	; () banked
  7683  000BE8  516C               	movf	printf@width& (0+255),w,b
  7684  000BEA  0101               	movlb	1	; () banked
  7685  000BEC  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7686  000BEE  B4D8               	btfsc	status,2,c
  7687  000BF0  D00D               	goto	l10632
  7688  000BF2                     l10628:
  7689                           
  7690                           ; BSR set to: 1
  7691                           ;doprnt.c: 1430: (putch(' ') );
  7692  000BF2  0E20               	movlw	32
  7693  000BF4  EC76  F039         	call	_putch
  7694                           
  7695                           ;doprnt.c: 1431: while(--width);
  7696  000BF8  0101               	movlb	1	; () banked
  7697  000BFA  076C               	decf	printf@width& (0+255),f,b
  7698  000BFC  A0D8               	btfss	status,0,c
  7699  000BFE  076D               	decf	(printf@width+1)& (0+255),f,b
  7700  000C00  0101               	movlb	1	; () banked
  7701  000C02  516C               	movf	printf@width& (0+255),w,b
  7702  000C04  0101               	movlb	1	; () banked
  7703  000C06  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7704  000C08  A4D8               	btfss	status,2,c
  7705  000C0A  D7F3               	goto	l10628
  7706  000C0C                     l10632:
  7707                           
  7708                           ; BSR set to: 1
  7709                           ;doprnt.c: 1438: if(flag & 0x03)
  7710  000C0C  0E03               	movlw	3
  7711  000C0E  0101               	movlb	1	; () banked
  7712  000C10  1560               	andwf	printf@flag& (0+255),w,b
  7713  000C12  0101               	movlb	1	; () banked
  7714  000C14  6F51               	movwf	??_printf& (0+255),b
  7715  000C16  0E00               	movlw	0
  7716  000C18  0101               	movlb	1	; () banked
  7717  000C1A  1561               	andwf	(printf@flag+1)& (0+255),w,b
  7718  000C1C  0101               	movlb	1	; () banked
  7719  000C1E  6F52               	movwf	(??_printf+1)& (0+255),b
  7720  000C20  0101               	movlb	1	; () banked
  7721  000C22  5151               	movf	??_printf& (0+255),w,b
  7722  000C24  0101               	movlb	1	; () banked
  7723  000C26  1152               	iorwf	(??_printf+1)& (0+255),w,b
  7724  000C28  B4D8               	btfsc	status,2,c
  7725  000C2A  D049               	goto	l10640
  7726                           
  7727                           ; BSR set to: 1
  7728                           ;doprnt.c: 1439: (putch('-') );
  7729  000C2C  0E2D               	movlw	45
  7730  000C2E  EC76  F039         	call	_putch
  7731                           
  7732                           ;doprnt.c: 1469: }
  7733                           ;doprnt.c: 1474: while(prec--) {
  7734  000C32  D045               	goto	l10640
  7735  000C34                     l10636:
  7736                           
  7737                           ;doprnt.c: 1478: {
  7738                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7739  000C34  C171  F151         	movff	printf@prec,??_printf
  7740  000C38  C172  F152         	movff	printf@prec+1,??_printf+1
  7741  000C3C  0101               	movlb	1	; () banked
  7742  000C3E  90D8               	bcf	status,0,c
  7743  000C40  3751               	rlcf	??_printf& (0+255),f,b
  7744  000C42  3752               	rlcf	(??_printf+1)& (0+255),f,b
  7745  000C44  0101               	movlb	1	; () banked
  7746  000C46  90D8               	bcf	status,0,c
  7747  000C48  3751               	rlcf	??_printf& (0+255),f,b
  7748  000C4A  3752               	rlcf	(??_printf+1)& (0+255),f,b
  7749  000C4C  0ED5               	movlw	low _dpowers
  7750  000C4E  0101               	movlb	1	; () banked
  7751  000C50  2551               	addwf	??_printf& (0+255),w,b
  7752  000C52  6EF6               	movwf	tblptrl,c
  7753  000C54  0E7C               	movlw	high _dpowers
  7754  000C56  2152               	addwfc	(??_printf+1)& (0+255),w,b
  7755  000C58  6EF7               	movwf	tblptrh,c
  7756  000C5A                     	if	0	;There are less than 3 active tblptr bytes
  7757  000C5A                     	endif
  7758  000C5A  0009               	tblrd		*+
  7759  000C5C  CFF5 F104          	movff	tablat,___lldiv@divisor
  7760  000C60  0009               	tblrd		*+
  7761  000C62  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  7762  000C66  0009               	tblrd		*+
  7763  000C68  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  7764  000C6C  000A               	tblrd		*-
  7765  000C6E  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  7766  000C72  C166  F100         	movff	printf@val,___lldiv@dividend
  7767  000C76  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  7768  000C7A  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  7769  000C7E  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  7770  000C82  EC87  F02C         	call	___lldiv	;wreg free
  7771  000C86  C100  F10D         	movff	?___lldiv,___llmod@dividend
  7772  000C8A  C101  F10E         	movff	?___lldiv+1,___llmod@dividend+1
  7773  000C8E  C102  F10F         	movff	?___lldiv+2,___llmod@dividend+2
  7774  000C92  C103  F110         	movff	?___lldiv+3,___llmod@dividend+3
  7775  000C96  0E0A               	movlw	10
  7776  000C98  0101               	movlb	1	; () banked
  7777  000C9A  6F11               	movwf	___llmod@divisor& (0+255),b
  7778  000C9C  0E00               	movlw	0
  7779  000C9E  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  7780  000CA0  0E00               	movlw	0
  7781  000CA2  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  7782  000CA4  0E00               	movlw	0
  7783  000CA6  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  7784  000CA8  EC38  F02F         	call	___llmod	;wreg free
  7785  000CAC  0101               	movlb	1	; () banked
  7786  000CAE  510D               	movf	?___llmod& (0+255),w,b
  7787  000CB0  0F30               	addlw	48
  7788  000CB2  0101               	movlb	1	; () banked
  7789  000CB4  6F73               	movwf	printf@c& (0+255),b
  7790                           
  7791                           ; BSR set to: 1
  7792                           ;doprnt.c: 1523: }
  7793                           ;doprnt.c: 1524: (putch(c) );
  7794  000CB6  0101               	movlb	1	; () banked
  7795  000CB8  5173               	movf	printf@c& (0+255),w,b
  7796  000CBA  EC76  F039         	call	_putch
  7797  000CBE                     l10640:
  7798  000CBE  0101               	movlb	1	; () banked
  7799  000CC0  0771               	decf	printf@prec& (0+255),f,b
  7800  000CC2  A0D8               	btfss	status,0,c
  7801  000CC4  0772               	decf	(printf@prec+1)& (0+255),f,b
  7802  000CC6  0101               	movlb	1	; () banked
  7803  000CC8  2971               	incf	printf@prec& (0+255),w,b
  7804  000CCA  E1B4               	bnz	l10636
  7805  000CCC  0101               	movlb	1	; () banked
  7806  000CCE  2972               	incf	(printf@prec+1)& (0+255),w,b
  7807  000CD0  A4D8               	btfss	status,2,c
  7808  000CD2  D7B0               	goto	l10636
  7809  000CD4                     l10642:
  7810  000CD4  C13F  FFF6         	movff	printf@f,tblptrl
  7811  000CD8  C140  FFF7         	movff	printf@f+1,tblptrh
  7812  000CDC  0101               	movlb	1	; () banked
  7813  000CDE  4B3F               	infsnz	printf@f& (0+255),f,b
  7814  000CE0  2B40               	incf	(printf@f+1)& (0+255),f,b
  7815  000CE2                     	if	0	;tblptru may be non-zero
  7816  000CE2                     	endif
  7817  000CE2                     	if	0	;tblptru may be non-zero
  7818  000CE2                     	endif
  7819  000CE2  0008               	tblrd		*
  7820  000CE4  CFF5 F173          	movff	tablat,printf@c
  7821  000CE8  0101               	movlb	1	; () banked
  7822  000CEA  5173               	movf	printf@c& (0+255),w,b
  7823  000CEC  B4D8               	btfsc	status,2,c
  7824  000CEE  0012               	return	
  7825  000CF0  EF69  F000         	goto	l10344
  7826  000CF4                     __end_of_printf:
  7827                           	opt stack 0
  7828                           tblptru	equ	0xFF8
  7829                           tblptrh	equ	0xFF7
  7830                           tblptrl	equ	0xFF6
  7831                           tablat	equ	0xFF5
  7832                           prodh	equ	0xFF4
  7833                           prodl	equ	0xFF3
  7834                           intcon	equ	0xFF2
  7835                           postinc0	equ	0xFEE
  7836                           wreg	equ	0xFE8
  7837                           postdec1	equ	0xFE5
  7838                           fsr1l	equ	0xFE1
  7839                           indf2	equ	0xFDF
  7840                           postinc2	equ	0xFDE
  7841                           postdec2	equ	0xFDD
  7842                           fsr2h	equ	0xFDA
  7843                           fsr2l	equ	0xFD9
  7844                           status	equ	0xFD8
  7845                           
  7846 ;; *************** function _scale *****************
  7847 ;; Defined at:
  7848 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  7849 ;; Parameters:    Size  Location     Type
  7850 ;;  scl             1    wreg     char 
  7851 ;; Auto vars:     Size  Location     Type
  7852 ;;  scl             1   41[BANK1 ] char 
  7853 ;; Return value:  Size  Location     Type
  7854 ;;                  3   35[BANK1 ] char 
  7855 ;; Registers used:
  7856 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7857 ;; Tracked objects:
  7858 ;;		On entry : 0/0
  7859 ;;		On exit  : 0/0
  7860 ;;		Unchanged: 0/0
  7861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7862 ;;      Params:         0       0       3       0       0       0       0
  7863 ;;      Locals:         0       0       4       0       0       0       0
  7864 ;;      Temps:          0       0       0       0       0       0       0
  7865 ;;      Totals:         0       0       7       0       0       0       0
  7866 ;;Total ram usage:        7 bytes
  7867 ;; Hardware stack levels used:    1
  7868 ;; Hardware stack levels required when called:   14
  7869 ;; This function calls:
  7870 ;;		___awdiv
  7871 ;;		___awmod
  7872 ;;		___ftmul
  7873 ;;		___wmul
  7874 ;; This function is called by:
  7875 ;;		_printf
  7876 ;; This function uses a non-reentrant model
  7877 ;;
  7878                           
  7879                           	psect	text24
  7880  000CF4                     __ptext24:
  7881                           	opt stack 0
  7882  000CF4                     _scale:
  7883                           	opt stack 13
  7884                           
  7885                           ; BSR set to: 1
  7886                           ;incstack = 0
  7887                           ;scale@scl stored from wreg
  7888  000CF4  0101               	movlb	1	; () banked
  7889  000CF6  6F29               	movwf	scale@scl& (0+255),b
  7890                           
  7891                           ;doprnt.c: 428: if(scl < 0) {
  7892  000CF8  0101               	movlb	1	; () banked
  7893  000CFA  AF29               	btfss	scale@scl& (0+255),7,b
  7894  000CFC  D12A               	goto	l10084
  7895                           
  7896                           ; BSR set to: 1
  7897                           ;doprnt.c: 429: scl = -scl;
  7898  000CFE  0101               	movlb	1	; () banked
  7899  000D00  6D29               	negf	scale@scl& (0+255),b
  7900                           
  7901                           ;doprnt.c: 430: if(scl>=110)
  7902  000D02  0101               	movlb	1	; () banked
  7903  000D04  5129               	movf	scale@scl& (0+255),w,b
  7904  000D06  0A80               	xorlw	128
  7905  000D08  0F12               	addlw	-238
  7906  000D0A  A0D8               	btfss	status,0,c
  7907  000D0C  D0AC               	goto	l10074
  7908                           
  7909                           ; BSR set to: 1
  7910                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7911  000D0E  0E00               	movlw	0
  7912  000D10  0101               	movlb	1	; () banked
  7913  000D12  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7914  000D14  0E03               	movlw	3
  7915  000D16  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7916  000D18  0E00               	movlw	0
  7917  000D1A  0101               	movlb	1	; () banked
  7918  000D1C  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7919  000D1E  0E0A               	movlw	10
  7920  000D20  6F08               	movwf	___awdiv@divisor& (0+255),b
  7921  000D22  0E00               	movlw	0
  7922  000D24  0101               	movlb	1	; () banked
  7923  000D26  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7924  000D28  0E64               	movlw	100
  7925  000D2A  6F02               	movwf	___awmod@divisor& (0+255),b
  7926  000D2C  0101               	movlb	1	; () banked
  7927  000D2E  5129               	movf	scale@scl& (0+255),w,b
  7928  000D30  0101               	movlb	1	; () banked
  7929  000D32  6F00               	movwf	___awmod@dividend& (0+255),b
  7930  000D34  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7931  000D36  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7932  000D38  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7933  000D3A  EC49  F02E         	call	___awmod	;wreg free
  7934  000D3E  C100  F106         	movff	?___awmod,___awdiv@dividend
  7935  000D42  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  7936  000D46  EC28  F02C         	call	___awdiv	;wreg free
  7937  000D4A  0E09               	movlw	9
  7938  000D4C  0101               	movlb	1	; () banked
  7939  000D4E  2506               	addwf	?___awdiv& (0+255),w,b
  7940  000D50  0101               	movlb	1	; () banked
  7941  000D52  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7942  000D54  0E00               	movlw	0
  7943  000D56  0101               	movlb	1	; () banked
  7944  000D58  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7945  000D5A  0101               	movlb	1	; () banked
  7946  000D5C  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7947  000D5E  ECD9  F037         	call	___wmul	;wreg free
  7948  000D62  0EFD               	movlw	low __npowers_
  7949  000D64  0101               	movlb	1	; () banked
  7950  000D66  250E               	addwf	?___wmul& (0+255),w,b
  7951  000D68  6EF6               	movwf	tblptrl,c
  7952  000D6A  0E7C               	movlw	high __npowers_
  7953  000D6C  0101               	movlb	1	; () banked
  7954  000D6E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7955  000D70  6EF7               	movwf	tblptrh,c
  7956  000D72                     	if	0	;There are less than 3 active tblptr bytes
  7957  000D72                     	endif
  7958  000D72  0009               	tblrd		*+
  7959  000D74  CFF5 F117          	movff	tablat,___ftmul@f2
  7960  000D78  0009               	tblrd		*+
  7961  000D7A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  7962  000D7E  000A               	tblrd		*-
  7963  000D80  CFF5 F119          	movff	tablat,___ftmul@f2+2
  7964  000D84  0E00               	movlw	0
  7965  000D86  0101               	movlb	1	; () banked
  7966  000D88  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7967  000D8A  0E64               	movlw	100
  7968  000D8C  6F08               	movwf	___awdiv@divisor& (0+255),b
  7969  000D8E  0101               	movlb	1	; () banked
  7970  000D90  5129               	movf	scale@scl& (0+255),w,b
  7971  000D92  0101               	movlb	1	; () banked
  7972  000D94  6F06               	movwf	___awdiv@dividend& (0+255),b
  7973  000D96  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  7974  000D98  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  7975  000D9A  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7976  000D9C  EC28  F02C         	call	___awdiv	;wreg free
  7977  000DA0  0E12               	movlw	18
  7978  000DA2  0101               	movlb	1	; () banked
  7979  000DA4  2506               	addwf	?___awdiv& (0+255),w,b
  7980  000DA6  0101               	movlb	1	; () banked
  7981  000DA8  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7982  000DAA  0E00               	movlw	0
  7983  000DAC  0101               	movlb	1	; () banked
  7984  000DAE  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7985  000DB0  0101               	movlb	1	; () banked
  7986  000DB2  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7987  000DB4  0E00               	movlw	0
  7988  000DB6  0101               	movlb	1	; () banked
  7989  000DB8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7990  000DBA  0E03               	movlw	3
  7991  000DBC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7992  000DBE  ECD9  F037         	call	___wmul	;wreg free
  7993  000DC2  0EFD               	movlw	low __npowers_
  7994  000DC4  0101               	movlb	1	; () banked
  7995  000DC6  250E               	addwf	?___wmul& (0+255),w,b
  7996  000DC8  6EF6               	movwf	tblptrl,c
  7997  000DCA  0E7C               	movlw	high __npowers_
  7998  000DCC  0101               	movlb	1	; () banked
  7999  000DCE  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8000  000DD0  6EF7               	movwf	tblptrh,c
  8001  000DD2                     	if	0	;There are less than 3 active tblptr bytes
  8002  000DD2                     	endif
  8003  000DD2  0009               	tblrd		*+
  8004  000DD4  CFF5 F114          	movff	tablat,___ftmul@f1
  8005  000DD8  0009               	tblrd		*+
  8006  000DDA  CFF5 F115          	movff	tablat,___ftmul@f1+1
  8007  000DDE  000A               	tblrd		*-
  8008  000DE0  CFF5 F116          	movff	tablat,___ftmul@f1+2
  8009  000DE4  EC1F  F01D         	call	___ftmul	;wreg free
  8010  000DE8  C114  F126         	movff	?___ftmul,_scale$3021
  8011  000DEC  C115  F127         	movff	?___ftmul+1,_scale$3021+1
  8012  000DF0  C116  F128         	movff	?___ftmul+2,_scale$3021+2
  8013                           
  8014                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8015  000DF4  C126  F114         	movff	_scale$3021,___ftmul@f1
  8016  000DF8  C127  F115         	movff	_scale$3021+1,___ftmul@f1+1
  8017  000DFC  C128  F116         	movff	_scale$3021+2,___ftmul@f1+2
  8018  000E00  0E00               	movlw	0
  8019  000E02  0101               	movlb	1	; () banked
  8020  000E04  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8021  000E06  0E03               	movlw	3
  8022  000E08  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8023  000E0A  0E00               	movlw	0
  8024  000E0C  0101               	movlb	1	; () banked
  8025  000E0E  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8026  000E10  0E0A               	movlw	10
  8027  000E12  6F02               	movwf	___awmod@divisor& (0+255),b
  8028  000E14  0101               	movlb	1	; () banked
  8029  000E16  5129               	movf	scale@scl& (0+255),w,b
  8030  000E18  0101               	movlb	1	; () banked
  8031  000E1A  6F00               	movwf	___awmod@dividend& (0+255),b
  8032  000E1C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8033  000E1E  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8034  000E20  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8035  000E22  EC49  F02E         	call	___awmod	;wreg free
  8036  000E26  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8037  000E2A  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8038  000E2E  ECD9  F037         	call	___wmul	;wreg free
  8039  000E32  0EFD               	movlw	low __npowers_
  8040  000E34  0101               	movlb	1	; () banked
  8041  000E36  250E               	addwf	?___wmul& (0+255),w,b
  8042  000E38  6EF6               	movwf	tblptrl,c
  8043  000E3A  0E7C               	movlw	high __npowers_
  8044  000E3C  0101               	movlb	1	; () banked
  8045  000E3E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8046  000E40  6EF7               	movwf	tblptrh,c
  8047  000E42                     	if	0	;There are less than 3 active tblptr bytes
  8048  000E42                     	endif
  8049  000E42  0009               	tblrd		*+
  8050  000E44  CFF5 F117          	movff	tablat,___ftmul@f2
  8051  000E48  0009               	tblrd		*+
  8052  000E4A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8053  000E4E  000A               	tblrd		*-
  8054  000E50  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8055  000E54  EC1F  F01D         	call	___ftmul	;wreg free
  8056  000E58  C114  F123         	movff	?___ftmul,?_scale
  8057  000E5C  C115  F124         	movff	?___ftmul+1,?_scale+1
  8058  000E60  C116  F125         	movff	?___ftmul+2,?_scale+2
  8059  000E64  0012               	return	
  8060  000E66                     l10074:
  8061                           
  8062                           ;doprnt.c: 432: else if(scl > 10)
  8063  000E66  0101               	movlb	1	; () banked
  8064  000E68  5129               	movf	scale@scl& (0+255),w,b
  8065  000E6A  0A80               	xorlw	128
  8066  000E6C  0F75               	addlw	-139
  8067  000E6E  A0D8               	btfss	status,0,c
  8068  000E70  D05D               	goto	l10080
  8069                           
  8070                           ; BSR set to: 1
  8071                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8072  000E72  0E00               	movlw	0
  8073  000E74  0101               	movlb	1	; () banked
  8074  000E76  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8075  000E78  0E0A               	movlw	10
  8076  000E7A  6F08               	movwf	___awdiv@divisor& (0+255),b
  8077  000E7C  0101               	movlb	1	; () banked
  8078  000E7E  5129               	movf	scale@scl& (0+255),w,b
  8079  000E80  0101               	movlb	1	; () banked
  8080  000E82  6F06               	movwf	___awdiv@dividend& (0+255),b
  8081  000E84  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  8082  000E86  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  8083  000E88  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8084  000E8A  EC28  F02C         	call	___awdiv	;wreg free
  8085  000E8E  0E09               	movlw	9
  8086  000E90  0101               	movlb	1	; () banked
  8087  000E92  2506               	addwf	?___awdiv& (0+255),w,b
  8088  000E94  0101               	movlb	1	; () banked
  8089  000E96  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8090  000E98  0E00               	movlw	0
  8091  000E9A  0101               	movlb	1	; () banked
  8092  000E9C  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8093  000E9E  0101               	movlb	1	; () banked
  8094  000EA0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8095  000EA2  0E00               	movlw	0
  8096  000EA4  0101               	movlb	1	; () banked
  8097  000EA6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8098  000EA8  0E03               	movlw	3
  8099  000EAA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8100  000EAC  ECD9  F037         	call	___wmul	;wreg free
  8101  000EB0  0EFD               	movlw	low __npowers_
  8102  000EB2  0101               	movlb	1	; () banked
  8103  000EB4  250E               	addwf	?___wmul& (0+255),w,b
  8104  000EB6  6EF6               	movwf	tblptrl,c
  8105  000EB8  0E7C               	movlw	high __npowers_
  8106  000EBA  0101               	movlb	1	; () banked
  8107  000EBC  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8108  000EBE  6EF7               	movwf	tblptrh,c
  8109  000EC0                     	if	0	;There are less than 3 active tblptr bytes
  8110  000EC0                     	endif
  8111  000EC0  0009               	tblrd		*+
  8112  000EC2  CFF5 F114          	movff	tablat,___ftmul@f1
  8113  000EC6  0009               	tblrd		*+
  8114  000EC8  CFF5 F115          	movff	tablat,___ftmul@f1+1
  8115  000ECC  000A               	tblrd		*-
  8116  000ECE  CFF5 F116          	movff	tablat,___ftmul@f1+2
  8117  000ED2  0E00               	movlw	0
  8118  000ED4  0101               	movlb	1	; () banked
  8119  000ED6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8120  000ED8  0E03               	movlw	3
  8121  000EDA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8122  000EDC  0E00               	movlw	0
  8123  000EDE  0101               	movlb	1	; () banked
  8124  000EE0  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8125  000EE2  0E0A               	movlw	10
  8126  000EE4  6F02               	movwf	___awmod@divisor& (0+255),b
  8127  000EE6  0101               	movlb	1	; () banked
  8128  000EE8  5129               	movf	scale@scl& (0+255),w,b
  8129  000EEA  0101               	movlb	1	; () banked
  8130  000EEC  6F00               	movwf	___awmod@dividend& (0+255),b
  8131  000EEE  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8132  000EF0  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8133  000EF2  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8134  000EF4  EC49  F02E         	call	___awmod	;wreg free
  8135  000EF8  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8136  000EFC  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8137  000F00  ECD9  F037         	call	___wmul	;wreg free
  8138  000F04  0EFD               	movlw	low __npowers_
  8139  000F06  0101               	movlb	1	; () banked
  8140  000F08  250E               	addwf	?___wmul& (0+255),w,b
  8141  000F0A  6EF6               	movwf	tblptrl,c
  8142  000F0C  0E7C               	movlw	high __npowers_
  8143  000F0E  0101               	movlb	1	; () banked
  8144  000F10  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8145  000F12  6EF7               	movwf	tblptrh,c
  8146  000F14                     	if	0	;There are less than 3 active tblptr bytes
  8147  000F14                     	endif
  8148  000F14  0009               	tblrd		*+
  8149  000F16  CFF5 F117          	movff	tablat,___ftmul@f2
  8150  000F1A  0009               	tblrd		*+
  8151  000F1C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8152  000F20  000A               	tblrd		*-
  8153  000F22  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8154  000F26  EC1F  F01D         	call	___ftmul	;wreg free
  8155  000F2A  D796               	goto	L2
  8156  000F2C                     l10080:
  8157                           
  8158                           ;doprnt.c: 434: return _npowers_[scl];
  8159  000F2C  0101               	movlb	1	; () banked
  8160  000F2E  5129               	movf	scale@scl& (0+255),w,b
  8161  000F30  0D03               	mullw	3
  8162  000F32  0EFD               	movlw	low __npowers_
  8163  000F34  24F3               	addwf	prodl,w,c
  8164  000F36  6EF6               	movwf	tblptrl,c
  8165  000F38  0E7C               	movlw	high __npowers_
  8166  000F3A  20F4               	addwfc	prodh,w,c
  8167  000F3C  6EF7               	movwf	tblptrh,c
  8168  000F3E                     	if	0	;There are less than 3 active tblptr bytes
  8169  000F3E                     	endif
  8170  000F3E  0009               	tblrd		*+
  8171  000F40  CFF5 F123          	movff	tablat,?_scale
  8172  000F44  0009               	tblrd		*+
  8173  000F46  CFF5 F124          	movff	tablat,?_scale+1
  8174  000F4A  000A               	tblrd		*-
  8175  000F4C  CFF5 F125          	movff	tablat,?_scale+2
  8176                           
  8177                           ; BSR set to: 1
  8178  000F50  0012               	return	
  8179  000F52                     l10084:
  8180                           
  8181                           ; BSR set to: 1
  8182                           ;doprnt.c: 435: }
  8183                           ;doprnt.c: 436: if(scl>=110)
  8184  000F52  0101               	movlb	1	; () banked
  8185  000F54  5129               	movf	scale@scl& (0+255),w,b
  8186  000F56  0A80               	xorlw	128
  8187  000F58  0F12               	addlw	-238
  8188  000F5A  A0D8               	btfss	status,0,c
  8189  000F5C  D0AC               	goto	l10092
  8190                           
  8191                           ; BSR set to: 1
  8192                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8193  000F5E  0E00               	movlw	0
  8194  000F60  0101               	movlb	1	; () banked
  8195  000F62  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8196  000F64  0E03               	movlw	3
  8197  000F66  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8198  000F68  0E00               	movlw	0
  8199  000F6A  0101               	movlb	1	; () banked
  8200  000F6C  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8201  000F6E  0E0A               	movlw	10
  8202  000F70  6F08               	movwf	___awdiv@divisor& (0+255),b
  8203  000F72  0E00               	movlw	0
  8204  000F74  0101               	movlb	1	; () banked
  8205  000F76  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8206  000F78  0E64               	movlw	100
  8207  000F7A  6F02               	movwf	___awmod@divisor& (0+255),b
  8208  000F7C  0101               	movlb	1	; () banked
  8209  000F7E  5129               	movf	scale@scl& (0+255),w,b
  8210  000F80  0101               	movlb	1	; () banked
  8211  000F82  6F00               	movwf	___awmod@dividend& (0+255),b
  8212  000F84  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8213  000F86  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8214  000F88  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8215  000F8A  EC49  F02E         	call	___awmod	;wreg free
  8216  000F8E  C100  F106         	movff	?___awmod,___awdiv@dividend
  8217  000F92  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  8218  000F96  EC28  F02C         	call	___awdiv	;wreg free
  8219  000F9A  0E09               	movlw	9
  8220  000F9C  0101               	movlb	1	; () banked
  8221  000F9E  2506               	addwf	?___awdiv& (0+255),w,b
  8222  000FA0  0101               	movlb	1	; () banked
  8223  000FA2  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8224  000FA4  0E00               	movlw	0
  8225  000FA6  0101               	movlb	1	; () banked
  8226  000FA8  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8227  000FAA  0101               	movlb	1	; () banked
  8228  000FAC  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8229  000FAE  ECD9  F037         	call	___wmul	;wreg free
  8230  000FB2  0E24               	movlw	low __powers_
  8231  000FB4  0101               	movlb	1	; () banked
  8232  000FB6  250E               	addwf	?___wmul& (0+255),w,b
  8233  000FB8  6EF6               	movwf	tblptrl,c
  8234  000FBA  0E7D               	movlw	high __powers_
  8235  000FBC  0101               	movlb	1	; () banked
  8236  000FBE  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8237  000FC0  6EF7               	movwf	tblptrh,c
  8238  000FC2                     	if	0	;There are less than 3 active tblptr bytes
  8239  000FC2                     	endif
  8240  000FC2  0009               	tblrd		*+
  8241  000FC4  CFF5 F117          	movff	tablat,___ftmul@f2
  8242  000FC8  0009               	tblrd		*+
  8243  000FCA  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8244  000FCE  000A               	tblrd		*-
  8245  000FD0  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8246  000FD4  0E00               	movlw	0
  8247  000FD6  0101               	movlb	1	; () banked
  8248  000FD8  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8249  000FDA  0E64               	movlw	100
  8250  000FDC  6F08               	movwf	___awdiv@divisor& (0+255),b
  8251  000FDE  0101               	movlb	1	; () banked
  8252  000FE0  5129               	movf	scale@scl& (0+255),w,b
  8253  000FE2  0101               	movlb	1	; () banked
  8254  000FE4  6F06               	movwf	___awdiv@dividend& (0+255),b
  8255  000FE6  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  8256  000FE8  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  8257  000FEA  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8258  000FEC  EC28  F02C         	call	___awdiv	;wreg free
  8259  000FF0  0E12               	movlw	18
  8260  000FF2  0101               	movlb	1	; () banked
  8261  000FF4  2506               	addwf	?___awdiv& (0+255),w,b
  8262  000FF6  0101               	movlb	1	; () banked
  8263  000FF8  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8264  000FFA  0E00               	movlw	0
  8265  000FFC  0101               	movlb	1	; () banked
  8266  000FFE  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8267  001000  0101               	movlb	1	; () banked
  8268  001002  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8269  001004  0E00               	movlw	0
  8270  001006  0101               	movlb	1	; () banked
  8271  001008  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8272  00100A  0E03               	movlw	3
  8273  00100C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8274  00100E  ECD9  F037         	call	___wmul	;wreg free
  8275  001012  0E24               	movlw	low __powers_
  8276  001014  0101               	movlb	1	; () banked
  8277  001016  250E               	addwf	?___wmul& (0+255),w,b
  8278  001018  6EF6               	movwf	tblptrl,c
  8279  00101A  0E7D               	movlw	high __powers_
  8280  00101C  0101               	movlb	1	; () banked
  8281  00101E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8282  001020  6EF7               	movwf	tblptrh,c
  8283  001022                     	if	0	;There are less than 3 active tblptr bytes
  8284  001022                     	endif
  8285  001022  0009               	tblrd		*+
  8286  001024  CFF5 F114          	movff	tablat,___ftmul@f1
  8287  001028  0009               	tblrd		*+
  8288  00102A  CFF5 F115          	movff	tablat,___ftmul@f1+1
  8289  00102E  000A               	tblrd		*-
  8290  001030  CFF5 F116          	movff	tablat,___ftmul@f1+2
  8291  001034  EC1F  F01D         	call	___ftmul	;wreg free
  8292  001038  C114  F126         	movff	?___ftmul,_scale$3021
  8293  00103C  C115  F127         	movff	?___ftmul+1,_scale$3021+1
  8294  001040  C116  F128         	movff	?___ftmul+2,_scale$3021+2
  8295                           
  8296                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8297  001044  C126  F114         	movff	_scale$3021,___ftmul@f1
  8298  001048  C127  F115         	movff	_scale$3021+1,___ftmul@f1+1
  8299  00104C  C128  F116         	movff	_scale$3021+2,___ftmul@f1+2
  8300  001050  0E00               	movlw	0
  8301  001052  0101               	movlb	1	; () banked
  8302  001054  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8303  001056  0E03               	movlw	3
  8304  001058  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8305  00105A  0E00               	movlw	0
  8306  00105C  0101               	movlb	1	; () banked
  8307  00105E  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8308  001060  0E0A               	movlw	10
  8309  001062  6F02               	movwf	___awmod@divisor& (0+255),b
  8310  001064  0101               	movlb	1	; () banked
  8311  001066  5129               	movf	scale@scl& (0+255),w,b
  8312  001068  0101               	movlb	1	; () banked
  8313  00106A  6F00               	movwf	___awmod@dividend& (0+255),b
  8314  00106C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8315  00106E  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8316  001070  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8317  001072  EC49  F02E         	call	___awmod	;wreg free
  8318  001076  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8319  00107A  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8320  00107E  ECD9  F037         	call	___wmul	;wreg free
  8321  001082  0E24               	movlw	low __powers_
  8322  001084  0101               	movlb	1	; () banked
  8323  001086  250E               	addwf	?___wmul& (0+255),w,b
  8324  001088  6EF6               	movwf	tblptrl,c
  8325  00108A  0E7D               	movlw	high __powers_
  8326  00108C  0101               	movlb	1	; () banked
  8327  00108E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8328  001090  6EF7               	movwf	tblptrh,c
  8329  001092                     	if	0	;There are less than 3 active tblptr bytes
  8330  001092                     	endif
  8331  001092  0009               	tblrd		*+
  8332  001094  CFF5 F117          	movff	tablat,___ftmul@f2
  8333  001098  0009               	tblrd		*+
  8334  00109A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8335  00109E  000A               	tblrd		*-
  8336  0010A0  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8337  0010A4  EC1F  F01D         	call	___ftmul	;wreg free
  8338  0010A8  C114  F123         	movff	?___ftmul,?_scale
  8339  0010AC  C115  F124         	movff	?___ftmul+1,?_scale+1
  8340  0010B0  C116  F125         	movff	?___ftmul+2,?_scale+2
  8341  0010B4  0012               	return	
  8342  0010B6                     l10092:
  8343                           
  8344                           ;doprnt.c: 438: else if(scl > 10)
  8345  0010B6  0101               	movlb	1	; () banked
  8346  0010B8  5129               	movf	scale@scl& (0+255),w,b
  8347  0010BA  0A80               	xorlw	128
  8348  0010BC  0F75               	addlw	-139
  8349  0010BE  A0D8               	btfss	status,0,c
  8350  0010C0  D05D               	goto	l10098
  8351                           
  8352                           ; BSR set to: 1
  8353                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8354  0010C2  0E00               	movlw	0
  8355  0010C4  0101               	movlb	1	; () banked
  8356  0010C6  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8357  0010C8  0E0A               	movlw	10
  8358  0010CA  6F08               	movwf	___awdiv@divisor& (0+255),b
  8359  0010CC  0101               	movlb	1	; () banked
  8360  0010CE  5129               	movf	scale@scl& (0+255),w,b
  8361  0010D0  0101               	movlb	1	; () banked
  8362  0010D2  6F06               	movwf	___awdiv@dividend& (0+255),b
  8363  0010D4  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  8364  0010D6  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  8365  0010D8  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8366  0010DA  EC28  F02C         	call	___awdiv	;wreg free
  8367  0010DE  0E09               	movlw	9
  8368  0010E0  0101               	movlb	1	; () banked
  8369  0010E2  2506               	addwf	?___awdiv& (0+255),w,b
  8370  0010E4  0101               	movlb	1	; () banked
  8371  0010E6  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8372  0010E8  0E00               	movlw	0
  8373  0010EA  0101               	movlb	1	; () banked
  8374  0010EC  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8375  0010EE  0101               	movlb	1	; () banked
  8376  0010F0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8377  0010F2  0E00               	movlw	0
  8378  0010F4  0101               	movlb	1	; () banked
  8379  0010F6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8380  0010F8  0E03               	movlw	3
  8381  0010FA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8382  0010FC  ECD9  F037         	call	___wmul	;wreg free
  8383  001100  0E24               	movlw	low __powers_
  8384  001102  0101               	movlb	1	; () banked
  8385  001104  250E               	addwf	?___wmul& (0+255),w,b
  8386  001106  6EF6               	movwf	tblptrl,c
  8387  001108  0E7D               	movlw	high __powers_
  8388  00110A  0101               	movlb	1	; () banked
  8389  00110C  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8390  00110E  6EF7               	movwf	tblptrh,c
  8391  001110                     	if	0	;There are less than 3 active tblptr bytes
  8392  001110                     	endif
  8393  001110  0009               	tblrd		*+
  8394  001112  CFF5 F114          	movff	tablat,___ftmul@f1
  8395  001116  0009               	tblrd		*+
  8396  001118  CFF5 F115          	movff	tablat,___ftmul@f1+1
  8397  00111C  000A               	tblrd		*-
  8398  00111E  CFF5 F116          	movff	tablat,___ftmul@f1+2
  8399  001122  0E00               	movlw	0
  8400  001124  0101               	movlb	1	; () banked
  8401  001126  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8402  001128  0E03               	movlw	3
  8403  00112A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8404  00112C  0E00               	movlw	0
  8405  00112E  0101               	movlb	1	; () banked
  8406  001130  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8407  001132  0E0A               	movlw	10
  8408  001134  6F02               	movwf	___awmod@divisor& (0+255),b
  8409  001136  0101               	movlb	1	; () banked
  8410  001138  5129               	movf	scale@scl& (0+255),w,b
  8411  00113A  0101               	movlb	1	; () banked
  8412  00113C  6F00               	movwf	___awmod@dividend& (0+255),b
  8413  00113E  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8414  001140  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8415  001142  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8416  001144  EC49  F02E         	call	___awmod	;wreg free
  8417  001148  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8418  00114C  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8419  001150  ECD9  F037         	call	___wmul	;wreg free
  8420  001154  0E24               	movlw	low __powers_
  8421  001156  0101               	movlb	1	; () banked
  8422  001158  250E               	addwf	?___wmul& (0+255),w,b
  8423  00115A  6EF6               	movwf	tblptrl,c
  8424  00115C  0E7D               	movlw	high __powers_
  8425  00115E  0101               	movlb	1	; () banked
  8426  001160  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8427  001162  6EF7               	movwf	tblptrh,c
  8428  001164                     	if	0	;There are less than 3 active tblptr bytes
  8429  001164                     	endif
  8430  001164  0009               	tblrd		*+
  8431  001166  CFF5 F117          	movff	tablat,___ftmul@f2
  8432  00116A  0009               	tblrd		*+
  8433  00116C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8434  001170  000A               	tblrd		*-
  8435  001172  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8436  001176  EC1F  F01D         	call	___ftmul	;wreg free
  8437  00117A  D796               	goto	L3
  8438  00117C                     l10098:
  8439                           
  8440                           ;doprnt.c: 440: return _powers_[scl];
  8441  00117C  0101               	movlb	1	; () banked
  8442  00117E  5129               	movf	scale@scl& (0+255),w,b
  8443  001180  0D03               	mullw	3
  8444  001182  0E24               	movlw	low __powers_
  8445  001184  24F3               	addwf	prodl,w,c
  8446  001186  6EF6               	movwf	tblptrl,c
  8447  001188  0E7D               	movlw	high __powers_
  8448  00118A  20F4               	addwfc	prodh,w,c
  8449  00118C  6EF7               	movwf	tblptrh,c
  8450  00118E                     	if	0	;There are less than 3 active tblptr bytes
  8451  00118E                     	endif
  8452  00118E  0009               	tblrd		*+
  8453  001190  CFF5 F123          	movff	tablat,?_scale
  8454  001194  0009               	tblrd		*+
  8455  001196  CFF5 F124          	movff	tablat,?_scale+1
  8456  00119A  000A               	tblrd		*-
  8457  00119C  CFF5 F125          	movff	tablat,?_scale+2
  8458  0011A0  0012               	return	
  8459  0011A2                     __end_of_scale:
  8460                           	opt stack 0
  8461                           tblptru	equ	0xFF8
  8462                           tblptrh	equ	0xFF7
  8463                           tblptrl	equ	0xFF6
  8464                           tablat	equ	0xFF5
  8465                           prodh	equ	0xFF4
  8466                           prodl	equ	0xFF3
  8467                           intcon	equ	0xFF2
  8468                           postinc0	equ	0xFEE
  8469                           wreg	equ	0xFE8
  8470                           postdec1	equ	0xFE5
  8471                           fsr1l	equ	0xFE1
  8472                           indf2	equ	0xFDF
  8473                           postinc2	equ	0xFDE
  8474                           postdec2	equ	0xFDD
  8475                           fsr2h	equ	0xFDA
  8476                           fsr2l	equ	0xFD9
  8477                           status	equ	0xFD8
  8478                           
  8479 ;; *************** function _putch *****************
  8480 ;; Defined at:
  8481 ;;		line 64 in file "source/IOConfig.h"
  8482 ;; Parameters:    Size  Location     Type
  8483 ;;  val             1    wreg     unsigned char 
  8484 ;; Auto vars:     Size  Location     Type
  8485 ;;  val             1   13[BANK1 ] unsigned char 
  8486 ;; Return value:  Size  Location     Type
  8487 ;;                  1    wreg      void 
  8488 ;; Registers used:
  8489 ;;		wreg, status,2, status,0, cstack
  8490 ;; Tracked objects:
  8491 ;;		On entry : 0/0
  8492 ;;		On exit  : 0/0
  8493 ;;		Unchanged: 0/0
  8494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8495 ;;      Params:         0       0       0       0       0       0       0
  8496 ;;      Locals:         0       0       1       0       0       0       0
  8497 ;;      Temps:          0       0       0       0       0       0       0
  8498 ;;      Totals:         0       0       1       0       0       0       0
  8499 ;;Total ram usage:        1 bytes
  8500 ;; Hardware stack levels used:    1
  8501 ;; Hardware stack levels required when called:   17
  8502 ;; This function calls:
  8503 ;;		_lcd_putc
  8504 ;;		_putchUART
  8505 ;; This function is called by:
  8506 ;;		_printf
  8507 ;;		_send_float
  8508 ;;		_send_int32
  8509 ;;		_send_int16
  8510 ;;		_send_float_vt
  8511 ;;		_send_int32_vt
  8512 ;;		_send_int16_vt
  8513 ;; This function uses a non-reentrant model
  8514 ;;
  8515                           
  8516                           	psect	text25
  8517  0072EC                     __ptext25:
  8518                           	opt stack 0
  8519  0072EC                     _putch:
  8520                           	opt stack 10
  8521                           
  8522                           ;incstack = 0
  8523                           ;putch@val stored from wreg
  8524  0072EC  0101               	movlb	1	; () banked
  8525  0072EE  6F0D               	movwf	putch@val& (0+255),b
  8526                           
  8527                           ;IOConfig.h: 65: lcd_putc(val);
  8528  0072F0  0101               	movlb	1	; () banked
  8529  0072F2  510D               	movf	putch@val& (0+255),w,b
  8530  0072F4  ECD7  F032         	call	_lcd_putc
  8531                           
  8532                           ;IOConfig.h: 66: putchUART(val);
  8533  0072F8  0101               	movlb	1	; () banked
  8534  0072FA  510D               	movf	putch@val& (0+255),w,b
  8535  0072FC  EC9D  F039         	call	_putchUART
  8536  007300  0012               	return		;funcret
  8537  007302                     __end_of_putch:
  8538                           	opt stack 0
  8539                           tblptru	equ	0xFF8
  8540                           tblptrh	equ	0xFF7
  8541                           tblptrl	equ	0xFF6
  8542                           tablat	equ	0xFF5
  8543                           prodh	equ	0xFF4
  8544                           prodl	equ	0xFF3
  8545                           intcon	equ	0xFF2
  8546                           postinc0	equ	0xFEE
  8547                           wreg	equ	0xFE8
  8548                           postdec1	equ	0xFE5
  8549                           fsr1l	equ	0xFE1
  8550                           indf2	equ	0xFDF
  8551                           postinc2	equ	0xFDE
  8552                           postdec2	equ	0xFDD
  8553                           fsr2h	equ	0xFDA
  8554                           fsr2l	equ	0xFD9
  8555                           status	equ	0xFD8
  8556                           
  8557 ;; *************** function _putchUART *****************
  8558 ;; Defined at:
  8559 ;;		line 59 in file "source/IOConfig.h"
  8560 ;; Parameters:    Size  Location     Type
  8561 ;;  val             1    wreg     unsigned char 
  8562 ;; Auto vars:     Size  Location     Type
  8563 ;;  val             1    0[BANK1 ] unsigned char 
  8564 ;; Return value:  Size  Location     Type
  8565 ;;                  1    wreg      void 
  8566 ;; Registers used:
  8567 ;;		wreg
  8568 ;; Tracked objects:
  8569 ;;		On entry : 0/0
  8570 ;;		On exit  : 0/0
  8571 ;;		Unchanged: 0/0
  8572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8573 ;;      Params:         0       0       0       0       0       0       0
  8574 ;;      Locals:         0       0       1       0       0       0       0
  8575 ;;      Temps:          0       0       0       0       0       0       0
  8576 ;;      Totals:         0       0       1       0       0       0       0
  8577 ;;Total ram usage:        1 bytes
  8578 ;; Hardware stack levels used:    1
  8579 ;; Hardware stack levels required when called:   12
  8580 ;; This function calls:
  8581 ;;		Nothing
  8582 ;; This function is called by:
  8583 ;;		_putch
  8584 ;; This function uses a non-reentrant model
  8585 ;;
  8586                           
  8587                           	psect	text26
  8588  00733A                     __ptext26:
  8589                           	opt stack 0
  8590  00733A                     _putchUART:
  8591                           	opt stack 14
  8592                           
  8593                           ;incstack = 0
  8594                           ;putchUART@val stored from wreg
  8595  00733A  0101               	movlb	1	; () banked
  8596  00733C  6F00               	movwf	putchUART@val& (0+255),b
  8597  00733E                     l222:
  8598  00733E  A2AC               	btfss	4012,1,c	;volatile
  8599  007340  D7FE               	goto	l222
  8600                           
  8601                           ;IOConfig.h: 61: TXREG1 = val;
  8602  007342  C100  FFAD         	movff	putchUART@val,4013	;volatile
  8603  007346  0012               	return		;funcret
  8604  007348                     __end_of_putchUART:
  8605                           	opt stack 0
  8606                           tblptru	equ	0xFF8
  8607                           tblptrh	equ	0xFF7
  8608                           tblptrl	equ	0xFF6
  8609                           tablat	equ	0xFF5
  8610                           prodh	equ	0xFF4
  8611                           prodl	equ	0xFF3
  8612                           intcon	equ	0xFF2
  8613                           postinc0	equ	0xFEE
  8614                           wreg	equ	0xFE8
  8615                           postdec1	equ	0xFE5
  8616                           fsr1l	equ	0xFE1
  8617                           indf2	equ	0xFDF
  8618                           postinc2	equ	0xFDE
  8619                           postdec2	equ	0xFDD
  8620                           fsr2h	equ	0xFDA
  8621                           fsr2l	equ	0xFD9
  8622                           status	equ	0xFD8
  8623                           
  8624 ;; *************** function _lcd_putc *****************
  8625 ;; Defined at:
  8626 ;;		line 212 in file "source/../../vclib_lcd.h"
  8627 ;; Parameters:    Size  Location     Type
  8628 ;;  cha             1    wreg     unsigned char 
  8629 ;; Auto vars:     Size  Location     Type
  8630 ;;  cha             1   12[BANK1 ] unsigned char 
  8631 ;; Return value:  Size  Location     Type
  8632 ;;                  1    wreg      void 
  8633 ;; Registers used:
  8634 ;;		wreg, status,2, status,0, cstack
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8640 ;;      Params:         0       0       0       0       0       0       0
  8641 ;;      Locals:         0       0       1       0       0       0       0
  8642 ;;      Temps:          0       0       1       0       0       0       0
  8643 ;;      Totals:         0       0       2       0       0       0       0
  8644 ;;Total ram usage:        2 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; Hardware stack levels required when called:   16
  8647 ;; This function calls:
  8648 ;;		_lcd_gotoxy
  8649 ;;		_lcd_send_byte
  8650 ;; This function is called by:
  8651 ;;		_putch
  8652 ;;		_drawMenu
  8653 ;; This function uses a non-reentrant model
  8654 ;;
  8655                           
  8656                           	psect	text27
  8657  0065AE                     __ptext27:
  8658                           	opt stack 0
  8659  0065AE                     _lcd_putc:
  8660                           	opt stack 10
  8661                           
  8662                           ;incstack = 0
  8663                           ;lcd_putc@cha stored from wreg
  8664  0065AE  0101               	movlb	1	; () banked
  8665  0065B0  6F0C               	movwf	lcd_putc@cha& (0+255),b
  8666                           
  8667                           ;vclib_lcd.h: 213: switch (cha) {
  8668  0065B2  D02B               	goto	l9766
  8669  0065B4                     l9752:
  8670  0065B4  0E01               	movlw	1
  8671  0065B6  0101               	movlb	1	; () banked
  8672  0065B8  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  8673  0065BA  0E01               	movlw	1
  8674  0065BC  EC26  F038         	call	_lcd_gotoxy
  8675                           
  8676                           ;vclib_lcd.h: 215: break;
  8677  0065C0  0012               	return	
  8678  0065C2                     l9754:
  8679  0065C2  0E01               	movlw	1
  8680  0065C4  0101               	movlb	1	; () banked
  8681  0065C6  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8682  0065C8  0E00               	movlw	0
  8683  0065CA  EC7E  F037         	call	_lcd_send_byte
  8684                           
  8685                           ;vclib_lcd.h: 218: _delay((unsigned long)((2)*(16000000/4000.0)));
  8686  0065CE  0E0B               	movlw	11
  8687  0065D0  0101               	movlb	1	; () banked
  8688  0065D2  6F0B               	movwf	??_lcd_putc& (0+255),b
  8689  0065D4  0E62               	movlw	98
  8690  0065D6                     u18027:
  8691  0065D6  2EE8               	decfsz	wreg,f,c
  8692  0065D8  D7FE               	goto	u18027
  8693  0065DA  2F0B               	decfsz	??_lcd_putc& (0+255),f,b
  8694  0065DC  D7FC               	goto	u18027
  8695  0065DE  D000               	nop2	
  8696                           
  8697                           ;vclib_lcd.h: 223: break;
  8698  0065E0  0012               	return	
  8699  0065E2                     l9758:
  8700  0065E2  0E02               	movlw	2
  8701  0065E4  0101               	movlb	1	; () banked
  8702  0065E6  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  8703  0065E8  0E01               	movlw	1
  8704  0065EA  EC26  F038         	call	_lcd_gotoxy
  8705                           
  8706                           ;vclib_lcd.h: 236: break;
  8707  0065EE  0012               	return	
  8708  0065F0                     l9760:
  8709  0065F0  0E10               	movlw	16
  8710  0065F2  0101               	movlb	1	; () banked
  8711  0065F4  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8712  0065F6  0E00               	movlw	0
  8713  0065F8  EC7E  F037         	call	_lcd_send_byte
  8714                           
  8715                           ;vclib_lcd.h: 240: break;
  8716  0065FC  0012               	return	
  8717  0065FE                     l9762:
  8718  0065FE  C10C  F105         	movff	lcd_putc@cha,lcd_send_byte@n
  8719  006602  0E01               	movlw	1
  8720  006604  EC7E  F037         	call	_lcd_send_byte
  8721                           
  8722                           ;vclib_lcd.h: 253: }
  8723                           
  8724                           ;vclib_lcd.h: 251: break;
  8725  006608  0012               	return	
  8726  00660A                     l9766:
  8727  00660A  0101               	movlb	1	; () banked
  8728  00660C  510C               	movf	lcd_putc@cha& (0+255),w,b
  8729                           
  8730                           ; Switch size 1, requested type "space"
  8731                           ; Number of cases is 4, Range of values is 7 to 12
  8732                           ; switch strategies available:
  8733                           ; Name         Instructions Cycles
  8734                           ; simple_byte           13     7 (average)
  8735                           ;	Chosen strategy is simple_byte
  8736  00660E  0A07               	xorlw	7	; case 7
  8737  006610  B4D8               	btfsc	status,2,c
  8738  006612  D7D0               	goto	l9752
  8739  006614  0A0F               	xorlw	15	; case 8
  8740  006616  B4D8               	btfsc	status,2,c
  8741  006618  D7EB               	goto	l9760
  8742  00661A  0A02               	xorlw	2	; case 10
  8743  00661C  B4D8               	btfsc	status,2,c
  8744  00661E  D7E1               	goto	l9758
  8745  006620  0A06               	xorlw	6	; case 12
  8746  006622  B4D8               	btfsc	status,2,c
  8747  006624  D7CE               	goto	l9754
  8748  006626  D7EB               	goto	l9762
  8749  006628                     __end_of_lcd_putc:
  8750                           	opt stack 0
  8751                           tblptru	equ	0xFF8
  8752                           tblptrh	equ	0xFF7
  8753                           tblptrl	equ	0xFF6
  8754                           tablat	equ	0xFF5
  8755                           prodh	equ	0xFF4
  8756                           prodl	equ	0xFF3
  8757                           intcon	equ	0xFF2
  8758                           postinc0	equ	0xFEE
  8759                           wreg	equ	0xFE8
  8760                           postdec1	equ	0xFE5
  8761                           fsr1l	equ	0xFE1
  8762                           indf2	equ	0xFDF
  8763                           postinc2	equ	0xFDE
  8764                           postdec2	equ	0xFDD
  8765                           fsr2h	equ	0xFDA
  8766                           fsr2l	equ	0xFD9
  8767                           status	equ	0xFD8
  8768                           
  8769 ;; *************** function _lcd_gotoxy *****************
  8770 ;; Defined at:
  8771 ;;		line 198 in file "source/../../vclib_lcd.h"
  8772 ;; Parameters:    Size  Location     Type
  8773 ;;  pos             1    wreg     unsigned char 
  8774 ;;  fila            1    8[BANK1 ] unsigned char 
  8775 ;; Auto vars:     Size  Location     Type
  8776 ;;  pos             1    9[BANK1 ] unsigned char 
  8777 ;;  address         1   10[BANK1 ] unsigned char 
  8778 ;; Return value:  Size  Location     Type
  8779 ;;                  1    wreg      void 
  8780 ;; Registers used:
  8781 ;;		wreg, status,2, status,0, cstack
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8787 ;;      Params:         0       0       1       0       0       0       0
  8788 ;;      Locals:         0       0       2       0       0       0       0
  8789 ;;      Temps:          0       0       0       0       0       0       0
  8790 ;;      Totals:         0       0       3       0       0       0       0
  8791 ;;Total ram usage:        3 bytes
  8792 ;; Hardware stack levels used:    1
  8793 ;; Hardware stack levels required when called:   15
  8794 ;; This function calls:
  8795 ;;		_lcd_send_byte
  8796 ;; This function is called by:
  8797 ;;		_lcd_putc
  8798 ;;		_drawValEditor
  8799 ;;		_drawMenu
  8800 ;;		_drawChanVal
  8801 ;;		_drawPass1Lin
  8802 ;;		_drawAdvON
  8803 ;;		_drawSNquest
  8804 ;;		_drawAutoCalibRM
  8805 ;;		_drawCutError
  8806 ;;		_drawReady2Cut
  8807 ;;		_drawCalibProc
  8808 ;;		_lcd_getc
  8809 ;; This function uses a non-reentrant model
  8810 ;;
  8811                           
  8812                           	psect	text28
  8813  00704C                     __ptext28:
  8814                           	opt stack 0
  8815  00704C                     _lcd_gotoxy:
  8816                           	opt stack 10
  8817                           
  8818                           ;incstack = 0
  8819                           ;lcd_gotoxy@pos stored from wreg
  8820  00704C  0101               	movlb	1	; () banked
  8821  00704E  6F09               	movwf	lcd_gotoxy@pos& (0+255),b
  8822                           
  8823                           ;vclib_lcd.h: 199: unsigned char address;
  8824                           ;vclib_lcd.h: 200: if (fila != 1)
  8825  007050  0101               	movlb	1	; () banked
  8826  007052  0508               	decf	lcd_gotoxy@fila& (0+255),w,b
  8827  007054  B4D8               	btfsc	status,2,c
  8828  007056  D002               	goto	l9708
  8829                           
  8830                           ; BSR set to: 1
  8831                           ;vclib_lcd.h: 201: address = 0x40;
  8832  007058  0E40               	movlw	64
  8833  00705A  D001               	goto	L4
  8834  00705C                     l9708:
  8835                           
  8836                           ; BSR set to: 1
  8837                           ;vclib_lcd.h: 202: else
  8838                           ;vclib_lcd.h: 203: address = 0;
  8839  00705C  0E00               	movlw	0
  8840  00705E                     L4:
  8841  00705E  0101               	movlb	1	; () banked
  8842  007060  6F0A               	movwf	lcd_gotoxy@address& (0+255),b
  8843                           
  8844                           ; BSR set to: 1
  8845                           ;vclib_lcd.h: 204: address += pos - 1;
  8846                           
  8847                           ; BSR set to: 1
  8848  007062  0101               	movlb	1	; () banked
  8849  007064  0509               	decf	lcd_gotoxy@pos& (0+255),w,b
  8850  007066  0101               	movlb	1	; () banked
  8851  007068  270A               	addwf	lcd_gotoxy@address& (0+255),f,b
  8852                           
  8853                           ; BSR set to: 1
  8854                           ;vclib_lcd.h: 205: lcd_send_byte(0, 0b10000000 | address);
  8855  00706A  0101               	movlb	1	; () banked
  8856  00706C  510A               	movf	lcd_gotoxy@address& (0+255),w,b
  8857  00706E  0980               	iorlw	128
  8858  007070  0101               	movlb	1	; () banked
  8859  007072  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8860  007074  0E00               	movlw	0
  8861  007076  EC7E  F037         	call	_lcd_send_byte
  8862  00707A  0012               	return		;funcret
  8863  00707C                     __end_of_lcd_gotoxy:
  8864                           	opt stack 0
  8865                           tblptru	equ	0xFF8
  8866                           tblptrh	equ	0xFF7
  8867                           tblptrl	equ	0xFF6
  8868                           tablat	equ	0xFF5
  8869                           prodh	equ	0xFF4
  8870                           prodl	equ	0xFF3
  8871                           intcon	equ	0xFF2
  8872                           postinc0	equ	0xFEE
  8873                           wreg	equ	0xFE8
  8874                           postdec1	equ	0xFE5
  8875                           fsr1l	equ	0xFE1
  8876                           indf2	equ	0xFDF
  8877                           postinc2	equ	0xFDE
  8878                           postdec2	equ	0xFDD
  8879                           fsr2h	equ	0xFDA
  8880                           fsr2l	equ	0xFD9
  8881                           status	equ	0xFD8
  8882                           
  8883 ;; *************** function _lcd_send_byte *****************
  8884 ;; Defined at:
  8885 ;;		line 163 in file "source/../../vclib_lcd.h"
  8886 ;; Parameters:    Size  Location     Type
  8887 ;;  address         1    wreg     unsigned char 
  8888 ;;  n               1    5[BANK1 ] unsigned char 
  8889 ;; Auto vars:     Size  Location     Type
  8890 ;;  address         1    7[BANK1 ] unsigned char 
  8891 ;; Return value:  Size  Location     Type
  8892 ;;                  1    wreg      void 
  8893 ;; Registers used:
  8894 ;;		wreg, status,2, status,0, cstack
  8895 ;; Tracked objects:
  8896 ;;		On entry : 0/0
  8897 ;;		On exit  : 0/0
  8898 ;;		Unchanged: 0/0
  8899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8900 ;;      Params:         0       0       1       0       0       0       0
  8901 ;;      Locals:         0       0       1       0       0       0       0
  8902 ;;      Temps:          0       0       1       0       0       0       0
  8903 ;;      Totals:         0       0       3       0       0       0       0
  8904 ;;Total ram usage:        3 bytes
  8905 ;; Hardware stack levels used:    1
  8906 ;; Hardware stack levels required when called:   14
  8907 ;; This function calls:
  8908 ;;		_lcd_read_byte
  8909 ;;		_lcd_send_4bits
  8910 ;; This function is called by:
  8911 ;;		_lcd_init
  8912 ;;		_lcd_gotoxy
  8913 ;;		_lcd_putc
  8914 ;;		_lcd_set_cgram_char
  8915 ;;		_lcd_cursor_en
  8916 ;;		_lcd_clear
  8917 ;;		_lcd_shift_right
  8918 ;;		_lcd_shift_left
  8919 ;; This function uses a non-reentrant model
  8920 ;;
  8921                           
  8922                           	psect	text29
  8923  006EFC                     __ptext29:
  8924                           	opt stack 0
  8925  006EFC                     _lcd_send_byte:
  8926                           	opt stack 15
  8927                           
  8928                           ;incstack = 0
  8929                           ;lcd_send_byte@address stored from wreg
  8930  006EFC  0101               	movlb	1	; () banked
  8931  006EFE  6F07               	movwf	lcd_send_byte@address& (0+255),b
  8932                           
  8933                           ;vclib_lcd.h: 164: PORTBbits.RB1 = 0;
  8934  006F00  9281               	bcf	3969,1,c	;volatile
  8935  006F02                     l9700:
  8936  006F02  EC38  F037         	call	_lcd_read_byte	;wreg free
  8937  006F06  0101               	movlb	1	; () banked
  8938  006F08  6F06               	movwf	??_lcd_send_byte& (0+255),b
  8939  006F0A  0101               	movlb	1	; () banked
  8940  006F0C  BF06               	btfsc	??_lcd_send_byte& (0+255),7,b
  8941  006F0E  D7F9               	goto	l9700
  8942                           
  8943                           ; BSR set to: 1
  8944                           ;vclib_lcd.h: 166: PORTBbits.RB1 = address;
  8945  006F10  0101               	movlb	1	; () banked
  8946  006F12  B107               	btfsc	lcd_send_byte@address& (0+255),0,b
  8947  006F14  D002               	bra	u14185
  8948  006F16  9281               	bcf	3969,1,c	;volatile
  8949  006F18  D001               	bra	u14186
  8950  006F1A                     u14185:
  8951  006F1A  8281               	bsf	3969,1,c	;volatile
  8952  006F1C                     u14186:
  8953                           
  8954                           ;vclib_lcd.h: 167: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8955  006F1C  D000               	nop2		;2 cycle nop
  8956  006F1E  D000               	nop2		;2 cycle nop
  8957                           
  8958                           ;vclib_lcd.h: 168: PORTBbits.RB2 = 0;
  8959  006F20  9481               	bcf	3969,2,c	;volatile
  8960                           
  8961                           ;vclib_lcd.h: 169: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8962  006F22  D000               	nop2		;2 cycle nop
  8963  006F24  D000               	nop2		;2 cycle nop
  8964                           
  8965                           ;vclib_lcd.h: 170: PORTBbits.RB3 = 0;
  8966  006F26  9681               	bcf	3969,3,c	;volatile
  8967                           
  8968                           ;vclib_lcd.h: 171: lcd_send_4bits(n >> 4);
  8969  006F28  0101               	movlb	1	; () banked
  8970  006F2A  3905               	swapf	lcd_send_byte@n& (0+255),w,b
  8971  006F2C  0B0F               	andlw	15
  8972  006F2E  EC3C  F031         	call	_lcd_send_4bits
  8973                           
  8974                           ;vclib_lcd.h: 172: lcd_send_4bits(n & 0b00001111 );
  8975  006F32  0101               	movlb	1	; () banked
  8976  006F34  5105               	movf	lcd_send_byte@n& (0+255),w,b
  8977  006F36  0B0F               	andlw	15
  8978  006F38  EC3C  F031         	call	_lcd_send_4bits
  8979  006F3C  0012               	return		;funcret
  8980  006F3E                     __end_of_lcd_send_byte:
  8981                           	opt stack 0
  8982                           tblptru	equ	0xFF8
  8983                           tblptrh	equ	0xFF7
  8984                           tblptrl	equ	0xFF6
  8985                           tablat	equ	0xFF5
  8986                           prodh	equ	0xFF4
  8987                           prodl	equ	0xFF3
  8988                           intcon	equ	0xFF2
  8989                           postinc0	equ	0xFEE
  8990                           wreg	equ	0xFE8
  8991                           postdec1	equ	0xFE5
  8992                           fsr1l	equ	0xFE1
  8993                           indf2	equ	0xFDF
  8994                           postinc2	equ	0xFDE
  8995                           postdec2	equ	0xFDD
  8996                           fsr2h	equ	0xFDA
  8997                           fsr2l	equ	0xFD9
  8998                           status	equ	0xFD8
  8999                           
  9000 ;; *************** function _lcd_send_4bits *****************
  9001 ;; Defined at:
  9002 ;;		line 151 in file "source/../../vclib_lcd.h"
  9003 ;; Parameters:    Size  Location     Type
  9004 ;;  n               1    wreg     unsigned char 
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;  n               1    4[BANK1 ] unsigned char 
  9007 ;; Return value:  Size  Location     Type
  9008 ;;                  1    wreg      void 
  9009 ;; Registers used:
  9010 ;;		wreg, status,2, cstack
  9011 ;; Tracked objects:
  9012 ;;		On entry : 0/0
  9013 ;;		On exit  : 0/0
  9014 ;;		Unchanged: 0/0
  9015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9016 ;;      Params:         0       0       0       0       0       0       0
  9017 ;;      Locals:         0       0       5       0       0       0       0
  9018 ;;      Temps:          0       0       0       0       0       0       0
  9019 ;;      Totals:         0       0       5       0       0       0       0
  9020 ;;Total ram usage:        5 bytes
  9021 ;; Hardware stack levels used:    1
  9022 ;; Hardware stack levels required when called:   12
  9023 ;; This function calls:
  9024 ;;		Nothing
  9025 ;; This function is called by:
  9026 ;;		_lcd_send_byte
  9027 ;;		_lcd_init
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           	psect	text30
  9032  006278                     __ptext30:
  9033                           	opt stack 0
  9034  006278                     _lcd_send_4bits:
  9035                           	opt stack 16
  9036                           
  9037                           ;incstack = 0
  9038                           ;lcd_send_4bits@n stored from wreg
  9039  006278  0101               	movlb	1	; () banked
  9040  00627A  6F04               	movwf	lcd_send_4bits@n& (0+255),b
  9041                           
  9042                           ;vclib_lcd.h: 153: PORTBbits.RB4 = 0 || n & 1;
  9043  00627C  0E01               	movlw	1
  9044  00627E  0101               	movlb	1	; () banked
  9045  006280  6F00               	movwf	_lcd_send_4bits$1688& (0+255),b
  9046                           
  9047                           ; BSR set to: 1
  9048  006282  0101               	movlb	1	; () banked
  9049  006284  B104               	btfsc	lcd_send_4bits@n& (0+255),0,b
  9050  006286  D003               	goto	l9670
  9051                           
  9052                           ; BSR set to: 1
  9053  006288  0E00               	movlw	0
  9054  00628A  0101               	movlb	1	; () banked
  9055  00628C  6F00               	movwf	_lcd_send_4bits$1688& (0+255),b
  9056  00628E                     l9670:
  9057                           
  9058                           ; BSR set to: 1
  9059  00628E  0101               	movlb	1	; () banked
  9060  006290  B100               	btfsc	_lcd_send_4bits$1688& (0+255),0,b
  9061  006292  D002               	bra	u14105
  9062  006294  9881               	bcf	3969,4,c	;volatile
  9063  006296  D001               	bra	u14106
  9064  006298                     u14105:
  9065  006298  8881               	bsf	3969,4,c	;volatile
  9066  00629A                     u14106:
  9067                           
  9068                           ;vclib_lcd.h: 154: PORTBbits.RB5 = 0 || n & 2;
  9069  00629A  0E01               	movlw	1
  9070  00629C  0101               	movlb	1	; () banked
  9071  00629E  6F01               	movwf	_lcd_send_4bits$1689& (0+255),b
  9072                           
  9073                           ; BSR set to: 1
  9074  0062A0  0101               	movlb	1	; () banked
  9075  0062A2  B304               	btfsc	lcd_send_4bits@n& (0+255),1,b
  9076  0062A4  D003               	goto	l9676
  9077                           
  9078                           ; BSR set to: 1
  9079  0062A6  0E00               	movlw	0
  9080  0062A8  0101               	movlb	1	; () banked
  9081  0062AA  6F01               	movwf	_lcd_send_4bits$1689& (0+255),b
  9082  0062AC                     l9676:
  9083                           
  9084                           ; BSR set to: 1
  9085  0062AC  0101               	movlb	1	; () banked
  9086  0062AE  B101               	btfsc	_lcd_send_4bits$1689& (0+255),0,b
  9087  0062B0  D002               	bra	u14125
  9088  0062B2  9A81               	bcf	3969,5,c	;volatile
  9089  0062B4  D001               	bra	u14126
  9090  0062B6                     u14125:
  9091  0062B6  8A81               	bsf	3969,5,c	;volatile
  9092  0062B8                     u14126:
  9093                           
  9094                           ;vclib_lcd.h: 155: PORTBbits.RB6 = 0 || n & 4;
  9095  0062B8  0E01               	movlw	1
  9096  0062BA  0101               	movlb	1	; () banked
  9097  0062BC  6F02               	movwf	_lcd_send_4bits$1690& (0+255),b
  9098                           
  9099                           ; BSR set to: 1
  9100  0062BE  0101               	movlb	1	; () banked
  9101  0062C0  B504               	btfsc	lcd_send_4bits@n& (0+255),2,b
  9102  0062C2  D003               	goto	l9682
  9103                           
  9104                           ; BSR set to: 1
  9105  0062C4  0E00               	movlw	0
  9106  0062C6  0101               	movlb	1	; () banked
  9107  0062C8  6F02               	movwf	_lcd_send_4bits$1690& (0+255),b
  9108  0062CA                     l9682:
  9109                           
  9110                           ; BSR set to: 1
  9111  0062CA  0101               	movlb	1	; () banked
  9112  0062CC  B102               	btfsc	_lcd_send_4bits$1690& (0+255),0,b
  9113  0062CE  D002               	bra	u14145
  9114  0062D0  9C81               	bcf	3969,6,c	;volatile
  9115  0062D2  D001               	bra	u14146
  9116  0062D4                     u14145:
  9117  0062D4  8C81               	bsf	3969,6,c	;volatile
  9118  0062D6                     u14146:
  9119                           
  9120                           ;vclib_lcd.h: 156: PORTBbits.RB7 = 0 || n & 8;
  9121  0062D6  0E01               	movlw	1
  9122  0062D8  0101               	movlb	1	; () banked
  9123  0062DA  6F03               	movwf	_lcd_send_4bits$1691& (0+255),b
  9124                           
  9125                           ; BSR set to: 1
  9126  0062DC  0101               	movlb	1	; () banked
  9127  0062DE  B704               	btfsc	lcd_send_4bits@n& (0+255),3,b
  9128  0062E0  D003               	goto	l9688
  9129                           
  9130                           ; BSR set to: 1
  9131  0062E2  0E00               	movlw	0
  9132  0062E4  0101               	movlb	1	; () banked
  9133  0062E6  6F03               	movwf	_lcd_send_4bits$1691& (0+255),b
  9134  0062E8                     l9688:
  9135                           
  9136                           ; BSR set to: 1
  9137  0062E8  0101               	movlb	1	; () banked
  9138  0062EA  B103               	btfsc	_lcd_send_4bits$1691& (0+255),0,b
  9139  0062EC  D002               	bra	u14165
  9140  0062EE  9E81               	bcf	3969,7,c	;volatile
  9141  0062F0  D001               	bra	u14166
  9142  0062F2                     u14165:
  9143  0062F2  8E81               	bsf	3969,7,c	;volatile
  9144  0062F4                     u14166:
  9145                           
  9146                           ;vclib_lcd.h: 157: _delay((unsigned long)((1)*(16000000/4000000.0)));
  9147  0062F4  D000               	nop2		;2 cycle nop
  9148  0062F6  D000               	nop2		;2 cycle nop
  9149                           
  9150                           ;vclib_lcd.h: 158: PORTBbits.RB3 = 1;
  9151  0062F8  8681               	bsf	3969,3,c	;volatile
  9152                           
  9153                           ;vclib_lcd.h: 159: _delay((unsigned long)((2)*(16000000/4000000.0)));
  9154  0062FA  0E02               	movlw	2
  9155  0062FC                     u18037:
  9156  0062FC  2EE8               	decfsz	wreg,f,c
  9157  0062FE  D7FE               	goto	u18037
  9158  006300  D000               	nop2		;nop
  9159                           
  9160                           ;vclib_lcd.h: 160: PORTBbits.RB3 = 0;
  9161  006302  9681               	bcf	3969,3,c	;volatile
  9162  006304  0012               	return		;funcret
  9163  006306                     __end_of_lcd_send_4bits:
  9164                           	opt stack 0
  9165                           tblptru	equ	0xFF8
  9166                           tblptrh	equ	0xFF7
  9167                           tblptrl	equ	0xFF6
  9168                           tablat	equ	0xFF5
  9169                           prodh	equ	0xFF4
  9170                           prodl	equ	0xFF3
  9171                           intcon	equ	0xFF2
  9172                           postinc0	equ	0xFEE
  9173                           wreg	equ	0xFE8
  9174                           postdec1	equ	0xFE5
  9175                           fsr1l	equ	0xFE1
  9176                           indf2	equ	0xFDF
  9177                           postinc2	equ	0xFDE
  9178                           postdec2	equ	0xFDD
  9179                           fsr2h	equ	0xFDA
  9180                           fsr2l	equ	0xFD9
  9181                           status	equ	0xFD8
  9182                           
  9183 ;; *************** function _lcd_read_byte *****************
  9184 ;; Defined at:
  9185 ;;		line 127 in file "source/../../vclib_lcd.h"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;		None
  9188 ;; Auto vars:     Size  Location     Type
  9189 ;;  high            1    3[BANK1 ] unsigned char 
  9190 ;;  low             1    2[BANK1 ] unsigned char 
  9191 ;; Return value:  Size  Location     Type
  9192 ;;                  1    wreg      unsigned char 
  9193 ;; Registers used:
  9194 ;;		wreg, status,2, status,0, cstack
  9195 ;; Tracked objects:
  9196 ;;		On entry : 0/0
  9197 ;;		On exit  : 0/0
  9198 ;;		Unchanged: 0/0
  9199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9200 ;;      Params:         0       0       0       0       0       0       0
  9201 ;;      Locals:         0       0       2       0       0       0       0
  9202 ;;      Temps:          0       0       0       0       0       0       0
  9203 ;;      Totals:         0       0       2       0       0       0       0
  9204 ;;Total ram usage:        2 bytes
  9205 ;; Hardware stack levels used:    1
  9206 ;; Hardware stack levels required when called:   13
  9207 ;; This function calls:
  9208 ;;		_lcd_read_4bits
  9209 ;; This function is called by:
  9210 ;;		_lcd_send_byte
  9211 ;;		_lcd_getc
  9212 ;; This function uses a non-reentrant model
  9213 ;;
  9214                           
  9215                           	psect	text31
  9216  006E70                     __ptext31:
  9217                           	opt stack 0
  9218  006E70                     _lcd_read_byte:
  9219                           	opt stack 15
  9220                           
  9221                           ;vclib_lcd.h: 128: unsigned char low, high;
  9222                           ;vclib_lcd.h: 129: TRISBbits.TRISB4 = 1;
  9223                           
  9224                           ;incstack = 0
  9225  006E70  8893               	bsf	3987,4,c	;volatile
  9226                           
  9227                           ;vclib_lcd.h: 130: TRISBbits.TRISB5 = 1;
  9228  006E72  8A93               	bsf	3987,5,c	;volatile
  9229                           
  9230                           ;vclib_lcd.h: 131: TRISBbits.TRISB6 = 1;
  9231  006E74  8C93               	bsf	3987,6,c	;volatile
  9232                           
  9233                           ;vclib_lcd.h: 132: TRISBbits.TRISB7 = 1;
  9234  006E76  8E93               	bsf	3987,7,c	;volatile
  9235                           
  9236                           ;vclib_lcd.h: 133: PORTBbits.RB2 = 1;
  9237  006E78  8481               	bsf	3969,2,c	;volatile
  9238                           
  9239                           ;vclib_lcd.h: 134: _delay((unsigned long)((1)*(16000000/4000000.0)));
  9240  006E7A  D000               	nop2		;2 cycle nop
  9241  006E7C  D000               	nop2		;2 cycle nop
  9242                           
  9243                           ;vclib_lcd.h: 135: PORTBbits.RB3 = 1;
  9244  006E7E  8681               	bsf	3969,3,c	;volatile
  9245                           
  9246                           ;vclib_lcd.h: 136: _delay((unsigned long)((1)*(16000000/4000000.0)));
  9247  006E80  D000               	nop2		;2 cycle nop
  9248  006E82  D000               	nop2		;2 cycle nop
  9249                           
  9250                           ;vclib_lcd.h: 137: high = lcd_read_4bits();
  9251  006E84  EC14  F033         	call	_lcd_read_4bits	;wreg free
  9252  006E88  0101               	movlb	1	; () banked
  9253  006E8A  6F03               	movwf	lcd_read_byte@high& (0+255),b
  9254                           
  9255                           ; BSR set to: 1
  9256                           ;vclib_lcd.h: 138: PORTBbits.RB3 = 0;
  9257  006E8C  9681               	bcf	3969,3,c	;volatile
  9258                           
  9259                           ; BSR set to: 1
  9260                           ;vclib_lcd.h: 139: _delay((unsigned long)((1)*(16000000/4000000.0)));
  9261  006E8E  D000               	nop2		;2 cycle nop
  9262  006E90  D000               	nop2		;2 cycle nop
  9263                           
  9264                           ;vclib_lcd.h: 140: PORTBbits.RB3 = 1;
  9265  006E92  8681               	bsf	3969,3,c	;volatile
  9266                           
  9267                           ;vclib_lcd.h: 141: _delay((unsigned long)((1)*(16000000/4000000.0)));
  9268  006E94  D000               	nop2		;2 cycle nop
  9269  006E96  D000               	nop2		;2 cycle nop
  9270                           
  9271                           ;vclib_lcd.h: 142: low = lcd_read_4bits();
  9272  006E98  EC14  F033         	call	_lcd_read_4bits	;wreg free
  9273  006E9C  0101               	movlb	1	; () banked
  9274  006E9E  6F02               	movwf	lcd_read_byte@low& (0+255),b
  9275                           
  9276                           ; BSR set to: 1
  9277                           ;vclib_lcd.h: 143: PORTBbits.RB3 = 0;
  9278  006EA0  9681               	bcf	3969,3,c	;volatile
  9279                           
  9280                           ; BSR set to: 1
  9281                           ;vclib_lcd.h: 144: TRISBbits.TRISB4 = 0;
  9282  006EA2  9893               	bcf	3987,4,c	;volatile
  9283                           
  9284                           ; BSR set to: 1
  9285                           ;vclib_lcd.h: 145: TRISBbits.TRISB5 = 0;
  9286  006EA4  9A93               	bcf	3987,5,c	;volatile
  9287                           
  9288                           ; BSR set to: 1
  9289                           ;vclib_lcd.h: 146: TRISBbits.TRISB6 = 0;
  9290  006EA6  9C93               	bcf	3987,6,c	;volatile
  9291                           
  9292                           ; BSR set to: 1
  9293                           ;vclib_lcd.h: 147: TRISBbits.TRISB7 = 0;
  9294  006EA8  9E93               	bcf	3987,7,c	;volatile
  9295                           
  9296                           ; BSR set to: 1
  9297                           ;vclib_lcd.h: 148: return ( (high << 4) | low);
  9298  006EAA  0101               	movlb	1	; () banked
  9299  006EAC  3903               	swapf	lcd_read_byte@high& (0+255),w,b
  9300  006EAE  0BF0               	andlw	240
  9301  006EB0  0101               	movlb	1	; () banked
  9302  006EB2  1102               	iorwf	lcd_read_byte@low& (0+255),w,b
  9303  006EB4  0012               	return	
  9304  006EB6                     __end_of_lcd_read_byte:
  9305                           	opt stack 0
  9306                           tblptru	equ	0xFF8
  9307                           tblptrh	equ	0xFF7
  9308                           tblptrl	equ	0xFF6
  9309                           tablat	equ	0xFF5
  9310                           prodh	equ	0xFF4
  9311                           prodl	equ	0xFF3
  9312                           intcon	equ	0xFF2
  9313                           postinc0	equ	0xFEE
  9314                           wreg	equ	0xFE8
  9315                           postdec1	equ	0xFE5
  9316                           fsr1l	equ	0xFE1
  9317                           indf2	equ	0xFDF
  9318                           postinc2	equ	0xFDE
  9319                           postdec2	equ	0xFDD
  9320                           fsr2h	equ	0xFDA
  9321                           fsr2l	equ	0xFD9
  9322                           status	equ	0xFD8
  9323                           
  9324 ;; *************** function _lcd_read_4bits *****************
  9325 ;; Defined at:
  9326 ;;		line 117 in file "source/../../vclib_lcd.h"
  9327 ;; Parameters:    Size  Location     Type
  9328 ;;		None
  9329 ;; Auto vars:     Size  Location     Type
  9330 ;;  n               1    1[BANK1 ] unsigned char 
  9331 ;; Return value:  Size  Location     Type
  9332 ;;                  1    wreg      unsigned char 
  9333 ;; Registers used:
  9334 ;;		wreg, status,2, status,0
  9335 ;; Tracked objects:
  9336 ;;		On entry : 0/0
  9337 ;;		On exit  : 0/0
  9338 ;;		Unchanged: 0/0
  9339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9340 ;;      Params:         0       0       0       0       0       0       0
  9341 ;;      Locals:         0       0       1       0       0       0       0
  9342 ;;      Temps:          0       0       1       0       0       0       0
  9343 ;;      Totals:         0       0       2       0       0       0       0
  9344 ;;Total ram usage:        2 bytes
  9345 ;; Hardware stack levels used:    1
  9346 ;; Hardware stack levels required when called:   12
  9347 ;; This function calls:
  9348 ;;		Nothing
  9349 ;; This function is called by:
  9350 ;;		_lcd_read_byte
  9351 ;; This function uses a non-reentrant model
  9352 ;;
  9353                           
  9354                           	psect	text32
  9355  006628                     __ptext32:
  9356                           	opt stack 0
  9357  006628                     _lcd_read_4bits:
  9358                           	opt stack 15
  9359                           
  9360                           ;vclib_lcd.h: 118: unsigned char n = 0x00;
  9361                           
  9362                           ; BSR set to: 1
  9363                           ;incstack = 0
  9364  006628  0E00               	movlw	0
  9365  00662A  0101               	movlb	1	; () banked
  9366  00662C  6F01               	movwf	lcd_read_4bits@n& (0+255),b
  9367                           
  9368                           ; BSR set to: 1
  9369                           ;vclib_lcd.h: 120: n |= PORTBbits.RB4;
  9370  00662E  A881               	btfss	3969,4,c	;volatile
  9371  006630  D002               	goto	u14050
  9372  006632  0E01               	movlw	1
  9373  006634  D001               	goto	u14056
  9374  006636                     u14050:
  9375  006636  0E00               	movlw	0
  9376  006638                     u14056:
  9377  006638  0101               	movlb	1	; () banked
  9378  00663A  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9379                           
  9380                           ; BSR set to: 1
  9381                           ;vclib_lcd.h: 121: n |= PORTBbits.RB5 << 1;
  9382  00663C  AA81               	btfss	3969,5,c	;volatile
  9383  00663E  D004               	goto	u14060
  9384  006640  0101               	movlb	1	; () banked
  9385  006642  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9386  006644  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  9387  006646  D002               	goto	u14068
  9388  006648                     u14060:
  9389  006648  0101               	movlb	1	; () banked
  9390  00664A  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9391  00664C                     u14068:
  9392  00664C  0101               	movlb	1	; () banked
  9393  00664E  90D8               	bcf	status,0,c
  9394  006650  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9395  006652  0101               	movlb	1	; () banked
  9396  006654  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9397                           
  9398                           ; BSR set to: 1
  9399                           ;vclib_lcd.h: 122: n |= PORTBbits.RB6 << 2;
  9400  006656  AC81               	btfss	3969,6,c	;volatile
  9401  006658  D004               	goto	u14070
  9402  00665A  0101               	movlb	1	; () banked
  9403  00665C  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9404  00665E  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  9405  006660  D002               	goto	u14078
  9406  006662                     u14070:
  9407  006662  0101               	movlb	1	; () banked
  9408  006664  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9409  006666                     u14078:
  9410  006666  0101               	movlb	1	; () banked
  9411  006668  90D8               	bcf	status,0,c
  9412  00666A  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9413  00666C  0101               	movlb	1	; () banked
  9414  00666E  90D8               	bcf	status,0,c
  9415  006670  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9416  006672  0101               	movlb	1	; () banked
  9417  006674  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9418                           
  9419                           ; BSR set to: 1
  9420                           ;vclib_lcd.h: 123: n |= PORTBbits.RB7 << 3;
  9421  006676  AE81               	btfss	3969,7,c	;volatile
  9422  006678  D004               	goto	u14080
  9423  00667A  0101               	movlb	1	; () banked
  9424  00667C  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9425  00667E  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  9426  006680  D002               	goto	u14088
  9427  006682                     u14080:
  9428  006682  0101               	movlb	1	; () banked
  9429  006684  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9430  006686                     u14088:
  9431  006686  0101               	movlb	1	; () banked
  9432  006688  90D8               	bcf	status,0,c
  9433  00668A  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9434  00668C  0101               	movlb	1	; () banked
  9435  00668E  90D8               	bcf	status,0,c
  9436  006690  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9437  006692  0101               	movlb	1	; () banked
  9438  006694  90D8               	bcf	status,0,c
  9439  006696  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9440  006698  0101               	movlb	1	; () banked
  9441  00669A  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9442                           
  9443                           ;vclib_lcd.h: 124: return (n);
  9444  00669C  0101               	movlb	1	; () banked
  9445  00669E  5101               	movf	lcd_read_4bits@n& (0+255),w,b
  9446  0066A0  0012               	return	
  9447  0066A2                     __end_of_lcd_read_4bits:
  9448                           	opt stack 0
  9449                           tblptru	equ	0xFF8
  9450                           tblptrh	equ	0xFF7
  9451                           tblptrl	equ	0xFF6
  9452                           tablat	equ	0xFF5
  9453                           prodh	equ	0xFF4
  9454                           prodl	equ	0xFF3
  9455                           intcon	equ	0xFF2
  9456                           postinc0	equ	0xFEE
  9457                           wreg	equ	0xFE8
  9458                           postdec1	equ	0xFE5
  9459                           fsr1l	equ	0xFE1
  9460                           indf2	equ	0xFDF
  9461                           postinc2	equ	0xFDE
  9462                           postdec2	equ	0xFDD
  9463                           fsr2h	equ	0xFDA
  9464                           fsr2l	equ	0xFD9
  9465                           status	equ	0xFD8
  9466                           
  9467 ;; *************** function _isdigit *****************
  9468 ;; Defined at:
  9469 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  9470 ;; Parameters:    Size  Location     Type
  9471 ;;  c               1    wreg     unsigned char 
  9472 ;; Auto vars:     Size  Location     Type
  9473 ;;  c               1    2[BANK1 ] unsigned char 
  9474 ;; Return value:  Size  Location     Type
  9475 ;;		None               void
  9476 ;; Registers used:
  9477 ;;		wreg, status,2, status,0
  9478 ;; Tracked objects:
  9479 ;;		On entry : 0/0
  9480 ;;		On exit  : 0/0
  9481 ;;		Unchanged: 0/0
  9482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9483 ;;      Params:         0       0       0       0       0       0       0
  9484 ;;      Locals:         0       0       2       0       0       0       0
  9485 ;;      Temps:          0       0       1       0       0       0       0
  9486 ;;      Totals:         0       0       3       0       0       0       0
  9487 ;;Total ram usage:        3 bytes
  9488 ;; Hardware stack levels used:    1
  9489 ;; Hardware stack levels required when called:   12
  9490 ;; This function calls:
  9491 ;;		Nothing
  9492 ;; This function is called by:
  9493 ;;		_printf
  9494 ;; This function uses a non-reentrant model
  9495 ;;
  9496                           
  9497                           	psect	text33
  9498  00718C                     __ptext33:
  9499                           	opt stack 0
  9500  00718C                     _isdigit:
  9501                           	opt stack 15
  9502                           
  9503                           ; BSR set to: 1
  9504                           ;incstack = 0
  9505                           ;isdigit@c stored from wreg
  9506  00718C  0101               	movlb	1	; () banked
  9507  00718E  6F02               	movwf	isdigit@c& (0+255),b
  9508  007190  0E00               	movlw	0
  9509  007192  0101               	movlb	1	; () banked
  9510  007194  6F01               	movwf	_isdigit$2512& (0+255),b
  9511                           
  9512                           ; BSR set to: 1
  9513  007196  0E3A               	movlw	58
  9514  007198  0101               	movlb	1	; () banked
  9515  00719A  6102               	cpfslt	isdigit@c& (0+255),b
  9516  00719C  D007               	goto	l10110
  9517                           
  9518                           ; BSR set to: 1
  9519  00719E  0E2F               	movlw	47
  9520  0071A0  0101               	movlb	1	; () banked
  9521  0071A2  6502               	cpfsgt	isdigit@c& (0+255),b
  9522  0071A4  D003               	goto	l10110
  9523                           
  9524                           ; BSR set to: 1
  9525  0071A6  0E01               	movlw	1
  9526  0071A8  0101               	movlb	1	; () banked
  9527  0071AA  6F01               	movwf	_isdigit$2512& (0+255),b
  9528  0071AC                     l10110:
  9529                           
  9530                           ; BSR set to: 1
  9531  0071AC  C101  F100         	movff	_isdigit$2512,??_isdigit
  9532  0071B0  0101               	movlb	1	; () banked
  9533  0071B2  3100               	rrcf	??_isdigit& (0+255),w,b
  9534  0071B4  0012               	return	
  9535  0071B6                     __end_of_isdigit:
  9536                           	opt stack 0
  9537                           tblptru	equ	0xFF8
  9538                           tblptrh	equ	0xFF7
  9539                           tblptrl	equ	0xFF6
  9540                           tablat	equ	0xFF5
  9541                           prodh	equ	0xFF4
  9542                           prodl	equ	0xFF3
  9543                           intcon	equ	0xFF2
  9544                           postinc0	equ	0xFEE
  9545                           wreg	equ	0xFE8
  9546                           postdec1	equ	0xFE5
  9547                           fsr1l	equ	0xFE1
  9548                           indf2	equ	0xFDF
  9549                           postinc2	equ	0xFDE
  9550                           postdec2	equ	0xFDD
  9551                           fsr2h	equ	0xFDA
  9552                           fsr2l	equ	0xFD9
  9553                           status	equ	0xFD8
  9554                           
  9555 ;; *************** function _fround *****************
  9556 ;; Defined at:
  9557 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  9558 ;; Parameters:    Size  Location     Type
  9559 ;;  prec            1    wreg     unsigned char 
  9560 ;; Auto vars:     Size  Location     Type
  9561 ;;  prec            1   44[BANK1 ] unsigned char 
  9562 ;; Return value:  Size  Location     Type
  9563 ;;                  3   35[BANK1 ] unsigned char 
  9564 ;; Registers used:
  9565 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9566 ;; Tracked objects:
  9567 ;;		On entry : 0/0
  9568 ;;		On exit  : 0/0
  9569 ;;		Unchanged: 0/0
  9570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9571 ;;      Params:         0       0       3       0       0       0       0
  9572 ;;      Locals:         0       0       7       0       0       0       0
  9573 ;;      Temps:          0       0       0       0       0       0       0
  9574 ;;      Totals:         0       0      10       0       0       0       0
  9575 ;;Total ram usage:       10 bytes
  9576 ;; Hardware stack levels used:    1
  9577 ;; Hardware stack levels required when called:   14
  9578 ;; This function calls:
  9579 ;;		___awdiv
  9580 ;;		___awmod
  9581 ;;		___ftmul
  9582 ;;		___wmul
  9583 ;; This function is called by:
  9584 ;;		_printf
  9585 ;; This function uses a non-reentrant model
  9586 ;;
  9587                           
  9588                           	psect	text34
  9589  00252C                     __ptext34:
  9590                           	opt stack 0
  9591  00252C                     _fround:
  9592                           	opt stack 13
  9593                           
  9594                           ; BSR set to: 1
  9595                           ;incstack = 0
  9596                           ;fround@prec stored from wreg
  9597  00252C  0101               	movlb	1	; () banked
  9598  00252E  6F2C               	movwf	fround@prec& (0+255),b
  9599                           
  9600                           ;doprnt.c: 413: if(prec>=110)
  9601  002530  0E6D               	movlw	109
  9602  002532  0101               	movlb	1	; () banked
  9603  002534  652C               	cpfsgt	fround@prec& (0+255),b
  9604  002536  D0BA               	goto	l10052
  9605                           
  9606                           ; BSR set to: 1
  9607                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9608  002538  0E00               	movlw	0
  9609  00253A  0101               	movlb	1	; () banked
  9610  00253C  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9611  00253E  0E03               	movlw	3
  9612  002540  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9613  002542  0E00               	movlw	0
  9614  002544  0101               	movlb	1	; () banked
  9615  002546  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9616  002548  0E0A               	movlw	10
  9617  00254A  6F08               	movwf	___awdiv@divisor& (0+255),b
  9618  00254C  0E00               	movlw	0
  9619  00254E  0101               	movlb	1	; () banked
  9620  002550  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9621  002552  0E64               	movlw	100
  9622  002554  6F02               	movwf	___awmod@divisor& (0+255),b
  9623  002556  C12C  F100         	movff	fround@prec,___awmod@dividend
  9624  00255A  0101               	movlb	1	; () banked
  9625  00255C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9626  00255E  EC49  F02E         	call	___awmod	;wreg free
  9627  002562  C100  F106         	movff	?___awmod,___awdiv@dividend
  9628  002566  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  9629  00256A  EC28  F02C         	call	___awdiv	;wreg free
  9630  00256E  0E09               	movlw	9
  9631  002570  0101               	movlb	1	; () banked
  9632  002572  2506               	addwf	?___awdiv& (0+255),w,b
  9633  002574  0101               	movlb	1	; () banked
  9634  002576  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9635  002578  0E00               	movlw	0
  9636  00257A  0101               	movlb	1	; () banked
  9637  00257C  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9638  00257E  0101               	movlb	1	; () banked
  9639  002580  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9640  002582  ECD9  F037         	call	___wmul	;wreg free
  9641  002586  0EFD               	movlw	low __npowers_
  9642  002588  0101               	movlb	1	; () banked
  9643  00258A  250E               	addwf	?___wmul& (0+255),w,b
  9644  00258C  6EF6               	movwf	tblptrl,c
  9645  00258E  0E7C               	movlw	high __npowers_
  9646  002590  0101               	movlb	1	; () banked
  9647  002592  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9648  002594  6EF7               	movwf	tblptrh,c
  9649  002596                     	if	0	;There are less than 3 active tblptr bytes
  9650  002596                     	endif
  9651  002596  0009               	tblrd		*+
  9652  002598  CFF5 F117          	movff	tablat,___ftmul@f2
  9653  00259C  0009               	tblrd		*+
  9654  00259E  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9655  0025A2  000A               	tblrd		*-
  9656  0025A4  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9657  0025A8  0E00               	movlw	0
  9658  0025AA  0101               	movlb	1	; () banked
  9659  0025AC  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9660  0025AE  0E64               	movlw	100
  9661  0025B0  6F08               	movwf	___awdiv@divisor& (0+255),b
  9662  0025B2  C12C  F106         	movff	fround@prec,___awdiv@dividend
  9663  0025B6  0101               	movlb	1	; () banked
  9664  0025B8  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  9665  0025BA  EC28  F02C         	call	___awdiv	;wreg free
  9666  0025BE  0E12               	movlw	18
  9667  0025C0  0101               	movlb	1	; () banked
  9668  0025C2  2506               	addwf	?___awdiv& (0+255),w,b
  9669  0025C4  0101               	movlb	1	; () banked
  9670  0025C6  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9671  0025C8  0E00               	movlw	0
  9672  0025CA  0101               	movlb	1	; () banked
  9673  0025CC  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9674  0025CE  0101               	movlb	1	; () banked
  9675  0025D0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9676  0025D2  0E00               	movlw	0
  9677  0025D4  0101               	movlb	1	; () banked
  9678  0025D6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9679  0025D8  0E03               	movlw	3
  9680  0025DA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9681  0025DC  ECD9  F037         	call	___wmul	;wreg free
  9682  0025E0  0EFD               	movlw	low __npowers_
  9683  0025E2  0101               	movlb	1	; () banked
  9684  0025E4  250E               	addwf	?___wmul& (0+255),w,b
  9685  0025E6  6EF6               	movwf	tblptrl,c
  9686  0025E8  0E7C               	movlw	high __npowers_
  9687  0025EA  0101               	movlb	1	; () banked
  9688  0025EC  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9689  0025EE  6EF7               	movwf	tblptrh,c
  9690  0025F0                     	if	0	;There are less than 3 active tblptr bytes
  9691  0025F0                     	endif
  9692  0025F0  0009               	tblrd		*+
  9693  0025F2  CFF5 F114          	movff	tablat,___ftmul@f1
  9694  0025F6  0009               	tblrd		*+
  9695  0025F8  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9696  0025FC  000A               	tblrd		*-
  9697  0025FE  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9698  002602  EC1F  F01D         	call	___ftmul	;wreg free
  9699  002606  C114  F129         	movff	?___ftmul,_fround$3019
  9700  00260A  C115  F12A         	movff	?___ftmul+1,_fround$3019+1
  9701  00260E  C116  F12B         	movff	?___ftmul+2,_fround$3019+2
  9702                           
  9703                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9704  002612  0E00               	movlw	0
  9705  002614  0101               	movlb	1	; () banked
  9706  002616  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9707  002618  0E03               	movlw	3
  9708  00261A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9709  00261C  0E00               	movlw	0
  9710  00261E  0101               	movlb	1	; () banked
  9711  002620  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9712  002622  0E0A               	movlw	10
  9713  002624  6F02               	movwf	___awmod@divisor& (0+255),b
  9714  002626  C12C  F100         	movff	fround@prec,___awmod@dividend
  9715  00262A  0101               	movlb	1	; () banked
  9716  00262C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9717  00262E  EC49  F02E         	call	___awmod	;wreg free
  9718  002632  C100  F10E         	movff	?___awmod,___wmul@multiplier
  9719  002636  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  9720  00263A  ECD9  F037         	call	___wmul	;wreg free
  9721  00263E  0EFD               	movlw	low __npowers_
  9722  002640  0101               	movlb	1	; () banked
  9723  002642  250E               	addwf	?___wmul& (0+255),w,b
  9724  002644  6EF6               	movwf	tblptrl,c
  9725  002646  0E7C               	movlw	high __npowers_
  9726  002648  0101               	movlb	1	; () banked
  9727  00264A  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9728  00264C  6EF7               	movwf	tblptrh,c
  9729  00264E                     	if	0	;There are less than 3 active tblptr bytes
  9730  00264E                     	endif
  9731  00264E  0009               	tblrd		*+
  9732  002650  CFF5 F117          	movff	tablat,___ftmul@f2
  9733  002654  0009               	tblrd		*+
  9734  002656  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9735  00265A  000A               	tblrd		*-
  9736  00265C  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9737  002660  C129  F114         	movff	_fround$3019,___ftmul@f1
  9738  002664  C12A  F115         	movff	_fround$3019+1,___ftmul@f1+1
  9739  002668  C12B  F116         	movff	_fround$3019+2,___ftmul@f1+2
  9740  00266C  EC1F  F01D         	call	___ftmul	;wreg free
  9741  002670  C114  F126         	movff	?___ftmul,_fround$3020
  9742  002674  C115  F127         	movff	?___ftmul+1,_fround$3020+1
  9743  002678  C116  F128         	movff	?___ftmul+2,_fround$3020+2
  9744                           
  9745                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9746  00267C  C126  F114         	movff	_fround$3020,___ftmul@f1
  9747  002680  C127  F115         	movff	_fround$3020+1,___ftmul@f1+1
  9748  002684  C128  F116         	movff	_fround$3020+2,___ftmul@f1+2
  9749  002688  0E00               	movlw	0
  9750  00268A  0101               	movlb	1	; () banked
  9751  00268C  6F17               	movwf	___ftmul@f2& (0+255),b
  9752  00268E  0E00               	movlw	0
  9753  002690  0101               	movlb	1	; () banked
  9754  002692  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9755  002694  0E3F               	movlw	63
  9756  002696  0101               	movlb	1	; () banked
  9757  002698  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9758  00269A  EC1F  F01D         	call	___ftmul	;wreg free
  9759  00269E  C114  F123         	movff	?___ftmul,?_fround
  9760  0026A2  C115  F124         	movff	?___ftmul+1,?_fround+1
  9761  0026A6  C116  F125         	movff	?___ftmul+2,?_fround+2
  9762  0026AA  0012               	return	
  9763  0026AC                     l10052:
  9764                           
  9765                           ;doprnt.c: 415: else if(prec > 10)
  9766  0026AC  0E0A               	movlw	10
  9767  0026AE  0101               	movlb	1	; () banked
  9768  0026B0  652C               	cpfsgt	fround@prec& (0+255),b
  9769  0026B2  D06E               	goto	l10060
  9770                           
  9771                           ; BSR set to: 1
  9772                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9773  0026B4  0E00               	movlw	0
  9774  0026B6  0101               	movlb	1	; () banked
  9775  0026B8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9776  0026BA  0E03               	movlw	3
  9777  0026BC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9778  0026BE  0E00               	movlw	0
  9779  0026C0  0101               	movlb	1	; () banked
  9780  0026C2  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9781  0026C4  0E0A               	movlw	10
  9782  0026C6  6F02               	movwf	___awmod@divisor& (0+255),b
  9783  0026C8  C12C  F100         	movff	fround@prec,___awmod@dividend
  9784  0026CC  0101               	movlb	1	; () banked
  9785  0026CE  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9786  0026D0  EC49  F02E         	call	___awmod	;wreg free
  9787  0026D4  C100  F10E         	movff	?___awmod,___wmul@multiplier
  9788  0026D8  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  9789  0026DC  ECD9  F037         	call	___wmul	;wreg free
  9790  0026E0  0EFD               	movlw	low __npowers_
  9791  0026E2  0101               	movlb	1	; () banked
  9792  0026E4  250E               	addwf	?___wmul& (0+255),w,b
  9793  0026E6  6EF6               	movwf	tblptrl,c
  9794  0026E8  0E7C               	movlw	high __npowers_
  9795  0026EA  0101               	movlb	1	; () banked
  9796  0026EC  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9797  0026EE  6EF7               	movwf	tblptrh,c
  9798  0026F0                     	if	0	;There are less than 3 active tblptr bytes
  9799  0026F0                     	endif
  9800  0026F0  0009               	tblrd		*+
  9801  0026F2  CFF5 F117          	movff	tablat,___ftmul@f2
  9802  0026F6  0009               	tblrd		*+
  9803  0026F8  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9804  0026FC  000A               	tblrd		*-
  9805  0026FE  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9806  002702  0E00               	movlw	0
  9807  002704  0101               	movlb	1	; () banked
  9808  002706  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9809  002708  0E0A               	movlw	10
  9810  00270A  6F08               	movwf	___awdiv@divisor& (0+255),b
  9811  00270C  C12C  F106         	movff	fround@prec,___awdiv@dividend
  9812  002710  0101               	movlb	1	; () banked
  9813  002712  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  9814  002714  EC28  F02C         	call	___awdiv	;wreg free
  9815  002718  0E09               	movlw	9
  9816  00271A  0101               	movlb	1	; () banked
  9817  00271C  2506               	addwf	?___awdiv& (0+255),w,b
  9818  00271E  0101               	movlb	1	; () banked
  9819  002720  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9820  002722  0E00               	movlw	0
  9821  002724  0101               	movlb	1	; () banked
  9822  002726  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9823  002728  0101               	movlb	1	; () banked
  9824  00272A  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9825  00272C  0E00               	movlw	0
  9826  00272E  0101               	movlb	1	; () banked
  9827  002730  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9828  002732  0E03               	movlw	3
  9829  002734  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9830  002736  ECD9  F037         	call	___wmul	;wreg free
  9831  00273A  0EFD               	movlw	low __npowers_
  9832  00273C  0101               	movlb	1	; () banked
  9833  00273E  250E               	addwf	?___wmul& (0+255),w,b
  9834  002740  6EF6               	movwf	tblptrl,c
  9835  002742  0E7C               	movlw	high __npowers_
  9836  002744  0101               	movlb	1	; () banked
  9837  002746  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9838  002748  6EF7               	movwf	tblptrh,c
  9839  00274A                     	if	0	;There are less than 3 active tblptr bytes
  9840  00274A                     	endif
  9841  00274A  0009               	tblrd		*+
  9842  00274C  CFF5 F114          	movff	tablat,___ftmul@f1
  9843  002750  0009               	tblrd		*+
  9844  002752  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9845  002756  000A               	tblrd		*-
  9846  002758  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9847  00275C  EC1F  F01D         	call	___ftmul	;wreg free
  9848  002760  C114  F129         	movff	?___ftmul,_fround$3019
  9849  002764  C115  F12A         	movff	?___ftmul+1,_fround$3019+1
  9850  002768  C116  F12B         	movff	?___ftmul+2,_fround$3019+2
  9851                           
  9852                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9853  00276C  C129  F114         	movff	_fround$3019,___ftmul@f1
  9854  002770  C12A  F115         	movff	_fround$3019+1,___ftmul@f1+1
  9855  002774  C12B  F116         	movff	_fround$3019+2,___ftmul@f1+2
  9856  002778  0E00               	movlw	0
  9857  00277A  0101               	movlb	1	; () banked
  9858  00277C  6F17               	movwf	___ftmul@f2& (0+255),b
  9859  00277E  0E00               	movlw	0
  9860  002780  0101               	movlb	1	; () banked
  9861  002782  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9862  002784  0E3F               	movlw	63
  9863  002786  0101               	movlb	1	; () banked
  9864  002788  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9865  00278A  EC1F  F01D         	call	___ftmul	;wreg free
  9866  00278E  D787               	goto	L5
  9867  002790                     l10060:
  9868                           
  9869                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9870  002790  0101               	movlb	1	; () banked
  9871  002792  512C               	movf	fround@prec& (0+255),w,b
  9872  002794  0D03               	mullw	3
  9873  002796  0EFD               	movlw	low __npowers_
  9874  002798  24F3               	addwf	prodl,w,c
  9875  00279A  6EF6               	movwf	tblptrl,c
  9876  00279C  0E7C               	movlw	high __npowers_
  9877  00279E  20F4               	addwfc	prodh,w,c
  9878  0027A0  6EF7               	movwf	tblptrh,c
  9879  0027A2                     	if	0	;There are less than 3 active tblptr bytes
  9880  0027A2                     	endif
  9881  0027A2  0009               	tblrd		*+
  9882  0027A4  CFF5 F114          	movff	tablat,___ftmul@f1
  9883  0027A8  0009               	tblrd		*+
  9884  0027AA  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9885  0027AE  000A               	tblrd		*-
  9886  0027B0  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9887  0027B4  0E00               	movlw	0
  9888  0027B6  0101               	movlb	1	; () banked
  9889  0027B8  6F17               	movwf	___ftmul@f2& (0+255),b
  9890  0027BA  0E00               	movlw	0
  9891  0027BC  0101               	movlb	1	; () banked
  9892  0027BE  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9893  0027C0  0E3F               	movlw	63
  9894  0027C2  0101               	movlb	1	; () banked
  9895  0027C4  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9896  0027C6  EC1F  F01D         	call	___ftmul	;wreg free
  9897  0027CA  C114  F123         	movff	?___ftmul,?_fround
  9898  0027CE  C115  F124         	movff	?___ftmul+1,?_fround+1
  9899  0027D2  C116  F125         	movff	?___ftmul+2,?_fround+2
  9900  0027D6  0012               	return	
  9901  0027D8                     __end_of_fround:
  9902                           	opt stack 0
  9903                           tblptru	equ	0xFF8
  9904                           tblptrh	equ	0xFF7
  9905                           tblptrl	equ	0xFF6
  9906                           tablat	equ	0xFF5
  9907                           prodh	equ	0xFF4
  9908                           prodl	equ	0xFF3
  9909                           intcon	equ	0xFF2
  9910                           postinc0	equ	0xFEE
  9911                           wreg	equ	0xFE8
  9912                           postdec1	equ	0xFE5
  9913                           fsr1l	equ	0xFE1
  9914                           indf2	equ	0xFDF
  9915                           postinc2	equ	0xFDE
  9916                           postdec2	equ	0xFDD
  9917                           fsr2h	equ	0xFDA
  9918                           fsr2l	equ	0xFD9
  9919                           status	equ	0xFD8
  9920                           
  9921 ;; *************** function ___wmul *****************
  9922 ;; Defined at:
  9923 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;  multiplier      2   14[BANK1 ] unsigned int 
  9926 ;;  multiplicand    2   16[BANK1 ] unsigned int 
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;  product         2   18[BANK1 ] unsigned int 
  9929 ;; Return value:  Size  Location     Type
  9930 ;;                  2   14[BANK1 ] unsigned int 
  9931 ;; Registers used:
  9932 ;;		wreg, status,2, status,0, prodl, prodh
  9933 ;; Tracked objects:
  9934 ;;		On entry : 0/0
  9935 ;;		On exit  : 0/0
  9936 ;;		Unchanged: 0/0
  9937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9938 ;;      Params:         0       0       4       0       0       0       0
  9939 ;;      Locals:         0       0       2       0       0       0       0
  9940 ;;      Temps:          0       0       0       0       0       0       0
  9941 ;;      Totals:         0       0       6       0       0       0       0
  9942 ;;Total ram usage:        6 bytes
  9943 ;; Hardware stack levels used:    1
  9944 ;; Hardware stack levels required when called:   12
  9945 ;; This function calls:
  9946 ;;		Nothing
  9947 ;; This function is called by:
  9948 ;;		_fround
  9949 ;;		_scale
  9950 ;;		_printf
  9951 ;; This function uses a non-reentrant model
  9952 ;;
  9953                           
  9954                           	psect	text35
  9955  006FB2                     __ptext35:
  9956                           	opt stack 0
  9957  006FB2                     ___wmul:
  9958                           	opt stack 14
  9959                           
  9960                           ;incstack = 0
  9961  006FB2  0101               	movlb	1	; () banked
  9962  006FB4  510E               	movf	___wmul@multiplier& (0+255),w,b
  9963  006FB6  0101               	movlb	1	; () banked
  9964  006FB8  0310               	mulwf	___wmul@multiplicand& (0+255),b
  9965  006FBA  CFF3 F112          	movff	prodl,___wmul@product
  9966  006FBE  CFF4 F113          	movff	prodh,___wmul@product+1
  9967  006FC2  0101               	movlb	1	; () banked
  9968  006FC4  510E               	movf	___wmul@multiplier& (0+255),w,b
  9969  006FC6  0101               	movlb	1	; () banked
  9970  006FC8  0311               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9971  006FCA  50F3               	movf	prodl,w,c
  9972  006FCC  0101               	movlb	1	; () banked
  9973  006FCE  2713               	addwf	(___wmul@product+1)& (0+255),f,b
  9974  006FD0  0101               	movlb	1	; () banked
  9975  006FD2  510F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9976  006FD4  0101               	movlb	1	; () banked
  9977  006FD6  0310               	mulwf	___wmul@multiplicand& (0+255),b
  9978  006FD8  50F3               	movf	prodl,w,c
  9979  006FDA  0101               	movlb	1	; () banked
  9980  006FDC  2713               	addwf	(___wmul@product+1)& (0+255),f,b
  9981                           
  9982                           ; BSR set to: 1
  9983  006FDE  C112  F10E         	movff	___wmul@product,?___wmul
  9984  006FE2  C113  F10F         	movff	___wmul@product+1,?___wmul+1
  9985  006FE6  0012               	return	
  9986  006FE8                     __end_of___wmul:
  9987                           	opt stack 0
  9988                           tblptru	equ	0xFF8
  9989                           tblptrh	equ	0xFF7
  9990                           tblptrl	equ	0xFF6
  9991                           tablat	equ	0xFF5
  9992                           prodh	equ	0xFF4
  9993                           prodl	equ	0xFF3
  9994                           intcon	equ	0xFF2
  9995                           postinc0	equ	0xFEE
  9996                           wreg	equ	0xFE8
  9997                           postdec1	equ	0xFE5
  9998                           fsr1l	equ	0xFE1
  9999                           indf2	equ	0xFDF
 10000                           postinc2	equ	0xFDE
 10001                           postdec2	equ	0xFDD
 10002                           fsr2h	equ	0xFDA
 10003                           fsr2l	equ	0xFD9
 10004                           status	equ	0xFD8
 10005                           
 10006 ;; *************** function ___awmod *****************
 10007 ;; Defined at:
 10008 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
 10009 ;; Parameters:    Size  Location     Type
 10010 ;;  dividend        2    0[BANK1 ] int 
 10011 ;;  divisor         2    2[BANK1 ] int 
 10012 ;; Auto vars:     Size  Location     Type
 10013 ;;  sign            1    5[BANK1 ] unsigned char 
 10014 ;;  counter         1    4[BANK1 ] unsigned char 
 10015 ;; Return value:  Size  Location     Type
 10016 ;;                  2    0[BANK1 ] int 
 10017 ;; Registers used:
 10018 ;;		wreg, status,2, status,0
 10019 ;; Tracked objects:
 10020 ;;		On entry : 0/0
 10021 ;;		On exit  : 0/0
 10022 ;;		Unchanged: 0/0
 10023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10024 ;;      Params:         0       0       4       0       0       0       0
 10025 ;;      Locals:         0       0       2       0       0       0       0
 10026 ;;      Temps:          0       0       0       0       0       0       0
 10027 ;;      Totals:         0       0       6       0       0       0       0
 10028 ;;Total ram usage:        6 bytes
 10029 ;; Hardware stack levels used:    1
 10030 ;; Hardware stack levels required when called:   12
 10031 ;; This function calls:
 10032 ;;		Nothing
 10033 ;; This function is called by:
 10034 ;;		_fround
 10035 ;;		_scale
 10036 ;; This function uses a non-reentrant model
 10037 ;;
 10038                           
 10039                           	psect	text36
 10040  005C92                     __ptext36:
 10041                           	opt stack 0
 10042  005C92                     ___awmod:
 10043                           	opt stack 14
 10044                           
 10045                           ; BSR set to: 1
 10046                           ;incstack = 0
 10047  005C92  0E00               	movlw	0
 10048  005C94  0101               	movlb	1	; () banked
 10049  005C96  6F05               	movwf	___awmod@sign& (0+255),b
 10050                           
 10051                           ; BSR set to: 1
 10052  005C98  0101               	movlb	1	; () banked
 10053  005C9A  AF01               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10054  005C9C  D008               	goto	l9994
 10055                           
 10056                           ; BSR set to: 1
 10057  005C9E  0101               	movlb	1	; () banked
 10058  005CA0  6D00               	negf	___awmod@dividend& (0+255),b
 10059  005CA2  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
 10060  005CA4  B0D8               	btfsc	status,0,c
 10061  005CA6  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
 10062                           
 10063                           ; BSR set to: 1
 10064  005CA8  0E01               	movlw	1
 10065  005CAA  0101               	movlb	1	; () banked
 10066  005CAC  6F05               	movwf	___awmod@sign& (0+255),b
 10067  005CAE                     l9994:
 10068                           
 10069                           ; BSR set to: 1
 10070  005CAE  0101               	movlb	1	; () banked
 10071  005CB0  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10072  005CB2  D005               	goto	l9998
 10073                           
 10074                           ; BSR set to: 1
 10075  005CB4  0101               	movlb	1	; () banked
 10076  005CB6  6D02               	negf	___awmod@divisor& (0+255),b
 10077  005CB8  1F03               	comf	(___awmod@divisor+1)& (0+255),f,b
 10078  005CBA  B0D8               	btfsc	status,0,c
 10079  005CBC  2B03               	incf	(___awmod@divisor+1)& (0+255),f,b
 10080  005CBE                     l9998:
 10081                           
 10082                           ; BSR set to: 1
 10083  005CBE  0101               	movlb	1	; () banked
 10084  005CC0  5102               	movf	___awmod@divisor& (0+255),w,b
 10085  005CC2  0101               	movlb	1	; () banked
 10086  005CC4  1103               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10087  005CC6  B4D8               	btfsc	status,2,c
 10088  005CC8  D026               	goto	l10014
 10089                           
 10090                           ; BSR set to: 1
 10091  005CCA  0E01               	movlw	1
 10092  005CCC  0101               	movlb	1	; () banked
 10093  005CCE  6F04               	movwf	___awmod@counter& (0+255),b
 10094  005CD0  D006               	goto	l10004
 10095  005CD2                     l10002:
 10096                           
 10097                           ; BSR set to: 1
 10098  005CD2  0101               	movlb	1	; () banked
 10099  005CD4  90D8               	bcf	status,0,c
 10100  005CD6  3702               	rlcf	___awmod@divisor& (0+255),f,b
 10101  005CD8  3703               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10102  005CDA  0101               	movlb	1	; () banked
 10103  005CDC  2B04               	incf	___awmod@counter& (0+255),f,b
 10104  005CDE                     l10004:
 10105                           
 10106                           ; BSR set to: 1
 10107  005CDE  0101               	movlb	1	; () banked
 10108  005CE0  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10109  005CE2  D7F7               	goto	l10002
 10110  005CE4                     l10006:
 10111                           
 10112                           ; BSR set to: 1
 10113  005CE4  0101               	movlb	1	; () banked
 10114  005CE6  5102               	movf	___awmod@divisor& (0+255),w,b
 10115  005CE8  0101               	movlb	1	; () banked
 10116  005CEA  5D00               	subwf	___awmod@dividend& (0+255),w,b
 10117  005CEC  0101               	movlb	1	; () banked
 10118  005CEE  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
 10119  005CF0  0101               	movlb	1	; () banked
 10120  005CF2  5901               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10121  005CF4  A0D8               	btfss	status,0,c
 10122  005CF6  D008               	goto	l10010
 10123                           
 10124                           ; BSR set to: 1
 10125  005CF8  0101               	movlb	1	; () banked
 10126  005CFA  5102               	movf	___awmod@divisor& (0+255),w,b
 10127  005CFC  0101               	movlb	1	; () banked
 10128  005CFE  5F00               	subwf	___awmod@dividend& (0+255),f,b
 10129  005D00  0101               	movlb	1	; () banked
 10130  005D02  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
 10131  005D04  0101               	movlb	1	; () banked
 10132  005D06  5B01               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10133  005D08                     l10010:
 10134                           
 10135                           ; BSR set to: 1
 10136  005D08  0101               	movlb	1	; () banked
 10137  005D0A  90D8               	bcf	status,0,c
 10138  005D0C  3303               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10139  005D0E  3302               	rrcf	___awmod@divisor& (0+255),f,b
 10140                           
 10141                           ; BSR set to: 1
 10142  005D10  0101               	movlb	1	; () banked
 10143  005D12  2F04               	decfsz	___awmod@counter& (0+255),f,b
 10144  005D14  D7E7               	goto	l10006
 10145  005D16                     l10014:
 10146                           
 10147                           ; BSR set to: 1
 10148  005D16  0101               	movlb	1	; () banked
 10149  005D18  5105               	movf	___awmod@sign& (0+255),w,b
 10150  005D1A  0101               	movlb	1	; () banked
 10151  005D1C  B4D8               	btfsc	status,2,c
 10152  005D1E  D005               	goto	l10018
 10153                           
 10154                           ; BSR set to: 1
 10155  005D20  0101               	movlb	1	; () banked
 10156  005D22  6D00               	negf	___awmod@dividend& (0+255),b
 10157  005D24  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
 10158  005D26  B0D8               	btfsc	status,0,c
 10159  005D28  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
 10160  005D2A                     l10018:
 10161                           
 10162                           ; BSR set to: 1
 10163  005D2A  C100  F100         	movff	___awmod@dividend,?___awmod
 10164  005D2E  C101  F101         	movff	___awmod@dividend+1,?___awmod+1
 10165  005D32  0012               	return	
 10166  005D34                     __end_of___awmod:
 10167                           	opt stack 0
 10168                           tblptru	equ	0xFF8
 10169                           tblptrh	equ	0xFF7
 10170                           tblptrl	equ	0xFF6
 10171                           tablat	equ	0xFF5
 10172                           prodh	equ	0xFF4
 10173                           prodl	equ	0xFF3
 10174                           intcon	equ	0xFF2
 10175                           postinc0	equ	0xFEE
 10176                           wreg	equ	0xFE8
 10177                           postdec1	equ	0xFE5
 10178                           fsr1l	equ	0xFE1
 10179                           indf2	equ	0xFDF
 10180                           postinc2	equ	0xFDE
 10181                           postdec2	equ	0xFDD
 10182                           fsr2h	equ	0xFDA
 10183                           fsr2l	equ	0xFD9
 10184                           status	equ	0xFD8
 10185                           
 10186 ;; *************** function ___awdiv *****************
 10187 ;; Defined at:
 10188 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
 10189 ;; Parameters:    Size  Location     Type
 10190 ;;  dividend        2    6[BANK1 ] int 
 10191 ;;  divisor         2    8[BANK1 ] int 
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;  quotient        2   12[BANK1 ] int 
 10194 ;;  sign            1   11[BANK1 ] unsigned char 
 10195 ;;  counter         1   10[BANK1 ] unsigned char 
 10196 ;; Return value:  Size  Location     Type
 10197 ;;                  2    6[BANK1 ] int 
 10198 ;; Registers used:
 10199 ;;		wreg, status,2, status,0
 10200 ;; Tracked objects:
 10201 ;;		On entry : 0/0
 10202 ;;		On exit  : 0/0
 10203 ;;		Unchanged: 0/0
 10204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10205 ;;      Params:         0       0       4       0       0       0       0
 10206 ;;      Locals:         0       0       4       0       0       0       0
 10207 ;;      Temps:          0       0       0       0       0       0       0
 10208 ;;      Totals:         0       0       8       0       0       0       0
 10209 ;;Total ram usage:        8 bytes
 10210 ;; Hardware stack levels used:    1
 10211 ;; Hardware stack levels required when called:   12
 10212 ;; This function calls:
 10213 ;;		Nothing
 10214 ;; This function is called by:
 10215 ;;		_fround
 10216 ;;		_scale
 10217 ;;		_printf
 10218 ;; This function uses a non-reentrant model
 10219 ;;
 10220                           
 10221                           	psect	text37
 10222  005850                     __ptext37:
 10223                           	opt stack 0
 10224  005850                     ___awdiv:
 10225                           	opt stack 14
 10226                           
 10227                           ; BSR set to: 1
 10228                           ;incstack = 0
 10229  005850  0E00               	movlw	0
 10230  005852  0101               	movlb	1	; () banked
 10231  005854  6F0B               	movwf	___awdiv@sign& (0+255),b
 10232                           
 10233                           ; BSR set to: 1
 10234  005856  0101               	movlb	1	; () banked
 10235  005858  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10236  00585A  D008               	goto	l9950
 10237                           
 10238                           ; BSR set to: 1
 10239  00585C  0101               	movlb	1	; () banked
 10240  00585E  6D08               	negf	___awdiv@divisor& (0+255),b
 10241  005860  1F09               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10242  005862  B0D8               	btfsc	status,0,c
 10243  005864  2B09               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10244                           
 10245                           ; BSR set to: 1
 10246  005866  0E01               	movlw	1
 10247  005868  0101               	movlb	1	; () banked
 10248  00586A  6F0B               	movwf	___awdiv@sign& (0+255),b
 10249  00586C                     l9950:
 10250                           
 10251                           ; BSR set to: 1
 10252  00586C  0101               	movlb	1	; () banked
 10253  00586E  AF07               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10254  005870  D008               	goto	l9956
 10255                           
 10256                           ; BSR set to: 1
 10257  005872  0101               	movlb	1	; () banked
 10258  005874  6D06               	negf	___awdiv@dividend& (0+255),b
 10259  005876  1F07               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10260  005878  B0D8               	btfsc	status,0,c
 10261  00587A  2B07               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10262                           
 10263                           ; BSR set to: 1
 10264  00587C  0E01               	movlw	1
 10265  00587E  0101               	movlb	1	; () banked
 10266  005880  1B0B               	xorwf	___awdiv@sign& (0+255),f,b
 10267  005882                     l9956:
 10268                           
 10269                           ; BSR set to: 1
 10270  005882  0E00               	movlw	0
 10271  005884  0101               	movlb	1	; () banked
 10272  005886  6F0D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10273  005888  0E00               	movlw	0
 10274  00588A  6F0C               	movwf	___awdiv@quotient& (0+255),b
 10275                           
 10276                           ; BSR set to: 1
 10277  00588C  0101               	movlb	1	; () banked
 10278  00588E  5108               	movf	___awdiv@divisor& (0+255),w,b
 10279  005890  0101               	movlb	1	; () banked
 10280  005892  1109               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10281  005894  B4D8               	btfsc	status,2,c
 10282  005896  D02C               	goto	l9978
 10283                           
 10284                           ; BSR set to: 1
 10285  005898  0E01               	movlw	1
 10286  00589A  0101               	movlb	1	; () banked
 10287  00589C  6F0A               	movwf	___awdiv@counter& (0+255),b
 10288  00589E  D006               	goto	l9964
 10289  0058A0                     l9962:
 10290                           
 10291                           ; BSR set to: 1
 10292  0058A0  0101               	movlb	1	; () banked
 10293  0058A2  90D8               	bcf	status,0,c
 10294  0058A4  3708               	rlcf	___awdiv@divisor& (0+255),f,b
 10295  0058A6  3709               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10296  0058A8  0101               	movlb	1	; () banked
 10297  0058AA  2B0A               	incf	___awdiv@counter& (0+255),f,b
 10298  0058AC                     l9964:
 10299                           
 10300                           ; BSR set to: 1
 10301  0058AC  0101               	movlb	1	; () banked
 10302  0058AE  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10303  0058B0  D7F7               	goto	l9962
 10304  0058B2                     l9966:
 10305                           
 10306                           ; BSR set to: 1
 10307  0058B2  0101               	movlb	1	; () banked
 10308  0058B4  90D8               	bcf	status,0,c
 10309  0058B6  370C               	rlcf	___awdiv@quotient& (0+255),f,b
 10310  0058B8  370D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10311                           
 10312                           ; BSR set to: 1
 10313  0058BA  0101               	movlb	1	; () banked
 10314  0058BC  5108               	movf	___awdiv@divisor& (0+255),w,b
 10315  0058BE  0101               	movlb	1	; () banked
 10316  0058C0  5D06               	subwf	___awdiv@dividend& (0+255),w,b
 10317  0058C2  0101               	movlb	1	; () banked
 10318  0058C4  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10319  0058C6  0101               	movlb	1	; () banked
 10320  0058C8  5907               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10321  0058CA  A0D8               	btfss	status,0,c
 10322  0058CC  D00A               	goto	l9974
 10323                           
 10324                           ; BSR set to: 1
 10325  0058CE  0101               	movlb	1	; () banked
 10326  0058D0  5108               	movf	___awdiv@divisor& (0+255),w,b
 10327  0058D2  0101               	movlb	1	; () banked
 10328  0058D4  5F06               	subwf	___awdiv@dividend& (0+255),f,b
 10329  0058D6  0101               	movlb	1	; () banked
 10330  0058D8  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10331  0058DA  0101               	movlb	1	; () banked
 10332  0058DC  5B07               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10333                           
 10334                           ; BSR set to: 1
 10335  0058DE  0101               	movlb	1	; () banked
 10336  0058E0  810C               	bsf	___awdiv@quotient& (0+255),0,b
 10337  0058E2                     l9974:
 10338                           
 10339                           ; BSR set to: 1
 10340  0058E2  0101               	movlb	1	; () banked
 10341  0058E4  90D8               	bcf	status,0,c
 10342  0058E6  3309               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10343  0058E8  3308               	rrcf	___awdiv@divisor& (0+255),f,b
 10344                           
 10345                           ; BSR set to: 1
 10346  0058EA  0101               	movlb	1	; () banked
 10347  0058EC  2F0A               	decfsz	___awdiv@counter& (0+255),f,b
 10348  0058EE  D7E1               	goto	l9966
 10349  0058F0                     l9978:
 10350                           
 10351                           ; BSR set to: 1
 10352  0058F0  0101               	movlb	1	; () banked
 10353  0058F2  510B               	movf	___awdiv@sign& (0+255),w,b
 10354  0058F4  0101               	movlb	1	; () banked
 10355  0058F6  B4D8               	btfsc	status,2,c
 10356  0058F8  D005               	goto	l9982
 10357                           
 10358                           ; BSR set to: 1
 10359  0058FA  0101               	movlb	1	; () banked
 10360  0058FC  6D0C               	negf	___awdiv@quotient& (0+255),b
 10361  0058FE  1F0D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10362  005900  B0D8               	btfsc	status,0,c
 10363  005902  2B0D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10364  005904                     l9982:
 10365                           
 10366                           ; BSR set to: 1
 10367  005904  C10C  F106         	movff	___awdiv@quotient,?___awdiv
 10368  005908  C10D  F107         	movff	___awdiv@quotient+1,?___awdiv+1
 10369  00590C  0012               	return	
 10370  00590E                     __end_of___awdiv:
 10371                           	opt stack 0
 10372                           tblptru	equ	0xFF8
 10373                           tblptrh	equ	0xFF7
 10374                           tblptrl	equ	0xFF6
 10375                           tablat	equ	0xFF5
 10376                           prodh	equ	0xFF4
 10377                           prodl	equ	0xFF3
 10378                           intcon	equ	0xFF2
 10379                           postinc0	equ	0xFEE
 10380                           wreg	equ	0xFE8
 10381                           postdec1	equ	0xFE5
 10382                           fsr1l	equ	0xFE1
 10383                           indf2	equ	0xFDF
 10384                           postinc2	equ	0xFDE
 10385                           postdec2	equ	0xFDD
 10386                           fsr2h	equ	0xFDA
 10387                           fsr2l	equ	0xFD9
 10388                           status	equ	0xFD8
 10389                           
 10390 ;; *************** function __tdiv_to_l_ *****************
 10391 ;; Defined at:
 10392 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
 10393 ;; Parameters:    Size  Location     Type
 10394 ;;  f1              3    0[BANK1 ] float 
 10395 ;;  f2              3    3[BANK1 ] float 
 10396 ;; Auto vars:     Size  Location     Type
 10397 ;;  quot            4    9[BANK1 ] unsigned long 
 10398 ;;  exp1            1   14[BANK1 ] unsigned char 
 10399 ;;  cntr            1   13[BANK1 ] unsigned char 
 10400 ;; Return value:  Size  Location     Type
 10401 ;;                  4    0[BANK1 ] unsigned long 
 10402 ;; Registers used:
 10403 ;;		wreg, status,2, status,0
 10404 ;; Tracked objects:
 10405 ;;		On entry : 0/0
 10406 ;;		On exit  : 0/0
 10407 ;;		Unchanged: 0/0
 10408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10409 ;;      Params:         0       0       6       0       0       0       0
 10410 ;;      Locals:         0       0       6       0       0       0       0
 10411 ;;      Temps:          0       0       3       0       0       0       0
 10412 ;;      Totals:         0       0      15       0       0       0       0
 10413 ;;Total ram usage:       15 bytes
 10414 ;; Hardware stack levels used:    1
 10415 ;; Hardware stack levels required when called:   12
 10416 ;; This function calls:
 10417 ;;		Nothing
 10418 ;; This function is called by:
 10419 ;;		_printf
 10420 ;; This function uses a non-reentrant model
 10421 ;;
 10422                           
 10423                           	psect	text38
 10424  003718                     __ptext38:
 10425                           	opt stack 0
 10426  003718                     __tdiv_to_l_:
 10427                           	opt stack 15
 10428                           
 10429                           ; BSR set to: 1
 10430                           ;incstack = 0
 10431  003718  C102  F106         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 10432  00371C  0101               	movlb	1	; () banked
 10433  00371E  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10434  003720  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10435  003722  0101               	movlb	1	; () banked
 10436  003724  3501               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10437  003726  0101               	movlb	1	; () banked
 10438  003728  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10439  00372A  E301               	bnc	u14831
 10440  00372C  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10441  00372E                     u14831:
 10442  00372E  0101               	movlb	1	; () banked
 10443  003730  5106               	movf	??__tdiv_to_l_& (0+255),w,b
 10444  003732  0101               	movlb	1	; () banked
 10445  003734  6F0E               	movwf	__tdiv_to_l_@exp1& (0+255),b
 10446  003736  0101               	movlb	1	; () banked
 10447  003738  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10448  00373A  A4D8               	btfss	status,2,c
 10449  00373C  D00A               	goto	l10120
 10450                           
 10451                           ; BSR set to: 1
 10452  00373E  0E00               	movlw	0
 10453  003740  0101               	movlb	1	; () banked
 10454  003742  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10455  003744  0E00               	movlw	0
 10456  003746  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10457  003748  0E00               	movlw	0
 10458  00374A  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10459  00374C  0E00               	movlw	0
 10460  00374E  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10461                           
 10462                           ; BSR set to: 1
 10463  003750  0012               	return	
 10464  003752                     l10120:
 10465                           
 10466                           ; BSR set to: 1
 10467  003752  C105  F106         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 10468  003756  0101               	movlb	1	; () banked
 10469  003758  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10470  00375A  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10471  00375C  0101               	movlb	1	; () banked
 10472  00375E  3504               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10473  003760  0101               	movlb	1	; () banked
 10474  003762  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10475  003764  E301               	bnc	u14851
 10476  003766  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10477  003768                     u14851:
 10478  003768  0101               	movlb	1	; () banked
 10479  00376A  5106               	movf	??__tdiv_to_l_& (0+255),w,b
 10480  00376C  0101               	movlb	1	; () banked
 10481  00376E  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10482  003770  0101               	movlb	1	; () banked
 10483  003772  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 10484  003774  A4D8               	btfss	status,2,c
 10485  003776  D00A               	goto	l10126
 10486                           
 10487                           ; BSR set to: 1
 10488  003778  0E00               	movlw	0
 10489  00377A  0101               	movlb	1	; () banked
 10490  00377C  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10491  00377E  0E00               	movlw	0
 10492  003780  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10493  003782  0E00               	movlw	0
 10494  003784  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10495  003786  0E00               	movlw	0
 10496  003788  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10497                           
 10498                           ; BSR set to: 1
 10499  00378A  0012               	return	
 10500  00378C                     l10126:
 10501                           
 10502                           ; BSR set to: 1
 10503  00378C  0101               	movlb	1	; () banked
 10504  00378E  8F01               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
 10505                           
 10506                           ; BSR set to: 1
 10507  003790  0EFF               	movlw	255
 10508  003792  0101               	movlb	1	; () banked
 10509  003794  1700               	andwf	__tdiv_to_l_@f1& (0+255),f,b
 10510  003796  0EFF               	movlw	255
 10511  003798  0101               	movlb	1	; () banked
 10512  00379A  1701               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10513  00379C  0E00               	movlw	0
 10514  00379E  0101               	movlb	1	; () banked
 10515  0037A0  1702               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10516  0037A2  0101               	movlb	1	; () banked
 10517  0037A4  8F04               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
 10518                           
 10519                           ; BSR set to: 1
 10520  0037A6  0EFF               	movlw	255
 10521  0037A8  0101               	movlb	1	; () banked
 10522  0037AA  1703               	andwf	__tdiv_to_l_@f2& (0+255),f,b
 10523  0037AC  0EFF               	movlw	255
 10524  0037AE  0101               	movlb	1	; () banked
 10525  0037B0  1704               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
 10526  0037B2  0E00               	movlw	0
 10527  0037B4  0101               	movlb	1	; () banked
 10528  0037B6  1705               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
 10529                           
 10530                           ; BSR set to: 1
 10531  0037B8  0E00               	movlw	0
 10532  0037BA  0101               	movlb	1	; () banked
 10533  0037BC  6F09               	movwf	__tdiv_to_l_@quot& (0+255),b
 10534  0037BE  0E00               	movlw	0
 10535  0037C0  6F0A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
 10536  0037C2  0E00               	movlw	0
 10537  0037C4  6F0B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
 10538  0037C6  0E00               	movlw	0
 10539  0037C8  6F0C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
 10540                           
 10541                           ; BSR set to: 1
 10542  0037CA  0E7F               	movlw	127
 10543  0037CC  0101               	movlb	1	; () banked
 10544  0037CE  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10545                           
 10546                           ; BSR set to: 1
 10547  0037D0  0101               	movlb	1	; () banked
 10548  0037D2  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 10549  0037D4  0F98               	addlw	152
 10550  0037D6  0101               	movlb	1	; () banked
 10551  0037D8  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10552                           
 10553                           ; BSR set to: 1
 10554  0037DA  0E18               	movlw	24
 10555  0037DC  0101               	movlb	1	; () banked
 10556  0037DE  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10557  0037E0                     l1376:
 10558                           
 10559                           ; BSR set to: 1
 10560  0037E0  0101               	movlb	1	; () banked
 10561  0037E2  90D8               	bcf	status,0,c
 10562  0037E4  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 10563  0037E6  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10564  0037E8  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10565  0037EA  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10566                           
 10567                           ; BSR set to: 1
 10568  0037EC  0101               	movlb	1	; () banked
 10569  0037EE  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10570  0037F0  0101               	movlb	1	; () banked
 10571  0037F2  5D00               	subwf	__tdiv_to_l_@f1& (0+255),w,b
 10572  0037F4  0101               	movlb	1	; () banked
 10573  0037F6  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10574  0037F8  0101               	movlb	1	; () banked
 10575  0037FA  5901               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10576  0037FC  0101               	movlb	1	; () banked
 10577  0037FE  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10578  003800  0101               	movlb	1	; () banked
 10579  003802  5902               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
 10580  003804  A0D8               	btfss	status,0,c
 10581  003806  D00E               	goto	l1377
 10582                           
 10583                           ; BSR set to: 1
 10584  003808  0101               	movlb	1	; () banked
 10585  00380A  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10586  00380C  0101               	movlb	1	; () banked
 10587  00380E  5F00               	subwf	__tdiv_to_l_@f1& (0+255),f,b
 10588  003810  0101               	movlb	1	; () banked
 10589  003812  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10590  003814  0101               	movlb	1	; () banked
 10591  003816  5B01               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10592  003818  0101               	movlb	1	; () banked
 10593  00381A  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10594  00381C  0101               	movlb	1	; () banked
 10595  00381E  5B02               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10596                           
 10597                           ; BSR set to: 1
 10598  003820  0101               	movlb	1	; () banked
 10599  003822  8109               	bsf	__tdiv_to_l_@quot& (0+255),0,b
 10600  003824                     l1377:
 10601                           
 10602                           ; BSR set to: 1
 10603  003824  0101               	movlb	1	; () banked
 10604  003826  90D8               	bcf	status,0,c
 10605  003828  3700               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
 10606  00382A  3701               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10607  00382C  3702               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10608                           
 10609                           ; BSR set to: 1
 10610  00382E  0101               	movlb	1	; () banked
 10611  003830  2F0D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
 10612  003832  D7D6               	goto	l1376
 10613                           
 10614                           ; BSR set to: 1
 10615                           
 10616                           ; BSR set to: 1
 10617  003834  0101               	movlb	1	; () banked
 10618  003836  AF0E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
 10619  003838  D01A               	goto	l10160
 10620                           
 10621                           ; BSR set to: 1
 10622  00383A  0101               	movlb	1	; () banked
 10623  00383C  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10624  00383E  0A80               	xorlw	128
 10625  003840  0F97               	addlw	151
 10626  003842  B0D8               	btfsc	status,0,c
 10627  003844  D00A               	goto	l10156
 10628                           
 10629                           ; BSR set to: 1
 10630  003846  0E00               	movlw	0
 10631  003848  0101               	movlb	1	; () banked
 10632  00384A  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10633  00384C  0E00               	movlw	0
 10634  00384E  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10635  003850  0E00               	movlw	0
 10636  003852  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10637  003854  0E00               	movlw	0
 10638  003856  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10639                           
 10640                           ; BSR set to: 1
 10641  003858  0012               	return	
 10642  00385A                     l10156:
 10643                           
 10644                           ; BSR set to: 1
 10645  00385A  0101               	movlb	1	; () banked
 10646  00385C  90D8               	bcf	status,0,c
 10647  00385E  330C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10648  003860  330B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10649  003862  330A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10650  003864  3309               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
 10651                           
 10652                           ; BSR set to: 1
 10653  003866  0101               	movlb	1	; () banked
 10654  003868  3F0E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
 10655  00386A  D7F7               	goto	l10156
 10656                           
 10657                           ; BSR set to: 1
 10658  00386C  D01B               	goto	l1383
 10659  00386E                     l10160:
 10660                           
 10661                           ; BSR set to: 1
 10662  00386E  0E17               	movlw	23
 10663  003870  0101               	movlb	1	; () banked
 10664  003872  650E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
 10665  003874  D012               	goto	l10168
 10666                           
 10667                           ; BSR set to: 1
 10668  003876  0E00               	movlw	0
 10669  003878  0101               	movlb	1	; () banked
 10670  00387A  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10671  00387C  0E00               	movlw	0
 10672  00387E  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10673  003880  0E00               	movlw	0
 10674  003882  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10675  003884  0E00               	movlw	0
 10676  003886  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10677                           
 10678                           ; BSR set to: 1
 10679  003888  0012               	return	
 10680  00388A                     l10166:
 10681                           
 10682                           ; BSR set to: 1
 10683  00388A  0101               	movlb	1	; () banked
 10684  00388C  90D8               	bcf	status,0,c
 10685  00388E  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 10686  003890  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10687  003892  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10688  003894  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10689  003896  0101               	movlb	1	; () banked
 10690  003898  070E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
 10691  00389A                     l10168:
 10692                           
 10693                           ; BSR set to: 1
 10694  00389A  0101               	movlb	1	; () banked
 10695  00389C  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10696  00389E  0101               	movlb	1	; () banked
 10697  0038A0  A4D8               	btfss	status,2,c
 10698  0038A2  D7F3               	goto	l10166
 10699  0038A4                     l1383:
 10700                           
 10701                           ; BSR set to: 1
 10702  0038A4  C109  F100         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 10703  0038A8  C10A  F101         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 10704  0038AC  C10B  F102         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 10705  0038B0  C10C  F103         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 10706                           
 10707                           ; BSR set to: 1
 10708  0038B4  0012               	return		;funcret
 10709  0038B6                     __end_of__tdiv_to_l_:
 10710                           	opt stack 0
 10711                           tblptru	equ	0xFF8
 10712                           tblptrh	equ	0xFF7
 10713                           tblptrl	equ	0xFF6
 10714                           tablat	equ	0xFF5
 10715                           prodh	equ	0xFF4
 10716                           prodl	equ	0xFF3
 10717                           intcon	equ	0xFF2
 10718                           postinc0	equ	0xFEE
 10719                           wreg	equ	0xFE8
 10720                           postdec1	equ	0xFE5
 10721                           fsr1l	equ	0xFE1
 10722                           indf2	equ	0xFDF
 10723                           postinc2	equ	0xFDE
 10724                           postdec2	equ	0xFDD
 10725                           fsr2h	equ	0xFDA
 10726                           fsr2l	equ	0xFD9
 10727                           status	equ	0xFD8
 10728                           
 10729 ;; *************** function __div_to_l_ *****************
 10730 ;; Defined at:
 10731 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
 10732 ;; Parameters:    Size  Location     Type
 10733 ;;  f1              3    0[BANK1 ] unsigned long 
 10734 ;;  f2              3    3[BANK1 ] unsigned long 
 10735 ;; Auto vars:     Size  Location     Type
 10736 ;;  quot            4    6[BANK1 ] unsigned long 
 10737 ;;  exp1            1   11[BANK1 ] unsigned char 
 10738 ;;  cntr            1   10[BANK1 ] unsigned char 
 10739 ;; Return value:  Size  Location     Type
 10740 ;;                  4    0[BANK1 ] unsigned long 
 10741 ;; Registers used:
 10742 ;;		wreg, status,2, status,0
 10743 ;; Tracked objects:
 10744 ;;		On entry : 0/0
 10745 ;;		On exit  : 0/0
 10746 ;;		Unchanged: 0/0
 10747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10748 ;;      Params:         0       0       6       0       0       0       0
 10749 ;;      Locals:         0       0       6       0       0       0       0
 10750 ;;      Temps:          0       0       0       0       0       0       0
 10751 ;;      Totals:         0       0      12       0       0       0       0
 10752 ;;Total ram usage:       12 bytes
 10753 ;; Hardware stack levels used:    1
 10754 ;; Hardware stack levels required when called:   12
 10755 ;; This function calls:
 10756 ;;		Nothing
 10757 ;; This function is called by:
 10758 ;;		_printf
 10759 ;; This function uses a non-reentrant model
 10760 ;;
 10761                           
 10762                           	psect	text39
 10763  0038B6                     __ptext39:
 10764                           	opt stack 0
 10765  0038B6                     __div_to_l_:
 10766                           	opt stack 15
 10767                           
 10768                           ; BSR set to: 1
 10769                           ;incstack = 0
 10770  0038B6  0101               	movlb	1	; () banked
 10771  0038B8  3502               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
 10772  0038BA  3503               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
 10773  0038BC  0101               	movlb	1	; () banked
 10774  0038BE  6F0B               	movwf	__div_to_l_@exp1& (0+255),b
 10775  0038C0  0101               	movlb	1	; () banked
 10776  0038C2  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10777  0038C4  A4D8               	btfss	status,2,c
 10778  0038C6  D00A               	goto	l10176
 10779                           
 10780                           ; BSR set to: 1
 10781  0038C8  0E00               	movlw	0
 10782  0038CA  0101               	movlb	1	; () banked
 10783  0038CC  6F00               	movwf	?__div_to_l_& (0+255),b
 10784  0038CE  0E00               	movlw	0
 10785  0038D0  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10786  0038D2  0E00               	movlw	0
 10787  0038D4  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10788  0038D6  0E00               	movlw	0
 10789  0038D8  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10790                           
 10791                           ; BSR set to: 1
 10792  0038DA  0012               	return	
 10793  0038DC                     l10176:
 10794                           
 10795                           ; BSR set to: 1
 10796  0038DC  0101               	movlb	1	; () banked
 10797  0038DE  3505               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
 10798  0038E0  3506               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
 10799  0038E2  0101               	movlb	1	; () banked
 10800  0038E4  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
 10801  0038E6  0101               	movlb	1	; () banked
 10802  0038E8  510A               	movf	__div_to_l_@cntr& (0+255),w,b
 10803  0038EA  A4D8               	btfss	status,2,c
 10804  0038EC  D00A               	goto	l10182
 10805                           
 10806                           ; BSR set to: 1
 10807  0038EE  0E00               	movlw	0
 10808  0038F0  0101               	movlb	1	; () banked
 10809  0038F2  6F00               	movwf	?__div_to_l_& (0+255),b
 10810  0038F4  0E00               	movlw	0
 10811  0038F6  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10812  0038F8  0E00               	movlw	0
 10813  0038FA  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10814  0038FC  0E00               	movlw	0
 10815  0038FE  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10816                           
 10817                           ; BSR set to: 1
 10818  003900  0012               	return	
 10819  003902                     l10182:
 10820                           
 10821                           ; BSR set to: 1
 10822  003902  0101               	movlb	1	; () banked
 10823  003904  8F02               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
 10824                           
 10825                           ; BSR set to: 1
 10826  003906  0EFF               	movlw	255
 10827  003908  0101               	movlb	1	; () banked
 10828  00390A  1700               	andwf	__div_to_l_@f1& (0+255),f,b
 10829  00390C  0EFF               	movlw	255
 10830  00390E  1701               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
 10831  003910  0EFF               	movlw	255
 10832  003912  1702               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
 10833  003914  0E00               	movlw	0
 10834  003916  1703               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
 10835                           
 10836                           ; BSR set to: 1
 10837  003918  0101               	movlb	1	; () banked
 10838  00391A  8F05               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
 10839  00391C  0EFF               	movlw	255
 10840  00391E  0101               	movlb	1	; () banked
 10841  003920  1703               	andwf	__div_to_l_@f2& (0+255),f,b
 10842  003922  0EFF               	movlw	255
 10843  003924  1704               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
 10844  003926  0EFF               	movlw	255
 10845  003928  1705               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
 10846  00392A  0E00               	movlw	0
 10847  00392C  1706               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
 10848                           
 10849                           ; BSR set to: 1
 10850  00392E  0E00               	movlw	0
 10851  003930  0101               	movlb	1	; () banked
 10852  003932  6F06               	movwf	__div_to_l_@quot& (0+255),b
 10853  003934  0E00               	movlw	0
 10854  003936  6F07               	movwf	(__div_to_l_@quot+1)& (0+255),b
 10855  003938  0E00               	movlw	0
 10856  00393A  6F08               	movwf	(__div_to_l_@quot+2)& (0+255),b
 10857  00393C  0E00               	movlw	0
 10858  00393E  6F09               	movwf	(__div_to_l_@quot+3)& (0+255),b
 10859                           
 10860                           ; BSR set to: 1
 10861  003940  0E7F               	movlw	127
 10862  003942  0101               	movlb	1	; () banked
 10863  003944  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
 10864                           
 10865                           ; BSR set to: 1
 10866  003946  0101               	movlb	1	; () banked
 10867  003948  510A               	movf	__div_to_l_@cntr& (0+255),w,b
 10868  00394A  0FA0               	addlw	160
 10869  00394C  0101               	movlb	1	; () banked
 10870  00394E  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
 10871                           
 10872                           ; BSR set to: 1
 10873  003950  0E20               	movlw	32
 10874  003952  0101               	movlb	1	; () banked
 10875  003954  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
 10876  003956                     l10196:
 10877                           
 10878                           ; BSR set to: 1
 10879  003956  0101               	movlb	1	; () banked
 10880  003958  90D8               	bcf	status,0,c
 10881  00395A  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
 10882  00395C  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 10883  00395E  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 10884  003960  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 10885                           
 10886                           ; BSR set to: 1
 10887  003962  0101               	movlb	1	; () banked
 10888  003964  5103               	movf	__div_to_l_@f2& (0+255),w,b
 10889  003966  0101               	movlb	1	; () banked
 10890  003968  5D00               	subwf	__div_to_l_@f1& (0+255),w,b
 10891  00396A  0101               	movlb	1	; () banked
 10892  00396C  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 10893  00396E  0101               	movlb	1	; () banked
 10894  003970  5901               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
 10895  003972  0101               	movlb	1	; () banked
 10896  003974  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 10897  003976  0101               	movlb	1	; () banked
 10898  003978  5902               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
 10899  00397A  0101               	movlb	1	; () banked
 10900  00397C  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 10901  00397E  0101               	movlb	1	; () banked
 10902  003980  5903               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
 10903  003982  A0D8               	btfss	status,0,c
 10904  003984  D012               	goto	l10204
 10905                           
 10906                           ; BSR set to: 1
 10907  003986  0101               	movlb	1	; () banked
 10908  003988  5103               	movf	__div_to_l_@f2& (0+255),w,b
 10909  00398A  0101               	movlb	1	; () banked
 10910  00398C  5F00               	subwf	__div_to_l_@f1& (0+255),f,b
 10911  00398E  0101               	movlb	1	; () banked
 10912  003990  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 10913  003992  0101               	movlb	1	; () banked
 10914  003994  5B01               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
 10915  003996  0101               	movlb	1	; () banked
 10916  003998  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 10917  00399A  0101               	movlb	1	; () banked
 10918  00399C  5B02               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
 10919  00399E  0101               	movlb	1	; () banked
 10920  0039A0  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 10921  0039A2  0101               	movlb	1	; () banked
 10922  0039A4  5B03               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
 10923                           
 10924                           ; BSR set to: 1
 10925  0039A6  0101               	movlb	1	; () banked
 10926  0039A8  8106               	bsf	__div_to_l_@quot& (0+255),0,b
 10927  0039AA                     l10204:
 10928                           
 10929                           ; BSR set to: 1
 10930  0039AA  0101               	movlb	1	; () banked
 10931  0039AC  90D8               	bcf	status,0,c
 10932  0039AE  3700               	rlcf	__div_to_l_@f1& (0+255),f,b
 10933  0039B0  3701               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
 10934  0039B2  3702               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
 10935  0039B4  3703               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
 10936                           
 10937                           ; BSR set to: 1
 10938  0039B6  0101               	movlb	1	; () banked
 10939  0039B8  2F0A               	decfsz	__div_to_l_@cntr& (0+255),f,b
 10940  0039BA  D7CD               	goto	l10196
 10941                           
 10942                           ; BSR set to: 1
 10943                           
 10944                           ; BSR set to: 1
 10945  0039BC  0101               	movlb	1	; () banked
 10946  0039BE  AF0B               	btfss	__div_to_l_@exp1& (0+255),7,b
 10947  0039C0  D01A               	goto	l10220
 10948                           
 10949                           ; BSR set to: 1
 10950  0039C2  0101               	movlb	1	; () banked
 10951  0039C4  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10952  0039C6  0A80               	xorlw	128
 10953  0039C8  0F9F               	addlw	159
 10954  0039CA  B0D8               	btfsc	status,0,c
 10955  0039CC  D00A               	goto	l10216
 10956                           
 10957                           ; BSR set to: 1
 10958  0039CE  0E00               	movlw	0
 10959  0039D0  0101               	movlb	1	; () banked
 10960  0039D2  6F00               	movwf	?__div_to_l_& (0+255),b
 10961  0039D4  0E00               	movlw	0
 10962  0039D6  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10963  0039D8  0E00               	movlw	0
 10964  0039DA  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10965  0039DC  0E00               	movlw	0
 10966  0039DE  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10967                           
 10968                           ; BSR set to: 1
 10969  0039E0  0012               	return	
 10970  0039E2                     l10216:
 10971                           
 10972                           ; BSR set to: 1
 10973  0039E2  0101               	movlb	1	; () banked
 10974  0039E4  90D8               	bcf	status,0,c
 10975  0039E6  3309               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
 10976  0039E8  3308               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
 10977  0039EA  3307               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
 10978  0039EC  3306               	rrcf	__div_to_l_@quot& (0+255),f,b
 10979                           
 10980                           ; BSR set to: 1
 10981  0039EE  0101               	movlb	1	; () banked
 10982  0039F0  3F0B               	incfsz	__div_to_l_@exp1& (0+255),f,b
 10983  0039F2  D7F7               	goto	l10216
 10984                           
 10985                           ; BSR set to: 1
 10986  0039F4  D01B               	goto	l1279
 10987  0039F6                     l10220:
 10988                           
 10989                           ; BSR set to: 1
 10990  0039F6  0E1F               	movlw	31
 10991  0039F8  0101               	movlb	1	; () banked
 10992  0039FA  650B               	cpfsgt	__div_to_l_@exp1& (0+255),b
 10993  0039FC  D012               	goto	l10228
 10994                           
 10995                           ; BSR set to: 1
 10996  0039FE  0E00               	movlw	0
 10997  003A00  0101               	movlb	1	; () banked
 10998  003A02  6F00               	movwf	?__div_to_l_& (0+255),b
 10999  003A04  0E00               	movlw	0
 11000  003A06  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 11001  003A08  0E00               	movlw	0
 11002  003A0A  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 11003  003A0C  0E00               	movlw	0
 11004  003A0E  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 11005                           
 11006                           ; BSR set to: 1
 11007  003A10  0012               	return	
 11008  003A12                     l10226:
 11009                           
 11010                           ; BSR set to: 1
 11011  003A12  0101               	movlb	1	; () banked
 11012  003A14  90D8               	bcf	status,0,c
 11013  003A16  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
 11014  003A18  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 11015  003A1A  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 11016  003A1C  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 11017  003A1E  0101               	movlb	1	; () banked
 11018  003A20  070B               	decf	__div_to_l_@exp1& (0+255),f,b
 11019  003A22                     l10228:
 11020                           
 11021                           ; BSR set to: 1
 11022  003A22  0101               	movlb	1	; () banked
 11023  003A24  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 11024  003A26  0101               	movlb	1	; () banked
 11025  003A28  A4D8               	btfss	status,2,c
 11026  003A2A  D7F3               	goto	l10226
 11027  003A2C                     l1279:
 11028                           
 11029                           ; BSR set to: 1
 11030  003A2C  C106  F100         	movff	__div_to_l_@quot,?__div_to_l_
 11031  003A30  C107  F101         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 11032  003A34  C108  F102         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 11033  003A38  C109  F103         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 11034                           
 11035                           ; BSR set to: 1
 11036  003A3C  0012               	return		;funcret
 11037  003A3E                     __end_of__div_to_l_:
 11038                           	opt stack 0
 11039                           tblptru	equ	0xFF8
 11040                           tblptrh	equ	0xFF7
 11041                           tblptrl	equ	0xFF6
 11042                           tablat	equ	0xFF5
 11043                           prodh	equ	0xFF4
 11044                           prodl	equ	0xFF3
 11045                           intcon	equ	0xFF2
 11046                           postinc0	equ	0xFEE
 11047                           wreg	equ	0xFE8
 11048                           postdec1	equ	0xFE5
 11049                           fsr1l	equ	0xFE1
 11050                           indf2	equ	0xFDF
 11051                           postinc2	equ	0xFDE
 11052                           postdec2	equ	0xFDD
 11053                           fsr2h	equ	0xFDA
 11054                           fsr2l	equ	0xFD9
 11055                           status	equ	0xFD8
 11056                           
 11057 ;; *************** function ___lltoft *****************
 11058 ;; Defined at:
 11059 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
 11060 ;; Parameters:    Size  Location     Type
 11061 ;;  c               4    8[BANK1 ] unsigned long 
 11062 ;; Auto vars:     Size  Location     Type
 11063 ;;  exp             1   16[BANK1 ] unsigned char 
 11064 ;; Return value:  Size  Location     Type
 11065 ;;                  3    8[BANK1 ] float 
 11066 ;; Registers used:
 11067 ;;		wreg, status,2, status,0, cstack
 11068 ;; Tracked objects:
 11069 ;;		On entry : 0/0
 11070 ;;		On exit  : 0/0
 11071 ;;		Unchanged: 0/0
 11072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11073 ;;      Params:         0       0       4       0       0       0       0
 11074 ;;      Locals:         0       0       1       0       0       0       0
 11075 ;;      Temps:          0       0       4       0       0       0       0
 11076 ;;      Totals:         0       0       9       0       0       0       0
 11077 ;;Total ram usage:        9 bytes
 11078 ;; Hardware stack levels used:    1
 11079 ;; Hardware stack levels required when called:   13
 11080 ;; This function calls:
 11081 ;;		___ftpack
 11082 ;; This function is called by:
 11083 ;;		_printf
 11084 ;; This function uses a non-reentrant model
 11085 ;;
 11086                           
 11087                           	psect	text40
 11088  006532                     __ptext40:
 11089                           	opt stack 0
 11090  006532                     ___lltoft:
 11091                           	opt stack 14
 11092                           
 11093                           ; BSR set to: 1
 11094                           ;incstack = 0
 11095  006532  0E8E               	movlw	142
 11096  006534  0101               	movlb	1	; () banked
 11097  006536  6F10               	movwf	___lltoft@exp& (0+255),b
 11098  006538  D008               	goto	l10302
 11099  00653A                     l10300:
 11100                           
 11101                           ; BSR set to: 1
 11102  00653A  0101               	movlb	1	; () banked
 11103  00653C  90D8               	bcf	status,0,c
 11104  00653E  330B               	rrcf	(___lltoft@c+3)& (0+255),f,b
 11105  006540  330A               	rrcf	(___lltoft@c+2)& (0+255),f,b
 11106  006542  3309               	rrcf	(___lltoft@c+1)& (0+255),f,b
 11107  006544  3308               	rrcf	___lltoft@c& (0+255),f,b
 11108  006546  0101               	movlb	1	; () banked
 11109  006548  2B10               	incf	___lltoft@exp& (0+255),f,b
 11110  00654A                     l10302:
 11111                           
 11112                           ; BSR set to: 1
 11113  00654A  0E00               	movlw	0
 11114  00654C  0101               	movlb	1	; () banked
 11115  00654E  1508               	andwf	___lltoft@c& (0+255),w,b
 11116  006550  0101               	movlb	1	; () banked
 11117  006552  6F0C               	movwf	??___lltoft& (0+255),b
 11118  006554  0E00               	movlw	0
 11119  006556  0101               	movlb	1	; () banked
 11120  006558  1509               	andwf	(___lltoft@c+1)& (0+255),w,b
 11121  00655A  0101               	movlb	1	; () banked
 11122  00655C  6F0D               	movwf	(??___lltoft+1)& (0+255),b
 11123  00655E  0E00               	movlw	0
 11124  006560  0101               	movlb	1	; () banked
 11125  006562  150A               	andwf	(___lltoft@c+2)& (0+255),w,b
 11126  006564  0101               	movlb	1	; () banked
 11127  006566  6F0E               	movwf	(??___lltoft+2)& (0+255),b
 11128  006568  0EFF               	movlw	255
 11129  00656A  0101               	movlb	1	; () banked
 11130  00656C  150B               	andwf	(___lltoft@c+3)& (0+255),w,b
 11131  00656E  0101               	movlb	1	; () banked
 11132  006570  6F0F               	movwf	(??___lltoft+3)& (0+255),b
 11133  006572  0101               	movlb	1	; () banked
 11134  006574  510C               	movf	??___lltoft& (0+255),w,b
 11135  006576  0101               	movlb	1	; () banked
 11136  006578  110D               	iorwf	(??___lltoft+1)& (0+255),w,b
 11137  00657A  0101               	movlb	1	; () banked
 11138  00657C  110E               	iorwf	(??___lltoft+2)& (0+255),w,b
 11139  00657E  0101               	movlb	1	; () banked
 11140  006580  110F               	iorwf	(??___lltoft+3)& (0+255),w,b
 11141  006582  A4D8               	btfss	status,2,c
 11142  006584  D7DA               	goto	l10300
 11143                           
 11144                           ; BSR set to: 1
 11145                           
 11146                           ; BSR set to: 1
 11147  006586  C108  F100         	movff	___lltoft@c,___ftpack@arg
 11148  00658A  C109  F101         	movff	___lltoft@c+1,___ftpack@arg+1
 11149  00658E  C10A  F102         	movff	___lltoft@c+2,___ftpack@arg+2
 11150  006592  C110  F103         	movff	___lltoft@exp,___ftpack@exp
 11151  006596  0E00               	movlw	0
 11152  006598  0101               	movlb	1	; () banked
 11153  00659A  6F04               	movwf	___ftpack@sign& (0+255),b
 11154  00659C  EC69  F025         	call	___ftpack	;wreg free
 11155  0065A0  C100  F108         	movff	?___ftpack,?___lltoft
 11156  0065A4  C101  F109         	movff	?___ftpack+1,?___lltoft+1
 11157  0065A8  C102  F10A         	movff	?___ftpack+2,?___lltoft+2
 11158  0065AC  0012               	return	
 11159  0065AE                     __end_of___lltoft:
 11160                           	opt stack 0
 11161                           tblptru	equ	0xFF8
 11162                           tblptrh	equ	0xFF7
 11163                           tblptrl	equ	0xFF6
 11164                           tablat	equ	0xFF5
 11165                           prodh	equ	0xFF4
 11166                           prodl	equ	0xFF3
 11167                           intcon	equ	0xFF2
 11168                           postinc0	equ	0xFEE
 11169                           wreg	equ	0xFE8
 11170                           postdec1	equ	0xFE5
 11171                           fsr1l	equ	0xFE1
 11172                           indf2	equ	0xFDF
 11173                           postinc2	equ	0xFDE
 11174                           postdec2	equ	0xFDD
 11175                           fsr2h	equ	0xFDA
 11176                           fsr2l	equ	0xFD9
 11177                           status	equ	0xFD8
 11178                           
 11179 ;; *************** function ___llmod *****************
 11180 ;; Defined at:
 11181 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
 11182 ;; Parameters:    Size  Location     Type
 11183 ;;  dividend        4   13[BANK1 ] unsigned long 
 11184 ;;  divisor         4   17[BANK1 ] unsigned long 
 11185 ;; Auto vars:     Size  Location     Type
 11186 ;;  counter         1   21[BANK1 ] unsigned char 
 11187 ;; Return value:  Size  Location     Type
 11188 ;;                  4   13[BANK1 ] unsigned long 
 11189 ;; Registers used:
 11190 ;;		wreg, status,2, status,0
 11191 ;; Tracked objects:
 11192 ;;		On entry : 0/0
 11193 ;;		On exit  : 0/0
 11194 ;;		Unchanged: 0/0
 11195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11196 ;;      Params:         0       0       8       0       0       0       0
 11197 ;;      Locals:         0       0       1       0       0       0       0
 11198 ;;      Temps:          0       0       0       0       0       0       0
 11199 ;;      Totals:         0       0       9       0       0       0       0
 11200 ;;Total ram usage:        9 bytes
 11201 ;; Hardware stack levels used:    1
 11202 ;; Hardware stack levels required when called:   12
 11203 ;; This function calls:
 11204 ;;		Nothing
 11205 ;; This function is called by:
 11206 ;;		_printf
 11207 ;; This function uses a non-reentrant model
 11208 ;;
 11209                           
 11210                           	psect	text41
 11211  005E70                     __ptext41:
 11212                           	opt stack 0
 11213  005E70                     ___llmod:
 11214                           	opt stack 15
 11215                           
 11216                           ;incstack = 0
 11217  005E70  0101               	movlb	1	; () banked
 11218  005E72  5111               	movf	___llmod@divisor& (0+255),w,b
 11219  005E74  0101               	movlb	1	; () banked
 11220  005E76  1112               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 11221  005E78  0101               	movlb	1	; () banked
 11222  005E7A  1113               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 11223  005E7C  0101               	movlb	1	; () banked
 11224  005E7E  1114               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 11225  005E80  B4D8               	btfsc	status,2,c
 11226  005E82  D03A               	goto	l1468
 11227                           
 11228                           ; BSR set to: 1
 11229  005E84  0E01               	movlw	1
 11230  005E86  0101               	movlb	1	; () banked
 11231  005E88  6F15               	movwf	___llmod@counter& (0+255),b
 11232  005E8A  D008               	goto	l10288
 11233  005E8C                     l10286:
 11234                           
 11235                           ; BSR set to: 1
 11236  005E8C  0101               	movlb	1	; () banked
 11237  005E8E  90D8               	bcf	status,0,c
 11238  005E90  3711               	rlcf	___llmod@divisor& (0+255),f,b
 11239  005E92  3712               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 11240  005E94  3713               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 11241  005E96  3714               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 11242  005E98  0101               	movlb	1	; () banked
 11243  005E9A  2B15               	incf	___llmod@counter& (0+255),f,b
 11244  005E9C                     l10288:
 11245                           
 11246                           ; BSR set to: 1
 11247  005E9C  0101               	movlb	1	; () banked
 11248  005E9E  AF14               	btfss	(___llmod@divisor+3)& (0+255),7,b
 11249  005EA0  D7F5               	goto	l10286
 11250  005EA2                     l10290:
 11251                           
 11252                           ; BSR set to: 1
 11253  005EA2  0101               	movlb	1	; () banked
 11254  005EA4  5111               	movf	___llmod@divisor& (0+255),w,b
 11255  005EA6  0101               	movlb	1	; () banked
 11256  005EA8  5D0D               	subwf	___llmod@dividend& (0+255),w,b
 11257  005EAA  0101               	movlb	1	; () banked
 11258  005EAC  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
 11259  005EAE  0101               	movlb	1	; () banked
 11260  005EB0  590E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 11261  005EB2  0101               	movlb	1	; () banked
 11262  005EB4  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
 11263  005EB6  0101               	movlb	1	; () banked
 11264  005EB8  590F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 11265  005EBA  0101               	movlb	1	; () banked
 11266  005EBC  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
 11267  005EBE  0101               	movlb	1	; () banked
 11268  005EC0  5910               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 11269  005EC2  A0D8               	btfss	status,0,c
 11270  005EC4  D010               	goto	l10294
 11271                           
 11272                           ; BSR set to: 1
 11273  005EC6  0101               	movlb	1	; () banked
 11274  005EC8  5111               	movf	___llmod@divisor& (0+255),w,b
 11275  005ECA  0101               	movlb	1	; () banked
 11276  005ECC  5F0D               	subwf	___llmod@dividend& (0+255),f,b
 11277  005ECE  0101               	movlb	1	; () banked
 11278  005ED0  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
 11279  005ED2  0101               	movlb	1	; () banked
 11280  005ED4  5B0E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 11281  005ED6  0101               	movlb	1	; () banked
 11282  005ED8  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
 11283  005EDA  0101               	movlb	1	; () banked
 11284  005EDC  5B0F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 11285  005EDE  0101               	movlb	1	; () banked
 11286  005EE0  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
 11287  005EE2  0101               	movlb	1	; () banked
 11288  005EE4  5B10               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 11289  005EE6                     l10294:
 11290                           
 11291                           ; BSR set to: 1
 11292  005EE6  0101               	movlb	1	; () banked
 11293  005EE8  90D8               	bcf	status,0,c
 11294  005EEA  3314               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 11295  005EEC  3313               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 11296  005EEE  3312               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 11297  005EF0  3311               	rrcf	___llmod@divisor& (0+255),f,b
 11298                           
 11299                           ; BSR set to: 1
 11300  005EF2  0101               	movlb	1	; () banked
 11301  005EF4  2F15               	decfsz	___llmod@counter& (0+255),f,b
 11302  005EF6  D7D5               	goto	l10290
 11303  005EF8                     l1468:
 11304                           
 11305                           ; BSR set to: 1
 11306  005EF8  C10D  F10D         	movff	___llmod@dividend,?___llmod
 11307  005EFC  C10E  F10E         	movff	___llmod@dividend+1,?___llmod+1
 11308  005F00  C10F  F10F         	movff	___llmod@dividend+2,?___llmod+2
 11309  005F04  C110  F110         	movff	___llmod@dividend+3,?___llmod+3
 11310                           
 11311                           ; BSR set to: 1
 11312  005F08  0012               	return		;funcret
 11313  005F0A                     __end_of___llmod:
 11314                           	opt stack 0
 11315                           tblptru	equ	0xFF8
 11316                           tblptrh	equ	0xFF7
 11317                           tblptrl	equ	0xFF6
 11318                           tablat	equ	0xFF5
 11319                           prodh	equ	0xFF4
 11320                           prodl	equ	0xFF3
 11321                           intcon	equ	0xFF2
 11322                           postinc0	equ	0xFEE
 11323                           wreg	equ	0xFE8
 11324                           postdec1	equ	0xFE5
 11325                           fsr1l	equ	0xFE1
 11326                           indf2	equ	0xFDF
 11327                           postinc2	equ	0xFDE
 11328                           postdec2	equ	0xFDD
 11329                           fsr2h	equ	0xFDA
 11330                           fsr2l	equ	0xFD9
 11331                           status	equ	0xFD8
 11332                           
 11333 ;; *************** function ___lldiv *****************
 11334 ;; Defined at:
 11335 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
 11336 ;; Parameters:    Size  Location     Type
 11337 ;;  dividend        4    0[BANK1 ] unsigned long 
 11338 ;;  divisor         4    4[BANK1 ] unsigned long 
 11339 ;; Auto vars:     Size  Location     Type
 11340 ;;  quotient        4    8[BANK1 ] unsigned long 
 11341 ;;  counter         1   12[BANK1 ] unsigned char 
 11342 ;; Return value:  Size  Location     Type
 11343 ;;                  4    0[BANK1 ] unsigned long 
 11344 ;; Registers used:
 11345 ;;		wreg, status,2, status,0
 11346 ;; Tracked objects:
 11347 ;;		On entry : 0/0
 11348 ;;		On exit  : 0/0
 11349 ;;		Unchanged: 0/0
 11350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11351 ;;      Params:         0       0       8       0       0       0       0
 11352 ;;      Locals:         0       0       5       0       0       0       0
 11353 ;;      Temps:          0       0       0       0       0       0       0
 11354 ;;      Totals:         0       0      13       0       0       0       0
 11355 ;;Total ram usage:       13 bytes
 11356 ;; Hardware stack levels used:    1
 11357 ;; Hardware stack levels required when called:   12
 11358 ;; This function calls:
 11359 ;;		Nothing
 11360 ;; This function is called by:
 11361 ;;		_printf
 11362 ;; This function uses a non-reentrant model
 11363 ;;
 11364                           
 11365                           	psect	text42
 11366  00590E                     __ptext42:
 11367                           	opt stack 0
 11368  00590E                     ___lldiv:
 11369                           	opt stack 15
 11370                           
 11371                           ; BSR set to: 1
 11372                           ;incstack = 0
 11373  00590E  0E00               	movlw	0
 11374  005910  0101               	movlb	1	; () banked
 11375  005912  6F08               	movwf	___lldiv@quotient& (0+255),b
 11376  005914  0E00               	movlw	0
 11377  005916  6F09               	movwf	(___lldiv@quotient+1)& (0+255),b
 11378  005918  0E00               	movlw	0
 11379  00591A  6F0A               	movwf	(___lldiv@quotient+2)& (0+255),b
 11380  00591C  0E00               	movlw	0
 11381  00591E  6F0B               	movwf	(___lldiv@quotient+3)& (0+255),b
 11382                           
 11383                           ; BSR set to: 1
 11384  005920  0101               	movlb	1	; () banked
 11385  005922  5104               	movf	___lldiv@divisor& (0+255),w,b
 11386  005924  0101               	movlb	1	; () banked
 11387  005926  1105               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 11388  005928  0101               	movlb	1	; () banked
 11389  00592A  1106               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 11390  00592C  0101               	movlb	1	; () banked
 11391  00592E  1107               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 11392  005930  B4D8               	btfsc	status,2,c
 11393  005932  D042               	goto	l1458
 11394                           
 11395                           ; BSR set to: 1
 11396  005934  0E01               	movlw	1
 11397  005936  0101               	movlb	1	; () banked
 11398  005938  6F0C               	movwf	___lldiv@counter& (0+255),b
 11399  00593A  D008               	goto	l10268
 11400  00593C                     l10266:
 11401                           
 11402                           ; BSR set to: 1
 11403  00593C  0101               	movlb	1	; () banked
 11404  00593E  90D8               	bcf	status,0,c
 11405  005940  3704               	rlcf	___lldiv@divisor& (0+255),f,b
 11406  005942  3705               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 11407  005944  3706               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 11408  005946  3707               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 11409  005948  0101               	movlb	1	; () banked
 11410  00594A  2B0C               	incf	___lldiv@counter& (0+255),f,b
 11411  00594C                     l10268:
 11412                           
 11413                           ; BSR set to: 1
 11414  00594C  0101               	movlb	1	; () banked
 11415  00594E  AF07               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 11416  005950  D7F5               	goto	l10266
 11417  005952                     l10270:
 11418                           
 11419                           ; BSR set to: 1
 11420  005952  0101               	movlb	1	; () banked
 11421  005954  90D8               	bcf	status,0,c
 11422  005956  3708               	rlcf	___lldiv@quotient& (0+255),f,b
 11423  005958  3709               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 11424  00595A  370A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 11425  00595C  370B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 11426                           
 11427                           ; BSR set to: 1
 11428  00595E  0101               	movlb	1	; () banked
 11429  005960  5104               	movf	___lldiv@divisor& (0+255),w,b
 11430  005962  0101               	movlb	1	; () banked
 11431  005964  5D00               	subwf	___lldiv@dividend& (0+255),w,b
 11432  005966  0101               	movlb	1	; () banked
 11433  005968  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11434  00596A  0101               	movlb	1	; () banked
 11435  00596C  5901               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 11436  00596E  0101               	movlb	1	; () banked
 11437  005970  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11438  005972  0101               	movlb	1	; () banked
 11439  005974  5902               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 11440  005976  0101               	movlb	1	; () banked
 11441  005978  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11442  00597A  0101               	movlb	1	; () banked
 11443  00597C  5903               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 11444  00597E  A0D8               	btfss	status,0,c
 11445  005980  D012               	goto	l10278
 11446                           
 11447                           ; BSR set to: 1
 11448  005982  0101               	movlb	1	; () banked
 11449  005984  5104               	movf	___lldiv@divisor& (0+255),w,b
 11450  005986  0101               	movlb	1	; () banked
 11451  005988  5F00               	subwf	___lldiv@dividend& (0+255),f,b
 11452  00598A  0101               	movlb	1	; () banked
 11453  00598C  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11454  00598E  0101               	movlb	1	; () banked
 11455  005990  5B01               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 11456  005992  0101               	movlb	1	; () banked
 11457  005994  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11458  005996  0101               	movlb	1	; () banked
 11459  005998  5B02               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 11460  00599A  0101               	movlb	1	; () banked
 11461  00599C  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11462  00599E  0101               	movlb	1	; () banked
 11463  0059A0  5B03               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 11464                           
 11465                           ; BSR set to: 1
 11466  0059A2  0101               	movlb	1	; () banked
 11467  0059A4  8108               	bsf	___lldiv@quotient& (0+255),0,b
 11468  0059A6                     l10278:
 11469                           
 11470                           ; BSR set to: 1
 11471  0059A6  0101               	movlb	1	; () banked
 11472  0059A8  90D8               	bcf	status,0,c
 11473  0059AA  3307               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 11474  0059AC  3306               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 11475  0059AE  3305               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 11476  0059B0  3304               	rrcf	___lldiv@divisor& (0+255),f,b
 11477                           
 11478                           ; BSR set to: 1
 11479  0059B2  0101               	movlb	1	; () banked
 11480  0059B4  2F0C               	decfsz	___lldiv@counter& (0+255),f,b
 11481  0059B6  D7CD               	goto	l10270
 11482  0059B8                     l1458:
 11483                           
 11484                           ; BSR set to: 1
 11485  0059B8  C108  F100         	movff	___lldiv@quotient,?___lldiv
 11486  0059BC  C109  F101         	movff	___lldiv@quotient+1,?___lldiv+1
 11487  0059C0  C10A  F102         	movff	___lldiv@quotient+2,?___lldiv+2
 11488  0059C4  C10B  F103         	movff	___lldiv@quotient+3,?___lldiv+3
 11489                           
 11490                           ; BSR set to: 1
 11491  0059C8  0012               	return		;funcret
 11492  0059CA                     __end_of___lldiv:
 11493                           	opt stack 0
 11494                           tblptru	equ	0xFF8
 11495                           tblptrh	equ	0xFF7
 11496                           tblptrl	equ	0xFF6
 11497                           tablat	equ	0xFF5
 11498                           prodh	equ	0xFF4
 11499                           prodl	equ	0xFF3
 11500                           intcon	equ	0xFF2
 11501                           postinc0	equ	0xFEE
 11502                           wreg	equ	0xFE8
 11503                           postdec1	equ	0xFE5
 11504                           fsr1l	equ	0xFE1
 11505                           indf2	equ	0xFDF
 11506                           postinc2	equ	0xFDE
 11507                           postdec2	equ	0xFDD
 11508                           fsr2h	equ	0xFDA
 11509                           fsr2l	equ	0xFD9
 11510                           status	equ	0xFD8
 11511                           
 11512 ;; *************** function ___ftsub *****************
 11513 ;; Defined at:
 11514 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
 11515 ;; Parameters:    Size  Location     Type
 11516 ;;  f1              3   57[BANK1 ] float 
 11517 ;;  f2              3   60[BANK1 ] float 
 11518 ;; Auto vars:     Size  Location     Type
 11519 ;;		None
 11520 ;; Return value:  Size  Location     Type
 11521 ;;                  3   57[BANK1 ] float 
 11522 ;; Registers used:
 11523 ;;		wreg, status,2, status,0, cstack
 11524 ;; Tracked objects:
 11525 ;;		On entry : 0/0
 11526 ;;		On exit  : 0/0
 11527 ;;		Unchanged: 0/0
 11528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11529 ;;      Params:         0       0       6       0       0       0       0
 11530 ;;      Locals:         0       0       0       0       0       0       0
 11531 ;;      Temps:          0       0       0       0       0       0       0
 11532 ;;      Totals:         0       0       6       0       0       0       0
 11533 ;;Total ram usage:        6 bytes
 11534 ;; Hardware stack levels used:    1
 11535 ;; Hardware stack levels required when called:   14
 11536 ;; This function calls:
 11537 ;;		___ftadd
 11538 ;; This function is called by:
 11539 ;;		_printf
 11540 ;; This function uses a non-reentrant model
 11541 ;;
 11542                           
 11543                           	psect	text43
 11544  006CFA                     __ptext43:
 11545                           	opt stack 0
 11546  006CFA                     ___ftsub:
 11547                           	opt stack 13
 11548                           
 11549                           ; BSR set to: 1
 11550                           ;incstack = 0
 11551  006CFA  0101               	movlb	1	; () banked
 11552  006CFC  513C               	movf	___ftsub@f2& (0+255),w,b
 11553  006CFE  0101               	movlb	1	; () banked
 11554  006D00  113D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 11555  006D02  0101               	movlb	1	; () banked
 11556  006D04  113E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 11557  006D06  B4D8               	btfsc	status,2,c
 11558  006D08  D009               	goto	l10234
 11559                           
 11560                           ; BSR set to: 1
 11561  006D0A  0E00               	movlw	0
 11562  006D0C  0101               	movlb	1	; () banked
 11563  006D0E  1B3C               	xorwf	___ftsub@f2& (0+255),f,b
 11564  006D10  0E00               	movlw	0
 11565  006D12  0101               	movlb	1	; () banked
 11566  006D14  1B3D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 11567  006D16  0E80               	movlw	128
 11568  006D18  0101               	movlb	1	; () banked
 11569  006D1A  1B3E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 11570  006D1C                     l10234:
 11571                           
 11572                           ; BSR set to: 1
 11573  006D1C  C139  F12D         	movff	___ftsub@f1,___ftadd@f1
 11574  006D20  C13A  F12E         	movff	___ftsub@f1+1,___ftadd@f1+1
 11575  006D24  C13B  F12F         	movff	___ftsub@f1+2,___ftadd@f1+2
 11576  006D28  C13C  F130         	movff	___ftsub@f2,___ftadd@f2
 11577  006D2C  C13D  F131         	movff	___ftsub@f2+1,___ftadd@f2+1
 11578  006D30  C13E  F132         	movff	___ftsub@f2+2,___ftadd@f2+2
 11579  006D34  ECEC  F013         	call	___ftadd	;wreg free
 11580  006D38  C12D  F139         	movff	?___ftadd,?___ftsub
 11581  006D3C  C12E  F13A         	movff	?___ftadd+1,?___ftsub+1
 11582  006D40  C12F  F13B         	movff	?___ftadd+2,?___ftsub+2
 11583  006D44  0012               	return	
 11584  006D46                     __end_of___ftsub:
 11585                           	opt stack 0
 11586                           tblptru	equ	0xFF8
 11587                           tblptrh	equ	0xFF7
 11588                           tblptrl	equ	0xFF6
 11589                           tablat	equ	0xFF5
 11590                           prodh	equ	0xFF4
 11591                           prodl	equ	0xFF3
 11592                           intcon	equ	0xFF2
 11593                           postinc0	equ	0xFEE
 11594                           wreg	equ	0xFE8
 11595                           postdec1	equ	0xFE5
 11596                           fsr1l	equ	0xFE1
 11597                           indf2	equ	0xFDF
 11598                           postinc2	equ	0xFDE
 11599                           postdec2	equ	0xFDD
 11600                           fsr2h	equ	0xFDA
 11601                           fsr2l	equ	0xFD9
 11602                           status	equ	0xFD8
 11603                           
 11604 ;; *************** function ___ftneg *****************
 11605 ;; Defined at:
 11606 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
 11607 ;; Parameters:    Size  Location     Type
 11608 ;;  f1              3    0[BANK1 ] float 
 11609 ;; Auto vars:     Size  Location     Type
 11610 ;;		None
 11611 ;; Return value:  Size  Location     Type
 11612 ;;                  3    0[BANK1 ] float 
 11613 ;; Registers used:
 11614 ;;		wreg, status,2, status,0
 11615 ;; Tracked objects:
 11616 ;;		On entry : 0/0
 11617 ;;		On exit  : 0/0
 11618 ;;		Unchanged: 0/0
 11619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11620 ;;      Params:         0       0       3       0       0       0       0
 11621 ;;      Locals:         0       0       0       0       0       0       0
 11622 ;;      Temps:          0       0       0       0       0       0       0
 11623 ;;      Totals:         0       0       3       0       0       0       0
 11624 ;;Total ram usage:        3 bytes
 11625 ;; Hardware stack levels used:    1
 11626 ;; Hardware stack levels required when called:   12
 11627 ;; This function calls:
 11628 ;;		Nothing
 11629 ;; This function is called by:
 11630 ;;		_printf
 11631 ;; This function uses a non-reentrant model
 11632 ;;
 11633                           
 11634                           	psect	text44
 11635  00707C                     __ptext44:
 11636                           	opt stack 0
 11637  00707C                     ___ftneg:
 11638                           	opt stack 15
 11639                           
 11640                           ;incstack = 0
 11641  00707C  0101               	movlb	1	; () banked
 11642  00707E  5100               	movf	___ftneg@f1& (0+255),w,b
 11643  007080  0101               	movlb	1	; () banked
 11644  007082  1101               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 11645  007084  0101               	movlb	1	; () banked
 11646  007086  1102               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 11647  007088  B4D8               	btfsc	status,2,c
 11648  00708A  D009               	goto	l1408
 11649                           
 11650                           ; BSR set to: 1
 11651  00708C  0E00               	movlw	0
 11652  00708E  0101               	movlb	1	; () banked
 11653  007090  1B00               	xorwf	___ftneg@f1& (0+255),f,b
 11654  007092  0E00               	movlw	0
 11655  007094  0101               	movlb	1	; () banked
 11656  007096  1B01               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 11657  007098  0E80               	movlw	128
 11658  00709A  0101               	movlb	1	; () banked
 11659  00709C  1B02               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 11660  00709E                     l1408:
 11661                           
 11662                           ; BSR set to: 1
 11663  00709E  C100  F100         	movff	___ftneg@f1,?___ftneg
 11664  0070A2  C101  F101         	movff	___ftneg@f1+1,?___ftneg+1
 11665  0070A6  C102  F102         	movff	___ftneg@f1+2,?___ftneg+2
 11666                           
 11667                           ; BSR set to: 1
 11668  0070AA  0012               	return		;funcret
 11669  0070AC                     __end_of___ftneg:
 11670                           	opt stack 0
 11671                           tblptru	equ	0xFF8
 11672                           tblptrh	equ	0xFF7
 11673                           tblptrl	equ	0xFF6
 11674                           tablat	equ	0xFF5
 11675                           prodh	equ	0xFF4
 11676                           prodl	equ	0xFF3
 11677                           intcon	equ	0xFF2
 11678                           postinc0	equ	0xFEE
 11679                           wreg	equ	0xFE8
 11680                           postdec1	equ	0xFE5
 11681                           fsr1l	equ	0xFE1
 11682                           indf2	equ	0xFDF
 11683                           postinc2	equ	0xFDE
 11684                           postdec2	equ	0xFDD
 11685                           fsr2h	equ	0xFDA
 11686                           fsr2l	equ	0xFD9
 11687                           status	equ	0xFD8
 11688                           
 11689 ;; *************** function ___ftge *****************
 11690 ;; Defined at:
 11691 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 11692 ;; Parameters:    Size  Location     Type
 11693 ;;  ff1             3    0[BANK1 ] float 
 11694 ;;  ff2             3    3[BANK1 ] float 
 11695 ;; Auto vars:     Size  Location     Type
 11696 ;;		None
 11697 ;; Return value:  Size  Location     Type
 11698 ;;		None               void
 11699 ;; Registers used:
 11700 ;;		wreg, status,2, status,0
 11701 ;; Tracked objects:
 11702 ;;		On entry : 0/0
 11703 ;;		On exit  : 0/0
 11704 ;;		Unchanged: 0/0
 11705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11706 ;;      Params:         0       0       6       0       0       0       0
 11707 ;;      Locals:         0       0       0       0       0       0       0
 11708 ;;      Temps:          0       0       3       0       0       0       0
 11709 ;;      Totals:         0       0       9       0       0       0       0
 11710 ;;Total ram usage:        9 bytes
 11711 ;; Hardware stack levels used:    1
 11712 ;; Hardware stack levels required when called:   12
 11713 ;; This function calls:
 11714 ;;		Nothing
 11715 ;; This function is called by:
 11716 ;;		_printf
 11717 ;; This function uses a non-reentrant model
 11718 ;;
 11719                           
 11720                           	psect	text45
 11721  005604                     __ptext45:
 11722                           	opt stack 0
 11723  005604                     ___ftge:
 11724                           	opt stack 15
 11725                           
 11726                           ; BSR set to: 1
 11727                           ;incstack = 0
 11728  005604  0101               	movlb	1	; () banked
 11729  005606  AF02               	btfss	(___ftge@ff1+2)& (0+255),7,b
 11730  005608  D01D               	goto	l10242
 11731                           
 11732                           ; BSR set to: 1
 11733  00560A  C100  F106         	movff	___ftge@ff1,??___ftge
 11734  00560E  C101  F107         	movff	___ftge@ff1+1,??___ftge+1
 11735  005612  C102  F108         	movff	___ftge@ff1+2,??___ftge+2
 11736  005616  0101               	movlb	1	; () banked
 11737  005618  1F06               	comf	??___ftge& (0+255),f,b
 11738  00561A  1F07               	comf	(??___ftge+1)& (0+255),f,b
 11739  00561C  1F08               	comf	(??___ftge+2)& (0+255),f,b
 11740  00561E  2B06               	incf	??___ftge& (0+255),f,b
 11741  005620  0E00               	movlw	0
 11742  005622  2307               	addwfc	(??___ftge+1)& (0+255),f,b
 11743  005624  2308               	addwfc	(??___ftge+2)& (0+255),f,b
 11744  005626  0E00               	movlw	0
 11745  005628  0101               	movlb	1	; () banked
 11746  00562A  2506               	addwf	??___ftge& (0+255),w,b
 11747  00562C  0101               	movlb	1	; () banked
 11748  00562E  6F00               	movwf	___ftge@ff1& (0+255),b
 11749  005630  0E00               	movlw	0
 11750  005632  0101               	movlb	1	; () banked
 11751  005634  2107               	addwfc	(??___ftge+1)& (0+255),w,b
 11752  005636  0101               	movlb	1	; () banked
 11753  005638  6F01               	movwf	(___ftge@ff1+1)& (0+255),b
 11754  00563A  0E80               	movlw	128
 11755  00563C  0101               	movlb	1	; () banked
 11756  00563E  2108               	addwfc	(??___ftge+2)& (0+255),w,b
 11757  005640  0101               	movlb	1	; () banked
 11758  005642  6F02               	movwf	(___ftge@ff1+2)& (0+255),b
 11759  005644                     l10242:
 11760                           
 11761                           ; BSR set to: 1
 11762  005644  0101               	movlb	1	; () banked
 11763  005646  AF05               	btfss	(___ftge@ff2+2)& (0+255),7,b
 11764  005648  D01D               	goto	l10246
 11765                           
 11766                           ; BSR set to: 1
 11767  00564A  C103  F106         	movff	___ftge@ff2,??___ftge
 11768  00564E  C104  F107         	movff	___ftge@ff2+1,??___ftge+1
 11769  005652  C105  F108         	movff	___ftge@ff2+2,??___ftge+2
 11770  005656  0101               	movlb	1	; () banked
 11771  005658  1F06               	comf	??___ftge& (0+255),f,b
 11772  00565A  1F07               	comf	(??___ftge+1)& (0+255),f,b
 11773  00565C  1F08               	comf	(??___ftge+2)& (0+255),f,b
 11774  00565E  2B06               	incf	??___ftge& (0+255),f,b
 11775  005660  0E00               	movlw	0
 11776  005662  2307               	addwfc	(??___ftge+1)& (0+255),f,b
 11777  005664  2308               	addwfc	(??___ftge+2)& (0+255),f,b
 11778  005666  0E00               	movlw	0
 11779  005668  0101               	movlb	1	; () banked
 11780  00566A  2506               	addwf	??___ftge& (0+255),w,b
 11781  00566C  0101               	movlb	1	; () banked
 11782  00566E  6F03               	movwf	___ftge@ff2& (0+255),b
 11783  005670  0E00               	movlw	0
 11784  005672  0101               	movlb	1	; () banked
 11785  005674  2107               	addwfc	(??___ftge+1)& (0+255),w,b
 11786  005676  0101               	movlb	1	; () banked
 11787  005678  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
 11788  00567A  0E80               	movlw	128
 11789  00567C  0101               	movlb	1	; () banked
 11790  00567E  2108               	addwfc	(??___ftge+2)& (0+255),w,b
 11791  005680  0101               	movlb	1	; () banked
 11792  005682  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
 11793  005684                     l10246:
 11794                           
 11795                           ; BSR set to: 1
 11796  005684  0E00               	movlw	0
 11797  005686  0101               	movlb	1	; () banked
 11798  005688  1B00               	xorwf	___ftge@ff1& (0+255),f,b
 11799  00568A  0E00               	movlw	0
 11800  00568C  0101               	movlb	1	; () banked
 11801  00568E  1B01               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 11802  005690  0E80               	movlw	128
 11803  005692  0101               	movlb	1	; () banked
 11804  005694  1B02               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 11805                           
 11806                           ; BSR set to: 1
 11807  005696  0E00               	movlw	0
 11808  005698  0101               	movlb	1	; () banked
 11809  00569A  1B03               	xorwf	___ftge@ff2& (0+255),f,b
 11810  00569C  0E00               	movlw	0
 11811  00569E  0101               	movlb	1	; () banked
 11812  0056A0  1B04               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 11813  0056A2  0E80               	movlw	128
 11814  0056A4  0101               	movlb	1	; () banked
 11815  0056A6  1B05               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 11816  0056A8  0101               	movlb	1	; () banked
 11817  0056AA  5103               	movf	___ftge@ff2& (0+255),w,b
 11818  0056AC  0101               	movlb	1	; () banked
 11819  0056AE  5D00               	subwf	___ftge@ff1& (0+255),w,b
 11820  0056B0  0101               	movlb	1	; () banked
 11821  0056B2  5104               	movf	(___ftge@ff2+1)& (0+255),w,b
 11822  0056B4  0101               	movlb	1	; () banked
 11823  0056B6  5901               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 11824  0056B8  0101               	movlb	1	; () banked
 11825  0056BA  5105               	movf	(___ftge@ff2+2)& (0+255),w,b
 11826  0056BC  0101               	movlb	1	; () banked
 11827  0056BE  5902               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 11828  0056C0  B0D8               	btfsc	status,0,c
 11829  0056C2  D002               	goto	l10252
 11830                           
 11831                           ; BSR set to: 1
 11832  0056C4  90D8               	bcf	status,0,c
 11833  0056C6  0012               	return	
 11834  0056C8                     l10252:
 11835                           
 11836                           ; BSR set to: 1
 11837  0056C8  80D8               	bsf	status,0,c
 11838                           
 11839                           ; BSR set to: 1
 11840  0056CA  0012               	return	
 11841  0056CC                     __end_of___ftge:
 11842                           	opt stack 0
 11843                           tblptru	equ	0xFF8
 11844                           tblptrh	equ	0xFF7
 11845                           tblptrl	equ	0xFF6
 11846                           tablat	equ	0xFF5
 11847                           prodh	equ	0xFF4
 11848                           prodl	equ	0xFF3
 11849                           intcon	equ	0xFF2
 11850                           postinc0	equ	0xFEE
 11851                           wreg	equ	0xFE8
 11852                           postdec1	equ	0xFE5
 11853                           fsr1l	equ	0xFE1
 11854                           indf2	equ	0xFDF
 11855                           postinc2	equ	0xFDE
 11856                           postdec2	equ	0xFDD
 11857                           fsr2h	equ	0xFDA
 11858                           fsr2l	equ	0xFD9
 11859                           status	equ	0xFD8
 11860                           
 11861 ;; *************** function _clockConfig *****************
 11862 ;; Defined at:
 11863 ;;		line 76 in file "source/SYSConfig.h"
 11864 ;; Parameters:    Size  Location     Type
 11865 ;;		None
 11866 ;; Auto vars:     Size  Location     Type
 11867 ;;		None
 11868 ;; Return value:  Size  Location     Type
 11869 ;;                  1    wreg      void 
 11870 ;; Registers used:
 11871 ;;		wreg, status,2
 11872 ;; Tracked objects:
 11873 ;;		On entry : 0/0
 11874 ;;		On exit  : 0/0
 11875 ;;		Unchanged: 0/0
 11876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11877 ;;      Params:         0       0       0       0       0       0       0
 11878 ;;      Locals:         0       0       0       0       0       0       0
 11879 ;;      Temps:          0       0       0       0       0       0       0
 11880 ;;      Totals:         0       0       0       0       0       0       0
 11881 ;;Total ram usage:        0 bytes
 11882 ;; Hardware stack levels used:    1
 11883 ;; Hardware stack levels required when called:   12
 11884 ;; This function calls:
 11885 ;;		Nothing
 11886 ;; This function is called by:
 11887 ;;		_main
 11888 ;; This function uses a non-reentrant model
 11889 ;;
 11890                           
 11891                           	psect	text46
 11892  00720A                     __ptext46:
 11893                           	opt stack 0
 11894  00720A                     _clockConfig:
 11895                           	opt stack 18
 11896                           
 11897                           ;SYSConfig.h: 77: OSCCONbits.IDLEN = 1;
 11898                           
 11899                           ; BSR set to: 1
 11900                           ;incstack = 0
 11901  00720A  8ED3               	bsf	4051,7,c	;volatile
 11902                           
 11903                           ;SYSConfig.h: 78: OSCCONbits.IRCF = 0b111;
 11904  00720C  88D3               	bsf	4051,4,c	;volatile
 11905  00720E  8AD3               	bsf	4051,5,c	;volatile
 11906  007210  8CD3               	bsf	4051,6,c	;volatile
 11907  007212                     l91:
 11908  007212  A4D3               	btfss	4051,2,c	;volatile
 11909  007214  D7FE               	goto	l91
 11910                           
 11911                           ;SYSConfig.h: 80: OSCCONbits.SCS = 0b11;
 11912  007216  0E03               	movlw	3
 11913  007218  12D3               	iorwf	4051,f,c	;volatile
 11914                           
 11915                           ;SYSConfig.h: 81: OSCCON2bits.MFIOSEL = 0;
 11916  00721A  98D2               	bcf	4050,4,c	;volatile
 11917                           
 11918                           ;SYSConfig.h: 82: OSCCON2bits.SOSCGO = 0;
 11919  00721C  96D2               	bcf	4050,3,c	;volatile
 11920                           
 11921                           ;SYSConfig.h: 83: OSCTUNEbits.INTSRC = 0;
 11922  00721E  9E9B               	bcf	3995,7,c	;volatile
 11923                           
 11924                           ;SYSConfig.h: 84: OSCTUNEbits.TUN = 0b011111;
 11925  007220  809B               	bsf	3995,0,c	;volatile
 11926  007222  829B               	bsf	3995,1,c	;volatile
 11927  007224  849B               	bsf	3995,2,c	;volatile
 11928  007226  869B               	bsf	3995,3,c	;volatile
 11929  007228  889B               	bsf	3995,4,c	;volatile
 11930  00722A  9A9B               	bcf	3995,5,c	;volatile
 11931                           
 11932                           ;SYSConfig.h: 85: OSCTUNEbits.PLLEN = 1;
 11933  00722C  8C9B               	bsf	3995,6,c	;volatile
 11934  00722E  0012               	return		;funcret
 11935  007230                     __end_of_clockConfig:
 11936                           	opt stack 0
 11937                           tblptru	equ	0xFF8
 11938                           tblptrh	equ	0xFF7
 11939                           tblptrl	equ	0xFF6
 11940                           tablat	equ	0xFF5
 11941                           prodh	equ	0xFF4
 11942                           prodl	equ	0xFF3
 11943                           intcon	equ	0xFF2
 11944                           postinc0	equ	0xFEE
 11945                           wreg	equ	0xFE8
 11946                           postdec1	equ	0xFE5
 11947                           fsr1l	equ	0xFE1
 11948                           indf2	equ	0xFDF
 11949                           postinc2	equ	0xFDE
 11950                           postdec2	equ	0xFDD
 11951                           fsr2h	equ	0xFDA
 11952                           fsr2l	equ	0xFD9
 11953                           status	equ	0xFD8
 11954                           
 11955 ;; *************** function _buttonChecking *****************
 11956 ;; Defined at:
 11957 ;;		line 9 in file "source/ButtonController.h"
 11958 ;; Parameters:    Size  Location     Type
 11959 ;;		None
 11960 ;; Auto vars:     Size  Location     Type
 11961 ;;		None
 11962 ;; Return value:  Size  Location     Type
 11963 ;;                  1    wreg      void 
 11964 ;; Registers used:
 11965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11966 ;; Tracked objects:
 11967 ;;		On entry : 0/0
 11968 ;;		On exit  : 0/0
 11969 ;;		Unchanged: 0/0
 11970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11971 ;;      Params:         0       0       0       0       0       0       0
 11972 ;;      Locals:         0       0       0       0       0       0       0
 11973 ;;      Temps:          0       0       0       0       0       0       0
 11974 ;;      Totals:         0       0       0       0       0       0       0
 11975 ;;Total ram usage:        0 bytes
 11976 ;; Hardware stack levels used:    1
 11977 ;; Hardware stack levels required when called:   18
 11978 ;; This function calls:
 11979 ;;		_delay_ms
 11980 ;;		_longPressDOWN
 11981 ;;		_longPressENTER
 11982 ;;		_longPressRETRO
 11983 ;;		_longPressUP
 11984 ;;		_pressDOWN
 11985 ;;		_pressENTER
 11986 ;;		_pressRETRO
 11987 ;;		_pressUP
 11988 ;;		_releaseDOWN
 11989 ;;		_releaseENTER
 11990 ;;		_releaseRETRO
 11991 ;;		_releaseUP
 11992 ;; This function is called by:
 11993 ;;		_main
 11994 ;; This function uses a non-reentrant model
 11995 ;;
 11996                           
 11997                           	psect	text47
 11998  00227A                     __ptext47:
 11999                           	opt stack 0
 12000  00227A                     _buttonChecking:
 12001                           	opt stack 12
 12002                           
 12003                           ;ButtonController.h: 10: if(!PORTAbits.RA2 && lastSttUP) {
 12004                           
 12005                           ;incstack = 0
 12006  00227A  B480               	btfsc	3968,2,c	;volatile
 12007  00227C  D010               	goto	l871
 12008  00227E  0100               	movlb	0	; () banked
 12009  002280  51D8               	movf	_lastSttUP& (0+255),w,b
 12010  002282  0100               	movlb	0	; () banked
 12011  002284  B4D8               	btfsc	status,2,c
 12012  002286  D00B               	goto	l871
 12013                           
 12014                           ; BSR set to: 0
 12015                           ;ButtonController.h: 11: lastSttUP = 0;
 12016  002288  0E00               	movlw	0
 12017  00228A  0100               	movlb	0	; () banked
 12018  00228C  6FD8               	movwf	_lastSttUP& (0+255),b
 12019                           
 12020                           ; BSR set to: 0
 12021                           ;ButtonController.h: 12: delay_ms(200);
 12022  00228E  0E00               	movlw	0
 12023  002290  0101               	movlb	1	; () banked
 12024  002292  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12025  002294  0EC8               	movlw	200
 12026  002296  6F00               	movwf	delay_ms@del& (0+255),b
 12027  002298  EC5B  F037         	call	_delay_ms	;wreg free
 12028                           
 12029                           ;ButtonController.h: 13: }else if(PORTAbits.RA2 && !lastSttUP) {
 12030  00229C  D044               	goto	l11858
 12031  00229E                     l871:
 12032  00229E  A480               	btfss	3968,2,c	;volatile
 12033  0022A0  D016               	goto	l11836
 12034  0022A2  0100               	movlb	0	; () banked
 12035  0022A4  51D8               	movf	_lastSttUP& (0+255),w,b
 12036  0022A6  0100               	movlb	0	; () banked
 12037  0022A8  A4D8               	btfss	status,2,c
 12038  0022AA  D011               	goto	l11836
 12039                           
 12040                           ; BSR set to: 0
 12041                           ;ButtonController.h: 14: lastSttUP = 1;
 12042  0022AC  0E01               	movlw	1
 12043  0022AE  0100               	movlb	0	; () banked
 12044  0022B0  6FD8               	movwf	_lastSttUP& (0+255),b
 12045                           
 12046                           ; BSR set to: 0
 12047                           ;ButtonController.h: 15: if(holdUPcont < 10)
 12048  0022B2  0E0A               	movlw	10
 12049  0022B4  0101               	movlb	1	; () banked
 12050  0022B6  61BC               	cpfslt	_holdUPcont& (0+255),b
 12051  0022B8  D002               	goto	l11834
 12052                           
 12053                           ; BSR set to: 1
 12054                           ;ButtonController.h: 16: pressUP();
 12055  0022BA  ECD3  F023         	call	_pressUP	;wreg free
 12056  0022BE                     l11834:
 12057                           
 12058                           ;ButtonController.h: 17: delay_ms(50);
 12059  0022BE  0E00               	movlw	0
 12060  0022C0  0101               	movlb	1	; () banked
 12061  0022C2  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12062  0022C4  0E32               	movlw	50
 12063  0022C6  6F00               	movwf	delay_ms@del& (0+255),b
 12064  0022C8  EC5B  F037         	call	_delay_ms	;wreg free
 12065                           
 12066                           ;ButtonController.h: 18: }else if(PORTAbits.RA2 == lastSttUP) {
 12067  0022CC  D02C               	goto	l11858
 12068  0022CE                     l11836:
 12069  0022CE  A480               	btfss	3968,2,c	;volatile
 12070  0022D0  D002               	goto	u17540
 12071  0022D2  0E01               	movlw	1
 12072  0022D4  D001               	goto	u17546
 12073  0022D6                     u17540:
 12074  0022D6  0E00               	movlw	0
 12075  0022D8                     u17546:
 12076  0022D8  0100               	movlb	0	; () banked
 12077  0022DA  19D8               	xorwf	_lastSttUP& (0+255),w,b
 12078  0022DC  A4D8               	btfss	status,2,c
 12079  0022DE  D023               	goto	l11858
 12080                           
 12081                           ; BSR set to: 0
 12082                           ;ButtonController.h: 19: if(PORTAbits.RA2) {
 12083  0022E0  A480               	btfss	3968,2,c	;volatile
 12084  0022E2  D006               	goto	l11844
 12085                           
 12086                           ; BSR set to: 0
 12087                           ;ButtonController.h: 20: holdUPcont = 0;
 12088  0022E4  0E00               	movlw	0
 12089  0022E6  0101               	movlb	1	; () banked
 12090  0022E8  6FBC               	movwf	_holdUPcont& (0+255),b
 12091                           
 12092                           ; BSR set to: 1
 12093                           ;ButtonController.h: 21: releaseUP();
 12094  0022EA  ECB9  F039         	call	_releaseUP	;wreg free
 12095                           
 12096                           ;ButtonController.h: 22: }else {
 12097  0022EE  D01B               	goto	l11858
 12098  0022F0                     l11844:
 12099                           
 12100                           ;ButtonController.h: 23: if(!UPsecurLock)
 12101  0022F0  0100               	movlb	0	; () banked
 12102  0022F2  51BA               	movf	_UPsecurLock& (0+255),w,b
 12103  0022F4  A4D8               	btfss	status,2,c
 12104  0022F6  D002               	goto	l11848
 12105                           
 12106                           ; BSR set to: 0
 12107                           ;ButtonController.h: 24: holdUPcont++;
 12108  0022F8  0101               	movlb	1	; () banked
 12109  0022FA  2BBC               	incf	_holdUPcont& (0+255),f,b
 12110  0022FC                     l11848:
 12111                           
 12112                           ;ButtonController.h: 25: if(holdUPcont > 9) {
 12113  0022FC  0E09               	movlw	9
 12114  0022FE  0101               	movlb	1	; () banked
 12115  002300  65BC               	cpfsgt	_holdUPcont& (0+255),b
 12116  002302  D00A               	goto	l11856
 12117                           
 12118                           ; BSR set to: 1
 12119                           ;ButtonController.h: 26: if(holdUPcont < 26)
 12120  002304  0E1A               	movlw	26
 12121  002306  0101               	movlb	1	; () banked
 12122  002308  61BC               	cpfslt	_holdUPcont& (0+255),b
 12123  00230A  D003               	goto	l11854
 12124                           
 12125                           ; BSR set to: 1
 12126                           ;ButtonController.h: 27: longPressUP();
 12127  00230C  ECB5  F034         	call	_longPressUP	;wreg free
 12128  002310  D003               	goto	l11856
 12129  002312                     l11854:
 12130                           
 12131                           ;ButtonController.h: 28: else
 12132                           ;ButtonController.h: 29: UPsecurLock = 1;
 12133  002312  0E01               	movlw	1
 12134  002314  0100               	movlb	0	; () banked
 12135  002316  6FBA               	movwf	_UPsecurLock& (0+255),b
 12136  002318                     l11856:
 12137                           
 12138                           ;ButtonController.h: 30: }
 12139                           ;ButtonController.h: 31: delay_ms(200);
 12140  002318  0E00               	movlw	0
 12141  00231A  0101               	movlb	1	; () banked
 12142  00231C  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12143  00231E  0EC8               	movlw	200
 12144  002320  6F00               	movwf	delay_ms@del& (0+255),b
 12145  002322  EC5B  F037         	call	_delay_ms	;wreg free
 12146  002326                     l11858:
 12147                           
 12148                           ;ButtonController.h: 32: }
 12149                           ;ButtonController.h: 33: }
 12150                           ;ButtonController.h: 34: if(!PORTAbits.RA3 && lastSttDOWN) {
 12151  002326  B680               	btfsc	3968,3,c	;volatile
 12152  002328  D010               	goto	l883
 12153  00232A  0100               	movlb	0	; () banked
 12154  00232C  51D5               	movf	_lastSttDOWN& (0+255),w,b
 12155  00232E  0100               	movlb	0	; () banked
 12156  002330  B4D8               	btfsc	status,2,c
 12157  002332  D00B               	goto	l883
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;ButtonController.h: 35: lastSttDOWN = 0;
 12161  002334  0E00               	movlw	0
 12162  002336  0100               	movlb	0	; () banked
 12163  002338  6FD5               	movwf	_lastSttDOWN& (0+255),b
 12164                           
 12165                           ; BSR set to: 0
 12166                           ;ButtonController.h: 36: delay_ms(200);
 12167  00233A  0E00               	movlw	0
 12168  00233C  0101               	movlb	1	; () banked
 12169  00233E  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12170  002340  0EC8               	movlw	200
 12171  002342  6F00               	movwf	delay_ms@del& (0+255),b
 12172  002344  EC5B  F037         	call	_delay_ms	;wreg free
 12173                           
 12174                           ;ButtonController.h: 37: }else if(PORTAbits.RA3 && !lastSttDOWN) {
 12175  002348  D044               	goto	l11898
 12176  00234A                     l883:
 12177  00234A  A680               	btfss	3968,3,c	;volatile
 12178  00234C  D016               	goto	l11876
 12179  00234E  0100               	movlb	0	; () banked
 12180  002350  51D5               	movf	_lastSttDOWN& (0+255),w,b
 12181  002352  0100               	movlb	0	; () banked
 12182  002354  A4D8               	btfss	status,2,c
 12183  002356  D011               	goto	l11876
 12184                           
 12185                           ; BSR set to: 0
 12186                           ;ButtonController.h: 38: lastSttDOWN = 1;
 12187  002358  0E01               	movlw	1
 12188  00235A  0100               	movlb	0	; () banked
 12189  00235C  6FD5               	movwf	_lastSttDOWN& (0+255),b
 12190                           
 12191                           ; BSR set to: 0
 12192                           ;ButtonController.h: 39: if(holdDOWNcont < 10)
 12193  00235E  0E0A               	movlw	10
 12194  002360  0100               	movlb	0	; () banked
 12195  002362  61BC               	cpfslt	_holdDOWNcont& (0+255),b
 12196  002364  D002               	goto	l11874
 12197                           
 12198                           ; BSR set to: 0
 12199                           ;ButtonController.h: 40: pressDOWN();
 12200  002366  EC75  F026         	call	_pressDOWN	;wreg free
 12201  00236A                     l11874:
 12202                           
 12203                           ;ButtonController.h: 41: delay_ms(50);
 12204  00236A  0E00               	movlw	0
 12205  00236C  0101               	movlb	1	; () banked
 12206  00236E  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12207  002370  0E32               	movlw	50
 12208  002372  6F00               	movwf	delay_ms@del& (0+255),b
 12209  002374  EC5B  F037         	call	_delay_ms	;wreg free
 12210                           
 12211                           ;ButtonController.h: 42: }else if(PORTAbits.RA3 == lastSttDOWN) {
 12212  002378  D02C               	goto	l11898
 12213  00237A                     l11876:
 12214  00237A  A680               	btfss	3968,3,c	;volatile
 12215  00237C  D002               	goto	u17650
 12216  00237E  0E01               	movlw	1
 12217  002380  D001               	goto	u17656
 12218  002382                     u17650:
 12219  002382  0E00               	movlw	0
 12220  002384                     u17656:
 12221  002384  0100               	movlb	0	; () banked
 12222  002386  19D5               	xorwf	_lastSttDOWN& (0+255),w,b
 12223  002388  A4D8               	btfss	status,2,c
 12224  00238A  D023               	goto	l11898
 12225                           
 12226                           ; BSR set to: 0
 12227                           ;ButtonController.h: 43: if(PORTAbits.RA3) {
 12228  00238C  A680               	btfss	3968,3,c	;volatile
 12229  00238E  D006               	goto	l11884
 12230                           
 12231                           ; BSR set to: 0
 12232                           ;ButtonController.h: 44: holdDOWNcont = 0;
 12233  002390  0E00               	movlw	0
 12234  002392  0100               	movlb	0	; () banked
 12235  002394  6FBC               	movwf	_holdDOWNcont& (0+255),b
 12236                           
 12237                           ; BSR set to: 0
 12238                           ;ButtonController.h: 45: releaseDOWN();
 12239  002396  ECBF  F039         	call	_releaseDOWN	;wreg free
 12240                           
 12241                           ;ButtonController.h: 46: }else {
 12242  00239A  D01B               	goto	l11898
 12243  00239C                     l11884:
 12244                           
 12245                           ;ButtonController.h: 47: if(!DOWNsecurLock)
 12246  00239C  0100               	movlb	0	; () banked
 12247  00239E  51B6               	movf	_DOWNsecurLock& (0+255),w,b
 12248  0023A0  A4D8               	btfss	status,2,c
 12249  0023A2  D002               	goto	l11888
 12250                           
 12251                           ; BSR set to: 0
 12252                           ;ButtonController.h: 48: holdDOWNcont++;
 12253  0023A4  0100               	movlb	0	; () banked
 12254  0023A6  2BBC               	incf	_holdDOWNcont& (0+255),f,b
 12255  0023A8                     l11888:
 12256                           
 12257                           ; BSR set to: 0
 12258                           ;ButtonController.h: 49: if(holdDOWNcont > 9) {
 12259  0023A8  0E09               	movlw	9
 12260  0023AA  0100               	movlb	0	; () banked
 12261  0023AC  65BC               	cpfsgt	_holdDOWNcont& (0+255),b
 12262  0023AE  D00A               	goto	l11896
 12263                           
 12264                           ; BSR set to: 0
 12265                           ;ButtonController.h: 50: if(holdDOWNcont < 26)
 12266  0023B0  0E1A               	movlw	26
 12267  0023B2  0100               	movlb	0	; () banked
 12268  0023B4  61BC               	cpfslt	_holdDOWNcont& (0+255),b
 12269  0023B6  D003               	goto	l11894
 12270                           
 12271                           ; BSR set to: 0
 12272                           ;ButtonController.h: 51: longPressDOWN();
 12273  0023B8  ECDB  F038         	call	_longPressDOWN	;wreg free
 12274  0023BC  D003               	goto	l11896
 12275  0023BE                     l11894:
 12276                           
 12277                           ;ButtonController.h: 52: else
 12278                           ;ButtonController.h: 53: DOWNsecurLock = 1;
 12279  0023BE  0E01               	movlw	1
 12280  0023C0  0100               	movlb	0	; () banked
 12281  0023C2  6FB6               	movwf	_DOWNsecurLock& (0+255),b
 12282  0023C4                     l11896:
 12283                           
 12284                           ;ButtonController.h: 54: }
 12285                           ;ButtonController.h: 55: delay_ms(200);
 12286  0023C4  0E00               	movlw	0
 12287  0023C6  0101               	movlb	1	; () banked
 12288  0023C8  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12289  0023CA  0EC8               	movlw	200
 12290  0023CC  6F00               	movwf	delay_ms@del& (0+255),b
 12291  0023CE  EC5B  F037         	call	_delay_ms	;wreg free
 12292  0023D2                     l11898:
 12293                           
 12294                           ;ButtonController.h: 56: }
 12295                           ;ButtonController.h: 57: }
 12296                           ;ButtonController.h: 58: if(!PORTAbits.RA4 && lastSttRETRO) {
 12297  0023D2  B880               	btfsc	3968,4,c	;volatile
 12298  0023D4  D010               	goto	l895
 12299  0023D6  0100               	movlb	0	; () banked
 12300  0023D8  51D7               	movf	_lastSttRETRO& (0+255),w,b
 12301  0023DA  0100               	movlb	0	; () banked
 12302  0023DC  B4D8               	btfsc	status,2,c
 12303  0023DE  D00B               	goto	l895
 12304                           
 12305                           ; BSR set to: 0
 12306                           ;ButtonController.h: 59: lastSttRETRO = 0;
 12307  0023E0  0E00               	movlw	0
 12308  0023E2  0100               	movlb	0	; () banked
 12309  0023E4  6FD7               	movwf	_lastSttRETRO& (0+255),b
 12310                           
 12311                           ; BSR set to: 0
 12312                           ;ButtonController.h: 60: delay_ms(200);
 12313  0023E6  0E00               	movlw	0
 12314  0023E8  0101               	movlb	1	; () banked
 12315  0023EA  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12316  0023EC  0EC8               	movlw	200
 12317  0023EE  6F00               	movwf	delay_ms@del& (0+255),b
 12318  0023F0  EC5B  F037         	call	_delay_ms	;wreg free
 12319                           
 12320                           ;ButtonController.h: 61: }else if(PORTAbits.RA4 && !lastSttRETRO) {
 12321  0023F4  D044               	goto	l11936
 12322  0023F6                     l895:
 12323  0023F6  A880               	btfss	3968,4,c	;volatile
 12324  0023F8  D016               	goto	l11914
 12325  0023FA  0100               	movlb	0	; () banked
 12326  0023FC  51D7               	movf	_lastSttRETRO& (0+255),w,b
 12327  0023FE  0100               	movlb	0	; () banked
 12328  002400  A4D8               	btfss	status,2,c
 12329  002402  D011               	goto	l11914
 12330                           
 12331                           ; BSR set to: 0
 12332                           ;ButtonController.h: 62: lastSttRETRO = 1;
 12333  002404  0E01               	movlw	1
 12334  002406  0100               	movlb	0	; () banked
 12335  002408  6FD7               	movwf	_lastSttRETRO& (0+255),b
 12336                           
 12337                           ; BSR set to: 0
 12338                           ;ButtonController.h: 63: if(holdRETROcont < 10)
 12339  00240A  0E0A               	movlw	10
 12340  00240C  0100               	movlb	0	; () banked
 12341  00240E  61C0               	cpfslt	_holdRETROcont& (0+255),b
 12342  002410  D002               	goto	l898
 12343                           
 12344                           ; BSR set to: 0
 12345                           ;ButtonController.h: 64: pressRETRO();
 12346  002412  EC66  F02B         	call	_pressRETRO	;wreg free
 12347  002416                     l898:
 12348                           
 12349                           ;ButtonController.h: 65: delay_ms(50);
 12350  002416  0E00               	movlw	0
 12351  002418  0101               	movlb	1	; () banked
 12352  00241A  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12353  00241C  0E32               	movlw	50
 12354  00241E  6F00               	movwf	delay_ms@del& (0+255),b
 12355  002420  EC5B  F037         	call	_delay_ms	;wreg free
 12356                           
 12357                           ;ButtonController.h: 66: }else if(PORTAbits.RA4 == lastSttRETRO) {
 12358  002424  D02C               	goto	l11936
 12359  002426                     l11914:
 12360  002426  A880               	btfss	3968,4,c	;volatile
 12361  002428  D002               	goto	u17760
 12362  00242A  0E01               	movlw	1
 12363  00242C  D001               	goto	u17766
 12364  00242E                     u17760:
 12365  00242E  0E00               	movlw	0
 12366  002430                     u17766:
 12367  002430  0100               	movlb	0	; () banked
 12368  002432  19D7               	xorwf	_lastSttRETRO& (0+255),w,b
 12369  002434  A4D8               	btfss	status,2,c
 12370  002436  D023               	goto	l11936
 12371                           
 12372                           ; BSR set to: 0
 12373                           ;ButtonController.h: 67: if(PORTAbits.RA4) {
 12374  002438  A880               	btfss	3968,4,c	;volatile
 12375  00243A  D006               	goto	l11922
 12376                           
 12377                           ; BSR set to: 0
 12378                           ;ButtonController.h: 68: holdRETROcont = 0;
 12379  00243C  0E00               	movlw	0
 12380  00243E  0100               	movlb	0	; () banked
 12381  002440  6FC0               	movwf	_holdRETROcont& (0+255),b
 12382                           
 12383                           ; BSR set to: 0
 12384                           ;ButtonController.h: 69: releaseRETRO();
 12385  002442  ECA4  F039         	call	_releaseRETRO	;wreg free
 12386                           
 12387                           ;ButtonController.h: 70: }else {
 12388  002446  D01B               	goto	l11936
 12389  002448                     l11922:
 12390                           
 12391                           ;ButtonController.h: 71: if(!RETROsecurLock)
 12392  002448  0100               	movlb	0	; () banked
 12393  00244A  51B9               	movf	_RETROsecurLock& (0+255),w,b
 12394  00244C  A4D8               	btfss	status,2,c
 12395  00244E  D002               	goto	l11926
 12396                           
 12397                           ; BSR set to: 0
 12398                           ;ButtonController.h: 72: holdRETROcont++;
 12399  002450  0100               	movlb	0	; () banked
 12400  002452  2BC0               	incf	_holdRETROcont& (0+255),f,b
 12401  002454                     l11926:
 12402                           
 12403                           ; BSR set to: 0
 12404                           ;ButtonController.h: 73: if(holdRETROcont > 9) {
 12405  002454  0E09               	movlw	9
 12406  002456  0100               	movlb	0	; () banked
 12407  002458  65C0               	cpfsgt	_holdRETROcont& (0+255),b
 12408  00245A  D00A               	goto	l11934
 12409                           
 12410                           ; BSR set to: 0
 12411                           ;ButtonController.h: 74: if(holdRETROcont < 26)
 12412  00245C  0E1A               	movlw	26
 12413  00245E  0100               	movlb	0	; () banked
 12414  002460  61C0               	cpfslt	_holdRETROcont& (0+255),b
 12415  002462  D003               	goto	l11932
 12416                           
 12417                           ; BSR set to: 0
 12418                           ;ButtonController.h: 75: longPressRETRO();
 12419  002464  EC7D  F027         	call	_longPressRETRO	;wreg free
 12420  002468  D003               	goto	l11934
 12421  00246A                     l11932:
 12422                           
 12423                           ;ButtonController.h: 76: else
 12424                           ;ButtonController.h: 77: RETROsecurLock = 1;
 12425  00246A  0E01               	movlw	1
 12426  00246C  0100               	movlb	0	; () banked
 12427  00246E  6FB9               	movwf	_RETROsecurLock& (0+255),b
 12428  002470                     l11934:
 12429                           
 12430                           ;ButtonController.h: 78: }
 12431                           ;ButtonController.h: 79: delay_ms(200);
 12432  002470  0E00               	movlw	0
 12433  002472  0101               	movlb	1	; () banked
 12434  002474  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12435  002476  0EC8               	movlw	200
 12436  002478  6F00               	movwf	delay_ms@del& (0+255),b
 12437  00247A  EC5B  F037         	call	_delay_ms	;wreg free
 12438  00247E                     l11936:
 12439                           
 12440                           ;ButtonController.h: 80: }
 12441                           ;ButtonController.h: 81: }
 12442                           ;ButtonController.h: 82: if(!PORTAbits.RA5 && lastSttENTER) {
 12443  00247E  BA80               	btfsc	3968,5,c	;volatile
 12444  002480  D010               	goto	l907
 12445  002482  0100               	movlb	0	; () banked
 12446  002484  51D6               	movf	_lastSttENTER& (0+255),w,b
 12447  002486  0100               	movlb	0	; () banked
 12448  002488  B4D8               	btfsc	status,2,c
 12449  00248A  D00B               	goto	l907
 12450                           
 12451                           ; BSR set to: 0
 12452                           ;ButtonController.h: 83: lastSttENTER = 0;
 12453  00248C  0E00               	movlw	0
 12454  00248E  0100               	movlb	0	; () banked
 12455  002490  6FD6               	movwf	_lastSttENTER& (0+255),b
 12456                           
 12457                           ; BSR set to: 0
 12458                           ;ButtonController.h: 84: delay_ms(200);
 12459  002492  0E00               	movlw	0
 12460  002494  0101               	movlb	1	; () banked
 12461  002496  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12462  002498  0EC8               	movlw	200
 12463  00249A  6F00               	movwf	delay_ms@del& (0+255),b
 12464  00249C  EC5B  F037         	call	_delay_ms	;wreg free
 12465                           
 12466                           ;ButtonController.h: 85: }else if(PORTAbits.RA5 && !lastSttENTER) {
 12467  0024A0  0012               	return	
 12468  0024A2                     l907:
 12469  0024A2  AA80               	btfss	3968,5,c	;volatile
 12470  0024A4  D016               	goto	l11954
 12471  0024A6  0100               	movlb	0	; () banked
 12472  0024A8  51D6               	movf	_lastSttENTER& (0+255),w,b
 12473  0024AA  0100               	movlb	0	; () banked
 12474  0024AC  A4D8               	btfss	status,2,c
 12475  0024AE  D011               	goto	l11954
 12476                           
 12477                           ; BSR set to: 0
 12478                           ;ButtonController.h: 86: lastSttENTER = 1;
 12479  0024B0  0E01               	movlw	1
 12480  0024B2  0100               	movlb	0	; () banked
 12481  0024B4  6FD6               	movwf	_lastSttENTER& (0+255),b
 12482                           
 12483                           ; BSR set to: 0
 12484                           ;ButtonController.h: 87: if(holdENTERcont < 10)
 12485  0024B6  0E0A               	movlw	10
 12486  0024B8  0100               	movlb	0	; () banked
 12487  0024BA  61BD               	cpfslt	_holdENTERcont& (0+255),b
 12488  0024BC  D002               	goto	l11952
 12489                           
 12490                           ; BSR set to: 0
 12491                           ;ButtonController.h: 88: pressENTER();
 12492  0024BE  ECD1  F008         	call	_pressENTER	;wreg free
 12493  0024C2                     l11952:
 12494                           
 12495                           ;ButtonController.h: 89: delay_ms(50);
 12496  0024C2  0E00               	movlw	0
 12497  0024C4  0101               	movlb	1	; () banked
 12498  0024C6  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12499  0024C8  0E32               	movlw	50
 12500  0024CA  6F00               	movwf	delay_ms@del& (0+255),b
 12501  0024CC  EC5B  F037         	call	_delay_ms	;wreg free
 12502                           
 12503                           ;ButtonController.h: 90: }else if(PORTAbits.RA5 == lastSttENTER) {
 12504  0024D0  0012               	return	
 12505  0024D2                     l11954:
 12506  0024D2  AA80               	btfss	3968,5,c	;volatile
 12507  0024D4  D002               	goto	u17870
 12508  0024D6  0E01               	movlw	1
 12509  0024D8  D001               	goto	u17876
 12510  0024DA                     u17870:
 12511  0024DA  0E00               	movlw	0
 12512  0024DC                     u17876:
 12513  0024DC  0100               	movlb	0	; () banked
 12514  0024DE  19D6               	xorwf	_lastSttENTER& (0+255),w,b
 12515  0024E0  A4D8               	btfss	status,2,c
 12516  0024E2  0012               	return	
 12517                           
 12518                           ; BSR set to: 0
 12519                           ;ButtonController.h: 91: if(PORTAbits.RA5) {
 12520  0024E4  AA80               	btfss	3968,5,c	;volatile
 12521  0024E6  D006               	goto	l11962
 12522                           
 12523                           ; BSR set to: 0
 12524                           ;ButtonController.h: 92: holdENTERcont = 0;
 12525  0024E8  0E00               	movlw	0
 12526  0024EA  0100               	movlb	0	; () banked
 12527  0024EC  6FBD               	movwf	_holdENTERcont& (0+255),b
 12528                           
 12529                           ; BSR set to: 0
 12530                           ;ButtonController.h: 93: releaseENTER();
 12531  0024EE  ECAB  F039         	call	_releaseENTER	;wreg free
 12532                           
 12533                           ;ButtonController.h: 94: }else {
 12534  0024F2  0012               	return	
 12535  0024F4                     l11962:
 12536                           
 12537                           ;ButtonController.h: 95: if(!ENTERsecurLock)
 12538  0024F4  0100               	movlb	0	; () banked
 12539  0024F6  51B7               	movf	_ENTERsecurLock& (0+255),w,b
 12540  0024F8  A4D8               	btfss	status,2,c
 12541  0024FA  D002               	goto	l11966
 12542                           
 12543                           ; BSR set to: 0
 12544                           ;ButtonController.h: 96: holdENTERcont++;
 12545  0024FC  0100               	movlb	0	; () banked
 12546  0024FE  2BBD               	incf	_holdENTERcont& (0+255),f,b
 12547  002500                     l11966:
 12548                           
 12549                           ; BSR set to: 0
 12550                           ;ButtonController.h: 97: if(holdENTERcont > 9) {
 12551  002500  0E09               	movlw	9
 12552  002502  0100               	movlb	0	; () banked
 12553  002504  65BD               	cpfsgt	_holdENTERcont& (0+255),b
 12554  002506  D00A               	goto	l11974
 12555                           
 12556                           ; BSR set to: 0
 12557                           ;ButtonController.h: 98: if(holdENTERcont < 26)
 12558  002508  0E1A               	movlw	26
 12559  00250A  0100               	movlb	0	; () banked
 12560  00250C  61BD               	cpfslt	_holdENTERcont& (0+255),b
 12561  00250E  D003               	goto	l11972
 12562                           
 12563                           ; BSR set to: 0
 12564                           ;ButtonController.h: 99: longPressENTER();
 12565  002510  EC9F  F00C         	call	_longPressENTER	;wreg free
 12566  002514  D003               	goto	l11974
 12567  002516                     l11972:
 12568                           
 12569                           ;ButtonController.h: 100: else
 12570                           ;ButtonController.h: 101: ENTERsecurLock = 1;
 12571  002516  0E01               	movlw	1
 12572  002518  0100               	movlb	0	; () banked
 12573  00251A  6FB7               	movwf	_ENTERsecurLock& (0+255),b
 12574  00251C                     l11974:
 12575                           
 12576                           ;ButtonController.h: 102: }
 12577                           ;ButtonController.h: 103: delay_ms(200);
 12578  00251C  0E00               	movlw	0
 12579  00251E  0101               	movlb	1	; () banked
 12580  002520  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12581  002522  0EC8               	movlw	200
 12582  002524  6F00               	movwf	delay_ms@del& (0+255),b
 12583  002526  EC5B  F037         	call	_delay_ms	;wreg free
 12584  00252A  0012               	return	
 12585  00252C                     __end_of_buttonChecking:
 12586                           	opt stack 0
 12587                           tblptru	equ	0xFF8
 12588                           tblptrh	equ	0xFF7
 12589                           tblptrl	equ	0xFF6
 12590                           tablat	equ	0xFF5
 12591                           prodh	equ	0xFF4
 12592                           prodl	equ	0xFF3
 12593                           intcon	equ	0xFF2
 12594                           postinc0	equ	0xFEE
 12595                           wreg	equ	0xFE8
 12596                           postdec1	equ	0xFE5
 12597                           fsr1l	equ	0xFE1
 12598                           indf2	equ	0xFDF
 12599                           postinc2	equ	0xFDE
 12600                           postdec2	equ	0xFDD
 12601                           fsr2h	equ	0xFDA
 12602                           fsr2l	equ	0xFD9
 12603                           status	equ	0xFD8
 12604                           
 12605 ;; *************** function _releaseUP *****************
 12606 ;; Defined at:
 12607 ;;		line 176 in file "source/DisplayProtocol.h"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;		None
 12610 ;; Auto vars:     Size  Location     Type
 12611 ;;		None
 12612 ;; Return value:  Size  Location     Type
 12613 ;;                  1    wreg      void 
 12614 ;; Registers used:
 12615 ;;		wreg, status,2
 12616 ;; Tracked objects:
 12617 ;;		On entry : 0/0
 12618 ;;		On exit  : 0/0
 12619 ;;		Unchanged: 0/0
 12620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12621 ;;      Params:         0       0       0       0       0       0       0
 12622 ;;      Locals:         0       0       0       0       0       0       0
 12623 ;;      Temps:          0       0       0       0       0       0       0
 12624 ;;      Totals:         0       0       0       0       0       0       0
 12625 ;;Total ram usage:        0 bytes
 12626 ;; Hardware stack levels used:    1
 12627 ;; Hardware stack levels required when called:   12
 12628 ;; This function calls:
 12629 ;;		Nothing
 12630 ;; This function is called by:
 12631 ;;		_buttonChecking
 12632 ;; This function uses a non-reentrant model
 12633 ;;
 12634                           
 12635                           	psect	text48
 12636  007372                     __ptext48:
 12637                           	opt stack 0
 12638  007372                     _releaseUP:
 12639                           	opt stack 17
 12640                           
 12641                           ;DisplayProtocol.h: 177: UPisLP = 0;
 12642                           
 12643                           ;incstack = 0
 12644  007372  0E00               	movlw	0
 12645  007374  6E48               	movwf	_UPisLP,c
 12646                           
 12647                           ;DisplayProtocol.h: 178: UPsecurLock = 0;
 12648  007376  0E00               	movlw	0
 12649  007378  0100               	movlb	0	; () banked
 12650  00737A  6FBA               	movwf	_UPsecurLock& (0+255),b
 12651                           
 12652                           ; BSR set to: 0
 12653  00737C  0012               	return		;funcret
 12654  00737E                     __end_of_releaseUP:
 12655                           	opt stack 0
 12656                           tblptru	equ	0xFF8
 12657                           tblptrh	equ	0xFF7
 12658                           tblptrl	equ	0xFF6
 12659                           tablat	equ	0xFF5
 12660                           prodh	equ	0xFF4
 12661                           prodl	equ	0xFF3
 12662                           intcon	equ	0xFF2
 12663                           postinc0	equ	0xFEE
 12664                           wreg	equ	0xFE8
 12665                           postdec1	equ	0xFE5
 12666                           fsr1l	equ	0xFE1
 12667                           indf2	equ	0xFDF
 12668                           postinc2	equ	0xFDE
 12669                           postdec2	equ	0xFDD
 12670                           fsr2h	equ	0xFDA
 12671                           fsr2l	equ	0xFD9
 12672                           status	equ	0xFD8
 12673                           
 12674 ;; *************** function _releaseRETRO *****************
 12675 ;; Defined at:
 12676 ;;		line 286 in file "source/DisplayProtocol.h"
 12677 ;; Parameters:    Size  Location     Type
 12678 ;;		None
 12679 ;; Auto vars:     Size  Location     Type
 12680 ;;		None
 12681 ;; Return value:  Size  Location     Type
 12682 ;;                  1    wreg      void 
 12683 ;; Registers used:
 12684 ;;		wreg, status,2
 12685 ;; Tracked objects:
 12686 ;;		On entry : 0/0
 12687 ;;		On exit  : 0/0
 12688 ;;		Unchanged: 0/0
 12689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12690 ;;      Params:         0       0       0       0       0       0       0
 12691 ;;      Locals:         0       0       0       0       0       0       0
 12692 ;;      Temps:          0       0       0       0       0       0       0
 12693 ;;      Totals:         0       0       0       0       0       0       0
 12694 ;;Total ram usage:        0 bytes
 12695 ;; Hardware stack levels used:    1
 12696 ;; Hardware stack levels required when called:   12
 12697 ;; This function calls:
 12698 ;;		Nothing
 12699 ;; This function is called by:
 12700 ;;		_buttonChecking
 12701 ;; This function uses a non-reentrant model
 12702 ;;
 12703                           
 12704                           	psect	text49
 12705  007348                     __ptext49:
 12706                           	opt stack 0
 12707  007348                     _releaseRETRO:
 12708                           	opt stack 17
 12709                           
 12710                           ;DisplayProtocol.h: 287: RETROisLP = 0;
 12711                           
 12712                           ; BSR set to: 0
 12713                           ;incstack = 0
 12714  007348  0E00               	movlw	0
 12715  00734A  0100               	movlb	0	; () banked
 12716  00734C  6FB8               	movwf	_RETROisLP& (0+255),b
 12717                           
 12718                           ;DisplayProtocol.h: 288: RETROsecurLock = 0;
 12719  00734E  0E00               	movlw	0
 12720  007350  0100               	movlb	0	; () banked
 12721  007352  6FB9               	movwf	_RETROsecurLock& (0+255),b
 12722                           
 12723                           ; BSR set to: 0
 12724  007354  0012               	return		;funcret
 12725  007356                     __end_of_releaseRETRO:
 12726                           	opt stack 0
 12727                           tblptru	equ	0xFF8
 12728                           tblptrh	equ	0xFF7
 12729                           tblptrl	equ	0xFF6
 12730                           tablat	equ	0xFF5
 12731                           prodh	equ	0xFF4
 12732                           prodl	equ	0xFF3
 12733                           intcon	equ	0xFF2
 12734                           postinc0	equ	0xFEE
 12735                           wreg	equ	0xFE8
 12736                           postdec1	equ	0xFE5
 12737                           fsr1l	equ	0xFE1
 12738                           indf2	equ	0xFDF
 12739                           postinc2	equ	0xFDE
 12740                           postdec2	equ	0xFDD
 12741                           fsr2h	equ	0xFDA
 12742                           fsr2l	equ	0xFD9
 12743                           status	equ	0xFD8
 12744                           
 12745 ;; *************** function _releaseENTER *****************
 12746 ;; Defined at:
 12747 ;;		line 491 in file "source/DisplayProtocol.h"
 12748 ;; Parameters:    Size  Location     Type
 12749 ;;		None
 12750 ;; Auto vars:     Size  Location     Type
 12751 ;;		None
 12752 ;; Return value:  Size  Location     Type
 12753 ;;                  1    wreg      void 
 12754 ;; Registers used:
 12755 ;;		wreg, status,2
 12756 ;; Tracked objects:
 12757 ;;		On entry : 0/0
 12758 ;;		On exit  : 0/0
 12759 ;;		Unchanged: 0/0
 12760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12761 ;;      Params:         0       0       0       0       0       0       0
 12762 ;;      Locals:         0       0       0       0       0       0       0
 12763 ;;      Temps:          0       0       0       0       0       0       0
 12764 ;;      Totals:         0       0       0       0       0       0       0
 12765 ;;Total ram usage:        0 bytes
 12766 ;; Hardware stack levels used:    1
 12767 ;; Hardware stack levels required when called:   12
 12768 ;; This function calls:
 12769 ;;		Nothing
 12770 ;; This function is called by:
 12771 ;;		_buttonChecking
 12772 ;; This function uses a non-reentrant model
 12773 ;;
 12774                           
 12775                           	psect	text50
 12776  007356                     __ptext50:
 12777                           	opt stack 0
 12778  007356                     _releaseENTER:
 12779                           	opt stack 17
 12780                           
 12781                           ;DisplayProtocol.h: 492: ENTERisLP = 0;
 12782                           
 12783                           ; BSR set to: 0
 12784                           ;incstack = 0
 12785  007356  0E00               	movlw	0
 12786  007358  0101               	movlb	1	; () banked
 12787  00735A  6FB8               	movwf	_ENTERisLP& (0+255),b
 12788                           
 12789                           ;DisplayProtocol.h: 493: ENTERsecurLock = 0;
 12790  00735C  0E00               	movlw	0
 12791  00735E  0100               	movlb	0	; () banked
 12792  007360  6FB7               	movwf	_ENTERsecurLock& (0+255),b
 12793                           
 12794                           ; BSR set to: 0
 12795  007362  0012               	return		;funcret
 12796  007364                     __end_of_releaseENTER:
 12797                           	opt stack 0
 12798                           tblptru	equ	0xFF8
 12799                           tblptrh	equ	0xFF7
 12800                           tblptrl	equ	0xFF6
 12801                           tablat	equ	0xFF5
 12802                           prodh	equ	0xFF4
 12803                           prodl	equ	0xFF3
 12804                           intcon	equ	0xFF2
 12805                           postinc0	equ	0xFEE
 12806                           wreg	equ	0xFE8
 12807                           postdec1	equ	0xFE5
 12808                           fsr1l	equ	0xFE1
 12809                           indf2	equ	0xFDF
 12810                           postinc2	equ	0xFDE
 12811                           postdec2	equ	0xFDD
 12812                           fsr2h	equ	0xFDA
 12813                           fsr2l	equ	0xFD9
 12814                           status	equ	0xFD8
 12815                           
 12816 ;; *************** function _releaseDOWN *****************
 12817 ;; Defined at:
 12818 ;;		line 222 in file "source/DisplayProtocol.h"
 12819 ;; Parameters:    Size  Location     Type
 12820 ;;		None
 12821 ;; Auto vars:     Size  Location     Type
 12822 ;;		None
 12823 ;; Return value:  Size  Location     Type
 12824 ;;                  1    wreg      void 
 12825 ;; Registers used:
 12826 ;;		wreg, status,2
 12827 ;; Tracked objects:
 12828 ;;		On entry : 0/0
 12829 ;;		On exit  : 0/0
 12830 ;;		Unchanged: 0/0
 12831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12832 ;;      Params:         0       0       0       0       0       0       0
 12833 ;;      Locals:         0       0       0       0       0       0       0
 12834 ;;      Temps:          0       0       0       0       0       0       0
 12835 ;;      Totals:         0       0       0       0       0       0       0
 12836 ;;Total ram usage:        0 bytes
 12837 ;; Hardware stack levels used:    1
 12838 ;; Hardware stack levels required when called:   12
 12839 ;; This function calls:
 12840 ;;		Nothing
 12841 ;; This function is called by:
 12842 ;;		_buttonChecking
 12843 ;; This function uses a non-reentrant model
 12844 ;;
 12845                           
 12846                           	psect	text51
 12847  00737E                     __ptext51:
 12848                           	opt stack 0
 12849  00737E                     _releaseDOWN:
 12850                           	opt stack 17
 12851                           
 12852                           ;DisplayProtocol.h: 223: DOWNisLP = 0;
 12853                           
 12854                           ; BSR set to: 0
 12855                           ;incstack = 0
 12856  00737E  0E00               	movlw	0
 12857  007380  6E45               	movwf	_DOWNisLP,c
 12858                           
 12859                           ;DisplayProtocol.h: 224: DOWNsecurLock = 0;
 12860  007382  0E00               	movlw	0
 12861  007384  0100               	movlb	0	; () banked
 12862  007386  6FB6               	movwf	_DOWNsecurLock& (0+255),b
 12863                           
 12864                           ; BSR set to: 0
 12865  007388  0012               	return		;funcret
 12866  00738A                     __end_of_releaseDOWN:
 12867                           	opt stack 0
 12868                           tblptru	equ	0xFF8
 12869                           tblptrh	equ	0xFF7
 12870                           tblptrl	equ	0xFF6
 12871                           tablat	equ	0xFF5
 12872                           prodh	equ	0xFF4
 12873                           prodl	equ	0xFF3
 12874                           intcon	equ	0xFF2
 12875                           postinc0	equ	0xFEE
 12876                           wreg	equ	0xFE8
 12877                           postdec1	equ	0xFE5
 12878                           fsr1l	equ	0xFE1
 12879                           indf2	equ	0xFDF
 12880                           postinc2	equ	0xFDE
 12881                           postdec2	equ	0xFDD
 12882                           fsr2h	equ	0xFDA
 12883                           fsr2l	equ	0xFD9
 12884                           status	equ	0xFD8
 12885                           
 12886 ;; *************** function _pressUP *****************
 12887 ;; Defined at:
 12888 ;;		line 126 in file "source/DisplayProtocol.h"
 12889 ;; Parameters:    Size  Location     Type
 12890 ;;		None
 12891 ;; Auto vars:     Size  Location     Type
 12892 ;;		None
 12893 ;; Return value:  Size  Location     Type
 12894 ;;                  1    wreg      void 
 12895 ;; Registers used:
 12896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12897 ;; Tracked objects:
 12898 ;;		On entry : 0/0
 12899 ;;		On exit  : 0/0
 12900 ;;		Unchanged: 0/0
 12901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12902 ;;      Params:         0       0       0       0       0       0       0
 12903 ;;      Locals:         0       0       0       0       0       0       0
 12904 ;;      Temps:          0       0       1       0       0       0       0
 12905 ;;      Totals:         0       0       1       0       0       0       0
 12906 ;;Total ram usage:        1 bytes
 12907 ;; Hardware stack levels used:    1
 12908 ;; Hardware stack levels required when called:   13
 12909 ;; This function calls:
 12910 ;;		_chanValDigUP
 12911 ;; This function is called by:
 12912 ;;		_buttonChecking
 12913 ;; This function uses a non-reentrant model
 12914 ;;
 12915                           
 12916                           	psect	text52
 12917  0047A6                     __ptext52:
 12918                           	opt stack 0
 12919  0047A6                     _pressUP:
 12920                           	opt stack 16
 12921                           
 12922                           ;DisplayProtocol.h: 127: if (actualScreen == 0 || actualScreen == 4) {
 12923                           
 12924                           ; BSR set to: 0
 12925                           ;incstack = 0
 12926  0047A6  0101               	movlb	1	; () banked
 12927  0047A8  51B9               	movf	_actualScreen& (0+255),w,b
 12928  0047AA  B4D8               	btfsc	status,2,c
 12929  0047AC  D005               	goto	l11100
 12930                           
 12931                           ; BSR set to: 1
 12932  0047AE  0E04               	movlw	4
 12933  0047B0  0101               	movlb	1	; () banked
 12934  0047B2  19B9               	xorwf	_actualScreen& (0+255),w,b
 12935  0047B4  A4D8               	btfss	status,2,c
 12936  0047B6  D00C               	goto	l11106
 12937  0047B8                     l11100:
 12938                           
 12939                           ; BSR set to: 1
 12940                           ;DisplayProtocol.h: 128: menuSection++;
 12941  0047B8  0101               	movlb	1	; () banked
 12942  0047BA  2BBD               	incf	_menuSection& (0+255),f,b
 12943                           
 12944                           ; BSR set to: 1
 12945                           ;DisplayProtocol.h: 129: if (menuSection > 3)
 12946  0047BC  0101               	movlb	1	; () banked
 12947  0047BE  51BD               	movf	_menuSection& (0+255),w,b
 12948  0047C0  0A80               	xorlw	128
 12949  0047C2  0F7C               	addlw	-132
 12950  0047C4  A0D8               	btfss	status,0,c
 12951  0047C6  0012               	return	
 12952                           
 12953                           ; BSR set to: 1
 12954                           ;DisplayProtocol.h: 130: menuSection = 0;
 12955  0047C8  0E00               	movlw	0
 12956  0047CA  0101               	movlb	1	; () banked
 12957  0047CC  6FBD               	movwf	_menuSection& (0+255),b
 12958                           
 12959                           ; BSR set to: 1
 12960                           ;DisplayProtocol.h: 131: } else if (actualScreen == 1) {
 12961  0047CE  0012               	return	
 12962  0047D0                     l11106:
 12963                           
 12964                           ; BSR set to: 1
 12965  0047D0  0101               	movlb	1	; () banked
 12966  0047D2  05B9               	decf	_actualScreen& (0+255),w,b
 12967  0047D4  A4D8               	btfss	status,2,c
 12968  0047D6  D024               	goto	l11112
 12969                           
 12970                           ; BSR set to: 1
 12971                           ;DisplayProtocol.h: 132: introducido[passSection]++;
 12972  0047D8  0101               	movlb	1	; () banked
 12973  0047DA  51BE               	movf	_passSection& (0+255),w,b
 12974  0047DC  0D01               	mullw	1
 12975  0047DE  0EA9               	movlw	low _introducido
 12976  0047E0  24F3               	addwf	prodl,w,c
 12977  0047E2  6ED9               	movwf	fsr2l,c
 12978  0047E4  0E01               	movlw	high _introducido
 12979  0047E6  20F4               	addwfc	prodh,w,c
 12980  0047E8  6EDA               	movwf	fsr2h,c
 12981  0047EA  2ADF               	incf	indf2,f,c
 12982                           
 12983                           ;DisplayProtocol.h: 133: if (introducido[passSection] > 9)
 12984  0047EC  0101               	movlb	1	; () banked
 12985  0047EE  51BE               	movf	_passSection& (0+255),w,b
 12986  0047F0  0D01               	mullw	1
 12987  0047F2  0EA9               	movlw	low _introducido
 12988  0047F4  24F3               	addwf	prodl,w,c
 12989  0047F6  6ED9               	movwf	fsr2l,c
 12990  0047F8  0E01               	movlw	high _introducido
 12991  0047FA  20F4               	addwfc	prodh,w,c
 12992  0047FC  6EDA               	movwf	fsr2h,c
 12993  0047FE  50DF               	movf	indf2,w,c
 12994  004800  0A80               	xorlw	128
 12995  004802  0F76               	addlw	-138
 12996  004804  A0D8               	btfss	status,0,c
 12997  004806  0012               	return	
 12998                           
 12999                           ; BSR set to: 1
 13000                           ;DisplayProtocol.h: 134: introducido[passSection] = 0;
 13001  004808  0101               	movlb	1	; () banked
 13002  00480A  51BE               	movf	_passSection& (0+255),w,b
 13003  00480C  0D01               	mullw	1
 13004  00480E  0EA9               	movlw	low _introducido
 13005  004810  24F3               	addwf	prodl,w,c
 13006  004812  6ED9               	movwf	fsr2l,c
 13007  004814  0E01               	movlw	high _introducido
 13008  004816  20F4               	addwfc	prodh,w,c
 13009  004818  6EDA               	movwf	fsr2h,c
 13010  00481A  0E00               	movlw	0
 13011  00481C  6EDF               	movwf	indf2,c
 13012                           
 13013                           ; BSR set to: 1
 13014                           ;DisplayProtocol.h: 135: } else if (actualScreen == 2 || actualScreen == 3
 13015  00481E  0012               	return	
 13016  004820                     l11112:
 13017                           
 13018                           ; BSR set to: 1
 13019                           ;DisplayProtocol.h: 136: || actualScreen == 10 || actualScreen == 11
 13020                           ;DisplayProtocol.h: 137: || actualScreen == 15) {
 13021  004820  0E02               	movlw	2
 13022  004822  0101               	movlb	1	; () banked
 13023  004824  19B9               	xorwf	_actualScreen& (0+255),w,b
 13024  004826  B4D8               	btfsc	status,2,c
 13025  004828  D014               	goto	l11122
 13026                           
 13027                           ; BSR set to: 1
 13028  00482A  0E03               	movlw	3
 13029  00482C  0101               	movlb	1	; () banked
 13030  00482E  19B9               	xorwf	_actualScreen& (0+255),w,b
 13031  004830  B4D8               	btfsc	status,2,c
 13032  004832  D00F               	goto	l11122
 13033                           
 13034                           ; BSR set to: 1
 13035  004834  0E0A               	movlw	10
 13036  004836  0101               	movlb	1	; () banked
 13037  004838  19B9               	xorwf	_actualScreen& (0+255),w,b
 13038  00483A  B4D8               	btfsc	status,2,c
 13039  00483C  D00A               	goto	l11122
 13040                           
 13041                           ; BSR set to: 1
 13042  00483E  0E0B               	movlw	11
 13043  004840  0101               	movlb	1	; () banked
 13044  004842  19B9               	xorwf	_actualScreen& (0+255),w,b
 13045  004844  B4D8               	btfsc	status,2,c
 13046  004846  D005               	goto	l11122
 13047                           
 13048                           ; BSR set to: 1
 13049  004848  0E0F               	movlw	15
 13050  00484A  0101               	movlb	1	; () banked
 13051  00484C  19B9               	xorwf	_actualScreen& (0+255),w,b
 13052  00484E  A4D8               	btfss	status,2,c
 13053  004850  D011               	goto	l11128
 13054  004852                     l11122:
 13055                           
 13056                           ; BSR set to: 1
 13057                           ;DisplayProtocol.h: 138: selSN = !selSN;
 13058  004852  0101               	movlb	1	; () banked
 13059  004854  51BF               	movf	_selSN& (0+255),w,b
 13060  004856  A4D8               	btfss	status,2,c
 13061  004858  D002               	goto	u16360
 13062  00485A  0E01               	movlw	1
 13063  00485C  D001               	goto	u16370
 13064  00485E                     u16360:
 13065  00485E  0E00               	movlw	0
 13066  004860                     u16370:
 13067  004860  0101               	movlb	1	; () banked
 13068  004862  6FBF               	movwf	_selSN& (0+255),b
 13069                           
 13070                           ; BSR set to: 1
 13071                           ;DisplayProtocol.h: 139: if(selSN > 1)
 13072  004864  0E01               	movlw	1
 13073  004866  0101               	movlb	1	; () banked
 13074  004868  65BF               	cpfsgt	_selSN& (0+255),b
 13075  00486A  0012               	return	
 13076                           
 13077                           ; BSR set to: 1
 13078                           ;DisplayProtocol.h: 140: selSN = 0;
 13079  00486C  0E00               	movlw	0
 13080  00486E  0101               	movlb	1	; () banked
 13081  004870  6FBF               	movwf	_selSN& (0+255),b
 13082                           
 13083                           ; BSR set to: 1
 13084                           ;DisplayProtocol.h: 141: }else if(actualScreen == 5) {
 13085  004872  0012               	return	
 13086  004874                     l11128:
 13087                           
 13088                           ; BSR set to: 1
 13089  004874  0E05               	movlw	5
 13090  004876  0101               	movlb	1	; () banked
 13091  004878  19B9               	xorwf	_actualScreen& (0+255),w,b
 13092  00487A  B4D8               	btfsc	status,2,c
 13093  00487C  D008               	goto	l11138
 13094  00487E  D013               	goto	l11140
 13095  004880                     l11132:
 13096                           
 13097                           ; BSR set to: 1
 13098                           ;DisplayProtocol.h: 146: chanValDigUP();
 13099  004880  EC66  F029         	call	_chanValDigUP	;wreg free
 13100                           
 13101                           ;DisplayProtocol.h: 147: break;
 13102  004884  0012               	return	
 13103  004886                     l11134:
 13104                           
 13105                           ;DisplayProtocol.h: 149: chanVals++;
 13106  004886  0101               	movlb	1	; () banked
 13107  004888  4BB4               	infsnz	_chanVals& (0+255),f,b
 13108  00488A  2BB5               	incf	(_chanVals+1)& (0+255),f,b
 13109                           
 13110                           ; BSR set to: 1
 13111                           ;DisplayProtocol.h: 151: }
 13112                           ;DisplayProtocol.h: 152: }
 13113                           
 13114                           ;DisplayProtocol.h: 150: break;
 13115  00488C  0012               	return	
 13116  00488E                     l11138:
 13117                           
 13118                           ; BSR set to: 1
 13119  00488E  0101               	movlb	1	; () banked
 13120  004890  51BD               	movf	_menuSection& (0+255),w,b
 13121                           
 13122                           ; Switch size 1, requested type "space"
 13123                           ; Number of cases is 3, Range of values is 0 to 2
 13124                           ; switch strategies available:
 13125                           ; Name         Instructions Cycles
 13126                           ; simple_byte           10     6 (average)
 13127                           ;	Chosen strategy is simple_byte
 13128  004892  0A00               	xorlw	0	; case 0
 13129  004894  B4D8               	btfsc	status,2,c
 13130  004896  0012               	return	
 13131  004898  0A01               	xorlw	1	; case 1
 13132  00489A  B4D8               	btfsc	status,2,c
 13133  00489C  D7F1               	goto	l11132
 13134  00489E  0A03               	xorlw	3	; case 2
 13135  0048A0  A4D8               	btfss	status,2,c
 13136                           
 13137                           ; BSR set to: 1
 13138                           ;DisplayProtocol.h: 153: }else if(actualScreen == 12)
 13139  0048A2  0012               	return	
 13140  0048A4  D7F0               	goto	l11134
 13141  0048A6                     l11140:
 13142                           
 13143                           ; BSR set to: 1
 13144  0048A6  0E0C               	movlw	12
 13145  0048A8  0101               	movlb	1	; () banked
 13146  0048AA  19B9               	xorwf	_actualScreen& (0+255),w,b
 13147  0048AC  A4D8               	btfss	status,2,c
 13148  0048AE  0012               	return	
 13149                           
 13150                           ; BSR set to: 1
 13151                           ;DisplayProtocol.h: 154: chanValDigUP();
 13152  0048B0  EC66  F029         	call	_chanValDigUP	;wreg free
 13153  0048B4  0012               	return	
 13154  0048B6                     __end_of_pressUP:
 13155                           	opt stack 0
 13156                           tblptru	equ	0xFF8
 13157                           tblptrh	equ	0xFF7
 13158                           tblptrl	equ	0xFF6
 13159                           tablat	equ	0xFF5
 13160                           prodh	equ	0xFF4
 13161                           prodl	equ	0xFF3
 13162                           intcon	equ	0xFF2
 13163                           postinc0	equ	0xFEE
 13164                           wreg	equ	0xFE8
 13165                           postdec1	equ	0xFE5
 13166                           fsr1l	equ	0xFE1
 13167                           indf2	equ	0xFDF
 13168                           postinc2	equ	0xFDE
 13169                           postdec2	equ	0xFDD
 13170                           fsr2h	equ	0xFDA
 13171                           fsr2l	equ	0xFD9
 13172                           status	equ	0xFD8
 13173                           
 13174 ;; *************** function _chanValDigUP *****************
 13175 ;; Defined at:
 13176 ;;		line 28 in file "source/DisplayProtocol.h"
 13177 ;; Parameters:    Size  Location     Type
 13178 ;;		None
 13179 ;; Auto vars:     Size  Location     Type
 13180 ;;		None
 13181 ;; Return value:  Size  Location     Type
 13182 ;;                  1    wreg      void 
 13183 ;; Registers used:
 13184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13185 ;; Tracked objects:
 13186 ;;		On entry : 0/0
 13187 ;;		On exit  : 0/0
 13188 ;;		Unchanged: 0/0
 13189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13190 ;;      Params:         0       0       0       0       0       0       0
 13191 ;;      Locals:         0       0       0       0       0       0       0
 13192 ;;      Temps:          0       0       5       0       0       0       0
 13193 ;;      Totals:         0       0       5       0       0       0       0
 13194 ;;Total ram usage:        5 bytes
 13195 ;; Hardware stack levels used:    1
 13196 ;; Hardware stack levels required when called:   12
 13197 ;; This function calls:
 13198 ;;		Nothing
 13199 ;; This function is called by:
 13200 ;;		_pressUP
 13201 ;; This function uses a non-reentrant model
 13202 ;;
 13203                           
 13204                           	psect	text53
 13205  0052CC                     __ptext53:
 13206                           	opt stack 0
 13207  0052CC                     _chanValDigUP:
 13208                           	opt stack 16
 13209                           
 13210                           ;DisplayProtocol.h: 29: chanValdig[chanValSection]++;
 13211                           
 13212                           ;incstack = 0
 13213  0052CC  0101               	movlb	1	; () banked
 13214  0052CE  519B               	movf	_chanValSection& (0+255),w,b
 13215  0052D0  0D01               	mullw	1
 13216  0052D2  0EA3               	movlw	low _chanValdig
 13217  0052D4  24F3               	addwf	prodl,w,c
 13218  0052D6  6ED9               	movwf	fsr2l,c
 13219  0052D8  0E01               	movlw	high _chanValdig
 13220  0052DA  20F4               	addwfc	prodh,w,c
 13221  0052DC  6EDA               	movwf	fsr2h,c
 13222  0052DE  2ADF               	incf	indf2,f,c
 13223                           
 13224                           ;DisplayProtocol.h: 30: if(chanValdig[chanValSection] > 9) {
 13225  0052E0  0101               	movlb	1	; () banked
 13226  0052E2  519B               	movf	_chanValSection& (0+255),w,b
 13227  0052E4  0D01               	mullw	1
 13228  0052E6  0EA3               	movlw	low _chanValdig
 13229  0052E8  24F3               	addwf	prodl,w,c
 13230  0052EA  6ED9               	movwf	fsr2l,c
 13231  0052EC  0E01               	movlw	high _chanValdig
 13232  0052EE  20F4               	addwfc	prodh,w,c
 13233  0052F0  6EDA               	movwf	fsr2h,c
 13234  0052F2  50DF               	movf	indf2,w,c
 13235  0052F4  0A80               	xorlw	128
 13236  0052F6  0F76               	addlw	-138
 13237  0052F8  A0D8               	btfss	status,0,c
 13238  0052FA  0012               	return	
 13239                           
 13240                           ; BSR set to: 1
 13241                           ;DisplayProtocol.h: 31: chanValdig[chanValSection] = 0;
 13242  0052FC  0101               	movlb	1	; () banked
 13243  0052FE  519B               	movf	_chanValSection& (0+255),w,b
 13244  005300  0D01               	mullw	1
 13245  005302  0EA3               	movlw	low _chanValdig
 13246  005304  24F3               	addwf	prodl,w,c
 13247  005306  6ED9               	movwf	fsr2l,c
 13248  005308  0E01               	movlw	high _chanValdig
 13249  00530A  20F4               	addwfc	prodh,w,c
 13250  00530C  6EDA               	movwf	fsr2h,c
 13251  00530E  0E00               	movlw	0
 13252  005310  6EDF               	movwf	indf2,c
 13253                           
 13254                           ; BSR set to: 1
 13255                           ;DisplayProtocol.h: 32: if(chanValSection > 1 && chanValdig[chanValSection - 1] < 9)
 13256  005312  0101               	movlb	1	; () banked
 13257  005314  519B               	movf	_chanValSection& (0+255),w,b
 13258  005316  0A80               	xorlw	128
 13259  005318  0F7E               	addlw	-130
 13260  00531A  A0D8               	btfss	status,0,c
 13261  00531C  0012               	return	
 13262                           
 13263                           ; BSR set to: 1
 13264  00531E  0EFF               	movlw	255
 13265  005320  0101               	movlb	1	; () banked
 13266  005322  6F00               	movwf	??_chanValDigUP& (0+255),b
 13267  005324  0EFF               	movlw	255
 13268  005326  0101               	movlb	1	; () banked
 13269  005328  6F01               	movwf	(??_chanValDigUP+1)& (0+255),b
 13270  00532A  C19B  F102         	movff	_chanValSection,??_chanValDigUP+2
 13271  00532E  0101               	movlb	1	; () banked
 13272  005330  6B03               	clrf	(??_chanValDigUP+3)& (0+255),b
 13273  005332  BF02               	btfsc	(??_chanValDigUP+2)& (0+255),7,b
 13274  005334  0703               	decf	(??_chanValDigUP+3)& (0+255),f,b
 13275  005336  0101               	movlb	1	; () banked
 13276  005338  5100               	movf	??_chanValDigUP& (0+255),w,b
 13277  00533A  0101               	movlb	1	; () banked
 13278  00533C  2702               	addwf	(??_chanValDigUP+2)& (0+255),f,b
 13279  00533E  0101               	movlb	1	; () banked
 13280  005340  5101               	movf	(??_chanValDigUP+1)& (0+255),w,b
 13281  005342  0101               	movlb	1	; () banked
 13282  005344  2303               	addwfc	(??_chanValDigUP+3)& (0+255),f,b
 13283  005346  0EA3               	movlw	low _chanValdig
 13284  005348  0101               	movlb	1	; () banked
 13285  00534A  2502               	addwf	(??_chanValDigUP+2)& (0+255),w,b
 13286  00534C  6ED9               	movwf	fsr2l,c
 13287  00534E  0E01               	movlw	high _chanValdig
 13288  005350  0101               	movlb	1	; () banked
 13289  005352  2103               	addwfc	(??_chanValDigUP+3)& (0+255),w,b
 13290  005354  6EDA               	movwf	fsr2h,c
 13291  005356  50DF               	movf	indf2,w,c
 13292  005358  0A80               	xorlw	128
 13293  00535A  0F77               	addlw	-137
 13294  00535C  B0D8               	btfsc	status,0,c
 13295  00535E  0012               	return	
 13296                           
 13297                           ; BSR set to: 1
 13298                           ;DisplayProtocol.h: 33: chanValdig[chanValSection - 1]++;
 13299  005360  0EFF               	movlw	255
 13300  005362  0101               	movlb	1	; () banked
 13301  005364  6F00               	movwf	??_chanValDigUP& (0+255),b
 13302  005366  0EFF               	movlw	255
 13303  005368  0101               	movlb	1	; () banked
 13304  00536A  6F01               	movwf	(??_chanValDigUP+1)& (0+255),b
 13305  00536C  C19B  F102         	movff	_chanValSection,??_chanValDigUP+2
 13306  005370  0101               	movlb	1	; () banked
 13307  005372  6B03               	clrf	(??_chanValDigUP+3)& (0+255),b
 13308  005374  BF02               	btfsc	(??_chanValDigUP+2)& (0+255),7,b
 13309  005376  0703               	decf	(??_chanValDigUP+3)& (0+255),f,b
 13310  005378  0101               	movlb	1	; () banked
 13311  00537A  5100               	movf	??_chanValDigUP& (0+255),w,b
 13312  00537C  0101               	movlb	1	; () banked
 13313  00537E  2702               	addwf	(??_chanValDigUP+2)& (0+255),f,b
 13314  005380  0101               	movlb	1	; () banked
 13315  005382  5101               	movf	(??_chanValDigUP+1)& (0+255),w,b
 13316  005384  0101               	movlb	1	; () banked
 13317  005386  2303               	addwfc	(??_chanValDigUP+3)& (0+255),f,b
 13318  005388  0EA3               	movlw	low _chanValdig
 13319  00538A  0101               	movlb	1	; () banked
 13320  00538C  2502               	addwf	(??_chanValDigUP+2)& (0+255),w,b
 13321  00538E  6ED9               	movwf	fsr2l,c
 13322  005390  0E01               	movlw	high _chanValdig
 13323  005392  0101               	movlb	1	; () banked
 13324  005394  2103               	addwfc	(??_chanValDigUP+3)& (0+255),w,b
 13325  005396  6EDA               	movwf	fsr2h,c
 13326  005398  2ADF               	incf	indf2,f,c
 13327                           
 13328                           ; BSR set to: 1
 13329  00539A  0012               	return	
 13330  00539C                     __end_of_chanValDigUP:
 13331                           	opt stack 0
 13332                           tblptru	equ	0xFF8
 13333                           tblptrh	equ	0xFF7
 13334                           tblptrl	equ	0xFF6
 13335                           tablat	equ	0xFF5
 13336                           prodh	equ	0xFF4
 13337                           prodl	equ	0xFF3
 13338                           intcon	equ	0xFF2
 13339                           postinc0	equ	0xFEE
 13340                           wreg	equ	0xFE8
 13341                           postdec1	equ	0xFE5
 13342                           fsr1l	equ	0xFE1
 13343                           indf2	equ	0xFDF
 13344                           postinc2	equ	0xFDE
 13345                           postdec2	equ	0xFDD
 13346                           fsr2h	equ	0xFDA
 13347                           fsr2l	equ	0xFD9
 13348                           status	equ	0xFD8
 13349                           
 13350 ;; *************** function _pressRETRO *****************
 13351 ;; Defined at:
 13352 ;;		line 227 in file "source/DisplayProtocol.h"
 13353 ;; Parameters:    Size  Location     Type
 13354 ;;		None
 13355 ;; Auto vars:     Size  Location     Type
 13356 ;;		None
 13357 ;; Return value:  Size  Location     Type
 13358 ;;                  1    wreg      void 
 13359 ;; Registers used:
 13360 ;;		wreg, status,2, status,0, cstack
 13361 ;; Tracked objects:
 13362 ;;		On entry : 0/0
 13363 ;;		On exit  : 0/0
 13364 ;;		Unchanged: 0/0
 13365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13366 ;;      Params:         0       0       0       0       0       0       0
 13367 ;;      Locals:         0       0       0       0       0       0       0
 13368 ;;      Temps:          0       0       0       0       0       0       0
 13369 ;;      Totals:         0       0       0       0       0       0       0
 13370 ;;Total ram usage:        0 bytes
 13371 ;; Hardware stack levels used:    1
 13372 ;; Hardware stack levels required when called:   14
 13373 ;; This function calls:
 13374 ;;		_initProtocoll
 13375 ;; This function is called by:
 13376 ;;		_buttonChecking
 13377 ;; This function uses a non-reentrant model
 13378 ;;
 13379                           
 13380                           	psect	text54
 13381  0056CC                     __ptext54:
 13382                           	opt stack 0
 13383  0056CC                     _pressRETRO:
 13384                           	opt stack 15
 13385                           
 13386                           ;DisplayProtocol.h: 228: if (actualScreen == 1) {
 13387                           
 13388                           ; BSR set to: 1
 13389                           ;incstack = 0
 13390  0056CC  0101               	movlb	1	; () banked
 13391  0056CE  05B9               	decf	_actualScreen& (0+255),w,b
 13392  0056D0  A4D8               	btfss	status,2,c
 13393  0056D2  D004               	goto	l11234
 13394                           
 13395                           ; BSR set to: 1
 13396                           ;DisplayProtocol.h: 229: actualScreen = 0;
 13397  0056D4  0E00               	movlw	0
 13398  0056D6  0101               	movlb	1	; () banked
 13399  0056D8  6FB9               	movwf	_actualScreen& (0+255),b
 13400                           
 13401                           ;DisplayProtocol.h: 230: }else if (actualScreen == 2 || actualScreen == 3
 13402  0056DA  0012               	return	
 13403  0056DC                     l11234:
 13404                           
 13405                           ; BSR set to: 1
 13406                           ;DisplayProtocol.h: 231: || actualScreen == 10 || actualScreen == 11
 13407                           ;DisplayProtocol.h: 232: || actualScreen == 15) {
 13408  0056DC  0E02               	movlw	2
 13409  0056DE  0101               	movlb	1	; () banked
 13410  0056E0  19B9               	xorwf	_actualScreen& (0+255),w,b
 13411  0056E2  B4D8               	btfsc	status,2,c
 13412  0056E4  D014               	goto	l666
 13413                           
 13414                           ; BSR set to: 1
 13415  0056E6  0E03               	movlw	3
 13416  0056E8  0101               	movlb	1	; () banked
 13417  0056EA  19B9               	xorwf	_actualScreen& (0+255),w,b
 13418  0056EC  B4D8               	btfsc	status,2,c
 13419  0056EE  D00F               	goto	l666
 13420                           
 13421                           ; BSR set to: 1
 13422  0056F0  0E0A               	movlw	10
 13423  0056F2  0101               	movlb	1	; () banked
 13424  0056F4  19B9               	xorwf	_actualScreen& (0+255),w,b
 13425  0056F6  B4D8               	btfsc	status,2,c
 13426  0056F8  D00A               	goto	l666
 13427                           
 13428                           ; BSR set to: 1
 13429  0056FA  0E0B               	movlw	11
 13430  0056FC  0101               	movlb	1	; () banked
 13431  0056FE  19B9               	xorwf	_actualScreen& (0+255),w,b
 13432  005700  B4D8               	btfsc	status,2,c
 13433  005702  D005               	goto	l666
 13434                           
 13435                           ; BSR set to: 1
 13436  005704  0E0F               	movlw	15
 13437  005706  0101               	movlb	1	; () banked
 13438  005708  19B9               	xorwf	_actualScreen& (0+255),w,b
 13439  00570A  A4D8               	btfss	status,2,c
 13440  00570C  D003               	goto	l11244
 13441  00570E                     l666:
 13442                           
 13443                           ; BSR set to: 1
 13444                           ;DisplayProtocol.h: 233: actualScreen = tempLastScreen;
 13445  00570E  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 13446                           
 13447                           ;DisplayProtocol.h: 234: }else if(actualScreen == 5) {
 13448  005712  0012               	return	
 13449  005714                     l11244:
 13450                           
 13451                           ; BSR set to: 1
 13452  005714  0E05               	movlw	5
 13453  005716  0101               	movlb	1	; () banked
 13454  005718  19B9               	xorwf	_actualScreen& (0+255),w,b
 13455  00571A  A4D8               	btfss	status,2,c
 13456  00571C  D015               	goto	l11256
 13457                           
 13458                           ; BSR set to: 1
 13459                           ;DisplayProtocol.h: 235: if(menuSection != 2) {
 13460  00571E  0E02               	movlw	2
 13461  005720  0101               	movlb	1	; () banked
 13462  005722  19BD               	xorwf	_menuSection& (0+255),w,b
 13463  005724  B4D8               	btfsc	status,2,c
 13464  005726  D00C               	goto	l11254
 13465                           
 13466                           ; BSR set to: 1
 13467                           ;DisplayProtocol.h: 236: chanValSection++;
 13468  005728  0101               	movlb	1	; () banked
 13469  00572A  2B9B               	incf	_chanValSection& (0+255),f,b
 13470                           
 13471                           ; BSR set to: 1
 13472                           ;DisplayProtocol.h: 237: if(chanValSection > 5)
 13473  00572C  0101               	movlb	1	; () banked
 13474  00572E  519B               	movf	_chanValSection& (0+255),w,b
 13475  005730  0A80               	xorlw	128
 13476  005732  0F7A               	addlw	-134
 13477  005734  A0D8               	btfss	status,0,c
 13478  005736  0012               	return	
 13479                           
 13480                           ; BSR set to: 1
 13481                           ;DisplayProtocol.h: 238: chanValSection = 0;
 13482  005738  0E00               	movlw	0
 13483  00573A  0101               	movlb	1	; () banked
 13484  00573C  6F9B               	movwf	_chanValSection& (0+255),b
 13485                           
 13486                           ; BSR set to: 1
 13487                           ;DisplayProtocol.h: 239: }else
 13488  00573E  0012               	return	
 13489  005740                     l11254:
 13490                           
 13491                           ; BSR set to: 1
 13492                           ;DisplayProtocol.h: 240: actualScreen = 4;
 13493  005740  0E04               	movlw	4
 13494  005742  0101               	movlb	1	; () banked
 13495  005744  6FB9               	movwf	_actualScreen& (0+255),b
 13496                           
 13497                           ; BSR set to: 1
 13498                           ;DisplayProtocol.h: 241: }else if(actualScreen == 11)
 13499  005746  0012               	return	
 13500  005748                     l11256:
 13501                           
 13502                           ; BSR set to: 1
 13503  005748  0E0B               	movlw	11
 13504  00574A  0101               	movlb	1	; () banked
 13505  00574C  19B9               	xorwf	_actualScreen& (0+255),w,b
 13506  00574E  A4D8               	btfss	status,2,c
 13507  005750  D004               	goto	l11260
 13508                           
 13509                           ; BSR set to: 1
 13510                           ;DisplayProtocol.h: 242: actualScreen = 4;
 13511  005752  0E04               	movlw	4
 13512  005754  0101               	movlb	1	; () banked
 13513  005756  6FB9               	movwf	_actualScreen& (0+255),b
 13514  005758  0012               	return	
 13515  00575A                     l11260:
 13516                           
 13517                           ; BSR set to: 1
 13518                           ;DisplayProtocol.h: 243: else if(actualScreen == 12) {
 13519  00575A  0E0C               	movlw	12
 13520  00575C  0101               	movlb	1	; () banked
 13521  00575E  19B9               	xorwf	_actualScreen& (0+255),w,b
 13522  005760  A4D8               	btfss	status,2,c
 13523  005762  D00C               	goto	l11268
 13524                           
 13525                           ; BSR set to: 1
 13526                           ;DisplayProtocol.h: 244: chanValSection++;
 13527  005764  0101               	movlb	1	; () banked
 13528  005766  2B9B               	incf	_chanValSection& (0+255),f,b
 13529                           
 13530                           ; BSR set to: 1
 13531                           ;DisplayProtocol.h: 245: if(chanValSection > 5)
 13532  005768  0101               	movlb	1	; () banked
 13533  00576A  519B               	movf	_chanValSection& (0+255),w,b
 13534  00576C  0A80               	xorlw	128
 13535  00576E  0F7A               	addlw	-134
 13536  005770  A0D8               	btfss	status,0,c
 13537  005772  0012               	return	
 13538                           
 13539                           ; BSR set to: 1
 13540                           ;DisplayProtocol.h: 246: chanValSection = 0;
 13541  005774  0E00               	movlw	0
 13542  005776  0101               	movlb	1	; () banked
 13543  005778  6F9B               	movwf	_chanValSection& (0+255),b
 13544                           
 13545                           ; BSR set to: 1
 13546                           ;DisplayProtocol.h: 247: }else if(actualScreen == 13) {
 13547  00577A  0012               	return	
 13548  00577C                     l11268:
 13549                           
 13550                           ; BSR set to: 1
 13551  00577C  0E0D               	movlw	13
 13552  00577E  0101               	movlb	1	; () banked
 13553  005780  19B9               	xorwf	_actualScreen& (0+255),w,b
 13554  005782  A4D8               	btfss	status,2,c
 13555  005784  0012               	return	
 13556                           
 13557                           ; BSR set to: 1
 13558                           ;DisplayProtocol.h: 248: initProtocoll(1);
 13559  005786  0E01               	movlw	1
 13560  005788  ECA3  F036         	call	_initProtocoll
 13561  00578C  0012               	return	
 13562  00578E                     __end_of_pressRETRO:
 13563                           	opt stack 0
 13564                           tblptru	equ	0xFF8
 13565                           tblptrh	equ	0xFF7
 13566                           tblptrl	equ	0xFF6
 13567                           tablat	equ	0xFF5
 13568                           prodh	equ	0xFF4
 13569                           prodl	equ	0xFF3
 13570                           intcon	equ	0xFF2
 13571                           postinc0	equ	0xFEE
 13572                           wreg	equ	0xFE8
 13573                           postdec1	equ	0xFE5
 13574                           fsr1l	equ	0xFE1
 13575                           indf2	equ	0xFDF
 13576                           postinc2	equ	0xFDE
 13577                           postdec2	equ	0xFDD
 13578                           fsr2h	equ	0xFDA
 13579                           fsr2l	equ	0xFD9
 13580                           status	equ	0xFD8
 13581                           
 13582 ;; *************** function _pressENTER *****************
 13583 ;; Defined at:
 13584 ;;		line 291 in file "source/DisplayProtocol.h"
 13585 ;; Parameters:    Size  Location     Type
 13586 ;;		None
 13587 ;; Auto vars:     Size  Location     Type
 13588 ;;		None
 13589 ;; Return value:  Size  Location     Type
 13590 ;;                  1    wreg      void 
 13591 ;; Registers used:
 13592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13593 ;; Tracked objects:
 13594 ;;		On entry : 0/0
 13595 ;;		On exit  : 0/0
 13596 ;;		Unchanged: 0/0
 13597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13598 ;;      Params:         0       0       0       0       0       0       0
 13599 ;;      Locals:         0       0       0       0       0       0       0
 13600 ;;      Temps:          0       0       0       0       0       0       0
 13601 ;;      Totals:         0       0       0       0       0       0       0
 13602 ;;Total ram usage:        0 bytes
 13603 ;; Hardware stack levels used:    1
 13604 ;; Hardware stack levels required when called:   17
 13605 ;; This function calls:
 13606 ;;		___ftmul
 13607 ;;		_checkPass
 13608 ;;		_confirmEdition
 13609 ;;		_desintegrator
 13610 ;;		_initProtocoll
 13611 ;;		_setPWM2duty
 13612 ;; This function is called by:
 13613 ;;		_buttonChecking
 13614 ;; This function uses a non-reentrant model
 13615 ;;
 13616                           
 13617                           	psect	text55
 13618  0011A2                     __ptext55:
 13619                           	opt stack 0
 13620  0011A2                     _pressENTER:
 13621                           	opt stack 12
 13622                           
 13623                           ;DisplayProtocol.h: 292: if (actualScreen == 1) {
 13624                           
 13625                           ;incstack = 0
 13626  0011A2  0101               	movlb	1	; () banked
 13627  0011A4  05B9               	decf	_actualScreen& (0+255),w,b
 13628  0011A6  A4D8               	btfss	status,2,c
 13629  0011A8  D018               	goto	l11326
 13630                           
 13631                           ; BSR set to: 1
 13632                           ;DisplayProtocol.h: 293: passSection++;
 13633  0011AA  0101               	movlb	1	; () banked
 13634  0011AC  2BBE               	incf	_passSection& (0+255),f,b
 13635                           
 13636                           ; BSR set to: 1
 13637                           ;DisplayProtocol.h: 294: if (passSection > 3) {
 13638  0011AE  0101               	movlb	1	; () banked
 13639  0011B0  51BE               	movf	_passSection& (0+255),w,b
 13640  0011B2  0A80               	xorlw	128
 13641  0011B4  0F7C               	addlw	-132
 13642  0011B6  A0D8               	btfss	status,0,c
 13643  0011B8  0012               	return	
 13644                           
 13645                           ; BSR set to: 1
 13646                           ;DisplayProtocol.h: 295: passSection = 0;
 13647  0011BA  0E00               	movlw	0
 13648  0011BC  0101               	movlb	1	; () banked
 13649  0011BE  6FBE               	movwf	_passSection& (0+255),b
 13650                           
 13651                           ; BSR set to: 1
 13652                           ;DisplayProtocol.h: 296: if (checkPass())
 13653  0011C0  EC83  F031         	call	_checkPass	;wreg free
 13654  0011C4  0900               	iorlw	0
 13655  0011C6  B4D8               	btfsc	status,2,c
 13656  0011C8  D004               	goto	l11324
 13657                           
 13658                           ;DisplayProtocol.h: 297: actualScreen = 8;
 13659  0011CA  0E08               	movlw	8
 13660  0011CC  0101               	movlb	1	; () banked
 13661  0011CE  6FB9               	movwf	_actualScreen& (0+255),b
 13662  0011D0  0012               	return	
 13663  0011D2                     l11324:
 13664                           
 13665                           ;DisplayProtocol.h: 298: else
 13666                           ;DisplayProtocol.h: 299: actualScreen = 7;
 13667  0011D2  0E07               	movlw	7
 13668  0011D4  0101               	movlb	1	; () banked
 13669  0011D6  6FB9               	movwf	_actualScreen& (0+255),b
 13670                           
 13671                           ; BSR set to: 1
 13672                           ;DisplayProtocol.h: 300: }
 13673                           ;DisplayProtocol.h: 301: }else if(actualScreen == 4) {
 13674                           
 13675                           ; BSR set to: 1
 13676  0011D8  0012               	return	
 13677  0011DA                     l11326:
 13678                           
 13679                           ; BSR set to: 1
 13680  0011DA  0E04               	movlw	4
 13681  0011DC  0101               	movlb	1	; () banked
 13682  0011DE  19B9               	xorwf	_actualScreen& (0+255),w,b
 13683  0011E0  B4D8               	btfsc	status,2,c
 13684  0011E2  D038               	goto	l11350
 13685  0011E4  D046               	goto	l11352
 13686  0011E6                     l711:
 13687                           
 13688                           ; BSR set to: 1
 13689                           ;DisplayProtocol.h: 304: tempLastScreen = actualScreen;
 13690  0011E6  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 13691                           
 13692                           ; BSR set to: 1
 13693                           ;DisplayProtocol.h: 305: if(processStarted) {
 13694  0011EA  0100               	movlb	0	; () banked
 13695  0011EC  51C4               	movf	_processStarted& (0+255),w,b
 13696  0011EE  B4D8               	btfsc	status,2,c
 13697  0011F0  D007               	goto	l11334
 13698                           
 13699                           ; BSR set to: 0
 13700                           ;DisplayProtocol.h: 306: actualScreen = 3;
 13701  0011F2  0E03               	movlw	3
 13702  0011F4  0101               	movlb	1	; () banked
 13703  0011F6  6FB9               	movwf	_actualScreen& (0+255),b
 13704                           
 13705                           ;DisplayProtocol.h: 307: selSN = 0;
 13706  0011F8  0E00               	movlw	0
 13707  0011FA  0101               	movlb	1	; () banked
 13708  0011FC  6FBF               	movwf	_selSN& (0+255),b
 13709                           
 13710                           ;DisplayProtocol.h: 308: }else {
 13711  0011FE  0012               	return	
 13712  001200                     l11334:
 13713                           
 13714                           ;DisplayProtocol.h: 309: actualScreen = 2;
 13715  001200  0E02               	movlw	2
 13716  001202  0101               	movlb	1	; () banked
 13717  001204  6FB9               	movwf	_actualScreen& (0+255),b
 13718                           
 13719                           ;DisplayProtocol.h: 310: selSN = 1;
 13720  001206  0E01               	movlw	1
 13721  001208  0101               	movlb	1	; () banked
 13722  00120A  6FBF               	movwf	_selSN& (0+255),b
 13723                           
 13724                           ; BSR set to: 1
 13725                           ;DisplayProtocol.h: 311: }
 13726                           ;DisplayProtocol.h: 312: break;
 13727  00120C  0012               	return	
 13728  00120E                     l715:
 13729                           
 13730                           ; BSR set to: 1
 13731                           ;DisplayProtocol.h: 314: chanValf = kgXcorte;
 13732  00120E  C18F  F1B1         	movff	_kgXcorte,_chanValf
 13733  001212  C190  F1B2         	movff	_kgXcorte+1,_chanValf+1
 13734  001216  C191  F1B3         	movff	_kgXcorte+2,_chanValf+2
 13735                           
 13736                           ; BSR set to: 1
 13737                           ;DisplayProtocol.h: 315: desintegrator();
 13738  00121A  ECE6  F019         	call	_desintegrator	;wreg free
 13739                           
 13740                           ;DisplayProtocol.h: 316: actualScreen = 5;
 13741  00121E  0E05               	movlw	5
 13742  001220  0101               	movlb	1	; () banked
 13743  001222  6FB9               	movwf	_actualScreen& (0+255),b
 13744                           
 13745                           ;DisplayProtocol.h: 317: break;
 13746  001224  0012               	return	
 13747  001226                     l716:
 13748                           
 13749                           ; BSR set to: 1
 13750                           ;DisplayProtocol.h: 319: tempLastScreen = actualScreen;
 13751  001226  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 13752                           
 13753                           ;DisplayProtocol.h: 320: chanVals = numCortes;
 13754  00122A  C0D0  F1B4         	movff	_numCortes,_chanVals
 13755  00122E  C0D1  F1B5         	movff	_numCortes+1,_chanVals+1
 13756                           
 13757                           ; BSR set to: 1
 13758                           ;DisplayProtocol.h: 321: actualScreen = 5;
 13759  001232  0E05               	movlw	5
 13760  001234  0101               	movlb	1	; () banked
 13761  001236  6FB9               	movwf	_actualScreen& (0+255),b
 13762                           
 13763                           ;DisplayProtocol.h: 322: break;
 13764  001238  0012               	return	
 13765  00123A                     l11342:
 13766                           
 13767                           ; BSR set to: 1
 13768                           ;DisplayProtocol.h: 324: if(!processStarted) {
 13769  00123A  0100               	movlb	0	; () banked
 13770  00123C  51C4               	movf	_processStarted& (0+255),w,b
 13771  00123E  A4D8               	btfss	status,2,c
 13772  001240  0012               	return	
 13773                           
 13774                           ; BSR set to: 0
 13775                           ;DisplayProtocol.h: 325: tempLastScreen = actualScreen;
 13776  001242  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 13777                           
 13778                           ; BSR set to: 0
 13779                           ;DisplayProtocol.h: 326: selSN = 1;
 13780  001246  0E01               	movlw	1
 13781  001248  0101               	movlb	1	; () banked
 13782  00124A  6FBF               	movwf	_selSN& (0+255),b
 13783                           
 13784                           ;DisplayProtocol.h: 327: actualScreen = 11;
 13785  00124C  0E0B               	movlw	11
 13786  00124E  0101               	movlb	1	; () banked
 13787  001250  6FB9               	movwf	_actualScreen& (0+255),b
 13788                           
 13789                           ; BSR set to: 1
 13790                           ;DisplayProtocol.h: 330: }
 13791                           ;DisplayProtocol.h: 331: }
 13792                           
 13793                           ; BSR set to: 1
 13794                           ;DisplayProtocol.h: 328: }
 13795                           ;DisplayProtocol.h: 329: break;
 13796  001252  0012               	return	
 13797  001254                     l11350:
 13798                           
 13799                           ; BSR set to: 1
 13800  001254  0101               	movlb	1	; () banked
 13801  001256  51BD               	movf	_menuSection& (0+255),w,b
 13802                           
 13803                           ; Switch size 1, requested type "space"
 13804                           ; Number of cases is 4, Range of values is 0 to 3
 13805                           ; switch strategies available:
 13806                           ; Name         Instructions Cycles
 13807                           ; simple_byte           13     7 (average)
 13808                           ;	Chosen strategy is simple_byte
 13809  001258  0A00               	xorlw	0	; case 0
 13810  00125A  B4D8               	btfsc	status,2,c
 13811  00125C  D7C4               	goto	l711
 13812  00125E  0A01               	xorlw	1	; case 1
 13813  001260  B4D8               	btfsc	status,2,c
 13814  001262  D7D5               	goto	l715
 13815  001264  0A03               	xorlw	3	; case 2
 13816  001266  B4D8               	btfsc	status,2,c
 13817  001268  D7DE               	goto	l716
 13818  00126A  0A01               	xorlw	1	; case 3
 13819  00126C  A4D8               	btfss	status,2,c
 13820                           
 13821                           ; BSR set to: 1
 13822                           ;DisplayProtocol.h: 332: }else if(actualScreen == 7)
 13823  00126E  0012               	return	
 13824  001270  D7E4               	goto	l11342
 13825  001272                     l11352:
 13826                           
 13827                           ; BSR set to: 1
 13828  001272  0E07               	movlw	7
 13829  001274  0101               	movlb	1	; () banked
 13830  001276  19B9               	xorwf	_actualScreen& (0+255),w,b
 13831  001278  A4D8               	btfss	status,2,c
 13832  00127A  D004               	goto	l11356
 13833                           
 13834                           ; BSR set to: 1
 13835                           ;DisplayProtocol.h: 333: actualScreen = 1;
 13836  00127C  0E01               	movlw	1
 13837  00127E  0101               	movlb	1	; () banked
 13838  001280  6FB9               	movwf	_actualScreen& (0+255),b
 13839  001282  0012               	return	
 13840  001284                     l11356:
 13841                           
 13842                           ; BSR set to: 1
 13843                           ;DisplayProtocol.h: 334: else if(actualScreen == 6) {
 13844  001284  0E06               	movlw	6
 13845  001286  0101               	movlb	1	; () banked
 13846  001288  19B9               	xorwf	_actualScreen& (0+255),w,b
 13847  00128A  B4D8               	btfsc	status,2,c
 13848  00128C  0012               	return	
 13849                           
 13850                           ; BSR set to: 1
 13851                           
 13852                           ; BSR set to: 1
 13853                           
 13854                           ; BSR set to: 1
 13855                           ;DisplayProtocol.h: 336: }else if(actualScreen == 5) {
 13856  00128E  0E05               	movlw	5
 13857  001290  0101               	movlb	1	; () banked
 13858  001292  19B9               	xorwf	_actualScreen& (0+255),w,b
 13859  001294  A4D8               	btfss	status,2,c
 13860  001296  D018               	goto	l11372
 13861                           
 13862                           ; BSR set to: 1
 13863                           ;DisplayProtocol.h: 337: if(menuSection != 2) {
 13864  001298  0E02               	movlw	2
 13865  00129A  0101               	movlb	1	; () banked
 13866  00129C  19BD               	xorwf	_menuSection& (0+255),w,b
 13867  00129E  B4D8               	btfsc	status,2,c
 13868  0012A0  D009               	goto	l11370
 13869                           
 13870                           ; BSR set to: 1
 13871                           ;DisplayProtocol.h: 338: chanValSection--;
 13872  0012A2  0101               	movlb	1	; () banked
 13873  0012A4  079B               	decf	_chanValSection& (0+255),f,b
 13874                           
 13875                           ; BSR set to: 1
 13876                           ;DisplayProtocol.h: 339: if(chanValSection < 0)
 13877  0012A6  0101               	movlb	1	; () banked
 13878  0012A8  AF9B               	btfss	_chanValSection& (0+255),7,b
 13879  0012AA  0012               	return	
 13880                           
 13881                           ; BSR set to: 1
 13882                           ;DisplayProtocol.h: 340: chanValSection = 5;
 13883  0012AC  0E05               	movlw	5
 13884  0012AE  0101               	movlb	1	; () banked
 13885  0012B0  6F9B               	movwf	_chanValSection& (0+255),b
 13886                           
 13887                           ; BSR set to: 1
 13888                           ;DisplayProtocol.h: 341: }else
 13889  0012B2  0012               	return	
 13890  0012B4                     l11370:
 13891                           
 13892                           ; BSR set to: 1
 13893                           ;DisplayProtocol.h: 342: confirmEdition(!processStarted);
 13894  0012B4  0100               	movlb	0	; () banked
 13895  0012B6  51C4               	movf	_processStarted& (0+255),w,b
 13896  0012B8  A4D8               	btfss	status,2,c
 13897  0012BA  D002               	goto	u17020
 13898  0012BC  0E01               	movlw	1
 13899  0012BE  D001               	goto	u17030
 13900  0012C0                     u17020:
 13901  0012C0  0E00               	movlw	0
 13902  0012C2                     u17030:
 13903  0012C2  ECE5  F02C         	call	_confirmEdition
 13904                           
 13905                           ;DisplayProtocol.h: 343: }else if(actualScreen == 2) {
 13906  0012C6  0012               	return	
 13907  0012C8                     l11372:
 13908  0012C8  0E02               	movlw	2
 13909  0012CA  0101               	movlb	1	; () banked
 13910  0012CC  19B9               	xorwf	_actualScreen& (0+255),w,b
 13911  0012CE  A4D8               	btfss	status,2,c
 13912  0012D0  D018               	goto	l11382
 13913                           
 13914                           ; BSR set to: 1
 13915                           ;DisplayProtocol.h: 344: initProtocoll(!selSN);
 13916  0012D2  0101               	movlb	1	; () banked
 13917  0012D4  51BF               	movf	_selSN& (0+255),w,b
 13918  0012D6  A4D8               	btfss	status,2,c
 13919  0012D8  D002               	goto	u17050
 13920  0012DA  0E01               	movlw	1
 13921  0012DC  D001               	goto	u17060
 13922  0012DE                     u17050:
 13923  0012DE  0E00               	movlw	0
 13924  0012E0                     u17060:
 13925  0012E0  ECA3  F036         	call	_initProtocoll
 13926                           
 13927                           ;DisplayProtocol.h: 345: if(!selSN) {
 13928  0012E4  0101               	movlb	1	; () banked
 13929  0012E6  51BF               	movf	_selSN& (0+255),w,b
 13930  0012E8  A4D8               	btfss	status,2,c
 13931  0012EA  D008               	goto	l730
 13932                           
 13933                           ; BSR set to: 1
 13934                           ;DisplayProtocol.h: 346: actualScreen = 14;
 13935  0012EC  0E0E               	movlw	14
 13936  0012EE  0101               	movlb	1	; () banked
 13937  0012F0  6FB9               	movwf	_actualScreen& (0+255),b
 13938                           
 13939                           ; BSR set to: 1
 13940                           ;DisplayProtocol.h: 347: LATCbits.LATC4 = 1;
 13941  0012F2  888B               	bsf	3979,4,c	;volatile
 13942                           
 13943                           ;DisplayProtocol.h: 348: ready2Cut = 1;
 13944  0012F4  0E01               	movlw	1
 13945  0012F6  0100               	movlb	0	; () banked
 13946  0012F8  6FC5               	movwf	_ready2Cut& (0+255),b
 13947                           
 13948                           ;DisplayProtocol.h: 350: }else
 13949  0012FA  0012               	return	
 13950  0012FC                     l730:
 13951                           
 13952                           ; BSR set to: 1
 13953                           ;DisplayProtocol.h: 351: actualScreen = tempLastScreen;
 13954  0012FC  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 13955                           
 13956                           ; BSR set to: 1
 13957                           ;DisplayProtocol.h: 352: }else if(actualScreen == 14) {
 13958  001300  0012               	return	
 13959  001302                     l11382:
 13960                           
 13961                           ; BSR set to: 1
 13962  001302  0E0E               	movlw	14
 13963  001304  0101               	movlb	1	; () banked
 13964  001306  19B9               	xorwf	_actualScreen& (0+255),w,b
 13965  001308  A4D8               	btfss	status,2,c
 13966  00130A  D00A               	goto	l11388
 13967                           
 13968                           ; BSR set to: 1
 13969                           ;DisplayProtocol.h: 354: setPWM2duty(400);
 13970  00130C  0E01               	movlw	1
 13971  00130E  0101               	movlb	1	; () banked
 13972  001310  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 13973  001312  0E90               	movlw	144
 13974  001314  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 13975  001316  EC85  F02F         	call	_setPWM2duty	;wreg free
 13976                           
 13977                           ;DisplayProtocol.h: 355: actualScreen = tempLastScreen;
 13978  00131A  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 13979                           
 13980                           ;DisplayProtocol.h: 356: }else if(actualScreen == 3) {
 13981  00131E  0012               	return	
 13982  001320                     l11388:
 13983  001320  0E03               	movlw	3
 13984  001322  0101               	movlb	1	; () banked
 13985  001324  19B9               	xorwf	_actualScreen& (0+255),w,b
 13986  001326  A4D8               	btfss	status,2,c
 13987  001328  D046               	goto	l11410
 13988                           
 13989                           ; BSR set to: 1
 13990                           ;DisplayProtocol.h: 357: actualScreen = tempLastScreen;
 13991  00132A  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 13992                           
 13993                           ; BSR set to: 1
 13994                           ;DisplayProtocol.h: 358: if(!selSN) {
 13995  00132E  0101               	movlb	1	; () banked
 13996  001330  51BF               	movf	_selSN& (0+255),w,b
 13997  001332  A4D8               	btfss	status,2,c
 13998  001334  0012               	return	
 13999                           
 14000                           ; BSR set to: 1
 14001                           ;DisplayProtocol.h: 359: processStarted = 0;
 14002  001336  0E00               	movlw	0
 14003  001338  0100               	movlb	0	; () banked
 14004  00133A  6FC4               	movwf	_processStarted& (0+255),b
 14005                           
 14006                           ;DisplayProtocol.h: 360: processState = 0;
 14007  00133C  0E00               	movlw	0
 14008  00133E  0100               	movlb	0	; () banked
 14009  001340  6FB5               	movwf	(_processState+1)& (0+255),b
 14010  001342  0E00               	movlw	0
 14011  001344  6FB4               	movwf	_processState& (0+255),b
 14012                           
 14013                           ; BSR set to: 0
 14014                           ;DisplayProtocol.h: 361: LATCbits.LATC4 = 0;
 14015  001346  988B               	bcf	3979,4,c	;volatile
 14016                           
 14017                           ; BSR set to: 0
 14018                           ;DisplayProtocol.h: 362: if(tempLastScreen == 14)
 14019  001348  0E0E               	movlw	14
 14020  00134A  0100               	movlb	0	; () banked
 14021  00134C  19C8               	xorwf	_tempLastScreen& (0+255),w,b
 14022  00134E  A4D8               	btfss	status,2,c
 14023  001350  D003               	goto	l737
 14024                           
 14025                           ; BSR set to: 0
 14026                           ;DisplayProtocol.h: 363: actualScreen = 0;
 14027  001352  0E00               	movlw	0
 14028  001354  0101               	movlb	1	; () banked
 14029  001356  6FB9               	movwf	_actualScreen& (0+255),b
 14030  001358                     l737:
 14031                           
 14032                           ;DisplayProtocol.h: 364: if(calibMode) {
 14033  001358  0100               	movlb	0	; () banked
 14034  00135A  51BB               	movf	_calibMode& (0+255),w,b
 14035  00135C  B4D8               	btfsc	status,2,c
 14036  00135E  D027               	goto	l738
 14037                           
 14038                           ; BSR set to: 0
 14039                           ;DisplayProtocol.h: 365: numCortes = tempNumCortes;
 14040  001360  C0D2  F0D0         	movff	_tempNumCortes,_numCortes
 14041  001364  C0D3  F0D1         	movff	_tempNumCortes+1,_numCortes+1
 14042                           
 14043                           ;DisplayProtocol.h: 366: tiXcorte = temptiXcorte;
 14044  001368  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 14045  00136C  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 14046  001370  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 14047                           
 14048                           ; BSR set to: 0
 14049                           ;DisplayProtocol.h: 367: timsXcorte = (float)tiXcorte * 1000;
 14050  001374  C195  F114         	movff	_tiXcorte,___ftmul@f1
 14051  001378  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 14052  00137C  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 14053  001380  0E00               	movlw	0
 14054  001382  0101               	movlb	1	; () banked
 14055  001384  6F17               	movwf	___ftmul@f2& (0+255),b
 14056  001386  0E7A               	movlw	122
 14057  001388  0101               	movlb	1	; () banked
 14058  00138A  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 14059  00138C  0E44               	movlw	68
 14060  00138E  0101               	movlb	1	; () banked
 14061  001390  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 14062  001392  EC1F  F01D         	call	___ftmul	;wreg free
 14063  001396  C114  F059         	movff	?___ftmul,_timsXcorte
 14064  00139A  C115  F05A         	movff	?___ftmul+1,_timsXcorte+1
 14065  00139E  C116  F05B         	movff	?___ftmul+2,_timsXcorte+2
 14066                           
 14067                           ;DisplayProtocol.h: 368: calibMode = 0;
 14068  0013A2  0E00               	movlw	0
 14069  0013A4  0100               	movlb	0	; () banked
 14070  0013A6  6FBB               	movwf	_calibMode& (0+255),b
 14071                           
 14072                           ; BSR set to: 0
 14073                           ;DisplayProtocol.h: 369: actualScreen = 4;
 14074  0013A8  0E04               	movlw	4
 14075  0013AA  0101               	movlb	1	; () banked
 14076  0013AC  6FB9               	movwf	_actualScreen& (0+255),b
 14077  0013AE                     l738:
 14078                           
 14079                           ;DisplayProtocol.h: 370: }
 14080                           ;DisplayProtocol.h: 371: initProtocoll(1);
 14081  0013AE  0E01               	movlw	1
 14082  0013B0  ECA3  F036         	call	_initProtocoll
 14083                           
 14084                           ;DisplayProtocol.h: 372: }
 14085                           ;DisplayProtocol.h: 373: }else if(actualScreen == 10) {
 14086  0013B4  0012               	return	
 14087  0013B6                     l11410:
 14088  0013B6  0E0A               	movlw	10
 14089  0013B8  0101               	movlb	1	; () banked
 14090  0013BA  19B9               	xorwf	_actualScreen& (0+255),w,b
 14091  0013BC  A4D8               	btfss	status,2,c
 14092  0013BE  D00B               	goto	l11416
 14093                           
 14094                           ; BSR set to: 1
 14095                           ;DisplayProtocol.h: 374: if(!selSN)
 14096  0013C0  0101               	movlb	1	; () banked
 14097  0013C2  51BF               	movf	_selSN& (0+255),w,b
 14098  0013C4  A4D8               	btfss	status,2,c
 14099  0013C6  D004               	goto	l741
 14100                           
 14101                           ; BSR set to: 1
 14102                           ;DisplayProtocol.h: 375: confirmEdition(1);
 14103  0013C8  0E01               	movlw	1
 14104  0013CA  ECE5  F02C         	call	_confirmEdition
 14105  0013CE  0012               	return	
 14106  0013D0                     l741:
 14107                           
 14108                           ; BSR set to: 1
 14109                           ;DisplayProtocol.h: 376: else
 14110                           ;DisplayProtocol.h: 377: actualScreen = tempLastScreen;
 14111  0013D0  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 14112                           
 14113                           ; BSR set to: 1
 14114                           ;DisplayProtocol.h: 378: }else if(actualScreen == 8)
 14115  0013D4  0012               	return	
 14116  0013D6                     l11416:
 14117                           
 14118                           ; BSR set to: 1
 14119  0013D6  0E08               	movlw	8
 14120  0013D8  0101               	movlb	1	; () banked
 14121  0013DA  19B9               	xorwf	_actualScreen& (0+255),w,b
 14122  0013DC  A4D8               	btfss	status,2,c
 14123  0013DE  D004               	goto	l11420
 14124                           
 14125                           ; BSR set to: 1
 14126                           ;DisplayProtocol.h: 379: actualScreen = 4;
 14127  0013E0  0E04               	movlw	4
 14128  0013E2  0101               	movlb	1	; () banked
 14129  0013E4  6FB9               	movwf	_actualScreen& (0+255),b
 14130  0013E6  0012               	return	
 14131  0013E8                     l11420:
 14132                           
 14133                           ; BSR set to: 1
 14134                           ;DisplayProtocol.h: 380: else if(actualScreen == 9)
 14135  0013E8  0E09               	movlw	9
 14136  0013EA  0101               	movlb	1	; () banked
 14137  0013EC  19B9               	xorwf	_actualScreen& (0+255),w,b
 14138  0013EE  A4D8               	btfss	status,2,c
 14139  0013F0  D004               	goto	l11424
 14140                           
 14141                           ; BSR set to: 1
 14142                           ;DisplayProtocol.h: 381: actualScreen = 0;
 14143  0013F2  0E00               	movlw	0
 14144  0013F4  0101               	movlb	1	; () banked
 14145  0013F6  6FB9               	movwf	_actualScreen& (0+255),b
 14146  0013F8  0012               	return	
 14147  0013FA                     l11424:
 14148                           
 14149                           ; BSR set to: 1
 14150                           ;DisplayProtocol.h: 382: else if(actualScreen == 11) {
 14151  0013FA  0E0B               	movlw	11
 14152  0013FC  0101               	movlb	1	; () banked
 14153  0013FE  19B9               	xorwf	_actualScreen& (0+255),w,b
 14154  001400  A4D8               	btfss	status,2,c
 14155  001402  D05D               	goto	l11464
 14156                           
 14157                           ; BSR set to: 1
 14158                           ;DisplayProtocol.h: 383: initProtocoll(!selSN);
 14159  001404  0101               	movlb	1	; () banked
 14160  001406  51BF               	movf	_selSN& (0+255),w,b
 14161  001408  A4D8               	btfss	status,2,c
 14162  00140A  D002               	goto	u17180
 14163  00140C  0E01               	movlw	1
 14164  00140E  D001               	goto	u17190
 14165  001410                     u17180:
 14166  001410  0E00               	movlw	0
 14167  001412                     u17190:
 14168  001412  ECA3  F036         	call	_initProtocoll
 14169                           
 14170                           ;DisplayProtocol.h: 384: if(!selSN) {
 14171  001416  0101               	movlb	1	; () banked
 14172  001418  51BF               	movf	_selSN& (0+255),w,b
 14173  00141A  A4D8               	btfss	status,2,c
 14174  00141C  D04C               	goto	l11462
 14175                           
 14176                           ; BSR set to: 1
 14177                           ;DisplayProtocol.h: 385: actualScreen = 6;
 14178  00141E  0E06               	movlw	6
 14179  001420  0101               	movlb	1	; () banked
 14180  001422  6FB9               	movwf	_actualScreen& (0+255),b
 14181                           
 14182                           ; BSR set to: 1
 14183                           ;DisplayProtocol.h: 386: tempLastScreen = actualScreen;
 14184  001424  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 14185                           
 14186                           ;DisplayProtocol.h: 387: chanValf = 0;
 14187  001428  0E00               	movlw	0
 14188  00142A  0101               	movlb	1	; () banked
 14189  00142C  6FB1               	movwf	_chanValf& (0+255),b
 14190  00142E  0E00               	movlw	0
 14191  001430  0101               	movlb	1	; () banked
 14192  001432  6FB2               	movwf	(_chanValf+1)& (0+255),b
 14193  001434  0E00               	movlw	0
 14194  001436  0101               	movlb	1	; () banked
 14195  001438  6FB3               	movwf	(_chanValf+2)& (0+255),b
 14196                           
 14197                           ; BSR set to: 1
 14198                           ;DisplayProtocol.h: 388: desintegrator();
 14199  00143A  ECE6  F019         	call	_desintegrator	;wreg free
 14200                           
 14201                           ;DisplayProtocol.h: 389: temptiXcorte = tiXcorte;
 14202  00143E  C195  F0CD         	movff	_tiXcorte,_temptiXcorte
 14203  001442  C196  F0CE         	movff	_tiXcorte+1,_temptiXcorte+1
 14204  001446  C197  F0CF         	movff	_tiXcorte+2,_temptiXcorte+2
 14205                           
 14206                           ;DisplayProtocol.h: 390: tiXcorte = 5.0f;
 14207  00144A  0E00               	movlw	0
 14208  00144C  0101               	movlb	1	; () banked
 14209  00144E  6F95               	movwf	_tiXcorte& (0+255),b
 14210  001450  0EA0               	movlw	160
 14211  001452  0101               	movlb	1	; () banked
 14212  001454  6F96               	movwf	(_tiXcorte+1)& (0+255),b
 14213  001456  0E40               	movlw	64
 14214  001458  0101               	movlb	1	; () banked
 14215  00145A  6F97               	movwf	(_tiXcorte+2)& (0+255),b
 14216                           
 14217                           ; BSR set to: 1
 14218                           ;DisplayProtocol.h: 391: timsXcorte = 5000.0f;
 14219  00145C  0E40               	movlw	64
 14220  00145E  6E59               	movwf	_timsXcorte,c
 14221  001460  0E9C               	movlw	156
 14222  001462  6E5A               	movwf	_timsXcorte+1,c
 14223  001464  0E45               	movlw	69
 14224  001466  6E5B               	movwf	_timsXcorte+2,c
 14225                           
 14226                           ; BSR set to: 1
 14227                           ;DisplayProtocol.h: 392: tempNumCortes = numCortes;
 14228  001468  C0D0  F0D2         	movff	_numCortes,_tempNumCortes
 14229  00146C  C0D1  F0D3         	movff	_numCortes+1,_tempNumCortes+1
 14230                           
 14231                           ; BSR set to: 1
 14232                           ;DisplayProtocol.h: 393: numCortes = 1;
 14233  001470  0E00               	movlw	0
 14234  001472  0100               	movlb	0	; () banked
 14235  001474  6FD1               	movwf	(_numCortes+1)& (0+255),b
 14236  001476  0E01               	movlw	1
 14237  001478  6FD0               	movwf	_numCortes& (0+255),b
 14238                           
 14239                           ; BSR set to: 0
 14240                           ;DisplayProtocol.h: 394: processState = 0;
 14241  00147A  0E00               	movlw	0
 14242  00147C  0100               	movlb	0	; () banked
 14243  00147E  6FB5               	movwf	(_processState+1)& (0+255),b
 14244  001480  0E00               	movlw	0
 14245  001482  6FB4               	movwf	_processState& (0+255),b
 14246                           
 14247                           ; BSR set to: 0
 14248                           ;DisplayProtocol.h: 395: processTimer = 0;
 14249  001484  0E00               	movlw	0
 14250  001486  6E37               	movwf	_processTimer,c
 14251  001488  0E00               	movlw	0
 14252  00148A  6E38               	movwf	_processTimer+1,c
 14253  00148C  0E00               	movlw	0
 14254  00148E  6E39               	movwf	_processTimer+2,c
 14255  001490  0E00               	movlw	0
 14256  001492  6E3A               	movwf	_processTimer+3,c
 14257                           
 14258                           ; BSR set to: 0
 14259                           ;DisplayProtocol.h: 396: calibLevel = 0;
 14260  001494  0E00               	movlw	0
 14261  001496  0101               	movlb	1	; () banked
 14262  001498  6FBA               	movwf	_calibLevel& (0+255),b
 14263                           
 14264                           ; BSR set to: 1
 14265                           ;DisplayProtocol.h: 397: initProtocoll(1);
 14266  00149A  0E01               	movlw	1
 14267  00149C  ECA3  F036         	call	_initProtocoll
 14268                           
 14269                           ;DisplayProtocol.h: 398: LATCbits.LATC4 = 1;
 14270  0014A0  888B               	bsf	3979,4,c	;volatile
 14271                           
 14272                           ;DisplayProtocol.h: 399: ready2Cut = 1;
 14273  0014A2  0E01               	movlw	1
 14274  0014A4  0100               	movlb	0	; () banked
 14275  0014A6  6FC5               	movwf	_ready2Cut& (0+255),b
 14276                           
 14277                           ; BSR set to: 0
 14278                           ;DisplayProtocol.h: 400: actualScreen = 14;
 14279  0014A8  0E0E               	movlw	14
 14280  0014AA  0101               	movlb	1	; () banked
 14281  0014AC  6FB9               	movwf	_actualScreen& (0+255),b
 14282                           
 14283                           ; BSR set to: 1
 14284                           ;DisplayProtocol.h: 401: calibMode = 1;
 14285  0014AE  0E01               	movlw	1
 14286  0014B0  0100               	movlb	0	; () banked
 14287  0014B2  6FBB               	movwf	_calibMode& (0+255),b
 14288                           
 14289                           ;DisplayProtocol.h: 402: }else
 14290  0014B4  0012               	return	
 14291  0014B6                     l11462:
 14292                           
 14293                           ;DisplayProtocol.h: 403: actualScreen = 4;
 14294  0014B6  0E04               	movlw	4
 14295  0014B8  0101               	movlb	1	; () banked
 14296  0014BA  6FB9               	movwf	_actualScreen& (0+255),b
 14297                           
 14298                           ; BSR set to: 1
 14299                           ;DisplayProtocol.h: 404: }else if(actualScreen == 12) {
 14300  0014BC  0012               	return	
 14301  0014BE                     l11464:
 14302                           
 14303                           ; BSR set to: 1
 14304  0014BE  0E0C               	movlw	12
 14305  0014C0  0101               	movlb	1	; () banked
 14306  0014C2  19B9               	xorwf	_actualScreen& (0+255),w,b
 14307  0014C4  A4D8               	btfss	status,2,c
 14308  0014C6  D009               	goto	l11472
 14309                           
 14310                           ; BSR set to: 1
 14311                           ;DisplayProtocol.h: 405: chanValSection--;
 14312  0014C8  0101               	movlb	1	; () banked
 14313  0014CA  079B               	decf	_chanValSection& (0+255),f,b
 14314                           
 14315                           ; BSR set to: 1
 14316                           ;DisplayProtocol.h: 406: if(chanValSection < 0)
 14317  0014CC  0101               	movlb	1	; () banked
 14318  0014CE  AF9B               	btfss	_chanValSection& (0+255),7,b
 14319  0014D0  0012               	return	
 14320                           
 14321                           ; BSR set to: 1
 14322                           ;DisplayProtocol.h: 407: chanValSection = 5;
 14323  0014D2  0E05               	movlw	5
 14324  0014D4  0101               	movlb	1	; () banked
 14325  0014D6  6F9B               	movwf	_chanValSection& (0+255),b
 14326                           
 14327                           ; BSR set to: 1
 14328                           ;DisplayProtocol.h: 408: }else if(actualScreen == 15) {
 14329  0014D8  0012               	return	
 14330  0014DA                     l11472:
 14331                           
 14332                           ; BSR set to: 1
 14333  0014DA  0E0F               	movlw	15
 14334  0014DC  0101               	movlb	1	; () banked
 14335  0014DE  19B9               	xorwf	_actualScreen& (0+255),w,b
 14336  0014E0  A4D8               	btfss	status,2,c
 14337  0014E2  D03B               	goto	l11492
 14338                           
 14339                           ; BSR set to: 1
 14340                           ;DisplayProtocol.h: 409: if(!selSN) {
 14341  0014E4  0101               	movlb	1	; () banked
 14342  0014E6  51BF               	movf	_selSN& (0+255),w,b
 14343  0014E8  A4D8               	btfss	status,2,c
 14344  0014EA  D031               	goto	l756
 14345                           
 14346                           ; BSR set to: 1
 14347                           ;DisplayProtocol.h: 410: processStarted = 0;
 14348  0014EC  0E00               	movlw	0
 14349  0014EE  0100               	movlb	0	; () banked
 14350  0014F0  6FC4               	movwf	_processStarted& (0+255),b
 14351                           
 14352                           ;DisplayProtocol.h: 411: processState = 0;
 14353  0014F2  0E00               	movlw	0
 14354  0014F4  0100               	movlb	0	; () banked
 14355  0014F6  6FB5               	movwf	(_processState+1)& (0+255),b
 14356  0014F8  0E00               	movlw	0
 14357  0014FA  6FB4               	movwf	_processState& (0+255),b
 14358                           
 14359                           ; BSR set to: 0
 14360                           ;DisplayProtocol.h: 412: LATCbits.LATC4 = 0;
 14361  0014FC  988B               	bcf	3979,4,c	;volatile
 14362                           
 14363                           ; BSR set to: 0
 14364                           ;DisplayProtocol.h: 413: numCortes = tempNumCortes;
 14365  0014FE  C0D2  F0D0         	movff	_tempNumCortes,_numCortes
 14366  001502  C0D3  F0D1         	movff	_tempNumCortes+1,_numCortes+1
 14367                           
 14368                           ; BSR set to: 0
 14369                           ;DisplayProtocol.h: 414: tiXcorte = temptiXcorte;
 14370  001506  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 14371  00150A  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 14372  00150E  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 14373                           
 14374                           ; BSR set to: 0
 14375                           ;DisplayProtocol.h: 415: timsXcorte = (float)tiXcorte * 1000;
 14376  001512  C195  F114         	movff	_tiXcorte,___ftmul@f1
 14377  001516  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 14378  00151A  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 14379  00151E  0E00               	movlw	0
 14380  001520  0101               	movlb	1	; () banked
 14381  001522  6F17               	movwf	___ftmul@f2& (0+255),b
 14382  001524  0E7A               	movlw	122
 14383  001526  0101               	movlb	1	; () banked
 14384  001528  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 14385  00152A  0E44               	movlw	68
 14386  00152C  0101               	movlb	1	; () banked
 14387  00152E  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 14388  001530  EC1F  F01D         	call	___ftmul	;wreg free
 14389  001534  C114  F059         	movff	?___ftmul,_timsXcorte
 14390  001538  C115  F05A         	movff	?___ftmul+1,_timsXcorte+1
 14391  00153C  C116  F05B         	movff	?___ftmul+2,_timsXcorte+2
 14392                           
 14393                           ;DisplayProtocol.h: 416: calibMode = 0;
 14394  001540  0E00               	movlw	0
 14395  001542  0100               	movlb	0	; () banked
 14396  001544  6FBB               	movwf	_calibMode& (0+255),b
 14397                           
 14398                           ; BSR set to: 0
 14399                           ;DisplayProtocol.h: 417: actualScreen = 4;
 14400  001546  0E04               	movlw	4
 14401  001548  0101               	movlb	1	; () banked
 14402  00154A  6FB9               	movwf	_actualScreen& (0+255),b
 14403                           
 14404                           ;DisplayProtocol.h: 418: }else {
 14405  00154C  0012               	return	
 14406  00154E                     l756:
 14407                           
 14408                           ; BSR set to: 1
 14409                           ;DisplayProtocol.h: 419: actualScreen = tempLastScreen;
 14410  00154E  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 14411                           
 14412                           ; BSR set to: 1
 14413                           ;DisplayProtocol.h: 420: tempLastScreen = 6;
 14414  001552  0E06               	movlw	6
 14415  001554  0100               	movlb	0	; () banked
 14416  001556  6FC8               	movwf	_tempLastScreen& (0+255),b
 14417                           
 14418                           ; BSR set to: 0
 14419                           ;DisplayProtocol.h: 421: }
 14420                           ;DisplayProtocol.h: 422: }else if(actualScreen == 13) {
 14421  001558  0012               	return	
 14422  00155A                     l11492:
 14423  00155A  0E0D               	movlw	13
 14424  00155C  0101               	movlb	1	; () banked
 14425  00155E  19B9               	xorwf	_actualScreen& (0+255),w,b
 14426  001560  A4D8               	btfss	status,2,c
 14427  001562  0012               	return	
 14428                           
 14429                           ; BSR set to: 1
 14430                           ;DisplayProtocol.h: 423: initProtocoll(1);
 14431  001564  0E01               	movlw	1
 14432  001566  ECA3  F036         	call	_initProtocoll
 14433                           
 14434                           ;DisplayProtocol.h: 424: actualScreen = tempLastScreen;
 14435  00156A  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 14436  00156E  0012               	return	
 14437  001570                     __end_of_pressENTER:
 14438                           	opt stack 0
 14439                           tblptru	equ	0xFF8
 14440                           tblptrh	equ	0xFF7
 14441                           tblptrl	equ	0xFF6
 14442                           tablat	equ	0xFF5
 14443                           prodh	equ	0xFF4
 14444                           prodl	equ	0xFF3
 14445                           intcon	equ	0xFF2
 14446                           postinc0	equ	0xFEE
 14447                           wreg	equ	0xFE8
 14448                           postdec1	equ	0xFE5
 14449                           fsr1l	equ	0xFE1
 14450                           indf2	equ	0xFDF
 14451                           postinc2	equ	0xFDE
 14452                           postdec2	equ	0xFDD
 14453                           fsr2h	equ	0xFDA
 14454                           fsr2l	equ	0xFD9
 14455                           status	equ	0xFD8
 14456                           
 14457 ;; *************** function _checkPass *****************
 14458 ;; Defined at:
 14459 ;;		line 14 in file "source/DisplayProtocol.h"
 14460 ;; Parameters:    Size  Location     Type
 14461 ;;		None
 14462 ;; Auto vars:     Size  Location     Type
 14463 ;;  i               2    5[BANK1 ] int 
 14464 ;;  passOK          1    4[BANK1 ] unsigned char 
 14465 ;; Return value:  Size  Location     Type
 14466 ;;                  1    wreg      unsigned char 
 14467 ;; Registers used:
 14468 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14469 ;; Tracked objects:
 14470 ;;		On entry : 0/0
 14471 ;;		On exit  : 0/0
 14472 ;;		Unchanged: 0/0
 14473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14474 ;;      Params:         0       0       0       0       0       0       0
 14475 ;;      Locals:         0       0       3       0       0       0       0
 14476 ;;      Temps:          0       0       4       0       0       0       0
 14477 ;;      Totals:         0       0       7       0       0       0       0
 14478 ;;Total ram usage:        7 bytes
 14479 ;; Hardware stack levels used:    1
 14480 ;; Hardware stack levels required when called:   12
 14481 ;; This function calls:
 14482 ;;		Nothing
 14483 ;; This function is called by:
 14484 ;;		_pressENTER
 14485 ;; This function uses a non-reentrant model
 14486 ;;
 14487                           
 14488                           	psect	text56
 14489  006306                     __ptext56:
 14490                           	opt stack 0
 14491  006306                     _checkPass:
 14492                           	opt stack 16
 14493                           
 14494                           ;DisplayProtocol.h: 15: int i;
 14495                           ;DisplayProtocol.h: 16: char passOK = 0;
 14496                           
 14497                           ;incstack = 0
 14498  006306  0E00               	movlw	0
 14499  006308  0101               	movlb	1	; () banked
 14500  00630A  6F04               	movwf	checkPass@passOK& (0+255),b
 14501                           
 14502                           ;DisplayProtocol.h: 17: for (i = 0; i < 4; i++) {
 14503  00630C  0E00               	movlw	0
 14504  00630E  0101               	movlb	1	; () banked
 14505  006310  6F06               	movwf	(checkPass@i+1)& (0+255),b
 14506  006312  0E00               	movlw	0
 14507  006314  6F05               	movwf	checkPass@i& (0+255),b
 14508  006316                     l10772:
 14509                           
 14510                           ; BSR set to: 1
 14511  006316  0101               	movlb	1	; () banked
 14512  006318  BF06               	btfsc	(checkPass@i+1)& (0+255),7,b
 14513  00631A  D008               	goto	l10776
 14514  00631C  0101               	movlb	1	; () banked
 14515  00631E  5106               	movf	(checkPass@i+1)& (0+255),w,b
 14516  006320  E136               	bnz	l10786
 14517  006322  0E04               	movlw	4
 14518  006324  0101               	movlb	1	; () banked
 14519  006326  5D05               	subwf	checkPass@i& (0+255),w,b
 14520  006328  B0D8               	btfsc	status,0,c
 14521  00632A  D031               	goto	l10786
 14522  00632C                     l10776:
 14523                           
 14524                           ; BSR set to: 1
 14525                           ;DisplayProtocol.h: 18: if (introducido[i] == contra[i])
 14526  00632C  0EAB               	movlw	low _contra
 14527  00632E  0101               	movlb	1	; () banked
 14528  006330  2505               	addwf	checkPass@i& (0+255),w,b
 14529  006332  6ED9               	movwf	fsr2l,c
 14530  006334  0E00               	movlw	high _contra
 14531  006336  0101               	movlb	1	; () banked
 14532  006338  2106               	addwfc	(checkPass@i+1)& (0+255),w,b
 14533  00633A  6EDA               	movwf	fsr2h,c
 14534  00633C  50DF               	movf	indf2,w,c
 14535  00633E  0101               	movlb	1	; () banked
 14536  006340  6F00               	movwf	??_checkPass& (0+255),b
 14537  006342  6B01               	clrf	(??_checkPass+1)& (0+255),b
 14538  006344  0EA9               	movlw	low _introducido
 14539  006346  0101               	movlb	1	; () banked
 14540  006348  2505               	addwf	checkPass@i& (0+255),w,b
 14541  00634A  6ED9               	movwf	fsr2l,c
 14542  00634C  0E01               	movlw	high _introducido
 14543  00634E  0101               	movlb	1	; () banked
 14544  006350  2106               	addwfc	(checkPass@i+1)& (0+255),w,b
 14545  006352  6EDA               	movwf	fsr2h,c
 14546  006354  50DF               	movf	indf2,w,c
 14547  006356  0101               	movlb	1	; () banked
 14548  006358  6F02               	movwf	(??_checkPass+2)& (0+255),b
 14549  00635A  6B03               	clrf	(??_checkPass+3)& (0+255),b
 14550  00635C  BF02               	btfsc	(??_checkPass+2)& (0+255),7,b
 14551  00635E  0703               	decf	(??_checkPass+3)& (0+255),f,b
 14552  006360  0101               	movlb	1	; () banked
 14553  006362  5100               	movf	??_checkPass& (0+255),w,b
 14554  006364  0101               	movlb	1	; () banked
 14555  006366  1902               	xorwf	(??_checkPass+2)& (0+255),w,b
 14556  006368  E10A               	bnz	l10780
 14557  00636A  0101               	movlb	1	; () banked
 14558  00636C  5101               	movf	(??_checkPass+1)& (0+255),w,b
 14559  00636E  0101               	movlb	1	; () banked
 14560  006370  1903               	xorwf	(??_checkPass+3)& (0+255),w,b
 14561  006372  A4D8               	btfss	status,2,c
 14562  006374  D004               	goto	l10780
 14563                           
 14564                           ; BSR set to: 1
 14565                           ;DisplayProtocol.h: 19: passOK = 1;
 14566  006376  0E01               	movlw	1
 14567  006378  0101               	movlb	1	; () banked
 14568  00637A  6F04               	movwf	checkPass@passOK& (0+255),b
 14569  00637C  D004               	goto	l10782
 14570  00637E                     l10780:
 14571                           
 14572                           ; BSR set to: 1
 14573                           ;DisplayProtocol.h: 20: else {
 14574                           ;DisplayProtocol.h: 21: passOK = 0;
 14575  00637E  0E00               	movlw	0
 14576  006380  0101               	movlb	1	; () banked
 14577  006382  6F04               	movwf	checkPass@passOK& (0+255),b
 14578                           
 14579                           ;DisplayProtocol.h: 22: break;
 14580  006384  D004               	goto	l10786
 14581  006386                     l10782:
 14582                           
 14583                           ; BSR set to: 1
 14584  006386  0101               	movlb	1	; () banked
 14585  006388  4B05               	infsnz	checkPass@i& (0+255),f,b
 14586  00638A  2B06               	incf	(checkPass@i+1)& (0+255),f,b
 14587  00638C  D7C4               	goto	l10772
 14588  00638E                     l10786:
 14589                           
 14590                           ; BSR set to: 1
 14591                           ;DisplayProtocol.h: 23: }
 14592                           ;DisplayProtocol.h: 24: }
 14593                           ;DisplayProtocol.h: 25: return passOK;
 14594  00638E  0101               	movlb	1	; () banked
 14595  006390  5104               	movf	checkPass@passOK& (0+255),w,b
 14596  006392  0012               	return	
 14597  006394                     __end_of_checkPass:
 14598                           	opt stack 0
 14599                           tblptru	equ	0xFF8
 14600                           tblptrh	equ	0xFF7
 14601                           tblptrl	equ	0xFF6
 14602                           tablat	equ	0xFF5
 14603                           prodh	equ	0xFF4
 14604                           prodl	equ	0xFF3
 14605                           intcon	equ	0xFF2
 14606                           postinc0	equ	0xFEE
 14607                           wreg	equ	0xFE8
 14608                           postdec1	equ	0xFE5
 14609                           fsr1l	equ	0xFE1
 14610                           indf2	equ	0xFDF
 14611                           postinc2	equ	0xFDE
 14612                           postdec2	equ	0xFDD
 14613                           fsr2h	equ	0xFDA
 14614                           fsr2l	equ	0xFD9
 14615                           status	equ	0xFD8
 14616                           
 14617 ;; *************** function _pressDOWN *****************
 14618 ;; Defined at:
 14619 ;;		line 181 in file "source/DisplayProtocol.h"
 14620 ;; Parameters:    Size  Location     Type
 14621 ;;		None
 14622 ;; Auto vars:     Size  Location     Type
 14623 ;;		None
 14624 ;; Return value:  Size  Location     Type
 14625 ;;                  1    wreg      void 
 14626 ;; Registers used:
 14627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14628 ;; Tracked objects:
 14629 ;;		On entry : 0/0
 14630 ;;		On exit  : 0/0
 14631 ;;		Unchanged: 0/0
 14632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14633 ;;      Params:         0       0       0       0       0       0       0
 14634 ;;      Locals:         0       0       0       0       0       0       0
 14635 ;;      Temps:          0       0       1       0       0       0       0
 14636 ;;      Totals:         0       0       1       0       0       0       0
 14637 ;;Total ram usage:        1 bytes
 14638 ;; Hardware stack levels used:    1
 14639 ;; Hardware stack levels required when called:   13
 14640 ;; This function calls:
 14641 ;;		_chanValDigDOWN
 14642 ;; This function is called by:
 14643 ;;		_buttonChecking
 14644 ;; This function uses a non-reentrant model
 14645 ;;
 14646                           
 14647                           	psect	text57
 14648  004CEA                     __ptext57:
 14649                           	opt stack 0
 14650  004CEA                     _pressDOWN:
 14651                           	opt stack 16
 14652                           
 14653                           ;DisplayProtocol.h: 182: if (actualScreen == 0 || actualScreen == 4) {
 14654                           
 14655                           ; BSR set to: 1
 14656                           ;incstack = 0
 14657  004CEA  0101               	movlb	1	; () banked
 14658  004CEC  51B9               	movf	_actualScreen& (0+255),w,b
 14659  004CEE  B4D8               	btfsc	status,2,c
 14660  004CF0  D005               	goto	l11174
 14661                           
 14662                           ; BSR set to: 1
 14663  004CF2  0E04               	movlw	4
 14664  004CF4  0101               	movlb	1	; () banked
 14665  004CF6  19B9               	xorwf	_actualScreen& (0+255),w,b
 14666  004CF8  A4D8               	btfss	status,2,c
 14667  004CFA  D009               	goto	l11180
 14668  004CFC                     l11174:
 14669                           
 14670                           ; BSR set to: 1
 14671                           ;DisplayProtocol.h: 183: menuSection--;
 14672  004CFC  0101               	movlb	1	; () banked
 14673  004CFE  07BD               	decf	_menuSection& (0+255),f,b
 14674                           
 14675                           ; BSR set to: 1
 14676                           ;DisplayProtocol.h: 184: if (menuSection < 0)
 14677  004D00  0101               	movlb	1	; () banked
 14678  004D02  AFBD               	btfss	_menuSection& (0+255),7,b
 14679  004D04  0012               	return	
 14680                           
 14681                           ; BSR set to: 1
 14682                           ;DisplayProtocol.h: 185: menuSection = 3;
 14683  004D06  0E03               	movlw	3
 14684  004D08  0101               	movlb	1	; () banked
 14685  004D0A  6FBD               	movwf	_menuSection& (0+255),b
 14686                           
 14687                           ; BSR set to: 1
 14688                           ;DisplayProtocol.h: 186: } else if (actualScreen == 1) {
 14689  004D0C  0012               	return	
 14690  004D0E                     l11180:
 14691                           
 14692                           ; BSR set to: 1
 14693  004D0E  0101               	movlb	1	; () banked
 14694  004D10  05B9               	decf	_actualScreen& (0+255),w,b
 14695  004D12  A4D8               	btfss	status,2,c
 14696  004D14  D022               	goto	l11186
 14697                           
 14698                           ; BSR set to: 1
 14699                           ;DisplayProtocol.h: 187: introducido[passSection]--;
 14700  004D16  0101               	movlb	1	; () banked
 14701  004D18  51BE               	movf	_passSection& (0+255),w,b
 14702  004D1A  0D01               	mullw	1
 14703  004D1C  0EA9               	movlw	low _introducido
 14704  004D1E  24F3               	addwf	prodl,w,c
 14705  004D20  6ED9               	movwf	fsr2l,c
 14706  004D22  0E01               	movlw	high _introducido
 14707  004D24  20F4               	addwfc	prodh,w,c
 14708  004D26  6EDA               	movwf	fsr2h,c
 14709  004D28  06DF               	decf	indf2,f,c
 14710                           
 14711                           ;DisplayProtocol.h: 188: if (introducido[passSection] < 0)
 14712  004D2A  0101               	movlb	1	; () banked
 14713  004D2C  51BE               	movf	_passSection& (0+255),w,b
 14714  004D2E  0D01               	mullw	1
 14715  004D30  0EA9               	movlw	low _introducido
 14716  004D32  24F3               	addwf	prodl,w,c
 14717  004D34  6ED9               	movwf	fsr2l,c
 14718  004D36  0E01               	movlw	high _introducido
 14719  004D38  20F4               	addwfc	prodh,w,c
 14720  004D3A  6EDA               	movwf	fsr2h,c
 14721  004D3C  0E00               	movlw	0
 14722  004D3E  AEDB               	btfss	plusw2,7,c
 14723  004D40  0012               	return	
 14724                           
 14725                           ; BSR set to: 1
 14726                           ;DisplayProtocol.h: 189: introducido[passSection] = 9;
 14727  004D42  0101               	movlb	1	; () banked
 14728  004D44  51BE               	movf	_passSection& (0+255),w,b
 14729  004D46  0D01               	mullw	1
 14730  004D48  0EA9               	movlw	low _introducido
 14731  004D4A  24F3               	addwf	prodl,w,c
 14732  004D4C  6ED9               	movwf	fsr2l,c
 14733  004D4E  0E01               	movlw	high _introducido
 14734  004D50  20F4               	addwfc	prodh,w,c
 14735  004D52  6EDA               	movwf	fsr2h,c
 14736  004D54  0E09               	movlw	9
 14737  004D56  6EDF               	movwf	indf2,c
 14738                           
 14739                           ; BSR set to: 1
 14740                           ;DisplayProtocol.h: 190: } else if (actualScreen == 2 || actualScreen == 3
 14741  004D58  0012               	return	
 14742  004D5A                     l11186:
 14743                           
 14744                           ; BSR set to: 1
 14745                           ;DisplayProtocol.h: 191: || actualScreen == 10 || actualScreen == 11
 14746                           ;DisplayProtocol.h: 192: || actualScreen == 15) {
 14747  004D5A  0E02               	movlw	2
 14748  004D5C  0101               	movlb	1	; () banked
 14749  004D5E  19B9               	xorwf	_actualScreen& (0+255),w,b
 14750  004D60  B4D8               	btfsc	status,2,c
 14751  004D62  D014               	goto	l11196
 14752                           
 14753                           ; BSR set to: 1
 14754  004D64  0E03               	movlw	3
 14755  004D66  0101               	movlb	1	; () banked
 14756  004D68  19B9               	xorwf	_actualScreen& (0+255),w,b
 14757  004D6A  B4D8               	btfsc	status,2,c
 14758  004D6C  D00F               	goto	l11196
 14759                           
 14760                           ; BSR set to: 1
 14761  004D6E  0E0A               	movlw	10
 14762  004D70  0101               	movlb	1	; () banked
 14763  004D72  19B9               	xorwf	_actualScreen& (0+255),w,b
 14764  004D74  B4D8               	btfsc	status,2,c
 14765  004D76  D00A               	goto	l11196
 14766                           
 14767                           ; BSR set to: 1
 14768  004D78  0E0B               	movlw	11
 14769  004D7A  0101               	movlb	1	; () banked
 14770  004D7C  19B9               	xorwf	_actualScreen& (0+255),w,b
 14771  004D7E  B4D8               	btfsc	status,2,c
 14772  004D80  D005               	goto	l11196
 14773                           
 14774                           ; BSR set to: 1
 14775  004D82  0E0F               	movlw	15
 14776  004D84  0101               	movlb	1	; () banked
 14777  004D86  19B9               	xorwf	_actualScreen& (0+255),w,b
 14778  004D88  A4D8               	btfss	status,2,c
 14779  004D8A  D011               	goto	l11202
 14780  004D8C                     l11196:
 14781                           
 14782                           ; BSR set to: 1
 14783                           ;DisplayProtocol.h: 193: selSN = !selSN;
 14784  004D8C  0101               	movlb	1	; () banked
 14785  004D8E  51BF               	movf	_selSN& (0+255),w,b
 14786  004D90  A4D8               	btfss	status,2,c
 14787  004D92  D002               	goto	u16590
 14788  004D94  0E01               	movlw	1
 14789  004D96  D001               	goto	u16600
 14790  004D98                     u16590:
 14791  004D98  0E00               	movlw	0
 14792  004D9A                     u16600:
 14793  004D9A  0101               	movlb	1	; () banked
 14794  004D9C  6FBF               	movwf	_selSN& (0+255),b
 14795                           
 14796                           ; BSR set to: 1
 14797                           ;DisplayProtocol.h: 194: if(selSN > 1)
 14798  004D9E  0E01               	movlw	1
 14799  004DA0  0101               	movlb	1	; () banked
 14800  004DA2  65BF               	cpfsgt	_selSN& (0+255),b
 14801  004DA4  0012               	return	
 14802                           
 14803                           ; BSR set to: 1
 14804                           ;DisplayProtocol.h: 195: selSN = 0;
 14805  004DA6  0E00               	movlw	0
 14806  004DA8  0101               	movlb	1	; () banked
 14807  004DAA  6FBF               	movwf	_selSN& (0+255),b
 14808                           
 14809                           ; BSR set to: 1
 14810                           ;DisplayProtocol.h: 196: }else if(actualScreen == 5) {
 14811  004DAC  0012               	return	
 14812  004DAE                     l11202:
 14813                           
 14814                           ; BSR set to: 1
 14815  004DAE  0E05               	movlw	5
 14816  004DB0  0101               	movlb	1	; () banked
 14817  004DB2  19B9               	xorwf	_actualScreen& (0+255),w,b
 14818  004DB4  B4D8               	btfsc	status,2,c
 14819  004DB6  D009               	goto	l11212
 14820  004DB8  D014               	goto	l11214
 14821  004DBA                     l11206:
 14822                           
 14823                           ; BSR set to: 1
 14824                           ;DisplayProtocol.h: 201: chanValDigDOWN();
 14825  004DBA  EC36  F02A         	call	_chanValDigDOWN	;wreg free
 14826                           
 14827                           ;DisplayProtocol.h: 202: break;
 14828  004DBE  0012               	return	
 14829  004DC0                     l11208:
 14830                           
 14831                           ;DisplayProtocol.h: 204: chanVals--;
 14832  004DC0  0101               	movlb	1	; () banked
 14833  004DC2  07B4               	decf	_chanVals& (0+255),f,b
 14834  004DC4  A0D8               	btfss	status,0,c
 14835  004DC6  07B5               	decf	(_chanVals+1)& (0+255),f,b
 14836                           
 14837                           ; BSR set to: 1
 14838                           ;DisplayProtocol.h: 206: }
 14839                           ;DisplayProtocol.h: 207: }
 14840                           
 14841                           ;DisplayProtocol.h: 205: break;
 14842  004DC8  0012               	return	
 14843  004DCA                     l11212:
 14844                           
 14845                           ; BSR set to: 1
 14846  004DCA  0101               	movlb	1	; () banked
 14847  004DCC  51BD               	movf	_menuSection& (0+255),w,b
 14848                           
 14849                           ; Switch size 1, requested type "space"
 14850                           ; Number of cases is 3, Range of values is 0 to 2
 14851                           ; switch strategies available:
 14852                           ; Name         Instructions Cycles
 14853                           ; simple_byte           10     6 (average)
 14854                           ;	Chosen strategy is simple_byte
 14855  004DCE  0A00               	xorlw	0	; case 0
 14856  004DD0  B4D8               	btfsc	status,2,c
 14857  004DD2  0012               	return	
 14858  004DD4  0A01               	xorlw	1	; case 1
 14859  004DD6  B4D8               	btfsc	status,2,c
 14860  004DD8  D7F0               	goto	l11206
 14861  004DDA  0A03               	xorlw	3	; case 2
 14862  004DDC  A4D8               	btfss	status,2,c
 14863                           
 14864                           ; BSR set to: 1
 14865                           ;DisplayProtocol.h: 208: }else if(actualScreen == 12)
 14866  004DDE  0012               	return	
 14867  004DE0  D7EF               	goto	l11208
 14868  004DE2                     l11214:
 14869                           
 14870                           ; BSR set to: 1
 14871  004DE2  0E0C               	movlw	12
 14872  004DE4  0101               	movlb	1	; () banked
 14873  004DE6  19B9               	xorwf	_actualScreen& (0+255),w,b
 14874  004DE8  A4D8               	btfss	status,2,c
 14875  004DEA  0012               	return	
 14876                           
 14877                           ; BSR set to: 1
 14878                           ;DisplayProtocol.h: 209: chanValDigDOWN();
 14879  004DEC  EC36  F02A         	call	_chanValDigDOWN	;wreg free
 14880  004DF0  0012               	return	
 14881  004DF2                     __end_of_pressDOWN:
 14882                           	opt stack 0
 14883                           tblptru	equ	0xFF8
 14884                           tblptrh	equ	0xFF7
 14885                           tblptrl	equ	0xFF6
 14886                           tablat	equ	0xFF5
 14887                           prodh	equ	0xFF4
 14888                           prodl	equ	0xFF3
 14889                           intcon	equ	0xFF2
 14890                           postinc0	equ	0xFEE
 14891                           wreg	equ	0xFE8
 14892                           postdec1	equ	0xFE5
 14893                           fsr1l	equ	0xFE1
 14894                           indf2	equ	0xFDF
 14895                           postinc2	equ	0xFDE
 14896                           postdec2	equ	0xFDD
 14897                           plusw2	equ	0xFDB
 14898                           fsr2h	equ	0xFDA
 14899                           fsr2l	equ	0xFD9
 14900                           status	equ	0xFD8
 14901                           
 14902 ;; *************** function _chanValDigDOWN *****************
 14903 ;; Defined at:
 14904 ;;		line 37 in file "source/DisplayProtocol.h"
 14905 ;; Parameters:    Size  Location     Type
 14906 ;;		None
 14907 ;; Auto vars:     Size  Location     Type
 14908 ;;		None
 14909 ;; Return value:  Size  Location     Type
 14910 ;;                  1    wreg      void 
 14911 ;; Registers used:
 14912 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14913 ;; Tracked objects:
 14914 ;;		On entry : 0/0
 14915 ;;		On exit  : 0/0
 14916 ;;		Unchanged: 0/0
 14917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14918 ;;      Params:         0       0       0       0       0       0       0
 14919 ;;      Locals:         0       0       0       0       0       0       0
 14920 ;;      Temps:          0       0       5       0       0       0       0
 14921 ;;      Totals:         0       0       5       0       0       0       0
 14922 ;;Total ram usage:        5 bytes
 14923 ;; Hardware stack levels used:    1
 14924 ;; Hardware stack levels required when called:   12
 14925 ;; This function calls:
 14926 ;;		Nothing
 14927 ;; This function is called by:
 14928 ;;		_pressDOWN
 14929 ;; This function uses a non-reentrant model
 14930 ;;
 14931                           
 14932                           	psect	text58
 14933  00546C                     __ptext58:
 14934                           	opt stack 0
 14935  00546C                     _chanValDigDOWN:
 14936                           	opt stack 16
 14937                           
 14938                           ;DisplayProtocol.h: 38: chanValdig[chanValSection]--;
 14939                           
 14940                           ;incstack = 0
 14941  00546C  0101               	movlb	1	; () banked
 14942  00546E  519B               	movf	_chanValSection& (0+255),w,b
 14943  005470  0D01               	mullw	1
 14944  005472  0EA3               	movlw	low _chanValdig
 14945  005474  24F3               	addwf	prodl,w,c
 14946  005476  6ED9               	movwf	fsr2l,c
 14947  005478  0E01               	movlw	high _chanValdig
 14948  00547A  20F4               	addwfc	prodh,w,c
 14949  00547C  6EDA               	movwf	fsr2h,c
 14950  00547E  06DF               	decf	indf2,f,c
 14951                           
 14952                           ;DisplayProtocol.h: 39: if(chanValdig[chanValSection] < 0) {
 14953  005480  0101               	movlb	1	; () banked
 14954  005482  519B               	movf	_chanValSection& (0+255),w,b
 14955  005484  0D01               	mullw	1
 14956  005486  0EA3               	movlw	low _chanValdig
 14957  005488  24F3               	addwf	prodl,w,c
 14958  00548A  6ED9               	movwf	fsr2l,c
 14959  00548C  0E01               	movlw	high _chanValdig
 14960  00548E  20F4               	addwfc	prodh,w,c
 14961  005490  6EDA               	movwf	fsr2h,c
 14962  005492  0E00               	movlw	0
 14963  005494  AEDB               	btfss	plusw2,7,c
 14964  005496  0012               	return	
 14965                           
 14966                           ; BSR set to: 1
 14967                           ;DisplayProtocol.h: 40: chanValdig[chanValSection] = 9;
 14968  005498  0101               	movlb	1	; () banked
 14969  00549A  519B               	movf	_chanValSection& (0+255),w,b
 14970  00549C  0D01               	mullw	1
 14971  00549E  0EA3               	movlw	low _chanValdig
 14972  0054A0  24F3               	addwf	prodl,w,c
 14973  0054A2  6ED9               	movwf	fsr2l,c
 14974  0054A4  0E01               	movlw	high _chanValdig
 14975  0054A6  20F4               	addwfc	prodh,w,c
 14976  0054A8  6EDA               	movwf	fsr2h,c
 14977  0054AA  0E09               	movlw	9
 14978  0054AC  6EDF               	movwf	indf2,c
 14979                           
 14980                           ; BSR set to: 1
 14981                           ;DisplayProtocol.h: 41: if(chanValSection > 1 && chanValdig[chanValSection - 1] > 0)
 14982  0054AE  0101               	movlb	1	; () banked
 14983  0054B0  519B               	movf	_chanValSection& (0+255),w,b
 14984  0054B2  0A80               	xorlw	128
 14985  0054B4  0F7E               	addlw	-130
 14986  0054B6  A0D8               	btfss	status,0,c
 14987  0054B8  0012               	return	
 14988                           
 14989                           ; BSR set to: 1
 14990  0054BA  0EFF               	movlw	255
 14991  0054BC  0101               	movlb	1	; () banked
 14992  0054BE  6F00               	movwf	??_chanValDigDOWN& (0+255),b
 14993  0054C0  0EFF               	movlw	255
 14994  0054C2  0101               	movlb	1	; () banked
 14995  0054C4  6F01               	movwf	(??_chanValDigDOWN+1)& (0+255),b
 14996  0054C6  C19B  F102         	movff	_chanValSection,??_chanValDigDOWN+2
 14997  0054CA  0101               	movlb	1	; () banked
 14998  0054CC  6B03               	clrf	(??_chanValDigDOWN+3)& (0+255),b
 14999  0054CE  BF02               	btfsc	(??_chanValDigDOWN+2)& (0+255),7,b
 15000  0054D0  0703               	decf	(??_chanValDigDOWN+3)& (0+255),f,b
 15001  0054D2  0101               	movlb	1	; () banked
 15002  0054D4  5100               	movf	??_chanValDigDOWN& (0+255),w,b
 15003  0054D6  0101               	movlb	1	; () banked
 15004  0054D8  2702               	addwf	(??_chanValDigDOWN+2)& (0+255),f,b
 15005  0054DA  0101               	movlb	1	; () banked
 15006  0054DC  5101               	movf	(??_chanValDigDOWN+1)& (0+255),w,b
 15007  0054DE  0101               	movlb	1	; () banked
 15008  0054E0  2303               	addwfc	(??_chanValDigDOWN+3)& (0+255),f,b
 15009  0054E2  0EA3               	movlw	low _chanValdig
 15010  0054E4  0101               	movlb	1	; () banked
 15011  0054E6  2502               	addwf	(??_chanValDigDOWN+2)& (0+255),w,b
 15012  0054E8  6ED9               	movwf	fsr2l,c
 15013  0054EA  0E01               	movlw	high _chanValdig
 15014  0054EC  0101               	movlb	1	; () banked
 15015  0054EE  2103               	addwfc	(??_chanValDigDOWN+3)& (0+255),w,b
 15016  0054F0  6EDA               	movwf	fsr2h,c
 15017  0054F2  50DF               	movf	indf2,w,c
 15018  0054F4  0A80               	xorlw	128
 15019  0054F6  0F7F               	addlw	-129
 15020  0054F8  A0D8               	btfss	status,0,c
 15021  0054FA  0012               	return	
 15022                           
 15023                           ; BSR set to: 1
 15024                           ;DisplayProtocol.h: 42: chanValdig[chanValSection - 1]--;
 15025  0054FC  0EFF               	movlw	255
 15026  0054FE  0101               	movlb	1	; () banked
 15027  005500  6F00               	movwf	??_chanValDigDOWN& (0+255),b
 15028  005502  0EFF               	movlw	255
 15029  005504  0101               	movlb	1	; () banked
 15030  005506  6F01               	movwf	(??_chanValDigDOWN+1)& (0+255),b
 15031  005508  C19B  F102         	movff	_chanValSection,??_chanValDigDOWN+2
 15032  00550C  0101               	movlb	1	; () banked
 15033  00550E  6B03               	clrf	(??_chanValDigDOWN+3)& (0+255),b
 15034  005510  BF02               	btfsc	(??_chanValDigDOWN+2)& (0+255),7,b
 15035  005512  0703               	decf	(??_chanValDigDOWN+3)& (0+255),f,b
 15036  005514  0101               	movlb	1	; () banked
 15037  005516  5100               	movf	??_chanValDigDOWN& (0+255),w,b
 15038  005518  0101               	movlb	1	; () banked
 15039  00551A  2702               	addwf	(??_chanValDigDOWN+2)& (0+255),f,b
 15040  00551C  0101               	movlb	1	; () banked
 15041  00551E  5101               	movf	(??_chanValDigDOWN+1)& (0+255),w,b
 15042  005520  0101               	movlb	1	; () banked
 15043  005522  2303               	addwfc	(??_chanValDigDOWN+3)& (0+255),f,b
 15044  005524  0EA3               	movlw	low _chanValdig
 15045  005526  0101               	movlb	1	; () banked
 15046  005528  2502               	addwf	(??_chanValDigDOWN+2)& (0+255),w,b
 15047  00552A  6ED9               	movwf	fsr2l,c
 15048  00552C  0E01               	movlw	high _chanValdig
 15049  00552E  0101               	movlb	1	; () banked
 15050  005530  2103               	addwfc	(??_chanValDigDOWN+3)& (0+255),w,b
 15051  005532  6EDA               	movwf	fsr2h,c
 15052  005534  06DF               	decf	indf2,f,c
 15053                           
 15054                           ; BSR set to: 1
 15055  005536  0012               	return	
 15056  005538                     __end_of_chanValDigDOWN:
 15057                           	opt stack 0
 15058                           tblptru	equ	0xFF8
 15059                           tblptrh	equ	0xFF7
 15060                           tblptrl	equ	0xFF6
 15061                           tablat	equ	0xFF5
 15062                           prodh	equ	0xFF4
 15063                           prodl	equ	0xFF3
 15064                           intcon	equ	0xFF2
 15065                           postinc0	equ	0xFEE
 15066                           wreg	equ	0xFE8
 15067                           postdec1	equ	0xFE5
 15068                           fsr1l	equ	0xFE1
 15069                           indf2	equ	0xFDF
 15070                           postinc2	equ	0xFDE
 15071                           postdec2	equ	0xFDD
 15072                           plusw2	equ	0xFDB
 15073                           fsr2h	equ	0xFDA
 15074                           fsr2l	equ	0xFD9
 15075                           status	equ	0xFD8
 15076                           
 15077 ;; *************** function _longPressUP *****************
 15078 ;; Defined at:
 15079 ;;		line 157 in file "source/DisplayProtocol.h"
 15080 ;; Parameters:    Size  Location     Type
 15081 ;;		None
 15082 ;; Auto vars:     Size  Location     Type
 15083 ;;		None
 15084 ;; Return value:  Size  Location     Type
 15085 ;;                  1    wreg      void 
 15086 ;; Registers used:
 15087 ;;		wreg, status,2, status,0
 15088 ;; Tracked objects:
 15089 ;;		On entry : 0/0
 15090 ;;		On exit  : 0/0
 15091 ;;		Unchanged: 0/0
 15092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15093 ;;      Params:         0       0       0       0       0       0       0
 15094 ;;      Locals:         0       0       0       0       0       0       0
 15095 ;;      Temps:          0       0       0       0       0       0       0
 15096 ;;      Totals:         0       0       0       0       0       0       0
 15097 ;;Total ram usage:        0 bytes
 15098 ;; Hardware stack levels used:    1
 15099 ;; Hardware stack levels required when called:   12
 15100 ;; This function calls:
 15101 ;;		Nothing
 15102 ;; This function is called by:
 15103 ;;		_buttonChecking
 15104 ;; This function uses a non-reentrant model
 15105 ;;
 15106                           
 15107                           	psect	text59
 15108  00696A                     __ptext59:
 15109                           	opt stack 0
 15110  00696A                     _longPressUP:
 15111                           	opt stack 17
 15112                           
 15113                           ;DisplayProtocol.h: 158: if (!UPisLP) {
 15114                           
 15115                           ; BSR set to: 1
 15116                           ;incstack = 0
 15117  00696A  5048               	movf	_UPisLP,w,c
 15118  00696C  A4D8               	btfss	status,2,c
 15119  00696E  0012               	return	
 15120                           
 15121                           ;DisplayProtocol.h: 159: UPisLP = 1;
 15122  006970  0E01               	movlw	1
 15123  006972  6E48               	movwf	_UPisLP,c
 15124                           
 15125                           ;DisplayProtocol.h: 160: if (actualScreen == 0 || actualScreen == 4) {
 15126  006974  0101               	movlb	1	; () banked
 15127  006976  51B9               	movf	_actualScreen& (0+255),w,b
 15128  006978  B4D8               	btfsc	status,2,c
 15129  00697A  D005               	goto	l11150
 15130                           
 15131                           ; BSR set to: 1
 15132  00697C  0E04               	movlw	4
 15133  00697E  0101               	movlb	1	; () banked
 15134  006980  19B9               	xorwf	_actualScreen& (0+255),w,b
 15135  006982  A4D8               	btfss	status,2,c
 15136  006984  D01C               	goto	l11162
 15137  006986                     l11150:
 15138                           
 15139                           ; BSR set to: 1
 15140                           ;DisplayProtocol.h: 161: if (holdENTERcont > 5) {
 15141  006986  0E05               	movlw	5
 15142  006988  0100               	movlb	0	; () banked
 15143  00698A  65BD               	cpfsgt	_holdENTERcont& (0+255),b
 15144  00698C  D014               	goto	l11160
 15145                           
 15146                           ; BSR set to: 0
 15147                           ;DisplayProtocol.h: 162: if (actualScreen == 0) {
 15148  00698E  0101               	movlb	1	; () banked
 15149  006990  51B9               	movf	_actualScreen& (0+255),w,b
 15150  006992  A4D8               	btfss	status,2,c
 15151  006994  D007               	goto	l11156
 15152                           
 15153                           ; BSR set to: 1
 15154                           ;DisplayProtocol.h: 163: actualScreen = 1;
 15155  006996  0E01               	movlw	1
 15156  006998  0101               	movlb	1	; () banked
 15157  00699A  6FB9               	movwf	_actualScreen& (0+255),b
 15158                           
 15159                           ;DisplayProtocol.h: 164: fd = 0;
 15160  00699C  0E00               	movlw	0
 15161  00699E  0101               	movlb	1	; () banked
 15162  0069A0  6FBB               	movwf	_fd& (0+255),b
 15163                           
 15164                           ;DisplayProtocol.h: 165: } else if (actualScreen == 4)
 15165  0069A2  0012               	return	
 15166  0069A4                     l11156:
 15167                           
 15168                           ; BSR set to: 1
 15169  0069A4  0E04               	movlw	4
 15170  0069A6  0101               	movlb	1	; () banked
 15171  0069A8  19B9               	xorwf	_actualScreen& (0+255),w,b
 15172  0069AA  A4D8               	btfss	status,2,c
 15173  0069AC  0012               	return	
 15174                           
 15175                           ; BSR set to: 1
 15176                           ;DisplayProtocol.h: 166: actualScreen = 9;
 15177  0069AE  0E09               	movlw	9
 15178  0069B0  0101               	movlb	1	; () banked
 15179  0069B2  6FB9               	movwf	_actualScreen& (0+255),b
 15180                           
 15181                           ; BSR set to: 1
 15182                           ;DisplayProtocol.h: 167: } else
 15183                           
 15184                           ; BSR set to: 1
 15185  0069B4  0012               	return	
 15186  0069B6                     l11160:
 15187                           
 15188                           ;DisplayProtocol.h: 168: menuSection = 0;
 15189  0069B6  0E00               	movlw	0
 15190  0069B8  0101               	movlb	1	; () banked
 15191  0069BA  6FBD               	movwf	_menuSection& (0+255),b
 15192                           
 15193                           ; BSR set to: 1
 15194                           ;DisplayProtocol.h: 169: }else if(actualScreen == 5) {
 15195  0069BC  0012               	return	
 15196  0069BE                     l11162:
 15197                           
 15198                           ; BSR set to: 1
 15199  0069BE  0E05               	movlw	5
 15200  0069C0  0101               	movlb	1	; () banked
 15201  0069C2  19B9               	xorwf	_actualScreen& (0+255),w,b
 15202  0069C4  A4D8               	btfss	status,2,c
 15203  0069C6  0012               	return	
 15204                           
 15205                           ; BSR set to: 1
 15206                           ;DisplayProtocol.h: 170: if(menuSection == 2)
 15207  0069C8  0E02               	movlw	2
 15208  0069CA  0101               	movlb	1	; () banked
 15209  0069CC  19BD               	xorwf	_menuSection& (0+255),w,b
 15210  0069CE  A4D8               	btfss	status,2,c
 15211  0069D0  0012               	return	
 15212                           
 15213                           ; BSR set to: 1
 15214                           ;DisplayProtocol.h: 171: chanVals += 10;
 15215  0069D2  0E0A               	movlw	10
 15216  0069D4  0101               	movlb	1	; () banked
 15217  0069D6  27B4               	addwf	_chanVals& (0+255),f,b
 15218  0069D8  0E00               	movlw	0
 15219  0069DA  23B5               	addwfc	(_chanVals+1)& (0+255),f,b
 15220                           
 15221                           ; BSR set to: 1
 15222                           
 15223                           ; BSR set to: 1
 15224                           
 15225                           ; BSR set to: 1
 15226  0069DC  0012               	return	
 15227  0069DE                     __end_of_longPressUP:
 15228                           	opt stack 0
 15229                           tblptru	equ	0xFF8
 15230                           tblptrh	equ	0xFF7
 15231                           tblptrl	equ	0xFF6
 15232                           tablat	equ	0xFF5
 15233                           prodh	equ	0xFF4
 15234                           prodl	equ	0xFF3
 15235                           intcon	equ	0xFF2
 15236                           postinc0	equ	0xFEE
 15237                           wreg	equ	0xFE8
 15238                           postdec1	equ	0xFE5
 15239                           fsr1l	equ	0xFE1
 15240                           indf2	equ	0xFDF
 15241                           postinc2	equ	0xFDE
 15242                           postdec2	equ	0xFDD
 15243                           plusw2	equ	0xFDB
 15244                           fsr2h	equ	0xFDA
 15245                           fsr2l	equ	0xFD9
 15246                           status	equ	0xFD8
 15247                           
 15248 ;; *************** function _longPressRETRO *****************
 15249 ;; Defined at:
 15250 ;;		line 253 in file "source/DisplayProtocol.h"
 15251 ;; Parameters:    Size  Location     Type
 15252 ;;		None
 15253 ;; Auto vars:     Size  Location     Type
 15254 ;;		None
 15255 ;; Return value:  Size  Location     Type
 15256 ;;                  1    wreg      void 
 15257 ;; Registers used:
 15258 ;;		wreg, status,2, status,0, cstack
 15259 ;; Tracked objects:
 15260 ;;		On entry : 0/0
 15261 ;;		On exit  : 0/0
 15262 ;;		Unchanged: 0/0
 15263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15264 ;;      Params:         0       0       0       0       0       0       0
 15265 ;;      Locals:         0       0       0       0       0       0       0
 15266 ;;      Temps:          0       0       0       0       0       0       0
 15267 ;;      Totals:         0       0       0       0       0       0       0
 15268 ;;Total ram usage:        0 bytes
 15269 ;; Hardware stack levels used:    1
 15270 ;; Hardware stack levels required when called:   14
 15271 ;; This function calls:
 15272 ;;		___ftmul
 15273 ;;		_initProtocoll
 15274 ;; This function is called by:
 15275 ;;		_buttonChecking
 15276 ;; This function uses a non-reentrant model
 15277 ;;
 15278                           
 15279                           	psect	text60
 15280  004EFA                     __ptext60:
 15281                           	opt stack 0
 15282  004EFA                     _longPressRETRO:
 15283                           	opt stack 15
 15284                           
 15285                           ;DisplayProtocol.h: 254: if (!RETROisLP) {
 15286                           
 15287                           ;incstack = 0
 15288  004EFA  0100               	movlb	0	; () banked
 15289  004EFC  51B8               	movf	_RETROisLP& (0+255),w,b
 15290  004EFE  A4D8               	btfss	status,2,c
 15291  004F00  0012               	return	
 15292                           
 15293                           ; BSR set to: 0
 15294                           ;DisplayProtocol.h: 255: RETROisLP = 1;
 15295  004F02  0E01               	movlw	1
 15296  004F04  0100               	movlb	0	; () banked
 15297  004F06  6FB8               	movwf	_RETROisLP& (0+255),b
 15298                           
 15299                           ;DisplayProtocol.h: 256: if(actualScreen == 0 || actualScreen == 4
 15300                           ;DisplayProtocol.h: 257: || actualScreen == 14) {
 15301  004F08  0101               	movlb	1	; () banked
 15302  004F0A  51B9               	movf	_actualScreen& (0+255),w,b
 15303  004F0C  B4D8               	btfsc	status,2,c
 15304  004F0E  D00A               	goto	l11280
 15305                           
 15306                           ; BSR set to: 1
 15307  004F10  0E04               	movlw	4
 15308  004F12  0101               	movlb	1	; () banked
 15309  004F14  19B9               	xorwf	_actualScreen& (0+255),w,b
 15310  004F16  B4D8               	btfsc	status,2,c
 15311  004F18  D005               	goto	l11280
 15312                           
 15313                           ; BSR set to: 1
 15314  004F1A  0E0E               	movlw	14
 15315  004F1C  0101               	movlb	1	; () banked
 15316  004F1E  19B9               	xorwf	_actualScreen& (0+255),w,b
 15317  004F20  A4D8               	btfss	status,2,c
 15318  004F22  D012               	goto	l11286
 15319  004F24                     l11280:
 15320                           
 15321                           ; BSR set to: 1
 15322                           ;DisplayProtocol.h: 258: if(processStarted || actualScreen == 14) {
 15323  004F24  0100               	movlb	0	; () banked
 15324  004F26  51C4               	movf	_processStarted& (0+255),w,b
 15325  004F28  A4D8               	btfss	status,2,c
 15326  004F2A  D005               	goto	l688
 15327                           
 15328                           ; BSR set to: 0
 15329  004F2C  0E0E               	movlw	14
 15330  004F2E  0101               	movlb	1	; () banked
 15331  004F30  19B9               	xorwf	_actualScreen& (0+255),w,b
 15332  004F32  A4D8               	btfss	status,2,c
 15333  004F34  0012               	return	
 15334  004F36                     l688:
 15335                           
 15336                           ;DisplayProtocol.h: 259: tempLastScreen = actualScreen;
 15337  004F36  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 15338                           
 15339                           ;DisplayProtocol.h: 260: actualScreen = 3;
 15340  004F3A  0E03               	movlw	3
 15341  004F3C  0101               	movlb	1	; () banked
 15342  004F3E  6FB9               	movwf	_actualScreen& (0+255),b
 15343                           
 15344                           ;DisplayProtocol.h: 261: selSN = 0;
 15345  004F40  0E00               	movlw	0
 15346  004F42  0101               	movlb	1	; () banked
 15347  004F44  6FBF               	movwf	_selSN& (0+255),b
 15348                           
 15349                           ; BSR set to: 1
 15350                           ;DisplayProtocol.h: 262: }
 15351                           ;DisplayProtocol.h: 263: }else if(actualScreen == 5)
 15352  004F46  0012               	return	
 15353  004F48                     l11286:
 15354                           
 15355                           ; BSR set to: 1
 15356  004F48  0E05               	movlw	5
 15357  004F4A  0101               	movlb	1	; () banked
 15358  004F4C  19B9               	xorwf	_actualScreen& (0+255),w,b
 15359  004F4E  A4D8               	btfss	status,2,c
 15360  004F50  D004               	goto	l11290
 15361                           
 15362                           ; BSR set to: 1
 15363                           ;DisplayProtocol.h: 264: actualScreen = 4;
 15364  004F52  0E04               	movlw	4
 15365  004F54  0101               	movlb	1	; () banked
 15366  004F56  6FB9               	movwf	_actualScreen& (0+255),b
 15367  004F58  0012               	return	
 15368  004F5A                     l11290:
 15369                           
 15370                           ; BSR set to: 1
 15371                           ;DisplayProtocol.h: 265: else if(actualScreen == 12 || actualScreen == 6) {
 15372  004F5A  0E0C               	movlw	12
 15373  004F5C  0101               	movlb	1	; () banked
 15374  004F5E  19B9               	xorwf	_actualScreen& (0+255),w,b
 15375  004F60  B4D8               	btfsc	status,2,c
 15376  004F62  D005               	goto	l694
 15377                           
 15378                           ; BSR set to: 1
 15379  004F64  0E06               	movlw	6
 15380  004F66  0101               	movlb	1	; () banked
 15381  004F68  19B9               	xorwf	_actualScreen& (0+255),w,b
 15382  004F6A  A4D8               	btfss	status,2,c
 15383  004F6C  D009               	goto	l11296
 15384  004F6E                     l694:
 15385                           
 15386                           ; BSR set to: 1
 15387                           ;DisplayProtocol.h: 266: tempLastScreen = actualScreen;
 15388  004F6E  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 15389                           
 15390                           ; BSR set to: 1
 15391                           ;DisplayProtocol.h: 267: actualScreen = 15;
 15392  004F72  0E0F               	movlw	15
 15393  004F74  0101               	movlb	1	; () banked
 15394  004F76  6FB9               	movwf	_actualScreen& (0+255),b
 15395                           
 15396                           ;DisplayProtocol.h: 268: selSN = 1;
 15397  004F78  0E01               	movlw	1
 15398  004F7A  0101               	movlb	1	; () banked
 15399  004F7C  6FBF               	movwf	_selSN& (0+255),b
 15400                           
 15401                           ;DisplayProtocol.h: 269: }else if(actualScreen == 14) {
 15402  004F7E  0012               	return	
 15403  004F80                     l11296:
 15404                           
 15405                           ; BSR set to: 1
 15406  004F80  0E0E               	movlw	14
 15407  004F82  0101               	movlb	1	; () banked
 15408  004F84  19B9               	xorwf	_actualScreen& (0+255),w,b
 15409  004F86  A4D8               	btfss	status,2,c
 15410  004F88  0012               	return	
 15411                           
 15412                           ; BSR set to: 1
 15413                           ;DisplayProtocol.h: 270: processStarted = 0;
 15414  004F8A  0E00               	movlw	0
 15415  004F8C  0100               	movlb	0	; () banked
 15416  004F8E  6FC4               	movwf	_processStarted& (0+255),b
 15417                           
 15418                           ;DisplayProtocol.h: 271: processState = 0;
 15419  004F90  0E00               	movlw	0
 15420  004F92  0100               	movlb	0	; () banked
 15421  004F94  6FB5               	movwf	(_processState+1)& (0+255),b
 15422  004F96  0E00               	movlw	0
 15423  004F98  6FB4               	movwf	_processState& (0+255),b
 15424                           
 15425                           ; BSR set to: 0
 15426                           ;DisplayProtocol.h: 272: LATCbits.LATC4 = 0;
 15427  004F9A  988B               	bcf	3979,4,c	;volatile
 15428                           
 15429                           ;DisplayProtocol.h: 273: actualScreen = 0;
 15430  004F9C  0E00               	movlw	0
 15431  004F9E  0101               	movlb	1	; () banked
 15432  004FA0  6FB9               	movwf	_actualScreen& (0+255),b
 15433                           
 15434                           ;DisplayProtocol.h: 274: if(calibMode) {
 15435  004FA2  0100               	movlb	0	; () banked
 15436  004FA4  51BB               	movf	_calibMode& (0+255),w,b
 15437  004FA6  B4D8               	btfsc	status,2,c
 15438  004FA8  D027               	goto	l697
 15439                           
 15440                           ; BSR set to: 0
 15441                           ;DisplayProtocol.h: 275: numCortes = tempNumCortes;
 15442  004FAA  C0D2  F0D0         	movff	_tempNumCortes,_numCortes
 15443  004FAE  C0D3  F0D1         	movff	_tempNumCortes+1,_numCortes+1
 15444                           
 15445                           ;DisplayProtocol.h: 276: tiXcorte = temptiXcorte;
 15446  004FB2  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 15447  004FB6  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 15448  004FBA  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 15449                           
 15450                           ; BSR set to: 0
 15451                           ;DisplayProtocol.h: 277: timsXcorte = (float)tiXcorte * 1000;
 15452  004FBE  C195  F114         	movff	_tiXcorte,___ftmul@f1
 15453  004FC2  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 15454  004FC6  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 15455  004FCA  0E00               	movlw	0
 15456  004FCC  0101               	movlb	1	; () banked
 15457  004FCE  6F17               	movwf	___ftmul@f2& (0+255),b
 15458  004FD0  0E7A               	movlw	122
 15459  004FD2  0101               	movlb	1	; () banked
 15460  004FD4  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 15461  004FD6  0E44               	movlw	68
 15462  004FD8  0101               	movlb	1	; () banked
 15463  004FDA  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 15464  004FDC  EC1F  F01D         	call	___ftmul	;wreg free
 15465  004FE0  C114  F059         	movff	?___ftmul,_timsXcorte
 15466  004FE4  C115  F05A         	movff	?___ftmul+1,_timsXcorte+1
 15467  004FE8  C116  F05B         	movff	?___ftmul+2,_timsXcorte+2
 15468                           
 15469                           ;DisplayProtocol.h: 278: calibMode = 0;
 15470  004FEC  0E00               	movlw	0
 15471  004FEE  0100               	movlb	0	; () banked
 15472  004FF0  6FBB               	movwf	_calibMode& (0+255),b
 15473                           
 15474                           ; BSR set to: 0
 15475                           ;DisplayProtocol.h: 279: actualScreen = 4;
 15476  004FF2  0E04               	movlw	4
 15477  004FF4  0101               	movlb	1	; () banked
 15478  004FF6  6FB9               	movwf	_actualScreen& (0+255),b
 15479  004FF8                     l697:
 15480                           
 15481                           ;DisplayProtocol.h: 280: }
 15482                           ;DisplayProtocol.h: 281: initProtocoll(1);
 15483  004FF8  0E01               	movlw	1
 15484  004FFA  ECA3  F036         	call	_initProtocoll
 15485  004FFE  0012               	return	
 15486  005000                     __end_of_longPressRETRO:
 15487                           	opt stack 0
 15488                           tblptru	equ	0xFF8
 15489                           tblptrh	equ	0xFF7
 15490                           tblptrl	equ	0xFF6
 15491                           tablat	equ	0xFF5
 15492                           prodh	equ	0xFF4
 15493                           prodl	equ	0xFF3
 15494                           intcon	equ	0xFF2
 15495                           postinc0	equ	0xFEE
 15496                           wreg	equ	0xFE8
 15497                           postdec1	equ	0xFE5
 15498                           fsr1l	equ	0xFE1
 15499                           indf2	equ	0xFDF
 15500                           postinc2	equ	0xFDE
 15501                           postdec2	equ	0xFDD
 15502                           plusw2	equ	0xFDB
 15503                           fsr2h	equ	0xFDA
 15504                           fsr2l	equ	0xFD9
 15505                           status	equ	0xFD8
 15506                           
 15507 ;; *************** function _initProtocoll *****************
 15508 ;; Defined at:
 15509 ;;		line 49 in file "source/PWMConfig.h"
 15510 ;; Parameters:    Size  Location     Type
 15511 ;;  init            1    wreg     unsigned char 
 15512 ;; Auto vars:     Size  Location     Type
 15513 ;;  init            1    6[BANK1 ] unsigned char 
 15514 ;; Return value:  Size  Location     Type
 15515 ;;                  1    wreg      void 
 15516 ;; Registers used:
 15517 ;;		wreg, status,2, status,0, cstack
 15518 ;; Tracked objects:
 15519 ;;		On entry : 0/0
 15520 ;;		On exit  : 0/0
 15521 ;;		Unchanged: 0/0
 15522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15523 ;;      Params:         0       0       0       0       0       0       0
 15524 ;;      Locals:         0       0       1       0       0       0       0
 15525 ;;      Temps:          0       0       0       0       0       0       0
 15526 ;;      Totals:         0       0       1       0       0       0       0
 15527 ;;Total ram usage:        1 bytes
 15528 ;; Hardware stack levels used:    1
 15529 ;; Hardware stack levels required when called:   13
 15530 ;; This function calls:
 15531 ;;		_setPWM2duty
 15532 ;; This function is called by:
 15533 ;;		_pressRETRO
 15534 ;;		_longPressRETRO
 15535 ;;		_pressENTER
 15536 ;; This function uses a non-reentrant model
 15537 ;;
 15538                           
 15539                           	psect	text61
 15540  006D46                     __ptext61:
 15541                           	opt stack 0
 15542  006D46                     _initProtocoll:
 15543                           	opt stack 15
 15544                           
 15545                           ;incstack = 0
 15546                           ;initProtocoll@init stored from wreg
 15547  006D46  0101               	movlb	1	; () banked
 15548  006D48  6F06               	movwf	initProtocoll@init& (0+255),b
 15549                           
 15550                           ;PWMConfig.h: 50: if(!PORTAbits.RA7)
 15551  006D4A  BE80               	btfsc	3968,7,c	;volatile
 15552  006D4C  D003               	goto	l10760
 15553                           
 15554                           ;PWMConfig.h: 51: bladeIsUP = 2;
 15555  006D4E  0E02               	movlw	2
 15556  006D50  0100               	movlb	0	; () banked
 15557  006D52  6FD4               	movwf	_bladeIsUP& (0+255),b
 15558  006D54                     l10760:
 15559                           
 15560                           ;PWMConfig.h: 52: if(init) {
 15561  006D54  0101               	movlb	1	; () banked
 15562  006D56  5106               	movf	initProtocoll@init& (0+255),w,b
 15563  006D58  0101               	movlb	1	; () banked
 15564  006D5A  B4D8               	btfsc	status,2,c
 15565  006D5C  0012               	return	
 15566                           
 15567                           ; BSR set to: 1
 15568                           ;PWMConfig.h: 53: LATCbits.LATC5 = 0;
 15569  006D5E  9A8B               	bcf	3979,5,c	;volatile
 15570                           
 15571                           ; BSR set to: 1
 15572                           ;PWMConfig.h: 54: processTimer = 0;
 15573  006D60  0E00               	movlw	0
 15574  006D62  6E37               	movwf	_processTimer,c
 15575  006D64  0E00               	movlw	0
 15576  006D66  6E38               	movwf	_processTimer+1,c
 15577  006D68  0E00               	movlw	0
 15578  006D6A  6E39               	movwf	_processTimer+2,c
 15579  006D6C  0E00               	movlw	0
 15580  006D6E  6E3A               	movwf	_processTimer+3,c
 15581                           
 15582                           ;PWMConfig.h: 55: processState = 0;
 15583  006D70  0E00               	movlw	0
 15584  006D72  0100               	movlb	0	; () banked
 15585  006D74  6FB5               	movwf	(_processState+1)& (0+255),b
 15586  006D76  0E00               	movlw	0
 15587  006D78  6FB4               	movwf	_processState& (0+255),b
 15588                           
 15589                           ; BSR set to: 0
 15590                           ;PWMConfig.h: 56: if(bladeIsUP != 1)
 15591  006D7A  0100               	movlb	0	; () banked
 15592  006D7C  05D4               	decf	_bladeIsUP& (0+255),w,b
 15593  006D7E  B4D8               	btfsc	status,2,c
 15594  006D80  0012               	return	
 15595                           
 15596                           ; BSR set to: 0
 15597                           ;PWMConfig.h: 57: setPWM2duty(-400);
 15598  006D82  0EFE               	movlw	254
 15599  006D84  0101               	movlb	1	; () banked
 15600  006D86  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 15601  006D88  0E70               	movlw	112
 15602  006D8A  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 15603  006D8C  EC85  F02F         	call	_setPWM2duty	;wreg free
 15604  006D90  0012               	return	
 15605  006D92                     __end_of_initProtocoll:
 15606                           	opt stack 0
 15607                           tblptru	equ	0xFF8
 15608                           tblptrh	equ	0xFF7
 15609                           tblptrl	equ	0xFF6
 15610                           tablat	equ	0xFF5
 15611                           prodh	equ	0xFF4
 15612                           prodl	equ	0xFF3
 15613                           intcon	equ	0xFF2
 15614                           postinc0	equ	0xFEE
 15615                           wreg	equ	0xFE8
 15616                           postdec1	equ	0xFE5
 15617                           fsr1l	equ	0xFE1
 15618                           indf2	equ	0xFDF
 15619                           postinc2	equ	0xFDE
 15620                           postdec2	equ	0xFDD
 15621                           plusw2	equ	0xFDB
 15622                           fsr2h	equ	0xFDA
 15623                           fsr2l	equ	0xFD9
 15624                           status	equ	0xFD8
 15625                           
 15626 ;; *************** function _longPressENTER *****************
 15627 ;; Defined at:
 15628 ;;		line 428 in file "source/DisplayProtocol.h"
 15629 ;; Parameters:    Size  Location     Type
 15630 ;;		None
 15631 ;; Auto vars:     Size  Location     Type
 15632 ;;  temp            3   76[BANK1 ] float 
 15633 ;; Return value:  Size  Location     Type
 15634 ;;                  1    wreg      void 
 15635 ;; Registers used:
 15636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15637 ;; Tracked objects:
 15638 ;;		On entry : 0/0
 15639 ;;		On exit  : 0/0
 15640 ;;		Unchanged: 0/0
 15641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15642 ;;      Params:         0       0       0       0       0       0       0
 15643 ;;      Locals:         0       0       6       0       0       0       0
 15644 ;;      Temps:          0       0       0       0       0       0       0
 15645 ;;      Totals:         0       0       6       0       0       0       0
 15646 ;;Total ram usage:        6 bytes
 15647 ;; Hardware stack levels used:    1
 15648 ;; Hardware stack levels required when called:   17
 15649 ;; This function calls:
 15650 ;;		___ftadd
 15651 ;;		___ftdiv
 15652 ;;		___ftmul
 15653 ;;		_calcVars2ti
 15654 ;;		_confirmEdition
 15655 ;;		_desintegrator
 15656 ;;		_integrator
 15657 ;; This function is called by:
 15658 ;;		_buttonChecking
 15659 ;; This function uses a non-reentrant model
 15660 ;;
 15661                           
 15662                           	psect	text62
 15663  00193E                     __ptext62:
 15664                           	opt stack 0
 15665  00193E                     _longPressENTER:
 15666                           	opt stack 12
 15667                           
 15668                           ;DisplayProtocol.h: 429: if (!ENTERisLP) {
 15669                           
 15670                           ;incstack = 0
 15671  00193E  0101               	movlb	1	; () banked
 15672  001940  51B8               	movf	_ENTERisLP& (0+255),w,b
 15673  001942  A4D8               	btfss	status,2,c
 15674  001944  0012               	return	
 15675                           
 15676                           ; BSR set to: 1
 15677                           ;DisplayProtocol.h: 430: ENTERisLP = 1;
 15678  001946  0E01               	movlw	1
 15679  001948  0101               	movlb	1	; () banked
 15680  00194A  6FB8               	movwf	_ENTERisLP& (0+255),b
 15681                           
 15682                           ;DisplayProtocol.h: 431: if(actualScreen == 0 || actualScreen == 4) {
 15683  00194C  0101               	movlb	1	; () banked
 15684  00194E  51B9               	movf	_actualScreen& (0+255),w,b
 15685  001950  B4D8               	btfsc	status,2,c
 15686  001952  D005               	goto	l11504
 15687                           
 15688                           ; BSR set to: 1
 15689  001954  0E04               	movlw	4
 15690  001956  0101               	movlb	1	; () banked
 15691  001958  19B9               	xorwf	_actualScreen& (0+255),w,b
 15692  00195A  A4D8               	btfss	status,2,c
 15693  00195C  D025               	goto	l11520
 15694  00195E                     l11504:
 15695                           
 15696                           ; BSR set to: 1
 15697                           ;DisplayProtocol.h: 432: if (holdUPcont > 5) {
 15698  00195E  0E05               	movlw	5
 15699  001960  0101               	movlb	1	; () banked
 15700  001962  65BC               	cpfsgt	_holdUPcont& (0+255),b
 15701  001964  D014               	goto	l11514
 15702                           
 15703                           ; BSR set to: 1
 15704                           ;DisplayProtocol.h: 433: if (actualScreen == 0) {
 15705  001966  0101               	movlb	1	; () banked
 15706  001968  51B9               	movf	_actualScreen& (0+255),w,b
 15707  00196A  A4D8               	btfss	status,2,c
 15708  00196C  D007               	goto	l11510
 15709                           
 15710                           ; BSR set to: 1
 15711                           ;DisplayProtocol.h: 434: actualScreen = 1;
 15712  00196E  0E01               	movlw	1
 15713  001970  0101               	movlb	1	; () banked
 15714  001972  6FB9               	movwf	_actualScreen& (0+255),b
 15715                           
 15716                           ;DisplayProtocol.h: 435: fd = 0;
 15717  001974  0E00               	movlw	0
 15718  001976  0101               	movlb	1	; () banked
 15719  001978  6FBB               	movwf	_fd& (0+255),b
 15720                           
 15721                           ;DisplayProtocol.h: 436: } else if (actualScreen == 4)
 15722  00197A  0012               	return	
 15723  00197C                     l11510:
 15724                           
 15725                           ; BSR set to: 1
 15726  00197C  0E04               	movlw	4
 15727  00197E  0101               	movlb	1	; () banked
 15728  001980  19B9               	xorwf	_actualScreen& (0+255),w,b
 15729  001982  A4D8               	btfss	status,2,c
 15730  001984  0012               	return	
 15731                           
 15732                           ; BSR set to: 1
 15733                           ;DisplayProtocol.h: 437: actualScreen = 9;
 15734  001986  0E09               	movlw	9
 15735  001988  0101               	movlb	1	; () banked
 15736  00198A  6FB9               	movwf	_actualScreen& (0+255),b
 15737                           
 15738                           ; BSR set to: 1
 15739                           ;DisplayProtocol.h: 438: } else if(!processStarted) {
 15740                           
 15741                           ; BSR set to: 1
 15742  00198C  0012               	return	
 15743  00198E                     l11514:
 15744                           
 15745                           ; BSR set to: 1
 15746  00198E  0100               	movlb	0	; () banked
 15747  001990  51C4               	movf	_processStarted& (0+255),w,b
 15748  001992  A4D8               	btfss	status,2,c
 15749  001994  0012               	return	
 15750                           
 15751                           ; BSR set to: 0
 15752                           ;DisplayProtocol.h: 439: tempLastScreen = actualScreen;
 15753  001996  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 15754                           
 15755                           ; BSR set to: 0
 15756                           ;DisplayProtocol.h: 440: actualScreen = 2;
 15757  00199A  0E02               	movlw	2
 15758  00199C  0101               	movlb	1	; () banked
 15759  00199E  6FB9               	movwf	_actualScreen& (0+255),b
 15760                           
 15761                           ;DisplayProtocol.h: 441: selSN = 1;
 15762  0019A0  0E01               	movlw	1
 15763  0019A2  0101               	movlb	1	; () banked
 15764  0019A4  6FBF               	movwf	_selSN& (0+255),b
 15765                           
 15766                           ; BSR set to: 1
 15767                           ;DisplayProtocol.h: 442: }
 15768                           ;DisplayProtocol.h: 443: }else if(actualScreen == 5) {
 15769                           
 15770                           ; BSR set to: 1
 15771  0019A6  0012               	return	
 15772  0019A8                     l11520:
 15773                           
 15774                           ; BSR set to: 1
 15775  0019A8  0E05               	movlw	5
 15776  0019AA  0101               	movlb	1	; () banked
 15777  0019AC  19B9               	xorwf	_actualScreen& (0+255),w,b
 15778  0019AE  A4D8               	btfss	status,2,c
 15779  0019B0  D010               	goto	l11528
 15780                           
 15781                           ; BSR set to: 1
 15782                           ;DisplayProtocol.h: 444: if(menuSection != 2)
 15783  0019B2  0E02               	movlw	2
 15784  0019B4  0101               	movlb	1	; () banked
 15785  0019B6  19BD               	xorwf	_menuSection& (0+255),w,b
 15786  0019B8  A4D8               	btfss	status,2,c
 15787                           
 15788                           ; BSR set to: 1
 15789                           ;DisplayProtocol.h: 445: integrator();
 15790  0019BA  EC0D  F021         	call	_integrator	;wreg free
 15791                           
 15792                           ;DisplayProtocol.h: 446: confirmEdition(!processStarted);
 15793  0019BE  0100               	movlb	0	; () banked
 15794  0019C0  51C4               	movf	_processStarted& (0+255),w,b
 15795  0019C2  A4D8               	btfss	status,2,c
 15796  0019C4  D002               	goto	u17350
 15797  0019C6  0E01               	movlw	1
 15798  0019C8  D001               	goto	u17360
 15799  0019CA                     u17350:
 15800  0019CA  0E00               	movlw	0
 15801  0019CC                     u17360:
 15802  0019CC  ECE5  F02C         	call	_confirmEdition
 15803                           
 15804                           ;DisplayProtocol.h: 447: }else if(actualScreen == 12) {
 15805  0019D0  0012               	return	
 15806  0019D2                     l11528:
 15807  0019D2  0E0C               	movlw	12
 15808  0019D4  0101               	movlb	1	; () banked
 15809  0019D6  19B9               	xorwf	_actualScreen& (0+255),w,b
 15810  0019D8  A4D8               	btfss	status,2,c
 15811  0019DA  0012               	return	
 15812                           
 15813                           ; BSR set to: 1
 15814                           ;DisplayProtocol.h: 448: tempLastScreen = 6;
 15815  0019DC  0E06               	movlw	6
 15816  0019DE  0100               	movlb	0	; () banked
 15817  0019E0  6FC8               	movwf	_tempLastScreen& (0+255),b
 15818                           
 15819                           ; BSR set to: 0
 15820                           ;DisplayProtocol.h: 449: integrator();
 15821  0019E2  EC0D  F021         	call	_integrator	;wreg free
 15822                           
 15823                           ;DisplayProtocol.h: 450: if(calibLevel == 0) {
 15824  0019E6  0101               	movlb	1	; () banked
 15825  0019E8  51BA               	movf	_calibLevel& (0+255),w,b
 15826  0019EA  A4D8               	btfss	status,2,c
 15827  0019EC  D069               	goto	l11556
 15828                           
 15829                           ; BSR set to: 1
 15830                           ;DisplayProtocol.h: 451: tempVelocidadMasa1 = (float)chanValf / tiXcorte;
 15831  0019EE  C1B1  F112         	movff	_chanValf,___ftdiv@f1
 15832  0019F2  C1B2  F113         	movff	_chanValf+1,___ftdiv@f1+1
 15833  0019F6  C1B3  F114         	movff	_chanValf+2,___ftdiv@f1+2
 15834  0019FA  C195  F115         	movff	_tiXcorte,___ftdiv@f2
 15835  0019FE  C196  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 15836  001A02  C197  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 15837  001A06  EC7D  F01E         	call	___ftdiv	;wreg free
 15838  001A0A  C112  F19D         	movff	?___ftdiv,_tempVelocidadMasa1
 15839  001A0E  C113  F19E         	movff	?___ftdiv+1,_tempVelocidadMasa1+1
 15840  001A12  C114  F19F         	movff	?___ftdiv+2,_tempVelocidadMasa1+2
 15841                           
 15842                           ;DisplayProtocol.h: 452: tiXcorte = (float)0.5f / tempVelocidadMasa1;
 15843  001A16  0E00               	movlw	0
 15844  001A18  0101               	movlb	1	; () banked
 15845  001A1A  6F12               	movwf	___ftdiv@f1& (0+255),b
 15846  001A1C  0E00               	movlw	0
 15847  001A1E  0101               	movlb	1	; () banked
 15848  001A20  6F13               	movwf	(___ftdiv@f1+1)& (0+255),b
 15849  001A22  0E3F               	movlw	63
 15850  001A24  0101               	movlb	1	; () banked
 15851  001A26  6F14               	movwf	(___ftdiv@f1+2)& (0+255),b
 15852  001A28  C19D  F115         	movff	_tempVelocidadMasa1,___ftdiv@f2
 15853  001A2C  C19E  F116         	movff	_tempVelocidadMasa1+1,___ftdiv@f2+1
 15854  001A30  C19F  F117         	movff	_tempVelocidadMasa1+2,___ftdiv@f2+2
 15855  001A34  EC7D  F01E         	call	___ftdiv	;wreg free
 15856  001A38  C112  F195         	movff	?___ftdiv,_tiXcorte
 15857  001A3C  C113  F196         	movff	?___ftdiv+1,_tiXcorte+1
 15858  001A40  C114  F197         	movff	?___ftdiv+2,_tiXcorte+2
 15859                           
 15860                           ;DisplayProtocol.h: 453: timsXcorte = (float)tiXcorte * 1000;
 15861  001A44  C195  F114         	movff	_tiXcorte,___ftmul@f1
 15862  001A48  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 15863  001A4C  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 15864  001A50  0E00               	movlw	0
 15865  001A52  0101               	movlb	1	; () banked
 15866  001A54  6F17               	movwf	___ftmul@f2& (0+255),b
 15867  001A56  0E7A               	movlw	122
 15868  001A58  0101               	movlb	1	; () banked
 15869  001A5A  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 15870  001A5C  0E44               	movlw	68
 15871  001A5E  0101               	movlb	1	; () banked
 15872  001A60  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 15873  001A62  EC1F  F01D         	call	___ftmul	;wreg free
 15874  001A66  C114  F059         	movff	?___ftmul,_timsXcorte
 15875  001A6A  C115  F05A         	movff	?___ftmul+1,_timsXcorte+1
 15876  001A6E  C116  F05B         	movff	?___ftmul+2,_timsXcorte+2
 15877                           
 15878                           ;DisplayProtocol.h: 454: calibLevel = 1;
 15879  001A72  0E01               	movlw	1
 15880  001A74  0101               	movlb	1	; () banked
 15881  001A76  6FBA               	movwf	_calibLevel& (0+255),b
 15882                           
 15883                           ; BSR set to: 1
 15884                           ;DisplayProtocol.h: 455: numCortes = 1;
 15885  001A78  0E00               	movlw	0
 15886  001A7A  0100               	movlb	0	; () banked
 15887  001A7C  6FD1               	movwf	(_numCortes+1)& (0+255),b
 15888  001A7E  0E01               	movlw	1
 15889  001A80  6FD0               	movwf	_numCortes& (0+255),b
 15890                           
 15891                           ; BSR set to: 0
 15892                           ;DisplayProtocol.h: 456: processState = 0;
 15893  001A82  0E00               	movlw	0
 15894  001A84  0100               	movlb	0	; () banked
 15895  001A86  6FB5               	movwf	(_processState+1)& (0+255),b
 15896  001A88  0E00               	movlw	0
 15897  001A8A  6FB4               	movwf	_processState& (0+255),b
 15898                           
 15899                           ; BSR set to: 0
 15900                           ;DisplayProtocol.h: 457: processTimer = 0;
 15901  001A8C  0E00               	movlw	0
 15902  001A8E  6E37               	movwf	_processTimer,c
 15903  001A90  0E00               	movlw	0
 15904  001A92  6E38               	movwf	_processTimer+1,c
 15905  001A94  0E00               	movlw	0
 15906  001A96  6E39               	movwf	_processTimer+2,c
 15907  001A98  0E00               	movlw	0
 15908  001A9A  6E3A               	movwf	_processTimer+3,c
 15909                           
 15910                           ; BSR set to: 0
 15911                           ;DisplayProtocol.h: 459: actualScreen = tempLastScreen;
 15912  001A9C  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 15913                           
 15914                           ; BSR set to: 0
 15915                           ;DisplayProtocol.h: 460: chanValf = (float)0.50f;;
 15916  001AA0  0E00               	movlw	0
 15917  001AA2  0101               	movlb	1	; () banked
 15918  001AA4  6FB1               	movwf	_chanValf& (0+255),b
 15919  001AA6  0E00               	movlw	0
 15920  001AA8  0101               	movlb	1	; () banked
 15921  001AAA  6FB2               	movwf	(_chanValf+1)& (0+255),b
 15922  001AAC  0E3F               	movlw	63
 15923  001AAE  0101               	movlb	1	; () banked
 15924  001AB0  6FB3               	movwf	(_chanValf+2)& (0+255),b
 15925                           
 15926                           ; BSR set to: 1
 15927                           ;DisplayProtocol.h: 461: desintegrator();
 15928  001AB2  ECE6  F019         	call	_desintegrator	;wreg free
 15929                           
 15930                           ;DisplayProtocol.h: 462: LATCbits.LATC4 = 1;
 15931  001AB6  888B               	bsf	3979,4,c	;volatile
 15932                           
 15933                           ;DisplayProtocol.h: 463: processStarted = 1;
 15934  001AB8  0E01               	movlw	1
 15935  001ABA  0100               	movlb	0	; () banked
 15936  001ABC  6FC4               	movwf	_processStarted& (0+255),b
 15937                           
 15938                           ;DisplayProtocol.h: 464: }else if(calibLevel == 1) {
 15939  001ABE  0012               	return	
 15940  001AC0                     l11556:
 15941  001AC0  0101               	movlb	1	; () banked
 15942  001AC2  05BA               	decf	_calibLevel& (0+255),w,b
 15943  001AC4  A4D8               	btfss	status,2,c
 15944  001AC6  D069               	goto	l11578
 15945                           
 15946                           ; BSR set to: 1
 15947                           ;DisplayProtocol.h: 465: tempVelocidadMasa2 = (float)chanValf / tiXcorte;
 15948  001AC8  C1B1  F112         	movff	_chanValf,___ftdiv@f1
 15949  001ACC  C1B2  F113         	movff	_chanValf+1,___ftdiv@f1+1
 15950  001AD0  C1B3  F114         	movff	_chanValf+2,___ftdiv@f1+2
 15951  001AD4  C195  F115         	movff	_tiXcorte,___ftdiv@f2
 15952  001AD8  C196  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 15953  001ADC  C197  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 15954  001AE0  EC7D  F01E         	call	___ftdiv	;wreg free
 15955  001AE4  C112  F1A0         	movff	?___ftdiv,_tempVelocidadMasa2
 15956  001AE8  C113  F1A1         	movff	?___ftdiv+1,_tempVelocidadMasa2+1
 15957  001AEC  C114  F1A2         	movff	?___ftdiv+2,_tempVelocidadMasa2+2
 15958                           
 15959                           ;DisplayProtocol.h: 466: tiXcorte = (float)0.25f / tempVelocidadMasa2;
 15960  001AF0  0E00               	movlw	0
 15961  001AF2  0101               	movlb	1	; () banked
 15962  001AF4  6F12               	movwf	___ftdiv@f1& (0+255),b
 15963  001AF6  0E80               	movlw	128
 15964  001AF8  0101               	movlb	1	; () banked
 15965  001AFA  6F13               	movwf	(___ftdiv@f1+1)& (0+255),b
 15966  001AFC  0E3E               	movlw	62
 15967  001AFE  0101               	movlb	1	; () banked
 15968  001B00  6F14               	movwf	(___ftdiv@f1+2)& (0+255),b
 15969  001B02  C1A0  F115         	movff	_tempVelocidadMasa2,___ftdiv@f2
 15970  001B06  C1A1  F116         	movff	_tempVelocidadMasa2+1,___ftdiv@f2+1
 15971  001B0A  C1A2  F117         	movff	_tempVelocidadMasa2+2,___ftdiv@f2+2
 15972  001B0E  EC7D  F01E         	call	___ftdiv	;wreg free
 15973  001B12  C112  F195         	movff	?___ftdiv,_tiXcorte
 15974  001B16  C113  F196         	movff	?___ftdiv+1,_tiXcorte+1
 15975  001B1A  C114  F197         	movff	?___ftdiv+2,_tiXcorte+2
 15976                           
 15977                           ;DisplayProtocol.h: 467: timsXcorte = (float)tiXcorte * 1000;
 15978  001B1E  C195  F114         	movff	_tiXcorte,___ftmul@f1
 15979  001B22  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 15980  001B26  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 15981  001B2A  0E00               	movlw	0
 15982  001B2C  0101               	movlb	1	; () banked
 15983  001B2E  6F17               	movwf	___ftmul@f2& (0+255),b
 15984  001B30  0E7A               	movlw	122
 15985  001B32  0101               	movlb	1	; () banked
 15986  001B34  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 15987  001B36  0E44               	movlw	68
 15988  001B38  0101               	movlb	1	; () banked
 15989  001B3A  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 15990  001B3C  EC1F  F01D         	call	___ftmul	;wreg free
 15991  001B40  C114  F059         	movff	?___ftmul,_timsXcorte
 15992  001B44  C115  F05A         	movff	?___ftmul+1,_timsXcorte+1
 15993  001B48  C116  F05B         	movff	?___ftmul+2,_timsXcorte+2
 15994                           
 15995                           ;DisplayProtocol.h: 468: calibLevel = 2;
 15996  001B4C  0E02               	movlw	2
 15997  001B4E  0101               	movlb	1	; () banked
 15998  001B50  6FBA               	movwf	_calibLevel& (0+255),b
 15999                           
 16000                           ; BSR set to: 1
 16001                           ;DisplayProtocol.h: 469: numCortes = 1;
 16002  001B52  0E00               	movlw	0
 16003  001B54  0100               	movlb	0	; () banked
 16004  001B56  6FD1               	movwf	(_numCortes+1)& (0+255),b
 16005  001B58  0E01               	movlw	1
 16006  001B5A  6FD0               	movwf	_numCortes& (0+255),b
 16007                           
 16008                           ; BSR set to: 0
 16009                           ;DisplayProtocol.h: 470: processState = 0;
 16010  001B5C  0E00               	movlw	0
 16011  001B5E  0100               	movlb	0	; () banked
 16012  001B60  6FB5               	movwf	(_processState+1)& (0+255),b
 16013  001B62  0E00               	movlw	0
 16014  001B64  6FB4               	movwf	_processState& (0+255),b
 16015                           
 16016                           ; BSR set to: 0
 16017                           ;DisplayProtocol.h: 471: processTimer = 0;
 16018  001B66  0E00               	movlw	0
 16019  001B68  6E37               	movwf	_processTimer,c
 16020  001B6A  0E00               	movlw	0
 16021  001B6C  6E38               	movwf	_processTimer+1,c
 16022  001B6E  0E00               	movlw	0
 16023  001B70  6E39               	movwf	_processTimer+2,c
 16024  001B72  0E00               	movlw	0
 16025  001B74  6E3A               	movwf	_processTimer+3,c
 16026                           
 16027                           ; BSR set to: 0
 16028                           ;DisplayProtocol.h: 473: actualScreen = tempLastScreen;
 16029  001B76  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 16030                           
 16031                           ; BSR set to: 0
 16032                           ;DisplayProtocol.h: 474: chanValf = (float)0.25f;
 16033  001B7A  0E00               	movlw	0
 16034  001B7C  0101               	movlb	1	; () banked
 16035  001B7E  6FB1               	movwf	_chanValf& (0+255),b
 16036  001B80  0E80               	movlw	128
 16037  001B82  0101               	movlb	1	; () banked
 16038  001B84  6FB2               	movwf	(_chanValf+1)& (0+255),b
 16039  001B86  0E3E               	movlw	62
 16040  001B88  0101               	movlb	1	; () banked
 16041  001B8A  6FB3               	movwf	(_chanValf+2)& (0+255),b
 16042                           
 16043                           ; BSR set to: 1
 16044                           ;DisplayProtocol.h: 475: desintegrator();
 16045  001B8C  ECE6  F019         	call	_desintegrator	;wreg free
 16046                           
 16047                           ;DisplayProtocol.h: 476: LATCbits.LATC4 = 1;
 16048  001B90  888B               	bsf	3979,4,c	;volatile
 16049                           
 16050                           ;DisplayProtocol.h: 477: processStarted = 1;
 16051  001B92  0E01               	movlw	1
 16052  001B94  0100               	movlb	0	; () banked
 16053  001B96  6FC4               	movwf	_processStarted& (0+255),b
 16054                           
 16055                           ;DisplayProtocol.h: 478: }else if(calibLevel == 2) {
 16056  001B98  0012               	return	
 16057  001B9A                     l11578:
 16058  001B9A  0E02               	movlw	2
 16059  001B9C  0101               	movlb	1	; () banked
 16060  001B9E  19BA               	xorwf	_calibLevel& (0+255),w,b
 16061  001BA0  A4D8               	btfss	status,2,c
 16062  001BA2  0012               	return	
 16063                           
 16064                           ; BSR set to: 1
 16065                           ;DisplayProtocol.h: 479: tempVelocidadMasa3 = (float)chanValf / tiXcorte;
 16066  001BA4  C1B1  F112         	movff	_chanValf,___ftdiv@f1
 16067  001BA8  C1B2  F113         	movff	_chanValf+1,___ftdiv@f1+1
 16068  001BAC  C1B3  F114         	movff	_chanValf+2,___ftdiv@f1+2
 16069  001BB0  C195  F115         	movff	_tiXcorte,___ftdiv@f2
 16070  001BB4  C196  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 16071  001BB8  C197  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 16072  001BBC  EC7D  F01E         	call	___ftdiv	;wreg free
 16073  001BC0  C112  F192         	movff	?___ftdiv,_tempVelocidadMasa3
 16074  001BC4  C113  F193         	movff	?___ftdiv+1,_tempVelocidadMasa3+1
 16075  001BC8  C114  F194         	movff	?___ftdiv+2,_tempVelocidadMasa3+2
 16076                           
 16077                           ;DisplayProtocol.h: 480: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 16078  001BCC  C1A0  F130         	movff	_tempVelocidadMasa2,___ftadd@f2
 16079  001BD0  C1A1  F131         	movff	_tempVelocidadMasa2+1,___ftadd@f2+1
 16080  001BD4  C1A2  F132         	movff	_tempVelocidadMasa2+2,___ftadd@f2+2
 16081  001BD8  C19D  F12D         	movff	_tempVelocidadMasa1,___ftadd@f1
 16082  001BDC  C19E  F12E         	movff	_tempVelocidadMasa1+1,___ftadd@f1+1
 16083  001BE0  C19F  F12F         	movff	_tempVelocidadMasa1+2,___ftadd@f1+2
 16084  001BE4  ECEC  F013         	call	___ftadd	;wreg free
 16085  001BE8  C12D  F14F         	movff	?___ftadd,_longPressENTER$3018
 16086  001BEC  C12E  F150         	movff	?___ftadd+1,_longPressENTER$3018+1
 16087  001BF0  C12F  F151         	movff	?___ftadd+2,_longPressENTER$3018+2
 16088                           
 16089                           ;DisplayProtocol.h: 480: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 16090  001BF4  C14F  F12D         	movff	_longPressENTER$3018,___ftadd@f1
 16091  001BF8  C150  F12E         	movff	_longPressENTER$3018+1,___ftadd@f1+1
 16092  001BFC  C151  F12F         	movff	_longPressENTER$3018+2,___ftadd@f1+2
 16093  001C00  C192  F130         	movff	_tempVelocidadMasa3,___ftadd@f2
 16094  001C04  C193  F131         	movff	_tempVelocidadMasa3+1,___ftadd@f2+1
 16095  001C08  C194  F132         	movff	_tempVelocidadMasa3+2,___ftadd@f2+2
 16096  001C0C  ECEC  F013         	call	___ftadd	;wreg free
 16097  001C10  C12D  F14C         	movff	?___ftadd,longPressENTER@temp
 16098  001C14  C12E  F14D         	movff	?___ftadd+1,longPressENTER@temp+1
 16099  001C18  C12F  F14E         	movff	?___ftadd+2,longPressENTER@temp+2
 16100                           
 16101                           ;DisplayProtocol.h: 481: chanValf = (float)temp / 3.0f;
 16102  001C1C  C14C  F112         	movff	longPressENTER@temp,___ftdiv@f1
 16103  001C20  C14D  F113         	movff	longPressENTER@temp+1,___ftdiv@f1+1
 16104  001C24  C14E  F114         	movff	longPressENTER@temp+2,___ftdiv@f1+2
 16105  001C28  0E00               	movlw	0
 16106  001C2A  0101               	movlb	1	; () banked
 16107  001C2C  6F15               	movwf	___ftdiv@f2& (0+255),b
 16108  001C2E  0E40               	movlw	64
 16109  001C30  0101               	movlb	1	; () banked
 16110  001C32  6F16               	movwf	(___ftdiv@f2+1)& (0+255),b
 16111  001C34  0E40               	movlw	64
 16112  001C36  0101               	movlb	1	; () banked
 16113  001C38  6F17               	movwf	(___ftdiv@f2+2)& (0+255),b
 16114  001C3A  EC7D  F01E         	call	___ftdiv	;wreg free
 16115  001C3E  C112  F1B1         	movff	?___ftdiv,_chanValf
 16116  001C42  C113  F1B2         	movff	?___ftdiv+1,_chanValf+1
 16117  001C46  C114  F1B3         	movff	?___ftdiv+2,_chanValf+2
 16118                           
 16119                           ;DisplayProtocol.h: 482: numCortes = tempNumCortes;
 16120  001C4A  C0D2  F0D0         	movff	_tempNumCortes,_numCortes
 16121  001C4E  C0D3  F0D1         	movff	_tempNumCortes+1,_numCortes+1
 16122                           
 16123                           ;DisplayProtocol.h: 483: calcVars2ti();
 16124  001C52  ECFE  F035         	call	_calcVars2ti	;wreg free
 16125                           
 16126                           ;DisplayProtocol.h: 484: calibMode = 0;
 16127  001C56  0E00               	movlw	0
 16128  001C58  0100               	movlb	0	; () banked
 16129  001C5A  6FBB               	movwf	_calibMode& (0+255),b
 16130                           
 16131                           ; BSR set to: 0
 16132                           ;DisplayProtocol.h: 485: confirmEdition(!processStarted);
 16133  001C5C  0100               	movlb	0	; () banked
 16134  001C5E  51C4               	movf	_processStarted& (0+255),w,b
 16135  001C60  A4D8               	btfss	status,2,c
 16136  001C62  D002               	goto	u17410
 16137  001C64  0E01               	movlw	1
 16138  001C66  D001               	goto	u17420
 16139  001C68                     u17410:
 16140  001C68  0E00               	movlw	0
 16141  001C6A                     u17420:
 16142  001C6A  ECE5  F02C         	call	_confirmEdition
 16143  001C6E  0012               	return	
 16144  001C70                     __end_of_longPressENTER:
 16145                           	opt stack 0
 16146                           tblptru	equ	0xFF8
 16147                           tblptrh	equ	0xFF7
 16148                           tblptrl	equ	0xFF6
 16149                           tablat	equ	0xFF5
 16150                           prodh	equ	0xFF4
 16151                           prodl	equ	0xFF3
 16152                           intcon	equ	0xFF2
 16153                           postinc0	equ	0xFEE
 16154                           wreg	equ	0xFE8
 16155                           postdec1	equ	0xFE5
 16156                           fsr1l	equ	0xFE1
 16157                           indf2	equ	0xFDF
 16158                           postinc2	equ	0xFDE
 16159                           postdec2	equ	0xFDD
 16160                           plusw2	equ	0xFDB
 16161                           fsr2h	equ	0xFDA
 16162                           fsr2l	equ	0xFD9
 16163                           status	equ	0xFD8
 16164                           
 16165 ;; *************** function _integrator *****************
 16166 ;; Defined at:
 16167 ;;		line 61 in file "source/DisplayProtocol.h"
 16168 ;; Parameters:    Size  Location     Type
 16169 ;;		None
 16170 ;; Auto vars:     Size  Location     Type
 16171 ;;  temp            4   39[BANK1 ] long 
 16172 ;;  acum            4   35[BANK1 ] long 
 16173 ;;  i               2   43[BANK1 ] int 
 16174 ;; Return value:  Size  Location     Type
 16175 ;;                  1    wreg      void 
 16176 ;; Registers used:
 16177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16178 ;; Tracked objects:
 16179 ;;		On entry : 0/0
 16180 ;;		On exit  : 0/0
 16181 ;;		Unchanged: 0/0
 16182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16183 ;;      Params:         0       0       0       0       0       0       0
 16184 ;;      Locals:         0       0      10       0       0       0       0
 16185 ;;      Temps:          0       0       2       0       0       0       0
 16186 ;;      Totals:         0       0      12       0       0       0       0
 16187 ;;Total ram usage:       12 bytes
 16188 ;; Hardware stack levels used:    1
 16189 ;; Hardware stack levels required when called:   14
 16190 ;; This function calls:
 16191 ;;		___altoft
 16192 ;;		___ftdiv
 16193 ;;		___lmul
 16194 ;; This function is called by:
 16195 ;;		_longPressENTER
 16196 ;; This function uses a non-reentrant model
 16197 ;;
 16198                           
 16199                           	psect	text63
 16200  00421A                     __ptext63:
 16201                           	opt stack 0
 16202  00421A                     _integrator:
 16203                           	opt stack 14
 16204                           
 16205                           ;DisplayProtocol.h: 62: long acum = 0;
 16206                           
 16207                           ;incstack = 0
 16208  00421A  0E00               	movlw	0
 16209  00421C  0101               	movlb	1	; () banked
 16210  00421E  6F23               	movwf	integrator@acum& (0+255),b
 16211  004220  0E00               	movlw	0
 16212  004222  6F24               	movwf	(integrator@acum+1)& (0+255),b
 16213  004224  0E00               	movlw	0
 16214  004226  6F25               	movwf	(integrator@acum+2)& (0+255),b
 16215  004228  0E00               	movlw	0
 16216  00422A  6F26               	movwf	(integrator@acum+3)& (0+255),b
 16217                           
 16218                           ;DisplayProtocol.h: 63: long temp = 0;
 16219  00422C  0E00               	movlw	0
 16220  00422E  0101               	movlb	1	; () banked
 16221  004230  6F27               	movwf	integrator@temp& (0+255),b
 16222  004232  0E00               	movlw	0
 16223  004234  6F28               	movwf	(integrator@temp+1)& (0+255),b
 16224  004236  0E00               	movlw	0
 16225  004238  6F29               	movwf	(integrator@temp+2)& (0+255),b
 16226  00423A  0E00               	movlw	0
 16227  00423C  6F2A               	movwf	(integrator@temp+3)& (0+255),b
 16228                           
 16229                           ;DisplayProtocol.h: 64: int i;
 16230                           ;DisplayProtocol.h: 65: for(i = 0; i < 6; i++) {
 16231  00423E  0E00               	movlw	0
 16232  004240  0101               	movlb	1	; () banked
 16233  004242  6F2C               	movwf	(integrator@i+1)& (0+255),b
 16234  004244  0E00               	movlw	0
 16235  004246  6F2B               	movwf	integrator@i& (0+255),b
 16236  004248                     l10832:
 16237                           
 16238                           ; BSR set to: 1
 16239  004248  0101               	movlb	1	; () banked
 16240  00424A  BF2C               	btfsc	(integrator@i+1)& (0+255),7,b
 16241  00424C  D008               	goto	l10836
 16242  00424E  0101               	movlb	1	; () banked
 16243  004250  512C               	movf	(integrator@i+1)& (0+255),w,b
 16244  004252  E152               	bnz	l10844
 16245  004254  0E06               	movlw	6
 16246  004256  0101               	movlb	1	; () banked
 16247  004258  5D2B               	subwf	integrator@i& (0+255),w,b
 16248  00425A  B0D8               	btfsc	status,0,c
 16249  00425C  D04D               	goto	l10844
 16250  00425E                     l10836:
 16251                           
 16252                           ; BSR set to: 1
 16253                           ;DisplayProtocol.h: 66: temp = (long)chanValdig[i]*exp10[i];
 16254  00425E  0EA3               	movlw	low _chanValdig
 16255  004260  0101               	movlb	1	; () banked
 16256  004262  252B               	addwf	integrator@i& (0+255),w,b
 16257  004264  6ED9               	movwf	fsr2l,c
 16258  004266  0E01               	movlw	high _chanValdig
 16259  004268  0101               	movlb	1	; () banked
 16260  00426A  212C               	addwfc	(integrator@i+1)& (0+255),w,b
 16261  00426C  6EDA               	movwf	fsr2h,c
 16262  00426E  50DF               	movf	indf2,w,c
 16263  004270  0101               	movlb	1	; () banked
 16264  004272  6F00               	movwf	___lmul@multiplier& (0+255),b
 16265  004274  0E00               	movlw	0
 16266  004276  BF00               	btfsc	___lmul@multiplier& (0+255),7,b
 16267  004278  0EFF               	movlw	-1
 16268  00427A  6F01               	movwf	(___lmul@multiplier+1)& (0+255),b
 16269  00427C  6F02               	movwf	(___lmul@multiplier+2)& (0+255),b
 16270  00427E  6F03               	movwf	(___lmul@multiplier+3)& (0+255),b
 16271  004280  0E77               	movlw	low _exp10
 16272  004282  0101               	movlb	1	; () banked
 16273  004284  6F21               	movwf	??_integrator& (0+255),b
 16274  004286  0E01               	movlw	high _exp10
 16275  004288  0101               	movlb	1	; () banked
 16276  00428A  6F22               	movwf	(??_integrator+1)& (0+255),b
 16277  00428C  90D8               	bcf	status,0,c
 16278  00428E  0101               	movlb	1	; () banked
 16279  004290  352B               	rlcf	integrator@i& (0+255),w,b
 16280  004292  6ED9               	movwf	fsr2l,c
 16281  004294  0101               	movlb	1	; () banked
 16282  004296  352C               	rlcf	(integrator@i+1)& (0+255),w,b
 16283  004298  6EDA               	movwf	fsr2h,c
 16284  00429A  90D8               	bcf	status,0,c
 16285  00429C  36D9               	rlcf	fsr2l,f,c
 16286  00429E  36DA               	rlcf	fsr2h,f,c
 16287  0042A0  0101               	movlb	1	; () banked
 16288  0042A2  5121               	movf	??_integrator& (0+255),w,b
 16289  0042A4  26D9               	addwf	fsr2l,f,c
 16290  0042A6  0101               	movlb	1	; () banked
 16291  0042A8  5122               	movf	(??_integrator+1)& (0+255),w,b
 16292  0042AA  22DA               	addwfc	fsr2h,f,c
 16293  0042AC  CFDE F104          	movff	postinc2,___lmul@multiplicand
 16294  0042B0  CFDE F105          	movff	postinc2,___lmul@multiplicand+1
 16295  0042B4  CFDE F106          	movff	postinc2,___lmul@multiplicand+2
 16296  0042B8  CFDE F107          	movff	postinc2,___lmul@multiplicand+3
 16297  0042BC  EC04  F034         	call	___lmul	;wreg free
 16298  0042C0  C100  F127         	movff	?___lmul,integrator@temp
 16299  0042C4  C101  F128         	movff	?___lmul+1,integrator@temp+1
 16300  0042C8  C102  F129         	movff	?___lmul+2,integrator@temp+2
 16301  0042CC  C103  F12A         	movff	?___lmul+3,integrator@temp+3
 16302                           
 16303                           ;DisplayProtocol.h: 67: acum += temp;
 16304  0042D0  0101               	movlb	1	; () banked
 16305  0042D2  5127               	movf	integrator@temp& (0+255),w,b
 16306  0042D4  0101               	movlb	1	; () banked
 16307  0042D6  2723               	addwf	integrator@acum& (0+255),f,b
 16308  0042D8  0101               	movlb	1	; () banked
 16309  0042DA  5128               	movf	(integrator@temp+1)& (0+255),w,b
 16310  0042DC  0101               	movlb	1	; () banked
 16311  0042DE  2324               	addwfc	(integrator@acum+1)& (0+255),f,b
 16312  0042E0  0101               	movlb	1	; () banked
 16313  0042E2  5129               	movf	(integrator@temp+2)& (0+255),w,b
 16314  0042E4  0101               	movlb	1	; () banked
 16315  0042E6  2325               	addwfc	(integrator@acum+2)& (0+255),f,b
 16316  0042E8  0101               	movlb	1	; () banked
 16317  0042EA  512A               	movf	(integrator@temp+3)& (0+255),w,b
 16318  0042EC  0101               	movlb	1	; () banked
 16319  0042EE  2326               	addwfc	(integrator@acum+3)& (0+255),f,b
 16320                           
 16321                           ; BSR set to: 1
 16322  0042F0  0101               	movlb	1	; () banked
 16323  0042F2  4B2B               	infsnz	integrator@i& (0+255),f,b
 16324  0042F4  2B2C               	incf	(integrator@i+1)& (0+255),f,b
 16325  0042F6  D7A8               	goto	l10832
 16326  0042F8                     l10844:
 16327                           
 16328                           ; BSR set to: 1
 16329                           ;DisplayProtocol.h: 68: }
 16330                           ;DisplayProtocol.h: 69: chanValf = (float)acum / 1000;
 16331  0042F8  C123  F108         	movff	integrator@acum,___altoft@c
 16332  0042FC  C124  F109         	movff	integrator@acum+1,___altoft@c+1
 16333  004300  C125  F10A         	movff	integrator@acum+2,___altoft@c+2
 16334  004304  C126  F10B         	movff	integrator@acum+3,___altoft@c+3
 16335  004308  EC9A  F02E         	call	___altoft	;wreg free
 16336  00430C  C108  F112         	movff	?___altoft,___ftdiv@f1
 16337  004310  C109  F113         	movff	?___altoft+1,___ftdiv@f1+1
 16338  004314  C10A  F114         	movff	?___altoft+2,___ftdiv@f1+2
 16339  004318  0E00               	movlw	0
 16340  00431A  0101               	movlb	1	; () banked
 16341  00431C  6F15               	movwf	___ftdiv@f2& (0+255),b
 16342  00431E  0E7A               	movlw	122
 16343  004320  0101               	movlb	1	; () banked
 16344  004322  6F16               	movwf	(___ftdiv@f2+1)& (0+255),b
 16345  004324  0E44               	movlw	68
 16346  004326  0101               	movlb	1	; () banked
 16347  004328  6F17               	movwf	(___ftdiv@f2+2)& (0+255),b
 16348  00432A  EC7D  F01E         	call	___ftdiv	;wreg free
 16349  00432E  C112  F1B1         	movff	?___ftdiv,_chanValf
 16350  004332  C113  F1B2         	movff	?___ftdiv+1,_chanValf+1
 16351  004336  C114  F1B3         	movff	?___ftdiv+2,_chanValf+2
 16352  00433A  0012               	return		;funcret
 16353  00433C                     __end_of_integrator:
 16354                           	opt stack 0
 16355                           tblptru	equ	0xFF8
 16356                           tblptrh	equ	0xFF7
 16357                           tblptrl	equ	0xFF6
 16358                           tablat	equ	0xFF5
 16359                           prodh	equ	0xFF4
 16360                           prodl	equ	0xFF3
 16361                           intcon	equ	0xFF2
 16362                           postinc0	equ	0xFEE
 16363                           wreg	equ	0xFE8
 16364                           postdec1	equ	0xFE5
 16365                           fsr1l	equ	0xFE1
 16366                           indf2	equ	0xFDF
 16367                           postinc2	equ	0xFDE
 16368                           postdec2	equ	0xFDD
 16369                           plusw2	equ	0xFDB
 16370                           fsr2h	equ	0xFDA
 16371                           fsr2l	equ	0xFD9
 16372                           status	equ	0xFD8
 16373                           
 16374 ;; *************** function ___altoft *****************
 16375 ;; Defined at:
 16376 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
 16377 ;; Parameters:    Size  Location     Type
 16378 ;;  c               4    8[BANK1 ] long 
 16379 ;; Auto vars:     Size  Location     Type
 16380 ;;  sign            1   17[BANK1 ] unsigned char 
 16381 ;;  exp             1   16[BANK1 ] unsigned char 
 16382 ;; Return value:  Size  Location     Type
 16383 ;;                  3    8[BANK1 ] float 
 16384 ;; Registers used:
 16385 ;;		wreg, status,2, status,0, cstack
 16386 ;; Tracked objects:
 16387 ;;		On entry : 0/0
 16388 ;;		On exit  : 0/0
 16389 ;;		Unchanged: 0/0
 16390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16391 ;;      Params:         0       0       4       0       0       0       0
 16392 ;;      Locals:         0       0       2       0       0       0       0
 16393 ;;      Temps:          0       0       4       0       0       0       0
 16394 ;;      Totals:         0       0      10       0       0       0       0
 16395 ;;Total ram usage:       10 bytes
 16396 ;; Hardware stack levels used:    1
 16397 ;; Hardware stack levels required when called:   13
 16398 ;; This function calls:
 16399 ;;		___ftpack
 16400 ;; This function is called by:
 16401 ;;		_integrator
 16402 ;; This function uses a non-reentrant model
 16403 ;;
 16404                           
 16405                           	psect	text64
 16406  005D34                     __ptext64:
 16407                           	opt stack 0
 16408  005D34                     ___altoft:
 16409                           	opt stack 14
 16410                           
 16411                           ;incstack = 0
 16412  005D34  0E00               	movlw	0
 16413  005D36  0101               	movlb	1	; () banked
 16414  005D38  6F11               	movwf	___altoft@sign& (0+255),b
 16415  005D3A  0E8E               	movlw	142
 16416  005D3C  0101               	movlb	1	; () banked
 16417  005D3E  6F10               	movwf	___altoft@exp& (0+255),b
 16418                           
 16419                           ; BSR set to: 1
 16420  005D40  0101               	movlb	1	; () banked
 16421  005D42  AF0B               	btfss	(___altoft@c+3)& (0+255),7,b
 16422  005D44  D015               	goto	l10720
 16423                           
 16424                           ; BSR set to: 1
 16425  005D46  0101               	movlb	1	; () banked
 16426  005D48  1F0B               	comf	(___altoft@c+3)& (0+255),f,b
 16427  005D4A  1F0A               	comf	(___altoft@c+2)& (0+255),f,b
 16428  005D4C  1F09               	comf	(___altoft@c+1)& (0+255),f,b
 16429  005D4E  6D08               	negf	___altoft@c& (0+255),b
 16430  005D50  0E00               	movlw	0
 16431  005D52  2309               	addwfc	(___altoft@c+1)& (0+255),f,b
 16432  005D54  230A               	addwfc	(___altoft@c+2)& (0+255),f,b
 16433  005D56  230B               	addwfc	(___altoft@c+3)& (0+255),f,b
 16434                           
 16435                           ; BSR set to: 1
 16436  005D58  0E01               	movlw	1
 16437  005D5A  0101               	movlb	1	; () banked
 16438  005D5C  6F11               	movwf	___altoft@sign& (0+255),b
 16439                           
 16440                           ; BSR set to: 1
 16441  005D5E  D008               	goto	l10720
 16442  005D60                     l10718:
 16443                           
 16444                           ; BSR set to: 1
 16445  005D60  0101               	movlb	1	; () banked
 16446  005D62  90D8               	bcf	status,0,c
 16447  005D64  330B               	rrcf	(___altoft@c+3)& (0+255),f,b
 16448  005D66  330A               	rrcf	(___altoft@c+2)& (0+255),f,b
 16449  005D68  3309               	rrcf	(___altoft@c+1)& (0+255),f,b
 16450  005D6A  3308               	rrcf	___altoft@c& (0+255),f,b
 16451  005D6C  0101               	movlb	1	; () banked
 16452  005D6E  2B10               	incf	___altoft@exp& (0+255),f,b
 16453  005D70                     l10720:
 16454                           
 16455                           ; BSR set to: 1
 16456  005D70  0E00               	movlw	0
 16457  005D72  0101               	movlb	1	; () banked
 16458  005D74  1508               	andwf	___altoft@c& (0+255),w,b
 16459  005D76  0101               	movlb	1	; () banked
 16460  005D78  6F0C               	movwf	??___altoft& (0+255),b
 16461  005D7A  0E00               	movlw	0
 16462  005D7C  0101               	movlb	1	; () banked
 16463  005D7E  1509               	andwf	(___altoft@c+1)& (0+255),w,b
 16464  005D80  0101               	movlb	1	; () banked
 16465  005D82  6F0D               	movwf	(??___altoft+1)& (0+255),b
 16466  005D84  0E00               	movlw	0
 16467  005D86  0101               	movlb	1	; () banked
 16468  005D88  150A               	andwf	(___altoft@c+2)& (0+255),w,b
 16469  005D8A  0101               	movlb	1	; () banked
 16470  005D8C  6F0E               	movwf	(??___altoft+2)& (0+255),b
 16471  005D8E  0EFF               	movlw	255
 16472  005D90  0101               	movlb	1	; () banked
 16473  005D92  150B               	andwf	(___altoft@c+3)& (0+255),w,b
 16474  005D94  0101               	movlb	1	; () banked
 16475  005D96  6F0F               	movwf	(??___altoft+3)& (0+255),b
 16476  005D98  0101               	movlb	1	; () banked
 16477  005D9A  510C               	movf	??___altoft& (0+255),w,b
 16478  005D9C  0101               	movlb	1	; () banked
 16479  005D9E  110D               	iorwf	(??___altoft+1)& (0+255),w,b
 16480  005DA0  0101               	movlb	1	; () banked
 16481  005DA2  110E               	iorwf	(??___altoft+2)& (0+255),w,b
 16482  005DA4  0101               	movlb	1	; () banked
 16483  005DA6  110F               	iorwf	(??___altoft+3)& (0+255),w,b
 16484  005DA8  A4D8               	btfss	status,2,c
 16485  005DAA  D7DA               	goto	l10718
 16486                           
 16487                           ; BSR set to: 1
 16488                           
 16489                           ; BSR set to: 1
 16490  005DAC  C108  F100         	movff	___altoft@c,___ftpack@arg
 16491  005DB0  C109  F101         	movff	___altoft@c+1,___ftpack@arg+1
 16492  005DB4  C10A  F102         	movff	___altoft@c+2,___ftpack@arg+2
 16493  005DB8  C110  F103         	movff	___altoft@exp,___ftpack@exp
 16494  005DBC  C111  F104         	movff	___altoft@sign,___ftpack@sign
 16495  005DC0  EC69  F025         	call	___ftpack	;wreg free
 16496  005DC4  C100  F108         	movff	?___ftpack,?___altoft
 16497  005DC8  C101  F109         	movff	?___ftpack+1,?___altoft+1
 16498  005DCC  C102  F10A         	movff	?___ftpack+2,?___altoft+2
 16499  005DD0  0012               	return	
 16500  005DD2                     __end_of___altoft:
 16501                           	opt stack 0
 16502                           tblptru	equ	0xFF8
 16503                           tblptrh	equ	0xFF7
 16504                           tblptrl	equ	0xFF6
 16505                           tablat	equ	0xFF5
 16506                           prodh	equ	0xFF4
 16507                           prodl	equ	0xFF3
 16508                           intcon	equ	0xFF2
 16509                           postinc0	equ	0xFEE
 16510                           wreg	equ	0xFE8
 16511                           postdec1	equ	0xFE5
 16512                           fsr1l	equ	0xFE1
 16513                           indf2	equ	0xFDF
 16514                           postinc2	equ	0xFDE
 16515                           postdec2	equ	0xFDD
 16516                           plusw2	equ	0xFDB
 16517                           fsr2h	equ	0xFDA
 16518                           fsr2l	equ	0xFD9
 16519                           status	equ	0xFD8
 16520                           
 16521 ;; *************** function _desintegrator *****************
 16522 ;; Defined at:
 16523 ;;		line 46 in file "source/DisplayProtocol.h"
 16524 ;; Parameters:    Size  Location     Type
 16525 ;;		None
 16526 ;; Auto vars:     Size  Location     Type
 16527 ;;  temp2           4   70[BANK1 ] long 
 16528 ;;  temp3           4   66[BANK1 ] long 
 16529 ;;  tempL           4   62[BANK1 ] long 
 16530 ;;  temp            3   59[BANK1 ] float 
 16531 ;;  i               2   74[BANK1 ] int 
 16532 ;; Return value:  Size  Location     Type
 16533 ;;                  1    wreg      void 
 16534 ;; Registers used:
 16535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16536 ;; Tracked objects:
 16537 ;;		On entry : 0/0
 16538 ;;		On exit  : 0/0
 16539 ;;		Unchanged: 0/0
 16540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16541 ;;      Params:         0       0       0       0       0       0       0
 16542 ;;      Locals:         0       0      17       0       0       0       0
 16543 ;;      Temps:          0       0       2       0       0       0       0
 16544 ;;      Totals:         0       0      19       0       0       0       0
 16545 ;;Total ram usage:       19 bytes
 16546 ;; Hardware stack levels used:    1
 16547 ;; Hardware stack levels required when called:   14
 16548 ;; This function calls:
 16549 ;;		___aldiv
 16550 ;;		___ftmul
 16551 ;;		___fttol
 16552 ;;		___lmul
 16553 ;; This function is called by:
 16554 ;;		_pressENTER
 16555 ;;		_longPressENTER
 16556 ;; This function uses a non-reentrant model
 16557 ;;
 16558                           
 16559                           	psect	text65
 16560  0033CC                     __ptext65:
 16561                           	opt stack 0
 16562  0033CC                     _desintegrator:
 16563                           	opt stack 14
 16564                           
 16565                           ;DisplayProtocol.h: 47: chanValSection = 5;
 16566                           
 16567                           ;incstack = 0
 16568  0033CC  0E05               	movlw	5
 16569  0033CE  0101               	movlb	1	; () banked
 16570  0033D0  6F9B               	movwf	_chanValSection& (0+255),b
 16571                           
 16572                           ; BSR set to: 1
 16573                           ;DisplayProtocol.h: 48: float temp = (float)chanValf*1000;
 16574  0033D2  C1B1  F114         	movff	_chanValf,___ftmul@f1
 16575  0033D6  C1B2  F115         	movff	_chanValf+1,___ftmul@f1+1
 16576  0033DA  C1B3  F116         	movff	_chanValf+2,___ftmul@f1+2
 16577  0033DE  0E00               	movlw	0
 16578  0033E0  0101               	movlb	1	; () banked
 16579  0033E2  6F17               	movwf	___ftmul@f2& (0+255),b
 16580  0033E4  0E7A               	movlw	122
 16581  0033E6  0101               	movlb	1	; () banked
 16582  0033E8  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 16583  0033EA  0E44               	movlw	68
 16584  0033EC  0101               	movlb	1	; () banked
 16585  0033EE  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 16586  0033F0  EC1F  F01D         	call	___ftmul	;wreg free
 16587  0033F4  C114  F13B         	movff	?___ftmul,desintegrator@temp
 16588  0033F8  C115  F13C         	movff	?___ftmul+1,desintegrator@temp+1
 16589  0033FC  C116  F13D         	movff	?___ftmul+2,desintegrator@temp+2
 16590                           
 16591                           ;DisplayProtocol.h: 49: long tempL = (long)temp;
 16592  003400  C13B  F12A         	movff	desintegrator@temp,___fttol@f1
 16593  003404  C13C  F12B         	movff	desintegrator@temp+1,___fttol@f1+1
 16594  003408  C13D  F12C         	movff	desintegrator@temp+2,___fttol@f1+2
 16595  00340C  ECC9  F01F         	call	___fttol	;wreg free
 16596  003410  C12A  F13E         	movff	?___fttol,desintegrator@tempL
 16597  003414  C12B  F13F         	movff	?___fttol+1,desintegrator@tempL+1
 16598  003418  C12C  F140         	movff	?___fttol+2,desintegrator@tempL+2
 16599  00341C  C12D  F141         	movff	?___fttol+3,desintegrator@tempL+3
 16600                           
 16601                           ;DisplayProtocol.h: 50: long temp2 = 0;
 16602  003420  0E00               	movlw	0
 16603  003422  0101               	movlb	1	; () banked
 16604  003424  6F46               	movwf	desintegrator@temp2& (0+255),b
 16605  003426  0E00               	movlw	0
 16606  003428  6F47               	movwf	(desintegrator@temp2+1)& (0+255),b
 16607  00342A  0E00               	movlw	0
 16608  00342C  6F48               	movwf	(desintegrator@temp2+2)& (0+255),b
 16609  00342E  0E00               	movlw	0
 16610  003430  6F49               	movwf	(desintegrator@temp2+3)& (0+255),b
 16611                           
 16612                           ;DisplayProtocol.h: 51: long temp3 = 0;
 16613  003432  0E00               	movlw	0
 16614  003434  0101               	movlb	1	; () banked
 16615  003436  6F42               	movwf	desintegrator@temp3& (0+255),b
 16616  003438  0E00               	movlw	0
 16617  00343A  6F43               	movwf	(desintegrator@temp3+1)& (0+255),b
 16618  00343C  0E00               	movlw	0
 16619  00343E  6F44               	movwf	(desintegrator@temp3+2)& (0+255),b
 16620  003440  0E00               	movlw	0
 16621  003442  6F45               	movwf	(desintegrator@temp3+3)& (0+255),b
 16622                           
 16623                           ;DisplayProtocol.h: 52: int i;
 16624                           ;DisplayProtocol.h: 53: for(i = 0; i < 6; i++) {
 16625  003444  0E00               	movlw	0
 16626  003446  0101               	movlb	1	; () banked
 16627  003448  6F4B               	movwf	(desintegrator@i+1)& (0+255),b
 16628  00344A  0E00               	movlw	0
 16629  00344C  6F4A               	movwf	desintegrator@i& (0+255),b
 16630                           
 16631                           ; BSR set to: 1
 16632  00344E  0101               	movlb	1	; () banked
 16633  003450  BF4B               	btfsc	(desintegrator@i+1)& (0+255),7,b
 16634  003452  D00A               	goto	l10820
 16635  003454  0101               	movlb	1	; () banked
 16636  003456  514B               	movf	(desintegrator@i+1)& (0+255),w,b
 16637  003458  E106               	bnz	u15980
 16638  00345A  0E06               	movlw	6
 16639  00345C  0101               	movlb	1	; () banked
 16640  00345E  5D4A               	subwf	desintegrator@i& (0+255),w,b
 16641  003460  B0D8               	btfsc	status,0,c
 16642  003462  0012               	return	
 16643  003464  D001               	goto	l10820
 16644  003466                     u15980:
 16645                           
 16646                           ; BSR set to: 1
 16647  003466  0012               	return	
 16648  003468                     l10820:
 16649                           
 16650                           ; BSR set to: 1
 16651                           ;DisplayProtocol.h: 54: temp2 = tempL/exp10[i];
 16652  003468  C13E  F100         	movff	desintegrator@tempL,___aldiv@dividend
 16653  00346C  C13F  F101         	movff	desintegrator@tempL+1,___aldiv@dividend+1
 16654  003470  C140  F102         	movff	desintegrator@tempL+2,___aldiv@dividend+2
 16655  003474  C141  F103         	movff	desintegrator@tempL+3,___aldiv@dividend+3
 16656  003478  0E77               	movlw	low _exp10
 16657  00347A  0101               	movlb	1	; () banked
 16658  00347C  6F39               	movwf	??_desintegrator& (0+255),b
 16659  00347E  0E01               	movlw	high _exp10
 16660  003480  0101               	movlb	1	; () banked
 16661  003482  6F3A               	movwf	(??_desintegrator+1)& (0+255),b
 16662  003484  90D8               	bcf	status,0,c
 16663  003486  0101               	movlb	1	; () banked
 16664  003488  354A               	rlcf	desintegrator@i& (0+255),w,b
 16665  00348A  6ED9               	movwf	fsr2l,c
 16666  00348C  0101               	movlb	1	; () banked
 16667  00348E  354B               	rlcf	(desintegrator@i+1)& (0+255),w,b
 16668  003490  6EDA               	movwf	fsr2h,c
 16669  003492  90D8               	bcf	status,0,c
 16670  003494  36D9               	rlcf	fsr2l,f,c
 16671  003496  36DA               	rlcf	fsr2h,f,c
 16672  003498  0101               	movlb	1	; () banked
 16673  00349A  5139               	movf	??_desintegrator& (0+255),w,b
 16674  00349C  26D9               	addwf	fsr2l,f,c
 16675  00349E  0101               	movlb	1	; () banked
 16676  0034A0  513A               	movf	(??_desintegrator+1)& (0+255),w,b
 16677  0034A2  22DA               	addwfc	fsr2h,f,c
 16678  0034A4  CFDE F104          	movff	postinc2,___aldiv@divisor
 16679  0034A8  CFDE F105          	movff	postinc2,___aldiv@divisor+1
 16680  0034AC  CFDE F106          	movff	postinc2,___aldiv@divisor+2
 16681  0034B0  CFDE F107          	movff	postinc2,___aldiv@divisor+3
 16682  0034B4  EC2F  F022         	call	___aldiv	;wreg free
 16683  0034B8  C100  F146         	movff	?___aldiv,desintegrator@temp2
 16684  0034BC  C101  F147         	movff	?___aldiv+1,desintegrator@temp2+1
 16685  0034C0  C102  F148         	movff	?___aldiv+2,desintegrator@temp2+2
 16686  0034C4  C103  F149         	movff	?___aldiv+3,desintegrator@temp2+3
 16687                           
 16688                           ;DisplayProtocol.h: 55: temp3 = temp2*exp10[i];
 16689  0034C8  0E77               	movlw	low _exp10
 16690  0034CA  0101               	movlb	1	; () banked
 16691  0034CC  6F39               	movwf	??_desintegrator& (0+255),b
 16692  0034CE  0E01               	movlw	high _exp10
 16693  0034D0  0101               	movlb	1	; () banked
 16694  0034D2  6F3A               	movwf	(??_desintegrator+1)& (0+255),b
 16695  0034D4  90D8               	bcf	status,0,c
 16696  0034D6  0101               	movlb	1	; () banked
 16697  0034D8  354A               	rlcf	desintegrator@i& (0+255),w,b
 16698  0034DA  6ED9               	movwf	fsr2l,c
 16699  0034DC  0101               	movlb	1	; () banked
 16700  0034DE  354B               	rlcf	(desintegrator@i+1)& (0+255),w,b
 16701  0034E0  6EDA               	movwf	fsr2h,c
 16702  0034E2  90D8               	bcf	status,0,c
 16703  0034E4  36D9               	rlcf	fsr2l,f,c
 16704  0034E6  36DA               	rlcf	fsr2h,f,c
 16705  0034E8  0101               	movlb	1	; () banked
 16706  0034EA  5139               	movf	??_desintegrator& (0+255),w,b
 16707  0034EC  26D9               	addwf	fsr2l,f,c
 16708  0034EE  0101               	movlb	1	; () banked
 16709  0034F0  513A               	movf	(??_desintegrator+1)& (0+255),w,b
 16710  0034F2  22DA               	addwfc	fsr2h,f,c
 16711  0034F4  CFDE F100          	movff	postinc2,___lmul@multiplier
 16712  0034F8  CFDE F101          	movff	postinc2,___lmul@multiplier+1
 16713  0034FC  CFDE F102          	movff	postinc2,___lmul@multiplier+2
 16714  003500  CFDE F103          	movff	postinc2,___lmul@multiplier+3
 16715  003504  C146  F104         	movff	desintegrator@temp2,___lmul@multiplicand
 16716  003508  C147  F105         	movff	desintegrator@temp2+1,___lmul@multiplicand+1
 16717  00350C  C148  F106         	movff	desintegrator@temp2+2,___lmul@multiplicand+2
 16718  003510  C149  F107         	movff	desintegrator@temp2+3,___lmul@multiplicand+3
 16719  003514  EC04  F034         	call	___lmul	;wreg free
 16720  003518  C100  F142         	movff	?___lmul,desintegrator@temp3
 16721  00351C  C101  F143         	movff	?___lmul+1,desintegrator@temp3+1
 16722  003520  C102  F144         	movff	?___lmul+2,desintegrator@temp3+2
 16723  003524  C103  F145         	movff	?___lmul+3,desintegrator@temp3+3
 16724                           
 16725                           ;DisplayProtocol.h: 56: chanValdig[i] = temp2;
 16726  003528  0EA3               	movlw	low _chanValdig
 16727  00352A  0101               	movlb	1	; () banked
 16728  00352C  254A               	addwf	desintegrator@i& (0+255),w,b
 16729  00352E  6ED9               	movwf	fsr2l,c
 16730  003530  0E01               	movlw	high _chanValdig
 16731  003532  0101               	movlb	1	; () banked
 16732  003534  214B               	addwfc	(desintegrator@i+1)& (0+255),w,b
 16733  003536  6EDA               	movwf	fsr2h,c
 16734  003538  C146  FFDF         	movff	desintegrator@temp2,indf2
 16735                           
 16736                           ; BSR set to: 1
 16737                           ;DisplayProtocol.h: 57: tempL -= temp3;
 16738  00353C  0101               	movlb	1	; () banked
 16739  00353E  5142               	movf	desintegrator@temp3& (0+255),w,b
 16740  003540  0101               	movlb	1	; () banked
 16741  003542  5F3E               	subwf	desintegrator@tempL& (0+255),f,b
 16742  003544  0101               	movlb	1	; () banked
 16743  003546  5143               	movf	(desintegrator@temp3+1)& (0+255),w,b
 16744  003548  0101               	movlb	1	; () banked
 16745  00354A  5B3F               	subwfb	(desintegrator@tempL+1)& (0+255),f,b
 16746  00354C  0101               	movlb	1	; () banked
 16747  00354E  5144               	movf	(desintegrator@temp3+2)& (0+255),w,b
 16748  003550  0101               	movlb	1	; () banked
 16749  003552  5B40               	subwfb	(desintegrator@tempL+2)& (0+255),f,b
 16750  003554  0101               	movlb	1	; () banked
 16751  003556  5145               	movf	(desintegrator@temp3+3)& (0+255),w,b
 16752  003558  0101               	movlb	1	; () banked
 16753  00355A  5B41               	subwfb	(desintegrator@tempL+3)& (0+255),f,b
 16754                           
 16755                           ; BSR set to: 1
 16756  00355C  0101               	movlb	1	; () banked
 16757  00355E  4B4A               	infsnz	desintegrator@i& (0+255),f,b
 16758  003560  2B4B               	incf	(desintegrator@i+1)& (0+255),f,b
 16759                           
 16760                           ; BSR set to: 1
 16761  003562  0101               	movlb	1	; () banked
 16762  003564  BF4B               	btfsc	(desintegrator@i+1)& (0+255),7,b
 16763  003566  D780               	goto	l10820
 16764  003568  0101               	movlb	1	; () banked
 16765  00356A  514B               	movf	(desintegrator@i+1)& (0+255),w,b
 16766  00356C  E101               	bnz	l559
 16767  00356E  D775               	goto	L6
 16768  003570                     l559:
 16769                           
 16770                           ; BSR set to: 1
 16771  003570  0012               	return		;funcret
 16772  003572                     __end_of_desintegrator:
 16773                           	opt stack 0
 16774                           tblptru	equ	0xFF8
 16775                           tblptrh	equ	0xFF7
 16776                           tblptrl	equ	0xFF6
 16777                           tablat	equ	0xFF5
 16778                           prodh	equ	0xFF4
 16779                           prodl	equ	0xFF3
 16780                           intcon	equ	0xFF2
 16781                           postinc0	equ	0xFEE
 16782                           wreg	equ	0xFE8
 16783                           postdec1	equ	0xFE5
 16784                           fsr1l	equ	0xFE1
 16785                           indf2	equ	0xFDF
 16786                           postinc2	equ	0xFDE
 16787                           postdec2	equ	0xFDD
 16788                           plusw2	equ	0xFDB
 16789                           fsr2h	equ	0xFDA
 16790                           fsr2l	equ	0xFD9
 16791                           status	equ	0xFD8
 16792                           
 16793 ;; *************** function ___lmul *****************
 16794 ;; Defined at:
 16795 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
 16796 ;; Parameters:    Size  Location     Type
 16797 ;;  multiplier      4    0[BANK1 ] unsigned long 
 16798 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 16799 ;; Auto vars:     Size  Location     Type
 16800 ;;  product         4    8[BANK1 ] unsigned long 
 16801 ;; Return value:  Size  Location     Type
 16802 ;;                  4    0[BANK1 ] unsigned long 
 16803 ;; Registers used:
 16804 ;;		wreg, status,2, status,0
 16805 ;; Tracked objects:
 16806 ;;		On entry : 0/0
 16807 ;;		On exit  : 0/0
 16808 ;;		Unchanged: 0/0
 16809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16810 ;;      Params:         0       0       8       0       0       0       0
 16811 ;;      Locals:         0       0       4       0       0       0       0
 16812 ;;      Temps:          0       0       0       0       0       0       0
 16813 ;;      Totals:         0       0      12       0       0       0       0
 16814 ;;Total ram usage:       12 bytes
 16815 ;; Hardware stack levels used:    1
 16816 ;; Hardware stack levels required when called:   12
 16817 ;; This function calls:
 16818 ;;		Nothing
 16819 ;; This function is called by:
 16820 ;;		_desintegrator
 16821 ;;		_integrator
 16822 ;; This function uses a non-reentrant model
 16823 ;;
 16824                           
 16825                           	psect	text66
 16826  006808                     __ptext66:
 16827                           	opt stack 0
 16828  006808                     ___lmul:
 16829                           	opt stack 15
 16830                           
 16831                           ; BSR set to: 1
 16832                           ;incstack = 0
 16833  006808  0E00               	movlw	0
 16834  00680A  0101               	movlb	1	; () banked
 16835  00680C  6F08               	movwf	___lmul@product& (0+255),b
 16836  00680E  0E00               	movlw	0
 16837  006810  6F09               	movwf	(___lmul@product+1)& (0+255),b
 16838  006812  0E00               	movlw	0
 16839  006814  6F0A               	movwf	(___lmul@product+2)& (0+255),b
 16840  006816  0E00               	movlw	0
 16841  006818  6F0B               	movwf	(___lmul@product+3)& (0+255),b
 16842  00681A                     l10658:
 16843                           
 16844                           ; BSR set to: 1
 16845  00681A  0101               	movlb	1	; () banked
 16846  00681C  A100               	btfss	___lmul@multiplier& (0+255),0,b
 16847  00681E  D010               	goto	l10662
 16848                           
 16849                           ; BSR set to: 1
 16850  006820  0101               	movlb	1	; () banked
 16851  006822  5104               	movf	___lmul@multiplicand& (0+255),w,b
 16852  006824  0101               	movlb	1	; () banked
 16853  006826  2708               	addwf	___lmul@product& (0+255),f,b
 16854  006828  0101               	movlb	1	; () banked
 16855  00682A  5105               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 16856  00682C  0101               	movlb	1	; () banked
 16857  00682E  2309               	addwfc	(___lmul@product+1)& (0+255),f,b
 16858  006830  0101               	movlb	1	; () banked
 16859  006832  5106               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 16860  006834  0101               	movlb	1	; () banked
 16861  006836  230A               	addwfc	(___lmul@product+2)& (0+255),f,b
 16862  006838  0101               	movlb	1	; () banked
 16863  00683A  5107               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 16864  00683C  0101               	movlb	1	; () banked
 16865  00683E  230B               	addwfc	(___lmul@product+3)& (0+255),f,b
 16866  006840                     l10662:
 16867                           
 16868                           ; BSR set to: 1
 16869  006840  0101               	movlb	1	; () banked
 16870  006842  90D8               	bcf	status,0,c
 16871  006844  3704               	rlcf	___lmul@multiplicand& (0+255),f,b
 16872  006846  3705               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 16873  006848  3706               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 16874  00684A  3707               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 16875                           
 16876                           ; BSR set to: 1
 16877  00684C  0101               	movlb	1	; () banked
 16878  00684E  90D8               	bcf	status,0,c
 16879  006850  3303               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 16880  006852  3302               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 16881  006854  3301               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 16882  006856  3300               	rrcf	___lmul@multiplier& (0+255),f,b
 16883  006858  0101               	movlb	1	; () banked
 16884  00685A  5100               	movf	___lmul@multiplier& (0+255),w,b
 16885  00685C  0101               	movlb	1	; () banked
 16886  00685E  1101               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 16887  006860  0101               	movlb	1	; () banked
 16888  006862  1102               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 16889  006864  0101               	movlb	1	; () banked
 16890  006866  1103               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 16891  006868  A4D8               	btfss	status,2,c
 16892  00686A  D7D7               	goto	l10658
 16893                           
 16894                           ; BSR set to: 1
 16895  00686C  C108  F100         	movff	___lmul@product,?___lmul
 16896  006870  C109  F101         	movff	___lmul@product+1,?___lmul+1
 16897  006874  C10A  F102         	movff	___lmul@product+2,?___lmul+2
 16898  006878  C10B  F103         	movff	___lmul@product+3,?___lmul+3
 16899                           
 16900                           ; BSR set to: 1
 16901  00687C  0012               	return		;funcret
 16902  00687E                     __end_of___lmul:
 16903                           	opt stack 0
 16904                           tblptru	equ	0xFF8
 16905                           tblptrh	equ	0xFF7
 16906                           tblptrl	equ	0xFF6
 16907                           tablat	equ	0xFF5
 16908                           prodh	equ	0xFF4
 16909                           prodl	equ	0xFF3
 16910                           intcon	equ	0xFF2
 16911                           postinc0	equ	0xFEE
 16912                           wreg	equ	0xFE8
 16913                           postdec1	equ	0xFE5
 16914                           fsr1l	equ	0xFE1
 16915                           indf2	equ	0xFDF
 16916                           postinc2	equ	0xFDE
 16917                           postdec2	equ	0xFDD
 16918                           plusw2	equ	0xFDB
 16919                           fsr2h	equ	0xFDA
 16920                           fsr2l	equ	0xFD9
 16921                           status	equ	0xFD8
 16922                           
 16923 ;; *************** function ___fttol *****************
 16924 ;; Defined at:
 16925 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 16926 ;; Parameters:    Size  Location     Type
 16927 ;;  f1              3   42[BANK1 ] float 
 16928 ;; Auto vars:     Size  Location     Type
 16929 ;;  lval            4   52[BANK1 ] unsigned long 
 16930 ;;  exp1            1   56[BANK1 ] unsigned char 
 16931 ;;  sign1           1   51[BANK1 ] unsigned char 
 16932 ;; Return value:  Size  Location     Type
 16933 ;;                  4   42[BANK1 ] long 
 16934 ;; Registers used:
 16935 ;;		wreg, status,2, status,0
 16936 ;; Tracked objects:
 16937 ;;		On entry : 0/0
 16938 ;;		On exit  : 0/0
 16939 ;;		Unchanged: 0/0
 16940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16941 ;;      Params:         0       0       4       0       0       0       0
 16942 ;;      Locals:         0       0       6       0       0       0       0
 16943 ;;      Temps:          0       0       5       0       0       0       0
 16944 ;;      Totals:         0       0      15       0       0       0       0
 16945 ;;Total ram usage:       15 bytes
 16946 ;; Hardware stack levels used:    1
 16947 ;; Hardware stack levels required when called:   12
 16948 ;; This function calls:
 16949 ;;		Nothing
 16950 ;; This function is called by:
 16951 ;;		_desintegrator
 16952 ;;		_printf
 16953 ;; This function uses a non-reentrant model
 16954 ;;
 16955                           
 16956                           	psect	text67
 16957  003F92                     __ptext67:
 16958                           	opt stack 0
 16959  003F92                     ___fttol:
 16960                           	opt stack 15
 16961                           
 16962                           ; BSR set to: 1
 16963                           ;incstack = 0
 16964  003F92  C12C  F12E         	movff	___fttol@f1+2,??___fttol
 16965  003F96  0101               	movlb	1	; () banked
 16966  003F98  6B2F               	clrf	(??___fttol+1)& (0+255),b
 16967  003F9A  6B30               	clrf	(??___fttol+2)& (0+255),b
 16968  003F9C  0101               	movlb	1	; () banked
 16969  003F9E  352B               	rlcf	(___fttol@f1+1)& (0+255),w,b
 16970  003FA0  0101               	movlb	1	; () banked
 16971  003FA2  372E               	rlcf	??___fttol& (0+255),f,b
 16972  003FA4  E301               	bnc	u8221
 16973  003FA6  812F               	bsf	(??___fttol+1)& (0+255),0,b
 16974  003FA8                     u8221:
 16975  003FA8  0101               	movlb	1	; () banked
 16976  003FAA  512E               	movf	??___fttol& (0+255),w,b
 16977  003FAC  0101               	movlb	1	; () banked
 16978  003FAE  6F38               	movwf	___fttol@exp1& (0+255),b
 16979  003FB0  0101               	movlb	1	; () banked
 16980  003FB2  5138               	movf	___fttol@exp1& (0+255),w,b
 16981  003FB4  A4D8               	btfss	status,2,c
 16982  003FB6  D00A               	goto	l6482
 16983                           
 16984                           ; BSR set to: 1
 16985  003FB8  0E00               	movlw	0
 16986  003FBA  0101               	movlb	1	; () banked
 16987  003FBC  6F2A               	movwf	?___fttol& (0+255),b
 16988  003FBE  0E00               	movlw	0
 16989  003FC0  6F2B               	movwf	(?___fttol+1)& (0+255),b
 16990  003FC2  0E00               	movlw	0
 16991  003FC4  6F2C               	movwf	(?___fttol+2)& (0+255),b
 16992  003FC6  0E00               	movlw	0
 16993  003FC8  6F2D               	movwf	(?___fttol+3)& (0+255),b
 16994                           
 16995                           ; BSR set to: 1
 16996  003FCA  0012               	return	
 16997  003FCC                     l6482:
 16998                           
 16999                           ; BSR set to: 1
 17000  003FCC  0E17               	movlw	23
 17001  003FCE  0101               	movlb	1	; () banked
 17002  003FD0  6F2E               	movwf	??___fttol& (0+255),b
 17003  003FD2  C12A  F12F         	movff	___fttol@f1,??___fttol+1
 17004  003FD6  C12B  F130         	movff	___fttol@f1+1,??___fttol+2
 17005  003FDA  C12C  F131         	movff	___fttol@f1+2,??___fttol+3
 17006  003FDE  0101               	movlb	1	; () banked
 17007  003FE0  292E               	incf	??___fttol& (0+255),w,b
 17008  003FE2  0101               	movlb	1	; () banked
 17009  003FE4  6F32               	movwf	(??___fttol+4)& (0+255),b
 17010  003FE6  D005               	goto	u8240
 17011  003FE8                     u8245:
 17012  003FE8  0101               	movlb	1	; () banked
 17013  003FEA  90D8               	bcf	status,0,c
 17014  003FEC  3331               	rrcf	(??___fttol+3)& (0+255),f,b
 17015  003FEE  3330               	rrcf	(??___fttol+2)& (0+255),f,b
 17016  003FF0  332F               	rrcf	(??___fttol+1)& (0+255),f,b
 17017  003FF2                     u8240:
 17018  003FF2  0101               	movlb	1	; () banked
 17019  003FF4  2F32               	decfsz	(??___fttol+4)& (0+255),f,b
 17020  003FF6  D7F8               	goto	u8245
 17021  003FF8  0101               	movlb	1	; () banked
 17022  003FFA  512F               	movf	(??___fttol+1)& (0+255),w,b
 17023  003FFC  0101               	movlb	1	; () banked
 17024  003FFE  6F33               	movwf	___fttol@sign1& (0+255),b
 17025                           
 17026                           ; BSR set to: 1
 17027  004000  0101               	movlb	1	; () banked
 17028  004002  8F2B               	bsf	(___fttol@f1+1)& (0+255),7,b
 17029                           
 17030                           ; BSR set to: 1
 17031  004004  0EFF               	movlw	255
 17032  004006  0101               	movlb	1	; () banked
 17033  004008  172A               	andwf	___fttol@f1& (0+255),f,b
 17034  00400A  0EFF               	movlw	255
 17035  00400C  0101               	movlb	1	; () banked
 17036  00400E  172B               	andwf	(___fttol@f1+1)& (0+255),f,b
 17037  004010  0E00               	movlw	0
 17038  004012  0101               	movlb	1	; () banked
 17039  004014  172C               	andwf	(___fttol@f1+2)& (0+255),f,b
 17040                           
 17041                           ; BSR set to: 1
 17042  004016  0101               	movlb	1	; () banked
 17043  004018  512A               	movf	___fttol@f1& (0+255),w,b
 17044  00401A  0101               	movlb	1	; () banked
 17045  00401C  6F34               	movwf	___fttol@lval& (0+255),b
 17046  00401E  0101               	movlb	1	; () banked
 17047  004020  512B               	movf	(___fttol@f1+1)& (0+255),w,b
 17048  004022  0101               	movlb	1	; () banked
 17049  004024  6F35               	movwf	(___fttol@lval+1)& (0+255),b
 17050  004026  0101               	movlb	1	; () banked
 17051  004028  512C               	movf	(___fttol@f1+2)& (0+255),w,b
 17052  00402A  0101               	movlb	1	; () banked
 17053  00402C  6F36               	movwf	(___fttol@lval+2)& (0+255),b
 17054  00402E  0101               	movlb	1	; () banked
 17055  004030  6B37               	clrf	(___fttol@lval+3)& (0+255),b
 17056                           
 17057                           ; BSR set to: 1
 17058  004032  0E8E               	movlw	142
 17059  004034  0101               	movlb	1	; () banked
 17060  004036  5F38               	subwf	___fttol@exp1& (0+255),f,b
 17061                           
 17062                           ; BSR set to: 1
 17063  004038  0101               	movlb	1	; () banked
 17064  00403A  AF38               	btfss	___fttol@exp1& (0+255),7,b
 17065  00403C  D01A               	goto	l6504
 17066                           
 17067                           ; BSR set to: 1
 17068  00403E  0101               	movlb	1	; () banked
 17069  004040  5138               	movf	___fttol@exp1& (0+255),w,b
 17070  004042  0A80               	xorlw	128
 17071  004044  0F8F               	addlw	143
 17072  004046  B0D8               	btfsc	status,0,c
 17073  004048  D00A               	goto	l6500
 17074                           
 17075                           ; BSR set to: 1
 17076  00404A  0E00               	movlw	0
 17077  00404C  0101               	movlb	1	; () banked
 17078  00404E  6F2A               	movwf	?___fttol& (0+255),b
 17079  004050  0E00               	movlw	0
 17080  004052  6F2B               	movwf	(?___fttol+1)& (0+255),b
 17081  004054  0E00               	movlw	0
 17082  004056  6F2C               	movwf	(?___fttol+2)& (0+255),b
 17083  004058  0E00               	movlw	0
 17084  00405A  6F2D               	movwf	(?___fttol+3)& (0+255),b
 17085                           
 17086                           ; BSR set to: 1
 17087  00405C  0012               	return	
 17088  00405E                     l6500:
 17089                           
 17090                           ; BSR set to: 1
 17091  00405E  0101               	movlb	1	; () banked
 17092  004060  90D8               	bcf	status,0,c
 17093  004062  3337               	rrcf	(___fttol@lval+3)& (0+255),f,b
 17094  004064  3336               	rrcf	(___fttol@lval+2)& (0+255),f,b
 17095  004066  3335               	rrcf	(___fttol@lval+1)& (0+255),f,b
 17096  004068  3334               	rrcf	___fttol@lval& (0+255),f,b
 17097                           
 17098                           ; BSR set to: 1
 17099  00406A  0101               	movlb	1	; () banked
 17100  00406C  3F38               	incfsz	___fttol@exp1& (0+255),f,b
 17101  00406E  D7F7               	goto	l6500
 17102                           
 17103                           ; BSR set to: 1
 17104  004070  D01B               	goto	l6514
 17105  004072                     l6504:
 17106                           
 17107                           ; BSR set to: 1
 17108  004072  0E17               	movlw	23
 17109  004074  0101               	movlb	1	; () banked
 17110  004076  6538               	cpfsgt	___fttol@exp1& (0+255),b
 17111  004078  D012               	goto	l6512
 17112                           
 17113                           ; BSR set to: 1
 17114  00407A  0E00               	movlw	0
 17115  00407C  0101               	movlb	1	; () banked
 17116  00407E  6F2A               	movwf	?___fttol& (0+255),b
 17117  004080  0E00               	movlw	0
 17118  004082  6F2B               	movwf	(?___fttol+1)& (0+255),b
 17119  004084  0E00               	movlw	0
 17120  004086  6F2C               	movwf	(?___fttol+2)& (0+255),b
 17121  004088  0E00               	movlw	0
 17122  00408A  6F2D               	movwf	(?___fttol+3)& (0+255),b
 17123                           
 17124                           ; BSR set to: 1
 17125  00408C  0012               	return	
 17126  00408E                     l6510:
 17127                           
 17128                           ; BSR set to: 1
 17129  00408E  0101               	movlb	1	; () banked
 17130  004090  90D8               	bcf	status,0,c
 17131  004092  3734               	rlcf	___fttol@lval& (0+255),f,b
 17132  004094  3735               	rlcf	(___fttol@lval+1)& (0+255),f,b
 17133  004096  3736               	rlcf	(___fttol@lval+2)& (0+255),f,b
 17134  004098  3737               	rlcf	(___fttol@lval+3)& (0+255),f,b
 17135  00409A  0101               	movlb	1	; () banked
 17136  00409C  0738               	decf	___fttol@exp1& (0+255),f,b
 17137  00409E                     l6512:
 17138                           
 17139                           ; BSR set to: 1
 17140  00409E  0101               	movlb	1	; () banked
 17141  0040A0  5138               	movf	___fttol@exp1& (0+255),w,b
 17142  0040A2  0101               	movlb	1	; () banked
 17143  0040A4  A4D8               	btfss	status,2,c
 17144  0040A6  D7F3               	goto	l6510
 17145  0040A8                     l6514:
 17146                           
 17147                           ; BSR set to: 1
 17148  0040A8  0101               	movlb	1	; () banked
 17149  0040AA  5133               	movf	___fttol@sign1& (0+255),w,b
 17150  0040AC  0101               	movlb	1	; () banked
 17151  0040AE  B4D8               	btfsc	status,2,c
 17152  0040B0  D009               	goto	l6518
 17153                           
 17154                           ; BSR set to: 1
 17155  0040B2  0101               	movlb	1	; () banked
 17156  0040B4  1F37               	comf	(___fttol@lval+3)& (0+255),f,b
 17157  0040B6  1F36               	comf	(___fttol@lval+2)& (0+255),f,b
 17158  0040B8  1F35               	comf	(___fttol@lval+1)& (0+255),f,b
 17159  0040BA  6D34               	negf	___fttol@lval& (0+255),b
 17160  0040BC  0E00               	movlw	0
 17161  0040BE  2335               	addwfc	(___fttol@lval+1)& (0+255),f,b
 17162  0040C0  2336               	addwfc	(___fttol@lval+2)& (0+255),f,b
 17163  0040C2  2337               	addwfc	(___fttol@lval+3)& (0+255),f,b
 17164  0040C4                     l6518:
 17165                           
 17166                           ; BSR set to: 1
 17167  0040C4  C134  F12A         	movff	___fttol@lval,?___fttol
 17168  0040C8  C135  F12B         	movff	___fttol@lval+1,?___fttol+1
 17169  0040CC  C136  F12C         	movff	___fttol@lval+2,?___fttol+2
 17170  0040D0  C137  F12D         	movff	___fttol@lval+3,?___fttol+3
 17171  0040D4  0012               	return	
 17172  0040D6                     __end_of___fttol:
 17173                           	opt stack 0
 17174                           tblptru	equ	0xFF8
 17175                           tblptrh	equ	0xFF7
 17176                           tblptrl	equ	0xFF6
 17177                           tablat	equ	0xFF5
 17178                           prodh	equ	0xFF4
 17179                           prodl	equ	0xFF3
 17180                           intcon	equ	0xFF2
 17181                           postinc0	equ	0xFEE
 17182                           wreg	equ	0xFE8
 17183                           postdec1	equ	0xFE5
 17184                           fsr1l	equ	0xFE1
 17185                           indf2	equ	0xFDF
 17186                           postinc2	equ	0xFDE
 17187                           postdec2	equ	0xFDD
 17188                           plusw2	equ	0xFDB
 17189                           fsr2h	equ	0xFDA
 17190                           fsr2l	equ	0xFD9
 17191                           status	equ	0xFD8
 17192                           
 17193 ;; *************** function ___aldiv *****************
 17194 ;; Defined at:
 17195 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
 17196 ;; Parameters:    Size  Location     Type
 17197 ;;  dividend        4    0[BANK1 ] long 
 17198 ;;  divisor         4    4[BANK1 ] long 
 17199 ;; Auto vars:     Size  Location     Type
 17200 ;;  quotient        4   10[BANK1 ] long 
 17201 ;;  sign            1    9[BANK1 ] unsigned char 
 17202 ;;  counter         1    8[BANK1 ] unsigned char 
 17203 ;; Return value:  Size  Location     Type
 17204 ;;                  4    0[BANK1 ] long 
 17205 ;; Registers used:
 17206 ;;		wreg, status,2, status,0
 17207 ;; Tracked objects:
 17208 ;;		On entry : 0/0
 17209 ;;		On exit  : 0/0
 17210 ;;		Unchanged: 0/0
 17211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17212 ;;      Params:         0       0       8       0       0       0       0
 17213 ;;      Locals:         0       0       6       0       0       0       0
 17214 ;;      Temps:          0       0       0       0       0       0       0
 17215 ;;      Totals:         0       0      14       0       0       0       0
 17216 ;;Total ram usage:       14 bytes
 17217 ;; Hardware stack levels used:    1
 17218 ;; Hardware stack levels required when called:   12
 17219 ;; This function calls:
 17220 ;;		Nothing
 17221 ;; This function is called by:
 17222 ;;		_desintegrator
 17223 ;; This function uses a non-reentrant model
 17224 ;;
 17225                           
 17226                           	psect	text68
 17227  00445E                     __ptext68:
 17228                           	opt stack 0
 17229  00445E                     ___aldiv:
 17230                           	opt stack 15
 17231                           
 17232                           ; BSR set to: 1
 17233                           ;incstack = 0
 17234  00445E  0E00               	movlw	0
 17235  004460  0101               	movlb	1	; () banked
 17236  004462  6F09               	movwf	___aldiv@sign& (0+255),b
 17237                           
 17238                           ; BSR set to: 1
 17239  004464  0101               	movlb	1	; () banked
 17240  004466  AF07               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 17241  004468  D00C               	goto	l10674
 17242                           
 17243                           ; BSR set to: 1
 17244  00446A  0101               	movlb	1	; () banked
 17245  00446C  1F07               	comf	(___aldiv@divisor+3)& (0+255),f,b
 17246  00446E  1F06               	comf	(___aldiv@divisor+2)& (0+255),f,b
 17247  004470  1F05               	comf	(___aldiv@divisor+1)& (0+255),f,b
 17248  004472  6D04               	negf	___aldiv@divisor& (0+255),b
 17249  004474  0E00               	movlw	0
 17250  004476  2305               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 17251  004478  2306               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 17252  00447A  2307               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 17253                           
 17254                           ; BSR set to: 1
 17255  00447C  0E01               	movlw	1
 17256  00447E  0101               	movlb	1	; () banked
 17257  004480  6F09               	movwf	___aldiv@sign& (0+255),b
 17258  004482                     l10674:
 17259                           
 17260                           ; BSR set to: 1
 17261  004482  0101               	movlb	1	; () banked
 17262  004484  AF03               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 17263  004486  D00C               	goto	l10680
 17264                           
 17265                           ; BSR set to: 1
 17266  004488  0101               	movlb	1	; () banked
 17267  00448A  1F03               	comf	(___aldiv@dividend+3)& (0+255),f,b
 17268  00448C  1F02               	comf	(___aldiv@dividend+2)& (0+255),f,b
 17269  00448E  1F01               	comf	(___aldiv@dividend+1)& (0+255),f,b
 17270  004490  6D00               	negf	___aldiv@dividend& (0+255),b
 17271  004492  0E00               	movlw	0
 17272  004494  2301               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 17273  004496  2302               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 17274  004498  2303               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 17275                           
 17276                           ; BSR set to: 1
 17277  00449A  0E01               	movlw	1
 17278  00449C  0101               	movlb	1	; () banked
 17279  00449E  1B09               	xorwf	___aldiv@sign& (0+255),f,b
 17280  0044A0                     l10680:
 17281                           
 17282                           ; BSR set to: 1
 17283  0044A0  0E00               	movlw	0
 17284  0044A2  0101               	movlb	1	; () banked
 17285  0044A4  6F0A               	movwf	___aldiv@quotient& (0+255),b
 17286  0044A6  0E00               	movlw	0
 17287  0044A8  6F0B               	movwf	(___aldiv@quotient+1)& (0+255),b
 17288  0044AA  0E00               	movlw	0
 17289  0044AC  6F0C               	movwf	(___aldiv@quotient+2)& (0+255),b
 17290  0044AE  0E00               	movlw	0
 17291  0044B0  6F0D               	movwf	(___aldiv@quotient+3)& (0+255),b
 17292                           
 17293                           ; BSR set to: 1
 17294  0044B2  0101               	movlb	1	; () banked
 17295  0044B4  5104               	movf	___aldiv@divisor& (0+255),w,b
 17296  0044B6  0101               	movlb	1	; () banked
 17297  0044B8  1105               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 17298  0044BA  0101               	movlb	1	; () banked
 17299  0044BC  1106               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 17300  0044BE  0101               	movlb	1	; () banked
 17301  0044C0  1107               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 17302  0044C2  B4D8               	btfsc	status,2,c
 17303  0044C4  D042               	goto	l10702
 17304                           
 17305                           ; BSR set to: 1
 17306  0044C6  0E01               	movlw	1
 17307  0044C8  0101               	movlb	1	; () banked
 17308  0044CA  6F08               	movwf	___aldiv@counter& (0+255),b
 17309  0044CC  D008               	goto	l10688
 17310  0044CE                     l10686:
 17311                           
 17312                           ; BSR set to: 1
 17313  0044CE  0101               	movlb	1	; () banked
 17314  0044D0  90D8               	bcf	status,0,c
 17315  0044D2  3704               	rlcf	___aldiv@divisor& (0+255),f,b
 17316  0044D4  3705               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 17317  0044D6  3706               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 17318  0044D8  3707               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 17319  0044DA  0101               	movlb	1	; () banked
 17320  0044DC  2B08               	incf	___aldiv@counter& (0+255),f,b
 17321  0044DE                     l10688:
 17322                           
 17323                           ; BSR set to: 1
 17324  0044DE  0101               	movlb	1	; () banked
 17325  0044E0  AF07               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 17326  0044E2  D7F5               	goto	l10686
 17327  0044E4                     l10690:
 17328                           
 17329                           ; BSR set to: 1
 17330  0044E4  0101               	movlb	1	; () banked
 17331  0044E6  90D8               	bcf	status,0,c
 17332  0044E8  370A               	rlcf	___aldiv@quotient& (0+255),f,b
 17333  0044EA  370B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 17334  0044EC  370C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 17335  0044EE  370D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 17336                           
 17337                           ; BSR set to: 1
 17338  0044F0  0101               	movlb	1	; () banked
 17339  0044F2  5104               	movf	___aldiv@divisor& (0+255),w,b
 17340  0044F4  0101               	movlb	1	; () banked
 17341  0044F6  5D00               	subwf	___aldiv@dividend& (0+255),w,b
 17342  0044F8  0101               	movlb	1	; () banked
 17343  0044FA  5105               	movf	(___aldiv@divisor+1)& (0+255),w,b
 17344  0044FC  0101               	movlb	1	; () banked
 17345  0044FE  5901               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 17346  004500  0101               	movlb	1	; () banked
 17347  004502  5106               	movf	(___aldiv@divisor+2)& (0+255),w,b
 17348  004504  0101               	movlb	1	; () banked
 17349  004506  5902               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 17350  004508  0101               	movlb	1	; () banked
 17351  00450A  5107               	movf	(___aldiv@divisor+3)& (0+255),w,b
 17352  00450C  0101               	movlb	1	; () banked
 17353  00450E  5903               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 17354  004510  A0D8               	btfss	status,0,c
 17355  004512  D012               	goto	l10698
 17356                           
 17357                           ; BSR set to: 1
 17358  004514  0101               	movlb	1	; () banked
 17359  004516  5104               	movf	___aldiv@divisor& (0+255),w,b
 17360  004518  0101               	movlb	1	; () banked
 17361  00451A  5F00               	subwf	___aldiv@dividend& (0+255),f,b
 17362  00451C  0101               	movlb	1	; () banked
 17363  00451E  5105               	movf	(___aldiv@divisor+1)& (0+255),w,b
 17364  004520  0101               	movlb	1	; () banked
 17365  004522  5B01               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 17366  004524  0101               	movlb	1	; () banked
 17367  004526  5106               	movf	(___aldiv@divisor+2)& (0+255),w,b
 17368  004528  0101               	movlb	1	; () banked
 17369  00452A  5B02               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 17370  00452C  0101               	movlb	1	; () banked
 17371  00452E  5107               	movf	(___aldiv@divisor+3)& (0+255),w,b
 17372  004530  0101               	movlb	1	; () banked
 17373  004532  5B03               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 17374                           
 17375                           ; BSR set to: 1
 17376  004534  0101               	movlb	1	; () banked
 17377  004536  810A               	bsf	___aldiv@quotient& (0+255),0,b
 17378  004538                     l10698:
 17379                           
 17380                           ; BSR set to: 1
 17381  004538  0101               	movlb	1	; () banked
 17382  00453A  90D8               	bcf	status,0,c
 17383  00453C  3307               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 17384  00453E  3306               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 17385  004540  3305               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 17386  004542  3304               	rrcf	___aldiv@divisor& (0+255),f,b
 17387                           
 17388                           ; BSR set to: 1
 17389  004544  0101               	movlb	1	; () banked
 17390  004546  2F08               	decfsz	___aldiv@counter& (0+255),f,b
 17391  004548  D7CD               	goto	l10690
 17392  00454A                     l10702:
 17393                           
 17394                           ; BSR set to: 1
 17395  00454A  0101               	movlb	1	; () banked
 17396  00454C  5109               	movf	___aldiv@sign& (0+255),w,b
 17397  00454E  0101               	movlb	1	; () banked
 17398  004550  B4D8               	btfsc	status,2,c
 17399  004552  D009               	goto	l10706
 17400                           
 17401                           ; BSR set to: 1
 17402  004554  0101               	movlb	1	; () banked
 17403  004556  1F0D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 17404  004558  1F0C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 17405  00455A  1F0B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 17406  00455C  6D0A               	negf	___aldiv@quotient& (0+255),b
 17407  00455E  0E00               	movlw	0
 17408  004560  230B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 17409  004562  230C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 17410  004564  230D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 17411  004566                     l10706:
 17412                           
 17413                           ; BSR set to: 1
 17414  004566  C10A  F100         	movff	___aldiv@quotient,?___aldiv
 17415  00456A  C10B  F101         	movff	___aldiv@quotient+1,?___aldiv+1
 17416  00456E  C10C  F102         	movff	___aldiv@quotient+2,?___aldiv+2
 17417  004572  C10D  F103         	movff	___aldiv@quotient+3,?___aldiv+3
 17418  004576  0012               	return	
 17419  004578                     __end_of___aldiv:
 17420                           	opt stack 0
 17421                           tblptru	equ	0xFF8
 17422                           tblptrh	equ	0xFF7
 17423                           tblptrl	equ	0xFF6
 17424                           tablat	equ	0xFF5
 17425                           prodh	equ	0xFF4
 17426                           prodl	equ	0xFF3
 17427                           intcon	equ	0xFF2
 17428                           postinc0	equ	0xFEE
 17429                           wreg	equ	0xFE8
 17430                           postdec1	equ	0xFE5
 17431                           fsr1l	equ	0xFE1
 17432                           indf2	equ	0xFDF
 17433                           postinc2	equ	0xFDE
 17434                           postdec2	equ	0xFDD
 17435                           plusw2	equ	0xFDB
 17436                           fsr2h	equ	0xFDA
 17437                           fsr2l	equ	0xFD9
 17438                           status	equ	0xFD8
 17439                           
 17440 ;; *************** function _confirmEdition *****************
 17441 ;; Defined at:
 17442 ;;		line 85 in file "source/DisplayProtocol.h"
 17443 ;; Parameters:    Size  Location     Type
 17444 ;;  yes             1    wreg     unsigned char 
 17445 ;; Auto vars:     Size  Location     Type
 17446 ;;  yes             1   35[BANK1 ] unsigned char 
 17447 ;; Return value:  Size  Location     Type
 17448 ;;                  1    wreg      void 
 17449 ;; Registers used:
 17450 ;;		wreg, status,2, status,0, cstack
 17451 ;; Tracked objects:
 17452 ;;		On entry : 0/0
 17453 ;;		On exit  : 0/0
 17454 ;;		Unchanged: 0/0
 17455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17456 ;;      Params:         0       0       0       0       0       0       0
 17457 ;;      Locals:         0       0       1       0       0       0       0
 17458 ;;      Temps:          0       0       0       0       0       0       0
 17459 ;;      Totals:         0       0       1       0       0       0       0
 17460 ;;Total ram usage:        1 bytes
 17461 ;; Hardware stack levels used:    1
 17462 ;; Hardware stack levels required when called:   16
 17463 ;; This function calls:
 17464 ;;		_saveSysParams
 17465 ;; This function is called by:
 17466 ;;		_pressENTER
 17467 ;;		_longPressENTER
 17468 ;; This function uses a non-reentrant model
 17469 ;;
 17470                           
 17471                           	psect	text69
 17472  0059CA                     __ptext69:
 17473                           	opt stack 0
 17474  0059CA                     _confirmEdition:
 17475                           	opt stack 12
 17476                           
 17477                           ; BSR set to: 1
 17478                           ;incstack = 0
 17479                           ;confirmEdition@yes stored from wreg
 17480  0059CA  0101               	movlb	1	; () banked
 17481  0059CC  6F23               	movwf	confirmEdition@yes& (0+255),b
 17482                           
 17483                           ;DisplayProtocol.h: 86: switch (menuSection) {
 17484  0059CE  D04C               	goto	l10880
 17485  0059D0                     l10848:
 17486                           
 17487                           ;DisplayProtocol.h: 90: if(yes) {
 17488  0059D0  0101               	movlb	1	; () banked
 17489  0059D2  5123               	movf	confirmEdition@yes& (0+255),w,b
 17490  0059D4  0101               	movlb	1	; () banked
 17491  0059D6  B4D8               	btfsc	status,2,c
 17492  0059D8  D00C               	goto	l576
 17493                           
 17494                           ; BSR set to: 1
 17495                           ;DisplayProtocol.h: 91: kgXcorte = chanValf;
 17496  0059DA  C1B1  F18F         	movff	_chanValf,_kgXcorte
 17497  0059DE  C1B2  F190         	movff	_chanValf+1,_kgXcorte+1
 17498  0059E2  C1B3  F191         	movff	_chanValf+2,_kgXcorte+2
 17499                           
 17500                           ; BSR set to: 1
 17501                           ;DisplayProtocol.h: 92: actualScreen = 4;
 17502  0059E6  0E04               	movlw	4
 17503  0059E8  0101               	movlb	1	; () banked
 17504  0059EA  6FB9               	movwf	_actualScreen& (0+255),b
 17505                           
 17506                           ; BSR set to: 1
 17507                           ;DisplayProtocol.h: 93: saveSysParams();
 17508  0059EC  EC62  F030         	call	_saveSysParams	;wreg free
 17509                           
 17510                           ;DisplayProtocol.h: 94: }else {
 17511  0059F0  0012               	return	
 17512  0059F2                     l576:
 17513                           
 17514                           ; BSR set to: 1
 17515                           ;DisplayProtocol.h: 95: tempLastScreen = actualScreen;
 17516  0059F2  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 17517                           
 17518                           ; BSR set to: 1
 17519                           ;DisplayProtocol.h: 96: selSN = 1;
 17520  0059F6  0E01               	movlw	1
 17521  0059F8  0101               	movlb	1	; () banked
 17522  0059FA  6FBF               	movwf	_selSN& (0+255),b
 17523                           
 17524                           ;DisplayProtocol.h: 97: actualScreen = 10;
 17525  0059FC  0E0A               	movlw	10
 17526  0059FE  0101               	movlb	1	; () banked
 17527  005A00  6FB9               	movwf	_actualScreen& (0+255),b
 17528                           
 17529                           ; BSR set to: 1
 17530                           ;DisplayProtocol.h: 98: }
 17531                           ;DisplayProtocol.h: 99: break;
 17532  005A02  0012               	return	
 17533  005A04                     l10858:
 17534                           
 17535                           ; BSR set to: 1
 17536                           ;DisplayProtocol.h: 101: if(yes) {
 17537  005A04  0101               	movlb	1	; () banked
 17538  005A06  5123               	movf	confirmEdition@yes& (0+255),w,b
 17539  005A08  0101               	movlb	1	; () banked
 17540  005A0A  B4D8               	btfsc	status,2,c
 17541  005A0C  D00A               	goto	l579
 17542                           
 17543                           ; BSR set to: 1
 17544                           ;DisplayProtocol.h: 102: numCortes = chanVals;
 17545  005A0E  C1B4  F0D0         	movff	_chanVals,_numCortes
 17546  005A12  C1B5  F0D1         	movff	_chanVals+1,_numCortes+1
 17547                           
 17548                           ; BSR set to: 1
 17549                           ;DisplayProtocol.h: 103: actualScreen = 4;
 17550  005A16  0E04               	movlw	4
 17551  005A18  0101               	movlb	1	; () banked
 17552  005A1A  6FB9               	movwf	_actualScreen& (0+255),b
 17553                           
 17554                           ; BSR set to: 1
 17555                           ;DisplayProtocol.h: 104: saveSysParams();
 17556  005A1C  EC62  F030         	call	_saveSysParams	;wreg free
 17557                           
 17558                           ;DisplayProtocol.h: 105: }else {
 17559  005A20  0012               	return	
 17560  005A22                     l579:
 17561                           
 17562                           ; BSR set to: 1
 17563                           ;DisplayProtocol.h: 106: tempLastScreen = actualScreen;
 17564  005A22  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 17565                           
 17566                           ; BSR set to: 1
 17567                           ;DisplayProtocol.h: 107: selSN = 1;
 17568  005A26  0E01               	movlw	1
 17569  005A28  0101               	movlb	1	; () banked
 17570  005A2A  6FBF               	movwf	_selSN& (0+255),b
 17571                           
 17572                           ;DisplayProtocol.h: 108: actualScreen = 10;
 17573  005A2C  0E0A               	movlw	10
 17574  005A2E  0101               	movlb	1	; () banked
 17575  005A30  6FB9               	movwf	_actualScreen& (0+255),b
 17576                           
 17577                           ; BSR set to: 1
 17578                           ;DisplayProtocol.h: 109: }
 17579                           ;DisplayProtocol.h: 110: break;
 17580  005A32  0012               	return	
 17581  005A34                     l10868:
 17582                           
 17583                           ; BSR set to: 1
 17584                           ;DisplayProtocol.h: 112: if(yes) {
 17585  005A34  0101               	movlb	1	; () banked
 17586  005A36  5123               	movf	confirmEdition@yes& (0+255),w,b
 17587  005A38  0101               	movlb	1	; () banked
 17588  005A3A  B4D8               	btfsc	status,2,c
 17589  005A3C  D00C               	goto	l582
 17590                           
 17591                           ; BSR set to: 1
 17592                           ;DisplayProtocol.h: 113: velocidadMasa = chanValf;
 17593  005A3E  C1B1  F198         	movff	_chanValf,_velocidadMasa
 17594  005A42  C1B2  F199         	movff	_chanValf+1,_velocidadMasa+1
 17595  005A46  C1B3  F19A         	movff	_chanValf+2,_velocidadMasa+2
 17596                           
 17597                           ; BSR set to: 1
 17598                           ;DisplayProtocol.h: 114: actualScreen = 4;
 17599  005A4A  0E04               	movlw	4
 17600  005A4C  0101               	movlb	1	; () banked
 17601  005A4E  6FB9               	movwf	_actualScreen& (0+255),b
 17602                           
 17603                           ; BSR set to: 1
 17604                           ;DisplayProtocol.h: 115: saveSysParams();
 17605  005A50  EC62  F030         	call	_saveSysParams	;wreg free
 17606                           
 17607                           ;DisplayProtocol.h: 116: }else {
 17608  005A54  0012               	return	
 17609  005A56                     l582:
 17610                           
 17611                           ; BSR set to: 1
 17612                           ;DisplayProtocol.h: 117: tempLastScreen = actualScreen;
 17613  005A56  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 17614                           
 17615                           ; BSR set to: 1
 17616                           ;DisplayProtocol.h: 118: selSN = 1;
 17617  005A5A  0E01               	movlw	1
 17618  005A5C  0101               	movlb	1	; () banked
 17619  005A5E  6FBF               	movwf	_selSN& (0+255),b
 17620                           
 17621                           ;DisplayProtocol.h: 119: actualScreen = 10;
 17622  005A60  0E0A               	movlw	10
 17623  005A62  0101               	movlb	1	; () banked
 17624  005A64  6FB9               	movwf	_actualScreen& (0+255),b
 17625                           
 17626                           ; BSR set to: 1
 17627                           ;DisplayProtocol.h: 122: }
 17628                           ;DisplayProtocol.h: 123: }
 17629                           
 17630                           ; BSR set to: 1
 17631                           ;DisplayProtocol.h: 120: }
 17632                           ;DisplayProtocol.h: 121: break;
 17633  005A66  0012               	return	
 17634  005A68                     l10880:
 17635  005A68  0101               	movlb	1	; () banked
 17636  005A6A  51BD               	movf	_menuSection& (0+255),w,b
 17637                           
 17638                           ; Switch size 1, requested type "space"
 17639                           ; Number of cases is 4, Range of values is 0 to 3
 17640                           ; switch strategies available:
 17641                           ; Name         Instructions Cycles
 17642                           ; simple_byte           13     7 (average)
 17643                           ;	Chosen strategy is simple_byte
 17644  005A6C  0A00               	xorlw	0	; case 0
 17645  005A6E  B4D8               	btfsc	status,2,c
 17646  005A70  0012               	return	
 17647  005A72  0A01               	xorlw	1	; case 1
 17648  005A74  B4D8               	btfsc	status,2,c
 17649  005A76  D7AC               	goto	l10848
 17650  005A78  0A03               	xorlw	3	; case 2
 17651  005A7A  B4D8               	btfsc	status,2,c
 17652  005A7C  D7C3               	goto	l10858
 17653  005A7E  0A01               	xorlw	1	; case 3
 17654  005A80  A4D8               	btfss	status,2,c
 17655  005A82  0012               	return	
 17656  005A84  D7D7               	goto	l10868
 17657  005A86                     __end_of_confirmEdition:
 17658                           	opt stack 0
 17659                           tblptru	equ	0xFF8
 17660                           tblptrh	equ	0xFF7
 17661                           tblptrl	equ	0xFF6
 17662                           tablat	equ	0xFF5
 17663                           prodh	equ	0xFF4
 17664                           prodl	equ	0xFF3
 17665                           intcon	equ	0xFF2
 17666                           postinc0	equ	0xFEE
 17667                           wreg	equ	0xFE8
 17668                           postdec1	equ	0xFE5
 17669                           fsr1l	equ	0xFE1
 17670                           indf2	equ	0xFDF
 17671                           postinc2	equ	0xFDE
 17672                           postdec2	equ	0xFDD
 17673                           plusw2	equ	0xFDB
 17674                           fsr2h	equ	0xFDA
 17675                           fsr2l	equ	0xFD9
 17676                           status	equ	0xFD8
 17677                           
 17678 ;; *************** function _saveSysParams *****************
 17679 ;; Defined at:
 17680 ;;		line 113 in file "source/sysParams.h"
 17681 ;; Parameters:    Size  Location     Type
 17682 ;;		None
 17683 ;; Auto vars:     Size  Location     Type
 17684 ;;		None
 17685 ;; Return value:  Size  Location     Type
 17686 ;;                  1    wreg      void 
 17687 ;; Registers used:
 17688 ;;		wreg, status,2, status,0, cstack
 17689 ;; Tracked objects:
 17690 ;;		On entry : 0/0
 17691 ;;		On exit  : 0/0
 17692 ;;		Unchanged: 0/0
 17693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17694 ;;      Params:         0       0       0       0       0       0       0
 17695 ;;      Locals:         0       0       0       0       0       0       0
 17696 ;;      Temps:          0       0       0       0       0       0       0
 17697 ;;      Totals:         0       0       0       0       0       0       0
 17698 ;;Total ram usage:        0 bytes
 17699 ;; Hardware stack levels used:    1
 17700 ;; Hardware stack levels required when called:   15
 17701 ;; This function calls:
 17702 ;;		_calcVars2ti
 17703 ;;		_writeEEPROM
 17704 ;; This function is called by:
 17705 ;;		_confirmEdition
 17706 ;; This function uses a non-reentrant model
 17707 ;;
 17708                           
 17709                           	psect	text70
 17710  0060C4                     __ptext70:
 17711                           	opt stack 0
 17712  0060C4                     _saveSysParams:
 17713                           	opt stack 12
 17714                           
 17715                           ;sysParams.h: 114: calcVars2ti();
 17716                           
 17717                           ;incstack = 0
 17718  0060C4  ECFE  F035         	call	_calcVars2ti	;wreg free
 17719                           
 17720                           ;sysParams.h: 115: EECON1bits.WREN = 1;
 17721  0060C8  84A6               	bsf	4006,2,c	;volatile
 17722                           
 17723                           ;sysParams.h: 116: ie = INTCONbits.GIE;
 17724  0060CA  0E00               	movlw	0
 17725  0060CC  BEF2               	btfsc	intcon,7,c	;volatile
 17726  0060CE  0E01               	movlw	1
 17727  0060D0  0100               	movlb	0	; () banked
 17728  0060D2  6FC1               	movwf	_ie& (0+255),b
 17729                           
 17730                           ; BSR set to: 0
 17731                           ;sysParams.h: 117: INTCONbits.GIE = 0;
 17732  0060D4  9EF2               	bcf	intcon,7,c	;volatile
 17733                           
 17734                           ; BSR set to: 0
 17735                           ;sysParams.h: 119: fData.floatdat = tiXcorte;
 17736  0060D6  C195  F0AF         	movff	_tiXcorte,_fData
 17737  0060DA  C196  F0B0         	movff	_tiXcorte+1,_fData+1
 17738  0060DE  C197  F0B1         	movff	_tiXcorte+2,_fData+2
 17739                           
 17740                           ; BSR set to: 0
 17741                           ;sysParams.h: 121: writeEEPROM(3, fData.floatUB);
 17742  0060E2  C0B1  F100         	movff	_fData+2,writeEEPROM@data
 17743  0060E6  0E03               	movlw	3
 17744  0060E8  EC18  F039         	call	_writeEEPROM
 17745                           
 17746                           ;sysParams.h: 122: writeEEPROM(4, fData.floatHB);
 17747  0060EC  C0B0  F100         	movff	_fData+1,writeEEPROM@data
 17748  0060F0  0E04               	movlw	4
 17749  0060F2  EC18  F039         	call	_writeEEPROM
 17750                           
 17751                           ;sysParams.h: 123: writeEEPROM(5, fData.floatLB);
 17752  0060F6  C0AF  F100         	movff	_fData,writeEEPROM@data
 17753  0060FA  0E05               	movlw	5
 17754  0060FC  EC18  F039         	call	_writeEEPROM
 17755                           
 17756                           ;sysParams.h: 124: i16Data.int16dat = numCortes;
 17757  006100  C0D0  F0B2         	movff	_numCortes,_i16Data
 17758  006104  C0D1  F0B3         	movff	_numCortes+1,_i16Data+1
 17759                           
 17760                           ;sysParams.h: 125: writeEEPROM(6, i16Data.int16HB);
 17761  006108  C0B3  F100         	movff	_i16Data+1,writeEEPROM@data
 17762  00610C  0E06               	movlw	6
 17763  00610E  EC18  F039         	call	_writeEEPROM
 17764                           
 17765                           ;sysParams.h: 126: writeEEPROM(7, i16Data.int16LB);
 17766  006112  C0B2  F100         	movff	_i16Data,writeEEPROM@data
 17767  006116  0E07               	movlw	7
 17768  006118  EC18  F039         	call	_writeEEPROM
 17769                           
 17770                           ;sysParams.h: 137: fData.floatdat = velocidadMasa;
 17771  00611C  C198  F0AF         	movff	_velocidadMasa,_fData
 17772  006120  C199  F0B0         	movff	_velocidadMasa+1,_fData+1
 17773  006124  C19A  F0B1         	movff	_velocidadMasa+2,_fData+2
 17774                           
 17775                           ;sysParams.h: 139: writeEEPROM(17, fData.floatUB);
 17776  006128  C0B1  F100         	movff	_fData+2,writeEEPROM@data
 17777  00612C  0E11               	movlw	17
 17778  00612E  EC18  F039         	call	_writeEEPROM
 17779                           
 17780                           ;sysParams.h: 140: writeEEPROM(18, fData.floatHB);
 17781  006132  C0B0  F100         	movff	_fData+1,writeEEPROM@data
 17782  006136  0E12               	movlw	18
 17783  006138  EC18  F039         	call	_writeEEPROM
 17784                           
 17785                           ;sysParams.h: 141: writeEEPROM(19, fData.floatLB);
 17786  00613C  C0AF  F100         	movff	_fData,writeEEPROM@data
 17787  006140  0E13               	movlw	19
 17788  006142  EC18  F039         	call	_writeEEPROM
 17789                           
 17790                           ;sysParams.h: 142: EECON1bits.WREN = 0;
 17791  006146  94A6               	bcf	4006,2,c	;volatile
 17792                           
 17793                           ;sysParams.h: 143: INTCONbits.GIE = ie;
 17794  006148  0100               	movlb	0	; () banked
 17795  00614A  B1C1               	btfsc	_ie& (0+255),0,b
 17796  00614C  D002               	bra	u15115
 17797  00614E  9EF2               	bcf	intcon,7,c	;volatile
 17798  006150  D001               	bra	u15116
 17799  006152                     u15115:
 17800  006152  8EF2               	bsf	intcon,7,c	;volatile
 17801  006154                     u15116:
 17802  006154  0012               	return		;funcret
 17803  006156                     __end_of_saveSysParams:
 17804                           	opt stack 0
 17805                           tblptru	equ	0xFF8
 17806                           tblptrh	equ	0xFF7
 17807                           tblptrl	equ	0xFF6
 17808                           tablat	equ	0xFF5
 17809                           prodh	equ	0xFF4
 17810                           prodl	equ	0xFF3
 17811                           intcon	equ	0xFF2
 17812                           postinc0	equ	0xFEE
 17813                           wreg	equ	0xFE8
 17814                           postdec1	equ	0xFE5
 17815                           fsr1l	equ	0xFE1
 17816                           indf2	equ	0xFDF
 17817                           postinc2	equ	0xFDE
 17818                           postdec2	equ	0xFDD
 17819                           plusw2	equ	0xFDB
 17820                           fsr2h	equ	0xFDA
 17821                           fsr2l	equ	0xFD9
 17822                           status	equ	0xFD8
 17823                           
 17824 ;; *************** function _writeEEPROM *****************
 17825 ;; Defined at:
 17826 ;;		line 53 in file "source/sysParams.h"
 17827 ;; Parameters:    Size  Location     Type
 17828 ;;  adr             1    wreg     unsigned char 
 17829 ;;  data            1    0[BANK1 ] unsigned char 
 17830 ;; Auto vars:     Size  Location     Type
 17831 ;;  adr             1    1[BANK1 ] unsigned char 
 17832 ;; Return value:  Size  Location     Type
 17833 ;;                  1    wreg      void 
 17834 ;; Registers used:
 17835 ;;		wreg, status,2
 17836 ;; Tracked objects:
 17837 ;;		On entry : 0/0
 17838 ;;		On exit  : 0/0
 17839 ;;		Unchanged: 0/0
 17840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17841 ;;      Params:         0       0       1       0       0       0       0
 17842 ;;      Locals:         0       0       1       0       0       0       0
 17843 ;;      Temps:          0       0       0       0       0       0       0
 17844 ;;      Totals:         0       0       2       0       0       0       0
 17845 ;;Total ram usage:        2 bytes
 17846 ;; Hardware stack levels used:    1
 17847 ;; Hardware stack levels required when called:   12
 17848 ;; This function calls:
 17849 ;;		Nothing
 17850 ;; This function is called by:
 17851 ;;		_saveSysParams
 17852 ;; This function uses a non-reentrant model
 17853 ;;
 17854                           
 17855                           	psect	text71
 17856  007230                     __ptext71:
 17857                           	opt stack 0
 17858  007230                     _writeEEPROM:
 17859                           	opt stack 14
 17860                           
 17861                           ;incstack = 0
 17862                           ;writeEEPROM@adr stored from wreg
 17863  007230  0101               	movlb	1	; () banked
 17864  007232  6F01               	movwf	writeEEPROM@adr& (0+255),b
 17865                           
 17866                           ;sysParams.h: 54: EEADR = adr;
 17867  007234  C101  FFA9         	movff	writeEEPROM@adr,4009	;volatile
 17868                           
 17869                           ;sysParams.h: 55: EEDATA = data;
 17870  007238  C100  FFA8         	movff	writeEEPROM@data,4008	;volatile
 17871                           
 17872                           ;sysParams.h: 56: EECON1bits.EEPGD = 0;
 17873  00723C  9EA6               	bcf	4006,7,c	;volatile
 17874                           
 17875                           ;sysParams.h: 57: EECON1bits.CFGS = 0;
 17876  00723E  9CA6               	bcf	4006,6,c	;volatile
 17877                           
 17878                           ;sysParams.h: 58: EECON2 = 0x55;
 17879  007240  0E55               	movlw	85
 17880  007242  6EA7               	movwf	4007,c	;volatile
 17881                           
 17882                           ;sysParams.h: 59: EECON2 = 0xAA;
 17883  007244  0EAA               	movlw	170
 17884  007246  6EA7               	movwf	4007,c	;volatile
 17885                           
 17886                           ;sysParams.h: 60: EECON1bits.WR = 1;
 17887  007248  82A6               	bsf	4006,1,c	;volatile
 17888  00724A                     l281:
 17889  00724A  A2A6               	btfss	4006,1,c	;volatile
 17890  00724C  0012               	return	
 17891  00724E  D7FD               	goto	l281
 17892  007250                     __end_of_writeEEPROM:
 17893                           	opt stack 0
 17894                           tblptru	equ	0xFF8
 17895                           tblptrh	equ	0xFF7
 17896                           tblptrl	equ	0xFF6
 17897                           tablat	equ	0xFF5
 17898                           prodh	equ	0xFF4
 17899                           prodl	equ	0xFF3
 17900                           intcon	equ	0xFF2
 17901                           postinc0	equ	0xFEE
 17902                           wreg	equ	0xFE8
 17903                           postdec1	equ	0xFE5
 17904                           fsr1l	equ	0xFE1
 17905                           indf2	equ	0xFDF
 17906                           postinc2	equ	0xFDE
 17907                           postdec2	equ	0xFDD
 17908                           plusw2	equ	0xFDB
 17909                           fsr2h	equ	0xFDA
 17910                           fsr2l	equ	0xFD9
 17911                           status	equ	0xFD8
 17912                           
 17913 ;; *************** function _calcVars2ti *****************
 17914 ;; Defined at:
 17915 ;;		line 89 in file "source/sysParams.h"
 17916 ;; Parameters:    Size  Location     Type
 17917 ;;		None
 17918 ;; Auto vars:     Size  Location     Type
 17919 ;;		None
 17920 ;; Return value:  Size  Location     Type
 17921 ;;                  1    wreg      void 
 17922 ;; Registers used:
 17923 ;;		wreg, status,2, status,0, cstack
 17924 ;; Tracked objects:
 17925 ;;		On entry : 0/0
 17926 ;;		On exit  : 0/0
 17927 ;;		Unchanged: 0/0
 17928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17929 ;;      Params:         0       0       0       0       0       0       0
 17930 ;;      Locals:         0       0       0       0       0       0       0
 17931 ;;      Temps:          0       0       0       0       0       0       0
 17932 ;;      Totals:         0       0       0       0       0       0       0
 17933 ;;Total ram usage:        0 bytes
 17934 ;; Hardware stack levels used:    1
 17935 ;; Hardware stack levels required when called:   14
 17936 ;; This function calls:
 17937 ;;		___ftdiv
 17938 ;;		___ftmul
 17939 ;; This function is called by:
 17940 ;;		_saveSysParams
 17941 ;;		_longPressENTER
 17942 ;; This function uses a non-reentrant model
 17943 ;;
 17944                           
 17945                           	psect	text72
 17946  006BFC                     __ptext72:
 17947                           	opt stack 0
 17948  006BFC                     _calcVars2ti:
 17949                           	opt stack 12
 17950                           
 17951                           ;sysParams.h: 97: tiXcorte = (float)kgXcorte / velocidadMasa;
 17952                           
 17953                           ;incstack = 0
 17954  006BFC  C18F  F112         	movff	_kgXcorte,___ftdiv@f1
 17955  006C00  C190  F113         	movff	_kgXcorte+1,___ftdiv@f1+1
 17956  006C04  C191  F114         	movff	_kgXcorte+2,___ftdiv@f1+2
 17957  006C08  C198  F115         	movff	_velocidadMasa,___ftdiv@f2
 17958  006C0C  C199  F116         	movff	_velocidadMasa+1,___ftdiv@f2+1
 17959  006C10  C19A  F117         	movff	_velocidadMasa+2,___ftdiv@f2+2
 17960  006C14  EC7D  F01E         	call	___ftdiv	;wreg free
 17961  006C18  C112  F195         	movff	?___ftdiv,_tiXcorte
 17962  006C1C  C113  F196         	movff	?___ftdiv+1,_tiXcorte+1
 17963  006C20  C114  F197         	movff	?___ftdiv+2,_tiXcorte+2
 17964                           
 17965                           ;sysParams.h: 98: timsXcorte = (float)tiXcorte * 1000;
 17966  006C24  C195  F114         	movff	_tiXcorte,___ftmul@f1
 17967  006C28  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 17968  006C2C  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 17969  006C30  0E00               	movlw	0
 17970  006C32  0101               	movlb	1	; () banked
 17971  006C34  6F17               	movwf	___ftmul@f2& (0+255),b
 17972  006C36  0E7A               	movlw	122
 17973  006C38  0101               	movlb	1	; () banked
 17974  006C3A  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 17975  006C3C  0E44               	movlw	68
 17976  006C3E  0101               	movlb	1	; () banked
 17977  006C40  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 17978  006C42  EC1F  F01D         	call	___ftmul	;wreg free
 17979  006C46  C114  F059         	movff	?___ftmul,_timsXcorte
 17980  006C4A  C115  F05A         	movff	?___ftmul+1,_timsXcorte+1
 17981  006C4E  C116  F05B         	movff	?___ftmul+2,_timsXcorte+2
 17982  006C52  0012               	return		;funcret
 17983  006C54                     __end_of_calcVars2ti:
 17984                           	opt stack 0
 17985                           tblptru	equ	0xFF8
 17986                           tblptrh	equ	0xFF7
 17987                           tblptrl	equ	0xFF6
 17988                           tablat	equ	0xFF5
 17989                           prodh	equ	0xFF4
 17990                           prodl	equ	0xFF3
 17991                           intcon	equ	0xFF2
 17992                           postinc0	equ	0xFEE
 17993                           wreg	equ	0xFE8
 17994                           postdec1	equ	0xFE5
 17995                           fsr1l	equ	0xFE1
 17996                           indf2	equ	0xFDF
 17997                           postinc2	equ	0xFDE
 17998                           postdec2	equ	0xFDD
 17999                           plusw2	equ	0xFDB
 18000                           fsr2h	equ	0xFDA
 18001                           fsr2l	equ	0xFD9
 18002                           status	equ	0xFD8
 18003                           
 18004 ;; *************** function ___ftmul *****************
 18005 ;; Defined at:
 18006 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 18007 ;; Parameters:    Size  Location     Type
 18008 ;;  f1              3   20[BANK1 ] float 
 18009 ;;  f2              3   23[BANK1 ] float 
 18010 ;; Auto vars:     Size  Location     Type
 18011 ;;  f3_as_produc    3   30[BANK1 ] unsigned um
 18012 ;;  sign            1   34[BANK1 ] unsigned char 
 18013 ;;  cntr            1   33[BANK1 ] unsigned char 
 18014 ;;  exp             1   29[BANK1 ] unsigned char 
 18015 ;; Return value:  Size  Location     Type
 18016 ;;                  3   20[BANK1 ] float 
 18017 ;; Registers used:
 18018 ;;		wreg, status,2, status,0, cstack
 18019 ;; Tracked objects:
 18020 ;;		On entry : 0/0
 18021 ;;		On exit  : 0/0
 18022 ;;		Unchanged: 0/0
 18023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18024 ;;      Params:         0       0       6       0       0       0       0
 18025 ;;      Locals:         0       0       6       0       0       0       0
 18026 ;;      Temps:          0       0       3       0       0       0       0
 18027 ;;      Totals:         0       0      15       0       0       0       0
 18028 ;;Total ram usage:       15 bytes
 18029 ;; Hardware stack levels used:    1
 18030 ;; Hardware stack levels required when called:   13
 18031 ;; This function calls:
 18032 ;;		___ftpack
 18033 ;; This function is called by:
 18034 ;;		_calcSysVars
 18035 ;;		_calcVars2ti
 18036 ;;		_desintegrator
 18037 ;;		_longPressRETRO
 18038 ;;		_pressENTER
 18039 ;;		_longPressENTER
 18040 ;;		_fround
 18041 ;;		_scale
 18042 ;;		_printf
 18043 ;; This function uses a non-reentrant model
 18044 ;;
 18045                           
 18046                           	psect	text73
 18047  003A3E                     __ptext73:
 18048                           	opt stack 0
 18049  003A3E                     ___ftmul:
 18050                           	opt stack 15
 18051                           
 18052                           ;incstack = 0
 18053  003A3E  C116  F11A         	movff	___ftmul@f1+2,??___ftmul
 18054  003A42  0101               	movlb	1	; () banked
 18055  003A44  6B1B               	clrf	(??___ftmul+1)& (0+255),b
 18056  003A46  6B1C               	clrf	(??___ftmul+2)& (0+255),b
 18057  003A48  0101               	movlb	1	; () banked
 18058  003A4A  3515               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 18059  003A4C  0101               	movlb	1	; () banked
 18060  003A4E  371A               	rlcf	??___ftmul& (0+255),f,b
 18061  003A50  E301               	bnc	u14551
 18062  003A52  811B               	bsf	(??___ftmul+1)& (0+255),0,b
 18063  003A54                     u14551:
 18064  003A54  0101               	movlb	1	; () banked
 18065  003A56  511A               	movf	??___ftmul& (0+255),w,b
 18066  003A58  0101               	movlb	1	; () banked
 18067  003A5A  6F1D               	movwf	___ftmul@exp& (0+255),b
 18068  003A5C  0101               	movlb	1	; () banked
 18069  003A5E  511D               	movf	___ftmul@exp& (0+255),w,b
 18070  003A60  A4D8               	btfss	status,2,c
 18071  003A62  D00A               	goto	l9900
 18072                           
 18073                           ; BSR set to: 1
 18074  003A64  0E00               	movlw	0
 18075  003A66  0101               	movlb	1	; () banked
 18076  003A68  6F14               	movwf	?___ftmul& (0+255),b
 18077  003A6A  0E00               	movlw	0
 18078  003A6C  0101               	movlb	1	; () banked
 18079  003A6E  6F15               	movwf	(?___ftmul+1)& (0+255),b
 18080  003A70  0E00               	movlw	0
 18081  003A72  0101               	movlb	1	; () banked
 18082  003A74  6F16               	movwf	(?___ftmul+2)& (0+255),b
 18083                           
 18084                           ; BSR set to: 1
 18085  003A76  0012               	return	
 18086  003A78                     l9900:
 18087                           
 18088                           ; BSR set to: 1
 18089  003A78  C119  F11A         	movff	___ftmul@f2+2,??___ftmul
 18090  003A7C  0101               	movlb	1	; () banked
 18091  003A7E  6B1B               	clrf	(??___ftmul+1)& (0+255),b
 18092  003A80  6B1C               	clrf	(??___ftmul+2)& (0+255),b
 18093  003A82  0101               	movlb	1	; () banked
 18094  003A84  3518               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 18095  003A86  0101               	movlb	1	; () banked
 18096  003A88  371A               	rlcf	??___ftmul& (0+255),f,b
 18097  003A8A  E301               	bnc	u14571
 18098  003A8C  811B               	bsf	(??___ftmul+1)& (0+255),0,b
 18099  003A8E                     u14571:
 18100  003A8E  0101               	movlb	1	; () banked
 18101  003A90  511A               	movf	??___ftmul& (0+255),w,b
 18102  003A92  0101               	movlb	1	; () banked
 18103  003A94  6F22               	movwf	___ftmul@sign& (0+255),b
 18104  003A96  0101               	movlb	1	; () banked
 18105  003A98  5122               	movf	___ftmul@sign& (0+255),w,b
 18106  003A9A  A4D8               	btfss	status,2,c
 18107  003A9C  D00A               	goto	l9906
 18108                           
 18109                           ; BSR set to: 1
 18110  003A9E  0E00               	movlw	0
 18111  003AA0  0101               	movlb	1	; () banked
 18112  003AA2  6F14               	movwf	?___ftmul& (0+255),b
 18113  003AA4  0E00               	movlw	0
 18114  003AA6  0101               	movlb	1	; () banked
 18115  003AA8  6F15               	movwf	(?___ftmul+1)& (0+255),b
 18116  003AAA  0E00               	movlw	0
 18117  003AAC  0101               	movlb	1	; () banked
 18118  003AAE  6F16               	movwf	(?___ftmul+2)& (0+255),b
 18119                           
 18120                           ; BSR set to: 1
 18121  003AB0  0012               	return	
 18122  003AB2                     l9906:
 18123                           
 18124                           ; BSR set to: 1
 18125  003AB2  0101               	movlb	1	; () banked
 18126  003AB4  5122               	movf	___ftmul@sign& (0+255),w,b
 18127  003AB6  0F7B               	addlw	123
 18128  003AB8  0101               	movlb	1	; () banked
 18129  003ABA  271D               	addwf	___ftmul@exp& (0+255),f,b
 18130                           
 18131                           ; BSR set to: 1
 18132  003ABC  C116  F122         	movff	___ftmul@f1+2,___ftmul@sign
 18133  003AC0  0101               	movlb	1	; () banked
 18134  003AC2  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 18135  003AC4  0101               	movlb	1	; () banked
 18136  003AC6  1B22               	xorwf	___ftmul@sign& (0+255),f,b
 18137  003AC8  0E80               	movlw	128
 18138  003ACA  0101               	movlb	1	; () banked
 18139  003ACC  1722               	andwf	___ftmul@sign& (0+255),f,b
 18140                           
 18141                           ; BSR set to: 1
 18142  003ACE  0101               	movlb	1	; () banked
 18143  003AD0  8F15               	bsf	(___ftmul@f1+1)& (0+255),7,b
 18144                           
 18145                           ; BSR set to: 1
 18146  003AD2  0101               	movlb	1	; () banked
 18147  003AD4  8F18               	bsf	(___ftmul@f2+1)& (0+255),7,b
 18148                           
 18149                           ; BSR set to: 1
 18150  003AD6  0EFF               	movlw	255
 18151  003AD8  0101               	movlb	1	; () banked
 18152  003ADA  1717               	andwf	___ftmul@f2& (0+255),f,b
 18153  003ADC  0EFF               	movlw	255
 18154  003ADE  0101               	movlb	1	; () banked
 18155  003AE0  1718               	andwf	(___ftmul@f2+1)& (0+255),f,b
 18156  003AE2  0E00               	movlw	0
 18157  003AE4  0101               	movlb	1	; () banked
 18158  003AE6  1719               	andwf	(___ftmul@f2+2)& (0+255),f,b
 18159                           
 18160                           ; BSR set to: 1
 18161  003AE8  0E00               	movlw	0
 18162  003AEA  0101               	movlb	1	; () banked
 18163  003AEC  6F1E               	movwf	___ftmul@f3_as_product& (0+255),b
 18164  003AEE  0E00               	movlw	0
 18165  003AF0  0101               	movlb	1	; () banked
 18166  003AF2  6F1F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 18167  003AF4  0E00               	movlw	0
 18168  003AF6  0101               	movlb	1	; () banked
 18169  003AF8  6F20               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 18170                           
 18171                           ; BSR set to: 1
 18172  003AFA  0E07               	movlw	7
 18173  003AFC  0101               	movlb	1	; () banked
 18174  003AFE  6F21               	movwf	___ftmul@cntr& (0+255),b
 18175  003B00                     l9920:
 18176                           
 18177                           ; BSR set to: 1
 18178  003B00  0101               	movlb	1	; () banked
 18179  003B02  A114               	btfss	___ftmul@f1& (0+255),0,b
 18180  003B04  D00C               	goto	l9924
 18181                           
 18182                           ; BSR set to: 1
 18183  003B06  0101               	movlb	1	; () banked
 18184  003B08  5117               	movf	___ftmul@f2& (0+255),w,b
 18185  003B0A  0101               	movlb	1	; () banked
 18186  003B0C  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 18187  003B0E  0101               	movlb	1	; () banked
 18188  003B10  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
 18189  003B12  0101               	movlb	1	; () banked
 18190  003B14  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 18191  003B16  0101               	movlb	1	; () banked
 18192  003B18  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 18193  003B1A  0101               	movlb	1	; () banked
 18194  003B1C  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 18195  003B1E                     l9924:
 18196                           
 18197                           ; BSR set to: 1
 18198  003B1E  0101               	movlb	1	; () banked
 18199  003B20  90D8               	bcf	status,0,c
 18200  003B22  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 18201  003B24  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 18202  003B26  3314               	rrcf	___ftmul@f1& (0+255),f,b
 18203  003B28  0101               	movlb	1	; () banked
 18204  003B2A  90D8               	bcf	status,0,c
 18205  003B2C  3717               	rlcf	___ftmul@f2& (0+255),f,b
 18206  003B2E  3718               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 18207  003B30  3719               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 18208                           
 18209                           ; BSR set to: 1
 18210  003B32  0101               	movlb	1	; () banked
 18211  003B34  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
 18212  003B36  D7E4               	goto	l9920
 18213                           
 18214                           ; BSR set to: 1
 18215                           
 18216                           ; BSR set to: 1
 18217  003B38  0E09               	movlw	9
 18218  003B3A  0101               	movlb	1	; () banked
 18219  003B3C  6F21               	movwf	___ftmul@cntr& (0+255),b
 18220  003B3E                     l9930:
 18221                           
 18222                           ; BSR set to: 1
 18223  003B3E  0101               	movlb	1	; () banked
 18224  003B40  A114               	btfss	___ftmul@f1& (0+255),0,b
 18225  003B42  D00C               	goto	l9934
 18226                           
 18227                           ; BSR set to: 1
 18228  003B44  0101               	movlb	1	; () banked
 18229  003B46  5117               	movf	___ftmul@f2& (0+255),w,b
 18230  003B48  0101               	movlb	1	; () banked
 18231  003B4A  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 18232  003B4C  0101               	movlb	1	; () banked
 18233  003B4E  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
 18234  003B50  0101               	movlb	1	; () banked
 18235  003B52  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 18236  003B54  0101               	movlb	1	; () banked
 18237  003B56  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 18238  003B58  0101               	movlb	1	; () banked
 18239  003B5A  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 18240  003B5C                     l9934:
 18241                           
 18242                           ; BSR set to: 1
 18243  003B5C  0101               	movlb	1	; () banked
 18244  003B5E  90D8               	bcf	status,0,c
 18245  003B60  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 18246  003B62  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 18247  003B64  3314               	rrcf	___ftmul@f1& (0+255),f,b
 18248  003B66  0101               	movlb	1	; () banked
 18249  003B68  90D8               	bcf	status,0,c
 18250  003B6A  3320               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 18251  003B6C  331F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 18252  003B6E  331E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 18253                           
 18254                           ; BSR set to: 1
 18255  003B70  0101               	movlb	1	; () banked
 18256  003B72  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
 18257  003B74  D7E4               	goto	l9930
 18258                           
 18259                           ; BSR set to: 1
 18260                           
 18261                           ; BSR set to: 1
 18262  003B76  C11E  F100         	movff	___ftmul@f3_as_product,___ftpack@arg
 18263  003B7A  C11F  F101         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 18264  003B7E  C120  F102         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 18265  003B82  C11D  F103         	movff	___ftmul@exp,___ftpack@exp
 18266  003B86  C122  F104         	movff	___ftmul@sign,___ftpack@sign
 18267  003B8A  EC69  F025         	call	___ftpack	;wreg free
 18268  003B8E  C100  F114         	movff	?___ftpack,?___ftmul
 18269  003B92  C101  F115         	movff	?___ftpack+1,?___ftmul+1
 18270  003B96  C102  F116         	movff	?___ftpack+2,?___ftmul+2
 18271  003B9A  0012               	return	
 18272  003B9C                     __end_of___ftmul:
 18273                           	opt stack 0
 18274                           tblptru	equ	0xFF8
 18275                           tblptrh	equ	0xFF7
 18276                           tblptrl	equ	0xFF6
 18277                           tablat	equ	0xFF5
 18278                           prodh	equ	0xFF4
 18279                           prodl	equ	0xFF3
 18280                           intcon	equ	0xFF2
 18281                           postinc0	equ	0xFEE
 18282                           wreg	equ	0xFE8
 18283                           postdec1	equ	0xFE5
 18284                           fsr1l	equ	0xFE1
 18285                           indf2	equ	0xFDF
 18286                           postinc2	equ	0xFDE
 18287                           postdec2	equ	0xFDD
 18288                           plusw2	equ	0xFDB
 18289                           fsr2h	equ	0xFDA
 18290                           fsr2l	equ	0xFD9
 18291                           status	equ	0xFD8
 18292                           
 18293 ;; *************** function ___ftdiv *****************
 18294 ;; Defined at:
 18295 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 18296 ;; Parameters:    Size  Location     Type
 18297 ;;  f1              3   18[BANK1 ] float 
 18298 ;;  f2              3   21[BANK1 ] float 
 18299 ;; Auto vars:     Size  Location     Type
 18300 ;;  f3              3   28[BANK1 ] float 
 18301 ;;  sign            1   32[BANK1 ] unsigned char 
 18302 ;;  exp             1   31[BANK1 ] unsigned char 
 18303 ;;  cntr            1   27[BANK1 ] unsigned char 
 18304 ;; Return value:  Size  Location     Type
 18305 ;;                  3   18[BANK1 ] float 
 18306 ;; Registers used:
 18307 ;;		wreg, status,2, status,0, cstack
 18308 ;; Tracked objects:
 18309 ;;		On entry : 0/0
 18310 ;;		On exit  : 0/0
 18311 ;;		Unchanged: 0/0
 18312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18313 ;;      Params:         0       0       6       0       0       0       0
 18314 ;;      Locals:         0       0       6       0       0       0       0
 18315 ;;      Temps:          0       0       3       0       0       0       0
 18316 ;;      Totals:         0       0      15       0       0       0       0
 18317 ;;Total ram usage:       15 bytes
 18318 ;; Hardware stack levels used:    1
 18319 ;; Hardware stack levels required when called:   13
 18320 ;; This function calls:
 18321 ;;		___ftpack
 18322 ;; This function is called by:
 18323 ;;		_calcVars2ti
 18324 ;;		_integrator
 18325 ;;		_longPressENTER
 18326 ;; This function uses a non-reentrant model
 18327 ;;
 18328                           
 18329                           	psect	text74
 18330  003CFA                     __ptext74:
 18331                           	opt stack 0
 18332  003CFA                     ___ftdiv:
 18333                           	opt stack 12
 18334                           
 18335                           ;incstack = 0
 18336  003CFA  C114  F118         	movff	___ftdiv@f1+2,??___ftdiv
 18337  003CFE  0101               	movlb	1	; () banked
 18338  003D00  6B19               	clrf	(??___ftdiv+1)& (0+255),b
 18339  003D02  6B1A               	clrf	(??___ftdiv+2)& (0+255),b
 18340  003D04  0101               	movlb	1	; () banked
 18341  003D06  3513               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 18342  003D08  0101               	movlb	1	; () banked
 18343  003D0A  3718               	rlcf	??___ftdiv& (0+255),f,b
 18344  003D0C  E301               	bnc	u14501
 18345  003D0E  8119               	bsf	(??___ftdiv+1)& (0+255),0,b
 18346  003D10                     u14501:
 18347  003D10  0101               	movlb	1	; () banked
 18348  003D12  5118               	movf	??___ftdiv& (0+255),w,b
 18349  003D14  0101               	movlb	1	; () banked
 18350  003D16  6F1F               	movwf	___ftdiv@exp& (0+255),b
 18351  003D18  0101               	movlb	1	; () banked
 18352  003D1A  511F               	movf	___ftdiv@exp& (0+255),w,b
 18353  003D1C  A4D8               	btfss	status,2,c
 18354  003D1E  D00A               	goto	l9854
 18355                           
 18356                           ; BSR set to: 1
 18357  003D20  0E00               	movlw	0
 18358  003D22  0101               	movlb	1	; () banked
 18359  003D24  6F12               	movwf	?___ftdiv& (0+255),b
 18360  003D26  0E00               	movlw	0
 18361  003D28  0101               	movlb	1	; () banked
 18362  003D2A  6F13               	movwf	(?___ftdiv+1)& (0+255),b
 18363  003D2C  0E00               	movlw	0
 18364  003D2E  0101               	movlb	1	; () banked
 18365  003D30  6F14               	movwf	(?___ftdiv+2)& (0+255),b
 18366                           
 18367                           ; BSR set to: 1
 18368  003D32  0012               	return	
 18369  003D34                     l9854:
 18370                           
 18371                           ; BSR set to: 1
 18372  003D34  C117  F118         	movff	___ftdiv@f2+2,??___ftdiv
 18373  003D38  0101               	movlb	1	; () banked
 18374  003D3A  6B19               	clrf	(??___ftdiv+1)& (0+255),b
 18375  003D3C  6B1A               	clrf	(??___ftdiv+2)& (0+255),b
 18376  003D3E  0101               	movlb	1	; () banked
 18377  003D40  3516               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 18378  003D42  0101               	movlb	1	; () banked
 18379  003D44  3718               	rlcf	??___ftdiv& (0+255),f,b
 18380  003D46  E301               	bnc	u14521
 18381  003D48  8119               	bsf	(??___ftdiv+1)& (0+255),0,b
 18382  003D4A                     u14521:
 18383  003D4A  0101               	movlb	1	; () banked
 18384  003D4C  5118               	movf	??___ftdiv& (0+255),w,b
 18385  003D4E  0101               	movlb	1	; () banked
 18386  003D50  6F20               	movwf	___ftdiv@sign& (0+255),b
 18387  003D52  0101               	movlb	1	; () banked
 18388  003D54  5120               	movf	___ftdiv@sign& (0+255),w,b
 18389  003D56  A4D8               	btfss	status,2,c
 18390  003D58  D00A               	goto	l9860
 18391                           
 18392                           ; BSR set to: 1
 18393  003D5A  0E00               	movlw	0
 18394  003D5C  0101               	movlb	1	; () banked
 18395  003D5E  6F12               	movwf	?___ftdiv& (0+255),b
 18396  003D60  0E00               	movlw	0
 18397  003D62  0101               	movlb	1	; () banked
 18398  003D64  6F13               	movwf	(?___ftdiv+1)& (0+255),b
 18399  003D66  0E00               	movlw	0
 18400  003D68  0101               	movlb	1	; () banked
 18401  003D6A  6F14               	movwf	(?___ftdiv+2)& (0+255),b
 18402                           
 18403                           ; BSR set to: 1
 18404  003D6C  0012               	return	
 18405  003D6E                     l9860:
 18406                           
 18407                           ; BSR set to: 1
 18408  003D6E  0E00               	movlw	0
 18409  003D70  0101               	movlb	1	; () banked
 18410  003D72  6F1C               	movwf	___ftdiv@f3& (0+255),b
 18411  003D74  0E00               	movlw	0
 18412  003D76  0101               	movlb	1	; () banked
 18413  003D78  6F1D               	movwf	(___ftdiv@f3+1)& (0+255),b
 18414  003D7A  0E00               	movlw	0
 18415  003D7C  0101               	movlb	1	; () banked
 18416  003D7E  6F1E               	movwf	(___ftdiv@f3+2)& (0+255),b
 18417                           
 18418                           ; BSR set to: 1
 18419  003D80  0101               	movlb	1	; () banked
 18420  003D82  5120               	movf	___ftdiv@sign& (0+255),w,b
 18421  003D84  0F89               	addlw	137
 18422  003D86  0101               	movlb	1	; () banked
 18423  003D88  5F1F               	subwf	___ftdiv@exp& (0+255),f,b
 18424                           
 18425                           ; BSR set to: 1
 18426  003D8A  C114  F120         	movff	___ftdiv@f1+2,___ftdiv@sign
 18427                           
 18428                           ; BSR set to: 1
 18429  003D8E  0101               	movlb	1	; () banked
 18430  003D90  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 18431  003D92  0101               	movlb	1	; () banked
 18432  003D94  1B20               	xorwf	___ftdiv@sign& (0+255),f,b
 18433                           
 18434                           ; BSR set to: 1
 18435  003D96  0E80               	movlw	128
 18436  003D98  0101               	movlb	1	; () banked
 18437  003D9A  1720               	andwf	___ftdiv@sign& (0+255),f,b
 18438                           
 18439                           ; BSR set to: 1
 18440  003D9C  0101               	movlb	1	; () banked
 18441  003D9E  8F13               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 18442                           
 18443                           ; BSR set to: 1
 18444  003DA0  0EFF               	movlw	255
 18445  003DA2  0101               	movlb	1	; () banked
 18446  003DA4  1712               	andwf	___ftdiv@f1& (0+255),f,b
 18447  003DA6  0EFF               	movlw	255
 18448  003DA8  0101               	movlb	1	; () banked
 18449  003DAA  1713               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 18450  003DAC  0E00               	movlw	0
 18451  003DAE  0101               	movlb	1	; () banked
 18452  003DB0  1714               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 18453                           
 18454                           ; BSR set to: 1
 18455  003DB2  0101               	movlb	1	; () banked
 18456  003DB4  8F16               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 18457                           
 18458                           ; BSR set to: 1
 18459  003DB6  0EFF               	movlw	255
 18460  003DB8  0101               	movlb	1	; () banked
 18461  003DBA  1715               	andwf	___ftdiv@f2& (0+255),f,b
 18462  003DBC  0EFF               	movlw	255
 18463  003DBE  0101               	movlb	1	; () banked
 18464  003DC0  1716               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 18465  003DC2  0E00               	movlw	0
 18466  003DC4  0101               	movlb	1	; () banked
 18467  003DC6  1717               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 18468                           
 18469                           ; BSR set to: 1
 18470  003DC8  0E18               	movlw	24
 18471  003DCA  0101               	movlb	1	; () banked
 18472  003DCC  6F1B               	movwf	___ftdiv@cntr& (0+255),b
 18473  003DCE                     l9880:
 18474                           
 18475                           ; BSR set to: 1
 18476  003DCE  0101               	movlb	1	; () banked
 18477  003DD0  90D8               	bcf	status,0,c
 18478  003DD2  371C               	rlcf	___ftdiv@f3& (0+255),f,b
 18479  003DD4  371D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 18480  003DD6  371E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 18481                           
 18482                           ; BSR set to: 1
 18483  003DD8  0101               	movlb	1	; () banked
 18484  003DDA  5115               	movf	___ftdiv@f2& (0+255),w,b
 18485  003DDC  0101               	movlb	1	; () banked
 18486  003DDE  5D12               	subwf	___ftdiv@f1& (0+255),w,b
 18487  003DE0  0101               	movlb	1	; () banked
 18488  003DE2  5116               	movf	(___ftdiv@f2+1)& (0+255),w,b
 18489  003DE4  0101               	movlb	1	; () banked
 18490  003DE6  5913               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 18491  003DE8  0101               	movlb	1	; () banked
 18492  003DEA  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 18493  003DEC  0101               	movlb	1	; () banked
 18494  003DEE  5914               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 18495  003DF0  A0D8               	btfss	status,0,c
 18496  003DF2  D00E               	goto	l1369
 18497                           
 18498                           ; BSR set to: 1
 18499  003DF4  0101               	movlb	1	; () banked
 18500  003DF6  5115               	movf	___ftdiv@f2& (0+255),w,b
 18501  003DF8  0101               	movlb	1	; () banked
 18502  003DFA  5F12               	subwf	___ftdiv@f1& (0+255),f,b
 18503  003DFC  0101               	movlb	1	; () banked
 18504  003DFE  5116               	movf	(___ftdiv@f2+1)& (0+255),w,b
 18505  003E00  0101               	movlb	1	; () banked
 18506  003E02  5B13               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 18507  003E04  0101               	movlb	1	; () banked
 18508  003E06  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 18509  003E08  0101               	movlb	1	; () banked
 18510  003E0A  5B14               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 18511                           
 18512                           ; BSR set to: 1
 18513  003E0C  0101               	movlb	1	; () banked
 18514  003E0E  811C               	bsf	___ftdiv@f3& (0+255),0,b
 18515  003E10                     l1369:
 18516                           
 18517                           ; BSR set to: 1
 18518  003E10  0101               	movlb	1	; () banked
 18519  003E12  90D8               	bcf	status,0,c
 18520  003E14  3712               	rlcf	___ftdiv@f1& (0+255),f,b
 18521  003E16  3713               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 18522  003E18  3714               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 18523                           
 18524                           ; BSR set to: 1
 18525  003E1A  0101               	movlb	1	; () banked
 18526  003E1C  2F1B               	decfsz	___ftdiv@cntr& (0+255),f,b
 18527  003E1E  D7D7               	goto	l9880
 18528                           
 18529                           ; BSR set to: 1
 18530                           
 18531                           ; BSR set to: 1
 18532  003E20  C11C  F100         	movff	___ftdiv@f3,___ftpack@arg
 18533  003E24  C11D  F101         	movff	___ftdiv@f3+1,___ftpack@arg+1
 18534  003E28  C11E  F102         	movff	___ftdiv@f3+2,___ftpack@arg+2
 18535  003E2C  C11F  F103         	movff	___ftdiv@exp,___ftpack@exp
 18536  003E30  C120  F104         	movff	___ftdiv@sign,___ftpack@sign
 18537  003E34  EC69  F025         	call	___ftpack	;wreg free
 18538  003E38  C100  F112         	movff	?___ftpack,?___ftdiv
 18539  003E3C  C101  F113         	movff	?___ftpack+1,?___ftdiv+1
 18540  003E40  C102  F114         	movff	?___ftpack+2,?___ftdiv+2
 18541  003E44  0012               	return	
 18542  003E46                     __end_of___ftdiv:
 18543                           	opt stack 0
 18544                           tblptru	equ	0xFF8
 18545                           tblptrh	equ	0xFF7
 18546                           tblptrl	equ	0xFF6
 18547                           tablat	equ	0xFF5
 18548                           prodh	equ	0xFF4
 18549                           prodl	equ	0xFF3
 18550                           intcon	equ	0xFF2
 18551                           postinc0	equ	0xFEE
 18552                           wreg	equ	0xFE8
 18553                           postdec1	equ	0xFE5
 18554                           fsr1l	equ	0xFE1
 18555                           indf2	equ	0xFDF
 18556                           postinc2	equ	0xFDE
 18557                           postdec2	equ	0xFDD
 18558                           plusw2	equ	0xFDB
 18559                           fsr2h	equ	0xFDA
 18560                           fsr2l	equ	0xFD9
 18561                           status	equ	0xFD8
 18562                           
 18563 ;; *************** function ___ftadd *****************
 18564 ;; Defined at:
 18565 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 18566 ;; Parameters:    Size  Location     Type
 18567 ;;  f1              3   45[BANK1 ] float 
 18568 ;;  f2              3   48[BANK1 ] float 
 18569 ;; Auto vars:     Size  Location     Type
 18570 ;;  exp1            1   56[BANK1 ] unsigned char 
 18571 ;;  exp2            1   55[BANK1 ] unsigned char 
 18572 ;;  sign            1   54[BANK1 ] unsigned char 
 18573 ;; Return value:  Size  Location     Type
 18574 ;;                  3   45[BANK1 ] float 
 18575 ;; Registers used:
 18576 ;;		wreg, status,2, status,0, cstack
 18577 ;; Tracked objects:
 18578 ;;		On entry : 0/0
 18579 ;;		On exit  : 0/0
 18580 ;;		Unchanged: 0/0
 18581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18582 ;;      Params:         0       0       6       0       0       0       0
 18583 ;;      Locals:         0       0       3       0       0       0       0
 18584 ;;      Temps:          0       0       3       0       0       0       0
 18585 ;;      Totals:         0       0      12       0       0       0       0
 18586 ;;Total ram usage:       12 bytes
 18587 ;; Hardware stack levels used:    1
 18588 ;; Hardware stack levels required when called:   13
 18589 ;; This function calls:
 18590 ;;		___ftpack
 18591 ;; This function is called by:
 18592 ;;		_longPressENTER
 18593 ;;		_printf
 18594 ;;		___ftsub
 18595 ;; This function uses a non-reentrant model
 18596 ;;
 18597                           
 18598                           	psect	text75
 18599  0027D8                     __ptext75:
 18600                           	opt stack 0
 18601  0027D8                     ___ftadd:
 18602                           	opt stack 13
 18603                           
 18604                           ;incstack = 0
 18605  0027D8  C12F  F133         	movff	___ftadd@f1+2,??___ftadd
 18606  0027DC  0101               	movlb	1	; () banked
 18607  0027DE  6B34               	clrf	(??___ftadd+1)& (0+255),b
 18608  0027E0  6B35               	clrf	(??___ftadd+2)& (0+255),b
 18609  0027E2  0101               	movlb	1	; () banked
 18610  0027E4  352E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 18611  0027E6  0101               	movlb	1	; () banked
 18612  0027E8  3733               	rlcf	??___ftadd& (0+255),f,b
 18613  0027EA  E301               	bnc	u14291
 18614  0027EC  8134               	bsf	(??___ftadd+1)& (0+255),0,b
 18615  0027EE                     u14291:
 18616  0027EE  0101               	movlb	1	; () banked
 18617  0027F0  5133               	movf	??___ftadd& (0+255),w,b
 18618  0027F2  0101               	movlb	1	; () banked
 18619  0027F4  6F38               	movwf	___ftadd@exp1& (0+255),b
 18620  0027F6  C132  F133         	movff	___ftadd@f2+2,??___ftadd
 18621  0027FA  0101               	movlb	1	; () banked
 18622  0027FC  6B34               	clrf	(??___ftadd+1)& (0+255),b
 18623  0027FE  6B35               	clrf	(??___ftadd+2)& (0+255),b
 18624  002800  0101               	movlb	1	; () banked
 18625  002802  3531               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 18626  002804  0101               	movlb	1	; () banked
 18627  002806  3733               	rlcf	??___ftadd& (0+255),f,b
 18628  002808  E301               	bnc	u14301
 18629  00280A  8134               	bsf	(??___ftadd+1)& (0+255),0,b
 18630  00280C                     u14301:
 18631  00280C  0101               	movlb	1	; () banked
 18632  00280E  5133               	movf	??___ftadd& (0+255),w,b
 18633  002810  0101               	movlb	1	; () banked
 18634  002812  6F37               	movwf	___ftadd@exp2& (0+255),b
 18635                           
 18636                           ; BSR set to: 1
 18637  002814  0101               	movlb	1	; () banked
 18638  002816  5138               	movf	___ftadd@exp1& (0+255),w,b
 18639  002818  0101               	movlb	1	; () banked
 18640  00281A  B4D8               	btfsc	status,2,c
 18641  00281C  D011               	goto	l1334
 18642                           
 18643                           ; BSR set to: 1
 18644  00281E  0101               	movlb	1	; () banked
 18645  002820  5137               	movf	___ftadd@exp2& (0+255),w,b
 18646  002822  0101               	movlb	1	; () banked
 18647  002824  5D38               	subwf	___ftadd@exp1& (0+255),w,b
 18648  002826  B0D8               	btfsc	status,0,c
 18649  002828  D012               	goto	l9786
 18650                           
 18651                           ; BSR set to: 1
 18652  00282A  0101               	movlb	1	; () banked
 18653  00282C  5138               	movf	___ftadd@exp1& (0+255),w,b
 18654  00282E  0800               	sublw	0
 18655  002830  0101               	movlb	1	; () banked
 18656  002832  2537               	addwf	___ftadd@exp2& (0+255),w,b
 18657  002834  0101               	movlb	1	; () banked
 18658  002836  6F33               	movwf	??___ftadd& (0+255),b
 18659  002838  0E18               	movlw	24
 18660  00283A  0101               	movlb	1	; () banked
 18661  00283C  6533               	cpfsgt	??___ftadd& (0+255),b
 18662  00283E  D007               	goto	l9786
 18663  002840                     l1334:
 18664                           
 18665                           ; BSR set to: 1
 18666  002840  C130  F12D         	movff	___ftadd@f2,?___ftadd
 18667  002844  C131  F12E         	movff	___ftadd@f2+1,?___ftadd+1
 18668  002848  C132  F12F         	movff	___ftadd@f2+2,?___ftadd+2
 18669  00284C  0012               	return	
 18670  00284E                     l9786:
 18671                           
 18672                           ; BSR set to: 1
 18673  00284E  0101               	movlb	1	; () banked
 18674  002850  5137               	movf	___ftadd@exp2& (0+255),w,b
 18675  002852  0101               	movlb	1	; () banked
 18676  002854  B4D8               	btfsc	status,2,c
 18677  002856  D011               	goto	l1338
 18678                           
 18679                           ; BSR set to: 1
 18680  002858  0101               	movlb	1	; () banked
 18681  00285A  5138               	movf	___ftadd@exp1& (0+255),w,b
 18682  00285C  0101               	movlb	1	; () banked
 18683  00285E  5D37               	subwf	___ftadd@exp2& (0+255),w,b
 18684  002860  B0D8               	btfsc	status,0,c
 18685  002862  D012               	goto	l9792
 18686                           
 18687                           ; BSR set to: 1
 18688  002864  0101               	movlb	1	; () banked
 18689  002866  5137               	movf	___ftadd@exp2& (0+255),w,b
 18690  002868  0800               	sublw	0
 18691  00286A  0101               	movlb	1	; () banked
 18692  00286C  2538               	addwf	___ftadd@exp1& (0+255),w,b
 18693  00286E  0101               	movlb	1	; () banked
 18694  002870  6F33               	movwf	??___ftadd& (0+255),b
 18695  002872  0E18               	movlw	24
 18696  002874  0101               	movlb	1	; () banked
 18697  002876  6533               	cpfsgt	??___ftadd& (0+255),b
 18698  002878  D007               	goto	l9792
 18699  00287A                     l1338:
 18700                           
 18701                           ; BSR set to: 1
 18702  00287A  C12D  F12D         	movff	___ftadd@f1,?___ftadd
 18703  00287E  C12E  F12E         	movff	___ftadd@f1+1,?___ftadd+1
 18704  002882  C12F  F12F         	movff	___ftadd@f1+2,?___ftadd+2
 18705  002886  0012               	return	
 18706  002888                     l9792:
 18707                           
 18708                           ; BSR set to: 1
 18709  002888  0E06               	movlw	6
 18710  00288A  0101               	movlb	1	; () banked
 18711  00288C  6F36               	movwf	___ftadd@sign& (0+255),b
 18712                           
 18713                           ; BSR set to: 1
 18714  00288E  0101               	movlb	1	; () banked
 18715  002890  AF2F               	btfss	(___ftadd@f1+2)& (0+255),7,b
 18716  002892  D002               	goto	l9798
 18717                           
 18718                           ; BSR set to: 1
 18719  002894  0101               	movlb	1	; () banked
 18720  002896  8F36               	bsf	___ftadd@sign& (0+255),7,b
 18721  002898                     l9798:
 18722                           
 18723                           ; BSR set to: 1
 18724  002898  0101               	movlb	1	; () banked
 18725  00289A  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
 18726  00289C  D002               	goto	l1340
 18727                           
 18728                           ; BSR set to: 1
 18729  00289E  0101               	movlb	1	; () banked
 18730  0028A0  8D36               	bsf	___ftadd@sign& (0+255),6,b
 18731  0028A2                     l1340:
 18732                           
 18733                           ; BSR set to: 1
 18734  0028A2  0101               	movlb	1	; () banked
 18735  0028A4  8F2E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 18736                           
 18737                           ; BSR set to: 1
 18738  0028A6  0EFF               	movlw	255
 18739  0028A8  0101               	movlb	1	; () banked
 18740  0028AA  172D               	andwf	___ftadd@f1& (0+255),f,b
 18741  0028AC  0EFF               	movlw	255
 18742  0028AE  0101               	movlb	1	; () banked
 18743  0028B0  172E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 18744  0028B2  0E00               	movlw	0
 18745  0028B4  0101               	movlb	1	; () banked
 18746  0028B6  172F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 18747  0028B8  0101               	movlb	1	; () banked
 18748  0028BA  8F31               	bsf	(___ftadd@f2+1)& (0+255),7,b
 18749                           
 18750                           ; BSR set to: 1
 18751  0028BC  0EFF               	movlw	255
 18752  0028BE  0101               	movlb	1	; () banked
 18753  0028C0  1730               	andwf	___ftadd@f2& (0+255),f,b
 18754  0028C2  0EFF               	movlw	255
 18755  0028C4  0101               	movlb	1	; () banked
 18756  0028C6  1731               	andwf	(___ftadd@f2+1)& (0+255),f,b
 18757  0028C8  0E00               	movlw	0
 18758  0028CA  0101               	movlb	1	; () banked
 18759  0028CC  1732               	andwf	(___ftadd@f2+2)& (0+255),f,b
 18760                           
 18761                           ; BSR set to: 1
 18762  0028CE  0101               	movlb	1	; () banked
 18763  0028D0  5137               	movf	___ftadd@exp2& (0+255),w,b
 18764  0028D2  0101               	movlb	1	; () banked
 18765  0028D4  5D38               	subwf	___ftadd@exp1& (0+255),w,b
 18766  0028D6  B0D8               	btfsc	status,0,c
 18767  0028D8  D025               	goto	l9818
 18768  0028DA                     l9808:
 18769                           
 18770                           ; BSR set to: 1
 18771  0028DA  0101               	movlb	1	; () banked
 18772  0028DC  90D8               	bcf	status,0,c
 18773  0028DE  3730               	rlcf	___ftadd@f2& (0+255),f,b
 18774  0028E0  3731               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 18775  0028E2  3732               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 18776  0028E4  0101               	movlb	1	; () banked
 18777  0028E6  0737               	decf	___ftadd@exp2& (0+255),f,b
 18778                           
 18779                           ; BSR set to: 1
 18780  0028E8  0101               	movlb	1	; () banked
 18781  0028EA  5138               	movf	___ftadd@exp1& (0+255),w,b
 18782  0028EC  0101               	movlb	1	; () banked
 18783  0028EE  1937               	xorwf	___ftadd@exp2& (0+255),w,b
 18784  0028F0  B4D8               	btfsc	status,2,c
 18785  0028F2  D011               	goto	l9816
 18786                           
 18787                           ; BSR set to: 1
 18788  0028F4  0101               	movlb	1	; () banked
 18789  0028F6  0736               	decf	___ftadd@sign& (0+255),f,b
 18790  0028F8  C136  F133         	movff	___ftadd@sign,??___ftadd
 18791  0028FC  0E07               	movlw	7
 18792  0028FE  0101               	movlb	1	; () banked
 18793  002900  1733               	andwf	??___ftadd& (0+255),f,b
 18794  002902  B4D8               	btfsc	status,2,c
 18795  002904  D008               	goto	l9816
 18796  002906  D7E9               	goto	l9808
 18797  002908                     l9814:
 18798                           
 18799                           ; BSR set to: 1
 18800  002908  0101               	movlb	1	; () banked
 18801  00290A  90D8               	bcf	status,0,c
 18802  00290C  332F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 18803  00290E  332E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 18804  002910  332D               	rrcf	___ftadd@f1& (0+255),f,b
 18805  002912  0101               	movlb	1	; () banked
 18806  002914  2B38               	incf	___ftadd@exp1& (0+255),f,b
 18807  002916                     l9816:
 18808                           
 18809                           ; BSR set to: 1
 18810  002916  0101               	movlb	1	; () banked
 18811  002918  5137               	movf	___ftadd@exp2& (0+255),w,b
 18812  00291A  0101               	movlb	1	; () banked
 18813  00291C  1938               	xorwf	___ftadd@exp1& (0+255),w,b
 18814  00291E  B4D8               	btfsc	status,2,c
 18815  002920  D02B               	goto	l1349
 18816  002922  D7F2               	goto	l9814
 18817  002924                     l9818:
 18818                           
 18819                           ; BSR set to: 1
 18820  002924  0101               	movlb	1	; () banked
 18821  002926  5138               	movf	___ftadd@exp1& (0+255),w,b
 18822  002928  0101               	movlb	1	; () banked
 18823  00292A  5D37               	subwf	___ftadd@exp2& (0+255),w,b
 18824  00292C  B0D8               	btfsc	status,0,c
 18825  00292E  D024               	goto	l1349
 18826  002930                     l9820:
 18827                           
 18828                           ; BSR set to: 1
 18829  002930  0101               	movlb	1	; () banked
 18830  002932  90D8               	bcf	status,0,c
 18831  002934  372D               	rlcf	___ftadd@f1& (0+255),f,b
 18832  002936  372E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 18833  002938  372F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 18834  00293A  0101               	movlb	1	; () banked
 18835  00293C  0738               	decf	___ftadd@exp1& (0+255),f,b
 18836                           
 18837                           ; BSR set to: 1
 18838  00293E  0101               	movlb	1	; () banked
 18839  002940  5138               	movf	___ftadd@exp1& (0+255),w,b
 18840  002942  0101               	movlb	1	; () banked
 18841  002944  1937               	xorwf	___ftadd@exp2& (0+255),w,b
 18842  002946  B4D8               	btfsc	status,2,c
 18843  002948  D011               	goto	l9828
 18844                           
 18845                           ; BSR set to: 1
 18846  00294A  0101               	movlb	1	; () banked
 18847  00294C  0736               	decf	___ftadd@sign& (0+255),f,b
 18848  00294E  C136  F133         	movff	___ftadd@sign,??___ftadd
 18849  002952  0E07               	movlw	7
 18850  002954  0101               	movlb	1	; () banked
 18851  002956  1733               	andwf	??___ftadd& (0+255),f,b
 18852  002958  B4D8               	btfsc	status,2,c
 18853  00295A  D008               	goto	l9828
 18854  00295C  D7E9               	goto	l9820
 18855  00295E                     l9826:
 18856                           
 18857                           ; BSR set to: 1
 18858  00295E  0101               	movlb	1	; () banked
 18859  002960  90D8               	bcf	status,0,c
 18860  002962  3332               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 18861  002964  3331               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 18862  002966  3330               	rrcf	___ftadd@f2& (0+255),f,b
 18863  002968  0101               	movlb	1	; () banked
 18864  00296A  2B37               	incf	___ftadd@exp2& (0+255),f,b
 18865  00296C                     l9828:
 18866                           
 18867                           ; BSR set to: 1
 18868  00296C  0101               	movlb	1	; () banked
 18869  00296E  5137               	movf	___ftadd@exp2& (0+255),w,b
 18870  002970  0101               	movlb	1	; () banked
 18871  002972  1938               	xorwf	___ftadd@exp1& (0+255),w,b
 18872  002974  A4D8               	btfss	status,2,c
 18873  002976  D7F3               	goto	l9826
 18874  002978                     l1349:
 18875                           
 18876                           ; BSR set to: 1
 18877  002978  0101               	movlb	1	; () banked
 18878  00297A  AF36               	btfss	___ftadd@sign& (0+255),7,b
 18879  00297C  D012               	goto	l1358
 18880                           
 18881                           ; BSR set to: 1
 18882  00297E  0EFF               	movlw	255
 18883  002980  0101               	movlb	1	; () banked
 18884  002982  1B2D               	xorwf	___ftadd@f1& (0+255),f,b
 18885  002984  0EFF               	movlw	255
 18886  002986  0101               	movlb	1	; () banked
 18887  002988  1B2E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 18888  00298A  0EFF               	movlw	255
 18889  00298C  0101               	movlb	1	; () banked
 18890  00298E  1B2F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 18891  002990  0E01               	movlw	1
 18892  002992  0101               	movlb	1	; () banked
 18893  002994  272D               	addwf	___ftadd@f1& (0+255),f,b
 18894  002996  0E00               	movlw	0
 18895  002998  0101               	movlb	1	; () banked
 18896  00299A  232E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 18897  00299C  0E00               	movlw	0
 18898  00299E  0101               	movlb	1	; () banked
 18899  0029A0  232F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 18900  0029A2                     l1358:
 18901                           
 18902                           ; BSR set to: 1
 18903  0029A2  0101               	movlb	1	; () banked
 18904  0029A4  AD36               	btfss	___ftadd@sign& (0+255),6,b
 18905  0029A6  D012               	goto	l9834
 18906                           
 18907                           ; BSR set to: 1
 18908  0029A8  0EFF               	movlw	255
 18909  0029AA  0101               	movlb	1	; () banked
 18910  0029AC  1B30               	xorwf	___ftadd@f2& (0+255),f,b
 18911  0029AE  0EFF               	movlw	255
 18912  0029B0  0101               	movlb	1	; () banked
 18913  0029B2  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 18914  0029B4  0EFF               	movlw	255
 18915  0029B6  0101               	movlb	1	; () banked
 18916  0029B8  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 18917  0029BA  0E01               	movlw	1
 18918  0029BC  0101               	movlb	1	; () banked
 18919  0029BE  2730               	addwf	___ftadd@f2& (0+255),f,b
 18920  0029C0  0E00               	movlw	0
 18921  0029C2  0101               	movlb	1	; () banked
 18922  0029C4  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18923  0029C6  0E00               	movlw	0
 18924  0029C8  0101               	movlb	1	; () banked
 18925  0029CA  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18926  0029CC                     l9834:
 18927                           
 18928                           ; BSR set to: 1
 18929  0029CC  0E00               	movlw	0
 18930  0029CE  0101               	movlb	1	; () banked
 18931  0029D0  6F36               	movwf	___ftadd@sign& (0+255),b
 18932                           
 18933                           ; BSR set to: 1
 18934  0029D2  0101               	movlb	1	; () banked
 18935  0029D4  512D               	movf	___ftadd@f1& (0+255),w,b
 18936  0029D6  0101               	movlb	1	; () banked
 18937  0029D8  2730               	addwf	___ftadd@f2& (0+255),f,b
 18938  0029DA  0101               	movlb	1	; () banked
 18939  0029DC  512E               	movf	(___ftadd@f1+1)& (0+255),w,b
 18940  0029DE  0101               	movlb	1	; () banked
 18941  0029E0  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18942  0029E2  0101               	movlb	1	; () banked
 18943  0029E4  512F               	movf	(___ftadd@f1+2)& (0+255),w,b
 18944  0029E6  0101               	movlb	1	; () banked
 18945  0029E8  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18946                           
 18947                           ; BSR set to: 1
 18948  0029EA  0101               	movlb	1	; () banked
 18949  0029EC  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
 18950  0029EE  D015               	goto	l9844
 18951                           
 18952                           ; BSR set to: 1
 18953  0029F0  0EFF               	movlw	255
 18954  0029F2  0101               	movlb	1	; () banked
 18955  0029F4  1B30               	xorwf	___ftadd@f2& (0+255),f,b
 18956  0029F6  0EFF               	movlw	255
 18957  0029F8  0101               	movlb	1	; () banked
 18958  0029FA  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 18959  0029FC  0EFF               	movlw	255
 18960  0029FE  0101               	movlb	1	; () banked
 18961  002A00  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 18962  002A02  0E01               	movlw	1
 18963  002A04  0101               	movlb	1	; () banked
 18964  002A06  2730               	addwf	___ftadd@f2& (0+255),f,b
 18965  002A08  0E00               	movlw	0
 18966  002A0A  0101               	movlb	1	; () banked
 18967  002A0C  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18968  002A0E  0E00               	movlw	0
 18969  002A10  0101               	movlb	1	; () banked
 18970  002A12  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18971                           
 18972                           ; BSR set to: 1
 18973  002A14  0E01               	movlw	1
 18974  002A16  0101               	movlb	1	; () banked
 18975  002A18  6F36               	movwf	___ftadd@sign& (0+255),b
 18976  002A1A                     l9844:
 18977                           
 18978                           ; BSR set to: 1
 18979  002A1A  C130  F100         	movff	___ftadd@f2,___ftpack@arg
 18980  002A1E  C131  F101         	movff	___ftadd@f2+1,___ftpack@arg+1
 18981  002A22  C132  F102         	movff	___ftadd@f2+2,___ftpack@arg+2
 18982  002A26  C138  F103         	movff	___ftadd@exp1,___ftpack@exp
 18983  002A2A  C136  F104         	movff	___ftadd@sign,___ftpack@sign
 18984  002A2E  EC69  F025         	call	___ftpack	;wreg free
 18985  002A32  C100  F12D         	movff	?___ftpack,?___ftadd
 18986  002A36  C101  F12E         	movff	?___ftpack+1,?___ftadd+1
 18987  002A3A  C102  F12F         	movff	?___ftpack+2,?___ftadd+2
 18988  002A3E  0012               	return	
 18989  002A40                     __end_of___ftadd:
 18990                           	opt stack 0
 18991                           tblptru	equ	0xFF8
 18992                           tblptrh	equ	0xFF7
 18993                           tblptrl	equ	0xFF6
 18994                           tablat	equ	0xFF5
 18995                           prodh	equ	0xFF4
 18996                           prodl	equ	0xFF3
 18997                           intcon	equ	0xFF2
 18998                           postinc0	equ	0xFEE
 18999                           wreg	equ	0xFE8
 19000                           postdec1	equ	0xFE5
 19001                           fsr1l	equ	0xFE1
 19002                           indf2	equ	0xFDF
 19003                           postinc2	equ	0xFDE
 19004                           postdec2	equ	0xFDD
 19005                           plusw2	equ	0xFDB
 19006                           fsr2h	equ	0xFDA
 19007                           fsr2l	equ	0xFD9
 19008                           status	equ	0xFD8
 19009                           
 19010 ;; *************** function ___ftpack *****************
 19011 ;; Defined at:
 19012 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 19013 ;; Parameters:    Size  Location     Type
 19014 ;;  arg             3    0[BANK1 ] unsigned um
 19015 ;;  exp             1    3[BANK1 ] unsigned char 
 19016 ;;  sign            1    4[BANK1 ] unsigned char 
 19017 ;; Auto vars:     Size  Location     Type
 19018 ;;		None
 19019 ;; Return value:  Size  Location     Type
 19020 ;;                  3    0[BANK1 ] float 
 19021 ;; Registers used:
 19022 ;;		wreg, status,2, status,0
 19023 ;; Tracked objects:
 19024 ;;		On entry : 0/0
 19025 ;;		On exit  : 0/0
 19026 ;;		Unchanged: 0/0
 19027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19028 ;;      Params:         0       0       5       0       0       0       0
 19029 ;;      Locals:         0       0       0       0       0       0       0
 19030 ;;      Temps:          0       0       3       0       0       0       0
 19031 ;;      Totals:         0       0       8       0       0       0       0
 19032 ;;Total ram usage:        8 bytes
 19033 ;; Hardware stack levels used:    1
 19034 ;; Hardware stack levels required when called:   12
 19035 ;; This function calls:
 19036 ;;		Nothing
 19037 ;; This function is called by:
 19038 ;;		___altoft
 19039 ;;		___ftadd
 19040 ;;		___ftdiv
 19041 ;;		___ftmul
 19042 ;;		___lltoft
 19043 ;; This function uses a non-reentrant model
 19044 ;;
 19045                           
 19046                           	psect	text76
 19047  004AD2                     __ptext76:
 19048                           	opt stack 0
 19049  004AD2                     ___ftpack:
 19050                           	opt stack 15
 19051                           
 19052                           ;incstack = 0
 19053  004AD2  0101               	movlb	1	; () banked
 19054  004AD4  5103               	movf	___ftpack@exp& (0+255),w,b
 19055  004AD6  0101               	movlb	1	; () banked
 19056  004AD8  B4D8               	btfsc	status,2,c
 19057  004ADA  D008               	goto	l9718
 19058                           
 19059                           ; BSR set to: 1
 19060  004ADC  0101               	movlb	1	; () banked
 19061  004ADE  5100               	movf	___ftpack@arg& (0+255),w,b
 19062  004AE0  0101               	movlb	1	; () banked
 19063  004AE2  1101               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 19064  004AE4  0101               	movlb	1	; () banked
 19065  004AE6  1102               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 19066  004AE8  A4D8               	btfss	status,2,c
 19067  004AEA  D011               	goto	l9724
 19068  004AEC                     l9718:
 19069                           
 19070                           ; BSR set to: 1
 19071  004AEC  0E00               	movlw	0
 19072  004AEE  0101               	movlb	1	; () banked
 19073  004AF0  6F00               	movwf	?___ftpack& (0+255),b
 19074  004AF2  0E00               	movlw	0
 19075  004AF4  0101               	movlb	1	; () banked
 19076  004AF6  6F01               	movwf	(?___ftpack+1)& (0+255),b
 19077  004AF8  0E00               	movlw	0
 19078  004AFA  0101               	movlb	1	; () banked
 19079  004AFC  6F02               	movwf	(?___ftpack+2)& (0+255),b
 19080                           
 19081                           ; BSR set to: 1
 19082  004AFE  0012               	return	
 19083  004B00                     l9722:
 19084                           
 19085                           ; BSR set to: 1
 19086  004B00  0101               	movlb	1	; () banked
 19087  004B02  2B03               	incf	___ftpack@exp& (0+255),f,b
 19088  004B04  0101               	movlb	1	; () banked
 19089  004B06  90D8               	bcf	status,0,c
 19090  004B08  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 19091  004B0A  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 19092  004B0C  3300               	rrcf	___ftpack@arg& (0+255),f,b
 19093  004B0E                     l9724:
 19094                           
 19095                           ; BSR set to: 1
 19096  004B0E  0E00               	movlw	0
 19097  004B10  0101               	movlb	1	; () banked
 19098  004B12  1500               	andwf	___ftpack@arg& (0+255),w,b
 19099  004B14  0101               	movlb	1	; () banked
 19100  004B16  6F05               	movwf	??___ftpack& (0+255),b
 19101  004B18  0E00               	movlw	0
 19102  004B1A  0101               	movlb	1	; () banked
 19103  004B1C  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
 19104  004B1E  0101               	movlb	1	; () banked
 19105  004B20  6F06               	movwf	(??___ftpack+1)& (0+255),b
 19106  004B22  0EFE               	movlw	254
 19107  004B24  0101               	movlb	1	; () banked
 19108  004B26  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
 19109  004B28  0101               	movlb	1	; () banked
 19110  004B2A  6F07               	movwf	(??___ftpack+2)& (0+255),b
 19111  004B2C  0101               	movlb	1	; () banked
 19112  004B2E  5105               	movf	??___ftpack& (0+255),w,b
 19113  004B30  0101               	movlb	1	; () banked
 19114  004B32  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
 19115  004B34  0101               	movlb	1	; () banked
 19116  004B36  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
 19117  004B38  B4D8               	btfsc	status,2,c
 19118  004B3A  D011               	goto	l9730
 19119  004B3C  D7E1               	goto	l9722
 19120  004B3E                     l9726:
 19121                           
 19122                           ; BSR set to: 1
 19123  004B3E  0101               	movlb	1	; () banked
 19124  004B40  2B03               	incf	___ftpack@exp& (0+255),f,b
 19125                           
 19126                           ; BSR set to: 1
 19127  004B42  0E01               	movlw	1
 19128  004B44  0101               	movlb	1	; () banked
 19129  004B46  2700               	addwf	___ftpack@arg& (0+255),f,b
 19130  004B48  0E00               	movlw	0
 19131  004B4A  0101               	movlb	1	; () banked
 19132  004B4C  2301               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 19133  004B4E  0E00               	movlw	0
 19134  004B50  0101               	movlb	1	; () banked
 19135  004B52  2302               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 19136  004B54  0101               	movlb	1	; () banked
 19137  004B56  90D8               	bcf	status,0,c
 19138  004B58  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 19139  004B5A  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 19140  004B5C  3300               	rrcf	___ftpack@arg& (0+255),f,b
 19141  004B5E                     l9730:
 19142                           
 19143                           ; BSR set to: 1
 19144  004B5E  0E00               	movlw	0
 19145  004B60  0101               	movlb	1	; () banked
 19146  004B62  1500               	andwf	___ftpack@arg& (0+255),w,b
 19147  004B64  0101               	movlb	1	; () banked
 19148  004B66  6F05               	movwf	??___ftpack& (0+255),b
 19149  004B68  0E00               	movlw	0
 19150  004B6A  0101               	movlb	1	; () banked
 19151  004B6C  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
 19152  004B6E  0101               	movlb	1	; () banked
 19153  004B70  6F06               	movwf	(??___ftpack+1)& (0+255),b
 19154  004B72  0EFF               	movlw	255
 19155  004B74  0101               	movlb	1	; () banked
 19156  004B76  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
 19157  004B78  0101               	movlb	1	; () banked
 19158  004B7A  6F07               	movwf	(??___ftpack+2)& (0+255),b
 19159  004B7C  0101               	movlb	1	; () banked
 19160  004B7E  5105               	movf	??___ftpack& (0+255),w,b
 19161  004B80  0101               	movlb	1	; () banked
 19162  004B82  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
 19163  004B84  0101               	movlb	1	; () banked
 19164  004B86  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
 19165  004B88  B4D8               	btfsc	status,2,c
 19166  004B8A  D008               	goto	l9734
 19167  004B8C  D7D8               	goto	l9726
 19168  004B8E                     l9732:
 19169                           
 19170                           ; BSR set to: 1
 19171  004B8E  0101               	movlb	1	; () banked
 19172  004B90  0703               	decf	___ftpack@exp& (0+255),f,b
 19173  004B92  0101               	movlb	1	; () banked
 19174  004B94  90D8               	bcf	status,0,c
 19175  004B96  3700               	rlcf	___ftpack@arg& (0+255),f,b
 19176  004B98  3701               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 19177  004B9A  3702               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 19178  004B9C                     l9734:
 19179                           
 19180                           ; BSR set to: 1
 19181  004B9C  0101               	movlb	1	; () banked
 19182  004B9E  BF01               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 19183  004BA0  D004               	goto	l1311
 19184                           
 19185                           ; BSR set to: 1
 19186  004BA2  0E02               	movlw	2
 19187  004BA4  0101               	movlb	1	; () banked
 19188  004BA6  6103               	cpfslt	___ftpack@exp& (0+255),b
 19189  004BA8  D7F2               	goto	l9732
 19190  004BAA                     l1311:
 19191                           
 19192                           ; BSR set to: 1
 19193  004BAA  0101               	movlb	1	; () banked
 19194  004BAC  B103               	btfsc	___ftpack@exp& (0+255),0,b
 19195  004BAE  D002               	goto	l9740
 19196                           
 19197                           ; BSR set to: 1
 19198  004BB0  0101               	movlb	1	; () banked
 19199  004BB2  9F01               	bcf	(___ftpack@arg+1)& (0+255),7,b
 19200  004BB4                     l9740:
 19201                           
 19202                           ; BSR set to: 1
 19203  004BB4  0101               	movlb	1	; () banked
 19204  004BB6  90D8               	bcf	status,0,c
 19205  004BB8  3303               	rrcf	___ftpack@exp& (0+255),f,b
 19206  004BBA  0101               	movlb	1	; () banked
 19207  004BBC  5103               	movf	___ftpack@exp& (0+255),w,b
 19208  004BBE  0101               	movlb	1	; () banked
 19209  004BC0  1302               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 19210                           
 19211                           ; BSR set to: 1
 19212  004BC2  0101               	movlb	1	; () banked
 19213  004BC4  5104               	movf	___ftpack@sign& (0+255),w,b
 19214  004BC6  0101               	movlb	1	; () banked
 19215  004BC8  B4D8               	btfsc	status,2,c
 19216  004BCA  D002               	goto	l9746
 19217                           
 19218                           ; BSR set to: 1
 19219  004BCC  0101               	movlb	1	; () banked
 19220  004BCE  8F02               	bsf	(___ftpack@arg+2)& (0+255),7,b
 19221  004BD0                     l9746:
 19222                           
 19223                           ; BSR set to: 1
 19224  004BD0  C100  F100         	movff	___ftpack@arg,?___ftpack
 19225  004BD4  C101  F101         	movff	___ftpack@arg+1,?___ftpack+1
 19226  004BD8  C102  F102         	movff	___ftpack@arg+2,?___ftpack+2
 19227  004BDC  0012               	return	
 19228  004BDE                     __end_of___ftpack:
 19229                           	opt stack 0
 19230                           tblptru	equ	0xFF8
 19231                           tblptrh	equ	0xFF7
 19232                           tblptrl	equ	0xFF6
 19233                           tablat	equ	0xFF5
 19234                           prodh	equ	0xFF4
 19235                           prodl	equ	0xFF3
 19236                           intcon	equ	0xFF2
 19237                           postinc0	equ	0xFEE
 19238                           wreg	equ	0xFE8
 19239                           postdec1	equ	0xFE5
 19240                           fsr1l	equ	0xFE1
 19241                           indf2	equ	0xFDF
 19242                           postinc2	equ	0xFDE
 19243                           postdec2	equ	0xFDD
 19244                           plusw2	equ	0xFDB
 19245                           fsr2h	equ	0xFDA
 19246                           fsr2l	equ	0xFD9
 19247                           status	equ	0xFD8
 19248                           
 19249 ;; *************** function _longPressDOWN *****************
 19250 ;; Defined at:
 19251 ;;		line 212 in file "source/DisplayProtocol.h"
 19252 ;; Parameters:    Size  Location     Type
 19253 ;;		None
 19254 ;; Auto vars:     Size  Location     Type
 19255 ;;		None
 19256 ;; Return value:  Size  Location     Type
 19257 ;;                  1    wreg      void 
 19258 ;; Registers used:
 19259 ;;		wreg, status,2, status,0
 19260 ;; Tracked objects:
 19261 ;;		On entry : 0/0
 19262 ;;		On exit  : 0/0
 19263 ;;		Unchanged: 0/0
 19264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19265 ;;      Params:         0       0       0       0       0       0       0
 19266 ;;      Locals:         0       0       0       0       0       0       0
 19267 ;;      Temps:          0       0       0       0       0       0       0
 19268 ;;      Totals:         0       0       0       0       0       0       0
 19269 ;;Total ram usage:        0 bytes
 19270 ;; Hardware stack levels used:    1
 19271 ;; Hardware stack levels required when called:   12
 19272 ;; This function calls:
 19273 ;;		Nothing
 19274 ;; This function is called by:
 19275 ;;		_buttonChecking
 19276 ;; This function uses a non-reentrant model
 19277 ;;
 19278                           
 19279                           	psect	text77
 19280  0071B6                     __ptext77:
 19281                           	opt stack 0
 19282  0071B6                     _longPressDOWN:
 19283                           	opt stack 17
 19284                           
 19285                           ;DisplayProtocol.h: 213: if (!DOWNisLP) {
 19286                           
 19287                           ; BSR set to: 1
 19288                           ;incstack = 0
 19289  0071B6  5045               	movf	_DOWNisLP,w,c
 19290  0071B8  A4D8               	btfss	status,2,c
 19291  0071BA  0012               	return	
 19292                           
 19293                           ;DisplayProtocol.h: 214: DOWNisLP = 1;
 19294  0071BC  0E01               	movlw	1
 19295  0071BE  6E45               	movwf	_DOWNisLP,c
 19296                           
 19297                           ;DisplayProtocol.h: 215: if(actualScreen == 5) {
 19298  0071C0  0E05               	movlw	5
 19299  0071C2  0101               	movlb	1	; () banked
 19300  0071C4  19B9               	xorwf	_actualScreen& (0+255),w,b
 19301  0071C6  A4D8               	btfss	status,2,c
 19302  0071C8  0012               	return	
 19303                           
 19304                           ; BSR set to: 1
 19305                           ;DisplayProtocol.h: 216: if(menuSection == 2)
 19306  0071CA  0E02               	movlw	2
 19307  0071CC  0101               	movlb	1	; () banked
 19308  0071CE  19BD               	xorwf	_menuSection& (0+255),w,b
 19309  0071D0  A4D8               	btfss	status,2,c
 19310  0071D2  0012               	return	
 19311                           
 19312                           ; BSR set to: 1
 19313                           ;DisplayProtocol.h: 217: chanVals -= 10;
 19314  0071D4  0101               	movlb	1	; () banked
 19315  0071D6  0EF6               	movlw	246
 19316  0071D8  27B4               	addwf	_chanVals& (0+255),f,b
 19317  0071DA  0EFF               	movlw	255
 19318  0071DC  23B5               	addwfc	(_chanVals+1)& (0+255),f,b
 19319                           
 19320                           ; BSR set to: 1
 19321                           
 19322                           ; BSR set to: 1
 19323  0071DE  0012               	return	
 19324  0071E0                     __end_of_longPressDOWN:
 19325                           	opt stack 0
 19326                           tblptru	equ	0xFF8
 19327                           tblptrh	equ	0xFF7
 19328                           tblptrl	equ	0xFF6
 19329                           tablat	equ	0xFF5
 19330                           prodh	equ	0xFF4
 19331                           prodl	equ	0xFF3
 19332                           intcon	equ	0xFF2
 19333                           postinc0	equ	0xFEE
 19334                           wreg	equ	0xFE8
 19335                           postdec1	equ	0xFE5
 19336                           fsr1l	equ	0xFE1
 19337                           indf2	equ	0xFDF
 19338                           postinc2	equ	0xFDE
 19339                           postdec2	equ	0xFDD
 19340                           plusw2	equ	0xFDB
 19341                           fsr2h	equ	0xFDA
 19342                           fsr2l	equ	0xFD9
 19343                           status	equ	0xFD8
 19344                           
 19345 ;; *************** function _delay_ms *****************
 19346 ;; Defined at:
 19347 ;;		line 13 in file "source/../../delay.h"
 19348 ;; Parameters:    Size  Location     Type
 19349 ;;  del             2    0[BANK1 ] int 
 19350 ;; Auto vars:     Size  Location     Type
 19351 ;;  i               2    3[BANK1 ] int 
 19352 ;; Return value:  Size  Location     Type
 19353 ;;                  1    wreg      void 
 19354 ;; Registers used:
 19355 ;;		wreg, status,2, status,0
 19356 ;; Tracked objects:
 19357 ;;		On entry : 0/0
 19358 ;;		On exit  : 0/0
 19359 ;;		Unchanged: 0/0
 19360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19361 ;;      Params:         0       0       2       0       0       0       0
 19362 ;;      Locals:         0       0       2       0       0       0       0
 19363 ;;      Temps:          0       0       1       0       0       0       0
 19364 ;;      Totals:         0       0       5       0       0       0       0
 19365 ;;Total ram usage:        5 bytes
 19366 ;; Hardware stack levels used:    1
 19367 ;; Hardware stack levels required when called:   12
 19368 ;; This function calls:
 19369 ;;		Nothing
 19370 ;; This function is called by:
 19371 ;;		_buttonChecking
 19372 ;; This function uses a non-reentrant model
 19373 ;;
 19374                           
 19375                           	psect	text78
 19376  006EB6                     __ptext78:
 19377                           	opt stack 0
 19378  006EB6                     _delay_ms:
 19379                           	opt stack 17
 19380                           
 19381                           ;delay.h: 14: for(int i = 1;i <= del;i++)
 19382                           
 19383                           ;incstack = 0
 19384  006EB6  0E00               	movlw	0
 19385  006EB8  0101               	movlb	1	; () banked
 19386  006EBA  6F04               	movwf	(delay_ms@i+1)& (0+255),b
 19387  006EBC  0E01               	movlw	1
 19388  006EBE  6F03               	movwf	delay_ms@i& (0+255),b
 19389  006EC0  D00C               	goto	l100
 19390  006EC2                     l10884:
 19391                           
 19392                           ; BSR set to: 1
 19393                           ;delay.h: 15: _delay((unsigned long)((1)*(16000000/4000.0)));
 19394  006EC2  0E06               	movlw	6
 19395  006EC4  0101               	movlb	1	; () banked
 19396  006EC6  6F02               	movwf	??_delay_ms& (0+255),b
 19397  006EC8  0E30               	movlw	48
 19398  006ECA                     u18047:
 19399  006ECA  2EE8               	decfsz	wreg,f,c
 19400  006ECC  D7FE               	goto	u18047
 19401  006ECE  2F02               	decfsz	??_delay_ms& (0+255),f,b
 19402  006ED0  D7FC               	goto	u18047
 19403  006ED2  D000               	nop2	
 19404  006ED4  0101               	movlb	1	; () banked
 19405  006ED6  4B03               	infsnz	delay_ms@i& (0+255),f,b
 19406  006ED8  2B04               	incf	(delay_ms@i+1)& (0+255),f,b
 19407  006EDA                     l100:
 19408                           
 19409                           ; BSR set to: 1
 19410  006EDA  0101               	movlb	1	; () banked
 19411  006EDC  5103               	movf	delay_ms@i& (0+255),w,b
 19412  006EDE  0101               	movlb	1	; () banked
 19413  006EE0  5D00               	subwf	delay_ms@del& (0+255),w,b
 19414  006EE2  0101               	movlb	1	; () banked
 19415  006EE4  5101               	movf	(delay_ms@del+1)& (0+255),w,b
 19416  006EE6  0A80               	xorlw	128
 19417  006EE8  0101               	movlb	1	; () banked
 19418  006EEA  6F02               	movwf	??_delay_ms& (0+255),b
 19419  006EEC  0101               	movlb	1	; () banked
 19420  006EEE  5104               	movf	(delay_ms@i+1)& (0+255),w,b
 19421  006EF0  0A80               	xorlw	128
 19422  006EF2  0101               	movlb	1	; () banked
 19423  006EF4  5902               	subwfb	??_delay_ms& (0+255),w,b
 19424  006EF6  A0D8               	btfss	status,0,c
 19425  006EF8  0012               	return	
 19426  006EFA  D7E3               	goto	l10884
 19427  006EFC                     __end_of_delay_ms:
 19428                           	opt stack 0
 19429                           tblptru	equ	0xFF8
 19430                           tblptrh	equ	0xFF7
 19431                           tblptrl	equ	0xFF6
 19432                           tablat	equ	0xFF5
 19433                           prodh	equ	0xFF4
 19434                           prodl	equ	0xFF3
 19435                           intcon	equ	0xFF2
 19436                           postinc0	equ	0xFEE
 19437                           wreg	equ	0xFE8
 19438                           postdec1	equ	0xFE5
 19439                           fsr1l	equ	0xFE1
 19440                           indf2	equ	0xFDF
 19441                           postinc2	equ	0xFDE
 19442                           postdec2	equ	0xFDD
 19443                           plusw2	equ	0xFDB
 19444                           fsr2h	equ	0xFDA
 19445                           fsr2l	equ	0xFD9
 19446                           status	equ	0xFD8
 19447                           
 19448 ;; *************** function _UARTConfig *****************
 19449 ;; Defined at:
 19450 ;;		line 81 in file "source/UARTConfig.h"
 19451 ;; Parameters:    Size  Location     Type
 19452 ;;		None
 19453 ;; Auto vars:     Size  Location     Type
 19454 ;;		None
 19455 ;; Return value:  Size  Location     Type
 19456 ;;                  1    wreg      void 
 19457 ;; Registers used:
 19458 ;;		wreg, status,2
 19459 ;; Tracked objects:
 19460 ;;		On entry : 0/0
 19461 ;;		On exit  : 0/0
 19462 ;;		Unchanged: 0/0
 19463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19464 ;;      Params:         0       0       0       0       0       0       0
 19465 ;;      Locals:         0       0       0       0       0       0       0
 19466 ;;      Temps:          0       0       0       0       0       0       0
 19467 ;;      Totals:         0       0       0       0       0       0       0
 19468 ;;Total ram usage:        0 bytes
 19469 ;; Hardware stack levels used:    1
 19470 ;; Hardware stack levels required when called:   12
 19471 ;; This function calls:
 19472 ;;		Nothing
 19473 ;; This function is called by:
 19474 ;;		_main
 19475 ;; This function uses a non-reentrant model
 19476 ;;
 19477                           
 19478                           	psect	text79
 19479  006F7A                     __ptext79:
 19480                           	opt stack 0
 19481  006F7A                     _UARTConfig:
 19482                           	opt stack 18
 19483                           
 19484                           ;UARTConfig.h: 82: RCSTA1bits.SPEN = 0;
 19485                           
 19486                           ; BSR set to: 1
 19487                           ;incstack = 0
 19488  006F7A  9EAB               	bcf	4011,7,c	;volatile
 19489                           
 19490                           ;UARTConfig.h: 83: SPBRGH1 = 0;
 19491  006F7C  0E00               	movlw	0
 19492  006F7E  6EB0               	movwf	4016,c	;volatile
 19493                           
 19494                           ;UARTConfig.h: 84: SPBRG1 = 34;
 19495  006F80  0E22               	movlw	34
 19496  006F82  6EAF               	movwf	4015,c	;volatile
 19497                           
 19498                           ;UARTConfig.h: 85: ANSELCbits.ANSC6 = 0;
 19499  006F84  010F               	movlb	15	; () banked
 19500  006F86  9D3A               	bcf	58,6,b	;volatile
 19501                           
 19502                           ; BSR set to: 15
 19503                           ;UARTConfig.h: 86: ANSELCbits.ANSC7 = 0;
 19504  006F88  010F               	movlb	15	; () banked
 19505  006F8A  9F3A               	bcf	58,7,b	;volatile
 19506                           
 19507                           ; BSR set to: 15
 19508                           ;UARTConfig.h: 87: TRISCbits.TRISC6 = 1;
 19509  006F8C  8C94               	bsf	3988,6,c	;volatile
 19510                           
 19511                           ; BSR set to: 15
 19512                           ;UARTConfig.h: 88: TRISCbits.TRISC7 = 1;
 19513  006F8E  8E94               	bsf	3988,7,c	;volatile
 19514                           
 19515                           ; BSR set to: 15
 19516                           ;UARTConfig.h: 89: TXSTA1bits.TX9 = 0;
 19517  006F90  9CAC               	bcf	4012,6,c	;volatile
 19518                           
 19519                           ; BSR set to: 15
 19520                           ;UARTConfig.h: 90: TXSTA1bits.SYNC = 0;
 19521  006F92  98AC               	bcf	4012,4,c	;volatile
 19522                           
 19523                           ; BSR set to: 15
 19524                           ;UARTConfig.h: 91: TXSTA1bits.SENDB = 0;
 19525  006F94  96AC               	bcf	4012,3,c	;volatile
 19526                           
 19527                           ; BSR set to: 15
 19528                           ;UARTConfig.h: 92: TXSTA1bits.BRGH = 1;
 19529  006F96  84AC               	bsf	4012,2,c	;volatile
 19530                           
 19531                           ; BSR set to: 15
 19532                           ;UARTConfig.h: 93: RCSTA1bits.RX9 = 0;
 19533  006F98  9CAB               	bcf	4011,6,c	;volatile
 19534                           
 19535                           ; BSR set to: 15
 19536                           ;UARTConfig.h: 94: BAUDCON1bits.DTRXP = 0;
 19537  006F9A  9AB8               	bcf	4024,5,c	;volatile
 19538                           
 19539                           ; BSR set to: 15
 19540                           ;UARTConfig.h: 95: BAUDCON1bits.CKTXP = 0;
 19541  006F9C  98B8               	bcf	4024,4,c	;volatile
 19542                           
 19543                           ; BSR set to: 15
 19544                           ;UARTConfig.h: 96: BAUDCON1bits.BRG16 = 1;
 19545  006F9E  86B8               	bsf	4024,3,c	;volatile
 19546                           
 19547                           ; BSR set to: 15
 19548                           ;UARTConfig.h: 97: BAUDCON1bits.WUE = 0;
 19549  006FA0  92B8               	bcf	4024,1,c	;volatile
 19550                           
 19551                           ; BSR set to: 15
 19552                           ;UARTConfig.h: 98: BAUDCON1bits.ABDEN = 0;
 19553  006FA2  90B8               	bcf	4024,0,c	;volatile
 19554                           
 19555                           ; BSR set to: 15
 19556                           ;UARTConfig.h: 99: RCSTA1bits.CREN = 1;
 19557  006FA4  88AB               	bsf	4011,4,c	;volatile
 19558                           
 19559                           ; BSR set to: 15
 19560                           ;UARTConfig.h: 100: TXSTA1bits.TXEN = 1;
 19561  006FA6  8AAC               	bsf	4012,5,c	;volatile
 19562                           
 19563                           ; BSR set to: 15
 19564                           ;UARTConfig.h: 101: IPR1bits.RC1IP = 0;
 19565  006FA8  9A9F               	bcf	3999,5,c	;volatile
 19566                           
 19567                           ; BSR set to: 15
 19568                           ;UARTConfig.h: 102: PIR1bits.RC1IF = 0;
 19569  006FAA  9A9E               	bcf	3998,5,c	;volatile
 19570                           
 19571                           ; BSR set to: 15
 19572                           ;UARTConfig.h: 103: PIE1bits.RC1IE = 1;
 19573  006FAC  8A9D               	bsf	3997,5,c	;volatile
 19574                           
 19575                           ; BSR set to: 15
 19576                           ;UARTConfig.h: 104: RCSTA1bits.SPEN = 1;
 19577  006FAE  8EAB               	bsf	4011,7,c	;volatile
 19578                           
 19579                           ; BSR set to: 15
 19580  006FB0  0012               	return		;funcret
 19581  006FB2                     __end_of_UARTConfig:
 19582                           	opt stack 0
 19583                           tblptru	equ	0xFF8
 19584                           tblptrh	equ	0xFF7
 19585                           tblptrl	equ	0xFF6
 19586                           tablat	equ	0xFF5
 19587                           prodh	equ	0xFF4
 19588                           prodl	equ	0xFF3
 19589                           intcon	equ	0xFF2
 19590                           postinc0	equ	0xFEE
 19591                           wreg	equ	0xFE8
 19592                           postdec1	equ	0xFE5
 19593                           fsr1l	equ	0xFE1
 19594                           indf2	equ	0xFDF
 19595                           postinc2	equ	0xFDE
 19596                           postdec2	equ	0xFDD
 19597                           plusw2	equ	0xFDB
 19598                           fsr2h	equ	0xFDA
 19599                           fsr2l	equ	0xFD9
 19600                           status	equ	0xFD8
 19601                           
 19602 ;; *************** function _PWM2Config *****************
 19603 ;; Defined at:
 19604 ;;		line 159 in file "source/PWMConfig.h"
 19605 ;; Parameters:    Size  Location     Type
 19606 ;;		None
 19607 ;; Auto vars:     Size  Location     Type
 19608 ;;		None
 19609 ;; Return value:  Size  Location     Type
 19610 ;;                  1    wreg      void 
 19611 ;; Registers used:
 19612 ;;		wreg, status,2, status,0, cstack
 19613 ;; Tracked objects:
 19614 ;;		On entry : 0/0
 19615 ;;		On exit  : 0/0
 19616 ;;		Unchanged: 0/0
 19617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19618 ;;      Params:         0       0       0       0       0       0       0
 19619 ;;      Locals:         0       0       0       0       0       0       0
 19620 ;;      Temps:          0       0       0       0       0       0       0
 19621 ;;      Totals:         0       0       0       0       0       0       0
 19622 ;;Total ram usage:        0 bytes
 19623 ;; Hardware stack levels used:    1
 19624 ;; Hardware stack levels required when called:   13
 19625 ;; This function calls:
 19626 ;;		_setPWM2duty
 19627 ;;		_t2config
 19628 ;; This function is called by:
 19629 ;;		_main
 19630 ;; This function uses a non-reentrant model
 19631 ;;
 19632                           
 19633                           	psect	text80
 19634  006B96                     __ptext80:
 19635                           	opt stack 0
 19636  006B96                     _PWM2Config:
 19637                           	opt stack 17
 19638                           
 19639                           ;PWMConfig.h: 160: TRISCbits.TRISC0 = 1;
 19640                           
 19641                           ; BSR set to: 15
 19642                           ;incstack = 0
 19643  006B96  8094               	bsf	3988,0,c	;volatile
 19644                           
 19645                           ;PWMConfig.h: 161: TRISCbits.TRISC1 = 1;
 19646  006B98  8294               	bsf	3988,1,c	;volatile
 19647                           
 19648                           ;PWMConfig.h: 162: PSTR2CONbits.STR2A = 1;
 19649  006B9A  8063               	bsf	3939,0,c	;volatile
 19650                           
 19651                           ;PWMConfig.h: 163: PSTR2CONbits.STR2B = 1;
 19652  006B9C  8263               	bsf	3939,1,c	;volatile
 19653                           
 19654                           ;PWMConfig.h: 164: PSTR2CONbits.STR2C = 0;
 19655  006B9E  9463               	bcf	3939,2,c	;volatile
 19656                           
 19657                           ;PWMConfig.h: 165: PSTR2CONbits.STR2D = 0;
 19658  006BA0  9663               	bcf	3939,3,c	;volatile
 19659                           
 19660                           ;PWMConfig.h: 166: CCPTMRS0bits.C2TSEL = 0b00;
 19661  006BA2  0EE7               	movlw	-25
 19662  006BA4  010F               	movlb	15	; () banked
 19663  006BA6  1749               	andwf	73,f,b	;volatile
 19664                           
 19665                           ;PWMConfig.h: 167: PR2 = 199;
 19666  006BA8  0EC7               	movlw	199
 19667  006BAA  6EBB               	movwf	4027,c	;volatile
 19668                           
 19669                           ; BSR set to: 15
 19670                           ;PWMConfig.h: 168: ECCP2ASbits.CCP2AS = 0b000;
 19671  006BAC  9864               	bcf	3940,4,c	;volatile
 19672  006BAE  9A64               	bcf	3940,5,c	;volatile
 19673  006BB0  9C64               	bcf	3940,6,c	;volatile
 19674                           
 19675                           ;PWMConfig.h: 169: ECCP2ASbits.PSS2AC = 0b00;
 19676  006BB2  0EF3               	movlw	-13
 19677  006BB4  1664               	andwf	3940,f,c	;volatile
 19678                           
 19679                           ;PWMConfig.h: 170: ECCP2ASbits.PSS2BD = 0b00;
 19680  006BB6  0EFC               	movlw	-4
 19681  006BB8  1664               	andwf	3940,f,c	;volatile
 19682                           
 19683                           ; BSR set to: 15
 19684                           ;PWMConfig.h: 171: PWM2CONbits.P2RSEN = 0;
 19685  006BBA  9E65               	bcf	3941,7,c	;volatile
 19686                           
 19687                           ;PWMConfig.h: 172: ECCP2ASbits.CCP2AS = 1;
 19688  006BBC  5064               	movf	3940,w,c	;volatile
 19689  006BBE  0B8F               	andlw	-113
 19690  006BC0  0910               	iorlw	16
 19691  006BC2  6E64               	movwf	3940,c	;volatile
 19692                           
 19693                           ;PWMConfig.h: 173: CCP2CONbits.P2M = 0b10;
 19694  006BC4  5066               	movf	3942,w,c	;volatile
 19695  006BC6  0B3F               	andlw	-193
 19696  006BC8  0980               	iorlw	128
 19697  006BCA  6E66               	movwf	3942,c	;volatile
 19698                           
 19699                           ;PWMConfig.h: 174: CCP2CONbits.CCP2M = 0b1100;
 19700  006BCC  5066               	movf	3942,w,c	;volatile
 19701  006BCE  0BF0               	andlw	-16
 19702  006BD0  090C               	iorlw	12
 19703  006BD2  6E66               	movwf	3942,c	;volatile
 19704                           
 19705                           ; BSR set to: 15
 19706                           ;PWMConfig.h: 175: setPWM2duty(0);
 19707  006BD4  0E00               	movlw	0
 19708  006BD6  0101               	movlb	1	; () banked
 19709  006BD8  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 19710  006BDA  0E00               	movlw	0
 19711  006BDC  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 19712  006BDE  EC85  F02F         	call	_setPWM2duty	;wreg free
 19713                           
 19714                           ;PWMConfig.h: 176: PWM2CONbits.P2DC = 16;
 19715  006BE2  9065               	bcf	3941,0,c	;volatile
 19716  006BE4  9265               	bcf	3941,1,c	;volatile
 19717  006BE6  9465               	bcf	3941,2,c	;volatile
 19718  006BE8  9665               	bcf	3941,3,c	;volatile
 19719  006BEA  8865               	bsf	3941,4,c	;volatile
 19720  006BEC  9A65               	bcf	3941,5,c	;volatile
 19721  006BEE  9C65               	bcf	3941,6,c	;volatile
 19722                           
 19723                           ;PWMConfig.h: 177: t2config();
 19724  006BF0  EC54  F039         	call	_t2config	;wreg free
 19725                           
 19726                           ;PWMConfig.h: 178: TRISCbits.TRISC0 = 0;
 19727  006BF4  9094               	bcf	3988,0,c	;volatile
 19728                           
 19729                           ;PWMConfig.h: 179: TRISCbits.TRISC1 = 0;
 19730  006BF6  9294               	bcf	3988,1,c	;volatile
 19731                           
 19732                           ;PWMConfig.h: 180: ECCP2ASbits.CCP2ASE = 0;
 19733  006BF8  9E64               	bcf	3940,7,c	;volatile
 19734  006BFA  0012               	return		;funcret
 19735  006BFC                     __end_of_PWM2Config:
 19736                           	opt stack 0
 19737                           tblptru	equ	0xFF8
 19738                           tblptrh	equ	0xFF7
 19739                           tblptrl	equ	0xFF6
 19740                           tablat	equ	0xFF5
 19741                           prodh	equ	0xFF4
 19742                           prodl	equ	0xFF3
 19743                           intcon	equ	0xFF2
 19744                           postinc0	equ	0xFEE
 19745                           wreg	equ	0xFE8
 19746                           postdec1	equ	0xFE5
 19747                           fsr1l	equ	0xFE1
 19748                           indf2	equ	0xFDF
 19749                           postinc2	equ	0xFDE
 19750                           postdec2	equ	0xFDD
 19751                           plusw2	equ	0xFDB
 19752                           fsr2h	equ	0xFDA
 19753                           fsr2l	equ	0xFD9
 19754                           status	equ	0xFD8
 19755                           
 19756 ;; *************** function _t2config *****************
 19757 ;; Defined at:
 19758 ;;		line 26 in file "source/PWMConfig.h"
 19759 ;; Parameters:    Size  Location     Type
 19760 ;;		None
 19761 ;; Auto vars:     Size  Location     Type
 19762 ;;		None
 19763 ;; Return value:  Size  Location     Type
 19764 ;;                  1    wreg      void 
 19765 ;; Registers used:
 19766 ;;		wreg, status,2
 19767 ;; Tracked objects:
 19768 ;;		On entry : 0/0
 19769 ;;		On exit  : 0/0
 19770 ;;		Unchanged: 0/0
 19771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19772 ;;      Params:         0       0       0       0       0       0       0
 19773 ;;      Locals:         0       0       0       0       0       0       0
 19774 ;;      Temps:          0       0       0       0       0       0       0
 19775 ;;      Totals:         0       0       0       0       0       0       0
 19776 ;;Total ram usage:        0 bytes
 19777 ;; Hardware stack levels used:    1
 19778 ;; Hardware stack levels required when called:   12
 19779 ;; This function calls:
 19780 ;;		Nothing
 19781 ;; This function is called by:
 19782 ;;		_PWM2Config
 19783 ;; This function uses a non-reentrant model
 19784 ;;
 19785                           
 19786                           	psect	text81
 19787  0072A8                     __ptext81:
 19788                           	opt stack 0
 19789  0072A8                     _t2config:
 19790                           	opt stack 17
 19791                           
 19792                           ;PWMConfig.h: 27: T2CONbits.TMR2ON = 0;
 19793                           
 19794                           ;incstack = 0
 19795  0072A8  94BA               	bcf	4026,2,c	;volatile
 19796                           
 19797                           ;PWMConfig.h: 28: T2CONbits.T2CKPS = 0b00;
 19798  0072AA  0EFC               	movlw	-4
 19799  0072AC  16BA               	andwf	4026,f,c	;volatile
 19800                           
 19801                           ;PWMConfig.h: 29: T2CONbits.T2OUTPS = 0b1111;
 19802  0072AE  86BA               	bsf	4026,3,c	;volatile
 19803  0072B0  88BA               	bsf	4026,4,c	;volatile
 19804  0072B2  8ABA               	bsf	4026,5,c	;volatile
 19805  0072B4  8CBA               	bsf	4026,6,c	;volatile
 19806                           
 19807                           ;PWMConfig.h: 31: PIR1bits.TMR2IF = 0;
 19808  0072B6  929E               	bcf	3998,1,c	;volatile
 19809                           
 19810                           ;PWMConfig.h: 32: IPR1bits.TMR2IP = 0;
 19811  0072B8  929F               	bcf	3999,1,c	;volatile
 19812                           
 19813                           ;PWMConfig.h: 33: PIE1bits.TMR2IE = 1;
 19814  0072BA  829D               	bsf	3997,1,c	;volatile
 19815                           
 19816                           ;PWMConfig.h: 34: T2CONbits.TMR2ON = 1;
 19817  0072BC  84BA               	bsf	4026,2,c	;volatile
 19818  0072BE  0012               	return		;funcret
 19819  0072C0                     __end_of_t2config:
 19820                           	opt stack 0
 19821                           tblptru	equ	0xFF8
 19822                           tblptrh	equ	0xFF7
 19823                           tblptrl	equ	0xFF6
 19824                           tablat	equ	0xFF5
 19825                           prodh	equ	0xFF4
 19826                           prodl	equ	0xFF3
 19827                           intcon	equ	0xFF2
 19828                           postinc0	equ	0xFEE
 19829                           wreg	equ	0xFE8
 19830                           postdec1	equ	0xFE5
 19831                           fsr1l	equ	0xFE1
 19832                           indf2	equ	0xFDF
 19833                           postinc2	equ	0xFDE
 19834                           postdec2	equ	0xFDD
 19835                           plusw2	equ	0xFDB
 19836                           fsr2h	equ	0xFDA
 19837                           fsr2l	equ	0xFD9
 19838                           status	equ	0xFD8
 19839                           
 19840 ;; *************** function _setPWM2duty *****************
 19841 ;; Defined at:
 19842 ;;		line 37 in file "source/PWMConfig.h"
 19843 ;; Parameters:    Size  Location     Type
 19844 ;;  actuator        2    0[BANK1 ] short 
 19845 ;; Auto vars:     Size  Location     Type
 19846 ;;  act             2    4[BANK1 ] short 
 19847 ;; Return value:  Size  Location     Type
 19848 ;;                  1    wreg      void 
 19849 ;; Registers used:
 19850 ;;		wreg, status,2, status,0
 19851 ;; Tracked objects:
 19852 ;;		On entry : 0/0
 19853 ;;		On exit  : 0/0
 19854 ;;		Unchanged: 0/0
 19855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19856 ;;      Params:         0       0       2       0       0       0       0
 19857 ;;      Locals:         0       0       2       0       0       0       0
 19858 ;;      Temps:          0       0       2       0       0       0       0
 19859 ;;      Totals:         0       0       6       0       0       0       0
 19860 ;;Total ram usage:        6 bytes
 19861 ;; Hardware stack levels used:    1
 19862 ;; Hardware stack levels required when called:   12
 19863 ;; This function calls:
 19864 ;;		Nothing
 19865 ;; This function is called by:
 19866 ;;		_initProtocoll
 19867 ;;		_PWM2Config
 19868 ;;		_pressENTER
 19869 ;;		_main
 19870 ;;		_initCalib
 19871 ;; This function uses a non-reentrant model
 19872 ;;
 19873                           
 19874                           	psect	text82
 19875  005F0A                     __ptext82:
 19876                           	opt stack 0
 19877  005F0A                     _setPWM2duty:
 19878                           	opt stack 18
 19879                           
 19880                           ;PWMConfig.h: 38: short act = 400;
 19881                           
 19882                           ;incstack = 0
 19883  005F0A  0E01               	movlw	1
 19884  005F0C  0101               	movlb	1	; () banked
 19885  005F0E  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19886  005F10  0E90               	movlw	144
 19887  005F12  6F04               	movwf	setPWM2duty@act& (0+255),b
 19888                           
 19889                           ; BSR set to: 1
 19890                           ;PWMConfig.h: 39: if(actuator > 400)
 19891  005F14  0101               	movlb	1	; () banked
 19892  005F16  BF01               	btfsc	(setPWM2duty@actuator+1)& (0+255),7,b
 19893  005F18  D00D               	goto	l10650
 19894  005F1A  0E91               	movlw	145
 19895  005F1C  0101               	movlb	1	; () banked
 19896  005F1E  5D00               	subwf	setPWM2duty@actuator& (0+255),w,b
 19897  005F20  0E01               	movlw	1
 19898  005F22  0101               	movlb	1	; () banked
 19899  005F24  5901               	subwfb	(setPWM2duty@actuator+1)& (0+255),w,b
 19900  005F26  A0D8               	btfss	status,0,c
 19901  005F28  D005               	goto	l10650
 19902                           
 19903                           ; BSR set to: 1
 19904                           ;PWMConfig.h: 40: act = 800;
 19905  005F2A  0E03               	movlw	3
 19906  005F2C  0101               	movlb	1	; () banked
 19907  005F2E  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19908  005F30  0E20               	movlw	32
 19909  005F32  D00F               	goto	L7
 19910  005F34                     l10650:
 19911                           
 19912                           ; BSR set to: 1
 19913                           ;PWMConfig.h: 41: else if(actuator < -400)
 19914  005F34  0101               	movlb	1	; () banked
 19915  005F36  AF01               	btfss	(setPWM2duty@actuator+1)& (0+255),7,b
 19916  005F38  D00E               	goto	l10654
 19917  005F3A  0E70               	movlw	112
 19918  005F3C  0101               	movlb	1	; () banked
 19919  005F3E  5D00               	subwf	setPWM2duty@actuator& (0+255),w,b
 19920  005F40  0EFE               	movlw	254
 19921  005F42  0101               	movlb	1	; () banked
 19922  005F44  5901               	subwfb	(setPWM2duty@actuator+1)& (0+255),w,b
 19923  005F46  B0D8               	btfsc	status,0,c
 19924  005F48  D006               	goto	l10654
 19925                           
 19926                           ; BSR set to: 1
 19927                           ;PWMConfig.h: 42: act = 0;
 19928  005F4A  0E00               	movlw	0
 19929  005F4C  0101               	movlb	1	; () banked
 19930  005F4E  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19931  005F50  0E00               	movlw	0
 19932  005F52                     L7:
 19933  005F52  6F04               	movwf	setPWM2duty@act& (0+255),b
 19934  005F54  D00A               	goto	l493
 19935  005F56                     l10654:
 19936                           
 19937                           ; BSR set to: 1
 19938                           ;PWMConfig.h: 43: else
 19939                           ;PWMConfig.h: 44: act = actuator + 400;
 19940  005F56  0E90               	movlw	144
 19941  005F58  0101               	movlb	1	; () banked
 19942  005F5A  2500               	addwf	setPWM2duty@actuator& (0+255),w,b
 19943  005F5C  0101               	movlb	1	; () banked
 19944  005F5E  6F04               	movwf	setPWM2duty@act& (0+255),b
 19945  005F60  0E01               	movlw	1
 19946  005F62  0101               	movlb	1	; () banked
 19947  005F64  2101               	addwfc	(setPWM2duty@actuator+1)& (0+255),w,b
 19948  005F66  0101               	movlb	1	; () banked
 19949  005F68  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19950  005F6A                     l493:
 19951                           
 19952                           ; BSR set to: 1
 19953                           ;PWMConfig.h: 45: CCP2CONbits.DC2B = act;
 19954  005F6A  C104  F102         	movff	setPWM2duty@act,??_setPWM2duty
 19955  005F6E  0101               	movlb	1	; () banked
 19956  005F70  3B02               	swapf	??_setPWM2duty& (0+255),f,b
 19957  005F72  5066               	movf	3942,w,c	;volatile
 19958  005F74  0101               	movlb	1	; () banked
 19959  005F76  1902               	xorwf	??_setPWM2duty& (0+255),w,b
 19960  005F78  0BCF               	andlw	-49
 19961  005F7A  1902               	xorwf	??_setPWM2duty& (0+255),w,b
 19962  005F7C  6E66               	movwf	3942,c	;volatile
 19963                           
 19964                           ;PWMConfig.h: 46: CCPR2L = act>>2;
 19965  005F7E  C104  F102         	movff	setPWM2duty@act,??_setPWM2duty
 19966  005F82  C105  F103         	movff	setPWM2duty@act+1,??_setPWM2duty+1
 19967  005F86  0101               	movlb	1	; () banked
 19968  005F88  3503               	rlcf	(??_setPWM2duty+1)& (0+255),w,b
 19969  005F8A  3303               	rrcf	(??_setPWM2duty+1)& (0+255),f,b
 19970  005F8C  3302               	rrcf	??_setPWM2duty& (0+255),f,b
 19971  005F8E  0101               	movlb	1	; () banked
 19972  005F90  3503               	rlcf	(??_setPWM2duty+1)& (0+255),w,b
 19973  005F92  3303               	rrcf	(??_setPWM2duty+1)& (0+255),f,b
 19974  005F94  3302               	rrcf	??_setPWM2duty& (0+255),f,b
 19975  005F96  0101               	movlb	1	; () banked
 19976  005F98  5102               	movf	??_setPWM2duty& (0+255),w,b
 19977  005F9A  6E67               	movwf	3943,c	;volatile
 19978                           
 19979                           ; BSR set to: 1
 19980  005F9C  0012               	return		;funcret
 19981  005F9E                     __end_of_setPWM2duty:
 19982                           	opt stack 0
 19983                           tblptru	equ	0xFF8
 19984                           tblptrh	equ	0xFF7
 19985                           tblptrl	equ	0xFF6
 19986                           tablat	equ	0xFF5
 19987                           prodh	equ	0xFF4
 19988                           prodl	equ	0xFF3
 19989                           intcon	equ	0xFF2
 19990                           postinc0	equ	0xFEE
 19991                           wreg	equ	0xFE8
 19992                           postdec1	equ	0xFE5
 19993                           fsr1l	equ	0xFE1
 19994                           indf2	equ	0xFDF
 19995                           postinc2	equ	0xFDE
 19996                           postdec2	equ	0xFDD
 19997                           plusw2	equ	0xFDB
 19998                           fsr2h	equ	0xFDA
 19999                           fsr2l	equ	0xFD9
 20000                           status	equ	0xFD8
 20001                           
 20002 ;; *************** function _EEPROMConfig *****************
 20003 ;; Defined at:
 20004 ;;		line 73 in file "source/sysParams.h"
 20005 ;; Parameters:    Size  Location     Type
 20006 ;;		None
 20007 ;; Auto vars:     Size  Location     Type
 20008 ;;		None
 20009 ;; Return value:  Size  Location     Type
 20010 ;;                  1    wreg      void 
 20011 ;; Registers used:
 20012 ;;		None
 20013 ;; Tracked objects:
 20014 ;;		On entry : 0/0
 20015 ;;		On exit  : 0/0
 20016 ;;		Unchanged: 0/0
 20017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20018 ;;      Params:         0       0       0       0       0       0       0
 20019 ;;      Locals:         0       0       0       0       0       0       0
 20020 ;;      Temps:          0       0       0       0       0       0       0
 20021 ;;      Totals:         0       0       0       0       0       0       0
 20022 ;;Total ram usage:        0 bytes
 20023 ;; Hardware stack levels used:    1
 20024 ;; Hardware stack levels required when called:   12
 20025 ;; This function calls:
 20026 ;;		Nothing
 20027 ;; This function is called by:
 20028 ;;		_main
 20029 ;; This function uses a non-reentrant model
 20030 ;;
 20031                           
 20032                           	psect	text83
 20033  00739A                     __ptext83:
 20034                           	opt stack 0
 20035  00739A                     _EEPROMConfig:
 20036                           	opt stack 18
 20037                           
 20038                           ;sysParams.h: 74: EECON1bits.WREN = 0;
 20039                           
 20040                           ; BSR set to: 1
 20041                           ;incstack = 0
 20042  00739A  94A6               	bcf	4006,2,c	;volatile
 20043                           
 20044                           ;sysParams.h: 75: EECON1bits.FREE = 0;
 20045  00739C  98A6               	bcf	4006,4,c	;volatile
 20046  00739E  0012               	return		;funcret
 20047  0073A0                     __end_of_EEPROMConfig:
 20048                           	opt stack 0
 20049                           tblptru	equ	0xFF8
 20050                           tblptrh	equ	0xFF7
 20051                           tblptrl	equ	0xFF6
 20052                           tablat	equ	0xFF5
 20053                           prodh	equ	0xFF4
 20054                           prodl	equ	0xFF3
 20055                           intcon	equ	0xFF2
 20056                           postinc0	equ	0xFEE
 20057                           wreg	equ	0xFE8
 20058                           postdec1	equ	0xFE5
 20059                           fsr1l	equ	0xFE1
 20060                           indf2	equ	0xFDF
 20061                           postinc2	equ	0xFDE
 20062                           postdec2	equ	0xFDD
 20063                           plusw2	equ	0xFDB
 20064                           fsr2h	equ	0xFDA
 20065                           fsr2l	equ	0xFD9
 20066                           status	equ	0xFD8
 20067                           
 20068 ;; *************** function _isr *****************
 20069 ;; Defined at:
 20070 ;;		line 20 in file "source/main.c"
 20071 ;; Parameters:    Size  Location     Type
 20072 ;;		None
 20073 ;; Auto vars:     Size  Location     Type
 20074 ;;		None
 20075 ;; Return value:  Size  Location     Type
 20076 ;;                  1    wreg      void 
 20077 ;; Registers used:
 20078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20079 ;; Tracked objects:
 20080 ;;		On entry : 0/0
 20081 ;;		On exit  : 0/0
 20082 ;;		Unchanged: 0/0
 20083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20084 ;;      Params:         0       0       0       0       0       0       0
 20085 ;;      Locals:         0       0       0       0       0       0       0
 20086 ;;      Temps:          0      17       0       0       0       0       0
 20087 ;;      Totals:         0      17       0       0       0       0       0
 20088 ;;Total ram usage:       17 bytes
 20089 ;; Hardware stack levels used:    1
 20090 ;; Hardware stack levels required when called:   11
 20091 ;; This function calls:
 20092 ;;		_T2int
 20093 ;;		_UARTint
 20094 ;; This function is called by:
 20095 ;;		Interrupt level 1
 20096 ;; This function uses a non-reentrant model
 20097 ;;
 20098                           
 20099                           	psect	intcodelo
 20100  000018                     __pintcodelo:
 20101                           	opt stack 0
 20102  000018                     _isr:
 20103                           	opt stack 9
 20104                           
 20105                           ;incstack = 0
 20106  000018  805C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 20107  00001A  CFD8 F094          	movff	status,??_isr
 20108  00001E  CFE8 F095          	movff	wreg,??_isr+1
 20109  000022  CFE0 F096          	movff	bsr,??_isr+2
 20110  000026  CFFA F097          	movff	pclath,??_isr+3
 20111  00002A  CFFB F098          	movff	pclatu,??_isr+4
 20112  00002E  CFE9 F099          	movff	fsr0l,??_isr+5
 20113  000032  CFEA F09A          	movff	fsr0h,??_isr+6
 20114  000036  CFE1 F09B          	movff	fsr1l,??_isr+7
 20115  00003A  CFE2 F09C          	movff	fsr1h,??_isr+8
 20116  00003E  CFD9 F09D          	movff	fsr2l,??_isr+9
 20117  000042  CFDA F09E          	movff	fsr2h,??_isr+10
 20118  000046  CFF3 F09F          	movff	prodl,??_isr+11
 20119  00004A  CFF4 F0A0          	movff	prodh,??_isr+12
 20120  00004E  CFF6 F0A1          	movff	tblptrl,??_isr+13
 20121  000052  CFF7 F0A2          	movff	tblptrh,??_isr+14
 20122  000056  CFF8 F0A3          	movff	tblptru,??_isr+15
 20123  00005A  CFF5 F0A4          	movff	tablat,??_isr+16
 20124                           
 20125                           ;main.c: 21: if(PIE1bits.RC1IE && PIR1bits.RC1IF) {
 20126  00005E  BA9D               	btfsc	3997,5,c	;volatile
 20127  000060  AA9E               	btfss	3998,5,c	;volatile
 20128  000062  D003               	goto	i1l9586
 20129                           
 20130                           ;main.c: 22: UARTint();
 20131  000064  EC49  F023         	call	_UARTint	;wreg free
 20132                           
 20133                           ;main.c: 23: PIR1bits.RC1IF = 0;
 20134  000068  9A9E               	bcf	3998,5,c	;volatile
 20135  00006A                     i1l9586:
 20136                           
 20137                           ;main.c: 24: }
 20138                           ;main.c: 25: if(PIE1bits.TMR2IE && PIR1bits.TMR2IF) {
 20139  00006A  B29D               	btfsc	3997,1,c	;volatile
 20140  00006C  A29E               	btfss	3998,1,c	;volatile
 20141  00006E  D003               	goto	i1l928
 20142                           
 20143                           ;main.c: 26: T2int();
 20144  000070  EC54  F016         	call	_T2int	;wreg free
 20145                           
 20146                           ;main.c: 27: PIR1bits.TMR2IF = 0;
 20147  000074  929E               	bcf	3998,1,c	;volatile
 20148  000076                     i1l928:
 20149  000076  C0A4  FFF5         	movff	??_isr+16,tablat
 20150  00007A  C0A3  FFF8         	movff	??_isr+15,tblptru
 20151  00007E  C0A2  FFF7         	movff	??_isr+14,tblptrh
 20152  000082  C0A1  FFF6         	movff	??_isr+13,tblptrl
 20153  000086  C0A0  FFF4         	movff	??_isr+12,prodh
 20154  00008A  C09F  FFF3         	movff	??_isr+11,prodl
 20155  00008E  C09E  FFDA         	movff	??_isr+10,fsr2h
 20156  000092  C09D  FFD9         	movff	??_isr+9,fsr2l
 20157  000096  C09C  FFE2         	movff	??_isr+8,fsr1h
 20158  00009A  C09B  FFE1         	movff	??_isr+7,fsr1l
 20159  00009E  C09A  FFEA         	movff	??_isr+6,fsr0h
 20160  0000A2  C099  FFE9         	movff	??_isr+5,fsr0l
 20161  0000A6  C098  FFFB         	movff	??_isr+4,pclatu
 20162  0000AA  C097  FFFA         	movff	??_isr+3,pclath
 20163  0000AE  C096  FFE0         	movff	??_isr+2,bsr
 20164  0000B2  C095  FFE8         	movff	??_isr+1,wreg
 20165  0000B6  C094  FFD8         	movff	??_isr,status
 20166  0000BA  905C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 20167  0000BC  0010               	retfie	
 20168  0000BE                     __end_of_isr:
 20169                           	opt stack 0
 20170                           pclatu	equ	0xFFB
 20171                           pclath	equ	0xFFA
 20172                           tblptru	equ	0xFF8
 20173                           tblptrh	equ	0xFF7
 20174                           tblptrl	equ	0xFF6
 20175                           tablat	equ	0xFF5
 20176                           prodh	equ	0xFF4
 20177                           prodl	equ	0xFF3
 20178                           intcon	equ	0xFF2
 20179                           postinc0	equ	0xFEE
 20180                           fsr0h	equ	0xFEA
 20181                           fsr0l	equ	0xFE9
 20182                           wreg	equ	0xFE8
 20183                           postdec1	equ	0xFE5
 20184                           fsr1h	equ	0xFE2
 20185                           fsr1l	equ	0xFE1
 20186                           bsr	equ	0xFE0
 20187                           indf2	equ	0xFDF
 20188                           postinc2	equ	0xFDE
 20189                           postdec2	equ	0xFDD
 20190                           plusw2	equ	0xFDB
 20191                           fsr2h	equ	0xFDA
 20192                           fsr2l	equ	0xFD9
 20193                           status	equ	0xFD8
 20194                           
 20195 ;; *************** function _UARTint *****************
 20196 ;; Defined at:
 20197 ;;		line 11 in file "source/UARTConfig.h"
 20198 ;; Parameters:    Size  Location     Type
 20199 ;;		None
 20200 ;; Auto vars:     Size  Location     Type
 20201 ;;  sas             1   51[BANK0 ] unsigned char 
 20202 ;; Return value:  Size  Location     Type
 20203 ;;                  1    wreg      void 
 20204 ;; Registers used:
 20205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20206 ;; Tracked objects:
 20207 ;;		On entry : 0/0
 20208 ;;		On exit  : 0/0
 20209 ;;		Unchanged: 0/0
 20210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20211 ;;      Params:         0       0       0       0       0       0       0
 20212 ;;      Locals:         0       1       0       0       0       0       0
 20213 ;;      Temps:          0       0       0       0       0       0       0
 20214 ;;      Totals:         0       1       0       0       0       0       0
 20215 ;;Total ram usage:        1 bytes
 20216 ;; Hardware stack levels used:    1
 20217 ;; Hardware stack levels required when called:   10
 20218 ;; This function calls:
 20219 ;;		_loadSysParams
 20220 ;;		i1_longPressDOWN
 20221 ;;		i1_longPressENTER
 20222 ;;		i1_longPressRETRO
 20223 ;;		i1_longPressUP
 20224 ;;		i1_pressDOWN
 20225 ;;		i1_pressENTER
 20226 ;;		i1_pressRETRO
 20227 ;;		i1_pressUP
 20228 ;;		i1_putchUART
 20229 ;;		i1_saveSysParams
 20230 ;;		i1_sysParamInit
 20231 ;; This function is called by:
 20232 ;;		_isr
 20233 ;; This function uses a non-reentrant model
 20234 ;;
 20235                           
 20236                           	psect	text85
 20237  004692                     __ptext85:
 20238                           	opt stack 0
 20239  004692                     _UARTint:
 20240                           	opt stack 9
 20241                           
 20242                           ;UARTConfig.h: 12: char sas = RCREG1;
 20243                           
 20244                           ;incstack = 0
 20245  004692  CFAE F093          	movff	4014,UARTint@sas	;volatile
 20246                           
 20247                           ;UARTConfig.h: 13: if(sas == 'A') {
 20248  004696  0E41               	movlw	65
 20249  004698  0100               	movlb	0	; () banked
 20250  00469A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20251  00469C  A4D8               	btfss	status,2,c
 20252  00469E  D00D               	goto	i1l9164
 20253                           
 20254                           ; BSR set to: 0
 20255                           ;UARTConfig.h: 14: putchUART(actualScreen);
 20256  0046A0  0101               	movlb	1	; () banked
 20257  0046A2  51B9               	movf	_actualScreen& (0+255),w,b
 20258  0046A4  ECB2  F039         	call	i1_putchUART
 20259                           
 20260                           ;UARTConfig.h: 15: putchUART(menuSection);
 20261  0046A8  0101               	movlb	1	; () banked
 20262  0046AA  51BD               	movf	_menuSection& (0+255),w,b
 20263  0046AC  ECB2  F039         	call	i1_putchUART
 20264                           
 20265                           ;UARTConfig.h: 16: putchUART(passSection);
 20266  0046B0  0101               	movlb	1	; () banked
 20267  0046B2  51BE               	movf	_passSection& (0+255),w,b
 20268  0046B4  ECB2  F039         	call	i1_putchUART
 20269                           
 20270                           ;UARTConfig.h: 17: }else if(sas == 'B') {
 20271  0046B8  0012               	return	
 20272  0046BA                     i1l9164:
 20273  0046BA  0E42               	movlw	66
 20274  0046BC  0100               	movlb	0	; () banked
 20275  0046BE  1993               	xorwf	UARTint@sas& (0+255),w,b
 20276  0046C0  A4D8               	btfss	status,2,c
 20277  0046C2  D003               	goto	i1l9168
 20278                           
 20279                           ; BSR set to: 0
 20280                           ;UARTConfig.h: 18: saveSysParams();
 20281  0046C4  ECAB  F030         	call	i1_saveSysParams	;wreg free
 20282                           
 20283                           ;UARTConfig.h: 19: }else if(sas == 'C') {
 20284  0046C8  0012               	return	
 20285  0046CA                     i1l9168:
 20286  0046CA  0E43               	movlw	67
 20287  0046CC  0100               	movlb	0	; () banked
 20288  0046CE  1993               	xorwf	UARTint@sas& (0+255),w,b
 20289  0046D0  A4D8               	btfss	status,2,c
 20290  0046D2  D003               	goto	i1l9172
 20291                           
 20292                           ; BSR set to: 0
 20293                           ;UARTConfig.h: 20: sysParamInit();
 20294  0046D4  EC3F  F034         	call	i1_sysParamInit	;wreg free
 20295                           
 20296                           ;UARTConfig.h: 21: }else if(sas == 'D') {
 20297  0046D8  0012               	return	
 20298  0046DA                     i1l9172:
 20299  0046DA  0E44               	movlw	68
 20300  0046DC  0100               	movlb	0	; () banked
 20301  0046DE  1993               	xorwf	UARTint@sas& (0+255),w,b
 20302  0046E0  A4D8               	btfss	status,2,c
 20303  0046E2  D003               	goto	i1l9176
 20304                           
 20305                           ; BSR set to: 0
 20306                           ;UARTConfig.h: 22: loadSysParams();
 20307  0046E4  EC14  F037         	call	_loadSysParams	;wreg free
 20308                           
 20309                           ;UARTConfig.h: 23: }else if(sas == 'E') {
 20310  0046E8  0012               	return	
 20311  0046EA                     i1l9176:
 20312  0046EA  0E45               	movlw	69
 20313  0046EC  0100               	movlb	0	; () banked
 20314  0046EE  1993               	xorwf	UARTint@sas& (0+255),w,b
 20315  0046F0  B4D8               	btfsc	status,2,c
 20316  0046F2  0012               	return	
 20317                           
 20318                           ; BSR set to: 0
 20319                           ;UARTConfig.h: 57: else if(sas == 'R') {
 20320                           
 20321                           ; BSR set to: 0
 20322                           
 20323                           ; BSR set to: 0
 20324                           ;UARTConfig.h: 25: }
 20325  0046F4  0E52               	movlw	82
 20326  0046F6  0100               	movlb	0	; () banked
 20327  0046F8  1993               	xorwf	UARTint@sas& (0+255),w,b
 20328  0046FA  A4D8               	btfss	status,2,c
 20329  0046FC  D014               	goto	i1l9190
 20330                           
 20331                           ; BSR set to: 0
 20332                           ;UARTConfig.h: 58: if(actualScreen == 0) {
 20333  0046FE  0101               	movlb	1	; () banked
 20334  004700  51B9               	movf	_actualScreen& (0+255),w,b
 20335  004702  A4D8               	btfss	status,2,c
 20336  004704  D007               	goto	i1l9186
 20337                           
 20338                           ; BSR set to: 1
 20339                           ;UARTConfig.h: 59: actualScreen = 1;
 20340  004706  0E01               	movlw	1
 20341  004708  0101               	movlb	1	; () banked
 20342  00470A  6FB9               	movwf	_actualScreen& (0+255),b
 20343                           
 20344                           ;UARTConfig.h: 60: fd = 0;
 20345  00470C  0E00               	movlw	0
 20346  00470E  0101               	movlb	1	; () banked
 20347  004710  6FBB               	movwf	_fd& (0+255),b
 20348                           
 20349                           ;UARTConfig.h: 61: }else if(actualScreen == 4)
 20350  004712  0012               	return	
 20351  004714                     i1l9186:
 20352                           
 20353                           ; BSR set to: 1
 20354  004714  0E04               	movlw	4
 20355  004716  0101               	movlb	1	; () banked
 20356  004718  19B9               	xorwf	_actualScreen& (0+255),w,b
 20357  00471A  A4D8               	btfss	status,2,c
 20358  00471C  0012               	return	
 20359                           
 20360                           ; BSR set to: 1
 20361                           ;UARTConfig.h: 62: actualScreen = 9;
 20362  00471E  0E09               	movlw	9
 20363  004720  0101               	movlb	1	; () banked
 20364  004722  6FB9               	movwf	_actualScreen& (0+255),b
 20365                           
 20366                           ; BSR set to: 1
 20367                           ;UARTConfig.h: 63: }else if(sas == 'S')
 20368                           
 20369                           ; BSR set to: 1
 20370  004724  0012               	return	
 20371  004726                     i1l9190:
 20372  004726  0E53               	movlw	83
 20373  004728  0100               	movlb	0	; () banked
 20374  00472A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20375  00472C  A4D8               	btfss	status,2,c
 20376  00472E  D003               	goto	i1l9194
 20377                           
 20378                           ; BSR set to: 0
 20379                           ;UARTConfig.h: 64: pressUP();
 20380  004730  EC5B  F024         	call	i1_pressUP	;wreg free
 20381  004734  0012               	return	
 20382  004736                     i1l9194:
 20383                           
 20384                           ;UARTConfig.h: 65: else if(sas == 'T')
 20385  004736  0E54               	movlw	84
 20386  004738  0100               	movlb	0	; () banked
 20387  00473A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20388  00473C  A4D8               	btfss	status,2,c
 20389  00473E  D003               	goto	i1l9198
 20390                           
 20391                           ; BSR set to: 0
 20392                           ;UARTConfig.h: 66: pressDOWN();
 20393  004740  ECF9  F026         	call	i1_pressDOWN	;wreg free
 20394  004744  0012               	return	
 20395  004746                     i1l9198:
 20396                           
 20397                           ;UARTConfig.h: 67: else if(sas == 'U')
 20398  004746  0E55               	movlw	85
 20399  004748  0100               	movlb	0	; () banked
 20400  00474A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20401  00474C  A4D8               	btfss	status,2,c
 20402  00474E  D003               	goto	i1l9202
 20403                           
 20404                           ; BSR set to: 0
 20405                           ;UARTConfig.h: 68: pressRETRO();
 20406  004750  ECC7  F02B         	call	i1_pressRETRO	;wreg free
 20407  004754  0012               	return	
 20408  004756                     i1l9202:
 20409                           
 20410                           ;UARTConfig.h: 69: else if(sas == 'V')
 20411  004756  0E56               	movlw	86
 20412  004758  0100               	movlb	0	; () banked
 20413  00475A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20414  00475C  A4D8               	btfss	status,2,c
 20415  00475E  D003               	goto	i1l9206
 20416                           
 20417                           ; BSR set to: 0
 20418                           ;UARTConfig.h: 70: pressENTER();
 20419  004760  ECB8  F00A         	call	i1_pressENTER	;wreg free
 20420  004764  0012               	return	
 20421  004766                     i1l9206:
 20422                           
 20423                           ;UARTConfig.h: 71: else if(sas == 'W')
 20424  004766  0E57               	movlw	87
 20425  004768  0100               	movlb	0	; () banked
 20426  00476A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20427  00476C  A4D8               	btfss	status,2,c
 20428  00476E  D003               	goto	i1l9210
 20429                           
 20430                           ; BSR set to: 0
 20431                           ;UARTConfig.h: 72: longPressUP();
 20432  004770  ECEF  F034         	call	i1_longPressUP	;wreg free
 20433  004774  0012               	return	
 20434  004776                     i1l9210:
 20435                           
 20436                           ;UARTConfig.h: 73: else if(sas == 'X')
 20437  004776  0E58               	movlw	88
 20438  004778  0100               	movlb	0	; () banked
 20439  00477A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20440  00477C  A4D8               	btfss	status,2,c
 20441  00477E  D003               	goto	i1l9214
 20442                           
 20443                           ; BSR set to: 0
 20444                           ;UARTConfig.h: 74: longPressDOWN();
 20445  004780  ECF0  F038         	call	i1_longPressDOWN	;wreg free
 20446  004784  0012               	return	
 20447  004786                     i1l9214:
 20448                           
 20449                           ;UARTConfig.h: 75: else if(sas == 'Y')
 20450  004786  0E59               	movlw	89
 20451  004788  0100               	movlb	0	; () banked
 20452  00478A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20453  00478C  A4D8               	btfss	status,2,c
 20454  00478E  D003               	goto	i1l9218
 20455                           
 20456                           ; BSR set to: 0
 20457                           ;UARTConfig.h: 76: longPressRETRO();
 20458  004790  EC00  F028         	call	i1_longPressRETRO	;wreg free
 20459  004794  0012               	return	
 20460  004796                     i1l9218:
 20461                           
 20462                           ;UARTConfig.h: 77: else if(sas == 'Z')
 20463  004796  0E5A               	movlw	90
 20464  004798  0100               	movlb	0	; () banked
 20465  00479A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20466  00479C  A4D8               	btfss	status,2,c
 20467  00479E  0012               	return	
 20468                           
 20469                           ; BSR set to: 0
 20470                           ;UARTConfig.h: 78: longPressENTER();
 20471  0047A0  EC38  F00E         	call	i1_longPressENTER	;wreg free
 20472  0047A4  0012               	return	
 20473  0047A6                     __end_of_UARTint:
 20474                           	opt stack 0
 20475                           pclatu	equ	0xFFB
 20476                           pclath	equ	0xFFA
 20477                           tblptru	equ	0xFF8
 20478                           tblptrh	equ	0xFF7
 20479                           tblptrl	equ	0xFF6
 20480                           tablat	equ	0xFF5
 20481                           prodh	equ	0xFF4
 20482                           prodl	equ	0xFF3
 20483                           intcon	equ	0xFF2
 20484                           postinc0	equ	0xFEE
 20485                           fsr0h	equ	0xFEA
 20486                           fsr0l	equ	0xFE9
 20487                           wreg	equ	0xFE8
 20488                           postdec1	equ	0xFE5
 20489                           fsr1h	equ	0xFE2
 20490                           fsr1l	equ	0xFE1
 20491                           bsr	equ	0xFE0
 20492                           indf2	equ	0xFDF
 20493                           postinc2	equ	0xFDE
 20494                           postdec2	equ	0xFDD
 20495                           plusw2	equ	0xFDB
 20496                           fsr2h	equ	0xFDA
 20497                           fsr2l	equ	0xFD9
 20498                           status	equ	0xFD8
 20499                           
 20500 ;; *************** function i1_sysParamInit *****************
 20501 ;; Defined at:
 20502 ;;		line 168 in file "source/sysParams.h"
 20503 ;; Parameters:    Size  Location     Type
 20504 ;;		None
 20505 ;; Auto vars:     Size  Location     Type
 20506 ;;		None
 20507 ;; Return value:  Size  Location     Type
 20508 ;;                  1    wreg      void 
 20509 ;; Registers used:
 20510 ;;		wreg, status,2, status,0, cstack
 20511 ;; Tracked objects:
 20512 ;;		On entry : 0/0
 20513 ;;		On exit  : 0/0
 20514 ;;		Unchanged: 0/0
 20515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20516 ;;      Params:         0       0       0       0       0       0       0
 20517 ;;      Locals:         0       0       0       0       0       0       0
 20518 ;;      Temps:          0       0       0       0       0       0       0
 20519 ;;      Totals:         0       0       0       0       0       0       0
 20520 ;;Total ram usage:        0 bytes
 20521 ;; Hardware stack levels used:    1
 20522 ;; Hardware stack levels required when called:    7
 20523 ;; This function calls:
 20524 ;;		i1_calcSysVars
 20525 ;;		i1_readEEPROM
 20526 ;; This function is called by:
 20527 ;;		_UARTint
 20528 ;; This function uses a non-reentrant model
 20529 ;;
 20530                           
 20531                           	psect	text86
 20532  00687E                     __ptext86:
 20533                           	opt stack 0
 20534  00687E                     i1_sysParamInit:
 20535                           	opt stack 11
 20536                           
 20537                           ;sysParams.h: 171: fData.floatUB = readEEPROM(3);
 20538                           
 20539                           ;incstack = 0
 20540  00687E  0E03               	movlw	3
 20541  006880  EC81  F039         	call	i1_readEEPROM
 20542  006884  0100               	movlb	0	; () banked
 20543  006886  6FB1               	movwf	(_fData+2)& (0+255),b
 20544                           
 20545                           ;sysParams.h: 172: fData.floatHB = readEEPROM(4);
 20546  006888  0E04               	movlw	4
 20547  00688A  EC81  F039         	call	i1_readEEPROM
 20548  00688E  0100               	movlb	0	; () banked
 20549  006890  6FB0               	movwf	(_fData+1)& (0+255),b
 20550                           
 20551                           ;sysParams.h: 173: fData.floatLB = readEEPROM(5);
 20552  006892  0E05               	movlw	5
 20553  006894  EC81  F039         	call	i1_readEEPROM
 20554  006898  0100               	movlb	0	; () banked
 20555  00689A  6FAF               	movwf	_fData& (0+255),b
 20556                           
 20557                           ; BSR set to: 0
 20558                           ;sysParams.h: 174: tiXcorte = fData.floatdat;
 20559  00689C  C0AF  F195         	movff	_fData,_tiXcorte
 20560  0068A0  C0B0  F196         	movff	_fData+1,_tiXcorte+1
 20561  0068A4  C0B1  F197         	movff	_fData+2,_tiXcorte+2
 20562                           
 20563                           ;sysParams.h: 175: i16Data.int16HB = readEEPROM(6);
 20564  0068A8  0E06               	movlw	6
 20565  0068AA  EC81  F039         	call	i1_readEEPROM
 20566  0068AE  0100               	movlb	0	; () banked
 20567  0068B0  6FB3               	movwf	(_i16Data+1)& (0+255),b
 20568                           
 20569                           ;sysParams.h: 176: i16Data.int16LB = readEEPROM(7);
 20570  0068B2  0E07               	movlw	7
 20571  0068B4  EC81  F039         	call	i1_readEEPROM
 20572  0068B8  0100               	movlb	0	; () banked
 20573  0068BA  6FB2               	movwf	_i16Data& (0+255),b
 20574                           
 20575                           ; BSR set to: 0
 20576                           ;sysParams.h: 177: numCortes = i16Data.int16dat;
 20577  0068BC  C0B2  F0D0         	movff	_i16Data,_numCortes
 20578  0068C0  C0B3  F0D1         	movff	_i16Data+1,_numCortes+1
 20579                           
 20580                           ;sysParams.h: 189: fData.floatUB = readEEPROM(17);
 20581  0068C4  0E11               	movlw	17
 20582  0068C6  EC81  F039         	call	i1_readEEPROM
 20583  0068CA  0100               	movlb	0	; () banked
 20584  0068CC  6FB1               	movwf	(_fData+2)& (0+255),b
 20585                           
 20586                           ;sysParams.h: 190: fData.floatHB = readEEPROM(18);
 20587  0068CE  0E12               	movlw	18
 20588  0068D0  EC81  F039         	call	i1_readEEPROM
 20589  0068D4  0100               	movlb	0	; () banked
 20590  0068D6  6FB0               	movwf	(_fData+1)& (0+255),b
 20591                           
 20592                           ;sysParams.h: 191: fData.floatLB = readEEPROM(19);
 20593  0068D8  0E13               	movlw	19
 20594  0068DA  EC81  F039         	call	i1_readEEPROM
 20595  0068DE  0100               	movlb	0	; () banked
 20596  0068E0  6FAF               	movwf	_fData& (0+255),b
 20597                           
 20598                           ; BSR set to: 0
 20599                           ;sysParams.h: 192: velocidadMasa = fData.floatdat;
 20600  0068E2  C0AF  F198         	movff	_fData,_velocidadMasa
 20601  0068E6  C0B0  F199         	movff	_fData+1,_velocidadMasa+1
 20602  0068EA  C0B1  F19A         	movff	_fData+2,_velocidadMasa+2
 20603                           
 20604                           ; BSR set to: 0
 20605                           ;sysParams.h: 193: calcSysVars();
 20606  0068EE  EC96  F035         	call	i1_calcSysVars	;wreg free
 20607  0068F2  0012               	return		;funcret
 20608  0068F4                     __end_ofi1_sysParamInit:
 20609                           	opt stack 0
 20610                           pclatu	equ	0xFFB
 20611                           pclath	equ	0xFFA
 20612                           tblptru	equ	0xFF8
 20613                           tblptrh	equ	0xFF7
 20614                           tblptrl	equ	0xFF6
 20615                           tablat	equ	0xFF5
 20616                           prodh	equ	0xFF4
 20617                           prodl	equ	0xFF3
 20618                           intcon	equ	0xFF2
 20619                           postinc0	equ	0xFEE
 20620                           fsr0h	equ	0xFEA
 20621                           fsr0l	equ	0xFE9
 20622                           wreg	equ	0xFE8
 20623                           postdec1	equ	0xFE5
 20624                           fsr1h	equ	0xFE2
 20625                           fsr1l	equ	0xFE1
 20626                           bsr	equ	0xFE0
 20627                           indf2	equ	0xFDF
 20628                           postinc2	equ	0xFDE
 20629                           postdec2	equ	0xFDD
 20630                           plusw2	equ	0xFDB
 20631                           fsr2h	equ	0xFDA
 20632                           fsr2l	equ	0xFD9
 20633                           status	equ	0xFD8
 20634                           
 20635 ;; *************** function i1_readEEPROM *****************
 20636 ;; Defined at:
 20637 ;;		line 64 in file "source/sysParams.h"
 20638 ;; Parameters:    Size  Location     Type
 20639 ;;  adr             1    wreg     unsigned char 
 20640 ;; Auto vars:     Size  Location     Type
 20641 ;;  adr             1    0[BANK0 ] unsigned char 
 20642 ;; Return value:  Size  Location     Type
 20643 ;;                  1    wreg      unsigned char 
 20644 ;; Registers used:
 20645 ;;		wreg, status,2
 20646 ;; Tracked objects:
 20647 ;;		On entry : 0/0
 20648 ;;		On exit  : 0/0
 20649 ;;		Unchanged: 0/0
 20650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20651 ;;      Params:         0       0       0       0       0       0       0
 20652 ;;      Locals:         0       1       0       0       0       0       0
 20653 ;;      Temps:          0       0       0       0       0       0       0
 20654 ;;      Totals:         0       1       0       0       0       0       0
 20655 ;;Total ram usage:        1 bytes
 20656 ;; Hardware stack levels used:    1
 20657 ;; Hardware stack levels required when called:    4
 20658 ;; This function calls:
 20659 ;;		Nothing
 20660 ;; This function is called by:
 20661 ;;		i1_sysParamInit
 20662 ;; This function uses a non-reentrant model
 20663 ;;
 20664                           
 20665                           	psect	text87
 20666  007302                     __ptext87:
 20667                           	opt stack 0
 20668  007302                     i1_readEEPROM:
 20669                           	opt stack 13
 20670                           
 20671                           ;incstack = 0
 20672                           ;i1readEEPROM@adr stored from wreg
 20673  007302  0100               	movlb	0	; () banked
 20674  007304  6F60               	movwf	i1readEEPROM@adr& (0+255),b
 20675                           
 20676                           ;sysParams.h: 65: EEADR = adr;
 20677  007306  C060  FFA9         	movff	i1readEEPROM@adr,4009	;volatile
 20678                           
 20679                           ;sysParams.h: 66: EECON1bits.EEPGD = 0;
 20680  00730A  9EA6               	bcf	4006,7,c	;volatile
 20681                           
 20682                           ;sysParams.h: 67: EECON1bits.CFGS = 0;
 20683  00730C  9CA6               	bcf	4006,6,c	;volatile
 20684                           
 20685                           ;sysParams.h: 68: EECON1bits.RD = 1;
 20686  00730E  80A6               	bsf	4006,0,c	;volatile
 20687  007310                     i1l287:
 20688  007310  B0A6               	btfsc	4006,0,c	;volatile
 20689  007312  D7FE               	goto	i1l287
 20690                           
 20691                           ;sysParams.h: 70: return EEDATA;
 20692  007314  50A8               	movf	4008,w,c	;volatile
 20693  007316  0012               	return		;funcret
 20694  007318                     __end_ofi1_readEEPROM:
 20695                           	opt stack 0
 20696                           pclatu	equ	0xFFB
 20697                           pclath	equ	0xFFA
 20698                           tblptru	equ	0xFF8
 20699                           tblptrh	equ	0xFF7
 20700                           tblptrl	equ	0xFF6
 20701                           tablat	equ	0xFF5
 20702                           prodh	equ	0xFF4
 20703                           prodl	equ	0xFF3
 20704                           intcon	equ	0xFF2
 20705                           postinc0	equ	0xFEE
 20706                           fsr0h	equ	0xFEA
 20707                           fsr0l	equ	0xFE9
 20708                           wreg	equ	0xFE8
 20709                           postdec1	equ	0xFE5
 20710                           fsr1h	equ	0xFE2
 20711                           fsr1l	equ	0xFE1
 20712                           bsr	equ	0xFE0
 20713                           indf2	equ	0xFDF
 20714                           postinc2	equ	0xFDE
 20715                           postdec2	equ	0xFDD
 20716                           plusw2	equ	0xFDB
 20717                           fsr2h	equ	0xFDA
 20718                           fsr2l	equ	0xFD9
 20719                           status	equ	0xFD8
 20720                           
 20721 ;; *************** function i1_putchUART *****************
 20722 ;; Defined at:
 20723 ;;		line 59 in file "source/IOConfig.h"
 20724 ;; Parameters:    Size  Location     Type
 20725 ;;  val             1    wreg     unsigned char 
 20726 ;; Auto vars:     Size  Location     Type
 20727 ;;  val             1    0[BANK0 ] unsigned char 
 20728 ;; Return value:  Size  Location     Type
 20729 ;;                  1    wreg      void 
 20730 ;; Registers used:
 20731 ;;		wreg
 20732 ;; Tracked objects:
 20733 ;;		On entry : 0/0
 20734 ;;		On exit  : 0/0
 20735 ;;		Unchanged: 0/0
 20736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20737 ;;      Params:         0       0       0       0       0       0       0
 20738 ;;      Locals:         0       1       0       0       0       0       0
 20739 ;;      Temps:          0       0       0       0       0       0       0
 20740 ;;      Totals:         0       1       0       0       0       0       0
 20741 ;;Total ram usage:        1 bytes
 20742 ;; Hardware stack levels used:    1
 20743 ;; Hardware stack levels required when called:    4
 20744 ;; This function calls:
 20745 ;;		Nothing
 20746 ;; This function is called by:
 20747 ;;		_UARTint
 20748 ;; This function uses a non-reentrant model
 20749 ;;
 20750                           
 20751                           	psect	text88
 20752  007364                     __ptext88:
 20753                           	opt stack 0
 20754  007364                     i1_putchUART:
 20755                           	opt stack 14
 20756                           
 20757                           ;incstack = 0
 20758                           ;i1putchUART@val stored from wreg
 20759  007364  0100               	movlb	0	; () banked
 20760  007366  6F60               	movwf	i1putchUART@val& (0+255),b
 20761  007368                     i1l222:
 20762  007368  A2AC               	btfss	4012,1,c	;volatile
 20763  00736A  D7FE               	goto	i1l222
 20764                           
 20765                           ;IOConfig.h: 61: TXREG1 = val;
 20766  00736C  C060  FFAD         	movff	i1putchUART@val,4013	;volatile
 20767  007370  0012               	return		;funcret
 20768  007372                     __end_ofi1_putchUART:
 20769                           	opt stack 0
 20770                           pclatu	equ	0xFFB
 20771                           pclath	equ	0xFFA
 20772                           tblptru	equ	0xFF8
 20773                           tblptrh	equ	0xFF7
 20774                           tblptrl	equ	0xFF6
 20775                           tablat	equ	0xFF5
 20776                           prodh	equ	0xFF4
 20777                           prodl	equ	0xFF3
 20778                           intcon	equ	0xFF2
 20779                           postinc0	equ	0xFEE
 20780                           fsr0h	equ	0xFEA
 20781                           fsr0l	equ	0xFE9
 20782                           wreg	equ	0xFE8
 20783                           postdec1	equ	0xFE5
 20784                           fsr1h	equ	0xFE2
 20785                           fsr1l	equ	0xFE1
 20786                           bsr	equ	0xFE0
 20787                           indf2	equ	0xFDF
 20788                           postinc2	equ	0xFDE
 20789                           postdec2	equ	0xFDD
 20790                           plusw2	equ	0xFDB
 20791                           fsr2h	equ	0xFDA
 20792                           fsr2l	equ	0xFD9
 20793                           status	equ	0xFD8
 20794                           
 20795 ;; *************** function i1_pressUP *****************
 20796 ;; Defined at:
 20797 ;;		line 126 in file "source/DisplayProtocol.h"
 20798 ;; Parameters:    Size  Location     Type
 20799 ;;		None
 20800 ;; Auto vars:     Size  Location     Type
 20801 ;;		None
 20802 ;; Return value:  Size  Location     Type
 20803 ;;                  1    wreg      void 
 20804 ;; Registers used:
 20805 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20806 ;; Tracked objects:
 20807 ;;		On entry : 0/0
 20808 ;;		On exit  : 0/0
 20809 ;;		Unchanged: 0/0
 20810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20811 ;;      Params:         0       0       0       0       0       0       0
 20812 ;;      Locals:         0       0       0       0       0       0       0
 20813 ;;      Temps:          0       1       0       0       0       0       0
 20814 ;;      Totals:         0       1       0       0       0       0       0
 20815 ;;Total ram usage:        1 bytes
 20816 ;; Hardware stack levels used:    1
 20817 ;; Hardware stack levels required when called:    5
 20818 ;; This function calls:
 20819 ;;		i1_chanValDigUP
 20820 ;; This function is called by:
 20821 ;;		_UARTint
 20822 ;; This function uses a non-reentrant model
 20823 ;;
 20824                           
 20825                           	psect	text89
 20826  0048B6                     __ptext89:
 20827                           	opt stack 0
 20828  0048B6                     i1_pressUP:
 20829                           	opt stack 13
 20830                           
 20831                           ;DisplayProtocol.h: 127: if (actualScreen == 0 || actualScreen == 4) {
 20832                           
 20833                           ;incstack = 0
 20834  0048B6  0101               	movlb	1	; () banked
 20835  0048B8  51B9               	movf	_actualScreen& (0+255),w,b
 20836  0048BA  B4D8               	btfsc	status,2,c
 20837  0048BC  D005               	goto	i1l8334
 20838                           
 20839                           ; BSR set to: 1
 20840  0048BE  0E04               	movlw	4
 20841  0048C0  0101               	movlb	1	; () banked
 20842  0048C2  19B9               	xorwf	_actualScreen& (0+255),w,b
 20843  0048C4  A4D8               	btfss	status,2,c
 20844  0048C6  D00C               	goto	i1l8340
 20845  0048C8                     i1l8334:
 20846                           
 20847                           ; BSR set to: 1
 20848                           ;DisplayProtocol.h: 128: menuSection++;
 20849  0048C8  0101               	movlb	1	; () banked
 20850  0048CA  2BBD               	incf	_menuSection& (0+255),f,b
 20851                           
 20852                           ; BSR set to: 1
 20853                           ;DisplayProtocol.h: 129: if (menuSection > 3)
 20854  0048CC  0101               	movlb	1	; () banked
 20855  0048CE  51BD               	movf	_menuSection& (0+255),w,b
 20856  0048D0  0A80               	xorlw	128
 20857  0048D2  0F7C               	addlw	-132
 20858  0048D4  A0D8               	btfss	status,0,c
 20859  0048D6  0012               	return	
 20860                           
 20861                           ; BSR set to: 1
 20862                           ;DisplayProtocol.h: 130: menuSection = 0;
 20863  0048D8  0E00               	movlw	0
 20864  0048DA  0101               	movlb	1	; () banked
 20865  0048DC  6FBD               	movwf	_menuSection& (0+255),b
 20866                           
 20867                           ; BSR set to: 1
 20868                           ;DisplayProtocol.h: 131: } else if (actualScreen == 1) {
 20869  0048DE  0012               	return	
 20870  0048E0                     i1l8340:
 20871                           
 20872                           ; BSR set to: 1
 20873  0048E0  0101               	movlb	1	; () banked
 20874  0048E2  05B9               	decf	_actualScreen& (0+255),w,b
 20875  0048E4  A4D8               	btfss	status,2,c
 20876  0048E6  D024               	goto	i1l8346
 20877                           
 20878                           ; BSR set to: 1
 20879                           ;DisplayProtocol.h: 132: introducido[passSection]++;
 20880  0048E8  0101               	movlb	1	; () banked
 20881  0048EA  51BE               	movf	_passSection& (0+255),w,b
 20882  0048EC  0D01               	mullw	1
 20883  0048EE  0EA9               	movlw	low _introducido
 20884  0048F0  24F3               	addwf	prodl,w,c
 20885  0048F2  6ED9               	movwf	fsr2l,c
 20886  0048F4  0E01               	movlw	high _introducido
 20887  0048F6  20F4               	addwfc	prodh,w,c
 20888  0048F8  6EDA               	movwf	fsr2h,c
 20889  0048FA  2ADF               	incf	indf2,f,c
 20890                           
 20891                           ;DisplayProtocol.h: 133: if (introducido[passSection] > 9)
 20892  0048FC  0101               	movlb	1	; () banked
 20893  0048FE  51BE               	movf	_passSection& (0+255),w,b
 20894  004900  0D01               	mullw	1
 20895  004902  0EA9               	movlw	low _introducido
 20896  004904  24F3               	addwf	prodl,w,c
 20897  004906  6ED9               	movwf	fsr2l,c
 20898  004908  0E01               	movlw	high _introducido
 20899  00490A  20F4               	addwfc	prodh,w,c
 20900  00490C  6EDA               	movwf	fsr2h,c
 20901  00490E  50DF               	movf	indf2,w,c
 20902  004910  0A80               	xorlw	128
 20903  004912  0F76               	addlw	-138
 20904  004914  A0D8               	btfss	status,0,c
 20905  004916  0012               	return	
 20906                           
 20907                           ; BSR set to: 1
 20908                           ;DisplayProtocol.h: 134: introducido[passSection] = 0;
 20909  004918  0101               	movlb	1	; () banked
 20910  00491A  51BE               	movf	_passSection& (0+255),w,b
 20911  00491C  0D01               	mullw	1
 20912  00491E  0EA9               	movlw	low _introducido
 20913  004920  24F3               	addwf	prodl,w,c
 20914  004922  6ED9               	movwf	fsr2l,c
 20915  004924  0E01               	movlw	high _introducido
 20916  004926  20F4               	addwfc	prodh,w,c
 20917  004928  6EDA               	movwf	fsr2h,c
 20918  00492A  0E00               	movlw	0
 20919  00492C  6EDF               	movwf	indf2,c
 20920                           
 20921                           ; BSR set to: 1
 20922                           ;DisplayProtocol.h: 135: } else if (actualScreen == 2 || actualScreen == 3
 20923  00492E  0012               	return	
 20924  004930                     i1l8346:
 20925                           
 20926                           ; BSR set to: 1
 20927                           ;DisplayProtocol.h: 136: || actualScreen == 10 || actualScreen == 11
 20928                           ;DisplayProtocol.h: 137: || actualScreen == 15) {
 20929  004930  0E02               	movlw	2
 20930  004932  0101               	movlb	1	; () banked
 20931  004934  19B9               	xorwf	_actualScreen& (0+255),w,b
 20932  004936  B4D8               	btfsc	status,2,c
 20933  004938  D014               	goto	i1l8356
 20934                           
 20935                           ; BSR set to: 1
 20936  00493A  0E03               	movlw	3
 20937  00493C  0101               	movlb	1	; () banked
 20938  00493E  19B9               	xorwf	_actualScreen& (0+255),w,b
 20939  004940  B4D8               	btfsc	status,2,c
 20940  004942  D00F               	goto	i1l8356
 20941                           
 20942                           ; BSR set to: 1
 20943  004944  0E0A               	movlw	10
 20944  004946  0101               	movlb	1	; () banked
 20945  004948  19B9               	xorwf	_actualScreen& (0+255),w,b
 20946  00494A  B4D8               	btfsc	status,2,c
 20947  00494C  D00A               	goto	i1l8356
 20948                           
 20949                           ; BSR set to: 1
 20950  00494E  0E0B               	movlw	11
 20951  004950  0101               	movlb	1	; () banked
 20952  004952  19B9               	xorwf	_actualScreen& (0+255),w,b
 20953  004954  B4D8               	btfsc	status,2,c
 20954  004956  D005               	goto	i1l8356
 20955                           
 20956                           ; BSR set to: 1
 20957  004958  0E0F               	movlw	15
 20958  00495A  0101               	movlb	1	; () banked
 20959  00495C  19B9               	xorwf	_actualScreen& (0+255),w,b
 20960  00495E  A4D8               	btfss	status,2,c
 20961  004960  D011               	goto	i1l8362
 20962  004962                     i1l8356:
 20963                           
 20964                           ; BSR set to: 1
 20965                           ;DisplayProtocol.h: 138: selSN = !selSN;
 20966  004962  0101               	movlb	1	; () banked
 20967  004964  51BF               	movf	_selSN& (0+255),w,b
 20968  004966  A4D8               	btfss	status,2,c
 20969  004968  D002               	goto	i1u1154_20
 20970  00496A  0E01               	movlw	1
 20971  00496C  D001               	goto	i1u1155_20
 20972  00496E                     i1u1154_20:
 20973  00496E  0E00               	movlw	0
 20974  004970                     i1u1155_20:
 20975  004970  0101               	movlb	1	; () banked
 20976  004972  6FBF               	movwf	_selSN& (0+255),b
 20977                           
 20978                           ; BSR set to: 1
 20979                           ;DisplayProtocol.h: 139: if(selSN > 1)
 20980  004974  0E01               	movlw	1
 20981  004976  0101               	movlb	1	; () banked
 20982  004978  65BF               	cpfsgt	_selSN& (0+255),b
 20983  00497A  0012               	return	
 20984                           
 20985                           ; BSR set to: 1
 20986                           ;DisplayProtocol.h: 140: selSN = 0;
 20987  00497C  0E00               	movlw	0
 20988  00497E  0101               	movlb	1	; () banked
 20989  004980  6FBF               	movwf	_selSN& (0+255),b
 20990                           
 20991                           ; BSR set to: 1
 20992                           ;DisplayProtocol.h: 141: }else if(actualScreen == 5) {
 20993  004982  0012               	return	
 20994  004984                     i1l8362:
 20995                           
 20996                           ; BSR set to: 1
 20997  004984  0E05               	movlw	5
 20998  004986  0101               	movlb	1	; () banked
 20999  004988  19B9               	xorwf	_actualScreen& (0+255),w,b
 21000  00498A  B4D8               	btfsc	status,2,c
 21001  00498C  D008               	goto	i1l8372
 21002  00498E  D013               	goto	i1l8374
 21003  004990                     i1l8366:
 21004                           
 21005                           ; BSR set to: 1
 21006                           ;DisplayProtocol.h: 146: chanValDigUP();
 21007  004990  ECCE  F029         	call	i1_chanValDigUP	;wreg free
 21008                           
 21009                           ;DisplayProtocol.h: 147: break;
 21010  004994  0012               	return	
 21011  004996                     i1l8368:
 21012                           
 21013                           ;DisplayProtocol.h: 149: chanVals++;
 21014  004996  0101               	movlb	1	; () banked
 21015  004998  4BB4               	infsnz	_chanVals& (0+255),f,b
 21016  00499A  2BB5               	incf	(_chanVals+1)& (0+255),f,b
 21017                           
 21018                           ; BSR set to: 1
 21019                           ;DisplayProtocol.h: 151: }
 21020                           ;DisplayProtocol.h: 152: }
 21021                           
 21022                           ;DisplayProtocol.h: 150: break;
 21023  00499C  0012               	return	
 21024  00499E                     i1l8372:
 21025                           
 21026                           ; BSR set to: 1
 21027  00499E  0101               	movlb	1	; () banked
 21028  0049A0  51BD               	movf	_menuSection& (0+255),w,b
 21029                           
 21030                           ; Switch size 1, requested type "space"
 21031                           ; Number of cases is 3, Range of values is 0 to 2
 21032                           ; switch strategies available:
 21033                           ; Name         Instructions Cycles
 21034                           ; simple_byte           10     6 (average)
 21035                           ;	Chosen strategy is simple_byte
 21036  0049A2  0A00               	xorlw	0	; case 0
 21037  0049A4  B4D8               	btfsc	status,2,c
 21038  0049A6  0012               	return	
 21039  0049A8  0A01               	xorlw	1	; case 1
 21040  0049AA  B4D8               	btfsc	status,2,c
 21041  0049AC  D7F1               	goto	i1l8366
 21042  0049AE  0A03               	xorlw	3	; case 2
 21043  0049B0  A4D8               	btfss	status,2,c
 21044                           
 21045                           ; BSR set to: 1
 21046                           ;DisplayProtocol.h: 153: }else if(actualScreen == 12)
 21047  0049B2  0012               	return	
 21048  0049B4  D7F0               	goto	i1l8368
 21049  0049B6                     i1l8374:
 21050                           
 21051                           ; BSR set to: 1
 21052  0049B6  0E0C               	movlw	12
 21053  0049B8  0101               	movlb	1	; () banked
 21054  0049BA  19B9               	xorwf	_actualScreen& (0+255),w,b
 21055  0049BC  A4D8               	btfss	status,2,c
 21056  0049BE  0012               	return	
 21057                           
 21058                           ; BSR set to: 1
 21059                           ;DisplayProtocol.h: 154: chanValDigUP();
 21060  0049C0  ECCE  F029         	call	i1_chanValDigUP	;wreg free
 21061  0049C4  0012               	return	
 21062  0049C6                     __end_ofi1_pressUP:
 21063                           	opt stack 0
 21064                           pclatu	equ	0xFFB
 21065                           pclath	equ	0xFFA
 21066                           tblptru	equ	0xFF8
 21067                           tblptrh	equ	0xFF7
 21068                           tblptrl	equ	0xFF6
 21069                           tablat	equ	0xFF5
 21070                           prodh	equ	0xFF4
 21071                           prodl	equ	0xFF3
 21072                           intcon	equ	0xFF2
 21073                           postinc0	equ	0xFEE
 21074                           fsr0h	equ	0xFEA
 21075                           fsr0l	equ	0xFE9
 21076                           wreg	equ	0xFE8
 21077                           postdec1	equ	0xFE5
 21078                           fsr1h	equ	0xFE2
 21079                           fsr1l	equ	0xFE1
 21080                           bsr	equ	0xFE0
 21081                           indf2	equ	0xFDF
 21082                           postinc2	equ	0xFDE
 21083                           postdec2	equ	0xFDD
 21084                           plusw2	equ	0xFDB
 21085                           fsr2h	equ	0xFDA
 21086                           fsr2l	equ	0xFD9
 21087                           status	equ	0xFD8
 21088                           
 21089 ;; *************** function i1_chanValDigUP *****************
 21090 ;; Defined at:
 21091 ;;		line 28 in file "source/DisplayProtocol.h"
 21092 ;; Parameters:    Size  Location     Type
 21093 ;;		None
 21094 ;; Auto vars:     Size  Location     Type
 21095 ;;		None
 21096 ;; Return value:  Size  Location     Type
 21097 ;;                  1    wreg      void 
 21098 ;; Registers used:
 21099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21100 ;; Tracked objects:
 21101 ;;		On entry : 0/0
 21102 ;;		On exit  : 0/0
 21103 ;;		Unchanged: 0/0
 21104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21105 ;;      Params:         0       0       0       0       0       0       0
 21106 ;;      Locals:         0       0       0       0       0       0       0
 21107 ;;      Temps:          0       5       0       0       0       0       0
 21108 ;;      Totals:         0       5       0       0       0       0       0
 21109 ;;Total ram usage:        5 bytes
 21110 ;; Hardware stack levels used:    1
 21111 ;; Hardware stack levels required when called:    4
 21112 ;; This function calls:
 21113 ;;		Nothing
 21114 ;; This function is called by:
 21115 ;;		i1_pressUP
 21116 ;; This function uses a non-reentrant model
 21117 ;;
 21118                           
 21119                           	psect	text90
 21120  00539C                     __ptext90:
 21121                           	opt stack 0
 21122  00539C                     i1_chanValDigUP:
 21123                           	opt stack 13
 21124                           
 21125                           ;DisplayProtocol.h: 29: chanValdig[chanValSection]++;
 21126                           
 21127                           ;incstack = 0
 21128  00539C  0101               	movlb	1	; () banked
 21129  00539E  519B               	movf	_chanValSection& (0+255),w,b
 21130  0053A0  0D01               	mullw	1
 21131  0053A2  0EA3               	movlw	low _chanValdig
 21132  0053A4  24F3               	addwf	prodl,w,c
 21133  0053A6  6ED9               	movwf	fsr2l,c
 21134  0053A8  0E01               	movlw	high _chanValdig
 21135  0053AA  20F4               	addwfc	prodh,w,c
 21136  0053AC  6EDA               	movwf	fsr2h,c
 21137  0053AE  2ADF               	incf	indf2,f,c
 21138                           
 21139                           ;DisplayProtocol.h: 30: if(chanValdig[chanValSection] > 9) {
 21140  0053B0  0101               	movlb	1	; () banked
 21141  0053B2  519B               	movf	_chanValSection& (0+255),w,b
 21142  0053B4  0D01               	mullw	1
 21143  0053B6  0EA3               	movlw	low _chanValdig
 21144  0053B8  24F3               	addwf	prodl,w,c
 21145  0053BA  6ED9               	movwf	fsr2l,c
 21146  0053BC  0E01               	movlw	high _chanValdig
 21147  0053BE  20F4               	addwfc	prodh,w,c
 21148  0053C0  6EDA               	movwf	fsr2h,c
 21149  0053C2  50DF               	movf	indf2,w,c
 21150  0053C4  0A80               	xorlw	128
 21151  0053C6  0F76               	addlw	-138
 21152  0053C8  A0D8               	btfss	status,0,c
 21153  0053CA  0012               	return	
 21154                           
 21155                           ; BSR set to: 1
 21156                           ;DisplayProtocol.h: 31: chanValdig[chanValSection] = 0;
 21157  0053CC  0101               	movlb	1	; () banked
 21158  0053CE  519B               	movf	_chanValSection& (0+255),w,b
 21159  0053D0  0D01               	mullw	1
 21160  0053D2  0EA3               	movlw	low _chanValdig
 21161  0053D4  24F3               	addwf	prodl,w,c
 21162  0053D6  6ED9               	movwf	fsr2l,c
 21163  0053D8  0E01               	movlw	high _chanValdig
 21164  0053DA  20F4               	addwfc	prodh,w,c
 21165  0053DC  6EDA               	movwf	fsr2h,c
 21166  0053DE  0E00               	movlw	0
 21167  0053E0  6EDF               	movwf	indf2,c
 21168                           
 21169                           ; BSR set to: 1
 21170                           ;DisplayProtocol.h: 32: if(chanValSection > 1 && chanValdig[chanValSection - 1] < 9)
 21171  0053E2  0101               	movlb	1	; () banked
 21172  0053E4  519B               	movf	_chanValSection& (0+255),w,b
 21173  0053E6  0A80               	xorlw	128
 21174  0053E8  0F7E               	addlw	-130
 21175  0053EA  A0D8               	btfss	status,0,c
 21176  0053EC  0012               	return	
 21177                           
 21178                           ; BSR set to: 1
 21179  0053EE  0EFF               	movlw	255
 21180  0053F0  0100               	movlb	0	; () banked
 21181  0053F2  6F60               	movwf	??i1_chanValDigUP& (0+255),b
 21182  0053F4  0EFF               	movlw	255
 21183  0053F6  0100               	movlb	0	; () banked
 21184  0053F8  6F61               	movwf	(??i1_chanValDigUP+1)& (0+255),b
 21185  0053FA  C19B  F062         	movff	_chanValSection,??i1_chanValDigUP+2
 21186  0053FE  0100               	movlb	0	; () banked
 21187  005400  6B63               	clrf	(??i1_chanValDigUP+3)& (0+255),b
 21188  005402  BF62               	btfsc	(??i1_chanValDigUP+2)& (0+255),7,b
 21189  005404  0763               	decf	(??i1_chanValDigUP+3)& (0+255),f,b
 21190  005406  0100               	movlb	0	; () banked
 21191  005408  5160               	movf	??i1_chanValDigUP& (0+255),w,b
 21192  00540A  0100               	movlb	0	; () banked
 21193  00540C  2762               	addwf	(??i1_chanValDigUP+2)& (0+255),f,b
 21194  00540E  0100               	movlb	0	; () banked
 21195  005410  5161               	movf	(??i1_chanValDigUP+1)& (0+255),w,b
 21196  005412  0100               	movlb	0	; () banked
 21197  005414  2363               	addwfc	(??i1_chanValDigUP+3)& (0+255),f,b
 21198  005416  0EA3               	movlw	low _chanValdig
 21199  005418  0100               	movlb	0	; () banked
 21200  00541A  2562               	addwf	(??i1_chanValDigUP+2)& (0+255),w,b
 21201  00541C  6ED9               	movwf	fsr2l,c
 21202  00541E  0E01               	movlw	high _chanValdig
 21203  005420  0100               	movlb	0	; () banked
 21204  005422  2163               	addwfc	(??i1_chanValDigUP+3)& (0+255),w,b
 21205  005424  6EDA               	movwf	fsr2h,c
 21206  005426  50DF               	movf	indf2,w,c
 21207  005428  0A80               	xorlw	128
 21208  00542A  0F77               	addlw	-137
 21209  00542C  B0D8               	btfsc	status,0,c
 21210  00542E  0012               	return	
 21211                           
 21212                           ; BSR set to: 0
 21213                           ;DisplayProtocol.h: 33: chanValdig[chanValSection - 1]++;
 21214  005430  0EFF               	movlw	255
 21215  005432  0100               	movlb	0	; () banked
 21216  005434  6F60               	movwf	??i1_chanValDigUP& (0+255),b
 21217  005436  0EFF               	movlw	255
 21218  005438  0100               	movlb	0	; () banked
 21219  00543A  6F61               	movwf	(??i1_chanValDigUP+1)& (0+255),b
 21220  00543C  C19B  F062         	movff	_chanValSection,??i1_chanValDigUP+2
 21221  005440  0100               	movlb	0	; () banked
 21222  005442  6B63               	clrf	(??i1_chanValDigUP+3)& (0+255),b
 21223  005444  BF62               	btfsc	(??i1_chanValDigUP+2)& (0+255),7,b
 21224  005446  0763               	decf	(??i1_chanValDigUP+3)& (0+255),f,b
 21225  005448  0100               	movlb	0	; () banked
 21226  00544A  5160               	movf	??i1_chanValDigUP& (0+255),w,b
 21227  00544C  0100               	movlb	0	; () banked
 21228  00544E  2762               	addwf	(??i1_chanValDigUP+2)& (0+255),f,b
 21229  005450  0100               	movlb	0	; () banked
 21230  005452  5161               	movf	(??i1_chanValDigUP+1)& (0+255),w,b
 21231  005454  0100               	movlb	0	; () banked
 21232  005456  2363               	addwfc	(??i1_chanValDigUP+3)& (0+255),f,b
 21233  005458  0EA3               	movlw	low _chanValdig
 21234  00545A  0100               	movlb	0	; () banked
 21235  00545C  2562               	addwf	(??i1_chanValDigUP+2)& (0+255),w,b
 21236  00545E  6ED9               	movwf	fsr2l,c
 21237  005460  0E01               	movlw	high _chanValdig
 21238  005462  0100               	movlb	0	; () banked
 21239  005464  2163               	addwfc	(??i1_chanValDigUP+3)& (0+255),w,b
 21240  005466  6EDA               	movwf	fsr2h,c
 21241  005468  2ADF               	incf	indf2,f,c
 21242                           
 21243                           ; BSR set to: 0
 21244  00546A  0012               	return	
 21245  00546C                     __end_ofi1_chanValDigUP:
 21246                           	opt stack 0
 21247                           pclatu	equ	0xFFB
 21248                           pclath	equ	0xFFA
 21249                           tblptru	equ	0xFF8
 21250                           tblptrh	equ	0xFF7
 21251                           tblptrl	equ	0xFF6
 21252                           tablat	equ	0xFF5
 21253                           prodh	equ	0xFF4
 21254                           prodl	equ	0xFF3
 21255                           intcon	equ	0xFF2
 21256                           postinc0	equ	0xFEE
 21257                           fsr0h	equ	0xFEA
 21258                           fsr0l	equ	0xFE9
 21259                           wreg	equ	0xFE8
 21260                           postdec1	equ	0xFE5
 21261                           fsr1h	equ	0xFE2
 21262                           fsr1l	equ	0xFE1
 21263                           bsr	equ	0xFE0
 21264                           indf2	equ	0xFDF
 21265                           postinc2	equ	0xFDE
 21266                           postdec2	equ	0xFDD
 21267                           plusw2	equ	0xFDB
 21268                           fsr2h	equ	0xFDA
 21269                           fsr2l	equ	0xFD9
 21270                           status	equ	0xFD8
 21271                           
 21272 ;; *************** function i1_pressRETRO *****************
 21273 ;; Defined at:
 21274 ;;		line 227 in file "source/DisplayProtocol.h"
 21275 ;; Parameters:    Size  Location     Type
 21276 ;;		None
 21277 ;; Auto vars:     Size  Location     Type
 21278 ;;		None
 21279 ;; Return value:  Size  Location     Type
 21280 ;;                  1    wreg      void 
 21281 ;; Registers used:
 21282 ;;		wreg, status,2, status,0, cstack
 21283 ;; Tracked objects:
 21284 ;;		On entry : 0/0
 21285 ;;		On exit  : 0/0
 21286 ;;		Unchanged: 0/0
 21287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21288 ;;      Params:         0       0       0       0       0       0       0
 21289 ;;      Locals:         0       0       0       0       0       0       0
 21290 ;;      Temps:          0       0       0       0       0       0       0
 21291 ;;      Totals:         0       0       0       0       0       0       0
 21292 ;;Total ram usage:        0 bytes
 21293 ;; Hardware stack levels used:    1
 21294 ;; Hardware stack levels required when called:    6
 21295 ;; This function calls:
 21296 ;;		i1_initProtocoll
 21297 ;; This function is called by:
 21298 ;;		_UARTint
 21299 ;; This function uses a non-reentrant model
 21300 ;;
 21301                           
 21302                           	psect	text91
 21303  00578E                     __ptext91:
 21304                           	opt stack 0
 21305  00578E                     i1_pressRETRO:
 21306                           	opt stack 12
 21307                           
 21308                           ;DisplayProtocol.h: 228: if (actualScreen == 1) {
 21309                           
 21310                           ;incstack = 0
 21311  00578E  0101               	movlb	1	; () banked
 21312  005790  05B9               	decf	_actualScreen& (0+255),w,b
 21313  005792  A4D8               	btfss	status,2,c
 21314  005794  D004               	goto	i1l8464
 21315                           
 21316                           ; BSR set to: 1
 21317                           ;DisplayProtocol.h: 229: actualScreen = 0;
 21318  005796  0E00               	movlw	0
 21319  005798  0101               	movlb	1	; () banked
 21320  00579A  6FB9               	movwf	_actualScreen& (0+255),b
 21321                           
 21322                           ;DisplayProtocol.h: 230: }else if (actualScreen == 2 || actualScreen == 3
 21323  00579C  0012               	return	
 21324  00579E                     i1l8464:
 21325                           
 21326                           ; BSR set to: 1
 21327                           ;DisplayProtocol.h: 231: || actualScreen == 10 || actualScreen == 11
 21328                           ;DisplayProtocol.h: 232: || actualScreen == 15) {
 21329  00579E  0E02               	movlw	2
 21330  0057A0  0101               	movlb	1	; () banked
 21331  0057A2  19B9               	xorwf	_actualScreen& (0+255),w,b
 21332  0057A4  B4D8               	btfsc	status,2,c
 21333  0057A6  D014               	goto	i1l666
 21334                           
 21335                           ; BSR set to: 1
 21336  0057A8  0E03               	movlw	3
 21337  0057AA  0101               	movlb	1	; () banked
 21338  0057AC  19B9               	xorwf	_actualScreen& (0+255),w,b
 21339  0057AE  B4D8               	btfsc	status,2,c
 21340  0057B0  D00F               	goto	i1l666
 21341                           
 21342                           ; BSR set to: 1
 21343  0057B2  0E0A               	movlw	10
 21344  0057B4  0101               	movlb	1	; () banked
 21345  0057B6  19B9               	xorwf	_actualScreen& (0+255),w,b
 21346  0057B8  B4D8               	btfsc	status,2,c
 21347  0057BA  D00A               	goto	i1l666
 21348                           
 21349                           ; BSR set to: 1
 21350  0057BC  0E0B               	movlw	11
 21351  0057BE  0101               	movlb	1	; () banked
 21352  0057C0  19B9               	xorwf	_actualScreen& (0+255),w,b
 21353  0057C2  B4D8               	btfsc	status,2,c
 21354  0057C4  D005               	goto	i1l666
 21355                           
 21356                           ; BSR set to: 1
 21357  0057C6  0E0F               	movlw	15
 21358  0057C8  0101               	movlb	1	; () banked
 21359  0057CA  19B9               	xorwf	_actualScreen& (0+255),w,b
 21360  0057CC  A4D8               	btfss	status,2,c
 21361  0057CE  D003               	goto	i1l8474
 21362  0057D0                     i1l666:
 21363                           
 21364                           ; BSR set to: 1
 21365                           ;DisplayProtocol.h: 233: actualScreen = tempLastScreen;
 21366  0057D0  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 21367                           
 21368                           ;DisplayProtocol.h: 234: }else if(actualScreen == 5) {
 21369  0057D4  0012               	return	
 21370  0057D6                     i1l8474:
 21371                           
 21372                           ; BSR set to: 1
 21373  0057D6  0E05               	movlw	5
 21374  0057D8  0101               	movlb	1	; () banked
 21375  0057DA  19B9               	xorwf	_actualScreen& (0+255),w,b
 21376  0057DC  A4D8               	btfss	status,2,c
 21377  0057DE  D015               	goto	i1l8486
 21378                           
 21379                           ; BSR set to: 1
 21380                           ;DisplayProtocol.h: 235: if(menuSection != 2) {
 21381  0057E0  0E02               	movlw	2
 21382  0057E2  0101               	movlb	1	; () banked
 21383  0057E4  19BD               	xorwf	_menuSection& (0+255),w,b
 21384  0057E6  B4D8               	btfsc	status,2,c
 21385  0057E8  D00C               	goto	i1l8484
 21386                           
 21387                           ; BSR set to: 1
 21388                           ;DisplayProtocol.h: 236: chanValSection++;
 21389  0057EA  0101               	movlb	1	; () banked
 21390  0057EC  2B9B               	incf	_chanValSection& (0+255),f,b
 21391                           
 21392                           ; BSR set to: 1
 21393                           ;DisplayProtocol.h: 237: if(chanValSection > 5)
 21394  0057EE  0101               	movlb	1	; () banked
 21395  0057F0  519B               	movf	_chanValSection& (0+255),w,b
 21396  0057F2  0A80               	xorlw	128
 21397  0057F4  0F7A               	addlw	-134
 21398  0057F6  A0D8               	btfss	status,0,c
 21399  0057F8  0012               	return	
 21400                           
 21401                           ; BSR set to: 1
 21402                           ;DisplayProtocol.h: 238: chanValSection = 0;
 21403  0057FA  0E00               	movlw	0
 21404  0057FC  0101               	movlb	1	; () banked
 21405  0057FE  6F9B               	movwf	_chanValSection& (0+255),b
 21406                           
 21407                           ; BSR set to: 1
 21408                           ;DisplayProtocol.h: 239: }else
 21409  005800  0012               	return	
 21410  005802                     i1l8484:
 21411                           
 21412                           ; BSR set to: 1
 21413                           ;DisplayProtocol.h: 240: actualScreen = 4;
 21414  005802  0E04               	movlw	4
 21415  005804  0101               	movlb	1	; () banked
 21416  005806  6FB9               	movwf	_actualScreen& (0+255),b
 21417                           
 21418                           ; BSR set to: 1
 21419                           ;DisplayProtocol.h: 241: }else if(actualScreen == 11)
 21420  005808  0012               	return	
 21421  00580A                     i1l8486:
 21422                           
 21423                           ; BSR set to: 1
 21424  00580A  0E0B               	movlw	11
 21425  00580C  0101               	movlb	1	; () banked
 21426  00580E  19B9               	xorwf	_actualScreen& (0+255),w,b
 21427  005810  A4D8               	btfss	status,2,c
 21428  005812  D004               	goto	i1l8490
 21429                           
 21430                           ; BSR set to: 1
 21431                           ;DisplayProtocol.h: 242: actualScreen = 4;
 21432  005814  0E04               	movlw	4
 21433  005816  0101               	movlb	1	; () banked
 21434  005818  6FB9               	movwf	_actualScreen& (0+255),b
 21435  00581A  0012               	return	
 21436  00581C                     i1l8490:
 21437                           
 21438                           ; BSR set to: 1
 21439                           ;DisplayProtocol.h: 243: else if(actualScreen == 12) {
 21440  00581C  0E0C               	movlw	12
 21441  00581E  0101               	movlb	1	; () banked
 21442  005820  19B9               	xorwf	_actualScreen& (0+255),w,b
 21443  005822  A4D8               	btfss	status,2,c
 21444  005824  D00C               	goto	i1l8498
 21445                           
 21446                           ; BSR set to: 1
 21447                           ;DisplayProtocol.h: 244: chanValSection++;
 21448  005826  0101               	movlb	1	; () banked
 21449  005828  2B9B               	incf	_chanValSection& (0+255),f,b
 21450                           
 21451                           ; BSR set to: 1
 21452                           ;DisplayProtocol.h: 245: if(chanValSection > 5)
 21453  00582A  0101               	movlb	1	; () banked
 21454  00582C  519B               	movf	_chanValSection& (0+255),w,b
 21455  00582E  0A80               	xorlw	128
 21456  005830  0F7A               	addlw	-134
 21457  005832  A0D8               	btfss	status,0,c
 21458  005834  0012               	return	
 21459                           
 21460                           ; BSR set to: 1
 21461                           ;DisplayProtocol.h: 246: chanValSection = 0;
 21462  005836  0E00               	movlw	0
 21463  005838  0101               	movlb	1	; () banked
 21464  00583A  6F9B               	movwf	_chanValSection& (0+255),b
 21465                           
 21466                           ; BSR set to: 1
 21467                           ;DisplayProtocol.h: 247: }else if(actualScreen == 13) {
 21468  00583C  0012               	return	
 21469  00583E                     i1l8498:
 21470                           
 21471                           ; BSR set to: 1
 21472  00583E  0E0D               	movlw	13
 21473  005840  0101               	movlb	1	; () banked
 21474  005842  19B9               	xorwf	_actualScreen& (0+255),w,b
 21475  005844  A4D8               	btfss	status,2,c
 21476  005846  0012               	return	
 21477                           
 21478                           ; BSR set to: 1
 21479                           ;DisplayProtocol.h: 248: initProtocoll(1);
 21480  005848  0E01               	movlw	1
 21481  00584A  ECC9  F036         	call	i1_initProtocoll
 21482  00584E  0012               	return	
 21483  005850                     __end_ofi1_pressRETRO:
 21484                           	opt stack 0
 21485                           pclatu	equ	0xFFB
 21486                           pclath	equ	0xFFA
 21487                           tblptru	equ	0xFF8
 21488                           tblptrh	equ	0xFF7
 21489                           tblptrl	equ	0xFF6
 21490                           tablat	equ	0xFF5
 21491                           prodh	equ	0xFF4
 21492                           prodl	equ	0xFF3
 21493                           intcon	equ	0xFF2
 21494                           postinc0	equ	0xFEE
 21495                           fsr0h	equ	0xFEA
 21496                           fsr0l	equ	0xFE9
 21497                           wreg	equ	0xFE8
 21498                           postdec1	equ	0xFE5
 21499                           fsr1h	equ	0xFE2
 21500                           fsr1l	equ	0xFE1
 21501                           bsr	equ	0xFE0
 21502                           indf2	equ	0xFDF
 21503                           postinc2	equ	0xFDE
 21504                           postdec2	equ	0xFDD
 21505                           plusw2	equ	0xFDB
 21506                           fsr2h	equ	0xFDA
 21507                           fsr2l	equ	0xFD9
 21508                           status	equ	0xFD8
 21509                           
 21510 ;; *************** function i1_pressENTER *****************
 21511 ;; Defined at:
 21512 ;;		line 291 in file "source/DisplayProtocol.h"
 21513 ;; Parameters:    Size  Location     Type
 21514 ;;		None
 21515 ;; Auto vars:     Size  Location     Type
 21516 ;;		None
 21517 ;; Return value:  Size  Location     Type
 21518 ;;                  1    wreg      void 
 21519 ;; Registers used:
 21520 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21521 ;; Tracked objects:
 21522 ;;		On entry : 0/0
 21523 ;;		On exit  : 0/0
 21524 ;;		Unchanged: 0/0
 21525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21526 ;;      Params:         0       0       0       0       0       0       0
 21527 ;;      Locals:         0       0       0       0       0       0       0
 21528 ;;      Temps:          0       0       0       0       0       0       0
 21529 ;;      Totals:         0       0       0       0       0       0       0
 21530 ;;Total ram usage:        0 bytes
 21531 ;; Hardware stack levels used:    1
 21532 ;; Hardware stack levels required when called:    9
 21533 ;; This function calls:
 21534 ;;		i1___ftmul
 21535 ;;		i1_checkPass
 21536 ;;		i1_confirmEdition
 21537 ;;		i1_desintegrator
 21538 ;;		i1_initProtocoll
 21539 ;;		i1_setPWM2duty
 21540 ;; This function is called by:
 21541 ;;		_UARTint
 21542 ;; This function uses a non-reentrant model
 21543 ;;
 21544                           
 21545                           	psect	text92
 21546  001570                     __ptext92:
 21547                           	opt stack 0
 21548  001570                     i1_pressENTER:
 21549                           	opt stack 9
 21550                           
 21551                           ;DisplayProtocol.h: 292: if (actualScreen == 1) {
 21552                           
 21553                           ;incstack = 0
 21554  001570  0101               	movlb	1	; () banked
 21555  001572  05B9               	decf	_actualScreen& (0+255),w,b
 21556  001574  A4D8               	btfss	status,2,c
 21557  001576  D018               	goto	i1l8554
 21558                           
 21559                           ; BSR set to: 1
 21560                           ;DisplayProtocol.h: 293: passSection++;
 21561  001578  0101               	movlb	1	; () banked
 21562  00157A  2BBE               	incf	_passSection& (0+255),f,b
 21563                           
 21564                           ; BSR set to: 1
 21565                           ;DisplayProtocol.h: 294: if (passSection > 3) {
 21566  00157C  0101               	movlb	1	; () banked
 21567  00157E  51BE               	movf	_passSection& (0+255),w,b
 21568  001580  0A80               	xorlw	128
 21569  001582  0F7C               	addlw	-132
 21570  001584  A0D8               	btfss	status,0,c
 21571  001586  0012               	return	
 21572                           
 21573                           ; BSR set to: 1
 21574                           ;DisplayProtocol.h: 295: passSection = 0;
 21575  001588  0E00               	movlw	0
 21576  00158A  0101               	movlb	1	; () banked
 21577  00158C  6FBE               	movwf	_passSection& (0+255),b
 21578                           
 21579                           ; BSR set to: 1
 21580                           ;DisplayProtocol.h: 296: if (checkPass())
 21581  00158E  ECCA  F031         	call	i1_checkPass	;wreg free
 21582  001592  0900               	iorlw	0
 21583  001594  B4D8               	btfsc	status,2,c
 21584  001596  D004               	goto	i1l8552
 21585                           
 21586                           ;DisplayProtocol.h: 297: actualScreen = 8;
 21587  001598  0E08               	movlw	8
 21588  00159A  0101               	movlb	1	; () banked
 21589  00159C  6FB9               	movwf	_actualScreen& (0+255),b
 21590  00159E  0012               	return	
 21591  0015A0                     i1l8552:
 21592                           
 21593                           ;DisplayProtocol.h: 298: else
 21594                           ;DisplayProtocol.h: 299: actualScreen = 7;
 21595  0015A0  0E07               	movlw	7
 21596  0015A2  0101               	movlb	1	; () banked
 21597  0015A4  6FB9               	movwf	_actualScreen& (0+255),b
 21598                           
 21599                           ; BSR set to: 1
 21600                           ;DisplayProtocol.h: 300: }
 21601                           ;DisplayProtocol.h: 301: }else if(actualScreen == 4) {
 21602                           
 21603                           ; BSR set to: 1
 21604  0015A6  0012               	return	
 21605  0015A8                     i1l8554:
 21606                           
 21607                           ; BSR set to: 1
 21608  0015A8  0E04               	movlw	4
 21609  0015AA  0101               	movlb	1	; () banked
 21610  0015AC  19B9               	xorwf	_actualScreen& (0+255),w,b
 21611  0015AE  B4D8               	btfsc	status,2,c
 21612  0015B0  D038               	goto	i1l8578
 21613  0015B2  D046               	goto	i1l8580
 21614  0015B4                     i1l711:
 21615                           
 21616                           ; BSR set to: 1
 21617                           ;DisplayProtocol.h: 304: tempLastScreen = actualScreen;
 21618  0015B4  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 21619                           
 21620                           ; BSR set to: 1
 21621                           ;DisplayProtocol.h: 305: if(processStarted) {
 21622  0015B8  0100               	movlb	0	; () banked
 21623  0015BA  51C4               	movf	_processStarted& (0+255),w,b
 21624  0015BC  B4D8               	btfsc	status,2,c
 21625  0015BE  D007               	goto	i1l8562
 21626                           
 21627                           ; BSR set to: 0
 21628                           ;DisplayProtocol.h: 306: actualScreen = 3;
 21629  0015C0  0E03               	movlw	3
 21630  0015C2  0101               	movlb	1	; () banked
 21631  0015C4  6FB9               	movwf	_actualScreen& (0+255),b
 21632                           
 21633                           ;DisplayProtocol.h: 307: selSN = 0;
 21634  0015C6  0E00               	movlw	0
 21635  0015C8  0101               	movlb	1	; () banked
 21636  0015CA  6FBF               	movwf	_selSN& (0+255),b
 21637                           
 21638                           ;DisplayProtocol.h: 308: }else {
 21639  0015CC  0012               	return	
 21640  0015CE                     i1l8562:
 21641                           
 21642                           ;DisplayProtocol.h: 309: actualScreen = 2;
 21643  0015CE  0E02               	movlw	2
 21644  0015D0  0101               	movlb	1	; () banked
 21645  0015D2  6FB9               	movwf	_actualScreen& (0+255),b
 21646                           
 21647                           ;DisplayProtocol.h: 310: selSN = 1;
 21648  0015D4  0E01               	movlw	1
 21649  0015D6  0101               	movlb	1	; () banked
 21650  0015D8  6FBF               	movwf	_selSN& (0+255),b
 21651                           
 21652                           ; BSR set to: 1
 21653                           ;DisplayProtocol.h: 311: }
 21654                           ;DisplayProtocol.h: 312: break;
 21655  0015DA  0012               	return	
 21656  0015DC                     i1l715:
 21657                           
 21658                           ; BSR set to: 1
 21659                           ;DisplayProtocol.h: 314: chanValf = kgXcorte;
 21660  0015DC  C18F  F1B1         	movff	_kgXcorte,_chanValf
 21661  0015E0  C190  F1B2         	movff	_kgXcorte+1,_chanValf+1
 21662  0015E4  C191  F1B3         	movff	_kgXcorte+2,_chanValf+2
 21663                           
 21664                           ; BSR set to: 1
 21665                           ;DisplayProtocol.h: 315: desintegrator();
 21666  0015E8  ECB9  F01A         	call	i1_desintegrator	;wreg free
 21667                           
 21668                           ;DisplayProtocol.h: 316: actualScreen = 5;
 21669  0015EC  0E05               	movlw	5
 21670  0015EE  0101               	movlb	1	; () banked
 21671  0015F0  6FB9               	movwf	_actualScreen& (0+255),b
 21672                           
 21673                           ;DisplayProtocol.h: 317: break;
 21674  0015F2  0012               	return	
 21675  0015F4                     i1l716:
 21676                           
 21677                           ; BSR set to: 1
 21678                           ;DisplayProtocol.h: 319: tempLastScreen = actualScreen;
 21679  0015F4  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 21680                           
 21681                           ;DisplayProtocol.h: 320: chanVals = numCortes;
 21682  0015F8  C0D0  F1B4         	movff	_numCortes,_chanVals
 21683  0015FC  C0D1  F1B5         	movff	_numCortes+1,_chanVals+1
 21684                           
 21685                           ; BSR set to: 1
 21686                           ;DisplayProtocol.h: 321: actualScreen = 5;
 21687  001600  0E05               	movlw	5
 21688  001602  0101               	movlb	1	; () banked
 21689  001604  6FB9               	movwf	_actualScreen& (0+255),b
 21690                           
 21691                           ;DisplayProtocol.h: 322: break;
 21692  001606  0012               	return	
 21693  001608                     i1l8570:
 21694                           
 21695                           ; BSR set to: 1
 21696                           ;DisplayProtocol.h: 324: if(!processStarted) {
 21697  001608  0100               	movlb	0	; () banked
 21698  00160A  51C4               	movf	_processStarted& (0+255),w,b
 21699  00160C  A4D8               	btfss	status,2,c
 21700  00160E  0012               	return	
 21701                           
 21702                           ; BSR set to: 0
 21703                           ;DisplayProtocol.h: 325: tempLastScreen = actualScreen;
 21704  001610  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 21705                           
 21706                           ; BSR set to: 0
 21707                           ;DisplayProtocol.h: 326: selSN = 1;
 21708  001614  0E01               	movlw	1
 21709  001616  0101               	movlb	1	; () banked
 21710  001618  6FBF               	movwf	_selSN& (0+255),b
 21711                           
 21712                           ;DisplayProtocol.h: 327: actualScreen = 11;
 21713  00161A  0E0B               	movlw	11
 21714  00161C  0101               	movlb	1	; () banked
 21715  00161E  6FB9               	movwf	_actualScreen& (0+255),b
 21716                           
 21717                           ; BSR set to: 1
 21718                           ;DisplayProtocol.h: 330: }
 21719                           ;DisplayProtocol.h: 331: }
 21720                           
 21721                           ; BSR set to: 1
 21722                           ;DisplayProtocol.h: 328: }
 21723                           ;DisplayProtocol.h: 329: break;
 21724  001620  0012               	return	
 21725  001622                     i1l8578:
 21726                           
 21727                           ; BSR set to: 1
 21728  001622  0101               	movlb	1	; () banked
 21729  001624  51BD               	movf	_menuSection& (0+255),w,b
 21730                           
 21731                           ; Switch size 1, requested type "space"
 21732                           ; Number of cases is 4, Range of values is 0 to 3
 21733                           ; switch strategies available:
 21734                           ; Name         Instructions Cycles
 21735                           ; simple_byte           13     7 (average)
 21736                           ;	Chosen strategy is simple_byte
 21737  001626  0A00               	xorlw	0	; case 0
 21738  001628  B4D8               	btfsc	status,2,c
 21739  00162A  D7C4               	goto	i1l711
 21740  00162C  0A01               	xorlw	1	; case 1
 21741  00162E  B4D8               	btfsc	status,2,c
 21742  001630  D7D5               	goto	i1l715
 21743  001632  0A03               	xorlw	3	; case 2
 21744  001634  B4D8               	btfsc	status,2,c
 21745  001636  D7DE               	goto	i1l716
 21746  001638  0A01               	xorlw	1	; case 3
 21747  00163A  A4D8               	btfss	status,2,c
 21748                           
 21749                           ; BSR set to: 1
 21750                           ;DisplayProtocol.h: 332: }else if(actualScreen == 7)
 21751  00163C  0012               	return	
 21752  00163E  D7E4               	goto	i1l8570
 21753  001640                     i1l8580:
 21754                           
 21755                           ; BSR set to: 1
 21756  001640  0E07               	movlw	7
 21757  001642  0101               	movlb	1	; () banked
 21758  001644  19B9               	xorwf	_actualScreen& (0+255),w,b
 21759  001646  A4D8               	btfss	status,2,c
 21760  001648  D004               	goto	i1l8584
 21761                           
 21762                           ; BSR set to: 1
 21763                           ;DisplayProtocol.h: 333: actualScreen = 1;
 21764  00164A  0E01               	movlw	1
 21765  00164C  0101               	movlb	1	; () banked
 21766  00164E  6FB9               	movwf	_actualScreen& (0+255),b
 21767  001650  0012               	return	
 21768  001652                     i1l8584:
 21769                           
 21770                           ; BSR set to: 1
 21771                           ;DisplayProtocol.h: 334: else if(actualScreen == 6) {
 21772  001652  0E06               	movlw	6
 21773  001654  0101               	movlb	1	; () banked
 21774  001656  19B9               	xorwf	_actualScreen& (0+255),w,b
 21775  001658  B4D8               	btfsc	status,2,c
 21776  00165A  0012               	return	
 21777                           
 21778                           ; BSR set to: 1
 21779                           
 21780                           ; BSR set to: 1
 21781                           
 21782                           ; BSR set to: 1
 21783                           ;DisplayProtocol.h: 336: }else if(actualScreen == 5) {
 21784  00165C  0E05               	movlw	5
 21785  00165E  0101               	movlb	1	; () banked
 21786  001660  19B9               	xorwf	_actualScreen& (0+255),w,b
 21787  001662  A4D8               	btfss	status,2,c
 21788  001664  D018               	goto	i1l8600
 21789                           
 21790                           ; BSR set to: 1
 21791                           ;DisplayProtocol.h: 337: if(menuSection != 2) {
 21792  001666  0E02               	movlw	2
 21793  001668  0101               	movlb	1	; () banked
 21794  00166A  19BD               	xorwf	_menuSection& (0+255),w,b
 21795  00166C  B4D8               	btfsc	status,2,c
 21796  00166E  D009               	goto	i1l8598
 21797                           
 21798                           ; BSR set to: 1
 21799                           ;DisplayProtocol.h: 338: chanValSection--;
 21800  001670  0101               	movlb	1	; () banked
 21801  001672  079B               	decf	_chanValSection& (0+255),f,b
 21802                           
 21803                           ; BSR set to: 1
 21804                           ;DisplayProtocol.h: 339: if(chanValSection < 0)
 21805  001674  0101               	movlb	1	; () banked
 21806  001676  AF9B               	btfss	_chanValSection& (0+255),7,b
 21807  001678  0012               	return	
 21808                           
 21809                           ; BSR set to: 1
 21810                           ;DisplayProtocol.h: 340: chanValSection = 5;
 21811  00167A  0E05               	movlw	5
 21812  00167C  0101               	movlb	1	; () banked
 21813  00167E  6F9B               	movwf	_chanValSection& (0+255),b
 21814                           
 21815                           ; BSR set to: 1
 21816                           ;DisplayProtocol.h: 341: }else
 21817  001680  0012               	return	
 21818  001682                     i1l8598:
 21819                           
 21820                           ; BSR set to: 1
 21821                           ;DisplayProtocol.h: 342: confirmEdition(!processStarted);
 21822  001682  0100               	movlb	0	; () banked
 21823  001684  51C4               	movf	_processStarted& (0+255),w,b
 21824  001686  A4D8               	btfss	status,2,c
 21825  001688  D002               	goto	i1u1220_20
 21826  00168A  0E01               	movlw	1
 21827  00168C  D001               	goto	i1u1221_20
 21828  00168E                     i1u1220_20:
 21829  00168E  0E00               	movlw	0
 21830  001690                     i1u1221_20:
 21831  001690  EC43  F02D         	call	i1_confirmEdition
 21832                           
 21833                           ;DisplayProtocol.h: 343: }else if(actualScreen == 2) {
 21834  001694  0012               	return	
 21835  001696                     i1l8600:
 21836  001696  0E02               	movlw	2
 21837  001698  0101               	movlb	1	; () banked
 21838  00169A  19B9               	xorwf	_actualScreen& (0+255),w,b
 21839  00169C  A4D8               	btfss	status,2,c
 21840  00169E  D018               	goto	i1l8610
 21841                           
 21842                           ; BSR set to: 1
 21843                           ;DisplayProtocol.h: 344: initProtocoll(!selSN);
 21844  0016A0  0101               	movlb	1	; () banked
 21845  0016A2  51BF               	movf	_selSN& (0+255),w,b
 21846  0016A4  A4D8               	btfss	status,2,c
 21847  0016A6  D002               	goto	i1u1223_20
 21848  0016A8  0E01               	movlw	1
 21849  0016AA  D001               	goto	i1u1224_20
 21850  0016AC                     i1u1223_20:
 21851  0016AC  0E00               	movlw	0
 21852  0016AE                     i1u1224_20:
 21853  0016AE  ECC9  F036         	call	i1_initProtocoll
 21854                           
 21855                           ;DisplayProtocol.h: 345: if(!selSN) {
 21856  0016B2  0101               	movlb	1	; () banked
 21857  0016B4  51BF               	movf	_selSN& (0+255),w,b
 21858  0016B6  A4D8               	btfss	status,2,c
 21859  0016B8  D008               	goto	i1l730
 21860                           
 21861                           ; BSR set to: 1
 21862                           ;DisplayProtocol.h: 346: actualScreen = 14;
 21863  0016BA  0E0E               	movlw	14
 21864  0016BC  0101               	movlb	1	; () banked
 21865  0016BE  6FB9               	movwf	_actualScreen& (0+255),b
 21866                           
 21867                           ; BSR set to: 1
 21868                           ;DisplayProtocol.h: 347: LATCbits.LATC4 = 1;
 21869  0016C0  888B               	bsf	3979,4,c	;volatile
 21870                           
 21871                           ;DisplayProtocol.h: 348: ready2Cut = 1;
 21872  0016C2  0E01               	movlw	1
 21873  0016C4  0100               	movlb	0	; () banked
 21874  0016C6  6FC5               	movwf	_ready2Cut& (0+255),b
 21875                           
 21876                           ;DisplayProtocol.h: 350: }else
 21877  0016C8  0012               	return	
 21878  0016CA                     i1l730:
 21879                           
 21880                           ; BSR set to: 1
 21881                           ;DisplayProtocol.h: 351: actualScreen = tempLastScreen;
 21882  0016CA  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 21883                           
 21884                           ; BSR set to: 1
 21885                           ;DisplayProtocol.h: 352: }else if(actualScreen == 14) {
 21886  0016CE  0012               	return	
 21887  0016D0                     i1l8610:
 21888                           
 21889                           ; BSR set to: 1
 21890  0016D0  0E0E               	movlw	14
 21891  0016D2  0101               	movlb	1	; () banked
 21892  0016D4  19B9               	xorwf	_actualScreen& (0+255),w,b
 21893  0016D6  A4D8               	btfss	status,2,c
 21894  0016D8  D00A               	goto	i1l8616
 21895                           
 21896                           ; BSR set to: 1
 21897                           ;DisplayProtocol.h: 354: setPWM2duty(400);
 21898  0016DA  0E01               	movlw	1
 21899  0016DC  0100               	movlb	0	; () banked
 21900  0016DE  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 21901  0016E0  0E90               	movlw	144
 21902  0016E2  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 21903  0016E4  ECCF  F02F         	call	i1_setPWM2duty	;wreg free
 21904                           
 21905                           ;DisplayProtocol.h: 355: actualScreen = tempLastScreen;
 21906  0016E8  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 21907                           
 21908                           ;DisplayProtocol.h: 356: }else if(actualScreen == 3) {
 21909  0016EC  0012               	return	
 21910  0016EE                     i1l8616:
 21911  0016EE  0E03               	movlw	3
 21912  0016F0  0101               	movlb	1	; () banked
 21913  0016F2  19B9               	xorwf	_actualScreen& (0+255),w,b
 21914  0016F4  A4D8               	btfss	status,2,c
 21915  0016F6  D046               	goto	i1l8638
 21916                           
 21917                           ; BSR set to: 1
 21918                           ;DisplayProtocol.h: 357: actualScreen = tempLastScreen;
 21919  0016F8  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 21920                           
 21921                           ; BSR set to: 1
 21922                           ;DisplayProtocol.h: 358: if(!selSN) {
 21923  0016FC  0101               	movlb	1	; () banked
 21924  0016FE  51BF               	movf	_selSN& (0+255),w,b
 21925  001700  A4D8               	btfss	status,2,c
 21926  001702  0012               	return	
 21927                           
 21928                           ; BSR set to: 1
 21929                           ;DisplayProtocol.h: 359: processStarted = 0;
 21930  001704  0E00               	movlw	0
 21931  001706  0100               	movlb	0	; () banked
 21932  001708  6FC4               	movwf	_processStarted& (0+255),b
 21933                           
 21934                           ;DisplayProtocol.h: 360: processState = 0;
 21935  00170A  0E00               	movlw	0
 21936  00170C  0100               	movlb	0	; () banked
 21937  00170E  6FB5               	movwf	(_processState+1)& (0+255),b
 21938  001710  0E00               	movlw	0
 21939  001712  6FB4               	movwf	_processState& (0+255),b
 21940                           
 21941                           ; BSR set to: 0
 21942                           ;DisplayProtocol.h: 361: LATCbits.LATC4 = 0;
 21943  001714  988B               	bcf	3979,4,c	;volatile
 21944                           
 21945                           ; BSR set to: 0
 21946                           ;DisplayProtocol.h: 362: if(tempLastScreen == 14)
 21947  001716  0E0E               	movlw	14
 21948  001718  0100               	movlb	0	; () banked
 21949  00171A  19C8               	xorwf	_tempLastScreen& (0+255),w,b
 21950  00171C  A4D8               	btfss	status,2,c
 21951  00171E  D003               	goto	i1l737
 21952                           
 21953                           ; BSR set to: 0
 21954                           ;DisplayProtocol.h: 363: actualScreen = 0;
 21955  001720  0E00               	movlw	0
 21956  001722  0101               	movlb	1	; () banked
 21957  001724  6FB9               	movwf	_actualScreen& (0+255),b
 21958  001726                     i1l737:
 21959                           
 21960                           ;DisplayProtocol.h: 364: if(calibMode) {
 21961  001726  0100               	movlb	0	; () banked
 21962  001728  51BB               	movf	_calibMode& (0+255),w,b
 21963  00172A  B4D8               	btfsc	status,2,c
 21964  00172C  D027               	goto	i1l738
 21965                           
 21966                           ; BSR set to: 0
 21967                           ;DisplayProtocol.h: 365: numCortes = tempNumCortes;
 21968  00172E  C0D2  F0D0         	movff	_tempNumCortes,_numCortes
 21969  001732  C0D3  F0D1         	movff	_tempNumCortes+1,_numCortes+1
 21970                           
 21971                           ;DisplayProtocol.h: 366: tiXcorte = temptiXcorte;
 21972  001736  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 21973  00173A  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 21974  00173E  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 21975                           
 21976                           ; BSR set to: 0
 21977                           ;DisplayProtocol.h: 367: timsXcorte = (float)tiXcorte * 1000;
 21978  001742  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 21979  001746  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 21980  00174A  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 21981  00174E  0E00               	movlw	0
 21982  001750  0100               	movlb	0	; () banked
 21983  001752  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 21984  001754  0E7A               	movlw	122
 21985  001756  0100               	movlb	0	; () banked
 21986  001758  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 21987  00175A  0E44               	movlw	68
 21988  00175C  0100               	movlb	0	; () banked
 21989  00175E  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 21990  001760  ECCE  F01D         	call	i1___ftmul	;wreg free
 21991  001764  C068  F059         	movff	?i1___ftmul,_timsXcorte
 21992  001768  C069  F05A         	movff	?i1___ftmul+1,_timsXcorte+1
 21993  00176C  C06A  F05B         	movff	?i1___ftmul+2,_timsXcorte+2
 21994                           
 21995                           ;DisplayProtocol.h: 368: calibMode = 0;
 21996  001770  0E00               	movlw	0
 21997  001772  0100               	movlb	0	; () banked
 21998  001774  6FBB               	movwf	_calibMode& (0+255),b
 21999                           
 22000                           ; BSR set to: 0
 22001                           ;DisplayProtocol.h: 369: actualScreen = 4;
 22002  001776  0E04               	movlw	4
 22003  001778  0101               	movlb	1	; () banked
 22004  00177A  6FB9               	movwf	_actualScreen& (0+255),b
 22005  00177C                     i1l738:
 22006                           
 22007                           ;DisplayProtocol.h: 370: }
 22008                           ;DisplayProtocol.h: 371: initProtocoll(1);
 22009  00177C  0E01               	movlw	1
 22010  00177E  ECC9  F036         	call	i1_initProtocoll
 22011                           
 22012                           ;DisplayProtocol.h: 372: }
 22013                           ;DisplayProtocol.h: 373: }else if(actualScreen == 10) {
 22014  001782  0012               	return	
 22015  001784                     i1l8638:
 22016  001784  0E0A               	movlw	10
 22017  001786  0101               	movlb	1	; () banked
 22018  001788  19B9               	xorwf	_actualScreen& (0+255),w,b
 22019  00178A  A4D8               	btfss	status,2,c
 22020  00178C  D00B               	goto	i1l8644
 22021                           
 22022                           ; BSR set to: 1
 22023                           ;DisplayProtocol.h: 374: if(!selSN)
 22024  00178E  0101               	movlb	1	; () banked
 22025  001790  51BF               	movf	_selSN& (0+255),w,b
 22026  001792  A4D8               	btfss	status,2,c
 22027  001794  D004               	goto	i1l741
 22028                           
 22029                           ; BSR set to: 1
 22030                           ;DisplayProtocol.h: 375: confirmEdition(1);
 22031  001796  0E01               	movlw	1
 22032  001798  EC43  F02D         	call	i1_confirmEdition
 22033  00179C  0012               	return	
 22034  00179E                     i1l741:
 22035                           
 22036                           ; BSR set to: 1
 22037                           ;DisplayProtocol.h: 376: else
 22038                           ;DisplayProtocol.h: 377: actualScreen = tempLastScreen;
 22039  00179E  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 22040                           
 22041                           ; BSR set to: 1
 22042                           ;DisplayProtocol.h: 378: }else if(actualScreen == 8)
 22043  0017A2  0012               	return	
 22044  0017A4                     i1l8644:
 22045                           
 22046                           ; BSR set to: 1
 22047  0017A4  0E08               	movlw	8
 22048  0017A6  0101               	movlb	1	; () banked
 22049  0017A8  19B9               	xorwf	_actualScreen& (0+255),w,b
 22050  0017AA  A4D8               	btfss	status,2,c
 22051  0017AC  D004               	goto	i1l8648
 22052                           
 22053                           ; BSR set to: 1
 22054                           ;DisplayProtocol.h: 379: actualScreen = 4;
 22055  0017AE  0E04               	movlw	4
 22056  0017B0  0101               	movlb	1	; () banked
 22057  0017B2  6FB9               	movwf	_actualScreen& (0+255),b
 22058  0017B4  0012               	return	
 22059  0017B6                     i1l8648:
 22060                           
 22061                           ; BSR set to: 1
 22062                           ;DisplayProtocol.h: 380: else if(actualScreen == 9)
 22063  0017B6  0E09               	movlw	9
 22064  0017B8  0101               	movlb	1	; () banked
 22065  0017BA  19B9               	xorwf	_actualScreen& (0+255),w,b
 22066  0017BC  A4D8               	btfss	status,2,c
 22067  0017BE  D004               	goto	i1l8652
 22068                           
 22069                           ; BSR set to: 1
 22070                           ;DisplayProtocol.h: 381: actualScreen = 0;
 22071  0017C0  0E00               	movlw	0
 22072  0017C2  0101               	movlb	1	; () banked
 22073  0017C4  6FB9               	movwf	_actualScreen& (0+255),b
 22074  0017C6  0012               	return	
 22075  0017C8                     i1l8652:
 22076                           
 22077                           ; BSR set to: 1
 22078                           ;DisplayProtocol.h: 382: else if(actualScreen == 11) {
 22079  0017C8  0E0B               	movlw	11
 22080  0017CA  0101               	movlb	1	; () banked
 22081  0017CC  19B9               	xorwf	_actualScreen& (0+255),w,b
 22082  0017CE  A4D8               	btfss	status,2,c
 22083  0017D0  D05D               	goto	i1l8692
 22084                           
 22085                           ; BSR set to: 1
 22086                           ;DisplayProtocol.h: 383: initProtocoll(!selSN);
 22087  0017D2  0101               	movlb	1	; () banked
 22088  0017D4  51BF               	movf	_selSN& (0+255),w,b
 22089  0017D6  A4D8               	btfss	status,2,c
 22090  0017D8  D002               	goto	i1u1236_20
 22091  0017DA  0E01               	movlw	1
 22092  0017DC  D001               	goto	i1u1237_20
 22093  0017DE                     i1u1236_20:
 22094  0017DE  0E00               	movlw	0
 22095  0017E0                     i1u1237_20:
 22096  0017E0  ECC9  F036         	call	i1_initProtocoll
 22097                           
 22098                           ;DisplayProtocol.h: 384: if(!selSN) {
 22099  0017E4  0101               	movlb	1	; () banked
 22100  0017E6  51BF               	movf	_selSN& (0+255),w,b
 22101  0017E8  A4D8               	btfss	status,2,c
 22102  0017EA  D04C               	goto	i1l8690
 22103                           
 22104                           ; BSR set to: 1
 22105                           ;DisplayProtocol.h: 385: actualScreen = 6;
 22106  0017EC  0E06               	movlw	6
 22107  0017EE  0101               	movlb	1	; () banked
 22108  0017F0  6FB9               	movwf	_actualScreen& (0+255),b
 22109                           
 22110                           ; BSR set to: 1
 22111                           ;DisplayProtocol.h: 386: tempLastScreen = actualScreen;
 22112  0017F2  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 22113                           
 22114                           ;DisplayProtocol.h: 387: chanValf = 0;
 22115  0017F6  0E00               	movlw	0
 22116  0017F8  0101               	movlb	1	; () banked
 22117  0017FA  6FB1               	movwf	_chanValf& (0+255),b
 22118  0017FC  0E00               	movlw	0
 22119  0017FE  0101               	movlb	1	; () banked
 22120  001800  6FB2               	movwf	(_chanValf+1)& (0+255),b
 22121  001802  0E00               	movlw	0
 22122  001804  0101               	movlb	1	; () banked
 22123  001806  6FB3               	movwf	(_chanValf+2)& (0+255),b
 22124                           
 22125                           ; BSR set to: 1
 22126                           ;DisplayProtocol.h: 388: desintegrator();
 22127  001808  ECB9  F01A         	call	i1_desintegrator	;wreg free
 22128                           
 22129                           ;DisplayProtocol.h: 389: temptiXcorte = tiXcorte;
 22130  00180C  C195  F0CD         	movff	_tiXcorte,_temptiXcorte
 22131  001810  C196  F0CE         	movff	_tiXcorte+1,_temptiXcorte+1
 22132  001814  C197  F0CF         	movff	_tiXcorte+2,_temptiXcorte+2
 22133                           
 22134                           ;DisplayProtocol.h: 390: tiXcorte = 5.0f;
 22135  001818  0E00               	movlw	0
 22136  00181A  0101               	movlb	1	; () banked
 22137  00181C  6F95               	movwf	_tiXcorte& (0+255),b
 22138  00181E  0EA0               	movlw	160
 22139  001820  0101               	movlb	1	; () banked
 22140  001822  6F96               	movwf	(_tiXcorte+1)& (0+255),b
 22141  001824  0E40               	movlw	64
 22142  001826  0101               	movlb	1	; () banked
 22143  001828  6F97               	movwf	(_tiXcorte+2)& (0+255),b
 22144                           
 22145                           ; BSR set to: 1
 22146                           ;DisplayProtocol.h: 391: timsXcorte = 5000.0f;
 22147  00182A  0E40               	movlw	64
 22148  00182C  6E59               	movwf	_timsXcorte,c
 22149  00182E  0E9C               	movlw	156
 22150  001830  6E5A               	movwf	_timsXcorte+1,c
 22151  001832  0E45               	movlw	69
 22152  001834  6E5B               	movwf	_timsXcorte+2,c
 22153                           
 22154                           ; BSR set to: 1
 22155                           ;DisplayProtocol.h: 392: tempNumCortes = numCortes;
 22156  001836  C0D0  F0D2         	movff	_numCortes,_tempNumCortes
 22157  00183A  C0D1  F0D3         	movff	_numCortes+1,_tempNumCortes+1
 22158                           
 22159                           ; BSR set to: 1
 22160                           ;DisplayProtocol.h: 393: numCortes = 1;
 22161  00183E  0E00               	movlw	0
 22162  001840  0100               	movlb	0	; () banked
 22163  001842  6FD1               	movwf	(_numCortes+1)& (0+255),b
 22164  001844  0E01               	movlw	1
 22165  001846  6FD0               	movwf	_numCortes& (0+255),b
 22166                           
 22167                           ; BSR set to: 0
 22168                           ;DisplayProtocol.h: 394: processState = 0;
 22169  001848  0E00               	movlw	0
 22170  00184A  0100               	movlb	0	; () banked
 22171  00184C  6FB5               	movwf	(_processState+1)& (0+255),b
 22172  00184E  0E00               	movlw	0
 22173  001850  6FB4               	movwf	_processState& (0+255),b
 22174                           
 22175                           ; BSR set to: 0
 22176                           ;DisplayProtocol.h: 395: processTimer = 0;
 22177  001852  0E00               	movlw	0
 22178  001854  6E37               	movwf	_processTimer,c
 22179  001856  0E00               	movlw	0
 22180  001858  6E38               	movwf	_processTimer+1,c
 22181  00185A  0E00               	movlw	0
 22182  00185C  6E39               	movwf	_processTimer+2,c
 22183  00185E  0E00               	movlw	0
 22184  001860  6E3A               	movwf	_processTimer+3,c
 22185                           
 22186                           ; BSR set to: 0
 22187                           ;DisplayProtocol.h: 396: calibLevel = 0;
 22188  001862  0E00               	movlw	0
 22189  001864  0101               	movlb	1	; () banked
 22190  001866  6FBA               	movwf	_calibLevel& (0+255),b
 22191                           
 22192                           ; BSR set to: 1
 22193                           ;DisplayProtocol.h: 397: initProtocoll(1);
 22194  001868  0E01               	movlw	1
 22195  00186A  ECC9  F036         	call	i1_initProtocoll
 22196                           
 22197                           ;DisplayProtocol.h: 398: LATCbits.LATC4 = 1;
 22198  00186E  888B               	bsf	3979,4,c	;volatile
 22199                           
 22200                           ;DisplayProtocol.h: 399: ready2Cut = 1;
 22201  001870  0E01               	movlw	1
 22202  001872  0100               	movlb	0	; () banked
 22203  001874  6FC5               	movwf	_ready2Cut& (0+255),b
 22204                           
 22205                           ; BSR set to: 0
 22206                           ;DisplayProtocol.h: 400: actualScreen = 14;
 22207  001876  0E0E               	movlw	14
 22208  001878  0101               	movlb	1	; () banked
 22209  00187A  6FB9               	movwf	_actualScreen& (0+255),b
 22210                           
 22211                           ; BSR set to: 1
 22212                           ;DisplayProtocol.h: 401: calibMode = 1;
 22213  00187C  0E01               	movlw	1
 22214  00187E  0100               	movlb	0	; () banked
 22215  001880  6FBB               	movwf	_calibMode& (0+255),b
 22216                           
 22217                           ;DisplayProtocol.h: 402: }else
 22218  001882  0012               	return	
 22219  001884                     i1l8690:
 22220                           
 22221                           ;DisplayProtocol.h: 403: actualScreen = 4;
 22222  001884  0E04               	movlw	4
 22223  001886  0101               	movlb	1	; () banked
 22224  001888  6FB9               	movwf	_actualScreen& (0+255),b
 22225                           
 22226                           ; BSR set to: 1
 22227                           ;DisplayProtocol.h: 404: }else if(actualScreen == 12) {
 22228  00188A  0012               	return	
 22229  00188C                     i1l8692:
 22230                           
 22231                           ; BSR set to: 1
 22232  00188C  0E0C               	movlw	12
 22233  00188E  0101               	movlb	1	; () banked
 22234  001890  19B9               	xorwf	_actualScreen& (0+255),w,b
 22235  001892  A4D8               	btfss	status,2,c
 22236  001894  D009               	goto	i1l8700
 22237                           
 22238                           ; BSR set to: 1
 22239                           ;DisplayProtocol.h: 405: chanValSection--;
 22240  001896  0101               	movlb	1	; () banked
 22241  001898  079B               	decf	_chanValSection& (0+255),f,b
 22242                           
 22243                           ; BSR set to: 1
 22244                           ;DisplayProtocol.h: 406: if(chanValSection < 0)
 22245  00189A  0101               	movlb	1	; () banked
 22246  00189C  AF9B               	btfss	_chanValSection& (0+255),7,b
 22247  00189E  0012               	return	
 22248                           
 22249                           ; BSR set to: 1
 22250                           ;DisplayProtocol.h: 407: chanValSection = 5;
 22251  0018A0  0E05               	movlw	5
 22252  0018A2  0101               	movlb	1	; () banked
 22253  0018A4  6F9B               	movwf	_chanValSection& (0+255),b
 22254                           
 22255                           ; BSR set to: 1
 22256                           ;DisplayProtocol.h: 408: }else if(actualScreen == 15) {
 22257  0018A6  0012               	return	
 22258  0018A8                     i1l8700:
 22259                           
 22260                           ; BSR set to: 1
 22261  0018A8  0E0F               	movlw	15
 22262  0018AA  0101               	movlb	1	; () banked
 22263  0018AC  19B9               	xorwf	_actualScreen& (0+255),w,b
 22264  0018AE  A4D8               	btfss	status,2,c
 22265  0018B0  D03B               	goto	i1l8720
 22266                           
 22267                           ; BSR set to: 1
 22268                           ;DisplayProtocol.h: 409: if(!selSN) {
 22269  0018B2  0101               	movlb	1	; () banked
 22270  0018B4  51BF               	movf	_selSN& (0+255),w,b
 22271  0018B6  A4D8               	btfss	status,2,c
 22272  0018B8  D031               	goto	i1l756
 22273                           
 22274                           ; BSR set to: 1
 22275                           ;DisplayProtocol.h: 410: processStarted = 0;
 22276  0018BA  0E00               	movlw	0
 22277  0018BC  0100               	movlb	0	; () banked
 22278  0018BE  6FC4               	movwf	_processStarted& (0+255),b
 22279                           
 22280                           ;DisplayProtocol.h: 411: processState = 0;
 22281  0018C0  0E00               	movlw	0
 22282  0018C2  0100               	movlb	0	; () banked
 22283  0018C4  6FB5               	movwf	(_processState+1)& (0+255),b
 22284  0018C6  0E00               	movlw	0
 22285  0018C8  6FB4               	movwf	_processState& (0+255),b
 22286                           
 22287                           ; BSR set to: 0
 22288                           ;DisplayProtocol.h: 412: LATCbits.LATC4 = 0;
 22289  0018CA  988B               	bcf	3979,4,c	;volatile
 22290                           
 22291                           ; BSR set to: 0
 22292                           ;DisplayProtocol.h: 413: numCortes = tempNumCortes;
 22293  0018CC  C0D2  F0D0         	movff	_tempNumCortes,_numCortes
 22294  0018D0  C0D3  F0D1         	movff	_tempNumCortes+1,_numCortes+1
 22295                           
 22296                           ; BSR set to: 0
 22297                           ;DisplayProtocol.h: 414: tiXcorte = temptiXcorte;
 22298  0018D4  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 22299  0018D8  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 22300  0018DC  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 22301                           
 22302                           ; BSR set to: 0
 22303                           ;DisplayProtocol.h: 415: timsXcorte = (float)tiXcorte * 1000;
 22304  0018E0  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 22305  0018E4  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 22306  0018E8  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 22307  0018EC  0E00               	movlw	0
 22308  0018EE  0100               	movlb	0	; () banked
 22309  0018F0  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 22310  0018F2  0E7A               	movlw	122
 22311  0018F4  0100               	movlb	0	; () banked
 22312  0018F6  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 22313  0018F8  0E44               	movlw	68
 22314  0018FA  0100               	movlb	0	; () banked
 22315  0018FC  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 22316  0018FE  ECCE  F01D         	call	i1___ftmul	;wreg free
 22317  001902  C068  F059         	movff	?i1___ftmul,_timsXcorte
 22318  001906  C069  F05A         	movff	?i1___ftmul+1,_timsXcorte+1
 22319  00190A  C06A  F05B         	movff	?i1___ftmul+2,_timsXcorte+2
 22320                           
 22321                           ;DisplayProtocol.h: 416: calibMode = 0;
 22322  00190E  0E00               	movlw	0
 22323  001910  0100               	movlb	0	; () banked
 22324  001912  6FBB               	movwf	_calibMode& (0+255),b
 22325                           
 22326                           ; BSR set to: 0
 22327                           ;DisplayProtocol.h: 417: actualScreen = 4;
 22328  001914  0E04               	movlw	4
 22329  001916  0101               	movlb	1	; () banked
 22330  001918  6FB9               	movwf	_actualScreen& (0+255),b
 22331                           
 22332                           ;DisplayProtocol.h: 418: }else {
 22333  00191A  0012               	return	
 22334  00191C                     i1l756:
 22335                           
 22336                           ; BSR set to: 1
 22337                           ;DisplayProtocol.h: 419: actualScreen = tempLastScreen;
 22338  00191C  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 22339                           
 22340                           ; BSR set to: 1
 22341                           ;DisplayProtocol.h: 420: tempLastScreen = 6;
 22342  001920  0E06               	movlw	6
 22343  001922  0100               	movlb	0	; () banked
 22344  001924  6FC8               	movwf	_tempLastScreen& (0+255),b
 22345                           
 22346                           ; BSR set to: 0
 22347                           ;DisplayProtocol.h: 421: }
 22348                           ;DisplayProtocol.h: 422: }else if(actualScreen == 13) {
 22349  001926  0012               	return	
 22350  001928                     i1l8720:
 22351  001928  0E0D               	movlw	13
 22352  00192A  0101               	movlb	1	; () banked
 22353  00192C  19B9               	xorwf	_actualScreen& (0+255),w,b
 22354  00192E  A4D8               	btfss	status,2,c
 22355  001930  0012               	return	
 22356                           
 22357                           ; BSR set to: 1
 22358                           ;DisplayProtocol.h: 423: initProtocoll(1);
 22359  001932  0E01               	movlw	1
 22360  001934  ECC9  F036         	call	i1_initProtocoll
 22361                           
 22362                           ;DisplayProtocol.h: 424: actualScreen = tempLastScreen;
 22363  001938  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 22364  00193C  0012               	return	
 22365  00193E                     __end_ofi1_pressENTER:
 22366                           	opt stack 0
 22367                           pclatu	equ	0xFFB
 22368                           pclath	equ	0xFFA
 22369                           tblptru	equ	0xFF8
 22370                           tblptrh	equ	0xFF7
 22371                           tblptrl	equ	0xFF6
 22372                           tablat	equ	0xFF5
 22373                           prodh	equ	0xFF4
 22374                           prodl	equ	0xFF3
 22375                           intcon	equ	0xFF2
 22376                           postinc0	equ	0xFEE
 22377                           fsr0h	equ	0xFEA
 22378                           fsr0l	equ	0xFE9
 22379                           wreg	equ	0xFE8
 22380                           postdec1	equ	0xFE5
 22381                           fsr1h	equ	0xFE2
 22382                           fsr1l	equ	0xFE1
 22383                           bsr	equ	0xFE0
 22384                           indf2	equ	0xFDF
 22385                           postinc2	equ	0xFDE
 22386                           postdec2	equ	0xFDD
 22387                           plusw2	equ	0xFDB
 22388                           fsr2h	equ	0xFDA
 22389                           fsr2l	equ	0xFD9
 22390                           status	equ	0xFD8
 22391                           
 22392 ;; *************** function i1_checkPass *****************
 22393 ;; Defined at:
 22394 ;;		line 14 in file "source/DisplayProtocol.h"
 22395 ;; Parameters:    Size  Location     Type
 22396 ;;		None
 22397 ;; Auto vars:     Size  Location     Type
 22398 ;;  checkPass       2    5[BANK0 ] int 
 22399 ;;  checkPass       1    4[BANK0 ] unsigned char 
 22400 ;; Return value:  Size  Location     Type
 22401 ;;                  1    wreg      unsigned char 
 22402 ;; Registers used:
 22403 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22404 ;; Tracked objects:
 22405 ;;		On entry : 0/0
 22406 ;;		On exit  : 0/0
 22407 ;;		Unchanged: 0/0
 22408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22409 ;;      Params:         0       0       0       0       0       0       0
 22410 ;;      Locals:         0       3       0       0       0       0       0
 22411 ;;      Temps:          0       4       0       0       0       0       0
 22412 ;;      Totals:         0       7       0       0       0       0       0
 22413 ;;Total ram usage:        7 bytes
 22414 ;; Hardware stack levels used:    1
 22415 ;; Hardware stack levels required when called:    4
 22416 ;; This function calls:
 22417 ;;		Nothing
 22418 ;; This function is called by:
 22419 ;;		i1_pressENTER
 22420 ;; This function uses a non-reentrant model
 22421 ;;
 22422                           
 22423                           	psect	text93
 22424  006394                     __ptext93:
 22425                           	opt stack 0
 22426  006394                     i1_checkPass:
 22427                           	opt stack 13
 22428                           
 22429                           ;DisplayProtocol.h: 15: int i;
 22430                           ;DisplayProtocol.h: 16: char passOK = 0;
 22431                           
 22432                           ;incstack = 0
 22433  006394  0E00               	movlw	0
 22434  006396  0100               	movlb	0	; () banked
 22435  006398  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22436                           
 22437                           ;DisplayProtocol.h: 17: for (i = 0; i < 4; i++) {
 22438  00639A  0E00               	movlw	0
 22439  00639C  0100               	movlb	0	; () banked
 22440  00639E  6F66               	movwf	(i1checkPass@i+1)& (0+255),b
 22441  0063A0  0E00               	movlw	0
 22442  0063A2  6F65               	movwf	i1checkPass@i& (0+255),b
 22443  0063A4                     i1l7352:
 22444                           
 22445                           ; BSR set to: 0
 22446  0063A4  0100               	movlb	0	; () banked
 22447  0063A6  BF66               	btfsc	(i1checkPass@i+1)& (0+255),7,b
 22448  0063A8  D008               	goto	i1l7356
 22449  0063AA  0100               	movlb	0	; () banked
 22450  0063AC  5166               	movf	(i1checkPass@i+1)& (0+255),w,b
 22451  0063AE  E136               	bnz	i1l7366
 22452  0063B0  0E04               	movlw	4
 22453  0063B2  0100               	movlb	0	; () banked
 22454  0063B4  5D65               	subwf	i1checkPass@i& (0+255),w,b
 22455  0063B6  B0D8               	btfsc	status,0,c
 22456  0063B8  D031               	goto	i1l7366
 22457  0063BA                     i1l7356:
 22458                           
 22459                           ; BSR set to: 0
 22460                           ;DisplayProtocol.h: 18: if (introducido[i] == contra[i])
 22461  0063BA  0EAB               	movlw	low _contra
 22462  0063BC  0100               	movlb	0	; () banked
 22463  0063BE  2565               	addwf	i1checkPass@i& (0+255),w,b
 22464  0063C0  6ED9               	movwf	fsr2l,c
 22465  0063C2  0E00               	movlw	high _contra
 22466  0063C4  0100               	movlb	0	; () banked
 22467  0063C6  2166               	addwfc	(i1checkPass@i+1)& (0+255),w,b
 22468  0063C8  6EDA               	movwf	fsr2h,c
 22469  0063CA  50DF               	movf	indf2,w,c
 22470  0063CC  0100               	movlb	0	; () banked
 22471  0063CE  6F60               	movwf	??i1_checkPass& (0+255),b
 22472  0063D0  6B61               	clrf	(??i1_checkPass+1)& (0+255),b
 22473  0063D2  0EA9               	movlw	low _introducido
 22474  0063D4  0100               	movlb	0	; () banked
 22475  0063D6  2565               	addwf	i1checkPass@i& (0+255),w,b
 22476  0063D8  6ED9               	movwf	fsr2l,c
 22477  0063DA  0E01               	movlw	high _introducido
 22478  0063DC  0100               	movlb	0	; () banked
 22479  0063DE  2166               	addwfc	(i1checkPass@i+1)& (0+255),w,b
 22480  0063E0  6EDA               	movwf	fsr2h,c
 22481  0063E2  50DF               	movf	indf2,w,c
 22482  0063E4  0100               	movlb	0	; () banked
 22483  0063E6  6F62               	movwf	(??i1_checkPass+2)& (0+255),b
 22484  0063E8  6B63               	clrf	(??i1_checkPass+3)& (0+255),b
 22485  0063EA  BF62               	btfsc	(??i1_checkPass+2)& (0+255),7,b
 22486  0063EC  0763               	decf	(??i1_checkPass+3)& (0+255),f,b
 22487  0063EE  0100               	movlb	0	; () banked
 22488  0063F0  5160               	movf	??i1_checkPass& (0+255),w,b
 22489  0063F2  0100               	movlb	0	; () banked
 22490  0063F4  1962               	xorwf	(??i1_checkPass+2)& (0+255),w,b
 22491  0063F6  E10A               	bnz	i1l7360
 22492  0063F8  0100               	movlb	0	; () banked
 22493  0063FA  5161               	movf	(??i1_checkPass+1)& (0+255),w,b
 22494  0063FC  0100               	movlb	0	; () banked
 22495  0063FE  1963               	xorwf	(??i1_checkPass+3)& (0+255),w,b
 22496  006400  A4D8               	btfss	status,2,c
 22497  006402  D004               	goto	i1l7360
 22498                           
 22499                           ; BSR set to: 0
 22500                           ;DisplayProtocol.h: 19: passOK = 1;
 22501  006404  0E01               	movlw	1
 22502  006406  0100               	movlb	0	; () banked
 22503  006408  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22504  00640A  D004               	goto	i1l7362
 22505  00640C                     i1l7360:
 22506                           
 22507                           ; BSR set to: 0
 22508                           ;DisplayProtocol.h: 20: else {
 22509                           ;DisplayProtocol.h: 21: passOK = 0;
 22510  00640C  0E00               	movlw	0
 22511  00640E  0100               	movlb	0	; () banked
 22512  006410  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22513                           
 22514                           ;DisplayProtocol.h: 22: break;
 22515  006412  D004               	goto	i1l7366
 22516  006414                     i1l7362:
 22517                           
 22518                           ; BSR set to: 0
 22519  006414  0100               	movlb	0	; () banked
 22520  006416  4B65               	infsnz	i1checkPass@i& (0+255),f,b
 22521  006418  2B66               	incf	(i1checkPass@i+1)& (0+255),f,b
 22522  00641A  D7C4               	goto	i1l7352
 22523  00641C                     i1l7366:
 22524                           
 22525                           ; BSR set to: 0
 22526                           ;DisplayProtocol.h: 23: }
 22527                           ;DisplayProtocol.h: 24: }
 22528                           ;DisplayProtocol.h: 25: return passOK;
 22529  00641C  0100               	movlb	0	; () banked
 22530  00641E  5164               	movf	i1checkPass@passOK& (0+255),w,b
 22531  006420  0012               	return	
 22532  006422                     __end_ofi1_checkPass:
 22533                           	opt stack 0
 22534                           pclatu	equ	0xFFB
 22535                           pclath	equ	0xFFA
 22536                           tblptru	equ	0xFF8
 22537                           tblptrh	equ	0xFF7
 22538                           tblptrl	equ	0xFF6
 22539                           tablat	equ	0xFF5
 22540                           prodh	equ	0xFF4
 22541                           prodl	equ	0xFF3
 22542                           intcon	equ	0xFF2
 22543                           postinc0	equ	0xFEE
 22544                           fsr0h	equ	0xFEA
 22545                           fsr0l	equ	0xFE9
 22546                           wreg	equ	0xFE8
 22547                           postdec1	equ	0xFE5
 22548                           fsr1h	equ	0xFE2
 22549                           fsr1l	equ	0xFE1
 22550                           bsr	equ	0xFE0
 22551                           indf2	equ	0xFDF
 22552                           postinc2	equ	0xFDE
 22553                           postdec2	equ	0xFDD
 22554                           plusw2	equ	0xFDB
 22555                           fsr2h	equ	0xFDA
 22556                           fsr2l	equ	0xFD9
 22557                           status	equ	0xFD8
 22558                           
 22559 ;; *************** function i1_pressDOWN *****************
 22560 ;; Defined at:
 22561 ;;		line 181 in file "source/DisplayProtocol.h"
 22562 ;; Parameters:    Size  Location     Type
 22563 ;;		None
 22564 ;; Auto vars:     Size  Location     Type
 22565 ;;		None
 22566 ;; Return value:  Size  Location     Type
 22567 ;;                  1    wreg      void 
 22568 ;; Registers used:
 22569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22570 ;; Tracked objects:
 22571 ;;		On entry : 0/0
 22572 ;;		On exit  : 0/0
 22573 ;;		Unchanged: 0/0
 22574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22575 ;;      Params:         0       0       0       0       0       0       0
 22576 ;;      Locals:         0       0       0       0       0       0       0
 22577 ;;      Temps:          0       1       0       0       0       0       0
 22578 ;;      Totals:         0       1       0       0       0       0       0
 22579 ;;Total ram usage:        1 bytes
 22580 ;; Hardware stack levels used:    1
 22581 ;; Hardware stack levels required when called:    5
 22582 ;; This function calls:
 22583 ;;		i1_chanValDigDOWN
 22584 ;; This function is called by:
 22585 ;;		_UARTint
 22586 ;; This function uses a non-reentrant model
 22587 ;;
 22588                           
 22589                           	psect	text94
 22590  004DF2                     __ptext94:
 22591                           	opt stack 0
 22592  004DF2                     i1_pressDOWN:
 22593                           	opt stack 13
 22594                           
 22595                           ;DisplayProtocol.h: 182: if (actualScreen == 0 || actualScreen == 4) {
 22596                           
 22597                           ; BSR set to: 0
 22598                           ;incstack = 0
 22599  004DF2  0101               	movlb	1	; () banked
 22600  004DF4  51B9               	movf	_actualScreen& (0+255),w,b
 22601  004DF6  B4D8               	btfsc	status,2,c
 22602  004DF8  D005               	goto	i1l8406
 22603                           
 22604                           ; BSR set to: 1
 22605  004DFA  0E04               	movlw	4
 22606  004DFC  0101               	movlb	1	; () banked
 22607  004DFE  19B9               	xorwf	_actualScreen& (0+255),w,b
 22608  004E00  A4D8               	btfss	status,2,c
 22609  004E02  D009               	goto	i1l8412
 22610  004E04                     i1l8406:
 22611                           
 22612                           ; BSR set to: 1
 22613                           ;DisplayProtocol.h: 183: menuSection--;
 22614  004E04  0101               	movlb	1	; () banked
 22615  004E06  07BD               	decf	_menuSection& (0+255),f,b
 22616                           
 22617                           ; BSR set to: 1
 22618                           ;DisplayProtocol.h: 184: if (menuSection < 0)
 22619  004E08  0101               	movlb	1	; () banked
 22620  004E0A  AFBD               	btfss	_menuSection& (0+255),7,b
 22621  004E0C  0012               	return	
 22622                           
 22623                           ; BSR set to: 1
 22624                           ;DisplayProtocol.h: 185: menuSection = 3;
 22625  004E0E  0E03               	movlw	3
 22626  004E10  0101               	movlb	1	; () banked
 22627  004E12  6FBD               	movwf	_menuSection& (0+255),b
 22628                           
 22629                           ; BSR set to: 1
 22630                           ;DisplayProtocol.h: 186: } else if (actualScreen == 1) {
 22631  004E14  0012               	return	
 22632  004E16                     i1l8412:
 22633                           
 22634                           ; BSR set to: 1
 22635  004E16  0101               	movlb	1	; () banked
 22636  004E18  05B9               	decf	_actualScreen& (0+255),w,b
 22637  004E1A  A4D8               	btfss	status,2,c
 22638  004E1C  D022               	goto	i1l8418
 22639                           
 22640                           ; BSR set to: 1
 22641                           ;DisplayProtocol.h: 187: introducido[passSection]--;
 22642  004E1E  0101               	movlb	1	; () banked
 22643  004E20  51BE               	movf	_passSection& (0+255),w,b
 22644  004E22  0D01               	mullw	1
 22645  004E24  0EA9               	movlw	low _introducido
 22646  004E26  24F3               	addwf	prodl,w,c
 22647  004E28  6ED9               	movwf	fsr2l,c
 22648  004E2A  0E01               	movlw	high _introducido
 22649  004E2C  20F4               	addwfc	prodh,w,c
 22650  004E2E  6EDA               	movwf	fsr2h,c
 22651  004E30  06DF               	decf	indf2,f,c
 22652                           
 22653                           ;DisplayProtocol.h: 188: if (introducido[passSection] < 0)
 22654  004E32  0101               	movlb	1	; () banked
 22655  004E34  51BE               	movf	_passSection& (0+255),w,b
 22656  004E36  0D01               	mullw	1
 22657  004E38  0EA9               	movlw	low _introducido
 22658  004E3A  24F3               	addwf	prodl,w,c
 22659  004E3C  6ED9               	movwf	fsr2l,c
 22660  004E3E  0E01               	movlw	high _introducido
 22661  004E40  20F4               	addwfc	prodh,w,c
 22662  004E42  6EDA               	movwf	fsr2h,c
 22663  004E44  0E00               	movlw	0
 22664  004E46  AEDB               	btfss	plusw2,7,c
 22665  004E48  0012               	return	
 22666                           
 22667                           ; BSR set to: 1
 22668                           ;DisplayProtocol.h: 189: introducido[passSection] = 9;
 22669  004E4A  0101               	movlb	1	; () banked
 22670  004E4C  51BE               	movf	_passSection& (0+255),w,b
 22671  004E4E  0D01               	mullw	1
 22672  004E50  0EA9               	movlw	low _introducido
 22673  004E52  24F3               	addwf	prodl,w,c
 22674  004E54  6ED9               	movwf	fsr2l,c
 22675  004E56  0E01               	movlw	high _introducido
 22676  004E58  20F4               	addwfc	prodh,w,c
 22677  004E5A  6EDA               	movwf	fsr2h,c
 22678  004E5C  0E09               	movlw	9
 22679  004E5E  6EDF               	movwf	indf2,c
 22680                           
 22681                           ; BSR set to: 1
 22682                           ;DisplayProtocol.h: 190: } else if (actualScreen == 2 || actualScreen == 3
 22683  004E60  0012               	return	
 22684  004E62                     i1l8418:
 22685                           
 22686                           ; BSR set to: 1
 22687                           ;DisplayProtocol.h: 191: || actualScreen == 10 || actualScreen == 11
 22688                           ;DisplayProtocol.h: 192: || actualScreen == 15) {
 22689  004E62  0E02               	movlw	2
 22690  004E64  0101               	movlb	1	; () banked
 22691  004E66  19B9               	xorwf	_actualScreen& (0+255),w,b
 22692  004E68  B4D8               	btfsc	status,2,c
 22693  004E6A  D014               	goto	i1l8428
 22694                           
 22695                           ; BSR set to: 1
 22696  004E6C  0E03               	movlw	3
 22697  004E6E  0101               	movlb	1	; () banked
 22698  004E70  19B9               	xorwf	_actualScreen& (0+255),w,b
 22699  004E72  B4D8               	btfsc	status,2,c
 22700  004E74  D00F               	goto	i1l8428
 22701                           
 22702                           ; BSR set to: 1
 22703  004E76  0E0A               	movlw	10
 22704  004E78  0101               	movlb	1	; () banked
 22705  004E7A  19B9               	xorwf	_actualScreen& (0+255),w,b
 22706  004E7C  B4D8               	btfsc	status,2,c
 22707  004E7E  D00A               	goto	i1l8428
 22708                           
 22709                           ; BSR set to: 1
 22710  004E80  0E0B               	movlw	11
 22711  004E82  0101               	movlb	1	; () banked
 22712  004E84  19B9               	xorwf	_actualScreen& (0+255),w,b
 22713  004E86  B4D8               	btfsc	status,2,c
 22714  004E88  D005               	goto	i1l8428
 22715                           
 22716                           ; BSR set to: 1
 22717  004E8A  0E0F               	movlw	15
 22718  004E8C  0101               	movlb	1	; () banked
 22719  004E8E  19B9               	xorwf	_actualScreen& (0+255),w,b
 22720  004E90  A4D8               	btfss	status,2,c
 22721  004E92  D011               	goto	i1l8434
 22722  004E94                     i1l8428:
 22723                           
 22724                           ; BSR set to: 1
 22725                           ;DisplayProtocol.h: 193: selSN = !selSN;
 22726  004E94  0101               	movlb	1	; () banked
 22727  004E96  51BF               	movf	_selSN& (0+255),w,b
 22728  004E98  A4D8               	btfss	status,2,c
 22729  004E9A  D002               	goto	i1u1177_20
 22730  004E9C  0E01               	movlw	1
 22731  004E9E  D001               	goto	i1u1178_20
 22732  004EA0                     i1u1177_20:
 22733  004EA0  0E00               	movlw	0
 22734  004EA2                     i1u1178_20:
 22735  004EA2  0101               	movlb	1	; () banked
 22736  004EA4  6FBF               	movwf	_selSN& (0+255),b
 22737                           
 22738                           ; BSR set to: 1
 22739                           ;DisplayProtocol.h: 194: if(selSN > 1)
 22740  004EA6  0E01               	movlw	1
 22741  004EA8  0101               	movlb	1	; () banked
 22742  004EAA  65BF               	cpfsgt	_selSN& (0+255),b
 22743  004EAC  0012               	return	
 22744                           
 22745                           ; BSR set to: 1
 22746                           ;DisplayProtocol.h: 195: selSN = 0;
 22747  004EAE  0E00               	movlw	0
 22748  004EB0  0101               	movlb	1	; () banked
 22749  004EB2  6FBF               	movwf	_selSN& (0+255),b
 22750                           
 22751                           ; BSR set to: 1
 22752                           ;DisplayProtocol.h: 196: }else if(actualScreen == 5) {
 22753  004EB4  0012               	return	
 22754  004EB6                     i1l8434:
 22755                           
 22756                           ; BSR set to: 1
 22757  004EB6  0E05               	movlw	5
 22758  004EB8  0101               	movlb	1	; () banked
 22759  004EBA  19B9               	xorwf	_actualScreen& (0+255),w,b
 22760  004EBC  B4D8               	btfsc	status,2,c
 22761  004EBE  D009               	goto	i1l8444
 22762  004EC0  D014               	goto	i1l8446
 22763  004EC2                     i1l8438:
 22764                           
 22765                           ; BSR set to: 1
 22766                           ;DisplayProtocol.h: 201: chanValDigDOWN();
 22767  004EC2  EC9C  F02A         	call	i1_chanValDigDOWN	;wreg free
 22768                           
 22769                           ;DisplayProtocol.h: 202: break;
 22770  004EC6  0012               	return	
 22771  004EC8                     i1l8440:
 22772                           
 22773                           ;DisplayProtocol.h: 204: chanVals--;
 22774  004EC8  0101               	movlb	1	; () banked
 22775  004ECA  07B4               	decf	_chanVals& (0+255),f,b
 22776  004ECC  A0D8               	btfss	status,0,c
 22777  004ECE  07B5               	decf	(_chanVals+1)& (0+255),f,b
 22778                           
 22779                           ; BSR set to: 1
 22780                           ;DisplayProtocol.h: 206: }
 22781                           ;DisplayProtocol.h: 207: }
 22782                           
 22783                           ;DisplayProtocol.h: 205: break;
 22784  004ED0  0012               	return	
 22785  004ED2                     i1l8444:
 22786                           
 22787                           ; BSR set to: 1
 22788  004ED2  0101               	movlb	1	; () banked
 22789  004ED4  51BD               	movf	_menuSection& (0+255),w,b
 22790                           
 22791                           ; Switch size 1, requested type "space"
 22792                           ; Number of cases is 3, Range of values is 0 to 2
 22793                           ; switch strategies available:
 22794                           ; Name         Instructions Cycles
 22795                           ; simple_byte           10     6 (average)
 22796                           ;	Chosen strategy is simple_byte
 22797  004ED6  0A00               	xorlw	0	; case 0
 22798  004ED8  B4D8               	btfsc	status,2,c
 22799  004EDA  0012               	return	
 22800  004EDC  0A01               	xorlw	1	; case 1
 22801  004EDE  B4D8               	btfsc	status,2,c
 22802  004EE0  D7F0               	goto	i1l8438
 22803  004EE2  0A03               	xorlw	3	; case 2
 22804  004EE4  A4D8               	btfss	status,2,c
 22805                           
 22806                           ; BSR set to: 1
 22807                           ;DisplayProtocol.h: 208: }else if(actualScreen == 12)
 22808  004EE6  0012               	return	
 22809  004EE8  D7EF               	goto	i1l8440
 22810  004EEA                     i1l8446:
 22811                           
 22812                           ; BSR set to: 1
 22813  004EEA  0E0C               	movlw	12
 22814  004EEC  0101               	movlb	1	; () banked
 22815  004EEE  19B9               	xorwf	_actualScreen& (0+255),w,b
 22816  004EF0  A4D8               	btfss	status,2,c
 22817  004EF2  0012               	return	
 22818                           
 22819                           ; BSR set to: 1
 22820                           ;DisplayProtocol.h: 209: chanValDigDOWN();
 22821  004EF4  EC9C  F02A         	call	i1_chanValDigDOWN	;wreg free
 22822  004EF8  0012               	return	
 22823  004EFA                     __end_ofi1_pressDOWN:
 22824                           	opt stack 0
 22825                           pclatu	equ	0xFFB
 22826                           pclath	equ	0xFFA
 22827                           tblptru	equ	0xFF8
 22828                           tblptrh	equ	0xFF7
 22829                           tblptrl	equ	0xFF6
 22830                           tablat	equ	0xFF5
 22831                           prodh	equ	0xFF4
 22832                           prodl	equ	0xFF3
 22833                           intcon	equ	0xFF2
 22834                           postinc0	equ	0xFEE
 22835                           fsr0h	equ	0xFEA
 22836                           fsr0l	equ	0xFE9
 22837                           wreg	equ	0xFE8
 22838                           postdec1	equ	0xFE5
 22839                           fsr1h	equ	0xFE2
 22840                           fsr1l	equ	0xFE1
 22841                           bsr	equ	0xFE0
 22842                           indf2	equ	0xFDF
 22843                           postinc2	equ	0xFDE
 22844                           postdec2	equ	0xFDD
 22845                           plusw2	equ	0xFDB
 22846                           fsr2h	equ	0xFDA
 22847                           fsr2l	equ	0xFD9
 22848                           status	equ	0xFD8
 22849                           
 22850 ;; *************** function i1_chanValDigDOWN *****************
 22851 ;; Defined at:
 22852 ;;		line 37 in file "source/DisplayProtocol.h"
 22853 ;; Parameters:    Size  Location     Type
 22854 ;;		None
 22855 ;; Auto vars:     Size  Location     Type
 22856 ;;		None
 22857 ;; Return value:  Size  Location     Type
 22858 ;;                  1    wreg      void 
 22859 ;; Registers used:
 22860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22861 ;; Tracked objects:
 22862 ;;		On entry : 0/0
 22863 ;;		On exit  : 0/0
 22864 ;;		Unchanged: 0/0
 22865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22866 ;;      Params:         0       0       0       0       0       0       0
 22867 ;;      Locals:         0       0       0       0       0       0       0
 22868 ;;      Temps:          0       5       0       0       0       0       0
 22869 ;;      Totals:         0       5       0       0       0       0       0
 22870 ;;Total ram usage:        5 bytes
 22871 ;; Hardware stack levels used:    1
 22872 ;; Hardware stack levels required when called:    4
 22873 ;; This function calls:
 22874 ;;		Nothing
 22875 ;; This function is called by:
 22876 ;;		i1_pressDOWN
 22877 ;; This function uses a non-reentrant model
 22878 ;;
 22879                           
 22880                           	psect	text95
 22881  005538                     __ptext95:
 22882                           	opt stack 0
 22883  005538                     i1_chanValDigDOWN:
 22884                           	opt stack 13
 22885                           
 22886                           ;DisplayProtocol.h: 38: chanValdig[chanValSection]--;
 22887                           
 22888                           ;incstack = 0
 22889  005538  0101               	movlb	1	; () banked
 22890  00553A  519B               	movf	_chanValSection& (0+255),w,b
 22891  00553C  0D01               	mullw	1
 22892  00553E  0EA3               	movlw	low _chanValdig
 22893  005540  24F3               	addwf	prodl,w,c
 22894  005542  6ED9               	movwf	fsr2l,c
 22895  005544  0E01               	movlw	high _chanValdig
 22896  005546  20F4               	addwfc	prodh,w,c
 22897  005548  6EDA               	movwf	fsr2h,c
 22898  00554A  06DF               	decf	indf2,f,c
 22899                           
 22900                           ;DisplayProtocol.h: 39: if(chanValdig[chanValSection] < 0) {
 22901  00554C  0101               	movlb	1	; () banked
 22902  00554E  519B               	movf	_chanValSection& (0+255),w,b
 22903  005550  0D01               	mullw	1
 22904  005552  0EA3               	movlw	low _chanValdig
 22905  005554  24F3               	addwf	prodl,w,c
 22906  005556  6ED9               	movwf	fsr2l,c
 22907  005558  0E01               	movlw	high _chanValdig
 22908  00555A  20F4               	addwfc	prodh,w,c
 22909  00555C  6EDA               	movwf	fsr2h,c
 22910  00555E  0E00               	movlw	0
 22911  005560  AEDB               	btfss	plusw2,7,c
 22912  005562  0012               	return	
 22913                           
 22914                           ; BSR set to: 1
 22915                           ;DisplayProtocol.h: 40: chanValdig[chanValSection] = 9;
 22916  005564  0101               	movlb	1	; () banked
 22917  005566  519B               	movf	_chanValSection& (0+255),w,b
 22918  005568  0D01               	mullw	1
 22919  00556A  0EA3               	movlw	low _chanValdig
 22920  00556C  24F3               	addwf	prodl,w,c
 22921  00556E  6ED9               	movwf	fsr2l,c
 22922  005570  0E01               	movlw	high _chanValdig
 22923  005572  20F4               	addwfc	prodh,w,c
 22924  005574  6EDA               	movwf	fsr2h,c
 22925  005576  0E09               	movlw	9
 22926  005578  6EDF               	movwf	indf2,c
 22927                           
 22928                           ; BSR set to: 1
 22929                           ;DisplayProtocol.h: 41: if(chanValSection > 1 && chanValdig[chanValSection - 1] > 0)
 22930  00557A  0101               	movlb	1	; () banked
 22931  00557C  519B               	movf	_chanValSection& (0+255),w,b
 22932  00557E  0A80               	xorlw	128
 22933  005580  0F7E               	addlw	-130
 22934  005582  A0D8               	btfss	status,0,c
 22935  005584  0012               	return	
 22936                           
 22937                           ; BSR set to: 1
 22938  005586  0EFF               	movlw	255
 22939  005588  0100               	movlb	0	; () banked
 22940  00558A  6F60               	movwf	??i1_chanValDigDOWN& (0+255),b
 22941  00558C  0EFF               	movlw	255
 22942  00558E  0100               	movlb	0	; () banked
 22943  005590  6F61               	movwf	(??i1_chanValDigDOWN+1)& (0+255),b
 22944  005592  C19B  F062         	movff	_chanValSection,??i1_chanValDigDOWN+2
 22945  005596  0100               	movlb	0	; () banked
 22946  005598  6B63               	clrf	(??i1_chanValDigDOWN+3)& (0+255),b
 22947  00559A  BF62               	btfsc	(??i1_chanValDigDOWN+2)& (0+255),7,b
 22948  00559C  0763               	decf	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22949  00559E  0100               	movlb	0	; () banked
 22950  0055A0  5160               	movf	??i1_chanValDigDOWN& (0+255),w,b
 22951  0055A2  0100               	movlb	0	; () banked
 22952  0055A4  2762               	addwf	(??i1_chanValDigDOWN+2)& (0+255),f,b
 22953  0055A6  0100               	movlb	0	; () banked
 22954  0055A8  5161               	movf	(??i1_chanValDigDOWN+1)& (0+255),w,b
 22955  0055AA  0100               	movlb	0	; () banked
 22956  0055AC  2363               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22957  0055AE  0EA3               	movlw	low _chanValdig
 22958  0055B0  0100               	movlb	0	; () banked
 22959  0055B2  2562               	addwf	(??i1_chanValDigDOWN+2)& (0+255),w,b
 22960  0055B4  6ED9               	movwf	fsr2l,c
 22961  0055B6  0E01               	movlw	high _chanValdig
 22962  0055B8  0100               	movlb	0	; () banked
 22963  0055BA  2163               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),w,b
 22964  0055BC  6EDA               	movwf	fsr2h,c
 22965  0055BE  50DF               	movf	indf2,w,c
 22966  0055C0  0A80               	xorlw	128
 22967  0055C2  0F7F               	addlw	-129
 22968  0055C4  A0D8               	btfss	status,0,c
 22969  0055C6  0012               	return	
 22970                           
 22971                           ; BSR set to: 0
 22972                           ;DisplayProtocol.h: 42: chanValdig[chanValSection - 1]--;
 22973  0055C8  0EFF               	movlw	255
 22974  0055CA  0100               	movlb	0	; () banked
 22975  0055CC  6F60               	movwf	??i1_chanValDigDOWN& (0+255),b
 22976  0055CE  0EFF               	movlw	255
 22977  0055D0  0100               	movlb	0	; () banked
 22978  0055D2  6F61               	movwf	(??i1_chanValDigDOWN+1)& (0+255),b
 22979  0055D4  C19B  F062         	movff	_chanValSection,??i1_chanValDigDOWN+2
 22980  0055D8  0100               	movlb	0	; () banked
 22981  0055DA  6B63               	clrf	(??i1_chanValDigDOWN+3)& (0+255),b
 22982  0055DC  BF62               	btfsc	(??i1_chanValDigDOWN+2)& (0+255),7,b
 22983  0055DE  0763               	decf	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22984  0055E0  0100               	movlb	0	; () banked
 22985  0055E2  5160               	movf	??i1_chanValDigDOWN& (0+255),w,b
 22986  0055E4  0100               	movlb	0	; () banked
 22987  0055E6  2762               	addwf	(??i1_chanValDigDOWN+2)& (0+255),f,b
 22988  0055E8  0100               	movlb	0	; () banked
 22989  0055EA  5161               	movf	(??i1_chanValDigDOWN+1)& (0+255),w,b
 22990  0055EC  0100               	movlb	0	; () banked
 22991  0055EE  2363               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22992  0055F0  0EA3               	movlw	low _chanValdig
 22993  0055F2  0100               	movlb	0	; () banked
 22994  0055F4  2562               	addwf	(??i1_chanValDigDOWN+2)& (0+255),w,b
 22995  0055F6  6ED9               	movwf	fsr2l,c
 22996  0055F8  0E01               	movlw	high _chanValdig
 22997  0055FA  0100               	movlb	0	; () banked
 22998  0055FC  2163               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),w,b
 22999  0055FE  6EDA               	movwf	fsr2h,c
 23000  005600  06DF               	decf	indf2,f,c
 23001                           
 23002                           ; BSR set to: 0
 23003  005602  0012               	return	
 23004  005604                     __end_ofi1_chanValDigDOWN:
 23005                           	opt stack 0
 23006                           pclatu	equ	0xFFB
 23007                           pclath	equ	0xFFA
 23008                           tblptru	equ	0xFF8
 23009                           tblptrh	equ	0xFF7
 23010                           tblptrl	equ	0xFF6
 23011                           tablat	equ	0xFF5
 23012                           prodh	equ	0xFF4
 23013                           prodl	equ	0xFF3
 23014                           intcon	equ	0xFF2
 23015                           postinc0	equ	0xFEE
 23016                           fsr0h	equ	0xFEA
 23017                           fsr0l	equ	0xFE9
 23018                           wreg	equ	0xFE8
 23019                           postdec1	equ	0xFE5
 23020                           fsr1h	equ	0xFE2
 23021                           fsr1l	equ	0xFE1
 23022                           bsr	equ	0xFE0
 23023                           indf2	equ	0xFDF
 23024                           postinc2	equ	0xFDE
 23025                           postdec2	equ	0xFDD
 23026                           plusw2	equ	0xFDB
 23027                           fsr2h	equ	0xFDA
 23028                           fsr2l	equ	0xFD9
 23029                           status	equ	0xFD8
 23030                           
 23031 ;; *************** function i1_longPressUP *****************
 23032 ;; Defined at:
 23033 ;;		line 157 in file "source/DisplayProtocol.h"
 23034 ;; Parameters:    Size  Location     Type
 23035 ;;		None
 23036 ;; Auto vars:     Size  Location     Type
 23037 ;;		None
 23038 ;; Return value:  Size  Location     Type
 23039 ;;                  1    wreg      void 
 23040 ;; Registers used:
 23041 ;;		wreg, status,2, status,0
 23042 ;; Tracked objects:
 23043 ;;		On entry : 0/0
 23044 ;;		On exit  : 0/0
 23045 ;;		Unchanged: 0/0
 23046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23047 ;;      Params:         0       0       0       0       0       0       0
 23048 ;;      Locals:         0       0       0       0       0       0       0
 23049 ;;      Temps:          0       0       0       0       0       0       0
 23050 ;;      Totals:         0       0       0       0       0       0       0
 23051 ;;Total ram usage:        0 bytes
 23052 ;; Hardware stack levels used:    1
 23053 ;; Hardware stack levels required when called:    4
 23054 ;; This function calls:
 23055 ;;		Nothing
 23056 ;; This function is called by:
 23057 ;;		_UARTint
 23058 ;; This function uses a non-reentrant model
 23059 ;;
 23060                           
 23061                           	psect	text96
 23062  0069DE                     __ptext96:
 23063                           	opt stack 0
 23064  0069DE                     i1_longPressUP:
 23065                           	opt stack 14
 23066                           
 23067                           ;DisplayProtocol.h: 158: if (!UPisLP) {
 23068                           
 23069                           ;incstack = 0
 23070  0069DE  5048               	movf	_UPisLP,w,c
 23071  0069E0  A4D8               	btfss	status,2,c
 23072  0069E2  0012               	return	
 23073                           
 23074                           ;DisplayProtocol.h: 159: UPisLP = 1;
 23075  0069E4  0E01               	movlw	1
 23076  0069E6  6E48               	movwf	_UPisLP,c
 23077                           
 23078                           ;DisplayProtocol.h: 160: if (actualScreen == 0 || actualScreen == 4) {
 23079  0069E8  0101               	movlb	1	; () banked
 23080  0069EA  51B9               	movf	_actualScreen& (0+255),w,b
 23081  0069EC  B4D8               	btfsc	status,2,c
 23082  0069EE  D005               	goto	i1l8384
 23083                           
 23084                           ; BSR set to: 1
 23085  0069F0  0E04               	movlw	4
 23086  0069F2  0101               	movlb	1	; () banked
 23087  0069F4  19B9               	xorwf	_actualScreen& (0+255),w,b
 23088  0069F6  A4D8               	btfss	status,2,c
 23089  0069F8  D01C               	goto	i1l8396
 23090  0069FA                     i1l8384:
 23091                           
 23092                           ; BSR set to: 1
 23093                           ;DisplayProtocol.h: 161: if (holdENTERcont > 5) {
 23094  0069FA  0E05               	movlw	5
 23095  0069FC  0100               	movlb	0	; () banked
 23096  0069FE  65BD               	cpfsgt	_holdENTERcont& (0+255),b
 23097  006A00  D014               	goto	i1l8394
 23098                           
 23099                           ; BSR set to: 0
 23100                           ;DisplayProtocol.h: 162: if (actualScreen == 0) {
 23101  006A02  0101               	movlb	1	; () banked
 23102  006A04  51B9               	movf	_actualScreen& (0+255),w,b
 23103  006A06  A4D8               	btfss	status,2,c
 23104  006A08  D007               	goto	i1l8390
 23105                           
 23106                           ; BSR set to: 1
 23107                           ;DisplayProtocol.h: 163: actualScreen = 1;
 23108  006A0A  0E01               	movlw	1
 23109  006A0C  0101               	movlb	1	; () banked
 23110  006A0E  6FB9               	movwf	_actualScreen& (0+255),b
 23111                           
 23112                           ;DisplayProtocol.h: 164: fd = 0;
 23113  006A10  0E00               	movlw	0
 23114  006A12  0101               	movlb	1	; () banked
 23115  006A14  6FBB               	movwf	_fd& (0+255),b
 23116                           
 23117                           ;DisplayProtocol.h: 165: } else if (actualScreen == 4)
 23118  006A16  0012               	return	
 23119  006A18                     i1l8390:
 23120                           
 23121                           ; BSR set to: 1
 23122  006A18  0E04               	movlw	4
 23123  006A1A  0101               	movlb	1	; () banked
 23124  006A1C  19B9               	xorwf	_actualScreen& (0+255),w,b
 23125  006A1E  A4D8               	btfss	status,2,c
 23126  006A20  0012               	return	
 23127                           
 23128                           ; BSR set to: 1
 23129                           ;DisplayProtocol.h: 166: actualScreen = 9;
 23130  006A22  0E09               	movlw	9
 23131  006A24  0101               	movlb	1	; () banked
 23132  006A26  6FB9               	movwf	_actualScreen& (0+255),b
 23133                           
 23134                           ; BSR set to: 1
 23135                           ;DisplayProtocol.h: 167: } else
 23136                           
 23137                           ; BSR set to: 1
 23138  006A28  0012               	return	
 23139  006A2A                     i1l8394:
 23140                           
 23141                           ;DisplayProtocol.h: 168: menuSection = 0;
 23142  006A2A  0E00               	movlw	0
 23143  006A2C  0101               	movlb	1	; () banked
 23144  006A2E  6FBD               	movwf	_menuSection& (0+255),b
 23145                           
 23146                           ; BSR set to: 1
 23147                           ;DisplayProtocol.h: 169: }else if(actualScreen == 5) {
 23148  006A30  0012               	return	
 23149  006A32                     i1l8396:
 23150                           
 23151                           ; BSR set to: 1
 23152  006A32  0E05               	movlw	5
 23153  006A34  0101               	movlb	1	; () banked
 23154  006A36  19B9               	xorwf	_actualScreen& (0+255),w,b
 23155  006A38  A4D8               	btfss	status,2,c
 23156  006A3A  0012               	return	
 23157                           
 23158                           ; BSR set to: 1
 23159                           ;DisplayProtocol.h: 170: if(menuSection == 2)
 23160  006A3C  0E02               	movlw	2
 23161  006A3E  0101               	movlb	1	; () banked
 23162  006A40  19BD               	xorwf	_menuSection& (0+255),w,b
 23163  006A42  A4D8               	btfss	status,2,c
 23164  006A44  0012               	return	
 23165                           
 23166                           ; BSR set to: 1
 23167                           ;DisplayProtocol.h: 171: chanVals += 10;
 23168  006A46  0E0A               	movlw	10
 23169  006A48  0101               	movlb	1	; () banked
 23170  006A4A  27B4               	addwf	_chanVals& (0+255),f,b
 23171  006A4C  0E00               	movlw	0
 23172  006A4E  23B5               	addwfc	(_chanVals+1)& (0+255),f,b
 23173                           
 23174                           ; BSR set to: 1
 23175                           
 23176                           ; BSR set to: 1
 23177                           
 23178                           ; BSR set to: 1
 23179  006A50  0012               	return	
 23180  006A52                     __end_ofi1_longPressUP:
 23181                           	opt stack 0
 23182                           pclatu	equ	0xFFB
 23183                           pclath	equ	0xFFA
 23184                           tblptru	equ	0xFF8
 23185                           tblptrh	equ	0xFF7
 23186                           tblptrl	equ	0xFF6
 23187                           tablat	equ	0xFF5
 23188                           prodh	equ	0xFF4
 23189                           prodl	equ	0xFF3
 23190                           intcon	equ	0xFF2
 23191                           postinc0	equ	0xFEE
 23192                           fsr0h	equ	0xFEA
 23193                           fsr0l	equ	0xFE9
 23194                           wreg	equ	0xFE8
 23195                           postdec1	equ	0xFE5
 23196                           fsr1h	equ	0xFE2
 23197                           fsr1l	equ	0xFE1
 23198                           bsr	equ	0xFE0
 23199                           indf2	equ	0xFDF
 23200                           postinc2	equ	0xFDE
 23201                           postdec2	equ	0xFDD
 23202                           plusw2	equ	0xFDB
 23203                           fsr2h	equ	0xFDA
 23204                           fsr2l	equ	0xFD9
 23205                           status	equ	0xFD8
 23206                           
 23207 ;; *************** function i1_longPressRETRO *****************
 23208 ;; Defined at:
 23209 ;;		line 253 in file "source/DisplayProtocol.h"
 23210 ;; Parameters:    Size  Location     Type
 23211 ;;		None
 23212 ;; Auto vars:     Size  Location     Type
 23213 ;;		None
 23214 ;; Return value:  Size  Location     Type
 23215 ;;                  1    wreg      void 
 23216 ;; Registers used:
 23217 ;;		wreg, status,2, status,0, cstack
 23218 ;; Tracked objects:
 23219 ;;		On entry : 0/0
 23220 ;;		On exit  : 0/0
 23221 ;;		Unchanged: 0/0
 23222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23223 ;;      Params:         0       0       0       0       0       0       0
 23224 ;;      Locals:         0       0       0       0       0       0       0
 23225 ;;      Temps:          0       0       0       0       0       0       0
 23226 ;;      Totals:         0       0       0       0       0       0       0
 23227 ;;Total ram usage:        0 bytes
 23228 ;; Hardware stack levels used:    1
 23229 ;; Hardware stack levels required when called:    6
 23230 ;; This function calls:
 23231 ;;		i1___ftmul
 23232 ;;		i1_initProtocoll
 23233 ;; This function is called by:
 23234 ;;		_UARTint
 23235 ;; This function uses a non-reentrant model
 23236 ;;
 23237                           
 23238                           	psect	text97
 23239  005000                     __ptext97:
 23240                           	opt stack 0
 23241  005000                     i1_longPressRETRO:
 23242                           	opt stack 12
 23243                           
 23244                           ;DisplayProtocol.h: 254: if (!RETROisLP) {
 23245                           
 23246                           ;incstack = 0
 23247  005000  0100               	movlb	0	; () banked
 23248  005002  51B8               	movf	_RETROisLP& (0+255),w,b
 23249  005004  A4D8               	btfss	status,2,c
 23250  005006  0012               	return	
 23251                           
 23252                           ; BSR set to: 0
 23253                           ;DisplayProtocol.h: 255: RETROisLP = 1;
 23254  005008  0E01               	movlw	1
 23255  00500A  0100               	movlb	0	; () banked
 23256  00500C  6FB8               	movwf	_RETROisLP& (0+255),b
 23257                           
 23258                           ;DisplayProtocol.h: 256: if(actualScreen == 0 || actualScreen == 4
 23259                           ;DisplayProtocol.h: 257: || actualScreen == 14) {
 23260  00500E  0101               	movlb	1	; () banked
 23261  005010  51B9               	movf	_actualScreen& (0+255),w,b
 23262  005012  B4D8               	btfsc	status,2,c
 23263  005014  D00A               	goto	i1l8510
 23264                           
 23265                           ; BSR set to: 1
 23266  005016  0E04               	movlw	4
 23267  005018  0101               	movlb	1	; () banked
 23268  00501A  19B9               	xorwf	_actualScreen& (0+255),w,b
 23269  00501C  B4D8               	btfsc	status,2,c
 23270  00501E  D005               	goto	i1l8510
 23271                           
 23272                           ; BSR set to: 1
 23273  005020  0E0E               	movlw	14
 23274  005022  0101               	movlb	1	; () banked
 23275  005024  19B9               	xorwf	_actualScreen& (0+255),w,b
 23276  005026  A4D8               	btfss	status,2,c
 23277  005028  D012               	goto	i1l8516
 23278  00502A                     i1l8510:
 23279                           
 23280                           ; BSR set to: 1
 23281                           ;DisplayProtocol.h: 258: if(processStarted || actualScreen == 14) {
 23282  00502A  0100               	movlb	0	; () banked
 23283  00502C  51C4               	movf	_processStarted& (0+255),w,b
 23284  00502E  A4D8               	btfss	status,2,c
 23285  005030  D005               	goto	i1l688
 23286                           
 23287                           ; BSR set to: 0
 23288  005032  0E0E               	movlw	14
 23289  005034  0101               	movlb	1	; () banked
 23290  005036  19B9               	xorwf	_actualScreen& (0+255),w,b
 23291  005038  A4D8               	btfss	status,2,c
 23292  00503A  0012               	return	
 23293  00503C                     i1l688:
 23294                           
 23295                           ;DisplayProtocol.h: 259: tempLastScreen = actualScreen;
 23296  00503C  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 23297                           
 23298                           ;DisplayProtocol.h: 260: actualScreen = 3;
 23299  005040  0E03               	movlw	3
 23300  005042  0101               	movlb	1	; () banked
 23301  005044  6FB9               	movwf	_actualScreen& (0+255),b
 23302                           
 23303                           ;DisplayProtocol.h: 261: selSN = 0;
 23304  005046  0E00               	movlw	0
 23305  005048  0101               	movlb	1	; () banked
 23306  00504A  6FBF               	movwf	_selSN& (0+255),b
 23307                           
 23308                           ; BSR set to: 1
 23309                           ;DisplayProtocol.h: 262: }
 23310                           ;DisplayProtocol.h: 263: }else if(actualScreen == 5)
 23311  00504C  0012               	return	
 23312  00504E                     i1l8516:
 23313                           
 23314                           ; BSR set to: 1
 23315  00504E  0E05               	movlw	5
 23316  005050  0101               	movlb	1	; () banked
 23317  005052  19B9               	xorwf	_actualScreen& (0+255),w,b
 23318  005054  A4D8               	btfss	status,2,c
 23319  005056  D004               	goto	i1l8520
 23320                           
 23321                           ; BSR set to: 1
 23322                           ;DisplayProtocol.h: 264: actualScreen = 4;
 23323  005058  0E04               	movlw	4
 23324  00505A  0101               	movlb	1	; () banked
 23325  00505C  6FB9               	movwf	_actualScreen& (0+255),b
 23326  00505E  0012               	return	
 23327  005060                     i1l8520:
 23328                           
 23329                           ; BSR set to: 1
 23330                           ;DisplayProtocol.h: 265: else if(actualScreen == 12 || actualScreen == 6) {
 23331  005060  0E0C               	movlw	12
 23332  005062  0101               	movlb	1	; () banked
 23333  005064  19B9               	xorwf	_actualScreen& (0+255),w,b
 23334  005066  B4D8               	btfsc	status,2,c
 23335  005068  D005               	goto	i1l694
 23336                           
 23337                           ; BSR set to: 1
 23338  00506A  0E06               	movlw	6
 23339  00506C  0101               	movlb	1	; () banked
 23340  00506E  19B9               	xorwf	_actualScreen& (0+255),w,b
 23341  005070  A4D8               	btfss	status,2,c
 23342  005072  D009               	goto	i1l8526
 23343  005074                     i1l694:
 23344                           
 23345                           ; BSR set to: 1
 23346                           ;DisplayProtocol.h: 266: tempLastScreen = actualScreen;
 23347  005074  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 23348                           
 23349                           ; BSR set to: 1
 23350                           ;DisplayProtocol.h: 267: actualScreen = 15;
 23351  005078  0E0F               	movlw	15
 23352  00507A  0101               	movlb	1	; () banked
 23353  00507C  6FB9               	movwf	_actualScreen& (0+255),b
 23354                           
 23355                           ;DisplayProtocol.h: 268: selSN = 1;
 23356  00507E  0E01               	movlw	1
 23357  005080  0101               	movlb	1	; () banked
 23358  005082  6FBF               	movwf	_selSN& (0+255),b
 23359                           
 23360                           ;DisplayProtocol.h: 269: }else if(actualScreen == 14) {
 23361  005084  0012               	return	
 23362  005086                     i1l8526:
 23363                           
 23364                           ; BSR set to: 1
 23365  005086  0E0E               	movlw	14
 23366  005088  0101               	movlb	1	; () banked
 23367  00508A  19B9               	xorwf	_actualScreen& (0+255),w,b
 23368  00508C  A4D8               	btfss	status,2,c
 23369  00508E  0012               	return	
 23370                           
 23371                           ; BSR set to: 1
 23372                           ;DisplayProtocol.h: 270: processStarted = 0;
 23373  005090  0E00               	movlw	0
 23374  005092  0100               	movlb	0	; () banked
 23375  005094  6FC4               	movwf	_processStarted& (0+255),b
 23376                           
 23377                           ;DisplayProtocol.h: 271: processState = 0;
 23378  005096  0E00               	movlw	0
 23379  005098  0100               	movlb	0	; () banked
 23380  00509A  6FB5               	movwf	(_processState+1)& (0+255),b
 23381  00509C  0E00               	movlw	0
 23382  00509E  6FB4               	movwf	_processState& (0+255),b
 23383                           
 23384                           ; BSR set to: 0
 23385                           ;DisplayProtocol.h: 272: LATCbits.LATC4 = 0;
 23386  0050A0  988B               	bcf	3979,4,c	;volatile
 23387                           
 23388                           ;DisplayProtocol.h: 273: actualScreen = 0;
 23389  0050A2  0E00               	movlw	0
 23390  0050A4  0101               	movlb	1	; () banked
 23391  0050A6  6FB9               	movwf	_actualScreen& (0+255),b
 23392                           
 23393                           ;DisplayProtocol.h: 274: if(calibMode) {
 23394  0050A8  0100               	movlb	0	; () banked
 23395  0050AA  51BB               	movf	_calibMode& (0+255),w,b
 23396  0050AC  B4D8               	btfsc	status,2,c
 23397  0050AE  D027               	goto	i1l697
 23398                           
 23399                           ; BSR set to: 0
 23400                           ;DisplayProtocol.h: 275: numCortes = tempNumCortes;
 23401  0050B0  C0D2  F0D0         	movff	_tempNumCortes,_numCortes
 23402  0050B4  C0D3  F0D1         	movff	_tempNumCortes+1,_numCortes+1
 23403                           
 23404                           ;DisplayProtocol.h: 276: tiXcorte = temptiXcorte;
 23405  0050B8  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 23406  0050BC  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 23407  0050C0  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 23408                           
 23409                           ; BSR set to: 0
 23410                           ;DisplayProtocol.h: 277: timsXcorte = (float)tiXcorte * 1000;
 23411  0050C4  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 23412  0050C8  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 23413  0050CC  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 23414  0050D0  0E00               	movlw	0
 23415  0050D2  0100               	movlb	0	; () banked
 23416  0050D4  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 23417  0050D6  0E7A               	movlw	122
 23418  0050D8  0100               	movlb	0	; () banked
 23419  0050DA  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 23420  0050DC  0E44               	movlw	68
 23421  0050DE  0100               	movlb	0	; () banked
 23422  0050E0  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 23423  0050E2  ECCE  F01D         	call	i1___ftmul	;wreg free
 23424  0050E6  C068  F059         	movff	?i1___ftmul,_timsXcorte
 23425  0050EA  C069  F05A         	movff	?i1___ftmul+1,_timsXcorte+1
 23426  0050EE  C06A  F05B         	movff	?i1___ftmul+2,_timsXcorte+2
 23427                           
 23428                           ;DisplayProtocol.h: 278: calibMode = 0;
 23429  0050F2  0E00               	movlw	0
 23430  0050F4  0100               	movlb	0	; () banked
 23431  0050F6  6FBB               	movwf	_calibMode& (0+255),b
 23432                           
 23433                           ; BSR set to: 0
 23434                           ;DisplayProtocol.h: 279: actualScreen = 4;
 23435  0050F8  0E04               	movlw	4
 23436  0050FA  0101               	movlb	1	; () banked
 23437  0050FC  6FB9               	movwf	_actualScreen& (0+255),b
 23438  0050FE                     i1l697:
 23439                           
 23440                           ;DisplayProtocol.h: 280: }
 23441                           ;DisplayProtocol.h: 281: initProtocoll(1);
 23442  0050FE  0E01               	movlw	1
 23443  005100  ECC9  F036         	call	i1_initProtocoll
 23444  005104  0012               	return	
 23445  005106                     __end_ofi1_longPressRETRO:
 23446                           	opt stack 0
 23447                           pclatu	equ	0xFFB
 23448                           pclath	equ	0xFFA
 23449                           tblptru	equ	0xFF8
 23450                           tblptrh	equ	0xFF7
 23451                           tblptrl	equ	0xFF6
 23452                           tablat	equ	0xFF5
 23453                           prodh	equ	0xFF4
 23454                           prodl	equ	0xFF3
 23455                           intcon	equ	0xFF2
 23456                           postinc0	equ	0xFEE
 23457                           fsr0h	equ	0xFEA
 23458                           fsr0l	equ	0xFE9
 23459                           wreg	equ	0xFE8
 23460                           postdec1	equ	0xFE5
 23461                           fsr1h	equ	0xFE2
 23462                           fsr1l	equ	0xFE1
 23463                           bsr	equ	0xFE0
 23464                           indf2	equ	0xFDF
 23465                           postinc2	equ	0xFDE
 23466                           postdec2	equ	0xFDD
 23467                           plusw2	equ	0xFDB
 23468                           fsr2h	equ	0xFDA
 23469                           fsr2l	equ	0xFD9
 23470                           status	equ	0xFD8
 23471                           
 23472 ;; *************** function i1_longPressENTER *****************
 23473 ;; Defined at:
 23474 ;;		line 428 in file "source/DisplayProtocol.h"
 23475 ;; Parameters:    Size  Location     Type
 23476 ;;		None
 23477 ;; Auto vars:     Size  Location     Type
 23478 ;;  longPressENT    3   45[BANK0 ] float 
 23479 ;; Return value:  Size  Location     Type
 23480 ;;                  1    wreg      void 
 23481 ;; Registers used:
 23482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23483 ;; Tracked objects:
 23484 ;;		On entry : 0/0
 23485 ;;		On exit  : 0/0
 23486 ;;		Unchanged: 0/0
 23487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23488 ;;      Params:         0       0       0       0       0       0       0
 23489 ;;      Locals:         0       6       0       0       0       0       0
 23490 ;;      Temps:          0       0       0       0       0       0       0
 23491 ;;      Totals:         0       6       0       0       0       0       0
 23492 ;;Total ram usage:        6 bytes
 23493 ;; Hardware stack levels used:    1
 23494 ;; Hardware stack levels required when called:    9
 23495 ;; This function calls:
 23496 ;;		i1___ftadd
 23497 ;;		i1___ftdiv
 23498 ;;		i1___ftmul
 23499 ;;		i1_calcVars2ti
 23500 ;;		i1_confirmEdition
 23501 ;;		i1_desintegrator
 23502 ;;		i1_integrator
 23503 ;; This function is called by:
 23504 ;;		_UARTint
 23505 ;; This function uses a non-reentrant model
 23506 ;;
 23507                           
 23508                           	psect	text98
 23509  001C70                     __ptext98:
 23510                           	opt stack 0
 23511  001C70                     i1_longPressENTER:
 23512                           	opt stack 9
 23513                           
 23514                           ;DisplayProtocol.h: 429: if (!ENTERisLP) {
 23515                           
 23516                           ;incstack = 0
 23517  001C70  0101               	movlb	1	; () banked
 23518  001C72  51B8               	movf	_ENTERisLP& (0+255),w,b
 23519  001C74  A4D8               	btfss	status,2,c
 23520  001C76  0012               	return	
 23521                           
 23522                           ; BSR set to: 1
 23523                           ;DisplayProtocol.h: 430: ENTERisLP = 1;
 23524  001C78  0E01               	movlw	1
 23525  001C7A  0101               	movlb	1	; () banked
 23526  001C7C  6FB8               	movwf	_ENTERisLP& (0+255),b
 23527                           
 23528                           ;DisplayProtocol.h: 431: if(actualScreen == 0 || actualScreen == 4) {
 23529  001C7E  0101               	movlb	1	; () banked
 23530  001C80  51B9               	movf	_actualScreen& (0+255),w,b
 23531  001C82  B4D8               	btfsc	status,2,c
 23532  001C84  D005               	goto	i1l8732
 23533                           
 23534                           ; BSR set to: 1
 23535  001C86  0E04               	movlw	4
 23536  001C88  0101               	movlb	1	; () banked
 23537  001C8A  19B9               	xorwf	_actualScreen& (0+255),w,b
 23538  001C8C  A4D8               	btfss	status,2,c
 23539  001C8E  D025               	goto	i1l8748
 23540  001C90                     i1l8732:
 23541                           
 23542                           ; BSR set to: 1
 23543                           ;DisplayProtocol.h: 432: if (holdUPcont > 5) {
 23544  001C90  0E05               	movlw	5
 23545  001C92  0101               	movlb	1	; () banked
 23546  001C94  65BC               	cpfsgt	_holdUPcont& (0+255),b
 23547  001C96  D014               	goto	i1l8742
 23548                           
 23549                           ; BSR set to: 1
 23550                           ;DisplayProtocol.h: 433: if (actualScreen == 0) {
 23551  001C98  0101               	movlb	1	; () banked
 23552  001C9A  51B9               	movf	_actualScreen& (0+255),w,b
 23553  001C9C  A4D8               	btfss	status,2,c
 23554  001C9E  D007               	goto	i1l8738
 23555                           
 23556                           ; BSR set to: 1
 23557                           ;DisplayProtocol.h: 434: actualScreen = 1;
 23558  001CA0  0E01               	movlw	1
 23559  001CA2  0101               	movlb	1	; () banked
 23560  001CA4  6FB9               	movwf	_actualScreen& (0+255),b
 23561                           
 23562                           ;DisplayProtocol.h: 435: fd = 0;
 23563  001CA6  0E00               	movlw	0
 23564  001CA8  0101               	movlb	1	; () banked
 23565  001CAA  6FBB               	movwf	_fd& (0+255),b
 23566                           
 23567                           ;DisplayProtocol.h: 436: } else if (actualScreen == 4)
 23568  001CAC  0012               	return	
 23569  001CAE                     i1l8738:
 23570                           
 23571                           ; BSR set to: 1
 23572  001CAE  0E04               	movlw	4
 23573  001CB0  0101               	movlb	1	; () banked
 23574  001CB2  19B9               	xorwf	_actualScreen& (0+255),w,b
 23575  001CB4  A4D8               	btfss	status,2,c
 23576  001CB6  0012               	return	
 23577                           
 23578                           ; BSR set to: 1
 23579                           ;DisplayProtocol.h: 437: actualScreen = 9;
 23580  001CB8  0E09               	movlw	9
 23581  001CBA  0101               	movlb	1	; () banked
 23582  001CBC  6FB9               	movwf	_actualScreen& (0+255),b
 23583                           
 23584                           ; BSR set to: 1
 23585                           ;DisplayProtocol.h: 438: } else if(!processStarted) {
 23586                           
 23587                           ; BSR set to: 1
 23588  001CBE  0012               	return	
 23589  001CC0                     i1l8742:
 23590                           
 23591                           ; BSR set to: 1
 23592  001CC0  0100               	movlb	0	; () banked
 23593  001CC2  51C4               	movf	_processStarted& (0+255),w,b
 23594  001CC4  A4D8               	btfss	status,2,c
 23595  001CC6  0012               	return	
 23596                           
 23597                           ; BSR set to: 0
 23598                           ;DisplayProtocol.h: 439: tempLastScreen = actualScreen;
 23599  001CC8  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 23600                           
 23601                           ; BSR set to: 0
 23602                           ;DisplayProtocol.h: 440: actualScreen = 2;
 23603  001CCC  0E02               	movlw	2
 23604  001CCE  0101               	movlb	1	; () banked
 23605  001CD0  6FB9               	movwf	_actualScreen& (0+255),b
 23606                           
 23607                           ;DisplayProtocol.h: 441: selSN = 1;
 23608  001CD2  0E01               	movlw	1
 23609  001CD4  0101               	movlb	1	; () banked
 23610  001CD6  6FBF               	movwf	_selSN& (0+255),b
 23611                           
 23612                           ; BSR set to: 1
 23613                           ;DisplayProtocol.h: 442: }
 23614                           ;DisplayProtocol.h: 443: }else if(actualScreen == 5) {
 23615                           
 23616                           ; BSR set to: 1
 23617  001CD8  0012               	return	
 23618  001CDA                     i1l8748:
 23619                           
 23620                           ; BSR set to: 1
 23621  001CDA  0E05               	movlw	5
 23622  001CDC  0101               	movlb	1	; () banked
 23623  001CDE  19B9               	xorwf	_actualScreen& (0+255),w,b
 23624  001CE0  A4D8               	btfss	status,2,c
 23625  001CE2  D010               	goto	i1l8756
 23626                           
 23627                           ; BSR set to: 1
 23628                           ;DisplayProtocol.h: 444: if(menuSection != 2)
 23629  001CE4  0E02               	movlw	2
 23630  001CE6  0101               	movlb	1	; () banked
 23631  001CE8  19BD               	xorwf	_menuSection& (0+255),w,b
 23632  001CEA  A4D8               	btfss	status,2,c
 23633                           
 23634                           ; BSR set to: 1
 23635                           ;DisplayProtocol.h: 445: integrator();
 23636  001CEC  EC9E  F021         	call	i1_integrator	;wreg free
 23637                           
 23638                           ;DisplayProtocol.h: 446: confirmEdition(!processStarted);
 23639  001CF0  0100               	movlb	0	; () banked
 23640  001CF2  51C4               	movf	_processStarted& (0+255),w,b
 23641  001CF4  A4D8               	btfss	status,2,c
 23642  001CF6  D002               	goto	i1u1253_20
 23643  001CF8  0E01               	movlw	1
 23644  001CFA  D001               	goto	i1u1254_20
 23645  001CFC                     i1u1253_20:
 23646  001CFC  0E00               	movlw	0
 23647  001CFE                     i1u1254_20:
 23648  001CFE  EC43  F02D         	call	i1_confirmEdition
 23649                           
 23650                           ;DisplayProtocol.h: 447: }else if(actualScreen == 12) {
 23651  001D02  0012               	return	
 23652  001D04                     i1l8756:
 23653  001D04  0E0C               	movlw	12
 23654  001D06  0101               	movlb	1	; () banked
 23655  001D08  19B9               	xorwf	_actualScreen& (0+255),w,b
 23656  001D0A  A4D8               	btfss	status,2,c
 23657  001D0C  0012               	return	
 23658                           
 23659                           ; BSR set to: 1
 23660                           ;DisplayProtocol.h: 448: tempLastScreen = 6;
 23661  001D0E  0E06               	movlw	6
 23662  001D10  0100               	movlb	0	; () banked
 23663  001D12  6FC8               	movwf	_tempLastScreen& (0+255),b
 23664                           
 23665                           ; BSR set to: 0
 23666                           ;DisplayProtocol.h: 449: integrator();
 23667  001D14  EC9E  F021         	call	i1_integrator	;wreg free
 23668                           
 23669                           ;DisplayProtocol.h: 450: if(calibLevel == 0) {
 23670  001D18  0101               	movlb	1	; () banked
 23671  001D1A  51BA               	movf	_calibLevel& (0+255),w,b
 23672  001D1C  A4D8               	btfss	status,2,c
 23673  001D1E  D069               	goto	i1l8784
 23674                           
 23675                           ; BSR set to: 1
 23676                           ;DisplayProtocol.h: 451: tempVelocidadMasa1 = (float)chanValf / tiXcorte;
 23677  001D20  C1B1  F072         	movff	_chanValf,i1___ftdiv@f1
 23678  001D24  C1B2  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23679  001D28  C1B3  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23680  001D2C  C195  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23681  001D30  C196  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23682  001D34  C197  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23683  001D38  EC23  F01F         	call	i1___ftdiv	;wreg free
 23684  001D3C  C072  F19D         	movff	?i1___ftdiv,_tempVelocidadMasa1
 23685  001D40  C073  F19E         	movff	?i1___ftdiv+1,_tempVelocidadMasa1+1
 23686  001D44  C074  F19F         	movff	?i1___ftdiv+2,_tempVelocidadMasa1+2
 23687                           
 23688                           ;DisplayProtocol.h: 452: tiXcorte = (float)0.5f / tempVelocidadMasa1;
 23689  001D48  0E00               	movlw	0
 23690  001D4A  0100               	movlb	0	; () banked
 23691  001D4C  6F72               	movwf	i1___ftdiv@f1& (0+255),b
 23692  001D4E  0E00               	movlw	0
 23693  001D50  0100               	movlb	0	; () banked
 23694  001D52  6F73               	movwf	(i1___ftdiv@f1+1)& (0+255),b
 23695  001D54  0E3F               	movlw	63
 23696  001D56  0100               	movlb	0	; () banked
 23697  001D58  6F74               	movwf	(i1___ftdiv@f1+2)& (0+255),b
 23698  001D5A  C19D  F075         	movff	_tempVelocidadMasa1,i1___ftdiv@f2
 23699  001D5E  C19E  F076         	movff	_tempVelocidadMasa1+1,i1___ftdiv@f2+1
 23700  001D62  C19F  F077         	movff	_tempVelocidadMasa1+2,i1___ftdiv@f2+2
 23701  001D66  EC23  F01F         	call	i1___ftdiv	;wreg free
 23702  001D6A  C072  F195         	movff	?i1___ftdiv,_tiXcorte
 23703  001D6E  C073  F196         	movff	?i1___ftdiv+1,_tiXcorte+1
 23704  001D72  C074  F197         	movff	?i1___ftdiv+2,_tiXcorte+2
 23705                           
 23706                           ;DisplayProtocol.h: 453: timsXcorte = (float)tiXcorte * 1000;
 23707  001D76  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 23708  001D7A  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 23709  001D7E  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 23710  001D82  0E00               	movlw	0
 23711  001D84  0100               	movlb	0	; () banked
 23712  001D86  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 23713  001D88  0E7A               	movlw	122
 23714  001D8A  0100               	movlb	0	; () banked
 23715  001D8C  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 23716  001D8E  0E44               	movlw	68
 23717  001D90  0100               	movlb	0	; () banked
 23718  001D92  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 23719  001D94  ECCE  F01D         	call	i1___ftmul	;wreg free
 23720  001D98  C068  F059         	movff	?i1___ftmul,_timsXcorte
 23721  001D9C  C069  F05A         	movff	?i1___ftmul+1,_timsXcorte+1
 23722  001DA0  C06A  F05B         	movff	?i1___ftmul+2,_timsXcorte+2
 23723                           
 23724                           ;DisplayProtocol.h: 454: calibLevel = 1;
 23725  001DA4  0E01               	movlw	1
 23726  001DA6  0101               	movlb	1	; () banked
 23727  001DA8  6FBA               	movwf	_calibLevel& (0+255),b
 23728                           
 23729                           ; BSR set to: 1
 23730                           ;DisplayProtocol.h: 455: numCortes = 1;
 23731  001DAA  0E00               	movlw	0
 23732  001DAC  0100               	movlb	0	; () banked
 23733  001DAE  6FD1               	movwf	(_numCortes+1)& (0+255),b
 23734  001DB0  0E01               	movlw	1
 23735  001DB2  6FD0               	movwf	_numCortes& (0+255),b
 23736                           
 23737                           ; BSR set to: 0
 23738                           ;DisplayProtocol.h: 456: processState = 0;
 23739  001DB4  0E00               	movlw	0
 23740  001DB6  0100               	movlb	0	; () banked
 23741  001DB8  6FB5               	movwf	(_processState+1)& (0+255),b
 23742  001DBA  0E00               	movlw	0
 23743  001DBC  6FB4               	movwf	_processState& (0+255),b
 23744                           
 23745                           ; BSR set to: 0
 23746                           ;DisplayProtocol.h: 457: processTimer = 0;
 23747  001DBE  0E00               	movlw	0
 23748  001DC0  6E37               	movwf	_processTimer,c
 23749  001DC2  0E00               	movlw	0
 23750  001DC4  6E38               	movwf	_processTimer+1,c
 23751  001DC6  0E00               	movlw	0
 23752  001DC8  6E39               	movwf	_processTimer+2,c
 23753  001DCA  0E00               	movlw	0
 23754  001DCC  6E3A               	movwf	_processTimer+3,c
 23755                           
 23756                           ; BSR set to: 0
 23757                           ;DisplayProtocol.h: 459: actualScreen = tempLastScreen;
 23758  001DCE  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 23759                           
 23760                           ; BSR set to: 0
 23761                           ;DisplayProtocol.h: 460: chanValf = (float)0.50f;;
 23762  001DD2  0E00               	movlw	0
 23763  001DD4  0101               	movlb	1	; () banked
 23764  001DD6  6FB1               	movwf	_chanValf& (0+255),b
 23765  001DD8  0E00               	movlw	0
 23766  001DDA  0101               	movlb	1	; () banked
 23767  001DDC  6FB2               	movwf	(_chanValf+1)& (0+255),b
 23768  001DDE  0E3F               	movlw	63
 23769  001DE0  0101               	movlb	1	; () banked
 23770  001DE2  6FB3               	movwf	(_chanValf+2)& (0+255),b
 23771                           
 23772                           ; BSR set to: 1
 23773                           ;DisplayProtocol.h: 461: desintegrator();
 23774  001DE4  ECB9  F01A         	call	i1_desintegrator	;wreg free
 23775                           
 23776                           ;DisplayProtocol.h: 462: LATCbits.LATC4 = 1;
 23777  001DE8  888B               	bsf	3979,4,c	;volatile
 23778                           
 23779                           ;DisplayProtocol.h: 463: processStarted = 1;
 23780  001DEA  0E01               	movlw	1
 23781  001DEC  0100               	movlb	0	; () banked
 23782  001DEE  6FC4               	movwf	_processStarted& (0+255),b
 23783                           
 23784                           ;DisplayProtocol.h: 464: }else if(calibLevel == 1) {
 23785  001DF0  0012               	return	
 23786  001DF2                     i1l8784:
 23787  001DF2  0101               	movlb	1	; () banked
 23788  001DF4  05BA               	decf	_calibLevel& (0+255),w,b
 23789  001DF6  A4D8               	btfss	status,2,c
 23790  001DF8  D069               	goto	i1l8806
 23791                           
 23792                           ; BSR set to: 1
 23793                           ;DisplayProtocol.h: 465: tempVelocidadMasa2 = (float)chanValf / tiXcorte;
 23794  001DFA  C1B1  F072         	movff	_chanValf,i1___ftdiv@f1
 23795  001DFE  C1B2  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23796  001E02  C1B3  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23797  001E06  C195  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23798  001E0A  C196  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23799  001E0E  C197  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23800  001E12  EC23  F01F         	call	i1___ftdiv	;wreg free
 23801  001E16  C072  F1A0         	movff	?i1___ftdiv,_tempVelocidadMasa2
 23802  001E1A  C073  F1A1         	movff	?i1___ftdiv+1,_tempVelocidadMasa2+1
 23803  001E1E  C074  F1A2         	movff	?i1___ftdiv+2,_tempVelocidadMasa2+2
 23804                           
 23805                           ;DisplayProtocol.h: 466: tiXcorte = (float)0.25f / tempVelocidadMasa2;
 23806  001E22  0E00               	movlw	0
 23807  001E24  0100               	movlb	0	; () banked
 23808  001E26  6F72               	movwf	i1___ftdiv@f1& (0+255),b
 23809  001E28  0E80               	movlw	128
 23810  001E2A  0100               	movlb	0	; () banked
 23811  001E2C  6F73               	movwf	(i1___ftdiv@f1+1)& (0+255),b
 23812  001E2E  0E3E               	movlw	62
 23813  001E30  0100               	movlb	0	; () banked
 23814  001E32  6F74               	movwf	(i1___ftdiv@f1+2)& (0+255),b
 23815  001E34  C1A0  F075         	movff	_tempVelocidadMasa2,i1___ftdiv@f2
 23816  001E38  C1A1  F076         	movff	_tempVelocidadMasa2+1,i1___ftdiv@f2+1
 23817  001E3C  C1A2  F077         	movff	_tempVelocidadMasa2+2,i1___ftdiv@f2+2
 23818  001E40  EC23  F01F         	call	i1___ftdiv	;wreg free
 23819  001E44  C072  F195         	movff	?i1___ftdiv,_tiXcorte
 23820  001E48  C073  F196         	movff	?i1___ftdiv+1,_tiXcorte+1
 23821  001E4C  C074  F197         	movff	?i1___ftdiv+2,_tiXcorte+2
 23822                           
 23823                           ;DisplayProtocol.h: 467: timsXcorte = (float)tiXcorte * 1000;
 23824  001E50  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 23825  001E54  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 23826  001E58  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 23827  001E5C  0E00               	movlw	0
 23828  001E5E  0100               	movlb	0	; () banked
 23829  001E60  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 23830  001E62  0E7A               	movlw	122
 23831  001E64  0100               	movlb	0	; () banked
 23832  001E66  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 23833  001E68  0E44               	movlw	68
 23834  001E6A  0100               	movlb	0	; () banked
 23835  001E6C  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 23836  001E6E  ECCE  F01D         	call	i1___ftmul	;wreg free
 23837  001E72  C068  F059         	movff	?i1___ftmul,_timsXcorte
 23838  001E76  C069  F05A         	movff	?i1___ftmul+1,_timsXcorte+1
 23839  001E7A  C06A  F05B         	movff	?i1___ftmul+2,_timsXcorte+2
 23840                           
 23841                           ;DisplayProtocol.h: 468: calibLevel = 2;
 23842  001E7E  0E02               	movlw	2
 23843  001E80  0101               	movlb	1	; () banked
 23844  001E82  6FBA               	movwf	_calibLevel& (0+255),b
 23845                           
 23846                           ; BSR set to: 1
 23847                           ;DisplayProtocol.h: 469: numCortes = 1;
 23848  001E84  0E00               	movlw	0
 23849  001E86  0100               	movlb	0	; () banked
 23850  001E88  6FD1               	movwf	(_numCortes+1)& (0+255),b
 23851  001E8A  0E01               	movlw	1
 23852  001E8C  6FD0               	movwf	_numCortes& (0+255),b
 23853                           
 23854                           ; BSR set to: 0
 23855                           ;DisplayProtocol.h: 470: processState = 0;
 23856  001E8E  0E00               	movlw	0
 23857  001E90  0100               	movlb	0	; () banked
 23858  001E92  6FB5               	movwf	(_processState+1)& (0+255),b
 23859  001E94  0E00               	movlw	0
 23860  001E96  6FB4               	movwf	_processState& (0+255),b
 23861                           
 23862                           ; BSR set to: 0
 23863                           ;DisplayProtocol.h: 471: processTimer = 0;
 23864  001E98  0E00               	movlw	0
 23865  001E9A  6E37               	movwf	_processTimer,c
 23866  001E9C  0E00               	movlw	0
 23867  001E9E  6E38               	movwf	_processTimer+1,c
 23868  001EA0  0E00               	movlw	0
 23869  001EA2  6E39               	movwf	_processTimer+2,c
 23870  001EA4  0E00               	movlw	0
 23871  001EA6  6E3A               	movwf	_processTimer+3,c
 23872                           
 23873                           ; BSR set to: 0
 23874                           ;DisplayProtocol.h: 473: actualScreen = tempLastScreen;
 23875  001EA8  C0C8  F1B9         	movff	_tempLastScreen,_actualScreen
 23876                           
 23877                           ; BSR set to: 0
 23878                           ;DisplayProtocol.h: 474: chanValf = (float)0.25f;
 23879  001EAC  0E00               	movlw	0
 23880  001EAE  0101               	movlb	1	; () banked
 23881  001EB0  6FB1               	movwf	_chanValf& (0+255),b
 23882  001EB2  0E80               	movlw	128
 23883  001EB4  0101               	movlb	1	; () banked
 23884  001EB6  6FB2               	movwf	(_chanValf+1)& (0+255),b
 23885  001EB8  0E3E               	movlw	62
 23886  001EBA  0101               	movlb	1	; () banked
 23887  001EBC  6FB3               	movwf	(_chanValf+2)& (0+255),b
 23888                           
 23889                           ; BSR set to: 1
 23890                           ;DisplayProtocol.h: 475: desintegrator();
 23891  001EBE  ECB9  F01A         	call	i1_desintegrator	;wreg free
 23892                           
 23893                           ;DisplayProtocol.h: 476: LATCbits.LATC4 = 1;
 23894  001EC2  888B               	bsf	3979,4,c	;volatile
 23895                           
 23896                           ;DisplayProtocol.h: 477: processStarted = 1;
 23897  001EC4  0E01               	movlw	1
 23898  001EC6  0100               	movlb	0	; () banked
 23899  001EC8  6FC4               	movwf	_processStarted& (0+255),b
 23900                           
 23901                           ;DisplayProtocol.h: 478: }else if(calibLevel == 2) {
 23902  001ECA  0012               	return	
 23903  001ECC                     i1l8806:
 23904  001ECC  0E02               	movlw	2
 23905  001ECE  0101               	movlb	1	; () banked
 23906  001ED0  19BA               	xorwf	_calibLevel& (0+255),w,b
 23907  001ED2  A4D8               	btfss	status,2,c
 23908  001ED4  0012               	return	
 23909                           
 23910                           ; BSR set to: 1
 23911                           ;DisplayProtocol.h: 479: tempVelocidadMasa3 = (float)chanValf / tiXcorte;
 23912  001ED6  C1B1  F072         	movff	_chanValf,i1___ftdiv@f1
 23913  001EDA  C1B2  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23914  001EDE  C1B3  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23915  001EE2  C195  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23916  001EE6  C196  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23917  001EEA  C197  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23918  001EEE  EC23  F01F         	call	i1___ftdiv	;wreg free
 23919  001EF2  C072  F192         	movff	?i1___ftdiv,_tempVelocidadMasa3
 23920  001EF6  C073  F193         	movff	?i1___ftdiv+1,_tempVelocidadMasa3+1
 23921  001EFA  C074  F194         	movff	?i1___ftdiv+2,_tempVelocidadMasa3+2
 23922                           
 23923                           ;DisplayProtocol.h: 480: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 23924  001EFE  C1A0  F06B         	movff	_tempVelocidadMasa2,i1___ftadd@f2
 23925  001F02  C1A1  F06C         	movff	_tempVelocidadMasa2+1,i1___ftadd@f2+1
 23926  001F06  C1A2  F06D         	movff	_tempVelocidadMasa2+2,i1___ftadd@f2+2
 23927  001F0A  C19D  F068         	movff	_tempVelocidadMasa1,i1___ftadd@f1
 23928  001F0E  C19E  F069         	movff	_tempVelocidadMasa1+1,i1___ftadd@f1+1
 23929  001F12  C19F  F06A         	movff	_tempVelocidadMasa1+2,i1___ftadd@f1+2
 23930  001F16  EC20  F015         	call	i1___ftadd	;wreg free
 23931  001F1A  C068  F090         	movff	?i1___ftadd,i1_longPressENTER$3238
 23932  001F1E  C069  F091         	movff	?i1___ftadd+1,i1_longPressENTER$3238+1
 23933  001F22  C06A  F092         	movff	?i1___ftadd+2,i1_longPressENTER$3238+2
 23934                           
 23935                           ;DisplayProtocol.h: 480: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 23936  001F26  C090  F068         	movff	i1_longPressENTER$3238,i1___ftadd@f1
 23937  001F2A  C091  F069         	movff	i1_longPressENTER$3238+1,i1___ftadd@f1+1
 23938  001F2E  C092  F06A         	movff	i1_longPressENTER$3238+2,i1___ftadd@f1+2
 23939  001F32  C192  F06B         	movff	_tempVelocidadMasa3,i1___ftadd@f2
 23940  001F36  C193  F06C         	movff	_tempVelocidadMasa3+1,i1___ftadd@f2+1
 23941  001F3A  C194  F06D         	movff	_tempVelocidadMasa3+2,i1___ftadd@f2+2
 23942  001F3E  EC20  F015         	call	i1___ftadd	;wreg free
 23943  001F42  C068  F08D         	movff	?i1___ftadd,i1longPressENTER@temp
 23944  001F46  C069  F08E         	movff	?i1___ftadd+1,i1longPressENTER@temp+1
 23945  001F4A  C06A  F08F         	movff	?i1___ftadd+2,i1longPressENTER@temp+2
 23946                           
 23947                           ;DisplayProtocol.h: 481: chanValf = (float)temp / 3.0f;
 23948  001F4E  C08D  F072         	movff	i1longPressENTER@temp,i1___ftdiv@f1
 23949  001F52  C08E  F073         	movff	i1longPressENTER@temp+1,i1___ftdiv@f1+1
 23950  001F56  C08F  F074         	movff	i1longPressENTER@temp+2,i1___ftdiv@f1+2
 23951  001F5A  0E00               	movlw	0
 23952  001F5C  0100               	movlb	0	; () banked
 23953  001F5E  6F75               	movwf	i1___ftdiv@f2& (0+255),b
 23954  001F60  0E40               	movlw	64
 23955  001F62  0100               	movlb	0	; () banked
 23956  001F64  6F76               	movwf	(i1___ftdiv@f2+1)& (0+255),b
 23957  001F66  0E40               	movlw	64
 23958  001F68  0100               	movlb	0	; () banked
 23959  001F6A  6F77               	movwf	(i1___ftdiv@f2+2)& (0+255),b
 23960  001F6C  EC23  F01F         	call	i1___ftdiv	;wreg free
 23961  001F70  C072  F1B1         	movff	?i1___ftdiv,_chanValf
 23962  001F74  C073  F1B2         	movff	?i1___ftdiv+1,_chanValf+1
 23963  001F78  C074  F1B3         	movff	?i1___ftdiv+2,_chanValf+2
 23964                           
 23965                           ;DisplayProtocol.h: 482: numCortes = tempNumCortes;
 23966  001F7C  C0D2  F0D0         	movff	_tempNumCortes,_numCortes
 23967  001F80  C0D3  F0D1         	movff	_tempNumCortes+1,_numCortes+1
 23968                           
 23969                           ;DisplayProtocol.h: 483: calcVars2ti();
 23970  001F84  EC2A  F036         	call	i1_calcVars2ti	;wreg free
 23971                           
 23972                           ;DisplayProtocol.h: 484: calibMode = 0;
 23973  001F88  0E00               	movlw	0
 23974  001F8A  0100               	movlb	0	; () banked
 23975  001F8C  6FBB               	movwf	_calibMode& (0+255),b
 23976                           
 23977                           ; BSR set to: 0
 23978                           ;DisplayProtocol.h: 485: confirmEdition(!processStarted);
 23979  001F8E  0100               	movlb	0	; () banked
 23980  001F90  51C4               	movf	_processStarted& (0+255),w,b
 23981  001F92  A4D8               	btfss	status,2,c
 23982  001F94  D002               	goto	i1u1259_20
 23983  001F96  0E01               	movlw	1
 23984  001F98  D001               	goto	i1u1260_20
 23985  001F9A                     i1u1259_20:
 23986  001F9A  0E00               	movlw	0
 23987  001F9C                     i1u1260_20:
 23988  001F9C  EC43  F02D         	call	i1_confirmEdition
 23989  001FA0  0012               	return	
 23990  001FA2                     __end_ofi1_longPressENTER:
 23991                           	opt stack 0
 23992                           pclatu	equ	0xFFB
 23993                           pclath	equ	0xFFA
 23994                           tblptru	equ	0xFF8
 23995                           tblptrh	equ	0xFF7
 23996                           tblptrl	equ	0xFF6
 23997                           tablat	equ	0xFF5
 23998                           prodh	equ	0xFF4
 23999                           prodl	equ	0xFF3
 24000                           intcon	equ	0xFF2
 24001                           postinc0	equ	0xFEE
 24002                           fsr0h	equ	0xFEA
 24003                           fsr0l	equ	0xFE9
 24004                           wreg	equ	0xFE8
 24005                           postdec1	equ	0xFE5
 24006                           fsr1h	equ	0xFE2
 24007                           fsr1l	equ	0xFE1
 24008                           bsr	equ	0xFE0
 24009                           indf2	equ	0xFDF
 24010                           postinc2	equ	0xFDE
 24011                           postdec2	equ	0xFDD
 24012                           plusw2	equ	0xFDB
 24013                           fsr2h	equ	0xFDA
 24014                           fsr2l	equ	0xFD9
 24015                           status	equ	0xFD8
 24016                           
 24017 ;; *************** function i1_integrator *****************
 24018 ;; Defined at:
 24019 ;;		line 61 in file "source/DisplayProtocol.h"
 24020 ;; Parameters:    Size  Location     Type
 24021 ;;		None
 24022 ;; Auto vars:     Size  Location     Type
 24023 ;;  integrator      4   39[BANK0 ] long 
 24024 ;;  integrator      4   35[BANK0 ] long 
 24025 ;;  integrator      2   43[BANK0 ] int 
 24026 ;; Return value:  Size  Location     Type
 24027 ;;                  1    wreg      void 
 24028 ;; Registers used:
 24029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24030 ;; Tracked objects:
 24031 ;;		On entry : 0/0
 24032 ;;		On exit  : 0/0
 24033 ;;		Unchanged: 0/0
 24034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24035 ;;      Params:         0       0       0       0       0       0       0
 24036 ;;      Locals:         0      10       0       0       0       0       0
 24037 ;;      Temps:          0       2       0       0       0       0       0
 24038 ;;      Totals:         0      12       0       0       0       0       0
 24039 ;;Total ram usage:       12 bytes
 24040 ;; Hardware stack levels used:    1
 24041 ;; Hardware stack levels required when called:    6
 24042 ;; This function calls:
 24043 ;;		i1___altoft
 24044 ;;		i1___ftdiv
 24045 ;;		i1___lmul
 24046 ;; This function is called by:
 24047 ;;		i1_longPressENTER
 24048 ;; This function uses a non-reentrant model
 24049 ;;
 24050                           
 24051                           	psect	text99
 24052  00433C                     __ptext99:
 24053                           	opt stack 0
 24054  00433C                     i1_integrator:
 24055                           	opt stack 11
 24056                           
 24057                           ;DisplayProtocol.h: 62: long acum = 0;
 24058                           
 24059                           ;incstack = 0
 24060  00433C  0E00               	movlw	0
 24061  00433E  0100               	movlb	0	; () banked
 24062  004340  6F83               	movwf	i1integrator@acum& (0+255),b
 24063  004342  0E00               	movlw	0
 24064  004344  6F84               	movwf	(i1integrator@acum+1)& (0+255),b
 24065  004346  0E00               	movlw	0
 24066  004348  6F85               	movwf	(i1integrator@acum+2)& (0+255),b
 24067  00434A  0E00               	movlw	0
 24068  00434C  6F86               	movwf	(i1integrator@acum+3)& (0+255),b
 24069                           
 24070                           ;DisplayProtocol.h: 63: long temp = 0;
 24071  00434E  0E00               	movlw	0
 24072  004350  0100               	movlb	0	; () banked
 24073  004352  6F87               	movwf	i1integrator@temp& (0+255),b
 24074  004354  0E00               	movlw	0
 24075  004356  6F88               	movwf	(i1integrator@temp+1)& (0+255),b
 24076  004358  0E00               	movlw	0
 24077  00435A  6F89               	movwf	(i1integrator@temp+2)& (0+255),b
 24078  00435C  0E00               	movlw	0
 24079  00435E  6F8A               	movwf	(i1integrator@temp+3)& (0+255),b
 24080                           
 24081                           ;DisplayProtocol.h: 64: int i;
 24082                           ;DisplayProtocol.h: 65: for(i = 0; i < 6; i++) {
 24083  004360  0E00               	movlw	0
 24084  004362  0100               	movlb	0	; () banked
 24085  004364  6F8C               	movwf	(i1integrator@i+1)& (0+255),b
 24086  004366  0E00               	movlw	0
 24087  004368  6F8B               	movwf	i1integrator@i& (0+255),b
 24088  00436A                     i1l7412:
 24089                           
 24090                           ; BSR set to: 0
 24091  00436A  0100               	movlb	0	; () banked
 24092  00436C  BF8C               	btfsc	(i1integrator@i+1)& (0+255),7,b
 24093  00436E  D008               	goto	i1l7416
 24094  004370  0100               	movlb	0	; () banked
 24095  004372  518C               	movf	(i1integrator@i+1)& (0+255),w,b
 24096  004374  E152               	bnz	i1l7424
 24097  004376  0E06               	movlw	6
 24098  004378  0100               	movlb	0	; () banked
 24099  00437A  5D8B               	subwf	i1integrator@i& (0+255),w,b
 24100  00437C  B0D8               	btfsc	status,0,c
 24101  00437E  D04D               	goto	i1l7424
 24102  004380                     i1l7416:
 24103                           
 24104                           ; BSR set to: 0
 24105                           ;DisplayProtocol.h: 66: temp = (long)chanValdig[i]*exp10[i];
 24106  004380  0EA3               	movlw	low _chanValdig
 24107  004382  0100               	movlb	0	; () banked
 24108  004384  258B               	addwf	i1integrator@i& (0+255),w,b
 24109  004386  6ED9               	movwf	fsr2l,c
 24110  004388  0E01               	movlw	high _chanValdig
 24111  00438A  0100               	movlb	0	; () banked
 24112  00438C  218C               	addwfc	(i1integrator@i+1)& (0+255),w,b
 24113  00438E  6EDA               	movwf	fsr2h,c
 24114  004390  50DF               	movf	indf2,w,c
 24115  004392  0100               	movlb	0	; () banked
 24116  004394  6F60               	movwf	i1___lmul@multiplier& (0+255),b
 24117  004396  0E00               	movlw	0
 24118  004398  BF60               	btfsc	i1___lmul@multiplier& (0+255),7,b
 24119  00439A  0EFF               	movlw	-1
 24120  00439C  6F61               	movwf	(i1___lmul@multiplier+1)& (0+255),b
 24121  00439E  6F62               	movwf	(i1___lmul@multiplier+2)& (0+255),b
 24122  0043A0  6F63               	movwf	(i1___lmul@multiplier+3)& (0+255),b
 24123  0043A2  0E77               	movlw	low _exp10
 24124  0043A4  0100               	movlb	0	; () banked
 24125  0043A6  6F81               	movwf	??i1_integrator& (0+255),b
 24126  0043A8  0E01               	movlw	high _exp10
 24127  0043AA  0100               	movlb	0	; () banked
 24128  0043AC  6F82               	movwf	(??i1_integrator+1)& (0+255),b
 24129  0043AE  90D8               	bcf	status,0,c
 24130  0043B0  0100               	movlb	0	; () banked
 24131  0043B2  358B               	rlcf	i1integrator@i& (0+255),w,b
 24132  0043B4  6ED9               	movwf	fsr2l,c
 24133  0043B6  0100               	movlb	0	; () banked
 24134  0043B8  358C               	rlcf	(i1integrator@i+1)& (0+255),w,b
 24135  0043BA  6EDA               	movwf	fsr2h,c
 24136  0043BC  90D8               	bcf	status,0,c
 24137  0043BE  36D9               	rlcf	fsr2l,f,c
 24138  0043C0  36DA               	rlcf	fsr2h,f,c
 24139  0043C2  0100               	movlb	0	; () banked
 24140  0043C4  5181               	movf	??i1_integrator& (0+255),w,b
 24141  0043C6  26D9               	addwf	fsr2l,f,c
 24142  0043C8  0100               	movlb	0	; () banked
 24143  0043CA  5182               	movf	(??i1_integrator+1)& (0+255),w,b
 24144  0043CC  22DA               	addwfc	fsr2h,f,c
 24145  0043CE  CFDE F064          	movff	postinc2,i1___lmul@multiplicand
 24146  0043D2  CFDE F065          	movff	postinc2,i1___lmul@multiplicand+1
 24147  0043D6  CFDE F066          	movff	postinc2,i1___lmul@multiplicand+2
 24148  0043DA  CFDE F067          	movff	postinc2,i1___lmul@multiplicand+3
 24149  0043DE  EC7A  F034         	call	i1___lmul	;wreg free
 24150  0043E2  C060  F087         	movff	?i1___lmul,i1integrator@temp
 24151  0043E6  C061  F088         	movff	?i1___lmul+1,i1integrator@temp+1
 24152  0043EA  C062  F089         	movff	?i1___lmul+2,i1integrator@temp+2
 24153  0043EE  C063  F08A         	movff	?i1___lmul+3,i1integrator@temp+3
 24154                           
 24155                           ;DisplayProtocol.h: 67: acum += temp;
 24156  0043F2  0100               	movlb	0	; () banked
 24157  0043F4  5187               	movf	i1integrator@temp& (0+255),w,b
 24158  0043F6  0100               	movlb	0	; () banked
 24159  0043F8  2783               	addwf	i1integrator@acum& (0+255),f,b
 24160  0043FA  0100               	movlb	0	; () banked
 24161  0043FC  5188               	movf	(i1integrator@temp+1)& (0+255),w,b
 24162  0043FE  0100               	movlb	0	; () banked
 24163  004400  2384               	addwfc	(i1integrator@acum+1)& (0+255),f,b
 24164  004402  0100               	movlb	0	; () banked
 24165  004404  5189               	movf	(i1integrator@temp+2)& (0+255),w,b
 24166  004406  0100               	movlb	0	; () banked
 24167  004408  2385               	addwfc	(i1integrator@acum+2)& (0+255),f,b
 24168  00440A  0100               	movlb	0	; () banked
 24169  00440C  518A               	movf	(i1integrator@temp+3)& (0+255),w,b
 24170  00440E  0100               	movlb	0	; () banked
 24171  004410  2386               	addwfc	(i1integrator@acum+3)& (0+255),f,b
 24172                           
 24173                           ; BSR set to: 0
 24174  004412  0100               	movlb	0	; () banked
 24175  004414  4B8B               	infsnz	i1integrator@i& (0+255),f,b
 24176  004416  2B8C               	incf	(i1integrator@i+1)& (0+255),f,b
 24177  004418  D7A8               	goto	i1l7412
 24178  00441A                     i1l7424:
 24179                           
 24180                           ; BSR set to: 0
 24181                           ;DisplayProtocol.h: 68: }
 24182                           ;DisplayProtocol.h: 69: chanValf = (float)acum / 1000;
 24183  00441A  C083  F068         	movff	i1integrator@acum,i1___altoft@c
 24184  00441E  C084  F069         	movff	i1integrator@acum+1,i1___altoft@c+1
 24185  004422  C085  F06A         	movff	i1integrator@acum+2,i1___altoft@c+2
 24186  004426  C086  F06B         	movff	i1integrator@acum+3,i1___altoft@c+3
 24187  00442A  ECE9  F02E         	call	i1___altoft	;wreg free
 24188  00442E  C068  F072         	movff	?i1___altoft,i1___ftdiv@f1
 24189  004432  C069  F073         	movff	?i1___altoft+1,i1___ftdiv@f1+1
 24190  004436  C06A  F074         	movff	?i1___altoft+2,i1___ftdiv@f1+2
 24191  00443A  0E00               	movlw	0
 24192  00443C  0100               	movlb	0	; () banked
 24193  00443E  6F75               	movwf	i1___ftdiv@f2& (0+255),b
 24194  004440  0E7A               	movlw	122
 24195  004442  0100               	movlb	0	; () banked
 24196  004444  6F76               	movwf	(i1___ftdiv@f2+1)& (0+255),b
 24197  004446  0E44               	movlw	68
 24198  004448  0100               	movlb	0	; () banked
 24199  00444A  6F77               	movwf	(i1___ftdiv@f2+2)& (0+255),b
 24200  00444C  EC23  F01F         	call	i1___ftdiv	;wreg free
 24201  004450  C072  F1B1         	movff	?i1___ftdiv,_chanValf
 24202  004454  C073  F1B2         	movff	?i1___ftdiv+1,_chanValf+1
 24203  004458  C074  F1B3         	movff	?i1___ftdiv+2,_chanValf+2
 24204  00445C  0012               	return		;funcret
 24205  00445E                     __end_ofi1_integrator:
 24206                           	opt stack 0
 24207                           pclatu	equ	0xFFB
 24208                           pclath	equ	0xFFA
 24209                           tblptru	equ	0xFF8
 24210                           tblptrh	equ	0xFF7
 24211                           tblptrl	equ	0xFF6
 24212                           tablat	equ	0xFF5
 24213                           prodh	equ	0xFF4
 24214                           prodl	equ	0xFF3
 24215                           intcon	equ	0xFF2
 24216                           postinc0	equ	0xFEE
 24217                           fsr0h	equ	0xFEA
 24218                           fsr0l	equ	0xFE9
 24219                           wreg	equ	0xFE8
 24220                           postdec1	equ	0xFE5
 24221                           fsr1h	equ	0xFE2
 24222                           fsr1l	equ	0xFE1
 24223                           bsr	equ	0xFE0
 24224                           indf2	equ	0xFDF
 24225                           postinc2	equ	0xFDE
 24226                           postdec2	equ	0xFDD
 24227                           plusw2	equ	0xFDB
 24228                           fsr2h	equ	0xFDA
 24229                           fsr2l	equ	0xFD9
 24230                           status	equ	0xFD8
 24231                           
 24232 ;; *************** function i1___altoft *****************
 24233 ;; Defined at:
 24234 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
 24235 ;; Parameters:    Size  Location     Type
 24236 ;;  c               4    8[BANK0 ] long 
 24237 ;; Auto vars:     Size  Location     Type
 24238 ;;  __altoft        1   17[BANK0 ] unsigned char 
 24239 ;;  __altoft        1   16[BANK0 ] unsigned char 
 24240 ;; Return value:  Size  Location     Type
 24241 ;;                  3    8[BANK0 ] float 
 24242 ;; Registers used:
 24243 ;;		wreg, status,2, status,0, cstack
 24244 ;; Tracked objects:
 24245 ;;		On entry : 0/0
 24246 ;;		On exit  : 0/0
 24247 ;;		Unchanged: 0/0
 24248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24249 ;;      Params:         0       4       0       0       0       0       0
 24250 ;;      Locals:         0       2       0       0       0       0       0
 24251 ;;      Temps:          0       4       0       0       0       0       0
 24252 ;;      Totals:         0      10       0       0       0       0       0
 24253 ;;Total ram usage:       10 bytes
 24254 ;; Hardware stack levels used:    1
 24255 ;; Hardware stack levels required when called:    5
 24256 ;; This function calls:
 24257 ;;		i1___ftpack
 24258 ;; This function is called by:
 24259 ;;		i1_integrator
 24260 ;; This function uses a non-reentrant model
 24261 ;;
 24262                           
 24263                           	psect	text100
 24264  005DD2                     __ptext100:
 24265                           	opt stack 0
 24266  005DD2                     i1___altoft:
 24267                           	opt stack 11
 24268                           
 24269                           ;incstack = 0
 24270  005DD2  0E00               	movlw	0
 24271  005DD4  0100               	movlb	0	; () banked
 24272  005DD6  6F71               	movwf	i1___altoft@sign& (0+255),b
 24273  005DD8  0E8E               	movlw	142
 24274  005DDA  0100               	movlb	0	; () banked
 24275  005DDC  6F70               	movwf	i1___altoft@exp& (0+255),b
 24276                           
 24277                           ; BSR set to: 0
 24278  005DDE  0100               	movlb	0	; () banked
 24279  005DE0  AF6B               	btfss	(i1___altoft@c+3)& (0+255),7,b
 24280  005DE2  D015               	goto	i1l7114
 24281                           
 24282                           ; BSR set to: 0
 24283  005DE4  0100               	movlb	0	; () banked
 24284  005DE6  1F6B               	comf	(i1___altoft@c+3)& (0+255),f,b
 24285  005DE8  1F6A               	comf	(i1___altoft@c+2)& (0+255),f,b
 24286  005DEA  1F69               	comf	(i1___altoft@c+1)& (0+255),f,b
 24287  005DEC  6D68               	negf	i1___altoft@c& (0+255),b
 24288  005DEE  0E00               	movlw	0
 24289  005DF0  2369               	addwfc	(i1___altoft@c+1)& (0+255),f,b
 24290  005DF2  236A               	addwfc	(i1___altoft@c+2)& (0+255),f,b
 24291  005DF4  236B               	addwfc	(i1___altoft@c+3)& (0+255),f,b
 24292                           
 24293                           ; BSR set to: 0
 24294  005DF6  0E01               	movlw	1
 24295  005DF8  0100               	movlb	0	; () banked
 24296  005DFA  6F71               	movwf	i1___altoft@sign& (0+255),b
 24297                           
 24298                           ; BSR set to: 0
 24299  005DFC  D008               	goto	i1l7114
 24300  005DFE                     i1l7112:
 24301                           
 24302                           ; BSR set to: 0
 24303  005DFE  0100               	movlb	0	; () banked
 24304  005E00  90D8               	bcf	status,0,c
 24305  005E02  336B               	rrcf	(i1___altoft@c+3)& (0+255),f,b
 24306  005E04  336A               	rrcf	(i1___altoft@c+2)& (0+255),f,b
 24307  005E06  3369               	rrcf	(i1___altoft@c+1)& (0+255),f,b
 24308  005E08  3368               	rrcf	i1___altoft@c& (0+255),f,b
 24309  005E0A  0100               	movlb	0	; () banked
 24310  005E0C  2B70               	incf	i1___altoft@exp& (0+255),f,b
 24311  005E0E                     i1l7114:
 24312                           
 24313                           ; BSR set to: 0
 24314  005E0E  0E00               	movlw	0
 24315  005E10  0100               	movlb	0	; () banked
 24316  005E12  1568               	andwf	i1___altoft@c& (0+255),w,b
 24317  005E14  0100               	movlb	0	; () banked
 24318  005E16  6F6C               	movwf	??i1___altoft& (0+255),b
 24319  005E18  0E00               	movlw	0
 24320  005E1A  0100               	movlb	0	; () banked
 24321  005E1C  1569               	andwf	(i1___altoft@c+1)& (0+255),w,b
 24322  005E1E  0100               	movlb	0	; () banked
 24323  005E20  6F6D               	movwf	(??i1___altoft+1)& (0+255),b
 24324  005E22  0E00               	movlw	0
 24325  005E24  0100               	movlb	0	; () banked
 24326  005E26  156A               	andwf	(i1___altoft@c+2)& (0+255),w,b
 24327  005E28  0100               	movlb	0	; () banked
 24328  005E2A  6F6E               	movwf	(??i1___altoft+2)& (0+255),b
 24329  005E2C  0EFF               	movlw	255
 24330  005E2E  0100               	movlb	0	; () banked
 24331  005E30  156B               	andwf	(i1___altoft@c+3)& (0+255),w,b
 24332  005E32  0100               	movlb	0	; () banked
 24333  005E34  6F6F               	movwf	(??i1___altoft+3)& (0+255),b
 24334  005E36  0100               	movlb	0	; () banked
 24335  005E38  516C               	movf	??i1___altoft& (0+255),w,b
 24336  005E3A  0100               	movlb	0	; () banked
 24337  005E3C  116D               	iorwf	(??i1___altoft+1)& (0+255),w,b
 24338  005E3E  0100               	movlb	0	; () banked
 24339  005E40  116E               	iorwf	(??i1___altoft+2)& (0+255),w,b
 24340  005E42  0100               	movlb	0	; () banked
 24341  005E44  116F               	iorwf	(??i1___altoft+3)& (0+255),w,b
 24342  005E46  A4D8               	btfss	status,2,c
 24343  005E48  D7DA               	goto	i1l7112
 24344                           
 24345                           ; BSR set to: 0
 24346                           
 24347                           ; BSR set to: 0
 24348  005E4A  C068  F060         	movff	i1___altoft@c,i1___ftpack@arg
 24349  005E4E  C069  F061         	movff	i1___altoft@c+1,i1___ftpack@arg+1
 24350  005E52  C06A  F062         	movff	i1___altoft@c+2,i1___ftpack@arg+2
 24351  005E56  C070  F063         	movff	i1___altoft@exp,i1___ftpack@exp
 24352  005E5A  C071  F064         	movff	i1___altoft@sign,i1___ftpack@sign
 24353  005E5E  ECEF  F025         	call	i1___ftpack	;wreg free
 24354  005E62  C060  F068         	movff	?i1___ftpack,?i1___altoft
 24355  005E66  C061  F069         	movff	?i1___ftpack+1,?i1___altoft+1
 24356  005E6A  C062  F06A         	movff	?i1___ftpack+2,?i1___altoft+2
 24357  005E6E  0012               	return	
 24358  005E70                     __end_ofi1___altoft:
 24359                           	opt stack 0
 24360                           pclatu	equ	0xFFB
 24361                           pclath	equ	0xFFA
 24362                           tblptru	equ	0xFF8
 24363                           tblptrh	equ	0xFF7
 24364                           tblptrl	equ	0xFF6
 24365                           tablat	equ	0xFF5
 24366                           prodh	equ	0xFF4
 24367                           prodl	equ	0xFF3
 24368                           intcon	equ	0xFF2
 24369                           postinc0	equ	0xFEE
 24370                           fsr0h	equ	0xFEA
 24371                           fsr0l	equ	0xFE9
 24372                           wreg	equ	0xFE8
 24373                           postdec1	equ	0xFE5
 24374                           fsr1h	equ	0xFE2
 24375                           fsr1l	equ	0xFE1
 24376                           bsr	equ	0xFE0
 24377                           indf2	equ	0xFDF
 24378                           postinc2	equ	0xFDE
 24379                           postdec2	equ	0xFDD
 24380                           plusw2	equ	0xFDB
 24381                           fsr2h	equ	0xFDA
 24382                           fsr2l	equ	0xFD9
 24383                           status	equ	0xFD8
 24384                           
 24385 ;; *************** function i1_desintegrator *****************
 24386 ;; Defined at:
 24387 ;;		line 46 in file "source/DisplayProtocol.h"
 24388 ;; Parameters:    Size  Location     Type
 24389 ;;		None
 24390 ;; Auto vars:     Size  Location     Type
 24391 ;;  desintegrato    4   36[BANK0 ] long 
 24392 ;;  desintegrato    4   32[BANK0 ] long 
 24393 ;;  desintegrato    4   28[BANK0 ] long 
 24394 ;;  desintegrato    3   25[BANK0 ] float 
 24395 ;;  desintegrato    2   40[BANK0 ] int 
 24396 ;; Return value:  Size  Location     Type
 24397 ;;                  1    wreg      void 
 24398 ;; Registers used:
 24399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24400 ;; Tracked objects:
 24401 ;;		On entry : 0/0
 24402 ;;		On exit  : 0/0
 24403 ;;		Unchanged: 0/0
 24404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24405 ;;      Params:         0       0       0       0       0       0       0
 24406 ;;      Locals:         0      17       0       0       0       0       0
 24407 ;;      Temps:          0       2       0       0       0       0       0
 24408 ;;      Totals:         0      19       0       0       0       0       0
 24409 ;;Total ram usage:       19 bytes
 24410 ;; Hardware stack levels used:    1
 24411 ;; Hardware stack levels required when called:    6
 24412 ;; This function calls:
 24413 ;;		i1___aldiv
 24414 ;;		i1___ftmul
 24415 ;;		i1___fttol
 24416 ;;		i1___lmul
 24417 ;; This function is called by:
 24418 ;;		i1_pressENTER
 24419 ;;		i1_longPressENTER
 24420 ;; This function uses a non-reentrant model
 24421 ;;
 24422                           
 24423                           	psect	text101
 24424  003572                     __ptext101:
 24425                           	opt stack 0
 24426  003572                     i1_desintegrator:
 24427                           	opt stack 11
 24428                           
 24429                           ;DisplayProtocol.h: 47: chanValSection = 5;
 24430                           
 24431                           ;incstack = 0
 24432  003572  0E05               	movlw	5
 24433  003574  0101               	movlb	1	; () banked
 24434  003576  6F9B               	movwf	_chanValSection& (0+255),b
 24435                           
 24436                           ; BSR set to: 1
 24437                           ;DisplayProtocol.h: 48: float temp = (float)chanValf*1000;
 24438  003578  C1B1  F068         	movff	_chanValf,i1___ftmul@f1
 24439  00357C  C1B2  F069         	movff	_chanValf+1,i1___ftmul@f1+1
 24440  003580  C1B3  F06A         	movff	_chanValf+2,i1___ftmul@f1+2
 24441  003584  0E00               	movlw	0
 24442  003586  0100               	movlb	0	; () banked
 24443  003588  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 24444  00358A  0E7A               	movlw	122
 24445  00358C  0100               	movlb	0	; () banked
 24446  00358E  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 24447  003590  0E44               	movlw	68
 24448  003592  0100               	movlb	0	; () banked
 24449  003594  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 24450  003596  ECCE  F01D         	call	i1___ftmul	;wreg free
 24451  00359A  C068  F079         	movff	?i1___ftmul,i1desintegrator@temp
 24452  00359E  C069  F07A         	movff	?i1___ftmul+1,i1desintegrator@temp+1
 24453  0035A2  C06A  F07B         	movff	?i1___ftmul+2,i1desintegrator@temp+2
 24454                           
 24455                           ;DisplayProtocol.h: 49: long tempL = (long)temp;
 24456  0035A6  C079  F060         	movff	i1desintegrator@temp,i1___fttol@f1
 24457  0035AA  C07A  F061         	movff	i1desintegrator@temp+1,i1___fttol@f1+1
 24458  0035AE  C07B  F062         	movff	i1desintegrator@temp+2,i1___fttol@f1+2
 24459  0035B2  EC6B  F020         	call	i1___fttol	;wreg free
 24460  0035B6  C060  F07C         	movff	?i1___fttol,i1desintegrator@tempL
 24461  0035BA  C061  F07D         	movff	?i1___fttol+1,i1desintegrator@tempL+1
 24462  0035BE  C062  F07E         	movff	?i1___fttol+2,i1desintegrator@tempL+2
 24463  0035C2  C063  F07F         	movff	?i1___fttol+3,i1desintegrator@tempL+3
 24464                           
 24465                           ;DisplayProtocol.h: 50: long temp2 = 0;
 24466  0035C6  0E00               	movlw	0
 24467  0035C8  0100               	movlb	0	; () banked
 24468  0035CA  6F84               	movwf	i1desintegrator@temp2& (0+255),b
 24469  0035CC  0E00               	movlw	0
 24470  0035CE  6F85               	movwf	(i1desintegrator@temp2+1)& (0+255),b
 24471  0035D0  0E00               	movlw	0
 24472  0035D2  6F86               	movwf	(i1desintegrator@temp2+2)& (0+255),b
 24473  0035D4  0E00               	movlw	0
 24474  0035D6  6F87               	movwf	(i1desintegrator@temp2+3)& (0+255),b
 24475                           
 24476                           ;DisplayProtocol.h: 51: long temp3 = 0;
 24477  0035D8  0E00               	movlw	0
 24478  0035DA  0100               	movlb	0	; () banked
 24479  0035DC  6F80               	movwf	i1desintegrator@temp3& (0+255),b
 24480  0035DE  0E00               	movlw	0
 24481  0035E0  6F81               	movwf	(i1desintegrator@temp3+1)& (0+255),b
 24482  0035E2  0E00               	movlw	0
 24483  0035E4  6F82               	movwf	(i1desintegrator@temp3+2)& (0+255),b
 24484  0035E6  0E00               	movlw	0
 24485  0035E8  6F83               	movwf	(i1desintegrator@temp3+3)& (0+255),b
 24486                           
 24487                           ;DisplayProtocol.h: 52: int i;
 24488                           ;DisplayProtocol.h: 53: for(i = 0; i < 6; i++) {
 24489  0035EA  0E00               	movlw	0
 24490  0035EC  0100               	movlb	0	; () banked
 24491  0035EE  6F89               	movwf	(i1desintegrator@i+1)& (0+255),b
 24492  0035F0  0E00               	movlw	0
 24493  0035F2  6F88               	movwf	i1desintegrator@i& (0+255),b
 24494                           
 24495                           ; BSR set to: 0
 24496  0035F4  0100               	movlb	0	; () banked
 24497  0035F6  BF89               	btfsc	(i1desintegrator@i+1)& (0+255),7,b
 24498  0035F8  D00A               	goto	i1l7400
 24499  0035FA  0100               	movlb	0	; () banked
 24500  0035FC  5189               	movf	(i1desintegrator@i+1)& (0+255),w,b
 24501  0035FE  E106               	bnz	i1u966_20
 24502  003600  0E06               	movlw	6
 24503  003602  0100               	movlb	0	; () banked
 24504  003604  5D88               	subwf	i1desintegrator@i& (0+255),w,b
 24505  003606  B0D8               	btfsc	status,0,c
 24506  003608  0012               	return	
 24507  00360A  D001               	goto	i1l7400
 24508  00360C                     i1u966_20:
 24509                           
 24510                           ; BSR set to: 0
 24511  00360C  0012               	return	
 24512  00360E                     i1l7400:
 24513                           
 24514                           ; BSR set to: 0
 24515                           ;DisplayProtocol.h: 54: temp2 = tempL/exp10[i];
 24516  00360E  C07C  F060         	movff	i1desintegrator@tempL,i1___aldiv@dividend
 24517  003612  C07D  F061         	movff	i1desintegrator@tempL+1,i1___aldiv@dividend+1
 24518  003616  C07E  F062         	movff	i1desintegrator@tempL+2,i1___aldiv@dividend+2
 24519  00361A  C07F  F063         	movff	i1desintegrator@tempL+3,i1___aldiv@dividend+3
 24520  00361E  0E77               	movlw	low _exp10
 24521  003620  0100               	movlb	0	; () banked
 24522  003622  6F77               	movwf	??i1_desintegrator& (0+255),b
 24523  003624  0E01               	movlw	high _exp10
 24524  003626  0100               	movlb	0	; () banked
 24525  003628  6F78               	movwf	(??i1_desintegrator+1)& (0+255),b
 24526  00362A  90D8               	bcf	status,0,c
 24527  00362C  0100               	movlb	0	; () banked
 24528  00362E  3588               	rlcf	i1desintegrator@i& (0+255),w,b
 24529  003630  6ED9               	movwf	fsr2l,c
 24530  003632  0100               	movlb	0	; () banked
 24531  003634  3589               	rlcf	(i1desintegrator@i+1)& (0+255),w,b
 24532  003636  6EDA               	movwf	fsr2h,c
 24533  003638  90D8               	bcf	status,0,c
 24534  00363A  36D9               	rlcf	fsr2l,f,c
 24535  00363C  36DA               	rlcf	fsr2h,f,c
 24536  00363E  0100               	movlb	0	; () banked
 24537  003640  5177               	movf	??i1_desintegrator& (0+255),w,b
 24538  003642  26D9               	addwf	fsr2l,f,c
 24539  003644  0100               	movlb	0	; () banked
 24540  003646  5178               	movf	(??i1_desintegrator+1)& (0+255),w,b
 24541  003648  22DA               	addwfc	fsr2h,f,c
 24542  00364A  CFDE F064          	movff	postinc2,i1___aldiv@divisor
 24543  00364E  CFDE F065          	movff	postinc2,i1___aldiv@divisor+1
 24544  003652  CFDE F066          	movff	postinc2,i1___aldiv@divisor+2
 24545  003656  CFDE F067          	movff	postinc2,i1___aldiv@divisor+3
 24546  00365A  ECBC  F022         	call	i1___aldiv	;wreg free
 24547  00365E  C060  F084         	movff	?i1___aldiv,i1desintegrator@temp2
 24548  003662  C061  F085         	movff	?i1___aldiv+1,i1desintegrator@temp2+1
 24549  003666  C062  F086         	movff	?i1___aldiv+2,i1desintegrator@temp2+2
 24550  00366A  C063  F087         	movff	?i1___aldiv+3,i1desintegrator@temp2+3
 24551                           
 24552                           ;DisplayProtocol.h: 55: temp3 = temp2*exp10[i];
 24553  00366E  0E77               	movlw	low _exp10
 24554  003670  0100               	movlb	0	; () banked
 24555  003672  6F77               	movwf	??i1_desintegrator& (0+255),b
 24556  003674  0E01               	movlw	high _exp10
 24557  003676  0100               	movlb	0	; () banked
 24558  003678  6F78               	movwf	(??i1_desintegrator+1)& (0+255),b
 24559  00367A  90D8               	bcf	status,0,c
 24560  00367C  0100               	movlb	0	; () banked
 24561  00367E  3588               	rlcf	i1desintegrator@i& (0+255),w,b
 24562  003680  6ED9               	movwf	fsr2l,c
 24563  003682  0100               	movlb	0	; () banked
 24564  003684  3589               	rlcf	(i1desintegrator@i+1)& (0+255),w,b
 24565  003686  6EDA               	movwf	fsr2h,c
 24566  003688  90D8               	bcf	status,0,c
 24567  00368A  36D9               	rlcf	fsr2l,f,c
 24568  00368C  36DA               	rlcf	fsr2h,f,c
 24569  00368E  0100               	movlb	0	; () banked
 24570  003690  5177               	movf	??i1_desintegrator& (0+255),w,b
 24571  003692  26D9               	addwf	fsr2l,f,c
 24572  003694  0100               	movlb	0	; () banked
 24573  003696  5178               	movf	(??i1_desintegrator+1)& (0+255),w,b
 24574  003698  22DA               	addwfc	fsr2h,f,c
 24575  00369A  CFDE F060          	movff	postinc2,i1___lmul@multiplier
 24576  00369E  CFDE F061          	movff	postinc2,i1___lmul@multiplier+1
 24577  0036A2  CFDE F062          	movff	postinc2,i1___lmul@multiplier+2
 24578  0036A6  CFDE F063          	movff	postinc2,i1___lmul@multiplier+3
 24579  0036AA  C084  F064         	movff	i1desintegrator@temp2,i1___lmul@multiplicand
 24580  0036AE  C085  F065         	movff	i1desintegrator@temp2+1,i1___lmul@multiplicand+1
 24581  0036B2  C086  F066         	movff	i1desintegrator@temp2+2,i1___lmul@multiplicand+2
 24582  0036B6  C087  F067         	movff	i1desintegrator@temp2+3,i1___lmul@multiplicand+3
 24583  0036BA  EC7A  F034         	call	i1___lmul	;wreg free
 24584  0036BE  C060  F080         	movff	?i1___lmul,i1desintegrator@temp3
 24585  0036C2  C061  F081         	movff	?i1___lmul+1,i1desintegrator@temp3+1
 24586  0036C6  C062  F082         	movff	?i1___lmul+2,i1desintegrator@temp3+2
 24587  0036CA  C063  F083         	movff	?i1___lmul+3,i1desintegrator@temp3+3
 24588                           
 24589                           ;DisplayProtocol.h: 56: chanValdig[i] = temp2;
 24590  0036CE  0EA3               	movlw	low _chanValdig
 24591  0036D0  0100               	movlb	0	; () banked
 24592  0036D2  2588               	addwf	i1desintegrator@i& (0+255),w,b
 24593  0036D4  6ED9               	movwf	fsr2l,c
 24594  0036D6  0E01               	movlw	high _chanValdig
 24595  0036D8  0100               	movlb	0	; () banked
 24596  0036DA  2189               	addwfc	(i1desintegrator@i+1)& (0+255),w,b
 24597  0036DC  6EDA               	movwf	fsr2h,c
 24598  0036DE  C084  FFDF         	movff	i1desintegrator@temp2,indf2
 24599                           
 24600                           ; BSR set to: 0
 24601                           ;DisplayProtocol.h: 57: tempL -= temp3;
 24602  0036E2  0100               	movlb	0	; () banked
 24603  0036E4  5180               	movf	i1desintegrator@temp3& (0+255),w,b
 24604  0036E6  0100               	movlb	0	; () banked
 24605  0036E8  5F7C               	subwf	i1desintegrator@tempL& (0+255),f,b
 24606  0036EA  0100               	movlb	0	; () banked
 24607  0036EC  5181               	movf	(i1desintegrator@temp3+1)& (0+255),w,b
 24608  0036EE  0100               	movlb	0	; () banked
 24609  0036F0  5B7D               	subwfb	(i1desintegrator@tempL+1)& (0+255),f,b
 24610  0036F2  0100               	movlb	0	; () banked
 24611  0036F4  5182               	movf	(i1desintegrator@temp3+2)& (0+255),w,b
 24612  0036F6  0100               	movlb	0	; () banked
 24613  0036F8  5B7E               	subwfb	(i1desintegrator@tempL+2)& (0+255),f,b
 24614  0036FA  0100               	movlb	0	; () banked
 24615  0036FC  5183               	movf	(i1desintegrator@temp3+3)& (0+255),w,b
 24616  0036FE  0100               	movlb	0	; () banked
 24617  003700  5B7F               	subwfb	(i1desintegrator@tempL+3)& (0+255),f,b
 24618                           
 24619                           ; BSR set to: 0
 24620  003702  0100               	movlb	0	; () banked
 24621  003704  4B88               	infsnz	i1desintegrator@i& (0+255),f,b
 24622  003706  2B89               	incf	(i1desintegrator@i+1)& (0+255),f,b
 24623                           
 24624                           ; BSR set to: 0
 24625  003708  0100               	movlb	0	; () banked
 24626  00370A  BF89               	btfsc	(i1desintegrator@i+1)& (0+255),7,b
 24627  00370C  D780               	goto	i1l7400
 24628  00370E  0100               	movlb	0	; () banked
 24629  003710  5189               	movf	(i1desintegrator@i+1)& (0+255),w,b
 24630  003712  E101               	bnz	i1l559
 24631  003714  D775               	goto	L8
 24632  003716                     i1l559:
 24633                           
 24634                           ; BSR set to: 0
 24635  003716  0012               	return		;funcret
 24636  003718                     __end_ofi1_desintegrator:
 24637                           	opt stack 0
 24638                           pclatu	equ	0xFFB
 24639                           pclath	equ	0xFFA
 24640                           tblptru	equ	0xFF8
 24641                           tblptrh	equ	0xFF7
 24642                           tblptrl	equ	0xFF6
 24643                           tablat	equ	0xFF5
 24644                           prodh	equ	0xFF4
 24645                           prodl	equ	0xFF3
 24646                           intcon	equ	0xFF2
 24647                           postinc0	equ	0xFEE
 24648                           fsr0h	equ	0xFEA
 24649                           fsr0l	equ	0xFE9
 24650                           wreg	equ	0xFE8
 24651                           postdec1	equ	0xFE5
 24652                           fsr1h	equ	0xFE2
 24653                           fsr1l	equ	0xFE1
 24654                           bsr	equ	0xFE0
 24655                           indf2	equ	0xFDF
 24656                           postinc2	equ	0xFDE
 24657                           postdec2	equ	0xFDD
 24658                           plusw2	equ	0xFDB
 24659                           fsr2h	equ	0xFDA
 24660                           fsr2l	equ	0xFD9
 24661                           status	equ	0xFD8
 24662                           
 24663 ;; *************** function i1___lmul *****************
 24664 ;; Defined at:
 24665 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
 24666 ;; Parameters:    Size  Location     Type
 24667 ;;  multiplier      4    0[BANK0 ] unsigned long 
 24668 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 24669 ;; Auto vars:     Size  Location     Type
 24670 ;;  __lmul          4    8[BANK0 ] unsigned long 
 24671 ;; Return value:  Size  Location     Type
 24672 ;;                  4    0[BANK0 ] unsigned long 
 24673 ;; Registers used:
 24674 ;;		wreg, status,2, status,0
 24675 ;; Tracked objects:
 24676 ;;		On entry : 0/0
 24677 ;;		On exit  : 0/0
 24678 ;;		Unchanged: 0/0
 24679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24680 ;;      Params:         0       8       0       0       0       0       0
 24681 ;;      Locals:         0       4       0       0       0       0       0
 24682 ;;      Temps:          0       0       0       0       0       0       0
 24683 ;;      Totals:         0      12       0       0       0       0       0
 24684 ;;Total ram usage:       12 bytes
 24685 ;; Hardware stack levels used:    1
 24686 ;; Hardware stack levels required when called:    4
 24687 ;; This function calls:
 24688 ;;		Nothing
 24689 ;; This function is called by:
 24690 ;;		i1_desintegrator
 24691 ;;		i1_integrator
 24692 ;; This function uses a non-reentrant model
 24693 ;;
 24694                           
 24695                           	psect	text102
 24696  0068F4                     __ptext102:
 24697                           	opt stack 0
 24698  0068F4                     i1___lmul:
 24699                           	opt stack 12
 24700                           
 24701                           ; BSR set to: 0
 24702                           ;incstack = 0
 24703  0068F4  0E00               	movlw	0
 24704  0068F6  0100               	movlb	0	; () banked
 24705  0068F8  6F68               	movwf	i1___lmul@product& (0+255),b
 24706  0068FA  0E00               	movlw	0
 24707  0068FC  6F69               	movwf	(i1___lmul@product+1)& (0+255),b
 24708  0068FE  0E00               	movlw	0
 24709  006900  6F6A               	movwf	(i1___lmul@product+2)& (0+255),b
 24710  006902  0E00               	movlw	0
 24711  006904  6F6B               	movwf	(i1___lmul@product+3)& (0+255),b
 24712  006906                     i1l7052:
 24713                           
 24714                           ; BSR set to: 0
 24715  006906  0100               	movlb	0	; () banked
 24716  006908  A160               	btfss	i1___lmul@multiplier& (0+255),0,b
 24717  00690A  D010               	goto	i1l7056
 24718                           
 24719                           ; BSR set to: 0
 24720  00690C  0100               	movlb	0	; () banked
 24721  00690E  5164               	movf	i1___lmul@multiplicand& (0+255),w,b
 24722  006910  0100               	movlb	0	; () banked
 24723  006912  2768               	addwf	i1___lmul@product& (0+255),f,b
 24724  006914  0100               	movlb	0	; () banked
 24725  006916  5165               	movf	(i1___lmul@multiplicand+1)& (0+255),w,b
 24726  006918  0100               	movlb	0	; () banked
 24727  00691A  2369               	addwfc	(i1___lmul@product+1)& (0+255),f,b
 24728  00691C  0100               	movlb	0	; () banked
 24729  00691E  5166               	movf	(i1___lmul@multiplicand+2)& (0+255),w,b
 24730  006920  0100               	movlb	0	; () banked
 24731  006922  236A               	addwfc	(i1___lmul@product+2)& (0+255),f,b
 24732  006924  0100               	movlb	0	; () banked
 24733  006926  5167               	movf	(i1___lmul@multiplicand+3)& (0+255),w,b
 24734  006928  0100               	movlb	0	; () banked
 24735  00692A  236B               	addwfc	(i1___lmul@product+3)& (0+255),f,b
 24736  00692C                     i1l7056:
 24737                           
 24738                           ; BSR set to: 0
 24739  00692C  0100               	movlb	0	; () banked
 24740  00692E  90D8               	bcf	status,0,c
 24741  006930  3764               	rlcf	i1___lmul@multiplicand& (0+255),f,b
 24742  006932  3765               	rlcf	(i1___lmul@multiplicand+1)& (0+255),f,b
 24743  006934  3766               	rlcf	(i1___lmul@multiplicand+2)& (0+255),f,b
 24744  006936  3767               	rlcf	(i1___lmul@multiplicand+3)& (0+255),f,b
 24745                           
 24746                           ; BSR set to: 0
 24747  006938  0100               	movlb	0	; () banked
 24748  00693A  90D8               	bcf	status,0,c
 24749  00693C  3363               	rrcf	(i1___lmul@multiplier+3)& (0+255),f,b
 24750  00693E  3362               	rrcf	(i1___lmul@multiplier+2)& (0+255),f,b
 24751  006940  3361               	rrcf	(i1___lmul@multiplier+1)& (0+255),f,b
 24752  006942  3360               	rrcf	i1___lmul@multiplier& (0+255),f,b
 24753  006944  0100               	movlb	0	; () banked
 24754  006946  5160               	movf	i1___lmul@multiplier& (0+255),w,b
 24755  006948  0100               	movlb	0	; () banked
 24756  00694A  1161               	iorwf	(i1___lmul@multiplier+1)& (0+255),w,b
 24757  00694C  0100               	movlb	0	; () banked
 24758  00694E  1162               	iorwf	(i1___lmul@multiplier+2)& (0+255),w,b
 24759  006950  0100               	movlb	0	; () banked
 24760  006952  1163               	iorwf	(i1___lmul@multiplier+3)& (0+255),w,b
 24761  006954  A4D8               	btfss	status,2,c
 24762  006956  D7D7               	goto	i1l7052
 24763                           
 24764                           ; BSR set to: 0
 24765  006958  C068  F060         	movff	i1___lmul@product,?i1___lmul
 24766  00695C  C069  F061         	movff	i1___lmul@product+1,?i1___lmul+1
 24767  006960  C06A  F062         	movff	i1___lmul@product+2,?i1___lmul+2
 24768  006964  C06B  F063         	movff	i1___lmul@product+3,?i1___lmul+3
 24769                           
 24770                           ; BSR set to: 0
 24771  006968  0012               	return		;funcret
 24772  00696A                     __end_ofi1___lmul:
 24773                           	opt stack 0
 24774                           pclatu	equ	0xFFB
 24775                           pclath	equ	0xFFA
 24776                           tblptru	equ	0xFF8
 24777                           tblptrh	equ	0xFF7
 24778                           tblptrl	equ	0xFF6
 24779                           tablat	equ	0xFF5
 24780                           prodh	equ	0xFF4
 24781                           prodl	equ	0xFF3
 24782                           intcon	equ	0xFF2
 24783                           postinc0	equ	0xFEE
 24784                           fsr0h	equ	0xFEA
 24785                           fsr0l	equ	0xFE9
 24786                           wreg	equ	0xFE8
 24787                           postdec1	equ	0xFE5
 24788                           fsr1h	equ	0xFE2
 24789                           fsr1l	equ	0xFE1
 24790                           bsr	equ	0xFE0
 24791                           indf2	equ	0xFDF
 24792                           postinc2	equ	0xFDE
 24793                           postdec2	equ	0xFDD
 24794                           plusw2	equ	0xFDB
 24795                           fsr2h	equ	0xFDA
 24796                           fsr2l	equ	0xFD9
 24797                           status	equ	0xFD8
 24798                           
 24799 ;; *************** function i1___fttol *****************
 24800 ;; Defined at:
 24801 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 24802 ;; Parameters:    Size  Location     Type
 24803 ;;  f1              3    0[BANK0 ] float 
 24804 ;; Auto vars:     Size  Location     Type
 24805 ;;  __fttol         4   10[BANK0 ] unsigned long 
 24806 ;;  __fttol         1   14[BANK0 ] unsigned char 
 24807 ;;  __fttol         1    9[BANK0 ] unsigned char 
 24808 ;; Return value:  Size  Location     Type
 24809 ;;                  4    0[BANK0 ] long 
 24810 ;; Registers used:
 24811 ;;		wreg, status,2, status,0
 24812 ;; Tracked objects:
 24813 ;;		On entry : 0/0
 24814 ;;		On exit  : 0/0
 24815 ;;		Unchanged: 0/0
 24816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24817 ;;      Params:         0       4       0       0       0       0       0
 24818 ;;      Locals:         0       6       0       0       0       0       0
 24819 ;;      Temps:          0       5       0       0       0       0       0
 24820 ;;      Totals:         0      15       0       0       0       0       0
 24821 ;;Total ram usage:       15 bytes
 24822 ;; Hardware stack levels used:    1
 24823 ;; Hardware stack levels required when called:    4
 24824 ;; This function calls:
 24825 ;;		Nothing
 24826 ;; This function is called by:
 24827 ;;		i1_desintegrator
 24828 ;; This function uses a non-reentrant model
 24829 ;;
 24830                           
 24831                           	psect	text103
 24832  0040D6                     __ptext103:
 24833                           	opt stack 0
 24834  0040D6                     i1___fttol:
 24835                           	opt stack 12
 24836                           
 24837                           ; BSR set to: 0
 24838                           ;incstack = 0
 24839  0040D6  C062  F064         	movff	i1___fttol@f1+2,??i1___fttol
 24840  0040DA  0100               	movlb	0	; () banked
 24841  0040DC  6B65               	clrf	(??i1___fttol+1)& (0+255),b
 24842  0040DE  6B66               	clrf	(??i1___fttol+2)& (0+255),b
 24843  0040E0  0100               	movlb	0	; () banked
 24844  0040E2  3561               	rlcf	(i1___fttol@f1+1)& (0+255),w,b
 24845  0040E4  0100               	movlb	0	; () banked
 24846  0040E6  3764               	rlcf	??i1___fttol& (0+255),f,b
 24847  0040E8  E301               	bnc	u920_21
 24848  0040EA  8165               	bsf	(??i1___fttol+1)& (0+255),0,b
 24849  0040EC                     u920_21:
 24850  0040EC  0100               	movlb	0	; () banked
 24851  0040EE  5164               	movf	??i1___fttol& (0+255),w,b
 24852  0040F0  0100               	movlb	0	; () banked
 24853  0040F2  6F6E               	movwf	i1___fttol@exp1& (0+255),b
 24854  0040F4  0100               	movlb	0	; () banked
 24855  0040F6  516E               	movf	i1___fttol@exp1& (0+255),w,b
 24856  0040F8  A4D8               	btfss	status,2,c
 24857  0040FA  D00A               	goto	i1l7126
 24858                           
 24859                           ; BSR set to: 0
 24860  0040FC  0E00               	movlw	0
 24861  0040FE  0100               	movlb	0	; () banked
 24862  004100  6F60               	movwf	?i1___fttol& (0+255),b
 24863  004102  0E00               	movlw	0
 24864  004104  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 24865  004106  0E00               	movlw	0
 24866  004108  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 24867  00410A  0E00               	movlw	0
 24868  00410C  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 24869                           
 24870                           ; BSR set to: 0
 24871  00410E  0012               	return	
 24872  004110                     i1l7126:
 24873                           
 24874                           ; BSR set to: 0
 24875  004110  0E17               	movlw	23
 24876  004112  0100               	movlb	0	; () banked
 24877  004114  6F64               	movwf	??i1___fttol& (0+255),b
 24878  004116  C060  F065         	movff	i1___fttol@f1,??i1___fttol+1
 24879  00411A  C061  F066         	movff	i1___fttol@f1+1,??i1___fttol+2
 24880  00411E  C062  F067         	movff	i1___fttol@f1+2,??i1___fttol+3
 24881  004122  0100               	movlb	0	; () banked
 24882  004124  2964               	incf	??i1___fttol& (0+255),w,b
 24883  004126  0100               	movlb	0	; () banked
 24884  004128  6F68               	movwf	(??i1___fttol+4)& (0+255),b
 24885  00412A  D005               	goto	i1u922_20
 24886  00412C                     i1u922_25:
 24887  00412C  0100               	movlb	0	; () banked
 24888  00412E  90D8               	bcf	status,0,c
 24889  004130  3367               	rrcf	(??i1___fttol+3)& (0+255),f,b
 24890  004132  3366               	rrcf	(??i1___fttol+2)& (0+255),f,b
 24891  004134  3365               	rrcf	(??i1___fttol+1)& (0+255),f,b
 24892  004136                     i1u922_20:
 24893  004136  0100               	movlb	0	; () banked
 24894  004138  2F68               	decfsz	(??i1___fttol+4)& (0+255),f,b
 24895  00413A  D7F8               	goto	i1u922_25
 24896  00413C  0100               	movlb	0	; () banked
 24897  00413E  5165               	movf	(??i1___fttol+1)& (0+255),w,b
 24898  004140  0100               	movlb	0	; () banked
 24899  004142  6F69               	movwf	i1___fttol@sign1& (0+255),b
 24900                           
 24901                           ; BSR set to: 0
 24902  004144  0100               	movlb	0	; () banked
 24903  004146  8F61               	bsf	(i1___fttol@f1+1)& (0+255),7,b
 24904                           
 24905                           ; BSR set to: 0
 24906  004148  0EFF               	movlw	255
 24907  00414A  0100               	movlb	0	; () banked
 24908  00414C  1760               	andwf	i1___fttol@f1& (0+255),f,b
 24909  00414E  0EFF               	movlw	255
 24910  004150  0100               	movlb	0	; () banked
 24911  004152  1761               	andwf	(i1___fttol@f1+1)& (0+255),f,b
 24912  004154  0E00               	movlw	0
 24913  004156  0100               	movlb	0	; () banked
 24914  004158  1762               	andwf	(i1___fttol@f1+2)& (0+255),f,b
 24915                           
 24916                           ; BSR set to: 0
 24917  00415A  0100               	movlb	0	; () banked
 24918  00415C  5160               	movf	i1___fttol@f1& (0+255),w,b
 24919  00415E  0100               	movlb	0	; () banked
 24920  004160  6F6A               	movwf	i1___fttol@lval& (0+255),b
 24921  004162  0100               	movlb	0	; () banked
 24922  004164  5161               	movf	(i1___fttol@f1+1)& (0+255),w,b
 24923  004166  0100               	movlb	0	; () banked
 24924  004168  6F6B               	movwf	(i1___fttol@lval+1)& (0+255),b
 24925  00416A  0100               	movlb	0	; () banked
 24926  00416C  5162               	movf	(i1___fttol@f1+2)& (0+255),w,b
 24927  00416E  0100               	movlb	0	; () banked
 24928  004170  6F6C               	movwf	(i1___fttol@lval+2)& (0+255),b
 24929  004172  0100               	movlb	0	; () banked
 24930  004174  6B6D               	clrf	(i1___fttol@lval+3)& (0+255),b
 24931                           
 24932                           ; BSR set to: 0
 24933  004176  0E8E               	movlw	142
 24934  004178  0100               	movlb	0	; () banked
 24935  00417A  5F6E               	subwf	i1___fttol@exp1& (0+255),f,b
 24936                           
 24937                           ; BSR set to: 0
 24938  00417C  0100               	movlb	0	; () banked
 24939  00417E  AF6E               	btfss	i1___fttol@exp1& (0+255),7,b
 24940  004180  D01A               	goto	i1l7148
 24941                           
 24942                           ; BSR set to: 0
 24943  004182  0100               	movlb	0	; () banked
 24944  004184  516E               	movf	i1___fttol@exp1& (0+255),w,b
 24945  004186  0A80               	xorlw	128
 24946  004188  0F8F               	addlw	143
 24947  00418A  B0D8               	btfsc	status,0,c
 24948  00418C  D00A               	goto	i1l7144
 24949                           
 24950                           ; BSR set to: 0
 24951  00418E  0E00               	movlw	0
 24952  004190  0100               	movlb	0	; () banked
 24953  004192  6F60               	movwf	?i1___fttol& (0+255),b
 24954  004194  0E00               	movlw	0
 24955  004196  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 24956  004198  0E00               	movlw	0
 24957  00419A  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 24958  00419C  0E00               	movlw	0
 24959  00419E  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 24960                           
 24961                           ; BSR set to: 0
 24962  0041A0  0012               	return	
 24963  0041A2                     i1l7144:
 24964                           
 24965                           ; BSR set to: 0
 24966  0041A2  0100               	movlb	0	; () banked
 24967  0041A4  90D8               	bcf	status,0,c
 24968  0041A6  336D               	rrcf	(i1___fttol@lval+3)& (0+255),f,b
 24969  0041A8  336C               	rrcf	(i1___fttol@lval+2)& (0+255),f,b
 24970  0041AA  336B               	rrcf	(i1___fttol@lval+1)& (0+255),f,b
 24971  0041AC  336A               	rrcf	i1___fttol@lval& (0+255),f,b
 24972                           
 24973                           ; BSR set to: 0
 24974  0041AE  0100               	movlb	0	; () banked
 24975  0041B0  3F6E               	incfsz	i1___fttol@exp1& (0+255),f,b
 24976  0041B2  D7F7               	goto	i1l7144
 24977                           
 24978                           ; BSR set to: 0
 24979  0041B4  D01B               	goto	i1l7158
 24980  0041B6                     i1l7148:
 24981                           
 24982                           ; BSR set to: 0
 24983  0041B6  0E17               	movlw	23
 24984  0041B8  0100               	movlb	0	; () banked
 24985  0041BA  656E               	cpfsgt	i1___fttol@exp1& (0+255),b
 24986  0041BC  D012               	goto	i1l7156
 24987                           
 24988                           ; BSR set to: 0
 24989  0041BE  0E00               	movlw	0
 24990  0041C0  0100               	movlb	0	; () banked
 24991  0041C2  6F60               	movwf	?i1___fttol& (0+255),b
 24992  0041C4  0E00               	movlw	0
 24993  0041C6  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 24994  0041C8  0E00               	movlw	0
 24995  0041CA  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 24996  0041CC  0E00               	movlw	0
 24997  0041CE  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 24998                           
 24999                           ; BSR set to: 0
 25000  0041D0  0012               	return	
 25001  0041D2                     i1l7154:
 25002                           
 25003                           ; BSR set to: 0
 25004  0041D2  0100               	movlb	0	; () banked
 25005  0041D4  90D8               	bcf	status,0,c
 25006  0041D6  376A               	rlcf	i1___fttol@lval& (0+255),f,b
 25007  0041D8  376B               	rlcf	(i1___fttol@lval+1)& (0+255),f,b
 25008  0041DA  376C               	rlcf	(i1___fttol@lval+2)& (0+255),f,b
 25009  0041DC  376D               	rlcf	(i1___fttol@lval+3)& (0+255),f,b
 25010  0041DE  0100               	movlb	0	; () banked
 25011  0041E0  076E               	decf	i1___fttol@exp1& (0+255),f,b
 25012  0041E2                     i1l7156:
 25013                           
 25014                           ; BSR set to: 0
 25015  0041E2  0100               	movlb	0	; () banked
 25016  0041E4  516E               	movf	i1___fttol@exp1& (0+255),w,b
 25017  0041E6  0100               	movlb	0	; () banked
 25018  0041E8  A4D8               	btfss	status,2,c
 25019  0041EA  D7F3               	goto	i1l7154
 25020  0041EC                     i1l7158:
 25021                           
 25022                           ; BSR set to: 0
 25023  0041EC  0100               	movlb	0	; () banked
 25024  0041EE  5169               	movf	i1___fttol@sign1& (0+255),w,b
 25025  0041F0  0100               	movlb	0	; () banked
 25026  0041F2  B4D8               	btfsc	status,2,c
 25027  0041F4  D009               	goto	i1l7162
 25028                           
 25029                           ; BSR set to: 0
 25030  0041F6  0100               	movlb	0	; () banked
 25031  0041F8  1F6D               	comf	(i1___fttol@lval+3)& (0+255),f,b
 25032  0041FA  1F6C               	comf	(i1___fttol@lval+2)& (0+255),f,b
 25033  0041FC  1F6B               	comf	(i1___fttol@lval+1)& (0+255),f,b
 25034  0041FE  6D6A               	negf	i1___fttol@lval& (0+255),b
 25035  004200  0E00               	movlw	0
 25036  004202  236B               	addwfc	(i1___fttol@lval+1)& (0+255),f,b
 25037  004204  236C               	addwfc	(i1___fttol@lval+2)& (0+255),f,b
 25038  004206  236D               	addwfc	(i1___fttol@lval+3)& (0+255),f,b
 25039  004208                     i1l7162:
 25040                           
 25041                           ; BSR set to: 0
 25042  004208  C06A  F060         	movff	i1___fttol@lval,?i1___fttol
 25043  00420C  C06B  F061         	movff	i1___fttol@lval+1,?i1___fttol+1
 25044  004210  C06C  F062         	movff	i1___fttol@lval+2,?i1___fttol+2
 25045  004214  C06D  F063         	movff	i1___fttol@lval+3,?i1___fttol+3
 25046  004218  0012               	return	
 25047  00421A                     __end_ofi1___fttol:
 25048                           	opt stack 0
 25049                           pclatu	equ	0xFFB
 25050                           pclath	equ	0xFFA
 25051                           tblptru	equ	0xFF8
 25052                           tblptrh	equ	0xFF7
 25053                           tblptrl	equ	0xFF6
 25054                           tablat	equ	0xFF5
 25055                           prodh	equ	0xFF4
 25056                           prodl	equ	0xFF3
 25057                           intcon	equ	0xFF2
 25058                           postinc0	equ	0xFEE
 25059                           fsr0h	equ	0xFEA
 25060                           fsr0l	equ	0xFE9
 25061                           wreg	equ	0xFE8
 25062                           postdec1	equ	0xFE5
 25063                           fsr1h	equ	0xFE2
 25064                           fsr1l	equ	0xFE1
 25065                           bsr	equ	0xFE0
 25066                           indf2	equ	0xFDF
 25067                           postinc2	equ	0xFDE
 25068                           postdec2	equ	0xFDD
 25069                           plusw2	equ	0xFDB
 25070                           fsr2h	equ	0xFDA
 25071                           fsr2l	equ	0xFD9
 25072                           status	equ	0xFD8
 25073                           
 25074 ;; *************** function i1___aldiv *****************
 25075 ;; Defined at:
 25076 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
 25077 ;; Parameters:    Size  Location     Type
 25078 ;;  dividend        4    0[BANK0 ] long 
 25079 ;;  divisor         4    4[BANK0 ] long 
 25080 ;; Auto vars:     Size  Location     Type
 25081 ;;  __aldiv         4   10[BANK0 ] long 
 25082 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 25083 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 25084 ;; Return value:  Size  Location     Type
 25085 ;;                  4    0[BANK0 ] long 
 25086 ;; Registers used:
 25087 ;;		wreg, status,2, status,0
 25088 ;; Tracked objects:
 25089 ;;		On entry : 0/0
 25090 ;;		On exit  : 0/0
 25091 ;;		Unchanged: 0/0
 25092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25093 ;;      Params:         0       8       0       0       0       0       0
 25094 ;;      Locals:         0       6       0       0       0       0       0
 25095 ;;      Temps:          0       0       0       0       0       0       0
 25096 ;;      Totals:         0      14       0       0       0       0       0
 25097 ;;Total ram usage:       14 bytes
 25098 ;; Hardware stack levels used:    1
 25099 ;; Hardware stack levels required when called:    4
 25100 ;; This function calls:
 25101 ;;		Nothing
 25102 ;; This function is called by:
 25103 ;;		i1_desintegrator
 25104 ;; This function uses a non-reentrant model
 25105 ;;
 25106                           
 25107                           	psect	text104
 25108  004578                     __ptext104:
 25109                           	opt stack 0
 25110  004578                     i1___aldiv:
 25111                           	opt stack 12
 25112                           
 25113                           ; BSR set to: 0
 25114                           ;incstack = 0
 25115  004578  0E00               	movlw	0
 25116  00457A  0100               	movlb	0	; () banked
 25117  00457C  6F69               	movwf	i1___aldiv@sign& (0+255),b
 25118                           
 25119                           ; BSR set to: 0
 25120  00457E  0100               	movlb	0	; () banked
 25121  004580  AF67               	btfss	(i1___aldiv@divisor+3)& (0+255),7,b
 25122  004582  D00C               	goto	i1l7068
 25123                           
 25124                           ; BSR set to: 0
 25125  004584  0100               	movlb	0	; () banked
 25126  004586  1F67               	comf	(i1___aldiv@divisor+3)& (0+255),f,b
 25127  004588  1F66               	comf	(i1___aldiv@divisor+2)& (0+255),f,b
 25128  00458A  1F65               	comf	(i1___aldiv@divisor+1)& (0+255),f,b
 25129  00458C  6D64               	negf	i1___aldiv@divisor& (0+255),b
 25130  00458E  0E00               	movlw	0
 25131  004590  2365               	addwfc	(i1___aldiv@divisor+1)& (0+255),f,b
 25132  004592  2366               	addwfc	(i1___aldiv@divisor+2)& (0+255),f,b
 25133  004594  2367               	addwfc	(i1___aldiv@divisor+3)& (0+255),f,b
 25134                           
 25135                           ; BSR set to: 0
 25136  004596  0E01               	movlw	1
 25137  004598  0100               	movlb	0	; () banked
 25138  00459A  6F69               	movwf	i1___aldiv@sign& (0+255),b
 25139  00459C                     i1l7068:
 25140                           
 25141                           ; BSR set to: 0
 25142  00459C  0100               	movlb	0	; () banked
 25143  00459E  AF63               	btfss	(i1___aldiv@dividend+3)& (0+255),7,b
 25144  0045A0  D00C               	goto	i1l7074
 25145                           
 25146                           ; BSR set to: 0
 25147  0045A2  0100               	movlb	0	; () banked
 25148  0045A4  1F63               	comf	(i1___aldiv@dividend+3)& (0+255),f,b
 25149  0045A6  1F62               	comf	(i1___aldiv@dividend+2)& (0+255),f,b
 25150  0045A8  1F61               	comf	(i1___aldiv@dividend+1)& (0+255),f,b
 25151  0045AA  6D60               	negf	i1___aldiv@dividend& (0+255),b
 25152  0045AC  0E00               	movlw	0
 25153  0045AE  2361               	addwfc	(i1___aldiv@dividend+1)& (0+255),f,b
 25154  0045B0  2362               	addwfc	(i1___aldiv@dividend+2)& (0+255),f,b
 25155  0045B2  2363               	addwfc	(i1___aldiv@dividend+3)& (0+255),f,b
 25156                           
 25157                           ; BSR set to: 0
 25158  0045B4  0E01               	movlw	1
 25159  0045B6  0100               	movlb	0	; () banked
 25160  0045B8  1B69               	xorwf	i1___aldiv@sign& (0+255),f,b
 25161  0045BA                     i1l7074:
 25162                           
 25163                           ; BSR set to: 0
 25164  0045BA  0E00               	movlw	0
 25165  0045BC  0100               	movlb	0	; () banked
 25166  0045BE  6F6A               	movwf	i1___aldiv@quotient& (0+255),b
 25167  0045C0  0E00               	movlw	0
 25168  0045C2  6F6B               	movwf	(i1___aldiv@quotient+1)& (0+255),b
 25169  0045C4  0E00               	movlw	0
 25170  0045C6  6F6C               	movwf	(i1___aldiv@quotient+2)& (0+255),b
 25171  0045C8  0E00               	movlw	0
 25172  0045CA  6F6D               	movwf	(i1___aldiv@quotient+3)& (0+255),b
 25173                           
 25174                           ; BSR set to: 0
 25175  0045CC  0100               	movlb	0	; () banked
 25176  0045CE  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 25177  0045D0  0100               	movlb	0	; () banked
 25178  0045D2  1165               	iorwf	(i1___aldiv@divisor+1)& (0+255),w,b
 25179  0045D4  0100               	movlb	0	; () banked
 25180  0045D6  1166               	iorwf	(i1___aldiv@divisor+2)& (0+255),w,b
 25181  0045D8  0100               	movlb	0	; () banked
 25182  0045DA  1167               	iorwf	(i1___aldiv@divisor+3)& (0+255),w,b
 25183  0045DC  B4D8               	btfsc	status,2,c
 25184  0045DE  D042               	goto	i1l7096
 25185                           
 25186                           ; BSR set to: 0
 25187  0045E0  0E01               	movlw	1
 25188  0045E2  0100               	movlb	0	; () banked
 25189  0045E4  6F68               	movwf	i1___aldiv@counter& (0+255),b
 25190  0045E6  D008               	goto	i1l7082
 25191  0045E8                     i1l7080:
 25192                           
 25193                           ; BSR set to: 0
 25194  0045E8  0100               	movlb	0	; () banked
 25195  0045EA  90D8               	bcf	status,0,c
 25196  0045EC  3764               	rlcf	i1___aldiv@divisor& (0+255),f,b
 25197  0045EE  3765               	rlcf	(i1___aldiv@divisor+1)& (0+255),f,b
 25198  0045F0  3766               	rlcf	(i1___aldiv@divisor+2)& (0+255),f,b
 25199  0045F2  3767               	rlcf	(i1___aldiv@divisor+3)& (0+255),f,b
 25200  0045F4  0100               	movlb	0	; () banked
 25201  0045F6  2B68               	incf	i1___aldiv@counter& (0+255),f,b
 25202  0045F8                     i1l7082:
 25203                           
 25204                           ; BSR set to: 0
 25205  0045F8  0100               	movlb	0	; () banked
 25206  0045FA  AF67               	btfss	(i1___aldiv@divisor+3)& (0+255),7,b
 25207  0045FC  D7F5               	goto	i1l7080
 25208  0045FE                     i1l7084:
 25209                           
 25210                           ; BSR set to: 0
 25211  0045FE  0100               	movlb	0	; () banked
 25212  004600  90D8               	bcf	status,0,c
 25213  004602  376A               	rlcf	i1___aldiv@quotient& (0+255),f,b
 25214  004604  376B               	rlcf	(i1___aldiv@quotient+1)& (0+255),f,b
 25215  004606  376C               	rlcf	(i1___aldiv@quotient+2)& (0+255),f,b
 25216  004608  376D               	rlcf	(i1___aldiv@quotient+3)& (0+255),f,b
 25217                           
 25218                           ; BSR set to: 0
 25219  00460A  0100               	movlb	0	; () banked
 25220  00460C  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 25221  00460E  0100               	movlb	0	; () banked
 25222  004610  5D60               	subwf	i1___aldiv@dividend& (0+255),w,b
 25223  004612  0100               	movlb	0	; () banked
 25224  004614  5165               	movf	(i1___aldiv@divisor+1)& (0+255),w,b
 25225  004616  0100               	movlb	0	; () banked
 25226  004618  5961               	subwfb	(i1___aldiv@dividend+1)& (0+255),w,b
 25227  00461A  0100               	movlb	0	; () banked
 25228  00461C  5166               	movf	(i1___aldiv@divisor+2)& (0+255),w,b
 25229  00461E  0100               	movlb	0	; () banked
 25230  004620  5962               	subwfb	(i1___aldiv@dividend+2)& (0+255),w,b
 25231  004622  0100               	movlb	0	; () banked
 25232  004624  5167               	movf	(i1___aldiv@divisor+3)& (0+255),w,b
 25233  004626  0100               	movlb	0	; () banked
 25234  004628  5963               	subwfb	(i1___aldiv@dividend+3)& (0+255),w,b
 25235  00462A  A0D8               	btfss	status,0,c
 25236  00462C  D012               	goto	i1l7092
 25237                           
 25238                           ; BSR set to: 0
 25239  00462E  0100               	movlb	0	; () banked
 25240  004630  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 25241  004632  0100               	movlb	0	; () banked
 25242  004634  5F60               	subwf	i1___aldiv@dividend& (0+255),f,b
 25243  004636  0100               	movlb	0	; () banked
 25244  004638  5165               	movf	(i1___aldiv@divisor+1)& (0+255),w,b
 25245  00463A  0100               	movlb	0	; () banked
 25246  00463C  5B61               	subwfb	(i1___aldiv@dividend+1)& (0+255),f,b
 25247  00463E  0100               	movlb	0	; () banked
 25248  004640  5166               	movf	(i1___aldiv@divisor+2)& (0+255),w,b
 25249  004642  0100               	movlb	0	; () banked
 25250  004644  5B62               	subwfb	(i1___aldiv@dividend+2)& (0+255),f,b
 25251  004646  0100               	movlb	0	; () banked
 25252  004648  5167               	movf	(i1___aldiv@divisor+3)& (0+255),w,b
 25253  00464A  0100               	movlb	0	; () banked
 25254  00464C  5B63               	subwfb	(i1___aldiv@dividend+3)& (0+255),f,b
 25255                           
 25256                           ; BSR set to: 0
 25257  00464E  0100               	movlb	0	; () banked
 25258  004650  816A               	bsf	i1___aldiv@quotient& (0+255),0,b
 25259  004652                     i1l7092:
 25260                           
 25261                           ; BSR set to: 0
 25262  004652  0100               	movlb	0	; () banked
 25263  004654  90D8               	bcf	status,0,c
 25264  004656  3367               	rrcf	(i1___aldiv@divisor+3)& (0+255),f,b
 25265  004658  3366               	rrcf	(i1___aldiv@divisor+2)& (0+255),f,b
 25266  00465A  3365               	rrcf	(i1___aldiv@divisor+1)& (0+255),f,b
 25267  00465C  3364               	rrcf	i1___aldiv@divisor& (0+255),f,b
 25268                           
 25269                           ; BSR set to: 0
 25270  00465E  0100               	movlb	0	; () banked
 25271  004660  2F68               	decfsz	i1___aldiv@counter& (0+255),f,b
 25272  004662  D7CD               	goto	i1l7084
 25273  004664                     i1l7096:
 25274                           
 25275                           ; BSR set to: 0
 25276  004664  0100               	movlb	0	; () banked
 25277  004666  5169               	movf	i1___aldiv@sign& (0+255),w,b
 25278  004668  0100               	movlb	0	; () banked
 25279  00466A  B4D8               	btfsc	status,2,c
 25280  00466C  D009               	goto	i1l7100
 25281                           
 25282                           ; BSR set to: 0
 25283  00466E  0100               	movlb	0	; () banked
 25284  004670  1F6D               	comf	(i1___aldiv@quotient+3)& (0+255),f,b
 25285  004672  1F6C               	comf	(i1___aldiv@quotient+2)& (0+255),f,b
 25286  004674  1F6B               	comf	(i1___aldiv@quotient+1)& (0+255),f,b
 25287  004676  6D6A               	negf	i1___aldiv@quotient& (0+255),b
 25288  004678  0E00               	movlw	0
 25289  00467A  236B               	addwfc	(i1___aldiv@quotient+1)& (0+255),f,b
 25290  00467C  236C               	addwfc	(i1___aldiv@quotient+2)& (0+255),f,b
 25291  00467E  236D               	addwfc	(i1___aldiv@quotient+3)& (0+255),f,b
 25292  004680                     i1l7100:
 25293                           
 25294                           ; BSR set to: 0
 25295  004680  C06A  F060         	movff	i1___aldiv@quotient,?i1___aldiv
 25296  004684  C06B  F061         	movff	i1___aldiv@quotient+1,?i1___aldiv+1
 25297  004688  C06C  F062         	movff	i1___aldiv@quotient+2,?i1___aldiv+2
 25298  00468C  C06D  F063         	movff	i1___aldiv@quotient+3,?i1___aldiv+3
 25299  004690  0012               	return	
 25300  004692                     __end_ofi1___aldiv:
 25301                           	opt stack 0
 25302                           pclatu	equ	0xFFB
 25303                           pclath	equ	0xFFA
 25304                           tblptru	equ	0xFF8
 25305                           tblptrh	equ	0xFF7
 25306                           tblptrl	equ	0xFF6
 25307                           tablat	equ	0xFF5
 25308                           prodh	equ	0xFF4
 25309                           prodl	equ	0xFF3
 25310                           intcon	equ	0xFF2
 25311                           postinc0	equ	0xFEE
 25312                           fsr0h	equ	0xFEA
 25313                           fsr0l	equ	0xFE9
 25314                           wreg	equ	0xFE8
 25315                           postdec1	equ	0xFE5
 25316                           fsr1h	equ	0xFE2
 25317                           fsr1l	equ	0xFE1
 25318                           bsr	equ	0xFE0
 25319                           indf2	equ	0xFDF
 25320                           postinc2	equ	0xFDE
 25321                           postdec2	equ	0xFDD
 25322                           plusw2	equ	0xFDB
 25323                           fsr2h	equ	0xFDA
 25324                           fsr2l	equ	0xFD9
 25325                           status	equ	0xFD8
 25326                           
 25327 ;; *************** function i1_confirmEdition *****************
 25328 ;; Defined at:
 25329 ;;		line 85 in file "source/DisplayProtocol.h"
 25330 ;; Parameters:    Size  Location     Type
 25331 ;;  yes             1    wreg     unsigned char 
 25332 ;; Auto vars:     Size  Location     Type
 25333 ;;  yes             1   33[BANK0 ] unsigned char 
 25334 ;; Return value:  Size  Location     Type
 25335 ;;                  1    wreg      void 
 25336 ;; Registers used:
 25337 ;;		wreg, status,2, status,0, cstack
 25338 ;; Tracked objects:
 25339 ;;		On entry : 0/0
 25340 ;;		On exit  : 0/0
 25341 ;;		Unchanged: 0/0
 25342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25343 ;;      Params:         0       0       0       0       0       0       0
 25344 ;;      Locals:         0       1       0       0       0       0       0
 25345 ;;      Temps:          0       0       0       0       0       0       0
 25346 ;;      Totals:         0       1       0       0       0       0       0
 25347 ;;Total ram usage:        1 bytes
 25348 ;; Hardware stack levels used:    1
 25349 ;; Hardware stack levels required when called:    8
 25350 ;; This function calls:
 25351 ;;		i1_saveSysParams
 25352 ;; This function is called by:
 25353 ;;		i1_pressENTER
 25354 ;;		i1_longPressENTER
 25355 ;; This function uses a non-reentrant model
 25356 ;;
 25357                           
 25358                           	psect	text105
 25359  005A86                     __ptext105:
 25360                           	opt stack 0
 25361  005A86                     i1_confirmEdition:
 25362                           	opt stack 9
 25363                           
 25364                           ; BSR set to: 0
 25365                           ;incstack = 0
 25366                           ;i1confirmEdition@yes stored from wreg
 25367  005A86  0100               	movlb	0	; () banked
 25368  005A88  6F81               	movwf	i1confirmEdition@yes& (0+255),b
 25369                           
 25370                           ;DisplayProtocol.h: 86: switch (menuSection) {
 25371  005A8A  D04C               	goto	i1l7460
 25372  005A8C                     i1l7428:
 25373                           
 25374                           ;DisplayProtocol.h: 90: if(yes) {
 25375  005A8C  0100               	movlb	0	; () banked
 25376  005A8E  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 25377  005A90  0100               	movlb	0	; () banked
 25378  005A92  B4D8               	btfsc	status,2,c
 25379  005A94  D00C               	goto	i1l576
 25380                           
 25381                           ; BSR set to: 0
 25382                           ;DisplayProtocol.h: 91: kgXcorte = chanValf;
 25383  005A96  C1B1  F18F         	movff	_chanValf,_kgXcorte
 25384  005A9A  C1B2  F190         	movff	_chanValf+1,_kgXcorte+1
 25385  005A9E  C1B3  F191         	movff	_chanValf+2,_kgXcorte+2
 25386                           
 25387                           ; BSR set to: 0
 25388                           ;DisplayProtocol.h: 92: actualScreen = 4;
 25389  005AA2  0E04               	movlw	4
 25390  005AA4  0101               	movlb	1	; () banked
 25391  005AA6  6FB9               	movwf	_actualScreen& (0+255),b
 25392                           
 25393                           ; BSR set to: 1
 25394                           ;DisplayProtocol.h: 93: saveSysParams();
 25395  005AA8  ECAB  F030         	call	i1_saveSysParams	;wreg free
 25396                           
 25397                           ;DisplayProtocol.h: 94: }else {
 25398  005AAC  0012               	return	
 25399  005AAE                     i1l576:
 25400                           
 25401                           ; BSR set to: 0
 25402                           ;DisplayProtocol.h: 95: tempLastScreen = actualScreen;
 25403  005AAE  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 25404                           
 25405                           ; BSR set to: 0
 25406                           ;DisplayProtocol.h: 96: selSN = 1;
 25407  005AB2  0E01               	movlw	1
 25408  005AB4  0101               	movlb	1	; () banked
 25409  005AB6  6FBF               	movwf	_selSN& (0+255),b
 25410                           
 25411                           ;DisplayProtocol.h: 97: actualScreen = 10;
 25412  005AB8  0E0A               	movlw	10
 25413  005ABA  0101               	movlb	1	; () banked
 25414  005ABC  6FB9               	movwf	_actualScreen& (0+255),b
 25415                           
 25416                           ; BSR set to: 1
 25417                           ;DisplayProtocol.h: 98: }
 25418                           ;DisplayProtocol.h: 99: break;
 25419  005ABE  0012               	return	
 25420  005AC0                     i1l7438:
 25421                           
 25422                           ; BSR set to: 1
 25423                           ;DisplayProtocol.h: 101: if(yes) {
 25424  005AC0  0100               	movlb	0	; () banked
 25425  005AC2  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 25426  005AC4  0100               	movlb	0	; () banked
 25427  005AC6  B4D8               	btfsc	status,2,c
 25428  005AC8  D00A               	goto	i1l579
 25429                           
 25430                           ; BSR set to: 0
 25431                           ;DisplayProtocol.h: 102: numCortes = chanVals;
 25432  005ACA  C1B4  F0D0         	movff	_chanVals,_numCortes
 25433  005ACE  C1B5  F0D1         	movff	_chanVals+1,_numCortes+1
 25434                           
 25435                           ; BSR set to: 0
 25436                           ;DisplayProtocol.h: 103: actualScreen = 4;
 25437  005AD2  0E04               	movlw	4
 25438  005AD4  0101               	movlb	1	; () banked
 25439  005AD6  6FB9               	movwf	_actualScreen& (0+255),b
 25440                           
 25441                           ; BSR set to: 1
 25442                           ;DisplayProtocol.h: 104: saveSysParams();
 25443  005AD8  ECAB  F030         	call	i1_saveSysParams	;wreg free
 25444                           
 25445                           ;DisplayProtocol.h: 105: }else {
 25446  005ADC  0012               	return	
 25447  005ADE                     i1l579:
 25448                           
 25449                           ; BSR set to: 0
 25450                           ;DisplayProtocol.h: 106: tempLastScreen = actualScreen;
 25451  005ADE  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 25452                           
 25453                           ; BSR set to: 0
 25454                           ;DisplayProtocol.h: 107: selSN = 1;
 25455  005AE2  0E01               	movlw	1
 25456  005AE4  0101               	movlb	1	; () banked
 25457  005AE6  6FBF               	movwf	_selSN& (0+255),b
 25458                           
 25459                           ;DisplayProtocol.h: 108: actualScreen = 10;
 25460  005AE8  0E0A               	movlw	10
 25461  005AEA  0101               	movlb	1	; () banked
 25462  005AEC  6FB9               	movwf	_actualScreen& (0+255),b
 25463                           
 25464                           ; BSR set to: 1
 25465                           ;DisplayProtocol.h: 109: }
 25466                           ;DisplayProtocol.h: 110: break;
 25467  005AEE  0012               	return	
 25468  005AF0                     i1l7448:
 25469                           
 25470                           ; BSR set to: 1
 25471                           ;DisplayProtocol.h: 112: if(yes) {
 25472  005AF0  0100               	movlb	0	; () banked
 25473  005AF2  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 25474  005AF4  0100               	movlb	0	; () banked
 25475  005AF6  B4D8               	btfsc	status,2,c
 25476  005AF8  D00C               	goto	i1l582
 25477                           
 25478                           ; BSR set to: 0
 25479                           ;DisplayProtocol.h: 113: velocidadMasa = chanValf;
 25480  005AFA  C1B1  F198         	movff	_chanValf,_velocidadMasa
 25481  005AFE  C1B2  F199         	movff	_chanValf+1,_velocidadMasa+1
 25482  005B02  C1B3  F19A         	movff	_chanValf+2,_velocidadMasa+2
 25483                           
 25484                           ; BSR set to: 0
 25485                           ;DisplayProtocol.h: 114: actualScreen = 4;
 25486  005B06  0E04               	movlw	4
 25487  005B08  0101               	movlb	1	; () banked
 25488  005B0A  6FB9               	movwf	_actualScreen& (0+255),b
 25489                           
 25490                           ; BSR set to: 1
 25491                           ;DisplayProtocol.h: 115: saveSysParams();
 25492  005B0C  ECAB  F030         	call	i1_saveSysParams	;wreg free
 25493                           
 25494                           ;DisplayProtocol.h: 116: }else {
 25495  005B10  0012               	return	
 25496  005B12                     i1l582:
 25497                           
 25498                           ; BSR set to: 0
 25499                           ;DisplayProtocol.h: 117: tempLastScreen = actualScreen;
 25500  005B12  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 25501                           
 25502                           ; BSR set to: 0
 25503                           ;DisplayProtocol.h: 118: selSN = 1;
 25504  005B16  0E01               	movlw	1
 25505  005B18  0101               	movlb	1	; () banked
 25506  005B1A  6FBF               	movwf	_selSN& (0+255),b
 25507                           
 25508                           ;DisplayProtocol.h: 119: actualScreen = 10;
 25509  005B1C  0E0A               	movlw	10
 25510  005B1E  0101               	movlb	1	; () banked
 25511  005B20  6FB9               	movwf	_actualScreen& (0+255),b
 25512                           
 25513                           ; BSR set to: 1
 25514                           ;DisplayProtocol.h: 122: }
 25515                           ;DisplayProtocol.h: 123: }
 25516                           
 25517                           ; BSR set to: 1
 25518                           ;DisplayProtocol.h: 120: }
 25519                           ;DisplayProtocol.h: 121: break;
 25520  005B22  0012               	return	
 25521  005B24                     i1l7460:
 25522  005B24  0101               	movlb	1	; () banked
 25523  005B26  51BD               	movf	_menuSection& (0+255),w,b
 25524                           
 25525                           ; Switch size 1, requested type "space"
 25526                           ; Number of cases is 4, Range of values is 0 to 3
 25527                           ; switch strategies available:
 25528                           ; Name         Instructions Cycles
 25529                           ; simple_byte           13     7 (average)
 25530                           ;	Chosen strategy is simple_byte
 25531  005B28  0A00               	xorlw	0	; case 0
 25532  005B2A  B4D8               	btfsc	status,2,c
 25533  005B2C  0012               	return	
 25534  005B2E  0A01               	xorlw	1	; case 1
 25535  005B30  B4D8               	btfsc	status,2,c
 25536  005B32  D7AC               	goto	i1l7428
 25537  005B34  0A03               	xorlw	3	; case 2
 25538  005B36  B4D8               	btfsc	status,2,c
 25539  005B38  D7C3               	goto	i1l7438
 25540  005B3A  0A01               	xorlw	1	; case 3
 25541  005B3C  A4D8               	btfss	status,2,c
 25542  005B3E  0012               	return	
 25543  005B40  D7D7               	goto	i1l7448
 25544  005B42                     __end_ofi1_confirmEdition:
 25545                           	opt stack 0
 25546                           pclatu	equ	0xFFB
 25547                           pclath	equ	0xFFA
 25548                           tblptru	equ	0xFF8
 25549                           tblptrh	equ	0xFF7
 25550                           tblptrl	equ	0xFF6
 25551                           tablat	equ	0xFF5
 25552                           prodh	equ	0xFF4
 25553                           prodl	equ	0xFF3
 25554                           intcon	equ	0xFF2
 25555                           postinc0	equ	0xFEE
 25556                           fsr0h	equ	0xFEA
 25557                           fsr0l	equ	0xFE9
 25558                           wreg	equ	0xFE8
 25559                           postdec1	equ	0xFE5
 25560                           fsr1h	equ	0xFE2
 25561                           fsr1l	equ	0xFE1
 25562                           bsr	equ	0xFE0
 25563                           indf2	equ	0xFDF
 25564                           postinc2	equ	0xFDE
 25565                           postdec2	equ	0xFDD
 25566                           plusw2	equ	0xFDB
 25567                           fsr2h	equ	0xFDA
 25568                           fsr2l	equ	0xFD9
 25569                           status	equ	0xFD8
 25570                           
 25571 ;; *************** function i1___ftadd *****************
 25572 ;; Defined at:
 25573 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 25574 ;; Parameters:    Size  Location     Type
 25575 ;;  f1              3    8[BANK0 ] float 
 25576 ;;  f2              3   11[BANK0 ] float 
 25577 ;; Auto vars:     Size  Location     Type
 25578 ;;  __ftadd         1   19[BANK0 ] unsigned char 
 25579 ;;  __ftadd         1   18[BANK0 ] unsigned char 
 25580 ;;  __ftadd         1   17[BANK0 ] unsigned char 
 25581 ;; Return value:  Size  Location     Type
 25582 ;;                  3    8[BANK0 ] float 
 25583 ;; Registers used:
 25584 ;;		wreg, status,2, status,0, cstack
 25585 ;; Tracked objects:
 25586 ;;		On entry : 0/0
 25587 ;;		On exit  : 0/0
 25588 ;;		Unchanged: 0/0
 25589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25590 ;;      Params:         0       6       0       0       0       0       0
 25591 ;;      Locals:         0       3       0       0       0       0       0
 25592 ;;      Temps:          0       3       0       0       0       0       0
 25593 ;;      Totals:         0      12       0       0       0       0       0
 25594 ;;Total ram usage:       12 bytes
 25595 ;; Hardware stack levels used:    1
 25596 ;; Hardware stack levels required when called:    5
 25597 ;; This function calls:
 25598 ;;		i1___ftpack
 25599 ;; This function is called by:
 25600 ;;		i1_longPressENTER
 25601 ;; This function uses a non-reentrant model
 25602 ;;
 25603                           
 25604                           	psect	text106
 25605  002A40                     __ptext106:
 25606                           	opt stack 0
 25607  002A40                     i1___ftadd:
 25608                           	opt stack 12
 25609                           
 25610                           ;incstack = 0
 25611  002A40  C06A  F06E         	movff	i1___ftadd@f1+2,??i1___ftadd
 25612  002A44  0100               	movlb	0	; () banked
 25613  002A46  6B6F               	clrf	(??i1___ftadd+1)& (0+255),b
 25614  002A48  6B70               	clrf	(??i1___ftadd+2)& (0+255),b
 25615  002A4A  0100               	movlb	0	; () banked
 25616  002A4C  3569               	rlcf	(i1___ftadd@f1+1)& (0+255),w,b
 25617  002A4E  0100               	movlb	0	; () banked
 25618  002A50  376E               	rlcf	??i1___ftadd& (0+255),f,b
 25619  002A52  E301               	bnc	u981_21
 25620  002A54  816F               	bsf	(??i1___ftadd+1)& (0+255),0,b
 25621  002A56                     u981_21:
 25622  002A56  0100               	movlb	0	; () banked
 25623  002A58  516E               	movf	??i1___ftadd& (0+255),w,b
 25624  002A5A  0100               	movlb	0	; () banked
 25625  002A5C  6F73               	movwf	i1___ftadd@exp1& (0+255),b
 25626  002A5E  C06D  F06E         	movff	i1___ftadd@f2+2,??i1___ftadd
 25627  002A62  0100               	movlb	0	; () banked
 25628  002A64  6B6F               	clrf	(??i1___ftadd+1)& (0+255),b
 25629  002A66  6B70               	clrf	(??i1___ftadd+2)& (0+255),b
 25630  002A68  0100               	movlb	0	; () banked
 25631  002A6A  356C               	rlcf	(i1___ftadd@f2+1)& (0+255),w,b
 25632  002A6C  0100               	movlb	0	; () banked
 25633  002A6E  376E               	rlcf	??i1___ftadd& (0+255),f,b
 25634  002A70  E301               	bnc	u982_21
 25635  002A72  816F               	bsf	(??i1___ftadd+1)& (0+255),0,b
 25636  002A74                     u982_21:
 25637  002A74  0100               	movlb	0	; () banked
 25638  002A76  516E               	movf	??i1___ftadd& (0+255),w,b
 25639  002A78  0100               	movlb	0	; () banked
 25640  002A7A  6F72               	movwf	i1___ftadd@exp2& (0+255),b
 25641                           
 25642                           ; BSR set to: 0
 25643  002A7C  0100               	movlb	0	; () banked
 25644  002A7E  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25645  002A80  0100               	movlb	0	; () banked
 25646  002A82  B4D8               	btfsc	status,2,c
 25647  002A84  D011               	goto	i1l1334
 25648                           
 25649                           ; BSR set to: 0
 25650  002A86  0100               	movlb	0	; () banked
 25651  002A88  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25652  002A8A  0100               	movlb	0	; () banked
 25653  002A8C  5D73               	subwf	i1___ftadd@exp1& (0+255),w,b
 25654  002A8E  B0D8               	btfsc	status,0,c
 25655  002A90  D012               	goto	i1l7506
 25656                           
 25657                           ; BSR set to: 0
 25658  002A92  0100               	movlb	0	; () banked
 25659  002A94  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25660  002A96  0800               	sublw	0
 25661  002A98  0100               	movlb	0	; () banked
 25662  002A9A  2572               	addwf	i1___ftadd@exp2& (0+255),w,b
 25663  002A9C  0100               	movlb	0	; () banked
 25664  002A9E  6F6E               	movwf	??i1___ftadd& (0+255),b
 25665  002AA0  0E18               	movlw	24
 25666  002AA2  0100               	movlb	0	; () banked
 25667  002AA4  656E               	cpfsgt	??i1___ftadd& (0+255),b
 25668  002AA6  D007               	goto	i1l7506
 25669  002AA8                     i1l1334:
 25670                           
 25671                           ; BSR set to: 0
 25672  002AA8  C06B  F068         	movff	i1___ftadd@f2,?i1___ftadd
 25673  002AAC  C06C  F069         	movff	i1___ftadd@f2+1,?i1___ftadd+1
 25674  002AB0  C06D  F06A         	movff	i1___ftadd@f2+2,?i1___ftadd+2
 25675  002AB4  0012               	return	
 25676  002AB6                     i1l7506:
 25677                           
 25678                           ; BSR set to: 0
 25679  002AB6  0100               	movlb	0	; () banked
 25680  002AB8  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25681  002ABA  0100               	movlb	0	; () banked
 25682  002ABC  B4D8               	btfsc	status,2,c
 25683  002ABE  D011               	goto	i1l1338
 25684                           
 25685                           ; BSR set to: 0
 25686  002AC0  0100               	movlb	0	; () banked
 25687  002AC2  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25688  002AC4  0100               	movlb	0	; () banked
 25689  002AC6  5D72               	subwf	i1___ftadd@exp2& (0+255),w,b
 25690  002AC8  B0D8               	btfsc	status,0,c
 25691  002ACA  D012               	goto	i1l7512
 25692                           
 25693                           ; BSR set to: 0
 25694  002ACC  0100               	movlb	0	; () banked
 25695  002ACE  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25696  002AD0  0800               	sublw	0
 25697  002AD2  0100               	movlb	0	; () banked
 25698  002AD4  2573               	addwf	i1___ftadd@exp1& (0+255),w,b
 25699  002AD6  0100               	movlb	0	; () banked
 25700  002AD8  6F6E               	movwf	??i1___ftadd& (0+255),b
 25701  002ADA  0E18               	movlw	24
 25702  002ADC  0100               	movlb	0	; () banked
 25703  002ADE  656E               	cpfsgt	??i1___ftadd& (0+255),b
 25704  002AE0  D007               	goto	i1l7512
 25705  002AE2                     i1l1338:
 25706                           
 25707                           ; BSR set to: 0
 25708  002AE2  C068  F068         	movff	i1___ftadd@f1,?i1___ftadd
 25709  002AE6  C069  F069         	movff	i1___ftadd@f1+1,?i1___ftadd+1
 25710  002AEA  C06A  F06A         	movff	i1___ftadd@f1+2,?i1___ftadd+2
 25711  002AEE  0012               	return	
 25712  002AF0                     i1l7512:
 25713                           
 25714                           ; BSR set to: 0
 25715  002AF0  0E06               	movlw	6
 25716  002AF2  0100               	movlb	0	; () banked
 25717  002AF4  6F71               	movwf	i1___ftadd@sign& (0+255),b
 25718                           
 25719                           ; BSR set to: 0
 25720  002AF6  0100               	movlb	0	; () banked
 25721  002AF8  AF6A               	btfss	(i1___ftadd@f1+2)& (0+255),7,b
 25722  002AFA  D002               	goto	i1l7518
 25723                           
 25724                           ; BSR set to: 0
 25725  002AFC  0100               	movlb	0	; () banked
 25726  002AFE  8F71               	bsf	i1___ftadd@sign& (0+255),7,b
 25727  002B00                     i1l7518:
 25728                           
 25729                           ; BSR set to: 0
 25730  002B00  0100               	movlb	0	; () banked
 25731  002B02  AF6D               	btfss	(i1___ftadd@f2+2)& (0+255),7,b
 25732  002B04  D002               	goto	i1l1340
 25733                           
 25734                           ; BSR set to: 0
 25735  002B06  0100               	movlb	0	; () banked
 25736  002B08  8D71               	bsf	i1___ftadd@sign& (0+255),6,b
 25737  002B0A                     i1l1340:
 25738                           
 25739                           ; BSR set to: 0
 25740  002B0A  0100               	movlb	0	; () banked
 25741  002B0C  8F69               	bsf	(i1___ftadd@f1+1)& (0+255),7,b
 25742                           
 25743                           ; BSR set to: 0
 25744  002B0E  0EFF               	movlw	255
 25745  002B10  0100               	movlb	0	; () banked
 25746  002B12  1768               	andwf	i1___ftadd@f1& (0+255),f,b
 25747  002B14  0EFF               	movlw	255
 25748  002B16  0100               	movlb	0	; () banked
 25749  002B18  1769               	andwf	(i1___ftadd@f1+1)& (0+255),f,b
 25750  002B1A  0E00               	movlw	0
 25751  002B1C  0100               	movlb	0	; () banked
 25752  002B1E  176A               	andwf	(i1___ftadd@f1+2)& (0+255),f,b
 25753  002B20  0100               	movlb	0	; () banked
 25754  002B22  8F6C               	bsf	(i1___ftadd@f2+1)& (0+255),7,b
 25755                           
 25756                           ; BSR set to: 0
 25757  002B24  0EFF               	movlw	255
 25758  002B26  0100               	movlb	0	; () banked
 25759  002B28  176B               	andwf	i1___ftadd@f2& (0+255),f,b
 25760  002B2A  0EFF               	movlw	255
 25761  002B2C  0100               	movlb	0	; () banked
 25762  002B2E  176C               	andwf	(i1___ftadd@f2+1)& (0+255),f,b
 25763  002B30  0E00               	movlw	0
 25764  002B32  0100               	movlb	0	; () banked
 25765  002B34  176D               	andwf	(i1___ftadd@f2+2)& (0+255),f,b
 25766                           
 25767                           ; BSR set to: 0
 25768  002B36  0100               	movlb	0	; () banked
 25769  002B38  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25770  002B3A  0100               	movlb	0	; () banked
 25771  002B3C  5D73               	subwf	i1___ftadd@exp1& (0+255),w,b
 25772  002B3E  B0D8               	btfsc	status,0,c
 25773  002B40  D025               	goto	i1l7538
 25774  002B42                     i1l7528:
 25775                           
 25776                           ; BSR set to: 0
 25777  002B42  0100               	movlb	0	; () banked
 25778  002B44  90D8               	bcf	status,0,c
 25779  002B46  376B               	rlcf	i1___ftadd@f2& (0+255),f,b
 25780  002B48  376C               	rlcf	(i1___ftadd@f2+1)& (0+255),f,b
 25781  002B4A  376D               	rlcf	(i1___ftadd@f2+2)& (0+255),f,b
 25782  002B4C  0100               	movlb	0	; () banked
 25783  002B4E  0772               	decf	i1___ftadd@exp2& (0+255),f,b
 25784                           
 25785                           ; BSR set to: 0
 25786  002B50  0100               	movlb	0	; () banked
 25787  002B52  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25788  002B54  0100               	movlb	0	; () banked
 25789  002B56  1972               	xorwf	i1___ftadd@exp2& (0+255),w,b
 25790  002B58  B4D8               	btfsc	status,2,c
 25791  002B5A  D011               	goto	i1l7536
 25792                           
 25793                           ; BSR set to: 0
 25794  002B5C  0100               	movlb	0	; () banked
 25795  002B5E  0771               	decf	i1___ftadd@sign& (0+255),f,b
 25796  002B60  C071  F06E         	movff	i1___ftadd@sign,??i1___ftadd
 25797  002B64  0E07               	movlw	7
 25798  002B66  0100               	movlb	0	; () banked
 25799  002B68  176E               	andwf	??i1___ftadd& (0+255),f,b
 25800  002B6A  B4D8               	btfsc	status,2,c
 25801  002B6C  D008               	goto	i1l7536
 25802  002B6E  D7E9               	goto	i1l7528
 25803  002B70                     i1l7534:
 25804                           
 25805                           ; BSR set to: 0
 25806  002B70  0100               	movlb	0	; () banked
 25807  002B72  90D8               	bcf	status,0,c
 25808  002B74  336A               	rrcf	(i1___ftadd@f1+2)& (0+255),f,b
 25809  002B76  3369               	rrcf	(i1___ftadd@f1+1)& (0+255),f,b
 25810  002B78  3368               	rrcf	i1___ftadd@f1& (0+255),f,b
 25811  002B7A  0100               	movlb	0	; () banked
 25812  002B7C  2B73               	incf	i1___ftadd@exp1& (0+255),f,b
 25813  002B7E                     i1l7536:
 25814                           
 25815                           ; BSR set to: 0
 25816  002B7E  0100               	movlb	0	; () banked
 25817  002B80  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25818  002B82  0100               	movlb	0	; () banked
 25819  002B84  1973               	xorwf	i1___ftadd@exp1& (0+255),w,b
 25820  002B86  B4D8               	btfsc	status,2,c
 25821  002B88  D02B               	goto	i1l1349
 25822  002B8A  D7F2               	goto	i1l7534
 25823  002B8C                     i1l7538:
 25824                           
 25825                           ; BSR set to: 0
 25826  002B8C  0100               	movlb	0	; () banked
 25827  002B8E  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25828  002B90  0100               	movlb	0	; () banked
 25829  002B92  5D72               	subwf	i1___ftadd@exp2& (0+255),w,b
 25830  002B94  B0D8               	btfsc	status,0,c
 25831  002B96  D024               	goto	i1l1349
 25832  002B98                     i1l7540:
 25833                           
 25834                           ; BSR set to: 0
 25835  002B98  0100               	movlb	0	; () banked
 25836  002B9A  90D8               	bcf	status,0,c
 25837  002B9C  3768               	rlcf	i1___ftadd@f1& (0+255),f,b
 25838  002B9E  3769               	rlcf	(i1___ftadd@f1+1)& (0+255),f,b
 25839  002BA0  376A               	rlcf	(i1___ftadd@f1+2)& (0+255),f,b
 25840  002BA2  0100               	movlb	0	; () banked
 25841  002BA4  0773               	decf	i1___ftadd@exp1& (0+255),f,b
 25842                           
 25843                           ; BSR set to: 0
 25844  002BA6  0100               	movlb	0	; () banked
 25845  002BA8  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25846  002BAA  0100               	movlb	0	; () banked
 25847  002BAC  1972               	xorwf	i1___ftadd@exp2& (0+255),w,b
 25848  002BAE  B4D8               	btfsc	status,2,c
 25849  002BB0  D011               	goto	i1l7548
 25850                           
 25851                           ; BSR set to: 0
 25852  002BB2  0100               	movlb	0	; () banked
 25853  002BB4  0771               	decf	i1___ftadd@sign& (0+255),f,b
 25854  002BB6  C071  F06E         	movff	i1___ftadd@sign,??i1___ftadd
 25855  002BBA  0E07               	movlw	7
 25856  002BBC  0100               	movlb	0	; () banked
 25857  002BBE  176E               	andwf	??i1___ftadd& (0+255),f,b
 25858  002BC0  B4D8               	btfsc	status,2,c
 25859  002BC2  D008               	goto	i1l7548
 25860  002BC4  D7E9               	goto	i1l7540
 25861  002BC6                     i1l7546:
 25862                           
 25863                           ; BSR set to: 0
 25864  002BC6  0100               	movlb	0	; () banked
 25865  002BC8  90D8               	bcf	status,0,c
 25866  002BCA  336D               	rrcf	(i1___ftadd@f2+2)& (0+255),f,b
 25867  002BCC  336C               	rrcf	(i1___ftadd@f2+1)& (0+255),f,b
 25868  002BCE  336B               	rrcf	i1___ftadd@f2& (0+255),f,b
 25869  002BD0  0100               	movlb	0	; () banked
 25870  002BD2  2B72               	incf	i1___ftadd@exp2& (0+255),f,b
 25871  002BD4                     i1l7548:
 25872                           
 25873                           ; BSR set to: 0
 25874  002BD4  0100               	movlb	0	; () banked
 25875  002BD6  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25876  002BD8  0100               	movlb	0	; () banked
 25877  002BDA  1973               	xorwf	i1___ftadd@exp1& (0+255),w,b
 25878  002BDC  A4D8               	btfss	status,2,c
 25879  002BDE  D7F3               	goto	i1l7546
 25880  002BE0                     i1l1349:
 25881                           
 25882                           ; BSR set to: 0
 25883  002BE0  0100               	movlb	0	; () banked
 25884  002BE2  AF71               	btfss	i1___ftadd@sign& (0+255),7,b
 25885  002BE4  D012               	goto	i1l1358
 25886                           
 25887                           ; BSR set to: 0
 25888  002BE6  0EFF               	movlw	255
 25889  002BE8  0100               	movlb	0	; () banked
 25890  002BEA  1B68               	xorwf	i1___ftadd@f1& (0+255),f,b
 25891  002BEC  0EFF               	movlw	255
 25892  002BEE  0100               	movlb	0	; () banked
 25893  002BF0  1B69               	xorwf	(i1___ftadd@f1+1)& (0+255),f,b
 25894  002BF2  0EFF               	movlw	255
 25895  002BF4  0100               	movlb	0	; () banked
 25896  002BF6  1B6A               	xorwf	(i1___ftadd@f1+2)& (0+255),f,b
 25897  002BF8  0E01               	movlw	1
 25898  002BFA  0100               	movlb	0	; () banked
 25899  002BFC  2768               	addwf	i1___ftadd@f1& (0+255),f,b
 25900  002BFE  0E00               	movlw	0
 25901  002C00  0100               	movlb	0	; () banked
 25902  002C02  2369               	addwfc	(i1___ftadd@f1+1)& (0+255),f,b
 25903  002C04  0E00               	movlw	0
 25904  002C06  0100               	movlb	0	; () banked
 25905  002C08  236A               	addwfc	(i1___ftadd@f1+2)& (0+255),f,b
 25906  002C0A                     i1l1358:
 25907                           
 25908                           ; BSR set to: 0
 25909  002C0A  0100               	movlb	0	; () banked
 25910  002C0C  AD71               	btfss	i1___ftadd@sign& (0+255),6,b
 25911  002C0E  D012               	goto	i1l7554
 25912                           
 25913                           ; BSR set to: 0
 25914  002C10  0EFF               	movlw	255
 25915  002C12  0100               	movlb	0	; () banked
 25916  002C14  1B6B               	xorwf	i1___ftadd@f2& (0+255),f,b
 25917  002C16  0EFF               	movlw	255
 25918  002C18  0100               	movlb	0	; () banked
 25919  002C1A  1B6C               	xorwf	(i1___ftadd@f2+1)& (0+255),f,b
 25920  002C1C  0EFF               	movlw	255
 25921  002C1E  0100               	movlb	0	; () banked
 25922  002C20  1B6D               	xorwf	(i1___ftadd@f2+2)& (0+255),f,b
 25923  002C22  0E01               	movlw	1
 25924  002C24  0100               	movlb	0	; () banked
 25925  002C26  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 25926  002C28  0E00               	movlw	0
 25927  002C2A  0100               	movlb	0	; () banked
 25928  002C2C  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 25929  002C2E  0E00               	movlw	0
 25930  002C30  0100               	movlb	0	; () banked
 25931  002C32  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 25932  002C34                     i1l7554:
 25933                           
 25934                           ; BSR set to: 0
 25935  002C34  0E00               	movlw	0
 25936  002C36  0100               	movlb	0	; () banked
 25937  002C38  6F71               	movwf	i1___ftadd@sign& (0+255),b
 25938                           
 25939                           ; BSR set to: 0
 25940  002C3A  0100               	movlb	0	; () banked
 25941  002C3C  5168               	movf	i1___ftadd@f1& (0+255),w,b
 25942  002C3E  0100               	movlb	0	; () banked
 25943  002C40  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 25944  002C42  0100               	movlb	0	; () banked
 25945  002C44  5169               	movf	(i1___ftadd@f1+1)& (0+255),w,b
 25946  002C46  0100               	movlb	0	; () banked
 25947  002C48  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 25948  002C4A  0100               	movlb	0	; () banked
 25949  002C4C  516A               	movf	(i1___ftadd@f1+2)& (0+255),w,b
 25950  002C4E  0100               	movlb	0	; () banked
 25951  002C50  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 25952                           
 25953                           ; BSR set to: 0
 25954  002C52  0100               	movlb	0	; () banked
 25955  002C54  AF6D               	btfss	(i1___ftadd@f2+2)& (0+255),7,b
 25956  002C56  D015               	goto	i1l7564
 25957                           
 25958                           ; BSR set to: 0
 25959  002C58  0EFF               	movlw	255
 25960  002C5A  0100               	movlb	0	; () banked
 25961  002C5C  1B6B               	xorwf	i1___ftadd@f2& (0+255),f,b
 25962  002C5E  0EFF               	movlw	255
 25963  002C60  0100               	movlb	0	; () banked
 25964  002C62  1B6C               	xorwf	(i1___ftadd@f2+1)& (0+255),f,b
 25965  002C64  0EFF               	movlw	255
 25966  002C66  0100               	movlb	0	; () banked
 25967  002C68  1B6D               	xorwf	(i1___ftadd@f2+2)& (0+255),f,b
 25968  002C6A  0E01               	movlw	1
 25969  002C6C  0100               	movlb	0	; () banked
 25970  002C6E  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 25971  002C70  0E00               	movlw	0
 25972  002C72  0100               	movlb	0	; () banked
 25973  002C74  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 25974  002C76  0E00               	movlw	0
 25975  002C78  0100               	movlb	0	; () banked
 25976  002C7A  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 25977                           
 25978                           ; BSR set to: 0
 25979  002C7C  0E01               	movlw	1
 25980  002C7E  0100               	movlb	0	; () banked
 25981  002C80  6F71               	movwf	i1___ftadd@sign& (0+255),b
 25982  002C82                     i1l7564:
 25983                           
 25984                           ; BSR set to: 0
 25985  002C82  C06B  F060         	movff	i1___ftadd@f2,i1___ftpack@arg
 25986  002C86  C06C  F061         	movff	i1___ftadd@f2+1,i1___ftpack@arg+1
 25987  002C8A  C06D  F062         	movff	i1___ftadd@f2+2,i1___ftpack@arg+2
 25988  002C8E  C073  F063         	movff	i1___ftadd@exp1,i1___ftpack@exp
 25989  002C92  C071  F064         	movff	i1___ftadd@sign,i1___ftpack@sign
 25990  002C96  ECEF  F025         	call	i1___ftpack	;wreg free
 25991  002C9A  C060  F068         	movff	?i1___ftpack,?i1___ftadd
 25992  002C9E  C061  F069         	movff	?i1___ftpack+1,?i1___ftadd+1
 25993  002CA2  C062  F06A         	movff	?i1___ftpack+2,?i1___ftadd+2
 25994  002CA6  0012               	return	
 25995  002CA8                     __end_ofi1___ftadd:
 25996                           	opt stack 0
 25997                           pclatu	equ	0xFFB
 25998                           pclath	equ	0xFFA
 25999                           tblptru	equ	0xFF8
 26000                           tblptrh	equ	0xFF7
 26001                           tblptrl	equ	0xFF6
 26002                           tablat	equ	0xFF5
 26003                           prodh	equ	0xFF4
 26004                           prodl	equ	0xFF3
 26005                           intcon	equ	0xFF2
 26006                           postinc0	equ	0xFEE
 26007                           fsr0h	equ	0xFEA
 26008                           fsr0l	equ	0xFE9
 26009                           wreg	equ	0xFE8
 26010                           postdec1	equ	0xFE5
 26011                           fsr1h	equ	0xFE2
 26012                           fsr1l	equ	0xFE1
 26013                           bsr	equ	0xFE0
 26014                           indf2	equ	0xFDF
 26015                           postinc2	equ	0xFDE
 26016                           postdec2	equ	0xFDD
 26017                           plusw2	equ	0xFDB
 26018                           fsr2h	equ	0xFDA
 26019                           fsr2l	equ	0xFD9
 26020                           status	equ	0xFD8
 26021                           
 26022 ;; *************** function i1_longPressDOWN *****************
 26023 ;; Defined at:
 26024 ;;		line 212 in file "source/DisplayProtocol.h"
 26025 ;; Parameters:    Size  Location     Type
 26026 ;;		None
 26027 ;; Auto vars:     Size  Location     Type
 26028 ;;		None
 26029 ;; Return value:  Size  Location     Type
 26030 ;;                  1    wreg      void 
 26031 ;; Registers used:
 26032 ;;		wreg, status,2, status,0
 26033 ;; Tracked objects:
 26034 ;;		On entry : 0/0
 26035 ;;		On exit  : 0/0
 26036 ;;		Unchanged: 0/0
 26037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26038 ;;      Params:         0       0       0       0       0       0       0
 26039 ;;      Locals:         0       0       0       0       0       0       0
 26040 ;;      Temps:          0       0       0       0       0       0       0
 26041 ;;      Totals:         0       0       0       0       0       0       0
 26042 ;;Total ram usage:        0 bytes
 26043 ;; Hardware stack levels used:    1
 26044 ;; Hardware stack levels required when called:    4
 26045 ;; This function calls:
 26046 ;;		Nothing
 26047 ;; This function is called by:
 26048 ;;		_UARTint
 26049 ;; This function uses a non-reentrant model
 26050 ;;
 26051                           
 26052                           	psect	text107
 26053  0071E0                     __ptext107:
 26054                           	opt stack 0
 26055  0071E0                     i1_longPressDOWN:
 26056                           	opt stack 14
 26057                           
 26058                           ;DisplayProtocol.h: 213: if (!DOWNisLP) {
 26059                           
 26060                           ;incstack = 0
 26061  0071E0  5045               	movf	_DOWNisLP,w,c
 26062  0071E2  A4D8               	btfss	status,2,c
 26063  0071E4  0012               	return	
 26064                           
 26065                           ;DisplayProtocol.h: 214: DOWNisLP = 1;
 26066  0071E6  0E01               	movlw	1
 26067  0071E8  6E45               	movwf	_DOWNisLP,c
 26068                           
 26069                           ;DisplayProtocol.h: 215: if(actualScreen == 5) {
 26070  0071EA  0E05               	movlw	5
 26071  0071EC  0101               	movlb	1	; () banked
 26072  0071EE  19B9               	xorwf	_actualScreen& (0+255),w,b
 26073  0071F0  A4D8               	btfss	status,2,c
 26074  0071F2  0012               	return	
 26075                           
 26076                           ; BSR set to: 1
 26077                           ;DisplayProtocol.h: 216: if(menuSection == 2)
 26078  0071F4  0E02               	movlw	2
 26079  0071F6  0101               	movlb	1	; () banked
 26080  0071F8  19BD               	xorwf	_menuSection& (0+255),w,b
 26081  0071FA  A4D8               	btfss	status,2,c
 26082  0071FC  0012               	return	
 26083                           
 26084                           ; BSR set to: 1
 26085                           ;DisplayProtocol.h: 217: chanVals -= 10;
 26086  0071FE  0101               	movlb	1	; () banked
 26087  007200  0EF6               	movlw	246
 26088  007202  27B4               	addwf	_chanVals& (0+255),f,b
 26089  007204  0EFF               	movlw	255
 26090  007206  23B5               	addwfc	(_chanVals+1)& (0+255),f,b
 26091                           
 26092                           ; BSR set to: 1
 26093                           
 26094                           ; BSR set to: 1
 26095  007208  0012               	return	
 26096  00720A                     __end_ofi1_longPressDOWN:
 26097                           	opt stack 0
 26098                           pclatu	equ	0xFFB
 26099                           pclath	equ	0xFFA
 26100                           tblptru	equ	0xFF8
 26101                           tblptrh	equ	0xFF7
 26102                           tblptrl	equ	0xFF6
 26103                           tablat	equ	0xFF5
 26104                           prodh	equ	0xFF4
 26105                           prodl	equ	0xFF3
 26106                           intcon	equ	0xFF2
 26107                           postinc0	equ	0xFEE
 26108                           fsr0h	equ	0xFEA
 26109                           fsr0l	equ	0xFE9
 26110                           wreg	equ	0xFE8
 26111                           postdec1	equ	0xFE5
 26112                           fsr1h	equ	0xFE2
 26113                           fsr1l	equ	0xFE1
 26114                           bsr	equ	0xFE0
 26115                           indf2	equ	0xFDF
 26116                           postinc2	equ	0xFDE
 26117                           postdec2	equ	0xFDD
 26118                           plusw2	equ	0xFDB
 26119                           fsr2h	equ	0xFDA
 26120                           fsr2l	equ	0xFD9
 26121                           status	equ	0xFD8
 26122                           
 26123 ;; *************** function _loadSysParams *****************
 26124 ;; Defined at:
 26125 ;;		line 146 in file "source/sysParams.h"
 26126 ;; Parameters:    Size  Location     Type
 26127 ;;		None
 26128 ;; Auto vars:     Size  Location     Type
 26129 ;;		None
 26130 ;; Return value:  Size  Location     Type
 26131 ;;                  1    wreg      void 
 26132 ;; Registers used:
 26133 ;;		wreg, status,2, status,0, cstack
 26134 ;; Tracked objects:
 26135 ;;		On entry : 0/0
 26136 ;;		On exit  : 0/0
 26137 ;;		Unchanged: 0/0
 26138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26139 ;;      Params:         0       0       0       0       0       0       0
 26140 ;;      Locals:         0       0       0       0       0       0       0
 26141 ;;      Temps:          0       0       0       0       0       0       0
 26142 ;;      Totals:         0       0       0       0       0       0       0
 26143 ;;Total ram usage:        0 bytes
 26144 ;; Hardware stack levels used:    1
 26145 ;; Hardware stack levels required when called:    8
 26146 ;; This function calls:
 26147 ;;		i1_calcSysVars
 26148 ;;		i1_saveSysParams
 26149 ;; This function is called by:
 26150 ;;		_UARTint
 26151 ;; This function uses a non-reentrant model
 26152 ;;
 26153                           
 26154                           	psect	text108
 26155  006E28                     __ptext108:
 26156                           	opt stack 0
 26157  006E28                     _loadSysParams:
 26158                           	opt stack 10
 26159                           
 26160                           ;sysParams.h: 147: tiXcorte = 5.0f;
 26161                           
 26162                           ;incstack = 0
 26163  006E28  0E00               	movlw	0
 26164  006E2A  0101               	movlb	1	; () banked
 26165  006E2C  6F95               	movwf	_tiXcorte& (0+255),b
 26166  006E2E  0EA0               	movlw	160
 26167  006E30  0101               	movlb	1	; () banked
 26168  006E32  6F96               	movwf	(_tiXcorte+1)& (0+255),b
 26169  006E34  0E40               	movlw	64
 26170  006E36  0101               	movlb	1	; () banked
 26171  006E38  6F97               	movwf	(_tiXcorte+2)& (0+255),b
 26172                           
 26173                           ;sysParams.h: 148: numCortes = 10;
 26174  006E3A  0E00               	movlw	0
 26175  006E3C  0100               	movlb	0	; () banked
 26176  006E3E  6FD1               	movwf	(_numCortes+1)& (0+255),b
 26177  006E40  0E0A               	movlw	10
 26178  006E42  6FD0               	movwf	_numCortes& (0+255),b
 26179                           
 26180                           ;sysParams.h: 150: velocidadMasa = 1.0f;
 26181  006E44  0E00               	movlw	0
 26182  006E46  0101               	movlb	1	; () banked
 26183  006E48  6F98               	movwf	_velocidadMasa& (0+255),b
 26184  006E4A  0E80               	movlw	128
 26185  006E4C  0101               	movlb	1	; () banked
 26186  006E4E  6F99               	movwf	(_velocidadMasa+1)& (0+255),b
 26187  006E50  0E3F               	movlw	63
 26188  006E52  0101               	movlb	1	; () banked
 26189  006E54  6F9A               	movwf	(_velocidadMasa+2)& (0+255),b
 26190                           
 26191                           ;sysParams.h: 151: processState = 0;
 26192  006E56  0E00               	movlw	0
 26193  006E58  0100               	movlb	0	; () banked
 26194  006E5A  6FB5               	movwf	(_processState+1)& (0+255),b
 26195  006E5C  0E00               	movlw	0
 26196  006E5E  6FB4               	movwf	_processState& (0+255),b
 26197                           
 26198                           ;sysParams.h: 152: processStarted = 0;
 26199  006E60  0E00               	movlw	0
 26200  006E62  0100               	movlb	0	; () banked
 26201  006E64  6FC4               	movwf	_processStarted& (0+255),b
 26202                           
 26203                           ; BSR set to: 0
 26204                           ;sysParams.h: 153: calcSysVars();
 26205  006E66  EC96  F035         	call	i1_calcSysVars	;wreg free
 26206                           
 26207                           ;sysParams.h: 154: saveSysParams();
 26208  006E6A  ECAB  F030         	call	i1_saveSysParams	;wreg free
 26209  006E6E  0012               	return		;funcret
 26210  006E70                     __end_of_loadSysParams:
 26211                           	opt stack 0
 26212                           pclatu	equ	0xFFB
 26213                           pclath	equ	0xFFA
 26214                           tblptru	equ	0xFF8
 26215                           tblptrh	equ	0xFF7
 26216                           tblptrl	equ	0xFF6
 26217                           tablat	equ	0xFF5
 26218                           prodh	equ	0xFF4
 26219                           prodl	equ	0xFF3
 26220                           intcon	equ	0xFF2
 26221                           postinc0	equ	0xFEE
 26222                           fsr0h	equ	0xFEA
 26223                           fsr0l	equ	0xFE9
 26224                           wreg	equ	0xFE8
 26225                           postdec1	equ	0xFE5
 26226                           fsr1h	equ	0xFE2
 26227                           fsr1l	equ	0xFE1
 26228                           bsr	equ	0xFE0
 26229                           indf2	equ	0xFDF
 26230                           postinc2	equ	0xFDE
 26231                           postdec2	equ	0xFDD
 26232                           plusw2	equ	0xFDB
 26233                           fsr2h	equ	0xFDA
 26234                           fsr2l	equ	0xFD9
 26235                           status	equ	0xFD8
 26236                           
 26237 ;; *************** function i1_saveSysParams *****************
 26238 ;; Defined at:
 26239 ;;		line 113 in file "source/sysParams.h"
 26240 ;; Parameters:    Size  Location     Type
 26241 ;;		None
 26242 ;; Auto vars:     Size  Location     Type
 26243 ;;		None
 26244 ;; Return value:  Size  Location     Type
 26245 ;;                  1    wreg      void 
 26246 ;; Registers used:
 26247 ;;		wreg, status,2, status,0, cstack
 26248 ;; Tracked objects:
 26249 ;;		On entry : 0/0
 26250 ;;		On exit  : 0/0
 26251 ;;		Unchanged: 0/0
 26252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26253 ;;      Params:         0       0       0       0       0       0       0
 26254 ;;      Locals:         0       0       0       0       0       0       0
 26255 ;;      Temps:          0       0       0       0       0       0       0
 26256 ;;      Totals:         0       0       0       0       0       0       0
 26257 ;;Total ram usage:        0 bytes
 26258 ;; Hardware stack levels used:    1
 26259 ;; Hardware stack levels required when called:    7
 26260 ;; This function calls:
 26261 ;;		i1_calcVars2ti
 26262 ;;		i1_writeEEPROM
 26263 ;; This function is called by:
 26264 ;;		_loadSysParams
 26265 ;;		_UARTint
 26266 ;;		i1_confirmEdition
 26267 ;; This function uses a non-reentrant model
 26268 ;;
 26269                           
 26270                           	psect	text109
 26271  006156                     __ptext109:
 26272                           	opt stack 0
 26273  006156                     i1_saveSysParams:
 26274                           	opt stack 11
 26275                           
 26276                           ;sysParams.h: 114: calcVars2ti();
 26277                           
 26278                           ;incstack = 0
 26279  006156  EC2A  F036         	call	i1_calcVars2ti	;wreg free
 26280                           
 26281                           ;sysParams.h: 115: EECON1bits.WREN = 1;
 26282  00615A  84A6               	bsf	4006,2,c	;volatile
 26283                           
 26284                           ;sysParams.h: 116: ie = INTCONbits.GIE;
 26285  00615C  0E00               	movlw	0
 26286  00615E  BEF2               	btfsc	intcon,7,c	;volatile
 26287  006160  0E01               	movlw	1
 26288  006162  0100               	movlb	0	; () banked
 26289  006164  6FC1               	movwf	_ie& (0+255),b
 26290                           
 26291                           ; BSR set to: 0
 26292                           ;sysParams.h: 117: INTCONbits.GIE = 0;
 26293  006166  9EF2               	bcf	intcon,7,c	;volatile
 26294                           
 26295                           ; BSR set to: 0
 26296                           ;sysParams.h: 119: fData.floatdat = tiXcorte;
 26297  006168  C195  F0AF         	movff	_tiXcorte,_fData
 26298  00616C  C196  F0B0         	movff	_tiXcorte+1,_fData+1
 26299  006170  C197  F0B1         	movff	_tiXcorte+2,_fData+2
 26300                           
 26301                           ; BSR set to: 0
 26302                           ;sysParams.h: 121: writeEEPROM(3, fData.floatUB);
 26303  006174  C0B1  F060         	movff	_fData+2,i1writeEEPROM@data
 26304  006178  0E03               	movlw	3
 26305  00617A  EC28  F039         	call	i1_writeEEPROM
 26306                           
 26307                           ;sysParams.h: 122: writeEEPROM(4, fData.floatHB);
 26308  00617E  C0B0  F060         	movff	_fData+1,i1writeEEPROM@data
 26309  006182  0E04               	movlw	4
 26310  006184  EC28  F039         	call	i1_writeEEPROM
 26311                           
 26312                           ;sysParams.h: 123: writeEEPROM(5, fData.floatLB);
 26313  006188  C0AF  F060         	movff	_fData,i1writeEEPROM@data
 26314  00618C  0E05               	movlw	5
 26315  00618E  EC28  F039         	call	i1_writeEEPROM
 26316                           
 26317                           ;sysParams.h: 124: i16Data.int16dat = numCortes;
 26318  006192  C0D0  F0B2         	movff	_numCortes,_i16Data
 26319  006196  C0D1  F0B3         	movff	_numCortes+1,_i16Data+1
 26320                           
 26321                           ;sysParams.h: 125: writeEEPROM(6, i16Data.int16HB);
 26322  00619A  C0B3  F060         	movff	_i16Data+1,i1writeEEPROM@data
 26323  00619E  0E06               	movlw	6
 26324  0061A0  EC28  F039         	call	i1_writeEEPROM
 26325                           
 26326                           ;sysParams.h: 126: writeEEPROM(7, i16Data.int16LB);
 26327  0061A4  C0B2  F060         	movff	_i16Data,i1writeEEPROM@data
 26328  0061A8  0E07               	movlw	7
 26329  0061AA  EC28  F039         	call	i1_writeEEPROM
 26330                           
 26331                           ;sysParams.h: 137: fData.floatdat = velocidadMasa;
 26332  0061AE  C198  F0AF         	movff	_velocidadMasa,_fData
 26333  0061B2  C199  F0B0         	movff	_velocidadMasa+1,_fData+1
 26334  0061B6  C19A  F0B1         	movff	_velocidadMasa+2,_fData+2
 26335                           
 26336                           ;sysParams.h: 139: writeEEPROM(17, fData.floatUB);
 26337  0061BA  C0B1  F060         	movff	_fData+2,i1writeEEPROM@data
 26338  0061BE  0E11               	movlw	17
 26339  0061C0  EC28  F039         	call	i1_writeEEPROM
 26340                           
 26341                           ;sysParams.h: 140: writeEEPROM(18, fData.floatHB);
 26342  0061C4  C0B0  F060         	movff	_fData+1,i1writeEEPROM@data
 26343  0061C8  0E12               	movlw	18
 26344  0061CA  EC28  F039         	call	i1_writeEEPROM
 26345                           
 26346                           ;sysParams.h: 141: writeEEPROM(19, fData.floatLB);
 26347  0061CE  C0AF  F060         	movff	_fData,i1writeEEPROM@data
 26348  0061D2  0E13               	movlw	19
 26349  0061D4  EC28  F039         	call	i1_writeEEPROM
 26350                           
 26351                           ;sysParams.h: 142: EECON1bits.WREN = 0;
 26352  0061D8  94A6               	bcf	4006,2,c	;volatile
 26353                           
 26354                           ;sysParams.h: 143: INTCONbits.GIE = ie;
 26355  0061DA  0100               	movlb	0	; () banked
 26356  0061DC  B1C1               	btfsc	_ie& (0+255),0,b
 26357  0061DE  D002               	bra	i1u907_25
 26358  0061E0  9EF2               	bcf	intcon,7,c	;volatile
 26359  0061E2  D001               	bra	i1u907_26
 26360  0061E4                     i1u907_25:
 26361  0061E4  8EF2               	bsf	intcon,7,c	;volatile
 26362  0061E6                     i1u907_26:
 26363  0061E6  0012               	return		;funcret
 26364  0061E8                     __end_ofi1_saveSysParams:
 26365                           	opt stack 0
 26366                           pclatu	equ	0xFFB
 26367                           pclath	equ	0xFFA
 26368                           tblptru	equ	0xFF8
 26369                           tblptrh	equ	0xFF7
 26370                           tblptrl	equ	0xFF6
 26371                           tablat	equ	0xFF5
 26372                           prodh	equ	0xFF4
 26373                           prodl	equ	0xFF3
 26374                           intcon	equ	0xFF2
 26375                           postinc0	equ	0xFEE
 26376                           fsr0h	equ	0xFEA
 26377                           fsr0l	equ	0xFE9
 26378                           wreg	equ	0xFE8
 26379                           postdec1	equ	0xFE5
 26380                           fsr1h	equ	0xFE2
 26381                           fsr1l	equ	0xFE1
 26382                           bsr	equ	0xFE0
 26383                           indf2	equ	0xFDF
 26384                           postinc2	equ	0xFDE
 26385                           postdec2	equ	0xFDD
 26386                           plusw2	equ	0xFDB
 26387                           fsr2h	equ	0xFDA
 26388                           fsr2l	equ	0xFD9
 26389                           status	equ	0xFD8
 26390                           
 26391 ;; *************** function i1_calcVars2ti *****************
 26392 ;; Defined at:
 26393 ;;		line 89 in file "source/sysParams.h"
 26394 ;; Parameters:    Size  Location     Type
 26395 ;;		None
 26396 ;; Auto vars:     Size  Location     Type
 26397 ;;		None
 26398 ;; Return value:  Size  Location     Type
 26399 ;;                  1    wreg      void 
 26400 ;; Registers used:
 26401 ;;		wreg, status,2, status,0, cstack
 26402 ;; Tracked objects:
 26403 ;;		On entry : 0/0
 26404 ;;		On exit  : 0/0
 26405 ;;		Unchanged: 0/0
 26406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26407 ;;      Params:         0       0       0       0       0       0       0
 26408 ;;      Locals:         0       0       0       0       0       0       0
 26409 ;;      Temps:          0       0       0       0       0       0       0
 26410 ;;      Totals:         0       0       0       0       0       0       0
 26411 ;;Total ram usage:        0 bytes
 26412 ;; Hardware stack levels used:    1
 26413 ;; Hardware stack levels required when called:    6
 26414 ;; This function calls:
 26415 ;;		i1___ftdiv
 26416 ;;		i1___ftmul
 26417 ;; This function is called by:
 26418 ;;		i1_saveSysParams
 26419 ;;		i1_longPressENTER
 26420 ;; This function uses a non-reentrant model
 26421 ;;
 26422                           
 26423                           	psect	text110
 26424  006C54                     __ptext110:
 26425                           	opt stack 0
 26426  006C54                     i1_calcVars2ti:
 26427                           	opt stack 11
 26428                           
 26429                           ;sysParams.h: 97: tiXcorte = (float)kgXcorte / velocidadMasa;
 26430                           
 26431                           ;incstack = 0
 26432  006C54  C18F  F072         	movff	_kgXcorte,i1___ftdiv@f1
 26433  006C58  C190  F073         	movff	_kgXcorte+1,i1___ftdiv@f1+1
 26434  006C5C  C191  F074         	movff	_kgXcorte+2,i1___ftdiv@f1+2
 26435  006C60  C198  F075         	movff	_velocidadMasa,i1___ftdiv@f2
 26436  006C64  C199  F076         	movff	_velocidadMasa+1,i1___ftdiv@f2+1
 26437  006C68  C19A  F077         	movff	_velocidadMasa+2,i1___ftdiv@f2+2
 26438  006C6C  EC23  F01F         	call	i1___ftdiv	;wreg free
 26439  006C70  C072  F195         	movff	?i1___ftdiv,_tiXcorte
 26440  006C74  C073  F196         	movff	?i1___ftdiv+1,_tiXcorte+1
 26441  006C78  C074  F197         	movff	?i1___ftdiv+2,_tiXcorte+2
 26442                           
 26443                           ;sysParams.h: 98: timsXcorte = (float)tiXcorte * 1000;
 26444  006C7C  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 26445  006C80  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 26446  006C84  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 26447  006C88  0E00               	movlw	0
 26448  006C8A  0100               	movlb	0	; () banked
 26449  006C8C  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 26450  006C8E  0E7A               	movlw	122
 26451  006C90  0100               	movlb	0	; () banked
 26452  006C92  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 26453  006C94  0E44               	movlw	68
 26454  006C96  0100               	movlb	0	; () banked
 26455  006C98  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 26456  006C9A  ECCE  F01D         	call	i1___ftmul	;wreg free
 26457  006C9E  C068  F059         	movff	?i1___ftmul,_timsXcorte
 26458  006CA2  C069  F05A         	movff	?i1___ftmul+1,_timsXcorte+1
 26459  006CA6  C06A  F05B         	movff	?i1___ftmul+2,_timsXcorte+2
 26460  006CAA  0012               	return		;funcret
 26461  006CAC                     __end_ofi1_calcVars2ti:
 26462                           	opt stack 0
 26463                           pclatu	equ	0xFFB
 26464                           pclath	equ	0xFFA
 26465                           tblptru	equ	0xFF8
 26466                           tblptrh	equ	0xFF7
 26467                           tblptrl	equ	0xFF6
 26468                           tablat	equ	0xFF5
 26469                           prodh	equ	0xFF4
 26470                           prodl	equ	0xFF3
 26471                           intcon	equ	0xFF2
 26472                           postinc0	equ	0xFEE
 26473                           fsr0h	equ	0xFEA
 26474                           fsr0l	equ	0xFE9
 26475                           wreg	equ	0xFE8
 26476                           postdec1	equ	0xFE5
 26477                           fsr1h	equ	0xFE2
 26478                           fsr1l	equ	0xFE1
 26479                           bsr	equ	0xFE0
 26480                           indf2	equ	0xFDF
 26481                           postinc2	equ	0xFDE
 26482                           postdec2	equ	0xFDD
 26483                           plusw2	equ	0xFDB
 26484                           fsr2h	equ	0xFDA
 26485                           fsr2l	equ	0xFD9
 26486                           status	equ	0xFD8
 26487                           
 26488 ;; *************** function i1___ftdiv *****************
 26489 ;; Defined at:
 26490 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 26491 ;; Parameters:    Size  Location     Type
 26492 ;;  f1              3   18[BANK0 ] float 
 26493 ;;  f2              3   21[BANK0 ] float 
 26494 ;; Auto vars:     Size  Location     Type
 26495 ;;  __ftdiv         3   28[BANK0 ] float 
 26496 ;;  __ftdiv         1   32[BANK0 ] unsigned char 
 26497 ;;  __ftdiv         1   31[BANK0 ] unsigned char 
 26498 ;;  __ftdiv         1   27[BANK0 ] unsigned char 
 26499 ;; Return value:  Size  Location     Type
 26500 ;;                  3   18[BANK0 ] float 
 26501 ;; Registers used:
 26502 ;;		wreg, status,2, status,0, cstack
 26503 ;; Tracked objects:
 26504 ;;		On entry : 0/0
 26505 ;;		On exit  : 0/0
 26506 ;;		Unchanged: 0/0
 26507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26508 ;;      Params:         0       6       0       0       0       0       0
 26509 ;;      Locals:         0       6       0       0       0       0       0
 26510 ;;      Temps:          0       3       0       0       0       0       0
 26511 ;;      Totals:         0      15       0       0       0       0       0
 26512 ;;Total ram usage:       15 bytes
 26513 ;; Hardware stack levels used:    1
 26514 ;; Hardware stack levels required when called:    5
 26515 ;; This function calls:
 26516 ;;		i1___ftpack
 26517 ;; This function is called by:
 26518 ;;		i1_calcVars2ti
 26519 ;;		i1_integrator
 26520 ;;		i1_longPressENTER
 26521 ;; This function uses a non-reentrant model
 26522 ;;
 26523                           
 26524                           	psect	text111
 26525  003E46                     __ptext111:
 26526                           	opt stack 0
 26527  003E46                     i1___ftdiv:
 26528                           	opt stack 11
 26529                           
 26530                           ;incstack = 0
 26531  003E46  C074  F078         	movff	i1___ftdiv@f1+2,??i1___ftdiv
 26532  003E4A  0100               	movlb	0	; () banked
 26533  003E4C  6B79               	clrf	(??i1___ftdiv+1)& (0+255),b
 26534  003E4E  6B7A               	clrf	(??i1___ftdiv+2)& (0+255),b
 26535  003E50  0100               	movlb	0	; () banked
 26536  003E52  3573               	rlcf	(i1___ftdiv@f1+1)& (0+255),w,b
 26537  003E54  0100               	movlb	0	; () banked
 26538  003E56  3778               	rlcf	??i1___ftdiv& (0+255),f,b
 26539  003E58  E301               	bnc	u780_21
 26540  003E5A  8179               	bsf	(??i1___ftdiv+1)& (0+255),0,b
 26541  003E5C                     u780_21:
 26542  003E5C  0100               	movlb	0	; () banked
 26543  003E5E  5178               	movf	??i1___ftdiv& (0+255),w,b
 26544  003E60  0100               	movlb	0	; () banked
 26545  003E62  6F7F               	movwf	i1___ftdiv@exp& (0+255),b
 26546  003E64  0100               	movlb	0	; () banked
 26547  003E66  517F               	movf	i1___ftdiv@exp& (0+255),w,b
 26548  003E68  A4D8               	btfss	status,2,c
 26549  003E6A  D00A               	goto	i1l6150
 26550                           
 26551                           ; BSR set to: 0
 26552  003E6C  0E00               	movlw	0
 26553  003E6E  0100               	movlb	0	; () banked
 26554  003E70  6F72               	movwf	?i1___ftdiv& (0+255),b
 26555  003E72  0E00               	movlw	0
 26556  003E74  0100               	movlb	0	; () banked
 26557  003E76  6F73               	movwf	(?i1___ftdiv+1)& (0+255),b
 26558  003E78  0E00               	movlw	0
 26559  003E7A  0100               	movlb	0	; () banked
 26560  003E7C  6F74               	movwf	(?i1___ftdiv+2)& (0+255),b
 26561                           
 26562                           ; BSR set to: 0
 26563  003E7E  0012               	return	
 26564  003E80                     i1l6150:
 26565                           
 26566                           ; BSR set to: 0
 26567  003E80  C077  F078         	movff	i1___ftdiv@f2+2,??i1___ftdiv
 26568  003E84  0100               	movlb	0	; () banked
 26569  003E86  6B79               	clrf	(??i1___ftdiv+1)& (0+255),b
 26570  003E88  6B7A               	clrf	(??i1___ftdiv+2)& (0+255),b
 26571  003E8A  0100               	movlb	0	; () banked
 26572  003E8C  3576               	rlcf	(i1___ftdiv@f2+1)& (0+255),w,b
 26573  003E8E  0100               	movlb	0	; () banked
 26574  003E90  3778               	rlcf	??i1___ftdiv& (0+255),f,b
 26575  003E92  E301               	bnc	u782_21
 26576  003E94  8179               	bsf	(??i1___ftdiv+1)& (0+255),0,b
 26577  003E96                     u782_21:
 26578  003E96  0100               	movlb	0	; () banked
 26579  003E98  5178               	movf	??i1___ftdiv& (0+255),w,b
 26580  003E9A  0100               	movlb	0	; () banked
 26581  003E9C  6F80               	movwf	i1___ftdiv@sign& (0+255),b
 26582  003E9E  0100               	movlb	0	; () banked
 26583  003EA0  5180               	movf	i1___ftdiv@sign& (0+255),w,b
 26584  003EA2  A4D8               	btfss	status,2,c
 26585  003EA4  D00A               	goto	i1l6156
 26586                           
 26587                           ; BSR set to: 0
 26588  003EA6  0E00               	movlw	0
 26589  003EA8  0100               	movlb	0	; () banked
 26590  003EAA  6F72               	movwf	?i1___ftdiv& (0+255),b
 26591  003EAC  0E00               	movlw	0
 26592  003EAE  0100               	movlb	0	; () banked
 26593  003EB0  6F73               	movwf	(?i1___ftdiv+1)& (0+255),b
 26594  003EB2  0E00               	movlw	0
 26595  003EB4  0100               	movlb	0	; () banked
 26596  003EB6  6F74               	movwf	(?i1___ftdiv+2)& (0+255),b
 26597                           
 26598                           ; BSR set to: 0
 26599  003EB8  0012               	return	
 26600  003EBA                     i1l6156:
 26601                           
 26602                           ; BSR set to: 0
 26603  003EBA  0E00               	movlw	0
 26604  003EBC  0100               	movlb	0	; () banked
 26605  003EBE  6F7C               	movwf	i1___ftdiv@f3& (0+255),b
 26606  003EC0  0E00               	movlw	0
 26607  003EC2  0100               	movlb	0	; () banked
 26608  003EC4  6F7D               	movwf	(i1___ftdiv@f3+1)& (0+255),b
 26609  003EC6  0E00               	movlw	0
 26610  003EC8  0100               	movlb	0	; () banked
 26611  003ECA  6F7E               	movwf	(i1___ftdiv@f3+2)& (0+255),b
 26612                           
 26613                           ; BSR set to: 0
 26614  003ECC  0100               	movlb	0	; () banked
 26615  003ECE  5180               	movf	i1___ftdiv@sign& (0+255),w,b
 26616  003ED0  0F89               	addlw	137
 26617  003ED2  0100               	movlb	0	; () banked
 26618  003ED4  5F7F               	subwf	i1___ftdiv@exp& (0+255),f,b
 26619                           
 26620                           ; BSR set to: 0
 26621  003ED6  C074  F080         	movff	i1___ftdiv@f1+2,i1___ftdiv@sign
 26622                           
 26623                           ; BSR set to: 0
 26624  003EDA  0100               	movlb	0	; () banked
 26625  003EDC  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 26626  003EDE  0100               	movlb	0	; () banked
 26627  003EE0  1B80               	xorwf	i1___ftdiv@sign& (0+255),f,b
 26628                           
 26629                           ; BSR set to: 0
 26630  003EE2  0E80               	movlw	128
 26631  003EE4  0100               	movlb	0	; () banked
 26632  003EE6  1780               	andwf	i1___ftdiv@sign& (0+255),f,b
 26633                           
 26634                           ; BSR set to: 0
 26635  003EE8  0100               	movlb	0	; () banked
 26636  003EEA  8F73               	bsf	(i1___ftdiv@f1+1)& (0+255),7,b
 26637                           
 26638                           ; BSR set to: 0
 26639  003EEC  0EFF               	movlw	255
 26640  003EEE  0100               	movlb	0	; () banked
 26641  003EF0  1772               	andwf	i1___ftdiv@f1& (0+255),f,b
 26642  003EF2  0EFF               	movlw	255
 26643  003EF4  0100               	movlb	0	; () banked
 26644  003EF6  1773               	andwf	(i1___ftdiv@f1+1)& (0+255),f,b
 26645  003EF8  0E00               	movlw	0
 26646  003EFA  0100               	movlb	0	; () banked
 26647  003EFC  1774               	andwf	(i1___ftdiv@f1+2)& (0+255),f,b
 26648                           
 26649                           ; BSR set to: 0
 26650  003EFE  0100               	movlb	0	; () banked
 26651  003F00  8F76               	bsf	(i1___ftdiv@f2+1)& (0+255),7,b
 26652                           
 26653                           ; BSR set to: 0
 26654  003F02  0EFF               	movlw	255
 26655  003F04  0100               	movlb	0	; () banked
 26656  003F06  1775               	andwf	i1___ftdiv@f2& (0+255),f,b
 26657  003F08  0EFF               	movlw	255
 26658  003F0A  0100               	movlb	0	; () banked
 26659  003F0C  1776               	andwf	(i1___ftdiv@f2+1)& (0+255),f,b
 26660  003F0E  0E00               	movlw	0
 26661  003F10  0100               	movlb	0	; () banked
 26662  003F12  1777               	andwf	(i1___ftdiv@f2+2)& (0+255),f,b
 26663                           
 26664                           ; BSR set to: 0
 26665  003F14  0E18               	movlw	24
 26666  003F16  0100               	movlb	0	; () banked
 26667  003F18  6F7B               	movwf	i1___ftdiv@cntr& (0+255),b
 26668  003F1A                     i1l6176:
 26669                           
 26670                           ; BSR set to: 0
 26671  003F1A  0100               	movlb	0	; () banked
 26672  003F1C  90D8               	bcf	status,0,c
 26673  003F1E  377C               	rlcf	i1___ftdiv@f3& (0+255),f,b
 26674  003F20  377D               	rlcf	(i1___ftdiv@f3+1)& (0+255),f,b
 26675  003F22  377E               	rlcf	(i1___ftdiv@f3+2)& (0+255),f,b
 26676                           
 26677                           ; BSR set to: 0
 26678  003F24  0100               	movlb	0	; () banked
 26679  003F26  5175               	movf	i1___ftdiv@f2& (0+255),w,b
 26680  003F28  0100               	movlb	0	; () banked
 26681  003F2A  5D72               	subwf	i1___ftdiv@f1& (0+255),w,b
 26682  003F2C  0100               	movlb	0	; () banked
 26683  003F2E  5176               	movf	(i1___ftdiv@f2+1)& (0+255),w,b
 26684  003F30  0100               	movlb	0	; () banked
 26685  003F32  5973               	subwfb	(i1___ftdiv@f1+1)& (0+255),w,b
 26686  003F34  0100               	movlb	0	; () banked
 26687  003F36  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 26688  003F38  0100               	movlb	0	; () banked
 26689  003F3A  5974               	subwfb	(i1___ftdiv@f1+2)& (0+255),w,b
 26690  003F3C  A0D8               	btfss	status,0,c
 26691  003F3E  D00E               	goto	i1l1369
 26692                           
 26693                           ; BSR set to: 0
 26694  003F40  0100               	movlb	0	; () banked
 26695  003F42  5175               	movf	i1___ftdiv@f2& (0+255),w,b
 26696  003F44  0100               	movlb	0	; () banked
 26697  003F46  5F72               	subwf	i1___ftdiv@f1& (0+255),f,b
 26698  003F48  0100               	movlb	0	; () banked
 26699  003F4A  5176               	movf	(i1___ftdiv@f2+1)& (0+255),w,b
 26700  003F4C  0100               	movlb	0	; () banked
 26701  003F4E  5B73               	subwfb	(i1___ftdiv@f1+1)& (0+255),f,b
 26702  003F50  0100               	movlb	0	; () banked
 26703  003F52  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 26704  003F54  0100               	movlb	0	; () banked
 26705  003F56  5B74               	subwfb	(i1___ftdiv@f1+2)& (0+255),f,b
 26706                           
 26707                           ; BSR set to: 0
 26708  003F58  0100               	movlb	0	; () banked
 26709  003F5A  817C               	bsf	i1___ftdiv@f3& (0+255),0,b
 26710  003F5C                     i1l1369:
 26711                           
 26712                           ; BSR set to: 0
 26713  003F5C  0100               	movlb	0	; () banked
 26714  003F5E  90D8               	bcf	status,0,c
 26715  003F60  3772               	rlcf	i1___ftdiv@f1& (0+255),f,b
 26716  003F62  3773               	rlcf	(i1___ftdiv@f1+1)& (0+255),f,b
 26717  003F64  3774               	rlcf	(i1___ftdiv@f1+2)& (0+255),f,b
 26718                           
 26719                           ; BSR set to: 0
 26720  003F66  0100               	movlb	0	; () banked
 26721  003F68  2F7B               	decfsz	i1___ftdiv@cntr& (0+255),f,b
 26722  003F6A  D7D7               	goto	i1l6176
 26723                           
 26724                           ; BSR set to: 0
 26725                           
 26726                           ; BSR set to: 0
 26727  003F6C  C07C  F060         	movff	i1___ftdiv@f3,i1___ftpack@arg
 26728  003F70  C07D  F061         	movff	i1___ftdiv@f3+1,i1___ftpack@arg+1
 26729  003F74  C07E  F062         	movff	i1___ftdiv@f3+2,i1___ftpack@arg+2
 26730  003F78  C07F  F063         	movff	i1___ftdiv@exp,i1___ftpack@exp
 26731  003F7C  C080  F064         	movff	i1___ftdiv@sign,i1___ftpack@sign
 26732  003F80  ECEF  F025         	call	i1___ftpack	;wreg free
 26733  003F84  C060  F072         	movff	?i1___ftpack,?i1___ftdiv
 26734  003F88  C061  F073         	movff	?i1___ftpack+1,?i1___ftdiv+1
 26735  003F8C  C062  F074         	movff	?i1___ftpack+2,?i1___ftdiv+2
 26736  003F90  0012               	return	
 26737  003F92                     __end_ofi1___ftdiv:
 26738                           	opt stack 0
 26739                           pclatu	equ	0xFFB
 26740                           pclath	equ	0xFFA
 26741                           tblptru	equ	0xFF8
 26742                           tblptrh	equ	0xFF7
 26743                           tblptrl	equ	0xFF6
 26744                           tablat	equ	0xFF5
 26745                           prodh	equ	0xFF4
 26746                           prodl	equ	0xFF3
 26747                           intcon	equ	0xFF2
 26748                           postinc0	equ	0xFEE
 26749                           fsr0h	equ	0xFEA
 26750                           fsr0l	equ	0xFE9
 26751                           wreg	equ	0xFE8
 26752                           postdec1	equ	0xFE5
 26753                           fsr1h	equ	0xFE2
 26754                           fsr1l	equ	0xFE1
 26755                           bsr	equ	0xFE0
 26756                           indf2	equ	0xFDF
 26757                           postinc2	equ	0xFDE
 26758                           postdec2	equ	0xFDD
 26759                           plusw2	equ	0xFDB
 26760                           fsr2h	equ	0xFDA
 26761                           fsr2l	equ	0xFD9
 26762                           status	equ	0xFD8
 26763                           
 26764 ;; *************** function i1_calcSysVars *****************
 26765 ;; Defined at:
 26766 ;;		line 78 in file "source/sysParams.h"
 26767 ;; Parameters:    Size  Location     Type
 26768 ;;		None
 26769 ;; Auto vars:     Size  Location     Type
 26770 ;;  calcSysVars     3   23[BANK0 ] float 
 26771 ;; Return value:  Size  Location     Type
 26772 ;;                  1    wreg      void 
 26773 ;; Registers used:
 26774 ;;		wreg, status,2, status,0, cstack
 26775 ;; Tracked objects:
 26776 ;;		On entry : 0/0
 26777 ;;		On exit  : 0/0
 26778 ;;		Unchanged: 0/0
 26779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26780 ;;      Params:         0       0       0       0       0       0       0
 26781 ;;      Locals:         0       3       0       0       0       0       0
 26782 ;;      Temps:          0       0       0       0       0       0       0
 26783 ;;      Totals:         0       3       0       0       0       0       0
 26784 ;;Total ram usage:        3 bytes
 26785 ;; Hardware stack levels used:    1
 26786 ;; Hardware stack levels required when called:    6
 26787 ;; This function calls:
 26788 ;;		i1___ftmul
 26789 ;; This function is called by:
 26790 ;;		_loadSysParams
 26791 ;;		i1_sysParamInit
 26792 ;; This function uses a non-reentrant model
 26793 ;;
 26794                           
 26795                           	psect	text112
 26796  006B2C                     __ptext112:
 26797                           	opt stack 0
 26798  006B2C                     i1_calcSysVars:
 26799                           	opt stack 11
 26800                           
 26801                           ;sysParams.h: 79: float temp = 0;
 26802                           
 26803                           ;incstack = 0
 26804  006B2C  0E00               	movlw	0
 26805  006B2E  0100               	movlb	0	; () banked
 26806  006B30  6F77               	movwf	i1calcSysVars@temp& (0+255),b
 26807  006B32  0E00               	movlw	0
 26808  006B34  0100               	movlb	0	; () banked
 26809  006B36  6F78               	movwf	(i1calcSysVars@temp+1)& (0+255),b
 26810  006B38  0E00               	movlw	0
 26811  006B3A  0100               	movlb	0	; () banked
 26812  006B3C  6F79               	movwf	(i1calcSysVars@temp+2)& (0+255),b
 26813                           
 26814                           ; BSR set to: 0
 26815                           ;sysParams.h: 80: timsXcorte = (float)tiXcorte * 1000;
 26816  006B3E  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 26817  006B42  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 26818  006B46  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 26819  006B4A  0E00               	movlw	0
 26820  006B4C  0100               	movlb	0	; () banked
 26821  006B4E  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 26822  006B50  0E7A               	movlw	122
 26823  006B52  0100               	movlb	0	; () banked
 26824  006B54  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 26825  006B56  0E44               	movlw	68
 26826  006B58  0100               	movlb	0	; () banked
 26827  006B5A  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 26828  006B5C  ECCE  F01D         	call	i1___ftmul	;wreg free
 26829  006B60  C068  F059         	movff	?i1___ftmul,_timsXcorte
 26830  006B64  C069  F05A         	movff	?i1___ftmul+1,_timsXcorte+1
 26831  006B68  C06A  F05B         	movff	?i1___ftmul+2,_timsXcorte+2
 26832                           
 26833                           ;sysParams.h: 86: kgXcorte = (float)velocidadMasa * tiXcorte;
 26834  006B6C  C198  F068         	movff	_velocidadMasa,i1___ftmul@f1
 26835  006B70  C199  F069         	movff	_velocidadMasa+1,i1___ftmul@f1+1
 26836  006B74  C19A  F06A         	movff	_velocidadMasa+2,i1___ftmul@f1+2
 26837  006B78  C195  F06B         	movff	_tiXcorte,i1___ftmul@f2
 26838  006B7C  C196  F06C         	movff	_tiXcorte+1,i1___ftmul@f2+1
 26839  006B80  C197  F06D         	movff	_tiXcorte+2,i1___ftmul@f2+2
 26840  006B84  ECCE  F01D         	call	i1___ftmul	;wreg free
 26841  006B88  C068  F18F         	movff	?i1___ftmul,_kgXcorte
 26842  006B8C  C069  F190         	movff	?i1___ftmul+1,_kgXcorte+1
 26843  006B90  C06A  F191         	movff	?i1___ftmul+2,_kgXcorte+2
 26844  006B94  0012               	return		;funcret
 26845  006B96                     __end_ofi1_calcSysVars:
 26846                           	opt stack 0
 26847                           pclatu	equ	0xFFB
 26848                           pclath	equ	0xFFA
 26849                           tblptru	equ	0xFF8
 26850                           tblptrh	equ	0xFF7
 26851                           tblptrl	equ	0xFF6
 26852                           tablat	equ	0xFF5
 26853                           prodh	equ	0xFF4
 26854                           prodl	equ	0xFF3
 26855                           intcon	equ	0xFF2
 26856                           postinc0	equ	0xFEE
 26857                           fsr0h	equ	0xFEA
 26858                           fsr0l	equ	0xFE9
 26859                           wreg	equ	0xFE8
 26860                           postdec1	equ	0xFE5
 26861                           fsr1h	equ	0xFE2
 26862                           fsr1l	equ	0xFE1
 26863                           bsr	equ	0xFE0
 26864                           indf2	equ	0xFDF
 26865                           postinc2	equ	0xFDE
 26866                           postdec2	equ	0xFDD
 26867                           plusw2	equ	0xFDB
 26868                           fsr2h	equ	0xFDA
 26869                           fsr2l	equ	0xFD9
 26870                           status	equ	0xFD8
 26871                           
 26872 ;; *************** function i1___ftmul *****************
 26873 ;; Defined at:
 26874 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 26875 ;; Parameters:    Size  Location     Type
 26876 ;;  f1              3    8[BANK0 ] float 
 26877 ;;  f2              3   11[BANK0 ] float 
 26878 ;; Auto vars:     Size  Location     Type
 26879 ;;  __ftmul         3   18[BANK0 ] unsigned um
 26880 ;;  __ftmul         1   22[BANK0 ] unsigned char 
 26881 ;;  __ftmul         1   21[BANK0 ] unsigned char 
 26882 ;;  __ftmul         1   17[BANK0 ] unsigned char 
 26883 ;; Return value:  Size  Location     Type
 26884 ;;                  3    8[BANK0 ] float 
 26885 ;; Registers used:
 26886 ;;		wreg, status,2, status,0, cstack
 26887 ;; Tracked objects:
 26888 ;;		On entry : 0/0
 26889 ;;		On exit  : 0/0
 26890 ;;		Unchanged: 0/0
 26891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26892 ;;      Params:         0       6       0       0       0       0       0
 26893 ;;      Locals:         0       6       0       0       0       0       0
 26894 ;;      Temps:          0       3       0       0       0       0       0
 26895 ;;      Totals:         0      15       0       0       0       0       0
 26896 ;;Total ram usage:       15 bytes
 26897 ;; Hardware stack levels used:    1
 26898 ;; Hardware stack levels required when called:    5
 26899 ;; This function calls:
 26900 ;;		i1___ftpack
 26901 ;; This function is called by:
 26902 ;;		i1_calcSysVars
 26903 ;;		i1_calcVars2ti
 26904 ;;		i1_desintegrator
 26905 ;;		i1_longPressRETRO
 26906 ;;		i1_pressENTER
 26907 ;;		i1_longPressENTER
 26908 ;; This function uses a non-reentrant model
 26909 ;;
 26910                           
 26911                           	psect	text113
 26912  003B9C                     __ptext113:
 26913                           	opt stack 0
 26914  003B9C                     i1___ftmul:
 26915                           	opt stack 11
 26916                           
 26917                           ;incstack = 0
 26918  003B9C  C06A  F06E         	movff	i1___ftmul@f1+2,??i1___ftmul
 26919  003BA0  0100               	movlb	0	; () banked
 26920  003BA2  6B6F               	clrf	(??i1___ftmul+1)& (0+255),b
 26921  003BA4  6B70               	clrf	(??i1___ftmul+2)& (0+255),b
 26922  003BA6  0100               	movlb	0	; () banked
 26923  003BA8  3569               	rlcf	(i1___ftmul@f1+1)& (0+255),w,b
 26924  003BAA  0100               	movlb	0	; () banked
 26925  003BAC  376E               	rlcf	??i1___ftmul& (0+255),f,b
 26926  003BAE  E301               	bnc	u785_21
 26927  003BB0  816F               	bsf	(??i1___ftmul+1)& (0+255),0,b
 26928  003BB2                     u785_21:
 26929  003BB2  0100               	movlb	0	; () banked
 26930  003BB4  516E               	movf	??i1___ftmul& (0+255),w,b
 26931  003BB6  0100               	movlb	0	; () banked
 26932  003BB8  6F71               	movwf	i1___ftmul@exp& (0+255),b
 26933  003BBA  0100               	movlb	0	; () banked
 26934  003BBC  5171               	movf	i1___ftmul@exp& (0+255),w,b
 26935  003BBE  A4D8               	btfss	status,2,c
 26936  003BC0  D00A               	goto	i1l6196
 26937                           
 26938                           ; BSR set to: 0
 26939  003BC2  0E00               	movlw	0
 26940  003BC4  0100               	movlb	0	; () banked
 26941  003BC6  6F68               	movwf	?i1___ftmul& (0+255),b
 26942  003BC8  0E00               	movlw	0
 26943  003BCA  0100               	movlb	0	; () banked
 26944  003BCC  6F69               	movwf	(?i1___ftmul+1)& (0+255),b
 26945  003BCE  0E00               	movlw	0
 26946  003BD0  0100               	movlb	0	; () banked
 26947  003BD2  6F6A               	movwf	(?i1___ftmul+2)& (0+255),b
 26948                           
 26949                           ; BSR set to: 0
 26950  003BD4  0012               	return	
 26951  003BD6                     i1l6196:
 26952                           
 26953                           ; BSR set to: 0
 26954  003BD6  C06D  F06E         	movff	i1___ftmul@f2+2,??i1___ftmul
 26955  003BDA  0100               	movlb	0	; () banked
 26956  003BDC  6B6F               	clrf	(??i1___ftmul+1)& (0+255),b
 26957  003BDE  6B70               	clrf	(??i1___ftmul+2)& (0+255),b
 26958  003BE0  0100               	movlb	0	; () banked
 26959  003BE2  356C               	rlcf	(i1___ftmul@f2+1)& (0+255),w,b
 26960  003BE4  0100               	movlb	0	; () banked
 26961  003BE6  376E               	rlcf	??i1___ftmul& (0+255),f,b
 26962  003BE8  E301               	bnc	u787_21
 26963  003BEA  816F               	bsf	(??i1___ftmul+1)& (0+255),0,b
 26964  003BEC                     u787_21:
 26965  003BEC  0100               	movlb	0	; () banked
 26966  003BEE  516E               	movf	??i1___ftmul& (0+255),w,b
 26967  003BF0  0100               	movlb	0	; () banked
 26968  003BF2  6F76               	movwf	i1___ftmul@sign& (0+255),b
 26969  003BF4  0100               	movlb	0	; () banked
 26970  003BF6  5176               	movf	i1___ftmul@sign& (0+255),w,b
 26971  003BF8  A4D8               	btfss	status,2,c
 26972  003BFA  D00A               	goto	i1l6202
 26973                           
 26974                           ; BSR set to: 0
 26975  003BFC  0E00               	movlw	0
 26976  003BFE  0100               	movlb	0	; () banked
 26977  003C00  6F68               	movwf	?i1___ftmul& (0+255),b
 26978  003C02  0E00               	movlw	0
 26979  003C04  0100               	movlb	0	; () banked
 26980  003C06  6F69               	movwf	(?i1___ftmul+1)& (0+255),b
 26981  003C08  0E00               	movlw	0
 26982  003C0A  0100               	movlb	0	; () banked
 26983  003C0C  6F6A               	movwf	(?i1___ftmul+2)& (0+255),b
 26984                           
 26985                           ; BSR set to: 0
 26986  003C0E  0012               	return	
 26987  003C10                     i1l6202:
 26988                           
 26989                           ; BSR set to: 0
 26990  003C10  0100               	movlb	0	; () banked
 26991  003C12  5176               	movf	i1___ftmul@sign& (0+255),w,b
 26992  003C14  0F7B               	addlw	123
 26993  003C16  0100               	movlb	0	; () banked
 26994  003C18  2771               	addwf	i1___ftmul@exp& (0+255),f,b
 26995                           
 26996                           ; BSR set to: 0
 26997  003C1A  C06A  F076         	movff	i1___ftmul@f1+2,i1___ftmul@sign
 26998  003C1E  0100               	movlb	0	; () banked
 26999  003C20  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 27000  003C22  0100               	movlb	0	; () banked
 27001  003C24  1B76               	xorwf	i1___ftmul@sign& (0+255),f,b
 27002  003C26  0E80               	movlw	128
 27003  003C28  0100               	movlb	0	; () banked
 27004  003C2A  1776               	andwf	i1___ftmul@sign& (0+255),f,b
 27005                           
 27006                           ; BSR set to: 0
 27007  003C2C  0100               	movlb	0	; () banked
 27008  003C2E  8F69               	bsf	(i1___ftmul@f1+1)& (0+255),7,b
 27009                           
 27010                           ; BSR set to: 0
 27011  003C30  0100               	movlb	0	; () banked
 27012  003C32  8F6C               	bsf	(i1___ftmul@f2+1)& (0+255),7,b
 27013                           
 27014                           ; BSR set to: 0
 27015  003C34  0EFF               	movlw	255
 27016  003C36  0100               	movlb	0	; () banked
 27017  003C38  176B               	andwf	i1___ftmul@f2& (0+255),f,b
 27018  003C3A  0EFF               	movlw	255
 27019  003C3C  0100               	movlb	0	; () banked
 27020  003C3E  176C               	andwf	(i1___ftmul@f2+1)& (0+255),f,b
 27021  003C40  0E00               	movlw	0
 27022  003C42  0100               	movlb	0	; () banked
 27023  003C44  176D               	andwf	(i1___ftmul@f2+2)& (0+255),f,b
 27024                           
 27025                           ; BSR set to: 0
 27026  003C46  0E00               	movlw	0
 27027  003C48  0100               	movlb	0	; () banked
 27028  003C4A  6F72               	movwf	i1___ftmul@f3_as_product& (0+255),b
 27029  003C4C  0E00               	movlw	0
 27030  003C4E  0100               	movlb	0	; () banked
 27031  003C50  6F73               	movwf	(i1___ftmul@f3_as_product+1)& (0+255),b
 27032  003C52  0E00               	movlw	0
 27033  003C54  0100               	movlb	0	; () banked
 27034  003C56  6F74               	movwf	(i1___ftmul@f3_as_product+2)& (0+255),b
 27035                           
 27036                           ; BSR set to: 0
 27037  003C58  0E07               	movlw	7
 27038  003C5A  0100               	movlb	0	; () banked
 27039  003C5C  6F75               	movwf	i1___ftmul@cntr& (0+255),b
 27040  003C5E                     i1l6216:
 27041                           
 27042                           ; BSR set to: 0
 27043  003C5E  0100               	movlb	0	; () banked
 27044  003C60  A168               	btfss	i1___ftmul@f1& (0+255),0,b
 27045  003C62  D00C               	goto	i1l6220
 27046                           
 27047                           ; BSR set to: 0
 27048  003C64  0100               	movlb	0	; () banked
 27049  003C66  516B               	movf	i1___ftmul@f2& (0+255),w,b
 27050  003C68  0100               	movlb	0	; () banked
 27051  003C6A  2772               	addwf	i1___ftmul@f3_as_product& (0+255),f,b
 27052  003C6C  0100               	movlb	0	; () banked
 27053  003C6E  516C               	movf	(i1___ftmul@f2+1)& (0+255),w,b
 27054  003C70  0100               	movlb	0	; () banked
 27055  003C72  2373               	addwfc	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 27056  003C74  0100               	movlb	0	; () banked
 27057  003C76  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 27058  003C78  0100               	movlb	0	; () banked
 27059  003C7A  2374               	addwfc	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 27060  003C7C                     i1l6220:
 27061                           
 27062                           ; BSR set to: 0
 27063  003C7C  0100               	movlb	0	; () banked
 27064  003C7E  90D8               	bcf	status,0,c
 27065  003C80  336A               	rrcf	(i1___ftmul@f1+2)& (0+255),f,b
 27066  003C82  3369               	rrcf	(i1___ftmul@f1+1)& (0+255),f,b
 27067  003C84  3368               	rrcf	i1___ftmul@f1& (0+255),f,b
 27068  003C86  0100               	movlb	0	; () banked
 27069  003C88  90D8               	bcf	status,0,c
 27070  003C8A  376B               	rlcf	i1___ftmul@f2& (0+255),f,b
 27071  003C8C  376C               	rlcf	(i1___ftmul@f2+1)& (0+255),f,b
 27072  003C8E  376D               	rlcf	(i1___ftmul@f2+2)& (0+255),f,b
 27073                           
 27074                           ; BSR set to: 0
 27075  003C90  0100               	movlb	0	; () banked
 27076  003C92  2F75               	decfsz	i1___ftmul@cntr& (0+255),f,b
 27077  003C94  D7E4               	goto	i1l6216
 27078                           
 27079                           ; BSR set to: 0
 27080                           
 27081                           ; BSR set to: 0
 27082  003C96  0E09               	movlw	9
 27083  003C98  0100               	movlb	0	; () banked
 27084  003C9A  6F75               	movwf	i1___ftmul@cntr& (0+255),b
 27085  003C9C                     i1l6226:
 27086                           
 27087                           ; BSR set to: 0
 27088  003C9C  0100               	movlb	0	; () banked
 27089  003C9E  A168               	btfss	i1___ftmul@f1& (0+255),0,b
 27090  003CA0  D00C               	goto	i1l6230
 27091                           
 27092                           ; BSR set to: 0
 27093  003CA2  0100               	movlb	0	; () banked
 27094  003CA4  516B               	movf	i1___ftmul@f2& (0+255),w,b
 27095  003CA6  0100               	movlb	0	; () banked
 27096  003CA8  2772               	addwf	i1___ftmul@f3_as_product& (0+255),f,b
 27097  003CAA  0100               	movlb	0	; () banked
 27098  003CAC  516C               	movf	(i1___ftmul@f2+1)& (0+255),w,b
 27099  003CAE  0100               	movlb	0	; () banked
 27100  003CB0  2373               	addwfc	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 27101  003CB2  0100               	movlb	0	; () banked
 27102  003CB4  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 27103  003CB6  0100               	movlb	0	; () banked
 27104  003CB8  2374               	addwfc	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 27105  003CBA                     i1l6230:
 27106                           
 27107                           ; BSR set to: 0
 27108  003CBA  0100               	movlb	0	; () banked
 27109  003CBC  90D8               	bcf	status,0,c
 27110  003CBE  336A               	rrcf	(i1___ftmul@f1+2)& (0+255),f,b
 27111  003CC0  3369               	rrcf	(i1___ftmul@f1+1)& (0+255),f,b
 27112  003CC2  3368               	rrcf	i1___ftmul@f1& (0+255),f,b
 27113  003CC4  0100               	movlb	0	; () banked
 27114  003CC6  90D8               	bcf	status,0,c
 27115  003CC8  3374               	rrcf	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 27116  003CCA  3373               	rrcf	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 27117  003CCC  3372               	rrcf	i1___ftmul@f3_as_product& (0+255),f,b
 27118                           
 27119                           ; BSR set to: 0
 27120  003CCE  0100               	movlb	0	; () banked
 27121  003CD0  2F75               	decfsz	i1___ftmul@cntr& (0+255),f,b
 27122  003CD2  D7E4               	goto	i1l6226
 27123                           
 27124                           ; BSR set to: 0
 27125                           
 27126                           ; BSR set to: 0
 27127  003CD4  C072  F060         	movff	i1___ftmul@f3_as_product,i1___ftpack@arg
 27128  003CD8  C073  F061         	movff	i1___ftmul@f3_as_product+1,i1___ftpack@arg+1
 27129  003CDC  C074  F062         	movff	i1___ftmul@f3_as_product+2,i1___ftpack@arg+2
 27130  003CE0  C071  F063         	movff	i1___ftmul@exp,i1___ftpack@exp
 27131  003CE4  C076  F064         	movff	i1___ftmul@sign,i1___ftpack@sign
 27132  003CE8  ECEF  F025         	call	i1___ftpack	;wreg free
 27133  003CEC  C060  F068         	movff	?i1___ftpack,?i1___ftmul
 27134  003CF0  C061  F069         	movff	?i1___ftpack+1,?i1___ftmul+1
 27135  003CF4  C062  F06A         	movff	?i1___ftpack+2,?i1___ftmul+2
 27136  003CF8  0012               	return	
 27137  003CFA                     __end_ofi1___ftmul:
 27138                           	opt stack 0
 27139                           pclatu	equ	0xFFB
 27140                           pclath	equ	0xFFA
 27141                           tblptru	equ	0xFF8
 27142                           tblptrh	equ	0xFF7
 27143                           tblptrl	equ	0xFF6
 27144                           tablat	equ	0xFF5
 27145                           prodh	equ	0xFF4
 27146                           prodl	equ	0xFF3
 27147                           intcon	equ	0xFF2
 27148                           postinc0	equ	0xFEE
 27149                           fsr0h	equ	0xFEA
 27150                           fsr0l	equ	0xFE9
 27151                           wreg	equ	0xFE8
 27152                           postdec1	equ	0xFE5
 27153                           fsr1h	equ	0xFE2
 27154                           fsr1l	equ	0xFE1
 27155                           bsr	equ	0xFE0
 27156                           indf2	equ	0xFDF
 27157                           postinc2	equ	0xFDE
 27158                           postdec2	equ	0xFDD
 27159                           plusw2	equ	0xFDB
 27160                           fsr2h	equ	0xFDA
 27161                           fsr2l	equ	0xFD9
 27162                           status	equ	0xFD8
 27163                           
 27164 ;; *************** function i1___ftpack *****************
 27165 ;; Defined at:
 27166 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 27167 ;; Parameters:    Size  Location     Type
 27168 ;;  arg             3    0[BANK0 ] unsigned um
 27169 ;;  exp             1    3[BANK0 ] unsigned char 
 27170 ;;  sign            1    4[BANK0 ] unsigned char 
 27171 ;; Auto vars:     Size  Location     Type
 27172 ;;		None
 27173 ;; Return value:  Size  Location     Type
 27174 ;;                  3    0[BANK0 ] float 
 27175 ;; Registers used:
 27176 ;;		wreg, status,2, status,0
 27177 ;; Tracked objects:
 27178 ;;		On entry : 0/0
 27179 ;;		On exit  : 0/0
 27180 ;;		Unchanged: 0/0
 27181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27182 ;;      Params:         0       5       0       0       0       0       0
 27183 ;;      Locals:         0       0       0       0       0       0       0
 27184 ;;      Temps:          0       3       0       0       0       0       0
 27185 ;;      Totals:         0       8       0       0       0       0       0
 27186 ;;Total ram usage:        8 bytes
 27187 ;; Hardware stack levels used:    1
 27188 ;; Hardware stack levels required when called:    4
 27189 ;; This function calls:
 27190 ;;		Nothing
 27191 ;; This function is called by:
 27192 ;;		i1___altoft
 27193 ;;		i1___ftadd
 27194 ;;		i1___ftdiv
 27195 ;;		i1___ftmul
 27196 ;; This function uses a non-reentrant model
 27197 ;;
 27198                           
 27199                           	psect	text114
 27200  004BDE                     __ptext114:
 27201                           	opt stack 0
 27202  004BDE                     i1___ftpack:
 27203                           	opt stack 11
 27204                           
 27205                           ;incstack = 0
 27206  004BDE  0100               	movlb	0	; () banked
 27207  004BE0  5163               	movf	i1___ftpack@exp& (0+255),w,b
 27208  004BE2  0100               	movlb	0	; () banked
 27209  004BE4  B4D8               	btfsc	status,2,c
 27210  004BE6  D008               	goto	i1l5840
 27211                           
 27212                           ; BSR set to: 0
 27213  004BE8  0100               	movlb	0	; () banked
 27214  004BEA  5160               	movf	i1___ftpack@arg& (0+255),w,b
 27215  004BEC  0100               	movlb	0	; () banked
 27216  004BEE  1161               	iorwf	(i1___ftpack@arg+1)& (0+255),w,b
 27217  004BF0  0100               	movlb	0	; () banked
 27218  004BF2  1162               	iorwf	(i1___ftpack@arg+2)& (0+255),w,b
 27219  004BF4  A4D8               	btfss	status,2,c
 27220  004BF6  D011               	goto	i1l5846
 27221  004BF8                     i1l5840:
 27222                           
 27223                           ; BSR set to: 0
 27224  004BF8  0E00               	movlw	0
 27225  004BFA  0100               	movlb	0	; () banked
 27226  004BFC  6F60               	movwf	?i1___ftpack& (0+255),b
 27227  004BFE  0E00               	movlw	0
 27228  004C00  0100               	movlb	0	; () banked
 27229  004C02  6F61               	movwf	(?i1___ftpack+1)& (0+255),b
 27230  004C04  0E00               	movlw	0
 27231  004C06  0100               	movlb	0	; () banked
 27232  004C08  6F62               	movwf	(?i1___ftpack+2)& (0+255),b
 27233                           
 27234                           ; BSR set to: 0
 27235  004C0A  0012               	return	
 27236  004C0C                     i1l5844:
 27237                           
 27238                           ; BSR set to: 0
 27239  004C0C  0100               	movlb	0	; () banked
 27240  004C0E  2B63               	incf	i1___ftpack@exp& (0+255),f,b
 27241  004C10  0100               	movlb	0	; () banked
 27242  004C12  90D8               	bcf	status,0,c
 27243  004C14  3362               	rrcf	(i1___ftpack@arg+2)& (0+255),f,b
 27244  004C16  3361               	rrcf	(i1___ftpack@arg+1)& (0+255),f,b
 27245  004C18  3360               	rrcf	i1___ftpack@arg& (0+255),f,b
 27246  004C1A                     i1l5846:
 27247                           
 27248                           ; BSR set to: 0
 27249  004C1A  0E00               	movlw	0
 27250  004C1C  0100               	movlb	0	; () banked
 27251  004C1E  1560               	andwf	i1___ftpack@arg& (0+255),w,b
 27252  004C20  0100               	movlb	0	; () banked
 27253  004C22  6F65               	movwf	??i1___ftpack& (0+255),b
 27254  004C24  0E00               	movlw	0
 27255  004C26  0100               	movlb	0	; () banked
 27256  004C28  1561               	andwf	(i1___ftpack@arg+1)& (0+255),w,b
 27257  004C2A  0100               	movlb	0	; () banked
 27258  004C2C  6F66               	movwf	(??i1___ftpack+1)& (0+255),b
 27259  004C2E  0EFE               	movlw	254
 27260  004C30  0100               	movlb	0	; () banked
 27261  004C32  1562               	andwf	(i1___ftpack@arg+2)& (0+255),w,b
 27262  004C34  0100               	movlb	0	; () banked
 27263  004C36  6F67               	movwf	(??i1___ftpack+2)& (0+255),b
 27264  004C38  0100               	movlb	0	; () banked
 27265  004C3A  5165               	movf	??i1___ftpack& (0+255),w,b
 27266  004C3C  0100               	movlb	0	; () banked
 27267  004C3E  1166               	iorwf	(??i1___ftpack+1)& (0+255),w,b
 27268  004C40  0100               	movlb	0	; () banked
 27269  004C42  1167               	iorwf	(??i1___ftpack+2)& (0+255),w,b
 27270  004C44  B4D8               	btfsc	status,2,c
 27271  004C46  D011               	goto	i1l5852
 27272  004C48  D7E1               	goto	i1l5844
 27273  004C4A                     i1l5848:
 27274                           
 27275                           ; BSR set to: 0
 27276  004C4A  0100               	movlb	0	; () banked
 27277  004C4C  2B63               	incf	i1___ftpack@exp& (0+255),f,b
 27278                           
 27279                           ; BSR set to: 0
 27280  004C4E  0E01               	movlw	1
 27281  004C50  0100               	movlb	0	; () banked
 27282  004C52  2760               	addwf	i1___ftpack@arg& (0+255),f,b
 27283  004C54  0E00               	movlw	0
 27284  004C56  0100               	movlb	0	; () banked
 27285  004C58  2361               	addwfc	(i1___ftpack@arg+1)& (0+255),f,b
 27286  004C5A  0E00               	movlw	0
 27287  004C5C  0100               	movlb	0	; () banked
 27288  004C5E  2362               	addwfc	(i1___ftpack@arg+2)& (0+255),f,b
 27289  004C60  0100               	movlb	0	; () banked
 27290  004C62  90D8               	bcf	status,0,c
 27291  004C64  3362               	rrcf	(i1___ftpack@arg+2)& (0+255),f,b
 27292  004C66  3361               	rrcf	(i1___ftpack@arg+1)& (0+255),f,b
 27293  004C68  3360               	rrcf	i1___ftpack@arg& (0+255),f,b
 27294  004C6A                     i1l5852:
 27295                           
 27296                           ; BSR set to: 0
 27297  004C6A  0E00               	movlw	0
 27298  004C6C  0100               	movlb	0	; () banked
 27299  004C6E  1560               	andwf	i1___ftpack@arg& (0+255),w,b
 27300  004C70  0100               	movlb	0	; () banked
 27301  004C72  6F65               	movwf	??i1___ftpack& (0+255),b
 27302  004C74  0E00               	movlw	0
 27303  004C76  0100               	movlb	0	; () banked
 27304  004C78  1561               	andwf	(i1___ftpack@arg+1)& (0+255),w,b
 27305  004C7A  0100               	movlb	0	; () banked
 27306  004C7C  6F66               	movwf	(??i1___ftpack+1)& (0+255),b
 27307  004C7E  0EFF               	movlw	255
 27308  004C80  0100               	movlb	0	; () banked
 27309  004C82  1562               	andwf	(i1___ftpack@arg+2)& (0+255),w,b
 27310  004C84  0100               	movlb	0	; () banked
 27311  004C86  6F67               	movwf	(??i1___ftpack+2)& (0+255),b
 27312  004C88  0100               	movlb	0	; () banked
 27313  004C8A  5165               	movf	??i1___ftpack& (0+255),w,b
 27314  004C8C  0100               	movlb	0	; () banked
 27315  004C8E  1166               	iorwf	(??i1___ftpack+1)& (0+255),w,b
 27316  004C90  0100               	movlb	0	; () banked
 27317  004C92  1167               	iorwf	(??i1___ftpack+2)& (0+255),w,b
 27318  004C94  B4D8               	btfsc	status,2,c
 27319  004C96  D008               	goto	i1l5856
 27320  004C98  D7D8               	goto	i1l5848
 27321  004C9A                     i1l5854:
 27322                           
 27323                           ; BSR set to: 0
 27324  004C9A  0100               	movlb	0	; () banked
 27325  004C9C  0763               	decf	i1___ftpack@exp& (0+255),f,b
 27326  004C9E  0100               	movlb	0	; () banked
 27327  004CA0  90D8               	bcf	status,0,c
 27328  004CA2  3760               	rlcf	i1___ftpack@arg& (0+255),f,b
 27329  004CA4  3761               	rlcf	(i1___ftpack@arg+1)& (0+255),f,b
 27330  004CA6  3762               	rlcf	(i1___ftpack@arg+2)& (0+255),f,b
 27331  004CA8                     i1l5856:
 27332                           
 27333                           ; BSR set to: 0
 27334  004CA8  0100               	movlb	0	; () banked
 27335  004CAA  BF61               	btfsc	(i1___ftpack@arg+1)& (0+255),7,b
 27336  004CAC  D004               	goto	i1l1311
 27337                           
 27338                           ; BSR set to: 0
 27339  004CAE  0E02               	movlw	2
 27340  004CB0  0100               	movlb	0	; () banked
 27341  004CB2  6163               	cpfslt	i1___ftpack@exp& (0+255),b
 27342  004CB4  D7F2               	goto	i1l5854
 27343  004CB6                     i1l1311:
 27344                           
 27345                           ; BSR set to: 0
 27346  004CB6  0100               	movlb	0	; () banked
 27347  004CB8  B163               	btfsc	i1___ftpack@exp& (0+255),0,b
 27348  004CBA  D002               	goto	i1l5862
 27349                           
 27350                           ; BSR set to: 0
 27351  004CBC  0100               	movlb	0	; () banked
 27352  004CBE  9F61               	bcf	(i1___ftpack@arg+1)& (0+255),7,b
 27353  004CC0                     i1l5862:
 27354                           
 27355                           ; BSR set to: 0
 27356  004CC0  0100               	movlb	0	; () banked
 27357  004CC2  90D8               	bcf	status,0,c
 27358  004CC4  3363               	rrcf	i1___ftpack@exp& (0+255),f,b
 27359  004CC6  0100               	movlb	0	; () banked
 27360  004CC8  5163               	movf	i1___ftpack@exp& (0+255),w,b
 27361  004CCA  0100               	movlb	0	; () banked
 27362  004CCC  1362               	iorwf	(i1___ftpack@arg+2)& (0+255),f,b
 27363                           
 27364                           ; BSR set to: 0
 27365  004CCE  0100               	movlb	0	; () banked
 27366  004CD0  5164               	movf	i1___ftpack@sign& (0+255),w,b
 27367  004CD2  0100               	movlb	0	; () banked
 27368  004CD4  B4D8               	btfsc	status,2,c
 27369  004CD6  D002               	goto	i1l5868
 27370                           
 27371                           ; BSR set to: 0
 27372  004CD8  0100               	movlb	0	; () banked
 27373  004CDA  8F62               	bsf	(i1___ftpack@arg+2)& (0+255),7,b
 27374  004CDC                     i1l5868:
 27375                           
 27376                           ; BSR set to: 0
 27377  004CDC  C060  F060         	movff	i1___ftpack@arg,?i1___ftpack
 27378  004CE0  C061  F061         	movff	i1___ftpack@arg+1,?i1___ftpack+1
 27379  004CE4  C062  F062         	movff	i1___ftpack@arg+2,?i1___ftpack+2
 27380  004CE8  0012               	return	
 27381  004CEA                     __end_ofi1___ftpack:
 27382                           	opt stack 0
 27383                           pclatu	equ	0xFFB
 27384                           pclath	equ	0xFFA
 27385                           tblptru	equ	0xFF8
 27386                           tblptrh	equ	0xFF7
 27387                           tblptrl	equ	0xFF6
 27388                           tablat	equ	0xFF5
 27389                           prodh	equ	0xFF4
 27390                           prodl	equ	0xFF3
 27391                           intcon	equ	0xFF2
 27392                           postinc0	equ	0xFEE
 27393                           fsr0h	equ	0xFEA
 27394                           fsr0l	equ	0xFE9
 27395                           wreg	equ	0xFE8
 27396                           postdec1	equ	0xFE5
 27397                           fsr1h	equ	0xFE2
 27398                           fsr1l	equ	0xFE1
 27399                           bsr	equ	0xFE0
 27400                           indf2	equ	0xFDF
 27401                           postinc2	equ	0xFDE
 27402                           postdec2	equ	0xFDD
 27403                           plusw2	equ	0xFDB
 27404                           fsr2h	equ	0xFDA
 27405                           fsr2l	equ	0xFD9
 27406                           status	equ	0xFD8
 27407                           
 27408 ;; *************** function _T2int *****************
 27409 ;; Defined at:
 27410 ;;		line 62 in file "source/PWMConfig.h"
 27411 ;; Parameters:    Size  Location     Type
 27412 ;;		None
 27413 ;; Auto vars:     Size  Location     Type
 27414 ;;		None
 27415 ;; Return value:  Size  Location     Type
 27416 ;;                  1    wreg      void 
 27417 ;; Registers used:
 27418 ;;		wreg, status,2, status,0, cstack
 27419 ;; Tracked objects:
 27420 ;;		On entry : 0/0
 27421 ;;		On exit  : 0/0
 27422 ;;		Unchanged: 0/0
 27423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27424 ;;      Params:         0       0       0       0       0       0       0
 27425 ;;      Locals:         0       0       0       0       0       0       0
 27426 ;;      Temps:          0       1       0       0       0       0       0
 27427 ;;      Totals:         0       1       0       0       0       0       0
 27428 ;;Total ram usage:        1 bytes
 27429 ;; Hardware stack levels used:    1
 27430 ;; Hardware stack levels required when called:    6
 27431 ;; This function calls:
 27432 ;;		_saveProcessState
 27433 ;;		i1_initProtocoll
 27434 ;;		i1_setPWM2duty
 27435 ;; This function is called by:
 27436 ;;		_isr
 27437 ;; This function uses a non-reentrant model
 27438 ;;
 27439                           
 27440                           	psect	text115
 27441  002CA8                     __ptext115:
 27442                           	opt stack 0
 27443  002CA8                     _T2int:
 27444                           	opt stack 13
 27445                           
 27446                           ;PWMConfig.h: 63: if(!processStarted && actualScreen != 14 && !ready2Cut)
 27447                           
 27448                           ; BSR set to: 0
 27449                           ;incstack = 0
 27450  002CA8  0100               	movlb	0	; () banked
 27451  002CAA  51C4               	movf	_processStarted& (0+255),w,b
 27452  002CAC  A4D8               	btfss	status,2,c
 27453  002CAE  D009               	goto	i1l9032
 27454                           
 27455                           ; BSR set to: 0
 27456  002CB0  0E0E               	movlw	14
 27457  002CB2  0101               	movlb	1	; () banked
 27458  002CB4  19B9               	xorwf	_actualScreen& (0+255),w,b
 27459  002CB6  B4D8               	btfsc	status,2,c
 27460  002CB8  D004               	goto	i1l9032
 27461                           
 27462                           ; BSR set to: 1
 27463  002CBA  0100               	movlb	0	; () banked
 27464  002CBC  51C5               	movf	_ready2Cut& (0+255),w,b
 27465  002CBE  B4D8               	btfsc	status,2,c
 27466                           
 27467                           ; BSR set to: 0
 27468                           ;PWMConfig.h: 64: LATCbits.LATC4 = 0;
 27469  002CC0  988B               	bcf	3979,4,c	;volatile
 27470  002CC2                     i1l9032:
 27471                           
 27472                           ;PWMConfig.h: 65: t2Cont1++;
 27473  002CC2  0100               	movlb	0	; () banked
 27474  002CC4  2BC6               	incf	_t2Cont1& (0+255),f,b
 27475                           
 27476                           ; BSR set to: 0
 27477                           ;PWMConfig.h: 66: if(PORTAbits.RA7 && !lastSttFC1) {
 27478  002CC6  AE80               	btfss	3968,7,c	;volatile
 27479  002CC8  D052               	goto	i1l506
 27480                           
 27481                           ; BSR set to: 0
 27482  002CCA  0100               	movlb	0	; () banked
 27483  002CCC  51C2               	movf	_lastSttFC1& (0+255),w,b
 27484  002CCE  A4D8               	btfss	status,2,c
 27485  002CD0  D04E               	goto	i1l506
 27486                           
 27487                           ; BSR set to: 0
 27488                           ;PWMConfig.h: 67: lastSttFC1 = 1;
 27489  002CD2  0E01               	movlw	1
 27490  002CD4  0100               	movlb	0	; () banked
 27491  002CD6  6FC2               	movwf	_lastSttFC1& (0+255),b
 27492                           
 27493                           ; BSR set to: 0
 27494                           ;PWMConfig.h: 68: setPWM2duty(0);
 27495  002CD8  0E00               	movlw	0
 27496  002CDA  0100               	movlb	0	; () banked
 27497  002CDC  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 27498  002CDE  0E00               	movlw	0
 27499  002CE0  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 27500  002CE2  ECCF  F02F         	call	i1_setPWM2duty	;wreg free
 27501                           
 27502                           ;PWMConfig.h: 69: bladeIsUP = 1;
 27503  002CE6  0E01               	movlw	1
 27504  002CE8  0100               	movlb	0	; () banked
 27505  002CEA  6FD4               	movwf	_bladeIsUP& (0+255),b
 27506                           
 27507                           ; BSR set to: 0
 27508                           ;PWMConfig.h: 70: processTimer = 0;
 27509  002CEC  0E00               	movlw	0
 27510  002CEE  6E37               	movwf	_processTimer,c
 27511  002CF0  0E00               	movlw	0
 27512  002CF2  6E38               	movwf	_processTimer+1,c
 27513  002CF4  0E00               	movlw	0
 27514  002CF6  6E39               	movwf	_processTimer+2,c
 27515  002CF8  0E00               	movlw	0
 27516  002CFA  6E3A               	movwf	_processTimer+3,c
 27517                           
 27518                           ; BSR set to: 0
 27519                           ;PWMConfig.h: 71: if(processStarted)
 27520  002CFC  0100               	movlb	0	; () banked
 27521  002CFE  51C4               	movf	_processStarted& (0+255),w,b
 27522  002D00  B4D8               	btfsc	status,2,c
 27523  002D02  D003               	goto	i1l9050
 27524                           
 27525                           ; BSR set to: 0
 27526                           ;PWMConfig.h: 72: processState++;
 27527  002D04  0100               	movlb	0	; () banked
 27528  002D06  4BB4               	infsnz	_processState& (0+255),f,b
 27529  002D08  2BB5               	incf	(_processState+1)& (0+255),f,b
 27530  002D0A                     i1l9050:
 27531                           
 27532                           ; BSR set to: 0
 27533                           ;PWMConfig.h: 73: securTimer = 0;
 27534  002D0A  0E00               	movlw	0
 27535  002D0C  6E3B               	movwf	_securTimer,c
 27536  002D0E  0E00               	movlw	0
 27537  002D10  6E3C               	movwf	_securTimer+1,c
 27538  002D12  0E00               	movlw	0
 27539  002D14  6E3D               	movwf	_securTimer+2,c
 27540  002D16  0E00               	movlw	0
 27541  002D18  6E3E               	movwf	_securTimer+3,c
 27542                           
 27543                           ; BSR set to: 0
 27544                           ;PWMConfig.h: 74: if(processStarted && processState >= numCortes) {
 27545  002D1A  0100               	movlb	0	; () banked
 27546  002D1C  51C4               	movf	_processStarted& (0+255),w,b
 27547  002D1E  B4D8               	btfsc	status,2,c
 27548  002D20  D022               	goto	i1l9066
 27549                           
 27550                           ; BSR set to: 0
 27551  002D22  0100               	movlb	0	; () banked
 27552  002D24  51D0               	movf	_numCortes& (0+255),w,b
 27553  002D26  0100               	movlb	0	; () banked
 27554  002D28  5DB4               	subwf	_processState& (0+255),w,b
 27555  002D2A  0100               	movlb	0	; () banked
 27556  002D2C  51B5               	movf	(_processState+1)& (0+255),w,b
 27557  002D2E  0A80               	xorlw	128
 27558  002D30  0100               	movlb	0	; () banked
 27559  002D32  6F67               	movwf	??_T2int& (0+255),b
 27560  002D34  0100               	movlb	0	; () banked
 27561  002D36  51D1               	movf	(_numCortes+1)& (0+255),w,b
 27562  002D38  0A80               	xorlw	128
 27563  002D3A  0100               	movlb	0	; () banked
 27564  002D3C  5967               	subwfb	??_T2int& (0+255),w,b
 27565  002D3E  A0D8               	btfss	status,0,c
 27566  002D40  D012               	goto	i1l9066
 27567                           
 27568                           ; BSR set to: 0
 27569                           ;PWMConfig.h: 75: processStarted = 0;
 27570  002D42  0E00               	movlw	0
 27571  002D44  0100               	movlb	0	; () banked
 27572  002D46  6FC4               	movwf	_processStarted& (0+255),b
 27573                           
 27574                           ; BSR set to: 0
 27575                           ;PWMConfig.h: 76: saveProcessState();
 27576  002D48  EC9F  F037         	call	_saveProcessState	;wreg free
 27577                           
 27578                           ;PWMConfig.h: 77: if(calibMode) {
 27579  002D4C  0100               	movlb	0	; () banked
 27580  002D4E  51BB               	movf	_calibMode& (0+255),w,b
 27581  002D50  B4D8               	btfsc	status,2,c
 27582  002D52  D006               	goto	i1l9064
 27583                           
 27584                           ; BSR set to: 0
 27585                           ;PWMConfig.h: 78: actualScreen = 12;
 27586  002D54  0E0C               	movlw	12
 27587  002D56  0101               	movlb	1	; () banked
 27588  002D58  6FB9               	movwf	_actualScreen& (0+255),b
 27589                           
 27590                           ;PWMConfig.h: 79: tempLastScreen = 6;
 27591  002D5A  0E06               	movlw	6
 27592  002D5C  0100               	movlb	0	; () banked
 27593  002D5E  6FC8               	movwf	_tempLastScreen& (0+255),b
 27594  002D60                     i1l9064:
 27595                           
 27596                           ; BSR set to: 0
 27597                           ;PWMConfig.h: 80: }
 27598                           ;PWMConfig.h: 81: initProtocoll(1);
 27599  002D60  0E01               	movlw	1
 27600  002D62  ECC9  F036         	call	i1_initProtocoll
 27601  002D66                     i1l9066:
 27602                           
 27603                           ;PWMConfig.h: 82: }
 27604                           ;PWMConfig.h: 84: t2Cont1 = 0;
 27605  002D66  0E00               	movlw	0
 27606  002D68  0100               	movlb	0	; () banked
 27607  002D6A  6FC6               	movwf	_t2Cont1& (0+255),b
 27608                           
 27609                           ;PWMConfig.h: 85: }else if(!PORTAbits.RA7 && lastSttFC1) {
 27610  002D6C  D01B               	goto	i1l9080
 27611  002D6E                     i1l506:
 27612                           
 27613                           ; BSR set to: 0
 27614  002D6E  BE80               	btfsc	3968,7,c	;volatile
 27615  002D70  D00C               	goto	i1l9074
 27616                           
 27617                           ; BSR set to: 0
 27618  002D72  0100               	movlb	0	; () banked
 27619  002D74  51C2               	movf	_lastSttFC1& (0+255),w,b
 27620  002D76  B4D8               	btfsc	status,2,c
 27621  002D78  D008               	goto	i1l9074
 27622                           
 27623                           ; BSR set to: 0
 27624                           ;PWMConfig.h: 86: if(t2Cont1 > 124)
 27625  002D7A  0E7C               	movlw	124
 27626  002D7C  0100               	movlb	0	; () banked
 27627  002D7E  65C6               	cpfsgt	_t2Cont1& (0+255),b
 27628  002D80  D011               	goto	i1l9080
 27629                           
 27630                           ; BSR set to: 0
 27631                           ;PWMConfig.h: 87: lastSttFC1 = 0;
 27632  002D82  0E00               	movlw	0
 27633  002D84  0100               	movlb	0	; () banked
 27634  002D86  6FC2               	movwf	_lastSttFC1& (0+255),b
 27635                           
 27636                           ; BSR set to: 0
 27637                           ;PWMConfig.h: 92: }else if(PORTAbits.RA7 == lastSttFC1) {
 27638  002D88  D00D               	goto	i1l9080
 27639  002D8A                     i1l9074:
 27640                           
 27641                           ; BSR set to: 0
 27642  002D8A  AE80               	btfss	3968,7,c	;volatile
 27643  002D8C  D002               	goto	i1u1304_20
 27644  002D8E  0E01               	movlw	1
 27645  002D90  D001               	goto	i1u1304_26
 27646  002D92                     i1u1304_20:
 27647  002D92  0E00               	movlw	0
 27648  002D94                     i1u1304_26:
 27649  002D94  0100               	movlb	0	; () banked
 27650  002D96  19C2               	xorwf	_lastSttFC1& (0+255),w,b
 27651  002D98  B4D8               	btfsc	status,2,c
 27652                           
 27653                           ; BSR set to: 0
 27654                           ;PWMConfig.h: 93: if(!PORTAbits.RA7) {
 27655  002D9A  BE80               	btfsc	3968,7,c	;volatile
 27656  002D9C  D003               	goto	i1l9080
 27657                           
 27658                           ; BSR set to: 0
 27659                           ;PWMConfig.h: 94: holdFC1cont = 0;
 27660  002D9E  0E00               	movlw	0
 27661  002DA0  0100               	movlb	0	; () banked
 27662  002DA2  6FBE               	movwf	_holdFC1cont& (0+255),b
 27663  002DA4                     i1l9080:
 27664                           
 27665                           ; BSR set to: 0
 27666                           ;PWMConfig.h: 107: }
 27667                           ;PWMConfig.h: 108: }
 27668                           ;PWMConfig.h: 109: t2Cont2++;
 27669  002DA4  0100               	movlb	0	; () banked
 27670  002DA6  2BC7               	incf	_t2Cont2& (0+255),f,b
 27671                           
 27672                           ; BSR set to: 0
 27673                           ;PWMConfig.h: 110: if(PORTAbits.RA6 && !lastSttFC2) {
 27674  002DA8  AC80               	btfss	3968,6,c	;volatile
 27675  002DAA  D05E               	goto	i1l517
 27676                           
 27677                           ; BSR set to: 0
 27678  002DAC  0100               	movlb	0	; () banked
 27679  002DAE  51C3               	movf	_lastSttFC2& (0+255),w,b
 27680  002DB0  A4D8               	btfss	status,2,c
 27681  002DB2  D05A               	goto	i1l517
 27682                           
 27683                           ; BSR set to: 0
 27684                           ;PWMConfig.h: 111: lastSttFC2 = 1;
 27685  002DB4  0E01               	movlw	1
 27686  002DB6  0100               	movlb	0	; () banked
 27687  002DB8  6FC3               	movwf	_lastSttFC2& (0+255),b
 27688                           
 27689                           ; BSR set to: 0
 27690                           ;PWMConfig.h: 112: setPWM2duty(0);
 27691  002DBA  0E00               	movlw	0
 27692  002DBC  0100               	movlb	0	; () banked
 27693  002DBE  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 27694  002DC0  0E00               	movlw	0
 27695  002DC2  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 27696  002DC4  ECCF  F02F         	call	i1_setPWM2duty	;wreg free
 27697                           
 27698                           ;PWMConfig.h: 113: bladeIsUP = 0;
 27699  002DC8  0E00               	movlw	0
 27700  002DCA  0100               	movlb	0	; () banked
 27701  002DCC  6FD4               	movwf	_bladeIsUP& (0+255),b
 27702                           
 27703                           ; BSR set to: 0
 27704                           ;PWMConfig.h: 114: processTimer = 0;
 27705  002DCE  0E00               	movlw	0
 27706  002DD0  6E37               	movwf	_processTimer,c
 27707  002DD2  0E00               	movlw	0
 27708  002DD4  6E38               	movwf	_processTimer+1,c
 27709  002DD6  0E00               	movlw	0
 27710  002DD8  6E39               	movwf	_processTimer+2,c
 27711  002DDA  0E00               	movlw	0
 27712  002DDC  6E3A               	movwf	_processTimer+3,c
 27713                           
 27714                           ; BSR set to: 0
 27715                           ;PWMConfig.h: 115: securTimer = 0;
 27716  002DDE  0E00               	movlw	0
 27717  002DE0  6E3B               	movwf	_securTimer,c
 27718  002DE2  0E00               	movlw	0
 27719  002DE4  6E3C               	movwf	_securTimer+1,c
 27720  002DE6  0E00               	movlw	0
 27721  002DE8  6E3D               	movwf	_securTimer+2,c
 27722  002DEA  0E00               	movlw	0
 27723  002DEC  6E3E               	movwf	_securTimer+3,c
 27724                           
 27725                           ; BSR set to: 0
 27726                           ;PWMConfig.h: 116: if(processStarted)
 27727  002DEE  0100               	movlb	0	; () banked
 27728  002DF0  51C4               	movf	_processStarted& (0+255),w,b
 27729  002DF2  B4D8               	btfsc	status,2,c
 27730  002DF4  D003               	goto	i1l9100
 27731                           
 27732                           ; BSR set to: 0
 27733                           ;PWMConfig.h: 117: processState++;
 27734  002DF6  0100               	movlb	0	; () banked
 27735  002DF8  4BB4               	infsnz	_processState& (0+255),f,b
 27736  002DFA  2BB5               	incf	(_processState+1)& (0+255),f,b
 27737  002DFC                     i1l9100:
 27738                           
 27739                           ; BSR set to: 0
 27740                           ;PWMConfig.h: 118: if(ready2Cut) {
 27741  002DFC  0100               	movlb	0	; () banked
 27742  002DFE  51C5               	movf	_ready2Cut& (0+255),w,b
 27743  002E00  B4D8               	btfsc	status,2,c
 27744  002E02  D006               	goto	i1l9104
 27745                           
 27746                           ; BSR set to: 0
 27747                           ;PWMConfig.h: 119: processStarted = 1;
 27748  002E04  0E01               	movlw	1
 27749  002E06  0100               	movlb	0	; () banked
 27750  002E08  6FC4               	movwf	_processStarted& (0+255),b
 27751                           
 27752                           ;PWMConfig.h: 120: ready2Cut = 0;
 27753  002E0A  0E00               	movlw	0
 27754  002E0C  0100               	movlb	0	; () banked
 27755  002E0E  6FC5               	movwf	_ready2Cut& (0+255),b
 27756  002E10                     i1l9104:
 27757                           
 27758                           ; BSR set to: 0
 27759                           ;PWMConfig.h: 121: }
 27760                           ;PWMConfig.h: 122: saveProcessState();
 27761  002E10  EC9F  F037         	call	_saveProcessState	;wreg free
 27762                           
 27763                           ;PWMConfig.h: 123: if(processStarted && processState >= numCortes) {
 27764  002E14  0100               	movlb	0	; () banked
 27765  002E16  51C4               	movf	_processStarted& (0+255),w,b
 27766  002E18  B4D8               	btfsc	status,2,c
 27767  002E1A  D022               	goto	i1l9120
 27768                           
 27769                           ; BSR set to: 0
 27770  002E1C  0100               	movlb	0	; () banked
 27771  002E1E  51D0               	movf	_numCortes& (0+255),w,b
 27772  002E20  0100               	movlb	0	; () banked
 27773  002E22  5DB4               	subwf	_processState& (0+255),w,b
 27774  002E24  0100               	movlb	0	; () banked
 27775  002E26  51B5               	movf	(_processState+1)& (0+255),w,b
 27776  002E28  0A80               	xorlw	128
 27777  002E2A  0100               	movlb	0	; () banked
 27778  002E2C  6F67               	movwf	??_T2int& (0+255),b
 27779  002E2E  0100               	movlb	0	; () banked
 27780  002E30  51D1               	movf	(_numCortes+1)& (0+255),w,b
 27781  002E32  0A80               	xorlw	128
 27782  002E34  0100               	movlb	0	; () banked
 27783  002E36  5967               	subwfb	??_T2int& (0+255),w,b
 27784  002E38  A0D8               	btfss	status,0,c
 27785  002E3A  D012               	goto	i1l9120
 27786                           
 27787                           ; BSR set to: 0
 27788                           ;PWMConfig.h: 124: processStarted = 0;
 27789  002E3C  0E00               	movlw	0
 27790  002E3E  0100               	movlb	0	; () banked
 27791  002E40  6FC4               	movwf	_processStarted& (0+255),b
 27792                           
 27793                           ; BSR set to: 0
 27794                           ;PWMConfig.h: 125: saveProcessState();
 27795  002E42  EC9F  F037         	call	_saveProcessState	;wreg free
 27796                           
 27797                           ;PWMConfig.h: 126: if(calibMode) {
 27798  002E46  0100               	movlb	0	; () banked
 27799  002E48  51BB               	movf	_calibMode& (0+255),w,b
 27800  002E4A  B4D8               	btfsc	status,2,c
 27801  002E4C  D006               	goto	i1l9118
 27802                           
 27803                           ; BSR set to: 0
 27804                           ;PWMConfig.h: 127: actualScreen = 12;
 27805  002E4E  0E0C               	movlw	12
 27806  002E50  0101               	movlb	1	; () banked
 27807  002E52  6FB9               	movwf	_actualScreen& (0+255),b
 27808                           
 27809                           ;PWMConfig.h: 128: tempLastScreen = 6;
 27810  002E54  0E06               	movlw	6
 27811  002E56  0100               	movlb	0	; () banked
 27812  002E58  6FC8               	movwf	_tempLastScreen& (0+255),b
 27813  002E5A                     i1l9118:
 27814                           
 27815                           ; BSR set to: 0
 27816                           ;PWMConfig.h: 129: }
 27817                           ;PWMConfig.h: 130: initProtocoll(1);
 27818  002E5A  0E01               	movlw	1
 27819  002E5C  ECC9  F036         	call	i1_initProtocoll
 27820  002E60                     i1l9120:
 27821                           
 27822                           ;PWMConfig.h: 131: }
 27823                           ;PWMConfig.h: 132: t2Cont2 = 0;
 27824  002E60  0E00               	movlw	0
 27825  002E62  0100               	movlb	0	; () banked
 27826  002E64  6FC7               	movwf	_t2Cont2& (0+255),b
 27827                           
 27828                           ;PWMConfig.h: 133: }else if(!PORTAbits.RA6 && lastSttFC2) {
 27829  002E66  0012               	return	
 27830  002E68                     i1l517:
 27831                           
 27832                           ; BSR set to: 0
 27833  002E68  BC80               	btfsc	3968,6,c	;volatile
 27834  002E6A  D00C               	goto	i1l9128
 27835                           
 27836                           ; BSR set to: 0
 27837  002E6C  0100               	movlb	0	; () banked
 27838  002E6E  51C3               	movf	_lastSttFC2& (0+255),w,b
 27839  002E70  B4D8               	btfsc	status,2,c
 27840  002E72  D008               	goto	i1l9128
 27841                           
 27842                           ; BSR set to: 0
 27843                           ;PWMConfig.h: 134: if(t2Cont2 > 124)
 27844  002E74  0E7C               	movlw	124
 27845  002E76  0100               	movlb	0	; () banked
 27846  002E78  65C7               	cpfsgt	_t2Cont2& (0+255),b
 27847  002E7A  0012               	return	
 27848                           
 27849                           ; BSR set to: 0
 27850                           ;PWMConfig.h: 135: lastSttFC2 = 0;
 27851  002E7C  0E00               	movlw	0
 27852  002E7E  0100               	movlb	0	; () banked
 27853  002E80  6FC3               	movwf	_lastSttFC2& (0+255),b
 27854                           
 27855                           ; BSR set to: 0
 27856                           ;PWMConfig.h: 140: }else if(PORTAbits.RA6 == lastSttFC2) {
 27857  002E82  0012               	return	
 27858  002E84                     i1l9128:
 27859                           
 27860                           ; BSR set to: 0
 27861  002E84  AC80               	btfss	3968,6,c	;volatile
 27862  002E86  D002               	goto	i1u1317_20
 27863  002E88  0E01               	movlw	1
 27864  002E8A  D001               	goto	i1u1317_26
 27865  002E8C                     i1u1317_20:
 27866  002E8C  0E00               	movlw	0
 27867  002E8E                     i1u1317_26:
 27868  002E8E  0100               	movlb	0	; () banked
 27869  002E90  19C3               	xorwf	_lastSttFC2& (0+255),w,b
 27870  002E92  A4D8               	btfss	status,2,c
 27871  002E94  0012               	return	
 27872                           
 27873                           ; BSR set to: 0
 27874                           ;PWMConfig.h: 141: if(!PORTAbits.RA6) {
 27875  002E96  BC80               	btfsc	3968,6,c	;volatile
 27876  002E98  0012               	return	
 27877                           
 27878                           ; BSR set to: 0
 27879                           ;PWMConfig.h: 142: holdFC2cont = 0;
 27880  002E9A  0E00               	movlw	0
 27881  002E9C  0100               	movlb	0	; () banked
 27882  002E9E  6FBF               	movwf	_holdFC2cont& (0+255),b
 27883                           
 27884                           ; BSR set to: 0
 27885                           
 27886                           ; BSR set to: 0
 27887                           
 27888                           ; BSR set to: 0
 27889                           
 27890                           ; BSR set to: 0
 27891                           
 27892                           ;PWMConfig.h: 144: }else {
 27893  002EA0  0012               	return	
 27894  002EA2                     __end_of_T2int:
 27895                           	opt stack 0
 27896                           pclatu	equ	0xFFB
 27897                           pclath	equ	0xFFA
 27898                           tblptru	equ	0xFF8
 27899                           tblptrh	equ	0xFF7
 27900                           tblptrl	equ	0xFF6
 27901                           tablat	equ	0xFF5
 27902                           prodh	equ	0xFF4
 27903                           prodl	equ	0xFF3
 27904                           intcon	equ	0xFF2
 27905                           postinc0	equ	0xFEE
 27906                           fsr0h	equ	0xFEA
 27907                           fsr0l	equ	0xFE9
 27908                           wreg	equ	0xFE8
 27909                           postdec1	equ	0xFE5
 27910                           fsr1h	equ	0xFE2
 27911                           fsr1l	equ	0xFE1
 27912                           bsr	equ	0xFE0
 27913                           indf2	equ	0xFDF
 27914                           postinc2	equ	0xFDE
 27915                           postdec2	equ	0xFDD
 27916                           plusw2	equ	0xFDB
 27917                           fsr2h	equ	0xFDA
 27918                           fsr2l	equ	0xFD9
 27919                           status	equ	0xFD8
 27920                           
 27921 ;; *************** function i1_initProtocoll *****************
 27922 ;; Defined at:
 27923 ;;		line 49 in file "source/PWMConfig.h"
 27924 ;; Parameters:    Size  Location     Type
 27925 ;;  init            1    wreg     unsigned char 
 27926 ;; Auto vars:     Size  Location     Type
 27927 ;;  init            1    6[BANK0 ] unsigned char 
 27928 ;; Return value:  Size  Location     Type
 27929 ;;                  1    wreg      void 
 27930 ;; Registers used:
 27931 ;;		wreg, status,2, status,0, cstack
 27932 ;; Tracked objects:
 27933 ;;		On entry : 0/0
 27934 ;;		On exit  : 0/0
 27935 ;;		Unchanged: 0/0
 27936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27937 ;;      Params:         0       0       0       0       0       0       0
 27938 ;;      Locals:         0       1       0       0       0       0       0
 27939 ;;      Temps:          0       0       0       0       0       0       0
 27940 ;;      Totals:         0       1       0       0       0       0       0
 27941 ;;Total ram usage:        1 bytes
 27942 ;; Hardware stack levels used:    1
 27943 ;; Hardware stack levels required when called:    5
 27944 ;; This function calls:
 27945 ;;		i1_setPWM2duty
 27946 ;; This function is called by:
 27947 ;;		_T2int
 27948 ;;		i1_pressRETRO
 27949 ;;		i1_longPressRETRO
 27950 ;;		i1_pressENTER
 27951 ;; This function uses a non-reentrant model
 27952 ;;
 27953                           
 27954                           	psect	text116
 27955  006D92                     __ptext116:
 27956                           	opt stack 0
 27957  006D92                     i1_initProtocoll:
 27958                           	opt stack 12
 27959                           
 27960                           ; BSR set to: 0
 27961                           ;incstack = 0
 27962                           ;i1initProtocoll@init stored from wreg
 27963  006D92  0100               	movlb	0	; () banked
 27964  006D94  6F66               	movwf	i1initProtocoll@init& (0+255),b
 27965                           
 27966                           ;PWMConfig.h: 50: if(!PORTAbits.RA7)
 27967  006D96  BE80               	btfsc	3968,7,c	;volatile
 27968  006D98  D003               	goto	i1l7340
 27969                           
 27970                           ;PWMConfig.h: 51: bladeIsUP = 2;
 27971  006D9A  0E02               	movlw	2
 27972  006D9C  0100               	movlb	0	; () banked
 27973  006D9E  6FD4               	movwf	_bladeIsUP& (0+255),b
 27974  006DA0                     i1l7340:
 27975                           
 27976                           ;PWMConfig.h: 52: if(init) {
 27977  006DA0  0100               	movlb	0	; () banked
 27978  006DA2  5166               	movf	i1initProtocoll@init& (0+255),w,b
 27979  006DA4  0100               	movlb	0	; () banked
 27980  006DA6  B4D8               	btfsc	status,2,c
 27981  006DA8  0012               	return	
 27982                           
 27983                           ; BSR set to: 0
 27984                           ;PWMConfig.h: 53: LATCbits.LATC5 = 0;
 27985  006DAA  9A8B               	bcf	3979,5,c	;volatile
 27986                           
 27987                           ; BSR set to: 0
 27988                           ;PWMConfig.h: 54: processTimer = 0;
 27989  006DAC  0E00               	movlw	0
 27990  006DAE  6E37               	movwf	_processTimer,c
 27991  006DB0  0E00               	movlw	0
 27992  006DB2  6E38               	movwf	_processTimer+1,c
 27993  006DB4  0E00               	movlw	0
 27994  006DB6  6E39               	movwf	_processTimer+2,c
 27995  006DB8  0E00               	movlw	0
 27996  006DBA  6E3A               	movwf	_processTimer+3,c
 27997                           
 27998                           ;PWMConfig.h: 55: processState = 0;
 27999  006DBC  0E00               	movlw	0
 28000  006DBE  0100               	movlb	0	; () banked
 28001  006DC0  6FB5               	movwf	(_processState+1)& (0+255),b
 28002  006DC2  0E00               	movlw	0
 28003  006DC4  6FB4               	movwf	_processState& (0+255),b
 28004                           
 28005                           ; BSR set to: 0
 28006                           ;PWMConfig.h: 56: if(bladeIsUP != 1)
 28007  006DC6  0100               	movlb	0	; () banked
 28008  006DC8  05D4               	decf	_bladeIsUP& (0+255),w,b
 28009  006DCA  B4D8               	btfsc	status,2,c
 28010  006DCC  0012               	return	
 28011                           
 28012                           ; BSR set to: 0
 28013                           ;PWMConfig.h: 57: setPWM2duty(-400);
 28014  006DCE  0EFE               	movlw	254
 28015  006DD0  0100               	movlb	0	; () banked
 28016  006DD2  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 28017  006DD4  0E70               	movlw	112
 28018  006DD6  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 28019  006DD8  ECCF  F02F         	call	i1_setPWM2duty	;wreg free
 28020  006DDC  0012               	return	
 28021  006DDE                     __end_ofi1_initProtocoll:
 28022                           	opt stack 0
 28023                           pclatu	equ	0xFFB
 28024                           pclath	equ	0xFFA
 28025                           tblptru	equ	0xFF8
 28026                           tblptrh	equ	0xFF7
 28027                           tblptrl	equ	0xFF6
 28028                           tablat	equ	0xFF5
 28029                           prodh	equ	0xFF4
 28030                           prodl	equ	0xFF3
 28031                           intcon	equ	0xFF2
 28032                           postinc0	equ	0xFEE
 28033                           fsr0h	equ	0xFEA
 28034                           fsr0l	equ	0xFE9
 28035                           wreg	equ	0xFE8
 28036                           postdec1	equ	0xFE5
 28037                           fsr1h	equ	0xFE2
 28038                           fsr1l	equ	0xFE1
 28039                           bsr	equ	0xFE0
 28040                           indf2	equ	0xFDF
 28041                           postinc2	equ	0xFDE
 28042                           postdec2	equ	0xFDD
 28043                           plusw2	equ	0xFDB
 28044                           fsr2h	equ	0xFDA
 28045                           fsr2l	equ	0xFD9
 28046                           status	equ	0xFD8
 28047                           
 28048 ;; *************** function i1_setPWM2duty *****************
 28049 ;; Defined at:
 28050 ;;		line 37 in file "source/PWMConfig.h"
 28051 ;; Parameters:    Size  Location     Type
 28052 ;;  actuator        2    0[BANK0 ] short 
 28053 ;; Auto vars:     Size  Location     Type
 28054 ;;  setPWM2duty     2    4[BANK0 ] short 
 28055 ;; Return value:  Size  Location     Type
 28056 ;;                  1    wreg      void 
 28057 ;; Registers used:
 28058 ;;		wreg, status,2, status,0
 28059 ;; Tracked objects:
 28060 ;;		On entry : 0/0
 28061 ;;		On exit  : 0/0
 28062 ;;		Unchanged: 0/0
 28063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28064 ;;      Params:         0       2       0       0       0       0       0
 28065 ;;      Locals:         0       2       0       0       0       0       0
 28066 ;;      Temps:          0       2       0       0       0       0       0
 28067 ;;      Totals:         0       6       0       0       0       0       0
 28068 ;;Total ram usage:        6 bytes
 28069 ;; Hardware stack levels used:    1
 28070 ;; Hardware stack levels required when called:    4
 28071 ;; This function calls:
 28072 ;;		Nothing
 28073 ;; This function is called by:
 28074 ;;		_T2int
 28075 ;;		i1_initProtocoll
 28076 ;;		i1_pressENTER
 28077 ;; This function uses a non-reentrant model
 28078 ;;
 28079                           
 28080                           	psect	text117
 28081  005F9E                     __ptext117:
 28082                           	opt stack 0
 28083  005F9E                     i1_setPWM2duty:
 28084                           	opt stack 12
 28085                           
 28086                           ;PWMConfig.h: 38: short act = 400;
 28087                           
 28088                           ;incstack = 0
 28089  005F9E  0E01               	movlw	1
 28090  005FA0  0100               	movlb	0	; () banked
 28091  005FA2  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 28092  005FA4  0E90               	movlw	144
 28093  005FA6  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 28094                           
 28095                           ; BSR set to: 0
 28096                           ;PWMConfig.h: 39: if(actuator > 400)
 28097  005FA8  0100               	movlb	0	; () banked
 28098  005FAA  BF61               	btfsc	(i1setPWM2duty@actuator+1)& (0+255),7,b
 28099  005FAC  D00D               	goto	i1l7044
 28100  005FAE  0E91               	movlw	145
 28101  005FB0  0100               	movlb	0	; () banked
 28102  005FB2  5D60               	subwf	i1setPWM2duty@actuator& (0+255),w,b
 28103  005FB4  0E01               	movlw	1
 28104  005FB6  0100               	movlb	0	; () banked
 28105  005FB8  5961               	subwfb	(i1setPWM2duty@actuator+1)& (0+255),w,b
 28106  005FBA  A0D8               	btfss	status,0,c
 28107  005FBC  D005               	goto	i1l7044
 28108                           
 28109                           ; BSR set to: 0
 28110                           ;PWMConfig.h: 40: act = 800;
 28111  005FBE  0E03               	movlw	3
 28112  005FC0  0100               	movlb	0	; () banked
 28113  005FC2  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 28114  005FC4  0E20               	movlw	32
 28115  005FC6  D00F               	goto	L9
 28116  005FC8                     i1l7044:
 28117                           
 28118                           ; BSR set to: 0
 28119                           ;PWMConfig.h: 41: else if(actuator < -400)
 28120  005FC8  0100               	movlb	0	; () banked
 28121  005FCA  AF61               	btfss	(i1setPWM2duty@actuator+1)& (0+255),7,b
 28122  005FCC  D00E               	goto	i1l7048
 28123  005FCE  0E70               	movlw	112
 28124  005FD0  0100               	movlb	0	; () banked
 28125  005FD2  5D60               	subwf	i1setPWM2duty@actuator& (0+255),w,b
 28126  005FD4  0EFE               	movlw	254
 28127  005FD6  0100               	movlb	0	; () banked
 28128  005FD8  5961               	subwfb	(i1setPWM2duty@actuator+1)& (0+255),w,b
 28129  005FDA  B0D8               	btfsc	status,0,c
 28130  005FDC  D006               	goto	i1l7048
 28131                           
 28132                           ; BSR set to: 0
 28133                           ;PWMConfig.h: 42: act = 0;
 28134  005FDE  0E00               	movlw	0
 28135  005FE0  0100               	movlb	0	; () banked
 28136  005FE2  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 28137  005FE4  0E00               	movlw	0
 28138  005FE6                     L9:
 28139  005FE6  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 28140  005FE8  D00A               	goto	i1l493
 28141  005FEA                     i1l7048:
 28142                           
 28143                           ; BSR set to: 0
 28144                           ;PWMConfig.h: 43: else
 28145                           ;PWMConfig.h: 44: act = actuator + 400;
 28146  005FEA  0E90               	movlw	144
 28147  005FEC  0100               	movlb	0	; () banked
 28148  005FEE  2560               	addwf	i1setPWM2duty@actuator& (0+255),w,b
 28149  005FF0  0100               	movlb	0	; () banked
 28150  005FF2  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 28151  005FF4  0E01               	movlw	1
 28152  005FF6  0100               	movlb	0	; () banked
 28153  005FF8  2161               	addwfc	(i1setPWM2duty@actuator+1)& (0+255),w,b
 28154  005FFA  0100               	movlb	0	; () banked
 28155  005FFC  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 28156  005FFE                     i1l493:
 28157                           
 28158                           ; BSR set to: 0
 28159                           ;PWMConfig.h: 45: CCP2CONbits.DC2B = act;
 28160  005FFE  C064  F062         	movff	i1setPWM2duty@act,??i1_setPWM2duty
 28161  006002  0100               	movlb	0	; () banked
 28162  006004  3B62               	swapf	??i1_setPWM2duty& (0+255),f,b
 28163  006006  5066               	movf	3942,w,c	;volatile
 28164  006008  0100               	movlb	0	; () banked
 28165  00600A  1962               	xorwf	??i1_setPWM2duty& (0+255),w,b
 28166  00600C  0BCF               	andlw	-49
 28167  00600E  1962               	xorwf	??i1_setPWM2duty& (0+255),w,b
 28168  006010  6E66               	movwf	3942,c	;volatile
 28169                           
 28170                           ;PWMConfig.h: 46: CCPR2L = act>>2;
 28171  006012  C064  F062         	movff	i1setPWM2duty@act,??i1_setPWM2duty
 28172  006016  C065  F063         	movff	i1setPWM2duty@act+1,??i1_setPWM2duty+1
 28173  00601A  0100               	movlb	0	; () banked
 28174  00601C  3563               	rlcf	(??i1_setPWM2duty+1)& (0+255),w,b
 28175  00601E  3363               	rrcf	(??i1_setPWM2duty+1)& (0+255),f,b
 28176  006020  3362               	rrcf	??i1_setPWM2duty& (0+255),f,b
 28177  006022  0100               	movlb	0	; () banked
 28178  006024  3563               	rlcf	(??i1_setPWM2duty+1)& (0+255),w,b
 28179  006026  3363               	rrcf	(??i1_setPWM2duty+1)& (0+255),f,b
 28180  006028  3362               	rrcf	??i1_setPWM2duty& (0+255),f,b
 28181  00602A  0100               	movlb	0	; () banked
 28182  00602C  5162               	movf	??i1_setPWM2duty& (0+255),w,b
 28183  00602E  6E67               	movwf	3943,c	;volatile
 28184                           
 28185                           ; BSR set to: 0
 28186  006030  0012               	return		;funcret
 28187  006032                     __end_ofi1_setPWM2duty:
 28188                           	opt stack 0
 28189                           pclatu	equ	0xFFB
 28190                           pclath	equ	0xFFA
 28191                           tblptru	equ	0xFF8
 28192                           tblptrh	equ	0xFF7
 28193                           tblptrl	equ	0xFF6
 28194                           tablat	equ	0xFF5
 28195                           prodh	equ	0xFF4
 28196                           prodl	equ	0xFF3
 28197                           intcon	equ	0xFF2
 28198                           postinc0	equ	0xFEE
 28199                           fsr0h	equ	0xFEA
 28200                           fsr0l	equ	0xFE9
 28201                           wreg	equ	0xFE8
 28202                           postdec1	equ	0xFE5
 28203                           fsr1h	equ	0xFE2
 28204                           fsr1l	equ	0xFE1
 28205                           bsr	equ	0xFE0
 28206                           indf2	equ	0xFDF
 28207                           postinc2	equ	0xFDE
 28208                           postdec2	equ	0xFDD
 28209                           plusw2	equ	0xFDB
 28210                           fsr2h	equ	0xFDA
 28211                           fsr2l	equ	0xFD9
 28212                           status	equ	0xFD8
 28213                           
 28214 ;; *************** function _saveProcessState *****************
 28215 ;; Defined at:
 28216 ;;		line 157 in file "source/sysParams.h"
 28217 ;; Parameters:    Size  Location     Type
 28218 ;;		None
 28219 ;; Auto vars:     Size  Location     Type
 28220 ;;		None
 28221 ;; Return value:  Size  Location     Type
 28222 ;;                  1    wreg      void 
 28223 ;; Registers used:
 28224 ;;		wreg, status,2, cstack
 28225 ;; Tracked objects:
 28226 ;;		On entry : 0/0
 28227 ;;		On exit  : 0/0
 28228 ;;		Unchanged: 0/0
 28229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28230 ;;      Params:         0       0       0       0       0       0       0
 28231 ;;      Locals:         0       0       0       0       0       0       0
 28232 ;;      Temps:          0       0       0       0       0       0       0
 28233 ;;      Totals:         0       0       0       0       0       0       0
 28234 ;;Total ram usage:        0 bytes
 28235 ;; Hardware stack levels used:    1
 28236 ;; Hardware stack levels required when called:    5
 28237 ;; This function calls:
 28238 ;;		i1_writeEEPROM
 28239 ;; This function is called by:
 28240 ;;		_T2int
 28241 ;; This function uses a non-reentrant model
 28242 ;;
 28243                           
 28244                           	psect	text118
 28245  006F3E                     __ptext118:
 28246                           	opt stack 0
 28247  006F3E                     _saveProcessState:
 28248                           	opt stack 13
 28249                           
 28250                           ;sysParams.h: 158: EECON1bits.WREN = 1;
 28251                           
 28252                           ; BSR set to: 0
 28253                           ;incstack = 0
 28254  006F3E  84A6               	bsf	4006,2,c	;volatile
 28255                           
 28256                           ;sysParams.h: 159: ie = INTCONbits.GIE;
 28257  006F40  0E00               	movlw	0
 28258  006F42  BEF2               	btfsc	intcon,7,c	;volatile
 28259  006F44  0E01               	movlw	1
 28260  006F46  0100               	movlb	0	; () banked
 28261  006F48  6FC1               	movwf	_ie& (0+255),b
 28262                           
 28263                           ; BSR set to: 0
 28264                           ;sysParams.h: 160: INTCONbits.GIE = 0;
 28265  006F4A  9EF2               	bcf	intcon,7,c	;volatile
 28266                           
 28267                           ; BSR set to: 0
 28268                           ;sysParams.h: 161: writeEEPROM(30, processStarted);
 28269  006F4C  C0C4  F060         	movff	_processStarted,i1writeEEPROM@data
 28270  006F50  0E1E               	movlw	30
 28271  006F52  EC28  F039         	call	i1_writeEEPROM
 28272                           
 28273                           ;sysParams.h: 162: writeEEPROM(31, processState);
 28274  006F56  C0B4  F060         	movff	_processState,i1writeEEPROM@data
 28275  006F5A  0E1F               	movlw	31
 28276  006F5C  EC28  F039         	call	i1_writeEEPROM
 28277                           
 28278                           ;sysParams.h: 163: writeEEPROM(32, bladeIsUP);
 28279  006F60  C0D4  F060         	movff	_bladeIsUP,i1writeEEPROM@data
 28280  006F64  0E20               	movlw	32
 28281  006F66  EC28  F039         	call	i1_writeEEPROM
 28282                           
 28283                           ;sysParams.h: 164: EECON1bits.WREN = 0;
 28284  006F6A  94A6               	bcf	4006,2,c	;volatile
 28285                           
 28286                           ;sysParams.h: 165: INTCONbits.GIE = ie;
 28287  006F6C  0100               	movlb	0	; () banked
 28288  006F6E  B1C1               	btfsc	_ie& (0+255),0,b
 28289  006F70  D002               	bra	i1u1004_25
 28290  006F72  9EF2               	bcf	intcon,7,c	;volatile
 28291  006F74  D001               	bra	i1u1004_26
 28292  006F76                     i1u1004_25:
 28293  006F76  8EF2               	bsf	intcon,7,c	;volatile
 28294  006F78                     i1u1004_26:
 28295  006F78  0012               	return		;funcret
 28296  006F7A                     __end_of_saveProcessState:
 28297                           	opt stack 0
 28298                           pclatu	equ	0xFFB
 28299                           pclath	equ	0xFFA
 28300                           tblptru	equ	0xFF8
 28301                           tblptrh	equ	0xFF7
 28302                           tblptrl	equ	0xFF6
 28303                           tablat	equ	0xFF5
 28304                           prodh	equ	0xFF4
 28305                           prodl	equ	0xFF3
 28306                           intcon	equ	0xFF2
 28307                           postinc0	equ	0xFEE
 28308                           fsr0h	equ	0xFEA
 28309                           fsr0l	equ	0xFE9
 28310                           wreg	equ	0xFE8
 28311                           postdec1	equ	0xFE5
 28312                           fsr1h	equ	0xFE2
 28313                           fsr1l	equ	0xFE1
 28314                           bsr	equ	0xFE0
 28315                           indf2	equ	0xFDF
 28316                           postinc2	equ	0xFDE
 28317                           postdec2	equ	0xFDD
 28318                           plusw2	equ	0xFDB
 28319                           fsr2h	equ	0xFDA
 28320                           fsr2l	equ	0xFD9
 28321                           status	equ	0xFD8
 28322                           
 28323 ;; *************** function i1_writeEEPROM *****************
 28324 ;; Defined at:
 28325 ;;		line 53 in file "source/sysParams.h"
 28326 ;; Parameters:    Size  Location     Type
 28327 ;;  adr             1    wreg     unsigned char 
 28328 ;;  data            1    0[BANK0 ] unsigned char 
 28329 ;; Auto vars:     Size  Location     Type
 28330 ;;  adr             1    1[BANK0 ] unsigned char 
 28331 ;; Return value:  Size  Location     Type
 28332 ;;                  1    wreg      void 
 28333 ;; Registers used:
 28334 ;;		wreg, status,2
 28335 ;; Tracked objects:
 28336 ;;		On entry : 0/0
 28337 ;;		On exit  : 0/0
 28338 ;;		Unchanged: 0/0
 28339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28340 ;;      Params:         0       1       0       0       0       0       0
 28341 ;;      Locals:         0       1       0       0       0       0       0
 28342 ;;      Temps:          0       0       0       0       0       0       0
 28343 ;;      Totals:         0       2       0       0       0       0       0
 28344 ;;Total ram usage:        2 bytes
 28345 ;; Hardware stack levels used:    1
 28346 ;; Hardware stack levels required when called:    4
 28347 ;; This function calls:
 28348 ;;		Nothing
 28349 ;; This function is called by:
 28350 ;;		_saveProcessState
 28351 ;;		i1_saveSysParams
 28352 ;; This function uses a non-reentrant model
 28353 ;;
 28354                           
 28355                           	psect	text119
 28356  007250                     __ptext119:
 28357                           	opt stack 0
 28358  007250                     i1_writeEEPROM:
 28359                           	opt stack 13
 28360                           
 28361                           ;incstack = 0
 28362                           ;i1writeEEPROM@adr stored from wreg
 28363  007250  0100               	movlb	0	; () banked
 28364  007252  6F61               	movwf	i1writeEEPROM@adr& (0+255),b
 28365                           
 28366                           ;sysParams.h: 54: EEADR = adr;
 28367  007254  C061  FFA9         	movff	i1writeEEPROM@adr,4009	;volatile
 28368                           
 28369                           ;sysParams.h: 55: EEDATA = data;
 28370  007258  C060  FFA8         	movff	i1writeEEPROM@data,4008	;volatile
 28371                           
 28372                           ;sysParams.h: 56: EECON1bits.EEPGD = 0;
 28373  00725C  9EA6               	bcf	4006,7,c	;volatile
 28374                           
 28375                           ;sysParams.h: 57: EECON1bits.CFGS = 0;
 28376  00725E  9CA6               	bcf	4006,6,c	;volatile
 28377                           
 28378                           ;sysParams.h: 58: EECON2 = 0x55;
 28379  007260  0E55               	movlw	85
 28380  007262  6EA7               	movwf	4007,c	;volatile
 28381                           
 28382                           ;sysParams.h: 59: EECON2 = 0xAA;
 28383  007264  0EAA               	movlw	170
 28384  007266  6EA7               	movwf	4007,c	;volatile
 28385                           
 28386                           ;sysParams.h: 60: EECON1bits.WR = 1;
 28387  007268  82A6               	bsf	4006,1,c	;volatile
 28388  00726A                     i1l281:
 28389  00726A  A2A6               	btfss	4006,1,c	;volatile
 28390  00726C  0012               	return	
 28391  00726E  D7FD               	goto	i1l281
 28392  007270                     __end_ofi1_writeEEPROM:
 28393                           	opt stack 0
 28394                           pclatu	equ	0xFFB
 28395                           pclath	equ	0xFFA
 28396                           tblptru	equ	0xFF8
 28397                           tblptrh	equ	0xFF7
 28398                           tblptrl	equ	0xFF6
 28399                           tablat	equ	0xFF5
 28400                           prodh	equ	0xFF4
 28401                           prodl	equ	0xFF3
 28402                           intcon	equ	0xFF2
 28403                           postinc0	equ	0xFEE
 28404                           fsr0h	equ	0xFEA
 28405                           fsr0l	equ	0xFE9
 28406                           wreg	equ	0xFE8
 28407                           postdec1	equ	0xFE5
 28408                           fsr1h	equ	0xFE2
 28409                           fsr1l	equ	0xFE1
 28410                           bsr	equ	0xFE0
 28411                           indf2	equ	0xFDF
 28412                           postinc2	equ	0xFDE
 28413                           postdec2	equ	0xFDD
 28414                           plusw2	equ	0xFDB
 28415                           fsr2h	equ	0xFDA
 28416                           fsr2l	equ	0xFD9
 28417                           status	equ	0xFD8
 28418                           
 28419 ;; *************** function _hp_isr *****************
 28420 ;; Defined at:
 28421 ;;		line 13 in file "source/main.c"
 28422 ;; Parameters:    Size  Location     Type
 28423 ;;		None
 28424 ;; Auto vars:     Size  Location     Type
 28425 ;;		None
 28426 ;; Return value:  Size  Location     Type
 28427 ;;                  1    wreg      void 
 28428 ;; Registers used:
 28429 ;;		wreg, status,2, status,0, cstack
 28430 ;; Tracked objects:
 28431 ;;		On entry : 0/0
 28432 ;;		On exit  : 0/0
 28433 ;;		Unchanged: 0/0
 28434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28435 ;;      Params:         0       0       0       0       0       0       0
 28436 ;;      Locals:         0       0       0       0       0       0       0
 28437 ;;      Temps:         14       0       0       0       0       0       0
 28438 ;;      Totals:        14       0       0       0       0       0       0
 28439 ;;Total ram usage:       14 bytes
 28440 ;; Hardware stack levels used:    1
 28441 ;; Hardware stack levels required when called:    3
 28442 ;; This function calls:
 28443 ;;		_T4int
 28444 ;; This function is called by:
 28445 ;;		Interrupt level 2
 28446 ;; This function uses a non-reentrant model
 28447 ;;
 28448                           
 28449                           	psect	intcode
 28450  000008                     __pintcode:
 28451                           	opt stack 0
 28452  000008                     _hp_isr:
 28453                           	opt stack 9
 28454                           
 28455                           ;incstack = 0
 28456  000008  825C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 28457  00000A  CFFA F029          	movff	pclath,??_hp_isr
 28458  00000E  CFFB F02A          	movff	pclatu,??_hp_isr+1
 28459  000012  EF51  F033         	goto	int_func
 28460                           pclatu	equ	0xFFB
 28461                           pclath	equ	0xFFA
 28462                           tblptru	equ	0xFF8
 28463                           tblptrh	equ	0xFF7
 28464                           tblptrl	equ	0xFF6
 28465                           tablat	equ	0xFF5
 28466                           prodh	equ	0xFF4
 28467                           prodl	equ	0xFF3
 28468                           intcon	equ	0xFF2
 28469                           postinc0	equ	0xFEE
 28470                           fsr0h	equ	0xFEA
 28471                           fsr0l	equ	0xFE9
 28472                           wreg	equ	0xFE8
 28473                           postdec1	equ	0xFE5
 28474                           fsr1h	equ	0xFE2
 28475                           fsr1l	equ	0xFE1
 28476                           bsr	equ	0xFE0
 28477                           indf2	equ	0xFDF
 28478                           postinc2	equ	0xFDE
 28479                           postdec2	equ	0xFDD
 28480                           plusw2	equ	0xFDB
 28481                           fsr2h	equ	0xFDA
 28482                           fsr2l	equ	0xFD9
 28483                           status	equ	0xFD8
 28484                           
 28485                           	psect	intcode_body
 28486  0066A2                     __pintcode_body:
 28487                           	opt stack 9
 28488  0066A2                     int_func:
 28489                           	opt stack 9
 28490  0066A2  CFE9 F02B          	movff	fsr0l,??_hp_isr+2
 28491  0066A6  CFEA F02C          	movff	fsr0h,??_hp_isr+3
 28492  0066AA  CFE1 F02D          	movff	fsr1l,??_hp_isr+4
 28493  0066AE  CFE2 F02E          	movff	fsr1h,??_hp_isr+5
 28494  0066B2  CFD9 F02F          	movff	fsr2l,??_hp_isr+6
 28495  0066B6  CFDA F030          	movff	fsr2h,??_hp_isr+7
 28496  0066BA  CFF3 F031          	movff	prodl,??_hp_isr+8
 28497  0066BE  CFF4 F032          	movff	prodh,??_hp_isr+9
 28498  0066C2  CFF6 F033          	movff	tblptrl,??_hp_isr+10
 28499  0066C6  CFF7 F034          	movff	tblptrh,??_hp_isr+11
 28500  0066CA  CFF8 F035          	movff	tblptru,??_hp_isr+12
 28501  0066CE  CFF5 F036          	movff	tablat,??_hp_isr+13
 28502                           
 28503                           ;main.c: 14: if(PIE5bits.TMR4IE && PIR5bits.TMR4IF) {
 28504  0066D2  B07D               	btfsc	3965,0,c	;volatile
 28505  0066D4  A07E               	btfss	3966,0,c	;volatile
 28506  0066D6  D003               	goto	i2l923
 28507                           
 28508                           ;main.c: 15: T4int();
 28509  0066D8  EC51  F017         	call	_T4int	;wreg free
 28510                           
 28511                           ;main.c: 16: PIR5bits.TMR4IF = 0;
 28512  0066DC  907E               	bcf	3966,0,c	;volatile
 28513  0066DE                     i2l923:
 28514  0066DE  C036  FFF5         	movff	??_hp_isr+13,tablat
 28515  0066E2  C035  FFF8         	movff	??_hp_isr+12,tblptru
 28516  0066E6  C034  FFF7         	movff	??_hp_isr+11,tblptrh
 28517  0066EA  C033  FFF6         	movff	??_hp_isr+10,tblptrl
 28518  0066EE  C032  FFF4         	movff	??_hp_isr+9,prodh
 28519  0066F2  C031  FFF3         	movff	??_hp_isr+8,prodl
 28520  0066F6  C030  FFDA         	movff	??_hp_isr+7,fsr2h
 28521  0066FA  C02F  FFD9         	movff	??_hp_isr+6,fsr2l
 28522  0066FE  C02E  FFE2         	movff	??_hp_isr+5,fsr1h
 28523  006702  C02D  FFE1         	movff	??_hp_isr+4,fsr1l
 28524  006706  C02C  FFEA         	movff	??_hp_isr+3,fsr0h
 28525  00670A  C02B  FFE9         	movff	??_hp_isr+2,fsr0l
 28526  00670E  C02A  FFFB         	movff	??_hp_isr+1,pclatu
 28527  006712  C029  FFFA         	movff	??_hp_isr,pclath
 28528  006716  925C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 28529  006718  0011               	retfie		f
 28530  00671A                     __end_of_hp_isr:
 28531                           	opt stack 0
 28532                           pclatu	equ	0xFFB
 28533                           pclath	equ	0xFFA
 28534                           tblptru	equ	0xFF8
 28535                           tblptrh	equ	0xFF7
 28536                           tblptrl	equ	0xFF6
 28537                           tablat	equ	0xFF5
 28538                           prodh	equ	0xFF4
 28539                           prodl	equ	0xFF3
 28540                           intcon	equ	0xFF2
 28541                           postinc0	equ	0xFEE
 28542                           fsr0h	equ	0xFEA
 28543                           fsr0l	equ	0xFE9
 28544                           wreg	equ	0xFE8
 28545                           postdec1	equ	0xFE5
 28546                           fsr1h	equ	0xFE2
 28547                           fsr1l	equ	0xFE1
 28548                           bsr	equ	0xFE0
 28549                           indf2	equ	0xFDF
 28550                           postinc2	equ	0xFDE
 28551                           postdec2	equ	0xFDD
 28552                           plusw2	equ	0xFDB
 28553                           fsr2h	equ	0xFDA
 28554                           fsr2l	equ	0xFD9
 28555                           status	equ	0xFD8
 28556                           
 28557 ;; *************** function _T4int *****************
 28558 ;; Defined at:
 28559 ;;		line 21 in file "source/T4Config.h"
 28560 ;; Parameters:    Size  Location     Type
 28561 ;;		None
 28562 ;; Auto vars:     Size  Location     Type
 28563 ;;		None
 28564 ;; Return value:  Size  Location     Type
 28565 ;;                  1    wreg      void 
 28566 ;; Registers used:
 28567 ;;		wreg, status,2, status,0, cstack
 28568 ;; Tracked objects:
 28569 ;;		On entry : 0/0
 28570 ;;		On exit  : 0/0
 28571 ;;		Unchanged: 0/0
 28572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28573 ;;      Params:         0       0       0       0       0       0       0
 28574 ;;      Locals:         0       0       0       0       0       0       0
 28575 ;;      Temps:          1       0       0       0       0       0       0
 28576 ;;      Totals:         1       0       0       0       0       0       0
 28577 ;;Total ram usage:        1 bytes
 28578 ;; Hardware stack levels used:    1
 28579 ;; Hardware stack levels required when called:    2
 28580 ;; This function calls:
 28581 ;;		_cutError
 28582 ;;		i2___altoft
 28583 ;;		i2___ftadd
 28584 ;;		i2___ftge
 28585 ;;		i2_setPWM2duty
 28586 ;; This function is called by:
 28587 ;;		_hp_isr
 28588 ;; This function uses a non-reentrant model
 28589 ;;
 28590                           
 28591                           	psect	text121
 28592  002EA2                     __ptext121:
 28593                           	opt stack 0
 28594  002EA2                     _T4int:
 28595                           	opt stack 9
 28596                           
 28597                           ;T4Config.h: 22: LATBbits.LATB0 = processStarted;
 28598                           
 28599                           ;incstack = 0
 28600  002EA2  0100               	movlb	0	; () banked
 28601  002EA4  B1C4               	btfsc	_processStarted& (0+255),0,b
 28602  002EA6  D002               	bra	i2u1337_45
 28603  002EA8  908A               	bcf	3978,0,c	;volatile
 28604  002EAA  D001               	bra	i2u1337_46
 28605  002EAC                     i2u1337_45:
 28606  002EAC  808A               	bsf	3978,0,c	;volatile
 28607  002EAE                     i2u1337_46:
 28608  002EAE  0004               	clrwdt		;# 
 28609                           
 28610                           ;T4Config.h: 26: processTimer++;
 28611  002EB0  0E01               	movlw	1
 28612  002EB2  2637               	addwf	_processTimer,f,c
 28613  002EB4  0E00               	movlw	0
 28614  002EB6  2238               	addwfc	_processTimer+1,f,c
 28615  002EB8  2239               	addwfc	_processTimer+2,f,c
 28616  002EBA  223A               	addwfc	_processTimer+3,f,c
 28617                           
 28618                           ;T4Config.h: 27: if(processStarted) {
 28619  002EBC  0100               	movlb	0	; () banked
 28620  002EBE  51C4               	movf	_processStarted& (0+255),w,b
 28621  002EC0  B4D8               	btfsc	status,2,c
 28622  002EC2  D072               	goto	i2l9326
 28623                           
 28624                           ; BSR set to: 0
 28625                           ;T4Config.h: 28: securTimer++;
 28626  002EC4  0E01               	movlw	1
 28627  002EC6  263B               	addwf	_securTimer,f,c
 28628  002EC8  0E00               	movlw	0
 28629  002ECA  223C               	addwfc	_securTimer+1,f,c
 28630  002ECC  223D               	addwfc	_securTimer+2,f,c
 28631  002ECE  223E               	addwfc	_securTimer+3,f,c
 28632                           
 28633                           ;T4Config.h: 29: if(bladeIsUP == 1) {
 28634  002ED0  0100               	movlb	0	; () banked
 28635  002ED2  05D4               	decf	_bladeIsUP& (0+255),w,b
 28636  002ED4  A4D8               	btfss	status,2,c
 28637  002ED6  D035               	goto	i2l9322
 28638                           
 28639                           ; BSR set to: 0
 28640                           ;T4Config.h: 30: if(securTimer > timsXcorte + maxTimePerCut)
 28641  002ED8  C059  F016         	movff	_timsXcorte,i2___ftadd@f2
 28642  002EDC  C05A  F017         	movff	_timsXcorte+1,i2___ftadd@f2+1
 28643  002EE0  C05B  F018         	movff	_timsXcorte+2,i2___ftadd@f2+2
 28644  002EE4  C04B  F009         	movff	_maxTimePerCut,i2___altoft@c
 28645  002EE8  C04C  F00A         	movff	_maxTimePerCut+1,i2___altoft@c+1
 28646  002EEC  C04D  F00B         	movff	_maxTimePerCut+2,i2___altoft@c+2
 28647  002EF0  C04E  F00C         	movff	_maxTimePerCut+3,i2___altoft@c+3
 28648  002EF4  EC8D  F033         	call	i2___altoft	;wreg free
 28649  002EF8  C009  F013         	movff	?i2___altoft,i2___ftadd@f1
 28650  002EFC  C00A  F014         	movff	?i2___altoft+1,i2___ftadd@f1+1
 28651  002F00  C00B  F015         	movff	?i2___altoft+2,i2___ftadd@f1+2
 28652  002F04  EC10  F019         	call	i2___ftadd	;wreg free
 28653  002F08  C013  F01F         	movff	?i2___ftadd,i2___ftge@ff1
 28654  002F0C  C014  F020         	movff	?i2___ftadd+1,i2___ftge@ff1+1
 28655  002F10  C015  F021         	movff	?i2___ftadd+2,i2___ftge@ff1+2
 28656  002F14  C03B  F009         	movff	_securTimer,i2___altoft@c
 28657  002F18  C03C  F00A         	movff	_securTimer+1,i2___altoft@c+1
 28658  002F1C  C03D  F00B         	movff	_securTimer+2,i2___altoft@c+2
 28659  002F20  C03E  F00C         	movff	_securTimer+3,i2___altoft@c+3
 28660  002F24  EC8D  F033         	call	i2___altoft	;wreg free
 28661  002F28  C009  F022         	movff	?i2___altoft,i2___ftge@ff2
 28662  002F2C  C00A  F023         	movff	?i2___altoft+1,i2___ftge@ff2+1
 28663  002F30  C00B  F024         	movff	?i2___altoft+2,i2___ftge@ff2+2
 28664  002F34  ECF4  F030         	call	i2___ftge	;wreg free
 28665  002F38  B0D8               	btfsc	status,0,c
 28666  002F3A  D036               	goto	i2l9326
 28667                           
 28668                           ;T4Config.h: 31: cutError();
 28669  002F3C  EC84  F038         	call	_cutError	;wreg free
 28670                           
 28671                           ;T4Config.h: 32: }else {
 28672  002F40  D033               	goto	i2l9326
 28673  002F42                     i2l9322:
 28674                           
 28675                           ;T4Config.h: 33: if(securTimer > timsXcorte + maxTimePerCut)
 28676  002F42  C059  F016         	movff	_timsXcorte,i2___ftadd@f2
 28677  002F46  C05A  F017         	movff	_timsXcorte+1,i2___ftadd@f2+1
 28678  002F4A  C05B  F018         	movff	_timsXcorte+2,i2___ftadd@f2+2
 28679  002F4E  C04B  F009         	movff	_maxTimePerCut,i2___altoft@c
 28680  002F52  C04C  F00A         	movff	_maxTimePerCut+1,i2___altoft@c+1
 28681  002F56  C04D  F00B         	movff	_maxTimePerCut+2,i2___altoft@c+2
 28682  002F5A  C04E  F00C         	movff	_maxTimePerCut+3,i2___altoft@c+3
 28683  002F5E  EC8D  F033         	call	i2___altoft	;wreg free
 28684  002F62  C009  F013         	movff	?i2___altoft,i2___ftadd@f1
 28685  002F66  C00A  F014         	movff	?i2___altoft+1,i2___ftadd@f1+1
 28686  002F6A  C00B  F015         	movff	?i2___altoft+2,i2___ftadd@f1+2
 28687  002F6E  EC10  F019         	call	i2___ftadd	;wreg free
 28688  002F72  C013  F01F         	movff	?i2___ftadd,i2___ftge@ff1
 28689  002F76  C014  F020         	movff	?i2___ftadd+1,i2___ftge@ff1+1
 28690  002F7A  C015  F021         	movff	?i2___ftadd+2,i2___ftge@ff1+2
 28691  002F7E  C03B  F009         	movff	_securTimer,i2___altoft@c
 28692  002F82  C03C  F00A         	movff	_securTimer+1,i2___altoft@c+1
 28693  002F86  C03D  F00B         	movff	_securTimer+2,i2___altoft@c+2
 28694  002F8A  C03E  F00C         	movff	_securTimer+3,i2___altoft@c+3
 28695  002F8E  EC8D  F033         	call	i2___altoft	;wreg free
 28696  002F92  C009  F022         	movff	?i2___altoft,i2___ftge@ff2
 28697  002F96  C00A  F023         	movff	?i2___altoft+1,i2___ftge@ff2+1
 28698  002F9A  C00B  F024         	movff	?i2___altoft+2,i2___ftge@ff2+2
 28699  002F9E  ECF4  F030         	call	i2___ftge	;wreg free
 28700  002FA2  A0D8               	btfss	status,0,c
 28701                           
 28702                           ;T4Config.h: 34: cutError();
 28703  002FA4  EC84  F038         	call	_cutError	;wreg free
 28704  002FA8                     i2l9326:
 28705                           
 28706                           ;T4Config.h: 35: }
 28707                           ;T4Config.h: 36: }
 28708                           ;T4Config.h: 37: if(bladeIsUP == 1) {
 28709  002FA8  0100               	movlb	0	; () banked
 28710  002FAA  05D4               	decf	_bladeIsUP& (0+255),w,b
 28711  002FAC  A4D8               	btfss	status,2,c
 28712  002FAE  D034               	goto	i2l9338
 28713                           
 28714                           ; BSR set to: 0
 28715                           ;T4Config.h: 38: if(processTimer >= timsXcorte && processStarted && processState < numCo
      +                          rtes) {
 28716  002FB0  C037  F009         	movff	_processTimer,i2___altoft@c
 28717  002FB4  C038  F00A         	movff	_processTimer+1,i2___altoft@c+1
 28718  002FB8  C039  F00B         	movff	_processTimer+2,i2___altoft@c+2
 28719  002FBC  C03A  F00C         	movff	_processTimer+3,i2___altoft@c+3
 28720  002FC0  EC8D  F033         	call	i2___altoft	;wreg free
 28721  002FC4  C009  F01F         	movff	?i2___altoft,i2___ftge@ff1
 28722  002FC8  C00A  F020         	movff	?i2___altoft+1,i2___ftge@ff1+1
 28723  002FCC  C00B  F021         	movff	?i2___altoft+2,i2___ftge@ff1+2
 28724  002FD0  C059  F022         	movff	_timsXcorte,i2___ftge@ff2
 28725  002FD4  C05A  F023         	movff	_timsXcorte+1,i2___ftge@ff2+1
 28726  002FD8  C05B  F024         	movff	_timsXcorte+2,i2___ftge@ff2+2
 28727  002FDC  ECF4  F030         	call	i2___ftge	;wreg free
 28728  002FE0  A0D8               	btfss	status,0,c
 28729  002FE2  0012               	return	
 28730  002FE4  0100               	movlb	0	; () banked
 28731  002FE6  51C4               	movf	_processStarted& (0+255),w,b
 28732  002FE8  B4D8               	btfsc	status,2,c
 28733  002FEA  0012               	return	
 28734                           
 28735                           ; BSR set to: 0
 28736  002FEC  0100               	movlb	0	; () banked
 28737  002FEE  51D0               	movf	_numCortes& (0+255),w,b
 28738  002FF0  0100               	movlb	0	; () banked
 28739  002FF2  5DB4               	subwf	_processState& (0+255),w,b
 28740  002FF4  0100               	movlb	0	; () banked
 28741  002FF6  51B5               	movf	(_processState+1)& (0+255),w,b
 28742  002FF8  0A80               	xorlw	128
 28743  002FFA  6E28               	movwf	??_T4int& (0+255),c
 28744  002FFC  0100               	movlb	0	; () banked
 28745  002FFE  51D1               	movf	(_numCortes+1)& (0+255),w,b
 28746  003000  0A80               	xorlw	128
 28747  003002  5828               	subwfb	??_T4int& (0+255),w,c
 28748  003004  B0D8               	btfsc	status,0,c
 28749  003006  0012               	return	
 28750                           
 28751                           ; BSR set to: 0
 28752                           ;T4Config.h: 39: setPWM2duty(400);
 28753  003008  0E01               	movlw	1
 28754  00300A  6E02               	movwf	i2setPWM2duty@actuator+1,c
 28755  00300C  0E90               	movlw	144
 28756  00300E  6E01               	movwf	i2setPWM2duty@actuator,c
 28757  003010  EC29  F035         	call	i2_setPWM2duty	;wreg free
 28758                           
 28759                           ;T4Config.h: 40: LATCbits.LATC4 = 1;
 28760  003014  888B               	bsf	3979,4,c	;volatile
 28761                           
 28762                           ;T4Config.h: 41: }
 28763                           ;T4Config.h: 42: }else if(bladeIsUP == 0){
 28764  003016  0012               	return	
 28765  003018                     i2l9338:
 28766  003018  0100               	movlb	0	; () banked
 28767  00301A  51D4               	movf	_bladeIsUP& (0+255),w,b
 28768  00301C  A4D8               	btfss	status,2,c
 28769  00301E  0012               	return	
 28770                           
 28771                           ; BSR set to: 0
 28772                           ;T4Config.h: 43: if(processTimer >= timsXcorte && processStarted) {
 28773  003020  C037  F009         	movff	_processTimer,i2___altoft@c
 28774  003024  C038  F00A         	movff	_processTimer+1,i2___altoft@c+1
 28775  003028  C039  F00B         	movff	_processTimer+2,i2___altoft@c+2
 28776  00302C  C03A  F00C         	movff	_processTimer+3,i2___altoft@c+3
 28777  003030  EC8D  F033         	call	i2___altoft	;wreg free
 28778  003034  C009  F01F         	movff	?i2___altoft,i2___ftge@ff1
 28779  003038  C00A  F020         	movff	?i2___altoft+1,i2___ftge@ff1+1
 28780  00303C  C00B  F021         	movff	?i2___altoft+2,i2___ftge@ff1+2
 28781  003040  C059  F022         	movff	_timsXcorte,i2___ftge@ff2
 28782  003044  C05A  F023         	movff	_timsXcorte+1,i2___ftge@ff2+1
 28783  003048  C05B  F024         	movff	_timsXcorte+2,i2___ftge@ff2+2
 28784  00304C  ECF4  F030         	call	i2___ftge	;wreg free
 28785  003050  A0D8               	btfss	status,0,c
 28786  003052  0012               	return	
 28787  003054  0100               	movlb	0	; () banked
 28788  003056  51C4               	movf	_processStarted& (0+255),w,b
 28789  003058  B4D8               	btfsc	status,2,c
 28790  00305A  0012               	return	
 28791                           
 28792                           ; BSR set to: 0
 28793                           ;T4Config.h: 44: setPWM2duty(-400);
 28794  00305C  0EFE               	movlw	254
 28795  00305E  6E02               	movwf	i2setPWM2duty@actuator+1,c
 28796  003060  0E70               	movlw	112
 28797  003062  6E01               	movwf	i2setPWM2duty@actuator,c
 28798  003064  EC29  F035         	call	i2_setPWM2duty	;wreg free
 28799  003068  0012               	return	
 28800  00306A                     __end_of_T4int:
 28801                           	opt stack 0
 28802                           pclatu	equ	0xFFB
 28803                           pclath	equ	0xFFA
 28804                           tblptru	equ	0xFF8
 28805                           tblptrh	equ	0xFF7
 28806                           tblptrl	equ	0xFF6
 28807                           tablat	equ	0xFF5
 28808                           prodh	equ	0xFF4
 28809                           prodl	equ	0xFF3
 28810                           intcon	equ	0xFF2
 28811                           postinc0	equ	0xFEE
 28812                           fsr0h	equ	0xFEA
 28813                           fsr0l	equ	0xFE9
 28814                           wreg	equ	0xFE8
 28815                           postdec1	equ	0xFE5
 28816                           fsr1h	equ	0xFE2
 28817                           fsr1l	equ	0xFE1
 28818                           bsr	equ	0xFE0
 28819                           indf2	equ	0xFDF
 28820                           postinc2	equ	0xFDE
 28821                           postdec2	equ	0xFDD
 28822                           plusw2	equ	0xFDB
 28823                           fsr2h	equ	0xFDA
 28824                           fsr2l	equ	0xFD9
 28825                           status	equ	0xFD8
 28826                           
 28827 ;; *************** function i2_setPWM2duty *****************
 28828 ;; Defined at:
 28829 ;;		line 37 in file "source/PWMConfig.h"
 28830 ;; Parameters:    Size  Location     Type
 28831 ;;  actuator        2    0[COMRAM] short 
 28832 ;; Auto vars:     Size  Location     Type
 28833 ;;  setPWM2duty     2    4[COMRAM] short 
 28834 ;; Return value:  Size  Location     Type
 28835 ;;                  1    wreg      void 
 28836 ;; Registers used:
 28837 ;;		wreg, status,2, status,0
 28838 ;; Tracked objects:
 28839 ;;		On entry : 0/0
 28840 ;;		On exit  : 0/0
 28841 ;;		Unchanged: 0/0
 28842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28843 ;;      Params:         2       0       0       0       0       0       0
 28844 ;;      Locals:         2       0       0       0       0       0       0
 28845 ;;      Temps:          2       0       0       0       0       0       0
 28846 ;;      Totals:         6       0       0       0       0       0       0
 28847 ;;Total ram usage:        6 bytes
 28848 ;; Hardware stack levels used:    1
 28849 ;; This function calls:
 28850 ;;		Nothing
 28851 ;; This function is called by:
 28852 ;;		_T4int
 28853 ;; This function uses a non-reentrant model
 28854 ;;
 28855                           
 28856                           	psect	text122
 28857  006A52                     __ptext122:
 28858                           	opt stack 0
 28859  006A52                     i2_setPWM2duty:
 28860                           	opt stack 10
 28861                           
 28862                           ;PWMConfig.h: 38: short act = 400;
 28863                           
 28864                           ;incstack = 0
 28865  006A52  0E01               	movlw	1
 28866  006A54  6E06               	movwf	i2setPWM2duty@act+1,c
 28867  006A56  0E90               	movlw	144
 28868  006A58  6E05               	movwf	i2setPWM2duty@act,c
 28869                           
 28870                           ;PWMConfig.h: 39: if(actuator > 400)
 28871  006A5A  BE02               	btfsc	i2setPWM2duty@actuator+1,7,c
 28872  006A5C  D00A               	goto	i2l8324
 28873  006A5E  0E91               	movlw	145
 28874  006A60  5C01               	subwf	i2setPWM2duty@actuator,w,c
 28875  006A62  0E01               	movlw	1
 28876  006A64  5802               	subwfb	i2setPWM2duty@actuator+1,w,c
 28877  006A66  A0D8               	btfss	status,0,c
 28878  006A68  D004               	goto	i2l8324
 28879                           
 28880                           ;PWMConfig.h: 40: act = 800;
 28881  006A6A  0E03               	movlw	3
 28882  006A6C  6E06               	movwf	i2setPWM2duty@act+1,c
 28883  006A6E  0E20               	movlw	32
 28884  006A70  D00B               	goto	L10
 28885  006A72                     i2l8324:
 28886                           
 28887                           ;PWMConfig.h: 41: else if(actuator < -400)
 28888  006A72  AE02               	btfss	i2setPWM2duty@actuator+1,7,c
 28889  006A74  D00B               	goto	i2l8328
 28890  006A76  0E70               	movlw	112
 28891  006A78  5C01               	subwf	i2setPWM2duty@actuator,w,c
 28892  006A7A  0EFE               	movlw	254
 28893  006A7C  5802               	subwfb	i2setPWM2duty@actuator+1,w,c
 28894  006A7E  B0D8               	btfsc	status,0,c
 28895  006A80  D005               	goto	i2l8328
 28896                           
 28897                           ;PWMConfig.h: 42: act = 0;
 28898  006A82  0E00               	movlw	0
 28899  006A84  6E06               	movwf	i2setPWM2duty@act+1,c
 28900  006A86  0E00               	movlw	0
 28901  006A88                     L10:
 28902  006A88  6E05               	movwf	i2setPWM2duty@act,c
 28903  006A8A  D006               	goto	i2l493
 28904  006A8C                     i2l8328:
 28905                           
 28906                           ;PWMConfig.h: 43: else
 28907                           ;PWMConfig.h: 44: act = actuator + 400;
 28908  006A8C  0E90               	movlw	144
 28909  006A8E  2401               	addwf	i2setPWM2duty@actuator,w,c
 28910  006A90  6E05               	movwf	i2setPWM2duty@act,c
 28911  006A92  0E01               	movlw	1
 28912  006A94  2002               	addwfc	i2setPWM2duty@actuator+1,w,c
 28913  006A96  6E06               	movwf	i2setPWM2duty@act+1,c
 28914  006A98                     i2l493:
 28915                           
 28916                           ;PWMConfig.h: 45: CCP2CONbits.DC2B = act;
 28917  006A98  C005  F003         	movff	i2setPWM2duty@act,??i2_setPWM2duty
 28918  006A9C  3A03               	swapf	??i2_setPWM2duty,f,c
 28919  006A9E  5066               	movf	3942,w,c	;volatile
 28920  006AA0  1803               	xorwf	??i2_setPWM2duty,w,c
 28921  006AA2  0BCF               	andlw	-49
 28922  006AA4  1803               	xorwf	??i2_setPWM2duty,w,c
 28923  006AA6  6E66               	movwf	3942,c	;volatile
 28924                           
 28925                           ;PWMConfig.h: 46: CCPR2L = act>>2;
 28926  006AA8  C005  F003         	movff	i2setPWM2duty@act,??i2_setPWM2duty
 28927  006AAC  C006  F004         	movff	i2setPWM2duty@act+1,??i2_setPWM2duty+1
 28928  006AB0  3404               	rlcf	??i2_setPWM2duty+1,w,c
 28929  006AB2  3204               	rrcf	??i2_setPWM2duty+1,f,c
 28930  006AB4  3203               	rrcf	??i2_setPWM2duty,f,c
 28931  006AB6  3404               	rlcf	??i2_setPWM2duty+1,w,c
 28932  006AB8  3204               	rrcf	??i2_setPWM2duty+1,f,c
 28933  006ABA  3203               	rrcf	??i2_setPWM2duty,f,c
 28934  006ABC  5003               	movf	??i2_setPWM2duty,w,c
 28935  006ABE  6E67               	movwf	3943,c	;volatile
 28936  006AC0  0012               	return		;funcret
 28937  006AC2                     __end_ofi2_setPWM2duty:
 28938                           	opt stack 0
 28939                           pclatu	equ	0xFFB
 28940                           pclath	equ	0xFFA
 28941                           tblptru	equ	0xFF8
 28942                           tblptrh	equ	0xFF7
 28943                           tblptrl	equ	0xFF6
 28944                           tablat	equ	0xFF5
 28945                           prodh	equ	0xFF4
 28946                           prodl	equ	0xFF3
 28947                           intcon	equ	0xFF2
 28948                           postinc0	equ	0xFEE
 28949                           fsr0h	equ	0xFEA
 28950                           fsr0l	equ	0xFE9
 28951                           wreg	equ	0xFE8
 28952                           postdec1	equ	0xFE5
 28953                           fsr1h	equ	0xFE2
 28954                           fsr1l	equ	0xFE1
 28955                           bsr	equ	0xFE0
 28956                           indf2	equ	0xFDF
 28957                           postinc2	equ	0xFDE
 28958                           postdec2	equ	0xFDD
 28959                           plusw2	equ	0xFDB
 28960                           fsr2h	equ	0xFDA
 28961                           fsr2l	equ	0xFD9
 28962                           status	equ	0xFD8
 28963                           
 28964 ;; *************** function i2___ftge *****************
 28965 ;; Defined at:
 28966 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 28967 ;; Parameters:    Size  Location     Type
 28968 ;;  ff1             3   30[COMRAM] float 
 28969 ;;  ff2             3   33[COMRAM] float 
 28970 ;; Auto vars:     Size  Location     Type
 28971 ;;		None
 28972 ;; Return value:  Size  Location     Type
 28973 ;;		None               void
 28974 ;; Registers used:
 28975 ;;		wreg, status,2, status,0
 28976 ;; Tracked objects:
 28977 ;;		On entry : 0/0
 28978 ;;		On exit  : 0/0
 28979 ;;		Unchanged: 0/0
 28980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28981 ;;      Params:         6       0       0       0       0       0       0
 28982 ;;      Locals:         0       0       0       0       0       0       0
 28983 ;;      Temps:          3       0       0       0       0       0       0
 28984 ;;      Totals:         9       0       0       0       0       0       0
 28985 ;;Total ram usage:        9 bytes
 28986 ;; Hardware stack levels used:    1
 28987 ;; This function calls:
 28988 ;;		Nothing
 28989 ;; This function is called by:
 28990 ;;		_T4int
 28991 ;; This function uses a non-reentrant model
 28992 ;;
 28993                           
 28994                           	psect	text123
 28995  0061E8                     __ptext123:
 28996                           	opt stack 0
 28997  0061E8                     i2___ftge:
 28998                           	opt stack 10
 28999                           
 29000                           ;incstack = 0
 29001  0061E8  AE21               	btfss	i2___ftge@ff1+2,7,c
 29002  0061EA  D016               	goto	i2l8906
 29003  0061EC  C01F  F025         	movff	i2___ftge@ff1,??i2___ftge
 29004  0061F0  C020  F026         	movff	i2___ftge@ff1+1,??i2___ftge+1
 29005  0061F4  C021  F027         	movff	i2___ftge@ff1+2,??i2___ftge+2
 29006  0061F8  1E25               	comf	??i2___ftge,f,c
 29007  0061FA  1E26               	comf	??i2___ftge+1,f,c
 29008  0061FC  1E27               	comf	??i2___ftge+2,f,c
 29009  0061FE  2A25               	incf	??i2___ftge,f,c
 29010  006200  0E00               	movlw	0
 29011  006202  2226               	addwfc	??i2___ftge+1,f,c
 29012  006204  2227               	addwfc	??i2___ftge+2,f,c
 29013  006206  0E00               	movlw	0
 29014  006208  2425               	addwf	??i2___ftge,w,c
 29015  00620A  6E1F               	movwf	i2___ftge@ff1,c
 29016  00620C  0E00               	movlw	0
 29017  00620E  2026               	addwfc	??i2___ftge+1,w,c
 29018  006210  6E20               	movwf	i2___ftge@ff1+1,c
 29019  006212  0E80               	movlw	128
 29020  006214  2027               	addwfc	??i2___ftge+2,w,c
 29021  006216  6E21               	movwf	i2___ftge@ff1+2,c
 29022  006218                     i2l8906:
 29023  006218  AE24               	btfss	i2___ftge@ff2+2,7,c
 29024  00621A  D016               	goto	i2l8910
 29025  00621C  C022  F025         	movff	i2___ftge@ff2,??i2___ftge
 29026  006220  C023  F026         	movff	i2___ftge@ff2+1,??i2___ftge+1
 29027  006224  C024  F027         	movff	i2___ftge@ff2+2,??i2___ftge+2
 29028  006228  1E25               	comf	??i2___ftge,f,c
 29029  00622A  1E26               	comf	??i2___ftge+1,f,c
 29030  00622C  1E27               	comf	??i2___ftge+2,f,c
 29031  00622E  2A25               	incf	??i2___ftge,f,c
 29032  006230  0E00               	movlw	0
 29033  006232  2226               	addwfc	??i2___ftge+1,f,c
 29034  006234  2227               	addwfc	??i2___ftge+2,f,c
 29035  006236  0E00               	movlw	0
 29036  006238  2425               	addwf	??i2___ftge,w,c
 29037  00623A  6E22               	movwf	i2___ftge@ff2,c
 29038  00623C  0E00               	movlw	0
 29039  00623E  2026               	addwfc	??i2___ftge+1,w,c
 29040  006240  6E23               	movwf	i2___ftge@ff2+1,c
 29041  006242  0E80               	movlw	128
 29042  006244  2027               	addwfc	??i2___ftge+2,w,c
 29043  006246  6E24               	movwf	i2___ftge@ff2+2,c
 29044  006248                     i2l8910:
 29045  006248  0E00               	movlw	0
 29046  00624A  1A1F               	xorwf	i2___ftge@ff1,f,c
 29047  00624C  0E00               	movlw	0
 29048  00624E  1A20               	xorwf	i2___ftge@ff1+1,f,c
 29049  006250  0E80               	movlw	128
 29050  006252  1A21               	xorwf	i2___ftge@ff1+2,f,c
 29051  006254  0E00               	movlw	0
 29052  006256  1A22               	xorwf	i2___ftge@ff2,f,c
 29053  006258  0E00               	movlw	0
 29054  00625A  1A23               	xorwf	i2___ftge@ff2+1,f,c
 29055  00625C  0E80               	movlw	128
 29056  00625E  1A24               	xorwf	i2___ftge@ff2+2,f,c
 29057  006260  5022               	movf	i2___ftge@ff2,w,c
 29058  006262  5C1F               	subwf	i2___ftge@ff1,w,c
 29059  006264  5023               	movf	i2___ftge@ff2+1,w,c
 29060  006266  5820               	subwfb	i2___ftge@ff1+1,w,c
 29061  006268  5024               	movf	i2___ftge@ff2+2,w,c
 29062  00626A  5821               	subwfb	i2___ftge@ff1+2,w,c
 29063  00626C  B0D8               	btfsc	status,0,c
 29064  00626E  D002               	goto	i2l8916
 29065  006270  90D8               	bcf	status,0,c
 29066  006272  0012               	return	
 29067  006274                     i2l8916:
 29068  006274  80D8               	bsf	status,0,c
 29069  006276  0012               	return	
 29070  006278                     __end_ofi2___ftge:
 29071                           	opt stack 0
 29072                           pclatu	equ	0xFFB
 29073                           pclath	equ	0xFFA
 29074                           tblptru	equ	0xFF8
 29075                           tblptrh	equ	0xFF7
 29076                           tblptrl	equ	0xFF6
 29077                           tablat	equ	0xFF5
 29078                           prodh	equ	0xFF4
 29079                           prodl	equ	0xFF3
 29080                           intcon	equ	0xFF2
 29081                           postinc0	equ	0xFEE
 29082                           fsr0h	equ	0xFEA
 29083                           fsr0l	equ	0xFE9
 29084                           wreg	equ	0xFE8
 29085                           postdec1	equ	0xFE5
 29086                           fsr1h	equ	0xFE2
 29087                           fsr1l	equ	0xFE1
 29088                           bsr	equ	0xFE0
 29089                           indf2	equ	0xFDF
 29090                           postinc2	equ	0xFDE
 29091                           postdec2	equ	0xFDD
 29092                           plusw2	equ	0xFDB
 29093                           fsr2h	equ	0xFDA
 29094                           fsr2l	equ	0xFD9
 29095                           status	equ	0xFD8
 29096                           
 29097 ;; *************** function i2___ftadd *****************
 29098 ;; Defined at:
 29099 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 29100 ;; Parameters:    Size  Location     Type
 29101 ;;  f1              3   18[COMRAM] float 
 29102 ;;  f2              3   21[COMRAM] float 
 29103 ;; Auto vars:     Size  Location     Type
 29104 ;;  __ftadd         1   29[COMRAM] unsigned char 
 29105 ;;  __ftadd         1   28[COMRAM] unsigned char 
 29106 ;;  __ftadd         1   27[COMRAM] unsigned char 
 29107 ;; Return value:  Size  Location     Type
 29108 ;;                  3   18[COMRAM] float 
 29109 ;; Registers used:
 29110 ;;		wreg, status,2, status,0, cstack
 29111 ;; Tracked objects:
 29112 ;;		On entry : 0/0
 29113 ;;		On exit  : 0/0
 29114 ;;		Unchanged: 0/0
 29115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29116 ;;      Params:         6       0       0       0       0       0       0
 29117 ;;      Locals:         3       0       0       0       0       0       0
 29118 ;;      Temps:          3       0       0       0       0       0       0
 29119 ;;      Totals:        12       0       0       0       0       0       0
 29120 ;;Total ram usage:       12 bytes
 29121 ;; Hardware stack levels used:    1
 29122 ;; Hardware stack levels required when called:    1
 29123 ;; This function calls:
 29124 ;;		i2___ftpack
 29125 ;; This function is called by:
 29126 ;;		_T4int
 29127 ;; This function uses a non-reentrant model
 29128 ;;
 29129                           
 29130                           	psect	text124
 29131  003220                     __ptext124:
 29132                           	opt stack 0
 29133  003220                     i2___ftadd:
 29134                           	opt stack 9
 29135                           
 29136                           ;incstack = 0
 29137  003220  C015  F019         	movff	i2___ftadd@f1+2,??i2___ftadd
 29138  003224  6A1A               	clrf	(??i2___ftadd+1)& (0+255),c
 29139  003226  6A1B               	clrf	(??i2___ftadd+2)& (0+255),c
 29140  003228  3414               	rlcf	i2___ftadd@f1+1,w,c
 29141  00322A  3619               	rlcf	??i2___ftadd& (0+255),f,c
 29142  00322C  E301               	bnc	u1263_41
 29143  00322E  801A               	bsf	(??i2___ftadd+1)& (0+255),0,c
 29144  003230                     u1263_41:
 29145  003230  5019               	movf	??i2___ftadd,w,c
 29146  003232  6E1E               	movwf	i2___ftadd@exp1,c
 29147  003234  C018  F019         	movff	i2___ftadd@f2+2,??i2___ftadd
 29148  003238  6A1A               	clrf	(??i2___ftadd+1)& (0+255),c
 29149  00323A  6A1B               	clrf	(??i2___ftadd+2)& (0+255),c
 29150  00323C  3417               	rlcf	i2___ftadd@f2+1,w,c
 29151  00323E  3619               	rlcf	??i2___ftadd& (0+255),f,c
 29152  003240  E301               	bnc	u1264_41
 29153  003242  801A               	bsf	(??i2___ftadd+1)& (0+255),0,c
 29154  003244                     u1264_41:
 29155  003244  5019               	movf	??i2___ftadd,w,c
 29156  003246  6E1D               	movwf	i2___ftadd@exp2,c
 29157  003248  501E               	movf	i2___ftadd@exp1,w,c
 29158  00324A  B4D8               	btfsc	status,2,c
 29159  00324C  D00B               	goto	i2l1334
 29160  00324E  501D               	movf	i2___ftadd@exp2,w,c
 29161  003250  5C1E               	subwf	i2___ftadd@exp1,w,c
 29162  003252  B0D8               	btfsc	status,0,c
 29163  003254  D00E               	goto	i2l8840
 29164  003256  501E               	movf	i2___ftadd@exp1,w,c
 29165  003258  0800               	sublw	0
 29166  00325A  241D               	addwf	i2___ftadd@exp2,w,c
 29167  00325C  6E19               	movwf	??i2___ftadd& (0+255),c
 29168  00325E  0E18               	movlw	24
 29169  003260  6419               	cpfsgt	??i2___ftadd,c
 29170  003262  D007               	goto	i2l8840
 29171  003264                     i2l1334:
 29172  003264  C016  F013         	movff	i2___ftadd@f2,?i2___ftadd
 29173  003268  C017  F014         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 29174  00326C  C018  F015         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 29175  003270  0012               	return	
 29176  003272                     i2l8840:
 29177  003272  501D               	movf	i2___ftadd@exp2,w,c
 29178  003274  B4D8               	btfsc	status,2,c
 29179  003276  D00B               	goto	i2l1338
 29180  003278  501E               	movf	i2___ftadd@exp1,w,c
 29181  00327A  5C1D               	subwf	i2___ftadd@exp2,w,c
 29182  00327C  B0D8               	btfsc	status,0,c
 29183  00327E  D00E               	goto	i2l8846
 29184  003280  501D               	movf	i2___ftadd@exp2,w,c
 29185  003282  0800               	sublw	0
 29186  003284  241E               	addwf	i2___ftadd@exp1,w,c
 29187  003286  6E19               	movwf	??i2___ftadd& (0+255),c
 29188  003288  0E18               	movlw	24
 29189  00328A  6419               	cpfsgt	??i2___ftadd,c
 29190  00328C  D007               	goto	i2l8846
 29191  00328E                     i2l1338:
 29192  00328E  C013  F013         	movff	i2___ftadd@f1,?i2___ftadd
 29193  003292  C014  F014         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 29194  003296  C015  F015         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 29195  00329A  0012               	return	
 29196  00329C                     i2l8846:
 29197  00329C  0E06               	movlw	6
 29198  00329E  6E1C               	movwf	i2___ftadd@sign,c
 29199  0032A0  BE15               	btfsc	i2___ftadd@f1+2,7,c
 29200  0032A2  8E1C               	bsf	i2___ftadd@sign,7,c
 29201  0032A4  BE18               	btfsc	i2___ftadd@f2+2,7,c
 29202  0032A6  8C1C               	bsf	i2___ftadd@sign,6,c
 29203  0032A8  8E14               	bsf	i2___ftadd@f1+1,7,c
 29204  0032AA  0EFF               	movlw	255
 29205  0032AC  1613               	andwf	i2___ftadd@f1,f,c
 29206  0032AE  0EFF               	movlw	255
 29207  0032B0  1614               	andwf	i2___ftadd@f1+1,f,c
 29208  0032B2  0E00               	movlw	0
 29209  0032B4  1615               	andwf	i2___ftadd@f1+2,f,c
 29210  0032B6  8E17               	bsf	i2___ftadd@f2+1,7,c
 29211  0032B8  0EFF               	movlw	255
 29212  0032BA  1616               	andwf	i2___ftadd@f2,f,c
 29213  0032BC  0EFF               	movlw	255
 29214  0032BE  1617               	andwf	i2___ftadd@f2+1,f,c
 29215  0032C0  0E00               	movlw	0
 29216  0032C2  1618               	andwf	i2___ftadd@f2+2,f,c
 29217  0032C4  501D               	movf	i2___ftadd@exp2,w,c
 29218  0032C6  5C1E               	subwf	i2___ftadd@exp1,w,c
 29219  0032C8  B0D8               	btfsc	status,0,c
 29220  0032CA  D01B               	goto	i2l8872
 29221  0032CC                     i2l8862:
 29222  0032CC  90D8               	bcf	status,0,c
 29223  0032CE  3616               	rlcf	i2___ftadd@f2,f,c
 29224  0032D0  3617               	rlcf	i2___ftadd@f2+1,f,c
 29225  0032D2  3618               	rlcf	i2___ftadd@f2+2,f,c
 29226  0032D4  061D               	decf	i2___ftadd@exp2,f,c
 29227  0032D6  501E               	movf	i2___ftadd@exp1,w,c
 29228  0032D8  181D               	xorwf	i2___ftadd@exp2,w,c
 29229  0032DA  B4D8               	btfsc	status,2,c
 29230  0032DC  D00D               	goto	i2l8870
 29231  0032DE  061C               	decf	i2___ftadd@sign,f,c
 29232  0032E0  C01C  F019         	movff	i2___ftadd@sign,??i2___ftadd
 29233  0032E4  0E07               	movlw	7
 29234  0032E6  1619               	andwf	??i2___ftadd,f,c
 29235  0032E8  B4D8               	btfsc	status,2,c
 29236  0032EA  D006               	goto	i2l8870
 29237  0032EC  D7EF               	goto	i2l8862
 29238  0032EE                     i2l8868:
 29239  0032EE  90D8               	bcf	status,0,c
 29240  0032F0  3215               	rrcf	i2___ftadd@f1+2,f,c
 29241  0032F2  3214               	rrcf	i2___ftadd@f1+1,f,c
 29242  0032F4  3213               	rrcf	i2___ftadd@f1,f,c
 29243  0032F6  2A1E               	incf	i2___ftadd@exp1,f,c
 29244  0032F8                     i2l8870:
 29245  0032F8  501D               	movf	i2___ftadd@exp2,w,c
 29246  0032FA  181E               	xorwf	i2___ftadd@exp1,w,c
 29247  0032FC  B4D8               	btfsc	status,2,c
 29248  0032FE  D01F               	goto	i2l1349
 29249  003300  D7F6               	goto	i2l8868
 29250  003302                     i2l8872:
 29251  003302  501E               	movf	i2___ftadd@exp1,w,c
 29252  003304  5C1D               	subwf	i2___ftadd@exp2,w,c
 29253  003306  B0D8               	btfsc	status,0,c
 29254  003308  D01A               	goto	i2l1349
 29255  00330A                     i2l8874:
 29256  00330A  90D8               	bcf	status,0,c
 29257  00330C  3613               	rlcf	i2___ftadd@f1,f,c
 29258  00330E  3614               	rlcf	i2___ftadd@f1+1,f,c
 29259  003310  3615               	rlcf	i2___ftadd@f1+2,f,c
 29260  003312  061E               	decf	i2___ftadd@exp1,f,c
 29261  003314  501E               	movf	i2___ftadd@exp1,w,c
 29262  003316  181D               	xorwf	i2___ftadd@exp2,w,c
 29263  003318  B4D8               	btfsc	status,2,c
 29264  00331A  D00D               	goto	i2l8882
 29265  00331C  061C               	decf	i2___ftadd@sign,f,c
 29266  00331E  C01C  F019         	movff	i2___ftadd@sign,??i2___ftadd
 29267  003322  0E07               	movlw	7
 29268  003324  1619               	andwf	??i2___ftadd,f,c
 29269  003326  B4D8               	btfsc	status,2,c
 29270  003328  D006               	goto	i2l8882
 29271  00332A  D7EF               	goto	i2l8874
 29272  00332C                     i2l8880:
 29273  00332C  90D8               	bcf	status,0,c
 29274  00332E  3218               	rrcf	i2___ftadd@f2+2,f,c
 29275  003330  3217               	rrcf	i2___ftadd@f2+1,f,c
 29276  003332  3216               	rrcf	i2___ftadd@f2,f,c
 29277  003334  2A1D               	incf	i2___ftadd@exp2,f,c
 29278  003336                     i2l8882:
 29279  003336  501D               	movf	i2___ftadd@exp2,w,c
 29280  003338  181E               	xorwf	i2___ftadd@exp1,w,c
 29281  00333A  A4D8               	btfss	status,2,c
 29282  00333C  D7F7               	goto	i2l8880
 29283  00333E                     i2l1349:
 29284  00333E  AE1C               	btfss	i2___ftadd@sign,7,c
 29285  003340  D00C               	goto	i2l1358
 29286  003342  0EFF               	movlw	255
 29287  003344  1A13               	xorwf	i2___ftadd@f1,f,c
 29288  003346  0EFF               	movlw	255
 29289  003348  1A14               	xorwf	i2___ftadd@f1+1,f,c
 29290  00334A  0EFF               	movlw	255
 29291  00334C  1A15               	xorwf	i2___ftadd@f1+2,f,c
 29292  00334E  0E01               	movlw	1
 29293  003350  2613               	addwf	i2___ftadd@f1,f,c
 29294  003352  0E00               	movlw	0
 29295  003354  2214               	addwfc	i2___ftadd@f1+1,f,c
 29296  003356  0E00               	movlw	0
 29297  003358  2215               	addwfc	i2___ftadd@f1+2,f,c
 29298  00335A                     i2l1358:
 29299  00335A  AC1C               	btfss	i2___ftadd@sign,6,c
 29300  00335C  D00C               	goto	i2l8888
 29301  00335E  0EFF               	movlw	255
 29302  003360  1A16               	xorwf	i2___ftadd@f2,f,c
 29303  003362  0EFF               	movlw	255
 29304  003364  1A17               	xorwf	i2___ftadd@f2+1,f,c
 29305  003366  0EFF               	movlw	255
 29306  003368  1A18               	xorwf	i2___ftadd@f2+2,f,c
 29307  00336A  0E01               	movlw	1
 29308  00336C  2616               	addwf	i2___ftadd@f2,f,c
 29309  00336E  0E00               	movlw	0
 29310  003370  2217               	addwfc	i2___ftadd@f2+1,f,c
 29311  003372  0E00               	movlw	0
 29312  003374  2218               	addwfc	i2___ftadd@f2+2,f,c
 29313  003376                     i2l8888:
 29314  003376  0E00               	movlw	0
 29315  003378  6E1C               	movwf	i2___ftadd@sign,c
 29316  00337A  5013               	movf	i2___ftadd@f1,w,c
 29317  00337C  2616               	addwf	i2___ftadd@f2,f,c
 29318  00337E  5014               	movf	i2___ftadd@f1+1,w,c
 29319  003380  2217               	addwfc	i2___ftadd@f2+1,f,c
 29320  003382  5015               	movf	i2___ftadd@f1+2,w,c
 29321  003384  2218               	addwfc	i2___ftadd@f2+2,f,c
 29322  003386  AE18               	btfss	i2___ftadd@f2+2,7,c
 29323  003388  D00E               	goto	i2l8898
 29324  00338A  0EFF               	movlw	255
 29325  00338C  1A16               	xorwf	i2___ftadd@f2,f,c
 29326  00338E  0EFF               	movlw	255
 29327  003390  1A17               	xorwf	i2___ftadd@f2+1,f,c
 29328  003392  0EFF               	movlw	255
 29329  003394  1A18               	xorwf	i2___ftadd@f2+2,f,c
 29330  003396  0E01               	movlw	1
 29331  003398  2616               	addwf	i2___ftadd@f2,f,c
 29332  00339A  0E00               	movlw	0
 29333  00339C  2217               	addwfc	i2___ftadd@f2+1,f,c
 29334  00339E  0E00               	movlw	0
 29335  0033A0  2218               	addwfc	i2___ftadd@f2+2,f,c
 29336  0033A2  0E01               	movlw	1
 29337  0033A4  6E1C               	movwf	i2___ftadd@sign,c
 29338  0033A6                     i2l8898:
 29339  0033A6  C016  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 29340  0033AA  C017  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 29341  0033AE  C018  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 29342  0033B2  C01E  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 29343  0033B6  C01C  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 29344  0033BA  ECA1  F02D         	call	i2___ftpack	;wreg free
 29345  0033BE  C001  F013         	movff	?i2___ftpack,?i2___ftadd
 29346  0033C2  C002  F014         	movff	?i2___ftpack+1,?i2___ftadd+1
 29347  0033C6  C003  F015         	movff	?i2___ftpack+2,?i2___ftadd+2
 29348  0033CA  0012               	return	
 29349  0033CC                     __end_ofi2___ftadd:
 29350                           	opt stack 0
 29351                           pclatu	equ	0xFFB
 29352                           pclath	equ	0xFFA
 29353                           tblptru	equ	0xFF8
 29354                           tblptrh	equ	0xFF7
 29355                           tblptrl	equ	0xFF6
 29356                           tablat	equ	0xFF5
 29357                           prodh	equ	0xFF4
 29358                           prodl	equ	0xFF3
 29359                           intcon	equ	0xFF2
 29360                           postinc0	equ	0xFEE
 29361                           fsr0h	equ	0xFEA
 29362                           fsr0l	equ	0xFE9
 29363                           wreg	equ	0xFE8
 29364                           postdec1	equ	0xFE5
 29365                           fsr1h	equ	0xFE2
 29366                           fsr1l	equ	0xFE1
 29367                           bsr	equ	0xFE0
 29368                           indf2	equ	0xFDF
 29369                           postinc2	equ	0xFDE
 29370                           postdec2	equ	0xFDD
 29371                           plusw2	equ	0xFDB
 29372                           fsr2h	equ	0xFDA
 29373                           fsr2l	equ	0xFD9
 29374                           status	equ	0xFD8
 29375                           
 29376 ;; *************** function i2___altoft *****************
 29377 ;; Defined at:
 29378 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
 29379 ;; Parameters:    Size  Location     Type
 29380 ;;  c               4    8[COMRAM] long 
 29381 ;; Auto vars:     Size  Location     Type
 29382 ;;  __altoft        1   17[COMRAM] unsigned char 
 29383 ;;  __altoft        1   16[COMRAM] unsigned char 
 29384 ;; Return value:  Size  Location     Type
 29385 ;;                  3    8[COMRAM] float 
 29386 ;; Registers used:
 29387 ;;		wreg, status,2, status,0, cstack
 29388 ;; Tracked objects:
 29389 ;;		On entry : 0/0
 29390 ;;		On exit  : 0/0
 29391 ;;		Unchanged: 0/0
 29392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29393 ;;      Params:         4       0       0       0       0       0       0
 29394 ;;      Locals:         2       0       0       0       0       0       0
 29395 ;;      Temps:          4       0       0       0       0       0       0
 29396 ;;      Totals:        10       0       0       0       0       0       0
 29397 ;;Total ram usage:       10 bytes
 29398 ;; Hardware stack levels used:    1
 29399 ;; Hardware stack levels required when called:    1
 29400 ;; This function calls:
 29401 ;;		i2___ftpack
 29402 ;; This function is called by:
 29403 ;;		_T4int
 29404 ;; This function uses a non-reentrant model
 29405 ;;
 29406                           
 29407                           	psect	text125
 29408  00671A                     __ptext125:
 29409                           	opt stack 0
 29410  00671A                     i2___altoft:
 29411                           	opt stack 9
 29412                           
 29413                           ;incstack = 0
 29414  00671A  0E00               	movlw	0
 29415  00671C  6E12               	movwf	i2___altoft@sign,c
 29416  00671E  0E8E               	movlw	142
 29417  006720  6E11               	movwf	i2___altoft@exp,c
 29418  006722  AE0C               	btfss	i2___altoft@c+3,7,c
 29419  006724  D011               	goto	i2l8826
 29420  006726  1E0C               	comf	i2___altoft@c+3,f,c
 29421  006728  1E0B               	comf	i2___altoft@c+2,f,c
 29422  00672A  1E0A               	comf	i2___altoft@c+1,f,c
 29423  00672C  6C09               	negf	i2___altoft@c,c
 29424  00672E  0E00               	movlw	0
 29425  006730  220A               	addwfc	i2___altoft@c+1,f,c
 29426  006732  220B               	addwfc	i2___altoft@c+2,f,c
 29427  006734  220C               	addwfc	i2___altoft@c+3,f,c
 29428  006736  0E01               	movlw	1
 29429  006738  6E12               	movwf	i2___altoft@sign,c
 29430  00673A  D006               	goto	i2l8826
 29431  00673C                     i2l8824:
 29432  00673C  90D8               	bcf	status,0,c
 29433  00673E  320C               	rrcf	i2___altoft@c+3,f,c
 29434  006740  320B               	rrcf	i2___altoft@c+2,f,c
 29435  006742  320A               	rrcf	i2___altoft@c+1,f,c
 29436  006744  3209               	rrcf	i2___altoft@c,f,c
 29437  006746  2A11               	incf	i2___altoft@exp,f,c
 29438  006748                     i2l8826:
 29439  006748  0E00               	movlw	0
 29440  00674A  1409               	andwf	i2___altoft@c,w,c
 29441  00674C  6E0D               	movwf	??i2___altoft& (0+255),c
 29442  00674E  0E00               	movlw	0
 29443  006750  140A               	andwf	i2___altoft@c+1,w,c
 29444  006752  6E0E               	movwf	(??i2___altoft+1)& (0+255),c
 29445  006754  0E00               	movlw	0
 29446  006756  140B               	andwf	i2___altoft@c+2,w,c
 29447  006758  6E0F               	movwf	(??i2___altoft+2)& (0+255),c
 29448  00675A  0EFF               	movlw	255
 29449  00675C  140C               	andwf	i2___altoft@c+3,w,c
 29450  00675E  6E10               	movwf	(??i2___altoft+3)& (0+255),c
 29451  006760  500D               	movf	??i2___altoft,w,c
 29452  006762  100E               	iorwf	??i2___altoft+1,w,c
 29453  006764  100F               	iorwf	??i2___altoft+2,w,c
 29454  006766  1010               	iorwf	??i2___altoft+3,w,c
 29455  006768  A4D8               	btfss	status,2,c
 29456  00676A  D7E8               	goto	i2l8824
 29457  00676C  C009  F001         	movff	i2___altoft@c,i2___ftpack@arg
 29458  006770  C00A  F002         	movff	i2___altoft@c+1,i2___ftpack@arg+1
 29459  006774  C00B  F003         	movff	i2___altoft@c+2,i2___ftpack@arg+2
 29460  006778  C011  F004         	movff	i2___altoft@exp,i2___ftpack@exp
 29461  00677C  C012  F005         	movff	i2___altoft@sign,i2___ftpack@sign
 29462  006780  ECA1  F02D         	call	i2___ftpack	;wreg free
 29463  006784  C001  F009         	movff	?i2___ftpack,?i2___altoft
 29464  006788  C002  F00A         	movff	?i2___ftpack+1,?i2___altoft+1
 29465  00678C  C003  F00B         	movff	?i2___ftpack+2,?i2___altoft+2
 29466  006790  0012               	return	
 29467  006792                     __end_ofi2___altoft:
 29468                           	opt stack 0
 29469                           pclatu	equ	0xFFB
 29470                           pclath	equ	0xFFA
 29471                           tblptru	equ	0xFF8
 29472                           tblptrh	equ	0xFF7
 29473                           tblptrl	equ	0xFF6
 29474                           tablat	equ	0xFF5
 29475                           prodh	equ	0xFF4
 29476                           prodl	equ	0xFF3
 29477                           intcon	equ	0xFF2
 29478                           postinc0	equ	0xFEE
 29479                           fsr0h	equ	0xFEA
 29480                           fsr0l	equ	0xFE9
 29481                           wreg	equ	0xFE8
 29482                           postdec1	equ	0xFE5
 29483                           fsr1h	equ	0xFE2
 29484                           fsr1l	equ	0xFE1
 29485                           bsr	equ	0xFE0
 29486                           indf2	equ	0xFDF
 29487                           postinc2	equ	0xFDE
 29488                           postdec2	equ	0xFDD
 29489                           plusw2	equ	0xFDB
 29490                           fsr2h	equ	0xFDA
 29491                           fsr2l	equ	0xFD9
 29492                           status	equ	0xFD8
 29493                           
 29494 ;; *************** function i2___ftpack *****************
 29495 ;; Defined at:
 29496 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 29497 ;; Parameters:    Size  Location     Type
 29498 ;;  arg             3    0[COMRAM] unsigned um
 29499 ;;  exp             1    3[COMRAM] unsigned char 
 29500 ;;  sign            1    4[COMRAM] unsigned char 
 29501 ;; Auto vars:     Size  Location     Type
 29502 ;;		None
 29503 ;; Return value:  Size  Location     Type
 29504 ;;                  3    0[COMRAM] float 
 29505 ;; Registers used:
 29506 ;;		wreg, status,2, status,0
 29507 ;; Tracked objects:
 29508 ;;		On entry : 0/0
 29509 ;;		On exit  : 0/0
 29510 ;;		Unchanged: 0/0
 29511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29512 ;;      Params:         5       0       0       0       0       0       0
 29513 ;;      Locals:         0       0       0       0       0       0       0
 29514 ;;      Temps:          3       0       0       0       0       0       0
 29515 ;;      Totals:         8       0       0       0       0       0       0
 29516 ;;Total ram usage:        8 bytes
 29517 ;; Hardware stack levels used:    1
 29518 ;; This function calls:
 29519 ;;		Nothing
 29520 ;; This function is called by:
 29521 ;;		i2___altoft
 29522 ;;		i2___ftadd
 29523 ;; This function uses a non-reentrant model
 29524 ;;
 29525                           
 29526                           	psect	text126
 29527  005B42                     __ptext126:
 29528                           	opt stack 0
 29529  005B42                     i2___ftpack:
 29530                           	opt stack 9
 29531                           
 29532                           ;incstack = 0
 29533  005B42  5004               	movf	i2___ftpack@exp,w,c
 29534  005B44  B4D8               	btfsc	status,2,c
 29535  005B46  D005               	goto	i2l7466
 29536  005B48  5001               	movf	i2___ftpack@arg,w,c
 29537  005B4A  1002               	iorwf	i2___ftpack@arg+1,w,c
 29538  005B4C  1003               	iorwf	i2___ftpack@arg+2,w,c
 29539  005B4E  A4D8               	btfss	status,2,c
 29540  005B50  D00C               	goto	i2l7472
 29541  005B52                     i2l7466:
 29542  005B52  0E00               	movlw	0
 29543  005B54  6E01               	movwf	?i2___ftpack,c
 29544  005B56  0E00               	movlw	0
 29545  005B58  6E02               	movwf	?i2___ftpack+1,c
 29546  005B5A  0E00               	movlw	0
 29547  005B5C  6E03               	movwf	?i2___ftpack+2,c
 29548  005B5E  0012               	return	
 29549  005B60                     i2l7470:
 29550  005B60  2A04               	incf	i2___ftpack@exp,f,c
 29551  005B62  90D8               	bcf	status,0,c
 29552  005B64  3203               	rrcf	i2___ftpack@arg+2,f,c
 29553  005B66  3202               	rrcf	i2___ftpack@arg+1,f,c
 29554  005B68  3201               	rrcf	i2___ftpack@arg,f,c
 29555  005B6A                     i2l7472:
 29556  005B6A  0E00               	movlw	0
 29557  005B6C  1401               	andwf	i2___ftpack@arg,w,c
 29558  005B6E  6E06               	movwf	??i2___ftpack& (0+255),c
 29559  005B70  0E00               	movlw	0
 29560  005B72  1402               	andwf	i2___ftpack@arg+1,w,c
 29561  005B74  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 29562  005B76  0EFE               	movlw	254
 29563  005B78  1403               	andwf	i2___ftpack@arg+2,w,c
 29564  005B7A  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 29565  005B7C  5006               	movf	??i2___ftpack,w,c
 29566  005B7E  1007               	iorwf	??i2___ftpack+1,w,c
 29567  005B80  1008               	iorwf	??i2___ftpack+2,w,c
 29568  005B82  B4D8               	btfsc	status,2,c
 29569  005B84  D00C               	goto	i2l7478
 29570  005B86  D7EC               	goto	i2l7470
 29571  005B88                     i2l7474:
 29572  005B88  2A04               	incf	i2___ftpack@exp,f,c
 29573  005B8A  0E01               	movlw	1
 29574  005B8C  2601               	addwf	i2___ftpack@arg,f,c
 29575  005B8E  0E00               	movlw	0
 29576  005B90  2202               	addwfc	i2___ftpack@arg+1,f,c
 29577  005B92  0E00               	movlw	0
 29578  005B94  2203               	addwfc	i2___ftpack@arg+2,f,c
 29579  005B96  90D8               	bcf	status,0,c
 29580  005B98  3203               	rrcf	i2___ftpack@arg+2,f,c
 29581  005B9A  3202               	rrcf	i2___ftpack@arg+1,f,c
 29582  005B9C  3201               	rrcf	i2___ftpack@arg,f,c
 29583  005B9E                     i2l7478:
 29584  005B9E  0E00               	movlw	0
 29585  005BA0  1401               	andwf	i2___ftpack@arg,w,c
 29586  005BA2  6E06               	movwf	??i2___ftpack& (0+255),c
 29587  005BA4  0E00               	movlw	0
 29588  005BA6  1402               	andwf	i2___ftpack@arg+1,w,c
 29589  005BA8  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 29590  005BAA  0EFF               	movlw	255
 29591  005BAC  1403               	andwf	i2___ftpack@arg+2,w,c
 29592  005BAE  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 29593  005BB0  5006               	movf	??i2___ftpack,w,c
 29594  005BB2  1007               	iorwf	??i2___ftpack+1,w,c
 29595  005BB4  1008               	iorwf	??i2___ftpack+2,w,c
 29596  005BB6  B4D8               	btfsc	status,2,c
 29597  005BB8  D006               	goto	i2l7482
 29598  005BBA  D7E6               	goto	i2l7474
 29599  005BBC                     i2l7480:
 29600  005BBC  0604               	decf	i2___ftpack@exp,f,c
 29601  005BBE  90D8               	bcf	status,0,c
 29602  005BC0  3601               	rlcf	i2___ftpack@arg,f,c
 29603  005BC2  3602               	rlcf	i2___ftpack@arg+1,f,c
 29604  005BC4  3603               	rlcf	i2___ftpack@arg+2,f,c
 29605  005BC6                     i2l7482:
 29606  005BC6  BE02               	btfsc	i2___ftpack@arg+1,7,c
 29607  005BC8  D003               	goto	i2l1311
 29608  005BCA  0E02               	movlw	2
 29609  005BCC  6004               	cpfslt	i2___ftpack@exp,c
 29610  005BCE  D7F6               	goto	i2l7480
 29611  005BD0                     i2l1311:
 29612  005BD0  A004               	btfss	i2___ftpack@exp,0,c
 29613  005BD2  9E02               	bcf	i2___ftpack@arg+1,7,c
 29614  005BD4  90D8               	bcf	status,0,c
 29615  005BD6  3204               	rrcf	i2___ftpack@exp,f,c
 29616  005BD8  5004               	movf	i2___ftpack@exp,w,c
 29617  005BDA  1203               	iorwf	i2___ftpack@arg+2,f,c
 29618  005BDC  5005               	movf	i2___ftpack@sign,w,c
 29619  005BDE  A4D8               	btfss	status,2,c
 29620  005BE0  8E03               	bsf	i2___ftpack@arg+2,7,c
 29621  005BE2  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 29622  005BE6  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 29623  005BEA  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 29624  005BEE  0012               	return	
 29625  005BF0                     __end_ofi2___ftpack:
 29626                           	opt stack 0
 29627                           pclatu	equ	0xFFB
 29628                           pclath	equ	0xFFA
 29629                           tblptru	equ	0xFF8
 29630                           tblptrh	equ	0xFF7
 29631                           tblptrl	equ	0xFF6
 29632                           tablat	equ	0xFF5
 29633                           prodh	equ	0xFF4
 29634                           prodl	equ	0xFF3
 29635                           intcon	equ	0xFF2
 29636                           postinc0	equ	0xFEE
 29637                           fsr0h	equ	0xFEA
 29638                           fsr0l	equ	0xFE9
 29639                           wreg	equ	0xFE8
 29640                           postdec1	equ	0xFE5
 29641                           fsr1h	equ	0xFE2
 29642                           fsr1l	equ	0xFE1
 29643                           bsr	equ	0xFE0
 29644                           indf2	equ	0xFDF
 29645                           postinc2	equ	0xFDE
 29646                           postdec2	equ	0xFDD
 29647                           plusw2	equ	0xFDB
 29648                           fsr2h	equ	0xFDA
 29649                           fsr2l	equ	0xFD9
 29650                           status	equ	0xFD8
 29651                           
 29652 ;; *************** function _cutError *****************
 29653 ;; Defined at:
 29654 ;;		line 12 in file "source/T4Config.h"
 29655 ;; Parameters:    Size  Location     Type
 29656 ;;		None
 29657 ;; Auto vars:     Size  Location     Type
 29658 ;;		None
 29659 ;; Return value:  Size  Location     Type
 29660 ;;                  1    wreg      void 
 29661 ;; Registers used:
 29662 ;;		wreg, status,2
 29663 ;; Tracked objects:
 29664 ;;		On entry : 0/0
 29665 ;;		On exit  : 0/0
 29666 ;;		Unchanged: 0/0
 29667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29668 ;;      Params:         0       0       0       0       0       0       0
 29669 ;;      Locals:         0       0       0       0       0       0       0
 29670 ;;      Temps:          0       0       0       0       0       0       0
 29671 ;;      Totals:         0       0       0       0       0       0       0
 29672 ;;Total ram usage:        0 bytes
 29673 ;; Hardware stack levels used:    1
 29674 ;; This function calls:
 29675 ;;		Nothing
 29676 ;; This function is called by:
 29677 ;;		_T4int
 29678 ;; This function uses a non-reentrant model
 29679 ;;
 29680                           
 29681                           	psect	text127
 29682  007108                     __ptext127:
 29683                           	opt stack 0
 29684  007108                     _cutError:
 29685                           	opt stack 10
 29686                           
 29687                           ;T4Config.h: 13: processStarted = 0;
 29688                           
 29689                           ;incstack = 0
 29690  007108  0E00               	movlw	0
 29691  00710A  0100               	movlb	0	; () banked
 29692  00710C  6FC4               	movwf	_processStarted& (0+255),b
 29693                           
 29694                           ;T4Config.h: 14: processState = 0;
 29695  00710E  0E00               	movlw	0
 29696  007110  0100               	movlb	0	; () banked
 29697  007112  6FB5               	movwf	(_processState+1)& (0+255),b
 29698  007114  0E00               	movlw	0
 29699  007116  6FB4               	movwf	_processState& (0+255),b
 29700                           
 29701                           ;T4Config.h: 15: securTimer = 0;
 29702  007118  0E00               	movlw	0
 29703  00711A  6E3B               	movwf	_securTimer,c
 29704  00711C  0E00               	movlw	0
 29705  00711E  6E3C               	movwf	_securTimer+1,c
 29706  007120  0E00               	movlw	0
 29707  007122  6E3D               	movwf	_securTimer+2,c
 29708  007124  0E00               	movlw	0
 29709  007126  6E3E               	movwf	_securTimer+3,c
 29710                           
 29711                           ; BSR set to: 0
 29712                           ;T4Config.h: 16: tempLastScreen = actualScreen;
 29713  007128  C1B9  F0C8         	movff	_actualScreen,_tempLastScreen
 29714                           
 29715                           ;T4Config.h: 17: actualScreen = 13;
 29716  00712C  0E0D               	movlw	13
 29717  00712E  0101               	movlb	1	; () banked
 29718  007130  6FB9               	movwf	_actualScreen& (0+255),b
 29719                           
 29720                           ; BSR set to: 1
 29721                           ;T4Config.h: 18: LATCbits.LATC5 = 1;
 29722  007132  8A8B               	bsf	3979,5,c	;volatile
 29723                           
 29724                           ; BSR set to: 1
 29725  007134  0012               	return		;funcret
 29726  007136                     __end_of_cutError:
 29727                           	opt stack 0
 29728                           pclatu	equ	0xFFB
 29729                           pclath	equ	0xFFA
 29730                           tblptru	equ	0xFF8
 29731                           tblptrh	equ	0xFF7
 29732                           tblptrl	equ	0xFF6
 29733                           tablat	equ	0xFF5
 29734                           prodh	equ	0xFF4
 29735                           prodl	equ	0xFF3
 29736                           intcon	equ	0xFF2
 29737                           postinc0	equ	0xFEE
 29738                           fsr0h	equ	0xFEA
 29739                           fsr0l	equ	0xFE9
 29740                           wreg	equ	0xFE8
 29741                           postdec1	equ	0xFE5
 29742                           fsr1h	equ	0xFE2
 29743                           fsr1l	equ	0xFE1
 29744                           bsr	equ	0xFE0
 29745                           indf2	equ	0xFDF
 29746                           postinc2	equ	0xFDE
 29747                           postdec2	equ	0xFDD
 29748                           plusw2	equ	0xFDB
 29749                           fsr2h	equ	0xFDA
 29750                           fsr2l	equ	0xFD9
 29751                           status	equ	0xFD8
 29752                           pclatu	equ	0xFFB
 29753                           pclath	equ	0xFFA
 29754                           tblptru	equ	0xFF8
 29755                           tblptrh	equ	0xFF7
 29756                           tblptrl	equ	0xFF6
 29757                           tablat	equ	0xFF5
 29758                           prodh	equ	0xFF4
 29759                           prodl	equ	0xFF3
 29760                           intcon	equ	0xFF2
 29761                           postinc0	equ	0xFEE
 29762                           fsr0h	equ	0xFEA
 29763                           fsr0l	equ	0xFE9
 29764                           wreg	equ	0xFE8
 29765                           postdec1	equ	0xFE5
 29766                           fsr1h	equ	0xFE2
 29767                           fsr1l	equ	0xFE1
 29768                           bsr	equ	0xFE0
 29769                           indf2	equ	0xFDF
 29770                           postinc2	equ	0xFDE
 29771                           postdec2	equ	0xFDD
 29772                           plusw2	equ	0xFDB
 29773                           fsr2h	equ	0xFDA
 29774                           fsr2l	equ	0xFD9
 29775                           status	equ	0xFD8
 29776                           
 29777                           	psect	rparam
 29778  0000                     pclatu	equ	0xFFB
 29779                           pclath	equ	0xFFA
 29780                           tblptru	equ	0xFF8
 29781                           tblptrh	equ	0xFF7
 29782                           tblptrl	equ	0xFF6
 29783                           tablat	equ	0xFF5
 29784                           prodh	equ	0xFF4
 29785                           prodl	equ	0xFF3
 29786                           intcon	equ	0xFF2
 29787                           postinc0	equ	0xFEE
 29788                           fsr0h	equ	0xFEA
 29789                           fsr0l	equ	0xFE9
 29790                           wreg	equ	0xFE8
 29791                           postdec1	equ	0xFE5
 29792                           fsr1h	equ	0xFE2
 29793                           fsr1l	equ	0xFE1
 29794                           bsr	equ	0xFE0
 29795                           indf2	equ	0xFDF
 29796                           postinc2	equ	0xFDE
 29797                           postdec2	equ	0xFDD
 29798                           plusw2	equ	0xFDB
 29799                           fsr2h	equ	0xFDA
 29800                           fsr2l	equ	0xFD9
 29801                           status	equ	0xFD8
 29802                           
 29803                           	psect	temp
 29804  00005C                     btemp:
 29805                           	opt stack 0
 29806  00005C                     	ds	1
 29807  0000                     int$flags	set	btemp
 29808                           pclatu	equ	0xFFB
 29809                           pclath	equ	0xFFA
 29810                           tblptru	equ	0xFF8
 29811                           tblptrh	equ	0xFF7
 29812                           tblptrl	equ	0xFF6
 29813                           tablat	equ	0xFF5
 29814                           prodh	equ	0xFF4
 29815                           prodl	equ	0xFF3
 29816                           intcon	equ	0xFF2
 29817                           postinc0	equ	0xFEE
 29818                           fsr0h	equ	0xFEA
 29819                           fsr0l	equ	0xFE9
 29820                           wreg	equ	0xFE8
 29821                           postdec1	equ	0xFE5
 29822                           fsr1h	equ	0xFE2
 29823                           fsr1l	equ	0xFE1
 29824                           bsr	equ	0xFE0
 29825                           indf2	equ	0xFDF
 29826                           postinc2	equ	0xFDE
 29827                           postdec2	equ	0xFDD
 29828                           plusw2	equ	0xFDB
 29829                           fsr2h	equ	0xFDA
 29830                           fsr2l	equ	0xFD9
 29831                           status	equ	0xFD8


Data Sizes:
    Strings     692
    Constant    118
    Data        77
    BSS         85
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      91
    BANK0           160     69     121
    BANK1           256    119     192
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_43(CODE[17]), STR_42(CODE[18]), STR_41(CODE[17]), STR_40(CODE[18]), 
		 -> STR_39(CODE[17]), STR_38(CODE[18]), STR_37(CODE[17]), STR_36(CODE[18]), 
		 -> STR_35(CODE[17]), STR_34(CODE[18]), STR_33(CODE[7]), STR_32(CODE[18]), 
		 -> STR_31(CODE[19]), STR_30(CODE[18]), STR_29(CODE[18]), STR_28(CODE[18]), 
		 -> STR_27(CODE[18]), STR_26(CODE[18]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[18]), STR_22(CODE[17]), STR_21(CODE[25]), STR_20(CODE[18]), 
		 -> STR_19(CODE[16]), STR_18(CODE[18]), STR_17(CODE[7]), STR_16(CODE[18]), 
		 -> STR_15(CODE[19]), STR_14(CODE[18]), STR_13(CODE[18]), STR_12(CODE[18]), 
		 -> STR_11(CODE[18]), STR_10(CODE[18]), STR_9(CODE[20]), STR_8(CODE[18]), 
		 -> STR_7(CODE[18]), STR_6(CODE[18]), STR_5(CODE[18]), STR_4(CODE[18]), 
		 -> STR_3(CODE[18]), STR_2(CODE[18]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK1[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _hp_isr in COMRAM

    _hp_isr->_T4int
    _T4int->i2___ftge
    i2___ftge->i2___ftadd
    i2___ftadd->i2___altoft
    i2___altoft->i2___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_UARTint
    _UARTint->i1_longPressENTER
    i1_sysParamInit->i1_calcSysVars
    i1_pressUP->i1_chanValDigUP
    i1_pressRETRO->i1_initProtocoll
    i1_pressENTER->i1_desintegrator
    i1_pressDOWN->i1_chanValDigDOWN
    i1_longPressRETRO->i1___ftmul
    i1_longPressENTER->i1_integrator
    i1_integrator->i1___ftdiv
    i1___altoft->i1___ftpack
    i1_desintegrator->i1___ftmul
    i1___ftadd->i1___ftpack
    i1_calcVars2ti->i1___ftdiv
    i1___ftdiv->i1___altoft
    i1_calcSysVars->i1___ftmul
    i1___ftmul->i1___ftpack
    _T2int->i1_initProtocoll
    i1_initProtocoll->i1_setPWM2duty
    _saveProcessState->i1_writeEEPROM

Critical Paths under _hp_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _sysParamInit->_calcSysVars
    _calcSysVars->___ftmul
    _lcd_init->_lcd_send_byte
    _drawScreen->_drawSNquest
    _drawSNquest->_printf
    _drawReady2Cut->_printf
    _drawPassWord->_printf
    _drawMenu->_printf
    _drawCutError->_printf
    _drawChanVal->_printf
    _drawCalibProc->_printf
    _drawBadPass->_printf
    _drawPass1Lin->_printf
    _drawAutoCalibRM->_printf
    _drawValEditor->_printf
    _drawAdvON->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_4bits
    _lcd_read_byte->_lcd_read_4bits
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    _buttonChecking->_longPressENTER
    _pressUP->_chanValDigUP
    _pressRETRO->_initProtocoll
    _pressENTER->_desintegrator
    _pressDOWN->_chanValDigDOWN
    _longPressRETRO->___ftmul
    _initProtocoll->_setPWM2duty
    _longPressENTER->_desintegrator
    _integrator->___ftdiv
    ___altoft->___ftpack
    _desintegrator->___fttol
    ___fttol->_scale
    _calcVars2ti->___ftmul
    ___ftmul->___wmul
    ___ftdiv->___altoft
    ___ftadd->_fround
    _PWM2Config->_setPWM2duty

Critical Paths under _isr in BANK1

    None.

Critical Paths under _hp_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _hp_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _hp_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _hp_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _hp_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1108946
                       _EEPROMConfig
                         _PWM2Config
                         _UARTConfig
                     _buttonChecking
                        _clockConfig
                         _drawScreen
                    _interruptConfig
                           _ioConfig
                          _ioInitStt
                           _lcd_init
                        _setPWM2duty
                          _setPWM2on
                       _sysParamInit
                           _t4config
 ---------------------------------------------------------------------------------
 (1) _t4config                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sysParamInit                                         0     0      0    6702
                        _calcSysVars
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _readEEPROM                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _calcSysVars                                          3     3      0    6671
                                             35 BANK1      3     3      0
                            ___ftmul
 ---------------------------------------------------------------------------------
 (1) _setPWM2on                                            1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             6     6      0    1879
                                              8 BANK1      6     6      0
                     _lcd_send_4bits
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _ioInitStt                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ioConfig                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptConfig                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _drawScreen                                           0     0      0 1005633
                          _drawAdvON
                    _drawAutoCalibRM
                        _drawBadPass
                      _drawCalibProc
                        _drawChanVal
                       _drawCutError
                           _drawMenu
                       _drawPassWord
                      _drawReady2Cut
                        _drawSNquest
 ---------------------------------------------------------------------------------
 (2) _drawSNquest                                          3     3      0   72167
                                            116 BANK1      3     3      0
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawReady2Cut                                        0     0      0   71913
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawPassWord                                         2     2      0  140803
                                            116 BANK1      2     2      0
                       _drawPass1Lin
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawMenu                                             1     1      0   76624
                                            116 BANK1      1     1      0
                         _lcd_gotoxy
                           _lcd_putc
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawCutError                                         0     0      0   71913
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawChanVal                                          0     0      0  143826
                      _drawValEditor
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawCalibProc                                        0     0      0   71913
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawBadPass                                          0     0      0  140704
                       _drawPass1Lin
                             _printf
 ---------------------------------------------------------------------------------
 (3) _drawPass1Lin                                         0     0      0   71913
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawAutoCalibRM                                      0     0      0  143826
                      _drawValEditor
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (3) _drawValEditor                                        0     0      0   71913
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawAdvON                                            1     1      0   71944
                                            116 BANK1      1     1      0
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              54    36     18   68791
                                             63 BANK1     53    35     18
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   14173
                                             35 BANK1      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0    4680
                                             13 BANK1      1     1      0
                           _lcd_putc
                          _putchUART
 ---------------------------------------------------------------------------------
 (5) _putchUART                                            1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (5) _lcd_putc                                             2     2      0    4587
                                             11 BANK1      2     2      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_gotoxy                                           3     2      1    3122
                                              8 BANK1      3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        3     2      1    1403
                                              5 BANK1      3     2      1
                      _lcd_read_byte
                     _lcd_send_4bits
 ---------------------------------------------------------------------------------
 (3) _lcd_send_4bits                                       5     5      0     272
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (3) _lcd_read_byte                                        2     2      0     114
                                              2 BANK1      2     2      0
                     _lcd_read_4bits
 ---------------------------------------------------------------------------------
 (4) _lcd_read_4bits                                       2     2      0      46
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   13894
                                             35 BANK1     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3004
                                             14 BANK1      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1819
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1985
                                              6 BANK1      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     608
                                              0 BANK1     15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     827
                                              0 BANK1     12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2703
                                              8 BANK1      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     848
                                             13 BANK1      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     703
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5011
                                             57 BANK1      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     142
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     996
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (1) _clockConfig                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buttonChecking                                       0     0      0   93261
                           _delay_ms
                      _longPressDOWN
                     _longPressENTER
                     _longPressRETRO
                        _longPressUP
                          _pressDOWN
                         _pressENTER
                         _pressRETRO
                            _pressUP
                        _releaseDOWN
                       _releaseENTER
                       _releaseRETRO
                          _releaseUP
 ---------------------------------------------------------------------------------
 (2) _releaseUP                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseRETRO                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseENTER                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseDOWN                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pressUP                                              1     1      0       0
                                              5 BANK1      1     1      0
                       _chanValDigUP
 ---------------------------------------------------------------------------------
 (3) _chanValDigUP                                         5     5      0       0
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (2) _pressRETRO                                           0     0      0     751
                      _initProtocoll
 ---------------------------------------------------------------------------------
 (2) _pressENTER                                           0     0      0   28834
                            ___ftmul
                          _checkPass
                     _confirmEdition
                      _desintegrator
                      _initProtocoll
                        _setPWM2duty
 ---------------------------------------------------------------------------------
 (3) _checkPass                                            7     7      0     170
                                              0 BANK1      7     7      0
 ---------------------------------------------------------------------------------
 (2) _pressDOWN                                            1     1      0       0
                                              5 BANK1      1     1      0
                     _chanValDigDOWN
 ---------------------------------------------------------------------------------
 (3) _chanValDigDOWN                                       5     5      0       0
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (2) _longPressUP                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _longPressRETRO                                       0     0      0    7419
                            ___ftmul
                      _initProtocoll
 ---------------------------------------------------------------------------------
 (3) _initProtocoll                                        1     1      0     751
                                              6 BANK1      1     1      0
                        _setPWM2duty
 ---------------------------------------------------------------------------------
 (2) _longPressENTER                                       6     6      0   55265
                                             76 BANK1      6     6      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                        _calcVars2ti
                     _confirmEdition
                      _desintegrator
                         _integrator
 ---------------------------------------------------------------------------------
 (3) _integrator                                          12    12      0    8109
                                             33 BANK1     12    12      0
                           ___altoft
                            ___ftdiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3057
                                              8 BANK1     10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _desintegrator                                       19    19      0    8670
                                             57 BANK1     19    19      0
                            ___aldiv
                            ___ftmul
                            ___fttol
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     558
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     508
                                             42 BANK1     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8     599
                                              0 BANK1     14     6      8
 ---------------------------------------------------------------------------------
 (3) _confirmEdition                                       1     1      0   11855
                                             35 BANK1      1     1      0
                      _saveSysParams
 ---------------------------------------------------------------------------------
 (4) _saveSysParams                                        0     0      0   11762
                        _calcVars2ti
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (5) _writeEEPROM                                          2     1      1     804
                                              0 BANK1      2     1      1
 ---------------------------------------------------------------------------------
 (5) _calcVars2ti                                          0     0      0   10958
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6668
                                             20 BANK1     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    4290
                                             18 BANK1     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4647
                                             45 BANK1     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (2) _longPressDOWN                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     992
                                              0 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 (1) _UARTConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2Config                                           0     0      0     720
                        _setPWM2duty
                           _t2config
 ---------------------------------------------------------------------------------
 (2) _t2config                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setPWM2duty                                          6     4      2     720
                                              0 BANK1      6     4      2
 ---------------------------------------------------------------------------------
 (1) _EEPROMConfig                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _isr                                                17    17      0   33049
                                             52 BANK0     17    17      0
                              _T2int
                            _UARTint
 ---------------------------------------------------------------------------------
 (12) _UARTint                                             1     1      0   32261
                                             51 BANK0      1     1      0
                      _loadSysParams
                    i1_longPressDOWN
                   i1_longPressENTER
                   i1_longPressRETRO
                      i1_longPressUP
                        i1_pressDOWN
                       i1_pressENTER
                       i1_pressRETRO
                          i1_pressUP
                        i1_putchUART
                    i1_saveSysParams
                     i1_sysParamInit
 ---------------------------------------------------------------------------------
 (13) i1_sysParamInit                                      0     0      0    1360
                      i1_calcSysVars
                       i1_readEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_readEEPROM                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_putchUART                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_pressUP                                           1     1      0       0
                                              5 BANK0      1     1      0
                     i1_chanValDigUP
 ---------------------------------------------------------------------------------
 (14) i1_chanValDigUP                                      5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (13) i1_pressRETRO                                        0     0      0     240
                    i1_initProtocoll
 ---------------------------------------------------------------------------------
 (13) i1_pressENTER                                        0     0      0    7274
                          i1___ftmul
                        i1_checkPass
                   i1_confirmEdition
                    i1_desintegrator
                    i1_initProtocoll
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (14) i1_checkPass                                         7     7      0     115
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (13) i1_pressDOWN                                         1     1      0       0
                                              5 BANK0      1     1      0
                   i1_chanValDigDOWN
 ---------------------------------------------------------------------------------
 (14) i1_chanValDigDOWN                                    5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (13) i1_longPressUP                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_longPressRETRO                                    0     0      0    1577
                          i1___ftmul
                    i1_initProtocoll
 ---------------------------------------------------------------------------------
 (13) i1_longPressENTER                                    6     6      0   14329
                                             45 BANK0      6     6      0
                          i1___ftadd
                          i1___ftdiv
                          i1___ftmul
                      i1_calcVars2ti
                   i1_confirmEdition
                    i1_desintegrator
                       i1_integrator
 ---------------------------------------------------------------------------------
 (14) i1_integrator                                       12    12      0    2280
                                             33 BANK0     12    12      0
                         i1___altoft
                          i1___ftdiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (15) i1___altoft                                         10     6      4     707
                                              8 BANK0     10     6      4
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (14) i1_desintegrator                                    19    19      0    2392
                                             23 BANK0     19    19      0
                          i1___aldiv
                          i1___ftmul
                          i1___fttol
                           i1___lmul
 ---------------------------------------------------------------------------------
 (15) i1___lmul                                           12     4      8     196
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (15) i1___fttol                                          15    11      4     278
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (15) i1___aldiv                                          14     6      8     352
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (14) i1_confirmEdition                                    1     1      0    2972
                                             33 BANK0      1     1      0
                    i1_saveSysParams
 ---------------------------------------------------------------------------------
 (14) i1___ftadd                                          12     6      6    1487
                                              8 BANK0     12     6      6
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (13) i1_longPressDOWN                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _loadSysParams                                       0     0      0    4244
                      i1_calcSysVars
                    i1_saveSysParams
 ---------------------------------------------------------------------------------
 (13) i1_saveSysParams                                     0     0      0    2906
                      i1_calcVars2ti
                      i1_writeEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_calcVars2ti                                       0     0      0    2576
                          i1___ftdiv
                          i1___ftmul
 ---------------------------------------------------------------------------------
 (15) i1___ftdiv                                          15     9      6    1239
                                             18 BANK0     15     9      6
                         i1___altoft (ARG)
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (14) i1_calcSysVars                                       3     3      0    1338
                                             23 BANK0      3     3      0
                          i1___ftmul
 ---------------------------------------------------------------------------------
 (15) i1___ftmul                                          15     9      6    1337
                                              8 BANK0     15     9      6
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (16) i1___ftpack                                          8     3      5     543
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (12) _T2int                                               1     1      0     788
                                              7 BANK0      1     1      0
                   _saveProcessState
                    i1_initProtocoll
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (14) i1_initProtocoll                                     1     1      0     240
                                              6 BANK0      1     1      0
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (15) i1_setPWM2duty                                       6     4      2     218
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (13) _saveProcessState                                    0     0      0     330
                      i1_writeEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_writeEEPROM                                       2     1      1     330
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (19) _hp_isr                                             14    14      0    2522
                                             40 COMRAM    14    14      0
                              _T4int
 ---------------------------------------------------------------------------------
 (20) _T4int                                               1     1      0    2522
                                             39 COMRAM     1     1      0
                           _cutError
                         i2___altoft
                          i2___ftadd
                           i2___ftge
                      i2_setPWM2duty
 ---------------------------------------------------------------------------------
 (21) i2_setPWM2duty                                       6     4      2     166
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (21) i2___ftge                                            9     3      6     344
                                             30 COMRAM     9     3      6
                         i2___altoft (ARG)
                          i2___ftadd (ARG)
 ---------------------------------------------------------------------------------
 (21) i2___ftadd                                          12     6      6    1331
                                             18 COMRAM    12     6      6
                         i2___altoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (21) i2___altoft                                         10     6      4     681
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (22) i2___ftpack                                          8     3      5     387
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (21) _cutError                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 22
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMConfig
   _PWM2Config
     _setPWM2duty
     _t2config
   _UARTConfig
   _buttonChecking
     _delay_ms
     _longPressDOWN
     _longPressENTER
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _calcVars2ti
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _confirmEdition
         _saveSysParams
           _calcVars2ti
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _writeEEPROM
       _desintegrator
         ___aldiv
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
       _integrator
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___lmul
     _longPressRETRO
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _initProtocoll
         _setPWM2duty
     _longPressUP
     _pressDOWN
       _chanValDigDOWN
     _pressENTER
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _checkPass
       _confirmEdition
         _saveSysParams
           _calcVars2ti
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _writeEEPROM
       _desintegrator
         ___aldiv
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
       _initProtocoll
         _setPWM2duty
       _setPWM2duty
     _pressRETRO
       _initProtocoll
         _setPWM2duty
     _pressUP
       _chanValDigUP
     _releaseDOWN
     _releaseENTER
     _releaseRETRO
     _releaseUP
   _clockConfig
   _drawScreen
     _drawAdvON
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawAutoCalibRM
       _drawValEditor
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _putchUART
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawBadPass
       _drawPass1Lin
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _putchUART
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawCalibProc
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawChanVal
       _drawValEditor
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _putchUART
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawCutError
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawMenu
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawPassWord
       _drawPass1Lin
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _putchUART
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawReady2Cut
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawSNquest
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _interruptConfig
   _ioConfig
   _ioInitStt
   _lcd_init
     _lcd_send_4bits
     _lcd_send_byte
       _lcd_read_byte
         _lcd_read_4bits
       _lcd_send_4bits
   _setPWM2duty
   _setPWM2on
   _sysParamInit
     _calcSysVars
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readEEPROM
   _t4config

 _isr (ROOT)
   _T2int
     _saveProcessState
       i1_writeEEPROM
     i1_initProtocoll
       i1_setPWM2duty
     i1_setPWM2duty
   _UARTint
     _loadSysParams
       i1_calcSysVars
         i1___ftmul
           i1___ftpack
       i1_saveSysParams
         i1_calcVars2ti
           i1___ftdiv
             i1___altoft (ARG)
               i1___ftpack
             i1___ftpack (ARG)
           i1___ftmul
             i1___ftpack
         i1_writeEEPROM
     i1_longPressDOWN
     i1_longPressENTER
       i1___ftadd
         i1___ftpack
       i1___ftdiv
         i1___altoft (ARG)
           i1___ftpack
         i1___ftpack (ARG)
       i1___ftmul
         i1___ftpack
       i1_calcVars2ti
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___ftmul
           i1___ftpack
       i1_confirmEdition
         i1_saveSysParams
           i1_calcVars2ti
             i1___ftdiv
               i1___altoft (ARG)
                 i1___ftpack
               i1___ftpack (ARG)
             i1___ftmul
               i1___ftpack
           i1_writeEEPROM
       i1_desintegrator
         i1___aldiv
         i1___ftmul
           i1___ftpack
         i1___fttol
         i1___lmul
       i1_integrator
         i1___altoft
           i1___ftpack
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___lmul
     i1_longPressRETRO
       i1___ftmul
         i1___ftpack
       i1_initProtocoll
         i1_setPWM2duty
     i1_longPressUP
     i1_pressDOWN
       i1_chanValDigDOWN
     i1_pressENTER
       i1___ftmul
         i1___ftpack
       i1_checkPass
       i1_confirmEdition
         i1_saveSysParams
           i1_calcVars2ti
             i1___ftdiv
               i1___altoft (ARG)
                 i1___ftpack
               i1___ftpack (ARG)
             i1___ftmul
               i1___ftpack
           i1_writeEEPROM
       i1_desintegrator
         i1___aldiv
         i1___ftmul
           i1___ftpack
         i1___fttol
         i1___lmul
       i1_initProtocoll
         i1_setPWM2duty
       i1_setPWM2duty
     i1_pressRETRO
       i1_initProtocoll
         i1_setPWM2duty
     i1_pressUP
       i1_chanValDigUP
     i1_putchUART
     i1_saveSysParams
       i1_calcVars2ti
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___ftmul
           i1___ftpack
       i1_writeEEPROM
     i1_sysParamInit
       i1_calcSysVars
         i1___ftmul
           i1___ftpack
       i1_readEEPROM

 _hp_isr (ROOT)
   _T4int
     _cutError
     i2___altoft
       i2___ftpack
     i2___ftadd
       i2___altoft (ARG)
         i2___ftpack
       i2___ftpack (ARG)
     i2___ftge
       i2___altoft (ARG)
         i2___ftpack
       i2___ftadd (ARG)
         i2___altoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
     i2_setPWM2duty

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     77      C0       6       75.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     45      79       4       75.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      5B       1       96.8%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     194       9        0.0%
DATA                 0      0     194      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sat Nov 19 23:30:42 2016

      __end_ofi1_pressDOWN 4EFA               ___altoft@exp 0110                 i1___altoft 5DD2  
     __end_ofi1_pressENTER 193E                 i1___ftpack 4BDE            ?_lcd_send_4bits 0001  
     __end_ofi1_pressRETRO 5850            ??_desintegrator 0139              ___altoft@sign 0111  
         i2setPWM2duty@act 0005                         l91 7212             ?_lcd_send_byte 0105  
             ___awdiv@sign 010B                         _fd 01BB                         _ie 00C1  
            _holdRETROcont 00C0           ?i1_saveSysParams 0001                         _pi 0053  
               i2___altoft 671A                         bsr 000FE0            ?_confirmEdition 0001  
      ___wmul@multiplicand 0110     __size_ofi1_calcVars2ti 0058        __end_ofi1_putchUART 7372  
               i2___ftpack 5B42               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000               ___ftadd@exp1 0138  
             ___ftadd@exp2 0137               i1___altoft@c 0068                drawMenu@adv 0174  
             ___ftadd@sign 0136                        l100 6EDA                        l222 733E  
                      l401 5132                        l281 724A                        l418 4AB0  
                      l373 30A4                        l382 317E                        l711 11E6  
                      l535 72A2                        l287 72CE                        l385 31D8  
                      l730 12FC                        l715 120E                        l379 3120  
                      l716 1226                        l493 5F6A                        l741 13D0  
                      l582 5A56                        l559 3570                        l576 59F2  
                      l737 1358                        l738 13AE                        l666 570E  
                      l579 5A22                        l907 24A2                        l756 154E  
                      l694 4F6E                        l871 229E                        l688 4F36  
                      l697 4FF8               i1___ftadd@f1 0068               i1___ftadd@f2 006B  
                      l883 234A                        l895 23F6                        l898 2416  
             __CFG_CPB$OFF 000000      i1setPWM2duty@actuator 0060                        _PR2 000FBB  
                      _PR4 000F52               __CFG_CPD$OFF 000000     __size_ofi1_calcSysVars 006A  
 __size_ofi1_initProtocoll 004C                        _isr 0018               i1___ftdiv@f1 0072  
             i1___ftdiv@f2 0075               i1___ftdiv@f3 007C    __end_of_interruptConfig 739A  
             ___awmod@sign 0105                        prod 000FF3                        wreg 000FE8  
__size_ofi1_longPressENTER 0332                 _TXSTA1bits 000FAC               __CFG_IESO$ON 000000  
             drawSNquest@i 0174  __size_ofi1_longPressRETRO 0106               i1___ftmul@f1 0068  
             i1___ftmul@f2 006B               i1___fttol@f1 0060               __CFG_LVP$OFF 000000  
              i1_checkPass 6394             i1___aldiv@sign 0069               ___ftdiv@cntr 011B  
           ??_drawCutError 0174               ___ftdiv@sign 0120                       l1002 09F0  
                     l1036 0870                       l1311 4BAA                       l1340 28A2  
                     l1334 2840                       l1408 709E                       l1338 287A  
                     l1349 2978                       l1358 29A2                       l1279 3A2C  
                     l1383 38A4                       l1376 37E0                       l1369 3E10  
                     l1377 3824                       l1458 59B8                       l1468 5EF8  
          ??_drawCalibProc 0174                       l6500 405E                       l6510 408E  
                     l6512 409E                       l6504 4072                       l6514 40A8  
                     l6518 40C4                       l6482 3FCC                       ?_isr 0001  
                     l9700 6F02                       l9730 4B5E                       l9722 4B00  
                     l9740 4BB4                       l9732 4B8E                       l9724 4B0E  
                     l9820 2930                       l9900 3A78                       l9708 705C  
                     l9734 4B9C                       l9726 4B3E                       l9718 4AEC  
                     l9814 2908                       l9670 628E                       l9816 2916  
                     l9808 28DA                       l9920 3B00                       l9760 65F0  
                     l9752 65B4                       l9746 4BD0                       l9834 29CC  
                     l9826 295E                       l9818 2924                       l9930 3B3E  
                     l9906 3AB2                       l9682 62CA                       l9762 65FE  
                     l9754 65C2                       l9844 2A1A                       l9828 296C  
                     l9860 3D6E                       l9924 3B1E                       l9676 62AC  
                     l9854 3D34                       l9934 3B5C                       l9950 586C  
                     l9758 65E2                       l9766 660A                       STR_1 7EF4  
                     l9792 2888                       l9880 3DCE                       l9688 62E8  
                     STR_2 7F06                       STR_3 7F4E                       l9786 284E  
                     l9962 58A0                       STR_4 7F18                       STR_5 7F2A  
                     l9964 58AC                       l9956 5882                       STR_6 7F3C  
                     STR_7 7E0A                       l9798 2898                       l9982 5904  
                     l9974 58E2                       l9966 58B2                       STR_8 7ED0  
                     STR_9 7D64                       l9978 58F0                       l9994 5CAE  
                     l9998 5CBE               printf@tmpval 0162                       u8221 3FA8  
                     u8240 3FF2                       u8245 3FE8             ??_drawPass1Lin 0174  
            __CFG_FCMEN$ON 000000                lcd_putc@cha 010C            __end_of_UARTint 47A6  
                     _main 6DDE       __size_of_calcVars2ti 0058               ___ftpack@arg 0100  
             i2___altoft@c 0009               ___ftpack@exp 0103           lcd_read_byte@low 0102  
                     fsr0h 000FEA                       fsr1h 000FE2                       fsr0l 000FE9  
                     fsr2h 000FDA                       fsr1l 000FE1                       indf2 000FDF  
                     fsr2l 000FD9          initProtocoll@init 0106                       btemp 005C  
            __CFG_BORV$285 000000             ??_drawPassWord 0174               i2___ftadd@f1 0013  
             i2___ftadd@f2 0016                       pclat 000FFA               i2___ftge@ff1 001F  
             i2___ftge@ff2 0022              i1___ftdiv@exp 007F                       prodh 000FF4  
                     prodl 000FF3                       start 00BE            ?_longPressENTER 0001  
     __size_of_calcSysVars 006A            ?_longPressRETRO 0001              drawSNquest@tq 0176  
    __size_of_sysParamInit 0076       __end_of_EEPROMConfig 73A0               ___ftmul@cntr 0121  
             ___param_bank 000010                _writeEEPROM 7230               ___ftmul@sign 0122  
            i1___ftmul@exp 0071               ___fttol@exp1 0138               ___fttol@lval 0134  
                    ??_isr 0094             i1___altoft@exp 0070    i1___ftmul@f3_as_product 0072  
             _BAUDCON1bits 000FB8                      l10010 5D08                      l10002 5CD2  
                    l10004 5CDE                      l10006 5CE4                      l10014 5D16  
                    l10110 71AC                      l10120 3752                      l10018 5D2A  
                    l11010 6CE8                      l11100 47B8                      l10300 653A  
                    l10220 39F6                      l10204 39AA                      l10060 2790  
                    l10052 26AC                      l10302 654A                      l10126 378C  
                    l11014 49D4                      l11112 4820                      l10216 39E2  
                    l10160 386E                      l10080 0F2C                      l10400 02B6  
                    l11040 4A7A                      l11032 4A44                      l11024 4A06  
                    l11202 4DAE                      l11122 4852                      l11106 47D0  
                    l10242 5644                      l10234 6D1C                      l10226 3A12  
                    l10074 0E66                      l10410 0300                      l10402 02D0  
                    l11018 49EA                      l11212 4DCA                      l11132 4880  
                    l11140 48A6                      l10252 56C8                      l10228 3A22  
                    l10156 385A                      l10092 10B6                      l10084 0F52  
                    l11044 4A96                      l11036 4A5E                      l11150 6986  
                    l11206 4DBA                      l11214 4DE2                      l11134 4886  
                    l10246 5684                      l10270 5952                      l10182 3902  
                    l10166 388A                      l10422 035E                      l10406 02E8  
                    l10414 0306                      l11160 69B6                      l11208 4DC0  
                    l11128 4874                      l10176 38DC                      l10168 389A  
                    l10512 074A                      l10504 06D8                      l10432 03A4  
                    l10416 0344                      l10344 00D2                      l11162 69BE  
                    l11410 13B6                      l11234 56DC                      l11138 488E  
                    l10266 593C                      l10290 5EA2                      l10098 117C  
                    l10602 0AFE                      l10530 0830                      l10522 0794  
                    l10514 0750                      l10354 011A                      l10362 0190  
                    l11074 6458                      l11156 69A4                      l11180 4D0E  
                    l11420 13E8                      l11324 11D2                      l11260 575A  
                    l11244 5714                      l10268 594C                      l10196 3956  
                    l10620 0BA4                      l10612 0B62                      l10540 0874  
                    l10516 0758                      l10508 0728                      l10460 04F4  
                    l10380 022A                      l10372 01FE                      l10348 00E8  
                    l10702 454A                      l11510 197C                      l11174 4CFC  
                    l11342 123A                      l11334 1200                      l11350 1254  
                    l11326 11DA                      l11254 5740                      l10278 59A6  
                    l10294 5EE6                      l10286 5E8C                      l10606 0B2E  
                    l10550 08EA                      l10534 083E                      l10518 076C  
                    l10462 050A                      l10390 0278                      l10374 0214  
                    l11078 6482                      l12054 6E1E                      l10720 5D70  
                    l11520 19A8                      l11504 195E                      l11280 4F24  
                    l11424 13FA                      l11416 13D6                      l11352 1272  
                    l11256 5748                      l10288 5E9C                      l10640 0CBE  
                    l10632 0C0C                      l10624 0BDC                      l10536 0852  
                    l10528 0822                      l10472 059A                      l10464 053A  
                    l10456 04C6                      l10448 0456                      l10392 0284  
                    l10368 01B8                      l10650 5F34                      l10706 4566  
                    l11514 198E                      l11290 4F5A                      l11186 4D5A  
                    l11370 12B4                      l10626 0BE6                      l10618 0B9A  
                    l10562 09E2                      l10546 0898                      l10490 068C  
                    l10466 0550                      l10394 028A                      l10386 0252  
                    l10378 0224                      l10642 0CD4                      l10730 201A  
                    l10820 3468                      l11196 4D8C                      l11372 12C8  
                    l11356 1284                      l11268 577C                      l10636 0C34  
                    l10628 0BF2                      l10556 09C6                      l10492 0692  
                    l10476 05C8                      l10396 02A2                      l11612 5C1E  
                    l10654 5F56                      l10662 6840                      l10718 5D60  
                    l11286 4F48                      l11462 14B6                      l11382 1302  
                    l10574 0A3C                      l10558 09D4                      l10486 0626  
                    l10742 2182                      l10734 2092                      l10750 226C  
                    l11630 5C64                      l10680 44A0                      l10832 4248  
                    l11528 19D2                      l10760 6D54                      l11296 4F80  
                    l11472 14DA                      l11464 14BE                      l10584 0A8A  
                    l10920 30EC                      l10912 309E                      l10904 3070  
                    l11624 5C46                      l11616 5C28                      l10690 44E4  
                    l10674 4482                      l10658 681A                      l10586 0A90  
                    l10578 0A64                      l10746 21F8                      l10738 210A  
                    l11634 5C6E                      l10844 42F8                      l10836 425E  
                    l11556 1AC0                      l10780 637E                      l10772 6316  
                    l11492 155A                      l11388 1320                      l10940 3178  
                    l10932 314A                      l11660 51FC                      l10686 44CE  
                    l10782 6386                      l10598 0AD6                      l10918 30DA  
                    l11670 5220                      l11662 5202                      l10848 59D0  
                    l10880 5A68                      l10688 44DE                      l10776 632C  
                    l10952 31D2                      l10944 31A4                      l10928 311A  
                    l11680 5246                      l11672 5226                      l11664 5208  
                    l10858 5A04                      l10698 4538                      l11578 1B9A  
                    l10786 638E                      l11922 2448                      l11914 2426  
                    l11834 22BE                      l10970 64E2                      l10962 64B0  
                    l11682 524C                      l11674 522E                      l11666 5210  
                    l11658 51F4                      l10884 6EC2                      l10868 5A34  
                    l11932 246A                      l11844 22F0                      l11836 22CE  
                    l11684 5252                      l11676 5236                      l11668 5218  
                    l11692 5266                      l11934 2470                      l11926 2454  
                    l11854 2312                      l10958 3202                      l11686 5258  
                    l11678 523E                      l11952 24C2                      l11936 247E  
                    l11856 2318                      l11848 22FC                      l10984 513C  
                    l11688 525E                      l11962 24F4                      l11954 24D2  
                    l11874 236A                      l11858 2326                      l10978 6518  
                    l10994 516E                      l11972 2516                      l11884 239C  
                    l11876 237A                      l10988 5152                      l11974 251C  
                    l11966 2500                      l11894 23BE                      l11896 23C4  
                    l11888 23A8                      l11898 23D2            __end_of___aldiv 4578  
  __end_ofi1_desintegrator 3718                      ?_main 0001            __end_of___awdiv 590E  
                    _EEADR 000FA9            __end_of___ftadd 2A40                      STR_10 7E52  
                    STR_11 7EE2                      STR_12 7E76                      STR_20 7DC2  
                    STR_13 7EBE                      STR_21 7D4B                      STR_22 7F82  
                    STR_30 7E1C                      STR_14 7DF8                      STR_23 7E64  
                    STR_31 7D8B                      STR_15 7D78                      STR_16 7E52  
                    STR_24 7F93                      STR_40 7EAC                      STR_32 7D9E  
                    STR_33 7FF8                      STR_17 7FF8                      STR_25 7FA4  
                    STR_41 7F60                      STR_18 7E76                      STR_42 7EAC  
                    STR_26 7E88                      STR_34 7DB0                      STR_19 7FE8  
                    STR_35 7FB5                      STR_43 7F71                      STR_27 7E9A  
                    STR_28 7E40                      STR_36 7DE6            __end_of___awmod 5D34  
                    STR_37 7FD7                      STR_29 7E2E                      STR_38 7DD4  
                    STR_39 7FC6            __end_of___ftdiv 3E46            __end_of___ftneg 70AC  
          __end_of___lldiv 59CA            __end_of___ftmul 3B9C            ___awdiv@divisor 0108  
          __end_of___llmod 5F0A            __end_of___ftsub 6D46              lcd_init@F7567 00C9  
          __end_of___fttol 40D6                      u14105 6298                      u14050 6636  
                    u14106 629A                      u14060 6648                      u14301 280C  
                    u14125 62B6                      u14070 6662                      u14126 62B8  
                    u14080 6682                      u14056 6638                      u14145 62D4  
                    u14146 62D6                      u15115 6152                      u15116 6154  
                    u14068 664C                      u14501 3D10                      u14165 62F2  
                    u14078 6666                      u14166 62F4                      u14088 6686  
                    u14521 3D4A                      u14185 6F1A                      u14186 6F1C  
                    u14291 27EE                      u17020 12C0                      u15260 03EA  
                    u17030 12C2                      u14551 3A54                      u15265 03DE  
                    u17050 12DE                      u15450 0868                      u14571 3A8E  
                    u17060 12E0                      u14831 372E                      u18007 5C36  
                    u16600 4D9A                      u16360 485E                      u18017 5C54  
                    u17410 1C68                      u16370 4860                      u14851 3768  
                    u18027 65D6                      u17420 1C6A                      u17180 1410  
                    u18037 62FC                      u17350 19CA                      u17190 1412  
                    u18047 6ECA                      u17360 19CC                      u17540 22D6  
                    u16590 4D98                      u17650 2382                      u17546 22D8  
                    u15980 3466                      u17760 242E                      u17656 2384  
                    u17870 24DA                      u17766 2430                      u17876 24DC  
                    i1l222 7368                      u17997 5C0E                      i1l281 726A  
                    i1l506 2D6E                      i1l517 2E68                      i1l711 15B4  
                    i1l287 7310                      i1l730 16CA                      i1l715 15DC  
                    i1l716 15F4                      i1l493 5FFE                      i1l741 179E  
                    i1l582 5B12                      i1l559 3716                      i1l576 5AAE  
                    i1l737 1726                      i1l738 177C                      i1l666 57D0  
                    i1l579 5ADE                      i1l756 191C                      i1l694 5074  
                    i1l688 503C                      i1l928 0076                ?_UARTConfig 0001  
                    i1l697 50FE                      i2l493 6A98                      i2l923 66DE  
          ___awdiv@counter 010A              __CFG_WDTPS$32 000000                      _T2int 2CA8  
           i1___ftadd@exp1 0073             i1___ftadd@exp2 0072                      _T4int 2EA2  
  __size_ofi1_chanValDigUP 00D0             i1___ftadd@sign 0071                ?_PWM2Config 0001  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
      ___lmul@multiplicand 0104              __CFG_WRT3$OFF 000000               ___lltoft@exp 0110  
           __CFG_EBTR0$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
                    _fData 00AF             __CFG_EBTR3$OFF 000000            ??_drawReady2Cut 0174  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
           __CFG_EBTRB$OFF 000000                      _exp10 0177                      _flech 019C  
          __end_of_dpowers 7CFD                      _selSN 01BF      __size_ofi1_readEEPROM 0016  
        lcd_read_byte@high 0103                      _scale 0CF4            __end_of_isdigit 71B6  
       __CFG_MCLRE$EXTMCLR 000000              ___ftpack@sign 0104            ??_drawValEditor 0174  
                    _putch 72EC           __end_ofi1___lmul 696A                      tablat 000FF5  
         __end_ofi2___ftge 6278              drawPassWord@i 0174              i1_calcVars2ti 6C54  
           i1___ftdiv@cntr 007B            __end_of_pressUP 48B6               _sysParamInit 6792  
           i1___ftdiv@sign 0080                      plusw2 000FDB               ?_setPWM2duty 0100  
         i1desintegrator@i 0088                      status 000FD8            ??_lcd_read_byte 0102  
       __size_ofi1___aldiv 011A                i1_pressDOWN 4DF2             __CFG_HFOFST$ON 000000  
       __size_ofi1___ftadd 0268         __size_ofi1___ftdiv 014C               putchUART@val 0100  
       __size_ofi1___ftmul 015E         __size_ofi1___fttol 0144              i1_calcSysVars 6B2C  
       __size_ofi2___ftadd 01AC             i1___ftpack@arg 0060             i1___ftpack@exp 0063  
             ?_longPressUP 0001                i1_putchUART 7364            __initialization 6032  
    __end_ofi1_writeEEPROM 7270               __end_of_main 6E28                ?i1___altoft 0068  
          ??_lcd_send_byte 0106        i1___lmul@multiplier 0060                ?i1___ftpack 0060  
           i1___ftmul@cntr 0075             i1___ftmul@sign 0076      __end_of_saveSysParams 6156  
            lcd_gotoxy@pos 0109      __size_ofi1_integrator 0122                ?i2___altoft 0009  
             ?_releaseDOWN 0001             i1___fttol@exp1 006E              _maxTimePerCut 004B  
              ?i2___ftpack 0001         __size_ofi1_pressUP 0110             i1___fttol@lval 006A  
   __size_of_loadSysParams 0048                     ??_main 0177              ___fttol@sign1 0133  
             i1_readEEPROM 7302              __activetblptr 000002             __CFG_PLLCFG$ON 000000  
          i1___altoft@sign 0071                     ?_T2int 0001                     ?_T4int 0001  
     __size_of__tdiv_to_l_ 019E           i1_chanValDigDOWN 5538           ?_interruptConfig 0001  
       desintegrator@temp2 0146         desintegrator@temp3 0142         desintegrator@tempL 013E  
     __size_of_clockConfig 0026      __size_of_chanValDigUP 00D0           __end_of_t2config 72C0  
             i1checkPass@i 0065                  ??_UARTint 0093           __end_of_t4config 718C  
         __end_of___altoft 5DD2             setPWM2duty@act 0104           ___llmod@dividend 010D  
                   ?_scale 0123                     _EEDATA 000FA8                     _CCPR2L 000F67  
                   _EECON2 000FA7     __size_of_initProtocoll 004C           ___awdiv@dividend 0106  
                   ?_putch 0001           __end_of___ftpack 4BDE   __size_of_drawAutoCalibRM 0032  
        ??i1_initProtocoll 0066             ?i1_calcVars2ti 0001           __end_of___lltoft 65AE  
                   i1l1311 4CB6                     i1l1340 2B0A                     i1l1334 2AA8  
                   i1l1338 2AE2                     i1l1349 2BE0                     i1l1358 2C0A  
                   i1l1369 3F5C                     i2l1311 5BD0                     i1l6202 3C10  
                   i1l6220 3C7C                     i1l7100 4680                     i2l1334 3264  
                   i1l6230 3CBA                     i1l6150 3E80                     i1l6216 3C5E  
                   i1l7112 5DFE                     i2l1338 328E                     i1l6226 3C9C  
                   i1l7114 5E0E                     i1l7044 5FC8                     i1l6156 3EBA  
                   i1l7052 6906                     i2l1349 333E                     i2l1358 335A  
                   i1l7126 4110                     i1l7048 5FEA                     i1l6176 3F1A  
                   i1l7080 45E8                     i1l7144 41A2                     i1l7056 692C  
                   i1l7400 360E                     i1l7082 45F8                     i1l7074 45BA  
                   i1l7162 4208                     i1l7154 41D2                     i1l7340 6DA0  
                   i1l9100 2DFC                     i1l6196 3BD6                     i1l7092 4652  
                   i1l7084 45FE                     i1l7068 459C                     i1l7156 41E2  
                   i1l7148 41B6                     i1l7412 436A                     i1l7158 41EC  
                   i1l9120 2E60                     i1l9104 2E10                     i1l9032 2CC2  
                   i1l5840 4BF8                     i1l7512 2AF0                     i1l7096 4664  
                   i1l7424 441A                     i1l7416 4380                     i1l7360 640C  
                   i1l7352 63A4                     i1l9050 2D0A                     i1l7506 2AB6  
                   i1l7362 6414                     i1l9210 4776                     i1l9202 4756  
                   i1l5852 4C6A                     i1l5844 4C0C                     i1l7540 2B98  
                   i1l7428 5A8C                     i1l7460 5B24                     i1l8412 4E16  
                   i1l7356 63BA                     i1l8340 48E0                     i1l9118 2E5A  
                   i1l5862 4CC0                     i1l5854 4C9A                     i1l5846 4C1A  
                   i1l7534 2B70                     i1l7518 2B00                     i1l7438 5AC0  
                   i1l8510 502A                     i1l8406 4E04                     i1l7366 641C  
                   i1l8334 48C8                     i1l9214 4786                     i1l9206 4766  
                   i1l9128 2E84                     i1l9080 2DA4                     i1l9064 2D60  
                   i1l5856 4CA8                     i1l5848 4C4A                     i1l7536 2B7E  
                   i1l7528 2B42                     i1l7448 5AF0                     i1l8520 5060  
                   i1l8440 4EC8                     i1l8600 1696                     i1l9074 2D8A  
                   i1l9066 2D66                     i1l7554 2C34                     i1l7546 2BC6  
                   i1l7538 2B8C                     i1l8434 4EB6                     i1l8418 4E62  
                   i1l8610 16D0                     i1l8362 4984                     i1l8346 4930  
                   i1l9218 4796                     i1l5868 4CDC                     i1l7564 2C82  
                   i1l7548 2BD4                     i1l8516 504E                     i1l8444 4ED2  
                   i1l8428 4E94                     i1l8700 18A8                     i1l8372 499E  
                   i1l8356 4962                     i1l9172 46DA                     i1l9164 46BA  
                   i1l8526 5086                     i1l8390 6A18                     i1l8438 4EC2  
                   i1l8446 4EEA                     i1l8366 4990                     i1l8374 49B6  
                   i1l9190 4726                     i1l8384 69FA                     i1l8720 1928  
                   i1l8616 16EE                     i1l8552 15A0                     i1l8464 579E  
                   i1l8368 4996                     i1l9176 46EA                     i1l9168 46CA  
                   i1l8394 6A2A                     i1l8570 1608                     i1l8562 15CE  
                   i1l8554 15A8                     i1l8490 581C                     i1l8474 57D6  
                   i1l9194 4736                     i1l9186 4714                     i1l8732 1C90  
                   i1l8396 6A32                     i1l8652 17C8                     i1l8644 17A4  
                   i1l8580 1640                     i1l8484 5802                     i1l8806 1ECC  
                   i1l8742 1CC0                     i1l8638 1784                     i1l8486 580A  
                   i1l9198 4746                     i1l8648 17B6                     i1l8584 1652  
                   i1l8738 1CAE                     i1l8690 1884                     i1l8578 1622  
                   i1l8498 583E                     i1l8756 1D04                     i1l8748 1CDA  
                   i1l8692 188C                     i1l8598 1682                     i1l8784 1DF2  
                   i1l9586 006A                     i2l8324 6A72                     i2l7470 5B60  
                   i2l7480 5BBC                     i2l7472 5B6A                     i2l8328 6A8C  
                   i2l7482 5BC6                     i2l7474 5B88                     i2l7466 5B52  
                   i2l9322 2F42                     i2l7478 5B9E                     i2l9326 2FA8  
                   i2l9338 3018                     i2l8910 6248                     i2l8824 673C  
                   i2l8840 3272                     i2l8826 6748                     i2l8906 6218  
                   i2l8916 6274                     i2l8870 32F8                     i2l8862 32CC  
                   i2l8846 329C                     i2l8880 332C                     i2l8872 3302  
                   i2l8882 3336                     i2l8874 330A                     i2l8868 32EE  
                   i2l8888 3376                     i2l8898 33A6                     _RCREG1 000FAE  
     __size_of_drawBadPass 0016           i1_confirmEdition 5A86                     u920_21 40EC  
                   u780_21 3E5C                     _SPBRG1 000FAF                     u782_21 3E96  
                   u785_21 3BB2                     u787_21 3BEC                     u981_21 2A56  
                   u982_21 2A74             ?i1_calcSysVars 0001                     _TXREG1 000FAD  
           i1_sysParamInit 687E       __size_of_drawChanVal 0084           __end_of_delay_ms 6EFC  
    __size_ofi1_pressENTER 03CE                     _UPisLP 0048             integrator@acum 0123  
         __end_of_ioConfig 701A               i1_integrator 433C        __size_of_UARTConfig 0038  
    __size_ofi1_pressRETRO 00C2             integrator@temp 0127             i1putchUART@val 0060  
           __CFG_PWRTEN$ON 000000             __CFG_XINST$OFF 000000              _DOWNsecurLock 00B6  
      __size_of_PWM2Config 0066           __end_of__powers_ 7D4B       __size_of_drawSNquest 010C  
             _CCPTMRS0bits 000F49           __end_of_drawMenu 3220           __end_of_lcd_init 5C92  
         __end_of_lcd_putc 6628                     ___ftge 5604                     ___lmul 6808  
         __end_of_cutError 7136                  ??___aldiv 0108                     ___wmul 6FB2  
                ??___awdiv 010A                  ??___ftadd 0133             __CFG_STVREN$ON 000000  
                ??___awmod 0104                  ??___ftdiv 0118                  ??___ftneg 0103  
                ??___lldiv 0108                  ??___ftmul 011A                  ??___llmod 0115  
                ??___ftsub 013F                  ??___fttol 012E                     _contra 00AB  
     __end_of_drawCutError 7108                     _hp_isr 0008                     _selKMT 004A  
                   _fround 252C             i2___altoft@exp 0011                     clear_0 6098  
                   clear_1 60A4                     clear_2 60B0           ___awdiv@quotient 010C  
          ___awmod@divisor 0102               _chanValDigUP 52CC            ___awmod@counter 0104  
                   _printf 00C2       __end_of_drawPass1Lin 728E   __size_ofi1_longPressDOWN 002A  
         ?i1_desintegrator 0001          __end_ofi1___aldiv 4692      ___ftmul@f3_as_product 011E  
        __end_ofi1___ftadd 2CA8        _lcd_send_4bits$1690 0102        _lcd_send_4bits$1691 0103  
      _lcd_send_4bits$1688 0100        _lcd_send_4bits$1689 0101          __end_ofi1___ftdiv 3F92  
         ??_lcd_read_4bits 0100          __end_ofi1___ftmul 3CFA          __end_ofi1___fttol 421A  
     __end_of_drawPassWord 51F2               __pdataCOMRAM 004B                  ??_isdigit 0100  
        __end_ofi2___ftadd 33CC             i2___ftadd@exp1 001E             i2___ftadd@exp2 001D  
         i1_longPressENTER 1C70             i2___ftadd@sign 001C               __mediumconst 7CD4  
         i1_longPressRETRO 5000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                  ??_pressUP 0105               i1_pressENTER 1570  
      __size_ofi1___altoft 009E           ??_chanValDigDOWN 0100               i1_pressRETRO 578E  
      __size_ofi1___ftpack 010C     __end_ofi1_sysParamInit 68F4              _loadSysParams 6E28  
               __accesstop 0060          ?_saveProcessState 0001    __end_of__initialization 60B6  
               ___altoft@c 0108        __size_ofi2___altoft 0078          __end_ofi1_pressUP 49C6  
          __CFG_PBADEN$OFF 000000      __size_of_EEPROMConfig 0006                _UPsecurLock 00BA  
               ___ftadd@f1 012D                 ___ftadd@f2 0130        __size_ofi2___ftpack 00AE  
     i1longPressENTER@temp 008D                 ___ftge@ff1 0100                 ___ftge@ff2 0103  
          i1___ftpack@sign 0064              ___rparam_used 000001         ??_saveProcessState 0062  
               ___ftdiv@f1 0112                 ___ftdiv@f2 0115                 ___ftdiv@f3 011C  
         ??_lcd_send_4bits 0100            writeEEPROM@data 0100                 ___ftneg@f1 0100  
           i2___ftpack@arg 0001              __end_of_T2int 2EA2             i2___ftpack@exp 0004  
            __end_of_T4int 306A                 ___ftmul@f1 0114                 ___ftmul@f2 0117  
         ??_confirmEdition 0123                 ___ftsub@f1 0139                 ___ftsub@f2 013C  
               ___fttol@f1 012A             __pcstackCOMRAM 0001                setPWM2on@on 0100  
             __pidataBANK0 7329               __pidataBANK1 7136               _FC1securLock 0046  
            _initProtocoll 6D46         __size_of_checkPass 008E                 ___lltoft@c 0108  
              integrator@i 012B              __end_of_scale 11A2              __end_of_putch 7302  
             _FC2securLock 0047                  ?i1___lmul 0060                  ?i2___ftge 001F  
             _actualScreen 01B9             lcd_gotoxy@fila 0108     __size_ofi1_setPWM2duty 0094  
               __div_to_l_ 38B6             i1_chanValDigUP 539C                    ??_T2int 0067  
                  ??_T4int 0028         __size_of_ioInitStt 0008              ?_releaseENTER 0001  
               _calibLevel 01BA         __size_of_drawAdvON 004E              ?_releaseRETRO 0001  
          i1___fttol@sign1 0069               _EEPROMConfig 739A          lcd_gotoxy@address 010A  
          ??i1_calcVars2ti 0081               ?i1_checkPass 0001     __size_ofi1_longPressUP 0074  
          __div_to_l_@exp1 010B            __div_to_l_@cntr 010A                 _chanValdig 01A3  
                  ??_scale 0126          i1___aldiv@divisor 0064            __div_to_l_@quot 0106  
                  ??_putch 010D          i1___aldiv@counter 0068           ??_longPressENTER 014C  
               __pbssBANK0 00A5                 __pbssBANK1 01A3             ?_loadSysParams 0001  
          ??i1_calcSysVars 0077           ??_longPressRETRO 0123            ?i1_sysParamInit 0001  
    i1_longPressENTER$3238 0090              __div_to_l_@f1 0100              __div_to_l_@f2 0103  
        ??_drawAutoCalibRM 0174       __size_of_setPWM2duty 0094             _RETROsecurLock 00B9  
       __size_of_setPWM2on 001A         __CFG_CCP2MX$PORTC1 000000               ?_writeEEPROM 0100  
           lcd_send_byte@n 0105             ?_initProtocoll 0001                    ?___ftge 0100  
                  ?___lmul 0100                    ?___wmul 010E         __size_of_releaseUP 000C  
       __CFG_CCP3MX$PORTB5 000000       __size_of_longPressUP 0074                  ?_t2config 0001  
                  ?_hp_isr 0001                  ?_t4config 0001                  ?___altoft 0108  
                  ?_fround 0123             ___lmul@product 0108                  ?___ftpack 0100  
   __end_ofi1_chanValDigUP 546C      __end_of_desintegrator 3572                    ?_printf 013F  
                ?___lltoft 0108                 ??i1___lmul 0068                 ??i2___ftge 0025  
       __size_of_pressDOWN 0108      i2setPWM2duty@actuator 0001               ??_UARTConfig 0100  
     __size_of_releaseDOWN 000C                    u1263_41 3230             ??_releaseENTER 0100  
                  u1264_41 3244     __size_ofi2_setPWM2duty 0070             ??_releaseRETRO 0100  
             ??_PWM2Config 0106            __CFG_WDTEN$SWON 000000                  ?_delay_ms 0100  
 __size_ofi1_saveSysParams 0092                 _drawScreen 51F2                 _lcd_gotoxy 704C  
                ?_ioConfig 0001         __size_of_putchUART 000E     __size_of_longPressDOWN 002A  
                  _SPBRGH1 000FB0          ??i1_longPressDOWN 0060                    _UARTint 4692  
                ?_drawMenu 0001                  ?_lcd_init 0001                    _i16Data 00B2  
            ??_calcVars2ti 0123          __end_of_checkPass 6394                  ?_lcd_putc 0001  
                ?_cutError 0001    __size_of_buttonChecking 02B2             _tempLastScreen 00C8  
    __end_of_drawCalibProc 64AE              ??_calcSysVars 0123                 _holdUPcont 01BC  
             ?i1_pressDOWN 0001                 _readEEPROM 72C0              i1_setPWM2duty 5F9E  
        __end_of_ioInitStt 7392   __end_ofi1_chanValDigDOWN 5604          __end_of__npowers_ 7D24  
                  _t2Cont1 00C6                    _t2Cont2 00C7                    __Hparam 0000  
               _scale$3021 0126      __size_of_drawCutError 002E                 _lastSttFC1 00C2  
               _lastSttFC2 00C3                    __Lparam 0000          __end_of_drawAdvON 6CFA  
       __end_of_UARTConfig 6FB2               ?i1_putchUART 0001                 checkPass@i 0105  
       __end_of_PWM2Config 6BFC               ??i1___altoft 006C      __size_of_drawPass1Lin 001E  
            i1_longPressUP 69DE                    ___aldiv 445E            __size_of___ftge 00C8  
             ??i1___ftpack 0065                    ___awdiv 5850            __size_of___lmul 0076  
                  ___ftadd 27D8                    ___awmod 5C92                    ___ftdiv 3CFA  
                  ___ftneg 707C                    ___lldiv 590E            __size_of___wmul 0036  
                  ___ftmul 3A3E                    ___llmod 5E70                    ___ftsub 6CFA  
                  ___fttol 3F92                 ??_t2config 0100                 ??_t4config 0100  
    __size_of_drawPassWord 00EC               ??i2___altoft 000D                 ??___altoft 010C  
          __size_of_hp_isr 6712                    __pcinit 6032               ??i2___ftpack 0006  
               ??___ftpack 0105            __size_of_fround 02AC                    __ramtop 0600  
          ?i1_chanValDigUP 0001   __end_ofi1_confirmEdition 5B42                 ??___lltoft 010C  
                  __ptext0 6DDE                    __ptext1 7162                    __ptext2 6792  
                  __ptext3 72C0                    __ptext4 6AC2                    __ptext5 728E  
                  __ptext6 5BF0                    __ptext7 738A                    __ptext8 6FE8  
                  __ptext9 7392            __size_of_printf 0C32            i1_initProtocoll 6D92  
      i1initProtocoll@init 0066                ?__div_to_l_ 0100                    _dpowers 7CD5  
                _T2CONbits 000FBA                 _integrator 421A                    _isdigit 718C  
             __size_of_isr 00A6           ___awmod@dividend 0100            i2___altoft@sign 0012  
         ___aldiv@dividend 0100                  _T4CONbits 000F51                 ??_delay_ms 0102  
        __end_of_setPWM2on 72A8                 ??_ioConfig 0100                    _pressUP 47A6  
                _ENTERisLP 01B8                    _questSN 01B6            ??_loadSysParams 0081  
    __end_of_drawReady2Cut 70DA                 ??_drawMenu 0174                 ??_lcd_init 0108  
        __end_of_releaseUP 737E             __pintcode_body 66A2                 ??_lcd_putc 010B  
     end_of_initialization 60B6                 ??_cutError 0001         __end_ofi1___altoft 5E70  
        i1calcSysVars@temp 0077               _drawCutError 70DA      __end_of_drawValEditor 227A  
       __end_ofi1___ftpack 4CEA                  i1u1004_25 6F76                  i1u1004_26 6F78  
     lcd_send_byte@address 0107                  i1u1220_20 168E                  i1u1221_20 1690  
                i1u1223_20 16AC             ?i1_setPWM2duty 0060                  i1u1304_20 2D92  
                i1u1224_20 16AE                  i1u1304_26 2D94                 _securTimer 003B  
                i1u1154_20 496E              __Lmediumconst 7CD4                  i1u1155_20 4970  
                i1u1260_20 1F9C                  i1u1236_20 17DE                  i1u1317_20 2E8C  
                i1u1253_20 1CFC                  i1u1237_20 17E0                  i1u1317_26 2E8E  
                  int_func 66A2                  i1u1254_20 1CFE                  i1u1177_20 4EA0  
                i1u1178_20 4EA2                  i1u1259_20 1F9A               _drawPass1Lin 7270  
       __end_ofi2___altoft 6792              i2_setPWM2duty 6A52         __end_ofi2___ftpack 5BF0  
                i2u1337_45 2EAC          __end_of_pressDOWN 4DF2                  i2u1337_46 2EAE  
      __end_of_calcVars2ti 6C54      __end_of_lcd_read_byte 6EB6            ___lldiv@divisor 0104  
             _drawPassWord 5106            ??_initProtocoll 0106            ___lldiv@counter 010C  
 __end_ofi1_longPressENTER 1FA2   __end_ofi1_longPressRETRO 5106            lcd_read_4bits@n 0101  
            _longPressDOWN 71B6             ?i1_longPressUP 0001        __end_of_calcSysVars 6B2C  
         i1setPWM2duty@act 0064              readEEPROM@adr 0100                    printf@c 0173  
                  printf@f 013F          __end_of_putchUART 7348           ___aldiv@quotient 010A  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE                 _pressENTER 11A2          i1checkPass@passOK 0064  
               _pressRETRO 56CC                  _RETROisLP 00B8             __tdiv_to_l_@f1 0100  
           __tdiv_to_l_@f2 0103      __end_of_lcd_send_byte 6F3E              ??__tdiv_to_l_ 0106  
                _PORTAbits 000F80                  _PORTBbits 000F81                 _timsXcorte 0059  
            ??_clockConfig 0100           i1integrator@acum 0083               _holdDOWNcont 00BC  
         i1integrator@temp 0087                  _TRISAbits 000F92                  _TRISBbits 000F93  
                _TRISCbits 000F94                ?_drawScreen 0001                ?_lcd_gotoxy 0108  
                i1___aldiv 4578                  i1___ftadd 2A40                  i1___ftdiv 3E46  
                i1___ftmul 3B9C                  i1___fttol 40D6              ??_drawBadPass 0174  
   __size_ofi1_writeEEPROM 0020                  i2___ftadd 3220              ??_drawChanVal 0174  
     __size_ofi1_checkPass 008E     __size_of_saveSysParams 0092   __size_of_interruptConfig 0008  
        ??i1_saveSysParams 0081             ?i2_setPWM2duty 0001                ?_readEEPROM 0001  
              ___ftdiv@exp 011F              ??_drawSNquest 0174                printf@width 016C  
              _CCP2CONbits 000F66         longPressENTER@temp 014C          confirmEdition@yes 0123  
          i2___ftpack@sign 0005       __end_of_releaseENTER 7364        __size_of__div_to_l_ 0188  
     __end_of_releaseRETRO 7356             ?_longPressDOWN 0001                  i1_pressUP 48B6  
       _tempVelocidadMasa1 019D         _tempVelocidadMasa2 01A0         _tempVelocidadMasa3 0192  
              ___ftmul@exp 011D    __end_ofi1_initProtocoll 6DDE                _ECCP2ASbits 000F64  
     __size_of_writeEEPROM 0020             __end_of___ftge 56CC             __end_of___lmul 687E  
           __end_of___wmul 6FE8  __size_of_saveProcessState 003C              __pidataCOMRAM 7318  
           __end_of_hp_isr 671A             __end_of_fround 27D8        setPWM2duty@actuator 0100  
           __end_of_printf 0CF4                ?_integrator 0001      i1___lmul@multiplicand 0064  
        __size_ofi1___lmul 0076        start_initialization 6032          __size_ofi2___ftge 0090  
      __end_of__tdiv_to_l_ 38B6           ??i1_sysParamInit 007A                 ?i1___aldiv 0060  
              __end_of_isr 00BE                 ?i1___ftadd 0068                 ?i1___ftdiv 0072  
               ?i1___ftmul 0068                 ?i1___fttol 0060            _drawAutoCalibRM 701A  
      __end_of_clockConfig 7230                 ?i2___ftadd 0013   __size_ofi1_desintegrator 01A6  
              _calcVars2ti 6BFC            ??i1_setPWM2duty 0062             _buttonChecking 227A  
        desintegrator@temp 013B                _calcSysVars 6AC2            ___llmod@divisor 0111  
      __end_of_drawBadPass 72EC            ___llmod@counter 0115            ??i1_longPressUP 0060  
             _lastSttENTER 00D6               _lastSttRETRO 00D7        __end_of_drawChanVal 6532  
     __size_ofi1_pressDOWN 0108                 ?i1_pressUP 0001                   ??___ftge 0106  
      __size_of_drawScreen 00DA                   ??___lmul 0108        __size_of_lcd_gotoxy 0030  
            i1_writeEEPROM 7250                   ??___wmul 0112        __end_of_drawSNquest 4AD2  
              ?_pressENTER 0001                _chanValChar 00A5       __size_ofi1_putchUART 000E  
              ?_pressRETRO 0001                __pdataBANK0 00C9                __pdataBANK1 0177  
          lcd_send_4bits@n 0104                   ??_hp_isr 0029         i1___aldiv@dividend 0060  
            _saveSysParams 60C4                   ??_fround 0126            i1_longPressDOWN 71E0  
          i1readEEPROM@adr 0060                   ??_printf 0151          __size_of_t2config 0018  
        __size_of_t4config 002A          __size_of___altoft 009E                 fround@prec 012C  
      __size_of_readEEPROM 0016          __size_of___ftpack 010C          __size_of___lltoft 007C  
              __pbssCOMRAM 0037             writeEEPROM@adr 0101              __pcstackBANK0 0060  
            __pcstackBANK1 0100                  _calFactor 003F     __end_of_buttonChecking 252C  
             _isdigit$2512 0101                   ?_UARTint 0001          __size_of_delay_ms 0046  
         i1___lmul@product 0068          __size_of_ioConfig 0032      __end_ofi1_calcVars2ti 6CAC  
          ??i2_setPWM2duty 0003              ?_sysParamInit 0001                  _calibMode 00BB  
  __size_of_lcd_read_4bits 007A              ??_setPWM2duty 0102          __size_of_drawMenu 01B6  
        __size_of_lcd_init 00A2          __size_of_lcd_putc 007A                  _bladeIsUP 00D4  
    __end_ofi1_calcSysVars 6B96         i1___aldiv@quotient 006A          __size_of_cutError 002E  
                _checkPass 6306            ??_longPressDOWN 0100        __size_of_integrator 0122  
            ??_longPressUP 0100          ?i1_chanValDigDOWN 0001          ??_interruptConfig 0100  
           ?i1_writeEEPROM 0060    __size_of_chanValDigDOWN 00CC           ??i1_chanValDigUP 0060  
                __pintcode 0008              __pmediumconst 7CD4                   ?___aldiv 0100  
         ?i1_initProtocoll 0001                   ?___awdiv 0106                  __ptext100 5DD2  
                __ptext101 3572                  __ptext110 6C54                  __ptext102 68F4  
                __ptext111 3E46                  __ptext103 40D6                  __ptext112 6B2C  
                __ptext104 4578                  __ptext121 2EA2                  __ptext113 3B9C  
                __ptext105 5A86                  __ptext122 6A52                  __ptext114 4BDE  
                __ptext106 2A40                  __ptext123 61E8                  __ptext115 2CA8  
                __ptext107 71E0                  __ptext124 3220                  __ptext116 6D92  
                __ptext108 6E28                  __ptext125 671A                  __ptext117 5F9E  
                __ptext109 6156                   ?___ftadd 012D                  __ptext126 5B42  
                __ptext118 6F3E                  __ptext127 7108                  __ptext119 7250  
       ??i1_chanValDigDOWN 0060                   ?___awmod 0100                   ?___ftdiv 0112  
                 ?___ftneg 0100                  _ioInitStt 738A                   ?___lldiv 0100  
                 ?___ftmul 0114                   ?___llmod 010D                   ?___ftsub 0139  
                __npowers_ 7CFD                   ?___fttol 012A             ?_saveSysParams 0001  
                _drawAdvON 6CAC              ??_releaseDOWN 0100                __pintcodelo 0018  
         __CFG_PRICLKEN$ON 000000                __tdiv_to_l_ 3718    __size_of_lcd_send_4bits 008E  
        ?i1_confirmEdition 0001              ?i1_readEEPROM 0001    __end_of_drawAutoCalibRM 704C  
             ??__div_to_l_ 0106    __size_of_confirmEdition 00BC                _clockConfig 720A  
                 ?_isdigit 0001             __size_of_T2int 01FA             __size_of_T4int 01C8  
       ??i1_confirmEdition 0081                  _lastSttUP 00D8                ??i1___aldiv 0068  
                 ?_pressUP 0001                ??i1___ftadd 006E                ??i1___ftdiv 0078  
              ??i1___ftmul 006E                ??i1___fttol 0064            ?_buttonChecking 0001  
                _ready2Cut 00C5                ??i2___ftadd 0019                _drawBadPass 72D6  
           __size_of_scale 04AE             ??_sysParamInit 0126             __size_of_putch 0016  
      __size_of_pressENTER 03CE                  _setPWM2on 728E      __size_of_releaseENTER 000E  
      __size_of_pressRETRO 00C2                _drawChanVal 64AE      __size_of_releaseRETRO 000E  
          ___aldiv@divisor 0104            ___aldiv@counter 0108              _tempNumCortes 00D2  
           ___wmul@product 0112                   _LATBbits 000F8A                   _LATCbits 000F8B  
                _releaseUP 7372                 ?_checkPass 0001    lcd_init@LCD_INIT_STRING 0109  
                delay_ms@i 0103     __size_of_desintegrator 01A6                   _DOWNisLP 0045  
              _drawSNquest 49C6          ??i1_desintegrator 0077                   _IPR1bits 000F9F  
                 _PIE1bits 000F9D                   _IPR5bits 000F7F                   _PIE5bits 000F7D  
                _numCortes 00D0              ?i1_integrator 0001                ??i1_pressUP 0065  
                 _PIR1bits 000F9E                   i1u922_20 4136         __end_of__div_to_l_ 3A3E  
  __end_ofi1_longPressDOWN 720A                   i1u922_25 412C                   i1u907_25 61E4  
                 i1u907_26 61E6                   _PIR5bits 000F7E          ?i1_longPressENTER 0001  
                 i1u966_20 360C        __end_of_setPWM2duty 5F9E                _holdFC1cont 00BE  
              _holdFC2cont 00BF                   _RCONbits 000FD0          ?i1_longPressRETRO 0001  
               UARTint@sas 0093    __size_of_longPressENTER 0332                  _pressDOWN 4CEA  
  __size_of_longPressRETRO 0106                 ?_ioInitStt 0001         ??i1_longPressENTER 008D  
               ?_drawAdvON 0001         ??i1_longPressRETRO 0077           _saveProcessState 6F3E  
            ?_chanValDigUP 0001                  _putchUART 733A        __end_of_longPressUP 69DE  
           ??i1_readEEPROM 0060                   i1___lmul 68F4          ___wmul@multiplier 010E  
                 i2___ftge 61E8     __size_of_drawCalibProc 008C                  lcd_init@i 010D  
               printf@flag 0160                 printf@fval 016E                 printf@prec 0171  
          i1_saveSysParams 6156               _releaseENTER 7356        __end_of_releaseDOWN 738A  
             ??_drawScreen 0177               _releaseRETRO 7348               ??_lcd_gotoxy 0109  
            ?i1_pressENTER 0001          ___lmul@multiplier 0100                  copy_data0 6046  
                copy_data1 6066                  copy_data2 6086              ?i1_pressRETRO 0001  
         __size_of_UARTint 0114      __end_of_loadSysParams 6E70                 ?_setPWM2on 0001  
             ??_readEEPROM 0100                 ?_releaseUP 0001             ??i1_integrator 0081  
               _EECON1bits 000FA6            ??i1_writeEEPROM 0061                   __Hrparam 0000  
              _lastSttDOWN 00D5                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
    __end_of_initProtocoll 6D92            ??_saveSysParams 0123                 ?_pressDOWN 0001  
        __CFG_P2BMX$PORTC0 000000         __end_of_drawScreen 52CC         __end_of_lcd_gotoxy 707C  
         __size_of___aldiv 011A                   _t2config 72A8              i1integrator@i 008B  
         __size_of___awdiv 00BE             ??_chanValDigUP 0100           __size_of___ftadd 0268  
         __size_of___awmod 00A2                   _t4config 7162           __size_of___ftdiv 014C  
   __size_of_drawReady2Cut 002E           __size_of___ftneg 0030           __size_of___lldiv 00BC  
                 ___altoft 5D34           __size_of___ftmul 015E           __size_of___llmod 009A  
         __size_of___ftsub 004C           __size_of___fttol 0144                 ?_putchUART 0001  
                 ___ftpack 4AD2                _fround$3020 0126                _fround$3019 0129  
                 ___lltoft 6532              _desintegrator 33CC     __size_of_drawValEditor 02D8  
               _ANSELAbits 000F38                 _ANSELCbits 000F3A             desintegrator@i 014A  
         ?_drawAutoCalibRM 0001               ??_integrator 0121                _menuSection 01BD  
                 _chanValf 01B1                   _chanVals 01B4         __end_of_readEEPROM 72D6  
         __size_of_isdigit 002A     __size_of_lcd_read_byte 0046                   _delay_ms 6EB6  
            ?_EEPROMConfig 0001                   _ioConfig 6FE8              ??i1_checkPass 0060  
           ??i1_pressENTER 008A                   __ptext10 51F2                   __ptext11 49C6  
                 __ptext20 701A                   __ptext12 70AC                   __ptext21 1FA2  
                 __ptext13 5106                   __ptext30 6278                   __ptext22 6CAC  
                 __ptext14 306A                   __ptext31 6E70                   __ptext23 00C2  
                 __ptext15 70DA                   __ptext40 6532                   __ptext32 6628  
                 __ptext24 0CF4                   __ptext16 64AE                   __ptext41 5E70  
                 __ptext33 718C                   __ptext25 72EC                   __ptext17 6422  
                 __ptext50 7356                   __ptext42 590E                   __ptext34 252C  
                 __ptext26 733A                   __ptext18 72D6                   __ptext51 737E  
                 __ptext43 6CFA                   __ptext35 6FB2                   __ptext27 65AE  
                 __ptext19 7270                   __ptext60 4EFA                   __ptext52 47A6  
                 __ptext44 707C                   __ptext36 5C92                   __ptext28 704C  
                 __ptext61 6D46                   __ptext53 52CC                   __ptext45 5604  
                 __ptext37 5850                   __ptext29 6EFC                   __ptext70 60C4  
                 __ptext62 193E                   __ptext54 56CC                   __ptext46 720A  
                 __ptext38 3718                   __ptext71 7230                   __ptext63 421A  
                 __ptext55 11A2                   __ptext47 227A                   __ptext39 38B6  
                 __ptext80 6B96                   __ptext72 6BFC                   __ptext64 5D34  
                 __ptext56 6306                   __ptext48 7372                   __ptext81 72A8  
                 __ptext73 3A3E                   __ptext65 33CC                   __ptext57 4CEA  
                 __ptext49 7348                   __ptext90 539C                   __ptext82 5F0A  
                 __ptext74 3CFA                   __ptext66 6808                   __ptext58 546C  
                 __ptext91 578E                   __ptext83 739A                   __ptext75 27D8  
                 __ptext67 3F92                   __ptext59 696A                   __ptext92 1570  
                 __ptext76 4AD2                   __ptext68 445E                   __ptext93 6394  
                 __ptext85 4692                   __ptext77 71B6                   __ptext69 59CA  
                 __ptext94 4DF2                   __ptext86 687E                   __ptext78 6EB6  
                 __ptext95 5538                   __ptext87 7302                   __ptext79 6F7A  
                 __ptext96 69DE                   __ptext88 7364                   __ptext97 5000  
                 __ptext89 48B6                   __ptext98 1C70                   __ptext99 433C  
           _processStarted 00C4                   _kgXcorte 018F                   __powers_ 7D24  
           ??i1_pressRETRO 0067           __size_of_pressUP 0110                   _drawMenu 306A  
                 _lcd_init 5BF0                   _lcd_putc 65AE               ?_calcVars2ti 0001  
                 _cutError 7108                _OSCCON2bits 000FD2             _lcd_read_4bits 6628  
   __size_of_lcd_send_byte 0042                _setPWM2duty 5F0A          i1writeEEPROM@data 0060  
             ?_calcSysVars 0001              __size_of_main 004A              _drawCalibProc 6422  
              ??_checkPass 0100            calcSysVars@temp 0123                   _passChar 01AD  
      _longPressENTER$3018 014F                _passSection 01BE                   _tiXcorte 0195  
                 _timeDOWN 004F              ??_writeEEPROM 0101             _chanValDigDOWN 546C  
         ?i1_longPressDOWN 0001                _longPressUP 696A         __end_of_integrator 433C  
             _PSTR2CONbits 000F63               ??_pressENTER 014C                   int$flags 005C  
              ??_ioInitStt 0100                   _questKMT 0042               ??_pressRETRO 0107  
              ??_drawAdvON 0174    __end_ofi1_saveSysParams 61E8                  printf@len 015C  
                printf@exp 016A                  printf@val 0166       __end_of_sysParamInit 6808  
              _releaseDOWN 737E             _lcd_send_4bits 6278            checkPass@passOK 0104  
           ?_desintegrator 0001                _introducido 01A9                delay_ms@del 0100  
           _confirmEdition 59CA             _chanValSection 019B              _velocidadMasa 0198  
      i1confirmEdition@yes 0081                _OSCTUNEbits 000F9B                 _INTCONbits 000FF2  
           ??_EEPROMConfig 0100       i1desintegrator@temp2 0084       i1desintegrator@temp3 0080  
     i1desintegrator@tempL 007C                _PWM2CONbits 000F65                   isdigit@c 0102  
             _tempkgXcorte 0056                   scale@scl 0129     __end_of_lcd_read_4bits 66A2  
          _interruptConfig 7392              _drawReady2Cut 70AC                   intlevel1 0000  
                 intlevel2 0000                ??_setPWM2on 0100           __tdiv_to_l_@exp1 010E  
         __tdiv_to_l_@cntr 010D         __end_of_pressENTER 1570           __tdiv_to_l_@quot 0109  
           ?_drawCalibProc 0001         __end_of_pressRETRO 578E      __end_ofi1_setPWM2duty 6032  
            ??i1_pressDOWN 0065           ___lldiv@dividend 0100              _drawValEditor 1FA2  
              ??_releaseUP 0100       __end_ofi1_readEEPROM 7318        __end_ofi1_checkPass 6422  
             _temptiXcorte 00CD     __end_of_chanValDigDOWN 5538                 _RCSTA1bits 000FAB  
         i1writeEEPROM@adr 0061                 _OSCCONbits 000FD3              ??i1_putchUART 0060  
            _lcd_read_byte 6E70         _screen_calibVelRes 0049      __end_ofi1_longPressUP 6A52  
           _longPressENTER 193E             _longPressRETRO 4EFA                ??_pressDOWN 0105  
                 printf@ap 015E                   printf@cp 015A     __end_of_lcd_send_4bits 6306  
   __end_of_confirmEdition 5A86                   putch@val 010D                ??_putchUART 0100  
      i1desintegrator@temp 0079              _lcd_send_byte 6EFC        __end_of_writeEEPROM 7250  
             ?__tdiv_to_l_ 0100                _printf$3022 0157           ??_buttonChecking 0152  
             ?_clockConfig 0001                 _UARTConfig 6F7A               _processTimer 0037  
             _processState 00B4       __end_ofi1_integrator 445E           ___lldiv@quotient 0108  
               _PWM2Config 6B96  __size_ofi1_chanValDigDOWN 00CC               ___aldiv@sign 0109  
        __CFG_T3CMX$PORTC0 000000            i1_desintegrator 3572                 _WDTCONbits 000FD1  
            _holdENTERcont 00BD            ?_lcd_read_4bits 0001               ?_drawBadPass 0001  
           ?_drawReady2Cut 0001              ?_drawCutError 0001               ?_drawChanVal 0001  
 __end_of_saveProcessState 6F7A       __end_of_chanValDigUP 539C             _ENTERsecurLock 00B7  
           ?_drawValEditor 0001  __size_ofi1_confirmEdition 00BC              ?_drawPass1Lin 0001  
    __end_ofi2_setPWM2duty 6AC2          __CFG_FOSC$INTIO67 000000                drawAdvON@on 0174  
             ?_drawSNquest 0001            ?_chanValDigDOWN 0001    __size_ofi1_sysParamInit 0076  
   __end_of_longPressENTER 1C70              ?_drawPassWord 0001             ?_lcd_read_byte 0001  
   __end_of_longPressRETRO 5000      __end_of_longPressDOWN 71E0  
