

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Mar 04 23:52:36 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1,group=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1,group=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1
   138                           	psect	text119,global,reloc=2,class=CODE,delta=1
   139                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   140                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   141                           	psect	text121,global,reloc=2,class=CODE,delta=1
   142                           	psect	text122,global,reloc=2,class=CODE,delta=1
   143                           	psect	text123,global,reloc=2,class=CODE,delta=1
   144                           	psect	text124,global,reloc=2,class=CODE,delta=1
   145                           	psect	text125,global,reloc=2,class=CODE,delta=1
   146                           	psect	text126,global,reloc=2,class=CODE,delta=1
   147                           	psect	text127,global,reloc=2,class=CODE,delta=1
   148                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   149                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   150                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   151  0000                     
   152                           ; Version 1.41
   153                           ; Generated 25/01/2017 GMT
   154                           ; 
   155                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   156                           ; All rights reserved.
   157                           ; 
   158                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   159                           ; 
   160                           ; Redistribution and use in source and binary forms, with or without modification, are
   161                           ; permitted provided that the following conditions are met:
   162                           ; 
   163                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   164                           ;        conditions and the following disclaimer.
   165                           ; 
   166                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   167                           ;        of conditions and the following disclaimer in the documentation and/or other
   168                           ;        materials provided with the distribution.
   169                           ; 
   170                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   171                           ;        software without specific prior written permission.
   172                           ; 
   173                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   174                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   175                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   176                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   177                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   178                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   179                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   180                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   181                           ; 
   182                           ; 
   183                           ; Code-generator required, PIC18F25K22 Definitions
   184                           ; 
   185                           ; SFR Addresses
   186  0000                     
   187                           	psect	idataCOMRAM
   188  00731E                     __pidataCOMRAM:
   189                           	opt stack 0
   190                           
   191                           ;initializer for _timeDOWN
   192  00731E  0032               	dw	50
   193  007320  0000               	dw	0
   194                           
   195                           ;initializer for _maxTimePerCut
   196  007322  1388               	dw	5000
   197  007324  0000               	dw	0
   198                           
   199                           ;initializer for _timsXcorte
   200  007326  40                 	db	64
   201  007327  1C                 	db	28
   202  007328  46                 	db	70
   203                           
   204                           ;initializer for _tempkgXcorte
   205  007329  CD                 	db	205
   206  00732A  CC                 	db	204
   207  00732B  3D                 	db	61
   208                           
   209                           ;initializer for _pi
   210  00732C  10                 	db	16
   211  00732D  49                 	db	73
   212  00732E  40                 	db	64
   213                           
   214                           	psect	idataBANK0
   215  00732F                     __pidataBANK0:
   216                           	opt stack 0
   217                           
   218                           ;initializer for lcd_init@F6841
   219  00732F  28                 	db	40
   220  007330  0C                 	db	12
   221  007331  01                 	db	1
   222  007332  06                 	db	6
   223                           
   224                           ;initializer for _temptiXcorte
   225  007333  00                 	db	0
   226  007334  20                 	db	32
   227  007335  41                 	db	65
   228                           
   229                           ;initializer for _tempNumCortes
   230  007336  0001               	dw	1
   231                           
   232                           ;initializer for _numCortes
   233  007338  0005               	dw	5
   234                           
   235                           ;initializer for _bladeIsUP
   236  00733A  01                 	db	1
   237                           
   238                           ;initializer for _lastSttENTER
   239  00733B  01                 	db	1
   240                           
   241                           ;initializer for _lastSttRETRO
   242  00733C  01                 	db	1
   243                           
   244                           ;initializer for _lastSttDOWN
   245  00733D  01                 	db	1
   246                           
   247                           ;initializer for _lastSttUP
   248  00733E  01                 	db	1
   249                           
   250                           	psect	idataBANK1
   251  00713C                     __pidataBANK1:
   252                           	opt stack 0
   253                           
   254                           ;initializer for _exp10
   255  00713C  86A0               	dw	34464
   256  00713E  0001               	dw	1
   257  007140  2710               	dw	10000
   258  007142  0000               	dw	0
   259  007144  03E8               	dw	1000
   260  007146  0000               	dw	0
   261  007148  0064               	dw	100
   262  00714A  0000               	dw	0
   263  00714C  000A               	dw	10
   264  00714E  0000               	dw	0
   265  007150  0001               	dw	1
   266  007152  0000               	dw	0
   267                           
   268                           ;initializer for _velocidadMasa
   269  007154  CD                 	db	205
   270  007155  4C                 	db	76
   271  007156  3E                 	db	62
   272                           
   273                           ;initializer for _tempVelocidadMasa3
   274  007157  CD                 	db	205
   275  007158  4C                 	db	76
   276  007159  3E                 	db	62
   277                           
   278                           ;initializer for _tiXcorte
   279  00715A  00                 	db	0
   280  00715B  20                 	db	32
   281  00715C  41                 	db	65
   282                           
   283                           ;initializer for _kgXcorte
   284  00715D  00                 	db	0
   285  00715E  80                 	db	128
   286  00715F  3F                 	db	63
   287                           
   288                           ;initializer for _flech
   289  007160  7E                 	db	126
   290                           
   291                           ;initializer for _chanValSection
   292  007161  05                 	db	5
   293                           
   294                           ;initializer for _tempVelocidadMasa2
   295  007162  CD                 	db	205
   296  007163  4C                 	db	76
   297  007164  3E                 	db	62
   298                           
   299                           ;initializer for _tempVelocidadMasa1
   300  007165  CD                 	db	205
   301  007166  4C                 	db	76
   302  007167  3E                 	db	62
   303                           
   304                           	psect	mediumconst
   305  007CD4                     __pmediumconst:
   306                           	opt stack 0
   307  007CD4  00                 	db	0
   308  007CD5                     _dpowers:
   309                           	opt stack 0
   310  007CD5  0001               	dw	1
   311  007CD7  0000               	dw	0
   312  007CD9  000A               	dw	10
   313  007CDB  0000               	dw	0
   314  007CDD  0064               	dw	100
   315  007CDF  0000               	dw	0
   316  007CE1  03E8               	dw	1000
   317  007CE3  0000               	dw	0
   318  007CE5  2710               	dw	10000
   319  007CE7  0000               	dw	0
   320  007CE9  86A0               	dw	34464
   321  007CEB  0001               	dw	1
   322  007CED  4240               	dw	16960
   323  007CEF  000F               	dw	15
   324  007CF1  9680               	dw	38528
   325  007CF3  0098               	dw	152
   326  007CF5  E100               	dw	57600
   327  007CF7  05F5               	dw	1525
   328  007CF9  CA00               	dw	51712
   329  007CFB  3B9A               	dw	15258
   330  007CFD                     __end_of_dpowers:
   331                           	opt stack 0
   332  007CFD                     __powers_:
   333                           	opt stack 0
   334  007CFD  00                 	db	0
   335  007CFE  80                 	db	128
   336  007CFF  3F                 	db	63
   337  007D00  00                 	db	0
   338  007D01  20                 	db	32
   339  007D02  41                 	db	65
   340  007D03  00                 	db	0
   341  007D04  C8                 	db	200
   342  007D05  42                 	db	66
   343  007D06  00                 	db	0
   344  007D07  7A                 	db	122
   345  007D08  44                 	db	68
   346  007D09  40                 	db	64
   347  007D0A  1C                 	db	28
   348  007D0B  46                 	db	70
   349  007D0C  50                 	db	80
   350  007D0D  C3                 	db	195
   351  007D0E  47                 	db	71
   352  007D0F  24                 	db	36
   353  007D10  74                 	db	116
   354  007D11  49                 	db	73
   355  007D12  97                 	db	151
   356  007D13  18                 	db	24
   357  007D14  4B                 	db	75
   358  007D15  BC                 	db	188
   359  007D16  BE                 	db	190
   360  007D17  4C                 	db	76
   361  007D18  6B                 	db	107
   362  007D19  6E                 	db	110
   363  007D1A  4E                 	db	78
   364  007D1B  03                 	db	3
   365  007D1C  15                 	db	21
   366  007D1D  50                 	db	80
   367  007D1E  79                 	db	121
   368  007D1F  AD                 	db	173
   369  007D20  60                 	db	96
   370  007D21  F3                 	db	243
   371  007D22  49                 	db	73
   372  007D23  71                 	db	113
   373  007D24                     __end_of__powers_:
   374                           	opt stack 0
   375  007D24                     __npowers_:
   376                           	opt stack 0
   377  007D24  00                 	db	0
   378  007D25  80                 	db	128
   379  007D26  3F                 	db	63
   380  007D27  CD                 	db	205
   381  007D28  CC                 	db	204
   382  007D29  3D                 	db	61
   383  007D2A  D7                 	db	215
   384  007D2B  23                 	db	35
   385  007D2C  3C                 	db	60
   386  007D2D  12                 	db	18
   387  007D2E  83                 	db	131
   388  007D2F  3A                 	db	58
   389  007D30  B7                 	db	183
   390  007D31  D1                 	db	209
   391  007D32  38                 	db	56
   392  007D33  C6                 	db	198
   393  007D34  27                 	db	39
   394  007D35  37                 	db	55
   395  007D36  38                 	db	56
   396  007D37  86                 	db	134
   397  007D38  35                 	db	53
   398  007D39  C0                 	db	192
   399  007D3A  D6                 	db	214
   400  007D3B  33                 	db	51
   401  007D3C  CC                 	db	204
   402  007D3D  2B                 	db	43
   403  007D3E  32                 	db	50
   404  007D3F  70                 	db	112
   405  007D40  89                 	db	137
   406  007D41  30                 	db	48
   407  007D42  E7                 	db	231
   408  007D43  DB                 	db	219
   409  007D44  2E                 	db	46
   410  007D45  E5                 	db	229
   411  007D46  3C                 	db	60
   412  007D47  1E                 	db	30
   413  007D48  42                 	db	66
   414  007D49  A2                 	db	162
   415  007D4A  0D                 	db	13
   416  007D4B                     __end_of__npowers_:
   417                           	opt stack 0
   418  0000                     _PR4	set	3922
   419  0000                     _T4CONbits	set	3921
   420  0000                     _CCPTMRS0bits	set	3913
   421  0000                     _ANSELAbits	set	3896
   422  0000                     _ANSELCbits	set	3898
   423  0000                     _WDTCONbits	set	4049
   424  0000                     _PIE5bits	set	3965
   425  0000                     _IPR5bits	set	3967
   426  0000                     _PIR5bits	set	3966
   427  0000                     _BAUDCON1bits	set	4024
   428  0000                     _SPBRG1	set	4015
   429  0000                     _SPBRGH1	set	4016
   430  0000                     _RCSTA1bits	set	4011
   431  0000                     _RCREG1	set	4014
   432  0000                     _PWM2CONbits	set	3941
   433  0000                     _ECCP2ASbits	set	3940
   434  0000                     _PR2	set	4027
   435  0000                     _PSTR2CONbits	set	3939
   436  0000                     _PORTAbits	set	3968
   437  0000                     _CCPR2L	set	3943
   438  0000                     _CCP2CONbits	set	3942
   439  0000                     _PIE1bits	set	3997
   440  0000                     _IPR1bits	set	3999
   441  0000                     _PIR1bits	set	3998
   442  0000                     _T2CONbits	set	4026
   443  0000                     _EECON2	set	4007
   444  0000                     _EECON1bits	set	4006
   445  0000                     _EEDATA	set	4008
   446  0000                     _EEADR	set	4009
   447  0000                     _LATBbits	set	3978
   448  0000                     _LATCbits	set	3979
   449  0000                     _TRISAbits	set	3986
   450  0000                     _TRISCbits	set	3988
   451  0000                     _TXREG1	set	4013
   452  0000                     _TXSTA1bits	set	4012
   453  0000                     _TRISBbits	set	3987
   454  0000                     _PORTBbits	set	3969
   455  0000                     _INTCONbits	set	4082
   456  0000                     _RCONbits	set	4048
   457  0000                     _OSCTUNEbits	set	3995
   458  0000                     _OSCCON2bits	set	4050
   459  0000                     _OSCCONbits	set	4051
   460  007D4B                     STR_21:
   461                           
   462                           ; BSR set to: 1
   463  007D4B  20                 	db	32
   464  007D4C  20                 	db	32
   465  007D4D  20                 	db	32
   466  007D4E  20                 	db	32
   467  007D4F  25                 	db	37
   468  007D50  63                 	db	99	;'c'
   469  007D51  25                 	db	37
   470  007D52  75                 	db	117	;'u'
   471  007D53  25                 	db	37
   472  007D54  63                 	db	99	;'c'
   473  007D55  25                 	db	37
   474  007D56  75                 	db	117	;'u'
   475  007D57  25                 	db	37
   476  007D58  63                 	db	99	;'c'
   477  007D59  25                 	db	37
   478  007D5A  75                 	db	117	;'u'
   479  007D5B  25                 	db	37
   480  007D5C  63                 	db	99	;'c'
   481  007D5D  25                 	db	37
   482  007D5E  75                 	db	117	;'u'
   483  007D5F  20                 	db	32
   484  007D60  20                 	db	32
   485  007D61  20                 	db	32
   486  007D62  20                 	db	32
   487  007D63  00                 	db	0
   488  007D64                     STR_9:
   489                           
   490                           ; BSR set to: 1
   491  007D64  20                 	db	32
   492  007D65  20                 	db	32
   493  007D66  20                 	db	32
   494  007D67  20                 	db	32
   495  007D68  44                 	db	68	;'D'
   496  007D69  65                 	db	101	;'e'
   497  007D6A  74                 	db	116	;'t'
   498  007D6B  65                 	db	101	;'e'
   499  007D6C  6E                 	db	110	;'n'
   500  007D6D  69                 	db	105	;'i'
   501  007D6E  64                 	db	100	;'d'
   502  007D6F  6F                 	db	111	;'o'
   503  007D70  20                 	db	32
   504  007D71  20                 	db	32
   505  007D72  20                 	db	32
   506  007D73  20                 	db	32
   507  007D74  20                 	db	32
   508  007D75  20                 	db	32
   509  007D76  20                 	db	32
   510  007D77  00                 	db	0
   511  007D78                     STR_15:
   512                           
   513                           ; BSR set to: 1
   514  007D78  20                 	db	32
   515  007D79  20                 	db	32
   516  007D7A  25                 	db	37
   517  007D7B  33                 	db	51	;'3'
   518  007D7C  2E                 	db	46
   519  007D7D  33                 	db	51	;'3'
   520  007D7E  66                 	db	102	;'f'
   521  007D7F  20                 	db	32
   522  007D80  6B                 	db	107	;'k'
   523  007D81  67                 	db	103	;'g'
   524  007D82  2F                 	db	47
   525  007D83  73                 	db	115	;'s'
   526  007D84  20                 	db	32
   527  007D85  20                 	db	32
   528  007D86  20                 	db	32
   529  007D87  20                 	db	32
   530  007D88  20                 	db	32
   531  007D89  20                 	db	32
   532  007D8A  00                 	db	0
   533  007D8B                     STR_31:
   534                           
   535                           ; BSR set to: 1
   536  007D8B  20                 	db	32
   537  007D8C  20                 	db	32
   538  007D8D  20                 	db	32
   539  007D8E  25                 	db	37
   540  007D8F  63                 	db	99	;'c'
   541  007D90  53                 	db	83	;'S'
   542  007D91  49                 	db	73	;'I'
   543  007D92  20                 	db	32
   544  007D93  20                 	db	32
   545  007D94  20                 	db	32
   546  007D95  20                 	db	32
   547  007D96  25                 	db	37
   548  007D97  63                 	db	99	;'c'
   549  007D98  4E                 	db	78	;'N'
   550  007D99  4F                 	db	79	;'O'
   551  007D9A  20                 	db	32
   552  007D9B  20                 	db	32
   553  007D9C  20                 	db	32
   554  007D9D  00                 	db	0
   555  007D9E                     STR_32:
   556                           
   557                           ; BSR set to: 1
   558  007D9E  50                 	db	80	;'P'
   559  007D9F  65                 	db	101	;'e'
   560  007DA0  73                 	db	115	;'s'
   561  007DA1  6F                 	db	111	;'o'
   562  007DA2  20                 	db	32
   563  007DA3  52                 	db	82	;'R'
   564  007DA4  65                 	db	101	;'e'
   565  007DA5  61                 	db	97	;'a'
   566  007DA6  6C                 	db	108	;'l'
   567  007DA7  3A                 	db	58	;':'
   568  007DA8  20                 	db	32
   569  007DA9  20                 	db	32
   570  007DAA  20                 	db	32
   571  007DAB  20                 	db	32
   572  007DAC  20                 	db	32
   573  007DAD  20                 	db	32
   574  007DAE  0A                 	db	10
   575  007DAF  00                 	db	0
   576  007DB0                     STR_34:
   577                           
   578                           ; BSR set to: 1
   579  007DB0  47                 	db	71	;'G'
   580  007DB1  75                 	db	117	;'u'
   581  007DB2  69                 	db	105	;'i'
   582  007DB3  6C                 	db	108	;'l'
   583  007DB4  6C                 	db	108	;'l'
   584  007DB5  6F                 	db	111	;'o'
   585  007DB6  74                 	db	116	;'t'
   586  007DB7  69                 	db	105	;'i'
   587  007DB8  6E                 	db	110	;'n'
   588  007DB9  61                 	db	97	;'a'
   589  007DBA  20                 	db	32
   590  007DBB  20                 	db	32
   591  007DBC  20                 	db	32
   592  007DBD  20                 	db	32
   593  007DBE  20                 	db	32
   594  007DBF  20                 	db	32
   595  007DC0  0A                 	db	10
   596  007DC1  00                 	db	0
   597  007DC2                     STR_20:
   598                           
   599                           ; BSR set to: 1
   600  007DC2  43                 	db	67	;'C'
   601  007DC3  6F                 	db	111	;'o'
   602  007DC4  6E                 	db	110	;'n'
   603  007DC5  74                 	db	116	;'t'
   604  007DC6  72                 	db	114	;'r'
   605  007DC7  61                 	db	97	;'a'
   606  007DC8  73                 	db	115	;'s'
   607  007DC9  65                 	db	101	;'e'
   608  007DCA  6E                 	db	110	;'n'
   609  007DCB  61                 	db	97	;'a'
   610  007DCC  3A                 	db	58	;':'
   611  007DCD  20                 	db	32
   612  007DCE  20                 	db	32
   613  007DCF  20                 	db	32
   614  007DD0  20                 	db	32
   615  007DD1  20                 	db	32
   616  007DD2  0A                 	db	10
   617  007DD3  00                 	db	0
   618  007DD4                     STR_38:
   619                           
   620                           ; BSR set to: 1
   621  007DD4  41                 	db	65	;'A'
   622  007DD5  75                 	db	117	;'u'
   623  007DD6  74                 	db	116	;'t'
   624  007DD7  6F                 	db	111	;'o'
   625  007DD8  63                 	db	99	;'c'
   626  007DD9  61                 	db	97	;'a'
   627  007DDA  6C                 	db	108	;'l'
   628  007DDB  69                 	db	105	;'i'
   629  007DDC  62                 	db	98	;'b'
   630  007DDD  20                 	db	32
   631  007DDE  63                 	db	99	;'c'
   632  007DDF  6F                 	db	111	;'o'
   633  007DE0  6E                 	db	110	;'n'
   634  007DE1  20                 	db	32
   635  007DE2  20                 	db	32
   636  007DE3  20                 	db	32
   637  007DE4  0A                 	db	10
   638  007DE5  00                 	db	0
   639  007DE6                     STR_36:
   640                           
   641                           ; BSR set to: 1
   642  007DE6  20                 	db	32
   643  007DE7  20                 	db	32
   644  007DE8  20                 	db	32
   645  007DE9  45                 	db	69	;'E'
   646  007DEA  6E                 	db	110	;'n'
   647  007DEB  74                 	db	116	;'t'
   648  007DEC  65                 	db	101	;'e'
   649  007DED  72                 	db	114	;'r'
   650  007DEE  20                 	db	32
   651  007DEF  70                 	db	112	;'p'
   652  007DF0  61                 	db	97	;'a'
   653  007DF1  72                 	db	114	;'r'
   654  007DF2  61                 	db	97	;'a'
   655  007DF3  3A                 	db	58	;':'
   656  007DF4  20                 	db	32
   657  007DF5  20                 	db	32
   658  007DF6  0A                 	db	10
   659  007DF7  00                 	db	0
   660  007DF8                     STR_14:
   661                           
   662                           ; BSR set to: 1
   663  007DF8  56                 	db	86	;'V'
   664  007DF9  65                 	db	101	;'e'
   665  007DFA  6C                 	db	108	;'l'
   666  007DFB  6F                 	db	111	;'o'
   667  007DFC  63                 	db	99	;'c'
   668  007DFD  69                 	db	105	;'i'
   669  007DFE  64                 	db	100	;'d'
   670  007DFF  61                 	db	97	;'a'
   671  007E00  64                 	db	100	;'d'
   672  007E01  20                 	db	32
   673  007E02  4D                 	db	77	;'M'
   674  007E03  61                 	db	97	;'a'
   675  007E04  73                 	db	115	;'s'
   676  007E05  61                 	db	97	;'a'
   677  007E06  3A                 	db	58	;':'
   678  007E07  20                 	db	32
   679  007E08  0A                 	db	10
   680  007E09  00                 	db	0
   681  007E0A                     STR_7:
   682                           
   683                           ; BSR set to: 1
   684  007E0A  45                 	db	69	;'E'
   685  007E0B  73                 	db	115	;'s'
   686  007E0C  74                 	db	116	;'t'
   687  007E0D  61                 	db	97	;'a'
   688  007E0E  64                 	db	100	;'d'
   689  007E0F  6F                 	db	111	;'o'
   690  007E10  20                 	db	32
   691  007E11  70                 	db	112	;'p'
   692  007E12  72                 	db	114	;'r'
   693  007E13  6F                 	db	111	;'o'
   694  007E14  63                 	db	99	;'c'
   695  007E15  65                 	db	101	;'e'
   696  007E16  73                 	db	115	;'s'
   697  007E17  6F                 	db	111	;'o'
   698  007E18  3A                 	db	58	;':'
   699  007E19  20                 	db	32
   700  007E1A  0A                 	db	10
   701  007E1B  00                 	db	0
   702  007E1C                     STR_30:
   703                           
   704                           ; BSR set to: 1
   705  007E1C  53                 	db	83	;'S'
   706  007E1D  74                 	db	116	;'t'
   707  007E1E  6F                 	db	111	;'o'
   708  007E1F  70                 	db	112	;'p'
   709  007E20  20                 	db	32
   710  007E21  41                 	db	65	;'A'
   711  007E22  75                 	db	117	;'u'
   712  007E23  74                 	db	116	;'t'
   713  007E24  6F                 	db	111	;'o'
   714  007E25  43                 	db	67	;'C'
   715  007E26  61                 	db	97	;'a'
   716  007E27  6C                 	db	108	;'l'
   717  007E28  69                 	db	105	;'i'
   718  007E29  62                 	db	98	;'b'
   719  007E2A  3F                 	db	63	;'?'
   720  007E2B  20                 	db	32
   721  007E2C  0A                 	db	10
   722  007E2D  00                 	db	0
   723  007E2E                     STR_29:
   724                           
   725                           ; BSR set to: 1
   726  007E2E  49                 	db	73	;'I'
   727  007E2F  6E                 	db	110	;'n'
   728  007E30  69                 	db	105	;'i'
   729  007E31  74                 	db	116	;'t'
   730  007E32  20                 	db	32
   731  007E33  41                 	db	65	;'A'
   732  007E34  75                 	db	117	;'u'
   733  007E35  74                 	db	116	;'t'
   734  007E36  6F                 	db	111	;'o'
   735  007E37  43                 	db	67	;'C'
   736  007E38  61                 	db	97	;'a'
   737  007E39  6C                 	db	108	;'l'
   738  007E3A  69                 	db	105	;'i'
   739  007E3B  62                 	db	98	;'b'
   740  007E3C  3F                 	db	63	;'?'
   741  007E3D  20                 	db	32
   742  007E3E  0A                 	db	10
   743  007E3F  00                 	db	0
   744  007E40                     STR_28:
   745                           
   746                           ; BSR set to: 1
   747  007E40  47                 	db	71	;'G'
   748  007E41  75                 	db	117	;'u'
   749  007E42  61                 	db	97	;'a'
   750  007E43  72                 	db	114	;'r'
   751  007E44  64                 	db	100	;'d'
   752  007E45  61                 	db	97	;'a'
   753  007E46  72                 	db	114	;'r'
   754  007E47  20                 	db	32
   755  007E48  43                 	db	67	;'C'
   756  007E49  61                 	db	97	;'a'
   757  007E4A  6D                 	db	109	;'m'
   758  007E4B  62                 	db	98	;'b'
   759  007E4C  69                 	db	105	;'i'
   760  007E4D  6F                 	db	111	;'o'
   761  007E4E  3F                 	db	63	;'?'
   762  007E4F  20                 	db	32
   763  007E50  0A                 	db	10
   764  007E51  00                 	db	0
   765  007E52                     STR_10:
   766                           
   767                           ; BSR set to: 1
   768  007E52  56                 	db	86	;'V'
   769  007E53  61                 	db	97	;'a'
   770  007E54  6C                 	db	108	;'l'
   771  007E55  6F                 	db	111	;'o'
   772  007E56  72                 	db	114	;'r'
   773  007E57  20                 	db	32
   774  007E58  70                 	db	112	;'p'
   775  007E59  6F                 	db	111	;'o'
   776  007E5A  72                 	db	114	;'r'
   777  007E5B  20                 	db	32
   778  007E5C  43                 	db	67	;'C'
   779  007E5D  6F                 	db	111	;'o'
   780  007E5E  72                 	db	114	;'r'
   781  007E5F  74                 	db	116	;'t'
   782  007E60  65                 	db	101	;'e'
   783  007E61  3A                 	db	58	;':'
   784  007E62  0A                 	db	10
   785  007E63  00                 	db	0
   786  007E64                     STR_23:
   787                           
   788                           ; BSR set to: 1
   789  007E64  4D                 	db	77	;'M'
   790  007E65  6F                 	db	111	;'o'
   791  007E66  64                 	db	100	;'d'
   792  007E67  6F                 	db	111	;'o'
   793  007E68  20                 	db	32
   794  007E69  43                 	db	67	;'C'
   795  007E6A  6F                 	db	111	;'o'
   796  007E6B  6E                 	db	110	;'n'
   797  007E6C  66                 	db	102	;'f'
   798  007E6D  69                 	db	105	;'i'
   799  007E6E  67                 	db	103	;'g'
   800  007E6F  75                 	db	117	;'u'
   801  007E70  72                 	db	114	;'r'
   802  007E71  61                 	db	97	;'a'
   803  007E72  72                 	db	114	;'r'
   804  007E73  3A                 	db	58	;':'
   805  007E74  0A                 	db	10
   806  007E75  00                 	db	0
   807  007E76                     STR_12:
   808                           
   809                           ; BSR set to: 1
   810  007E76  43                 	db	67	;'C'
   811  007E77  61                 	db	97	;'a'
   812  007E78  6E                 	db	110	;'n'
   813  007E79  74                 	db	116	;'t'
   814  007E7A  69                 	db	105	;'i'
   815  007E7B  64                 	db	100	;'d'
   816  007E7C  61                 	db	97	;'a'
   817  007E7D  64                 	db	100	;'d'
   818  007E7E  20                 	db	32
   819  007E7F  43                 	db	67	;'C'
   820  007E80  6F                 	db	111	;'o'
   821  007E81  72                 	db	114	;'r'
   822  007E82  74                 	db	116	;'t'
   823  007E83  65                 	db	101	;'e'
   824  007E84  73                 	db	115	;'s'
   825  007E85  3A                 	db	58	;':'
   826  007E86  0A                 	db	10
   827  007E87  00                 	db	0
   828  007E88                     STR_26:
   829                           
   830                           ; BSR set to: 1
   831  007E88  49                 	db	73	;'I'
   832  007E89  6E                 	db	110	;'n'
   833  007E8A  69                 	db	105	;'i'
   834  007E8B  63                 	db	99	;'c'
   835  007E8C  69                 	db	105	;'i'
   836  007E8D  61                 	db	97	;'a'
   837  007E8E  72                 	db	114	;'r'
   838  007E8F  20                 	db	32
   839  007E90  50                 	db	80	;'P'
   840  007E91  72                 	db	114	;'r'
   841  007E92  6F                 	db	111	;'o'
   842  007E93  63                 	db	99	;'c'
   843  007E94  65                 	db	101	;'e'
   844  007E95  73                 	db	115	;'s'
   845  007E96  6F                 	db	111	;'o'
   846  007E97  3F                 	db	63	;'?'
   847  007E98  0A                 	db	10
   848  007E99  00                 	db	0
   849  007E9A                     STR_27:
   850                           
   851                           ; BSR set to: 1
   852  007E9A  44                 	db	68	;'D'
   853  007E9B  65                 	db	101	;'e'
   854  007E9C  74                 	db	116	;'t'
   855  007E9D  65                 	db	101	;'e'
   856  007E9E  6E                 	db	110	;'n'
   857  007E9F  65                 	db	101	;'e'
   858  007EA0  72                 	db	114	;'r'
   859  007EA1  20                 	db	32
   860  007EA2  50                 	db	80	;'P'
   861  007EA3  72                 	db	114	;'r'
   862  007EA4  6F                 	db	111	;'o'
   863  007EA5  63                 	db	99	;'c'
   864  007EA6  65                 	db	101	;'e'
   865  007EA7  73                 	db	115	;'s'
   866  007EA8  6F                 	db	111	;'o'
   867  007EA9  3F                 	db	63	;'?'
   868  007EAA  0A                 	db	10
   869  007EAB  00                 	db	0
   870  007EAC                     STR_40:
   871                           
   872                           ; BSR set to: 1
   873  007EAC  41                 	db	65	;'A'
   874  007EAD  75                 	db	117	;'u'
   875  007EAE  74                 	db	116	;'t'
   876  007EAF  6F                 	db	111	;'o'
   877  007EB0  63                 	db	99	;'c'
   878  007EB1  61                 	db	97	;'a'
   879  007EB2  6C                 	db	108	;'l'
   880  007EB3  69                 	db	105	;'i'
   881  007EB4  62                 	db	98	;'b'
   882  007EB5  20                 	db	32
   883  007EB6  75                 	db	117	;'u'
   884  007EB7  73                 	db	115	;'s'
   885  007EB8  61                 	db	97	;'a'
   886  007EB9  6E                 	db	110	;'n'
   887  007EBA  64                 	db	100	;'d'
   888  007EBB  6F                 	db	111	;'o'
   889  007EBC  0A                 	db	10
   890  007EBD  00                 	db	0
   891  007EBE                     STR_13:
   892                           
   893                           ; BSR set to: 1
   894  007EBE  20                 	db	32
   895  007EBF  20                 	db	32
   896  007EC0  20                 	db	32
   897  007EC1  20                 	db	32
   898  007EC2  20                 	db	32
   899  007EC3  20                 	db	32
   900  007EC4  25                 	db	37
   901  007EC5  64                 	db	100	;'d'
   902  007EC6  20                 	db	32
   903  007EC7  20                 	db	32
   904  007EC8  20                 	db	32
   905  007EC9  20                 	db	32
   906  007ECA  20                 	db	32
   907  007ECB  20                 	db	32
   908  007ECC  20                 	db	32
   909  007ECD  20                 	db	32
   910  007ECE  20                 	db	32
   911  007ECF  00                 	db	0
   912  007ED0                     STR_8:
   913                           
   914                           ; BSR set to: 1
   915  007ED0  20                 	db	32
   916  007ED1  20                 	db	32
   917  007ED2  20                 	db	32
   918  007ED3  25                 	db	37
   919  007ED4  64                 	db	100	;'d'
   920  007ED5  20                 	db	32
   921  007ED6  2F                 	db	47
   922  007ED7  20                 	db	32
   923  007ED8  25                 	db	37
   924  007ED9  64                 	db	100	;'d'
   925  007EDA  20                 	db	32
   926  007EDB  20                 	db	32
   927  007EDC  20                 	db	32
   928  007EDD  20                 	db	32
   929  007EDE  20                 	db	32
   930  007EDF  20                 	db	32
   931  007EE0  20                 	db	32
   932  007EE1  00                 	db	0
   933  007EE2                     STR_11:
   934                           
   935                           ; BSR set to: 1
   936  007EE2  20                 	db	32
   937  007EE3  20                 	db	32
   938  007EE4  20                 	db	32
   939  007EE5  25                 	db	37
   940  007EE6  33                 	db	51	;'3'
   941  007EE7  2E                 	db	46
   942  007EE8  33                 	db	51	;'3'
   943  007EE9  66                 	db	102	;'f'
   944  007EEA  20                 	db	32
   945  007EEB  6B                 	db	107	;'k'
   946  007EEC  67                 	db	103	;'g'
   947  007EED  20                 	db	32
   948  007EEE  20                 	db	32
   949  007EEF  20                 	db	32
   950  007EF0  20                 	db	32
   951  007EF1  20                 	db	32
   952  007EF2  20                 	db	32
   953  007EF3  00                 	db	0
   954  007EF4                     STR_1:
   955                           
   956                           ; BSR set to: 1
   957  007EF4  20                 	db	32
   958  007EF5  25                 	db	37
   959  007EF6  75                 	db	117	;'u'
   960  007EF7  25                 	db	37
   961  007EF8  75                 	db	117	;'u'
   962  007EF9  25                 	db	37
   963  007EFA  75                 	db	117	;'u'
   964  007EFB  2E                 	db	46
   965  007EFC  25                 	db	37
   966  007EFD  75                 	db	117	;'u'
   967  007EFE  25                 	db	37
   968  007EFF  75                 	db	117	;'u'
   969  007F00  25                 	db	37
   970  007F01  63                 	db	99	;'c'
   971  007F02  25                 	db	37
   972  007F03  75                 	db	117	;'u'
   973  007F04  20                 	db	32
   974  007F05  00                 	db	0
   975  007F06                     STR_2:
   976                           
   977                           ; BSR set to: 1
   978  007F06  20                 	db	32
   979  007F07  25                 	db	37
   980  007F08  75                 	db	117	;'u'
   981  007F09  25                 	db	37
   982  007F0A  75                 	db	117	;'u'
   983  007F0B  25                 	db	37
   984  007F0C  75                 	db	117	;'u'
   985  007F0D  2E                 	db	46
   986  007F0E  25                 	db	37
   987  007F0F  75                 	db	117	;'u'
   988  007F10  25                 	db	37
   989  007F11  63                 	db	99	;'c'
   990  007F12  25                 	db	37
   991  007F13  75                 	db	117	;'u'
   992  007F14  25                 	db	37
   993  007F15  75                 	db	117	;'u'
   994  007F16  20                 	db	32
   995  007F17  00                 	db	0
   996  007F18                     STR_4:
   997                           
   998                           ; BSR set to: 1
   999  007F18  20                 	db	32
  1000  007F19  25                 	db	37
  1001  007F1A  75                 	db	117	;'u'
  1002  007F1B  25                 	db	37
  1003  007F1C  75                 	db	117	;'u'
  1004  007F1D  25                 	db	37
  1005  007F1E  63                 	db	99	;'c'
  1006  007F1F  25                 	db	37
  1007  007F20  75                 	db	117	;'u'
  1008  007F21  2E                 	db	46
  1009  007F22  25                 	db	37
  1010  007F23  75                 	db	117	;'u'
  1011  007F24  25                 	db	37
  1012  007F25  75                 	db	117	;'u'
  1013  007F26  25                 	db	37
  1014  007F27  75                 	db	117	;'u'
  1015  007F28  20                 	db	32
  1016  007F29  00                 	db	0
  1017  007F2A                     STR_5:
  1018                           
  1019                           ; BSR set to: 1
  1020  007F2A  20                 	db	32
  1021  007F2B  25                 	db	37
  1022  007F2C  75                 	db	117	;'u'
  1023  007F2D  25                 	db	37
  1024  007F2E  63                 	db	99	;'c'
  1025  007F2F  25                 	db	37
  1026  007F30  75                 	db	117	;'u'
  1027  007F31  25                 	db	37
  1028  007F32  75                 	db	117	;'u'
  1029  007F33  2E                 	db	46
  1030  007F34  25                 	db	37
  1031  007F35  75                 	db	117	;'u'
  1032  007F36  25                 	db	37
  1033  007F37  75                 	db	117	;'u'
  1034  007F38  25                 	db	37
  1035  007F39  75                 	db	117	;'u'
  1036  007F3A  20                 	db	32
  1037  007F3B  00                 	db	0
  1038  007F3C                     STR_6:
  1039                           
  1040                           ; BSR set to: 1
  1041  007F3C  20                 	db	32
  1042  007F3D  25                 	db	37
  1043  007F3E  63                 	db	99	;'c'
  1044  007F3F  25                 	db	37
  1045  007F40  75                 	db	117	;'u'
  1046  007F41  25                 	db	37
  1047  007F42  75                 	db	117	;'u'
  1048  007F43  25                 	db	37
  1049  007F44  75                 	db	117	;'u'
  1050  007F45  2E                 	db	46
  1051  007F46  25                 	db	37
  1052  007F47  75                 	db	117	;'u'
  1053  007F48  25                 	db	37
  1054  007F49  75                 	db	117	;'u'
  1055  007F4A  25                 	db	37
  1056  007F4B  75                 	db	117	;'u'
  1057  007F4C  20                 	db	32
  1058  007F4D  00                 	db	0
  1059  007F4E                     STR_3:
  1060                           
  1061                           ; BSR set to: 1
  1062  007F4E  20                 	db	32
  1063  007F4F  25                 	db	37
  1064  007F50  75                 	db	117	;'u'
  1065  007F51  25                 	db	37
  1066  007F52  75                 	db	117	;'u'
  1067  007F53  25                 	db	37
  1068  007F54  75                 	db	117	;'u'
  1069  007F55  2E                 	db	46
  1070  007F56  25                 	db	37
  1071  007F57  63                 	db	99	;'c'
  1072  007F58  25                 	db	37
  1073  007F59  75                 	db	117	;'u'
  1074  007F5A  25                 	db	37
  1075  007F5B  75                 	db	117	;'u'
  1076  007F5C  25                 	db	37
  1077  007F5D  75                 	db	117	;'u'
  1078  007F5E  20                 	db	32
  1079  007F5F  00                 	db	0
  1080  007F60                     STR_41:
  1081                           
  1082                           ; BSR set to: 1
  1083  007F60  20                 	db	32
  1084  007F61  20                 	db	32
  1085  007F62  20                 	db	32
  1086  007F63  20                 	db	32
  1087  007F64  20                 	db	32
  1088  007F65  30                 	db	48	;'0'
  1089  007F66  2E                 	db	46
  1090  007F67  35                 	db	53	;'5'
  1091  007F68  20                 	db	32
  1092  007F69  6B                 	db	107	;'k'
  1093  007F6A  67                 	db	103	;'g'
  1094  007F6B  20                 	db	32
  1095  007F6C  20                 	db	32
  1096  007F6D  20                 	db	32
  1097  007F6E  20                 	db	32
  1098  007F6F  20                 	db	32
  1099  007F70  00                 	db	0
  1100  007F71                     STR_43:
  1101                           
  1102                           ; BSR set to: 1
  1103  007F71  20                 	db	32
  1104  007F72  20                 	db	32
  1105  007F73  20                 	db	32
  1106  007F74  20                 	db	32
  1107  007F75  30                 	db	48	;'0'
  1108  007F76  2E                 	db	46
  1109  007F77  32                 	db	50	;'2'
  1110  007F78  35                 	db	53	;'5'
  1111  007F79  20                 	db	32
  1112  007F7A  6B                 	db	107	;'k'
  1113  007F7B  67                 	db	103	;'g'
  1114  007F7C  20                 	db	32
  1115  007F7D  20                 	db	32
  1116  007F7E  20                 	db	32
  1117  007F7F  20                 	db	32
  1118  007F80  20                 	db	32
  1119  007F81  00                 	db	0
  1120  007F82                     STR_22:
  1121                           
  1122                           ; BSR set to: 1
  1123  007F82  20                 	db	32
  1124  007F83  20                 	db	32
  1125  007F84  20                 	db	32
  1126  007F85  20                 	db	32
  1127  007F86  20                 	db	32
  1128  007F87  45                 	db	69	;'E'
  1129  007F88  72                 	db	114	;'r'
  1130  007F89  72                 	db	114	;'r'
  1131  007F8A  6F                 	db	111	;'o'
  1132  007F8B  6E                 	db	110	;'n'
  1133  007F8C  65                 	db	101	;'e'
  1134  007F8D  61                 	db	97	;'a'
  1135  007F8E  20                 	db	32
  1136  007F8F  20                 	db	32
  1137  007F90  20                 	db	32
  1138  007F91  20                 	db	32
  1139  007F92  00                 	db	0
  1140  007F93                     STR_24:
  1141                           
  1142                           ; BSR set to: 1
  1143  007F93  20                 	db	32
  1144  007F94  20                 	db	32
  1145  007F95  20                 	db	32
  1146  007F96  20                 	db	32
  1147  007F97  49                 	db	73	;'I'
  1148  007F98  6E                 	db	110	;'n'
  1149  007F99  69                 	db	105	;'i'
  1150  007F9A  63                 	db	99	;'c'
  1151  007F9B  69                 	db	105	;'i'
  1152  007F9C  61                 	db	97	;'a'
  1153  007F9D  64                 	db	100	;'d'
  1154  007F9E  6F                 	db	111	;'o'
  1155  007F9F  20                 	db	32
  1156  007FA0  20                 	db	32
  1157  007FA1  20                 	db	32
  1158  007FA2  20                 	db	32
  1159  007FA3  00                 	db	0
  1160  007FA4                     STR_25:
  1161                           
  1162                           ; BSR set to: 1
  1163  007FA4  20                 	db	32
  1164  007FA5  20                 	db	32
  1165  007FA6  20                 	db	32
  1166  007FA7  46                 	db	70	;'F'
  1167  007FA8  69                 	db	105	;'i'
  1168  007FA9  6E                 	db	110	;'n'
  1169  007FAA  61                 	db	97	;'a'
  1170  007FAB  6C                 	db	108	;'l'
  1171  007FAC  69                 	db	105	;'i'
  1172  007FAD  7A                 	db	122	;'z'
  1173  007FAE  61                 	db	97	;'a'
  1174  007FAF  64                 	db	100	;'d'
  1175  007FB0  6F                 	db	111	;'o'
  1176  007FB1  20                 	db	32
  1177  007FB2  20                 	db	32
  1178  007FB3  20                 	db	32
  1179  007FB4  00                 	db	0
  1180  007FB5                     STR_35:
  1181                           
  1182                           ; BSR set to: 1
  1183  007FB5  20                 	db	32
  1184  007FB6  20                 	db	32
  1185  007FB7  20                 	db	32
  1186  007FB8  20                 	db	32
  1187  007FB9  20                 	db	32
  1188  007FBA  20                 	db	32
  1189  007FBB  54                 	db	84	;'T'
  1190  007FBC  72                 	db	114	;'r'
  1191  007FBD  61                 	db	97	;'a'
  1192  007FBE  6E                 	db	110	;'n'
  1193  007FBF  63                 	db	99	;'c'
  1194  007FC0  61                 	db	97	;'a'
  1195  007FC1  64                 	db	100	;'d'
  1196  007FC2  61                 	db	97	;'a'
  1197  007FC3  20                 	db	32
  1198  007FC4  20                 	db	32
  1199  007FC5  00                 	db	0
  1200  007FC6                     STR_39:
  1201                           
  1202                           ; BSR set to: 1
  1203  007FC6  43                 	db	67	;'C'
  1204  007FC7  6F                 	db	111	;'o'
  1205  007FC8  72                 	db	114	;'r'
  1206  007FC9  74                 	db	116	;'t'
  1207  007FCA  65                 	db	101	;'e'
  1208  007FCB  20                 	db	32
  1209  007FCC  72                 	db	114	;'r'
  1210  007FCD  65                 	db	101	;'e'
  1211  007FCE  66                 	db	102	;'f'
  1212  007FCF  65                 	db	101	;'e'
  1213  007FD0  72                 	db	114	;'r'
  1214  007FD1  65                 	db	101	;'e'
  1215  007FD2  6E                 	db	110	;'n'
  1216  007FD3  63                 	db	99	;'c'
  1217  007FD4  69                 	db	105	;'i'
  1218  007FD5  61                 	db	97	;'a'
  1219  007FD6  00                 	db	0
  1220  007FD7                     STR_37:
  1221                           
  1222                           ; BSR set to: 1
  1223  007FD7  45                 	db	69	;'E'
  1224  007FD8  6D                 	db	109	;'m'
  1225  007FD9  70                 	db	112	;'p'
  1226  007FDA  65                 	db	101	;'e'
  1227  007FDB  7A                 	db	122	;'z'
  1228  007FDC  61                 	db	97	;'a'
  1229  007FDD  72                 	db	114	;'r'
  1230  007FDE  20                 	db	32
  1231  007FDF  61                 	db	97	;'a'
  1232  007FE0  20                 	db	32
  1233  007FE1  63                 	db	99	;'c'
  1234  007FE2  6F                 	db	111	;'o'
  1235  007FE3  72                 	db	114	;'r'
  1236  007FE4  74                 	db	116	;'t'
  1237  007FE5  61                 	db	97	;'a'
  1238  007FE6  72                 	db	114	;'r'
  1239  007FE7  00                 	db	0
  1240  007FE8                     STR_19:
  1241                           
  1242                           ; BSR set to: 1
  1243  007FE8  20                 	db	32
  1244  007FE9  20                 	db	32
  1245  007FEA  20                 	db	32
  1246  007FEB  20                 	db	32
  1247  007FEC  20                 	db	32
  1248  007FED  20                 	db	32
  1249  007FEE  25                 	db	37
  1250  007FEF  64                 	db	100	;'d'
  1251  007FF0  20                 	db	32
  1252  007FF1  20                 	db	32
  1253  007FF2  20                 	db	32
  1254  007FF3  20                 	db	32
  1255  007FF4  20                 	db	32
  1256  007FF5  20                 	db	32
  1257  007FF6  20                 	db	32
  1258  007FF7  00                 	db	0
  1259  007FF8                     STR_17:
  1260                           
  1261                           ; BSR set to: 1
  1262  007FF8  6B                 	db	107	;'k'
  1263  007FF9  67                 	db	103	;'g'
  1264  007FFA  20                 	db	32
  1265  007FFB  20                 	db	32
  1266  007FFC  20                 	db	32
  1267  007FFD  20                 	db	32
  1268  007FFE  00                 	db	0
  1269  0000                     
  1270                           ; #config settings
  1271  007FFF  00                 	db	0	; dummy byte at the end
  1272  0000                     
  1273                           	psect	cinit
  1274  006030                     __pcinit:
  1275                           	opt stack 0
  1276  006030                     start_initialization:
  1277                           	opt stack 0
  1278  006030                     __initialization:
  1279                           	opt stack 0
  1280                           
  1281                           ; Initialize objects allocated to BANK1 (44 bytes)
  1282                           ; load TBLPTR registers with __pidataBANK1
  1283  006030  0E3C               	movlw	low __pidataBANK1
  1284  006032  6EF6               	movwf	tblptrl,c
  1285  006034  0E71               	movlw	high __pidataBANK1
  1286  006036  6EF7               	movwf	tblptrh,c
  1287  006038  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1288  00603A  6EF8               	movwf	tblptru,c
  1289  00603C  EE01  F077         	lfsr	0,__pdataBANK1
  1290  006040  EE10 F02C          	lfsr	1,44
  1291  006044                     copy_data0:
  1292  006044  0009               	tblrd		*+
  1293  006046  CFF5 FFEE          	movff	tablat,postinc0
  1294  00604A  50E5               	movf	postdec1,w,c
  1295  00604C  50E1               	movf	fsr1l,w,c
  1296  00604E  E1FA               	bnz	copy_data0
  1297                           
  1298                           ; Initialize objects allocated to BANK0 (16 bytes)
  1299                           ; load TBLPTR registers with __pidataBANK0
  1300  006050  0E2F               	movlw	low __pidataBANK0
  1301  006052  6EF6               	movwf	tblptrl,c
  1302  006054  0E73               	movlw	high __pidataBANK0
  1303  006056  6EF7               	movwf	tblptrh,c
  1304  006058  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1305  00605A  6EF8               	movwf	tblptru,c
  1306  00605C  EE00  F0C9         	lfsr	0,__pdataBANK0
  1307  006060  EE10 F010          	lfsr	1,16
  1308  006064                     copy_data1:
  1309  006064  0009               	tblrd		*+
  1310  006066  CFF5 FFEE          	movff	tablat,postinc0
  1311  00606A  50E5               	movf	postdec1,w,c
  1312  00606C  50E1               	movf	fsr1l,w,c
  1313  00606E  E1FA               	bnz	copy_data1
  1314                           
  1315                           ; Initialize objects allocated to COMRAM (17 bytes)
  1316                           ; load TBLPTR registers with __pidataCOMRAM
  1317  006070  0E1E               	movlw	low __pidataCOMRAM
  1318  006072  6EF6               	movwf	tblptrl,c
  1319  006074  0E73               	movlw	high __pidataCOMRAM
  1320  006076  6EF7               	movwf	tblptrh,c
  1321  006078  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1322  00607A  6EF8               	movwf	tblptru,c
  1323  00607C  EE00  F04B         	lfsr	0,__pdataCOMRAM
  1324  006080  EE10 F011          	lfsr	1,17
  1325  006084                     copy_data2:
  1326  006084  0009               	tblrd		*+
  1327  006086  CFF5 FFEE          	movff	tablat,postinc0
  1328  00608A  50E5               	movf	postdec1,w,c
  1329  00608C  50E1               	movf	fsr1l,w,c
  1330  00608E  E1FA               	bnz	copy_data2
  1331                           
  1332                           ; Clear objects allocated to BANK1 (29 bytes)
  1333  006090  EE01  F0A3         	lfsr	0,__pbssBANK1
  1334  006094  0E1D               	movlw	29
  1335  006096                     clear_0:
  1336  006096  6AEE               	clrf	postinc0,c
  1337  006098  06E8               	decf	wreg,f,c
  1338  00609A  E1FD               	bnz	clear_0
  1339                           
  1340                           ; Clear objects allocated to BANK0 (36 bytes)
  1341  00609C  EE00  F0A5         	lfsr	0,__pbssBANK0
  1342  0060A0  0E24               	movlw	36
  1343  0060A2                     clear_1:
  1344  0060A2  6AEE               	clrf	postinc0,c
  1345  0060A4  06E8               	decf	wreg,f,c
  1346  0060A6  E1FD               	bnz	clear_1
  1347                           
  1348                           ; Clear objects allocated to COMRAM (20 bytes)
  1349  0060A8  EE00  F037         	lfsr	0,__pbssCOMRAM
  1350  0060AC  0E14               	movlw	20
  1351  0060AE                     clear_2:
  1352  0060AE  6AEE               	clrf	postinc0,c
  1353  0060B0  06E8               	decf	wreg,f,c
  1354  0060B2  E1FD               	bnz	clear_2
  1355  0060B4                     end_of_initialization:
  1356                           	opt stack 0
  1357  0060B4                     __end_of__initialization:
  1358                           	opt stack 0
  1359  0060B4  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1360  0060B6  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1361  0060B8  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1362  0060BA  6EF8               	movwf	tblptru,c
  1363  0060BC  0100               	movlb	0
  1364  0060BE  EFF2  F036         	goto	_main	;jump to C main() function
  1365                           tblptru	equ	0xFF8
  1366                           tblptrh	equ	0xFF7
  1367                           tblptrl	equ	0xFF6
  1368                           tablat	equ	0xFF5
  1369                           postinc0	equ	0xFEE
  1370                           wreg	equ	0xFE8
  1371                           postdec1	equ	0xFE5
  1372                           fsr1l	equ	0xFE1
  1373                           
  1374                           	psect	bssCOMRAM
  1375  000037                     __pbssCOMRAM:
  1376                           	opt stack 0
  1377  000037                     _securTimer:
  1378                           	opt stack 0
  1379  000037                     	ds	4
  1380  00003B                     _processTimer:
  1381                           	opt stack 0
  1382  00003B                     	ds	4
  1383  00003F                     _questKMT:
  1384                           	opt stack 0
  1385  00003F                     	ds	3
  1386  000042                     _calFactor:
  1387                           	opt stack 0
  1388  000042                     	ds	3
  1389  000045                     _FC2securLock:
  1390                           	opt stack 0
  1391  000045                     	ds	1
  1392  000046                     _FC1securLock:
  1393                           	opt stack 0
  1394  000046                     	ds	1
  1395  000047                     _screen_calibVelRes:
  1396                           	opt stack 0
  1397  000047                     	ds	1
  1398  000048                     _selKMT:
  1399                           	opt stack 0
  1400  000048                     	ds	1
  1401  000049                     _DOWNisLP:
  1402                           	opt stack 0
  1403  000049                     	ds	1
  1404  00004A                     _UPisLP:
  1405                           	opt stack 0
  1406  00004A                     	ds	1
  1407                           tblptru	equ	0xFF8
  1408                           tblptrh	equ	0xFF7
  1409                           tblptrl	equ	0xFF6
  1410                           tablat	equ	0xFF5
  1411                           postinc0	equ	0xFEE
  1412                           wreg	equ	0xFE8
  1413                           postdec1	equ	0xFE5
  1414                           fsr1l	equ	0xFE1
  1415                           
  1416                           	psect	dataCOMRAM
  1417  00004B                     __pdataCOMRAM:
  1418                           	opt stack 0
  1419  00004B                     _timeDOWN:
  1420                           	opt stack 0
  1421  00004B                     	ds	4
  1422  00004F                     _maxTimePerCut:
  1423                           	opt stack 0
  1424  00004F                     	ds	4
  1425  000053                     _timsXcorte:
  1426                           	opt stack 0
  1427  000053                     	ds	3
  1428  000056                     _tempkgXcorte:
  1429                           	opt stack 0
  1430  000056                     	ds	3
  1431  000059                     _pi:
  1432                           	opt stack 0
  1433  000059                     	ds	3
  1434                           tblptru	equ	0xFF8
  1435                           tblptrh	equ	0xFF7
  1436                           tblptrl	equ	0xFF6
  1437                           tablat	equ	0xFF5
  1438                           postinc0	equ	0xFEE
  1439                           wreg	equ	0xFE8
  1440                           postdec1	equ	0xFE5
  1441                           fsr1l	equ	0xFE1
  1442                           
  1443                           	psect	bssBANK0
  1444  0000A5                     __pbssBANK0:
  1445                           	opt stack 0
  1446  0000A5                     _chanValChar:
  1447                           	opt stack 0
  1448  0000A5                     	ds	6
  1449  0000AB                     _contra:
  1450                           	opt stack 0
  1451  0000AB                     	ds	4
  1452  0000AF                     _fData:
  1453                           	opt stack 0
  1454  0000AF                     	ds	3
  1455  0000B2                     _processState:
  1456                           	opt stack 0
  1457  0000B2                     	ds	2
  1458  0000B4                     _i16Data:
  1459                           	opt stack 0
  1460  0000B4                     	ds	2
  1461  0000B6                     _holdFC2cont:
  1462                           	opt stack 0
  1463  0000B6                     	ds	1
  1464  0000B7                     _lastSttFC2:
  1465                           	opt stack 0
  1466  0000B7                     	ds	1
  1467  0000B8                     _holdFC1cont:
  1468                           	opt stack 0
  1469  0000B8                     	ds	1
  1470  0000B9                     _lastSttFC1:
  1471                           	opt stack 0
  1472  0000B9                     	ds	1
  1473  0000BA                     _t2Cont2:
  1474                           	opt stack 0
  1475  0000BA                     	ds	1
  1476  0000BB                     _t2Cont1:
  1477                           	opt stack 0
  1478  0000BB                     	ds	1
  1479  0000BC                     _tempLastScreen:
  1480                           	opt stack 0
  1481  0000BC                     	ds	1
  1482  0000BD                     _ie:
  1483                           	opt stack 0
  1484  0000BD                     	ds	1
  1485  0000BE                     _calibMode:
  1486                           	opt stack 0
  1487  0000BE                     	ds	1
  1488  0000BF                     _ready2Cut:
  1489                           	opt stack 0
  1490  0000BF                     	ds	1
  1491  0000C0                     _processStarted:
  1492                           	opt stack 0
  1493  0000C0                     	ds	1
  1494  0000C1                     _ENTERsecurLock:
  1495                           	opt stack 0
  1496  0000C1                     	ds	1
  1497  0000C2                     _RETROsecurLock:
  1498                           	opt stack 0
  1499  0000C2                     	ds	1
  1500  0000C3                     _DOWNsecurLock:
  1501                           	opt stack 0
  1502  0000C3                     	ds	1
  1503  0000C4                     _UPsecurLock:
  1504                           	opt stack 0
  1505  0000C4                     	ds	1
  1506  0000C5                     _RETROisLP:
  1507                           	opt stack 0
  1508  0000C5                     	ds	1
  1509  0000C6                     _holdENTERcont:
  1510                           	opt stack 0
  1511  0000C6                     	ds	1
  1512  0000C7                     _holdRETROcont:
  1513                           	opt stack 0
  1514  0000C7                     	ds	1
  1515  0000C8                     _holdDOWNcont:
  1516                           	opt stack 0
  1517  0000C8                     	ds	1
  1518                           tblptru	equ	0xFF8
  1519                           tblptrh	equ	0xFF7
  1520                           tblptrl	equ	0xFF6
  1521                           tablat	equ	0xFF5
  1522                           postinc0	equ	0xFEE
  1523                           wreg	equ	0xFE8
  1524                           postdec1	equ	0xFE5
  1525                           fsr1l	equ	0xFE1
  1526                           
  1527                           	psect	dataBANK0
  1528  0000C9                     __pdataBANK0:
  1529                           	opt stack 0
  1530  0000C9                     lcd_init@F6841:
  1531                           	opt stack 0
  1532  0000C9                     	ds	4
  1533  0000CD                     _temptiXcorte:
  1534                           	opt stack 0
  1535  0000CD                     	ds	3
  1536  0000D0                     _tempNumCortes:
  1537                           	opt stack 0
  1538  0000D0                     	ds	2
  1539  0000D2                     _numCortes:
  1540                           	opt stack 0
  1541  0000D2                     	ds	2
  1542  0000D4                     _bladeIsUP:
  1543                           	opt stack 0
  1544  0000D4                     	ds	1
  1545  0000D5                     _lastSttENTER:
  1546                           	opt stack 0
  1547  0000D5                     	ds	1
  1548  0000D6                     _lastSttRETRO:
  1549                           	opt stack 0
  1550  0000D6                     	ds	1
  1551  0000D7                     _lastSttDOWN:
  1552                           	opt stack 0
  1553  0000D7                     	ds	1
  1554  0000D8                     _lastSttUP:
  1555                           	opt stack 0
  1556  0000D8                     	ds	1
  1557                           tblptru	equ	0xFF8
  1558                           tblptrh	equ	0xFF7
  1559                           tblptrl	equ	0xFF6
  1560                           tablat	equ	0xFF5
  1561                           postinc0	equ	0xFEE
  1562                           wreg	equ	0xFE8
  1563                           postdec1	equ	0xFE5
  1564                           fsr1l	equ	0xFE1
  1565                           
  1566                           	psect	bssBANK1
  1567  0001A3                     __pbssBANK1:
  1568                           	opt stack 0
  1569  0001A3                     _chanValdig:
  1570                           	opt stack 0
  1571  0001A3                     	ds	6
  1572  0001A9                     _passChar:
  1573                           	opt stack 0
  1574  0001A9                     	ds	4
  1575  0001AD                     _introducido:
  1576                           	opt stack 0
  1577  0001AD                     	ds	4
  1578  0001B1                     _chanValf:
  1579                           	opt stack 0
  1580  0001B1                     	ds	3
  1581  0001B4                     _questSN:
  1582                           	opt stack 0
  1583  0001B4                     	ds	2
  1584  0001B6                     _chanVals:
  1585                           	opt stack 0
  1586  0001B6                     	ds	2
  1587  0001B8                     _calibLevel:
  1588                           	opt stack 0
  1589  0001B8                     	ds	1
  1590  0001B9                     _fd:
  1591                           	opt stack 0
  1592  0001B9                     	ds	1
  1593  0001BA                     _selSN:
  1594                           	opt stack 0
  1595  0001BA                     	ds	1
  1596  0001BB                     _passSection:
  1597                           	opt stack 0
  1598  0001BB                     	ds	1
  1599  0001BC                     _menuSection:
  1600                           	opt stack 0
  1601  0001BC                     	ds	1
  1602  0001BD                     _actualScreen:
  1603                           	opt stack 0
  1604  0001BD                     	ds	1
  1605  0001BE                     _ENTERisLP:
  1606                           	opt stack 0
  1607  0001BE                     	ds	1
  1608  0001BF                     _holdUPcont:
  1609                           	opt stack 0
  1610  0001BF                     	ds	1
  1611                           tblptru	equ	0xFF8
  1612                           tblptrh	equ	0xFF7
  1613                           tblptrl	equ	0xFF6
  1614                           tablat	equ	0xFF5
  1615                           postinc0	equ	0xFEE
  1616                           wreg	equ	0xFE8
  1617                           postdec1	equ	0xFE5
  1618                           fsr1l	equ	0xFE1
  1619                           
  1620                           	psect	dataBANK1
  1621  000177                     __pdataBANK1:
  1622                           	opt stack 0
  1623  000177                     _exp10:
  1624                           	opt stack 0
  1625  000177                     	ds	24
  1626  00018F                     _velocidadMasa:
  1627                           	opt stack 0
  1628  00018F                     	ds	3
  1629  000192                     _tempVelocidadMasa3:
  1630                           	opt stack 0
  1631  000192                     	ds	3
  1632  000195                     _tiXcorte:
  1633                           	opt stack 0
  1634  000195                     	ds	3
  1635  000198                     _kgXcorte:
  1636                           	opt stack 0
  1637  000198                     	ds	3
  1638  00019B                     _flech:
  1639                           	opt stack 0
  1640  00019B                     	ds	1
  1641  00019C                     _chanValSection:
  1642                           	opt stack 0
  1643  00019C                     	ds	1
  1644  00019D                     _tempVelocidadMasa2:
  1645                           	opt stack 0
  1646  00019D                     	ds	3
  1647  0001A0                     _tempVelocidadMasa1:
  1648                           	opt stack 0
  1649  0001A0                     	ds	3
  1650                           tblptru	equ	0xFF8
  1651                           tblptrh	equ	0xFF7
  1652                           tblptrl	equ	0xFF6
  1653                           tablat	equ	0xFF5
  1654                           postinc0	equ	0xFEE
  1655                           wreg	equ	0xFE8
  1656                           postdec1	equ	0xFE5
  1657                           fsr1l	equ	0xFE1
  1658                           
  1659                           	psect	cstackBANK1
  1660  000100                     __pcstackBANK1:
  1661                           	opt stack 0
  1662  000100                     ??_isdigit:
  1663  000100                     ??_lcd_read_4bits:
  1664  000100                     ??_checkPass:
  1665  000100                     ??_chanValDigUP:
  1666  000100                     ??_chanValDigDOWN:
  1667  000100                     ?___awmod:
  1668                           	opt stack 0
  1669  000100                     ?___ftpack:
  1670                           	opt stack 0
  1671  000100                     ?___ftneg:
  1672                           	opt stack 0
  1673  000100                     ?__tdiv_to_l_:
  1674                           	opt stack 0
  1675  000100                     ?__div_to_l_:
  1676                           	opt stack 0
  1677  000100                     ?___lmul:
  1678                           	opt stack 0
  1679  000100                     ?___aldiv:
  1680                           	opt stack 0
  1681  000100                     ?___lldiv:
  1682                           	opt stack 0
  1683  000100                     _lcd_send_4bits$1496:
  1684                           	opt stack 0
  1685  000100                     putchUART@val:
  1686                           	opt stack 0
  1687  000100                     writeEEPROM@data:
  1688                           	opt stack 0
  1689  000100                     readEEPROM@adr:
  1690                           	opt stack 0
  1691  000100                     setPWM2on@on:
  1692                           	opt stack 0
  1693  000100                     delay_ms@del:
  1694                           	opt stack 0
  1695  000100                     setPWM2duty@actuator:
  1696                           	opt stack 0
  1697  000100                     ___awmod@dividend:
  1698                           	opt stack 0
  1699  000100                     __div_to_l_@f1:
  1700                           	opt stack 0
  1701  000100                     ___ftpack@arg:
  1702                           	opt stack 0
  1703  000100                     __tdiv_to_l_@f1:
  1704                           	opt stack 0
  1705  000100                     ___ftge@ff1:
  1706                           	opt stack 0
  1707  000100                     ___ftneg@f1:
  1708                           	opt stack 0
  1709  000100                     ___lmul@multiplier:
  1710                           	opt stack 0
  1711  000100                     ___aldiv@dividend:
  1712                           	opt stack 0
  1713  000100                     ___lldiv@dividend:
  1714                           	opt stack 0
  1715                           
  1716                           ; 4 bytes @ 0x0
  1717  000100                     	ds	1
  1718  000101                     lcd_read_4bits@n:
  1719                           	opt stack 0
  1720  000101                     _lcd_send_4bits$1497:
  1721                           	opt stack 0
  1722  000101                     writeEEPROM@adr:
  1723                           	opt stack 0
  1724  000101                     _isdigit$2320:
  1725                           	opt stack 0
  1726                           
  1727                           ; 1 bytes @ 0x1
  1728  000101                     	ds	1
  1729  000102                     ??_delay_ms:
  1730  000102                     ??_setPWM2duty:
  1731  000102                     lcd_read_byte@low:
  1732                           	opt stack 0
  1733  000102                     _lcd_send_4bits$1498:
  1734                           	opt stack 0
  1735  000102                     isdigit@c:
  1736                           	opt stack 0
  1737  000102                     ___awmod@divisor:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x2
  1741  000102                     	ds	1
  1742  000103                     lcd_read_byte@high:
  1743                           	opt stack 0
  1744  000103                     _lcd_send_4bits$1499:
  1745                           	opt stack 0
  1746  000103                     ___ftpack@exp:
  1747                           	opt stack 0
  1748  000103                     delay_ms@i:
  1749                           	opt stack 0
  1750  000103                     __div_to_l_@f2:
  1751                           	opt stack 0
  1752  000103                     __tdiv_to_l_@f2:
  1753                           	opt stack 0
  1754  000103                     ___ftge@ff2:
  1755                           	opt stack 0
  1756                           
  1757                           ; 3 bytes @ 0x3
  1758  000103                     	ds	1
  1759  000104                     lcd_send_4bits@n:
  1760                           	opt stack 0
  1761  000104                     checkPass@passOK:
  1762                           	opt stack 0
  1763  000104                     ___awmod@counter:
  1764                           	opt stack 0
  1765  000104                     ___ftpack@sign:
  1766                           	opt stack 0
  1767  000104                     setPWM2duty@act:
  1768                           	opt stack 0
  1769  000104                     ___lmul@multiplicand:
  1770                           	opt stack 0
  1771  000104                     ___aldiv@divisor:
  1772                           	opt stack 0
  1773  000104                     ___lldiv@divisor:
  1774                           	opt stack 0
  1775                           
  1776                           ; 4 bytes @ 0x4
  1777  000104                     	ds	1
  1778  000105                     ??___ftpack:
  1779  000105                     lcd_send_byte@n:
  1780                           	opt stack 0
  1781  000105                     ___awmod@sign:
  1782                           	opt stack 0
  1783  000105                     checkPass@i:
  1784                           	opt stack 0
  1785                           
  1786                           ; 2 bytes @ 0x5
  1787  000105                     	ds	1
  1788  000106                     ??__tdiv_to_l_:
  1789  000106                     ??_lcd_send_byte:
  1790  000106                     ??___ftge:
  1791  000106                     ?___awdiv:
  1792                           	opt stack 0
  1793  000106                     initProtocoll@init:
  1794                           	opt stack 0
  1795  000106                     ___awdiv@dividend:
  1796                           	opt stack 0
  1797  000106                     __div_to_l_@quot:
  1798                           	opt stack 0
  1799                           
  1800                           ; 4 bytes @ 0x6
  1801  000106                     	ds	1
  1802  000107                     lcd_send_byte@address:
  1803                           	opt stack 0
  1804                           
  1805                           ; 1 bytes @ 0x7
  1806  000107                     	ds	1
  1807  000108                     ??_lcd_init:
  1808  000108                     ?___altoft:
  1809                           	opt stack 0
  1810  000108                     ?___lltoft:
  1811                           	opt stack 0
  1812  000108                     lcd_gotoxy@fila:
  1813                           	opt stack 0
  1814  000108                     ___aldiv@counter:
  1815                           	opt stack 0
  1816  000108                     ___awdiv@divisor:
  1817                           	opt stack 0
  1818  000108                     ___lmul@product:
  1819                           	opt stack 0
  1820  000108                     ___altoft@c:
  1821                           	opt stack 0
  1822  000108                     ___lldiv@quotient:
  1823                           	opt stack 0
  1824  000108                     ___lltoft@c:
  1825                           	opt stack 0
  1826                           
  1827                           ; 4 bytes @ 0x8
  1828  000108                     	ds	1
  1829  000109                     lcd_gotoxy@pos:
  1830                           	opt stack 0
  1831  000109                     ___aldiv@sign:
  1832                           	opt stack 0
  1833  000109                     lcd_init@LCD_INIT_STRING:
  1834                           	opt stack 0
  1835  000109                     __tdiv_to_l_@quot:
  1836                           	opt stack 0
  1837                           
  1838                           ; 4 bytes @ 0x9
  1839  000109                     	ds	1
  1840  00010A                     lcd_gotoxy@address:
  1841                           	opt stack 0
  1842  00010A                     ___awdiv@counter:
  1843                           	opt stack 0
  1844  00010A                     __div_to_l_@cntr:
  1845                           	opt stack 0
  1846  00010A                     ___aldiv@quotient:
  1847                           	opt stack 0
  1848                           
  1849                           ; 4 bytes @ 0xA
  1850  00010A                     	ds	1
  1851  00010B                     ??_lcd_putc:
  1852  00010B                     ___awdiv@sign:
  1853                           	opt stack 0
  1854  00010B                     __div_to_l_@exp1:
  1855                           	opt stack 0
  1856                           
  1857                           ; 1 bytes @ 0xB
  1858  00010B                     	ds	1
  1859  00010C                     ??___altoft:
  1860  00010C                     ??___lltoft:
  1861  00010C                     lcd_putc@cha:
  1862                           	opt stack 0
  1863  00010C                     ___lldiv@counter:
  1864                           	opt stack 0
  1865  00010C                     ___awdiv@quotient:
  1866                           	opt stack 0
  1867                           
  1868                           ; 2 bytes @ 0xC
  1869  00010C                     	ds	1
  1870  00010D                     ?___llmod:
  1871                           	opt stack 0
  1872  00010D                     lcd_init@i:
  1873                           	opt stack 0
  1874  00010D                     putch@val:
  1875                           	opt stack 0
  1876  00010D                     __tdiv_to_l_@cntr:
  1877                           	opt stack 0
  1878  00010D                     ___llmod@dividend:
  1879                           	opt stack 0
  1880                           
  1881                           ; 4 bytes @ 0xD
  1882  00010D                     	ds	1
  1883  00010E                     ?___wmul:
  1884                           	opt stack 0
  1885  00010E                     __tdiv_to_l_@exp1:
  1886                           	opt stack 0
  1887  00010E                     ___wmul@multiplier:
  1888                           	opt stack 0
  1889                           
  1890                           ; 2 bytes @ 0xE
  1891  00010E                     	ds	2
  1892  000110                     ___altoft@exp:
  1893                           	opt stack 0
  1894  000110                     ___lltoft@exp:
  1895                           	opt stack 0
  1896  000110                     ___wmul@multiplicand:
  1897                           	opt stack 0
  1898                           
  1899                           ; 2 bytes @ 0x10
  1900  000110                     	ds	1
  1901  000111                     ___altoft@sign:
  1902                           	opt stack 0
  1903  000111                     ___llmod@divisor:
  1904                           	opt stack 0
  1905                           
  1906                           ; 4 bytes @ 0x11
  1907  000111                     	ds	1
  1908  000112                     ?___ftdiv:
  1909                           	opt stack 0
  1910  000112                     ___wmul@product:
  1911                           	opt stack 0
  1912  000112                     ___ftdiv@f1:
  1913                           	opt stack 0
  1914                           
  1915                           ; 3 bytes @ 0x12
  1916  000112                     	ds	2
  1917  000114                     ?___ftmul:
  1918                           	opt stack 0
  1919  000114                     ___ftmul@f1:
  1920                           	opt stack 0
  1921                           
  1922                           ; 3 bytes @ 0x14
  1923  000114                     	ds	1
  1924  000115                     ___llmod@counter:
  1925                           	opt stack 0
  1926  000115                     ___ftdiv@f2:
  1927                           	opt stack 0
  1928                           
  1929                           ; 3 bytes @ 0x15
  1930  000115                     	ds	2
  1931  000117                     ___ftmul@f2:
  1932                           	opt stack 0
  1933                           
  1934                           ; 3 bytes @ 0x17
  1935  000117                     	ds	1
  1936  000118                     ??___ftdiv:
  1937                           
  1938                           ; 1 bytes @ 0x18
  1939  000118                     	ds	2
  1940  00011A                     ??___ftmul:
  1941                           
  1942                           ; 1 bytes @ 0x1A
  1943  00011A                     	ds	1
  1944  00011B                     ___ftdiv@cntr:
  1945                           	opt stack 0
  1946                           
  1947                           ; 1 bytes @ 0x1B
  1948  00011B                     	ds	1
  1949  00011C                     ___ftdiv@f3:
  1950                           	opt stack 0
  1951                           
  1952                           ; 3 bytes @ 0x1C
  1953  00011C                     	ds	1
  1954  00011D                     ___ftmul@exp:
  1955                           	opt stack 0
  1956                           
  1957                           ; 1 bytes @ 0x1D
  1958  00011D                     	ds	1
  1959  00011E                     ___ftmul@f3_as_product:
  1960                           	opt stack 0
  1961                           
  1962                           ; 3 bytes @ 0x1E
  1963  00011E                     	ds	1
  1964  00011F                     ___ftdiv@exp:
  1965                           	opt stack 0
  1966                           
  1967                           ; 1 bytes @ 0x1F
  1968  00011F                     	ds	1
  1969  000120                     ___ftdiv@sign:
  1970                           	opt stack 0
  1971                           
  1972                           ; 1 bytes @ 0x20
  1973  000120                     	ds	1
  1974  000121                     ??_integrator:
  1975  000121                     ___ftmul@cntr:
  1976                           	opt stack 0
  1977                           
  1978                           ; 1 bytes @ 0x21
  1979  000121                     	ds	1
  1980  000122                     ___ftmul@sign:
  1981                           	opt stack 0
  1982                           
  1983                           ; 1 bytes @ 0x22
  1984  000122                     	ds	1
  1985  000123                     ?_fround:
  1986                           	opt stack 0
  1987  000123                     ?_scale:
  1988                           	opt stack 0
  1989  000123                     confirmEdition@yes:
  1990                           	opt stack 0
  1991  000123                     calcSysVars@temp:
  1992                           	opt stack 0
  1993  000123                     integrator@acum:
  1994                           	opt stack 0
  1995                           
  1996                           ; 4 bytes @ 0x23
  1997  000123                     	ds	3
  1998  000126                     _fround$2828:
  1999                           	opt stack 0
  2000  000126                     _scale$2829:
  2001                           	opt stack 0
  2002                           
  2003                           ; 3 bytes @ 0x26
  2004  000126                     	ds	1
  2005  000127                     integrator@temp:
  2006                           	opt stack 0
  2007                           
  2008                           ; 4 bytes @ 0x27
  2009  000127                     	ds	2
  2010  000129                     scale@scl:
  2011                           	opt stack 0
  2012  000129                     _fround$2827:
  2013                           	opt stack 0
  2014                           
  2015                           ; 3 bytes @ 0x29
  2016  000129                     	ds	1
  2017  00012A                     ?___fttol:
  2018                           	opt stack 0
  2019  00012A                     ___fttol@f1:
  2020                           	opt stack 0
  2021                           
  2022                           ; 3 bytes @ 0x2A
  2023  00012A                     	ds	1
  2024  00012B                     integrator@i:
  2025                           	opt stack 0
  2026                           
  2027                           ; 2 bytes @ 0x2B
  2028  00012B                     	ds	1
  2029  00012C                     fround@prec:
  2030                           	opt stack 0
  2031                           
  2032                           ; 1 bytes @ 0x2C
  2033  00012C                     	ds	1
  2034  00012D                     ?___ftadd:
  2035                           	opt stack 0
  2036  00012D                     ___ftadd@f1:
  2037                           	opt stack 0
  2038                           
  2039                           ; 3 bytes @ 0x2D
  2040  00012D                     	ds	1
  2041  00012E                     ??___fttol:
  2042                           
  2043                           ; 1 bytes @ 0x2E
  2044  00012E                     	ds	2
  2045  000130                     ___ftadd@f2:
  2046                           	opt stack 0
  2047                           
  2048                           ; 3 bytes @ 0x30
  2049  000130                     	ds	3
  2050  000133                     ??___ftadd:
  2051  000133                     ___fttol@sign1:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0x33
  2055  000133                     	ds	1
  2056  000134                     ___fttol@lval:
  2057                           	opt stack 0
  2058                           
  2059                           ; 4 bytes @ 0x34
  2060  000134                     	ds	2
  2061  000136                     ___ftadd@sign:
  2062                           	opt stack 0
  2063                           
  2064                           ; 1 bytes @ 0x36
  2065  000136                     	ds	1
  2066  000137                     ___ftadd@exp2:
  2067                           	opt stack 0
  2068                           
  2069                           ; 1 bytes @ 0x37
  2070  000137                     	ds	1
  2071  000138                     ___ftadd@exp1:
  2072                           	opt stack 0
  2073  000138                     ___fttol@exp1:
  2074                           	opt stack 0
  2075                           
  2076                           ; 1 bytes @ 0x38
  2077  000138                     	ds	1
  2078  000139                     ??_desintegrator:
  2079  000139                     ?___ftsub:
  2080                           	opt stack 0
  2081  000139                     ___ftsub@f1:
  2082                           	opt stack 0
  2083                           
  2084                           ; 3 bytes @ 0x39
  2085  000139                     	ds	2
  2086  00013B                     desintegrator@temp:
  2087                           	opt stack 0
  2088                           
  2089                           ; 3 bytes @ 0x3B
  2090  00013B                     	ds	1
  2091  00013C                     ___ftsub@f2:
  2092                           	opt stack 0
  2093                           
  2094                           ; 3 bytes @ 0x3C
  2095  00013C                     	ds	2
  2096  00013E                     desintegrator@tempL:
  2097                           	opt stack 0
  2098                           
  2099                           ; 4 bytes @ 0x3E
  2100  00013E                     	ds	1
  2101  00013F                     ?_printf:
  2102                           	opt stack 0
  2103  00013F                     printf@f:
  2104                           	opt stack 0
  2105                           
  2106                           ; 2 bytes @ 0x3F
  2107  00013F                     	ds	3
  2108  000142                     desintegrator@temp3:
  2109                           	opt stack 0
  2110                           
  2111                           ; 4 bytes @ 0x42
  2112  000142                     	ds	4
  2113  000146                     desintegrator@temp2:
  2114                           	opt stack 0
  2115                           
  2116                           ; 4 bytes @ 0x46
  2117  000146                     	ds	4
  2118  00014A                     desintegrator@i:
  2119                           	opt stack 0
  2120                           
  2121                           ; 2 bytes @ 0x4A
  2122  00014A                     	ds	2
  2123  00014C                     longPressENTER@temp:
  2124                           	opt stack 0
  2125                           
  2126                           ; 3 bytes @ 0x4C
  2127  00014C                     	ds	3
  2128  00014F                     _longPressENTER$2826:
  2129                           	opt stack 0
  2130                           
  2131                           ; 3 bytes @ 0x4F
  2132  00014F                     	ds	2
  2133  000151                     ??_printf:
  2134                           
  2135                           ; 1 bytes @ 0x51
  2136  000151                     	ds	1
  2137  000152                     
  2138                           ; 1 bytes @ 0x52
  2139  000152                     	ds	5
  2140  000157                     _printf$2830:
  2141                           	opt stack 0
  2142                           
  2143                           ; 3 bytes @ 0x57
  2144  000157                     	ds	3
  2145  00015A                     printf@cp:
  2146                           	opt stack 0
  2147                           
  2148                           ; 2 bytes @ 0x5A
  2149  00015A                     	ds	2
  2150  00015C                     printf@len:
  2151                           	opt stack 0
  2152                           
  2153                           ; 2 bytes @ 0x5C
  2154  00015C                     	ds	2
  2155  00015E                     printf@ap:
  2156                           	opt stack 0
  2157                           
  2158                           ; 2 bytes @ 0x5E
  2159  00015E                     	ds	2
  2160  000160                     printf@flag:
  2161                           	opt stack 0
  2162                           
  2163                           ; 2 bytes @ 0x60
  2164  000160                     	ds	2
  2165  000162                     printf@tmpval:
  2166                           	opt stack 0
  2167                           
  2168                           ; 4 bytes @ 0x62
  2169  000162                     	ds	4
  2170  000166                     printf@val:
  2171                           	opt stack 0
  2172                           
  2173                           ; 4 bytes @ 0x66
  2174  000166                     	ds	4
  2175  00016A                     printf@exp:
  2176                           	opt stack 0
  2177                           
  2178                           ; 2 bytes @ 0x6A
  2179  00016A                     	ds	2
  2180  00016C                     printf@width:
  2181                           	opt stack 0
  2182                           
  2183                           ; 2 bytes @ 0x6C
  2184  00016C                     	ds	2
  2185  00016E                     printf@fval:
  2186                           	opt stack 0
  2187                           
  2188                           ; 3 bytes @ 0x6E
  2189  00016E                     	ds	3
  2190  000171                     printf@prec:
  2191                           	opt stack 0
  2192                           
  2193                           ; 2 bytes @ 0x71
  2194  000171                     	ds	2
  2195  000173                     printf@c:
  2196                           	opt stack 0
  2197                           
  2198                           ; 1 bytes @ 0x73
  2199  000173                     	ds	1
  2200  000174                     drawMenu@adv:
  2201                           	opt stack 0
  2202  000174                     drawAdvON@on:
  2203                           	opt stack 0
  2204  000174                     drawPassWord@i:
  2205                           	opt stack 0
  2206  000174                     drawSNquest@i:
  2207                           	opt stack 0
  2208                           
  2209                           ; 2 bytes @ 0x74
  2210  000174                     	ds	2
  2211  000176                     drawSNquest@tq:
  2212                           	opt stack 0
  2213                           
  2214                           ; 1 bytes @ 0x76
  2215  000176                     	ds	1
  2216  000177                     tblptru	equ	0xFF8
  2217                           tblptrh	equ	0xFF7
  2218                           tblptrl	equ	0xFF6
  2219                           tablat	equ	0xFF5
  2220                           postinc0	equ	0xFEE
  2221                           wreg	equ	0xFE8
  2222                           postdec1	equ	0xFE5
  2223                           fsr1l	equ	0xFE1
  2224                           
  2225                           ; 1 bytes @ 0x77
  2226                           
  2227                           	psect	cstackBANK0
  2228  000060                     __pcstackBANK0:
  2229                           	opt stack 0
  2230  000060                     ??i1_checkPass:
  2231  000060                     ??i1_chanValDigUP:
  2232  000060                     ??i1_chanValDigDOWN:
  2233  000060                     ?i1___ftpack:
  2234                           	opt stack 0
  2235  000060                     ?i1___lmul:
  2236                           	opt stack 0
  2237  000060                     ?i1___aldiv:
  2238                           	opt stack 0
  2239  000060                     ?i1___fttol:
  2240                           	opt stack 0
  2241  000060                     i1putchUART@val:
  2242                           	opt stack 0
  2243  000060                     i1writeEEPROM@data:
  2244                           	opt stack 0
  2245  000060                     i1readEEPROM@adr:
  2246                           	opt stack 0
  2247  000060                     i1setPWM2duty@actuator:
  2248                           	opt stack 0
  2249  000060                     i1___ftpack@arg:
  2250                           	opt stack 0
  2251  000060                     i1___fttol@f1:
  2252                           	opt stack 0
  2253  000060                     i1___lmul@multiplier:
  2254                           	opt stack 0
  2255  000060                     i1___aldiv@dividend:
  2256                           	opt stack 0
  2257                           
  2258                           ; 4 bytes @ 0x0
  2259  000060                     	ds	1
  2260  000061                     i1writeEEPROM@adr:
  2261                           	opt stack 0
  2262                           
  2263                           ; 1 bytes @ 0x1
  2264  000061                     	ds	1
  2265  000062                     ??i1_setPWM2duty:
  2266                           
  2267                           ; 1 bytes @ 0x2
  2268  000062                     	ds	1
  2269  000063                     i1___ftpack@exp:
  2270                           	opt stack 0
  2271                           
  2272                           ; 1 bytes @ 0x3
  2273  000063                     	ds	1
  2274  000064                     ??i1___fttol:
  2275  000064                     i1checkPass@passOK:
  2276                           	opt stack 0
  2277  000064                     i1___ftpack@sign:
  2278                           	opt stack 0
  2279  000064                     i1setPWM2duty@act:
  2280                           	opt stack 0
  2281  000064                     i1___lmul@multiplicand:
  2282                           	opt stack 0
  2283  000064                     i1___aldiv@divisor:
  2284                           	opt stack 0
  2285                           
  2286                           ; 4 bytes @ 0x4
  2287  000064                     	ds	1
  2288  000065                     ??i1___ftpack:
  2289  000065                     i1checkPass@i:
  2290                           	opt stack 0
  2291                           
  2292                           ; 2 bytes @ 0x5
  2293  000065                     	ds	1
  2294  000066                     i1initProtocoll@init:
  2295                           	opt stack 0
  2296                           
  2297                           ; 1 bytes @ 0x6
  2298  000066                     	ds	1
  2299  000067                     ??_T2int:
  2300  000067                     
  2301                           ; 1 bytes @ 0x7
  2302  000067                     	ds	1
  2303  000068                     ?i1___altoft:
  2304                           	opt stack 0
  2305  000068                     ?i1___ftadd:
  2306                           	opt stack 0
  2307  000068                     ?i1___ftmul:
  2308                           	opt stack 0
  2309  000068                     i1___aldiv@counter:
  2310                           	opt stack 0
  2311  000068                     i1___ftadd@f1:
  2312                           	opt stack 0
  2313  000068                     i1___ftmul@f1:
  2314                           	opt stack 0
  2315  000068                     i1___lmul@product:
  2316                           	opt stack 0
  2317  000068                     i1___altoft@c:
  2318                           	opt stack 0
  2319                           
  2320                           ; 4 bytes @ 0x8
  2321  000068                     	ds	1
  2322  000069                     i1___aldiv@sign:
  2323                           	opt stack 0
  2324  000069                     i1___fttol@sign1:
  2325                           	opt stack 0
  2326                           
  2327                           ; 1 bytes @ 0x9
  2328  000069                     	ds	1
  2329  00006A                     i1___aldiv@quotient:
  2330                           	opt stack 0
  2331  00006A                     i1___fttol@lval:
  2332                           	opt stack 0
  2333                           
  2334                           ; 4 bytes @ 0xA
  2335  00006A                     	ds	1
  2336  00006B                     i1___ftadd@f2:
  2337                           	opt stack 0
  2338  00006B                     i1___ftmul@f2:
  2339                           	opt stack 0
  2340                           
  2341                           ; 3 bytes @ 0xB
  2342  00006B                     	ds	1
  2343  00006C                     ??i1___altoft:
  2344                           
  2345                           ; 1 bytes @ 0xC
  2346  00006C                     	ds	2
  2347  00006E                     ??i1___ftadd:
  2348  00006E                     ??i1___ftmul:
  2349  00006E                     i1___fttol@exp1:
  2350                           	opt stack 0
  2351                           
  2352                           ; 1 bytes @ 0xE
  2353  00006E                     	ds	2
  2354  000070                     i1___altoft@exp:
  2355                           	opt stack 0
  2356                           
  2357                           ; 1 bytes @ 0x10
  2358  000070                     	ds	1
  2359  000071                     i1___altoft@sign:
  2360                           	opt stack 0
  2361  000071                     i1___ftadd@sign:
  2362                           	opt stack 0
  2363  000071                     i1___ftmul@exp:
  2364                           	opt stack 0
  2365                           
  2366                           ; 1 bytes @ 0x11
  2367  000071                     	ds	1
  2368  000072                     ?i1___ftdiv:
  2369                           	opt stack 0
  2370  000072                     i1___ftadd@exp2:
  2371                           	opt stack 0
  2372  000072                     i1___ftdiv@f1:
  2373                           	opt stack 0
  2374  000072                     i1___ftmul@f3_as_product:
  2375                           	opt stack 0
  2376                           
  2377                           ; 3 bytes @ 0x12
  2378  000072                     	ds	1
  2379  000073                     i1___ftadd@exp1:
  2380                           	opt stack 0
  2381                           
  2382                           ; 1 bytes @ 0x13
  2383  000073                     	ds	2
  2384  000075                     i1___ftmul@cntr:
  2385                           	opt stack 0
  2386  000075                     i1___ftdiv@f2:
  2387                           	opt stack 0
  2388                           
  2389                           ; 3 bytes @ 0x15
  2390  000075                     	ds	1
  2391  000076                     i1___ftmul@sign:
  2392                           	opt stack 0
  2393                           
  2394                           ; 1 bytes @ 0x16
  2395  000076                     	ds	1
  2396  000077                     ??i1_desintegrator:
  2397  000077                     i1calcSysVars@temp:
  2398                           	opt stack 0
  2399                           
  2400                           ; 3 bytes @ 0x17
  2401  000077                     	ds	1
  2402  000078                     ??i1___ftdiv:
  2403                           
  2404                           ; 1 bytes @ 0x18
  2405  000078                     	ds	1
  2406  000079                     i1desintegrator@temp:
  2407                           	opt stack 0
  2408                           
  2409                           ; 3 bytes @ 0x19
  2410  000079                     	ds	1
  2411  00007A                     
  2412                           ; 1 bytes @ 0x1A
  2413  00007A                     	ds	1
  2414  00007B                     i1___ftdiv@cntr:
  2415                           	opt stack 0
  2416                           
  2417                           ; 1 bytes @ 0x1B
  2418  00007B                     	ds	1
  2419  00007C                     i1___ftdiv@f3:
  2420                           	opt stack 0
  2421  00007C                     i1desintegrator@tempL:
  2422                           	opt stack 0
  2423                           
  2424                           ; 4 bytes @ 0x1C
  2425  00007C                     	ds	3
  2426  00007F                     i1___ftdiv@exp:
  2427                           	opt stack 0
  2428                           
  2429                           ; 1 bytes @ 0x1F
  2430  00007F                     	ds	1
  2431  000080                     i1___ftdiv@sign:
  2432                           	opt stack 0
  2433  000080                     i1desintegrator@temp3:
  2434                           	opt stack 0
  2435                           
  2436                           ; 4 bytes @ 0x20
  2437  000080                     	ds	1
  2438  000081                     ??i1_integrator:
  2439  000081                     i1confirmEdition@yes:
  2440                           	opt stack 0
  2441                           
  2442                           ; 1 bytes @ 0x21
  2443  000081                     	ds	2
  2444  000083                     i1integrator@acum:
  2445                           	opt stack 0
  2446                           
  2447                           ; 4 bytes @ 0x23
  2448  000083                     	ds	1
  2449  000084                     i1desintegrator@temp2:
  2450                           	opt stack 0
  2451                           
  2452                           ; 4 bytes @ 0x24
  2453  000084                     	ds	3
  2454  000087                     i1integrator@temp:
  2455                           	opt stack 0
  2456                           
  2457                           ; 4 bytes @ 0x27
  2458  000087                     	ds	1
  2459  000088                     i1desintegrator@i:
  2460                           	opt stack 0
  2461                           
  2462                           ; 2 bytes @ 0x28
  2463  000088                     	ds	2
  2464  00008A                     
  2465                           ; 1 bytes @ 0x2A
  2466  00008A                     	ds	1
  2467  00008B                     i1integrator@i:
  2468                           	opt stack 0
  2469                           
  2470                           ; 2 bytes @ 0x2B
  2471  00008B                     	ds	2
  2472  00008D                     i1longPressENTER@temp:
  2473                           	opt stack 0
  2474                           
  2475                           ; 3 bytes @ 0x2D
  2476  00008D                     	ds	3
  2477  000090                     i1_longPressENTER$3047:
  2478                           	opt stack 0
  2479                           
  2480                           ; 3 bytes @ 0x30
  2481  000090                     	ds	3
  2482  000093                     UARTint@sas:
  2483                           	opt stack 0
  2484                           
  2485                           ; 1 bytes @ 0x33
  2486  000093                     	ds	1
  2487  000094                     ??_isr:
  2488                           
  2489                           ; 1 bytes @ 0x34
  2490  000094                     	ds	17
  2491                           tblptru	equ	0xFF8
  2492                           tblptrh	equ	0xFF7
  2493                           tblptrl	equ	0xFF6
  2494                           tablat	equ	0xFF5
  2495                           postinc0	equ	0xFEE
  2496                           wreg	equ	0xFE8
  2497                           postdec1	equ	0xFE5
  2498                           fsr1l	equ	0xFE1
  2499                           
  2500                           	psect	cstackCOMRAM
  2501  000001                     __pcstackCOMRAM:
  2502                           	opt stack 0
  2503  000001                     ?i2___ftpack:
  2504                           	opt stack 0
  2505  000001                     i2setPWM2duty@actuator:
  2506                           	opt stack 0
  2507  000001                     i2___ftpack@arg:
  2508                           	opt stack 0
  2509                           
  2510                           ; 3 bytes @ 0x0
  2511  000001                     	ds	2
  2512  000003                     ??i2_setPWM2duty:
  2513                           
  2514                           ; 1 bytes @ 0x2
  2515  000003                     	ds	1
  2516  000004                     i2___ftpack@exp:
  2517                           	opt stack 0
  2518                           
  2519                           ; 1 bytes @ 0x3
  2520  000004                     	ds	1
  2521  000005                     i2___ftpack@sign:
  2522                           	opt stack 0
  2523  000005                     i2setPWM2duty@act:
  2524                           	opt stack 0
  2525                           
  2526                           ; 2 bytes @ 0x4
  2527  000005                     	ds	1
  2528  000006                     ??i2___ftpack:
  2529                           
  2530                           ; 1 bytes @ 0x5
  2531  000006                     	ds	3
  2532  000009                     ?i2___altoft:
  2533                           	opt stack 0
  2534  000009                     i2___altoft@c:
  2535                           	opt stack 0
  2536                           
  2537                           ; 4 bytes @ 0x8
  2538  000009                     	ds	4
  2539  00000D                     ??i2___altoft:
  2540                           
  2541                           ; 1 bytes @ 0xC
  2542  00000D                     	ds	4
  2543  000011                     i2___altoft@exp:
  2544                           	opt stack 0
  2545                           
  2546                           ; 1 bytes @ 0x10
  2547  000011                     	ds	1
  2548  000012                     i2___altoft@sign:
  2549                           	opt stack 0
  2550                           
  2551                           ; 1 bytes @ 0x11
  2552  000012                     	ds	1
  2553  000013                     ?i2___ftadd:
  2554                           	opt stack 0
  2555  000013                     i2___ftadd@f1:
  2556                           	opt stack 0
  2557                           
  2558                           ; 3 bytes @ 0x12
  2559  000013                     	ds	3
  2560  000016                     i2___ftadd@f2:
  2561                           	opt stack 0
  2562                           
  2563                           ; 3 bytes @ 0x15
  2564  000016                     	ds	3
  2565  000019                     ??i2___ftadd:
  2566                           
  2567                           ; 1 bytes @ 0x18
  2568  000019                     	ds	3
  2569  00001C                     i2___ftadd@sign:
  2570                           	opt stack 0
  2571                           
  2572                           ; 1 bytes @ 0x1B
  2573  00001C                     	ds	1
  2574  00001D                     i2___ftadd@exp2:
  2575                           	opt stack 0
  2576                           
  2577                           ; 1 bytes @ 0x1C
  2578  00001D                     	ds	1
  2579  00001E                     i2___ftadd@exp1:
  2580                           	opt stack 0
  2581                           
  2582                           ; 1 bytes @ 0x1D
  2583  00001E                     	ds	1
  2584  00001F                     i2___ftge@ff1:
  2585                           	opt stack 0
  2586                           
  2587                           ; 3 bytes @ 0x1E
  2588  00001F                     	ds	3
  2589  000022                     i2___ftge@ff2:
  2590                           	opt stack 0
  2591                           
  2592                           ; 3 bytes @ 0x21
  2593  000022                     	ds	3
  2594  000025                     ??i2___ftge:
  2595                           
  2596                           ; 1 bytes @ 0x24
  2597  000025                     	ds	3
  2598  000028                     ??_T4int:
  2599                           
  2600                           ; 1 bytes @ 0x27
  2601  000028                     	ds	1
  2602  000029                     ??_hp_isr:
  2603                           
  2604                           ; 1 bytes @ 0x28
  2605  000029                     	ds	14
  2606                           tblptru	equ	0xFF8
  2607                           tblptrh	equ	0xFF7
  2608                           tblptrl	equ	0xFF6
  2609                           tablat	equ	0xFF5
  2610                           postinc0	equ	0xFEE
  2611                           wreg	equ	0xFE8
  2612                           postdec1	equ	0xFE5
  2613                           fsr1l	equ	0xFE1
  2614                           
  2615 ;;
  2616 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2617 ;;
  2618 ;; *************** function _main *****************
  2619 ;; Defined at:
  2620 ;;		line 31 in file "source/main.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;		None
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;		None
  2625 ;; Return value:  Size  Location     Type
  2626 ;;                  1    wreg      void 
  2627 ;; Registers used:
  2628 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2629 ;; Tracked objects:
  2630 ;;		On entry : 0/0
  2631 ;;		On exit  : 0/0
  2632 ;;		Unchanged: 0/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2634 ;;      Params:         0       0       0       0       0       0       0
  2635 ;;      Locals:         0       0       0       0       0       0       0
  2636 ;;      Temps:          0       0       0       0       0       0       0
  2637 ;;      Totals:         0       0       0       0       0       0       0
  2638 ;;Total ram usage:        0 bytes
  2639 ;; Hardware stack levels required when called:   22
  2640 ;; This function calls:
  2641 ;;		_EEPROMConfig
  2642 ;;		_PWM2Config
  2643 ;;		_UARTConfig
  2644 ;;		_buttonChecking
  2645 ;;		_clockConfig
  2646 ;;		_drawScreen
  2647 ;;		_interruptConfig
  2648 ;;		_ioConfig
  2649 ;;		_ioInitStt
  2650 ;;		_lcd_init
  2651 ;;		_setPWM2duty
  2652 ;;		_setPWM2on
  2653 ;;		_sysParamInit
  2654 ;;		_t4config
  2655 ;; This function is called by:
  2656 ;;		Startup code after reset
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text0
  2661  006DE4                     __ptext0:
  2662                           	opt stack 0
  2663  006DE4                     _main:
  2664                           	opt stack 9
  2665                           
  2666                           ;main.c: 33: clockConfig();
  2667                           
  2668                           ; BSR set to: 1
  2669                           ;incstack = 0
  2670  006DE4  EC08  F039         	call	_clockConfig	;wreg free
  2671                           
  2672                           ;main.c: 34: t4config();
  2673  006DE8  ECB4  F038         	call	_t4config	;wreg free
  2674                           
  2675                           ;main.c: 35: ioInitStt();
  2676  006DEC  ECC8  F039         	call	_ioInitStt	;wreg free
  2677                           
  2678                           ;main.c: 36: EEPROMConfig();
  2679  006DF0  ECD0  F039         	call	_EEPROMConfig	;wreg free
  2680                           
  2681                           ;main.c: 38: sysParamInit();
  2682  006DF4  ECCC  F033         	call	_sysParamInit	;wreg free
  2683                           
  2684                           ;main.c: 39: ioConfig();
  2685  006DF8  ECF7  F037         	call	_ioConfig	;wreg free
  2686                           
  2687                           ;main.c: 40: lcd_init();
  2688  006DFC  EC49  F02E         	call	_lcd_init	;wreg free
  2689                           
  2690                           ;main.c: 41: PWM2Config();
  2691  006E00  ECCE  F035         	call	_PWM2Config	;wreg free
  2692                           
  2693                           ;main.c: 42: UARTConfig();
  2694  006E04  ECC0  F037         	call	_UARTConfig	;wreg free
  2695                           
  2696                           ;main.c: 43: interruptConfig();
  2697  006E08  ECCC  F039         	call	_interruptConfig	;wreg free
  2698  006E0C  0004               	clrwdt		;# 
  2699                           
  2700                           ;main.c: 46: WDTCONbits.SWDTEN = 1;
  2701  006E0E  80D1               	bsf	4049,0,c	;volatile
  2702                           
  2703                           ;main.c: 47: setPWM2duty(-400);
  2704  006E10  0EFE               	movlw	254
  2705  006E12  0101               	movlb	1	; () banked
  2706  006E14  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
  2707  006E16  0E70               	movlw	112
  2708  006E18  6F00               	movwf	setPWM2duty@actuator& (0+255),b
  2709  006E1A  EC84  F02F         	call	_setPWM2duty	;wreg free
  2710                           
  2711                           ;main.c: 48: setPWM2on(1);
  2712  006E1E  0E01               	movlw	1
  2713  006E20  EC4A  F039         	call	_setPWM2on
  2714  006E24                     l12054:
  2715                           
  2716                           ;main.c: 51: drawScreen();
  2717  006E24  ECF9  F028         	call	_drawScreen	;wreg free
  2718                           
  2719                           ;main.c: 52: buttonChecking();
  2720  006E28  EC3D  F011         	call	_buttonChecking	;wreg free
  2721  006E2C  D7FB               	goto	l12054
  2722  006E2E                     __end_of_main:
  2723                           	opt stack 0
  2724                           tblptru	equ	0xFF8
  2725                           tblptrh	equ	0xFF7
  2726                           tblptrl	equ	0xFF6
  2727                           tablat	equ	0xFF5
  2728                           postinc0	equ	0xFEE
  2729                           wreg	equ	0xFE8
  2730                           postdec1	equ	0xFE5
  2731                           fsr1l	equ	0xFE1
  2732                           
  2733 ;; *************** function _t4config *****************
  2734 ;; Defined at:
  2735 ;;		line 49 in file "source/T4Config.h"
  2736 ;; Parameters:    Size  Location     Type
  2737 ;;		None
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;		None
  2740 ;; Return value:  Size  Location     Type
  2741 ;;                  1    wreg      void 
  2742 ;; Registers used:
  2743 ;;		wreg, status,2
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2749 ;;      Params:         0       0       0       0       0       0       0
  2750 ;;      Locals:         0       0       0       0       0       0       0
  2751 ;;      Temps:          0       0       0       0       0       0       0
  2752 ;;      Totals:         0       0       0       0       0       0       0
  2753 ;;Total ram usage:        0 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; Hardware stack levels required when called:   12
  2756 ;; This function calls:
  2757 ;;		Nothing
  2758 ;; This function is called by:
  2759 ;;		_main
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           	psect	text1
  2764  007168                     __ptext1:
  2765                           	opt stack 0
  2766  007168                     _t4config:
  2767                           	opt stack 18
  2768                           
  2769                           ;T4Config.h: 50: T4CONbits.TMR4ON = 0;
  2770                           
  2771                           ;incstack = 0
  2772  007168  010F               	movlb	15	; () banked
  2773  00716A  9551               	bcf	81,2,b	;volatile
  2774                           
  2775                           ; BSR set to: 15
  2776                           ;T4Config.h: 51: T4CONbits.T4CKPS = 0b01;
  2777  00716C  010F               	movlb	15	; () banked
  2778  00716E  5151               	movf	81,w,b	;volatile
  2779  007170  0BFC               	andlw	-4
  2780  007172  0901               	iorlw	1
  2781  007174  6F51               	movwf	81,b	;volatile
  2782                           
  2783                           ;T4Config.h: 52: T4CONbits.T4OUTPS = 0b0100;
  2784  007176  010F               	movlb	15	; () banked
  2785  007178  5151               	movf	81,w,b	;volatile
  2786  00717A  0B87               	andlw	-121
  2787  00717C  0920               	iorlw	32
  2788  00717E  6F51               	movwf	81,b	;volatile
  2789                           
  2790                           ;T4Config.h: 53: PR4 = 199;
  2791  007180  0EC7               	movlw	199
  2792  007182  010F               	movlb	15	; () banked
  2793  007184  6F52               	movwf	82,b	;volatile
  2794                           
  2795                           ; BSR set to: 15
  2796                           ;T4Config.h: 54: PIR5bits.TMR4IF = 0;
  2797  007186  907E               	bcf	3966,0,c	;volatile
  2798                           
  2799                           ; BSR set to: 15
  2800                           ;T4Config.h: 55: IPR5bits.TMR4IP = 1;
  2801  007188  807F               	bsf	3967,0,c	;volatile
  2802                           
  2803                           ; BSR set to: 15
  2804                           ;T4Config.h: 56: PIE5bits.TMR4IE = 1;
  2805  00718A  807D               	bsf	3965,0,c	;volatile
  2806                           
  2807                           ; BSR set to: 15
  2808                           ;T4Config.h: 57: T4CONbits.TMR4ON = 1;
  2809  00718C  010F               	movlb	15	; () banked
  2810  00718E  8551               	bsf	81,2,b	;volatile
  2811                           
  2812                           ; BSR set to: 15
  2813  007190  0012               	return		;funcret
  2814  007192                     __end_of_t4config:
  2815                           	opt stack 0
  2816                           tblptru	equ	0xFF8
  2817                           tblptrh	equ	0xFF7
  2818                           tblptrl	equ	0xFF6
  2819                           tablat	equ	0xFF5
  2820                           postinc0	equ	0xFEE
  2821                           wreg	equ	0xFE8
  2822                           postdec1	equ	0xFE5
  2823                           fsr1l	equ	0xFE1
  2824                           
  2825 ;; *************** function _sysParamInit *****************
  2826 ;; Defined at:
  2827 ;;		line 168 in file "source/sysParams.h"
  2828 ;; Parameters:    Size  Location     Type
  2829 ;;		None
  2830 ;; Auto vars:     Size  Location     Type
  2831 ;;		None
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  1    wreg      void 
  2834 ;; Registers used:
  2835 ;;		wreg, status,2, status,0, cstack
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2841 ;;      Params:         0       0       0       0       0       0       0
  2842 ;;      Locals:         0       0       0       0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0       0       0
  2844 ;;      Totals:         0       0       0       0       0       0       0
  2845 ;;Total ram usage:        0 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:   15
  2848 ;; This function calls:
  2849 ;;		_calcSysVars
  2850 ;;		_readEEPROM
  2851 ;; This function is called by:
  2852 ;;		_main
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           	psect	text2
  2857  006798                     __ptext2:
  2858                           	opt stack 0
  2859  006798                     _sysParamInit:
  2860                           	opt stack 15
  2861                           
  2862                           ;sysParams.h: 171: fData.floatUB = readEEPROM(3);
  2863                           
  2864                           ; BSR set to: 15
  2865                           ;incstack = 0
  2866  006798  0E03               	movlw	3
  2867  00679A  EC63  F039         	call	_readEEPROM
  2868  00679E  0100               	movlb	0	; () banked
  2869  0067A0  6FB1               	movwf	(_fData+2)& (0+255),b
  2870                           
  2871                           ;sysParams.h: 172: fData.floatHB = readEEPROM(4);
  2872  0067A2  0E04               	movlw	4
  2873  0067A4  EC63  F039         	call	_readEEPROM
  2874  0067A8  0100               	movlb	0	; () banked
  2875  0067AA  6FB0               	movwf	(_fData+1)& (0+255),b
  2876                           
  2877                           ;sysParams.h: 173: fData.floatLB = readEEPROM(5);
  2878  0067AC  0E05               	movlw	5
  2879  0067AE  EC63  F039         	call	_readEEPROM
  2880  0067B2  0100               	movlb	0	; () banked
  2881  0067B4  6FAF               	movwf	_fData& (0+255),b
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;sysParams.h: 174: tiXcorte = fData.floatdat;
  2885  0067B6  C0AF  F195         	movff	_fData,_tiXcorte
  2886  0067BA  C0B0  F196         	movff	_fData+1,_tiXcorte+1
  2887  0067BE  C0B1  F197         	movff	_fData+2,_tiXcorte+2
  2888                           
  2889                           ;sysParams.h: 175: i16Data.int16HB = readEEPROM(6);
  2890  0067C2  0E06               	movlw	6
  2891  0067C4  EC63  F039         	call	_readEEPROM
  2892  0067C8  0100               	movlb	0	; () banked
  2893  0067CA  6FB5               	movwf	(_i16Data+1)& (0+255),b
  2894                           
  2895                           ;sysParams.h: 176: i16Data.int16LB = readEEPROM(7);
  2896  0067CC  0E07               	movlw	7
  2897  0067CE  EC63  F039         	call	_readEEPROM
  2898  0067D2  0100               	movlb	0	; () banked
  2899  0067D4  6FB4               	movwf	_i16Data& (0+255),b
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;sysParams.h: 177: numCortes = i16Data.int16dat;
  2903  0067D6  C0B4  F0D2         	movff	_i16Data,_numCortes
  2904  0067DA  C0B5  F0D3         	movff	_i16Data+1,_numCortes+1
  2905                           
  2906                           ;sysParams.h: 189: fData.floatUB = readEEPROM(17);
  2907  0067DE  0E11               	movlw	17
  2908  0067E0  EC63  F039         	call	_readEEPROM
  2909  0067E4  0100               	movlb	0	; () banked
  2910  0067E6  6FB1               	movwf	(_fData+2)& (0+255),b
  2911                           
  2912                           ;sysParams.h: 190: fData.floatHB = readEEPROM(18);
  2913  0067E8  0E12               	movlw	18
  2914  0067EA  EC63  F039         	call	_readEEPROM
  2915  0067EE  0100               	movlb	0	; () banked
  2916  0067F0  6FB0               	movwf	(_fData+1)& (0+255),b
  2917                           
  2918                           ;sysParams.h: 191: fData.floatLB = readEEPROM(19);
  2919  0067F2  0E13               	movlw	19
  2920  0067F4  EC63  F039         	call	_readEEPROM
  2921  0067F8  0100               	movlb	0	; () banked
  2922  0067FA  6FAF               	movwf	_fData& (0+255),b
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;sysParams.h: 192: velocidadMasa = fData.floatdat;
  2926  0067FC  C0AF  F18F         	movff	_fData,_velocidadMasa
  2927  006800  C0B0  F190         	movff	_fData+1,_velocidadMasa+1
  2928  006804  C0B1  F191         	movff	_fData+2,_velocidadMasa+2
  2929                           
  2930                           ; BSR set to: 0
  2931                           ;sysParams.h: 193: calcSysVars();
  2932  006808  EC64  F035         	call	_calcSysVars	;wreg free
  2933  00680C  0012               	return		;funcret
  2934  00680E                     __end_of_sysParamInit:
  2935                           	opt stack 0
  2936                           tblptru	equ	0xFF8
  2937                           tblptrh	equ	0xFF7
  2938                           tblptrl	equ	0xFF6
  2939                           tablat	equ	0xFF5
  2940                           postinc0	equ	0xFEE
  2941                           wreg	equ	0xFE8
  2942                           postdec1	equ	0xFE5
  2943                           fsr1l	equ	0xFE1
  2944                           
  2945 ;; *************** function _readEEPROM *****************
  2946 ;; Defined at:
  2947 ;;		line 64 in file "source/sysParams.h"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;  adr             1    wreg     unsigned char 
  2950 ;; Auto vars:     Size  Location     Type
  2951 ;;  adr             1    0[BANK1 ] unsigned char 
  2952 ;; Return value:  Size  Location     Type
  2953 ;;                  1    wreg      unsigned char 
  2954 ;; Registers used:
  2955 ;;		wreg, status,2
  2956 ;; Tracked objects:
  2957 ;;		On entry : 0/0
  2958 ;;		On exit  : 0/0
  2959 ;;		Unchanged: 0/0
  2960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2961 ;;      Params:         0       0       0       0       0       0       0
  2962 ;;      Locals:         0       0       1       0       0       0       0
  2963 ;;      Temps:          0       0       0       0       0       0       0
  2964 ;;      Totals:         0       0       1       0       0       0       0
  2965 ;;Total ram usage:        1 bytes
  2966 ;; Hardware stack levels used:    1
  2967 ;; Hardware stack levels required when called:   12
  2968 ;; This function calls:
  2969 ;;		Nothing
  2970 ;; This function is called by:
  2971 ;;		_sysParamInit
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           	psect	text3
  2976  0072C6                     __ptext3:
  2977                           	opt stack 0
  2978  0072C6                     _readEEPROM:
  2979                           	opt stack 17
  2980                           
  2981                           ;incstack = 0
  2982                           ;readEEPROM@adr stored from wreg
  2983  0072C6  0101               	movlb	1	; () banked
  2984  0072C8  6F00               	movwf	readEEPROM@adr& (0+255),b
  2985                           
  2986                           ;sysParams.h: 65: EEADR = adr;
  2987  0072CA  C100  FFA9         	movff	readEEPROM@adr,4009	;volatile
  2988                           
  2989                           ;sysParams.h: 66: EECON1bits.EEPGD = 0;
  2990  0072CE  9EA6               	bcf	4006,7,c	;volatile
  2991                           
  2992                           ;sysParams.h: 67: EECON1bits.CFGS = 0;
  2993  0072D0  9CA6               	bcf	4006,6,c	;volatile
  2994                           
  2995                           ;sysParams.h: 68: EECON1bits.RD = 1;
  2996  0072D2  80A6               	bsf	4006,0,c	;volatile
  2997  0072D4                     l287:
  2998  0072D4  B0A6               	btfsc	4006,0,c	;volatile
  2999  0072D6  D7FE               	goto	l287
  3000                           
  3001                           ;sysParams.h: 70: return EEDATA;
  3002  0072D8  50A8               	movf	4008,w,c	;volatile
  3003  0072DA  0012               	return		;funcret
  3004  0072DC                     __end_of_readEEPROM:
  3005                           	opt stack 0
  3006                           tblptru	equ	0xFF8
  3007                           tblptrh	equ	0xFF7
  3008                           tblptrl	equ	0xFF6
  3009                           tablat	equ	0xFF5
  3010                           postinc0	equ	0xFEE
  3011                           wreg	equ	0xFE8
  3012                           postdec1	equ	0xFE5
  3013                           fsr1l	equ	0xFE1
  3014                           
  3015 ;; *************** function _calcSysVars *****************
  3016 ;; Defined at:
  3017 ;;		line 78 in file "source/sysParams.h"
  3018 ;; Parameters:    Size  Location     Type
  3019 ;;		None
  3020 ;; Auto vars:     Size  Location     Type
  3021 ;;  temp            3   35[BANK1 ] float 
  3022 ;; Return value:  Size  Location     Type
  3023 ;;                  1    wreg      void 
  3024 ;; Registers used:
  3025 ;;		wreg, status,2, status,0, cstack
  3026 ;; Tracked objects:
  3027 ;;		On entry : 0/0
  3028 ;;		On exit  : 0/0
  3029 ;;		Unchanged: 0/0
  3030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3031 ;;      Params:         0       0       0       0       0       0       0
  3032 ;;      Locals:         0       0       3       0       0       0       0
  3033 ;;      Temps:          0       0       0       0       0       0       0
  3034 ;;      Totals:         0       0       3       0       0       0       0
  3035 ;;Total ram usage:        3 bytes
  3036 ;; Hardware stack levels used:    1
  3037 ;; Hardware stack levels required when called:   14
  3038 ;; This function calls:
  3039 ;;		___ftmul
  3040 ;; This function is called by:
  3041 ;;		_sysParamInit
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           	psect	text4
  3046  006AC8                     __ptext4:
  3047                           	opt stack 0
  3048  006AC8                     _calcSysVars:
  3049                           	opt stack 15
  3050                           
  3051                           ;sysParams.h: 79: float temp = 0;
  3052                           
  3053                           ;incstack = 0
  3054  006AC8  0E00               	movlw	0
  3055  006ACA  0101               	movlb	1	; () banked
  3056  006ACC  6F23               	movwf	calcSysVars@temp& (0+255),b
  3057  006ACE  0E00               	movlw	0
  3058  006AD0  0101               	movlb	1	; () banked
  3059  006AD2  6F24               	movwf	(calcSysVars@temp+1)& (0+255),b
  3060  006AD4  0E00               	movlw	0
  3061  006AD6  0101               	movlb	1	; () banked
  3062  006AD8  6F25               	movwf	(calcSysVars@temp+2)& (0+255),b
  3063                           
  3064                           ; BSR set to: 1
  3065                           ;sysParams.h: 80: timsXcorte = (float)tiXcorte * 1000;
  3066  006ADA  C195  F114         	movff	_tiXcorte,___ftmul@f1
  3067  006ADE  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
  3068  006AE2  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
  3069  006AE6  0E00               	movlw	0
  3070  006AE8  0101               	movlb	1	; () banked
  3071  006AEA  6F17               	movwf	___ftmul@f2& (0+255),b
  3072  006AEC  0E7A               	movlw	122
  3073  006AEE  0101               	movlb	1	; () banked
  3074  006AF0  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  3075  006AF2  0E44               	movlw	68
  3076  006AF4  0101               	movlb	1	; () banked
  3077  006AF6  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  3078  006AF8  EC1F  F01D         	call	___ftmul	;wreg free
  3079  006AFC  C114  F053         	movff	?___ftmul,_timsXcorte
  3080  006B00  C115  F054         	movff	?___ftmul+1,_timsXcorte+1
  3081  006B04  C116  F055         	movff	?___ftmul+2,_timsXcorte+2
  3082                           
  3083                           ;sysParams.h: 86: kgXcorte = (float)velocidadMasa * tiXcorte;
  3084  006B08  C18F  F114         	movff	_velocidadMasa,___ftmul@f1
  3085  006B0C  C190  F115         	movff	_velocidadMasa+1,___ftmul@f1+1
  3086  006B10  C191  F116         	movff	_velocidadMasa+2,___ftmul@f1+2
  3087  006B14  C195  F117         	movff	_tiXcorte,___ftmul@f2
  3088  006B18  C196  F118         	movff	_tiXcorte+1,___ftmul@f2+1
  3089  006B1C  C197  F119         	movff	_tiXcorte+2,___ftmul@f2+2
  3090  006B20  EC1F  F01D         	call	___ftmul	;wreg free
  3091  006B24  C114  F198         	movff	?___ftmul,_kgXcorte
  3092  006B28  C115  F199         	movff	?___ftmul+1,_kgXcorte+1
  3093  006B2C  C116  F19A         	movff	?___ftmul+2,_kgXcorte+2
  3094  006B30  0012               	return		;funcret
  3095  006B32                     __end_of_calcSysVars:
  3096                           	opt stack 0
  3097                           tblptru	equ	0xFF8
  3098                           tblptrh	equ	0xFF7
  3099                           tblptrl	equ	0xFF6
  3100                           tablat	equ	0xFF5
  3101                           postinc0	equ	0xFEE
  3102                           wreg	equ	0xFE8
  3103                           postdec1	equ	0xFE5
  3104                           fsr1l	equ	0xFE1
  3105                           
  3106 ;; *************** function _setPWM2on *****************
  3107 ;; Defined at:
  3108 ;;		line 183 in file "source/PWMConfig.h"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;  on              1    wreg     unsigned char 
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;  on              1    0[BANK1 ] unsigned char 
  3113 ;; Return value:  Size  Location     Type
  3114 ;;                  1    wreg      void 
  3115 ;; Registers used:
  3116 ;;		wreg, status,2
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3122 ;;      Params:         0       0       0       0       0       0       0
  3123 ;;      Locals:         0       0       1       0       0       0       0
  3124 ;;      Temps:          0       0       0       0       0       0       0
  3125 ;;      Totals:         0       0       1       0       0       0       0
  3126 ;;Total ram usage:        1 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:   12
  3129 ;; This function calls:
  3130 ;;		Nothing
  3131 ;; This function is called by:
  3132 ;;		_main
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           	psect	text5
  3137  007294                     __ptext5:
  3138                           	opt stack 0
  3139  007294                     _setPWM2on:
  3140                           	opt stack 18
  3141                           
  3142                           ;incstack = 0
  3143                           ;setPWM2on@on stored from wreg
  3144  007294  0101               	movlb	1	; () banked
  3145  007296  6F00               	movwf	setPWM2on@on& (0+255),b
  3146                           
  3147                           ;PWMConfig.h: 184: if(on) {
  3148  007298  0101               	movlb	1	; () banked
  3149  00729A  5100               	movf	setPWM2on@on& (0+255),w,b
  3150  00729C  0101               	movlb	1	; () banked
  3151  00729E  B4D8               	btfsc	status,2,c
  3152  0072A0  D003               	goto	l535
  3153                           
  3154                           ; BSR set to: 1
  3155                           ;PWMConfig.h: 185: TRISCbits.TRISC0 = 0;
  3156  0072A2  9094               	bcf	3988,0,c	;volatile
  3157                           
  3158                           ;PWMConfig.h: 186: TRISCbits.TRISC1 = 0;
  3159  0072A4  9294               	bcf	3988,1,c	;volatile
  3160                           
  3161                           ;PWMConfig.h: 187: }else {
  3162  0072A6  0012               	return	
  3163  0072A8                     l535:
  3164                           
  3165                           ; BSR set to: 1
  3166                           ;PWMConfig.h: 188: TRISCbits.TRISC0 = 1;
  3167  0072A8  8094               	bsf	3988,0,c	;volatile
  3168                           
  3169                           ;PWMConfig.h: 189: TRISCbits.TRISC1 = 1;
  3170  0072AA  8294               	bsf	3988,1,c	;volatile
  3171  0072AC  0012               	return	
  3172  0072AE                     __end_of_setPWM2on:
  3173                           	opt stack 0
  3174                           tblptru	equ	0xFF8
  3175                           tblptrh	equ	0xFF7
  3176                           tblptrl	equ	0xFF6
  3177                           tablat	equ	0xFF5
  3178                           postinc0	equ	0xFEE
  3179                           wreg	equ	0xFE8
  3180                           postdec1	equ	0xFE5
  3181                           fsr1l	equ	0xFE1
  3182                           status	equ	0xFD8
  3183                           
  3184 ;; *************** function _lcd_init *****************
  3185 ;; Defined at:
  3186 ;;		line 179 in file "source/../../vclib_lcd.h"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;		None
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;  LCD_INIT_STR    4    9[BANK1 ] unsigned char [4]
  3191 ;;  i               1   13[BANK1 ] unsigned char 
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      void 
  3194 ;; Registers used:
  3195 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 0/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3201 ;;      Params:         0       0       0       0       0       0       0
  3202 ;;      Locals:         0       0       5       0       0       0       0
  3203 ;;      Temps:          0       0       1       0       0       0       0
  3204 ;;      Totals:         0       0       6       0       0       0       0
  3205 ;;Total ram usage:        6 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; Hardware stack levels required when called:   15
  3208 ;; This function calls:
  3209 ;;		_lcd_send_4bits
  3210 ;;		_lcd_send_byte
  3211 ;; This function is called by:
  3212 ;;		_main
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text6
  3217  005C92                     __ptext6:
  3218                           	opt stack 0
  3219  005C92                     _lcd_init:
  3220                           	opt stack 15
  3221                           
  3222                           ;vclib_lcd.h: 180: unsigned char i;
  3223                           ;vclib_lcd.h: 181: unsigned char LCD_INIT_STRING[4] = {0x20 | (2 << 2), 0xc, 1, 6};
  3224                           
  3225                           ; BSR set to: 1
  3226                           ;incstack = 0
  3227  005C92  C0C9  F109         	movff	lcd_init@F6841,lcd_init@LCD_INIT_STRING
  3228  005C96  C0CA  F10A         	movff	lcd_init@F6841+1,lcd_init@LCD_INIT_STRING+1
  3229  005C9A  C0CB  F10B         	movff	lcd_init@F6841+2,lcd_init@LCD_INIT_STRING+2
  3230  005C9E  C0CC  F10C         	movff	lcd_init@F6841+3,lcd_init@LCD_INIT_STRING+3
  3231                           
  3232                           ;vclib_lcd.h: 184: PORTBbits.RB3 = 0;
  3233  005CA2  9681               	bcf	3969,3,c	;volatile
  3234                           
  3235                           ;vclib_lcd.h: 185: PORTBbits.RB1 = 0;
  3236  005CA4  9281               	bcf	3969,1,c	;volatile
  3237                           
  3238                           ;vclib_lcd.h: 186: PORTBbits.RB2 = 0;
  3239  005CA6  9481               	bcf	3969,2,c	;volatile
  3240                           
  3241                           ;vclib_lcd.h: 187: _delay((unsigned long)((15)*(16000000/4000.0)));
  3242  005CA8  0E4E               	movlw	78
  3243  005CAA  0101               	movlb	1	; () banked
  3244  005CAC  6F08               	movwf	??_lcd_init& (0+255),b
  3245  005CAE  0EEB               	movlw	235
  3246  005CB0                     u17997:
  3247  005CB0  2EE8               	decfsz	wreg,f,c
  3248  005CB2  D7FE               	bra	u17997
  3249  005CB4  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3250  005CB6  D7FC               	bra	u17997
  3251                           
  3252                           ;vclib_lcd.h: 188: for (i = 1; i <= 3; ++i) {
  3253  005CB8  0E01               	movlw	1
  3254  005CBA  0101               	movlb	1	; () banked
  3255  005CBC  6F0D               	movwf	lcd_init@i& (0+255),b
  3256  005CBE                     l11612:
  3257                           
  3258                           ; BSR set to: 1
  3259  005CBE  0E03               	movlw	3
  3260  005CC0  0101               	movlb	1	; () banked
  3261  005CC2  650D               	cpfsgt	lcd_init@i& (0+255),b
  3262  005CC4  D001               	goto	l11616
  3263  005CC6  D00F               	goto	l11624
  3264  005CC8                     l11616:
  3265                           
  3266                           ; BSR set to: 1
  3267                           ;vclib_lcd.h: 189: lcd_send_4bits(3);
  3268  005CC8  0E03               	movlw	3
  3269  005CCA  EC3B  F031         	call	_lcd_send_4bits
  3270                           
  3271                           ;vclib_lcd.h: 190: _delay((unsigned long)((5)*(16000000/4000.0)));
  3272  005CCE  0E1A               	movlw	26
  3273  005CD0  0101               	movlb	1	; () banked
  3274  005CD2  6F08               	movwf	??_lcd_init& (0+255),b
  3275  005CD4  0EF8               	movlw	248
  3276  005CD6                     u18007:
  3277  005CD6  2EE8               	decfsz	wreg,f,c
  3278  005CD8  D7FE               	bra	u18007
  3279  005CDA  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3280  005CDC  D7FC               	bra	u18007
  3281  005CDE  F000               	nop	
  3282  005CE0  0101               	movlb	1	; () banked
  3283  005CE2  2B0D               	incf	lcd_init@i& (0+255),f,b
  3284  005CE4  D7EC               	goto	l11612
  3285  005CE6                     l11624:
  3286                           
  3287                           ; BSR set to: 1
  3288                           ;vclib_lcd.h: 191: }
  3289                           ;vclib_lcd.h: 192: lcd_send_4bits(2);
  3290  005CE6  0E02               	movlw	2
  3291  005CE8  EC3B  F031         	call	_lcd_send_4bits
  3292                           
  3293                           ;vclib_lcd.h: 193: _delay((unsigned long)((5)*(16000000/4000.0)));
  3294  005CEC  0E1A               	movlw	26
  3295  005CEE  0101               	movlb	1	; () banked
  3296  005CF0  6F08               	movwf	??_lcd_init& (0+255),b
  3297  005CF2  0EF8               	movlw	248
  3298  005CF4                     u18017:
  3299  005CF4  2EE8               	decfsz	wreg,f,c
  3300  005CF6  D7FE               	bra	u18017
  3301  005CF8  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3302  005CFA  D7FC               	bra	u18017
  3303  005CFC  F000               	nop	
  3304                           
  3305                           ;vclib_lcd.h: 194: for (i = 0; i <= 3; ++i)
  3306  005CFE  0E00               	movlw	0
  3307  005D00  0101               	movlb	1	; () banked
  3308  005D02  6F0D               	movwf	lcd_init@i& (0+255),b
  3309  005D04                     l11630:
  3310                           
  3311                           ; BSR set to: 1
  3312  005D04  0E03               	movlw	3
  3313  005D06  0101               	movlb	1	; () banked
  3314  005D08  650D               	cpfsgt	lcd_init@i& (0+255),b
  3315  005D0A  D001               	goto	l11634
  3316  005D0C  0012               	return	
  3317  005D0E                     l11634:
  3318                           
  3319                           ; BSR set to: 1
  3320                           ;vclib_lcd.h: 195: lcd_send_byte(0, LCD_INIT_STRING[i]);
  3321  005D0E  0101               	movlb	1	; () banked
  3322  005D10  510D               	movf	lcd_init@i& (0+255),w,b
  3323  005D12  0D01               	mullw	1
  3324  005D14  0E09               	movlw	low lcd_init@LCD_INIT_STRING
  3325  005D16  24F3               	addwf	prodl,w,c
  3326  005D18  6ED9               	movwf	fsr2l,c
  3327  005D1A  0E01               	movlw	high lcd_init@LCD_INIT_STRING
  3328  005D1C  20F4               	addwfc	prodh,w,c
  3329  005D1E  6EDA               	movwf	fsr2h,c
  3330  005D20  50DF               	movf	indf2,w,c
  3331  005D22  0101               	movlb	1	; () banked
  3332  005D24  6F05               	movwf	lcd_send_byte@n& (0+255),b
  3333  005D26  0E00               	movlw	0
  3334  005D28  EC81  F037         	call	_lcd_send_byte
  3335  005D2C  0101               	movlb	1	; () banked
  3336  005D2E  2B0D               	incf	lcd_init@i& (0+255),f,b
  3337  005D30  D7E9               	goto	l11630
  3338  005D32                     __end_of_lcd_init:
  3339                           	opt stack 0
  3340                           tblptru	equ	0xFF8
  3341                           tblptrh	equ	0xFF7
  3342                           tblptrl	equ	0xFF6
  3343                           tablat	equ	0xFF5
  3344                           prodh	equ	0xFF4
  3345                           prodl	equ	0xFF3
  3346                           postinc0	equ	0xFEE
  3347                           wreg	equ	0xFE8
  3348                           postdec1	equ	0xFE5
  3349                           fsr1l	equ	0xFE1
  3350                           indf2	equ	0xFDF
  3351                           fsr2h	equ	0xFDA
  3352                           fsr2l	equ	0xFD9
  3353                           status	equ	0xFD8
  3354                           
  3355 ;; *************** function _ioInitStt *****************
  3356 ;; Defined at:
  3357 ;;		line 86 in file "source/IOConfig.h"
  3358 ;; Parameters:    Size  Location     Type
  3359 ;;		None
  3360 ;; Auto vars:     Size  Location     Type
  3361 ;;		None
  3362 ;; Return value:  Size  Location     Type
  3363 ;;                  1    wreg      void 
  3364 ;; Registers used:
  3365 ;;		None
  3366 ;; Tracked objects:
  3367 ;;		On entry : 0/0
  3368 ;;		On exit  : 0/0
  3369 ;;		Unchanged: 0/0
  3370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3371 ;;      Params:         0       0       0       0       0       0       0
  3372 ;;      Locals:         0       0       0       0       0       0       0
  3373 ;;      Temps:          0       0       0       0       0       0       0
  3374 ;;      Totals:         0       0       0       0       0       0       0
  3375 ;;Total ram usage:        0 bytes
  3376 ;; Hardware stack levels used:    1
  3377 ;; Hardware stack levels required when called:   12
  3378 ;; This function calls:
  3379 ;;		Nothing
  3380 ;; This function is called by:
  3381 ;;		_main
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           	psect	text7
  3386  007390                     __ptext7:
  3387                           	opt stack 0
  3388  007390                     _ioInitStt:
  3389                           	opt stack 18
  3390                           
  3391                           ;IOConfig.h: 87: LATCbits.LATC4 = 0;
  3392                           
  3393                           ; BSR set to: 1
  3394                           ;incstack = 0
  3395  007390  988B               	bcf	3979,4,c	;volatile
  3396                           
  3397                           ;IOConfig.h: 88: LATBbits.LATB0 = 0;
  3398  007392  908A               	bcf	3978,0,c	;volatile
  3399                           
  3400                           ;IOConfig.h: 89: LATCbits.LATC5 = 0;
  3401  007394  9A8B               	bcf	3979,5,c	;volatile
  3402  007396  0012               	return		;funcret
  3403  007398                     __end_of_ioInitStt:
  3404                           	opt stack 0
  3405                           tblptru	equ	0xFF8
  3406                           tblptrh	equ	0xFF7
  3407                           tblptrl	equ	0xFF6
  3408                           tablat	equ	0xFF5
  3409                           prodh	equ	0xFF4
  3410                           prodl	equ	0xFF3
  3411                           postinc0	equ	0xFEE
  3412                           wreg	equ	0xFE8
  3413                           postdec1	equ	0xFE5
  3414                           fsr1l	equ	0xFE1
  3415                           indf2	equ	0xFDF
  3416                           fsr2h	equ	0xFDA
  3417                           fsr2l	equ	0xFD9
  3418                           status	equ	0xFD8
  3419                           
  3420 ;; *************** function _ioConfig *****************
  3421 ;; Defined at:
  3422 ;;		line 69 in file "source/IOConfig.h"
  3423 ;; Parameters:    Size  Location     Type
  3424 ;;		None
  3425 ;; Auto vars:     Size  Location     Type
  3426 ;;		None
  3427 ;; Return value:  Size  Location     Type
  3428 ;;                  1    wreg      void 
  3429 ;; Registers used:
  3430 ;;		None
  3431 ;; Tracked objects:
  3432 ;;		On entry : 0/0
  3433 ;;		On exit  : 0/0
  3434 ;;		Unchanged: 0/0
  3435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3436 ;;      Params:         0       0       0       0       0       0       0
  3437 ;;      Locals:         0       0       0       0       0       0       0
  3438 ;;      Temps:          0       0       0       0       0       0       0
  3439 ;;      Totals:         0       0       0       0       0       0       0
  3440 ;;Total ram usage:        0 bytes
  3441 ;; Hardware stack levels used:    1
  3442 ;; Hardware stack levels required when called:   12
  3443 ;; This function calls:
  3444 ;;		Nothing
  3445 ;; This function is called by:
  3446 ;;		_main
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           	psect	text8
  3451  006FEE                     __ptext8:
  3452                           	opt stack 0
  3453  006FEE                     _ioConfig:
  3454                           	opt stack 18
  3455                           
  3456                           ;IOConfig.h: 70: TRISBbits.TRISB1 = 0;
  3457                           
  3458                           ;incstack = 0
  3459  006FEE  9293               	bcf	3987,1,c	;volatile
  3460                           
  3461                           ;IOConfig.h: 71: TRISBbits.TRISB2 = 0;
  3462  006FF0  9493               	bcf	3987,2,c	;volatile
  3463                           
  3464                           ;IOConfig.h: 72: TRISBbits.TRISB3 = 0;
  3465  006FF2  9693               	bcf	3987,3,c	;volatile
  3466                           
  3467                           ;IOConfig.h: 73: TRISBbits.TRISB0 = 0;
  3468  006FF4  9093               	bcf	3987,0,c	;volatile
  3469                           
  3470                           ;IOConfig.h: 74: TRISCbits.TRISC5 = 0;
  3471  006FF6  9A94               	bcf	3988,5,c	;volatile
  3472                           
  3473                           ;IOConfig.h: 75: TRISAbits.TRISA7 = 1;
  3474  006FF8  8E92               	bsf	3986,7,c	;volatile
  3475                           
  3476                           ;IOConfig.h: 76: TRISAbits.TRISA6 = 1;
  3477  006FFA  8C92               	bsf	3986,6,c	;volatile
  3478                           
  3479                           ;IOConfig.h: 77: TRISCbits.TRISC2 = 1; ANSELCbits.ANSC2 = 0;
  3480  006FFC  8494               	bsf	3988,2,c	;volatile
  3481  006FFE  010F               	movlb	15	; () banked
  3482  007000  953A               	bcf	58,2,b	;volatile
  3483                           
  3484                           ;IOConfig.h: 78: TRISCbits.TRISC3 = 1; ANSELCbits.ANSC3 = 0;
  3485  007002  8694               	bsf	3988,3,c	;volatile
  3486  007004  010F               	movlb	15	; () banked
  3487  007006  973A               	bcf	58,3,b	;volatile
  3488                           
  3489                           ;IOConfig.h: 79: TRISAbits.TRISA2 = 1; ANSELAbits.ANSA2 = 0;
  3490  007008  8492               	bsf	3986,2,c	;volatile
  3491  00700A  010F               	movlb	15	; () banked
  3492  00700C  9538               	bcf	56,2,b	;volatile
  3493                           
  3494                           ;IOConfig.h: 80: TRISAbits.TRISA3 = 1; ANSELAbits.ANSA3 = 0;
  3495  00700E  8692               	bsf	3986,3,c	;volatile
  3496  007010  010F               	movlb	15	; () banked
  3497  007012  9738               	bcf	56,3,b	;volatile
  3498                           
  3499                           ;IOConfig.h: 81: TRISAbits.TRISA4 = 1;
  3500  007014  8892               	bsf	3986,4,c	;volatile
  3501                           
  3502                           ;IOConfig.h: 82: TRISAbits.TRISA5 = 1; ANSELAbits.ANSA5 = 0;
  3503  007016  8A92               	bsf	3986,5,c	;volatile
  3504  007018  010F               	movlb	15	; () banked
  3505  00701A  9B38               	bcf	56,5,b	;volatile
  3506                           
  3507                           ;IOConfig.h: 83: TRISCbits.TRISC4 = 0;
  3508  00701C  9894               	bcf	3988,4,c	;volatile
  3509                           
  3510                           ; BSR set to: 15
  3511  00701E  0012               	return		;funcret
  3512  007020                     __end_of_ioConfig:
  3513                           	opt stack 0
  3514                           tblptru	equ	0xFF8
  3515                           tblptrh	equ	0xFF7
  3516                           tblptrl	equ	0xFF6
  3517                           tablat	equ	0xFF5
  3518                           prodh	equ	0xFF4
  3519                           prodl	equ	0xFF3
  3520                           postinc0	equ	0xFEE
  3521                           wreg	equ	0xFE8
  3522                           postdec1	equ	0xFE5
  3523                           fsr1l	equ	0xFE1
  3524                           indf2	equ	0xFDF
  3525                           fsr2h	equ	0xFDA
  3526                           fsr2l	equ	0xFD9
  3527                           status	equ	0xFD8
  3528                           
  3529 ;; *************** function _interruptConfig *****************
  3530 ;; Defined at:
  3531 ;;		line 89 in file "source/SYSConfig.h"
  3532 ;; Parameters:    Size  Location     Type
  3533 ;;		None
  3534 ;; Auto vars:     Size  Location     Type
  3535 ;;		None
  3536 ;; Return value:  Size  Location     Type
  3537 ;;                  1    wreg      void 
  3538 ;; Registers used:
  3539 ;;		None
  3540 ;; Tracked objects:
  3541 ;;		On entry : 0/0
  3542 ;;		On exit  : 0/0
  3543 ;;		Unchanged: 0/0
  3544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3545 ;;      Params:         0       0       0       0       0       0       0
  3546 ;;      Locals:         0       0       0       0       0       0       0
  3547 ;;      Temps:          0       0       0       0       0       0       0
  3548 ;;      Totals:         0       0       0       0       0       0       0
  3549 ;;Total ram usage:        0 bytes
  3550 ;; Hardware stack levels used:    1
  3551 ;; Hardware stack levels required when called:   12
  3552 ;; This function calls:
  3553 ;;		Nothing
  3554 ;; This function is called by:
  3555 ;;		_main
  3556 ;; This function uses a non-reentrant model
  3557 ;;
  3558                           
  3559                           	psect	text9
  3560  007398                     __ptext9:
  3561                           	opt stack 0
  3562  007398                     _interruptConfig:
  3563                           	opt stack 18
  3564                           
  3565                           ;SYSConfig.h: 90: RCONbits.IPEN = 1;
  3566                           
  3567                           ; BSR set to: 15
  3568                           ;incstack = 0
  3569  007398  8ED0               	bsf	4048,7,c	;volatile
  3570                           
  3571                           ;SYSConfig.h: 91: INTCONbits.PEIE = 1;
  3572  00739A  8CF2               	bsf	intcon,6,c	;volatile
  3573                           
  3574                           ;SYSConfig.h: 92: INTCONbits.GIE = 1;
  3575  00739C  8EF2               	bsf	intcon,7,c	;volatile
  3576  00739E  0012               	return		;funcret
  3577  0073A0                     __end_of_interruptConfig:
  3578                           	opt stack 0
  3579                           tblptru	equ	0xFF8
  3580                           tblptrh	equ	0xFF7
  3581                           tblptrl	equ	0xFF6
  3582                           tablat	equ	0xFF5
  3583                           prodh	equ	0xFF4
  3584                           prodl	equ	0xFF3
  3585                           intcon	equ	0xFF2
  3586                           postinc0	equ	0xFEE
  3587                           wreg	equ	0xFE8
  3588                           postdec1	equ	0xFE5
  3589                           fsr1l	equ	0xFE1
  3590                           indf2	equ	0xFDF
  3591                           fsr2h	equ	0xFDA
  3592                           fsr2l	equ	0xFD9
  3593                           status	equ	0xFD8
  3594                           
  3595 ;; *************** function _drawScreen *****************
  3596 ;; Defined at:
  3597 ;;		line 250 in file "source/screenDrawers.h"
  3598 ;; Parameters:    Size  Location     Type
  3599 ;;		None
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;		None
  3602 ;; Return value:  Size  Location     Type
  3603 ;;                  1    wreg      void 
  3604 ;; Registers used:
  3605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3606 ;; Tracked objects:
  3607 ;;		On entry : 0/0
  3608 ;;		On exit  : 0/0
  3609 ;;		Unchanged: 0/0
  3610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3611 ;;      Params:         0       0       0       0       0       0       0
  3612 ;;      Locals:         0       0       0       0       0       0       0
  3613 ;;      Temps:          0       0       0       0       0       0       0
  3614 ;;      Totals:         0       0       0       0       0       0       0
  3615 ;;Total ram usage:        0 bytes
  3616 ;; Hardware stack levels used:    1
  3617 ;; Hardware stack levels required when called:   21
  3618 ;; This function calls:
  3619 ;;		_drawAdvON
  3620 ;;		_drawAutoCalibRM
  3621 ;;		_drawBadPass
  3622 ;;		_drawCalibProc
  3623 ;;		_drawChanVal
  3624 ;;		_drawCutError
  3625 ;;		_drawMenu
  3626 ;;		_drawPassWord
  3627 ;;		_drawReady2Cut
  3628 ;;		_drawSNquest
  3629 ;; This function is called by:
  3630 ;;		_main
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           	psect	text10
  3635  0051F2                     __ptext10:
  3636                           	opt stack 0
  3637  0051F2                     _drawScreen:
  3638                           	opt stack 9
  3639                           
  3640                           ;screenDrawers.h: 251: switch (actualScreen) {
  3641                           
  3642                           ;incstack = 0
  3643  0051F2  D039               	goto	l11692
  3644  0051F4                     l11658:
  3645                           
  3646                           ;screenDrawers.h: 253: drawMenu(0);
  3647  0051F4  0E00               	movlw	0
  3648  0051F6  EC35  F018         	call	_drawMenu
  3649                           
  3650                           ;screenDrawers.h: 254: break;
  3651  0051FA  0012               	return	
  3652  0051FC                     l11660:
  3653                           
  3654                           ;screenDrawers.h: 256: drawPassWord();
  3655  0051FC  EC83  F028         	call	_drawPassWord	;wreg free
  3656                           
  3657                           ;screenDrawers.h: 257: break;
  3658  005200  0012               	return	
  3659  005202                     l11662:
  3660                           
  3661                           ;screenDrawers.h: 259: drawBadPass();
  3662  005202  EC6E  F039         	call	_drawBadPass	;wreg free
  3663                           
  3664                           ;screenDrawers.h: 260: break;
  3665  005206  0012               	return	
  3666  005208                     l11664:
  3667                           
  3668                           ;screenDrawers.h: 262: drawMenu(1);
  3669  005208  0E01               	movlw	1
  3670  00520A  EC35  F018         	call	_drawMenu
  3671                           
  3672                           ;screenDrawers.h: 263: break;
  3673  00520E  0012               	return	
  3674  005210                     l11666:
  3675                           
  3676                           ;screenDrawers.h: 265: drawAdvON(1);
  3677  005210  0E01               	movlw	1
  3678  005212  EC59  F036         	call	_drawAdvON
  3679                           
  3680                           ;screenDrawers.h: 266: break;
  3681  005216  0012               	return	
  3682  005218                     l11668:
  3683                           
  3684                           ;screenDrawers.h: 268: drawAdvON(0);
  3685  005218  0E00               	movlw	0
  3686  00521A  EC59  F036         	call	_drawAdvON
  3687                           
  3688                           ;screenDrawers.h: 269: break;
  3689  00521E  0012               	return	
  3690  005220                     l11670:
  3691                           
  3692                           ;screenDrawers.h: 271: drawChanVal();
  3693  005220  EC56  F032         	call	_drawChanVal	;wreg free
  3694                           
  3695                           ;screenDrawers.h: 272: break;
  3696  005224  0012               	return	
  3697  005226                     l11672:
  3698                           
  3699                           ;screenDrawers.h: 274: drawSNquest(0);
  3700  005226  0E00               	movlw	0
  3701  005228  ECE3  F024         	call	_drawSNquest
  3702                           
  3703                           ;screenDrawers.h: 275: break;
  3704  00522C  0012               	return	
  3705  00522E                     l11674:
  3706                           
  3707                           ;screenDrawers.h: 277: drawSNquest(1);
  3708  00522E  0E01               	movlw	1
  3709  005230  ECE3  F024         	call	_drawSNquest
  3710                           
  3711                           ;screenDrawers.h: 278: break;
  3712  005234  0012               	return	
  3713  005236                     l11676:
  3714                           
  3715                           ;screenDrawers.h: 280: drawSNquest(2);
  3716  005236  0E02               	movlw	2
  3717  005238  ECE3  F024         	call	_drawSNquest
  3718                           
  3719                           ;screenDrawers.h: 281: break;
  3720  00523C  0012               	return	
  3721  00523E                     l11678:
  3722                           
  3723                           ;screenDrawers.h: 283: drawSNquest(3);
  3724  00523E  0E03               	movlw	3
  3725  005240  ECE3  F024         	call	_drawSNquest
  3726                           
  3727                           ;screenDrawers.h: 284: break;
  3728  005244  0012               	return	
  3729  005246                     l11680:
  3730                           
  3731                           ;screenDrawers.h: 286: drawCalibProc();
  3732  005246  EC10  F032         	call	_drawCalibProc	;wreg free
  3733                           
  3734                           ;screenDrawers.h: 287: break;
  3735  00524A  0012               	return	
  3736  00524C                     l11682:
  3737                           
  3738                           ;screenDrawers.h: 289: drawAutoCalibRM();
  3739  00524C  EC10  F038         	call	_drawAutoCalibRM	;wreg free
  3740                           
  3741                           ;screenDrawers.h: 290: break;
  3742  005250  0012               	return	
  3743  005252                     l11684:
  3744                           
  3745                           ;screenDrawers.h: 292: drawCutError();
  3746  005252  EC70  F038         	call	_drawCutError	;wreg free
  3747                           
  3748                           ;screenDrawers.h: 293: break;
  3749  005256  0012               	return	
  3750  005258                     l11686:
  3751                           
  3752                           ;screenDrawers.h: 295: drawReady2Cut();
  3753  005258  EC59  F038         	call	_drawReady2Cut	;wreg free
  3754                           
  3755                           ;screenDrawers.h: 296: break;
  3756  00525C  0012               	return	
  3757  00525E                     l11688:
  3758                           
  3759                           ;screenDrawers.h: 298: drawSNquest(4);
  3760  00525E  0E04               	movlw	4
  3761  005260  ECE3  F024         	call	_drawSNquest
  3762                           
  3763                           ;screenDrawers.h: 300: }
  3764                           ;screenDrawers.h: 301: }
  3765                           
  3766                           ;screenDrawers.h: 299: break;
  3767  005264  0012               	return	
  3768  005266                     l11692:
  3769  005266  0101               	movlb	1	; () banked
  3770  005268  51BD               	movf	_actualScreen& (0+255),w,b
  3771                           
  3772                           ; Switch size 1, requested type "space"
  3773                           ; Number of cases is 16, Range of values is 0 to 15
  3774                           ; switch strategies available:
  3775                           ; Name         Instructions Cycles
  3776                           ; simple_byte           49    25 (average)
  3777                           ;	Chosen strategy is simple_byte
  3778  00526A  0A00               	xorlw	0	; case 0
  3779  00526C  B4D8               	btfsc	status,2,c
  3780  00526E  D7C2               	goto	l11658
  3781  005270  0A01               	xorlw	1	; case 1
  3782  005272  B4D8               	btfsc	status,2,c
  3783  005274  D7C3               	goto	l11660
  3784  005276  0A03               	xorlw	3	; case 2
  3785  005278  B4D8               	btfsc	status,2,c
  3786  00527A  D7D5               	goto	l11672
  3787  00527C  0A01               	xorlw	1	; case 3
  3788  00527E  B4D8               	btfsc	status,2,c
  3789  005280  D7D6               	goto	l11674
  3790  005282  0A07               	xorlw	7	; case 4
  3791  005284  B4D8               	btfsc	status,2,c
  3792  005286  D7C0               	goto	l11664
  3793  005288  0A01               	xorlw	1	; case 5
  3794  00528A  B4D8               	btfsc	status,2,c
  3795  00528C  D7C9               	goto	l11670
  3796  00528E  0A03               	xorlw	3	; case 6
  3797  005290  B4D8               	btfsc	status,2,c
  3798  005292  D7D9               	goto	l11680
  3799  005294  0A01               	xorlw	1	; case 7
  3800  005296  B4D8               	btfsc	status,2,c
  3801  005298  D7B4               	goto	l11662
  3802  00529A  0A0F               	xorlw	15	; case 8
  3803  00529C  B4D8               	btfsc	status,2,c
  3804  00529E  D7B8               	goto	l11666
  3805  0052A0  0A01               	xorlw	1	; case 9
  3806  0052A2  B4D8               	btfsc	status,2,c
  3807  0052A4  D7B9               	goto	l11668
  3808  0052A6  0A03               	xorlw	3	; case 10
  3809  0052A8  B4D8               	btfsc	status,2,c
  3810  0052AA  D7C5               	goto	l11676
  3811  0052AC  0A01               	xorlw	1	; case 11
  3812  0052AE  B4D8               	btfsc	status,2,c
  3813  0052B0  D7C6               	goto	l11678
  3814  0052B2  0A07               	xorlw	7	; case 12
  3815  0052B4  B4D8               	btfsc	status,2,c
  3816  0052B6  D7CA               	goto	l11682
  3817  0052B8  0A01               	xorlw	1	; case 13
  3818  0052BA  B4D8               	btfsc	status,2,c
  3819  0052BC  D7CA               	goto	l11684
  3820  0052BE  0A03               	xorlw	3	; case 14
  3821  0052C0  B4D8               	btfsc	status,2,c
  3822  0052C2  D7CA               	goto	l11686
  3823  0052C4  0A01               	xorlw	1	; case 15
  3824  0052C6  A4D8               	btfss	status,2,c
  3825  0052C8  0012               	return	
  3826  0052CA  D7C9               	goto	l11688
  3827  0052CC                     __end_of_drawScreen:
  3828                           	opt stack 0
  3829                           tblptru	equ	0xFF8
  3830                           tblptrh	equ	0xFF7
  3831                           tblptrl	equ	0xFF6
  3832                           tablat	equ	0xFF5
  3833                           prodh	equ	0xFF4
  3834                           prodl	equ	0xFF3
  3835                           intcon	equ	0xFF2
  3836                           postinc0	equ	0xFEE
  3837                           wreg	equ	0xFE8
  3838                           postdec1	equ	0xFE5
  3839                           fsr1l	equ	0xFE1
  3840                           indf2	equ	0xFDF
  3841                           fsr2h	equ	0xFDA
  3842                           fsr2l	equ	0xFD9
  3843                           status	equ	0xFD8
  3844                           
  3845 ;; *************** function _drawSNquest *****************
  3846 ;; Defined at:
  3847 ;;		line 198 in file "source/screenDrawers.h"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;  tq              1    wreg     unsigned char 
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  tq              1  118[BANK1 ] unsigned char 
  3852 ;;  i               2  116[BANK1 ] int 
  3853 ;; Return value:  Size  Location     Type
  3854 ;;                  1    wreg      void 
  3855 ;; Registers used:
  3856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3857 ;; Tracked objects:
  3858 ;;		On entry : 0/0
  3859 ;;		On exit  : 0/0
  3860 ;;		Unchanged: 0/0
  3861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3862 ;;      Params:         0       0       0       0       0       0       0
  3863 ;;      Locals:         0       0       3       0       0       0       0
  3864 ;;      Temps:          0       0       0       0       0       0       0
  3865 ;;      Totals:         0       0       3       0       0       0       0
  3866 ;;Total ram usage:        3 bytes
  3867 ;; Hardware stack levels used:    1
  3868 ;; Hardware stack levels required when called:   19
  3869 ;; This function calls:
  3870 ;;		_lcd_gotoxy
  3871 ;;		_printf
  3872 ;; This function is called by:
  3873 ;;		_drawScreen
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text11
  3878  0049C6                     __ptext11:
  3879                           	opt stack 0
  3880  0049C6                     _drawSNquest:
  3881                           	opt stack 10
  3882                           
  3883                           ;incstack = 0
  3884                           ;drawSNquest@tq stored from wreg
  3885  0049C6  0101               	movlb	1	; () banked
  3886  0049C8  6F76               	movwf	drawSNquest@tq& (0+255),b
  3887                           
  3888                           ;screenDrawers.h: 199: int i;
  3889                           ;screenDrawers.h: 200: for (i = 0; i < 2; i++)
  3890  0049CA  0E00               	movlw	0
  3891  0049CC  0101               	movlb	1	; () banked
  3892  0049CE  6F75               	movwf	(drawSNquest@i+1)& (0+255),b
  3893  0049D0  0E00               	movlw	0
  3894  0049D2  6F74               	movwf	drawSNquest@i& (0+255),b
  3895  0049D4                     l11014:
  3896                           
  3897                           ; BSR set to: 1
  3898  0049D4  0101               	movlb	1	; () banked
  3899  0049D6  BF75               	btfsc	(drawSNquest@i+1)& (0+255),7,b
  3900  0049D8  D008               	goto	l11018
  3901  0049DA  0101               	movlb	1	; () banked
  3902  0049DC  5175               	movf	(drawSNquest@i+1)& (0+255),w,b
  3903  0049DE  E113               	bnz	l11024
  3904  0049E0  0E02               	movlw	2
  3905  0049E2  0101               	movlb	1	; () banked
  3906  0049E4  5D74               	subwf	drawSNquest@i& (0+255),w,b
  3907  0049E6  B0D8               	btfsc	status,0,c
  3908  0049E8  D00E               	goto	l11024
  3909  0049EA                     l11018:
  3910                           
  3911                           ; BSR set to: 1
  3912                           ;screenDrawers.h: 201: questSN[i] = ' ';
  3913  0049EA  0EB4               	movlw	low _questSN
  3914  0049EC  0101               	movlb	1	; () banked
  3915  0049EE  2574               	addwf	drawSNquest@i& (0+255),w,b
  3916  0049F0  6ED9               	movwf	fsr2l,c
  3917  0049F2  0E01               	movlw	high _questSN
  3918  0049F4  0101               	movlb	1	; () banked
  3919  0049F6  2175               	addwfc	(drawSNquest@i+1)& (0+255),w,b
  3920  0049F8  6EDA               	movwf	fsr2h,c
  3921  0049FA  0E20               	movlw	32
  3922  0049FC  6EDF               	movwf	indf2,c
  3923                           
  3924                           ; BSR set to: 1
  3925  0049FE  0101               	movlb	1	; () banked
  3926  004A00  4B74               	infsnz	drawSNquest@i& (0+255),f,b
  3927  004A02  2B75               	incf	(drawSNquest@i+1)& (0+255),f,b
  3928  004A04  D7E7               	goto	l11014
  3929  004A06                     l11024:
  3930                           
  3931                           ; BSR set to: 1
  3932                           ;screenDrawers.h: 202: questSN[selSN] = flech;
  3933  004A06  0101               	movlb	1	; () banked
  3934  004A08  51BA               	movf	_selSN& (0+255),w,b
  3935  004A0A  0D01               	mullw	1
  3936  004A0C  0EB4               	movlw	low _questSN
  3937  004A0E  24F3               	addwf	prodl,w,c
  3938  004A10  6ED9               	movwf	fsr2l,c
  3939  004A12  0E01               	movlw	high _questSN
  3940  004A14  20F4               	addwfc	prodh,w,c
  3941  004A16  6EDA               	movwf	fsr2h,c
  3942  004A18  C19B  FFDF         	movff	_flech,indf2
  3943                           
  3944                           ; BSR set to: 1
  3945                           ;screenDrawers.h: 203: lcd_gotoxy(1, 1);
  3946  004A1C  0E01               	movlw	1
  3947  004A1E  0101               	movlb	1	; () banked
  3948  004A20  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  3949  004A22  0E01               	movlw	1
  3950  004A24  EC29  F038         	call	_lcd_gotoxy
  3951                           
  3952                           ;screenDrawers.h: 204: if (tq == 0)
  3953  004A28  0101               	movlb	1	; () banked
  3954  004A2A  5176               	movf	drawSNquest@tq& (0+255),w,b
  3955  004A2C  0101               	movlb	1	; () banked
  3956  004A2E  A4D8               	btfss	status,2,c
  3957  004A30  D009               	goto	l11032
  3958                           
  3959                           ; BSR set to: 1
  3960                           ;screenDrawers.h: 205: printf("Iniciar Proceso?\n");
  3961  004A32  0E88               	movlw	low STR_26
  3962  004A34  0101               	movlb	1	; () banked
  3963  004A36  6F3F               	movwf	printf@f& (0+255),b
  3964  004A38  0E7E               	movlw	high STR_26
  3965  004A3A  0101               	movlb	1	; () banked
  3966  004A3C  6F40               	movwf	(printf@f+1)& (0+255),b
  3967  004A3E  EC61  F000         	call	_printf	;wreg free
  3968  004A42  D036               	goto	l418
  3969  004A44                     l11032:
  3970                           
  3971                           ;screenDrawers.h: 206: else if(tq == 1)
  3972  004A44  0101               	movlb	1	; () banked
  3973  004A46  0576               	decf	drawSNquest@tq& (0+255),w,b
  3974  004A48  A4D8               	btfss	status,2,c
  3975  004A4A  D009               	goto	l11036
  3976                           
  3977                           ; BSR set to: 1
  3978                           ;screenDrawers.h: 207: printf("Detener Proceso?\n");
  3979  004A4C  0E9A               	movlw	low STR_27
  3980  004A4E  0101               	movlb	1	; () banked
  3981  004A50  6F3F               	movwf	printf@f& (0+255),b
  3982  004A52  0E7E               	movlw	high STR_27
  3983  004A54  0101               	movlb	1	; () banked
  3984  004A56  6F40               	movwf	(printf@f+1)& (0+255),b
  3985  004A58  EC61  F000         	call	_printf	;wreg free
  3986  004A5C  D029               	goto	l418
  3987  004A5E                     l11036:
  3988                           
  3989                           ;screenDrawers.h: 208: else if(tq == 2)
  3990  004A5E  0E02               	movlw	2
  3991  004A60  0101               	movlb	1	; () banked
  3992  004A62  1976               	xorwf	drawSNquest@tq& (0+255),w,b
  3993  004A64  A4D8               	btfss	status,2,c
  3994  004A66  D009               	goto	l11040
  3995                           
  3996                           ; BSR set to: 1
  3997                           ;screenDrawers.h: 209: printf("Guardar Cambio? \n");
  3998  004A68  0E40               	movlw	low STR_28
  3999  004A6A  0101               	movlb	1	; () banked
  4000  004A6C  6F3F               	movwf	printf@f& (0+255),b
  4001  004A6E  0E7E               	movlw	high STR_28
  4002  004A70  0101               	movlb	1	; () banked
  4003  004A72  6F40               	movwf	(printf@f+1)& (0+255),b
  4004  004A74  EC61  F000         	call	_printf	;wreg free
  4005  004A78  D01B               	goto	l418
  4006  004A7A                     l11040:
  4007                           
  4008                           ;screenDrawers.h: 210: else if(tq == 3)
  4009  004A7A  0E03               	movlw	3
  4010  004A7C  0101               	movlb	1	; () banked
  4011  004A7E  1976               	xorwf	drawSNquest@tq& (0+255),w,b
  4012  004A80  A4D8               	btfss	status,2,c
  4013  004A82  D009               	goto	l11044
  4014                           
  4015                           ; BSR set to: 1
  4016                           ;screenDrawers.h: 211: printf("Init AutoCalib? \n");
  4017  004A84  0E2E               	movlw	low STR_29
  4018  004A86  0101               	movlb	1	; () banked
  4019  004A88  6F3F               	movwf	printf@f& (0+255),b
  4020  004A8A  0E7E               	movlw	high STR_29
  4021  004A8C  0101               	movlb	1	; () banked
  4022  004A8E  6F40               	movwf	(printf@f+1)& (0+255),b
  4023  004A90  EC61  F000         	call	_printf	;wreg free
  4024  004A94  D00D               	goto	l418
  4025  004A96                     l11044:
  4026                           
  4027                           ;screenDrawers.h: 212: else if(tq == 4)
  4028  004A96  0E04               	movlw	4
  4029  004A98  0101               	movlb	1	; () banked
  4030  004A9A  1976               	xorwf	drawSNquest@tq& (0+255),w,b
  4031  004A9C  A4D8               	btfss	status,2,c
  4032  004A9E  D008               	goto	l418
  4033                           
  4034                           ; BSR set to: 1
  4035                           ;screenDrawers.h: 213: printf("Stop AutoCalib? \n");
  4036  004AA0  0E1C               	movlw	low STR_30
  4037  004AA2  0101               	movlb	1	; () banked
  4038  004AA4  6F3F               	movwf	printf@f& (0+255),b
  4039  004AA6  0E7E               	movlw	high STR_30
  4040  004AA8  0101               	movlb	1	; () banked
  4041  004AAA  6F40               	movwf	(printf@f+1)& (0+255),b
  4042  004AAC  EC61  F000         	call	_printf	;wreg free
  4043  004AB0                     l418:
  4044                           
  4045                           ;screenDrawers.h: 214: printf("   %cSI    %cNO   ", questSN[0], questSN[1]);
  4046  004AB0  0E8B               	movlw	low STR_31
  4047  004AB2  0101               	movlb	1	; () banked
  4048  004AB4  6F3F               	movwf	printf@f& (0+255),b
  4049  004AB6  0E7D               	movlw	high STR_31
  4050  004AB8  0101               	movlb	1	; () banked
  4051  004ABA  6F40               	movwf	(printf@f+1)& (0+255),b
  4052  004ABC  C1B4  F141         	movff	_questSN,?_printf+2
  4053  004AC0  0101               	movlb	1	; () banked
  4054  004AC2  6B42               	clrf	(?_printf+3)& (0+255),b
  4055  004AC4  C1B5  F143         	movff	_questSN+1,?_printf+4
  4056  004AC8  0101               	movlb	1	; () banked
  4057  004ACA  6B44               	clrf	(?_printf+5)& (0+255),b
  4058  004ACC  EC61  F000         	call	_printf	;wreg free
  4059  004AD0  0012               	return		;funcret
  4060  004AD2                     __end_of_drawSNquest:
  4061                           	opt stack 0
  4062                           tblptru	equ	0xFF8
  4063                           tblptrh	equ	0xFF7
  4064                           tblptrl	equ	0xFF6
  4065                           tablat	equ	0xFF5
  4066                           prodh	equ	0xFF4
  4067                           prodl	equ	0xFF3
  4068                           intcon	equ	0xFF2
  4069                           postinc0	equ	0xFEE
  4070                           wreg	equ	0xFE8
  4071                           postdec1	equ	0xFE5
  4072                           fsr1l	equ	0xFE1
  4073                           indf2	equ	0xFDF
  4074                           fsr2h	equ	0xFDA
  4075                           fsr2l	equ	0xFD9
  4076                           status	equ	0xFD8
  4077                           
  4078 ;; *************** function _drawReady2Cut *****************
  4079 ;; Defined at:
  4080 ;;		line 230 in file "source/screenDrawers.h"
  4081 ;; Parameters:    Size  Location     Type
  4082 ;;		None
  4083 ;; Auto vars:     Size  Location     Type
  4084 ;;		None
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  1    wreg      void 
  4087 ;; Registers used:
  4088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4094 ;;      Params:         0       0       0       0       0       0       0
  4095 ;;      Locals:         0       0       0       0       0       0       0
  4096 ;;      Temps:          0       0       0       0       0       0       0
  4097 ;;      Totals:         0       0       0       0       0       0       0
  4098 ;;Total ram usage:        0 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:   19
  4101 ;; This function calls:
  4102 ;;		_lcd_gotoxy
  4103 ;;		_printf
  4104 ;; This function is called by:
  4105 ;;		_drawScreen
  4106 ;; This function uses a non-reentrant model
  4107 ;;
  4108                           
  4109                           	psect	text12
  4110  0070B2                     __ptext12:
  4111                           	opt stack 0
  4112  0070B2                     _drawReady2Cut:
  4113                           	opt stack 10
  4114                           
  4115                           ;screenDrawers.h: 231: lcd_gotoxy(1, 1);
  4116                           
  4117                           ;incstack = 0
  4118  0070B2  0E01               	movlw	1
  4119  0070B4  0101               	movlb	1	; () banked
  4120  0070B6  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4121  0070B8  0E01               	movlw	1
  4122  0070BA  EC29  F038         	call	_lcd_gotoxy
  4123                           
  4124                           ;screenDrawers.h: 232: printf("   Enter para:  \n");
  4125  0070BE  0EE6               	movlw	low STR_36
  4126  0070C0  0101               	movlb	1	; () banked
  4127  0070C2  6F3F               	movwf	printf@f& (0+255),b
  4128  0070C4  0E7D               	movlw	high STR_36
  4129  0070C6  0101               	movlb	1	; () banked
  4130  0070C8  6F40               	movwf	(printf@f+1)& (0+255),b
  4131  0070CA  EC61  F000         	call	_printf	;wreg free
  4132                           
  4133                           ;screenDrawers.h: 233: printf("Empezar a cortar");
  4134  0070CE  0ED7               	movlw	low STR_37
  4135  0070D0  0101               	movlb	1	; () banked
  4136  0070D2  6F3F               	movwf	printf@f& (0+255),b
  4137  0070D4  0E7F               	movlw	high STR_37
  4138  0070D6  0101               	movlb	1	; () banked
  4139  0070D8  6F40               	movwf	(printf@f+1)& (0+255),b
  4140  0070DA  EC61  F000         	call	_printf	;wreg free
  4141  0070DE  0012               	return		;funcret
  4142  0070E0                     __end_of_drawReady2Cut:
  4143                           	opt stack 0
  4144                           tblptru	equ	0xFF8
  4145                           tblptrh	equ	0xFF7
  4146                           tblptrl	equ	0xFF6
  4147                           tablat	equ	0xFF5
  4148                           prodh	equ	0xFF4
  4149                           prodl	equ	0xFF3
  4150                           intcon	equ	0xFF2
  4151                           postinc0	equ	0xFEE
  4152                           wreg	equ	0xFE8
  4153                           postdec1	equ	0xFE5
  4154                           fsr1l	equ	0xFE1
  4155                           indf2	equ	0xFDF
  4156                           fsr2h	equ	0xFDA
  4157                           fsr2l	equ	0xFD9
  4158                           status	equ	0xFD8
  4159                           
  4160 ;; *************** function _drawPassWord *****************
  4161 ;; Defined at:
  4162 ;;		line 166 in file "source/screenDrawers.h"
  4163 ;; Parameters:    Size  Location     Type
  4164 ;;		None
  4165 ;; Auto vars:     Size  Location     Type
  4166 ;;  i               2  116[BANK1 ] int 
  4167 ;; Return value:  Size  Location     Type
  4168 ;;                  1    wreg      void 
  4169 ;; Registers used:
  4170 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4176 ;;      Params:         0       0       0       0       0       0       0
  4177 ;;      Locals:         0       0       2       0       0       0       0
  4178 ;;      Temps:          0       0       0       0       0       0       0
  4179 ;;      Totals:         0       0       2       0       0       0       0
  4180 ;;Total ram usage:        2 bytes
  4181 ;; Hardware stack levels used:    1
  4182 ;; Hardware stack levels required when called:   20
  4183 ;; This function calls:
  4184 ;;		_drawPass1Lin
  4185 ;;		_printf
  4186 ;; This function is called by:
  4187 ;;		_drawScreen
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           	psect	text13
  4192  005106                     __ptext13:
  4193                           	opt stack 0
  4194  005106                     _drawPassWord:
  4195                           	opt stack 9
  4196                           
  4197                           ;screenDrawers.h: 167: if (!fd) {
  4198                           
  4199                           ;incstack = 0
  4200  005106  0101               	movlb	1	; () banked
  4201  005108  51B9               	movf	_fd& (0+255),w,b
  4202  00510A  A4D8               	btfss	status,2,c
  4203  00510C  D012               	goto	l401
  4204                           
  4205                           ; BSR set to: 1
  4206                           ;screenDrawers.h: 168: passSection = 0;
  4207  00510E  0E00               	movlw	0
  4208  005110  0101               	movlb	1	; () banked
  4209  005112  6FBB               	movwf	_passSection& (0+255),b
  4210                           
  4211                           ;screenDrawers.h: 169: introducido[0] = 0;
  4212  005114  0E00               	movlw	0
  4213  005116  0101               	movlb	1	; () banked
  4214  005118  6FAD               	movwf	_introducido& (0+255),b
  4215                           
  4216                           ;screenDrawers.h: 170: introducido[1] = 0;
  4217  00511A  0E00               	movlw	0
  4218  00511C  0101               	movlb	1	; () banked
  4219  00511E  6FAE               	movwf	(_introducido+1)& (0+255),b
  4220                           
  4221                           ;screenDrawers.h: 171: introducido[2] = 0;
  4222  005120  0E00               	movlw	0
  4223  005122  0101               	movlb	1	; () banked
  4224  005124  6FAF               	movwf	(_introducido+2)& (0+255),b
  4225                           
  4226                           ;screenDrawers.h: 172: introducido[3] = 0;
  4227  005126  0E00               	movlw	0
  4228  005128  0101               	movlb	1	; () banked
  4229  00512A  6FB0               	movwf	(_introducido+3)& (0+255),b
  4230                           
  4231                           ;screenDrawers.h: 173: fd = 1;
  4232  00512C  0E01               	movlw	1
  4233  00512E  0101               	movlb	1	; () banked
  4234  005130  6FB9               	movwf	_fd& (0+255),b
  4235  005132                     l401:
  4236                           
  4237                           ; BSR set to: 1
  4238                           ;screenDrawers.h: 174: }
  4239                           ;screenDrawers.h: 175: int i;
  4240                           ;screenDrawers.h: 176: for (i = 0; i < 4; i++)
  4241  005132  0E00               	movlw	0
  4242  005134  0101               	movlb	1	; () banked
  4243  005136  6F75               	movwf	(drawPassWord@i+1)& (0+255),b
  4244  005138  0E00               	movlw	0
  4245  00513A  6F74               	movwf	drawPassWord@i& (0+255),b
  4246  00513C                     l10984:
  4247                           
  4248                           ; BSR set to: 1
  4249  00513C  0101               	movlb	1	; () banked
  4250  00513E  BF75               	btfsc	(drawPassWord@i+1)& (0+255),7,b
  4251  005140  D008               	goto	l10988
  4252  005142  0101               	movlb	1	; () banked
  4253  005144  5175               	movf	(drawPassWord@i+1)& (0+255),w,b
  4254  005146  E113               	bnz	l10994
  4255  005148  0E04               	movlw	4
  4256  00514A  0101               	movlb	1	; () banked
  4257  00514C  5D74               	subwf	drawPassWord@i& (0+255),w,b
  4258  00514E  B0D8               	btfsc	status,0,c
  4259  005150  D00E               	goto	l10994
  4260  005152                     l10988:
  4261                           
  4262                           ; BSR set to: 1
  4263                           ;screenDrawers.h: 177: passChar[i] = ' ';
  4264  005152  0EA9               	movlw	low _passChar
  4265  005154  0101               	movlb	1	; () banked
  4266  005156  2574               	addwf	drawPassWord@i& (0+255),w,b
  4267  005158  6ED9               	movwf	fsr2l,c
  4268  00515A  0E01               	movlw	high _passChar
  4269  00515C  0101               	movlb	1	; () banked
  4270  00515E  2175               	addwfc	(drawPassWord@i+1)& (0+255),w,b
  4271  005160  6EDA               	movwf	fsr2h,c
  4272  005162  0E20               	movlw	32
  4273  005164  6EDF               	movwf	indf2,c
  4274                           
  4275                           ; BSR set to: 1
  4276  005166  0101               	movlb	1	; () banked
  4277  005168  4B74               	infsnz	drawPassWord@i& (0+255),f,b
  4278  00516A  2B75               	incf	(drawPassWord@i+1)& (0+255),f,b
  4279  00516C  D7E7               	goto	l10984
  4280  00516E                     l10994:
  4281                           
  4282                           ; BSR set to: 1
  4283                           ;screenDrawers.h: 178: passChar[passSection] = flech;
  4284  00516E  0101               	movlb	1	; () banked
  4285  005170  51BB               	movf	_passSection& (0+255),w,b
  4286  005172  0D01               	mullw	1
  4287  005174  0EA9               	movlw	low _passChar
  4288  005176  24F3               	addwf	prodl,w,c
  4289  005178  6ED9               	movwf	fsr2l,c
  4290  00517A  0E01               	movlw	high _passChar
  4291  00517C  20F4               	addwfc	prodh,w,c
  4292  00517E  6EDA               	movwf	fsr2h,c
  4293  005180  C19B  FFDF         	movff	_flech,indf2
  4294                           
  4295                           ; BSR set to: 1
  4296                           ;screenDrawers.h: 179: drawPass1Lin();
  4297  005184  EC3B  F039         	call	_drawPass1Lin	;wreg free
  4298                           
  4299                           ;screenDrawers.h: 180: printf("    %c%u%c%u%c%u%c%u    ", passChar[0], introducido[0], p
      +                          assChar[1], introducido[1],
  4300                           ;screenDrawers.h: 181: passChar[2], introducido[2], passChar[3], introducido[3]);
  4301  005188  0E4B               	movlw	low STR_21
  4302  00518A  0101               	movlb	1	; () banked
  4303  00518C  6F3F               	movwf	printf@f& (0+255),b
  4304  00518E  0E7D               	movlw	high STR_21
  4305  005190  0101               	movlb	1	; () banked
  4306  005192  6F40               	movwf	(printf@f+1)& (0+255),b
  4307  005194  C1A9  F141         	movff	_passChar,?_printf+2
  4308  005198  0101               	movlb	1	; () banked
  4309  00519A  6B42               	clrf	(?_printf+3)& (0+255),b
  4310  00519C  0101               	movlb	1	; () banked
  4311  00519E  51AD               	movf	_introducido& (0+255),w,b
  4312  0051A0  0101               	movlb	1	; () banked
  4313  0051A2  6F43               	movwf	(?_printf+4)& (0+255),b
  4314  0051A4  6B44               	clrf	(?_printf+5)& (0+255),b
  4315  0051A6  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  4316  0051A8  0744               	decf	(?_printf+5)& (0+255),f,b
  4317  0051AA  C1AA  F145         	movff	_passChar+1,?_printf+6
  4318  0051AE  0101               	movlb	1	; () banked
  4319  0051B0  6B46               	clrf	(?_printf+7)& (0+255),b
  4320  0051B2  0101               	movlb	1	; () banked
  4321  0051B4  51AE               	movf	(_introducido+1)& (0+255),w,b
  4322  0051B6  0101               	movlb	1	; () banked
  4323  0051B8  6F47               	movwf	(?_printf+8)& (0+255),b
  4324  0051BA  6B48               	clrf	(?_printf+9)& (0+255),b
  4325  0051BC  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  4326  0051BE  0748               	decf	(?_printf+9)& (0+255),f,b
  4327  0051C0  C1AB  F149         	movff	_passChar+2,?_printf+10
  4328  0051C4  0101               	movlb	1	; () banked
  4329  0051C6  6B4A               	clrf	(?_printf+11)& (0+255),b
  4330  0051C8  0101               	movlb	1	; () banked
  4331  0051CA  51AF               	movf	(_introducido+2)& (0+255),w,b
  4332  0051CC  0101               	movlb	1	; () banked
  4333  0051CE  6F4B               	movwf	(?_printf+12)& (0+255),b
  4334  0051D0  6B4C               	clrf	(?_printf+13)& (0+255),b
  4335  0051D2  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  4336  0051D4  074C               	decf	(?_printf+13)& (0+255),f,b
  4337  0051D6  C1AC  F14D         	movff	_passChar+3,?_printf+14
  4338  0051DA  0101               	movlb	1	; () banked
  4339  0051DC  6B4E               	clrf	(?_printf+15)& (0+255),b
  4340  0051DE  0101               	movlb	1	; () banked
  4341  0051E0  51B0               	movf	(_introducido+3)& (0+255),w,b
  4342  0051E2  0101               	movlb	1	; () banked
  4343  0051E4  6F4F               	movwf	(?_printf+16)& (0+255),b
  4344  0051E6  6B50               	clrf	(?_printf+17)& (0+255),b
  4345  0051E8  BF4F               	btfsc	(?_printf+16)& (0+255),7,b
  4346  0051EA  0750               	decf	(?_printf+17)& (0+255),f,b
  4347  0051EC  EC61  F000         	call	_printf	;wreg free
  4348  0051F0  0012               	return		;funcret
  4349  0051F2                     __end_of_drawPassWord:
  4350                           	opt stack 0
  4351                           tblptru	equ	0xFF8
  4352                           tblptrh	equ	0xFF7
  4353                           tblptrl	equ	0xFF6
  4354                           tablat	equ	0xFF5
  4355                           prodh	equ	0xFF4
  4356                           prodl	equ	0xFF3
  4357                           intcon	equ	0xFF2
  4358                           postinc0	equ	0xFEE
  4359                           wreg	equ	0xFE8
  4360                           postdec1	equ	0xFE5
  4361                           fsr1l	equ	0xFE1
  4362                           indf2	equ	0xFDF
  4363                           fsr2h	equ	0xFDA
  4364                           fsr2l	equ	0xFD9
  4365                           status	equ	0xFD8
  4366                           
  4367 ;; *************** function _drawMenu *****************
  4368 ;; Defined at:
  4369 ;;		line 91 in file "source/screenDrawers.h"
  4370 ;; Parameters:    Size  Location     Type
  4371 ;;  adv             1    wreg     unsigned char 
  4372 ;; Auto vars:     Size  Location     Type
  4373 ;;  adv             1  116[BANK1 ] unsigned char 
  4374 ;; Return value:  Size  Location     Type
  4375 ;;                  1    wreg      void 
  4376 ;; Registers used:
  4377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4378 ;; Tracked objects:
  4379 ;;		On entry : 0/0
  4380 ;;		On exit  : 0/0
  4381 ;;		Unchanged: 0/0
  4382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4383 ;;      Params:         0       0       0       0       0       0       0
  4384 ;;      Locals:         0       0       1       0       0       0       0
  4385 ;;      Temps:          0       0       0       0       0       0       0
  4386 ;;      Totals:         0       0       1       0       0       0       0
  4387 ;;Total ram usage:        1 bytes
  4388 ;; Hardware stack levels used:    1
  4389 ;; Hardware stack levels required when called:   19
  4390 ;; This function calls:
  4391 ;;		_lcd_gotoxy
  4392 ;;		_lcd_putc
  4393 ;;		_printf
  4394 ;; This function is called by:
  4395 ;;		_drawScreen
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text14
  4400  00306A                     __ptext14:
  4401                           	opt stack 0
  4402  00306A                     _drawMenu:
  4403                           	opt stack 10
  4404                           
  4405                           ;incstack = 0
  4406                           ;drawMenu@adv stored from wreg
  4407  00306A  0101               	movlb	1	; () banked
  4408  00306C  6F74               	movwf	drawMenu@adv& (0+255),b
  4409                           
  4410                           ;screenDrawers.h: 92: switch (menuSection) {
  4411  00306E  D0C9               	goto	l10958
  4412  003070                     l10904:
  4413                           
  4414                           ;screenDrawers.h: 94: lcd_gotoxy(1, 1);
  4415  003070  0E01               	movlw	1
  4416  003072  0101               	movlb	1	; () banked
  4417  003074  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4418  003076  0E01               	movlw	1
  4419  003078  EC29  F038         	call	_lcd_gotoxy
  4420                           
  4421                           ;screenDrawers.h: 95: printf("Estado proceso: \n");
  4422  00307C  0E0A               	movlw	low STR_7
  4423  00307E  0101               	movlb	1	; () banked
  4424  003080  6F3F               	movwf	printf@f& (0+255),b
  4425  003082  0E7E               	movlw	high STR_7
  4426  003084  0101               	movlb	1	; () banked
  4427  003086  6F40               	movwf	(printf@f+1)& (0+255),b
  4428  003088  EC61  F000         	call	_printf	;wreg free
  4429                           
  4430                           ;screenDrawers.h: 96: if (adv)
  4431  00308C  0101               	movlb	1	; () banked
  4432  00308E  5174               	movf	drawMenu@adv& (0+255),w,b
  4433  003090  0101               	movlb	1	; () banked
  4434  003092  B4D8               	btfsc	status,2,c
  4435  003094  D004               	goto	l10912
  4436                           
  4437                           ; BSR set to: 1
  4438                           ;screenDrawers.h: 97: lcd_putc('A');
  4439  003096  0E41               	movlw	65
  4440  003098  EC16  F033         	call	_lcd_putc
  4441  00309C  D003               	goto	l373
  4442  00309E                     l10912:
  4443                           
  4444                           ;screenDrawers.h: 98: else
  4445                           ;screenDrawers.h: 99: lcd_putc(' ');
  4446  00309E  0E20               	movlw	32
  4447  0030A0  EC16  F033         	call	_lcd_putc
  4448  0030A4                     l373:
  4449                           
  4450                           ;screenDrawers.h: 100: lcd_gotoxy(2, 2);
  4451  0030A4  0E02               	movlw	2
  4452  0030A6  0101               	movlb	1	; () banked
  4453  0030A8  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4454  0030AA  0E02               	movlw	2
  4455  0030AC  EC29  F038         	call	_lcd_gotoxy
  4456                           
  4457                           ;screenDrawers.h: 101: if(processStarted)
  4458  0030B0  0100               	movlb	0	; () banked
  4459  0030B2  51C0               	movf	_processStarted& (0+255),w,b
  4460  0030B4  B4D8               	btfsc	status,2,c
  4461  0030B6  D011               	goto	l10918
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;screenDrawers.h: 102: printf("   %d / %d       ", processState, numCortes);
  4465  0030B8  0ED0               	movlw	low STR_8
  4466  0030BA  0101               	movlb	1	; () banked
  4467  0030BC  6F3F               	movwf	printf@f& (0+255),b
  4468  0030BE  0E7E               	movlw	high STR_8
  4469  0030C0  0101               	movlb	1	; () banked
  4470  0030C2  6F40               	movwf	(printf@f+1)& (0+255),b
  4471  0030C4  C0B2  F141         	movff	_processState,?_printf+2
  4472  0030C8  C0B3  F142         	movff	_processState+1,?_printf+3
  4473  0030CC  C0D2  F143         	movff	_numCortes,?_printf+4
  4474  0030D0  C0D3  F144         	movff	_numCortes+1,?_printf+5
  4475  0030D4  EC61  F000         	call	_printf	;wreg free
  4476  0030D8  0012               	return	
  4477  0030DA                     l10918:
  4478                           
  4479                           ;screenDrawers.h: 103: else
  4480                           ;screenDrawers.h: 104: printf("    Detenido       ");
  4481  0030DA  0E64               	movlw	low STR_9
  4482  0030DC  0101               	movlb	1	; () banked
  4483  0030DE  6F3F               	movwf	printf@f& (0+255),b
  4484  0030E0  0E7D               	movlw	high STR_9
  4485  0030E2  0101               	movlb	1	; () banked
  4486  0030E4  6F40               	movwf	(printf@f+1)& (0+255),b
  4487  0030E6  EC61  F000         	call	_printf	;wreg free
  4488                           
  4489                           ;screenDrawers.h: 105: break;
  4490  0030EA  0012               	return	
  4491  0030EC                     l10920:
  4492                           
  4493                           ;screenDrawers.h: 107: lcd_gotoxy(1, 1);
  4494  0030EC  0E01               	movlw	1
  4495  0030EE  0101               	movlb	1	; () banked
  4496  0030F0  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4497  0030F2  0E01               	movlw	1
  4498  0030F4  EC29  F038         	call	_lcd_gotoxy
  4499                           
  4500                           ;screenDrawers.h: 108: printf("Valor por Corte:\n");
  4501  0030F8  0E52               	movlw	low STR_10
  4502  0030FA  0101               	movlb	1	; () banked
  4503  0030FC  6F3F               	movwf	printf@f& (0+255),b
  4504  0030FE  0E7E               	movlw	high STR_10
  4505  003100  0101               	movlb	1	; () banked
  4506  003102  6F40               	movwf	(printf@f+1)& (0+255),b
  4507  003104  EC61  F000         	call	_printf	;wreg free
  4508                           
  4509                           ;screenDrawers.h: 109: if (adv)
  4510  003108  0101               	movlb	1	; () banked
  4511  00310A  5174               	movf	drawMenu@adv& (0+255),w,b
  4512  00310C  0101               	movlb	1	; () banked
  4513  00310E  B4D8               	btfsc	status,2,c
  4514  003110  D004               	goto	l10928
  4515                           
  4516                           ; BSR set to: 1
  4517                           ;screenDrawers.h: 110: lcd_putc('A');
  4518  003112  0E41               	movlw	65
  4519  003114  EC16  F033         	call	_lcd_putc
  4520  003118  D003               	goto	l379
  4521  00311A                     l10928:
  4522                           
  4523                           ;screenDrawers.h: 111: else
  4524                           ;screenDrawers.h: 112: lcd_putc(' ');
  4525  00311A  0E20               	movlw	32
  4526  00311C  EC16  F033         	call	_lcd_putc
  4527  003120                     l379:
  4528                           
  4529                           ;screenDrawers.h: 113: lcd_gotoxy(2, 2);
  4530  003120  0E02               	movlw	2
  4531  003122  0101               	movlb	1	; () banked
  4532  003124  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4533  003126  0E02               	movlw	2
  4534  003128  EC29  F038         	call	_lcd_gotoxy
  4535                           
  4536                           ;screenDrawers.h: 114: printf("   %3.3f kg      ", kgXcorte);
  4537  00312C  0EE2               	movlw	low STR_11
  4538  00312E  0101               	movlb	1	; () banked
  4539  003130  6F3F               	movwf	printf@f& (0+255),b
  4540  003132  0E7E               	movlw	high STR_11
  4541  003134  0101               	movlb	1	; () banked
  4542  003136  6F40               	movwf	(printf@f+1)& (0+255),b
  4543  003138  C198  F141         	movff	_kgXcorte,?_printf+2
  4544  00313C  C199  F142         	movff	_kgXcorte+1,?_printf+3
  4545  003140  C19A  F143         	movff	_kgXcorte+2,?_printf+4
  4546  003144  EC61  F000         	call	_printf	;wreg free
  4547                           
  4548                           ;screenDrawers.h: 115: break;
  4549  003148  0012               	return	
  4550  00314A                     l10932:
  4551                           
  4552                           ;screenDrawers.h: 117: lcd_gotoxy(1, 1);
  4553  00314A  0E01               	movlw	1
  4554  00314C  0101               	movlb	1	; () banked
  4555  00314E  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4556  003150  0E01               	movlw	1
  4557  003152  EC29  F038         	call	_lcd_gotoxy
  4558                           
  4559                           ;screenDrawers.h: 118: printf("Cantidad Cortes:\n");
  4560  003156  0E76               	movlw	low STR_12
  4561  003158  0101               	movlb	1	; () banked
  4562  00315A  6F3F               	movwf	printf@f& (0+255),b
  4563  00315C  0E7E               	movlw	high STR_12
  4564  00315E  0101               	movlb	1	; () banked
  4565  003160  6F40               	movwf	(printf@f+1)& (0+255),b
  4566  003162  EC61  F000         	call	_printf	;wreg free
  4567                           
  4568                           ;screenDrawers.h: 119: if (adv)
  4569  003166  0101               	movlb	1	; () banked
  4570  003168  5174               	movf	drawMenu@adv& (0+255),w,b
  4571  00316A  0101               	movlb	1	; () banked
  4572  00316C  B4D8               	btfsc	status,2,c
  4573  00316E  D004               	goto	l10940
  4574                           
  4575                           ; BSR set to: 1
  4576                           ;screenDrawers.h: 120: lcd_putc('A');
  4577  003170  0E41               	movlw	65
  4578  003172  EC16  F033         	call	_lcd_putc
  4579  003176  D003               	goto	l382
  4580  003178                     l10940:
  4581                           
  4582                           ;screenDrawers.h: 121: else
  4583                           ;screenDrawers.h: 122: lcd_putc(' ');
  4584  003178  0E20               	movlw	32
  4585  00317A  EC16  F033         	call	_lcd_putc
  4586  00317E                     l382:
  4587                           
  4588                           ;screenDrawers.h: 123: lcd_gotoxy(2, 2);
  4589  00317E  0E02               	movlw	2
  4590  003180  0101               	movlb	1	; () banked
  4591  003182  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4592  003184  0E02               	movlw	2
  4593  003186  EC29  F038         	call	_lcd_gotoxy
  4594                           
  4595                           ;screenDrawers.h: 124: printf("      %d         ", numCortes);
  4596  00318A  0EBE               	movlw	low STR_13
  4597  00318C  0101               	movlb	1	; () banked
  4598  00318E  6F3F               	movwf	printf@f& (0+255),b
  4599  003190  0E7E               	movlw	high STR_13
  4600  003192  0101               	movlb	1	; () banked
  4601  003194  6F40               	movwf	(printf@f+1)& (0+255),b
  4602  003196  C0D2  F141         	movff	_numCortes,?_printf+2
  4603  00319A  C0D3  F142         	movff	_numCortes+1,?_printf+3
  4604  00319E  EC61  F000         	call	_printf	;wreg free
  4605                           
  4606                           ;screenDrawers.h: 125: break;
  4607  0031A2  0012               	return	
  4608  0031A4                     l10944:
  4609                           
  4610                           ;screenDrawers.h: 127: lcd_gotoxy(1, 1);
  4611  0031A4  0E01               	movlw	1
  4612  0031A6  0101               	movlb	1	; () banked
  4613  0031A8  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4614  0031AA  0E01               	movlw	1
  4615  0031AC  EC29  F038         	call	_lcd_gotoxy
  4616                           
  4617                           ;screenDrawers.h: 128: printf("Velocidad Masa: \n");
  4618  0031B0  0EF8               	movlw	low STR_14
  4619  0031B2  0101               	movlb	1	; () banked
  4620  0031B4  6F3F               	movwf	printf@f& (0+255),b
  4621  0031B6  0E7D               	movlw	high STR_14
  4622  0031B8  0101               	movlb	1	; () banked
  4623  0031BA  6F40               	movwf	(printf@f+1)& (0+255),b
  4624  0031BC  EC61  F000         	call	_printf	;wreg free
  4625                           
  4626                           ;screenDrawers.h: 129: if (adv)
  4627  0031C0  0101               	movlb	1	; () banked
  4628  0031C2  5174               	movf	drawMenu@adv& (0+255),w,b
  4629  0031C4  0101               	movlb	1	; () banked
  4630  0031C6  B4D8               	btfsc	status,2,c
  4631  0031C8  D004               	goto	l10952
  4632                           
  4633                           ; BSR set to: 1
  4634                           ;screenDrawers.h: 130: lcd_putc('A');
  4635  0031CA  0E41               	movlw	65
  4636  0031CC  EC16  F033         	call	_lcd_putc
  4637  0031D0  D003               	goto	l385
  4638  0031D2                     l10952:
  4639                           
  4640                           ;screenDrawers.h: 131: else
  4641                           ;screenDrawers.h: 132: lcd_putc(' ');
  4642  0031D2  0E20               	movlw	32
  4643  0031D4  EC16  F033         	call	_lcd_putc
  4644  0031D8                     l385:
  4645                           
  4646                           ;screenDrawers.h: 133: lcd_gotoxy(2, 2);
  4647  0031D8  0E02               	movlw	2
  4648  0031DA  0101               	movlb	1	; () banked
  4649  0031DC  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4650  0031DE  0E02               	movlw	2
  4651  0031E0  EC29  F038         	call	_lcd_gotoxy
  4652                           
  4653                           ;screenDrawers.h: 134: printf("  %3.3f kg/s      ", velocidadMasa);
  4654  0031E4  0E78               	movlw	low STR_15
  4655  0031E6  0101               	movlb	1	; () banked
  4656  0031E8  6F3F               	movwf	printf@f& (0+255),b
  4657  0031EA  0E7D               	movlw	high STR_15
  4658  0031EC  0101               	movlb	1	; () banked
  4659  0031EE  6F40               	movwf	(printf@f+1)& (0+255),b
  4660  0031F0  C18F  F141         	movff	_velocidadMasa,?_printf+2
  4661  0031F4  C190  F142         	movff	_velocidadMasa+1,?_printf+3
  4662  0031F8  C191  F143         	movff	_velocidadMasa+2,?_printf+4
  4663  0031FC  EC61  F000         	call	_printf	;wreg free
  4664                           
  4665                           ;screenDrawers.h: 136: }
  4666                           ;screenDrawers.h: 137: }
  4667                           
  4668                           ;screenDrawers.h: 135: break;
  4669  003200  0012               	return	
  4670  003202                     l10958:
  4671  003202  0101               	movlb	1	; () banked
  4672  003204  51BC               	movf	_menuSection& (0+255),w,b
  4673                           
  4674                           ; Switch size 1, requested type "space"
  4675                           ; Number of cases is 4, Range of values is 0 to 3
  4676                           ; switch strategies available:
  4677                           ; Name         Instructions Cycles
  4678                           ; simple_byte           13     7 (average)
  4679                           ;	Chosen strategy is simple_byte
  4680  003206  0A00               	xorlw	0	; case 0
  4681  003208  B4D8               	btfsc	status,2,c
  4682  00320A  D732               	goto	l10904
  4683  00320C  0A01               	xorlw	1	; case 1
  4684  00320E  B4D8               	btfsc	status,2,c
  4685  003210  D76D               	goto	l10920
  4686  003212  0A03               	xorlw	3	; case 2
  4687  003214  B4D8               	btfsc	status,2,c
  4688  003216  D799               	goto	l10932
  4689  003218  0A01               	xorlw	1	; case 3
  4690  00321A  A4D8               	btfss	status,2,c
  4691  00321C  0012               	return	
  4692  00321E  D7C2               	goto	l10944
  4693  003220                     __end_of_drawMenu:
  4694                           	opt stack 0
  4695                           tblptru	equ	0xFF8
  4696                           tblptrh	equ	0xFF7
  4697                           tblptrl	equ	0xFF6
  4698                           tablat	equ	0xFF5
  4699                           prodh	equ	0xFF4
  4700                           prodl	equ	0xFF3
  4701                           intcon	equ	0xFF2
  4702                           postinc0	equ	0xFEE
  4703                           wreg	equ	0xFE8
  4704                           postdec1	equ	0xFE5
  4705                           fsr1l	equ	0xFE1
  4706                           indf2	equ	0xFDF
  4707                           fsr2h	equ	0xFDA
  4708                           fsr2l	equ	0xFD9
  4709                           status	equ	0xFD8
  4710                           
  4711 ;; *************** function _drawCutError *****************
  4712 ;; Defined at:
  4713 ;;		line 224 in file "source/screenDrawers.h"
  4714 ;; Parameters:    Size  Location     Type
  4715 ;;		None
  4716 ;; Auto vars:     Size  Location     Type
  4717 ;;		None
  4718 ;; Return value:  Size  Location     Type
  4719 ;;                  1    wreg      void 
  4720 ;; Registers used:
  4721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4722 ;; Tracked objects:
  4723 ;;		On entry : 0/0
  4724 ;;		On exit  : 0/0
  4725 ;;		Unchanged: 0/0
  4726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4727 ;;      Params:         0       0       0       0       0       0       0
  4728 ;;      Locals:         0       0       0       0       0       0       0
  4729 ;;      Temps:          0       0       0       0       0       0       0
  4730 ;;      Totals:         0       0       0       0       0       0       0
  4731 ;;Total ram usage:        0 bytes
  4732 ;; Hardware stack levels used:    1
  4733 ;; Hardware stack levels required when called:   19
  4734 ;; This function calls:
  4735 ;;		_lcd_gotoxy
  4736 ;;		_printf
  4737 ;; This function is called by:
  4738 ;;		_drawScreen
  4739 ;; This function uses a non-reentrant model
  4740 ;;
  4741                           
  4742                           	psect	text15
  4743  0070E0                     __ptext15:
  4744                           	opt stack 0
  4745  0070E0                     _drawCutError:
  4746                           	opt stack 10
  4747                           
  4748                           ;screenDrawers.h: 225: lcd_gotoxy(1, 1);
  4749                           
  4750                           ;incstack = 0
  4751  0070E0  0E01               	movlw	1
  4752  0070E2  0101               	movlb	1	; () banked
  4753  0070E4  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4754  0070E6  0E01               	movlw	1
  4755  0070E8  EC29  F038         	call	_lcd_gotoxy
  4756                           
  4757                           ;screenDrawers.h: 226: printf("Guillotina      \n");
  4758  0070EC  0EB0               	movlw	low STR_34
  4759  0070EE  0101               	movlb	1	; () banked
  4760  0070F0  6F3F               	movwf	printf@f& (0+255),b
  4761  0070F2  0E7D               	movlw	high STR_34
  4762  0070F4  0101               	movlb	1	; () banked
  4763  0070F6  6F40               	movwf	(printf@f+1)& (0+255),b
  4764  0070F8  EC61  F000         	call	_printf	;wreg free
  4765                           
  4766                           ;screenDrawers.h: 227: printf("      Trancada  ");
  4767  0070FC  0EB5               	movlw	low STR_35
  4768  0070FE  0101               	movlb	1	; () banked
  4769  007100  6F3F               	movwf	printf@f& (0+255),b
  4770  007102  0E7F               	movlw	high STR_35
  4771  007104  0101               	movlb	1	; () banked
  4772  007106  6F40               	movwf	(printf@f+1)& (0+255),b
  4773  007108  EC61  F000         	call	_printf	;wreg free
  4774  00710C  0012               	return		;funcret
  4775  00710E                     __end_of_drawCutError:
  4776                           	opt stack 0
  4777                           tblptru	equ	0xFF8
  4778                           tblptrh	equ	0xFF7
  4779                           tblptrl	equ	0xFF6
  4780                           tablat	equ	0xFF5
  4781                           prodh	equ	0xFF4
  4782                           prodl	equ	0xFF3
  4783                           intcon	equ	0xFF2
  4784                           postinc0	equ	0xFEE
  4785                           wreg	equ	0xFE8
  4786                           postdec1	equ	0xFE5
  4787                           fsr1l	equ	0xFE1
  4788                           indf2	equ	0xFDF
  4789                           fsr2h	equ	0xFDA
  4790                           fsr2l	equ	0xFD9
  4791                           status	equ	0xFD8
  4792                           
  4793 ;; *************** function _drawChanVal *****************
  4794 ;; Defined at:
  4795 ;;		line 140 in file "source/screenDrawers.h"
  4796 ;; Parameters:    Size  Location     Type
  4797 ;;		None
  4798 ;; Auto vars:     Size  Location     Type
  4799 ;;		None
  4800 ;; Return value:  Size  Location     Type
  4801 ;;                  1    wreg      void 
  4802 ;; Registers used:
  4803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4804 ;; Tracked objects:
  4805 ;;		On entry : 0/0
  4806 ;;		On exit  : 0/0
  4807 ;;		Unchanged: 0/0
  4808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4809 ;;      Params:         0       0       0       0       0       0       0
  4810 ;;      Locals:         0       0       0       0       0       0       0
  4811 ;;      Temps:          0       0       0       0       0       0       0
  4812 ;;      Totals:         0       0       0       0       0       0       0
  4813 ;;Total ram usage:        0 bytes
  4814 ;; Hardware stack levels used:    1
  4815 ;; Hardware stack levels required when called:   20
  4816 ;; This function calls:
  4817 ;;		_drawValEditor
  4818 ;;		_lcd_gotoxy
  4819 ;;		_printf
  4820 ;; This function is called by:
  4821 ;;		_drawScreen
  4822 ;; This function uses a non-reentrant model
  4823 ;;
  4824                           
  4825                           	psect	text16
  4826  0064AC                     __ptext16:
  4827                           	opt stack 0
  4828  0064AC                     _drawChanVal:
  4829                           	opt stack 9
  4830                           
  4831                           ;screenDrawers.h: 141: switch (menuSection) {
  4832                           
  4833                           ;incstack = 0
  4834  0064AC  D034               	goto	l10978
  4835  0064AE                     l10962:
  4836                           
  4837                           ;screenDrawers.h: 145: lcd_gotoxy(1, 1);
  4838  0064AE  0E01               	movlw	1
  4839  0064B0  0101               	movlb	1	; () banked
  4840  0064B2  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4841  0064B4  0E01               	movlw	1
  4842  0064B6  EC29  F038         	call	_lcd_gotoxy
  4843                           
  4844                           ;screenDrawers.h: 146: printf("Valor por Corte:\n");
  4845  0064BA  0E52               	movlw	low STR_10
  4846  0064BC  0101               	movlb	1	; () banked
  4847  0064BE  6F3F               	movwf	printf@f& (0+255),b
  4848  0064C0  0E7E               	movlw	high STR_10
  4849  0064C2  0101               	movlb	1	; () banked
  4850  0064C4  6F40               	movwf	(printf@f+1)& (0+255),b
  4851  0064C6  EC61  F000         	call	_printf	;wreg free
  4852                           
  4853                           ;screenDrawers.h: 147: drawValEditor();
  4854  0064CA  ECD1  F00F         	call	_drawValEditor	;wreg free
  4855                           
  4856                           ;screenDrawers.h: 148: printf("kg    ");
  4857  0064CE  0EF8               	movlw	low STR_17
  4858  0064D0  0101               	movlb	1	; () banked
  4859  0064D2  6F3F               	movwf	printf@f& (0+255),b
  4860  0064D4  0E7F               	movlw	high STR_17
  4861  0064D6  0101               	movlb	1	; () banked
  4862  0064D8  6F40               	movwf	(printf@f+1)& (0+255),b
  4863  0064DA  EC61  F000         	call	_printf	;wreg free
  4864                           
  4865                           ;screenDrawers.h: 149: break;
  4866  0064DE  0012               	return	
  4867  0064E0                     l10970:
  4868                           
  4869                           ;screenDrawers.h: 151: lcd_gotoxy(1, 1);
  4870  0064E0  0E01               	movlw	1
  4871  0064E2  0101               	movlb	1	; () banked
  4872  0064E4  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4873  0064E6  0E01               	movlw	1
  4874  0064E8  EC29  F038         	call	_lcd_gotoxy
  4875                           
  4876                           ;screenDrawers.h: 152: printf("Cantidad Cortes:\n");
  4877  0064EC  0E76               	movlw	low STR_12
  4878  0064EE  0101               	movlb	1	; () banked
  4879  0064F0  6F3F               	movwf	printf@f& (0+255),b
  4880  0064F2  0E7E               	movlw	high STR_12
  4881  0064F4  0101               	movlb	1	; () banked
  4882  0064F6  6F40               	movwf	(printf@f+1)& (0+255),b
  4883  0064F8  EC61  F000         	call	_printf	;wreg free
  4884                           
  4885                           ;screenDrawers.h: 153: printf("      %d       ", chanVals);
  4886  0064FC  0EE8               	movlw	low STR_19
  4887  0064FE  0101               	movlb	1	; () banked
  4888  006500  6F3F               	movwf	printf@f& (0+255),b
  4889  006502  0E7F               	movlw	high STR_19
  4890  006504  0101               	movlb	1	; () banked
  4891  006506  6F40               	movwf	(printf@f+1)& (0+255),b
  4892  006508  C1B6  F141         	movff	_chanVals,?_printf+2
  4893  00650C  C1B7  F142         	movff	_chanVals+1,?_printf+3
  4894  006510  EC61  F000         	call	_printf	;wreg free
  4895                           
  4896                           ;screenDrawers.h: 157: }
  4897                           ;screenDrawers.h: 158: }
  4898                           
  4899                           ;screenDrawers.h: 156: break;
  4900                           
  4901                           ;screenDrawers.h: 155: }case (3): {
  4902                           
  4903                           ;screenDrawers.h: 154: break;
  4904  006514  0012               	return	
  4905  006516                     l10978:
  4906  006516  0101               	movlb	1	; () banked
  4907  006518  51BC               	movf	_menuSection& (0+255),w,b
  4908                           
  4909                           ; Switch size 1, requested type "space"
  4910                           ; Number of cases is 4, Range of values is 0 to 3
  4911                           ; switch strategies available:
  4912                           ; Name         Instructions Cycles
  4913                           ; simple_byte           13     7 (average)
  4914                           ;	Chosen strategy is simple_byte
  4915  00651A  0A00               	xorlw	0	; case 0
  4916  00651C  B4D8               	btfsc	status,2,c
  4917  00651E  0012               	return	
  4918  006520  0A01               	xorlw	1	; case 1
  4919  006522  B4D8               	btfsc	status,2,c
  4920  006524  D7C4               	goto	l10962
  4921  006526  0A03               	xorlw	3	; case 2
  4922  006528  B4D8               	btfsc	status,2,c
  4923  00652A  D7DA               	goto	l10970
  4924  00652C  0A01               	xorlw	1	; case 3
  4925  00652E  0012               	return	
  4926  006530                     __end_of_drawChanVal:
  4927                           	opt stack 0
  4928                           tblptru	equ	0xFF8
  4929                           tblptrh	equ	0xFF7
  4930                           tblptrl	equ	0xFF6
  4931                           tablat	equ	0xFF5
  4932                           prodh	equ	0xFF4
  4933                           prodl	equ	0xFF3
  4934                           intcon	equ	0xFF2
  4935                           postinc0	equ	0xFEE
  4936                           wreg	equ	0xFE8
  4937                           postdec1	equ	0xFE5
  4938                           fsr1l	equ	0xFE1
  4939                           indf2	equ	0xFDF
  4940                           fsr2h	equ	0xFDA
  4941                           fsr2l	equ	0xFD9
  4942                           status	equ	0xFD8
  4943                           
  4944 ;; *************** function _drawCalibProc *****************
  4945 ;; Defined at:
  4946 ;;		line 236 in file "source/screenDrawers.h"
  4947 ;; Parameters:    Size  Location     Type
  4948 ;;		None
  4949 ;; Auto vars:     Size  Location     Type
  4950 ;;		None
  4951 ;; Return value:  Size  Location     Type
  4952 ;;                  1    wreg      void 
  4953 ;; Registers used:
  4954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4955 ;; Tracked objects:
  4956 ;;		On entry : 0/0
  4957 ;;		On exit  : 0/0
  4958 ;;		Unchanged: 0/0
  4959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4960 ;;      Params:         0       0       0       0       0       0       0
  4961 ;;      Locals:         0       0       0       0       0       0       0
  4962 ;;      Temps:          0       0       0       0       0       0       0
  4963 ;;      Totals:         0       0       0       0       0       0       0
  4964 ;;Total ram usage:        0 bytes
  4965 ;; Hardware stack levels used:    1
  4966 ;; Hardware stack levels required when called:   19
  4967 ;; This function calls:
  4968 ;;		_lcd_gotoxy
  4969 ;;		_printf
  4970 ;; This function is called by:
  4971 ;;		_drawScreen
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text17
  4976  006420                     __ptext17:
  4977                           	opt stack 0
  4978  006420                     _drawCalibProc:
  4979                           	opt stack 10
  4980                           
  4981                           ;screenDrawers.h: 237: lcd_gotoxy(1, 1);
  4982                           
  4983                           ;incstack = 0
  4984  006420  0E01               	movlw	1
  4985  006422  0101               	movlb	1	; () banked
  4986  006424  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4987  006426  0E01               	movlw	1
  4988  006428  EC29  F038         	call	_lcd_gotoxy
  4989                           
  4990                           ;screenDrawers.h: 238: if(calibLevel == 0) {
  4991  00642C  0101               	movlb	1	; () banked
  4992  00642E  51B8               	movf	_calibLevel& (0+255),w,b
  4993  006430  A4D8               	btfss	status,2,c
  4994  006432  D011               	goto	l11074
  4995                           
  4996                           ; BSR set to: 1
  4997                           ;screenDrawers.h: 239: printf("Autocalib con   \n");
  4998  006434  0ED4               	movlw	low STR_38
  4999  006436  0101               	movlb	1	; () banked
  5000  006438  6F3F               	movwf	printf@f& (0+255),b
  5001  00643A  0E7D               	movlw	high STR_38
  5002  00643C  0101               	movlb	1	; () banked
  5003  00643E  6F40               	movwf	(printf@f+1)& (0+255),b
  5004  006440  EC61  F000         	call	_printf	;wreg free
  5005                           
  5006                           ;screenDrawers.h: 240: printf("Corte referencia");
  5007  006444  0EC6               	movlw	low STR_39
  5008  006446  0101               	movlb	1	; () banked
  5009  006448  6F3F               	movwf	printf@f& (0+255),b
  5010  00644A  0E7F               	movlw	high STR_39
  5011  00644C  0101               	movlb	1	; () banked
  5012  00644E  6F40               	movwf	(printf@f+1)& (0+255),b
  5013  006450  EC61  F000         	call	_printf	;wreg free
  5014                           
  5015                           ;screenDrawers.h: 241: }else if(calibLevel == 1) {
  5016  006454  0012               	return	
  5017  006456                     l11074:
  5018  006456  0101               	movlb	1	; () banked
  5019  006458  05B8               	decf	_calibLevel& (0+255),w,b
  5020  00645A  A4D8               	btfss	status,2,c
  5021  00645C  D011               	goto	l11078
  5022                           
  5023                           ; BSR set to: 1
  5024                           ;screenDrawers.h: 242: printf("Autocalib usando\n");
  5025  00645E  0EAC               	movlw	low STR_40
  5026  006460  0101               	movlb	1	; () banked
  5027  006462  6F3F               	movwf	printf@f& (0+255),b
  5028  006464  0E7E               	movlw	high STR_40
  5029  006466  0101               	movlb	1	; () banked
  5030  006468  6F40               	movwf	(printf@f+1)& (0+255),b
  5031  00646A  EC61  F000         	call	_printf	;wreg free
  5032                           
  5033                           ;screenDrawers.h: 243: printf("     0.5 kg     ");
  5034  00646E  0E60               	movlw	low STR_41
  5035  006470  0101               	movlb	1	; () banked
  5036  006472  6F3F               	movwf	printf@f& (0+255),b
  5037  006474  0E7F               	movlw	high STR_41
  5038  006476  0101               	movlb	1	; () banked
  5039  006478  6F40               	movwf	(printf@f+1)& (0+255),b
  5040  00647A  EC61  F000         	call	_printf	;wreg free
  5041                           
  5042                           ;screenDrawers.h: 244: }else if(calibLevel == 2) {
  5043  00647E  0012               	return	
  5044  006480                     l11078:
  5045  006480  0E02               	movlw	2
  5046  006482  0101               	movlb	1	; () banked
  5047  006484  19B8               	xorwf	_calibLevel& (0+255),w,b
  5048  006486  A4D8               	btfss	status,2,c
  5049  006488  0012               	return	
  5050                           
  5051                           ; BSR set to: 1
  5052                           ;screenDrawers.h: 245: printf("Autocalib usando\n");
  5053  00648A  0EAC               	movlw	low STR_40
  5054  00648C  0101               	movlb	1	; () banked
  5055  00648E  6F3F               	movwf	printf@f& (0+255),b
  5056  006490  0E7E               	movlw	high STR_40
  5057  006492  0101               	movlb	1	; () banked
  5058  006494  6F40               	movwf	(printf@f+1)& (0+255),b
  5059  006496  EC61  F000         	call	_printf	;wreg free
  5060                           
  5061                           ;screenDrawers.h: 246: printf("    0.25 kg     ");
  5062  00649A  0E71               	movlw	low STR_43
  5063  00649C  0101               	movlb	1	; () banked
  5064  00649E  6F3F               	movwf	printf@f& (0+255),b
  5065  0064A0  0E7F               	movlw	high STR_43
  5066  0064A2  0101               	movlb	1	; () banked
  5067  0064A4  6F40               	movwf	(printf@f+1)& (0+255),b
  5068  0064A6  EC61  F000         	call	_printf	;wreg free
  5069  0064AA  0012               	return	
  5070  0064AC                     __end_of_drawCalibProc:
  5071                           	opt stack 0
  5072                           tblptru	equ	0xFF8
  5073                           tblptrh	equ	0xFF7
  5074                           tblptrl	equ	0xFF6
  5075                           tablat	equ	0xFF5
  5076                           prodh	equ	0xFF4
  5077                           prodl	equ	0xFF3
  5078                           intcon	equ	0xFF2
  5079                           postinc0	equ	0xFEE
  5080                           wreg	equ	0xFE8
  5081                           postdec1	equ	0xFE5
  5082                           fsr1l	equ	0xFE1
  5083                           indf2	equ	0xFDF
  5084                           fsr2h	equ	0xFDA
  5085                           fsr2l	equ	0xFD9
  5086                           status	equ	0xFD8
  5087                           
  5088 ;; *************** function _drawBadPass *****************
  5089 ;; Defined at:
  5090 ;;		line 184 in file "source/screenDrawers.h"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;		None
  5093 ;; Auto vars:     Size  Location     Type
  5094 ;;		None
  5095 ;; Return value:  Size  Location     Type
  5096 ;;                  1    wreg      void 
  5097 ;; Registers used:
  5098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5099 ;; Tracked objects:
  5100 ;;		On entry : 0/0
  5101 ;;		On exit  : 0/0
  5102 ;;		Unchanged: 0/0
  5103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5104 ;;      Params:         0       0       0       0       0       0       0
  5105 ;;      Locals:         0       0       0       0       0       0       0
  5106 ;;      Temps:          0       0       0       0       0       0       0
  5107 ;;      Totals:         0       0       0       0       0       0       0
  5108 ;;Total ram usage:        0 bytes
  5109 ;; Hardware stack levels used:    1
  5110 ;; Hardware stack levels required when called:   20
  5111 ;; This function calls:
  5112 ;;		_drawPass1Lin
  5113 ;;		_printf
  5114 ;; This function is called by:
  5115 ;;		_drawScreen
  5116 ;; This function uses a non-reentrant model
  5117 ;;
  5118                           
  5119                           	psect	text18
  5120  0072DC                     __ptext18:
  5121                           	opt stack 0
  5122  0072DC                     _drawBadPass:
  5123                           	opt stack 9
  5124                           
  5125                           ;screenDrawers.h: 185: drawPass1Lin();
  5126                           
  5127                           ;incstack = 0
  5128  0072DC  EC3B  F039         	call	_drawPass1Lin	;wreg free
  5129                           
  5130                           ;screenDrawers.h: 186: printf("     Erronea    ");
  5131  0072E0  0E82               	movlw	low STR_22
  5132  0072E2  0101               	movlb	1	; () banked
  5133  0072E4  6F3F               	movwf	printf@f& (0+255),b
  5134  0072E6  0E7F               	movlw	high STR_22
  5135  0072E8  0101               	movlb	1	; () banked
  5136  0072EA  6F40               	movwf	(printf@f+1)& (0+255),b
  5137  0072EC  EC61  F000         	call	_printf	;wreg free
  5138  0072F0  0012               	return		;funcret
  5139  0072F2                     __end_of_drawBadPass:
  5140                           	opt stack 0
  5141                           tblptru	equ	0xFF8
  5142                           tblptrh	equ	0xFF7
  5143                           tblptrl	equ	0xFF6
  5144                           tablat	equ	0xFF5
  5145                           prodh	equ	0xFF4
  5146                           prodl	equ	0xFF3
  5147                           intcon	equ	0xFF2
  5148                           postinc0	equ	0xFEE
  5149                           wreg	equ	0xFE8
  5150                           postdec1	equ	0xFE5
  5151                           fsr1l	equ	0xFE1
  5152                           indf2	equ	0xFDF
  5153                           fsr2h	equ	0xFDA
  5154                           fsr2l	equ	0xFD9
  5155                           status	equ	0xFD8
  5156                           
  5157 ;; *************** function _drawPass1Lin *****************
  5158 ;; Defined at:
  5159 ;;		line 161 in file "source/screenDrawers.h"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;		None
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;		None
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  1    wreg      void 
  5166 ;; Registers used:
  5167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5173 ;;      Params:         0       0       0       0       0       0       0
  5174 ;;      Locals:         0       0       0       0       0       0       0
  5175 ;;      Temps:          0       0       0       0       0       0       0
  5176 ;;      Totals:         0       0       0       0       0       0       0
  5177 ;;Total ram usage:        0 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; Hardware stack levels required when called:   19
  5180 ;; This function calls:
  5181 ;;		_lcd_gotoxy
  5182 ;;		_printf
  5183 ;; This function is called by:
  5184 ;;		_drawPassWord
  5185 ;;		_drawBadPass
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           	psect	text19
  5190  007276                     __ptext19:
  5191                           	opt stack 0
  5192  007276                     _drawPass1Lin:
  5193                           	opt stack 9
  5194                           
  5195                           ;screenDrawers.h: 162: lcd_gotoxy(1, 1);
  5196                           
  5197                           ;incstack = 0
  5198  007276  0E01               	movlw	1
  5199  007278  0101               	movlb	1	; () banked
  5200  00727A  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5201  00727C  0E01               	movlw	1
  5202  00727E  EC29  F038         	call	_lcd_gotoxy
  5203                           
  5204                           ;screenDrawers.h: 163: printf("Contrasena:     \n");
  5205  007282  0EC2               	movlw	low STR_20
  5206  007284  0101               	movlb	1	; () banked
  5207  007286  6F3F               	movwf	printf@f& (0+255),b
  5208  007288  0E7D               	movlw	high STR_20
  5209  00728A  0101               	movlb	1	; () banked
  5210  00728C  6F40               	movwf	(printf@f+1)& (0+255),b
  5211  00728E  EC61  F000         	call	_printf	;wreg free
  5212  007292  0012               	return		;funcret
  5213  007294                     __end_of_drawPass1Lin:
  5214                           	opt stack 0
  5215                           tblptru	equ	0xFF8
  5216                           tblptrh	equ	0xFF7
  5217                           tblptrl	equ	0xFF6
  5218                           tablat	equ	0xFF5
  5219                           prodh	equ	0xFF4
  5220                           prodl	equ	0xFF3
  5221                           intcon	equ	0xFF2
  5222                           postinc0	equ	0xFEE
  5223                           wreg	equ	0xFE8
  5224                           postdec1	equ	0xFE5
  5225                           fsr1l	equ	0xFE1
  5226                           indf2	equ	0xFDF
  5227                           fsr2h	equ	0xFDA
  5228                           fsr2l	equ	0xFD9
  5229                           status	equ	0xFD8
  5230                           
  5231 ;; *************** function _drawAutoCalibRM *****************
  5232 ;; Defined at:
  5233 ;;		line 217 in file "source/screenDrawers.h"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;		None
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;		None
  5238 ;; Return value:  Size  Location     Type
  5239 ;;                  1    wreg      void 
  5240 ;; Registers used:
  5241 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5247 ;;      Params:         0       0       0       0       0       0       0
  5248 ;;      Locals:         0       0       0       0       0       0       0
  5249 ;;      Temps:          0       0       0       0       0       0       0
  5250 ;;      Totals:         0       0       0       0       0       0       0
  5251 ;;Total ram usage:        0 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:   20
  5254 ;; This function calls:
  5255 ;;		_drawValEditor
  5256 ;;		_lcd_gotoxy
  5257 ;;		_printf
  5258 ;; This function is called by:
  5259 ;;		_drawScreen
  5260 ;; This function uses a non-reentrant model
  5261 ;;
  5262                           
  5263                           	psect	text20
  5264  007020                     __ptext20:
  5265                           	opt stack 0
  5266  007020                     _drawAutoCalibRM:
  5267                           	opt stack 9
  5268                           
  5269                           ;screenDrawers.h: 218: lcd_gotoxy(1, 1);
  5270                           
  5271                           ;incstack = 0
  5272  007020  0E01               	movlw	1
  5273  007022  0101               	movlb	1	; () banked
  5274  007024  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5275  007026  0E01               	movlw	1
  5276  007028  EC29  F038         	call	_lcd_gotoxy
  5277                           
  5278                           ;screenDrawers.h: 219: printf("Peso Real:      \n");
  5279  00702C  0E9E               	movlw	low STR_32
  5280  00702E  0101               	movlb	1	; () banked
  5281  007030  6F3F               	movwf	printf@f& (0+255),b
  5282  007032  0E7D               	movlw	high STR_32
  5283  007034  0101               	movlb	1	; () banked
  5284  007036  6F40               	movwf	(printf@f+1)& (0+255),b
  5285  007038  EC61  F000         	call	_printf	;wreg free
  5286                           
  5287                           ;screenDrawers.h: 220: drawValEditor();
  5288  00703C  ECD1  F00F         	call	_drawValEditor	;wreg free
  5289                           
  5290                           ;screenDrawers.h: 221: printf("kg    ");
  5291  007040  0EF8               	movlw	low STR_17
  5292  007042  0101               	movlb	1	; () banked
  5293  007044  6F3F               	movwf	printf@f& (0+255),b
  5294  007046  0E7F               	movlw	high STR_17
  5295  007048  0101               	movlb	1	; () banked
  5296  00704A  6F40               	movwf	(printf@f+1)& (0+255),b
  5297  00704C  EC61  F000         	call	_printf	;wreg free
  5298  007050  0012               	return		;funcret
  5299  007052                     __end_of_drawAutoCalibRM:
  5300                           	opt stack 0
  5301                           tblptru	equ	0xFF8
  5302                           tblptrh	equ	0xFF7
  5303                           tblptrl	equ	0xFF6
  5304                           tablat	equ	0xFF5
  5305                           prodh	equ	0xFF4
  5306                           prodl	equ	0xFF3
  5307                           intcon	equ	0xFF2
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           postdec1	equ	0xFE5
  5311                           fsr1l	equ	0xFE1
  5312                           indf2	equ	0xFDF
  5313                           fsr2h	equ	0xFDA
  5314                           fsr2l	equ	0xFD9
  5315                           status	equ	0xFD8
  5316                           
  5317 ;; *************** function _drawValEditor *****************
  5318 ;; Defined at:
  5319 ;;		line 62 in file "source/screenDrawers.h"
  5320 ;; Parameters:    Size  Location     Type
  5321 ;;		None
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;		None
  5324 ;; Return value:  Size  Location     Type
  5325 ;;                  1    wreg      void 
  5326 ;; Registers used:
  5327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5328 ;; Tracked objects:
  5329 ;;		On entry : 0/0
  5330 ;;		On exit  : 0/0
  5331 ;;		Unchanged: 0/0
  5332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5333 ;;      Params:         0       0       0       0       0       0       0
  5334 ;;      Locals:         0       0       0       0       0       0       0
  5335 ;;      Temps:          0       0       0       0       0       0       0
  5336 ;;      Totals:         0       0       0       0       0       0       0
  5337 ;;Total ram usage:        0 bytes
  5338 ;; Hardware stack levels used:    1
  5339 ;; Hardware stack levels required when called:   19
  5340 ;; This function calls:
  5341 ;;		_lcd_gotoxy
  5342 ;;		_printf
  5343 ;; This function is called by:
  5344 ;;		_drawChanVal
  5345 ;;		_drawAutoCalibRM
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text21
  5350  001FA2                     __ptext21:
  5351                           	opt stack 0
  5352  001FA2                     _drawValEditor:
  5353                           	opt stack 9
  5354                           
  5355                           ;screenDrawers.h: 63: if(chanValSection == 5) {
  5356                           
  5357                           ;incstack = 0
  5358  001FA2  0E05               	movlw	5
  5359  001FA4  0101               	movlb	1	; () banked
  5360  001FA6  199C               	xorwf	_chanValSection& (0+255),w,b
  5361  001FA8  A4D8               	btfss	status,2,c
  5362  001FAA  D037               	goto	l10730
  5363                           
  5364                           ; BSR set to: 1
  5365                           ;screenDrawers.h: 64: printf(" %u%u%u.%u%u%c%u ", chanValdig[0], chanValdig[1],
  5366                           ;screenDrawers.h: 65: chanValdig[2], chanValdig[3], chanValdig[4], flech, chanValdig[5])
      +                          ;
  5367  001FAC  0EF4               	movlw	low STR_1
  5368  001FAE  0101               	movlb	1	; () banked
  5369  001FB0  6F3F               	movwf	printf@f& (0+255),b
  5370  001FB2  0E7E               	movlw	high STR_1
  5371  001FB4  0101               	movlb	1	; () banked
  5372  001FB6  6F40               	movwf	(printf@f+1)& (0+255),b
  5373  001FB8  0101               	movlb	1	; () banked
  5374  001FBA  51A3               	movf	_chanValdig& (0+255),w,b
  5375  001FBC  0101               	movlb	1	; () banked
  5376  001FBE  6F41               	movwf	(?_printf+2)& (0+255),b
  5377  001FC0  6B42               	clrf	(?_printf+3)& (0+255),b
  5378  001FC2  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5379  001FC4  0742               	decf	(?_printf+3)& (0+255),f,b
  5380  001FC6  0101               	movlb	1	; () banked
  5381  001FC8  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5382  001FCA  0101               	movlb	1	; () banked
  5383  001FCC  6F43               	movwf	(?_printf+4)& (0+255),b
  5384  001FCE  6B44               	clrf	(?_printf+5)& (0+255),b
  5385  001FD0  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5386  001FD2  0744               	decf	(?_printf+5)& (0+255),f,b
  5387  001FD4  0101               	movlb	1	; () banked
  5388  001FD6  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5389  001FD8  0101               	movlb	1	; () banked
  5390  001FDA  6F45               	movwf	(?_printf+6)& (0+255),b
  5391  001FDC  6B46               	clrf	(?_printf+7)& (0+255),b
  5392  001FDE  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5393  001FE0  0746               	decf	(?_printf+7)& (0+255),f,b
  5394  001FE2  0101               	movlb	1	; () banked
  5395  001FE4  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5396  001FE6  0101               	movlb	1	; () banked
  5397  001FE8  6F47               	movwf	(?_printf+8)& (0+255),b
  5398  001FEA  6B48               	clrf	(?_printf+9)& (0+255),b
  5399  001FEC  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5400  001FEE  0748               	decf	(?_printf+9)& (0+255),f,b
  5401  001FF0  0101               	movlb	1	; () banked
  5402  001FF2  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5403  001FF4  0101               	movlb	1	; () banked
  5404  001FF6  6F49               	movwf	(?_printf+10)& (0+255),b
  5405  001FF8  6B4A               	clrf	(?_printf+11)& (0+255),b
  5406  001FFA  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5407  001FFC  074A               	decf	(?_printf+11)& (0+255),f,b
  5408  001FFE  C19B  F14B         	movff	_flech,?_printf+12
  5409  002002  0101               	movlb	1	; () banked
  5410  002004  6B4C               	clrf	(?_printf+13)& (0+255),b
  5411  002006  0101               	movlb	1	; () banked
  5412  002008  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5413  00200A  0101               	movlb	1	; () banked
  5414  00200C  6F4D               	movwf	(?_printf+14)& (0+255),b
  5415  00200E  6B4E               	clrf	(?_printf+15)& (0+255),b
  5416  002010  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5417  002012  074E               	decf	(?_printf+15)& (0+255),f,b
  5418  002014  EC61  F000         	call	_printf	;wreg free
  5419                           
  5420                           ;screenDrawers.h: 66: }else if(chanValSection == 4) {
  5421  002018  D129               	goto	l10750
  5422  00201A                     l10730:
  5423  00201A  0E04               	movlw	4
  5424  00201C  0101               	movlb	1	; () banked
  5425  00201E  199C               	xorwf	_chanValSection& (0+255),w,b
  5426  002020  A4D8               	btfss	status,2,c
  5427  002022  D037               	goto	l10734
  5428                           
  5429                           ; BSR set to: 1
  5430                           ;screenDrawers.h: 67: printf(" %u%u%u.%u%c%u%u ", chanValdig[0], chanValdig[1],
  5431                           ;screenDrawers.h: 68: chanValdig[2], chanValdig[3], flech, chanValdig[4], chanValdig[5])
      +                          ;
  5432  002024  0E06               	movlw	low STR_2
  5433  002026  0101               	movlb	1	; () banked
  5434  002028  6F3F               	movwf	printf@f& (0+255),b
  5435  00202A  0E7F               	movlw	high STR_2
  5436  00202C  0101               	movlb	1	; () banked
  5437  00202E  6F40               	movwf	(printf@f+1)& (0+255),b
  5438  002030  0101               	movlb	1	; () banked
  5439  002032  51A3               	movf	_chanValdig& (0+255),w,b
  5440  002034  0101               	movlb	1	; () banked
  5441  002036  6F41               	movwf	(?_printf+2)& (0+255),b
  5442  002038  6B42               	clrf	(?_printf+3)& (0+255),b
  5443  00203A  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5444  00203C  0742               	decf	(?_printf+3)& (0+255),f,b
  5445  00203E  0101               	movlb	1	; () banked
  5446  002040  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5447  002042  0101               	movlb	1	; () banked
  5448  002044  6F43               	movwf	(?_printf+4)& (0+255),b
  5449  002046  6B44               	clrf	(?_printf+5)& (0+255),b
  5450  002048  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5451  00204A  0744               	decf	(?_printf+5)& (0+255),f,b
  5452  00204C  0101               	movlb	1	; () banked
  5453  00204E  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5454  002050  0101               	movlb	1	; () banked
  5455  002052  6F45               	movwf	(?_printf+6)& (0+255),b
  5456  002054  6B46               	clrf	(?_printf+7)& (0+255),b
  5457  002056  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5458  002058  0746               	decf	(?_printf+7)& (0+255),f,b
  5459  00205A  0101               	movlb	1	; () banked
  5460  00205C  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5461  00205E  0101               	movlb	1	; () banked
  5462  002060  6F47               	movwf	(?_printf+8)& (0+255),b
  5463  002062  6B48               	clrf	(?_printf+9)& (0+255),b
  5464  002064  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5465  002066  0748               	decf	(?_printf+9)& (0+255),f,b
  5466  002068  C19B  F149         	movff	_flech,?_printf+10
  5467  00206C  0101               	movlb	1	; () banked
  5468  00206E  6B4A               	clrf	(?_printf+11)& (0+255),b
  5469  002070  0101               	movlb	1	; () banked
  5470  002072  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5471  002074  0101               	movlb	1	; () banked
  5472  002076  6F4B               	movwf	(?_printf+12)& (0+255),b
  5473  002078  6B4C               	clrf	(?_printf+13)& (0+255),b
  5474  00207A  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5475  00207C  074C               	decf	(?_printf+13)& (0+255),f,b
  5476  00207E  0101               	movlb	1	; () banked
  5477  002080  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5478  002082  0101               	movlb	1	; () banked
  5479  002084  6F4D               	movwf	(?_printf+14)& (0+255),b
  5480  002086  6B4E               	clrf	(?_printf+15)& (0+255),b
  5481  002088  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5482  00208A  074E               	decf	(?_printf+15)& (0+255),f,b
  5483  00208C  EC61  F000         	call	_printf	;wreg free
  5484                           
  5485                           ;screenDrawers.h: 69: }else if(chanValSection == 3) {
  5486  002090  D0ED               	goto	l10750
  5487  002092                     l10734:
  5488  002092  0E03               	movlw	3
  5489  002094  0101               	movlb	1	; () banked
  5490  002096  199C               	xorwf	_chanValSection& (0+255),w,b
  5491  002098  A4D8               	btfss	status,2,c
  5492  00209A  D037               	goto	l10738
  5493                           
  5494                           ; BSR set to: 1
  5495                           ;screenDrawers.h: 70: printf(" %u%u%u.%c%u%u%u ", chanValdig[0], chanValdig[1],
  5496                           ;screenDrawers.h: 71: chanValdig[2], flech, chanValdig[3], chanValdig[4], chanValdig[5])
      +                          ;
  5497  00209C  0E4E               	movlw	low STR_3
  5498  00209E  0101               	movlb	1	; () banked
  5499  0020A0  6F3F               	movwf	printf@f& (0+255),b
  5500  0020A2  0E7F               	movlw	high STR_3
  5501  0020A4  0101               	movlb	1	; () banked
  5502  0020A6  6F40               	movwf	(printf@f+1)& (0+255),b
  5503  0020A8  0101               	movlb	1	; () banked
  5504  0020AA  51A3               	movf	_chanValdig& (0+255),w,b
  5505  0020AC  0101               	movlb	1	; () banked
  5506  0020AE  6F41               	movwf	(?_printf+2)& (0+255),b
  5507  0020B0  6B42               	clrf	(?_printf+3)& (0+255),b
  5508  0020B2  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5509  0020B4  0742               	decf	(?_printf+3)& (0+255),f,b
  5510  0020B6  0101               	movlb	1	; () banked
  5511  0020B8  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5512  0020BA  0101               	movlb	1	; () banked
  5513  0020BC  6F43               	movwf	(?_printf+4)& (0+255),b
  5514  0020BE  6B44               	clrf	(?_printf+5)& (0+255),b
  5515  0020C0  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5516  0020C2  0744               	decf	(?_printf+5)& (0+255),f,b
  5517  0020C4  0101               	movlb	1	; () banked
  5518  0020C6  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5519  0020C8  0101               	movlb	1	; () banked
  5520  0020CA  6F45               	movwf	(?_printf+6)& (0+255),b
  5521  0020CC  6B46               	clrf	(?_printf+7)& (0+255),b
  5522  0020CE  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5523  0020D0  0746               	decf	(?_printf+7)& (0+255),f,b
  5524  0020D2  C19B  F147         	movff	_flech,?_printf+8
  5525  0020D6  0101               	movlb	1	; () banked
  5526  0020D8  6B48               	clrf	(?_printf+9)& (0+255),b
  5527  0020DA  0101               	movlb	1	; () banked
  5528  0020DC  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5529  0020DE  0101               	movlb	1	; () banked
  5530  0020E0  6F49               	movwf	(?_printf+10)& (0+255),b
  5531  0020E2  6B4A               	clrf	(?_printf+11)& (0+255),b
  5532  0020E4  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5533  0020E6  074A               	decf	(?_printf+11)& (0+255),f,b
  5534  0020E8  0101               	movlb	1	; () banked
  5535  0020EA  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5536  0020EC  0101               	movlb	1	; () banked
  5537  0020EE  6F4B               	movwf	(?_printf+12)& (0+255),b
  5538  0020F0  6B4C               	clrf	(?_printf+13)& (0+255),b
  5539  0020F2  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5540  0020F4  074C               	decf	(?_printf+13)& (0+255),f,b
  5541  0020F6  0101               	movlb	1	; () banked
  5542  0020F8  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5543  0020FA  0101               	movlb	1	; () banked
  5544  0020FC  6F4D               	movwf	(?_printf+14)& (0+255),b
  5545  0020FE  6B4E               	clrf	(?_printf+15)& (0+255),b
  5546  002100  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5547  002102  074E               	decf	(?_printf+15)& (0+255),f,b
  5548  002104  EC61  F000         	call	_printf	;wreg free
  5549                           
  5550                           ;screenDrawers.h: 72: }else if(chanValSection == 2) {
  5551  002108  D0B1               	goto	l10750
  5552  00210A                     l10738:
  5553  00210A  0E02               	movlw	2
  5554  00210C  0101               	movlb	1	; () banked
  5555  00210E  199C               	xorwf	_chanValSection& (0+255),w,b
  5556  002110  A4D8               	btfss	status,2,c
  5557  002112  D037               	goto	l10742
  5558                           
  5559                           ; BSR set to: 1
  5560                           ;screenDrawers.h: 73: printf(" %u%u%c%u.%u%u%u ", chanValdig[0], chanValdig[1], flech,
  5561                           ;screenDrawers.h: 74: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5562  002114  0E18               	movlw	low STR_4
  5563  002116  0101               	movlb	1	; () banked
  5564  002118  6F3F               	movwf	printf@f& (0+255),b
  5565  00211A  0E7F               	movlw	high STR_4
  5566  00211C  0101               	movlb	1	; () banked
  5567  00211E  6F40               	movwf	(printf@f+1)& (0+255),b
  5568  002120  0101               	movlb	1	; () banked
  5569  002122  51A3               	movf	_chanValdig& (0+255),w,b
  5570  002124  0101               	movlb	1	; () banked
  5571  002126  6F41               	movwf	(?_printf+2)& (0+255),b
  5572  002128  6B42               	clrf	(?_printf+3)& (0+255),b
  5573  00212A  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5574  00212C  0742               	decf	(?_printf+3)& (0+255),f,b
  5575  00212E  0101               	movlb	1	; () banked
  5576  002130  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5577  002132  0101               	movlb	1	; () banked
  5578  002134  6F43               	movwf	(?_printf+4)& (0+255),b
  5579  002136  6B44               	clrf	(?_printf+5)& (0+255),b
  5580  002138  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5581  00213A  0744               	decf	(?_printf+5)& (0+255),f,b
  5582  00213C  C19B  F145         	movff	_flech,?_printf+6
  5583  002140  0101               	movlb	1	; () banked
  5584  002142  6B46               	clrf	(?_printf+7)& (0+255),b
  5585  002144  0101               	movlb	1	; () banked
  5586  002146  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5587  002148  0101               	movlb	1	; () banked
  5588  00214A  6F47               	movwf	(?_printf+8)& (0+255),b
  5589  00214C  6B48               	clrf	(?_printf+9)& (0+255),b
  5590  00214E  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5591  002150  0748               	decf	(?_printf+9)& (0+255),f,b
  5592  002152  0101               	movlb	1	; () banked
  5593  002154  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5594  002156  0101               	movlb	1	; () banked
  5595  002158  6F49               	movwf	(?_printf+10)& (0+255),b
  5596  00215A  6B4A               	clrf	(?_printf+11)& (0+255),b
  5597  00215C  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5598  00215E  074A               	decf	(?_printf+11)& (0+255),f,b
  5599  002160  0101               	movlb	1	; () banked
  5600  002162  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5601  002164  0101               	movlb	1	; () banked
  5602  002166  6F4B               	movwf	(?_printf+12)& (0+255),b
  5603  002168  6B4C               	clrf	(?_printf+13)& (0+255),b
  5604  00216A  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5605  00216C  074C               	decf	(?_printf+13)& (0+255),f,b
  5606  00216E  0101               	movlb	1	; () banked
  5607  002170  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5608  002172  0101               	movlb	1	; () banked
  5609  002174  6F4D               	movwf	(?_printf+14)& (0+255),b
  5610  002176  6B4E               	clrf	(?_printf+15)& (0+255),b
  5611  002178  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5612  00217A  074E               	decf	(?_printf+15)& (0+255),f,b
  5613  00217C  EC61  F000         	call	_printf	;wreg free
  5614                           
  5615                           ;screenDrawers.h: 75: }else if(chanValSection == 1) {
  5616  002180  D075               	goto	l10750
  5617  002182                     l10742:
  5618  002182  0101               	movlb	1	; () banked
  5619  002184  059C               	decf	_chanValSection& (0+255),w,b
  5620  002186  A4D8               	btfss	status,2,c
  5621  002188  D037               	goto	l10746
  5622                           
  5623                           ; BSR set to: 1
  5624                           ;screenDrawers.h: 76: printf(" %u%c%u%u.%u%u%u ", chanValdig[0], flech, chanValdig[1],
  5625                           ;screenDrawers.h: 77: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5626  00218A  0E2A               	movlw	low STR_5
  5627  00218C  0101               	movlb	1	; () banked
  5628  00218E  6F3F               	movwf	printf@f& (0+255),b
  5629  002190  0E7F               	movlw	high STR_5
  5630  002192  0101               	movlb	1	; () banked
  5631  002194  6F40               	movwf	(printf@f+1)& (0+255),b
  5632  002196  0101               	movlb	1	; () banked
  5633  002198  51A3               	movf	_chanValdig& (0+255),w,b
  5634  00219A  0101               	movlb	1	; () banked
  5635  00219C  6F41               	movwf	(?_printf+2)& (0+255),b
  5636  00219E  6B42               	clrf	(?_printf+3)& (0+255),b
  5637  0021A0  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5638  0021A2  0742               	decf	(?_printf+3)& (0+255),f,b
  5639  0021A4  C19B  F143         	movff	_flech,?_printf+4
  5640  0021A8  0101               	movlb	1	; () banked
  5641  0021AA  6B44               	clrf	(?_printf+5)& (0+255),b
  5642  0021AC  0101               	movlb	1	; () banked
  5643  0021AE  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5644  0021B0  0101               	movlb	1	; () banked
  5645  0021B2  6F45               	movwf	(?_printf+6)& (0+255),b
  5646  0021B4  6B46               	clrf	(?_printf+7)& (0+255),b
  5647  0021B6  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5648  0021B8  0746               	decf	(?_printf+7)& (0+255),f,b
  5649  0021BA  0101               	movlb	1	; () banked
  5650  0021BC  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5651  0021BE  0101               	movlb	1	; () banked
  5652  0021C0  6F47               	movwf	(?_printf+8)& (0+255),b
  5653  0021C2  6B48               	clrf	(?_printf+9)& (0+255),b
  5654  0021C4  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5655  0021C6  0748               	decf	(?_printf+9)& (0+255),f,b
  5656  0021C8  0101               	movlb	1	; () banked
  5657  0021CA  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5658  0021CC  0101               	movlb	1	; () banked
  5659  0021CE  6F49               	movwf	(?_printf+10)& (0+255),b
  5660  0021D0  6B4A               	clrf	(?_printf+11)& (0+255),b
  5661  0021D2  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5662  0021D4  074A               	decf	(?_printf+11)& (0+255),f,b
  5663  0021D6  0101               	movlb	1	; () banked
  5664  0021D8  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5665  0021DA  0101               	movlb	1	; () banked
  5666  0021DC  6F4B               	movwf	(?_printf+12)& (0+255),b
  5667  0021DE  6B4C               	clrf	(?_printf+13)& (0+255),b
  5668  0021E0  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5669  0021E2  074C               	decf	(?_printf+13)& (0+255),f,b
  5670  0021E4  0101               	movlb	1	; () banked
  5671  0021E6  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5672  0021E8  0101               	movlb	1	; () banked
  5673  0021EA  6F4D               	movwf	(?_printf+14)& (0+255),b
  5674  0021EC  6B4E               	clrf	(?_printf+15)& (0+255),b
  5675  0021EE  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5676  0021F0  074E               	decf	(?_printf+15)& (0+255),f,b
  5677  0021F2  EC61  F000         	call	_printf	;wreg free
  5678                           
  5679                           ;screenDrawers.h: 78: }else if(chanValSection == 0) {
  5680  0021F6  D03A               	goto	l10750
  5681  0021F8                     l10746:
  5682  0021F8  0101               	movlb	1	; () banked
  5683  0021FA  519C               	movf	_chanValSection& (0+255),w,b
  5684  0021FC  A4D8               	btfss	status,2,c
  5685  0021FE  D036               	goto	l10750
  5686                           
  5687                           ; BSR set to: 1
  5688                           ;screenDrawers.h: 79: printf(" %c%u%u%u.%u%u%u ", flech, chanValdig[0], chanValdig[1],
  5689                           ;screenDrawers.h: 80: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5690  002200  0E3C               	movlw	low STR_6
  5691  002202  0101               	movlb	1	; () banked
  5692  002204  6F3F               	movwf	printf@f& (0+255),b
  5693  002206  0E7F               	movlw	high STR_6
  5694  002208  0101               	movlb	1	; () banked
  5695  00220A  6F40               	movwf	(printf@f+1)& (0+255),b
  5696  00220C  C19B  F141         	movff	_flech,?_printf+2
  5697  002210  0101               	movlb	1	; () banked
  5698  002212  6B42               	clrf	(?_printf+3)& (0+255),b
  5699  002214  0101               	movlb	1	; () banked
  5700  002216  51A3               	movf	_chanValdig& (0+255),w,b
  5701  002218  0101               	movlb	1	; () banked
  5702  00221A  6F43               	movwf	(?_printf+4)& (0+255),b
  5703  00221C  6B44               	clrf	(?_printf+5)& (0+255),b
  5704  00221E  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5705  002220  0744               	decf	(?_printf+5)& (0+255),f,b
  5706  002222  0101               	movlb	1	; () banked
  5707  002224  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5708  002226  0101               	movlb	1	; () banked
  5709  002228  6F45               	movwf	(?_printf+6)& (0+255),b
  5710  00222A  6B46               	clrf	(?_printf+7)& (0+255),b
  5711  00222C  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5712  00222E  0746               	decf	(?_printf+7)& (0+255),f,b
  5713  002230  0101               	movlb	1	; () banked
  5714  002232  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5715  002234  0101               	movlb	1	; () banked
  5716  002236  6F47               	movwf	(?_printf+8)& (0+255),b
  5717  002238  6B48               	clrf	(?_printf+9)& (0+255),b
  5718  00223A  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5719  00223C  0748               	decf	(?_printf+9)& (0+255),f,b
  5720  00223E  0101               	movlb	1	; () banked
  5721  002240  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5722  002242  0101               	movlb	1	; () banked
  5723  002244  6F49               	movwf	(?_printf+10)& (0+255),b
  5724  002246  6B4A               	clrf	(?_printf+11)& (0+255),b
  5725  002248  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5726  00224A  074A               	decf	(?_printf+11)& (0+255),f,b
  5727  00224C  0101               	movlb	1	; () banked
  5728  00224E  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5729  002250  0101               	movlb	1	; () banked
  5730  002252  6F4B               	movwf	(?_printf+12)& (0+255),b
  5731  002254  6B4C               	clrf	(?_printf+13)& (0+255),b
  5732  002256  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5733  002258  074C               	decf	(?_printf+13)& (0+255),f,b
  5734  00225A  0101               	movlb	1	; () banked
  5735  00225C  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5736  00225E  0101               	movlb	1	; () banked
  5737  002260  6F4D               	movwf	(?_printf+14)& (0+255),b
  5738  002262  6B4E               	clrf	(?_printf+15)& (0+255),b
  5739  002264  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5740  002266  074E               	decf	(?_printf+15)& (0+255),f,b
  5741  002268  EC61  F000         	call	_printf	;wreg free
  5742  00226C                     l10750:
  5743                           
  5744                           ;screenDrawers.h: 81: }
  5745                           ;screenDrawers.h: 82: lcd_gotoxy(11, 2);
  5746  00226C  0E02               	movlw	2
  5747  00226E  0101               	movlb	1	; () banked
  5748  002270  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5749  002272  0E0B               	movlw	11
  5750  002274  EC29  F038         	call	_lcd_gotoxy
  5751  002278  0012               	return		;funcret
  5752  00227A                     __end_of_drawValEditor:
  5753                           	opt stack 0
  5754                           tblptru	equ	0xFF8
  5755                           tblptrh	equ	0xFF7
  5756                           tblptrl	equ	0xFF6
  5757                           tablat	equ	0xFF5
  5758                           prodh	equ	0xFF4
  5759                           prodl	equ	0xFF3
  5760                           intcon	equ	0xFF2
  5761                           postinc0	equ	0xFEE
  5762                           wreg	equ	0xFE8
  5763                           postdec1	equ	0xFE5
  5764                           fsr1l	equ	0xFE1
  5765                           indf2	equ	0xFDF
  5766                           fsr2h	equ	0xFDA
  5767                           fsr2l	equ	0xFD9
  5768                           status	equ	0xFD8
  5769                           
  5770 ;; *************** function _drawAdvON *****************
  5771 ;; Defined at:
  5772 ;;		line 189 in file "source/screenDrawers.h"
  5773 ;; Parameters:    Size  Location     Type
  5774 ;;  on              1    wreg     unsigned char 
  5775 ;; Auto vars:     Size  Location     Type
  5776 ;;  on              1  116[BANK1 ] unsigned char 
  5777 ;; Return value:  Size  Location     Type
  5778 ;;                  1    wreg      void 
  5779 ;; Registers used:
  5780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5781 ;; Tracked objects:
  5782 ;;		On entry : 0/0
  5783 ;;		On exit  : 0/0
  5784 ;;		Unchanged: 0/0
  5785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5786 ;;      Params:         0       0       0       0       0       0       0
  5787 ;;      Locals:         0       0       1       0       0       0       0
  5788 ;;      Temps:          0       0       0       0       0       0       0
  5789 ;;      Totals:         0       0       1       0       0       0       0
  5790 ;;Total ram usage:        1 bytes
  5791 ;; Hardware stack levels used:    1
  5792 ;; Hardware stack levels required when called:   19
  5793 ;; This function calls:
  5794 ;;		_lcd_gotoxy
  5795 ;;		_printf
  5796 ;; This function is called by:
  5797 ;;		_drawScreen
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           	psect	text22
  5802  006CB2                     __ptext22:
  5803                           	opt stack 0
  5804  006CB2                     _drawAdvON:
  5805                           	opt stack 10
  5806                           
  5807                           ;incstack = 0
  5808                           ;drawAdvON@on stored from wreg
  5809  006CB2  0101               	movlb	1	; () banked
  5810  006CB4  6F74               	movwf	drawAdvON@on& (0+255),b
  5811                           
  5812                           ;screenDrawers.h: 190: lcd_gotoxy(1, 1);
  5813  006CB6  0E01               	movlw	1
  5814  006CB8  0101               	movlb	1	; () banked
  5815  006CBA  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5816  006CBC  0E01               	movlw	1
  5817  006CBE  EC29  F038         	call	_lcd_gotoxy
  5818                           
  5819                           ;screenDrawers.h: 191: printf("Modo Configurar:\n");
  5820  006CC2  0E64               	movlw	low STR_23
  5821  006CC4  0101               	movlb	1	; () banked
  5822  006CC6  6F3F               	movwf	printf@f& (0+255),b
  5823  006CC8  0E7E               	movlw	high STR_23
  5824  006CCA  0101               	movlb	1	; () banked
  5825  006CCC  6F40               	movwf	(printf@f+1)& (0+255),b
  5826  006CCE  EC61  F000         	call	_printf	;wreg free
  5827                           
  5828                           ;screenDrawers.h: 192: if(on)
  5829  006CD2  0101               	movlb	1	; () banked
  5830  006CD4  5174               	movf	drawAdvON@on& (0+255),w,b
  5831  006CD6  0101               	movlb	1	; () banked
  5832  006CD8  B4D8               	btfsc	status,2,c
  5833  006CDA  D009               	goto	l11010
  5834                           
  5835                           ; BSR set to: 1
  5836                           ;screenDrawers.h: 193: printf("    Iniciado    ");
  5837  006CDC  0E93               	movlw	low STR_24
  5838  006CDE  0101               	movlb	1	; () banked
  5839  006CE0  6F3F               	movwf	printf@f& (0+255),b
  5840  006CE2  0E7F               	movlw	high STR_24
  5841  006CE4  0101               	movlb	1	; () banked
  5842  006CE6  6F40               	movwf	(printf@f+1)& (0+255),b
  5843  006CE8  EC61  F000         	call	_printf	;wreg free
  5844  006CEC  0012               	return	
  5845  006CEE                     l11010:
  5846                           
  5847                           ;screenDrawers.h: 194: else
  5848                           ;screenDrawers.h: 195: printf("   Finalizado   ");
  5849  006CEE  0EA4               	movlw	low STR_25
  5850  006CF0  0101               	movlb	1	; () banked
  5851  006CF2  6F3F               	movwf	printf@f& (0+255),b
  5852  006CF4  0E7F               	movlw	high STR_25
  5853  006CF6  0101               	movlb	1	; () banked
  5854  006CF8  6F40               	movwf	(printf@f+1)& (0+255),b
  5855  006CFA  EC61  F000         	call	_printf	;wreg free
  5856  006CFE  0012               	return	
  5857  006D00                     __end_of_drawAdvON:
  5858                           	opt stack 0
  5859                           tblptru	equ	0xFF8
  5860                           tblptrh	equ	0xFF7
  5861                           tblptrl	equ	0xFF6
  5862                           tablat	equ	0xFF5
  5863                           prodh	equ	0xFF4
  5864                           prodl	equ	0xFF3
  5865                           intcon	equ	0xFF2
  5866                           postinc0	equ	0xFEE
  5867                           wreg	equ	0xFE8
  5868                           postdec1	equ	0xFE5
  5869                           fsr1l	equ	0xFE1
  5870                           indf2	equ	0xFDF
  5871                           fsr2h	equ	0xFDA
  5872                           fsr2l	equ	0xFD9
  5873                           status	equ	0xFD8
  5874                           
  5875 ;; *************** function _printf *****************
  5876 ;; Defined at:
  5877 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5878 ;; Parameters:    Size  Location     Type
  5879 ;;  f               2   63[BANK1 ] PTR const unsigned char 
  5880 ;;		 -> STR_43(17), STR_42(18), STR_41(17), STR_40(18), 
  5881 ;;		 -> STR_39(17), STR_38(18), STR_37(17), STR_36(18), 
  5882 ;;		 -> STR_35(17), STR_34(18), STR_33(7), STR_32(18), 
  5883 ;;		 -> STR_31(19), STR_30(18), STR_29(18), STR_28(18), 
  5884 ;;		 -> STR_27(18), STR_26(18), STR_25(17), STR_24(17), 
  5885 ;;		 -> STR_23(18), STR_22(17), STR_21(25), STR_20(18), 
  5886 ;;		 -> STR_19(16), STR_18(18), STR_17(7), STR_16(18), 
  5887 ;;		 -> STR_15(19), STR_14(18), STR_13(18), STR_12(18), 
  5888 ;;		 -> STR_11(18), STR_10(18), STR_9(20), STR_8(18), 
  5889 ;;		 -> STR_7(18), STR_6(18), STR_5(18), STR_4(18), 
  5890 ;;		 -> STR_3(18), STR_2(18), STR_1(18), 
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;  val             4  102[BANK1 ] unsigned long 
  5893 ;;  tmpval          4   98[BANK1 ] struct .
  5894 ;;  fval            3  110[BANK1 ] struct .
  5895 ;;  prec            2  113[BANK1 ] int 
  5896 ;;  width           2  108[BANK1 ] int 
  5897 ;;  exp             2  106[BANK1 ] int 
  5898 ;;  flag            2   96[BANK1 ] unsigned short 
  5899 ;;  ap              2   94[BANK1 ] PTR void [1]
  5900 ;;		 -> ?_printf(2), 
  5901 ;;  len             2   92[BANK1 ] unsigned int 
  5902 ;;  cp              2   90[BANK1 ] PTR const unsigned char 
  5903 ;;		 -> printf@c(1), 
  5904 ;;  c               1  115[BANK1 ] char 
  5905 ;;  d               1    0        unsigned char 
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  2   63[BANK1 ] int 
  5908 ;; Registers used:
  5909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5915 ;;      Params:         0       0      18       0       0       0       0
  5916 ;;      Locals:         0       0      29       0       0       0       0
  5917 ;;      Temps:          0       0       6       0       0       0       0
  5918 ;;      Totals:         0       0      53       0       0       0       0
  5919 ;;Total ram usage:       53 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:   18
  5922 ;; This function calls:
  5923 ;;		___awdiv
  5924 ;;		___ftadd
  5925 ;;		___ftge
  5926 ;;		___ftmul
  5927 ;;		___ftneg
  5928 ;;		___ftsub
  5929 ;;		___fttol
  5930 ;;		___lldiv
  5931 ;;		___llmod
  5932 ;;		___lltoft
  5933 ;;		___wmul
  5934 ;;		__div_to_l_
  5935 ;;		__tdiv_to_l_
  5936 ;;		_fround
  5937 ;;		_isdigit
  5938 ;;		_putch
  5939 ;;		_scale
  5940 ;; This function is called by:
  5941 ;;		_drawValEditor
  5942 ;;		_drawMenu
  5943 ;;		_drawChanVal
  5944 ;;		_drawPass1Lin
  5945 ;;		_drawPassWord
  5946 ;;		_drawBadPass
  5947 ;;		_drawAdvON
  5948 ;;		_drawSNquest
  5949 ;;		_drawAutoCalibRM
  5950 ;;		_drawCutError
  5951 ;;		_drawReady2Cut
  5952 ;;		_drawCalibProc
  5953 ;; This function uses a non-reentrant model
  5954 ;;
  5955                           
  5956                           	psect	text23
  5957  0000C2                     __ptext23:
  5958                           	opt stack 0
  5959  0000C2                     _printf:
  5960                           	opt stack 10
  5961                           
  5962                           ;doprnt.c: 466: va_list ap;
  5963                           ;doprnt.c: 499: signed char c;
  5964                           ;doprnt.c: 501: int width;
  5965                           ;doprnt.c: 504: int prec;
  5966                           ;doprnt.c: 508: unsigned short flag;
  5967                           ;doprnt.c: 515: char d;
  5968                           ;doprnt.c: 516: double fval;
  5969                           ;doprnt.c: 517: int exp;
  5970                           ;doprnt.c: 523: union {
  5971                           ;doprnt.c: 524: unsigned long vd;
  5972                           ;doprnt.c: 525: double integ;
  5973                           ;doprnt.c: 526: } tmpval;
  5974                           ;doprnt.c: 528: unsigned long val;
  5975                           ;doprnt.c: 529: unsigned len;
  5976                           ;doprnt.c: 530: const char * cp;
  5977                           ;doprnt.c: 533: *ap = __va_start();
  5978                           
  5979                           ;incstack = 0
  5980  0000C2  0E41               	movlw	low (?_printf+2)
  5981  0000C4  0101               	movlb	1	; () banked
  5982  0000C6  6F5E               	movwf	printf@ap& (0+255),b
  5983  0000C8  0E01               	movlw	high (?_printf+2)
  5984  0000CA  0101               	movlb	1	; () banked
  5985  0000CC  6F5F               	movwf	(printf@ap+1)& (0+255),b
  5986                           
  5987                           ;doprnt.c: 536: while(c = *f++) {
  5988  0000CE  EF6A  F006         	goto	l10642
  5989  0000D2                     l10344:
  5990                           
  5991                           ; BSR set to: 1
  5992                           ;doprnt.c: 538: if(c != '%')
  5993  0000D2  0E25               	movlw	37
  5994  0000D4  0101               	movlb	1	; () banked
  5995  0000D6  1973               	xorwf	printf@c& (0+255),w,b
  5996  0000D8  B4D8               	btfsc	status,2,c
  5997  0000DA  D006               	goto	l10348
  5998                           
  5999                           ; BSR set to: 1
  6000                           ;doprnt.c: 540: {
  6001                           ;doprnt.c: 541: (putch(c) );
  6002  0000DC  0101               	movlb	1	; () banked
  6003  0000DE  5173               	movf	printf@c& (0+255),w,b
  6004  0000E0  EC79  F039         	call	_putch
  6005                           
  6006                           ;doprnt.c: 542: continue;
  6007  0000E4  EF6A  F006         	goto	l10642
  6008  0000E8                     l10348:
  6009                           
  6010                           ;doprnt.c: 543: }
  6011                           ;doprnt.c: 546: width = 0;
  6012  0000E8  0E00               	movlw	0
  6013  0000EA  0101               	movlb	1	; () banked
  6014  0000EC  6F6D               	movwf	(printf@width+1)& (0+255),b
  6015  0000EE  0E00               	movlw	0
  6016  0000F0  6F6C               	movwf	printf@width& (0+255),b
  6017                           
  6018                           ;doprnt.c: 548: flag = 0;
  6019  0000F2  0E00               	movlw	0
  6020  0000F4  0101               	movlb	1	; () banked
  6021  0000F6  6F61               	movwf	(printf@flag+1)& (0+255),b
  6022  0000F8  0E00               	movlw	0
  6023  0000FA  6F60               	movwf	printf@flag& (0+255),b
  6024                           
  6025                           ; BSR set to: 1
  6026                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6027  0000FC  C13F  FFF6         	movff	printf@f,tblptrl
  6028  000100  C140  FFF7         	movff	printf@f+1,tblptrh
  6029  000104                     	if	0	;tblptru may be non-zero
  6030  000104                     	endif
  6031  000104                     	if	0	;tblptru may be non-zero
  6032  000104                     	endif
  6033  000104  0008               	tblrd		*
  6034  000106  50F5               	movf	tablat,w,c
  6035  000108  ECC9  F038         	call	_isdigit
  6036  00010C  A0D8               	btfss	status,0,c
  6037  00010E  D040               	goto	l10362
  6038                           
  6039                           ;doprnt.c: 598: width = 0;
  6040  000110  0E00               	movlw	0
  6041  000112  0101               	movlb	1	; () banked
  6042  000114  6F6D               	movwf	(printf@width+1)& (0+255),b
  6043  000116  0E00               	movlw	0
  6044  000118  6F6C               	movwf	printf@width& (0+255),b
  6045  00011A                     l10354:
  6046                           
  6047                           ;doprnt.c: 600: width *= 10;
  6048  00011A  C16C  F10E         	movff	printf@width,___wmul@multiplier
  6049  00011E  C16D  F10F         	movff	printf@width+1,___wmul@multiplier+1
  6050  000122  0E00               	movlw	0
  6051  000124  0101               	movlb	1	; () banked
  6052  000126  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6053  000128  0E0A               	movlw	10
  6054  00012A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  6055  00012C  ECDC  F037         	call	___wmul	;wreg free
  6056  000130  C10E  F16C         	movff	?___wmul,printf@width
  6057  000134  C10F  F16D         	movff	?___wmul+1,printf@width+1
  6058                           
  6059                           ;doprnt.c: 601: width += *f++ - '0';
  6060  000138  0ED0               	movlw	208
  6061  00013A  0101               	movlb	1	; () banked
  6062  00013C  6F51               	movwf	??_printf& (0+255),b
  6063  00013E  0EFF               	movlw	255
  6064  000140  0101               	movlb	1	; () banked
  6065  000142  6F52               	movwf	(??_printf+1)& (0+255),b
  6066  000144  C13F  FFF6         	movff	printf@f,tblptrl
  6067  000148  C140  FFF7         	movff	printf@f+1,tblptrh
  6068  00014C                     	if	0	;tblptru may be non-zero
  6069  00014C                     	endif
  6070  00014C                     	if	0	;tblptru may be non-zero
  6071  00014C                     	endif
  6072  00014C  0008               	tblrd		*
  6073  00014E  50F5               	movf	tablat,w,c
  6074  000150  0101               	movlb	1	; () banked
  6075  000152  6F53               	movwf	(??_printf+2)& (0+255),b
  6076  000154  6B54               	clrf	(??_printf+3)& (0+255),b
  6077  000156  0101               	movlb	1	; () banked
  6078  000158  5151               	movf	??_printf& (0+255),w,b
  6079  00015A  0101               	movlb	1	; () banked
  6080  00015C  2753               	addwf	(??_printf+2)& (0+255),f,b
  6081  00015E  0101               	movlb	1	; () banked
  6082  000160  5152               	movf	(??_printf+1)& (0+255),w,b
  6083  000162  0101               	movlb	1	; () banked
  6084  000164  2354               	addwfc	(??_printf+3)& (0+255),f,b
  6085  000166  0101               	movlb	1	; () banked
  6086  000168  5153               	movf	(??_printf+2)& (0+255),w,b
  6087  00016A  0101               	movlb	1	; () banked
  6088  00016C  276C               	addwf	printf@width& (0+255),f,b
  6089  00016E  0101               	movlb	1	; () banked
  6090  000170  5154               	movf	(??_printf+3)& (0+255),w,b
  6091  000172  0101               	movlb	1	; () banked
  6092  000174  236D               	addwfc	(printf@width+1)& (0+255),f,b
  6093                           
  6094                           ; BSR set to: 1
  6095  000176  0101               	movlb	1	; () banked
  6096  000178  4B3F               	infsnz	printf@f& (0+255),f,b
  6097  00017A  2B40               	incf	(printf@f+1)& (0+255),f,b
  6098                           
  6099                           ; BSR set to: 1
  6100                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6101  00017C  C13F  FFF6         	movff	printf@f,tblptrl
  6102  000180  C140  FFF7         	movff	printf@f+1,tblptrh
  6103  000184                     	if	0	;tblptru may be non-zero
  6104  000184                     	endif
  6105  000184                     	if	0	;tblptru may be non-zero
  6106  000184                     	endif
  6107  000184  0008               	tblrd		*
  6108  000186  50F5               	movf	tablat,w,c
  6109  000188  ECC9  F038         	call	_isdigit
  6110  00018C  B0D8               	btfsc	status,0,c
  6111  00018E  D7C5               	goto	l10354
  6112  000190                     l10362:
  6113                           
  6114                           ;doprnt.c: 608: }
  6115                           ;doprnt.c: 611: if(*f == '.') {
  6116  000190  C13F  FFF6         	movff	printf@f,tblptrl
  6117  000194  C140  FFF7         	movff	printf@f+1,tblptrh
  6118  000198                     	if	0	;tblptru may be non-zero
  6119  000198                     	endif
  6120  000198                     	if	0	;tblptru may be non-zero
  6121  000198                     	endif
  6122  000198  0008               	tblrd		*
  6123  00019A  50F5               	movf	tablat,w,c
  6124  00019C  0A2E               	xorlw	46
  6125  00019E  A4D8               	btfss	status,2,c
  6126  0001A0  D039               	goto	l10374
  6127                           
  6128                           ;doprnt.c: 612: flag |= 0x4000;
  6129  0001A2  0101               	movlb	1	; () banked
  6130  0001A4  8D61               	bsf	(printf@flag+1)& (0+255),6,b
  6131                           
  6132                           ;doprnt.c: 613: f++;
  6133  0001A6  0101               	movlb	1	; () banked
  6134  0001A8  4B3F               	infsnz	printf@f& (0+255),f,b
  6135  0001AA  2B40               	incf	(printf@f+1)& (0+255),f,b
  6136                           
  6137                           ; BSR set to: 1
  6138                           ;doprnt.c: 620: {
  6139                           ;doprnt.c: 621: prec = 0;
  6140  0001AC  0E00               	movlw	0
  6141  0001AE  0101               	movlb	1	; () banked
  6142  0001B0  6F72               	movwf	(printf@prec+1)& (0+255),b
  6143  0001B2  0E00               	movlw	0
  6144  0001B4  6F71               	movwf	printf@prec& (0+255),b
  6145                           
  6146                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6147  0001B6  D023               	goto	l10372
  6148  0001B8                     l10368:
  6149                           
  6150                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6151  0001B8  C171  F10E         	movff	printf@prec,___wmul@multiplier
  6152  0001BC  C172  F10F         	movff	printf@prec+1,___wmul@multiplier+1
  6153  0001C0  0E00               	movlw	0
  6154  0001C2  0101               	movlb	1	; () banked
  6155  0001C4  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6156  0001C6  0E0A               	movlw	10
  6157  0001C8  6F10               	movwf	___wmul@multiplicand& (0+255),b
  6158  0001CA  ECDC  F037         	call	___wmul	;wreg free
  6159  0001CE  C13F  FFF6         	movff	printf@f,tblptrl
  6160  0001D2  C140  FFF7         	movff	printf@f+1,tblptrh
  6161  0001D6                     	if	0	;tblptru may be non-zero
  6162  0001D6                     	endif
  6163  0001D6                     	if	0	;tblptru may be non-zero
  6164  0001D6                     	endif
  6165  0001D6  0008               	tblrd		*
  6166  0001D8  50F5               	movf	tablat,w,c
  6167  0001DA  0101               	movlb	1	; () banked
  6168  0001DC  270E               	addwf	?___wmul& (0+255),f,b
  6169  0001DE  0E00               	movlw	0
  6170  0001E0  0101               	movlb	1	; () banked
  6171  0001E2  230F               	addwfc	(?___wmul+1)& (0+255),f,b
  6172  0001E4  0ED0               	movlw	208
  6173  0001E6  0101               	movlb	1	; () banked
  6174  0001E8  250E               	addwf	?___wmul& (0+255),w,b
  6175  0001EA  0101               	movlb	1	; () banked
  6176  0001EC  6F71               	movwf	printf@prec& (0+255),b
  6177  0001EE  0EFF               	movlw	255
  6178  0001F0  0101               	movlb	1	; () banked
  6179  0001F2  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  6180  0001F4  0101               	movlb	1	; () banked
  6181  0001F6  6F72               	movwf	(printf@prec+1)& (0+255),b
  6182                           
  6183                           ; BSR set to: 1
  6184  0001F8  0101               	movlb	1	; () banked
  6185  0001FA  4B3F               	infsnz	printf@f& (0+255),f,b
  6186  0001FC  2B40               	incf	(printf@f+1)& (0+255),f,b
  6187  0001FE                     l10372:
  6188                           
  6189                           ; BSR set to: 1
  6190  0001FE  C13F  FFF6         	movff	printf@f,tblptrl
  6191  000202  C140  FFF7         	movff	printf@f+1,tblptrh
  6192  000206                     	if	0	;tblptru may be non-zero
  6193  000206                     	endif
  6194  000206                     	if	0	;tblptru may be non-zero
  6195  000206                     	endif
  6196  000206  0008               	tblrd		*
  6197  000208  50F5               	movf	tablat,w,c
  6198  00020A  ECC9  F038         	call	_isdigit
  6199  00020E  A0D8               	btfss	status,0,c
  6200  000210  D07A               	goto	l10414
  6201  000212  D7D2               	goto	l10368
  6202  000214                     l10374:
  6203                           
  6204                           ;doprnt.c: 626: prec = 0;
  6205  000214  0E00               	movlw	0
  6206  000216  0101               	movlb	1	; () banked
  6207  000218  6F72               	movwf	(printf@prec+1)& (0+255),b
  6208  00021A  0E00               	movlw	0
  6209  00021C  6F71               	movwf	printf@prec& (0+255),b
  6210                           
  6211                           ; BSR set to: 1
  6212                           ;doprnt.c: 628: flag |= 0x1000;
  6213  00021E  0101               	movlb	1	; () banked
  6214  000220  8961               	bsf	(printf@flag+1)& (0+255),4,b
  6215                           
  6216                           ; BSR set to: 1
  6217                           ;doprnt.c: 630: }
  6218                           ;doprnt.c: 635: switch(c = *f++) {
  6219  000222  D071               	goto	l10414
  6220  000224                     l10378:
  6221                           
  6222                           ; BSR set to: 1
  6223                           ;doprnt.c: 663: flag |= 0x400;
  6224  000224  0101               	movlb	1	; () banked
  6225  000226  8561               	bsf	(printf@flag+1)& (0+255),2,b
  6226                           
  6227                           ; BSR set to: 1
  6228                           ;doprnt.c: 698: case 'i':
  6229                           ;doprnt.c: 699: break;
  6230                           
  6231                           ; BSR set to: 1
  6232                           
  6233                           ;doprnt.c: 697: case 'd':
  6234                           
  6235                           ;doprnt.c: 664: break;
  6236  000228  D08D               	goto	l10416
  6237  00022A                     l10380:
  6238                           
  6239                           ; BSR set to: 1
  6240                           ;doprnt.c: 753: if(prec && prec < len)
  6241  00022A  0101               	movlb	1	; () banked
  6242  00022C  5171               	movf	printf@prec& (0+255),w,b
  6243  00022E  0101               	movlb	1	; () banked
  6244  000230  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  6245  000232  B4D8               	btfsc	status,2,c
  6246  000234  D00E               	goto	l10386
  6247                           
  6248                           ; BSR set to: 1
  6249  000236  0101               	movlb	1	; () banked
  6250  000238  515C               	movf	printf@len& (0+255),w,b
  6251  00023A  0101               	movlb	1	; () banked
  6252  00023C  5D71               	subwf	printf@prec& (0+255),w,b
  6253  00023E  0101               	movlb	1	; () banked
  6254  000240  515D               	movf	(printf@len+1)& (0+255),w,b
  6255  000242  0101               	movlb	1	; () banked
  6256  000244  5972               	subwfb	(printf@prec+1)& (0+255),w,b
  6257  000246  B0D8               	btfsc	status,0,c
  6258  000248  D004               	goto	l10386
  6259                           
  6260                           ; BSR set to: 1
  6261                           ;doprnt.c: 754: len = prec;
  6262  00024A  C171  F15C         	movff	printf@prec,printf@len
  6263  00024E  C172  F15D         	movff	printf@prec+1,printf@len+1
  6264  000252                     l10386:
  6265                           
  6266                           ; BSR set to: 1
  6267                           ;doprnt.c: 757: if(width > len)
  6268  000252  0101               	movlb	1	; () banked
  6269  000254  516C               	movf	printf@width& (0+255),w,b
  6270  000256  0101               	movlb	1	; () banked
  6271  000258  5D5C               	subwf	printf@len& (0+255),w,b
  6272  00025A  0101               	movlb	1	; () banked
  6273  00025C  516D               	movf	(printf@width+1)& (0+255),w,b
  6274  00025E  0101               	movlb	1	; () banked
  6275  000260  595D               	subwfb	(printf@len+1)& (0+255),w,b
  6276  000262  B0D8               	btfsc	status,0,c
  6277  000264  D009               	goto	l10390
  6278                           
  6279                           ; BSR set to: 1
  6280                           ;doprnt.c: 758: width -= len;
  6281  000266  0101               	movlb	1	; () banked
  6282  000268  515C               	movf	printf@len& (0+255),w,b
  6283  00026A  0101               	movlb	1	; () banked
  6284  00026C  5F6C               	subwf	printf@width& (0+255),f,b
  6285  00026E  0101               	movlb	1	; () banked
  6286  000270  515D               	movf	(printf@len+1)& (0+255),w,b
  6287  000272  0101               	movlb	1	; () banked
  6288  000274  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  6289  000276  D009               	goto	l10394
  6290  000278                     l10390:
  6291                           
  6292                           ; BSR set to: 1
  6293                           ;doprnt.c: 759: else
  6294                           ;doprnt.c: 760: width = 0;
  6295  000278  0E00               	movlw	0
  6296  00027A  0101               	movlb	1	; () banked
  6297  00027C  6F6D               	movwf	(printf@width+1)& (0+255),b
  6298  00027E  0E00               	movlw	0
  6299  000280  6F6C               	movwf	printf@width& (0+255),b
  6300                           
  6301                           ; BSR set to: 1
  6302                           ;doprnt.c: 764: while(width--)
  6303  000282  D003               	goto	l10394
  6304  000284                     l10392:
  6305                           
  6306                           ; BSR set to: 1
  6307                           ;doprnt.c: 765: (putch(' ') );
  6308  000284  0E20               	movlw	32
  6309  000286  EC79  F039         	call	_putch
  6310  00028A                     l10394:
  6311  00028A  0101               	movlb	1	; () banked
  6312  00028C  076C               	decf	printf@width& (0+255),f,b
  6313  00028E  A0D8               	btfss	status,0,c
  6314  000290  076D               	decf	(printf@width+1)& (0+255),f,b
  6315  000292  0101               	movlb	1	; () banked
  6316  000294  296C               	incf	printf@width& (0+255),w,b
  6317  000296  E1F6               	bnz	l10392
  6318  000298  0101               	movlb	1	; () banked
  6319  00029A  296D               	incf	(printf@width+1)& (0+255),w,b
  6320  00029C  B4D8               	btfsc	status,2,c
  6321  00029E  D00B               	goto	l10400
  6322  0002A0  D7F1               	goto	l10392
  6323  0002A2                     l10396:
  6324                           
  6325                           ; BSR set to: 1
  6326                           ;doprnt.c: 768: (putch(*cp++) );
  6327  0002A2  C15A  FFD9         	movff	printf@cp,fsr2l
  6328  0002A6  C15B  FFDA         	movff	printf@cp+1,fsr2h
  6329  0002AA  50DF               	movf	indf2,w,c
  6330  0002AC  EC79  F039         	call	_putch
  6331  0002B0  0101               	movlb	1	; () banked
  6332  0002B2  4B5A               	infsnz	printf@cp& (0+255),f,b
  6333  0002B4  2B5B               	incf	(printf@cp+1)& (0+255),f,b
  6334  0002B6                     l10400:
  6335                           
  6336                           ; BSR set to: 1
  6337  0002B6  0101               	movlb	1	; () banked
  6338  0002B8  075C               	decf	printf@len& (0+255),f,b
  6339  0002BA  A0D8               	btfss	status,0,c
  6340  0002BC  075D               	decf	(printf@len+1)& (0+255),f,b
  6341  0002BE  0101               	movlb	1	; () banked
  6342  0002C0  295C               	incf	printf@len& (0+255),w,b
  6343  0002C2  E1EF               	bnz	l10396
  6344  0002C4  0101               	movlb	1	; () banked
  6345  0002C6  295D               	incf	(printf@len+1)& (0+255),w,b
  6346  0002C8  B4D8               	btfsc	status,2,c
  6347  0002CA  EF6A  F006         	goto	l10642
  6348  0002CE  D7E9               	goto	l10396
  6349  0002D0                     l10402:
  6350                           
  6351                           ; BSR set to: 1
  6352                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6353  0002D0  C15E  FFD9         	movff	printf@ap,fsr2l
  6354  0002D4  C15F  FFDA         	movff	printf@ap+1,fsr2h
  6355  0002D8  50DF               	movf	indf2,w,c
  6356  0002DA  0101               	movlb	1	; () banked
  6357  0002DC  6F73               	movwf	printf@c& (0+255),b
  6358                           
  6359                           ; BSR set to: 1
  6360  0002DE  0E02               	movlw	2
  6361  0002E0  0101               	movlb	1	; () banked
  6362  0002E2  275E               	addwf	printf@ap& (0+255),f,b
  6363  0002E4  0E00               	movlw	0
  6364  0002E6  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  6365  0002E8                     l10406:
  6366                           
  6367                           ; BSR set to: 1
  6368                           ;doprnt.c: 805: cp = (char *)&c;
  6369  0002E8  0E73               	movlw	low printf@c
  6370  0002EA  0101               	movlb	1	; () banked
  6371  0002EC  6F5A               	movwf	printf@cp& (0+255),b
  6372  0002EE  0E01               	movlw	high printf@c
  6373  0002F0  0101               	movlb	1	; () banked
  6374  0002F2  6F5B               	movwf	(printf@cp+1)& (0+255),b
  6375                           
  6376                           ; BSR set to: 1
  6377                           ;doprnt.c: 806: len = 1;
  6378  0002F4  0E00               	movlw	0
  6379  0002F6  0101               	movlb	1	; () banked
  6380  0002F8  6F5D               	movwf	(printf@len+1)& (0+255),b
  6381  0002FA  0E01               	movlw	1
  6382  0002FC  6F5C               	movwf	printf@len& (0+255),b
  6383                           
  6384                           ;doprnt.c: 807: goto dostring;
  6385  0002FE  D795               	goto	l10380
  6386  000300                     l10410:
  6387                           
  6388                           ; BSR set to: 1
  6389                           ;doprnt.c: 818: flag |= 0x40;
  6390  000300  0101               	movlb	1	; () banked
  6391  000302  8D60               	bsf	printf@flag& (0+255),6,b
  6392                           
  6393                           ; BSR set to: 1
  6394                           ;doprnt.c: 822: }
  6395                           
  6396                           ;doprnt.c: 819: break;
  6397  000304  D01F               	goto	l10416
  6398  000306                     l10414:
  6399  000306  C13F  FFF6         	movff	printf@f,tblptrl
  6400  00030A  C140  FFF7         	movff	printf@f+1,tblptrh
  6401  00030E  0101               	movlb	1	; () banked
  6402  000310  4B3F               	infsnz	printf@f& (0+255),f,b
  6403  000312  2B40               	incf	(printf@f+1)& (0+255),f,b
  6404  000314                     	if	0	;tblptru may be non-zero
  6405  000314                     	endif
  6406  000314                     	if	0	;tblptru may be non-zero
  6407  000314                     	endif
  6408  000314  0008               	tblrd		*
  6409  000316  CFF5 F173          	movff	tablat,printf@c
  6410  00031A  0101               	movlb	1	; () banked
  6411  00031C  5173               	movf	printf@c& (0+255),w,b
  6412                           
  6413                           ; Switch size 1, requested type "space"
  6414                           ; Number of cases is 6, Range of values is 0 to 117
  6415                           ; switch strategies available:
  6416                           ; Name         Instructions Cycles
  6417                           ; simple_byte           19    10 (average)
  6418                           ;	Chosen strategy is simple_byte
  6419  00031E  0A00               	xorlw	0	; case 0
  6420  000320  B4D8               	btfsc	status,2,c
  6421  000322  0012               	return	
  6422  000324  0A63               	xorlw	99	; case 99
  6423  000326  B4D8               	btfsc	status,2,c
  6424  000328  D7D3               	goto	l10402
  6425  00032A  0A07               	xorlw	7	; case 100
  6426  00032C  B4D8               	btfsc	status,2,c
  6427  00032E  D00A               	goto	l10416
  6428  000330  0A02               	xorlw	2	; case 102
  6429  000332  B4D8               	btfsc	status,2,c
  6430  000334  D777               	goto	l10378
  6431  000336  0A0F               	xorlw	15	; case 105
  6432  000338  B4D8               	btfsc	status,2,c
  6433  00033A  D004               	goto	l10416
  6434  00033C  0A1C               	xorlw	28	; case 117
  6435  00033E  B4D8               	btfsc	status,2,c
  6436  000340  D7DF               	goto	l10410
  6437  000342  D7D2               	goto	l10406
  6438  000344                     l10416:
  6439                           
  6440                           ; BSR set to: 1
  6441                           ;doprnt.c: 825: if(flag & (0x700)) {
  6442  000344  0E07               	movlw	7
  6443  000346  0101               	movlb	1	; () banked
  6444  000348  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6445  00034A  B4D8               	btfsc	status,2,c
  6446  00034C  D351               	goto	l1002
  6447                           
  6448                           ; BSR set to: 1
  6449                           ;doprnt.c: 827: if(flag & 0x1000)
  6450  00034E  0101               	movlb	1	; () banked
  6451  000350  A961               	btfss	(printf@flag+1)& (0+255),4,b
  6452  000352  D005               	goto	l10422
  6453                           
  6454                           ; BSR set to: 1
  6455                           ;doprnt.c: 829: prec = 6;
  6456  000354  0E00               	movlw	0
  6457  000356  0101               	movlb	1	; () banked
  6458  000358  6F72               	movwf	(printf@prec+1)& (0+255),b
  6459  00035A  0E06               	movlw	6
  6460  00035C  6F71               	movwf	printf@prec& (0+255),b
  6461  00035E                     l10422:
  6462                           
  6463                           ; BSR set to: 1
  6464                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6465  00035E  C15E  FFD9         	movff	printf@ap,fsr2l
  6466  000362  C15F  FFDA         	movff	printf@ap+1,fsr2h
  6467  000366  CFDE F16E          	movff	postinc2,printf@fval
  6468  00036A  CFDE F16F          	movff	postinc2,printf@fval+1
  6469  00036E  CFDD F170          	movff	postdec2,printf@fval+2
  6470                           
  6471                           ; BSR set to: 1
  6472  000372  0E03               	movlw	3
  6473  000374  0101               	movlb	1	; () banked
  6474  000376  275E               	addwf	printf@ap& (0+255),f,b
  6475  000378  0E00               	movlw	0
  6476  00037A  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  6477                           
  6478                           ; BSR set to: 1
  6479                           ;doprnt.c: 831: if(fval < 0.0) {
  6480  00037C  0101               	movlb	1	; () banked
  6481  00037E  AF70               	btfss	(printf@fval+2)& (0+255),7,b
  6482  000380  D011               	goto	l10432
  6483                           
  6484                           ; BSR set to: 1
  6485                           ;doprnt.c: 832: fval = -fval;
  6486  000382  C16E  F100         	movff	printf@fval,___ftneg@f1
  6487  000386  C16F  F101         	movff	printf@fval+1,___ftneg@f1+1
  6488  00038A  C170  F102         	movff	printf@fval+2,___ftneg@f1+2
  6489  00038E  EC41  F038         	call	___ftneg	;wreg free
  6490  000392  C100  F16E         	movff	?___ftneg,printf@fval
  6491  000396  C101  F16F         	movff	?___ftneg+1,printf@fval+1
  6492  00039A  C102  F170         	movff	?___ftneg+2,printf@fval+2
  6493                           
  6494                           ;doprnt.c: 833: flag |= 0x03;
  6495  00039E  0E03               	movlw	3
  6496  0003A0  0101               	movlb	1	; () banked
  6497  0003A2  1360               	iorwf	printf@flag& (0+255),f,b
  6498  0003A4                     l10432:
  6499                           
  6500                           ; BSR set to: 1
  6501                           ;doprnt.c: 834: }
  6502                           ;doprnt.c: 835: exp = 0;
  6503  0003A4  0E00               	movlw	0
  6504  0003A6  0101               	movlb	1	; () banked
  6505  0003A8  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6506  0003AA  0E00               	movlw	0
  6507  0003AC  6F6A               	movwf	printf@exp& (0+255),b
  6508                           
  6509                           ; BSR set to: 1
  6510                           ;doprnt.c: 836: if( fval!=0) {
  6511  0003AE  0101               	movlb	1	; () banked
  6512  0003B0  516E               	movf	printf@fval& (0+255),w,b
  6513  0003B2  0101               	movlb	1	; () banked
  6514  0003B4  116F               	iorwf	(printf@fval+1)& (0+255),w,b
  6515  0003B6  0101               	movlb	1	; () banked
  6516  0003B8  1170               	iorwf	(printf@fval+2)& (0+255),w,b
  6517  0003BA  B4D8               	btfsc	status,2,c
  6518  0003BC  D09B               	goto	l10460
  6519                           
  6520                           ; BSR set to: 1
  6521                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6522  0003BE  0E82               	movlw	130
  6523  0003C0  0101               	movlb	1	; () banked
  6524  0003C2  6F51               	movwf	??_printf& (0+255),b
  6525  0003C4  0EFF               	movlw	255
  6526  0003C6  0101               	movlb	1	; () banked
  6527  0003C8  6F52               	movwf	(??_printf+1)& (0+255),b
  6528  0003CA  C16E  F153         	movff	printf@fval,??_printf+2
  6529  0003CE  C16F  F154         	movff	printf@fval+1,??_printf+3
  6530  0003D2  C170  F155         	movff	printf@fval+2,??_printf+4
  6531  0003D6  C171  F156         	movff	printf@fval+3,??_printf+5
  6532  0003DA  0E10               	movlw	16
  6533  0003DC  D006               	goto	u15260
  6534  0003DE                     u15265:
  6535  0003DE  0101               	movlb	1	; () banked
  6536  0003E0  90D8               	bcf	status,0,c
  6537  0003E2  3356               	rrcf	(??_printf+5)& (0+255),f,b
  6538  0003E4  3355               	rrcf	(??_printf+4)& (0+255),f,b
  6539  0003E6  3354               	rrcf	(??_printf+3)& (0+255),f,b
  6540  0003E8  3353               	rrcf	(??_printf+2)& (0+255),f,b
  6541  0003EA                     u15260:
  6542  0003EA  2EE8               	decfsz	wreg,f,c
  6543  0003EC  D7F8               	goto	u15265
  6544  0003EE  0101               	movlb	1	; () banked
  6545  0003F0  5153               	movf	(??_printf+2)& (0+255),w,b
  6546  0003F2  0101               	movlb	1	; () banked
  6547  0003F4  2551               	addwf	??_printf& (0+255),w,b
  6548  0003F6  0101               	movlb	1	; () banked
  6549  0003F8  6F6A               	movwf	printf@exp& (0+255),b
  6550  0003FA  0E00               	movlw	0
  6551  0003FC  0101               	movlb	1	; () banked
  6552  0003FE  2152               	addwfc	(??_printf+1)& (0+255),w,b
  6553  000400  0101               	movlb	1	; () banked
  6554  000402  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6555                           
  6556                           ; BSR set to: 1
  6557                           ;doprnt.c: 838: exp--;
  6558  000404  0101               	movlb	1	; () banked
  6559  000406  076A               	decf	printf@exp& (0+255),f,b
  6560  000408  A0D8               	btfss	status,0,c
  6561  00040A  076B               	decf	(printf@exp+1)& (0+255),f,b
  6562                           
  6563                           ; BSR set to: 1
  6564                           ;doprnt.c: 839: exp *= 3;
  6565  00040C  C16A  F10E         	movff	printf@exp,___wmul@multiplier
  6566  000410  C16B  F10F         	movff	printf@exp+1,___wmul@multiplier+1
  6567  000414  0E00               	movlw	0
  6568  000416  0101               	movlb	1	; () banked
  6569  000418  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6570  00041A  0E03               	movlw	3
  6571  00041C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  6572  00041E  ECDC  F037         	call	___wmul	;wreg free
  6573  000422  C10E  F16A         	movff	?___wmul,printf@exp
  6574  000426  C10F  F16B         	movff	?___wmul+1,printf@exp+1
  6575                           
  6576                           ;doprnt.c: 840: exp /= 10;
  6577  00042A  C16A  F106         	movff	printf@exp,___awdiv@dividend
  6578  00042E  C16B  F107         	movff	printf@exp+1,___awdiv@dividend+1
  6579  000432  0E00               	movlw	0
  6580  000434  0101               	movlb	1	; () banked
  6581  000436  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  6582  000438  0E0A               	movlw	10
  6583  00043A  6F08               	movwf	___awdiv@divisor& (0+255),b
  6584  00043C  EC28  F02C         	call	___awdiv	;wreg free
  6585  000440  C106  F16A         	movff	?___awdiv,printf@exp
  6586  000444  C107  F16B         	movff	?___awdiv+1,printf@exp+1
  6587                           
  6588                           ;doprnt.c: 841: if(exp < 0)
  6589  000448  0101               	movlb	1	; () banked
  6590  00044A  AF6B               	btfss	(printf@exp+1)& (0+255),7,b
  6591  00044C  D004               	goto	l10448
  6592                           
  6593                           ; BSR set to: 1
  6594                           ;doprnt.c: 842: exp--;
  6595  00044E  0101               	movlb	1	; () banked
  6596  000450  076A               	decf	printf@exp& (0+255),f,b
  6597  000452  A0D8               	btfss	status,0,c
  6598  000454  076B               	decf	(printf@exp+1)& (0+255),f,b
  6599  000456                     l10448:
  6600                           
  6601                           ; BSR set to: 1
  6602                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6603  000456  0101               	movlb	1	; () banked
  6604  000458  516A               	movf	printf@exp& (0+255),w,b
  6605  00045A  0800               	sublw	0
  6606  00045C  EC7A  F006         	call	_scale
  6607  000460  C123  F162         	movff	?_scale,printf@tmpval
  6608  000464  C124  F163         	movff	?_scale+1,printf@tmpval+1
  6609  000468  C125  F164         	movff	?_scale+2,printf@tmpval+2
  6610                           
  6611                           ;doprnt.c: 847: tmpval.integ *= fval;
  6612  00046C  C162  F114         	movff	printf@tmpval,___ftmul@f1
  6613  000470  C163  F115         	movff	printf@tmpval+1,___ftmul@f1+1
  6614  000474  C164  F116         	movff	printf@tmpval+2,___ftmul@f1+2
  6615  000478  C16E  F117         	movff	printf@fval,___ftmul@f2
  6616  00047C  C16F  F118         	movff	printf@fval+1,___ftmul@f2+1
  6617  000480  C170  F119         	movff	printf@fval+2,___ftmul@f2+2
  6618  000484  EC1F  F01D         	call	___ftmul	;wreg free
  6619  000488  C114  F162         	movff	?___ftmul,printf@tmpval
  6620  00048C  C115  F163         	movff	?___ftmul+1,printf@tmpval+1
  6621  000490  C116  F164         	movff	?___ftmul+2,printf@tmpval+2
  6622                           
  6623                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6624  000494  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6625  000498  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6626  00049C  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6627  0004A0  0E00               	movlw	0
  6628  0004A2  0101               	movlb	1	; () banked
  6629  0004A4  6F03               	movwf	___ftge@ff2& (0+255),b
  6630  0004A6  0E80               	movlw	128
  6631  0004A8  0101               	movlb	1	; () banked
  6632  0004AA  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6633  0004AC  0E3F               	movlw	63
  6634  0004AE  0101               	movlb	1	; () banked
  6635  0004B0  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6636  0004B2  EC02  F02B         	call	___ftge	;wreg free
  6637  0004B6  0101               	movlb	1	; () banked
  6638  0004B8  B0D8               	btfsc	status,0,c
  6639  0004BA  D005               	goto	l10456
  6640                           
  6641                           ; BSR set to: 1
  6642                           ;doprnt.c: 849: exp--;
  6643  0004BC  0101               	movlb	1	; () banked
  6644  0004BE  076A               	decf	printf@exp& (0+255),f,b
  6645  0004C0  A0D8               	btfss	status,0,c
  6646  0004C2  076B               	decf	(printf@exp+1)& (0+255),f,b
  6647  0004C4  D017               	goto	l10460
  6648  0004C6                     l10456:
  6649                           
  6650                           ; BSR set to: 1
  6651                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6652  0004C6  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6653  0004CA  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6654  0004CE  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6655  0004D2  0E00               	movlw	0
  6656  0004D4  0101               	movlb	1	; () banked
  6657  0004D6  6F03               	movwf	___ftge@ff2& (0+255),b
  6658  0004D8  0E20               	movlw	32
  6659  0004DA  0101               	movlb	1	; () banked
  6660  0004DC  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6661  0004DE  0E41               	movlw	65
  6662  0004E0  0101               	movlb	1	; () banked
  6663  0004E2  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6664  0004E4  EC02  F02B         	call	___ftge	;wreg free
  6665  0004E8  0101               	movlb	1	; () banked
  6666  0004EA  A0D8               	btfss	status,0,c
  6667  0004EC  D003               	goto	l10460
  6668                           
  6669                           ; BSR set to: 1
  6670                           ;doprnt.c: 851: exp++;
  6671  0004EE  0101               	movlb	1	; () banked
  6672  0004F0  4B6A               	infsnz	printf@exp& (0+255),f,b
  6673  0004F2  2B6B               	incf	(printf@exp+1)& (0+255),f,b
  6674  0004F4                     l10460:
  6675                           
  6676                           ; BSR set to: 1
  6677                           ;doprnt.c: 852: }
  6678                           ;doprnt.c: 1112: if(prec <= 12)
  6679  0004F4  0101               	movlb	1	; () banked
  6680  0004F6  BF72               	btfsc	(printf@prec+1)& (0+255),7,b
  6681  0004F8  D008               	goto	l10462
  6682  0004FA  0101               	movlb	1	; () banked
  6683  0004FC  5172               	movf	(printf@prec+1)& (0+255),w,b
  6684  0004FE  E11D               	bnz	l10464
  6685  000500  0E0D               	movlw	13
  6686  000502  0101               	movlb	1	; () banked
  6687  000504  5D71               	subwf	printf@prec& (0+255),w,b
  6688  000506  B0D8               	btfsc	status,0,c
  6689  000508  D018               	goto	l10464
  6690  00050A                     l10462:
  6691                           
  6692                           ; BSR set to: 1
  6693                           ;doprnt.c: 1113: fval += fround(prec);
  6694  00050A  C16E  F12D         	movff	printf@fval,___ftadd@f1
  6695  00050E  C16F  F12E         	movff	printf@fval+1,___ftadd@f1+1
  6696  000512  C170  F12F         	movff	printf@fval+2,___ftadd@f1+2
  6697  000516  0101               	movlb	1	; () banked
  6698  000518  5171               	movf	printf@prec& (0+255),w,b
  6699  00051A  EC96  F012         	call	_fround
  6700  00051E  C123  F130         	movff	?_fround,___ftadd@f2
  6701  000522  C124  F131         	movff	?_fround+1,___ftadd@f2+1
  6702  000526  C125  F132         	movff	?_fround+2,___ftadd@f2+2
  6703  00052A  ECEC  F013         	call	___ftadd	;wreg free
  6704  00052E  C12D  F16E         	movff	?___ftadd,printf@fval
  6705  000532  C12E  F16F         	movff	?___ftadd+1,printf@fval+1
  6706  000536  C12F  F170         	movff	?___ftadd+2,printf@fval+2
  6707  00053A                     l10464:
  6708                           
  6709                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6710  00053A  0101               	movlb	1	; () banked
  6711  00053C  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  6712  00053E  D008               	goto	l10466
  6713  000540  0101               	movlb	1	; () banked
  6714  000542  516B               	movf	(printf@exp+1)& (0+255),w,b
  6715  000544  E12A               	bnz	l10472
  6716  000546  0E0A               	movlw	10
  6717  000548  0101               	movlb	1	; () banked
  6718  00054A  5D6A               	subwf	printf@exp& (0+255),w,b
  6719  00054C  B0D8               	btfsc	status,0,c
  6720  00054E  D025               	goto	l10472
  6721  000550                     l10466:
  6722                           
  6723                           ; BSR set to: 1
  6724  000550  0101               	movlb	1	; () banked
  6725  000552  516E               	movf	printf@fval& (0+255),w,b
  6726  000554  0101               	movlb	1	; () banked
  6727  000556  116F               	iorwf	(printf@fval+1)& (0+255),w,b
  6728  000558  0101               	movlb	1	; () banked
  6729  00055A  1170               	iorwf	(printf@fval+2)& (0+255),w,b
  6730  00055C  B4D8               	btfsc	status,2,c
  6731  00055E  D063               	goto	l10486
  6732                           
  6733                           ; BSR set to: 1
  6734  000560  C16E  F12A         	movff	printf@fval,___fttol@f1
  6735  000564  C16F  F12B         	movff	printf@fval+1,___fttol@f1+1
  6736  000568  C170  F12C         	movff	printf@fval+2,___fttol@f1+2
  6737  00056C  ECC9  F01F         	call	___fttol	;wreg free
  6738  000570  0101               	movlb	1	; () banked
  6739  000572  512A               	movf	?___fttol& (0+255),w,b
  6740  000574  0101               	movlb	1	; () banked
  6741  000576  112B               	iorwf	(?___fttol+1)& (0+255),w,b
  6742  000578  0101               	movlb	1	; () banked
  6743  00057A  112C               	iorwf	(?___fttol+2)& (0+255),w,b
  6744  00057C  0101               	movlb	1	; () banked
  6745  00057E  112D               	iorwf	(?___fttol+3)& (0+255),w,b
  6746  000580  A4D8               	btfss	status,2,c
  6747  000582  D051               	goto	l10486
  6748                           
  6749                           ; BSR set to: 1
  6750  000584  0101               	movlb	1	; () banked
  6751  000586  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  6752  000588  D04E               	goto	l10486
  6753  00058A  0101               	movlb	1	; () banked
  6754  00058C  516B               	movf	(printf@exp+1)& (0+255),w,b
  6755  00058E  E105               	bnz	l10472
  6756  000590  0E02               	movlw	2
  6757  000592  0101               	movlb	1	; () banked
  6758  000594  5D6A               	subwf	printf@exp& (0+255),w,b
  6759  000596  A0D8               	btfss	status,0,c
  6760  000598  D046               	goto	l10486
  6761  00059A                     l10472:
  6762                           
  6763                           ; BSR set to: 1
  6764                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6765  00059A  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6766  00059E  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6767  0005A2  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6768  0005A6  0E70               	movlw	112
  6769  0005A8  0101               	movlb	1	; () banked
  6770  0005AA  6F03               	movwf	___ftge@ff2& (0+255),b
  6771  0005AC  0E89               	movlw	137
  6772  0005AE  0101               	movlb	1	; () banked
  6773  0005B0  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6774  0005B2  0E40               	movlw	64
  6775  0005B4  0101               	movlb	1	; () banked
  6776  0005B6  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6777  0005B8  EC02  F02B         	call	___ftge	;wreg free
  6778  0005BC  0101               	movlb	1	; () banked
  6779  0005BE  B0D8               	btfsc	status,0,c
  6780  0005C0  D003               	goto	l10476
  6781                           
  6782                           ; BSR set to: 1
  6783                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6784  0005C2  0101               	movlb	1	; () banked
  6785  0005C4  0EF7               	movlw	247
  6786  0005C6  D002               	goto	L1
  6787  0005C8                     l10476:
  6788                           
  6789                           ; BSR set to: 1
  6790                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6791  0005C8  0101               	movlb	1	; () banked
  6792  0005CA  0EF8               	movlw	248
  6793  0005CC                     L1:
  6794  0005CC  276A               	addwf	printf@exp& (0+255),f,b
  6795  0005CE  0EFF               	movlw	255
  6796  0005D0  236B               	addwfc	(printf@exp+1)& (0+255),f,b
  6797                           
  6798                           ; BSR set to: 1
  6799                           ;doprnt.c: 1124: }
  6800                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6801                           
  6802                           ; BSR set to: 1
  6803  0005D2  0101               	movlb	1	; () banked
  6804  0005D4  516A               	movf	printf@exp& (0+255),w,b
  6805  0005D6  EC7A  F006         	call	_scale
  6806  0005DA  C123  F162         	movff	?_scale,printf@tmpval
  6807  0005DE  C124  F163         	movff	?_scale+1,printf@tmpval+1
  6808  0005E2  C125  F164         	movff	?_scale+2,printf@tmpval+2
  6809                           
  6810                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6811  0005E6  C16E  F100         	movff	printf@fval,__tdiv_to_l_@f1
  6812  0005EA  C16F  F101         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  6813  0005EE  C170  F102         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  6814  0005F2  C162  F103         	movff	printf@tmpval,__tdiv_to_l_@f2
  6815  0005F6  C163  F104         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  6816  0005FA  C164  F105         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  6817  0005FE  EC8C  F01B         	call	__tdiv_to_l_	;wreg free
  6818  000602  C100  F166         	movff	?__tdiv_to_l_,printf@val
  6819  000606  C101  F167         	movff	?__tdiv_to_l_+1,printf@val+1
  6820  00060A  C102  F168         	movff	?__tdiv_to_l_+2,printf@val+2
  6821  00060E  C103  F169         	movff	?__tdiv_to_l_+3,printf@val+3
  6822                           
  6823                           ;doprnt.c: 1129: fval = 0.0;
  6824  000612  0E00               	movlw	0
  6825  000614  0101               	movlb	1	; () banked
  6826  000616  6F6E               	movwf	printf@fval& (0+255),b
  6827  000618  0E00               	movlw	0
  6828  00061A  0101               	movlb	1	; () banked
  6829  00061C  6F6F               	movwf	(printf@fval+1)& (0+255),b
  6830  00061E  0E00               	movlw	0
  6831  000620  0101               	movlb	1	; () banked
  6832  000622  6F70               	movwf	(printf@fval+2)& (0+255),b
  6833                           
  6834                           ;doprnt.c: 1130: } else {
  6835  000624  D033               	goto	l10490
  6836  000626                     l10486:
  6837                           
  6838                           ; BSR set to: 1
  6839                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6840  000626  C16E  F12A         	movff	printf@fval,___fttol@f1
  6841  00062A  C16F  F12B         	movff	printf@fval+1,___fttol@f1+1
  6842  00062E  C170  F12C         	movff	printf@fval+2,___fttol@f1+2
  6843  000632  ECC9  F01F         	call	___fttol	;wreg free
  6844  000636  C12A  F166         	movff	?___fttol,printf@val
  6845  00063A  C12B  F167         	movff	?___fttol+1,printf@val+1
  6846  00063E  C12C  F168         	movff	?___fttol+2,printf@val+2
  6847  000642  C12D  F169         	movff	?___fttol+3,printf@val+3
  6848                           
  6849                           ;doprnt.c: 1132: fval -= (double)val;
  6850  000646  C16E  F139         	movff	printf@fval,___ftsub@f1
  6851  00064A  C16F  F13A         	movff	printf@fval+1,___ftsub@f1+1
  6852  00064E  C170  F13B         	movff	printf@fval+2,___ftsub@f1+2
  6853  000652  C166  F108         	movff	printf@val,___lltoft@c
  6854  000656  C167  F109         	movff	printf@val+1,___lltoft@c+1
  6855  00065A  C168  F10A         	movff	printf@val+2,___lltoft@c+2
  6856  00065E  C169  F10B         	movff	printf@val+3,___lltoft@c+3
  6857  000662  ECD8  F032         	call	___lltoft	;wreg free
  6858  000666  C108  F13C         	movff	?___lltoft,___ftsub@f2
  6859  00066A  C109  F13D         	movff	?___lltoft+1,___ftsub@f2+1
  6860  00066E  C10A  F13E         	movff	?___lltoft+2,___ftsub@f2+2
  6861  000672  EC80  F036         	call	___ftsub	;wreg free
  6862  000676  C139  F16E         	movff	?___ftsub,printf@fval
  6863  00067A  C13A  F16F         	movff	?___ftsub+1,printf@fval+1
  6864  00067E  C13B  F170         	movff	?___ftsub+2,printf@fval+2
  6865                           
  6866                           ;doprnt.c: 1133: exp = 0;
  6867  000682  0E00               	movlw	0
  6868  000684  0101               	movlb	1	; () banked
  6869  000686  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6870  000688  0E00               	movlw	0
  6871  00068A  6F6A               	movwf	printf@exp& (0+255),b
  6872  00068C                     l10490:
  6873                           
  6874                           ; BSR set to: 1
  6875                           ;doprnt.c: 1134: }
  6876                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6877  00068C  0E01               	movlw	1
  6878  00068E  0101               	movlb	1	; () banked
  6879  000690  6F73               	movwf	printf@c& (0+255),b
  6880  000692                     l10492:
  6881                           
  6882                           ; BSR set to: 1
  6883  000692  0E0A               	movlw	10
  6884  000694  0101               	movlb	1	; () banked
  6885  000696  1973               	xorwf	printf@c& (0+255),w,b
  6886  000698  B4D8               	btfsc	status,2,c
  6887  00069A  D01E               	goto	l10504
  6888                           
  6889                           ; BSR set to: 1
  6890                           ;doprnt.c: 1137: if(val < dpowers[c])
  6891                           
  6892                           ; BSR set to: 1
  6893                           
  6894                           ; BSR set to: 1
  6895  00069C  0101               	movlb	1	; () banked
  6896  00069E  5173               	movf	printf@c& (0+255),w,b
  6897  0006A0  0D04               	mullw	4
  6898  0006A2  0ED5               	movlw	low _dpowers
  6899  0006A4  24F3               	addwf	prodl,w,c
  6900  0006A6  6EF6               	movwf	tblptrl,c
  6901  0006A8  0E7C               	movlw	high _dpowers
  6902  0006AA  20F4               	addwfc	prodh,w,c
  6903  0006AC  6EF7               	movwf	tblptrh,c
  6904  0006AE                     	if	0	;There are less than 3 active tblptr bytes
  6905  0006AE                     	endif
  6906  0006AE  0009               	tblrd		*+
  6907  0006B0  50F5               	movf	tablat,w,c
  6908  0006B2  0101               	movlb	1	; () banked
  6909  0006B4  5D66               	subwf	printf@val& (0+255),w,b
  6910  0006B6  0009               	tblrd		*+
  6911  0006B8  50F5               	movf	tablat,w,c
  6912  0006BA  0101               	movlb	1	; () banked
  6913  0006BC  5967               	subwfb	(printf@val+1)& (0+255),w,b
  6914  0006BE  0009               	tblrd		*+
  6915  0006C0  50F5               	movf	tablat,w,c
  6916  0006C2  0101               	movlb	1	; () banked
  6917  0006C4  5968               	subwfb	(printf@val+2)& (0+255),w,b
  6918  0006C6  0009               	tblrd		*+
  6919  0006C8  50F5               	movf	tablat,w,c
  6920  0006CA  0101               	movlb	1	; () banked
  6921  0006CC  5969               	subwfb	(printf@val+3)& (0+255),w,b
  6922  0006CE  A0D8               	btfss	status,0,c
  6923  0006D0  D003               	goto	l10504
  6924                           
  6925                           ; BSR set to: 1
  6926                           
  6927                           ; BSR set to: 1
  6928                           
  6929                           ; BSR set to: 1
  6930                           ;doprnt.c: 1138: break;
  6931  0006D2  0101               	movlb	1	; () banked
  6932  0006D4  2B73               	incf	printf@c& (0+255),f,b
  6933  0006D6  D7DD               	goto	l10492
  6934  0006D8                     l10504:
  6935                           
  6936                           ; BSR set to: 1
  6937                           ;doprnt.c: 1142: width -= prec + c + exp;
  6938  0006D8  C173  F151         	movff	printf@c,??_printf
  6939  0006DC  0101               	movlb	1	; () banked
  6940  0006DE  6B52               	clrf	(??_printf+1)& (0+255),b
  6941  0006E0  BF51               	btfsc	??_printf& (0+255),7,b
  6942  0006E2  0752               	decf	(??_printf+1)& (0+255),f,b
  6943  0006E4  0101               	movlb	1	; () banked
  6944  0006E6  5171               	movf	printf@prec& (0+255),w,b
  6945  0006E8  0101               	movlb	1	; () banked
  6946  0006EA  2751               	addwf	??_printf& (0+255),f,b
  6947  0006EC  0101               	movlb	1	; () banked
  6948  0006EE  5172               	movf	(printf@prec+1)& (0+255),w,b
  6949  0006F0  0101               	movlb	1	; () banked
  6950  0006F2  2352               	addwfc	(??_printf+1)& (0+255),f,b
  6951  0006F4  0101               	movlb	1	; () banked
  6952  0006F6  516A               	movf	printf@exp& (0+255),w,b
  6953  0006F8  0101               	movlb	1	; () banked
  6954  0006FA  2751               	addwf	??_printf& (0+255),f,b
  6955  0006FC  0101               	movlb	1	; () banked
  6956  0006FE  516B               	movf	(printf@exp+1)& (0+255),w,b
  6957  000700  0101               	movlb	1	; () banked
  6958  000702  2352               	addwfc	(??_printf+1)& (0+255),f,b
  6959  000704  0101               	movlb	1	; () banked
  6960  000706  5151               	movf	??_printf& (0+255),w,b
  6961  000708  0101               	movlb	1	; () banked
  6962  00070A  5F6C               	subwf	printf@width& (0+255),f,b
  6963  00070C  0101               	movlb	1	; () banked
  6964  00070E  5152               	movf	(??_printf+1)& (0+255),w,b
  6965  000710  0101               	movlb	1	; () banked
  6966  000712  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  6967                           
  6968                           ;doprnt.c: 1143: if(
  6969                           ;doprnt.c: 1147: prec)
  6970  000714  0101               	movlb	1	; () banked
  6971  000716  5171               	movf	printf@prec& (0+255),w,b
  6972  000718  0101               	movlb	1	; () banked
  6973  00071A  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  6974  00071C  B4D8               	btfsc	status,2,c
  6975  00071E  D004               	goto	l10508
  6976                           
  6977                           ; BSR set to: 1
  6978                           ;doprnt.c: 1148: width--;
  6979  000720  0101               	movlb	1	; () banked
  6980  000722  076C               	decf	printf@width& (0+255),f,b
  6981  000724  A0D8               	btfss	status,0,c
  6982  000726  076D               	decf	(printf@width+1)& (0+255),f,b
  6983  000728                     l10508:
  6984                           
  6985                           ; BSR set to: 1
  6986                           ;doprnt.c: 1149: if(flag & 0x03)
  6987  000728  0E03               	movlw	3
  6988  00072A  0101               	movlb	1	; () banked
  6989  00072C  1560               	andwf	printf@flag& (0+255),w,b
  6990  00072E  0101               	movlb	1	; () banked
  6991  000730  6F51               	movwf	??_printf& (0+255),b
  6992  000732  0E00               	movlw	0
  6993  000734  0101               	movlb	1	; () banked
  6994  000736  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6995  000738  0101               	movlb	1	; () banked
  6996  00073A  6F52               	movwf	(??_printf+1)& (0+255),b
  6997  00073C  0101               	movlb	1	; () banked
  6998  00073E  5151               	movf	??_printf& (0+255),w,b
  6999  000740  0101               	movlb	1	; () banked
  7000  000742  1152               	iorwf	(??_printf+1)& (0+255),w,b
  7001  000744  B4D8               	btfsc	status,2,c
  7002  000746  D008               	goto	l10516
  7003  000748  D003               	goto	l10514
  7004  00074A                     l10512:
  7005                           
  7006                           ; BSR set to: 1
  7007                           ;doprnt.c: 1181: (putch(' ') );
  7008  00074A  0E20               	movlw	32
  7009  00074C  EC79  F039         	call	_putch
  7010  000750                     l10514:
  7011                           
  7012                           ;doprnt.c: 1182: width--;
  7013  000750  0101               	movlb	1	; () banked
  7014  000752  076C               	decf	printf@width& (0+255),f,b
  7015  000754  A0D8               	btfss	status,0,c
  7016  000756  076D               	decf	(printf@width+1)& (0+255),f,b
  7017  000758                     l10516:
  7018                           
  7019                           ; BSR set to: 1
  7020  000758  0101               	movlb	1	; () banked
  7021  00075A  BF6D               	btfsc	(printf@width+1)& (0+255),7,b
  7022  00075C  D007               	goto	l10518
  7023  00075E  0101               	movlb	1	; () banked
  7024  000760  516D               	movf	(printf@width+1)& (0+255),w,b
  7025  000762  E1F3               	bnz	l10512
  7026  000764  0101               	movlb	1	; () banked
  7027  000766  056C               	decf	printf@width& (0+255),w,b
  7028  000768  B0D8               	btfsc	status,0,c
  7029  00076A  D7EF               	goto	l10512
  7030  00076C                     l10518:
  7031                           
  7032                           ; BSR set to: 1
  7033                           ;doprnt.c: 1183: }
  7034                           ;doprnt.c: 1188: if(flag & 0x03)
  7035  00076C  0E03               	movlw	3
  7036  00076E  0101               	movlb	1	; () banked
  7037  000770  1560               	andwf	printf@flag& (0+255),w,b
  7038  000772  0101               	movlb	1	; () banked
  7039  000774  6F51               	movwf	??_printf& (0+255),b
  7040  000776  0E00               	movlw	0
  7041  000778  0101               	movlb	1	; () banked
  7042  00077A  1561               	andwf	(printf@flag+1)& (0+255),w,b
  7043  00077C  0101               	movlb	1	; () banked
  7044  00077E  6F52               	movwf	(??_printf+1)& (0+255),b
  7045  000780  0101               	movlb	1	; () banked
  7046  000782  5151               	movf	??_printf& (0+255),w,b
  7047  000784  0101               	movlb	1	; () banked
  7048  000786  1152               	iorwf	(??_printf+1)& (0+255),w,b
  7049  000788  B4D8               	btfsc	status,2,c
  7050  00078A  D04B               	goto	l10528
  7051                           
  7052                           ; BSR set to: 1
  7053                           ;doprnt.c: 1190: (putch('-') );
  7054  00078C  0E2D               	movlw	45
  7055  00078E  EC79  F039         	call	_putch
  7056                           
  7057                           ;doprnt.c: 1195: }
  7058                           ;doprnt.c: 1196: while(c--) {
  7059  000792  D047               	goto	l10528
  7060  000794                     l10522:
  7061                           
  7062                           ;doprnt.c: 1200: {
  7063                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  7064  000794  C166  F100         	movff	printf@val,___lldiv@dividend
  7065  000798  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  7066  00079C  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  7067  0007A0  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  7068  0007A4  0101               	movlb	1	; () banked
  7069  0007A6  5173               	movf	printf@c& (0+255),w,b
  7070  0007A8  0D04               	mullw	4
  7071  0007AA  0ED5               	movlw	low _dpowers
  7072  0007AC  24F3               	addwf	prodl,w,c
  7073  0007AE  6EF6               	movwf	tblptrl,c
  7074  0007B0  0E7C               	movlw	high _dpowers
  7075  0007B2  20F4               	addwfc	prodh,w,c
  7076  0007B4  6EF7               	movwf	tblptrh,c
  7077  0007B6                     	if	0	;There are less than 3 active tblptr bytes
  7078  0007B6                     	endif
  7079  0007B6  0009               	tblrd		*+
  7080  0007B8  CFF5 F104          	movff	tablat,___lldiv@divisor
  7081  0007BC  0009               	tblrd		*+
  7082  0007BE  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  7083  0007C2  0009               	tblrd		*+
  7084  0007C4  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  7085  0007C8  000A               	tblrd		*-
  7086  0007CA  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  7087  0007CE  EC87  F02C         	call	___lldiv	;wreg free
  7088  0007D2  C100  F162         	movff	?___lldiv,printf@tmpval
  7089  0007D6  C101  F163         	movff	?___lldiv+1,printf@tmpval+1
  7090  0007DA  C102  F164         	movff	?___lldiv+2,printf@tmpval+2
  7091  0007DE  C103  F165         	movff	?___lldiv+3,printf@tmpval+3
  7092                           
  7093                           ;doprnt.c: 1202: tmpval.vd %= 10;
  7094  0007E2  C162  F10D         	movff	printf@tmpval,___llmod@dividend
  7095  0007E6  C163  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  7096  0007EA  C164  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  7097  0007EE  C165  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  7098  0007F2  0E0A               	movlw	10
  7099  0007F4  0101               	movlb	1	; () banked
  7100  0007F6  6F11               	movwf	___llmod@divisor& (0+255),b
  7101  0007F8  0E00               	movlw	0
  7102  0007FA  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  7103  0007FC  0E00               	movlw	0
  7104  0007FE  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  7105  000800  0E00               	movlw	0
  7106  000802  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  7107  000804  EC37  F02F         	call	___llmod	;wreg free
  7108  000808  C10D  F162         	movff	?___llmod,printf@tmpval
  7109  00080C  C10E  F163         	movff	?___llmod+1,printf@tmpval+1
  7110  000810  C10F  F164         	movff	?___llmod+2,printf@tmpval+2
  7111  000814  C110  F165         	movff	?___llmod+3,printf@tmpval+3
  7112                           
  7113                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  7114  000818  0101               	movlb	1	; () banked
  7115  00081A  5162               	movf	printf@tmpval& (0+255),w,b
  7116  00081C  0F30               	addlw	48
  7117  00081E  EC79  F039         	call	_putch
  7118  000822                     l10528:
  7119  000822  0101               	movlb	1	; () banked
  7120  000824  0773               	decf	printf@c& (0+255),f,b
  7121  000826  0101               	movlb	1	; () banked
  7122  000828  2973               	incf	printf@c& (0+255),w,b
  7123  00082A  B4D8               	btfsc	status,2,c
  7124  00082C  D008               	goto	l10534
  7125  00082E  D7B2               	goto	l10522
  7126  000830                     l10530:
  7127                           
  7128                           ; BSR set to: 1
  7129                           ;doprnt.c: 1208: (putch('0') );
  7130  000830  0E30               	movlw	48
  7131  000832  EC79  F039         	call	_putch
  7132                           
  7133                           ;doprnt.c: 1209: exp--;
  7134  000836  0101               	movlb	1	; () banked
  7135  000838  076A               	decf	printf@exp& (0+255),f,b
  7136  00083A  A0D8               	btfss	status,0,c
  7137  00083C  076B               	decf	(printf@exp+1)& (0+255),f,b
  7138  00083E                     l10534:
  7139                           
  7140                           ; BSR set to: 1
  7141  00083E  0101               	movlb	1	; () banked
  7142  000840  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  7143  000842  D007               	goto	l10536
  7144  000844  0101               	movlb	1	; () banked
  7145  000846  516B               	movf	(printf@exp+1)& (0+255),w,b
  7146  000848  E1F3               	bnz	l10530
  7147  00084A  0101               	movlb	1	; () banked
  7148  00084C  056A               	decf	printf@exp& (0+255),w,b
  7149  00084E  B0D8               	btfsc	status,0,c
  7150  000850  D7EF               	goto	l10530
  7151  000852                     l10536:
  7152                           
  7153                           ; BSR set to: 1
  7154                           ;doprnt.c: 1210: }
  7155                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7156  000852  0101               	movlb	1	; () banked
  7157  000854  BF72               	btfsc	(printf@prec+1)& (0+255),7,b
  7158  000856  D00C               	goto	l1036
  7159  000858  0101               	movlb	1	; () banked
  7160  00085A  5172               	movf	(printf@prec+1)& (0+255),w,b
  7161  00085C  E105               	bnz	u15450
  7162  00085E  0E09               	movlw	9
  7163  000860  0101               	movlb	1	; () banked
  7164  000862  5D71               	subwf	printf@prec& (0+255),w,b
  7165  000864  A0D8               	btfss	status,0,c
  7166  000866  D004               	goto	l1036
  7167  000868                     u15450:
  7168                           
  7169                           ; BSR set to: 1
  7170                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7171  000868  0E08               	movlw	8
  7172  00086A  0101               	movlb	1	; () banked
  7173  00086C  6F73               	movwf	printf@c& (0+255),b
  7174  00086E  D002               	goto	l10540
  7175  000870                     l1036:
  7176                           
  7177                           ; BSR set to: 1
  7178                           ;doprnt.c: 1213: else
  7179                           ;doprnt.c: 1214: c = prec;
  7180  000870  C171  F173         	movff	printf@prec,printf@c
  7181  000874                     l10540:
  7182                           
  7183                           ; BSR set to: 1
  7184                           ;doprnt.c: 1215: prec -= c;
  7185  000874  0101               	movlb	1	; () banked
  7186  000876  5173               	movf	printf@c& (0+255),w,b
  7187  000878  0101               	movlb	1	; () banked
  7188  00087A  5F71               	subwf	printf@prec& (0+255),f,b
  7189  00087C  0E00               	movlw	0
  7190  00087E  0101               	movlb	1	; () banked
  7191  000880  BF73               	btfsc	printf@c& (0+255),7,b
  7192  000882  0EFF               	movlw	255
  7193  000884  0101               	movlb	1	; () banked
  7194  000886  5B72               	subwfb	(printf@prec+1)& (0+255),f,b
  7195                           
  7196                           ; BSR set to: 1
  7197                           ;doprnt.c: 1219: if(c)
  7198  000888  0101               	movlb	1	; () banked
  7199  00088A  5173               	movf	printf@c& (0+255),w,b
  7200  00088C  0101               	movlb	1	; () banked
  7201  00088E  B4D8               	btfsc	status,2,c
  7202  000890  D003               	goto	l10546
  7203                           
  7204                           ; BSR set to: 1
  7205                           ;doprnt.c: 1221: (putch('.') );
  7206  000892  0E2E               	movlw	46
  7207  000894  EC79  F039         	call	_putch
  7208  000898                     l10546:
  7209                           
  7210                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7211  000898  0101               	movlb	1	; () banked
  7212  00089A  5173               	movf	printf@c& (0+255),w,b
  7213  00089C  EC7A  F006         	call	_scale
  7214  0008A0  C123  F157         	movff	?_scale,_printf$2830
  7215  0008A4  C124  F158         	movff	?_scale+1,_printf$2830+1
  7216  0008A8  C125  F159         	movff	?_scale+2,_printf$2830+2
  7217                           
  7218                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7219  0008AC  C16E  F117         	movff	printf@fval,___ftmul@f2
  7220  0008B0  C16F  F118         	movff	printf@fval+1,___ftmul@f2+1
  7221  0008B4  C170  F119         	movff	printf@fval+2,___ftmul@f2+2
  7222  0008B8  C157  F114         	movff	_printf$2830,___ftmul@f1
  7223  0008BC  C158  F115         	movff	_printf$2830+1,___ftmul@f1+1
  7224  0008C0  C159  F116         	movff	_printf$2830+2,___ftmul@f1+2
  7225  0008C4  EC1F  F01D         	call	___ftmul	;wreg free
  7226  0008C8  C114  F12A         	movff	?___ftmul,___fttol@f1
  7227  0008CC  C115  F12B         	movff	?___ftmul+1,___fttol@f1+1
  7228  0008D0  C116  F12C         	movff	?___ftmul+2,___fttol@f1+2
  7229  0008D4  ECC9  F01F         	call	___fttol	;wreg free
  7230  0008D8  C12A  F166         	movff	?___fttol,printf@val
  7231  0008DC  C12B  F167         	movff	?___fttol+1,printf@val+1
  7232  0008E0  C12C  F168         	movff	?___fttol+2,printf@val+2
  7233  0008E4  C12D  F169         	movff	?___fttol+3,printf@val+3
  7234                           
  7235                           ;doprnt.c: 1228: while(c--) {
  7236  0008E8  D06E               	goto	l10556
  7237  0008EA                     l10550:
  7238                           
  7239                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7240  0008EA  C166  F100         	movff	printf@val,___lldiv@dividend
  7241  0008EE  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  7242  0008F2  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  7243  0008F6  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  7244  0008FA  0101               	movlb	1	; () banked
  7245  0008FC  5173               	movf	printf@c& (0+255),w,b
  7246  0008FE  0D04               	mullw	4
  7247  000900  0ED5               	movlw	low _dpowers
  7248  000902  24F3               	addwf	prodl,w,c
  7249  000904  6EF6               	movwf	tblptrl,c
  7250  000906  0E7C               	movlw	high _dpowers
  7251  000908  20F4               	addwfc	prodh,w,c
  7252  00090A  6EF7               	movwf	tblptrh,c
  7253  00090C                     	if	0	;There are less than 3 active tblptr bytes
  7254  00090C                     	endif
  7255  00090C  0009               	tblrd		*+
  7256  00090E  CFF5 F104          	movff	tablat,___lldiv@divisor
  7257  000912  0009               	tblrd		*+
  7258  000914  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  7259  000918  0009               	tblrd		*+
  7260  00091A  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  7261  00091E  000A               	tblrd		*-
  7262  000920  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  7263  000924  EC87  F02C         	call	___lldiv	;wreg free
  7264  000928  C100  F162         	movff	?___lldiv,printf@tmpval
  7265  00092C  C101  F163         	movff	?___lldiv+1,printf@tmpval+1
  7266  000930  C102  F164         	movff	?___lldiv+2,printf@tmpval+2
  7267  000934  C103  F165         	movff	?___lldiv+3,printf@tmpval+3
  7268                           
  7269                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7270  000938  C162  F10D         	movff	printf@tmpval,___llmod@dividend
  7271  00093C  C163  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  7272  000940  C164  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  7273  000944  C165  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  7274  000948  0E0A               	movlw	10
  7275  00094A  0101               	movlb	1	; () banked
  7276  00094C  6F11               	movwf	___llmod@divisor& (0+255),b
  7277  00094E  0E00               	movlw	0
  7278  000950  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  7279  000952  0E00               	movlw	0
  7280  000954  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  7281  000956  0E00               	movlw	0
  7282  000958  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  7283  00095A  EC37  F02F         	call	___llmod	;wreg free
  7284  00095E  C10D  F162         	movff	?___llmod,printf@tmpval
  7285  000962  C10E  F163         	movff	?___llmod+1,printf@tmpval+1
  7286  000966  C10F  F164         	movff	?___llmod+2,printf@tmpval+2
  7287  00096A  C110  F165         	movff	?___llmod+3,printf@tmpval+3
  7288                           
  7289                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  7290  00096E  0101               	movlb	1	; () banked
  7291  000970  5162               	movf	printf@tmpval& (0+255),w,b
  7292  000972  0F30               	addlw	48
  7293  000974  EC79  F039         	call	_putch
  7294                           
  7295                           ;doprnt.c: 1232: val %= dpowers[c];
  7296  000978  C166  F10D         	movff	printf@val,___llmod@dividend
  7297  00097C  C167  F10E         	movff	printf@val+1,___llmod@dividend+1
  7298  000980  C168  F10F         	movff	printf@val+2,___llmod@dividend+2
  7299  000984  C169  F110         	movff	printf@val+3,___llmod@dividend+3
  7300  000988  0101               	movlb	1	; () banked
  7301  00098A  5173               	movf	printf@c& (0+255),w,b
  7302  00098C  0D04               	mullw	4
  7303  00098E  0ED5               	movlw	low _dpowers
  7304  000990  24F3               	addwf	prodl,w,c
  7305  000992  6EF6               	movwf	tblptrl,c
  7306  000994  0E7C               	movlw	high _dpowers
  7307  000996  20F4               	addwfc	prodh,w,c
  7308  000998  6EF7               	movwf	tblptrh,c
  7309  00099A                     	if	0	;There are less than 3 active tblptr bytes
  7310  00099A                     	endif
  7311  00099A  0009               	tblrd		*+
  7312  00099C  CFF5 F111          	movff	tablat,___llmod@divisor
  7313  0009A0  0009               	tblrd		*+
  7314  0009A2  CFF5 F112          	movff	tablat,___llmod@divisor+1
  7315  0009A6  0009               	tblrd		*+
  7316  0009A8  CFF5 F113          	movff	tablat,___llmod@divisor+2
  7317  0009AC  000A               	tblrd		*-
  7318  0009AE  CFF5 F114          	movff	tablat,___llmod@divisor+3
  7319  0009B2  EC37  F02F         	call	___llmod	;wreg free
  7320  0009B6  C10D  F166         	movff	?___llmod,printf@val
  7321  0009BA  C10E  F167         	movff	?___llmod+1,printf@val+1
  7322  0009BE  C10F  F168         	movff	?___llmod+2,printf@val+2
  7323  0009C2  C110  F169         	movff	?___llmod+3,printf@val+3
  7324  0009C6                     l10556:
  7325  0009C6  0101               	movlb	1	; () banked
  7326  0009C8  0773               	decf	printf@c& (0+255),f,b
  7327  0009CA  0101               	movlb	1	; () banked
  7328  0009CC  2973               	incf	printf@c& (0+255),w,b
  7329  0009CE  B4D8               	btfsc	status,2,c
  7330  0009D0  D008               	goto	l10562
  7331  0009D2  D78B               	goto	l10550
  7332  0009D4                     l10558:
  7333                           
  7334                           ; BSR set to: 1
  7335                           ;doprnt.c: 1236: (putch('0') );
  7336  0009D4  0E30               	movlw	48
  7337  0009D6  EC79  F039         	call	_putch
  7338                           
  7339                           ;doprnt.c: 1237: prec--;
  7340  0009DA  0101               	movlb	1	; () banked
  7341  0009DC  0771               	decf	printf@prec& (0+255),f,b
  7342  0009DE  A0D8               	btfss	status,0,c
  7343  0009E0  0772               	decf	(printf@prec+1)& (0+255),f,b
  7344  0009E2                     l10562:
  7345                           
  7346                           ; BSR set to: 1
  7347  0009E2  0101               	movlb	1	; () banked
  7348  0009E4  5171               	movf	printf@prec& (0+255),w,b
  7349  0009E6  0101               	movlb	1	; () banked
  7350  0009E8  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  7351  0009EA  B4D8               	btfsc	status,2,c
  7352  0009EC  D173               	goto	l10642
  7353  0009EE  D7F2               	goto	l10558
  7354  0009F0                     l1002:
  7355                           
  7356                           ; BSR set to: 1
  7357                           ;doprnt.c: 1246: }
  7358                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  7359  0009F0  0101               	movlb	1	; () banked
  7360  0009F2  BD60               	btfsc	printf@flag& (0+255),6,b
  7361  0009F4  D023               	goto	l10574
  7362                           
  7363                           ; BSR set to: 1
  7364                           ;doprnt.c: 1253: {
  7365                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7366  0009F6  C15E  FFD9         	movff	printf@ap,fsr2l
  7367  0009FA  C15F  FFDA         	movff	printf@ap+1,fsr2h
  7368  0009FE  CFDE F166          	movff	postinc2,printf@val
  7369  000A02  CFDD F167          	movff	postdec2,printf@val+1
  7370  000A06  0101               	movlb	1	; () banked
  7371  000A08  0E00               	movlw	0
  7372  000A0A  BF67               	btfsc	(printf@val+1)& (0+255),7,b
  7373  000A0C  0EFF               	movlw	-1
  7374  000A0E  6F68               	movwf	(printf@val+2)& (0+255),b
  7375  000A10  6F69               	movwf	(printf@val+3)& (0+255),b
  7376                           
  7377                           ; BSR set to: 1
  7378  000A12  0E02               	movlw	2
  7379  000A14  0101               	movlb	1	; () banked
  7380  000A16  275E               	addwf	printf@ap& (0+255),f,b
  7381  000A18  0E00               	movlw	0
  7382  000A1A  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  7383                           
  7384                           ; BSR set to: 1
  7385                           ;doprnt.c: 1261: if((long)val < 0) {
  7386  000A1C  0101               	movlb	1	; () banked
  7387  000A1E  AF69               	btfss	(printf@val+3)& (0+255),7,b
  7388  000A20  D021               	goto	l10578
  7389                           
  7390                           ; BSR set to: 1
  7391                           ;doprnt.c: 1262: flag |= 0x03;
  7392  000A22  0E03               	movlw	3
  7393  000A24  0101               	movlb	1	; () banked
  7394  000A26  1360               	iorwf	printf@flag& (0+255),f,b
  7395                           
  7396                           ; BSR set to: 1
  7397                           ;doprnt.c: 1263: val = -val;
  7398  000A28  0101               	movlb	1	; () banked
  7399  000A2A  1F69               	comf	(printf@val+3)& (0+255),f,b
  7400  000A2C  1F68               	comf	(printf@val+2)& (0+255),f,b
  7401  000A2E  1F67               	comf	(printf@val+1)& (0+255),f,b
  7402  000A30  6D66               	negf	printf@val& (0+255),b
  7403  000A32  0E00               	movlw	0
  7404  000A34  2367               	addwfc	(printf@val+1)& (0+255),f,b
  7405  000A36  2368               	addwfc	(printf@val+2)& (0+255),f,b
  7406  000A38  2369               	addwfc	(printf@val+3)& (0+255),f,b
  7407                           
  7408                           ; BSR set to: 1
  7409                           ;doprnt.c: 1264: }
  7410                           ;doprnt.c: 1266: }
  7411  000A3A  D014               	goto	l10578
  7412  000A3C                     l10574:
  7413                           
  7414                           ; BSR set to: 1
  7415                           ;doprnt.c: 1268: else
  7416                           ;doprnt.c: 1273: {
  7417                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7418  000A3C  C15E  FFD9         	movff	printf@ap,fsr2l
  7419  000A40  C15F  FFDA         	movff	printf@ap+1,fsr2h
  7420  000A44  CFDE F151          	movff	postinc2,??_printf
  7421  000A48  CFDD F152          	movff	postdec2,??_printf+1
  7422  000A4C  C151  F166         	movff	??_printf,printf@val
  7423  000A50  C152  F167         	movff	??_printf+1,printf@val+1
  7424  000A54  0101               	movlb	1	; () banked
  7425  000A56  6B68               	clrf	(printf@val+2)& (0+255),b
  7426  000A58  6B69               	clrf	(printf@val+3)& (0+255),b
  7427                           
  7428                           ; BSR set to: 1
  7429  000A5A  0E02               	movlw	2
  7430  000A5C  0101               	movlb	1	; () banked
  7431  000A5E  275E               	addwf	printf@ap& (0+255),f,b
  7432  000A60  0E00               	movlw	0
  7433  000A62  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  7434  000A64                     l10578:
  7435                           
  7436                           ; BSR set to: 1
  7437                           ;doprnt.c: 1287: }
  7438                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7439  000A64  0101               	movlb	1	; () banked
  7440  000A66  5171               	movf	printf@prec& (0+255),w,b
  7441  000A68  0101               	movlb	1	; () banked
  7442  000A6A  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  7443  000A6C  A4D8               	btfss	status,2,c
  7444  000A6E  D00D               	goto	l10584
  7445                           
  7446                           ; BSR set to: 1
  7447  000A70  0101               	movlb	1	; () banked
  7448  000A72  5166               	movf	printf@val& (0+255),w,b
  7449  000A74  0101               	movlb	1	; () banked
  7450  000A76  1167               	iorwf	(printf@val+1)& (0+255),w,b
  7451  000A78  0101               	movlb	1	; () banked
  7452  000A7A  1168               	iorwf	(printf@val+2)& (0+255),w,b
  7453  000A7C  0101               	movlb	1	; () banked
  7454  000A7E  1169               	iorwf	(printf@val+3)& (0+255),w,b
  7455  000A80  A4D8               	btfss	status,2,c
  7456  000A82  D003               	goto	l10584
  7457                           
  7458                           ; BSR set to: 1
  7459                           ;doprnt.c: 1291: prec++;
  7460  000A84  0101               	movlb	1	; () banked
  7461  000A86  4B71               	infsnz	printf@prec& (0+255),f,b
  7462  000A88  2B72               	incf	(printf@prec+1)& (0+255),f,b
  7463  000A8A                     l10584:
  7464                           
  7465                           ; BSR set to: 1
  7466                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7467  000A8A  0E01               	movlw	1
  7468  000A8C  0101               	movlb	1	; () banked
  7469  000A8E  6F73               	movwf	printf@c& (0+255),b
  7470  000A90                     l10586:
  7471                           
  7472                           ; BSR set to: 1
  7473  000A90  0E0A               	movlw	10
  7474  000A92  0101               	movlb	1	; () banked
  7475  000A94  1973               	xorwf	printf@c& (0+255),w,b
  7476  000A96  B4D8               	btfsc	status,2,c
  7477  000A98  D01E               	goto	l10598
  7478                           
  7479                           ; BSR set to: 1
  7480                           ;doprnt.c: 1306: if(val < dpowers[c])
  7481                           
  7482                           ; BSR set to: 1
  7483                           
  7484                           ; BSR set to: 1
  7485  000A9A  0101               	movlb	1	; () banked
  7486  000A9C  5173               	movf	printf@c& (0+255),w,b
  7487  000A9E  0D04               	mullw	4
  7488  000AA0  0ED5               	movlw	low _dpowers
  7489  000AA2  24F3               	addwf	prodl,w,c
  7490  000AA4  6EF6               	movwf	tblptrl,c
  7491  000AA6  0E7C               	movlw	high _dpowers
  7492  000AA8  20F4               	addwfc	prodh,w,c
  7493  000AAA  6EF7               	movwf	tblptrh,c
  7494  000AAC                     	if	0	;There are less than 3 active tblptr bytes
  7495  000AAC                     	endif
  7496  000AAC  0009               	tblrd		*+
  7497  000AAE  50F5               	movf	tablat,w,c
  7498  000AB0  0101               	movlb	1	; () banked
  7499  000AB2  5D66               	subwf	printf@val& (0+255),w,b
  7500  000AB4  0009               	tblrd		*+
  7501  000AB6  50F5               	movf	tablat,w,c
  7502  000AB8  0101               	movlb	1	; () banked
  7503  000ABA  5967               	subwfb	(printf@val+1)& (0+255),w,b
  7504  000ABC  0009               	tblrd		*+
  7505  000ABE  50F5               	movf	tablat,w,c
  7506  000AC0  0101               	movlb	1	; () banked
  7507  000AC2  5968               	subwfb	(printf@val+2)& (0+255),w,b
  7508  000AC4  0009               	tblrd		*+
  7509  000AC6  50F5               	movf	tablat,w,c
  7510  000AC8  0101               	movlb	1	; () banked
  7511  000ACA  5969               	subwfb	(printf@val+3)& (0+255),w,b
  7512  000ACC  A0D8               	btfss	status,0,c
  7513  000ACE  D003               	goto	l10598
  7514                           
  7515                           ; BSR set to: 1
  7516                           
  7517                           ; BSR set to: 1
  7518                           
  7519                           ; BSR set to: 1
  7520                           ;doprnt.c: 1307: break;
  7521  000AD0  0101               	movlb	1	; () banked
  7522  000AD2  2B73               	incf	printf@c& (0+255),f,b
  7523  000AD4  D7DD               	goto	l10586
  7524  000AD6                     l10598:
  7525                           
  7526                           ; BSR set to: 1
  7527                           ;doprnt.c: 1339: if(c < prec)
  7528  000AD6  0E80               	movlw	128
  7529  000AD8  0101               	movlb	1	; () banked
  7530  000ADA  BF73               	btfsc	printf@c& (0+255),7,b
  7531  000ADC  0E7F               	movlw	127
  7532  000ADE  0101               	movlb	1	; () banked
  7533  000AE0  6F51               	movwf	??_printf& (0+255),b
  7534  000AE2  0101               	movlb	1	; () banked
  7535  000AE4  5171               	movf	printf@prec& (0+255),w,b
  7536  000AE6  0101               	movlb	1	; () banked
  7537  000AE8  5D73               	subwf	printf@c& (0+255),w,b
  7538  000AEA  0101               	movlb	1	; () banked
  7539  000AEC  5172               	movf	(printf@prec+1)& (0+255),w,b
  7540  000AEE  0A80               	xorlw	128
  7541  000AF0  0101               	movlb	1	; () banked
  7542  000AF2  5951               	subwfb	??_printf& (0+255),w,b
  7543  000AF4  B0D8               	btfsc	status,0,c
  7544  000AF6  D003               	goto	l10602
  7545                           
  7546                           ; BSR set to: 1
  7547                           ;doprnt.c: 1340: c = prec;
  7548  000AF8  C171  F173         	movff	printf@prec,printf@c
  7549  000AFC  D018               	goto	l10606
  7550  000AFE                     l10602:
  7551                           
  7552                           ; BSR set to: 1
  7553                           ;doprnt.c: 1341: else if(prec < c)
  7554  000AFE  0101               	movlb	1	; () banked
  7555  000B00  5172               	movf	(printf@prec+1)& (0+255),w,b
  7556  000B02  0A80               	xorlw	128
  7557  000B04  0101               	movlb	1	; () banked
  7558  000B06  6F51               	movwf	??_printf& (0+255),b
  7559  000B08  0101               	movlb	1	; () banked
  7560  000B0A  5173               	movf	printf@c& (0+255),w,b
  7561  000B0C  0101               	movlb	1	; () banked
  7562  000B0E  5D71               	subwf	printf@prec& (0+255),w,b
  7563  000B10  0E80               	movlw	128
  7564  000B12  0101               	movlb	1	; () banked
  7565  000B14  BF73               	btfsc	printf@c& (0+255),7,b
  7566  000B16  0E7F               	movlw	127
  7567  000B18  0101               	movlb	1	; () banked
  7568  000B1A  5951               	subwfb	??_printf& (0+255),w,b
  7569  000B1C  B0D8               	btfsc	status,0,c
  7570  000B1E  D007               	goto	l10606
  7571                           
  7572                           ; BSR set to: 1
  7573                           ;doprnt.c: 1342: prec = c;
  7574  000B20  0101               	movlb	1	; () banked
  7575  000B22  5173               	movf	printf@c& (0+255),w,b
  7576  000B24  0101               	movlb	1	; () banked
  7577  000B26  6F71               	movwf	printf@prec& (0+255),b
  7578  000B28  6B72               	clrf	(printf@prec+1)& (0+255),b
  7579  000B2A  BF71               	btfsc	printf@prec& (0+255),7,b
  7580  000B2C  0772               	decf	(printf@prec+1)& (0+255),f,b
  7581  000B2E                     l10606:
  7582                           
  7583                           ; BSR set to: 1
  7584                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7585  000B2E  0101               	movlb	1	; () banked
  7586  000B30  516C               	movf	printf@width& (0+255),w,b
  7587  000B32  0101               	movlb	1	; () banked
  7588  000B34  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7589  000B36  B4D8               	btfsc	status,2,c
  7590  000B38  D014               	goto	l10612
  7591                           
  7592                           ; BSR set to: 1
  7593  000B3A  0E03               	movlw	3
  7594  000B3C  0101               	movlb	1	; () banked
  7595  000B3E  1560               	andwf	printf@flag& (0+255),w,b
  7596  000B40  0101               	movlb	1	; () banked
  7597  000B42  6F51               	movwf	??_printf& (0+255),b
  7598  000B44  0E00               	movlw	0
  7599  000B46  0101               	movlb	1	; () banked
  7600  000B48  1561               	andwf	(printf@flag+1)& (0+255),w,b
  7601  000B4A  0101               	movlb	1	; () banked
  7602  000B4C  6F52               	movwf	(??_printf+1)& (0+255),b
  7603  000B4E  0101               	movlb	1	; () banked
  7604  000B50  5151               	movf	??_printf& (0+255),w,b
  7605  000B52  0101               	movlb	1	; () banked
  7606  000B54  1152               	iorwf	(??_printf+1)& (0+255),w,b
  7607  000B56  B4D8               	btfsc	status,2,c
  7608  000B58  D004               	goto	l10612
  7609                           
  7610                           ; BSR set to: 1
  7611                           ;doprnt.c: 1346: width--;
  7612  000B5A  0101               	movlb	1	; () banked
  7613  000B5C  076C               	decf	printf@width& (0+255),f,b
  7614  000B5E  A0D8               	btfss	status,0,c
  7615  000B60  076D               	decf	(printf@width+1)& (0+255),f,b
  7616  000B62                     l10612:
  7617                           
  7618                           ; BSR set to: 1
  7619                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7620  000B62  0101               	movlb	1	; () banked
  7621  000B64  AD61               	btfss	(printf@flag+1)& (0+255),6,b
  7622  000B66  D01E               	goto	l10620
  7623                           
  7624                           ; BSR set to: 1
  7625                           ;doprnt.c: 1349: if(width > prec)
  7626  000B68  0101               	movlb	1	; () banked
  7627  000B6A  516C               	movf	printf@width& (0+255),w,b
  7628  000B6C  0101               	movlb	1	; () banked
  7629  000B6E  5D71               	subwf	printf@prec& (0+255),w,b
  7630  000B70  0101               	movlb	1	; () banked
  7631  000B72  5172               	movf	(printf@prec+1)& (0+255),w,b
  7632  000B74  0A80               	xorlw	128
  7633  000B76  0101               	movlb	1	; () banked
  7634  000B78  6F51               	movwf	??_printf& (0+255),b
  7635  000B7A  0101               	movlb	1	; () banked
  7636  000B7C  516D               	movf	(printf@width+1)& (0+255),w,b
  7637  000B7E  0A80               	xorlw	128
  7638  000B80  0101               	movlb	1	; () banked
  7639  000B82  5951               	subwfb	??_printf& (0+255),w,b
  7640  000B84  B0D8               	btfsc	status,0,c
  7641  000B86  D009               	goto	l10618
  7642                           
  7643                           ; BSR set to: 1
  7644                           ;doprnt.c: 1350: width -= prec;
  7645  000B88  0101               	movlb	1	; () banked
  7646  000B8A  5171               	movf	printf@prec& (0+255),w,b
  7647  000B8C  0101               	movlb	1	; () banked
  7648  000B8E  5F6C               	subwf	printf@width& (0+255),f,b
  7649  000B90  0101               	movlb	1	; () banked
  7650  000B92  5172               	movf	(printf@prec+1)& (0+255),w,b
  7651  000B94  0101               	movlb	1	; () banked
  7652  000B96  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  7653  000B98  D005               	goto	l10620
  7654  000B9A                     l10618:
  7655                           
  7656                           ; BSR set to: 1
  7657                           ;doprnt.c: 1351: else
  7658                           ;doprnt.c: 1352: width = 0;
  7659  000B9A  0E00               	movlw	0
  7660  000B9C  0101               	movlb	1	; () banked
  7661  000B9E  6F6D               	movwf	(printf@width+1)& (0+255),b
  7662  000BA0  0E00               	movlw	0
  7663  000BA2  6F6C               	movwf	printf@width& (0+255),b
  7664  000BA4                     l10620:
  7665                           
  7666                           ; BSR set to: 1
  7667                           ;doprnt.c: 1353: }
  7668                           ;doprnt.c: 1381: if(width > c)
  7669  000BA4  0E80               	movlw	128
  7670  000BA6  0101               	movlb	1	; () banked
  7671  000BA8  BF73               	btfsc	printf@c& (0+255),7,b
  7672  000BAA  0E7F               	movlw	127
  7673  000BAC  0101               	movlb	1	; () banked
  7674  000BAE  6F51               	movwf	??_printf& (0+255),b
  7675  000BB0  0101               	movlb	1	; () banked
  7676  000BB2  516C               	movf	printf@width& (0+255),w,b
  7677  000BB4  0101               	movlb	1	; () banked
  7678  000BB6  5D73               	subwf	printf@c& (0+255),w,b
  7679  000BB8  0101               	movlb	1	; () banked
  7680  000BBA  516D               	movf	(printf@width+1)& (0+255),w,b
  7681  000BBC  0A80               	xorlw	128
  7682  000BBE  0101               	movlb	1	; () banked
  7683  000BC0  5951               	subwfb	??_printf& (0+255),w,b
  7684  000BC2  B0D8               	btfsc	status,0,c
  7685  000BC4  D00B               	goto	l10624
  7686                           
  7687                           ; BSR set to: 1
  7688                           ;doprnt.c: 1382: width -= c;
  7689  000BC6  0101               	movlb	1	; () banked
  7690  000BC8  5173               	movf	printf@c& (0+255),w,b
  7691  000BCA  0101               	movlb	1	; () banked
  7692  000BCC  5F6C               	subwf	printf@width& (0+255),f,b
  7693  000BCE  0E00               	movlw	0
  7694  000BD0  0101               	movlb	1	; () banked
  7695  000BD2  BF73               	btfsc	printf@c& (0+255),7,b
  7696  000BD4  0EFF               	movlw	255
  7697  000BD6  0101               	movlb	1	; () banked
  7698  000BD8  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  7699  000BDA  D005               	goto	l10626
  7700  000BDC                     l10624:
  7701                           
  7702                           ; BSR set to: 1
  7703                           ;doprnt.c: 1383: else
  7704                           ;doprnt.c: 1384: width = 0;
  7705  000BDC  0E00               	movlw	0
  7706  000BDE  0101               	movlb	1	; () banked
  7707  000BE0  6F6D               	movwf	(printf@width+1)& (0+255),b
  7708  000BE2  0E00               	movlw	0
  7709  000BE4  6F6C               	movwf	printf@width& (0+255),b
  7710  000BE6                     l10626:
  7711                           
  7712                           ; BSR set to: 1
  7713                           ;doprnt.c: 1422: {
  7714                           ;doprnt.c: 1424: if(width
  7715                           ;doprnt.c: 1428: )
  7716  000BE6  0101               	movlb	1	; () banked
  7717  000BE8  516C               	movf	printf@width& (0+255),w,b
  7718  000BEA  0101               	movlb	1	; () banked
  7719  000BEC  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7720  000BEE  B4D8               	btfsc	status,2,c
  7721  000BF0  D00D               	goto	l10632
  7722  000BF2                     l10628:
  7723                           
  7724                           ; BSR set to: 1
  7725                           ;doprnt.c: 1430: (putch(' ') );
  7726  000BF2  0E20               	movlw	32
  7727  000BF4  EC79  F039         	call	_putch
  7728                           
  7729                           ;doprnt.c: 1431: while(--width);
  7730  000BF8  0101               	movlb	1	; () banked
  7731  000BFA  076C               	decf	printf@width& (0+255),f,b
  7732  000BFC  A0D8               	btfss	status,0,c
  7733  000BFE  076D               	decf	(printf@width+1)& (0+255),f,b
  7734  000C00  0101               	movlb	1	; () banked
  7735  000C02  516C               	movf	printf@width& (0+255),w,b
  7736  000C04  0101               	movlb	1	; () banked
  7737  000C06  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7738  000C08  A4D8               	btfss	status,2,c
  7739  000C0A  D7F3               	goto	l10628
  7740  000C0C                     l10632:
  7741                           
  7742                           ; BSR set to: 1
  7743                           ;doprnt.c: 1438: if(flag & 0x03)
  7744  000C0C  0E03               	movlw	3
  7745  000C0E  0101               	movlb	1	; () banked
  7746  000C10  1560               	andwf	printf@flag& (0+255),w,b
  7747  000C12  0101               	movlb	1	; () banked
  7748  000C14  6F51               	movwf	??_printf& (0+255),b
  7749  000C16  0E00               	movlw	0
  7750  000C18  0101               	movlb	1	; () banked
  7751  000C1A  1561               	andwf	(printf@flag+1)& (0+255),w,b
  7752  000C1C  0101               	movlb	1	; () banked
  7753  000C1E  6F52               	movwf	(??_printf+1)& (0+255),b
  7754  000C20  0101               	movlb	1	; () banked
  7755  000C22  5151               	movf	??_printf& (0+255),w,b
  7756  000C24  0101               	movlb	1	; () banked
  7757  000C26  1152               	iorwf	(??_printf+1)& (0+255),w,b
  7758  000C28  B4D8               	btfsc	status,2,c
  7759  000C2A  D049               	goto	l10640
  7760                           
  7761                           ; BSR set to: 1
  7762                           ;doprnt.c: 1439: (putch('-') );
  7763  000C2C  0E2D               	movlw	45
  7764  000C2E  EC79  F039         	call	_putch
  7765                           
  7766                           ;doprnt.c: 1469: }
  7767                           ;doprnt.c: 1474: while(prec--) {
  7768  000C32  D045               	goto	l10640
  7769  000C34                     l10636:
  7770                           
  7771                           ;doprnt.c: 1478: {
  7772                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7773  000C34  C171  F151         	movff	printf@prec,??_printf
  7774  000C38  C172  F152         	movff	printf@prec+1,??_printf+1
  7775  000C3C  0101               	movlb	1	; () banked
  7776  000C3E  90D8               	bcf	status,0,c
  7777  000C40  3751               	rlcf	??_printf& (0+255),f,b
  7778  000C42  3752               	rlcf	(??_printf+1)& (0+255),f,b
  7779  000C44  0101               	movlb	1	; () banked
  7780  000C46  90D8               	bcf	status,0,c
  7781  000C48  3751               	rlcf	??_printf& (0+255),f,b
  7782  000C4A  3752               	rlcf	(??_printf+1)& (0+255),f,b
  7783  000C4C  0ED5               	movlw	low _dpowers
  7784  000C4E  0101               	movlb	1	; () banked
  7785  000C50  2551               	addwf	??_printf& (0+255),w,b
  7786  000C52  6EF6               	movwf	tblptrl,c
  7787  000C54  0E7C               	movlw	high _dpowers
  7788  000C56  2152               	addwfc	(??_printf+1)& (0+255),w,b
  7789  000C58  6EF7               	movwf	tblptrh,c
  7790  000C5A                     	if	0	;There are less than 3 active tblptr bytes
  7791  000C5A                     	endif
  7792  000C5A  0009               	tblrd		*+
  7793  000C5C  CFF5 F104          	movff	tablat,___lldiv@divisor
  7794  000C60  0009               	tblrd		*+
  7795  000C62  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  7796  000C66  0009               	tblrd		*+
  7797  000C68  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  7798  000C6C  000A               	tblrd		*-
  7799  000C6E  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  7800  000C72  C166  F100         	movff	printf@val,___lldiv@dividend
  7801  000C76  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  7802  000C7A  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  7803  000C7E  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  7804  000C82  EC87  F02C         	call	___lldiv	;wreg free
  7805  000C86  C100  F10D         	movff	?___lldiv,___llmod@dividend
  7806  000C8A  C101  F10E         	movff	?___lldiv+1,___llmod@dividend+1
  7807  000C8E  C102  F10F         	movff	?___lldiv+2,___llmod@dividend+2
  7808  000C92  C103  F110         	movff	?___lldiv+3,___llmod@dividend+3
  7809  000C96  0E0A               	movlw	10
  7810  000C98  0101               	movlb	1	; () banked
  7811  000C9A  6F11               	movwf	___llmod@divisor& (0+255),b
  7812  000C9C  0E00               	movlw	0
  7813  000C9E  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  7814  000CA0  0E00               	movlw	0
  7815  000CA2  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  7816  000CA4  0E00               	movlw	0
  7817  000CA6  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  7818  000CA8  EC37  F02F         	call	___llmod	;wreg free
  7819  000CAC  0101               	movlb	1	; () banked
  7820  000CAE  510D               	movf	?___llmod& (0+255),w,b
  7821  000CB0  0F30               	addlw	48
  7822  000CB2  0101               	movlb	1	; () banked
  7823  000CB4  6F73               	movwf	printf@c& (0+255),b
  7824                           
  7825                           ; BSR set to: 1
  7826                           ;doprnt.c: 1523: }
  7827                           ;doprnt.c: 1524: (putch(c) );
  7828  000CB6  0101               	movlb	1	; () banked
  7829  000CB8  5173               	movf	printf@c& (0+255),w,b
  7830  000CBA  EC79  F039         	call	_putch
  7831  000CBE                     l10640:
  7832  000CBE  0101               	movlb	1	; () banked
  7833  000CC0  0771               	decf	printf@prec& (0+255),f,b
  7834  000CC2  A0D8               	btfss	status,0,c
  7835  000CC4  0772               	decf	(printf@prec+1)& (0+255),f,b
  7836  000CC6  0101               	movlb	1	; () banked
  7837  000CC8  2971               	incf	printf@prec& (0+255),w,b
  7838  000CCA  E1B4               	bnz	l10636
  7839  000CCC  0101               	movlb	1	; () banked
  7840  000CCE  2972               	incf	(printf@prec+1)& (0+255),w,b
  7841  000CD0  A4D8               	btfss	status,2,c
  7842  000CD2  D7B0               	goto	l10636
  7843  000CD4                     l10642:
  7844  000CD4  C13F  FFF6         	movff	printf@f,tblptrl
  7845  000CD8  C140  FFF7         	movff	printf@f+1,tblptrh
  7846  000CDC  0101               	movlb	1	; () banked
  7847  000CDE  4B3F               	infsnz	printf@f& (0+255),f,b
  7848  000CE0  2B40               	incf	(printf@f+1)& (0+255),f,b
  7849  000CE2                     	if	0	;tblptru may be non-zero
  7850  000CE2                     	endif
  7851  000CE2                     	if	0	;tblptru may be non-zero
  7852  000CE2                     	endif
  7853  000CE2  0008               	tblrd		*
  7854  000CE4  CFF5 F173          	movff	tablat,printf@c
  7855  000CE8  0101               	movlb	1	; () banked
  7856  000CEA  5173               	movf	printf@c& (0+255),w,b
  7857  000CEC  B4D8               	btfsc	status,2,c
  7858  000CEE  0012               	return	
  7859  000CF0  EF69  F000         	goto	l10344
  7860  000CF4                     __end_of_printf:
  7861                           	opt stack 0
  7862                           tblptru	equ	0xFF8
  7863                           tblptrh	equ	0xFF7
  7864                           tblptrl	equ	0xFF6
  7865                           tablat	equ	0xFF5
  7866                           prodh	equ	0xFF4
  7867                           prodl	equ	0xFF3
  7868                           intcon	equ	0xFF2
  7869                           postinc0	equ	0xFEE
  7870                           wreg	equ	0xFE8
  7871                           postdec1	equ	0xFE5
  7872                           fsr1l	equ	0xFE1
  7873                           indf2	equ	0xFDF
  7874                           postinc2	equ	0xFDE
  7875                           postdec2	equ	0xFDD
  7876                           fsr2h	equ	0xFDA
  7877                           fsr2l	equ	0xFD9
  7878                           status	equ	0xFD8
  7879                           
  7880 ;; *************** function _scale *****************
  7881 ;; Defined at:
  7882 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  7883 ;; Parameters:    Size  Location     Type
  7884 ;;  scl             1    wreg     char 
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;  scl             1   41[BANK1 ] char 
  7887 ;; Return value:  Size  Location     Type
  7888 ;;                  3   35[BANK1 ] char 
  7889 ;; Registers used:
  7890 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7891 ;; Tracked objects:
  7892 ;;		On entry : 0/0
  7893 ;;		On exit  : 0/0
  7894 ;;		Unchanged: 0/0
  7895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7896 ;;      Params:         0       0       3       0       0       0       0
  7897 ;;      Locals:         0       0       4       0       0       0       0
  7898 ;;      Temps:          0       0       0       0       0       0       0
  7899 ;;      Totals:         0       0       7       0       0       0       0
  7900 ;;Total ram usage:        7 bytes
  7901 ;; Hardware stack levels used:    1
  7902 ;; Hardware stack levels required when called:   14
  7903 ;; This function calls:
  7904 ;;		___awdiv
  7905 ;;		___awmod
  7906 ;;		___ftmul
  7907 ;;		___wmul
  7908 ;; This function is called by:
  7909 ;;		_printf
  7910 ;; This function uses a non-reentrant model
  7911 ;;
  7912                           
  7913                           	psect	text24
  7914  000CF4                     __ptext24:
  7915                           	opt stack 0
  7916  000CF4                     _scale:
  7917                           	opt stack 13
  7918                           
  7919                           ; BSR set to: 1
  7920                           ;incstack = 0
  7921                           ;scale@scl stored from wreg
  7922  000CF4  0101               	movlb	1	; () banked
  7923  000CF6  6F29               	movwf	scale@scl& (0+255),b
  7924                           
  7925                           ;doprnt.c: 428: if(scl < 0) {
  7926  000CF8  0101               	movlb	1	; () banked
  7927  000CFA  AF29               	btfss	scale@scl& (0+255),7,b
  7928  000CFC  D12A               	goto	l10084
  7929                           
  7930                           ; BSR set to: 1
  7931                           ;doprnt.c: 429: scl = -scl;
  7932  000CFE  0101               	movlb	1	; () banked
  7933  000D00  6D29               	negf	scale@scl& (0+255),b
  7934                           
  7935                           ;doprnt.c: 430: if(scl>=110)
  7936  000D02  0101               	movlb	1	; () banked
  7937  000D04  5129               	movf	scale@scl& (0+255),w,b
  7938  000D06  0A80               	xorlw	128
  7939  000D08  0F12               	addlw	-238
  7940  000D0A  A0D8               	btfss	status,0,c
  7941  000D0C  D0AC               	goto	l10074
  7942                           
  7943                           ; BSR set to: 1
  7944                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7945  000D0E  0E00               	movlw	0
  7946  000D10  0101               	movlb	1	; () banked
  7947  000D12  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7948  000D14  0E03               	movlw	3
  7949  000D16  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7950  000D18  0E00               	movlw	0
  7951  000D1A  0101               	movlb	1	; () banked
  7952  000D1C  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7953  000D1E  0E0A               	movlw	10
  7954  000D20  6F08               	movwf	___awdiv@divisor& (0+255),b
  7955  000D22  0E00               	movlw	0
  7956  000D24  0101               	movlb	1	; () banked
  7957  000D26  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7958  000D28  0E64               	movlw	100
  7959  000D2A  6F02               	movwf	___awmod@divisor& (0+255),b
  7960  000D2C  0101               	movlb	1	; () banked
  7961  000D2E  5129               	movf	scale@scl& (0+255),w,b
  7962  000D30  0101               	movlb	1	; () banked
  7963  000D32  6F00               	movwf	___awmod@dividend& (0+255),b
  7964  000D34  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7965  000D36  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7966  000D38  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7967  000D3A  ECF8  F02D         	call	___awmod	;wreg free
  7968  000D3E  C100  F106         	movff	?___awmod,___awdiv@dividend
  7969  000D42  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  7970  000D46  EC28  F02C         	call	___awdiv	;wreg free
  7971  000D4A  0E09               	movlw	9
  7972  000D4C  0101               	movlb	1	; () banked
  7973  000D4E  2506               	addwf	?___awdiv& (0+255),w,b
  7974  000D50  0101               	movlb	1	; () banked
  7975  000D52  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7976  000D54  0E00               	movlw	0
  7977  000D56  0101               	movlb	1	; () banked
  7978  000D58  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7979  000D5A  0101               	movlb	1	; () banked
  7980  000D5C  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7981  000D5E  ECDC  F037         	call	___wmul	;wreg free
  7982  000D62  0E24               	movlw	low __npowers_
  7983  000D64  0101               	movlb	1	; () banked
  7984  000D66  250E               	addwf	?___wmul& (0+255),w,b
  7985  000D68  6EF6               	movwf	tblptrl,c
  7986  000D6A  0E7D               	movlw	high __npowers_
  7987  000D6C  0101               	movlb	1	; () banked
  7988  000D6E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7989  000D70  6EF7               	movwf	tblptrh,c
  7990  000D72                     	if	0	;There are less than 3 active tblptr bytes
  7991  000D72                     	endif
  7992  000D72  0009               	tblrd		*+
  7993  000D74  CFF5 F117          	movff	tablat,___ftmul@f2
  7994  000D78  0009               	tblrd		*+
  7995  000D7A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  7996  000D7E  000A               	tblrd		*-
  7997  000D80  CFF5 F119          	movff	tablat,___ftmul@f2+2
  7998  000D84  0E00               	movlw	0
  7999  000D86  0101               	movlb	1	; () banked
  8000  000D88  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8001  000D8A  0E64               	movlw	100
  8002  000D8C  6F08               	movwf	___awdiv@divisor& (0+255),b
  8003  000D8E  0101               	movlb	1	; () banked
  8004  000D90  5129               	movf	scale@scl& (0+255),w,b
  8005  000D92  0101               	movlb	1	; () banked
  8006  000D94  6F06               	movwf	___awdiv@dividend& (0+255),b
  8007  000D96  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  8008  000D98  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  8009  000D9A  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8010  000D9C  EC28  F02C         	call	___awdiv	;wreg free
  8011  000DA0  0E12               	movlw	18
  8012  000DA2  0101               	movlb	1	; () banked
  8013  000DA4  2506               	addwf	?___awdiv& (0+255),w,b
  8014  000DA6  0101               	movlb	1	; () banked
  8015  000DA8  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8016  000DAA  0E00               	movlw	0
  8017  000DAC  0101               	movlb	1	; () banked
  8018  000DAE  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8019  000DB0  0101               	movlb	1	; () banked
  8020  000DB2  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8021  000DB4  0E00               	movlw	0
  8022  000DB6  0101               	movlb	1	; () banked
  8023  000DB8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8024  000DBA  0E03               	movlw	3
  8025  000DBC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8026  000DBE  ECDC  F037         	call	___wmul	;wreg free
  8027  000DC2  0E24               	movlw	low __npowers_
  8028  000DC4  0101               	movlb	1	; () banked
  8029  000DC6  250E               	addwf	?___wmul& (0+255),w,b
  8030  000DC8  6EF6               	movwf	tblptrl,c
  8031  000DCA  0E7D               	movlw	high __npowers_
  8032  000DCC  0101               	movlb	1	; () banked
  8033  000DCE  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8034  000DD0  6EF7               	movwf	tblptrh,c
  8035  000DD2                     	if	0	;There are less than 3 active tblptr bytes
  8036  000DD2                     	endif
  8037  000DD2  0009               	tblrd		*+
  8038  000DD4  CFF5 F114          	movff	tablat,___ftmul@f1
  8039  000DD8  0009               	tblrd		*+
  8040  000DDA  CFF5 F115          	movff	tablat,___ftmul@f1+1
  8041  000DDE  000A               	tblrd		*-
  8042  000DE0  CFF5 F116          	movff	tablat,___ftmul@f1+2
  8043  000DE4  EC1F  F01D         	call	___ftmul	;wreg free
  8044  000DE8  C114  F126         	movff	?___ftmul,_scale$2829
  8045  000DEC  C115  F127         	movff	?___ftmul+1,_scale$2829+1
  8046  000DF0  C116  F128         	movff	?___ftmul+2,_scale$2829+2
  8047                           
  8048                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  8049  000DF4  C126  F114         	movff	_scale$2829,___ftmul@f1
  8050  000DF8  C127  F115         	movff	_scale$2829+1,___ftmul@f1+1
  8051  000DFC  C128  F116         	movff	_scale$2829+2,___ftmul@f1+2
  8052  000E00  0E00               	movlw	0
  8053  000E02  0101               	movlb	1	; () banked
  8054  000E04  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8055  000E06  0E03               	movlw	3
  8056  000E08  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8057  000E0A  0E00               	movlw	0
  8058  000E0C  0101               	movlb	1	; () banked
  8059  000E0E  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8060  000E10  0E0A               	movlw	10
  8061  000E12  6F02               	movwf	___awmod@divisor& (0+255),b
  8062  000E14  0101               	movlb	1	; () banked
  8063  000E16  5129               	movf	scale@scl& (0+255),w,b
  8064  000E18  0101               	movlb	1	; () banked
  8065  000E1A  6F00               	movwf	___awmod@dividend& (0+255),b
  8066  000E1C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8067  000E1E  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8068  000E20  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8069  000E22  ECF8  F02D         	call	___awmod	;wreg free
  8070  000E26  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8071  000E2A  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8072  000E2E  ECDC  F037         	call	___wmul	;wreg free
  8073  000E32  0E24               	movlw	low __npowers_
  8074  000E34  0101               	movlb	1	; () banked
  8075  000E36  250E               	addwf	?___wmul& (0+255),w,b
  8076  000E38  6EF6               	movwf	tblptrl,c
  8077  000E3A  0E7D               	movlw	high __npowers_
  8078  000E3C  0101               	movlb	1	; () banked
  8079  000E3E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8080  000E40  6EF7               	movwf	tblptrh,c
  8081  000E42                     	if	0	;There are less than 3 active tblptr bytes
  8082  000E42                     	endif
  8083  000E42  0009               	tblrd		*+
  8084  000E44  CFF5 F117          	movff	tablat,___ftmul@f2
  8085  000E48  0009               	tblrd		*+
  8086  000E4A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8087  000E4E  000A               	tblrd		*-
  8088  000E50  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8089  000E54  EC1F  F01D         	call	___ftmul	;wreg free
  8090  000E58  C114  F123         	movff	?___ftmul,?_scale
  8091  000E5C  C115  F124         	movff	?___ftmul+1,?_scale+1
  8092  000E60  C116  F125         	movff	?___ftmul+2,?_scale+2
  8093  000E64  0012               	return	
  8094  000E66                     l10074:
  8095                           
  8096                           ;doprnt.c: 432: else if(scl > 10)
  8097  000E66  0101               	movlb	1	; () banked
  8098  000E68  5129               	movf	scale@scl& (0+255),w,b
  8099  000E6A  0A80               	xorlw	128
  8100  000E6C  0F75               	addlw	-139
  8101  000E6E  A0D8               	btfss	status,0,c
  8102  000E70  D05D               	goto	l10080
  8103                           
  8104                           ; BSR set to: 1
  8105                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8106  000E72  0E00               	movlw	0
  8107  000E74  0101               	movlb	1	; () banked
  8108  000E76  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8109  000E78  0E0A               	movlw	10
  8110  000E7A  6F08               	movwf	___awdiv@divisor& (0+255),b
  8111  000E7C  0101               	movlb	1	; () banked
  8112  000E7E  5129               	movf	scale@scl& (0+255),w,b
  8113  000E80  0101               	movlb	1	; () banked
  8114  000E82  6F06               	movwf	___awdiv@dividend& (0+255),b
  8115  000E84  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  8116  000E86  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  8117  000E88  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8118  000E8A  EC28  F02C         	call	___awdiv	;wreg free
  8119  000E8E  0E09               	movlw	9
  8120  000E90  0101               	movlb	1	; () banked
  8121  000E92  2506               	addwf	?___awdiv& (0+255),w,b
  8122  000E94  0101               	movlb	1	; () banked
  8123  000E96  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8124  000E98  0E00               	movlw	0
  8125  000E9A  0101               	movlb	1	; () banked
  8126  000E9C  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8127  000E9E  0101               	movlb	1	; () banked
  8128  000EA0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8129  000EA2  0E00               	movlw	0
  8130  000EA4  0101               	movlb	1	; () banked
  8131  000EA6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8132  000EA8  0E03               	movlw	3
  8133  000EAA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8134  000EAC  ECDC  F037         	call	___wmul	;wreg free
  8135  000EB0  0E24               	movlw	low __npowers_
  8136  000EB2  0101               	movlb	1	; () banked
  8137  000EB4  250E               	addwf	?___wmul& (0+255),w,b
  8138  000EB6  6EF6               	movwf	tblptrl,c
  8139  000EB8  0E7D               	movlw	high __npowers_
  8140  000EBA  0101               	movlb	1	; () banked
  8141  000EBC  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8142  000EBE  6EF7               	movwf	tblptrh,c
  8143  000EC0                     	if	0	;There are less than 3 active tblptr bytes
  8144  000EC0                     	endif
  8145  000EC0  0009               	tblrd		*+
  8146  000EC2  CFF5 F114          	movff	tablat,___ftmul@f1
  8147  000EC6  0009               	tblrd		*+
  8148  000EC8  CFF5 F115          	movff	tablat,___ftmul@f1+1
  8149  000ECC  000A               	tblrd		*-
  8150  000ECE  CFF5 F116          	movff	tablat,___ftmul@f1+2
  8151  000ED2  0E00               	movlw	0
  8152  000ED4  0101               	movlb	1	; () banked
  8153  000ED6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8154  000ED8  0E03               	movlw	3
  8155  000EDA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8156  000EDC  0E00               	movlw	0
  8157  000EDE  0101               	movlb	1	; () banked
  8158  000EE0  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8159  000EE2  0E0A               	movlw	10
  8160  000EE4  6F02               	movwf	___awmod@divisor& (0+255),b
  8161  000EE6  0101               	movlb	1	; () banked
  8162  000EE8  5129               	movf	scale@scl& (0+255),w,b
  8163  000EEA  0101               	movlb	1	; () banked
  8164  000EEC  6F00               	movwf	___awmod@dividend& (0+255),b
  8165  000EEE  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8166  000EF0  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8167  000EF2  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8168  000EF4  ECF8  F02D         	call	___awmod	;wreg free
  8169  000EF8  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8170  000EFC  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8171  000F00  ECDC  F037         	call	___wmul	;wreg free
  8172  000F04  0E24               	movlw	low __npowers_
  8173  000F06  0101               	movlb	1	; () banked
  8174  000F08  250E               	addwf	?___wmul& (0+255),w,b
  8175  000F0A  6EF6               	movwf	tblptrl,c
  8176  000F0C  0E7D               	movlw	high __npowers_
  8177  000F0E  0101               	movlb	1	; () banked
  8178  000F10  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8179  000F12  6EF7               	movwf	tblptrh,c
  8180  000F14                     	if	0	;There are less than 3 active tblptr bytes
  8181  000F14                     	endif
  8182  000F14  0009               	tblrd		*+
  8183  000F16  CFF5 F117          	movff	tablat,___ftmul@f2
  8184  000F1A  0009               	tblrd		*+
  8185  000F1C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8186  000F20  000A               	tblrd		*-
  8187  000F22  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8188  000F26  EC1F  F01D         	call	___ftmul	;wreg free
  8189  000F2A  D796               	goto	L2
  8190  000F2C                     l10080:
  8191                           
  8192                           ;doprnt.c: 434: return _npowers_[scl];
  8193  000F2C  0101               	movlb	1	; () banked
  8194  000F2E  5129               	movf	scale@scl& (0+255),w,b
  8195  000F30  0D03               	mullw	3
  8196  000F32  0E24               	movlw	low __npowers_
  8197  000F34  24F3               	addwf	prodl,w,c
  8198  000F36  6EF6               	movwf	tblptrl,c
  8199  000F38  0E7D               	movlw	high __npowers_
  8200  000F3A  20F4               	addwfc	prodh,w,c
  8201  000F3C  6EF7               	movwf	tblptrh,c
  8202  000F3E                     	if	0	;There are less than 3 active tblptr bytes
  8203  000F3E                     	endif
  8204  000F3E  0009               	tblrd		*+
  8205  000F40  CFF5 F123          	movff	tablat,?_scale
  8206  000F44  0009               	tblrd		*+
  8207  000F46  CFF5 F124          	movff	tablat,?_scale+1
  8208  000F4A  000A               	tblrd		*-
  8209  000F4C  CFF5 F125          	movff	tablat,?_scale+2
  8210                           
  8211                           ; BSR set to: 1
  8212  000F50  0012               	return	
  8213  000F52                     l10084:
  8214                           
  8215                           ; BSR set to: 1
  8216                           ;doprnt.c: 435: }
  8217                           ;doprnt.c: 436: if(scl>=110)
  8218  000F52  0101               	movlb	1	; () banked
  8219  000F54  5129               	movf	scale@scl& (0+255),w,b
  8220  000F56  0A80               	xorlw	128
  8221  000F58  0F12               	addlw	-238
  8222  000F5A  A0D8               	btfss	status,0,c
  8223  000F5C  D0AC               	goto	l10092
  8224                           
  8225                           ; BSR set to: 1
  8226                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8227  000F5E  0E00               	movlw	0
  8228  000F60  0101               	movlb	1	; () banked
  8229  000F62  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8230  000F64  0E03               	movlw	3
  8231  000F66  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8232  000F68  0E00               	movlw	0
  8233  000F6A  0101               	movlb	1	; () banked
  8234  000F6C  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8235  000F6E  0E0A               	movlw	10
  8236  000F70  6F08               	movwf	___awdiv@divisor& (0+255),b
  8237  000F72  0E00               	movlw	0
  8238  000F74  0101               	movlb	1	; () banked
  8239  000F76  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8240  000F78  0E64               	movlw	100
  8241  000F7A  6F02               	movwf	___awmod@divisor& (0+255),b
  8242  000F7C  0101               	movlb	1	; () banked
  8243  000F7E  5129               	movf	scale@scl& (0+255),w,b
  8244  000F80  0101               	movlb	1	; () banked
  8245  000F82  6F00               	movwf	___awmod@dividend& (0+255),b
  8246  000F84  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8247  000F86  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8248  000F88  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8249  000F8A  ECF8  F02D         	call	___awmod	;wreg free
  8250  000F8E  C100  F106         	movff	?___awmod,___awdiv@dividend
  8251  000F92  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  8252  000F96  EC28  F02C         	call	___awdiv	;wreg free
  8253  000F9A  0E09               	movlw	9
  8254  000F9C  0101               	movlb	1	; () banked
  8255  000F9E  2506               	addwf	?___awdiv& (0+255),w,b
  8256  000FA0  0101               	movlb	1	; () banked
  8257  000FA2  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8258  000FA4  0E00               	movlw	0
  8259  000FA6  0101               	movlb	1	; () banked
  8260  000FA8  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8261  000FAA  0101               	movlb	1	; () banked
  8262  000FAC  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8263  000FAE  ECDC  F037         	call	___wmul	;wreg free
  8264  000FB2  0EFD               	movlw	low __powers_
  8265  000FB4  0101               	movlb	1	; () banked
  8266  000FB6  250E               	addwf	?___wmul& (0+255),w,b
  8267  000FB8  6EF6               	movwf	tblptrl,c
  8268  000FBA  0E7C               	movlw	high __powers_
  8269  000FBC  0101               	movlb	1	; () banked
  8270  000FBE  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8271  000FC0  6EF7               	movwf	tblptrh,c
  8272  000FC2                     	if	0	;There are less than 3 active tblptr bytes
  8273  000FC2                     	endif
  8274  000FC2  0009               	tblrd		*+
  8275  000FC4  CFF5 F117          	movff	tablat,___ftmul@f2
  8276  000FC8  0009               	tblrd		*+
  8277  000FCA  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8278  000FCE  000A               	tblrd		*-
  8279  000FD0  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8280  000FD4  0E00               	movlw	0
  8281  000FD6  0101               	movlb	1	; () banked
  8282  000FD8  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8283  000FDA  0E64               	movlw	100
  8284  000FDC  6F08               	movwf	___awdiv@divisor& (0+255),b
  8285  000FDE  0101               	movlb	1	; () banked
  8286  000FE0  5129               	movf	scale@scl& (0+255),w,b
  8287  000FE2  0101               	movlb	1	; () banked
  8288  000FE4  6F06               	movwf	___awdiv@dividend& (0+255),b
  8289  000FE6  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  8290  000FE8  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  8291  000FEA  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8292  000FEC  EC28  F02C         	call	___awdiv	;wreg free
  8293  000FF0  0E12               	movlw	18
  8294  000FF2  0101               	movlb	1	; () banked
  8295  000FF4  2506               	addwf	?___awdiv& (0+255),w,b
  8296  000FF6  0101               	movlb	1	; () banked
  8297  000FF8  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8298  000FFA  0E00               	movlw	0
  8299  000FFC  0101               	movlb	1	; () banked
  8300  000FFE  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8301  001000  0101               	movlb	1	; () banked
  8302  001002  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8303  001004  0E00               	movlw	0
  8304  001006  0101               	movlb	1	; () banked
  8305  001008  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8306  00100A  0E03               	movlw	3
  8307  00100C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8308  00100E  ECDC  F037         	call	___wmul	;wreg free
  8309  001012  0EFD               	movlw	low __powers_
  8310  001014  0101               	movlb	1	; () banked
  8311  001016  250E               	addwf	?___wmul& (0+255),w,b
  8312  001018  6EF6               	movwf	tblptrl,c
  8313  00101A  0E7C               	movlw	high __powers_
  8314  00101C  0101               	movlb	1	; () banked
  8315  00101E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8316  001020  6EF7               	movwf	tblptrh,c
  8317  001022                     	if	0	;There are less than 3 active tblptr bytes
  8318  001022                     	endif
  8319  001022  0009               	tblrd		*+
  8320  001024  CFF5 F114          	movff	tablat,___ftmul@f1
  8321  001028  0009               	tblrd		*+
  8322  00102A  CFF5 F115          	movff	tablat,___ftmul@f1+1
  8323  00102E  000A               	tblrd		*-
  8324  001030  CFF5 F116          	movff	tablat,___ftmul@f1+2
  8325  001034  EC1F  F01D         	call	___ftmul	;wreg free
  8326  001038  C114  F126         	movff	?___ftmul,_scale$2829
  8327  00103C  C115  F127         	movff	?___ftmul+1,_scale$2829+1
  8328  001040  C116  F128         	movff	?___ftmul+2,_scale$2829+2
  8329                           
  8330                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8331  001044  C126  F114         	movff	_scale$2829,___ftmul@f1
  8332  001048  C127  F115         	movff	_scale$2829+1,___ftmul@f1+1
  8333  00104C  C128  F116         	movff	_scale$2829+2,___ftmul@f1+2
  8334  001050  0E00               	movlw	0
  8335  001052  0101               	movlb	1	; () banked
  8336  001054  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8337  001056  0E03               	movlw	3
  8338  001058  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8339  00105A  0E00               	movlw	0
  8340  00105C  0101               	movlb	1	; () banked
  8341  00105E  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8342  001060  0E0A               	movlw	10
  8343  001062  6F02               	movwf	___awmod@divisor& (0+255),b
  8344  001064  0101               	movlb	1	; () banked
  8345  001066  5129               	movf	scale@scl& (0+255),w,b
  8346  001068  0101               	movlb	1	; () banked
  8347  00106A  6F00               	movwf	___awmod@dividend& (0+255),b
  8348  00106C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8349  00106E  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8350  001070  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8351  001072  ECF8  F02D         	call	___awmod	;wreg free
  8352  001076  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8353  00107A  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8354  00107E  ECDC  F037         	call	___wmul	;wreg free
  8355  001082  0EFD               	movlw	low __powers_
  8356  001084  0101               	movlb	1	; () banked
  8357  001086  250E               	addwf	?___wmul& (0+255),w,b
  8358  001088  6EF6               	movwf	tblptrl,c
  8359  00108A  0E7C               	movlw	high __powers_
  8360  00108C  0101               	movlb	1	; () banked
  8361  00108E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8362  001090  6EF7               	movwf	tblptrh,c
  8363  001092                     	if	0	;There are less than 3 active tblptr bytes
  8364  001092                     	endif
  8365  001092  0009               	tblrd		*+
  8366  001094  CFF5 F117          	movff	tablat,___ftmul@f2
  8367  001098  0009               	tblrd		*+
  8368  00109A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8369  00109E  000A               	tblrd		*-
  8370  0010A0  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8371  0010A4  EC1F  F01D         	call	___ftmul	;wreg free
  8372  0010A8  C114  F123         	movff	?___ftmul,?_scale
  8373  0010AC  C115  F124         	movff	?___ftmul+1,?_scale+1
  8374  0010B0  C116  F125         	movff	?___ftmul+2,?_scale+2
  8375  0010B4  0012               	return	
  8376  0010B6                     l10092:
  8377                           
  8378                           ;doprnt.c: 438: else if(scl > 10)
  8379  0010B6  0101               	movlb	1	; () banked
  8380  0010B8  5129               	movf	scale@scl& (0+255),w,b
  8381  0010BA  0A80               	xorlw	128
  8382  0010BC  0F75               	addlw	-139
  8383  0010BE  A0D8               	btfss	status,0,c
  8384  0010C0  D05D               	goto	l10098
  8385                           
  8386                           ; BSR set to: 1
  8387                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8388  0010C2  0E00               	movlw	0
  8389  0010C4  0101               	movlb	1	; () banked
  8390  0010C6  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8391  0010C8  0E0A               	movlw	10
  8392  0010CA  6F08               	movwf	___awdiv@divisor& (0+255),b
  8393  0010CC  0101               	movlb	1	; () banked
  8394  0010CE  5129               	movf	scale@scl& (0+255),w,b
  8395  0010D0  0101               	movlb	1	; () banked
  8396  0010D2  6F06               	movwf	___awdiv@dividend& (0+255),b
  8397  0010D4  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  8398  0010D6  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  8399  0010D8  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8400  0010DA  EC28  F02C         	call	___awdiv	;wreg free
  8401  0010DE  0E09               	movlw	9
  8402  0010E0  0101               	movlb	1	; () banked
  8403  0010E2  2506               	addwf	?___awdiv& (0+255),w,b
  8404  0010E4  0101               	movlb	1	; () banked
  8405  0010E6  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8406  0010E8  0E00               	movlw	0
  8407  0010EA  0101               	movlb	1	; () banked
  8408  0010EC  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8409  0010EE  0101               	movlb	1	; () banked
  8410  0010F0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8411  0010F2  0E00               	movlw	0
  8412  0010F4  0101               	movlb	1	; () banked
  8413  0010F6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8414  0010F8  0E03               	movlw	3
  8415  0010FA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8416  0010FC  ECDC  F037         	call	___wmul	;wreg free
  8417  001100  0EFD               	movlw	low __powers_
  8418  001102  0101               	movlb	1	; () banked
  8419  001104  250E               	addwf	?___wmul& (0+255),w,b
  8420  001106  6EF6               	movwf	tblptrl,c
  8421  001108  0E7C               	movlw	high __powers_
  8422  00110A  0101               	movlb	1	; () banked
  8423  00110C  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8424  00110E  6EF7               	movwf	tblptrh,c
  8425  001110                     	if	0	;There are less than 3 active tblptr bytes
  8426  001110                     	endif
  8427  001110  0009               	tblrd		*+
  8428  001112  CFF5 F114          	movff	tablat,___ftmul@f1
  8429  001116  0009               	tblrd		*+
  8430  001118  CFF5 F115          	movff	tablat,___ftmul@f1+1
  8431  00111C  000A               	tblrd		*-
  8432  00111E  CFF5 F116          	movff	tablat,___ftmul@f1+2
  8433  001122  0E00               	movlw	0
  8434  001124  0101               	movlb	1	; () banked
  8435  001126  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8436  001128  0E03               	movlw	3
  8437  00112A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8438  00112C  0E00               	movlw	0
  8439  00112E  0101               	movlb	1	; () banked
  8440  001130  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8441  001132  0E0A               	movlw	10
  8442  001134  6F02               	movwf	___awmod@divisor& (0+255),b
  8443  001136  0101               	movlb	1	; () banked
  8444  001138  5129               	movf	scale@scl& (0+255),w,b
  8445  00113A  0101               	movlb	1	; () banked
  8446  00113C  6F00               	movwf	___awmod@dividend& (0+255),b
  8447  00113E  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8448  001140  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8449  001142  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8450  001144  ECF8  F02D         	call	___awmod	;wreg free
  8451  001148  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8452  00114C  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8453  001150  ECDC  F037         	call	___wmul	;wreg free
  8454  001154  0EFD               	movlw	low __powers_
  8455  001156  0101               	movlb	1	; () banked
  8456  001158  250E               	addwf	?___wmul& (0+255),w,b
  8457  00115A  6EF6               	movwf	tblptrl,c
  8458  00115C  0E7C               	movlw	high __powers_
  8459  00115E  0101               	movlb	1	; () banked
  8460  001160  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8461  001162  6EF7               	movwf	tblptrh,c
  8462  001164                     	if	0	;There are less than 3 active tblptr bytes
  8463  001164                     	endif
  8464  001164  0009               	tblrd		*+
  8465  001166  CFF5 F117          	movff	tablat,___ftmul@f2
  8466  00116A  0009               	tblrd		*+
  8467  00116C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8468  001170  000A               	tblrd		*-
  8469  001172  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8470  001176  EC1F  F01D         	call	___ftmul	;wreg free
  8471  00117A  D796               	goto	L3
  8472  00117C                     l10098:
  8473                           
  8474                           ;doprnt.c: 440: return _powers_[scl];
  8475  00117C  0101               	movlb	1	; () banked
  8476  00117E  5129               	movf	scale@scl& (0+255),w,b
  8477  001180  0D03               	mullw	3
  8478  001182  0EFD               	movlw	low __powers_
  8479  001184  24F3               	addwf	prodl,w,c
  8480  001186  6EF6               	movwf	tblptrl,c
  8481  001188  0E7C               	movlw	high __powers_
  8482  00118A  20F4               	addwfc	prodh,w,c
  8483  00118C  6EF7               	movwf	tblptrh,c
  8484  00118E                     	if	0	;There are less than 3 active tblptr bytes
  8485  00118E                     	endif
  8486  00118E  0009               	tblrd		*+
  8487  001190  CFF5 F123          	movff	tablat,?_scale
  8488  001194  0009               	tblrd		*+
  8489  001196  CFF5 F124          	movff	tablat,?_scale+1
  8490  00119A  000A               	tblrd		*-
  8491  00119C  CFF5 F125          	movff	tablat,?_scale+2
  8492  0011A0  0012               	return	
  8493  0011A2                     __end_of_scale:
  8494                           	opt stack 0
  8495                           tblptru	equ	0xFF8
  8496                           tblptrh	equ	0xFF7
  8497                           tblptrl	equ	0xFF6
  8498                           tablat	equ	0xFF5
  8499                           prodh	equ	0xFF4
  8500                           prodl	equ	0xFF3
  8501                           intcon	equ	0xFF2
  8502                           postinc0	equ	0xFEE
  8503                           wreg	equ	0xFE8
  8504                           postdec1	equ	0xFE5
  8505                           fsr1l	equ	0xFE1
  8506                           indf2	equ	0xFDF
  8507                           postinc2	equ	0xFDE
  8508                           postdec2	equ	0xFDD
  8509                           fsr2h	equ	0xFDA
  8510                           fsr2l	equ	0xFD9
  8511                           status	equ	0xFD8
  8512                           
  8513 ;; *************** function _putch *****************
  8514 ;; Defined at:
  8515 ;;		line 64 in file "source/IOConfig.h"
  8516 ;; Parameters:    Size  Location     Type
  8517 ;;  val             1    wreg     unsigned char 
  8518 ;; Auto vars:     Size  Location     Type
  8519 ;;  val             1   13[BANK1 ] unsigned char 
  8520 ;; Return value:  Size  Location     Type
  8521 ;;                  1    wreg      void 
  8522 ;; Registers used:
  8523 ;;		wreg, status,2, status,0, cstack
  8524 ;; Tracked objects:
  8525 ;;		On entry : 0/0
  8526 ;;		On exit  : 0/0
  8527 ;;		Unchanged: 0/0
  8528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8529 ;;      Params:         0       0       0       0       0       0       0
  8530 ;;      Locals:         0       0       1       0       0       0       0
  8531 ;;      Temps:          0       0       0       0       0       0       0
  8532 ;;      Totals:         0       0       1       0       0       0       0
  8533 ;;Total ram usage:        1 bytes
  8534 ;; Hardware stack levels used:    1
  8535 ;; Hardware stack levels required when called:   17
  8536 ;; This function calls:
  8537 ;;		_lcd_putc
  8538 ;;		_putchUART
  8539 ;; This function is called by:
  8540 ;;		_printf
  8541 ;;		_send_float
  8542 ;;		_send_int32
  8543 ;;		_send_int16
  8544 ;;		_send_float_vt
  8545 ;;		_send_int32_vt
  8546 ;;		_send_int16_vt
  8547 ;; This function uses a non-reentrant model
  8548 ;;
  8549                           
  8550                           	psect	text25
  8551  0072F2                     __ptext25:
  8552                           	opt stack 0
  8553  0072F2                     _putch:
  8554                           	opt stack 10
  8555                           
  8556                           ;incstack = 0
  8557                           ;putch@val stored from wreg
  8558  0072F2  0101               	movlb	1	; () banked
  8559  0072F4  6F0D               	movwf	putch@val& (0+255),b
  8560                           
  8561                           ;IOConfig.h: 65: lcd_putc(val);
  8562  0072F6  0101               	movlb	1	; () banked
  8563  0072F8  510D               	movf	putch@val& (0+255),w,b
  8564  0072FA  EC16  F033         	call	_lcd_putc
  8565                           
  8566                           ;IOConfig.h: 66: putchUART(val);
  8567  0072FE  0101               	movlb	1	; () banked
  8568  007300  510D               	movf	putch@val& (0+255),w,b
  8569  007302  ECA0  F039         	call	_putchUART
  8570  007306  0012               	return		;funcret
  8571  007308                     __end_of_putch:
  8572                           	opt stack 0
  8573                           tblptru	equ	0xFF8
  8574                           tblptrh	equ	0xFF7
  8575                           tblptrl	equ	0xFF6
  8576                           tablat	equ	0xFF5
  8577                           prodh	equ	0xFF4
  8578                           prodl	equ	0xFF3
  8579                           intcon	equ	0xFF2
  8580                           postinc0	equ	0xFEE
  8581                           wreg	equ	0xFE8
  8582                           postdec1	equ	0xFE5
  8583                           fsr1l	equ	0xFE1
  8584                           indf2	equ	0xFDF
  8585                           postinc2	equ	0xFDE
  8586                           postdec2	equ	0xFDD
  8587                           fsr2h	equ	0xFDA
  8588                           fsr2l	equ	0xFD9
  8589                           status	equ	0xFD8
  8590                           
  8591 ;; *************** function _putchUART *****************
  8592 ;; Defined at:
  8593 ;;		line 59 in file "source/IOConfig.h"
  8594 ;; Parameters:    Size  Location     Type
  8595 ;;  val             1    wreg     unsigned char 
  8596 ;; Auto vars:     Size  Location     Type
  8597 ;;  val             1    0[BANK1 ] unsigned char 
  8598 ;; Return value:  Size  Location     Type
  8599 ;;                  1    wreg      void 
  8600 ;; Registers used:
  8601 ;;		wreg
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8607 ;;      Params:         0       0       0       0       0       0       0
  8608 ;;      Locals:         0       0       1       0       0       0       0
  8609 ;;      Temps:          0       0       0       0       0       0       0
  8610 ;;      Totals:         0       0       1       0       0       0       0
  8611 ;;Total ram usage:        1 bytes
  8612 ;; Hardware stack levels used:    1
  8613 ;; Hardware stack levels required when called:   12
  8614 ;; This function calls:
  8615 ;;		Nothing
  8616 ;; This function is called by:
  8617 ;;		_putch
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           	psect	text26
  8622  007340                     __ptext26:
  8623                           	opt stack 0
  8624  007340                     _putchUART:
  8625                           	opt stack 14
  8626                           
  8627                           ;incstack = 0
  8628                           ;putchUART@val stored from wreg
  8629  007340  0101               	movlb	1	; () banked
  8630  007342  6F00               	movwf	putchUART@val& (0+255),b
  8631  007344                     l222:
  8632  007344  A2AC               	btfss	4012,1,c	;volatile
  8633  007346  D7FE               	goto	l222
  8634                           
  8635                           ;IOConfig.h: 61: TXREG1 = val;
  8636  007348  C100  FFAD         	movff	putchUART@val,4013	;volatile
  8637  00734C  0012               	return		;funcret
  8638  00734E                     __end_of_putchUART:
  8639                           	opt stack 0
  8640                           tblptru	equ	0xFF8
  8641                           tblptrh	equ	0xFF7
  8642                           tblptrl	equ	0xFF6
  8643                           tablat	equ	0xFF5
  8644                           prodh	equ	0xFF4
  8645                           prodl	equ	0xFF3
  8646                           intcon	equ	0xFF2
  8647                           postinc0	equ	0xFEE
  8648                           wreg	equ	0xFE8
  8649                           postdec1	equ	0xFE5
  8650                           fsr1l	equ	0xFE1
  8651                           indf2	equ	0xFDF
  8652                           postinc2	equ	0xFDE
  8653                           postdec2	equ	0xFDD
  8654                           fsr2h	equ	0xFDA
  8655                           fsr2l	equ	0xFD9
  8656                           status	equ	0xFD8
  8657                           
  8658 ;; *************** function _lcd_putc *****************
  8659 ;; Defined at:
  8660 ;;		line 212 in file "source/../../vclib_lcd.h"
  8661 ;; Parameters:    Size  Location     Type
  8662 ;;  cha             1    wreg     unsigned char 
  8663 ;; Auto vars:     Size  Location     Type
  8664 ;;  cha             1   12[BANK1 ] unsigned char 
  8665 ;; Return value:  Size  Location     Type
  8666 ;;                  1    wreg      void 
  8667 ;; Registers used:
  8668 ;;		wreg, status,2, status,0, cstack
  8669 ;; Tracked objects:
  8670 ;;		On entry : 0/0
  8671 ;;		On exit  : 0/0
  8672 ;;		Unchanged: 0/0
  8673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8674 ;;      Params:         0       0       0       0       0       0       0
  8675 ;;      Locals:         0       0       1       0       0       0       0
  8676 ;;      Temps:          0       0       1       0       0       0       0
  8677 ;;      Totals:         0       0       2       0       0       0       0
  8678 ;;Total ram usage:        2 bytes
  8679 ;; Hardware stack levels used:    1
  8680 ;; Hardware stack levels required when called:   16
  8681 ;; This function calls:
  8682 ;;		_lcd_gotoxy
  8683 ;;		_lcd_send_byte
  8684 ;; This function is called by:
  8685 ;;		_putch
  8686 ;;		_drawMenu
  8687 ;; This function uses a non-reentrant model
  8688 ;;
  8689                           
  8690                           	psect	text27
  8691  00662C                     __ptext27:
  8692                           	opt stack 0
  8693  00662C                     _lcd_putc:
  8694                           	opt stack 10
  8695                           
  8696                           ;incstack = 0
  8697                           ;lcd_putc@cha stored from wreg
  8698  00662C  0101               	movlb	1	; () banked
  8699  00662E  6F0C               	movwf	lcd_putc@cha& (0+255),b
  8700                           
  8701                           ;vclib_lcd.h: 213: switch (cha) {
  8702  006630  D02B               	goto	l9766
  8703  006632                     l9752:
  8704  006632  0E01               	movlw	1
  8705  006634  0101               	movlb	1	; () banked
  8706  006636  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  8707  006638  0E01               	movlw	1
  8708  00663A  EC29  F038         	call	_lcd_gotoxy
  8709                           
  8710                           ;vclib_lcd.h: 215: break;
  8711  00663E  0012               	return	
  8712  006640                     l9754:
  8713  006640  0E01               	movlw	1
  8714  006642  0101               	movlb	1	; () banked
  8715  006644  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8716  006646  0E00               	movlw	0
  8717  006648  EC81  F037         	call	_lcd_send_byte
  8718                           
  8719                           ;vclib_lcd.h: 218: _delay((unsigned long)((2)*(16000000/4000.0)));
  8720  00664C  0E0B               	movlw	11
  8721  00664E  0101               	movlb	1	; () banked
  8722  006650  6F0B               	movwf	??_lcd_putc& (0+255),b
  8723  006652  0E62               	movlw	98
  8724  006654                     u18027:
  8725  006654  2EE8               	decfsz	wreg,f,c
  8726  006656  D7FE               	bra	u18027
  8727  006658  2F0B               	decfsz	??_lcd_putc& (0+255),f,b
  8728  00665A  D7FC               	bra	u18027
  8729  00665C  F000               	nop	
  8730                           
  8731                           ;vclib_lcd.h: 223: break;
  8732  00665E  0012               	return	
  8733  006660                     l9758:
  8734  006660  0E02               	movlw	2
  8735  006662  0101               	movlb	1	; () banked
  8736  006664  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  8737  006666  0E01               	movlw	1
  8738  006668  EC29  F038         	call	_lcd_gotoxy
  8739                           
  8740                           ;vclib_lcd.h: 236: break;
  8741  00666C  0012               	return	
  8742  00666E                     l9760:
  8743  00666E  0E10               	movlw	16
  8744  006670  0101               	movlb	1	; () banked
  8745  006672  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8746  006674  0E00               	movlw	0
  8747  006676  EC81  F037         	call	_lcd_send_byte
  8748                           
  8749                           ;vclib_lcd.h: 240: break;
  8750  00667A  0012               	return	
  8751  00667C                     l9762:
  8752  00667C  C10C  F105         	movff	lcd_putc@cha,lcd_send_byte@n
  8753  006680  0E01               	movlw	1
  8754  006682  EC81  F037         	call	_lcd_send_byte
  8755                           
  8756                           ;vclib_lcd.h: 253: }
  8757                           
  8758                           ;vclib_lcd.h: 251: break;
  8759  006686  0012               	return	
  8760  006688                     l9766:
  8761  006688  0101               	movlb	1	; () banked
  8762  00668A  510C               	movf	lcd_putc@cha& (0+255),w,b
  8763                           
  8764                           ; Switch size 1, requested type "space"
  8765                           ; Number of cases is 4, Range of values is 7 to 12
  8766                           ; switch strategies available:
  8767                           ; Name         Instructions Cycles
  8768                           ; simple_byte           13     7 (average)
  8769                           ;	Chosen strategy is simple_byte
  8770  00668C  0A07               	xorlw	7	; case 7
  8771  00668E  B4D8               	btfsc	status,2,c
  8772  006690  D7D0               	goto	l9752
  8773  006692  0A0F               	xorlw	15	; case 8
  8774  006694  B4D8               	btfsc	status,2,c
  8775  006696  D7EB               	goto	l9760
  8776  006698  0A02               	xorlw	2	; case 10
  8777  00669A  B4D8               	btfsc	status,2,c
  8778  00669C  D7E1               	goto	l9758
  8779  00669E  0A06               	xorlw	6	; case 12
  8780  0066A0  B4D8               	btfsc	status,2,c
  8781  0066A2  D7CE               	goto	l9754
  8782  0066A4  D7EB               	goto	l9762
  8783  0066A6                     __end_of_lcd_putc:
  8784                           	opt stack 0
  8785                           tblptru	equ	0xFF8
  8786                           tblptrh	equ	0xFF7
  8787                           tblptrl	equ	0xFF6
  8788                           tablat	equ	0xFF5
  8789                           prodh	equ	0xFF4
  8790                           prodl	equ	0xFF3
  8791                           intcon	equ	0xFF2
  8792                           postinc0	equ	0xFEE
  8793                           wreg	equ	0xFE8
  8794                           postdec1	equ	0xFE5
  8795                           fsr1l	equ	0xFE1
  8796                           indf2	equ	0xFDF
  8797                           postinc2	equ	0xFDE
  8798                           postdec2	equ	0xFDD
  8799                           fsr2h	equ	0xFDA
  8800                           fsr2l	equ	0xFD9
  8801                           status	equ	0xFD8
  8802                           
  8803 ;; *************** function _lcd_gotoxy *****************
  8804 ;; Defined at:
  8805 ;;		line 198 in file "source/../../vclib_lcd.h"
  8806 ;; Parameters:    Size  Location     Type
  8807 ;;  pos             1    wreg     unsigned char 
  8808 ;;  fila            1    8[BANK1 ] unsigned char 
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;  pos             1    9[BANK1 ] unsigned char 
  8811 ;;  address         1   10[BANK1 ] unsigned char 
  8812 ;; Return value:  Size  Location     Type
  8813 ;;                  1    wreg      void 
  8814 ;; Registers used:
  8815 ;;		wreg, status,2, status,0, cstack
  8816 ;; Tracked objects:
  8817 ;;		On entry : 0/0
  8818 ;;		On exit  : 0/0
  8819 ;;		Unchanged: 0/0
  8820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8821 ;;      Params:         0       0       1       0       0       0       0
  8822 ;;      Locals:         0       0       2       0       0       0       0
  8823 ;;      Temps:          0       0       0       0       0       0       0
  8824 ;;      Totals:         0       0       3       0       0       0       0
  8825 ;;Total ram usage:        3 bytes
  8826 ;; Hardware stack levels used:    1
  8827 ;; Hardware stack levels required when called:   15
  8828 ;; This function calls:
  8829 ;;		_lcd_send_byte
  8830 ;; This function is called by:
  8831 ;;		_lcd_putc
  8832 ;;		_drawValEditor
  8833 ;;		_drawMenu
  8834 ;;		_drawChanVal
  8835 ;;		_drawPass1Lin
  8836 ;;		_drawAdvON
  8837 ;;		_drawSNquest
  8838 ;;		_drawAutoCalibRM
  8839 ;;		_drawCutError
  8840 ;;		_drawReady2Cut
  8841 ;;		_drawCalibProc
  8842 ;;		_lcd_getc
  8843 ;; This function uses a non-reentrant model
  8844 ;;
  8845                           
  8846                           	psect	text28
  8847  007052                     __ptext28:
  8848                           	opt stack 0
  8849  007052                     _lcd_gotoxy:
  8850                           	opt stack 10
  8851                           
  8852                           ;incstack = 0
  8853                           ;lcd_gotoxy@pos stored from wreg
  8854  007052  0101               	movlb	1	; () banked
  8855  007054  6F09               	movwf	lcd_gotoxy@pos& (0+255),b
  8856                           
  8857                           ;vclib_lcd.h: 199: unsigned char address;
  8858                           ;vclib_lcd.h: 200: if (fila != 1)
  8859  007056  0101               	movlb	1	; () banked
  8860  007058  0508               	decf	lcd_gotoxy@fila& (0+255),w,b
  8861  00705A  B4D8               	btfsc	status,2,c
  8862  00705C  D002               	goto	l9708
  8863                           
  8864                           ; BSR set to: 1
  8865                           ;vclib_lcd.h: 201: address = 0x40;
  8866  00705E  0E40               	movlw	64
  8867  007060  D001               	goto	L4
  8868  007062                     l9708:
  8869                           
  8870                           ; BSR set to: 1
  8871                           ;vclib_lcd.h: 202: else
  8872                           ;vclib_lcd.h: 203: address = 0;
  8873  007062  0E00               	movlw	0
  8874  007064                     L4:
  8875  007064  0101               	movlb	1	; () banked
  8876  007066  6F0A               	movwf	lcd_gotoxy@address& (0+255),b
  8877                           
  8878                           ; BSR set to: 1
  8879                           ;vclib_lcd.h: 204: address += pos - 1;
  8880                           
  8881                           ; BSR set to: 1
  8882  007068  0101               	movlb	1	; () banked
  8883  00706A  0509               	decf	lcd_gotoxy@pos& (0+255),w,b
  8884  00706C  0101               	movlb	1	; () banked
  8885  00706E  270A               	addwf	lcd_gotoxy@address& (0+255),f,b
  8886                           
  8887                           ; BSR set to: 1
  8888                           ;vclib_lcd.h: 205: lcd_send_byte(0, 0b10000000 | address);
  8889  007070  0101               	movlb	1	; () banked
  8890  007072  510A               	movf	lcd_gotoxy@address& (0+255),w,b
  8891  007074  0980               	iorlw	128
  8892  007076  0101               	movlb	1	; () banked
  8893  007078  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8894  00707A  0E00               	movlw	0
  8895  00707C  EC81  F037         	call	_lcd_send_byte
  8896  007080  0012               	return		;funcret
  8897  007082                     __end_of_lcd_gotoxy:
  8898                           	opt stack 0
  8899                           tblptru	equ	0xFF8
  8900                           tblptrh	equ	0xFF7
  8901                           tblptrl	equ	0xFF6
  8902                           tablat	equ	0xFF5
  8903                           prodh	equ	0xFF4
  8904                           prodl	equ	0xFF3
  8905                           intcon	equ	0xFF2
  8906                           postinc0	equ	0xFEE
  8907                           wreg	equ	0xFE8
  8908                           postdec1	equ	0xFE5
  8909                           fsr1l	equ	0xFE1
  8910                           indf2	equ	0xFDF
  8911                           postinc2	equ	0xFDE
  8912                           postdec2	equ	0xFDD
  8913                           fsr2h	equ	0xFDA
  8914                           fsr2l	equ	0xFD9
  8915                           status	equ	0xFD8
  8916                           
  8917 ;; *************** function _lcd_send_byte *****************
  8918 ;; Defined at:
  8919 ;;		line 163 in file "source/../../vclib_lcd.h"
  8920 ;; Parameters:    Size  Location     Type
  8921 ;;  address         1    wreg     unsigned char 
  8922 ;;  n               1    5[BANK1 ] unsigned char 
  8923 ;; Auto vars:     Size  Location     Type
  8924 ;;  address         1    7[BANK1 ] unsigned char 
  8925 ;; Return value:  Size  Location     Type
  8926 ;;                  1    wreg      void 
  8927 ;; Registers used:
  8928 ;;		wreg, status,2, status,0, cstack
  8929 ;; Tracked objects:
  8930 ;;		On entry : 0/0
  8931 ;;		On exit  : 0/0
  8932 ;;		Unchanged: 0/0
  8933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8934 ;;      Params:         0       0       1       0       0       0       0
  8935 ;;      Locals:         0       0       1       0       0       0       0
  8936 ;;      Temps:          0       0       1       0       0       0       0
  8937 ;;      Totals:         0       0       3       0       0       0       0
  8938 ;;Total ram usage:        3 bytes
  8939 ;; Hardware stack levels used:    1
  8940 ;; Hardware stack levels required when called:   14
  8941 ;; This function calls:
  8942 ;;		_lcd_read_byte
  8943 ;;		_lcd_send_4bits
  8944 ;; This function is called by:
  8945 ;;		_lcd_init
  8946 ;;		_lcd_gotoxy
  8947 ;;		_lcd_putc
  8948 ;;		_lcd_set_cgram_char
  8949 ;;		_lcd_cursor_en
  8950 ;;		_lcd_clear
  8951 ;;		_lcd_shift_right
  8952 ;;		_lcd_shift_left
  8953 ;; This function uses a non-reentrant model
  8954 ;;
  8955                           
  8956                           	psect	text29
  8957  006F02                     __ptext29:
  8958                           	opt stack 0
  8959  006F02                     _lcd_send_byte:
  8960                           	opt stack 15
  8961                           
  8962                           ;incstack = 0
  8963                           ;lcd_send_byte@address stored from wreg
  8964  006F02  0101               	movlb	1	; () banked
  8965  006F04  6F07               	movwf	lcd_send_byte@address& (0+255),b
  8966                           
  8967                           ;vclib_lcd.h: 164: PORTBbits.RB1 = 0;
  8968  006F06  9281               	bcf	3969,1,c	;volatile
  8969  006F08                     l9700:
  8970  006F08  EC3B  F037         	call	_lcd_read_byte	;wreg free
  8971  006F0C  0101               	movlb	1	; () banked
  8972  006F0E  6F06               	movwf	??_lcd_send_byte& (0+255),b
  8973  006F10  0101               	movlb	1	; () banked
  8974  006F12  BF06               	btfsc	??_lcd_send_byte& (0+255),7,b
  8975  006F14  D7F9               	goto	l9700
  8976                           
  8977                           ; BSR set to: 1
  8978                           ;vclib_lcd.h: 166: PORTBbits.RB1 = address;
  8979  006F16  0101               	movlb	1	; () banked
  8980  006F18  B107               	btfsc	lcd_send_byte@address& (0+255),0,b
  8981  006F1A  D002               	bra	u14185
  8982  006F1C  9281               	bcf	3969,1,c	;volatile
  8983  006F1E  D001               	bra	u14186
  8984  006F20                     u14185:
  8985  006F20  8281               	bsf	3969,1,c	;volatile
  8986  006F22                     u14186:
  8987                           
  8988                           ;vclib_lcd.h: 167: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8989  006F22  D000               	nop2		;2 cycle nop
  8990  006F24  D000               	nop2		;2 cycle nop
  8991                           
  8992                           ;vclib_lcd.h: 168: PORTBbits.RB2 = 0;
  8993  006F26  9481               	bcf	3969,2,c	;volatile
  8994                           
  8995                           ;vclib_lcd.h: 169: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8996  006F28  D000               	nop2		;2 cycle nop
  8997  006F2A  D000               	nop2		;2 cycle nop
  8998                           
  8999                           ;vclib_lcd.h: 170: PORTBbits.RB3 = 0;
  9000  006F2C  9681               	bcf	3969,3,c	;volatile
  9001                           
  9002                           ;vclib_lcd.h: 171: lcd_send_4bits(n >> 4);
  9003  006F2E  0101               	movlb	1	; () banked
  9004  006F30  3905               	swapf	lcd_send_byte@n& (0+255),w,b
  9005  006F32  0B0F               	andlw	15
  9006  006F34  EC3B  F031         	call	_lcd_send_4bits
  9007                           
  9008                           ;vclib_lcd.h: 172: lcd_send_4bits(n & 0b00001111 );
  9009  006F38  0101               	movlb	1	; () banked
  9010  006F3A  5105               	movf	lcd_send_byte@n& (0+255),w,b
  9011  006F3C  0B0F               	andlw	15
  9012  006F3E  EC3B  F031         	call	_lcd_send_4bits
  9013  006F42  0012               	return		;funcret
  9014  006F44                     __end_of_lcd_send_byte:
  9015                           	opt stack 0
  9016                           tblptru	equ	0xFF8
  9017                           tblptrh	equ	0xFF7
  9018                           tblptrl	equ	0xFF6
  9019                           tablat	equ	0xFF5
  9020                           prodh	equ	0xFF4
  9021                           prodl	equ	0xFF3
  9022                           intcon	equ	0xFF2
  9023                           postinc0	equ	0xFEE
  9024                           wreg	equ	0xFE8
  9025                           postdec1	equ	0xFE5
  9026                           fsr1l	equ	0xFE1
  9027                           indf2	equ	0xFDF
  9028                           postinc2	equ	0xFDE
  9029                           postdec2	equ	0xFDD
  9030                           fsr2h	equ	0xFDA
  9031                           fsr2l	equ	0xFD9
  9032                           status	equ	0xFD8
  9033                           
  9034 ;; *************** function _lcd_send_4bits *****************
  9035 ;; Defined at:
  9036 ;;		line 151 in file "source/../../vclib_lcd.h"
  9037 ;; Parameters:    Size  Location     Type
  9038 ;;  n               1    wreg     unsigned char 
  9039 ;; Auto vars:     Size  Location     Type
  9040 ;;  n               1    4[BANK1 ] unsigned char 
  9041 ;; Return value:  Size  Location     Type
  9042 ;;                  1    wreg      void 
  9043 ;; Registers used:
  9044 ;;		wreg, status,2
  9045 ;; Tracked objects:
  9046 ;;		On entry : 0/0
  9047 ;;		On exit  : 0/0
  9048 ;;		Unchanged: 0/0
  9049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9050 ;;      Params:         0       0       0       0       0       0       0
  9051 ;;      Locals:         0       0       5       0       0       0       0
  9052 ;;      Temps:          0       0       0       0       0       0       0
  9053 ;;      Totals:         0       0       5       0       0       0       0
  9054 ;;Total ram usage:        5 bytes
  9055 ;; Hardware stack levels used:    1
  9056 ;; Hardware stack levels required when called:   12
  9057 ;; This function calls:
  9058 ;;		Nothing
  9059 ;; This function is called by:
  9060 ;;		_lcd_send_byte
  9061 ;;		_lcd_init
  9062 ;; This function uses a non-reentrant model
  9063 ;;
  9064                           
  9065                           	psect	text30
  9066  006276                     __ptext30:
  9067                           	opt stack 0
  9068  006276                     _lcd_send_4bits:
  9069                           	opt stack 16
  9070                           
  9071                           ;incstack = 0
  9072                           ;lcd_send_4bits@n stored from wreg
  9073  006276  0101               	movlb	1	; () banked
  9074  006278  6F04               	movwf	lcd_send_4bits@n& (0+255),b
  9075                           
  9076                           ;vclib_lcd.h: 153: PORTBbits.RB4 = 0 || n & 1;
  9077  00627A  0E01               	movlw	1
  9078  00627C  0101               	movlb	1	; () banked
  9079  00627E  6F00               	movwf	_lcd_send_4bits$1496& (0+255),b
  9080                           
  9081                           ; BSR set to: 1
  9082  006280  0101               	movlb	1	; () banked
  9083  006282  B104               	btfsc	lcd_send_4bits@n& (0+255),0,b
  9084  006284  D003               	goto	l9670
  9085                           
  9086                           ; BSR set to: 1
  9087  006286  0E00               	movlw	0
  9088  006288  0101               	movlb	1	; () banked
  9089  00628A  6F00               	movwf	_lcd_send_4bits$1496& (0+255),b
  9090  00628C                     l9670:
  9091                           
  9092                           ; BSR set to: 1
  9093  00628C  0101               	movlb	1	; () banked
  9094  00628E  B100               	btfsc	_lcd_send_4bits$1496& (0+255),0,b
  9095  006290  D002               	bra	u14105
  9096  006292  9881               	bcf	3969,4,c	;volatile
  9097  006294  D001               	bra	u14106
  9098  006296                     u14105:
  9099  006296  8881               	bsf	3969,4,c	;volatile
  9100  006298                     u14106:
  9101                           
  9102                           ;vclib_lcd.h: 154: PORTBbits.RB5 = 0 || n & 2;
  9103  006298  0E01               	movlw	1
  9104  00629A  0101               	movlb	1	; () banked
  9105  00629C  6F01               	movwf	_lcd_send_4bits$1497& (0+255),b
  9106                           
  9107                           ; BSR set to: 1
  9108  00629E  0101               	movlb	1	; () banked
  9109  0062A0  B304               	btfsc	lcd_send_4bits@n& (0+255),1,b
  9110  0062A2  D003               	goto	l9676
  9111                           
  9112                           ; BSR set to: 1
  9113  0062A4  0E00               	movlw	0
  9114  0062A6  0101               	movlb	1	; () banked
  9115  0062A8  6F01               	movwf	_lcd_send_4bits$1497& (0+255),b
  9116  0062AA                     l9676:
  9117                           
  9118                           ; BSR set to: 1
  9119  0062AA  0101               	movlb	1	; () banked
  9120  0062AC  B101               	btfsc	_lcd_send_4bits$1497& (0+255),0,b
  9121  0062AE  D002               	bra	u14125
  9122  0062B0  9A81               	bcf	3969,5,c	;volatile
  9123  0062B2  D001               	bra	u14126
  9124  0062B4                     u14125:
  9125  0062B4  8A81               	bsf	3969,5,c	;volatile
  9126  0062B6                     u14126:
  9127                           
  9128                           ;vclib_lcd.h: 155: PORTBbits.RB6 = 0 || n & 4;
  9129  0062B6  0E01               	movlw	1
  9130  0062B8  0101               	movlb	1	; () banked
  9131  0062BA  6F02               	movwf	_lcd_send_4bits$1498& (0+255),b
  9132                           
  9133                           ; BSR set to: 1
  9134  0062BC  0101               	movlb	1	; () banked
  9135  0062BE  B504               	btfsc	lcd_send_4bits@n& (0+255),2,b
  9136  0062C0  D003               	goto	l9682
  9137                           
  9138                           ; BSR set to: 1
  9139  0062C2  0E00               	movlw	0
  9140  0062C4  0101               	movlb	1	; () banked
  9141  0062C6  6F02               	movwf	_lcd_send_4bits$1498& (0+255),b
  9142  0062C8                     l9682:
  9143                           
  9144                           ; BSR set to: 1
  9145  0062C8  0101               	movlb	1	; () banked
  9146  0062CA  B102               	btfsc	_lcd_send_4bits$1498& (0+255),0,b
  9147  0062CC  D002               	bra	u14145
  9148  0062CE  9C81               	bcf	3969,6,c	;volatile
  9149  0062D0  D001               	bra	u14146
  9150  0062D2                     u14145:
  9151  0062D2  8C81               	bsf	3969,6,c	;volatile
  9152  0062D4                     u14146:
  9153                           
  9154                           ;vclib_lcd.h: 156: PORTBbits.RB7 = 0 || n & 8;
  9155  0062D4  0E01               	movlw	1
  9156  0062D6  0101               	movlb	1	; () banked
  9157  0062D8  6F03               	movwf	_lcd_send_4bits$1499& (0+255),b
  9158                           
  9159                           ; BSR set to: 1
  9160  0062DA  0101               	movlb	1	; () banked
  9161  0062DC  B704               	btfsc	lcd_send_4bits@n& (0+255),3,b
  9162  0062DE  D003               	goto	l9688
  9163                           
  9164                           ; BSR set to: 1
  9165  0062E0  0E00               	movlw	0
  9166  0062E2  0101               	movlb	1	; () banked
  9167  0062E4  6F03               	movwf	_lcd_send_4bits$1499& (0+255),b
  9168  0062E6                     l9688:
  9169                           
  9170                           ; BSR set to: 1
  9171  0062E6  0101               	movlb	1	; () banked
  9172  0062E8  B103               	btfsc	_lcd_send_4bits$1499& (0+255),0,b
  9173  0062EA  D002               	bra	u14165
  9174  0062EC  9E81               	bcf	3969,7,c	;volatile
  9175  0062EE  D001               	bra	u14166
  9176  0062F0                     u14165:
  9177  0062F0  8E81               	bsf	3969,7,c	;volatile
  9178  0062F2                     u14166:
  9179                           
  9180                           ;vclib_lcd.h: 157: _delay((unsigned long)((1)*(16000000/4000000.0)));
  9181  0062F2  D000               	nop2		;2 cycle nop
  9182  0062F4  D000               	nop2		;2 cycle nop
  9183                           
  9184                           ;vclib_lcd.h: 158: PORTBbits.RB3 = 1;
  9185  0062F6  8681               	bsf	3969,3,c	;volatile
  9186                           
  9187                           ;vclib_lcd.h: 159: _delay((unsigned long)((2)*(16000000/4000000.0)));
  9188  0062F8  D000               	nop2		;2 cycle nop
  9189  0062FA  D000               	nop2		;2 cycle nop
  9190  0062FC  D000               	nop2		;2 cycle nop
  9191  0062FE  D000               	nop2		;2 cycle nop
  9192                           
  9193                           ;vclib_lcd.h: 160: PORTBbits.RB3 = 0;
  9194  006300  9681               	bcf	3969,3,c	;volatile
  9195  006302  0012               	return		;funcret
  9196  006304                     __end_of_lcd_send_4bits:
  9197                           	opt stack 0
  9198                           tblptru	equ	0xFF8
  9199                           tblptrh	equ	0xFF7
  9200                           tblptrl	equ	0xFF6
  9201                           tablat	equ	0xFF5
  9202                           prodh	equ	0xFF4
  9203                           prodl	equ	0xFF3
  9204                           intcon	equ	0xFF2
  9205                           postinc0	equ	0xFEE
  9206                           wreg	equ	0xFE8
  9207                           postdec1	equ	0xFE5
  9208                           fsr1l	equ	0xFE1
  9209                           indf2	equ	0xFDF
  9210                           postinc2	equ	0xFDE
  9211                           postdec2	equ	0xFDD
  9212                           fsr2h	equ	0xFDA
  9213                           fsr2l	equ	0xFD9
  9214                           status	equ	0xFD8
  9215                           
  9216 ;; *************** function _lcd_read_byte *****************
  9217 ;; Defined at:
  9218 ;;		line 127 in file "source/../../vclib_lcd.h"
  9219 ;; Parameters:    Size  Location     Type
  9220 ;;		None
  9221 ;; Auto vars:     Size  Location     Type
  9222 ;;  high            1    3[BANK1 ] unsigned char 
  9223 ;;  low             1    2[BANK1 ] unsigned char 
  9224 ;; Return value:  Size  Location     Type
  9225 ;;                  1    wreg      unsigned char 
  9226 ;; Registers used:
  9227 ;;		wreg, status,2, status,0, cstack
  9228 ;; Tracked objects:
  9229 ;;		On entry : 0/0
  9230 ;;		On exit  : 0/0
  9231 ;;		Unchanged: 0/0
  9232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9233 ;;      Params:         0       0       0       0       0       0       0
  9234 ;;      Locals:         0       0       2       0       0       0       0
  9235 ;;      Temps:          0       0       0       0       0       0       0
  9236 ;;      Totals:         0       0       2       0       0       0       0
  9237 ;;Total ram usage:        2 bytes
  9238 ;; Hardware stack levels used:    1
  9239 ;; Hardware stack levels required when called:   13
  9240 ;; This function calls:
  9241 ;;		_lcd_read_4bits
  9242 ;; This function is called by:
  9243 ;;		_lcd_send_byte
  9244 ;;		_lcd_getc
  9245 ;; This function uses a non-reentrant model
  9246 ;;
  9247                           
  9248                           	psect	text31
  9249  006E76                     __ptext31:
  9250                           	opt stack 0
  9251  006E76                     _lcd_read_byte:
  9252                           	opt stack 15
  9253                           
  9254                           ;vclib_lcd.h: 128: unsigned char low, high;
  9255                           ;vclib_lcd.h: 129: TRISBbits.TRISB4 = 1;
  9256                           
  9257                           ;incstack = 0
  9258  006E76  8893               	bsf	3987,4,c	;volatile
  9259                           
  9260                           ;vclib_lcd.h: 130: TRISBbits.TRISB5 = 1;
  9261  006E78  8A93               	bsf	3987,5,c	;volatile
  9262                           
  9263                           ;vclib_lcd.h: 131: TRISBbits.TRISB6 = 1;
  9264  006E7A  8C93               	bsf	3987,6,c	;volatile
  9265                           
  9266                           ;vclib_lcd.h: 132: TRISBbits.TRISB7 = 1;
  9267  006E7C  8E93               	bsf	3987,7,c	;volatile
  9268                           
  9269                           ;vclib_lcd.h: 133: PORTBbits.RB2 = 1;
  9270  006E7E  8481               	bsf	3969,2,c	;volatile
  9271                           
  9272                           ;vclib_lcd.h: 134: _delay((unsigned long)((1)*(16000000/4000000.0)));
  9273  006E80  D000               	nop2		;2 cycle nop
  9274  006E82  D000               	nop2		;2 cycle nop
  9275                           
  9276                           ;vclib_lcd.h: 135: PORTBbits.RB3 = 1;
  9277  006E84  8681               	bsf	3969,3,c	;volatile
  9278                           
  9279                           ;vclib_lcd.h: 136: _delay((unsigned long)((1)*(16000000/4000000.0)));
  9280  006E86  D000               	nop2		;2 cycle nop
  9281  006E88  D000               	nop2		;2 cycle nop
  9282                           
  9283                           ;vclib_lcd.h: 137: high = lcd_read_4bits();
  9284  006E8A  EC53  F033         	call	_lcd_read_4bits	;wreg free
  9285  006E8E  0101               	movlb	1	; () banked
  9286  006E90  6F03               	movwf	lcd_read_byte@high& (0+255),b
  9287                           
  9288                           ; BSR set to: 1
  9289                           ;vclib_lcd.h: 138: PORTBbits.RB3 = 0;
  9290  006E92  9681               	bcf	3969,3,c	;volatile
  9291                           
  9292                           ; BSR set to: 1
  9293                           ;vclib_lcd.h: 139: _delay((unsigned long)((1)*(16000000/4000000.0)));
  9294  006E94  D000               	nop2		;2 cycle nop
  9295  006E96  D000               	nop2		;2 cycle nop
  9296                           
  9297                           ;vclib_lcd.h: 140: PORTBbits.RB3 = 1;
  9298  006E98  8681               	bsf	3969,3,c	;volatile
  9299                           
  9300                           ;vclib_lcd.h: 141: _delay((unsigned long)((1)*(16000000/4000000.0)));
  9301  006E9A  D000               	nop2		;2 cycle nop
  9302  006E9C  D000               	nop2		;2 cycle nop
  9303                           
  9304                           ;vclib_lcd.h: 142: low = lcd_read_4bits();
  9305  006E9E  EC53  F033         	call	_lcd_read_4bits	;wreg free
  9306  006EA2  0101               	movlb	1	; () banked
  9307  006EA4  6F02               	movwf	lcd_read_byte@low& (0+255),b
  9308                           
  9309                           ; BSR set to: 1
  9310                           ;vclib_lcd.h: 143: PORTBbits.RB3 = 0;
  9311  006EA6  9681               	bcf	3969,3,c	;volatile
  9312                           
  9313                           ; BSR set to: 1
  9314                           ;vclib_lcd.h: 144: TRISBbits.TRISB4 = 0;
  9315  006EA8  9893               	bcf	3987,4,c	;volatile
  9316                           
  9317                           ; BSR set to: 1
  9318                           ;vclib_lcd.h: 145: TRISBbits.TRISB5 = 0;
  9319  006EAA  9A93               	bcf	3987,5,c	;volatile
  9320                           
  9321                           ; BSR set to: 1
  9322                           ;vclib_lcd.h: 146: TRISBbits.TRISB6 = 0;
  9323  006EAC  9C93               	bcf	3987,6,c	;volatile
  9324                           
  9325                           ; BSR set to: 1
  9326                           ;vclib_lcd.h: 147: TRISBbits.TRISB7 = 0;
  9327  006EAE  9E93               	bcf	3987,7,c	;volatile
  9328                           
  9329                           ; BSR set to: 1
  9330                           ;vclib_lcd.h: 148: return ( (high << 4) | low);
  9331  006EB0  0101               	movlb	1	; () banked
  9332  006EB2  3903               	swapf	lcd_read_byte@high& (0+255),w,b
  9333  006EB4  0BF0               	andlw	240
  9334  006EB6  0101               	movlb	1	; () banked
  9335  006EB8  1102               	iorwf	lcd_read_byte@low& (0+255),w,b
  9336  006EBA  0012               	return	
  9337  006EBC                     __end_of_lcd_read_byte:
  9338                           	opt stack 0
  9339                           tblptru	equ	0xFF8
  9340                           tblptrh	equ	0xFF7
  9341                           tblptrl	equ	0xFF6
  9342                           tablat	equ	0xFF5
  9343                           prodh	equ	0xFF4
  9344                           prodl	equ	0xFF3
  9345                           intcon	equ	0xFF2
  9346                           postinc0	equ	0xFEE
  9347                           wreg	equ	0xFE8
  9348                           postdec1	equ	0xFE5
  9349                           fsr1l	equ	0xFE1
  9350                           indf2	equ	0xFDF
  9351                           postinc2	equ	0xFDE
  9352                           postdec2	equ	0xFDD
  9353                           fsr2h	equ	0xFDA
  9354                           fsr2l	equ	0xFD9
  9355                           status	equ	0xFD8
  9356                           
  9357 ;; *************** function _lcd_read_4bits *****************
  9358 ;; Defined at:
  9359 ;;		line 117 in file "source/../../vclib_lcd.h"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;		None
  9362 ;; Auto vars:     Size  Location     Type
  9363 ;;  n               1    1[BANK1 ] unsigned char 
  9364 ;; Return value:  Size  Location     Type
  9365 ;;                  1    wreg      unsigned char 
  9366 ;; Registers used:
  9367 ;;		wreg, status,2, status,0
  9368 ;; Tracked objects:
  9369 ;;		On entry : 0/0
  9370 ;;		On exit  : 0/0
  9371 ;;		Unchanged: 0/0
  9372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9373 ;;      Params:         0       0       0       0       0       0       0
  9374 ;;      Locals:         0       0       1       0       0       0       0
  9375 ;;      Temps:          0       0       1       0       0       0       0
  9376 ;;      Totals:         0       0       2       0       0       0       0
  9377 ;;Total ram usage:        2 bytes
  9378 ;; Hardware stack levels used:    1
  9379 ;; Hardware stack levels required when called:   12
  9380 ;; This function calls:
  9381 ;;		Nothing
  9382 ;; This function is called by:
  9383 ;;		_lcd_read_byte
  9384 ;; This function uses a non-reentrant model
  9385 ;;
  9386                           
  9387                           	psect	text32
  9388  0066A6                     __ptext32:
  9389                           	opt stack 0
  9390  0066A6                     _lcd_read_4bits:
  9391                           	opt stack 15
  9392                           
  9393                           ;vclib_lcd.h: 118: unsigned char n = 0x00;
  9394                           
  9395                           ; BSR set to: 1
  9396                           ;incstack = 0
  9397  0066A6  0E00               	movlw	0
  9398  0066A8  0101               	movlb	1	; () banked
  9399  0066AA  6F01               	movwf	lcd_read_4bits@n& (0+255),b
  9400                           
  9401                           ; BSR set to: 1
  9402                           ;vclib_lcd.h: 120: n |= PORTBbits.RB4;
  9403  0066AC  A881               	btfss	3969,4,c	;volatile
  9404  0066AE  D002               	goto	u14050
  9405  0066B0  0E01               	movlw	1
  9406  0066B2  D001               	goto	u14056
  9407  0066B4                     u14050:
  9408  0066B4  0E00               	movlw	0
  9409  0066B6                     u14056:
  9410  0066B6  0101               	movlb	1	; () banked
  9411  0066B8  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9412                           
  9413                           ; BSR set to: 1
  9414                           ;vclib_lcd.h: 121: n |= PORTBbits.RB5 << 1;
  9415  0066BA  AA81               	btfss	3969,5,c	;volatile
  9416  0066BC  D004               	goto	u14060
  9417  0066BE  0101               	movlb	1	; () banked
  9418  0066C0  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9419  0066C2  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  9420  0066C4  D002               	goto	u14068
  9421  0066C6                     u14060:
  9422  0066C6  0101               	movlb	1	; () banked
  9423  0066C8  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9424  0066CA                     u14068:
  9425  0066CA  0101               	movlb	1	; () banked
  9426  0066CC  90D8               	bcf	status,0,c
  9427  0066CE  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9428  0066D0  0101               	movlb	1	; () banked
  9429  0066D2  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9430                           
  9431                           ; BSR set to: 1
  9432                           ;vclib_lcd.h: 122: n |= PORTBbits.RB6 << 2;
  9433  0066D4  AC81               	btfss	3969,6,c	;volatile
  9434  0066D6  D004               	goto	u14070
  9435  0066D8  0101               	movlb	1	; () banked
  9436  0066DA  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9437  0066DC  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  9438  0066DE  D002               	goto	u14078
  9439  0066E0                     u14070:
  9440  0066E0  0101               	movlb	1	; () banked
  9441  0066E2  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9442  0066E4                     u14078:
  9443  0066E4  0101               	movlb	1	; () banked
  9444  0066E6  90D8               	bcf	status,0,c
  9445  0066E8  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9446  0066EA  0101               	movlb	1	; () banked
  9447  0066EC  90D8               	bcf	status,0,c
  9448  0066EE  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9449  0066F0  0101               	movlb	1	; () banked
  9450  0066F2  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9451                           
  9452                           ; BSR set to: 1
  9453                           ;vclib_lcd.h: 123: n |= PORTBbits.RB7 << 3;
  9454  0066F4  AE81               	btfss	3969,7,c	;volatile
  9455  0066F6  D004               	goto	u14080
  9456  0066F8  0101               	movlb	1	; () banked
  9457  0066FA  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9458  0066FC  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  9459  0066FE  D002               	goto	u14088
  9460  006700                     u14080:
  9461  006700  0101               	movlb	1	; () banked
  9462  006702  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9463  006704                     u14088:
  9464  006704  0101               	movlb	1	; () banked
  9465  006706  90D8               	bcf	status,0,c
  9466  006708  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9467  00670A  0101               	movlb	1	; () banked
  9468  00670C  90D8               	bcf	status,0,c
  9469  00670E  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9470  006710  0101               	movlb	1	; () banked
  9471  006712  90D8               	bcf	status,0,c
  9472  006714  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9473  006716  0101               	movlb	1	; () banked
  9474  006718  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9475                           
  9476                           ;vclib_lcd.h: 124: return (n);
  9477  00671A  0101               	movlb	1	; () banked
  9478  00671C  5101               	movf	lcd_read_4bits@n& (0+255),w,b
  9479  00671E  0012               	return	
  9480  006720                     __end_of_lcd_read_4bits:
  9481                           	opt stack 0
  9482                           tblptru	equ	0xFF8
  9483                           tblptrh	equ	0xFF7
  9484                           tblptrl	equ	0xFF6
  9485                           tablat	equ	0xFF5
  9486                           prodh	equ	0xFF4
  9487                           prodl	equ	0xFF3
  9488                           intcon	equ	0xFF2
  9489                           postinc0	equ	0xFEE
  9490                           wreg	equ	0xFE8
  9491                           postdec1	equ	0xFE5
  9492                           fsr1l	equ	0xFE1
  9493                           indf2	equ	0xFDF
  9494                           postinc2	equ	0xFDE
  9495                           postdec2	equ	0xFDD
  9496                           fsr2h	equ	0xFDA
  9497                           fsr2l	equ	0xFD9
  9498                           status	equ	0xFD8
  9499                           
  9500 ;; *************** function _isdigit *****************
  9501 ;; Defined at:
  9502 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  9503 ;; Parameters:    Size  Location     Type
  9504 ;;  c               1    wreg     unsigned char 
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;  c               1    2[BANK1 ] unsigned char 
  9507 ;; Return value:  Size  Location     Type
  9508 ;;		None               void
  9509 ;; Registers used:
  9510 ;;		wreg, status,2, status,0
  9511 ;; Tracked objects:
  9512 ;;		On entry : 0/0
  9513 ;;		On exit  : 0/0
  9514 ;;		Unchanged: 0/0
  9515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9516 ;;      Params:         0       0       0       0       0       0       0
  9517 ;;      Locals:         0       0       2       0       0       0       0
  9518 ;;      Temps:          0       0       1       0       0       0       0
  9519 ;;      Totals:         0       0       3       0       0       0       0
  9520 ;;Total ram usage:        3 bytes
  9521 ;; Hardware stack levels used:    1
  9522 ;; Hardware stack levels required when called:   12
  9523 ;; This function calls:
  9524 ;;		Nothing
  9525 ;; This function is called by:
  9526 ;;		_printf
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           	psect	text33
  9531  007192                     __ptext33:
  9532                           	opt stack 0
  9533  007192                     _isdigit:
  9534                           	opt stack 15
  9535                           
  9536                           ; BSR set to: 1
  9537                           ;incstack = 0
  9538                           ;isdigit@c stored from wreg
  9539  007192  0101               	movlb	1	; () banked
  9540  007194  6F02               	movwf	isdigit@c& (0+255),b
  9541  007196  0E00               	movlw	0
  9542  007198  0101               	movlb	1	; () banked
  9543  00719A  6F01               	movwf	_isdigit$2320& (0+255),b
  9544                           
  9545                           ; BSR set to: 1
  9546  00719C  0E3A               	movlw	58
  9547  00719E  0101               	movlb	1	; () banked
  9548  0071A0  6102               	cpfslt	isdigit@c& (0+255),b
  9549  0071A2  D007               	goto	l10110
  9550                           
  9551                           ; BSR set to: 1
  9552  0071A4  0E2F               	movlw	47
  9553  0071A6  0101               	movlb	1	; () banked
  9554  0071A8  6502               	cpfsgt	isdigit@c& (0+255),b
  9555  0071AA  D003               	goto	l10110
  9556                           
  9557                           ; BSR set to: 1
  9558  0071AC  0E01               	movlw	1
  9559  0071AE  0101               	movlb	1	; () banked
  9560  0071B0  6F01               	movwf	_isdigit$2320& (0+255),b
  9561  0071B2                     l10110:
  9562                           
  9563                           ; BSR set to: 1
  9564  0071B2  C101  F100         	movff	_isdigit$2320,??_isdigit
  9565  0071B6  0101               	movlb	1	; () banked
  9566  0071B8  3100               	rrcf	??_isdigit& (0+255),w,b
  9567  0071BA  0012               	return	
  9568  0071BC                     __end_of_isdigit:
  9569                           	opt stack 0
  9570                           tblptru	equ	0xFF8
  9571                           tblptrh	equ	0xFF7
  9572                           tblptrl	equ	0xFF6
  9573                           tablat	equ	0xFF5
  9574                           prodh	equ	0xFF4
  9575                           prodl	equ	0xFF3
  9576                           intcon	equ	0xFF2
  9577                           postinc0	equ	0xFEE
  9578                           wreg	equ	0xFE8
  9579                           postdec1	equ	0xFE5
  9580                           fsr1l	equ	0xFE1
  9581                           indf2	equ	0xFDF
  9582                           postinc2	equ	0xFDE
  9583                           postdec2	equ	0xFDD
  9584                           fsr2h	equ	0xFDA
  9585                           fsr2l	equ	0xFD9
  9586                           status	equ	0xFD8
  9587                           
  9588 ;; *************** function _fround *****************
  9589 ;; Defined at:
  9590 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;  prec            1    wreg     unsigned char 
  9593 ;; Auto vars:     Size  Location     Type
  9594 ;;  prec            1   44[BANK1 ] unsigned char 
  9595 ;; Return value:  Size  Location     Type
  9596 ;;                  3   35[BANK1 ] unsigned char 
  9597 ;; Registers used:
  9598 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9599 ;; Tracked objects:
  9600 ;;		On entry : 0/0
  9601 ;;		On exit  : 0/0
  9602 ;;		Unchanged: 0/0
  9603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9604 ;;      Params:         0       0       3       0       0       0       0
  9605 ;;      Locals:         0       0       7       0       0       0       0
  9606 ;;      Temps:          0       0       0       0       0       0       0
  9607 ;;      Totals:         0       0      10       0       0       0       0
  9608 ;;Total ram usage:       10 bytes
  9609 ;; Hardware stack levels used:    1
  9610 ;; Hardware stack levels required when called:   14
  9611 ;; This function calls:
  9612 ;;		___awdiv
  9613 ;;		___awmod
  9614 ;;		___ftmul
  9615 ;;		___wmul
  9616 ;; This function is called by:
  9617 ;;		_printf
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621                           	psect	text34
  9622  00252C                     __ptext34:
  9623                           	opt stack 0
  9624  00252C                     _fround:
  9625                           	opt stack 13
  9626                           
  9627                           ; BSR set to: 1
  9628                           ;incstack = 0
  9629                           ;fround@prec stored from wreg
  9630  00252C  0101               	movlb	1	; () banked
  9631  00252E  6F2C               	movwf	fround@prec& (0+255),b
  9632                           
  9633                           ;doprnt.c: 413: if(prec>=110)
  9634  002530  0E6D               	movlw	109
  9635  002532  0101               	movlb	1	; () banked
  9636  002534  652C               	cpfsgt	fround@prec& (0+255),b
  9637  002536  D0BA               	goto	l10052
  9638                           
  9639                           ; BSR set to: 1
  9640                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9641  002538  0E00               	movlw	0
  9642  00253A  0101               	movlb	1	; () banked
  9643  00253C  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9644  00253E  0E03               	movlw	3
  9645  002540  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9646  002542  0E00               	movlw	0
  9647  002544  0101               	movlb	1	; () banked
  9648  002546  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9649  002548  0E0A               	movlw	10
  9650  00254A  6F08               	movwf	___awdiv@divisor& (0+255),b
  9651  00254C  0E00               	movlw	0
  9652  00254E  0101               	movlb	1	; () banked
  9653  002550  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9654  002552  0E64               	movlw	100
  9655  002554  6F02               	movwf	___awmod@divisor& (0+255),b
  9656  002556  C12C  F100         	movff	fround@prec,___awmod@dividend
  9657  00255A  0101               	movlb	1	; () banked
  9658  00255C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9659  00255E  ECF8  F02D         	call	___awmod	;wreg free
  9660  002562  C100  F106         	movff	?___awmod,___awdiv@dividend
  9661  002566  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  9662  00256A  EC28  F02C         	call	___awdiv	;wreg free
  9663  00256E  0E09               	movlw	9
  9664  002570  0101               	movlb	1	; () banked
  9665  002572  2506               	addwf	?___awdiv& (0+255),w,b
  9666  002574  0101               	movlb	1	; () banked
  9667  002576  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9668  002578  0E00               	movlw	0
  9669  00257A  0101               	movlb	1	; () banked
  9670  00257C  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9671  00257E  0101               	movlb	1	; () banked
  9672  002580  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9673  002582  ECDC  F037         	call	___wmul	;wreg free
  9674  002586  0E24               	movlw	low __npowers_
  9675  002588  0101               	movlb	1	; () banked
  9676  00258A  250E               	addwf	?___wmul& (0+255),w,b
  9677  00258C  6EF6               	movwf	tblptrl,c
  9678  00258E  0E7D               	movlw	high __npowers_
  9679  002590  0101               	movlb	1	; () banked
  9680  002592  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9681  002594  6EF7               	movwf	tblptrh,c
  9682  002596                     	if	0	;There are less than 3 active tblptr bytes
  9683  002596                     	endif
  9684  002596  0009               	tblrd		*+
  9685  002598  CFF5 F117          	movff	tablat,___ftmul@f2
  9686  00259C  0009               	tblrd		*+
  9687  00259E  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9688  0025A2  000A               	tblrd		*-
  9689  0025A4  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9690  0025A8  0E00               	movlw	0
  9691  0025AA  0101               	movlb	1	; () banked
  9692  0025AC  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9693  0025AE  0E64               	movlw	100
  9694  0025B0  6F08               	movwf	___awdiv@divisor& (0+255),b
  9695  0025B2  C12C  F106         	movff	fround@prec,___awdiv@dividend
  9696  0025B6  0101               	movlb	1	; () banked
  9697  0025B8  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  9698  0025BA  EC28  F02C         	call	___awdiv	;wreg free
  9699  0025BE  0E12               	movlw	18
  9700  0025C0  0101               	movlb	1	; () banked
  9701  0025C2  2506               	addwf	?___awdiv& (0+255),w,b
  9702  0025C4  0101               	movlb	1	; () banked
  9703  0025C6  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9704  0025C8  0E00               	movlw	0
  9705  0025CA  0101               	movlb	1	; () banked
  9706  0025CC  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9707  0025CE  0101               	movlb	1	; () banked
  9708  0025D0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9709  0025D2  0E00               	movlw	0
  9710  0025D4  0101               	movlb	1	; () banked
  9711  0025D6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9712  0025D8  0E03               	movlw	3
  9713  0025DA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9714  0025DC  ECDC  F037         	call	___wmul	;wreg free
  9715  0025E0  0E24               	movlw	low __npowers_
  9716  0025E2  0101               	movlb	1	; () banked
  9717  0025E4  250E               	addwf	?___wmul& (0+255),w,b
  9718  0025E6  6EF6               	movwf	tblptrl,c
  9719  0025E8  0E7D               	movlw	high __npowers_
  9720  0025EA  0101               	movlb	1	; () banked
  9721  0025EC  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9722  0025EE  6EF7               	movwf	tblptrh,c
  9723  0025F0                     	if	0	;There are less than 3 active tblptr bytes
  9724  0025F0                     	endif
  9725  0025F0  0009               	tblrd		*+
  9726  0025F2  CFF5 F114          	movff	tablat,___ftmul@f1
  9727  0025F6  0009               	tblrd		*+
  9728  0025F8  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9729  0025FC  000A               	tblrd		*-
  9730  0025FE  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9731  002602  EC1F  F01D         	call	___ftmul	;wreg free
  9732  002606  C114  F129         	movff	?___ftmul,_fround$2827
  9733  00260A  C115  F12A         	movff	?___ftmul+1,_fround$2827+1
  9734  00260E  C116  F12B         	movff	?___ftmul+2,_fround$2827+2
  9735                           
  9736                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9737  002612  0E00               	movlw	0
  9738  002614  0101               	movlb	1	; () banked
  9739  002616  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9740  002618  0E03               	movlw	3
  9741  00261A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9742  00261C  0E00               	movlw	0
  9743  00261E  0101               	movlb	1	; () banked
  9744  002620  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9745  002622  0E0A               	movlw	10
  9746  002624  6F02               	movwf	___awmod@divisor& (0+255),b
  9747  002626  C12C  F100         	movff	fround@prec,___awmod@dividend
  9748  00262A  0101               	movlb	1	; () banked
  9749  00262C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9750  00262E  ECF8  F02D         	call	___awmod	;wreg free
  9751  002632  C100  F10E         	movff	?___awmod,___wmul@multiplier
  9752  002636  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  9753  00263A  ECDC  F037         	call	___wmul	;wreg free
  9754  00263E  0E24               	movlw	low __npowers_
  9755  002640  0101               	movlb	1	; () banked
  9756  002642  250E               	addwf	?___wmul& (0+255),w,b
  9757  002644  6EF6               	movwf	tblptrl,c
  9758  002646  0E7D               	movlw	high __npowers_
  9759  002648  0101               	movlb	1	; () banked
  9760  00264A  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9761  00264C  6EF7               	movwf	tblptrh,c
  9762  00264E                     	if	0	;There are less than 3 active tblptr bytes
  9763  00264E                     	endif
  9764  00264E  0009               	tblrd		*+
  9765  002650  CFF5 F117          	movff	tablat,___ftmul@f2
  9766  002654  0009               	tblrd		*+
  9767  002656  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9768  00265A  000A               	tblrd		*-
  9769  00265C  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9770  002660  C129  F114         	movff	_fround$2827,___ftmul@f1
  9771  002664  C12A  F115         	movff	_fround$2827+1,___ftmul@f1+1
  9772  002668  C12B  F116         	movff	_fround$2827+2,___ftmul@f1+2
  9773  00266C  EC1F  F01D         	call	___ftmul	;wreg free
  9774  002670  C114  F126         	movff	?___ftmul,_fround$2828
  9775  002674  C115  F127         	movff	?___ftmul+1,_fround$2828+1
  9776  002678  C116  F128         	movff	?___ftmul+2,_fround$2828+2
  9777                           
  9778                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9779  00267C  C126  F114         	movff	_fround$2828,___ftmul@f1
  9780  002680  C127  F115         	movff	_fround$2828+1,___ftmul@f1+1
  9781  002684  C128  F116         	movff	_fround$2828+2,___ftmul@f1+2
  9782  002688  0E00               	movlw	0
  9783  00268A  0101               	movlb	1	; () banked
  9784  00268C  6F17               	movwf	___ftmul@f2& (0+255),b
  9785  00268E  0E00               	movlw	0
  9786  002690  0101               	movlb	1	; () banked
  9787  002692  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9788  002694  0E3F               	movlw	63
  9789  002696  0101               	movlb	1	; () banked
  9790  002698  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9791  00269A  EC1F  F01D         	call	___ftmul	;wreg free
  9792  00269E  C114  F123         	movff	?___ftmul,?_fround
  9793  0026A2  C115  F124         	movff	?___ftmul+1,?_fround+1
  9794  0026A6  C116  F125         	movff	?___ftmul+2,?_fround+2
  9795  0026AA  0012               	return	
  9796  0026AC                     l10052:
  9797                           
  9798                           ;doprnt.c: 415: else if(prec > 10)
  9799  0026AC  0E0A               	movlw	10
  9800  0026AE  0101               	movlb	1	; () banked
  9801  0026B0  652C               	cpfsgt	fround@prec& (0+255),b
  9802  0026B2  D06E               	goto	l10060
  9803                           
  9804                           ; BSR set to: 1
  9805                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9806  0026B4  0E00               	movlw	0
  9807  0026B6  0101               	movlb	1	; () banked
  9808  0026B8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9809  0026BA  0E03               	movlw	3
  9810  0026BC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9811  0026BE  0E00               	movlw	0
  9812  0026C0  0101               	movlb	1	; () banked
  9813  0026C2  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9814  0026C4  0E0A               	movlw	10
  9815  0026C6  6F02               	movwf	___awmod@divisor& (0+255),b
  9816  0026C8  C12C  F100         	movff	fround@prec,___awmod@dividend
  9817  0026CC  0101               	movlb	1	; () banked
  9818  0026CE  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9819  0026D0  ECF8  F02D         	call	___awmod	;wreg free
  9820  0026D4  C100  F10E         	movff	?___awmod,___wmul@multiplier
  9821  0026D8  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  9822  0026DC  ECDC  F037         	call	___wmul	;wreg free
  9823  0026E0  0E24               	movlw	low __npowers_
  9824  0026E2  0101               	movlb	1	; () banked
  9825  0026E4  250E               	addwf	?___wmul& (0+255),w,b
  9826  0026E6  6EF6               	movwf	tblptrl,c
  9827  0026E8  0E7D               	movlw	high __npowers_
  9828  0026EA  0101               	movlb	1	; () banked
  9829  0026EC  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9830  0026EE  6EF7               	movwf	tblptrh,c
  9831  0026F0                     	if	0	;There are less than 3 active tblptr bytes
  9832  0026F0                     	endif
  9833  0026F0  0009               	tblrd		*+
  9834  0026F2  CFF5 F117          	movff	tablat,___ftmul@f2
  9835  0026F6  0009               	tblrd		*+
  9836  0026F8  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9837  0026FC  000A               	tblrd		*-
  9838  0026FE  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9839  002702  0E00               	movlw	0
  9840  002704  0101               	movlb	1	; () banked
  9841  002706  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9842  002708  0E0A               	movlw	10
  9843  00270A  6F08               	movwf	___awdiv@divisor& (0+255),b
  9844  00270C  C12C  F106         	movff	fround@prec,___awdiv@dividend
  9845  002710  0101               	movlb	1	; () banked
  9846  002712  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  9847  002714  EC28  F02C         	call	___awdiv	;wreg free
  9848  002718  0E09               	movlw	9
  9849  00271A  0101               	movlb	1	; () banked
  9850  00271C  2506               	addwf	?___awdiv& (0+255),w,b
  9851  00271E  0101               	movlb	1	; () banked
  9852  002720  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9853  002722  0E00               	movlw	0
  9854  002724  0101               	movlb	1	; () banked
  9855  002726  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9856  002728  0101               	movlb	1	; () banked
  9857  00272A  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9858  00272C  0E00               	movlw	0
  9859  00272E  0101               	movlb	1	; () banked
  9860  002730  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9861  002732  0E03               	movlw	3
  9862  002734  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9863  002736  ECDC  F037         	call	___wmul	;wreg free
  9864  00273A  0E24               	movlw	low __npowers_
  9865  00273C  0101               	movlb	1	; () banked
  9866  00273E  250E               	addwf	?___wmul& (0+255),w,b
  9867  002740  6EF6               	movwf	tblptrl,c
  9868  002742  0E7D               	movlw	high __npowers_
  9869  002744  0101               	movlb	1	; () banked
  9870  002746  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9871  002748  6EF7               	movwf	tblptrh,c
  9872  00274A                     	if	0	;There are less than 3 active tblptr bytes
  9873  00274A                     	endif
  9874  00274A  0009               	tblrd		*+
  9875  00274C  CFF5 F114          	movff	tablat,___ftmul@f1
  9876  002750  0009               	tblrd		*+
  9877  002752  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9878  002756  000A               	tblrd		*-
  9879  002758  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9880  00275C  EC1F  F01D         	call	___ftmul	;wreg free
  9881  002760  C114  F129         	movff	?___ftmul,_fround$2827
  9882  002764  C115  F12A         	movff	?___ftmul+1,_fround$2827+1
  9883  002768  C116  F12B         	movff	?___ftmul+2,_fround$2827+2
  9884                           
  9885                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9886  00276C  C129  F114         	movff	_fround$2827,___ftmul@f1
  9887  002770  C12A  F115         	movff	_fround$2827+1,___ftmul@f1+1
  9888  002774  C12B  F116         	movff	_fround$2827+2,___ftmul@f1+2
  9889  002778  0E00               	movlw	0
  9890  00277A  0101               	movlb	1	; () banked
  9891  00277C  6F17               	movwf	___ftmul@f2& (0+255),b
  9892  00277E  0E00               	movlw	0
  9893  002780  0101               	movlb	1	; () banked
  9894  002782  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9895  002784  0E3F               	movlw	63
  9896  002786  0101               	movlb	1	; () banked
  9897  002788  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9898  00278A  EC1F  F01D         	call	___ftmul	;wreg free
  9899  00278E  D787               	goto	L5
  9900  002790                     l10060:
  9901                           
  9902                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9903  002790  0101               	movlb	1	; () banked
  9904  002792  512C               	movf	fround@prec& (0+255),w,b
  9905  002794  0D03               	mullw	3
  9906  002796  0E24               	movlw	low __npowers_
  9907  002798  24F3               	addwf	prodl,w,c
  9908  00279A  6EF6               	movwf	tblptrl,c
  9909  00279C  0E7D               	movlw	high __npowers_
  9910  00279E  20F4               	addwfc	prodh,w,c
  9911  0027A0  6EF7               	movwf	tblptrh,c
  9912  0027A2                     	if	0	;There are less than 3 active tblptr bytes
  9913  0027A2                     	endif
  9914  0027A2  0009               	tblrd		*+
  9915  0027A4  CFF5 F114          	movff	tablat,___ftmul@f1
  9916  0027A8  0009               	tblrd		*+
  9917  0027AA  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9918  0027AE  000A               	tblrd		*-
  9919  0027B0  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9920  0027B4  0E00               	movlw	0
  9921  0027B6  0101               	movlb	1	; () banked
  9922  0027B8  6F17               	movwf	___ftmul@f2& (0+255),b
  9923  0027BA  0E00               	movlw	0
  9924  0027BC  0101               	movlb	1	; () banked
  9925  0027BE  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9926  0027C0  0E3F               	movlw	63
  9927  0027C2  0101               	movlb	1	; () banked
  9928  0027C4  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9929  0027C6  EC1F  F01D         	call	___ftmul	;wreg free
  9930  0027CA  C114  F123         	movff	?___ftmul,?_fround
  9931  0027CE  C115  F124         	movff	?___ftmul+1,?_fround+1
  9932  0027D2  C116  F125         	movff	?___ftmul+2,?_fround+2
  9933  0027D6  0012               	return	
  9934  0027D8                     __end_of_fround:
  9935                           	opt stack 0
  9936                           tblptru	equ	0xFF8
  9937                           tblptrh	equ	0xFF7
  9938                           tblptrl	equ	0xFF6
  9939                           tablat	equ	0xFF5
  9940                           prodh	equ	0xFF4
  9941                           prodl	equ	0xFF3
  9942                           intcon	equ	0xFF2
  9943                           postinc0	equ	0xFEE
  9944                           wreg	equ	0xFE8
  9945                           postdec1	equ	0xFE5
  9946                           fsr1l	equ	0xFE1
  9947                           indf2	equ	0xFDF
  9948                           postinc2	equ	0xFDE
  9949                           postdec2	equ	0xFDD
  9950                           fsr2h	equ	0xFDA
  9951                           fsr2l	equ	0xFD9
  9952                           status	equ	0xFD8
  9953                           
  9954 ;; *************** function ___wmul *****************
  9955 ;; Defined at:
  9956 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  9957 ;; Parameters:    Size  Location     Type
  9958 ;;  multiplier      2   14[BANK1 ] unsigned int 
  9959 ;;  multiplicand    2   16[BANK1 ] unsigned int 
  9960 ;; Auto vars:     Size  Location     Type
  9961 ;;  product         2   18[BANK1 ] unsigned int 
  9962 ;; Return value:  Size  Location     Type
  9963 ;;                  2   14[BANK1 ] unsigned int 
  9964 ;; Registers used:
  9965 ;;		wreg, status,2, status,0, prodl, prodh
  9966 ;; Tracked objects:
  9967 ;;		On entry : 0/0
  9968 ;;		On exit  : 0/0
  9969 ;;		Unchanged: 0/0
  9970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9971 ;;      Params:         0       0       4       0       0       0       0
  9972 ;;      Locals:         0       0       2       0       0       0       0
  9973 ;;      Temps:          0       0       0       0       0       0       0
  9974 ;;      Totals:         0       0       6       0       0       0       0
  9975 ;;Total ram usage:        6 bytes
  9976 ;; Hardware stack levels used:    1
  9977 ;; Hardware stack levels required when called:   12
  9978 ;; This function calls:
  9979 ;;		Nothing
  9980 ;; This function is called by:
  9981 ;;		_fround
  9982 ;;		_scale
  9983 ;;		_printf
  9984 ;; This function uses a non-reentrant model
  9985 ;;
  9986                           
  9987                           	psect	text35
  9988  006FB8                     __ptext35:
  9989                           	opt stack 0
  9990  006FB8                     ___wmul:
  9991                           	opt stack 14
  9992                           
  9993                           ;incstack = 0
  9994  006FB8  0101               	movlb	1	; () banked
  9995  006FBA  510E               	movf	___wmul@multiplier& (0+255),w,b
  9996  006FBC  0101               	movlb	1	; () banked
  9997  006FBE  0310               	mulwf	___wmul@multiplicand& (0+255),b
  9998  006FC0  CFF3 F112          	movff	prodl,___wmul@product
  9999  006FC4  CFF4 F113          	movff	prodh,___wmul@product+1
 10000  006FC8  0101               	movlb	1	; () banked
 10001  006FCA  510E               	movf	___wmul@multiplier& (0+255),w,b
 10002  006FCC  0101               	movlb	1	; () banked
 10003  006FCE  0311               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10004  006FD0  50F3               	movf	prodl,w,c
 10005  006FD2  0101               	movlb	1	; () banked
 10006  006FD4  2713               	addwf	(___wmul@product+1)& (0+255),f,b
 10007  006FD6  0101               	movlb	1	; () banked
 10008  006FD8  510F               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10009  006FDA  0101               	movlb	1	; () banked
 10010  006FDC  0310               	mulwf	___wmul@multiplicand& (0+255),b
 10011  006FDE  50F3               	movf	prodl,w,c
 10012  006FE0  0101               	movlb	1	; () banked
 10013  006FE2  2713               	addwf	(___wmul@product+1)& (0+255),f,b
 10014                           
 10015                           ; BSR set to: 1
 10016  006FE4  C112  F10E         	movff	___wmul@product,?___wmul
 10017  006FE8  C113  F10F         	movff	___wmul@product+1,?___wmul+1
 10018  006FEC  0012               	return	
 10019  006FEE                     __end_of___wmul:
 10020                           	opt stack 0
 10021                           tblptru	equ	0xFF8
 10022                           tblptrh	equ	0xFF7
 10023                           tblptrl	equ	0xFF6
 10024                           tablat	equ	0xFF5
 10025                           prodh	equ	0xFF4
 10026                           prodl	equ	0xFF3
 10027                           intcon	equ	0xFF2
 10028                           postinc0	equ	0xFEE
 10029                           wreg	equ	0xFE8
 10030                           postdec1	equ	0xFE5
 10031                           fsr1l	equ	0xFE1
 10032                           indf2	equ	0xFDF
 10033                           postinc2	equ	0xFDE
 10034                           postdec2	equ	0xFDD
 10035                           fsr2h	equ	0xFDA
 10036                           fsr2l	equ	0xFD9
 10037                           status	equ	0xFD8
 10038                           
 10039 ;; *************** function ___awmod *****************
 10040 ;; Defined at:
 10041 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
 10042 ;; Parameters:    Size  Location     Type
 10043 ;;  dividend        2    0[BANK1 ] int 
 10044 ;;  divisor         2    2[BANK1 ] int 
 10045 ;; Auto vars:     Size  Location     Type
 10046 ;;  sign            1    5[BANK1 ] unsigned char 
 10047 ;;  counter         1    4[BANK1 ] unsigned char 
 10048 ;; Return value:  Size  Location     Type
 10049 ;;                  2    0[BANK1 ] int 
 10050 ;; Registers used:
 10051 ;;		wreg, status,2, status,0
 10052 ;; Tracked objects:
 10053 ;;		On entry : 0/0
 10054 ;;		On exit  : 0/0
 10055 ;;		Unchanged: 0/0
 10056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10057 ;;      Params:         0       0       4       0       0       0       0
 10058 ;;      Locals:         0       0       2       0       0       0       0
 10059 ;;      Temps:          0       0       0       0       0       0       0
 10060 ;;      Totals:         0       0       6       0       0       0       0
 10061 ;;Total ram usage:        6 bytes
 10062 ;; Hardware stack levels used:    1
 10063 ;; Hardware stack levels required when called:   12
 10064 ;; This function calls:
 10065 ;;		Nothing
 10066 ;; This function is called by:
 10067 ;;		_fround
 10068 ;;		_scale
 10069 ;; This function uses a non-reentrant model
 10070 ;;
 10071                           
 10072                           	psect	text36
 10073  005BF0                     __ptext36:
 10074                           	opt stack 0
 10075  005BF0                     ___awmod:
 10076                           	opt stack 14
 10077                           
 10078                           ; BSR set to: 1
 10079                           ;incstack = 0
 10080  005BF0  0E00               	movlw	0
 10081  005BF2  0101               	movlb	1	; () banked
 10082  005BF4  6F05               	movwf	___awmod@sign& (0+255),b
 10083                           
 10084                           ; BSR set to: 1
 10085  005BF6  0101               	movlb	1	; () banked
 10086  005BF8  AF01               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10087  005BFA  D008               	goto	l9994
 10088                           
 10089                           ; BSR set to: 1
 10090  005BFC  0101               	movlb	1	; () banked
 10091  005BFE  6D00               	negf	___awmod@dividend& (0+255),b
 10092  005C00  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
 10093  005C02  B0D8               	btfsc	status,0,c
 10094  005C04  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
 10095                           
 10096                           ; BSR set to: 1
 10097  005C06  0E01               	movlw	1
 10098  005C08  0101               	movlb	1	; () banked
 10099  005C0A  6F05               	movwf	___awmod@sign& (0+255),b
 10100  005C0C                     l9994:
 10101                           
 10102                           ; BSR set to: 1
 10103  005C0C  0101               	movlb	1	; () banked
 10104  005C0E  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10105  005C10  D005               	goto	l9998
 10106                           
 10107                           ; BSR set to: 1
 10108  005C12  0101               	movlb	1	; () banked
 10109  005C14  6D02               	negf	___awmod@divisor& (0+255),b
 10110  005C16  1F03               	comf	(___awmod@divisor+1)& (0+255),f,b
 10111  005C18  B0D8               	btfsc	status,0,c
 10112  005C1A  2B03               	incf	(___awmod@divisor+1)& (0+255),f,b
 10113  005C1C                     l9998:
 10114                           
 10115                           ; BSR set to: 1
 10116  005C1C  0101               	movlb	1	; () banked
 10117  005C1E  5102               	movf	___awmod@divisor& (0+255),w,b
 10118  005C20  0101               	movlb	1	; () banked
 10119  005C22  1103               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10120  005C24  B4D8               	btfsc	status,2,c
 10121  005C26  D026               	goto	l10014
 10122                           
 10123                           ; BSR set to: 1
 10124  005C28  0E01               	movlw	1
 10125  005C2A  0101               	movlb	1	; () banked
 10126  005C2C  6F04               	movwf	___awmod@counter& (0+255),b
 10127  005C2E  D006               	goto	l10004
 10128  005C30                     l10002:
 10129                           
 10130                           ; BSR set to: 1
 10131  005C30  0101               	movlb	1	; () banked
 10132  005C32  90D8               	bcf	status,0,c
 10133  005C34  3702               	rlcf	___awmod@divisor& (0+255),f,b
 10134  005C36  3703               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10135  005C38  0101               	movlb	1	; () banked
 10136  005C3A  2B04               	incf	___awmod@counter& (0+255),f,b
 10137  005C3C                     l10004:
 10138                           
 10139                           ; BSR set to: 1
 10140  005C3C  0101               	movlb	1	; () banked
 10141  005C3E  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10142  005C40  D7F7               	goto	l10002
 10143  005C42                     l10006:
 10144                           
 10145                           ; BSR set to: 1
 10146  005C42  0101               	movlb	1	; () banked
 10147  005C44  5102               	movf	___awmod@divisor& (0+255),w,b
 10148  005C46  0101               	movlb	1	; () banked
 10149  005C48  5D00               	subwf	___awmod@dividend& (0+255),w,b
 10150  005C4A  0101               	movlb	1	; () banked
 10151  005C4C  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
 10152  005C4E  0101               	movlb	1	; () banked
 10153  005C50  5901               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10154  005C52  A0D8               	btfss	status,0,c
 10155  005C54  D008               	goto	l10010
 10156                           
 10157                           ; BSR set to: 1
 10158  005C56  0101               	movlb	1	; () banked
 10159  005C58  5102               	movf	___awmod@divisor& (0+255),w,b
 10160  005C5A  0101               	movlb	1	; () banked
 10161  005C5C  5F00               	subwf	___awmod@dividend& (0+255),f,b
 10162  005C5E  0101               	movlb	1	; () banked
 10163  005C60  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
 10164  005C62  0101               	movlb	1	; () banked
 10165  005C64  5B01               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10166  005C66                     l10010:
 10167                           
 10168                           ; BSR set to: 1
 10169  005C66  0101               	movlb	1	; () banked
 10170  005C68  90D8               	bcf	status,0,c
 10171  005C6A  3303               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10172  005C6C  3302               	rrcf	___awmod@divisor& (0+255),f,b
 10173                           
 10174                           ; BSR set to: 1
 10175  005C6E  0101               	movlb	1	; () banked
 10176  005C70  2F04               	decfsz	___awmod@counter& (0+255),f,b
 10177  005C72  D7E7               	goto	l10006
 10178  005C74                     l10014:
 10179                           
 10180                           ; BSR set to: 1
 10181  005C74  0101               	movlb	1	; () banked
 10182  005C76  5105               	movf	___awmod@sign& (0+255),w,b
 10183  005C78  0101               	movlb	1	; () banked
 10184  005C7A  B4D8               	btfsc	status,2,c
 10185  005C7C  D005               	goto	l10018
 10186                           
 10187                           ; BSR set to: 1
 10188  005C7E  0101               	movlb	1	; () banked
 10189  005C80  6D00               	negf	___awmod@dividend& (0+255),b
 10190  005C82  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
 10191  005C84  B0D8               	btfsc	status,0,c
 10192  005C86  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
 10193  005C88                     l10018:
 10194                           
 10195                           ; BSR set to: 1
 10196  005C88  C100  F100         	movff	___awmod@dividend,?___awmod
 10197  005C8C  C101  F101         	movff	___awmod@dividend+1,?___awmod+1
 10198  005C90  0012               	return	
 10199  005C92                     __end_of___awmod:
 10200                           	opt stack 0
 10201                           tblptru	equ	0xFF8
 10202                           tblptrh	equ	0xFF7
 10203                           tblptrl	equ	0xFF6
 10204                           tablat	equ	0xFF5
 10205                           prodh	equ	0xFF4
 10206                           prodl	equ	0xFF3
 10207                           intcon	equ	0xFF2
 10208                           postinc0	equ	0xFEE
 10209                           wreg	equ	0xFE8
 10210                           postdec1	equ	0xFE5
 10211                           fsr1l	equ	0xFE1
 10212                           indf2	equ	0xFDF
 10213                           postinc2	equ	0xFDE
 10214                           postdec2	equ	0xFDD
 10215                           fsr2h	equ	0xFDA
 10216                           fsr2l	equ	0xFD9
 10217                           status	equ	0xFD8
 10218                           
 10219 ;; *************** function ___awdiv *****************
 10220 ;; Defined at:
 10221 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 10222 ;; Parameters:    Size  Location     Type
 10223 ;;  dividend        2    6[BANK1 ] int 
 10224 ;;  divisor         2    8[BANK1 ] int 
 10225 ;; Auto vars:     Size  Location     Type
 10226 ;;  quotient        2   12[BANK1 ] int 
 10227 ;;  sign            1   11[BANK1 ] unsigned char 
 10228 ;;  counter         1   10[BANK1 ] unsigned char 
 10229 ;; Return value:  Size  Location     Type
 10230 ;;                  2    6[BANK1 ] int 
 10231 ;; Registers used:
 10232 ;;		wreg, status,2, status,0
 10233 ;; Tracked objects:
 10234 ;;		On entry : 0/0
 10235 ;;		On exit  : 0/0
 10236 ;;		Unchanged: 0/0
 10237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10238 ;;      Params:         0       0       4       0       0       0       0
 10239 ;;      Locals:         0       0       4       0       0       0       0
 10240 ;;      Temps:          0       0       0       0       0       0       0
 10241 ;;      Totals:         0       0       8       0       0       0       0
 10242 ;;Total ram usage:        8 bytes
 10243 ;; Hardware stack levels used:    1
 10244 ;; Hardware stack levels required when called:   12
 10245 ;; This function calls:
 10246 ;;		Nothing
 10247 ;; This function is called by:
 10248 ;;		_fround
 10249 ;;		_scale
 10250 ;;		_printf
 10251 ;; This function uses a non-reentrant model
 10252 ;;
 10253                           
 10254                           	psect	text37
 10255  005850                     __ptext37:
 10256                           	opt stack 0
 10257  005850                     ___awdiv:
 10258                           	opt stack 14
 10259                           
 10260                           ; BSR set to: 1
 10261                           ;incstack = 0
 10262  005850  0E00               	movlw	0
 10263  005852  0101               	movlb	1	; () banked
 10264  005854  6F0B               	movwf	___awdiv@sign& (0+255),b
 10265                           
 10266                           ; BSR set to: 1
 10267  005856  0101               	movlb	1	; () banked
 10268  005858  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10269  00585A  D008               	goto	l9950
 10270                           
 10271                           ; BSR set to: 1
 10272  00585C  0101               	movlb	1	; () banked
 10273  00585E  6D08               	negf	___awdiv@divisor& (0+255),b
 10274  005860  1F09               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10275  005862  B0D8               	btfsc	status,0,c
 10276  005864  2B09               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10277                           
 10278                           ; BSR set to: 1
 10279  005866  0E01               	movlw	1
 10280  005868  0101               	movlb	1	; () banked
 10281  00586A  6F0B               	movwf	___awdiv@sign& (0+255),b
 10282  00586C                     l9950:
 10283                           
 10284                           ; BSR set to: 1
 10285  00586C  0101               	movlb	1	; () banked
 10286  00586E  AF07               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10287  005870  D008               	goto	l9956
 10288                           
 10289                           ; BSR set to: 1
 10290  005872  0101               	movlb	1	; () banked
 10291  005874  6D06               	negf	___awdiv@dividend& (0+255),b
 10292  005876  1F07               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10293  005878  B0D8               	btfsc	status,0,c
 10294  00587A  2B07               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10295                           
 10296                           ; BSR set to: 1
 10297  00587C  0E01               	movlw	1
 10298  00587E  0101               	movlb	1	; () banked
 10299  005880  1B0B               	xorwf	___awdiv@sign& (0+255),f,b
 10300  005882                     l9956:
 10301                           
 10302                           ; BSR set to: 1
 10303  005882  0E00               	movlw	0
 10304  005884  0101               	movlb	1	; () banked
 10305  005886  6F0D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10306  005888  0E00               	movlw	0
 10307  00588A  6F0C               	movwf	___awdiv@quotient& (0+255),b
 10308                           
 10309                           ; BSR set to: 1
 10310  00588C  0101               	movlb	1	; () banked
 10311  00588E  5108               	movf	___awdiv@divisor& (0+255),w,b
 10312  005890  0101               	movlb	1	; () banked
 10313  005892  1109               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10314  005894  B4D8               	btfsc	status,2,c
 10315  005896  D02C               	goto	l9978
 10316                           
 10317                           ; BSR set to: 1
 10318  005898  0E01               	movlw	1
 10319  00589A  0101               	movlb	1	; () banked
 10320  00589C  6F0A               	movwf	___awdiv@counter& (0+255),b
 10321  00589E  D006               	goto	l9964
 10322  0058A0                     l9962:
 10323                           
 10324                           ; BSR set to: 1
 10325  0058A0  0101               	movlb	1	; () banked
 10326  0058A2  90D8               	bcf	status,0,c
 10327  0058A4  3708               	rlcf	___awdiv@divisor& (0+255),f,b
 10328  0058A6  3709               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10329  0058A8  0101               	movlb	1	; () banked
 10330  0058AA  2B0A               	incf	___awdiv@counter& (0+255),f,b
 10331  0058AC                     l9964:
 10332                           
 10333                           ; BSR set to: 1
 10334  0058AC  0101               	movlb	1	; () banked
 10335  0058AE  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10336  0058B0  D7F7               	goto	l9962
 10337  0058B2                     l9966:
 10338                           
 10339                           ; BSR set to: 1
 10340  0058B2  0101               	movlb	1	; () banked
 10341  0058B4  90D8               	bcf	status,0,c
 10342  0058B6  370C               	rlcf	___awdiv@quotient& (0+255),f,b
 10343  0058B8  370D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10344                           
 10345                           ; BSR set to: 1
 10346  0058BA  0101               	movlb	1	; () banked
 10347  0058BC  5108               	movf	___awdiv@divisor& (0+255),w,b
 10348  0058BE  0101               	movlb	1	; () banked
 10349  0058C0  5D06               	subwf	___awdiv@dividend& (0+255),w,b
 10350  0058C2  0101               	movlb	1	; () banked
 10351  0058C4  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10352  0058C6  0101               	movlb	1	; () banked
 10353  0058C8  5907               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10354  0058CA  A0D8               	btfss	status,0,c
 10355  0058CC  D00A               	goto	l9974
 10356                           
 10357                           ; BSR set to: 1
 10358  0058CE  0101               	movlb	1	; () banked
 10359  0058D0  5108               	movf	___awdiv@divisor& (0+255),w,b
 10360  0058D2  0101               	movlb	1	; () banked
 10361  0058D4  5F06               	subwf	___awdiv@dividend& (0+255),f,b
 10362  0058D6  0101               	movlb	1	; () banked
 10363  0058D8  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10364  0058DA  0101               	movlb	1	; () banked
 10365  0058DC  5B07               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10366                           
 10367                           ; BSR set to: 1
 10368  0058DE  0101               	movlb	1	; () banked
 10369  0058E0  810C               	bsf	___awdiv@quotient& (0+255),0,b
 10370  0058E2                     l9974:
 10371                           
 10372                           ; BSR set to: 1
 10373  0058E2  0101               	movlb	1	; () banked
 10374  0058E4  90D8               	bcf	status,0,c
 10375  0058E6  3309               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10376  0058E8  3308               	rrcf	___awdiv@divisor& (0+255),f,b
 10377                           
 10378                           ; BSR set to: 1
 10379  0058EA  0101               	movlb	1	; () banked
 10380  0058EC  2F0A               	decfsz	___awdiv@counter& (0+255),f,b
 10381  0058EE  D7E1               	goto	l9966
 10382  0058F0                     l9978:
 10383                           
 10384                           ; BSR set to: 1
 10385  0058F0  0101               	movlb	1	; () banked
 10386  0058F2  510B               	movf	___awdiv@sign& (0+255),w,b
 10387  0058F4  0101               	movlb	1	; () banked
 10388  0058F6  B4D8               	btfsc	status,2,c
 10389  0058F8  D005               	goto	l9982
 10390                           
 10391                           ; BSR set to: 1
 10392  0058FA  0101               	movlb	1	; () banked
 10393  0058FC  6D0C               	negf	___awdiv@quotient& (0+255),b
 10394  0058FE  1F0D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10395  005900  B0D8               	btfsc	status,0,c
 10396  005902  2B0D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10397  005904                     l9982:
 10398                           
 10399                           ; BSR set to: 1
 10400  005904  C10C  F106         	movff	___awdiv@quotient,?___awdiv
 10401  005908  C10D  F107         	movff	___awdiv@quotient+1,?___awdiv+1
 10402  00590C  0012               	return	
 10403  00590E                     __end_of___awdiv:
 10404                           	opt stack 0
 10405                           tblptru	equ	0xFF8
 10406                           tblptrh	equ	0xFF7
 10407                           tblptrl	equ	0xFF6
 10408                           tablat	equ	0xFF5
 10409                           prodh	equ	0xFF4
 10410                           prodl	equ	0xFF3
 10411                           intcon	equ	0xFF2
 10412                           postinc0	equ	0xFEE
 10413                           wreg	equ	0xFE8
 10414                           postdec1	equ	0xFE5
 10415                           fsr1l	equ	0xFE1
 10416                           indf2	equ	0xFDF
 10417                           postinc2	equ	0xFDE
 10418                           postdec2	equ	0xFDD
 10419                           fsr2h	equ	0xFDA
 10420                           fsr2l	equ	0xFD9
 10421                           status	equ	0xFD8
 10422                           
 10423 ;; *************** function __tdiv_to_l_ *****************
 10424 ;; Defined at:
 10425 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdivl.c"
 10426 ;; Parameters:    Size  Location     Type
 10427 ;;  f1              3    0[BANK1 ] float 
 10428 ;;  f2              3    3[BANK1 ] float 
 10429 ;; Auto vars:     Size  Location     Type
 10430 ;;  quot            4    9[BANK1 ] unsigned long 
 10431 ;;  exp1            1   14[BANK1 ] unsigned char 
 10432 ;;  cntr            1   13[BANK1 ] unsigned char 
 10433 ;; Return value:  Size  Location     Type
 10434 ;;                  4    0[BANK1 ] unsigned long 
 10435 ;; Registers used:
 10436 ;;		wreg, status,2, status,0
 10437 ;; Tracked objects:
 10438 ;;		On entry : 0/0
 10439 ;;		On exit  : 0/0
 10440 ;;		Unchanged: 0/0
 10441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10442 ;;      Params:         0       0       6       0       0       0       0
 10443 ;;      Locals:         0       0       6       0       0       0       0
 10444 ;;      Temps:          0       0       3       0       0       0       0
 10445 ;;      Totals:         0       0      15       0       0       0       0
 10446 ;;Total ram usage:       15 bytes
 10447 ;; Hardware stack levels used:    1
 10448 ;; Hardware stack levels required when called:   12
 10449 ;; This function calls:
 10450 ;;		Nothing
 10451 ;; This function is called by:
 10452 ;;		_printf
 10453 ;; This function uses a non-reentrant model
 10454 ;;
 10455                           
 10456                           	psect	text38
 10457  003718                     __ptext38:
 10458                           	opt stack 0
 10459  003718                     __tdiv_to_l_:
 10460                           	opt stack 15
 10461                           
 10462                           ; BSR set to: 1
 10463                           ;incstack = 0
 10464  003718  C102  F106         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 10465  00371C  0101               	movlb	1	; () banked
 10466  00371E  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10467  003720  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10468  003722  0101               	movlb	1	; () banked
 10469  003724  3501               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10470  003726  0101               	movlb	1	; () banked
 10471  003728  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10472  00372A  E301               	bnc	u14831
 10473  00372C  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10474  00372E                     u14831:
 10475  00372E  0101               	movlb	1	; () banked
 10476  003730  5106               	movf	??__tdiv_to_l_& (0+255),w,b
 10477  003732  0101               	movlb	1	; () banked
 10478  003734  6F0E               	movwf	__tdiv_to_l_@exp1& (0+255),b
 10479  003736  0101               	movlb	1	; () banked
 10480  003738  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10481  00373A  A4D8               	btfss	status,2,c
 10482  00373C  D00A               	goto	l10120
 10483                           
 10484                           ; BSR set to: 1
 10485  00373E  0E00               	movlw	0
 10486  003740  0101               	movlb	1	; () banked
 10487  003742  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10488  003744  0E00               	movlw	0
 10489  003746  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10490  003748  0E00               	movlw	0
 10491  00374A  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10492  00374C  0E00               	movlw	0
 10493  00374E  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10494                           
 10495                           ; BSR set to: 1
 10496  003750  0012               	return	
 10497  003752                     l10120:
 10498                           
 10499                           ; BSR set to: 1
 10500  003752  C105  F106         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 10501  003756  0101               	movlb	1	; () banked
 10502  003758  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10503  00375A  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10504  00375C  0101               	movlb	1	; () banked
 10505  00375E  3504               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10506  003760  0101               	movlb	1	; () banked
 10507  003762  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10508  003764  E301               	bnc	u14851
 10509  003766  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10510  003768                     u14851:
 10511  003768  0101               	movlb	1	; () banked
 10512  00376A  5106               	movf	??__tdiv_to_l_& (0+255),w,b
 10513  00376C  0101               	movlb	1	; () banked
 10514  00376E  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10515  003770  0101               	movlb	1	; () banked
 10516  003772  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 10517  003774  A4D8               	btfss	status,2,c
 10518  003776  D00A               	goto	l10126
 10519                           
 10520                           ; BSR set to: 1
 10521  003778  0E00               	movlw	0
 10522  00377A  0101               	movlb	1	; () banked
 10523  00377C  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10524  00377E  0E00               	movlw	0
 10525  003780  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10526  003782  0E00               	movlw	0
 10527  003784  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10528  003786  0E00               	movlw	0
 10529  003788  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10530                           
 10531                           ; BSR set to: 1
 10532  00378A  0012               	return	
 10533  00378C                     l10126:
 10534                           
 10535                           ; BSR set to: 1
 10536  00378C  0101               	movlb	1	; () banked
 10537  00378E  8F01               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
 10538                           
 10539                           ; BSR set to: 1
 10540  003790  0EFF               	movlw	255
 10541  003792  0101               	movlb	1	; () banked
 10542  003794  1700               	andwf	__tdiv_to_l_@f1& (0+255),f,b
 10543  003796  0EFF               	movlw	255
 10544  003798  0101               	movlb	1	; () banked
 10545  00379A  1701               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10546  00379C  0E00               	movlw	0
 10547  00379E  0101               	movlb	1	; () banked
 10548  0037A0  1702               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10549  0037A2  0101               	movlb	1	; () banked
 10550  0037A4  8F04               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
 10551                           
 10552                           ; BSR set to: 1
 10553  0037A6  0EFF               	movlw	255
 10554  0037A8  0101               	movlb	1	; () banked
 10555  0037AA  1703               	andwf	__tdiv_to_l_@f2& (0+255),f,b
 10556  0037AC  0EFF               	movlw	255
 10557  0037AE  0101               	movlb	1	; () banked
 10558  0037B0  1704               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
 10559  0037B2  0E00               	movlw	0
 10560  0037B4  0101               	movlb	1	; () banked
 10561  0037B6  1705               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
 10562                           
 10563                           ; BSR set to: 1
 10564  0037B8  0E00               	movlw	0
 10565  0037BA  0101               	movlb	1	; () banked
 10566  0037BC  6F09               	movwf	__tdiv_to_l_@quot& (0+255),b
 10567  0037BE  0E00               	movlw	0
 10568  0037C0  6F0A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
 10569  0037C2  0E00               	movlw	0
 10570  0037C4  6F0B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
 10571  0037C6  0E00               	movlw	0
 10572  0037C8  6F0C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
 10573                           
 10574                           ; BSR set to: 1
 10575  0037CA  0E7F               	movlw	127
 10576  0037CC  0101               	movlb	1	; () banked
 10577  0037CE  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10578                           
 10579                           ; BSR set to: 1
 10580  0037D0  0101               	movlb	1	; () banked
 10581  0037D2  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 10582  0037D4  0F98               	addlw	152
 10583  0037D6  0101               	movlb	1	; () banked
 10584  0037D8  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10585                           
 10586                           ; BSR set to: 1
 10587  0037DA  0E18               	movlw	24
 10588  0037DC  0101               	movlb	1	; () banked
 10589  0037DE  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10590  0037E0                     l1376:
 10591                           
 10592                           ; BSR set to: 1
 10593  0037E0  0101               	movlb	1	; () banked
 10594  0037E2  90D8               	bcf	status,0,c
 10595  0037E4  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 10596  0037E6  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10597  0037E8  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10598  0037EA  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10599                           
 10600                           ; BSR set to: 1
 10601  0037EC  0101               	movlb	1	; () banked
 10602  0037EE  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10603  0037F0  0101               	movlb	1	; () banked
 10604  0037F2  5D00               	subwf	__tdiv_to_l_@f1& (0+255),w,b
 10605  0037F4  0101               	movlb	1	; () banked
 10606  0037F6  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10607  0037F8  0101               	movlb	1	; () banked
 10608  0037FA  5901               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10609  0037FC  0101               	movlb	1	; () banked
 10610  0037FE  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10611  003800  0101               	movlb	1	; () banked
 10612  003802  5902               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
 10613  003804  A0D8               	btfss	status,0,c
 10614  003806  D00E               	goto	l1377
 10615                           
 10616                           ; BSR set to: 1
 10617  003808  0101               	movlb	1	; () banked
 10618  00380A  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10619  00380C  0101               	movlb	1	; () banked
 10620  00380E  5F00               	subwf	__tdiv_to_l_@f1& (0+255),f,b
 10621  003810  0101               	movlb	1	; () banked
 10622  003812  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10623  003814  0101               	movlb	1	; () banked
 10624  003816  5B01               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10625  003818  0101               	movlb	1	; () banked
 10626  00381A  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10627  00381C  0101               	movlb	1	; () banked
 10628  00381E  5B02               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10629                           
 10630                           ; BSR set to: 1
 10631  003820  0101               	movlb	1	; () banked
 10632  003822  8109               	bsf	__tdiv_to_l_@quot& (0+255),0,b
 10633  003824                     l1377:
 10634                           
 10635                           ; BSR set to: 1
 10636  003824  0101               	movlb	1	; () banked
 10637  003826  90D8               	bcf	status,0,c
 10638  003828  3700               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
 10639  00382A  3701               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10640  00382C  3702               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10641                           
 10642                           ; BSR set to: 1
 10643  00382E  0101               	movlb	1	; () banked
 10644  003830  2F0D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
 10645  003832  D7D6               	goto	l1376
 10646                           
 10647                           ; BSR set to: 1
 10648                           
 10649                           ; BSR set to: 1
 10650  003834  0101               	movlb	1	; () banked
 10651  003836  AF0E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
 10652  003838  D01A               	goto	l10160
 10653                           
 10654                           ; BSR set to: 1
 10655  00383A  0101               	movlb	1	; () banked
 10656  00383C  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10657  00383E  0A80               	xorlw	128
 10658  003840  0F97               	addlw	151
 10659  003842  B0D8               	btfsc	status,0,c
 10660  003844  D00A               	goto	l10156
 10661                           
 10662                           ; BSR set to: 1
 10663  003846  0E00               	movlw	0
 10664  003848  0101               	movlb	1	; () banked
 10665  00384A  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10666  00384C  0E00               	movlw	0
 10667  00384E  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10668  003850  0E00               	movlw	0
 10669  003852  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10670  003854  0E00               	movlw	0
 10671  003856  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10672                           
 10673                           ; BSR set to: 1
 10674  003858  0012               	return	
 10675  00385A                     l10156:
 10676                           
 10677                           ; BSR set to: 1
 10678  00385A  0101               	movlb	1	; () banked
 10679  00385C  90D8               	bcf	status,0,c
 10680  00385E  330C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10681  003860  330B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10682  003862  330A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10683  003864  3309               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
 10684                           
 10685                           ; BSR set to: 1
 10686  003866  0101               	movlb	1	; () banked
 10687  003868  3F0E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
 10688  00386A  D7F7               	goto	l10156
 10689                           
 10690                           ; BSR set to: 1
 10691  00386C  D01B               	goto	l1383
 10692  00386E                     l10160:
 10693                           
 10694                           ; BSR set to: 1
 10695  00386E  0E17               	movlw	23
 10696  003870  0101               	movlb	1	; () banked
 10697  003872  650E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
 10698  003874  D012               	goto	l10168
 10699                           
 10700                           ; BSR set to: 1
 10701  003876  0E00               	movlw	0
 10702  003878  0101               	movlb	1	; () banked
 10703  00387A  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10704  00387C  0E00               	movlw	0
 10705  00387E  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10706  003880  0E00               	movlw	0
 10707  003882  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10708  003884  0E00               	movlw	0
 10709  003886  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10710                           
 10711                           ; BSR set to: 1
 10712  003888  0012               	return	
 10713  00388A                     l10166:
 10714                           
 10715                           ; BSR set to: 1
 10716  00388A  0101               	movlb	1	; () banked
 10717  00388C  90D8               	bcf	status,0,c
 10718  00388E  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 10719  003890  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10720  003892  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10721  003894  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10722  003896  0101               	movlb	1	; () banked
 10723  003898  070E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
 10724  00389A                     l10168:
 10725                           
 10726                           ; BSR set to: 1
 10727  00389A  0101               	movlb	1	; () banked
 10728  00389C  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10729  00389E  0101               	movlb	1	; () banked
 10730  0038A0  A4D8               	btfss	status,2,c
 10731  0038A2  D7F3               	goto	l10166
 10732  0038A4                     l1383:
 10733                           
 10734                           ; BSR set to: 1
 10735  0038A4  C109  F100         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 10736  0038A8  C10A  F101         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 10737  0038AC  C10B  F102         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 10738  0038B0  C10C  F103         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 10739                           
 10740                           ; BSR set to: 1
 10741  0038B4  0012               	return		;funcret
 10742  0038B6                     __end_of__tdiv_to_l_:
 10743                           	opt stack 0
 10744                           tblptru	equ	0xFF8
 10745                           tblptrh	equ	0xFF7
 10746                           tblptrl	equ	0xFF6
 10747                           tablat	equ	0xFF5
 10748                           prodh	equ	0xFF4
 10749                           prodl	equ	0xFF3
 10750                           intcon	equ	0xFF2
 10751                           postinc0	equ	0xFEE
 10752                           wreg	equ	0xFE8
 10753                           postdec1	equ	0xFE5
 10754                           fsr1l	equ	0xFE1
 10755                           indf2	equ	0xFDF
 10756                           postinc2	equ	0xFDE
 10757                           postdec2	equ	0xFDD
 10758                           fsr2h	equ	0xFDA
 10759                           fsr2l	equ	0xFD9
 10760                           status	equ	0xFD8
 10761                           
 10762 ;; *************** function __div_to_l_ *****************
 10763 ;; Defined at:
 10764 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fldivl.c"
 10765 ;; Parameters:    Size  Location     Type
 10766 ;;  f1              3    0[BANK1 ] unsigned long 
 10767 ;;  f2              3    3[BANK1 ] unsigned long 
 10768 ;; Auto vars:     Size  Location     Type
 10769 ;;  quot            4    6[BANK1 ] unsigned long 
 10770 ;;  exp1            1   11[BANK1 ] unsigned char 
 10771 ;;  cntr            1   10[BANK1 ] unsigned char 
 10772 ;; Return value:  Size  Location     Type
 10773 ;;                  4    0[BANK1 ] unsigned long 
 10774 ;; Registers used:
 10775 ;;		wreg, status,2, status,0
 10776 ;; Tracked objects:
 10777 ;;		On entry : 0/0
 10778 ;;		On exit  : 0/0
 10779 ;;		Unchanged: 0/0
 10780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10781 ;;      Params:         0       0       6       0       0       0       0
 10782 ;;      Locals:         0       0       6       0       0       0       0
 10783 ;;      Temps:          0       0       0       0       0       0       0
 10784 ;;      Totals:         0       0      12       0       0       0       0
 10785 ;;Total ram usage:       12 bytes
 10786 ;; Hardware stack levels used:    1
 10787 ;; Hardware stack levels required when called:   12
 10788 ;; This function calls:
 10789 ;;		Nothing
 10790 ;; This function is called by:
 10791 ;;		_printf
 10792 ;; This function uses a non-reentrant model
 10793 ;;
 10794                           
 10795                           	psect	text39
 10796  0038B6                     __ptext39:
 10797                           	opt stack 0
 10798  0038B6                     __div_to_l_:
 10799                           	opt stack 15
 10800                           
 10801                           ; BSR set to: 1
 10802                           ;incstack = 0
 10803  0038B6  0101               	movlb	1	; () banked
 10804  0038B8  3502               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
 10805  0038BA  3503               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
 10806  0038BC  0101               	movlb	1	; () banked
 10807  0038BE  6F0B               	movwf	__div_to_l_@exp1& (0+255),b
 10808  0038C0  0101               	movlb	1	; () banked
 10809  0038C2  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10810  0038C4  A4D8               	btfss	status,2,c
 10811  0038C6  D00A               	goto	l10176
 10812                           
 10813                           ; BSR set to: 1
 10814  0038C8  0E00               	movlw	0
 10815  0038CA  0101               	movlb	1	; () banked
 10816  0038CC  6F00               	movwf	?__div_to_l_& (0+255),b
 10817  0038CE  0E00               	movlw	0
 10818  0038D0  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10819  0038D2  0E00               	movlw	0
 10820  0038D4  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10821  0038D6  0E00               	movlw	0
 10822  0038D8  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10823                           
 10824                           ; BSR set to: 1
 10825  0038DA  0012               	return	
 10826  0038DC                     l10176:
 10827                           
 10828                           ; BSR set to: 1
 10829  0038DC  0101               	movlb	1	; () banked
 10830  0038DE  3505               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
 10831  0038E0  3506               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
 10832  0038E2  0101               	movlb	1	; () banked
 10833  0038E4  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
 10834  0038E6  0101               	movlb	1	; () banked
 10835  0038E8  510A               	movf	__div_to_l_@cntr& (0+255),w,b
 10836  0038EA  A4D8               	btfss	status,2,c
 10837  0038EC  D00A               	goto	l10182
 10838                           
 10839                           ; BSR set to: 1
 10840  0038EE  0E00               	movlw	0
 10841  0038F0  0101               	movlb	1	; () banked
 10842  0038F2  6F00               	movwf	?__div_to_l_& (0+255),b
 10843  0038F4  0E00               	movlw	0
 10844  0038F6  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10845  0038F8  0E00               	movlw	0
 10846  0038FA  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10847  0038FC  0E00               	movlw	0
 10848  0038FE  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10849                           
 10850                           ; BSR set to: 1
 10851  003900  0012               	return	
 10852  003902                     l10182:
 10853                           
 10854                           ; BSR set to: 1
 10855  003902  0101               	movlb	1	; () banked
 10856  003904  8F02               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
 10857                           
 10858                           ; BSR set to: 1
 10859  003906  0EFF               	movlw	255
 10860  003908  0101               	movlb	1	; () banked
 10861  00390A  1700               	andwf	__div_to_l_@f1& (0+255),f,b
 10862  00390C  0EFF               	movlw	255
 10863  00390E  1701               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
 10864  003910  0EFF               	movlw	255
 10865  003912  1702               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
 10866  003914  0E00               	movlw	0
 10867  003916  1703               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
 10868                           
 10869                           ; BSR set to: 1
 10870  003918  0101               	movlb	1	; () banked
 10871  00391A  8F05               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
 10872  00391C  0EFF               	movlw	255
 10873  00391E  0101               	movlb	1	; () banked
 10874  003920  1703               	andwf	__div_to_l_@f2& (0+255),f,b
 10875  003922  0EFF               	movlw	255
 10876  003924  1704               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
 10877  003926  0EFF               	movlw	255
 10878  003928  1705               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
 10879  00392A  0E00               	movlw	0
 10880  00392C  1706               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
 10881                           
 10882                           ; BSR set to: 1
 10883  00392E  0E00               	movlw	0
 10884  003930  0101               	movlb	1	; () banked
 10885  003932  6F06               	movwf	__div_to_l_@quot& (0+255),b
 10886  003934  0E00               	movlw	0
 10887  003936  6F07               	movwf	(__div_to_l_@quot+1)& (0+255),b
 10888  003938  0E00               	movlw	0
 10889  00393A  6F08               	movwf	(__div_to_l_@quot+2)& (0+255),b
 10890  00393C  0E00               	movlw	0
 10891  00393E  6F09               	movwf	(__div_to_l_@quot+3)& (0+255),b
 10892                           
 10893                           ; BSR set to: 1
 10894  003940  0E7F               	movlw	127
 10895  003942  0101               	movlb	1	; () banked
 10896  003944  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
 10897                           
 10898                           ; BSR set to: 1
 10899  003946  0101               	movlb	1	; () banked
 10900  003948  510A               	movf	__div_to_l_@cntr& (0+255),w,b
 10901  00394A  0FA0               	addlw	160
 10902  00394C  0101               	movlb	1	; () banked
 10903  00394E  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
 10904                           
 10905                           ; BSR set to: 1
 10906  003950  0E20               	movlw	32
 10907  003952  0101               	movlb	1	; () banked
 10908  003954  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
 10909  003956                     l10196:
 10910                           
 10911                           ; BSR set to: 1
 10912  003956  0101               	movlb	1	; () banked
 10913  003958  90D8               	bcf	status,0,c
 10914  00395A  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
 10915  00395C  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 10916  00395E  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 10917  003960  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 10918                           
 10919                           ; BSR set to: 1
 10920  003962  0101               	movlb	1	; () banked
 10921  003964  5103               	movf	__div_to_l_@f2& (0+255),w,b
 10922  003966  0101               	movlb	1	; () banked
 10923  003968  5D00               	subwf	__div_to_l_@f1& (0+255),w,b
 10924  00396A  0101               	movlb	1	; () banked
 10925  00396C  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 10926  00396E  0101               	movlb	1	; () banked
 10927  003970  5901               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
 10928  003972  0101               	movlb	1	; () banked
 10929  003974  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 10930  003976  0101               	movlb	1	; () banked
 10931  003978  5902               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
 10932  00397A  0101               	movlb	1	; () banked
 10933  00397C  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 10934  00397E  0101               	movlb	1	; () banked
 10935  003980  5903               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
 10936  003982  A0D8               	btfss	status,0,c
 10937  003984  D012               	goto	l10204
 10938                           
 10939                           ; BSR set to: 1
 10940  003986  0101               	movlb	1	; () banked
 10941  003988  5103               	movf	__div_to_l_@f2& (0+255),w,b
 10942  00398A  0101               	movlb	1	; () banked
 10943  00398C  5F00               	subwf	__div_to_l_@f1& (0+255),f,b
 10944  00398E  0101               	movlb	1	; () banked
 10945  003990  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 10946  003992  0101               	movlb	1	; () banked
 10947  003994  5B01               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
 10948  003996  0101               	movlb	1	; () banked
 10949  003998  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 10950  00399A  0101               	movlb	1	; () banked
 10951  00399C  5B02               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
 10952  00399E  0101               	movlb	1	; () banked
 10953  0039A0  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 10954  0039A2  0101               	movlb	1	; () banked
 10955  0039A4  5B03               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
 10956                           
 10957                           ; BSR set to: 1
 10958  0039A6  0101               	movlb	1	; () banked
 10959  0039A8  8106               	bsf	__div_to_l_@quot& (0+255),0,b
 10960  0039AA                     l10204:
 10961                           
 10962                           ; BSR set to: 1
 10963  0039AA  0101               	movlb	1	; () banked
 10964  0039AC  90D8               	bcf	status,0,c
 10965  0039AE  3700               	rlcf	__div_to_l_@f1& (0+255),f,b
 10966  0039B0  3701               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
 10967  0039B2  3702               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
 10968  0039B4  3703               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
 10969                           
 10970                           ; BSR set to: 1
 10971  0039B6  0101               	movlb	1	; () banked
 10972  0039B8  2F0A               	decfsz	__div_to_l_@cntr& (0+255),f,b
 10973  0039BA  D7CD               	goto	l10196
 10974                           
 10975                           ; BSR set to: 1
 10976                           
 10977                           ; BSR set to: 1
 10978  0039BC  0101               	movlb	1	; () banked
 10979  0039BE  AF0B               	btfss	__div_to_l_@exp1& (0+255),7,b
 10980  0039C0  D01A               	goto	l10220
 10981                           
 10982                           ; BSR set to: 1
 10983  0039C2  0101               	movlb	1	; () banked
 10984  0039C4  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10985  0039C6  0A80               	xorlw	128
 10986  0039C8  0F9F               	addlw	159
 10987  0039CA  B0D8               	btfsc	status,0,c
 10988  0039CC  D00A               	goto	l10216
 10989                           
 10990                           ; BSR set to: 1
 10991  0039CE  0E00               	movlw	0
 10992  0039D0  0101               	movlb	1	; () banked
 10993  0039D2  6F00               	movwf	?__div_to_l_& (0+255),b
 10994  0039D4  0E00               	movlw	0
 10995  0039D6  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10996  0039D8  0E00               	movlw	0
 10997  0039DA  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10998  0039DC  0E00               	movlw	0
 10999  0039DE  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 11000                           
 11001                           ; BSR set to: 1
 11002  0039E0  0012               	return	
 11003  0039E2                     l10216:
 11004                           
 11005                           ; BSR set to: 1
 11006  0039E2  0101               	movlb	1	; () banked
 11007  0039E4  90D8               	bcf	status,0,c
 11008  0039E6  3309               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
 11009  0039E8  3308               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
 11010  0039EA  3307               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
 11011  0039EC  3306               	rrcf	__div_to_l_@quot& (0+255),f,b
 11012                           
 11013                           ; BSR set to: 1
 11014  0039EE  0101               	movlb	1	; () banked
 11015  0039F0  3F0B               	incfsz	__div_to_l_@exp1& (0+255),f,b
 11016  0039F2  D7F7               	goto	l10216
 11017                           
 11018                           ; BSR set to: 1
 11019  0039F4  D01B               	goto	l1279
 11020  0039F6                     l10220:
 11021                           
 11022                           ; BSR set to: 1
 11023  0039F6  0E1F               	movlw	31
 11024  0039F8  0101               	movlb	1	; () banked
 11025  0039FA  650B               	cpfsgt	__div_to_l_@exp1& (0+255),b
 11026  0039FC  D012               	goto	l10228
 11027                           
 11028                           ; BSR set to: 1
 11029  0039FE  0E00               	movlw	0
 11030  003A00  0101               	movlb	1	; () banked
 11031  003A02  6F00               	movwf	?__div_to_l_& (0+255),b
 11032  003A04  0E00               	movlw	0
 11033  003A06  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 11034  003A08  0E00               	movlw	0
 11035  003A0A  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 11036  003A0C  0E00               	movlw	0
 11037  003A0E  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 11038                           
 11039                           ; BSR set to: 1
 11040  003A10  0012               	return	
 11041  003A12                     l10226:
 11042                           
 11043                           ; BSR set to: 1
 11044  003A12  0101               	movlb	1	; () banked
 11045  003A14  90D8               	bcf	status,0,c
 11046  003A16  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
 11047  003A18  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 11048  003A1A  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 11049  003A1C  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 11050  003A1E  0101               	movlb	1	; () banked
 11051  003A20  070B               	decf	__div_to_l_@exp1& (0+255),f,b
 11052  003A22                     l10228:
 11053                           
 11054                           ; BSR set to: 1
 11055  003A22  0101               	movlb	1	; () banked
 11056  003A24  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 11057  003A26  0101               	movlb	1	; () banked
 11058  003A28  A4D8               	btfss	status,2,c
 11059  003A2A  D7F3               	goto	l10226
 11060  003A2C                     l1279:
 11061                           
 11062                           ; BSR set to: 1
 11063  003A2C  C106  F100         	movff	__div_to_l_@quot,?__div_to_l_
 11064  003A30  C107  F101         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 11065  003A34  C108  F102         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 11066  003A38  C109  F103         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 11067                           
 11068                           ; BSR set to: 1
 11069  003A3C  0012               	return		;funcret
 11070  003A3E                     __end_of__div_to_l_:
 11071                           	opt stack 0
 11072                           tblptru	equ	0xFF8
 11073                           tblptrh	equ	0xFF7
 11074                           tblptrl	equ	0xFF6
 11075                           tablat	equ	0xFF5
 11076                           prodh	equ	0xFF4
 11077                           prodl	equ	0xFF3
 11078                           intcon	equ	0xFF2
 11079                           postinc0	equ	0xFEE
 11080                           wreg	equ	0xFE8
 11081                           postdec1	equ	0xFE5
 11082                           fsr1l	equ	0xFE1
 11083                           indf2	equ	0xFDF
 11084                           postinc2	equ	0xFDE
 11085                           postdec2	equ	0xFDD
 11086                           fsr2h	equ	0xFDA
 11087                           fsr2l	equ	0xFD9
 11088                           status	equ	0xFD8
 11089                           
 11090 ;; *************** function ___lltoft *****************
 11091 ;; Defined at:
 11092 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lltoft.c"
 11093 ;; Parameters:    Size  Location     Type
 11094 ;;  c               4    8[BANK1 ] unsigned long 
 11095 ;; Auto vars:     Size  Location     Type
 11096 ;;  exp             1   16[BANK1 ] unsigned char 
 11097 ;; Return value:  Size  Location     Type
 11098 ;;                  3    8[BANK1 ] float 
 11099 ;; Registers used:
 11100 ;;		wreg, status,2, status,0, cstack
 11101 ;; Tracked objects:
 11102 ;;		On entry : 0/0
 11103 ;;		On exit  : 0/0
 11104 ;;		Unchanged: 0/0
 11105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11106 ;;      Params:         0       0       4       0       0       0       0
 11107 ;;      Locals:         0       0       1       0       0       0       0
 11108 ;;      Temps:          0       0       4       0       0       0       0
 11109 ;;      Totals:         0       0       9       0       0       0       0
 11110 ;;Total ram usage:        9 bytes
 11111 ;; Hardware stack levels used:    1
 11112 ;; Hardware stack levels required when called:   13
 11113 ;; This function calls:
 11114 ;;		___ftpack
 11115 ;; This function is called by:
 11116 ;;		_printf
 11117 ;; This function uses a non-reentrant model
 11118 ;;
 11119                           
 11120                           	psect	text40
 11121  0065B0                     __ptext40:
 11122                           	opt stack 0
 11123  0065B0                     ___lltoft:
 11124                           	opt stack 14
 11125                           
 11126                           ; BSR set to: 1
 11127                           ;incstack = 0
 11128  0065B0  0E8E               	movlw	142
 11129  0065B2  0101               	movlb	1	; () banked
 11130  0065B4  6F10               	movwf	___lltoft@exp& (0+255),b
 11131  0065B6  D008               	goto	l10302
 11132  0065B8                     l10300:
 11133                           
 11134                           ; BSR set to: 1
 11135  0065B8  0101               	movlb	1	; () banked
 11136  0065BA  90D8               	bcf	status,0,c
 11137  0065BC  330B               	rrcf	(___lltoft@c+3)& (0+255),f,b
 11138  0065BE  330A               	rrcf	(___lltoft@c+2)& (0+255),f,b
 11139  0065C0  3309               	rrcf	(___lltoft@c+1)& (0+255),f,b
 11140  0065C2  3308               	rrcf	___lltoft@c& (0+255),f,b
 11141  0065C4  0101               	movlb	1	; () banked
 11142  0065C6  2B10               	incf	___lltoft@exp& (0+255),f,b
 11143  0065C8                     l10302:
 11144                           
 11145                           ; BSR set to: 1
 11146  0065C8  0E00               	movlw	0
 11147  0065CA  0101               	movlb	1	; () banked
 11148  0065CC  1508               	andwf	___lltoft@c& (0+255),w,b
 11149  0065CE  0101               	movlb	1	; () banked
 11150  0065D0  6F0C               	movwf	??___lltoft& (0+255),b
 11151  0065D2  0E00               	movlw	0
 11152  0065D4  0101               	movlb	1	; () banked
 11153  0065D6  1509               	andwf	(___lltoft@c+1)& (0+255),w,b
 11154  0065D8  0101               	movlb	1	; () banked
 11155  0065DA  6F0D               	movwf	(??___lltoft+1)& (0+255),b
 11156  0065DC  0E00               	movlw	0
 11157  0065DE  0101               	movlb	1	; () banked
 11158  0065E0  150A               	andwf	(___lltoft@c+2)& (0+255),w,b
 11159  0065E2  0101               	movlb	1	; () banked
 11160  0065E4  6F0E               	movwf	(??___lltoft+2)& (0+255),b
 11161  0065E6  0EFF               	movlw	255
 11162  0065E8  0101               	movlb	1	; () banked
 11163  0065EA  150B               	andwf	(___lltoft@c+3)& (0+255),w,b
 11164  0065EC  0101               	movlb	1	; () banked
 11165  0065EE  6F0F               	movwf	(??___lltoft+3)& (0+255),b
 11166  0065F0  0101               	movlb	1	; () banked
 11167  0065F2  510C               	movf	??___lltoft& (0+255),w,b
 11168  0065F4  0101               	movlb	1	; () banked
 11169  0065F6  110D               	iorwf	(??___lltoft+1)& (0+255),w,b
 11170  0065F8  0101               	movlb	1	; () banked
 11171  0065FA  110E               	iorwf	(??___lltoft+2)& (0+255),w,b
 11172  0065FC  0101               	movlb	1	; () banked
 11173  0065FE  110F               	iorwf	(??___lltoft+3)& (0+255),w,b
 11174  006600  A4D8               	btfss	status,2,c
 11175  006602  D7DA               	goto	l10300
 11176                           
 11177                           ; BSR set to: 1
 11178                           
 11179                           ; BSR set to: 1
 11180  006604  C108  F100         	movff	___lltoft@c,___ftpack@arg
 11181  006608  C109  F101         	movff	___lltoft@c+1,___ftpack@arg+1
 11182  00660C  C10A  F102         	movff	___lltoft@c+2,___ftpack@arg+2
 11183  006610  C110  F103         	movff	___lltoft@exp,___ftpack@exp
 11184  006614  0E00               	movlw	0
 11185  006616  0101               	movlb	1	; () banked
 11186  006618  6F04               	movwf	___ftpack@sign& (0+255),b
 11187  00661A  EC69  F025         	call	___ftpack	;wreg free
 11188  00661E  C100  F108         	movff	?___ftpack,?___lltoft
 11189  006622  C101  F109         	movff	?___ftpack+1,?___lltoft+1
 11190  006626  C102  F10A         	movff	?___ftpack+2,?___lltoft+2
 11191  00662A  0012               	return	
 11192  00662C                     __end_of___lltoft:
 11193                           	opt stack 0
 11194                           tblptru	equ	0xFF8
 11195                           tblptrh	equ	0xFF7
 11196                           tblptrl	equ	0xFF6
 11197                           tablat	equ	0xFF5
 11198                           prodh	equ	0xFF4
 11199                           prodl	equ	0xFF3
 11200                           intcon	equ	0xFF2
 11201                           postinc0	equ	0xFEE
 11202                           wreg	equ	0xFE8
 11203                           postdec1	equ	0xFE5
 11204                           fsr1l	equ	0xFE1
 11205                           indf2	equ	0xFDF
 11206                           postinc2	equ	0xFDE
 11207                           postdec2	equ	0xFDD
 11208                           fsr2h	equ	0xFDA
 11209                           fsr2l	equ	0xFD9
 11210                           status	equ	0xFD8
 11211                           
 11212 ;; *************** function ___llmod *****************
 11213 ;; Defined at:
 11214 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
 11215 ;; Parameters:    Size  Location     Type
 11216 ;;  dividend        4   13[BANK1 ] unsigned long 
 11217 ;;  divisor         4   17[BANK1 ] unsigned long 
 11218 ;; Auto vars:     Size  Location     Type
 11219 ;;  counter         1   21[BANK1 ] unsigned char 
 11220 ;; Return value:  Size  Location     Type
 11221 ;;                  4   13[BANK1 ] unsigned long 
 11222 ;; Registers used:
 11223 ;;		wreg, status,2, status,0
 11224 ;; Tracked objects:
 11225 ;;		On entry : 0/0
 11226 ;;		On exit  : 0/0
 11227 ;;		Unchanged: 0/0
 11228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11229 ;;      Params:         0       0       8       0       0       0       0
 11230 ;;      Locals:         0       0       1       0       0       0       0
 11231 ;;      Temps:          0       0       0       0       0       0       0
 11232 ;;      Totals:         0       0       9       0       0       0       0
 11233 ;;Total ram usage:        9 bytes
 11234 ;; Hardware stack levels used:    1
 11235 ;; Hardware stack levels required when called:   12
 11236 ;; This function calls:
 11237 ;;		Nothing
 11238 ;; This function is called by:
 11239 ;;		_printf
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           	psect	text41
 11244  005E6E                     __ptext41:
 11245                           	opt stack 0
 11246  005E6E                     ___llmod:
 11247                           	opt stack 15
 11248                           
 11249                           ;incstack = 0
 11250  005E6E  0101               	movlb	1	; () banked
 11251  005E70  5111               	movf	___llmod@divisor& (0+255),w,b
 11252  005E72  0101               	movlb	1	; () banked
 11253  005E74  1112               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 11254  005E76  0101               	movlb	1	; () banked
 11255  005E78  1113               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 11256  005E7A  0101               	movlb	1	; () banked
 11257  005E7C  1114               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 11258  005E7E  B4D8               	btfsc	status,2,c
 11259  005E80  D03A               	goto	l1468
 11260                           
 11261                           ; BSR set to: 1
 11262  005E82  0E01               	movlw	1
 11263  005E84  0101               	movlb	1	; () banked
 11264  005E86  6F15               	movwf	___llmod@counter& (0+255),b
 11265  005E88  D008               	goto	l10288
 11266  005E8A                     l10286:
 11267                           
 11268                           ; BSR set to: 1
 11269  005E8A  0101               	movlb	1	; () banked
 11270  005E8C  90D8               	bcf	status,0,c
 11271  005E8E  3711               	rlcf	___llmod@divisor& (0+255),f,b
 11272  005E90  3712               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 11273  005E92  3713               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 11274  005E94  3714               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 11275  005E96  0101               	movlb	1	; () banked
 11276  005E98  2B15               	incf	___llmod@counter& (0+255),f,b
 11277  005E9A                     l10288:
 11278                           
 11279                           ; BSR set to: 1
 11280  005E9A  0101               	movlb	1	; () banked
 11281  005E9C  AF14               	btfss	(___llmod@divisor+3)& (0+255),7,b
 11282  005E9E  D7F5               	goto	l10286
 11283  005EA0                     l10290:
 11284                           
 11285                           ; BSR set to: 1
 11286  005EA0  0101               	movlb	1	; () banked
 11287  005EA2  5111               	movf	___llmod@divisor& (0+255),w,b
 11288  005EA4  0101               	movlb	1	; () banked
 11289  005EA6  5D0D               	subwf	___llmod@dividend& (0+255),w,b
 11290  005EA8  0101               	movlb	1	; () banked
 11291  005EAA  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
 11292  005EAC  0101               	movlb	1	; () banked
 11293  005EAE  590E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 11294  005EB0  0101               	movlb	1	; () banked
 11295  005EB2  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
 11296  005EB4  0101               	movlb	1	; () banked
 11297  005EB6  590F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 11298  005EB8  0101               	movlb	1	; () banked
 11299  005EBA  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
 11300  005EBC  0101               	movlb	1	; () banked
 11301  005EBE  5910               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 11302  005EC0  A0D8               	btfss	status,0,c
 11303  005EC2  D010               	goto	l10294
 11304                           
 11305                           ; BSR set to: 1
 11306  005EC4  0101               	movlb	1	; () banked
 11307  005EC6  5111               	movf	___llmod@divisor& (0+255),w,b
 11308  005EC8  0101               	movlb	1	; () banked
 11309  005ECA  5F0D               	subwf	___llmod@dividend& (0+255),f,b
 11310  005ECC  0101               	movlb	1	; () banked
 11311  005ECE  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
 11312  005ED0  0101               	movlb	1	; () banked
 11313  005ED2  5B0E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 11314  005ED4  0101               	movlb	1	; () banked
 11315  005ED6  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
 11316  005ED8  0101               	movlb	1	; () banked
 11317  005EDA  5B0F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 11318  005EDC  0101               	movlb	1	; () banked
 11319  005EDE  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
 11320  005EE0  0101               	movlb	1	; () banked
 11321  005EE2  5B10               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 11322  005EE4                     l10294:
 11323                           
 11324                           ; BSR set to: 1
 11325  005EE4  0101               	movlb	1	; () banked
 11326  005EE6  90D8               	bcf	status,0,c
 11327  005EE8  3314               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 11328  005EEA  3313               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 11329  005EEC  3312               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 11330  005EEE  3311               	rrcf	___llmod@divisor& (0+255),f,b
 11331                           
 11332                           ; BSR set to: 1
 11333  005EF0  0101               	movlb	1	; () banked
 11334  005EF2  2F15               	decfsz	___llmod@counter& (0+255),f,b
 11335  005EF4  D7D5               	goto	l10290
 11336  005EF6                     l1468:
 11337                           
 11338                           ; BSR set to: 1
 11339  005EF6  C10D  F10D         	movff	___llmod@dividend,?___llmod
 11340  005EFA  C10E  F10E         	movff	___llmod@dividend+1,?___llmod+1
 11341  005EFE  C10F  F10F         	movff	___llmod@dividend+2,?___llmod+2
 11342  005F02  C110  F110         	movff	___llmod@dividend+3,?___llmod+3
 11343                           
 11344                           ; BSR set to: 1
 11345  005F06  0012               	return		;funcret
 11346  005F08                     __end_of___llmod:
 11347                           	opt stack 0
 11348                           tblptru	equ	0xFF8
 11349                           tblptrh	equ	0xFF7
 11350                           tblptrl	equ	0xFF6
 11351                           tablat	equ	0xFF5
 11352                           prodh	equ	0xFF4
 11353                           prodl	equ	0xFF3
 11354                           intcon	equ	0xFF2
 11355                           postinc0	equ	0xFEE
 11356                           wreg	equ	0xFE8
 11357                           postdec1	equ	0xFE5
 11358                           fsr1l	equ	0xFE1
 11359                           indf2	equ	0xFDF
 11360                           postinc2	equ	0xFDE
 11361                           postdec2	equ	0xFDD
 11362                           fsr2h	equ	0xFDA
 11363                           fsr2l	equ	0xFD9
 11364                           status	equ	0xFD8
 11365                           
 11366 ;; *************** function ___lldiv *****************
 11367 ;; Defined at:
 11368 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
 11369 ;; Parameters:    Size  Location     Type
 11370 ;;  dividend        4    0[BANK1 ] unsigned long 
 11371 ;;  divisor         4    4[BANK1 ] unsigned long 
 11372 ;; Auto vars:     Size  Location     Type
 11373 ;;  quotient        4    8[BANK1 ] unsigned long 
 11374 ;;  counter         1   12[BANK1 ] unsigned char 
 11375 ;; Return value:  Size  Location     Type
 11376 ;;                  4    0[BANK1 ] unsigned long 
 11377 ;; Registers used:
 11378 ;;		wreg, status,2, status,0
 11379 ;; Tracked objects:
 11380 ;;		On entry : 0/0
 11381 ;;		On exit  : 0/0
 11382 ;;		Unchanged: 0/0
 11383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11384 ;;      Params:         0       0       8       0       0       0       0
 11385 ;;      Locals:         0       0       5       0       0       0       0
 11386 ;;      Temps:          0       0       0       0       0       0       0
 11387 ;;      Totals:         0       0      13       0       0       0       0
 11388 ;;Total ram usage:       13 bytes
 11389 ;; Hardware stack levels used:    1
 11390 ;; Hardware stack levels required when called:   12
 11391 ;; This function calls:
 11392 ;;		Nothing
 11393 ;; This function is called by:
 11394 ;;		_printf
 11395 ;; This function uses a non-reentrant model
 11396 ;;
 11397                           
 11398                           	psect	text42
 11399  00590E                     __ptext42:
 11400                           	opt stack 0
 11401  00590E                     ___lldiv:
 11402                           	opt stack 15
 11403                           
 11404                           ; BSR set to: 1
 11405                           ;incstack = 0
 11406  00590E  0E00               	movlw	0
 11407  005910  0101               	movlb	1	; () banked
 11408  005912  6F08               	movwf	___lldiv@quotient& (0+255),b
 11409  005914  0E00               	movlw	0
 11410  005916  6F09               	movwf	(___lldiv@quotient+1)& (0+255),b
 11411  005918  0E00               	movlw	0
 11412  00591A  6F0A               	movwf	(___lldiv@quotient+2)& (0+255),b
 11413  00591C  0E00               	movlw	0
 11414  00591E  6F0B               	movwf	(___lldiv@quotient+3)& (0+255),b
 11415                           
 11416                           ; BSR set to: 1
 11417  005920  0101               	movlb	1	; () banked
 11418  005922  5104               	movf	___lldiv@divisor& (0+255),w,b
 11419  005924  0101               	movlb	1	; () banked
 11420  005926  1105               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 11421  005928  0101               	movlb	1	; () banked
 11422  00592A  1106               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 11423  00592C  0101               	movlb	1	; () banked
 11424  00592E  1107               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 11425  005930  B4D8               	btfsc	status,2,c
 11426  005932  D042               	goto	l1458
 11427                           
 11428                           ; BSR set to: 1
 11429  005934  0E01               	movlw	1
 11430  005936  0101               	movlb	1	; () banked
 11431  005938  6F0C               	movwf	___lldiv@counter& (0+255),b
 11432  00593A  D008               	goto	l10268
 11433  00593C                     l10266:
 11434                           
 11435                           ; BSR set to: 1
 11436  00593C  0101               	movlb	1	; () banked
 11437  00593E  90D8               	bcf	status,0,c
 11438  005940  3704               	rlcf	___lldiv@divisor& (0+255),f,b
 11439  005942  3705               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 11440  005944  3706               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 11441  005946  3707               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 11442  005948  0101               	movlb	1	; () banked
 11443  00594A  2B0C               	incf	___lldiv@counter& (0+255),f,b
 11444  00594C                     l10268:
 11445                           
 11446                           ; BSR set to: 1
 11447  00594C  0101               	movlb	1	; () banked
 11448  00594E  AF07               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 11449  005950  D7F5               	goto	l10266
 11450  005952                     l10270:
 11451                           
 11452                           ; BSR set to: 1
 11453  005952  0101               	movlb	1	; () banked
 11454  005954  90D8               	bcf	status,0,c
 11455  005956  3708               	rlcf	___lldiv@quotient& (0+255),f,b
 11456  005958  3709               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 11457  00595A  370A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 11458  00595C  370B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 11459                           
 11460                           ; BSR set to: 1
 11461  00595E  0101               	movlb	1	; () banked
 11462  005960  5104               	movf	___lldiv@divisor& (0+255),w,b
 11463  005962  0101               	movlb	1	; () banked
 11464  005964  5D00               	subwf	___lldiv@dividend& (0+255),w,b
 11465  005966  0101               	movlb	1	; () banked
 11466  005968  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11467  00596A  0101               	movlb	1	; () banked
 11468  00596C  5901               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 11469  00596E  0101               	movlb	1	; () banked
 11470  005970  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11471  005972  0101               	movlb	1	; () banked
 11472  005974  5902               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 11473  005976  0101               	movlb	1	; () banked
 11474  005978  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11475  00597A  0101               	movlb	1	; () banked
 11476  00597C  5903               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 11477  00597E  A0D8               	btfss	status,0,c
 11478  005980  D012               	goto	l10278
 11479                           
 11480                           ; BSR set to: 1
 11481  005982  0101               	movlb	1	; () banked
 11482  005984  5104               	movf	___lldiv@divisor& (0+255),w,b
 11483  005986  0101               	movlb	1	; () banked
 11484  005988  5F00               	subwf	___lldiv@dividend& (0+255),f,b
 11485  00598A  0101               	movlb	1	; () banked
 11486  00598C  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11487  00598E  0101               	movlb	1	; () banked
 11488  005990  5B01               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 11489  005992  0101               	movlb	1	; () banked
 11490  005994  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11491  005996  0101               	movlb	1	; () banked
 11492  005998  5B02               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 11493  00599A  0101               	movlb	1	; () banked
 11494  00599C  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11495  00599E  0101               	movlb	1	; () banked
 11496  0059A0  5B03               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 11497                           
 11498                           ; BSR set to: 1
 11499  0059A2  0101               	movlb	1	; () banked
 11500  0059A4  8108               	bsf	___lldiv@quotient& (0+255),0,b
 11501  0059A6                     l10278:
 11502                           
 11503                           ; BSR set to: 1
 11504  0059A6  0101               	movlb	1	; () banked
 11505  0059A8  90D8               	bcf	status,0,c
 11506  0059AA  3307               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 11507  0059AC  3306               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 11508  0059AE  3305               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 11509  0059B0  3304               	rrcf	___lldiv@divisor& (0+255),f,b
 11510                           
 11511                           ; BSR set to: 1
 11512  0059B2  0101               	movlb	1	; () banked
 11513  0059B4  2F0C               	decfsz	___lldiv@counter& (0+255),f,b
 11514  0059B6  D7CD               	goto	l10270
 11515  0059B8                     l1458:
 11516                           
 11517                           ; BSR set to: 1
 11518  0059B8  C108  F100         	movff	___lldiv@quotient,?___lldiv
 11519  0059BC  C109  F101         	movff	___lldiv@quotient+1,?___lldiv+1
 11520  0059C0  C10A  F102         	movff	___lldiv@quotient+2,?___lldiv+2
 11521  0059C4  C10B  F103         	movff	___lldiv@quotient+3,?___lldiv+3
 11522                           
 11523                           ; BSR set to: 1
 11524  0059C8  0012               	return		;funcret
 11525  0059CA                     __end_of___lldiv:
 11526                           	opt stack 0
 11527                           tblptru	equ	0xFF8
 11528                           tblptrh	equ	0xFF7
 11529                           tblptrl	equ	0xFF6
 11530                           tablat	equ	0xFF5
 11531                           prodh	equ	0xFF4
 11532                           prodl	equ	0xFF3
 11533                           intcon	equ	0xFF2
 11534                           postinc0	equ	0xFEE
 11535                           wreg	equ	0xFE8
 11536                           postdec1	equ	0xFE5
 11537                           fsr1l	equ	0xFE1
 11538                           indf2	equ	0xFDF
 11539                           postinc2	equ	0xFDE
 11540                           postdec2	equ	0xFDD
 11541                           fsr2h	equ	0xFDA
 11542                           fsr2l	equ	0xFD9
 11543                           status	equ	0xFD8
 11544                           
 11545 ;; *************** function ___ftsub *****************
 11546 ;; Defined at:
 11547 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
 11548 ;; Parameters:    Size  Location     Type
 11549 ;;  f1              3   57[BANK1 ] float 
 11550 ;;  f2              3   60[BANK1 ] float 
 11551 ;; Auto vars:     Size  Location     Type
 11552 ;;		None
 11553 ;; Return value:  Size  Location     Type
 11554 ;;                  3   57[BANK1 ] float 
 11555 ;; Registers used:
 11556 ;;		wreg, status,2, status,0, cstack
 11557 ;; Tracked objects:
 11558 ;;		On entry : 0/0
 11559 ;;		On exit  : 0/0
 11560 ;;		Unchanged: 0/0
 11561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11562 ;;      Params:         0       0       6       0       0       0       0
 11563 ;;      Locals:         0       0       0       0       0       0       0
 11564 ;;      Temps:          0       0       0       0       0       0       0
 11565 ;;      Totals:         0       0       6       0       0       0       0
 11566 ;;Total ram usage:        6 bytes
 11567 ;; Hardware stack levels used:    1
 11568 ;; Hardware stack levels required when called:   14
 11569 ;; This function calls:
 11570 ;;		___ftadd
 11571 ;; This function is called by:
 11572 ;;		_printf
 11573 ;; This function uses a non-reentrant model
 11574 ;;
 11575                           
 11576                           	psect	text43
 11577  006D00                     __ptext43:
 11578                           	opt stack 0
 11579  006D00                     ___ftsub:
 11580                           	opt stack 13
 11581                           
 11582                           ; BSR set to: 1
 11583                           ;incstack = 0
 11584  006D00  0101               	movlb	1	; () banked
 11585  006D02  513C               	movf	___ftsub@f2& (0+255),w,b
 11586  006D04  0101               	movlb	1	; () banked
 11587  006D06  113D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 11588  006D08  0101               	movlb	1	; () banked
 11589  006D0A  113E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 11590  006D0C  B4D8               	btfsc	status,2,c
 11591  006D0E  D009               	goto	l10234
 11592                           
 11593                           ; BSR set to: 1
 11594  006D10  0E00               	movlw	0
 11595  006D12  0101               	movlb	1	; () banked
 11596  006D14  1B3C               	xorwf	___ftsub@f2& (0+255),f,b
 11597  006D16  0E00               	movlw	0
 11598  006D18  0101               	movlb	1	; () banked
 11599  006D1A  1B3D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 11600  006D1C  0E80               	movlw	128
 11601  006D1E  0101               	movlb	1	; () banked
 11602  006D20  1B3E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 11603  006D22                     l10234:
 11604                           
 11605                           ; BSR set to: 1
 11606  006D22  C139  F12D         	movff	___ftsub@f1,___ftadd@f1
 11607  006D26  C13A  F12E         	movff	___ftsub@f1+1,___ftadd@f1+1
 11608  006D2A  C13B  F12F         	movff	___ftsub@f1+2,___ftadd@f1+2
 11609  006D2E  C13C  F130         	movff	___ftsub@f2,___ftadd@f2
 11610  006D32  C13D  F131         	movff	___ftsub@f2+1,___ftadd@f2+1
 11611  006D36  C13E  F132         	movff	___ftsub@f2+2,___ftadd@f2+2
 11612  006D3A  ECEC  F013         	call	___ftadd	;wreg free
 11613  006D3E  C12D  F139         	movff	?___ftadd,?___ftsub
 11614  006D42  C12E  F13A         	movff	?___ftadd+1,?___ftsub+1
 11615  006D46  C12F  F13B         	movff	?___ftadd+2,?___ftsub+2
 11616  006D4A  0012               	return	
 11617  006D4C                     __end_of___ftsub:
 11618                           	opt stack 0
 11619                           tblptru	equ	0xFF8
 11620                           tblptrh	equ	0xFF7
 11621                           tblptrl	equ	0xFF6
 11622                           tablat	equ	0xFF5
 11623                           prodh	equ	0xFF4
 11624                           prodl	equ	0xFF3
 11625                           intcon	equ	0xFF2
 11626                           postinc0	equ	0xFEE
 11627                           wreg	equ	0xFE8
 11628                           postdec1	equ	0xFE5
 11629                           fsr1l	equ	0xFE1
 11630                           indf2	equ	0xFDF
 11631                           postinc2	equ	0xFDE
 11632                           postdec2	equ	0xFDD
 11633                           fsr2h	equ	0xFDA
 11634                           fsr2l	equ	0xFD9
 11635                           status	equ	0xFD8
 11636                           
 11637 ;; *************** function ___ftneg *****************
 11638 ;; Defined at:
 11639 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
 11640 ;; Parameters:    Size  Location     Type
 11641 ;;  f1              3    0[BANK1 ] float 
 11642 ;; Auto vars:     Size  Location     Type
 11643 ;;		None
 11644 ;; Return value:  Size  Location     Type
 11645 ;;                  3    0[BANK1 ] float 
 11646 ;; Registers used:
 11647 ;;		wreg, status,2, status,0
 11648 ;; Tracked objects:
 11649 ;;		On entry : 0/0
 11650 ;;		On exit  : 0/0
 11651 ;;		Unchanged: 0/0
 11652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11653 ;;      Params:         0       0       3       0       0       0       0
 11654 ;;      Locals:         0       0       0       0       0       0       0
 11655 ;;      Temps:          0       0       0       0       0       0       0
 11656 ;;      Totals:         0       0       3       0       0       0       0
 11657 ;;Total ram usage:        3 bytes
 11658 ;; Hardware stack levels used:    1
 11659 ;; Hardware stack levels required when called:   12
 11660 ;; This function calls:
 11661 ;;		Nothing
 11662 ;; This function is called by:
 11663 ;;		_printf
 11664 ;; This function uses a non-reentrant model
 11665 ;;
 11666                           
 11667                           	psect	text44
 11668  007082                     __ptext44:
 11669                           	opt stack 0
 11670  007082                     ___ftneg:
 11671                           	opt stack 15
 11672                           
 11673                           ;incstack = 0
 11674  007082  0101               	movlb	1	; () banked
 11675  007084  5100               	movf	___ftneg@f1& (0+255),w,b
 11676  007086  0101               	movlb	1	; () banked
 11677  007088  1101               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 11678  00708A  0101               	movlb	1	; () banked
 11679  00708C  1102               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 11680  00708E  B4D8               	btfsc	status,2,c
 11681  007090  D009               	goto	l1408
 11682                           
 11683                           ; BSR set to: 1
 11684  007092  0E00               	movlw	0
 11685  007094  0101               	movlb	1	; () banked
 11686  007096  1B00               	xorwf	___ftneg@f1& (0+255),f,b
 11687  007098  0E00               	movlw	0
 11688  00709A  0101               	movlb	1	; () banked
 11689  00709C  1B01               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 11690  00709E  0E80               	movlw	128
 11691  0070A0  0101               	movlb	1	; () banked
 11692  0070A2  1B02               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 11693  0070A4                     l1408:
 11694                           
 11695                           ; BSR set to: 1
 11696  0070A4  C100  F100         	movff	___ftneg@f1,?___ftneg
 11697  0070A8  C101  F101         	movff	___ftneg@f1+1,?___ftneg+1
 11698  0070AC  C102  F102         	movff	___ftneg@f1+2,?___ftneg+2
 11699                           
 11700                           ; BSR set to: 1
 11701  0070B0  0012               	return		;funcret
 11702  0070B2                     __end_of___ftneg:
 11703                           	opt stack 0
 11704                           tblptru	equ	0xFF8
 11705                           tblptrh	equ	0xFF7
 11706                           tblptrl	equ	0xFF6
 11707                           tablat	equ	0xFF5
 11708                           prodh	equ	0xFF4
 11709                           prodl	equ	0xFF3
 11710                           intcon	equ	0xFF2
 11711                           postinc0	equ	0xFEE
 11712                           wreg	equ	0xFE8
 11713                           postdec1	equ	0xFE5
 11714                           fsr1l	equ	0xFE1
 11715                           indf2	equ	0xFDF
 11716                           postinc2	equ	0xFDE
 11717                           postdec2	equ	0xFDD
 11718                           fsr2h	equ	0xFDA
 11719                           fsr2l	equ	0xFD9
 11720                           status	equ	0xFD8
 11721                           
 11722 ;; *************** function ___ftge *****************
 11723 ;; Defined at:
 11724 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
 11725 ;; Parameters:    Size  Location     Type
 11726 ;;  ff1             3    0[BANK1 ] float 
 11727 ;;  ff2             3    3[BANK1 ] float 
 11728 ;; Auto vars:     Size  Location     Type
 11729 ;;		None
 11730 ;; Return value:  Size  Location     Type
 11731 ;;		None               void
 11732 ;; Registers used:
 11733 ;;		wreg, status,2, status,0
 11734 ;; Tracked objects:
 11735 ;;		On entry : 0/0
 11736 ;;		On exit  : 0/0
 11737 ;;		Unchanged: 0/0
 11738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11739 ;;      Params:         0       0       6       0       0       0       0
 11740 ;;      Locals:         0       0       0       0       0       0       0
 11741 ;;      Temps:          0       0       3       0       0       0       0
 11742 ;;      Totals:         0       0       9       0       0       0       0
 11743 ;;Total ram usage:        9 bytes
 11744 ;; Hardware stack levels used:    1
 11745 ;; Hardware stack levels required when called:   12
 11746 ;; This function calls:
 11747 ;;		Nothing
 11748 ;; This function is called by:
 11749 ;;		_printf
 11750 ;; This function uses a non-reentrant model
 11751 ;;
 11752                           
 11753                           	psect	text45
 11754  005604                     __ptext45:
 11755                           	opt stack 0
 11756  005604                     ___ftge:
 11757                           	opt stack 15
 11758                           
 11759                           ; BSR set to: 1
 11760                           ;incstack = 0
 11761  005604  0101               	movlb	1	; () banked
 11762  005606  AF02               	btfss	(___ftge@ff1+2)& (0+255),7,b
 11763  005608  D01D               	goto	l10242
 11764                           
 11765                           ; BSR set to: 1
 11766  00560A  C100  F106         	movff	___ftge@ff1,??___ftge
 11767  00560E  C101  F107         	movff	___ftge@ff1+1,??___ftge+1
 11768  005612  C102  F108         	movff	___ftge@ff1+2,??___ftge+2
 11769  005616  0101               	movlb	1	; () banked
 11770  005618  1F06               	comf	??___ftge& (0+255),f,b
 11771  00561A  1F07               	comf	(??___ftge+1)& (0+255),f,b
 11772  00561C  1F08               	comf	(??___ftge+2)& (0+255),f,b
 11773  00561E  2B06               	incf	??___ftge& (0+255),f,b
 11774  005620  0E00               	movlw	0
 11775  005622  2307               	addwfc	(??___ftge+1)& (0+255),f,b
 11776  005624  2308               	addwfc	(??___ftge+2)& (0+255),f,b
 11777  005626  0E00               	movlw	0
 11778  005628  0101               	movlb	1	; () banked
 11779  00562A  2506               	addwf	??___ftge& (0+255),w,b
 11780  00562C  0101               	movlb	1	; () banked
 11781  00562E  6F00               	movwf	___ftge@ff1& (0+255),b
 11782  005630  0E00               	movlw	0
 11783  005632  0101               	movlb	1	; () banked
 11784  005634  2107               	addwfc	(??___ftge+1)& (0+255),w,b
 11785  005636  0101               	movlb	1	; () banked
 11786  005638  6F01               	movwf	(___ftge@ff1+1)& (0+255),b
 11787  00563A  0E80               	movlw	128
 11788  00563C  0101               	movlb	1	; () banked
 11789  00563E  2108               	addwfc	(??___ftge+2)& (0+255),w,b
 11790  005640  0101               	movlb	1	; () banked
 11791  005642  6F02               	movwf	(___ftge@ff1+2)& (0+255),b
 11792  005644                     l10242:
 11793                           
 11794                           ; BSR set to: 1
 11795  005644  0101               	movlb	1	; () banked
 11796  005646  AF05               	btfss	(___ftge@ff2+2)& (0+255),7,b
 11797  005648  D01D               	goto	l10246
 11798                           
 11799                           ; BSR set to: 1
 11800  00564A  C103  F106         	movff	___ftge@ff2,??___ftge
 11801  00564E  C104  F107         	movff	___ftge@ff2+1,??___ftge+1
 11802  005652  C105  F108         	movff	___ftge@ff2+2,??___ftge+2
 11803  005656  0101               	movlb	1	; () banked
 11804  005658  1F06               	comf	??___ftge& (0+255),f,b
 11805  00565A  1F07               	comf	(??___ftge+1)& (0+255),f,b
 11806  00565C  1F08               	comf	(??___ftge+2)& (0+255),f,b
 11807  00565E  2B06               	incf	??___ftge& (0+255),f,b
 11808  005660  0E00               	movlw	0
 11809  005662  2307               	addwfc	(??___ftge+1)& (0+255),f,b
 11810  005664  2308               	addwfc	(??___ftge+2)& (0+255),f,b
 11811  005666  0E00               	movlw	0
 11812  005668  0101               	movlb	1	; () banked
 11813  00566A  2506               	addwf	??___ftge& (0+255),w,b
 11814  00566C  0101               	movlb	1	; () banked
 11815  00566E  6F03               	movwf	___ftge@ff2& (0+255),b
 11816  005670  0E00               	movlw	0
 11817  005672  0101               	movlb	1	; () banked
 11818  005674  2107               	addwfc	(??___ftge+1)& (0+255),w,b
 11819  005676  0101               	movlb	1	; () banked
 11820  005678  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
 11821  00567A  0E80               	movlw	128
 11822  00567C  0101               	movlb	1	; () banked
 11823  00567E  2108               	addwfc	(??___ftge+2)& (0+255),w,b
 11824  005680  0101               	movlb	1	; () banked
 11825  005682  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
 11826  005684                     l10246:
 11827                           
 11828                           ; BSR set to: 1
 11829  005684  0E00               	movlw	0
 11830  005686  0101               	movlb	1	; () banked
 11831  005688  1B00               	xorwf	___ftge@ff1& (0+255),f,b
 11832  00568A  0E00               	movlw	0
 11833  00568C  0101               	movlb	1	; () banked
 11834  00568E  1B01               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 11835  005690  0E80               	movlw	128
 11836  005692  0101               	movlb	1	; () banked
 11837  005694  1B02               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 11838                           
 11839                           ; BSR set to: 1
 11840  005696  0E00               	movlw	0
 11841  005698  0101               	movlb	1	; () banked
 11842  00569A  1B03               	xorwf	___ftge@ff2& (0+255),f,b
 11843  00569C  0E00               	movlw	0
 11844  00569E  0101               	movlb	1	; () banked
 11845  0056A0  1B04               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 11846  0056A2  0E80               	movlw	128
 11847  0056A4  0101               	movlb	1	; () banked
 11848  0056A6  1B05               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 11849  0056A8  0101               	movlb	1	; () banked
 11850  0056AA  5103               	movf	___ftge@ff2& (0+255),w,b
 11851  0056AC  0101               	movlb	1	; () banked
 11852  0056AE  5D00               	subwf	___ftge@ff1& (0+255),w,b
 11853  0056B0  0101               	movlb	1	; () banked
 11854  0056B2  5104               	movf	(___ftge@ff2+1)& (0+255),w,b
 11855  0056B4  0101               	movlb	1	; () banked
 11856  0056B6  5901               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 11857  0056B8  0101               	movlb	1	; () banked
 11858  0056BA  5105               	movf	(___ftge@ff2+2)& (0+255),w,b
 11859  0056BC  0101               	movlb	1	; () banked
 11860  0056BE  5902               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 11861  0056C0  B0D8               	btfsc	status,0,c
 11862  0056C2  D002               	goto	l10252
 11863                           
 11864                           ; BSR set to: 1
 11865  0056C4  90D8               	bcf	status,0,c
 11866  0056C6  0012               	return	
 11867  0056C8                     l10252:
 11868                           
 11869                           ; BSR set to: 1
 11870  0056C8  80D8               	bsf	status,0,c
 11871                           
 11872                           ; BSR set to: 1
 11873  0056CA  0012               	return	
 11874  0056CC                     __end_of___ftge:
 11875                           	opt stack 0
 11876                           tblptru	equ	0xFF8
 11877                           tblptrh	equ	0xFF7
 11878                           tblptrl	equ	0xFF6
 11879                           tablat	equ	0xFF5
 11880                           prodh	equ	0xFF4
 11881                           prodl	equ	0xFF3
 11882                           intcon	equ	0xFF2
 11883                           postinc0	equ	0xFEE
 11884                           wreg	equ	0xFE8
 11885                           postdec1	equ	0xFE5
 11886                           fsr1l	equ	0xFE1
 11887                           indf2	equ	0xFDF
 11888                           postinc2	equ	0xFDE
 11889                           postdec2	equ	0xFDD
 11890                           fsr2h	equ	0xFDA
 11891                           fsr2l	equ	0xFD9
 11892                           status	equ	0xFD8
 11893                           
 11894 ;; *************** function _clockConfig *****************
 11895 ;; Defined at:
 11896 ;;		line 76 in file "source/SYSConfig.h"
 11897 ;; Parameters:    Size  Location     Type
 11898 ;;		None
 11899 ;; Auto vars:     Size  Location     Type
 11900 ;;		None
 11901 ;; Return value:  Size  Location     Type
 11902 ;;                  1    wreg      void 
 11903 ;; Registers used:
 11904 ;;		wreg, status,2
 11905 ;; Tracked objects:
 11906 ;;		On entry : 0/0
 11907 ;;		On exit  : 0/0
 11908 ;;		Unchanged: 0/0
 11909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11910 ;;      Params:         0       0       0       0       0       0       0
 11911 ;;      Locals:         0       0       0       0       0       0       0
 11912 ;;      Temps:          0       0       0       0       0       0       0
 11913 ;;      Totals:         0       0       0       0       0       0       0
 11914 ;;Total ram usage:        0 bytes
 11915 ;; Hardware stack levels used:    1
 11916 ;; Hardware stack levels required when called:   12
 11917 ;; This function calls:
 11918 ;;		Nothing
 11919 ;; This function is called by:
 11920 ;;		_main
 11921 ;; This function uses a non-reentrant model
 11922 ;;
 11923                           
 11924                           	psect	text46
 11925  007210                     __ptext46:
 11926                           	opt stack 0
 11927  007210                     _clockConfig:
 11928                           	opt stack 18
 11929                           
 11930                           ;SYSConfig.h: 77: OSCCONbits.IDLEN = 1;
 11931                           
 11932                           ; BSR set to: 1
 11933                           ;incstack = 0
 11934  007210  8ED3               	bsf	4051,7,c	;volatile
 11935                           
 11936                           ;SYSConfig.h: 78: OSCCONbits.IRCF = 0b111;
 11937  007212  88D3               	bsf	4051,4,c	;volatile
 11938  007214  8AD3               	bsf	4051,5,c	;volatile
 11939  007216  8CD3               	bsf	4051,6,c	;volatile
 11940  007218                     l91:
 11941  007218  A4D3               	btfss	4051,2,c	;volatile
 11942  00721A  D7FE               	goto	l91
 11943                           
 11944                           ;SYSConfig.h: 80: OSCCONbits.SCS = 0b11;
 11945  00721C  0E03               	movlw	3
 11946  00721E  12D3               	iorwf	4051,f,c	;volatile
 11947                           
 11948                           ;SYSConfig.h: 81: OSCCON2bits.MFIOSEL = 0;
 11949  007220  98D2               	bcf	4050,4,c	;volatile
 11950                           
 11951                           ;SYSConfig.h: 82: OSCCON2bits.SOSCGO = 0;
 11952  007222  96D2               	bcf	4050,3,c	;volatile
 11953                           
 11954                           ;SYSConfig.h: 83: OSCTUNEbits.INTSRC = 0;
 11955  007224  9E9B               	bcf	3995,7,c	;volatile
 11956                           
 11957                           ;SYSConfig.h: 84: OSCTUNEbits.TUN = 0b011111;
 11958  007226  809B               	bsf	3995,0,c	;volatile
 11959  007228  829B               	bsf	3995,1,c	;volatile
 11960  00722A  849B               	bsf	3995,2,c	;volatile
 11961  00722C  869B               	bsf	3995,3,c	;volatile
 11962  00722E  889B               	bsf	3995,4,c	;volatile
 11963  007230  9A9B               	bcf	3995,5,c	;volatile
 11964                           
 11965                           ;SYSConfig.h: 85: OSCTUNEbits.PLLEN = 1;
 11966  007232  8C9B               	bsf	3995,6,c	;volatile
 11967  007234  0012               	return		;funcret
 11968  007236                     __end_of_clockConfig:
 11969                           	opt stack 0
 11970                           tblptru	equ	0xFF8
 11971                           tblptrh	equ	0xFF7
 11972                           tblptrl	equ	0xFF6
 11973                           tablat	equ	0xFF5
 11974                           prodh	equ	0xFF4
 11975                           prodl	equ	0xFF3
 11976                           intcon	equ	0xFF2
 11977                           postinc0	equ	0xFEE
 11978                           wreg	equ	0xFE8
 11979                           postdec1	equ	0xFE5
 11980                           fsr1l	equ	0xFE1
 11981                           indf2	equ	0xFDF
 11982                           postinc2	equ	0xFDE
 11983                           postdec2	equ	0xFDD
 11984                           fsr2h	equ	0xFDA
 11985                           fsr2l	equ	0xFD9
 11986                           status	equ	0xFD8
 11987                           
 11988 ;; *************** function _buttonChecking *****************
 11989 ;; Defined at:
 11990 ;;		line 9 in file "source/ButtonController.h"
 11991 ;; Parameters:    Size  Location     Type
 11992 ;;		None
 11993 ;; Auto vars:     Size  Location     Type
 11994 ;;		None
 11995 ;; Return value:  Size  Location     Type
 11996 ;;                  1    wreg      void 
 11997 ;; Registers used:
 11998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11999 ;; Tracked objects:
 12000 ;;		On entry : 0/0
 12001 ;;		On exit  : 0/0
 12002 ;;		Unchanged: 0/0
 12003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12004 ;;      Params:         0       0       0       0       0       0       0
 12005 ;;      Locals:         0       0       0       0       0       0       0
 12006 ;;      Temps:          0       0       0       0       0       0       0
 12007 ;;      Totals:         0       0       0       0       0       0       0
 12008 ;;Total ram usage:        0 bytes
 12009 ;; Hardware stack levels used:    1
 12010 ;; Hardware stack levels required when called:   18
 12011 ;; This function calls:
 12012 ;;		_delay_ms
 12013 ;;		_longPressDOWN
 12014 ;;		_longPressENTER
 12015 ;;		_longPressRETRO
 12016 ;;		_longPressUP
 12017 ;;		_pressDOWN
 12018 ;;		_pressENTER
 12019 ;;		_pressRETRO
 12020 ;;		_pressUP
 12021 ;;		_releaseDOWN
 12022 ;;		_releaseENTER
 12023 ;;		_releaseRETRO
 12024 ;;		_releaseUP
 12025 ;; This function is called by:
 12026 ;;		_main
 12027 ;; This function uses a non-reentrant model
 12028 ;;
 12029                           
 12030                           	psect	text47
 12031  00227A                     __ptext47:
 12032                           	opt stack 0
 12033  00227A                     _buttonChecking:
 12034                           	opt stack 12
 12035                           
 12036                           ;ButtonController.h: 10: if(!PORTAbits.RA2 && lastSttUP) {
 12037                           
 12038                           ;incstack = 0
 12039  00227A  B480               	btfsc	3968,2,c	;volatile
 12040  00227C  D010               	goto	l871
 12041  00227E  0100               	movlb	0	; () banked
 12042  002280  51D8               	movf	_lastSttUP& (0+255),w,b
 12043  002282  0100               	movlb	0	; () banked
 12044  002284  B4D8               	btfsc	status,2,c
 12045  002286  D00B               	goto	l871
 12046                           
 12047                           ; BSR set to: 0
 12048                           ;ButtonController.h: 11: lastSttUP = 0;
 12049  002288  0E00               	movlw	0
 12050  00228A  0100               	movlb	0	; () banked
 12051  00228C  6FD8               	movwf	_lastSttUP& (0+255),b
 12052                           
 12053                           ; BSR set to: 0
 12054                           ;ButtonController.h: 12: delay_ms(200);
 12055  00228E  0E00               	movlw	0
 12056  002290  0101               	movlb	1	; () banked
 12057  002292  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12058  002294  0EC8               	movlw	200
 12059  002296  6F00               	movwf	delay_ms@del& (0+255),b
 12060  002298  EC5E  F037         	call	_delay_ms	;wreg free
 12061                           
 12062                           ;ButtonController.h: 13: }else if(PORTAbits.RA2 && !lastSttUP) {
 12063  00229C  D044               	goto	l11858
 12064  00229E                     l871:
 12065  00229E  A480               	btfss	3968,2,c	;volatile
 12066  0022A0  D016               	goto	l11836
 12067  0022A2  0100               	movlb	0	; () banked
 12068  0022A4  51D8               	movf	_lastSttUP& (0+255),w,b
 12069  0022A6  0100               	movlb	0	; () banked
 12070  0022A8  A4D8               	btfss	status,2,c
 12071  0022AA  D011               	goto	l11836
 12072                           
 12073                           ; BSR set to: 0
 12074                           ;ButtonController.h: 14: lastSttUP = 1;
 12075  0022AC  0E01               	movlw	1
 12076  0022AE  0100               	movlb	0	; () banked
 12077  0022B0  6FD8               	movwf	_lastSttUP& (0+255),b
 12078                           
 12079                           ; BSR set to: 0
 12080                           ;ButtonController.h: 15: if(holdUPcont < 10)
 12081  0022B2  0E0A               	movlw	10
 12082  0022B4  0101               	movlb	1	; () banked
 12083  0022B6  61BF               	cpfslt	_holdUPcont& (0+255),b
 12084  0022B8  D002               	goto	l11834
 12085                           
 12086                           ; BSR set to: 1
 12087                           ;ButtonController.h: 16: pressUP();
 12088  0022BA  ECD3  F023         	call	_pressUP	;wreg free
 12089  0022BE                     l11834:
 12090                           
 12091                           ;ButtonController.h: 17: delay_ms(50);
 12092  0022BE  0E00               	movlw	0
 12093  0022C0  0101               	movlb	1	; () banked
 12094  0022C2  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12095  0022C4  0E32               	movlw	50
 12096  0022C6  6F00               	movwf	delay_ms@del& (0+255),b
 12097  0022C8  EC5E  F037         	call	_delay_ms	;wreg free
 12098                           
 12099                           ;ButtonController.h: 18: }else if(PORTAbits.RA2 == lastSttUP) {
 12100  0022CC  D02C               	goto	l11858
 12101  0022CE                     l11836:
 12102  0022CE  A480               	btfss	3968,2,c	;volatile
 12103  0022D0  D002               	goto	u17540
 12104  0022D2  0E01               	movlw	1
 12105  0022D4  D001               	goto	u17546
 12106  0022D6                     u17540:
 12107  0022D6  0E00               	movlw	0
 12108  0022D8                     u17546:
 12109  0022D8  0100               	movlb	0	; () banked
 12110  0022DA  19D8               	xorwf	_lastSttUP& (0+255),w,b
 12111  0022DC  A4D8               	btfss	status,2,c
 12112  0022DE  D023               	goto	l11858
 12113                           
 12114                           ; BSR set to: 0
 12115                           ;ButtonController.h: 19: if(PORTAbits.RA2) {
 12116  0022E0  A480               	btfss	3968,2,c	;volatile
 12117  0022E2  D006               	goto	l11844
 12118                           
 12119                           ; BSR set to: 0
 12120                           ;ButtonController.h: 20: holdUPcont = 0;
 12121  0022E4  0E00               	movlw	0
 12122  0022E6  0101               	movlb	1	; () banked
 12123  0022E8  6FBF               	movwf	_holdUPcont& (0+255),b
 12124                           
 12125                           ; BSR set to: 1
 12126                           ;ButtonController.h: 21: releaseUP();
 12127  0022EA  ECBC  F039         	call	_releaseUP	;wreg free
 12128                           
 12129                           ;ButtonController.h: 22: }else {
 12130  0022EE  D01B               	goto	l11858
 12131  0022F0                     l11844:
 12132                           
 12133                           ;ButtonController.h: 23: if(!UPsecurLock)
 12134  0022F0  0100               	movlb	0	; () banked
 12135  0022F2  51C4               	movf	_UPsecurLock& (0+255),w,b
 12136  0022F4  A4D8               	btfss	status,2,c
 12137  0022F6  D002               	goto	l11848
 12138                           
 12139                           ; BSR set to: 0
 12140                           ;ButtonController.h: 24: holdUPcont++;
 12141  0022F8  0101               	movlb	1	; () banked
 12142  0022FA  2BBF               	incf	_holdUPcont& (0+255),f,b
 12143  0022FC                     l11848:
 12144                           
 12145                           ;ButtonController.h: 25: if(holdUPcont > 9) {
 12146  0022FC  0E09               	movlw	9
 12147  0022FE  0101               	movlb	1	; () banked
 12148  002300  65BF               	cpfsgt	_holdUPcont& (0+255),b
 12149  002302  D00A               	goto	l11856
 12150                           
 12151                           ; BSR set to: 1
 12152                           ;ButtonController.h: 26: if(holdUPcont < 26)
 12153  002304  0E1A               	movlw	26
 12154  002306  0101               	movlb	1	; () banked
 12155  002308  61BF               	cpfslt	_holdUPcont& (0+255),b
 12156  00230A  D003               	goto	l11854
 12157                           
 12158                           ; BSR set to: 1
 12159                           ;ButtonController.h: 27: longPressUP();
 12160  00230C  ECB8  F034         	call	_longPressUP	;wreg free
 12161  002310  D003               	goto	l11856
 12162  002312                     l11854:
 12163                           
 12164                           ;ButtonController.h: 28: else
 12165                           ;ButtonController.h: 29: UPsecurLock = 1;
 12166  002312  0E01               	movlw	1
 12167  002314  0100               	movlb	0	; () banked
 12168  002316  6FC4               	movwf	_UPsecurLock& (0+255),b
 12169  002318                     l11856:
 12170                           
 12171                           ;ButtonController.h: 30: }
 12172                           ;ButtonController.h: 31: delay_ms(200);
 12173  002318  0E00               	movlw	0
 12174  00231A  0101               	movlb	1	; () banked
 12175  00231C  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12176  00231E  0EC8               	movlw	200
 12177  002320  6F00               	movwf	delay_ms@del& (0+255),b
 12178  002322  EC5E  F037         	call	_delay_ms	;wreg free
 12179  002326                     l11858:
 12180                           
 12181                           ;ButtonController.h: 32: }
 12182                           ;ButtonController.h: 33: }
 12183                           ;ButtonController.h: 34: if(!PORTAbits.RA3 && lastSttDOWN) {
 12184  002326  B680               	btfsc	3968,3,c	;volatile
 12185  002328  D010               	goto	l883
 12186  00232A  0100               	movlb	0	; () banked
 12187  00232C  51D7               	movf	_lastSttDOWN& (0+255),w,b
 12188  00232E  0100               	movlb	0	; () banked
 12189  002330  B4D8               	btfsc	status,2,c
 12190  002332  D00B               	goto	l883
 12191                           
 12192                           ; BSR set to: 0
 12193                           ;ButtonController.h: 35: lastSttDOWN = 0;
 12194  002334  0E00               	movlw	0
 12195  002336  0100               	movlb	0	; () banked
 12196  002338  6FD7               	movwf	_lastSttDOWN& (0+255),b
 12197                           
 12198                           ; BSR set to: 0
 12199                           ;ButtonController.h: 36: delay_ms(200);
 12200  00233A  0E00               	movlw	0
 12201  00233C  0101               	movlb	1	; () banked
 12202  00233E  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12203  002340  0EC8               	movlw	200
 12204  002342  6F00               	movwf	delay_ms@del& (0+255),b
 12205  002344  EC5E  F037         	call	_delay_ms	;wreg free
 12206                           
 12207                           ;ButtonController.h: 37: }else if(PORTAbits.RA3 && !lastSttDOWN) {
 12208  002348  D044               	goto	l11898
 12209  00234A                     l883:
 12210  00234A  A680               	btfss	3968,3,c	;volatile
 12211  00234C  D016               	goto	l11876
 12212  00234E  0100               	movlb	0	; () banked
 12213  002350  51D7               	movf	_lastSttDOWN& (0+255),w,b
 12214  002352  0100               	movlb	0	; () banked
 12215  002354  A4D8               	btfss	status,2,c
 12216  002356  D011               	goto	l11876
 12217                           
 12218                           ; BSR set to: 0
 12219                           ;ButtonController.h: 38: lastSttDOWN = 1;
 12220  002358  0E01               	movlw	1
 12221  00235A  0100               	movlb	0	; () banked
 12222  00235C  6FD7               	movwf	_lastSttDOWN& (0+255),b
 12223                           
 12224                           ; BSR set to: 0
 12225                           ;ButtonController.h: 39: if(holdDOWNcont < 10)
 12226  00235E  0E0A               	movlw	10
 12227  002360  0100               	movlb	0	; () banked
 12228  002362  61C8               	cpfslt	_holdDOWNcont& (0+255),b
 12229  002364  D002               	goto	l11874
 12230                           
 12231                           ; BSR set to: 0
 12232                           ;ButtonController.h: 40: pressDOWN();
 12233  002366  EC75  F026         	call	_pressDOWN	;wreg free
 12234  00236A                     l11874:
 12235                           
 12236                           ;ButtonController.h: 41: delay_ms(50);
 12237  00236A  0E00               	movlw	0
 12238  00236C  0101               	movlb	1	; () banked
 12239  00236E  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12240  002370  0E32               	movlw	50
 12241  002372  6F00               	movwf	delay_ms@del& (0+255),b
 12242  002374  EC5E  F037         	call	_delay_ms	;wreg free
 12243                           
 12244                           ;ButtonController.h: 42: }else if(PORTAbits.RA3 == lastSttDOWN) {
 12245  002378  D02C               	goto	l11898
 12246  00237A                     l11876:
 12247  00237A  A680               	btfss	3968,3,c	;volatile
 12248  00237C  D002               	goto	u17650
 12249  00237E  0E01               	movlw	1
 12250  002380  D001               	goto	u17656
 12251  002382                     u17650:
 12252  002382  0E00               	movlw	0
 12253  002384                     u17656:
 12254  002384  0100               	movlb	0	; () banked
 12255  002386  19D7               	xorwf	_lastSttDOWN& (0+255),w,b
 12256  002388  A4D8               	btfss	status,2,c
 12257  00238A  D023               	goto	l11898
 12258                           
 12259                           ; BSR set to: 0
 12260                           ;ButtonController.h: 43: if(PORTAbits.RA3) {
 12261  00238C  A680               	btfss	3968,3,c	;volatile
 12262  00238E  D006               	goto	l11884
 12263                           
 12264                           ; BSR set to: 0
 12265                           ;ButtonController.h: 44: holdDOWNcont = 0;
 12266  002390  0E00               	movlw	0
 12267  002392  0100               	movlb	0	; () banked
 12268  002394  6FC8               	movwf	_holdDOWNcont& (0+255),b
 12269                           
 12270                           ; BSR set to: 0
 12271                           ;ButtonController.h: 45: releaseDOWN();
 12272  002396  ECC2  F039         	call	_releaseDOWN	;wreg free
 12273                           
 12274                           ;ButtonController.h: 46: }else {
 12275  00239A  D01B               	goto	l11898
 12276  00239C                     l11884:
 12277                           
 12278                           ;ButtonController.h: 47: if(!DOWNsecurLock)
 12279  00239C  0100               	movlb	0	; () banked
 12280  00239E  51C3               	movf	_DOWNsecurLock& (0+255),w,b
 12281  0023A0  A4D8               	btfss	status,2,c
 12282  0023A2  D002               	goto	l11888
 12283                           
 12284                           ; BSR set to: 0
 12285                           ;ButtonController.h: 48: holdDOWNcont++;
 12286  0023A4  0100               	movlb	0	; () banked
 12287  0023A6  2BC8               	incf	_holdDOWNcont& (0+255),f,b
 12288  0023A8                     l11888:
 12289                           
 12290                           ; BSR set to: 0
 12291                           ;ButtonController.h: 49: if(holdDOWNcont > 9) {
 12292  0023A8  0E09               	movlw	9
 12293  0023AA  0100               	movlb	0	; () banked
 12294  0023AC  65C8               	cpfsgt	_holdDOWNcont& (0+255),b
 12295  0023AE  D00A               	goto	l11896
 12296                           
 12297                           ; BSR set to: 0
 12298                           ;ButtonController.h: 50: if(holdDOWNcont < 26)
 12299  0023B0  0E1A               	movlw	26
 12300  0023B2  0100               	movlb	0	; () banked
 12301  0023B4  61C8               	cpfslt	_holdDOWNcont& (0+255),b
 12302  0023B6  D003               	goto	l11894
 12303                           
 12304                           ; BSR set to: 0
 12305                           ;ButtonController.h: 51: longPressDOWN();
 12306  0023B8  ECDE  F038         	call	_longPressDOWN	;wreg free
 12307  0023BC  D003               	goto	l11896
 12308  0023BE                     l11894:
 12309                           
 12310                           ;ButtonController.h: 52: else
 12311                           ;ButtonController.h: 53: DOWNsecurLock = 1;
 12312  0023BE  0E01               	movlw	1
 12313  0023C0  0100               	movlb	0	; () banked
 12314  0023C2  6FC3               	movwf	_DOWNsecurLock& (0+255),b
 12315  0023C4                     l11896:
 12316                           
 12317                           ;ButtonController.h: 54: }
 12318                           ;ButtonController.h: 55: delay_ms(200);
 12319  0023C4  0E00               	movlw	0
 12320  0023C6  0101               	movlb	1	; () banked
 12321  0023C8  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12322  0023CA  0EC8               	movlw	200
 12323  0023CC  6F00               	movwf	delay_ms@del& (0+255),b
 12324  0023CE  EC5E  F037         	call	_delay_ms	;wreg free
 12325  0023D2                     l11898:
 12326                           
 12327                           ;ButtonController.h: 56: }
 12328                           ;ButtonController.h: 57: }
 12329                           ;ButtonController.h: 58: if(!PORTAbits.RA4 && lastSttRETRO) {
 12330  0023D2  B880               	btfsc	3968,4,c	;volatile
 12331  0023D4  D010               	goto	l895
 12332  0023D6  0100               	movlb	0	; () banked
 12333  0023D8  51D6               	movf	_lastSttRETRO& (0+255),w,b
 12334  0023DA  0100               	movlb	0	; () banked
 12335  0023DC  B4D8               	btfsc	status,2,c
 12336  0023DE  D00B               	goto	l895
 12337                           
 12338                           ; BSR set to: 0
 12339                           ;ButtonController.h: 59: lastSttRETRO = 0;
 12340  0023E0  0E00               	movlw	0
 12341  0023E2  0100               	movlb	0	; () banked
 12342  0023E4  6FD6               	movwf	_lastSttRETRO& (0+255),b
 12343                           
 12344                           ; BSR set to: 0
 12345                           ;ButtonController.h: 60: delay_ms(200);
 12346  0023E6  0E00               	movlw	0
 12347  0023E8  0101               	movlb	1	; () banked
 12348  0023EA  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12349  0023EC  0EC8               	movlw	200
 12350  0023EE  6F00               	movwf	delay_ms@del& (0+255),b
 12351  0023F0  EC5E  F037         	call	_delay_ms	;wreg free
 12352                           
 12353                           ;ButtonController.h: 61: }else if(PORTAbits.RA4 && !lastSttRETRO) {
 12354  0023F4  D044               	goto	l11936
 12355  0023F6                     l895:
 12356  0023F6  A880               	btfss	3968,4,c	;volatile
 12357  0023F8  D016               	goto	l11914
 12358  0023FA  0100               	movlb	0	; () banked
 12359  0023FC  51D6               	movf	_lastSttRETRO& (0+255),w,b
 12360  0023FE  0100               	movlb	0	; () banked
 12361  002400  A4D8               	btfss	status,2,c
 12362  002402  D011               	goto	l11914
 12363                           
 12364                           ; BSR set to: 0
 12365                           ;ButtonController.h: 62: lastSttRETRO = 1;
 12366  002404  0E01               	movlw	1
 12367  002406  0100               	movlb	0	; () banked
 12368  002408  6FD6               	movwf	_lastSttRETRO& (0+255),b
 12369                           
 12370                           ; BSR set to: 0
 12371                           ;ButtonController.h: 63: if(holdRETROcont < 10)
 12372  00240A  0E0A               	movlw	10
 12373  00240C  0100               	movlb	0	; () banked
 12374  00240E  61C7               	cpfslt	_holdRETROcont& (0+255),b
 12375  002410  D002               	goto	l898
 12376                           
 12377                           ; BSR set to: 0
 12378                           ;ButtonController.h: 64: pressRETRO();
 12379  002412  EC66  F02B         	call	_pressRETRO	;wreg free
 12380  002416                     l898:
 12381                           
 12382                           ;ButtonController.h: 65: delay_ms(50);
 12383  002416  0E00               	movlw	0
 12384  002418  0101               	movlb	1	; () banked
 12385  00241A  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12386  00241C  0E32               	movlw	50
 12387  00241E  6F00               	movwf	delay_ms@del& (0+255),b
 12388  002420  EC5E  F037         	call	_delay_ms	;wreg free
 12389                           
 12390                           ;ButtonController.h: 66: }else if(PORTAbits.RA4 == lastSttRETRO) {
 12391  002424  D02C               	goto	l11936
 12392  002426                     l11914:
 12393  002426  A880               	btfss	3968,4,c	;volatile
 12394  002428  D002               	goto	u17760
 12395  00242A  0E01               	movlw	1
 12396  00242C  D001               	goto	u17766
 12397  00242E                     u17760:
 12398  00242E  0E00               	movlw	0
 12399  002430                     u17766:
 12400  002430  0100               	movlb	0	; () banked
 12401  002432  19D6               	xorwf	_lastSttRETRO& (0+255),w,b
 12402  002434  A4D8               	btfss	status,2,c
 12403  002436  D023               	goto	l11936
 12404                           
 12405                           ; BSR set to: 0
 12406                           ;ButtonController.h: 67: if(PORTAbits.RA4) {
 12407  002438  A880               	btfss	3968,4,c	;volatile
 12408  00243A  D006               	goto	l11922
 12409                           
 12410                           ; BSR set to: 0
 12411                           ;ButtonController.h: 68: holdRETROcont = 0;
 12412  00243C  0E00               	movlw	0
 12413  00243E  0100               	movlb	0	; () banked
 12414  002440  6FC7               	movwf	_holdRETROcont& (0+255),b
 12415                           
 12416                           ; BSR set to: 0
 12417                           ;ButtonController.h: 69: releaseRETRO();
 12418  002442  ECA7  F039         	call	_releaseRETRO	;wreg free
 12419                           
 12420                           ;ButtonController.h: 70: }else {
 12421  002446  D01B               	goto	l11936
 12422  002448                     l11922:
 12423                           
 12424                           ;ButtonController.h: 71: if(!RETROsecurLock)
 12425  002448  0100               	movlb	0	; () banked
 12426  00244A  51C2               	movf	_RETROsecurLock& (0+255),w,b
 12427  00244C  A4D8               	btfss	status,2,c
 12428  00244E  D002               	goto	l11926
 12429                           
 12430                           ; BSR set to: 0
 12431                           ;ButtonController.h: 72: holdRETROcont++;
 12432  002450  0100               	movlb	0	; () banked
 12433  002452  2BC7               	incf	_holdRETROcont& (0+255),f,b
 12434  002454                     l11926:
 12435                           
 12436                           ; BSR set to: 0
 12437                           ;ButtonController.h: 73: if(holdRETROcont > 9) {
 12438  002454  0E09               	movlw	9
 12439  002456  0100               	movlb	0	; () banked
 12440  002458  65C7               	cpfsgt	_holdRETROcont& (0+255),b
 12441  00245A  D00A               	goto	l11934
 12442                           
 12443                           ; BSR set to: 0
 12444                           ;ButtonController.h: 74: if(holdRETROcont < 26)
 12445  00245C  0E1A               	movlw	26
 12446  00245E  0100               	movlb	0	; () banked
 12447  002460  61C7               	cpfslt	_holdRETROcont& (0+255),b
 12448  002462  D003               	goto	l11932
 12449                           
 12450                           ; BSR set to: 0
 12451                           ;ButtonController.h: 75: longPressRETRO();
 12452  002464  EC7D  F027         	call	_longPressRETRO	;wreg free
 12453  002468  D003               	goto	l11934
 12454  00246A                     l11932:
 12455                           
 12456                           ;ButtonController.h: 76: else
 12457                           ;ButtonController.h: 77: RETROsecurLock = 1;
 12458  00246A  0E01               	movlw	1
 12459  00246C  0100               	movlb	0	; () banked
 12460  00246E  6FC2               	movwf	_RETROsecurLock& (0+255),b
 12461  002470                     l11934:
 12462                           
 12463                           ;ButtonController.h: 78: }
 12464                           ;ButtonController.h: 79: delay_ms(200);
 12465  002470  0E00               	movlw	0
 12466  002472  0101               	movlb	1	; () banked
 12467  002474  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12468  002476  0EC8               	movlw	200
 12469  002478  6F00               	movwf	delay_ms@del& (0+255),b
 12470  00247A  EC5E  F037         	call	_delay_ms	;wreg free
 12471  00247E                     l11936:
 12472                           
 12473                           ;ButtonController.h: 80: }
 12474                           ;ButtonController.h: 81: }
 12475                           ;ButtonController.h: 82: if(!PORTAbits.RA5 && lastSttENTER) {
 12476  00247E  BA80               	btfsc	3968,5,c	;volatile
 12477  002480  D010               	goto	l907
 12478  002482  0100               	movlb	0	; () banked
 12479  002484  51D5               	movf	_lastSttENTER& (0+255),w,b
 12480  002486  0100               	movlb	0	; () banked
 12481  002488  B4D8               	btfsc	status,2,c
 12482  00248A  D00B               	goto	l907
 12483                           
 12484                           ; BSR set to: 0
 12485                           ;ButtonController.h: 83: lastSttENTER = 0;
 12486  00248C  0E00               	movlw	0
 12487  00248E  0100               	movlb	0	; () banked
 12488  002490  6FD5               	movwf	_lastSttENTER& (0+255),b
 12489                           
 12490                           ; BSR set to: 0
 12491                           ;ButtonController.h: 84: delay_ms(200);
 12492  002492  0E00               	movlw	0
 12493  002494  0101               	movlb	1	; () banked
 12494  002496  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12495  002498  0EC8               	movlw	200
 12496  00249A  6F00               	movwf	delay_ms@del& (0+255),b
 12497  00249C  EC5E  F037         	call	_delay_ms	;wreg free
 12498                           
 12499                           ;ButtonController.h: 85: }else if(PORTAbits.RA5 && !lastSttENTER) {
 12500  0024A0  0012               	return	
 12501  0024A2                     l907:
 12502  0024A2  AA80               	btfss	3968,5,c	;volatile
 12503  0024A4  D016               	goto	l11954
 12504  0024A6  0100               	movlb	0	; () banked
 12505  0024A8  51D5               	movf	_lastSttENTER& (0+255),w,b
 12506  0024AA  0100               	movlb	0	; () banked
 12507  0024AC  A4D8               	btfss	status,2,c
 12508  0024AE  D011               	goto	l11954
 12509                           
 12510                           ; BSR set to: 0
 12511                           ;ButtonController.h: 86: lastSttENTER = 1;
 12512  0024B0  0E01               	movlw	1
 12513  0024B2  0100               	movlb	0	; () banked
 12514  0024B4  6FD5               	movwf	_lastSttENTER& (0+255),b
 12515                           
 12516                           ; BSR set to: 0
 12517                           ;ButtonController.h: 87: if(holdENTERcont < 10)
 12518  0024B6  0E0A               	movlw	10
 12519  0024B8  0100               	movlb	0	; () banked
 12520  0024BA  61C6               	cpfslt	_holdENTERcont& (0+255),b
 12521  0024BC  D002               	goto	l11952
 12522                           
 12523                           ; BSR set to: 0
 12524                           ;ButtonController.h: 88: pressENTER();
 12525  0024BE  ECD1  F008         	call	_pressENTER	;wreg free
 12526  0024C2                     l11952:
 12527                           
 12528                           ;ButtonController.h: 89: delay_ms(50);
 12529  0024C2  0E00               	movlw	0
 12530  0024C4  0101               	movlb	1	; () banked
 12531  0024C6  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12532  0024C8  0E32               	movlw	50
 12533  0024CA  6F00               	movwf	delay_ms@del& (0+255),b
 12534  0024CC  EC5E  F037         	call	_delay_ms	;wreg free
 12535                           
 12536                           ;ButtonController.h: 90: }else if(PORTAbits.RA5 == lastSttENTER) {
 12537  0024D0  0012               	return	
 12538  0024D2                     l11954:
 12539  0024D2  AA80               	btfss	3968,5,c	;volatile
 12540  0024D4  D002               	goto	u17870
 12541  0024D6  0E01               	movlw	1
 12542  0024D8  D001               	goto	u17876
 12543  0024DA                     u17870:
 12544  0024DA  0E00               	movlw	0
 12545  0024DC                     u17876:
 12546  0024DC  0100               	movlb	0	; () banked
 12547  0024DE  19D5               	xorwf	_lastSttENTER& (0+255),w,b
 12548  0024E0  A4D8               	btfss	status,2,c
 12549  0024E2  0012               	return	
 12550                           
 12551                           ; BSR set to: 0
 12552                           ;ButtonController.h: 91: if(PORTAbits.RA5) {
 12553  0024E4  AA80               	btfss	3968,5,c	;volatile
 12554  0024E6  D006               	goto	l11962
 12555                           
 12556                           ; BSR set to: 0
 12557                           ;ButtonController.h: 92: holdENTERcont = 0;
 12558  0024E8  0E00               	movlw	0
 12559  0024EA  0100               	movlb	0	; () banked
 12560  0024EC  6FC6               	movwf	_holdENTERcont& (0+255),b
 12561                           
 12562                           ; BSR set to: 0
 12563                           ;ButtonController.h: 93: releaseENTER();
 12564  0024EE  ECAE  F039         	call	_releaseENTER	;wreg free
 12565                           
 12566                           ;ButtonController.h: 94: }else {
 12567  0024F2  0012               	return	
 12568  0024F4                     l11962:
 12569                           
 12570                           ;ButtonController.h: 95: if(!ENTERsecurLock)
 12571  0024F4  0100               	movlb	0	; () banked
 12572  0024F6  51C1               	movf	_ENTERsecurLock& (0+255),w,b
 12573  0024F8  A4D8               	btfss	status,2,c
 12574  0024FA  D002               	goto	l11966
 12575                           
 12576                           ; BSR set to: 0
 12577                           ;ButtonController.h: 96: holdENTERcont++;
 12578  0024FC  0100               	movlb	0	; () banked
 12579  0024FE  2BC6               	incf	_holdENTERcont& (0+255),f,b
 12580  002500                     l11966:
 12581                           
 12582                           ; BSR set to: 0
 12583                           ;ButtonController.h: 97: if(holdENTERcont > 9) {
 12584  002500  0E09               	movlw	9
 12585  002502  0100               	movlb	0	; () banked
 12586  002504  65C6               	cpfsgt	_holdENTERcont& (0+255),b
 12587  002506  D00A               	goto	l11974
 12588                           
 12589                           ; BSR set to: 0
 12590                           ;ButtonController.h: 98: if(holdENTERcont < 26)
 12591  002508  0E1A               	movlw	26
 12592  00250A  0100               	movlb	0	; () banked
 12593  00250C  61C6               	cpfslt	_holdENTERcont& (0+255),b
 12594  00250E  D003               	goto	l11972
 12595                           
 12596                           ; BSR set to: 0
 12597                           ;ButtonController.h: 99: longPressENTER();
 12598  002510  EC9F  F00C         	call	_longPressENTER	;wreg free
 12599  002514  D003               	goto	l11974
 12600  002516                     l11972:
 12601                           
 12602                           ;ButtonController.h: 100: else
 12603                           ;ButtonController.h: 101: ENTERsecurLock = 1;
 12604  002516  0E01               	movlw	1
 12605  002518  0100               	movlb	0	; () banked
 12606  00251A  6FC1               	movwf	_ENTERsecurLock& (0+255),b
 12607  00251C                     l11974:
 12608                           
 12609                           ;ButtonController.h: 102: }
 12610                           ;ButtonController.h: 103: delay_ms(200);
 12611  00251C  0E00               	movlw	0
 12612  00251E  0101               	movlb	1	; () banked
 12613  002520  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12614  002522  0EC8               	movlw	200
 12615  002524  6F00               	movwf	delay_ms@del& (0+255),b
 12616  002526  EC5E  F037         	call	_delay_ms	;wreg free
 12617  00252A  0012               	return	
 12618  00252C                     __end_of_buttonChecking:
 12619                           	opt stack 0
 12620                           tblptru	equ	0xFF8
 12621                           tblptrh	equ	0xFF7
 12622                           tblptrl	equ	0xFF6
 12623                           tablat	equ	0xFF5
 12624                           prodh	equ	0xFF4
 12625                           prodl	equ	0xFF3
 12626                           intcon	equ	0xFF2
 12627                           postinc0	equ	0xFEE
 12628                           wreg	equ	0xFE8
 12629                           postdec1	equ	0xFE5
 12630                           fsr1l	equ	0xFE1
 12631                           indf2	equ	0xFDF
 12632                           postinc2	equ	0xFDE
 12633                           postdec2	equ	0xFDD
 12634                           fsr2h	equ	0xFDA
 12635                           fsr2l	equ	0xFD9
 12636                           status	equ	0xFD8
 12637                           
 12638 ;; *************** function _releaseUP *****************
 12639 ;; Defined at:
 12640 ;;		line 176 in file "source/DisplayProtocol.h"
 12641 ;; Parameters:    Size  Location     Type
 12642 ;;		None
 12643 ;; Auto vars:     Size  Location     Type
 12644 ;;		None
 12645 ;; Return value:  Size  Location     Type
 12646 ;;                  1    wreg      void 
 12647 ;; Registers used:
 12648 ;;		wreg, status,2
 12649 ;; Tracked objects:
 12650 ;;		On entry : 0/0
 12651 ;;		On exit  : 0/0
 12652 ;;		Unchanged: 0/0
 12653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12654 ;;      Params:         0       0       0       0       0       0       0
 12655 ;;      Locals:         0       0       0       0       0       0       0
 12656 ;;      Temps:          0       0       0       0       0       0       0
 12657 ;;      Totals:         0       0       0       0       0       0       0
 12658 ;;Total ram usage:        0 bytes
 12659 ;; Hardware stack levels used:    1
 12660 ;; Hardware stack levels required when called:   12
 12661 ;; This function calls:
 12662 ;;		Nothing
 12663 ;; This function is called by:
 12664 ;;		_buttonChecking
 12665 ;; This function uses a non-reentrant model
 12666 ;;
 12667                           
 12668                           	psect	text48
 12669  007378                     __ptext48:
 12670                           	opt stack 0
 12671  007378                     _releaseUP:
 12672                           	opt stack 17
 12673                           
 12674                           ;DisplayProtocol.h: 177: UPisLP = 0;
 12675                           
 12676                           ;incstack = 0
 12677  007378  0E00               	movlw	0
 12678  00737A  6E4A               	movwf	_UPisLP,c
 12679                           
 12680                           ;DisplayProtocol.h: 178: UPsecurLock = 0;
 12681  00737C  0E00               	movlw	0
 12682  00737E  0100               	movlb	0	; () banked
 12683  007380  6FC4               	movwf	_UPsecurLock& (0+255),b
 12684                           
 12685                           ; BSR set to: 0
 12686  007382  0012               	return		;funcret
 12687  007384                     __end_of_releaseUP:
 12688                           	opt stack 0
 12689                           tblptru	equ	0xFF8
 12690                           tblptrh	equ	0xFF7
 12691                           tblptrl	equ	0xFF6
 12692                           tablat	equ	0xFF5
 12693                           prodh	equ	0xFF4
 12694                           prodl	equ	0xFF3
 12695                           intcon	equ	0xFF2
 12696                           postinc0	equ	0xFEE
 12697                           wreg	equ	0xFE8
 12698                           postdec1	equ	0xFE5
 12699                           fsr1l	equ	0xFE1
 12700                           indf2	equ	0xFDF
 12701                           postinc2	equ	0xFDE
 12702                           postdec2	equ	0xFDD
 12703                           fsr2h	equ	0xFDA
 12704                           fsr2l	equ	0xFD9
 12705                           status	equ	0xFD8
 12706                           
 12707 ;; *************** function _releaseRETRO *****************
 12708 ;; Defined at:
 12709 ;;		line 286 in file "source/DisplayProtocol.h"
 12710 ;; Parameters:    Size  Location     Type
 12711 ;;		None
 12712 ;; Auto vars:     Size  Location     Type
 12713 ;;		None
 12714 ;; Return value:  Size  Location     Type
 12715 ;;                  1    wreg      void 
 12716 ;; Registers used:
 12717 ;;		wreg, status,2
 12718 ;; Tracked objects:
 12719 ;;		On entry : 0/0
 12720 ;;		On exit  : 0/0
 12721 ;;		Unchanged: 0/0
 12722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12723 ;;      Params:         0       0       0       0       0       0       0
 12724 ;;      Locals:         0       0       0       0       0       0       0
 12725 ;;      Temps:          0       0       0       0       0       0       0
 12726 ;;      Totals:         0       0       0       0       0       0       0
 12727 ;;Total ram usage:        0 bytes
 12728 ;; Hardware stack levels used:    1
 12729 ;; Hardware stack levels required when called:   12
 12730 ;; This function calls:
 12731 ;;		Nothing
 12732 ;; This function is called by:
 12733 ;;		_buttonChecking
 12734 ;; This function uses a non-reentrant model
 12735 ;;
 12736                           
 12737                           	psect	text49
 12738  00734E                     __ptext49:
 12739                           	opt stack 0
 12740  00734E                     _releaseRETRO:
 12741                           	opt stack 17
 12742                           
 12743                           ;DisplayProtocol.h: 287: RETROisLP = 0;
 12744                           
 12745                           ; BSR set to: 0
 12746                           ;incstack = 0
 12747  00734E  0E00               	movlw	0
 12748  007350  0100               	movlb	0	; () banked
 12749  007352  6FC5               	movwf	_RETROisLP& (0+255),b
 12750                           
 12751                           ;DisplayProtocol.h: 288: RETROsecurLock = 0;
 12752  007354  0E00               	movlw	0
 12753  007356  0100               	movlb	0	; () banked
 12754  007358  6FC2               	movwf	_RETROsecurLock& (0+255),b
 12755                           
 12756                           ; BSR set to: 0
 12757  00735A  0012               	return		;funcret
 12758  00735C                     __end_of_releaseRETRO:
 12759                           	opt stack 0
 12760                           tblptru	equ	0xFF8
 12761                           tblptrh	equ	0xFF7
 12762                           tblptrl	equ	0xFF6
 12763                           tablat	equ	0xFF5
 12764                           prodh	equ	0xFF4
 12765                           prodl	equ	0xFF3
 12766                           intcon	equ	0xFF2
 12767                           postinc0	equ	0xFEE
 12768                           wreg	equ	0xFE8
 12769                           postdec1	equ	0xFE5
 12770                           fsr1l	equ	0xFE1
 12771                           indf2	equ	0xFDF
 12772                           postinc2	equ	0xFDE
 12773                           postdec2	equ	0xFDD
 12774                           fsr2h	equ	0xFDA
 12775                           fsr2l	equ	0xFD9
 12776                           status	equ	0xFD8
 12777                           
 12778 ;; *************** function _releaseENTER *****************
 12779 ;; Defined at:
 12780 ;;		line 491 in file "source/DisplayProtocol.h"
 12781 ;; Parameters:    Size  Location     Type
 12782 ;;		None
 12783 ;; Auto vars:     Size  Location     Type
 12784 ;;		None
 12785 ;; Return value:  Size  Location     Type
 12786 ;;                  1    wreg      void 
 12787 ;; Registers used:
 12788 ;;		wreg, status,2
 12789 ;; Tracked objects:
 12790 ;;		On entry : 0/0
 12791 ;;		On exit  : 0/0
 12792 ;;		Unchanged: 0/0
 12793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12794 ;;      Params:         0       0       0       0       0       0       0
 12795 ;;      Locals:         0       0       0       0       0       0       0
 12796 ;;      Temps:          0       0       0       0       0       0       0
 12797 ;;      Totals:         0       0       0       0       0       0       0
 12798 ;;Total ram usage:        0 bytes
 12799 ;; Hardware stack levels used:    1
 12800 ;; Hardware stack levels required when called:   12
 12801 ;; This function calls:
 12802 ;;		Nothing
 12803 ;; This function is called by:
 12804 ;;		_buttonChecking
 12805 ;; This function uses a non-reentrant model
 12806 ;;
 12807                           
 12808                           	psect	text50
 12809  00735C                     __ptext50:
 12810                           	opt stack 0
 12811  00735C                     _releaseENTER:
 12812                           	opt stack 17
 12813                           
 12814                           ;DisplayProtocol.h: 492: ENTERisLP = 0;
 12815                           
 12816                           ; BSR set to: 0
 12817                           ;incstack = 0
 12818  00735C  0E00               	movlw	0
 12819  00735E  0101               	movlb	1	; () banked
 12820  007360  6FBE               	movwf	_ENTERisLP& (0+255),b
 12821                           
 12822                           ;DisplayProtocol.h: 493: ENTERsecurLock = 0;
 12823  007362  0E00               	movlw	0
 12824  007364  0100               	movlb	0	; () banked
 12825  007366  6FC1               	movwf	_ENTERsecurLock& (0+255),b
 12826                           
 12827                           ; BSR set to: 0
 12828  007368  0012               	return		;funcret
 12829  00736A                     __end_of_releaseENTER:
 12830                           	opt stack 0
 12831                           tblptru	equ	0xFF8
 12832                           tblptrh	equ	0xFF7
 12833                           tblptrl	equ	0xFF6
 12834                           tablat	equ	0xFF5
 12835                           prodh	equ	0xFF4
 12836                           prodl	equ	0xFF3
 12837                           intcon	equ	0xFF2
 12838                           postinc0	equ	0xFEE
 12839                           wreg	equ	0xFE8
 12840                           postdec1	equ	0xFE5
 12841                           fsr1l	equ	0xFE1
 12842                           indf2	equ	0xFDF
 12843                           postinc2	equ	0xFDE
 12844                           postdec2	equ	0xFDD
 12845                           fsr2h	equ	0xFDA
 12846                           fsr2l	equ	0xFD9
 12847                           status	equ	0xFD8
 12848                           
 12849 ;; *************** function _releaseDOWN *****************
 12850 ;; Defined at:
 12851 ;;		line 222 in file "source/DisplayProtocol.h"
 12852 ;; Parameters:    Size  Location     Type
 12853 ;;		None
 12854 ;; Auto vars:     Size  Location     Type
 12855 ;;		None
 12856 ;; Return value:  Size  Location     Type
 12857 ;;                  1    wreg      void 
 12858 ;; Registers used:
 12859 ;;		wreg, status,2
 12860 ;; Tracked objects:
 12861 ;;		On entry : 0/0
 12862 ;;		On exit  : 0/0
 12863 ;;		Unchanged: 0/0
 12864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12865 ;;      Params:         0       0       0       0       0       0       0
 12866 ;;      Locals:         0       0       0       0       0       0       0
 12867 ;;      Temps:          0       0       0       0       0       0       0
 12868 ;;      Totals:         0       0       0       0       0       0       0
 12869 ;;Total ram usage:        0 bytes
 12870 ;; Hardware stack levels used:    1
 12871 ;; Hardware stack levels required when called:   12
 12872 ;; This function calls:
 12873 ;;		Nothing
 12874 ;; This function is called by:
 12875 ;;		_buttonChecking
 12876 ;; This function uses a non-reentrant model
 12877 ;;
 12878                           
 12879                           	psect	text51
 12880  007384                     __ptext51:
 12881                           	opt stack 0
 12882  007384                     _releaseDOWN:
 12883                           	opt stack 17
 12884                           
 12885                           ;DisplayProtocol.h: 223: DOWNisLP = 0;
 12886                           
 12887                           ; BSR set to: 0
 12888                           ;incstack = 0
 12889  007384  0E00               	movlw	0
 12890  007386  6E49               	movwf	_DOWNisLP,c
 12891                           
 12892                           ;DisplayProtocol.h: 224: DOWNsecurLock = 0;
 12893  007388  0E00               	movlw	0
 12894  00738A  0100               	movlb	0	; () banked
 12895  00738C  6FC3               	movwf	_DOWNsecurLock& (0+255),b
 12896                           
 12897                           ; BSR set to: 0
 12898  00738E  0012               	return		;funcret
 12899  007390                     __end_of_releaseDOWN:
 12900                           	opt stack 0
 12901                           tblptru	equ	0xFF8
 12902                           tblptrh	equ	0xFF7
 12903                           tblptrl	equ	0xFF6
 12904                           tablat	equ	0xFF5
 12905                           prodh	equ	0xFF4
 12906                           prodl	equ	0xFF3
 12907                           intcon	equ	0xFF2
 12908                           postinc0	equ	0xFEE
 12909                           wreg	equ	0xFE8
 12910                           postdec1	equ	0xFE5
 12911                           fsr1l	equ	0xFE1
 12912                           indf2	equ	0xFDF
 12913                           postinc2	equ	0xFDE
 12914                           postdec2	equ	0xFDD
 12915                           fsr2h	equ	0xFDA
 12916                           fsr2l	equ	0xFD9
 12917                           status	equ	0xFD8
 12918                           
 12919 ;; *************** function _pressUP *****************
 12920 ;; Defined at:
 12921 ;;		line 126 in file "source/DisplayProtocol.h"
 12922 ;; Parameters:    Size  Location     Type
 12923 ;;		None
 12924 ;; Auto vars:     Size  Location     Type
 12925 ;;		None
 12926 ;; Return value:  Size  Location     Type
 12927 ;;                  1    wreg      void 
 12928 ;; Registers used:
 12929 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12930 ;; Tracked objects:
 12931 ;;		On entry : 0/0
 12932 ;;		On exit  : 0/0
 12933 ;;		Unchanged: 0/0
 12934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12935 ;;      Params:         0       0       0       0       0       0       0
 12936 ;;      Locals:         0       0       0       0       0       0       0
 12937 ;;      Temps:          0       0       1       0       0       0       0
 12938 ;;      Totals:         0       0       1       0       0       0       0
 12939 ;;Total ram usage:        1 bytes
 12940 ;; Hardware stack levels used:    1
 12941 ;; Hardware stack levels required when called:   13
 12942 ;; This function calls:
 12943 ;;		_chanValDigUP
 12944 ;; This function is called by:
 12945 ;;		_buttonChecking
 12946 ;; This function uses a non-reentrant model
 12947 ;;
 12948                           
 12949                           	psect	text52
 12950  0047A6                     __ptext52:
 12951                           	opt stack 0
 12952  0047A6                     _pressUP:
 12953                           	opt stack 16
 12954                           
 12955                           ;DisplayProtocol.h: 127: if (actualScreen == 0 || actualScreen == 4) {
 12956                           
 12957                           ; BSR set to: 0
 12958                           ;incstack = 0
 12959  0047A6  0101               	movlb	1	; () banked
 12960  0047A8  51BD               	movf	_actualScreen& (0+255),w,b
 12961  0047AA  B4D8               	btfsc	status,2,c
 12962  0047AC  D005               	goto	l11100
 12963                           
 12964                           ; BSR set to: 1
 12965  0047AE  0E04               	movlw	4
 12966  0047B0  0101               	movlb	1	; () banked
 12967  0047B2  19BD               	xorwf	_actualScreen& (0+255),w,b
 12968  0047B4  A4D8               	btfss	status,2,c
 12969  0047B6  D00C               	goto	l11106
 12970  0047B8                     l11100:
 12971                           
 12972                           ; BSR set to: 1
 12973                           ;DisplayProtocol.h: 128: menuSection++;
 12974  0047B8  0101               	movlb	1	; () banked
 12975  0047BA  2BBC               	incf	_menuSection& (0+255),f,b
 12976                           
 12977                           ; BSR set to: 1
 12978                           ;DisplayProtocol.h: 129: if (menuSection > 3)
 12979  0047BC  0101               	movlb	1	; () banked
 12980  0047BE  51BC               	movf	_menuSection& (0+255),w,b
 12981  0047C0  0A80               	xorlw	128
 12982  0047C2  0F7C               	addlw	-132
 12983  0047C4  A0D8               	btfss	status,0,c
 12984  0047C6  0012               	return	
 12985                           
 12986                           ; BSR set to: 1
 12987                           ;DisplayProtocol.h: 130: menuSection = 0;
 12988  0047C8  0E00               	movlw	0
 12989  0047CA  0101               	movlb	1	; () banked
 12990  0047CC  6FBC               	movwf	_menuSection& (0+255),b
 12991                           
 12992                           ; BSR set to: 1
 12993                           ;DisplayProtocol.h: 131: } else if (actualScreen == 1) {
 12994  0047CE  0012               	return	
 12995  0047D0                     l11106:
 12996                           
 12997                           ; BSR set to: 1
 12998  0047D0  0101               	movlb	1	; () banked
 12999  0047D2  05BD               	decf	_actualScreen& (0+255),w,b
 13000  0047D4  A4D8               	btfss	status,2,c
 13001  0047D6  D024               	goto	l11112
 13002                           
 13003                           ; BSR set to: 1
 13004                           ;DisplayProtocol.h: 132: introducido[passSection]++;
 13005  0047D8  0101               	movlb	1	; () banked
 13006  0047DA  51BB               	movf	_passSection& (0+255),w,b
 13007  0047DC  0D01               	mullw	1
 13008  0047DE  0EAD               	movlw	low _introducido
 13009  0047E0  24F3               	addwf	prodl,w,c
 13010  0047E2  6ED9               	movwf	fsr2l,c
 13011  0047E4  0E01               	movlw	high _introducido
 13012  0047E6  20F4               	addwfc	prodh,w,c
 13013  0047E8  6EDA               	movwf	fsr2h,c
 13014  0047EA  2ADF               	incf	indf2,f,c
 13015                           
 13016                           ;DisplayProtocol.h: 133: if (introducido[passSection] > 9)
 13017  0047EC  0101               	movlb	1	; () banked
 13018  0047EE  51BB               	movf	_passSection& (0+255),w,b
 13019  0047F0  0D01               	mullw	1
 13020  0047F2  0EAD               	movlw	low _introducido
 13021  0047F4  24F3               	addwf	prodl,w,c
 13022  0047F6  6ED9               	movwf	fsr2l,c
 13023  0047F8  0E01               	movlw	high _introducido
 13024  0047FA  20F4               	addwfc	prodh,w,c
 13025  0047FC  6EDA               	movwf	fsr2h,c
 13026  0047FE  50DF               	movf	indf2,w,c
 13027  004800  0A80               	xorlw	128
 13028  004802  0F76               	addlw	-138
 13029  004804  A0D8               	btfss	status,0,c
 13030  004806  0012               	return	
 13031                           
 13032                           ; BSR set to: 1
 13033                           ;DisplayProtocol.h: 134: introducido[passSection] = 0;
 13034  004808  0101               	movlb	1	; () banked
 13035  00480A  51BB               	movf	_passSection& (0+255),w,b
 13036  00480C  0D01               	mullw	1
 13037  00480E  0EAD               	movlw	low _introducido
 13038  004810  24F3               	addwf	prodl,w,c
 13039  004812  6ED9               	movwf	fsr2l,c
 13040  004814  0E01               	movlw	high _introducido
 13041  004816  20F4               	addwfc	prodh,w,c
 13042  004818  6EDA               	movwf	fsr2h,c
 13043  00481A  0E00               	movlw	0
 13044  00481C  6EDF               	movwf	indf2,c
 13045                           
 13046                           ; BSR set to: 1
 13047                           ;DisplayProtocol.h: 135: } else if (actualScreen == 2 || actualScreen == 3
 13048  00481E  0012               	return	
 13049  004820                     l11112:
 13050                           
 13051                           ; BSR set to: 1
 13052                           ;DisplayProtocol.h: 136: || actualScreen == 10 || actualScreen == 11
 13053                           ;DisplayProtocol.h: 137: || actualScreen == 15) {
 13054  004820  0E02               	movlw	2
 13055  004822  0101               	movlb	1	; () banked
 13056  004824  19BD               	xorwf	_actualScreen& (0+255),w,b
 13057  004826  B4D8               	btfsc	status,2,c
 13058  004828  D014               	goto	l11122
 13059                           
 13060                           ; BSR set to: 1
 13061  00482A  0E03               	movlw	3
 13062  00482C  0101               	movlb	1	; () banked
 13063  00482E  19BD               	xorwf	_actualScreen& (0+255),w,b
 13064  004830  B4D8               	btfsc	status,2,c
 13065  004832  D00F               	goto	l11122
 13066                           
 13067                           ; BSR set to: 1
 13068  004834  0E0A               	movlw	10
 13069  004836  0101               	movlb	1	; () banked
 13070  004838  19BD               	xorwf	_actualScreen& (0+255),w,b
 13071  00483A  B4D8               	btfsc	status,2,c
 13072  00483C  D00A               	goto	l11122
 13073                           
 13074                           ; BSR set to: 1
 13075  00483E  0E0B               	movlw	11
 13076  004840  0101               	movlb	1	; () banked
 13077  004842  19BD               	xorwf	_actualScreen& (0+255),w,b
 13078  004844  B4D8               	btfsc	status,2,c
 13079  004846  D005               	goto	l11122
 13080                           
 13081                           ; BSR set to: 1
 13082  004848  0E0F               	movlw	15
 13083  00484A  0101               	movlb	1	; () banked
 13084  00484C  19BD               	xorwf	_actualScreen& (0+255),w,b
 13085  00484E  A4D8               	btfss	status,2,c
 13086  004850  D011               	goto	l11128
 13087  004852                     l11122:
 13088                           
 13089                           ; BSR set to: 1
 13090                           ;DisplayProtocol.h: 138: selSN = !selSN;
 13091  004852  0101               	movlb	1	; () banked
 13092  004854  51BA               	movf	_selSN& (0+255),w,b
 13093  004856  A4D8               	btfss	status,2,c
 13094  004858  D002               	goto	u16360
 13095  00485A  0E01               	movlw	1
 13096  00485C  D001               	goto	u16370
 13097  00485E                     u16360:
 13098  00485E  0E00               	movlw	0
 13099  004860                     u16370:
 13100  004860  0101               	movlb	1	; () banked
 13101  004862  6FBA               	movwf	_selSN& (0+255),b
 13102                           
 13103                           ; BSR set to: 1
 13104                           ;DisplayProtocol.h: 139: if(selSN > 1)
 13105  004864  0E01               	movlw	1
 13106  004866  0101               	movlb	1	; () banked
 13107  004868  65BA               	cpfsgt	_selSN& (0+255),b
 13108  00486A  0012               	return	
 13109                           
 13110                           ; BSR set to: 1
 13111                           ;DisplayProtocol.h: 140: selSN = 0;
 13112  00486C  0E00               	movlw	0
 13113  00486E  0101               	movlb	1	; () banked
 13114  004870  6FBA               	movwf	_selSN& (0+255),b
 13115                           
 13116                           ; BSR set to: 1
 13117                           ;DisplayProtocol.h: 141: }else if(actualScreen == 5) {
 13118  004872  0012               	return	
 13119  004874                     l11128:
 13120                           
 13121                           ; BSR set to: 1
 13122  004874  0E05               	movlw	5
 13123  004876  0101               	movlb	1	; () banked
 13124  004878  19BD               	xorwf	_actualScreen& (0+255),w,b
 13125  00487A  B4D8               	btfsc	status,2,c
 13126  00487C  D008               	goto	l11138
 13127  00487E  D013               	goto	l11140
 13128  004880                     l11132:
 13129                           
 13130                           ; BSR set to: 1
 13131                           ;DisplayProtocol.h: 146: chanValDigUP();
 13132  004880  EC66  F029         	call	_chanValDigUP	;wreg free
 13133                           
 13134                           ;DisplayProtocol.h: 147: break;
 13135  004884  0012               	return	
 13136  004886                     l11134:
 13137                           
 13138                           ;DisplayProtocol.h: 149: chanVals++;
 13139  004886  0101               	movlb	1	; () banked
 13140  004888  4BB6               	infsnz	_chanVals& (0+255),f,b
 13141  00488A  2BB7               	incf	(_chanVals+1)& (0+255),f,b
 13142                           
 13143                           ; BSR set to: 1
 13144                           ;DisplayProtocol.h: 151: }
 13145                           ;DisplayProtocol.h: 152: }
 13146                           
 13147                           ;DisplayProtocol.h: 150: break;
 13148  00488C  0012               	return	
 13149  00488E                     l11138:
 13150                           
 13151                           ; BSR set to: 1
 13152  00488E  0101               	movlb	1	; () banked
 13153  004890  51BC               	movf	_menuSection& (0+255),w,b
 13154                           
 13155                           ; Switch size 1, requested type "space"
 13156                           ; Number of cases is 3, Range of values is 0 to 2
 13157                           ; switch strategies available:
 13158                           ; Name         Instructions Cycles
 13159                           ; simple_byte           10     6 (average)
 13160                           ;	Chosen strategy is simple_byte
 13161  004892  0A00               	xorlw	0	; case 0
 13162  004894  B4D8               	btfsc	status,2,c
 13163  004896  0012               	return	
 13164  004898  0A01               	xorlw	1	; case 1
 13165  00489A  B4D8               	btfsc	status,2,c
 13166  00489C  D7F1               	goto	l11132
 13167  00489E  0A03               	xorlw	3	; case 2
 13168  0048A0  A4D8               	btfss	status,2,c
 13169                           
 13170                           ; BSR set to: 1
 13171                           ;DisplayProtocol.h: 153: }else if(actualScreen == 12)
 13172  0048A2  0012               	return	
 13173  0048A4  D7F0               	goto	l11134
 13174  0048A6                     l11140:
 13175                           
 13176                           ; BSR set to: 1
 13177  0048A6  0E0C               	movlw	12
 13178  0048A8  0101               	movlb	1	; () banked
 13179  0048AA  19BD               	xorwf	_actualScreen& (0+255),w,b
 13180  0048AC  A4D8               	btfss	status,2,c
 13181  0048AE  0012               	return	
 13182                           
 13183                           ; BSR set to: 1
 13184                           ;DisplayProtocol.h: 154: chanValDigUP();
 13185  0048B0  EC66  F029         	call	_chanValDigUP	;wreg free
 13186  0048B4  0012               	return	
 13187  0048B6                     __end_of_pressUP:
 13188                           	opt stack 0
 13189                           tblptru	equ	0xFF8
 13190                           tblptrh	equ	0xFF7
 13191                           tblptrl	equ	0xFF6
 13192                           tablat	equ	0xFF5
 13193                           prodh	equ	0xFF4
 13194                           prodl	equ	0xFF3
 13195                           intcon	equ	0xFF2
 13196                           postinc0	equ	0xFEE
 13197                           wreg	equ	0xFE8
 13198                           postdec1	equ	0xFE5
 13199                           fsr1l	equ	0xFE1
 13200                           indf2	equ	0xFDF
 13201                           postinc2	equ	0xFDE
 13202                           postdec2	equ	0xFDD
 13203                           fsr2h	equ	0xFDA
 13204                           fsr2l	equ	0xFD9
 13205                           status	equ	0xFD8
 13206                           
 13207 ;; *************** function _chanValDigUP *****************
 13208 ;; Defined at:
 13209 ;;		line 28 in file "source/DisplayProtocol.h"
 13210 ;; Parameters:    Size  Location     Type
 13211 ;;		None
 13212 ;; Auto vars:     Size  Location     Type
 13213 ;;		None
 13214 ;; Return value:  Size  Location     Type
 13215 ;;                  1    wreg      void 
 13216 ;; Registers used:
 13217 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13218 ;; Tracked objects:
 13219 ;;		On entry : 0/0
 13220 ;;		On exit  : 0/0
 13221 ;;		Unchanged: 0/0
 13222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13223 ;;      Params:         0       0       0       0       0       0       0
 13224 ;;      Locals:         0       0       0       0       0       0       0
 13225 ;;      Temps:          0       0       5       0       0       0       0
 13226 ;;      Totals:         0       0       5       0       0       0       0
 13227 ;;Total ram usage:        5 bytes
 13228 ;; Hardware stack levels used:    1
 13229 ;; Hardware stack levels required when called:   12
 13230 ;; This function calls:
 13231 ;;		Nothing
 13232 ;; This function is called by:
 13233 ;;		_pressUP
 13234 ;; This function uses a non-reentrant model
 13235 ;;
 13236                           
 13237                           	psect	text53
 13238  0052CC                     __ptext53:
 13239                           	opt stack 0
 13240  0052CC                     _chanValDigUP:
 13241                           	opt stack 16
 13242                           
 13243                           ;DisplayProtocol.h: 29: chanValdig[chanValSection]++;
 13244                           
 13245                           ;incstack = 0
 13246  0052CC  0101               	movlb	1	; () banked
 13247  0052CE  519C               	movf	_chanValSection& (0+255),w,b
 13248  0052D0  0D01               	mullw	1
 13249  0052D2  0EA3               	movlw	low _chanValdig
 13250  0052D4  24F3               	addwf	prodl,w,c
 13251  0052D6  6ED9               	movwf	fsr2l,c
 13252  0052D8  0E01               	movlw	high _chanValdig
 13253  0052DA  20F4               	addwfc	prodh,w,c
 13254  0052DC  6EDA               	movwf	fsr2h,c
 13255  0052DE  2ADF               	incf	indf2,f,c
 13256                           
 13257                           ;DisplayProtocol.h: 30: if(chanValdig[chanValSection] > 9) {
 13258  0052E0  0101               	movlb	1	; () banked
 13259  0052E2  519C               	movf	_chanValSection& (0+255),w,b
 13260  0052E4  0D01               	mullw	1
 13261  0052E6  0EA3               	movlw	low _chanValdig
 13262  0052E8  24F3               	addwf	prodl,w,c
 13263  0052EA  6ED9               	movwf	fsr2l,c
 13264  0052EC  0E01               	movlw	high _chanValdig
 13265  0052EE  20F4               	addwfc	prodh,w,c
 13266  0052F0  6EDA               	movwf	fsr2h,c
 13267  0052F2  50DF               	movf	indf2,w,c
 13268  0052F4  0A80               	xorlw	128
 13269  0052F6  0F76               	addlw	-138
 13270  0052F8  A0D8               	btfss	status,0,c
 13271  0052FA  0012               	return	
 13272                           
 13273                           ; BSR set to: 1
 13274                           ;DisplayProtocol.h: 31: chanValdig[chanValSection] = 0;
 13275  0052FC  0101               	movlb	1	; () banked
 13276  0052FE  519C               	movf	_chanValSection& (0+255),w,b
 13277  005300  0D01               	mullw	1
 13278  005302  0EA3               	movlw	low _chanValdig
 13279  005304  24F3               	addwf	prodl,w,c
 13280  005306  6ED9               	movwf	fsr2l,c
 13281  005308  0E01               	movlw	high _chanValdig
 13282  00530A  20F4               	addwfc	prodh,w,c
 13283  00530C  6EDA               	movwf	fsr2h,c
 13284  00530E  0E00               	movlw	0
 13285  005310  6EDF               	movwf	indf2,c
 13286                           
 13287                           ; BSR set to: 1
 13288                           ;DisplayProtocol.h: 32: if(chanValSection > 1 && chanValdig[chanValSection - 1] < 9)
 13289  005312  0101               	movlb	1	; () banked
 13290  005314  519C               	movf	_chanValSection& (0+255),w,b
 13291  005316  0A80               	xorlw	128
 13292  005318  0F7E               	addlw	-130
 13293  00531A  A0D8               	btfss	status,0,c
 13294  00531C  0012               	return	
 13295                           
 13296                           ; BSR set to: 1
 13297  00531E  0EFF               	movlw	255
 13298  005320  0101               	movlb	1	; () banked
 13299  005322  6F00               	movwf	??_chanValDigUP& (0+255),b
 13300  005324  0EFF               	movlw	255
 13301  005326  0101               	movlb	1	; () banked
 13302  005328  6F01               	movwf	(??_chanValDigUP+1)& (0+255),b
 13303  00532A  C19C  F102         	movff	_chanValSection,??_chanValDigUP+2
 13304  00532E  0101               	movlb	1	; () banked
 13305  005330  6B03               	clrf	(??_chanValDigUP+3)& (0+255),b
 13306  005332  BF02               	btfsc	(??_chanValDigUP+2)& (0+255),7,b
 13307  005334  0703               	decf	(??_chanValDigUP+3)& (0+255),f,b
 13308  005336  0101               	movlb	1	; () banked
 13309  005338  5100               	movf	??_chanValDigUP& (0+255),w,b
 13310  00533A  0101               	movlb	1	; () banked
 13311  00533C  2702               	addwf	(??_chanValDigUP+2)& (0+255),f,b
 13312  00533E  0101               	movlb	1	; () banked
 13313  005340  5101               	movf	(??_chanValDigUP+1)& (0+255),w,b
 13314  005342  0101               	movlb	1	; () banked
 13315  005344  2303               	addwfc	(??_chanValDigUP+3)& (0+255),f,b
 13316  005346  0EA3               	movlw	low _chanValdig
 13317  005348  0101               	movlb	1	; () banked
 13318  00534A  2502               	addwf	(??_chanValDigUP+2)& (0+255),w,b
 13319  00534C  6ED9               	movwf	fsr2l,c
 13320  00534E  0E01               	movlw	high _chanValdig
 13321  005350  0101               	movlb	1	; () banked
 13322  005352  2103               	addwfc	(??_chanValDigUP+3)& (0+255),w,b
 13323  005354  6EDA               	movwf	fsr2h,c
 13324  005356  50DF               	movf	indf2,w,c
 13325  005358  0A80               	xorlw	128
 13326  00535A  0F77               	addlw	-137
 13327  00535C  B0D8               	btfsc	status,0,c
 13328  00535E  0012               	return	
 13329                           
 13330                           ; BSR set to: 1
 13331                           ;DisplayProtocol.h: 33: chanValdig[chanValSection - 1]++;
 13332  005360  0EFF               	movlw	255
 13333  005362  0101               	movlb	1	; () banked
 13334  005364  6F00               	movwf	??_chanValDigUP& (0+255),b
 13335  005366  0EFF               	movlw	255
 13336  005368  0101               	movlb	1	; () banked
 13337  00536A  6F01               	movwf	(??_chanValDigUP+1)& (0+255),b
 13338  00536C  C19C  F102         	movff	_chanValSection,??_chanValDigUP+2
 13339  005370  0101               	movlb	1	; () banked
 13340  005372  6B03               	clrf	(??_chanValDigUP+3)& (0+255),b
 13341  005374  BF02               	btfsc	(??_chanValDigUP+2)& (0+255),7,b
 13342  005376  0703               	decf	(??_chanValDigUP+3)& (0+255),f,b
 13343  005378  0101               	movlb	1	; () banked
 13344  00537A  5100               	movf	??_chanValDigUP& (0+255),w,b
 13345  00537C  0101               	movlb	1	; () banked
 13346  00537E  2702               	addwf	(??_chanValDigUP+2)& (0+255),f,b
 13347  005380  0101               	movlb	1	; () banked
 13348  005382  5101               	movf	(??_chanValDigUP+1)& (0+255),w,b
 13349  005384  0101               	movlb	1	; () banked
 13350  005386  2303               	addwfc	(??_chanValDigUP+3)& (0+255),f,b
 13351  005388  0EA3               	movlw	low _chanValdig
 13352  00538A  0101               	movlb	1	; () banked
 13353  00538C  2502               	addwf	(??_chanValDigUP+2)& (0+255),w,b
 13354  00538E  6ED9               	movwf	fsr2l,c
 13355  005390  0E01               	movlw	high _chanValdig
 13356  005392  0101               	movlb	1	; () banked
 13357  005394  2103               	addwfc	(??_chanValDigUP+3)& (0+255),w,b
 13358  005396  6EDA               	movwf	fsr2h,c
 13359  005398  2ADF               	incf	indf2,f,c
 13360                           
 13361                           ; BSR set to: 1
 13362  00539A  0012               	return	
 13363  00539C                     __end_of_chanValDigUP:
 13364                           	opt stack 0
 13365                           tblptru	equ	0xFF8
 13366                           tblptrh	equ	0xFF7
 13367                           tblptrl	equ	0xFF6
 13368                           tablat	equ	0xFF5
 13369                           prodh	equ	0xFF4
 13370                           prodl	equ	0xFF3
 13371                           intcon	equ	0xFF2
 13372                           postinc0	equ	0xFEE
 13373                           wreg	equ	0xFE8
 13374                           postdec1	equ	0xFE5
 13375                           fsr1l	equ	0xFE1
 13376                           indf2	equ	0xFDF
 13377                           postinc2	equ	0xFDE
 13378                           postdec2	equ	0xFDD
 13379                           fsr2h	equ	0xFDA
 13380                           fsr2l	equ	0xFD9
 13381                           status	equ	0xFD8
 13382                           
 13383 ;; *************** function _pressRETRO *****************
 13384 ;; Defined at:
 13385 ;;		line 227 in file "source/DisplayProtocol.h"
 13386 ;; Parameters:    Size  Location     Type
 13387 ;;		None
 13388 ;; Auto vars:     Size  Location     Type
 13389 ;;		None
 13390 ;; Return value:  Size  Location     Type
 13391 ;;                  1    wreg      void 
 13392 ;; Registers used:
 13393 ;;		wreg, status,2, status,0, cstack
 13394 ;; Tracked objects:
 13395 ;;		On entry : 0/0
 13396 ;;		On exit  : 0/0
 13397 ;;		Unchanged: 0/0
 13398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13399 ;;      Params:         0       0       0       0       0       0       0
 13400 ;;      Locals:         0       0       0       0       0       0       0
 13401 ;;      Temps:          0       0       0       0       0       0       0
 13402 ;;      Totals:         0       0       0       0       0       0       0
 13403 ;;Total ram usage:        0 bytes
 13404 ;; Hardware stack levels used:    1
 13405 ;; Hardware stack levels required when called:   14
 13406 ;; This function calls:
 13407 ;;		_initProtocoll
 13408 ;; This function is called by:
 13409 ;;		_buttonChecking
 13410 ;; This function uses a non-reentrant model
 13411 ;;
 13412                           
 13413                           	psect	text54
 13414  0056CC                     __ptext54:
 13415                           	opt stack 0
 13416  0056CC                     _pressRETRO:
 13417                           	opt stack 15
 13418                           
 13419                           ;DisplayProtocol.h: 228: if (actualScreen == 1) {
 13420                           
 13421                           ; BSR set to: 1
 13422                           ;incstack = 0
 13423  0056CC  0101               	movlb	1	; () banked
 13424  0056CE  05BD               	decf	_actualScreen& (0+255),w,b
 13425  0056D0  A4D8               	btfss	status,2,c
 13426  0056D2  D004               	goto	l11234
 13427                           
 13428                           ; BSR set to: 1
 13429                           ;DisplayProtocol.h: 229: actualScreen = 0;
 13430  0056D4  0E00               	movlw	0
 13431  0056D6  0101               	movlb	1	; () banked
 13432  0056D8  6FBD               	movwf	_actualScreen& (0+255),b
 13433                           
 13434                           ;DisplayProtocol.h: 230: }else if (actualScreen == 2 || actualScreen == 3
 13435  0056DA  0012               	return	
 13436  0056DC                     l11234:
 13437                           
 13438                           ; BSR set to: 1
 13439                           ;DisplayProtocol.h: 231: || actualScreen == 10 || actualScreen == 11
 13440                           ;DisplayProtocol.h: 232: || actualScreen == 15) {
 13441  0056DC  0E02               	movlw	2
 13442  0056DE  0101               	movlb	1	; () banked
 13443  0056E0  19BD               	xorwf	_actualScreen& (0+255),w,b
 13444  0056E2  B4D8               	btfsc	status,2,c
 13445  0056E4  D014               	goto	l666
 13446                           
 13447                           ; BSR set to: 1
 13448  0056E6  0E03               	movlw	3
 13449  0056E8  0101               	movlb	1	; () banked
 13450  0056EA  19BD               	xorwf	_actualScreen& (0+255),w,b
 13451  0056EC  B4D8               	btfsc	status,2,c
 13452  0056EE  D00F               	goto	l666
 13453                           
 13454                           ; BSR set to: 1
 13455  0056F0  0E0A               	movlw	10
 13456  0056F2  0101               	movlb	1	; () banked
 13457  0056F4  19BD               	xorwf	_actualScreen& (0+255),w,b
 13458  0056F6  B4D8               	btfsc	status,2,c
 13459  0056F8  D00A               	goto	l666
 13460                           
 13461                           ; BSR set to: 1
 13462  0056FA  0E0B               	movlw	11
 13463  0056FC  0101               	movlb	1	; () banked
 13464  0056FE  19BD               	xorwf	_actualScreen& (0+255),w,b
 13465  005700  B4D8               	btfsc	status,2,c
 13466  005702  D005               	goto	l666
 13467                           
 13468                           ; BSR set to: 1
 13469  005704  0E0F               	movlw	15
 13470  005706  0101               	movlb	1	; () banked
 13471  005708  19BD               	xorwf	_actualScreen& (0+255),w,b
 13472  00570A  A4D8               	btfss	status,2,c
 13473  00570C  D003               	goto	l11244
 13474  00570E                     l666:
 13475                           
 13476                           ; BSR set to: 1
 13477                           ;DisplayProtocol.h: 233: actualScreen = tempLastScreen;
 13478  00570E  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 13479                           
 13480                           ;DisplayProtocol.h: 234: }else if(actualScreen == 5) {
 13481  005712  0012               	return	
 13482  005714                     l11244:
 13483                           
 13484                           ; BSR set to: 1
 13485  005714  0E05               	movlw	5
 13486  005716  0101               	movlb	1	; () banked
 13487  005718  19BD               	xorwf	_actualScreen& (0+255),w,b
 13488  00571A  A4D8               	btfss	status,2,c
 13489  00571C  D015               	goto	l11256
 13490                           
 13491                           ; BSR set to: 1
 13492                           ;DisplayProtocol.h: 235: if(menuSection != 2) {
 13493  00571E  0E02               	movlw	2
 13494  005720  0101               	movlb	1	; () banked
 13495  005722  19BC               	xorwf	_menuSection& (0+255),w,b
 13496  005724  B4D8               	btfsc	status,2,c
 13497  005726  D00C               	goto	l11254
 13498                           
 13499                           ; BSR set to: 1
 13500                           ;DisplayProtocol.h: 236: chanValSection++;
 13501  005728  0101               	movlb	1	; () banked
 13502  00572A  2B9C               	incf	_chanValSection& (0+255),f,b
 13503                           
 13504                           ; BSR set to: 1
 13505                           ;DisplayProtocol.h: 237: if(chanValSection > 5)
 13506  00572C  0101               	movlb	1	; () banked
 13507  00572E  519C               	movf	_chanValSection& (0+255),w,b
 13508  005730  0A80               	xorlw	128
 13509  005732  0F7A               	addlw	-134
 13510  005734  A0D8               	btfss	status,0,c
 13511  005736  0012               	return	
 13512                           
 13513                           ; BSR set to: 1
 13514                           ;DisplayProtocol.h: 238: chanValSection = 0;
 13515  005738  0E00               	movlw	0
 13516  00573A  0101               	movlb	1	; () banked
 13517  00573C  6F9C               	movwf	_chanValSection& (0+255),b
 13518                           
 13519                           ; BSR set to: 1
 13520                           ;DisplayProtocol.h: 239: }else
 13521  00573E  0012               	return	
 13522  005740                     l11254:
 13523                           
 13524                           ; BSR set to: 1
 13525                           ;DisplayProtocol.h: 240: actualScreen = 4;
 13526  005740  0E04               	movlw	4
 13527  005742  0101               	movlb	1	; () banked
 13528  005744  6FBD               	movwf	_actualScreen& (0+255),b
 13529                           
 13530                           ; BSR set to: 1
 13531                           ;DisplayProtocol.h: 241: }else if(actualScreen == 11)
 13532  005746  0012               	return	
 13533  005748                     l11256:
 13534                           
 13535                           ; BSR set to: 1
 13536  005748  0E0B               	movlw	11
 13537  00574A  0101               	movlb	1	; () banked
 13538  00574C  19BD               	xorwf	_actualScreen& (0+255),w,b
 13539  00574E  A4D8               	btfss	status,2,c
 13540  005750  D004               	goto	l11260
 13541                           
 13542                           ; BSR set to: 1
 13543                           ;DisplayProtocol.h: 242: actualScreen = 4;
 13544  005752  0E04               	movlw	4
 13545  005754  0101               	movlb	1	; () banked
 13546  005756  6FBD               	movwf	_actualScreen& (0+255),b
 13547  005758  0012               	return	
 13548  00575A                     l11260:
 13549                           
 13550                           ; BSR set to: 1
 13551                           ;DisplayProtocol.h: 243: else if(actualScreen == 12) {
 13552  00575A  0E0C               	movlw	12
 13553  00575C  0101               	movlb	1	; () banked
 13554  00575E  19BD               	xorwf	_actualScreen& (0+255),w,b
 13555  005760  A4D8               	btfss	status,2,c
 13556  005762  D00C               	goto	l11268
 13557                           
 13558                           ; BSR set to: 1
 13559                           ;DisplayProtocol.h: 244: chanValSection++;
 13560  005764  0101               	movlb	1	; () banked
 13561  005766  2B9C               	incf	_chanValSection& (0+255),f,b
 13562                           
 13563                           ; BSR set to: 1
 13564                           ;DisplayProtocol.h: 245: if(chanValSection > 5)
 13565  005768  0101               	movlb	1	; () banked
 13566  00576A  519C               	movf	_chanValSection& (0+255),w,b
 13567  00576C  0A80               	xorlw	128
 13568  00576E  0F7A               	addlw	-134
 13569  005770  A0D8               	btfss	status,0,c
 13570  005772  0012               	return	
 13571                           
 13572                           ; BSR set to: 1
 13573                           ;DisplayProtocol.h: 246: chanValSection = 0;
 13574  005774  0E00               	movlw	0
 13575  005776  0101               	movlb	1	; () banked
 13576  005778  6F9C               	movwf	_chanValSection& (0+255),b
 13577                           
 13578                           ; BSR set to: 1
 13579                           ;DisplayProtocol.h: 247: }else if(actualScreen == 13) {
 13580  00577A  0012               	return	
 13581  00577C                     l11268:
 13582                           
 13583                           ; BSR set to: 1
 13584  00577C  0E0D               	movlw	13
 13585  00577E  0101               	movlb	1	; () banked
 13586  005780  19BD               	xorwf	_actualScreen& (0+255),w,b
 13587  005782  A4D8               	btfss	status,2,c
 13588  005784  0012               	return	
 13589                           
 13590                           ; BSR set to: 1
 13591                           ;DisplayProtocol.h: 248: initProtocoll(1);
 13592  005786  0E01               	movlw	1
 13593  005788  ECA6  F036         	call	_initProtocoll
 13594  00578C  0012               	return	
 13595  00578E                     __end_of_pressRETRO:
 13596                           	opt stack 0
 13597                           tblptru	equ	0xFF8
 13598                           tblptrh	equ	0xFF7
 13599                           tblptrl	equ	0xFF6
 13600                           tablat	equ	0xFF5
 13601                           prodh	equ	0xFF4
 13602                           prodl	equ	0xFF3
 13603                           intcon	equ	0xFF2
 13604                           postinc0	equ	0xFEE
 13605                           wreg	equ	0xFE8
 13606                           postdec1	equ	0xFE5
 13607                           fsr1l	equ	0xFE1
 13608                           indf2	equ	0xFDF
 13609                           postinc2	equ	0xFDE
 13610                           postdec2	equ	0xFDD
 13611                           fsr2h	equ	0xFDA
 13612                           fsr2l	equ	0xFD9
 13613                           status	equ	0xFD8
 13614                           
 13615 ;; *************** function _pressENTER *****************
 13616 ;; Defined at:
 13617 ;;		line 291 in file "source/DisplayProtocol.h"
 13618 ;; Parameters:    Size  Location     Type
 13619 ;;		None
 13620 ;; Auto vars:     Size  Location     Type
 13621 ;;		None
 13622 ;; Return value:  Size  Location     Type
 13623 ;;                  1    wreg      void 
 13624 ;; Registers used:
 13625 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13626 ;; Tracked objects:
 13627 ;;		On entry : 0/0
 13628 ;;		On exit  : 0/0
 13629 ;;		Unchanged: 0/0
 13630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13631 ;;      Params:         0       0       0       0       0       0       0
 13632 ;;      Locals:         0       0       0       0       0       0       0
 13633 ;;      Temps:          0       0       0       0       0       0       0
 13634 ;;      Totals:         0       0       0       0       0       0       0
 13635 ;;Total ram usage:        0 bytes
 13636 ;; Hardware stack levels used:    1
 13637 ;; Hardware stack levels required when called:   17
 13638 ;; This function calls:
 13639 ;;		___ftmul
 13640 ;;		_checkPass
 13641 ;;		_confirmEdition
 13642 ;;		_desintegrator
 13643 ;;		_initProtocoll
 13644 ;;		_setPWM2duty
 13645 ;; This function is called by:
 13646 ;;		_buttonChecking
 13647 ;; This function uses a non-reentrant model
 13648 ;;
 13649                           
 13650                           	psect	text55
 13651  0011A2                     __ptext55:
 13652                           	opt stack 0
 13653  0011A2                     _pressENTER:
 13654                           	opt stack 12
 13655                           
 13656                           ;DisplayProtocol.h: 292: if (actualScreen == 1) {
 13657                           
 13658                           ;incstack = 0
 13659  0011A2  0101               	movlb	1	; () banked
 13660  0011A4  05BD               	decf	_actualScreen& (0+255),w,b
 13661  0011A6  A4D8               	btfss	status,2,c
 13662  0011A8  D018               	goto	l11326
 13663                           
 13664                           ; BSR set to: 1
 13665                           ;DisplayProtocol.h: 293: passSection++;
 13666  0011AA  0101               	movlb	1	; () banked
 13667  0011AC  2BBB               	incf	_passSection& (0+255),f,b
 13668                           
 13669                           ; BSR set to: 1
 13670                           ;DisplayProtocol.h: 294: if (passSection > 3) {
 13671  0011AE  0101               	movlb	1	; () banked
 13672  0011B0  51BB               	movf	_passSection& (0+255),w,b
 13673  0011B2  0A80               	xorlw	128
 13674  0011B4  0F7C               	addlw	-132
 13675  0011B6  A0D8               	btfss	status,0,c
 13676  0011B8  0012               	return	
 13677                           
 13678                           ; BSR set to: 1
 13679                           ;DisplayProtocol.h: 295: passSection = 0;
 13680  0011BA  0E00               	movlw	0
 13681  0011BC  0101               	movlb	1	; () banked
 13682  0011BE  6FBB               	movwf	_passSection& (0+255),b
 13683                           
 13684                           ; BSR set to: 1
 13685                           ;DisplayProtocol.h: 296: if (checkPass())
 13686  0011C0  EC82  F031         	call	_checkPass	;wreg free
 13687  0011C4  0900               	iorlw	0
 13688  0011C6  B4D8               	btfsc	status,2,c
 13689  0011C8  D004               	goto	l11324
 13690                           
 13691                           ;DisplayProtocol.h: 297: actualScreen = 8;
 13692  0011CA  0E08               	movlw	8
 13693  0011CC  0101               	movlb	1	; () banked
 13694  0011CE  6FBD               	movwf	_actualScreen& (0+255),b
 13695  0011D0  0012               	return	
 13696  0011D2                     l11324:
 13697                           
 13698                           ;DisplayProtocol.h: 298: else
 13699                           ;DisplayProtocol.h: 299: actualScreen = 7;
 13700  0011D2  0E07               	movlw	7
 13701  0011D4  0101               	movlb	1	; () banked
 13702  0011D6  6FBD               	movwf	_actualScreen& (0+255),b
 13703                           
 13704                           ; BSR set to: 1
 13705                           ;DisplayProtocol.h: 300: }
 13706                           ;DisplayProtocol.h: 301: }else if(actualScreen == 4) {
 13707                           
 13708                           ; BSR set to: 1
 13709  0011D8  0012               	return	
 13710  0011DA                     l11326:
 13711                           
 13712                           ; BSR set to: 1
 13713  0011DA  0E04               	movlw	4
 13714  0011DC  0101               	movlb	1	; () banked
 13715  0011DE  19BD               	xorwf	_actualScreen& (0+255),w,b
 13716  0011E0  B4D8               	btfsc	status,2,c
 13717  0011E2  D038               	goto	l11350
 13718  0011E4  D046               	goto	l11352
 13719  0011E6                     l711:
 13720                           
 13721                           ; BSR set to: 1
 13722                           ;DisplayProtocol.h: 304: tempLastScreen = actualScreen;
 13723  0011E6  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 13724                           
 13725                           ; BSR set to: 1
 13726                           ;DisplayProtocol.h: 305: if(processStarted) {
 13727  0011EA  0100               	movlb	0	; () banked
 13728  0011EC  51C0               	movf	_processStarted& (0+255),w,b
 13729  0011EE  B4D8               	btfsc	status,2,c
 13730  0011F0  D007               	goto	l11334
 13731                           
 13732                           ; BSR set to: 0
 13733                           ;DisplayProtocol.h: 306: actualScreen = 3;
 13734  0011F2  0E03               	movlw	3
 13735  0011F4  0101               	movlb	1	; () banked
 13736  0011F6  6FBD               	movwf	_actualScreen& (0+255),b
 13737                           
 13738                           ;DisplayProtocol.h: 307: selSN = 0;
 13739  0011F8  0E00               	movlw	0
 13740  0011FA  0101               	movlb	1	; () banked
 13741  0011FC  6FBA               	movwf	_selSN& (0+255),b
 13742                           
 13743                           ;DisplayProtocol.h: 308: }else {
 13744  0011FE  0012               	return	
 13745  001200                     l11334:
 13746                           
 13747                           ;DisplayProtocol.h: 309: actualScreen = 2;
 13748  001200  0E02               	movlw	2
 13749  001202  0101               	movlb	1	; () banked
 13750  001204  6FBD               	movwf	_actualScreen& (0+255),b
 13751                           
 13752                           ;DisplayProtocol.h: 310: selSN = 1;
 13753  001206  0E01               	movlw	1
 13754  001208  0101               	movlb	1	; () banked
 13755  00120A  6FBA               	movwf	_selSN& (0+255),b
 13756                           
 13757                           ; BSR set to: 1
 13758                           ;DisplayProtocol.h: 311: }
 13759                           ;DisplayProtocol.h: 312: break;
 13760  00120C  0012               	return	
 13761  00120E                     l715:
 13762                           
 13763                           ; BSR set to: 1
 13764                           ;DisplayProtocol.h: 314: chanValf = kgXcorte;
 13765  00120E  C198  F1B1         	movff	_kgXcorte,_chanValf
 13766  001212  C199  F1B2         	movff	_kgXcorte+1,_chanValf+1
 13767  001216  C19A  F1B3         	movff	_kgXcorte+2,_chanValf+2
 13768                           
 13769                           ; BSR set to: 1
 13770                           ;DisplayProtocol.h: 315: desintegrator();
 13771  00121A  ECE6  F019         	call	_desintegrator	;wreg free
 13772                           
 13773                           ;DisplayProtocol.h: 316: actualScreen = 5;
 13774  00121E  0E05               	movlw	5
 13775  001220  0101               	movlb	1	; () banked
 13776  001222  6FBD               	movwf	_actualScreen& (0+255),b
 13777                           
 13778                           ;DisplayProtocol.h: 317: break;
 13779  001224  0012               	return	
 13780  001226                     l716:
 13781                           
 13782                           ; BSR set to: 1
 13783                           ;DisplayProtocol.h: 319: tempLastScreen = actualScreen;
 13784  001226  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 13785                           
 13786                           ;DisplayProtocol.h: 320: chanVals = numCortes;
 13787  00122A  C0D2  F1B6         	movff	_numCortes,_chanVals
 13788  00122E  C0D3  F1B7         	movff	_numCortes+1,_chanVals+1
 13789                           
 13790                           ; BSR set to: 1
 13791                           ;DisplayProtocol.h: 321: actualScreen = 5;
 13792  001232  0E05               	movlw	5
 13793  001234  0101               	movlb	1	; () banked
 13794  001236  6FBD               	movwf	_actualScreen& (0+255),b
 13795                           
 13796                           ;DisplayProtocol.h: 322: break;
 13797  001238  0012               	return	
 13798  00123A                     l11342:
 13799                           
 13800                           ; BSR set to: 1
 13801                           ;DisplayProtocol.h: 324: if(!processStarted) {
 13802  00123A  0100               	movlb	0	; () banked
 13803  00123C  51C0               	movf	_processStarted& (0+255),w,b
 13804  00123E  A4D8               	btfss	status,2,c
 13805  001240  0012               	return	
 13806                           
 13807                           ; BSR set to: 0
 13808                           ;DisplayProtocol.h: 325: tempLastScreen = actualScreen;
 13809  001242  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 13810                           
 13811                           ; BSR set to: 0
 13812                           ;DisplayProtocol.h: 326: selSN = 1;
 13813  001246  0E01               	movlw	1
 13814  001248  0101               	movlb	1	; () banked
 13815  00124A  6FBA               	movwf	_selSN& (0+255),b
 13816                           
 13817                           ;DisplayProtocol.h: 327: actualScreen = 11;
 13818  00124C  0E0B               	movlw	11
 13819  00124E  0101               	movlb	1	; () banked
 13820  001250  6FBD               	movwf	_actualScreen& (0+255),b
 13821                           
 13822                           ; BSR set to: 1
 13823                           ;DisplayProtocol.h: 330: }
 13824                           ;DisplayProtocol.h: 331: }
 13825                           
 13826                           ; BSR set to: 1
 13827                           ;DisplayProtocol.h: 328: }
 13828                           ;DisplayProtocol.h: 329: break;
 13829  001252  0012               	return	
 13830  001254                     l11350:
 13831                           
 13832                           ; BSR set to: 1
 13833  001254  0101               	movlb	1	; () banked
 13834  001256  51BC               	movf	_menuSection& (0+255),w,b
 13835                           
 13836                           ; Switch size 1, requested type "space"
 13837                           ; Number of cases is 4, Range of values is 0 to 3
 13838                           ; switch strategies available:
 13839                           ; Name         Instructions Cycles
 13840                           ; simple_byte           13     7 (average)
 13841                           ;	Chosen strategy is simple_byte
 13842  001258  0A00               	xorlw	0	; case 0
 13843  00125A  B4D8               	btfsc	status,2,c
 13844  00125C  D7C4               	goto	l711
 13845  00125E  0A01               	xorlw	1	; case 1
 13846  001260  B4D8               	btfsc	status,2,c
 13847  001262  D7D5               	goto	l715
 13848  001264  0A03               	xorlw	3	; case 2
 13849  001266  B4D8               	btfsc	status,2,c
 13850  001268  D7DE               	goto	l716
 13851  00126A  0A01               	xorlw	1	; case 3
 13852  00126C  A4D8               	btfss	status,2,c
 13853                           
 13854                           ; BSR set to: 1
 13855                           ;DisplayProtocol.h: 332: }else if(actualScreen == 7)
 13856  00126E  0012               	return	
 13857  001270  D7E4               	goto	l11342
 13858  001272                     l11352:
 13859                           
 13860                           ; BSR set to: 1
 13861  001272  0E07               	movlw	7
 13862  001274  0101               	movlb	1	; () banked
 13863  001276  19BD               	xorwf	_actualScreen& (0+255),w,b
 13864  001278  A4D8               	btfss	status,2,c
 13865  00127A  D004               	goto	l11356
 13866                           
 13867                           ; BSR set to: 1
 13868                           ;DisplayProtocol.h: 333: actualScreen = 1;
 13869  00127C  0E01               	movlw	1
 13870  00127E  0101               	movlb	1	; () banked
 13871  001280  6FBD               	movwf	_actualScreen& (0+255),b
 13872  001282  0012               	return	
 13873  001284                     l11356:
 13874                           
 13875                           ; BSR set to: 1
 13876                           ;DisplayProtocol.h: 334: else if(actualScreen == 6) {
 13877  001284  0E06               	movlw	6
 13878  001286  0101               	movlb	1	; () banked
 13879  001288  19BD               	xorwf	_actualScreen& (0+255),w,b
 13880  00128A  B4D8               	btfsc	status,2,c
 13881  00128C  0012               	return	
 13882                           
 13883                           ; BSR set to: 1
 13884                           
 13885                           ; BSR set to: 1
 13886                           
 13887                           ; BSR set to: 1
 13888                           ;DisplayProtocol.h: 336: }else if(actualScreen == 5) {
 13889  00128E  0E05               	movlw	5
 13890  001290  0101               	movlb	1	; () banked
 13891  001292  19BD               	xorwf	_actualScreen& (0+255),w,b
 13892  001294  A4D8               	btfss	status,2,c
 13893  001296  D018               	goto	l11372
 13894                           
 13895                           ; BSR set to: 1
 13896                           ;DisplayProtocol.h: 337: if(menuSection != 2) {
 13897  001298  0E02               	movlw	2
 13898  00129A  0101               	movlb	1	; () banked
 13899  00129C  19BC               	xorwf	_menuSection& (0+255),w,b
 13900  00129E  B4D8               	btfsc	status,2,c
 13901  0012A0  D009               	goto	l11370
 13902                           
 13903                           ; BSR set to: 1
 13904                           ;DisplayProtocol.h: 338: chanValSection--;
 13905  0012A2  0101               	movlb	1	; () banked
 13906  0012A4  079C               	decf	_chanValSection& (0+255),f,b
 13907                           
 13908                           ; BSR set to: 1
 13909                           ;DisplayProtocol.h: 339: if(chanValSection < 0)
 13910  0012A6  0101               	movlb	1	; () banked
 13911  0012A8  AF9C               	btfss	_chanValSection& (0+255),7,b
 13912  0012AA  0012               	return	
 13913                           
 13914                           ; BSR set to: 1
 13915                           ;DisplayProtocol.h: 340: chanValSection = 5;
 13916  0012AC  0E05               	movlw	5
 13917  0012AE  0101               	movlb	1	; () banked
 13918  0012B0  6F9C               	movwf	_chanValSection& (0+255),b
 13919                           
 13920                           ; BSR set to: 1
 13921                           ;DisplayProtocol.h: 341: }else
 13922  0012B2  0012               	return	
 13923  0012B4                     l11370:
 13924                           
 13925                           ; BSR set to: 1
 13926                           ;DisplayProtocol.h: 342: confirmEdition(!processStarted);
 13927  0012B4  0100               	movlb	0	; () banked
 13928  0012B6  51C0               	movf	_processStarted& (0+255),w,b
 13929  0012B8  A4D8               	btfss	status,2,c
 13930  0012BA  D002               	goto	u17020
 13931  0012BC  0E01               	movlw	1
 13932  0012BE  D001               	goto	u17030
 13933  0012C0                     u17020:
 13934  0012C0  0E00               	movlw	0
 13935  0012C2                     u17030:
 13936  0012C2  ECE5  F02C         	call	_confirmEdition
 13937                           
 13938                           ;DisplayProtocol.h: 343: }else if(actualScreen == 2) {
 13939  0012C6  0012               	return	
 13940  0012C8                     l11372:
 13941  0012C8  0E02               	movlw	2
 13942  0012CA  0101               	movlb	1	; () banked
 13943  0012CC  19BD               	xorwf	_actualScreen& (0+255),w,b
 13944  0012CE  A4D8               	btfss	status,2,c
 13945  0012D0  D018               	goto	l11382
 13946                           
 13947                           ; BSR set to: 1
 13948                           ;DisplayProtocol.h: 344: initProtocoll(!selSN);
 13949  0012D2  0101               	movlb	1	; () banked
 13950  0012D4  51BA               	movf	_selSN& (0+255),w,b
 13951  0012D6  A4D8               	btfss	status,2,c
 13952  0012D8  D002               	goto	u17050
 13953  0012DA  0E01               	movlw	1
 13954  0012DC  D001               	goto	u17060
 13955  0012DE                     u17050:
 13956  0012DE  0E00               	movlw	0
 13957  0012E0                     u17060:
 13958  0012E0  ECA6  F036         	call	_initProtocoll
 13959                           
 13960                           ;DisplayProtocol.h: 345: if(!selSN) {
 13961  0012E4  0101               	movlb	1	; () banked
 13962  0012E6  51BA               	movf	_selSN& (0+255),w,b
 13963  0012E8  A4D8               	btfss	status,2,c
 13964  0012EA  D008               	goto	l730
 13965                           
 13966                           ; BSR set to: 1
 13967                           ;DisplayProtocol.h: 346: actualScreen = 14;
 13968  0012EC  0E0E               	movlw	14
 13969  0012EE  0101               	movlb	1	; () banked
 13970  0012F0  6FBD               	movwf	_actualScreen& (0+255),b
 13971                           
 13972                           ; BSR set to: 1
 13973                           ;DisplayProtocol.h: 347: LATCbits.LATC4 = 1;
 13974  0012F2  888B               	bsf	3979,4,c	;volatile
 13975                           
 13976                           ;DisplayProtocol.h: 348: ready2Cut = 1;
 13977  0012F4  0E01               	movlw	1
 13978  0012F6  0100               	movlb	0	; () banked
 13979  0012F8  6FBF               	movwf	_ready2Cut& (0+255),b
 13980                           
 13981                           ;DisplayProtocol.h: 350: }else
 13982  0012FA  0012               	return	
 13983  0012FC                     l730:
 13984                           
 13985                           ; BSR set to: 1
 13986                           ;DisplayProtocol.h: 351: actualScreen = tempLastScreen;
 13987  0012FC  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 13988                           
 13989                           ; BSR set to: 1
 13990                           ;DisplayProtocol.h: 352: }else if(actualScreen == 14) {
 13991  001300  0012               	return	
 13992  001302                     l11382:
 13993                           
 13994                           ; BSR set to: 1
 13995  001302  0E0E               	movlw	14
 13996  001304  0101               	movlb	1	; () banked
 13997  001306  19BD               	xorwf	_actualScreen& (0+255),w,b
 13998  001308  A4D8               	btfss	status,2,c
 13999  00130A  D00A               	goto	l11388
 14000                           
 14001                           ; BSR set to: 1
 14002                           ;DisplayProtocol.h: 354: setPWM2duty(400);
 14003  00130C  0E01               	movlw	1
 14004  00130E  0101               	movlb	1	; () banked
 14005  001310  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 14006  001312  0E90               	movlw	144
 14007  001314  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 14008  001316  EC84  F02F         	call	_setPWM2duty	;wreg free
 14009                           
 14010                           ;DisplayProtocol.h: 355: actualScreen = tempLastScreen;
 14011  00131A  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 14012                           
 14013                           ;DisplayProtocol.h: 356: }else if(actualScreen == 3) {
 14014  00131E  0012               	return	
 14015  001320                     l11388:
 14016  001320  0E03               	movlw	3
 14017  001322  0101               	movlb	1	; () banked
 14018  001324  19BD               	xorwf	_actualScreen& (0+255),w,b
 14019  001326  A4D8               	btfss	status,2,c
 14020  001328  D046               	goto	l11410
 14021                           
 14022                           ; BSR set to: 1
 14023                           ;DisplayProtocol.h: 357: actualScreen = tempLastScreen;
 14024  00132A  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 14025                           
 14026                           ; BSR set to: 1
 14027                           ;DisplayProtocol.h: 358: if(!selSN) {
 14028  00132E  0101               	movlb	1	; () banked
 14029  001330  51BA               	movf	_selSN& (0+255),w,b
 14030  001332  A4D8               	btfss	status,2,c
 14031  001334  0012               	return	
 14032                           
 14033                           ; BSR set to: 1
 14034                           ;DisplayProtocol.h: 359: processStarted = 0;
 14035  001336  0E00               	movlw	0
 14036  001338  0100               	movlb	0	; () banked
 14037  00133A  6FC0               	movwf	_processStarted& (0+255),b
 14038                           
 14039                           ;DisplayProtocol.h: 360: processState = 0;
 14040  00133C  0E00               	movlw	0
 14041  00133E  0100               	movlb	0	; () banked
 14042  001340  6FB3               	movwf	(_processState+1)& (0+255),b
 14043  001342  0E00               	movlw	0
 14044  001344  6FB2               	movwf	_processState& (0+255),b
 14045                           
 14046                           ; BSR set to: 0
 14047                           ;DisplayProtocol.h: 361: LATCbits.LATC4 = 0;
 14048  001346  988B               	bcf	3979,4,c	;volatile
 14049                           
 14050                           ; BSR set to: 0
 14051                           ;DisplayProtocol.h: 362: if(tempLastScreen == 14)
 14052  001348  0E0E               	movlw	14
 14053  00134A  0100               	movlb	0	; () banked
 14054  00134C  19BC               	xorwf	_tempLastScreen& (0+255),w,b
 14055  00134E  A4D8               	btfss	status,2,c
 14056  001350  D003               	goto	l737
 14057                           
 14058                           ; BSR set to: 0
 14059                           ;DisplayProtocol.h: 363: actualScreen = 0;
 14060  001352  0E00               	movlw	0
 14061  001354  0101               	movlb	1	; () banked
 14062  001356  6FBD               	movwf	_actualScreen& (0+255),b
 14063  001358                     l737:
 14064                           
 14065                           ;DisplayProtocol.h: 364: if(calibMode) {
 14066  001358  0100               	movlb	0	; () banked
 14067  00135A  51BE               	movf	_calibMode& (0+255),w,b
 14068  00135C  B4D8               	btfsc	status,2,c
 14069  00135E  D027               	goto	l738
 14070                           
 14071                           ; BSR set to: 0
 14072                           ;DisplayProtocol.h: 365: numCortes = tempNumCortes;
 14073  001360  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 14074  001364  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 14075                           
 14076                           ;DisplayProtocol.h: 366: tiXcorte = temptiXcorte;
 14077  001368  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 14078  00136C  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 14079  001370  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 14080                           
 14081                           ; BSR set to: 0
 14082                           ;DisplayProtocol.h: 367: timsXcorte = (float)tiXcorte * 1000;
 14083  001374  C195  F114         	movff	_tiXcorte,___ftmul@f1
 14084  001378  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 14085  00137C  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 14086  001380  0E00               	movlw	0
 14087  001382  0101               	movlb	1	; () banked
 14088  001384  6F17               	movwf	___ftmul@f2& (0+255),b
 14089  001386  0E7A               	movlw	122
 14090  001388  0101               	movlb	1	; () banked
 14091  00138A  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 14092  00138C  0E44               	movlw	68
 14093  00138E  0101               	movlb	1	; () banked
 14094  001390  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 14095  001392  EC1F  F01D         	call	___ftmul	;wreg free
 14096  001396  C114  F053         	movff	?___ftmul,_timsXcorte
 14097  00139A  C115  F054         	movff	?___ftmul+1,_timsXcorte+1
 14098  00139E  C116  F055         	movff	?___ftmul+2,_timsXcorte+2
 14099                           
 14100                           ;DisplayProtocol.h: 368: calibMode = 0;
 14101  0013A2  0E00               	movlw	0
 14102  0013A4  0100               	movlb	0	; () banked
 14103  0013A6  6FBE               	movwf	_calibMode& (0+255),b
 14104                           
 14105                           ; BSR set to: 0
 14106                           ;DisplayProtocol.h: 369: actualScreen = 4;
 14107  0013A8  0E04               	movlw	4
 14108  0013AA  0101               	movlb	1	; () banked
 14109  0013AC  6FBD               	movwf	_actualScreen& (0+255),b
 14110  0013AE                     l738:
 14111                           
 14112                           ;DisplayProtocol.h: 370: }
 14113                           ;DisplayProtocol.h: 371: initProtocoll(1);
 14114  0013AE  0E01               	movlw	1
 14115  0013B0  ECA6  F036         	call	_initProtocoll
 14116                           
 14117                           ;DisplayProtocol.h: 372: }
 14118                           ;DisplayProtocol.h: 373: }else if(actualScreen == 10) {
 14119  0013B4  0012               	return	
 14120  0013B6                     l11410:
 14121  0013B6  0E0A               	movlw	10
 14122  0013B8  0101               	movlb	1	; () banked
 14123  0013BA  19BD               	xorwf	_actualScreen& (0+255),w,b
 14124  0013BC  A4D8               	btfss	status,2,c
 14125  0013BE  D00B               	goto	l11416
 14126                           
 14127                           ; BSR set to: 1
 14128                           ;DisplayProtocol.h: 374: if(!selSN)
 14129  0013C0  0101               	movlb	1	; () banked
 14130  0013C2  51BA               	movf	_selSN& (0+255),w,b
 14131  0013C4  A4D8               	btfss	status,2,c
 14132  0013C6  D004               	goto	l741
 14133                           
 14134                           ; BSR set to: 1
 14135                           ;DisplayProtocol.h: 375: confirmEdition(1);
 14136  0013C8  0E01               	movlw	1
 14137  0013CA  ECE5  F02C         	call	_confirmEdition
 14138  0013CE  0012               	return	
 14139  0013D0                     l741:
 14140                           
 14141                           ; BSR set to: 1
 14142                           ;DisplayProtocol.h: 376: else
 14143                           ;DisplayProtocol.h: 377: actualScreen = tempLastScreen;
 14144  0013D0  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 14145                           
 14146                           ; BSR set to: 1
 14147                           ;DisplayProtocol.h: 378: }else if(actualScreen == 8)
 14148  0013D4  0012               	return	
 14149  0013D6                     l11416:
 14150                           
 14151                           ; BSR set to: 1
 14152  0013D6  0E08               	movlw	8
 14153  0013D8  0101               	movlb	1	; () banked
 14154  0013DA  19BD               	xorwf	_actualScreen& (0+255),w,b
 14155  0013DC  A4D8               	btfss	status,2,c
 14156  0013DE  D004               	goto	l11420
 14157                           
 14158                           ; BSR set to: 1
 14159                           ;DisplayProtocol.h: 379: actualScreen = 4;
 14160  0013E0  0E04               	movlw	4
 14161  0013E2  0101               	movlb	1	; () banked
 14162  0013E4  6FBD               	movwf	_actualScreen& (0+255),b
 14163  0013E6  0012               	return	
 14164  0013E8                     l11420:
 14165                           
 14166                           ; BSR set to: 1
 14167                           ;DisplayProtocol.h: 380: else if(actualScreen == 9)
 14168  0013E8  0E09               	movlw	9
 14169  0013EA  0101               	movlb	1	; () banked
 14170  0013EC  19BD               	xorwf	_actualScreen& (0+255),w,b
 14171  0013EE  A4D8               	btfss	status,2,c
 14172  0013F0  D004               	goto	l11424
 14173                           
 14174                           ; BSR set to: 1
 14175                           ;DisplayProtocol.h: 381: actualScreen = 0;
 14176  0013F2  0E00               	movlw	0
 14177  0013F4  0101               	movlb	1	; () banked
 14178  0013F6  6FBD               	movwf	_actualScreen& (0+255),b
 14179  0013F8  0012               	return	
 14180  0013FA                     l11424:
 14181                           
 14182                           ; BSR set to: 1
 14183                           ;DisplayProtocol.h: 382: else if(actualScreen == 11) {
 14184  0013FA  0E0B               	movlw	11
 14185  0013FC  0101               	movlb	1	; () banked
 14186  0013FE  19BD               	xorwf	_actualScreen& (0+255),w,b
 14187  001400  A4D8               	btfss	status,2,c
 14188  001402  D05D               	goto	l11464
 14189                           
 14190                           ; BSR set to: 1
 14191                           ;DisplayProtocol.h: 383: initProtocoll(!selSN);
 14192  001404  0101               	movlb	1	; () banked
 14193  001406  51BA               	movf	_selSN& (0+255),w,b
 14194  001408  A4D8               	btfss	status,2,c
 14195  00140A  D002               	goto	u17180
 14196  00140C  0E01               	movlw	1
 14197  00140E  D001               	goto	u17190
 14198  001410                     u17180:
 14199  001410  0E00               	movlw	0
 14200  001412                     u17190:
 14201  001412  ECA6  F036         	call	_initProtocoll
 14202                           
 14203                           ;DisplayProtocol.h: 384: if(!selSN) {
 14204  001416  0101               	movlb	1	; () banked
 14205  001418  51BA               	movf	_selSN& (0+255),w,b
 14206  00141A  A4D8               	btfss	status,2,c
 14207  00141C  D04C               	goto	l11462
 14208                           
 14209                           ; BSR set to: 1
 14210                           ;DisplayProtocol.h: 385: actualScreen = 6;
 14211  00141E  0E06               	movlw	6
 14212  001420  0101               	movlb	1	; () banked
 14213  001422  6FBD               	movwf	_actualScreen& (0+255),b
 14214                           
 14215                           ; BSR set to: 1
 14216                           ;DisplayProtocol.h: 386: tempLastScreen = actualScreen;
 14217  001424  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 14218                           
 14219                           ;DisplayProtocol.h: 387: chanValf = 0;
 14220  001428  0E00               	movlw	0
 14221  00142A  0101               	movlb	1	; () banked
 14222  00142C  6FB1               	movwf	_chanValf& (0+255),b
 14223  00142E  0E00               	movlw	0
 14224  001430  0101               	movlb	1	; () banked
 14225  001432  6FB2               	movwf	(_chanValf+1)& (0+255),b
 14226  001434  0E00               	movlw	0
 14227  001436  0101               	movlb	1	; () banked
 14228  001438  6FB3               	movwf	(_chanValf+2)& (0+255),b
 14229                           
 14230                           ; BSR set to: 1
 14231                           ;DisplayProtocol.h: 388: desintegrator();
 14232  00143A  ECE6  F019         	call	_desintegrator	;wreg free
 14233                           
 14234                           ;DisplayProtocol.h: 389: temptiXcorte = tiXcorte;
 14235  00143E  C195  F0CD         	movff	_tiXcorte,_temptiXcorte
 14236  001442  C196  F0CE         	movff	_tiXcorte+1,_temptiXcorte+1
 14237  001446  C197  F0CF         	movff	_tiXcorte+2,_temptiXcorte+2
 14238                           
 14239                           ;DisplayProtocol.h: 390: tiXcorte = 5.0f;
 14240  00144A  0E00               	movlw	0
 14241  00144C  0101               	movlb	1	; () banked
 14242  00144E  6F95               	movwf	_tiXcorte& (0+255),b
 14243  001450  0EA0               	movlw	160
 14244  001452  0101               	movlb	1	; () banked
 14245  001454  6F96               	movwf	(_tiXcorte+1)& (0+255),b
 14246  001456  0E40               	movlw	64
 14247  001458  0101               	movlb	1	; () banked
 14248  00145A  6F97               	movwf	(_tiXcorte+2)& (0+255),b
 14249                           
 14250                           ; BSR set to: 1
 14251                           ;DisplayProtocol.h: 391: timsXcorte = 5000.0f;
 14252  00145C  0E40               	movlw	64
 14253  00145E  6E53               	movwf	_timsXcorte,c
 14254  001460  0E9C               	movlw	156
 14255  001462  6E54               	movwf	_timsXcorte+1,c
 14256  001464  0E45               	movlw	69
 14257  001466  6E55               	movwf	_timsXcorte+2,c
 14258                           
 14259                           ; BSR set to: 1
 14260                           ;DisplayProtocol.h: 392: tempNumCortes = numCortes;
 14261  001468  C0D2  F0D0         	movff	_numCortes,_tempNumCortes
 14262  00146C  C0D3  F0D1         	movff	_numCortes+1,_tempNumCortes+1
 14263                           
 14264                           ; BSR set to: 1
 14265                           ;DisplayProtocol.h: 393: numCortes = 1;
 14266  001470  0E00               	movlw	0
 14267  001472  0100               	movlb	0	; () banked
 14268  001474  6FD3               	movwf	(_numCortes+1)& (0+255),b
 14269  001476  0E01               	movlw	1
 14270  001478  6FD2               	movwf	_numCortes& (0+255),b
 14271                           
 14272                           ; BSR set to: 0
 14273                           ;DisplayProtocol.h: 394: processState = 0;
 14274  00147A  0E00               	movlw	0
 14275  00147C  0100               	movlb	0	; () banked
 14276  00147E  6FB3               	movwf	(_processState+1)& (0+255),b
 14277  001480  0E00               	movlw	0
 14278  001482  6FB2               	movwf	_processState& (0+255),b
 14279                           
 14280                           ; BSR set to: 0
 14281                           ;DisplayProtocol.h: 395: processTimer = 0;
 14282  001484  0E00               	movlw	0
 14283  001486  6E3B               	movwf	_processTimer,c
 14284  001488  0E00               	movlw	0
 14285  00148A  6E3C               	movwf	_processTimer+1,c
 14286  00148C  0E00               	movlw	0
 14287  00148E  6E3D               	movwf	_processTimer+2,c
 14288  001490  0E00               	movlw	0
 14289  001492  6E3E               	movwf	_processTimer+3,c
 14290                           
 14291                           ; BSR set to: 0
 14292                           ;DisplayProtocol.h: 396: calibLevel = 0;
 14293  001494  0E00               	movlw	0
 14294  001496  0101               	movlb	1	; () banked
 14295  001498  6FB8               	movwf	_calibLevel& (0+255),b
 14296                           
 14297                           ; BSR set to: 1
 14298                           ;DisplayProtocol.h: 397: initProtocoll(1);
 14299  00149A  0E01               	movlw	1
 14300  00149C  ECA6  F036         	call	_initProtocoll
 14301                           
 14302                           ;DisplayProtocol.h: 398: LATCbits.LATC4 = 1;
 14303  0014A0  888B               	bsf	3979,4,c	;volatile
 14304                           
 14305                           ;DisplayProtocol.h: 399: ready2Cut = 1;
 14306  0014A2  0E01               	movlw	1
 14307  0014A4  0100               	movlb	0	; () banked
 14308  0014A6  6FBF               	movwf	_ready2Cut& (0+255),b
 14309                           
 14310                           ; BSR set to: 0
 14311                           ;DisplayProtocol.h: 400: actualScreen = 14;
 14312  0014A8  0E0E               	movlw	14
 14313  0014AA  0101               	movlb	1	; () banked
 14314  0014AC  6FBD               	movwf	_actualScreen& (0+255),b
 14315                           
 14316                           ; BSR set to: 1
 14317                           ;DisplayProtocol.h: 401: calibMode = 1;
 14318  0014AE  0E01               	movlw	1
 14319  0014B0  0100               	movlb	0	; () banked
 14320  0014B2  6FBE               	movwf	_calibMode& (0+255),b
 14321                           
 14322                           ;DisplayProtocol.h: 402: }else
 14323  0014B4  0012               	return	
 14324  0014B6                     l11462:
 14325                           
 14326                           ;DisplayProtocol.h: 403: actualScreen = 4;
 14327  0014B6  0E04               	movlw	4
 14328  0014B8  0101               	movlb	1	; () banked
 14329  0014BA  6FBD               	movwf	_actualScreen& (0+255),b
 14330                           
 14331                           ; BSR set to: 1
 14332                           ;DisplayProtocol.h: 404: }else if(actualScreen == 12) {
 14333  0014BC  0012               	return	
 14334  0014BE                     l11464:
 14335                           
 14336                           ; BSR set to: 1
 14337  0014BE  0E0C               	movlw	12
 14338  0014C0  0101               	movlb	1	; () banked
 14339  0014C2  19BD               	xorwf	_actualScreen& (0+255),w,b
 14340  0014C4  A4D8               	btfss	status,2,c
 14341  0014C6  D009               	goto	l11472
 14342                           
 14343                           ; BSR set to: 1
 14344                           ;DisplayProtocol.h: 405: chanValSection--;
 14345  0014C8  0101               	movlb	1	; () banked
 14346  0014CA  079C               	decf	_chanValSection& (0+255),f,b
 14347                           
 14348                           ; BSR set to: 1
 14349                           ;DisplayProtocol.h: 406: if(chanValSection < 0)
 14350  0014CC  0101               	movlb	1	; () banked
 14351  0014CE  AF9C               	btfss	_chanValSection& (0+255),7,b
 14352  0014D0  0012               	return	
 14353                           
 14354                           ; BSR set to: 1
 14355                           ;DisplayProtocol.h: 407: chanValSection = 5;
 14356  0014D2  0E05               	movlw	5
 14357  0014D4  0101               	movlb	1	; () banked
 14358  0014D6  6F9C               	movwf	_chanValSection& (0+255),b
 14359                           
 14360                           ; BSR set to: 1
 14361                           ;DisplayProtocol.h: 408: }else if(actualScreen == 15) {
 14362  0014D8  0012               	return	
 14363  0014DA                     l11472:
 14364                           
 14365                           ; BSR set to: 1
 14366  0014DA  0E0F               	movlw	15
 14367  0014DC  0101               	movlb	1	; () banked
 14368  0014DE  19BD               	xorwf	_actualScreen& (0+255),w,b
 14369  0014E0  A4D8               	btfss	status,2,c
 14370  0014E2  D03B               	goto	l11492
 14371                           
 14372                           ; BSR set to: 1
 14373                           ;DisplayProtocol.h: 409: if(!selSN) {
 14374  0014E4  0101               	movlb	1	; () banked
 14375  0014E6  51BA               	movf	_selSN& (0+255),w,b
 14376  0014E8  A4D8               	btfss	status,2,c
 14377  0014EA  D031               	goto	l756
 14378                           
 14379                           ; BSR set to: 1
 14380                           ;DisplayProtocol.h: 410: processStarted = 0;
 14381  0014EC  0E00               	movlw	0
 14382  0014EE  0100               	movlb	0	; () banked
 14383  0014F0  6FC0               	movwf	_processStarted& (0+255),b
 14384                           
 14385                           ;DisplayProtocol.h: 411: processState = 0;
 14386  0014F2  0E00               	movlw	0
 14387  0014F4  0100               	movlb	0	; () banked
 14388  0014F6  6FB3               	movwf	(_processState+1)& (0+255),b
 14389  0014F8  0E00               	movlw	0
 14390  0014FA  6FB2               	movwf	_processState& (0+255),b
 14391                           
 14392                           ; BSR set to: 0
 14393                           ;DisplayProtocol.h: 412: LATCbits.LATC4 = 0;
 14394  0014FC  988B               	bcf	3979,4,c	;volatile
 14395                           
 14396                           ; BSR set to: 0
 14397                           ;DisplayProtocol.h: 413: numCortes = tempNumCortes;
 14398  0014FE  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 14399  001502  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 14400                           
 14401                           ; BSR set to: 0
 14402                           ;DisplayProtocol.h: 414: tiXcorte = temptiXcorte;
 14403  001506  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 14404  00150A  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 14405  00150E  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 14406                           
 14407                           ; BSR set to: 0
 14408                           ;DisplayProtocol.h: 415: timsXcorte = (float)tiXcorte * 1000;
 14409  001512  C195  F114         	movff	_tiXcorte,___ftmul@f1
 14410  001516  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 14411  00151A  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 14412  00151E  0E00               	movlw	0
 14413  001520  0101               	movlb	1	; () banked
 14414  001522  6F17               	movwf	___ftmul@f2& (0+255),b
 14415  001524  0E7A               	movlw	122
 14416  001526  0101               	movlb	1	; () banked
 14417  001528  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 14418  00152A  0E44               	movlw	68
 14419  00152C  0101               	movlb	1	; () banked
 14420  00152E  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 14421  001530  EC1F  F01D         	call	___ftmul	;wreg free
 14422  001534  C114  F053         	movff	?___ftmul,_timsXcorte
 14423  001538  C115  F054         	movff	?___ftmul+1,_timsXcorte+1
 14424  00153C  C116  F055         	movff	?___ftmul+2,_timsXcorte+2
 14425                           
 14426                           ;DisplayProtocol.h: 416: calibMode = 0;
 14427  001540  0E00               	movlw	0
 14428  001542  0100               	movlb	0	; () banked
 14429  001544  6FBE               	movwf	_calibMode& (0+255),b
 14430                           
 14431                           ; BSR set to: 0
 14432                           ;DisplayProtocol.h: 417: actualScreen = 4;
 14433  001546  0E04               	movlw	4
 14434  001548  0101               	movlb	1	; () banked
 14435  00154A  6FBD               	movwf	_actualScreen& (0+255),b
 14436                           
 14437                           ;DisplayProtocol.h: 418: }else {
 14438  00154C  0012               	return	
 14439  00154E                     l756:
 14440                           
 14441                           ; BSR set to: 1
 14442                           ;DisplayProtocol.h: 419: actualScreen = tempLastScreen;
 14443  00154E  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 14444                           
 14445                           ; BSR set to: 1
 14446                           ;DisplayProtocol.h: 420: tempLastScreen = 6;
 14447  001552  0E06               	movlw	6
 14448  001554  0100               	movlb	0	; () banked
 14449  001556  6FBC               	movwf	_tempLastScreen& (0+255),b
 14450                           
 14451                           ; BSR set to: 0
 14452                           ;DisplayProtocol.h: 421: }
 14453                           ;DisplayProtocol.h: 422: }else if(actualScreen == 13) {
 14454  001558  0012               	return	
 14455  00155A                     l11492:
 14456  00155A  0E0D               	movlw	13
 14457  00155C  0101               	movlb	1	; () banked
 14458  00155E  19BD               	xorwf	_actualScreen& (0+255),w,b
 14459  001560  A4D8               	btfss	status,2,c
 14460  001562  0012               	return	
 14461                           
 14462                           ; BSR set to: 1
 14463                           ;DisplayProtocol.h: 423: initProtocoll(1);
 14464  001564  0E01               	movlw	1
 14465  001566  ECA6  F036         	call	_initProtocoll
 14466                           
 14467                           ;DisplayProtocol.h: 424: actualScreen = tempLastScreen;
 14468  00156A  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 14469  00156E  0012               	return	
 14470  001570                     __end_of_pressENTER:
 14471                           	opt stack 0
 14472                           tblptru	equ	0xFF8
 14473                           tblptrh	equ	0xFF7
 14474                           tblptrl	equ	0xFF6
 14475                           tablat	equ	0xFF5
 14476                           prodh	equ	0xFF4
 14477                           prodl	equ	0xFF3
 14478                           intcon	equ	0xFF2
 14479                           postinc0	equ	0xFEE
 14480                           wreg	equ	0xFE8
 14481                           postdec1	equ	0xFE5
 14482                           fsr1l	equ	0xFE1
 14483                           indf2	equ	0xFDF
 14484                           postinc2	equ	0xFDE
 14485                           postdec2	equ	0xFDD
 14486                           fsr2h	equ	0xFDA
 14487                           fsr2l	equ	0xFD9
 14488                           status	equ	0xFD8
 14489                           
 14490 ;; *************** function _checkPass *****************
 14491 ;; Defined at:
 14492 ;;		line 14 in file "source/DisplayProtocol.h"
 14493 ;; Parameters:    Size  Location     Type
 14494 ;;		None
 14495 ;; Auto vars:     Size  Location     Type
 14496 ;;  i               2    5[BANK1 ] int 
 14497 ;;  passOK          1    4[BANK1 ] unsigned char 
 14498 ;; Return value:  Size  Location     Type
 14499 ;;                  1    wreg      unsigned char 
 14500 ;; Registers used:
 14501 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14502 ;; Tracked objects:
 14503 ;;		On entry : 0/0
 14504 ;;		On exit  : 0/0
 14505 ;;		Unchanged: 0/0
 14506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14507 ;;      Params:         0       0       0       0       0       0       0
 14508 ;;      Locals:         0       0       3       0       0       0       0
 14509 ;;      Temps:          0       0       4       0       0       0       0
 14510 ;;      Totals:         0       0       7       0       0       0       0
 14511 ;;Total ram usage:        7 bytes
 14512 ;; Hardware stack levels used:    1
 14513 ;; Hardware stack levels required when called:   12
 14514 ;; This function calls:
 14515 ;;		Nothing
 14516 ;; This function is called by:
 14517 ;;		_pressENTER
 14518 ;; This function uses a non-reentrant model
 14519 ;;
 14520                           
 14521                           	psect	text56
 14522  006304                     __ptext56:
 14523                           	opt stack 0
 14524  006304                     _checkPass:
 14525                           	opt stack 16
 14526                           
 14527                           ;DisplayProtocol.h: 15: int i;
 14528                           ;DisplayProtocol.h: 16: char passOK = 0;
 14529                           
 14530                           ;incstack = 0
 14531  006304  0E00               	movlw	0
 14532  006306  0101               	movlb	1	; () banked
 14533  006308  6F04               	movwf	checkPass@passOK& (0+255),b
 14534                           
 14535                           ;DisplayProtocol.h: 17: for (i = 0; i < 4; i++) {
 14536  00630A  0E00               	movlw	0
 14537  00630C  0101               	movlb	1	; () banked
 14538  00630E  6F06               	movwf	(checkPass@i+1)& (0+255),b
 14539  006310  0E00               	movlw	0
 14540  006312  6F05               	movwf	checkPass@i& (0+255),b
 14541  006314                     l10772:
 14542                           
 14543                           ; BSR set to: 1
 14544  006314  0101               	movlb	1	; () banked
 14545  006316  BF06               	btfsc	(checkPass@i+1)& (0+255),7,b
 14546  006318  D008               	goto	l10776
 14547  00631A  0101               	movlb	1	; () banked
 14548  00631C  5106               	movf	(checkPass@i+1)& (0+255),w,b
 14549  00631E  E136               	bnz	l10786
 14550  006320  0E04               	movlw	4
 14551  006322  0101               	movlb	1	; () banked
 14552  006324  5D05               	subwf	checkPass@i& (0+255),w,b
 14553  006326  B0D8               	btfsc	status,0,c
 14554  006328  D031               	goto	l10786
 14555  00632A                     l10776:
 14556                           
 14557                           ; BSR set to: 1
 14558                           ;DisplayProtocol.h: 18: if (introducido[i] == contra[i])
 14559  00632A  0EAB               	movlw	low _contra
 14560  00632C  0101               	movlb	1	; () banked
 14561  00632E  2505               	addwf	checkPass@i& (0+255),w,b
 14562  006330  6ED9               	movwf	fsr2l,c
 14563  006332  0E00               	movlw	high _contra
 14564  006334  0101               	movlb	1	; () banked
 14565  006336  2106               	addwfc	(checkPass@i+1)& (0+255),w,b
 14566  006338  6EDA               	movwf	fsr2h,c
 14567  00633A  50DF               	movf	indf2,w,c
 14568  00633C  0101               	movlb	1	; () banked
 14569  00633E  6F00               	movwf	??_checkPass& (0+255),b
 14570  006340  6B01               	clrf	(??_checkPass+1)& (0+255),b
 14571  006342  0EAD               	movlw	low _introducido
 14572  006344  0101               	movlb	1	; () banked
 14573  006346  2505               	addwf	checkPass@i& (0+255),w,b
 14574  006348  6ED9               	movwf	fsr2l,c
 14575  00634A  0E01               	movlw	high _introducido
 14576  00634C  0101               	movlb	1	; () banked
 14577  00634E  2106               	addwfc	(checkPass@i+1)& (0+255),w,b
 14578  006350  6EDA               	movwf	fsr2h,c
 14579  006352  50DF               	movf	indf2,w,c
 14580  006354  0101               	movlb	1	; () banked
 14581  006356  6F02               	movwf	(??_checkPass+2)& (0+255),b
 14582  006358  6B03               	clrf	(??_checkPass+3)& (0+255),b
 14583  00635A  BF02               	btfsc	(??_checkPass+2)& (0+255),7,b
 14584  00635C  0703               	decf	(??_checkPass+3)& (0+255),f,b
 14585  00635E  0101               	movlb	1	; () banked
 14586  006360  5100               	movf	??_checkPass& (0+255),w,b
 14587  006362  0101               	movlb	1	; () banked
 14588  006364  1902               	xorwf	(??_checkPass+2)& (0+255),w,b
 14589  006366  E10A               	bnz	l10780
 14590  006368  0101               	movlb	1	; () banked
 14591  00636A  5101               	movf	(??_checkPass+1)& (0+255),w,b
 14592  00636C  0101               	movlb	1	; () banked
 14593  00636E  1903               	xorwf	(??_checkPass+3)& (0+255),w,b
 14594  006370  A4D8               	btfss	status,2,c
 14595  006372  D004               	goto	l10780
 14596                           
 14597                           ; BSR set to: 1
 14598                           ;DisplayProtocol.h: 19: passOK = 1;
 14599  006374  0E01               	movlw	1
 14600  006376  0101               	movlb	1	; () banked
 14601  006378  6F04               	movwf	checkPass@passOK& (0+255),b
 14602  00637A  D004               	goto	l10782
 14603  00637C                     l10780:
 14604                           
 14605                           ; BSR set to: 1
 14606                           ;DisplayProtocol.h: 20: else {
 14607                           ;DisplayProtocol.h: 21: passOK = 0;
 14608  00637C  0E00               	movlw	0
 14609  00637E  0101               	movlb	1	; () banked
 14610  006380  6F04               	movwf	checkPass@passOK& (0+255),b
 14611                           
 14612                           ;DisplayProtocol.h: 22: break;
 14613  006382  D004               	goto	l10786
 14614  006384                     l10782:
 14615                           
 14616                           ; BSR set to: 1
 14617  006384  0101               	movlb	1	; () banked
 14618  006386  4B05               	infsnz	checkPass@i& (0+255),f,b
 14619  006388  2B06               	incf	(checkPass@i+1)& (0+255),f,b
 14620  00638A  D7C4               	goto	l10772
 14621  00638C                     l10786:
 14622                           
 14623                           ; BSR set to: 1
 14624                           ;DisplayProtocol.h: 23: }
 14625                           ;DisplayProtocol.h: 24: }
 14626                           ;DisplayProtocol.h: 25: return passOK;
 14627  00638C  0101               	movlb	1	; () banked
 14628  00638E  5104               	movf	checkPass@passOK& (0+255),w,b
 14629  006390  0012               	return	
 14630  006392                     __end_of_checkPass:
 14631                           	opt stack 0
 14632                           tblptru	equ	0xFF8
 14633                           tblptrh	equ	0xFF7
 14634                           tblptrl	equ	0xFF6
 14635                           tablat	equ	0xFF5
 14636                           prodh	equ	0xFF4
 14637                           prodl	equ	0xFF3
 14638                           intcon	equ	0xFF2
 14639                           postinc0	equ	0xFEE
 14640                           wreg	equ	0xFE8
 14641                           postdec1	equ	0xFE5
 14642                           fsr1l	equ	0xFE1
 14643                           indf2	equ	0xFDF
 14644                           postinc2	equ	0xFDE
 14645                           postdec2	equ	0xFDD
 14646                           fsr2h	equ	0xFDA
 14647                           fsr2l	equ	0xFD9
 14648                           status	equ	0xFD8
 14649                           
 14650 ;; *************** function _pressDOWN *****************
 14651 ;; Defined at:
 14652 ;;		line 181 in file "source/DisplayProtocol.h"
 14653 ;; Parameters:    Size  Location     Type
 14654 ;;		None
 14655 ;; Auto vars:     Size  Location     Type
 14656 ;;		None
 14657 ;; Return value:  Size  Location     Type
 14658 ;;                  1    wreg      void 
 14659 ;; Registers used:
 14660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14661 ;; Tracked objects:
 14662 ;;		On entry : 0/0
 14663 ;;		On exit  : 0/0
 14664 ;;		Unchanged: 0/0
 14665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14666 ;;      Params:         0       0       0       0       0       0       0
 14667 ;;      Locals:         0       0       0       0       0       0       0
 14668 ;;      Temps:          0       0       1       0       0       0       0
 14669 ;;      Totals:         0       0       1       0       0       0       0
 14670 ;;Total ram usage:        1 bytes
 14671 ;; Hardware stack levels used:    1
 14672 ;; Hardware stack levels required when called:   13
 14673 ;; This function calls:
 14674 ;;		_chanValDigDOWN
 14675 ;; This function is called by:
 14676 ;;		_buttonChecking
 14677 ;; This function uses a non-reentrant model
 14678 ;;
 14679                           
 14680                           	psect	text57
 14681  004CEA                     __ptext57:
 14682                           	opt stack 0
 14683  004CEA                     _pressDOWN:
 14684                           	opt stack 16
 14685                           
 14686                           ;DisplayProtocol.h: 182: if (actualScreen == 0 || actualScreen == 4) {
 14687                           
 14688                           ; BSR set to: 1
 14689                           ;incstack = 0
 14690  004CEA  0101               	movlb	1	; () banked
 14691  004CEC  51BD               	movf	_actualScreen& (0+255),w,b
 14692  004CEE  B4D8               	btfsc	status,2,c
 14693  004CF0  D005               	goto	l11174
 14694                           
 14695                           ; BSR set to: 1
 14696  004CF2  0E04               	movlw	4
 14697  004CF4  0101               	movlb	1	; () banked
 14698  004CF6  19BD               	xorwf	_actualScreen& (0+255),w,b
 14699  004CF8  A4D8               	btfss	status,2,c
 14700  004CFA  D009               	goto	l11180
 14701  004CFC                     l11174:
 14702                           
 14703                           ; BSR set to: 1
 14704                           ;DisplayProtocol.h: 183: menuSection--;
 14705  004CFC  0101               	movlb	1	; () banked
 14706  004CFE  07BC               	decf	_menuSection& (0+255),f,b
 14707                           
 14708                           ; BSR set to: 1
 14709                           ;DisplayProtocol.h: 184: if (menuSection < 0)
 14710  004D00  0101               	movlb	1	; () banked
 14711  004D02  AFBC               	btfss	_menuSection& (0+255),7,b
 14712  004D04  0012               	return	
 14713                           
 14714                           ; BSR set to: 1
 14715                           ;DisplayProtocol.h: 185: menuSection = 3;
 14716  004D06  0E03               	movlw	3
 14717  004D08  0101               	movlb	1	; () banked
 14718  004D0A  6FBC               	movwf	_menuSection& (0+255),b
 14719                           
 14720                           ; BSR set to: 1
 14721                           ;DisplayProtocol.h: 186: } else if (actualScreen == 1) {
 14722  004D0C  0012               	return	
 14723  004D0E                     l11180:
 14724                           
 14725                           ; BSR set to: 1
 14726  004D0E  0101               	movlb	1	; () banked
 14727  004D10  05BD               	decf	_actualScreen& (0+255),w,b
 14728  004D12  A4D8               	btfss	status,2,c
 14729  004D14  D022               	goto	l11186
 14730                           
 14731                           ; BSR set to: 1
 14732                           ;DisplayProtocol.h: 187: introducido[passSection]--;
 14733  004D16  0101               	movlb	1	; () banked
 14734  004D18  51BB               	movf	_passSection& (0+255),w,b
 14735  004D1A  0D01               	mullw	1
 14736  004D1C  0EAD               	movlw	low _introducido
 14737  004D1E  24F3               	addwf	prodl,w,c
 14738  004D20  6ED9               	movwf	fsr2l,c
 14739  004D22  0E01               	movlw	high _introducido
 14740  004D24  20F4               	addwfc	prodh,w,c
 14741  004D26  6EDA               	movwf	fsr2h,c
 14742  004D28  06DF               	decf	indf2,f,c
 14743                           
 14744                           ;DisplayProtocol.h: 188: if (introducido[passSection] < 0)
 14745  004D2A  0101               	movlb	1	; () banked
 14746  004D2C  51BB               	movf	_passSection& (0+255),w,b
 14747  004D2E  0D01               	mullw	1
 14748  004D30  0EAD               	movlw	low _introducido
 14749  004D32  24F3               	addwf	prodl,w,c
 14750  004D34  6ED9               	movwf	fsr2l,c
 14751  004D36  0E01               	movlw	high _introducido
 14752  004D38  20F4               	addwfc	prodh,w,c
 14753  004D3A  6EDA               	movwf	fsr2h,c
 14754  004D3C  0E00               	movlw	0
 14755  004D3E  AEDB               	btfss	plusw2,7,c
 14756  004D40  0012               	return	
 14757                           
 14758                           ; BSR set to: 1
 14759                           ;DisplayProtocol.h: 189: introducido[passSection] = 9;
 14760  004D42  0101               	movlb	1	; () banked
 14761  004D44  51BB               	movf	_passSection& (0+255),w,b
 14762  004D46  0D01               	mullw	1
 14763  004D48  0EAD               	movlw	low _introducido
 14764  004D4A  24F3               	addwf	prodl,w,c
 14765  004D4C  6ED9               	movwf	fsr2l,c
 14766  004D4E  0E01               	movlw	high _introducido
 14767  004D50  20F4               	addwfc	prodh,w,c
 14768  004D52  6EDA               	movwf	fsr2h,c
 14769  004D54  0E09               	movlw	9
 14770  004D56  6EDF               	movwf	indf2,c
 14771                           
 14772                           ; BSR set to: 1
 14773                           ;DisplayProtocol.h: 190: } else if (actualScreen == 2 || actualScreen == 3
 14774  004D58  0012               	return	
 14775  004D5A                     l11186:
 14776                           
 14777                           ; BSR set to: 1
 14778                           ;DisplayProtocol.h: 191: || actualScreen == 10 || actualScreen == 11
 14779                           ;DisplayProtocol.h: 192: || actualScreen == 15) {
 14780  004D5A  0E02               	movlw	2
 14781  004D5C  0101               	movlb	1	; () banked
 14782  004D5E  19BD               	xorwf	_actualScreen& (0+255),w,b
 14783  004D60  B4D8               	btfsc	status,2,c
 14784  004D62  D014               	goto	l11196
 14785                           
 14786                           ; BSR set to: 1
 14787  004D64  0E03               	movlw	3
 14788  004D66  0101               	movlb	1	; () banked
 14789  004D68  19BD               	xorwf	_actualScreen& (0+255),w,b
 14790  004D6A  B4D8               	btfsc	status,2,c
 14791  004D6C  D00F               	goto	l11196
 14792                           
 14793                           ; BSR set to: 1
 14794  004D6E  0E0A               	movlw	10
 14795  004D70  0101               	movlb	1	; () banked
 14796  004D72  19BD               	xorwf	_actualScreen& (0+255),w,b
 14797  004D74  B4D8               	btfsc	status,2,c
 14798  004D76  D00A               	goto	l11196
 14799                           
 14800                           ; BSR set to: 1
 14801  004D78  0E0B               	movlw	11
 14802  004D7A  0101               	movlb	1	; () banked
 14803  004D7C  19BD               	xorwf	_actualScreen& (0+255),w,b
 14804  004D7E  B4D8               	btfsc	status,2,c
 14805  004D80  D005               	goto	l11196
 14806                           
 14807                           ; BSR set to: 1
 14808  004D82  0E0F               	movlw	15
 14809  004D84  0101               	movlb	1	; () banked
 14810  004D86  19BD               	xorwf	_actualScreen& (0+255),w,b
 14811  004D88  A4D8               	btfss	status,2,c
 14812  004D8A  D011               	goto	l11202
 14813  004D8C                     l11196:
 14814                           
 14815                           ; BSR set to: 1
 14816                           ;DisplayProtocol.h: 193: selSN = !selSN;
 14817  004D8C  0101               	movlb	1	; () banked
 14818  004D8E  51BA               	movf	_selSN& (0+255),w,b
 14819  004D90  A4D8               	btfss	status,2,c
 14820  004D92  D002               	goto	u16590
 14821  004D94  0E01               	movlw	1
 14822  004D96  D001               	goto	u16600
 14823  004D98                     u16590:
 14824  004D98  0E00               	movlw	0
 14825  004D9A                     u16600:
 14826  004D9A  0101               	movlb	1	; () banked
 14827  004D9C  6FBA               	movwf	_selSN& (0+255),b
 14828                           
 14829                           ; BSR set to: 1
 14830                           ;DisplayProtocol.h: 194: if(selSN > 1)
 14831  004D9E  0E01               	movlw	1
 14832  004DA0  0101               	movlb	1	; () banked
 14833  004DA2  65BA               	cpfsgt	_selSN& (0+255),b
 14834  004DA4  0012               	return	
 14835                           
 14836                           ; BSR set to: 1
 14837                           ;DisplayProtocol.h: 195: selSN = 0;
 14838  004DA6  0E00               	movlw	0
 14839  004DA8  0101               	movlb	1	; () banked
 14840  004DAA  6FBA               	movwf	_selSN& (0+255),b
 14841                           
 14842                           ; BSR set to: 1
 14843                           ;DisplayProtocol.h: 196: }else if(actualScreen == 5) {
 14844  004DAC  0012               	return	
 14845  004DAE                     l11202:
 14846                           
 14847                           ; BSR set to: 1
 14848  004DAE  0E05               	movlw	5
 14849  004DB0  0101               	movlb	1	; () banked
 14850  004DB2  19BD               	xorwf	_actualScreen& (0+255),w,b
 14851  004DB4  B4D8               	btfsc	status,2,c
 14852  004DB6  D009               	goto	l11212
 14853  004DB8  D014               	goto	l11214
 14854  004DBA                     l11206:
 14855                           
 14856                           ; BSR set to: 1
 14857                           ;DisplayProtocol.h: 201: chanValDigDOWN();
 14858  004DBA  EC36  F02A         	call	_chanValDigDOWN	;wreg free
 14859                           
 14860                           ;DisplayProtocol.h: 202: break;
 14861  004DBE  0012               	return	
 14862  004DC0                     l11208:
 14863                           
 14864                           ;DisplayProtocol.h: 204: chanVals--;
 14865  004DC0  0101               	movlb	1	; () banked
 14866  004DC2  07B6               	decf	_chanVals& (0+255),f,b
 14867  004DC4  A0D8               	btfss	status,0,c
 14868  004DC6  07B7               	decf	(_chanVals+1)& (0+255),f,b
 14869                           
 14870                           ; BSR set to: 1
 14871                           ;DisplayProtocol.h: 206: }
 14872                           ;DisplayProtocol.h: 207: }
 14873                           
 14874                           ;DisplayProtocol.h: 205: break;
 14875  004DC8  0012               	return	
 14876  004DCA                     l11212:
 14877                           
 14878                           ; BSR set to: 1
 14879  004DCA  0101               	movlb	1	; () banked
 14880  004DCC  51BC               	movf	_menuSection& (0+255),w,b
 14881                           
 14882                           ; Switch size 1, requested type "space"
 14883                           ; Number of cases is 3, Range of values is 0 to 2
 14884                           ; switch strategies available:
 14885                           ; Name         Instructions Cycles
 14886                           ; simple_byte           10     6 (average)
 14887                           ;	Chosen strategy is simple_byte
 14888  004DCE  0A00               	xorlw	0	; case 0
 14889  004DD0  B4D8               	btfsc	status,2,c
 14890  004DD2  0012               	return	
 14891  004DD4  0A01               	xorlw	1	; case 1
 14892  004DD6  B4D8               	btfsc	status,2,c
 14893  004DD8  D7F0               	goto	l11206
 14894  004DDA  0A03               	xorlw	3	; case 2
 14895  004DDC  A4D8               	btfss	status,2,c
 14896                           
 14897                           ; BSR set to: 1
 14898                           ;DisplayProtocol.h: 208: }else if(actualScreen == 12)
 14899  004DDE  0012               	return	
 14900  004DE0  D7EF               	goto	l11208
 14901  004DE2                     l11214:
 14902                           
 14903                           ; BSR set to: 1
 14904  004DE2  0E0C               	movlw	12
 14905  004DE4  0101               	movlb	1	; () banked
 14906  004DE6  19BD               	xorwf	_actualScreen& (0+255),w,b
 14907  004DE8  A4D8               	btfss	status,2,c
 14908  004DEA  0012               	return	
 14909                           
 14910                           ; BSR set to: 1
 14911                           ;DisplayProtocol.h: 209: chanValDigDOWN();
 14912  004DEC  EC36  F02A         	call	_chanValDigDOWN	;wreg free
 14913  004DF0  0012               	return	
 14914  004DF2                     __end_of_pressDOWN:
 14915                           	opt stack 0
 14916                           tblptru	equ	0xFF8
 14917                           tblptrh	equ	0xFF7
 14918                           tblptrl	equ	0xFF6
 14919                           tablat	equ	0xFF5
 14920                           prodh	equ	0xFF4
 14921                           prodl	equ	0xFF3
 14922                           intcon	equ	0xFF2
 14923                           postinc0	equ	0xFEE
 14924                           wreg	equ	0xFE8
 14925                           postdec1	equ	0xFE5
 14926                           fsr1l	equ	0xFE1
 14927                           indf2	equ	0xFDF
 14928                           postinc2	equ	0xFDE
 14929                           postdec2	equ	0xFDD
 14930                           plusw2	equ	0xFDB
 14931                           fsr2h	equ	0xFDA
 14932                           fsr2l	equ	0xFD9
 14933                           status	equ	0xFD8
 14934                           
 14935 ;; *************** function _chanValDigDOWN *****************
 14936 ;; Defined at:
 14937 ;;		line 37 in file "source/DisplayProtocol.h"
 14938 ;; Parameters:    Size  Location     Type
 14939 ;;		None
 14940 ;; Auto vars:     Size  Location     Type
 14941 ;;		None
 14942 ;; Return value:  Size  Location     Type
 14943 ;;                  1    wreg      void 
 14944 ;; Registers used:
 14945 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14946 ;; Tracked objects:
 14947 ;;		On entry : 0/0
 14948 ;;		On exit  : 0/0
 14949 ;;		Unchanged: 0/0
 14950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14951 ;;      Params:         0       0       0       0       0       0       0
 14952 ;;      Locals:         0       0       0       0       0       0       0
 14953 ;;      Temps:          0       0       5       0       0       0       0
 14954 ;;      Totals:         0       0       5       0       0       0       0
 14955 ;;Total ram usage:        5 bytes
 14956 ;; Hardware stack levels used:    1
 14957 ;; Hardware stack levels required when called:   12
 14958 ;; This function calls:
 14959 ;;		Nothing
 14960 ;; This function is called by:
 14961 ;;		_pressDOWN
 14962 ;; This function uses a non-reentrant model
 14963 ;;
 14964                           
 14965                           	psect	text58
 14966  00546C                     __ptext58:
 14967                           	opt stack 0
 14968  00546C                     _chanValDigDOWN:
 14969                           	opt stack 16
 14970                           
 14971                           ;DisplayProtocol.h: 38: chanValdig[chanValSection]--;
 14972                           
 14973                           ;incstack = 0
 14974  00546C  0101               	movlb	1	; () banked
 14975  00546E  519C               	movf	_chanValSection& (0+255),w,b
 14976  005470  0D01               	mullw	1
 14977  005472  0EA3               	movlw	low _chanValdig
 14978  005474  24F3               	addwf	prodl,w,c
 14979  005476  6ED9               	movwf	fsr2l,c
 14980  005478  0E01               	movlw	high _chanValdig
 14981  00547A  20F4               	addwfc	prodh,w,c
 14982  00547C  6EDA               	movwf	fsr2h,c
 14983  00547E  06DF               	decf	indf2,f,c
 14984                           
 14985                           ;DisplayProtocol.h: 39: if(chanValdig[chanValSection] < 0) {
 14986  005480  0101               	movlb	1	; () banked
 14987  005482  519C               	movf	_chanValSection& (0+255),w,b
 14988  005484  0D01               	mullw	1
 14989  005486  0EA3               	movlw	low _chanValdig
 14990  005488  24F3               	addwf	prodl,w,c
 14991  00548A  6ED9               	movwf	fsr2l,c
 14992  00548C  0E01               	movlw	high _chanValdig
 14993  00548E  20F4               	addwfc	prodh,w,c
 14994  005490  6EDA               	movwf	fsr2h,c
 14995  005492  0E00               	movlw	0
 14996  005494  AEDB               	btfss	plusw2,7,c
 14997  005496  0012               	return	
 14998                           
 14999                           ; BSR set to: 1
 15000                           ;DisplayProtocol.h: 40: chanValdig[chanValSection] = 9;
 15001  005498  0101               	movlb	1	; () banked
 15002  00549A  519C               	movf	_chanValSection& (0+255),w,b
 15003  00549C  0D01               	mullw	1
 15004  00549E  0EA3               	movlw	low _chanValdig
 15005  0054A0  24F3               	addwf	prodl,w,c
 15006  0054A2  6ED9               	movwf	fsr2l,c
 15007  0054A4  0E01               	movlw	high _chanValdig
 15008  0054A6  20F4               	addwfc	prodh,w,c
 15009  0054A8  6EDA               	movwf	fsr2h,c
 15010  0054AA  0E09               	movlw	9
 15011  0054AC  6EDF               	movwf	indf2,c
 15012                           
 15013                           ; BSR set to: 1
 15014                           ;DisplayProtocol.h: 41: if(chanValSection > 1 && chanValdig[chanValSection - 1] > 0)
 15015  0054AE  0101               	movlb	1	; () banked
 15016  0054B0  519C               	movf	_chanValSection& (0+255),w,b
 15017  0054B2  0A80               	xorlw	128
 15018  0054B4  0F7E               	addlw	-130
 15019  0054B6  A0D8               	btfss	status,0,c
 15020  0054B8  0012               	return	
 15021                           
 15022                           ; BSR set to: 1
 15023  0054BA  0EFF               	movlw	255
 15024  0054BC  0101               	movlb	1	; () banked
 15025  0054BE  6F00               	movwf	??_chanValDigDOWN& (0+255),b
 15026  0054C0  0EFF               	movlw	255
 15027  0054C2  0101               	movlb	1	; () banked
 15028  0054C4  6F01               	movwf	(??_chanValDigDOWN+1)& (0+255),b
 15029  0054C6  C19C  F102         	movff	_chanValSection,??_chanValDigDOWN+2
 15030  0054CA  0101               	movlb	1	; () banked
 15031  0054CC  6B03               	clrf	(??_chanValDigDOWN+3)& (0+255),b
 15032  0054CE  BF02               	btfsc	(??_chanValDigDOWN+2)& (0+255),7,b
 15033  0054D0  0703               	decf	(??_chanValDigDOWN+3)& (0+255),f,b
 15034  0054D2  0101               	movlb	1	; () banked
 15035  0054D4  5100               	movf	??_chanValDigDOWN& (0+255),w,b
 15036  0054D6  0101               	movlb	1	; () banked
 15037  0054D8  2702               	addwf	(??_chanValDigDOWN+2)& (0+255),f,b
 15038  0054DA  0101               	movlb	1	; () banked
 15039  0054DC  5101               	movf	(??_chanValDigDOWN+1)& (0+255),w,b
 15040  0054DE  0101               	movlb	1	; () banked
 15041  0054E0  2303               	addwfc	(??_chanValDigDOWN+3)& (0+255),f,b
 15042  0054E2  0EA3               	movlw	low _chanValdig
 15043  0054E4  0101               	movlb	1	; () banked
 15044  0054E6  2502               	addwf	(??_chanValDigDOWN+2)& (0+255),w,b
 15045  0054E8  6ED9               	movwf	fsr2l,c
 15046  0054EA  0E01               	movlw	high _chanValdig
 15047  0054EC  0101               	movlb	1	; () banked
 15048  0054EE  2103               	addwfc	(??_chanValDigDOWN+3)& (0+255),w,b
 15049  0054F0  6EDA               	movwf	fsr2h,c
 15050  0054F2  50DF               	movf	indf2,w,c
 15051  0054F4  0A80               	xorlw	128
 15052  0054F6  0F7F               	addlw	-129
 15053  0054F8  A0D8               	btfss	status,0,c
 15054  0054FA  0012               	return	
 15055                           
 15056                           ; BSR set to: 1
 15057                           ;DisplayProtocol.h: 42: chanValdig[chanValSection - 1]--;
 15058  0054FC  0EFF               	movlw	255
 15059  0054FE  0101               	movlb	1	; () banked
 15060  005500  6F00               	movwf	??_chanValDigDOWN& (0+255),b
 15061  005502  0EFF               	movlw	255
 15062  005504  0101               	movlb	1	; () banked
 15063  005506  6F01               	movwf	(??_chanValDigDOWN+1)& (0+255),b
 15064  005508  C19C  F102         	movff	_chanValSection,??_chanValDigDOWN+2
 15065  00550C  0101               	movlb	1	; () banked
 15066  00550E  6B03               	clrf	(??_chanValDigDOWN+3)& (0+255),b
 15067  005510  BF02               	btfsc	(??_chanValDigDOWN+2)& (0+255),7,b
 15068  005512  0703               	decf	(??_chanValDigDOWN+3)& (0+255),f,b
 15069  005514  0101               	movlb	1	; () banked
 15070  005516  5100               	movf	??_chanValDigDOWN& (0+255),w,b
 15071  005518  0101               	movlb	1	; () banked
 15072  00551A  2702               	addwf	(??_chanValDigDOWN+2)& (0+255),f,b
 15073  00551C  0101               	movlb	1	; () banked
 15074  00551E  5101               	movf	(??_chanValDigDOWN+1)& (0+255),w,b
 15075  005520  0101               	movlb	1	; () banked
 15076  005522  2303               	addwfc	(??_chanValDigDOWN+3)& (0+255),f,b
 15077  005524  0EA3               	movlw	low _chanValdig
 15078  005526  0101               	movlb	1	; () banked
 15079  005528  2502               	addwf	(??_chanValDigDOWN+2)& (0+255),w,b
 15080  00552A  6ED9               	movwf	fsr2l,c
 15081  00552C  0E01               	movlw	high _chanValdig
 15082  00552E  0101               	movlb	1	; () banked
 15083  005530  2103               	addwfc	(??_chanValDigDOWN+3)& (0+255),w,b
 15084  005532  6EDA               	movwf	fsr2h,c
 15085  005534  06DF               	decf	indf2,f,c
 15086                           
 15087                           ; BSR set to: 1
 15088  005536  0012               	return	
 15089  005538                     __end_of_chanValDigDOWN:
 15090                           	opt stack 0
 15091                           tblptru	equ	0xFF8
 15092                           tblptrh	equ	0xFF7
 15093                           tblptrl	equ	0xFF6
 15094                           tablat	equ	0xFF5
 15095                           prodh	equ	0xFF4
 15096                           prodl	equ	0xFF3
 15097                           intcon	equ	0xFF2
 15098                           postinc0	equ	0xFEE
 15099                           wreg	equ	0xFE8
 15100                           postdec1	equ	0xFE5
 15101                           fsr1l	equ	0xFE1
 15102                           indf2	equ	0xFDF
 15103                           postinc2	equ	0xFDE
 15104                           postdec2	equ	0xFDD
 15105                           plusw2	equ	0xFDB
 15106                           fsr2h	equ	0xFDA
 15107                           fsr2l	equ	0xFD9
 15108                           status	equ	0xFD8
 15109                           
 15110 ;; *************** function _longPressUP *****************
 15111 ;; Defined at:
 15112 ;;		line 157 in file "source/DisplayProtocol.h"
 15113 ;; Parameters:    Size  Location     Type
 15114 ;;		None
 15115 ;; Auto vars:     Size  Location     Type
 15116 ;;		None
 15117 ;; Return value:  Size  Location     Type
 15118 ;;                  1    wreg      void 
 15119 ;; Registers used:
 15120 ;;		wreg, status,2, status,0
 15121 ;; Tracked objects:
 15122 ;;		On entry : 0/0
 15123 ;;		On exit  : 0/0
 15124 ;;		Unchanged: 0/0
 15125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15126 ;;      Params:         0       0       0       0       0       0       0
 15127 ;;      Locals:         0       0       0       0       0       0       0
 15128 ;;      Temps:          0       0       0       0       0       0       0
 15129 ;;      Totals:         0       0       0       0       0       0       0
 15130 ;;Total ram usage:        0 bytes
 15131 ;; Hardware stack levels used:    1
 15132 ;; Hardware stack levels required when called:   12
 15133 ;; This function calls:
 15134 ;;		Nothing
 15135 ;; This function is called by:
 15136 ;;		_buttonChecking
 15137 ;; This function uses a non-reentrant model
 15138 ;;
 15139                           
 15140                           	psect	text59
 15141  006970                     __ptext59:
 15142                           	opt stack 0
 15143  006970                     _longPressUP:
 15144                           	opt stack 17
 15145                           
 15146                           ;DisplayProtocol.h: 158: if (!UPisLP) {
 15147                           
 15148                           ; BSR set to: 1
 15149                           ;incstack = 0
 15150  006970  504A               	movf	_UPisLP,w,c
 15151  006972  A4D8               	btfss	status,2,c
 15152  006974  0012               	return	
 15153                           
 15154                           ;DisplayProtocol.h: 159: UPisLP = 1;
 15155  006976  0E01               	movlw	1
 15156  006978  6E4A               	movwf	_UPisLP,c
 15157                           
 15158                           ;DisplayProtocol.h: 160: if (actualScreen == 0 || actualScreen == 4) {
 15159  00697A  0101               	movlb	1	; () banked
 15160  00697C  51BD               	movf	_actualScreen& (0+255),w,b
 15161  00697E  B4D8               	btfsc	status,2,c
 15162  006980  D005               	goto	l11150
 15163                           
 15164                           ; BSR set to: 1
 15165  006982  0E04               	movlw	4
 15166  006984  0101               	movlb	1	; () banked
 15167  006986  19BD               	xorwf	_actualScreen& (0+255),w,b
 15168  006988  A4D8               	btfss	status,2,c
 15169  00698A  D01C               	goto	l11162
 15170  00698C                     l11150:
 15171                           
 15172                           ; BSR set to: 1
 15173                           ;DisplayProtocol.h: 161: if (holdENTERcont > 5) {
 15174  00698C  0E05               	movlw	5
 15175  00698E  0100               	movlb	0	; () banked
 15176  006990  65C6               	cpfsgt	_holdENTERcont& (0+255),b
 15177  006992  D014               	goto	l11160
 15178                           
 15179                           ; BSR set to: 0
 15180                           ;DisplayProtocol.h: 162: if (actualScreen == 0) {
 15181  006994  0101               	movlb	1	; () banked
 15182  006996  51BD               	movf	_actualScreen& (0+255),w,b
 15183  006998  A4D8               	btfss	status,2,c
 15184  00699A  D007               	goto	l11156
 15185                           
 15186                           ; BSR set to: 1
 15187                           ;DisplayProtocol.h: 163: actualScreen = 1;
 15188  00699C  0E01               	movlw	1
 15189  00699E  0101               	movlb	1	; () banked
 15190  0069A0  6FBD               	movwf	_actualScreen& (0+255),b
 15191                           
 15192                           ;DisplayProtocol.h: 164: fd = 0;
 15193  0069A2  0E00               	movlw	0
 15194  0069A4  0101               	movlb	1	; () banked
 15195  0069A6  6FB9               	movwf	_fd& (0+255),b
 15196                           
 15197                           ;DisplayProtocol.h: 165: } else if (actualScreen == 4)
 15198  0069A8  0012               	return	
 15199  0069AA                     l11156:
 15200                           
 15201                           ; BSR set to: 1
 15202  0069AA  0E04               	movlw	4
 15203  0069AC  0101               	movlb	1	; () banked
 15204  0069AE  19BD               	xorwf	_actualScreen& (0+255),w,b
 15205  0069B0  A4D8               	btfss	status,2,c
 15206  0069B2  0012               	return	
 15207                           
 15208                           ; BSR set to: 1
 15209                           ;DisplayProtocol.h: 166: actualScreen = 9;
 15210  0069B4  0E09               	movlw	9
 15211  0069B6  0101               	movlb	1	; () banked
 15212  0069B8  6FBD               	movwf	_actualScreen& (0+255),b
 15213                           
 15214                           ; BSR set to: 1
 15215                           ;DisplayProtocol.h: 167: } else
 15216                           
 15217                           ; BSR set to: 1
 15218  0069BA  0012               	return	
 15219  0069BC                     l11160:
 15220                           
 15221                           ;DisplayProtocol.h: 168: menuSection = 0;
 15222  0069BC  0E00               	movlw	0
 15223  0069BE  0101               	movlb	1	; () banked
 15224  0069C0  6FBC               	movwf	_menuSection& (0+255),b
 15225                           
 15226                           ; BSR set to: 1
 15227                           ;DisplayProtocol.h: 169: }else if(actualScreen == 5) {
 15228  0069C2  0012               	return	
 15229  0069C4                     l11162:
 15230                           
 15231                           ; BSR set to: 1
 15232  0069C4  0E05               	movlw	5
 15233  0069C6  0101               	movlb	1	; () banked
 15234  0069C8  19BD               	xorwf	_actualScreen& (0+255),w,b
 15235  0069CA  A4D8               	btfss	status,2,c
 15236  0069CC  0012               	return	
 15237                           
 15238                           ; BSR set to: 1
 15239                           ;DisplayProtocol.h: 170: if(menuSection == 2)
 15240  0069CE  0E02               	movlw	2
 15241  0069D0  0101               	movlb	1	; () banked
 15242  0069D2  19BC               	xorwf	_menuSection& (0+255),w,b
 15243  0069D4  A4D8               	btfss	status,2,c
 15244  0069D6  0012               	return	
 15245                           
 15246                           ; BSR set to: 1
 15247                           ;DisplayProtocol.h: 171: chanVals += 10;
 15248  0069D8  0E0A               	movlw	10
 15249  0069DA  0101               	movlb	1	; () banked
 15250  0069DC  27B6               	addwf	_chanVals& (0+255),f,b
 15251  0069DE  0E00               	movlw	0
 15252  0069E0  23B7               	addwfc	(_chanVals+1)& (0+255),f,b
 15253                           
 15254                           ; BSR set to: 1
 15255                           
 15256                           ; BSR set to: 1
 15257                           
 15258                           ; BSR set to: 1
 15259  0069E2  0012               	return	
 15260  0069E4                     __end_of_longPressUP:
 15261                           	opt stack 0
 15262                           tblptru	equ	0xFF8
 15263                           tblptrh	equ	0xFF7
 15264                           tblptrl	equ	0xFF6
 15265                           tablat	equ	0xFF5
 15266                           prodh	equ	0xFF4
 15267                           prodl	equ	0xFF3
 15268                           intcon	equ	0xFF2
 15269                           postinc0	equ	0xFEE
 15270                           wreg	equ	0xFE8
 15271                           postdec1	equ	0xFE5
 15272                           fsr1l	equ	0xFE1
 15273                           indf2	equ	0xFDF
 15274                           postinc2	equ	0xFDE
 15275                           postdec2	equ	0xFDD
 15276                           plusw2	equ	0xFDB
 15277                           fsr2h	equ	0xFDA
 15278                           fsr2l	equ	0xFD9
 15279                           status	equ	0xFD8
 15280                           
 15281 ;; *************** function _longPressRETRO *****************
 15282 ;; Defined at:
 15283 ;;		line 253 in file "source/DisplayProtocol.h"
 15284 ;; Parameters:    Size  Location     Type
 15285 ;;		None
 15286 ;; Auto vars:     Size  Location     Type
 15287 ;;		None
 15288 ;; Return value:  Size  Location     Type
 15289 ;;                  1    wreg      void 
 15290 ;; Registers used:
 15291 ;;		wreg, status,2, status,0, cstack
 15292 ;; Tracked objects:
 15293 ;;		On entry : 0/0
 15294 ;;		On exit  : 0/0
 15295 ;;		Unchanged: 0/0
 15296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15297 ;;      Params:         0       0       0       0       0       0       0
 15298 ;;      Locals:         0       0       0       0       0       0       0
 15299 ;;      Temps:          0       0       0       0       0       0       0
 15300 ;;      Totals:         0       0       0       0       0       0       0
 15301 ;;Total ram usage:        0 bytes
 15302 ;; Hardware stack levels used:    1
 15303 ;; Hardware stack levels required when called:   14
 15304 ;; This function calls:
 15305 ;;		___ftmul
 15306 ;;		_initProtocoll
 15307 ;; This function is called by:
 15308 ;;		_buttonChecking
 15309 ;; This function uses a non-reentrant model
 15310 ;;
 15311                           
 15312                           	psect	text60
 15313  004EFA                     __ptext60:
 15314                           	opt stack 0
 15315  004EFA                     _longPressRETRO:
 15316                           	opt stack 15
 15317                           
 15318                           ;DisplayProtocol.h: 254: if (!RETROisLP) {
 15319                           
 15320                           ;incstack = 0
 15321  004EFA  0100               	movlb	0	; () banked
 15322  004EFC  51C5               	movf	_RETROisLP& (0+255),w,b
 15323  004EFE  A4D8               	btfss	status,2,c
 15324  004F00  0012               	return	
 15325                           
 15326                           ; BSR set to: 0
 15327                           ;DisplayProtocol.h: 255: RETROisLP = 1;
 15328  004F02  0E01               	movlw	1
 15329  004F04  0100               	movlb	0	; () banked
 15330  004F06  6FC5               	movwf	_RETROisLP& (0+255),b
 15331                           
 15332                           ;DisplayProtocol.h: 256: if(actualScreen == 0 || actualScreen == 4
 15333                           ;DisplayProtocol.h: 257: || actualScreen == 14) {
 15334  004F08  0101               	movlb	1	; () banked
 15335  004F0A  51BD               	movf	_actualScreen& (0+255),w,b
 15336  004F0C  B4D8               	btfsc	status,2,c
 15337  004F0E  D00A               	goto	l11280
 15338                           
 15339                           ; BSR set to: 1
 15340  004F10  0E04               	movlw	4
 15341  004F12  0101               	movlb	1	; () banked
 15342  004F14  19BD               	xorwf	_actualScreen& (0+255),w,b
 15343  004F16  B4D8               	btfsc	status,2,c
 15344  004F18  D005               	goto	l11280
 15345                           
 15346                           ; BSR set to: 1
 15347  004F1A  0E0E               	movlw	14
 15348  004F1C  0101               	movlb	1	; () banked
 15349  004F1E  19BD               	xorwf	_actualScreen& (0+255),w,b
 15350  004F20  A4D8               	btfss	status,2,c
 15351  004F22  D012               	goto	l11286
 15352  004F24                     l11280:
 15353                           
 15354                           ; BSR set to: 1
 15355                           ;DisplayProtocol.h: 258: if(processStarted || actualScreen == 14) {
 15356  004F24  0100               	movlb	0	; () banked
 15357  004F26  51C0               	movf	_processStarted& (0+255),w,b
 15358  004F28  A4D8               	btfss	status,2,c
 15359  004F2A  D005               	goto	l688
 15360                           
 15361                           ; BSR set to: 0
 15362  004F2C  0E0E               	movlw	14
 15363  004F2E  0101               	movlb	1	; () banked
 15364  004F30  19BD               	xorwf	_actualScreen& (0+255),w,b
 15365  004F32  A4D8               	btfss	status,2,c
 15366  004F34  0012               	return	
 15367  004F36                     l688:
 15368                           
 15369                           ;DisplayProtocol.h: 259: tempLastScreen = actualScreen;
 15370  004F36  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 15371                           
 15372                           ;DisplayProtocol.h: 260: actualScreen = 3;
 15373  004F3A  0E03               	movlw	3
 15374  004F3C  0101               	movlb	1	; () banked
 15375  004F3E  6FBD               	movwf	_actualScreen& (0+255),b
 15376                           
 15377                           ;DisplayProtocol.h: 261: selSN = 0;
 15378  004F40  0E00               	movlw	0
 15379  004F42  0101               	movlb	1	; () banked
 15380  004F44  6FBA               	movwf	_selSN& (0+255),b
 15381                           
 15382                           ; BSR set to: 1
 15383                           ;DisplayProtocol.h: 262: }
 15384                           ;DisplayProtocol.h: 263: }else if(actualScreen == 5)
 15385  004F46  0012               	return	
 15386  004F48                     l11286:
 15387                           
 15388                           ; BSR set to: 1
 15389  004F48  0E05               	movlw	5
 15390  004F4A  0101               	movlb	1	; () banked
 15391  004F4C  19BD               	xorwf	_actualScreen& (0+255),w,b
 15392  004F4E  A4D8               	btfss	status,2,c
 15393  004F50  D004               	goto	l11290
 15394                           
 15395                           ; BSR set to: 1
 15396                           ;DisplayProtocol.h: 264: actualScreen = 4;
 15397  004F52  0E04               	movlw	4
 15398  004F54  0101               	movlb	1	; () banked
 15399  004F56  6FBD               	movwf	_actualScreen& (0+255),b
 15400  004F58  0012               	return	
 15401  004F5A                     l11290:
 15402                           
 15403                           ; BSR set to: 1
 15404                           ;DisplayProtocol.h: 265: else if(actualScreen == 12 || actualScreen == 6) {
 15405  004F5A  0E0C               	movlw	12
 15406  004F5C  0101               	movlb	1	; () banked
 15407  004F5E  19BD               	xorwf	_actualScreen& (0+255),w,b
 15408  004F60  B4D8               	btfsc	status,2,c
 15409  004F62  D005               	goto	l694
 15410                           
 15411                           ; BSR set to: 1
 15412  004F64  0E06               	movlw	6
 15413  004F66  0101               	movlb	1	; () banked
 15414  004F68  19BD               	xorwf	_actualScreen& (0+255),w,b
 15415  004F6A  A4D8               	btfss	status,2,c
 15416  004F6C  D009               	goto	l11296
 15417  004F6E                     l694:
 15418                           
 15419                           ; BSR set to: 1
 15420                           ;DisplayProtocol.h: 266: tempLastScreen = actualScreen;
 15421  004F6E  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 15422                           
 15423                           ; BSR set to: 1
 15424                           ;DisplayProtocol.h: 267: actualScreen = 15;
 15425  004F72  0E0F               	movlw	15
 15426  004F74  0101               	movlb	1	; () banked
 15427  004F76  6FBD               	movwf	_actualScreen& (0+255),b
 15428                           
 15429                           ;DisplayProtocol.h: 268: selSN = 1;
 15430  004F78  0E01               	movlw	1
 15431  004F7A  0101               	movlb	1	; () banked
 15432  004F7C  6FBA               	movwf	_selSN& (0+255),b
 15433                           
 15434                           ;DisplayProtocol.h: 269: }else if(actualScreen == 14) {
 15435  004F7E  0012               	return	
 15436  004F80                     l11296:
 15437                           
 15438                           ; BSR set to: 1
 15439  004F80  0E0E               	movlw	14
 15440  004F82  0101               	movlb	1	; () banked
 15441  004F84  19BD               	xorwf	_actualScreen& (0+255),w,b
 15442  004F86  A4D8               	btfss	status,2,c
 15443  004F88  0012               	return	
 15444                           
 15445                           ; BSR set to: 1
 15446                           ;DisplayProtocol.h: 270: processStarted = 0;
 15447  004F8A  0E00               	movlw	0
 15448  004F8C  0100               	movlb	0	; () banked
 15449  004F8E  6FC0               	movwf	_processStarted& (0+255),b
 15450                           
 15451                           ;DisplayProtocol.h: 271: processState = 0;
 15452  004F90  0E00               	movlw	0
 15453  004F92  0100               	movlb	0	; () banked
 15454  004F94  6FB3               	movwf	(_processState+1)& (0+255),b
 15455  004F96  0E00               	movlw	0
 15456  004F98  6FB2               	movwf	_processState& (0+255),b
 15457                           
 15458                           ; BSR set to: 0
 15459                           ;DisplayProtocol.h: 272: LATCbits.LATC4 = 0;
 15460  004F9A  988B               	bcf	3979,4,c	;volatile
 15461                           
 15462                           ;DisplayProtocol.h: 273: actualScreen = 0;
 15463  004F9C  0E00               	movlw	0
 15464  004F9E  0101               	movlb	1	; () banked
 15465  004FA0  6FBD               	movwf	_actualScreen& (0+255),b
 15466                           
 15467                           ;DisplayProtocol.h: 274: if(calibMode) {
 15468  004FA2  0100               	movlb	0	; () banked
 15469  004FA4  51BE               	movf	_calibMode& (0+255),w,b
 15470  004FA6  B4D8               	btfsc	status,2,c
 15471  004FA8  D027               	goto	l697
 15472                           
 15473                           ; BSR set to: 0
 15474                           ;DisplayProtocol.h: 275: numCortes = tempNumCortes;
 15475  004FAA  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 15476  004FAE  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 15477                           
 15478                           ;DisplayProtocol.h: 276: tiXcorte = temptiXcorte;
 15479  004FB2  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 15480  004FB6  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 15481  004FBA  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 15482                           
 15483                           ; BSR set to: 0
 15484                           ;DisplayProtocol.h: 277: timsXcorte = (float)tiXcorte * 1000;
 15485  004FBE  C195  F114         	movff	_tiXcorte,___ftmul@f1
 15486  004FC2  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 15487  004FC6  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 15488  004FCA  0E00               	movlw	0
 15489  004FCC  0101               	movlb	1	; () banked
 15490  004FCE  6F17               	movwf	___ftmul@f2& (0+255),b
 15491  004FD0  0E7A               	movlw	122
 15492  004FD2  0101               	movlb	1	; () banked
 15493  004FD4  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 15494  004FD6  0E44               	movlw	68
 15495  004FD8  0101               	movlb	1	; () banked
 15496  004FDA  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 15497  004FDC  EC1F  F01D         	call	___ftmul	;wreg free
 15498  004FE0  C114  F053         	movff	?___ftmul,_timsXcorte
 15499  004FE4  C115  F054         	movff	?___ftmul+1,_timsXcorte+1
 15500  004FE8  C116  F055         	movff	?___ftmul+2,_timsXcorte+2
 15501                           
 15502                           ;DisplayProtocol.h: 278: calibMode = 0;
 15503  004FEC  0E00               	movlw	0
 15504  004FEE  0100               	movlb	0	; () banked
 15505  004FF0  6FBE               	movwf	_calibMode& (0+255),b
 15506                           
 15507                           ; BSR set to: 0
 15508                           ;DisplayProtocol.h: 279: actualScreen = 4;
 15509  004FF2  0E04               	movlw	4
 15510  004FF4  0101               	movlb	1	; () banked
 15511  004FF6  6FBD               	movwf	_actualScreen& (0+255),b
 15512  004FF8                     l697:
 15513                           
 15514                           ;DisplayProtocol.h: 280: }
 15515                           ;DisplayProtocol.h: 281: initProtocoll(1);
 15516  004FF8  0E01               	movlw	1
 15517  004FFA  ECA6  F036         	call	_initProtocoll
 15518  004FFE  0012               	return	
 15519  005000                     __end_of_longPressRETRO:
 15520                           	opt stack 0
 15521                           tblptru	equ	0xFF8
 15522                           tblptrh	equ	0xFF7
 15523                           tblptrl	equ	0xFF6
 15524                           tablat	equ	0xFF5
 15525                           prodh	equ	0xFF4
 15526                           prodl	equ	0xFF3
 15527                           intcon	equ	0xFF2
 15528                           postinc0	equ	0xFEE
 15529                           wreg	equ	0xFE8
 15530                           postdec1	equ	0xFE5
 15531                           fsr1l	equ	0xFE1
 15532                           indf2	equ	0xFDF
 15533                           postinc2	equ	0xFDE
 15534                           postdec2	equ	0xFDD
 15535                           plusw2	equ	0xFDB
 15536                           fsr2h	equ	0xFDA
 15537                           fsr2l	equ	0xFD9
 15538                           status	equ	0xFD8
 15539                           
 15540 ;; *************** function _initProtocoll *****************
 15541 ;; Defined at:
 15542 ;;		line 49 in file "source/PWMConfig.h"
 15543 ;; Parameters:    Size  Location     Type
 15544 ;;  init            1    wreg     unsigned char 
 15545 ;; Auto vars:     Size  Location     Type
 15546 ;;  init            1    6[BANK1 ] unsigned char 
 15547 ;; Return value:  Size  Location     Type
 15548 ;;                  1    wreg      void 
 15549 ;; Registers used:
 15550 ;;		wreg, status,2, status,0, cstack
 15551 ;; Tracked objects:
 15552 ;;		On entry : 0/0
 15553 ;;		On exit  : 0/0
 15554 ;;		Unchanged: 0/0
 15555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15556 ;;      Params:         0       0       0       0       0       0       0
 15557 ;;      Locals:         0       0       1       0       0       0       0
 15558 ;;      Temps:          0       0       0       0       0       0       0
 15559 ;;      Totals:         0       0       1       0       0       0       0
 15560 ;;Total ram usage:        1 bytes
 15561 ;; Hardware stack levels used:    1
 15562 ;; Hardware stack levels required when called:   13
 15563 ;; This function calls:
 15564 ;;		_setPWM2duty
 15565 ;; This function is called by:
 15566 ;;		_pressRETRO
 15567 ;;		_longPressRETRO
 15568 ;;		_pressENTER
 15569 ;; This function uses a non-reentrant model
 15570 ;;
 15571                           
 15572                           	psect	text61
 15573  006D4C                     __ptext61:
 15574                           	opt stack 0
 15575  006D4C                     _initProtocoll:
 15576                           	opt stack 15
 15577                           
 15578                           ;incstack = 0
 15579                           ;initProtocoll@init stored from wreg
 15580  006D4C  0101               	movlb	1	; () banked
 15581  006D4E  6F06               	movwf	initProtocoll@init& (0+255),b
 15582                           
 15583                           ;PWMConfig.h: 50: if(!PORTAbits.RA7)
 15584  006D50  BE80               	btfsc	3968,7,c	;volatile
 15585  006D52  D003               	goto	l10760
 15586                           
 15587                           ;PWMConfig.h: 51: bladeIsUP = 2;
 15588  006D54  0E02               	movlw	2
 15589  006D56  0100               	movlb	0	; () banked
 15590  006D58  6FD4               	movwf	_bladeIsUP& (0+255),b
 15591  006D5A                     l10760:
 15592                           
 15593                           ;PWMConfig.h: 52: if(init) {
 15594  006D5A  0101               	movlb	1	; () banked
 15595  006D5C  5106               	movf	initProtocoll@init& (0+255),w,b
 15596  006D5E  0101               	movlb	1	; () banked
 15597  006D60  B4D8               	btfsc	status,2,c
 15598  006D62  0012               	return	
 15599                           
 15600                           ; BSR set to: 1
 15601                           ;PWMConfig.h: 53: LATCbits.LATC5 = 0;
 15602  006D64  9A8B               	bcf	3979,5,c	;volatile
 15603                           
 15604                           ; BSR set to: 1
 15605                           ;PWMConfig.h: 54: processTimer = 0;
 15606  006D66  0E00               	movlw	0
 15607  006D68  6E3B               	movwf	_processTimer,c
 15608  006D6A  0E00               	movlw	0
 15609  006D6C  6E3C               	movwf	_processTimer+1,c
 15610  006D6E  0E00               	movlw	0
 15611  006D70  6E3D               	movwf	_processTimer+2,c
 15612  006D72  0E00               	movlw	0
 15613  006D74  6E3E               	movwf	_processTimer+3,c
 15614                           
 15615                           ;PWMConfig.h: 55: processState = 0;
 15616  006D76  0E00               	movlw	0
 15617  006D78  0100               	movlb	0	; () banked
 15618  006D7A  6FB3               	movwf	(_processState+1)& (0+255),b
 15619  006D7C  0E00               	movlw	0
 15620  006D7E  6FB2               	movwf	_processState& (0+255),b
 15621                           
 15622                           ; BSR set to: 0
 15623                           ;PWMConfig.h: 56: if(bladeIsUP != 1)
 15624  006D80  0100               	movlb	0	; () banked
 15625  006D82  05D4               	decf	_bladeIsUP& (0+255),w,b
 15626  006D84  B4D8               	btfsc	status,2,c
 15627  006D86  0012               	return	
 15628                           
 15629                           ; BSR set to: 0
 15630                           ;PWMConfig.h: 57: setPWM2duty(-400);
 15631  006D88  0EFE               	movlw	254
 15632  006D8A  0101               	movlb	1	; () banked
 15633  006D8C  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 15634  006D8E  0E70               	movlw	112
 15635  006D90  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 15636  006D92  EC84  F02F         	call	_setPWM2duty	;wreg free
 15637  006D96  0012               	return	
 15638  006D98                     __end_of_initProtocoll:
 15639                           	opt stack 0
 15640                           tblptru	equ	0xFF8
 15641                           tblptrh	equ	0xFF7
 15642                           tblptrl	equ	0xFF6
 15643                           tablat	equ	0xFF5
 15644                           prodh	equ	0xFF4
 15645                           prodl	equ	0xFF3
 15646                           intcon	equ	0xFF2
 15647                           postinc0	equ	0xFEE
 15648                           wreg	equ	0xFE8
 15649                           postdec1	equ	0xFE5
 15650                           fsr1l	equ	0xFE1
 15651                           indf2	equ	0xFDF
 15652                           postinc2	equ	0xFDE
 15653                           postdec2	equ	0xFDD
 15654                           plusw2	equ	0xFDB
 15655                           fsr2h	equ	0xFDA
 15656                           fsr2l	equ	0xFD9
 15657                           status	equ	0xFD8
 15658                           
 15659 ;; *************** function _longPressENTER *****************
 15660 ;; Defined at:
 15661 ;;		line 428 in file "source/DisplayProtocol.h"
 15662 ;; Parameters:    Size  Location     Type
 15663 ;;		None
 15664 ;; Auto vars:     Size  Location     Type
 15665 ;;  temp            3   76[BANK1 ] float 
 15666 ;; Return value:  Size  Location     Type
 15667 ;;                  1    wreg      void 
 15668 ;; Registers used:
 15669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15670 ;; Tracked objects:
 15671 ;;		On entry : 0/0
 15672 ;;		On exit  : 0/0
 15673 ;;		Unchanged: 0/0
 15674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15675 ;;      Params:         0       0       0       0       0       0       0
 15676 ;;      Locals:         0       0       6       0       0       0       0
 15677 ;;      Temps:          0       0       0       0       0       0       0
 15678 ;;      Totals:         0       0       6       0       0       0       0
 15679 ;;Total ram usage:        6 bytes
 15680 ;; Hardware stack levels used:    1
 15681 ;; Hardware stack levels required when called:   17
 15682 ;; This function calls:
 15683 ;;		___ftadd
 15684 ;;		___ftdiv
 15685 ;;		___ftmul
 15686 ;;		_calcVars2ti
 15687 ;;		_confirmEdition
 15688 ;;		_desintegrator
 15689 ;;		_integrator
 15690 ;; This function is called by:
 15691 ;;		_buttonChecking
 15692 ;; This function uses a non-reentrant model
 15693 ;;
 15694                           
 15695                           	psect	text62
 15696  00193E                     __ptext62:
 15697                           	opt stack 0
 15698  00193E                     _longPressENTER:
 15699                           	opt stack 12
 15700                           
 15701                           ;DisplayProtocol.h: 429: if (!ENTERisLP) {
 15702                           
 15703                           ;incstack = 0
 15704  00193E  0101               	movlb	1	; () banked
 15705  001940  51BE               	movf	_ENTERisLP& (0+255),w,b
 15706  001942  A4D8               	btfss	status,2,c
 15707  001944  0012               	return	
 15708                           
 15709                           ; BSR set to: 1
 15710                           ;DisplayProtocol.h: 430: ENTERisLP = 1;
 15711  001946  0E01               	movlw	1
 15712  001948  0101               	movlb	1	; () banked
 15713  00194A  6FBE               	movwf	_ENTERisLP& (0+255),b
 15714                           
 15715                           ;DisplayProtocol.h: 431: if(actualScreen == 0 || actualScreen == 4) {
 15716  00194C  0101               	movlb	1	; () banked
 15717  00194E  51BD               	movf	_actualScreen& (0+255),w,b
 15718  001950  B4D8               	btfsc	status,2,c
 15719  001952  D005               	goto	l11504
 15720                           
 15721                           ; BSR set to: 1
 15722  001954  0E04               	movlw	4
 15723  001956  0101               	movlb	1	; () banked
 15724  001958  19BD               	xorwf	_actualScreen& (0+255),w,b
 15725  00195A  A4D8               	btfss	status,2,c
 15726  00195C  D025               	goto	l11520
 15727  00195E                     l11504:
 15728                           
 15729                           ; BSR set to: 1
 15730                           ;DisplayProtocol.h: 432: if (holdUPcont > 5) {
 15731  00195E  0E05               	movlw	5
 15732  001960  0101               	movlb	1	; () banked
 15733  001962  65BF               	cpfsgt	_holdUPcont& (0+255),b
 15734  001964  D014               	goto	l11514
 15735                           
 15736                           ; BSR set to: 1
 15737                           ;DisplayProtocol.h: 433: if (actualScreen == 0) {
 15738  001966  0101               	movlb	1	; () banked
 15739  001968  51BD               	movf	_actualScreen& (0+255),w,b
 15740  00196A  A4D8               	btfss	status,2,c
 15741  00196C  D007               	goto	l11510
 15742                           
 15743                           ; BSR set to: 1
 15744                           ;DisplayProtocol.h: 434: actualScreen = 1;
 15745  00196E  0E01               	movlw	1
 15746  001970  0101               	movlb	1	; () banked
 15747  001972  6FBD               	movwf	_actualScreen& (0+255),b
 15748                           
 15749                           ;DisplayProtocol.h: 435: fd = 0;
 15750  001974  0E00               	movlw	0
 15751  001976  0101               	movlb	1	; () banked
 15752  001978  6FB9               	movwf	_fd& (0+255),b
 15753                           
 15754                           ;DisplayProtocol.h: 436: } else if (actualScreen == 4)
 15755  00197A  0012               	return	
 15756  00197C                     l11510:
 15757                           
 15758                           ; BSR set to: 1
 15759  00197C  0E04               	movlw	4
 15760  00197E  0101               	movlb	1	; () banked
 15761  001980  19BD               	xorwf	_actualScreen& (0+255),w,b
 15762  001982  A4D8               	btfss	status,2,c
 15763  001984  0012               	return	
 15764                           
 15765                           ; BSR set to: 1
 15766                           ;DisplayProtocol.h: 437: actualScreen = 9;
 15767  001986  0E09               	movlw	9
 15768  001988  0101               	movlb	1	; () banked
 15769  00198A  6FBD               	movwf	_actualScreen& (0+255),b
 15770                           
 15771                           ; BSR set to: 1
 15772                           ;DisplayProtocol.h: 438: } else if(!processStarted) {
 15773                           
 15774                           ; BSR set to: 1
 15775  00198C  0012               	return	
 15776  00198E                     l11514:
 15777                           
 15778                           ; BSR set to: 1
 15779  00198E  0100               	movlb	0	; () banked
 15780  001990  51C0               	movf	_processStarted& (0+255),w,b
 15781  001992  A4D8               	btfss	status,2,c
 15782  001994  0012               	return	
 15783                           
 15784                           ; BSR set to: 0
 15785                           ;DisplayProtocol.h: 439: tempLastScreen = actualScreen;
 15786  001996  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 15787                           
 15788                           ; BSR set to: 0
 15789                           ;DisplayProtocol.h: 440: actualScreen = 2;
 15790  00199A  0E02               	movlw	2
 15791  00199C  0101               	movlb	1	; () banked
 15792  00199E  6FBD               	movwf	_actualScreen& (0+255),b
 15793                           
 15794                           ;DisplayProtocol.h: 441: selSN = 1;
 15795  0019A0  0E01               	movlw	1
 15796  0019A2  0101               	movlb	1	; () banked
 15797  0019A4  6FBA               	movwf	_selSN& (0+255),b
 15798                           
 15799                           ; BSR set to: 1
 15800                           ;DisplayProtocol.h: 442: }
 15801                           ;DisplayProtocol.h: 443: }else if(actualScreen == 5) {
 15802                           
 15803                           ; BSR set to: 1
 15804  0019A6  0012               	return	
 15805  0019A8                     l11520:
 15806                           
 15807                           ; BSR set to: 1
 15808  0019A8  0E05               	movlw	5
 15809  0019AA  0101               	movlb	1	; () banked
 15810  0019AC  19BD               	xorwf	_actualScreen& (0+255),w,b
 15811  0019AE  A4D8               	btfss	status,2,c
 15812  0019B0  D010               	goto	l11528
 15813                           
 15814                           ; BSR set to: 1
 15815                           ;DisplayProtocol.h: 444: if(menuSection != 2)
 15816  0019B2  0E02               	movlw	2
 15817  0019B4  0101               	movlb	1	; () banked
 15818  0019B6  19BC               	xorwf	_menuSection& (0+255),w,b
 15819  0019B8  A4D8               	btfss	status,2,c
 15820                           
 15821                           ; BSR set to: 1
 15822                           ;DisplayProtocol.h: 445: integrator();
 15823  0019BA  EC0D  F021         	call	_integrator	;wreg free
 15824                           
 15825                           ;DisplayProtocol.h: 446: confirmEdition(!processStarted);
 15826  0019BE  0100               	movlb	0	; () banked
 15827  0019C0  51C0               	movf	_processStarted& (0+255),w,b
 15828  0019C2  A4D8               	btfss	status,2,c
 15829  0019C4  D002               	goto	u17350
 15830  0019C6  0E01               	movlw	1
 15831  0019C8  D001               	goto	u17360
 15832  0019CA                     u17350:
 15833  0019CA  0E00               	movlw	0
 15834  0019CC                     u17360:
 15835  0019CC  ECE5  F02C         	call	_confirmEdition
 15836                           
 15837                           ;DisplayProtocol.h: 447: }else if(actualScreen == 12) {
 15838  0019D0  0012               	return	
 15839  0019D2                     l11528:
 15840  0019D2  0E0C               	movlw	12
 15841  0019D4  0101               	movlb	1	; () banked
 15842  0019D6  19BD               	xorwf	_actualScreen& (0+255),w,b
 15843  0019D8  A4D8               	btfss	status,2,c
 15844  0019DA  0012               	return	
 15845                           
 15846                           ; BSR set to: 1
 15847                           ;DisplayProtocol.h: 448: tempLastScreen = 6;
 15848  0019DC  0E06               	movlw	6
 15849  0019DE  0100               	movlb	0	; () banked
 15850  0019E0  6FBC               	movwf	_tempLastScreen& (0+255),b
 15851                           
 15852                           ; BSR set to: 0
 15853                           ;DisplayProtocol.h: 449: integrator();
 15854  0019E2  EC0D  F021         	call	_integrator	;wreg free
 15855                           
 15856                           ;DisplayProtocol.h: 450: if(calibLevel == 0) {
 15857  0019E6  0101               	movlb	1	; () banked
 15858  0019E8  51B8               	movf	_calibLevel& (0+255),w,b
 15859  0019EA  A4D8               	btfss	status,2,c
 15860  0019EC  D069               	goto	l11556
 15861                           
 15862                           ; BSR set to: 1
 15863                           ;DisplayProtocol.h: 451: tempVelocidadMasa1 = (float)chanValf / tiXcorte;
 15864  0019EE  C1B1  F112         	movff	_chanValf,___ftdiv@f1
 15865  0019F2  C1B2  F113         	movff	_chanValf+1,___ftdiv@f1+1
 15866  0019F6  C1B3  F114         	movff	_chanValf+2,___ftdiv@f1+2
 15867  0019FA  C195  F115         	movff	_tiXcorte,___ftdiv@f2
 15868  0019FE  C196  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 15869  001A02  C197  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 15870  001A06  EC7D  F01E         	call	___ftdiv	;wreg free
 15871  001A0A  C112  F1A0         	movff	?___ftdiv,_tempVelocidadMasa1
 15872  001A0E  C113  F1A1         	movff	?___ftdiv+1,_tempVelocidadMasa1+1
 15873  001A12  C114  F1A2         	movff	?___ftdiv+2,_tempVelocidadMasa1+2
 15874                           
 15875                           ;DisplayProtocol.h: 452: tiXcorte = (float)0.5f / tempVelocidadMasa1;
 15876  001A16  0E00               	movlw	0
 15877  001A18  0101               	movlb	1	; () banked
 15878  001A1A  6F12               	movwf	___ftdiv@f1& (0+255),b
 15879  001A1C  0E00               	movlw	0
 15880  001A1E  0101               	movlb	1	; () banked
 15881  001A20  6F13               	movwf	(___ftdiv@f1+1)& (0+255),b
 15882  001A22  0E3F               	movlw	63
 15883  001A24  0101               	movlb	1	; () banked
 15884  001A26  6F14               	movwf	(___ftdiv@f1+2)& (0+255),b
 15885  001A28  C1A0  F115         	movff	_tempVelocidadMasa1,___ftdiv@f2
 15886  001A2C  C1A1  F116         	movff	_tempVelocidadMasa1+1,___ftdiv@f2+1
 15887  001A30  C1A2  F117         	movff	_tempVelocidadMasa1+2,___ftdiv@f2+2
 15888  001A34  EC7D  F01E         	call	___ftdiv	;wreg free
 15889  001A38  C112  F195         	movff	?___ftdiv,_tiXcorte
 15890  001A3C  C113  F196         	movff	?___ftdiv+1,_tiXcorte+1
 15891  001A40  C114  F197         	movff	?___ftdiv+2,_tiXcorte+2
 15892                           
 15893                           ;DisplayProtocol.h: 453: timsXcorte = (float)tiXcorte * 1000;
 15894  001A44  C195  F114         	movff	_tiXcorte,___ftmul@f1
 15895  001A48  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 15896  001A4C  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 15897  001A50  0E00               	movlw	0
 15898  001A52  0101               	movlb	1	; () banked
 15899  001A54  6F17               	movwf	___ftmul@f2& (0+255),b
 15900  001A56  0E7A               	movlw	122
 15901  001A58  0101               	movlb	1	; () banked
 15902  001A5A  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 15903  001A5C  0E44               	movlw	68
 15904  001A5E  0101               	movlb	1	; () banked
 15905  001A60  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 15906  001A62  EC1F  F01D         	call	___ftmul	;wreg free
 15907  001A66  C114  F053         	movff	?___ftmul,_timsXcorte
 15908  001A6A  C115  F054         	movff	?___ftmul+1,_timsXcorte+1
 15909  001A6E  C116  F055         	movff	?___ftmul+2,_timsXcorte+2
 15910                           
 15911                           ;DisplayProtocol.h: 454: calibLevel = 1;
 15912  001A72  0E01               	movlw	1
 15913  001A74  0101               	movlb	1	; () banked
 15914  001A76  6FB8               	movwf	_calibLevel& (0+255),b
 15915                           
 15916                           ; BSR set to: 1
 15917                           ;DisplayProtocol.h: 455: numCortes = 1;
 15918  001A78  0E00               	movlw	0
 15919  001A7A  0100               	movlb	0	; () banked
 15920  001A7C  6FD3               	movwf	(_numCortes+1)& (0+255),b
 15921  001A7E  0E01               	movlw	1
 15922  001A80  6FD2               	movwf	_numCortes& (0+255),b
 15923                           
 15924                           ; BSR set to: 0
 15925                           ;DisplayProtocol.h: 456: processState = 0;
 15926  001A82  0E00               	movlw	0
 15927  001A84  0100               	movlb	0	; () banked
 15928  001A86  6FB3               	movwf	(_processState+1)& (0+255),b
 15929  001A88  0E00               	movlw	0
 15930  001A8A  6FB2               	movwf	_processState& (0+255),b
 15931                           
 15932                           ; BSR set to: 0
 15933                           ;DisplayProtocol.h: 457: processTimer = 0;
 15934  001A8C  0E00               	movlw	0
 15935  001A8E  6E3B               	movwf	_processTimer,c
 15936  001A90  0E00               	movlw	0
 15937  001A92  6E3C               	movwf	_processTimer+1,c
 15938  001A94  0E00               	movlw	0
 15939  001A96  6E3D               	movwf	_processTimer+2,c
 15940  001A98  0E00               	movlw	0
 15941  001A9A  6E3E               	movwf	_processTimer+3,c
 15942                           
 15943                           ; BSR set to: 0
 15944                           ;DisplayProtocol.h: 459: actualScreen = tempLastScreen;
 15945  001A9C  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 15946                           
 15947                           ; BSR set to: 0
 15948                           ;DisplayProtocol.h: 460: chanValf = (float)0.50f;;
 15949  001AA0  0E00               	movlw	0
 15950  001AA2  0101               	movlb	1	; () banked
 15951  001AA4  6FB1               	movwf	_chanValf& (0+255),b
 15952  001AA6  0E00               	movlw	0
 15953  001AA8  0101               	movlb	1	; () banked
 15954  001AAA  6FB2               	movwf	(_chanValf+1)& (0+255),b
 15955  001AAC  0E3F               	movlw	63
 15956  001AAE  0101               	movlb	1	; () banked
 15957  001AB0  6FB3               	movwf	(_chanValf+2)& (0+255),b
 15958                           
 15959                           ; BSR set to: 1
 15960                           ;DisplayProtocol.h: 461: desintegrator();
 15961  001AB2  ECE6  F019         	call	_desintegrator	;wreg free
 15962                           
 15963                           ;DisplayProtocol.h: 462: LATCbits.LATC4 = 1;
 15964  001AB6  888B               	bsf	3979,4,c	;volatile
 15965                           
 15966                           ;DisplayProtocol.h: 463: processStarted = 1;
 15967  001AB8  0E01               	movlw	1
 15968  001ABA  0100               	movlb	0	; () banked
 15969  001ABC  6FC0               	movwf	_processStarted& (0+255),b
 15970                           
 15971                           ;DisplayProtocol.h: 464: }else if(calibLevel == 1) {
 15972  001ABE  0012               	return	
 15973  001AC0                     l11556:
 15974  001AC0  0101               	movlb	1	; () banked
 15975  001AC2  05B8               	decf	_calibLevel& (0+255),w,b
 15976  001AC4  A4D8               	btfss	status,2,c
 15977  001AC6  D069               	goto	l11578
 15978                           
 15979                           ; BSR set to: 1
 15980                           ;DisplayProtocol.h: 465: tempVelocidadMasa2 = (float)chanValf / tiXcorte;
 15981  001AC8  C1B1  F112         	movff	_chanValf,___ftdiv@f1
 15982  001ACC  C1B2  F113         	movff	_chanValf+1,___ftdiv@f1+1
 15983  001AD0  C1B3  F114         	movff	_chanValf+2,___ftdiv@f1+2
 15984  001AD4  C195  F115         	movff	_tiXcorte,___ftdiv@f2
 15985  001AD8  C196  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 15986  001ADC  C197  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 15987  001AE0  EC7D  F01E         	call	___ftdiv	;wreg free
 15988  001AE4  C112  F19D         	movff	?___ftdiv,_tempVelocidadMasa2
 15989  001AE8  C113  F19E         	movff	?___ftdiv+1,_tempVelocidadMasa2+1
 15990  001AEC  C114  F19F         	movff	?___ftdiv+2,_tempVelocidadMasa2+2
 15991                           
 15992                           ;DisplayProtocol.h: 466: tiXcorte = (float)0.25f / tempVelocidadMasa2;
 15993  001AF0  0E00               	movlw	0
 15994  001AF2  0101               	movlb	1	; () banked
 15995  001AF4  6F12               	movwf	___ftdiv@f1& (0+255),b
 15996  001AF6  0E80               	movlw	128
 15997  001AF8  0101               	movlb	1	; () banked
 15998  001AFA  6F13               	movwf	(___ftdiv@f1+1)& (0+255),b
 15999  001AFC  0E3E               	movlw	62
 16000  001AFE  0101               	movlb	1	; () banked
 16001  001B00  6F14               	movwf	(___ftdiv@f1+2)& (0+255),b
 16002  001B02  C19D  F115         	movff	_tempVelocidadMasa2,___ftdiv@f2
 16003  001B06  C19E  F116         	movff	_tempVelocidadMasa2+1,___ftdiv@f2+1
 16004  001B0A  C19F  F117         	movff	_tempVelocidadMasa2+2,___ftdiv@f2+2
 16005  001B0E  EC7D  F01E         	call	___ftdiv	;wreg free
 16006  001B12  C112  F195         	movff	?___ftdiv,_tiXcorte
 16007  001B16  C113  F196         	movff	?___ftdiv+1,_tiXcorte+1
 16008  001B1A  C114  F197         	movff	?___ftdiv+2,_tiXcorte+2
 16009                           
 16010                           ;DisplayProtocol.h: 467: timsXcorte = (float)tiXcorte * 1000;
 16011  001B1E  C195  F114         	movff	_tiXcorte,___ftmul@f1
 16012  001B22  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 16013  001B26  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 16014  001B2A  0E00               	movlw	0
 16015  001B2C  0101               	movlb	1	; () banked
 16016  001B2E  6F17               	movwf	___ftmul@f2& (0+255),b
 16017  001B30  0E7A               	movlw	122
 16018  001B32  0101               	movlb	1	; () banked
 16019  001B34  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 16020  001B36  0E44               	movlw	68
 16021  001B38  0101               	movlb	1	; () banked
 16022  001B3A  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 16023  001B3C  EC1F  F01D         	call	___ftmul	;wreg free
 16024  001B40  C114  F053         	movff	?___ftmul,_timsXcorte
 16025  001B44  C115  F054         	movff	?___ftmul+1,_timsXcorte+1
 16026  001B48  C116  F055         	movff	?___ftmul+2,_timsXcorte+2
 16027                           
 16028                           ;DisplayProtocol.h: 468: calibLevel = 2;
 16029  001B4C  0E02               	movlw	2
 16030  001B4E  0101               	movlb	1	; () banked
 16031  001B50  6FB8               	movwf	_calibLevel& (0+255),b
 16032                           
 16033                           ; BSR set to: 1
 16034                           ;DisplayProtocol.h: 469: numCortes = 1;
 16035  001B52  0E00               	movlw	0
 16036  001B54  0100               	movlb	0	; () banked
 16037  001B56  6FD3               	movwf	(_numCortes+1)& (0+255),b
 16038  001B58  0E01               	movlw	1
 16039  001B5A  6FD2               	movwf	_numCortes& (0+255),b
 16040                           
 16041                           ; BSR set to: 0
 16042                           ;DisplayProtocol.h: 470: processState = 0;
 16043  001B5C  0E00               	movlw	0
 16044  001B5E  0100               	movlb	0	; () banked
 16045  001B60  6FB3               	movwf	(_processState+1)& (0+255),b
 16046  001B62  0E00               	movlw	0
 16047  001B64  6FB2               	movwf	_processState& (0+255),b
 16048                           
 16049                           ; BSR set to: 0
 16050                           ;DisplayProtocol.h: 471: processTimer = 0;
 16051  001B66  0E00               	movlw	0
 16052  001B68  6E3B               	movwf	_processTimer,c
 16053  001B6A  0E00               	movlw	0
 16054  001B6C  6E3C               	movwf	_processTimer+1,c
 16055  001B6E  0E00               	movlw	0
 16056  001B70  6E3D               	movwf	_processTimer+2,c
 16057  001B72  0E00               	movlw	0
 16058  001B74  6E3E               	movwf	_processTimer+3,c
 16059                           
 16060                           ; BSR set to: 0
 16061                           ;DisplayProtocol.h: 473: actualScreen = tempLastScreen;
 16062  001B76  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 16063                           
 16064                           ; BSR set to: 0
 16065                           ;DisplayProtocol.h: 474: chanValf = (float)0.25f;
 16066  001B7A  0E00               	movlw	0
 16067  001B7C  0101               	movlb	1	; () banked
 16068  001B7E  6FB1               	movwf	_chanValf& (0+255),b
 16069  001B80  0E80               	movlw	128
 16070  001B82  0101               	movlb	1	; () banked
 16071  001B84  6FB2               	movwf	(_chanValf+1)& (0+255),b
 16072  001B86  0E3E               	movlw	62
 16073  001B88  0101               	movlb	1	; () banked
 16074  001B8A  6FB3               	movwf	(_chanValf+2)& (0+255),b
 16075                           
 16076                           ; BSR set to: 1
 16077                           ;DisplayProtocol.h: 475: desintegrator();
 16078  001B8C  ECE6  F019         	call	_desintegrator	;wreg free
 16079                           
 16080                           ;DisplayProtocol.h: 476: LATCbits.LATC4 = 1;
 16081  001B90  888B               	bsf	3979,4,c	;volatile
 16082                           
 16083                           ;DisplayProtocol.h: 477: processStarted = 1;
 16084  001B92  0E01               	movlw	1
 16085  001B94  0100               	movlb	0	; () banked
 16086  001B96  6FC0               	movwf	_processStarted& (0+255),b
 16087                           
 16088                           ;DisplayProtocol.h: 478: }else if(calibLevel == 2) {
 16089  001B98  0012               	return	
 16090  001B9A                     l11578:
 16091  001B9A  0E02               	movlw	2
 16092  001B9C  0101               	movlb	1	; () banked
 16093  001B9E  19B8               	xorwf	_calibLevel& (0+255),w,b
 16094  001BA0  A4D8               	btfss	status,2,c
 16095  001BA2  0012               	return	
 16096                           
 16097                           ; BSR set to: 1
 16098                           ;DisplayProtocol.h: 479: tempVelocidadMasa3 = (float)chanValf / tiXcorte;
 16099  001BA4  C1B1  F112         	movff	_chanValf,___ftdiv@f1
 16100  001BA8  C1B2  F113         	movff	_chanValf+1,___ftdiv@f1+1
 16101  001BAC  C1B3  F114         	movff	_chanValf+2,___ftdiv@f1+2
 16102  001BB0  C195  F115         	movff	_tiXcorte,___ftdiv@f2
 16103  001BB4  C196  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 16104  001BB8  C197  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 16105  001BBC  EC7D  F01E         	call	___ftdiv	;wreg free
 16106  001BC0  C112  F192         	movff	?___ftdiv,_tempVelocidadMasa3
 16107  001BC4  C113  F193         	movff	?___ftdiv+1,_tempVelocidadMasa3+1
 16108  001BC8  C114  F194         	movff	?___ftdiv+2,_tempVelocidadMasa3+2
 16109                           
 16110                           ;DisplayProtocol.h: 480: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 16111  001BCC  C19D  F130         	movff	_tempVelocidadMasa2,___ftadd@f2
 16112  001BD0  C19E  F131         	movff	_tempVelocidadMasa2+1,___ftadd@f2+1
 16113  001BD4  C19F  F132         	movff	_tempVelocidadMasa2+2,___ftadd@f2+2
 16114  001BD8  C1A0  F12D         	movff	_tempVelocidadMasa1,___ftadd@f1
 16115  001BDC  C1A1  F12E         	movff	_tempVelocidadMasa1+1,___ftadd@f1+1
 16116  001BE0  C1A2  F12F         	movff	_tempVelocidadMasa1+2,___ftadd@f1+2
 16117  001BE4  ECEC  F013         	call	___ftadd	;wreg free
 16118  001BE8  C12D  F14F         	movff	?___ftadd,_longPressENTER$2826
 16119  001BEC  C12E  F150         	movff	?___ftadd+1,_longPressENTER$2826+1
 16120  001BF0  C12F  F151         	movff	?___ftadd+2,_longPressENTER$2826+2
 16121                           
 16122                           ;DisplayProtocol.h: 480: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 16123  001BF4  C14F  F12D         	movff	_longPressENTER$2826,___ftadd@f1
 16124  001BF8  C150  F12E         	movff	_longPressENTER$2826+1,___ftadd@f1+1
 16125  001BFC  C151  F12F         	movff	_longPressENTER$2826+2,___ftadd@f1+2
 16126  001C00  C192  F130         	movff	_tempVelocidadMasa3,___ftadd@f2
 16127  001C04  C193  F131         	movff	_tempVelocidadMasa3+1,___ftadd@f2+1
 16128  001C08  C194  F132         	movff	_tempVelocidadMasa3+2,___ftadd@f2+2
 16129  001C0C  ECEC  F013         	call	___ftadd	;wreg free
 16130  001C10  C12D  F14C         	movff	?___ftadd,longPressENTER@temp
 16131  001C14  C12E  F14D         	movff	?___ftadd+1,longPressENTER@temp+1
 16132  001C18  C12F  F14E         	movff	?___ftadd+2,longPressENTER@temp+2
 16133                           
 16134                           ;DisplayProtocol.h: 481: chanValf = (float)temp / 3.0f;
 16135  001C1C  C14C  F112         	movff	longPressENTER@temp,___ftdiv@f1
 16136  001C20  C14D  F113         	movff	longPressENTER@temp+1,___ftdiv@f1+1
 16137  001C24  C14E  F114         	movff	longPressENTER@temp+2,___ftdiv@f1+2
 16138  001C28  0E00               	movlw	0
 16139  001C2A  0101               	movlb	1	; () banked
 16140  001C2C  6F15               	movwf	___ftdiv@f2& (0+255),b
 16141  001C2E  0E40               	movlw	64
 16142  001C30  0101               	movlb	1	; () banked
 16143  001C32  6F16               	movwf	(___ftdiv@f2+1)& (0+255),b
 16144  001C34  0E40               	movlw	64
 16145  001C36  0101               	movlb	1	; () banked
 16146  001C38  6F17               	movwf	(___ftdiv@f2+2)& (0+255),b
 16147  001C3A  EC7D  F01E         	call	___ftdiv	;wreg free
 16148  001C3E  C112  F1B1         	movff	?___ftdiv,_chanValf
 16149  001C42  C113  F1B2         	movff	?___ftdiv+1,_chanValf+1
 16150  001C46  C114  F1B3         	movff	?___ftdiv+2,_chanValf+2
 16151                           
 16152                           ;DisplayProtocol.h: 482: numCortes = tempNumCortes;
 16153  001C4A  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 16154  001C4E  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 16155                           
 16156                           ;DisplayProtocol.h: 483: calcVars2ti();
 16157  001C52  EC01  F036         	call	_calcVars2ti	;wreg free
 16158                           
 16159                           ;DisplayProtocol.h: 484: calibMode = 0;
 16160  001C56  0E00               	movlw	0
 16161  001C58  0100               	movlb	0	; () banked
 16162  001C5A  6FBE               	movwf	_calibMode& (0+255),b
 16163                           
 16164                           ; BSR set to: 0
 16165                           ;DisplayProtocol.h: 485: confirmEdition(!processStarted);
 16166  001C5C  0100               	movlb	0	; () banked
 16167  001C5E  51C0               	movf	_processStarted& (0+255),w,b
 16168  001C60  A4D8               	btfss	status,2,c
 16169  001C62  D002               	goto	u17410
 16170  001C64  0E01               	movlw	1
 16171  001C66  D001               	goto	u17420
 16172  001C68                     u17410:
 16173  001C68  0E00               	movlw	0
 16174  001C6A                     u17420:
 16175  001C6A  ECE5  F02C         	call	_confirmEdition
 16176  001C6E  0012               	return	
 16177  001C70                     __end_of_longPressENTER:
 16178                           	opt stack 0
 16179                           tblptru	equ	0xFF8
 16180                           tblptrh	equ	0xFF7
 16181                           tblptrl	equ	0xFF6
 16182                           tablat	equ	0xFF5
 16183                           prodh	equ	0xFF4
 16184                           prodl	equ	0xFF3
 16185                           intcon	equ	0xFF2
 16186                           postinc0	equ	0xFEE
 16187                           wreg	equ	0xFE8
 16188                           postdec1	equ	0xFE5
 16189                           fsr1l	equ	0xFE1
 16190                           indf2	equ	0xFDF
 16191                           postinc2	equ	0xFDE
 16192                           postdec2	equ	0xFDD
 16193                           plusw2	equ	0xFDB
 16194                           fsr2h	equ	0xFDA
 16195                           fsr2l	equ	0xFD9
 16196                           status	equ	0xFD8
 16197                           
 16198 ;; *************** function _integrator *****************
 16199 ;; Defined at:
 16200 ;;		line 61 in file "source/DisplayProtocol.h"
 16201 ;; Parameters:    Size  Location     Type
 16202 ;;		None
 16203 ;; Auto vars:     Size  Location     Type
 16204 ;;  temp            4   39[BANK1 ] long 
 16205 ;;  acum            4   35[BANK1 ] long 
 16206 ;;  i               2   43[BANK1 ] int 
 16207 ;; Return value:  Size  Location     Type
 16208 ;;                  1    wreg      void 
 16209 ;; Registers used:
 16210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16211 ;; Tracked objects:
 16212 ;;		On entry : 0/0
 16213 ;;		On exit  : 0/0
 16214 ;;		Unchanged: 0/0
 16215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16216 ;;      Params:         0       0       0       0       0       0       0
 16217 ;;      Locals:         0       0      10       0       0       0       0
 16218 ;;      Temps:          0       0       2       0       0       0       0
 16219 ;;      Totals:         0       0      12       0       0       0       0
 16220 ;;Total ram usage:       12 bytes
 16221 ;; Hardware stack levels used:    1
 16222 ;; Hardware stack levels required when called:   14
 16223 ;; This function calls:
 16224 ;;		___altoft
 16225 ;;		___ftdiv
 16226 ;;		___lmul
 16227 ;; This function is called by:
 16228 ;;		_longPressENTER
 16229 ;; This function uses a non-reentrant model
 16230 ;;
 16231                           
 16232                           	psect	text63
 16233  00421A                     __ptext63:
 16234                           	opt stack 0
 16235  00421A                     _integrator:
 16236                           	opt stack 14
 16237                           
 16238                           ;DisplayProtocol.h: 62: long acum = 0;
 16239                           
 16240                           ;incstack = 0
 16241  00421A  0E00               	movlw	0
 16242  00421C  0101               	movlb	1	; () banked
 16243  00421E  6F23               	movwf	integrator@acum& (0+255),b
 16244  004220  0E00               	movlw	0
 16245  004222  6F24               	movwf	(integrator@acum+1)& (0+255),b
 16246  004224  0E00               	movlw	0
 16247  004226  6F25               	movwf	(integrator@acum+2)& (0+255),b
 16248  004228  0E00               	movlw	0
 16249  00422A  6F26               	movwf	(integrator@acum+3)& (0+255),b
 16250                           
 16251                           ;DisplayProtocol.h: 63: long temp = 0;
 16252  00422C  0E00               	movlw	0
 16253  00422E  0101               	movlb	1	; () banked
 16254  004230  6F27               	movwf	integrator@temp& (0+255),b
 16255  004232  0E00               	movlw	0
 16256  004234  6F28               	movwf	(integrator@temp+1)& (0+255),b
 16257  004236  0E00               	movlw	0
 16258  004238  6F29               	movwf	(integrator@temp+2)& (0+255),b
 16259  00423A  0E00               	movlw	0
 16260  00423C  6F2A               	movwf	(integrator@temp+3)& (0+255),b
 16261                           
 16262                           ;DisplayProtocol.h: 64: int i;
 16263                           ;DisplayProtocol.h: 65: for(i = 0; i < 6; i++) {
 16264  00423E  0E00               	movlw	0
 16265  004240  0101               	movlb	1	; () banked
 16266  004242  6F2C               	movwf	(integrator@i+1)& (0+255),b
 16267  004244  0E00               	movlw	0
 16268  004246  6F2B               	movwf	integrator@i& (0+255),b
 16269  004248                     l10832:
 16270                           
 16271                           ; BSR set to: 1
 16272  004248  0101               	movlb	1	; () banked
 16273  00424A  BF2C               	btfsc	(integrator@i+1)& (0+255),7,b
 16274  00424C  D008               	goto	l10836
 16275  00424E  0101               	movlb	1	; () banked
 16276  004250  512C               	movf	(integrator@i+1)& (0+255),w,b
 16277  004252  E152               	bnz	l10844
 16278  004254  0E06               	movlw	6
 16279  004256  0101               	movlb	1	; () banked
 16280  004258  5D2B               	subwf	integrator@i& (0+255),w,b
 16281  00425A  B0D8               	btfsc	status,0,c
 16282  00425C  D04D               	goto	l10844
 16283  00425E                     l10836:
 16284                           
 16285                           ; BSR set to: 1
 16286                           ;DisplayProtocol.h: 66: temp = (long)chanValdig[i]*exp10[i];
 16287  00425E  0EA3               	movlw	low _chanValdig
 16288  004260  0101               	movlb	1	; () banked
 16289  004262  252B               	addwf	integrator@i& (0+255),w,b
 16290  004264  6ED9               	movwf	fsr2l,c
 16291  004266  0E01               	movlw	high _chanValdig
 16292  004268  0101               	movlb	1	; () banked
 16293  00426A  212C               	addwfc	(integrator@i+1)& (0+255),w,b
 16294  00426C  6EDA               	movwf	fsr2h,c
 16295  00426E  50DF               	movf	indf2,w,c
 16296  004270  0101               	movlb	1	; () banked
 16297  004272  6F00               	movwf	___lmul@multiplier& (0+255),b
 16298  004274  0E00               	movlw	0
 16299  004276  BF00               	btfsc	___lmul@multiplier& (0+255),7,b
 16300  004278  0EFF               	movlw	-1
 16301  00427A  6F01               	movwf	(___lmul@multiplier+1)& (0+255),b
 16302  00427C  6F02               	movwf	(___lmul@multiplier+2)& (0+255),b
 16303  00427E  6F03               	movwf	(___lmul@multiplier+3)& (0+255),b
 16304  004280  0E77               	movlw	low _exp10
 16305  004282  0101               	movlb	1	; () banked
 16306  004284  6F21               	movwf	??_integrator& (0+255),b
 16307  004286  0E01               	movlw	high _exp10
 16308  004288  0101               	movlb	1	; () banked
 16309  00428A  6F22               	movwf	(??_integrator+1)& (0+255),b
 16310  00428C  90D8               	bcf	status,0,c
 16311  00428E  0101               	movlb	1	; () banked
 16312  004290  352B               	rlcf	integrator@i& (0+255),w,b
 16313  004292  6ED9               	movwf	fsr2l,c
 16314  004294  0101               	movlb	1	; () banked
 16315  004296  352C               	rlcf	(integrator@i+1)& (0+255),w,b
 16316  004298  6EDA               	movwf	fsr2h,c
 16317  00429A  90D8               	bcf	status,0,c
 16318  00429C  36D9               	rlcf	fsr2l,f,c
 16319  00429E  36DA               	rlcf	fsr2h,f,c
 16320  0042A0  0101               	movlb	1	; () banked
 16321  0042A2  5121               	movf	??_integrator& (0+255),w,b
 16322  0042A4  26D9               	addwf	fsr2l,f,c
 16323  0042A6  0101               	movlb	1	; () banked
 16324  0042A8  5122               	movf	(??_integrator+1)& (0+255),w,b
 16325  0042AA  22DA               	addwfc	fsr2h,f,c
 16326  0042AC  CFDE F104          	movff	postinc2,___lmul@multiplicand
 16327  0042B0  CFDE F105          	movff	postinc2,___lmul@multiplicand+1
 16328  0042B4  CFDE F106          	movff	postinc2,___lmul@multiplicand+2
 16329  0042B8  CFDE F107          	movff	postinc2,___lmul@multiplicand+3
 16330  0042BC  EC07  F034         	call	___lmul	;wreg free
 16331  0042C0  C100  F127         	movff	?___lmul,integrator@temp
 16332  0042C4  C101  F128         	movff	?___lmul+1,integrator@temp+1
 16333  0042C8  C102  F129         	movff	?___lmul+2,integrator@temp+2
 16334  0042CC  C103  F12A         	movff	?___lmul+3,integrator@temp+3
 16335                           
 16336                           ;DisplayProtocol.h: 67: acum += temp;
 16337  0042D0  0101               	movlb	1	; () banked
 16338  0042D2  5127               	movf	integrator@temp& (0+255),w,b
 16339  0042D4  0101               	movlb	1	; () banked
 16340  0042D6  2723               	addwf	integrator@acum& (0+255),f,b
 16341  0042D8  0101               	movlb	1	; () banked
 16342  0042DA  5128               	movf	(integrator@temp+1)& (0+255),w,b
 16343  0042DC  0101               	movlb	1	; () banked
 16344  0042DE  2324               	addwfc	(integrator@acum+1)& (0+255),f,b
 16345  0042E0  0101               	movlb	1	; () banked
 16346  0042E2  5129               	movf	(integrator@temp+2)& (0+255),w,b
 16347  0042E4  0101               	movlb	1	; () banked
 16348  0042E6  2325               	addwfc	(integrator@acum+2)& (0+255),f,b
 16349  0042E8  0101               	movlb	1	; () banked
 16350  0042EA  512A               	movf	(integrator@temp+3)& (0+255),w,b
 16351  0042EC  0101               	movlb	1	; () banked
 16352  0042EE  2326               	addwfc	(integrator@acum+3)& (0+255),f,b
 16353                           
 16354                           ; BSR set to: 1
 16355  0042F0  0101               	movlb	1	; () banked
 16356  0042F2  4B2B               	infsnz	integrator@i& (0+255),f,b
 16357  0042F4  2B2C               	incf	(integrator@i+1)& (0+255),f,b
 16358  0042F6  D7A8               	goto	l10832
 16359  0042F8                     l10844:
 16360                           
 16361                           ; BSR set to: 1
 16362                           ;DisplayProtocol.h: 68: }
 16363                           ;DisplayProtocol.h: 69: chanValf = (float)acum / 1000;
 16364  0042F8  C123  F108         	movff	integrator@acum,___altoft@c
 16365  0042FC  C124  F109         	movff	integrator@acum+1,___altoft@c+1
 16366  004300  C125  F10A         	movff	integrator@acum+2,___altoft@c+2
 16367  004304  C126  F10B         	movff	integrator@acum+3,___altoft@c+3
 16368  004308  EC99  F02E         	call	___altoft	;wreg free
 16369  00430C  C108  F112         	movff	?___altoft,___ftdiv@f1
 16370  004310  C109  F113         	movff	?___altoft+1,___ftdiv@f1+1
 16371  004314  C10A  F114         	movff	?___altoft+2,___ftdiv@f1+2
 16372  004318  0E00               	movlw	0
 16373  00431A  0101               	movlb	1	; () banked
 16374  00431C  6F15               	movwf	___ftdiv@f2& (0+255),b
 16375  00431E  0E7A               	movlw	122
 16376  004320  0101               	movlb	1	; () banked
 16377  004322  6F16               	movwf	(___ftdiv@f2+1)& (0+255),b
 16378  004324  0E44               	movlw	68
 16379  004326  0101               	movlb	1	; () banked
 16380  004328  6F17               	movwf	(___ftdiv@f2+2)& (0+255),b
 16381  00432A  EC7D  F01E         	call	___ftdiv	;wreg free
 16382  00432E  C112  F1B1         	movff	?___ftdiv,_chanValf
 16383  004332  C113  F1B2         	movff	?___ftdiv+1,_chanValf+1
 16384  004336  C114  F1B3         	movff	?___ftdiv+2,_chanValf+2
 16385  00433A  0012               	return		;funcret
 16386  00433C                     __end_of_integrator:
 16387                           	opt stack 0
 16388                           tblptru	equ	0xFF8
 16389                           tblptrh	equ	0xFF7
 16390                           tblptrl	equ	0xFF6
 16391                           tablat	equ	0xFF5
 16392                           prodh	equ	0xFF4
 16393                           prodl	equ	0xFF3
 16394                           intcon	equ	0xFF2
 16395                           postinc0	equ	0xFEE
 16396                           wreg	equ	0xFE8
 16397                           postdec1	equ	0xFE5
 16398                           fsr1l	equ	0xFE1
 16399                           indf2	equ	0xFDF
 16400                           postinc2	equ	0xFDE
 16401                           postdec2	equ	0xFDD
 16402                           plusw2	equ	0xFDB
 16403                           fsr2h	equ	0xFDA
 16404                           fsr2l	equ	0xFD9
 16405                           status	equ	0xFD8
 16406                           
 16407 ;; *************** function ___altoft *****************
 16408 ;; Defined at:
 16409 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\altoft.c"
 16410 ;; Parameters:    Size  Location     Type
 16411 ;;  c               4    8[BANK1 ] long 
 16412 ;; Auto vars:     Size  Location     Type
 16413 ;;  sign            1   17[BANK1 ] unsigned char 
 16414 ;;  exp             1   16[BANK1 ] unsigned char 
 16415 ;; Return value:  Size  Location     Type
 16416 ;;                  3    8[BANK1 ] float 
 16417 ;; Registers used:
 16418 ;;		wreg, status,2, status,0, cstack
 16419 ;; Tracked objects:
 16420 ;;		On entry : 0/0
 16421 ;;		On exit  : 0/0
 16422 ;;		Unchanged: 0/0
 16423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16424 ;;      Params:         0       0       4       0       0       0       0
 16425 ;;      Locals:         0       0       2       0       0       0       0
 16426 ;;      Temps:          0       0       4       0       0       0       0
 16427 ;;      Totals:         0       0      10       0       0       0       0
 16428 ;;Total ram usage:       10 bytes
 16429 ;; Hardware stack levels used:    1
 16430 ;; Hardware stack levels required when called:   13
 16431 ;; This function calls:
 16432 ;;		___ftpack
 16433 ;; This function is called by:
 16434 ;;		_integrator
 16435 ;; This function uses a non-reentrant model
 16436 ;;
 16437                           
 16438                           	psect	text64
 16439  005D32                     __ptext64:
 16440                           	opt stack 0
 16441  005D32                     ___altoft:
 16442                           	opt stack 14
 16443                           
 16444                           ;incstack = 0
 16445  005D32  0E00               	movlw	0
 16446  005D34  0101               	movlb	1	; () banked
 16447  005D36  6F11               	movwf	___altoft@sign& (0+255),b
 16448  005D38  0E8E               	movlw	142
 16449  005D3A  0101               	movlb	1	; () banked
 16450  005D3C  6F10               	movwf	___altoft@exp& (0+255),b
 16451                           
 16452                           ; BSR set to: 1
 16453  005D3E  0101               	movlb	1	; () banked
 16454  005D40  AF0B               	btfss	(___altoft@c+3)& (0+255),7,b
 16455  005D42  D015               	goto	l10720
 16456                           
 16457                           ; BSR set to: 1
 16458  005D44  0101               	movlb	1	; () banked
 16459  005D46  1F0B               	comf	(___altoft@c+3)& (0+255),f,b
 16460  005D48  1F0A               	comf	(___altoft@c+2)& (0+255),f,b
 16461  005D4A  1F09               	comf	(___altoft@c+1)& (0+255),f,b
 16462  005D4C  6D08               	negf	___altoft@c& (0+255),b
 16463  005D4E  0E00               	movlw	0
 16464  005D50  2309               	addwfc	(___altoft@c+1)& (0+255),f,b
 16465  005D52  230A               	addwfc	(___altoft@c+2)& (0+255),f,b
 16466  005D54  230B               	addwfc	(___altoft@c+3)& (0+255),f,b
 16467                           
 16468                           ; BSR set to: 1
 16469  005D56  0E01               	movlw	1
 16470  005D58  0101               	movlb	1	; () banked
 16471  005D5A  6F11               	movwf	___altoft@sign& (0+255),b
 16472                           
 16473                           ; BSR set to: 1
 16474  005D5C  D008               	goto	l10720
 16475  005D5E                     l10718:
 16476                           
 16477                           ; BSR set to: 1
 16478  005D5E  0101               	movlb	1	; () banked
 16479  005D60  90D8               	bcf	status,0,c
 16480  005D62  330B               	rrcf	(___altoft@c+3)& (0+255),f,b
 16481  005D64  330A               	rrcf	(___altoft@c+2)& (0+255),f,b
 16482  005D66  3309               	rrcf	(___altoft@c+1)& (0+255),f,b
 16483  005D68  3308               	rrcf	___altoft@c& (0+255),f,b
 16484  005D6A  0101               	movlb	1	; () banked
 16485  005D6C  2B10               	incf	___altoft@exp& (0+255),f,b
 16486  005D6E                     l10720:
 16487                           
 16488                           ; BSR set to: 1
 16489  005D6E  0E00               	movlw	0
 16490  005D70  0101               	movlb	1	; () banked
 16491  005D72  1508               	andwf	___altoft@c& (0+255),w,b
 16492  005D74  0101               	movlb	1	; () banked
 16493  005D76  6F0C               	movwf	??___altoft& (0+255),b
 16494  005D78  0E00               	movlw	0
 16495  005D7A  0101               	movlb	1	; () banked
 16496  005D7C  1509               	andwf	(___altoft@c+1)& (0+255),w,b
 16497  005D7E  0101               	movlb	1	; () banked
 16498  005D80  6F0D               	movwf	(??___altoft+1)& (0+255),b
 16499  005D82  0E00               	movlw	0
 16500  005D84  0101               	movlb	1	; () banked
 16501  005D86  150A               	andwf	(___altoft@c+2)& (0+255),w,b
 16502  005D88  0101               	movlb	1	; () banked
 16503  005D8A  6F0E               	movwf	(??___altoft+2)& (0+255),b
 16504  005D8C  0EFF               	movlw	255
 16505  005D8E  0101               	movlb	1	; () banked
 16506  005D90  150B               	andwf	(___altoft@c+3)& (0+255),w,b
 16507  005D92  0101               	movlb	1	; () banked
 16508  005D94  6F0F               	movwf	(??___altoft+3)& (0+255),b
 16509  005D96  0101               	movlb	1	; () banked
 16510  005D98  510C               	movf	??___altoft& (0+255),w,b
 16511  005D9A  0101               	movlb	1	; () banked
 16512  005D9C  110D               	iorwf	(??___altoft+1)& (0+255),w,b
 16513  005D9E  0101               	movlb	1	; () banked
 16514  005DA0  110E               	iorwf	(??___altoft+2)& (0+255),w,b
 16515  005DA2  0101               	movlb	1	; () banked
 16516  005DA4  110F               	iorwf	(??___altoft+3)& (0+255),w,b
 16517  005DA6  A4D8               	btfss	status,2,c
 16518  005DA8  D7DA               	goto	l10718
 16519                           
 16520                           ; BSR set to: 1
 16521                           
 16522                           ; BSR set to: 1
 16523  005DAA  C108  F100         	movff	___altoft@c,___ftpack@arg
 16524  005DAE  C109  F101         	movff	___altoft@c+1,___ftpack@arg+1
 16525  005DB2  C10A  F102         	movff	___altoft@c+2,___ftpack@arg+2
 16526  005DB6  C110  F103         	movff	___altoft@exp,___ftpack@exp
 16527  005DBA  C111  F104         	movff	___altoft@sign,___ftpack@sign
 16528  005DBE  EC69  F025         	call	___ftpack	;wreg free
 16529  005DC2  C100  F108         	movff	?___ftpack,?___altoft
 16530  005DC6  C101  F109         	movff	?___ftpack+1,?___altoft+1
 16531  005DCA  C102  F10A         	movff	?___ftpack+2,?___altoft+2
 16532  005DCE  0012               	return	
 16533  005DD0                     __end_of___altoft:
 16534                           	opt stack 0
 16535                           tblptru	equ	0xFF8
 16536                           tblptrh	equ	0xFF7
 16537                           tblptrl	equ	0xFF6
 16538                           tablat	equ	0xFF5
 16539                           prodh	equ	0xFF4
 16540                           prodl	equ	0xFF3
 16541                           intcon	equ	0xFF2
 16542                           postinc0	equ	0xFEE
 16543                           wreg	equ	0xFE8
 16544                           postdec1	equ	0xFE5
 16545                           fsr1l	equ	0xFE1
 16546                           indf2	equ	0xFDF
 16547                           postinc2	equ	0xFDE
 16548                           postdec2	equ	0xFDD
 16549                           plusw2	equ	0xFDB
 16550                           fsr2h	equ	0xFDA
 16551                           fsr2l	equ	0xFD9
 16552                           status	equ	0xFD8
 16553                           
 16554 ;; *************** function _desintegrator *****************
 16555 ;; Defined at:
 16556 ;;		line 46 in file "source/DisplayProtocol.h"
 16557 ;; Parameters:    Size  Location     Type
 16558 ;;		None
 16559 ;; Auto vars:     Size  Location     Type
 16560 ;;  temp2           4   70[BANK1 ] long 
 16561 ;;  temp3           4   66[BANK1 ] long 
 16562 ;;  tempL           4   62[BANK1 ] long 
 16563 ;;  temp            3   59[BANK1 ] float 
 16564 ;;  i               2   74[BANK1 ] int 
 16565 ;; Return value:  Size  Location     Type
 16566 ;;                  1    wreg      void 
 16567 ;; Registers used:
 16568 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16569 ;; Tracked objects:
 16570 ;;		On entry : 0/0
 16571 ;;		On exit  : 0/0
 16572 ;;		Unchanged: 0/0
 16573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16574 ;;      Params:         0       0       0       0       0       0       0
 16575 ;;      Locals:         0       0      17       0       0       0       0
 16576 ;;      Temps:          0       0       2       0       0       0       0
 16577 ;;      Totals:         0       0      19       0       0       0       0
 16578 ;;Total ram usage:       19 bytes
 16579 ;; Hardware stack levels used:    1
 16580 ;; Hardware stack levels required when called:   14
 16581 ;; This function calls:
 16582 ;;		___aldiv
 16583 ;;		___ftmul
 16584 ;;		___fttol
 16585 ;;		___lmul
 16586 ;; This function is called by:
 16587 ;;		_pressENTER
 16588 ;;		_longPressENTER
 16589 ;; This function uses a non-reentrant model
 16590 ;;
 16591                           
 16592                           	psect	text65
 16593  0033CC                     __ptext65:
 16594                           	opt stack 0
 16595  0033CC                     _desintegrator:
 16596                           	opt stack 14
 16597                           
 16598                           ;DisplayProtocol.h: 47: chanValSection = 5;
 16599                           
 16600                           ;incstack = 0
 16601  0033CC  0E05               	movlw	5
 16602  0033CE  0101               	movlb	1	; () banked
 16603  0033D0  6F9C               	movwf	_chanValSection& (0+255),b
 16604                           
 16605                           ; BSR set to: 1
 16606                           ;DisplayProtocol.h: 48: float temp = (float)chanValf*1000;
 16607  0033D2  C1B1  F114         	movff	_chanValf,___ftmul@f1
 16608  0033D6  C1B2  F115         	movff	_chanValf+1,___ftmul@f1+1
 16609  0033DA  C1B3  F116         	movff	_chanValf+2,___ftmul@f1+2
 16610  0033DE  0E00               	movlw	0
 16611  0033E0  0101               	movlb	1	; () banked
 16612  0033E2  6F17               	movwf	___ftmul@f2& (0+255),b
 16613  0033E4  0E7A               	movlw	122
 16614  0033E6  0101               	movlb	1	; () banked
 16615  0033E8  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 16616  0033EA  0E44               	movlw	68
 16617  0033EC  0101               	movlb	1	; () banked
 16618  0033EE  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 16619  0033F0  EC1F  F01D         	call	___ftmul	;wreg free
 16620  0033F4  C114  F13B         	movff	?___ftmul,desintegrator@temp
 16621  0033F8  C115  F13C         	movff	?___ftmul+1,desintegrator@temp+1
 16622  0033FC  C116  F13D         	movff	?___ftmul+2,desintegrator@temp+2
 16623                           
 16624                           ;DisplayProtocol.h: 49: long tempL = (long)temp;
 16625  003400  C13B  F12A         	movff	desintegrator@temp,___fttol@f1
 16626  003404  C13C  F12B         	movff	desintegrator@temp+1,___fttol@f1+1
 16627  003408  C13D  F12C         	movff	desintegrator@temp+2,___fttol@f1+2
 16628  00340C  ECC9  F01F         	call	___fttol	;wreg free
 16629  003410  C12A  F13E         	movff	?___fttol,desintegrator@tempL
 16630  003414  C12B  F13F         	movff	?___fttol+1,desintegrator@tempL+1
 16631  003418  C12C  F140         	movff	?___fttol+2,desintegrator@tempL+2
 16632  00341C  C12D  F141         	movff	?___fttol+3,desintegrator@tempL+3
 16633                           
 16634                           ;DisplayProtocol.h: 50: long temp2 = 0;
 16635  003420  0E00               	movlw	0
 16636  003422  0101               	movlb	1	; () banked
 16637  003424  6F46               	movwf	desintegrator@temp2& (0+255),b
 16638  003426  0E00               	movlw	0
 16639  003428  6F47               	movwf	(desintegrator@temp2+1)& (0+255),b
 16640  00342A  0E00               	movlw	0
 16641  00342C  6F48               	movwf	(desintegrator@temp2+2)& (0+255),b
 16642  00342E  0E00               	movlw	0
 16643  003430  6F49               	movwf	(desintegrator@temp2+3)& (0+255),b
 16644                           
 16645                           ;DisplayProtocol.h: 51: long temp3 = 0;
 16646  003432  0E00               	movlw	0
 16647  003434  0101               	movlb	1	; () banked
 16648  003436  6F42               	movwf	desintegrator@temp3& (0+255),b
 16649  003438  0E00               	movlw	0
 16650  00343A  6F43               	movwf	(desintegrator@temp3+1)& (0+255),b
 16651  00343C  0E00               	movlw	0
 16652  00343E  6F44               	movwf	(desintegrator@temp3+2)& (0+255),b
 16653  003440  0E00               	movlw	0
 16654  003442  6F45               	movwf	(desintegrator@temp3+3)& (0+255),b
 16655                           
 16656                           ;DisplayProtocol.h: 52: int i;
 16657                           ;DisplayProtocol.h: 53: for(i = 0; i < 6; i++) {
 16658  003444  0E00               	movlw	0
 16659  003446  0101               	movlb	1	; () banked
 16660  003448  6F4B               	movwf	(desintegrator@i+1)& (0+255),b
 16661  00344A  0E00               	movlw	0
 16662  00344C  6F4A               	movwf	desintegrator@i& (0+255),b
 16663                           
 16664                           ; BSR set to: 1
 16665  00344E  0101               	movlb	1	; () banked
 16666  003450  BF4B               	btfsc	(desintegrator@i+1)& (0+255),7,b
 16667  003452  D00A               	goto	l10820
 16668  003454  0101               	movlb	1	; () banked
 16669  003456  514B               	movf	(desintegrator@i+1)& (0+255),w,b
 16670  003458  E106               	bnz	u15980
 16671  00345A  0E06               	movlw	6
 16672  00345C  0101               	movlb	1	; () banked
 16673  00345E  5D4A               	subwf	desintegrator@i& (0+255),w,b
 16674  003460  B0D8               	btfsc	status,0,c
 16675  003462  0012               	return	
 16676  003464  D001               	goto	l10820
 16677  003466                     u15980:
 16678                           
 16679                           ; BSR set to: 1
 16680  003466  0012               	return	
 16681  003468                     l10820:
 16682                           
 16683                           ; BSR set to: 1
 16684                           ;DisplayProtocol.h: 54: temp2 = tempL/exp10[i];
 16685  003468  C13E  F100         	movff	desintegrator@tempL,___aldiv@dividend
 16686  00346C  C13F  F101         	movff	desintegrator@tempL+1,___aldiv@dividend+1
 16687  003470  C140  F102         	movff	desintegrator@tempL+2,___aldiv@dividend+2
 16688  003474  C141  F103         	movff	desintegrator@tempL+3,___aldiv@dividend+3
 16689  003478  0E77               	movlw	low _exp10
 16690  00347A  0101               	movlb	1	; () banked
 16691  00347C  6F39               	movwf	??_desintegrator& (0+255),b
 16692  00347E  0E01               	movlw	high _exp10
 16693  003480  0101               	movlb	1	; () banked
 16694  003482  6F3A               	movwf	(??_desintegrator+1)& (0+255),b
 16695  003484  90D8               	bcf	status,0,c
 16696  003486  0101               	movlb	1	; () banked
 16697  003488  354A               	rlcf	desintegrator@i& (0+255),w,b
 16698  00348A  6ED9               	movwf	fsr2l,c
 16699  00348C  0101               	movlb	1	; () banked
 16700  00348E  354B               	rlcf	(desintegrator@i+1)& (0+255),w,b
 16701  003490  6EDA               	movwf	fsr2h,c
 16702  003492  90D8               	bcf	status,0,c
 16703  003494  36D9               	rlcf	fsr2l,f,c
 16704  003496  36DA               	rlcf	fsr2h,f,c
 16705  003498  0101               	movlb	1	; () banked
 16706  00349A  5139               	movf	??_desintegrator& (0+255),w,b
 16707  00349C  26D9               	addwf	fsr2l,f,c
 16708  00349E  0101               	movlb	1	; () banked
 16709  0034A0  513A               	movf	(??_desintegrator+1)& (0+255),w,b
 16710  0034A2  22DA               	addwfc	fsr2h,f,c
 16711  0034A4  CFDE F104          	movff	postinc2,___aldiv@divisor
 16712  0034A8  CFDE F105          	movff	postinc2,___aldiv@divisor+1
 16713  0034AC  CFDE F106          	movff	postinc2,___aldiv@divisor+2
 16714  0034B0  CFDE F107          	movff	postinc2,___aldiv@divisor+3
 16715  0034B4  EC2F  F022         	call	___aldiv	;wreg free
 16716  0034B8  C100  F146         	movff	?___aldiv,desintegrator@temp2
 16717  0034BC  C101  F147         	movff	?___aldiv+1,desintegrator@temp2+1
 16718  0034C0  C102  F148         	movff	?___aldiv+2,desintegrator@temp2+2
 16719  0034C4  C103  F149         	movff	?___aldiv+3,desintegrator@temp2+3
 16720                           
 16721                           ;DisplayProtocol.h: 55: temp3 = temp2*exp10[i];
 16722  0034C8  0E77               	movlw	low _exp10
 16723  0034CA  0101               	movlb	1	; () banked
 16724  0034CC  6F39               	movwf	??_desintegrator& (0+255),b
 16725  0034CE  0E01               	movlw	high _exp10
 16726  0034D0  0101               	movlb	1	; () banked
 16727  0034D2  6F3A               	movwf	(??_desintegrator+1)& (0+255),b
 16728  0034D4  90D8               	bcf	status,0,c
 16729  0034D6  0101               	movlb	1	; () banked
 16730  0034D8  354A               	rlcf	desintegrator@i& (0+255),w,b
 16731  0034DA  6ED9               	movwf	fsr2l,c
 16732  0034DC  0101               	movlb	1	; () banked
 16733  0034DE  354B               	rlcf	(desintegrator@i+1)& (0+255),w,b
 16734  0034E0  6EDA               	movwf	fsr2h,c
 16735  0034E2  90D8               	bcf	status,0,c
 16736  0034E4  36D9               	rlcf	fsr2l,f,c
 16737  0034E6  36DA               	rlcf	fsr2h,f,c
 16738  0034E8  0101               	movlb	1	; () banked
 16739  0034EA  5139               	movf	??_desintegrator& (0+255),w,b
 16740  0034EC  26D9               	addwf	fsr2l,f,c
 16741  0034EE  0101               	movlb	1	; () banked
 16742  0034F0  513A               	movf	(??_desintegrator+1)& (0+255),w,b
 16743  0034F2  22DA               	addwfc	fsr2h,f,c
 16744  0034F4  CFDE F100          	movff	postinc2,___lmul@multiplier
 16745  0034F8  CFDE F101          	movff	postinc2,___lmul@multiplier+1
 16746  0034FC  CFDE F102          	movff	postinc2,___lmul@multiplier+2
 16747  003500  CFDE F103          	movff	postinc2,___lmul@multiplier+3
 16748  003504  C146  F104         	movff	desintegrator@temp2,___lmul@multiplicand
 16749  003508  C147  F105         	movff	desintegrator@temp2+1,___lmul@multiplicand+1
 16750  00350C  C148  F106         	movff	desintegrator@temp2+2,___lmul@multiplicand+2
 16751  003510  C149  F107         	movff	desintegrator@temp2+3,___lmul@multiplicand+3
 16752  003514  EC07  F034         	call	___lmul	;wreg free
 16753  003518  C100  F142         	movff	?___lmul,desintegrator@temp3
 16754  00351C  C101  F143         	movff	?___lmul+1,desintegrator@temp3+1
 16755  003520  C102  F144         	movff	?___lmul+2,desintegrator@temp3+2
 16756  003524  C103  F145         	movff	?___lmul+3,desintegrator@temp3+3
 16757                           
 16758                           ;DisplayProtocol.h: 56: chanValdig[i] = temp2;
 16759  003528  0EA3               	movlw	low _chanValdig
 16760  00352A  0101               	movlb	1	; () banked
 16761  00352C  254A               	addwf	desintegrator@i& (0+255),w,b
 16762  00352E  6ED9               	movwf	fsr2l,c
 16763  003530  0E01               	movlw	high _chanValdig
 16764  003532  0101               	movlb	1	; () banked
 16765  003534  214B               	addwfc	(desintegrator@i+1)& (0+255),w,b
 16766  003536  6EDA               	movwf	fsr2h,c
 16767  003538  C146  FFDF         	movff	desintegrator@temp2,indf2
 16768                           
 16769                           ; BSR set to: 1
 16770                           ;DisplayProtocol.h: 57: tempL -= temp3;
 16771  00353C  0101               	movlb	1	; () banked
 16772  00353E  5142               	movf	desintegrator@temp3& (0+255),w,b
 16773  003540  0101               	movlb	1	; () banked
 16774  003542  5F3E               	subwf	desintegrator@tempL& (0+255),f,b
 16775  003544  0101               	movlb	1	; () banked
 16776  003546  5143               	movf	(desintegrator@temp3+1)& (0+255),w,b
 16777  003548  0101               	movlb	1	; () banked
 16778  00354A  5B3F               	subwfb	(desintegrator@tempL+1)& (0+255),f,b
 16779  00354C  0101               	movlb	1	; () banked
 16780  00354E  5144               	movf	(desintegrator@temp3+2)& (0+255),w,b
 16781  003550  0101               	movlb	1	; () banked
 16782  003552  5B40               	subwfb	(desintegrator@tempL+2)& (0+255),f,b
 16783  003554  0101               	movlb	1	; () banked
 16784  003556  5145               	movf	(desintegrator@temp3+3)& (0+255),w,b
 16785  003558  0101               	movlb	1	; () banked
 16786  00355A  5B41               	subwfb	(desintegrator@tempL+3)& (0+255),f,b
 16787                           
 16788                           ; BSR set to: 1
 16789  00355C  0101               	movlb	1	; () banked
 16790  00355E  4B4A               	infsnz	desintegrator@i& (0+255),f,b
 16791  003560  2B4B               	incf	(desintegrator@i+1)& (0+255),f,b
 16792                           
 16793                           ; BSR set to: 1
 16794  003562  0101               	movlb	1	; () banked
 16795  003564  BF4B               	btfsc	(desintegrator@i+1)& (0+255),7,b
 16796  003566  D780               	goto	l10820
 16797  003568  0101               	movlb	1	; () banked
 16798  00356A  514B               	movf	(desintegrator@i+1)& (0+255),w,b
 16799  00356C  E101               	bnz	l559
 16800  00356E  D775               	goto	L6
 16801  003570                     l559:
 16802                           
 16803                           ; BSR set to: 1
 16804  003570  0012               	return		;funcret
 16805  003572                     __end_of_desintegrator:
 16806                           	opt stack 0
 16807                           tblptru	equ	0xFF8
 16808                           tblptrh	equ	0xFF7
 16809                           tblptrl	equ	0xFF6
 16810                           tablat	equ	0xFF5
 16811                           prodh	equ	0xFF4
 16812                           prodl	equ	0xFF3
 16813                           intcon	equ	0xFF2
 16814                           postinc0	equ	0xFEE
 16815                           wreg	equ	0xFE8
 16816                           postdec1	equ	0xFE5
 16817                           fsr1l	equ	0xFE1
 16818                           indf2	equ	0xFDF
 16819                           postinc2	equ	0xFDE
 16820                           postdec2	equ	0xFDD
 16821                           plusw2	equ	0xFDB
 16822                           fsr2h	equ	0xFDA
 16823                           fsr2l	equ	0xFD9
 16824                           status	equ	0xFD8
 16825                           
 16826 ;; *************** function ___lmul *****************
 16827 ;; Defined at:
 16828 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
 16829 ;; Parameters:    Size  Location     Type
 16830 ;;  multiplier      4    0[BANK1 ] unsigned long 
 16831 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 16832 ;; Auto vars:     Size  Location     Type
 16833 ;;  product         4    8[BANK1 ] unsigned long 
 16834 ;; Return value:  Size  Location     Type
 16835 ;;                  4    0[BANK1 ] unsigned long 
 16836 ;; Registers used:
 16837 ;;		wreg, status,2, status,0
 16838 ;; Tracked objects:
 16839 ;;		On entry : 0/0
 16840 ;;		On exit  : 0/0
 16841 ;;		Unchanged: 0/0
 16842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16843 ;;      Params:         0       0       8       0       0       0       0
 16844 ;;      Locals:         0       0       4       0       0       0       0
 16845 ;;      Temps:          0       0       0       0       0       0       0
 16846 ;;      Totals:         0       0      12       0       0       0       0
 16847 ;;Total ram usage:       12 bytes
 16848 ;; Hardware stack levels used:    1
 16849 ;; Hardware stack levels required when called:   12
 16850 ;; This function calls:
 16851 ;;		Nothing
 16852 ;; This function is called by:
 16853 ;;		_desintegrator
 16854 ;;		_integrator
 16855 ;; This function uses a non-reentrant model
 16856 ;;
 16857                           
 16858                           	psect	text66
 16859  00680E                     __ptext66:
 16860                           	opt stack 0
 16861  00680E                     ___lmul:
 16862                           	opt stack 15
 16863                           
 16864                           ; BSR set to: 1
 16865                           ;incstack = 0
 16866  00680E  0E00               	movlw	0
 16867  006810  0101               	movlb	1	; () banked
 16868  006812  6F08               	movwf	___lmul@product& (0+255),b
 16869  006814  0E00               	movlw	0
 16870  006816  6F09               	movwf	(___lmul@product+1)& (0+255),b
 16871  006818  0E00               	movlw	0
 16872  00681A  6F0A               	movwf	(___lmul@product+2)& (0+255),b
 16873  00681C  0E00               	movlw	0
 16874  00681E  6F0B               	movwf	(___lmul@product+3)& (0+255),b
 16875  006820                     l10658:
 16876                           
 16877                           ; BSR set to: 1
 16878  006820  0101               	movlb	1	; () banked
 16879  006822  A100               	btfss	___lmul@multiplier& (0+255),0,b
 16880  006824  D010               	goto	l10662
 16881                           
 16882                           ; BSR set to: 1
 16883  006826  0101               	movlb	1	; () banked
 16884  006828  5104               	movf	___lmul@multiplicand& (0+255),w,b
 16885  00682A  0101               	movlb	1	; () banked
 16886  00682C  2708               	addwf	___lmul@product& (0+255),f,b
 16887  00682E  0101               	movlb	1	; () banked
 16888  006830  5105               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 16889  006832  0101               	movlb	1	; () banked
 16890  006834  2309               	addwfc	(___lmul@product+1)& (0+255),f,b
 16891  006836  0101               	movlb	1	; () banked
 16892  006838  5106               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 16893  00683A  0101               	movlb	1	; () banked
 16894  00683C  230A               	addwfc	(___lmul@product+2)& (0+255),f,b
 16895  00683E  0101               	movlb	1	; () banked
 16896  006840  5107               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 16897  006842  0101               	movlb	1	; () banked
 16898  006844  230B               	addwfc	(___lmul@product+3)& (0+255),f,b
 16899  006846                     l10662:
 16900                           
 16901                           ; BSR set to: 1
 16902  006846  0101               	movlb	1	; () banked
 16903  006848  90D8               	bcf	status,0,c
 16904  00684A  3704               	rlcf	___lmul@multiplicand& (0+255),f,b
 16905  00684C  3705               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 16906  00684E  3706               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 16907  006850  3707               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 16908                           
 16909                           ; BSR set to: 1
 16910  006852  0101               	movlb	1	; () banked
 16911  006854  90D8               	bcf	status,0,c
 16912  006856  3303               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 16913  006858  3302               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 16914  00685A  3301               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 16915  00685C  3300               	rrcf	___lmul@multiplier& (0+255),f,b
 16916  00685E  0101               	movlb	1	; () banked
 16917  006860  5100               	movf	___lmul@multiplier& (0+255),w,b
 16918  006862  0101               	movlb	1	; () banked
 16919  006864  1101               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 16920  006866  0101               	movlb	1	; () banked
 16921  006868  1102               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 16922  00686A  0101               	movlb	1	; () banked
 16923  00686C  1103               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 16924  00686E  A4D8               	btfss	status,2,c
 16925  006870  D7D7               	goto	l10658
 16926                           
 16927                           ; BSR set to: 1
 16928  006872  C108  F100         	movff	___lmul@product,?___lmul
 16929  006876  C109  F101         	movff	___lmul@product+1,?___lmul+1
 16930  00687A  C10A  F102         	movff	___lmul@product+2,?___lmul+2
 16931  00687E  C10B  F103         	movff	___lmul@product+3,?___lmul+3
 16932                           
 16933                           ; BSR set to: 1
 16934  006882  0012               	return		;funcret
 16935  006884                     __end_of___lmul:
 16936                           	opt stack 0
 16937                           tblptru	equ	0xFF8
 16938                           tblptrh	equ	0xFF7
 16939                           tblptrl	equ	0xFF6
 16940                           tablat	equ	0xFF5
 16941                           prodh	equ	0xFF4
 16942                           prodl	equ	0xFF3
 16943                           intcon	equ	0xFF2
 16944                           postinc0	equ	0xFEE
 16945                           wreg	equ	0xFE8
 16946                           postdec1	equ	0xFE5
 16947                           fsr1l	equ	0xFE1
 16948                           indf2	equ	0xFDF
 16949                           postinc2	equ	0xFDE
 16950                           postdec2	equ	0xFDD
 16951                           plusw2	equ	0xFDB
 16952                           fsr2h	equ	0xFDA
 16953                           fsr2l	equ	0xFD9
 16954                           status	equ	0xFD8
 16955                           
 16956 ;; *************** function ___fttol *****************
 16957 ;; Defined at:
 16958 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
 16959 ;; Parameters:    Size  Location     Type
 16960 ;;  f1              3   42[BANK1 ] float 
 16961 ;; Auto vars:     Size  Location     Type
 16962 ;;  lval            4   52[BANK1 ] unsigned long 
 16963 ;;  exp1            1   56[BANK1 ] unsigned char 
 16964 ;;  sign1           1   51[BANK1 ] unsigned char 
 16965 ;; Return value:  Size  Location     Type
 16966 ;;                  4   42[BANK1 ] long 
 16967 ;; Registers used:
 16968 ;;		wreg, status,2, status,0
 16969 ;; Tracked objects:
 16970 ;;		On entry : 0/0
 16971 ;;		On exit  : 0/0
 16972 ;;		Unchanged: 0/0
 16973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16974 ;;      Params:         0       0       4       0       0       0       0
 16975 ;;      Locals:         0       0       6       0       0       0       0
 16976 ;;      Temps:          0       0       5       0       0       0       0
 16977 ;;      Totals:         0       0      15       0       0       0       0
 16978 ;;Total ram usage:       15 bytes
 16979 ;; Hardware stack levels used:    1
 16980 ;; Hardware stack levels required when called:   12
 16981 ;; This function calls:
 16982 ;;		Nothing
 16983 ;; This function is called by:
 16984 ;;		_desintegrator
 16985 ;;		_printf
 16986 ;; This function uses a non-reentrant model
 16987 ;;
 16988                           
 16989                           	psect	text67
 16990  003F92                     __ptext67:
 16991                           	opt stack 0
 16992  003F92                     ___fttol:
 16993                           	opt stack 15
 16994                           
 16995                           ; BSR set to: 1
 16996                           ;incstack = 0
 16997  003F92  C12C  F12E         	movff	___fttol@f1+2,??___fttol
 16998  003F96  0101               	movlb	1	; () banked
 16999  003F98  6B2F               	clrf	(??___fttol+1)& (0+255),b
 17000  003F9A  6B30               	clrf	(??___fttol+2)& (0+255),b
 17001  003F9C  0101               	movlb	1	; () banked
 17002  003F9E  352B               	rlcf	(___fttol@f1+1)& (0+255),w,b
 17003  003FA0  0101               	movlb	1	; () banked
 17004  003FA2  372E               	rlcf	??___fttol& (0+255),f,b
 17005  003FA4  E301               	bnc	u8221
 17006  003FA6  812F               	bsf	(??___fttol+1)& (0+255),0,b
 17007  003FA8                     u8221:
 17008  003FA8  0101               	movlb	1	; () banked
 17009  003FAA  512E               	movf	??___fttol& (0+255),w,b
 17010  003FAC  0101               	movlb	1	; () banked
 17011  003FAE  6F38               	movwf	___fttol@exp1& (0+255),b
 17012  003FB0  0101               	movlb	1	; () banked
 17013  003FB2  5138               	movf	___fttol@exp1& (0+255),w,b
 17014  003FB4  A4D8               	btfss	status,2,c
 17015  003FB6  D00A               	goto	l6482
 17016                           
 17017                           ; BSR set to: 1
 17018  003FB8  0E00               	movlw	0
 17019  003FBA  0101               	movlb	1	; () banked
 17020  003FBC  6F2A               	movwf	?___fttol& (0+255),b
 17021  003FBE  0E00               	movlw	0
 17022  003FC0  6F2B               	movwf	(?___fttol+1)& (0+255),b
 17023  003FC2  0E00               	movlw	0
 17024  003FC4  6F2C               	movwf	(?___fttol+2)& (0+255),b
 17025  003FC6  0E00               	movlw	0
 17026  003FC8  6F2D               	movwf	(?___fttol+3)& (0+255),b
 17027                           
 17028                           ; BSR set to: 1
 17029  003FCA  0012               	return	
 17030  003FCC                     l6482:
 17031                           
 17032                           ; BSR set to: 1
 17033  003FCC  0E17               	movlw	23
 17034  003FCE  0101               	movlb	1	; () banked
 17035  003FD0  6F2E               	movwf	??___fttol& (0+255),b
 17036  003FD2  C12A  F12F         	movff	___fttol@f1,??___fttol+1
 17037  003FD6  C12B  F130         	movff	___fttol@f1+1,??___fttol+2
 17038  003FDA  C12C  F131         	movff	___fttol@f1+2,??___fttol+3
 17039  003FDE  0101               	movlb	1	; () banked
 17040  003FE0  292E               	incf	??___fttol& (0+255),w,b
 17041  003FE2  0101               	movlb	1	; () banked
 17042  003FE4  6F32               	movwf	(??___fttol+4)& (0+255),b
 17043  003FE6  D005               	goto	u8240
 17044  003FE8                     u8245:
 17045  003FE8  0101               	movlb	1	; () banked
 17046  003FEA  90D8               	bcf	status,0,c
 17047  003FEC  3331               	rrcf	(??___fttol+3)& (0+255),f,b
 17048  003FEE  3330               	rrcf	(??___fttol+2)& (0+255),f,b
 17049  003FF0  332F               	rrcf	(??___fttol+1)& (0+255),f,b
 17050  003FF2                     u8240:
 17051  003FF2  0101               	movlb	1	; () banked
 17052  003FF4  2F32               	decfsz	(??___fttol+4)& (0+255),f,b
 17053  003FF6  D7F8               	goto	u8245
 17054  003FF8  0101               	movlb	1	; () banked
 17055  003FFA  512F               	movf	(??___fttol+1)& (0+255),w,b
 17056  003FFC  0101               	movlb	1	; () banked
 17057  003FFE  6F33               	movwf	___fttol@sign1& (0+255),b
 17058                           
 17059                           ; BSR set to: 1
 17060  004000  0101               	movlb	1	; () banked
 17061  004002  8F2B               	bsf	(___fttol@f1+1)& (0+255),7,b
 17062                           
 17063                           ; BSR set to: 1
 17064  004004  0EFF               	movlw	255
 17065  004006  0101               	movlb	1	; () banked
 17066  004008  172A               	andwf	___fttol@f1& (0+255),f,b
 17067  00400A  0EFF               	movlw	255
 17068  00400C  0101               	movlb	1	; () banked
 17069  00400E  172B               	andwf	(___fttol@f1+1)& (0+255),f,b
 17070  004010  0E00               	movlw	0
 17071  004012  0101               	movlb	1	; () banked
 17072  004014  172C               	andwf	(___fttol@f1+2)& (0+255),f,b
 17073                           
 17074                           ; BSR set to: 1
 17075  004016  0101               	movlb	1	; () banked
 17076  004018  512A               	movf	___fttol@f1& (0+255),w,b
 17077  00401A  0101               	movlb	1	; () banked
 17078  00401C  6F34               	movwf	___fttol@lval& (0+255),b
 17079  00401E  0101               	movlb	1	; () banked
 17080  004020  512B               	movf	(___fttol@f1+1)& (0+255),w,b
 17081  004022  0101               	movlb	1	; () banked
 17082  004024  6F35               	movwf	(___fttol@lval+1)& (0+255),b
 17083  004026  0101               	movlb	1	; () banked
 17084  004028  512C               	movf	(___fttol@f1+2)& (0+255),w,b
 17085  00402A  0101               	movlb	1	; () banked
 17086  00402C  6F36               	movwf	(___fttol@lval+2)& (0+255),b
 17087  00402E  0101               	movlb	1	; () banked
 17088  004030  6B37               	clrf	(___fttol@lval+3)& (0+255),b
 17089                           
 17090                           ; BSR set to: 1
 17091  004032  0E8E               	movlw	142
 17092  004034  0101               	movlb	1	; () banked
 17093  004036  5F38               	subwf	___fttol@exp1& (0+255),f,b
 17094                           
 17095                           ; BSR set to: 1
 17096  004038  0101               	movlb	1	; () banked
 17097  00403A  AF38               	btfss	___fttol@exp1& (0+255),7,b
 17098  00403C  D01A               	goto	l6504
 17099                           
 17100                           ; BSR set to: 1
 17101  00403E  0101               	movlb	1	; () banked
 17102  004040  5138               	movf	___fttol@exp1& (0+255),w,b
 17103  004042  0A80               	xorlw	128
 17104  004044  0F8F               	addlw	143
 17105  004046  B0D8               	btfsc	status,0,c
 17106  004048  D00A               	goto	l6500
 17107                           
 17108                           ; BSR set to: 1
 17109  00404A  0E00               	movlw	0
 17110  00404C  0101               	movlb	1	; () banked
 17111  00404E  6F2A               	movwf	?___fttol& (0+255),b
 17112  004050  0E00               	movlw	0
 17113  004052  6F2B               	movwf	(?___fttol+1)& (0+255),b
 17114  004054  0E00               	movlw	0
 17115  004056  6F2C               	movwf	(?___fttol+2)& (0+255),b
 17116  004058  0E00               	movlw	0
 17117  00405A  6F2D               	movwf	(?___fttol+3)& (0+255),b
 17118                           
 17119                           ; BSR set to: 1
 17120  00405C  0012               	return	
 17121  00405E                     l6500:
 17122                           
 17123                           ; BSR set to: 1
 17124  00405E  0101               	movlb	1	; () banked
 17125  004060  90D8               	bcf	status,0,c
 17126  004062  3337               	rrcf	(___fttol@lval+3)& (0+255),f,b
 17127  004064  3336               	rrcf	(___fttol@lval+2)& (0+255),f,b
 17128  004066  3335               	rrcf	(___fttol@lval+1)& (0+255),f,b
 17129  004068  3334               	rrcf	___fttol@lval& (0+255),f,b
 17130                           
 17131                           ; BSR set to: 1
 17132  00406A  0101               	movlb	1	; () banked
 17133  00406C  3F38               	incfsz	___fttol@exp1& (0+255),f,b
 17134  00406E  D7F7               	goto	l6500
 17135                           
 17136                           ; BSR set to: 1
 17137  004070  D01B               	goto	l6514
 17138  004072                     l6504:
 17139                           
 17140                           ; BSR set to: 1
 17141  004072  0E17               	movlw	23
 17142  004074  0101               	movlb	1	; () banked
 17143  004076  6538               	cpfsgt	___fttol@exp1& (0+255),b
 17144  004078  D012               	goto	l6512
 17145                           
 17146                           ; BSR set to: 1
 17147  00407A  0E00               	movlw	0
 17148  00407C  0101               	movlb	1	; () banked
 17149  00407E  6F2A               	movwf	?___fttol& (0+255),b
 17150  004080  0E00               	movlw	0
 17151  004082  6F2B               	movwf	(?___fttol+1)& (0+255),b
 17152  004084  0E00               	movlw	0
 17153  004086  6F2C               	movwf	(?___fttol+2)& (0+255),b
 17154  004088  0E00               	movlw	0
 17155  00408A  6F2D               	movwf	(?___fttol+3)& (0+255),b
 17156                           
 17157                           ; BSR set to: 1
 17158  00408C  0012               	return	
 17159  00408E                     l6510:
 17160                           
 17161                           ; BSR set to: 1
 17162  00408E  0101               	movlb	1	; () banked
 17163  004090  90D8               	bcf	status,0,c
 17164  004092  3734               	rlcf	___fttol@lval& (0+255),f,b
 17165  004094  3735               	rlcf	(___fttol@lval+1)& (0+255),f,b
 17166  004096  3736               	rlcf	(___fttol@lval+2)& (0+255),f,b
 17167  004098  3737               	rlcf	(___fttol@lval+3)& (0+255),f,b
 17168  00409A  0101               	movlb	1	; () banked
 17169  00409C  0738               	decf	___fttol@exp1& (0+255),f,b
 17170  00409E                     l6512:
 17171                           
 17172                           ; BSR set to: 1
 17173  00409E  0101               	movlb	1	; () banked
 17174  0040A0  5138               	movf	___fttol@exp1& (0+255),w,b
 17175  0040A2  0101               	movlb	1	; () banked
 17176  0040A4  A4D8               	btfss	status,2,c
 17177  0040A6  D7F3               	goto	l6510
 17178  0040A8                     l6514:
 17179                           
 17180                           ; BSR set to: 1
 17181  0040A8  0101               	movlb	1	; () banked
 17182  0040AA  5133               	movf	___fttol@sign1& (0+255),w,b
 17183  0040AC  0101               	movlb	1	; () banked
 17184  0040AE  B4D8               	btfsc	status,2,c
 17185  0040B0  D009               	goto	l6518
 17186                           
 17187                           ; BSR set to: 1
 17188  0040B2  0101               	movlb	1	; () banked
 17189  0040B4  1F37               	comf	(___fttol@lval+3)& (0+255),f,b
 17190  0040B6  1F36               	comf	(___fttol@lval+2)& (0+255),f,b
 17191  0040B8  1F35               	comf	(___fttol@lval+1)& (0+255),f,b
 17192  0040BA  6D34               	negf	___fttol@lval& (0+255),b
 17193  0040BC  0E00               	movlw	0
 17194  0040BE  2335               	addwfc	(___fttol@lval+1)& (0+255),f,b
 17195  0040C0  2336               	addwfc	(___fttol@lval+2)& (0+255),f,b
 17196  0040C2  2337               	addwfc	(___fttol@lval+3)& (0+255),f,b
 17197  0040C4                     l6518:
 17198                           
 17199                           ; BSR set to: 1
 17200  0040C4  C134  F12A         	movff	___fttol@lval,?___fttol
 17201  0040C8  C135  F12B         	movff	___fttol@lval+1,?___fttol+1
 17202  0040CC  C136  F12C         	movff	___fttol@lval+2,?___fttol+2
 17203  0040D0  C137  F12D         	movff	___fttol@lval+3,?___fttol+3
 17204  0040D4  0012               	return	
 17205  0040D6                     __end_of___fttol:
 17206                           	opt stack 0
 17207                           tblptru	equ	0xFF8
 17208                           tblptrh	equ	0xFF7
 17209                           tblptrl	equ	0xFF6
 17210                           tablat	equ	0xFF5
 17211                           prodh	equ	0xFF4
 17212                           prodl	equ	0xFF3
 17213                           intcon	equ	0xFF2
 17214                           postinc0	equ	0xFEE
 17215                           wreg	equ	0xFE8
 17216                           postdec1	equ	0xFE5
 17217                           fsr1l	equ	0xFE1
 17218                           indf2	equ	0xFDF
 17219                           postinc2	equ	0xFDE
 17220                           postdec2	equ	0xFDD
 17221                           plusw2	equ	0xFDB
 17222                           fsr2h	equ	0xFDA
 17223                           fsr2l	equ	0xFD9
 17224                           status	equ	0xFD8
 17225                           
 17226 ;; *************** function ___aldiv *****************
 17227 ;; Defined at:
 17228 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
 17229 ;; Parameters:    Size  Location     Type
 17230 ;;  dividend        4    0[BANK1 ] long 
 17231 ;;  divisor         4    4[BANK1 ] long 
 17232 ;; Auto vars:     Size  Location     Type
 17233 ;;  quotient        4   10[BANK1 ] long 
 17234 ;;  sign            1    9[BANK1 ] unsigned char 
 17235 ;;  counter         1    8[BANK1 ] unsigned char 
 17236 ;; Return value:  Size  Location     Type
 17237 ;;                  4    0[BANK1 ] long 
 17238 ;; Registers used:
 17239 ;;		wreg, status,2, status,0
 17240 ;; Tracked objects:
 17241 ;;		On entry : 0/0
 17242 ;;		On exit  : 0/0
 17243 ;;		Unchanged: 0/0
 17244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17245 ;;      Params:         0       0       8       0       0       0       0
 17246 ;;      Locals:         0       0       6       0       0       0       0
 17247 ;;      Temps:          0       0       0       0       0       0       0
 17248 ;;      Totals:         0       0      14       0       0       0       0
 17249 ;;Total ram usage:       14 bytes
 17250 ;; Hardware stack levels used:    1
 17251 ;; Hardware stack levels required when called:   12
 17252 ;; This function calls:
 17253 ;;		Nothing
 17254 ;; This function is called by:
 17255 ;;		_desintegrator
 17256 ;; This function uses a non-reentrant model
 17257 ;;
 17258                           
 17259                           	psect	text68
 17260  00445E                     __ptext68:
 17261                           	opt stack 0
 17262  00445E                     ___aldiv:
 17263                           	opt stack 15
 17264                           
 17265                           ; BSR set to: 1
 17266                           ;incstack = 0
 17267  00445E  0E00               	movlw	0
 17268  004460  0101               	movlb	1	; () banked
 17269  004462  6F09               	movwf	___aldiv@sign& (0+255),b
 17270                           
 17271                           ; BSR set to: 1
 17272  004464  0101               	movlb	1	; () banked
 17273  004466  AF07               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 17274  004468  D00C               	goto	l10674
 17275                           
 17276                           ; BSR set to: 1
 17277  00446A  0101               	movlb	1	; () banked
 17278  00446C  1F07               	comf	(___aldiv@divisor+3)& (0+255),f,b
 17279  00446E  1F06               	comf	(___aldiv@divisor+2)& (0+255),f,b
 17280  004470  1F05               	comf	(___aldiv@divisor+1)& (0+255),f,b
 17281  004472  6D04               	negf	___aldiv@divisor& (0+255),b
 17282  004474  0E00               	movlw	0
 17283  004476  2305               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 17284  004478  2306               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 17285  00447A  2307               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 17286                           
 17287                           ; BSR set to: 1
 17288  00447C  0E01               	movlw	1
 17289  00447E  0101               	movlb	1	; () banked
 17290  004480  6F09               	movwf	___aldiv@sign& (0+255),b
 17291  004482                     l10674:
 17292                           
 17293                           ; BSR set to: 1
 17294  004482  0101               	movlb	1	; () banked
 17295  004484  AF03               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 17296  004486  D00C               	goto	l10680
 17297                           
 17298                           ; BSR set to: 1
 17299  004488  0101               	movlb	1	; () banked
 17300  00448A  1F03               	comf	(___aldiv@dividend+3)& (0+255),f,b
 17301  00448C  1F02               	comf	(___aldiv@dividend+2)& (0+255),f,b
 17302  00448E  1F01               	comf	(___aldiv@dividend+1)& (0+255),f,b
 17303  004490  6D00               	negf	___aldiv@dividend& (0+255),b
 17304  004492  0E00               	movlw	0
 17305  004494  2301               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 17306  004496  2302               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 17307  004498  2303               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 17308                           
 17309                           ; BSR set to: 1
 17310  00449A  0E01               	movlw	1
 17311  00449C  0101               	movlb	1	; () banked
 17312  00449E  1B09               	xorwf	___aldiv@sign& (0+255),f,b
 17313  0044A0                     l10680:
 17314                           
 17315                           ; BSR set to: 1
 17316  0044A0  0E00               	movlw	0
 17317  0044A2  0101               	movlb	1	; () banked
 17318  0044A4  6F0A               	movwf	___aldiv@quotient& (0+255),b
 17319  0044A6  0E00               	movlw	0
 17320  0044A8  6F0B               	movwf	(___aldiv@quotient+1)& (0+255),b
 17321  0044AA  0E00               	movlw	0
 17322  0044AC  6F0C               	movwf	(___aldiv@quotient+2)& (0+255),b
 17323  0044AE  0E00               	movlw	0
 17324  0044B0  6F0D               	movwf	(___aldiv@quotient+3)& (0+255),b
 17325                           
 17326                           ; BSR set to: 1
 17327  0044B2  0101               	movlb	1	; () banked
 17328  0044B4  5104               	movf	___aldiv@divisor& (0+255),w,b
 17329  0044B6  0101               	movlb	1	; () banked
 17330  0044B8  1105               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 17331  0044BA  0101               	movlb	1	; () banked
 17332  0044BC  1106               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 17333  0044BE  0101               	movlb	1	; () banked
 17334  0044C0  1107               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 17335  0044C2  B4D8               	btfsc	status,2,c
 17336  0044C4  D042               	goto	l10702
 17337                           
 17338                           ; BSR set to: 1
 17339  0044C6  0E01               	movlw	1
 17340  0044C8  0101               	movlb	1	; () banked
 17341  0044CA  6F08               	movwf	___aldiv@counter& (0+255),b
 17342  0044CC  D008               	goto	l10688
 17343  0044CE                     l10686:
 17344                           
 17345                           ; BSR set to: 1
 17346  0044CE  0101               	movlb	1	; () banked
 17347  0044D0  90D8               	bcf	status,0,c
 17348  0044D2  3704               	rlcf	___aldiv@divisor& (0+255),f,b
 17349  0044D4  3705               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 17350  0044D6  3706               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 17351  0044D8  3707               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 17352  0044DA  0101               	movlb	1	; () banked
 17353  0044DC  2B08               	incf	___aldiv@counter& (0+255),f,b
 17354  0044DE                     l10688:
 17355                           
 17356                           ; BSR set to: 1
 17357  0044DE  0101               	movlb	1	; () banked
 17358  0044E0  AF07               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 17359  0044E2  D7F5               	goto	l10686
 17360  0044E4                     l10690:
 17361                           
 17362                           ; BSR set to: 1
 17363  0044E4  0101               	movlb	1	; () banked
 17364  0044E6  90D8               	bcf	status,0,c
 17365  0044E8  370A               	rlcf	___aldiv@quotient& (0+255),f,b
 17366  0044EA  370B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 17367  0044EC  370C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 17368  0044EE  370D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 17369                           
 17370                           ; BSR set to: 1
 17371  0044F0  0101               	movlb	1	; () banked
 17372  0044F2  5104               	movf	___aldiv@divisor& (0+255),w,b
 17373  0044F4  0101               	movlb	1	; () banked
 17374  0044F6  5D00               	subwf	___aldiv@dividend& (0+255),w,b
 17375  0044F8  0101               	movlb	1	; () banked
 17376  0044FA  5105               	movf	(___aldiv@divisor+1)& (0+255),w,b
 17377  0044FC  0101               	movlb	1	; () banked
 17378  0044FE  5901               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 17379  004500  0101               	movlb	1	; () banked
 17380  004502  5106               	movf	(___aldiv@divisor+2)& (0+255),w,b
 17381  004504  0101               	movlb	1	; () banked
 17382  004506  5902               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 17383  004508  0101               	movlb	1	; () banked
 17384  00450A  5107               	movf	(___aldiv@divisor+3)& (0+255),w,b
 17385  00450C  0101               	movlb	1	; () banked
 17386  00450E  5903               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 17387  004510  A0D8               	btfss	status,0,c
 17388  004512  D012               	goto	l10698
 17389                           
 17390                           ; BSR set to: 1
 17391  004514  0101               	movlb	1	; () banked
 17392  004516  5104               	movf	___aldiv@divisor& (0+255),w,b
 17393  004518  0101               	movlb	1	; () banked
 17394  00451A  5F00               	subwf	___aldiv@dividend& (0+255),f,b
 17395  00451C  0101               	movlb	1	; () banked
 17396  00451E  5105               	movf	(___aldiv@divisor+1)& (0+255),w,b
 17397  004520  0101               	movlb	1	; () banked
 17398  004522  5B01               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 17399  004524  0101               	movlb	1	; () banked
 17400  004526  5106               	movf	(___aldiv@divisor+2)& (0+255),w,b
 17401  004528  0101               	movlb	1	; () banked
 17402  00452A  5B02               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 17403  00452C  0101               	movlb	1	; () banked
 17404  00452E  5107               	movf	(___aldiv@divisor+3)& (0+255),w,b
 17405  004530  0101               	movlb	1	; () banked
 17406  004532  5B03               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 17407                           
 17408                           ; BSR set to: 1
 17409  004534  0101               	movlb	1	; () banked
 17410  004536  810A               	bsf	___aldiv@quotient& (0+255),0,b
 17411  004538                     l10698:
 17412                           
 17413                           ; BSR set to: 1
 17414  004538  0101               	movlb	1	; () banked
 17415  00453A  90D8               	bcf	status,0,c
 17416  00453C  3307               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 17417  00453E  3306               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 17418  004540  3305               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 17419  004542  3304               	rrcf	___aldiv@divisor& (0+255),f,b
 17420                           
 17421                           ; BSR set to: 1
 17422  004544  0101               	movlb	1	; () banked
 17423  004546  2F08               	decfsz	___aldiv@counter& (0+255),f,b
 17424  004548  D7CD               	goto	l10690
 17425  00454A                     l10702:
 17426                           
 17427                           ; BSR set to: 1
 17428  00454A  0101               	movlb	1	; () banked
 17429  00454C  5109               	movf	___aldiv@sign& (0+255),w,b
 17430  00454E  0101               	movlb	1	; () banked
 17431  004550  B4D8               	btfsc	status,2,c
 17432  004552  D009               	goto	l10706
 17433                           
 17434                           ; BSR set to: 1
 17435  004554  0101               	movlb	1	; () banked
 17436  004556  1F0D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 17437  004558  1F0C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 17438  00455A  1F0B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 17439  00455C  6D0A               	negf	___aldiv@quotient& (0+255),b
 17440  00455E  0E00               	movlw	0
 17441  004560  230B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 17442  004562  230C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 17443  004564  230D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 17444  004566                     l10706:
 17445                           
 17446                           ; BSR set to: 1
 17447  004566  C10A  F100         	movff	___aldiv@quotient,?___aldiv
 17448  00456A  C10B  F101         	movff	___aldiv@quotient+1,?___aldiv+1
 17449  00456E  C10C  F102         	movff	___aldiv@quotient+2,?___aldiv+2
 17450  004572  C10D  F103         	movff	___aldiv@quotient+3,?___aldiv+3
 17451  004576  0012               	return	
 17452  004578                     __end_of___aldiv:
 17453                           	opt stack 0
 17454                           tblptru	equ	0xFF8
 17455                           tblptrh	equ	0xFF7
 17456                           tblptrl	equ	0xFF6
 17457                           tablat	equ	0xFF5
 17458                           prodh	equ	0xFF4
 17459                           prodl	equ	0xFF3
 17460                           intcon	equ	0xFF2
 17461                           postinc0	equ	0xFEE
 17462                           wreg	equ	0xFE8
 17463                           postdec1	equ	0xFE5
 17464                           fsr1l	equ	0xFE1
 17465                           indf2	equ	0xFDF
 17466                           postinc2	equ	0xFDE
 17467                           postdec2	equ	0xFDD
 17468                           plusw2	equ	0xFDB
 17469                           fsr2h	equ	0xFDA
 17470                           fsr2l	equ	0xFD9
 17471                           status	equ	0xFD8
 17472                           
 17473 ;; *************** function _confirmEdition *****************
 17474 ;; Defined at:
 17475 ;;		line 85 in file "source/DisplayProtocol.h"
 17476 ;; Parameters:    Size  Location     Type
 17477 ;;  yes             1    wreg     unsigned char 
 17478 ;; Auto vars:     Size  Location     Type
 17479 ;;  yes             1   35[BANK1 ] unsigned char 
 17480 ;; Return value:  Size  Location     Type
 17481 ;;                  1    wreg      void 
 17482 ;; Registers used:
 17483 ;;		wreg, status,2, status,0, cstack
 17484 ;; Tracked objects:
 17485 ;;		On entry : 0/0
 17486 ;;		On exit  : 0/0
 17487 ;;		Unchanged: 0/0
 17488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17489 ;;      Params:         0       0       0       0       0       0       0
 17490 ;;      Locals:         0       0       1       0       0       0       0
 17491 ;;      Temps:          0       0       0       0       0       0       0
 17492 ;;      Totals:         0       0       1       0       0       0       0
 17493 ;;Total ram usage:        1 bytes
 17494 ;; Hardware stack levels used:    1
 17495 ;; Hardware stack levels required when called:   16
 17496 ;; This function calls:
 17497 ;;		_saveSysParams
 17498 ;; This function is called by:
 17499 ;;		_pressENTER
 17500 ;;		_longPressENTER
 17501 ;; This function uses a non-reentrant model
 17502 ;;
 17503                           
 17504                           	psect	text69
 17505  0059CA                     __ptext69:
 17506                           	opt stack 0
 17507  0059CA                     _confirmEdition:
 17508                           	opt stack 12
 17509                           
 17510                           ; BSR set to: 1
 17511                           ;incstack = 0
 17512                           ;confirmEdition@yes stored from wreg
 17513  0059CA  0101               	movlb	1	; () banked
 17514  0059CC  6F23               	movwf	confirmEdition@yes& (0+255),b
 17515                           
 17516                           ;DisplayProtocol.h: 86: switch (menuSection) {
 17517  0059CE  D04C               	goto	l10880
 17518  0059D0                     l10848:
 17519                           
 17520                           ;DisplayProtocol.h: 90: if(yes) {
 17521  0059D0  0101               	movlb	1	; () banked
 17522  0059D2  5123               	movf	confirmEdition@yes& (0+255),w,b
 17523  0059D4  0101               	movlb	1	; () banked
 17524  0059D6  B4D8               	btfsc	status,2,c
 17525  0059D8  D00C               	goto	l576
 17526                           
 17527                           ; BSR set to: 1
 17528                           ;DisplayProtocol.h: 91: kgXcorte = chanValf;
 17529  0059DA  C1B1  F198         	movff	_chanValf,_kgXcorte
 17530  0059DE  C1B2  F199         	movff	_chanValf+1,_kgXcorte+1
 17531  0059E2  C1B3  F19A         	movff	_chanValf+2,_kgXcorte+2
 17532                           
 17533                           ; BSR set to: 1
 17534                           ;DisplayProtocol.h: 92: actualScreen = 4;
 17535  0059E6  0E04               	movlw	4
 17536  0059E8  0101               	movlb	1	; () banked
 17537  0059EA  6FBD               	movwf	_actualScreen& (0+255),b
 17538                           
 17539                           ; BSR set to: 1
 17540                           ;DisplayProtocol.h: 93: saveSysParams();
 17541  0059EC  EC61  F030         	call	_saveSysParams	;wreg free
 17542                           
 17543                           ;DisplayProtocol.h: 94: }else {
 17544  0059F0  0012               	return	
 17545  0059F2                     l576:
 17546                           
 17547                           ; BSR set to: 1
 17548                           ;DisplayProtocol.h: 95: tempLastScreen = actualScreen;
 17549  0059F2  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 17550                           
 17551                           ; BSR set to: 1
 17552                           ;DisplayProtocol.h: 96: selSN = 1;
 17553  0059F6  0E01               	movlw	1
 17554  0059F8  0101               	movlb	1	; () banked
 17555  0059FA  6FBA               	movwf	_selSN& (0+255),b
 17556                           
 17557                           ;DisplayProtocol.h: 97: actualScreen = 10;
 17558  0059FC  0E0A               	movlw	10
 17559  0059FE  0101               	movlb	1	; () banked
 17560  005A00  6FBD               	movwf	_actualScreen& (0+255),b
 17561                           
 17562                           ; BSR set to: 1
 17563                           ;DisplayProtocol.h: 98: }
 17564                           ;DisplayProtocol.h: 99: break;
 17565  005A02  0012               	return	
 17566  005A04                     l10858:
 17567                           
 17568                           ; BSR set to: 1
 17569                           ;DisplayProtocol.h: 101: if(yes) {
 17570  005A04  0101               	movlb	1	; () banked
 17571  005A06  5123               	movf	confirmEdition@yes& (0+255),w,b
 17572  005A08  0101               	movlb	1	; () banked
 17573  005A0A  B4D8               	btfsc	status,2,c
 17574  005A0C  D00A               	goto	l579
 17575                           
 17576                           ; BSR set to: 1
 17577                           ;DisplayProtocol.h: 102: numCortes = chanVals;
 17578  005A0E  C1B6  F0D2         	movff	_chanVals,_numCortes
 17579  005A12  C1B7  F0D3         	movff	_chanVals+1,_numCortes+1
 17580                           
 17581                           ; BSR set to: 1
 17582                           ;DisplayProtocol.h: 103: actualScreen = 4;
 17583  005A16  0E04               	movlw	4
 17584  005A18  0101               	movlb	1	; () banked
 17585  005A1A  6FBD               	movwf	_actualScreen& (0+255),b
 17586                           
 17587                           ; BSR set to: 1
 17588                           ;DisplayProtocol.h: 104: saveSysParams();
 17589  005A1C  EC61  F030         	call	_saveSysParams	;wreg free
 17590                           
 17591                           ;DisplayProtocol.h: 105: }else {
 17592  005A20  0012               	return	
 17593  005A22                     l579:
 17594                           
 17595                           ; BSR set to: 1
 17596                           ;DisplayProtocol.h: 106: tempLastScreen = actualScreen;
 17597  005A22  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 17598                           
 17599                           ; BSR set to: 1
 17600                           ;DisplayProtocol.h: 107: selSN = 1;
 17601  005A26  0E01               	movlw	1
 17602  005A28  0101               	movlb	1	; () banked
 17603  005A2A  6FBA               	movwf	_selSN& (0+255),b
 17604                           
 17605                           ;DisplayProtocol.h: 108: actualScreen = 10;
 17606  005A2C  0E0A               	movlw	10
 17607  005A2E  0101               	movlb	1	; () banked
 17608  005A30  6FBD               	movwf	_actualScreen& (0+255),b
 17609                           
 17610                           ; BSR set to: 1
 17611                           ;DisplayProtocol.h: 109: }
 17612                           ;DisplayProtocol.h: 110: break;
 17613  005A32  0012               	return	
 17614  005A34                     l10868:
 17615                           
 17616                           ; BSR set to: 1
 17617                           ;DisplayProtocol.h: 112: if(yes) {
 17618  005A34  0101               	movlb	1	; () banked
 17619  005A36  5123               	movf	confirmEdition@yes& (0+255),w,b
 17620  005A38  0101               	movlb	1	; () banked
 17621  005A3A  B4D8               	btfsc	status,2,c
 17622  005A3C  D00C               	goto	l582
 17623                           
 17624                           ; BSR set to: 1
 17625                           ;DisplayProtocol.h: 113: velocidadMasa = chanValf;
 17626  005A3E  C1B1  F18F         	movff	_chanValf,_velocidadMasa
 17627  005A42  C1B2  F190         	movff	_chanValf+1,_velocidadMasa+1
 17628  005A46  C1B3  F191         	movff	_chanValf+2,_velocidadMasa+2
 17629                           
 17630                           ; BSR set to: 1
 17631                           ;DisplayProtocol.h: 114: actualScreen = 4;
 17632  005A4A  0E04               	movlw	4
 17633  005A4C  0101               	movlb	1	; () banked
 17634  005A4E  6FBD               	movwf	_actualScreen& (0+255),b
 17635                           
 17636                           ; BSR set to: 1
 17637                           ;DisplayProtocol.h: 115: saveSysParams();
 17638  005A50  EC61  F030         	call	_saveSysParams	;wreg free
 17639                           
 17640                           ;DisplayProtocol.h: 116: }else {
 17641  005A54  0012               	return	
 17642  005A56                     l582:
 17643                           
 17644                           ; BSR set to: 1
 17645                           ;DisplayProtocol.h: 117: tempLastScreen = actualScreen;
 17646  005A56  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 17647                           
 17648                           ; BSR set to: 1
 17649                           ;DisplayProtocol.h: 118: selSN = 1;
 17650  005A5A  0E01               	movlw	1
 17651  005A5C  0101               	movlb	1	; () banked
 17652  005A5E  6FBA               	movwf	_selSN& (0+255),b
 17653                           
 17654                           ;DisplayProtocol.h: 119: actualScreen = 10;
 17655  005A60  0E0A               	movlw	10
 17656  005A62  0101               	movlb	1	; () banked
 17657  005A64  6FBD               	movwf	_actualScreen& (0+255),b
 17658                           
 17659                           ; BSR set to: 1
 17660                           ;DisplayProtocol.h: 122: }
 17661                           ;DisplayProtocol.h: 123: }
 17662                           
 17663                           ; BSR set to: 1
 17664                           ;DisplayProtocol.h: 120: }
 17665                           ;DisplayProtocol.h: 121: break;
 17666  005A66  0012               	return	
 17667  005A68                     l10880:
 17668  005A68  0101               	movlb	1	; () banked
 17669  005A6A  51BC               	movf	_menuSection& (0+255),w,b
 17670                           
 17671                           ; Switch size 1, requested type "space"
 17672                           ; Number of cases is 4, Range of values is 0 to 3
 17673                           ; switch strategies available:
 17674                           ; Name         Instructions Cycles
 17675                           ; simple_byte           13     7 (average)
 17676                           ;	Chosen strategy is simple_byte
 17677  005A6C  0A00               	xorlw	0	; case 0
 17678  005A6E  B4D8               	btfsc	status,2,c
 17679  005A70  0012               	return	
 17680  005A72  0A01               	xorlw	1	; case 1
 17681  005A74  B4D8               	btfsc	status,2,c
 17682  005A76  D7AC               	goto	l10848
 17683  005A78  0A03               	xorlw	3	; case 2
 17684  005A7A  B4D8               	btfsc	status,2,c
 17685  005A7C  D7C3               	goto	l10858
 17686  005A7E  0A01               	xorlw	1	; case 3
 17687  005A80  A4D8               	btfss	status,2,c
 17688  005A82  0012               	return	
 17689  005A84  D7D7               	goto	l10868
 17690  005A86                     __end_of_confirmEdition:
 17691                           	opt stack 0
 17692                           tblptru	equ	0xFF8
 17693                           tblptrh	equ	0xFF7
 17694                           tblptrl	equ	0xFF6
 17695                           tablat	equ	0xFF5
 17696                           prodh	equ	0xFF4
 17697                           prodl	equ	0xFF3
 17698                           intcon	equ	0xFF2
 17699                           postinc0	equ	0xFEE
 17700                           wreg	equ	0xFE8
 17701                           postdec1	equ	0xFE5
 17702                           fsr1l	equ	0xFE1
 17703                           indf2	equ	0xFDF
 17704                           postinc2	equ	0xFDE
 17705                           postdec2	equ	0xFDD
 17706                           plusw2	equ	0xFDB
 17707                           fsr2h	equ	0xFDA
 17708                           fsr2l	equ	0xFD9
 17709                           status	equ	0xFD8
 17710                           
 17711 ;; *************** function _saveSysParams *****************
 17712 ;; Defined at:
 17713 ;;		line 113 in file "source/sysParams.h"
 17714 ;; Parameters:    Size  Location     Type
 17715 ;;		None
 17716 ;; Auto vars:     Size  Location     Type
 17717 ;;		None
 17718 ;; Return value:  Size  Location     Type
 17719 ;;                  1    wreg      void 
 17720 ;; Registers used:
 17721 ;;		wreg, status,2, status,0, cstack
 17722 ;; Tracked objects:
 17723 ;;		On entry : 0/0
 17724 ;;		On exit  : 0/0
 17725 ;;		Unchanged: 0/0
 17726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17727 ;;      Params:         0       0       0       0       0       0       0
 17728 ;;      Locals:         0       0       0       0       0       0       0
 17729 ;;      Temps:          0       0       0       0       0       0       0
 17730 ;;      Totals:         0       0       0       0       0       0       0
 17731 ;;Total ram usage:        0 bytes
 17732 ;; Hardware stack levels used:    1
 17733 ;; Hardware stack levels required when called:   15
 17734 ;; This function calls:
 17735 ;;		_calcVars2ti
 17736 ;;		_writeEEPROM
 17737 ;; This function is called by:
 17738 ;;		_confirmEdition
 17739 ;; This function uses a non-reentrant model
 17740 ;;
 17741                           
 17742                           	psect	text70
 17743  0060C2                     __ptext70:
 17744                           	opt stack 0
 17745  0060C2                     _saveSysParams:
 17746                           	opt stack 12
 17747                           
 17748                           ;sysParams.h: 114: calcVars2ti();
 17749                           
 17750                           ;incstack = 0
 17751  0060C2  EC01  F036         	call	_calcVars2ti	;wreg free
 17752                           
 17753                           ;sysParams.h: 115: EECON1bits.WREN = 1;
 17754  0060C6  84A6               	bsf	4006,2,c	;volatile
 17755                           
 17756                           ;sysParams.h: 116: ie = INTCONbits.GIE;
 17757  0060C8  0E00               	movlw	0
 17758  0060CA  BEF2               	btfsc	intcon,7,c	;volatile
 17759  0060CC  0E01               	movlw	1
 17760  0060CE  0100               	movlb	0	; () banked
 17761  0060D0  6FBD               	movwf	_ie& (0+255),b
 17762                           
 17763                           ; BSR set to: 0
 17764                           ;sysParams.h: 117: INTCONbits.GIE = 0;
 17765  0060D2  9EF2               	bcf	intcon,7,c	;volatile
 17766                           
 17767                           ; BSR set to: 0
 17768                           ;sysParams.h: 119: fData.floatdat = tiXcorte;
 17769  0060D4  C195  F0AF         	movff	_tiXcorte,_fData
 17770  0060D8  C196  F0B0         	movff	_tiXcorte+1,_fData+1
 17771  0060DC  C197  F0B1         	movff	_tiXcorte+2,_fData+2
 17772                           
 17773                           ; BSR set to: 0
 17774                           ;sysParams.h: 121: writeEEPROM(3, fData.floatUB);
 17775  0060E0  C0B1  F100         	movff	_fData+2,writeEEPROM@data
 17776  0060E4  0E03               	movlw	3
 17777  0060E6  EC1B  F039         	call	_writeEEPROM
 17778                           
 17779                           ;sysParams.h: 122: writeEEPROM(4, fData.floatHB);
 17780  0060EA  C0B0  F100         	movff	_fData+1,writeEEPROM@data
 17781  0060EE  0E04               	movlw	4
 17782  0060F0  EC1B  F039         	call	_writeEEPROM
 17783                           
 17784                           ;sysParams.h: 123: writeEEPROM(5, fData.floatLB);
 17785  0060F4  C0AF  F100         	movff	_fData,writeEEPROM@data
 17786  0060F8  0E05               	movlw	5
 17787  0060FA  EC1B  F039         	call	_writeEEPROM
 17788                           
 17789                           ;sysParams.h: 124: i16Data.int16dat = numCortes;
 17790  0060FE  C0D2  F0B4         	movff	_numCortes,_i16Data
 17791  006102  C0D3  F0B5         	movff	_numCortes+1,_i16Data+1
 17792                           
 17793                           ;sysParams.h: 125: writeEEPROM(6, i16Data.int16HB);
 17794  006106  C0B5  F100         	movff	_i16Data+1,writeEEPROM@data
 17795  00610A  0E06               	movlw	6
 17796  00610C  EC1B  F039         	call	_writeEEPROM
 17797                           
 17798                           ;sysParams.h: 126: writeEEPROM(7, i16Data.int16LB);
 17799  006110  C0B4  F100         	movff	_i16Data,writeEEPROM@data
 17800  006114  0E07               	movlw	7
 17801  006116  EC1B  F039         	call	_writeEEPROM
 17802                           
 17803                           ;sysParams.h: 137: fData.floatdat = velocidadMasa;
 17804  00611A  C18F  F0AF         	movff	_velocidadMasa,_fData
 17805  00611E  C190  F0B0         	movff	_velocidadMasa+1,_fData+1
 17806  006122  C191  F0B1         	movff	_velocidadMasa+2,_fData+2
 17807                           
 17808                           ;sysParams.h: 139: writeEEPROM(17, fData.floatUB);
 17809  006126  C0B1  F100         	movff	_fData+2,writeEEPROM@data
 17810  00612A  0E11               	movlw	17
 17811  00612C  EC1B  F039         	call	_writeEEPROM
 17812                           
 17813                           ;sysParams.h: 140: writeEEPROM(18, fData.floatHB);
 17814  006130  C0B0  F100         	movff	_fData+1,writeEEPROM@data
 17815  006134  0E12               	movlw	18
 17816  006136  EC1B  F039         	call	_writeEEPROM
 17817                           
 17818                           ;sysParams.h: 141: writeEEPROM(19, fData.floatLB);
 17819  00613A  C0AF  F100         	movff	_fData,writeEEPROM@data
 17820  00613E  0E13               	movlw	19
 17821  006140  EC1B  F039         	call	_writeEEPROM
 17822                           
 17823                           ;sysParams.h: 142: EECON1bits.WREN = 0;
 17824  006144  94A6               	bcf	4006,2,c	;volatile
 17825                           
 17826                           ;sysParams.h: 143: INTCONbits.GIE = ie;
 17827  006146  0100               	movlb	0	; () banked
 17828  006148  B1BD               	btfsc	_ie& (0+255),0,b
 17829  00614A  D002               	bra	u15115
 17830  00614C  9EF2               	bcf	intcon,7,c	;volatile
 17831  00614E  D001               	bra	u15116
 17832  006150                     u15115:
 17833  006150  8EF2               	bsf	intcon,7,c	;volatile
 17834  006152                     u15116:
 17835  006152  0012               	return		;funcret
 17836  006154                     __end_of_saveSysParams:
 17837                           	opt stack 0
 17838                           tblptru	equ	0xFF8
 17839                           tblptrh	equ	0xFF7
 17840                           tblptrl	equ	0xFF6
 17841                           tablat	equ	0xFF5
 17842                           prodh	equ	0xFF4
 17843                           prodl	equ	0xFF3
 17844                           intcon	equ	0xFF2
 17845                           postinc0	equ	0xFEE
 17846                           wreg	equ	0xFE8
 17847                           postdec1	equ	0xFE5
 17848                           fsr1l	equ	0xFE1
 17849                           indf2	equ	0xFDF
 17850                           postinc2	equ	0xFDE
 17851                           postdec2	equ	0xFDD
 17852                           plusw2	equ	0xFDB
 17853                           fsr2h	equ	0xFDA
 17854                           fsr2l	equ	0xFD9
 17855                           status	equ	0xFD8
 17856                           
 17857 ;; *************** function _writeEEPROM *****************
 17858 ;; Defined at:
 17859 ;;		line 53 in file "source/sysParams.h"
 17860 ;; Parameters:    Size  Location     Type
 17861 ;;  adr             1    wreg     unsigned char 
 17862 ;;  data            1    0[BANK1 ] unsigned char 
 17863 ;; Auto vars:     Size  Location     Type
 17864 ;;  adr             1    1[BANK1 ] unsigned char 
 17865 ;; Return value:  Size  Location     Type
 17866 ;;                  1    wreg      void 
 17867 ;; Registers used:
 17868 ;;		wreg, status,2
 17869 ;; Tracked objects:
 17870 ;;		On entry : 0/0
 17871 ;;		On exit  : 0/0
 17872 ;;		Unchanged: 0/0
 17873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17874 ;;      Params:         0       0       1       0       0       0       0
 17875 ;;      Locals:         0       0       1       0       0       0       0
 17876 ;;      Temps:          0       0       0       0       0       0       0
 17877 ;;      Totals:         0       0       2       0       0       0       0
 17878 ;;Total ram usage:        2 bytes
 17879 ;; Hardware stack levels used:    1
 17880 ;; Hardware stack levels required when called:   12
 17881 ;; This function calls:
 17882 ;;		Nothing
 17883 ;; This function is called by:
 17884 ;;		_saveSysParams
 17885 ;; This function uses a non-reentrant model
 17886 ;;
 17887                           
 17888                           	psect	text71
 17889  007236                     __ptext71:
 17890                           	opt stack 0
 17891  007236                     _writeEEPROM:
 17892                           	opt stack 14
 17893                           
 17894                           ;incstack = 0
 17895                           ;writeEEPROM@adr stored from wreg
 17896  007236  0101               	movlb	1	; () banked
 17897  007238  6F01               	movwf	writeEEPROM@adr& (0+255),b
 17898                           
 17899                           ;sysParams.h: 54: EEADR = adr;
 17900  00723A  C101  FFA9         	movff	writeEEPROM@adr,4009	;volatile
 17901                           
 17902                           ;sysParams.h: 55: EEDATA = data;
 17903  00723E  C100  FFA8         	movff	writeEEPROM@data,4008	;volatile
 17904                           
 17905                           ;sysParams.h: 56: EECON1bits.EEPGD = 0;
 17906  007242  9EA6               	bcf	4006,7,c	;volatile
 17907                           
 17908                           ;sysParams.h: 57: EECON1bits.CFGS = 0;
 17909  007244  9CA6               	bcf	4006,6,c	;volatile
 17910                           
 17911                           ;sysParams.h: 58: EECON2 = 0x55;
 17912  007246  0E55               	movlw	85
 17913  007248  6EA7               	movwf	4007,c	;volatile
 17914                           
 17915                           ;sysParams.h: 59: EECON2 = 0xAA;
 17916  00724A  0EAA               	movlw	170
 17917  00724C  6EA7               	movwf	4007,c	;volatile
 17918                           
 17919                           ;sysParams.h: 60: EECON1bits.WR = 1;
 17920  00724E  82A6               	bsf	4006,1,c	;volatile
 17921  007250                     l281:
 17922  007250  A2A6               	btfss	4006,1,c	;volatile
 17923  007252  0012               	return	
 17924  007254  D7FD               	goto	l281
 17925  007256                     __end_of_writeEEPROM:
 17926                           	opt stack 0
 17927                           tblptru	equ	0xFF8
 17928                           tblptrh	equ	0xFF7
 17929                           tblptrl	equ	0xFF6
 17930                           tablat	equ	0xFF5
 17931                           prodh	equ	0xFF4
 17932                           prodl	equ	0xFF3
 17933                           intcon	equ	0xFF2
 17934                           postinc0	equ	0xFEE
 17935                           wreg	equ	0xFE8
 17936                           postdec1	equ	0xFE5
 17937                           fsr1l	equ	0xFE1
 17938                           indf2	equ	0xFDF
 17939                           postinc2	equ	0xFDE
 17940                           postdec2	equ	0xFDD
 17941                           plusw2	equ	0xFDB
 17942                           fsr2h	equ	0xFDA
 17943                           fsr2l	equ	0xFD9
 17944                           status	equ	0xFD8
 17945                           
 17946 ;; *************** function _calcVars2ti *****************
 17947 ;; Defined at:
 17948 ;;		line 89 in file "source/sysParams.h"
 17949 ;; Parameters:    Size  Location     Type
 17950 ;;		None
 17951 ;; Auto vars:     Size  Location     Type
 17952 ;;		None
 17953 ;; Return value:  Size  Location     Type
 17954 ;;                  1    wreg      void 
 17955 ;; Registers used:
 17956 ;;		wreg, status,2, status,0, cstack
 17957 ;; Tracked objects:
 17958 ;;		On entry : 0/0
 17959 ;;		On exit  : 0/0
 17960 ;;		Unchanged: 0/0
 17961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17962 ;;      Params:         0       0       0       0       0       0       0
 17963 ;;      Locals:         0       0       0       0       0       0       0
 17964 ;;      Temps:          0       0       0       0       0       0       0
 17965 ;;      Totals:         0       0       0       0       0       0       0
 17966 ;;Total ram usage:        0 bytes
 17967 ;; Hardware stack levels used:    1
 17968 ;; Hardware stack levels required when called:   14
 17969 ;; This function calls:
 17970 ;;		___ftdiv
 17971 ;;		___ftmul
 17972 ;; This function is called by:
 17973 ;;		_saveSysParams
 17974 ;;		_longPressENTER
 17975 ;; This function uses a non-reentrant model
 17976 ;;
 17977                           
 17978                           	psect	text72
 17979  006C02                     __ptext72:
 17980                           	opt stack 0
 17981  006C02                     _calcVars2ti:
 17982                           	opt stack 12
 17983                           
 17984                           ;sysParams.h: 97: tiXcorte = (float)kgXcorte / velocidadMasa;
 17985                           
 17986                           ;incstack = 0
 17987  006C02  C198  F112         	movff	_kgXcorte,___ftdiv@f1
 17988  006C06  C199  F113         	movff	_kgXcorte+1,___ftdiv@f1+1
 17989  006C0A  C19A  F114         	movff	_kgXcorte+2,___ftdiv@f1+2
 17990  006C0E  C18F  F115         	movff	_velocidadMasa,___ftdiv@f2
 17991  006C12  C190  F116         	movff	_velocidadMasa+1,___ftdiv@f2+1
 17992  006C16  C191  F117         	movff	_velocidadMasa+2,___ftdiv@f2+2
 17993  006C1A  EC7D  F01E         	call	___ftdiv	;wreg free
 17994  006C1E  C112  F195         	movff	?___ftdiv,_tiXcorte
 17995  006C22  C113  F196         	movff	?___ftdiv+1,_tiXcorte+1
 17996  006C26  C114  F197         	movff	?___ftdiv+2,_tiXcorte+2
 17997                           
 17998                           ;sysParams.h: 98: timsXcorte = (float)tiXcorte * 1000;
 17999  006C2A  C195  F114         	movff	_tiXcorte,___ftmul@f1
 18000  006C2E  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 18001  006C32  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 18002  006C36  0E00               	movlw	0
 18003  006C38  0101               	movlb	1	; () banked
 18004  006C3A  6F17               	movwf	___ftmul@f2& (0+255),b
 18005  006C3C  0E7A               	movlw	122
 18006  006C3E  0101               	movlb	1	; () banked
 18007  006C40  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 18008  006C42  0E44               	movlw	68
 18009  006C44  0101               	movlb	1	; () banked
 18010  006C46  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 18011  006C48  EC1F  F01D         	call	___ftmul	;wreg free
 18012  006C4C  C114  F053         	movff	?___ftmul,_timsXcorte
 18013  006C50  C115  F054         	movff	?___ftmul+1,_timsXcorte+1
 18014  006C54  C116  F055         	movff	?___ftmul+2,_timsXcorte+2
 18015  006C58  0012               	return		;funcret
 18016  006C5A                     __end_of_calcVars2ti:
 18017                           	opt stack 0
 18018                           tblptru	equ	0xFF8
 18019                           tblptrh	equ	0xFF7
 18020                           tblptrl	equ	0xFF6
 18021                           tablat	equ	0xFF5
 18022                           prodh	equ	0xFF4
 18023                           prodl	equ	0xFF3
 18024                           intcon	equ	0xFF2
 18025                           postinc0	equ	0xFEE
 18026                           wreg	equ	0xFE8
 18027                           postdec1	equ	0xFE5
 18028                           fsr1l	equ	0xFE1
 18029                           indf2	equ	0xFDF
 18030                           postinc2	equ	0xFDE
 18031                           postdec2	equ	0xFDD
 18032                           plusw2	equ	0xFDB
 18033                           fsr2h	equ	0xFDA
 18034                           fsr2l	equ	0xFD9
 18035                           status	equ	0xFD8
 18036                           
 18037 ;; *************** function ___ftmul *****************
 18038 ;; Defined at:
 18039 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
 18040 ;; Parameters:    Size  Location     Type
 18041 ;;  f1              3   20[BANK1 ] float 
 18042 ;;  f2              3   23[BANK1 ] float 
 18043 ;; Auto vars:     Size  Location     Type
 18044 ;;  f3_as_produc    3   30[BANK1 ] unsigned um
 18045 ;;  sign            1   34[BANK1 ] unsigned char 
 18046 ;;  cntr            1   33[BANK1 ] unsigned char 
 18047 ;;  exp             1   29[BANK1 ] unsigned char 
 18048 ;; Return value:  Size  Location     Type
 18049 ;;                  3   20[BANK1 ] float 
 18050 ;; Registers used:
 18051 ;;		wreg, status,2, status,0, cstack
 18052 ;; Tracked objects:
 18053 ;;		On entry : 0/0
 18054 ;;		On exit  : 0/0
 18055 ;;		Unchanged: 0/0
 18056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18057 ;;      Params:         0       0       6       0       0       0       0
 18058 ;;      Locals:         0       0       6       0       0       0       0
 18059 ;;      Temps:          0       0       3       0       0       0       0
 18060 ;;      Totals:         0       0      15       0       0       0       0
 18061 ;;Total ram usage:       15 bytes
 18062 ;; Hardware stack levels used:    1
 18063 ;; Hardware stack levels required when called:   13
 18064 ;; This function calls:
 18065 ;;		___ftpack
 18066 ;; This function is called by:
 18067 ;;		_calcSysVars
 18068 ;;		_calcVars2ti
 18069 ;;		_desintegrator
 18070 ;;		_longPressRETRO
 18071 ;;		_pressENTER
 18072 ;;		_longPressENTER
 18073 ;;		_fround
 18074 ;;		_scale
 18075 ;;		_printf
 18076 ;; This function uses a non-reentrant model
 18077 ;;
 18078                           
 18079                           	psect	text73
 18080  003A3E                     __ptext73:
 18081                           	opt stack 0
 18082  003A3E                     ___ftmul:
 18083                           	opt stack 15
 18084                           
 18085                           ;incstack = 0
 18086  003A3E  C116  F11A         	movff	___ftmul@f1+2,??___ftmul
 18087  003A42  0101               	movlb	1	; () banked
 18088  003A44  6B1B               	clrf	(??___ftmul+1)& (0+255),b
 18089  003A46  6B1C               	clrf	(??___ftmul+2)& (0+255),b
 18090  003A48  0101               	movlb	1	; () banked
 18091  003A4A  3515               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 18092  003A4C  0101               	movlb	1	; () banked
 18093  003A4E  371A               	rlcf	??___ftmul& (0+255),f,b
 18094  003A50  E301               	bnc	u14551
 18095  003A52  811B               	bsf	(??___ftmul+1)& (0+255),0,b
 18096  003A54                     u14551:
 18097  003A54  0101               	movlb	1	; () banked
 18098  003A56  511A               	movf	??___ftmul& (0+255),w,b
 18099  003A58  0101               	movlb	1	; () banked
 18100  003A5A  6F1D               	movwf	___ftmul@exp& (0+255),b
 18101  003A5C  0101               	movlb	1	; () banked
 18102  003A5E  511D               	movf	___ftmul@exp& (0+255),w,b
 18103  003A60  A4D8               	btfss	status,2,c
 18104  003A62  D00A               	goto	l9900
 18105                           
 18106                           ; BSR set to: 1
 18107  003A64  0E00               	movlw	0
 18108  003A66  0101               	movlb	1	; () banked
 18109  003A68  6F14               	movwf	?___ftmul& (0+255),b
 18110  003A6A  0E00               	movlw	0
 18111  003A6C  0101               	movlb	1	; () banked
 18112  003A6E  6F15               	movwf	(?___ftmul+1)& (0+255),b
 18113  003A70  0E00               	movlw	0
 18114  003A72  0101               	movlb	1	; () banked
 18115  003A74  6F16               	movwf	(?___ftmul+2)& (0+255),b
 18116                           
 18117                           ; BSR set to: 1
 18118  003A76  0012               	return	
 18119  003A78                     l9900:
 18120                           
 18121                           ; BSR set to: 1
 18122  003A78  C119  F11A         	movff	___ftmul@f2+2,??___ftmul
 18123  003A7C  0101               	movlb	1	; () banked
 18124  003A7E  6B1B               	clrf	(??___ftmul+1)& (0+255),b
 18125  003A80  6B1C               	clrf	(??___ftmul+2)& (0+255),b
 18126  003A82  0101               	movlb	1	; () banked
 18127  003A84  3518               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 18128  003A86  0101               	movlb	1	; () banked
 18129  003A88  371A               	rlcf	??___ftmul& (0+255),f,b
 18130  003A8A  E301               	bnc	u14571
 18131  003A8C  811B               	bsf	(??___ftmul+1)& (0+255),0,b
 18132  003A8E                     u14571:
 18133  003A8E  0101               	movlb	1	; () banked
 18134  003A90  511A               	movf	??___ftmul& (0+255),w,b
 18135  003A92  0101               	movlb	1	; () banked
 18136  003A94  6F22               	movwf	___ftmul@sign& (0+255),b
 18137  003A96  0101               	movlb	1	; () banked
 18138  003A98  5122               	movf	___ftmul@sign& (0+255),w,b
 18139  003A9A  A4D8               	btfss	status,2,c
 18140  003A9C  D00A               	goto	l9906
 18141                           
 18142                           ; BSR set to: 1
 18143  003A9E  0E00               	movlw	0
 18144  003AA0  0101               	movlb	1	; () banked
 18145  003AA2  6F14               	movwf	?___ftmul& (0+255),b
 18146  003AA4  0E00               	movlw	0
 18147  003AA6  0101               	movlb	1	; () banked
 18148  003AA8  6F15               	movwf	(?___ftmul+1)& (0+255),b
 18149  003AAA  0E00               	movlw	0
 18150  003AAC  0101               	movlb	1	; () banked
 18151  003AAE  6F16               	movwf	(?___ftmul+2)& (0+255),b
 18152                           
 18153                           ; BSR set to: 1
 18154  003AB0  0012               	return	
 18155  003AB2                     l9906:
 18156                           
 18157                           ; BSR set to: 1
 18158  003AB2  0101               	movlb	1	; () banked
 18159  003AB4  5122               	movf	___ftmul@sign& (0+255),w,b
 18160  003AB6  0F7B               	addlw	123
 18161  003AB8  0101               	movlb	1	; () banked
 18162  003ABA  271D               	addwf	___ftmul@exp& (0+255),f,b
 18163                           
 18164                           ; BSR set to: 1
 18165  003ABC  C116  F122         	movff	___ftmul@f1+2,___ftmul@sign
 18166  003AC0  0101               	movlb	1	; () banked
 18167  003AC2  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 18168  003AC4  0101               	movlb	1	; () banked
 18169  003AC6  1B22               	xorwf	___ftmul@sign& (0+255),f,b
 18170  003AC8  0E80               	movlw	128
 18171  003ACA  0101               	movlb	1	; () banked
 18172  003ACC  1722               	andwf	___ftmul@sign& (0+255),f,b
 18173                           
 18174                           ; BSR set to: 1
 18175  003ACE  0101               	movlb	1	; () banked
 18176  003AD0  8F15               	bsf	(___ftmul@f1+1)& (0+255),7,b
 18177                           
 18178                           ; BSR set to: 1
 18179  003AD2  0101               	movlb	1	; () banked
 18180  003AD4  8F18               	bsf	(___ftmul@f2+1)& (0+255),7,b
 18181                           
 18182                           ; BSR set to: 1
 18183  003AD6  0EFF               	movlw	255
 18184  003AD8  0101               	movlb	1	; () banked
 18185  003ADA  1717               	andwf	___ftmul@f2& (0+255),f,b
 18186  003ADC  0EFF               	movlw	255
 18187  003ADE  0101               	movlb	1	; () banked
 18188  003AE0  1718               	andwf	(___ftmul@f2+1)& (0+255),f,b
 18189  003AE2  0E00               	movlw	0
 18190  003AE4  0101               	movlb	1	; () banked
 18191  003AE6  1719               	andwf	(___ftmul@f2+2)& (0+255),f,b
 18192                           
 18193                           ; BSR set to: 1
 18194  003AE8  0E00               	movlw	0
 18195  003AEA  0101               	movlb	1	; () banked
 18196  003AEC  6F1E               	movwf	___ftmul@f3_as_product& (0+255),b
 18197  003AEE  0E00               	movlw	0
 18198  003AF0  0101               	movlb	1	; () banked
 18199  003AF2  6F1F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 18200  003AF4  0E00               	movlw	0
 18201  003AF6  0101               	movlb	1	; () banked
 18202  003AF8  6F20               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 18203                           
 18204                           ; BSR set to: 1
 18205  003AFA  0E07               	movlw	7
 18206  003AFC  0101               	movlb	1	; () banked
 18207  003AFE  6F21               	movwf	___ftmul@cntr& (0+255),b
 18208  003B00                     l9920:
 18209                           
 18210                           ; BSR set to: 1
 18211  003B00  0101               	movlb	1	; () banked
 18212  003B02  A114               	btfss	___ftmul@f1& (0+255),0,b
 18213  003B04  D00C               	goto	l9924
 18214                           
 18215                           ; BSR set to: 1
 18216  003B06  0101               	movlb	1	; () banked
 18217  003B08  5117               	movf	___ftmul@f2& (0+255),w,b
 18218  003B0A  0101               	movlb	1	; () banked
 18219  003B0C  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 18220  003B0E  0101               	movlb	1	; () banked
 18221  003B10  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
 18222  003B12  0101               	movlb	1	; () banked
 18223  003B14  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 18224  003B16  0101               	movlb	1	; () banked
 18225  003B18  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 18226  003B1A  0101               	movlb	1	; () banked
 18227  003B1C  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 18228  003B1E                     l9924:
 18229                           
 18230                           ; BSR set to: 1
 18231  003B1E  0101               	movlb	1	; () banked
 18232  003B20  90D8               	bcf	status,0,c
 18233  003B22  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 18234  003B24  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 18235  003B26  3314               	rrcf	___ftmul@f1& (0+255),f,b
 18236  003B28  0101               	movlb	1	; () banked
 18237  003B2A  90D8               	bcf	status,0,c
 18238  003B2C  3717               	rlcf	___ftmul@f2& (0+255),f,b
 18239  003B2E  3718               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 18240  003B30  3719               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 18241                           
 18242                           ; BSR set to: 1
 18243  003B32  0101               	movlb	1	; () banked
 18244  003B34  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
 18245  003B36  D7E4               	goto	l9920
 18246                           
 18247                           ; BSR set to: 1
 18248                           
 18249                           ; BSR set to: 1
 18250  003B38  0E09               	movlw	9
 18251  003B3A  0101               	movlb	1	; () banked
 18252  003B3C  6F21               	movwf	___ftmul@cntr& (0+255),b
 18253  003B3E                     l9930:
 18254                           
 18255                           ; BSR set to: 1
 18256  003B3E  0101               	movlb	1	; () banked
 18257  003B40  A114               	btfss	___ftmul@f1& (0+255),0,b
 18258  003B42  D00C               	goto	l9934
 18259                           
 18260                           ; BSR set to: 1
 18261  003B44  0101               	movlb	1	; () banked
 18262  003B46  5117               	movf	___ftmul@f2& (0+255),w,b
 18263  003B48  0101               	movlb	1	; () banked
 18264  003B4A  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 18265  003B4C  0101               	movlb	1	; () banked
 18266  003B4E  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
 18267  003B50  0101               	movlb	1	; () banked
 18268  003B52  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 18269  003B54  0101               	movlb	1	; () banked
 18270  003B56  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 18271  003B58  0101               	movlb	1	; () banked
 18272  003B5A  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 18273  003B5C                     l9934:
 18274                           
 18275                           ; BSR set to: 1
 18276  003B5C  0101               	movlb	1	; () banked
 18277  003B5E  90D8               	bcf	status,0,c
 18278  003B60  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 18279  003B62  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 18280  003B64  3314               	rrcf	___ftmul@f1& (0+255),f,b
 18281  003B66  0101               	movlb	1	; () banked
 18282  003B68  90D8               	bcf	status,0,c
 18283  003B6A  3320               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 18284  003B6C  331F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 18285  003B6E  331E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 18286                           
 18287                           ; BSR set to: 1
 18288  003B70  0101               	movlb	1	; () banked
 18289  003B72  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
 18290  003B74  D7E4               	goto	l9930
 18291                           
 18292                           ; BSR set to: 1
 18293                           
 18294                           ; BSR set to: 1
 18295  003B76  C11E  F100         	movff	___ftmul@f3_as_product,___ftpack@arg
 18296  003B7A  C11F  F101         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 18297  003B7E  C120  F102         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 18298  003B82  C11D  F103         	movff	___ftmul@exp,___ftpack@exp
 18299  003B86  C122  F104         	movff	___ftmul@sign,___ftpack@sign
 18300  003B8A  EC69  F025         	call	___ftpack	;wreg free
 18301  003B8E  C100  F114         	movff	?___ftpack,?___ftmul
 18302  003B92  C101  F115         	movff	?___ftpack+1,?___ftmul+1
 18303  003B96  C102  F116         	movff	?___ftpack+2,?___ftmul+2
 18304  003B9A  0012               	return	
 18305  003B9C                     __end_of___ftmul:
 18306                           	opt stack 0
 18307                           tblptru	equ	0xFF8
 18308                           tblptrh	equ	0xFF7
 18309                           tblptrl	equ	0xFF6
 18310                           tablat	equ	0xFF5
 18311                           prodh	equ	0xFF4
 18312                           prodl	equ	0xFF3
 18313                           intcon	equ	0xFF2
 18314                           postinc0	equ	0xFEE
 18315                           wreg	equ	0xFE8
 18316                           postdec1	equ	0xFE5
 18317                           fsr1l	equ	0xFE1
 18318                           indf2	equ	0xFDF
 18319                           postinc2	equ	0xFDE
 18320                           postdec2	equ	0xFDD
 18321                           plusw2	equ	0xFDB
 18322                           fsr2h	equ	0xFDA
 18323                           fsr2l	equ	0xFD9
 18324                           status	equ	0xFD8
 18325                           
 18326 ;; *************** function ___ftdiv *****************
 18327 ;; Defined at:
 18328 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
 18329 ;; Parameters:    Size  Location     Type
 18330 ;;  f1              3   18[BANK1 ] float 
 18331 ;;  f2              3   21[BANK1 ] float 
 18332 ;; Auto vars:     Size  Location     Type
 18333 ;;  f3              3   28[BANK1 ] float 
 18334 ;;  sign            1   32[BANK1 ] unsigned char 
 18335 ;;  exp             1   31[BANK1 ] unsigned char 
 18336 ;;  cntr            1   27[BANK1 ] unsigned char 
 18337 ;; Return value:  Size  Location     Type
 18338 ;;                  3   18[BANK1 ] float 
 18339 ;; Registers used:
 18340 ;;		wreg, status,2, status,0, cstack
 18341 ;; Tracked objects:
 18342 ;;		On entry : 0/0
 18343 ;;		On exit  : 0/0
 18344 ;;		Unchanged: 0/0
 18345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18346 ;;      Params:         0       0       6       0       0       0       0
 18347 ;;      Locals:         0       0       6       0       0       0       0
 18348 ;;      Temps:          0       0       3       0       0       0       0
 18349 ;;      Totals:         0       0      15       0       0       0       0
 18350 ;;Total ram usage:       15 bytes
 18351 ;; Hardware stack levels used:    1
 18352 ;; Hardware stack levels required when called:   13
 18353 ;; This function calls:
 18354 ;;		___ftpack
 18355 ;; This function is called by:
 18356 ;;		_calcVars2ti
 18357 ;;		_integrator
 18358 ;;		_longPressENTER
 18359 ;; This function uses a non-reentrant model
 18360 ;;
 18361                           
 18362                           	psect	text74
 18363  003CFA                     __ptext74:
 18364                           	opt stack 0
 18365  003CFA                     ___ftdiv:
 18366                           	opt stack 12
 18367                           
 18368                           ;incstack = 0
 18369  003CFA  C114  F118         	movff	___ftdiv@f1+2,??___ftdiv
 18370  003CFE  0101               	movlb	1	; () banked
 18371  003D00  6B19               	clrf	(??___ftdiv+1)& (0+255),b
 18372  003D02  6B1A               	clrf	(??___ftdiv+2)& (0+255),b
 18373  003D04  0101               	movlb	1	; () banked
 18374  003D06  3513               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 18375  003D08  0101               	movlb	1	; () banked
 18376  003D0A  3718               	rlcf	??___ftdiv& (0+255),f,b
 18377  003D0C  E301               	bnc	u14501
 18378  003D0E  8119               	bsf	(??___ftdiv+1)& (0+255),0,b
 18379  003D10                     u14501:
 18380  003D10  0101               	movlb	1	; () banked
 18381  003D12  5118               	movf	??___ftdiv& (0+255),w,b
 18382  003D14  0101               	movlb	1	; () banked
 18383  003D16  6F1F               	movwf	___ftdiv@exp& (0+255),b
 18384  003D18  0101               	movlb	1	; () banked
 18385  003D1A  511F               	movf	___ftdiv@exp& (0+255),w,b
 18386  003D1C  A4D8               	btfss	status,2,c
 18387  003D1E  D00A               	goto	l9854
 18388                           
 18389                           ; BSR set to: 1
 18390  003D20  0E00               	movlw	0
 18391  003D22  0101               	movlb	1	; () banked
 18392  003D24  6F12               	movwf	?___ftdiv& (0+255),b
 18393  003D26  0E00               	movlw	0
 18394  003D28  0101               	movlb	1	; () banked
 18395  003D2A  6F13               	movwf	(?___ftdiv+1)& (0+255),b
 18396  003D2C  0E00               	movlw	0
 18397  003D2E  0101               	movlb	1	; () banked
 18398  003D30  6F14               	movwf	(?___ftdiv+2)& (0+255),b
 18399                           
 18400                           ; BSR set to: 1
 18401  003D32  0012               	return	
 18402  003D34                     l9854:
 18403                           
 18404                           ; BSR set to: 1
 18405  003D34  C117  F118         	movff	___ftdiv@f2+2,??___ftdiv
 18406  003D38  0101               	movlb	1	; () banked
 18407  003D3A  6B19               	clrf	(??___ftdiv+1)& (0+255),b
 18408  003D3C  6B1A               	clrf	(??___ftdiv+2)& (0+255),b
 18409  003D3E  0101               	movlb	1	; () banked
 18410  003D40  3516               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 18411  003D42  0101               	movlb	1	; () banked
 18412  003D44  3718               	rlcf	??___ftdiv& (0+255),f,b
 18413  003D46  E301               	bnc	u14521
 18414  003D48  8119               	bsf	(??___ftdiv+1)& (0+255),0,b
 18415  003D4A                     u14521:
 18416  003D4A  0101               	movlb	1	; () banked
 18417  003D4C  5118               	movf	??___ftdiv& (0+255),w,b
 18418  003D4E  0101               	movlb	1	; () banked
 18419  003D50  6F20               	movwf	___ftdiv@sign& (0+255),b
 18420  003D52  0101               	movlb	1	; () banked
 18421  003D54  5120               	movf	___ftdiv@sign& (0+255),w,b
 18422  003D56  A4D8               	btfss	status,2,c
 18423  003D58  D00A               	goto	l9860
 18424                           
 18425                           ; BSR set to: 1
 18426  003D5A  0E00               	movlw	0
 18427  003D5C  0101               	movlb	1	; () banked
 18428  003D5E  6F12               	movwf	?___ftdiv& (0+255),b
 18429  003D60  0E00               	movlw	0
 18430  003D62  0101               	movlb	1	; () banked
 18431  003D64  6F13               	movwf	(?___ftdiv+1)& (0+255),b
 18432  003D66  0E00               	movlw	0
 18433  003D68  0101               	movlb	1	; () banked
 18434  003D6A  6F14               	movwf	(?___ftdiv+2)& (0+255),b
 18435                           
 18436                           ; BSR set to: 1
 18437  003D6C  0012               	return	
 18438  003D6E                     l9860:
 18439                           
 18440                           ; BSR set to: 1
 18441  003D6E  0E00               	movlw	0
 18442  003D70  0101               	movlb	1	; () banked
 18443  003D72  6F1C               	movwf	___ftdiv@f3& (0+255),b
 18444  003D74  0E00               	movlw	0
 18445  003D76  0101               	movlb	1	; () banked
 18446  003D78  6F1D               	movwf	(___ftdiv@f3+1)& (0+255),b
 18447  003D7A  0E00               	movlw	0
 18448  003D7C  0101               	movlb	1	; () banked
 18449  003D7E  6F1E               	movwf	(___ftdiv@f3+2)& (0+255),b
 18450                           
 18451                           ; BSR set to: 1
 18452  003D80  0101               	movlb	1	; () banked
 18453  003D82  5120               	movf	___ftdiv@sign& (0+255),w,b
 18454  003D84  0F89               	addlw	137
 18455  003D86  0101               	movlb	1	; () banked
 18456  003D88  5F1F               	subwf	___ftdiv@exp& (0+255),f,b
 18457                           
 18458                           ; BSR set to: 1
 18459  003D8A  C114  F120         	movff	___ftdiv@f1+2,___ftdiv@sign
 18460                           
 18461                           ; BSR set to: 1
 18462  003D8E  0101               	movlb	1	; () banked
 18463  003D90  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 18464  003D92  0101               	movlb	1	; () banked
 18465  003D94  1B20               	xorwf	___ftdiv@sign& (0+255),f,b
 18466                           
 18467                           ; BSR set to: 1
 18468  003D96  0E80               	movlw	128
 18469  003D98  0101               	movlb	1	; () banked
 18470  003D9A  1720               	andwf	___ftdiv@sign& (0+255),f,b
 18471                           
 18472                           ; BSR set to: 1
 18473  003D9C  0101               	movlb	1	; () banked
 18474  003D9E  8F13               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 18475                           
 18476                           ; BSR set to: 1
 18477  003DA0  0EFF               	movlw	255
 18478  003DA2  0101               	movlb	1	; () banked
 18479  003DA4  1712               	andwf	___ftdiv@f1& (0+255),f,b
 18480  003DA6  0EFF               	movlw	255
 18481  003DA8  0101               	movlb	1	; () banked
 18482  003DAA  1713               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 18483  003DAC  0E00               	movlw	0
 18484  003DAE  0101               	movlb	1	; () banked
 18485  003DB0  1714               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 18486                           
 18487                           ; BSR set to: 1
 18488  003DB2  0101               	movlb	1	; () banked
 18489  003DB4  8F16               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 18490                           
 18491                           ; BSR set to: 1
 18492  003DB6  0EFF               	movlw	255
 18493  003DB8  0101               	movlb	1	; () banked
 18494  003DBA  1715               	andwf	___ftdiv@f2& (0+255),f,b
 18495  003DBC  0EFF               	movlw	255
 18496  003DBE  0101               	movlb	1	; () banked
 18497  003DC0  1716               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 18498  003DC2  0E00               	movlw	0
 18499  003DC4  0101               	movlb	1	; () banked
 18500  003DC6  1717               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 18501                           
 18502                           ; BSR set to: 1
 18503  003DC8  0E18               	movlw	24
 18504  003DCA  0101               	movlb	1	; () banked
 18505  003DCC  6F1B               	movwf	___ftdiv@cntr& (0+255),b
 18506  003DCE                     l9880:
 18507                           
 18508                           ; BSR set to: 1
 18509  003DCE  0101               	movlb	1	; () banked
 18510  003DD0  90D8               	bcf	status,0,c
 18511  003DD2  371C               	rlcf	___ftdiv@f3& (0+255),f,b
 18512  003DD4  371D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 18513  003DD6  371E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 18514                           
 18515                           ; BSR set to: 1
 18516  003DD8  0101               	movlb	1	; () banked
 18517  003DDA  5115               	movf	___ftdiv@f2& (0+255),w,b
 18518  003DDC  0101               	movlb	1	; () banked
 18519  003DDE  5D12               	subwf	___ftdiv@f1& (0+255),w,b
 18520  003DE0  0101               	movlb	1	; () banked
 18521  003DE2  5116               	movf	(___ftdiv@f2+1)& (0+255),w,b
 18522  003DE4  0101               	movlb	1	; () banked
 18523  003DE6  5913               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 18524  003DE8  0101               	movlb	1	; () banked
 18525  003DEA  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 18526  003DEC  0101               	movlb	1	; () banked
 18527  003DEE  5914               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 18528  003DF0  A0D8               	btfss	status,0,c
 18529  003DF2  D00E               	goto	l1369
 18530                           
 18531                           ; BSR set to: 1
 18532  003DF4  0101               	movlb	1	; () banked
 18533  003DF6  5115               	movf	___ftdiv@f2& (0+255),w,b
 18534  003DF8  0101               	movlb	1	; () banked
 18535  003DFA  5F12               	subwf	___ftdiv@f1& (0+255),f,b
 18536  003DFC  0101               	movlb	1	; () banked
 18537  003DFE  5116               	movf	(___ftdiv@f2+1)& (0+255),w,b
 18538  003E00  0101               	movlb	1	; () banked
 18539  003E02  5B13               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 18540  003E04  0101               	movlb	1	; () banked
 18541  003E06  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 18542  003E08  0101               	movlb	1	; () banked
 18543  003E0A  5B14               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 18544                           
 18545                           ; BSR set to: 1
 18546  003E0C  0101               	movlb	1	; () banked
 18547  003E0E  811C               	bsf	___ftdiv@f3& (0+255),0,b
 18548  003E10                     l1369:
 18549                           
 18550                           ; BSR set to: 1
 18551  003E10  0101               	movlb	1	; () banked
 18552  003E12  90D8               	bcf	status,0,c
 18553  003E14  3712               	rlcf	___ftdiv@f1& (0+255),f,b
 18554  003E16  3713               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 18555  003E18  3714               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 18556                           
 18557                           ; BSR set to: 1
 18558  003E1A  0101               	movlb	1	; () banked
 18559  003E1C  2F1B               	decfsz	___ftdiv@cntr& (0+255),f,b
 18560  003E1E  D7D7               	goto	l9880
 18561                           
 18562                           ; BSR set to: 1
 18563                           
 18564                           ; BSR set to: 1
 18565  003E20  C11C  F100         	movff	___ftdiv@f3,___ftpack@arg
 18566  003E24  C11D  F101         	movff	___ftdiv@f3+1,___ftpack@arg+1
 18567  003E28  C11E  F102         	movff	___ftdiv@f3+2,___ftpack@arg+2
 18568  003E2C  C11F  F103         	movff	___ftdiv@exp,___ftpack@exp
 18569  003E30  C120  F104         	movff	___ftdiv@sign,___ftpack@sign
 18570  003E34  EC69  F025         	call	___ftpack	;wreg free
 18571  003E38  C100  F112         	movff	?___ftpack,?___ftdiv
 18572  003E3C  C101  F113         	movff	?___ftpack+1,?___ftdiv+1
 18573  003E40  C102  F114         	movff	?___ftpack+2,?___ftdiv+2
 18574  003E44  0012               	return	
 18575  003E46                     __end_of___ftdiv:
 18576                           	opt stack 0
 18577                           tblptru	equ	0xFF8
 18578                           tblptrh	equ	0xFF7
 18579                           tblptrl	equ	0xFF6
 18580                           tablat	equ	0xFF5
 18581                           prodh	equ	0xFF4
 18582                           prodl	equ	0xFF3
 18583                           intcon	equ	0xFF2
 18584                           postinc0	equ	0xFEE
 18585                           wreg	equ	0xFE8
 18586                           postdec1	equ	0xFE5
 18587                           fsr1l	equ	0xFE1
 18588                           indf2	equ	0xFDF
 18589                           postinc2	equ	0xFDE
 18590                           postdec2	equ	0xFDD
 18591                           plusw2	equ	0xFDB
 18592                           fsr2h	equ	0xFDA
 18593                           fsr2l	equ	0xFD9
 18594                           status	equ	0xFD8
 18595                           
 18596 ;; *************** function ___ftadd *****************
 18597 ;; Defined at:
 18598 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
 18599 ;; Parameters:    Size  Location     Type
 18600 ;;  f1              3   45[BANK1 ] float 
 18601 ;;  f2              3   48[BANK1 ] float 
 18602 ;; Auto vars:     Size  Location     Type
 18603 ;;  exp1            1   56[BANK1 ] unsigned char 
 18604 ;;  exp2            1   55[BANK1 ] unsigned char 
 18605 ;;  sign            1   54[BANK1 ] unsigned char 
 18606 ;; Return value:  Size  Location     Type
 18607 ;;                  3   45[BANK1 ] float 
 18608 ;; Registers used:
 18609 ;;		wreg, status,2, status,0, cstack
 18610 ;; Tracked objects:
 18611 ;;		On entry : 0/0
 18612 ;;		On exit  : 0/0
 18613 ;;		Unchanged: 0/0
 18614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18615 ;;      Params:         0       0       6       0       0       0       0
 18616 ;;      Locals:         0       0       3       0       0       0       0
 18617 ;;      Temps:          0       0       3       0       0       0       0
 18618 ;;      Totals:         0       0      12       0       0       0       0
 18619 ;;Total ram usage:       12 bytes
 18620 ;; Hardware stack levels used:    1
 18621 ;; Hardware stack levels required when called:   13
 18622 ;; This function calls:
 18623 ;;		___ftpack
 18624 ;; This function is called by:
 18625 ;;		_longPressENTER
 18626 ;;		_printf
 18627 ;;		___ftsub
 18628 ;; This function uses a non-reentrant model
 18629 ;;
 18630                           
 18631                           	psect	text75
 18632  0027D8                     __ptext75:
 18633                           	opt stack 0
 18634  0027D8                     ___ftadd:
 18635                           	opt stack 13
 18636                           
 18637                           ;incstack = 0
 18638  0027D8  C12F  F133         	movff	___ftadd@f1+2,??___ftadd
 18639  0027DC  0101               	movlb	1	; () banked
 18640  0027DE  6B34               	clrf	(??___ftadd+1)& (0+255),b
 18641  0027E0  6B35               	clrf	(??___ftadd+2)& (0+255),b
 18642  0027E2  0101               	movlb	1	; () banked
 18643  0027E4  352E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 18644  0027E6  0101               	movlb	1	; () banked
 18645  0027E8  3733               	rlcf	??___ftadd& (0+255),f,b
 18646  0027EA  E301               	bnc	u14291
 18647  0027EC  8134               	bsf	(??___ftadd+1)& (0+255),0,b
 18648  0027EE                     u14291:
 18649  0027EE  0101               	movlb	1	; () banked
 18650  0027F0  5133               	movf	??___ftadd& (0+255),w,b
 18651  0027F2  0101               	movlb	1	; () banked
 18652  0027F4  6F38               	movwf	___ftadd@exp1& (0+255),b
 18653  0027F6  C132  F133         	movff	___ftadd@f2+2,??___ftadd
 18654  0027FA  0101               	movlb	1	; () banked
 18655  0027FC  6B34               	clrf	(??___ftadd+1)& (0+255),b
 18656  0027FE  6B35               	clrf	(??___ftadd+2)& (0+255),b
 18657  002800  0101               	movlb	1	; () banked
 18658  002802  3531               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 18659  002804  0101               	movlb	1	; () banked
 18660  002806  3733               	rlcf	??___ftadd& (0+255),f,b
 18661  002808  E301               	bnc	u14301
 18662  00280A  8134               	bsf	(??___ftadd+1)& (0+255),0,b
 18663  00280C                     u14301:
 18664  00280C  0101               	movlb	1	; () banked
 18665  00280E  5133               	movf	??___ftadd& (0+255),w,b
 18666  002810  0101               	movlb	1	; () banked
 18667  002812  6F37               	movwf	___ftadd@exp2& (0+255),b
 18668                           
 18669                           ; BSR set to: 1
 18670  002814  0101               	movlb	1	; () banked
 18671  002816  5138               	movf	___ftadd@exp1& (0+255),w,b
 18672  002818  0101               	movlb	1	; () banked
 18673  00281A  B4D8               	btfsc	status,2,c
 18674  00281C  D011               	goto	l1334
 18675                           
 18676                           ; BSR set to: 1
 18677  00281E  0101               	movlb	1	; () banked
 18678  002820  5137               	movf	___ftadd@exp2& (0+255),w,b
 18679  002822  0101               	movlb	1	; () banked
 18680  002824  5D38               	subwf	___ftadd@exp1& (0+255),w,b
 18681  002826  B0D8               	btfsc	status,0,c
 18682  002828  D012               	goto	l9786
 18683                           
 18684                           ; BSR set to: 1
 18685  00282A  0101               	movlb	1	; () banked
 18686  00282C  5138               	movf	___ftadd@exp1& (0+255),w,b
 18687  00282E  0800               	sublw	0
 18688  002830  0101               	movlb	1	; () banked
 18689  002832  2537               	addwf	___ftadd@exp2& (0+255),w,b
 18690  002834  0101               	movlb	1	; () banked
 18691  002836  6F33               	movwf	??___ftadd& (0+255),b
 18692  002838  0E18               	movlw	24
 18693  00283A  0101               	movlb	1	; () banked
 18694  00283C  6533               	cpfsgt	??___ftadd& (0+255),b
 18695  00283E  D007               	goto	l9786
 18696  002840                     l1334:
 18697                           
 18698                           ; BSR set to: 1
 18699  002840  C130  F12D         	movff	___ftadd@f2,?___ftadd
 18700  002844  C131  F12E         	movff	___ftadd@f2+1,?___ftadd+1
 18701  002848  C132  F12F         	movff	___ftadd@f2+2,?___ftadd+2
 18702  00284C  0012               	return	
 18703  00284E                     l9786:
 18704                           
 18705                           ; BSR set to: 1
 18706  00284E  0101               	movlb	1	; () banked
 18707  002850  5137               	movf	___ftadd@exp2& (0+255),w,b
 18708  002852  0101               	movlb	1	; () banked
 18709  002854  B4D8               	btfsc	status,2,c
 18710  002856  D011               	goto	l1338
 18711                           
 18712                           ; BSR set to: 1
 18713  002858  0101               	movlb	1	; () banked
 18714  00285A  5138               	movf	___ftadd@exp1& (0+255),w,b
 18715  00285C  0101               	movlb	1	; () banked
 18716  00285E  5D37               	subwf	___ftadd@exp2& (0+255),w,b
 18717  002860  B0D8               	btfsc	status,0,c
 18718  002862  D012               	goto	l9792
 18719                           
 18720                           ; BSR set to: 1
 18721  002864  0101               	movlb	1	; () banked
 18722  002866  5137               	movf	___ftadd@exp2& (0+255),w,b
 18723  002868  0800               	sublw	0
 18724  00286A  0101               	movlb	1	; () banked
 18725  00286C  2538               	addwf	___ftadd@exp1& (0+255),w,b
 18726  00286E  0101               	movlb	1	; () banked
 18727  002870  6F33               	movwf	??___ftadd& (0+255),b
 18728  002872  0E18               	movlw	24
 18729  002874  0101               	movlb	1	; () banked
 18730  002876  6533               	cpfsgt	??___ftadd& (0+255),b
 18731  002878  D007               	goto	l9792
 18732  00287A                     l1338:
 18733                           
 18734                           ; BSR set to: 1
 18735  00287A  C12D  F12D         	movff	___ftadd@f1,?___ftadd
 18736  00287E  C12E  F12E         	movff	___ftadd@f1+1,?___ftadd+1
 18737  002882  C12F  F12F         	movff	___ftadd@f1+2,?___ftadd+2
 18738  002886  0012               	return	
 18739  002888                     l9792:
 18740                           
 18741                           ; BSR set to: 1
 18742  002888  0E06               	movlw	6
 18743  00288A  0101               	movlb	1	; () banked
 18744  00288C  6F36               	movwf	___ftadd@sign& (0+255),b
 18745                           
 18746                           ; BSR set to: 1
 18747  00288E  0101               	movlb	1	; () banked
 18748  002890  AF2F               	btfss	(___ftadd@f1+2)& (0+255),7,b
 18749  002892  D002               	goto	l9798
 18750                           
 18751                           ; BSR set to: 1
 18752  002894  0101               	movlb	1	; () banked
 18753  002896  8F36               	bsf	___ftadd@sign& (0+255),7,b
 18754  002898                     l9798:
 18755                           
 18756                           ; BSR set to: 1
 18757  002898  0101               	movlb	1	; () banked
 18758  00289A  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
 18759  00289C  D002               	goto	l1340
 18760                           
 18761                           ; BSR set to: 1
 18762  00289E  0101               	movlb	1	; () banked
 18763  0028A0  8D36               	bsf	___ftadd@sign& (0+255),6,b
 18764  0028A2                     l1340:
 18765                           
 18766                           ; BSR set to: 1
 18767  0028A2  0101               	movlb	1	; () banked
 18768  0028A4  8F2E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 18769                           
 18770                           ; BSR set to: 1
 18771  0028A6  0EFF               	movlw	255
 18772  0028A8  0101               	movlb	1	; () banked
 18773  0028AA  172D               	andwf	___ftadd@f1& (0+255),f,b
 18774  0028AC  0EFF               	movlw	255
 18775  0028AE  0101               	movlb	1	; () banked
 18776  0028B0  172E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 18777  0028B2  0E00               	movlw	0
 18778  0028B4  0101               	movlb	1	; () banked
 18779  0028B6  172F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 18780  0028B8  0101               	movlb	1	; () banked
 18781  0028BA  8F31               	bsf	(___ftadd@f2+1)& (0+255),7,b
 18782                           
 18783                           ; BSR set to: 1
 18784  0028BC  0EFF               	movlw	255
 18785  0028BE  0101               	movlb	1	; () banked
 18786  0028C0  1730               	andwf	___ftadd@f2& (0+255),f,b
 18787  0028C2  0EFF               	movlw	255
 18788  0028C4  0101               	movlb	1	; () banked
 18789  0028C6  1731               	andwf	(___ftadd@f2+1)& (0+255),f,b
 18790  0028C8  0E00               	movlw	0
 18791  0028CA  0101               	movlb	1	; () banked
 18792  0028CC  1732               	andwf	(___ftadd@f2+2)& (0+255),f,b
 18793                           
 18794                           ; BSR set to: 1
 18795  0028CE  0101               	movlb	1	; () banked
 18796  0028D0  5137               	movf	___ftadd@exp2& (0+255),w,b
 18797  0028D2  0101               	movlb	1	; () banked
 18798  0028D4  5D38               	subwf	___ftadd@exp1& (0+255),w,b
 18799  0028D6  B0D8               	btfsc	status,0,c
 18800  0028D8  D025               	goto	l9818
 18801  0028DA                     l9808:
 18802                           
 18803                           ; BSR set to: 1
 18804  0028DA  0101               	movlb	1	; () banked
 18805  0028DC  90D8               	bcf	status,0,c
 18806  0028DE  3730               	rlcf	___ftadd@f2& (0+255),f,b
 18807  0028E0  3731               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 18808  0028E2  3732               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 18809  0028E4  0101               	movlb	1	; () banked
 18810  0028E6  0737               	decf	___ftadd@exp2& (0+255),f,b
 18811                           
 18812                           ; BSR set to: 1
 18813  0028E8  0101               	movlb	1	; () banked
 18814  0028EA  5138               	movf	___ftadd@exp1& (0+255),w,b
 18815  0028EC  0101               	movlb	1	; () banked
 18816  0028EE  1937               	xorwf	___ftadd@exp2& (0+255),w,b
 18817  0028F0  B4D8               	btfsc	status,2,c
 18818  0028F2  D011               	goto	l9816
 18819                           
 18820                           ; BSR set to: 1
 18821  0028F4  0101               	movlb	1	; () banked
 18822  0028F6  0736               	decf	___ftadd@sign& (0+255),f,b
 18823  0028F8  C136  F133         	movff	___ftadd@sign,??___ftadd
 18824  0028FC  0E07               	movlw	7
 18825  0028FE  0101               	movlb	1	; () banked
 18826  002900  1733               	andwf	??___ftadd& (0+255),f,b
 18827  002902  B4D8               	btfsc	status,2,c
 18828  002904  D008               	goto	l9816
 18829  002906  D7E9               	goto	l9808
 18830  002908                     l9814:
 18831                           
 18832                           ; BSR set to: 1
 18833  002908  0101               	movlb	1	; () banked
 18834  00290A  90D8               	bcf	status,0,c
 18835  00290C  332F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 18836  00290E  332E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 18837  002910  332D               	rrcf	___ftadd@f1& (0+255),f,b
 18838  002912  0101               	movlb	1	; () banked
 18839  002914  2B38               	incf	___ftadd@exp1& (0+255),f,b
 18840  002916                     l9816:
 18841                           
 18842                           ; BSR set to: 1
 18843  002916  0101               	movlb	1	; () banked
 18844  002918  5137               	movf	___ftadd@exp2& (0+255),w,b
 18845  00291A  0101               	movlb	1	; () banked
 18846  00291C  1938               	xorwf	___ftadd@exp1& (0+255),w,b
 18847  00291E  B4D8               	btfsc	status,2,c
 18848  002920  D02B               	goto	l1349
 18849  002922  D7F2               	goto	l9814
 18850  002924                     l9818:
 18851                           
 18852                           ; BSR set to: 1
 18853  002924  0101               	movlb	1	; () banked
 18854  002926  5138               	movf	___ftadd@exp1& (0+255),w,b
 18855  002928  0101               	movlb	1	; () banked
 18856  00292A  5D37               	subwf	___ftadd@exp2& (0+255),w,b
 18857  00292C  B0D8               	btfsc	status,0,c
 18858  00292E  D024               	goto	l1349
 18859  002930                     l9820:
 18860                           
 18861                           ; BSR set to: 1
 18862  002930  0101               	movlb	1	; () banked
 18863  002932  90D8               	bcf	status,0,c
 18864  002934  372D               	rlcf	___ftadd@f1& (0+255),f,b
 18865  002936  372E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 18866  002938  372F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 18867  00293A  0101               	movlb	1	; () banked
 18868  00293C  0738               	decf	___ftadd@exp1& (0+255),f,b
 18869                           
 18870                           ; BSR set to: 1
 18871  00293E  0101               	movlb	1	; () banked
 18872  002940  5138               	movf	___ftadd@exp1& (0+255),w,b
 18873  002942  0101               	movlb	1	; () banked
 18874  002944  1937               	xorwf	___ftadd@exp2& (0+255),w,b
 18875  002946  B4D8               	btfsc	status,2,c
 18876  002948  D011               	goto	l9828
 18877                           
 18878                           ; BSR set to: 1
 18879  00294A  0101               	movlb	1	; () banked
 18880  00294C  0736               	decf	___ftadd@sign& (0+255),f,b
 18881  00294E  C136  F133         	movff	___ftadd@sign,??___ftadd
 18882  002952  0E07               	movlw	7
 18883  002954  0101               	movlb	1	; () banked
 18884  002956  1733               	andwf	??___ftadd& (0+255),f,b
 18885  002958  B4D8               	btfsc	status,2,c
 18886  00295A  D008               	goto	l9828
 18887  00295C  D7E9               	goto	l9820
 18888  00295E                     l9826:
 18889                           
 18890                           ; BSR set to: 1
 18891  00295E  0101               	movlb	1	; () banked
 18892  002960  90D8               	bcf	status,0,c
 18893  002962  3332               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 18894  002964  3331               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 18895  002966  3330               	rrcf	___ftadd@f2& (0+255),f,b
 18896  002968  0101               	movlb	1	; () banked
 18897  00296A  2B37               	incf	___ftadd@exp2& (0+255),f,b
 18898  00296C                     l9828:
 18899                           
 18900                           ; BSR set to: 1
 18901  00296C  0101               	movlb	1	; () banked
 18902  00296E  5137               	movf	___ftadd@exp2& (0+255),w,b
 18903  002970  0101               	movlb	1	; () banked
 18904  002972  1938               	xorwf	___ftadd@exp1& (0+255),w,b
 18905  002974  A4D8               	btfss	status,2,c
 18906  002976  D7F3               	goto	l9826
 18907  002978                     l1349:
 18908                           
 18909                           ; BSR set to: 1
 18910  002978  0101               	movlb	1	; () banked
 18911  00297A  AF36               	btfss	___ftadd@sign& (0+255),7,b
 18912  00297C  D012               	goto	l1358
 18913                           
 18914                           ; BSR set to: 1
 18915  00297E  0EFF               	movlw	255
 18916  002980  0101               	movlb	1	; () banked
 18917  002982  1B2D               	xorwf	___ftadd@f1& (0+255),f,b
 18918  002984  0EFF               	movlw	255
 18919  002986  0101               	movlb	1	; () banked
 18920  002988  1B2E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 18921  00298A  0EFF               	movlw	255
 18922  00298C  0101               	movlb	1	; () banked
 18923  00298E  1B2F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 18924  002990  0E01               	movlw	1
 18925  002992  0101               	movlb	1	; () banked
 18926  002994  272D               	addwf	___ftadd@f1& (0+255),f,b
 18927  002996  0E00               	movlw	0
 18928  002998  0101               	movlb	1	; () banked
 18929  00299A  232E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 18930  00299C  0E00               	movlw	0
 18931  00299E  0101               	movlb	1	; () banked
 18932  0029A0  232F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 18933  0029A2                     l1358:
 18934                           
 18935                           ; BSR set to: 1
 18936  0029A2  0101               	movlb	1	; () banked
 18937  0029A4  AD36               	btfss	___ftadd@sign& (0+255),6,b
 18938  0029A6  D012               	goto	l9834
 18939                           
 18940                           ; BSR set to: 1
 18941  0029A8  0EFF               	movlw	255
 18942  0029AA  0101               	movlb	1	; () banked
 18943  0029AC  1B30               	xorwf	___ftadd@f2& (0+255),f,b
 18944  0029AE  0EFF               	movlw	255
 18945  0029B0  0101               	movlb	1	; () banked
 18946  0029B2  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 18947  0029B4  0EFF               	movlw	255
 18948  0029B6  0101               	movlb	1	; () banked
 18949  0029B8  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 18950  0029BA  0E01               	movlw	1
 18951  0029BC  0101               	movlb	1	; () banked
 18952  0029BE  2730               	addwf	___ftadd@f2& (0+255),f,b
 18953  0029C0  0E00               	movlw	0
 18954  0029C2  0101               	movlb	1	; () banked
 18955  0029C4  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18956  0029C6  0E00               	movlw	0
 18957  0029C8  0101               	movlb	1	; () banked
 18958  0029CA  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18959  0029CC                     l9834:
 18960                           
 18961                           ; BSR set to: 1
 18962  0029CC  0E00               	movlw	0
 18963  0029CE  0101               	movlb	1	; () banked
 18964  0029D0  6F36               	movwf	___ftadd@sign& (0+255),b
 18965                           
 18966                           ; BSR set to: 1
 18967  0029D2  0101               	movlb	1	; () banked
 18968  0029D4  512D               	movf	___ftadd@f1& (0+255),w,b
 18969  0029D6  0101               	movlb	1	; () banked
 18970  0029D8  2730               	addwf	___ftadd@f2& (0+255),f,b
 18971  0029DA  0101               	movlb	1	; () banked
 18972  0029DC  512E               	movf	(___ftadd@f1+1)& (0+255),w,b
 18973  0029DE  0101               	movlb	1	; () banked
 18974  0029E0  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18975  0029E2  0101               	movlb	1	; () banked
 18976  0029E4  512F               	movf	(___ftadd@f1+2)& (0+255),w,b
 18977  0029E6  0101               	movlb	1	; () banked
 18978  0029E8  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18979                           
 18980                           ; BSR set to: 1
 18981  0029EA  0101               	movlb	1	; () banked
 18982  0029EC  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
 18983  0029EE  D015               	goto	l9844
 18984                           
 18985                           ; BSR set to: 1
 18986  0029F0  0EFF               	movlw	255
 18987  0029F2  0101               	movlb	1	; () banked
 18988  0029F4  1B30               	xorwf	___ftadd@f2& (0+255),f,b
 18989  0029F6  0EFF               	movlw	255
 18990  0029F8  0101               	movlb	1	; () banked
 18991  0029FA  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 18992  0029FC  0EFF               	movlw	255
 18993  0029FE  0101               	movlb	1	; () banked
 18994  002A00  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 18995  002A02  0E01               	movlw	1
 18996  002A04  0101               	movlb	1	; () banked
 18997  002A06  2730               	addwf	___ftadd@f2& (0+255),f,b
 18998  002A08  0E00               	movlw	0
 18999  002A0A  0101               	movlb	1	; () banked
 19000  002A0C  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 19001  002A0E  0E00               	movlw	0
 19002  002A10  0101               	movlb	1	; () banked
 19003  002A12  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 19004                           
 19005                           ; BSR set to: 1
 19006  002A14  0E01               	movlw	1
 19007  002A16  0101               	movlb	1	; () banked
 19008  002A18  6F36               	movwf	___ftadd@sign& (0+255),b
 19009  002A1A                     l9844:
 19010                           
 19011                           ; BSR set to: 1
 19012  002A1A  C130  F100         	movff	___ftadd@f2,___ftpack@arg
 19013  002A1E  C131  F101         	movff	___ftadd@f2+1,___ftpack@arg+1
 19014  002A22  C132  F102         	movff	___ftadd@f2+2,___ftpack@arg+2
 19015  002A26  C138  F103         	movff	___ftadd@exp1,___ftpack@exp
 19016  002A2A  C136  F104         	movff	___ftadd@sign,___ftpack@sign
 19017  002A2E  EC69  F025         	call	___ftpack	;wreg free
 19018  002A32  C100  F12D         	movff	?___ftpack,?___ftadd
 19019  002A36  C101  F12E         	movff	?___ftpack+1,?___ftadd+1
 19020  002A3A  C102  F12F         	movff	?___ftpack+2,?___ftadd+2
 19021  002A3E  0012               	return	
 19022  002A40                     __end_of___ftadd:
 19023                           	opt stack 0
 19024                           tblptru	equ	0xFF8
 19025                           tblptrh	equ	0xFF7
 19026                           tblptrl	equ	0xFF6
 19027                           tablat	equ	0xFF5
 19028                           prodh	equ	0xFF4
 19029                           prodl	equ	0xFF3
 19030                           intcon	equ	0xFF2
 19031                           postinc0	equ	0xFEE
 19032                           wreg	equ	0xFE8
 19033                           postdec1	equ	0xFE5
 19034                           fsr1l	equ	0xFE1
 19035                           indf2	equ	0xFDF
 19036                           postinc2	equ	0xFDE
 19037                           postdec2	equ	0xFDD
 19038                           plusw2	equ	0xFDB
 19039                           fsr2h	equ	0xFDA
 19040                           fsr2l	equ	0xFD9
 19041                           status	equ	0xFD8
 19042                           
 19043 ;; *************** function ___ftpack *****************
 19044 ;; Defined at:
 19045 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
 19046 ;; Parameters:    Size  Location     Type
 19047 ;;  arg             3    0[BANK1 ] unsigned um
 19048 ;;  exp             1    3[BANK1 ] unsigned char 
 19049 ;;  sign            1    4[BANK1 ] unsigned char 
 19050 ;; Auto vars:     Size  Location     Type
 19051 ;;		None
 19052 ;; Return value:  Size  Location     Type
 19053 ;;                  3    0[BANK1 ] float 
 19054 ;; Registers used:
 19055 ;;		wreg, status,2, status,0
 19056 ;; Tracked objects:
 19057 ;;		On entry : 0/0
 19058 ;;		On exit  : 0/0
 19059 ;;		Unchanged: 0/0
 19060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19061 ;;      Params:         0       0       5       0       0       0       0
 19062 ;;      Locals:         0       0       0       0       0       0       0
 19063 ;;      Temps:          0       0       3       0       0       0       0
 19064 ;;      Totals:         0       0       8       0       0       0       0
 19065 ;;Total ram usage:        8 bytes
 19066 ;; Hardware stack levels used:    1
 19067 ;; Hardware stack levels required when called:   12
 19068 ;; This function calls:
 19069 ;;		Nothing
 19070 ;; This function is called by:
 19071 ;;		___altoft
 19072 ;;		___ftadd
 19073 ;;		___ftdiv
 19074 ;;		___ftmul
 19075 ;;		___lltoft
 19076 ;; This function uses a non-reentrant model
 19077 ;;
 19078                           
 19079                           	psect	text76
 19080  004AD2                     __ptext76:
 19081                           	opt stack 0
 19082  004AD2                     ___ftpack:
 19083                           	opt stack 15
 19084                           
 19085                           ;incstack = 0
 19086  004AD2  0101               	movlb	1	; () banked
 19087  004AD4  5103               	movf	___ftpack@exp& (0+255),w,b
 19088  004AD6  0101               	movlb	1	; () banked
 19089  004AD8  B4D8               	btfsc	status,2,c
 19090  004ADA  D008               	goto	l9718
 19091                           
 19092                           ; BSR set to: 1
 19093  004ADC  0101               	movlb	1	; () banked
 19094  004ADE  5100               	movf	___ftpack@arg& (0+255),w,b
 19095  004AE0  0101               	movlb	1	; () banked
 19096  004AE2  1101               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 19097  004AE4  0101               	movlb	1	; () banked
 19098  004AE6  1102               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 19099  004AE8  A4D8               	btfss	status,2,c
 19100  004AEA  D011               	goto	l9724
 19101  004AEC                     l9718:
 19102                           
 19103                           ; BSR set to: 1
 19104  004AEC  0E00               	movlw	0
 19105  004AEE  0101               	movlb	1	; () banked
 19106  004AF0  6F00               	movwf	?___ftpack& (0+255),b
 19107  004AF2  0E00               	movlw	0
 19108  004AF4  0101               	movlb	1	; () banked
 19109  004AF6  6F01               	movwf	(?___ftpack+1)& (0+255),b
 19110  004AF8  0E00               	movlw	0
 19111  004AFA  0101               	movlb	1	; () banked
 19112  004AFC  6F02               	movwf	(?___ftpack+2)& (0+255),b
 19113                           
 19114                           ; BSR set to: 1
 19115  004AFE  0012               	return	
 19116  004B00                     l9722:
 19117                           
 19118                           ; BSR set to: 1
 19119  004B00  0101               	movlb	1	; () banked
 19120  004B02  2B03               	incf	___ftpack@exp& (0+255),f,b
 19121  004B04  0101               	movlb	1	; () banked
 19122  004B06  90D8               	bcf	status,0,c
 19123  004B08  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 19124  004B0A  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 19125  004B0C  3300               	rrcf	___ftpack@arg& (0+255),f,b
 19126  004B0E                     l9724:
 19127                           
 19128                           ; BSR set to: 1
 19129  004B0E  0E00               	movlw	0
 19130  004B10  0101               	movlb	1	; () banked
 19131  004B12  1500               	andwf	___ftpack@arg& (0+255),w,b
 19132  004B14  0101               	movlb	1	; () banked
 19133  004B16  6F05               	movwf	??___ftpack& (0+255),b
 19134  004B18  0E00               	movlw	0
 19135  004B1A  0101               	movlb	1	; () banked
 19136  004B1C  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
 19137  004B1E  0101               	movlb	1	; () banked
 19138  004B20  6F06               	movwf	(??___ftpack+1)& (0+255),b
 19139  004B22  0EFE               	movlw	254
 19140  004B24  0101               	movlb	1	; () banked
 19141  004B26  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
 19142  004B28  0101               	movlb	1	; () banked
 19143  004B2A  6F07               	movwf	(??___ftpack+2)& (0+255),b
 19144  004B2C  0101               	movlb	1	; () banked
 19145  004B2E  5105               	movf	??___ftpack& (0+255),w,b
 19146  004B30  0101               	movlb	1	; () banked
 19147  004B32  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
 19148  004B34  0101               	movlb	1	; () banked
 19149  004B36  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
 19150  004B38  B4D8               	btfsc	status,2,c
 19151  004B3A  D011               	goto	l9730
 19152  004B3C  D7E1               	goto	l9722
 19153  004B3E                     l9726:
 19154                           
 19155                           ; BSR set to: 1
 19156  004B3E  0101               	movlb	1	; () banked
 19157  004B40  2B03               	incf	___ftpack@exp& (0+255),f,b
 19158                           
 19159                           ; BSR set to: 1
 19160  004B42  0E01               	movlw	1
 19161  004B44  0101               	movlb	1	; () banked
 19162  004B46  2700               	addwf	___ftpack@arg& (0+255),f,b
 19163  004B48  0E00               	movlw	0
 19164  004B4A  0101               	movlb	1	; () banked
 19165  004B4C  2301               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 19166  004B4E  0E00               	movlw	0
 19167  004B50  0101               	movlb	1	; () banked
 19168  004B52  2302               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 19169  004B54  0101               	movlb	1	; () banked
 19170  004B56  90D8               	bcf	status,0,c
 19171  004B58  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 19172  004B5A  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 19173  004B5C  3300               	rrcf	___ftpack@arg& (0+255),f,b
 19174  004B5E                     l9730:
 19175                           
 19176                           ; BSR set to: 1
 19177  004B5E  0E00               	movlw	0
 19178  004B60  0101               	movlb	1	; () banked
 19179  004B62  1500               	andwf	___ftpack@arg& (0+255),w,b
 19180  004B64  0101               	movlb	1	; () banked
 19181  004B66  6F05               	movwf	??___ftpack& (0+255),b
 19182  004B68  0E00               	movlw	0
 19183  004B6A  0101               	movlb	1	; () banked
 19184  004B6C  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
 19185  004B6E  0101               	movlb	1	; () banked
 19186  004B70  6F06               	movwf	(??___ftpack+1)& (0+255),b
 19187  004B72  0EFF               	movlw	255
 19188  004B74  0101               	movlb	1	; () banked
 19189  004B76  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
 19190  004B78  0101               	movlb	1	; () banked
 19191  004B7A  6F07               	movwf	(??___ftpack+2)& (0+255),b
 19192  004B7C  0101               	movlb	1	; () banked
 19193  004B7E  5105               	movf	??___ftpack& (0+255),w,b
 19194  004B80  0101               	movlb	1	; () banked
 19195  004B82  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
 19196  004B84  0101               	movlb	1	; () banked
 19197  004B86  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
 19198  004B88  B4D8               	btfsc	status,2,c
 19199  004B8A  D008               	goto	l9734
 19200  004B8C  D7D8               	goto	l9726
 19201  004B8E                     l9732:
 19202                           
 19203                           ; BSR set to: 1
 19204  004B8E  0101               	movlb	1	; () banked
 19205  004B90  0703               	decf	___ftpack@exp& (0+255),f,b
 19206  004B92  0101               	movlb	1	; () banked
 19207  004B94  90D8               	bcf	status,0,c
 19208  004B96  3700               	rlcf	___ftpack@arg& (0+255),f,b
 19209  004B98  3701               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 19210  004B9A  3702               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 19211  004B9C                     l9734:
 19212                           
 19213                           ; BSR set to: 1
 19214  004B9C  0101               	movlb	1	; () banked
 19215  004B9E  BF01               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 19216  004BA0  D004               	goto	l1311
 19217                           
 19218                           ; BSR set to: 1
 19219  004BA2  0E02               	movlw	2
 19220  004BA4  0101               	movlb	1	; () banked
 19221  004BA6  6103               	cpfslt	___ftpack@exp& (0+255),b
 19222  004BA8  D7F2               	goto	l9732
 19223  004BAA                     l1311:
 19224                           
 19225                           ; BSR set to: 1
 19226  004BAA  0101               	movlb	1	; () banked
 19227  004BAC  B103               	btfsc	___ftpack@exp& (0+255),0,b
 19228  004BAE  D002               	goto	l9740
 19229                           
 19230                           ; BSR set to: 1
 19231  004BB0  0101               	movlb	1	; () banked
 19232  004BB2  9F01               	bcf	(___ftpack@arg+1)& (0+255),7,b
 19233  004BB4                     l9740:
 19234                           
 19235                           ; BSR set to: 1
 19236  004BB4  0101               	movlb	1	; () banked
 19237  004BB6  90D8               	bcf	status,0,c
 19238  004BB8  3303               	rrcf	___ftpack@exp& (0+255),f,b
 19239  004BBA  0101               	movlb	1	; () banked
 19240  004BBC  5103               	movf	___ftpack@exp& (0+255),w,b
 19241  004BBE  0101               	movlb	1	; () banked
 19242  004BC0  1302               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 19243                           
 19244                           ; BSR set to: 1
 19245  004BC2  0101               	movlb	1	; () banked
 19246  004BC4  5104               	movf	___ftpack@sign& (0+255),w,b
 19247  004BC6  0101               	movlb	1	; () banked
 19248  004BC8  B4D8               	btfsc	status,2,c
 19249  004BCA  D002               	goto	l9746
 19250                           
 19251                           ; BSR set to: 1
 19252  004BCC  0101               	movlb	1	; () banked
 19253  004BCE  8F02               	bsf	(___ftpack@arg+2)& (0+255),7,b
 19254  004BD0                     l9746:
 19255                           
 19256                           ; BSR set to: 1
 19257  004BD0  C100  F100         	movff	___ftpack@arg,?___ftpack
 19258  004BD4  C101  F101         	movff	___ftpack@arg+1,?___ftpack+1
 19259  004BD8  C102  F102         	movff	___ftpack@arg+2,?___ftpack+2
 19260  004BDC  0012               	return	
 19261  004BDE                     __end_of___ftpack:
 19262                           	opt stack 0
 19263                           tblptru	equ	0xFF8
 19264                           tblptrh	equ	0xFF7
 19265                           tblptrl	equ	0xFF6
 19266                           tablat	equ	0xFF5
 19267                           prodh	equ	0xFF4
 19268                           prodl	equ	0xFF3
 19269                           intcon	equ	0xFF2
 19270                           postinc0	equ	0xFEE
 19271                           wreg	equ	0xFE8
 19272                           postdec1	equ	0xFE5
 19273                           fsr1l	equ	0xFE1
 19274                           indf2	equ	0xFDF
 19275                           postinc2	equ	0xFDE
 19276                           postdec2	equ	0xFDD
 19277                           plusw2	equ	0xFDB
 19278                           fsr2h	equ	0xFDA
 19279                           fsr2l	equ	0xFD9
 19280                           status	equ	0xFD8
 19281                           
 19282 ;; *************** function _longPressDOWN *****************
 19283 ;; Defined at:
 19284 ;;		line 212 in file "source/DisplayProtocol.h"
 19285 ;; Parameters:    Size  Location     Type
 19286 ;;		None
 19287 ;; Auto vars:     Size  Location     Type
 19288 ;;		None
 19289 ;; Return value:  Size  Location     Type
 19290 ;;                  1    wreg      void 
 19291 ;; Registers used:
 19292 ;;		wreg, status,2, status,0
 19293 ;; Tracked objects:
 19294 ;;		On entry : 0/0
 19295 ;;		On exit  : 0/0
 19296 ;;		Unchanged: 0/0
 19297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19298 ;;      Params:         0       0       0       0       0       0       0
 19299 ;;      Locals:         0       0       0       0       0       0       0
 19300 ;;      Temps:          0       0       0       0       0       0       0
 19301 ;;      Totals:         0       0       0       0       0       0       0
 19302 ;;Total ram usage:        0 bytes
 19303 ;; Hardware stack levels used:    1
 19304 ;; Hardware stack levels required when called:   12
 19305 ;; This function calls:
 19306 ;;		Nothing
 19307 ;; This function is called by:
 19308 ;;		_buttonChecking
 19309 ;; This function uses a non-reentrant model
 19310 ;;
 19311                           
 19312                           	psect	text77
 19313  0071BC                     __ptext77:
 19314                           	opt stack 0
 19315  0071BC                     _longPressDOWN:
 19316                           	opt stack 17
 19317                           
 19318                           ;DisplayProtocol.h: 213: if (!DOWNisLP) {
 19319                           
 19320                           ; BSR set to: 1
 19321                           ;incstack = 0
 19322  0071BC  5049               	movf	_DOWNisLP,w,c
 19323  0071BE  A4D8               	btfss	status,2,c
 19324  0071C0  0012               	return	
 19325                           
 19326                           ;DisplayProtocol.h: 214: DOWNisLP = 1;
 19327  0071C2  0E01               	movlw	1
 19328  0071C4  6E49               	movwf	_DOWNisLP,c
 19329                           
 19330                           ;DisplayProtocol.h: 215: if(actualScreen == 5) {
 19331  0071C6  0E05               	movlw	5
 19332  0071C8  0101               	movlb	1	; () banked
 19333  0071CA  19BD               	xorwf	_actualScreen& (0+255),w,b
 19334  0071CC  A4D8               	btfss	status,2,c
 19335  0071CE  0012               	return	
 19336                           
 19337                           ; BSR set to: 1
 19338                           ;DisplayProtocol.h: 216: if(menuSection == 2)
 19339  0071D0  0E02               	movlw	2
 19340  0071D2  0101               	movlb	1	; () banked
 19341  0071D4  19BC               	xorwf	_menuSection& (0+255),w,b
 19342  0071D6  A4D8               	btfss	status,2,c
 19343  0071D8  0012               	return	
 19344                           
 19345                           ; BSR set to: 1
 19346                           ;DisplayProtocol.h: 217: chanVals -= 10;
 19347  0071DA  0101               	movlb	1	; () banked
 19348  0071DC  0EF6               	movlw	246
 19349  0071DE  27B6               	addwf	_chanVals& (0+255),f,b
 19350  0071E0  0EFF               	movlw	255
 19351  0071E2  23B7               	addwfc	(_chanVals+1)& (0+255),f,b
 19352                           
 19353                           ; BSR set to: 1
 19354                           
 19355                           ; BSR set to: 1
 19356  0071E4  0012               	return	
 19357  0071E6                     __end_of_longPressDOWN:
 19358                           	opt stack 0
 19359                           tblptru	equ	0xFF8
 19360                           tblptrh	equ	0xFF7
 19361                           tblptrl	equ	0xFF6
 19362                           tablat	equ	0xFF5
 19363                           prodh	equ	0xFF4
 19364                           prodl	equ	0xFF3
 19365                           intcon	equ	0xFF2
 19366                           postinc0	equ	0xFEE
 19367                           wreg	equ	0xFE8
 19368                           postdec1	equ	0xFE5
 19369                           fsr1l	equ	0xFE1
 19370                           indf2	equ	0xFDF
 19371                           postinc2	equ	0xFDE
 19372                           postdec2	equ	0xFDD
 19373                           plusw2	equ	0xFDB
 19374                           fsr2h	equ	0xFDA
 19375                           fsr2l	equ	0xFD9
 19376                           status	equ	0xFD8
 19377                           
 19378 ;; *************** function _delay_ms *****************
 19379 ;; Defined at:
 19380 ;;		line 13 in file "source/../../delay.h"
 19381 ;; Parameters:    Size  Location     Type
 19382 ;;  del             2    0[BANK1 ] int 
 19383 ;; Auto vars:     Size  Location     Type
 19384 ;;  i               2    3[BANK1 ] int 
 19385 ;; Return value:  Size  Location     Type
 19386 ;;                  1    wreg      void 
 19387 ;; Registers used:
 19388 ;;		wreg, status,2, status,0
 19389 ;; Tracked objects:
 19390 ;;		On entry : 0/0
 19391 ;;		On exit  : 0/0
 19392 ;;		Unchanged: 0/0
 19393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19394 ;;      Params:         0       0       2       0       0       0       0
 19395 ;;      Locals:         0       0       2       0       0       0       0
 19396 ;;      Temps:          0       0       1       0       0       0       0
 19397 ;;      Totals:         0       0       5       0       0       0       0
 19398 ;;Total ram usage:        5 bytes
 19399 ;; Hardware stack levels used:    1
 19400 ;; Hardware stack levels required when called:   12
 19401 ;; This function calls:
 19402 ;;		Nothing
 19403 ;; This function is called by:
 19404 ;;		_buttonChecking
 19405 ;; This function uses a non-reentrant model
 19406 ;;
 19407                           
 19408                           	psect	text78
 19409  006EBC                     __ptext78:
 19410                           	opt stack 0
 19411  006EBC                     _delay_ms:
 19412                           	opt stack 17
 19413                           
 19414                           ;delay.h: 14: for(int i = 1;i <= del;i++)
 19415                           
 19416                           ;incstack = 0
 19417  006EBC  0E00               	movlw	0
 19418  006EBE  0101               	movlb	1	; () banked
 19419  006EC0  6F04               	movwf	(delay_ms@i+1)& (0+255),b
 19420  006EC2  0E01               	movlw	1
 19421  006EC4  6F03               	movwf	delay_ms@i& (0+255),b
 19422  006EC6  D00C               	goto	l100
 19423  006EC8                     l10884:
 19424                           
 19425                           ; BSR set to: 1
 19426                           ;delay.h: 15: _delay((unsigned long)((1)*(16000000/4000.0)));
 19427  006EC8  0E06               	movlw	6
 19428  006ECA  0101               	movlb	1	; () banked
 19429  006ECC  6F02               	movwf	??_delay_ms& (0+255),b
 19430  006ECE  0E30               	movlw	48
 19431  006ED0                     u18037:
 19432  006ED0  2EE8               	decfsz	wreg,f,c
 19433  006ED2  D7FE               	bra	u18037
 19434  006ED4  2F02               	decfsz	??_delay_ms& (0+255),f,b
 19435  006ED6  D7FC               	bra	u18037
 19436  006ED8  F000               	nop	
 19437  006EDA  0101               	movlb	1	; () banked
 19438  006EDC  4B03               	infsnz	delay_ms@i& (0+255),f,b
 19439  006EDE  2B04               	incf	(delay_ms@i+1)& (0+255),f,b
 19440  006EE0                     l100:
 19441                           
 19442                           ; BSR set to: 1
 19443  006EE0  0101               	movlb	1	; () banked
 19444  006EE2  5103               	movf	delay_ms@i& (0+255),w,b
 19445  006EE4  0101               	movlb	1	; () banked
 19446  006EE6  5D00               	subwf	delay_ms@del& (0+255),w,b
 19447  006EE8  0101               	movlb	1	; () banked
 19448  006EEA  5101               	movf	(delay_ms@del+1)& (0+255),w,b
 19449  006EEC  0A80               	xorlw	128
 19450  006EEE  0101               	movlb	1	; () banked
 19451  006EF0  6F02               	movwf	??_delay_ms& (0+255),b
 19452  006EF2  0101               	movlb	1	; () banked
 19453  006EF4  5104               	movf	(delay_ms@i+1)& (0+255),w,b
 19454  006EF6  0A80               	xorlw	128
 19455  006EF8  0101               	movlb	1	; () banked
 19456  006EFA  5902               	subwfb	??_delay_ms& (0+255),w,b
 19457  006EFC  A0D8               	btfss	status,0,c
 19458  006EFE  0012               	return	
 19459  006F00  D7E3               	goto	l10884
 19460  006F02                     __end_of_delay_ms:
 19461                           	opt stack 0
 19462                           tblptru	equ	0xFF8
 19463                           tblptrh	equ	0xFF7
 19464                           tblptrl	equ	0xFF6
 19465                           tablat	equ	0xFF5
 19466                           prodh	equ	0xFF4
 19467                           prodl	equ	0xFF3
 19468                           intcon	equ	0xFF2
 19469                           postinc0	equ	0xFEE
 19470                           wreg	equ	0xFE8
 19471                           postdec1	equ	0xFE5
 19472                           fsr1l	equ	0xFE1
 19473                           indf2	equ	0xFDF
 19474                           postinc2	equ	0xFDE
 19475                           postdec2	equ	0xFDD
 19476                           plusw2	equ	0xFDB
 19477                           fsr2h	equ	0xFDA
 19478                           fsr2l	equ	0xFD9
 19479                           status	equ	0xFD8
 19480                           
 19481 ;; *************** function _UARTConfig *****************
 19482 ;; Defined at:
 19483 ;;		line 81 in file "source/UARTConfig.h"
 19484 ;; Parameters:    Size  Location     Type
 19485 ;;		None
 19486 ;; Auto vars:     Size  Location     Type
 19487 ;;		None
 19488 ;; Return value:  Size  Location     Type
 19489 ;;                  1    wreg      void 
 19490 ;; Registers used:
 19491 ;;		wreg, status,2
 19492 ;; Tracked objects:
 19493 ;;		On entry : 0/0
 19494 ;;		On exit  : 0/0
 19495 ;;		Unchanged: 0/0
 19496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19497 ;;      Params:         0       0       0       0       0       0       0
 19498 ;;      Locals:         0       0       0       0       0       0       0
 19499 ;;      Temps:          0       0       0       0       0       0       0
 19500 ;;      Totals:         0       0       0       0       0       0       0
 19501 ;;Total ram usage:        0 bytes
 19502 ;; Hardware stack levels used:    1
 19503 ;; Hardware stack levels required when called:   12
 19504 ;; This function calls:
 19505 ;;		Nothing
 19506 ;; This function is called by:
 19507 ;;		_main
 19508 ;; This function uses a non-reentrant model
 19509 ;;
 19510                           
 19511                           	psect	text79
 19512  006F80                     __ptext79:
 19513                           	opt stack 0
 19514  006F80                     _UARTConfig:
 19515                           	opt stack 18
 19516                           
 19517                           ;UARTConfig.h: 82: RCSTA1bits.SPEN = 0;
 19518                           
 19519                           ; BSR set to: 1
 19520                           ;incstack = 0
 19521  006F80  9EAB               	bcf	4011,7,c	;volatile
 19522                           
 19523                           ;UARTConfig.h: 83: SPBRGH1 = 0;
 19524  006F82  0E00               	movlw	0
 19525  006F84  6EB0               	movwf	4016,c	;volatile
 19526                           
 19527                           ;UARTConfig.h: 84: SPBRG1 = 34;
 19528  006F86  0E22               	movlw	34
 19529  006F88  6EAF               	movwf	4015,c	;volatile
 19530                           
 19531                           ;UARTConfig.h: 85: ANSELCbits.ANSC6 = 0;
 19532  006F8A  010F               	movlb	15	; () banked
 19533  006F8C  9D3A               	bcf	58,6,b	;volatile
 19534                           
 19535                           ; BSR set to: 15
 19536                           ;UARTConfig.h: 86: ANSELCbits.ANSC7 = 0;
 19537  006F8E  010F               	movlb	15	; () banked
 19538  006F90  9F3A               	bcf	58,7,b	;volatile
 19539                           
 19540                           ; BSR set to: 15
 19541                           ;UARTConfig.h: 87: TRISCbits.TRISC6 = 1;
 19542  006F92  8C94               	bsf	3988,6,c	;volatile
 19543                           
 19544                           ; BSR set to: 15
 19545                           ;UARTConfig.h: 88: TRISCbits.TRISC7 = 1;
 19546  006F94  8E94               	bsf	3988,7,c	;volatile
 19547                           
 19548                           ; BSR set to: 15
 19549                           ;UARTConfig.h: 89: TXSTA1bits.TX9 = 0;
 19550  006F96  9CAC               	bcf	4012,6,c	;volatile
 19551                           
 19552                           ; BSR set to: 15
 19553                           ;UARTConfig.h: 90: TXSTA1bits.SYNC = 0;
 19554  006F98  98AC               	bcf	4012,4,c	;volatile
 19555                           
 19556                           ; BSR set to: 15
 19557                           ;UARTConfig.h: 91: TXSTA1bits.SENDB = 0;
 19558  006F9A  96AC               	bcf	4012,3,c	;volatile
 19559                           
 19560                           ; BSR set to: 15
 19561                           ;UARTConfig.h: 92: TXSTA1bits.BRGH = 1;
 19562  006F9C  84AC               	bsf	4012,2,c	;volatile
 19563                           
 19564                           ; BSR set to: 15
 19565                           ;UARTConfig.h: 93: RCSTA1bits.RX9 = 0;
 19566  006F9E  9CAB               	bcf	4011,6,c	;volatile
 19567                           
 19568                           ; BSR set to: 15
 19569                           ;UARTConfig.h: 94: BAUDCON1bits.DTRXP = 0;
 19570  006FA0  9AB8               	bcf	4024,5,c	;volatile
 19571                           
 19572                           ; BSR set to: 15
 19573                           ;UARTConfig.h: 95: BAUDCON1bits.CKTXP = 0;
 19574  006FA2  98B8               	bcf	4024,4,c	;volatile
 19575                           
 19576                           ; BSR set to: 15
 19577                           ;UARTConfig.h: 96: BAUDCON1bits.BRG16 = 1;
 19578  006FA4  86B8               	bsf	4024,3,c	;volatile
 19579                           
 19580                           ; BSR set to: 15
 19581                           ;UARTConfig.h: 97: BAUDCON1bits.WUE = 0;
 19582  006FA6  92B8               	bcf	4024,1,c	;volatile
 19583                           
 19584                           ; BSR set to: 15
 19585                           ;UARTConfig.h: 98: BAUDCON1bits.ABDEN = 0;
 19586  006FA8  90B8               	bcf	4024,0,c	;volatile
 19587                           
 19588                           ; BSR set to: 15
 19589                           ;UARTConfig.h: 99: RCSTA1bits.CREN = 1;
 19590  006FAA  88AB               	bsf	4011,4,c	;volatile
 19591                           
 19592                           ; BSR set to: 15
 19593                           ;UARTConfig.h: 100: TXSTA1bits.TXEN = 1;
 19594  006FAC  8AAC               	bsf	4012,5,c	;volatile
 19595                           
 19596                           ; BSR set to: 15
 19597                           ;UARTConfig.h: 101: IPR1bits.RC1IP = 0;
 19598  006FAE  9A9F               	bcf	3999,5,c	;volatile
 19599                           
 19600                           ; BSR set to: 15
 19601                           ;UARTConfig.h: 102: PIR1bits.RC1IF = 0;
 19602  006FB0  9A9E               	bcf	3998,5,c	;volatile
 19603                           
 19604                           ; BSR set to: 15
 19605                           ;UARTConfig.h: 103: PIE1bits.RC1IE = 1;
 19606  006FB2  8A9D               	bsf	3997,5,c	;volatile
 19607                           
 19608                           ; BSR set to: 15
 19609                           ;UARTConfig.h: 104: RCSTA1bits.SPEN = 1;
 19610  006FB4  8EAB               	bsf	4011,7,c	;volatile
 19611                           
 19612                           ; BSR set to: 15
 19613  006FB6  0012               	return		;funcret
 19614  006FB8                     __end_of_UARTConfig:
 19615                           	opt stack 0
 19616                           tblptru	equ	0xFF8
 19617                           tblptrh	equ	0xFF7
 19618                           tblptrl	equ	0xFF6
 19619                           tablat	equ	0xFF5
 19620                           prodh	equ	0xFF4
 19621                           prodl	equ	0xFF3
 19622                           intcon	equ	0xFF2
 19623                           postinc0	equ	0xFEE
 19624                           wreg	equ	0xFE8
 19625                           postdec1	equ	0xFE5
 19626                           fsr1l	equ	0xFE1
 19627                           indf2	equ	0xFDF
 19628                           postinc2	equ	0xFDE
 19629                           postdec2	equ	0xFDD
 19630                           plusw2	equ	0xFDB
 19631                           fsr2h	equ	0xFDA
 19632                           fsr2l	equ	0xFD9
 19633                           status	equ	0xFD8
 19634                           
 19635 ;; *************** function _PWM2Config *****************
 19636 ;; Defined at:
 19637 ;;		line 159 in file "source/PWMConfig.h"
 19638 ;; Parameters:    Size  Location     Type
 19639 ;;		None
 19640 ;; Auto vars:     Size  Location     Type
 19641 ;;		None
 19642 ;; Return value:  Size  Location     Type
 19643 ;;                  1    wreg      void 
 19644 ;; Registers used:
 19645 ;;		wreg, status,2, status,0, cstack
 19646 ;; Tracked objects:
 19647 ;;		On entry : 0/0
 19648 ;;		On exit  : 0/0
 19649 ;;		Unchanged: 0/0
 19650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19651 ;;      Params:         0       0       0       0       0       0       0
 19652 ;;      Locals:         0       0       0       0       0       0       0
 19653 ;;      Temps:          0       0       0       0       0       0       0
 19654 ;;      Totals:         0       0       0       0       0       0       0
 19655 ;;Total ram usage:        0 bytes
 19656 ;; Hardware stack levels used:    1
 19657 ;; Hardware stack levels required when called:   13
 19658 ;; This function calls:
 19659 ;;		_setPWM2duty
 19660 ;;		_t2config
 19661 ;; This function is called by:
 19662 ;;		_main
 19663 ;; This function uses a non-reentrant model
 19664 ;;
 19665                           
 19666                           	psect	text80
 19667  006B9C                     __ptext80:
 19668                           	opt stack 0
 19669  006B9C                     _PWM2Config:
 19670                           	opt stack 17
 19671                           
 19672                           ;PWMConfig.h: 160: TRISCbits.TRISC0 = 1;
 19673                           
 19674                           ; BSR set to: 15
 19675                           ;incstack = 0
 19676  006B9C  8094               	bsf	3988,0,c	;volatile
 19677                           
 19678                           ;PWMConfig.h: 161: TRISCbits.TRISC1 = 1;
 19679  006B9E  8294               	bsf	3988,1,c	;volatile
 19680                           
 19681                           ;PWMConfig.h: 162: PSTR2CONbits.STR2A = 1;
 19682  006BA0  8063               	bsf	3939,0,c	;volatile
 19683                           
 19684                           ;PWMConfig.h: 163: PSTR2CONbits.STR2B = 1;
 19685  006BA2  8263               	bsf	3939,1,c	;volatile
 19686                           
 19687                           ;PWMConfig.h: 164: PSTR2CONbits.STR2C = 0;
 19688  006BA4  9463               	bcf	3939,2,c	;volatile
 19689                           
 19690                           ;PWMConfig.h: 165: PSTR2CONbits.STR2D = 0;
 19691  006BA6  9663               	bcf	3939,3,c	;volatile
 19692                           
 19693                           ;PWMConfig.h: 166: CCPTMRS0bits.C2TSEL = 0b00;
 19694  006BA8  0EE7               	movlw	-25
 19695  006BAA  010F               	movlb	15	; () banked
 19696  006BAC  1749               	andwf	73,f,b	;volatile
 19697                           
 19698                           ;PWMConfig.h: 167: PR2 = 199;
 19699  006BAE  0EC7               	movlw	199
 19700  006BB0  6EBB               	movwf	4027,c	;volatile
 19701                           
 19702                           ; BSR set to: 15
 19703                           ;PWMConfig.h: 168: ECCP2ASbits.CCP2AS = 0b000;
 19704  006BB2  9864               	bcf	3940,4,c	;volatile
 19705  006BB4  9A64               	bcf	3940,5,c	;volatile
 19706  006BB6  9C64               	bcf	3940,6,c	;volatile
 19707                           
 19708                           ;PWMConfig.h: 169: ECCP2ASbits.PSS2AC = 0b00;
 19709  006BB8  0EF3               	movlw	-13
 19710  006BBA  1664               	andwf	3940,f,c	;volatile
 19711                           
 19712                           ;PWMConfig.h: 170: ECCP2ASbits.PSS2BD = 0b00;
 19713  006BBC  0EFC               	movlw	-4
 19714  006BBE  1664               	andwf	3940,f,c	;volatile
 19715                           
 19716                           ; BSR set to: 15
 19717                           ;PWMConfig.h: 171: PWM2CONbits.P2RSEN = 0;
 19718  006BC0  9E65               	bcf	3941,7,c	;volatile
 19719                           
 19720                           ;PWMConfig.h: 172: ECCP2ASbits.CCP2AS = 1;
 19721  006BC2  5064               	movf	3940,w,c	;volatile
 19722  006BC4  0B8F               	andlw	-113
 19723  006BC6  0910               	iorlw	16
 19724  006BC8  6E64               	movwf	3940,c	;volatile
 19725                           
 19726                           ;PWMConfig.h: 173: CCP2CONbits.P2M = 0b10;
 19727  006BCA  5066               	movf	3942,w,c	;volatile
 19728  006BCC  0B3F               	andlw	-193
 19729  006BCE  0980               	iorlw	128
 19730  006BD0  6E66               	movwf	3942,c	;volatile
 19731                           
 19732                           ;PWMConfig.h: 174: CCP2CONbits.CCP2M = 0b1100;
 19733  006BD2  5066               	movf	3942,w,c	;volatile
 19734  006BD4  0BF0               	andlw	-16
 19735  006BD6  090C               	iorlw	12
 19736  006BD8  6E66               	movwf	3942,c	;volatile
 19737                           
 19738                           ; BSR set to: 15
 19739                           ;PWMConfig.h: 175: setPWM2duty(0);
 19740  006BDA  0E00               	movlw	0
 19741  006BDC  0101               	movlb	1	; () banked
 19742  006BDE  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 19743  006BE0  0E00               	movlw	0
 19744  006BE2  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 19745  006BE4  EC84  F02F         	call	_setPWM2duty	;wreg free
 19746                           
 19747                           ;PWMConfig.h: 176: PWM2CONbits.P2DC = 16;
 19748  006BE8  9065               	bcf	3941,0,c	;volatile
 19749  006BEA  9265               	bcf	3941,1,c	;volatile
 19750  006BEC  9465               	bcf	3941,2,c	;volatile
 19751  006BEE  9665               	bcf	3941,3,c	;volatile
 19752  006BF0  8865               	bsf	3941,4,c	;volatile
 19753  006BF2  9A65               	bcf	3941,5,c	;volatile
 19754  006BF4  9C65               	bcf	3941,6,c	;volatile
 19755                           
 19756                           ;PWMConfig.h: 177: t2config();
 19757  006BF6  EC57  F039         	call	_t2config	;wreg free
 19758                           
 19759                           ;PWMConfig.h: 178: TRISCbits.TRISC0 = 0;
 19760  006BFA  9094               	bcf	3988,0,c	;volatile
 19761                           
 19762                           ;PWMConfig.h: 179: TRISCbits.TRISC1 = 0;
 19763  006BFC  9294               	bcf	3988,1,c	;volatile
 19764                           
 19765                           ;PWMConfig.h: 180: ECCP2ASbits.CCP2ASE = 0;
 19766  006BFE  9E64               	bcf	3940,7,c	;volatile
 19767  006C00  0012               	return		;funcret
 19768  006C02                     __end_of_PWM2Config:
 19769                           	opt stack 0
 19770                           tblptru	equ	0xFF8
 19771                           tblptrh	equ	0xFF7
 19772                           tblptrl	equ	0xFF6
 19773                           tablat	equ	0xFF5
 19774                           prodh	equ	0xFF4
 19775                           prodl	equ	0xFF3
 19776                           intcon	equ	0xFF2
 19777                           postinc0	equ	0xFEE
 19778                           wreg	equ	0xFE8
 19779                           postdec1	equ	0xFE5
 19780                           fsr1l	equ	0xFE1
 19781                           indf2	equ	0xFDF
 19782                           postinc2	equ	0xFDE
 19783                           postdec2	equ	0xFDD
 19784                           plusw2	equ	0xFDB
 19785                           fsr2h	equ	0xFDA
 19786                           fsr2l	equ	0xFD9
 19787                           status	equ	0xFD8
 19788                           
 19789 ;; *************** function _t2config *****************
 19790 ;; Defined at:
 19791 ;;		line 26 in file "source/PWMConfig.h"
 19792 ;; Parameters:    Size  Location     Type
 19793 ;;		None
 19794 ;; Auto vars:     Size  Location     Type
 19795 ;;		None
 19796 ;; Return value:  Size  Location     Type
 19797 ;;                  1    wreg      void 
 19798 ;; Registers used:
 19799 ;;		wreg, status,2
 19800 ;; Tracked objects:
 19801 ;;		On entry : 0/0
 19802 ;;		On exit  : 0/0
 19803 ;;		Unchanged: 0/0
 19804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19805 ;;      Params:         0       0       0       0       0       0       0
 19806 ;;      Locals:         0       0       0       0       0       0       0
 19807 ;;      Temps:          0       0       0       0       0       0       0
 19808 ;;      Totals:         0       0       0       0       0       0       0
 19809 ;;Total ram usage:        0 bytes
 19810 ;; Hardware stack levels used:    1
 19811 ;; Hardware stack levels required when called:   12
 19812 ;; This function calls:
 19813 ;;		Nothing
 19814 ;; This function is called by:
 19815 ;;		_PWM2Config
 19816 ;; This function uses a non-reentrant model
 19817 ;;
 19818                           
 19819                           	psect	text81
 19820  0072AE                     __ptext81:
 19821                           	opt stack 0
 19822  0072AE                     _t2config:
 19823                           	opt stack 17
 19824                           
 19825                           ;PWMConfig.h: 27: T2CONbits.TMR2ON = 0;
 19826                           
 19827                           ;incstack = 0
 19828  0072AE  94BA               	bcf	4026,2,c	;volatile
 19829                           
 19830                           ;PWMConfig.h: 28: T2CONbits.T2CKPS = 0b00;
 19831  0072B0  0EFC               	movlw	-4
 19832  0072B2  16BA               	andwf	4026,f,c	;volatile
 19833                           
 19834                           ;PWMConfig.h: 29: T2CONbits.T2OUTPS = 0b1111;
 19835  0072B4  86BA               	bsf	4026,3,c	;volatile
 19836  0072B6  88BA               	bsf	4026,4,c	;volatile
 19837  0072B8  8ABA               	bsf	4026,5,c	;volatile
 19838  0072BA  8CBA               	bsf	4026,6,c	;volatile
 19839                           
 19840                           ;PWMConfig.h: 31: PIR1bits.TMR2IF = 0;
 19841  0072BC  929E               	bcf	3998,1,c	;volatile
 19842                           
 19843                           ;PWMConfig.h: 32: IPR1bits.TMR2IP = 0;
 19844  0072BE  929F               	bcf	3999,1,c	;volatile
 19845                           
 19846                           ;PWMConfig.h: 33: PIE1bits.TMR2IE = 1;
 19847  0072C0  829D               	bsf	3997,1,c	;volatile
 19848                           
 19849                           ;PWMConfig.h: 34: T2CONbits.TMR2ON = 1;
 19850  0072C2  84BA               	bsf	4026,2,c	;volatile
 19851  0072C4  0012               	return		;funcret
 19852  0072C6                     __end_of_t2config:
 19853                           	opt stack 0
 19854                           tblptru	equ	0xFF8
 19855                           tblptrh	equ	0xFF7
 19856                           tblptrl	equ	0xFF6
 19857                           tablat	equ	0xFF5
 19858                           prodh	equ	0xFF4
 19859                           prodl	equ	0xFF3
 19860                           intcon	equ	0xFF2
 19861                           postinc0	equ	0xFEE
 19862                           wreg	equ	0xFE8
 19863                           postdec1	equ	0xFE5
 19864                           fsr1l	equ	0xFE1
 19865                           indf2	equ	0xFDF
 19866                           postinc2	equ	0xFDE
 19867                           postdec2	equ	0xFDD
 19868                           plusw2	equ	0xFDB
 19869                           fsr2h	equ	0xFDA
 19870                           fsr2l	equ	0xFD9
 19871                           status	equ	0xFD8
 19872                           
 19873 ;; *************** function _setPWM2duty *****************
 19874 ;; Defined at:
 19875 ;;		line 37 in file "source/PWMConfig.h"
 19876 ;; Parameters:    Size  Location     Type
 19877 ;;  actuator        2    0[BANK1 ] short 
 19878 ;; Auto vars:     Size  Location     Type
 19879 ;;  act             2    4[BANK1 ] short 
 19880 ;; Return value:  Size  Location     Type
 19881 ;;                  1    wreg      void 
 19882 ;; Registers used:
 19883 ;;		wreg, status,2, status,0
 19884 ;; Tracked objects:
 19885 ;;		On entry : 0/0
 19886 ;;		On exit  : 0/0
 19887 ;;		Unchanged: 0/0
 19888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19889 ;;      Params:         0       0       2       0       0       0       0
 19890 ;;      Locals:         0       0       2       0       0       0       0
 19891 ;;      Temps:          0       0       2       0       0       0       0
 19892 ;;      Totals:         0       0       6       0       0       0       0
 19893 ;;Total ram usage:        6 bytes
 19894 ;; Hardware stack levels used:    1
 19895 ;; Hardware stack levels required when called:   12
 19896 ;; This function calls:
 19897 ;;		Nothing
 19898 ;; This function is called by:
 19899 ;;		_initProtocoll
 19900 ;;		_PWM2Config
 19901 ;;		_pressENTER
 19902 ;;		_main
 19903 ;;		_initCalib
 19904 ;; This function uses a non-reentrant model
 19905 ;;
 19906                           
 19907                           	psect	text82
 19908  005F08                     __ptext82:
 19909                           	opt stack 0
 19910  005F08                     _setPWM2duty:
 19911                           	opt stack 18
 19912                           
 19913                           ;PWMConfig.h: 38: short act = 400;
 19914                           
 19915                           ;incstack = 0
 19916  005F08  0E01               	movlw	1
 19917  005F0A  0101               	movlb	1	; () banked
 19918  005F0C  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19919  005F0E  0E90               	movlw	144
 19920  005F10  6F04               	movwf	setPWM2duty@act& (0+255),b
 19921                           
 19922                           ; BSR set to: 1
 19923                           ;PWMConfig.h: 39: if(actuator > 400)
 19924  005F12  0101               	movlb	1	; () banked
 19925  005F14  BF01               	btfsc	(setPWM2duty@actuator+1)& (0+255),7,b
 19926  005F16  D00D               	goto	l10650
 19927  005F18  0E91               	movlw	145
 19928  005F1A  0101               	movlb	1	; () banked
 19929  005F1C  5D00               	subwf	setPWM2duty@actuator& (0+255),w,b
 19930  005F1E  0E01               	movlw	1
 19931  005F20  0101               	movlb	1	; () banked
 19932  005F22  5901               	subwfb	(setPWM2duty@actuator+1)& (0+255),w,b
 19933  005F24  A0D8               	btfss	status,0,c
 19934  005F26  D005               	goto	l10650
 19935                           
 19936                           ; BSR set to: 1
 19937                           ;PWMConfig.h: 40: act = 800;
 19938  005F28  0E03               	movlw	3
 19939  005F2A  0101               	movlb	1	; () banked
 19940  005F2C  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19941  005F2E  0E20               	movlw	32
 19942  005F30  D00F               	goto	L7
 19943  005F32                     l10650:
 19944                           
 19945                           ; BSR set to: 1
 19946                           ;PWMConfig.h: 41: else if(actuator < -400)
 19947  005F32  0101               	movlb	1	; () banked
 19948  005F34  AF01               	btfss	(setPWM2duty@actuator+1)& (0+255),7,b
 19949  005F36  D00E               	goto	l10654
 19950  005F38  0E70               	movlw	112
 19951  005F3A  0101               	movlb	1	; () banked
 19952  005F3C  5D00               	subwf	setPWM2duty@actuator& (0+255),w,b
 19953  005F3E  0EFE               	movlw	254
 19954  005F40  0101               	movlb	1	; () banked
 19955  005F42  5901               	subwfb	(setPWM2duty@actuator+1)& (0+255),w,b
 19956  005F44  B0D8               	btfsc	status,0,c
 19957  005F46  D006               	goto	l10654
 19958                           
 19959                           ; BSR set to: 1
 19960                           ;PWMConfig.h: 42: act = 0;
 19961  005F48  0E00               	movlw	0
 19962  005F4A  0101               	movlb	1	; () banked
 19963  005F4C  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19964  005F4E  0E00               	movlw	0
 19965  005F50                     L7:
 19966  005F50  6F04               	movwf	setPWM2duty@act& (0+255),b
 19967  005F52  D00A               	goto	l493
 19968  005F54                     l10654:
 19969                           
 19970                           ; BSR set to: 1
 19971                           ;PWMConfig.h: 43: else
 19972                           ;PWMConfig.h: 44: act = actuator + 400;
 19973  005F54  0E90               	movlw	144
 19974  005F56  0101               	movlb	1	; () banked
 19975  005F58  2500               	addwf	setPWM2duty@actuator& (0+255),w,b
 19976  005F5A  0101               	movlb	1	; () banked
 19977  005F5C  6F04               	movwf	setPWM2duty@act& (0+255),b
 19978  005F5E  0E01               	movlw	1
 19979  005F60  0101               	movlb	1	; () banked
 19980  005F62  2101               	addwfc	(setPWM2duty@actuator+1)& (0+255),w,b
 19981  005F64  0101               	movlb	1	; () banked
 19982  005F66  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19983  005F68                     l493:
 19984                           
 19985                           ; BSR set to: 1
 19986                           ;PWMConfig.h: 45: CCP2CONbits.DC2B = act;
 19987  005F68  C104  F102         	movff	setPWM2duty@act,??_setPWM2duty
 19988  005F6C  0101               	movlb	1	; () banked
 19989  005F6E  3B02               	swapf	??_setPWM2duty& (0+255),f,b
 19990  005F70  5066               	movf	3942,w,c	;volatile
 19991  005F72  0101               	movlb	1	; () banked
 19992  005F74  1902               	xorwf	??_setPWM2duty& (0+255),w,b
 19993  005F76  0BCF               	andlw	-49
 19994  005F78  1902               	xorwf	??_setPWM2duty& (0+255),w,b
 19995  005F7A  6E66               	movwf	3942,c	;volatile
 19996                           
 19997                           ;PWMConfig.h: 46: CCPR2L = act>>2;
 19998  005F7C  C104  F102         	movff	setPWM2duty@act,??_setPWM2duty
 19999  005F80  C105  F103         	movff	setPWM2duty@act+1,??_setPWM2duty+1
 20000  005F84  0101               	movlb	1	; () banked
 20001  005F86  3503               	rlcf	(??_setPWM2duty+1)& (0+255),w,b
 20002  005F88  3303               	rrcf	(??_setPWM2duty+1)& (0+255),f,b
 20003  005F8A  3302               	rrcf	??_setPWM2duty& (0+255),f,b
 20004  005F8C  0101               	movlb	1	; () banked
 20005  005F8E  3503               	rlcf	(??_setPWM2duty+1)& (0+255),w,b
 20006  005F90  3303               	rrcf	(??_setPWM2duty+1)& (0+255),f,b
 20007  005F92  3302               	rrcf	??_setPWM2duty& (0+255),f,b
 20008  005F94  0101               	movlb	1	; () banked
 20009  005F96  5102               	movf	??_setPWM2duty& (0+255),w,b
 20010  005F98  6E67               	movwf	3943,c	;volatile
 20011                           
 20012                           ; BSR set to: 1
 20013  005F9A  0012               	return		;funcret
 20014  005F9C                     __end_of_setPWM2duty:
 20015                           	opt stack 0
 20016                           tblptru	equ	0xFF8
 20017                           tblptrh	equ	0xFF7
 20018                           tblptrl	equ	0xFF6
 20019                           tablat	equ	0xFF5
 20020                           prodh	equ	0xFF4
 20021                           prodl	equ	0xFF3
 20022                           intcon	equ	0xFF2
 20023                           postinc0	equ	0xFEE
 20024                           wreg	equ	0xFE8
 20025                           postdec1	equ	0xFE5
 20026                           fsr1l	equ	0xFE1
 20027                           indf2	equ	0xFDF
 20028                           postinc2	equ	0xFDE
 20029                           postdec2	equ	0xFDD
 20030                           plusw2	equ	0xFDB
 20031                           fsr2h	equ	0xFDA
 20032                           fsr2l	equ	0xFD9
 20033                           status	equ	0xFD8
 20034                           
 20035 ;; *************** function _EEPROMConfig *****************
 20036 ;; Defined at:
 20037 ;;		line 73 in file "source/sysParams.h"
 20038 ;; Parameters:    Size  Location     Type
 20039 ;;		None
 20040 ;; Auto vars:     Size  Location     Type
 20041 ;;		None
 20042 ;; Return value:  Size  Location     Type
 20043 ;;                  1    wreg      void 
 20044 ;; Registers used:
 20045 ;;		None
 20046 ;; Tracked objects:
 20047 ;;		On entry : 0/0
 20048 ;;		On exit  : 0/0
 20049 ;;		Unchanged: 0/0
 20050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20051 ;;      Params:         0       0       0       0       0       0       0
 20052 ;;      Locals:         0       0       0       0       0       0       0
 20053 ;;      Temps:          0       0       0       0       0       0       0
 20054 ;;      Totals:         0       0       0       0       0       0       0
 20055 ;;Total ram usage:        0 bytes
 20056 ;; Hardware stack levels used:    1
 20057 ;; Hardware stack levels required when called:   12
 20058 ;; This function calls:
 20059 ;;		Nothing
 20060 ;; This function is called by:
 20061 ;;		_main
 20062 ;; This function uses a non-reentrant model
 20063 ;;
 20064                           
 20065                           	psect	text83
 20066  0073A0                     __ptext83:
 20067                           	opt stack 0
 20068  0073A0                     _EEPROMConfig:
 20069                           	opt stack 18
 20070                           
 20071                           ;sysParams.h: 74: EECON1bits.WREN = 0;
 20072                           
 20073                           ; BSR set to: 1
 20074                           ;incstack = 0
 20075  0073A0  94A6               	bcf	4006,2,c	;volatile
 20076                           
 20077                           ;sysParams.h: 75: EECON1bits.FREE = 0;
 20078  0073A2  98A6               	bcf	4006,4,c	;volatile
 20079  0073A4  0012               	return		;funcret
 20080  0073A6                     __end_of_EEPROMConfig:
 20081                           	opt stack 0
 20082                           tblptru	equ	0xFF8
 20083                           tblptrh	equ	0xFF7
 20084                           tblptrl	equ	0xFF6
 20085                           tablat	equ	0xFF5
 20086                           prodh	equ	0xFF4
 20087                           prodl	equ	0xFF3
 20088                           intcon	equ	0xFF2
 20089                           postinc0	equ	0xFEE
 20090                           wreg	equ	0xFE8
 20091                           postdec1	equ	0xFE5
 20092                           fsr1l	equ	0xFE1
 20093                           indf2	equ	0xFDF
 20094                           postinc2	equ	0xFDE
 20095                           postdec2	equ	0xFDD
 20096                           plusw2	equ	0xFDB
 20097                           fsr2h	equ	0xFDA
 20098                           fsr2l	equ	0xFD9
 20099                           status	equ	0xFD8
 20100                           
 20101 ;; *************** function _isr *****************
 20102 ;; Defined at:
 20103 ;;		line 20 in file "source/main.c"
 20104 ;; Parameters:    Size  Location     Type
 20105 ;;		None
 20106 ;; Auto vars:     Size  Location     Type
 20107 ;;		None
 20108 ;; Return value:  Size  Location     Type
 20109 ;;                  1    wreg      void 
 20110 ;; Registers used:
 20111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20112 ;; Tracked objects:
 20113 ;;		On entry : 0/0
 20114 ;;		On exit  : 0/0
 20115 ;;		Unchanged: 0/0
 20116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20117 ;;      Params:         0       0       0       0       0       0       0
 20118 ;;      Locals:         0       0       0       0       0       0       0
 20119 ;;      Temps:          0      17       0       0       0       0       0
 20120 ;;      Totals:         0      17       0       0       0       0       0
 20121 ;;Total ram usage:       17 bytes
 20122 ;; Hardware stack levels used:    1
 20123 ;; Hardware stack levels required when called:   11
 20124 ;; This function calls:
 20125 ;;		_T2int
 20126 ;;		_UARTint
 20127 ;; This function is called by:
 20128 ;;		Interrupt level 1
 20129 ;; This function uses a non-reentrant model
 20130 ;;
 20131                           
 20132                           	psect	intcodelo
 20133  000018                     __pintcodelo:
 20134                           	opt stack 0
 20135  000018                     _isr:
 20136                           	opt stack 9
 20137                           
 20138                           ;incstack = 0
 20139  000018  805C               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 20140  00001A  CFD8 F094          	movff	status,??_isr
 20141  00001E  CFE8 F095          	movff	wreg,??_isr+1
 20142  000022  CFE0 F096          	movff	bsr,??_isr+2
 20143  000026  CFFA F097          	movff	pclath,??_isr+3
 20144  00002A  CFFB F098          	movff	pclatu,??_isr+4
 20145  00002E  CFE9 F099          	movff	fsr0l,??_isr+5
 20146  000032  CFEA F09A          	movff	fsr0h,??_isr+6
 20147  000036  CFE1 F09B          	movff	fsr1l,??_isr+7
 20148  00003A  CFE2 F09C          	movff	fsr1h,??_isr+8
 20149  00003E  CFD9 F09D          	movff	fsr2l,??_isr+9
 20150  000042  CFDA F09E          	movff	fsr2h,??_isr+10
 20151  000046  CFF3 F09F          	movff	prodl,??_isr+11
 20152  00004A  CFF4 F0A0          	movff	prodh,??_isr+12
 20153  00004E  CFF6 F0A1          	movff	tblptrl,??_isr+13
 20154  000052  CFF7 F0A2          	movff	tblptrh,??_isr+14
 20155  000056  CFF8 F0A3          	movff	tblptru,??_isr+15
 20156  00005A  CFF5 F0A4          	movff	tablat,??_isr+16
 20157                           
 20158                           ;main.c: 21: if(PIE1bits.RC1IE && PIR1bits.RC1IF) {
 20159  00005E  BA9D               	btfsc	3997,5,c	;volatile
 20160  000060  AA9E               	btfss	3998,5,c	;volatile
 20161  000062  D003               	goto	i1l9586
 20162                           
 20163                           ;main.c: 22: UARTint();
 20164  000064  EC49  F023         	call	_UARTint	;wreg free
 20165                           
 20166                           ;main.c: 23: PIR1bits.RC1IF = 0;
 20167  000068  9A9E               	bcf	3998,5,c	;volatile
 20168  00006A                     i1l9586:
 20169                           
 20170                           ;main.c: 24: }
 20171                           ;main.c: 25: if(PIE1bits.TMR2IE && PIR1bits.TMR2IF) {
 20172  00006A  B29D               	btfsc	3997,1,c	;volatile
 20173  00006C  A29E               	btfss	3998,1,c	;volatile
 20174  00006E  D003               	goto	i1l928
 20175                           
 20176                           ;main.c: 26: T2int();
 20177  000070  EC54  F016         	call	_T2int	;wreg free
 20178                           
 20179                           ;main.c: 27: PIR1bits.TMR2IF = 0;
 20180  000074  929E               	bcf	3998,1,c	;volatile
 20181  000076                     i1l928:
 20182  000076  C0A4  FFF5         	movff	??_isr+16,tablat
 20183  00007A  C0A3  FFF8         	movff	??_isr+15,tblptru
 20184  00007E  C0A2  FFF7         	movff	??_isr+14,tblptrh
 20185  000082  C0A1  FFF6         	movff	??_isr+13,tblptrl
 20186  000086  C0A0  FFF4         	movff	??_isr+12,prodh
 20187  00008A  C09F  FFF3         	movff	??_isr+11,prodl
 20188  00008E  C09E  FFDA         	movff	??_isr+10,fsr2h
 20189  000092  C09D  FFD9         	movff	??_isr+9,fsr2l
 20190  000096  C09C  FFE2         	movff	??_isr+8,fsr1h
 20191  00009A  C09B  FFE1         	movff	??_isr+7,fsr1l
 20192  00009E  C09A  FFEA         	movff	??_isr+6,fsr0h
 20193  0000A2  C099  FFE9         	movff	??_isr+5,fsr0l
 20194  0000A6  C098  FFFB         	movff	??_isr+4,pclatu
 20195  0000AA  C097  FFFA         	movff	??_isr+3,pclath
 20196  0000AE  C096  FFE0         	movff	??_isr+2,bsr
 20197  0000B2  C095  FFE8         	movff	??_isr+1,wreg
 20198  0000B6  C094  FFD8         	movff	??_isr,status
 20199  0000BA  905C               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 20200  0000BC  0010               	retfie	
 20201  0000BE                     __end_of_isr:
 20202                           	opt stack 0
 20203                           pclatu	equ	0xFFB
 20204                           pclath	equ	0xFFA
 20205                           tblptru	equ	0xFF8
 20206                           tblptrh	equ	0xFF7
 20207                           tblptrl	equ	0xFF6
 20208                           tablat	equ	0xFF5
 20209                           prodh	equ	0xFF4
 20210                           prodl	equ	0xFF3
 20211                           intcon	equ	0xFF2
 20212                           postinc0	equ	0xFEE
 20213                           fsr0h	equ	0xFEA
 20214                           fsr0l	equ	0xFE9
 20215                           wreg	equ	0xFE8
 20216                           postdec1	equ	0xFE5
 20217                           fsr1h	equ	0xFE2
 20218                           fsr1l	equ	0xFE1
 20219                           bsr	equ	0xFE0
 20220                           indf2	equ	0xFDF
 20221                           postinc2	equ	0xFDE
 20222                           postdec2	equ	0xFDD
 20223                           plusw2	equ	0xFDB
 20224                           fsr2h	equ	0xFDA
 20225                           fsr2l	equ	0xFD9
 20226                           status	equ	0xFD8
 20227                           
 20228 ;; *************** function _UARTint *****************
 20229 ;; Defined at:
 20230 ;;		line 11 in file "source/UARTConfig.h"
 20231 ;; Parameters:    Size  Location     Type
 20232 ;;		None
 20233 ;; Auto vars:     Size  Location     Type
 20234 ;;  sas             1   51[BANK0 ] unsigned char 
 20235 ;; Return value:  Size  Location     Type
 20236 ;;                  1    wreg      void 
 20237 ;; Registers used:
 20238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20239 ;; Tracked objects:
 20240 ;;		On entry : 0/0
 20241 ;;		On exit  : 0/0
 20242 ;;		Unchanged: 0/0
 20243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20244 ;;      Params:         0       0       0       0       0       0       0
 20245 ;;      Locals:         0       1       0       0       0       0       0
 20246 ;;      Temps:          0       0       0       0       0       0       0
 20247 ;;      Totals:         0       1       0       0       0       0       0
 20248 ;;Total ram usage:        1 bytes
 20249 ;; Hardware stack levels used:    1
 20250 ;; Hardware stack levels required when called:   10
 20251 ;; This function calls:
 20252 ;;		_loadSysParams
 20253 ;;		i1_longPressDOWN
 20254 ;;		i1_longPressENTER
 20255 ;;		i1_longPressRETRO
 20256 ;;		i1_longPressUP
 20257 ;;		i1_pressDOWN
 20258 ;;		i1_pressENTER
 20259 ;;		i1_pressRETRO
 20260 ;;		i1_pressUP
 20261 ;;		i1_putchUART
 20262 ;;		i1_saveSysParams
 20263 ;;		i1_sysParamInit
 20264 ;; This function is called by:
 20265 ;;		_isr
 20266 ;; This function uses a non-reentrant model
 20267 ;;
 20268                           
 20269                           	psect	text85
 20270  004692                     __ptext85:
 20271                           	opt stack 0
 20272  004692                     _UARTint:
 20273                           	opt stack 9
 20274                           
 20275                           ;UARTConfig.h: 12: char sas = RCREG1;
 20276                           
 20277                           ;incstack = 0
 20278  004692  CFAE F093          	movff	4014,UARTint@sas	;volatile
 20279                           
 20280                           ;UARTConfig.h: 13: if(sas == 'A') {
 20281  004696  0E41               	movlw	65
 20282  004698  0100               	movlb	0	; () banked
 20283  00469A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20284  00469C  A4D8               	btfss	status,2,c
 20285  00469E  D00D               	goto	i1l9164
 20286                           
 20287                           ; BSR set to: 0
 20288                           ;UARTConfig.h: 14: putchUART(actualScreen);
 20289  0046A0  0101               	movlb	1	; () banked
 20290  0046A2  51BD               	movf	_actualScreen& (0+255),w,b
 20291  0046A4  ECB5  F039         	call	i1_putchUART
 20292                           
 20293                           ;UARTConfig.h: 15: putchUART(menuSection);
 20294  0046A8  0101               	movlb	1	; () banked
 20295  0046AA  51BC               	movf	_menuSection& (0+255),w,b
 20296  0046AC  ECB5  F039         	call	i1_putchUART
 20297                           
 20298                           ;UARTConfig.h: 16: putchUART(passSection);
 20299  0046B0  0101               	movlb	1	; () banked
 20300  0046B2  51BB               	movf	_passSection& (0+255),w,b
 20301  0046B4  ECB5  F039         	call	i1_putchUART
 20302                           
 20303                           ;UARTConfig.h: 17: }else if(sas == 'B') {
 20304  0046B8  0012               	return	
 20305  0046BA                     i1l9164:
 20306  0046BA  0E42               	movlw	66
 20307  0046BC  0100               	movlb	0	; () banked
 20308  0046BE  1993               	xorwf	UARTint@sas& (0+255),w,b
 20309  0046C0  A4D8               	btfss	status,2,c
 20310  0046C2  D003               	goto	i1l9168
 20311                           
 20312                           ; BSR set to: 0
 20313                           ;UARTConfig.h: 18: saveSysParams();
 20314  0046C4  ECAA  F030         	call	i1_saveSysParams	;wreg free
 20315                           
 20316                           ;UARTConfig.h: 19: }else if(sas == 'C') {
 20317  0046C8  0012               	return	
 20318  0046CA                     i1l9168:
 20319  0046CA  0E43               	movlw	67
 20320  0046CC  0100               	movlb	0	; () banked
 20321  0046CE  1993               	xorwf	UARTint@sas& (0+255),w,b
 20322  0046D0  A4D8               	btfss	status,2,c
 20323  0046D2  D003               	goto	i1l9172
 20324                           
 20325                           ; BSR set to: 0
 20326                           ;UARTConfig.h: 20: sysParamInit();
 20327  0046D4  EC42  F034         	call	i1_sysParamInit	;wreg free
 20328                           
 20329                           ;UARTConfig.h: 21: }else if(sas == 'D') {
 20330  0046D8  0012               	return	
 20331  0046DA                     i1l9172:
 20332  0046DA  0E44               	movlw	68
 20333  0046DC  0100               	movlb	0	; () banked
 20334  0046DE  1993               	xorwf	UARTint@sas& (0+255),w,b
 20335  0046E0  A4D8               	btfss	status,2,c
 20336  0046E2  D003               	goto	i1l9176
 20337                           
 20338                           ; BSR set to: 0
 20339                           ;UARTConfig.h: 22: loadSysParams();
 20340  0046E4  EC17  F037         	call	_loadSysParams	;wreg free
 20341                           
 20342                           ;UARTConfig.h: 23: }else if(sas == 'E') {
 20343  0046E8  0012               	return	
 20344  0046EA                     i1l9176:
 20345  0046EA  0E45               	movlw	69
 20346  0046EC  0100               	movlb	0	; () banked
 20347  0046EE  1993               	xorwf	UARTint@sas& (0+255),w,b
 20348  0046F0  B4D8               	btfsc	status,2,c
 20349  0046F2  0012               	return	
 20350                           
 20351                           ; BSR set to: 0
 20352                           ;UARTConfig.h: 57: else if(sas == 'R') {
 20353                           
 20354                           ; BSR set to: 0
 20355                           
 20356                           ; BSR set to: 0
 20357                           ;UARTConfig.h: 25: }
 20358  0046F4  0E52               	movlw	82
 20359  0046F6  0100               	movlb	0	; () banked
 20360  0046F8  1993               	xorwf	UARTint@sas& (0+255),w,b
 20361  0046FA  A4D8               	btfss	status,2,c
 20362  0046FC  D014               	goto	i1l9190
 20363                           
 20364                           ; BSR set to: 0
 20365                           ;UARTConfig.h: 58: if(actualScreen == 0) {
 20366  0046FE  0101               	movlb	1	; () banked
 20367  004700  51BD               	movf	_actualScreen& (0+255),w,b
 20368  004702  A4D8               	btfss	status,2,c
 20369  004704  D007               	goto	i1l9186
 20370                           
 20371                           ; BSR set to: 1
 20372                           ;UARTConfig.h: 59: actualScreen = 1;
 20373  004706  0E01               	movlw	1
 20374  004708  0101               	movlb	1	; () banked
 20375  00470A  6FBD               	movwf	_actualScreen& (0+255),b
 20376                           
 20377                           ;UARTConfig.h: 60: fd = 0;
 20378  00470C  0E00               	movlw	0
 20379  00470E  0101               	movlb	1	; () banked
 20380  004710  6FB9               	movwf	_fd& (0+255),b
 20381                           
 20382                           ;UARTConfig.h: 61: }else if(actualScreen == 4)
 20383  004712  0012               	return	
 20384  004714                     i1l9186:
 20385                           
 20386                           ; BSR set to: 1
 20387  004714  0E04               	movlw	4
 20388  004716  0101               	movlb	1	; () banked
 20389  004718  19BD               	xorwf	_actualScreen& (0+255),w,b
 20390  00471A  A4D8               	btfss	status,2,c
 20391  00471C  0012               	return	
 20392                           
 20393                           ; BSR set to: 1
 20394                           ;UARTConfig.h: 62: actualScreen = 9;
 20395  00471E  0E09               	movlw	9
 20396  004720  0101               	movlb	1	; () banked
 20397  004722  6FBD               	movwf	_actualScreen& (0+255),b
 20398                           
 20399                           ; BSR set to: 1
 20400                           ;UARTConfig.h: 63: }else if(sas == 'S')
 20401                           
 20402                           ; BSR set to: 1
 20403  004724  0012               	return	
 20404  004726                     i1l9190:
 20405  004726  0E53               	movlw	83
 20406  004728  0100               	movlb	0	; () banked
 20407  00472A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20408  00472C  A4D8               	btfss	status,2,c
 20409  00472E  D003               	goto	i1l9194
 20410                           
 20411                           ; BSR set to: 0
 20412                           ;UARTConfig.h: 64: pressUP();
 20413  004730  EC5B  F024         	call	i1_pressUP	;wreg free
 20414  004734  0012               	return	
 20415  004736                     i1l9194:
 20416                           
 20417                           ;UARTConfig.h: 65: else if(sas == 'T')
 20418  004736  0E54               	movlw	84
 20419  004738  0100               	movlb	0	; () banked
 20420  00473A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20421  00473C  A4D8               	btfss	status,2,c
 20422  00473E  D003               	goto	i1l9198
 20423                           
 20424                           ; BSR set to: 0
 20425                           ;UARTConfig.h: 66: pressDOWN();
 20426  004740  ECF9  F026         	call	i1_pressDOWN	;wreg free
 20427  004744  0012               	return	
 20428  004746                     i1l9198:
 20429                           
 20430                           ;UARTConfig.h: 67: else if(sas == 'U')
 20431  004746  0E55               	movlw	85
 20432  004748  0100               	movlb	0	; () banked
 20433  00474A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20434  00474C  A4D8               	btfss	status,2,c
 20435  00474E  D003               	goto	i1l9202
 20436                           
 20437                           ; BSR set to: 0
 20438                           ;UARTConfig.h: 68: pressRETRO();
 20439  004750  ECC7  F02B         	call	i1_pressRETRO	;wreg free
 20440  004754  0012               	return	
 20441  004756                     i1l9202:
 20442                           
 20443                           ;UARTConfig.h: 69: else if(sas == 'V')
 20444  004756  0E56               	movlw	86
 20445  004758  0100               	movlb	0	; () banked
 20446  00475A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20447  00475C  A4D8               	btfss	status,2,c
 20448  00475E  D003               	goto	i1l9206
 20449                           
 20450                           ; BSR set to: 0
 20451                           ;UARTConfig.h: 70: pressENTER();
 20452  004760  ECB8  F00A         	call	i1_pressENTER	;wreg free
 20453  004764  0012               	return	
 20454  004766                     i1l9206:
 20455                           
 20456                           ;UARTConfig.h: 71: else if(sas == 'W')
 20457  004766  0E57               	movlw	87
 20458  004768  0100               	movlb	0	; () banked
 20459  00476A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20460  00476C  A4D8               	btfss	status,2,c
 20461  00476E  D003               	goto	i1l9210
 20462                           
 20463                           ; BSR set to: 0
 20464                           ;UARTConfig.h: 72: longPressUP();
 20465  004770  ECF2  F034         	call	i1_longPressUP	;wreg free
 20466  004774  0012               	return	
 20467  004776                     i1l9210:
 20468                           
 20469                           ;UARTConfig.h: 73: else if(sas == 'X')
 20470  004776  0E58               	movlw	88
 20471  004778  0100               	movlb	0	; () banked
 20472  00477A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20473  00477C  A4D8               	btfss	status,2,c
 20474  00477E  D003               	goto	i1l9214
 20475                           
 20476                           ; BSR set to: 0
 20477                           ;UARTConfig.h: 74: longPressDOWN();
 20478  004780  ECF3  F038         	call	i1_longPressDOWN	;wreg free
 20479  004784  0012               	return	
 20480  004786                     i1l9214:
 20481                           
 20482                           ;UARTConfig.h: 75: else if(sas == 'Y')
 20483  004786  0E59               	movlw	89
 20484  004788  0100               	movlb	0	; () banked
 20485  00478A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20486  00478C  A4D8               	btfss	status,2,c
 20487  00478E  D003               	goto	i1l9218
 20488                           
 20489                           ; BSR set to: 0
 20490                           ;UARTConfig.h: 76: longPressRETRO();
 20491  004790  EC00  F028         	call	i1_longPressRETRO	;wreg free
 20492  004794  0012               	return	
 20493  004796                     i1l9218:
 20494                           
 20495                           ;UARTConfig.h: 77: else if(sas == 'Z')
 20496  004796  0E5A               	movlw	90
 20497  004798  0100               	movlb	0	; () banked
 20498  00479A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20499  00479C  A4D8               	btfss	status,2,c
 20500  00479E  0012               	return	
 20501                           
 20502                           ; BSR set to: 0
 20503                           ;UARTConfig.h: 78: longPressENTER();
 20504  0047A0  EC38  F00E         	call	i1_longPressENTER	;wreg free
 20505  0047A4  0012               	return	
 20506  0047A6                     __end_of_UARTint:
 20507                           	opt stack 0
 20508                           pclatu	equ	0xFFB
 20509                           pclath	equ	0xFFA
 20510                           tblptru	equ	0xFF8
 20511                           tblptrh	equ	0xFF7
 20512                           tblptrl	equ	0xFF6
 20513                           tablat	equ	0xFF5
 20514                           prodh	equ	0xFF4
 20515                           prodl	equ	0xFF3
 20516                           intcon	equ	0xFF2
 20517                           postinc0	equ	0xFEE
 20518                           fsr0h	equ	0xFEA
 20519                           fsr0l	equ	0xFE9
 20520                           wreg	equ	0xFE8
 20521                           postdec1	equ	0xFE5
 20522                           fsr1h	equ	0xFE2
 20523                           fsr1l	equ	0xFE1
 20524                           bsr	equ	0xFE0
 20525                           indf2	equ	0xFDF
 20526                           postinc2	equ	0xFDE
 20527                           postdec2	equ	0xFDD
 20528                           plusw2	equ	0xFDB
 20529                           fsr2h	equ	0xFDA
 20530                           fsr2l	equ	0xFD9
 20531                           status	equ	0xFD8
 20532                           
 20533 ;; *************** function i1_sysParamInit *****************
 20534 ;; Defined at:
 20535 ;;		line 168 in file "source/sysParams.h"
 20536 ;; Parameters:    Size  Location     Type
 20537 ;;		None
 20538 ;; Auto vars:     Size  Location     Type
 20539 ;;		None
 20540 ;; Return value:  Size  Location     Type
 20541 ;;                  1    wreg      void 
 20542 ;; Registers used:
 20543 ;;		wreg, status,2, status,0, cstack
 20544 ;; Tracked objects:
 20545 ;;		On entry : 0/0
 20546 ;;		On exit  : 0/0
 20547 ;;		Unchanged: 0/0
 20548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20549 ;;      Params:         0       0       0       0       0       0       0
 20550 ;;      Locals:         0       0       0       0       0       0       0
 20551 ;;      Temps:          0       0       0       0       0       0       0
 20552 ;;      Totals:         0       0       0       0       0       0       0
 20553 ;;Total ram usage:        0 bytes
 20554 ;; Hardware stack levels used:    1
 20555 ;; Hardware stack levels required when called:    7
 20556 ;; This function calls:
 20557 ;;		i1_calcSysVars
 20558 ;;		i1_readEEPROM
 20559 ;; This function is called by:
 20560 ;;		_UARTint
 20561 ;; This function uses a non-reentrant model
 20562 ;;
 20563                           
 20564                           	psect	text86
 20565  006884                     __ptext86:
 20566                           	opt stack 0
 20567  006884                     i1_sysParamInit:
 20568                           	opt stack 11
 20569                           
 20570                           ;sysParams.h: 171: fData.floatUB = readEEPROM(3);
 20571                           
 20572                           ;incstack = 0
 20573  006884  0E03               	movlw	3
 20574  006886  EC84  F039         	call	i1_readEEPROM
 20575  00688A  0100               	movlb	0	; () banked
 20576  00688C  6FB1               	movwf	(_fData+2)& (0+255),b
 20577                           
 20578                           ;sysParams.h: 172: fData.floatHB = readEEPROM(4);
 20579  00688E  0E04               	movlw	4
 20580  006890  EC84  F039         	call	i1_readEEPROM
 20581  006894  0100               	movlb	0	; () banked
 20582  006896  6FB0               	movwf	(_fData+1)& (0+255),b
 20583                           
 20584                           ;sysParams.h: 173: fData.floatLB = readEEPROM(5);
 20585  006898  0E05               	movlw	5
 20586  00689A  EC84  F039         	call	i1_readEEPROM
 20587  00689E  0100               	movlb	0	; () banked
 20588  0068A0  6FAF               	movwf	_fData& (0+255),b
 20589                           
 20590                           ; BSR set to: 0
 20591                           ;sysParams.h: 174: tiXcorte = fData.floatdat;
 20592  0068A2  C0AF  F195         	movff	_fData,_tiXcorte
 20593  0068A6  C0B0  F196         	movff	_fData+1,_tiXcorte+1
 20594  0068AA  C0B1  F197         	movff	_fData+2,_tiXcorte+2
 20595                           
 20596                           ;sysParams.h: 175: i16Data.int16HB = readEEPROM(6);
 20597  0068AE  0E06               	movlw	6
 20598  0068B0  EC84  F039         	call	i1_readEEPROM
 20599  0068B4  0100               	movlb	0	; () banked
 20600  0068B6  6FB5               	movwf	(_i16Data+1)& (0+255),b
 20601                           
 20602                           ;sysParams.h: 176: i16Data.int16LB = readEEPROM(7);
 20603  0068B8  0E07               	movlw	7
 20604  0068BA  EC84  F039         	call	i1_readEEPROM
 20605  0068BE  0100               	movlb	0	; () banked
 20606  0068C0  6FB4               	movwf	_i16Data& (0+255),b
 20607                           
 20608                           ; BSR set to: 0
 20609                           ;sysParams.h: 177: numCortes = i16Data.int16dat;
 20610  0068C2  C0B4  F0D2         	movff	_i16Data,_numCortes
 20611  0068C6  C0B5  F0D3         	movff	_i16Data+1,_numCortes+1
 20612                           
 20613                           ;sysParams.h: 189: fData.floatUB = readEEPROM(17);
 20614  0068CA  0E11               	movlw	17
 20615  0068CC  EC84  F039         	call	i1_readEEPROM
 20616  0068D0  0100               	movlb	0	; () banked
 20617  0068D2  6FB1               	movwf	(_fData+2)& (0+255),b
 20618                           
 20619                           ;sysParams.h: 190: fData.floatHB = readEEPROM(18);
 20620  0068D4  0E12               	movlw	18
 20621  0068D6  EC84  F039         	call	i1_readEEPROM
 20622  0068DA  0100               	movlb	0	; () banked
 20623  0068DC  6FB0               	movwf	(_fData+1)& (0+255),b
 20624                           
 20625                           ;sysParams.h: 191: fData.floatLB = readEEPROM(19);
 20626  0068DE  0E13               	movlw	19
 20627  0068E0  EC84  F039         	call	i1_readEEPROM
 20628  0068E4  0100               	movlb	0	; () banked
 20629  0068E6  6FAF               	movwf	_fData& (0+255),b
 20630                           
 20631                           ; BSR set to: 0
 20632                           ;sysParams.h: 192: velocidadMasa = fData.floatdat;
 20633  0068E8  C0AF  F18F         	movff	_fData,_velocidadMasa
 20634  0068EC  C0B0  F190         	movff	_fData+1,_velocidadMasa+1
 20635  0068F0  C0B1  F191         	movff	_fData+2,_velocidadMasa+2
 20636                           
 20637                           ; BSR set to: 0
 20638                           ;sysParams.h: 193: calcSysVars();
 20639  0068F4  EC99  F035         	call	i1_calcSysVars	;wreg free
 20640  0068F8  0012               	return		;funcret
 20641  0068FA                     __end_ofi1_sysParamInit:
 20642                           	opt stack 0
 20643                           pclatu	equ	0xFFB
 20644                           pclath	equ	0xFFA
 20645                           tblptru	equ	0xFF8
 20646                           tblptrh	equ	0xFF7
 20647                           tblptrl	equ	0xFF6
 20648                           tablat	equ	0xFF5
 20649                           prodh	equ	0xFF4
 20650                           prodl	equ	0xFF3
 20651                           intcon	equ	0xFF2
 20652                           postinc0	equ	0xFEE
 20653                           fsr0h	equ	0xFEA
 20654                           fsr0l	equ	0xFE9
 20655                           wreg	equ	0xFE8
 20656                           postdec1	equ	0xFE5
 20657                           fsr1h	equ	0xFE2
 20658                           fsr1l	equ	0xFE1
 20659                           bsr	equ	0xFE0
 20660                           indf2	equ	0xFDF
 20661                           postinc2	equ	0xFDE
 20662                           postdec2	equ	0xFDD
 20663                           plusw2	equ	0xFDB
 20664                           fsr2h	equ	0xFDA
 20665                           fsr2l	equ	0xFD9
 20666                           status	equ	0xFD8
 20667                           
 20668 ;; *************** function i1_readEEPROM *****************
 20669 ;; Defined at:
 20670 ;;		line 64 in file "source/sysParams.h"
 20671 ;; Parameters:    Size  Location     Type
 20672 ;;  adr             1    wreg     unsigned char 
 20673 ;; Auto vars:     Size  Location     Type
 20674 ;;  adr             1    0[BANK0 ] unsigned char 
 20675 ;; Return value:  Size  Location     Type
 20676 ;;                  1    wreg      unsigned char 
 20677 ;; Registers used:
 20678 ;;		wreg, status,2
 20679 ;; Tracked objects:
 20680 ;;		On entry : 0/0
 20681 ;;		On exit  : 0/0
 20682 ;;		Unchanged: 0/0
 20683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20684 ;;      Params:         0       0       0       0       0       0       0
 20685 ;;      Locals:         0       1       0       0       0       0       0
 20686 ;;      Temps:          0       0       0       0       0       0       0
 20687 ;;      Totals:         0       1       0       0       0       0       0
 20688 ;;Total ram usage:        1 bytes
 20689 ;; Hardware stack levels used:    1
 20690 ;; Hardware stack levels required when called:    4
 20691 ;; This function calls:
 20692 ;;		Nothing
 20693 ;; This function is called by:
 20694 ;;		i1_sysParamInit
 20695 ;; This function uses a non-reentrant model
 20696 ;;
 20697                           
 20698                           	psect	text87
 20699  007308                     __ptext87:
 20700                           	opt stack 0
 20701  007308                     i1_readEEPROM:
 20702                           	opt stack 13
 20703                           
 20704                           ;incstack = 0
 20705                           ;i1readEEPROM@adr stored from wreg
 20706  007308  0100               	movlb	0	; () banked
 20707  00730A  6F60               	movwf	i1readEEPROM@adr& (0+255),b
 20708                           
 20709                           ;sysParams.h: 65: EEADR = adr;
 20710  00730C  C060  FFA9         	movff	i1readEEPROM@adr,4009	;volatile
 20711                           
 20712                           ;sysParams.h: 66: EECON1bits.EEPGD = 0;
 20713  007310  9EA6               	bcf	4006,7,c	;volatile
 20714                           
 20715                           ;sysParams.h: 67: EECON1bits.CFGS = 0;
 20716  007312  9CA6               	bcf	4006,6,c	;volatile
 20717                           
 20718                           ;sysParams.h: 68: EECON1bits.RD = 1;
 20719  007314  80A6               	bsf	4006,0,c	;volatile
 20720  007316                     i1l287:
 20721  007316  B0A6               	btfsc	4006,0,c	;volatile
 20722  007318  D7FE               	goto	i1l287
 20723                           
 20724                           ;sysParams.h: 70: return EEDATA;
 20725  00731A  50A8               	movf	4008,w,c	;volatile
 20726  00731C  0012               	return		;funcret
 20727  00731E                     __end_ofi1_readEEPROM:
 20728                           	opt stack 0
 20729                           pclatu	equ	0xFFB
 20730                           pclath	equ	0xFFA
 20731                           tblptru	equ	0xFF8
 20732                           tblptrh	equ	0xFF7
 20733                           tblptrl	equ	0xFF6
 20734                           tablat	equ	0xFF5
 20735                           prodh	equ	0xFF4
 20736                           prodl	equ	0xFF3
 20737                           intcon	equ	0xFF2
 20738                           postinc0	equ	0xFEE
 20739                           fsr0h	equ	0xFEA
 20740                           fsr0l	equ	0xFE9
 20741                           wreg	equ	0xFE8
 20742                           postdec1	equ	0xFE5
 20743                           fsr1h	equ	0xFE2
 20744                           fsr1l	equ	0xFE1
 20745                           bsr	equ	0xFE0
 20746                           indf2	equ	0xFDF
 20747                           postinc2	equ	0xFDE
 20748                           postdec2	equ	0xFDD
 20749                           plusw2	equ	0xFDB
 20750                           fsr2h	equ	0xFDA
 20751                           fsr2l	equ	0xFD9
 20752                           status	equ	0xFD8
 20753                           
 20754 ;; *************** function i1_putchUART *****************
 20755 ;; Defined at:
 20756 ;;		line 59 in file "source/IOConfig.h"
 20757 ;; Parameters:    Size  Location     Type
 20758 ;;  val             1    wreg     unsigned char 
 20759 ;; Auto vars:     Size  Location     Type
 20760 ;;  val             1    0[BANK0 ] unsigned char 
 20761 ;; Return value:  Size  Location     Type
 20762 ;;                  1    wreg      void 
 20763 ;; Registers used:
 20764 ;;		wreg
 20765 ;; Tracked objects:
 20766 ;;		On entry : 0/0
 20767 ;;		On exit  : 0/0
 20768 ;;		Unchanged: 0/0
 20769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20770 ;;      Params:         0       0       0       0       0       0       0
 20771 ;;      Locals:         0       1       0       0       0       0       0
 20772 ;;      Temps:          0       0       0       0       0       0       0
 20773 ;;      Totals:         0       1       0       0       0       0       0
 20774 ;;Total ram usage:        1 bytes
 20775 ;; Hardware stack levels used:    1
 20776 ;; Hardware stack levels required when called:    4
 20777 ;; This function calls:
 20778 ;;		Nothing
 20779 ;; This function is called by:
 20780 ;;		_UARTint
 20781 ;; This function uses a non-reentrant model
 20782 ;;
 20783                           
 20784                           	psect	text88
 20785  00736A                     __ptext88:
 20786                           	opt stack 0
 20787  00736A                     i1_putchUART:
 20788                           	opt stack 14
 20789                           
 20790                           ;incstack = 0
 20791                           ;i1putchUART@val stored from wreg
 20792  00736A  0100               	movlb	0	; () banked
 20793  00736C  6F60               	movwf	i1putchUART@val& (0+255),b
 20794  00736E                     i1l222:
 20795  00736E  A2AC               	btfss	4012,1,c	;volatile
 20796  007370  D7FE               	goto	i1l222
 20797                           
 20798                           ;IOConfig.h: 61: TXREG1 = val;
 20799  007372  C060  FFAD         	movff	i1putchUART@val,4013	;volatile
 20800  007376  0012               	return		;funcret
 20801  007378                     __end_ofi1_putchUART:
 20802                           	opt stack 0
 20803                           pclatu	equ	0xFFB
 20804                           pclath	equ	0xFFA
 20805                           tblptru	equ	0xFF8
 20806                           tblptrh	equ	0xFF7
 20807                           tblptrl	equ	0xFF6
 20808                           tablat	equ	0xFF5
 20809                           prodh	equ	0xFF4
 20810                           prodl	equ	0xFF3
 20811                           intcon	equ	0xFF2
 20812                           postinc0	equ	0xFEE
 20813                           fsr0h	equ	0xFEA
 20814                           fsr0l	equ	0xFE9
 20815                           wreg	equ	0xFE8
 20816                           postdec1	equ	0xFE5
 20817                           fsr1h	equ	0xFE2
 20818                           fsr1l	equ	0xFE1
 20819                           bsr	equ	0xFE0
 20820                           indf2	equ	0xFDF
 20821                           postinc2	equ	0xFDE
 20822                           postdec2	equ	0xFDD
 20823                           plusw2	equ	0xFDB
 20824                           fsr2h	equ	0xFDA
 20825                           fsr2l	equ	0xFD9
 20826                           status	equ	0xFD8
 20827                           
 20828 ;; *************** function i1_pressUP *****************
 20829 ;; Defined at:
 20830 ;;		line 126 in file "source/DisplayProtocol.h"
 20831 ;; Parameters:    Size  Location     Type
 20832 ;;		None
 20833 ;; Auto vars:     Size  Location     Type
 20834 ;;		None
 20835 ;; Return value:  Size  Location     Type
 20836 ;;                  1    wreg      void 
 20837 ;; Registers used:
 20838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20839 ;; Tracked objects:
 20840 ;;		On entry : 0/0
 20841 ;;		On exit  : 0/0
 20842 ;;		Unchanged: 0/0
 20843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20844 ;;      Params:         0       0       0       0       0       0       0
 20845 ;;      Locals:         0       0       0       0       0       0       0
 20846 ;;      Temps:          0       1       0       0       0       0       0
 20847 ;;      Totals:         0       1       0       0       0       0       0
 20848 ;;Total ram usage:        1 bytes
 20849 ;; Hardware stack levels used:    1
 20850 ;; Hardware stack levels required when called:    5
 20851 ;; This function calls:
 20852 ;;		i1_chanValDigUP
 20853 ;; This function is called by:
 20854 ;;		_UARTint
 20855 ;; This function uses a non-reentrant model
 20856 ;;
 20857                           
 20858                           	psect	text89
 20859  0048B6                     __ptext89:
 20860                           	opt stack 0
 20861  0048B6                     i1_pressUP:
 20862                           	opt stack 13
 20863                           
 20864                           ;DisplayProtocol.h: 127: if (actualScreen == 0 || actualScreen == 4) {
 20865                           
 20866                           ;incstack = 0
 20867  0048B6  0101               	movlb	1	; () banked
 20868  0048B8  51BD               	movf	_actualScreen& (0+255),w,b
 20869  0048BA  B4D8               	btfsc	status,2,c
 20870  0048BC  D005               	goto	i1l8334
 20871                           
 20872                           ; BSR set to: 1
 20873  0048BE  0E04               	movlw	4
 20874  0048C0  0101               	movlb	1	; () banked
 20875  0048C2  19BD               	xorwf	_actualScreen& (0+255),w,b
 20876  0048C4  A4D8               	btfss	status,2,c
 20877  0048C6  D00C               	goto	i1l8340
 20878  0048C8                     i1l8334:
 20879                           
 20880                           ; BSR set to: 1
 20881                           ;DisplayProtocol.h: 128: menuSection++;
 20882  0048C8  0101               	movlb	1	; () banked
 20883  0048CA  2BBC               	incf	_menuSection& (0+255),f,b
 20884                           
 20885                           ; BSR set to: 1
 20886                           ;DisplayProtocol.h: 129: if (menuSection > 3)
 20887  0048CC  0101               	movlb	1	; () banked
 20888  0048CE  51BC               	movf	_menuSection& (0+255),w,b
 20889  0048D0  0A80               	xorlw	128
 20890  0048D2  0F7C               	addlw	-132
 20891  0048D4  A0D8               	btfss	status,0,c
 20892  0048D6  0012               	return	
 20893                           
 20894                           ; BSR set to: 1
 20895                           ;DisplayProtocol.h: 130: menuSection = 0;
 20896  0048D8  0E00               	movlw	0
 20897  0048DA  0101               	movlb	1	; () banked
 20898  0048DC  6FBC               	movwf	_menuSection& (0+255),b
 20899                           
 20900                           ; BSR set to: 1
 20901                           ;DisplayProtocol.h: 131: } else if (actualScreen == 1) {
 20902  0048DE  0012               	return	
 20903  0048E0                     i1l8340:
 20904                           
 20905                           ; BSR set to: 1
 20906  0048E0  0101               	movlb	1	; () banked
 20907  0048E2  05BD               	decf	_actualScreen& (0+255),w,b
 20908  0048E4  A4D8               	btfss	status,2,c
 20909  0048E6  D024               	goto	i1l8346
 20910                           
 20911                           ; BSR set to: 1
 20912                           ;DisplayProtocol.h: 132: introducido[passSection]++;
 20913  0048E8  0101               	movlb	1	; () banked
 20914  0048EA  51BB               	movf	_passSection& (0+255),w,b
 20915  0048EC  0D01               	mullw	1
 20916  0048EE  0EAD               	movlw	low _introducido
 20917  0048F0  24F3               	addwf	prodl,w,c
 20918  0048F2  6ED9               	movwf	fsr2l,c
 20919  0048F4  0E01               	movlw	high _introducido
 20920  0048F6  20F4               	addwfc	prodh,w,c
 20921  0048F8  6EDA               	movwf	fsr2h,c
 20922  0048FA  2ADF               	incf	indf2,f,c
 20923                           
 20924                           ;DisplayProtocol.h: 133: if (introducido[passSection] > 9)
 20925  0048FC  0101               	movlb	1	; () banked
 20926  0048FE  51BB               	movf	_passSection& (0+255),w,b
 20927  004900  0D01               	mullw	1
 20928  004902  0EAD               	movlw	low _introducido
 20929  004904  24F3               	addwf	prodl,w,c
 20930  004906  6ED9               	movwf	fsr2l,c
 20931  004908  0E01               	movlw	high _introducido
 20932  00490A  20F4               	addwfc	prodh,w,c
 20933  00490C  6EDA               	movwf	fsr2h,c
 20934  00490E  50DF               	movf	indf2,w,c
 20935  004910  0A80               	xorlw	128
 20936  004912  0F76               	addlw	-138
 20937  004914  A0D8               	btfss	status,0,c
 20938  004916  0012               	return	
 20939                           
 20940                           ; BSR set to: 1
 20941                           ;DisplayProtocol.h: 134: introducido[passSection] = 0;
 20942  004918  0101               	movlb	1	; () banked
 20943  00491A  51BB               	movf	_passSection& (0+255),w,b
 20944  00491C  0D01               	mullw	1
 20945  00491E  0EAD               	movlw	low _introducido
 20946  004920  24F3               	addwf	prodl,w,c
 20947  004922  6ED9               	movwf	fsr2l,c
 20948  004924  0E01               	movlw	high _introducido
 20949  004926  20F4               	addwfc	prodh,w,c
 20950  004928  6EDA               	movwf	fsr2h,c
 20951  00492A  0E00               	movlw	0
 20952  00492C  6EDF               	movwf	indf2,c
 20953                           
 20954                           ; BSR set to: 1
 20955                           ;DisplayProtocol.h: 135: } else if (actualScreen == 2 || actualScreen == 3
 20956  00492E  0012               	return	
 20957  004930                     i1l8346:
 20958                           
 20959                           ; BSR set to: 1
 20960                           ;DisplayProtocol.h: 136: || actualScreen == 10 || actualScreen == 11
 20961                           ;DisplayProtocol.h: 137: || actualScreen == 15) {
 20962  004930  0E02               	movlw	2
 20963  004932  0101               	movlb	1	; () banked
 20964  004934  19BD               	xorwf	_actualScreen& (0+255),w,b
 20965  004936  B4D8               	btfsc	status,2,c
 20966  004938  D014               	goto	i1l8356
 20967                           
 20968                           ; BSR set to: 1
 20969  00493A  0E03               	movlw	3
 20970  00493C  0101               	movlb	1	; () banked
 20971  00493E  19BD               	xorwf	_actualScreen& (0+255),w,b
 20972  004940  B4D8               	btfsc	status,2,c
 20973  004942  D00F               	goto	i1l8356
 20974                           
 20975                           ; BSR set to: 1
 20976  004944  0E0A               	movlw	10
 20977  004946  0101               	movlb	1	; () banked
 20978  004948  19BD               	xorwf	_actualScreen& (0+255),w,b
 20979  00494A  B4D8               	btfsc	status,2,c
 20980  00494C  D00A               	goto	i1l8356
 20981                           
 20982                           ; BSR set to: 1
 20983  00494E  0E0B               	movlw	11
 20984  004950  0101               	movlb	1	; () banked
 20985  004952  19BD               	xorwf	_actualScreen& (0+255),w,b
 20986  004954  B4D8               	btfsc	status,2,c
 20987  004956  D005               	goto	i1l8356
 20988                           
 20989                           ; BSR set to: 1
 20990  004958  0E0F               	movlw	15
 20991  00495A  0101               	movlb	1	; () banked
 20992  00495C  19BD               	xorwf	_actualScreen& (0+255),w,b
 20993  00495E  A4D8               	btfss	status,2,c
 20994  004960  D011               	goto	i1l8362
 20995  004962                     i1l8356:
 20996                           
 20997                           ; BSR set to: 1
 20998                           ;DisplayProtocol.h: 138: selSN = !selSN;
 20999  004962  0101               	movlb	1	; () banked
 21000  004964  51BA               	movf	_selSN& (0+255),w,b
 21001  004966  A4D8               	btfss	status,2,c
 21002  004968  D002               	goto	i1u1154_20
 21003  00496A  0E01               	movlw	1
 21004  00496C  D001               	goto	i1u1155_20
 21005  00496E                     i1u1154_20:
 21006  00496E  0E00               	movlw	0
 21007  004970                     i1u1155_20:
 21008  004970  0101               	movlb	1	; () banked
 21009  004972  6FBA               	movwf	_selSN& (0+255),b
 21010                           
 21011                           ; BSR set to: 1
 21012                           ;DisplayProtocol.h: 139: if(selSN > 1)
 21013  004974  0E01               	movlw	1
 21014  004976  0101               	movlb	1	; () banked
 21015  004978  65BA               	cpfsgt	_selSN& (0+255),b
 21016  00497A  0012               	return	
 21017                           
 21018                           ; BSR set to: 1
 21019                           ;DisplayProtocol.h: 140: selSN = 0;
 21020  00497C  0E00               	movlw	0
 21021  00497E  0101               	movlb	1	; () banked
 21022  004980  6FBA               	movwf	_selSN& (0+255),b
 21023                           
 21024                           ; BSR set to: 1
 21025                           ;DisplayProtocol.h: 141: }else if(actualScreen == 5) {
 21026  004982  0012               	return	
 21027  004984                     i1l8362:
 21028                           
 21029                           ; BSR set to: 1
 21030  004984  0E05               	movlw	5
 21031  004986  0101               	movlb	1	; () banked
 21032  004988  19BD               	xorwf	_actualScreen& (0+255),w,b
 21033  00498A  B4D8               	btfsc	status,2,c
 21034  00498C  D008               	goto	i1l8372
 21035  00498E  D013               	goto	i1l8374
 21036  004990                     i1l8366:
 21037                           
 21038                           ; BSR set to: 1
 21039                           ;DisplayProtocol.h: 146: chanValDigUP();
 21040  004990  ECCE  F029         	call	i1_chanValDigUP	;wreg free
 21041                           
 21042                           ;DisplayProtocol.h: 147: break;
 21043  004994  0012               	return	
 21044  004996                     i1l8368:
 21045                           
 21046                           ;DisplayProtocol.h: 149: chanVals++;
 21047  004996  0101               	movlb	1	; () banked
 21048  004998  4BB6               	infsnz	_chanVals& (0+255),f,b
 21049  00499A  2BB7               	incf	(_chanVals+1)& (0+255),f,b
 21050                           
 21051                           ; BSR set to: 1
 21052                           ;DisplayProtocol.h: 151: }
 21053                           ;DisplayProtocol.h: 152: }
 21054                           
 21055                           ;DisplayProtocol.h: 150: break;
 21056  00499C  0012               	return	
 21057  00499E                     i1l8372:
 21058                           
 21059                           ; BSR set to: 1
 21060  00499E  0101               	movlb	1	; () banked
 21061  0049A0  51BC               	movf	_menuSection& (0+255),w,b
 21062                           
 21063                           ; Switch size 1, requested type "space"
 21064                           ; Number of cases is 3, Range of values is 0 to 2
 21065                           ; switch strategies available:
 21066                           ; Name         Instructions Cycles
 21067                           ; simple_byte           10     6 (average)
 21068                           ;	Chosen strategy is simple_byte
 21069  0049A2  0A00               	xorlw	0	; case 0
 21070  0049A4  B4D8               	btfsc	status,2,c
 21071  0049A6  0012               	return	
 21072  0049A8  0A01               	xorlw	1	; case 1
 21073  0049AA  B4D8               	btfsc	status,2,c
 21074  0049AC  D7F1               	goto	i1l8366
 21075  0049AE  0A03               	xorlw	3	; case 2
 21076  0049B0  A4D8               	btfss	status,2,c
 21077                           
 21078                           ; BSR set to: 1
 21079                           ;DisplayProtocol.h: 153: }else if(actualScreen == 12)
 21080  0049B2  0012               	return	
 21081  0049B4  D7F0               	goto	i1l8368
 21082  0049B6                     i1l8374:
 21083                           
 21084                           ; BSR set to: 1
 21085  0049B6  0E0C               	movlw	12
 21086  0049B8  0101               	movlb	1	; () banked
 21087  0049BA  19BD               	xorwf	_actualScreen& (0+255),w,b
 21088  0049BC  A4D8               	btfss	status,2,c
 21089  0049BE  0012               	return	
 21090                           
 21091                           ; BSR set to: 1
 21092                           ;DisplayProtocol.h: 154: chanValDigUP();
 21093  0049C0  ECCE  F029         	call	i1_chanValDigUP	;wreg free
 21094  0049C4  0012               	return	
 21095  0049C6                     __end_ofi1_pressUP:
 21096                           	opt stack 0
 21097                           pclatu	equ	0xFFB
 21098                           pclath	equ	0xFFA
 21099                           tblptru	equ	0xFF8
 21100                           tblptrh	equ	0xFF7
 21101                           tblptrl	equ	0xFF6
 21102                           tablat	equ	0xFF5
 21103                           prodh	equ	0xFF4
 21104                           prodl	equ	0xFF3
 21105                           intcon	equ	0xFF2
 21106                           postinc0	equ	0xFEE
 21107                           fsr0h	equ	0xFEA
 21108                           fsr0l	equ	0xFE9
 21109                           wreg	equ	0xFE8
 21110                           postdec1	equ	0xFE5
 21111                           fsr1h	equ	0xFE2
 21112                           fsr1l	equ	0xFE1
 21113                           bsr	equ	0xFE0
 21114                           indf2	equ	0xFDF
 21115                           postinc2	equ	0xFDE
 21116                           postdec2	equ	0xFDD
 21117                           plusw2	equ	0xFDB
 21118                           fsr2h	equ	0xFDA
 21119                           fsr2l	equ	0xFD9
 21120                           status	equ	0xFD8
 21121                           
 21122 ;; *************** function i1_chanValDigUP *****************
 21123 ;; Defined at:
 21124 ;;		line 28 in file "source/DisplayProtocol.h"
 21125 ;; Parameters:    Size  Location     Type
 21126 ;;		None
 21127 ;; Auto vars:     Size  Location     Type
 21128 ;;		None
 21129 ;; Return value:  Size  Location     Type
 21130 ;;                  1    wreg      void 
 21131 ;; Registers used:
 21132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21133 ;; Tracked objects:
 21134 ;;		On entry : 0/0
 21135 ;;		On exit  : 0/0
 21136 ;;		Unchanged: 0/0
 21137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21138 ;;      Params:         0       0       0       0       0       0       0
 21139 ;;      Locals:         0       0       0       0       0       0       0
 21140 ;;      Temps:          0       5       0       0       0       0       0
 21141 ;;      Totals:         0       5       0       0       0       0       0
 21142 ;;Total ram usage:        5 bytes
 21143 ;; Hardware stack levels used:    1
 21144 ;; Hardware stack levels required when called:    4
 21145 ;; This function calls:
 21146 ;;		Nothing
 21147 ;; This function is called by:
 21148 ;;		i1_pressUP
 21149 ;; This function uses a non-reentrant model
 21150 ;;
 21151                           
 21152                           	psect	text90
 21153  00539C                     __ptext90:
 21154                           	opt stack 0
 21155  00539C                     i1_chanValDigUP:
 21156                           	opt stack 13
 21157                           
 21158                           ;DisplayProtocol.h: 29: chanValdig[chanValSection]++;
 21159                           
 21160                           ;incstack = 0
 21161  00539C  0101               	movlb	1	; () banked
 21162  00539E  519C               	movf	_chanValSection& (0+255),w,b
 21163  0053A0  0D01               	mullw	1
 21164  0053A2  0EA3               	movlw	low _chanValdig
 21165  0053A4  24F3               	addwf	prodl,w,c
 21166  0053A6  6ED9               	movwf	fsr2l,c
 21167  0053A8  0E01               	movlw	high _chanValdig
 21168  0053AA  20F4               	addwfc	prodh,w,c
 21169  0053AC  6EDA               	movwf	fsr2h,c
 21170  0053AE  2ADF               	incf	indf2,f,c
 21171                           
 21172                           ;DisplayProtocol.h: 30: if(chanValdig[chanValSection] > 9) {
 21173  0053B0  0101               	movlb	1	; () banked
 21174  0053B2  519C               	movf	_chanValSection& (0+255),w,b
 21175  0053B4  0D01               	mullw	1
 21176  0053B6  0EA3               	movlw	low _chanValdig
 21177  0053B8  24F3               	addwf	prodl,w,c
 21178  0053BA  6ED9               	movwf	fsr2l,c
 21179  0053BC  0E01               	movlw	high _chanValdig
 21180  0053BE  20F4               	addwfc	prodh,w,c
 21181  0053C0  6EDA               	movwf	fsr2h,c
 21182  0053C2  50DF               	movf	indf2,w,c
 21183  0053C4  0A80               	xorlw	128
 21184  0053C6  0F76               	addlw	-138
 21185  0053C8  A0D8               	btfss	status,0,c
 21186  0053CA  0012               	return	
 21187                           
 21188                           ; BSR set to: 1
 21189                           ;DisplayProtocol.h: 31: chanValdig[chanValSection] = 0;
 21190  0053CC  0101               	movlb	1	; () banked
 21191  0053CE  519C               	movf	_chanValSection& (0+255),w,b
 21192  0053D0  0D01               	mullw	1
 21193  0053D2  0EA3               	movlw	low _chanValdig
 21194  0053D4  24F3               	addwf	prodl,w,c
 21195  0053D6  6ED9               	movwf	fsr2l,c
 21196  0053D8  0E01               	movlw	high _chanValdig
 21197  0053DA  20F4               	addwfc	prodh,w,c
 21198  0053DC  6EDA               	movwf	fsr2h,c
 21199  0053DE  0E00               	movlw	0
 21200  0053E0  6EDF               	movwf	indf2,c
 21201                           
 21202                           ; BSR set to: 1
 21203                           ;DisplayProtocol.h: 32: if(chanValSection > 1 && chanValdig[chanValSection - 1] < 9)
 21204  0053E2  0101               	movlb	1	; () banked
 21205  0053E4  519C               	movf	_chanValSection& (0+255),w,b
 21206  0053E6  0A80               	xorlw	128
 21207  0053E8  0F7E               	addlw	-130
 21208  0053EA  A0D8               	btfss	status,0,c
 21209  0053EC  0012               	return	
 21210                           
 21211                           ; BSR set to: 1
 21212  0053EE  0EFF               	movlw	255
 21213  0053F0  0100               	movlb	0	; () banked
 21214  0053F2  6F60               	movwf	??i1_chanValDigUP& (0+255),b
 21215  0053F4  0EFF               	movlw	255
 21216  0053F6  0100               	movlb	0	; () banked
 21217  0053F8  6F61               	movwf	(??i1_chanValDigUP+1)& (0+255),b
 21218  0053FA  C19C  F062         	movff	_chanValSection,??i1_chanValDigUP+2
 21219  0053FE  0100               	movlb	0	; () banked
 21220  005400  6B63               	clrf	(??i1_chanValDigUP+3)& (0+255),b
 21221  005402  BF62               	btfsc	(??i1_chanValDigUP+2)& (0+255),7,b
 21222  005404  0763               	decf	(??i1_chanValDigUP+3)& (0+255),f,b
 21223  005406  0100               	movlb	0	; () banked
 21224  005408  5160               	movf	??i1_chanValDigUP& (0+255),w,b
 21225  00540A  0100               	movlb	0	; () banked
 21226  00540C  2762               	addwf	(??i1_chanValDigUP+2)& (0+255),f,b
 21227  00540E  0100               	movlb	0	; () banked
 21228  005410  5161               	movf	(??i1_chanValDigUP+1)& (0+255),w,b
 21229  005412  0100               	movlb	0	; () banked
 21230  005414  2363               	addwfc	(??i1_chanValDigUP+3)& (0+255),f,b
 21231  005416  0EA3               	movlw	low _chanValdig
 21232  005418  0100               	movlb	0	; () banked
 21233  00541A  2562               	addwf	(??i1_chanValDigUP+2)& (0+255),w,b
 21234  00541C  6ED9               	movwf	fsr2l,c
 21235  00541E  0E01               	movlw	high _chanValdig
 21236  005420  0100               	movlb	0	; () banked
 21237  005422  2163               	addwfc	(??i1_chanValDigUP+3)& (0+255),w,b
 21238  005424  6EDA               	movwf	fsr2h,c
 21239  005426  50DF               	movf	indf2,w,c
 21240  005428  0A80               	xorlw	128
 21241  00542A  0F77               	addlw	-137
 21242  00542C  B0D8               	btfsc	status,0,c
 21243  00542E  0012               	return	
 21244                           
 21245                           ; BSR set to: 0
 21246                           ;DisplayProtocol.h: 33: chanValdig[chanValSection - 1]++;
 21247  005430  0EFF               	movlw	255
 21248  005432  0100               	movlb	0	; () banked
 21249  005434  6F60               	movwf	??i1_chanValDigUP& (0+255),b
 21250  005436  0EFF               	movlw	255
 21251  005438  0100               	movlb	0	; () banked
 21252  00543A  6F61               	movwf	(??i1_chanValDigUP+1)& (0+255),b
 21253  00543C  C19C  F062         	movff	_chanValSection,??i1_chanValDigUP+2
 21254  005440  0100               	movlb	0	; () banked
 21255  005442  6B63               	clrf	(??i1_chanValDigUP+3)& (0+255),b
 21256  005444  BF62               	btfsc	(??i1_chanValDigUP+2)& (0+255),7,b
 21257  005446  0763               	decf	(??i1_chanValDigUP+3)& (0+255),f,b
 21258  005448  0100               	movlb	0	; () banked
 21259  00544A  5160               	movf	??i1_chanValDigUP& (0+255),w,b
 21260  00544C  0100               	movlb	0	; () banked
 21261  00544E  2762               	addwf	(??i1_chanValDigUP+2)& (0+255),f,b
 21262  005450  0100               	movlb	0	; () banked
 21263  005452  5161               	movf	(??i1_chanValDigUP+1)& (0+255),w,b
 21264  005454  0100               	movlb	0	; () banked
 21265  005456  2363               	addwfc	(??i1_chanValDigUP+3)& (0+255),f,b
 21266  005458  0EA3               	movlw	low _chanValdig
 21267  00545A  0100               	movlb	0	; () banked
 21268  00545C  2562               	addwf	(??i1_chanValDigUP+2)& (0+255),w,b
 21269  00545E  6ED9               	movwf	fsr2l,c
 21270  005460  0E01               	movlw	high _chanValdig
 21271  005462  0100               	movlb	0	; () banked
 21272  005464  2163               	addwfc	(??i1_chanValDigUP+3)& (0+255),w,b
 21273  005466  6EDA               	movwf	fsr2h,c
 21274  005468  2ADF               	incf	indf2,f,c
 21275                           
 21276                           ; BSR set to: 0
 21277  00546A  0012               	return	
 21278  00546C                     __end_ofi1_chanValDigUP:
 21279                           	opt stack 0
 21280                           pclatu	equ	0xFFB
 21281                           pclath	equ	0xFFA
 21282                           tblptru	equ	0xFF8
 21283                           tblptrh	equ	0xFF7
 21284                           tblptrl	equ	0xFF6
 21285                           tablat	equ	0xFF5
 21286                           prodh	equ	0xFF4
 21287                           prodl	equ	0xFF3
 21288                           intcon	equ	0xFF2
 21289                           postinc0	equ	0xFEE
 21290                           fsr0h	equ	0xFEA
 21291                           fsr0l	equ	0xFE9
 21292                           wreg	equ	0xFE8
 21293                           postdec1	equ	0xFE5
 21294                           fsr1h	equ	0xFE2
 21295                           fsr1l	equ	0xFE1
 21296                           bsr	equ	0xFE0
 21297                           indf2	equ	0xFDF
 21298                           postinc2	equ	0xFDE
 21299                           postdec2	equ	0xFDD
 21300                           plusw2	equ	0xFDB
 21301                           fsr2h	equ	0xFDA
 21302                           fsr2l	equ	0xFD9
 21303                           status	equ	0xFD8
 21304                           
 21305 ;; *************** function i1_pressRETRO *****************
 21306 ;; Defined at:
 21307 ;;		line 227 in file "source/DisplayProtocol.h"
 21308 ;; Parameters:    Size  Location     Type
 21309 ;;		None
 21310 ;; Auto vars:     Size  Location     Type
 21311 ;;		None
 21312 ;; Return value:  Size  Location     Type
 21313 ;;                  1    wreg      void 
 21314 ;; Registers used:
 21315 ;;		wreg, status,2, status,0, cstack
 21316 ;; Tracked objects:
 21317 ;;		On entry : 0/0
 21318 ;;		On exit  : 0/0
 21319 ;;		Unchanged: 0/0
 21320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21321 ;;      Params:         0       0       0       0       0       0       0
 21322 ;;      Locals:         0       0       0       0       0       0       0
 21323 ;;      Temps:          0       0       0       0       0       0       0
 21324 ;;      Totals:         0       0       0       0       0       0       0
 21325 ;;Total ram usage:        0 bytes
 21326 ;; Hardware stack levels used:    1
 21327 ;; Hardware stack levels required when called:    6
 21328 ;; This function calls:
 21329 ;;		i1_initProtocoll
 21330 ;; This function is called by:
 21331 ;;		_UARTint
 21332 ;; This function uses a non-reentrant model
 21333 ;;
 21334                           
 21335                           	psect	text91
 21336  00578E                     __ptext91:
 21337                           	opt stack 0
 21338  00578E                     i1_pressRETRO:
 21339                           	opt stack 12
 21340                           
 21341                           ;DisplayProtocol.h: 228: if (actualScreen == 1) {
 21342                           
 21343                           ;incstack = 0
 21344  00578E  0101               	movlb	1	; () banked
 21345  005790  05BD               	decf	_actualScreen& (0+255),w,b
 21346  005792  A4D8               	btfss	status,2,c
 21347  005794  D004               	goto	i1l8464
 21348                           
 21349                           ; BSR set to: 1
 21350                           ;DisplayProtocol.h: 229: actualScreen = 0;
 21351  005796  0E00               	movlw	0
 21352  005798  0101               	movlb	1	; () banked
 21353  00579A  6FBD               	movwf	_actualScreen& (0+255),b
 21354                           
 21355                           ;DisplayProtocol.h: 230: }else if (actualScreen == 2 || actualScreen == 3
 21356  00579C  0012               	return	
 21357  00579E                     i1l8464:
 21358                           
 21359                           ; BSR set to: 1
 21360                           ;DisplayProtocol.h: 231: || actualScreen == 10 || actualScreen == 11
 21361                           ;DisplayProtocol.h: 232: || actualScreen == 15) {
 21362  00579E  0E02               	movlw	2
 21363  0057A0  0101               	movlb	1	; () banked
 21364  0057A2  19BD               	xorwf	_actualScreen& (0+255),w,b
 21365  0057A4  B4D8               	btfsc	status,2,c
 21366  0057A6  D014               	goto	i1l666
 21367                           
 21368                           ; BSR set to: 1
 21369  0057A8  0E03               	movlw	3
 21370  0057AA  0101               	movlb	1	; () banked
 21371  0057AC  19BD               	xorwf	_actualScreen& (0+255),w,b
 21372  0057AE  B4D8               	btfsc	status,2,c
 21373  0057B0  D00F               	goto	i1l666
 21374                           
 21375                           ; BSR set to: 1
 21376  0057B2  0E0A               	movlw	10
 21377  0057B4  0101               	movlb	1	; () banked
 21378  0057B6  19BD               	xorwf	_actualScreen& (0+255),w,b
 21379  0057B8  B4D8               	btfsc	status,2,c
 21380  0057BA  D00A               	goto	i1l666
 21381                           
 21382                           ; BSR set to: 1
 21383  0057BC  0E0B               	movlw	11
 21384  0057BE  0101               	movlb	1	; () banked
 21385  0057C0  19BD               	xorwf	_actualScreen& (0+255),w,b
 21386  0057C2  B4D8               	btfsc	status,2,c
 21387  0057C4  D005               	goto	i1l666
 21388                           
 21389                           ; BSR set to: 1
 21390  0057C6  0E0F               	movlw	15
 21391  0057C8  0101               	movlb	1	; () banked
 21392  0057CA  19BD               	xorwf	_actualScreen& (0+255),w,b
 21393  0057CC  A4D8               	btfss	status,2,c
 21394  0057CE  D003               	goto	i1l8474
 21395  0057D0                     i1l666:
 21396                           
 21397                           ; BSR set to: 1
 21398                           ;DisplayProtocol.h: 233: actualScreen = tempLastScreen;
 21399  0057D0  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 21400                           
 21401                           ;DisplayProtocol.h: 234: }else if(actualScreen == 5) {
 21402  0057D4  0012               	return	
 21403  0057D6                     i1l8474:
 21404                           
 21405                           ; BSR set to: 1
 21406  0057D6  0E05               	movlw	5
 21407  0057D8  0101               	movlb	1	; () banked
 21408  0057DA  19BD               	xorwf	_actualScreen& (0+255),w,b
 21409  0057DC  A4D8               	btfss	status,2,c
 21410  0057DE  D015               	goto	i1l8486
 21411                           
 21412                           ; BSR set to: 1
 21413                           ;DisplayProtocol.h: 235: if(menuSection != 2) {
 21414  0057E0  0E02               	movlw	2
 21415  0057E2  0101               	movlb	1	; () banked
 21416  0057E4  19BC               	xorwf	_menuSection& (0+255),w,b
 21417  0057E6  B4D8               	btfsc	status,2,c
 21418  0057E8  D00C               	goto	i1l8484
 21419                           
 21420                           ; BSR set to: 1
 21421                           ;DisplayProtocol.h: 236: chanValSection++;
 21422  0057EA  0101               	movlb	1	; () banked
 21423  0057EC  2B9C               	incf	_chanValSection& (0+255),f,b
 21424                           
 21425                           ; BSR set to: 1
 21426                           ;DisplayProtocol.h: 237: if(chanValSection > 5)
 21427  0057EE  0101               	movlb	1	; () banked
 21428  0057F0  519C               	movf	_chanValSection& (0+255),w,b
 21429  0057F2  0A80               	xorlw	128
 21430  0057F4  0F7A               	addlw	-134
 21431  0057F6  A0D8               	btfss	status,0,c
 21432  0057F8  0012               	return	
 21433                           
 21434                           ; BSR set to: 1
 21435                           ;DisplayProtocol.h: 238: chanValSection = 0;
 21436  0057FA  0E00               	movlw	0
 21437  0057FC  0101               	movlb	1	; () banked
 21438  0057FE  6F9C               	movwf	_chanValSection& (0+255),b
 21439                           
 21440                           ; BSR set to: 1
 21441                           ;DisplayProtocol.h: 239: }else
 21442  005800  0012               	return	
 21443  005802                     i1l8484:
 21444                           
 21445                           ; BSR set to: 1
 21446                           ;DisplayProtocol.h: 240: actualScreen = 4;
 21447  005802  0E04               	movlw	4
 21448  005804  0101               	movlb	1	; () banked
 21449  005806  6FBD               	movwf	_actualScreen& (0+255),b
 21450                           
 21451                           ; BSR set to: 1
 21452                           ;DisplayProtocol.h: 241: }else if(actualScreen == 11)
 21453  005808  0012               	return	
 21454  00580A                     i1l8486:
 21455                           
 21456                           ; BSR set to: 1
 21457  00580A  0E0B               	movlw	11
 21458  00580C  0101               	movlb	1	; () banked
 21459  00580E  19BD               	xorwf	_actualScreen& (0+255),w,b
 21460  005810  A4D8               	btfss	status,2,c
 21461  005812  D004               	goto	i1l8490
 21462                           
 21463                           ; BSR set to: 1
 21464                           ;DisplayProtocol.h: 242: actualScreen = 4;
 21465  005814  0E04               	movlw	4
 21466  005816  0101               	movlb	1	; () banked
 21467  005818  6FBD               	movwf	_actualScreen& (0+255),b
 21468  00581A  0012               	return	
 21469  00581C                     i1l8490:
 21470                           
 21471                           ; BSR set to: 1
 21472                           ;DisplayProtocol.h: 243: else if(actualScreen == 12) {
 21473  00581C  0E0C               	movlw	12
 21474  00581E  0101               	movlb	1	; () banked
 21475  005820  19BD               	xorwf	_actualScreen& (0+255),w,b
 21476  005822  A4D8               	btfss	status,2,c
 21477  005824  D00C               	goto	i1l8498
 21478                           
 21479                           ; BSR set to: 1
 21480                           ;DisplayProtocol.h: 244: chanValSection++;
 21481  005826  0101               	movlb	1	; () banked
 21482  005828  2B9C               	incf	_chanValSection& (0+255),f,b
 21483                           
 21484                           ; BSR set to: 1
 21485                           ;DisplayProtocol.h: 245: if(chanValSection > 5)
 21486  00582A  0101               	movlb	1	; () banked
 21487  00582C  519C               	movf	_chanValSection& (0+255),w,b
 21488  00582E  0A80               	xorlw	128
 21489  005830  0F7A               	addlw	-134
 21490  005832  A0D8               	btfss	status,0,c
 21491  005834  0012               	return	
 21492                           
 21493                           ; BSR set to: 1
 21494                           ;DisplayProtocol.h: 246: chanValSection = 0;
 21495  005836  0E00               	movlw	0
 21496  005838  0101               	movlb	1	; () banked
 21497  00583A  6F9C               	movwf	_chanValSection& (0+255),b
 21498                           
 21499                           ; BSR set to: 1
 21500                           ;DisplayProtocol.h: 247: }else if(actualScreen == 13) {
 21501  00583C  0012               	return	
 21502  00583E                     i1l8498:
 21503                           
 21504                           ; BSR set to: 1
 21505  00583E  0E0D               	movlw	13
 21506  005840  0101               	movlb	1	; () banked
 21507  005842  19BD               	xorwf	_actualScreen& (0+255),w,b
 21508  005844  A4D8               	btfss	status,2,c
 21509  005846  0012               	return	
 21510                           
 21511                           ; BSR set to: 1
 21512                           ;DisplayProtocol.h: 248: initProtocoll(1);
 21513  005848  0E01               	movlw	1
 21514  00584A  ECCC  F036         	call	i1_initProtocoll
 21515  00584E  0012               	return	
 21516  005850                     __end_ofi1_pressRETRO:
 21517                           	opt stack 0
 21518                           pclatu	equ	0xFFB
 21519                           pclath	equ	0xFFA
 21520                           tblptru	equ	0xFF8
 21521                           tblptrh	equ	0xFF7
 21522                           tblptrl	equ	0xFF6
 21523                           tablat	equ	0xFF5
 21524                           prodh	equ	0xFF4
 21525                           prodl	equ	0xFF3
 21526                           intcon	equ	0xFF2
 21527                           postinc0	equ	0xFEE
 21528                           fsr0h	equ	0xFEA
 21529                           fsr0l	equ	0xFE9
 21530                           wreg	equ	0xFE8
 21531                           postdec1	equ	0xFE5
 21532                           fsr1h	equ	0xFE2
 21533                           fsr1l	equ	0xFE1
 21534                           bsr	equ	0xFE0
 21535                           indf2	equ	0xFDF
 21536                           postinc2	equ	0xFDE
 21537                           postdec2	equ	0xFDD
 21538                           plusw2	equ	0xFDB
 21539                           fsr2h	equ	0xFDA
 21540                           fsr2l	equ	0xFD9
 21541                           status	equ	0xFD8
 21542                           
 21543 ;; *************** function i1_pressENTER *****************
 21544 ;; Defined at:
 21545 ;;		line 291 in file "source/DisplayProtocol.h"
 21546 ;; Parameters:    Size  Location     Type
 21547 ;;		None
 21548 ;; Auto vars:     Size  Location     Type
 21549 ;;		None
 21550 ;; Return value:  Size  Location     Type
 21551 ;;                  1    wreg      void 
 21552 ;; Registers used:
 21553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21554 ;; Tracked objects:
 21555 ;;		On entry : 0/0
 21556 ;;		On exit  : 0/0
 21557 ;;		Unchanged: 0/0
 21558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21559 ;;      Params:         0       0       0       0       0       0       0
 21560 ;;      Locals:         0       0       0       0       0       0       0
 21561 ;;      Temps:          0       0       0       0       0       0       0
 21562 ;;      Totals:         0       0       0       0       0       0       0
 21563 ;;Total ram usage:        0 bytes
 21564 ;; Hardware stack levels used:    1
 21565 ;; Hardware stack levels required when called:    9
 21566 ;; This function calls:
 21567 ;;		i1___ftmul
 21568 ;;		i1_checkPass
 21569 ;;		i1_confirmEdition
 21570 ;;		i1_desintegrator
 21571 ;;		i1_initProtocoll
 21572 ;;		i1_setPWM2duty
 21573 ;; This function is called by:
 21574 ;;		_UARTint
 21575 ;; This function uses a non-reentrant model
 21576 ;;
 21577                           
 21578                           	psect	text92
 21579  001570                     __ptext92:
 21580                           	opt stack 0
 21581  001570                     i1_pressENTER:
 21582                           	opt stack 9
 21583                           
 21584                           ;DisplayProtocol.h: 292: if (actualScreen == 1) {
 21585                           
 21586                           ;incstack = 0
 21587  001570  0101               	movlb	1	; () banked
 21588  001572  05BD               	decf	_actualScreen& (0+255),w,b
 21589  001574  A4D8               	btfss	status,2,c
 21590  001576  D018               	goto	i1l8554
 21591                           
 21592                           ; BSR set to: 1
 21593                           ;DisplayProtocol.h: 293: passSection++;
 21594  001578  0101               	movlb	1	; () banked
 21595  00157A  2BBB               	incf	_passSection& (0+255),f,b
 21596                           
 21597                           ; BSR set to: 1
 21598                           ;DisplayProtocol.h: 294: if (passSection > 3) {
 21599  00157C  0101               	movlb	1	; () banked
 21600  00157E  51BB               	movf	_passSection& (0+255),w,b
 21601  001580  0A80               	xorlw	128
 21602  001582  0F7C               	addlw	-132
 21603  001584  A0D8               	btfss	status,0,c
 21604  001586  0012               	return	
 21605                           
 21606                           ; BSR set to: 1
 21607                           ;DisplayProtocol.h: 295: passSection = 0;
 21608  001588  0E00               	movlw	0
 21609  00158A  0101               	movlb	1	; () banked
 21610  00158C  6FBB               	movwf	_passSection& (0+255),b
 21611                           
 21612                           ; BSR set to: 1
 21613                           ;DisplayProtocol.h: 296: if (checkPass())
 21614  00158E  ECC9  F031         	call	i1_checkPass	;wreg free
 21615  001592  0900               	iorlw	0
 21616  001594  B4D8               	btfsc	status,2,c
 21617  001596  D004               	goto	i1l8552
 21618                           
 21619                           ;DisplayProtocol.h: 297: actualScreen = 8;
 21620  001598  0E08               	movlw	8
 21621  00159A  0101               	movlb	1	; () banked
 21622  00159C  6FBD               	movwf	_actualScreen& (0+255),b
 21623  00159E  0012               	return	
 21624  0015A0                     i1l8552:
 21625                           
 21626                           ;DisplayProtocol.h: 298: else
 21627                           ;DisplayProtocol.h: 299: actualScreen = 7;
 21628  0015A0  0E07               	movlw	7
 21629  0015A2  0101               	movlb	1	; () banked
 21630  0015A4  6FBD               	movwf	_actualScreen& (0+255),b
 21631                           
 21632                           ; BSR set to: 1
 21633                           ;DisplayProtocol.h: 300: }
 21634                           ;DisplayProtocol.h: 301: }else if(actualScreen == 4) {
 21635                           
 21636                           ; BSR set to: 1
 21637  0015A6  0012               	return	
 21638  0015A8                     i1l8554:
 21639                           
 21640                           ; BSR set to: 1
 21641  0015A8  0E04               	movlw	4
 21642  0015AA  0101               	movlb	1	; () banked
 21643  0015AC  19BD               	xorwf	_actualScreen& (0+255),w,b
 21644  0015AE  B4D8               	btfsc	status,2,c
 21645  0015B0  D038               	goto	i1l8578
 21646  0015B2  D046               	goto	i1l8580
 21647  0015B4                     i1l711:
 21648                           
 21649                           ; BSR set to: 1
 21650                           ;DisplayProtocol.h: 304: tempLastScreen = actualScreen;
 21651  0015B4  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 21652                           
 21653                           ; BSR set to: 1
 21654                           ;DisplayProtocol.h: 305: if(processStarted) {
 21655  0015B8  0100               	movlb	0	; () banked
 21656  0015BA  51C0               	movf	_processStarted& (0+255),w,b
 21657  0015BC  B4D8               	btfsc	status,2,c
 21658  0015BE  D007               	goto	i1l8562
 21659                           
 21660                           ; BSR set to: 0
 21661                           ;DisplayProtocol.h: 306: actualScreen = 3;
 21662  0015C0  0E03               	movlw	3
 21663  0015C2  0101               	movlb	1	; () banked
 21664  0015C4  6FBD               	movwf	_actualScreen& (0+255),b
 21665                           
 21666                           ;DisplayProtocol.h: 307: selSN = 0;
 21667  0015C6  0E00               	movlw	0
 21668  0015C8  0101               	movlb	1	; () banked
 21669  0015CA  6FBA               	movwf	_selSN& (0+255),b
 21670                           
 21671                           ;DisplayProtocol.h: 308: }else {
 21672  0015CC  0012               	return	
 21673  0015CE                     i1l8562:
 21674                           
 21675                           ;DisplayProtocol.h: 309: actualScreen = 2;
 21676  0015CE  0E02               	movlw	2
 21677  0015D0  0101               	movlb	1	; () banked
 21678  0015D2  6FBD               	movwf	_actualScreen& (0+255),b
 21679                           
 21680                           ;DisplayProtocol.h: 310: selSN = 1;
 21681  0015D4  0E01               	movlw	1
 21682  0015D6  0101               	movlb	1	; () banked
 21683  0015D8  6FBA               	movwf	_selSN& (0+255),b
 21684                           
 21685                           ; BSR set to: 1
 21686                           ;DisplayProtocol.h: 311: }
 21687                           ;DisplayProtocol.h: 312: break;
 21688  0015DA  0012               	return	
 21689  0015DC                     i1l715:
 21690                           
 21691                           ; BSR set to: 1
 21692                           ;DisplayProtocol.h: 314: chanValf = kgXcorte;
 21693  0015DC  C198  F1B1         	movff	_kgXcorte,_chanValf
 21694  0015E0  C199  F1B2         	movff	_kgXcorte+1,_chanValf+1
 21695  0015E4  C19A  F1B3         	movff	_kgXcorte+2,_chanValf+2
 21696                           
 21697                           ; BSR set to: 1
 21698                           ;DisplayProtocol.h: 315: desintegrator();
 21699  0015E8  ECB9  F01A         	call	i1_desintegrator	;wreg free
 21700                           
 21701                           ;DisplayProtocol.h: 316: actualScreen = 5;
 21702  0015EC  0E05               	movlw	5
 21703  0015EE  0101               	movlb	1	; () banked
 21704  0015F0  6FBD               	movwf	_actualScreen& (0+255),b
 21705                           
 21706                           ;DisplayProtocol.h: 317: break;
 21707  0015F2  0012               	return	
 21708  0015F4                     i1l716:
 21709                           
 21710                           ; BSR set to: 1
 21711                           ;DisplayProtocol.h: 319: tempLastScreen = actualScreen;
 21712  0015F4  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 21713                           
 21714                           ;DisplayProtocol.h: 320: chanVals = numCortes;
 21715  0015F8  C0D2  F1B6         	movff	_numCortes,_chanVals
 21716  0015FC  C0D3  F1B7         	movff	_numCortes+1,_chanVals+1
 21717                           
 21718                           ; BSR set to: 1
 21719                           ;DisplayProtocol.h: 321: actualScreen = 5;
 21720  001600  0E05               	movlw	5
 21721  001602  0101               	movlb	1	; () banked
 21722  001604  6FBD               	movwf	_actualScreen& (0+255),b
 21723                           
 21724                           ;DisplayProtocol.h: 322: break;
 21725  001606  0012               	return	
 21726  001608                     i1l8570:
 21727                           
 21728                           ; BSR set to: 1
 21729                           ;DisplayProtocol.h: 324: if(!processStarted) {
 21730  001608  0100               	movlb	0	; () banked
 21731  00160A  51C0               	movf	_processStarted& (0+255),w,b
 21732  00160C  A4D8               	btfss	status,2,c
 21733  00160E  0012               	return	
 21734                           
 21735                           ; BSR set to: 0
 21736                           ;DisplayProtocol.h: 325: tempLastScreen = actualScreen;
 21737  001610  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 21738                           
 21739                           ; BSR set to: 0
 21740                           ;DisplayProtocol.h: 326: selSN = 1;
 21741  001614  0E01               	movlw	1
 21742  001616  0101               	movlb	1	; () banked
 21743  001618  6FBA               	movwf	_selSN& (0+255),b
 21744                           
 21745                           ;DisplayProtocol.h: 327: actualScreen = 11;
 21746  00161A  0E0B               	movlw	11
 21747  00161C  0101               	movlb	1	; () banked
 21748  00161E  6FBD               	movwf	_actualScreen& (0+255),b
 21749                           
 21750                           ; BSR set to: 1
 21751                           ;DisplayProtocol.h: 330: }
 21752                           ;DisplayProtocol.h: 331: }
 21753                           
 21754                           ; BSR set to: 1
 21755                           ;DisplayProtocol.h: 328: }
 21756                           ;DisplayProtocol.h: 329: break;
 21757  001620  0012               	return	
 21758  001622                     i1l8578:
 21759                           
 21760                           ; BSR set to: 1
 21761  001622  0101               	movlb	1	; () banked
 21762  001624  51BC               	movf	_menuSection& (0+255),w,b
 21763                           
 21764                           ; Switch size 1, requested type "space"
 21765                           ; Number of cases is 4, Range of values is 0 to 3
 21766                           ; switch strategies available:
 21767                           ; Name         Instructions Cycles
 21768                           ; simple_byte           13     7 (average)
 21769                           ;	Chosen strategy is simple_byte
 21770  001626  0A00               	xorlw	0	; case 0
 21771  001628  B4D8               	btfsc	status,2,c
 21772  00162A  D7C4               	goto	i1l711
 21773  00162C  0A01               	xorlw	1	; case 1
 21774  00162E  B4D8               	btfsc	status,2,c
 21775  001630  D7D5               	goto	i1l715
 21776  001632  0A03               	xorlw	3	; case 2
 21777  001634  B4D8               	btfsc	status,2,c
 21778  001636  D7DE               	goto	i1l716
 21779  001638  0A01               	xorlw	1	; case 3
 21780  00163A  A4D8               	btfss	status,2,c
 21781                           
 21782                           ; BSR set to: 1
 21783                           ;DisplayProtocol.h: 332: }else if(actualScreen == 7)
 21784  00163C  0012               	return	
 21785  00163E  D7E4               	goto	i1l8570
 21786  001640                     i1l8580:
 21787                           
 21788                           ; BSR set to: 1
 21789  001640  0E07               	movlw	7
 21790  001642  0101               	movlb	1	; () banked
 21791  001644  19BD               	xorwf	_actualScreen& (0+255),w,b
 21792  001646  A4D8               	btfss	status,2,c
 21793  001648  D004               	goto	i1l8584
 21794                           
 21795                           ; BSR set to: 1
 21796                           ;DisplayProtocol.h: 333: actualScreen = 1;
 21797  00164A  0E01               	movlw	1
 21798  00164C  0101               	movlb	1	; () banked
 21799  00164E  6FBD               	movwf	_actualScreen& (0+255),b
 21800  001650  0012               	return	
 21801  001652                     i1l8584:
 21802                           
 21803                           ; BSR set to: 1
 21804                           ;DisplayProtocol.h: 334: else if(actualScreen == 6) {
 21805  001652  0E06               	movlw	6
 21806  001654  0101               	movlb	1	; () banked
 21807  001656  19BD               	xorwf	_actualScreen& (0+255),w,b
 21808  001658  B4D8               	btfsc	status,2,c
 21809  00165A  0012               	return	
 21810                           
 21811                           ; BSR set to: 1
 21812                           
 21813                           ; BSR set to: 1
 21814                           
 21815                           ; BSR set to: 1
 21816                           ;DisplayProtocol.h: 336: }else if(actualScreen == 5) {
 21817  00165C  0E05               	movlw	5
 21818  00165E  0101               	movlb	1	; () banked
 21819  001660  19BD               	xorwf	_actualScreen& (0+255),w,b
 21820  001662  A4D8               	btfss	status,2,c
 21821  001664  D018               	goto	i1l8600
 21822                           
 21823                           ; BSR set to: 1
 21824                           ;DisplayProtocol.h: 337: if(menuSection != 2) {
 21825  001666  0E02               	movlw	2
 21826  001668  0101               	movlb	1	; () banked
 21827  00166A  19BC               	xorwf	_menuSection& (0+255),w,b
 21828  00166C  B4D8               	btfsc	status,2,c
 21829  00166E  D009               	goto	i1l8598
 21830                           
 21831                           ; BSR set to: 1
 21832                           ;DisplayProtocol.h: 338: chanValSection--;
 21833  001670  0101               	movlb	1	; () banked
 21834  001672  079C               	decf	_chanValSection& (0+255),f,b
 21835                           
 21836                           ; BSR set to: 1
 21837                           ;DisplayProtocol.h: 339: if(chanValSection < 0)
 21838  001674  0101               	movlb	1	; () banked
 21839  001676  AF9C               	btfss	_chanValSection& (0+255),7,b
 21840  001678  0012               	return	
 21841                           
 21842                           ; BSR set to: 1
 21843                           ;DisplayProtocol.h: 340: chanValSection = 5;
 21844  00167A  0E05               	movlw	5
 21845  00167C  0101               	movlb	1	; () banked
 21846  00167E  6F9C               	movwf	_chanValSection& (0+255),b
 21847                           
 21848                           ; BSR set to: 1
 21849                           ;DisplayProtocol.h: 341: }else
 21850  001680  0012               	return	
 21851  001682                     i1l8598:
 21852                           
 21853                           ; BSR set to: 1
 21854                           ;DisplayProtocol.h: 342: confirmEdition(!processStarted);
 21855  001682  0100               	movlb	0	; () banked
 21856  001684  51C0               	movf	_processStarted& (0+255),w,b
 21857  001686  A4D8               	btfss	status,2,c
 21858  001688  D002               	goto	i1u1220_20
 21859  00168A  0E01               	movlw	1
 21860  00168C  D001               	goto	i1u1221_20
 21861  00168E                     i1u1220_20:
 21862  00168E  0E00               	movlw	0
 21863  001690                     i1u1221_20:
 21864  001690  EC43  F02D         	call	i1_confirmEdition
 21865                           
 21866                           ;DisplayProtocol.h: 343: }else if(actualScreen == 2) {
 21867  001694  0012               	return	
 21868  001696                     i1l8600:
 21869  001696  0E02               	movlw	2
 21870  001698  0101               	movlb	1	; () banked
 21871  00169A  19BD               	xorwf	_actualScreen& (0+255),w,b
 21872  00169C  A4D8               	btfss	status,2,c
 21873  00169E  D018               	goto	i1l8610
 21874                           
 21875                           ; BSR set to: 1
 21876                           ;DisplayProtocol.h: 344: initProtocoll(!selSN);
 21877  0016A0  0101               	movlb	1	; () banked
 21878  0016A2  51BA               	movf	_selSN& (0+255),w,b
 21879  0016A4  A4D8               	btfss	status,2,c
 21880  0016A6  D002               	goto	i1u1223_20
 21881  0016A8  0E01               	movlw	1
 21882  0016AA  D001               	goto	i1u1224_20
 21883  0016AC                     i1u1223_20:
 21884  0016AC  0E00               	movlw	0
 21885  0016AE                     i1u1224_20:
 21886  0016AE  ECCC  F036         	call	i1_initProtocoll
 21887                           
 21888                           ;DisplayProtocol.h: 345: if(!selSN) {
 21889  0016B2  0101               	movlb	1	; () banked
 21890  0016B4  51BA               	movf	_selSN& (0+255),w,b
 21891  0016B6  A4D8               	btfss	status,2,c
 21892  0016B8  D008               	goto	i1l730
 21893                           
 21894                           ; BSR set to: 1
 21895                           ;DisplayProtocol.h: 346: actualScreen = 14;
 21896  0016BA  0E0E               	movlw	14
 21897  0016BC  0101               	movlb	1	; () banked
 21898  0016BE  6FBD               	movwf	_actualScreen& (0+255),b
 21899                           
 21900                           ; BSR set to: 1
 21901                           ;DisplayProtocol.h: 347: LATCbits.LATC4 = 1;
 21902  0016C0  888B               	bsf	3979,4,c	;volatile
 21903                           
 21904                           ;DisplayProtocol.h: 348: ready2Cut = 1;
 21905  0016C2  0E01               	movlw	1
 21906  0016C4  0100               	movlb	0	; () banked
 21907  0016C6  6FBF               	movwf	_ready2Cut& (0+255),b
 21908                           
 21909                           ;DisplayProtocol.h: 350: }else
 21910  0016C8  0012               	return	
 21911  0016CA                     i1l730:
 21912                           
 21913                           ; BSR set to: 1
 21914                           ;DisplayProtocol.h: 351: actualScreen = tempLastScreen;
 21915  0016CA  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 21916                           
 21917                           ; BSR set to: 1
 21918                           ;DisplayProtocol.h: 352: }else if(actualScreen == 14) {
 21919  0016CE  0012               	return	
 21920  0016D0                     i1l8610:
 21921                           
 21922                           ; BSR set to: 1
 21923  0016D0  0E0E               	movlw	14
 21924  0016D2  0101               	movlb	1	; () banked
 21925  0016D4  19BD               	xorwf	_actualScreen& (0+255),w,b
 21926  0016D6  A4D8               	btfss	status,2,c
 21927  0016D8  D00A               	goto	i1l8616
 21928                           
 21929                           ; BSR set to: 1
 21930                           ;DisplayProtocol.h: 354: setPWM2duty(400);
 21931  0016DA  0E01               	movlw	1
 21932  0016DC  0100               	movlb	0	; () banked
 21933  0016DE  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 21934  0016E0  0E90               	movlw	144
 21935  0016E2  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 21936  0016E4  ECCE  F02F         	call	i1_setPWM2duty	;wreg free
 21937                           
 21938                           ;DisplayProtocol.h: 355: actualScreen = tempLastScreen;
 21939  0016E8  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 21940                           
 21941                           ;DisplayProtocol.h: 356: }else if(actualScreen == 3) {
 21942  0016EC  0012               	return	
 21943  0016EE                     i1l8616:
 21944  0016EE  0E03               	movlw	3
 21945  0016F0  0101               	movlb	1	; () banked
 21946  0016F2  19BD               	xorwf	_actualScreen& (0+255),w,b
 21947  0016F4  A4D8               	btfss	status,2,c
 21948  0016F6  D046               	goto	i1l8638
 21949                           
 21950                           ; BSR set to: 1
 21951                           ;DisplayProtocol.h: 357: actualScreen = tempLastScreen;
 21952  0016F8  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 21953                           
 21954                           ; BSR set to: 1
 21955                           ;DisplayProtocol.h: 358: if(!selSN) {
 21956  0016FC  0101               	movlb	1	; () banked
 21957  0016FE  51BA               	movf	_selSN& (0+255),w,b
 21958  001700  A4D8               	btfss	status,2,c
 21959  001702  0012               	return	
 21960                           
 21961                           ; BSR set to: 1
 21962                           ;DisplayProtocol.h: 359: processStarted = 0;
 21963  001704  0E00               	movlw	0
 21964  001706  0100               	movlb	0	; () banked
 21965  001708  6FC0               	movwf	_processStarted& (0+255),b
 21966                           
 21967                           ;DisplayProtocol.h: 360: processState = 0;
 21968  00170A  0E00               	movlw	0
 21969  00170C  0100               	movlb	0	; () banked
 21970  00170E  6FB3               	movwf	(_processState+1)& (0+255),b
 21971  001710  0E00               	movlw	0
 21972  001712  6FB2               	movwf	_processState& (0+255),b
 21973                           
 21974                           ; BSR set to: 0
 21975                           ;DisplayProtocol.h: 361: LATCbits.LATC4 = 0;
 21976  001714  988B               	bcf	3979,4,c	;volatile
 21977                           
 21978                           ; BSR set to: 0
 21979                           ;DisplayProtocol.h: 362: if(tempLastScreen == 14)
 21980  001716  0E0E               	movlw	14
 21981  001718  0100               	movlb	0	; () banked
 21982  00171A  19BC               	xorwf	_tempLastScreen& (0+255),w,b
 21983  00171C  A4D8               	btfss	status,2,c
 21984  00171E  D003               	goto	i1l737
 21985                           
 21986                           ; BSR set to: 0
 21987                           ;DisplayProtocol.h: 363: actualScreen = 0;
 21988  001720  0E00               	movlw	0
 21989  001722  0101               	movlb	1	; () banked
 21990  001724  6FBD               	movwf	_actualScreen& (0+255),b
 21991  001726                     i1l737:
 21992                           
 21993                           ;DisplayProtocol.h: 364: if(calibMode) {
 21994  001726  0100               	movlb	0	; () banked
 21995  001728  51BE               	movf	_calibMode& (0+255),w,b
 21996  00172A  B4D8               	btfsc	status,2,c
 21997  00172C  D027               	goto	i1l738
 21998                           
 21999                           ; BSR set to: 0
 22000                           ;DisplayProtocol.h: 365: numCortes = tempNumCortes;
 22001  00172E  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 22002  001732  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 22003                           
 22004                           ;DisplayProtocol.h: 366: tiXcorte = temptiXcorte;
 22005  001736  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 22006  00173A  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 22007  00173E  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 22008                           
 22009                           ; BSR set to: 0
 22010                           ;DisplayProtocol.h: 367: timsXcorte = (float)tiXcorte * 1000;
 22011  001742  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 22012  001746  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 22013  00174A  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 22014  00174E  0E00               	movlw	0
 22015  001750  0100               	movlb	0	; () banked
 22016  001752  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 22017  001754  0E7A               	movlw	122
 22018  001756  0100               	movlb	0	; () banked
 22019  001758  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 22020  00175A  0E44               	movlw	68
 22021  00175C  0100               	movlb	0	; () banked
 22022  00175E  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 22023  001760  ECCE  F01D         	call	i1___ftmul	;wreg free
 22024  001764  C068  F053         	movff	?i1___ftmul,_timsXcorte
 22025  001768  C069  F054         	movff	?i1___ftmul+1,_timsXcorte+1
 22026  00176C  C06A  F055         	movff	?i1___ftmul+2,_timsXcorte+2
 22027                           
 22028                           ;DisplayProtocol.h: 368: calibMode = 0;
 22029  001770  0E00               	movlw	0
 22030  001772  0100               	movlb	0	; () banked
 22031  001774  6FBE               	movwf	_calibMode& (0+255),b
 22032                           
 22033                           ; BSR set to: 0
 22034                           ;DisplayProtocol.h: 369: actualScreen = 4;
 22035  001776  0E04               	movlw	4
 22036  001778  0101               	movlb	1	; () banked
 22037  00177A  6FBD               	movwf	_actualScreen& (0+255),b
 22038  00177C                     i1l738:
 22039                           
 22040                           ;DisplayProtocol.h: 370: }
 22041                           ;DisplayProtocol.h: 371: initProtocoll(1);
 22042  00177C  0E01               	movlw	1
 22043  00177E  ECCC  F036         	call	i1_initProtocoll
 22044                           
 22045                           ;DisplayProtocol.h: 372: }
 22046                           ;DisplayProtocol.h: 373: }else if(actualScreen == 10) {
 22047  001782  0012               	return	
 22048  001784                     i1l8638:
 22049  001784  0E0A               	movlw	10
 22050  001786  0101               	movlb	1	; () banked
 22051  001788  19BD               	xorwf	_actualScreen& (0+255),w,b
 22052  00178A  A4D8               	btfss	status,2,c
 22053  00178C  D00B               	goto	i1l8644
 22054                           
 22055                           ; BSR set to: 1
 22056                           ;DisplayProtocol.h: 374: if(!selSN)
 22057  00178E  0101               	movlb	1	; () banked
 22058  001790  51BA               	movf	_selSN& (0+255),w,b
 22059  001792  A4D8               	btfss	status,2,c
 22060  001794  D004               	goto	i1l741
 22061                           
 22062                           ; BSR set to: 1
 22063                           ;DisplayProtocol.h: 375: confirmEdition(1);
 22064  001796  0E01               	movlw	1
 22065  001798  EC43  F02D         	call	i1_confirmEdition
 22066  00179C  0012               	return	
 22067  00179E                     i1l741:
 22068                           
 22069                           ; BSR set to: 1
 22070                           ;DisplayProtocol.h: 376: else
 22071                           ;DisplayProtocol.h: 377: actualScreen = tempLastScreen;
 22072  00179E  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 22073                           
 22074                           ; BSR set to: 1
 22075                           ;DisplayProtocol.h: 378: }else if(actualScreen == 8)
 22076  0017A2  0012               	return	
 22077  0017A4                     i1l8644:
 22078                           
 22079                           ; BSR set to: 1
 22080  0017A4  0E08               	movlw	8
 22081  0017A6  0101               	movlb	1	; () banked
 22082  0017A8  19BD               	xorwf	_actualScreen& (0+255),w,b
 22083  0017AA  A4D8               	btfss	status,2,c
 22084  0017AC  D004               	goto	i1l8648
 22085                           
 22086                           ; BSR set to: 1
 22087                           ;DisplayProtocol.h: 379: actualScreen = 4;
 22088  0017AE  0E04               	movlw	4
 22089  0017B0  0101               	movlb	1	; () banked
 22090  0017B2  6FBD               	movwf	_actualScreen& (0+255),b
 22091  0017B4  0012               	return	
 22092  0017B6                     i1l8648:
 22093                           
 22094                           ; BSR set to: 1
 22095                           ;DisplayProtocol.h: 380: else if(actualScreen == 9)
 22096  0017B6  0E09               	movlw	9
 22097  0017B8  0101               	movlb	1	; () banked
 22098  0017BA  19BD               	xorwf	_actualScreen& (0+255),w,b
 22099  0017BC  A4D8               	btfss	status,2,c
 22100  0017BE  D004               	goto	i1l8652
 22101                           
 22102                           ; BSR set to: 1
 22103                           ;DisplayProtocol.h: 381: actualScreen = 0;
 22104  0017C0  0E00               	movlw	0
 22105  0017C2  0101               	movlb	1	; () banked
 22106  0017C4  6FBD               	movwf	_actualScreen& (0+255),b
 22107  0017C6  0012               	return	
 22108  0017C8                     i1l8652:
 22109                           
 22110                           ; BSR set to: 1
 22111                           ;DisplayProtocol.h: 382: else if(actualScreen == 11) {
 22112  0017C8  0E0B               	movlw	11
 22113  0017CA  0101               	movlb	1	; () banked
 22114  0017CC  19BD               	xorwf	_actualScreen& (0+255),w,b
 22115  0017CE  A4D8               	btfss	status,2,c
 22116  0017D0  D05D               	goto	i1l8692
 22117                           
 22118                           ; BSR set to: 1
 22119                           ;DisplayProtocol.h: 383: initProtocoll(!selSN);
 22120  0017D2  0101               	movlb	1	; () banked
 22121  0017D4  51BA               	movf	_selSN& (0+255),w,b
 22122  0017D6  A4D8               	btfss	status,2,c
 22123  0017D8  D002               	goto	i1u1236_20
 22124  0017DA  0E01               	movlw	1
 22125  0017DC  D001               	goto	i1u1237_20
 22126  0017DE                     i1u1236_20:
 22127  0017DE  0E00               	movlw	0
 22128  0017E0                     i1u1237_20:
 22129  0017E0  ECCC  F036         	call	i1_initProtocoll
 22130                           
 22131                           ;DisplayProtocol.h: 384: if(!selSN) {
 22132  0017E4  0101               	movlb	1	; () banked
 22133  0017E6  51BA               	movf	_selSN& (0+255),w,b
 22134  0017E8  A4D8               	btfss	status,2,c
 22135  0017EA  D04C               	goto	i1l8690
 22136                           
 22137                           ; BSR set to: 1
 22138                           ;DisplayProtocol.h: 385: actualScreen = 6;
 22139  0017EC  0E06               	movlw	6
 22140  0017EE  0101               	movlb	1	; () banked
 22141  0017F0  6FBD               	movwf	_actualScreen& (0+255),b
 22142                           
 22143                           ; BSR set to: 1
 22144                           ;DisplayProtocol.h: 386: tempLastScreen = actualScreen;
 22145  0017F2  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 22146                           
 22147                           ;DisplayProtocol.h: 387: chanValf = 0;
 22148  0017F6  0E00               	movlw	0
 22149  0017F8  0101               	movlb	1	; () banked
 22150  0017FA  6FB1               	movwf	_chanValf& (0+255),b
 22151  0017FC  0E00               	movlw	0
 22152  0017FE  0101               	movlb	1	; () banked
 22153  001800  6FB2               	movwf	(_chanValf+1)& (0+255),b
 22154  001802  0E00               	movlw	0
 22155  001804  0101               	movlb	1	; () banked
 22156  001806  6FB3               	movwf	(_chanValf+2)& (0+255),b
 22157                           
 22158                           ; BSR set to: 1
 22159                           ;DisplayProtocol.h: 388: desintegrator();
 22160  001808  ECB9  F01A         	call	i1_desintegrator	;wreg free
 22161                           
 22162                           ;DisplayProtocol.h: 389: temptiXcorte = tiXcorte;
 22163  00180C  C195  F0CD         	movff	_tiXcorte,_temptiXcorte
 22164  001810  C196  F0CE         	movff	_tiXcorte+1,_temptiXcorte+1
 22165  001814  C197  F0CF         	movff	_tiXcorte+2,_temptiXcorte+2
 22166                           
 22167                           ;DisplayProtocol.h: 390: tiXcorte = 5.0f;
 22168  001818  0E00               	movlw	0
 22169  00181A  0101               	movlb	1	; () banked
 22170  00181C  6F95               	movwf	_tiXcorte& (0+255),b
 22171  00181E  0EA0               	movlw	160
 22172  001820  0101               	movlb	1	; () banked
 22173  001822  6F96               	movwf	(_tiXcorte+1)& (0+255),b
 22174  001824  0E40               	movlw	64
 22175  001826  0101               	movlb	1	; () banked
 22176  001828  6F97               	movwf	(_tiXcorte+2)& (0+255),b
 22177                           
 22178                           ; BSR set to: 1
 22179                           ;DisplayProtocol.h: 391: timsXcorte = 5000.0f;
 22180  00182A  0E40               	movlw	64
 22181  00182C  6E53               	movwf	_timsXcorte,c
 22182  00182E  0E9C               	movlw	156
 22183  001830  6E54               	movwf	_timsXcorte+1,c
 22184  001832  0E45               	movlw	69
 22185  001834  6E55               	movwf	_timsXcorte+2,c
 22186                           
 22187                           ; BSR set to: 1
 22188                           ;DisplayProtocol.h: 392: tempNumCortes = numCortes;
 22189  001836  C0D2  F0D0         	movff	_numCortes,_tempNumCortes
 22190  00183A  C0D3  F0D1         	movff	_numCortes+1,_tempNumCortes+1
 22191                           
 22192                           ; BSR set to: 1
 22193                           ;DisplayProtocol.h: 393: numCortes = 1;
 22194  00183E  0E00               	movlw	0
 22195  001840  0100               	movlb	0	; () banked
 22196  001842  6FD3               	movwf	(_numCortes+1)& (0+255),b
 22197  001844  0E01               	movlw	1
 22198  001846  6FD2               	movwf	_numCortes& (0+255),b
 22199                           
 22200                           ; BSR set to: 0
 22201                           ;DisplayProtocol.h: 394: processState = 0;
 22202  001848  0E00               	movlw	0
 22203  00184A  0100               	movlb	0	; () banked
 22204  00184C  6FB3               	movwf	(_processState+1)& (0+255),b
 22205  00184E  0E00               	movlw	0
 22206  001850  6FB2               	movwf	_processState& (0+255),b
 22207                           
 22208                           ; BSR set to: 0
 22209                           ;DisplayProtocol.h: 395: processTimer = 0;
 22210  001852  0E00               	movlw	0
 22211  001854  6E3B               	movwf	_processTimer,c
 22212  001856  0E00               	movlw	0
 22213  001858  6E3C               	movwf	_processTimer+1,c
 22214  00185A  0E00               	movlw	0
 22215  00185C  6E3D               	movwf	_processTimer+2,c
 22216  00185E  0E00               	movlw	0
 22217  001860  6E3E               	movwf	_processTimer+3,c
 22218                           
 22219                           ; BSR set to: 0
 22220                           ;DisplayProtocol.h: 396: calibLevel = 0;
 22221  001862  0E00               	movlw	0
 22222  001864  0101               	movlb	1	; () banked
 22223  001866  6FB8               	movwf	_calibLevel& (0+255),b
 22224                           
 22225                           ; BSR set to: 1
 22226                           ;DisplayProtocol.h: 397: initProtocoll(1);
 22227  001868  0E01               	movlw	1
 22228  00186A  ECCC  F036         	call	i1_initProtocoll
 22229                           
 22230                           ;DisplayProtocol.h: 398: LATCbits.LATC4 = 1;
 22231  00186E  888B               	bsf	3979,4,c	;volatile
 22232                           
 22233                           ;DisplayProtocol.h: 399: ready2Cut = 1;
 22234  001870  0E01               	movlw	1
 22235  001872  0100               	movlb	0	; () banked
 22236  001874  6FBF               	movwf	_ready2Cut& (0+255),b
 22237                           
 22238                           ; BSR set to: 0
 22239                           ;DisplayProtocol.h: 400: actualScreen = 14;
 22240  001876  0E0E               	movlw	14
 22241  001878  0101               	movlb	1	; () banked
 22242  00187A  6FBD               	movwf	_actualScreen& (0+255),b
 22243                           
 22244                           ; BSR set to: 1
 22245                           ;DisplayProtocol.h: 401: calibMode = 1;
 22246  00187C  0E01               	movlw	1
 22247  00187E  0100               	movlb	0	; () banked
 22248  001880  6FBE               	movwf	_calibMode& (0+255),b
 22249                           
 22250                           ;DisplayProtocol.h: 402: }else
 22251  001882  0012               	return	
 22252  001884                     i1l8690:
 22253                           
 22254                           ;DisplayProtocol.h: 403: actualScreen = 4;
 22255  001884  0E04               	movlw	4
 22256  001886  0101               	movlb	1	; () banked
 22257  001888  6FBD               	movwf	_actualScreen& (0+255),b
 22258                           
 22259                           ; BSR set to: 1
 22260                           ;DisplayProtocol.h: 404: }else if(actualScreen == 12) {
 22261  00188A  0012               	return	
 22262  00188C                     i1l8692:
 22263                           
 22264                           ; BSR set to: 1
 22265  00188C  0E0C               	movlw	12
 22266  00188E  0101               	movlb	1	; () banked
 22267  001890  19BD               	xorwf	_actualScreen& (0+255),w,b
 22268  001892  A4D8               	btfss	status,2,c
 22269  001894  D009               	goto	i1l8700
 22270                           
 22271                           ; BSR set to: 1
 22272                           ;DisplayProtocol.h: 405: chanValSection--;
 22273  001896  0101               	movlb	1	; () banked
 22274  001898  079C               	decf	_chanValSection& (0+255),f,b
 22275                           
 22276                           ; BSR set to: 1
 22277                           ;DisplayProtocol.h: 406: if(chanValSection < 0)
 22278  00189A  0101               	movlb	1	; () banked
 22279  00189C  AF9C               	btfss	_chanValSection& (0+255),7,b
 22280  00189E  0012               	return	
 22281                           
 22282                           ; BSR set to: 1
 22283                           ;DisplayProtocol.h: 407: chanValSection = 5;
 22284  0018A0  0E05               	movlw	5
 22285  0018A2  0101               	movlb	1	; () banked
 22286  0018A4  6F9C               	movwf	_chanValSection& (0+255),b
 22287                           
 22288                           ; BSR set to: 1
 22289                           ;DisplayProtocol.h: 408: }else if(actualScreen == 15) {
 22290  0018A6  0012               	return	
 22291  0018A8                     i1l8700:
 22292                           
 22293                           ; BSR set to: 1
 22294  0018A8  0E0F               	movlw	15
 22295  0018AA  0101               	movlb	1	; () banked
 22296  0018AC  19BD               	xorwf	_actualScreen& (0+255),w,b
 22297  0018AE  A4D8               	btfss	status,2,c
 22298  0018B0  D03B               	goto	i1l8720
 22299                           
 22300                           ; BSR set to: 1
 22301                           ;DisplayProtocol.h: 409: if(!selSN) {
 22302  0018B2  0101               	movlb	1	; () banked
 22303  0018B4  51BA               	movf	_selSN& (0+255),w,b
 22304  0018B6  A4D8               	btfss	status,2,c
 22305  0018B8  D031               	goto	i1l756
 22306                           
 22307                           ; BSR set to: 1
 22308                           ;DisplayProtocol.h: 410: processStarted = 0;
 22309  0018BA  0E00               	movlw	0
 22310  0018BC  0100               	movlb	0	; () banked
 22311  0018BE  6FC0               	movwf	_processStarted& (0+255),b
 22312                           
 22313                           ;DisplayProtocol.h: 411: processState = 0;
 22314  0018C0  0E00               	movlw	0
 22315  0018C2  0100               	movlb	0	; () banked
 22316  0018C4  6FB3               	movwf	(_processState+1)& (0+255),b
 22317  0018C6  0E00               	movlw	0
 22318  0018C8  6FB2               	movwf	_processState& (0+255),b
 22319                           
 22320                           ; BSR set to: 0
 22321                           ;DisplayProtocol.h: 412: LATCbits.LATC4 = 0;
 22322  0018CA  988B               	bcf	3979,4,c	;volatile
 22323                           
 22324                           ; BSR set to: 0
 22325                           ;DisplayProtocol.h: 413: numCortes = tempNumCortes;
 22326  0018CC  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 22327  0018D0  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 22328                           
 22329                           ; BSR set to: 0
 22330                           ;DisplayProtocol.h: 414: tiXcorte = temptiXcorte;
 22331  0018D4  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 22332  0018D8  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 22333  0018DC  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 22334                           
 22335                           ; BSR set to: 0
 22336                           ;DisplayProtocol.h: 415: timsXcorte = (float)tiXcorte * 1000;
 22337  0018E0  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 22338  0018E4  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 22339  0018E8  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 22340  0018EC  0E00               	movlw	0
 22341  0018EE  0100               	movlb	0	; () banked
 22342  0018F0  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 22343  0018F2  0E7A               	movlw	122
 22344  0018F4  0100               	movlb	0	; () banked
 22345  0018F6  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 22346  0018F8  0E44               	movlw	68
 22347  0018FA  0100               	movlb	0	; () banked
 22348  0018FC  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 22349  0018FE  ECCE  F01D         	call	i1___ftmul	;wreg free
 22350  001902  C068  F053         	movff	?i1___ftmul,_timsXcorte
 22351  001906  C069  F054         	movff	?i1___ftmul+1,_timsXcorte+1
 22352  00190A  C06A  F055         	movff	?i1___ftmul+2,_timsXcorte+2
 22353                           
 22354                           ;DisplayProtocol.h: 416: calibMode = 0;
 22355  00190E  0E00               	movlw	0
 22356  001910  0100               	movlb	0	; () banked
 22357  001912  6FBE               	movwf	_calibMode& (0+255),b
 22358                           
 22359                           ; BSR set to: 0
 22360                           ;DisplayProtocol.h: 417: actualScreen = 4;
 22361  001914  0E04               	movlw	4
 22362  001916  0101               	movlb	1	; () banked
 22363  001918  6FBD               	movwf	_actualScreen& (0+255),b
 22364                           
 22365                           ;DisplayProtocol.h: 418: }else {
 22366  00191A  0012               	return	
 22367  00191C                     i1l756:
 22368                           
 22369                           ; BSR set to: 1
 22370                           ;DisplayProtocol.h: 419: actualScreen = tempLastScreen;
 22371  00191C  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 22372                           
 22373                           ; BSR set to: 1
 22374                           ;DisplayProtocol.h: 420: tempLastScreen = 6;
 22375  001920  0E06               	movlw	6
 22376  001922  0100               	movlb	0	; () banked
 22377  001924  6FBC               	movwf	_tempLastScreen& (0+255),b
 22378                           
 22379                           ; BSR set to: 0
 22380                           ;DisplayProtocol.h: 421: }
 22381                           ;DisplayProtocol.h: 422: }else if(actualScreen == 13) {
 22382  001926  0012               	return	
 22383  001928                     i1l8720:
 22384  001928  0E0D               	movlw	13
 22385  00192A  0101               	movlb	1	; () banked
 22386  00192C  19BD               	xorwf	_actualScreen& (0+255),w,b
 22387  00192E  A4D8               	btfss	status,2,c
 22388  001930  0012               	return	
 22389                           
 22390                           ; BSR set to: 1
 22391                           ;DisplayProtocol.h: 423: initProtocoll(1);
 22392  001932  0E01               	movlw	1
 22393  001934  ECCC  F036         	call	i1_initProtocoll
 22394                           
 22395                           ;DisplayProtocol.h: 424: actualScreen = tempLastScreen;
 22396  001938  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 22397  00193C  0012               	return	
 22398  00193E                     __end_ofi1_pressENTER:
 22399                           	opt stack 0
 22400                           pclatu	equ	0xFFB
 22401                           pclath	equ	0xFFA
 22402                           tblptru	equ	0xFF8
 22403                           tblptrh	equ	0xFF7
 22404                           tblptrl	equ	0xFF6
 22405                           tablat	equ	0xFF5
 22406                           prodh	equ	0xFF4
 22407                           prodl	equ	0xFF3
 22408                           intcon	equ	0xFF2
 22409                           postinc0	equ	0xFEE
 22410                           fsr0h	equ	0xFEA
 22411                           fsr0l	equ	0xFE9
 22412                           wreg	equ	0xFE8
 22413                           postdec1	equ	0xFE5
 22414                           fsr1h	equ	0xFE2
 22415                           fsr1l	equ	0xFE1
 22416                           bsr	equ	0xFE0
 22417                           indf2	equ	0xFDF
 22418                           postinc2	equ	0xFDE
 22419                           postdec2	equ	0xFDD
 22420                           plusw2	equ	0xFDB
 22421                           fsr2h	equ	0xFDA
 22422                           fsr2l	equ	0xFD9
 22423                           status	equ	0xFD8
 22424                           
 22425 ;; *************** function i1_checkPass *****************
 22426 ;; Defined at:
 22427 ;;		line 14 in file "source/DisplayProtocol.h"
 22428 ;; Parameters:    Size  Location     Type
 22429 ;;		None
 22430 ;; Auto vars:     Size  Location     Type
 22431 ;;  checkPass       2    5[BANK0 ] int 
 22432 ;;  checkPass       1    4[BANK0 ] unsigned char 
 22433 ;; Return value:  Size  Location     Type
 22434 ;;                  1    wreg      unsigned char 
 22435 ;; Registers used:
 22436 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22437 ;; Tracked objects:
 22438 ;;		On entry : 0/0
 22439 ;;		On exit  : 0/0
 22440 ;;		Unchanged: 0/0
 22441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22442 ;;      Params:         0       0       0       0       0       0       0
 22443 ;;      Locals:         0       3       0       0       0       0       0
 22444 ;;      Temps:          0       4       0       0       0       0       0
 22445 ;;      Totals:         0       7       0       0       0       0       0
 22446 ;;Total ram usage:        7 bytes
 22447 ;; Hardware stack levels used:    1
 22448 ;; Hardware stack levels required when called:    4
 22449 ;; This function calls:
 22450 ;;		Nothing
 22451 ;; This function is called by:
 22452 ;;		i1_pressENTER
 22453 ;; This function uses a non-reentrant model
 22454 ;;
 22455                           
 22456                           	psect	text93
 22457  006392                     __ptext93:
 22458                           	opt stack 0
 22459  006392                     i1_checkPass:
 22460                           	opt stack 13
 22461                           
 22462                           ;DisplayProtocol.h: 15: int i;
 22463                           ;DisplayProtocol.h: 16: char passOK = 0;
 22464                           
 22465                           ;incstack = 0
 22466  006392  0E00               	movlw	0
 22467  006394  0100               	movlb	0	; () banked
 22468  006396  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22469                           
 22470                           ;DisplayProtocol.h: 17: for (i = 0; i < 4; i++) {
 22471  006398  0E00               	movlw	0
 22472  00639A  0100               	movlb	0	; () banked
 22473  00639C  6F66               	movwf	(i1checkPass@i+1)& (0+255),b
 22474  00639E  0E00               	movlw	0
 22475  0063A0  6F65               	movwf	i1checkPass@i& (0+255),b
 22476  0063A2                     i1l7352:
 22477                           
 22478                           ; BSR set to: 0
 22479  0063A2  0100               	movlb	0	; () banked
 22480  0063A4  BF66               	btfsc	(i1checkPass@i+1)& (0+255),7,b
 22481  0063A6  D008               	goto	i1l7356
 22482  0063A8  0100               	movlb	0	; () banked
 22483  0063AA  5166               	movf	(i1checkPass@i+1)& (0+255),w,b
 22484  0063AC  E136               	bnz	i1l7366
 22485  0063AE  0E04               	movlw	4
 22486  0063B0  0100               	movlb	0	; () banked
 22487  0063B2  5D65               	subwf	i1checkPass@i& (0+255),w,b
 22488  0063B4  B0D8               	btfsc	status,0,c
 22489  0063B6  D031               	goto	i1l7366
 22490  0063B8                     i1l7356:
 22491                           
 22492                           ; BSR set to: 0
 22493                           ;DisplayProtocol.h: 18: if (introducido[i] == contra[i])
 22494  0063B8  0EAB               	movlw	low _contra
 22495  0063BA  0100               	movlb	0	; () banked
 22496  0063BC  2565               	addwf	i1checkPass@i& (0+255),w,b
 22497  0063BE  6ED9               	movwf	fsr2l,c
 22498  0063C0  0E00               	movlw	high _contra
 22499  0063C2  0100               	movlb	0	; () banked
 22500  0063C4  2166               	addwfc	(i1checkPass@i+1)& (0+255),w,b
 22501  0063C6  6EDA               	movwf	fsr2h,c
 22502  0063C8  50DF               	movf	indf2,w,c
 22503  0063CA  0100               	movlb	0	; () banked
 22504  0063CC  6F60               	movwf	??i1_checkPass& (0+255),b
 22505  0063CE  6B61               	clrf	(??i1_checkPass+1)& (0+255),b
 22506  0063D0  0EAD               	movlw	low _introducido
 22507  0063D2  0100               	movlb	0	; () banked
 22508  0063D4  2565               	addwf	i1checkPass@i& (0+255),w,b
 22509  0063D6  6ED9               	movwf	fsr2l,c
 22510  0063D8  0E01               	movlw	high _introducido
 22511  0063DA  0100               	movlb	0	; () banked
 22512  0063DC  2166               	addwfc	(i1checkPass@i+1)& (0+255),w,b
 22513  0063DE  6EDA               	movwf	fsr2h,c
 22514  0063E0  50DF               	movf	indf2,w,c
 22515  0063E2  0100               	movlb	0	; () banked
 22516  0063E4  6F62               	movwf	(??i1_checkPass+2)& (0+255),b
 22517  0063E6  6B63               	clrf	(??i1_checkPass+3)& (0+255),b
 22518  0063E8  BF62               	btfsc	(??i1_checkPass+2)& (0+255),7,b
 22519  0063EA  0763               	decf	(??i1_checkPass+3)& (0+255),f,b
 22520  0063EC  0100               	movlb	0	; () banked
 22521  0063EE  5160               	movf	??i1_checkPass& (0+255),w,b
 22522  0063F0  0100               	movlb	0	; () banked
 22523  0063F2  1962               	xorwf	(??i1_checkPass+2)& (0+255),w,b
 22524  0063F4  E10A               	bnz	i1l7360
 22525  0063F6  0100               	movlb	0	; () banked
 22526  0063F8  5161               	movf	(??i1_checkPass+1)& (0+255),w,b
 22527  0063FA  0100               	movlb	0	; () banked
 22528  0063FC  1963               	xorwf	(??i1_checkPass+3)& (0+255),w,b
 22529  0063FE  A4D8               	btfss	status,2,c
 22530  006400  D004               	goto	i1l7360
 22531                           
 22532                           ; BSR set to: 0
 22533                           ;DisplayProtocol.h: 19: passOK = 1;
 22534  006402  0E01               	movlw	1
 22535  006404  0100               	movlb	0	; () banked
 22536  006406  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22537  006408  D004               	goto	i1l7362
 22538  00640A                     i1l7360:
 22539                           
 22540                           ; BSR set to: 0
 22541                           ;DisplayProtocol.h: 20: else {
 22542                           ;DisplayProtocol.h: 21: passOK = 0;
 22543  00640A  0E00               	movlw	0
 22544  00640C  0100               	movlb	0	; () banked
 22545  00640E  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22546                           
 22547                           ;DisplayProtocol.h: 22: break;
 22548  006410  D004               	goto	i1l7366
 22549  006412                     i1l7362:
 22550                           
 22551                           ; BSR set to: 0
 22552  006412  0100               	movlb	0	; () banked
 22553  006414  4B65               	infsnz	i1checkPass@i& (0+255),f,b
 22554  006416  2B66               	incf	(i1checkPass@i+1)& (0+255),f,b
 22555  006418  D7C4               	goto	i1l7352
 22556  00641A                     i1l7366:
 22557                           
 22558                           ; BSR set to: 0
 22559                           ;DisplayProtocol.h: 23: }
 22560                           ;DisplayProtocol.h: 24: }
 22561                           ;DisplayProtocol.h: 25: return passOK;
 22562  00641A  0100               	movlb	0	; () banked
 22563  00641C  5164               	movf	i1checkPass@passOK& (0+255),w,b
 22564  00641E  0012               	return	
 22565  006420                     __end_ofi1_checkPass:
 22566                           	opt stack 0
 22567                           pclatu	equ	0xFFB
 22568                           pclath	equ	0xFFA
 22569                           tblptru	equ	0xFF8
 22570                           tblptrh	equ	0xFF7
 22571                           tblptrl	equ	0xFF6
 22572                           tablat	equ	0xFF5
 22573                           prodh	equ	0xFF4
 22574                           prodl	equ	0xFF3
 22575                           intcon	equ	0xFF2
 22576                           postinc0	equ	0xFEE
 22577                           fsr0h	equ	0xFEA
 22578                           fsr0l	equ	0xFE9
 22579                           wreg	equ	0xFE8
 22580                           postdec1	equ	0xFE5
 22581                           fsr1h	equ	0xFE2
 22582                           fsr1l	equ	0xFE1
 22583                           bsr	equ	0xFE0
 22584                           indf2	equ	0xFDF
 22585                           postinc2	equ	0xFDE
 22586                           postdec2	equ	0xFDD
 22587                           plusw2	equ	0xFDB
 22588                           fsr2h	equ	0xFDA
 22589                           fsr2l	equ	0xFD9
 22590                           status	equ	0xFD8
 22591                           
 22592 ;; *************** function i1_pressDOWN *****************
 22593 ;; Defined at:
 22594 ;;		line 181 in file "source/DisplayProtocol.h"
 22595 ;; Parameters:    Size  Location     Type
 22596 ;;		None
 22597 ;; Auto vars:     Size  Location     Type
 22598 ;;		None
 22599 ;; Return value:  Size  Location     Type
 22600 ;;                  1    wreg      void 
 22601 ;; Registers used:
 22602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22603 ;; Tracked objects:
 22604 ;;		On entry : 0/0
 22605 ;;		On exit  : 0/0
 22606 ;;		Unchanged: 0/0
 22607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22608 ;;      Params:         0       0       0       0       0       0       0
 22609 ;;      Locals:         0       0       0       0       0       0       0
 22610 ;;      Temps:          0       1       0       0       0       0       0
 22611 ;;      Totals:         0       1       0       0       0       0       0
 22612 ;;Total ram usage:        1 bytes
 22613 ;; Hardware stack levels used:    1
 22614 ;; Hardware stack levels required when called:    5
 22615 ;; This function calls:
 22616 ;;		i1_chanValDigDOWN
 22617 ;; This function is called by:
 22618 ;;		_UARTint
 22619 ;; This function uses a non-reentrant model
 22620 ;;
 22621                           
 22622                           	psect	text94
 22623  004DF2                     __ptext94:
 22624                           	opt stack 0
 22625  004DF2                     i1_pressDOWN:
 22626                           	opt stack 13
 22627                           
 22628                           ;DisplayProtocol.h: 182: if (actualScreen == 0 || actualScreen == 4) {
 22629                           
 22630                           ; BSR set to: 0
 22631                           ;incstack = 0
 22632  004DF2  0101               	movlb	1	; () banked
 22633  004DF4  51BD               	movf	_actualScreen& (0+255),w,b
 22634  004DF6  B4D8               	btfsc	status,2,c
 22635  004DF8  D005               	goto	i1l8406
 22636                           
 22637                           ; BSR set to: 1
 22638  004DFA  0E04               	movlw	4
 22639  004DFC  0101               	movlb	1	; () banked
 22640  004DFE  19BD               	xorwf	_actualScreen& (0+255),w,b
 22641  004E00  A4D8               	btfss	status,2,c
 22642  004E02  D009               	goto	i1l8412
 22643  004E04                     i1l8406:
 22644                           
 22645                           ; BSR set to: 1
 22646                           ;DisplayProtocol.h: 183: menuSection--;
 22647  004E04  0101               	movlb	1	; () banked
 22648  004E06  07BC               	decf	_menuSection& (0+255),f,b
 22649                           
 22650                           ; BSR set to: 1
 22651                           ;DisplayProtocol.h: 184: if (menuSection < 0)
 22652  004E08  0101               	movlb	1	; () banked
 22653  004E0A  AFBC               	btfss	_menuSection& (0+255),7,b
 22654  004E0C  0012               	return	
 22655                           
 22656                           ; BSR set to: 1
 22657                           ;DisplayProtocol.h: 185: menuSection = 3;
 22658  004E0E  0E03               	movlw	3
 22659  004E10  0101               	movlb	1	; () banked
 22660  004E12  6FBC               	movwf	_menuSection& (0+255),b
 22661                           
 22662                           ; BSR set to: 1
 22663                           ;DisplayProtocol.h: 186: } else if (actualScreen == 1) {
 22664  004E14  0012               	return	
 22665  004E16                     i1l8412:
 22666                           
 22667                           ; BSR set to: 1
 22668  004E16  0101               	movlb	1	; () banked
 22669  004E18  05BD               	decf	_actualScreen& (0+255),w,b
 22670  004E1A  A4D8               	btfss	status,2,c
 22671  004E1C  D022               	goto	i1l8418
 22672                           
 22673                           ; BSR set to: 1
 22674                           ;DisplayProtocol.h: 187: introducido[passSection]--;
 22675  004E1E  0101               	movlb	1	; () banked
 22676  004E20  51BB               	movf	_passSection& (0+255),w,b
 22677  004E22  0D01               	mullw	1
 22678  004E24  0EAD               	movlw	low _introducido
 22679  004E26  24F3               	addwf	prodl,w,c
 22680  004E28  6ED9               	movwf	fsr2l,c
 22681  004E2A  0E01               	movlw	high _introducido
 22682  004E2C  20F4               	addwfc	prodh,w,c
 22683  004E2E  6EDA               	movwf	fsr2h,c
 22684  004E30  06DF               	decf	indf2,f,c
 22685                           
 22686                           ;DisplayProtocol.h: 188: if (introducido[passSection] < 0)
 22687  004E32  0101               	movlb	1	; () banked
 22688  004E34  51BB               	movf	_passSection& (0+255),w,b
 22689  004E36  0D01               	mullw	1
 22690  004E38  0EAD               	movlw	low _introducido
 22691  004E3A  24F3               	addwf	prodl,w,c
 22692  004E3C  6ED9               	movwf	fsr2l,c
 22693  004E3E  0E01               	movlw	high _introducido
 22694  004E40  20F4               	addwfc	prodh,w,c
 22695  004E42  6EDA               	movwf	fsr2h,c
 22696  004E44  0E00               	movlw	0
 22697  004E46  AEDB               	btfss	plusw2,7,c
 22698  004E48  0012               	return	
 22699                           
 22700                           ; BSR set to: 1
 22701                           ;DisplayProtocol.h: 189: introducido[passSection] = 9;
 22702  004E4A  0101               	movlb	1	; () banked
 22703  004E4C  51BB               	movf	_passSection& (0+255),w,b
 22704  004E4E  0D01               	mullw	1
 22705  004E50  0EAD               	movlw	low _introducido
 22706  004E52  24F3               	addwf	prodl,w,c
 22707  004E54  6ED9               	movwf	fsr2l,c
 22708  004E56  0E01               	movlw	high _introducido
 22709  004E58  20F4               	addwfc	prodh,w,c
 22710  004E5A  6EDA               	movwf	fsr2h,c
 22711  004E5C  0E09               	movlw	9
 22712  004E5E  6EDF               	movwf	indf2,c
 22713                           
 22714                           ; BSR set to: 1
 22715                           ;DisplayProtocol.h: 190: } else if (actualScreen == 2 || actualScreen == 3
 22716  004E60  0012               	return	
 22717  004E62                     i1l8418:
 22718                           
 22719                           ; BSR set to: 1
 22720                           ;DisplayProtocol.h: 191: || actualScreen == 10 || actualScreen == 11
 22721                           ;DisplayProtocol.h: 192: || actualScreen == 15) {
 22722  004E62  0E02               	movlw	2
 22723  004E64  0101               	movlb	1	; () banked
 22724  004E66  19BD               	xorwf	_actualScreen& (0+255),w,b
 22725  004E68  B4D8               	btfsc	status,2,c
 22726  004E6A  D014               	goto	i1l8428
 22727                           
 22728                           ; BSR set to: 1
 22729  004E6C  0E03               	movlw	3
 22730  004E6E  0101               	movlb	1	; () banked
 22731  004E70  19BD               	xorwf	_actualScreen& (0+255),w,b
 22732  004E72  B4D8               	btfsc	status,2,c
 22733  004E74  D00F               	goto	i1l8428
 22734                           
 22735                           ; BSR set to: 1
 22736  004E76  0E0A               	movlw	10
 22737  004E78  0101               	movlb	1	; () banked
 22738  004E7A  19BD               	xorwf	_actualScreen& (0+255),w,b
 22739  004E7C  B4D8               	btfsc	status,2,c
 22740  004E7E  D00A               	goto	i1l8428
 22741                           
 22742                           ; BSR set to: 1
 22743  004E80  0E0B               	movlw	11
 22744  004E82  0101               	movlb	1	; () banked
 22745  004E84  19BD               	xorwf	_actualScreen& (0+255),w,b
 22746  004E86  B4D8               	btfsc	status,2,c
 22747  004E88  D005               	goto	i1l8428
 22748                           
 22749                           ; BSR set to: 1
 22750  004E8A  0E0F               	movlw	15
 22751  004E8C  0101               	movlb	1	; () banked
 22752  004E8E  19BD               	xorwf	_actualScreen& (0+255),w,b
 22753  004E90  A4D8               	btfss	status,2,c
 22754  004E92  D011               	goto	i1l8434
 22755  004E94                     i1l8428:
 22756                           
 22757                           ; BSR set to: 1
 22758                           ;DisplayProtocol.h: 193: selSN = !selSN;
 22759  004E94  0101               	movlb	1	; () banked
 22760  004E96  51BA               	movf	_selSN& (0+255),w,b
 22761  004E98  A4D8               	btfss	status,2,c
 22762  004E9A  D002               	goto	i1u1177_20
 22763  004E9C  0E01               	movlw	1
 22764  004E9E  D001               	goto	i1u1178_20
 22765  004EA0                     i1u1177_20:
 22766  004EA0  0E00               	movlw	0
 22767  004EA2                     i1u1178_20:
 22768  004EA2  0101               	movlb	1	; () banked
 22769  004EA4  6FBA               	movwf	_selSN& (0+255),b
 22770                           
 22771                           ; BSR set to: 1
 22772                           ;DisplayProtocol.h: 194: if(selSN > 1)
 22773  004EA6  0E01               	movlw	1
 22774  004EA8  0101               	movlb	1	; () banked
 22775  004EAA  65BA               	cpfsgt	_selSN& (0+255),b
 22776  004EAC  0012               	return	
 22777                           
 22778                           ; BSR set to: 1
 22779                           ;DisplayProtocol.h: 195: selSN = 0;
 22780  004EAE  0E00               	movlw	0
 22781  004EB0  0101               	movlb	1	; () banked
 22782  004EB2  6FBA               	movwf	_selSN& (0+255),b
 22783                           
 22784                           ; BSR set to: 1
 22785                           ;DisplayProtocol.h: 196: }else if(actualScreen == 5) {
 22786  004EB4  0012               	return	
 22787  004EB6                     i1l8434:
 22788                           
 22789                           ; BSR set to: 1
 22790  004EB6  0E05               	movlw	5
 22791  004EB8  0101               	movlb	1	; () banked
 22792  004EBA  19BD               	xorwf	_actualScreen& (0+255),w,b
 22793  004EBC  B4D8               	btfsc	status,2,c
 22794  004EBE  D009               	goto	i1l8444
 22795  004EC0  D014               	goto	i1l8446
 22796  004EC2                     i1l8438:
 22797                           
 22798                           ; BSR set to: 1
 22799                           ;DisplayProtocol.h: 201: chanValDigDOWN();
 22800  004EC2  EC9C  F02A         	call	i1_chanValDigDOWN	;wreg free
 22801                           
 22802                           ;DisplayProtocol.h: 202: break;
 22803  004EC6  0012               	return	
 22804  004EC8                     i1l8440:
 22805                           
 22806                           ;DisplayProtocol.h: 204: chanVals--;
 22807  004EC8  0101               	movlb	1	; () banked
 22808  004ECA  07B6               	decf	_chanVals& (0+255),f,b
 22809  004ECC  A0D8               	btfss	status,0,c
 22810  004ECE  07B7               	decf	(_chanVals+1)& (0+255),f,b
 22811                           
 22812                           ; BSR set to: 1
 22813                           ;DisplayProtocol.h: 206: }
 22814                           ;DisplayProtocol.h: 207: }
 22815                           
 22816                           ;DisplayProtocol.h: 205: break;
 22817  004ED0  0012               	return	
 22818  004ED2                     i1l8444:
 22819                           
 22820                           ; BSR set to: 1
 22821  004ED2  0101               	movlb	1	; () banked
 22822  004ED4  51BC               	movf	_menuSection& (0+255),w,b
 22823                           
 22824                           ; Switch size 1, requested type "space"
 22825                           ; Number of cases is 3, Range of values is 0 to 2
 22826                           ; switch strategies available:
 22827                           ; Name         Instructions Cycles
 22828                           ; simple_byte           10     6 (average)
 22829                           ;	Chosen strategy is simple_byte
 22830  004ED6  0A00               	xorlw	0	; case 0
 22831  004ED8  B4D8               	btfsc	status,2,c
 22832  004EDA  0012               	return	
 22833  004EDC  0A01               	xorlw	1	; case 1
 22834  004EDE  B4D8               	btfsc	status,2,c
 22835  004EE0  D7F0               	goto	i1l8438
 22836  004EE2  0A03               	xorlw	3	; case 2
 22837  004EE4  A4D8               	btfss	status,2,c
 22838                           
 22839                           ; BSR set to: 1
 22840                           ;DisplayProtocol.h: 208: }else if(actualScreen == 12)
 22841  004EE6  0012               	return	
 22842  004EE8  D7EF               	goto	i1l8440
 22843  004EEA                     i1l8446:
 22844                           
 22845                           ; BSR set to: 1
 22846  004EEA  0E0C               	movlw	12
 22847  004EEC  0101               	movlb	1	; () banked
 22848  004EEE  19BD               	xorwf	_actualScreen& (0+255),w,b
 22849  004EF0  A4D8               	btfss	status,2,c
 22850  004EF2  0012               	return	
 22851                           
 22852                           ; BSR set to: 1
 22853                           ;DisplayProtocol.h: 209: chanValDigDOWN();
 22854  004EF4  EC9C  F02A         	call	i1_chanValDigDOWN	;wreg free
 22855  004EF8  0012               	return	
 22856  004EFA                     __end_ofi1_pressDOWN:
 22857                           	opt stack 0
 22858                           pclatu	equ	0xFFB
 22859                           pclath	equ	0xFFA
 22860                           tblptru	equ	0xFF8
 22861                           tblptrh	equ	0xFF7
 22862                           tblptrl	equ	0xFF6
 22863                           tablat	equ	0xFF5
 22864                           prodh	equ	0xFF4
 22865                           prodl	equ	0xFF3
 22866                           intcon	equ	0xFF2
 22867                           postinc0	equ	0xFEE
 22868                           fsr0h	equ	0xFEA
 22869                           fsr0l	equ	0xFE9
 22870                           wreg	equ	0xFE8
 22871                           postdec1	equ	0xFE5
 22872                           fsr1h	equ	0xFE2
 22873                           fsr1l	equ	0xFE1
 22874                           bsr	equ	0xFE0
 22875                           indf2	equ	0xFDF
 22876                           postinc2	equ	0xFDE
 22877                           postdec2	equ	0xFDD
 22878                           plusw2	equ	0xFDB
 22879                           fsr2h	equ	0xFDA
 22880                           fsr2l	equ	0xFD9
 22881                           status	equ	0xFD8
 22882                           
 22883 ;; *************** function i1_chanValDigDOWN *****************
 22884 ;; Defined at:
 22885 ;;		line 37 in file "source/DisplayProtocol.h"
 22886 ;; Parameters:    Size  Location     Type
 22887 ;;		None
 22888 ;; Auto vars:     Size  Location     Type
 22889 ;;		None
 22890 ;; Return value:  Size  Location     Type
 22891 ;;                  1    wreg      void 
 22892 ;; Registers used:
 22893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22894 ;; Tracked objects:
 22895 ;;		On entry : 0/0
 22896 ;;		On exit  : 0/0
 22897 ;;		Unchanged: 0/0
 22898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22899 ;;      Params:         0       0       0       0       0       0       0
 22900 ;;      Locals:         0       0       0       0       0       0       0
 22901 ;;      Temps:          0       5       0       0       0       0       0
 22902 ;;      Totals:         0       5       0       0       0       0       0
 22903 ;;Total ram usage:        5 bytes
 22904 ;; Hardware stack levels used:    1
 22905 ;; Hardware stack levels required when called:    4
 22906 ;; This function calls:
 22907 ;;		Nothing
 22908 ;; This function is called by:
 22909 ;;		i1_pressDOWN
 22910 ;; This function uses a non-reentrant model
 22911 ;;
 22912                           
 22913                           	psect	text95
 22914  005538                     __ptext95:
 22915                           	opt stack 0
 22916  005538                     i1_chanValDigDOWN:
 22917                           	opt stack 13
 22918                           
 22919                           ;DisplayProtocol.h: 38: chanValdig[chanValSection]--;
 22920                           
 22921                           ;incstack = 0
 22922  005538  0101               	movlb	1	; () banked
 22923  00553A  519C               	movf	_chanValSection& (0+255),w,b
 22924  00553C  0D01               	mullw	1
 22925  00553E  0EA3               	movlw	low _chanValdig
 22926  005540  24F3               	addwf	prodl,w,c
 22927  005542  6ED9               	movwf	fsr2l,c
 22928  005544  0E01               	movlw	high _chanValdig
 22929  005546  20F4               	addwfc	prodh,w,c
 22930  005548  6EDA               	movwf	fsr2h,c
 22931  00554A  06DF               	decf	indf2,f,c
 22932                           
 22933                           ;DisplayProtocol.h: 39: if(chanValdig[chanValSection] < 0) {
 22934  00554C  0101               	movlb	1	; () banked
 22935  00554E  519C               	movf	_chanValSection& (0+255),w,b
 22936  005550  0D01               	mullw	1
 22937  005552  0EA3               	movlw	low _chanValdig
 22938  005554  24F3               	addwf	prodl,w,c
 22939  005556  6ED9               	movwf	fsr2l,c
 22940  005558  0E01               	movlw	high _chanValdig
 22941  00555A  20F4               	addwfc	prodh,w,c
 22942  00555C  6EDA               	movwf	fsr2h,c
 22943  00555E  0E00               	movlw	0
 22944  005560  AEDB               	btfss	plusw2,7,c
 22945  005562  0012               	return	
 22946                           
 22947                           ; BSR set to: 1
 22948                           ;DisplayProtocol.h: 40: chanValdig[chanValSection] = 9;
 22949  005564  0101               	movlb	1	; () banked
 22950  005566  519C               	movf	_chanValSection& (0+255),w,b
 22951  005568  0D01               	mullw	1
 22952  00556A  0EA3               	movlw	low _chanValdig
 22953  00556C  24F3               	addwf	prodl,w,c
 22954  00556E  6ED9               	movwf	fsr2l,c
 22955  005570  0E01               	movlw	high _chanValdig
 22956  005572  20F4               	addwfc	prodh,w,c
 22957  005574  6EDA               	movwf	fsr2h,c
 22958  005576  0E09               	movlw	9
 22959  005578  6EDF               	movwf	indf2,c
 22960                           
 22961                           ; BSR set to: 1
 22962                           ;DisplayProtocol.h: 41: if(chanValSection > 1 && chanValdig[chanValSection - 1] > 0)
 22963  00557A  0101               	movlb	1	; () banked
 22964  00557C  519C               	movf	_chanValSection& (0+255),w,b
 22965  00557E  0A80               	xorlw	128
 22966  005580  0F7E               	addlw	-130
 22967  005582  A0D8               	btfss	status,0,c
 22968  005584  0012               	return	
 22969                           
 22970                           ; BSR set to: 1
 22971  005586  0EFF               	movlw	255
 22972  005588  0100               	movlb	0	; () banked
 22973  00558A  6F60               	movwf	??i1_chanValDigDOWN& (0+255),b
 22974  00558C  0EFF               	movlw	255
 22975  00558E  0100               	movlb	0	; () banked
 22976  005590  6F61               	movwf	(??i1_chanValDigDOWN+1)& (0+255),b
 22977  005592  C19C  F062         	movff	_chanValSection,??i1_chanValDigDOWN+2
 22978  005596  0100               	movlb	0	; () banked
 22979  005598  6B63               	clrf	(??i1_chanValDigDOWN+3)& (0+255),b
 22980  00559A  BF62               	btfsc	(??i1_chanValDigDOWN+2)& (0+255),7,b
 22981  00559C  0763               	decf	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22982  00559E  0100               	movlb	0	; () banked
 22983  0055A0  5160               	movf	??i1_chanValDigDOWN& (0+255),w,b
 22984  0055A2  0100               	movlb	0	; () banked
 22985  0055A4  2762               	addwf	(??i1_chanValDigDOWN+2)& (0+255),f,b
 22986  0055A6  0100               	movlb	0	; () banked
 22987  0055A8  5161               	movf	(??i1_chanValDigDOWN+1)& (0+255),w,b
 22988  0055AA  0100               	movlb	0	; () banked
 22989  0055AC  2363               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22990  0055AE  0EA3               	movlw	low _chanValdig
 22991  0055B0  0100               	movlb	0	; () banked
 22992  0055B2  2562               	addwf	(??i1_chanValDigDOWN+2)& (0+255),w,b
 22993  0055B4  6ED9               	movwf	fsr2l,c
 22994  0055B6  0E01               	movlw	high _chanValdig
 22995  0055B8  0100               	movlb	0	; () banked
 22996  0055BA  2163               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),w,b
 22997  0055BC  6EDA               	movwf	fsr2h,c
 22998  0055BE  50DF               	movf	indf2,w,c
 22999  0055C0  0A80               	xorlw	128
 23000  0055C2  0F7F               	addlw	-129
 23001  0055C4  A0D8               	btfss	status,0,c
 23002  0055C6  0012               	return	
 23003                           
 23004                           ; BSR set to: 0
 23005                           ;DisplayProtocol.h: 42: chanValdig[chanValSection - 1]--;
 23006  0055C8  0EFF               	movlw	255
 23007  0055CA  0100               	movlb	0	; () banked
 23008  0055CC  6F60               	movwf	??i1_chanValDigDOWN& (0+255),b
 23009  0055CE  0EFF               	movlw	255
 23010  0055D0  0100               	movlb	0	; () banked
 23011  0055D2  6F61               	movwf	(??i1_chanValDigDOWN+1)& (0+255),b
 23012  0055D4  C19C  F062         	movff	_chanValSection,??i1_chanValDigDOWN+2
 23013  0055D8  0100               	movlb	0	; () banked
 23014  0055DA  6B63               	clrf	(??i1_chanValDigDOWN+3)& (0+255),b
 23015  0055DC  BF62               	btfsc	(??i1_chanValDigDOWN+2)& (0+255),7,b
 23016  0055DE  0763               	decf	(??i1_chanValDigDOWN+3)& (0+255),f,b
 23017  0055E0  0100               	movlb	0	; () banked
 23018  0055E2  5160               	movf	??i1_chanValDigDOWN& (0+255),w,b
 23019  0055E4  0100               	movlb	0	; () banked
 23020  0055E6  2762               	addwf	(??i1_chanValDigDOWN+2)& (0+255),f,b
 23021  0055E8  0100               	movlb	0	; () banked
 23022  0055EA  5161               	movf	(??i1_chanValDigDOWN+1)& (0+255),w,b
 23023  0055EC  0100               	movlb	0	; () banked
 23024  0055EE  2363               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),f,b
 23025  0055F0  0EA3               	movlw	low _chanValdig
 23026  0055F2  0100               	movlb	0	; () banked
 23027  0055F4  2562               	addwf	(??i1_chanValDigDOWN+2)& (0+255),w,b
 23028  0055F6  6ED9               	movwf	fsr2l,c
 23029  0055F8  0E01               	movlw	high _chanValdig
 23030  0055FA  0100               	movlb	0	; () banked
 23031  0055FC  2163               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),w,b
 23032  0055FE  6EDA               	movwf	fsr2h,c
 23033  005600  06DF               	decf	indf2,f,c
 23034                           
 23035                           ; BSR set to: 0
 23036  005602  0012               	return	
 23037  005604                     __end_ofi1_chanValDigDOWN:
 23038                           	opt stack 0
 23039                           pclatu	equ	0xFFB
 23040                           pclath	equ	0xFFA
 23041                           tblptru	equ	0xFF8
 23042                           tblptrh	equ	0xFF7
 23043                           tblptrl	equ	0xFF6
 23044                           tablat	equ	0xFF5
 23045                           prodh	equ	0xFF4
 23046                           prodl	equ	0xFF3
 23047                           intcon	equ	0xFF2
 23048                           postinc0	equ	0xFEE
 23049                           fsr0h	equ	0xFEA
 23050                           fsr0l	equ	0xFE9
 23051                           wreg	equ	0xFE8
 23052                           postdec1	equ	0xFE5
 23053                           fsr1h	equ	0xFE2
 23054                           fsr1l	equ	0xFE1
 23055                           bsr	equ	0xFE0
 23056                           indf2	equ	0xFDF
 23057                           postinc2	equ	0xFDE
 23058                           postdec2	equ	0xFDD
 23059                           plusw2	equ	0xFDB
 23060                           fsr2h	equ	0xFDA
 23061                           fsr2l	equ	0xFD9
 23062                           status	equ	0xFD8
 23063                           
 23064 ;; *************** function i1_longPressUP *****************
 23065 ;; Defined at:
 23066 ;;		line 157 in file "source/DisplayProtocol.h"
 23067 ;; Parameters:    Size  Location     Type
 23068 ;;		None
 23069 ;; Auto vars:     Size  Location     Type
 23070 ;;		None
 23071 ;; Return value:  Size  Location     Type
 23072 ;;                  1    wreg      void 
 23073 ;; Registers used:
 23074 ;;		wreg, status,2, status,0
 23075 ;; Tracked objects:
 23076 ;;		On entry : 0/0
 23077 ;;		On exit  : 0/0
 23078 ;;		Unchanged: 0/0
 23079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23080 ;;      Params:         0       0       0       0       0       0       0
 23081 ;;      Locals:         0       0       0       0       0       0       0
 23082 ;;      Temps:          0       0       0       0       0       0       0
 23083 ;;      Totals:         0       0       0       0       0       0       0
 23084 ;;Total ram usage:        0 bytes
 23085 ;; Hardware stack levels used:    1
 23086 ;; Hardware stack levels required when called:    4
 23087 ;; This function calls:
 23088 ;;		Nothing
 23089 ;; This function is called by:
 23090 ;;		_UARTint
 23091 ;; This function uses a non-reentrant model
 23092 ;;
 23093                           
 23094                           	psect	text96
 23095  0069E4                     __ptext96:
 23096                           	opt stack 0
 23097  0069E4                     i1_longPressUP:
 23098                           	opt stack 14
 23099                           
 23100                           ;DisplayProtocol.h: 158: if (!UPisLP) {
 23101                           
 23102                           ;incstack = 0
 23103  0069E4  504A               	movf	_UPisLP,w,c
 23104  0069E6  A4D8               	btfss	status,2,c
 23105  0069E8  0012               	return	
 23106                           
 23107                           ;DisplayProtocol.h: 159: UPisLP = 1;
 23108  0069EA  0E01               	movlw	1
 23109  0069EC  6E4A               	movwf	_UPisLP,c
 23110                           
 23111                           ;DisplayProtocol.h: 160: if (actualScreen == 0 || actualScreen == 4) {
 23112  0069EE  0101               	movlb	1	; () banked
 23113  0069F0  51BD               	movf	_actualScreen& (0+255),w,b
 23114  0069F2  B4D8               	btfsc	status,2,c
 23115  0069F4  D005               	goto	i1l8384
 23116                           
 23117                           ; BSR set to: 1
 23118  0069F6  0E04               	movlw	4
 23119  0069F8  0101               	movlb	1	; () banked
 23120  0069FA  19BD               	xorwf	_actualScreen& (0+255),w,b
 23121  0069FC  A4D8               	btfss	status,2,c
 23122  0069FE  D01C               	goto	i1l8396
 23123  006A00                     i1l8384:
 23124                           
 23125                           ; BSR set to: 1
 23126                           ;DisplayProtocol.h: 161: if (holdENTERcont > 5) {
 23127  006A00  0E05               	movlw	5
 23128  006A02  0100               	movlb	0	; () banked
 23129  006A04  65C6               	cpfsgt	_holdENTERcont& (0+255),b
 23130  006A06  D014               	goto	i1l8394
 23131                           
 23132                           ; BSR set to: 0
 23133                           ;DisplayProtocol.h: 162: if (actualScreen == 0) {
 23134  006A08  0101               	movlb	1	; () banked
 23135  006A0A  51BD               	movf	_actualScreen& (0+255),w,b
 23136  006A0C  A4D8               	btfss	status,2,c
 23137  006A0E  D007               	goto	i1l8390
 23138                           
 23139                           ; BSR set to: 1
 23140                           ;DisplayProtocol.h: 163: actualScreen = 1;
 23141  006A10  0E01               	movlw	1
 23142  006A12  0101               	movlb	1	; () banked
 23143  006A14  6FBD               	movwf	_actualScreen& (0+255),b
 23144                           
 23145                           ;DisplayProtocol.h: 164: fd = 0;
 23146  006A16  0E00               	movlw	0
 23147  006A18  0101               	movlb	1	; () banked
 23148  006A1A  6FB9               	movwf	_fd& (0+255),b
 23149                           
 23150                           ;DisplayProtocol.h: 165: } else if (actualScreen == 4)
 23151  006A1C  0012               	return	
 23152  006A1E                     i1l8390:
 23153                           
 23154                           ; BSR set to: 1
 23155  006A1E  0E04               	movlw	4
 23156  006A20  0101               	movlb	1	; () banked
 23157  006A22  19BD               	xorwf	_actualScreen& (0+255),w,b
 23158  006A24  A4D8               	btfss	status,2,c
 23159  006A26  0012               	return	
 23160                           
 23161                           ; BSR set to: 1
 23162                           ;DisplayProtocol.h: 166: actualScreen = 9;
 23163  006A28  0E09               	movlw	9
 23164  006A2A  0101               	movlb	1	; () banked
 23165  006A2C  6FBD               	movwf	_actualScreen& (0+255),b
 23166                           
 23167                           ; BSR set to: 1
 23168                           ;DisplayProtocol.h: 167: } else
 23169                           
 23170                           ; BSR set to: 1
 23171  006A2E  0012               	return	
 23172  006A30                     i1l8394:
 23173                           
 23174                           ;DisplayProtocol.h: 168: menuSection = 0;
 23175  006A30  0E00               	movlw	0
 23176  006A32  0101               	movlb	1	; () banked
 23177  006A34  6FBC               	movwf	_menuSection& (0+255),b
 23178                           
 23179                           ; BSR set to: 1
 23180                           ;DisplayProtocol.h: 169: }else if(actualScreen == 5) {
 23181  006A36  0012               	return	
 23182  006A38                     i1l8396:
 23183                           
 23184                           ; BSR set to: 1
 23185  006A38  0E05               	movlw	5
 23186  006A3A  0101               	movlb	1	; () banked
 23187  006A3C  19BD               	xorwf	_actualScreen& (0+255),w,b
 23188  006A3E  A4D8               	btfss	status,2,c
 23189  006A40  0012               	return	
 23190                           
 23191                           ; BSR set to: 1
 23192                           ;DisplayProtocol.h: 170: if(menuSection == 2)
 23193  006A42  0E02               	movlw	2
 23194  006A44  0101               	movlb	1	; () banked
 23195  006A46  19BC               	xorwf	_menuSection& (0+255),w,b
 23196  006A48  A4D8               	btfss	status,2,c
 23197  006A4A  0012               	return	
 23198                           
 23199                           ; BSR set to: 1
 23200                           ;DisplayProtocol.h: 171: chanVals += 10;
 23201  006A4C  0E0A               	movlw	10
 23202  006A4E  0101               	movlb	1	; () banked
 23203  006A50  27B6               	addwf	_chanVals& (0+255),f,b
 23204  006A52  0E00               	movlw	0
 23205  006A54  23B7               	addwfc	(_chanVals+1)& (0+255),f,b
 23206                           
 23207                           ; BSR set to: 1
 23208                           
 23209                           ; BSR set to: 1
 23210                           
 23211                           ; BSR set to: 1
 23212  006A56  0012               	return	
 23213  006A58                     __end_ofi1_longPressUP:
 23214                           	opt stack 0
 23215                           pclatu	equ	0xFFB
 23216                           pclath	equ	0xFFA
 23217                           tblptru	equ	0xFF8
 23218                           tblptrh	equ	0xFF7
 23219                           tblptrl	equ	0xFF6
 23220                           tablat	equ	0xFF5
 23221                           prodh	equ	0xFF4
 23222                           prodl	equ	0xFF3
 23223                           intcon	equ	0xFF2
 23224                           postinc0	equ	0xFEE
 23225                           fsr0h	equ	0xFEA
 23226                           fsr0l	equ	0xFE9
 23227                           wreg	equ	0xFE8
 23228                           postdec1	equ	0xFE5
 23229                           fsr1h	equ	0xFE2
 23230                           fsr1l	equ	0xFE1
 23231                           bsr	equ	0xFE0
 23232                           indf2	equ	0xFDF
 23233                           postinc2	equ	0xFDE
 23234                           postdec2	equ	0xFDD
 23235                           plusw2	equ	0xFDB
 23236                           fsr2h	equ	0xFDA
 23237                           fsr2l	equ	0xFD9
 23238                           status	equ	0xFD8
 23239                           
 23240 ;; *************** function i1_longPressRETRO *****************
 23241 ;; Defined at:
 23242 ;;		line 253 in file "source/DisplayProtocol.h"
 23243 ;; Parameters:    Size  Location     Type
 23244 ;;		None
 23245 ;; Auto vars:     Size  Location     Type
 23246 ;;		None
 23247 ;; Return value:  Size  Location     Type
 23248 ;;                  1    wreg      void 
 23249 ;; Registers used:
 23250 ;;		wreg, status,2, status,0, cstack
 23251 ;; Tracked objects:
 23252 ;;		On entry : 0/0
 23253 ;;		On exit  : 0/0
 23254 ;;		Unchanged: 0/0
 23255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23256 ;;      Params:         0       0       0       0       0       0       0
 23257 ;;      Locals:         0       0       0       0       0       0       0
 23258 ;;      Temps:          0       0       0       0       0       0       0
 23259 ;;      Totals:         0       0       0       0       0       0       0
 23260 ;;Total ram usage:        0 bytes
 23261 ;; Hardware stack levels used:    1
 23262 ;; Hardware stack levels required when called:    6
 23263 ;; This function calls:
 23264 ;;		i1___ftmul
 23265 ;;		i1_initProtocoll
 23266 ;; This function is called by:
 23267 ;;		_UARTint
 23268 ;; This function uses a non-reentrant model
 23269 ;;
 23270                           
 23271                           	psect	text97
 23272  005000                     __ptext97:
 23273                           	opt stack 0
 23274  005000                     i1_longPressRETRO:
 23275                           	opt stack 12
 23276                           
 23277                           ;DisplayProtocol.h: 254: if (!RETROisLP) {
 23278                           
 23279                           ;incstack = 0
 23280  005000  0100               	movlb	0	; () banked
 23281  005002  51C5               	movf	_RETROisLP& (0+255),w,b
 23282  005004  A4D8               	btfss	status,2,c
 23283  005006  0012               	return	
 23284                           
 23285                           ; BSR set to: 0
 23286                           ;DisplayProtocol.h: 255: RETROisLP = 1;
 23287  005008  0E01               	movlw	1
 23288  00500A  0100               	movlb	0	; () banked
 23289  00500C  6FC5               	movwf	_RETROisLP& (0+255),b
 23290                           
 23291                           ;DisplayProtocol.h: 256: if(actualScreen == 0 || actualScreen == 4
 23292                           ;DisplayProtocol.h: 257: || actualScreen == 14) {
 23293  00500E  0101               	movlb	1	; () banked
 23294  005010  51BD               	movf	_actualScreen& (0+255),w,b
 23295  005012  B4D8               	btfsc	status,2,c
 23296  005014  D00A               	goto	i1l8510
 23297                           
 23298                           ; BSR set to: 1
 23299  005016  0E04               	movlw	4
 23300  005018  0101               	movlb	1	; () banked
 23301  00501A  19BD               	xorwf	_actualScreen& (0+255),w,b
 23302  00501C  B4D8               	btfsc	status,2,c
 23303  00501E  D005               	goto	i1l8510
 23304                           
 23305                           ; BSR set to: 1
 23306  005020  0E0E               	movlw	14
 23307  005022  0101               	movlb	1	; () banked
 23308  005024  19BD               	xorwf	_actualScreen& (0+255),w,b
 23309  005026  A4D8               	btfss	status,2,c
 23310  005028  D012               	goto	i1l8516
 23311  00502A                     i1l8510:
 23312                           
 23313                           ; BSR set to: 1
 23314                           ;DisplayProtocol.h: 258: if(processStarted || actualScreen == 14) {
 23315  00502A  0100               	movlb	0	; () banked
 23316  00502C  51C0               	movf	_processStarted& (0+255),w,b
 23317  00502E  A4D8               	btfss	status,2,c
 23318  005030  D005               	goto	i1l688
 23319                           
 23320                           ; BSR set to: 0
 23321  005032  0E0E               	movlw	14
 23322  005034  0101               	movlb	1	; () banked
 23323  005036  19BD               	xorwf	_actualScreen& (0+255),w,b
 23324  005038  A4D8               	btfss	status,2,c
 23325  00503A  0012               	return	
 23326  00503C                     i1l688:
 23327                           
 23328                           ;DisplayProtocol.h: 259: tempLastScreen = actualScreen;
 23329  00503C  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 23330                           
 23331                           ;DisplayProtocol.h: 260: actualScreen = 3;
 23332  005040  0E03               	movlw	3
 23333  005042  0101               	movlb	1	; () banked
 23334  005044  6FBD               	movwf	_actualScreen& (0+255),b
 23335                           
 23336                           ;DisplayProtocol.h: 261: selSN = 0;
 23337  005046  0E00               	movlw	0
 23338  005048  0101               	movlb	1	; () banked
 23339  00504A  6FBA               	movwf	_selSN& (0+255),b
 23340                           
 23341                           ; BSR set to: 1
 23342                           ;DisplayProtocol.h: 262: }
 23343                           ;DisplayProtocol.h: 263: }else if(actualScreen == 5)
 23344  00504C  0012               	return	
 23345  00504E                     i1l8516:
 23346                           
 23347                           ; BSR set to: 1
 23348  00504E  0E05               	movlw	5
 23349  005050  0101               	movlb	1	; () banked
 23350  005052  19BD               	xorwf	_actualScreen& (0+255),w,b
 23351  005054  A4D8               	btfss	status,2,c
 23352  005056  D004               	goto	i1l8520
 23353                           
 23354                           ; BSR set to: 1
 23355                           ;DisplayProtocol.h: 264: actualScreen = 4;
 23356  005058  0E04               	movlw	4
 23357  00505A  0101               	movlb	1	; () banked
 23358  00505C  6FBD               	movwf	_actualScreen& (0+255),b
 23359  00505E  0012               	return	
 23360  005060                     i1l8520:
 23361                           
 23362                           ; BSR set to: 1
 23363                           ;DisplayProtocol.h: 265: else if(actualScreen == 12 || actualScreen == 6) {
 23364  005060  0E0C               	movlw	12
 23365  005062  0101               	movlb	1	; () banked
 23366  005064  19BD               	xorwf	_actualScreen& (0+255),w,b
 23367  005066  B4D8               	btfsc	status,2,c
 23368  005068  D005               	goto	i1l694
 23369                           
 23370                           ; BSR set to: 1
 23371  00506A  0E06               	movlw	6
 23372  00506C  0101               	movlb	1	; () banked
 23373  00506E  19BD               	xorwf	_actualScreen& (0+255),w,b
 23374  005070  A4D8               	btfss	status,2,c
 23375  005072  D009               	goto	i1l8526
 23376  005074                     i1l694:
 23377                           
 23378                           ; BSR set to: 1
 23379                           ;DisplayProtocol.h: 266: tempLastScreen = actualScreen;
 23380  005074  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 23381                           
 23382                           ; BSR set to: 1
 23383                           ;DisplayProtocol.h: 267: actualScreen = 15;
 23384  005078  0E0F               	movlw	15
 23385  00507A  0101               	movlb	1	; () banked
 23386  00507C  6FBD               	movwf	_actualScreen& (0+255),b
 23387                           
 23388                           ;DisplayProtocol.h: 268: selSN = 1;
 23389  00507E  0E01               	movlw	1
 23390  005080  0101               	movlb	1	; () banked
 23391  005082  6FBA               	movwf	_selSN& (0+255),b
 23392                           
 23393                           ;DisplayProtocol.h: 269: }else if(actualScreen == 14) {
 23394  005084  0012               	return	
 23395  005086                     i1l8526:
 23396                           
 23397                           ; BSR set to: 1
 23398  005086  0E0E               	movlw	14
 23399  005088  0101               	movlb	1	; () banked
 23400  00508A  19BD               	xorwf	_actualScreen& (0+255),w,b
 23401  00508C  A4D8               	btfss	status,2,c
 23402  00508E  0012               	return	
 23403                           
 23404                           ; BSR set to: 1
 23405                           ;DisplayProtocol.h: 270: processStarted = 0;
 23406  005090  0E00               	movlw	0
 23407  005092  0100               	movlb	0	; () banked
 23408  005094  6FC0               	movwf	_processStarted& (0+255),b
 23409                           
 23410                           ;DisplayProtocol.h: 271: processState = 0;
 23411  005096  0E00               	movlw	0
 23412  005098  0100               	movlb	0	; () banked
 23413  00509A  6FB3               	movwf	(_processState+1)& (0+255),b
 23414  00509C  0E00               	movlw	0
 23415  00509E  6FB2               	movwf	_processState& (0+255),b
 23416                           
 23417                           ; BSR set to: 0
 23418                           ;DisplayProtocol.h: 272: LATCbits.LATC4 = 0;
 23419  0050A0  988B               	bcf	3979,4,c	;volatile
 23420                           
 23421                           ;DisplayProtocol.h: 273: actualScreen = 0;
 23422  0050A2  0E00               	movlw	0
 23423  0050A4  0101               	movlb	1	; () banked
 23424  0050A6  6FBD               	movwf	_actualScreen& (0+255),b
 23425                           
 23426                           ;DisplayProtocol.h: 274: if(calibMode) {
 23427  0050A8  0100               	movlb	0	; () banked
 23428  0050AA  51BE               	movf	_calibMode& (0+255),w,b
 23429  0050AC  B4D8               	btfsc	status,2,c
 23430  0050AE  D027               	goto	i1l697
 23431                           
 23432                           ; BSR set to: 0
 23433                           ;DisplayProtocol.h: 275: numCortes = tempNumCortes;
 23434  0050B0  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 23435  0050B4  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 23436                           
 23437                           ;DisplayProtocol.h: 276: tiXcorte = temptiXcorte;
 23438  0050B8  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 23439  0050BC  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 23440  0050C0  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 23441                           
 23442                           ; BSR set to: 0
 23443                           ;DisplayProtocol.h: 277: timsXcorte = (float)tiXcorte * 1000;
 23444  0050C4  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 23445  0050C8  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 23446  0050CC  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 23447  0050D0  0E00               	movlw	0
 23448  0050D2  0100               	movlb	0	; () banked
 23449  0050D4  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 23450  0050D6  0E7A               	movlw	122
 23451  0050D8  0100               	movlb	0	; () banked
 23452  0050DA  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 23453  0050DC  0E44               	movlw	68
 23454  0050DE  0100               	movlb	0	; () banked
 23455  0050E0  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 23456  0050E2  ECCE  F01D         	call	i1___ftmul	;wreg free
 23457  0050E6  C068  F053         	movff	?i1___ftmul,_timsXcorte
 23458  0050EA  C069  F054         	movff	?i1___ftmul+1,_timsXcorte+1
 23459  0050EE  C06A  F055         	movff	?i1___ftmul+2,_timsXcorte+2
 23460                           
 23461                           ;DisplayProtocol.h: 278: calibMode = 0;
 23462  0050F2  0E00               	movlw	0
 23463  0050F4  0100               	movlb	0	; () banked
 23464  0050F6  6FBE               	movwf	_calibMode& (0+255),b
 23465                           
 23466                           ; BSR set to: 0
 23467                           ;DisplayProtocol.h: 279: actualScreen = 4;
 23468  0050F8  0E04               	movlw	4
 23469  0050FA  0101               	movlb	1	; () banked
 23470  0050FC  6FBD               	movwf	_actualScreen& (0+255),b
 23471  0050FE                     i1l697:
 23472                           
 23473                           ;DisplayProtocol.h: 280: }
 23474                           ;DisplayProtocol.h: 281: initProtocoll(1);
 23475  0050FE  0E01               	movlw	1
 23476  005100  ECCC  F036         	call	i1_initProtocoll
 23477  005104  0012               	return	
 23478  005106                     __end_ofi1_longPressRETRO:
 23479                           	opt stack 0
 23480                           pclatu	equ	0xFFB
 23481                           pclath	equ	0xFFA
 23482                           tblptru	equ	0xFF8
 23483                           tblptrh	equ	0xFF7
 23484                           tblptrl	equ	0xFF6
 23485                           tablat	equ	0xFF5
 23486                           prodh	equ	0xFF4
 23487                           prodl	equ	0xFF3
 23488                           intcon	equ	0xFF2
 23489                           postinc0	equ	0xFEE
 23490                           fsr0h	equ	0xFEA
 23491                           fsr0l	equ	0xFE9
 23492                           wreg	equ	0xFE8
 23493                           postdec1	equ	0xFE5
 23494                           fsr1h	equ	0xFE2
 23495                           fsr1l	equ	0xFE1
 23496                           bsr	equ	0xFE0
 23497                           indf2	equ	0xFDF
 23498                           postinc2	equ	0xFDE
 23499                           postdec2	equ	0xFDD
 23500                           plusw2	equ	0xFDB
 23501                           fsr2h	equ	0xFDA
 23502                           fsr2l	equ	0xFD9
 23503                           status	equ	0xFD8
 23504                           
 23505 ;; *************** function i1_longPressENTER *****************
 23506 ;; Defined at:
 23507 ;;		line 428 in file "source/DisplayProtocol.h"
 23508 ;; Parameters:    Size  Location     Type
 23509 ;;		None
 23510 ;; Auto vars:     Size  Location     Type
 23511 ;;  longPressENT    3   45[BANK0 ] float 
 23512 ;; Return value:  Size  Location     Type
 23513 ;;                  1    wreg      void 
 23514 ;; Registers used:
 23515 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23516 ;; Tracked objects:
 23517 ;;		On entry : 0/0
 23518 ;;		On exit  : 0/0
 23519 ;;		Unchanged: 0/0
 23520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23521 ;;      Params:         0       0       0       0       0       0       0
 23522 ;;      Locals:         0       6       0       0       0       0       0
 23523 ;;      Temps:          0       0       0       0       0       0       0
 23524 ;;      Totals:         0       6       0       0       0       0       0
 23525 ;;Total ram usage:        6 bytes
 23526 ;; Hardware stack levels used:    1
 23527 ;; Hardware stack levels required when called:    9
 23528 ;; This function calls:
 23529 ;;		i1___ftadd
 23530 ;;		i1___ftdiv
 23531 ;;		i1___ftmul
 23532 ;;		i1_calcVars2ti
 23533 ;;		i1_confirmEdition
 23534 ;;		i1_desintegrator
 23535 ;;		i1_integrator
 23536 ;; This function is called by:
 23537 ;;		_UARTint
 23538 ;; This function uses a non-reentrant model
 23539 ;;
 23540                           
 23541                           	psect	text98
 23542  001C70                     __ptext98:
 23543                           	opt stack 0
 23544  001C70                     i1_longPressENTER:
 23545                           	opt stack 9
 23546                           
 23547                           ;DisplayProtocol.h: 429: if (!ENTERisLP) {
 23548                           
 23549                           ;incstack = 0
 23550  001C70  0101               	movlb	1	; () banked
 23551  001C72  51BE               	movf	_ENTERisLP& (0+255),w,b
 23552  001C74  A4D8               	btfss	status,2,c
 23553  001C76  0012               	return	
 23554                           
 23555                           ; BSR set to: 1
 23556                           ;DisplayProtocol.h: 430: ENTERisLP = 1;
 23557  001C78  0E01               	movlw	1
 23558  001C7A  0101               	movlb	1	; () banked
 23559  001C7C  6FBE               	movwf	_ENTERisLP& (0+255),b
 23560                           
 23561                           ;DisplayProtocol.h: 431: if(actualScreen == 0 || actualScreen == 4) {
 23562  001C7E  0101               	movlb	1	; () banked
 23563  001C80  51BD               	movf	_actualScreen& (0+255),w,b
 23564  001C82  B4D8               	btfsc	status,2,c
 23565  001C84  D005               	goto	i1l8732
 23566                           
 23567                           ; BSR set to: 1
 23568  001C86  0E04               	movlw	4
 23569  001C88  0101               	movlb	1	; () banked
 23570  001C8A  19BD               	xorwf	_actualScreen& (0+255),w,b
 23571  001C8C  A4D8               	btfss	status,2,c
 23572  001C8E  D025               	goto	i1l8748
 23573  001C90                     i1l8732:
 23574                           
 23575                           ; BSR set to: 1
 23576                           ;DisplayProtocol.h: 432: if (holdUPcont > 5) {
 23577  001C90  0E05               	movlw	5
 23578  001C92  0101               	movlb	1	; () banked
 23579  001C94  65BF               	cpfsgt	_holdUPcont& (0+255),b
 23580  001C96  D014               	goto	i1l8742
 23581                           
 23582                           ; BSR set to: 1
 23583                           ;DisplayProtocol.h: 433: if (actualScreen == 0) {
 23584  001C98  0101               	movlb	1	; () banked
 23585  001C9A  51BD               	movf	_actualScreen& (0+255),w,b
 23586  001C9C  A4D8               	btfss	status,2,c
 23587  001C9E  D007               	goto	i1l8738
 23588                           
 23589                           ; BSR set to: 1
 23590                           ;DisplayProtocol.h: 434: actualScreen = 1;
 23591  001CA0  0E01               	movlw	1
 23592  001CA2  0101               	movlb	1	; () banked
 23593  001CA4  6FBD               	movwf	_actualScreen& (0+255),b
 23594                           
 23595                           ;DisplayProtocol.h: 435: fd = 0;
 23596  001CA6  0E00               	movlw	0
 23597  001CA8  0101               	movlb	1	; () banked
 23598  001CAA  6FB9               	movwf	_fd& (0+255),b
 23599                           
 23600                           ;DisplayProtocol.h: 436: } else if (actualScreen == 4)
 23601  001CAC  0012               	return	
 23602  001CAE                     i1l8738:
 23603                           
 23604                           ; BSR set to: 1
 23605  001CAE  0E04               	movlw	4
 23606  001CB0  0101               	movlb	1	; () banked
 23607  001CB2  19BD               	xorwf	_actualScreen& (0+255),w,b
 23608  001CB4  A4D8               	btfss	status,2,c
 23609  001CB6  0012               	return	
 23610                           
 23611                           ; BSR set to: 1
 23612                           ;DisplayProtocol.h: 437: actualScreen = 9;
 23613  001CB8  0E09               	movlw	9
 23614  001CBA  0101               	movlb	1	; () banked
 23615  001CBC  6FBD               	movwf	_actualScreen& (0+255),b
 23616                           
 23617                           ; BSR set to: 1
 23618                           ;DisplayProtocol.h: 438: } else if(!processStarted) {
 23619                           
 23620                           ; BSR set to: 1
 23621  001CBE  0012               	return	
 23622  001CC0                     i1l8742:
 23623                           
 23624                           ; BSR set to: 1
 23625  001CC0  0100               	movlb	0	; () banked
 23626  001CC2  51C0               	movf	_processStarted& (0+255),w,b
 23627  001CC4  A4D8               	btfss	status,2,c
 23628  001CC6  0012               	return	
 23629                           
 23630                           ; BSR set to: 0
 23631                           ;DisplayProtocol.h: 439: tempLastScreen = actualScreen;
 23632  001CC8  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 23633                           
 23634                           ; BSR set to: 0
 23635                           ;DisplayProtocol.h: 440: actualScreen = 2;
 23636  001CCC  0E02               	movlw	2
 23637  001CCE  0101               	movlb	1	; () banked
 23638  001CD0  6FBD               	movwf	_actualScreen& (0+255),b
 23639                           
 23640                           ;DisplayProtocol.h: 441: selSN = 1;
 23641  001CD2  0E01               	movlw	1
 23642  001CD4  0101               	movlb	1	; () banked
 23643  001CD6  6FBA               	movwf	_selSN& (0+255),b
 23644                           
 23645                           ; BSR set to: 1
 23646                           ;DisplayProtocol.h: 442: }
 23647                           ;DisplayProtocol.h: 443: }else if(actualScreen == 5) {
 23648                           
 23649                           ; BSR set to: 1
 23650  001CD8  0012               	return	
 23651  001CDA                     i1l8748:
 23652                           
 23653                           ; BSR set to: 1
 23654  001CDA  0E05               	movlw	5
 23655  001CDC  0101               	movlb	1	; () banked
 23656  001CDE  19BD               	xorwf	_actualScreen& (0+255),w,b
 23657  001CE0  A4D8               	btfss	status,2,c
 23658  001CE2  D010               	goto	i1l8756
 23659                           
 23660                           ; BSR set to: 1
 23661                           ;DisplayProtocol.h: 444: if(menuSection != 2)
 23662  001CE4  0E02               	movlw	2
 23663  001CE6  0101               	movlb	1	; () banked
 23664  001CE8  19BC               	xorwf	_menuSection& (0+255),w,b
 23665  001CEA  A4D8               	btfss	status,2,c
 23666                           
 23667                           ; BSR set to: 1
 23668                           ;DisplayProtocol.h: 445: integrator();
 23669  001CEC  EC9E  F021         	call	i1_integrator	;wreg free
 23670                           
 23671                           ;DisplayProtocol.h: 446: confirmEdition(!processStarted);
 23672  001CF0  0100               	movlb	0	; () banked
 23673  001CF2  51C0               	movf	_processStarted& (0+255),w,b
 23674  001CF4  A4D8               	btfss	status,2,c
 23675  001CF6  D002               	goto	i1u1253_20
 23676  001CF8  0E01               	movlw	1
 23677  001CFA  D001               	goto	i1u1254_20
 23678  001CFC                     i1u1253_20:
 23679  001CFC  0E00               	movlw	0
 23680  001CFE                     i1u1254_20:
 23681  001CFE  EC43  F02D         	call	i1_confirmEdition
 23682                           
 23683                           ;DisplayProtocol.h: 447: }else if(actualScreen == 12) {
 23684  001D02  0012               	return	
 23685  001D04                     i1l8756:
 23686  001D04  0E0C               	movlw	12
 23687  001D06  0101               	movlb	1	; () banked
 23688  001D08  19BD               	xorwf	_actualScreen& (0+255),w,b
 23689  001D0A  A4D8               	btfss	status,2,c
 23690  001D0C  0012               	return	
 23691                           
 23692                           ; BSR set to: 1
 23693                           ;DisplayProtocol.h: 448: tempLastScreen = 6;
 23694  001D0E  0E06               	movlw	6
 23695  001D10  0100               	movlb	0	; () banked
 23696  001D12  6FBC               	movwf	_tempLastScreen& (0+255),b
 23697                           
 23698                           ; BSR set to: 0
 23699                           ;DisplayProtocol.h: 449: integrator();
 23700  001D14  EC9E  F021         	call	i1_integrator	;wreg free
 23701                           
 23702                           ;DisplayProtocol.h: 450: if(calibLevel == 0) {
 23703  001D18  0101               	movlb	1	; () banked
 23704  001D1A  51B8               	movf	_calibLevel& (0+255),w,b
 23705  001D1C  A4D8               	btfss	status,2,c
 23706  001D1E  D069               	goto	i1l8784
 23707                           
 23708                           ; BSR set to: 1
 23709                           ;DisplayProtocol.h: 451: tempVelocidadMasa1 = (float)chanValf / tiXcorte;
 23710  001D20  C1B1  F072         	movff	_chanValf,i1___ftdiv@f1
 23711  001D24  C1B2  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23712  001D28  C1B3  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23713  001D2C  C195  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23714  001D30  C196  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23715  001D34  C197  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23716  001D38  EC23  F01F         	call	i1___ftdiv	;wreg free
 23717  001D3C  C072  F1A0         	movff	?i1___ftdiv,_tempVelocidadMasa1
 23718  001D40  C073  F1A1         	movff	?i1___ftdiv+1,_tempVelocidadMasa1+1
 23719  001D44  C074  F1A2         	movff	?i1___ftdiv+2,_tempVelocidadMasa1+2
 23720                           
 23721                           ;DisplayProtocol.h: 452: tiXcorte = (float)0.5f / tempVelocidadMasa1;
 23722  001D48  0E00               	movlw	0
 23723  001D4A  0100               	movlb	0	; () banked
 23724  001D4C  6F72               	movwf	i1___ftdiv@f1& (0+255),b
 23725  001D4E  0E00               	movlw	0
 23726  001D50  0100               	movlb	0	; () banked
 23727  001D52  6F73               	movwf	(i1___ftdiv@f1+1)& (0+255),b
 23728  001D54  0E3F               	movlw	63
 23729  001D56  0100               	movlb	0	; () banked
 23730  001D58  6F74               	movwf	(i1___ftdiv@f1+2)& (0+255),b
 23731  001D5A  C1A0  F075         	movff	_tempVelocidadMasa1,i1___ftdiv@f2
 23732  001D5E  C1A1  F076         	movff	_tempVelocidadMasa1+1,i1___ftdiv@f2+1
 23733  001D62  C1A2  F077         	movff	_tempVelocidadMasa1+2,i1___ftdiv@f2+2
 23734  001D66  EC23  F01F         	call	i1___ftdiv	;wreg free
 23735  001D6A  C072  F195         	movff	?i1___ftdiv,_tiXcorte
 23736  001D6E  C073  F196         	movff	?i1___ftdiv+1,_tiXcorte+1
 23737  001D72  C074  F197         	movff	?i1___ftdiv+2,_tiXcorte+2
 23738                           
 23739                           ;DisplayProtocol.h: 453: timsXcorte = (float)tiXcorte * 1000;
 23740  001D76  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 23741  001D7A  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 23742  001D7E  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 23743  001D82  0E00               	movlw	0
 23744  001D84  0100               	movlb	0	; () banked
 23745  001D86  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 23746  001D88  0E7A               	movlw	122
 23747  001D8A  0100               	movlb	0	; () banked
 23748  001D8C  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 23749  001D8E  0E44               	movlw	68
 23750  001D90  0100               	movlb	0	; () banked
 23751  001D92  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 23752  001D94  ECCE  F01D         	call	i1___ftmul	;wreg free
 23753  001D98  C068  F053         	movff	?i1___ftmul,_timsXcorte
 23754  001D9C  C069  F054         	movff	?i1___ftmul+1,_timsXcorte+1
 23755  001DA0  C06A  F055         	movff	?i1___ftmul+2,_timsXcorte+2
 23756                           
 23757                           ;DisplayProtocol.h: 454: calibLevel = 1;
 23758  001DA4  0E01               	movlw	1
 23759  001DA6  0101               	movlb	1	; () banked
 23760  001DA8  6FB8               	movwf	_calibLevel& (0+255),b
 23761                           
 23762                           ; BSR set to: 1
 23763                           ;DisplayProtocol.h: 455: numCortes = 1;
 23764  001DAA  0E00               	movlw	0
 23765  001DAC  0100               	movlb	0	; () banked
 23766  001DAE  6FD3               	movwf	(_numCortes+1)& (0+255),b
 23767  001DB0  0E01               	movlw	1
 23768  001DB2  6FD2               	movwf	_numCortes& (0+255),b
 23769                           
 23770                           ; BSR set to: 0
 23771                           ;DisplayProtocol.h: 456: processState = 0;
 23772  001DB4  0E00               	movlw	0
 23773  001DB6  0100               	movlb	0	; () banked
 23774  001DB8  6FB3               	movwf	(_processState+1)& (0+255),b
 23775  001DBA  0E00               	movlw	0
 23776  001DBC  6FB2               	movwf	_processState& (0+255),b
 23777                           
 23778                           ; BSR set to: 0
 23779                           ;DisplayProtocol.h: 457: processTimer = 0;
 23780  001DBE  0E00               	movlw	0
 23781  001DC0  6E3B               	movwf	_processTimer,c
 23782  001DC2  0E00               	movlw	0
 23783  001DC4  6E3C               	movwf	_processTimer+1,c
 23784  001DC6  0E00               	movlw	0
 23785  001DC8  6E3D               	movwf	_processTimer+2,c
 23786  001DCA  0E00               	movlw	0
 23787  001DCC  6E3E               	movwf	_processTimer+3,c
 23788                           
 23789                           ; BSR set to: 0
 23790                           ;DisplayProtocol.h: 459: actualScreen = tempLastScreen;
 23791  001DCE  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 23792                           
 23793                           ; BSR set to: 0
 23794                           ;DisplayProtocol.h: 460: chanValf = (float)0.50f;;
 23795  001DD2  0E00               	movlw	0
 23796  001DD4  0101               	movlb	1	; () banked
 23797  001DD6  6FB1               	movwf	_chanValf& (0+255),b
 23798  001DD8  0E00               	movlw	0
 23799  001DDA  0101               	movlb	1	; () banked
 23800  001DDC  6FB2               	movwf	(_chanValf+1)& (0+255),b
 23801  001DDE  0E3F               	movlw	63
 23802  001DE0  0101               	movlb	1	; () banked
 23803  001DE2  6FB3               	movwf	(_chanValf+2)& (0+255),b
 23804                           
 23805                           ; BSR set to: 1
 23806                           ;DisplayProtocol.h: 461: desintegrator();
 23807  001DE4  ECB9  F01A         	call	i1_desintegrator	;wreg free
 23808                           
 23809                           ;DisplayProtocol.h: 462: LATCbits.LATC4 = 1;
 23810  001DE8  888B               	bsf	3979,4,c	;volatile
 23811                           
 23812                           ;DisplayProtocol.h: 463: processStarted = 1;
 23813  001DEA  0E01               	movlw	1
 23814  001DEC  0100               	movlb	0	; () banked
 23815  001DEE  6FC0               	movwf	_processStarted& (0+255),b
 23816                           
 23817                           ;DisplayProtocol.h: 464: }else if(calibLevel == 1) {
 23818  001DF0  0012               	return	
 23819  001DF2                     i1l8784:
 23820  001DF2  0101               	movlb	1	; () banked
 23821  001DF4  05B8               	decf	_calibLevel& (0+255),w,b
 23822  001DF6  A4D8               	btfss	status,2,c
 23823  001DF8  D069               	goto	i1l8806
 23824                           
 23825                           ; BSR set to: 1
 23826                           ;DisplayProtocol.h: 465: tempVelocidadMasa2 = (float)chanValf / tiXcorte;
 23827  001DFA  C1B1  F072         	movff	_chanValf,i1___ftdiv@f1
 23828  001DFE  C1B2  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23829  001E02  C1B3  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23830  001E06  C195  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23831  001E0A  C196  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23832  001E0E  C197  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23833  001E12  EC23  F01F         	call	i1___ftdiv	;wreg free
 23834  001E16  C072  F19D         	movff	?i1___ftdiv,_tempVelocidadMasa2
 23835  001E1A  C073  F19E         	movff	?i1___ftdiv+1,_tempVelocidadMasa2+1
 23836  001E1E  C074  F19F         	movff	?i1___ftdiv+2,_tempVelocidadMasa2+2
 23837                           
 23838                           ;DisplayProtocol.h: 466: tiXcorte = (float)0.25f / tempVelocidadMasa2;
 23839  001E22  0E00               	movlw	0
 23840  001E24  0100               	movlb	0	; () banked
 23841  001E26  6F72               	movwf	i1___ftdiv@f1& (0+255),b
 23842  001E28  0E80               	movlw	128
 23843  001E2A  0100               	movlb	0	; () banked
 23844  001E2C  6F73               	movwf	(i1___ftdiv@f1+1)& (0+255),b
 23845  001E2E  0E3E               	movlw	62
 23846  001E30  0100               	movlb	0	; () banked
 23847  001E32  6F74               	movwf	(i1___ftdiv@f1+2)& (0+255),b
 23848  001E34  C19D  F075         	movff	_tempVelocidadMasa2,i1___ftdiv@f2
 23849  001E38  C19E  F076         	movff	_tempVelocidadMasa2+1,i1___ftdiv@f2+1
 23850  001E3C  C19F  F077         	movff	_tempVelocidadMasa2+2,i1___ftdiv@f2+2
 23851  001E40  EC23  F01F         	call	i1___ftdiv	;wreg free
 23852  001E44  C072  F195         	movff	?i1___ftdiv,_tiXcorte
 23853  001E48  C073  F196         	movff	?i1___ftdiv+1,_tiXcorte+1
 23854  001E4C  C074  F197         	movff	?i1___ftdiv+2,_tiXcorte+2
 23855                           
 23856                           ;DisplayProtocol.h: 467: timsXcorte = (float)tiXcorte * 1000;
 23857  001E50  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 23858  001E54  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 23859  001E58  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 23860  001E5C  0E00               	movlw	0
 23861  001E5E  0100               	movlb	0	; () banked
 23862  001E60  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 23863  001E62  0E7A               	movlw	122
 23864  001E64  0100               	movlb	0	; () banked
 23865  001E66  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 23866  001E68  0E44               	movlw	68
 23867  001E6A  0100               	movlb	0	; () banked
 23868  001E6C  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 23869  001E6E  ECCE  F01D         	call	i1___ftmul	;wreg free
 23870  001E72  C068  F053         	movff	?i1___ftmul,_timsXcorte
 23871  001E76  C069  F054         	movff	?i1___ftmul+1,_timsXcorte+1
 23872  001E7A  C06A  F055         	movff	?i1___ftmul+2,_timsXcorte+2
 23873                           
 23874                           ;DisplayProtocol.h: 468: calibLevel = 2;
 23875  001E7E  0E02               	movlw	2
 23876  001E80  0101               	movlb	1	; () banked
 23877  001E82  6FB8               	movwf	_calibLevel& (0+255),b
 23878                           
 23879                           ; BSR set to: 1
 23880                           ;DisplayProtocol.h: 469: numCortes = 1;
 23881  001E84  0E00               	movlw	0
 23882  001E86  0100               	movlb	0	; () banked
 23883  001E88  6FD3               	movwf	(_numCortes+1)& (0+255),b
 23884  001E8A  0E01               	movlw	1
 23885  001E8C  6FD2               	movwf	_numCortes& (0+255),b
 23886                           
 23887                           ; BSR set to: 0
 23888                           ;DisplayProtocol.h: 470: processState = 0;
 23889  001E8E  0E00               	movlw	0
 23890  001E90  0100               	movlb	0	; () banked
 23891  001E92  6FB3               	movwf	(_processState+1)& (0+255),b
 23892  001E94  0E00               	movlw	0
 23893  001E96  6FB2               	movwf	_processState& (0+255),b
 23894                           
 23895                           ; BSR set to: 0
 23896                           ;DisplayProtocol.h: 471: processTimer = 0;
 23897  001E98  0E00               	movlw	0
 23898  001E9A  6E3B               	movwf	_processTimer,c
 23899  001E9C  0E00               	movlw	0
 23900  001E9E  6E3C               	movwf	_processTimer+1,c
 23901  001EA0  0E00               	movlw	0
 23902  001EA2  6E3D               	movwf	_processTimer+2,c
 23903  001EA4  0E00               	movlw	0
 23904  001EA6  6E3E               	movwf	_processTimer+3,c
 23905                           
 23906                           ; BSR set to: 0
 23907                           ;DisplayProtocol.h: 473: actualScreen = tempLastScreen;
 23908  001EA8  C0BC  F1BD         	movff	_tempLastScreen,_actualScreen
 23909                           
 23910                           ; BSR set to: 0
 23911                           ;DisplayProtocol.h: 474: chanValf = (float)0.25f;
 23912  001EAC  0E00               	movlw	0
 23913  001EAE  0101               	movlb	1	; () banked
 23914  001EB0  6FB1               	movwf	_chanValf& (0+255),b
 23915  001EB2  0E80               	movlw	128
 23916  001EB4  0101               	movlb	1	; () banked
 23917  001EB6  6FB2               	movwf	(_chanValf+1)& (0+255),b
 23918  001EB8  0E3E               	movlw	62
 23919  001EBA  0101               	movlb	1	; () banked
 23920  001EBC  6FB3               	movwf	(_chanValf+2)& (0+255),b
 23921                           
 23922                           ; BSR set to: 1
 23923                           ;DisplayProtocol.h: 475: desintegrator();
 23924  001EBE  ECB9  F01A         	call	i1_desintegrator	;wreg free
 23925                           
 23926                           ;DisplayProtocol.h: 476: LATCbits.LATC4 = 1;
 23927  001EC2  888B               	bsf	3979,4,c	;volatile
 23928                           
 23929                           ;DisplayProtocol.h: 477: processStarted = 1;
 23930  001EC4  0E01               	movlw	1
 23931  001EC6  0100               	movlb	0	; () banked
 23932  001EC8  6FC0               	movwf	_processStarted& (0+255),b
 23933                           
 23934                           ;DisplayProtocol.h: 478: }else if(calibLevel == 2) {
 23935  001ECA  0012               	return	
 23936  001ECC                     i1l8806:
 23937  001ECC  0E02               	movlw	2
 23938  001ECE  0101               	movlb	1	; () banked
 23939  001ED0  19B8               	xorwf	_calibLevel& (0+255),w,b
 23940  001ED2  A4D8               	btfss	status,2,c
 23941  001ED4  0012               	return	
 23942                           
 23943                           ; BSR set to: 1
 23944                           ;DisplayProtocol.h: 479: tempVelocidadMasa3 = (float)chanValf / tiXcorte;
 23945  001ED6  C1B1  F072         	movff	_chanValf,i1___ftdiv@f1
 23946  001EDA  C1B2  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23947  001EDE  C1B3  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23948  001EE2  C195  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23949  001EE6  C196  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23950  001EEA  C197  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23951  001EEE  EC23  F01F         	call	i1___ftdiv	;wreg free
 23952  001EF2  C072  F192         	movff	?i1___ftdiv,_tempVelocidadMasa3
 23953  001EF6  C073  F193         	movff	?i1___ftdiv+1,_tempVelocidadMasa3+1
 23954  001EFA  C074  F194         	movff	?i1___ftdiv+2,_tempVelocidadMasa3+2
 23955                           
 23956                           ;DisplayProtocol.h: 480: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 23957  001EFE  C19D  F06B         	movff	_tempVelocidadMasa2,i1___ftadd@f2
 23958  001F02  C19E  F06C         	movff	_tempVelocidadMasa2+1,i1___ftadd@f2+1
 23959  001F06  C19F  F06D         	movff	_tempVelocidadMasa2+2,i1___ftadd@f2+2
 23960  001F0A  C1A0  F068         	movff	_tempVelocidadMasa1,i1___ftadd@f1
 23961  001F0E  C1A1  F069         	movff	_tempVelocidadMasa1+1,i1___ftadd@f1+1
 23962  001F12  C1A2  F06A         	movff	_tempVelocidadMasa1+2,i1___ftadd@f1+2
 23963  001F16  EC20  F015         	call	i1___ftadd	;wreg free
 23964  001F1A  C068  F090         	movff	?i1___ftadd,i1_longPressENTER$3047
 23965  001F1E  C069  F091         	movff	?i1___ftadd+1,i1_longPressENTER$3047+1
 23966  001F22  C06A  F092         	movff	?i1___ftadd+2,i1_longPressENTER$3047+2
 23967                           
 23968                           ;DisplayProtocol.h: 480: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 23969  001F26  C090  F068         	movff	i1_longPressENTER$3047,i1___ftadd@f1
 23970  001F2A  C091  F069         	movff	i1_longPressENTER$3047+1,i1___ftadd@f1+1
 23971  001F2E  C092  F06A         	movff	i1_longPressENTER$3047+2,i1___ftadd@f1+2
 23972  001F32  C192  F06B         	movff	_tempVelocidadMasa3,i1___ftadd@f2
 23973  001F36  C193  F06C         	movff	_tempVelocidadMasa3+1,i1___ftadd@f2+1
 23974  001F3A  C194  F06D         	movff	_tempVelocidadMasa3+2,i1___ftadd@f2+2
 23975  001F3E  EC20  F015         	call	i1___ftadd	;wreg free
 23976  001F42  C068  F08D         	movff	?i1___ftadd,i1longPressENTER@temp
 23977  001F46  C069  F08E         	movff	?i1___ftadd+1,i1longPressENTER@temp+1
 23978  001F4A  C06A  F08F         	movff	?i1___ftadd+2,i1longPressENTER@temp+2
 23979                           
 23980                           ;DisplayProtocol.h: 481: chanValf = (float)temp / 3.0f;
 23981  001F4E  C08D  F072         	movff	i1longPressENTER@temp,i1___ftdiv@f1
 23982  001F52  C08E  F073         	movff	i1longPressENTER@temp+1,i1___ftdiv@f1+1
 23983  001F56  C08F  F074         	movff	i1longPressENTER@temp+2,i1___ftdiv@f1+2
 23984  001F5A  0E00               	movlw	0
 23985  001F5C  0100               	movlb	0	; () banked
 23986  001F5E  6F75               	movwf	i1___ftdiv@f2& (0+255),b
 23987  001F60  0E40               	movlw	64
 23988  001F62  0100               	movlb	0	; () banked
 23989  001F64  6F76               	movwf	(i1___ftdiv@f2+1)& (0+255),b
 23990  001F66  0E40               	movlw	64
 23991  001F68  0100               	movlb	0	; () banked
 23992  001F6A  6F77               	movwf	(i1___ftdiv@f2+2)& (0+255),b
 23993  001F6C  EC23  F01F         	call	i1___ftdiv	;wreg free
 23994  001F70  C072  F1B1         	movff	?i1___ftdiv,_chanValf
 23995  001F74  C073  F1B2         	movff	?i1___ftdiv+1,_chanValf+1
 23996  001F78  C074  F1B3         	movff	?i1___ftdiv+2,_chanValf+2
 23997                           
 23998                           ;DisplayProtocol.h: 482: numCortes = tempNumCortes;
 23999  001F7C  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 24000  001F80  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 24001                           
 24002                           ;DisplayProtocol.h: 483: calcVars2ti();
 24003  001F84  EC2D  F036         	call	i1_calcVars2ti	;wreg free
 24004                           
 24005                           ;DisplayProtocol.h: 484: calibMode = 0;
 24006  001F88  0E00               	movlw	0
 24007  001F8A  0100               	movlb	0	; () banked
 24008  001F8C  6FBE               	movwf	_calibMode& (0+255),b
 24009                           
 24010                           ; BSR set to: 0
 24011                           ;DisplayProtocol.h: 485: confirmEdition(!processStarted);
 24012  001F8E  0100               	movlb	0	; () banked
 24013  001F90  51C0               	movf	_processStarted& (0+255),w,b
 24014  001F92  A4D8               	btfss	status,2,c
 24015  001F94  D002               	goto	i1u1259_20
 24016  001F96  0E01               	movlw	1
 24017  001F98  D001               	goto	i1u1260_20
 24018  001F9A                     i1u1259_20:
 24019  001F9A  0E00               	movlw	0
 24020  001F9C                     i1u1260_20:
 24021  001F9C  EC43  F02D         	call	i1_confirmEdition
 24022  001FA0  0012               	return	
 24023  001FA2                     __end_ofi1_longPressENTER:
 24024                           	opt stack 0
 24025                           pclatu	equ	0xFFB
 24026                           pclath	equ	0xFFA
 24027                           tblptru	equ	0xFF8
 24028                           tblptrh	equ	0xFF7
 24029                           tblptrl	equ	0xFF6
 24030                           tablat	equ	0xFF5
 24031                           prodh	equ	0xFF4
 24032                           prodl	equ	0xFF3
 24033                           intcon	equ	0xFF2
 24034                           postinc0	equ	0xFEE
 24035                           fsr0h	equ	0xFEA
 24036                           fsr0l	equ	0xFE9
 24037                           wreg	equ	0xFE8
 24038                           postdec1	equ	0xFE5
 24039                           fsr1h	equ	0xFE2
 24040                           fsr1l	equ	0xFE1
 24041                           bsr	equ	0xFE0
 24042                           indf2	equ	0xFDF
 24043                           postinc2	equ	0xFDE
 24044                           postdec2	equ	0xFDD
 24045                           plusw2	equ	0xFDB
 24046                           fsr2h	equ	0xFDA
 24047                           fsr2l	equ	0xFD9
 24048                           status	equ	0xFD8
 24049                           
 24050 ;; *************** function i1_integrator *****************
 24051 ;; Defined at:
 24052 ;;		line 61 in file "source/DisplayProtocol.h"
 24053 ;; Parameters:    Size  Location     Type
 24054 ;;		None
 24055 ;; Auto vars:     Size  Location     Type
 24056 ;;  integrator      4   39[BANK0 ] long 
 24057 ;;  integrator      4   35[BANK0 ] long 
 24058 ;;  integrator      2   43[BANK0 ] int 
 24059 ;; Return value:  Size  Location     Type
 24060 ;;                  1    wreg      void 
 24061 ;; Registers used:
 24062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24063 ;; Tracked objects:
 24064 ;;		On entry : 0/0
 24065 ;;		On exit  : 0/0
 24066 ;;		Unchanged: 0/0
 24067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24068 ;;      Params:         0       0       0       0       0       0       0
 24069 ;;      Locals:         0      10       0       0       0       0       0
 24070 ;;      Temps:          0       2       0       0       0       0       0
 24071 ;;      Totals:         0      12       0       0       0       0       0
 24072 ;;Total ram usage:       12 bytes
 24073 ;; Hardware stack levels used:    1
 24074 ;; Hardware stack levels required when called:    6
 24075 ;; This function calls:
 24076 ;;		i1___altoft
 24077 ;;		i1___ftdiv
 24078 ;;		i1___lmul
 24079 ;; This function is called by:
 24080 ;;		i1_longPressENTER
 24081 ;; This function uses a non-reentrant model
 24082 ;;
 24083                           
 24084                           	psect	text99
 24085  00433C                     __ptext99:
 24086                           	opt stack 0
 24087  00433C                     i1_integrator:
 24088                           	opt stack 11
 24089                           
 24090                           ;DisplayProtocol.h: 62: long acum = 0;
 24091                           
 24092                           ;incstack = 0
 24093  00433C  0E00               	movlw	0
 24094  00433E  0100               	movlb	0	; () banked
 24095  004340  6F83               	movwf	i1integrator@acum& (0+255),b
 24096  004342  0E00               	movlw	0
 24097  004344  6F84               	movwf	(i1integrator@acum+1)& (0+255),b
 24098  004346  0E00               	movlw	0
 24099  004348  6F85               	movwf	(i1integrator@acum+2)& (0+255),b
 24100  00434A  0E00               	movlw	0
 24101  00434C  6F86               	movwf	(i1integrator@acum+3)& (0+255),b
 24102                           
 24103                           ;DisplayProtocol.h: 63: long temp = 0;
 24104  00434E  0E00               	movlw	0
 24105  004350  0100               	movlb	0	; () banked
 24106  004352  6F87               	movwf	i1integrator@temp& (0+255),b
 24107  004354  0E00               	movlw	0
 24108  004356  6F88               	movwf	(i1integrator@temp+1)& (0+255),b
 24109  004358  0E00               	movlw	0
 24110  00435A  6F89               	movwf	(i1integrator@temp+2)& (0+255),b
 24111  00435C  0E00               	movlw	0
 24112  00435E  6F8A               	movwf	(i1integrator@temp+3)& (0+255),b
 24113                           
 24114                           ;DisplayProtocol.h: 64: int i;
 24115                           ;DisplayProtocol.h: 65: for(i = 0; i < 6; i++) {
 24116  004360  0E00               	movlw	0
 24117  004362  0100               	movlb	0	; () banked
 24118  004364  6F8C               	movwf	(i1integrator@i+1)& (0+255),b
 24119  004366  0E00               	movlw	0
 24120  004368  6F8B               	movwf	i1integrator@i& (0+255),b
 24121  00436A                     i1l7412:
 24122                           
 24123                           ; BSR set to: 0
 24124  00436A  0100               	movlb	0	; () banked
 24125  00436C  BF8C               	btfsc	(i1integrator@i+1)& (0+255),7,b
 24126  00436E  D008               	goto	i1l7416
 24127  004370  0100               	movlb	0	; () banked
 24128  004372  518C               	movf	(i1integrator@i+1)& (0+255),w,b
 24129  004374  E152               	bnz	i1l7424
 24130  004376  0E06               	movlw	6
 24131  004378  0100               	movlb	0	; () banked
 24132  00437A  5D8B               	subwf	i1integrator@i& (0+255),w,b
 24133  00437C  B0D8               	btfsc	status,0,c
 24134  00437E  D04D               	goto	i1l7424
 24135  004380                     i1l7416:
 24136                           
 24137                           ; BSR set to: 0
 24138                           ;DisplayProtocol.h: 66: temp = (long)chanValdig[i]*exp10[i];
 24139  004380  0EA3               	movlw	low _chanValdig
 24140  004382  0100               	movlb	0	; () banked
 24141  004384  258B               	addwf	i1integrator@i& (0+255),w,b
 24142  004386  6ED9               	movwf	fsr2l,c
 24143  004388  0E01               	movlw	high _chanValdig
 24144  00438A  0100               	movlb	0	; () banked
 24145  00438C  218C               	addwfc	(i1integrator@i+1)& (0+255),w,b
 24146  00438E  6EDA               	movwf	fsr2h,c
 24147  004390  50DF               	movf	indf2,w,c
 24148  004392  0100               	movlb	0	; () banked
 24149  004394  6F60               	movwf	i1___lmul@multiplier& (0+255),b
 24150  004396  0E00               	movlw	0
 24151  004398  BF60               	btfsc	i1___lmul@multiplier& (0+255),7,b
 24152  00439A  0EFF               	movlw	-1
 24153  00439C  6F61               	movwf	(i1___lmul@multiplier+1)& (0+255),b
 24154  00439E  6F62               	movwf	(i1___lmul@multiplier+2)& (0+255),b
 24155  0043A0  6F63               	movwf	(i1___lmul@multiplier+3)& (0+255),b
 24156  0043A2  0E77               	movlw	low _exp10
 24157  0043A4  0100               	movlb	0	; () banked
 24158  0043A6  6F81               	movwf	??i1_integrator& (0+255),b
 24159  0043A8  0E01               	movlw	high _exp10
 24160  0043AA  0100               	movlb	0	; () banked
 24161  0043AC  6F82               	movwf	(??i1_integrator+1)& (0+255),b
 24162  0043AE  90D8               	bcf	status,0,c
 24163  0043B0  0100               	movlb	0	; () banked
 24164  0043B2  358B               	rlcf	i1integrator@i& (0+255),w,b
 24165  0043B4  6ED9               	movwf	fsr2l,c
 24166  0043B6  0100               	movlb	0	; () banked
 24167  0043B8  358C               	rlcf	(i1integrator@i+1)& (0+255),w,b
 24168  0043BA  6EDA               	movwf	fsr2h,c
 24169  0043BC  90D8               	bcf	status,0,c
 24170  0043BE  36D9               	rlcf	fsr2l,f,c
 24171  0043C0  36DA               	rlcf	fsr2h,f,c
 24172  0043C2  0100               	movlb	0	; () banked
 24173  0043C4  5181               	movf	??i1_integrator& (0+255),w,b
 24174  0043C6  26D9               	addwf	fsr2l,f,c
 24175  0043C8  0100               	movlb	0	; () banked
 24176  0043CA  5182               	movf	(??i1_integrator+1)& (0+255),w,b
 24177  0043CC  22DA               	addwfc	fsr2h,f,c
 24178  0043CE  CFDE F064          	movff	postinc2,i1___lmul@multiplicand
 24179  0043D2  CFDE F065          	movff	postinc2,i1___lmul@multiplicand+1
 24180  0043D6  CFDE F066          	movff	postinc2,i1___lmul@multiplicand+2
 24181  0043DA  CFDE F067          	movff	postinc2,i1___lmul@multiplicand+3
 24182  0043DE  EC7D  F034         	call	i1___lmul	;wreg free
 24183  0043E2  C060  F087         	movff	?i1___lmul,i1integrator@temp
 24184  0043E6  C061  F088         	movff	?i1___lmul+1,i1integrator@temp+1
 24185  0043EA  C062  F089         	movff	?i1___lmul+2,i1integrator@temp+2
 24186  0043EE  C063  F08A         	movff	?i1___lmul+3,i1integrator@temp+3
 24187                           
 24188                           ;DisplayProtocol.h: 67: acum += temp;
 24189  0043F2  0100               	movlb	0	; () banked
 24190  0043F4  5187               	movf	i1integrator@temp& (0+255),w,b
 24191  0043F6  0100               	movlb	0	; () banked
 24192  0043F8  2783               	addwf	i1integrator@acum& (0+255),f,b
 24193  0043FA  0100               	movlb	0	; () banked
 24194  0043FC  5188               	movf	(i1integrator@temp+1)& (0+255),w,b
 24195  0043FE  0100               	movlb	0	; () banked
 24196  004400  2384               	addwfc	(i1integrator@acum+1)& (0+255),f,b
 24197  004402  0100               	movlb	0	; () banked
 24198  004404  5189               	movf	(i1integrator@temp+2)& (0+255),w,b
 24199  004406  0100               	movlb	0	; () banked
 24200  004408  2385               	addwfc	(i1integrator@acum+2)& (0+255),f,b
 24201  00440A  0100               	movlb	0	; () banked
 24202  00440C  518A               	movf	(i1integrator@temp+3)& (0+255),w,b
 24203  00440E  0100               	movlb	0	; () banked
 24204  004410  2386               	addwfc	(i1integrator@acum+3)& (0+255),f,b
 24205                           
 24206                           ; BSR set to: 0
 24207  004412  0100               	movlb	0	; () banked
 24208  004414  4B8B               	infsnz	i1integrator@i& (0+255),f,b
 24209  004416  2B8C               	incf	(i1integrator@i+1)& (0+255),f,b
 24210  004418  D7A8               	goto	i1l7412
 24211  00441A                     i1l7424:
 24212                           
 24213                           ; BSR set to: 0
 24214                           ;DisplayProtocol.h: 68: }
 24215                           ;DisplayProtocol.h: 69: chanValf = (float)acum / 1000;
 24216  00441A  C083  F068         	movff	i1integrator@acum,i1___altoft@c
 24217  00441E  C084  F069         	movff	i1integrator@acum+1,i1___altoft@c+1
 24218  004422  C085  F06A         	movff	i1integrator@acum+2,i1___altoft@c+2
 24219  004426  C086  F06B         	movff	i1integrator@acum+3,i1___altoft@c+3
 24220  00442A  ECE8  F02E         	call	i1___altoft	;wreg free
 24221  00442E  C068  F072         	movff	?i1___altoft,i1___ftdiv@f1
 24222  004432  C069  F073         	movff	?i1___altoft+1,i1___ftdiv@f1+1
 24223  004436  C06A  F074         	movff	?i1___altoft+2,i1___ftdiv@f1+2
 24224  00443A  0E00               	movlw	0
 24225  00443C  0100               	movlb	0	; () banked
 24226  00443E  6F75               	movwf	i1___ftdiv@f2& (0+255),b
 24227  004440  0E7A               	movlw	122
 24228  004442  0100               	movlb	0	; () banked
 24229  004444  6F76               	movwf	(i1___ftdiv@f2+1)& (0+255),b
 24230  004446  0E44               	movlw	68
 24231  004448  0100               	movlb	0	; () banked
 24232  00444A  6F77               	movwf	(i1___ftdiv@f2+2)& (0+255),b
 24233  00444C  EC23  F01F         	call	i1___ftdiv	;wreg free
 24234  004450  C072  F1B1         	movff	?i1___ftdiv,_chanValf
 24235  004454  C073  F1B2         	movff	?i1___ftdiv+1,_chanValf+1
 24236  004458  C074  F1B3         	movff	?i1___ftdiv+2,_chanValf+2
 24237  00445C  0012               	return		;funcret
 24238  00445E                     __end_ofi1_integrator:
 24239                           	opt stack 0
 24240                           pclatu	equ	0xFFB
 24241                           pclath	equ	0xFFA
 24242                           tblptru	equ	0xFF8
 24243                           tblptrh	equ	0xFF7
 24244                           tblptrl	equ	0xFF6
 24245                           tablat	equ	0xFF5
 24246                           prodh	equ	0xFF4
 24247                           prodl	equ	0xFF3
 24248                           intcon	equ	0xFF2
 24249                           postinc0	equ	0xFEE
 24250                           fsr0h	equ	0xFEA
 24251                           fsr0l	equ	0xFE9
 24252                           wreg	equ	0xFE8
 24253                           postdec1	equ	0xFE5
 24254                           fsr1h	equ	0xFE2
 24255                           fsr1l	equ	0xFE1
 24256                           bsr	equ	0xFE0
 24257                           indf2	equ	0xFDF
 24258                           postinc2	equ	0xFDE
 24259                           postdec2	equ	0xFDD
 24260                           plusw2	equ	0xFDB
 24261                           fsr2h	equ	0xFDA
 24262                           fsr2l	equ	0xFD9
 24263                           status	equ	0xFD8
 24264                           
 24265 ;; *************** function i1___altoft *****************
 24266 ;; Defined at:
 24267 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\altoft.c"
 24268 ;; Parameters:    Size  Location     Type
 24269 ;;  c               4    8[BANK0 ] long 
 24270 ;; Auto vars:     Size  Location     Type
 24271 ;;  __altoft        1   17[BANK0 ] unsigned char 
 24272 ;;  __altoft        1   16[BANK0 ] unsigned char 
 24273 ;; Return value:  Size  Location     Type
 24274 ;;                  3    8[BANK0 ] float 
 24275 ;; Registers used:
 24276 ;;		wreg, status,2, status,0, cstack
 24277 ;; Tracked objects:
 24278 ;;		On entry : 0/0
 24279 ;;		On exit  : 0/0
 24280 ;;		Unchanged: 0/0
 24281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24282 ;;      Params:         0       4       0       0       0       0       0
 24283 ;;      Locals:         0       2       0       0       0       0       0
 24284 ;;      Temps:          0       4       0       0       0       0       0
 24285 ;;      Totals:         0      10       0       0       0       0       0
 24286 ;;Total ram usage:       10 bytes
 24287 ;; Hardware stack levels used:    1
 24288 ;; Hardware stack levels required when called:    5
 24289 ;; This function calls:
 24290 ;;		i1___ftpack
 24291 ;; This function is called by:
 24292 ;;		i1_integrator
 24293 ;; This function uses a non-reentrant model
 24294 ;;
 24295                           
 24296                           	psect	text100
 24297  005DD0                     __ptext100:
 24298                           	opt stack 0
 24299  005DD0                     i1___altoft:
 24300                           	opt stack 11
 24301                           
 24302                           ;incstack = 0
 24303  005DD0  0E00               	movlw	0
 24304  005DD2  0100               	movlb	0	; () banked
 24305  005DD4  6F71               	movwf	i1___altoft@sign& (0+255),b
 24306  005DD6  0E8E               	movlw	142
 24307  005DD8  0100               	movlb	0	; () banked
 24308  005DDA  6F70               	movwf	i1___altoft@exp& (0+255),b
 24309                           
 24310                           ; BSR set to: 0
 24311  005DDC  0100               	movlb	0	; () banked
 24312  005DDE  AF6B               	btfss	(i1___altoft@c+3)& (0+255),7,b
 24313  005DE0  D015               	goto	i1l7114
 24314                           
 24315                           ; BSR set to: 0
 24316  005DE2  0100               	movlb	0	; () banked
 24317  005DE4  1F6B               	comf	(i1___altoft@c+3)& (0+255),f,b
 24318  005DE6  1F6A               	comf	(i1___altoft@c+2)& (0+255),f,b
 24319  005DE8  1F69               	comf	(i1___altoft@c+1)& (0+255),f,b
 24320  005DEA  6D68               	negf	i1___altoft@c& (0+255),b
 24321  005DEC  0E00               	movlw	0
 24322  005DEE  2369               	addwfc	(i1___altoft@c+1)& (0+255),f,b
 24323  005DF0  236A               	addwfc	(i1___altoft@c+2)& (0+255),f,b
 24324  005DF2  236B               	addwfc	(i1___altoft@c+3)& (0+255),f,b
 24325                           
 24326                           ; BSR set to: 0
 24327  005DF4  0E01               	movlw	1
 24328  005DF6  0100               	movlb	0	; () banked
 24329  005DF8  6F71               	movwf	i1___altoft@sign& (0+255),b
 24330                           
 24331                           ; BSR set to: 0
 24332  005DFA  D008               	goto	i1l7114
 24333  005DFC                     i1l7112:
 24334                           
 24335                           ; BSR set to: 0
 24336  005DFC  0100               	movlb	0	; () banked
 24337  005DFE  90D8               	bcf	status,0,c
 24338  005E00  336B               	rrcf	(i1___altoft@c+3)& (0+255),f,b
 24339  005E02  336A               	rrcf	(i1___altoft@c+2)& (0+255),f,b
 24340  005E04  3369               	rrcf	(i1___altoft@c+1)& (0+255),f,b
 24341  005E06  3368               	rrcf	i1___altoft@c& (0+255),f,b
 24342  005E08  0100               	movlb	0	; () banked
 24343  005E0A  2B70               	incf	i1___altoft@exp& (0+255),f,b
 24344  005E0C                     i1l7114:
 24345                           
 24346                           ; BSR set to: 0
 24347  005E0C  0E00               	movlw	0
 24348  005E0E  0100               	movlb	0	; () banked
 24349  005E10  1568               	andwf	i1___altoft@c& (0+255),w,b
 24350  005E12  0100               	movlb	0	; () banked
 24351  005E14  6F6C               	movwf	??i1___altoft& (0+255),b
 24352  005E16  0E00               	movlw	0
 24353  005E18  0100               	movlb	0	; () banked
 24354  005E1A  1569               	andwf	(i1___altoft@c+1)& (0+255),w,b
 24355  005E1C  0100               	movlb	0	; () banked
 24356  005E1E  6F6D               	movwf	(??i1___altoft+1)& (0+255),b
 24357  005E20  0E00               	movlw	0
 24358  005E22  0100               	movlb	0	; () banked
 24359  005E24  156A               	andwf	(i1___altoft@c+2)& (0+255),w,b
 24360  005E26  0100               	movlb	0	; () banked
 24361  005E28  6F6E               	movwf	(??i1___altoft+2)& (0+255),b
 24362  005E2A  0EFF               	movlw	255
 24363  005E2C  0100               	movlb	0	; () banked
 24364  005E2E  156B               	andwf	(i1___altoft@c+3)& (0+255),w,b
 24365  005E30  0100               	movlb	0	; () banked
 24366  005E32  6F6F               	movwf	(??i1___altoft+3)& (0+255),b
 24367  005E34  0100               	movlb	0	; () banked
 24368  005E36  516C               	movf	??i1___altoft& (0+255),w,b
 24369  005E38  0100               	movlb	0	; () banked
 24370  005E3A  116D               	iorwf	(??i1___altoft+1)& (0+255),w,b
 24371  005E3C  0100               	movlb	0	; () banked
 24372  005E3E  116E               	iorwf	(??i1___altoft+2)& (0+255),w,b
 24373  005E40  0100               	movlb	0	; () banked
 24374  005E42  116F               	iorwf	(??i1___altoft+3)& (0+255),w,b
 24375  005E44  A4D8               	btfss	status,2,c
 24376  005E46  D7DA               	goto	i1l7112
 24377                           
 24378                           ; BSR set to: 0
 24379                           
 24380                           ; BSR set to: 0
 24381  005E48  C068  F060         	movff	i1___altoft@c,i1___ftpack@arg
 24382  005E4C  C069  F061         	movff	i1___altoft@c+1,i1___ftpack@arg+1
 24383  005E50  C06A  F062         	movff	i1___altoft@c+2,i1___ftpack@arg+2
 24384  005E54  C070  F063         	movff	i1___altoft@exp,i1___ftpack@exp
 24385  005E58  C071  F064         	movff	i1___altoft@sign,i1___ftpack@sign
 24386  005E5C  ECEF  F025         	call	i1___ftpack	;wreg free
 24387  005E60  C060  F068         	movff	?i1___ftpack,?i1___altoft
 24388  005E64  C061  F069         	movff	?i1___ftpack+1,?i1___altoft+1
 24389  005E68  C062  F06A         	movff	?i1___ftpack+2,?i1___altoft+2
 24390  005E6C  0012               	return	
 24391  005E6E                     __end_ofi1___altoft:
 24392                           	opt stack 0
 24393                           pclatu	equ	0xFFB
 24394                           pclath	equ	0xFFA
 24395                           tblptru	equ	0xFF8
 24396                           tblptrh	equ	0xFF7
 24397                           tblptrl	equ	0xFF6
 24398                           tablat	equ	0xFF5
 24399                           prodh	equ	0xFF4
 24400                           prodl	equ	0xFF3
 24401                           intcon	equ	0xFF2
 24402                           postinc0	equ	0xFEE
 24403                           fsr0h	equ	0xFEA
 24404                           fsr0l	equ	0xFE9
 24405                           wreg	equ	0xFE8
 24406                           postdec1	equ	0xFE5
 24407                           fsr1h	equ	0xFE2
 24408                           fsr1l	equ	0xFE1
 24409                           bsr	equ	0xFE0
 24410                           indf2	equ	0xFDF
 24411                           postinc2	equ	0xFDE
 24412                           postdec2	equ	0xFDD
 24413                           plusw2	equ	0xFDB
 24414                           fsr2h	equ	0xFDA
 24415                           fsr2l	equ	0xFD9
 24416                           status	equ	0xFD8
 24417                           
 24418 ;; *************** function i1_desintegrator *****************
 24419 ;; Defined at:
 24420 ;;		line 46 in file "source/DisplayProtocol.h"
 24421 ;; Parameters:    Size  Location     Type
 24422 ;;		None
 24423 ;; Auto vars:     Size  Location     Type
 24424 ;;  desintegrato    4   36[BANK0 ] long 
 24425 ;;  desintegrato    4   32[BANK0 ] long 
 24426 ;;  desintegrato    4   28[BANK0 ] long 
 24427 ;;  desintegrato    3   25[BANK0 ] float 
 24428 ;;  desintegrato    2   40[BANK0 ] int 
 24429 ;; Return value:  Size  Location     Type
 24430 ;;                  1    wreg      void 
 24431 ;; Registers used:
 24432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24433 ;; Tracked objects:
 24434 ;;		On entry : 0/0
 24435 ;;		On exit  : 0/0
 24436 ;;		Unchanged: 0/0
 24437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24438 ;;      Params:         0       0       0       0       0       0       0
 24439 ;;      Locals:         0      17       0       0       0       0       0
 24440 ;;      Temps:          0       2       0       0       0       0       0
 24441 ;;      Totals:         0      19       0       0       0       0       0
 24442 ;;Total ram usage:       19 bytes
 24443 ;; Hardware stack levels used:    1
 24444 ;; Hardware stack levels required when called:    6
 24445 ;; This function calls:
 24446 ;;		i1___aldiv
 24447 ;;		i1___ftmul
 24448 ;;		i1___fttol
 24449 ;;		i1___lmul
 24450 ;; This function is called by:
 24451 ;;		i1_pressENTER
 24452 ;;		i1_longPressENTER
 24453 ;; This function uses a non-reentrant model
 24454 ;;
 24455                           
 24456                           	psect	text101
 24457  003572                     __ptext101:
 24458                           	opt stack 0
 24459  003572                     i1_desintegrator:
 24460                           	opt stack 11
 24461                           
 24462                           ;DisplayProtocol.h: 47: chanValSection = 5;
 24463                           
 24464                           ;incstack = 0
 24465  003572  0E05               	movlw	5
 24466  003574  0101               	movlb	1	; () banked
 24467  003576  6F9C               	movwf	_chanValSection& (0+255),b
 24468                           
 24469                           ; BSR set to: 1
 24470                           ;DisplayProtocol.h: 48: float temp = (float)chanValf*1000;
 24471  003578  C1B1  F068         	movff	_chanValf,i1___ftmul@f1
 24472  00357C  C1B2  F069         	movff	_chanValf+1,i1___ftmul@f1+1
 24473  003580  C1B3  F06A         	movff	_chanValf+2,i1___ftmul@f1+2
 24474  003584  0E00               	movlw	0
 24475  003586  0100               	movlb	0	; () banked
 24476  003588  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 24477  00358A  0E7A               	movlw	122
 24478  00358C  0100               	movlb	0	; () banked
 24479  00358E  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 24480  003590  0E44               	movlw	68
 24481  003592  0100               	movlb	0	; () banked
 24482  003594  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 24483  003596  ECCE  F01D         	call	i1___ftmul	;wreg free
 24484  00359A  C068  F079         	movff	?i1___ftmul,i1desintegrator@temp
 24485  00359E  C069  F07A         	movff	?i1___ftmul+1,i1desintegrator@temp+1
 24486  0035A2  C06A  F07B         	movff	?i1___ftmul+2,i1desintegrator@temp+2
 24487                           
 24488                           ;DisplayProtocol.h: 49: long tempL = (long)temp;
 24489  0035A6  C079  F060         	movff	i1desintegrator@temp,i1___fttol@f1
 24490  0035AA  C07A  F061         	movff	i1desintegrator@temp+1,i1___fttol@f1+1
 24491  0035AE  C07B  F062         	movff	i1desintegrator@temp+2,i1___fttol@f1+2
 24492  0035B2  EC6B  F020         	call	i1___fttol	;wreg free
 24493  0035B6  C060  F07C         	movff	?i1___fttol,i1desintegrator@tempL
 24494  0035BA  C061  F07D         	movff	?i1___fttol+1,i1desintegrator@tempL+1
 24495  0035BE  C062  F07E         	movff	?i1___fttol+2,i1desintegrator@tempL+2
 24496  0035C2  C063  F07F         	movff	?i1___fttol+3,i1desintegrator@tempL+3
 24497                           
 24498                           ;DisplayProtocol.h: 50: long temp2 = 0;
 24499  0035C6  0E00               	movlw	0
 24500  0035C8  0100               	movlb	0	; () banked
 24501  0035CA  6F84               	movwf	i1desintegrator@temp2& (0+255),b
 24502  0035CC  0E00               	movlw	0
 24503  0035CE  6F85               	movwf	(i1desintegrator@temp2+1)& (0+255),b
 24504  0035D0  0E00               	movlw	0
 24505  0035D2  6F86               	movwf	(i1desintegrator@temp2+2)& (0+255),b
 24506  0035D4  0E00               	movlw	0
 24507  0035D6  6F87               	movwf	(i1desintegrator@temp2+3)& (0+255),b
 24508                           
 24509                           ;DisplayProtocol.h: 51: long temp3 = 0;
 24510  0035D8  0E00               	movlw	0
 24511  0035DA  0100               	movlb	0	; () banked
 24512  0035DC  6F80               	movwf	i1desintegrator@temp3& (0+255),b
 24513  0035DE  0E00               	movlw	0
 24514  0035E0  6F81               	movwf	(i1desintegrator@temp3+1)& (0+255),b
 24515  0035E2  0E00               	movlw	0
 24516  0035E4  6F82               	movwf	(i1desintegrator@temp3+2)& (0+255),b
 24517  0035E6  0E00               	movlw	0
 24518  0035E8  6F83               	movwf	(i1desintegrator@temp3+3)& (0+255),b
 24519                           
 24520                           ;DisplayProtocol.h: 52: int i;
 24521                           ;DisplayProtocol.h: 53: for(i = 0; i < 6; i++) {
 24522  0035EA  0E00               	movlw	0
 24523  0035EC  0100               	movlb	0	; () banked
 24524  0035EE  6F89               	movwf	(i1desintegrator@i+1)& (0+255),b
 24525  0035F0  0E00               	movlw	0
 24526  0035F2  6F88               	movwf	i1desintegrator@i& (0+255),b
 24527                           
 24528                           ; BSR set to: 0
 24529  0035F4  0100               	movlb	0	; () banked
 24530  0035F6  BF89               	btfsc	(i1desintegrator@i+1)& (0+255),7,b
 24531  0035F8  D00A               	goto	i1l7400
 24532  0035FA  0100               	movlb	0	; () banked
 24533  0035FC  5189               	movf	(i1desintegrator@i+1)& (0+255),w,b
 24534  0035FE  E106               	bnz	i1u966_20
 24535  003600  0E06               	movlw	6
 24536  003602  0100               	movlb	0	; () banked
 24537  003604  5D88               	subwf	i1desintegrator@i& (0+255),w,b
 24538  003606  B0D8               	btfsc	status,0,c
 24539  003608  0012               	return	
 24540  00360A  D001               	goto	i1l7400
 24541  00360C                     i1u966_20:
 24542                           
 24543                           ; BSR set to: 0
 24544  00360C  0012               	return	
 24545  00360E                     i1l7400:
 24546                           
 24547                           ; BSR set to: 0
 24548                           ;DisplayProtocol.h: 54: temp2 = tempL/exp10[i];
 24549  00360E  C07C  F060         	movff	i1desintegrator@tempL,i1___aldiv@dividend
 24550  003612  C07D  F061         	movff	i1desintegrator@tempL+1,i1___aldiv@dividend+1
 24551  003616  C07E  F062         	movff	i1desintegrator@tempL+2,i1___aldiv@dividend+2
 24552  00361A  C07F  F063         	movff	i1desintegrator@tempL+3,i1___aldiv@dividend+3
 24553  00361E  0E77               	movlw	low _exp10
 24554  003620  0100               	movlb	0	; () banked
 24555  003622  6F77               	movwf	??i1_desintegrator& (0+255),b
 24556  003624  0E01               	movlw	high _exp10
 24557  003626  0100               	movlb	0	; () banked
 24558  003628  6F78               	movwf	(??i1_desintegrator+1)& (0+255),b
 24559  00362A  90D8               	bcf	status,0,c
 24560  00362C  0100               	movlb	0	; () banked
 24561  00362E  3588               	rlcf	i1desintegrator@i& (0+255),w,b
 24562  003630  6ED9               	movwf	fsr2l,c
 24563  003632  0100               	movlb	0	; () banked
 24564  003634  3589               	rlcf	(i1desintegrator@i+1)& (0+255),w,b
 24565  003636  6EDA               	movwf	fsr2h,c
 24566  003638  90D8               	bcf	status,0,c
 24567  00363A  36D9               	rlcf	fsr2l,f,c
 24568  00363C  36DA               	rlcf	fsr2h,f,c
 24569  00363E  0100               	movlb	0	; () banked
 24570  003640  5177               	movf	??i1_desintegrator& (0+255),w,b
 24571  003642  26D9               	addwf	fsr2l,f,c
 24572  003644  0100               	movlb	0	; () banked
 24573  003646  5178               	movf	(??i1_desintegrator+1)& (0+255),w,b
 24574  003648  22DA               	addwfc	fsr2h,f,c
 24575  00364A  CFDE F064          	movff	postinc2,i1___aldiv@divisor
 24576  00364E  CFDE F065          	movff	postinc2,i1___aldiv@divisor+1
 24577  003652  CFDE F066          	movff	postinc2,i1___aldiv@divisor+2
 24578  003656  CFDE F067          	movff	postinc2,i1___aldiv@divisor+3
 24579  00365A  ECBC  F022         	call	i1___aldiv	;wreg free
 24580  00365E  C060  F084         	movff	?i1___aldiv,i1desintegrator@temp2
 24581  003662  C061  F085         	movff	?i1___aldiv+1,i1desintegrator@temp2+1
 24582  003666  C062  F086         	movff	?i1___aldiv+2,i1desintegrator@temp2+2
 24583  00366A  C063  F087         	movff	?i1___aldiv+3,i1desintegrator@temp2+3
 24584                           
 24585                           ;DisplayProtocol.h: 55: temp3 = temp2*exp10[i];
 24586  00366E  0E77               	movlw	low _exp10
 24587  003670  0100               	movlb	0	; () banked
 24588  003672  6F77               	movwf	??i1_desintegrator& (0+255),b
 24589  003674  0E01               	movlw	high _exp10
 24590  003676  0100               	movlb	0	; () banked
 24591  003678  6F78               	movwf	(??i1_desintegrator+1)& (0+255),b
 24592  00367A  90D8               	bcf	status,0,c
 24593  00367C  0100               	movlb	0	; () banked
 24594  00367E  3588               	rlcf	i1desintegrator@i& (0+255),w,b
 24595  003680  6ED9               	movwf	fsr2l,c
 24596  003682  0100               	movlb	0	; () banked
 24597  003684  3589               	rlcf	(i1desintegrator@i+1)& (0+255),w,b
 24598  003686  6EDA               	movwf	fsr2h,c
 24599  003688  90D8               	bcf	status,0,c
 24600  00368A  36D9               	rlcf	fsr2l,f,c
 24601  00368C  36DA               	rlcf	fsr2h,f,c
 24602  00368E  0100               	movlb	0	; () banked
 24603  003690  5177               	movf	??i1_desintegrator& (0+255),w,b
 24604  003692  26D9               	addwf	fsr2l,f,c
 24605  003694  0100               	movlb	0	; () banked
 24606  003696  5178               	movf	(??i1_desintegrator+1)& (0+255),w,b
 24607  003698  22DA               	addwfc	fsr2h,f,c
 24608  00369A  CFDE F060          	movff	postinc2,i1___lmul@multiplier
 24609  00369E  CFDE F061          	movff	postinc2,i1___lmul@multiplier+1
 24610  0036A2  CFDE F062          	movff	postinc2,i1___lmul@multiplier+2
 24611  0036A6  CFDE F063          	movff	postinc2,i1___lmul@multiplier+3
 24612  0036AA  C084  F064         	movff	i1desintegrator@temp2,i1___lmul@multiplicand
 24613  0036AE  C085  F065         	movff	i1desintegrator@temp2+1,i1___lmul@multiplicand+1
 24614  0036B2  C086  F066         	movff	i1desintegrator@temp2+2,i1___lmul@multiplicand+2
 24615  0036B6  C087  F067         	movff	i1desintegrator@temp2+3,i1___lmul@multiplicand+3
 24616  0036BA  EC7D  F034         	call	i1___lmul	;wreg free
 24617  0036BE  C060  F080         	movff	?i1___lmul,i1desintegrator@temp3
 24618  0036C2  C061  F081         	movff	?i1___lmul+1,i1desintegrator@temp3+1
 24619  0036C6  C062  F082         	movff	?i1___lmul+2,i1desintegrator@temp3+2
 24620  0036CA  C063  F083         	movff	?i1___lmul+3,i1desintegrator@temp3+3
 24621                           
 24622                           ;DisplayProtocol.h: 56: chanValdig[i] = temp2;
 24623  0036CE  0EA3               	movlw	low _chanValdig
 24624  0036D0  0100               	movlb	0	; () banked
 24625  0036D2  2588               	addwf	i1desintegrator@i& (0+255),w,b
 24626  0036D4  6ED9               	movwf	fsr2l,c
 24627  0036D6  0E01               	movlw	high _chanValdig
 24628  0036D8  0100               	movlb	0	; () banked
 24629  0036DA  2189               	addwfc	(i1desintegrator@i+1)& (0+255),w,b
 24630  0036DC  6EDA               	movwf	fsr2h,c
 24631  0036DE  C084  FFDF         	movff	i1desintegrator@temp2,indf2
 24632                           
 24633                           ; BSR set to: 0
 24634                           ;DisplayProtocol.h: 57: tempL -= temp3;
 24635  0036E2  0100               	movlb	0	; () banked
 24636  0036E4  5180               	movf	i1desintegrator@temp3& (0+255),w,b
 24637  0036E6  0100               	movlb	0	; () banked
 24638  0036E8  5F7C               	subwf	i1desintegrator@tempL& (0+255),f,b
 24639  0036EA  0100               	movlb	0	; () banked
 24640  0036EC  5181               	movf	(i1desintegrator@temp3+1)& (0+255),w,b
 24641  0036EE  0100               	movlb	0	; () banked
 24642  0036F0  5B7D               	subwfb	(i1desintegrator@tempL+1)& (0+255),f,b
 24643  0036F2  0100               	movlb	0	; () banked
 24644  0036F4  5182               	movf	(i1desintegrator@temp3+2)& (0+255),w,b
 24645  0036F6  0100               	movlb	0	; () banked
 24646  0036F8  5B7E               	subwfb	(i1desintegrator@tempL+2)& (0+255),f,b
 24647  0036FA  0100               	movlb	0	; () banked
 24648  0036FC  5183               	movf	(i1desintegrator@temp3+3)& (0+255),w,b
 24649  0036FE  0100               	movlb	0	; () banked
 24650  003700  5B7F               	subwfb	(i1desintegrator@tempL+3)& (0+255),f,b
 24651                           
 24652                           ; BSR set to: 0
 24653  003702  0100               	movlb	0	; () banked
 24654  003704  4B88               	infsnz	i1desintegrator@i& (0+255),f,b
 24655  003706  2B89               	incf	(i1desintegrator@i+1)& (0+255),f,b
 24656                           
 24657                           ; BSR set to: 0
 24658  003708  0100               	movlb	0	; () banked
 24659  00370A  BF89               	btfsc	(i1desintegrator@i+1)& (0+255),7,b
 24660  00370C  D780               	goto	i1l7400
 24661  00370E  0100               	movlb	0	; () banked
 24662  003710  5189               	movf	(i1desintegrator@i+1)& (0+255),w,b
 24663  003712  E101               	bnz	i1l559
 24664  003714  D775               	goto	L8
 24665  003716                     i1l559:
 24666                           
 24667                           ; BSR set to: 0
 24668  003716  0012               	return		;funcret
 24669  003718                     __end_ofi1_desintegrator:
 24670                           	opt stack 0
 24671                           pclatu	equ	0xFFB
 24672                           pclath	equ	0xFFA
 24673                           tblptru	equ	0xFF8
 24674                           tblptrh	equ	0xFF7
 24675                           tblptrl	equ	0xFF6
 24676                           tablat	equ	0xFF5
 24677                           prodh	equ	0xFF4
 24678                           prodl	equ	0xFF3
 24679                           intcon	equ	0xFF2
 24680                           postinc0	equ	0xFEE
 24681                           fsr0h	equ	0xFEA
 24682                           fsr0l	equ	0xFE9
 24683                           wreg	equ	0xFE8
 24684                           postdec1	equ	0xFE5
 24685                           fsr1h	equ	0xFE2
 24686                           fsr1l	equ	0xFE1
 24687                           bsr	equ	0xFE0
 24688                           indf2	equ	0xFDF
 24689                           postinc2	equ	0xFDE
 24690                           postdec2	equ	0xFDD
 24691                           plusw2	equ	0xFDB
 24692                           fsr2h	equ	0xFDA
 24693                           fsr2l	equ	0xFD9
 24694                           status	equ	0xFD8
 24695                           
 24696 ;; *************** function i1___lmul *****************
 24697 ;; Defined at:
 24698 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
 24699 ;; Parameters:    Size  Location     Type
 24700 ;;  multiplier      4    0[BANK0 ] unsigned long 
 24701 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 24702 ;; Auto vars:     Size  Location     Type
 24703 ;;  __lmul          4    8[BANK0 ] unsigned long 
 24704 ;; Return value:  Size  Location     Type
 24705 ;;                  4    0[BANK0 ] unsigned long 
 24706 ;; Registers used:
 24707 ;;		wreg, status,2, status,0
 24708 ;; Tracked objects:
 24709 ;;		On entry : 0/0
 24710 ;;		On exit  : 0/0
 24711 ;;		Unchanged: 0/0
 24712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24713 ;;      Params:         0       8       0       0       0       0       0
 24714 ;;      Locals:         0       4       0       0       0       0       0
 24715 ;;      Temps:          0       0       0       0       0       0       0
 24716 ;;      Totals:         0      12       0       0       0       0       0
 24717 ;;Total ram usage:       12 bytes
 24718 ;; Hardware stack levels used:    1
 24719 ;; Hardware stack levels required when called:    4
 24720 ;; This function calls:
 24721 ;;		Nothing
 24722 ;; This function is called by:
 24723 ;;		i1_desintegrator
 24724 ;;		i1_integrator
 24725 ;; This function uses a non-reentrant model
 24726 ;;
 24727                           
 24728                           	psect	text102
 24729  0068FA                     __ptext102:
 24730                           	opt stack 0
 24731  0068FA                     i1___lmul:
 24732                           	opt stack 12
 24733                           
 24734                           ; BSR set to: 0
 24735                           ;incstack = 0
 24736  0068FA  0E00               	movlw	0
 24737  0068FC  0100               	movlb	0	; () banked
 24738  0068FE  6F68               	movwf	i1___lmul@product& (0+255),b
 24739  006900  0E00               	movlw	0
 24740  006902  6F69               	movwf	(i1___lmul@product+1)& (0+255),b
 24741  006904  0E00               	movlw	0
 24742  006906  6F6A               	movwf	(i1___lmul@product+2)& (0+255),b
 24743  006908  0E00               	movlw	0
 24744  00690A  6F6B               	movwf	(i1___lmul@product+3)& (0+255),b
 24745  00690C                     i1l7052:
 24746                           
 24747                           ; BSR set to: 0
 24748  00690C  0100               	movlb	0	; () banked
 24749  00690E  A160               	btfss	i1___lmul@multiplier& (0+255),0,b
 24750  006910  D010               	goto	i1l7056
 24751                           
 24752                           ; BSR set to: 0
 24753  006912  0100               	movlb	0	; () banked
 24754  006914  5164               	movf	i1___lmul@multiplicand& (0+255),w,b
 24755  006916  0100               	movlb	0	; () banked
 24756  006918  2768               	addwf	i1___lmul@product& (0+255),f,b
 24757  00691A  0100               	movlb	0	; () banked
 24758  00691C  5165               	movf	(i1___lmul@multiplicand+1)& (0+255),w,b
 24759  00691E  0100               	movlb	0	; () banked
 24760  006920  2369               	addwfc	(i1___lmul@product+1)& (0+255),f,b
 24761  006922  0100               	movlb	0	; () banked
 24762  006924  5166               	movf	(i1___lmul@multiplicand+2)& (0+255),w,b
 24763  006926  0100               	movlb	0	; () banked
 24764  006928  236A               	addwfc	(i1___lmul@product+2)& (0+255),f,b
 24765  00692A  0100               	movlb	0	; () banked
 24766  00692C  5167               	movf	(i1___lmul@multiplicand+3)& (0+255),w,b
 24767  00692E  0100               	movlb	0	; () banked
 24768  006930  236B               	addwfc	(i1___lmul@product+3)& (0+255),f,b
 24769  006932                     i1l7056:
 24770                           
 24771                           ; BSR set to: 0
 24772  006932  0100               	movlb	0	; () banked
 24773  006934  90D8               	bcf	status,0,c
 24774  006936  3764               	rlcf	i1___lmul@multiplicand& (0+255),f,b
 24775  006938  3765               	rlcf	(i1___lmul@multiplicand+1)& (0+255),f,b
 24776  00693A  3766               	rlcf	(i1___lmul@multiplicand+2)& (0+255),f,b
 24777  00693C  3767               	rlcf	(i1___lmul@multiplicand+3)& (0+255),f,b
 24778                           
 24779                           ; BSR set to: 0
 24780  00693E  0100               	movlb	0	; () banked
 24781  006940  90D8               	bcf	status,0,c
 24782  006942  3363               	rrcf	(i1___lmul@multiplier+3)& (0+255),f,b
 24783  006944  3362               	rrcf	(i1___lmul@multiplier+2)& (0+255),f,b
 24784  006946  3361               	rrcf	(i1___lmul@multiplier+1)& (0+255),f,b
 24785  006948  3360               	rrcf	i1___lmul@multiplier& (0+255),f,b
 24786  00694A  0100               	movlb	0	; () banked
 24787  00694C  5160               	movf	i1___lmul@multiplier& (0+255),w,b
 24788  00694E  0100               	movlb	0	; () banked
 24789  006950  1161               	iorwf	(i1___lmul@multiplier+1)& (0+255),w,b
 24790  006952  0100               	movlb	0	; () banked
 24791  006954  1162               	iorwf	(i1___lmul@multiplier+2)& (0+255),w,b
 24792  006956  0100               	movlb	0	; () banked
 24793  006958  1163               	iorwf	(i1___lmul@multiplier+3)& (0+255),w,b
 24794  00695A  A4D8               	btfss	status,2,c
 24795  00695C  D7D7               	goto	i1l7052
 24796                           
 24797                           ; BSR set to: 0
 24798  00695E  C068  F060         	movff	i1___lmul@product,?i1___lmul
 24799  006962  C069  F061         	movff	i1___lmul@product+1,?i1___lmul+1
 24800  006966  C06A  F062         	movff	i1___lmul@product+2,?i1___lmul+2
 24801  00696A  C06B  F063         	movff	i1___lmul@product+3,?i1___lmul+3
 24802                           
 24803                           ; BSR set to: 0
 24804  00696E  0012               	return		;funcret
 24805  006970                     __end_ofi1___lmul:
 24806                           	opt stack 0
 24807                           pclatu	equ	0xFFB
 24808                           pclath	equ	0xFFA
 24809                           tblptru	equ	0xFF8
 24810                           tblptrh	equ	0xFF7
 24811                           tblptrl	equ	0xFF6
 24812                           tablat	equ	0xFF5
 24813                           prodh	equ	0xFF4
 24814                           prodl	equ	0xFF3
 24815                           intcon	equ	0xFF2
 24816                           postinc0	equ	0xFEE
 24817                           fsr0h	equ	0xFEA
 24818                           fsr0l	equ	0xFE9
 24819                           wreg	equ	0xFE8
 24820                           postdec1	equ	0xFE5
 24821                           fsr1h	equ	0xFE2
 24822                           fsr1l	equ	0xFE1
 24823                           bsr	equ	0xFE0
 24824                           indf2	equ	0xFDF
 24825                           postinc2	equ	0xFDE
 24826                           postdec2	equ	0xFDD
 24827                           plusw2	equ	0xFDB
 24828                           fsr2h	equ	0xFDA
 24829                           fsr2l	equ	0xFD9
 24830                           status	equ	0xFD8
 24831                           
 24832 ;; *************** function i1___fttol *****************
 24833 ;; Defined at:
 24834 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
 24835 ;; Parameters:    Size  Location     Type
 24836 ;;  f1              3    0[BANK0 ] float 
 24837 ;; Auto vars:     Size  Location     Type
 24838 ;;  __fttol         4   10[BANK0 ] unsigned long 
 24839 ;;  __fttol         1   14[BANK0 ] unsigned char 
 24840 ;;  __fttol         1    9[BANK0 ] unsigned char 
 24841 ;; Return value:  Size  Location     Type
 24842 ;;                  4    0[BANK0 ] long 
 24843 ;; Registers used:
 24844 ;;		wreg, status,2, status,0
 24845 ;; Tracked objects:
 24846 ;;		On entry : 0/0
 24847 ;;		On exit  : 0/0
 24848 ;;		Unchanged: 0/0
 24849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24850 ;;      Params:         0       4       0       0       0       0       0
 24851 ;;      Locals:         0       6       0       0       0       0       0
 24852 ;;      Temps:          0       5       0       0       0       0       0
 24853 ;;      Totals:         0      15       0       0       0       0       0
 24854 ;;Total ram usage:       15 bytes
 24855 ;; Hardware stack levels used:    1
 24856 ;; Hardware stack levels required when called:    4
 24857 ;; This function calls:
 24858 ;;		Nothing
 24859 ;; This function is called by:
 24860 ;;		i1_desintegrator
 24861 ;; This function uses a non-reentrant model
 24862 ;;
 24863                           
 24864                           	psect	text103
 24865  0040D6                     __ptext103:
 24866                           	opt stack 0
 24867  0040D6                     i1___fttol:
 24868                           	opt stack 12
 24869                           
 24870                           ; BSR set to: 0
 24871                           ;incstack = 0
 24872  0040D6  C062  F064         	movff	i1___fttol@f1+2,??i1___fttol
 24873  0040DA  0100               	movlb	0	; () banked
 24874  0040DC  6B65               	clrf	(??i1___fttol+1)& (0+255),b
 24875  0040DE  6B66               	clrf	(??i1___fttol+2)& (0+255),b
 24876  0040E0  0100               	movlb	0	; () banked
 24877  0040E2  3561               	rlcf	(i1___fttol@f1+1)& (0+255),w,b
 24878  0040E4  0100               	movlb	0	; () banked
 24879  0040E6  3764               	rlcf	??i1___fttol& (0+255),f,b
 24880  0040E8  E301               	bnc	u920_21
 24881  0040EA  8165               	bsf	(??i1___fttol+1)& (0+255),0,b
 24882  0040EC                     u920_21:
 24883  0040EC  0100               	movlb	0	; () banked
 24884  0040EE  5164               	movf	??i1___fttol& (0+255),w,b
 24885  0040F0  0100               	movlb	0	; () banked
 24886  0040F2  6F6E               	movwf	i1___fttol@exp1& (0+255),b
 24887  0040F4  0100               	movlb	0	; () banked
 24888  0040F6  516E               	movf	i1___fttol@exp1& (0+255),w,b
 24889  0040F8  A4D8               	btfss	status,2,c
 24890  0040FA  D00A               	goto	i1l7126
 24891                           
 24892                           ; BSR set to: 0
 24893  0040FC  0E00               	movlw	0
 24894  0040FE  0100               	movlb	0	; () banked
 24895  004100  6F60               	movwf	?i1___fttol& (0+255),b
 24896  004102  0E00               	movlw	0
 24897  004104  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 24898  004106  0E00               	movlw	0
 24899  004108  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 24900  00410A  0E00               	movlw	0
 24901  00410C  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 24902                           
 24903                           ; BSR set to: 0
 24904  00410E  0012               	return	
 24905  004110                     i1l7126:
 24906                           
 24907                           ; BSR set to: 0
 24908  004110  0E17               	movlw	23
 24909  004112  0100               	movlb	0	; () banked
 24910  004114  6F64               	movwf	??i1___fttol& (0+255),b
 24911  004116  C060  F065         	movff	i1___fttol@f1,??i1___fttol+1
 24912  00411A  C061  F066         	movff	i1___fttol@f1+1,??i1___fttol+2
 24913  00411E  C062  F067         	movff	i1___fttol@f1+2,??i1___fttol+3
 24914  004122  0100               	movlb	0	; () banked
 24915  004124  2964               	incf	??i1___fttol& (0+255),w,b
 24916  004126  0100               	movlb	0	; () banked
 24917  004128  6F68               	movwf	(??i1___fttol+4)& (0+255),b
 24918  00412A  D005               	goto	i1u922_20
 24919  00412C                     i1u922_25:
 24920  00412C  0100               	movlb	0	; () banked
 24921  00412E  90D8               	bcf	status,0,c
 24922  004130  3367               	rrcf	(??i1___fttol+3)& (0+255),f,b
 24923  004132  3366               	rrcf	(??i1___fttol+2)& (0+255),f,b
 24924  004134  3365               	rrcf	(??i1___fttol+1)& (0+255),f,b
 24925  004136                     i1u922_20:
 24926  004136  0100               	movlb	0	; () banked
 24927  004138  2F68               	decfsz	(??i1___fttol+4)& (0+255),f,b
 24928  00413A  D7F8               	goto	i1u922_25
 24929  00413C  0100               	movlb	0	; () banked
 24930  00413E  5165               	movf	(??i1___fttol+1)& (0+255),w,b
 24931  004140  0100               	movlb	0	; () banked
 24932  004142  6F69               	movwf	i1___fttol@sign1& (0+255),b
 24933                           
 24934                           ; BSR set to: 0
 24935  004144  0100               	movlb	0	; () banked
 24936  004146  8F61               	bsf	(i1___fttol@f1+1)& (0+255),7,b
 24937                           
 24938                           ; BSR set to: 0
 24939  004148  0EFF               	movlw	255
 24940  00414A  0100               	movlb	0	; () banked
 24941  00414C  1760               	andwf	i1___fttol@f1& (0+255),f,b
 24942  00414E  0EFF               	movlw	255
 24943  004150  0100               	movlb	0	; () banked
 24944  004152  1761               	andwf	(i1___fttol@f1+1)& (0+255),f,b
 24945  004154  0E00               	movlw	0
 24946  004156  0100               	movlb	0	; () banked
 24947  004158  1762               	andwf	(i1___fttol@f1+2)& (0+255),f,b
 24948                           
 24949                           ; BSR set to: 0
 24950  00415A  0100               	movlb	0	; () banked
 24951  00415C  5160               	movf	i1___fttol@f1& (0+255),w,b
 24952  00415E  0100               	movlb	0	; () banked
 24953  004160  6F6A               	movwf	i1___fttol@lval& (0+255),b
 24954  004162  0100               	movlb	0	; () banked
 24955  004164  5161               	movf	(i1___fttol@f1+1)& (0+255),w,b
 24956  004166  0100               	movlb	0	; () banked
 24957  004168  6F6B               	movwf	(i1___fttol@lval+1)& (0+255),b
 24958  00416A  0100               	movlb	0	; () banked
 24959  00416C  5162               	movf	(i1___fttol@f1+2)& (0+255),w,b
 24960  00416E  0100               	movlb	0	; () banked
 24961  004170  6F6C               	movwf	(i1___fttol@lval+2)& (0+255),b
 24962  004172  0100               	movlb	0	; () banked
 24963  004174  6B6D               	clrf	(i1___fttol@lval+3)& (0+255),b
 24964                           
 24965                           ; BSR set to: 0
 24966  004176  0E8E               	movlw	142
 24967  004178  0100               	movlb	0	; () banked
 24968  00417A  5F6E               	subwf	i1___fttol@exp1& (0+255),f,b
 24969                           
 24970                           ; BSR set to: 0
 24971  00417C  0100               	movlb	0	; () banked
 24972  00417E  AF6E               	btfss	i1___fttol@exp1& (0+255),7,b
 24973  004180  D01A               	goto	i1l7148
 24974                           
 24975                           ; BSR set to: 0
 24976  004182  0100               	movlb	0	; () banked
 24977  004184  516E               	movf	i1___fttol@exp1& (0+255),w,b
 24978  004186  0A80               	xorlw	128
 24979  004188  0F8F               	addlw	143
 24980  00418A  B0D8               	btfsc	status,0,c
 24981  00418C  D00A               	goto	i1l7144
 24982                           
 24983                           ; BSR set to: 0
 24984  00418E  0E00               	movlw	0
 24985  004190  0100               	movlb	0	; () banked
 24986  004192  6F60               	movwf	?i1___fttol& (0+255),b
 24987  004194  0E00               	movlw	0
 24988  004196  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 24989  004198  0E00               	movlw	0
 24990  00419A  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 24991  00419C  0E00               	movlw	0
 24992  00419E  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 24993                           
 24994                           ; BSR set to: 0
 24995  0041A0  0012               	return	
 24996  0041A2                     i1l7144:
 24997                           
 24998                           ; BSR set to: 0
 24999  0041A2  0100               	movlb	0	; () banked
 25000  0041A4  90D8               	bcf	status,0,c
 25001  0041A6  336D               	rrcf	(i1___fttol@lval+3)& (0+255),f,b
 25002  0041A8  336C               	rrcf	(i1___fttol@lval+2)& (0+255),f,b
 25003  0041AA  336B               	rrcf	(i1___fttol@lval+1)& (0+255),f,b
 25004  0041AC  336A               	rrcf	i1___fttol@lval& (0+255),f,b
 25005                           
 25006                           ; BSR set to: 0
 25007  0041AE  0100               	movlb	0	; () banked
 25008  0041B0  3F6E               	incfsz	i1___fttol@exp1& (0+255),f,b
 25009  0041B2  D7F7               	goto	i1l7144
 25010                           
 25011                           ; BSR set to: 0
 25012  0041B4  D01B               	goto	i1l7158
 25013  0041B6                     i1l7148:
 25014                           
 25015                           ; BSR set to: 0
 25016  0041B6  0E17               	movlw	23
 25017  0041B8  0100               	movlb	0	; () banked
 25018  0041BA  656E               	cpfsgt	i1___fttol@exp1& (0+255),b
 25019  0041BC  D012               	goto	i1l7156
 25020                           
 25021                           ; BSR set to: 0
 25022  0041BE  0E00               	movlw	0
 25023  0041C0  0100               	movlb	0	; () banked
 25024  0041C2  6F60               	movwf	?i1___fttol& (0+255),b
 25025  0041C4  0E00               	movlw	0
 25026  0041C6  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 25027  0041C8  0E00               	movlw	0
 25028  0041CA  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 25029  0041CC  0E00               	movlw	0
 25030  0041CE  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 25031                           
 25032                           ; BSR set to: 0
 25033  0041D0  0012               	return	
 25034  0041D2                     i1l7154:
 25035                           
 25036                           ; BSR set to: 0
 25037  0041D2  0100               	movlb	0	; () banked
 25038  0041D4  90D8               	bcf	status,0,c
 25039  0041D6  376A               	rlcf	i1___fttol@lval& (0+255),f,b
 25040  0041D8  376B               	rlcf	(i1___fttol@lval+1)& (0+255),f,b
 25041  0041DA  376C               	rlcf	(i1___fttol@lval+2)& (0+255),f,b
 25042  0041DC  376D               	rlcf	(i1___fttol@lval+3)& (0+255),f,b
 25043  0041DE  0100               	movlb	0	; () banked
 25044  0041E0  076E               	decf	i1___fttol@exp1& (0+255),f,b
 25045  0041E2                     i1l7156:
 25046                           
 25047                           ; BSR set to: 0
 25048  0041E2  0100               	movlb	0	; () banked
 25049  0041E4  516E               	movf	i1___fttol@exp1& (0+255),w,b
 25050  0041E6  0100               	movlb	0	; () banked
 25051  0041E8  A4D8               	btfss	status,2,c
 25052  0041EA  D7F3               	goto	i1l7154
 25053  0041EC                     i1l7158:
 25054                           
 25055                           ; BSR set to: 0
 25056  0041EC  0100               	movlb	0	; () banked
 25057  0041EE  5169               	movf	i1___fttol@sign1& (0+255),w,b
 25058  0041F0  0100               	movlb	0	; () banked
 25059  0041F2  B4D8               	btfsc	status,2,c
 25060  0041F4  D009               	goto	i1l7162
 25061                           
 25062                           ; BSR set to: 0
 25063  0041F6  0100               	movlb	0	; () banked
 25064  0041F8  1F6D               	comf	(i1___fttol@lval+3)& (0+255),f,b
 25065  0041FA  1F6C               	comf	(i1___fttol@lval+2)& (0+255),f,b
 25066  0041FC  1F6B               	comf	(i1___fttol@lval+1)& (0+255),f,b
 25067  0041FE  6D6A               	negf	i1___fttol@lval& (0+255),b
 25068  004200  0E00               	movlw	0
 25069  004202  236B               	addwfc	(i1___fttol@lval+1)& (0+255),f,b
 25070  004204  236C               	addwfc	(i1___fttol@lval+2)& (0+255),f,b
 25071  004206  236D               	addwfc	(i1___fttol@lval+3)& (0+255),f,b
 25072  004208                     i1l7162:
 25073                           
 25074                           ; BSR set to: 0
 25075  004208  C06A  F060         	movff	i1___fttol@lval,?i1___fttol
 25076  00420C  C06B  F061         	movff	i1___fttol@lval+1,?i1___fttol+1
 25077  004210  C06C  F062         	movff	i1___fttol@lval+2,?i1___fttol+2
 25078  004214  C06D  F063         	movff	i1___fttol@lval+3,?i1___fttol+3
 25079  004218  0012               	return	
 25080  00421A                     __end_ofi1___fttol:
 25081                           	opt stack 0
 25082                           pclatu	equ	0xFFB
 25083                           pclath	equ	0xFFA
 25084                           tblptru	equ	0xFF8
 25085                           tblptrh	equ	0xFF7
 25086                           tblptrl	equ	0xFF6
 25087                           tablat	equ	0xFF5
 25088                           prodh	equ	0xFF4
 25089                           prodl	equ	0xFF3
 25090                           intcon	equ	0xFF2
 25091                           postinc0	equ	0xFEE
 25092                           fsr0h	equ	0xFEA
 25093                           fsr0l	equ	0xFE9
 25094                           wreg	equ	0xFE8
 25095                           postdec1	equ	0xFE5
 25096                           fsr1h	equ	0xFE2
 25097                           fsr1l	equ	0xFE1
 25098                           bsr	equ	0xFE0
 25099                           indf2	equ	0xFDF
 25100                           postinc2	equ	0xFDE
 25101                           postdec2	equ	0xFDD
 25102                           plusw2	equ	0xFDB
 25103                           fsr2h	equ	0xFDA
 25104                           fsr2l	equ	0xFD9
 25105                           status	equ	0xFD8
 25106                           
 25107 ;; *************** function i1___aldiv *****************
 25108 ;; Defined at:
 25109 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
 25110 ;; Parameters:    Size  Location     Type
 25111 ;;  dividend        4    0[BANK0 ] long 
 25112 ;;  divisor         4    4[BANK0 ] long 
 25113 ;; Auto vars:     Size  Location     Type
 25114 ;;  __aldiv         4   10[BANK0 ] long 
 25115 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 25116 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 25117 ;; Return value:  Size  Location     Type
 25118 ;;                  4    0[BANK0 ] long 
 25119 ;; Registers used:
 25120 ;;		wreg, status,2, status,0
 25121 ;; Tracked objects:
 25122 ;;		On entry : 0/0
 25123 ;;		On exit  : 0/0
 25124 ;;		Unchanged: 0/0
 25125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25126 ;;      Params:         0       8       0       0       0       0       0
 25127 ;;      Locals:         0       6       0       0       0       0       0
 25128 ;;      Temps:          0       0       0       0       0       0       0
 25129 ;;      Totals:         0      14       0       0       0       0       0
 25130 ;;Total ram usage:       14 bytes
 25131 ;; Hardware stack levels used:    1
 25132 ;; Hardware stack levels required when called:    4
 25133 ;; This function calls:
 25134 ;;		Nothing
 25135 ;; This function is called by:
 25136 ;;		i1_desintegrator
 25137 ;; This function uses a non-reentrant model
 25138 ;;
 25139                           
 25140                           	psect	text104
 25141  004578                     __ptext104:
 25142                           	opt stack 0
 25143  004578                     i1___aldiv:
 25144                           	opt stack 12
 25145                           
 25146                           ; BSR set to: 0
 25147                           ;incstack = 0
 25148  004578  0E00               	movlw	0
 25149  00457A  0100               	movlb	0	; () banked
 25150  00457C  6F69               	movwf	i1___aldiv@sign& (0+255),b
 25151                           
 25152                           ; BSR set to: 0
 25153  00457E  0100               	movlb	0	; () banked
 25154  004580  AF67               	btfss	(i1___aldiv@divisor+3)& (0+255),7,b
 25155  004582  D00C               	goto	i1l7068
 25156                           
 25157                           ; BSR set to: 0
 25158  004584  0100               	movlb	0	; () banked
 25159  004586  1F67               	comf	(i1___aldiv@divisor+3)& (0+255),f,b
 25160  004588  1F66               	comf	(i1___aldiv@divisor+2)& (0+255),f,b
 25161  00458A  1F65               	comf	(i1___aldiv@divisor+1)& (0+255),f,b
 25162  00458C  6D64               	negf	i1___aldiv@divisor& (0+255),b
 25163  00458E  0E00               	movlw	0
 25164  004590  2365               	addwfc	(i1___aldiv@divisor+1)& (0+255),f,b
 25165  004592  2366               	addwfc	(i1___aldiv@divisor+2)& (0+255),f,b
 25166  004594  2367               	addwfc	(i1___aldiv@divisor+3)& (0+255),f,b
 25167                           
 25168                           ; BSR set to: 0
 25169  004596  0E01               	movlw	1
 25170  004598  0100               	movlb	0	; () banked
 25171  00459A  6F69               	movwf	i1___aldiv@sign& (0+255),b
 25172  00459C                     i1l7068:
 25173                           
 25174                           ; BSR set to: 0
 25175  00459C  0100               	movlb	0	; () banked
 25176  00459E  AF63               	btfss	(i1___aldiv@dividend+3)& (0+255),7,b
 25177  0045A0  D00C               	goto	i1l7074
 25178                           
 25179                           ; BSR set to: 0
 25180  0045A2  0100               	movlb	0	; () banked
 25181  0045A4  1F63               	comf	(i1___aldiv@dividend+3)& (0+255),f,b
 25182  0045A6  1F62               	comf	(i1___aldiv@dividend+2)& (0+255),f,b
 25183  0045A8  1F61               	comf	(i1___aldiv@dividend+1)& (0+255),f,b
 25184  0045AA  6D60               	negf	i1___aldiv@dividend& (0+255),b
 25185  0045AC  0E00               	movlw	0
 25186  0045AE  2361               	addwfc	(i1___aldiv@dividend+1)& (0+255),f,b
 25187  0045B0  2362               	addwfc	(i1___aldiv@dividend+2)& (0+255),f,b
 25188  0045B2  2363               	addwfc	(i1___aldiv@dividend+3)& (0+255),f,b
 25189                           
 25190                           ; BSR set to: 0
 25191  0045B4  0E01               	movlw	1
 25192  0045B6  0100               	movlb	0	; () banked
 25193  0045B8  1B69               	xorwf	i1___aldiv@sign& (0+255),f,b
 25194  0045BA                     i1l7074:
 25195                           
 25196                           ; BSR set to: 0
 25197  0045BA  0E00               	movlw	0
 25198  0045BC  0100               	movlb	0	; () banked
 25199  0045BE  6F6A               	movwf	i1___aldiv@quotient& (0+255),b
 25200  0045C0  0E00               	movlw	0
 25201  0045C2  6F6B               	movwf	(i1___aldiv@quotient+1)& (0+255),b
 25202  0045C4  0E00               	movlw	0
 25203  0045C6  6F6C               	movwf	(i1___aldiv@quotient+2)& (0+255),b
 25204  0045C8  0E00               	movlw	0
 25205  0045CA  6F6D               	movwf	(i1___aldiv@quotient+3)& (0+255),b
 25206                           
 25207                           ; BSR set to: 0
 25208  0045CC  0100               	movlb	0	; () banked
 25209  0045CE  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 25210  0045D0  0100               	movlb	0	; () banked
 25211  0045D2  1165               	iorwf	(i1___aldiv@divisor+1)& (0+255),w,b
 25212  0045D4  0100               	movlb	0	; () banked
 25213  0045D6  1166               	iorwf	(i1___aldiv@divisor+2)& (0+255),w,b
 25214  0045D8  0100               	movlb	0	; () banked
 25215  0045DA  1167               	iorwf	(i1___aldiv@divisor+3)& (0+255),w,b
 25216  0045DC  B4D8               	btfsc	status,2,c
 25217  0045DE  D042               	goto	i1l7096
 25218                           
 25219                           ; BSR set to: 0
 25220  0045E0  0E01               	movlw	1
 25221  0045E2  0100               	movlb	0	; () banked
 25222  0045E4  6F68               	movwf	i1___aldiv@counter& (0+255),b
 25223  0045E6  D008               	goto	i1l7082
 25224  0045E8                     i1l7080:
 25225                           
 25226                           ; BSR set to: 0
 25227  0045E8  0100               	movlb	0	; () banked
 25228  0045EA  90D8               	bcf	status,0,c
 25229  0045EC  3764               	rlcf	i1___aldiv@divisor& (0+255),f,b
 25230  0045EE  3765               	rlcf	(i1___aldiv@divisor+1)& (0+255),f,b
 25231  0045F0  3766               	rlcf	(i1___aldiv@divisor+2)& (0+255),f,b
 25232  0045F2  3767               	rlcf	(i1___aldiv@divisor+3)& (0+255),f,b
 25233  0045F4  0100               	movlb	0	; () banked
 25234  0045F6  2B68               	incf	i1___aldiv@counter& (0+255),f,b
 25235  0045F8                     i1l7082:
 25236                           
 25237                           ; BSR set to: 0
 25238  0045F8  0100               	movlb	0	; () banked
 25239  0045FA  AF67               	btfss	(i1___aldiv@divisor+3)& (0+255),7,b
 25240  0045FC  D7F5               	goto	i1l7080
 25241  0045FE                     i1l7084:
 25242                           
 25243                           ; BSR set to: 0
 25244  0045FE  0100               	movlb	0	; () banked
 25245  004600  90D8               	bcf	status,0,c
 25246  004602  376A               	rlcf	i1___aldiv@quotient& (0+255),f,b
 25247  004604  376B               	rlcf	(i1___aldiv@quotient+1)& (0+255),f,b
 25248  004606  376C               	rlcf	(i1___aldiv@quotient+2)& (0+255),f,b
 25249  004608  376D               	rlcf	(i1___aldiv@quotient+3)& (0+255),f,b
 25250                           
 25251                           ; BSR set to: 0
 25252  00460A  0100               	movlb	0	; () banked
 25253  00460C  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 25254  00460E  0100               	movlb	0	; () banked
 25255  004610  5D60               	subwf	i1___aldiv@dividend& (0+255),w,b
 25256  004612  0100               	movlb	0	; () banked
 25257  004614  5165               	movf	(i1___aldiv@divisor+1)& (0+255),w,b
 25258  004616  0100               	movlb	0	; () banked
 25259  004618  5961               	subwfb	(i1___aldiv@dividend+1)& (0+255),w,b
 25260  00461A  0100               	movlb	0	; () banked
 25261  00461C  5166               	movf	(i1___aldiv@divisor+2)& (0+255),w,b
 25262  00461E  0100               	movlb	0	; () banked
 25263  004620  5962               	subwfb	(i1___aldiv@dividend+2)& (0+255),w,b
 25264  004622  0100               	movlb	0	; () banked
 25265  004624  5167               	movf	(i1___aldiv@divisor+3)& (0+255),w,b
 25266  004626  0100               	movlb	0	; () banked
 25267  004628  5963               	subwfb	(i1___aldiv@dividend+3)& (0+255),w,b
 25268  00462A  A0D8               	btfss	status,0,c
 25269  00462C  D012               	goto	i1l7092
 25270                           
 25271                           ; BSR set to: 0
 25272  00462E  0100               	movlb	0	; () banked
 25273  004630  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 25274  004632  0100               	movlb	0	; () banked
 25275  004634  5F60               	subwf	i1___aldiv@dividend& (0+255),f,b
 25276  004636  0100               	movlb	0	; () banked
 25277  004638  5165               	movf	(i1___aldiv@divisor+1)& (0+255),w,b
 25278  00463A  0100               	movlb	0	; () banked
 25279  00463C  5B61               	subwfb	(i1___aldiv@dividend+1)& (0+255),f,b
 25280  00463E  0100               	movlb	0	; () banked
 25281  004640  5166               	movf	(i1___aldiv@divisor+2)& (0+255),w,b
 25282  004642  0100               	movlb	0	; () banked
 25283  004644  5B62               	subwfb	(i1___aldiv@dividend+2)& (0+255),f,b
 25284  004646  0100               	movlb	0	; () banked
 25285  004648  5167               	movf	(i1___aldiv@divisor+3)& (0+255),w,b
 25286  00464A  0100               	movlb	0	; () banked
 25287  00464C  5B63               	subwfb	(i1___aldiv@dividend+3)& (0+255),f,b
 25288                           
 25289                           ; BSR set to: 0
 25290  00464E  0100               	movlb	0	; () banked
 25291  004650  816A               	bsf	i1___aldiv@quotient& (0+255),0,b
 25292  004652                     i1l7092:
 25293                           
 25294                           ; BSR set to: 0
 25295  004652  0100               	movlb	0	; () banked
 25296  004654  90D8               	bcf	status,0,c
 25297  004656  3367               	rrcf	(i1___aldiv@divisor+3)& (0+255),f,b
 25298  004658  3366               	rrcf	(i1___aldiv@divisor+2)& (0+255),f,b
 25299  00465A  3365               	rrcf	(i1___aldiv@divisor+1)& (0+255),f,b
 25300  00465C  3364               	rrcf	i1___aldiv@divisor& (0+255),f,b
 25301                           
 25302                           ; BSR set to: 0
 25303  00465E  0100               	movlb	0	; () banked
 25304  004660  2F68               	decfsz	i1___aldiv@counter& (0+255),f,b
 25305  004662  D7CD               	goto	i1l7084
 25306  004664                     i1l7096:
 25307                           
 25308                           ; BSR set to: 0
 25309  004664  0100               	movlb	0	; () banked
 25310  004666  5169               	movf	i1___aldiv@sign& (0+255),w,b
 25311  004668  0100               	movlb	0	; () banked
 25312  00466A  B4D8               	btfsc	status,2,c
 25313  00466C  D009               	goto	i1l7100
 25314                           
 25315                           ; BSR set to: 0
 25316  00466E  0100               	movlb	0	; () banked
 25317  004670  1F6D               	comf	(i1___aldiv@quotient+3)& (0+255),f,b
 25318  004672  1F6C               	comf	(i1___aldiv@quotient+2)& (0+255),f,b
 25319  004674  1F6B               	comf	(i1___aldiv@quotient+1)& (0+255),f,b
 25320  004676  6D6A               	negf	i1___aldiv@quotient& (0+255),b
 25321  004678  0E00               	movlw	0
 25322  00467A  236B               	addwfc	(i1___aldiv@quotient+1)& (0+255),f,b
 25323  00467C  236C               	addwfc	(i1___aldiv@quotient+2)& (0+255),f,b
 25324  00467E  236D               	addwfc	(i1___aldiv@quotient+3)& (0+255),f,b
 25325  004680                     i1l7100:
 25326                           
 25327                           ; BSR set to: 0
 25328  004680  C06A  F060         	movff	i1___aldiv@quotient,?i1___aldiv
 25329  004684  C06B  F061         	movff	i1___aldiv@quotient+1,?i1___aldiv+1
 25330  004688  C06C  F062         	movff	i1___aldiv@quotient+2,?i1___aldiv+2
 25331  00468C  C06D  F063         	movff	i1___aldiv@quotient+3,?i1___aldiv+3
 25332  004690  0012               	return	
 25333  004692                     __end_ofi1___aldiv:
 25334                           	opt stack 0
 25335                           pclatu	equ	0xFFB
 25336                           pclath	equ	0xFFA
 25337                           tblptru	equ	0xFF8
 25338                           tblptrh	equ	0xFF7
 25339                           tblptrl	equ	0xFF6
 25340                           tablat	equ	0xFF5
 25341                           prodh	equ	0xFF4
 25342                           prodl	equ	0xFF3
 25343                           intcon	equ	0xFF2
 25344                           postinc0	equ	0xFEE
 25345                           fsr0h	equ	0xFEA
 25346                           fsr0l	equ	0xFE9
 25347                           wreg	equ	0xFE8
 25348                           postdec1	equ	0xFE5
 25349                           fsr1h	equ	0xFE2
 25350                           fsr1l	equ	0xFE1
 25351                           bsr	equ	0xFE0
 25352                           indf2	equ	0xFDF
 25353                           postinc2	equ	0xFDE
 25354                           postdec2	equ	0xFDD
 25355                           plusw2	equ	0xFDB
 25356                           fsr2h	equ	0xFDA
 25357                           fsr2l	equ	0xFD9
 25358                           status	equ	0xFD8
 25359                           
 25360 ;; *************** function i1_confirmEdition *****************
 25361 ;; Defined at:
 25362 ;;		line 85 in file "source/DisplayProtocol.h"
 25363 ;; Parameters:    Size  Location     Type
 25364 ;;  yes             1    wreg     unsigned char 
 25365 ;; Auto vars:     Size  Location     Type
 25366 ;;  yes             1   33[BANK0 ] unsigned char 
 25367 ;; Return value:  Size  Location     Type
 25368 ;;                  1    wreg      void 
 25369 ;; Registers used:
 25370 ;;		wreg, status,2, status,0, cstack
 25371 ;; Tracked objects:
 25372 ;;		On entry : 0/0
 25373 ;;		On exit  : 0/0
 25374 ;;		Unchanged: 0/0
 25375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25376 ;;      Params:         0       0       0       0       0       0       0
 25377 ;;      Locals:         0       1       0       0       0       0       0
 25378 ;;      Temps:          0       0       0       0       0       0       0
 25379 ;;      Totals:         0       1       0       0       0       0       0
 25380 ;;Total ram usage:        1 bytes
 25381 ;; Hardware stack levels used:    1
 25382 ;; Hardware stack levels required when called:    8
 25383 ;; This function calls:
 25384 ;;		i1_saveSysParams
 25385 ;; This function is called by:
 25386 ;;		i1_pressENTER
 25387 ;;		i1_longPressENTER
 25388 ;; This function uses a non-reentrant model
 25389 ;;
 25390                           
 25391                           	psect	text105
 25392  005A86                     __ptext105:
 25393                           	opt stack 0
 25394  005A86                     i1_confirmEdition:
 25395                           	opt stack 9
 25396                           
 25397                           ; BSR set to: 0
 25398                           ;incstack = 0
 25399                           ;i1confirmEdition@yes stored from wreg
 25400  005A86  0100               	movlb	0	; () banked
 25401  005A88  6F81               	movwf	i1confirmEdition@yes& (0+255),b
 25402                           
 25403                           ;DisplayProtocol.h: 86: switch (menuSection) {
 25404  005A8A  D04C               	goto	i1l7460
 25405  005A8C                     i1l7428:
 25406                           
 25407                           ;DisplayProtocol.h: 90: if(yes) {
 25408  005A8C  0100               	movlb	0	; () banked
 25409  005A8E  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 25410  005A90  0100               	movlb	0	; () banked
 25411  005A92  B4D8               	btfsc	status,2,c
 25412  005A94  D00C               	goto	i1l576
 25413                           
 25414                           ; BSR set to: 0
 25415                           ;DisplayProtocol.h: 91: kgXcorte = chanValf;
 25416  005A96  C1B1  F198         	movff	_chanValf,_kgXcorte
 25417  005A9A  C1B2  F199         	movff	_chanValf+1,_kgXcorte+1
 25418  005A9E  C1B3  F19A         	movff	_chanValf+2,_kgXcorte+2
 25419                           
 25420                           ; BSR set to: 0
 25421                           ;DisplayProtocol.h: 92: actualScreen = 4;
 25422  005AA2  0E04               	movlw	4
 25423  005AA4  0101               	movlb	1	; () banked
 25424  005AA6  6FBD               	movwf	_actualScreen& (0+255),b
 25425                           
 25426                           ; BSR set to: 1
 25427                           ;DisplayProtocol.h: 93: saveSysParams();
 25428  005AA8  ECAA  F030         	call	i1_saveSysParams	;wreg free
 25429                           
 25430                           ;DisplayProtocol.h: 94: }else {
 25431  005AAC  0012               	return	
 25432  005AAE                     i1l576:
 25433                           
 25434                           ; BSR set to: 0
 25435                           ;DisplayProtocol.h: 95: tempLastScreen = actualScreen;
 25436  005AAE  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 25437                           
 25438                           ; BSR set to: 0
 25439                           ;DisplayProtocol.h: 96: selSN = 1;
 25440  005AB2  0E01               	movlw	1
 25441  005AB4  0101               	movlb	1	; () banked
 25442  005AB6  6FBA               	movwf	_selSN& (0+255),b
 25443                           
 25444                           ;DisplayProtocol.h: 97: actualScreen = 10;
 25445  005AB8  0E0A               	movlw	10
 25446  005ABA  0101               	movlb	1	; () banked
 25447  005ABC  6FBD               	movwf	_actualScreen& (0+255),b
 25448                           
 25449                           ; BSR set to: 1
 25450                           ;DisplayProtocol.h: 98: }
 25451                           ;DisplayProtocol.h: 99: break;
 25452  005ABE  0012               	return	
 25453  005AC0                     i1l7438:
 25454                           
 25455                           ; BSR set to: 1
 25456                           ;DisplayProtocol.h: 101: if(yes) {
 25457  005AC0  0100               	movlb	0	; () banked
 25458  005AC2  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 25459  005AC4  0100               	movlb	0	; () banked
 25460  005AC6  B4D8               	btfsc	status,2,c
 25461  005AC8  D00A               	goto	i1l579
 25462                           
 25463                           ; BSR set to: 0
 25464                           ;DisplayProtocol.h: 102: numCortes = chanVals;
 25465  005ACA  C1B6  F0D2         	movff	_chanVals,_numCortes
 25466  005ACE  C1B7  F0D3         	movff	_chanVals+1,_numCortes+1
 25467                           
 25468                           ; BSR set to: 0
 25469                           ;DisplayProtocol.h: 103: actualScreen = 4;
 25470  005AD2  0E04               	movlw	4
 25471  005AD4  0101               	movlb	1	; () banked
 25472  005AD6  6FBD               	movwf	_actualScreen& (0+255),b
 25473                           
 25474                           ; BSR set to: 1
 25475                           ;DisplayProtocol.h: 104: saveSysParams();
 25476  005AD8  ECAA  F030         	call	i1_saveSysParams	;wreg free
 25477                           
 25478                           ;DisplayProtocol.h: 105: }else {
 25479  005ADC  0012               	return	
 25480  005ADE                     i1l579:
 25481                           
 25482                           ; BSR set to: 0
 25483                           ;DisplayProtocol.h: 106: tempLastScreen = actualScreen;
 25484  005ADE  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 25485                           
 25486                           ; BSR set to: 0
 25487                           ;DisplayProtocol.h: 107: selSN = 1;
 25488  005AE2  0E01               	movlw	1
 25489  005AE4  0101               	movlb	1	; () banked
 25490  005AE6  6FBA               	movwf	_selSN& (0+255),b
 25491                           
 25492                           ;DisplayProtocol.h: 108: actualScreen = 10;
 25493  005AE8  0E0A               	movlw	10
 25494  005AEA  0101               	movlb	1	; () banked
 25495  005AEC  6FBD               	movwf	_actualScreen& (0+255),b
 25496                           
 25497                           ; BSR set to: 1
 25498                           ;DisplayProtocol.h: 109: }
 25499                           ;DisplayProtocol.h: 110: break;
 25500  005AEE  0012               	return	
 25501  005AF0                     i1l7448:
 25502                           
 25503                           ; BSR set to: 1
 25504                           ;DisplayProtocol.h: 112: if(yes) {
 25505  005AF0  0100               	movlb	0	; () banked
 25506  005AF2  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 25507  005AF4  0100               	movlb	0	; () banked
 25508  005AF6  B4D8               	btfsc	status,2,c
 25509  005AF8  D00C               	goto	i1l582
 25510                           
 25511                           ; BSR set to: 0
 25512                           ;DisplayProtocol.h: 113: velocidadMasa = chanValf;
 25513  005AFA  C1B1  F18F         	movff	_chanValf,_velocidadMasa
 25514  005AFE  C1B2  F190         	movff	_chanValf+1,_velocidadMasa+1
 25515  005B02  C1B3  F191         	movff	_chanValf+2,_velocidadMasa+2
 25516                           
 25517                           ; BSR set to: 0
 25518                           ;DisplayProtocol.h: 114: actualScreen = 4;
 25519  005B06  0E04               	movlw	4
 25520  005B08  0101               	movlb	1	; () banked
 25521  005B0A  6FBD               	movwf	_actualScreen& (0+255),b
 25522                           
 25523                           ; BSR set to: 1
 25524                           ;DisplayProtocol.h: 115: saveSysParams();
 25525  005B0C  ECAA  F030         	call	i1_saveSysParams	;wreg free
 25526                           
 25527                           ;DisplayProtocol.h: 116: }else {
 25528  005B10  0012               	return	
 25529  005B12                     i1l582:
 25530                           
 25531                           ; BSR set to: 0
 25532                           ;DisplayProtocol.h: 117: tempLastScreen = actualScreen;
 25533  005B12  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 25534                           
 25535                           ; BSR set to: 0
 25536                           ;DisplayProtocol.h: 118: selSN = 1;
 25537  005B16  0E01               	movlw	1
 25538  005B18  0101               	movlb	1	; () banked
 25539  005B1A  6FBA               	movwf	_selSN& (0+255),b
 25540                           
 25541                           ;DisplayProtocol.h: 119: actualScreen = 10;
 25542  005B1C  0E0A               	movlw	10
 25543  005B1E  0101               	movlb	1	; () banked
 25544  005B20  6FBD               	movwf	_actualScreen& (0+255),b
 25545                           
 25546                           ; BSR set to: 1
 25547                           ;DisplayProtocol.h: 122: }
 25548                           ;DisplayProtocol.h: 123: }
 25549                           
 25550                           ; BSR set to: 1
 25551                           ;DisplayProtocol.h: 120: }
 25552                           ;DisplayProtocol.h: 121: break;
 25553  005B22  0012               	return	
 25554  005B24                     i1l7460:
 25555  005B24  0101               	movlb	1	; () banked
 25556  005B26  51BC               	movf	_menuSection& (0+255),w,b
 25557                           
 25558                           ; Switch size 1, requested type "space"
 25559                           ; Number of cases is 4, Range of values is 0 to 3
 25560                           ; switch strategies available:
 25561                           ; Name         Instructions Cycles
 25562                           ; simple_byte           13     7 (average)
 25563                           ;	Chosen strategy is simple_byte
 25564  005B28  0A00               	xorlw	0	; case 0
 25565  005B2A  B4D8               	btfsc	status,2,c
 25566  005B2C  0012               	return	
 25567  005B2E  0A01               	xorlw	1	; case 1
 25568  005B30  B4D8               	btfsc	status,2,c
 25569  005B32  D7AC               	goto	i1l7428
 25570  005B34  0A03               	xorlw	3	; case 2
 25571  005B36  B4D8               	btfsc	status,2,c
 25572  005B38  D7C3               	goto	i1l7438
 25573  005B3A  0A01               	xorlw	1	; case 3
 25574  005B3C  A4D8               	btfss	status,2,c
 25575  005B3E  0012               	return	
 25576  005B40  D7D7               	goto	i1l7448
 25577  005B42                     __end_ofi1_confirmEdition:
 25578                           	opt stack 0
 25579                           pclatu	equ	0xFFB
 25580                           pclath	equ	0xFFA
 25581                           tblptru	equ	0xFF8
 25582                           tblptrh	equ	0xFF7
 25583                           tblptrl	equ	0xFF6
 25584                           tablat	equ	0xFF5
 25585                           prodh	equ	0xFF4
 25586                           prodl	equ	0xFF3
 25587                           intcon	equ	0xFF2
 25588                           postinc0	equ	0xFEE
 25589                           fsr0h	equ	0xFEA
 25590                           fsr0l	equ	0xFE9
 25591                           wreg	equ	0xFE8
 25592                           postdec1	equ	0xFE5
 25593                           fsr1h	equ	0xFE2
 25594                           fsr1l	equ	0xFE1
 25595                           bsr	equ	0xFE0
 25596                           indf2	equ	0xFDF
 25597                           postinc2	equ	0xFDE
 25598                           postdec2	equ	0xFDD
 25599                           plusw2	equ	0xFDB
 25600                           fsr2h	equ	0xFDA
 25601                           fsr2l	equ	0xFD9
 25602                           status	equ	0xFD8
 25603                           
 25604 ;; *************** function i1___ftadd *****************
 25605 ;; Defined at:
 25606 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
 25607 ;; Parameters:    Size  Location     Type
 25608 ;;  f1              3    8[BANK0 ] float 
 25609 ;;  f2              3   11[BANK0 ] float 
 25610 ;; Auto vars:     Size  Location     Type
 25611 ;;  __ftadd         1   19[BANK0 ] unsigned char 
 25612 ;;  __ftadd         1   18[BANK0 ] unsigned char 
 25613 ;;  __ftadd         1   17[BANK0 ] unsigned char 
 25614 ;; Return value:  Size  Location     Type
 25615 ;;                  3    8[BANK0 ] float 
 25616 ;; Registers used:
 25617 ;;		wreg, status,2, status,0, cstack
 25618 ;; Tracked objects:
 25619 ;;		On entry : 0/0
 25620 ;;		On exit  : 0/0
 25621 ;;		Unchanged: 0/0
 25622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25623 ;;      Params:         0       6       0       0       0       0       0
 25624 ;;      Locals:         0       3       0       0       0       0       0
 25625 ;;      Temps:          0       3       0       0       0       0       0
 25626 ;;      Totals:         0      12       0       0       0       0       0
 25627 ;;Total ram usage:       12 bytes
 25628 ;; Hardware stack levels used:    1
 25629 ;; Hardware stack levels required when called:    5
 25630 ;; This function calls:
 25631 ;;		i1___ftpack
 25632 ;; This function is called by:
 25633 ;;		i1_longPressENTER
 25634 ;; This function uses a non-reentrant model
 25635 ;;
 25636                           
 25637                           	psect	text106
 25638  002A40                     __ptext106:
 25639                           	opt stack 0
 25640  002A40                     i1___ftadd:
 25641                           	opt stack 12
 25642                           
 25643                           ;incstack = 0
 25644  002A40  C06A  F06E         	movff	i1___ftadd@f1+2,??i1___ftadd
 25645  002A44  0100               	movlb	0	; () banked
 25646  002A46  6B6F               	clrf	(??i1___ftadd+1)& (0+255),b
 25647  002A48  6B70               	clrf	(??i1___ftadd+2)& (0+255),b
 25648  002A4A  0100               	movlb	0	; () banked
 25649  002A4C  3569               	rlcf	(i1___ftadd@f1+1)& (0+255),w,b
 25650  002A4E  0100               	movlb	0	; () banked
 25651  002A50  376E               	rlcf	??i1___ftadd& (0+255),f,b
 25652  002A52  E301               	bnc	u981_21
 25653  002A54  816F               	bsf	(??i1___ftadd+1)& (0+255),0,b
 25654  002A56                     u981_21:
 25655  002A56  0100               	movlb	0	; () banked
 25656  002A58  516E               	movf	??i1___ftadd& (0+255),w,b
 25657  002A5A  0100               	movlb	0	; () banked
 25658  002A5C  6F73               	movwf	i1___ftadd@exp1& (0+255),b
 25659  002A5E  C06D  F06E         	movff	i1___ftadd@f2+2,??i1___ftadd
 25660  002A62  0100               	movlb	0	; () banked
 25661  002A64  6B6F               	clrf	(??i1___ftadd+1)& (0+255),b
 25662  002A66  6B70               	clrf	(??i1___ftadd+2)& (0+255),b
 25663  002A68  0100               	movlb	0	; () banked
 25664  002A6A  356C               	rlcf	(i1___ftadd@f2+1)& (0+255),w,b
 25665  002A6C  0100               	movlb	0	; () banked
 25666  002A6E  376E               	rlcf	??i1___ftadd& (0+255),f,b
 25667  002A70  E301               	bnc	u982_21
 25668  002A72  816F               	bsf	(??i1___ftadd+1)& (0+255),0,b
 25669  002A74                     u982_21:
 25670  002A74  0100               	movlb	0	; () banked
 25671  002A76  516E               	movf	??i1___ftadd& (0+255),w,b
 25672  002A78  0100               	movlb	0	; () banked
 25673  002A7A  6F72               	movwf	i1___ftadd@exp2& (0+255),b
 25674                           
 25675                           ; BSR set to: 0
 25676  002A7C  0100               	movlb	0	; () banked
 25677  002A7E  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25678  002A80  0100               	movlb	0	; () banked
 25679  002A82  B4D8               	btfsc	status,2,c
 25680  002A84  D011               	goto	i1l1334
 25681                           
 25682                           ; BSR set to: 0
 25683  002A86  0100               	movlb	0	; () banked
 25684  002A88  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25685  002A8A  0100               	movlb	0	; () banked
 25686  002A8C  5D73               	subwf	i1___ftadd@exp1& (0+255),w,b
 25687  002A8E  B0D8               	btfsc	status,0,c
 25688  002A90  D012               	goto	i1l7506
 25689                           
 25690                           ; BSR set to: 0
 25691  002A92  0100               	movlb	0	; () banked
 25692  002A94  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25693  002A96  0800               	sublw	0
 25694  002A98  0100               	movlb	0	; () banked
 25695  002A9A  2572               	addwf	i1___ftadd@exp2& (0+255),w,b
 25696  002A9C  0100               	movlb	0	; () banked
 25697  002A9E  6F6E               	movwf	??i1___ftadd& (0+255),b
 25698  002AA0  0E18               	movlw	24
 25699  002AA2  0100               	movlb	0	; () banked
 25700  002AA4  656E               	cpfsgt	??i1___ftadd& (0+255),b
 25701  002AA6  D007               	goto	i1l7506
 25702  002AA8                     i1l1334:
 25703                           
 25704                           ; BSR set to: 0
 25705  002AA8  C06B  F068         	movff	i1___ftadd@f2,?i1___ftadd
 25706  002AAC  C06C  F069         	movff	i1___ftadd@f2+1,?i1___ftadd+1
 25707  002AB0  C06D  F06A         	movff	i1___ftadd@f2+2,?i1___ftadd+2
 25708  002AB4  0012               	return	
 25709  002AB6                     i1l7506:
 25710                           
 25711                           ; BSR set to: 0
 25712  002AB6  0100               	movlb	0	; () banked
 25713  002AB8  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25714  002ABA  0100               	movlb	0	; () banked
 25715  002ABC  B4D8               	btfsc	status,2,c
 25716  002ABE  D011               	goto	i1l1338
 25717                           
 25718                           ; BSR set to: 0
 25719  002AC0  0100               	movlb	0	; () banked
 25720  002AC2  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25721  002AC4  0100               	movlb	0	; () banked
 25722  002AC6  5D72               	subwf	i1___ftadd@exp2& (0+255),w,b
 25723  002AC8  B0D8               	btfsc	status,0,c
 25724  002ACA  D012               	goto	i1l7512
 25725                           
 25726                           ; BSR set to: 0
 25727  002ACC  0100               	movlb	0	; () banked
 25728  002ACE  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25729  002AD0  0800               	sublw	0
 25730  002AD2  0100               	movlb	0	; () banked
 25731  002AD4  2573               	addwf	i1___ftadd@exp1& (0+255),w,b
 25732  002AD6  0100               	movlb	0	; () banked
 25733  002AD8  6F6E               	movwf	??i1___ftadd& (0+255),b
 25734  002ADA  0E18               	movlw	24
 25735  002ADC  0100               	movlb	0	; () banked
 25736  002ADE  656E               	cpfsgt	??i1___ftadd& (0+255),b
 25737  002AE0  D007               	goto	i1l7512
 25738  002AE2                     i1l1338:
 25739                           
 25740                           ; BSR set to: 0
 25741  002AE2  C068  F068         	movff	i1___ftadd@f1,?i1___ftadd
 25742  002AE6  C069  F069         	movff	i1___ftadd@f1+1,?i1___ftadd+1
 25743  002AEA  C06A  F06A         	movff	i1___ftadd@f1+2,?i1___ftadd+2
 25744  002AEE  0012               	return	
 25745  002AF0                     i1l7512:
 25746                           
 25747                           ; BSR set to: 0
 25748  002AF0  0E06               	movlw	6
 25749  002AF2  0100               	movlb	0	; () banked
 25750  002AF4  6F71               	movwf	i1___ftadd@sign& (0+255),b
 25751                           
 25752                           ; BSR set to: 0
 25753  002AF6  0100               	movlb	0	; () banked
 25754  002AF8  AF6A               	btfss	(i1___ftadd@f1+2)& (0+255),7,b
 25755  002AFA  D002               	goto	i1l7518
 25756                           
 25757                           ; BSR set to: 0
 25758  002AFC  0100               	movlb	0	; () banked
 25759  002AFE  8F71               	bsf	i1___ftadd@sign& (0+255),7,b
 25760  002B00                     i1l7518:
 25761                           
 25762                           ; BSR set to: 0
 25763  002B00  0100               	movlb	0	; () banked
 25764  002B02  AF6D               	btfss	(i1___ftadd@f2+2)& (0+255),7,b
 25765  002B04  D002               	goto	i1l1340
 25766                           
 25767                           ; BSR set to: 0
 25768  002B06  0100               	movlb	0	; () banked
 25769  002B08  8D71               	bsf	i1___ftadd@sign& (0+255),6,b
 25770  002B0A                     i1l1340:
 25771                           
 25772                           ; BSR set to: 0
 25773  002B0A  0100               	movlb	0	; () banked
 25774  002B0C  8F69               	bsf	(i1___ftadd@f1+1)& (0+255),7,b
 25775                           
 25776                           ; BSR set to: 0
 25777  002B0E  0EFF               	movlw	255
 25778  002B10  0100               	movlb	0	; () banked
 25779  002B12  1768               	andwf	i1___ftadd@f1& (0+255),f,b
 25780  002B14  0EFF               	movlw	255
 25781  002B16  0100               	movlb	0	; () banked
 25782  002B18  1769               	andwf	(i1___ftadd@f1+1)& (0+255),f,b
 25783  002B1A  0E00               	movlw	0
 25784  002B1C  0100               	movlb	0	; () banked
 25785  002B1E  176A               	andwf	(i1___ftadd@f1+2)& (0+255),f,b
 25786  002B20  0100               	movlb	0	; () banked
 25787  002B22  8F6C               	bsf	(i1___ftadd@f2+1)& (0+255),7,b
 25788                           
 25789                           ; BSR set to: 0
 25790  002B24  0EFF               	movlw	255
 25791  002B26  0100               	movlb	0	; () banked
 25792  002B28  176B               	andwf	i1___ftadd@f2& (0+255),f,b
 25793  002B2A  0EFF               	movlw	255
 25794  002B2C  0100               	movlb	0	; () banked
 25795  002B2E  176C               	andwf	(i1___ftadd@f2+1)& (0+255),f,b
 25796  002B30  0E00               	movlw	0
 25797  002B32  0100               	movlb	0	; () banked
 25798  002B34  176D               	andwf	(i1___ftadd@f2+2)& (0+255),f,b
 25799                           
 25800                           ; BSR set to: 0
 25801  002B36  0100               	movlb	0	; () banked
 25802  002B38  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25803  002B3A  0100               	movlb	0	; () banked
 25804  002B3C  5D73               	subwf	i1___ftadd@exp1& (0+255),w,b
 25805  002B3E  B0D8               	btfsc	status,0,c
 25806  002B40  D025               	goto	i1l7538
 25807  002B42                     i1l7528:
 25808                           
 25809                           ; BSR set to: 0
 25810  002B42  0100               	movlb	0	; () banked
 25811  002B44  90D8               	bcf	status,0,c
 25812  002B46  376B               	rlcf	i1___ftadd@f2& (0+255),f,b
 25813  002B48  376C               	rlcf	(i1___ftadd@f2+1)& (0+255),f,b
 25814  002B4A  376D               	rlcf	(i1___ftadd@f2+2)& (0+255),f,b
 25815  002B4C  0100               	movlb	0	; () banked
 25816  002B4E  0772               	decf	i1___ftadd@exp2& (0+255),f,b
 25817                           
 25818                           ; BSR set to: 0
 25819  002B50  0100               	movlb	0	; () banked
 25820  002B52  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25821  002B54  0100               	movlb	0	; () banked
 25822  002B56  1972               	xorwf	i1___ftadd@exp2& (0+255),w,b
 25823  002B58  B4D8               	btfsc	status,2,c
 25824  002B5A  D011               	goto	i1l7536
 25825                           
 25826                           ; BSR set to: 0
 25827  002B5C  0100               	movlb	0	; () banked
 25828  002B5E  0771               	decf	i1___ftadd@sign& (0+255),f,b
 25829  002B60  C071  F06E         	movff	i1___ftadd@sign,??i1___ftadd
 25830  002B64  0E07               	movlw	7
 25831  002B66  0100               	movlb	0	; () banked
 25832  002B68  176E               	andwf	??i1___ftadd& (0+255),f,b
 25833  002B6A  B4D8               	btfsc	status,2,c
 25834  002B6C  D008               	goto	i1l7536
 25835  002B6E  D7E9               	goto	i1l7528
 25836  002B70                     i1l7534:
 25837                           
 25838                           ; BSR set to: 0
 25839  002B70  0100               	movlb	0	; () banked
 25840  002B72  90D8               	bcf	status,0,c
 25841  002B74  336A               	rrcf	(i1___ftadd@f1+2)& (0+255),f,b
 25842  002B76  3369               	rrcf	(i1___ftadd@f1+1)& (0+255),f,b
 25843  002B78  3368               	rrcf	i1___ftadd@f1& (0+255),f,b
 25844  002B7A  0100               	movlb	0	; () banked
 25845  002B7C  2B73               	incf	i1___ftadd@exp1& (0+255),f,b
 25846  002B7E                     i1l7536:
 25847                           
 25848                           ; BSR set to: 0
 25849  002B7E  0100               	movlb	0	; () banked
 25850  002B80  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25851  002B82  0100               	movlb	0	; () banked
 25852  002B84  1973               	xorwf	i1___ftadd@exp1& (0+255),w,b
 25853  002B86  B4D8               	btfsc	status,2,c
 25854  002B88  D02B               	goto	i1l1349
 25855  002B8A  D7F2               	goto	i1l7534
 25856  002B8C                     i1l7538:
 25857                           
 25858                           ; BSR set to: 0
 25859  002B8C  0100               	movlb	0	; () banked
 25860  002B8E  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25861  002B90  0100               	movlb	0	; () banked
 25862  002B92  5D72               	subwf	i1___ftadd@exp2& (0+255),w,b
 25863  002B94  B0D8               	btfsc	status,0,c
 25864  002B96  D024               	goto	i1l1349
 25865  002B98                     i1l7540:
 25866                           
 25867                           ; BSR set to: 0
 25868  002B98  0100               	movlb	0	; () banked
 25869  002B9A  90D8               	bcf	status,0,c
 25870  002B9C  3768               	rlcf	i1___ftadd@f1& (0+255),f,b
 25871  002B9E  3769               	rlcf	(i1___ftadd@f1+1)& (0+255),f,b
 25872  002BA0  376A               	rlcf	(i1___ftadd@f1+2)& (0+255),f,b
 25873  002BA2  0100               	movlb	0	; () banked
 25874  002BA4  0773               	decf	i1___ftadd@exp1& (0+255),f,b
 25875                           
 25876                           ; BSR set to: 0
 25877  002BA6  0100               	movlb	0	; () banked
 25878  002BA8  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25879  002BAA  0100               	movlb	0	; () banked
 25880  002BAC  1972               	xorwf	i1___ftadd@exp2& (0+255),w,b
 25881  002BAE  B4D8               	btfsc	status,2,c
 25882  002BB0  D011               	goto	i1l7548
 25883                           
 25884                           ; BSR set to: 0
 25885  002BB2  0100               	movlb	0	; () banked
 25886  002BB4  0771               	decf	i1___ftadd@sign& (0+255),f,b
 25887  002BB6  C071  F06E         	movff	i1___ftadd@sign,??i1___ftadd
 25888  002BBA  0E07               	movlw	7
 25889  002BBC  0100               	movlb	0	; () banked
 25890  002BBE  176E               	andwf	??i1___ftadd& (0+255),f,b
 25891  002BC0  B4D8               	btfsc	status,2,c
 25892  002BC2  D008               	goto	i1l7548
 25893  002BC4  D7E9               	goto	i1l7540
 25894  002BC6                     i1l7546:
 25895                           
 25896                           ; BSR set to: 0
 25897  002BC6  0100               	movlb	0	; () banked
 25898  002BC8  90D8               	bcf	status,0,c
 25899  002BCA  336D               	rrcf	(i1___ftadd@f2+2)& (0+255),f,b
 25900  002BCC  336C               	rrcf	(i1___ftadd@f2+1)& (0+255),f,b
 25901  002BCE  336B               	rrcf	i1___ftadd@f2& (0+255),f,b
 25902  002BD0  0100               	movlb	0	; () banked
 25903  002BD2  2B72               	incf	i1___ftadd@exp2& (0+255),f,b
 25904  002BD4                     i1l7548:
 25905                           
 25906                           ; BSR set to: 0
 25907  002BD4  0100               	movlb	0	; () banked
 25908  002BD6  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25909  002BD8  0100               	movlb	0	; () banked
 25910  002BDA  1973               	xorwf	i1___ftadd@exp1& (0+255),w,b
 25911  002BDC  A4D8               	btfss	status,2,c
 25912  002BDE  D7F3               	goto	i1l7546
 25913  002BE0                     i1l1349:
 25914                           
 25915                           ; BSR set to: 0
 25916  002BE0  0100               	movlb	0	; () banked
 25917  002BE2  AF71               	btfss	i1___ftadd@sign& (0+255),7,b
 25918  002BE4  D012               	goto	i1l1358
 25919                           
 25920                           ; BSR set to: 0
 25921  002BE6  0EFF               	movlw	255
 25922  002BE8  0100               	movlb	0	; () banked
 25923  002BEA  1B68               	xorwf	i1___ftadd@f1& (0+255),f,b
 25924  002BEC  0EFF               	movlw	255
 25925  002BEE  0100               	movlb	0	; () banked
 25926  002BF0  1B69               	xorwf	(i1___ftadd@f1+1)& (0+255),f,b
 25927  002BF2  0EFF               	movlw	255
 25928  002BF4  0100               	movlb	0	; () banked
 25929  002BF6  1B6A               	xorwf	(i1___ftadd@f1+2)& (0+255),f,b
 25930  002BF8  0E01               	movlw	1
 25931  002BFA  0100               	movlb	0	; () banked
 25932  002BFC  2768               	addwf	i1___ftadd@f1& (0+255),f,b
 25933  002BFE  0E00               	movlw	0
 25934  002C00  0100               	movlb	0	; () banked
 25935  002C02  2369               	addwfc	(i1___ftadd@f1+1)& (0+255),f,b
 25936  002C04  0E00               	movlw	0
 25937  002C06  0100               	movlb	0	; () banked
 25938  002C08  236A               	addwfc	(i1___ftadd@f1+2)& (0+255),f,b
 25939  002C0A                     i1l1358:
 25940                           
 25941                           ; BSR set to: 0
 25942  002C0A  0100               	movlb	0	; () banked
 25943  002C0C  AD71               	btfss	i1___ftadd@sign& (0+255),6,b
 25944  002C0E  D012               	goto	i1l7554
 25945                           
 25946                           ; BSR set to: 0
 25947  002C10  0EFF               	movlw	255
 25948  002C12  0100               	movlb	0	; () banked
 25949  002C14  1B6B               	xorwf	i1___ftadd@f2& (0+255),f,b
 25950  002C16  0EFF               	movlw	255
 25951  002C18  0100               	movlb	0	; () banked
 25952  002C1A  1B6C               	xorwf	(i1___ftadd@f2+1)& (0+255),f,b
 25953  002C1C  0EFF               	movlw	255
 25954  002C1E  0100               	movlb	0	; () banked
 25955  002C20  1B6D               	xorwf	(i1___ftadd@f2+2)& (0+255),f,b
 25956  002C22  0E01               	movlw	1
 25957  002C24  0100               	movlb	0	; () banked
 25958  002C26  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 25959  002C28  0E00               	movlw	0
 25960  002C2A  0100               	movlb	0	; () banked
 25961  002C2C  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 25962  002C2E  0E00               	movlw	0
 25963  002C30  0100               	movlb	0	; () banked
 25964  002C32  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 25965  002C34                     i1l7554:
 25966                           
 25967                           ; BSR set to: 0
 25968  002C34  0E00               	movlw	0
 25969  002C36  0100               	movlb	0	; () banked
 25970  002C38  6F71               	movwf	i1___ftadd@sign& (0+255),b
 25971                           
 25972                           ; BSR set to: 0
 25973  002C3A  0100               	movlb	0	; () banked
 25974  002C3C  5168               	movf	i1___ftadd@f1& (0+255),w,b
 25975  002C3E  0100               	movlb	0	; () banked
 25976  002C40  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 25977  002C42  0100               	movlb	0	; () banked
 25978  002C44  5169               	movf	(i1___ftadd@f1+1)& (0+255),w,b
 25979  002C46  0100               	movlb	0	; () banked
 25980  002C48  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 25981  002C4A  0100               	movlb	0	; () banked
 25982  002C4C  516A               	movf	(i1___ftadd@f1+2)& (0+255),w,b
 25983  002C4E  0100               	movlb	0	; () banked
 25984  002C50  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 25985                           
 25986                           ; BSR set to: 0
 25987  002C52  0100               	movlb	0	; () banked
 25988  002C54  AF6D               	btfss	(i1___ftadd@f2+2)& (0+255),7,b
 25989  002C56  D015               	goto	i1l7564
 25990                           
 25991                           ; BSR set to: 0
 25992  002C58  0EFF               	movlw	255
 25993  002C5A  0100               	movlb	0	; () banked
 25994  002C5C  1B6B               	xorwf	i1___ftadd@f2& (0+255),f,b
 25995  002C5E  0EFF               	movlw	255
 25996  002C60  0100               	movlb	0	; () banked
 25997  002C62  1B6C               	xorwf	(i1___ftadd@f2+1)& (0+255),f,b
 25998  002C64  0EFF               	movlw	255
 25999  002C66  0100               	movlb	0	; () banked
 26000  002C68  1B6D               	xorwf	(i1___ftadd@f2+2)& (0+255),f,b
 26001  002C6A  0E01               	movlw	1
 26002  002C6C  0100               	movlb	0	; () banked
 26003  002C6E  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 26004  002C70  0E00               	movlw	0
 26005  002C72  0100               	movlb	0	; () banked
 26006  002C74  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 26007  002C76  0E00               	movlw	0
 26008  002C78  0100               	movlb	0	; () banked
 26009  002C7A  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 26010                           
 26011                           ; BSR set to: 0
 26012  002C7C  0E01               	movlw	1
 26013  002C7E  0100               	movlb	0	; () banked
 26014  002C80  6F71               	movwf	i1___ftadd@sign& (0+255),b
 26015  002C82                     i1l7564:
 26016                           
 26017                           ; BSR set to: 0
 26018  002C82  C06B  F060         	movff	i1___ftadd@f2,i1___ftpack@arg
 26019  002C86  C06C  F061         	movff	i1___ftadd@f2+1,i1___ftpack@arg+1
 26020  002C8A  C06D  F062         	movff	i1___ftadd@f2+2,i1___ftpack@arg+2
 26021  002C8E  C073  F063         	movff	i1___ftadd@exp1,i1___ftpack@exp
 26022  002C92  C071  F064         	movff	i1___ftadd@sign,i1___ftpack@sign
 26023  002C96  ECEF  F025         	call	i1___ftpack	;wreg free
 26024  002C9A  C060  F068         	movff	?i1___ftpack,?i1___ftadd
 26025  002C9E  C061  F069         	movff	?i1___ftpack+1,?i1___ftadd+1
 26026  002CA2  C062  F06A         	movff	?i1___ftpack+2,?i1___ftadd+2
 26027  002CA6  0012               	return	
 26028  002CA8                     __end_ofi1___ftadd:
 26029                           	opt stack 0
 26030                           pclatu	equ	0xFFB
 26031                           pclath	equ	0xFFA
 26032                           tblptru	equ	0xFF8
 26033                           tblptrh	equ	0xFF7
 26034                           tblptrl	equ	0xFF6
 26035                           tablat	equ	0xFF5
 26036                           prodh	equ	0xFF4
 26037                           prodl	equ	0xFF3
 26038                           intcon	equ	0xFF2
 26039                           postinc0	equ	0xFEE
 26040                           fsr0h	equ	0xFEA
 26041                           fsr0l	equ	0xFE9
 26042                           wreg	equ	0xFE8
 26043                           postdec1	equ	0xFE5
 26044                           fsr1h	equ	0xFE2
 26045                           fsr1l	equ	0xFE1
 26046                           bsr	equ	0xFE0
 26047                           indf2	equ	0xFDF
 26048                           postinc2	equ	0xFDE
 26049                           postdec2	equ	0xFDD
 26050                           plusw2	equ	0xFDB
 26051                           fsr2h	equ	0xFDA
 26052                           fsr2l	equ	0xFD9
 26053                           status	equ	0xFD8
 26054                           
 26055 ;; *************** function i1_longPressDOWN *****************
 26056 ;; Defined at:
 26057 ;;		line 212 in file "source/DisplayProtocol.h"
 26058 ;; Parameters:    Size  Location     Type
 26059 ;;		None
 26060 ;; Auto vars:     Size  Location     Type
 26061 ;;		None
 26062 ;; Return value:  Size  Location     Type
 26063 ;;                  1    wreg      void 
 26064 ;; Registers used:
 26065 ;;		wreg, status,2, status,0
 26066 ;; Tracked objects:
 26067 ;;		On entry : 0/0
 26068 ;;		On exit  : 0/0
 26069 ;;		Unchanged: 0/0
 26070 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26071 ;;      Params:         0       0       0       0       0       0       0
 26072 ;;      Locals:         0       0       0       0       0       0       0
 26073 ;;      Temps:          0       0       0       0       0       0       0
 26074 ;;      Totals:         0       0       0       0       0       0       0
 26075 ;;Total ram usage:        0 bytes
 26076 ;; Hardware stack levels used:    1
 26077 ;; Hardware stack levels required when called:    4
 26078 ;; This function calls:
 26079 ;;		Nothing
 26080 ;; This function is called by:
 26081 ;;		_UARTint
 26082 ;; This function uses a non-reentrant model
 26083 ;;
 26084                           
 26085                           	psect	text107
 26086  0071E6                     __ptext107:
 26087                           	opt stack 0
 26088  0071E6                     i1_longPressDOWN:
 26089                           	opt stack 14
 26090                           
 26091                           ;DisplayProtocol.h: 213: if (!DOWNisLP) {
 26092                           
 26093                           ;incstack = 0
 26094  0071E6  5049               	movf	_DOWNisLP,w,c
 26095  0071E8  A4D8               	btfss	status,2,c
 26096  0071EA  0012               	return	
 26097                           
 26098                           ;DisplayProtocol.h: 214: DOWNisLP = 1;
 26099  0071EC  0E01               	movlw	1
 26100  0071EE  6E49               	movwf	_DOWNisLP,c
 26101                           
 26102                           ;DisplayProtocol.h: 215: if(actualScreen == 5) {
 26103  0071F0  0E05               	movlw	5
 26104  0071F2  0101               	movlb	1	; () banked
 26105  0071F4  19BD               	xorwf	_actualScreen& (0+255),w,b
 26106  0071F6  A4D8               	btfss	status,2,c
 26107  0071F8  0012               	return	
 26108                           
 26109                           ; BSR set to: 1
 26110                           ;DisplayProtocol.h: 216: if(menuSection == 2)
 26111  0071FA  0E02               	movlw	2
 26112  0071FC  0101               	movlb	1	; () banked
 26113  0071FE  19BC               	xorwf	_menuSection& (0+255),w,b
 26114  007200  A4D8               	btfss	status,2,c
 26115  007202  0012               	return	
 26116                           
 26117                           ; BSR set to: 1
 26118                           ;DisplayProtocol.h: 217: chanVals -= 10;
 26119  007204  0101               	movlb	1	; () banked
 26120  007206  0EF6               	movlw	246
 26121  007208  27B6               	addwf	_chanVals& (0+255),f,b
 26122  00720A  0EFF               	movlw	255
 26123  00720C  23B7               	addwfc	(_chanVals+1)& (0+255),f,b
 26124                           
 26125                           ; BSR set to: 1
 26126                           
 26127                           ; BSR set to: 1
 26128  00720E  0012               	return	
 26129  007210                     __end_ofi1_longPressDOWN:
 26130                           	opt stack 0
 26131                           pclatu	equ	0xFFB
 26132                           pclath	equ	0xFFA
 26133                           tblptru	equ	0xFF8
 26134                           tblptrh	equ	0xFF7
 26135                           tblptrl	equ	0xFF6
 26136                           tablat	equ	0xFF5
 26137                           prodh	equ	0xFF4
 26138                           prodl	equ	0xFF3
 26139                           intcon	equ	0xFF2
 26140                           postinc0	equ	0xFEE
 26141                           fsr0h	equ	0xFEA
 26142                           fsr0l	equ	0xFE9
 26143                           wreg	equ	0xFE8
 26144                           postdec1	equ	0xFE5
 26145                           fsr1h	equ	0xFE2
 26146                           fsr1l	equ	0xFE1
 26147                           bsr	equ	0xFE0
 26148                           indf2	equ	0xFDF
 26149                           postinc2	equ	0xFDE
 26150                           postdec2	equ	0xFDD
 26151                           plusw2	equ	0xFDB
 26152                           fsr2h	equ	0xFDA
 26153                           fsr2l	equ	0xFD9
 26154                           status	equ	0xFD8
 26155                           
 26156 ;; *************** function _loadSysParams *****************
 26157 ;; Defined at:
 26158 ;;		line 146 in file "source/sysParams.h"
 26159 ;; Parameters:    Size  Location     Type
 26160 ;;		None
 26161 ;; Auto vars:     Size  Location     Type
 26162 ;;		None
 26163 ;; Return value:  Size  Location     Type
 26164 ;;                  1    wreg      void 
 26165 ;; Registers used:
 26166 ;;		wreg, status,2, status,0, cstack
 26167 ;; Tracked objects:
 26168 ;;		On entry : 0/0
 26169 ;;		On exit  : 0/0
 26170 ;;		Unchanged: 0/0
 26171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26172 ;;      Params:         0       0       0       0       0       0       0
 26173 ;;      Locals:         0       0       0       0       0       0       0
 26174 ;;      Temps:          0       0       0       0       0       0       0
 26175 ;;      Totals:         0       0       0       0       0       0       0
 26176 ;;Total ram usage:        0 bytes
 26177 ;; Hardware stack levels used:    1
 26178 ;; Hardware stack levels required when called:    8
 26179 ;; This function calls:
 26180 ;;		i1_calcSysVars
 26181 ;;		i1_saveSysParams
 26182 ;; This function is called by:
 26183 ;;		_UARTint
 26184 ;; This function uses a non-reentrant model
 26185 ;;
 26186                           
 26187                           	psect	text108
 26188  006E2E                     __ptext108:
 26189                           	opt stack 0
 26190  006E2E                     _loadSysParams:
 26191                           	opt stack 10
 26192                           
 26193                           ;sysParams.h: 147: tiXcorte = 5.0f;
 26194                           
 26195                           ;incstack = 0
 26196  006E2E  0E00               	movlw	0
 26197  006E30  0101               	movlb	1	; () banked
 26198  006E32  6F95               	movwf	_tiXcorte& (0+255),b
 26199  006E34  0EA0               	movlw	160
 26200  006E36  0101               	movlb	1	; () banked
 26201  006E38  6F96               	movwf	(_tiXcorte+1)& (0+255),b
 26202  006E3A  0E40               	movlw	64
 26203  006E3C  0101               	movlb	1	; () banked
 26204  006E3E  6F97               	movwf	(_tiXcorte+2)& (0+255),b
 26205                           
 26206                           ;sysParams.h: 148: numCortes = 10;
 26207  006E40  0E00               	movlw	0
 26208  006E42  0100               	movlb	0	; () banked
 26209  006E44  6FD3               	movwf	(_numCortes+1)& (0+255),b
 26210  006E46  0E0A               	movlw	10
 26211  006E48  6FD2               	movwf	_numCortes& (0+255),b
 26212                           
 26213                           ;sysParams.h: 150: velocidadMasa = 1.0f;
 26214  006E4A  0E00               	movlw	0
 26215  006E4C  0101               	movlb	1	; () banked
 26216  006E4E  6F8F               	movwf	_velocidadMasa& (0+255),b
 26217  006E50  0E80               	movlw	128
 26218  006E52  0101               	movlb	1	; () banked
 26219  006E54  6F90               	movwf	(_velocidadMasa+1)& (0+255),b
 26220  006E56  0E3F               	movlw	63
 26221  006E58  0101               	movlb	1	; () banked
 26222  006E5A  6F91               	movwf	(_velocidadMasa+2)& (0+255),b
 26223                           
 26224                           ;sysParams.h: 151: processState = 0;
 26225  006E5C  0E00               	movlw	0
 26226  006E5E  0100               	movlb	0	; () banked
 26227  006E60  6FB3               	movwf	(_processState+1)& (0+255),b
 26228  006E62  0E00               	movlw	0
 26229  006E64  6FB2               	movwf	_processState& (0+255),b
 26230                           
 26231                           ;sysParams.h: 152: processStarted = 0;
 26232  006E66  0E00               	movlw	0
 26233  006E68  0100               	movlb	0	; () banked
 26234  006E6A  6FC0               	movwf	_processStarted& (0+255),b
 26235                           
 26236                           ; BSR set to: 0
 26237                           ;sysParams.h: 153: calcSysVars();
 26238  006E6C  EC99  F035         	call	i1_calcSysVars	;wreg free
 26239                           
 26240                           ;sysParams.h: 154: saveSysParams();
 26241  006E70  ECAA  F030         	call	i1_saveSysParams	;wreg free
 26242  006E74  0012               	return		;funcret
 26243  006E76                     __end_of_loadSysParams:
 26244                           	opt stack 0
 26245                           pclatu	equ	0xFFB
 26246                           pclath	equ	0xFFA
 26247                           tblptru	equ	0xFF8
 26248                           tblptrh	equ	0xFF7
 26249                           tblptrl	equ	0xFF6
 26250                           tablat	equ	0xFF5
 26251                           prodh	equ	0xFF4
 26252                           prodl	equ	0xFF3
 26253                           intcon	equ	0xFF2
 26254                           postinc0	equ	0xFEE
 26255                           fsr0h	equ	0xFEA
 26256                           fsr0l	equ	0xFE9
 26257                           wreg	equ	0xFE8
 26258                           postdec1	equ	0xFE5
 26259                           fsr1h	equ	0xFE2
 26260                           fsr1l	equ	0xFE1
 26261                           bsr	equ	0xFE0
 26262                           indf2	equ	0xFDF
 26263                           postinc2	equ	0xFDE
 26264                           postdec2	equ	0xFDD
 26265                           plusw2	equ	0xFDB
 26266                           fsr2h	equ	0xFDA
 26267                           fsr2l	equ	0xFD9
 26268                           status	equ	0xFD8
 26269                           
 26270 ;; *************** function i1_saveSysParams *****************
 26271 ;; Defined at:
 26272 ;;		line 113 in file "source/sysParams.h"
 26273 ;; Parameters:    Size  Location     Type
 26274 ;;		None
 26275 ;; Auto vars:     Size  Location     Type
 26276 ;;		None
 26277 ;; Return value:  Size  Location     Type
 26278 ;;                  1    wreg      void 
 26279 ;; Registers used:
 26280 ;;		wreg, status,2, status,0, cstack
 26281 ;; Tracked objects:
 26282 ;;		On entry : 0/0
 26283 ;;		On exit  : 0/0
 26284 ;;		Unchanged: 0/0
 26285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26286 ;;      Params:         0       0       0       0       0       0       0
 26287 ;;      Locals:         0       0       0       0       0       0       0
 26288 ;;      Temps:          0       0       0       0       0       0       0
 26289 ;;      Totals:         0       0       0       0       0       0       0
 26290 ;;Total ram usage:        0 bytes
 26291 ;; Hardware stack levels used:    1
 26292 ;; Hardware stack levels required when called:    7
 26293 ;; This function calls:
 26294 ;;		i1_calcVars2ti
 26295 ;;		i1_writeEEPROM
 26296 ;; This function is called by:
 26297 ;;		_loadSysParams
 26298 ;;		_UARTint
 26299 ;;		i1_confirmEdition
 26300 ;; This function uses a non-reentrant model
 26301 ;;
 26302                           
 26303                           	psect	text109
 26304  006154                     __ptext109:
 26305                           	opt stack 0
 26306  006154                     i1_saveSysParams:
 26307                           	opt stack 11
 26308                           
 26309                           ;sysParams.h: 114: calcVars2ti();
 26310                           
 26311                           ;incstack = 0
 26312  006154  EC2D  F036         	call	i1_calcVars2ti	;wreg free
 26313                           
 26314                           ;sysParams.h: 115: EECON1bits.WREN = 1;
 26315  006158  84A6               	bsf	4006,2,c	;volatile
 26316                           
 26317                           ;sysParams.h: 116: ie = INTCONbits.GIE;
 26318  00615A  0E00               	movlw	0
 26319  00615C  BEF2               	btfsc	intcon,7,c	;volatile
 26320  00615E  0E01               	movlw	1
 26321  006160  0100               	movlb	0	; () banked
 26322  006162  6FBD               	movwf	_ie& (0+255),b
 26323                           
 26324                           ; BSR set to: 0
 26325                           ;sysParams.h: 117: INTCONbits.GIE = 0;
 26326  006164  9EF2               	bcf	intcon,7,c	;volatile
 26327                           
 26328                           ; BSR set to: 0
 26329                           ;sysParams.h: 119: fData.floatdat = tiXcorte;
 26330  006166  C195  F0AF         	movff	_tiXcorte,_fData
 26331  00616A  C196  F0B0         	movff	_tiXcorte+1,_fData+1
 26332  00616E  C197  F0B1         	movff	_tiXcorte+2,_fData+2
 26333                           
 26334                           ; BSR set to: 0
 26335                           ;sysParams.h: 121: writeEEPROM(3, fData.floatUB);
 26336  006172  C0B1  F060         	movff	_fData+2,i1writeEEPROM@data
 26337  006176  0E03               	movlw	3
 26338  006178  EC2B  F039         	call	i1_writeEEPROM
 26339                           
 26340                           ;sysParams.h: 122: writeEEPROM(4, fData.floatHB);
 26341  00617C  C0B0  F060         	movff	_fData+1,i1writeEEPROM@data
 26342  006180  0E04               	movlw	4
 26343  006182  EC2B  F039         	call	i1_writeEEPROM
 26344                           
 26345                           ;sysParams.h: 123: writeEEPROM(5, fData.floatLB);
 26346  006186  C0AF  F060         	movff	_fData,i1writeEEPROM@data
 26347  00618A  0E05               	movlw	5
 26348  00618C  EC2B  F039         	call	i1_writeEEPROM
 26349                           
 26350                           ;sysParams.h: 124: i16Data.int16dat = numCortes;
 26351  006190  C0D2  F0B4         	movff	_numCortes,_i16Data
 26352  006194  C0D3  F0B5         	movff	_numCortes+1,_i16Data+1
 26353                           
 26354                           ;sysParams.h: 125: writeEEPROM(6, i16Data.int16HB);
 26355  006198  C0B5  F060         	movff	_i16Data+1,i1writeEEPROM@data
 26356  00619C  0E06               	movlw	6
 26357  00619E  EC2B  F039         	call	i1_writeEEPROM
 26358                           
 26359                           ;sysParams.h: 126: writeEEPROM(7, i16Data.int16LB);
 26360  0061A2  C0B4  F060         	movff	_i16Data,i1writeEEPROM@data
 26361  0061A6  0E07               	movlw	7
 26362  0061A8  EC2B  F039         	call	i1_writeEEPROM
 26363                           
 26364                           ;sysParams.h: 137: fData.floatdat = velocidadMasa;
 26365  0061AC  C18F  F0AF         	movff	_velocidadMasa,_fData
 26366  0061B0  C190  F0B0         	movff	_velocidadMasa+1,_fData+1
 26367  0061B4  C191  F0B1         	movff	_velocidadMasa+2,_fData+2
 26368                           
 26369                           ;sysParams.h: 139: writeEEPROM(17, fData.floatUB);
 26370  0061B8  C0B1  F060         	movff	_fData+2,i1writeEEPROM@data
 26371  0061BC  0E11               	movlw	17
 26372  0061BE  EC2B  F039         	call	i1_writeEEPROM
 26373                           
 26374                           ;sysParams.h: 140: writeEEPROM(18, fData.floatHB);
 26375  0061C2  C0B0  F060         	movff	_fData+1,i1writeEEPROM@data
 26376  0061C6  0E12               	movlw	18
 26377  0061C8  EC2B  F039         	call	i1_writeEEPROM
 26378                           
 26379                           ;sysParams.h: 141: writeEEPROM(19, fData.floatLB);
 26380  0061CC  C0AF  F060         	movff	_fData,i1writeEEPROM@data
 26381  0061D0  0E13               	movlw	19
 26382  0061D2  EC2B  F039         	call	i1_writeEEPROM
 26383                           
 26384                           ;sysParams.h: 142: EECON1bits.WREN = 0;
 26385  0061D6  94A6               	bcf	4006,2,c	;volatile
 26386                           
 26387                           ;sysParams.h: 143: INTCONbits.GIE = ie;
 26388  0061D8  0100               	movlb	0	; () banked
 26389  0061DA  B1BD               	btfsc	_ie& (0+255),0,b
 26390  0061DC  D002               	bra	i1u907_25
 26391  0061DE  9EF2               	bcf	intcon,7,c	;volatile
 26392  0061E0  D001               	bra	i1u907_26
 26393  0061E2                     i1u907_25:
 26394  0061E2  8EF2               	bsf	intcon,7,c	;volatile
 26395  0061E4                     i1u907_26:
 26396  0061E4  0012               	return		;funcret
 26397  0061E6                     __end_ofi1_saveSysParams:
 26398                           	opt stack 0
 26399                           pclatu	equ	0xFFB
 26400                           pclath	equ	0xFFA
 26401                           tblptru	equ	0xFF8
 26402                           tblptrh	equ	0xFF7
 26403                           tblptrl	equ	0xFF6
 26404                           tablat	equ	0xFF5
 26405                           prodh	equ	0xFF4
 26406                           prodl	equ	0xFF3
 26407                           intcon	equ	0xFF2
 26408                           postinc0	equ	0xFEE
 26409                           fsr0h	equ	0xFEA
 26410                           fsr0l	equ	0xFE9
 26411                           wreg	equ	0xFE8
 26412                           postdec1	equ	0xFE5
 26413                           fsr1h	equ	0xFE2
 26414                           fsr1l	equ	0xFE1
 26415                           bsr	equ	0xFE0
 26416                           indf2	equ	0xFDF
 26417                           postinc2	equ	0xFDE
 26418                           postdec2	equ	0xFDD
 26419                           plusw2	equ	0xFDB
 26420                           fsr2h	equ	0xFDA
 26421                           fsr2l	equ	0xFD9
 26422                           status	equ	0xFD8
 26423                           
 26424 ;; *************** function i1_calcVars2ti *****************
 26425 ;; Defined at:
 26426 ;;		line 89 in file "source/sysParams.h"
 26427 ;; Parameters:    Size  Location     Type
 26428 ;;		None
 26429 ;; Auto vars:     Size  Location     Type
 26430 ;;		None
 26431 ;; Return value:  Size  Location     Type
 26432 ;;                  1    wreg      void 
 26433 ;; Registers used:
 26434 ;;		wreg, status,2, status,0, cstack
 26435 ;; Tracked objects:
 26436 ;;		On entry : 0/0
 26437 ;;		On exit  : 0/0
 26438 ;;		Unchanged: 0/0
 26439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26440 ;;      Params:         0       0       0       0       0       0       0
 26441 ;;      Locals:         0       0       0       0       0       0       0
 26442 ;;      Temps:          0       0       0       0       0       0       0
 26443 ;;      Totals:         0       0       0       0       0       0       0
 26444 ;;Total ram usage:        0 bytes
 26445 ;; Hardware stack levels used:    1
 26446 ;; Hardware stack levels required when called:    6
 26447 ;; This function calls:
 26448 ;;		i1___ftdiv
 26449 ;;		i1___ftmul
 26450 ;; This function is called by:
 26451 ;;		i1_saveSysParams
 26452 ;;		i1_longPressENTER
 26453 ;; This function uses a non-reentrant model
 26454 ;;
 26455                           
 26456                           	psect	text110
 26457  006C5A                     __ptext110:
 26458                           	opt stack 0
 26459  006C5A                     i1_calcVars2ti:
 26460                           	opt stack 11
 26461                           
 26462                           ;sysParams.h: 97: tiXcorte = (float)kgXcorte / velocidadMasa;
 26463                           
 26464                           ;incstack = 0
 26465  006C5A  C198  F072         	movff	_kgXcorte,i1___ftdiv@f1
 26466  006C5E  C199  F073         	movff	_kgXcorte+1,i1___ftdiv@f1+1
 26467  006C62  C19A  F074         	movff	_kgXcorte+2,i1___ftdiv@f1+2
 26468  006C66  C18F  F075         	movff	_velocidadMasa,i1___ftdiv@f2
 26469  006C6A  C190  F076         	movff	_velocidadMasa+1,i1___ftdiv@f2+1
 26470  006C6E  C191  F077         	movff	_velocidadMasa+2,i1___ftdiv@f2+2
 26471  006C72  EC23  F01F         	call	i1___ftdiv	;wreg free
 26472  006C76  C072  F195         	movff	?i1___ftdiv,_tiXcorte
 26473  006C7A  C073  F196         	movff	?i1___ftdiv+1,_tiXcorte+1
 26474  006C7E  C074  F197         	movff	?i1___ftdiv+2,_tiXcorte+2
 26475                           
 26476                           ;sysParams.h: 98: timsXcorte = (float)tiXcorte * 1000;
 26477  006C82  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 26478  006C86  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 26479  006C8A  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 26480  006C8E  0E00               	movlw	0
 26481  006C90  0100               	movlb	0	; () banked
 26482  006C92  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 26483  006C94  0E7A               	movlw	122
 26484  006C96  0100               	movlb	0	; () banked
 26485  006C98  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 26486  006C9A  0E44               	movlw	68
 26487  006C9C  0100               	movlb	0	; () banked
 26488  006C9E  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 26489  006CA0  ECCE  F01D         	call	i1___ftmul	;wreg free
 26490  006CA4  C068  F053         	movff	?i1___ftmul,_timsXcorte
 26491  006CA8  C069  F054         	movff	?i1___ftmul+1,_timsXcorte+1
 26492  006CAC  C06A  F055         	movff	?i1___ftmul+2,_timsXcorte+2
 26493  006CB0  0012               	return		;funcret
 26494  006CB2                     __end_ofi1_calcVars2ti:
 26495                           	opt stack 0
 26496                           pclatu	equ	0xFFB
 26497                           pclath	equ	0xFFA
 26498                           tblptru	equ	0xFF8
 26499                           tblptrh	equ	0xFF7
 26500                           tblptrl	equ	0xFF6
 26501                           tablat	equ	0xFF5
 26502                           prodh	equ	0xFF4
 26503                           prodl	equ	0xFF3
 26504                           intcon	equ	0xFF2
 26505                           postinc0	equ	0xFEE
 26506                           fsr0h	equ	0xFEA
 26507                           fsr0l	equ	0xFE9
 26508                           wreg	equ	0xFE8
 26509                           postdec1	equ	0xFE5
 26510                           fsr1h	equ	0xFE2
 26511                           fsr1l	equ	0xFE1
 26512                           bsr	equ	0xFE0
 26513                           indf2	equ	0xFDF
 26514                           postinc2	equ	0xFDE
 26515                           postdec2	equ	0xFDD
 26516                           plusw2	equ	0xFDB
 26517                           fsr2h	equ	0xFDA
 26518                           fsr2l	equ	0xFD9
 26519                           status	equ	0xFD8
 26520                           
 26521 ;; *************** function i1___ftdiv *****************
 26522 ;; Defined at:
 26523 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
 26524 ;; Parameters:    Size  Location     Type
 26525 ;;  f1              3   18[BANK0 ] float 
 26526 ;;  f2              3   21[BANK0 ] float 
 26527 ;; Auto vars:     Size  Location     Type
 26528 ;;  __ftdiv         3   28[BANK0 ] float 
 26529 ;;  __ftdiv         1   32[BANK0 ] unsigned char 
 26530 ;;  __ftdiv         1   31[BANK0 ] unsigned char 
 26531 ;;  __ftdiv         1   27[BANK0 ] unsigned char 
 26532 ;; Return value:  Size  Location     Type
 26533 ;;                  3   18[BANK0 ] float 
 26534 ;; Registers used:
 26535 ;;		wreg, status,2, status,0, cstack
 26536 ;; Tracked objects:
 26537 ;;		On entry : 0/0
 26538 ;;		On exit  : 0/0
 26539 ;;		Unchanged: 0/0
 26540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26541 ;;      Params:         0       6       0       0       0       0       0
 26542 ;;      Locals:         0       6       0       0       0       0       0
 26543 ;;      Temps:          0       3       0       0       0       0       0
 26544 ;;      Totals:         0      15       0       0       0       0       0
 26545 ;;Total ram usage:       15 bytes
 26546 ;; Hardware stack levels used:    1
 26547 ;; Hardware stack levels required when called:    5
 26548 ;; This function calls:
 26549 ;;		i1___ftpack
 26550 ;; This function is called by:
 26551 ;;		i1_calcVars2ti
 26552 ;;		i1_integrator
 26553 ;;		i1_longPressENTER
 26554 ;; This function uses a non-reentrant model
 26555 ;;
 26556                           
 26557                           	psect	text111
 26558  003E46                     __ptext111:
 26559                           	opt stack 0
 26560  003E46                     i1___ftdiv:
 26561                           	opt stack 11
 26562                           
 26563                           ;incstack = 0
 26564  003E46  C074  F078         	movff	i1___ftdiv@f1+2,??i1___ftdiv
 26565  003E4A  0100               	movlb	0	; () banked
 26566  003E4C  6B79               	clrf	(??i1___ftdiv+1)& (0+255),b
 26567  003E4E  6B7A               	clrf	(??i1___ftdiv+2)& (0+255),b
 26568  003E50  0100               	movlb	0	; () banked
 26569  003E52  3573               	rlcf	(i1___ftdiv@f1+1)& (0+255),w,b
 26570  003E54  0100               	movlb	0	; () banked
 26571  003E56  3778               	rlcf	??i1___ftdiv& (0+255),f,b
 26572  003E58  E301               	bnc	u780_21
 26573  003E5A  8179               	bsf	(??i1___ftdiv+1)& (0+255),0,b
 26574  003E5C                     u780_21:
 26575  003E5C  0100               	movlb	0	; () banked
 26576  003E5E  5178               	movf	??i1___ftdiv& (0+255),w,b
 26577  003E60  0100               	movlb	0	; () banked
 26578  003E62  6F7F               	movwf	i1___ftdiv@exp& (0+255),b
 26579  003E64  0100               	movlb	0	; () banked
 26580  003E66  517F               	movf	i1___ftdiv@exp& (0+255),w,b
 26581  003E68  A4D8               	btfss	status,2,c
 26582  003E6A  D00A               	goto	i1l6150
 26583                           
 26584                           ; BSR set to: 0
 26585  003E6C  0E00               	movlw	0
 26586  003E6E  0100               	movlb	0	; () banked
 26587  003E70  6F72               	movwf	?i1___ftdiv& (0+255),b
 26588  003E72  0E00               	movlw	0
 26589  003E74  0100               	movlb	0	; () banked
 26590  003E76  6F73               	movwf	(?i1___ftdiv+1)& (0+255),b
 26591  003E78  0E00               	movlw	0
 26592  003E7A  0100               	movlb	0	; () banked
 26593  003E7C  6F74               	movwf	(?i1___ftdiv+2)& (0+255),b
 26594                           
 26595                           ; BSR set to: 0
 26596  003E7E  0012               	return	
 26597  003E80                     i1l6150:
 26598                           
 26599                           ; BSR set to: 0
 26600  003E80  C077  F078         	movff	i1___ftdiv@f2+2,??i1___ftdiv
 26601  003E84  0100               	movlb	0	; () banked
 26602  003E86  6B79               	clrf	(??i1___ftdiv+1)& (0+255),b
 26603  003E88  6B7A               	clrf	(??i1___ftdiv+2)& (0+255),b
 26604  003E8A  0100               	movlb	0	; () banked
 26605  003E8C  3576               	rlcf	(i1___ftdiv@f2+1)& (0+255),w,b
 26606  003E8E  0100               	movlb	0	; () banked
 26607  003E90  3778               	rlcf	??i1___ftdiv& (0+255),f,b
 26608  003E92  E301               	bnc	u782_21
 26609  003E94  8179               	bsf	(??i1___ftdiv+1)& (0+255),0,b
 26610  003E96                     u782_21:
 26611  003E96  0100               	movlb	0	; () banked
 26612  003E98  5178               	movf	??i1___ftdiv& (0+255),w,b
 26613  003E9A  0100               	movlb	0	; () banked
 26614  003E9C  6F80               	movwf	i1___ftdiv@sign& (0+255),b
 26615  003E9E  0100               	movlb	0	; () banked
 26616  003EA0  5180               	movf	i1___ftdiv@sign& (0+255),w,b
 26617  003EA2  A4D8               	btfss	status,2,c
 26618  003EA4  D00A               	goto	i1l6156
 26619                           
 26620                           ; BSR set to: 0
 26621  003EA6  0E00               	movlw	0
 26622  003EA8  0100               	movlb	0	; () banked
 26623  003EAA  6F72               	movwf	?i1___ftdiv& (0+255),b
 26624  003EAC  0E00               	movlw	0
 26625  003EAE  0100               	movlb	0	; () banked
 26626  003EB0  6F73               	movwf	(?i1___ftdiv+1)& (0+255),b
 26627  003EB2  0E00               	movlw	0
 26628  003EB4  0100               	movlb	0	; () banked
 26629  003EB6  6F74               	movwf	(?i1___ftdiv+2)& (0+255),b
 26630                           
 26631                           ; BSR set to: 0
 26632  003EB8  0012               	return	
 26633  003EBA                     i1l6156:
 26634                           
 26635                           ; BSR set to: 0
 26636  003EBA  0E00               	movlw	0
 26637  003EBC  0100               	movlb	0	; () banked
 26638  003EBE  6F7C               	movwf	i1___ftdiv@f3& (0+255),b
 26639  003EC0  0E00               	movlw	0
 26640  003EC2  0100               	movlb	0	; () banked
 26641  003EC4  6F7D               	movwf	(i1___ftdiv@f3+1)& (0+255),b
 26642  003EC6  0E00               	movlw	0
 26643  003EC8  0100               	movlb	0	; () banked
 26644  003ECA  6F7E               	movwf	(i1___ftdiv@f3+2)& (0+255),b
 26645                           
 26646                           ; BSR set to: 0
 26647  003ECC  0100               	movlb	0	; () banked
 26648  003ECE  5180               	movf	i1___ftdiv@sign& (0+255),w,b
 26649  003ED0  0F89               	addlw	137
 26650  003ED2  0100               	movlb	0	; () banked
 26651  003ED4  5F7F               	subwf	i1___ftdiv@exp& (0+255),f,b
 26652                           
 26653                           ; BSR set to: 0
 26654  003ED6  C074  F080         	movff	i1___ftdiv@f1+2,i1___ftdiv@sign
 26655                           
 26656                           ; BSR set to: 0
 26657  003EDA  0100               	movlb	0	; () banked
 26658  003EDC  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 26659  003EDE  0100               	movlb	0	; () banked
 26660  003EE0  1B80               	xorwf	i1___ftdiv@sign& (0+255),f,b
 26661                           
 26662                           ; BSR set to: 0
 26663  003EE2  0E80               	movlw	128
 26664  003EE4  0100               	movlb	0	; () banked
 26665  003EE6  1780               	andwf	i1___ftdiv@sign& (0+255),f,b
 26666                           
 26667                           ; BSR set to: 0
 26668  003EE8  0100               	movlb	0	; () banked
 26669  003EEA  8F73               	bsf	(i1___ftdiv@f1+1)& (0+255),7,b
 26670                           
 26671                           ; BSR set to: 0
 26672  003EEC  0EFF               	movlw	255
 26673  003EEE  0100               	movlb	0	; () banked
 26674  003EF0  1772               	andwf	i1___ftdiv@f1& (0+255),f,b
 26675  003EF2  0EFF               	movlw	255
 26676  003EF4  0100               	movlb	0	; () banked
 26677  003EF6  1773               	andwf	(i1___ftdiv@f1+1)& (0+255),f,b
 26678  003EF8  0E00               	movlw	0
 26679  003EFA  0100               	movlb	0	; () banked
 26680  003EFC  1774               	andwf	(i1___ftdiv@f1+2)& (0+255),f,b
 26681                           
 26682                           ; BSR set to: 0
 26683  003EFE  0100               	movlb	0	; () banked
 26684  003F00  8F76               	bsf	(i1___ftdiv@f2+1)& (0+255),7,b
 26685                           
 26686                           ; BSR set to: 0
 26687  003F02  0EFF               	movlw	255
 26688  003F04  0100               	movlb	0	; () banked
 26689  003F06  1775               	andwf	i1___ftdiv@f2& (0+255),f,b
 26690  003F08  0EFF               	movlw	255
 26691  003F0A  0100               	movlb	0	; () banked
 26692  003F0C  1776               	andwf	(i1___ftdiv@f2+1)& (0+255),f,b
 26693  003F0E  0E00               	movlw	0
 26694  003F10  0100               	movlb	0	; () banked
 26695  003F12  1777               	andwf	(i1___ftdiv@f2+2)& (0+255),f,b
 26696                           
 26697                           ; BSR set to: 0
 26698  003F14  0E18               	movlw	24
 26699  003F16  0100               	movlb	0	; () banked
 26700  003F18  6F7B               	movwf	i1___ftdiv@cntr& (0+255),b
 26701  003F1A                     i1l6176:
 26702                           
 26703                           ; BSR set to: 0
 26704  003F1A  0100               	movlb	0	; () banked
 26705  003F1C  90D8               	bcf	status,0,c
 26706  003F1E  377C               	rlcf	i1___ftdiv@f3& (0+255),f,b
 26707  003F20  377D               	rlcf	(i1___ftdiv@f3+1)& (0+255),f,b
 26708  003F22  377E               	rlcf	(i1___ftdiv@f3+2)& (0+255),f,b
 26709                           
 26710                           ; BSR set to: 0
 26711  003F24  0100               	movlb	0	; () banked
 26712  003F26  5175               	movf	i1___ftdiv@f2& (0+255),w,b
 26713  003F28  0100               	movlb	0	; () banked
 26714  003F2A  5D72               	subwf	i1___ftdiv@f1& (0+255),w,b
 26715  003F2C  0100               	movlb	0	; () banked
 26716  003F2E  5176               	movf	(i1___ftdiv@f2+1)& (0+255),w,b
 26717  003F30  0100               	movlb	0	; () banked
 26718  003F32  5973               	subwfb	(i1___ftdiv@f1+1)& (0+255),w,b
 26719  003F34  0100               	movlb	0	; () banked
 26720  003F36  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 26721  003F38  0100               	movlb	0	; () banked
 26722  003F3A  5974               	subwfb	(i1___ftdiv@f1+2)& (0+255),w,b
 26723  003F3C  A0D8               	btfss	status,0,c
 26724  003F3E  D00E               	goto	i1l1369
 26725                           
 26726                           ; BSR set to: 0
 26727  003F40  0100               	movlb	0	; () banked
 26728  003F42  5175               	movf	i1___ftdiv@f2& (0+255),w,b
 26729  003F44  0100               	movlb	0	; () banked
 26730  003F46  5F72               	subwf	i1___ftdiv@f1& (0+255),f,b
 26731  003F48  0100               	movlb	0	; () banked
 26732  003F4A  5176               	movf	(i1___ftdiv@f2+1)& (0+255),w,b
 26733  003F4C  0100               	movlb	0	; () banked
 26734  003F4E  5B73               	subwfb	(i1___ftdiv@f1+1)& (0+255),f,b
 26735  003F50  0100               	movlb	0	; () banked
 26736  003F52  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 26737  003F54  0100               	movlb	0	; () banked
 26738  003F56  5B74               	subwfb	(i1___ftdiv@f1+2)& (0+255),f,b
 26739                           
 26740                           ; BSR set to: 0
 26741  003F58  0100               	movlb	0	; () banked
 26742  003F5A  817C               	bsf	i1___ftdiv@f3& (0+255),0,b
 26743  003F5C                     i1l1369:
 26744                           
 26745                           ; BSR set to: 0
 26746  003F5C  0100               	movlb	0	; () banked
 26747  003F5E  90D8               	bcf	status,0,c
 26748  003F60  3772               	rlcf	i1___ftdiv@f1& (0+255),f,b
 26749  003F62  3773               	rlcf	(i1___ftdiv@f1+1)& (0+255),f,b
 26750  003F64  3774               	rlcf	(i1___ftdiv@f1+2)& (0+255),f,b
 26751                           
 26752                           ; BSR set to: 0
 26753  003F66  0100               	movlb	0	; () banked
 26754  003F68  2F7B               	decfsz	i1___ftdiv@cntr& (0+255),f,b
 26755  003F6A  D7D7               	goto	i1l6176
 26756                           
 26757                           ; BSR set to: 0
 26758                           
 26759                           ; BSR set to: 0
 26760  003F6C  C07C  F060         	movff	i1___ftdiv@f3,i1___ftpack@arg
 26761  003F70  C07D  F061         	movff	i1___ftdiv@f3+1,i1___ftpack@arg+1
 26762  003F74  C07E  F062         	movff	i1___ftdiv@f3+2,i1___ftpack@arg+2
 26763  003F78  C07F  F063         	movff	i1___ftdiv@exp,i1___ftpack@exp
 26764  003F7C  C080  F064         	movff	i1___ftdiv@sign,i1___ftpack@sign
 26765  003F80  ECEF  F025         	call	i1___ftpack	;wreg free
 26766  003F84  C060  F072         	movff	?i1___ftpack,?i1___ftdiv
 26767  003F88  C061  F073         	movff	?i1___ftpack+1,?i1___ftdiv+1
 26768  003F8C  C062  F074         	movff	?i1___ftpack+2,?i1___ftdiv+2
 26769  003F90  0012               	return	
 26770  003F92                     __end_ofi1___ftdiv:
 26771                           	opt stack 0
 26772                           pclatu	equ	0xFFB
 26773                           pclath	equ	0xFFA
 26774                           tblptru	equ	0xFF8
 26775                           tblptrh	equ	0xFF7
 26776                           tblptrl	equ	0xFF6
 26777                           tablat	equ	0xFF5
 26778                           prodh	equ	0xFF4
 26779                           prodl	equ	0xFF3
 26780                           intcon	equ	0xFF2
 26781                           postinc0	equ	0xFEE
 26782                           fsr0h	equ	0xFEA
 26783                           fsr0l	equ	0xFE9
 26784                           wreg	equ	0xFE8
 26785                           postdec1	equ	0xFE5
 26786                           fsr1h	equ	0xFE2
 26787                           fsr1l	equ	0xFE1
 26788                           bsr	equ	0xFE0
 26789                           indf2	equ	0xFDF
 26790                           postinc2	equ	0xFDE
 26791                           postdec2	equ	0xFDD
 26792                           plusw2	equ	0xFDB
 26793                           fsr2h	equ	0xFDA
 26794                           fsr2l	equ	0xFD9
 26795                           status	equ	0xFD8
 26796                           
 26797 ;; *************** function i1_calcSysVars *****************
 26798 ;; Defined at:
 26799 ;;		line 78 in file "source/sysParams.h"
 26800 ;; Parameters:    Size  Location     Type
 26801 ;;		None
 26802 ;; Auto vars:     Size  Location     Type
 26803 ;;  calcSysVars     3   23[BANK0 ] float 
 26804 ;; Return value:  Size  Location     Type
 26805 ;;                  1    wreg      void 
 26806 ;; Registers used:
 26807 ;;		wreg, status,2, status,0, cstack
 26808 ;; Tracked objects:
 26809 ;;		On entry : 0/0
 26810 ;;		On exit  : 0/0
 26811 ;;		Unchanged: 0/0
 26812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26813 ;;      Params:         0       0       0       0       0       0       0
 26814 ;;      Locals:         0       3       0       0       0       0       0
 26815 ;;      Temps:          0       0       0       0       0       0       0
 26816 ;;      Totals:         0       3       0       0       0       0       0
 26817 ;;Total ram usage:        3 bytes
 26818 ;; Hardware stack levels used:    1
 26819 ;; Hardware stack levels required when called:    6
 26820 ;; This function calls:
 26821 ;;		i1___ftmul
 26822 ;; This function is called by:
 26823 ;;		_loadSysParams
 26824 ;;		i1_sysParamInit
 26825 ;; This function uses a non-reentrant model
 26826 ;;
 26827                           
 26828                           	psect	text112
 26829  006B32                     __ptext112:
 26830                           	opt stack 0
 26831  006B32                     i1_calcSysVars:
 26832                           	opt stack 11
 26833                           
 26834                           ;sysParams.h: 79: float temp = 0;
 26835                           
 26836                           ;incstack = 0
 26837  006B32  0E00               	movlw	0
 26838  006B34  0100               	movlb	0	; () banked
 26839  006B36  6F77               	movwf	i1calcSysVars@temp& (0+255),b
 26840  006B38  0E00               	movlw	0
 26841  006B3A  0100               	movlb	0	; () banked
 26842  006B3C  6F78               	movwf	(i1calcSysVars@temp+1)& (0+255),b
 26843  006B3E  0E00               	movlw	0
 26844  006B40  0100               	movlb	0	; () banked
 26845  006B42  6F79               	movwf	(i1calcSysVars@temp+2)& (0+255),b
 26846                           
 26847                           ; BSR set to: 0
 26848                           ;sysParams.h: 80: timsXcorte = (float)tiXcorte * 1000;
 26849  006B44  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 26850  006B48  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 26851  006B4C  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 26852  006B50  0E00               	movlw	0
 26853  006B52  0100               	movlb	0	; () banked
 26854  006B54  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 26855  006B56  0E7A               	movlw	122
 26856  006B58  0100               	movlb	0	; () banked
 26857  006B5A  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 26858  006B5C  0E44               	movlw	68
 26859  006B5E  0100               	movlb	0	; () banked
 26860  006B60  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 26861  006B62  ECCE  F01D         	call	i1___ftmul	;wreg free
 26862  006B66  C068  F053         	movff	?i1___ftmul,_timsXcorte
 26863  006B6A  C069  F054         	movff	?i1___ftmul+1,_timsXcorte+1
 26864  006B6E  C06A  F055         	movff	?i1___ftmul+2,_timsXcorte+2
 26865                           
 26866                           ;sysParams.h: 86: kgXcorte = (float)velocidadMasa * tiXcorte;
 26867  006B72  C18F  F068         	movff	_velocidadMasa,i1___ftmul@f1
 26868  006B76  C190  F069         	movff	_velocidadMasa+1,i1___ftmul@f1+1
 26869  006B7A  C191  F06A         	movff	_velocidadMasa+2,i1___ftmul@f1+2
 26870  006B7E  C195  F06B         	movff	_tiXcorte,i1___ftmul@f2
 26871  006B82  C196  F06C         	movff	_tiXcorte+1,i1___ftmul@f2+1
 26872  006B86  C197  F06D         	movff	_tiXcorte+2,i1___ftmul@f2+2
 26873  006B8A  ECCE  F01D         	call	i1___ftmul	;wreg free
 26874  006B8E  C068  F198         	movff	?i1___ftmul,_kgXcorte
 26875  006B92  C069  F199         	movff	?i1___ftmul+1,_kgXcorte+1
 26876  006B96  C06A  F19A         	movff	?i1___ftmul+2,_kgXcorte+2
 26877  006B9A  0012               	return		;funcret
 26878  006B9C                     __end_ofi1_calcSysVars:
 26879                           	opt stack 0
 26880                           pclatu	equ	0xFFB
 26881                           pclath	equ	0xFFA
 26882                           tblptru	equ	0xFF8
 26883                           tblptrh	equ	0xFF7
 26884                           tblptrl	equ	0xFF6
 26885                           tablat	equ	0xFF5
 26886                           prodh	equ	0xFF4
 26887                           prodl	equ	0xFF3
 26888                           intcon	equ	0xFF2
 26889                           postinc0	equ	0xFEE
 26890                           fsr0h	equ	0xFEA
 26891                           fsr0l	equ	0xFE9
 26892                           wreg	equ	0xFE8
 26893                           postdec1	equ	0xFE5
 26894                           fsr1h	equ	0xFE2
 26895                           fsr1l	equ	0xFE1
 26896                           bsr	equ	0xFE0
 26897                           indf2	equ	0xFDF
 26898                           postinc2	equ	0xFDE
 26899                           postdec2	equ	0xFDD
 26900                           plusw2	equ	0xFDB
 26901                           fsr2h	equ	0xFDA
 26902                           fsr2l	equ	0xFD9
 26903                           status	equ	0xFD8
 26904                           
 26905 ;; *************** function i1___ftmul *****************
 26906 ;; Defined at:
 26907 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
 26908 ;; Parameters:    Size  Location     Type
 26909 ;;  f1              3    8[BANK0 ] float 
 26910 ;;  f2              3   11[BANK0 ] float 
 26911 ;; Auto vars:     Size  Location     Type
 26912 ;;  __ftmul         3   18[BANK0 ] unsigned um
 26913 ;;  __ftmul         1   22[BANK0 ] unsigned char 
 26914 ;;  __ftmul         1   21[BANK0 ] unsigned char 
 26915 ;;  __ftmul         1   17[BANK0 ] unsigned char 
 26916 ;; Return value:  Size  Location     Type
 26917 ;;                  3    8[BANK0 ] float 
 26918 ;; Registers used:
 26919 ;;		wreg, status,2, status,0, cstack
 26920 ;; Tracked objects:
 26921 ;;		On entry : 0/0
 26922 ;;		On exit  : 0/0
 26923 ;;		Unchanged: 0/0
 26924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26925 ;;      Params:         0       6       0       0       0       0       0
 26926 ;;      Locals:         0       6       0       0       0       0       0
 26927 ;;      Temps:          0       3       0       0       0       0       0
 26928 ;;      Totals:         0      15       0       0       0       0       0
 26929 ;;Total ram usage:       15 bytes
 26930 ;; Hardware stack levels used:    1
 26931 ;; Hardware stack levels required when called:    5
 26932 ;; This function calls:
 26933 ;;		i1___ftpack
 26934 ;; This function is called by:
 26935 ;;		i1_calcSysVars
 26936 ;;		i1_calcVars2ti
 26937 ;;		i1_desintegrator
 26938 ;;		i1_longPressRETRO
 26939 ;;		i1_pressENTER
 26940 ;;		i1_longPressENTER
 26941 ;; This function uses a non-reentrant model
 26942 ;;
 26943                           
 26944                           	psect	text113
 26945  003B9C                     __ptext113:
 26946                           	opt stack 0
 26947  003B9C                     i1___ftmul:
 26948                           	opt stack 11
 26949                           
 26950                           ;incstack = 0
 26951  003B9C  C06A  F06E         	movff	i1___ftmul@f1+2,??i1___ftmul
 26952  003BA0  0100               	movlb	0	; () banked
 26953  003BA2  6B6F               	clrf	(??i1___ftmul+1)& (0+255),b
 26954  003BA4  6B70               	clrf	(??i1___ftmul+2)& (0+255),b
 26955  003BA6  0100               	movlb	0	; () banked
 26956  003BA8  3569               	rlcf	(i1___ftmul@f1+1)& (0+255),w,b
 26957  003BAA  0100               	movlb	0	; () banked
 26958  003BAC  376E               	rlcf	??i1___ftmul& (0+255),f,b
 26959  003BAE  E301               	bnc	u785_21
 26960  003BB0  816F               	bsf	(??i1___ftmul+1)& (0+255),0,b
 26961  003BB2                     u785_21:
 26962  003BB2  0100               	movlb	0	; () banked
 26963  003BB4  516E               	movf	??i1___ftmul& (0+255),w,b
 26964  003BB6  0100               	movlb	0	; () banked
 26965  003BB8  6F71               	movwf	i1___ftmul@exp& (0+255),b
 26966  003BBA  0100               	movlb	0	; () banked
 26967  003BBC  5171               	movf	i1___ftmul@exp& (0+255),w,b
 26968  003BBE  A4D8               	btfss	status,2,c
 26969  003BC0  D00A               	goto	i1l6196
 26970                           
 26971                           ; BSR set to: 0
 26972  003BC2  0E00               	movlw	0
 26973  003BC4  0100               	movlb	0	; () banked
 26974  003BC6  6F68               	movwf	?i1___ftmul& (0+255),b
 26975  003BC8  0E00               	movlw	0
 26976  003BCA  0100               	movlb	0	; () banked
 26977  003BCC  6F69               	movwf	(?i1___ftmul+1)& (0+255),b
 26978  003BCE  0E00               	movlw	0
 26979  003BD0  0100               	movlb	0	; () banked
 26980  003BD2  6F6A               	movwf	(?i1___ftmul+2)& (0+255),b
 26981                           
 26982                           ; BSR set to: 0
 26983  003BD4  0012               	return	
 26984  003BD6                     i1l6196:
 26985                           
 26986                           ; BSR set to: 0
 26987  003BD6  C06D  F06E         	movff	i1___ftmul@f2+2,??i1___ftmul
 26988  003BDA  0100               	movlb	0	; () banked
 26989  003BDC  6B6F               	clrf	(??i1___ftmul+1)& (0+255),b
 26990  003BDE  6B70               	clrf	(??i1___ftmul+2)& (0+255),b
 26991  003BE0  0100               	movlb	0	; () banked
 26992  003BE2  356C               	rlcf	(i1___ftmul@f2+1)& (0+255),w,b
 26993  003BE4  0100               	movlb	0	; () banked
 26994  003BE6  376E               	rlcf	??i1___ftmul& (0+255),f,b
 26995  003BE8  E301               	bnc	u787_21
 26996  003BEA  816F               	bsf	(??i1___ftmul+1)& (0+255),0,b
 26997  003BEC                     u787_21:
 26998  003BEC  0100               	movlb	0	; () banked
 26999  003BEE  516E               	movf	??i1___ftmul& (0+255),w,b
 27000  003BF0  0100               	movlb	0	; () banked
 27001  003BF2  6F76               	movwf	i1___ftmul@sign& (0+255),b
 27002  003BF4  0100               	movlb	0	; () banked
 27003  003BF6  5176               	movf	i1___ftmul@sign& (0+255),w,b
 27004  003BF8  A4D8               	btfss	status,2,c
 27005  003BFA  D00A               	goto	i1l6202
 27006                           
 27007                           ; BSR set to: 0
 27008  003BFC  0E00               	movlw	0
 27009  003BFE  0100               	movlb	0	; () banked
 27010  003C00  6F68               	movwf	?i1___ftmul& (0+255),b
 27011  003C02  0E00               	movlw	0
 27012  003C04  0100               	movlb	0	; () banked
 27013  003C06  6F69               	movwf	(?i1___ftmul+1)& (0+255),b
 27014  003C08  0E00               	movlw	0
 27015  003C0A  0100               	movlb	0	; () banked
 27016  003C0C  6F6A               	movwf	(?i1___ftmul+2)& (0+255),b
 27017                           
 27018                           ; BSR set to: 0
 27019  003C0E  0012               	return	
 27020  003C10                     i1l6202:
 27021                           
 27022                           ; BSR set to: 0
 27023  003C10  0100               	movlb	0	; () banked
 27024  003C12  5176               	movf	i1___ftmul@sign& (0+255),w,b
 27025  003C14  0F7B               	addlw	123
 27026  003C16  0100               	movlb	0	; () banked
 27027  003C18  2771               	addwf	i1___ftmul@exp& (0+255),f,b
 27028                           
 27029                           ; BSR set to: 0
 27030  003C1A  C06A  F076         	movff	i1___ftmul@f1+2,i1___ftmul@sign
 27031  003C1E  0100               	movlb	0	; () banked
 27032  003C20  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 27033  003C22  0100               	movlb	0	; () banked
 27034  003C24  1B76               	xorwf	i1___ftmul@sign& (0+255),f,b
 27035  003C26  0E80               	movlw	128
 27036  003C28  0100               	movlb	0	; () banked
 27037  003C2A  1776               	andwf	i1___ftmul@sign& (0+255),f,b
 27038                           
 27039                           ; BSR set to: 0
 27040  003C2C  0100               	movlb	0	; () banked
 27041  003C2E  8F69               	bsf	(i1___ftmul@f1+1)& (0+255),7,b
 27042                           
 27043                           ; BSR set to: 0
 27044  003C30  0100               	movlb	0	; () banked
 27045  003C32  8F6C               	bsf	(i1___ftmul@f2+1)& (0+255),7,b
 27046                           
 27047                           ; BSR set to: 0
 27048  003C34  0EFF               	movlw	255
 27049  003C36  0100               	movlb	0	; () banked
 27050  003C38  176B               	andwf	i1___ftmul@f2& (0+255),f,b
 27051  003C3A  0EFF               	movlw	255
 27052  003C3C  0100               	movlb	0	; () banked
 27053  003C3E  176C               	andwf	(i1___ftmul@f2+1)& (0+255),f,b
 27054  003C40  0E00               	movlw	0
 27055  003C42  0100               	movlb	0	; () banked
 27056  003C44  176D               	andwf	(i1___ftmul@f2+2)& (0+255),f,b
 27057                           
 27058                           ; BSR set to: 0
 27059  003C46  0E00               	movlw	0
 27060  003C48  0100               	movlb	0	; () banked
 27061  003C4A  6F72               	movwf	i1___ftmul@f3_as_product& (0+255),b
 27062  003C4C  0E00               	movlw	0
 27063  003C4E  0100               	movlb	0	; () banked
 27064  003C50  6F73               	movwf	(i1___ftmul@f3_as_product+1)& (0+255),b
 27065  003C52  0E00               	movlw	0
 27066  003C54  0100               	movlb	0	; () banked
 27067  003C56  6F74               	movwf	(i1___ftmul@f3_as_product+2)& (0+255),b
 27068                           
 27069                           ; BSR set to: 0
 27070  003C58  0E07               	movlw	7
 27071  003C5A  0100               	movlb	0	; () banked
 27072  003C5C  6F75               	movwf	i1___ftmul@cntr& (0+255),b
 27073  003C5E                     i1l6216:
 27074                           
 27075                           ; BSR set to: 0
 27076  003C5E  0100               	movlb	0	; () banked
 27077  003C60  A168               	btfss	i1___ftmul@f1& (0+255),0,b
 27078  003C62  D00C               	goto	i1l6220
 27079                           
 27080                           ; BSR set to: 0
 27081  003C64  0100               	movlb	0	; () banked
 27082  003C66  516B               	movf	i1___ftmul@f2& (0+255),w,b
 27083  003C68  0100               	movlb	0	; () banked
 27084  003C6A  2772               	addwf	i1___ftmul@f3_as_product& (0+255),f,b
 27085  003C6C  0100               	movlb	0	; () banked
 27086  003C6E  516C               	movf	(i1___ftmul@f2+1)& (0+255),w,b
 27087  003C70  0100               	movlb	0	; () banked
 27088  003C72  2373               	addwfc	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 27089  003C74  0100               	movlb	0	; () banked
 27090  003C76  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 27091  003C78  0100               	movlb	0	; () banked
 27092  003C7A  2374               	addwfc	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 27093  003C7C                     i1l6220:
 27094                           
 27095                           ; BSR set to: 0
 27096  003C7C  0100               	movlb	0	; () banked
 27097  003C7E  90D8               	bcf	status,0,c
 27098  003C80  336A               	rrcf	(i1___ftmul@f1+2)& (0+255),f,b
 27099  003C82  3369               	rrcf	(i1___ftmul@f1+1)& (0+255),f,b
 27100  003C84  3368               	rrcf	i1___ftmul@f1& (0+255),f,b
 27101  003C86  0100               	movlb	0	; () banked
 27102  003C88  90D8               	bcf	status,0,c
 27103  003C8A  376B               	rlcf	i1___ftmul@f2& (0+255),f,b
 27104  003C8C  376C               	rlcf	(i1___ftmul@f2+1)& (0+255),f,b
 27105  003C8E  376D               	rlcf	(i1___ftmul@f2+2)& (0+255),f,b
 27106                           
 27107                           ; BSR set to: 0
 27108  003C90  0100               	movlb	0	; () banked
 27109  003C92  2F75               	decfsz	i1___ftmul@cntr& (0+255),f,b
 27110  003C94  D7E4               	goto	i1l6216
 27111                           
 27112                           ; BSR set to: 0
 27113                           
 27114                           ; BSR set to: 0
 27115  003C96  0E09               	movlw	9
 27116  003C98  0100               	movlb	0	; () banked
 27117  003C9A  6F75               	movwf	i1___ftmul@cntr& (0+255),b
 27118  003C9C                     i1l6226:
 27119                           
 27120                           ; BSR set to: 0
 27121  003C9C  0100               	movlb	0	; () banked
 27122  003C9E  A168               	btfss	i1___ftmul@f1& (0+255),0,b
 27123  003CA0  D00C               	goto	i1l6230
 27124                           
 27125                           ; BSR set to: 0
 27126  003CA2  0100               	movlb	0	; () banked
 27127  003CA4  516B               	movf	i1___ftmul@f2& (0+255),w,b
 27128  003CA6  0100               	movlb	0	; () banked
 27129  003CA8  2772               	addwf	i1___ftmul@f3_as_product& (0+255),f,b
 27130  003CAA  0100               	movlb	0	; () banked
 27131  003CAC  516C               	movf	(i1___ftmul@f2+1)& (0+255),w,b
 27132  003CAE  0100               	movlb	0	; () banked
 27133  003CB0  2373               	addwfc	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 27134  003CB2  0100               	movlb	0	; () banked
 27135  003CB4  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 27136  003CB6  0100               	movlb	0	; () banked
 27137  003CB8  2374               	addwfc	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 27138  003CBA                     i1l6230:
 27139                           
 27140                           ; BSR set to: 0
 27141  003CBA  0100               	movlb	0	; () banked
 27142  003CBC  90D8               	bcf	status,0,c
 27143  003CBE  336A               	rrcf	(i1___ftmul@f1+2)& (0+255),f,b
 27144  003CC0  3369               	rrcf	(i1___ftmul@f1+1)& (0+255),f,b
 27145  003CC2  3368               	rrcf	i1___ftmul@f1& (0+255),f,b
 27146  003CC4  0100               	movlb	0	; () banked
 27147  003CC6  90D8               	bcf	status,0,c
 27148  003CC8  3374               	rrcf	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 27149  003CCA  3373               	rrcf	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 27150  003CCC  3372               	rrcf	i1___ftmul@f3_as_product& (0+255),f,b
 27151                           
 27152                           ; BSR set to: 0
 27153  003CCE  0100               	movlb	0	; () banked
 27154  003CD0  2F75               	decfsz	i1___ftmul@cntr& (0+255),f,b
 27155  003CD2  D7E4               	goto	i1l6226
 27156                           
 27157                           ; BSR set to: 0
 27158                           
 27159                           ; BSR set to: 0
 27160  003CD4  C072  F060         	movff	i1___ftmul@f3_as_product,i1___ftpack@arg
 27161  003CD8  C073  F061         	movff	i1___ftmul@f3_as_product+1,i1___ftpack@arg+1
 27162  003CDC  C074  F062         	movff	i1___ftmul@f3_as_product+2,i1___ftpack@arg+2
 27163  003CE0  C071  F063         	movff	i1___ftmul@exp,i1___ftpack@exp
 27164  003CE4  C076  F064         	movff	i1___ftmul@sign,i1___ftpack@sign
 27165  003CE8  ECEF  F025         	call	i1___ftpack	;wreg free
 27166  003CEC  C060  F068         	movff	?i1___ftpack,?i1___ftmul
 27167  003CF0  C061  F069         	movff	?i1___ftpack+1,?i1___ftmul+1
 27168  003CF4  C062  F06A         	movff	?i1___ftpack+2,?i1___ftmul+2
 27169  003CF8  0012               	return	
 27170  003CFA                     __end_ofi1___ftmul:
 27171                           	opt stack 0
 27172                           pclatu	equ	0xFFB
 27173                           pclath	equ	0xFFA
 27174                           tblptru	equ	0xFF8
 27175                           tblptrh	equ	0xFF7
 27176                           tblptrl	equ	0xFF6
 27177                           tablat	equ	0xFF5
 27178                           prodh	equ	0xFF4
 27179                           prodl	equ	0xFF3
 27180                           intcon	equ	0xFF2
 27181                           postinc0	equ	0xFEE
 27182                           fsr0h	equ	0xFEA
 27183                           fsr0l	equ	0xFE9
 27184                           wreg	equ	0xFE8
 27185                           postdec1	equ	0xFE5
 27186                           fsr1h	equ	0xFE2
 27187                           fsr1l	equ	0xFE1
 27188                           bsr	equ	0xFE0
 27189                           indf2	equ	0xFDF
 27190                           postinc2	equ	0xFDE
 27191                           postdec2	equ	0xFDD
 27192                           plusw2	equ	0xFDB
 27193                           fsr2h	equ	0xFDA
 27194                           fsr2l	equ	0xFD9
 27195                           status	equ	0xFD8
 27196                           
 27197 ;; *************** function i1___ftpack *****************
 27198 ;; Defined at:
 27199 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
 27200 ;; Parameters:    Size  Location     Type
 27201 ;;  arg             3    0[BANK0 ] unsigned um
 27202 ;;  exp             1    3[BANK0 ] unsigned char 
 27203 ;;  sign            1    4[BANK0 ] unsigned char 
 27204 ;; Auto vars:     Size  Location     Type
 27205 ;;		None
 27206 ;; Return value:  Size  Location     Type
 27207 ;;                  3    0[BANK0 ] float 
 27208 ;; Registers used:
 27209 ;;		wreg, status,2, status,0
 27210 ;; Tracked objects:
 27211 ;;		On entry : 0/0
 27212 ;;		On exit  : 0/0
 27213 ;;		Unchanged: 0/0
 27214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27215 ;;      Params:         0       5       0       0       0       0       0
 27216 ;;      Locals:         0       0       0       0       0       0       0
 27217 ;;      Temps:          0       3       0       0       0       0       0
 27218 ;;      Totals:         0       8       0       0       0       0       0
 27219 ;;Total ram usage:        8 bytes
 27220 ;; Hardware stack levels used:    1
 27221 ;; Hardware stack levels required when called:    4
 27222 ;; This function calls:
 27223 ;;		Nothing
 27224 ;; This function is called by:
 27225 ;;		i1___altoft
 27226 ;;		i1___ftadd
 27227 ;;		i1___ftdiv
 27228 ;;		i1___ftmul
 27229 ;; This function uses a non-reentrant model
 27230 ;;
 27231                           
 27232                           	psect	text114
 27233  004BDE                     __ptext114:
 27234                           	opt stack 0
 27235  004BDE                     i1___ftpack:
 27236                           	opt stack 11
 27237                           
 27238                           ;incstack = 0
 27239  004BDE  0100               	movlb	0	; () banked
 27240  004BE0  5163               	movf	i1___ftpack@exp& (0+255),w,b
 27241  004BE2  0100               	movlb	0	; () banked
 27242  004BE4  B4D8               	btfsc	status,2,c
 27243  004BE6  D008               	goto	i1l5840
 27244                           
 27245                           ; BSR set to: 0
 27246  004BE8  0100               	movlb	0	; () banked
 27247  004BEA  5160               	movf	i1___ftpack@arg& (0+255),w,b
 27248  004BEC  0100               	movlb	0	; () banked
 27249  004BEE  1161               	iorwf	(i1___ftpack@arg+1)& (0+255),w,b
 27250  004BF0  0100               	movlb	0	; () banked
 27251  004BF2  1162               	iorwf	(i1___ftpack@arg+2)& (0+255),w,b
 27252  004BF4  A4D8               	btfss	status,2,c
 27253  004BF6  D011               	goto	i1l5846
 27254  004BF8                     i1l5840:
 27255                           
 27256                           ; BSR set to: 0
 27257  004BF8  0E00               	movlw	0
 27258  004BFA  0100               	movlb	0	; () banked
 27259  004BFC  6F60               	movwf	?i1___ftpack& (0+255),b
 27260  004BFE  0E00               	movlw	0
 27261  004C00  0100               	movlb	0	; () banked
 27262  004C02  6F61               	movwf	(?i1___ftpack+1)& (0+255),b
 27263  004C04  0E00               	movlw	0
 27264  004C06  0100               	movlb	0	; () banked
 27265  004C08  6F62               	movwf	(?i1___ftpack+2)& (0+255),b
 27266                           
 27267                           ; BSR set to: 0
 27268  004C0A  0012               	return	
 27269  004C0C                     i1l5844:
 27270                           
 27271                           ; BSR set to: 0
 27272  004C0C  0100               	movlb	0	; () banked
 27273  004C0E  2B63               	incf	i1___ftpack@exp& (0+255),f,b
 27274  004C10  0100               	movlb	0	; () banked
 27275  004C12  90D8               	bcf	status,0,c
 27276  004C14  3362               	rrcf	(i1___ftpack@arg+2)& (0+255),f,b
 27277  004C16  3361               	rrcf	(i1___ftpack@arg+1)& (0+255),f,b
 27278  004C18  3360               	rrcf	i1___ftpack@arg& (0+255),f,b
 27279  004C1A                     i1l5846:
 27280                           
 27281                           ; BSR set to: 0
 27282  004C1A  0E00               	movlw	0
 27283  004C1C  0100               	movlb	0	; () banked
 27284  004C1E  1560               	andwf	i1___ftpack@arg& (0+255),w,b
 27285  004C20  0100               	movlb	0	; () banked
 27286  004C22  6F65               	movwf	??i1___ftpack& (0+255),b
 27287  004C24  0E00               	movlw	0
 27288  004C26  0100               	movlb	0	; () banked
 27289  004C28  1561               	andwf	(i1___ftpack@arg+1)& (0+255),w,b
 27290  004C2A  0100               	movlb	0	; () banked
 27291  004C2C  6F66               	movwf	(??i1___ftpack+1)& (0+255),b
 27292  004C2E  0EFE               	movlw	254
 27293  004C30  0100               	movlb	0	; () banked
 27294  004C32  1562               	andwf	(i1___ftpack@arg+2)& (0+255),w,b
 27295  004C34  0100               	movlb	0	; () banked
 27296  004C36  6F67               	movwf	(??i1___ftpack+2)& (0+255),b
 27297  004C38  0100               	movlb	0	; () banked
 27298  004C3A  5165               	movf	??i1___ftpack& (0+255),w,b
 27299  004C3C  0100               	movlb	0	; () banked
 27300  004C3E  1166               	iorwf	(??i1___ftpack+1)& (0+255),w,b
 27301  004C40  0100               	movlb	0	; () banked
 27302  004C42  1167               	iorwf	(??i1___ftpack+2)& (0+255),w,b
 27303  004C44  B4D8               	btfsc	status,2,c
 27304  004C46  D011               	goto	i1l5852
 27305  004C48  D7E1               	goto	i1l5844
 27306  004C4A                     i1l5848:
 27307                           
 27308                           ; BSR set to: 0
 27309  004C4A  0100               	movlb	0	; () banked
 27310  004C4C  2B63               	incf	i1___ftpack@exp& (0+255),f,b
 27311                           
 27312                           ; BSR set to: 0
 27313  004C4E  0E01               	movlw	1
 27314  004C50  0100               	movlb	0	; () banked
 27315  004C52  2760               	addwf	i1___ftpack@arg& (0+255),f,b
 27316  004C54  0E00               	movlw	0
 27317  004C56  0100               	movlb	0	; () banked
 27318  004C58  2361               	addwfc	(i1___ftpack@arg+1)& (0+255),f,b
 27319  004C5A  0E00               	movlw	0
 27320  004C5C  0100               	movlb	0	; () banked
 27321  004C5E  2362               	addwfc	(i1___ftpack@arg+2)& (0+255),f,b
 27322  004C60  0100               	movlb	0	; () banked
 27323  004C62  90D8               	bcf	status,0,c
 27324  004C64  3362               	rrcf	(i1___ftpack@arg+2)& (0+255),f,b
 27325  004C66  3361               	rrcf	(i1___ftpack@arg+1)& (0+255),f,b
 27326  004C68  3360               	rrcf	i1___ftpack@arg& (0+255),f,b
 27327  004C6A                     i1l5852:
 27328                           
 27329                           ; BSR set to: 0
 27330  004C6A  0E00               	movlw	0
 27331  004C6C  0100               	movlb	0	; () banked
 27332  004C6E  1560               	andwf	i1___ftpack@arg& (0+255),w,b
 27333  004C70  0100               	movlb	0	; () banked
 27334  004C72  6F65               	movwf	??i1___ftpack& (0+255),b
 27335  004C74  0E00               	movlw	0
 27336  004C76  0100               	movlb	0	; () banked
 27337  004C78  1561               	andwf	(i1___ftpack@arg+1)& (0+255),w,b
 27338  004C7A  0100               	movlb	0	; () banked
 27339  004C7C  6F66               	movwf	(??i1___ftpack+1)& (0+255),b
 27340  004C7E  0EFF               	movlw	255
 27341  004C80  0100               	movlb	0	; () banked
 27342  004C82  1562               	andwf	(i1___ftpack@arg+2)& (0+255),w,b
 27343  004C84  0100               	movlb	0	; () banked
 27344  004C86  6F67               	movwf	(??i1___ftpack+2)& (0+255),b
 27345  004C88  0100               	movlb	0	; () banked
 27346  004C8A  5165               	movf	??i1___ftpack& (0+255),w,b
 27347  004C8C  0100               	movlb	0	; () banked
 27348  004C8E  1166               	iorwf	(??i1___ftpack+1)& (0+255),w,b
 27349  004C90  0100               	movlb	0	; () banked
 27350  004C92  1167               	iorwf	(??i1___ftpack+2)& (0+255),w,b
 27351  004C94  B4D8               	btfsc	status,2,c
 27352  004C96  D008               	goto	i1l5856
 27353  004C98  D7D8               	goto	i1l5848
 27354  004C9A                     i1l5854:
 27355                           
 27356                           ; BSR set to: 0
 27357  004C9A  0100               	movlb	0	; () banked
 27358  004C9C  0763               	decf	i1___ftpack@exp& (0+255),f,b
 27359  004C9E  0100               	movlb	0	; () banked
 27360  004CA0  90D8               	bcf	status,0,c
 27361  004CA2  3760               	rlcf	i1___ftpack@arg& (0+255),f,b
 27362  004CA4  3761               	rlcf	(i1___ftpack@arg+1)& (0+255),f,b
 27363  004CA6  3762               	rlcf	(i1___ftpack@arg+2)& (0+255),f,b
 27364  004CA8                     i1l5856:
 27365                           
 27366                           ; BSR set to: 0
 27367  004CA8  0100               	movlb	0	; () banked
 27368  004CAA  BF61               	btfsc	(i1___ftpack@arg+1)& (0+255),7,b
 27369  004CAC  D004               	goto	i1l1311
 27370                           
 27371                           ; BSR set to: 0
 27372  004CAE  0E02               	movlw	2
 27373  004CB0  0100               	movlb	0	; () banked
 27374  004CB2  6163               	cpfslt	i1___ftpack@exp& (0+255),b
 27375  004CB4  D7F2               	goto	i1l5854
 27376  004CB6                     i1l1311:
 27377                           
 27378                           ; BSR set to: 0
 27379  004CB6  0100               	movlb	0	; () banked
 27380  004CB8  B163               	btfsc	i1___ftpack@exp& (0+255),0,b
 27381  004CBA  D002               	goto	i1l5862
 27382                           
 27383                           ; BSR set to: 0
 27384  004CBC  0100               	movlb	0	; () banked
 27385  004CBE  9F61               	bcf	(i1___ftpack@arg+1)& (0+255),7,b
 27386  004CC0                     i1l5862:
 27387                           
 27388                           ; BSR set to: 0
 27389  004CC0  0100               	movlb	0	; () banked
 27390  004CC2  90D8               	bcf	status,0,c
 27391  004CC4  3363               	rrcf	i1___ftpack@exp& (0+255),f,b
 27392  004CC6  0100               	movlb	0	; () banked
 27393  004CC8  5163               	movf	i1___ftpack@exp& (0+255),w,b
 27394  004CCA  0100               	movlb	0	; () banked
 27395  004CCC  1362               	iorwf	(i1___ftpack@arg+2)& (0+255),f,b
 27396                           
 27397                           ; BSR set to: 0
 27398  004CCE  0100               	movlb	0	; () banked
 27399  004CD0  5164               	movf	i1___ftpack@sign& (0+255),w,b
 27400  004CD2  0100               	movlb	0	; () banked
 27401  004CD4  B4D8               	btfsc	status,2,c
 27402  004CD6  D002               	goto	i1l5868
 27403                           
 27404                           ; BSR set to: 0
 27405  004CD8  0100               	movlb	0	; () banked
 27406  004CDA  8F62               	bsf	(i1___ftpack@arg+2)& (0+255),7,b
 27407  004CDC                     i1l5868:
 27408                           
 27409                           ; BSR set to: 0
 27410  004CDC  C060  F060         	movff	i1___ftpack@arg,?i1___ftpack
 27411  004CE0  C061  F061         	movff	i1___ftpack@arg+1,?i1___ftpack+1
 27412  004CE4  C062  F062         	movff	i1___ftpack@arg+2,?i1___ftpack+2
 27413  004CE8  0012               	return	
 27414  004CEA                     __end_ofi1___ftpack:
 27415                           	opt stack 0
 27416                           pclatu	equ	0xFFB
 27417                           pclath	equ	0xFFA
 27418                           tblptru	equ	0xFF8
 27419                           tblptrh	equ	0xFF7
 27420                           tblptrl	equ	0xFF6
 27421                           tablat	equ	0xFF5
 27422                           prodh	equ	0xFF4
 27423                           prodl	equ	0xFF3
 27424                           intcon	equ	0xFF2
 27425                           postinc0	equ	0xFEE
 27426                           fsr0h	equ	0xFEA
 27427                           fsr0l	equ	0xFE9
 27428                           wreg	equ	0xFE8
 27429                           postdec1	equ	0xFE5
 27430                           fsr1h	equ	0xFE2
 27431                           fsr1l	equ	0xFE1
 27432                           bsr	equ	0xFE0
 27433                           indf2	equ	0xFDF
 27434                           postinc2	equ	0xFDE
 27435                           postdec2	equ	0xFDD
 27436                           plusw2	equ	0xFDB
 27437                           fsr2h	equ	0xFDA
 27438                           fsr2l	equ	0xFD9
 27439                           status	equ	0xFD8
 27440                           
 27441 ;; *************** function _T2int *****************
 27442 ;; Defined at:
 27443 ;;		line 62 in file "source/PWMConfig.h"
 27444 ;; Parameters:    Size  Location     Type
 27445 ;;		None
 27446 ;; Auto vars:     Size  Location     Type
 27447 ;;		None
 27448 ;; Return value:  Size  Location     Type
 27449 ;;                  1    wreg      void 
 27450 ;; Registers used:
 27451 ;;		wreg, status,2, status,0, cstack
 27452 ;; Tracked objects:
 27453 ;;		On entry : 0/0
 27454 ;;		On exit  : 0/0
 27455 ;;		Unchanged: 0/0
 27456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27457 ;;      Params:         0       0       0       0       0       0       0
 27458 ;;      Locals:         0       0       0       0       0       0       0
 27459 ;;      Temps:          0       1       0       0       0       0       0
 27460 ;;      Totals:         0       1       0       0       0       0       0
 27461 ;;Total ram usage:        1 bytes
 27462 ;; Hardware stack levels used:    1
 27463 ;; Hardware stack levels required when called:    6
 27464 ;; This function calls:
 27465 ;;		_saveProcessState
 27466 ;;		i1_initProtocoll
 27467 ;;		i1_setPWM2duty
 27468 ;; This function is called by:
 27469 ;;		_isr
 27470 ;; This function uses a non-reentrant model
 27471 ;;
 27472                           
 27473                           	psect	text115
 27474  002CA8                     __ptext115:
 27475                           	opt stack 0
 27476  002CA8                     _T2int:
 27477                           	opt stack 13
 27478                           
 27479                           ;PWMConfig.h: 63: if(!processStarted && actualScreen != 14 && !ready2Cut)
 27480                           
 27481                           ; BSR set to: 0
 27482                           ;incstack = 0
 27483  002CA8  0100               	movlb	0	; () banked
 27484  002CAA  51C0               	movf	_processStarted& (0+255),w,b
 27485  002CAC  A4D8               	btfss	status,2,c
 27486  002CAE  D009               	goto	i1l9032
 27487                           
 27488                           ; BSR set to: 0
 27489  002CB0  0E0E               	movlw	14
 27490  002CB2  0101               	movlb	1	; () banked
 27491  002CB4  19BD               	xorwf	_actualScreen& (0+255),w,b
 27492  002CB6  B4D8               	btfsc	status,2,c
 27493  002CB8  D004               	goto	i1l9032
 27494                           
 27495                           ; BSR set to: 1
 27496  002CBA  0100               	movlb	0	; () banked
 27497  002CBC  51BF               	movf	_ready2Cut& (0+255),w,b
 27498  002CBE  B4D8               	btfsc	status,2,c
 27499                           
 27500                           ; BSR set to: 0
 27501                           ;PWMConfig.h: 64: LATCbits.LATC4 = 0;
 27502  002CC0  988B               	bcf	3979,4,c	;volatile
 27503  002CC2                     i1l9032:
 27504                           
 27505                           ;PWMConfig.h: 65: t2Cont1++;
 27506  002CC2  0100               	movlb	0	; () banked
 27507  002CC4  2BBB               	incf	_t2Cont1& (0+255),f,b
 27508                           
 27509                           ; BSR set to: 0
 27510                           ;PWMConfig.h: 66: if(PORTAbits.RA7 && !lastSttFC1) {
 27511  002CC6  AE80               	btfss	3968,7,c	;volatile
 27512  002CC8  D052               	goto	i1l506
 27513                           
 27514                           ; BSR set to: 0
 27515  002CCA  0100               	movlb	0	; () banked
 27516  002CCC  51B9               	movf	_lastSttFC1& (0+255),w,b
 27517  002CCE  A4D8               	btfss	status,2,c
 27518  002CD0  D04E               	goto	i1l506
 27519                           
 27520                           ; BSR set to: 0
 27521                           ;PWMConfig.h: 67: lastSttFC1 = 1;
 27522  002CD2  0E01               	movlw	1
 27523  002CD4  0100               	movlb	0	; () banked
 27524  002CD6  6FB9               	movwf	_lastSttFC1& (0+255),b
 27525                           
 27526                           ; BSR set to: 0
 27527                           ;PWMConfig.h: 68: setPWM2duty(0);
 27528  002CD8  0E00               	movlw	0
 27529  002CDA  0100               	movlb	0	; () banked
 27530  002CDC  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 27531  002CDE  0E00               	movlw	0
 27532  002CE0  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 27533  002CE2  ECCE  F02F         	call	i1_setPWM2duty	;wreg free
 27534                           
 27535                           ;PWMConfig.h: 69: bladeIsUP = 1;
 27536  002CE6  0E01               	movlw	1
 27537  002CE8  0100               	movlb	0	; () banked
 27538  002CEA  6FD4               	movwf	_bladeIsUP& (0+255),b
 27539                           
 27540                           ; BSR set to: 0
 27541                           ;PWMConfig.h: 70: processTimer = 0;
 27542  002CEC  0E00               	movlw	0
 27543  002CEE  6E3B               	movwf	_processTimer,c
 27544  002CF0  0E00               	movlw	0
 27545  002CF2  6E3C               	movwf	_processTimer+1,c
 27546  002CF4  0E00               	movlw	0
 27547  002CF6  6E3D               	movwf	_processTimer+2,c
 27548  002CF8  0E00               	movlw	0
 27549  002CFA  6E3E               	movwf	_processTimer+3,c
 27550                           
 27551                           ; BSR set to: 0
 27552                           ;PWMConfig.h: 71: if(processStarted)
 27553  002CFC  0100               	movlb	0	; () banked
 27554  002CFE  51C0               	movf	_processStarted& (0+255),w,b
 27555  002D00  B4D8               	btfsc	status,2,c
 27556  002D02  D003               	goto	i1l9050
 27557                           
 27558                           ; BSR set to: 0
 27559                           ;PWMConfig.h: 72: processState++;
 27560  002D04  0100               	movlb	0	; () banked
 27561  002D06  4BB2               	infsnz	_processState& (0+255),f,b
 27562  002D08  2BB3               	incf	(_processState+1)& (0+255),f,b
 27563  002D0A                     i1l9050:
 27564                           
 27565                           ; BSR set to: 0
 27566                           ;PWMConfig.h: 73: securTimer = 0;
 27567  002D0A  0E00               	movlw	0
 27568  002D0C  6E37               	movwf	_securTimer,c
 27569  002D0E  0E00               	movlw	0
 27570  002D10  6E38               	movwf	_securTimer+1,c
 27571  002D12  0E00               	movlw	0
 27572  002D14  6E39               	movwf	_securTimer+2,c
 27573  002D16  0E00               	movlw	0
 27574  002D18  6E3A               	movwf	_securTimer+3,c
 27575                           
 27576                           ; BSR set to: 0
 27577                           ;PWMConfig.h: 74: if(processStarted && processState >= numCortes) {
 27578  002D1A  0100               	movlb	0	; () banked
 27579  002D1C  51C0               	movf	_processStarted& (0+255),w,b
 27580  002D1E  B4D8               	btfsc	status,2,c
 27581  002D20  D022               	goto	i1l9066
 27582                           
 27583                           ; BSR set to: 0
 27584  002D22  0100               	movlb	0	; () banked
 27585  002D24  51D2               	movf	_numCortes& (0+255),w,b
 27586  002D26  0100               	movlb	0	; () banked
 27587  002D28  5DB2               	subwf	_processState& (0+255),w,b
 27588  002D2A  0100               	movlb	0	; () banked
 27589  002D2C  51B3               	movf	(_processState+1)& (0+255),w,b
 27590  002D2E  0A80               	xorlw	128
 27591  002D30  0100               	movlb	0	; () banked
 27592  002D32  6F67               	movwf	??_T2int& (0+255),b
 27593  002D34  0100               	movlb	0	; () banked
 27594  002D36  51D3               	movf	(_numCortes+1)& (0+255),w,b
 27595  002D38  0A80               	xorlw	128
 27596  002D3A  0100               	movlb	0	; () banked
 27597  002D3C  5967               	subwfb	??_T2int& (0+255),w,b
 27598  002D3E  A0D8               	btfss	status,0,c
 27599  002D40  D012               	goto	i1l9066
 27600                           
 27601                           ; BSR set to: 0
 27602                           ;PWMConfig.h: 75: processStarted = 0;
 27603  002D42  0E00               	movlw	0
 27604  002D44  0100               	movlb	0	; () banked
 27605  002D46  6FC0               	movwf	_processStarted& (0+255),b
 27606                           
 27607                           ; BSR set to: 0
 27608                           ;PWMConfig.h: 76: saveProcessState();
 27609  002D48  ECA2  F037         	call	_saveProcessState	;wreg free
 27610                           
 27611                           ;PWMConfig.h: 77: if(calibMode) {
 27612  002D4C  0100               	movlb	0	; () banked
 27613  002D4E  51BE               	movf	_calibMode& (0+255),w,b
 27614  002D50  B4D8               	btfsc	status,2,c
 27615  002D52  D006               	goto	i1l9064
 27616                           
 27617                           ; BSR set to: 0
 27618                           ;PWMConfig.h: 78: actualScreen = 12;
 27619  002D54  0E0C               	movlw	12
 27620  002D56  0101               	movlb	1	; () banked
 27621  002D58  6FBD               	movwf	_actualScreen& (0+255),b
 27622                           
 27623                           ;PWMConfig.h: 79: tempLastScreen = 6;
 27624  002D5A  0E06               	movlw	6
 27625  002D5C  0100               	movlb	0	; () banked
 27626  002D5E  6FBC               	movwf	_tempLastScreen& (0+255),b
 27627  002D60                     i1l9064:
 27628                           
 27629                           ; BSR set to: 0
 27630                           ;PWMConfig.h: 80: }
 27631                           ;PWMConfig.h: 81: initProtocoll(1);
 27632  002D60  0E01               	movlw	1
 27633  002D62  ECCC  F036         	call	i1_initProtocoll
 27634  002D66                     i1l9066:
 27635                           
 27636                           ;PWMConfig.h: 82: }
 27637                           ;PWMConfig.h: 84: t2Cont1 = 0;
 27638  002D66  0E00               	movlw	0
 27639  002D68  0100               	movlb	0	; () banked
 27640  002D6A  6FBB               	movwf	_t2Cont1& (0+255),b
 27641                           
 27642                           ;PWMConfig.h: 85: }else if(!PORTAbits.RA7 && lastSttFC1) {
 27643  002D6C  D01B               	goto	i1l9080
 27644  002D6E                     i1l506:
 27645                           
 27646                           ; BSR set to: 0
 27647  002D6E  BE80               	btfsc	3968,7,c	;volatile
 27648  002D70  D00C               	goto	i1l9074
 27649                           
 27650                           ; BSR set to: 0
 27651  002D72  0100               	movlb	0	; () banked
 27652  002D74  51B9               	movf	_lastSttFC1& (0+255),w,b
 27653  002D76  B4D8               	btfsc	status,2,c
 27654  002D78  D008               	goto	i1l9074
 27655                           
 27656                           ; BSR set to: 0
 27657                           ;PWMConfig.h: 86: if(t2Cont1 > 124)
 27658  002D7A  0E7C               	movlw	124
 27659  002D7C  0100               	movlb	0	; () banked
 27660  002D7E  65BB               	cpfsgt	_t2Cont1& (0+255),b
 27661  002D80  D011               	goto	i1l9080
 27662                           
 27663                           ; BSR set to: 0
 27664                           ;PWMConfig.h: 87: lastSttFC1 = 0;
 27665  002D82  0E00               	movlw	0
 27666  002D84  0100               	movlb	0	; () banked
 27667  002D86  6FB9               	movwf	_lastSttFC1& (0+255),b
 27668                           
 27669                           ; BSR set to: 0
 27670                           ;PWMConfig.h: 92: }else if(PORTAbits.RA7 == lastSttFC1) {
 27671  002D88  D00D               	goto	i1l9080
 27672  002D8A                     i1l9074:
 27673                           
 27674                           ; BSR set to: 0
 27675  002D8A  AE80               	btfss	3968,7,c	;volatile
 27676  002D8C  D002               	goto	i1u1304_20
 27677  002D8E  0E01               	movlw	1
 27678  002D90  D001               	goto	i1u1304_26
 27679  002D92                     i1u1304_20:
 27680  002D92  0E00               	movlw	0
 27681  002D94                     i1u1304_26:
 27682  002D94  0100               	movlb	0	; () banked
 27683  002D96  19B9               	xorwf	_lastSttFC1& (0+255),w,b
 27684  002D98  B4D8               	btfsc	status,2,c
 27685                           
 27686                           ; BSR set to: 0
 27687                           ;PWMConfig.h: 93: if(!PORTAbits.RA7) {
 27688  002D9A  BE80               	btfsc	3968,7,c	;volatile
 27689  002D9C  D003               	goto	i1l9080
 27690                           
 27691                           ; BSR set to: 0
 27692                           ;PWMConfig.h: 94: holdFC1cont = 0;
 27693  002D9E  0E00               	movlw	0
 27694  002DA0  0100               	movlb	0	; () banked
 27695  002DA2  6FB8               	movwf	_holdFC1cont& (0+255),b
 27696  002DA4                     i1l9080:
 27697                           
 27698                           ; BSR set to: 0
 27699                           ;PWMConfig.h: 107: }
 27700                           ;PWMConfig.h: 108: }
 27701                           ;PWMConfig.h: 109: t2Cont2++;
 27702  002DA4  0100               	movlb	0	; () banked
 27703  002DA6  2BBA               	incf	_t2Cont2& (0+255),f,b
 27704                           
 27705                           ; BSR set to: 0
 27706                           ;PWMConfig.h: 110: if(PORTAbits.RA6 && !lastSttFC2) {
 27707  002DA8  AC80               	btfss	3968,6,c	;volatile
 27708  002DAA  D05E               	goto	i1l517
 27709                           
 27710                           ; BSR set to: 0
 27711  002DAC  0100               	movlb	0	; () banked
 27712  002DAE  51B7               	movf	_lastSttFC2& (0+255),w,b
 27713  002DB0  A4D8               	btfss	status,2,c
 27714  002DB2  D05A               	goto	i1l517
 27715                           
 27716                           ; BSR set to: 0
 27717                           ;PWMConfig.h: 111: lastSttFC2 = 1;
 27718  002DB4  0E01               	movlw	1
 27719  002DB6  0100               	movlb	0	; () banked
 27720  002DB8  6FB7               	movwf	_lastSttFC2& (0+255),b
 27721                           
 27722                           ; BSR set to: 0
 27723                           ;PWMConfig.h: 112: setPWM2duty(0);
 27724  002DBA  0E00               	movlw	0
 27725  002DBC  0100               	movlb	0	; () banked
 27726  002DBE  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 27727  002DC0  0E00               	movlw	0
 27728  002DC2  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 27729  002DC4  ECCE  F02F         	call	i1_setPWM2duty	;wreg free
 27730                           
 27731                           ;PWMConfig.h: 113: bladeIsUP = 0;
 27732  002DC8  0E00               	movlw	0
 27733  002DCA  0100               	movlb	0	; () banked
 27734  002DCC  6FD4               	movwf	_bladeIsUP& (0+255),b
 27735                           
 27736                           ; BSR set to: 0
 27737                           ;PWMConfig.h: 114: processTimer = 0;
 27738  002DCE  0E00               	movlw	0
 27739  002DD0  6E3B               	movwf	_processTimer,c
 27740  002DD2  0E00               	movlw	0
 27741  002DD4  6E3C               	movwf	_processTimer+1,c
 27742  002DD6  0E00               	movlw	0
 27743  002DD8  6E3D               	movwf	_processTimer+2,c
 27744  002DDA  0E00               	movlw	0
 27745  002DDC  6E3E               	movwf	_processTimer+3,c
 27746                           
 27747                           ; BSR set to: 0
 27748                           ;PWMConfig.h: 115: securTimer = 0;
 27749  002DDE  0E00               	movlw	0
 27750  002DE0  6E37               	movwf	_securTimer,c
 27751  002DE2  0E00               	movlw	0
 27752  002DE4  6E38               	movwf	_securTimer+1,c
 27753  002DE6  0E00               	movlw	0
 27754  002DE8  6E39               	movwf	_securTimer+2,c
 27755  002DEA  0E00               	movlw	0
 27756  002DEC  6E3A               	movwf	_securTimer+3,c
 27757                           
 27758                           ; BSR set to: 0
 27759                           ;PWMConfig.h: 116: if(processStarted)
 27760  002DEE  0100               	movlb	0	; () banked
 27761  002DF0  51C0               	movf	_processStarted& (0+255),w,b
 27762  002DF2  B4D8               	btfsc	status,2,c
 27763  002DF4  D003               	goto	i1l9100
 27764                           
 27765                           ; BSR set to: 0
 27766                           ;PWMConfig.h: 117: processState++;
 27767  002DF6  0100               	movlb	0	; () banked
 27768  002DF8  4BB2               	infsnz	_processState& (0+255),f,b
 27769  002DFA  2BB3               	incf	(_processState+1)& (0+255),f,b
 27770  002DFC                     i1l9100:
 27771                           
 27772                           ; BSR set to: 0
 27773                           ;PWMConfig.h: 118: if(ready2Cut) {
 27774  002DFC  0100               	movlb	0	; () banked
 27775  002DFE  51BF               	movf	_ready2Cut& (0+255),w,b
 27776  002E00  B4D8               	btfsc	status,2,c
 27777  002E02  D006               	goto	i1l9104
 27778                           
 27779                           ; BSR set to: 0
 27780                           ;PWMConfig.h: 119: processStarted = 1;
 27781  002E04  0E01               	movlw	1
 27782  002E06  0100               	movlb	0	; () banked
 27783  002E08  6FC0               	movwf	_processStarted& (0+255),b
 27784                           
 27785                           ;PWMConfig.h: 120: ready2Cut = 0;
 27786  002E0A  0E00               	movlw	0
 27787  002E0C  0100               	movlb	0	; () banked
 27788  002E0E  6FBF               	movwf	_ready2Cut& (0+255),b
 27789  002E10                     i1l9104:
 27790                           
 27791                           ; BSR set to: 0
 27792                           ;PWMConfig.h: 121: }
 27793                           ;PWMConfig.h: 122: saveProcessState();
 27794  002E10  ECA2  F037         	call	_saveProcessState	;wreg free
 27795                           
 27796                           ;PWMConfig.h: 123: if(processStarted && processState >= numCortes) {
 27797  002E14  0100               	movlb	0	; () banked
 27798  002E16  51C0               	movf	_processStarted& (0+255),w,b
 27799  002E18  B4D8               	btfsc	status,2,c
 27800  002E1A  D022               	goto	i1l9120
 27801                           
 27802                           ; BSR set to: 0
 27803  002E1C  0100               	movlb	0	; () banked
 27804  002E1E  51D2               	movf	_numCortes& (0+255),w,b
 27805  002E20  0100               	movlb	0	; () banked
 27806  002E22  5DB2               	subwf	_processState& (0+255),w,b
 27807  002E24  0100               	movlb	0	; () banked
 27808  002E26  51B3               	movf	(_processState+1)& (0+255),w,b
 27809  002E28  0A80               	xorlw	128
 27810  002E2A  0100               	movlb	0	; () banked
 27811  002E2C  6F67               	movwf	??_T2int& (0+255),b
 27812  002E2E  0100               	movlb	0	; () banked
 27813  002E30  51D3               	movf	(_numCortes+1)& (0+255),w,b
 27814  002E32  0A80               	xorlw	128
 27815  002E34  0100               	movlb	0	; () banked
 27816  002E36  5967               	subwfb	??_T2int& (0+255),w,b
 27817  002E38  A0D8               	btfss	status,0,c
 27818  002E3A  D012               	goto	i1l9120
 27819                           
 27820                           ; BSR set to: 0
 27821                           ;PWMConfig.h: 124: processStarted = 0;
 27822  002E3C  0E00               	movlw	0
 27823  002E3E  0100               	movlb	0	; () banked
 27824  002E40  6FC0               	movwf	_processStarted& (0+255),b
 27825                           
 27826                           ; BSR set to: 0
 27827                           ;PWMConfig.h: 125: saveProcessState();
 27828  002E42  ECA2  F037         	call	_saveProcessState	;wreg free
 27829                           
 27830                           ;PWMConfig.h: 126: if(calibMode) {
 27831  002E46  0100               	movlb	0	; () banked
 27832  002E48  51BE               	movf	_calibMode& (0+255),w,b
 27833  002E4A  B4D8               	btfsc	status,2,c
 27834  002E4C  D006               	goto	i1l9118
 27835                           
 27836                           ; BSR set to: 0
 27837                           ;PWMConfig.h: 127: actualScreen = 12;
 27838  002E4E  0E0C               	movlw	12
 27839  002E50  0101               	movlb	1	; () banked
 27840  002E52  6FBD               	movwf	_actualScreen& (0+255),b
 27841                           
 27842                           ;PWMConfig.h: 128: tempLastScreen = 6;
 27843  002E54  0E06               	movlw	6
 27844  002E56  0100               	movlb	0	; () banked
 27845  002E58  6FBC               	movwf	_tempLastScreen& (0+255),b
 27846  002E5A                     i1l9118:
 27847                           
 27848                           ; BSR set to: 0
 27849                           ;PWMConfig.h: 129: }
 27850                           ;PWMConfig.h: 130: initProtocoll(1);
 27851  002E5A  0E01               	movlw	1
 27852  002E5C  ECCC  F036         	call	i1_initProtocoll
 27853  002E60                     i1l9120:
 27854                           
 27855                           ;PWMConfig.h: 131: }
 27856                           ;PWMConfig.h: 132: t2Cont2 = 0;
 27857  002E60  0E00               	movlw	0
 27858  002E62  0100               	movlb	0	; () banked
 27859  002E64  6FBA               	movwf	_t2Cont2& (0+255),b
 27860                           
 27861                           ;PWMConfig.h: 133: }else if(!PORTAbits.RA6 && lastSttFC2) {
 27862  002E66  0012               	return	
 27863  002E68                     i1l517:
 27864                           
 27865                           ; BSR set to: 0
 27866  002E68  BC80               	btfsc	3968,6,c	;volatile
 27867  002E6A  D00C               	goto	i1l9128
 27868                           
 27869                           ; BSR set to: 0
 27870  002E6C  0100               	movlb	0	; () banked
 27871  002E6E  51B7               	movf	_lastSttFC2& (0+255),w,b
 27872  002E70  B4D8               	btfsc	status,2,c
 27873  002E72  D008               	goto	i1l9128
 27874                           
 27875                           ; BSR set to: 0
 27876                           ;PWMConfig.h: 134: if(t2Cont2 > 124)
 27877  002E74  0E7C               	movlw	124
 27878  002E76  0100               	movlb	0	; () banked
 27879  002E78  65BA               	cpfsgt	_t2Cont2& (0+255),b
 27880  002E7A  0012               	return	
 27881                           
 27882                           ; BSR set to: 0
 27883                           ;PWMConfig.h: 135: lastSttFC2 = 0;
 27884  002E7C  0E00               	movlw	0
 27885  002E7E  0100               	movlb	0	; () banked
 27886  002E80  6FB7               	movwf	_lastSttFC2& (0+255),b
 27887                           
 27888                           ; BSR set to: 0
 27889                           ;PWMConfig.h: 140: }else if(PORTAbits.RA6 == lastSttFC2) {
 27890  002E82  0012               	return	
 27891  002E84                     i1l9128:
 27892                           
 27893                           ; BSR set to: 0
 27894  002E84  AC80               	btfss	3968,6,c	;volatile
 27895  002E86  D002               	goto	i1u1317_20
 27896  002E88  0E01               	movlw	1
 27897  002E8A  D001               	goto	i1u1317_26
 27898  002E8C                     i1u1317_20:
 27899  002E8C  0E00               	movlw	0
 27900  002E8E                     i1u1317_26:
 27901  002E8E  0100               	movlb	0	; () banked
 27902  002E90  19B7               	xorwf	_lastSttFC2& (0+255),w,b
 27903  002E92  A4D8               	btfss	status,2,c
 27904  002E94  0012               	return	
 27905                           
 27906                           ; BSR set to: 0
 27907                           ;PWMConfig.h: 141: if(!PORTAbits.RA6) {
 27908  002E96  BC80               	btfsc	3968,6,c	;volatile
 27909  002E98  0012               	return	
 27910                           
 27911                           ; BSR set to: 0
 27912                           ;PWMConfig.h: 142: holdFC2cont = 0;
 27913  002E9A  0E00               	movlw	0
 27914  002E9C  0100               	movlb	0	; () banked
 27915  002E9E  6FB6               	movwf	_holdFC2cont& (0+255),b
 27916                           
 27917                           ; BSR set to: 0
 27918                           
 27919                           ; BSR set to: 0
 27920                           
 27921                           ; BSR set to: 0
 27922                           
 27923                           ; BSR set to: 0
 27924                           
 27925                           ;PWMConfig.h: 144: }else {
 27926  002EA0  0012               	return	
 27927  002EA2                     __end_of_T2int:
 27928                           	opt stack 0
 27929                           pclatu	equ	0xFFB
 27930                           pclath	equ	0xFFA
 27931                           tblptru	equ	0xFF8
 27932                           tblptrh	equ	0xFF7
 27933                           tblptrl	equ	0xFF6
 27934                           tablat	equ	0xFF5
 27935                           prodh	equ	0xFF4
 27936                           prodl	equ	0xFF3
 27937                           intcon	equ	0xFF2
 27938                           postinc0	equ	0xFEE
 27939                           fsr0h	equ	0xFEA
 27940                           fsr0l	equ	0xFE9
 27941                           wreg	equ	0xFE8
 27942                           postdec1	equ	0xFE5
 27943                           fsr1h	equ	0xFE2
 27944                           fsr1l	equ	0xFE1
 27945                           bsr	equ	0xFE0
 27946                           indf2	equ	0xFDF
 27947                           postinc2	equ	0xFDE
 27948                           postdec2	equ	0xFDD
 27949                           plusw2	equ	0xFDB
 27950                           fsr2h	equ	0xFDA
 27951                           fsr2l	equ	0xFD9
 27952                           status	equ	0xFD8
 27953                           
 27954 ;; *************** function i1_initProtocoll *****************
 27955 ;; Defined at:
 27956 ;;		line 49 in file "source/PWMConfig.h"
 27957 ;; Parameters:    Size  Location     Type
 27958 ;;  init            1    wreg     unsigned char 
 27959 ;; Auto vars:     Size  Location     Type
 27960 ;;  init            1    6[BANK0 ] unsigned char 
 27961 ;; Return value:  Size  Location     Type
 27962 ;;                  1    wreg      void 
 27963 ;; Registers used:
 27964 ;;		wreg, status,2, status,0, cstack
 27965 ;; Tracked objects:
 27966 ;;		On entry : 0/0
 27967 ;;		On exit  : 0/0
 27968 ;;		Unchanged: 0/0
 27969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27970 ;;      Params:         0       0       0       0       0       0       0
 27971 ;;      Locals:         0       1       0       0       0       0       0
 27972 ;;      Temps:          0       0       0       0       0       0       0
 27973 ;;      Totals:         0       1       0       0       0       0       0
 27974 ;;Total ram usage:        1 bytes
 27975 ;; Hardware stack levels used:    1
 27976 ;; Hardware stack levels required when called:    5
 27977 ;; This function calls:
 27978 ;;		i1_setPWM2duty
 27979 ;; This function is called by:
 27980 ;;		_T2int
 27981 ;;		i1_pressRETRO
 27982 ;;		i1_longPressRETRO
 27983 ;;		i1_pressENTER
 27984 ;; This function uses a non-reentrant model
 27985 ;;
 27986                           
 27987                           	psect	text116
 27988  006D98                     __ptext116:
 27989                           	opt stack 0
 27990  006D98                     i1_initProtocoll:
 27991                           	opt stack 12
 27992                           
 27993                           ; BSR set to: 0
 27994                           ;incstack = 0
 27995                           ;i1initProtocoll@init stored from wreg
 27996  006D98  0100               	movlb	0	; () banked
 27997  006D9A  6F66               	movwf	i1initProtocoll@init& (0+255),b
 27998                           
 27999                           ;PWMConfig.h: 50: if(!PORTAbits.RA7)
 28000  006D9C  BE80               	btfsc	3968,7,c	;volatile
 28001  006D9E  D003               	goto	i1l7340
 28002                           
 28003                           ;PWMConfig.h: 51: bladeIsUP = 2;
 28004  006DA0  0E02               	movlw	2
 28005  006DA2  0100               	movlb	0	; () banked
 28006  006DA4  6FD4               	movwf	_bladeIsUP& (0+255),b
 28007  006DA6                     i1l7340:
 28008                           
 28009                           ;PWMConfig.h: 52: if(init) {
 28010  006DA6  0100               	movlb	0	; () banked
 28011  006DA8  5166               	movf	i1initProtocoll@init& (0+255),w,b
 28012  006DAA  0100               	movlb	0	; () banked
 28013  006DAC  B4D8               	btfsc	status,2,c
 28014  006DAE  0012               	return	
 28015                           
 28016                           ; BSR set to: 0
 28017                           ;PWMConfig.h: 53: LATCbits.LATC5 = 0;
 28018  006DB0  9A8B               	bcf	3979,5,c	;volatile
 28019                           
 28020                           ; BSR set to: 0
 28021                           ;PWMConfig.h: 54: processTimer = 0;
 28022  006DB2  0E00               	movlw	0
 28023  006DB4  6E3B               	movwf	_processTimer,c
 28024  006DB6  0E00               	movlw	0
 28025  006DB8  6E3C               	movwf	_processTimer+1,c
 28026  006DBA  0E00               	movlw	0
 28027  006DBC  6E3D               	movwf	_processTimer+2,c
 28028  006DBE  0E00               	movlw	0
 28029  006DC0  6E3E               	movwf	_processTimer+3,c
 28030                           
 28031                           ;PWMConfig.h: 55: processState = 0;
 28032  006DC2  0E00               	movlw	0
 28033  006DC4  0100               	movlb	0	; () banked
 28034  006DC6  6FB3               	movwf	(_processState+1)& (0+255),b
 28035  006DC8  0E00               	movlw	0
 28036  006DCA  6FB2               	movwf	_processState& (0+255),b
 28037                           
 28038                           ; BSR set to: 0
 28039                           ;PWMConfig.h: 56: if(bladeIsUP != 1)
 28040  006DCC  0100               	movlb	0	; () banked
 28041  006DCE  05D4               	decf	_bladeIsUP& (0+255),w,b
 28042  006DD0  B4D8               	btfsc	status,2,c
 28043  006DD2  0012               	return	
 28044                           
 28045                           ; BSR set to: 0
 28046                           ;PWMConfig.h: 57: setPWM2duty(-400);
 28047  006DD4  0EFE               	movlw	254
 28048  006DD6  0100               	movlb	0	; () banked
 28049  006DD8  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 28050  006DDA  0E70               	movlw	112
 28051  006DDC  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 28052  006DDE  ECCE  F02F         	call	i1_setPWM2duty	;wreg free
 28053  006DE2  0012               	return	
 28054  006DE4                     __end_ofi1_initProtocoll:
 28055                           	opt stack 0
 28056                           pclatu	equ	0xFFB
 28057                           pclath	equ	0xFFA
 28058                           tblptru	equ	0xFF8
 28059                           tblptrh	equ	0xFF7
 28060                           tblptrl	equ	0xFF6
 28061                           tablat	equ	0xFF5
 28062                           prodh	equ	0xFF4
 28063                           prodl	equ	0xFF3
 28064                           intcon	equ	0xFF2
 28065                           postinc0	equ	0xFEE
 28066                           fsr0h	equ	0xFEA
 28067                           fsr0l	equ	0xFE9
 28068                           wreg	equ	0xFE8
 28069                           postdec1	equ	0xFE5
 28070                           fsr1h	equ	0xFE2
 28071                           fsr1l	equ	0xFE1
 28072                           bsr	equ	0xFE0
 28073                           indf2	equ	0xFDF
 28074                           postinc2	equ	0xFDE
 28075                           postdec2	equ	0xFDD
 28076                           plusw2	equ	0xFDB
 28077                           fsr2h	equ	0xFDA
 28078                           fsr2l	equ	0xFD9
 28079                           status	equ	0xFD8
 28080                           
 28081 ;; *************** function i1_setPWM2duty *****************
 28082 ;; Defined at:
 28083 ;;		line 37 in file "source/PWMConfig.h"
 28084 ;; Parameters:    Size  Location     Type
 28085 ;;  actuator        2    0[BANK0 ] short 
 28086 ;; Auto vars:     Size  Location     Type
 28087 ;;  setPWM2duty     2    4[BANK0 ] short 
 28088 ;; Return value:  Size  Location     Type
 28089 ;;                  1    wreg      void 
 28090 ;; Registers used:
 28091 ;;		wreg, status,2, status,0
 28092 ;; Tracked objects:
 28093 ;;		On entry : 0/0
 28094 ;;		On exit  : 0/0
 28095 ;;		Unchanged: 0/0
 28096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28097 ;;      Params:         0       2       0       0       0       0       0
 28098 ;;      Locals:         0       2       0       0       0       0       0
 28099 ;;      Temps:          0       2       0       0       0       0       0
 28100 ;;      Totals:         0       6       0       0       0       0       0
 28101 ;;Total ram usage:        6 bytes
 28102 ;; Hardware stack levels used:    1
 28103 ;; Hardware stack levels required when called:    4
 28104 ;; This function calls:
 28105 ;;		Nothing
 28106 ;; This function is called by:
 28107 ;;		_T2int
 28108 ;;		i1_initProtocoll
 28109 ;;		i1_pressENTER
 28110 ;; This function uses a non-reentrant model
 28111 ;;
 28112                           
 28113                           	psect	text117
 28114  005F9C                     __ptext117:
 28115                           	opt stack 0
 28116  005F9C                     i1_setPWM2duty:
 28117                           	opt stack 12
 28118                           
 28119                           ;PWMConfig.h: 38: short act = 400;
 28120                           
 28121                           ;incstack = 0
 28122  005F9C  0E01               	movlw	1
 28123  005F9E  0100               	movlb	0	; () banked
 28124  005FA0  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 28125  005FA2  0E90               	movlw	144
 28126  005FA4  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 28127                           
 28128                           ; BSR set to: 0
 28129                           ;PWMConfig.h: 39: if(actuator > 400)
 28130  005FA6  0100               	movlb	0	; () banked
 28131  005FA8  BF61               	btfsc	(i1setPWM2duty@actuator+1)& (0+255),7,b
 28132  005FAA  D00D               	goto	i1l7044
 28133  005FAC  0E91               	movlw	145
 28134  005FAE  0100               	movlb	0	; () banked
 28135  005FB0  5D60               	subwf	i1setPWM2duty@actuator& (0+255),w,b
 28136  005FB2  0E01               	movlw	1
 28137  005FB4  0100               	movlb	0	; () banked
 28138  005FB6  5961               	subwfb	(i1setPWM2duty@actuator+1)& (0+255),w,b
 28139  005FB8  A0D8               	btfss	status,0,c
 28140  005FBA  D005               	goto	i1l7044
 28141                           
 28142                           ; BSR set to: 0
 28143                           ;PWMConfig.h: 40: act = 800;
 28144  005FBC  0E03               	movlw	3
 28145  005FBE  0100               	movlb	0	; () banked
 28146  005FC0  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 28147  005FC2  0E20               	movlw	32
 28148  005FC4  D00F               	goto	L9
 28149  005FC6                     i1l7044:
 28150                           
 28151                           ; BSR set to: 0
 28152                           ;PWMConfig.h: 41: else if(actuator < -400)
 28153  005FC6  0100               	movlb	0	; () banked
 28154  005FC8  AF61               	btfss	(i1setPWM2duty@actuator+1)& (0+255),7,b
 28155  005FCA  D00E               	goto	i1l7048
 28156  005FCC  0E70               	movlw	112
 28157  005FCE  0100               	movlb	0	; () banked
 28158  005FD0  5D60               	subwf	i1setPWM2duty@actuator& (0+255),w,b
 28159  005FD2  0EFE               	movlw	254
 28160  005FD4  0100               	movlb	0	; () banked
 28161  005FD6  5961               	subwfb	(i1setPWM2duty@actuator+1)& (0+255),w,b
 28162  005FD8  B0D8               	btfsc	status,0,c
 28163  005FDA  D006               	goto	i1l7048
 28164                           
 28165                           ; BSR set to: 0
 28166                           ;PWMConfig.h: 42: act = 0;
 28167  005FDC  0E00               	movlw	0
 28168  005FDE  0100               	movlb	0	; () banked
 28169  005FE0  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 28170  005FE2  0E00               	movlw	0
 28171  005FE4                     L9:
 28172  005FE4  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 28173  005FE6  D00A               	goto	i1l493
 28174  005FE8                     i1l7048:
 28175                           
 28176                           ; BSR set to: 0
 28177                           ;PWMConfig.h: 43: else
 28178                           ;PWMConfig.h: 44: act = actuator + 400;
 28179  005FE8  0E90               	movlw	144
 28180  005FEA  0100               	movlb	0	; () banked
 28181  005FEC  2560               	addwf	i1setPWM2duty@actuator& (0+255),w,b
 28182  005FEE  0100               	movlb	0	; () banked
 28183  005FF0  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 28184  005FF2  0E01               	movlw	1
 28185  005FF4  0100               	movlb	0	; () banked
 28186  005FF6  2161               	addwfc	(i1setPWM2duty@actuator+1)& (0+255),w,b
 28187  005FF8  0100               	movlb	0	; () banked
 28188  005FFA  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 28189  005FFC                     i1l493:
 28190                           
 28191                           ; BSR set to: 0
 28192                           ;PWMConfig.h: 45: CCP2CONbits.DC2B = act;
 28193  005FFC  C064  F062         	movff	i1setPWM2duty@act,??i1_setPWM2duty
 28194  006000  0100               	movlb	0	; () banked
 28195  006002  3B62               	swapf	??i1_setPWM2duty& (0+255),f,b
 28196  006004  5066               	movf	3942,w,c	;volatile
 28197  006006  0100               	movlb	0	; () banked
 28198  006008  1962               	xorwf	??i1_setPWM2duty& (0+255),w,b
 28199  00600A  0BCF               	andlw	-49
 28200  00600C  1962               	xorwf	??i1_setPWM2duty& (0+255),w,b
 28201  00600E  6E66               	movwf	3942,c	;volatile
 28202                           
 28203                           ;PWMConfig.h: 46: CCPR2L = act>>2;
 28204  006010  C064  F062         	movff	i1setPWM2duty@act,??i1_setPWM2duty
 28205  006014  C065  F063         	movff	i1setPWM2duty@act+1,??i1_setPWM2duty+1
 28206  006018  0100               	movlb	0	; () banked
 28207  00601A  3563               	rlcf	(??i1_setPWM2duty+1)& (0+255),w,b
 28208  00601C  3363               	rrcf	(??i1_setPWM2duty+1)& (0+255),f,b
 28209  00601E  3362               	rrcf	??i1_setPWM2duty& (0+255),f,b
 28210  006020  0100               	movlb	0	; () banked
 28211  006022  3563               	rlcf	(??i1_setPWM2duty+1)& (0+255),w,b
 28212  006024  3363               	rrcf	(??i1_setPWM2duty+1)& (0+255),f,b
 28213  006026  3362               	rrcf	??i1_setPWM2duty& (0+255),f,b
 28214  006028  0100               	movlb	0	; () banked
 28215  00602A  5162               	movf	??i1_setPWM2duty& (0+255),w,b
 28216  00602C  6E67               	movwf	3943,c	;volatile
 28217                           
 28218                           ; BSR set to: 0
 28219  00602E  0012               	return		;funcret
 28220  006030                     __end_ofi1_setPWM2duty:
 28221                           	opt stack 0
 28222                           pclatu	equ	0xFFB
 28223                           pclath	equ	0xFFA
 28224                           tblptru	equ	0xFF8
 28225                           tblptrh	equ	0xFF7
 28226                           tblptrl	equ	0xFF6
 28227                           tablat	equ	0xFF5
 28228                           prodh	equ	0xFF4
 28229                           prodl	equ	0xFF3
 28230                           intcon	equ	0xFF2
 28231                           postinc0	equ	0xFEE
 28232                           fsr0h	equ	0xFEA
 28233                           fsr0l	equ	0xFE9
 28234                           wreg	equ	0xFE8
 28235                           postdec1	equ	0xFE5
 28236                           fsr1h	equ	0xFE2
 28237                           fsr1l	equ	0xFE1
 28238                           bsr	equ	0xFE0
 28239                           indf2	equ	0xFDF
 28240                           postinc2	equ	0xFDE
 28241                           postdec2	equ	0xFDD
 28242                           plusw2	equ	0xFDB
 28243                           fsr2h	equ	0xFDA
 28244                           fsr2l	equ	0xFD9
 28245                           status	equ	0xFD8
 28246                           
 28247 ;; *************** function _saveProcessState *****************
 28248 ;; Defined at:
 28249 ;;		line 157 in file "source/sysParams.h"
 28250 ;; Parameters:    Size  Location     Type
 28251 ;;		None
 28252 ;; Auto vars:     Size  Location     Type
 28253 ;;		None
 28254 ;; Return value:  Size  Location     Type
 28255 ;;                  1    wreg      void 
 28256 ;; Registers used:
 28257 ;;		wreg, status,2, cstack
 28258 ;; Tracked objects:
 28259 ;;		On entry : 0/0
 28260 ;;		On exit  : 0/0
 28261 ;;		Unchanged: 0/0
 28262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28263 ;;      Params:         0       0       0       0       0       0       0
 28264 ;;      Locals:         0       0       0       0       0       0       0
 28265 ;;      Temps:          0       0       0       0       0       0       0
 28266 ;;      Totals:         0       0       0       0       0       0       0
 28267 ;;Total ram usage:        0 bytes
 28268 ;; Hardware stack levels used:    1
 28269 ;; Hardware stack levels required when called:    5
 28270 ;; This function calls:
 28271 ;;		i1_writeEEPROM
 28272 ;; This function is called by:
 28273 ;;		_T2int
 28274 ;; This function uses a non-reentrant model
 28275 ;;
 28276                           
 28277                           	psect	text118
 28278  006F44                     __ptext118:
 28279                           	opt stack 0
 28280  006F44                     _saveProcessState:
 28281                           	opt stack 13
 28282                           
 28283                           ;sysParams.h: 158: EECON1bits.WREN = 1;
 28284                           
 28285                           ; BSR set to: 0
 28286                           ;incstack = 0
 28287  006F44  84A6               	bsf	4006,2,c	;volatile
 28288                           
 28289                           ;sysParams.h: 159: ie = INTCONbits.GIE;
 28290  006F46  0E00               	movlw	0
 28291  006F48  BEF2               	btfsc	intcon,7,c	;volatile
 28292  006F4A  0E01               	movlw	1
 28293  006F4C  0100               	movlb	0	; () banked
 28294  006F4E  6FBD               	movwf	_ie& (0+255),b
 28295                           
 28296                           ; BSR set to: 0
 28297                           ;sysParams.h: 160: INTCONbits.GIE = 0;
 28298  006F50  9EF2               	bcf	intcon,7,c	;volatile
 28299                           
 28300                           ; BSR set to: 0
 28301                           ;sysParams.h: 161: writeEEPROM(30, processStarted);
 28302  006F52  C0C0  F060         	movff	_processStarted,i1writeEEPROM@data
 28303  006F56  0E1E               	movlw	30
 28304  006F58  EC2B  F039         	call	i1_writeEEPROM
 28305                           
 28306                           ;sysParams.h: 162: writeEEPROM(31, processState);
 28307  006F5C  C0B2  F060         	movff	_processState,i1writeEEPROM@data
 28308  006F60  0E1F               	movlw	31
 28309  006F62  EC2B  F039         	call	i1_writeEEPROM
 28310                           
 28311                           ;sysParams.h: 163: writeEEPROM(32, bladeIsUP);
 28312  006F66  C0D4  F060         	movff	_bladeIsUP,i1writeEEPROM@data
 28313  006F6A  0E20               	movlw	32
 28314  006F6C  EC2B  F039         	call	i1_writeEEPROM
 28315                           
 28316                           ;sysParams.h: 164: EECON1bits.WREN = 0;
 28317  006F70  94A6               	bcf	4006,2,c	;volatile
 28318                           
 28319                           ;sysParams.h: 165: INTCONbits.GIE = ie;
 28320  006F72  0100               	movlb	0	; () banked
 28321  006F74  B1BD               	btfsc	_ie& (0+255),0,b
 28322  006F76  D002               	bra	i1u1004_25
 28323  006F78  9EF2               	bcf	intcon,7,c	;volatile
 28324  006F7A  D001               	bra	i1u1004_26
 28325  006F7C                     i1u1004_25:
 28326  006F7C  8EF2               	bsf	intcon,7,c	;volatile
 28327  006F7E                     i1u1004_26:
 28328  006F7E  0012               	return		;funcret
 28329  006F80                     __end_of_saveProcessState:
 28330                           	opt stack 0
 28331                           pclatu	equ	0xFFB
 28332                           pclath	equ	0xFFA
 28333                           tblptru	equ	0xFF8
 28334                           tblptrh	equ	0xFF7
 28335                           tblptrl	equ	0xFF6
 28336                           tablat	equ	0xFF5
 28337                           prodh	equ	0xFF4
 28338                           prodl	equ	0xFF3
 28339                           intcon	equ	0xFF2
 28340                           postinc0	equ	0xFEE
 28341                           fsr0h	equ	0xFEA
 28342                           fsr0l	equ	0xFE9
 28343                           wreg	equ	0xFE8
 28344                           postdec1	equ	0xFE5
 28345                           fsr1h	equ	0xFE2
 28346                           fsr1l	equ	0xFE1
 28347                           bsr	equ	0xFE0
 28348                           indf2	equ	0xFDF
 28349                           postinc2	equ	0xFDE
 28350                           postdec2	equ	0xFDD
 28351                           plusw2	equ	0xFDB
 28352                           fsr2h	equ	0xFDA
 28353                           fsr2l	equ	0xFD9
 28354                           status	equ	0xFD8
 28355                           
 28356 ;; *************** function i1_writeEEPROM *****************
 28357 ;; Defined at:
 28358 ;;		line 53 in file "source/sysParams.h"
 28359 ;; Parameters:    Size  Location     Type
 28360 ;;  adr             1    wreg     unsigned char 
 28361 ;;  data            1    0[BANK0 ] unsigned char 
 28362 ;; Auto vars:     Size  Location     Type
 28363 ;;  adr             1    1[BANK0 ] unsigned char 
 28364 ;; Return value:  Size  Location     Type
 28365 ;;                  1    wreg      void 
 28366 ;; Registers used:
 28367 ;;		wreg, status,2
 28368 ;; Tracked objects:
 28369 ;;		On entry : 0/0
 28370 ;;		On exit  : 0/0
 28371 ;;		Unchanged: 0/0
 28372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28373 ;;      Params:         0       1       0       0       0       0       0
 28374 ;;      Locals:         0       1       0       0       0       0       0
 28375 ;;      Temps:          0       0       0       0       0       0       0
 28376 ;;      Totals:         0       2       0       0       0       0       0
 28377 ;;Total ram usage:        2 bytes
 28378 ;; Hardware stack levels used:    1
 28379 ;; Hardware stack levels required when called:    4
 28380 ;; This function calls:
 28381 ;;		Nothing
 28382 ;; This function is called by:
 28383 ;;		_saveProcessState
 28384 ;;		i1_saveSysParams
 28385 ;; This function uses a non-reentrant model
 28386 ;;
 28387                           
 28388                           	psect	text119
 28389  007256                     __ptext119:
 28390                           	opt stack 0
 28391  007256                     i1_writeEEPROM:
 28392                           	opt stack 13
 28393                           
 28394                           ;incstack = 0
 28395                           ;i1writeEEPROM@adr stored from wreg
 28396  007256  0100               	movlb	0	; () banked
 28397  007258  6F61               	movwf	i1writeEEPROM@adr& (0+255),b
 28398                           
 28399                           ;sysParams.h: 54: EEADR = adr;
 28400  00725A  C061  FFA9         	movff	i1writeEEPROM@adr,4009	;volatile
 28401                           
 28402                           ;sysParams.h: 55: EEDATA = data;
 28403  00725E  C060  FFA8         	movff	i1writeEEPROM@data,4008	;volatile
 28404                           
 28405                           ;sysParams.h: 56: EECON1bits.EEPGD = 0;
 28406  007262  9EA6               	bcf	4006,7,c	;volatile
 28407                           
 28408                           ;sysParams.h: 57: EECON1bits.CFGS = 0;
 28409  007264  9CA6               	bcf	4006,6,c	;volatile
 28410                           
 28411                           ;sysParams.h: 58: EECON2 = 0x55;
 28412  007266  0E55               	movlw	85
 28413  007268  6EA7               	movwf	4007,c	;volatile
 28414                           
 28415                           ;sysParams.h: 59: EECON2 = 0xAA;
 28416  00726A  0EAA               	movlw	170
 28417  00726C  6EA7               	movwf	4007,c	;volatile
 28418                           
 28419                           ;sysParams.h: 60: EECON1bits.WR = 1;
 28420  00726E  82A6               	bsf	4006,1,c	;volatile
 28421  007270                     i1l281:
 28422  007270  A2A6               	btfss	4006,1,c	;volatile
 28423  007272  0012               	return	
 28424  007274  D7FD               	goto	i1l281
 28425  007276                     __end_ofi1_writeEEPROM:
 28426                           	opt stack 0
 28427                           pclatu	equ	0xFFB
 28428                           pclath	equ	0xFFA
 28429                           tblptru	equ	0xFF8
 28430                           tblptrh	equ	0xFF7
 28431                           tblptrl	equ	0xFF6
 28432                           tablat	equ	0xFF5
 28433                           prodh	equ	0xFF4
 28434                           prodl	equ	0xFF3
 28435                           intcon	equ	0xFF2
 28436                           postinc0	equ	0xFEE
 28437                           fsr0h	equ	0xFEA
 28438                           fsr0l	equ	0xFE9
 28439                           wreg	equ	0xFE8
 28440                           postdec1	equ	0xFE5
 28441                           fsr1h	equ	0xFE2
 28442                           fsr1l	equ	0xFE1
 28443                           bsr	equ	0xFE0
 28444                           indf2	equ	0xFDF
 28445                           postinc2	equ	0xFDE
 28446                           postdec2	equ	0xFDD
 28447                           plusw2	equ	0xFDB
 28448                           fsr2h	equ	0xFDA
 28449                           fsr2l	equ	0xFD9
 28450                           status	equ	0xFD8
 28451                           
 28452 ;; *************** function _hp_isr *****************
 28453 ;; Defined at:
 28454 ;;		line 13 in file "source/main.c"
 28455 ;; Parameters:    Size  Location     Type
 28456 ;;		None
 28457 ;; Auto vars:     Size  Location     Type
 28458 ;;		None
 28459 ;; Return value:  Size  Location     Type
 28460 ;;                  1    wreg      void 
 28461 ;; Registers used:
 28462 ;;		wreg, status,2, status,0, cstack
 28463 ;; Tracked objects:
 28464 ;;		On entry : 0/0
 28465 ;;		On exit  : 0/0
 28466 ;;		Unchanged: 0/0
 28467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28468 ;;      Params:         0       0       0       0       0       0       0
 28469 ;;      Locals:         0       0       0       0       0       0       0
 28470 ;;      Temps:         14       0       0       0       0       0       0
 28471 ;;      Totals:        14       0       0       0       0       0       0
 28472 ;;Total ram usage:       14 bytes
 28473 ;; Hardware stack levels used:    1
 28474 ;; Hardware stack levels required when called:    3
 28475 ;; This function calls:
 28476 ;;		_T4int
 28477 ;; This function is called by:
 28478 ;;		Interrupt level 2
 28479 ;; This function uses a non-reentrant model
 28480 ;;
 28481                           
 28482                           	psect	intcode
 28483  000008                     __pintcode:
 28484                           	opt stack 0
 28485  000008                     _hp_isr:
 28486                           	opt stack 9
 28487                           
 28488                           ;incstack = 0
 28489  000008  825C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 28490  00000A  EF98  F032         	goto	int_func
 28491                           pclatu	equ	0xFFB
 28492                           pclath	equ	0xFFA
 28493                           tblptru	equ	0xFF8
 28494                           tblptrh	equ	0xFF7
 28495                           tblptrl	equ	0xFF6
 28496                           tablat	equ	0xFF5
 28497                           prodh	equ	0xFF4
 28498                           prodl	equ	0xFF3
 28499                           intcon	equ	0xFF2
 28500                           postinc0	equ	0xFEE
 28501                           fsr0h	equ	0xFEA
 28502                           fsr0l	equ	0xFE9
 28503                           wreg	equ	0xFE8
 28504                           postdec1	equ	0xFE5
 28505                           fsr1h	equ	0xFE2
 28506                           fsr1l	equ	0xFE1
 28507                           bsr	equ	0xFE0
 28508                           indf2	equ	0xFDF
 28509                           postinc2	equ	0xFDE
 28510                           postdec2	equ	0xFDD
 28511                           plusw2	equ	0xFDB
 28512                           fsr2h	equ	0xFDA
 28513                           fsr2l	equ	0xFD9
 28514                           status	equ	0xFD8
 28515                           
 28516                           	psect	intcode_body
 28517  006530                     __pintcode_body:
 28518                           	opt stack 9
 28519  006530                     int_func:
 28520                           	opt stack 9
 28521  006530  CFFA F029          	movff	pclath,??_hp_isr
 28522  006534  CFFB F02A          	movff	pclatu,??_hp_isr+1
 28523  006538  CFE9 F02B          	movff	fsr0l,??_hp_isr+2
 28524  00653C  CFEA F02C          	movff	fsr0h,??_hp_isr+3
 28525  006540  CFE1 F02D          	movff	fsr1l,??_hp_isr+4
 28526  006544  CFE2 F02E          	movff	fsr1h,??_hp_isr+5
 28527  006548  CFD9 F02F          	movff	fsr2l,??_hp_isr+6
 28528  00654C  CFDA F030          	movff	fsr2h,??_hp_isr+7
 28529  006550  CFF3 F031          	movff	prodl,??_hp_isr+8
 28530  006554  CFF4 F032          	movff	prodh,??_hp_isr+9
 28531  006558  CFF6 F033          	movff	tblptrl,??_hp_isr+10
 28532  00655C  CFF7 F034          	movff	tblptrh,??_hp_isr+11
 28533  006560  CFF8 F035          	movff	tblptru,??_hp_isr+12
 28534  006564  CFF5 F036          	movff	tablat,??_hp_isr+13
 28535                           
 28536                           ;main.c: 14: if(PIE5bits.TMR4IE && PIR5bits.TMR4IF) {
 28537  006568  B07D               	btfsc	3965,0,c	;volatile
 28538  00656A  A07E               	btfss	3966,0,c	;volatile
 28539  00656C  D003               	goto	i2l923
 28540                           
 28541                           ;main.c: 15: T4int();
 28542  00656E  EC51  F017         	call	_T4int	;wreg free
 28543                           
 28544                           ;main.c: 16: PIR5bits.TMR4IF = 0;
 28545  006572  907E               	bcf	3966,0,c	;volatile
 28546  006574                     i2l923:
 28547  006574  C036  FFF5         	movff	??_hp_isr+13,tablat
 28548  006578  C035  FFF8         	movff	??_hp_isr+12,tblptru
 28549  00657C  C034  FFF7         	movff	??_hp_isr+11,tblptrh
 28550  006580  C033  FFF6         	movff	??_hp_isr+10,tblptrl
 28551  006584  C032  FFF4         	movff	??_hp_isr+9,prodh
 28552  006588  C031  FFF3         	movff	??_hp_isr+8,prodl
 28553  00658C  C030  FFDA         	movff	??_hp_isr+7,fsr2h
 28554  006590  C02F  FFD9         	movff	??_hp_isr+6,fsr2l
 28555  006594  C02E  FFE2         	movff	??_hp_isr+5,fsr1h
 28556  006598  C02D  FFE1         	movff	??_hp_isr+4,fsr1l
 28557  00659C  C02C  FFEA         	movff	??_hp_isr+3,fsr0h
 28558  0065A0  C02B  FFE9         	movff	??_hp_isr+2,fsr0l
 28559  0065A4  C02A  FFFB         	movff	??_hp_isr+1,pclatu
 28560  0065A8  C029  FFFA         	movff	??_hp_isr,pclath
 28561  0065AC  925C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 28562  0065AE  0011               	retfie		f
 28563  0065B0                     __end_of_hp_isr:
 28564                           	opt stack 0
 28565                           pclatu	equ	0xFFB
 28566                           pclath	equ	0xFFA
 28567                           tblptru	equ	0xFF8
 28568                           tblptrh	equ	0xFF7
 28569                           tblptrl	equ	0xFF6
 28570                           tablat	equ	0xFF5
 28571                           prodh	equ	0xFF4
 28572                           prodl	equ	0xFF3
 28573                           intcon	equ	0xFF2
 28574                           postinc0	equ	0xFEE
 28575                           fsr0h	equ	0xFEA
 28576                           fsr0l	equ	0xFE9
 28577                           wreg	equ	0xFE8
 28578                           postdec1	equ	0xFE5
 28579                           fsr1h	equ	0xFE2
 28580                           fsr1l	equ	0xFE1
 28581                           bsr	equ	0xFE0
 28582                           indf2	equ	0xFDF
 28583                           postinc2	equ	0xFDE
 28584                           postdec2	equ	0xFDD
 28585                           plusw2	equ	0xFDB
 28586                           fsr2h	equ	0xFDA
 28587                           fsr2l	equ	0xFD9
 28588                           status	equ	0xFD8
 28589                           
 28590 ;; *************** function _T4int *****************
 28591 ;; Defined at:
 28592 ;;		line 21 in file "source/T4Config.h"
 28593 ;; Parameters:    Size  Location     Type
 28594 ;;		None
 28595 ;; Auto vars:     Size  Location     Type
 28596 ;;		None
 28597 ;; Return value:  Size  Location     Type
 28598 ;;                  1    wreg      void 
 28599 ;; Registers used:
 28600 ;;		wreg, status,2, status,0, cstack
 28601 ;; Tracked objects:
 28602 ;;		On entry : 0/0
 28603 ;;		On exit  : 0/0
 28604 ;;		Unchanged: 0/0
 28605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28606 ;;      Params:         0       0       0       0       0       0       0
 28607 ;;      Locals:         0       0       0       0       0       0       0
 28608 ;;      Temps:          1       0       0       0       0       0       0
 28609 ;;      Totals:         1       0       0       0       0       0       0
 28610 ;;Total ram usage:        1 bytes
 28611 ;; Hardware stack levels used:    1
 28612 ;; Hardware stack levels required when called:    2
 28613 ;; This function calls:
 28614 ;;		_cutError
 28615 ;;		i2___altoft
 28616 ;;		i2___ftadd
 28617 ;;		i2___ftge
 28618 ;;		i2_setPWM2duty
 28619 ;; This function is called by:
 28620 ;;		_hp_isr
 28621 ;; This function uses a non-reentrant model
 28622 ;;
 28623                           
 28624                           	psect	text121
 28625  002EA2                     __ptext121:
 28626                           	opt stack 0
 28627  002EA2                     _T4int:
 28628                           	opt stack 9
 28629                           
 28630                           ;T4Config.h: 22: LATBbits.LATB0 = processStarted;
 28631                           
 28632                           ;incstack = 0
 28633  002EA2  0100               	movlb	0	; () banked
 28634  002EA4  B1C0               	btfsc	_processStarted& (0+255),0,b
 28635  002EA6  D002               	bra	i2u1337_45
 28636  002EA8  908A               	bcf	3978,0,c	;volatile
 28637  002EAA  D001               	bra	i2u1337_46
 28638  002EAC                     i2u1337_45:
 28639  002EAC  808A               	bsf	3978,0,c	;volatile
 28640  002EAE                     i2u1337_46:
 28641  002EAE  0004               	clrwdt		;# 
 28642                           
 28643                           ;T4Config.h: 26: processTimer++;
 28644  002EB0  0E01               	movlw	1
 28645  002EB2  263B               	addwf	_processTimer,f,c
 28646  002EB4  0E00               	movlw	0
 28647  002EB6  223C               	addwfc	_processTimer+1,f,c
 28648  002EB8  223D               	addwfc	_processTimer+2,f,c
 28649  002EBA  223E               	addwfc	_processTimer+3,f,c
 28650                           
 28651                           ;T4Config.h: 27: if(processStarted) {
 28652  002EBC  0100               	movlb	0	; () banked
 28653  002EBE  51C0               	movf	_processStarted& (0+255),w,b
 28654  002EC0  B4D8               	btfsc	status,2,c
 28655  002EC2  D072               	goto	i2l9326
 28656                           
 28657                           ; BSR set to: 0
 28658                           ;T4Config.h: 28: securTimer++;
 28659  002EC4  0E01               	movlw	1
 28660  002EC6  2637               	addwf	_securTimer,f,c
 28661  002EC8  0E00               	movlw	0
 28662  002ECA  2238               	addwfc	_securTimer+1,f,c
 28663  002ECC  2239               	addwfc	_securTimer+2,f,c
 28664  002ECE  223A               	addwfc	_securTimer+3,f,c
 28665                           
 28666                           ;T4Config.h: 29: if(bladeIsUP == 1) {
 28667  002ED0  0100               	movlb	0	; () banked
 28668  002ED2  05D4               	decf	_bladeIsUP& (0+255),w,b
 28669  002ED4  A4D8               	btfss	status,2,c
 28670  002ED6  D035               	goto	i2l9322
 28671                           
 28672                           ; BSR set to: 0
 28673                           ;T4Config.h: 30: if(securTimer > timsXcorte + maxTimePerCut)
 28674  002ED8  C053  F016         	movff	_timsXcorte,i2___ftadd@f2
 28675  002EDC  C054  F017         	movff	_timsXcorte+1,i2___ftadd@f2+1
 28676  002EE0  C055  F018         	movff	_timsXcorte+2,i2___ftadd@f2+2
 28677  002EE4  C04F  F009         	movff	_maxTimePerCut,i2___altoft@c
 28678  002EE8  C050  F00A         	movff	_maxTimePerCut+1,i2___altoft@c+1
 28679  002EEC  C051  F00B         	movff	_maxTimePerCut+2,i2___altoft@c+2
 28680  002EF0  C052  F00C         	movff	_maxTimePerCut+3,i2___altoft@c+3
 28681  002EF4  EC90  F033         	call	i2___altoft	;wreg free
 28682  002EF8  C009  F013         	movff	?i2___altoft,i2___ftadd@f1
 28683  002EFC  C00A  F014         	movff	?i2___altoft+1,i2___ftadd@f1+1
 28684  002F00  C00B  F015         	movff	?i2___altoft+2,i2___ftadd@f1+2
 28685  002F04  EC10  F019         	call	i2___ftadd	;wreg free
 28686  002F08  C013  F01F         	movff	?i2___ftadd,i2___ftge@ff1
 28687  002F0C  C014  F020         	movff	?i2___ftadd+1,i2___ftge@ff1+1
 28688  002F10  C015  F021         	movff	?i2___ftadd+2,i2___ftge@ff1+2
 28689  002F14  C037  F009         	movff	_securTimer,i2___altoft@c
 28690  002F18  C038  F00A         	movff	_securTimer+1,i2___altoft@c+1
 28691  002F1C  C039  F00B         	movff	_securTimer+2,i2___altoft@c+2
 28692  002F20  C03A  F00C         	movff	_securTimer+3,i2___altoft@c+3
 28693  002F24  EC90  F033         	call	i2___altoft	;wreg free
 28694  002F28  C009  F022         	movff	?i2___altoft,i2___ftge@ff2
 28695  002F2C  C00A  F023         	movff	?i2___altoft+1,i2___ftge@ff2+1
 28696  002F30  C00B  F024         	movff	?i2___altoft+2,i2___ftge@ff2+2
 28697  002F34  ECF3  F030         	call	i2___ftge	;wreg free
 28698  002F38  B0D8               	btfsc	status,0,c
 28699  002F3A  D036               	goto	i2l9326
 28700                           
 28701                           ;T4Config.h: 31: cutError();
 28702  002F3C  EC87  F038         	call	_cutError	;wreg free
 28703                           
 28704                           ;T4Config.h: 32: }else {
 28705  002F40  D033               	goto	i2l9326
 28706  002F42                     i2l9322:
 28707                           
 28708                           ;T4Config.h: 33: if(securTimer > timsXcorte + maxTimePerCut)
 28709  002F42  C053  F016         	movff	_timsXcorte,i2___ftadd@f2
 28710  002F46  C054  F017         	movff	_timsXcorte+1,i2___ftadd@f2+1
 28711  002F4A  C055  F018         	movff	_timsXcorte+2,i2___ftadd@f2+2
 28712  002F4E  C04F  F009         	movff	_maxTimePerCut,i2___altoft@c
 28713  002F52  C050  F00A         	movff	_maxTimePerCut+1,i2___altoft@c+1
 28714  002F56  C051  F00B         	movff	_maxTimePerCut+2,i2___altoft@c+2
 28715  002F5A  C052  F00C         	movff	_maxTimePerCut+3,i2___altoft@c+3
 28716  002F5E  EC90  F033         	call	i2___altoft	;wreg free
 28717  002F62  C009  F013         	movff	?i2___altoft,i2___ftadd@f1
 28718  002F66  C00A  F014         	movff	?i2___altoft+1,i2___ftadd@f1+1
 28719  002F6A  C00B  F015         	movff	?i2___altoft+2,i2___ftadd@f1+2
 28720  002F6E  EC10  F019         	call	i2___ftadd	;wreg free
 28721  002F72  C013  F01F         	movff	?i2___ftadd,i2___ftge@ff1
 28722  002F76  C014  F020         	movff	?i2___ftadd+1,i2___ftge@ff1+1
 28723  002F7A  C015  F021         	movff	?i2___ftadd+2,i2___ftge@ff1+2
 28724  002F7E  C037  F009         	movff	_securTimer,i2___altoft@c
 28725  002F82  C038  F00A         	movff	_securTimer+1,i2___altoft@c+1
 28726  002F86  C039  F00B         	movff	_securTimer+2,i2___altoft@c+2
 28727  002F8A  C03A  F00C         	movff	_securTimer+3,i2___altoft@c+3
 28728  002F8E  EC90  F033         	call	i2___altoft	;wreg free
 28729  002F92  C009  F022         	movff	?i2___altoft,i2___ftge@ff2
 28730  002F96  C00A  F023         	movff	?i2___altoft+1,i2___ftge@ff2+1
 28731  002F9A  C00B  F024         	movff	?i2___altoft+2,i2___ftge@ff2+2
 28732  002F9E  ECF3  F030         	call	i2___ftge	;wreg free
 28733  002FA2  A0D8               	btfss	status,0,c
 28734                           
 28735                           ;T4Config.h: 34: cutError();
 28736  002FA4  EC87  F038         	call	_cutError	;wreg free
 28737  002FA8                     i2l9326:
 28738                           
 28739                           ;T4Config.h: 35: }
 28740                           ;T4Config.h: 36: }
 28741                           ;T4Config.h: 37: if(bladeIsUP == 1) {
 28742  002FA8  0100               	movlb	0	; () banked
 28743  002FAA  05D4               	decf	_bladeIsUP& (0+255),w,b
 28744  002FAC  A4D8               	btfss	status,2,c
 28745  002FAE  D034               	goto	i2l9338
 28746                           
 28747                           ; BSR set to: 0
 28748                           ;T4Config.h: 38: if(processTimer >= timsXcorte && processStarted && processState < numCo
      +                          rtes) {
 28749  002FB0  C03B  F009         	movff	_processTimer,i2___altoft@c
 28750  002FB4  C03C  F00A         	movff	_processTimer+1,i2___altoft@c+1
 28751  002FB8  C03D  F00B         	movff	_processTimer+2,i2___altoft@c+2
 28752  002FBC  C03E  F00C         	movff	_processTimer+3,i2___altoft@c+3
 28753  002FC0  EC90  F033         	call	i2___altoft	;wreg free
 28754  002FC4  C009  F01F         	movff	?i2___altoft,i2___ftge@ff1
 28755  002FC8  C00A  F020         	movff	?i2___altoft+1,i2___ftge@ff1+1
 28756  002FCC  C00B  F021         	movff	?i2___altoft+2,i2___ftge@ff1+2
 28757  002FD0  C053  F022         	movff	_timsXcorte,i2___ftge@ff2
 28758  002FD4  C054  F023         	movff	_timsXcorte+1,i2___ftge@ff2+1
 28759  002FD8  C055  F024         	movff	_timsXcorte+2,i2___ftge@ff2+2
 28760  002FDC  ECF3  F030         	call	i2___ftge	;wreg free
 28761  002FE0  A0D8               	btfss	status,0,c
 28762  002FE2  0012               	return	
 28763  002FE4  0100               	movlb	0	; () banked
 28764  002FE6  51C0               	movf	_processStarted& (0+255),w,b
 28765  002FE8  B4D8               	btfsc	status,2,c
 28766  002FEA  0012               	return	
 28767                           
 28768                           ; BSR set to: 0
 28769  002FEC  0100               	movlb	0	; () banked
 28770  002FEE  51D2               	movf	_numCortes& (0+255),w,b
 28771  002FF0  0100               	movlb	0	; () banked
 28772  002FF2  5DB2               	subwf	_processState& (0+255),w,b
 28773  002FF4  0100               	movlb	0	; () banked
 28774  002FF6  51B3               	movf	(_processState+1)& (0+255),w,b
 28775  002FF8  0A80               	xorlw	128
 28776  002FFA  6E28               	movwf	??_T4int& (0+255),c
 28777  002FFC  0100               	movlb	0	; () banked
 28778  002FFE  51D3               	movf	(_numCortes+1)& (0+255),w,b
 28779  003000  0A80               	xorlw	128
 28780  003002  5828               	subwfb	??_T4int& (0+255),w,c
 28781  003004  B0D8               	btfsc	status,0,c
 28782  003006  0012               	return	
 28783                           
 28784                           ; BSR set to: 0
 28785                           ;T4Config.h: 39: setPWM2duty(400);
 28786  003008  0E01               	movlw	1
 28787  00300A  6E02               	movwf	i2setPWM2duty@actuator+1,c
 28788  00300C  0E90               	movlw	144
 28789  00300E  6E01               	movwf	i2setPWM2duty@actuator,c
 28790  003010  EC2C  F035         	call	i2_setPWM2duty	;wreg free
 28791                           
 28792                           ;T4Config.h: 40: LATCbits.LATC4 = 1;
 28793  003014  888B               	bsf	3979,4,c	;volatile
 28794                           
 28795                           ;T4Config.h: 41: }
 28796                           ;T4Config.h: 42: }else if(bladeIsUP == 0){
 28797  003016  0012               	return	
 28798  003018                     i2l9338:
 28799  003018  0100               	movlb	0	; () banked
 28800  00301A  51D4               	movf	_bladeIsUP& (0+255),w,b
 28801  00301C  A4D8               	btfss	status,2,c
 28802  00301E  0012               	return	
 28803                           
 28804                           ; BSR set to: 0
 28805                           ;T4Config.h: 43: if(processTimer >= timsXcorte && processStarted) {
 28806  003020  C03B  F009         	movff	_processTimer,i2___altoft@c
 28807  003024  C03C  F00A         	movff	_processTimer+1,i2___altoft@c+1
 28808  003028  C03D  F00B         	movff	_processTimer+2,i2___altoft@c+2
 28809  00302C  C03E  F00C         	movff	_processTimer+3,i2___altoft@c+3
 28810  003030  EC90  F033         	call	i2___altoft	;wreg free
 28811  003034  C009  F01F         	movff	?i2___altoft,i2___ftge@ff1
 28812  003038  C00A  F020         	movff	?i2___altoft+1,i2___ftge@ff1+1
 28813  00303C  C00B  F021         	movff	?i2___altoft+2,i2___ftge@ff1+2
 28814  003040  C053  F022         	movff	_timsXcorte,i2___ftge@ff2
 28815  003044  C054  F023         	movff	_timsXcorte+1,i2___ftge@ff2+1
 28816  003048  C055  F024         	movff	_timsXcorte+2,i2___ftge@ff2+2
 28817  00304C  ECF3  F030         	call	i2___ftge	;wreg free
 28818  003050  A0D8               	btfss	status,0,c
 28819  003052  0012               	return	
 28820  003054  0100               	movlb	0	; () banked
 28821  003056  51C0               	movf	_processStarted& (0+255),w,b
 28822  003058  B4D8               	btfsc	status,2,c
 28823  00305A  0012               	return	
 28824                           
 28825                           ; BSR set to: 0
 28826                           ;T4Config.h: 44: setPWM2duty(-400);
 28827  00305C  0EFE               	movlw	254
 28828  00305E  6E02               	movwf	i2setPWM2duty@actuator+1,c
 28829  003060  0E70               	movlw	112
 28830  003062  6E01               	movwf	i2setPWM2duty@actuator,c
 28831  003064  EC2C  F035         	call	i2_setPWM2duty	;wreg free
 28832  003068  0012               	return	
 28833  00306A                     __end_of_T4int:
 28834                           	opt stack 0
 28835                           pclatu	equ	0xFFB
 28836                           pclath	equ	0xFFA
 28837                           tblptru	equ	0xFF8
 28838                           tblptrh	equ	0xFF7
 28839                           tblptrl	equ	0xFF6
 28840                           tablat	equ	0xFF5
 28841                           prodh	equ	0xFF4
 28842                           prodl	equ	0xFF3
 28843                           intcon	equ	0xFF2
 28844                           postinc0	equ	0xFEE
 28845                           fsr0h	equ	0xFEA
 28846                           fsr0l	equ	0xFE9
 28847                           wreg	equ	0xFE8
 28848                           postdec1	equ	0xFE5
 28849                           fsr1h	equ	0xFE2
 28850                           fsr1l	equ	0xFE1
 28851                           bsr	equ	0xFE0
 28852                           indf2	equ	0xFDF
 28853                           postinc2	equ	0xFDE
 28854                           postdec2	equ	0xFDD
 28855                           plusw2	equ	0xFDB
 28856                           fsr2h	equ	0xFDA
 28857                           fsr2l	equ	0xFD9
 28858                           status	equ	0xFD8
 28859                           
 28860 ;; *************** function i2_setPWM2duty *****************
 28861 ;; Defined at:
 28862 ;;		line 37 in file "source/PWMConfig.h"
 28863 ;; Parameters:    Size  Location     Type
 28864 ;;  actuator        2    0[COMRAM] short 
 28865 ;; Auto vars:     Size  Location     Type
 28866 ;;  setPWM2duty     2    4[COMRAM] short 
 28867 ;; Return value:  Size  Location     Type
 28868 ;;                  1    wreg      void 
 28869 ;; Registers used:
 28870 ;;		wreg, status,2, status,0
 28871 ;; Tracked objects:
 28872 ;;		On entry : 0/0
 28873 ;;		On exit  : 0/0
 28874 ;;		Unchanged: 0/0
 28875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28876 ;;      Params:         2       0       0       0       0       0       0
 28877 ;;      Locals:         2       0       0       0       0       0       0
 28878 ;;      Temps:          2       0       0       0       0       0       0
 28879 ;;      Totals:         6       0       0       0       0       0       0
 28880 ;;Total ram usage:        6 bytes
 28881 ;; Hardware stack levels used:    1
 28882 ;; This function calls:
 28883 ;;		Nothing
 28884 ;; This function is called by:
 28885 ;;		_T4int
 28886 ;; This function uses a non-reentrant model
 28887 ;;
 28888                           
 28889                           	psect	text122
 28890  006A58                     __ptext122:
 28891                           	opt stack 0
 28892  006A58                     i2_setPWM2duty:
 28893                           	opt stack 10
 28894                           
 28895                           ;PWMConfig.h: 38: short act = 400;
 28896                           
 28897                           ;incstack = 0
 28898  006A58  0E01               	movlw	1
 28899  006A5A  6E06               	movwf	i2setPWM2duty@act+1,c
 28900  006A5C  0E90               	movlw	144
 28901  006A5E  6E05               	movwf	i2setPWM2duty@act,c
 28902                           
 28903                           ;PWMConfig.h: 39: if(actuator > 400)
 28904  006A60  BE02               	btfsc	i2setPWM2duty@actuator+1,7,c
 28905  006A62  D00A               	goto	i2l8324
 28906  006A64  0E91               	movlw	145
 28907  006A66  5C01               	subwf	i2setPWM2duty@actuator,w,c
 28908  006A68  0E01               	movlw	1
 28909  006A6A  5802               	subwfb	i2setPWM2duty@actuator+1,w,c
 28910  006A6C  A0D8               	btfss	status,0,c
 28911  006A6E  D004               	goto	i2l8324
 28912                           
 28913                           ;PWMConfig.h: 40: act = 800;
 28914  006A70  0E03               	movlw	3
 28915  006A72  6E06               	movwf	i2setPWM2duty@act+1,c
 28916  006A74  0E20               	movlw	32
 28917  006A76  D00B               	goto	L10
 28918  006A78                     i2l8324:
 28919                           
 28920                           ;PWMConfig.h: 41: else if(actuator < -400)
 28921  006A78  AE02               	btfss	i2setPWM2duty@actuator+1,7,c
 28922  006A7A  D00B               	goto	i2l8328
 28923  006A7C  0E70               	movlw	112
 28924  006A7E  5C01               	subwf	i2setPWM2duty@actuator,w,c
 28925  006A80  0EFE               	movlw	254
 28926  006A82  5802               	subwfb	i2setPWM2duty@actuator+1,w,c
 28927  006A84  B0D8               	btfsc	status,0,c
 28928  006A86  D005               	goto	i2l8328
 28929                           
 28930                           ;PWMConfig.h: 42: act = 0;
 28931  006A88  0E00               	movlw	0
 28932  006A8A  6E06               	movwf	i2setPWM2duty@act+1,c
 28933  006A8C  0E00               	movlw	0
 28934  006A8E                     L10:
 28935  006A8E  6E05               	movwf	i2setPWM2duty@act,c
 28936  006A90  D006               	goto	i2l493
 28937  006A92                     i2l8328:
 28938                           
 28939                           ;PWMConfig.h: 43: else
 28940                           ;PWMConfig.h: 44: act = actuator + 400;
 28941  006A92  0E90               	movlw	144
 28942  006A94  2401               	addwf	i2setPWM2duty@actuator,w,c
 28943  006A96  6E05               	movwf	i2setPWM2duty@act,c
 28944  006A98  0E01               	movlw	1
 28945  006A9A  2002               	addwfc	i2setPWM2duty@actuator+1,w,c
 28946  006A9C  6E06               	movwf	i2setPWM2duty@act+1,c
 28947  006A9E                     i2l493:
 28948                           
 28949                           ;PWMConfig.h: 45: CCP2CONbits.DC2B = act;
 28950  006A9E  C005  F003         	movff	i2setPWM2duty@act,??i2_setPWM2duty
 28951  006AA2  3A03               	swapf	??i2_setPWM2duty,f,c
 28952  006AA4  5066               	movf	3942,w,c	;volatile
 28953  006AA6  1803               	xorwf	??i2_setPWM2duty,w,c
 28954  006AA8  0BCF               	andlw	-49
 28955  006AAA  1803               	xorwf	??i2_setPWM2duty,w,c
 28956  006AAC  6E66               	movwf	3942,c	;volatile
 28957                           
 28958                           ;PWMConfig.h: 46: CCPR2L = act>>2;
 28959  006AAE  C005  F003         	movff	i2setPWM2duty@act,??i2_setPWM2duty
 28960  006AB2  C006  F004         	movff	i2setPWM2duty@act+1,??i2_setPWM2duty+1
 28961  006AB6  3404               	rlcf	??i2_setPWM2duty+1,w,c
 28962  006AB8  3204               	rrcf	??i2_setPWM2duty+1,f,c
 28963  006ABA  3203               	rrcf	??i2_setPWM2duty,f,c
 28964  006ABC  3404               	rlcf	??i2_setPWM2duty+1,w,c
 28965  006ABE  3204               	rrcf	??i2_setPWM2duty+1,f,c
 28966  006AC0  3203               	rrcf	??i2_setPWM2duty,f,c
 28967  006AC2  5003               	movf	??i2_setPWM2duty,w,c
 28968  006AC4  6E67               	movwf	3943,c	;volatile
 28969  006AC6  0012               	return		;funcret
 28970  006AC8                     __end_ofi2_setPWM2duty:
 28971                           	opt stack 0
 28972                           pclatu	equ	0xFFB
 28973                           pclath	equ	0xFFA
 28974                           tblptru	equ	0xFF8
 28975                           tblptrh	equ	0xFF7
 28976                           tblptrl	equ	0xFF6
 28977                           tablat	equ	0xFF5
 28978                           prodh	equ	0xFF4
 28979                           prodl	equ	0xFF3
 28980                           intcon	equ	0xFF2
 28981                           postinc0	equ	0xFEE
 28982                           fsr0h	equ	0xFEA
 28983                           fsr0l	equ	0xFE9
 28984                           wreg	equ	0xFE8
 28985                           postdec1	equ	0xFE5
 28986                           fsr1h	equ	0xFE2
 28987                           fsr1l	equ	0xFE1
 28988                           bsr	equ	0xFE0
 28989                           indf2	equ	0xFDF
 28990                           postinc2	equ	0xFDE
 28991                           postdec2	equ	0xFDD
 28992                           plusw2	equ	0xFDB
 28993                           fsr2h	equ	0xFDA
 28994                           fsr2l	equ	0xFD9
 28995                           status	equ	0xFD8
 28996                           
 28997 ;; *************** function i2___ftge *****************
 28998 ;; Defined at:
 28999 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
 29000 ;; Parameters:    Size  Location     Type
 29001 ;;  ff1             3   30[COMRAM] float 
 29002 ;;  ff2             3   33[COMRAM] float 
 29003 ;; Auto vars:     Size  Location     Type
 29004 ;;		None
 29005 ;; Return value:  Size  Location     Type
 29006 ;;		None               void
 29007 ;; Registers used:
 29008 ;;		wreg, status,2, status,0
 29009 ;; Tracked objects:
 29010 ;;		On entry : 0/0
 29011 ;;		On exit  : 0/0
 29012 ;;		Unchanged: 0/0
 29013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29014 ;;      Params:         6       0       0       0       0       0       0
 29015 ;;      Locals:         0       0       0       0       0       0       0
 29016 ;;      Temps:          3       0       0       0       0       0       0
 29017 ;;      Totals:         9       0       0       0       0       0       0
 29018 ;;Total ram usage:        9 bytes
 29019 ;; Hardware stack levels used:    1
 29020 ;; This function calls:
 29021 ;;		Nothing
 29022 ;; This function is called by:
 29023 ;;		_T4int
 29024 ;; This function uses a non-reentrant model
 29025 ;;
 29026                           
 29027                           	psect	text123
 29028  0061E6                     __ptext123:
 29029                           	opt stack 0
 29030  0061E6                     i2___ftge:
 29031                           	opt stack 10
 29032                           
 29033                           ;incstack = 0
 29034  0061E6  AE21               	btfss	i2___ftge@ff1+2,7,c
 29035  0061E8  D016               	goto	i2l8906
 29036  0061EA  C01F  F025         	movff	i2___ftge@ff1,??i2___ftge
 29037  0061EE  C020  F026         	movff	i2___ftge@ff1+1,??i2___ftge+1
 29038  0061F2  C021  F027         	movff	i2___ftge@ff1+2,??i2___ftge+2
 29039  0061F6  1E25               	comf	??i2___ftge,f,c
 29040  0061F8  1E26               	comf	??i2___ftge+1,f,c
 29041  0061FA  1E27               	comf	??i2___ftge+2,f,c
 29042  0061FC  2A25               	incf	??i2___ftge,f,c
 29043  0061FE  0E00               	movlw	0
 29044  006200  2226               	addwfc	??i2___ftge+1,f,c
 29045  006202  2227               	addwfc	??i2___ftge+2,f,c
 29046  006204  0E00               	movlw	0
 29047  006206  2425               	addwf	??i2___ftge,w,c
 29048  006208  6E1F               	movwf	i2___ftge@ff1,c
 29049  00620A  0E00               	movlw	0
 29050  00620C  2026               	addwfc	??i2___ftge+1,w,c
 29051  00620E  6E20               	movwf	i2___ftge@ff1+1,c
 29052  006210  0E80               	movlw	128
 29053  006212  2027               	addwfc	??i2___ftge+2,w,c
 29054  006214  6E21               	movwf	i2___ftge@ff1+2,c
 29055  006216                     i2l8906:
 29056  006216  AE24               	btfss	i2___ftge@ff2+2,7,c
 29057  006218  D016               	goto	i2l8910
 29058  00621A  C022  F025         	movff	i2___ftge@ff2,??i2___ftge
 29059  00621E  C023  F026         	movff	i2___ftge@ff2+1,??i2___ftge+1
 29060  006222  C024  F027         	movff	i2___ftge@ff2+2,??i2___ftge+2
 29061  006226  1E25               	comf	??i2___ftge,f,c
 29062  006228  1E26               	comf	??i2___ftge+1,f,c
 29063  00622A  1E27               	comf	??i2___ftge+2,f,c
 29064  00622C  2A25               	incf	??i2___ftge,f,c
 29065  00622E  0E00               	movlw	0
 29066  006230  2226               	addwfc	??i2___ftge+1,f,c
 29067  006232  2227               	addwfc	??i2___ftge+2,f,c
 29068  006234  0E00               	movlw	0
 29069  006236  2425               	addwf	??i2___ftge,w,c
 29070  006238  6E22               	movwf	i2___ftge@ff2,c
 29071  00623A  0E00               	movlw	0
 29072  00623C  2026               	addwfc	??i2___ftge+1,w,c
 29073  00623E  6E23               	movwf	i2___ftge@ff2+1,c
 29074  006240  0E80               	movlw	128
 29075  006242  2027               	addwfc	??i2___ftge+2,w,c
 29076  006244  6E24               	movwf	i2___ftge@ff2+2,c
 29077  006246                     i2l8910:
 29078  006246  0E00               	movlw	0
 29079  006248  1A1F               	xorwf	i2___ftge@ff1,f,c
 29080  00624A  0E00               	movlw	0
 29081  00624C  1A20               	xorwf	i2___ftge@ff1+1,f,c
 29082  00624E  0E80               	movlw	128
 29083  006250  1A21               	xorwf	i2___ftge@ff1+2,f,c
 29084  006252  0E00               	movlw	0
 29085  006254  1A22               	xorwf	i2___ftge@ff2,f,c
 29086  006256  0E00               	movlw	0
 29087  006258  1A23               	xorwf	i2___ftge@ff2+1,f,c
 29088  00625A  0E80               	movlw	128
 29089  00625C  1A24               	xorwf	i2___ftge@ff2+2,f,c
 29090  00625E  5022               	movf	i2___ftge@ff2,w,c
 29091  006260  5C1F               	subwf	i2___ftge@ff1,w,c
 29092  006262  5023               	movf	i2___ftge@ff2+1,w,c
 29093  006264  5820               	subwfb	i2___ftge@ff1+1,w,c
 29094  006266  5024               	movf	i2___ftge@ff2+2,w,c
 29095  006268  5821               	subwfb	i2___ftge@ff1+2,w,c
 29096  00626A  B0D8               	btfsc	status,0,c
 29097  00626C  D002               	goto	i2l8916
 29098  00626E  90D8               	bcf	status,0,c
 29099  006270  0012               	return	
 29100  006272                     i2l8916:
 29101  006272  80D8               	bsf	status,0,c
 29102  006274  0012               	return	
 29103  006276                     __end_ofi2___ftge:
 29104                           	opt stack 0
 29105                           pclatu	equ	0xFFB
 29106                           pclath	equ	0xFFA
 29107                           tblptru	equ	0xFF8
 29108                           tblptrh	equ	0xFF7
 29109                           tblptrl	equ	0xFF6
 29110                           tablat	equ	0xFF5
 29111                           prodh	equ	0xFF4
 29112                           prodl	equ	0xFF3
 29113                           intcon	equ	0xFF2
 29114                           postinc0	equ	0xFEE
 29115                           fsr0h	equ	0xFEA
 29116                           fsr0l	equ	0xFE9
 29117                           wreg	equ	0xFE8
 29118                           postdec1	equ	0xFE5
 29119                           fsr1h	equ	0xFE2
 29120                           fsr1l	equ	0xFE1
 29121                           bsr	equ	0xFE0
 29122                           indf2	equ	0xFDF
 29123                           postinc2	equ	0xFDE
 29124                           postdec2	equ	0xFDD
 29125                           plusw2	equ	0xFDB
 29126                           fsr2h	equ	0xFDA
 29127                           fsr2l	equ	0xFD9
 29128                           status	equ	0xFD8
 29129                           
 29130 ;; *************** function i2___ftadd *****************
 29131 ;; Defined at:
 29132 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
 29133 ;; Parameters:    Size  Location     Type
 29134 ;;  f1              3   18[COMRAM] float 
 29135 ;;  f2              3   21[COMRAM] float 
 29136 ;; Auto vars:     Size  Location     Type
 29137 ;;  __ftadd         1   29[COMRAM] unsigned char 
 29138 ;;  __ftadd         1   28[COMRAM] unsigned char 
 29139 ;;  __ftadd         1   27[COMRAM] unsigned char 
 29140 ;; Return value:  Size  Location     Type
 29141 ;;                  3   18[COMRAM] float 
 29142 ;; Registers used:
 29143 ;;		wreg, status,2, status,0, cstack
 29144 ;; Tracked objects:
 29145 ;;		On entry : 0/0
 29146 ;;		On exit  : 0/0
 29147 ;;		Unchanged: 0/0
 29148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29149 ;;      Params:         6       0       0       0       0       0       0
 29150 ;;      Locals:         3       0       0       0       0       0       0
 29151 ;;      Temps:          3       0       0       0       0       0       0
 29152 ;;      Totals:        12       0       0       0       0       0       0
 29153 ;;Total ram usage:       12 bytes
 29154 ;; Hardware stack levels used:    1
 29155 ;; Hardware stack levels required when called:    1
 29156 ;; This function calls:
 29157 ;;		i2___ftpack
 29158 ;; This function is called by:
 29159 ;;		_T4int
 29160 ;; This function uses a non-reentrant model
 29161 ;;
 29162                           
 29163                           	psect	text124
 29164  003220                     __ptext124:
 29165                           	opt stack 0
 29166  003220                     i2___ftadd:
 29167                           	opt stack 9
 29168                           
 29169                           ;incstack = 0
 29170  003220  C015  F019         	movff	i2___ftadd@f1+2,??i2___ftadd
 29171  003224  6A1A               	clrf	(??i2___ftadd+1)& (0+255),c
 29172  003226  6A1B               	clrf	(??i2___ftadd+2)& (0+255),c
 29173  003228  3414               	rlcf	i2___ftadd@f1+1,w,c
 29174  00322A  3619               	rlcf	??i2___ftadd& (0+255),f,c
 29175  00322C  E301               	bnc	u1263_41
 29176  00322E  801A               	bsf	(??i2___ftadd+1)& (0+255),0,c
 29177  003230                     u1263_41:
 29178  003230  5019               	movf	??i2___ftadd,w,c
 29179  003232  6E1E               	movwf	i2___ftadd@exp1,c
 29180  003234  C018  F019         	movff	i2___ftadd@f2+2,??i2___ftadd
 29181  003238  6A1A               	clrf	(??i2___ftadd+1)& (0+255),c
 29182  00323A  6A1B               	clrf	(??i2___ftadd+2)& (0+255),c
 29183  00323C  3417               	rlcf	i2___ftadd@f2+1,w,c
 29184  00323E  3619               	rlcf	??i2___ftadd& (0+255),f,c
 29185  003240  E301               	bnc	u1264_41
 29186  003242  801A               	bsf	(??i2___ftadd+1)& (0+255),0,c
 29187  003244                     u1264_41:
 29188  003244  5019               	movf	??i2___ftadd,w,c
 29189  003246  6E1D               	movwf	i2___ftadd@exp2,c
 29190  003248  501E               	movf	i2___ftadd@exp1,w,c
 29191  00324A  B4D8               	btfsc	status,2,c
 29192  00324C  D00B               	goto	i2l1334
 29193  00324E  501D               	movf	i2___ftadd@exp2,w,c
 29194  003250  5C1E               	subwf	i2___ftadd@exp1,w,c
 29195  003252  B0D8               	btfsc	status,0,c
 29196  003254  D00E               	goto	i2l8840
 29197  003256  501E               	movf	i2___ftadd@exp1,w,c
 29198  003258  0800               	sublw	0
 29199  00325A  241D               	addwf	i2___ftadd@exp2,w,c
 29200  00325C  6E19               	movwf	??i2___ftadd& (0+255),c
 29201  00325E  0E18               	movlw	24
 29202  003260  6419               	cpfsgt	??i2___ftadd,c
 29203  003262  D007               	goto	i2l8840
 29204  003264                     i2l1334:
 29205  003264  C016  F013         	movff	i2___ftadd@f2,?i2___ftadd
 29206  003268  C017  F014         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 29207  00326C  C018  F015         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 29208  003270  0012               	return	
 29209  003272                     i2l8840:
 29210  003272  501D               	movf	i2___ftadd@exp2,w,c
 29211  003274  B4D8               	btfsc	status,2,c
 29212  003276  D00B               	goto	i2l1338
 29213  003278  501E               	movf	i2___ftadd@exp1,w,c
 29214  00327A  5C1D               	subwf	i2___ftadd@exp2,w,c
 29215  00327C  B0D8               	btfsc	status,0,c
 29216  00327E  D00E               	goto	i2l8846
 29217  003280  501D               	movf	i2___ftadd@exp2,w,c
 29218  003282  0800               	sublw	0
 29219  003284  241E               	addwf	i2___ftadd@exp1,w,c
 29220  003286  6E19               	movwf	??i2___ftadd& (0+255),c
 29221  003288  0E18               	movlw	24
 29222  00328A  6419               	cpfsgt	??i2___ftadd,c
 29223  00328C  D007               	goto	i2l8846
 29224  00328E                     i2l1338:
 29225  00328E  C013  F013         	movff	i2___ftadd@f1,?i2___ftadd
 29226  003292  C014  F014         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 29227  003296  C015  F015         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 29228  00329A  0012               	return	
 29229  00329C                     i2l8846:
 29230  00329C  0E06               	movlw	6
 29231  00329E  6E1C               	movwf	i2___ftadd@sign,c
 29232  0032A0  BE15               	btfsc	i2___ftadd@f1+2,7,c
 29233  0032A2  8E1C               	bsf	i2___ftadd@sign,7,c
 29234  0032A4  BE18               	btfsc	i2___ftadd@f2+2,7,c
 29235  0032A6  8C1C               	bsf	i2___ftadd@sign,6,c
 29236  0032A8  8E14               	bsf	i2___ftadd@f1+1,7,c
 29237  0032AA  0EFF               	movlw	255
 29238  0032AC  1613               	andwf	i2___ftadd@f1,f,c
 29239  0032AE  0EFF               	movlw	255
 29240  0032B0  1614               	andwf	i2___ftadd@f1+1,f,c
 29241  0032B2  0E00               	movlw	0
 29242  0032B4  1615               	andwf	i2___ftadd@f1+2,f,c
 29243  0032B6  8E17               	bsf	i2___ftadd@f2+1,7,c
 29244  0032B8  0EFF               	movlw	255
 29245  0032BA  1616               	andwf	i2___ftadd@f2,f,c
 29246  0032BC  0EFF               	movlw	255
 29247  0032BE  1617               	andwf	i2___ftadd@f2+1,f,c
 29248  0032C0  0E00               	movlw	0
 29249  0032C2  1618               	andwf	i2___ftadd@f2+2,f,c
 29250  0032C4  501D               	movf	i2___ftadd@exp2,w,c
 29251  0032C6  5C1E               	subwf	i2___ftadd@exp1,w,c
 29252  0032C8  B0D8               	btfsc	status,0,c
 29253  0032CA  D01B               	goto	i2l8872
 29254  0032CC                     i2l8862:
 29255  0032CC  90D8               	bcf	status,0,c
 29256  0032CE  3616               	rlcf	i2___ftadd@f2,f,c
 29257  0032D0  3617               	rlcf	i2___ftadd@f2+1,f,c
 29258  0032D2  3618               	rlcf	i2___ftadd@f2+2,f,c
 29259  0032D4  061D               	decf	i2___ftadd@exp2,f,c
 29260  0032D6  501E               	movf	i2___ftadd@exp1,w,c
 29261  0032D8  181D               	xorwf	i2___ftadd@exp2,w,c
 29262  0032DA  B4D8               	btfsc	status,2,c
 29263  0032DC  D00D               	goto	i2l8870
 29264  0032DE  061C               	decf	i2___ftadd@sign,f,c
 29265  0032E0  C01C  F019         	movff	i2___ftadd@sign,??i2___ftadd
 29266  0032E4  0E07               	movlw	7
 29267  0032E6  1619               	andwf	??i2___ftadd,f,c
 29268  0032E8  B4D8               	btfsc	status,2,c
 29269  0032EA  D006               	goto	i2l8870
 29270  0032EC  D7EF               	goto	i2l8862
 29271  0032EE                     i2l8868:
 29272  0032EE  90D8               	bcf	status,0,c
 29273  0032F0  3215               	rrcf	i2___ftadd@f1+2,f,c
 29274  0032F2  3214               	rrcf	i2___ftadd@f1+1,f,c
 29275  0032F4  3213               	rrcf	i2___ftadd@f1,f,c
 29276  0032F6  2A1E               	incf	i2___ftadd@exp1,f,c
 29277  0032F8                     i2l8870:
 29278  0032F8  501D               	movf	i2___ftadd@exp2,w,c
 29279  0032FA  181E               	xorwf	i2___ftadd@exp1,w,c
 29280  0032FC  B4D8               	btfsc	status,2,c
 29281  0032FE  D01F               	goto	i2l1349
 29282  003300  D7F6               	goto	i2l8868
 29283  003302                     i2l8872:
 29284  003302  501E               	movf	i2___ftadd@exp1,w,c
 29285  003304  5C1D               	subwf	i2___ftadd@exp2,w,c
 29286  003306  B0D8               	btfsc	status,0,c
 29287  003308  D01A               	goto	i2l1349
 29288  00330A                     i2l8874:
 29289  00330A  90D8               	bcf	status,0,c
 29290  00330C  3613               	rlcf	i2___ftadd@f1,f,c
 29291  00330E  3614               	rlcf	i2___ftadd@f1+1,f,c
 29292  003310  3615               	rlcf	i2___ftadd@f1+2,f,c
 29293  003312  061E               	decf	i2___ftadd@exp1,f,c
 29294  003314  501E               	movf	i2___ftadd@exp1,w,c
 29295  003316  181D               	xorwf	i2___ftadd@exp2,w,c
 29296  003318  B4D8               	btfsc	status,2,c
 29297  00331A  D00D               	goto	i2l8882
 29298  00331C  061C               	decf	i2___ftadd@sign,f,c
 29299  00331E  C01C  F019         	movff	i2___ftadd@sign,??i2___ftadd
 29300  003322  0E07               	movlw	7
 29301  003324  1619               	andwf	??i2___ftadd,f,c
 29302  003326  B4D8               	btfsc	status,2,c
 29303  003328  D006               	goto	i2l8882
 29304  00332A  D7EF               	goto	i2l8874
 29305  00332C                     i2l8880:
 29306  00332C  90D8               	bcf	status,0,c
 29307  00332E  3218               	rrcf	i2___ftadd@f2+2,f,c
 29308  003330  3217               	rrcf	i2___ftadd@f2+1,f,c
 29309  003332  3216               	rrcf	i2___ftadd@f2,f,c
 29310  003334  2A1D               	incf	i2___ftadd@exp2,f,c
 29311  003336                     i2l8882:
 29312  003336  501D               	movf	i2___ftadd@exp2,w,c
 29313  003338  181E               	xorwf	i2___ftadd@exp1,w,c
 29314  00333A  A4D8               	btfss	status,2,c
 29315  00333C  D7F7               	goto	i2l8880
 29316  00333E                     i2l1349:
 29317  00333E  AE1C               	btfss	i2___ftadd@sign,7,c
 29318  003340  D00C               	goto	i2l1358
 29319  003342  0EFF               	movlw	255
 29320  003344  1A13               	xorwf	i2___ftadd@f1,f,c
 29321  003346  0EFF               	movlw	255
 29322  003348  1A14               	xorwf	i2___ftadd@f1+1,f,c
 29323  00334A  0EFF               	movlw	255
 29324  00334C  1A15               	xorwf	i2___ftadd@f1+2,f,c
 29325  00334E  0E01               	movlw	1
 29326  003350  2613               	addwf	i2___ftadd@f1,f,c
 29327  003352  0E00               	movlw	0
 29328  003354  2214               	addwfc	i2___ftadd@f1+1,f,c
 29329  003356  0E00               	movlw	0
 29330  003358  2215               	addwfc	i2___ftadd@f1+2,f,c
 29331  00335A                     i2l1358:
 29332  00335A  AC1C               	btfss	i2___ftadd@sign,6,c
 29333  00335C  D00C               	goto	i2l8888
 29334  00335E  0EFF               	movlw	255
 29335  003360  1A16               	xorwf	i2___ftadd@f2,f,c
 29336  003362  0EFF               	movlw	255
 29337  003364  1A17               	xorwf	i2___ftadd@f2+1,f,c
 29338  003366  0EFF               	movlw	255
 29339  003368  1A18               	xorwf	i2___ftadd@f2+2,f,c
 29340  00336A  0E01               	movlw	1
 29341  00336C  2616               	addwf	i2___ftadd@f2,f,c
 29342  00336E  0E00               	movlw	0
 29343  003370  2217               	addwfc	i2___ftadd@f2+1,f,c
 29344  003372  0E00               	movlw	0
 29345  003374  2218               	addwfc	i2___ftadd@f2+2,f,c
 29346  003376                     i2l8888:
 29347  003376  0E00               	movlw	0
 29348  003378  6E1C               	movwf	i2___ftadd@sign,c
 29349  00337A  5013               	movf	i2___ftadd@f1,w,c
 29350  00337C  2616               	addwf	i2___ftadd@f2,f,c
 29351  00337E  5014               	movf	i2___ftadd@f1+1,w,c
 29352  003380  2217               	addwfc	i2___ftadd@f2+1,f,c
 29353  003382  5015               	movf	i2___ftadd@f1+2,w,c
 29354  003384  2218               	addwfc	i2___ftadd@f2+2,f,c
 29355  003386  AE18               	btfss	i2___ftadd@f2+2,7,c
 29356  003388  D00E               	goto	i2l8898
 29357  00338A  0EFF               	movlw	255
 29358  00338C  1A16               	xorwf	i2___ftadd@f2,f,c
 29359  00338E  0EFF               	movlw	255
 29360  003390  1A17               	xorwf	i2___ftadd@f2+1,f,c
 29361  003392  0EFF               	movlw	255
 29362  003394  1A18               	xorwf	i2___ftadd@f2+2,f,c
 29363  003396  0E01               	movlw	1
 29364  003398  2616               	addwf	i2___ftadd@f2,f,c
 29365  00339A  0E00               	movlw	0
 29366  00339C  2217               	addwfc	i2___ftadd@f2+1,f,c
 29367  00339E  0E00               	movlw	0
 29368  0033A0  2218               	addwfc	i2___ftadd@f2+2,f,c
 29369  0033A2  0E01               	movlw	1
 29370  0033A4  6E1C               	movwf	i2___ftadd@sign,c
 29371  0033A6                     i2l8898:
 29372  0033A6  C016  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 29373  0033AA  C017  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 29374  0033AE  C018  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 29375  0033B2  C01E  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 29376  0033B6  C01C  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 29377  0033BA  ECA1  F02D         	call	i2___ftpack	;wreg free
 29378  0033BE  C001  F013         	movff	?i2___ftpack,?i2___ftadd
 29379  0033C2  C002  F014         	movff	?i2___ftpack+1,?i2___ftadd+1
 29380  0033C6  C003  F015         	movff	?i2___ftpack+2,?i2___ftadd+2
 29381  0033CA  0012               	return	
 29382  0033CC                     __end_ofi2___ftadd:
 29383                           	opt stack 0
 29384                           pclatu	equ	0xFFB
 29385                           pclath	equ	0xFFA
 29386                           tblptru	equ	0xFF8
 29387                           tblptrh	equ	0xFF7
 29388                           tblptrl	equ	0xFF6
 29389                           tablat	equ	0xFF5
 29390                           prodh	equ	0xFF4
 29391                           prodl	equ	0xFF3
 29392                           intcon	equ	0xFF2
 29393                           postinc0	equ	0xFEE
 29394                           fsr0h	equ	0xFEA
 29395                           fsr0l	equ	0xFE9
 29396                           wreg	equ	0xFE8
 29397                           postdec1	equ	0xFE5
 29398                           fsr1h	equ	0xFE2
 29399                           fsr1l	equ	0xFE1
 29400                           bsr	equ	0xFE0
 29401                           indf2	equ	0xFDF
 29402                           postinc2	equ	0xFDE
 29403                           postdec2	equ	0xFDD
 29404                           plusw2	equ	0xFDB
 29405                           fsr2h	equ	0xFDA
 29406                           fsr2l	equ	0xFD9
 29407                           status	equ	0xFD8
 29408                           
 29409 ;; *************** function i2___altoft *****************
 29410 ;; Defined at:
 29411 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\altoft.c"
 29412 ;; Parameters:    Size  Location     Type
 29413 ;;  c               4    8[COMRAM] long 
 29414 ;; Auto vars:     Size  Location     Type
 29415 ;;  __altoft        1   17[COMRAM] unsigned char 
 29416 ;;  __altoft        1   16[COMRAM] unsigned char 
 29417 ;; Return value:  Size  Location     Type
 29418 ;;                  3    8[COMRAM] float 
 29419 ;; Registers used:
 29420 ;;		wreg, status,2, status,0, cstack
 29421 ;; Tracked objects:
 29422 ;;		On entry : 0/0
 29423 ;;		On exit  : 0/0
 29424 ;;		Unchanged: 0/0
 29425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29426 ;;      Params:         4       0       0       0       0       0       0
 29427 ;;      Locals:         2       0       0       0       0       0       0
 29428 ;;      Temps:          4       0       0       0       0       0       0
 29429 ;;      Totals:        10       0       0       0       0       0       0
 29430 ;;Total ram usage:       10 bytes
 29431 ;; Hardware stack levels used:    1
 29432 ;; Hardware stack levels required when called:    1
 29433 ;; This function calls:
 29434 ;;		i2___ftpack
 29435 ;; This function is called by:
 29436 ;;		_T4int
 29437 ;; This function uses a non-reentrant model
 29438 ;;
 29439                           
 29440                           	psect	text125
 29441  006720                     __ptext125:
 29442                           	opt stack 0
 29443  006720                     i2___altoft:
 29444                           	opt stack 9
 29445                           
 29446                           ;incstack = 0
 29447  006720  0E00               	movlw	0
 29448  006722  6E12               	movwf	i2___altoft@sign,c
 29449  006724  0E8E               	movlw	142
 29450  006726  6E11               	movwf	i2___altoft@exp,c
 29451  006728  AE0C               	btfss	i2___altoft@c+3,7,c
 29452  00672A  D011               	goto	i2l8826
 29453  00672C  1E0C               	comf	i2___altoft@c+3,f,c
 29454  00672E  1E0B               	comf	i2___altoft@c+2,f,c
 29455  006730  1E0A               	comf	i2___altoft@c+1,f,c
 29456  006732  6C09               	negf	i2___altoft@c,c
 29457  006734  0E00               	movlw	0
 29458  006736  220A               	addwfc	i2___altoft@c+1,f,c
 29459  006738  220B               	addwfc	i2___altoft@c+2,f,c
 29460  00673A  220C               	addwfc	i2___altoft@c+3,f,c
 29461  00673C  0E01               	movlw	1
 29462  00673E  6E12               	movwf	i2___altoft@sign,c
 29463  006740  D006               	goto	i2l8826
 29464  006742                     i2l8824:
 29465  006742  90D8               	bcf	status,0,c
 29466  006744  320C               	rrcf	i2___altoft@c+3,f,c
 29467  006746  320B               	rrcf	i2___altoft@c+2,f,c
 29468  006748  320A               	rrcf	i2___altoft@c+1,f,c
 29469  00674A  3209               	rrcf	i2___altoft@c,f,c
 29470  00674C  2A11               	incf	i2___altoft@exp,f,c
 29471  00674E                     i2l8826:
 29472  00674E  0E00               	movlw	0
 29473  006750  1409               	andwf	i2___altoft@c,w,c
 29474  006752  6E0D               	movwf	??i2___altoft& (0+255),c
 29475  006754  0E00               	movlw	0
 29476  006756  140A               	andwf	i2___altoft@c+1,w,c
 29477  006758  6E0E               	movwf	(??i2___altoft+1)& (0+255),c
 29478  00675A  0E00               	movlw	0
 29479  00675C  140B               	andwf	i2___altoft@c+2,w,c
 29480  00675E  6E0F               	movwf	(??i2___altoft+2)& (0+255),c
 29481  006760  0EFF               	movlw	255
 29482  006762  140C               	andwf	i2___altoft@c+3,w,c
 29483  006764  6E10               	movwf	(??i2___altoft+3)& (0+255),c
 29484  006766  500D               	movf	??i2___altoft,w,c
 29485  006768  100E               	iorwf	??i2___altoft+1,w,c
 29486  00676A  100F               	iorwf	??i2___altoft+2,w,c
 29487  00676C  1010               	iorwf	??i2___altoft+3,w,c
 29488  00676E  A4D8               	btfss	status,2,c
 29489  006770  D7E8               	goto	i2l8824
 29490  006772  C009  F001         	movff	i2___altoft@c,i2___ftpack@arg
 29491  006776  C00A  F002         	movff	i2___altoft@c+1,i2___ftpack@arg+1
 29492  00677A  C00B  F003         	movff	i2___altoft@c+2,i2___ftpack@arg+2
 29493  00677E  C011  F004         	movff	i2___altoft@exp,i2___ftpack@exp
 29494  006782  C012  F005         	movff	i2___altoft@sign,i2___ftpack@sign
 29495  006786  ECA1  F02D         	call	i2___ftpack	;wreg free
 29496  00678A  C001  F009         	movff	?i2___ftpack,?i2___altoft
 29497  00678E  C002  F00A         	movff	?i2___ftpack+1,?i2___altoft+1
 29498  006792  C003  F00B         	movff	?i2___ftpack+2,?i2___altoft+2
 29499  006796  0012               	return	
 29500  006798                     __end_ofi2___altoft:
 29501                           	opt stack 0
 29502                           pclatu	equ	0xFFB
 29503                           pclath	equ	0xFFA
 29504                           tblptru	equ	0xFF8
 29505                           tblptrh	equ	0xFF7
 29506                           tblptrl	equ	0xFF6
 29507                           tablat	equ	0xFF5
 29508                           prodh	equ	0xFF4
 29509                           prodl	equ	0xFF3
 29510                           intcon	equ	0xFF2
 29511                           postinc0	equ	0xFEE
 29512                           fsr0h	equ	0xFEA
 29513                           fsr0l	equ	0xFE9
 29514                           wreg	equ	0xFE8
 29515                           postdec1	equ	0xFE5
 29516                           fsr1h	equ	0xFE2
 29517                           fsr1l	equ	0xFE1
 29518                           bsr	equ	0xFE0
 29519                           indf2	equ	0xFDF
 29520                           postinc2	equ	0xFDE
 29521                           postdec2	equ	0xFDD
 29522                           plusw2	equ	0xFDB
 29523                           fsr2h	equ	0xFDA
 29524                           fsr2l	equ	0xFD9
 29525                           status	equ	0xFD8
 29526                           
 29527 ;; *************** function i2___ftpack *****************
 29528 ;; Defined at:
 29529 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
 29530 ;; Parameters:    Size  Location     Type
 29531 ;;  arg             3    0[COMRAM] unsigned um
 29532 ;;  exp             1    3[COMRAM] unsigned char 
 29533 ;;  sign            1    4[COMRAM] unsigned char 
 29534 ;; Auto vars:     Size  Location     Type
 29535 ;;		None
 29536 ;; Return value:  Size  Location     Type
 29537 ;;                  3    0[COMRAM] float 
 29538 ;; Registers used:
 29539 ;;		wreg, status,2, status,0
 29540 ;; Tracked objects:
 29541 ;;		On entry : 0/0
 29542 ;;		On exit  : 0/0
 29543 ;;		Unchanged: 0/0
 29544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29545 ;;      Params:         5       0       0       0       0       0       0
 29546 ;;      Locals:         0       0       0       0       0       0       0
 29547 ;;      Temps:          3       0       0       0       0       0       0
 29548 ;;      Totals:         8       0       0       0       0       0       0
 29549 ;;Total ram usage:        8 bytes
 29550 ;; Hardware stack levels used:    1
 29551 ;; This function calls:
 29552 ;;		Nothing
 29553 ;; This function is called by:
 29554 ;;		i2___altoft
 29555 ;;		i2___ftadd
 29556 ;; This function uses a non-reentrant model
 29557 ;;
 29558                           
 29559                           	psect	text126
 29560  005B42                     __ptext126:
 29561                           	opt stack 0
 29562  005B42                     i2___ftpack:
 29563                           	opt stack 9
 29564                           
 29565                           ;incstack = 0
 29566  005B42  5004               	movf	i2___ftpack@exp,w,c
 29567  005B44  B4D8               	btfsc	status,2,c
 29568  005B46  D005               	goto	i2l7466
 29569  005B48  5001               	movf	i2___ftpack@arg,w,c
 29570  005B4A  1002               	iorwf	i2___ftpack@arg+1,w,c
 29571  005B4C  1003               	iorwf	i2___ftpack@arg+2,w,c
 29572  005B4E  A4D8               	btfss	status,2,c
 29573  005B50  D00C               	goto	i2l7472
 29574  005B52                     i2l7466:
 29575  005B52  0E00               	movlw	0
 29576  005B54  6E01               	movwf	?i2___ftpack,c
 29577  005B56  0E00               	movlw	0
 29578  005B58  6E02               	movwf	?i2___ftpack+1,c
 29579  005B5A  0E00               	movlw	0
 29580  005B5C  6E03               	movwf	?i2___ftpack+2,c
 29581  005B5E  0012               	return	
 29582  005B60                     i2l7470:
 29583  005B60  2A04               	incf	i2___ftpack@exp,f,c
 29584  005B62  90D8               	bcf	status,0,c
 29585  005B64  3203               	rrcf	i2___ftpack@arg+2,f,c
 29586  005B66  3202               	rrcf	i2___ftpack@arg+1,f,c
 29587  005B68  3201               	rrcf	i2___ftpack@arg,f,c
 29588  005B6A                     i2l7472:
 29589  005B6A  0E00               	movlw	0
 29590  005B6C  1401               	andwf	i2___ftpack@arg,w,c
 29591  005B6E  6E06               	movwf	??i2___ftpack& (0+255),c
 29592  005B70  0E00               	movlw	0
 29593  005B72  1402               	andwf	i2___ftpack@arg+1,w,c
 29594  005B74  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 29595  005B76  0EFE               	movlw	254
 29596  005B78  1403               	andwf	i2___ftpack@arg+2,w,c
 29597  005B7A  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 29598  005B7C  5006               	movf	??i2___ftpack,w,c
 29599  005B7E  1007               	iorwf	??i2___ftpack+1,w,c
 29600  005B80  1008               	iorwf	??i2___ftpack+2,w,c
 29601  005B82  B4D8               	btfsc	status,2,c
 29602  005B84  D00C               	goto	i2l7478
 29603  005B86  D7EC               	goto	i2l7470
 29604  005B88                     i2l7474:
 29605  005B88  2A04               	incf	i2___ftpack@exp,f,c
 29606  005B8A  0E01               	movlw	1
 29607  005B8C  2601               	addwf	i2___ftpack@arg,f,c
 29608  005B8E  0E00               	movlw	0
 29609  005B90  2202               	addwfc	i2___ftpack@arg+1,f,c
 29610  005B92  0E00               	movlw	0
 29611  005B94  2203               	addwfc	i2___ftpack@arg+2,f,c
 29612  005B96  90D8               	bcf	status,0,c
 29613  005B98  3203               	rrcf	i2___ftpack@arg+2,f,c
 29614  005B9A  3202               	rrcf	i2___ftpack@arg+1,f,c
 29615  005B9C  3201               	rrcf	i2___ftpack@arg,f,c
 29616  005B9E                     i2l7478:
 29617  005B9E  0E00               	movlw	0
 29618  005BA0  1401               	andwf	i2___ftpack@arg,w,c
 29619  005BA2  6E06               	movwf	??i2___ftpack& (0+255),c
 29620  005BA4  0E00               	movlw	0
 29621  005BA6  1402               	andwf	i2___ftpack@arg+1,w,c
 29622  005BA8  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 29623  005BAA  0EFF               	movlw	255
 29624  005BAC  1403               	andwf	i2___ftpack@arg+2,w,c
 29625  005BAE  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 29626  005BB0  5006               	movf	??i2___ftpack,w,c
 29627  005BB2  1007               	iorwf	??i2___ftpack+1,w,c
 29628  005BB4  1008               	iorwf	??i2___ftpack+2,w,c
 29629  005BB6  B4D8               	btfsc	status,2,c
 29630  005BB8  D006               	goto	i2l7482
 29631  005BBA  D7E6               	goto	i2l7474
 29632  005BBC                     i2l7480:
 29633  005BBC  0604               	decf	i2___ftpack@exp,f,c
 29634  005BBE  90D8               	bcf	status,0,c
 29635  005BC0  3601               	rlcf	i2___ftpack@arg,f,c
 29636  005BC2  3602               	rlcf	i2___ftpack@arg+1,f,c
 29637  005BC4  3603               	rlcf	i2___ftpack@arg+2,f,c
 29638  005BC6                     i2l7482:
 29639  005BC6  BE02               	btfsc	i2___ftpack@arg+1,7,c
 29640  005BC8  D003               	goto	i2l1311
 29641  005BCA  0E02               	movlw	2
 29642  005BCC  6004               	cpfslt	i2___ftpack@exp,c
 29643  005BCE  D7F6               	goto	i2l7480
 29644  005BD0                     i2l1311:
 29645  005BD0  A004               	btfss	i2___ftpack@exp,0,c
 29646  005BD2  9E02               	bcf	i2___ftpack@arg+1,7,c
 29647  005BD4  90D8               	bcf	status,0,c
 29648  005BD6  3204               	rrcf	i2___ftpack@exp,f,c
 29649  005BD8  5004               	movf	i2___ftpack@exp,w,c
 29650  005BDA  1203               	iorwf	i2___ftpack@arg+2,f,c
 29651  005BDC  5005               	movf	i2___ftpack@sign,w,c
 29652  005BDE  A4D8               	btfss	status,2,c
 29653  005BE0  8E03               	bsf	i2___ftpack@arg+2,7,c
 29654  005BE2  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 29655  005BE6  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 29656  005BEA  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 29657  005BEE  0012               	return	
 29658  005BF0                     __end_ofi2___ftpack:
 29659                           	opt stack 0
 29660                           pclatu	equ	0xFFB
 29661                           pclath	equ	0xFFA
 29662                           tblptru	equ	0xFF8
 29663                           tblptrh	equ	0xFF7
 29664                           tblptrl	equ	0xFF6
 29665                           tablat	equ	0xFF5
 29666                           prodh	equ	0xFF4
 29667                           prodl	equ	0xFF3
 29668                           intcon	equ	0xFF2
 29669                           postinc0	equ	0xFEE
 29670                           fsr0h	equ	0xFEA
 29671                           fsr0l	equ	0xFE9
 29672                           wreg	equ	0xFE8
 29673                           postdec1	equ	0xFE5
 29674                           fsr1h	equ	0xFE2
 29675                           fsr1l	equ	0xFE1
 29676                           bsr	equ	0xFE0
 29677                           indf2	equ	0xFDF
 29678                           postinc2	equ	0xFDE
 29679                           postdec2	equ	0xFDD
 29680                           plusw2	equ	0xFDB
 29681                           fsr2h	equ	0xFDA
 29682                           fsr2l	equ	0xFD9
 29683                           status	equ	0xFD8
 29684                           
 29685 ;; *************** function _cutError *****************
 29686 ;; Defined at:
 29687 ;;		line 12 in file "source/T4Config.h"
 29688 ;; Parameters:    Size  Location     Type
 29689 ;;		None
 29690 ;; Auto vars:     Size  Location     Type
 29691 ;;		None
 29692 ;; Return value:  Size  Location     Type
 29693 ;;                  1    wreg      void 
 29694 ;; Registers used:
 29695 ;;		wreg, status,2
 29696 ;; Tracked objects:
 29697 ;;		On entry : 0/0
 29698 ;;		On exit  : 0/0
 29699 ;;		Unchanged: 0/0
 29700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29701 ;;      Params:         0       0       0       0       0       0       0
 29702 ;;      Locals:         0       0       0       0       0       0       0
 29703 ;;      Temps:          0       0       0       0       0       0       0
 29704 ;;      Totals:         0       0       0       0       0       0       0
 29705 ;;Total ram usage:        0 bytes
 29706 ;; Hardware stack levels used:    1
 29707 ;; This function calls:
 29708 ;;		Nothing
 29709 ;; This function is called by:
 29710 ;;		_T4int
 29711 ;; This function uses a non-reentrant model
 29712 ;;
 29713                           
 29714                           	psect	text127
 29715  00710E                     __ptext127:
 29716                           	opt stack 0
 29717  00710E                     _cutError:
 29718                           	opt stack 10
 29719                           
 29720                           ;T4Config.h: 13: processStarted = 0;
 29721                           
 29722                           ;incstack = 0
 29723  00710E  0E00               	movlw	0
 29724  007110  0100               	movlb	0	; () banked
 29725  007112  6FC0               	movwf	_processStarted& (0+255),b
 29726                           
 29727                           ;T4Config.h: 14: processState = 0;
 29728  007114  0E00               	movlw	0
 29729  007116  0100               	movlb	0	; () banked
 29730  007118  6FB3               	movwf	(_processState+1)& (0+255),b
 29731  00711A  0E00               	movlw	0
 29732  00711C  6FB2               	movwf	_processState& (0+255),b
 29733                           
 29734                           ;T4Config.h: 15: securTimer = 0;
 29735  00711E  0E00               	movlw	0
 29736  007120  6E37               	movwf	_securTimer,c
 29737  007122  0E00               	movlw	0
 29738  007124  6E38               	movwf	_securTimer+1,c
 29739  007126  0E00               	movlw	0
 29740  007128  6E39               	movwf	_securTimer+2,c
 29741  00712A  0E00               	movlw	0
 29742  00712C  6E3A               	movwf	_securTimer+3,c
 29743                           
 29744                           ; BSR set to: 0
 29745                           ;T4Config.h: 16: tempLastScreen = actualScreen;
 29746  00712E  C1BD  F0BC         	movff	_actualScreen,_tempLastScreen
 29747                           
 29748                           ;T4Config.h: 17: actualScreen = 13;
 29749  007132  0E0D               	movlw	13
 29750  007134  0101               	movlb	1	; () banked
 29751  007136  6FBD               	movwf	_actualScreen& (0+255),b
 29752                           
 29753                           ; BSR set to: 1
 29754                           ;T4Config.h: 18: LATCbits.LATC5 = 1;
 29755  007138  8A8B               	bsf	3979,5,c	;volatile
 29756                           
 29757                           ; BSR set to: 1
 29758  00713A  0012               	return		;funcret
 29759  00713C                     __end_of_cutError:
 29760                           	opt stack 0
 29761                           pclatu	equ	0xFFB
 29762                           pclath	equ	0xFFA
 29763                           tblptru	equ	0xFF8
 29764                           tblptrh	equ	0xFF7
 29765                           tblptrl	equ	0xFF6
 29766                           tablat	equ	0xFF5
 29767                           prodh	equ	0xFF4
 29768                           prodl	equ	0xFF3
 29769                           intcon	equ	0xFF2
 29770                           postinc0	equ	0xFEE
 29771                           fsr0h	equ	0xFEA
 29772                           fsr0l	equ	0xFE9
 29773                           wreg	equ	0xFE8
 29774                           postdec1	equ	0xFE5
 29775                           fsr1h	equ	0xFE2
 29776                           fsr1l	equ	0xFE1
 29777                           bsr	equ	0xFE0
 29778                           indf2	equ	0xFDF
 29779                           postinc2	equ	0xFDE
 29780                           postdec2	equ	0xFDD
 29781                           plusw2	equ	0xFDB
 29782                           fsr2h	equ	0xFDA
 29783                           fsr2l	equ	0xFD9
 29784                           status	equ	0xFD8
 29785                           pclatu	equ	0xFFB
 29786                           pclath	equ	0xFFA
 29787                           tblptru	equ	0xFF8
 29788                           tblptrh	equ	0xFF7
 29789                           tblptrl	equ	0xFF6
 29790                           tablat	equ	0xFF5
 29791                           prodh	equ	0xFF4
 29792                           prodl	equ	0xFF3
 29793                           intcon	equ	0xFF2
 29794                           postinc0	equ	0xFEE
 29795                           fsr0h	equ	0xFEA
 29796                           fsr0l	equ	0xFE9
 29797                           wreg	equ	0xFE8
 29798                           postdec1	equ	0xFE5
 29799                           fsr1h	equ	0xFE2
 29800                           fsr1l	equ	0xFE1
 29801                           bsr	equ	0xFE0
 29802                           indf2	equ	0xFDF
 29803                           postinc2	equ	0xFDE
 29804                           postdec2	equ	0xFDD
 29805                           plusw2	equ	0xFDB
 29806                           fsr2h	equ	0xFDA
 29807                           fsr2l	equ	0xFD9
 29808                           status	equ	0xFD8
 29809                           
 29810                           	psect	rparam
 29811  0000                     pclatu	equ	0xFFB
 29812                           pclath	equ	0xFFA
 29813                           tblptru	equ	0xFF8
 29814                           tblptrh	equ	0xFF7
 29815                           tblptrl	equ	0xFF6
 29816                           tablat	equ	0xFF5
 29817                           prodh	equ	0xFF4
 29818                           prodl	equ	0xFF3
 29819                           intcon	equ	0xFF2
 29820                           postinc0	equ	0xFEE
 29821                           fsr0h	equ	0xFEA
 29822                           fsr0l	equ	0xFE9
 29823                           wreg	equ	0xFE8
 29824                           postdec1	equ	0xFE5
 29825                           fsr1h	equ	0xFE2
 29826                           fsr1l	equ	0xFE1
 29827                           bsr	equ	0xFE0
 29828                           indf2	equ	0xFDF
 29829                           postinc2	equ	0xFDE
 29830                           postdec2	equ	0xFDD
 29831                           plusw2	equ	0xFDB
 29832                           fsr2h	equ	0xFDA
 29833                           fsr2l	equ	0xFD9
 29834                           status	equ	0xFD8
 29835                           
 29836                           	psect	temp
 29837  00005C                     btemp:
 29838                           	opt stack 0
 29839  00005C                     	ds	1
 29840  0000                     int$flags	set	btemp
 29841                           pclatu	equ	0xFFB
 29842                           pclath	equ	0xFFA
 29843                           tblptru	equ	0xFF8
 29844                           tblptrh	equ	0xFF7
 29845                           tblptrl	equ	0xFF6
 29846                           tablat	equ	0xFF5
 29847                           prodh	equ	0xFF4
 29848                           prodl	equ	0xFF3
 29849                           intcon	equ	0xFF2
 29850                           postinc0	equ	0xFEE
 29851                           fsr0h	equ	0xFEA
 29852                           fsr0l	equ	0xFE9
 29853                           wreg	equ	0xFE8
 29854                           postdec1	equ	0xFE5
 29855                           fsr1h	equ	0xFE2
 29856                           fsr1l	equ	0xFE1
 29857                           bsr	equ	0xFE0
 29858                           indf2	equ	0xFDF
 29859                           postinc2	equ	0xFDE
 29860                           postdec2	equ	0xFDD
 29861                           plusw2	equ	0xFDB
 29862                           fsr2h	equ	0xFDA
 29863                           fsr2l	equ	0xFD9
 29864                           status	equ	0xFD8


Data Sizes:
    Strings     692
    Constant    118
    Data        77
    BSS         85
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      91
    BANK0           160     69     121
    BANK1           256    119     192
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_43(CODE[17]), STR_42(CODE[18]), STR_41(CODE[17]), STR_40(CODE[18]), 
		 -> STR_39(CODE[17]), STR_38(CODE[18]), STR_37(CODE[17]), STR_36(CODE[18]), 
		 -> STR_35(CODE[17]), STR_34(CODE[18]), STR_33(CODE[7]), STR_32(CODE[18]), 
		 -> STR_31(CODE[19]), STR_30(CODE[18]), STR_29(CODE[18]), STR_28(CODE[18]), 
		 -> STR_27(CODE[18]), STR_26(CODE[18]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[18]), STR_22(CODE[17]), STR_21(CODE[25]), STR_20(CODE[18]), 
		 -> STR_19(CODE[16]), STR_18(CODE[18]), STR_17(CODE[7]), STR_16(CODE[18]), 
		 -> STR_15(CODE[19]), STR_14(CODE[18]), STR_13(CODE[18]), STR_12(CODE[18]), 
		 -> STR_11(CODE[18]), STR_10(CODE[18]), STR_9(CODE[20]), STR_8(CODE[18]), 
		 -> STR_7(CODE[18]), STR_6(CODE[18]), STR_5(CODE[18]), STR_4(CODE[18]), 
		 -> STR_3(CODE[18]), STR_2(CODE[18]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK1[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _hp_isr in COMRAM

    _hp_isr->_T4int
    _T4int->i2___ftge
    i2___ftge->i2___ftadd
    i2___ftadd->i2___altoft
    i2___altoft->i2___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_UARTint
    _UARTint->i1_longPressENTER
    i1_sysParamInit->i1_calcSysVars
    i1_pressUP->i1_chanValDigUP
    i1_pressRETRO->i1_initProtocoll
    i1_pressENTER->i1_desintegrator
    i1_pressDOWN->i1_chanValDigDOWN
    i1_longPressRETRO->i1___ftmul
    i1_longPressENTER->i1_integrator
    i1_integrator->i1___ftdiv
    i1___altoft->i1___ftpack
    i1_desintegrator->i1___ftmul
    i1___ftadd->i1___ftpack
    i1_calcVars2ti->i1___ftdiv
    i1___ftdiv->i1___altoft
    i1_calcSysVars->i1___ftmul
    i1___ftmul->i1___ftpack
    _T2int->i1_initProtocoll
    i1_initProtocoll->i1_setPWM2duty
    _saveProcessState->i1_writeEEPROM

Critical Paths under _hp_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _sysParamInit->_calcSysVars
    _calcSysVars->___ftmul
    _lcd_init->_lcd_send_byte
    _drawScreen->_drawSNquest
    _drawSNquest->_printf
    _drawReady2Cut->_printf
    _drawPassWord->_printf
    _drawMenu->_printf
    _drawCutError->_printf
    _drawChanVal->_printf
    _drawCalibProc->_printf
    _drawBadPass->_printf
    _drawPass1Lin->_printf
    _drawAutoCalibRM->_printf
    _drawValEditor->_printf
    _drawAdvON->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_4bits
    _lcd_read_byte->_lcd_read_4bits
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    _buttonChecking->_longPressENTER
    _pressUP->_chanValDigUP
    _pressRETRO->_initProtocoll
    _pressENTER->_desintegrator
    _pressDOWN->_chanValDigDOWN
    _longPressRETRO->___ftmul
    _initProtocoll->_setPWM2duty
    _longPressENTER->_desintegrator
    _integrator->___ftdiv
    ___altoft->___ftpack
    _desintegrator->___fttol
    ___fttol->_scale
    _calcVars2ti->___ftmul
    ___ftmul->___wmul
    ___ftdiv->___altoft
    ___ftadd->_fround
    _PWM2Config->_setPWM2duty

Critical Paths under _isr in BANK1

    None.

Critical Paths under _hp_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _hp_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _hp_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _hp_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _hp_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1108946
                       _EEPROMConfig
                         _PWM2Config
                         _UARTConfig
                     _buttonChecking
                        _clockConfig
                         _drawScreen
                    _interruptConfig
                           _ioConfig
                          _ioInitStt
                           _lcd_init
                        _setPWM2duty
                          _setPWM2on
                       _sysParamInit
                           _t4config
 ---------------------------------------------------------------------------------
 (1) _t4config                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sysParamInit                                         0     0      0    6702
                        _calcSysVars
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _readEEPROM                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _calcSysVars                                          3     3      0    6671
                                             35 BANK1      3     3      0
                            ___ftmul
 ---------------------------------------------------------------------------------
 (1) _setPWM2on                                            1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             6     6      0    1879
                                              8 BANK1      6     6      0
                     _lcd_send_4bits
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _ioInitStt                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ioConfig                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptConfig                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _drawScreen                                           0     0      0 1005633
                          _drawAdvON
                    _drawAutoCalibRM
                        _drawBadPass
                      _drawCalibProc
                        _drawChanVal
                       _drawCutError
                           _drawMenu
                       _drawPassWord
                      _drawReady2Cut
                        _drawSNquest
 ---------------------------------------------------------------------------------
 (2) _drawSNquest                                          3     3      0   72167
                                            116 BANK1      3     3      0
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawReady2Cut                                        0     0      0   71913
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawPassWord                                         2     2      0  140803
                                            116 BANK1      2     2      0
                       _drawPass1Lin
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawMenu                                             1     1      0   76624
                                            116 BANK1      1     1      0
                         _lcd_gotoxy
                           _lcd_putc
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawCutError                                         0     0      0   71913
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawChanVal                                          0     0      0  143826
                      _drawValEditor
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawCalibProc                                        0     0      0   71913
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawBadPass                                          0     0      0  140704
                       _drawPass1Lin
                             _printf
 ---------------------------------------------------------------------------------
 (3) _drawPass1Lin                                         0     0      0   71913
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawAutoCalibRM                                      0     0      0  143826
                      _drawValEditor
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (3) _drawValEditor                                        0     0      0   71913
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawAdvON                                            1     1      0   71944
                                            116 BANK1      1     1      0
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              54    36     18   68791
                                             63 BANK1     53    35     18
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   14173
                                             35 BANK1      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0    4680
                                             13 BANK1      1     1      0
                           _lcd_putc
                          _putchUART
 ---------------------------------------------------------------------------------
 (5) _putchUART                                            1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (5) _lcd_putc                                             2     2      0    4587
                                             11 BANK1      2     2      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_gotoxy                                           3     2      1    3122
                                              8 BANK1      3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        3     2      1    1403
                                              5 BANK1      3     2      1
                      _lcd_read_byte
                     _lcd_send_4bits
 ---------------------------------------------------------------------------------
 (3) _lcd_send_4bits                                       5     5      0     272
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (3) _lcd_read_byte                                        2     2      0     114
                                              2 BANK1      2     2      0
                     _lcd_read_4bits
 ---------------------------------------------------------------------------------
 (4) _lcd_read_4bits                                       2     2      0      46
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   13894
                                             35 BANK1     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3004
                                             14 BANK1      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1819
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1985
                                              6 BANK1      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     608
                                              0 BANK1     15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     827
                                              0 BANK1     12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2703
                                              8 BANK1      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     848
                                             13 BANK1      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     703
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    5011
                                             57 BANK1      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     142
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     996
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (1) _clockConfig                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buttonChecking                                       0     0      0   93261
                           _delay_ms
                      _longPressDOWN
                     _longPressENTER
                     _longPressRETRO
                        _longPressUP
                          _pressDOWN
                         _pressENTER
                         _pressRETRO
                            _pressUP
                        _releaseDOWN
                       _releaseENTER
                       _releaseRETRO
                          _releaseUP
 ---------------------------------------------------------------------------------
 (2) _releaseUP                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseRETRO                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseENTER                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseDOWN                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pressUP                                              1     1      0       0
                                              5 BANK1      1     1      0
                       _chanValDigUP
 ---------------------------------------------------------------------------------
 (3) _chanValDigUP                                         5     5      0       0
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (2) _pressRETRO                                           0     0      0     751
                      _initProtocoll
 ---------------------------------------------------------------------------------
 (2) _pressENTER                                           0     0      0   28834
                            ___ftmul
                          _checkPass
                     _confirmEdition
                      _desintegrator
                      _initProtocoll
                        _setPWM2duty
 ---------------------------------------------------------------------------------
 (3) _checkPass                                            7     7      0     170
                                              0 BANK1      7     7      0
 ---------------------------------------------------------------------------------
 (2) _pressDOWN                                            1     1      0       0
                                              5 BANK1      1     1      0
                     _chanValDigDOWN
 ---------------------------------------------------------------------------------
 (3) _chanValDigDOWN                                       5     5      0       0
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (2) _longPressUP                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _longPressRETRO                                       0     0      0    7419
                            ___ftmul
                      _initProtocoll
 ---------------------------------------------------------------------------------
 (3) _initProtocoll                                        1     1      0     751
                                              6 BANK1      1     1      0
                        _setPWM2duty
 ---------------------------------------------------------------------------------
 (2) _longPressENTER                                       6     6      0   55265
                                             76 BANK1      6     6      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                        _calcVars2ti
                     _confirmEdition
                      _desintegrator
                         _integrator
 ---------------------------------------------------------------------------------
 (3) _integrator                                          12    12      0    8109
                                             33 BANK1     12    12      0
                           ___altoft
                            ___ftdiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3057
                                              8 BANK1     10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _desintegrator                                       19    19      0    8670
                                             57 BANK1     19    19      0
                            ___aldiv
                            ___ftmul
                            ___fttol
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     558
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     508
                                             42 BANK1     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8     599
                                              0 BANK1     14     6      8
 ---------------------------------------------------------------------------------
 (3) _confirmEdition                                       1     1      0   11855
                                             35 BANK1      1     1      0
                      _saveSysParams
 ---------------------------------------------------------------------------------
 (4) _saveSysParams                                        0     0      0   11762
                        _calcVars2ti
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (5) _writeEEPROM                                          2     1      1     804
                                              0 BANK1      2     1      1
 ---------------------------------------------------------------------------------
 (5) _calcVars2ti                                          0     0      0   10958
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6668
                                             20 BANK1     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    4290
                                             18 BANK1     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4647
                                             45 BANK1     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (2) _longPressDOWN                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     992
                                              0 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 (1) _UARTConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2Config                                           0     0      0     720
                        _setPWM2duty
                           _t2config
 ---------------------------------------------------------------------------------
 (2) _t2config                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setPWM2duty                                          6     4      2     720
                                              0 BANK1      6     4      2
 ---------------------------------------------------------------------------------
 (1) _EEPROMConfig                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _isr                                                17    17      0   33049
                                             52 BANK0     17    17      0
                              _T2int
                            _UARTint
 ---------------------------------------------------------------------------------
 (12) _UARTint                                             1     1      0   32261
                                             51 BANK0      1     1      0
                      _loadSysParams
                    i1_longPressDOWN
                   i1_longPressENTER
                   i1_longPressRETRO
                      i1_longPressUP
                        i1_pressDOWN
                       i1_pressENTER
                       i1_pressRETRO
                          i1_pressUP
                        i1_putchUART
                    i1_saveSysParams
                     i1_sysParamInit
 ---------------------------------------------------------------------------------
 (13) i1_sysParamInit                                      0     0      0    1360
                      i1_calcSysVars
                       i1_readEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_readEEPROM                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_putchUART                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_pressUP                                           1     1      0       0
                                              5 BANK0      1     1      0
                     i1_chanValDigUP
 ---------------------------------------------------------------------------------
 (14) i1_chanValDigUP                                      5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (13) i1_pressRETRO                                        0     0      0     240
                    i1_initProtocoll
 ---------------------------------------------------------------------------------
 (13) i1_pressENTER                                        0     0      0    7274
                          i1___ftmul
                        i1_checkPass
                   i1_confirmEdition
                    i1_desintegrator
                    i1_initProtocoll
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (14) i1_checkPass                                         7     7      0     115
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (13) i1_pressDOWN                                         1     1      0       0
                                              5 BANK0      1     1      0
                   i1_chanValDigDOWN
 ---------------------------------------------------------------------------------
 (14) i1_chanValDigDOWN                                    5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (13) i1_longPressUP                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_longPressRETRO                                    0     0      0    1577
                          i1___ftmul
                    i1_initProtocoll
 ---------------------------------------------------------------------------------
 (13) i1_longPressENTER                                    6     6      0   14329
                                             45 BANK0      6     6      0
                          i1___ftadd
                          i1___ftdiv
                          i1___ftmul
                      i1_calcVars2ti
                   i1_confirmEdition
                    i1_desintegrator
                       i1_integrator
 ---------------------------------------------------------------------------------
 (14) i1_integrator                                       12    12      0    2280
                                             33 BANK0     12    12      0
                         i1___altoft
                          i1___ftdiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (15) i1___altoft                                         10     6      4     707
                                              8 BANK0     10     6      4
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (14) i1_desintegrator                                    19    19      0    2392
                                             23 BANK0     19    19      0
                          i1___aldiv
                          i1___ftmul
                          i1___fttol
                           i1___lmul
 ---------------------------------------------------------------------------------
 (15) i1___lmul                                           12     4      8     196
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (15) i1___fttol                                          15    11      4     278
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (15) i1___aldiv                                          14     6      8     352
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (14) i1_confirmEdition                                    1     1      0    2972
                                             33 BANK0      1     1      0
                    i1_saveSysParams
 ---------------------------------------------------------------------------------
 (14) i1___ftadd                                          12     6      6    1487
                                              8 BANK0     12     6      6
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (13) i1_longPressDOWN                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _loadSysParams                                       0     0      0    4244
                      i1_calcSysVars
                    i1_saveSysParams
 ---------------------------------------------------------------------------------
 (13) i1_saveSysParams                                     0     0      0    2906
                      i1_calcVars2ti
                      i1_writeEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_calcVars2ti                                       0     0      0    2576
                          i1___ftdiv
                          i1___ftmul
 ---------------------------------------------------------------------------------
 (15) i1___ftdiv                                          15     9      6    1239
                                             18 BANK0     15     9      6
                         i1___altoft (ARG)
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (14) i1_calcSysVars                                       3     3      0    1338
                                             23 BANK0      3     3      0
                          i1___ftmul
 ---------------------------------------------------------------------------------
 (15) i1___ftmul                                          15     9      6    1337
                                              8 BANK0     15     9      6
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (16) i1___ftpack                                          8     3      5     543
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (12) _T2int                                               1     1      0     788
                                              7 BANK0      1     1      0
                   _saveProcessState
                    i1_initProtocoll
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (14) i1_initProtocoll                                     1     1      0     240
                                              6 BANK0      1     1      0
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (15) i1_setPWM2duty                                       6     4      2     218
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (13) _saveProcessState                                    0     0      0     330
                      i1_writeEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_writeEEPROM                                       2     1      1     330
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (19) _hp_isr                                             14    14      0    2522
                                             40 COMRAM    14    14      0
                              _T4int
 ---------------------------------------------------------------------------------
 (20) _T4int                                               1     1      0    2522
                                             39 COMRAM     1     1      0
                           _cutError
                         i2___altoft
                          i2___ftadd
                           i2___ftge
                      i2_setPWM2duty
 ---------------------------------------------------------------------------------
 (21) i2_setPWM2duty                                       6     4      2     166
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (21) i2___ftge                                            9     3      6     344
                                             30 COMRAM     9     3      6
                         i2___altoft (ARG)
                          i2___ftadd (ARG)
 ---------------------------------------------------------------------------------
 (21) i2___ftadd                                          12     6      6    1331
                                             18 COMRAM    12     6      6
                         i2___altoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (21) i2___altoft                                         10     6      4     681
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (22) i2___ftpack                                          8     3      5     387
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (21) _cutError                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 22
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMConfig
   _PWM2Config
     _setPWM2duty
     _t2config
   _UARTConfig
   _buttonChecking
     _delay_ms
     _longPressDOWN
     _longPressENTER
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _calcVars2ti
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _confirmEdition
         _saveSysParams
           _calcVars2ti
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _writeEEPROM
       _desintegrator
         ___aldiv
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
       _integrator
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___lmul
     _longPressRETRO
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _initProtocoll
         _setPWM2duty
     _longPressUP
     _pressDOWN
       _chanValDigDOWN
     _pressENTER
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _checkPass
       _confirmEdition
         _saveSysParams
           _calcVars2ti
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _writeEEPROM
       _desintegrator
         ___aldiv
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
       _initProtocoll
         _setPWM2duty
       _setPWM2duty
     _pressRETRO
       _initProtocoll
         _setPWM2duty
     _pressUP
       _chanValDigUP
     _releaseDOWN
     _releaseENTER
     _releaseRETRO
     _releaseUP
   _clockConfig
   _drawScreen
     _drawAdvON
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawAutoCalibRM
       _drawValEditor
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _putchUART
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawBadPass
       _drawPass1Lin
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _putchUART
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawCalibProc
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawChanVal
       _drawValEditor
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _putchUART
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawCutError
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawMenu
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawPassWord
       _drawPass1Lin
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _putchUART
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawReady2Cut
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawSNquest
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _interruptConfig
   _ioConfig
   _ioInitStt
   _lcd_init
     _lcd_send_4bits
     _lcd_send_byte
       _lcd_read_byte
         _lcd_read_4bits
       _lcd_send_4bits
   _setPWM2duty
   _setPWM2on
   _sysParamInit
     _calcSysVars
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readEEPROM
   _t4config

 _isr (ROOT)
   _T2int
     _saveProcessState
       i1_writeEEPROM
     i1_initProtocoll
       i1_setPWM2duty
     i1_setPWM2duty
   _UARTint
     _loadSysParams
       i1_calcSysVars
         i1___ftmul
           i1___ftpack
       i1_saveSysParams
         i1_calcVars2ti
           i1___ftdiv
             i1___altoft (ARG)
               i1___ftpack
             i1___ftpack (ARG)
           i1___ftmul
             i1___ftpack
         i1_writeEEPROM
     i1_longPressDOWN
     i1_longPressENTER
       i1___ftadd
         i1___ftpack
       i1___ftdiv
         i1___altoft (ARG)
           i1___ftpack
         i1___ftpack (ARG)
       i1___ftmul
         i1___ftpack
       i1_calcVars2ti
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___ftmul
           i1___ftpack
       i1_confirmEdition
         i1_saveSysParams
           i1_calcVars2ti
             i1___ftdiv
               i1___altoft (ARG)
                 i1___ftpack
               i1___ftpack (ARG)
             i1___ftmul
               i1___ftpack
           i1_writeEEPROM
       i1_desintegrator
         i1___aldiv
         i1___ftmul
           i1___ftpack
         i1___fttol
         i1___lmul
       i1_integrator
         i1___altoft
           i1___ftpack
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___lmul
     i1_longPressRETRO
       i1___ftmul
         i1___ftpack
       i1_initProtocoll
         i1_setPWM2duty
     i1_longPressUP
     i1_pressDOWN
       i1_chanValDigDOWN
     i1_pressENTER
       i1___ftmul
         i1___ftpack
       i1_checkPass
       i1_confirmEdition
         i1_saveSysParams
           i1_calcVars2ti
             i1___ftdiv
               i1___altoft (ARG)
                 i1___ftpack
               i1___ftpack (ARG)
             i1___ftmul
               i1___ftpack
           i1_writeEEPROM
       i1_desintegrator
         i1___aldiv
         i1___ftmul
           i1___ftpack
         i1___fttol
         i1___lmul
       i1_initProtocoll
         i1_setPWM2duty
       i1_setPWM2duty
     i1_pressRETRO
       i1_initProtocoll
         i1_setPWM2duty
     i1_pressUP
       i1_chanValDigUP
     i1_putchUART
     i1_saveSysParams
       i1_calcVars2ti
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___ftmul
           i1___ftpack
       i1_writeEEPROM
     i1_sysParamInit
       i1_calcSysVars
         i1___ftmul
           i1___ftpack
       i1_readEEPROM

 _hp_isr (ROOT)
   _T4int
     _cutError
     i2___altoft
       i2___ftpack
     i2___ftadd
       i2___altoft (ARG)
         i2___ftpack
       i2___ftpack (ARG)
     i2___ftge
       i2___altoft (ARG)
         i2___ftpack
       i2___ftadd (ARG)
         i2___altoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
     i2_setPWM2duty

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     77      C0       6       75.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     45      79       4       75.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      5B       1       96.8%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     194       9        0.0%
DATA                 0      0     194      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Mar 04 23:52:36 2017

      __end_ofi1_pressDOWN 4EFA               ___altoft@exp 0110                 i1___altoft 5DD0  
     __end_ofi1_pressENTER 193E                 i1___ftpack 4BDE            ?_lcd_send_4bits 0001  
     __end_ofi1_pressRETRO 5850            ??_desintegrator 0139              ___altoft@sign 0111  
         i2setPWM2duty@act 0005                         l91 7218             ?_lcd_send_byte 0105  
             ___awdiv@sign 010B                         _fd 01B9                         _ie 00BD  
            _holdRETROcont 00C7           ?i1_saveSysParams 0001                         _pi 0059  
               i2___altoft 6720                         bsr 000FE0            ?_confirmEdition 0001  
      ___wmul@multiplicand 0110     __size_ofi1_calcVars2ti 0058        __end_ofi1_putchUART 7378  
               i2___ftpack 5B42               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000               ___ftadd@exp1 0138  
             ___ftadd@exp2 0137               i1___altoft@c 0068                drawMenu@adv 0174  
             ___ftadd@sign 0136                        l100 6EE0                        l222 7344  
                      l401 5132                        l281 7250                        l418 4AB0  
                      l373 30A4                        l382 317E                        l711 11E6  
                      l535 72A8                        l287 72D4                        l385 31D8  
                      l730 12FC                        l715 120E                        l379 3120  
                      l716 1226                        l493 5F68                        l741 13D0  
                      l582 5A56                        l559 3570                        l576 59F2  
                      l737 1358                        l738 13AE                        l666 570E  
                      l579 5A22                        l907 24A2                        l756 154E  
                      l694 4F6E                        l871 229E                        l688 4F36  
                      l697 4FF8               i1___ftadd@f1 0068               i1___ftadd@f2 006B  
                      l883 234A                        l895 23F6                        l898 2416  
             __CFG_CPB$OFF 000000      i1setPWM2duty@actuator 0060                        _PR2 000FBB  
                      _PR4 000F52               __CFG_CPD$OFF 000000     __size_ofi1_calcSysVars 006A  
 __size_ofi1_initProtocoll 004C                        _isr 0018               i1___ftdiv@f1 0072  
             i1___ftdiv@f2 0075               i1___ftdiv@f3 007C    __end_of_interruptConfig 73A0  
             ___awmod@sign 0105                        prod 000FF3                        wreg 000FE8  
__size_ofi1_longPressENTER 0332                 _TXSTA1bits 000FAC               __CFG_IESO$ON 000000  
             drawSNquest@i 0174  __size_ofi1_longPressRETRO 0106               i1___ftmul@f1 0068  
             i1___ftmul@f2 006B               i1___fttol@f1 0060               __CFG_LVP$OFF 000000  
              i1_checkPass 6392             i1___aldiv@sign 0069               ___ftdiv@cntr 011B  
           ??_drawCutError 0174               ___ftdiv@sign 0120                       l1002 09F0  
                     l1036 0870                       l1311 4BAA                       l1340 28A2  
                     l1334 2840                       l1408 70A4                       l1338 287A  
                     l1349 2978                       l1358 29A2                       l1279 3A2C  
                     l1383 38A4                       l1376 37E0                       l1369 3E10  
                     l1377 3824                       l1458 59B8                       l1468 5EF6  
          ??_drawCalibProc 0174                       l6500 405E                       l6510 408E  
                     l6512 409E                       l6504 4072                       l6514 40A8  
                     l6518 40C4                       l6482 3FCC                       ?_isr 0001  
                     l9700 6F08                       l9730 4B5E                       l9722 4B00  
                     l9740 4BB4                       l9732 4B8E                       l9724 4B0E  
                     l9820 2930                       l9900 3A78                       l9708 7062  
                     l9734 4B9C                       l9726 4B3E                       l9718 4AEC  
                     l9814 2908                       l9670 628C                       l9816 2916  
                     l9808 28DA                       l9920 3B00                       l9760 666E  
                     l9752 6632                       l9746 4BD0                       l9834 29CC  
                     l9826 295E                       l9818 2924                       l9930 3B3E  
                     l9906 3AB2                       l9682 62C8                       l9762 667C  
                     l9754 6640                       l9844 2A1A                       l9828 296C  
                     l9860 3D6E                       l9924 3B1E                       l9676 62AA  
                     l9854 3D34                       l9934 3B5C                       l9950 586C  
                     l9758 6660                       l9766 6688                       STR_1 7EF4  
                     l9792 2888                       l9880 3DCE                       l9688 62E6  
                     STR_2 7F06                       STR_3 7F4E                       l9786 284E  
                     l9962 58A0                       STR_4 7F18                       STR_5 7F2A  
                     l9964 58AC                       l9956 5882                       STR_6 7F3C  
                     STR_7 7E0A                       l9798 2898                       l9982 5904  
                     l9974 58E2                       l9966 58B2                       STR_8 7ED0  
                     STR_9 7D64                       l9978 58F0                       l9994 5C0C  
                     l9998 5C1C               printf@tmpval 0162                       u8221 3FA8  
                     u8240 3FF2                       u8245 3FE8             ??_drawPass1Lin 0174  
            __CFG_FCMEN$ON 000000                lcd_putc@cha 010C            __end_of_UARTint 47A6  
                     _main 6DE4       __size_of_calcVars2ti 0058               ___ftpack@arg 0100  
             i2___altoft@c 0009               ___ftpack@exp 0103           lcd_read_byte@low 0102  
                     fsr0h 000FEA                       fsr1h 000FE2                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9          initProtocoll@init 0106                       btemp 005C  
            __CFG_BORV$285 000000             ??_drawPassWord 0174               i2___ftadd@f1 0013  
             i2___ftadd@f2 0016               i2___ftge@ff1 001F               i2___ftge@ff2 0022  
            i1___ftdiv@exp 007F                       prodh 000FF4                       prodl 000FF3  
                     start 00BE            ?_longPressENTER 0001       __size_of_calcSysVars 006A  
          ?_longPressRETRO 0001              drawSNquest@tq 0176      __size_of_sysParamInit 0076  
     __end_of_EEPROMConfig 73A6               ___ftmul@cntr 0121               ___param_bank 000000  
              _writeEEPROM 7236               ___ftmul@sign 0122              i1___ftmul@exp 0071  
             ___fttol@exp1 0138               ___fttol@lval 0134                      ??_isr 0094  
           i1___altoft@exp 0070    i1___ftmul@f3_as_product 0072               _BAUDCON1bits 000FB8  
                    l10010 5C66                      l10002 5C30                      l10004 5C3C  
                    l10006 5C42                      l10014 5C74                      l10110 71B2  
                    l10120 3752                      l10018 5C88                      l11010 6CEE  
                    l11100 47B8                      l10300 65B8                      l10220 39F6  
                    l10204 39AA                      l10060 2790                      l10052 26AC  
                    l10302 65C8                      l10126 378C                      l11014 49D4  
                    l11112 4820                      l10216 39E2                      l10160 386E  
                    l10080 0F2C                      l10400 02B6                      l11040 4A7A  
                    l11032 4A44                      l11024 4A06                      l11202 4DAE  
                    l11122 4852                      l11106 47D0                      l10242 5644  
                    l10234 6D22                      l10226 3A12                      l10074 0E66  
                    l10410 0300                      l10402 02D0                      l11018 49EA  
                    l11212 4DCA                      l11132 4880                      l11140 48A6  
                    l10252 56C8                      l10228 3A22                      l10156 385A  
                    l10092 10B6                      l10084 0F52                      l11044 4A96  
                    l11036 4A5E                      l11150 698C                      l11206 4DBA  
                    l11214 4DE2                      l11134 4886                      l10246 5684  
                    l10270 5952                      l10182 3902                      l10166 388A  
                    l10422 035E                      l10406 02E8                      l10414 0306  
                    l11160 69BC                      l11208 4DC0                      l11128 4874  
                    l10176 38DC                      l10168 389A                      l10512 074A  
                    l10504 06D8                      l10432 03A4                      l10416 0344  
                    l10344 00D2                      l11162 69C4                      l11410 13B6  
                    l11234 56DC                      l11138 488E                      l10266 593C  
                    l10290 5EA0                      l10098 117C                      l10602 0AFE  
                    l10530 0830                      l10522 0794                      l10514 0750  
                    l10354 011A                      l10362 0190                      l11074 6456  
                    l11156 69AA                      l11180 4D0E                      l11420 13E8  
                    l11324 11D2                      l11260 575A                      l11244 5714  
                    l10268 594C                      l10196 3956                      l10620 0BA4  
                    l10612 0B62                      l10540 0874                      l10516 0758  
                    l10508 0728                      l10460 04F4                      l10380 022A  
                    l10372 01FE                      l10348 00E8                      l10702 454A  
                    l11510 197C                      l11174 4CFC                      l11342 123A  
                    l11334 1200                      l11350 1254                      l11326 11DA  
                    l11254 5740                      l10278 59A6                      l10294 5EE4  
                    l10286 5E8A                      l10606 0B2E                      l10550 08EA  
                    l10534 083E                      l10518 076C                      l10462 050A  
                    l10390 0278                      l10374 0214                      l11078 6480  
                    l12054 6E24                      l10720 5D6E                      l11520 19A8  
                    l11504 195E                      l11280 4F24                      l11424 13FA  
                    l11416 13D6                      l11352 1272                      l11256 5748  
                    l10288 5E9A                      l10640 0CBE                      l10632 0C0C  
                    l10624 0BDC                      l10536 0852                      l10528 0822  
                    l10472 059A                      l10464 053A                      l10456 04C6  
                    l10448 0456                      l10392 0284                      l10368 01B8  
                    l10650 5F32                      l10706 4566                      l11514 198E  
                    l11290 4F5A                      l11186 4D5A                      l11370 12B4  
                    l10626 0BE6                      l10618 0B9A                      l10562 09E2  
                    l10546 0898                      l10490 068C                      l10466 0550  
                    l10394 028A                      l10386 0252                      l10378 0224  
                    l10642 0CD4                      l10730 201A                      l10820 3468  
                    l11196 4D8C                      l11372 12C8                      l11356 1284  
                    l11268 577C                      l10636 0C34                      l10628 0BF2  
                    l10556 09C6                      l10492 0692                      l10476 05C8  
                    l10396 02A2                      l11612 5CBE                      l10654 5F54  
                    l10662 6846                      l10718 5D5E                      l11286 4F48  
                    l11462 14B6                      l11382 1302                      l10574 0A3C  
                    l10558 09D4                      l10486 0626                      l10742 2182  
                    l10734 2092                      l10750 226C                      l11630 5D04  
                    l10680 44A0                      l10832 4248                      l11528 19D2  
                    l10760 6D5A                      l11296 4F80                      l11472 14DA  
                    l11464 14BE                      l10584 0A8A                      l10920 30EC  
                    l10912 309E                      l10904 3070                      l11624 5CE6  
                    l11616 5CC8                      l10690 44E4                      l10674 4482  
                    l10658 6820                      l10586 0A90                      l10578 0A64  
                    l10746 21F8                      l10738 210A                      l11634 5D0E  
                    l10844 42F8                      l10836 425E                      l11556 1AC0  
                    l10780 637C                      l10772 6314                      l11492 155A  
                    l11388 1320                      l10940 3178                      l10932 314A  
                    l11660 51FC                      l10686 44CE                      l10782 6384  
                    l10598 0AD6                      l10918 30DA                      l11670 5220  
                    l11662 5202                      l10848 59D0                      l10880 5A68  
                    l10688 44DE                      l10776 632A                      l10952 31D2  
                    l10944 31A4                      l10928 311A                      l11680 5246  
                    l11672 5226                      l11664 5208                      l10858 5A04  
                    l10698 4538                      l11578 1B9A                      l10786 638C  
                    l11922 2448                      l11914 2426                      l11834 22BE  
                    l10970 64E0                      l10962 64AE                      l11682 524C  
                    l11674 522E                      l11666 5210                      l11658 51F4  
                    l10884 6EC8                      l10868 5A34                      l11932 246A  
                    l11844 22F0                      l11836 22CE                      l11684 5252  
                    l11676 5236                      l11668 5218                      l11692 5266  
                    l11934 2470                      l11926 2454                      l11854 2312  
                    l10958 3202                      l11686 5258                      l11678 523E  
                    l11952 24C2                      l11936 247E                      l11856 2318  
                    l11848 22FC                      l10984 513C                      l11688 525E  
                    l11962 24F4                      l11954 24D2                      l11874 236A  
                    l11858 2326                      l10978 6516                      l10994 516E  
                    l11972 2516                      l11884 239C                      l11876 237A  
                    l10988 5152                      l11974 251C                      l11966 2500  
                    l11894 23BE                      l11896 23C4                      l11888 23A8  
                    l11898 23D2            __end_of___aldiv 4578    __end_ofi1_desintegrator 3718  
                    ?_main 0001            __end_of___awdiv 590E                      _EEADR 000FA9  
          __end_of___ftadd 2A40                      STR_10 7E52                      STR_11 7EE2  
                    STR_12 7E76                      STR_20 7DC2                      STR_13 7EBE  
                    STR_21 7D4B                      STR_22 7F82                      STR_30 7E1C  
                    STR_14 7DF8                      STR_23 7E64                      STR_31 7D8B  
                    STR_15 7D78                      STR_16 7E52                      STR_24 7F93  
                    STR_40 7EAC                      STR_32 7D9E                      STR_33 7FF8  
                    STR_17 7FF8                      STR_25 7FA4                      STR_41 7F60  
                    STR_18 7E76                      STR_42 7EAC                      STR_26 7E88  
                    STR_34 7DB0                      STR_19 7FE8                      STR_35 7FB5  
                    STR_43 7F71                      STR_27 7E9A                      STR_28 7E40  
                    STR_36 7DE6            __end_of___awmod 5C92                      STR_37 7FD7  
                    STR_29 7E2E                      STR_38 7DD4                      STR_39 7FC6  
          __end_of___ftdiv 3E46            __end_of___ftneg 70B2            __end_of___lldiv 59CA  
          __end_of___ftmul 3B9C            ___awdiv@divisor 0108              lcd_init@F6841 00C9  
          __end_of___llmod 5F08            __end_of___ftsub 6D4C            __end_of___fttol 40D6  
                    u14105 6296                      u14050 66B4                      u14106 6298  
                    u14060 66C6                      u14301 280C                      u14125 62B4  
                    u14070 66E0                      u14126 62B6                      u14080 6700  
                    u14056 66B6                      u14145 62D2                      u14146 62D4  
                    u15115 6150                      u15116 6152                      u14068 66CA  
                    u14501 3D10                      u14165 62F0                      u14078 66E4  
                    u14166 62F2                      u14088 6704                      u14521 3D4A  
                    u14185 6F20                      u14186 6F22                      u14291 27EE  
                    u17020 12C0                      u15260 03EA                      u17030 12C2  
                    u14551 3A54                      u15265 03DE                      u17050 12DE  
                    u15450 0868                      u14571 3A8E                      u17060 12E0  
                    u14831 372E                      u18007 5CD6                      u16600 4D9A  
                    u16360 485E                      u18017 5CF4                      u17410 1C68  
                    u16370 4860                      u14851 3768                      u18027 6654  
                    u17420 1C6A                      u17180 1410                      u18037 6ED0  
                    u17350 19CA                      u17190 1412                      u17360 19CC  
                    u17540 22D6                      u16590 4D98                      u17650 2382  
                    u17546 22D8                      u15980 3466                      u17760 242E  
                    u17656 2384                      u17870 24DA                      u17766 2430  
                    u17876 24DC                      i1l222 736E                      u17997 5CB0  
                    i1l281 7270                      i1l506 2D6E                      i1l517 2E68  
                    i1l711 15B4                      i1l287 7316                      i1l730 16CA  
                    i1l715 15DC                      i1l716 15F4                      i1l493 5FFC  
                    i1l741 179E                      i1l582 5B12                      i1l559 3716  
                    i1l576 5AAE                      i1l737 1726                      i1l738 177C  
                    i1l666 57D0                      i1l579 5ADE                      i1l756 191C  
                    i1l694 5074                      i1l688 503C                      i1l928 0076  
              ?_UARTConfig 0001                      i1l697 50FE                      i2l493 6A9E  
                    i2l923 6574            ___awdiv@counter 010A              __CFG_WDTPS$32 000000  
                    _T2int 2CA8             i1___ftadd@exp1 0073             i1___ftadd@exp2 0072  
                    _T4int 2EA2    __size_ofi1_chanValDigUP 00D0             i1___ftadd@sign 0071  
              ?_PWM2Config 0001              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000        ___lmul@multiplicand 0104              __CFG_WRT3$OFF 000000  
             ___lltoft@exp 0110             __CFG_EBTR0$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000                      _fData 00AF             __CFG_EBTR3$OFF 000000  
          ??_drawReady2Cut 0174              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000             __CFG_EBTRB$OFF 000000                      _exp10 0177  
                    _flech 019B            __end_of_dpowers 7CFD                      _selSN 01BA  
    __size_ofi1_readEEPROM 0016          lcd_read_byte@high 0103                      _scale 0CF4  
          __end_of_isdigit 71BC         __CFG_MCLRE$EXTMCLR 000000              ___ftpack@sign 0104  
          ??_drawValEditor 0174                      _putch 72F2           __end_ofi1___lmul 6970  
                    pclath 000FFA                      tablat 000FF5           __end_ofi2___ftge 6276  
            drawPassWord@i 0174              i1_calcVars2ti 6C5A             i1___ftdiv@cntr 007B  
          __end_of_pressUP 48B6               _sysParamInit 6798             i1___ftdiv@sign 0080  
                    plusw2 000FDB               ?_setPWM2duty 0100           i1desintegrator@i 0088  
                    status 000FD8            ??_lcd_read_byte 0102         __size_ofi1___aldiv 011A  
              i1_pressDOWN 4DF2             __CFG_HFOFST$ON 000000         __size_ofi1___ftadd 0268  
       __size_ofi1___ftdiv 014C               putchUART@val 0100         __size_ofi1___ftmul 015E  
       __size_ofi1___fttol 0144              i1_calcSysVars 6B32         __size_ofi2___ftadd 01AC  
           i1___ftpack@arg 0060             i1___ftpack@exp 0063               ?_longPressUP 0001  
              i1_putchUART 736A            __initialization 6030      __end_ofi1_writeEEPROM 7276  
             __end_of_main 6E2E                ?i1___altoft 0068            ??_lcd_send_byte 0106  
      i1___lmul@multiplier 0060                ?i1___ftpack 0060             i1___ftmul@cntr 0075  
           i1___ftmul@sign 0076      __end_of_saveSysParams 6154              lcd_gotoxy@pos 0109  
    __size_ofi1_integrator 0122                ?i2___altoft 0009               ?_releaseDOWN 0001  
           i1___fttol@exp1 006E              _maxTimePerCut 004F                ?i2___ftpack 0001  
       __size_ofi1_pressUP 0110             i1___fttol@lval 006A     __size_of_loadSysParams 0048  
                   ??_main 0177              ___fttol@sign1 0133               i1_readEEPROM 7308  
            __activetblptr 000002             __CFG_PLLCFG$ON 000000            i1___altoft@sign 0071  
                   ?_T2int 0001                     ?_T4int 0001       __size_of__tdiv_to_l_ 019E  
         i1_chanValDigDOWN 5538           ?_interruptConfig 0001         desintegrator@temp2 0146  
       desintegrator@temp3 0142         desintegrator@tempL 013E       __size_of_clockConfig 0026  
    __size_of_chanValDigUP 00D0           __end_of_t2config 72C6               i1checkPass@i 0065  
                ??_UARTint 0093           __end_of_t4config 7192           __end_of___altoft 5DD0  
           setPWM2duty@act 0104           ___llmod@dividend 010D                     ?_scale 0123  
                   _EEDATA 000FA8                     _CCPR2L 000F67                     _EECON2 000FA7  
   __size_of_initProtocoll 004C           ___awdiv@dividend 0106                     ?_putch 0001  
         __end_of___ftpack 4BDE   __size_of_drawAutoCalibRM 0032          ??i1_initProtocoll 0066  
           ?i1_calcVars2ti 0001           __end_of___lltoft 662C                     i1l1311 4CB6  
                   i1l1340 2B0A                     i1l1334 2AA8                     i1l1338 2AE2  
                   i1l1349 2BE0                     i1l1358 2C0A                     i1l1369 3F5C  
                   i2l1311 5BD0                     i1l6202 3C10                     i1l6220 3C7C  
                   i1l7100 4680                     i2l1334 3264                     i1l6230 3CBA  
                   i1l6150 3E80                     i1l6216 3C5E                     i1l7112 5DFC  
                   i2l1338 328E                     i1l6226 3C9C                     i1l7114 5E0C  
                   i1l7044 5FC6                     i1l6156 3EBA                     i1l7052 690C  
                   i2l1349 333E                     i2l1358 335A                     i1l7126 4110  
                   i1l7048 5FE8                     i1l6176 3F1A                     i1l7080 45E8  
                   i1l7144 41A2                     i1l7056 6932                     i1l7400 360E  
                   i1l7082 45F8                     i1l7074 45BA                     i1l7162 4208  
                   i1l7154 41D2                     i1l7340 6DA6                     i1l9100 2DFC  
                   i1l6196 3BD6                     i1l7092 4652                     i1l7084 45FE  
                   i1l7068 459C                     i1l7156 41E2                     i1l7148 41B6  
                   i1l7412 436A                     i1l7158 41EC                     i1l9120 2E60  
                   i1l9104 2E10                     i1l9032 2CC2                     i1l5840 4BF8  
                   i1l7512 2AF0                     i1l7096 4664                     i1l7424 441A  
                   i1l7416 4380                     i1l7360 640A                     i1l7352 63A2  
                   i1l9050 2D0A                     i1l7506 2AB6                     i1l7362 6412  
                   i1l9210 4776                     i1l9202 4756                     i1l5852 4C6A  
                   i1l5844 4C0C                     i1l7540 2B98                     i1l7428 5A8C  
                   i1l7460 5B24                     i1l8412 4E16                     i1l7356 63B8  
                   i1l8340 48E0                     i1l9118 2E5A                     i1l5862 4CC0  
                   i1l5854 4C9A                     i1l5846 4C1A                     i1l7534 2B70  
                   i1l7518 2B00                     i1l7438 5AC0                     i1l8510 502A  
                   i1l8406 4E04                     i1l7366 641A                     i1l8334 48C8  
                   i1l9214 4786                     i1l9206 4766                     i1l9128 2E84  
                   i1l9080 2DA4                     i1l9064 2D60                     i1l5856 4CA8  
                   i1l5848 4C4A                     i1l7536 2B7E                     i1l7528 2B42  
                   i1l7448 5AF0                     i1l8520 5060                     i1l8440 4EC8  
                   i1l8600 1696                     i1l9074 2D8A                     i1l9066 2D66  
                   i1l7554 2C34                     i1l7546 2BC6                     i1l7538 2B8C  
                   i1l8434 4EB6                     i1l8418 4E62                     i1l8610 16D0  
                   i1l8362 4984                     i1l8346 4930                     i1l9218 4796  
                   i1l5868 4CDC                     i1l7564 2C82                     i1l7548 2BD4  
                   i1l8516 504E                     i1l8444 4ED2                     i1l8428 4E94  
                   i1l8700 18A8                     i1l8372 499E                     i1l8356 4962  
                   i1l9172 46DA                     i1l9164 46BA                     i1l8526 5086  
                   i1l8390 6A1E                     i1l8438 4EC2                     i1l8446 4EEA  
                   i1l8366 4990                     i1l8374 49B6                     i1l9190 4726  
                   i1l8384 6A00                     i1l8720 1928                     i1l8616 16EE  
                   i1l8552 15A0                     i1l8464 579E                     i1l8368 4996  
                   i1l9176 46EA                     i1l9168 46CA                     i1l8394 6A30  
                   i1l8570 1608                     i1l8562 15CE                     i1l8554 15A8  
                   i1l8490 581C                     i1l8474 57D6                     i1l9194 4736  
                   i1l9186 4714                     i1l8732 1C90                     i1l8396 6A38  
                   i1l8652 17C8                     i1l8644 17A4                     i1l8580 1640  
                   i1l8484 5802                     i1l8806 1ECC                     i1l8742 1CC0  
                   i1l8638 1784                     i1l8486 580A                     i1l9198 4746  
                   i1l8648 17B6                     i1l8584 1652                     i1l8738 1CAE  
                   i1l8690 1884                     i1l8578 1622                     i1l8498 583E  
                   i1l8756 1D04                     i1l8748 1CDA                     i1l8692 188C  
                   i1l8598 1682                     i1l8784 1DF2                     i1l9586 006A  
                   i2l8324 6A78                     i2l7470 5B60                     i2l7480 5BBC  
                   i2l7472 5B6A                     i2l8328 6A92                     i2l7482 5BC6  
                   i2l7474 5B88                     i2l7466 5B52                     i2l9322 2F42  
                   i2l7478 5B9E                     i2l9326 2FA8                     i2l9338 3018  
                   i2l8910 6246                     i2l8824 6742                     i2l8840 3272  
                   i2l8826 674E                     i2l8906 6216                     i2l8916 6272  
                   i2l8870 32F8                     i2l8862 32CC                     i2l8846 329C  
                   i2l8880 332C                     i2l8872 3302                     i2l8882 3336  
                   i2l8874 330A                     i2l8868 32EE                     i2l8888 3376  
                   i2l8898 33A6                     _RCREG1 000FAE       __size_of_drawBadPass 0016  
         i1_confirmEdition 5A86                     u920_21 40EC                     u780_21 3E5C  
                   _SPBRG1 000FAF                     u782_21 3E96                     u785_21 3BB2  
                   u787_21 3BEC                     u981_21 2A56                     u982_21 2A74  
           ?i1_calcSysVars 0001                     _TXREG1 000FAD             i1_sysParamInit 6884  
     __size_of_drawChanVal 0084           __end_of_delay_ms 6F02      __size_ofi1_pressENTER 03CE  
                   _UPisLP 004A             integrator@acum 0123           __end_of_ioConfig 7020  
             i1_integrator 433C        __size_of_UARTConfig 0038      __size_ofi1_pressRETRO 00C2  
           integrator@temp 0127             i1putchUART@val 0060             __CFG_PWRTEN$ON 000000  
           __CFG_XINST$OFF 000000              _DOWNsecurLock 00C3        __size_of_PWM2Config 0066  
         __end_of__powers_ 7D24       __size_of_drawSNquest 010C               _CCPTMRS0bits 000F49  
         __end_of_drawMenu 3220           __end_of_lcd_init 5D32           __end_of_lcd_putc 66A6  
                   ___ftge 5604                     ___lmul 680E           __end_of_cutError 713C  
                ??___aldiv 0108                     ___wmul 6FB8                  ??___awdiv 010A  
                ??___ftadd 0133             __CFG_STVREN$ON 000000                  ??___awmod 0104  
                ??___ftdiv 0118                  ??___ftneg 0103                  ??___lldiv 0108  
                ??___ftmul 011A                  ??___llmod 0115                  ??___ftsub 013F  
                ??___fttol 012E                     _contra 00AB       __end_of_drawCutError 710E  
                   _hp_isr 0008                     _selKMT 0048                     _fround 252C  
           i2___altoft@exp 0011                     clear_0 6096                     clear_1 60A2  
                   clear_2 60AE           ___awdiv@quotient 010C            ___awmod@divisor 0102  
             _chanValDigUP 52CC            ___awmod@counter 0104                     _printf 00C2  
     __end_of_drawPass1Lin 7294   __size_ofi1_longPressDOWN 002A           ?i1_desintegrator 0001  
        __end_ofi1___aldiv 4692      ___ftmul@f3_as_product 011E          __end_ofi1___ftadd 2CA8  
      _lcd_send_4bits$1496 0100        _lcd_send_4bits$1497 0101        _lcd_send_4bits$1498 0102  
      _lcd_send_4bits$1499 0103          __end_ofi1___ftdiv 3F92           ??_lcd_read_4bits 0100  
        __end_ofi1___ftmul 3CFA          __end_ofi1___fttol 421A       __end_of_drawPassWord 51F2  
             __pdataCOMRAM 004B                  ??_isdigit 0100          __end_ofi2___ftadd 33CC  
           i2___ftadd@exp1 001E             i2___ftadd@exp2 001D           i1_longPressENTER 1C70  
           i2___ftadd@sign 001C               __mediumconst 7CD4           i1_longPressRETRO 5000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
                ??_pressUP 0105               i1_pressENTER 1570        __size_ofi1___altoft 009E  
         ??_chanValDigDOWN 0100               i1_pressRETRO 578E        __size_ofi1___ftpack 010C  
   __end_ofi1_sysParamInit 68FA              _loadSysParams 6E2E                 __accesstop 0060  
        ?_saveProcessState 0001    __end_of__initialization 60B4                 ___altoft@c 0108  
      __size_ofi2___altoft 0078          __end_ofi1_pressUP 49C6            __CFG_PBADEN$OFF 000000  
    __size_of_EEPROMConfig 0006                _UPsecurLock 00C4                 ___ftadd@f1 012D  
               ___ftadd@f2 0130        __size_ofi2___ftpack 00AE       i1longPressENTER@temp 008D  
               ___ftge@ff1 0100                 ___ftge@ff2 0103            i1___ftpack@sign 0064  
            ___rparam_used 000001         ??_saveProcessState 0062                 ___ftdiv@f1 0112  
               ___ftdiv@f2 0115                 ___ftdiv@f3 011C           ??_lcd_send_4bits 0100  
          writeEEPROM@data 0100                 ___ftneg@f1 0100             i2___ftpack@arg 0001  
            __end_of_T2int 2EA2             i2___ftpack@exp 0004              __end_of_T4int 306A  
               ___ftmul@f1 0114                 ___ftmul@f2 0117           ??_confirmEdition 0123  
               ___ftsub@f1 0139                 ___ftsub@f2 013C                 ___fttol@f1 012A  
           __pcstackCOMRAM 0001                setPWM2on@on 0100               __pidataBANK0 732F  
             __pidataBANK1 713C               _FC1securLock 0046              _initProtocoll 6D4C  
       __size_of_checkPass 008E                 ___lltoft@c 0108                integrator@i 012B  
            __end_of_scale 11A2              __end_of_putch 7308               _FC2securLock 0045  
                ?i1___lmul 0060                  ?i2___ftge 001F               _actualScreen 01BD  
           lcd_gotoxy@fila 0108     __size_ofi1_setPWM2duty 0094                 __div_to_l_ 38B6  
           i1_chanValDigUP 539C                    ??_T2int 0067                    ??_T4int 0028  
       __size_of_ioInitStt 0008              ?_releaseENTER 0001                 _calibLevel 01B8  
       __size_of_drawAdvON 004E              ?_releaseRETRO 0001            i1___fttol@sign1 0069  
             _EEPROMConfig 73A0          lcd_gotoxy@address 010A            ??i1_calcVars2ti 0081  
             ?i1_checkPass 0001     __size_ofi1_longPressUP 0074            __div_to_l_@exp1 010B  
          __div_to_l_@cntr 010A                 _chanValdig 01A3                    ??_scale 0126  
        i1___aldiv@divisor 0064            __div_to_l_@quot 0106                    ??_putch 010D  
        i1___aldiv@counter 0068           ??_longPressENTER 014C                 __pbssBANK0 00A5  
               __pbssBANK1 01A3             ?_loadSysParams 0001            ??i1_calcSysVars 0077  
         ??_longPressRETRO 0123            ?i1_sysParamInit 0001      i1_longPressENTER$3047 0090  
            __div_to_l_@f1 0100              __div_to_l_@f2 0103          ??_drawAutoCalibRM 0174  
     __size_of_setPWM2duty 0094             _RETROsecurLock 00C2         __size_of_setPWM2on 001A  
       __CFG_CCP2MX$PORTC1 000000               ?_writeEEPROM 0100             lcd_send_byte@n 0105  
           ?_initProtocoll 0001                    ?___ftge 0100                    ?___lmul 0100  
                  ?___wmul 010E         __size_of_releaseUP 000C         __CFG_CCP3MX$PORTB5 000000  
     __size_of_longPressUP 0074                  ?_t2config 0001                    ?_hp_isr 0001  
                ?_t4config 0001                  ?___altoft 0108                    ?_fround 0123  
           ___lmul@product 0108                  ?___ftpack 0100     __end_ofi1_chanValDigUP 546C  
    __end_of_desintegrator 3572                    ?_printf 013F                  ?___lltoft 0108  
               ??i1___lmul 0068                 ??i2___ftge 0025         __size_of_pressDOWN 0108  
    i2setPWM2duty@actuator 0001               ??_UARTConfig 0100       __size_of_releaseDOWN 000C  
                  u1263_41 3230             ??_releaseENTER 0100                    u1264_41 3244  
   __size_ofi2_setPWM2duty 0070             ??_releaseRETRO 0100               ??_PWM2Config 0106  
          __CFG_WDTEN$SWON 000000                  ?_delay_ms 0100   __size_ofi1_saveSysParams 0092  
               _drawScreen 51F2                 _lcd_gotoxy 7052                  ?_ioConfig 0001  
       __size_of_putchUART 000E     __size_of_longPressDOWN 002A                    _SPBRGH1 000FB0  
        ??i1_longPressDOWN 0060                    _UARTint 4692                  ?_drawMenu 0001  
                ?_lcd_init 0001                    _i16Data 00B4              ??_calcVars2ti 0123  
        __end_of_checkPass 6392                  ?_lcd_putc 0001                  ?_cutError 0001  
  __size_of_buttonChecking 02B2             _tempLastScreen 00BC      __end_of_drawCalibProc 64AC  
            ??_calcSysVars 0123                 _holdUPcont 01BF               ?i1_pressDOWN 0001  
               _readEEPROM 72C6              i1_setPWM2duty 5F9C          __end_of_ioInitStt 7398  
 __end_ofi1_chanValDigDOWN 5604          __end_of__npowers_ 7D4B                    _t2Cont1 00BB  
                  _t2Cont2 00BA                    __Hparam 0000                 _scale$2829 0126  
    __size_of_drawCutError 002E                 _lastSttFC1 00B9                 _lastSttFC2 00B7  
                  __Lparam 0000          __end_of_drawAdvON 6D00         __end_of_UARTConfig 6FB8  
             ?i1_putchUART 0001                 checkPass@i 0105         __end_of_PWM2Config 6C02  
             ??i1___altoft 006C      __size_of_drawPass1Lin 001E              i1_longPressUP 69E4  
                  ___aldiv 445E            __size_of___ftge 00C8               ??i1___ftpack 0065  
                  ___awdiv 5850            __size_of___lmul 0076                    ___ftadd 27D8  
                  ___awmod 5BF0                    ___ftdiv 3CFA                    ___ftneg 7082  
                  ___lldiv 590E            __size_of___wmul 0036                    ___ftmul 3A3E  
                  ___llmod 5E6E                    ___ftsub 6D00                    ___fttol 3F92  
               ??_t2config 0100                 ??_t4config 0100      __size_of_drawPassWord 00EC  
             ??i2___altoft 000D                 ??___altoft 010C            __size_of_hp_isr 65A8  
                  __pcinit 6030               ??i2___ftpack 0006                 ??___ftpack 0105  
          __size_of_fround 02AC                    __ramtop 0600            ?i1_chanValDigUP 0001  
 __end_ofi1_confirmEdition 5B42                 ??___lltoft 010C                    __ptext0 6DE4  
                  __ptext1 7168                    __ptext2 6798                    __ptext3 72C6  
                  __ptext4 6AC8                    __ptext5 7294                    __ptext6 5C92  
                  __ptext7 7390                    __ptext8 6FEE                    __ptext9 7398  
          __size_of_printf 0C32            i1_initProtocoll 6D98        i1initProtocoll@init 0066  
              ?__div_to_l_ 0100                    _dpowers 7CD5                  _T2CONbits 000FBA  
               _integrator 421A                    _isdigit 7192               __size_of_isr 00A6  
         ___awmod@dividend 0100            i2___altoft@sign 0012           ___aldiv@dividend 0100  
                _T4CONbits 000F51                 ??_delay_ms 0102          __end_of_setPWM2on 72AE  
               ??_ioConfig 0100                    _pressUP 47A6                  _ENTERisLP 01BE  
                  _questSN 01B4            ??_loadSysParams 0081      __end_of_drawReady2Cut 70E0  
               ??_drawMenu 0174                 ??_lcd_init 0108          __end_of_releaseUP 7384  
           __pintcode_body 6530                 ??_lcd_putc 010B       end_of_initialization 60B4  
               ??_cutError 0001         __end_ofi1___altoft 5E6E          i1calcSysVars@temp 0077  
             _drawCutError 70E0      __end_of_drawValEditor 227A         __end_ofi1___ftpack 4CEA  
                i1u1004_25 6F7C                  i1u1004_26 6F7E       lcd_send_byte@address 0107  
                i1u1220_20 168E                  i1u1221_20 1690                  i1u1223_20 16AC  
           ?i1_setPWM2duty 0060                  i1u1304_20 2D92                  i1u1224_20 16AE  
                i1u1304_26 2D94                 _securTimer 0037                  i1u1154_20 496E  
            __Lmediumconst 7CD4                  i1u1155_20 4970                  i1u1260_20 1F9C  
                i1u1236_20 17DE                  i1u1317_20 2E8C                  i1u1253_20 1CFC  
                i1u1237_20 17E0                  i1u1317_26 2E8E                    int_func 6530  
                i1u1254_20 1CFE                  i1u1177_20 4EA0                  i1u1178_20 4EA2  
                i1u1259_20 1F9A               _drawPass1Lin 7276         __end_ofi2___altoft 6798  
            i2_setPWM2duty 6A58         __end_ofi2___ftpack 5BF0                  i2u1337_45 2EAC  
        __end_of_pressDOWN 4DF2                  i2u1337_46 2EAE        __end_of_calcVars2ti 6C5A  
    __end_of_lcd_read_byte 6EBC            ___lldiv@divisor 0104               _drawPassWord 5106  
          ??_initProtocoll 0106            ___lldiv@counter 010C   __end_ofi1_longPressENTER 1FA2  
 __end_ofi1_longPressRETRO 5106            lcd_read_4bits@n 0101              _longPressDOWN 71BC  
           ?i1_longPressUP 0001        __end_of_calcSysVars 6B32           i1setPWM2duty@act 0064  
            readEEPROM@adr 0100                    printf@c 0173                    printf@f 013F  
        __end_of_putchUART 734E           ___aldiv@quotient 010A                    postdec1 000FE5  
                  postdec2 000FDD                    postinc0 000FEE                    postinc2 000FDE  
               _pressENTER 11A2          i1checkPass@passOK 0064                 _pressRETRO 56CC  
                _RETROisLP 00C5             __tdiv_to_l_@f1 0100             __tdiv_to_l_@f2 0103  
    __end_of_lcd_send_byte 6F44              ??__tdiv_to_l_ 0106                  _PORTAbits 000F80  
                _PORTBbits 000F81                 _timsXcorte 0053              ??_clockConfig 0100  
         i1integrator@acum 0083               _holdDOWNcont 00C8           i1integrator@temp 0087  
                _TRISAbits 000F92                  _TRISBbits 000F93                  _TRISCbits 000F94  
              ?_drawScreen 0001                ?_lcd_gotoxy 0108                  i1___aldiv 4578  
                i1___ftadd 2A40                  i1___ftdiv 3E46                  i1___ftmul 3B9C  
                i1___fttol 40D6              ??_drawBadPass 0174     __size_ofi1_writeEEPROM 0020  
                i2___ftadd 3220              ??_drawChanVal 0174       __size_ofi1_checkPass 008E  
   __size_of_saveSysParams 0092   __size_of_interruptConfig 0008          ??i1_saveSysParams 0081  
           ?i2_setPWM2duty 0001                ?_readEEPROM 0001                ___ftdiv@exp 011F  
            ??_drawSNquest 0174                printf@width 016C                _CCP2CONbits 000F66  
       longPressENTER@temp 014C          confirmEdition@yes 0123            i2___ftpack@sign 0005  
     __end_of_releaseENTER 736A        __size_of__div_to_l_ 0188       __end_of_releaseRETRO 735C  
           ?_longPressDOWN 0001                  i1_pressUP 48B6         _tempVelocidadMasa1 01A0  
       _tempVelocidadMasa2 019D         _tempVelocidadMasa3 0192                ___ftmul@exp 011D  
  __end_ofi1_initProtocoll 6DE4                _ECCP2ASbits 000F64       __size_of_writeEEPROM 0020  
           __end_of___ftge 56CC             __end_of___lmul 6884             __end_of___wmul 6FEE  
__size_of_saveProcessState 003C              __pidataCOMRAM 731E             __end_of_hp_isr 65B0  
           __end_of_fround 27D8        setPWM2duty@actuator 0100             __end_of_printf 0CF4  
              ?_integrator 0001      i1___lmul@multiplicand 0064          __size_ofi1___lmul 0076  
      start_initialization 6030          __size_ofi2___ftge 0090        __end_of__tdiv_to_l_ 38B6  
         ??i1_sysParamInit 007A                 ?i1___aldiv 0060                __end_of_isr 00BE  
               ?i1___ftadd 0068                 ?i1___ftdiv 0072                 ?i1___ftmul 0068  
               ?i1___fttol 0060            _drawAutoCalibRM 7020        __end_of_clockConfig 7236  
               ?i2___ftadd 0013   __size_ofi1_desintegrator 01A6                _calcVars2ti 6C02  
          ??i1_setPWM2duty 0062             _buttonChecking 227A          desintegrator@temp 013B  
              _calcSysVars 6AC8            ___llmod@divisor 0111        __end_of_drawBadPass 72F2  
          ___llmod@counter 0115            ??i1_longPressUP 0060               _lastSttENTER 00D5  
             _lastSttRETRO 00D6        __end_of_drawChanVal 6530       __size_ofi1_pressDOWN 0108  
               ?i1_pressUP 0001                   ??___ftge 0106        __size_of_drawScreen 00DA  
                 ??___lmul 0108        __size_of_lcd_gotoxy 0030              i1_writeEEPROM 7256  
                 ??___wmul 0112        __end_of_drawSNquest 4AD2                ?_pressENTER 0001  
              _chanValChar 00A5       __size_ofi1_putchUART 000E                ?_pressRETRO 0001  
              __pdataBANK0 00C9                __pdataBANK1 0177            lcd_send_4bits@n 0104  
                 ??_hp_isr 0029         i1___aldiv@dividend 0060              _saveSysParams 60C2  
                 ??_fround 0126            i1_longPressDOWN 71E6            i1readEEPROM@adr 0060  
                 ??_printf 0151          __size_of_t2config 0018          __size_of_t4config 002A  
        __size_of___altoft 009E                 fround@prec 012C        __size_of_readEEPROM 0016  
        __size_of___ftpack 010C          __size_of___lltoft 007C                __pbssCOMRAM 0037  
           writeEEPROM@adr 0101              __pcstackBANK0 0060              __pcstackBANK1 0100  
                _calFactor 0042     __end_of_buttonChecking 252C               _isdigit$2320 0101  
                 ?_UARTint 0001          __size_of_delay_ms 0046           i1___lmul@product 0068  
        __size_of_ioConfig 0032      __end_ofi1_calcVars2ti 6CB2            ??i2_setPWM2duty 0003  
            ?_sysParamInit 0001                  _calibMode 00BE    __size_of_lcd_read_4bits 007A  
            ??_setPWM2duty 0102          __size_of_drawMenu 01B6          __size_of_lcd_init 00A0  
        __size_of_lcd_putc 007A                  _bladeIsUP 00D4      __end_ofi1_calcSysVars 6B9C  
       i1___aldiv@quotient 006A          __size_of_cutError 002E                  _checkPass 6304  
          ??_longPressDOWN 0100        __size_of_integrator 0122              ??_longPressUP 0100  
        ?i1_chanValDigDOWN 0001          ??_interruptConfig 0100             ?i1_writeEEPROM 0060  
  __size_of_chanValDigDOWN 00CC           ??i1_chanValDigUP 0060                  __pintcode 0008  
            __pmediumconst 7CD4                   ?___aldiv 0100           ?i1_initProtocoll 0001  
                 ?___awdiv 0106                  __ptext100 5DD0                  __ptext101 3572  
                __ptext110 6C5A                  __ptext102 68FA                  __ptext111 3E46  
                __ptext103 40D6                  __ptext112 6B32                  __ptext104 4578  
                __ptext121 2EA2                  __ptext113 3B9C                  __ptext105 5A86  
                __ptext122 6A58                  __ptext114 4BDE                  __ptext106 2A40  
                __ptext123 61E6                  __ptext115 2CA8                  __ptext107 71E6  
                __ptext124 3220                  __ptext116 6D98                  __ptext108 6E2E  
                __ptext125 6720                  __ptext117 5F9C                  __ptext109 6154  
                 ?___ftadd 012D                  __ptext126 5B42                  __ptext118 6F44  
                __ptext127 710E                  __ptext119 7256         ??i1_chanValDigDOWN 0060  
                 ?___awmod 0100                   ?___ftdiv 0112                   ?___ftneg 0100  
                _ioInitStt 7390                   ?___lldiv 0100                   ?___ftmul 0114  
                 ?___llmod 010D                   ?___ftsub 0139                  __npowers_ 7D24  
                 ?___fttol 012A             ?_saveSysParams 0001                  _drawAdvON 6CB2  
            ??_releaseDOWN 0100                __pintcodelo 0018           __CFG_PRICLKEN$ON 000000  
              __tdiv_to_l_ 3718    __size_of_lcd_send_4bits 008E          ?i1_confirmEdition 0001  
            ?i1_readEEPROM 0001    __end_of_drawAutoCalibRM 7052               ??__div_to_l_ 0106  
  __size_of_confirmEdition 00BC                _clockConfig 7210                   ?_isdigit 0001  
           __size_of_T2int 01FA             __size_of_T4int 01C8         ??i1_confirmEdition 0081  
                _lastSttUP 00D8                ??i1___aldiv 0068                   ?_pressUP 0001  
              ??i1___ftadd 006E                ??i1___ftdiv 0078                ??i1___ftmul 006E  
              ??i1___fttol 0064            ?_buttonChecking 0001                  _ready2Cut 00BF  
              ??i2___ftadd 0019                _drawBadPass 72DC             __size_of_scale 04AE  
           ??_sysParamInit 0126             __size_of_putch 0016        __size_of_pressENTER 03CE  
                _setPWM2on 7294      __size_of_releaseENTER 000E        __size_of_pressRETRO 00C2  
              _drawChanVal 64AC      __size_of_releaseRETRO 000E            ___aldiv@divisor 0104  
          ___aldiv@counter 0108              _tempNumCortes 00D0             ___wmul@product 0112  
                 _LATBbits 000F8A                   _LATCbits 000F8B                  _releaseUP 7378  
               ?_checkPass 0001    lcd_init@LCD_INIT_STRING 0109                  delay_ms@i 0103  
   __size_of_desintegrator 01A6                   _DOWNisLP 0049                _drawSNquest 49C6  
        ??i1_desintegrator 0077                   _IPR1bits 000F9F                   _PIE1bits 000F9D  
                 _IPR5bits 000F7F                   _PIE5bits 000F7D                  _numCortes 00D2  
            ?i1_integrator 0001                ??i1_pressUP 0065                   _PIR1bits 000F9E  
                 i1u922_20 4136         __end_of__div_to_l_ 3A3E    __end_ofi1_longPressDOWN 7210  
                 i1u922_25 412C                   i1u907_25 61E2                   i1u907_26 61E4  
                 _PIR5bits 000F7E          ?i1_longPressENTER 0001                   i1u966_20 360C  
      __end_of_setPWM2duty 5F9C                _holdFC1cont 00B8                _holdFC2cont 00B6  
                 _RCONbits 000FD0          ?i1_longPressRETRO 0001                 UARTint@sas 0093  
  __size_of_longPressENTER 0332                  _pressDOWN 4CEA    __size_of_longPressRETRO 0106  
               ?_ioInitStt 0001         ??i1_longPressENTER 008D                 ?_drawAdvON 0001  
       ??i1_longPressRETRO 0077           _saveProcessState 6F44              ?_chanValDigUP 0001  
                _putchUART 7340        __end_of_longPressUP 69E4             ??i1_readEEPROM 0060  
                 i1___lmul 68FA          ___wmul@multiplier 010E                   i2___ftge 61E6  
   __size_of_drawCalibProc 008C                  lcd_init@i 010D                 printf@flag 0160  
               printf@fval 016E                 printf@prec 0171            i1_saveSysParams 6154  
             _releaseENTER 735C        __end_of_releaseDOWN 7390               ??_drawScreen 0177  
             _releaseRETRO 734E               ??_lcd_gotoxy 0109              ?i1_pressENTER 0001  
        ___lmul@multiplier 0100                  copy_data0 6044                  copy_data1 6064  
                copy_data2 6084              ?i1_pressRETRO 0001           __size_of_UARTint 0114  
    __end_of_loadSysParams 6E76                 ?_setPWM2on 0001               ??_readEEPROM 0100  
               ?_releaseUP 0001             ??i1_integrator 0081                 _EECON1bits 000FA6  
          ??i1_writeEEPROM 0061                   __Hrparam 0000                _lastSttDOWN 00D7  
                 __Lrparam 0000         __CFG_BOREN$SBORDIS 000000      __end_of_initProtocoll 6D98  
          ??_saveSysParams 0123                 ?_pressDOWN 0001          __CFG_P2BMX$PORTC0 000000  
       __end_of_drawScreen 52CC         __end_of_lcd_gotoxy 7082           __size_of___aldiv 011A  
                 _t2config 72AE              i1integrator@i 008B           __size_of___awdiv 00BE  
           ??_chanValDigUP 0100           __size_of___ftadd 0268           __size_of___awmod 00A2  
                 _t4config 7168           __size_of___ftdiv 014C     __size_of_drawReady2Cut 002E  
         __size_of___ftneg 0030           __size_of___lldiv 00BC                   ___altoft 5D32  
         __size_of___ftmul 015E           __size_of___llmod 009A           __size_of___ftsub 004C  
         __size_of___fttol 0144                 ?_putchUART 0001                   ___ftpack 4AD2  
              _fround$2827 0129                _fround$2828 0126                   ___lltoft 65B0  
            _desintegrator 33CC     __size_of_drawValEditor 02D8                 _ANSELAbits 000F38  
               _ANSELCbits 000F3A             desintegrator@i 014A           ?_drawAutoCalibRM 0001  
             ??_integrator 0121                _menuSection 01BC                   _chanValf 01B1  
                 _chanVals 01B6         __end_of_readEEPROM 72DC           __size_of_isdigit 002A  
   __size_of_lcd_read_byte 0046                   _delay_ms 6EBC              ?_EEPROMConfig 0001  
                 _ioConfig 6FEE              ??i1_checkPass 0060             ??i1_pressENTER 008A  
                 __ptext10 51F2                   __ptext11 49C6                   __ptext20 7020  
                 __ptext12 70B2                   __ptext21 1FA2                   __ptext13 5106  
                 __ptext30 6276                   __ptext22 6CB2                   __ptext14 306A  
                 __ptext31 6E76                   __ptext23 00C2                   __ptext15 70E0  
                 __ptext40 65B0                   __ptext32 66A6                   __ptext24 0CF4  
                 __ptext16 64AC                   __ptext41 5E6E                   __ptext33 7192  
                 __ptext25 72F2                   __ptext17 6420                   __ptext50 735C  
                 __ptext42 590E                   __ptext34 252C                   __ptext26 7340  
                 __ptext18 72DC                   __ptext51 7384                   __ptext43 6D00  
                 __ptext35 6FB8                   __ptext27 662C                   __ptext19 7276  
                 __ptext60 4EFA                   __ptext52 47A6                   __ptext44 7082  
                 __ptext36 5BF0                   __ptext28 7052                   __ptext61 6D4C  
                 __ptext53 52CC                   __ptext45 5604                   __ptext37 5850  
                 __ptext29 6F02                   __ptext70 60C2                   __ptext62 193E  
                 __ptext54 56CC                   __ptext46 7210                   __ptext38 3718  
                 __ptext71 7236                   __ptext63 421A                   __ptext55 11A2  
                 __ptext47 227A                   __ptext39 38B6                   __ptext80 6B9C  
                 __ptext72 6C02                   __ptext64 5D32                   __ptext56 6304  
                 __ptext48 7378                   __ptext81 72AE                   __ptext73 3A3E  
                 __ptext65 33CC                   __ptext57 4CEA                   __ptext49 734E  
                 __ptext90 539C                   __ptext82 5F08                   __ptext74 3CFA  
                 __ptext66 680E                   __ptext58 546C                   __ptext91 578E  
                 __ptext83 73A0                   __ptext75 27D8                   __ptext67 3F92  
                 __ptext59 6970                   __ptext92 1570                   __ptext76 4AD2  
                 __ptext68 445E                   __ptext93 6392                   __ptext85 4692  
                 __ptext77 71BC                   __ptext69 59CA                   __ptext94 4DF2  
                 __ptext86 6884                   __ptext78 6EBC                   __ptext95 5538  
                 __ptext87 7308                   __ptext79 6F80                   __ptext96 69E4  
                 __ptext88 736A                   __ptext97 5000                   __ptext89 48B6  
                 __ptext98 1C70                   __ptext99 433C             _processStarted 00C0  
                 _kgXcorte 0198                   __powers_ 7CFD             ??i1_pressRETRO 0067  
         __size_of_pressUP 0110                   _drawMenu 306A                   _lcd_init 5C92  
                 _lcd_putc 662C               ?_calcVars2ti 0001                   _cutError 710E  
              _OSCCON2bits 000FD2             _lcd_read_4bits 66A6     __size_of_lcd_send_byte 0042  
              _setPWM2duty 5F08          i1writeEEPROM@data 0060               ?_calcSysVars 0001  
            __size_of_main 004A              _drawCalibProc 6420                ??_checkPass 0100  
          calcSysVars@temp 0123                   _passChar 01A9        _longPressENTER$2826 014F  
              _passSection 01BB                   _tiXcorte 0195                   _timeDOWN 004B  
            ??_writeEEPROM 0101             _chanValDigDOWN 546C           ?i1_longPressDOWN 0001  
              _longPressUP 6970         __end_of_integrator 433C               _PSTR2CONbits 000F63  
             ??_pressENTER 014C                   int$flags 005C                ??_ioInitStt 0100  
                 _questKMT 003F               ??_pressRETRO 0107                ??_drawAdvON 0174  
  __end_ofi1_saveSysParams 61E6                  printf@len 015C                  printf@exp 016A  
                printf@val 0166       __end_of_sysParamInit 680E                _releaseDOWN 7384  
           _lcd_send_4bits 6276            checkPass@passOK 0104             ?_desintegrator 0001  
              _introducido 01AD                delay_ms@del 0100             _confirmEdition 59CA  
           _chanValSection 019C              _velocidadMasa 018F        i1confirmEdition@yes 0081  
              _OSCTUNEbits 000F9B                 _INTCONbits 000FF2             ??_EEPROMConfig 0100  
     i1desintegrator@temp2 0084       i1desintegrator@temp3 0080       i1desintegrator@tempL 007C  
              _PWM2CONbits 000F65                   isdigit@c 0102               _tempkgXcorte 0056  
                 scale@scl 0129     __end_of_lcd_read_4bits 6720            _interruptConfig 7398  
            _drawReady2Cut 70B2                   intlevel1 0000                   intlevel2 0000  
              ??_setPWM2on 0100           __tdiv_to_l_@exp1 010E           __tdiv_to_l_@cntr 010D  
       __end_of_pressENTER 1570           __tdiv_to_l_@quot 0109             ?_drawCalibProc 0001  
       __end_of_pressRETRO 578E      __end_ofi1_setPWM2duty 6030              ??i1_pressDOWN 0065  
         ___lldiv@dividend 0100              _drawValEditor 1FA2                ??_releaseUP 0100  
     __end_ofi1_readEEPROM 731E        __end_ofi1_checkPass 6420               _temptiXcorte 00CD  
   __end_of_chanValDigDOWN 5538                 _RCSTA1bits 000FAB           i1writeEEPROM@adr 0061  
               _OSCCONbits 000FD3              ??i1_putchUART 0060              _lcd_read_byte 6E76  
       _screen_calibVelRes 0047      __end_ofi1_longPressUP 6A58             _longPressENTER 193E  
           _longPressRETRO 4EFA                ??_pressDOWN 0105                   printf@ap 015E  
                 printf@cp 015A     __end_of_lcd_send_4bits 6304     __end_of_confirmEdition 5A86  
                 putch@val 010D                ??_putchUART 0100        i1desintegrator@temp 0079  
            _lcd_send_byte 6F02        __end_of_writeEEPROM 7256               ?__tdiv_to_l_ 0100  
              _printf$2830 0157           ??_buttonChecking 0152               ?_clockConfig 0001  
               _UARTConfig 6F80               _processTimer 003B               _processState 00B2  
     __end_ofi1_integrator 445E           ___lldiv@quotient 0108                 _PWM2Config 6B9C  
__size_ofi1_chanValDigDOWN 00CC               ___aldiv@sign 0109          __CFG_T3CMX$PORTC0 000000  
          i1_desintegrator 3572                 _WDTCONbits 000FD1              _holdENTERcont 00C6  
          ?_lcd_read_4bits 0001               ?_drawBadPass 0001             ?_drawReady2Cut 0001  
            ?_drawCutError 0001               ?_drawChanVal 0001   __end_of_saveProcessState 6F80  
     __end_of_chanValDigUP 539C             _ENTERsecurLock 00C1             ?_drawValEditor 0001  
__size_ofi1_confirmEdition 00BC              ?_drawPass1Lin 0001      __end_ofi2_setPWM2duty 6AC8  
        __CFG_FOSC$INTIO67 000000                drawAdvON@on 0174               ?_drawSNquest 0001  
          ?_chanValDigDOWN 0001    __size_ofi1_sysParamInit 0076     __end_of_longPressENTER 1C70  
            ?_drawPassWord 0001             ?_lcd_read_byte 0001     __end_of_longPressRETRO 5000  
    __end_of_longPressDOWN 71E6  
