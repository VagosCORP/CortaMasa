

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Wed Nov 16 23:47:49 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1
   138                           	psect	text119,global,reloc=2,class=CODE,delta=1
   139                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   140                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   141                           	psect	text121,global,reloc=2,class=CODE,delta=1
   142                           	psect	text122,global,reloc=2,class=CODE,delta=1
   143                           	psect	text123,global,reloc=2,class=CODE,delta=1
   144                           	psect	text124,global,reloc=2,class=CODE,delta=1
   145                           	psect	text125,global,reloc=2,class=CODE,delta=1
   146                           	psect	text126,global,reloc=2,class=CODE,delta=1
   147                           	psect	text127,global,reloc=2,class=CODE,delta=1
   148                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   149                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   150                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   151  0000                     
   152                           	psect	idataCOMRAM
   153  006CFE                     __pidataCOMRAM:
   154                           	opt stack 0
   155                           
   156                           ;initializer for _maxTimePerCut
   157  006CFE  1388               	dw	5000
   158  006D00  0000               	dw	0
   159                           
   160                           ;initializer for _timeDOWN
   161  006D02  01F4               	dw	500
   162  006D04  0000               	dw	0
   163                           
   164                           ;initializer for _pi
   165  006D06  10                 	db	16
   166  006D07  49                 	db	73
   167  006D08  40                 	db	64
   168                           
   169                           ;initializer for _tempkgXcorte
   170  006D09  CD                 	db	205
   171  006D0A  CC                 	db	204
   172  006D0B  3D                 	db	61
   173                           
   174                           ;initializer for _timsXcorte
   175  006D0C  40                 	db	64
   176  006D0D  1C                 	db	28
   177  006D0E  46                 	db	70
   178                           
   179                           	psect	idataBANK0
   180  006D5E                     __pidataBANK0:
   181                           	opt stack 0
   182                           
   183                           ;initializer for lcd_init@F7567
   184  006D5E  28                 	db	40
   185  006D5F  0C                 	db	12
   186  006D60  01                 	db	1
   187  006D61  06                 	db	6
   188                           
   189                           ;initializer for _temptiXcorte
   190  006D62  00                 	db	0
   191  006D63  20                 	db	32
   192  006D64  41                 	db	65
   193                           
   194                           ;initializer for _numCortes
   195  006D65  0005               	dw	5
   196                           
   197                           ;initializer for _bladeIsUP
   198  006D67  02                 	db	2
   199                           
   200                           	psect	idataBANK1
   201  006A0C                     __pidataBANK1:
   202                           	opt stack 0
   203                           
   204                           ;initializer for _exp10
   205  006A0C  86A0               	dw	34464
   206  006A0E  0001               	dw	1
   207  006A10  2710               	dw	10000
   208  006A12  0000               	dw	0
   209  006A14  03E8               	dw	1000
   210  006A16  0000               	dw	0
   211  006A18  0064               	dw	100
   212  006A1A  0000               	dw	0
   213  006A1C  000A               	dw	10
   214  006A1E  0000               	dw	0
   215  006A20  0001               	dw	1
   216  006A22  0000               	dw	0
   217                           
   218                           ;initializer for _kgXcorte
   219  006A24  00                 	db	0
   220  006A25  80                 	db	128
   221  006A26  3F                 	db	63
   222                           
   223                           ;initializer for _tempVelocidadMasa3
   224  006A27  CD                 	db	205
   225  006A28  4C                 	db	76
   226  006A29  3E                 	db	62
   227                           
   228                           ;initializer for _tiXcorte
   229  006A2A  00                 	db	0
   230  006A2B  20                 	db	32
   231  006A2C  41                 	db	65
   232                           
   233                           ;initializer for _velocidadMasa
   234  006A2D  CD                 	db	205
   235  006A2E  4C                 	db	76
   236  006A2F  3E                 	db	62
   237                           
   238                           ;initializer for _tempNumCortes
   239  006A30  0001               	dw	1
   240                           
   241                           ;initializer for _chanValSection
   242  006A32  05                 	db	5
   243                           
   244                           ;initializer for _flech
   245  006A33  7E                 	db	126
   246                           
   247                           ;initializer for _lastSttDOWN
   248  006A34  01                 	db	1
   249                           
   250                           ;initializer for _lastSttENTER
   251  006A35  01                 	db	1
   252                           
   253                           ;initializer for _lastSttRETRO
   254  006A36  01                 	db	1
   255                           
   256                           ;initializer for _lastSttUP
   257  006A37  01                 	db	1
   258                           
   259                           ;initializer for _tempVelocidadMasa1
   260  006A38  CD                 	db	205
   261  006A39  4C                 	db	76
   262  006A3A  3E                 	db	62
   263                           
   264                           ;initializer for _tempVelocidadMasa2
   265  006A3B  CD                 	db	205
   266  006A3C  4C                 	db	76
   267  006A3D  3E                 	db	62
   268                           
   269                           	psect	mediumconst
   270  007D3A                     __pmediumconst:
   271                           	opt stack 0
   272  007D3A  00                 	db	0
   273  007D3B                     _dpowers:
   274                           	opt stack 0
   275  007D3B  0001               	dw	1
   276  007D3D  0000               	dw	0
   277  007D3F  000A               	dw	10
   278  007D41  0000               	dw	0
   279  007D43  0064               	dw	100
   280  007D45  0000               	dw	0
   281  007D47  03E8               	dw	1000
   282  007D49  0000               	dw	0
   283  007D4B  2710               	dw	10000
   284  007D4D  0000               	dw	0
   285  007D4F  86A0               	dw	34464
   286  007D51  0001               	dw	1
   287  007D53  4240               	dw	16960
   288  007D55  000F               	dw	15
   289  007D57  9680               	dw	38528
   290  007D59  0098               	dw	152
   291  007D5B  E100               	dw	57600
   292  007D5D  05F5               	dw	1525
   293  007D5F  CA00               	dw	51712
   294  007D61  3B9A               	dw	15258
   295  007D63                     __end_of_dpowers:
   296                           	opt stack 0
   297  007D63                     __npowers_:
   298                           	opt stack 0
   299  007D63  00                 	db	0
   300  007D64  80                 	db	128
   301  007D65  3F                 	db	63
   302  007D66  CD                 	db	205
   303  007D67  CC                 	db	204
   304  007D68  3D                 	db	61
   305  007D69  D7                 	db	215
   306  007D6A  23                 	db	35
   307  007D6B  3C                 	db	60
   308  007D6C  12                 	db	18
   309  007D6D  83                 	db	131
   310  007D6E  3A                 	db	58
   311  007D6F  B7                 	db	183
   312  007D70  D1                 	db	209
   313  007D71  38                 	db	56
   314  007D72  C6                 	db	198
   315  007D73  27                 	db	39
   316  007D74  37                 	db	55
   317  007D75  38                 	db	56
   318  007D76  86                 	db	134
   319  007D77  35                 	db	53
   320  007D78  C0                 	db	192
   321  007D79  D6                 	db	214
   322  007D7A  33                 	db	51
   323  007D7B  CC                 	db	204
   324  007D7C  2B                 	db	43
   325  007D7D  32                 	db	50
   326  007D7E  70                 	db	112
   327  007D7F  89                 	db	137
   328  007D80  30                 	db	48
   329  007D81  E7                 	db	231
   330  007D82  DB                 	db	219
   331  007D83  2E                 	db	46
   332  007D84  E5                 	db	229
   333  007D85  3C                 	db	60
   334  007D86  1E                 	db	30
   335  007D87  42                 	db	66
   336  007D88  A2                 	db	162
   337  007D89  0D                 	db	13
   338  007D8A                     __end_of__npowers_:
   339                           	opt stack 0
   340  007D8A                     __powers_:
   341                           	opt stack 0
   342  007D8A  00                 	db	0
   343  007D8B  80                 	db	128
   344  007D8C  3F                 	db	63
   345  007D8D  00                 	db	0
   346  007D8E  20                 	db	32
   347  007D8F  41                 	db	65
   348  007D90  00                 	db	0
   349  007D91  C8                 	db	200
   350  007D92  42                 	db	66
   351  007D93  00                 	db	0
   352  007D94  7A                 	db	122
   353  007D95  44                 	db	68
   354  007D96  40                 	db	64
   355  007D97  1C                 	db	28
   356  007D98  46                 	db	70
   357  007D99  50                 	db	80
   358  007D9A  C3                 	db	195
   359  007D9B  47                 	db	71
   360  007D9C  24                 	db	36
   361  007D9D  74                 	db	116
   362  007D9E  49                 	db	73
   363  007D9F  97                 	db	151
   364  007DA0  18                 	db	24
   365  007DA1  4B                 	db	75
   366  007DA2  BC                 	db	188
   367  007DA3  BE                 	db	190
   368  007DA4  4C                 	db	76
   369  007DA5  6B                 	db	107
   370  007DA6  6E                 	db	110
   371  007DA7  4E                 	db	78
   372  007DA8  03                 	db	3
   373  007DA9  15                 	db	21
   374  007DAA  50                 	db	80
   375  007DAB  79                 	db	121
   376  007DAC  AD                 	db	173
   377  007DAD  60                 	db	96
   378  007DAE  F3                 	db	243
   379  007DAF  49                 	db	73
   380  007DB0  71                 	db	113
   381  007DB1                     __end_of__powers_:
   382                           	opt stack 0
   383  0000                     _ANSELAbits	set	3896
   384  0000                     _ANSELCbits	set	3898
   385  0000                     _CCPTMRS0bits	set	3913
   386  0000                     _PR4	set	3922
   387  0000                     _T4CONbits	set	3921
   388  0000                     _BAUDCON1bits	set	4024
   389  0000                     _CCP2CONbits	set	3942
   390  0000                     _CCPR2L	set	3943
   391  0000                     _ECCP2ASbits	set	3940
   392  0000                     _EEADR	set	4009
   393  0000                     _EECON1bits	set	4006
   394  0000                     _EECON2	set	4007
   395  0000                     _EEDATA	set	4008
   396  0000                     _INTCONbits	set	4082
   397  0000                     _IPR1bits	set	3999
   398  0000                     _IPR5bits	set	3967
   399  0000                     _LATBbits	set	3978
   400  0000                     _LATCbits	set	3979
   401  0000                     _OSCCON2bits	set	4050
   402  0000                     _OSCCONbits	set	4051
   403  0000                     _OSCTUNEbits	set	3995
   404  0000                     _PIE1bits	set	3997
   405  0000                     _PIE5bits	set	3965
   406  0000                     _PIR1bits	set	3998
   407  0000                     _PIR5bits	set	3966
   408  0000                     _PORTAbits	set	3968
   409  0000                     _PORTBbits	set	3969
   410  0000                     _PORTCbits	set	3970
   411  0000                     _PR2	set	4027
   412  0000                     _PSTR2CONbits	set	3939
   413  0000                     _PWM2CONbits	set	3941
   414  0000                     _RCONbits	set	4048
   415  0000                     _RCREG1	set	4014
   416  0000                     _RCSTA1bits	set	4011
   417  0000                     _SPBRG1	set	4015
   418  0000                     _SPBRGH1	set	4016
   419  0000                     _T2CONbits	set	4026
   420  0000                     _TRISAbits	set	3986
   421  0000                     _TRISBbits	set	3987
   422  0000                     _TRISCbits	set	3988
   423  0000                     _TXREG1	set	4013
   424  0000                     _TXSTA1bits	set	4012
   425  0000                     _WDTCONbits	set	4049
   426  007DB1                     STR_21:
   427                           
   428                           ; BSR set to: 1
   429  007DB1  20                 	db	32
   430  007DB2  20                 	db	32
   431  007DB3  20                 	db	32
   432  007DB4  20                 	db	32
   433  007DB5  25                 	db	37
   434  007DB6  63                 	db	99	;'c'
   435  007DB7  25                 	db	37
   436  007DB8  75                 	db	117	;'u'
   437  007DB9  25                 	db	37
   438  007DBA  63                 	db	99	;'c'
   439  007DBB  25                 	db	37
   440  007DBC  75                 	db	117	;'u'
   441  007DBD  25                 	db	37
   442  007DBE  63                 	db	99	;'c'
   443  007DBF  25                 	db	37
   444  007DC0  75                 	db	117	;'u'
   445  007DC1  25                 	db	37
   446  007DC2  63                 	db	99	;'c'
   447  007DC3  25                 	db	37
   448  007DC4  75                 	db	117	;'u'
   449  007DC5  20                 	db	32
   450  007DC6  20                 	db	32
   451  007DC7  20                 	db	32
   452  007DC8  20                 	db	32
   453  007DC9  00                 	db	0
   454  007DCA                     STR_30:
   455                           
   456                           ; BSR set to: 1
   457  007DCA  20                 	db	32
   458  007DCB  20                 	db	32
   459  007DCC  20                 	db	32
   460  007DCD  25                 	db	37
   461  007DCE  63                 	db	99	;'c'
   462  007DCF  53                 	db	83	;'S'
   463  007DD0  49                 	db	73	;'I'
   464  007DD1  20                 	db	32
   465  007DD2  20                 	db	32
   466  007DD3  20                 	db	32
   467  007DD4  20                 	db	32
   468  007DD5  25                 	db	37
   469  007DD6  63                 	db	99	;'c'
   470  007DD7  4E                 	db	78	;'N'
   471  007DD8  4F                 	db	79	;'O'
   472  007DD9  20                 	db	32
   473  007DDA  20                 	db	32
   474  007DDB  20                 	db	32
   475  007DDC  00                 	db	0
   476  007DDD                     STR_31:
   477                           
   478                           ; BSR set to: 1
   479  007DDD  50                 	db	80	;'P'
   480  007DDE  65                 	db	101	;'e'
   481  007DDF  73                 	db	115	;'s'
   482  007DE0  6F                 	db	111	;'o'
   483  007DE1  20                 	db	32
   484  007DE2  52                 	db	82	;'R'
   485  007DE3  65                 	db	101	;'e'
   486  007DE4  61                 	db	97	;'a'
   487  007DE5  6C                 	db	108	;'l'
   488  007DE6  3A                 	db	58	;':'
   489  007DE7  20                 	db	32
   490  007DE8  20                 	db	32
   491  007DE9  20                 	db	32
   492  007DEA  20                 	db	32
   493  007DEB  20                 	db	32
   494  007DEC  20                 	db	32
   495  007DED  0A                 	db	10
   496  007DEE  00                 	db	0
   497  007DEF                     STR_33:
   498                           
   499                           ; BSR set to: 1
   500  007DEF  47                 	db	71	;'G'
   501  007DF0  75                 	db	117	;'u'
   502  007DF1  69                 	db	105	;'i'
   503  007DF2  6C                 	db	108	;'l'
   504  007DF3  6C                 	db	108	;'l'
   505  007DF4  6F                 	db	111	;'o'
   506  007DF5  74                 	db	116	;'t'
   507  007DF6  69                 	db	105	;'i'
   508  007DF7  6E                 	db	110	;'n'
   509  007DF8  61                 	db	97	;'a'
   510  007DF9  20                 	db	32
   511  007DFA  20                 	db	32
   512  007DFB  20                 	db	32
   513  007DFC  20                 	db	32
   514  007DFD  20                 	db	32
   515  007DFE  20                 	db	32
   516  007DFF  0A                 	db	10
   517  007E00  00                 	db	0
   518  007E01                     STR_20:
   519                           
   520                           ; BSR set to: 1
   521  007E01  43                 	db	67	;'C'
   522  007E02  6F                 	db	111	;'o'
   523  007E03  6E                 	db	110	;'n'
   524  007E04  74                 	db	116	;'t'
   525  007E05  72                 	db	114	;'r'
   526  007E06  61                 	db	97	;'a'
   527  007E07  73                 	db	115	;'s'
   528  007E08  65                 	db	101	;'e'
   529  007E09  6E                 	db	110	;'n'
   530  007E0A  61                 	db	97	;'a'
   531  007E0B  3A                 	db	58	;':'
   532  007E0C  20                 	db	32
   533  007E0D  20                 	db	32
   534  007E0E  20                 	db	32
   535  007E0F  20                 	db	32
   536  007E10  20                 	db	32
   537  007E11  0A                 	db	10
   538  007E12  00                 	db	0
   539  007E13                     STR_14:
   540                           
   541                           ; BSR set to: 1
   542  007E13  56                 	db	86	;'V'
   543  007E14  65                 	db	101	;'e'
   544  007E15  6C                 	db	108	;'l'
   545  007E16  6F                 	db	111	;'o'
   546  007E17  63                 	db	99	;'c'
   547  007E18  69                 	db	105	;'i'
   548  007E19  64                 	db	100	;'d'
   549  007E1A  61                 	db	97	;'a'
   550  007E1B  64                 	db	100	;'d'
   551  007E1C  20                 	db	32
   552  007E1D  4D                 	db	77	;'M'
   553  007E1E  61                 	db	97	;'a'
   554  007E1F  73                 	db	115	;'s'
   555  007E20  61                 	db	97	;'a'
   556  007E21  3A                 	db	58	;':'
   557  007E22  20                 	db	32
   558  007E23  0A                 	db	10
   559  007E24  00                 	db	0
   560  007E25                     STR_7:
   561                           
   562                           ; BSR set to: 1
   563  007E25  45                 	db	69	;'E'
   564  007E26  73                 	db	115	;'s'
   565  007E27  74                 	db	116	;'t'
   566  007E28  61                 	db	97	;'a'
   567  007E29  64                 	db	100	;'d'
   568  007E2A  6F                 	db	111	;'o'
   569  007E2B  20                 	db	32
   570  007E2C  70                 	db	112	;'p'
   571  007E2D  72                 	db	114	;'r'
   572  007E2E  6F                 	db	111	;'o'
   573  007E2F  63                 	db	99	;'c'
   574  007E30  65                 	db	101	;'e'
   575  007E31  73                 	db	115	;'s'
   576  007E32  6F                 	db	111	;'o'
   577  007E33  3A                 	db	58	;':'
   578  007E34  20                 	db	32
   579  007E35  0A                 	db	10
   580  007E36  00                 	db	0
   581  007E37                     STR_29:
   582                           
   583                           ; BSR set to: 1
   584  007E37  49                 	db	73	;'I'
   585  007E38  6E                 	db	110	;'n'
   586  007E39  69                 	db	105	;'i'
   587  007E3A  74                 	db	116	;'t'
   588  007E3B  20                 	db	32
   589  007E3C  41                 	db	65	;'A'
   590  007E3D  75                 	db	117	;'u'
   591  007E3E  74                 	db	116	;'t'
   592  007E3F  6F                 	db	111	;'o'
   593  007E40  43                 	db	67	;'C'
   594  007E41  61                 	db	97	;'a'
   595  007E42  6C                 	db	108	;'l'
   596  007E43  69                 	db	105	;'i'
   597  007E44  62                 	db	98	;'b'
   598  007E45  3F                 	db	63	;'?'
   599  007E46  20                 	db	32
   600  007E47  0A                 	db	10
   601  007E48  00                 	db	0
   602  007E49                     STR_28:
   603                           
   604                           ; BSR set to: 1
   605  007E49  47                 	db	71	;'G'
   606  007E4A  75                 	db	117	;'u'
   607  007E4B  61                 	db	97	;'a'
   608  007E4C  72                 	db	114	;'r'
   609  007E4D  64                 	db	100	;'d'
   610  007E4E  61                 	db	97	;'a'
   611  007E4F  72                 	db	114	;'r'
   612  007E50  20                 	db	32
   613  007E51  43                 	db	67	;'C'
   614  007E52  61                 	db	97	;'a'
   615  007E53  6D                 	db	109	;'m'
   616  007E54  62                 	db	98	;'b'
   617  007E55  69                 	db	105	;'i'
   618  007E56  6F                 	db	111	;'o'
   619  007E57  3F                 	db	63	;'?'
   620  007E58  20                 	db	32
   621  007E59  0A                 	db	10
   622  007E5A  00                 	db	0
   623  007E5B                     STR_10:
   624                           
   625                           ; BSR set to: 1
   626  007E5B  56                 	db	86	;'V'
   627  007E5C  61                 	db	97	;'a'
   628  007E5D  6C                 	db	108	;'l'
   629  007E5E  6F                 	db	111	;'o'
   630  007E5F  72                 	db	114	;'r'
   631  007E60  20                 	db	32
   632  007E61  70                 	db	112	;'p'
   633  007E62  6F                 	db	111	;'o'
   634  007E63  72                 	db	114	;'r'
   635  007E64  20                 	db	32
   636  007E65  43                 	db	67	;'C'
   637  007E66  6F                 	db	111	;'o'
   638  007E67  72                 	db	114	;'r'
   639  007E68  74                 	db	116	;'t'
   640  007E69  65                 	db	101	;'e'
   641  007E6A  3A                 	db	58	;':'
   642  007E6B  0A                 	db	10
   643  007E6C  00                 	db	0
   644  007E6D                     STR_23:
   645                           
   646                           ; BSR set to: 1
   647  007E6D  4D                 	db	77	;'M'
   648  007E6E  6F                 	db	111	;'o'
   649  007E6F  64                 	db	100	;'d'
   650  007E70  6F                 	db	111	;'o'
   651  007E71  20                 	db	32
   652  007E72  43                 	db	67	;'C'
   653  007E73  6F                 	db	111	;'o'
   654  007E74  6E                 	db	110	;'n'
   655  007E75  66                 	db	102	;'f'
   656  007E76  69                 	db	105	;'i'
   657  007E77  67                 	db	103	;'g'
   658  007E78  75                 	db	117	;'u'
   659  007E79  72                 	db	114	;'r'
   660  007E7A  61                 	db	97	;'a'
   661  007E7B  72                 	db	114	;'r'
   662  007E7C  3A                 	db	58	;':'
   663  007E7D  0A                 	db	10
   664  007E7E  00                 	db	0
   665  007E7F                     STR_12:
   666                           
   667                           ; BSR set to: 1
   668  007E7F  43                 	db	67	;'C'
   669  007E80  61                 	db	97	;'a'
   670  007E81  6E                 	db	110	;'n'
   671  007E82  74                 	db	116	;'t'
   672  007E83  69                 	db	105	;'i'
   673  007E84  64                 	db	100	;'d'
   674  007E85  61                 	db	97	;'a'
   675  007E86  64                 	db	100	;'d'
   676  007E87  20                 	db	32
   677  007E88  43                 	db	67	;'C'
   678  007E89  6F                 	db	111	;'o'
   679  007E8A  72                 	db	114	;'r'
   680  007E8B  74                 	db	116	;'t'
   681  007E8C  65                 	db	101	;'e'
   682  007E8D  73                 	db	115	;'s'
   683  007E8E  3A                 	db	58	;':'
   684  007E8F  0A                 	db	10
   685  007E90  00                 	db	0
   686  007E91                     STR_26:
   687                           
   688                           ; BSR set to: 1
   689  007E91  49                 	db	73	;'I'
   690  007E92  6E                 	db	110	;'n'
   691  007E93  69                 	db	105	;'i'
   692  007E94  63                 	db	99	;'c'
   693  007E95  69                 	db	105	;'i'
   694  007E96  61                 	db	97	;'a'
   695  007E97  72                 	db	114	;'r'
   696  007E98  20                 	db	32
   697  007E99  50                 	db	80	;'P'
   698  007E9A  72                 	db	114	;'r'
   699  007E9B  6F                 	db	111	;'o'
   700  007E9C  63                 	db	99	;'c'
   701  007E9D  65                 	db	101	;'e'
   702  007E9E  73                 	db	115	;'s'
   703  007E9F  6F                 	db	111	;'o'
   704  007EA0  3F                 	db	63	;'?'
   705  007EA1  0A                 	db	10
   706  007EA2  00                 	db	0
   707  007EA3                     STR_27:
   708                           
   709                           ; BSR set to: 1
   710  007EA3  44                 	db	68	;'D'
   711  007EA4  65                 	db	101	;'e'
   712  007EA5  74                 	db	116	;'t'
   713  007EA6  65                 	db	101	;'e'
   714  007EA7  6E                 	db	110	;'n'
   715  007EA8  65                 	db	101	;'e'
   716  007EA9  72                 	db	114	;'r'
   717  007EAA  20                 	db	32
   718  007EAB  50                 	db	80	;'P'
   719  007EAC  72                 	db	114	;'r'
   720  007EAD  6F                 	db	111	;'o'
   721  007EAE  63                 	db	99	;'c'
   722  007EAF  65                 	db	101	;'e'
   723  007EB0  73                 	db	115	;'s'
   724  007EB1  6F                 	db	111	;'o'
   725  007EB2  3F                 	db	63	;'?'
   726  007EB3  0A                 	db	10
   727  007EB4  00                 	db	0
   728  007EB5                     STR_35:
   729                           
   730                           ; BSR set to: 1
   731  007EB5  41                 	db	65	;'A'
   732  007EB6  75                 	db	117	;'u'
   733  007EB7  74                 	db	116	;'t'
   734  007EB8  6F                 	db	111	;'o'
   735  007EB9  63                 	db	99	;'c'
   736  007EBA  61                 	db	97	;'a'
   737  007EBB  6C                 	db	108	;'l'
   738  007EBC  69                 	db	105	;'i'
   739  007EBD  62                 	db	98	;'b'
   740  007EBE  20                 	db	32
   741  007EBF  75                 	db	117	;'u'
   742  007EC0  73                 	db	115	;'s'
   743  007EC1  61                 	db	97	;'a'
   744  007EC2  6E                 	db	110	;'n'
   745  007EC3  64                 	db	100	;'d'
   746  007EC4  6F                 	db	111	;'o'
   747  007EC5  0A                 	db	10
   748  007EC6  00                 	db	0
   749  007EC7                     STR_1:
   750                           
   751                           ; BSR set to: 1
   752  007EC7  20                 	db	32
   753  007EC8  25                 	db	37
   754  007EC9  75                 	db	117	;'u'
   755  007ECA  25                 	db	37
   756  007ECB  75                 	db	117	;'u'
   757  007ECC  25                 	db	37
   758  007ECD  75                 	db	117	;'u'
   759  007ECE  2E                 	db	46
   760  007ECF  25                 	db	37
   761  007ED0  75                 	db	117	;'u'
   762  007ED1  25                 	db	37
   763  007ED2  75                 	db	117	;'u'
   764  007ED3  25                 	db	37
   765  007ED4  63                 	db	99	;'c'
   766  007ED5  25                 	db	37
   767  007ED6  75                 	db	117	;'u'
   768  007ED7  20                 	db	32
   769  007ED8  00                 	db	0
   770  007ED9                     STR_2:
   771                           
   772                           ; BSR set to: 1
   773  007ED9  20                 	db	32
   774  007EDA  25                 	db	37
   775  007EDB  75                 	db	117	;'u'
   776  007EDC  25                 	db	37
   777  007EDD  75                 	db	117	;'u'
   778  007EDE  25                 	db	37
   779  007EDF  75                 	db	117	;'u'
   780  007EE0  2E                 	db	46
   781  007EE1  25                 	db	37
   782  007EE2  75                 	db	117	;'u'
   783  007EE3  25                 	db	37
   784  007EE4  63                 	db	99	;'c'
   785  007EE5  25                 	db	37
   786  007EE6  75                 	db	117	;'u'
   787  007EE7  25                 	db	37
   788  007EE8  75                 	db	117	;'u'
   789  007EE9  20                 	db	32
   790  007EEA  00                 	db	0
   791  007EEB                     STR_4:
   792                           
   793                           ; BSR set to: 1
   794  007EEB  20                 	db	32
   795  007EEC  25                 	db	37
   796  007EED  75                 	db	117	;'u'
   797  007EEE  25                 	db	37
   798  007EEF  75                 	db	117	;'u'
   799  007EF0  25                 	db	37
   800  007EF1  63                 	db	99	;'c'
   801  007EF2  25                 	db	37
   802  007EF3  75                 	db	117	;'u'
   803  007EF4  2E                 	db	46
   804  007EF5  25                 	db	37
   805  007EF6  75                 	db	117	;'u'
   806  007EF7  25                 	db	37
   807  007EF8  75                 	db	117	;'u'
   808  007EF9  25                 	db	37
   809  007EFA  75                 	db	117	;'u'
   810  007EFB  20                 	db	32
   811  007EFC  00                 	db	0
   812  007EFD                     STR_5:
   813                           
   814                           ; BSR set to: 1
   815  007EFD  20                 	db	32
   816  007EFE  25                 	db	37
   817  007EFF  75                 	db	117	;'u'
   818  007F00  25                 	db	37
   819  007F01  63                 	db	99	;'c'
   820  007F02  25                 	db	37
   821  007F03  75                 	db	117	;'u'
   822  007F04  25                 	db	37
   823  007F05  75                 	db	117	;'u'
   824  007F06  2E                 	db	46
   825  007F07  25                 	db	37
   826  007F08  75                 	db	117	;'u'
   827  007F09  25                 	db	37
   828  007F0A  75                 	db	117	;'u'
   829  007F0B  25                 	db	37
   830  007F0C  75                 	db	117	;'u'
   831  007F0D  20                 	db	32
   832  007F0E  00                 	db	0
   833  007F0F                     STR_6:
   834                           
   835                           ; BSR set to: 1
   836  007F0F  20                 	db	32
   837  007F10  25                 	db	37
   838  007F11  63                 	db	99	;'c'
   839  007F12  25                 	db	37
   840  007F13  75                 	db	117	;'u'
   841  007F14  25                 	db	37
   842  007F15  75                 	db	117	;'u'
   843  007F16  25                 	db	37
   844  007F17  75                 	db	117	;'u'
   845  007F18  2E                 	db	46
   846  007F19  25                 	db	37
   847  007F1A  75                 	db	117	;'u'
   848  007F1B  25                 	db	37
   849  007F1C  75                 	db	117	;'u'
   850  007F1D  25                 	db	37
   851  007F1E  75                 	db	117	;'u'
   852  007F1F  20                 	db	32
   853  007F20  00                 	db	0
   854  007F21                     STR_3:
   855                           
   856                           ; BSR set to: 1
   857  007F21  20                 	db	32
   858  007F22  25                 	db	37
   859  007F23  75                 	db	117	;'u'
   860  007F24  25                 	db	37
   861  007F25  75                 	db	117	;'u'
   862  007F26  25                 	db	37
   863  007F27  75                 	db	117	;'u'
   864  007F28  2E                 	db	46
   865  007F29  25                 	db	37
   866  007F2A  63                 	db	99	;'c'
   867  007F2B  25                 	db	37
   868  007F2C  75                 	db	117	;'u'
   869  007F2D  25                 	db	37
   870  007F2E  75                 	db	117	;'u'
   871  007F2F  25                 	db	37
   872  007F30  75                 	db	117	;'u'
   873  007F31  20                 	db	32
   874  007F32  00                 	db	0
   875  007F33                     STR_36:
   876                           
   877                           ; BSR set to: 1
   878  007F33  20                 	db	32
   879  007F34  20                 	db	32
   880  007F35  20                 	db	32
   881  007F36  20                 	db	32
   882  007F37  20                 	db	32
   883  007F38  20                 	db	32
   884  007F39  20                 	db	32
   885  007F3A  31                 	db	49	;'1'
   886  007F3B  20                 	db	32
   887  007F3C  6B                 	db	107	;'k'
   888  007F3D  67                 	db	103	;'g'
   889  007F3E  20                 	db	32
   890  007F3F  20                 	db	32
   891  007F40  20                 	db	32
   892  007F41  20                 	db	32
   893  007F42  20                 	db	32
   894  007F43  00                 	db	0
   895  007F44                     STR_38:
   896                           
   897                           ; BSR set to: 1
   898  007F44  20                 	db	32
   899  007F45  20                 	db	32
   900  007F46  20                 	db	32
   901  007F47  20                 	db	32
   902  007F48  20                 	db	32
   903  007F49  30                 	db	48	;'0'
   904  007F4A  2E                 	db	46
   905  007F4B  35                 	db	53	;'5'
   906  007F4C  20                 	db	32
   907  007F4D  6B                 	db	107	;'k'
   908  007F4E  67                 	db	103	;'g'
   909  007F4F  20                 	db	32
   910  007F50  20                 	db	32
   911  007F51  20                 	db	32
   912  007F52  20                 	db	32
   913  007F53  20                 	db	32
   914  007F54  00                 	db	0
   915  007F55                     STR_40:
   916                           
   917                           ; BSR set to: 1
   918  007F55  20                 	db	32
   919  007F56  20                 	db	32
   920  007F57  20                 	db	32
   921  007F58  20                 	db	32
   922  007F59  30                 	db	48	;'0'
   923  007F5A  2E                 	db	46
   924  007F5B  32                 	db	50	;'2'
   925  007F5C  35                 	db	53	;'5'
   926  007F5D  20                 	db	32
   927  007F5E  6B                 	db	107	;'k'
   928  007F5F  67                 	db	103	;'g'
   929  007F60  20                 	db	32
   930  007F61  20                 	db	32
   931  007F62  20                 	db	32
   932  007F63  20                 	db	32
   933  007F64  20                 	db	32
   934  007F65  00                 	db	0
   935  007F66                     STR_22:
   936                           
   937                           ; BSR set to: 1
   938  007F66  20                 	db	32
   939  007F67  20                 	db	32
   940  007F68  20                 	db	32
   941  007F69  20                 	db	32
   942  007F6A  20                 	db	32
   943  007F6B  45                 	db	69	;'E'
   944  007F6C  72                 	db	114	;'r'
   945  007F6D  72                 	db	114	;'r'
   946  007F6E  6F                 	db	111	;'o'
   947  007F6F  6E                 	db	110	;'n'
   948  007F70  65                 	db	101	;'e'
   949  007F71  61                 	db	97	;'a'
   950  007F72  20                 	db	32
   951  007F73  20                 	db	32
   952  007F74  20                 	db	32
   953  007F75  20                 	db	32
   954  007F76  00                 	db	0
   955  007F77                     STR_24:
   956                           
   957                           ; BSR set to: 1
   958  007F77  20                 	db	32
   959  007F78  20                 	db	32
   960  007F79  20                 	db	32
   961  007F7A  20                 	db	32
   962  007F7B  49                 	db	73	;'I'
   963  007F7C  6E                 	db	110	;'n'
   964  007F7D  69                 	db	105	;'i'
   965  007F7E  63                 	db	99	;'c'
   966  007F7F  69                 	db	105	;'i'
   967  007F80  61                 	db	97	;'a'
   968  007F81  64                 	db	100	;'d'
   969  007F82  6F                 	db	111	;'o'
   970  007F83  20                 	db	32
   971  007F84  20                 	db	32
   972  007F85  20                 	db	32
   973  007F86  20                 	db	32
   974  007F87  00                 	db	0
   975  007F88                     STR_9:
   976                           
   977                           ; BSR set to: 1
   978  007F88  20                 	db	32
   979  007F89  20                 	db	32
   980  007F8A  20                 	db	32
   981  007F8B  20                 	db	32
   982  007F8C  44                 	db	68	;'D'
   983  007F8D  65                 	db	101	;'e'
   984  007F8E  74                 	db	116	;'t'
   985  007F8F  65                 	db	101	;'e'
   986  007F90  6E                 	db	110	;'n'
   987  007F91  69                 	db	105	;'i'
   988  007F92  64                 	db	100	;'d'
   989  007F93  6F                 	db	111	;'o'
   990  007F94  20                 	db	32
   991  007F95  20                 	db	32
   992  007F96  20                 	db	32
   993  007F97  20                 	db	32
   994  007F98  00                 	db	0
   995  007F99                     STR_25:
   996                           
   997                           ; BSR set to: 1
   998  007F99  20                 	db	32
   999  007F9A  20                 	db	32
  1000  007F9B  20                 	db	32
  1001  007F9C  46                 	db	70	;'F'
  1002  007F9D  69                 	db	105	;'i'
  1003  007F9E  6E                 	db	110	;'n'
  1004  007F9F  61                 	db	97	;'a'
  1005  007FA0  6C                 	db	108	;'l'
  1006  007FA1  69                 	db	105	;'i'
  1007  007FA2  7A                 	db	122	;'z'
  1008  007FA3  61                 	db	97	;'a'
  1009  007FA4  64                 	db	100	;'d'
  1010  007FA5  6F                 	db	111	;'o'
  1011  007FA6  20                 	db	32
  1012  007FA7  20                 	db	32
  1013  007FA8  20                 	db	32
  1014  007FA9  00                 	db	0
  1015  007FAA                     STR_34:
  1016                           
  1017                           ; BSR set to: 1
  1018  007FAA  20                 	db	32
  1019  007FAB  20                 	db	32
  1020  007FAC  20                 	db	32
  1021  007FAD  20                 	db	32
  1022  007FAE  20                 	db	32
  1023  007FAF  20                 	db	32
  1024  007FB0  54                 	db	84	;'T'
  1025  007FB1  72                 	db	114	;'r'
  1026  007FB2  61                 	db	97	;'a'
  1027  007FB3  6E                 	db	110	;'n'
  1028  007FB4  63                 	db	99	;'c'
  1029  007FB5  61                 	db	97	;'a'
  1030  007FB6  64                 	db	100	;'d'
  1031  007FB7  61                 	db	97	;'a'
  1032  007FB8  20                 	db	32
  1033  007FB9  20                 	db	32
  1034  007FBA  00                 	db	0
  1035  007FBB                     STR_13:
  1036                           
  1037                           ; BSR set to: 1
  1038  007FBB  20                 	db	32
  1039  007FBC  20                 	db	32
  1040  007FBD  20                 	db	32
  1041  007FBE  20                 	db	32
  1042  007FBF  20                 	db	32
  1043  007FC0  20                 	db	32
  1044  007FC1  25                 	db	37
  1045  007FC2  64                 	db	100	;'d'
  1046  007FC3  20                 	db	32
  1047  007FC4  20                 	db	32
  1048  007FC5  20                 	db	32
  1049  007FC6  20                 	db	32
  1050  007FC7  20                 	db	32
  1051  007FC8  20                 	db	32
  1052  007FC9  20                 	db	32
  1053  007FCA  00                 	db	0
  1054  007FCB                     STR_8:
  1055                           
  1056                           ; BSR set to: 1
  1057  007FCB  20                 	db	32
  1058  007FCC  20                 	db	32
  1059  007FCD  20                 	db	32
  1060  007FCE  25                 	db	37
  1061  007FCF  64                 	db	100	;'d'
  1062  007FD0  20                 	db	32
  1063  007FD1  2F                 	db	47
  1064  007FD2  20                 	db	32
  1065  007FD3  25                 	db	37
  1066  007FD4  64                 	db	100	;'d'
  1067  007FD5  20                 	db	32
  1068  007FD6  20                 	db	32
  1069  007FD7  20                 	db	32
  1070  007FD8  20                 	db	32
  1071  007FD9  00                 	db	0
  1072  007FDA                     STR_11:
  1073                           
  1074                           ; BSR set to: 1
  1075  007FDA  20                 	db	32
  1076  007FDB  20                 	db	32
  1077  007FDC  20                 	db	32
  1078  007FDD  25                 	db	37
  1079  007FDE  33                 	db	51	;'3'
  1080  007FDF  2E                 	db	46
  1081  007FE0  33                 	db	51	;'3'
  1082  007FE1  66                 	db	102	;'f'
  1083  007FE2  20                 	db	32
  1084  007FE3  6B                 	db	107	;'k'
  1085  007FE4  67                 	db	103	;'g'
  1086  007FE5  20                 	db	32
  1087  007FE6  20                 	db	32
  1088  007FE7  20                 	db	32
  1089  007FE8  00                 	db	0
  1090  007FE9                     STR_15:
  1091                           
  1092                           ; BSR set to: 1
  1093  007FE9  20                 	db	32
  1094  007FEA  20                 	db	32
  1095  007FEB  25                 	db	37
  1096  007FEC  33                 	db	51	;'3'
  1097  007FED  2E                 	db	46
  1098  007FEE  33                 	db	51	;'3'
  1099  007FEF  66                 	db	102	;'f'
  1100  007FF0  20                 	db	32
  1101  007FF1  6B                 	db	107	;'k'
  1102  007FF2  67                 	db	103	;'g'
  1103  007FF3  2F                 	db	47
  1104  007FF4  73                 	db	115	;'s'
  1105  007FF5  20                 	db	32
  1106  007FF6  20                 	db	32
  1107  007FF7  00                 	db	0
  1108  007FF8                     STR_17:
  1109                           
  1110                           ; BSR set to: 1
  1111  007FF8  6B                 	db	107	;'k'
  1112  007FF9  67                 	db	103	;'g'
  1113  007FFA  20                 	db	32
  1114  007FFB  20                 	db	32
  1115  007FFC  20                 	db	32
  1116  007FFD  20                 	db	32
  1117  007FFE  00                 	db	0
  1118  0000                     
  1119                           ; #config settings
  1120  007FFF  00                 	db	0	; dummy byte at the end
  1121  0000                     
  1122                           	psect	cinit
  1123  005A36                     __pcinit:
  1124                           	opt stack 0
  1125  005A36                     start_initialization:
  1126                           	opt stack 0
  1127  005A36                     __initialization:
  1128                           	opt stack 0
  1129                           
  1130                           ; Initialize objects allocated to BANK1 (50 bytes)
  1131                           ; load TBLPTR registers with __pidataBANK1
  1132  005A36  0E0C               	movlw	low __pidataBANK1
  1133  005A38  6EF6               	movwf	tblptrl,c
  1134  005A3A  0E6A               	movlw	high __pidataBANK1
  1135  005A3C  6EF7               	movwf	tblptrh,c
  1136  005A3E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1137  005A40  6EF8               	movwf	tblptru,c
  1138  005A42  EE01  F077         	lfsr	0,__pdataBANK1
  1139  005A46  EE10 F032          	lfsr	1,50
  1140  005A4A                     copy_data0:
  1141  005A4A  0009               	tblrd		*+
  1142  005A4C  CFF5 FFEE          	movff	tablat,postinc0
  1143  005A50  50E5               	movf	postdec1,w,c
  1144  005A52  50E1               	movf	fsr1l,w,c
  1145  005A54  E1FA               	bnz	copy_data0
  1146                           
  1147                           ; Initialize objects allocated to BANK0 (10 bytes)
  1148                           ; load TBLPTR registers with __pidataBANK0
  1149  005A56  0E5E               	movlw	low __pidataBANK0
  1150  005A58  6EF6               	movwf	tblptrl,c
  1151  005A5A  0E6D               	movlw	high __pidataBANK0
  1152  005A5C  6EF7               	movwf	tblptrh,c
  1153  005A5E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1154  005A60  6EF8               	movwf	tblptru,c
  1155  005A62  EE00  F0BF         	lfsr	0,__pdataBANK0
  1156  005A66  EE10 F00A          	lfsr	1,10
  1157  005A6A                     copy_data1:
  1158  005A6A  0009               	tblrd		*+
  1159  005A6C  CFF5 FFEE          	movff	tablat,postinc0
  1160  005A70  50E5               	movf	postdec1,w,c
  1161  005A72  50E1               	movf	fsr1l,w,c
  1162  005A74  E1FA               	bnz	copy_data1
  1163                           
  1164                           ; Initialize objects allocated to COMRAM (17 bytes)
  1165                           ; load TBLPTR registers with __pidataCOMRAM
  1166  005A76  0EFE               	movlw	low __pidataCOMRAM
  1167  005A78  6EF6               	movwf	tblptrl,c
  1168  005A7A  0E6C               	movlw	high __pidataCOMRAM
  1169  005A7C  6EF7               	movwf	tblptrh,c
  1170  005A7E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1171  005A80  6EF8               	movwf	tblptru,c
  1172  005A82  EE00  F04C         	lfsr	0,__pdataCOMRAM
  1173  005A86  EE10 F011          	lfsr	1,17
  1174  005A8A                     copy_data2:
  1175  005A8A  0009               	tblrd		*+
  1176  005A8C  CFF5 FFEE          	movff	tablat,postinc0
  1177  005A90  50E5               	movf	postdec1,w,c
  1178  005A92  50E1               	movf	fsr1l,w,c
  1179  005A94  E1FA               	bnz	copy_data2
  1180                           
  1181                           ; Clear objects allocated to BANK1 (36 bytes)
  1182  005A96  EE01  F0A9         	lfsr	0,__pbssBANK1
  1183  005A9A  0E24               	movlw	36
  1184  005A9C                     clear_0:
  1185  005A9C  6AEE               	clrf	postinc0,c
  1186  005A9E  06E8               	decf	wreg,f,c
  1187  005AA0  E1FD               	bnz	clear_0
  1188                           
  1189                           ; Clear objects allocated to BANK0 (26 bytes)
  1190  005AA2  EE00  F0A5         	lfsr	0,__pbssBANK0
  1191  005AA6  0E1A               	movlw	26
  1192  005AA8                     clear_1:
  1193  005AA8  6AEE               	clrf	postinc0,c
  1194  005AAA  06E8               	decf	wreg,f,c
  1195  005AAC  E1FD               	bnz	clear_1
  1196                           
  1197                           ; Clear objects allocated to COMRAM (21 bytes)
  1198  005AAE  EE00  F037         	lfsr	0,__pbssCOMRAM
  1199  005AB2  0E15               	movlw	21
  1200  005AB4                     clear_2:
  1201  005AB4  6AEE               	clrf	postinc0,c
  1202  005AB6  06E8               	decf	wreg,f,c
  1203  005AB8  E1FD               	bnz	clear_2
  1204  005ABA                     end_of_initialization:
  1205                           	opt stack 0
  1206  005ABA                     __end_of__initialization:
  1207                           	opt stack 0
  1208  005ABA  905D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1209  005ABC  925D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1210  005ABE  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1211  005AC0  6EF8               	movwf	tblptru,c
  1212  005AC2  0100               	movlb	0
  1213  005AC4  EF89  F033         	goto	_main	;jump to C main() function
  1214                           tblptru	equ	0xFF8
  1215                           tblptrh	equ	0xFF7
  1216                           tblptrl	equ	0xFF6
  1217                           tablat	equ	0xFF5
  1218                           postinc0	equ	0xFEE
  1219                           wreg	equ	0xFE8
  1220                           postdec1	equ	0xFE5
  1221                           fsr1l	equ	0xFE1
  1222                           
  1223                           	psect	bssCOMRAM
  1224  000037                     __pbssCOMRAM:
  1225                           	opt stack 0
  1226  000037                     _processTimer:
  1227                           	opt stack 0
  1228  000037                     	ds	4
  1229  00003B                     _securTimer:
  1230                           	opt stack 0
  1231  00003B                     	ds	4
  1232  00003F                     _calFactor:
  1233                           	opt stack 0
  1234  00003F                     	ds	3
  1235  000042                     _questKMT:
  1236                           	opt stack 0
  1237  000042                     	ds	3
  1238  000045                     _DOWNisLP:
  1239                           	opt stack 0
  1240  000045                     	ds	1
  1241  000046                     _FC1securLock:
  1242                           	opt stack 0
  1243  000046                     	ds	1
  1244  000047                     _FC2securLock:
  1245                           	opt stack 0
  1246  000047                     	ds	1
  1247  000048                     _RETROisLP:
  1248                           	opt stack 0
  1249  000048                     	ds	1
  1250  000049                     _UPisLP:
  1251                           	opt stack 0
  1252  000049                     	ds	1
  1253  00004A                     _screen_calibVelRes:
  1254                           	opt stack 0
  1255  00004A                     	ds	1
  1256  00004B                     _selKMT:
  1257                           	opt stack 0
  1258  00004B                     	ds	1
  1259                           tblptru	equ	0xFF8
  1260                           tblptrh	equ	0xFF7
  1261                           tblptrl	equ	0xFF6
  1262                           tablat	equ	0xFF5
  1263                           postinc0	equ	0xFEE
  1264                           wreg	equ	0xFE8
  1265                           postdec1	equ	0xFE5
  1266                           fsr1l	equ	0xFE1
  1267                           
  1268                           	psect	dataCOMRAM
  1269  00004C                     __pdataCOMRAM:
  1270                           	opt stack 0
  1271  00004C                     _maxTimePerCut:
  1272                           	opt stack 0
  1273  00004C                     	ds	4
  1274  000050                     _timeDOWN:
  1275                           	opt stack 0
  1276  000050                     	ds	4
  1277  000054                     _pi:
  1278                           	opt stack 0
  1279  000054                     	ds	3
  1280  000057                     _tempkgXcorte:
  1281                           	opt stack 0
  1282  000057                     	ds	3
  1283  00005A                     _timsXcorte:
  1284                           	opt stack 0
  1285  00005A                     	ds	3
  1286                           tblptru	equ	0xFF8
  1287                           tblptrh	equ	0xFF7
  1288                           tblptrl	equ	0xFF6
  1289                           tablat	equ	0xFF5
  1290                           postinc0	equ	0xFEE
  1291                           wreg	equ	0xFE8
  1292                           postdec1	equ	0xFE5
  1293                           fsr1l	equ	0xFE1
  1294                           
  1295                           	psect	bssBANK0
  1296  0000A5                     __pbssBANK0:
  1297                           	opt stack 0
  1298  0000A5                     _chanValChar:
  1299                           	opt stack 0
  1300  0000A5                     	ds	6
  1301  0000AB                     _contra:
  1302                           	opt stack 0
  1303  0000AB                     	ds	4
  1304  0000AF                     _fData:
  1305                           	opt stack 0
  1306  0000AF                     	ds	3
  1307  0000B2                     _i16Data:
  1308                           	opt stack 0
  1309  0000B2                     	ds	2
  1310  0000B4                     _processState:
  1311                           	opt stack 0
  1312  0000B4                     	ds	2
  1313  0000B6                     _holdFC1cont:
  1314                           	opt stack 0
  1315  0000B6                     	ds	1
  1316  0000B7                     _holdFC2cont:
  1317                           	opt stack 0
  1318  0000B7                     	ds	1
  1319  0000B8                     _ie:
  1320                           	opt stack 0
  1321  0000B8                     	ds	1
  1322  0000B9                     _lastSttFC1:
  1323                           	opt stack 0
  1324  0000B9                     	ds	1
  1325  0000BA                     _lastSttFC2:
  1326                           	opt stack 0
  1327  0000BA                     	ds	1
  1328  0000BB                     _processStarted:
  1329                           	opt stack 0
  1330  0000BB                     	ds	1
  1331  0000BC                     _t2Cont1:
  1332                           	opt stack 0
  1333  0000BC                     	ds	1
  1334  0000BD                     _t2Cont2:
  1335                           	opt stack 0
  1336  0000BD                     	ds	1
  1337  0000BE                     _tempLastScreen:
  1338                           	opt stack 0
  1339  0000BE                     	ds	1
  1340                           tblptru	equ	0xFF8
  1341                           tblptrh	equ	0xFF7
  1342                           tblptrl	equ	0xFF6
  1343                           tablat	equ	0xFF5
  1344                           postinc0	equ	0xFEE
  1345                           wreg	equ	0xFE8
  1346                           postdec1	equ	0xFE5
  1347                           fsr1l	equ	0xFE1
  1348                           
  1349                           	psect	dataBANK0
  1350  0000BF                     __pdataBANK0:
  1351                           	opt stack 0
  1352  0000BF                     lcd_init@F7567:
  1353                           	opt stack 0
  1354  0000BF                     	ds	4
  1355  0000C3                     _temptiXcorte:
  1356                           	opt stack 0
  1357  0000C3                     	ds	3
  1358  0000C6                     _numCortes:
  1359                           	opt stack 0
  1360  0000C6                     	ds	2
  1361  0000C8                     _bladeIsUP:
  1362                           	opt stack 0
  1363  0000C8                     	ds	1
  1364                           tblptru	equ	0xFF8
  1365                           tblptrh	equ	0xFF7
  1366                           tblptrl	equ	0xFF6
  1367                           tablat	equ	0xFF5
  1368                           postinc0	equ	0xFEE
  1369                           wreg	equ	0xFE8
  1370                           postdec1	equ	0xFE5
  1371                           fsr1l	equ	0xFE1
  1372                           
  1373                           	psect	bssBANK1
  1374  0001A9                     __pbssBANK1:
  1375                           	opt stack 0
  1376  0001A9                     _chanValdig:
  1377                           	opt stack 0
  1378  0001A9                     	ds	6
  1379  0001AF                     _introducido:
  1380                           	opt stack 0
  1381  0001AF                     	ds	4
  1382  0001B3                     _passChar:
  1383                           	opt stack 0
  1384  0001B3                     	ds	4
  1385  0001B7                     _chanValf:
  1386                           	opt stack 0
  1387  0001B7                     	ds	3
  1388  0001BA                     _chanVals:
  1389                           	opt stack 0
  1390  0001BA                     	ds	2
  1391  0001BC                     _questSN:
  1392                           	opt stack 0
  1393  0001BC                     	ds	2
  1394  0001BE                     _DOWNsecurLock:
  1395                           	opt stack 0
  1396  0001BE                     	ds	1
  1397  0001BF                     _ENTERisLP:
  1398                           	opt stack 0
  1399  0001BF                     	ds	1
  1400  0001C0                     _ENTERsecurLock:
  1401                           	opt stack 0
  1402  0001C0                     	ds	1
  1403  0001C1                     _RETROsecurLock:
  1404                           	opt stack 0
  1405  0001C1                     	ds	1
  1406  0001C2                     _UPsecurLock:
  1407                           	opt stack 0
  1408  0001C2                     	ds	1
  1409  0001C3                     _actualScreen:
  1410                           	opt stack 0
  1411  0001C3                     	ds	1
  1412  0001C4                     _calibLevel:
  1413                           	opt stack 0
  1414  0001C4                     	ds	1
  1415  0001C5                     _fd:
  1416                           	opt stack 0
  1417  0001C5                     	ds	1
  1418  0001C6                     _holdDOWNcont:
  1419                           	opt stack 0
  1420  0001C6                     	ds	1
  1421  0001C7                     _holdENTERcont:
  1422                           	opt stack 0
  1423  0001C7                     	ds	1
  1424  0001C8                     _holdRETROcont:
  1425                           	opt stack 0
  1426  0001C8                     	ds	1
  1427  0001C9                     _holdUPcont:
  1428                           	opt stack 0
  1429  0001C9                     	ds	1
  1430  0001CA                     _menuSection:
  1431                           	opt stack 0
  1432  0001CA                     	ds	1
  1433  0001CB                     _passSection:
  1434                           	opt stack 0
  1435  0001CB                     	ds	1
  1436  0001CC                     _selSN:
  1437                           	opt stack 0
  1438  0001CC                     	ds	1
  1439                           tblptru	equ	0xFF8
  1440                           tblptrh	equ	0xFF7
  1441                           tblptrl	equ	0xFF6
  1442                           tablat	equ	0xFF5
  1443                           postinc0	equ	0xFEE
  1444                           wreg	equ	0xFE8
  1445                           postdec1	equ	0xFE5
  1446                           fsr1l	equ	0xFE1
  1447                           
  1448                           	psect	dataBANK1
  1449  000177                     __pdataBANK1:
  1450                           	opt stack 0
  1451  000177                     _exp10:
  1452                           	opt stack 0
  1453  000177                     	ds	24
  1454  00018F                     _kgXcorte:
  1455                           	opt stack 0
  1456  00018F                     	ds	3
  1457  000192                     _tempVelocidadMasa3:
  1458                           	opt stack 0
  1459  000192                     	ds	3
  1460  000195                     _tiXcorte:
  1461                           	opt stack 0
  1462  000195                     	ds	3
  1463  000198                     _velocidadMasa:
  1464                           	opt stack 0
  1465  000198                     	ds	3
  1466  00019B                     _tempNumCortes:
  1467                           	opt stack 0
  1468  00019B                     	ds	2
  1469  00019D                     _chanValSection:
  1470                           	opt stack 0
  1471  00019D                     	ds	1
  1472  00019E                     _flech:
  1473                           	opt stack 0
  1474  00019E                     	ds	1
  1475  00019F                     _lastSttDOWN:
  1476                           	opt stack 0
  1477  00019F                     	ds	1
  1478  0001A0                     _lastSttENTER:
  1479                           	opt stack 0
  1480  0001A0                     	ds	1
  1481  0001A1                     _lastSttRETRO:
  1482                           	opt stack 0
  1483  0001A1                     	ds	1
  1484  0001A2                     _lastSttUP:
  1485                           	opt stack 0
  1486  0001A2                     	ds	1
  1487  0001A3                     _tempVelocidadMasa1:
  1488                           	opt stack 0
  1489  0001A3                     	ds	3
  1490  0001A6                     _tempVelocidadMasa2:
  1491                           	opt stack 0
  1492  0001A6                     	ds	3
  1493                           tblptru	equ	0xFF8
  1494                           tblptrh	equ	0xFF7
  1495                           tblptrl	equ	0xFF6
  1496                           tablat	equ	0xFF5
  1497                           postinc0	equ	0xFEE
  1498                           wreg	equ	0xFE8
  1499                           postdec1	equ	0xFE5
  1500                           fsr1l	equ	0xFE1
  1501                           
  1502                           	psect	cstackBANK1
  1503  000100                     __pcstackBANK1:
  1504                           	opt stack 0
  1505  000100                     ??_isdigit:
  1506  000100                     ??_lcd_read_4bits:
  1507  000100                     ??_checkPass:
  1508  000100                     ??_chanValDigUP:
  1509  000100                     ??_chanValDigDOWN:
  1510  000100                     ?___awmod:
  1511                           	opt stack 0
  1512  000100                     ?___ftpack:
  1513                           	opt stack 0
  1514  000100                     ?___ftneg:
  1515                           	opt stack 0
  1516  000100                     ?__tdiv_to_l_:
  1517                           	opt stack 0
  1518  000100                     ?__div_to_l_:
  1519                           	opt stack 0
  1520  000100                     ?___lmul:
  1521                           	opt stack 0
  1522  000100                     ?___aldiv:
  1523                           	opt stack 0
  1524  000100                     ?___lldiv:
  1525                           	opt stack 0
  1526  000100                     _lcd_send_4bits$1834:
  1527                           	opt stack 0
  1528  000100                     writeEEPROM@data:
  1529                           	opt stack 0
  1530  000100                     readEEPROM@adr:
  1531                           	opt stack 0
  1532  000100                     setPWM2on@on:
  1533                           	opt stack 0
  1534  000100                     delay_ms@del:
  1535                           	opt stack 0
  1536  000100                     setPWM2duty@actuator:
  1537                           	opt stack 0
  1538  000100                     ___awmod@dividend:
  1539                           	opt stack 0
  1540  000100                     __div_to_l_@f1:
  1541                           	opt stack 0
  1542  000100                     ___ftpack@arg:
  1543                           	opt stack 0
  1544  000100                     __tdiv_to_l_@f1:
  1545                           	opt stack 0
  1546  000100                     ___ftge@ff1:
  1547                           	opt stack 0
  1548  000100                     ___ftneg@f1:
  1549                           	opt stack 0
  1550  000100                     ___lmul@multiplier:
  1551                           	opt stack 0
  1552  000100                     ___aldiv@dividend:
  1553                           	opt stack 0
  1554  000100                     ___lldiv@dividend:
  1555                           	opt stack 0
  1556                           
  1557                           ; 4 bytes @ 0x0
  1558  000100                     	ds	1
  1559  000101                     lcd_read_4bits@n:
  1560                           	opt stack 0
  1561  000101                     _lcd_send_4bits$1835:
  1562                           	opt stack 0
  1563  000101                     writeEEPROM@adr:
  1564                           	opt stack 0
  1565  000101                     _isdigit$2660:
  1566                           	opt stack 0
  1567                           
  1568                           ; 1 bytes @ 0x1
  1569  000101                     	ds	1
  1570  000102                     ??_delay_ms:
  1571  000102                     ??_setPWM2duty:
  1572  000102                     lcd_read_byte@low:
  1573                           	opt stack 0
  1574  000102                     _lcd_send_4bits$1836:
  1575                           	opt stack 0
  1576  000102                     isdigit@c:
  1577                           	opt stack 0
  1578  000102                     ___awmod@divisor:
  1579                           	opt stack 0
  1580                           
  1581                           ; 2 bytes @ 0x2
  1582  000102                     	ds	1
  1583  000103                     lcd_read_byte@high:
  1584                           	opt stack 0
  1585  000103                     _lcd_send_4bits$1837:
  1586                           	opt stack 0
  1587  000103                     ___ftpack@exp:
  1588                           	opt stack 0
  1589  000103                     delay_ms@i:
  1590                           	opt stack 0
  1591  000103                     __div_to_l_@f2:
  1592                           	opt stack 0
  1593  000103                     __tdiv_to_l_@f2:
  1594                           	opt stack 0
  1595  000103                     ___ftge@ff2:
  1596                           	opt stack 0
  1597                           
  1598                           ; 3 bytes @ 0x3
  1599  000103                     	ds	1
  1600  000104                     lcd_send_4bits@n:
  1601                           	opt stack 0
  1602  000104                     checkPass@passOK:
  1603                           	opt stack 0
  1604  000104                     ___awmod@counter:
  1605                           	opt stack 0
  1606  000104                     ___ftpack@sign:
  1607                           	opt stack 0
  1608  000104                     setPWM2duty@act:
  1609                           	opt stack 0
  1610  000104                     ___lmul@multiplicand:
  1611                           	opt stack 0
  1612  000104                     ___aldiv@divisor:
  1613                           	opt stack 0
  1614  000104                     ___lldiv@divisor:
  1615                           	opt stack 0
  1616                           
  1617                           ; 4 bytes @ 0x4
  1618  000104                     	ds	1
  1619  000105                     ??___ftpack:
  1620  000105                     lcd_send_byte@n:
  1621                           	opt stack 0
  1622  000105                     ___awmod@sign:
  1623                           	opt stack 0
  1624  000105                     checkPass@i:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0x5
  1628  000105                     	ds	1
  1629  000106                     ??__tdiv_to_l_:
  1630  000106                     ??_lcd_send_byte:
  1631  000106                     ??___ftge:
  1632  000106                     ?___awdiv:
  1633                           	opt stack 0
  1634  000106                     initProtocoll@init:
  1635                           	opt stack 0
  1636  000106                     ___awdiv@dividend:
  1637                           	opt stack 0
  1638  000106                     __div_to_l_@quot:
  1639                           	opt stack 0
  1640                           
  1641                           ; 4 bytes @ 0x6
  1642  000106                     	ds	1
  1643  000107                     lcd_send_byte@address:
  1644                           	opt stack 0
  1645                           
  1646                           ; 1 bytes @ 0x7
  1647  000107                     	ds	1
  1648  000108                     ??_lcd_init:
  1649  000108                     ?___altoft:
  1650                           	opt stack 0
  1651  000108                     ?___lltoft:
  1652                           	opt stack 0
  1653  000108                     lcd_gotoxy@fila:
  1654                           	opt stack 0
  1655  000108                     ___aldiv@counter:
  1656                           	opt stack 0
  1657  000108                     ___awdiv@divisor:
  1658                           	opt stack 0
  1659  000108                     ___lmul@product:
  1660                           	opt stack 0
  1661  000108                     ___altoft@c:
  1662                           	opt stack 0
  1663  000108                     ___lldiv@quotient:
  1664                           	opt stack 0
  1665  000108                     ___lltoft@c:
  1666                           	opt stack 0
  1667                           
  1668                           ; 4 bytes @ 0x8
  1669  000108                     	ds	1
  1670  000109                     lcd_gotoxy@pos:
  1671                           	opt stack 0
  1672  000109                     ___aldiv@sign:
  1673                           	opt stack 0
  1674  000109                     lcd_init@LCD_INIT_STRING:
  1675                           	opt stack 0
  1676  000109                     __tdiv_to_l_@quot:
  1677                           	opt stack 0
  1678                           
  1679                           ; 4 bytes @ 0x9
  1680  000109                     	ds	1
  1681  00010A                     lcd_gotoxy@address:
  1682                           	opt stack 0
  1683  00010A                     ___awdiv@counter:
  1684                           	opt stack 0
  1685  00010A                     __div_to_l_@cntr:
  1686                           	opt stack 0
  1687  00010A                     ___aldiv@quotient:
  1688                           	opt stack 0
  1689                           
  1690                           ; 4 bytes @ 0xA
  1691  00010A                     	ds	1
  1692  00010B                     ??_lcd_putc:
  1693  00010B                     ___awdiv@sign:
  1694                           	opt stack 0
  1695  00010B                     __div_to_l_@exp1:
  1696                           	opt stack 0
  1697                           
  1698                           ; 1 bytes @ 0xB
  1699  00010B                     	ds	1
  1700  00010C                     ??___altoft:
  1701  00010C                     ??___lltoft:
  1702  00010C                     lcd_putc@cha:
  1703                           	opt stack 0
  1704  00010C                     ___lldiv@counter:
  1705                           	opt stack 0
  1706  00010C                     ___awdiv@quotient:
  1707                           	opt stack 0
  1708                           
  1709                           ; 2 bytes @ 0xC
  1710  00010C                     	ds	1
  1711  00010D                     ?___llmod:
  1712                           	opt stack 0
  1713  00010D                     lcd_init@i:
  1714                           	opt stack 0
  1715  00010D                     putch@val:
  1716                           	opt stack 0
  1717  00010D                     __tdiv_to_l_@cntr:
  1718                           	opt stack 0
  1719  00010D                     ___llmod@dividend:
  1720                           	opt stack 0
  1721                           
  1722                           ; 4 bytes @ 0xD
  1723  00010D                     	ds	1
  1724  00010E                     ?___wmul:
  1725                           	opt stack 0
  1726  00010E                     __tdiv_to_l_@exp1:
  1727                           	opt stack 0
  1728  00010E                     ___wmul@multiplier:
  1729                           	opt stack 0
  1730                           
  1731                           ; 2 bytes @ 0xE
  1732  00010E                     	ds	2
  1733  000110                     ___altoft@exp:
  1734                           	opt stack 0
  1735  000110                     ___lltoft@exp:
  1736                           	opt stack 0
  1737  000110                     ___wmul@multiplicand:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0x10
  1741  000110                     	ds	1
  1742  000111                     ___altoft@sign:
  1743                           	opt stack 0
  1744  000111                     ___llmod@divisor:
  1745                           	opt stack 0
  1746                           
  1747                           ; 4 bytes @ 0x11
  1748  000111                     	ds	1
  1749  000112                     ?___ftdiv:
  1750                           	opt stack 0
  1751  000112                     ___wmul@product:
  1752                           	opt stack 0
  1753  000112                     ___ftdiv@f1:
  1754                           	opt stack 0
  1755                           
  1756                           ; 3 bytes @ 0x12
  1757  000112                     	ds	2
  1758  000114                     ?___ftmul:
  1759                           	opt stack 0
  1760  000114                     ___ftmul@f1:
  1761                           	opt stack 0
  1762                           
  1763                           ; 3 bytes @ 0x14
  1764  000114                     	ds	1
  1765  000115                     ___llmod@counter:
  1766                           	opt stack 0
  1767  000115                     ___ftdiv@f2:
  1768                           	opt stack 0
  1769                           
  1770                           ; 3 bytes @ 0x15
  1771  000115                     	ds	2
  1772  000117                     ___ftmul@f2:
  1773                           	opt stack 0
  1774                           
  1775                           ; 3 bytes @ 0x17
  1776  000117                     	ds	1
  1777  000118                     ??___ftdiv:
  1778                           
  1779                           ; 1 bytes @ 0x18
  1780  000118                     	ds	2
  1781  00011A                     ??___ftmul:
  1782                           
  1783                           ; 1 bytes @ 0x1A
  1784  00011A                     	ds	1
  1785  00011B                     ___ftdiv@cntr:
  1786                           	opt stack 0
  1787                           
  1788                           ; 1 bytes @ 0x1B
  1789  00011B                     	ds	1
  1790  00011C                     ___ftdiv@f3:
  1791                           	opt stack 0
  1792                           
  1793                           ; 3 bytes @ 0x1C
  1794  00011C                     	ds	1
  1795  00011D                     ___ftmul@exp:
  1796                           	opt stack 0
  1797                           
  1798                           ; 1 bytes @ 0x1D
  1799  00011D                     	ds	1
  1800  00011E                     ___ftmul@f3_as_product:
  1801                           	opt stack 0
  1802                           
  1803                           ; 3 bytes @ 0x1E
  1804  00011E                     	ds	1
  1805  00011F                     ___ftdiv@exp:
  1806                           	opt stack 0
  1807                           
  1808                           ; 1 bytes @ 0x1F
  1809  00011F                     	ds	1
  1810  000120                     ___ftdiv@sign:
  1811                           	opt stack 0
  1812                           
  1813                           ; 1 bytes @ 0x20
  1814  000120                     	ds	1
  1815  000121                     ??_integrator:
  1816  000121                     ___ftmul@cntr:
  1817                           	opt stack 0
  1818                           
  1819                           ; 1 bytes @ 0x21
  1820  000121                     	ds	1
  1821  000122                     ___ftmul@sign:
  1822                           	opt stack 0
  1823                           
  1824                           ; 1 bytes @ 0x22
  1825  000122                     	ds	1
  1826  000123                     ?_fround:
  1827                           	opt stack 0
  1828  000123                     ?_scale:
  1829                           	opt stack 0
  1830  000123                     confirmEdition@yes:
  1831                           	opt stack 0
  1832  000123                     calcSysVars@temp:
  1833                           	opt stack 0
  1834  000123                     integrator@acum:
  1835                           	opt stack 0
  1836                           
  1837                           ; 4 bytes @ 0x23
  1838  000123                     	ds	3
  1839  000126                     ??_sysParamInit:
  1840  000126                     _fround$3165:
  1841                           	opt stack 0
  1842  000126                     _scale$3166:
  1843                           	opt stack 0
  1844                           
  1845                           ; 3 bytes @ 0x26
  1846  000126                     	ds	1
  1847  000127                     integrator@temp:
  1848                           	opt stack 0
  1849                           
  1850                           ; 4 bytes @ 0x27
  1851  000127                     	ds	2
  1852  000129                     scale@scl:
  1853                           	opt stack 0
  1854  000129                     _fround$3164:
  1855                           	opt stack 0
  1856                           
  1857                           ; 3 bytes @ 0x29
  1858  000129                     	ds	1
  1859  00012A                     ?___fttol:
  1860                           	opt stack 0
  1861  00012A                     ___fttol@f1:
  1862                           	opt stack 0
  1863                           
  1864                           ; 3 bytes @ 0x2A
  1865  00012A                     	ds	1
  1866  00012B                     integrator@i:
  1867                           	opt stack 0
  1868                           
  1869                           ; 2 bytes @ 0x2B
  1870  00012B                     	ds	1
  1871  00012C                     fround@prec:
  1872                           	opt stack 0
  1873                           
  1874                           ; 1 bytes @ 0x2C
  1875  00012C                     	ds	1
  1876  00012D                     ?___ftadd:
  1877                           	opt stack 0
  1878  00012D                     ___ftadd@f1:
  1879                           	opt stack 0
  1880                           
  1881                           ; 3 bytes @ 0x2D
  1882  00012D                     	ds	1
  1883  00012E                     ??___fttol:
  1884                           
  1885                           ; 1 bytes @ 0x2E
  1886  00012E                     	ds	2
  1887  000130                     ___ftadd@f2:
  1888                           	opt stack 0
  1889                           
  1890                           ; 3 bytes @ 0x30
  1891  000130                     	ds	3
  1892  000133                     ??___ftadd:
  1893  000133                     ___fttol@sign1:
  1894                           	opt stack 0
  1895                           
  1896                           ; 1 bytes @ 0x33
  1897  000133                     	ds	1
  1898  000134                     ___fttol@lval:
  1899                           	opt stack 0
  1900                           
  1901                           ; 4 bytes @ 0x34
  1902  000134                     	ds	2
  1903  000136                     ___ftadd@sign:
  1904                           	opt stack 0
  1905                           
  1906                           ; 1 bytes @ 0x36
  1907  000136                     	ds	1
  1908  000137                     ___ftadd@exp2:
  1909                           	opt stack 0
  1910                           
  1911                           ; 1 bytes @ 0x37
  1912  000137                     	ds	1
  1913  000138                     ___ftadd@exp1:
  1914                           	opt stack 0
  1915  000138                     ___fttol@exp1:
  1916                           	opt stack 0
  1917                           
  1918                           ; 1 bytes @ 0x38
  1919  000138                     	ds	1
  1920  000139                     ??_desintegrator:
  1921  000139                     ?___ftsub:
  1922                           	opt stack 0
  1923  000139                     longPressENTER@temp:
  1924                           	opt stack 0
  1925  000139                     ___ftsub@f1:
  1926                           	opt stack 0
  1927                           
  1928                           ; 3 bytes @ 0x39
  1929  000139                     	ds	2
  1930  00013B                     desintegrator@temp:
  1931                           	opt stack 0
  1932                           
  1933                           ; 3 bytes @ 0x3B
  1934  00013B                     	ds	1
  1935  00013C                     ___ftsub@f2:
  1936                           	opt stack 0
  1937  00013C                     _longPressENTER$3163:
  1938                           	opt stack 0
  1939                           
  1940                           ; 3 bytes @ 0x3C
  1941  00013C                     	ds	2
  1942  00013E                     desintegrator@tempL:
  1943                           	opt stack 0
  1944                           
  1945                           ; 4 bytes @ 0x3E
  1946  00013E                     	ds	1
  1947  00013F                     ?_printf:
  1948                           	opt stack 0
  1949  00013F                     printf@f:
  1950                           	opt stack 0
  1951                           
  1952                           ; 2 bytes @ 0x3F
  1953  00013F                     	ds	3
  1954  000142                     desintegrator@temp3:
  1955                           	opt stack 0
  1956                           
  1957                           ; 4 bytes @ 0x42
  1958  000142                     	ds	4
  1959  000146                     desintegrator@temp2:
  1960                           	opt stack 0
  1961                           
  1962                           ; 4 bytes @ 0x46
  1963  000146                     	ds	4
  1964  00014A                     desintegrator@i:
  1965                           	opt stack 0
  1966                           
  1967                           ; 2 bytes @ 0x4A
  1968  00014A                     	ds	2
  1969  00014C                     
  1970                           ; 1 bytes @ 0x4C
  1971  00014C                     	ds	5
  1972  000151                     ??_printf:
  1973                           
  1974                           ; 1 bytes @ 0x51
  1975  000151                     	ds	6
  1976  000157                     _printf$3167:
  1977                           	opt stack 0
  1978                           
  1979                           ; 3 bytes @ 0x57
  1980  000157                     	ds	3
  1981  00015A                     printf@cp:
  1982                           	opt stack 0
  1983                           
  1984                           ; 2 bytes @ 0x5A
  1985  00015A                     	ds	2
  1986  00015C                     printf@len:
  1987                           	opt stack 0
  1988                           
  1989                           ; 2 bytes @ 0x5C
  1990  00015C                     	ds	2
  1991  00015E                     printf@ap:
  1992                           	opt stack 0
  1993                           
  1994                           ; 2 bytes @ 0x5E
  1995  00015E                     	ds	2
  1996  000160                     printf@flag:
  1997                           	opt stack 0
  1998                           
  1999                           ; 2 bytes @ 0x60
  2000  000160                     	ds	2
  2001  000162                     printf@tmpval:
  2002                           	opt stack 0
  2003                           
  2004                           ; 4 bytes @ 0x62
  2005  000162                     	ds	4
  2006  000166                     printf@val:
  2007                           	opt stack 0
  2008                           
  2009                           ; 4 bytes @ 0x66
  2010  000166                     	ds	4
  2011  00016A                     printf@exp:
  2012                           	opt stack 0
  2013                           
  2014                           ; 2 bytes @ 0x6A
  2015  00016A                     	ds	2
  2016  00016C                     printf@width:
  2017                           	opt stack 0
  2018                           
  2019                           ; 2 bytes @ 0x6C
  2020  00016C                     	ds	2
  2021  00016E                     printf@fval:
  2022                           	opt stack 0
  2023                           
  2024                           ; 3 bytes @ 0x6E
  2025  00016E                     	ds	3
  2026  000171                     printf@prec:
  2027                           	opt stack 0
  2028                           
  2029                           ; 2 bytes @ 0x71
  2030  000171                     	ds	2
  2031  000173                     printf@c:
  2032                           	opt stack 0
  2033                           
  2034                           ; 1 bytes @ 0x73
  2035  000173                     	ds	1
  2036  000174                     drawMenu@adv:
  2037                           	opt stack 0
  2038  000174                     drawAdvON@on:
  2039                           	opt stack 0
  2040  000174                     drawPassWord@i:
  2041                           	opt stack 0
  2042  000174                     drawSNquest@i:
  2043                           	opt stack 0
  2044                           
  2045                           ; 2 bytes @ 0x74
  2046  000174                     	ds	2
  2047  000176                     drawSNquest@tq:
  2048                           	opt stack 0
  2049                           
  2050                           ; 1 bytes @ 0x76
  2051  000176                     	ds	1
  2052  000177                     tblptru	equ	0xFF8
  2053                           tblptrh	equ	0xFF7
  2054                           tblptrl	equ	0xFF6
  2055                           tablat	equ	0xFF5
  2056                           postinc0	equ	0xFEE
  2057                           wreg	equ	0xFE8
  2058                           postdec1	equ	0xFE5
  2059                           fsr1l	equ	0xFE1
  2060                           
  2061                           ; 1 bytes @ 0x77
  2062                           
  2063                           	psect	cstackBANK0
  2064  000060                     __pcstackBANK0:
  2065                           	opt stack 0
  2066  000060                     ??i1_checkPass:
  2067  000060                     ??i1_chanValDigUP:
  2068  000060                     ??i1_chanValDigDOWN:
  2069  000060                     ?i1___ftpack:
  2070                           	opt stack 0
  2071  000060                     ?i1___lmul:
  2072                           	opt stack 0
  2073  000060                     ?i1___aldiv:
  2074                           	opt stack 0
  2075  000060                     ?i1___fttol:
  2076                           	opt stack 0
  2077  000060                     putchUART@val:
  2078                           	opt stack 0
  2079  000060                     i1writeEEPROM@data:
  2080                           	opt stack 0
  2081  000060                     i1readEEPROM@adr:
  2082                           	opt stack 0
  2083  000060                     i1setPWM2duty@actuator:
  2084                           	opt stack 0
  2085  000060                     i1___ftpack@arg:
  2086                           	opt stack 0
  2087  000060                     i1___fttol@f1:
  2088                           	opt stack 0
  2089  000060                     i1___lmul@multiplier:
  2090                           	opt stack 0
  2091  000060                     i1___aldiv@dividend:
  2092                           	opt stack 0
  2093                           
  2094                           ; 4 bytes @ 0x0
  2095  000060                     	ds	1
  2096  000061                     i1writeEEPROM@adr:
  2097                           	opt stack 0
  2098                           
  2099                           ; 1 bytes @ 0x1
  2100  000061                     	ds	1
  2101  000062                     ??i1_setPWM2duty:
  2102                           
  2103                           ; 1 bytes @ 0x2
  2104  000062                     	ds	1
  2105  000063                     i1___ftpack@exp:
  2106                           	opt stack 0
  2107                           
  2108                           ; 1 bytes @ 0x3
  2109  000063                     	ds	1
  2110  000064                     ??i1___fttol:
  2111  000064                     i1checkPass@passOK:
  2112                           	opt stack 0
  2113  000064                     i1___ftpack@sign:
  2114                           	opt stack 0
  2115  000064                     i1setPWM2duty@act:
  2116                           	opt stack 0
  2117  000064                     i1___lmul@multiplicand:
  2118                           	opt stack 0
  2119  000064                     i1___aldiv@divisor:
  2120                           	opt stack 0
  2121                           
  2122                           ; 4 bytes @ 0x4
  2123  000064                     	ds	1
  2124  000065                     ??i1___ftpack:
  2125  000065                     i1checkPass@i:
  2126                           	opt stack 0
  2127                           
  2128                           ; 2 bytes @ 0x5
  2129  000065                     	ds	1
  2130  000066                     ??_T2int:
  2131  000066                     i1initProtocoll@init:
  2132                           	opt stack 0
  2133                           
  2134                           ; 1 bytes @ 0x6
  2135  000066                     	ds	1
  2136  000067                     
  2137                           ; 1 bytes @ 0x7
  2138  000067                     	ds	1
  2139  000068                     ?i1___altoft:
  2140                           	opt stack 0
  2141  000068                     ?i1___ftadd:
  2142                           	opt stack 0
  2143  000068                     ?i1___ftmul:
  2144                           	opt stack 0
  2145  000068                     i1___aldiv@counter:
  2146                           	opt stack 0
  2147  000068                     i1___ftadd@f1:
  2148                           	opt stack 0
  2149  000068                     i1___ftmul@f1:
  2150                           	opt stack 0
  2151  000068                     i1___lmul@product:
  2152                           	opt stack 0
  2153  000068                     i1___altoft@c:
  2154                           	opt stack 0
  2155                           
  2156                           ; 4 bytes @ 0x8
  2157  000068                     	ds	1
  2158  000069                     i1___aldiv@sign:
  2159                           	opt stack 0
  2160  000069                     i1___fttol@sign1:
  2161                           	opt stack 0
  2162                           
  2163                           ; 1 bytes @ 0x9
  2164  000069                     	ds	1
  2165  00006A                     i1___aldiv@quotient:
  2166                           	opt stack 0
  2167  00006A                     i1___fttol@lval:
  2168                           	opt stack 0
  2169                           
  2170                           ; 4 bytes @ 0xA
  2171  00006A                     	ds	1
  2172  00006B                     i1___ftadd@f2:
  2173                           	opt stack 0
  2174  00006B                     i1___ftmul@f2:
  2175                           	opt stack 0
  2176                           
  2177                           ; 3 bytes @ 0xB
  2178  00006B                     	ds	1
  2179  00006C                     ??i1___altoft:
  2180                           
  2181                           ; 1 bytes @ 0xC
  2182  00006C                     	ds	2
  2183  00006E                     ??i1___ftadd:
  2184  00006E                     ??i1___ftmul:
  2185  00006E                     i1___fttol@exp1:
  2186                           	opt stack 0
  2187                           
  2188                           ; 1 bytes @ 0xE
  2189  00006E                     	ds	2
  2190  000070                     i1___altoft@exp:
  2191                           	opt stack 0
  2192                           
  2193                           ; 1 bytes @ 0x10
  2194  000070                     	ds	1
  2195  000071                     i1___altoft@sign:
  2196                           	opt stack 0
  2197  000071                     i1___ftadd@sign:
  2198                           	opt stack 0
  2199  000071                     i1___ftmul@exp:
  2200                           	opt stack 0
  2201                           
  2202                           ; 1 bytes @ 0x11
  2203  000071                     	ds	1
  2204  000072                     ?i1___ftdiv:
  2205                           	opt stack 0
  2206  000072                     i1___ftadd@exp2:
  2207                           	opt stack 0
  2208  000072                     i1___ftdiv@f1:
  2209                           	opt stack 0
  2210  000072                     i1___ftmul@f3_as_product:
  2211                           	opt stack 0
  2212                           
  2213                           ; 3 bytes @ 0x12
  2214  000072                     	ds	1
  2215  000073                     i1___ftadd@exp1:
  2216                           	opt stack 0
  2217                           
  2218                           ; 1 bytes @ 0x13
  2219  000073                     	ds	2
  2220  000075                     i1___ftmul@cntr:
  2221                           	opt stack 0
  2222  000075                     i1___ftdiv@f2:
  2223                           	opt stack 0
  2224                           
  2225                           ; 3 bytes @ 0x15
  2226  000075                     	ds	1
  2227  000076                     i1___ftmul@sign:
  2228                           	opt stack 0
  2229                           
  2230                           ; 1 bytes @ 0x16
  2231  000076                     	ds	1
  2232  000077                     ??i1_desintegrator:
  2233  000077                     i1calcSysVars@temp:
  2234                           	opt stack 0
  2235                           
  2236                           ; 3 bytes @ 0x17
  2237  000077                     	ds	1
  2238  000078                     ??i1___ftdiv:
  2239                           
  2240                           ; 1 bytes @ 0x18
  2241  000078                     	ds	1
  2242  000079                     i1desintegrator@temp:
  2243                           	opt stack 0
  2244                           
  2245                           ; 3 bytes @ 0x19
  2246  000079                     	ds	1
  2247  00007A                     ??i1_sysParamInit:
  2248                           
  2249                           ; 1 bytes @ 0x1A
  2250  00007A                     	ds	1
  2251  00007B                     i1___ftdiv@cntr:
  2252                           	opt stack 0
  2253                           
  2254                           ; 1 bytes @ 0x1B
  2255  00007B                     	ds	1
  2256  00007C                     i1___ftdiv@f3:
  2257                           	opt stack 0
  2258  00007C                     i1desintegrator@tempL:
  2259                           	opt stack 0
  2260                           
  2261                           ; 4 bytes @ 0x1C
  2262  00007C                     	ds	3
  2263  00007F                     i1___ftdiv@exp:
  2264                           	opt stack 0
  2265                           
  2266                           ; 1 bytes @ 0x1F
  2267  00007F                     	ds	1
  2268  000080                     i1___ftdiv@sign:
  2269                           	opt stack 0
  2270  000080                     i1desintegrator@temp3:
  2271                           	opt stack 0
  2272                           
  2273                           ; 4 bytes @ 0x20
  2274  000080                     	ds	1
  2275  000081                     ??i1_integrator:
  2276  000081                     i1confirmEdition@yes:
  2277                           	opt stack 0
  2278                           
  2279                           ; 1 bytes @ 0x21
  2280  000081                     	ds	2
  2281  000083                     i1integrator@acum:
  2282                           	opt stack 0
  2283                           
  2284                           ; 4 bytes @ 0x23
  2285  000083                     	ds	1
  2286  000084                     i1desintegrator@temp2:
  2287                           	opt stack 0
  2288                           
  2289                           ; 4 bytes @ 0x24
  2290  000084                     	ds	3
  2291  000087                     i1integrator@temp:
  2292                           	opt stack 0
  2293                           
  2294                           ; 4 bytes @ 0x27
  2295  000087                     	ds	1
  2296  000088                     i1desintegrator@i:
  2297                           	opt stack 0
  2298                           
  2299                           ; 2 bytes @ 0x28
  2300  000088                     	ds	2
  2301  00008A                     
  2302                           ; 1 bytes @ 0x2A
  2303  00008A                     	ds	1
  2304  00008B                     i1integrator@i:
  2305                           	opt stack 0
  2306                           
  2307                           ; 2 bytes @ 0x2B
  2308  00008B                     	ds	2
  2309  00008D                     i1longPressENTER@temp:
  2310                           	opt stack 0
  2311                           
  2312                           ; 3 bytes @ 0x2D
  2313  00008D                     	ds	3
  2314  000090                     i1_longPressENTER$3382:
  2315                           	opt stack 0
  2316                           
  2317                           ; 3 bytes @ 0x30
  2318  000090                     	ds	3
  2319  000093                     UARTint@sas:
  2320                           	opt stack 0
  2321                           
  2322                           ; 1 bytes @ 0x33
  2323  000093                     	ds	1
  2324  000094                     ??_isr:
  2325                           
  2326                           ; 1 bytes @ 0x34
  2327  000094                     	ds	17
  2328                           tblptru	equ	0xFF8
  2329                           tblptrh	equ	0xFF7
  2330                           tblptrl	equ	0xFF6
  2331                           tablat	equ	0xFF5
  2332                           postinc0	equ	0xFEE
  2333                           wreg	equ	0xFE8
  2334                           postdec1	equ	0xFE5
  2335                           fsr1l	equ	0xFE1
  2336                           
  2337                           	psect	cstackCOMRAM
  2338  000001                     __pcstackCOMRAM:
  2339                           	opt stack 0
  2340  000001                     ?i2___ftpack:
  2341                           	opt stack 0
  2342  000001                     i2setPWM2duty@actuator:
  2343                           	opt stack 0
  2344  000001                     i2___ftpack@arg:
  2345                           	opt stack 0
  2346                           
  2347                           ; 3 bytes @ 0x0
  2348  000001                     	ds	2
  2349  000003                     ??i2_setPWM2duty:
  2350                           
  2351                           ; 1 bytes @ 0x2
  2352  000003                     	ds	1
  2353  000004                     i2___ftpack@exp:
  2354                           	opt stack 0
  2355                           
  2356                           ; 1 bytes @ 0x3
  2357  000004                     	ds	1
  2358  000005                     i2___ftpack@sign:
  2359                           	opt stack 0
  2360  000005                     i2setPWM2duty@act:
  2361                           	opt stack 0
  2362                           
  2363                           ; 2 bytes @ 0x4
  2364  000005                     	ds	1
  2365  000006                     ??i2___ftpack:
  2366                           
  2367                           ; 1 bytes @ 0x5
  2368  000006                     	ds	3
  2369  000009                     ?i2___altoft:
  2370                           	opt stack 0
  2371  000009                     i2___altoft@c:
  2372                           	opt stack 0
  2373                           
  2374                           ; 4 bytes @ 0x8
  2375  000009                     	ds	4
  2376  00000D                     ??i2___altoft:
  2377                           
  2378                           ; 1 bytes @ 0xC
  2379  00000D                     	ds	4
  2380  000011                     i2___altoft@exp:
  2381                           	opt stack 0
  2382                           
  2383                           ; 1 bytes @ 0x10
  2384  000011                     	ds	1
  2385  000012                     i2___altoft@sign:
  2386                           	opt stack 0
  2387                           
  2388                           ; 1 bytes @ 0x11
  2389  000012                     	ds	1
  2390  000013                     ?i2___ftadd:
  2391                           	opt stack 0
  2392  000013                     i2___ftadd@f1:
  2393                           	opt stack 0
  2394                           
  2395                           ; 3 bytes @ 0x12
  2396  000013                     	ds	3
  2397  000016                     i2___ftadd@f2:
  2398                           	opt stack 0
  2399                           
  2400                           ; 3 bytes @ 0x15
  2401  000016                     	ds	3
  2402  000019                     ??i2___ftadd:
  2403                           
  2404                           ; 1 bytes @ 0x18
  2405  000019                     	ds	3
  2406  00001C                     i2___ftadd@sign:
  2407                           	opt stack 0
  2408                           
  2409                           ; 1 bytes @ 0x1B
  2410  00001C                     	ds	1
  2411  00001D                     i2___ftadd@exp2:
  2412                           	opt stack 0
  2413                           
  2414                           ; 1 bytes @ 0x1C
  2415  00001D                     	ds	1
  2416  00001E                     i2___ftadd@exp1:
  2417                           	opt stack 0
  2418                           
  2419                           ; 1 bytes @ 0x1D
  2420  00001E                     	ds	1
  2421  00001F                     i2___ftge@ff1:
  2422                           	opt stack 0
  2423                           
  2424                           ; 3 bytes @ 0x1E
  2425  00001F                     	ds	3
  2426  000022                     i2___ftge@ff2:
  2427                           	opt stack 0
  2428                           
  2429                           ; 3 bytes @ 0x21
  2430  000022                     	ds	3
  2431  000025                     ??i2___ftge:
  2432                           
  2433                           ; 1 bytes @ 0x24
  2434  000025                     	ds	3
  2435  000028                     ??_T4int:
  2436                           
  2437                           ; 1 bytes @ 0x27
  2438  000028                     	ds	1
  2439  000029                     ??_hp_isr:
  2440                           
  2441                           ; 1 bytes @ 0x28
  2442  000029                     	ds	14
  2443                           tblptru	equ	0xFF8
  2444                           tblptrh	equ	0xFF7
  2445                           tblptrl	equ	0xFF6
  2446                           tablat	equ	0xFF5
  2447                           postinc0	equ	0xFEE
  2448                           wreg	equ	0xFE8
  2449                           postdec1	equ	0xFE5
  2450                           fsr1l	equ	0xFE1
  2451                           
  2452 ;;
  2453 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2454 ;;
  2455 ;; *************** function _main *****************
  2456 ;; Defined at:
  2457 ;;		line 32 in file "source/main.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;		None
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;		None
  2462 ;; Return value:  Size  Location     Type
  2463 ;;                  1    wreg      void 
  2464 ;; Registers used:
  2465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2471 ;;      Params:         0       0       0       0       0       0       0
  2472 ;;      Locals:         0       0       0       0       0       0       0
  2473 ;;      Temps:          0       0       0       0       0       0       0
  2474 ;;      Totals:         0       0       0       0       0       0       0
  2475 ;;Total ram usage:        0 bytes
  2476 ;; Hardware stack levels required when called:   22
  2477 ;; This function calls:
  2478 ;;		_EEPROMConfig
  2479 ;;		_PWM2Config
  2480 ;;		_UARTConfig
  2481 ;;		_buttonChecking
  2482 ;;		_clockConfig
  2483 ;;		_drawScreen
  2484 ;;		_interruptConfig
  2485 ;;		_ioConfig
  2486 ;;		_ioInitStt
  2487 ;;		_lcd_init
  2488 ;;		_setPWM2duty
  2489 ;;		_setPWM2on
  2490 ;;		_sysParamInit
  2491 ;;		_t4config
  2492 ;; This function is called by:
  2493 ;;		Startup code after reset
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496                           
  2497                           	psect	text0
  2498  006712                     __ptext0:
  2499                           	opt stack 0
  2500  006712                     _main:
  2501                           	opt stack 9
  2502                           
  2503                           ;main.c: 34: clockConfig();
  2504                           
  2505                           ; BSR set to: 1
  2506                           ;incstack = 0
  2507  006712  EC03  F036         	call	_clockConfig	;wreg free
  2508                           
  2509                           ;main.c: 35: t4config();
  2510  006716  ECAF  F035         	call	_t4config	;wreg free
  2511                           
  2512                           ;main.c: 36: ioInitStt();
  2513  00671A  ECB4  F036         	call	_ioInitStt	;wreg free
  2514                           
  2515                           ;main.c: 37: EEPROMConfig();
  2516  00671E  ECBC  F036         	call	_EEPROMConfig	;wreg free
  2517                           
  2518                           ;main.c: 39: sysParamInit();
  2519  006722  ECFE  F02A         	call	_sysParamInit	;wreg free
  2520                           
  2521                           ;main.c: 40: ioConfig();
  2522  006726  EC1F  F035         	call	_ioConfig	;wreg free
  2523                           
  2524                           ;main.c: 41: lcd_init();
  2525  00672A  EC5C  F02A         	call	_lcd_init	;wreg free
  2526                           
  2527                           ;main.c: 42: PWM2Config();
  2528  00672E  EC57  F032         	call	_PWM2Config	;wreg free
  2529                           
  2530                           ;main.c: 43: UARTConfig();
  2531  006732  ECB3  F034         	call	_UARTConfig	;wreg free
  2532                           
  2533                           ;main.c: 44: interruptConfig();
  2534  006736  ECB8  F036         	call	_interruptConfig	;wreg free
  2535  00673A  0004               	clrwdt		;# 
  2536                           
  2537                           ;main.c: 46: WDTCONbits.SWDTEN = 1;
  2538  00673C  80D1               	bsf	4049,0,c	;volatile
  2539                           
  2540                           ;main.c: 47: setPWM2duty(-400);
  2541  00673E  0EFE               	movlw	254
  2542  006740  0101               	movlb	1	; () banked
  2543  006742  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
  2544  006744  0E70               	movlw	112
  2545  006746  6F00               	movwf	setPWM2duty@actuator& (0+255),b
  2546  006748  EC87  F02C         	call	_setPWM2duty	;wreg free
  2547                           
  2548                           ;main.c: 48: setPWM2on(1);
  2549  00674C  0E01               	movlw	1
  2550  00674E  EC45  F036         	call	_setPWM2on
  2551  006752                     l11411:
  2552                           
  2553                           ;main.c: 51: drawScreen();
  2554  006752  EC7E  F027         	call	_drawScreen	;wreg free
  2555                           
  2556                           ;main.c: 52: buttonChecking();
  2557  006756  EC3D  F00A         	call	_buttonChecking	;wreg free
  2558  00675A  D7FB               	goto	l11411
  2559  00675C                     __end_of_main:
  2560                           	opt stack 0
  2561                           tblptru	equ	0xFF8
  2562                           tblptrh	equ	0xFF7
  2563                           tblptrl	equ	0xFF6
  2564                           tablat	equ	0xFF5
  2565                           postinc0	equ	0xFEE
  2566                           wreg	equ	0xFE8
  2567                           postdec1	equ	0xFE5
  2568                           fsr1l	equ	0xFE1
  2569                           
  2570 ;; *************** function _t4config *****************
  2571 ;; Defined at:
  2572 ;;		line 49 in file "source/T4Config.h"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;		None
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;		None
  2577 ;; Return value:  Size  Location     Type
  2578 ;;                  1    wreg      void 
  2579 ;; Registers used:
  2580 ;;		wreg, status,2
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 0/0
  2584 ;;		Unchanged: 0/0
  2585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2586 ;;      Params:         0       0       0       0       0       0       0
  2587 ;;      Locals:         0       0       0       0       0       0       0
  2588 ;;      Temps:          0       0       0       0       0       0       0
  2589 ;;      Totals:         0       0       0       0       0       0       0
  2590 ;;Total ram usage:        0 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:   12
  2593 ;; This function calls:
  2594 ;;		Nothing
  2595 ;; This function is called by:
  2596 ;;		_main
  2597 ;; This function uses a non-reentrant model
  2598 ;;
  2599                           
  2600                           	psect	text1
  2601  006B5E                     __ptext1:
  2602                           	opt stack 0
  2603  006B5E                     _t4config:
  2604                           	opt stack 18
  2605                           
  2606                           ;T4Config.h: 50: T4CONbits.TMR4ON = 0;
  2607                           
  2608                           ;incstack = 0
  2609  006B5E  010F               	movlb	15	; () banked
  2610  006B60  9551               	bcf	81,2,b	;volatile
  2611                           
  2612                           ; BSR set to: 15
  2613                           ;T4Config.h: 51: T4CONbits.T4CKPS = 0b01;
  2614  006B62  010F               	movlb	15	; () banked
  2615  006B64  5151               	movf	81,w,b	;volatile
  2616  006B66  0BFC               	andlw	-4
  2617  006B68  0901               	iorlw	1
  2618  006B6A  6F51               	movwf	81,b	;volatile
  2619                           
  2620                           ;T4Config.h: 52: T4CONbits.T4OUTPS = 0b0100;
  2621  006B6C  010F               	movlb	15	; () banked
  2622  006B6E  5151               	movf	81,w,b	;volatile
  2623  006B70  0B87               	andlw	-121
  2624  006B72  0920               	iorlw	32
  2625  006B74  6F51               	movwf	81,b	;volatile
  2626                           
  2627                           ;T4Config.h: 53: PR4 = 199;
  2628  006B76  0EC7               	movlw	199
  2629  006B78  010F               	movlb	15	; () banked
  2630  006B7A  6F52               	movwf	82,b	;volatile
  2631                           
  2632                           ; BSR set to: 15
  2633                           ;T4Config.h: 54: PIR5bits.TMR4IF = 0;
  2634  006B7C  907E               	bcf	3966,0,c	;volatile
  2635                           
  2636                           ; BSR set to: 15
  2637                           ;T4Config.h: 55: IPR5bits.TMR4IP = 1;
  2638  006B7E  807F               	bsf	3967,0,c	;volatile
  2639                           
  2640                           ; BSR set to: 15
  2641                           ;T4Config.h: 56: PIE5bits.TMR4IE = 1;
  2642  006B80  807D               	bsf	3965,0,c	;volatile
  2643                           
  2644                           ; BSR set to: 15
  2645                           ;T4Config.h: 57: T4CONbits.TMR4ON = 1;
  2646  006B82  010F               	movlb	15	; () banked
  2647  006B84  8551               	bsf	81,2,b	;volatile
  2648                           
  2649                           ; BSR set to: 15
  2650  006B86  0012               	return		;funcret
  2651  006B88                     __end_of_t4config:
  2652                           	opt stack 0
  2653                           tblptru	equ	0xFF8
  2654                           tblptrh	equ	0xFF7
  2655                           tblptrl	equ	0xFF6
  2656                           tablat	equ	0xFF5
  2657                           postinc0	equ	0xFEE
  2658                           wreg	equ	0xFE8
  2659                           postdec1	equ	0xFE5
  2660                           fsr1l	equ	0xFE1
  2661                           
  2662 ;; *************** function _sysParamInit *****************
  2663 ;; Defined at:
  2664 ;;		line 166 in file "source/sysParams.h"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;		None
  2667 ;; Auto vars:     Size  Location     Type
  2668 ;;		None
  2669 ;; Return value:  Size  Location     Type
  2670 ;;                  1    wreg      void 
  2671 ;; Registers used:
  2672 ;;		wreg, status,2, status,0, cstack
  2673 ;; Tracked objects:
  2674 ;;		On entry : 0/0
  2675 ;;		On exit  : 0/0
  2676 ;;		Unchanged: 0/0
  2677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2678 ;;      Params:         0       0       0       0       0       0       0
  2679 ;;      Locals:         0       0       0       0       0       0       0
  2680 ;;      Temps:          0       0       1       0       0       0       0
  2681 ;;      Totals:         0       0       1       0       0       0       0
  2682 ;;Total ram usage:        1 bytes
  2683 ;; Hardware stack levels used:    1
  2684 ;; Hardware stack levels required when called:   15
  2685 ;; This function calls:
  2686 ;;		_calcSysVars
  2687 ;;		_readEEPROM
  2688 ;; This function is called by:
  2689 ;;		_main
  2690 ;; This function uses a non-reentrant model
  2691 ;;
  2692                           
  2693                           	psect	text2
  2694  0055FC                     __ptext2:
  2695                           	opt stack 0
  2696  0055FC                     _sysParamInit:
  2697                           	opt stack 15
  2698                           
  2699                           ;sysParams.h: 169: fData.floatUB = readEEPROM(3);
  2700                           
  2701                           ; BSR set to: 15
  2702                           ;incstack = 0
  2703  0055FC  0E03               	movlw	3
  2704  0055FE  EC5E  F036         	call	_readEEPROM
  2705  005602  0100               	movlb	0	; () banked
  2706  005604  6FB1               	movwf	(_fData+2)& (0+255),b
  2707                           
  2708                           ;sysParams.h: 170: fData.floatHB = readEEPROM(4);
  2709  005606  0E04               	movlw	4
  2710  005608  EC5E  F036         	call	_readEEPROM
  2711  00560C  0100               	movlb	0	; () banked
  2712  00560E  6FB0               	movwf	(_fData+1)& (0+255),b
  2713                           
  2714                           ;sysParams.h: 171: fData.floatLB = readEEPROM(5);
  2715  005610  0E05               	movlw	5
  2716  005612  EC5E  F036         	call	_readEEPROM
  2717  005616  0100               	movlb	0	; () banked
  2718  005618  6FAF               	movwf	_fData& (0+255),b
  2719                           
  2720                           ; BSR set to: 0
  2721                           ;sysParams.h: 172: tiXcorte = fData.floatdat;
  2722  00561A  C0AF  F195         	movff	_fData,_tiXcorte
  2723  00561E  C0B0  F196         	movff	_fData+1,_tiXcorte+1
  2724  005622  C0B1  F197         	movff	_fData+2,_tiXcorte+2
  2725                           
  2726                           ;sysParams.h: 173: i16Data.int16HB = readEEPROM(6);
  2727  005626  0E06               	movlw	6
  2728  005628  EC5E  F036         	call	_readEEPROM
  2729  00562C  0100               	movlb	0	; () banked
  2730  00562E  6FB3               	movwf	(_i16Data+1)& (0+255),b
  2731                           
  2732                           ;sysParams.h: 174: i16Data.int16LB = readEEPROM(7);
  2733  005630  0E07               	movlw	7
  2734  005632  EC5E  F036         	call	_readEEPROM
  2735  005636  0100               	movlb	0	; () banked
  2736  005638  6FB2               	movwf	_i16Data& (0+255),b
  2737                           
  2738                           ; BSR set to: 0
  2739                           ;sysParams.h: 175: numCortes = i16Data.int16dat;
  2740  00563A  C0B2  F0C6         	movff	_i16Data,_numCortes
  2741  00563E  C0B3  F0C7         	movff	_i16Data+1,_numCortes+1
  2742                           
  2743                           ;sysParams.h: 187: fData.floatUB = readEEPROM(17);
  2744  005642  0E11               	movlw	17
  2745  005644  EC5E  F036         	call	_readEEPROM
  2746  005648  0100               	movlb	0	; () banked
  2747  00564A  6FB1               	movwf	(_fData+2)& (0+255),b
  2748                           
  2749                           ;sysParams.h: 188: fData.floatHB = readEEPROM(18);
  2750  00564C  0E12               	movlw	18
  2751  00564E  EC5E  F036         	call	_readEEPROM
  2752  005652  0100               	movlb	0	; () banked
  2753  005654  6FB0               	movwf	(_fData+1)& (0+255),b
  2754                           
  2755                           ;sysParams.h: 189: fData.floatLB = readEEPROM(19);
  2756  005656  0E13               	movlw	19
  2757  005658  EC5E  F036         	call	_readEEPROM
  2758  00565C  0100               	movlb	0	; () banked
  2759  00565E  6FAF               	movwf	_fData& (0+255),b
  2760                           
  2761                           ; BSR set to: 0
  2762                           ;sysParams.h: 190: velocidadMasa = fData.floatdat;
  2763  005660  C0AF  F198         	movff	_fData,_velocidadMasa
  2764  005664  C0B0  F199         	movff	_fData+1,_velocidadMasa+1
  2765  005668  C0B1  F19A         	movff	_fData+2,_velocidadMasa+2
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;sysParams.h: 191: calcSysVars();
  2769  00566C  ECED  F031         	call	_calcSysVars	;wreg free
  2770                           
  2771                           ;sysParams.h: 192: processState = readEEPROM(31);
  2772  005670  0E1F               	movlw	31
  2773  005672  EC5E  F036         	call	_readEEPROM
  2774  005676  0101               	movlb	1	; () banked
  2775  005678  6F26               	movwf	??_sysParamInit& (0+255),b
  2776  00567A  0101               	movlb	1	; () banked
  2777  00567C  5126               	movf	??_sysParamInit& (0+255),w,b
  2778  00567E  0100               	movlb	0	; () banked
  2779  005680  6FB4               	movwf	_processState& (0+255),b
  2780  005682  6BB5               	clrf	(_processState+1)& (0+255),b
  2781                           
  2782                           ;sysParams.h: 193: bladeIsUP = readEEPROM(32);
  2783  005684  0E20               	movlw	32
  2784  005686  EC5E  F036         	call	_readEEPROM
  2785  00568A  0100               	movlb	0	; () banked
  2786  00568C  6FC8               	movwf	_bladeIsUP& (0+255),b
  2787                           
  2788                           ;sysParams.h: 194: processStarted = readEEPROM(30);
  2789  00568E  0E1E               	movlw	30
  2790  005690  EC5E  F036         	call	_readEEPROM
  2791  005694  0100               	movlb	0	; () banked
  2792  005696  6FBB               	movwf	_processStarted& (0+255),b
  2793                           
  2794                           ; BSR set to: 0
  2795  005698  0012               	return		;funcret
  2796  00569A                     __end_of_sysParamInit:
  2797                           	opt stack 0
  2798                           tblptru	equ	0xFF8
  2799                           tblptrh	equ	0xFF7
  2800                           tblptrl	equ	0xFF6
  2801                           tablat	equ	0xFF5
  2802                           postinc0	equ	0xFEE
  2803                           wreg	equ	0xFE8
  2804                           postdec1	equ	0xFE5
  2805                           fsr1l	equ	0xFE1
  2806                           
  2807 ;; *************** function _readEEPROM *****************
  2808 ;; Defined at:
  2809 ;;		line 62 in file "source/sysParams.h"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;  adr             1    wreg     unsigned char 
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;  adr             1    0[BANK1 ] unsigned char 
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      unsigned char 
  2816 ;; Registers used:
  2817 ;;		wreg, status,2
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2823 ;;      Params:         0       0       0       0       0       0       0
  2824 ;;      Locals:         0       0       1       0       0       0       0
  2825 ;;      Temps:          0       0       0       0       0       0       0
  2826 ;;      Totals:         0       0       1       0       0       0       0
  2827 ;;Total ram usage:        1 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:   12
  2830 ;; This function calls:
  2831 ;;		Nothing
  2832 ;; This function is called by:
  2833 ;;		_sysParamInit
  2834 ;; This function uses a non-reentrant model
  2835 ;;
  2836                           
  2837                           	psect	text3
  2838  006CBC                     __ptext3:
  2839                           	opt stack 0
  2840  006CBC                     _readEEPROM:
  2841                           	opt stack 17
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;incstack = 0
  2845                           ;readEEPROM@adr stored from wreg
  2846  006CBC  0101               	movlb	1	; () banked
  2847  006CBE  6F00               	movwf	readEEPROM@adr& (0+255),b
  2848                           
  2849                           ;sysParams.h: 63: EEADR = adr;
  2850  006CC0  C100  FFA9         	movff	readEEPROM@adr,4009	;volatile
  2851                           
  2852                           ;sysParams.h: 64: EECON1bits.EEPGD = 0;
  2853  006CC4  9EA6               	bcf	4006,7,c	;volatile
  2854                           
  2855                           ;sysParams.h: 65: EECON1bits.CFGS = 0;
  2856  006CC6  9CA6               	bcf	4006,6,c	;volatile
  2857                           
  2858                           ;sysParams.h: 66: EECON1bits.RD = 1;
  2859  006CC8  80A6               	bsf	4006,0,c	;volatile
  2860  006CCA                     l285:
  2861  006CCA  B0A6               	btfsc	4006,0,c	;volatile
  2862  006CCC  D7FE               	goto	l285
  2863                           
  2864                           ;sysParams.h: 68: return EEDATA;
  2865  006CCE  50A8               	movf	4008,w,c	;volatile
  2866  006CD0  0012               	return		;funcret
  2867  006CD2                     __end_of_readEEPROM:
  2868                           	opt stack 0
  2869                           tblptru	equ	0xFF8
  2870                           tblptrh	equ	0xFF7
  2871                           tblptrl	equ	0xFF6
  2872                           tablat	equ	0xFF5
  2873                           postinc0	equ	0xFEE
  2874                           wreg	equ	0xFE8
  2875                           postdec1	equ	0xFE5
  2876                           fsr1l	equ	0xFE1
  2877                           
  2878 ;; *************** function _calcSysVars *****************
  2879 ;; Defined at:
  2880 ;;		line 76 in file "source/sysParams.h"
  2881 ;; Parameters:    Size  Location     Type
  2882 ;;		None
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;  temp            3   35[BANK1 ] float 
  2885 ;; Return value:  Size  Location     Type
  2886 ;;                  1    wreg      void 
  2887 ;; Registers used:
  2888 ;;		wreg, status,2, status,0, cstack
  2889 ;; Tracked objects:
  2890 ;;		On entry : 0/0
  2891 ;;		On exit  : 0/0
  2892 ;;		Unchanged: 0/0
  2893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2894 ;;      Params:         0       0       0       0       0       0       0
  2895 ;;      Locals:         0       0       3       0       0       0       0
  2896 ;;      Temps:          0       0       0       0       0       0       0
  2897 ;;      Totals:         0       0       3       0       0       0       0
  2898 ;;Total ram usage:        3 bytes
  2899 ;; Hardware stack levels used:    1
  2900 ;; Hardware stack levels required when called:   14
  2901 ;; This function calls:
  2902 ;;		___ftmul
  2903 ;; This function is called by:
  2904 ;;		_sysParamInit
  2905 ;; This function uses a non-reentrant model
  2906 ;;
  2907                           
  2908                           	psect	text4
  2909  0063DA                     __ptext4:
  2910                           	opt stack 0
  2911  0063DA                     _calcSysVars:
  2912                           	opt stack 15
  2913                           
  2914                           ;sysParams.h: 77: float temp = 0;
  2915                           
  2916                           ;incstack = 0
  2917  0063DA  0E00               	movlw	0
  2918  0063DC  0101               	movlb	1	; () banked
  2919  0063DE  6F23               	movwf	calcSysVars@temp& (0+255),b
  2920  0063E0  0E00               	movlw	0
  2921  0063E2  0101               	movlb	1	; () banked
  2922  0063E4  6F24               	movwf	(calcSysVars@temp+1)& (0+255),b
  2923  0063E6  0E00               	movlw	0
  2924  0063E8  0101               	movlb	1	; () banked
  2925  0063EA  6F25               	movwf	(calcSysVars@temp+2)& (0+255),b
  2926                           
  2927                           ; BSR set to: 1
  2928                           ;sysParams.h: 78: timsXcorte = (float)tiXcorte * 1000;
  2929  0063EC  C195  F114         	movff	_tiXcorte,___ftmul@f1
  2930  0063F0  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
  2931  0063F4  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
  2932  0063F8  0E00               	movlw	0
  2933  0063FA  0101               	movlb	1	; () banked
  2934  0063FC  6F17               	movwf	___ftmul@f2& (0+255),b
  2935  0063FE  0E7A               	movlw	122
  2936  006400  0101               	movlb	1	; () banked
  2937  006402  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  2938  006404  0E44               	movlw	68
  2939  006406  0101               	movlb	1	; () banked
  2940  006408  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  2941  00640A  ECCC  F01A         	call	___ftmul	;wreg free
  2942  00640E  C114  F05A         	movff	?___ftmul,_timsXcorte
  2943  006412  C115  F05B         	movff	?___ftmul+1,_timsXcorte+1
  2944  006416  C116  F05C         	movff	?___ftmul+2,_timsXcorte+2
  2945                           
  2946                           ;sysParams.h: 84: kgXcorte = (float)velocidadMasa * tiXcorte;
  2947  00641A  C198  F114         	movff	_velocidadMasa,___ftmul@f1
  2948  00641E  C199  F115         	movff	_velocidadMasa+1,___ftmul@f1+1
  2949  006422  C19A  F116         	movff	_velocidadMasa+2,___ftmul@f1+2
  2950  006426  C195  F117         	movff	_tiXcorte,___ftmul@f2
  2951  00642A  C196  F118         	movff	_tiXcorte+1,___ftmul@f2+1
  2952  00642E  C197  F119         	movff	_tiXcorte+2,___ftmul@f2+2
  2953  006432  ECCC  F01A         	call	___ftmul	;wreg free
  2954  006436  C114  F18F         	movff	?___ftmul,_kgXcorte
  2955  00643A  C115  F190         	movff	?___ftmul+1,_kgXcorte+1
  2956  00643E  C116  F191         	movff	?___ftmul+2,_kgXcorte+2
  2957  006442  0012               	return		;funcret
  2958  006444                     __end_of_calcSysVars:
  2959                           	opt stack 0
  2960                           tblptru	equ	0xFF8
  2961                           tblptrh	equ	0xFF7
  2962                           tblptrl	equ	0xFF6
  2963                           tablat	equ	0xFF5
  2964                           postinc0	equ	0xFEE
  2965                           wreg	equ	0xFE8
  2966                           postdec1	equ	0xFE5
  2967                           fsr1l	equ	0xFE1
  2968                           
  2969 ;; *************** function _setPWM2on *****************
  2970 ;; Defined at:
  2971 ;;		line 154 in file "source/PWMConfig.h"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  on              1    wreg     unsigned char 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;  on              1    0[BANK1 ] unsigned char 
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  1    wreg      void 
  2978 ;; Registers used:
  2979 ;;		wreg, status,2
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2985 ;;      Params:         0       0       0       0       0       0       0
  2986 ;;      Locals:         0       0       1       0       0       0       0
  2987 ;;      Temps:          0       0       0       0       0       0       0
  2988 ;;      Totals:         0       0       1       0       0       0       0
  2989 ;;Total ram usage:        1 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:   12
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		_main
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           	psect	text5
  3000  006C8A                     __ptext5:
  3001                           	opt stack 0
  3002  006C8A                     _setPWM2on:
  3003                           	opt stack 18
  3004                           
  3005                           ;incstack = 0
  3006                           ;setPWM2on@on stored from wreg
  3007  006C8A  0101               	movlb	1	; () banked
  3008  006C8C  6F00               	movwf	setPWM2on@on& (0+255),b
  3009                           
  3010                           ;PWMConfig.h: 155: if(on) {
  3011  006C8E  0101               	movlb	1	; () banked
  3012  006C90  5100               	movf	setPWM2on@on& (0+255),w,b
  3013  006C92  0101               	movlb	1	; () banked
  3014  006C94  B4D8               	btfsc	status,2,c
  3015  006C96  D003               	goto	l516
  3016                           
  3017                           ; BSR set to: 1
  3018                           ;PWMConfig.h: 156: TRISCbits.TRISC0 = 0;
  3019  006C98  9094               	bcf	3988,0,c	;volatile
  3020                           
  3021                           ;PWMConfig.h: 157: TRISCbits.TRISC1 = 0;
  3022  006C9A  9294               	bcf	3988,1,c	;volatile
  3023                           
  3024                           ;PWMConfig.h: 158: }else {
  3025  006C9C  0012               	return	
  3026  006C9E                     l516:
  3027                           
  3028                           ; BSR set to: 1
  3029                           ;PWMConfig.h: 159: TRISCbits.TRISC0 = 1;
  3030  006C9E  8094               	bsf	3988,0,c	;volatile
  3031                           
  3032                           ;PWMConfig.h: 160: TRISCbits.TRISC1 = 1;
  3033  006CA0  8294               	bsf	3988,1,c	;volatile
  3034  006CA2  0012               	return	
  3035  006CA4                     __end_of_setPWM2on:
  3036                           	opt stack 0
  3037                           tblptru	equ	0xFF8
  3038                           tblptrh	equ	0xFF7
  3039                           tblptrl	equ	0xFF6
  3040                           tablat	equ	0xFF5
  3041                           postinc0	equ	0xFEE
  3042                           wreg	equ	0xFE8
  3043                           postdec1	equ	0xFE5
  3044                           fsr1l	equ	0xFE1
  3045                           status	equ	0xFD8
  3046                           
  3047 ;; *************** function _lcd_init *****************
  3048 ;; Defined at:
  3049 ;;		line 179 in file "source/../../vclib_lcd.h"
  3050 ;; Parameters:    Size  Location     Type
  3051 ;;		None
  3052 ;; Auto vars:     Size  Location     Type
  3053 ;;  LCD_INIT_STR    4    9[BANK1 ] unsigned char [4]
  3054 ;;  i               1   13[BANK1 ] unsigned char 
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  1    wreg      void 
  3057 ;; Registers used:
  3058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3064 ;;      Params:         0       0       0       0       0       0       0
  3065 ;;      Locals:         0       0       5       0       0       0       0
  3066 ;;      Temps:          0       0       1       0       0       0       0
  3067 ;;      Totals:         0       0       6       0       0       0       0
  3068 ;;Total ram usage:        6 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; Hardware stack levels required when called:   15
  3071 ;; This function calls:
  3072 ;;		_lcd_send_4bits
  3073 ;;		_lcd_send_byte
  3074 ;; This function is called by:
  3075 ;;		_main
  3076 ;; This function uses a non-reentrant model
  3077 ;;
  3078                           
  3079                           	psect	text6
  3080  0054B8                     __ptext6:
  3081                           	opt stack 0
  3082  0054B8                     _lcd_init:
  3083                           	opt stack 15
  3084                           
  3085                           ;vclib_lcd.h: 180: unsigned char i;
  3086                           ;vclib_lcd.h: 181: unsigned char LCD_INIT_STRING[4] = {0x20 | (2 << 2), 0xc, 1, 6};
  3087                           
  3088                           ; BSR set to: 1
  3089                           ;incstack = 0
  3090  0054B8  C0BF  F109         	movff	lcd_init@F7567,lcd_init@LCD_INIT_STRING
  3091  0054BC  C0C0  F10A         	movff	lcd_init@F7567+1,lcd_init@LCD_INIT_STRING+1
  3092  0054C0  C0C1  F10B         	movff	lcd_init@F7567+2,lcd_init@LCD_INIT_STRING+2
  3093  0054C4  C0C2  F10C         	movff	lcd_init@F7567+3,lcd_init@LCD_INIT_STRING+3
  3094                           
  3095                           ;vclib_lcd.h: 184: PORTBbits.RB3 = 0;
  3096  0054C8  9681               	bcf	3969,3,c	;volatile
  3097                           
  3098                           ;vclib_lcd.h: 185: PORTBbits.RB1 = 0;
  3099  0054CA  9281               	bcf	3969,1,c	;volatile
  3100                           
  3101                           ;vclib_lcd.h: 186: PORTBbits.RB2 = 0;
  3102  0054CC  9481               	bcf	3969,2,c	;volatile
  3103                           
  3104                           ;vclib_lcd.h: 187: _delay((unsigned long)((15)*(16000000/4000.0)));
  3105  0054CE  0E4E               	movlw	78
  3106  0054D0  0101               	movlb	1	; () banked
  3107  0054D2  6F08               	movwf	??_lcd_init& (0+255),b
  3108  0054D4  0EEB               	movlw	235
  3109  0054D6                     u17107:
  3110  0054D6  2EE8               	decfsz	wreg,f,c
  3111  0054D8  D7FE               	goto	u17107
  3112  0054DA  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3113  0054DC  D7FC               	goto	u17107
  3114  0054DE  F000               	nop	
  3115                           
  3116                           ;vclib_lcd.h: 188: for (i = 1; i <= 3; ++i) {
  3117  0054E0  0E01               	movlw	1
  3118  0054E2  0101               	movlb	1	; () banked
  3119  0054E4  6F0D               	movwf	lcd_init@i& (0+255),b
  3120  0054E6                     l10979:
  3121                           
  3122                           ; BSR set to: 1
  3123  0054E6  0E03               	movlw	3
  3124  0054E8  0101               	movlb	1	; () banked
  3125  0054EA  650D               	cpfsgt	lcd_init@i& (0+255),b
  3126  0054EC  D001               	goto	l10983
  3127  0054EE  D00F               	goto	l10991
  3128  0054F0                     l10983:
  3129                           
  3130                           ; BSR set to: 1
  3131                           ;vclib_lcd.h: 189: lcd_send_4bits(3);
  3132  0054F0  0E03               	movlw	3
  3133  0054F2  EC3E  F02E         	call	_lcd_send_4bits
  3134                           
  3135                           ;vclib_lcd.h: 190: _delay((unsigned long)((5)*(16000000/4000.0)));
  3136  0054F6  0E1A               	movlw	26
  3137  0054F8  0101               	movlb	1	; () banked
  3138  0054FA  6F08               	movwf	??_lcd_init& (0+255),b
  3139  0054FC  0EF8               	movlw	248
  3140  0054FE                     u17117:
  3141  0054FE  2EE8               	decfsz	wreg,f,c
  3142  005500  D7FE               	goto	u17117
  3143  005502  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3144  005504  D7FC               	goto	u17117
  3145  005506  D000               	nop2	
  3146  005508  0101               	movlb	1	; () banked
  3147  00550A  2B0D               	incf	lcd_init@i& (0+255),f,b
  3148  00550C  D7EC               	goto	l10979
  3149  00550E                     l10991:
  3150                           
  3151                           ; BSR set to: 1
  3152                           ;vclib_lcd.h: 191: }
  3153                           ;vclib_lcd.h: 192: lcd_send_4bits(2);
  3154  00550E  0E02               	movlw	2
  3155  005510  EC3E  F02E         	call	_lcd_send_4bits
  3156                           
  3157                           ;vclib_lcd.h: 193: _delay((unsigned long)((5)*(16000000/4000.0)));
  3158  005514  0E1A               	movlw	26
  3159  005516  0101               	movlb	1	; () banked
  3160  005518  6F08               	movwf	??_lcd_init& (0+255),b
  3161  00551A  0EF8               	movlw	248
  3162  00551C                     u17127:
  3163  00551C  2EE8               	decfsz	wreg,f,c
  3164  00551E  D7FE               	goto	u17127
  3165  005520  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3166  005522  D7FC               	goto	u17127
  3167  005524  D000               	nop2	
  3168                           
  3169                           ;vclib_lcd.h: 194: for (i = 0; i <= 3; ++i)
  3170  005526  0E00               	movlw	0
  3171  005528  0101               	movlb	1	; () banked
  3172  00552A  6F0D               	movwf	lcd_init@i& (0+255),b
  3173  00552C                     l10997:
  3174                           
  3175                           ; BSR set to: 1
  3176  00552C  0E03               	movlw	3
  3177  00552E  0101               	movlb	1	; () banked
  3178  005530  650D               	cpfsgt	lcd_init@i& (0+255),b
  3179  005532  D001               	goto	l11001
  3180  005534  0012               	return	
  3181  005536                     l11001:
  3182                           
  3183                           ; BSR set to: 1
  3184                           ;vclib_lcd.h: 195: lcd_send_byte(0, LCD_INIT_STRING[i]);
  3185  005536  0101               	movlb	1	; () banked
  3186  005538  510D               	movf	lcd_init@i& (0+255),w,b
  3187  00553A  0D01               	mullw	1
  3188  00553C  0E09               	movlw	low lcd_init@LCD_INIT_STRING
  3189  00553E  24F3               	addwf	prodl,w,c
  3190  005540  6ED9               	movwf	fsr2l,c
  3191  005542  0E01               	movlw	high lcd_init@LCD_INIT_STRING
  3192  005544  20F4               	addwfc	prodh,w,c
  3193  005546  6EDA               	movwf	fsr2h,c
  3194  005548  50DF               	movf	indf2,w,c
  3195  00554A  0101               	movlb	1	; () banked
  3196  00554C  6F05               	movwf	lcd_send_byte@n& (0+255),b
  3197  00554E  0E00               	movlw	0
  3198  005550  EC18  F034         	call	_lcd_send_byte
  3199  005554  0101               	movlb	1	; () banked
  3200  005556  2B0D               	incf	lcd_init@i& (0+255),f,b
  3201  005558  D7E9               	goto	l10997
  3202  00555A                     __end_of_lcd_init:
  3203                           	opt stack 0
  3204                           tblptru	equ	0xFF8
  3205                           tblptrh	equ	0xFF7
  3206                           tblptrl	equ	0xFF6
  3207                           tablat	equ	0xFF5
  3208                           prodh	equ	0xFF4
  3209                           prodl	equ	0xFF3
  3210                           postinc0	equ	0xFEE
  3211                           wreg	equ	0xFE8
  3212                           postdec1	equ	0xFE5
  3213                           fsr1l	equ	0xFE1
  3214                           indf2	equ	0xFDF
  3215                           fsr2h	equ	0xFDA
  3216                           fsr2l	equ	0xFD9
  3217                           status	equ	0xFD8
  3218                           
  3219 ;; *************** function _ioInitStt *****************
  3220 ;; Defined at:
  3221 ;;		line 85 in file "source/IOConfig.h"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;		None
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;		None
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      void 
  3228 ;; Registers used:
  3229 ;;		None
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3235 ;;      Params:         0       0       0       0       0       0       0
  3236 ;;      Locals:         0       0       0       0       0       0       0
  3237 ;;      Temps:          0       0       0       0       0       0       0
  3238 ;;      Totals:         0       0       0       0       0       0       0
  3239 ;;Total ram usage:        0 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:   12
  3242 ;; This function calls:
  3243 ;;		Nothing
  3244 ;; This function is called by:
  3245 ;;		_main
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248                           
  3249                           	psect	text7
  3250  006D68                     __ptext7:
  3251                           	opt stack 0
  3252  006D68                     _ioInitStt:
  3253                           	opt stack 18
  3254                           
  3255                           ;IOConfig.h: 86: LATCbits.LATC4 = 0;
  3256                           
  3257                           ; BSR set to: 1
  3258                           ;incstack = 0
  3259  006D68  988B               	bcf	3979,4,c	;volatile
  3260                           
  3261                           ;IOConfig.h: 87: LATBbits.LATB0 = 0;
  3262  006D6A  908A               	bcf	3978,0,c	;volatile
  3263                           
  3264                           ;IOConfig.h: 88: LATCbits.LATC5 = 0;
  3265  006D6C  9A8B               	bcf	3979,5,c	;volatile
  3266  006D6E  0012               	return		;funcret
  3267  006D70                     __end_of_ioInitStt:
  3268                           	opt stack 0
  3269                           tblptru	equ	0xFF8
  3270                           tblptrh	equ	0xFF7
  3271                           tblptrl	equ	0xFF6
  3272                           tablat	equ	0xFF5
  3273                           prodh	equ	0xFF4
  3274                           prodl	equ	0xFF3
  3275                           postinc0	equ	0xFEE
  3276                           wreg	equ	0xFE8
  3277                           postdec1	equ	0xFE5
  3278                           fsr1l	equ	0xFE1
  3279                           indf2	equ	0xFDF
  3280                           fsr2h	equ	0xFDA
  3281                           fsr2l	equ	0xFD9
  3282                           status	equ	0xFD8
  3283                           
  3284 ;; *************** function _ioConfig *****************
  3285 ;; Defined at:
  3286 ;;		line 68 in file "source/IOConfig.h"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;		None
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;		None
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  1    wreg      void 
  3293 ;; Registers used:
  3294 ;;		None
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3300 ;;      Params:         0       0       0       0       0       0       0
  3301 ;;      Locals:         0       0       0       0       0       0       0
  3302 ;;      Temps:          0       0       0       0       0       0       0
  3303 ;;      Totals:         0       0       0       0       0       0       0
  3304 ;;Total ram usage:        0 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:   12
  3307 ;; This function calls:
  3308 ;;		Nothing
  3309 ;; This function is called by:
  3310 ;;		_main
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text8
  3315  006A3E                     __ptext8:
  3316                           	opt stack 0
  3317  006A3E                     _ioConfig:
  3318                           	opt stack 18
  3319                           
  3320                           ;IOConfig.h: 69: TRISBbits.TRISB1 = 0;
  3321                           
  3322                           ;incstack = 0
  3323  006A3E  9293               	bcf	3987,1,c	;volatile
  3324                           
  3325                           ;IOConfig.h: 70: TRISBbits.TRISB2 = 0;
  3326  006A40  9493               	bcf	3987,2,c	;volatile
  3327                           
  3328                           ;IOConfig.h: 71: TRISBbits.TRISB3 = 0;
  3329  006A42  9693               	bcf	3987,3,c	;volatile
  3330                           
  3331                           ;IOConfig.h: 72: TRISBbits.TRISB0 = 0;
  3332  006A44  9093               	bcf	3987,0,c	;volatile
  3333                           
  3334                           ;IOConfig.h: 73: TRISCbits.TRISC5 = 0;
  3335  006A46  9A94               	bcf	3988,5,c	;volatile
  3336                           
  3337                           ;IOConfig.h: 74: TRISAbits.TRISA7 = 1;
  3338  006A48  8E92               	bsf	3986,7,c	;volatile
  3339                           
  3340                           ;IOConfig.h: 75: TRISAbits.TRISA6 = 1;
  3341  006A4A  8C92               	bsf	3986,6,c	;volatile
  3342                           
  3343                           ;IOConfig.h: 76: TRISCbits.TRISC2 = 1; ANSELCbits.ANSC2 = 0;
  3344  006A4C  8494               	bsf	3988,2,c	;volatile
  3345  006A4E  010F               	movlb	15	; () banked
  3346  006A50  953A               	bcf	58,2,b	;volatile
  3347                           
  3348                           ;IOConfig.h: 77: TRISCbits.TRISC3 = 1; ANSELCbits.ANSC3 = 0;
  3349  006A52  8694               	bsf	3988,3,c	;volatile
  3350  006A54  010F               	movlb	15	; () banked
  3351  006A56  973A               	bcf	58,3,b	;volatile
  3352                           
  3353                           ;IOConfig.h: 78: TRISAbits.TRISA2 = 1; ANSELAbits.ANSA2 = 0;
  3354  006A58  8492               	bsf	3986,2,c	;volatile
  3355  006A5A  010F               	movlb	15	; () banked
  3356  006A5C  9538               	bcf	56,2,b	;volatile
  3357                           
  3358                           ;IOConfig.h: 79: TRISAbits.TRISA3 = 1; ANSELAbits.ANSA3 = 0;
  3359  006A5E  8692               	bsf	3986,3,c	;volatile
  3360  006A60  010F               	movlb	15	; () banked
  3361  006A62  9738               	bcf	56,3,b	;volatile
  3362                           
  3363                           ;IOConfig.h: 80: TRISAbits.TRISA4 = 1;
  3364  006A64  8892               	bsf	3986,4,c	;volatile
  3365                           
  3366                           ;IOConfig.h: 81: TRISAbits.TRISA5 = 1; ANSELAbits.ANSA5 = 0;
  3367  006A66  8A92               	bsf	3986,5,c	;volatile
  3368  006A68  010F               	movlb	15	; () banked
  3369  006A6A  9B38               	bcf	56,5,b	;volatile
  3370                           
  3371                           ;IOConfig.h: 82: TRISCbits.TRISC4 = 0;
  3372  006A6C  9894               	bcf	3988,4,c	;volatile
  3373                           
  3374                           ; BSR set to: 15
  3375  006A6E  0012               	return		;funcret
  3376  006A70                     __end_of_ioConfig:
  3377                           	opt stack 0
  3378                           tblptru	equ	0xFF8
  3379                           tblptrh	equ	0xFF7
  3380                           tblptrl	equ	0xFF6
  3381                           tablat	equ	0xFF5
  3382                           prodh	equ	0xFF4
  3383                           prodl	equ	0xFF3
  3384                           postinc0	equ	0xFEE
  3385                           wreg	equ	0xFE8
  3386                           postdec1	equ	0xFE5
  3387                           fsr1l	equ	0xFE1
  3388                           indf2	equ	0xFDF
  3389                           fsr2h	equ	0xFDA
  3390                           fsr2l	equ	0xFD9
  3391                           status	equ	0xFD8
  3392                           
  3393 ;; *************** function _interruptConfig *****************
  3394 ;; Defined at:
  3395 ;;		line 89 in file "source/SYSConfig.h"
  3396 ;; Parameters:    Size  Location     Type
  3397 ;;		None
  3398 ;; Auto vars:     Size  Location     Type
  3399 ;;		None
  3400 ;; Return value:  Size  Location     Type
  3401 ;;                  1    wreg      void 
  3402 ;; Registers used:
  3403 ;;		None
  3404 ;; Tracked objects:
  3405 ;;		On entry : 0/0
  3406 ;;		On exit  : 0/0
  3407 ;;		Unchanged: 0/0
  3408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3409 ;;      Params:         0       0       0       0       0       0       0
  3410 ;;      Locals:         0       0       0       0       0       0       0
  3411 ;;      Temps:          0       0       0       0       0       0       0
  3412 ;;      Totals:         0       0       0       0       0       0       0
  3413 ;;Total ram usage:        0 bytes
  3414 ;; Hardware stack levels used:    1
  3415 ;; Hardware stack levels required when called:   12
  3416 ;; This function calls:
  3417 ;;		Nothing
  3418 ;; This function is called by:
  3419 ;;		_main
  3420 ;; This function uses a non-reentrant model
  3421 ;;
  3422                           
  3423                           	psect	text9
  3424  006D70                     __ptext9:
  3425                           	opt stack 0
  3426  006D70                     _interruptConfig:
  3427                           	opt stack 18
  3428                           
  3429                           ;SYSConfig.h: 90: RCONbits.IPEN = 1;
  3430                           
  3431                           ; BSR set to: 15
  3432                           ;incstack = 0
  3433  006D70  8ED0               	bsf	4048,7,c	;volatile
  3434                           
  3435                           ;SYSConfig.h: 91: INTCONbits.PEIE = 1;
  3436  006D72  8CF2               	bsf	intcon,6,c	;volatile
  3437                           
  3438                           ;SYSConfig.h: 92: INTCONbits.GIE = 1;
  3439  006D74  8EF2               	bsf	intcon,7,c	;volatile
  3440  006D76  0012               	return		;funcret
  3441  006D78                     __end_of_interruptConfig:
  3442                           	opt stack 0
  3443                           tblptru	equ	0xFF8
  3444                           tblptrh	equ	0xFF7
  3445                           tblptrl	equ	0xFF6
  3446                           tablat	equ	0xFF5
  3447                           prodh	equ	0xFF4
  3448                           prodl	equ	0xFF3
  3449                           intcon	equ	0xFF2
  3450                           postinc0	equ	0xFEE
  3451                           wreg	equ	0xFE8
  3452                           postdec1	equ	0xFE5
  3453                           fsr1l	equ	0xFE1
  3454                           indf2	equ	0xFDF
  3455                           fsr2h	equ	0xFDA
  3456                           fsr2l	equ	0xFD9
  3457                           status	equ	0xFD8
  3458                           
  3459 ;; *************** function _drawScreen *****************
  3460 ;; Defined at:
  3461 ;;		line 240 in file "source/screenDrawers.h"
  3462 ;; Parameters:    Size  Location     Type
  3463 ;;		None
  3464 ;; Auto vars:     Size  Location     Type
  3465 ;;		None
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  1    wreg      void 
  3468 ;; Registers used:
  3469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3475 ;;      Params:         0       0       0       0       0       0       0
  3476 ;;      Locals:         0       0       0       0       0       0       0
  3477 ;;      Temps:          0       0       0       0       0       0       0
  3478 ;;      Totals:         0       0       0       0       0       0       0
  3479 ;;Total ram usage:        0 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; Hardware stack levels required when called:   21
  3482 ;; This function calls:
  3483 ;;		_drawAdvON
  3484 ;;		_drawAutoCalibRM
  3485 ;;		_drawBadPass
  3486 ;;		_drawCalibProc
  3487 ;;		_drawChanVal
  3488 ;;		_drawCutError
  3489 ;;		_drawMenu
  3490 ;;		_drawPassWord
  3491 ;;		_drawSNquest
  3492 ;; This function is called by:
  3493 ;;		_main
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           	psect	text10
  3498  004EFC                     __ptext10:
  3499                           	opt stack 0
  3500  004EFC                     _drawScreen:
  3501                           	opt stack 9
  3502                           
  3503                           ;screenDrawers.h: 241: switch (actualScreen) {
  3504                           
  3505                           ;incstack = 0
  3506  004EFC  D032               	goto	l11057
  3507  004EFE                     l11027:
  3508                           
  3509                           ;screenDrawers.h: 243: drawMenu(0);
  3510  004EFE  0E00               	movlw	0
  3511  004F00  EC68  F014         	call	_drawMenu
  3512                           
  3513                           ;screenDrawers.h: 244: break;
  3514  004F04  0012               	return	
  3515  004F06                     l11029:
  3516                           
  3517                           ;screenDrawers.h: 246: drawPassWord();
  3518  004F06  EC08  F025         	call	_drawPassWord	;wreg free
  3519                           
  3520                           ;screenDrawers.h: 247: break;
  3521  004F0A  0012               	return	
  3522  004F0C                     l11031:
  3523                           
  3524                           ;screenDrawers.h: 249: drawBadPass();
  3525  004F0C  EC69  F036         	call	_drawBadPass	;wreg free
  3526                           
  3527                           ;screenDrawers.h: 250: break;
  3528  004F10  0012               	return	
  3529  004F12                     l11033:
  3530                           
  3531                           ;screenDrawers.h: 252: drawMenu(1);
  3532  004F12  0E01               	movlw	1
  3533  004F14  EC68  F014         	call	_drawMenu
  3534                           
  3535                           ;screenDrawers.h: 253: break;
  3536  004F18  0012               	return	
  3537  004F1A                     l11035:
  3538                           
  3539                           ;screenDrawers.h: 255: drawAdvON(1);
  3540  004F1A  0E01               	movlw	1
  3541  004F1C  EC3C  F033         	call	_drawAdvON
  3542                           
  3543                           ;screenDrawers.h: 256: break;
  3544  004F20  0012               	return	
  3545  004F22                     l11037:
  3546                           
  3547                           ;screenDrawers.h: 258: drawAdvON(0);
  3548  004F22  0E00               	movlw	0
  3549  004F24  EC3C  F033         	call	_drawAdvON
  3550                           
  3551                           ;screenDrawers.h: 259: break;
  3552  004F28  0012               	return	
  3553  004F2A                     l11039:
  3554                           
  3555                           ;screenDrawers.h: 261: drawChanVal();
  3556  004F2A  EC59  F02F         	call	_drawChanVal	;wreg free
  3557                           
  3558                           ;screenDrawers.h: 262: break;
  3559  004F2E  0012               	return	
  3560  004F30                     l11041:
  3561                           
  3562                           ;screenDrawers.h: 264: drawSNquest(0);
  3563  004F30  0E00               	movlw	0
  3564  004F32  EC90  F024         	call	_drawSNquest
  3565                           
  3566                           ;screenDrawers.h: 265: break;
  3567  004F36  0012               	return	
  3568  004F38                     l11043:
  3569                           
  3570                           ;screenDrawers.h: 267: drawSNquest(1);
  3571  004F38  0E01               	movlw	1
  3572  004F3A  EC90  F024         	call	_drawSNquest
  3573                           
  3574                           ;screenDrawers.h: 268: break;
  3575  004F3E  0012               	return	
  3576  004F40                     l11045:
  3577                           
  3578                           ;screenDrawers.h: 270: drawSNquest(2);
  3579  004F40  0E02               	movlw	2
  3580  004F42  EC90  F024         	call	_drawSNquest
  3581                           
  3582                           ;screenDrawers.h: 271: break;
  3583  004F46  0012               	return	
  3584  004F48                     l11047:
  3585                           
  3586                           ;screenDrawers.h: 273: drawSNquest(3);
  3587  004F48  0E03               	movlw	3
  3588  004F4A  EC90  F024         	call	_drawSNquest
  3589                           
  3590                           ;screenDrawers.h: 274: break;
  3591  004F4E  0012               	return	
  3592  004F50                     l11049:
  3593                           
  3594                           ;screenDrawers.h: 276: drawCalibProc();
  3595  004F50  EC13  F02F         	call	_drawCalibProc	;wreg free
  3596                           
  3597                           ;screenDrawers.h: 277: break;
  3598  004F54  0012               	return	
  3599  004F56                     l11051:
  3600                           
  3601                           ;screenDrawers.h: 279: drawAutoCalibRM();
  3602  004F56  EC38  F035         	call	_drawAutoCalibRM	;wreg free
  3603                           
  3604                           ;screenDrawers.h: 280: break;
  3605  004F5A  0012               	return	
  3606  004F5C                     l11053:
  3607                           
  3608                           ;screenDrawers.h: 282: drawCutError();
  3609  004F5C  EC81  F035         	call	_drawCutError	;wreg free
  3610                           
  3611                           ;screenDrawers.h: 284: }
  3612                           ;screenDrawers.h: 285: }
  3613                           
  3614                           ;screenDrawers.h: 283: break;
  3615  004F60  0012               	return	
  3616  004F62                     l11057:
  3617  004F62  0101               	movlb	1	; () banked
  3618  004F64  51C3               	movf	_actualScreen& (0+255),w,b
  3619                           
  3620                           ; Switch size 1, requested type "space"
  3621                           ; Number of cases is 14, Range of values is 0 to 13
  3622                           ; switch strategies available:
  3623                           ; Name         Instructions Cycles
  3624                           ; simple_byte           43    22 (average)
  3625                           ;	Chosen strategy is simple_byte
  3626  004F66  0A00               	xorlw	0	; case 0
  3627  004F68  B4D8               	btfsc	status,2,c
  3628  004F6A  D7C9               	goto	l11027
  3629  004F6C  0A01               	xorlw	1	; case 1
  3630  004F6E  B4D8               	btfsc	status,2,c
  3631  004F70  D7CA               	goto	l11029
  3632  004F72  0A03               	xorlw	3	; case 2
  3633  004F74  B4D8               	btfsc	status,2,c
  3634  004F76  D7DC               	goto	l11041
  3635  004F78  0A01               	xorlw	1	; case 3
  3636  004F7A  B4D8               	btfsc	status,2,c
  3637  004F7C  D7DD               	goto	l11043
  3638  004F7E  0A07               	xorlw	7	; case 4
  3639  004F80  B4D8               	btfsc	status,2,c
  3640  004F82  D7C7               	goto	l11033
  3641  004F84  0A01               	xorlw	1	; case 5
  3642  004F86  B4D8               	btfsc	status,2,c
  3643  004F88  D7D0               	goto	l11039
  3644  004F8A  0A03               	xorlw	3	; case 6
  3645  004F8C  B4D8               	btfsc	status,2,c
  3646  004F8E  D7E0               	goto	l11049
  3647  004F90  0A01               	xorlw	1	; case 7
  3648  004F92  B4D8               	btfsc	status,2,c
  3649  004F94  D7BB               	goto	l11031
  3650  004F96  0A0F               	xorlw	15	; case 8
  3651  004F98  B4D8               	btfsc	status,2,c
  3652  004F9A  D7BF               	goto	l11035
  3653  004F9C  0A01               	xorlw	1	; case 9
  3654  004F9E  B4D8               	btfsc	status,2,c
  3655  004FA0  D7C0               	goto	l11037
  3656  004FA2  0A03               	xorlw	3	; case 10
  3657  004FA4  B4D8               	btfsc	status,2,c
  3658  004FA6  D7CC               	goto	l11045
  3659  004FA8  0A01               	xorlw	1	; case 11
  3660  004FAA  B4D8               	btfsc	status,2,c
  3661  004FAC  D7CD               	goto	l11047
  3662  004FAE  0A07               	xorlw	7	; case 12
  3663  004FB0  B4D8               	btfsc	status,2,c
  3664  004FB2  D7D1               	goto	l11051
  3665  004FB4  0A01               	xorlw	1	; case 13
  3666  004FB6  A4D8               	btfss	status,2,c
  3667  004FB8  0012               	return	
  3668  004FBA  D7D0               	goto	l11053
  3669  004FBC                     __end_of_drawScreen:
  3670                           	opt stack 0
  3671                           tblptru	equ	0xFF8
  3672                           tblptrh	equ	0xFF7
  3673                           tblptrl	equ	0xFF6
  3674                           tablat	equ	0xFF5
  3675                           prodh	equ	0xFF4
  3676                           prodl	equ	0xFF3
  3677                           intcon	equ	0xFF2
  3678                           postinc0	equ	0xFEE
  3679                           wreg	equ	0xFE8
  3680                           postdec1	equ	0xFE5
  3681                           fsr1l	equ	0xFE1
  3682                           indf2	equ	0xFDF
  3683                           fsr2h	equ	0xFDA
  3684                           fsr2l	equ	0xFD9
  3685                           status	equ	0xFD8
  3686                           
  3687 ;; *************** function _drawSNquest *****************
  3688 ;; Defined at:
  3689 ;;		line 196 in file "source/screenDrawers.h"
  3690 ;; Parameters:    Size  Location     Type
  3691 ;;  tq              1    wreg     unsigned char 
  3692 ;; Auto vars:     Size  Location     Type
  3693 ;;  tq              1  118[BANK1 ] unsigned char 
  3694 ;;  i               2  116[BANK1 ] int 
  3695 ;; Return value:  Size  Location     Type
  3696 ;;                  1    wreg      void 
  3697 ;; Registers used:
  3698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3699 ;; Tracked objects:
  3700 ;;		On entry : 0/0
  3701 ;;		On exit  : 0/0
  3702 ;;		Unchanged: 0/0
  3703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3704 ;;      Params:         0       0       0       0       0       0       0
  3705 ;;      Locals:         0       0       3       0       0       0       0
  3706 ;;      Temps:          0       0       0       0       0       0       0
  3707 ;;      Totals:         0       0       3       0       0       0       0
  3708 ;;Total ram usage:        3 bytes
  3709 ;; Hardware stack levels used:    1
  3710 ;; Hardware stack levels required when called:   19
  3711 ;; This function calls:
  3712 ;;		_lcd_gotoxy
  3713 ;;		_printf
  3714 ;; This function is called by:
  3715 ;;		_drawScreen
  3716 ;; This function uses a non-reentrant model
  3717 ;;
  3718                           
  3719                           	psect	text11
  3720  004920                     __ptext11:
  3721                           	opt stack 0
  3722  004920                     _drawSNquest:
  3723                           	opt stack 10
  3724                           
  3725                           ;incstack = 0
  3726                           ;drawSNquest@tq stored from wreg
  3727  004920  0101               	movlb	1	; () banked
  3728  004922  6F76               	movwf	drawSNquest@tq& (0+255),b
  3729                           
  3730                           ;screenDrawers.h: 197: int i;
  3731                           ;screenDrawers.h: 198: for (i = 0; i < 2; i++)
  3732  004924  0E00               	movlw	0
  3733  004926  0101               	movlb	1	; () banked
  3734  004928  6F75               	movwf	(drawSNquest@i+1)& (0+255),b
  3735  00492A  0E00               	movlw	0
  3736  00492C  6F74               	movwf	drawSNquest@i& (0+255),b
  3737  00492E                     l10501:
  3738                           
  3739                           ; BSR set to: 1
  3740  00492E  0101               	movlb	1	; () banked
  3741  004930  BF75               	btfsc	(drawSNquest@i+1)& (0+255),7,b
  3742  004932  D008               	goto	l10505
  3743  004934  0101               	movlb	1	; () banked
  3744  004936  5175               	movf	(drawSNquest@i+1)& (0+255),w,b
  3745  004938  E113               	bnz	l10511
  3746  00493A  0E02               	movlw	2
  3747  00493C  0101               	movlb	1	; () banked
  3748  00493E  5D74               	subwf	drawSNquest@i& (0+255),w,b
  3749  004940  B0D8               	btfsc	status,0,c
  3750  004942  D00E               	goto	l10511
  3751  004944                     l10505:
  3752                           
  3753                           ; BSR set to: 1
  3754                           ;screenDrawers.h: 199: questSN[i] = ' ';
  3755  004944  0EBC               	movlw	low _questSN
  3756  004946  0101               	movlb	1	; () banked
  3757  004948  2574               	addwf	drawSNquest@i& (0+255),w,b
  3758  00494A  6ED9               	movwf	fsr2l,c
  3759  00494C  0E01               	movlw	high _questSN
  3760  00494E  0101               	movlb	1	; () banked
  3761  004950  2175               	addwfc	(drawSNquest@i+1)& (0+255),w,b
  3762  004952  6EDA               	movwf	fsr2h,c
  3763  004954  0E20               	movlw	32
  3764  004956  6EDF               	movwf	indf2,c
  3765                           
  3766                           ; BSR set to: 1
  3767  004958  0101               	movlb	1	; () banked
  3768  00495A  4B74               	infsnz	drawSNquest@i& (0+255),f,b
  3769  00495C  2B75               	incf	(drawSNquest@i+1)& (0+255),f,b
  3770  00495E  D7E7               	goto	l10501
  3771  004960                     l10511:
  3772                           
  3773                           ; BSR set to: 1
  3774                           ;screenDrawers.h: 200: questSN[selSN] = flech;
  3775  004960  0101               	movlb	1	; () banked
  3776  004962  51CC               	movf	_selSN& (0+255),w,b
  3777  004964  0D01               	mullw	1
  3778  004966  0EBC               	movlw	low _questSN
  3779  004968  24F3               	addwf	prodl,w,c
  3780  00496A  6ED9               	movwf	fsr2l,c
  3781  00496C  0E01               	movlw	high _questSN
  3782  00496E  20F4               	addwfc	prodh,w,c
  3783  004970  6EDA               	movwf	fsr2h,c
  3784  004972  C19E  FFDF         	movff	_flech,indf2
  3785                           
  3786                           ; BSR set to: 1
  3787                           ;screenDrawers.h: 201: lcd_gotoxy(1, 1);
  3788  004976  0E01               	movlw	1
  3789  004978  0101               	movlb	1	; () banked
  3790  00497A  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  3791  00497C  0E01               	movlw	1
  3792  00497E  EC51  F035         	call	_lcd_gotoxy
  3793                           
  3794                           ;screenDrawers.h: 202: if (tq == 0)
  3795  004982  0101               	movlb	1	; () banked
  3796  004984  5176               	movf	drawSNquest@tq& (0+255),w,b
  3797  004986  0101               	movlb	1	; () banked
  3798  004988  A4D8               	btfss	status,2,c
  3799  00498A  D009               	goto	l10519
  3800                           
  3801                           ; BSR set to: 1
  3802                           ;screenDrawers.h: 203: printf("Iniciar Proceso?\n");
  3803  00498C  0E91               	movlw	low STR_26
  3804  00498E  0101               	movlb	1	; () banked
  3805  004990  6F3F               	movwf	printf@f& (0+255),b
  3806  004992  0E7E               	movlw	high STR_26
  3807  004994  0101               	movlb	1	; () banked
  3808  004996  6F40               	movwf	(printf@f+1)& (0+255),b
  3809  004998  EC61  F000         	call	_printf	;wreg free
  3810  00499C  D028               	goto	l416
  3811  00499E                     l10519:
  3812                           
  3813                           ;screenDrawers.h: 204: else if(tq == 1)
  3814  00499E  0101               	movlb	1	; () banked
  3815  0049A0  0576               	decf	drawSNquest@tq& (0+255),w,b
  3816  0049A2  A4D8               	btfss	status,2,c
  3817  0049A4  D009               	goto	l10523
  3818                           
  3819                           ; BSR set to: 1
  3820                           ;screenDrawers.h: 205: printf("Detener Proceso?\n");
  3821  0049A6  0EA3               	movlw	low STR_27
  3822  0049A8  0101               	movlb	1	; () banked
  3823  0049AA  6F3F               	movwf	printf@f& (0+255),b
  3824  0049AC  0E7E               	movlw	high STR_27
  3825  0049AE  0101               	movlb	1	; () banked
  3826  0049B0  6F40               	movwf	(printf@f+1)& (0+255),b
  3827  0049B2  EC61  F000         	call	_printf	;wreg free
  3828  0049B6  D01B               	goto	l416
  3829  0049B8                     l10523:
  3830                           
  3831                           ;screenDrawers.h: 206: else if(tq == 2)
  3832  0049B8  0E02               	movlw	2
  3833  0049BA  0101               	movlb	1	; () banked
  3834  0049BC  1976               	xorwf	drawSNquest@tq& (0+255),w,b
  3835  0049BE  A4D8               	btfss	status,2,c
  3836  0049C0  D009               	goto	l10527
  3837                           
  3838                           ; BSR set to: 1
  3839                           ;screenDrawers.h: 207: printf("Guardar Cambio? \n");
  3840  0049C2  0E49               	movlw	low STR_28
  3841  0049C4  0101               	movlb	1	; () banked
  3842  0049C6  6F3F               	movwf	printf@f& (0+255),b
  3843  0049C8  0E7E               	movlw	high STR_28
  3844  0049CA  0101               	movlb	1	; () banked
  3845  0049CC  6F40               	movwf	(printf@f+1)& (0+255),b
  3846  0049CE  EC61  F000         	call	_printf	;wreg free
  3847  0049D2  D00D               	goto	l416
  3848  0049D4                     l10527:
  3849                           
  3850                           ;screenDrawers.h: 208: else if(tq == 3)
  3851  0049D4  0E03               	movlw	3
  3852  0049D6  0101               	movlb	1	; () banked
  3853  0049D8  1976               	xorwf	drawSNquest@tq& (0+255),w,b
  3854  0049DA  A4D8               	btfss	status,2,c
  3855  0049DC  D008               	goto	l416
  3856                           
  3857                           ; BSR set to: 1
  3858                           ;screenDrawers.h: 209: printf("Init AutoCalib? \n");
  3859  0049DE  0E37               	movlw	low STR_29
  3860  0049E0  0101               	movlb	1	; () banked
  3861  0049E2  6F3F               	movwf	printf@f& (0+255),b
  3862  0049E4  0E7E               	movlw	high STR_29
  3863  0049E6  0101               	movlb	1	; () banked
  3864  0049E8  6F40               	movwf	(printf@f+1)& (0+255),b
  3865  0049EA  EC61  F000         	call	_printf	;wreg free
  3866  0049EE                     l416:
  3867                           
  3868                           ;screenDrawers.h: 210: printf("   %cSI    %cNO   ", questSN[0], questSN[1]);
  3869  0049EE  0ECA               	movlw	low STR_30
  3870  0049F0  0101               	movlb	1	; () banked
  3871  0049F2  6F3F               	movwf	printf@f& (0+255),b
  3872  0049F4  0E7D               	movlw	high STR_30
  3873  0049F6  0101               	movlb	1	; () banked
  3874  0049F8  6F40               	movwf	(printf@f+1)& (0+255),b
  3875  0049FA  C1BC  F141         	movff	_questSN,?_printf+2
  3876  0049FE  0101               	movlb	1	; () banked
  3877  004A00  6B42               	clrf	(?_printf+3)& (0+255),b
  3878  004A02  C1BD  F143         	movff	_questSN+1,?_printf+4
  3879  004A06  0101               	movlb	1	; () banked
  3880  004A08  6B44               	clrf	(?_printf+5)& (0+255),b
  3881  004A0A  EC61  F000         	call	_printf	;wreg free
  3882  004A0E  0012               	return		;funcret
  3883  004A10                     __end_of_drawSNquest:
  3884                           	opt stack 0
  3885                           tblptru	equ	0xFF8
  3886                           tblptrh	equ	0xFF7
  3887                           tblptrl	equ	0xFF6
  3888                           tablat	equ	0xFF5
  3889                           prodh	equ	0xFF4
  3890                           prodl	equ	0xFF3
  3891                           intcon	equ	0xFF2
  3892                           postinc0	equ	0xFEE
  3893                           wreg	equ	0xFE8
  3894                           postdec1	equ	0xFE5
  3895                           fsr1l	equ	0xFE1
  3896                           indf2	equ	0xFDF
  3897                           fsr2h	equ	0xFDA
  3898                           fsr2l	equ	0xFD9
  3899                           status	equ	0xFD8
  3900                           
  3901 ;; *************** function _drawPassWord *****************
  3902 ;; Defined at:
  3903 ;;		line 164 in file "source/screenDrawers.h"
  3904 ;; Parameters:    Size  Location     Type
  3905 ;;		None
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;  i               2  116[BANK1 ] int 
  3908 ;; Return value:  Size  Location     Type
  3909 ;;                  1    wreg      void 
  3910 ;; Registers used:
  3911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3917 ;;      Params:         0       0       0       0       0       0       0
  3918 ;;      Locals:         0       0       2       0       0       0       0
  3919 ;;      Temps:          0       0       0       0       0       0       0
  3920 ;;      Totals:         0       0       2       0       0       0       0
  3921 ;;Total ram usage:        2 bytes
  3922 ;; Hardware stack levels used:    1
  3923 ;; Hardware stack levels required when called:   20
  3924 ;; This function calls:
  3925 ;;		_drawPass1Lin
  3926 ;;		_printf
  3927 ;; This function is called by:
  3928 ;;		_drawScreen
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           	psect	text12
  3933  004A10                     __ptext12:
  3934                           	opt stack 0
  3935  004A10                     _drawPassWord:
  3936                           	opt stack 9
  3937                           
  3938                           ;screenDrawers.h: 165: if (!fd) {
  3939                           
  3940                           ;incstack = 0
  3941  004A10  0101               	movlb	1	; () banked
  3942  004A12  51C5               	movf	_fd& (0+255),w,b
  3943  004A14  A4D8               	btfss	status,2,c
  3944  004A16  D012               	goto	l399
  3945                           
  3946                           ; BSR set to: 1
  3947                           ;screenDrawers.h: 166: passSection = 0;
  3948  004A18  0E00               	movlw	0
  3949  004A1A  0101               	movlb	1	; () banked
  3950  004A1C  6FCB               	movwf	_passSection& (0+255),b
  3951                           
  3952                           ;screenDrawers.h: 167: introducido[0] = 0;
  3953  004A1E  0E00               	movlw	0
  3954  004A20  0101               	movlb	1	; () banked
  3955  004A22  6FAF               	movwf	_introducido& (0+255),b
  3956                           
  3957                           ;screenDrawers.h: 168: introducido[1] = 0;
  3958  004A24  0E00               	movlw	0
  3959  004A26  0101               	movlb	1	; () banked
  3960  004A28  6FB0               	movwf	(_introducido+1)& (0+255),b
  3961                           
  3962                           ;screenDrawers.h: 169: introducido[2] = 0;
  3963  004A2A  0E00               	movlw	0
  3964  004A2C  0101               	movlb	1	; () banked
  3965  004A2E  6FB1               	movwf	(_introducido+2)& (0+255),b
  3966                           
  3967                           ;screenDrawers.h: 170: introducido[3] = 0;
  3968  004A30  0E00               	movlw	0
  3969  004A32  0101               	movlb	1	; () banked
  3970  004A34  6FB2               	movwf	(_introducido+3)& (0+255),b
  3971                           
  3972                           ;screenDrawers.h: 171: fd = 1;
  3973  004A36  0E01               	movlw	1
  3974  004A38  0101               	movlb	1	; () banked
  3975  004A3A  6FC5               	movwf	_fd& (0+255),b
  3976  004A3C                     l399:
  3977                           
  3978                           ; BSR set to: 1
  3979                           ;screenDrawers.h: 172: }
  3980                           ;screenDrawers.h: 173: int i;
  3981                           ;screenDrawers.h: 174: for (i = 0; i < 4; i++)
  3982  004A3C  0E00               	movlw	0
  3983  004A3E  0101               	movlb	1	; () banked
  3984  004A40  6F75               	movwf	(drawPassWord@i+1)& (0+255),b
  3985  004A42  0E00               	movlw	0
  3986  004A44  6F74               	movwf	drawPassWord@i& (0+255),b
  3987  004A46                     l10471:
  3988                           
  3989                           ; BSR set to: 1
  3990  004A46  0101               	movlb	1	; () banked
  3991  004A48  BF75               	btfsc	(drawPassWord@i+1)& (0+255),7,b
  3992  004A4A  D008               	goto	l10475
  3993  004A4C  0101               	movlb	1	; () banked
  3994  004A4E  5175               	movf	(drawPassWord@i+1)& (0+255),w,b
  3995  004A50  E113               	bnz	l10481
  3996  004A52  0E04               	movlw	4
  3997  004A54  0101               	movlb	1	; () banked
  3998  004A56  5D74               	subwf	drawPassWord@i& (0+255),w,b
  3999  004A58  B0D8               	btfsc	status,0,c
  4000  004A5A  D00E               	goto	l10481
  4001  004A5C                     l10475:
  4002                           
  4003                           ; BSR set to: 1
  4004                           ;screenDrawers.h: 175: passChar[i] = ' ';
  4005  004A5C  0EB3               	movlw	low _passChar
  4006  004A5E  0101               	movlb	1	; () banked
  4007  004A60  2574               	addwf	drawPassWord@i& (0+255),w,b
  4008  004A62  6ED9               	movwf	fsr2l,c
  4009  004A64  0E01               	movlw	high _passChar
  4010  004A66  0101               	movlb	1	; () banked
  4011  004A68  2175               	addwfc	(drawPassWord@i+1)& (0+255),w,b
  4012  004A6A  6EDA               	movwf	fsr2h,c
  4013  004A6C  0E20               	movlw	32
  4014  004A6E  6EDF               	movwf	indf2,c
  4015                           
  4016                           ; BSR set to: 1
  4017  004A70  0101               	movlb	1	; () banked
  4018  004A72  4B74               	infsnz	drawPassWord@i& (0+255),f,b
  4019  004A74  2B75               	incf	(drawPassWord@i+1)& (0+255),f,b
  4020  004A76  D7E7               	goto	l10471
  4021  004A78                     l10481:
  4022                           
  4023                           ; BSR set to: 1
  4024                           ;screenDrawers.h: 176: passChar[passSection] = flech;
  4025  004A78  0101               	movlb	1	; () banked
  4026  004A7A  51CB               	movf	_passSection& (0+255),w,b
  4027  004A7C  0D01               	mullw	1
  4028  004A7E  0EB3               	movlw	low _passChar
  4029  004A80  24F3               	addwf	prodl,w,c
  4030  004A82  6ED9               	movwf	fsr2l,c
  4031  004A84  0E01               	movlw	high _passChar
  4032  004A86  20F4               	addwfc	prodh,w,c
  4033  004A88  6EDA               	movwf	fsr2h,c
  4034  004A8A  C19E  FFDF         	movff	_flech,indf2
  4035                           
  4036                           ; BSR set to: 1
  4037                           ;screenDrawers.h: 177: drawPass1Lin();
  4038  004A8E  EC36  F036         	call	_drawPass1Lin	;wreg free
  4039                           
  4040                           ;screenDrawers.h: 178: printf("    %c%u%c%u%c%u%c%u    ", passChar[0], introducido[0], p
      +                          assChar[1], introducido[1],
  4041                           ;screenDrawers.h: 179: passChar[2], introducido[2], passChar[3], introducido[3]);
  4042  004A92  0EB1               	movlw	low STR_21
  4043  004A94  0101               	movlb	1	; () banked
  4044  004A96  6F3F               	movwf	printf@f& (0+255),b
  4045  004A98  0E7D               	movlw	high STR_21
  4046  004A9A  0101               	movlb	1	; () banked
  4047  004A9C  6F40               	movwf	(printf@f+1)& (0+255),b
  4048  004A9E  C1B3  F141         	movff	_passChar,?_printf+2
  4049  004AA2  0101               	movlb	1	; () banked
  4050  004AA4  6B42               	clrf	(?_printf+3)& (0+255),b
  4051  004AA6  0101               	movlb	1	; () banked
  4052  004AA8  51AF               	movf	_introducido& (0+255),w,b
  4053  004AAA  0101               	movlb	1	; () banked
  4054  004AAC  6F43               	movwf	(?_printf+4)& (0+255),b
  4055  004AAE  6B44               	clrf	(?_printf+5)& (0+255),b
  4056  004AB0  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  4057  004AB2  0744               	decf	(?_printf+5)& (0+255),f,b
  4058  004AB4  C1B4  F145         	movff	_passChar+1,?_printf+6
  4059  004AB8  0101               	movlb	1	; () banked
  4060  004ABA  6B46               	clrf	(?_printf+7)& (0+255),b
  4061  004ABC  0101               	movlb	1	; () banked
  4062  004ABE  51B0               	movf	(_introducido+1)& (0+255),w,b
  4063  004AC0  0101               	movlb	1	; () banked
  4064  004AC2  6F47               	movwf	(?_printf+8)& (0+255),b
  4065  004AC4  6B48               	clrf	(?_printf+9)& (0+255),b
  4066  004AC6  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  4067  004AC8  0748               	decf	(?_printf+9)& (0+255),f,b
  4068  004ACA  C1B5  F149         	movff	_passChar+2,?_printf+10
  4069  004ACE  0101               	movlb	1	; () banked
  4070  004AD0  6B4A               	clrf	(?_printf+11)& (0+255),b
  4071  004AD2  0101               	movlb	1	; () banked
  4072  004AD4  51B1               	movf	(_introducido+2)& (0+255),w,b
  4073  004AD6  0101               	movlb	1	; () banked
  4074  004AD8  6F4B               	movwf	(?_printf+12)& (0+255),b
  4075  004ADA  6B4C               	clrf	(?_printf+13)& (0+255),b
  4076  004ADC  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  4077  004ADE  074C               	decf	(?_printf+13)& (0+255),f,b
  4078  004AE0  C1B6  F14D         	movff	_passChar+3,?_printf+14
  4079  004AE4  0101               	movlb	1	; () banked
  4080  004AE6  6B4E               	clrf	(?_printf+15)& (0+255),b
  4081  004AE8  0101               	movlb	1	; () banked
  4082  004AEA  51B2               	movf	(_introducido+3)& (0+255),w,b
  4083  004AEC  0101               	movlb	1	; () banked
  4084  004AEE  6F4F               	movwf	(?_printf+16)& (0+255),b
  4085  004AF0  6B50               	clrf	(?_printf+17)& (0+255),b
  4086  004AF2  BF4F               	btfsc	(?_printf+16)& (0+255),7,b
  4087  004AF4  0750               	decf	(?_printf+17)& (0+255),f,b
  4088  004AF6  EC61  F000         	call	_printf	;wreg free
  4089  004AFA  0012               	return		;funcret
  4090  004AFC                     __end_of_drawPassWord:
  4091                           	opt stack 0
  4092                           tblptru	equ	0xFF8
  4093                           tblptrh	equ	0xFF7
  4094                           tblptrl	equ	0xFF6
  4095                           tablat	equ	0xFF5
  4096                           prodh	equ	0xFF4
  4097                           prodl	equ	0xFF3
  4098                           intcon	equ	0xFF2
  4099                           postinc0	equ	0xFEE
  4100                           wreg	equ	0xFE8
  4101                           postdec1	equ	0xFE5
  4102                           fsr1l	equ	0xFE1
  4103                           indf2	equ	0xFDF
  4104                           fsr2h	equ	0xFDA
  4105                           fsr2l	equ	0xFD9
  4106                           status	equ	0xFD8
  4107                           
  4108 ;; *************** function _drawMenu *****************
  4109 ;; Defined at:
  4110 ;;		line 89 in file "source/screenDrawers.h"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;  adv             1    wreg     unsigned char 
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;  adv             1  116[BANK1 ] unsigned char 
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  1    wreg      void 
  4117 ;; Registers used:
  4118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4124 ;;      Params:         0       0       0       0       0       0       0
  4125 ;;      Locals:         0       0       1       0       0       0       0
  4126 ;;      Temps:          0       0       0       0       0       0       0
  4127 ;;      Totals:         0       0       1       0       0       0       0
  4128 ;;Total ram usage:        1 bytes
  4129 ;; Hardware stack levels used:    1
  4130 ;; Hardware stack levels required when called:   19
  4131 ;; This function calls:
  4132 ;;		_lcd_gotoxy
  4133 ;;		_lcd_putc
  4134 ;;		_printf
  4135 ;; This function is called by:
  4136 ;;		_drawScreen
  4137 ;; This function uses a non-reentrant model
  4138 ;;
  4139                           
  4140                           	psect	text13
  4141  0028D0                     __ptext13:
  4142                           	opt stack 0
  4143  0028D0                     _drawMenu:
  4144                           	opt stack 10
  4145                           
  4146                           ;incstack = 0
  4147                           ;drawMenu@adv stored from wreg
  4148  0028D0  0101               	movlb	1	; () banked
  4149  0028D2  6F74               	movwf	drawMenu@adv& (0+255),b
  4150                           
  4151                           ;screenDrawers.h: 90: switch (menuSection) {
  4152  0028D4  D0C9               	goto	l10445
  4153  0028D6                     l10391:
  4154                           
  4155                           ;screenDrawers.h: 92: lcd_gotoxy(1, 1);
  4156  0028D6  0E01               	movlw	1
  4157  0028D8  0101               	movlb	1	; () banked
  4158  0028DA  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4159  0028DC  0E01               	movlw	1
  4160  0028DE  EC51  F035         	call	_lcd_gotoxy
  4161                           
  4162                           ;screenDrawers.h: 93: printf("Estado proceso: \n");
  4163  0028E2  0E25               	movlw	low STR_7
  4164  0028E4  0101               	movlb	1	; () banked
  4165  0028E6  6F3F               	movwf	printf@f& (0+255),b
  4166  0028E8  0E7E               	movlw	high STR_7
  4167  0028EA  0101               	movlb	1	; () banked
  4168  0028EC  6F40               	movwf	(printf@f+1)& (0+255),b
  4169  0028EE  EC61  F000         	call	_printf	;wreg free
  4170                           
  4171                           ;screenDrawers.h: 94: if (adv)
  4172  0028F2  0101               	movlb	1	; () banked
  4173  0028F4  5174               	movf	drawMenu@adv& (0+255),w,b
  4174  0028F6  0101               	movlb	1	; () banked
  4175  0028F8  B4D8               	btfsc	status,2,c
  4176  0028FA  D004               	goto	l10399
  4177                           
  4178                           ; BSR set to: 1
  4179                           ;screenDrawers.h: 95: lcd_putc('A');
  4180  0028FC  0E41               	movlw	65
  4181  0028FE  ECD9  F02F         	call	_lcd_putc
  4182  002902  D003               	goto	l371
  4183  002904                     l10399:
  4184                           
  4185                           ;screenDrawers.h: 96: else
  4186                           ;screenDrawers.h: 97: lcd_putc(' ');
  4187  002904  0E20               	movlw	32
  4188  002906  ECD9  F02F         	call	_lcd_putc
  4189  00290A                     l371:
  4190                           
  4191                           ;screenDrawers.h: 98: lcd_gotoxy(2, 2);
  4192  00290A  0E02               	movlw	2
  4193  00290C  0101               	movlb	1	; () banked
  4194  00290E  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4195  002910  0E02               	movlw	2
  4196  002912  EC51  F035         	call	_lcd_gotoxy
  4197                           
  4198                           ;screenDrawers.h: 99: if(processStarted)
  4199  002916  0100               	movlb	0	; () banked
  4200  002918  51BB               	movf	_processStarted& (0+255),w,b
  4201  00291A  B4D8               	btfsc	status,2,c
  4202  00291C  D011               	goto	l10405
  4203                           
  4204                           ; BSR set to: 0
  4205                           ;screenDrawers.h: 100: printf("   %d / %d    ", processState, numCortes);
  4206  00291E  0ECB               	movlw	low STR_8
  4207  002920  0101               	movlb	1	; () banked
  4208  002922  6F3F               	movwf	printf@f& (0+255),b
  4209  002924  0E7F               	movlw	high STR_8
  4210  002926  0101               	movlb	1	; () banked
  4211  002928  6F40               	movwf	(printf@f+1)& (0+255),b
  4212  00292A  C0B4  F141         	movff	_processState,?_printf+2
  4213  00292E  C0B5  F142         	movff	_processState+1,?_printf+3
  4214  002932  C0C6  F143         	movff	_numCortes,?_printf+4
  4215  002936  C0C7  F144         	movff	_numCortes+1,?_printf+5
  4216  00293A  EC61  F000         	call	_printf	;wreg free
  4217  00293E  0012               	return	
  4218  002940                     l10405:
  4219                           
  4220                           ;screenDrawers.h: 101: else
  4221                           ;screenDrawers.h: 102: printf("    Detenido    ");
  4222  002940  0E88               	movlw	low STR_9
  4223  002942  0101               	movlb	1	; () banked
  4224  002944  6F3F               	movwf	printf@f& (0+255),b
  4225  002946  0E7F               	movlw	high STR_9
  4226  002948  0101               	movlb	1	; () banked
  4227  00294A  6F40               	movwf	(printf@f+1)& (0+255),b
  4228  00294C  EC61  F000         	call	_printf	;wreg free
  4229                           
  4230                           ;screenDrawers.h: 103: break;
  4231  002950  0012               	return	
  4232  002952                     l10407:
  4233                           
  4234                           ;screenDrawers.h: 105: lcd_gotoxy(1, 1);
  4235  002952  0E01               	movlw	1
  4236  002954  0101               	movlb	1	; () banked
  4237  002956  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4238  002958  0E01               	movlw	1
  4239  00295A  EC51  F035         	call	_lcd_gotoxy
  4240                           
  4241                           ;screenDrawers.h: 106: printf("Valor por Corte:\n");
  4242  00295E  0E5B               	movlw	low STR_10
  4243  002960  0101               	movlb	1	; () banked
  4244  002962  6F3F               	movwf	printf@f& (0+255),b
  4245  002964  0E7E               	movlw	high STR_10
  4246  002966  0101               	movlb	1	; () banked
  4247  002968  6F40               	movwf	(printf@f+1)& (0+255),b
  4248  00296A  EC61  F000         	call	_printf	;wreg free
  4249                           
  4250                           ;screenDrawers.h: 107: if (adv)
  4251  00296E  0101               	movlb	1	; () banked
  4252  002970  5174               	movf	drawMenu@adv& (0+255),w,b
  4253  002972  0101               	movlb	1	; () banked
  4254  002974  B4D8               	btfsc	status,2,c
  4255  002976  D004               	goto	l10415
  4256                           
  4257                           ; BSR set to: 1
  4258                           ;screenDrawers.h: 108: lcd_putc('A');
  4259  002978  0E41               	movlw	65
  4260  00297A  ECD9  F02F         	call	_lcd_putc
  4261  00297E  D003               	goto	l377
  4262  002980                     l10415:
  4263                           
  4264                           ;screenDrawers.h: 109: else
  4265                           ;screenDrawers.h: 110: lcd_putc(' ');
  4266  002980  0E20               	movlw	32
  4267  002982  ECD9  F02F         	call	_lcd_putc
  4268  002986                     l377:
  4269                           
  4270                           ;screenDrawers.h: 111: lcd_gotoxy(2, 2);
  4271  002986  0E02               	movlw	2
  4272  002988  0101               	movlb	1	; () banked
  4273  00298A  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4274  00298C  0E02               	movlw	2
  4275  00298E  EC51  F035         	call	_lcd_gotoxy
  4276                           
  4277                           ;screenDrawers.h: 112: printf("   %3.3f kg   ", kgXcorte);
  4278  002992  0EDA               	movlw	low STR_11
  4279  002994  0101               	movlb	1	; () banked
  4280  002996  6F3F               	movwf	printf@f& (0+255),b
  4281  002998  0E7F               	movlw	high STR_11
  4282  00299A  0101               	movlb	1	; () banked
  4283  00299C  6F40               	movwf	(printf@f+1)& (0+255),b
  4284  00299E  C18F  F141         	movff	_kgXcorte,?_printf+2
  4285  0029A2  C190  F142         	movff	_kgXcorte+1,?_printf+3
  4286  0029A6  C191  F143         	movff	_kgXcorte+2,?_printf+4
  4287  0029AA  EC61  F000         	call	_printf	;wreg free
  4288                           
  4289                           ;screenDrawers.h: 113: break;
  4290  0029AE  0012               	return	
  4291  0029B0                     l10419:
  4292                           
  4293                           ;screenDrawers.h: 115: lcd_gotoxy(1, 1);
  4294  0029B0  0E01               	movlw	1
  4295  0029B2  0101               	movlb	1	; () banked
  4296  0029B4  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4297  0029B6  0E01               	movlw	1
  4298  0029B8  EC51  F035         	call	_lcd_gotoxy
  4299                           
  4300                           ;screenDrawers.h: 116: printf("Cantidad Cortes:\n");
  4301  0029BC  0E7F               	movlw	low STR_12
  4302  0029BE  0101               	movlb	1	; () banked
  4303  0029C0  6F3F               	movwf	printf@f& (0+255),b
  4304  0029C2  0E7E               	movlw	high STR_12
  4305  0029C4  0101               	movlb	1	; () banked
  4306  0029C6  6F40               	movwf	(printf@f+1)& (0+255),b
  4307  0029C8  EC61  F000         	call	_printf	;wreg free
  4308                           
  4309                           ;screenDrawers.h: 117: if (adv)
  4310  0029CC  0101               	movlb	1	; () banked
  4311  0029CE  5174               	movf	drawMenu@adv& (0+255),w,b
  4312  0029D0  0101               	movlb	1	; () banked
  4313  0029D2  B4D8               	btfsc	status,2,c
  4314  0029D4  D004               	goto	l10427
  4315                           
  4316                           ; BSR set to: 1
  4317                           ;screenDrawers.h: 118: lcd_putc('A');
  4318  0029D6  0E41               	movlw	65
  4319  0029D8  ECD9  F02F         	call	_lcd_putc
  4320  0029DC  D003               	goto	l380
  4321  0029DE                     l10427:
  4322                           
  4323                           ;screenDrawers.h: 119: else
  4324                           ;screenDrawers.h: 120: lcd_putc(' ');
  4325  0029DE  0E20               	movlw	32
  4326  0029E0  ECD9  F02F         	call	_lcd_putc
  4327  0029E4                     l380:
  4328                           
  4329                           ;screenDrawers.h: 121: lcd_gotoxy(2, 2);
  4330  0029E4  0E02               	movlw	2
  4331  0029E6  0101               	movlb	1	; () banked
  4332  0029E8  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4333  0029EA  0E02               	movlw	2
  4334  0029EC  EC51  F035         	call	_lcd_gotoxy
  4335                           
  4336                           ;screenDrawers.h: 122: printf("      %d       ", numCortes);
  4337  0029F0  0EBB               	movlw	low STR_13
  4338  0029F2  0101               	movlb	1	; () banked
  4339  0029F4  6F3F               	movwf	printf@f& (0+255),b
  4340  0029F6  0E7F               	movlw	high STR_13
  4341  0029F8  0101               	movlb	1	; () banked
  4342  0029FA  6F40               	movwf	(printf@f+1)& (0+255),b
  4343  0029FC  C0C6  F141         	movff	_numCortes,?_printf+2
  4344  002A00  C0C7  F142         	movff	_numCortes+1,?_printf+3
  4345  002A04  EC61  F000         	call	_printf	;wreg free
  4346                           
  4347                           ;screenDrawers.h: 123: break;
  4348  002A08  0012               	return	
  4349  002A0A                     l10431:
  4350                           
  4351                           ;screenDrawers.h: 125: lcd_gotoxy(1, 1);
  4352  002A0A  0E01               	movlw	1
  4353  002A0C  0101               	movlb	1	; () banked
  4354  002A0E  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4355  002A10  0E01               	movlw	1
  4356  002A12  EC51  F035         	call	_lcd_gotoxy
  4357                           
  4358                           ;screenDrawers.h: 126: printf("Velocidad Masa: \n");
  4359  002A16  0E13               	movlw	low STR_14
  4360  002A18  0101               	movlb	1	; () banked
  4361  002A1A  6F3F               	movwf	printf@f& (0+255),b
  4362  002A1C  0E7E               	movlw	high STR_14
  4363  002A1E  0101               	movlb	1	; () banked
  4364  002A20  6F40               	movwf	(printf@f+1)& (0+255),b
  4365  002A22  EC61  F000         	call	_printf	;wreg free
  4366                           
  4367                           ;screenDrawers.h: 127: if (adv)
  4368  002A26  0101               	movlb	1	; () banked
  4369  002A28  5174               	movf	drawMenu@adv& (0+255),w,b
  4370  002A2A  0101               	movlb	1	; () banked
  4371  002A2C  B4D8               	btfsc	status,2,c
  4372  002A2E  D004               	goto	l10439
  4373                           
  4374                           ; BSR set to: 1
  4375                           ;screenDrawers.h: 128: lcd_putc('A');
  4376  002A30  0E41               	movlw	65
  4377  002A32  ECD9  F02F         	call	_lcd_putc
  4378  002A36  D003               	goto	l383
  4379  002A38                     l10439:
  4380                           
  4381                           ;screenDrawers.h: 129: else
  4382                           ;screenDrawers.h: 130: lcd_putc(' ');
  4383  002A38  0E20               	movlw	32
  4384  002A3A  ECD9  F02F         	call	_lcd_putc
  4385  002A3E                     l383:
  4386                           
  4387                           ;screenDrawers.h: 131: lcd_gotoxy(2, 2);
  4388  002A3E  0E02               	movlw	2
  4389  002A40  0101               	movlb	1	; () banked
  4390  002A42  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4391  002A44  0E02               	movlw	2
  4392  002A46  EC51  F035         	call	_lcd_gotoxy
  4393                           
  4394                           ;screenDrawers.h: 132: printf("  %3.3f kg/s  ", velocidadMasa);
  4395  002A4A  0EE9               	movlw	low STR_15
  4396  002A4C  0101               	movlb	1	; () banked
  4397  002A4E  6F3F               	movwf	printf@f& (0+255),b
  4398  002A50  0E7F               	movlw	high STR_15
  4399  002A52  0101               	movlb	1	; () banked
  4400  002A54  6F40               	movwf	(printf@f+1)& (0+255),b
  4401  002A56  C198  F141         	movff	_velocidadMasa,?_printf+2
  4402  002A5A  C199  F142         	movff	_velocidadMasa+1,?_printf+3
  4403  002A5E  C19A  F143         	movff	_velocidadMasa+2,?_printf+4
  4404  002A62  EC61  F000         	call	_printf	;wreg free
  4405                           
  4406                           ;screenDrawers.h: 134: }
  4407                           ;screenDrawers.h: 135: }
  4408                           
  4409                           ;screenDrawers.h: 133: break;
  4410  002A66  0012               	return	
  4411  002A68                     l10445:
  4412  002A68  0101               	movlb	1	; () banked
  4413  002A6A  51CA               	movf	_menuSection& (0+255),w,b
  4414                           
  4415                           ; Switch size 1, requested type "space"
  4416                           ; Number of cases is 4, Range of values is 0 to 3
  4417                           ; switch strategies available:
  4418                           ; Name         Instructions Cycles
  4419                           ; simple_byte           13     7 (average)
  4420                           ;	Chosen strategy is simple_byte
  4421  002A6C  0A00               	xorlw	0	; case 0
  4422  002A6E  B4D8               	btfsc	status,2,c
  4423  002A70  D732               	goto	l10391
  4424  002A72  0A01               	xorlw	1	; case 1
  4425  002A74  B4D8               	btfsc	status,2,c
  4426  002A76  D76D               	goto	l10407
  4427  002A78  0A03               	xorlw	3	; case 2
  4428  002A7A  B4D8               	btfsc	status,2,c
  4429  002A7C  D799               	goto	l10419
  4430  002A7E  0A01               	xorlw	1	; case 3
  4431  002A80  A4D8               	btfss	status,2,c
  4432  002A82  0012               	return	
  4433  002A84  D7C2               	goto	l10431
  4434  002A86                     __end_of_drawMenu:
  4435                           	opt stack 0
  4436                           tblptru	equ	0xFF8
  4437                           tblptrh	equ	0xFF7
  4438                           tblptrl	equ	0xFF6
  4439                           tablat	equ	0xFF5
  4440                           prodh	equ	0xFF4
  4441                           prodl	equ	0xFF3
  4442                           intcon	equ	0xFF2
  4443                           postinc0	equ	0xFEE
  4444                           wreg	equ	0xFE8
  4445                           postdec1	equ	0xFE5
  4446                           fsr1l	equ	0xFE1
  4447                           indf2	equ	0xFDF
  4448                           fsr2h	equ	0xFDA
  4449                           fsr2l	equ	0xFD9
  4450                           status	equ	0xFD8
  4451                           
  4452 ;; *************** function _drawCutError *****************
  4453 ;; Defined at:
  4454 ;;		line 220 in file "source/screenDrawers.h"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;		None
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;		None
  4459 ;; Return value:  Size  Location     Type
  4460 ;;                  1    wreg      void 
  4461 ;; Registers used:
  4462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4468 ;;      Params:         0       0       0       0       0       0       0
  4469 ;;      Locals:         0       0       0       0       0       0       0
  4470 ;;      Temps:          0       0       0       0       0       0       0
  4471 ;;      Totals:         0       0       0       0       0       0       0
  4472 ;;Total ram usage:        0 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:   19
  4475 ;; This function calls:
  4476 ;;		_lcd_gotoxy
  4477 ;;		_printf
  4478 ;; This function is called by:
  4479 ;;		_drawScreen
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           	psect	text14
  4484  006B02                     __ptext14:
  4485                           	opt stack 0
  4486  006B02                     _drawCutError:
  4487                           	opt stack 10
  4488                           
  4489                           ;screenDrawers.h: 221: lcd_gotoxy(1, 1);
  4490                           
  4491                           ;incstack = 0
  4492  006B02  0E01               	movlw	1
  4493  006B04  0101               	movlb	1	; () banked
  4494  006B06  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4495  006B08  0E01               	movlw	1
  4496  006B0A  EC51  F035         	call	_lcd_gotoxy
  4497                           
  4498                           ;screenDrawers.h: 222: printf("Guillotina      \n");
  4499  006B0E  0EEF               	movlw	low STR_33
  4500  006B10  0101               	movlb	1	; () banked
  4501  006B12  6F3F               	movwf	printf@f& (0+255),b
  4502  006B14  0E7D               	movlw	high STR_33
  4503  006B16  0101               	movlb	1	; () banked
  4504  006B18  6F40               	movwf	(printf@f+1)& (0+255),b
  4505  006B1A  EC61  F000         	call	_printf	;wreg free
  4506                           
  4507                           ;screenDrawers.h: 223: printf("      Trancada  ");
  4508  006B1E  0EAA               	movlw	low STR_34
  4509  006B20  0101               	movlb	1	; () banked
  4510  006B22  6F3F               	movwf	printf@f& (0+255),b
  4511  006B24  0E7F               	movlw	high STR_34
  4512  006B26  0101               	movlb	1	; () banked
  4513  006B28  6F40               	movwf	(printf@f+1)& (0+255),b
  4514  006B2A  EC61  F000         	call	_printf	;wreg free
  4515  006B2E  0012               	return		;funcret
  4516  006B30                     __end_of_drawCutError:
  4517                           	opt stack 0
  4518                           tblptru	equ	0xFF8
  4519                           tblptrh	equ	0xFF7
  4520                           tblptrl	equ	0xFF6
  4521                           tablat	equ	0xFF5
  4522                           prodh	equ	0xFF4
  4523                           prodl	equ	0xFF3
  4524                           intcon	equ	0xFF2
  4525                           postinc0	equ	0xFEE
  4526                           wreg	equ	0xFE8
  4527                           postdec1	equ	0xFE5
  4528                           fsr1l	equ	0xFE1
  4529                           indf2	equ	0xFDF
  4530                           fsr2h	equ	0xFDA
  4531                           fsr2l	equ	0xFD9
  4532                           status	equ	0xFD8
  4533                           
  4534 ;; *************** function _drawChanVal *****************
  4535 ;; Defined at:
  4536 ;;		line 138 in file "source/screenDrawers.h"
  4537 ;; Parameters:    Size  Location     Type
  4538 ;;		None
  4539 ;; Auto vars:     Size  Location     Type
  4540 ;;		None
  4541 ;; Return value:  Size  Location     Type
  4542 ;;                  1    wreg      void 
  4543 ;; Registers used:
  4544 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4545 ;; Tracked objects:
  4546 ;;		On entry : 0/0
  4547 ;;		On exit  : 0/0
  4548 ;;		Unchanged: 0/0
  4549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4550 ;;      Params:         0       0       0       0       0       0       0
  4551 ;;      Locals:         0       0       0       0       0       0       0
  4552 ;;      Temps:          0       0       0       0       0       0       0
  4553 ;;      Totals:         0       0       0       0       0       0       0
  4554 ;;Total ram usage:        0 bytes
  4555 ;; Hardware stack levels used:    1
  4556 ;; Hardware stack levels required when called:   20
  4557 ;; This function calls:
  4558 ;;		_drawValEditor
  4559 ;;		_lcd_gotoxy
  4560 ;;		_printf
  4561 ;; This function is called by:
  4562 ;;		_drawScreen
  4563 ;; This function uses a non-reentrant model
  4564 ;;
  4565                           
  4566                           	psect	text15
  4567  005EB2                     __ptext15:
  4568                           	opt stack 0
  4569  005EB2                     _drawChanVal:
  4570                           	opt stack 9
  4571                           
  4572                           ;screenDrawers.h: 139: switch (menuSection) {
  4573                           
  4574                           ;incstack = 0
  4575  005EB2  D034               	goto	l10465
  4576  005EB4                     l10449:
  4577                           
  4578                           ;screenDrawers.h: 143: lcd_gotoxy(1, 1);
  4579  005EB4  0E01               	movlw	1
  4580  005EB6  0101               	movlb	1	; () banked
  4581  005EB8  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4582  005EBA  0E01               	movlw	1
  4583  005EBC  EC51  F035         	call	_lcd_gotoxy
  4584                           
  4585                           ;screenDrawers.h: 144: printf("Valor por Corte:\n");
  4586  005EC0  0E5B               	movlw	low STR_10
  4587  005EC2  0101               	movlb	1	; () banked
  4588  005EC4  6F3F               	movwf	printf@f& (0+255),b
  4589  005EC6  0E7E               	movlw	high STR_10
  4590  005EC8  0101               	movlb	1	; () banked
  4591  005ECA  6F40               	movwf	(printf@f+1)& (0+255),b
  4592  005ECC  EC61  F000         	call	_printf	;wreg free
  4593                           
  4594                           ;screenDrawers.h: 145: drawValEditor();
  4595  005ED0  ECD1  F008         	call	_drawValEditor	;wreg free
  4596                           
  4597                           ;screenDrawers.h: 146: printf("kg    ");
  4598  005ED4  0EF8               	movlw	low STR_17
  4599  005ED6  0101               	movlb	1	; () banked
  4600  005ED8  6F3F               	movwf	printf@f& (0+255),b
  4601  005EDA  0E7F               	movlw	high STR_17
  4602  005EDC  0101               	movlb	1	; () banked
  4603  005EDE  6F40               	movwf	(printf@f+1)& (0+255),b
  4604  005EE0  EC61  F000         	call	_printf	;wreg free
  4605                           
  4606                           ;screenDrawers.h: 147: break;
  4607  005EE4  0012               	return	
  4608  005EE6                     l10457:
  4609                           
  4610                           ;screenDrawers.h: 149: lcd_gotoxy(1, 1);
  4611  005EE6  0E01               	movlw	1
  4612  005EE8  0101               	movlb	1	; () banked
  4613  005EEA  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4614  005EEC  0E01               	movlw	1
  4615  005EEE  EC51  F035         	call	_lcd_gotoxy
  4616                           
  4617                           ;screenDrawers.h: 150: printf("Cantidad Cortes:\n");
  4618  005EF2  0E7F               	movlw	low STR_12
  4619  005EF4  0101               	movlb	1	; () banked
  4620  005EF6  6F3F               	movwf	printf@f& (0+255),b
  4621  005EF8  0E7E               	movlw	high STR_12
  4622  005EFA  0101               	movlb	1	; () banked
  4623  005EFC  6F40               	movwf	(printf@f+1)& (0+255),b
  4624  005EFE  EC61  F000         	call	_printf	;wreg free
  4625                           
  4626                           ;screenDrawers.h: 151: printf("      %d       ", chanVals);
  4627  005F02  0EBB               	movlw	low STR_13
  4628  005F04  0101               	movlb	1	; () banked
  4629  005F06  6F3F               	movwf	printf@f& (0+255),b
  4630  005F08  0E7F               	movlw	high STR_13
  4631  005F0A  0101               	movlb	1	; () banked
  4632  005F0C  6F40               	movwf	(printf@f+1)& (0+255),b
  4633  005F0E  C1BA  F141         	movff	_chanVals,?_printf+2
  4634  005F12  C1BB  F142         	movff	_chanVals+1,?_printf+3
  4635  005F16  EC61  F000         	call	_printf	;wreg free
  4636                           
  4637                           ;screenDrawers.h: 155: }
  4638                           ;screenDrawers.h: 156: }
  4639                           
  4640                           ;screenDrawers.h: 154: break;
  4641                           
  4642                           ;screenDrawers.h: 153: }case (3): {
  4643                           
  4644                           ;screenDrawers.h: 152: break;
  4645  005F1A  0012               	return	
  4646  005F1C                     l10465:
  4647  005F1C  0101               	movlb	1	; () banked
  4648  005F1E  51CA               	movf	_menuSection& (0+255),w,b
  4649                           
  4650                           ; Switch size 1, requested type "space"
  4651                           ; Number of cases is 4, Range of values is 0 to 3
  4652                           ; switch strategies available:
  4653                           ; Name         Instructions Cycles
  4654                           ; simple_byte           13     7 (average)
  4655                           ;	Chosen strategy is simple_byte
  4656  005F20  0A00               	xorlw	0	; case 0
  4657  005F22  B4D8               	btfsc	status,2,c
  4658  005F24  0012               	return	
  4659  005F26  0A01               	xorlw	1	; case 1
  4660  005F28  B4D8               	btfsc	status,2,c
  4661  005F2A  D7C4               	goto	l10449
  4662  005F2C  0A03               	xorlw	3	; case 2
  4663  005F2E  B4D8               	btfsc	status,2,c
  4664  005F30  D7DA               	goto	l10457
  4665  005F32  0A01               	xorlw	1	; case 3
  4666  005F34  0012               	return	
  4667  005F36                     __end_of_drawChanVal:
  4668                           	opt stack 0
  4669                           tblptru	equ	0xFF8
  4670                           tblptrh	equ	0xFF7
  4671                           tblptrl	equ	0xFF6
  4672                           tablat	equ	0xFF5
  4673                           prodh	equ	0xFF4
  4674                           prodl	equ	0xFF3
  4675                           intcon	equ	0xFF2
  4676                           postinc0	equ	0xFEE
  4677                           wreg	equ	0xFE8
  4678                           postdec1	equ	0xFE5
  4679                           fsr1l	equ	0xFE1
  4680                           indf2	equ	0xFDF
  4681                           fsr2h	equ	0xFDA
  4682                           fsr2l	equ	0xFD9
  4683                           status	equ	0xFD8
  4684                           
  4685 ;; *************** function _drawCalibProc *****************
  4686 ;; Defined at:
  4687 ;;		line 226 in file "source/screenDrawers.h"
  4688 ;; Parameters:    Size  Location     Type
  4689 ;;		None
  4690 ;; Auto vars:     Size  Location     Type
  4691 ;;		None
  4692 ;; Return value:  Size  Location     Type
  4693 ;;                  1    wreg      void 
  4694 ;; Registers used:
  4695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4696 ;; Tracked objects:
  4697 ;;		On entry : 0/0
  4698 ;;		On exit  : 0/0
  4699 ;;		Unchanged: 0/0
  4700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4701 ;;      Params:         0       0       0       0       0       0       0
  4702 ;;      Locals:         0       0       0       0       0       0       0
  4703 ;;      Temps:          0       0       0       0       0       0       0
  4704 ;;      Totals:         0       0       0       0       0       0       0
  4705 ;;Total ram usage:        0 bytes
  4706 ;; Hardware stack levels used:    1
  4707 ;; Hardware stack levels required when called:   19
  4708 ;; This function calls:
  4709 ;;		_lcd_gotoxy
  4710 ;;		_printf
  4711 ;; This function is called by:
  4712 ;;		_drawScreen
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           	psect	text16
  4717  005E26                     __ptext16:
  4718                           	opt stack 0
  4719  005E26                     _drawCalibProc:
  4720                           	opt stack 10
  4721                           
  4722                           ;screenDrawers.h: 227: lcd_gotoxy(1, 1);
  4723                           
  4724                           ;incstack = 0
  4725  005E26  0E01               	movlw	1
  4726  005E28  0101               	movlb	1	; () banked
  4727  005E2A  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4728  005E2C  0E01               	movlw	1
  4729  005E2E  EC51  F035         	call	_lcd_gotoxy
  4730                           
  4731                           ;screenDrawers.h: 228: if(calibLevel == 0) {
  4732  005E32  0101               	movlb	1	; () banked
  4733  005E34  51C4               	movf	_calibLevel& (0+255),w,b
  4734  005E36  A4D8               	btfss	status,2,c
  4735  005E38  D011               	goto	l10551
  4736                           
  4737                           ; BSR set to: 1
  4738                           ;screenDrawers.h: 229: printf("Autocalib usando\n");
  4739  005E3A  0EB5               	movlw	low STR_35
  4740  005E3C  0101               	movlb	1	; () banked
  4741  005E3E  6F3F               	movwf	printf@f& (0+255),b
  4742  005E40  0E7E               	movlw	high STR_35
  4743  005E42  0101               	movlb	1	; () banked
  4744  005E44  6F40               	movwf	(printf@f+1)& (0+255),b
  4745  005E46  EC61  F000         	call	_printf	;wreg free
  4746                           
  4747                           ;screenDrawers.h: 230: printf("       1 kg     ");
  4748  005E4A  0E33               	movlw	low STR_36
  4749  005E4C  0101               	movlb	1	; () banked
  4750  005E4E  6F3F               	movwf	printf@f& (0+255),b
  4751  005E50  0E7F               	movlw	high STR_36
  4752  005E52  0101               	movlb	1	; () banked
  4753  005E54  6F40               	movwf	(printf@f+1)& (0+255),b
  4754  005E56  EC61  F000         	call	_printf	;wreg free
  4755                           
  4756                           ;screenDrawers.h: 231: }else if(calibLevel == 1) {
  4757  005E5A  0012               	return	
  4758  005E5C                     l10551:
  4759  005E5C  0101               	movlb	1	; () banked
  4760  005E5E  05C4               	decf	_calibLevel& (0+255),w,b
  4761  005E60  A4D8               	btfss	status,2,c
  4762  005E62  D011               	goto	l10555
  4763                           
  4764                           ; BSR set to: 1
  4765                           ;screenDrawers.h: 232: printf("Autocalib usando\n");
  4766  005E64  0EB5               	movlw	low STR_35
  4767  005E66  0101               	movlb	1	; () banked
  4768  005E68  6F3F               	movwf	printf@f& (0+255),b
  4769  005E6A  0E7E               	movlw	high STR_35
  4770  005E6C  0101               	movlb	1	; () banked
  4771  005E6E  6F40               	movwf	(printf@f+1)& (0+255),b
  4772  005E70  EC61  F000         	call	_printf	;wreg free
  4773                           
  4774                           ;screenDrawers.h: 233: printf("     0.5 kg     ");
  4775  005E74  0E44               	movlw	low STR_38
  4776  005E76  0101               	movlb	1	; () banked
  4777  005E78  6F3F               	movwf	printf@f& (0+255),b
  4778  005E7A  0E7F               	movlw	high STR_38
  4779  005E7C  0101               	movlb	1	; () banked
  4780  005E7E  6F40               	movwf	(printf@f+1)& (0+255),b
  4781  005E80  EC61  F000         	call	_printf	;wreg free
  4782                           
  4783                           ;screenDrawers.h: 234: }else if(calibLevel == 2) {
  4784  005E84  0012               	return	
  4785  005E86                     l10555:
  4786  005E86  0E02               	movlw	2
  4787  005E88  0101               	movlb	1	; () banked
  4788  005E8A  19C4               	xorwf	_calibLevel& (0+255),w,b
  4789  005E8C  A4D8               	btfss	status,2,c
  4790  005E8E  0012               	return	
  4791                           
  4792                           ; BSR set to: 1
  4793                           ;screenDrawers.h: 235: printf("Autocalib usando\n");
  4794  005E90  0EB5               	movlw	low STR_35
  4795  005E92  0101               	movlb	1	; () banked
  4796  005E94  6F3F               	movwf	printf@f& (0+255),b
  4797  005E96  0E7E               	movlw	high STR_35
  4798  005E98  0101               	movlb	1	; () banked
  4799  005E9A  6F40               	movwf	(printf@f+1)& (0+255),b
  4800  005E9C  EC61  F000         	call	_printf	;wreg free
  4801                           
  4802                           ;screenDrawers.h: 236: printf("    0.25 kg     ");
  4803  005EA0  0E55               	movlw	low STR_40
  4804  005EA2  0101               	movlb	1	; () banked
  4805  005EA4  6F3F               	movwf	printf@f& (0+255),b
  4806  005EA6  0E7F               	movlw	high STR_40
  4807  005EA8  0101               	movlb	1	; () banked
  4808  005EAA  6F40               	movwf	(printf@f+1)& (0+255),b
  4809  005EAC  EC61  F000         	call	_printf	;wreg free
  4810  005EB0  0012               	return	
  4811  005EB2                     __end_of_drawCalibProc:
  4812                           	opt stack 0
  4813                           tblptru	equ	0xFF8
  4814                           tblptrh	equ	0xFF7
  4815                           tblptrl	equ	0xFF6
  4816                           tablat	equ	0xFF5
  4817                           prodh	equ	0xFF4
  4818                           prodl	equ	0xFF3
  4819                           intcon	equ	0xFF2
  4820                           postinc0	equ	0xFEE
  4821                           wreg	equ	0xFE8
  4822                           postdec1	equ	0xFE5
  4823                           fsr1l	equ	0xFE1
  4824                           indf2	equ	0xFDF
  4825                           fsr2h	equ	0xFDA
  4826                           fsr2l	equ	0xFD9
  4827                           status	equ	0xFD8
  4828                           
  4829 ;; *************** function _drawBadPass *****************
  4830 ;; Defined at:
  4831 ;;		line 182 in file "source/screenDrawers.h"
  4832 ;; Parameters:    Size  Location     Type
  4833 ;;		None
  4834 ;; Auto vars:     Size  Location     Type
  4835 ;;		None
  4836 ;; Return value:  Size  Location     Type
  4837 ;;                  1    wreg      void 
  4838 ;; Registers used:
  4839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4840 ;; Tracked objects:
  4841 ;;		On entry : 0/0
  4842 ;;		On exit  : 0/0
  4843 ;;		Unchanged: 0/0
  4844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4845 ;;      Params:         0       0       0       0       0       0       0
  4846 ;;      Locals:         0       0       0       0       0       0       0
  4847 ;;      Temps:          0       0       0       0       0       0       0
  4848 ;;      Totals:         0       0       0       0       0       0       0
  4849 ;;Total ram usage:        0 bytes
  4850 ;; Hardware stack levels used:    1
  4851 ;; Hardware stack levels required when called:   20
  4852 ;; This function calls:
  4853 ;;		_drawPass1Lin
  4854 ;;		_printf
  4855 ;; This function is called by:
  4856 ;;		_drawScreen
  4857 ;; This function uses a non-reentrant model
  4858 ;;
  4859                           
  4860                           	psect	text17
  4861  006CD2                     __ptext17:
  4862                           	opt stack 0
  4863  006CD2                     _drawBadPass:
  4864                           	opt stack 9
  4865                           
  4866                           ;screenDrawers.h: 183: drawPass1Lin();
  4867                           
  4868                           ;incstack = 0
  4869  006CD2  EC36  F036         	call	_drawPass1Lin	;wreg free
  4870                           
  4871                           ;screenDrawers.h: 184: printf("     Erronea    ");
  4872  006CD6  0E66               	movlw	low STR_22
  4873  006CD8  0101               	movlb	1	; () banked
  4874  006CDA  6F3F               	movwf	printf@f& (0+255),b
  4875  006CDC  0E7F               	movlw	high STR_22
  4876  006CDE  0101               	movlb	1	; () banked
  4877  006CE0  6F40               	movwf	(printf@f+1)& (0+255),b
  4878  006CE2  EC61  F000         	call	_printf	;wreg free
  4879  006CE6  0012               	return		;funcret
  4880  006CE8                     __end_of_drawBadPass:
  4881                           	opt stack 0
  4882                           tblptru	equ	0xFF8
  4883                           tblptrh	equ	0xFF7
  4884                           tblptrl	equ	0xFF6
  4885                           tablat	equ	0xFF5
  4886                           prodh	equ	0xFF4
  4887                           prodl	equ	0xFF3
  4888                           intcon	equ	0xFF2
  4889                           postinc0	equ	0xFEE
  4890                           wreg	equ	0xFE8
  4891                           postdec1	equ	0xFE5
  4892                           fsr1l	equ	0xFE1
  4893                           indf2	equ	0xFDF
  4894                           fsr2h	equ	0xFDA
  4895                           fsr2l	equ	0xFD9
  4896                           status	equ	0xFD8
  4897                           
  4898 ;; *************** function _drawPass1Lin *****************
  4899 ;; Defined at:
  4900 ;;		line 159 in file "source/screenDrawers.h"
  4901 ;; Parameters:    Size  Location     Type
  4902 ;;		None
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;		None
  4905 ;; Return value:  Size  Location     Type
  4906 ;;                  1    wreg      void 
  4907 ;; Registers used:
  4908 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4909 ;; Tracked objects:
  4910 ;;		On entry : 0/0
  4911 ;;		On exit  : 0/0
  4912 ;;		Unchanged: 0/0
  4913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4914 ;;      Params:         0       0       0       0       0       0       0
  4915 ;;      Locals:         0       0       0       0       0       0       0
  4916 ;;      Temps:          0       0       0       0       0       0       0
  4917 ;;      Totals:         0       0       0       0       0       0       0
  4918 ;;Total ram usage:        0 bytes
  4919 ;; Hardware stack levels used:    1
  4920 ;; Hardware stack levels required when called:   19
  4921 ;; This function calls:
  4922 ;;		_lcd_gotoxy
  4923 ;;		_printf
  4924 ;; This function is called by:
  4925 ;;		_drawPassWord
  4926 ;;		_drawBadPass
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           	psect	text18
  4931  006C6C                     __ptext18:
  4932                           	opt stack 0
  4933  006C6C                     _drawPass1Lin:
  4934                           	opt stack 9
  4935                           
  4936                           ;screenDrawers.h: 160: lcd_gotoxy(1, 1);
  4937                           
  4938                           ;incstack = 0
  4939  006C6C  0E01               	movlw	1
  4940  006C6E  0101               	movlb	1	; () banked
  4941  006C70  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4942  006C72  0E01               	movlw	1
  4943  006C74  EC51  F035         	call	_lcd_gotoxy
  4944                           
  4945                           ;screenDrawers.h: 161: printf("Contrasena:     \n");
  4946  006C78  0E01               	movlw	low STR_20
  4947  006C7A  0101               	movlb	1	; () banked
  4948  006C7C  6F3F               	movwf	printf@f& (0+255),b
  4949  006C7E  0E7E               	movlw	high STR_20
  4950  006C80  0101               	movlb	1	; () banked
  4951  006C82  6F40               	movwf	(printf@f+1)& (0+255),b
  4952  006C84  EC61  F000         	call	_printf	;wreg free
  4953  006C88  0012               	return		;funcret
  4954  006C8A                     __end_of_drawPass1Lin:
  4955                           	opt stack 0
  4956                           tblptru	equ	0xFF8
  4957                           tblptrh	equ	0xFF7
  4958                           tblptrl	equ	0xFF6
  4959                           tablat	equ	0xFF5
  4960                           prodh	equ	0xFF4
  4961                           prodl	equ	0xFF3
  4962                           intcon	equ	0xFF2
  4963                           postinc0	equ	0xFEE
  4964                           wreg	equ	0xFE8
  4965                           postdec1	equ	0xFE5
  4966                           fsr1l	equ	0xFE1
  4967                           indf2	equ	0xFDF
  4968                           fsr2h	equ	0xFDA
  4969                           fsr2l	equ	0xFD9
  4970                           status	equ	0xFD8
  4971                           
  4972 ;; *************** function _drawAutoCalibRM *****************
  4973 ;; Defined at:
  4974 ;;		line 213 in file "source/screenDrawers.h"
  4975 ;; Parameters:    Size  Location     Type
  4976 ;;		None
  4977 ;; Auto vars:     Size  Location     Type
  4978 ;;		None
  4979 ;; Return value:  Size  Location     Type
  4980 ;;                  1    wreg      void 
  4981 ;; Registers used:
  4982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4983 ;; Tracked objects:
  4984 ;;		On entry : 0/0
  4985 ;;		On exit  : 0/0
  4986 ;;		Unchanged: 0/0
  4987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4988 ;;      Params:         0       0       0       0       0       0       0
  4989 ;;      Locals:         0       0       0       0       0       0       0
  4990 ;;      Temps:          0       0       0       0       0       0       0
  4991 ;;      Totals:         0       0       0       0       0       0       0
  4992 ;;Total ram usage:        0 bytes
  4993 ;; Hardware stack levels used:    1
  4994 ;; Hardware stack levels required when called:   20
  4995 ;; This function calls:
  4996 ;;		_drawValEditor
  4997 ;;		_lcd_gotoxy
  4998 ;;		_printf
  4999 ;; This function is called by:
  5000 ;;		_drawScreen
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           	psect	text19
  5005  006A70                     __ptext19:
  5006                           	opt stack 0
  5007  006A70                     _drawAutoCalibRM:
  5008                           	opt stack 9
  5009                           
  5010                           ;screenDrawers.h: 214: lcd_gotoxy(1, 1);
  5011                           
  5012                           ;incstack = 0
  5013  006A70  0E01               	movlw	1
  5014  006A72  0101               	movlb	1	; () banked
  5015  006A74  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5016  006A76  0E01               	movlw	1
  5017  006A78  EC51  F035         	call	_lcd_gotoxy
  5018                           
  5019                           ;screenDrawers.h: 215: printf("Peso Real:      \n");
  5020  006A7C  0EDD               	movlw	low STR_31
  5021  006A7E  0101               	movlb	1	; () banked
  5022  006A80  6F3F               	movwf	printf@f& (0+255),b
  5023  006A82  0E7D               	movlw	high STR_31
  5024  006A84  0101               	movlb	1	; () banked
  5025  006A86  6F40               	movwf	(printf@f+1)& (0+255),b
  5026  006A88  EC61  F000         	call	_printf	;wreg free
  5027                           
  5028                           ;screenDrawers.h: 216: drawValEditor();
  5029  006A8C  ECD1  F008         	call	_drawValEditor	;wreg free
  5030                           
  5031                           ;screenDrawers.h: 217: printf("kg    ");
  5032  006A90  0EF8               	movlw	low STR_17
  5033  006A92  0101               	movlb	1	; () banked
  5034  006A94  6F3F               	movwf	printf@f& (0+255),b
  5035  006A96  0E7F               	movlw	high STR_17
  5036  006A98  0101               	movlb	1	; () banked
  5037  006A9A  6F40               	movwf	(printf@f+1)& (0+255),b
  5038  006A9C  EC61  F000         	call	_printf	;wreg free
  5039  006AA0  0012               	return		;funcret
  5040  006AA2                     __end_of_drawAutoCalibRM:
  5041                           	opt stack 0
  5042                           tblptru	equ	0xFF8
  5043                           tblptrh	equ	0xFF7
  5044                           tblptrl	equ	0xFF6
  5045                           tablat	equ	0xFF5
  5046                           prodh	equ	0xFF4
  5047                           prodl	equ	0xFF3
  5048                           intcon	equ	0xFF2
  5049                           postinc0	equ	0xFEE
  5050                           wreg	equ	0xFE8
  5051                           postdec1	equ	0xFE5
  5052                           fsr1l	equ	0xFE1
  5053                           indf2	equ	0xFDF
  5054                           fsr2h	equ	0xFDA
  5055                           fsr2l	equ	0xFD9
  5056                           status	equ	0xFD8
  5057                           
  5058 ;; *************** function _drawValEditor *****************
  5059 ;; Defined at:
  5060 ;;		line 60 in file "source/screenDrawers.h"
  5061 ;; Parameters:    Size  Location     Type
  5062 ;;		None
  5063 ;; Auto vars:     Size  Location     Type
  5064 ;;		None
  5065 ;; Return value:  Size  Location     Type
  5066 ;;                  1    wreg      void 
  5067 ;; Registers used:
  5068 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5069 ;; Tracked objects:
  5070 ;;		On entry : 0/0
  5071 ;;		On exit  : 0/0
  5072 ;;		Unchanged: 0/0
  5073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5074 ;;      Params:         0       0       0       0       0       0       0
  5075 ;;      Locals:         0       0       0       0       0       0       0
  5076 ;;      Temps:          0       0       0       0       0       0       0
  5077 ;;      Totals:         0       0       0       0       0       0       0
  5078 ;;Total ram usage:        0 bytes
  5079 ;; Hardware stack levels used:    1
  5080 ;; Hardware stack levels required when called:   19
  5081 ;; This function calls:
  5082 ;;		_lcd_gotoxy
  5083 ;;		_printf
  5084 ;; This function is called by:
  5085 ;;		_drawChanVal
  5086 ;;		_drawAutoCalibRM
  5087 ;; This function uses a non-reentrant model
  5088 ;;
  5089                           
  5090                           	psect	text20
  5091  0011A2                     __ptext20:
  5092                           	opt stack 0
  5093  0011A2                     _drawValEditor:
  5094                           	opt stack 9
  5095                           
  5096                           ;screenDrawers.h: 61: if(chanValSection == 5) {
  5097                           
  5098                           ;incstack = 0
  5099  0011A2  0E05               	movlw	5
  5100  0011A4  0101               	movlb	1	; () banked
  5101  0011A6  199D               	xorwf	_chanValSection& (0+255),w,b
  5102  0011A8  A4D8               	btfss	status,2,c
  5103  0011AA  D037               	goto	l10205
  5104                           
  5105                           ; BSR set to: 1
  5106                           ;screenDrawers.h: 62: printf(" %u%u%u.%u%u%c%u ", chanValdig[0], chanValdig[1],
  5107                           ;screenDrawers.h: 63: chanValdig[2], chanValdig[3], chanValdig[4], flech, chanValdig[5])
      +                          ;
  5108  0011AC  0EC7               	movlw	low STR_1
  5109  0011AE  0101               	movlb	1	; () banked
  5110  0011B0  6F3F               	movwf	printf@f& (0+255),b
  5111  0011B2  0E7E               	movlw	high STR_1
  5112  0011B4  0101               	movlb	1	; () banked
  5113  0011B6  6F40               	movwf	(printf@f+1)& (0+255),b
  5114  0011B8  0101               	movlb	1	; () banked
  5115  0011BA  51A9               	movf	_chanValdig& (0+255),w,b
  5116  0011BC  0101               	movlb	1	; () banked
  5117  0011BE  6F41               	movwf	(?_printf+2)& (0+255),b
  5118  0011C0  6B42               	clrf	(?_printf+3)& (0+255),b
  5119  0011C2  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5120  0011C4  0742               	decf	(?_printf+3)& (0+255),f,b
  5121  0011C6  0101               	movlb	1	; () banked
  5122  0011C8  51AA               	movf	(_chanValdig+1)& (0+255),w,b
  5123  0011CA  0101               	movlb	1	; () banked
  5124  0011CC  6F43               	movwf	(?_printf+4)& (0+255),b
  5125  0011CE  6B44               	clrf	(?_printf+5)& (0+255),b
  5126  0011D0  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5127  0011D2  0744               	decf	(?_printf+5)& (0+255),f,b
  5128  0011D4  0101               	movlb	1	; () banked
  5129  0011D6  51AB               	movf	(_chanValdig+2)& (0+255),w,b
  5130  0011D8  0101               	movlb	1	; () banked
  5131  0011DA  6F45               	movwf	(?_printf+6)& (0+255),b
  5132  0011DC  6B46               	clrf	(?_printf+7)& (0+255),b
  5133  0011DE  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5134  0011E0  0746               	decf	(?_printf+7)& (0+255),f,b
  5135  0011E2  0101               	movlb	1	; () banked
  5136  0011E4  51AC               	movf	(_chanValdig+3)& (0+255),w,b
  5137  0011E6  0101               	movlb	1	; () banked
  5138  0011E8  6F47               	movwf	(?_printf+8)& (0+255),b
  5139  0011EA  6B48               	clrf	(?_printf+9)& (0+255),b
  5140  0011EC  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5141  0011EE  0748               	decf	(?_printf+9)& (0+255),f,b
  5142  0011F0  0101               	movlb	1	; () banked
  5143  0011F2  51AD               	movf	(_chanValdig+4)& (0+255),w,b
  5144  0011F4  0101               	movlb	1	; () banked
  5145  0011F6  6F49               	movwf	(?_printf+10)& (0+255),b
  5146  0011F8  6B4A               	clrf	(?_printf+11)& (0+255),b
  5147  0011FA  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5148  0011FC  074A               	decf	(?_printf+11)& (0+255),f,b
  5149  0011FE  C19E  F14B         	movff	_flech,?_printf+12
  5150  001202  0101               	movlb	1	; () banked
  5151  001204  6B4C               	clrf	(?_printf+13)& (0+255),b
  5152  001206  0101               	movlb	1	; () banked
  5153  001208  51AE               	movf	(_chanValdig+5)& (0+255),w,b
  5154  00120A  0101               	movlb	1	; () banked
  5155  00120C  6F4D               	movwf	(?_printf+14)& (0+255),b
  5156  00120E  6B4E               	clrf	(?_printf+15)& (0+255),b
  5157  001210  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5158  001212  074E               	decf	(?_printf+15)& (0+255),f,b
  5159  001214  EC61  F000         	call	_printf	;wreg free
  5160                           
  5161                           ;screenDrawers.h: 64: }else if(chanValSection == 4) {
  5162  001218  D129               	goto	l10225
  5163  00121A                     l10205:
  5164  00121A  0E04               	movlw	4
  5165  00121C  0101               	movlb	1	; () banked
  5166  00121E  199D               	xorwf	_chanValSection& (0+255),w,b
  5167  001220  A4D8               	btfss	status,2,c
  5168  001222  D037               	goto	l10209
  5169                           
  5170                           ; BSR set to: 1
  5171                           ;screenDrawers.h: 65: printf(" %u%u%u.%u%c%u%u ", chanValdig[0], chanValdig[1],
  5172                           ;screenDrawers.h: 66: chanValdig[2], chanValdig[3], flech, chanValdig[4], chanValdig[5])
      +                          ;
  5173  001224  0ED9               	movlw	low STR_2
  5174  001226  0101               	movlb	1	; () banked
  5175  001228  6F3F               	movwf	printf@f& (0+255),b
  5176  00122A  0E7E               	movlw	high STR_2
  5177  00122C  0101               	movlb	1	; () banked
  5178  00122E  6F40               	movwf	(printf@f+1)& (0+255),b
  5179  001230  0101               	movlb	1	; () banked
  5180  001232  51A9               	movf	_chanValdig& (0+255),w,b
  5181  001234  0101               	movlb	1	; () banked
  5182  001236  6F41               	movwf	(?_printf+2)& (0+255),b
  5183  001238  6B42               	clrf	(?_printf+3)& (0+255),b
  5184  00123A  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5185  00123C  0742               	decf	(?_printf+3)& (0+255),f,b
  5186  00123E  0101               	movlb	1	; () banked
  5187  001240  51AA               	movf	(_chanValdig+1)& (0+255),w,b
  5188  001242  0101               	movlb	1	; () banked
  5189  001244  6F43               	movwf	(?_printf+4)& (0+255),b
  5190  001246  6B44               	clrf	(?_printf+5)& (0+255),b
  5191  001248  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5192  00124A  0744               	decf	(?_printf+5)& (0+255),f,b
  5193  00124C  0101               	movlb	1	; () banked
  5194  00124E  51AB               	movf	(_chanValdig+2)& (0+255),w,b
  5195  001250  0101               	movlb	1	; () banked
  5196  001252  6F45               	movwf	(?_printf+6)& (0+255),b
  5197  001254  6B46               	clrf	(?_printf+7)& (0+255),b
  5198  001256  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5199  001258  0746               	decf	(?_printf+7)& (0+255),f,b
  5200  00125A  0101               	movlb	1	; () banked
  5201  00125C  51AC               	movf	(_chanValdig+3)& (0+255),w,b
  5202  00125E  0101               	movlb	1	; () banked
  5203  001260  6F47               	movwf	(?_printf+8)& (0+255),b
  5204  001262  6B48               	clrf	(?_printf+9)& (0+255),b
  5205  001264  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5206  001266  0748               	decf	(?_printf+9)& (0+255),f,b
  5207  001268  C19E  F149         	movff	_flech,?_printf+10
  5208  00126C  0101               	movlb	1	; () banked
  5209  00126E  6B4A               	clrf	(?_printf+11)& (0+255),b
  5210  001270  0101               	movlb	1	; () banked
  5211  001272  51AD               	movf	(_chanValdig+4)& (0+255),w,b
  5212  001274  0101               	movlb	1	; () banked
  5213  001276  6F4B               	movwf	(?_printf+12)& (0+255),b
  5214  001278  6B4C               	clrf	(?_printf+13)& (0+255),b
  5215  00127A  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5216  00127C  074C               	decf	(?_printf+13)& (0+255),f,b
  5217  00127E  0101               	movlb	1	; () banked
  5218  001280  51AE               	movf	(_chanValdig+5)& (0+255),w,b
  5219  001282  0101               	movlb	1	; () banked
  5220  001284  6F4D               	movwf	(?_printf+14)& (0+255),b
  5221  001286  6B4E               	clrf	(?_printf+15)& (0+255),b
  5222  001288  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5223  00128A  074E               	decf	(?_printf+15)& (0+255),f,b
  5224  00128C  EC61  F000         	call	_printf	;wreg free
  5225                           
  5226                           ;screenDrawers.h: 67: }else if(chanValSection == 3) {
  5227  001290  D0ED               	goto	l10225
  5228  001292                     l10209:
  5229  001292  0E03               	movlw	3
  5230  001294  0101               	movlb	1	; () banked
  5231  001296  199D               	xorwf	_chanValSection& (0+255),w,b
  5232  001298  A4D8               	btfss	status,2,c
  5233  00129A  D037               	goto	l10213
  5234                           
  5235                           ; BSR set to: 1
  5236                           ;screenDrawers.h: 68: printf(" %u%u%u.%c%u%u%u ", chanValdig[0], chanValdig[1],
  5237                           ;screenDrawers.h: 69: chanValdig[2], flech, chanValdig[3], chanValdig[4], chanValdig[5])
      +                          ;
  5238  00129C  0E21               	movlw	low STR_3
  5239  00129E  0101               	movlb	1	; () banked
  5240  0012A0  6F3F               	movwf	printf@f& (0+255),b
  5241  0012A2  0E7F               	movlw	high STR_3
  5242  0012A4  0101               	movlb	1	; () banked
  5243  0012A6  6F40               	movwf	(printf@f+1)& (0+255),b
  5244  0012A8  0101               	movlb	1	; () banked
  5245  0012AA  51A9               	movf	_chanValdig& (0+255),w,b
  5246  0012AC  0101               	movlb	1	; () banked
  5247  0012AE  6F41               	movwf	(?_printf+2)& (0+255),b
  5248  0012B0  6B42               	clrf	(?_printf+3)& (0+255),b
  5249  0012B2  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5250  0012B4  0742               	decf	(?_printf+3)& (0+255),f,b
  5251  0012B6  0101               	movlb	1	; () banked
  5252  0012B8  51AA               	movf	(_chanValdig+1)& (0+255),w,b
  5253  0012BA  0101               	movlb	1	; () banked
  5254  0012BC  6F43               	movwf	(?_printf+4)& (0+255),b
  5255  0012BE  6B44               	clrf	(?_printf+5)& (0+255),b
  5256  0012C0  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5257  0012C2  0744               	decf	(?_printf+5)& (0+255),f,b
  5258  0012C4  0101               	movlb	1	; () banked
  5259  0012C6  51AB               	movf	(_chanValdig+2)& (0+255),w,b
  5260  0012C8  0101               	movlb	1	; () banked
  5261  0012CA  6F45               	movwf	(?_printf+6)& (0+255),b
  5262  0012CC  6B46               	clrf	(?_printf+7)& (0+255),b
  5263  0012CE  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5264  0012D0  0746               	decf	(?_printf+7)& (0+255),f,b
  5265  0012D2  C19E  F147         	movff	_flech,?_printf+8
  5266  0012D6  0101               	movlb	1	; () banked
  5267  0012D8  6B48               	clrf	(?_printf+9)& (0+255),b
  5268  0012DA  0101               	movlb	1	; () banked
  5269  0012DC  51AC               	movf	(_chanValdig+3)& (0+255),w,b
  5270  0012DE  0101               	movlb	1	; () banked
  5271  0012E0  6F49               	movwf	(?_printf+10)& (0+255),b
  5272  0012E2  6B4A               	clrf	(?_printf+11)& (0+255),b
  5273  0012E4  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5274  0012E6  074A               	decf	(?_printf+11)& (0+255),f,b
  5275  0012E8  0101               	movlb	1	; () banked
  5276  0012EA  51AD               	movf	(_chanValdig+4)& (0+255),w,b
  5277  0012EC  0101               	movlb	1	; () banked
  5278  0012EE  6F4B               	movwf	(?_printf+12)& (0+255),b
  5279  0012F0  6B4C               	clrf	(?_printf+13)& (0+255),b
  5280  0012F2  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5281  0012F4  074C               	decf	(?_printf+13)& (0+255),f,b
  5282  0012F6  0101               	movlb	1	; () banked
  5283  0012F8  51AE               	movf	(_chanValdig+5)& (0+255),w,b
  5284  0012FA  0101               	movlb	1	; () banked
  5285  0012FC  6F4D               	movwf	(?_printf+14)& (0+255),b
  5286  0012FE  6B4E               	clrf	(?_printf+15)& (0+255),b
  5287  001300  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5288  001302  074E               	decf	(?_printf+15)& (0+255),f,b
  5289  001304  EC61  F000         	call	_printf	;wreg free
  5290                           
  5291                           ;screenDrawers.h: 70: }else if(chanValSection == 2) {
  5292  001308  D0B1               	goto	l10225
  5293  00130A                     l10213:
  5294  00130A  0E02               	movlw	2
  5295  00130C  0101               	movlb	1	; () banked
  5296  00130E  199D               	xorwf	_chanValSection& (0+255),w,b
  5297  001310  A4D8               	btfss	status,2,c
  5298  001312  D037               	goto	l10217
  5299                           
  5300                           ; BSR set to: 1
  5301                           ;screenDrawers.h: 71: printf(" %u%u%c%u.%u%u%u ", chanValdig[0], chanValdig[1], flech,
  5302                           ;screenDrawers.h: 72: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5303  001314  0EEB               	movlw	low STR_4
  5304  001316  0101               	movlb	1	; () banked
  5305  001318  6F3F               	movwf	printf@f& (0+255),b
  5306  00131A  0E7E               	movlw	high STR_4
  5307  00131C  0101               	movlb	1	; () banked
  5308  00131E  6F40               	movwf	(printf@f+1)& (0+255),b
  5309  001320  0101               	movlb	1	; () banked
  5310  001322  51A9               	movf	_chanValdig& (0+255),w,b
  5311  001324  0101               	movlb	1	; () banked
  5312  001326  6F41               	movwf	(?_printf+2)& (0+255),b
  5313  001328  6B42               	clrf	(?_printf+3)& (0+255),b
  5314  00132A  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5315  00132C  0742               	decf	(?_printf+3)& (0+255),f,b
  5316  00132E  0101               	movlb	1	; () banked
  5317  001330  51AA               	movf	(_chanValdig+1)& (0+255),w,b
  5318  001332  0101               	movlb	1	; () banked
  5319  001334  6F43               	movwf	(?_printf+4)& (0+255),b
  5320  001336  6B44               	clrf	(?_printf+5)& (0+255),b
  5321  001338  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5322  00133A  0744               	decf	(?_printf+5)& (0+255),f,b
  5323  00133C  C19E  F145         	movff	_flech,?_printf+6
  5324  001340  0101               	movlb	1	; () banked
  5325  001342  6B46               	clrf	(?_printf+7)& (0+255),b
  5326  001344  0101               	movlb	1	; () banked
  5327  001346  51AB               	movf	(_chanValdig+2)& (0+255),w,b
  5328  001348  0101               	movlb	1	; () banked
  5329  00134A  6F47               	movwf	(?_printf+8)& (0+255),b
  5330  00134C  6B48               	clrf	(?_printf+9)& (0+255),b
  5331  00134E  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5332  001350  0748               	decf	(?_printf+9)& (0+255),f,b
  5333  001352  0101               	movlb	1	; () banked
  5334  001354  51AC               	movf	(_chanValdig+3)& (0+255),w,b
  5335  001356  0101               	movlb	1	; () banked
  5336  001358  6F49               	movwf	(?_printf+10)& (0+255),b
  5337  00135A  6B4A               	clrf	(?_printf+11)& (0+255),b
  5338  00135C  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5339  00135E  074A               	decf	(?_printf+11)& (0+255),f,b
  5340  001360  0101               	movlb	1	; () banked
  5341  001362  51AD               	movf	(_chanValdig+4)& (0+255),w,b
  5342  001364  0101               	movlb	1	; () banked
  5343  001366  6F4B               	movwf	(?_printf+12)& (0+255),b
  5344  001368  6B4C               	clrf	(?_printf+13)& (0+255),b
  5345  00136A  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5346  00136C  074C               	decf	(?_printf+13)& (0+255),f,b
  5347  00136E  0101               	movlb	1	; () banked
  5348  001370  51AE               	movf	(_chanValdig+5)& (0+255),w,b
  5349  001372  0101               	movlb	1	; () banked
  5350  001374  6F4D               	movwf	(?_printf+14)& (0+255),b
  5351  001376  6B4E               	clrf	(?_printf+15)& (0+255),b
  5352  001378  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5353  00137A  074E               	decf	(?_printf+15)& (0+255),f,b
  5354  00137C  EC61  F000         	call	_printf	;wreg free
  5355                           
  5356                           ;screenDrawers.h: 73: }else if(chanValSection == 1) {
  5357  001380  D075               	goto	l10225
  5358  001382                     l10217:
  5359  001382  0101               	movlb	1	; () banked
  5360  001384  059D               	decf	_chanValSection& (0+255),w,b
  5361  001386  A4D8               	btfss	status,2,c
  5362  001388  D037               	goto	l10221
  5363                           
  5364                           ; BSR set to: 1
  5365                           ;screenDrawers.h: 74: printf(" %u%c%u%u.%u%u%u ", chanValdig[0], flech, chanValdig[1],
  5366                           ;screenDrawers.h: 75: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5367  00138A  0EFD               	movlw	low STR_5
  5368  00138C  0101               	movlb	1	; () banked
  5369  00138E  6F3F               	movwf	printf@f& (0+255),b
  5370  001390  0E7E               	movlw	high STR_5
  5371  001392  0101               	movlb	1	; () banked
  5372  001394  6F40               	movwf	(printf@f+1)& (0+255),b
  5373  001396  0101               	movlb	1	; () banked
  5374  001398  51A9               	movf	_chanValdig& (0+255),w,b
  5375  00139A  0101               	movlb	1	; () banked
  5376  00139C  6F41               	movwf	(?_printf+2)& (0+255),b
  5377  00139E  6B42               	clrf	(?_printf+3)& (0+255),b
  5378  0013A0  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5379  0013A2  0742               	decf	(?_printf+3)& (0+255),f,b
  5380  0013A4  C19E  F143         	movff	_flech,?_printf+4
  5381  0013A8  0101               	movlb	1	; () banked
  5382  0013AA  6B44               	clrf	(?_printf+5)& (0+255),b
  5383  0013AC  0101               	movlb	1	; () banked
  5384  0013AE  51AA               	movf	(_chanValdig+1)& (0+255),w,b
  5385  0013B0  0101               	movlb	1	; () banked
  5386  0013B2  6F45               	movwf	(?_printf+6)& (0+255),b
  5387  0013B4  6B46               	clrf	(?_printf+7)& (0+255),b
  5388  0013B6  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5389  0013B8  0746               	decf	(?_printf+7)& (0+255),f,b
  5390  0013BA  0101               	movlb	1	; () banked
  5391  0013BC  51AB               	movf	(_chanValdig+2)& (0+255),w,b
  5392  0013BE  0101               	movlb	1	; () banked
  5393  0013C0  6F47               	movwf	(?_printf+8)& (0+255),b
  5394  0013C2  6B48               	clrf	(?_printf+9)& (0+255),b
  5395  0013C4  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5396  0013C6  0748               	decf	(?_printf+9)& (0+255),f,b
  5397  0013C8  0101               	movlb	1	; () banked
  5398  0013CA  51AC               	movf	(_chanValdig+3)& (0+255),w,b
  5399  0013CC  0101               	movlb	1	; () banked
  5400  0013CE  6F49               	movwf	(?_printf+10)& (0+255),b
  5401  0013D0  6B4A               	clrf	(?_printf+11)& (0+255),b
  5402  0013D2  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5403  0013D4  074A               	decf	(?_printf+11)& (0+255),f,b
  5404  0013D6  0101               	movlb	1	; () banked
  5405  0013D8  51AD               	movf	(_chanValdig+4)& (0+255),w,b
  5406  0013DA  0101               	movlb	1	; () banked
  5407  0013DC  6F4B               	movwf	(?_printf+12)& (0+255),b
  5408  0013DE  6B4C               	clrf	(?_printf+13)& (0+255),b
  5409  0013E0  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5410  0013E2  074C               	decf	(?_printf+13)& (0+255),f,b
  5411  0013E4  0101               	movlb	1	; () banked
  5412  0013E6  51AE               	movf	(_chanValdig+5)& (0+255),w,b
  5413  0013E8  0101               	movlb	1	; () banked
  5414  0013EA  6F4D               	movwf	(?_printf+14)& (0+255),b
  5415  0013EC  6B4E               	clrf	(?_printf+15)& (0+255),b
  5416  0013EE  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5417  0013F0  074E               	decf	(?_printf+15)& (0+255),f,b
  5418  0013F2  EC61  F000         	call	_printf	;wreg free
  5419                           
  5420                           ;screenDrawers.h: 76: }else if(chanValSection == 0) {
  5421  0013F6  D03A               	goto	l10225
  5422  0013F8                     l10221:
  5423  0013F8  0101               	movlb	1	; () banked
  5424  0013FA  519D               	movf	_chanValSection& (0+255),w,b
  5425  0013FC  A4D8               	btfss	status,2,c
  5426  0013FE  D036               	goto	l10225
  5427                           
  5428                           ; BSR set to: 1
  5429                           ;screenDrawers.h: 77: printf(" %c%u%u%u.%u%u%u ", flech, chanValdig[0], chanValdig[1],
  5430                           ;screenDrawers.h: 78: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5431  001400  0E0F               	movlw	low STR_6
  5432  001402  0101               	movlb	1	; () banked
  5433  001404  6F3F               	movwf	printf@f& (0+255),b
  5434  001406  0E7F               	movlw	high STR_6
  5435  001408  0101               	movlb	1	; () banked
  5436  00140A  6F40               	movwf	(printf@f+1)& (0+255),b
  5437  00140C  C19E  F141         	movff	_flech,?_printf+2
  5438  001410  0101               	movlb	1	; () banked
  5439  001412  6B42               	clrf	(?_printf+3)& (0+255),b
  5440  001414  0101               	movlb	1	; () banked
  5441  001416  51A9               	movf	_chanValdig& (0+255),w,b
  5442  001418  0101               	movlb	1	; () banked
  5443  00141A  6F43               	movwf	(?_printf+4)& (0+255),b
  5444  00141C  6B44               	clrf	(?_printf+5)& (0+255),b
  5445  00141E  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5446  001420  0744               	decf	(?_printf+5)& (0+255),f,b
  5447  001422  0101               	movlb	1	; () banked
  5448  001424  51AA               	movf	(_chanValdig+1)& (0+255),w,b
  5449  001426  0101               	movlb	1	; () banked
  5450  001428  6F45               	movwf	(?_printf+6)& (0+255),b
  5451  00142A  6B46               	clrf	(?_printf+7)& (0+255),b
  5452  00142C  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5453  00142E  0746               	decf	(?_printf+7)& (0+255),f,b
  5454  001430  0101               	movlb	1	; () banked
  5455  001432  51AB               	movf	(_chanValdig+2)& (0+255),w,b
  5456  001434  0101               	movlb	1	; () banked
  5457  001436  6F47               	movwf	(?_printf+8)& (0+255),b
  5458  001438  6B48               	clrf	(?_printf+9)& (0+255),b
  5459  00143A  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5460  00143C  0748               	decf	(?_printf+9)& (0+255),f,b
  5461  00143E  0101               	movlb	1	; () banked
  5462  001440  51AC               	movf	(_chanValdig+3)& (0+255),w,b
  5463  001442  0101               	movlb	1	; () banked
  5464  001444  6F49               	movwf	(?_printf+10)& (0+255),b
  5465  001446  6B4A               	clrf	(?_printf+11)& (0+255),b
  5466  001448  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5467  00144A  074A               	decf	(?_printf+11)& (0+255),f,b
  5468  00144C  0101               	movlb	1	; () banked
  5469  00144E  51AD               	movf	(_chanValdig+4)& (0+255),w,b
  5470  001450  0101               	movlb	1	; () banked
  5471  001452  6F4B               	movwf	(?_printf+12)& (0+255),b
  5472  001454  6B4C               	clrf	(?_printf+13)& (0+255),b
  5473  001456  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5474  001458  074C               	decf	(?_printf+13)& (0+255),f,b
  5475  00145A  0101               	movlb	1	; () banked
  5476  00145C  51AE               	movf	(_chanValdig+5)& (0+255),w,b
  5477  00145E  0101               	movlb	1	; () banked
  5478  001460  6F4D               	movwf	(?_printf+14)& (0+255),b
  5479  001462  6B4E               	clrf	(?_printf+15)& (0+255),b
  5480  001464  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5481  001466  074E               	decf	(?_printf+15)& (0+255),f,b
  5482  001468  EC61  F000         	call	_printf	;wreg free
  5483  00146C                     l10225:
  5484                           
  5485                           ;screenDrawers.h: 79: }
  5486                           ;screenDrawers.h: 80: lcd_gotoxy(11, 2);
  5487  00146C  0E02               	movlw	2
  5488  00146E  0101               	movlb	1	; () banked
  5489  001470  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5490  001472  0E0B               	movlw	11
  5491  001474  EC51  F035         	call	_lcd_gotoxy
  5492  001478  0012               	return		;funcret
  5493  00147A                     __end_of_drawValEditor:
  5494                           	opt stack 0
  5495                           tblptru	equ	0xFF8
  5496                           tblptrh	equ	0xFF7
  5497                           tblptrl	equ	0xFF6
  5498                           tablat	equ	0xFF5
  5499                           prodh	equ	0xFF4
  5500                           prodl	equ	0xFF3
  5501                           intcon	equ	0xFF2
  5502                           postinc0	equ	0xFEE
  5503                           wreg	equ	0xFE8
  5504                           postdec1	equ	0xFE5
  5505                           fsr1l	equ	0xFE1
  5506                           indf2	equ	0xFDF
  5507                           fsr2h	equ	0xFDA
  5508                           fsr2l	equ	0xFD9
  5509                           status	equ	0xFD8
  5510                           
  5511 ;; *************** function _drawAdvON *****************
  5512 ;; Defined at:
  5513 ;;		line 187 in file "source/screenDrawers.h"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;  on              1    wreg     unsigned char 
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;  on              1  116[BANK1 ] unsigned char 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;                  1    wreg      void 
  5520 ;; Registers used:
  5521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5527 ;;      Params:         0       0       0       0       0       0       0
  5528 ;;      Locals:         0       0       1       0       0       0       0
  5529 ;;      Temps:          0       0       0       0       0       0       0
  5530 ;;      Totals:         0       0       1       0       0       0       0
  5531 ;;Total ram usage:        1 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:   19
  5534 ;; This function calls:
  5535 ;;		_lcd_gotoxy
  5536 ;;		_printf
  5537 ;; This function is called by:
  5538 ;;		_drawScreen
  5539 ;; This function uses a non-reentrant model
  5540 ;;
  5541                           
  5542                           	psect	text21
  5543  006678                     __ptext21:
  5544                           	opt stack 0
  5545  006678                     _drawAdvON:
  5546                           	opt stack 10
  5547                           
  5548                           ;incstack = 0
  5549                           ;drawAdvON@on stored from wreg
  5550  006678  0101               	movlb	1	; () banked
  5551  00667A  6F74               	movwf	drawAdvON@on& (0+255),b
  5552                           
  5553                           ;screenDrawers.h: 188: lcd_gotoxy(1, 1);
  5554  00667C  0E01               	movlw	1
  5555  00667E  0101               	movlb	1	; () banked
  5556  006680  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5557  006682  0E01               	movlw	1
  5558  006684  EC51  F035         	call	_lcd_gotoxy
  5559                           
  5560                           ;screenDrawers.h: 189: printf("Modo Configurar:\n");
  5561  006688  0E6D               	movlw	low STR_23
  5562  00668A  0101               	movlb	1	; () banked
  5563  00668C  6F3F               	movwf	printf@f& (0+255),b
  5564  00668E  0E7E               	movlw	high STR_23
  5565  006690  0101               	movlb	1	; () banked
  5566  006692  6F40               	movwf	(printf@f+1)& (0+255),b
  5567  006694  EC61  F000         	call	_printf	;wreg free
  5568                           
  5569                           ;screenDrawers.h: 190: if(on)
  5570  006698  0101               	movlb	1	; () banked
  5571  00669A  5174               	movf	drawAdvON@on& (0+255),w,b
  5572  00669C  0101               	movlb	1	; () banked
  5573  00669E  B4D8               	btfsc	status,2,c
  5574  0066A0  D009               	goto	l10497
  5575                           
  5576                           ; BSR set to: 1
  5577                           ;screenDrawers.h: 191: printf("    Iniciado    ");
  5578  0066A2  0E77               	movlw	low STR_24
  5579  0066A4  0101               	movlb	1	; () banked
  5580  0066A6  6F3F               	movwf	printf@f& (0+255),b
  5581  0066A8  0E7F               	movlw	high STR_24
  5582  0066AA  0101               	movlb	1	; () banked
  5583  0066AC  6F40               	movwf	(printf@f+1)& (0+255),b
  5584  0066AE  EC61  F000         	call	_printf	;wreg free
  5585  0066B2  0012               	return	
  5586  0066B4                     l10497:
  5587                           
  5588                           ;screenDrawers.h: 192: else
  5589                           ;screenDrawers.h: 193: printf("   Finalizado   ");
  5590  0066B4  0E99               	movlw	low STR_25
  5591  0066B6  0101               	movlb	1	; () banked
  5592  0066B8  6F3F               	movwf	printf@f& (0+255),b
  5593  0066BA  0E7F               	movlw	high STR_25
  5594  0066BC  0101               	movlb	1	; () banked
  5595  0066BE  6F40               	movwf	(printf@f+1)& (0+255),b
  5596  0066C0  EC61  F000         	call	_printf	;wreg free
  5597  0066C4  0012               	return	
  5598  0066C6                     __end_of_drawAdvON:
  5599                           	opt stack 0
  5600                           tblptru	equ	0xFF8
  5601                           tblptrh	equ	0xFF7
  5602                           tblptrl	equ	0xFF6
  5603                           tablat	equ	0xFF5
  5604                           prodh	equ	0xFF4
  5605                           prodl	equ	0xFF3
  5606                           intcon	equ	0xFF2
  5607                           postinc0	equ	0xFEE
  5608                           wreg	equ	0xFE8
  5609                           postdec1	equ	0xFE5
  5610                           fsr1l	equ	0xFE1
  5611                           indf2	equ	0xFDF
  5612                           fsr2h	equ	0xFDA
  5613                           fsr2l	equ	0xFD9
  5614                           status	equ	0xFD8
  5615                           
  5616 ;; *************** function _printf *****************
  5617 ;; Defined at:
  5618 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;  f               2   63[BANK1 ] PTR const unsigned char 
  5621 ;;		 -> STR_40(17), STR_39(18), STR_38(17), STR_37(18), 
  5622 ;;		 -> STR_36(17), STR_35(18), STR_34(17), STR_33(18), 
  5623 ;;		 -> STR_32(7), STR_31(18), STR_30(19), STR_29(18), 
  5624 ;;		 -> STR_28(18), STR_27(18), STR_26(18), STR_25(17), 
  5625 ;;		 -> STR_24(17), STR_23(18), STR_22(17), STR_21(25), 
  5626 ;;		 -> STR_20(18), STR_19(16), STR_18(18), STR_17(7), 
  5627 ;;		 -> STR_16(18), STR_15(15), STR_14(18), STR_13(16), 
  5628 ;;		 -> STR_12(18), STR_11(15), STR_10(18), STR_9(17), 
  5629 ;;		 -> STR_8(15), STR_7(18), STR_6(18), STR_5(18), 
  5630 ;;		 -> STR_4(18), STR_3(18), STR_2(18), STR_1(18), 
  5631 ;; Auto vars:     Size  Location     Type
  5632 ;;  val             4  102[BANK1 ] unsigned long 
  5633 ;;  tmpval          4   98[BANK1 ] struct .
  5634 ;;  fval            3  110[BANK1 ] struct .
  5635 ;;  prec            2  113[BANK1 ] int 
  5636 ;;  width           2  108[BANK1 ] int 
  5637 ;;  exp             2  106[BANK1 ] int 
  5638 ;;  flag            2   96[BANK1 ] unsigned short 
  5639 ;;  ap              2   94[BANK1 ] PTR void [1]
  5640 ;;		 -> ?_printf(2), 
  5641 ;;  len             2   92[BANK1 ] unsigned int 
  5642 ;;  cp              2   90[BANK1 ] PTR const unsigned char 
  5643 ;;		 -> printf@c(1), 
  5644 ;;  c               1  115[BANK1 ] char 
  5645 ;;  d               1    0        unsigned char 
  5646 ;; Return value:  Size  Location     Type
  5647 ;;                  2   63[BANK1 ] int 
  5648 ;; Registers used:
  5649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5650 ;; Tracked objects:
  5651 ;;		On entry : 0/0
  5652 ;;		On exit  : 0/0
  5653 ;;		Unchanged: 0/0
  5654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5655 ;;      Params:         0       0      18       0       0       0       0
  5656 ;;      Locals:         0       0      29       0       0       0       0
  5657 ;;      Temps:          0       0       6       0       0       0       0
  5658 ;;      Totals:         0       0      53       0       0       0       0
  5659 ;;Total ram usage:       53 bytes
  5660 ;; Hardware stack levels used:    1
  5661 ;; Hardware stack levels required when called:   18
  5662 ;; This function calls:
  5663 ;;		___awdiv
  5664 ;;		___ftadd
  5665 ;;		___ftge
  5666 ;;		___ftmul
  5667 ;;		___ftneg
  5668 ;;		___ftsub
  5669 ;;		___fttol
  5670 ;;		___lldiv
  5671 ;;		___llmod
  5672 ;;		___lltoft
  5673 ;;		___wmul
  5674 ;;		__div_to_l_
  5675 ;;		__tdiv_to_l_
  5676 ;;		_fround
  5677 ;;		_isdigit
  5678 ;;		_putch
  5679 ;;		_scale
  5680 ;; This function is called by:
  5681 ;;		_drawValEditor
  5682 ;;		_drawMenu
  5683 ;;		_drawChanVal
  5684 ;;		_drawPass1Lin
  5685 ;;		_drawPassWord
  5686 ;;		_drawBadPass
  5687 ;;		_drawAdvON
  5688 ;;		_drawSNquest
  5689 ;;		_drawAutoCalibRM
  5690 ;;		_drawCutError
  5691 ;;		_drawCalibProc
  5692 ;; This function uses a non-reentrant model
  5693 ;;
  5694                           
  5695                           	psect	text22
  5696  0000C2                     __ptext22:
  5697                           	opt stack 0
  5698  0000C2                     _printf:
  5699                           	opt stack 10
  5700                           
  5701                           ;doprnt.c: 466: va_list ap;
  5702                           ;doprnt.c: 499: signed char c;
  5703                           ;doprnt.c: 501: int width;
  5704                           ;doprnt.c: 504: int prec;
  5705                           ;doprnt.c: 508: unsigned short flag;
  5706                           ;doprnt.c: 515: char d;
  5707                           ;doprnt.c: 516: double fval;
  5708                           ;doprnt.c: 517: int exp;
  5709                           ;doprnt.c: 523: union {
  5710                           ;doprnt.c: 524: unsigned long vd;
  5711                           ;doprnt.c: 525: double integ;
  5712                           ;doprnt.c: 526: } tmpval;
  5713                           ;doprnt.c: 528: unsigned long val;
  5714                           ;doprnt.c: 529: unsigned len;
  5715                           ;doprnt.c: 530: const char * cp;
  5716                           ;doprnt.c: 533: *ap = __va_start();
  5717                           
  5718                           ;incstack = 0
  5719  0000C2  0E41               	movlw	low (?_printf+2)
  5720  0000C4  0101               	movlb	1	; () banked
  5721  0000C6  6F5E               	movwf	printf@ap& (0+255),b
  5722  0000C8  0E01               	movlw	high (?_printf+2)
  5723  0000CA  0101               	movlb	1	; () banked
  5724  0000CC  6F5F               	movwf	(printf@ap+1)& (0+255),b
  5725                           
  5726                           ;doprnt.c: 536: while(c = *f++) {
  5727  0000CE  EF6A  F006         	goto	l10117
  5728  0000D2                     l9819:
  5729                           
  5730                           ; BSR set to: 1
  5731                           ;doprnt.c: 538: if(c != '%')
  5732  0000D2  0E25               	movlw	37
  5733  0000D4  0101               	movlb	1	; () banked
  5734  0000D6  1973               	xorwf	printf@c& (0+255),w,b
  5735  0000D8  B4D8               	btfsc	status,2,c
  5736  0000DA  D006               	goto	l9823
  5737                           
  5738                           ; BSR set to: 1
  5739                           ;doprnt.c: 540: {
  5740                           ;doprnt.c: 541: (putch(c) );
  5741  0000DC  0101               	movlb	1	; () banked
  5742  0000DE  5173               	movf	printf@c& (0+255),w,b
  5743  0000E0  EC88  F036         	call	_putch
  5744                           
  5745                           ;doprnt.c: 542: continue;
  5746  0000E4  EF6A  F006         	goto	l10117
  5747  0000E8                     l9823:
  5748                           
  5749                           ;doprnt.c: 543: }
  5750                           ;doprnt.c: 546: width = 0;
  5751  0000E8  0E00               	movlw	0
  5752  0000EA  0101               	movlb	1	; () banked
  5753  0000EC  6F6D               	movwf	(printf@width+1)& (0+255),b
  5754  0000EE  0E00               	movlw	0
  5755  0000F0  6F6C               	movwf	printf@width& (0+255),b
  5756                           
  5757                           ;doprnt.c: 548: flag = 0;
  5758  0000F2  0E00               	movlw	0
  5759  0000F4  0101               	movlb	1	; () banked
  5760  0000F6  6F61               	movwf	(printf@flag+1)& (0+255),b
  5761  0000F8  0E00               	movlw	0
  5762  0000FA  6F60               	movwf	printf@flag& (0+255),b
  5763                           
  5764                           ; BSR set to: 1
  5765                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5766  0000FC  C13F  FFF6         	movff	printf@f,tblptrl
  5767  000100  C140  FFF7         	movff	printf@f+1,tblptrh
  5768  000104                     	if	0	;tblptru may be non-zero
  5769  000104                     	endif
  5770  000104                     	if	0	;tblptru may be non-zero
  5771  000104                     	endif
  5772  000104  0008               	tblrd		*
  5773  000106  50F5               	movf	tablat,w,c
  5774  000108  ECC4  F035         	call	_isdigit
  5775  00010C  A0D8               	btfss	status,0,c
  5776  00010E  D040               	goto	l9837
  5777                           
  5778                           ;doprnt.c: 598: width = 0;
  5779  000110  0E00               	movlw	0
  5780  000112  0101               	movlb	1	; () banked
  5781  000114  6F6D               	movwf	(printf@width+1)& (0+255),b
  5782  000116  0E00               	movlw	0
  5783  000118  6F6C               	movwf	printf@width& (0+255),b
  5784  00011A                     l9829:
  5785                           
  5786                           ;doprnt.c: 600: width *= 10;
  5787  00011A  C16C  F10E         	movff	printf@width,___wmul@multiplier
  5788  00011E  C16D  F10F         	movff	printf@width+1,___wmul@multiplier+1
  5789  000122  0E00               	movlw	0
  5790  000124  0101               	movlb	1	; () banked
  5791  000126  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5792  000128  0E0A               	movlw	10
  5793  00012A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5794  00012C  ECEB  F034         	call	___wmul	;wreg free
  5795  000130  C10E  F16C         	movff	?___wmul,printf@width
  5796  000134  C10F  F16D         	movff	?___wmul+1,printf@width+1
  5797                           
  5798                           ;doprnt.c: 601: width += *f++ - '0';
  5799  000138  0ED0               	movlw	208
  5800  00013A  0101               	movlb	1	; () banked
  5801  00013C  6F51               	movwf	??_printf& (0+255),b
  5802  00013E  0EFF               	movlw	255
  5803  000140  0101               	movlb	1	; () banked
  5804  000142  6F52               	movwf	(??_printf+1)& (0+255),b
  5805  000144  C13F  FFF6         	movff	printf@f,tblptrl
  5806  000148  C140  FFF7         	movff	printf@f+1,tblptrh
  5807  00014C                     	if	0	;tblptru may be non-zero
  5808  00014C                     	endif
  5809  00014C                     	if	0	;tblptru may be non-zero
  5810  00014C                     	endif
  5811  00014C  0008               	tblrd		*
  5812  00014E  50F5               	movf	tablat,w,c
  5813  000150  0101               	movlb	1	; () banked
  5814  000152  6F53               	movwf	(??_printf+2)& (0+255),b
  5815  000154  6B54               	clrf	(??_printf+3)& (0+255),b
  5816  000156  0101               	movlb	1	; () banked
  5817  000158  5151               	movf	??_printf& (0+255),w,b
  5818  00015A  0101               	movlb	1	; () banked
  5819  00015C  2753               	addwf	(??_printf+2)& (0+255),f,b
  5820  00015E  0101               	movlb	1	; () banked
  5821  000160  5152               	movf	(??_printf+1)& (0+255),w,b
  5822  000162  0101               	movlb	1	; () banked
  5823  000164  2354               	addwfc	(??_printf+3)& (0+255),f,b
  5824  000166  0101               	movlb	1	; () banked
  5825  000168  5153               	movf	(??_printf+2)& (0+255),w,b
  5826  00016A  0101               	movlb	1	; () banked
  5827  00016C  276C               	addwf	printf@width& (0+255),f,b
  5828  00016E  0101               	movlb	1	; () banked
  5829  000170  5154               	movf	(??_printf+3)& (0+255),w,b
  5830  000172  0101               	movlb	1	; () banked
  5831  000174  236D               	addwfc	(printf@width+1)& (0+255),f,b
  5832                           
  5833                           ; BSR set to: 1
  5834  000176  0101               	movlb	1	; () banked
  5835  000178  4B3F               	infsnz	printf@f& (0+255),f,b
  5836  00017A  2B40               	incf	(printf@f+1)& (0+255),f,b
  5837                           
  5838                           ; BSR set to: 1
  5839                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5840  00017C  C13F  FFF6         	movff	printf@f,tblptrl
  5841  000180  C140  FFF7         	movff	printf@f+1,tblptrh
  5842  000184                     	if	0	;tblptru may be non-zero
  5843  000184                     	endif
  5844  000184                     	if	0	;tblptru may be non-zero
  5845  000184                     	endif
  5846  000184  0008               	tblrd		*
  5847  000186  50F5               	movf	tablat,w,c
  5848  000188  ECC4  F035         	call	_isdigit
  5849  00018C  B0D8               	btfsc	status,0,c
  5850  00018E  D7C5               	goto	l9829
  5851  000190                     l9837:
  5852                           
  5853                           ;doprnt.c: 608: }
  5854                           ;doprnt.c: 611: if(*f == '.') {
  5855  000190  C13F  FFF6         	movff	printf@f,tblptrl
  5856  000194  C140  FFF7         	movff	printf@f+1,tblptrh
  5857  000198                     	if	0	;tblptru may be non-zero
  5858  000198                     	endif
  5859  000198                     	if	0	;tblptru may be non-zero
  5860  000198                     	endif
  5861  000198  0008               	tblrd		*
  5862  00019A  50F5               	movf	tablat,w,c
  5863  00019C  0A2E               	xorlw	46
  5864  00019E  A4D8               	btfss	status,2,c
  5865  0001A0  D039               	goto	l9849
  5866                           
  5867                           ;doprnt.c: 612: flag |= 0x4000;
  5868  0001A2  0101               	movlb	1	; () banked
  5869  0001A4  8D61               	bsf	(printf@flag+1)& (0+255),6,b
  5870                           
  5871                           ;doprnt.c: 613: f++;
  5872  0001A6  0101               	movlb	1	; () banked
  5873  0001A8  4B3F               	infsnz	printf@f& (0+255),f,b
  5874  0001AA  2B40               	incf	(printf@f+1)& (0+255),f,b
  5875                           
  5876                           ; BSR set to: 1
  5877                           ;doprnt.c: 620: {
  5878                           ;doprnt.c: 621: prec = 0;
  5879  0001AC  0E00               	movlw	0
  5880  0001AE  0101               	movlb	1	; () banked
  5881  0001B0  6F72               	movwf	(printf@prec+1)& (0+255),b
  5882  0001B2  0E00               	movlw	0
  5883  0001B4  6F71               	movwf	printf@prec& (0+255),b
  5884                           
  5885                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5886  0001B6  D023               	goto	l9847
  5887  0001B8                     l9843:
  5888                           
  5889                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5890  0001B8  C171  F10E         	movff	printf@prec,___wmul@multiplier
  5891  0001BC  C172  F10F         	movff	printf@prec+1,___wmul@multiplier+1
  5892  0001C0  0E00               	movlw	0
  5893  0001C2  0101               	movlb	1	; () banked
  5894  0001C4  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5895  0001C6  0E0A               	movlw	10
  5896  0001C8  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5897  0001CA  ECEB  F034         	call	___wmul	;wreg free
  5898  0001CE  C13F  FFF6         	movff	printf@f,tblptrl
  5899  0001D2  C140  FFF7         	movff	printf@f+1,tblptrh
  5900  0001D6                     	if	0	;tblptru may be non-zero
  5901  0001D6                     	endif
  5902  0001D6                     	if	0	;tblptru may be non-zero
  5903  0001D6                     	endif
  5904  0001D6  0008               	tblrd		*
  5905  0001D8  50F5               	movf	tablat,w,c
  5906  0001DA  0101               	movlb	1	; () banked
  5907  0001DC  270E               	addwf	?___wmul& (0+255),f,b
  5908  0001DE  0E00               	movlw	0
  5909  0001E0  0101               	movlb	1	; () banked
  5910  0001E2  230F               	addwfc	(?___wmul+1)& (0+255),f,b
  5911  0001E4  0ED0               	movlw	208
  5912  0001E6  0101               	movlb	1	; () banked
  5913  0001E8  250E               	addwf	?___wmul& (0+255),w,b
  5914  0001EA  0101               	movlb	1	; () banked
  5915  0001EC  6F71               	movwf	printf@prec& (0+255),b
  5916  0001EE  0EFF               	movlw	255
  5917  0001F0  0101               	movlb	1	; () banked
  5918  0001F2  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5919  0001F4  0101               	movlb	1	; () banked
  5920  0001F6  6F72               	movwf	(printf@prec+1)& (0+255),b
  5921                           
  5922                           ; BSR set to: 1
  5923  0001F8  0101               	movlb	1	; () banked
  5924  0001FA  4B3F               	infsnz	printf@f& (0+255),f,b
  5925  0001FC  2B40               	incf	(printf@f+1)& (0+255),f,b
  5926  0001FE                     l9847:
  5927                           
  5928                           ; BSR set to: 1
  5929  0001FE  C13F  FFF6         	movff	printf@f,tblptrl
  5930  000202  C140  FFF7         	movff	printf@f+1,tblptrh
  5931  000206                     	if	0	;tblptru may be non-zero
  5932  000206                     	endif
  5933  000206                     	if	0	;tblptru may be non-zero
  5934  000206                     	endif
  5935  000206  0008               	tblrd		*
  5936  000208  50F5               	movf	tablat,w,c
  5937  00020A  ECC4  F035         	call	_isdigit
  5938  00020E  A0D8               	btfss	status,0,c
  5939  000210  D07A               	goto	l9889
  5940  000212  D7D2               	goto	l9843
  5941  000214                     l9849:
  5942                           
  5943                           ;doprnt.c: 626: prec = 0;
  5944  000214  0E00               	movlw	0
  5945  000216  0101               	movlb	1	; () banked
  5946  000218  6F72               	movwf	(printf@prec+1)& (0+255),b
  5947  00021A  0E00               	movlw	0
  5948  00021C  6F71               	movwf	printf@prec& (0+255),b
  5949                           
  5950                           ; BSR set to: 1
  5951                           ;doprnt.c: 628: flag |= 0x1000;
  5952  00021E  0101               	movlb	1	; () banked
  5953  000220  8961               	bsf	(printf@flag+1)& (0+255),4,b
  5954                           
  5955                           ; BSR set to: 1
  5956                           ;doprnt.c: 630: }
  5957                           ;doprnt.c: 635: switch(c = *f++) {
  5958  000222  D071               	goto	l9889
  5959  000224                     l9853:
  5960                           
  5961                           ; BSR set to: 1
  5962                           ;doprnt.c: 663: flag |= 0x400;
  5963  000224  0101               	movlb	1	; () banked
  5964  000226  8561               	bsf	(printf@flag+1)& (0+255),2,b
  5965                           
  5966                           ; BSR set to: 1
  5967                           ;doprnt.c: 698: case 'i':
  5968                           ;doprnt.c: 699: break;
  5969                           
  5970                           ; BSR set to: 1
  5971                           
  5972                           ;doprnt.c: 697: case 'd':
  5973                           
  5974                           ;doprnt.c: 664: break;
  5975  000228  D08D               	goto	l9891
  5976  00022A                     l9855:
  5977                           
  5978                           ; BSR set to: 1
  5979                           ;doprnt.c: 753: if(prec && prec < len)
  5980  00022A  0101               	movlb	1	; () banked
  5981  00022C  5171               	movf	printf@prec& (0+255),w,b
  5982  00022E  0101               	movlb	1	; () banked
  5983  000230  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  5984  000232  B4D8               	btfsc	status,2,c
  5985  000234  D00E               	goto	l9861
  5986                           
  5987                           ; BSR set to: 1
  5988  000236  0101               	movlb	1	; () banked
  5989  000238  515C               	movf	printf@len& (0+255),w,b
  5990  00023A  0101               	movlb	1	; () banked
  5991  00023C  5D71               	subwf	printf@prec& (0+255),w,b
  5992  00023E  0101               	movlb	1	; () banked
  5993  000240  515D               	movf	(printf@len+1)& (0+255),w,b
  5994  000242  0101               	movlb	1	; () banked
  5995  000244  5972               	subwfb	(printf@prec+1)& (0+255),w,b
  5996  000246  B0D8               	btfsc	status,0,c
  5997  000248  D004               	goto	l9861
  5998                           
  5999                           ; BSR set to: 1
  6000                           ;doprnt.c: 754: len = prec;
  6001  00024A  C171  F15C         	movff	printf@prec,printf@len
  6002  00024E  C172  F15D         	movff	printf@prec+1,printf@len+1
  6003  000252                     l9861:
  6004                           
  6005                           ; BSR set to: 1
  6006                           ;doprnt.c: 757: if(width > len)
  6007  000252  0101               	movlb	1	; () banked
  6008  000254  516C               	movf	printf@width& (0+255),w,b
  6009  000256  0101               	movlb	1	; () banked
  6010  000258  5D5C               	subwf	printf@len& (0+255),w,b
  6011  00025A  0101               	movlb	1	; () banked
  6012  00025C  516D               	movf	(printf@width+1)& (0+255),w,b
  6013  00025E  0101               	movlb	1	; () banked
  6014  000260  595D               	subwfb	(printf@len+1)& (0+255),w,b
  6015  000262  B0D8               	btfsc	status,0,c
  6016  000264  D009               	goto	l9865
  6017                           
  6018                           ; BSR set to: 1
  6019                           ;doprnt.c: 758: width -= len;
  6020  000266  0101               	movlb	1	; () banked
  6021  000268  515C               	movf	printf@len& (0+255),w,b
  6022  00026A  0101               	movlb	1	; () banked
  6023  00026C  5F6C               	subwf	printf@width& (0+255),f,b
  6024  00026E  0101               	movlb	1	; () banked
  6025  000270  515D               	movf	(printf@len+1)& (0+255),w,b
  6026  000272  0101               	movlb	1	; () banked
  6027  000274  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  6028  000276  D009               	goto	l9869
  6029  000278                     l9865:
  6030                           
  6031                           ; BSR set to: 1
  6032                           ;doprnt.c: 759: else
  6033                           ;doprnt.c: 760: width = 0;
  6034  000278  0E00               	movlw	0
  6035  00027A  0101               	movlb	1	; () banked
  6036  00027C  6F6D               	movwf	(printf@width+1)& (0+255),b
  6037  00027E  0E00               	movlw	0
  6038  000280  6F6C               	movwf	printf@width& (0+255),b
  6039                           
  6040                           ; BSR set to: 1
  6041                           ;doprnt.c: 764: while(width--)
  6042  000282  D003               	goto	l9869
  6043  000284                     l9867:
  6044                           
  6045                           ; BSR set to: 1
  6046                           ;doprnt.c: 765: (putch(' ') );
  6047  000284  0E20               	movlw	32
  6048  000286  EC88  F036         	call	_putch
  6049  00028A                     l9869:
  6050  00028A  0101               	movlb	1	; () banked
  6051  00028C  076C               	decf	printf@width& (0+255),f,b
  6052  00028E  A0D8               	btfss	status,0,c
  6053  000290  076D               	decf	(printf@width+1)& (0+255),f,b
  6054  000292  0101               	movlb	1	; () banked
  6055  000294  296C               	incf	printf@width& (0+255),w,b
  6056  000296  E1F6               	bnz	l9867
  6057  000298  0101               	movlb	1	; () banked
  6058  00029A  296D               	incf	(printf@width+1)& (0+255),w,b
  6059  00029C  B4D8               	btfsc	status,2,c
  6060  00029E  D00B               	goto	l9875
  6061  0002A0  D7F1               	goto	l9867
  6062  0002A2                     l9871:
  6063                           
  6064                           ; BSR set to: 1
  6065                           ;doprnt.c: 768: (putch(*cp++) );
  6066  0002A2  C15A  FFD9         	movff	printf@cp,fsr2l
  6067  0002A6  C15B  FFDA         	movff	printf@cp+1,fsr2h
  6068  0002AA  50DF               	movf	indf2,w,c
  6069  0002AC  EC88  F036         	call	_putch
  6070  0002B0  0101               	movlb	1	; () banked
  6071  0002B2  4B5A               	infsnz	printf@cp& (0+255),f,b
  6072  0002B4  2B5B               	incf	(printf@cp+1)& (0+255),f,b
  6073  0002B6                     l9875:
  6074                           
  6075                           ; BSR set to: 1
  6076  0002B6  0101               	movlb	1	; () banked
  6077  0002B8  075C               	decf	printf@len& (0+255),f,b
  6078  0002BA  A0D8               	btfss	status,0,c
  6079  0002BC  075D               	decf	(printf@len+1)& (0+255),f,b
  6080  0002BE  0101               	movlb	1	; () banked
  6081  0002C0  295C               	incf	printf@len& (0+255),w,b
  6082  0002C2  E1EF               	bnz	l9871
  6083  0002C4  0101               	movlb	1	; () banked
  6084  0002C6  295D               	incf	(printf@len+1)& (0+255),w,b
  6085  0002C8  B4D8               	btfsc	status,2,c
  6086  0002CA  EF6A  F006         	goto	l10117
  6087  0002CE  D7E9               	goto	l9871
  6088  0002D0                     l9877:
  6089                           
  6090                           ; BSR set to: 1
  6091                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6092  0002D0  C15E  FFD9         	movff	printf@ap,fsr2l
  6093  0002D4  C15F  FFDA         	movff	printf@ap+1,fsr2h
  6094  0002D8  50DF               	movf	indf2,w,c
  6095  0002DA  0101               	movlb	1	; () banked
  6096  0002DC  6F73               	movwf	printf@c& (0+255),b
  6097                           
  6098                           ; BSR set to: 1
  6099  0002DE  0E02               	movlw	2
  6100  0002E0  0101               	movlb	1	; () banked
  6101  0002E2  275E               	addwf	printf@ap& (0+255),f,b
  6102  0002E4  0E00               	movlw	0
  6103  0002E6  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  6104  0002E8                     l9881:
  6105                           
  6106                           ; BSR set to: 1
  6107                           ;doprnt.c: 805: cp = (char *)&c;
  6108  0002E8  0E73               	movlw	low printf@c
  6109  0002EA  0101               	movlb	1	; () banked
  6110  0002EC  6F5A               	movwf	printf@cp& (0+255),b
  6111  0002EE  0E01               	movlw	high printf@c
  6112  0002F0  0101               	movlb	1	; () banked
  6113  0002F2  6F5B               	movwf	(printf@cp+1)& (0+255),b
  6114                           
  6115                           ; BSR set to: 1
  6116                           ;doprnt.c: 806: len = 1;
  6117  0002F4  0E00               	movlw	0
  6118  0002F6  0101               	movlb	1	; () banked
  6119  0002F8  6F5D               	movwf	(printf@len+1)& (0+255),b
  6120  0002FA  0E01               	movlw	1
  6121  0002FC  6F5C               	movwf	printf@len& (0+255),b
  6122                           
  6123                           ;doprnt.c: 807: goto dostring;
  6124  0002FE  D795               	goto	l9855
  6125  000300                     l9885:
  6126                           
  6127                           ; BSR set to: 1
  6128                           ;doprnt.c: 818: flag |= 0x40;
  6129  000300  0101               	movlb	1	; () banked
  6130  000302  8D60               	bsf	printf@flag& (0+255),6,b
  6131                           
  6132                           ; BSR set to: 1
  6133                           ;doprnt.c: 822: }
  6134                           
  6135                           ;doprnt.c: 819: break;
  6136  000304  D01F               	goto	l9891
  6137  000306                     l9889:
  6138  000306  C13F  FFF6         	movff	printf@f,tblptrl
  6139  00030A  C140  FFF7         	movff	printf@f+1,tblptrh
  6140  00030E  0101               	movlb	1	; () banked
  6141  000310  4B3F               	infsnz	printf@f& (0+255),f,b
  6142  000312  2B40               	incf	(printf@f+1)& (0+255),f,b
  6143  000314                     	if	0	;tblptru may be non-zero
  6144  000314                     	endif
  6145  000314                     	if	0	;tblptru may be non-zero
  6146  000314                     	endif
  6147  000314  0008               	tblrd		*
  6148  000316  CFF5 F173          	movff	tablat,printf@c
  6149  00031A  0101               	movlb	1	; () banked
  6150  00031C  5173               	movf	printf@c& (0+255),w,b
  6151                           
  6152                           ; Switch size 1, requested type "space"
  6153                           ; Number of cases is 6, Range of values is 0 to 117
  6154                           ; switch strategies available:
  6155                           ; Name         Instructions Cycles
  6156                           ; simple_byte           19    10 (average)
  6157                           ;	Chosen strategy is simple_byte
  6158  00031E  0A00               	xorlw	0	; case 0
  6159  000320  B4D8               	btfsc	status,2,c
  6160  000322  0012               	return	
  6161  000324  0A63               	xorlw	99	; case 99
  6162  000326  B4D8               	btfsc	status,2,c
  6163  000328  D7D3               	goto	l9877
  6164  00032A  0A07               	xorlw	7	; case 100
  6165  00032C  B4D8               	btfsc	status,2,c
  6166  00032E  D00A               	goto	l9891
  6167  000330  0A02               	xorlw	2	; case 102
  6168  000332  B4D8               	btfsc	status,2,c
  6169  000334  D777               	goto	l9853
  6170  000336  0A0F               	xorlw	15	; case 105
  6171  000338  B4D8               	btfsc	status,2,c
  6172  00033A  D004               	goto	l9891
  6173  00033C  0A1C               	xorlw	28	; case 117
  6174  00033E  B4D8               	btfsc	status,2,c
  6175  000340  D7DF               	goto	l9885
  6176  000342  D7D2               	goto	l9881
  6177  000344                     l9891:
  6178                           
  6179                           ; BSR set to: 1
  6180                           ;doprnt.c: 825: if(flag & (0x700)) {
  6181  000344  0E07               	movlw	7
  6182  000346  0101               	movlb	1	; () banked
  6183  000348  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6184  00034A  B4D8               	btfsc	status,2,c
  6185  00034C  D351               	goto	l975
  6186                           
  6187                           ; BSR set to: 1
  6188                           ;doprnt.c: 827: if(flag & 0x1000)
  6189  00034E  0101               	movlb	1	; () banked
  6190  000350  A961               	btfss	(printf@flag+1)& (0+255),4,b
  6191  000352  D005               	goto	l9897
  6192                           
  6193                           ; BSR set to: 1
  6194                           ;doprnt.c: 829: prec = 6;
  6195  000354  0E00               	movlw	0
  6196  000356  0101               	movlb	1	; () banked
  6197  000358  6F72               	movwf	(printf@prec+1)& (0+255),b
  6198  00035A  0E06               	movlw	6
  6199  00035C  6F71               	movwf	printf@prec& (0+255),b
  6200  00035E                     l9897:
  6201                           
  6202                           ; BSR set to: 1
  6203                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6204  00035E  C15E  FFD9         	movff	printf@ap,fsr2l
  6205  000362  C15F  FFDA         	movff	printf@ap+1,fsr2h
  6206  000366  CFDE F16E          	movff	postinc2,printf@fval
  6207  00036A  CFDE F16F          	movff	postinc2,printf@fval+1
  6208  00036E  CFDD F170          	movff	postdec2,printf@fval+2
  6209                           
  6210                           ; BSR set to: 1
  6211  000372  0E03               	movlw	3
  6212  000374  0101               	movlb	1	; () banked
  6213  000376  275E               	addwf	printf@ap& (0+255),f,b
  6214  000378  0E00               	movlw	0
  6215  00037A  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  6216                           
  6217                           ; BSR set to: 1
  6218                           ;doprnt.c: 831: if(fval < 0.0) {
  6219  00037C  0101               	movlb	1	; () banked
  6220  00037E  AF70               	btfss	(printf@fval+2)& (0+255),7,b
  6221  000380  D011               	goto	l9907
  6222                           
  6223                           ; BSR set to: 1
  6224                           ;doprnt.c: 832: fval = -fval;
  6225  000382  C16E  F100         	movff	printf@fval,___ftneg@f1
  6226  000386  C16F  F101         	movff	printf@fval+1,___ftneg@f1+1
  6227  00038A  C170  F102         	movff	printf@fval+2,___ftneg@f1+2
  6228  00038E  EC69  F035         	call	___ftneg	;wreg free
  6229  000392  C100  F16E         	movff	?___ftneg,printf@fval
  6230  000396  C101  F16F         	movff	?___ftneg+1,printf@fval+1
  6231  00039A  C102  F170         	movff	?___ftneg+2,printf@fval+2
  6232                           
  6233                           ;doprnt.c: 833: flag |= 0x03;
  6234  00039E  0E03               	movlw	3
  6235  0003A0  0101               	movlb	1	; () banked
  6236  0003A2  1360               	iorwf	printf@flag& (0+255),f,b
  6237  0003A4                     l9907:
  6238                           
  6239                           ; BSR set to: 1
  6240                           ;doprnt.c: 834: }
  6241                           ;doprnt.c: 835: exp = 0;
  6242  0003A4  0E00               	movlw	0
  6243  0003A6  0101               	movlb	1	; () banked
  6244  0003A8  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6245  0003AA  0E00               	movlw	0
  6246  0003AC  6F6A               	movwf	printf@exp& (0+255),b
  6247                           
  6248                           ; BSR set to: 1
  6249                           ;doprnt.c: 836: if( fval!=0) {
  6250  0003AE  0101               	movlb	1	; () banked
  6251  0003B0  516E               	movf	printf@fval& (0+255),w,b
  6252  0003B2  0101               	movlb	1	; () banked
  6253  0003B4  116F               	iorwf	(printf@fval+1)& (0+255),w,b
  6254  0003B6  0101               	movlb	1	; () banked
  6255  0003B8  1170               	iorwf	(printf@fval+2)& (0+255),w,b
  6256  0003BA  B4D8               	btfsc	status,2,c
  6257  0003BC  D09B               	goto	l9935
  6258                           
  6259                           ; BSR set to: 1
  6260                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6261  0003BE  0E82               	movlw	130
  6262  0003C0  0101               	movlb	1	; () banked
  6263  0003C2  6F51               	movwf	??_printf& (0+255),b
  6264  0003C4  0EFF               	movlw	255
  6265  0003C6  0101               	movlb	1	; () banked
  6266  0003C8  6F52               	movwf	(??_printf+1)& (0+255),b
  6267  0003CA  C16E  F153         	movff	printf@fval,??_printf+2
  6268  0003CE  C16F  F154         	movff	printf@fval+1,??_printf+3
  6269  0003D2  C170  F155         	movff	printf@fval+2,??_printf+4
  6270  0003D6  C171  F156         	movff	printf@fval+3,??_printf+5
  6271  0003DA  0E10               	movlw	16
  6272  0003DC  D006               	goto	u14530
  6273  0003DE                     u14535:
  6274  0003DE  0101               	movlb	1	; () banked
  6275  0003E0  90D8               	bcf	status,0,c
  6276  0003E2  3356               	rrcf	(??_printf+5)& (0+255),f,b
  6277  0003E4  3355               	rrcf	(??_printf+4)& (0+255),f,b
  6278  0003E6  3354               	rrcf	(??_printf+3)& (0+255),f,b
  6279  0003E8  3353               	rrcf	(??_printf+2)& (0+255),f,b
  6280  0003EA                     u14530:
  6281  0003EA  2EE8               	decfsz	wreg,f,c
  6282  0003EC  D7F8               	goto	u14535
  6283  0003EE  0101               	movlb	1	; () banked
  6284  0003F0  5153               	movf	(??_printf+2)& (0+255),w,b
  6285  0003F2  0101               	movlb	1	; () banked
  6286  0003F4  2551               	addwf	??_printf& (0+255),w,b
  6287  0003F6  0101               	movlb	1	; () banked
  6288  0003F8  6F6A               	movwf	printf@exp& (0+255),b
  6289  0003FA  0E00               	movlw	0
  6290  0003FC  0101               	movlb	1	; () banked
  6291  0003FE  2152               	addwfc	(??_printf+1)& (0+255),w,b
  6292  000400  0101               	movlb	1	; () banked
  6293  000402  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6294                           
  6295                           ; BSR set to: 1
  6296                           ;doprnt.c: 838: exp--;
  6297  000404  0101               	movlb	1	; () banked
  6298  000406  076A               	decf	printf@exp& (0+255),f,b
  6299  000408  A0D8               	btfss	status,0,c
  6300  00040A  076B               	decf	(printf@exp+1)& (0+255),f,b
  6301                           
  6302                           ; BSR set to: 1
  6303                           ;doprnt.c: 839: exp *= 3;
  6304  00040C  C16A  F10E         	movff	printf@exp,___wmul@multiplier
  6305  000410  C16B  F10F         	movff	printf@exp+1,___wmul@multiplier+1
  6306  000414  0E00               	movlw	0
  6307  000416  0101               	movlb	1	; () banked
  6308  000418  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6309  00041A  0E03               	movlw	3
  6310  00041C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  6311  00041E  ECEB  F034         	call	___wmul	;wreg free
  6312  000422  C10E  F16A         	movff	?___wmul,printf@exp
  6313  000426  C10F  F16B         	movff	?___wmul+1,printf@exp+1
  6314                           
  6315                           ;doprnt.c: 840: exp /= 10;
  6316  00042A  C16A  F106         	movff	printf@exp,___awdiv@dividend
  6317  00042E  C16B  F107         	movff	printf@exp+1,___awdiv@dividend+1
  6318  000432  0E00               	movlw	0
  6319  000434  0101               	movlb	1	; () banked
  6320  000436  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  6321  000438  0E0A               	movlw	10
  6322  00043A  6F08               	movwf	___awdiv@divisor& (0+255),b
  6323  00043C  ECDE  F027         	call	___awdiv	;wreg free
  6324  000440  C106  F16A         	movff	?___awdiv,printf@exp
  6325  000444  C107  F16B         	movff	?___awdiv+1,printf@exp+1
  6326                           
  6327                           ;doprnt.c: 841: if(exp < 0)
  6328  000448  0101               	movlb	1	; () banked
  6329  00044A  AF6B               	btfss	(printf@exp+1)& (0+255),7,b
  6330  00044C  D004               	goto	l9923
  6331                           
  6332                           ; BSR set to: 1
  6333                           ;doprnt.c: 842: exp--;
  6334  00044E  0101               	movlb	1	; () banked
  6335  000450  076A               	decf	printf@exp& (0+255),f,b
  6336  000452  A0D8               	btfss	status,0,c
  6337  000454  076B               	decf	(printf@exp+1)& (0+255),f,b
  6338  000456                     l9923:
  6339                           
  6340                           ; BSR set to: 1
  6341                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6342  000456  0101               	movlb	1	; () banked
  6343  000458  516A               	movf	printf@exp& (0+255),w,b
  6344  00045A  0800               	sublw	0
  6345  00045C  EC7A  F006         	call	_scale
  6346  000460  C123  F162         	movff	?_scale,printf@tmpval
  6347  000464  C124  F163         	movff	?_scale+1,printf@tmpval+1
  6348  000468  C125  F164         	movff	?_scale+2,printf@tmpval+2
  6349                           
  6350                           ;doprnt.c: 847: tmpval.integ *= fval;
  6351  00046C  C162  F114         	movff	printf@tmpval,___ftmul@f1
  6352  000470  C163  F115         	movff	printf@tmpval+1,___ftmul@f1+1
  6353  000474  C164  F116         	movff	printf@tmpval+2,___ftmul@f1+2
  6354  000478  C16E  F117         	movff	printf@fval,___ftmul@f2
  6355  00047C  C16F  F118         	movff	printf@fval+1,___ftmul@f2+1
  6356  000480  C170  F119         	movff	printf@fval+2,___ftmul@f2+2
  6357  000484  ECCC  F01A         	call	___ftmul	;wreg free
  6358  000488  C114  F162         	movff	?___ftmul,printf@tmpval
  6359  00048C  C115  F163         	movff	?___ftmul+1,printf@tmpval+1
  6360  000490  C116  F164         	movff	?___ftmul+2,printf@tmpval+2
  6361                           
  6362                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6363  000494  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6364  000498  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6365  00049C  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6366  0004A0  0E00               	movlw	0
  6367  0004A2  0101               	movlb	1	; () banked
  6368  0004A4  6F03               	movwf	___ftge@ff2& (0+255),b
  6369  0004A6  0E80               	movlw	128
  6370  0004A8  0101               	movlb	1	; () banked
  6371  0004AA  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6372  0004AC  0E3F               	movlw	63
  6373  0004AE  0101               	movlb	1	; () banked
  6374  0004B0  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6375  0004B2  EC1A  F027         	call	___ftge	;wreg free
  6376  0004B6  0101               	movlb	1	; () banked
  6377  0004B8  B0D8               	btfsc	status,0,c
  6378  0004BA  D005               	goto	l9931
  6379                           
  6380                           ; BSR set to: 1
  6381                           ;doprnt.c: 849: exp--;
  6382  0004BC  0101               	movlb	1	; () banked
  6383  0004BE  076A               	decf	printf@exp& (0+255),f,b
  6384  0004C0  A0D8               	btfss	status,0,c
  6385  0004C2  076B               	decf	(printf@exp+1)& (0+255),f,b
  6386  0004C4  D017               	goto	l9935
  6387  0004C6                     l9931:
  6388                           
  6389                           ; BSR set to: 1
  6390                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6391  0004C6  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6392  0004CA  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6393  0004CE  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6394  0004D2  0E00               	movlw	0
  6395  0004D4  0101               	movlb	1	; () banked
  6396  0004D6  6F03               	movwf	___ftge@ff2& (0+255),b
  6397  0004D8  0E20               	movlw	32
  6398  0004DA  0101               	movlb	1	; () banked
  6399  0004DC  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6400  0004DE  0E41               	movlw	65
  6401  0004E0  0101               	movlb	1	; () banked
  6402  0004E2  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6403  0004E4  EC1A  F027         	call	___ftge	;wreg free
  6404  0004E8  0101               	movlb	1	; () banked
  6405  0004EA  A0D8               	btfss	status,0,c
  6406  0004EC  D003               	goto	l9935
  6407                           
  6408                           ; BSR set to: 1
  6409                           ;doprnt.c: 851: exp++;
  6410  0004EE  0101               	movlb	1	; () banked
  6411  0004F0  4B6A               	infsnz	printf@exp& (0+255),f,b
  6412  0004F2  2B6B               	incf	(printf@exp+1)& (0+255),f,b
  6413  0004F4                     l9935:
  6414                           
  6415                           ; BSR set to: 1
  6416                           ;doprnt.c: 852: }
  6417                           ;doprnt.c: 1112: if(prec <= 12)
  6418  0004F4  0101               	movlb	1	; () banked
  6419  0004F6  BF72               	btfsc	(printf@prec+1)& (0+255),7,b
  6420  0004F8  D008               	goto	l9937
  6421  0004FA  0101               	movlb	1	; () banked
  6422  0004FC  5172               	movf	(printf@prec+1)& (0+255),w,b
  6423  0004FE  E11D               	bnz	l9939
  6424  000500  0E0D               	movlw	13
  6425  000502  0101               	movlb	1	; () banked
  6426  000504  5D71               	subwf	printf@prec& (0+255),w,b
  6427  000506  B0D8               	btfsc	status,0,c
  6428  000508  D018               	goto	l9939
  6429  00050A                     l9937:
  6430                           
  6431                           ; BSR set to: 1
  6432                           ;doprnt.c: 1113: fval += fround(prec);
  6433  00050A  C16E  F12D         	movff	printf@fval,___ftadd@f1
  6434  00050E  C16F  F12E         	movff	printf@fval+1,___ftadd@f1+1
  6435  000512  C170  F12F         	movff	printf@fval+2,___ftadd@f1+2
  6436  000516  0101               	movlb	1	; () banked
  6437  000518  5171               	movf	printf@prec& (0+255),w,b
  6438  00051A  EC96  F00B         	call	_fround
  6439  00051E  C123  F130         	movff	?_fround,___ftadd@f2
  6440  000522  C124  F131         	movff	?_fround+1,___ftadd@f2+1
  6441  000526  C125  F132         	movff	?_fround+2,___ftadd@f2+2
  6442  00052A  EC00  F012         	call	___ftadd	;wreg free
  6443  00052E  C12D  F16E         	movff	?___ftadd,printf@fval
  6444  000532  C12E  F16F         	movff	?___ftadd+1,printf@fval+1
  6445  000536  C12F  F170         	movff	?___ftadd+2,printf@fval+2
  6446  00053A                     l9939:
  6447                           
  6448                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6449  00053A  0101               	movlb	1	; () banked
  6450  00053C  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  6451  00053E  D008               	goto	l9941
  6452  000540  0101               	movlb	1	; () banked
  6453  000542  516B               	movf	(printf@exp+1)& (0+255),w,b
  6454  000544  E12A               	bnz	l9947
  6455  000546  0E0A               	movlw	10
  6456  000548  0101               	movlb	1	; () banked
  6457  00054A  5D6A               	subwf	printf@exp& (0+255),w,b
  6458  00054C  B0D8               	btfsc	status,0,c
  6459  00054E  D025               	goto	l9947
  6460  000550                     l9941:
  6461                           
  6462                           ; BSR set to: 1
  6463  000550  0101               	movlb	1	; () banked
  6464  000552  516E               	movf	printf@fval& (0+255),w,b
  6465  000554  0101               	movlb	1	; () banked
  6466  000556  116F               	iorwf	(printf@fval+1)& (0+255),w,b
  6467  000558  0101               	movlb	1	; () banked
  6468  00055A  1170               	iorwf	(printf@fval+2)& (0+255),w,b
  6469  00055C  B4D8               	btfsc	status,2,c
  6470  00055E  D063               	goto	l9961
  6471                           
  6472                           ; BSR set to: 1
  6473  000560  C16E  F12A         	movff	printf@fval,___fttol@f1
  6474  000564  C16F  F12B         	movff	printf@fval+1,___fttol@f1+1
  6475  000568  C170  F12C         	movff	printf@fval+2,___fttol@f1+2
  6476  00056C  EC76  F01D         	call	___fttol	;wreg free
  6477  000570  0101               	movlb	1	; () banked
  6478  000572  512A               	movf	?___fttol& (0+255),w,b
  6479  000574  0101               	movlb	1	; () banked
  6480  000576  112B               	iorwf	(?___fttol+1)& (0+255),w,b
  6481  000578  0101               	movlb	1	; () banked
  6482  00057A  112C               	iorwf	(?___fttol+2)& (0+255),w,b
  6483  00057C  0101               	movlb	1	; () banked
  6484  00057E  112D               	iorwf	(?___fttol+3)& (0+255),w,b
  6485  000580  A4D8               	btfss	status,2,c
  6486  000582  D051               	goto	l9961
  6487                           
  6488                           ; BSR set to: 1
  6489  000584  0101               	movlb	1	; () banked
  6490  000586  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  6491  000588  D04E               	goto	l9961
  6492  00058A  0101               	movlb	1	; () banked
  6493  00058C  516B               	movf	(printf@exp+1)& (0+255),w,b
  6494  00058E  E105               	bnz	l9947
  6495  000590  0E02               	movlw	2
  6496  000592  0101               	movlb	1	; () banked
  6497  000594  5D6A               	subwf	printf@exp& (0+255),w,b
  6498  000596  A0D8               	btfss	status,0,c
  6499  000598  D046               	goto	l9961
  6500  00059A                     l9947:
  6501                           
  6502                           ; BSR set to: 1
  6503                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6504  00059A  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6505  00059E  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6506  0005A2  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6507  0005A6  0E70               	movlw	112
  6508  0005A8  0101               	movlb	1	; () banked
  6509  0005AA  6F03               	movwf	___ftge@ff2& (0+255),b
  6510  0005AC  0E89               	movlw	137
  6511  0005AE  0101               	movlb	1	; () banked
  6512  0005B0  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6513  0005B2  0E40               	movlw	64
  6514  0005B4  0101               	movlb	1	; () banked
  6515  0005B6  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6516  0005B8  EC1A  F027         	call	___ftge	;wreg free
  6517  0005BC  0101               	movlb	1	; () banked
  6518  0005BE  B0D8               	btfsc	status,0,c
  6519  0005C0  D003               	goto	l9951
  6520                           
  6521                           ; BSR set to: 1
  6522                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6523  0005C2  0101               	movlb	1	; () banked
  6524  0005C4  0EF7               	movlw	247
  6525  0005C6  D002               	goto	L1
  6526  0005C8                     l9951:
  6527                           
  6528                           ; BSR set to: 1
  6529                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6530  0005C8  0101               	movlb	1	; () banked
  6531  0005CA  0EF8               	movlw	248
  6532  0005CC                     L1:
  6533  0005CC  276A               	addwf	printf@exp& (0+255),f,b
  6534  0005CE  0EFF               	movlw	255
  6535  0005D0  236B               	addwfc	(printf@exp+1)& (0+255),f,b
  6536                           
  6537                           ; BSR set to: 1
  6538                           ;doprnt.c: 1124: }
  6539                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6540                           
  6541                           ; BSR set to: 1
  6542  0005D2  0101               	movlb	1	; () banked
  6543  0005D4  516A               	movf	printf@exp& (0+255),w,b
  6544  0005D6  EC7A  F006         	call	_scale
  6545  0005DA  C123  F162         	movff	?_scale,printf@tmpval
  6546  0005DE  C124  F163         	movff	?_scale+1,printf@tmpval+1
  6547  0005E2  C125  F164         	movff	?_scale+2,printf@tmpval+2
  6548                           
  6549                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6550  0005E6  C16E  F100         	movff	printf@fval,__tdiv_to_l_@f1
  6551  0005EA  C16F  F101         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  6552  0005EE  C170  F102         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  6553  0005F2  C162  F103         	movff	printf@tmpval,__tdiv_to_l_@f2
  6554  0005F6  C163  F104         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  6555  0005FA  C164  F105         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  6556  0005FE  ECBF  F017         	call	__tdiv_to_l_	;wreg free
  6557  000602  C100  F166         	movff	?__tdiv_to_l_,printf@val
  6558  000606  C101  F167         	movff	?__tdiv_to_l_+1,printf@val+1
  6559  00060A  C102  F168         	movff	?__tdiv_to_l_+2,printf@val+2
  6560  00060E  C103  F169         	movff	?__tdiv_to_l_+3,printf@val+3
  6561                           
  6562                           ;doprnt.c: 1129: fval = 0.0;
  6563  000612  0E00               	movlw	0
  6564  000614  0101               	movlb	1	; () banked
  6565  000616  6F6E               	movwf	printf@fval& (0+255),b
  6566  000618  0E00               	movlw	0
  6567  00061A  0101               	movlb	1	; () banked
  6568  00061C  6F6F               	movwf	(printf@fval+1)& (0+255),b
  6569  00061E  0E00               	movlw	0
  6570  000620  0101               	movlb	1	; () banked
  6571  000622  6F70               	movwf	(printf@fval+2)& (0+255),b
  6572                           
  6573                           ;doprnt.c: 1130: } else {
  6574  000624  D033               	goto	l9965
  6575  000626                     l9961:
  6576                           
  6577                           ; BSR set to: 1
  6578                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6579  000626  C16E  F12A         	movff	printf@fval,___fttol@f1
  6580  00062A  C16F  F12B         	movff	printf@fval+1,___fttol@f1+1
  6581  00062E  C170  F12C         	movff	printf@fval+2,___fttol@f1+2
  6582  000632  EC76  F01D         	call	___fttol	;wreg free
  6583  000636  C12A  F166         	movff	?___fttol,printf@val
  6584  00063A  C12B  F167         	movff	?___fttol+1,printf@val+1
  6585  00063E  C12C  F168         	movff	?___fttol+2,printf@val+2
  6586  000642  C12D  F169         	movff	?___fttol+3,printf@val+3
  6587                           
  6588                           ;doprnt.c: 1132: fval -= (double)val;
  6589  000646  C16E  F139         	movff	printf@fval,___ftsub@f1
  6590  00064A  C16F  F13A         	movff	printf@fval+1,___ftsub@f1+1
  6591  00064E  C170  F13B         	movff	printf@fval+2,___ftsub@f1+2
  6592  000652  C166  F108         	movff	printf@val,___lltoft@c
  6593  000656  C167  F109         	movff	printf@val+1,___lltoft@c+1
  6594  00065A  C168  F10A         	movff	printf@val+2,___lltoft@c+2
  6595  00065E  C169  F10B         	movff	printf@val+3,___lltoft@c+3
  6596  000662  EC9B  F02F         	call	___lltoft	;wreg free
  6597  000666  C108  F13C         	movff	?___lltoft,___ftsub@f2
  6598  00066A  C109  F13D         	movff	?___lltoft+1,___ftsub@f2+1
  6599  00066E  C10A  F13E         	movff	?___lltoft+2,___ftsub@f2+2
  6600  000672  EC63  F033         	call	___ftsub	;wreg free
  6601  000676  C139  F16E         	movff	?___ftsub,printf@fval
  6602  00067A  C13A  F16F         	movff	?___ftsub+1,printf@fval+1
  6603  00067E  C13B  F170         	movff	?___ftsub+2,printf@fval+2
  6604                           
  6605                           ;doprnt.c: 1133: exp = 0;
  6606  000682  0E00               	movlw	0
  6607  000684  0101               	movlb	1	; () banked
  6608  000686  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6609  000688  0E00               	movlw	0
  6610  00068A  6F6A               	movwf	printf@exp& (0+255),b
  6611  00068C                     l9965:
  6612                           
  6613                           ; BSR set to: 1
  6614                           ;doprnt.c: 1134: }
  6615                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6616  00068C  0E01               	movlw	1
  6617  00068E  0101               	movlb	1	; () banked
  6618  000690  6F73               	movwf	printf@c& (0+255),b
  6619  000692                     l9967:
  6620                           
  6621                           ; BSR set to: 1
  6622  000692  0E0A               	movlw	10
  6623  000694  0101               	movlb	1	; () banked
  6624  000696  1973               	xorwf	printf@c& (0+255),w,b
  6625  000698  B4D8               	btfsc	status,2,c
  6626  00069A  D01E               	goto	l9979
  6627                           
  6628                           ; BSR set to: 1
  6629                           ;doprnt.c: 1137: if(val < dpowers[c])
  6630                           
  6631                           ; BSR set to: 1
  6632                           
  6633                           ; BSR set to: 1
  6634  00069C  0101               	movlb	1	; () banked
  6635  00069E  5173               	movf	printf@c& (0+255),w,b
  6636  0006A0  0D04               	mullw	4
  6637  0006A2  0E3B               	movlw	low _dpowers
  6638  0006A4  24F3               	addwf	prodl,w,c
  6639  0006A6  6EF6               	movwf	tblptrl,c
  6640  0006A8  0E7D               	movlw	high _dpowers
  6641  0006AA  20F4               	addwfc	prodh,w,c
  6642  0006AC  6EF7               	movwf	tblptrh,c
  6643  0006AE                     	if	0	;There are less than 3 active tblptr bytes
  6644  0006AE                     	endif
  6645  0006AE  0009               	tblrd		*+
  6646  0006B0  50F5               	movf	tablat,w,c
  6647  0006B2  0101               	movlb	1	; () banked
  6648  0006B4  5D66               	subwf	printf@val& (0+255),w,b
  6649  0006B6  0009               	tblrd		*+
  6650  0006B8  50F5               	movf	tablat,w,c
  6651  0006BA  0101               	movlb	1	; () banked
  6652  0006BC  5967               	subwfb	(printf@val+1)& (0+255),w,b
  6653  0006BE  0009               	tblrd		*+
  6654  0006C0  50F5               	movf	tablat,w,c
  6655  0006C2  0101               	movlb	1	; () banked
  6656  0006C4  5968               	subwfb	(printf@val+2)& (0+255),w,b
  6657  0006C6  0009               	tblrd		*+
  6658  0006C8  50F5               	movf	tablat,w,c
  6659  0006CA  0101               	movlb	1	; () banked
  6660  0006CC  5969               	subwfb	(printf@val+3)& (0+255),w,b
  6661  0006CE  A0D8               	btfss	status,0,c
  6662  0006D0  D003               	goto	l9979
  6663                           
  6664                           ; BSR set to: 1
  6665                           
  6666                           ; BSR set to: 1
  6667                           
  6668                           ; BSR set to: 1
  6669                           ;doprnt.c: 1138: break;
  6670  0006D2  0101               	movlb	1	; () banked
  6671  0006D4  2B73               	incf	printf@c& (0+255),f,b
  6672  0006D6  D7DD               	goto	l9967
  6673  0006D8                     l9979:
  6674                           
  6675                           ; BSR set to: 1
  6676                           ;doprnt.c: 1142: width -= prec + c + exp;
  6677  0006D8  C173  F151         	movff	printf@c,??_printf
  6678  0006DC  0101               	movlb	1	; () banked
  6679  0006DE  6B52               	clrf	(??_printf+1)& (0+255),b
  6680  0006E0  BF51               	btfsc	??_printf& (0+255),7,b
  6681  0006E2  0752               	decf	(??_printf+1)& (0+255),f,b
  6682  0006E4  0101               	movlb	1	; () banked
  6683  0006E6  5171               	movf	printf@prec& (0+255),w,b
  6684  0006E8  0101               	movlb	1	; () banked
  6685  0006EA  2751               	addwf	??_printf& (0+255),f,b
  6686  0006EC  0101               	movlb	1	; () banked
  6687  0006EE  5172               	movf	(printf@prec+1)& (0+255),w,b
  6688  0006F0  0101               	movlb	1	; () banked
  6689  0006F2  2352               	addwfc	(??_printf+1)& (0+255),f,b
  6690  0006F4  0101               	movlb	1	; () banked
  6691  0006F6  516A               	movf	printf@exp& (0+255),w,b
  6692  0006F8  0101               	movlb	1	; () banked
  6693  0006FA  2751               	addwf	??_printf& (0+255),f,b
  6694  0006FC  0101               	movlb	1	; () banked
  6695  0006FE  516B               	movf	(printf@exp+1)& (0+255),w,b
  6696  000700  0101               	movlb	1	; () banked
  6697  000702  2352               	addwfc	(??_printf+1)& (0+255),f,b
  6698  000704  0101               	movlb	1	; () banked
  6699  000706  5151               	movf	??_printf& (0+255),w,b
  6700  000708  0101               	movlb	1	; () banked
  6701  00070A  5F6C               	subwf	printf@width& (0+255),f,b
  6702  00070C  0101               	movlb	1	; () banked
  6703  00070E  5152               	movf	(??_printf+1)& (0+255),w,b
  6704  000710  0101               	movlb	1	; () banked
  6705  000712  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  6706                           
  6707                           ;doprnt.c: 1143: if(
  6708                           ;doprnt.c: 1147: prec)
  6709  000714  0101               	movlb	1	; () banked
  6710  000716  5171               	movf	printf@prec& (0+255),w,b
  6711  000718  0101               	movlb	1	; () banked
  6712  00071A  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  6713  00071C  B4D8               	btfsc	status,2,c
  6714  00071E  D004               	goto	l9983
  6715                           
  6716                           ; BSR set to: 1
  6717                           ;doprnt.c: 1148: width--;
  6718  000720  0101               	movlb	1	; () banked
  6719  000722  076C               	decf	printf@width& (0+255),f,b
  6720  000724  A0D8               	btfss	status,0,c
  6721  000726  076D               	decf	(printf@width+1)& (0+255),f,b
  6722  000728                     l9983:
  6723                           
  6724                           ; BSR set to: 1
  6725                           ;doprnt.c: 1149: if(flag & 0x03)
  6726  000728  0E03               	movlw	3
  6727  00072A  0101               	movlb	1	; () banked
  6728  00072C  1560               	andwf	printf@flag& (0+255),w,b
  6729  00072E  0101               	movlb	1	; () banked
  6730  000730  6F51               	movwf	??_printf& (0+255),b
  6731  000732  0E00               	movlw	0
  6732  000734  0101               	movlb	1	; () banked
  6733  000736  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6734  000738  0101               	movlb	1	; () banked
  6735  00073A  6F52               	movwf	(??_printf+1)& (0+255),b
  6736  00073C  0101               	movlb	1	; () banked
  6737  00073E  5151               	movf	??_printf& (0+255),w,b
  6738  000740  0101               	movlb	1	; () banked
  6739  000742  1152               	iorwf	(??_printf+1)& (0+255),w,b
  6740  000744  B4D8               	btfsc	status,2,c
  6741  000746  D008               	goto	l9991
  6742  000748  D003               	goto	l9989
  6743  00074A                     l9987:
  6744                           
  6745                           ; BSR set to: 1
  6746                           ;doprnt.c: 1181: (putch(' ') );
  6747  00074A  0E20               	movlw	32
  6748  00074C  EC88  F036         	call	_putch
  6749  000750                     l9989:
  6750                           
  6751                           ;doprnt.c: 1182: width--;
  6752  000750  0101               	movlb	1	; () banked
  6753  000752  076C               	decf	printf@width& (0+255),f,b
  6754  000754  A0D8               	btfss	status,0,c
  6755  000756  076D               	decf	(printf@width+1)& (0+255),f,b
  6756  000758                     l9991:
  6757                           
  6758                           ; BSR set to: 1
  6759  000758  0101               	movlb	1	; () banked
  6760  00075A  BF6D               	btfsc	(printf@width+1)& (0+255),7,b
  6761  00075C  D007               	goto	l9993
  6762  00075E  0101               	movlb	1	; () banked
  6763  000760  516D               	movf	(printf@width+1)& (0+255),w,b
  6764  000762  E1F3               	bnz	l9987
  6765  000764  0101               	movlb	1	; () banked
  6766  000766  056C               	decf	printf@width& (0+255),w,b
  6767  000768  B0D8               	btfsc	status,0,c
  6768  00076A  D7EF               	goto	l9987
  6769  00076C                     l9993:
  6770                           
  6771                           ; BSR set to: 1
  6772                           ;doprnt.c: 1183: }
  6773                           ;doprnt.c: 1188: if(flag & 0x03)
  6774  00076C  0E03               	movlw	3
  6775  00076E  0101               	movlb	1	; () banked
  6776  000770  1560               	andwf	printf@flag& (0+255),w,b
  6777  000772  0101               	movlb	1	; () banked
  6778  000774  6F51               	movwf	??_printf& (0+255),b
  6779  000776  0E00               	movlw	0
  6780  000778  0101               	movlb	1	; () banked
  6781  00077A  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6782  00077C  0101               	movlb	1	; () banked
  6783  00077E  6F52               	movwf	(??_printf+1)& (0+255),b
  6784  000780  0101               	movlb	1	; () banked
  6785  000782  5151               	movf	??_printf& (0+255),w,b
  6786  000784  0101               	movlb	1	; () banked
  6787  000786  1152               	iorwf	(??_printf+1)& (0+255),w,b
  6788  000788  B4D8               	btfsc	status,2,c
  6789  00078A  D04B               	goto	l10003
  6790                           
  6791                           ; BSR set to: 1
  6792                           ;doprnt.c: 1190: (putch('-') );
  6793  00078C  0E2D               	movlw	45
  6794  00078E  EC88  F036         	call	_putch
  6795                           
  6796                           ;doprnt.c: 1195: }
  6797                           ;doprnt.c: 1196: while(c--) {
  6798  000792  D047               	goto	l10003
  6799  000794                     l9997:
  6800                           
  6801                           ;doprnt.c: 1200: {
  6802                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6803  000794  C166  F100         	movff	printf@val,___lldiv@dividend
  6804  000798  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  6805  00079C  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  6806  0007A0  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  6807  0007A4  0101               	movlb	1	; () banked
  6808  0007A6  5173               	movf	printf@c& (0+255),w,b
  6809  0007A8  0D04               	mullw	4
  6810  0007AA  0E3B               	movlw	low _dpowers
  6811  0007AC  24F3               	addwf	prodl,w,c
  6812  0007AE  6EF6               	movwf	tblptrl,c
  6813  0007B0  0E7D               	movlw	high _dpowers
  6814  0007B2  20F4               	addwfc	prodh,w,c
  6815  0007B4  6EF7               	movwf	tblptrh,c
  6816  0007B6                     	if	0	;There are less than 3 active tblptr bytes
  6817  0007B6                     	endif
  6818  0007B6  0009               	tblrd		*+
  6819  0007B8  CFF5 F104          	movff	tablat,___lldiv@divisor
  6820  0007BC  0009               	tblrd		*+
  6821  0007BE  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  6822  0007C2  0009               	tblrd		*+
  6823  0007C4  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  6824  0007C8  000A               	tblrd		*-
  6825  0007CA  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  6826  0007CE  EC3D  F028         	call	___lldiv	;wreg free
  6827  0007D2  C100  F162         	movff	?___lldiv,printf@tmpval
  6828  0007D6  C101  F163         	movff	?___lldiv+1,printf@tmpval+1
  6829  0007DA  C102  F164         	movff	?___lldiv+2,printf@tmpval+2
  6830  0007DE  C103  F165         	movff	?___lldiv+3,printf@tmpval+3
  6831                           
  6832                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6833  0007E2  C162  F10D         	movff	printf@tmpval,___llmod@dividend
  6834  0007E6  C163  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  6835  0007EA  C164  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  6836  0007EE  C165  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  6837  0007F2  0E0A               	movlw	10
  6838  0007F4  0101               	movlb	1	; () banked
  6839  0007F6  6F11               	movwf	___llmod@divisor& (0+255),b
  6840  0007F8  0E00               	movlw	0
  6841  0007FA  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  6842  0007FC  0E00               	movlw	0
  6843  0007FE  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  6844  000800  0E00               	movlw	0
  6845  000802  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  6846  000804  EC3A  F02C         	call	___llmod	;wreg free
  6847  000808  C10D  F162         	movff	?___llmod,printf@tmpval
  6848  00080C  C10E  F163         	movff	?___llmod+1,printf@tmpval+1
  6849  000810  C10F  F164         	movff	?___llmod+2,printf@tmpval+2
  6850  000814  C110  F165         	movff	?___llmod+3,printf@tmpval+3
  6851                           
  6852                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  6853  000818  0101               	movlb	1	; () banked
  6854  00081A  5162               	movf	printf@tmpval& (0+255),w,b
  6855  00081C  0F30               	addlw	48
  6856  00081E  EC88  F036         	call	_putch
  6857  000822                     l10003:
  6858  000822  0101               	movlb	1	; () banked
  6859  000824  0773               	decf	printf@c& (0+255),f,b
  6860  000826  0101               	movlb	1	; () banked
  6861  000828  2973               	incf	printf@c& (0+255),w,b
  6862  00082A  B4D8               	btfsc	status,2,c
  6863  00082C  D008               	goto	l10009
  6864  00082E  D7B2               	goto	l9997
  6865  000830                     l10005:
  6866                           
  6867                           ; BSR set to: 1
  6868                           ;doprnt.c: 1208: (putch('0') );
  6869  000830  0E30               	movlw	48
  6870  000832  EC88  F036         	call	_putch
  6871                           
  6872                           ;doprnt.c: 1209: exp--;
  6873  000836  0101               	movlb	1	; () banked
  6874  000838  076A               	decf	printf@exp& (0+255),f,b
  6875  00083A  A0D8               	btfss	status,0,c
  6876  00083C  076B               	decf	(printf@exp+1)& (0+255),f,b
  6877  00083E                     l10009:
  6878                           
  6879                           ; BSR set to: 1
  6880  00083E  0101               	movlb	1	; () banked
  6881  000840  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  6882  000842  D007               	goto	l10011
  6883  000844  0101               	movlb	1	; () banked
  6884  000846  516B               	movf	(printf@exp+1)& (0+255),w,b
  6885  000848  E1F3               	bnz	l10005
  6886  00084A  0101               	movlb	1	; () banked
  6887  00084C  056A               	decf	printf@exp& (0+255),w,b
  6888  00084E  B0D8               	btfsc	status,0,c
  6889  000850  D7EF               	goto	l10005
  6890  000852                     l10011:
  6891                           
  6892                           ; BSR set to: 1
  6893                           ;doprnt.c: 1210: }
  6894                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6895  000852  0101               	movlb	1	; () banked
  6896  000854  BF72               	btfsc	(printf@prec+1)& (0+255),7,b
  6897  000856  D00C               	goto	l1009
  6898  000858  0101               	movlb	1	; () banked
  6899  00085A  5172               	movf	(printf@prec+1)& (0+255),w,b
  6900  00085C  E105               	bnz	u14720
  6901  00085E  0E09               	movlw	9
  6902  000860  0101               	movlb	1	; () banked
  6903  000862  5D71               	subwf	printf@prec& (0+255),w,b
  6904  000864  A0D8               	btfss	status,0,c
  6905  000866  D004               	goto	l1009
  6906  000868                     u14720:
  6907                           
  6908                           ; BSR set to: 1
  6909                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6910  000868  0E08               	movlw	8
  6911  00086A  0101               	movlb	1	; () banked
  6912  00086C  6F73               	movwf	printf@c& (0+255),b
  6913  00086E  D002               	goto	l10015
  6914  000870                     l1009:
  6915                           
  6916                           ; BSR set to: 1
  6917                           ;doprnt.c: 1213: else
  6918                           ;doprnt.c: 1214: c = prec;
  6919  000870  C171  F173         	movff	printf@prec,printf@c
  6920  000874                     l10015:
  6921                           
  6922                           ; BSR set to: 1
  6923                           ;doprnt.c: 1215: prec -= c;
  6924  000874  0101               	movlb	1	; () banked
  6925  000876  5173               	movf	printf@c& (0+255),w,b
  6926  000878  0101               	movlb	1	; () banked
  6927  00087A  5F71               	subwf	printf@prec& (0+255),f,b
  6928  00087C  0E00               	movlw	0
  6929  00087E  0101               	movlb	1	; () banked
  6930  000880  BF73               	btfsc	printf@c& (0+255),7,b
  6931  000882  0EFF               	movlw	255
  6932  000884  0101               	movlb	1	; () banked
  6933  000886  5B72               	subwfb	(printf@prec+1)& (0+255),f,b
  6934                           
  6935                           ; BSR set to: 1
  6936                           ;doprnt.c: 1219: if(c)
  6937  000888  0101               	movlb	1	; () banked
  6938  00088A  5173               	movf	printf@c& (0+255),w,b
  6939  00088C  0101               	movlb	1	; () banked
  6940  00088E  B4D8               	btfsc	status,2,c
  6941  000890  D003               	goto	l10021
  6942                           
  6943                           ; BSR set to: 1
  6944                           ;doprnt.c: 1221: (putch('.') );
  6945  000892  0E2E               	movlw	46
  6946  000894  EC88  F036         	call	_putch
  6947  000898                     l10021:
  6948                           
  6949                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6950  000898  0101               	movlb	1	; () banked
  6951  00089A  5173               	movf	printf@c& (0+255),w,b
  6952  00089C  EC7A  F006         	call	_scale
  6953  0008A0  C123  F157         	movff	?_scale,_printf$3167
  6954  0008A4  C124  F158         	movff	?_scale+1,_printf$3167+1
  6955  0008A8  C125  F159         	movff	?_scale+2,_printf$3167+2
  6956                           
  6957                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6958  0008AC  C16E  F117         	movff	printf@fval,___ftmul@f2
  6959  0008B0  C16F  F118         	movff	printf@fval+1,___ftmul@f2+1
  6960  0008B4  C170  F119         	movff	printf@fval+2,___ftmul@f2+2
  6961  0008B8  C157  F114         	movff	_printf$3167,___ftmul@f1
  6962  0008BC  C158  F115         	movff	_printf$3167+1,___ftmul@f1+1
  6963  0008C0  C159  F116         	movff	_printf$3167+2,___ftmul@f1+2
  6964  0008C4  ECCC  F01A         	call	___ftmul	;wreg free
  6965  0008C8  C114  F12A         	movff	?___ftmul,___fttol@f1
  6966  0008CC  C115  F12B         	movff	?___ftmul+1,___fttol@f1+1
  6967  0008D0  C116  F12C         	movff	?___ftmul+2,___fttol@f1+2
  6968  0008D4  EC76  F01D         	call	___fttol	;wreg free
  6969  0008D8  C12A  F166         	movff	?___fttol,printf@val
  6970  0008DC  C12B  F167         	movff	?___fttol+1,printf@val+1
  6971  0008E0  C12C  F168         	movff	?___fttol+2,printf@val+2
  6972  0008E4  C12D  F169         	movff	?___fttol+3,printf@val+3
  6973                           
  6974                           ;doprnt.c: 1228: while(c--) {
  6975  0008E8  D06E               	goto	l10031
  6976  0008EA                     l10025:
  6977                           
  6978                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6979  0008EA  C166  F100         	movff	printf@val,___lldiv@dividend
  6980  0008EE  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  6981  0008F2  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  6982  0008F6  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  6983  0008FA  0101               	movlb	1	; () banked
  6984  0008FC  5173               	movf	printf@c& (0+255),w,b
  6985  0008FE  0D04               	mullw	4
  6986  000900  0E3B               	movlw	low _dpowers
  6987  000902  24F3               	addwf	prodl,w,c
  6988  000904  6EF6               	movwf	tblptrl,c
  6989  000906  0E7D               	movlw	high _dpowers
  6990  000908  20F4               	addwfc	prodh,w,c
  6991  00090A  6EF7               	movwf	tblptrh,c
  6992  00090C                     	if	0	;There are less than 3 active tblptr bytes
  6993  00090C                     	endif
  6994  00090C  0009               	tblrd		*+
  6995  00090E  CFF5 F104          	movff	tablat,___lldiv@divisor
  6996  000912  0009               	tblrd		*+
  6997  000914  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  6998  000918  0009               	tblrd		*+
  6999  00091A  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  7000  00091E  000A               	tblrd		*-
  7001  000920  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  7002  000924  EC3D  F028         	call	___lldiv	;wreg free
  7003  000928  C100  F162         	movff	?___lldiv,printf@tmpval
  7004  00092C  C101  F163         	movff	?___lldiv+1,printf@tmpval+1
  7005  000930  C102  F164         	movff	?___lldiv+2,printf@tmpval+2
  7006  000934  C103  F165         	movff	?___lldiv+3,printf@tmpval+3
  7007                           
  7008                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7009  000938  C162  F10D         	movff	printf@tmpval,___llmod@dividend
  7010  00093C  C163  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  7011  000940  C164  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  7012  000944  C165  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  7013  000948  0E0A               	movlw	10
  7014  00094A  0101               	movlb	1	; () banked
  7015  00094C  6F11               	movwf	___llmod@divisor& (0+255),b
  7016  00094E  0E00               	movlw	0
  7017  000950  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  7018  000952  0E00               	movlw	0
  7019  000954  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  7020  000956  0E00               	movlw	0
  7021  000958  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  7022  00095A  EC3A  F02C         	call	___llmod	;wreg free
  7023  00095E  C10D  F162         	movff	?___llmod,printf@tmpval
  7024  000962  C10E  F163         	movff	?___llmod+1,printf@tmpval+1
  7025  000966  C10F  F164         	movff	?___llmod+2,printf@tmpval+2
  7026  00096A  C110  F165         	movff	?___llmod+3,printf@tmpval+3
  7027                           
  7028                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  7029  00096E  0101               	movlb	1	; () banked
  7030  000970  5162               	movf	printf@tmpval& (0+255),w,b
  7031  000972  0F30               	addlw	48
  7032  000974  EC88  F036         	call	_putch
  7033                           
  7034                           ;doprnt.c: 1232: val %= dpowers[c];
  7035  000978  C166  F10D         	movff	printf@val,___llmod@dividend
  7036  00097C  C167  F10E         	movff	printf@val+1,___llmod@dividend+1
  7037  000980  C168  F10F         	movff	printf@val+2,___llmod@dividend+2
  7038  000984  C169  F110         	movff	printf@val+3,___llmod@dividend+3
  7039  000988  0101               	movlb	1	; () banked
  7040  00098A  5173               	movf	printf@c& (0+255),w,b
  7041  00098C  0D04               	mullw	4
  7042  00098E  0E3B               	movlw	low _dpowers
  7043  000990  24F3               	addwf	prodl,w,c
  7044  000992  6EF6               	movwf	tblptrl,c
  7045  000994  0E7D               	movlw	high _dpowers
  7046  000996  20F4               	addwfc	prodh,w,c
  7047  000998  6EF7               	movwf	tblptrh,c
  7048  00099A                     	if	0	;There are less than 3 active tblptr bytes
  7049  00099A                     	endif
  7050  00099A  0009               	tblrd		*+
  7051  00099C  CFF5 F111          	movff	tablat,___llmod@divisor
  7052  0009A0  0009               	tblrd		*+
  7053  0009A2  CFF5 F112          	movff	tablat,___llmod@divisor+1
  7054  0009A6  0009               	tblrd		*+
  7055  0009A8  CFF5 F113          	movff	tablat,___llmod@divisor+2
  7056  0009AC  000A               	tblrd		*-
  7057  0009AE  CFF5 F114          	movff	tablat,___llmod@divisor+3
  7058  0009B2  EC3A  F02C         	call	___llmod	;wreg free
  7059  0009B6  C10D  F166         	movff	?___llmod,printf@val
  7060  0009BA  C10E  F167         	movff	?___llmod+1,printf@val+1
  7061  0009BE  C10F  F168         	movff	?___llmod+2,printf@val+2
  7062  0009C2  C110  F169         	movff	?___llmod+3,printf@val+3
  7063  0009C6                     l10031:
  7064  0009C6  0101               	movlb	1	; () banked
  7065  0009C8  0773               	decf	printf@c& (0+255),f,b
  7066  0009CA  0101               	movlb	1	; () banked
  7067  0009CC  2973               	incf	printf@c& (0+255),w,b
  7068  0009CE  B4D8               	btfsc	status,2,c
  7069  0009D0  D008               	goto	l10037
  7070  0009D2  D78B               	goto	l10025
  7071  0009D4                     l10033:
  7072                           
  7073                           ; BSR set to: 1
  7074                           ;doprnt.c: 1236: (putch('0') );
  7075  0009D4  0E30               	movlw	48
  7076  0009D6  EC88  F036         	call	_putch
  7077                           
  7078                           ;doprnt.c: 1237: prec--;
  7079  0009DA  0101               	movlb	1	; () banked
  7080  0009DC  0771               	decf	printf@prec& (0+255),f,b
  7081  0009DE  A0D8               	btfss	status,0,c
  7082  0009E0  0772               	decf	(printf@prec+1)& (0+255),f,b
  7083  0009E2                     l10037:
  7084                           
  7085                           ; BSR set to: 1
  7086  0009E2  0101               	movlb	1	; () banked
  7087  0009E4  5171               	movf	printf@prec& (0+255),w,b
  7088  0009E6  0101               	movlb	1	; () banked
  7089  0009E8  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  7090  0009EA  B4D8               	btfsc	status,2,c
  7091  0009EC  D173               	goto	l10117
  7092  0009EE  D7F2               	goto	l10033
  7093  0009F0                     l975:
  7094                           
  7095                           ; BSR set to: 1
  7096                           ;doprnt.c: 1246: }
  7097                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  7098  0009F0  0101               	movlb	1	; () banked
  7099  0009F2  BD60               	btfsc	printf@flag& (0+255),6,b
  7100  0009F4  D023               	goto	l10049
  7101                           
  7102                           ; BSR set to: 1
  7103                           ;doprnt.c: 1253: {
  7104                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7105  0009F6  C15E  FFD9         	movff	printf@ap,fsr2l
  7106  0009FA  C15F  FFDA         	movff	printf@ap+1,fsr2h
  7107  0009FE  CFDE F166          	movff	postinc2,printf@val
  7108  000A02  CFDD F167          	movff	postdec2,printf@val+1
  7109  000A06  0101               	movlb	1	; () banked
  7110  000A08  0E00               	movlw	0
  7111  000A0A  BF67               	btfsc	(printf@val+1)& (0+255),7,b
  7112  000A0C  0EFF               	movlw	-1
  7113  000A0E  6F68               	movwf	(printf@val+2)& (0+255),b
  7114  000A10  6F69               	movwf	(printf@val+3)& (0+255),b
  7115                           
  7116                           ; BSR set to: 1
  7117  000A12  0E02               	movlw	2
  7118  000A14  0101               	movlb	1	; () banked
  7119  000A16  275E               	addwf	printf@ap& (0+255),f,b
  7120  000A18  0E00               	movlw	0
  7121  000A1A  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  7122                           
  7123                           ; BSR set to: 1
  7124                           ;doprnt.c: 1261: if((long)val < 0) {
  7125  000A1C  0101               	movlb	1	; () banked
  7126  000A1E  AF69               	btfss	(printf@val+3)& (0+255),7,b
  7127  000A20  D021               	goto	l10053
  7128                           
  7129                           ; BSR set to: 1
  7130                           ;doprnt.c: 1262: flag |= 0x03;
  7131  000A22  0E03               	movlw	3
  7132  000A24  0101               	movlb	1	; () banked
  7133  000A26  1360               	iorwf	printf@flag& (0+255),f,b
  7134                           
  7135                           ; BSR set to: 1
  7136                           ;doprnt.c: 1263: val = -val;
  7137  000A28  0101               	movlb	1	; () banked
  7138  000A2A  1F69               	comf	(printf@val+3)& (0+255),f,b
  7139  000A2C  1F68               	comf	(printf@val+2)& (0+255),f,b
  7140  000A2E  1F67               	comf	(printf@val+1)& (0+255),f,b
  7141  000A30  6D66               	negf	printf@val& (0+255),b
  7142  000A32  0E00               	movlw	0
  7143  000A34  2367               	addwfc	(printf@val+1)& (0+255),f,b
  7144  000A36  2368               	addwfc	(printf@val+2)& (0+255),f,b
  7145  000A38  2369               	addwfc	(printf@val+3)& (0+255),f,b
  7146                           
  7147                           ; BSR set to: 1
  7148                           ;doprnt.c: 1264: }
  7149                           ;doprnt.c: 1266: }
  7150  000A3A  D014               	goto	l10053
  7151  000A3C                     l10049:
  7152                           
  7153                           ; BSR set to: 1
  7154                           ;doprnt.c: 1268: else
  7155                           ;doprnt.c: 1273: {
  7156                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7157  000A3C  C15E  FFD9         	movff	printf@ap,fsr2l
  7158  000A40  C15F  FFDA         	movff	printf@ap+1,fsr2h
  7159  000A44  CFDE F151          	movff	postinc2,??_printf
  7160  000A48  CFDD F152          	movff	postdec2,??_printf+1
  7161  000A4C  C151  F166         	movff	??_printf,printf@val
  7162  000A50  C152  F167         	movff	??_printf+1,printf@val+1
  7163  000A54  0101               	movlb	1	; () banked
  7164  000A56  6B68               	clrf	(printf@val+2)& (0+255),b
  7165  000A58  6B69               	clrf	(printf@val+3)& (0+255),b
  7166                           
  7167                           ; BSR set to: 1
  7168  000A5A  0E02               	movlw	2
  7169  000A5C  0101               	movlb	1	; () banked
  7170  000A5E  275E               	addwf	printf@ap& (0+255),f,b
  7171  000A60  0E00               	movlw	0
  7172  000A62  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  7173  000A64                     l10053:
  7174                           
  7175                           ; BSR set to: 1
  7176                           ;doprnt.c: 1287: }
  7177                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7178  000A64  0101               	movlb	1	; () banked
  7179  000A66  5171               	movf	printf@prec& (0+255),w,b
  7180  000A68  0101               	movlb	1	; () banked
  7181  000A6A  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  7182  000A6C  A4D8               	btfss	status,2,c
  7183  000A6E  D00D               	goto	l10059
  7184                           
  7185                           ; BSR set to: 1
  7186  000A70  0101               	movlb	1	; () banked
  7187  000A72  5166               	movf	printf@val& (0+255),w,b
  7188  000A74  0101               	movlb	1	; () banked
  7189  000A76  1167               	iorwf	(printf@val+1)& (0+255),w,b
  7190  000A78  0101               	movlb	1	; () banked
  7191  000A7A  1168               	iorwf	(printf@val+2)& (0+255),w,b
  7192  000A7C  0101               	movlb	1	; () banked
  7193  000A7E  1169               	iorwf	(printf@val+3)& (0+255),w,b
  7194  000A80  A4D8               	btfss	status,2,c
  7195  000A82  D003               	goto	l10059
  7196                           
  7197                           ; BSR set to: 1
  7198                           ;doprnt.c: 1291: prec++;
  7199  000A84  0101               	movlb	1	; () banked
  7200  000A86  4B71               	infsnz	printf@prec& (0+255),f,b
  7201  000A88  2B72               	incf	(printf@prec+1)& (0+255),f,b
  7202  000A8A                     l10059:
  7203                           
  7204                           ; BSR set to: 1
  7205                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7206  000A8A  0E01               	movlw	1
  7207  000A8C  0101               	movlb	1	; () banked
  7208  000A8E  6F73               	movwf	printf@c& (0+255),b
  7209  000A90                     l10061:
  7210                           
  7211                           ; BSR set to: 1
  7212  000A90  0E0A               	movlw	10
  7213  000A92  0101               	movlb	1	; () banked
  7214  000A94  1973               	xorwf	printf@c& (0+255),w,b
  7215  000A96  B4D8               	btfsc	status,2,c
  7216  000A98  D01E               	goto	l10073
  7217                           
  7218                           ; BSR set to: 1
  7219                           ;doprnt.c: 1306: if(val < dpowers[c])
  7220                           
  7221                           ; BSR set to: 1
  7222                           
  7223                           ; BSR set to: 1
  7224  000A9A  0101               	movlb	1	; () banked
  7225  000A9C  5173               	movf	printf@c& (0+255),w,b
  7226  000A9E  0D04               	mullw	4
  7227  000AA0  0E3B               	movlw	low _dpowers
  7228  000AA2  24F3               	addwf	prodl,w,c
  7229  000AA4  6EF6               	movwf	tblptrl,c
  7230  000AA6  0E7D               	movlw	high _dpowers
  7231  000AA8  20F4               	addwfc	prodh,w,c
  7232  000AAA  6EF7               	movwf	tblptrh,c
  7233  000AAC                     	if	0	;There are less than 3 active tblptr bytes
  7234  000AAC                     	endif
  7235  000AAC  0009               	tblrd		*+
  7236  000AAE  50F5               	movf	tablat,w,c
  7237  000AB0  0101               	movlb	1	; () banked
  7238  000AB2  5D66               	subwf	printf@val& (0+255),w,b
  7239  000AB4  0009               	tblrd		*+
  7240  000AB6  50F5               	movf	tablat,w,c
  7241  000AB8  0101               	movlb	1	; () banked
  7242  000ABA  5967               	subwfb	(printf@val+1)& (0+255),w,b
  7243  000ABC  0009               	tblrd		*+
  7244  000ABE  50F5               	movf	tablat,w,c
  7245  000AC0  0101               	movlb	1	; () banked
  7246  000AC2  5968               	subwfb	(printf@val+2)& (0+255),w,b
  7247  000AC4  0009               	tblrd		*+
  7248  000AC6  50F5               	movf	tablat,w,c
  7249  000AC8  0101               	movlb	1	; () banked
  7250  000ACA  5969               	subwfb	(printf@val+3)& (0+255),w,b
  7251  000ACC  A0D8               	btfss	status,0,c
  7252  000ACE  D003               	goto	l10073
  7253                           
  7254                           ; BSR set to: 1
  7255                           
  7256                           ; BSR set to: 1
  7257                           
  7258                           ; BSR set to: 1
  7259                           ;doprnt.c: 1307: break;
  7260  000AD0  0101               	movlb	1	; () banked
  7261  000AD2  2B73               	incf	printf@c& (0+255),f,b
  7262  000AD4  D7DD               	goto	l10061
  7263  000AD6                     l10073:
  7264                           
  7265                           ; BSR set to: 1
  7266                           ;doprnt.c: 1339: if(c < prec)
  7267  000AD6  0E80               	movlw	128
  7268  000AD8  0101               	movlb	1	; () banked
  7269  000ADA  BF73               	btfsc	printf@c& (0+255),7,b
  7270  000ADC  0E7F               	movlw	127
  7271  000ADE  0101               	movlb	1	; () banked
  7272  000AE0  6F51               	movwf	??_printf& (0+255),b
  7273  000AE2  0101               	movlb	1	; () banked
  7274  000AE4  5171               	movf	printf@prec& (0+255),w,b
  7275  000AE6  0101               	movlb	1	; () banked
  7276  000AE8  5D73               	subwf	printf@c& (0+255),w,b
  7277  000AEA  0101               	movlb	1	; () banked
  7278  000AEC  5172               	movf	(printf@prec+1)& (0+255),w,b
  7279  000AEE  0A80               	xorlw	128
  7280  000AF0  0101               	movlb	1	; () banked
  7281  000AF2  5951               	subwfb	??_printf& (0+255),w,b
  7282  000AF4  B0D8               	btfsc	status,0,c
  7283  000AF6  D003               	goto	l10077
  7284                           
  7285                           ; BSR set to: 1
  7286                           ;doprnt.c: 1340: c = prec;
  7287  000AF8  C171  F173         	movff	printf@prec,printf@c
  7288  000AFC  D018               	goto	l10081
  7289  000AFE                     l10077:
  7290                           
  7291                           ; BSR set to: 1
  7292                           ;doprnt.c: 1341: else if(prec < c)
  7293  000AFE  0101               	movlb	1	; () banked
  7294  000B00  5172               	movf	(printf@prec+1)& (0+255),w,b
  7295  000B02  0A80               	xorlw	128
  7296  000B04  0101               	movlb	1	; () banked
  7297  000B06  6F51               	movwf	??_printf& (0+255),b
  7298  000B08  0101               	movlb	1	; () banked
  7299  000B0A  5173               	movf	printf@c& (0+255),w,b
  7300  000B0C  0101               	movlb	1	; () banked
  7301  000B0E  5D71               	subwf	printf@prec& (0+255),w,b
  7302  000B10  0E80               	movlw	128
  7303  000B12  0101               	movlb	1	; () banked
  7304  000B14  BF73               	btfsc	printf@c& (0+255),7,b
  7305  000B16  0E7F               	movlw	127
  7306  000B18  0101               	movlb	1	; () banked
  7307  000B1A  5951               	subwfb	??_printf& (0+255),w,b
  7308  000B1C  B0D8               	btfsc	status,0,c
  7309  000B1E  D007               	goto	l10081
  7310                           
  7311                           ; BSR set to: 1
  7312                           ;doprnt.c: 1342: prec = c;
  7313  000B20  0101               	movlb	1	; () banked
  7314  000B22  5173               	movf	printf@c& (0+255),w,b
  7315  000B24  0101               	movlb	1	; () banked
  7316  000B26  6F71               	movwf	printf@prec& (0+255),b
  7317  000B28  6B72               	clrf	(printf@prec+1)& (0+255),b
  7318  000B2A  BF71               	btfsc	printf@prec& (0+255),7,b
  7319  000B2C  0772               	decf	(printf@prec+1)& (0+255),f,b
  7320  000B2E                     l10081:
  7321                           
  7322                           ; BSR set to: 1
  7323                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7324  000B2E  0101               	movlb	1	; () banked
  7325  000B30  516C               	movf	printf@width& (0+255),w,b
  7326  000B32  0101               	movlb	1	; () banked
  7327  000B34  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7328  000B36  B4D8               	btfsc	status,2,c
  7329  000B38  D014               	goto	l10087
  7330                           
  7331                           ; BSR set to: 1
  7332  000B3A  0E03               	movlw	3
  7333  000B3C  0101               	movlb	1	; () banked
  7334  000B3E  1560               	andwf	printf@flag& (0+255),w,b
  7335  000B40  0101               	movlb	1	; () banked
  7336  000B42  6F51               	movwf	??_printf& (0+255),b
  7337  000B44  0E00               	movlw	0
  7338  000B46  0101               	movlb	1	; () banked
  7339  000B48  1561               	andwf	(printf@flag+1)& (0+255),w,b
  7340  000B4A  0101               	movlb	1	; () banked
  7341  000B4C  6F52               	movwf	(??_printf+1)& (0+255),b
  7342  000B4E  0101               	movlb	1	; () banked
  7343  000B50  5151               	movf	??_printf& (0+255),w,b
  7344  000B52  0101               	movlb	1	; () banked
  7345  000B54  1152               	iorwf	(??_printf+1)& (0+255),w,b
  7346  000B56  B4D8               	btfsc	status,2,c
  7347  000B58  D004               	goto	l10087
  7348                           
  7349                           ; BSR set to: 1
  7350                           ;doprnt.c: 1346: width--;
  7351  000B5A  0101               	movlb	1	; () banked
  7352  000B5C  076C               	decf	printf@width& (0+255),f,b
  7353  000B5E  A0D8               	btfss	status,0,c
  7354  000B60  076D               	decf	(printf@width+1)& (0+255),f,b
  7355  000B62                     l10087:
  7356                           
  7357                           ; BSR set to: 1
  7358                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7359  000B62  0101               	movlb	1	; () banked
  7360  000B64  AD61               	btfss	(printf@flag+1)& (0+255),6,b
  7361  000B66  D01E               	goto	l10095
  7362                           
  7363                           ; BSR set to: 1
  7364                           ;doprnt.c: 1349: if(width > prec)
  7365  000B68  0101               	movlb	1	; () banked
  7366  000B6A  516C               	movf	printf@width& (0+255),w,b
  7367  000B6C  0101               	movlb	1	; () banked
  7368  000B6E  5D71               	subwf	printf@prec& (0+255),w,b
  7369  000B70  0101               	movlb	1	; () banked
  7370  000B72  5172               	movf	(printf@prec+1)& (0+255),w,b
  7371  000B74  0A80               	xorlw	128
  7372  000B76  0101               	movlb	1	; () banked
  7373  000B78  6F51               	movwf	??_printf& (0+255),b
  7374  000B7A  0101               	movlb	1	; () banked
  7375  000B7C  516D               	movf	(printf@width+1)& (0+255),w,b
  7376  000B7E  0A80               	xorlw	128
  7377  000B80  0101               	movlb	1	; () banked
  7378  000B82  5951               	subwfb	??_printf& (0+255),w,b
  7379  000B84  B0D8               	btfsc	status,0,c
  7380  000B86  D009               	goto	l10093
  7381                           
  7382                           ; BSR set to: 1
  7383                           ;doprnt.c: 1350: width -= prec;
  7384  000B88  0101               	movlb	1	; () banked
  7385  000B8A  5171               	movf	printf@prec& (0+255),w,b
  7386  000B8C  0101               	movlb	1	; () banked
  7387  000B8E  5F6C               	subwf	printf@width& (0+255),f,b
  7388  000B90  0101               	movlb	1	; () banked
  7389  000B92  5172               	movf	(printf@prec+1)& (0+255),w,b
  7390  000B94  0101               	movlb	1	; () banked
  7391  000B96  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  7392  000B98  D005               	goto	l10095
  7393  000B9A                     l10093:
  7394                           
  7395                           ; BSR set to: 1
  7396                           ;doprnt.c: 1351: else
  7397                           ;doprnt.c: 1352: width = 0;
  7398  000B9A  0E00               	movlw	0
  7399  000B9C  0101               	movlb	1	; () banked
  7400  000B9E  6F6D               	movwf	(printf@width+1)& (0+255),b
  7401  000BA0  0E00               	movlw	0
  7402  000BA2  6F6C               	movwf	printf@width& (0+255),b
  7403  000BA4                     l10095:
  7404                           
  7405                           ; BSR set to: 1
  7406                           ;doprnt.c: 1353: }
  7407                           ;doprnt.c: 1381: if(width > c)
  7408  000BA4  0E80               	movlw	128
  7409  000BA6  0101               	movlb	1	; () banked
  7410  000BA8  BF73               	btfsc	printf@c& (0+255),7,b
  7411  000BAA  0E7F               	movlw	127
  7412  000BAC  0101               	movlb	1	; () banked
  7413  000BAE  6F51               	movwf	??_printf& (0+255),b
  7414  000BB0  0101               	movlb	1	; () banked
  7415  000BB2  516C               	movf	printf@width& (0+255),w,b
  7416  000BB4  0101               	movlb	1	; () banked
  7417  000BB6  5D73               	subwf	printf@c& (0+255),w,b
  7418  000BB8  0101               	movlb	1	; () banked
  7419  000BBA  516D               	movf	(printf@width+1)& (0+255),w,b
  7420  000BBC  0A80               	xorlw	128
  7421  000BBE  0101               	movlb	1	; () banked
  7422  000BC0  5951               	subwfb	??_printf& (0+255),w,b
  7423  000BC2  B0D8               	btfsc	status,0,c
  7424  000BC4  D00B               	goto	l10099
  7425                           
  7426                           ; BSR set to: 1
  7427                           ;doprnt.c: 1382: width -= c;
  7428  000BC6  0101               	movlb	1	; () banked
  7429  000BC8  5173               	movf	printf@c& (0+255),w,b
  7430  000BCA  0101               	movlb	1	; () banked
  7431  000BCC  5F6C               	subwf	printf@width& (0+255),f,b
  7432  000BCE  0E00               	movlw	0
  7433  000BD0  0101               	movlb	1	; () banked
  7434  000BD2  BF73               	btfsc	printf@c& (0+255),7,b
  7435  000BD4  0EFF               	movlw	255
  7436  000BD6  0101               	movlb	1	; () banked
  7437  000BD8  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  7438  000BDA  D005               	goto	l10101
  7439  000BDC                     l10099:
  7440                           
  7441                           ; BSR set to: 1
  7442                           ;doprnt.c: 1383: else
  7443                           ;doprnt.c: 1384: width = 0;
  7444  000BDC  0E00               	movlw	0
  7445  000BDE  0101               	movlb	1	; () banked
  7446  000BE0  6F6D               	movwf	(printf@width+1)& (0+255),b
  7447  000BE2  0E00               	movlw	0
  7448  000BE4  6F6C               	movwf	printf@width& (0+255),b
  7449  000BE6                     l10101:
  7450                           
  7451                           ; BSR set to: 1
  7452                           ;doprnt.c: 1422: {
  7453                           ;doprnt.c: 1424: if(width
  7454                           ;doprnt.c: 1428: )
  7455  000BE6  0101               	movlb	1	; () banked
  7456  000BE8  516C               	movf	printf@width& (0+255),w,b
  7457  000BEA  0101               	movlb	1	; () banked
  7458  000BEC  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7459  000BEE  B4D8               	btfsc	status,2,c
  7460  000BF0  D00D               	goto	l10107
  7461  000BF2                     l10103:
  7462                           
  7463                           ; BSR set to: 1
  7464                           ;doprnt.c: 1430: (putch(' ') );
  7465  000BF2  0E20               	movlw	32
  7466  000BF4  EC88  F036         	call	_putch
  7467                           
  7468                           ;doprnt.c: 1431: while(--width);
  7469  000BF8  0101               	movlb	1	; () banked
  7470  000BFA  076C               	decf	printf@width& (0+255),f,b
  7471  000BFC  A0D8               	btfss	status,0,c
  7472  000BFE  076D               	decf	(printf@width+1)& (0+255),f,b
  7473  000C00  0101               	movlb	1	; () banked
  7474  000C02  516C               	movf	printf@width& (0+255),w,b
  7475  000C04  0101               	movlb	1	; () banked
  7476  000C06  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7477  000C08  A4D8               	btfss	status,2,c
  7478  000C0A  D7F3               	goto	l10103
  7479  000C0C                     l10107:
  7480                           
  7481                           ; BSR set to: 1
  7482                           ;doprnt.c: 1438: if(flag & 0x03)
  7483  000C0C  0E03               	movlw	3
  7484  000C0E  0101               	movlb	1	; () banked
  7485  000C10  1560               	andwf	printf@flag& (0+255),w,b
  7486  000C12  0101               	movlb	1	; () banked
  7487  000C14  6F51               	movwf	??_printf& (0+255),b
  7488  000C16  0E00               	movlw	0
  7489  000C18  0101               	movlb	1	; () banked
  7490  000C1A  1561               	andwf	(printf@flag+1)& (0+255),w,b
  7491  000C1C  0101               	movlb	1	; () banked
  7492  000C1E  6F52               	movwf	(??_printf+1)& (0+255),b
  7493  000C20  0101               	movlb	1	; () banked
  7494  000C22  5151               	movf	??_printf& (0+255),w,b
  7495  000C24  0101               	movlb	1	; () banked
  7496  000C26  1152               	iorwf	(??_printf+1)& (0+255),w,b
  7497  000C28  B4D8               	btfsc	status,2,c
  7498  000C2A  D049               	goto	l10115
  7499                           
  7500                           ; BSR set to: 1
  7501                           ;doprnt.c: 1439: (putch('-') );
  7502  000C2C  0E2D               	movlw	45
  7503  000C2E  EC88  F036         	call	_putch
  7504                           
  7505                           ;doprnt.c: 1469: }
  7506                           ;doprnt.c: 1474: while(prec--) {
  7507  000C32  D045               	goto	l10115
  7508  000C34                     l10111:
  7509                           
  7510                           ;doprnt.c: 1478: {
  7511                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7512  000C34  C171  F151         	movff	printf@prec,??_printf
  7513  000C38  C172  F152         	movff	printf@prec+1,??_printf+1
  7514  000C3C  0101               	movlb	1	; () banked
  7515  000C3E  90D8               	bcf	status,0,c
  7516  000C40  3751               	rlcf	??_printf& (0+255),f,b
  7517  000C42  3752               	rlcf	(??_printf+1)& (0+255),f,b
  7518  000C44  0101               	movlb	1	; () banked
  7519  000C46  90D8               	bcf	status,0,c
  7520  000C48  3751               	rlcf	??_printf& (0+255),f,b
  7521  000C4A  3752               	rlcf	(??_printf+1)& (0+255),f,b
  7522  000C4C  0E3B               	movlw	low _dpowers
  7523  000C4E  0101               	movlb	1	; () banked
  7524  000C50  2551               	addwf	??_printf& (0+255),w,b
  7525  000C52  6EF6               	movwf	tblptrl,c
  7526  000C54  0E7D               	movlw	high _dpowers
  7527  000C56  2152               	addwfc	(??_printf+1)& (0+255),w,b
  7528  000C58  6EF7               	movwf	tblptrh,c
  7529  000C5A                     	if	0	;There are less than 3 active tblptr bytes
  7530  000C5A                     	endif
  7531  000C5A  0009               	tblrd		*+
  7532  000C5C  CFF5 F104          	movff	tablat,___lldiv@divisor
  7533  000C60  0009               	tblrd		*+
  7534  000C62  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  7535  000C66  0009               	tblrd		*+
  7536  000C68  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  7537  000C6C  000A               	tblrd		*-
  7538  000C6E  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  7539  000C72  C166  F100         	movff	printf@val,___lldiv@dividend
  7540  000C76  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  7541  000C7A  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  7542  000C7E  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  7543  000C82  EC3D  F028         	call	___lldiv	;wreg free
  7544  000C86  C100  F10D         	movff	?___lldiv,___llmod@dividend
  7545  000C8A  C101  F10E         	movff	?___lldiv+1,___llmod@dividend+1
  7546  000C8E  C102  F10F         	movff	?___lldiv+2,___llmod@dividend+2
  7547  000C92  C103  F110         	movff	?___lldiv+3,___llmod@dividend+3
  7548  000C96  0E0A               	movlw	10
  7549  000C98  0101               	movlb	1	; () banked
  7550  000C9A  6F11               	movwf	___llmod@divisor& (0+255),b
  7551  000C9C  0E00               	movlw	0
  7552  000C9E  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  7553  000CA0  0E00               	movlw	0
  7554  000CA2  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  7555  000CA4  0E00               	movlw	0
  7556  000CA6  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  7557  000CA8  EC3A  F02C         	call	___llmod	;wreg free
  7558  000CAC  0101               	movlb	1	; () banked
  7559  000CAE  510D               	movf	?___llmod& (0+255),w,b
  7560  000CB0  0F30               	addlw	48
  7561  000CB2  0101               	movlb	1	; () banked
  7562  000CB4  6F73               	movwf	printf@c& (0+255),b
  7563                           
  7564                           ; BSR set to: 1
  7565                           ;doprnt.c: 1523: }
  7566                           ;doprnt.c: 1524: (putch(c) );
  7567  000CB6  0101               	movlb	1	; () banked
  7568  000CB8  5173               	movf	printf@c& (0+255),w,b
  7569  000CBA  EC88  F036         	call	_putch
  7570  000CBE                     l10115:
  7571  000CBE  0101               	movlb	1	; () banked
  7572  000CC0  0771               	decf	printf@prec& (0+255),f,b
  7573  000CC2  A0D8               	btfss	status,0,c
  7574  000CC4  0772               	decf	(printf@prec+1)& (0+255),f,b
  7575  000CC6  0101               	movlb	1	; () banked
  7576  000CC8  2971               	incf	printf@prec& (0+255),w,b
  7577  000CCA  E1B4               	bnz	l10111
  7578  000CCC  0101               	movlb	1	; () banked
  7579  000CCE  2972               	incf	(printf@prec+1)& (0+255),w,b
  7580  000CD0  A4D8               	btfss	status,2,c
  7581  000CD2  D7B0               	goto	l10111
  7582  000CD4                     l10117:
  7583  000CD4  C13F  FFF6         	movff	printf@f,tblptrl
  7584  000CD8  C140  FFF7         	movff	printf@f+1,tblptrh
  7585  000CDC  0101               	movlb	1	; () banked
  7586  000CDE  4B3F               	infsnz	printf@f& (0+255),f,b
  7587  000CE0  2B40               	incf	(printf@f+1)& (0+255),f,b
  7588  000CE2                     	if	0	;tblptru may be non-zero
  7589  000CE2                     	endif
  7590  000CE2                     	if	0	;tblptru may be non-zero
  7591  000CE2                     	endif
  7592  000CE2  0008               	tblrd		*
  7593  000CE4  CFF5 F173          	movff	tablat,printf@c
  7594  000CE8  0101               	movlb	1	; () banked
  7595  000CEA  5173               	movf	printf@c& (0+255),w,b
  7596  000CEC  B4D8               	btfsc	status,2,c
  7597  000CEE  0012               	return	
  7598  000CF0  EF69  F000         	goto	l9819
  7599  000CF4                     __end_of_printf:
  7600                           	opt stack 0
  7601                           tblptru	equ	0xFF8
  7602                           tblptrh	equ	0xFF7
  7603                           tblptrl	equ	0xFF6
  7604                           tablat	equ	0xFF5
  7605                           prodh	equ	0xFF4
  7606                           prodl	equ	0xFF3
  7607                           intcon	equ	0xFF2
  7608                           postinc0	equ	0xFEE
  7609                           wreg	equ	0xFE8
  7610                           postdec1	equ	0xFE5
  7611                           fsr1l	equ	0xFE1
  7612                           indf2	equ	0xFDF
  7613                           postinc2	equ	0xFDE
  7614                           postdec2	equ	0xFDD
  7615                           fsr2h	equ	0xFDA
  7616                           fsr2l	equ	0xFD9
  7617                           status	equ	0xFD8
  7618                           
  7619 ;; *************** function _scale *****************
  7620 ;; Defined at:
  7621 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  7622 ;; Parameters:    Size  Location     Type
  7623 ;;  scl             1    wreg     char 
  7624 ;; Auto vars:     Size  Location     Type
  7625 ;;  scl             1   41[BANK1 ] char 
  7626 ;; Return value:  Size  Location     Type
  7627 ;;                  3   35[BANK1 ] char 
  7628 ;; Registers used:
  7629 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7630 ;; Tracked objects:
  7631 ;;		On entry : 0/0
  7632 ;;		On exit  : 0/0
  7633 ;;		Unchanged: 0/0
  7634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7635 ;;      Params:         0       0       3       0       0       0       0
  7636 ;;      Locals:         0       0       4       0       0       0       0
  7637 ;;      Temps:          0       0       0       0       0       0       0
  7638 ;;      Totals:         0       0       7       0       0       0       0
  7639 ;;Total ram usage:        7 bytes
  7640 ;; Hardware stack levels used:    1
  7641 ;; Hardware stack levels required when called:   14
  7642 ;; This function calls:
  7643 ;;		___awdiv
  7644 ;;		___awmod
  7645 ;;		___ftmul
  7646 ;;		___wmul
  7647 ;; This function is called by:
  7648 ;;		_printf
  7649 ;; This function uses a non-reentrant model
  7650 ;;
  7651                           
  7652                           	psect	text23
  7653  000CF4                     __ptext23:
  7654                           	opt stack 0
  7655  000CF4                     _scale:
  7656                           	opt stack 13
  7657                           
  7658                           ; BSR set to: 1
  7659                           ;incstack = 0
  7660                           ;scale@scl stored from wreg
  7661  000CF4  0101               	movlb	1	; () banked
  7662  000CF6  6F29               	movwf	scale@scl& (0+255),b
  7663                           
  7664                           ;doprnt.c: 428: if(scl < 0) {
  7665  000CF8  0101               	movlb	1	; () banked
  7666  000CFA  AF29               	btfss	scale@scl& (0+255),7,b
  7667  000CFC  D12A               	goto	l9559
  7668                           
  7669                           ; BSR set to: 1
  7670                           ;doprnt.c: 429: scl = -scl;
  7671  000CFE  0101               	movlb	1	; () banked
  7672  000D00  6D29               	negf	scale@scl& (0+255),b
  7673                           
  7674                           ;doprnt.c: 430: if(scl>=110)
  7675  000D02  0101               	movlb	1	; () banked
  7676  000D04  5129               	movf	scale@scl& (0+255),w,b
  7677  000D06  0A80               	xorlw	128
  7678  000D08  0F12               	addlw	-238
  7679  000D0A  A0D8               	btfss	status,0,c
  7680  000D0C  D0AC               	goto	l9549
  7681                           
  7682                           ; BSR set to: 1
  7683                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7684  000D0E  0E00               	movlw	0
  7685  000D10  0101               	movlb	1	; () banked
  7686  000D12  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7687  000D14  0E03               	movlw	3
  7688  000D16  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7689  000D18  0E00               	movlw	0
  7690  000D1A  0101               	movlb	1	; () banked
  7691  000D1C  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7692  000D1E  0E0A               	movlw	10
  7693  000D20  6F08               	movwf	___awdiv@divisor& (0+255),b
  7694  000D22  0E00               	movlw	0
  7695  000D24  0101               	movlb	1	; () banked
  7696  000D26  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7697  000D28  0E64               	movlw	100
  7698  000D2A  6F02               	movwf	___awmod@divisor& (0+255),b
  7699  000D2C  0101               	movlb	1	; () banked
  7700  000D2E  5129               	movf	scale@scl& (0+255),w,b
  7701  000D30  0101               	movlb	1	; () banked
  7702  000D32  6F00               	movwf	___awmod@dividend& (0+255),b
  7703  000D34  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7704  000D36  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7705  000D38  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7706  000D3A  ECAD  F02A         	call	___awmod	;wreg free
  7707  000D3E  C100  F106         	movff	?___awmod,___awdiv@dividend
  7708  000D42  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  7709  000D46  ECDE  F027         	call	___awdiv	;wreg free
  7710  000D4A  0E09               	movlw	9
  7711  000D4C  0101               	movlb	1	; () banked
  7712  000D4E  2506               	addwf	?___awdiv& (0+255),w,b
  7713  000D50  0101               	movlb	1	; () banked
  7714  000D52  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7715  000D54  0E00               	movlw	0
  7716  000D56  0101               	movlb	1	; () banked
  7717  000D58  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7718  000D5A  0101               	movlb	1	; () banked
  7719  000D5C  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7720  000D5E  ECEB  F034         	call	___wmul	;wreg free
  7721  000D62  0E63               	movlw	low __npowers_
  7722  000D64  0101               	movlb	1	; () banked
  7723  000D66  250E               	addwf	?___wmul& (0+255),w,b
  7724  000D68  6EF6               	movwf	tblptrl,c
  7725  000D6A  0E7D               	movlw	high __npowers_
  7726  000D6C  0101               	movlb	1	; () banked
  7727  000D6E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7728  000D70  6EF7               	movwf	tblptrh,c
  7729  000D72                     	if	0	;There are less than 3 active tblptr bytes
  7730  000D72                     	endif
  7731  000D72  0009               	tblrd		*+
  7732  000D74  CFF5 F117          	movff	tablat,___ftmul@f2
  7733  000D78  0009               	tblrd		*+
  7734  000D7A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  7735  000D7E  000A               	tblrd		*-
  7736  000D80  CFF5 F119          	movff	tablat,___ftmul@f2+2
  7737  000D84  0E00               	movlw	0
  7738  000D86  0101               	movlb	1	; () banked
  7739  000D88  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7740  000D8A  0E64               	movlw	100
  7741  000D8C  6F08               	movwf	___awdiv@divisor& (0+255),b
  7742  000D8E  0101               	movlb	1	; () banked
  7743  000D90  5129               	movf	scale@scl& (0+255),w,b
  7744  000D92  0101               	movlb	1	; () banked
  7745  000D94  6F06               	movwf	___awdiv@dividend& (0+255),b
  7746  000D96  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  7747  000D98  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  7748  000D9A  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7749  000D9C  ECDE  F027         	call	___awdiv	;wreg free
  7750  000DA0  0E12               	movlw	18
  7751  000DA2  0101               	movlb	1	; () banked
  7752  000DA4  2506               	addwf	?___awdiv& (0+255),w,b
  7753  000DA6  0101               	movlb	1	; () banked
  7754  000DA8  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7755  000DAA  0E00               	movlw	0
  7756  000DAC  0101               	movlb	1	; () banked
  7757  000DAE  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7758  000DB0  0101               	movlb	1	; () banked
  7759  000DB2  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7760  000DB4  0E00               	movlw	0
  7761  000DB6  0101               	movlb	1	; () banked
  7762  000DB8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7763  000DBA  0E03               	movlw	3
  7764  000DBC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7765  000DBE  ECEB  F034         	call	___wmul	;wreg free
  7766  000DC2  0E63               	movlw	low __npowers_
  7767  000DC4  0101               	movlb	1	; () banked
  7768  000DC6  250E               	addwf	?___wmul& (0+255),w,b
  7769  000DC8  6EF6               	movwf	tblptrl,c
  7770  000DCA  0E7D               	movlw	high __npowers_
  7771  000DCC  0101               	movlb	1	; () banked
  7772  000DCE  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7773  000DD0  6EF7               	movwf	tblptrh,c
  7774  000DD2                     	if	0	;There are less than 3 active tblptr bytes
  7775  000DD2                     	endif
  7776  000DD2  0009               	tblrd		*+
  7777  000DD4  CFF5 F114          	movff	tablat,___ftmul@f1
  7778  000DD8  0009               	tblrd		*+
  7779  000DDA  CFF5 F115          	movff	tablat,___ftmul@f1+1
  7780  000DDE  000A               	tblrd		*-
  7781  000DE0  CFF5 F116          	movff	tablat,___ftmul@f1+2
  7782  000DE4  ECCC  F01A         	call	___ftmul	;wreg free
  7783  000DE8  C114  F126         	movff	?___ftmul,_scale$3166
  7784  000DEC  C115  F127         	movff	?___ftmul+1,_scale$3166+1
  7785  000DF0  C116  F128         	movff	?___ftmul+2,_scale$3166+2
  7786                           
  7787                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7788  000DF4  C126  F114         	movff	_scale$3166,___ftmul@f1
  7789  000DF8  C127  F115         	movff	_scale$3166+1,___ftmul@f1+1
  7790  000DFC  C128  F116         	movff	_scale$3166+2,___ftmul@f1+2
  7791  000E00  0E00               	movlw	0
  7792  000E02  0101               	movlb	1	; () banked
  7793  000E04  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7794  000E06  0E03               	movlw	3
  7795  000E08  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7796  000E0A  0E00               	movlw	0
  7797  000E0C  0101               	movlb	1	; () banked
  7798  000E0E  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7799  000E10  0E0A               	movlw	10
  7800  000E12  6F02               	movwf	___awmod@divisor& (0+255),b
  7801  000E14  0101               	movlb	1	; () banked
  7802  000E16  5129               	movf	scale@scl& (0+255),w,b
  7803  000E18  0101               	movlb	1	; () banked
  7804  000E1A  6F00               	movwf	___awmod@dividend& (0+255),b
  7805  000E1C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7806  000E1E  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7807  000E20  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7808  000E22  ECAD  F02A         	call	___awmod	;wreg free
  7809  000E26  C100  F10E         	movff	?___awmod,___wmul@multiplier
  7810  000E2A  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  7811  000E2E  ECEB  F034         	call	___wmul	;wreg free
  7812  000E32  0E63               	movlw	low __npowers_
  7813  000E34  0101               	movlb	1	; () banked
  7814  000E36  250E               	addwf	?___wmul& (0+255),w,b
  7815  000E38  6EF6               	movwf	tblptrl,c
  7816  000E3A  0E7D               	movlw	high __npowers_
  7817  000E3C  0101               	movlb	1	; () banked
  7818  000E3E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7819  000E40  6EF7               	movwf	tblptrh,c
  7820  000E42                     	if	0	;There are less than 3 active tblptr bytes
  7821  000E42                     	endif
  7822  000E42  0009               	tblrd		*+
  7823  000E44  CFF5 F117          	movff	tablat,___ftmul@f2
  7824  000E48  0009               	tblrd		*+
  7825  000E4A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  7826  000E4E  000A               	tblrd		*-
  7827  000E50  CFF5 F119          	movff	tablat,___ftmul@f2+2
  7828  000E54  ECCC  F01A         	call	___ftmul	;wreg free
  7829  000E58  C114  F123         	movff	?___ftmul,?_scale
  7830  000E5C  C115  F124         	movff	?___ftmul+1,?_scale+1
  7831  000E60  C116  F125         	movff	?___ftmul+2,?_scale+2
  7832  000E64  0012               	return	
  7833  000E66                     l9549:
  7834                           
  7835                           ;doprnt.c: 432: else if(scl > 10)
  7836  000E66  0101               	movlb	1	; () banked
  7837  000E68  5129               	movf	scale@scl& (0+255),w,b
  7838  000E6A  0A80               	xorlw	128
  7839  000E6C  0F75               	addlw	-139
  7840  000E6E  A0D8               	btfss	status,0,c
  7841  000E70  D05D               	goto	l9555
  7842                           
  7843                           ; BSR set to: 1
  7844                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7845  000E72  0E00               	movlw	0
  7846  000E74  0101               	movlb	1	; () banked
  7847  000E76  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7848  000E78  0E0A               	movlw	10
  7849  000E7A  6F08               	movwf	___awdiv@divisor& (0+255),b
  7850  000E7C  0101               	movlb	1	; () banked
  7851  000E7E  5129               	movf	scale@scl& (0+255),w,b
  7852  000E80  0101               	movlb	1	; () banked
  7853  000E82  6F06               	movwf	___awdiv@dividend& (0+255),b
  7854  000E84  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  7855  000E86  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  7856  000E88  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7857  000E8A  ECDE  F027         	call	___awdiv	;wreg free
  7858  000E8E  0E09               	movlw	9
  7859  000E90  0101               	movlb	1	; () banked
  7860  000E92  2506               	addwf	?___awdiv& (0+255),w,b
  7861  000E94  0101               	movlb	1	; () banked
  7862  000E96  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7863  000E98  0E00               	movlw	0
  7864  000E9A  0101               	movlb	1	; () banked
  7865  000E9C  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7866  000E9E  0101               	movlb	1	; () banked
  7867  000EA0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7868  000EA2  0E00               	movlw	0
  7869  000EA4  0101               	movlb	1	; () banked
  7870  000EA6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7871  000EA8  0E03               	movlw	3
  7872  000EAA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7873  000EAC  ECEB  F034         	call	___wmul	;wreg free
  7874  000EB0  0E63               	movlw	low __npowers_
  7875  000EB2  0101               	movlb	1	; () banked
  7876  000EB4  250E               	addwf	?___wmul& (0+255),w,b
  7877  000EB6  6EF6               	movwf	tblptrl,c
  7878  000EB8  0E7D               	movlw	high __npowers_
  7879  000EBA  0101               	movlb	1	; () banked
  7880  000EBC  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7881  000EBE  6EF7               	movwf	tblptrh,c
  7882  000EC0                     	if	0	;There are less than 3 active tblptr bytes
  7883  000EC0                     	endif
  7884  000EC0  0009               	tblrd		*+
  7885  000EC2  CFF5 F114          	movff	tablat,___ftmul@f1
  7886  000EC6  0009               	tblrd		*+
  7887  000EC8  CFF5 F115          	movff	tablat,___ftmul@f1+1
  7888  000ECC  000A               	tblrd		*-
  7889  000ECE  CFF5 F116          	movff	tablat,___ftmul@f1+2
  7890  000ED2  0E00               	movlw	0
  7891  000ED4  0101               	movlb	1	; () banked
  7892  000ED6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7893  000ED8  0E03               	movlw	3
  7894  000EDA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7895  000EDC  0E00               	movlw	0
  7896  000EDE  0101               	movlb	1	; () banked
  7897  000EE0  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7898  000EE2  0E0A               	movlw	10
  7899  000EE4  6F02               	movwf	___awmod@divisor& (0+255),b
  7900  000EE6  0101               	movlb	1	; () banked
  7901  000EE8  5129               	movf	scale@scl& (0+255),w,b
  7902  000EEA  0101               	movlb	1	; () banked
  7903  000EEC  6F00               	movwf	___awmod@dividend& (0+255),b
  7904  000EEE  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7905  000EF0  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7906  000EF2  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7907  000EF4  ECAD  F02A         	call	___awmod	;wreg free
  7908  000EF8  C100  F10E         	movff	?___awmod,___wmul@multiplier
  7909  000EFC  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  7910  000F00  ECEB  F034         	call	___wmul	;wreg free
  7911  000F04  0E63               	movlw	low __npowers_
  7912  000F06  0101               	movlb	1	; () banked
  7913  000F08  250E               	addwf	?___wmul& (0+255),w,b
  7914  000F0A  6EF6               	movwf	tblptrl,c
  7915  000F0C  0E7D               	movlw	high __npowers_
  7916  000F0E  0101               	movlb	1	; () banked
  7917  000F10  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7918  000F12  6EF7               	movwf	tblptrh,c
  7919  000F14                     	if	0	;There are less than 3 active tblptr bytes
  7920  000F14                     	endif
  7921  000F14  0009               	tblrd		*+
  7922  000F16  CFF5 F117          	movff	tablat,___ftmul@f2
  7923  000F1A  0009               	tblrd		*+
  7924  000F1C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  7925  000F20  000A               	tblrd		*-
  7926  000F22  CFF5 F119          	movff	tablat,___ftmul@f2+2
  7927  000F26  ECCC  F01A         	call	___ftmul	;wreg free
  7928  000F2A  D796               	goto	L2
  7929  000F2C                     l9555:
  7930                           
  7931                           ;doprnt.c: 434: return _npowers_[scl];
  7932  000F2C  0101               	movlb	1	; () banked
  7933  000F2E  5129               	movf	scale@scl& (0+255),w,b
  7934  000F30  0D03               	mullw	3
  7935  000F32  0E63               	movlw	low __npowers_
  7936  000F34  24F3               	addwf	prodl,w,c
  7937  000F36  6EF6               	movwf	tblptrl,c
  7938  000F38  0E7D               	movlw	high __npowers_
  7939  000F3A  20F4               	addwfc	prodh,w,c
  7940  000F3C  6EF7               	movwf	tblptrh,c
  7941  000F3E                     	if	0	;There are less than 3 active tblptr bytes
  7942  000F3E                     	endif
  7943  000F3E  0009               	tblrd		*+
  7944  000F40  CFF5 F123          	movff	tablat,?_scale
  7945  000F44  0009               	tblrd		*+
  7946  000F46  CFF5 F124          	movff	tablat,?_scale+1
  7947  000F4A  000A               	tblrd		*-
  7948  000F4C  CFF5 F125          	movff	tablat,?_scale+2
  7949                           
  7950                           ; BSR set to: 1
  7951  000F50  0012               	return	
  7952  000F52                     l9559:
  7953                           
  7954                           ; BSR set to: 1
  7955                           ;doprnt.c: 435: }
  7956                           ;doprnt.c: 436: if(scl>=110)
  7957  000F52  0101               	movlb	1	; () banked
  7958  000F54  5129               	movf	scale@scl& (0+255),w,b
  7959  000F56  0A80               	xorlw	128
  7960  000F58  0F12               	addlw	-238
  7961  000F5A  A0D8               	btfss	status,0,c
  7962  000F5C  D0AC               	goto	l9567
  7963                           
  7964                           ; BSR set to: 1
  7965                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7966  000F5E  0E00               	movlw	0
  7967  000F60  0101               	movlb	1	; () banked
  7968  000F62  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7969  000F64  0E03               	movlw	3
  7970  000F66  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7971  000F68  0E00               	movlw	0
  7972  000F6A  0101               	movlb	1	; () banked
  7973  000F6C  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7974  000F6E  0E0A               	movlw	10
  7975  000F70  6F08               	movwf	___awdiv@divisor& (0+255),b
  7976  000F72  0E00               	movlw	0
  7977  000F74  0101               	movlb	1	; () banked
  7978  000F76  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7979  000F78  0E64               	movlw	100
  7980  000F7A  6F02               	movwf	___awmod@divisor& (0+255),b
  7981  000F7C  0101               	movlb	1	; () banked
  7982  000F7E  5129               	movf	scale@scl& (0+255),w,b
  7983  000F80  0101               	movlb	1	; () banked
  7984  000F82  6F00               	movwf	___awmod@dividend& (0+255),b
  7985  000F84  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7986  000F86  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7987  000F88  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7988  000F8A  ECAD  F02A         	call	___awmod	;wreg free
  7989  000F8E  C100  F106         	movff	?___awmod,___awdiv@dividend
  7990  000F92  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  7991  000F96  ECDE  F027         	call	___awdiv	;wreg free
  7992  000F9A  0E09               	movlw	9
  7993  000F9C  0101               	movlb	1	; () banked
  7994  000F9E  2506               	addwf	?___awdiv& (0+255),w,b
  7995  000FA0  0101               	movlb	1	; () banked
  7996  000FA2  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7997  000FA4  0E00               	movlw	0
  7998  000FA6  0101               	movlb	1	; () banked
  7999  000FA8  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8000  000FAA  0101               	movlb	1	; () banked
  8001  000FAC  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8002  000FAE  ECEB  F034         	call	___wmul	;wreg free
  8003  000FB2  0E8A               	movlw	low __powers_
  8004  000FB4  0101               	movlb	1	; () banked
  8005  000FB6  250E               	addwf	?___wmul& (0+255),w,b
  8006  000FB8  6EF6               	movwf	tblptrl,c
  8007  000FBA  0E7D               	movlw	high __powers_
  8008  000FBC  0101               	movlb	1	; () banked
  8009  000FBE  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8010  000FC0  6EF7               	movwf	tblptrh,c
  8011  000FC2                     	if	0	;There are less than 3 active tblptr bytes
  8012  000FC2                     	endif
  8013  000FC2  0009               	tblrd		*+
  8014  000FC4  CFF5 F117          	movff	tablat,___ftmul@f2
  8015  000FC8  0009               	tblrd		*+
  8016  000FCA  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8017  000FCE  000A               	tblrd		*-
  8018  000FD0  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8019  000FD4  0E00               	movlw	0
  8020  000FD6  0101               	movlb	1	; () banked
  8021  000FD8  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8022  000FDA  0E64               	movlw	100
  8023  000FDC  6F08               	movwf	___awdiv@divisor& (0+255),b
  8024  000FDE  0101               	movlb	1	; () banked
  8025  000FE0  5129               	movf	scale@scl& (0+255),w,b
  8026  000FE2  0101               	movlb	1	; () banked
  8027  000FE4  6F06               	movwf	___awdiv@dividend& (0+255),b
  8028  000FE6  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  8029  000FE8  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  8030  000FEA  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8031  000FEC  ECDE  F027         	call	___awdiv	;wreg free
  8032  000FF0  0E12               	movlw	18
  8033  000FF2  0101               	movlb	1	; () banked
  8034  000FF4  2506               	addwf	?___awdiv& (0+255),w,b
  8035  000FF6  0101               	movlb	1	; () banked
  8036  000FF8  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8037  000FFA  0E00               	movlw	0
  8038  000FFC  0101               	movlb	1	; () banked
  8039  000FFE  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8040  001000  0101               	movlb	1	; () banked
  8041  001002  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8042  001004  0E00               	movlw	0
  8043  001006  0101               	movlb	1	; () banked
  8044  001008  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8045  00100A  0E03               	movlw	3
  8046  00100C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8047  00100E  ECEB  F034         	call	___wmul	;wreg free
  8048  001012  0E8A               	movlw	low __powers_
  8049  001014  0101               	movlb	1	; () banked
  8050  001016  250E               	addwf	?___wmul& (0+255),w,b
  8051  001018  6EF6               	movwf	tblptrl,c
  8052  00101A  0E7D               	movlw	high __powers_
  8053  00101C  0101               	movlb	1	; () banked
  8054  00101E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8055  001020  6EF7               	movwf	tblptrh,c
  8056  001022                     	if	0	;There are less than 3 active tblptr bytes
  8057  001022                     	endif
  8058  001022  0009               	tblrd		*+
  8059  001024  CFF5 F114          	movff	tablat,___ftmul@f1
  8060  001028  0009               	tblrd		*+
  8061  00102A  CFF5 F115          	movff	tablat,___ftmul@f1+1
  8062  00102E  000A               	tblrd		*-
  8063  001030  CFF5 F116          	movff	tablat,___ftmul@f1+2
  8064  001034  ECCC  F01A         	call	___ftmul	;wreg free
  8065  001038  C114  F126         	movff	?___ftmul,_scale$3166
  8066  00103C  C115  F127         	movff	?___ftmul+1,_scale$3166+1
  8067  001040  C116  F128         	movff	?___ftmul+2,_scale$3166+2
  8068                           
  8069                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8070  001044  C126  F114         	movff	_scale$3166,___ftmul@f1
  8071  001048  C127  F115         	movff	_scale$3166+1,___ftmul@f1+1
  8072  00104C  C128  F116         	movff	_scale$3166+2,___ftmul@f1+2
  8073  001050  0E00               	movlw	0
  8074  001052  0101               	movlb	1	; () banked
  8075  001054  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8076  001056  0E03               	movlw	3
  8077  001058  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8078  00105A  0E00               	movlw	0
  8079  00105C  0101               	movlb	1	; () banked
  8080  00105E  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8081  001060  0E0A               	movlw	10
  8082  001062  6F02               	movwf	___awmod@divisor& (0+255),b
  8083  001064  0101               	movlb	1	; () banked
  8084  001066  5129               	movf	scale@scl& (0+255),w,b
  8085  001068  0101               	movlb	1	; () banked
  8086  00106A  6F00               	movwf	___awmod@dividend& (0+255),b
  8087  00106C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8088  00106E  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8089  001070  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8090  001072  ECAD  F02A         	call	___awmod	;wreg free
  8091  001076  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8092  00107A  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8093  00107E  ECEB  F034         	call	___wmul	;wreg free
  8094  001082  0E8A               	movlw	low __powers_
  8095  001084  0101               	movlb	1	; () banked
  8096  001086  250E               	addwf	?___wmul& (0+255),w,b
  8097  001088  6EF6               	movwf	tblptrl,c
  8098  00108A  0E7D               	movlw	high __powers_
  8099  00108C  0101               	movlb	1	; () banked
  8100  00108E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8101  001090  6EF7               	movwf	tblptrh,c
  8102  001092                     	if	0	;There are less than 3 active tblptr bytes
  8103  001092                     	endif
  8104  001092  0009               	tblrd		*+
  8105  001094  CFF5 F117          	movff	tablat,___ftmul@f2
  8106  001098  0009               	tblrd		*+
  8107  00109A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8108  00109E  000A               	tblrd		*-
  8109  0010A0  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8110  0010A4  ECCC  F01A         	call	___ftmul	;wreg free
  8111  0010A8  C114  F123         	movff	?___ftmul,?_scale
  8112  0010AC  C115  F124         	movff	?___ftmul+1,?_scale+1
  8113  0010B0  C116  F125         	movff	?___ftmul+2,?_scale+2
  8114  0010B4  0012               	return	
  8115  0010B6                     l9567:
  8116                           
  8117                           ;doprnt.c: 438: else if(scl > 10)
  8118  0010B6  0101               	movlb	1	; () banked
  8119  0010B8  5129               	movf	scale@scl& (0+255),w,b
  8120  0010BA  0A80               	xorlw	128
  8121  0010BC  0F75               	addlw	-139
  8122  0010BE  A0D8               	btfss	status,0,c
  8123  0010C0  D05D               	goto	l9573
  8124                           
  8125                           ; BSR set to: 1
  8126                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8127  0010C2  0E00               	movlw	0
  8128  0010C4  0101               	movlb	1	; () banked
  8129  0010C6  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8130  0010C8  0E0A               	movlw	10
  8131  0010CA  6F08               	movwf	___awdiv@divisor& (0+255),b
  8132  0010CC  0101               	movlb	1	; () banked
  8133  0010CE  5129               	movf	scale@scl& (0+255),w,b
  8134  0010D0  0101               	movlb	1	; () banked
  8135  0010D2  6F06               	movwf	___awdiv@dividend& (0+255),b
  8136  0010D4  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  8137  0010D6  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  8138  0010D8  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8139  0010DA  ECDE  F027         	call	___awdiv	;wreg free
  8140  0010DE  0E09               	movlw	9
  8141  0010E0  0101               	movlb	1	; () banked
  8142  0010E2  2506               	addwf	?___awdiv& (0+255),w,b
  8143  0010E4  0101               	movlb	1	; () banked
  8144  0010E6  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8145  0010E8  0E00               	movlw	0
  8146  0010EA  0101               	movlb	1	; () banked
  8147  0010EC  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8148  0010EE  0101               	movlb	1	; () banked
  8149  0010F0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8150  0010F2  0E00               	movlw	0
  8151  0010F4  0101               	movlb	1	; () banked
  8152  0010F6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8153  0010F8  0E03               	movlw	3
  8154  0010FA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8155  0010FC  ECEB  F034         	call	___wmul	;wreg free
  8156  001100  0E8A               	movlw	low __powers_
  8157  001102  0101               	movlb	1	; () banked
  8158  001104  250E               	addwf	?___wmul& (0+255),w,b
  8159  001106  6EF6               	movwf	tblptrl,c
  8160  001108  0E7D               	movlw	high __powers_
  8161  00110A  0101               	movlb	1	; () banked
  8162  00110C  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8163  00110E  6EF7               	movwf	tblptrh,c
  8164  001110                     	if	0	;There are less than 3 active tblptr bytes
  8165  001110                     	endif
  8166  001110  0009               	tblrd		*+
  8167  001112  CFF5 F114          	movff	tablat,___ftmul@f1
  8168  001116  0009               	tblrd		*+
  8169  001118  CFF5 F115          	movff	tablat,___ftmul@f1+1
  8170  00111C  000A               	tblrd		*-
  8171  00111E  CFF5 F116          	movff	tablat,___ftmul@f1+2
  8172  001122  0E00               	movlw	0
  8173  001124  0101               	movlb	1	; () banked
  8174  001126  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8175  001128  0E03               	movlw	3
  8176  00112A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8177  00112C  0E00               	movlw	0
  8178  00112E  0101               	movlb	1	; () banked
  8179  001130  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8180  001132  0E0A               	movlw	10
  8181  001134  6F02               	movwf	___awmod@divisor& (0+255),b
  8182  001136  0101               	movlb	1	; () banked
  8183  001138  5129               	movf	scale@scl& (0+255),w,b
  8184  00113A  0101               	movlb	1	; () banked
  8185  00113C  6F00               	movwf	___awmod@dividend& (0+255),b
  8186  00113E  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8187  001140  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8188  001142  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8189  001144  ECAD  F02A         	call	___awmod	;wreg free
  8190  001148  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8191  00114C  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8192  001150  ECEB  F034         	call	___wmul	;wreg free
  8193  001154  0E8A               	movlw	low __powers_
  8194  001156  0101               	movlb	1	; () banked
  8195  001158  250E               	addwf	?___wmul& (0+255),w,b
  8196  00115A  6EF6               	movwf	tblptrl,c
  8197  00115C  0E7D               	movlw	high __powers_
  8198  00115E  0101               	movlb	1	; () banked
  8199  001160  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8200  001162  6EF7               	movwf	tblptrh,c
  8201  001164                     	if	0	;There are less than 3 active tblptr bytes
  8202  001164                     	endif
  8203  001164  0009               	tblrd		*+
  8204  001166  CFF5 F117          	movff	tablat,___ftmul@f2
  8205  00116A  0009               	tblrd		*+
  8206  00116C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8207  001170  000A               	tblrd		*-
  8208  001172  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8209  001176  ECCC  F01A         	call	___ftmul	;wreg free
  8210  00117A  D796               	goto	L3
  8211  00117C                     l9573:
  8212                           
  8213                           ;doprnt.c: 440: return _powers_[scl];
  8214  00117C  0101               	movlb	1	; () banked
  8215  00117E  5129               	movf	scale@scl& (0+255),w,b
  8216  001180  0D03               	mullw	3
  8217  001182  0E8A               	movlw	low __powers_
  8218  001184  24F3               	addwf	prodl,w,c
  8219  001186  6EF6               	movwf	tblptrl,c
  8220  001188  0E7D               	movlw	high __powers_
  8221  00118A  20F4               	addwfc	prodh,w,c
  8222  00118C  6EF7               	movwf	tblptrh,c
  8223  00118E                     	if	0	;There are less than 3 active tblptr bytes
  8224  00118E                     	endif
  8225  00118E  0009               	tblrd		*+
  8226  001190  CFF5 F123          	movff	tablat,?_scale
  8227  001194  0009               	tblrd		*+
  8228  001196  CFF5 F124          	movff	tablat,?_scale+1
  8229  00119A  000A               	tblrd		*-
  8230  00119C  CFF5 F125          	movff	tablat,?_scale+2
  8231  0011A0  0012               	return	
  8232  0011A2                     __end_of_scale:
  8233                           	opt stack 0
  8234                           tblptru	equ	0xFF8
  8235                           tblptrh	equ	0xFF7
  8236                           tblptrl	equ	0xFF6
  8237                           tablat	equ	0xFF5
  8238                           prodh	equ	0xFF4
  8239                           prodl	equ	0xFF3
  8240                           intcon	equ	0xFF2
  8241                           postinc0	equ	0xFEE
  8242                           wreg	equ	0xFE8
  8243                           postdec1	equ	0xFE5
  8244                           fsr1l	equ	0xFE1
  8245                           indf2	equ	0xFDF
  8246                           postinc2	equ	0xFDE
  8247                           postdec2	equ	0xFDD
  8248                           fsr2h	equ	0xFDA
  8249                           fsr2l	equ	0xFD9
  8250                           status	equ	0xFD8
  8251                           
  8252 ;; *************** function _putch *****************
  8253 ;; Defined at:
  8254 ;;		line 59 in file "source/IOConfig.h"
  8255 ;; Parameters:    Size  Location     Type
  8256 ;;  val             1    wreg     unsigned char 
  8257 ;; Auto vars:     Size  Location     Type
  8258 ;;  val             1   13[BANK1 ] unsigned char 
  8259 ;; Return value:  Size  Location     Type
  8260 ;;                  1    wreg      void 
  8261 ;; Registers used:
  8262 ;;		wreg, status,2, status,0, cstack
  8263 ;; Tracked objects:
  8264 ;;		On entry : 0/0
  8265 ;;		On exit  : 0/0
  8266 ;;		Unchanged: 0/0
  8267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8268 ;;      Params:         0       0       0       0       0       0       0
  8269 ;;      Locals:         0       0       1       0       0       0       0
  8270 ;;      Temps:          0       0       0       0       0       0       0
  8271 ;;      Totals:         0       0       1       0       0       0       0
  8272 ;;Total ram usage:        1 bytes
  8273 ;; Hardware stack levels used:    1
  8274 ;; Hardware stack levels required when called:   17
  8275 ;; This function calls:
  8276 ;;		_lcd_putc
  8277 ;; This function is called by:
  8278 ;;		_printf
  8279 ;;		_send_float
  8280 ;;		_send_int32
  8281 ;;		_send_int16
  8282 ;;		_send_float_vt
  8283 ;;		_send_int32_vt
  8284 ;;		_send_int16_vt
  8285 ;; This function uses a non-reentrant model
  8286 ;;
  8287                           
  8288                           	psect	text24
  8289  006D10                     __ptext24:
  8290                           	opt stack 0
  8291  006D10                     _putch:
  8292                           	opt stack 10
  8293                           
  8294                           ;incstack = 0
  8295                           ;putch@val stored from wreg
  8296  006D10  0101               	movlb	1	; () banked
  8297  006D12  6F0D               	movwf	putch@val& (0+255),b
  8298                           
  8299                           ;IOConfig.h: 60: lcd_putc(val);
  8300  006D14  0101               	movlb	1	; () banked
  8301  006D16  510D               	movf	putch@val& (0+255),w,b
  8302  006D18  ECD9  F02F         	call	_lcd_putc
  8303  006D1C  0012               	return		;funcret
  8304  006D1E                     __end_of_putch:
  8305                           	opt stack 0
  8306                           tblptru	equ	0xFF8
  8307                           tblptrh	equ	0xFF7
  8308                           tblptrl	equ	0xFF6
  8309                           tablat	equ	0xFF5
  8310                           prodh	equ	0xFF4
  8311                           prodl	equ	0xFF3
  8312                           intcon	equ	0xFF2
  8313                           postinc0	equ	0xFEE
  8314                           wreg	equ	0xFE8
  8315                           postdec1	equ	0xFE5
  8316                           fsr1l	equ	0xFE1
  8317                           indf2	equ	0xFDF
  8318                           postinc2	equ	0xFDE
  8319                           postdec2	equ	0xFDD
  8320                           fsr2h	equ	0xFDA
  8321                           fsr2l	equ	0xFD9
  8322                           status	equ	0xFD8
  8323                           
  8324 ;; *************** function _lcd_putc *****************
  8325 ;; Defined at:
  8326 ;;		line 212 in file "source/../../vclib_lcd.h"
  8327 ;; Parameters:    Size  Location     Type
  8328 ;;  cha             1    wreg     unsigned char 
  8329 ;; Auto vars:     Size  Location     Type
  8330 ;;  cha             1   12[BANK1 ] unsigned char 
  8331 ;; Return value:  Size  Location     Type
  8332 ;;                  1    wreg      void 
  8333 ;; Registers used:
  8334 ;;		wreg, status,2, status,0, cstack
  8335 ;; Tracked objects:
  8336 ;;		On entry : 0/0
  8337 ;;		On exit  : 0/0
  8338 ;;		Unchanged: 0/0
  8339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8340 ;;      Params:         0       0       0       0       0       0       0
  8341 ;;      Locals:         0       0       1       0       0       0       0
  8342 ;;      Temps:          0       0       1       0       0       0       0
  8343 ;;      Totals:         0       0       2       0       0       0       0
  8344 ;;Total ram usage:        2 bytes
  8345 ;; Hardware stack levels used:    1
  8346 ;; Hardware stack levels required when called:   16
  8347 ;; This function calls:
  8348 ;;		_lcd_gotoxy
  8349 ;;		_lcd_send_byte
  8350 ;; This function is called by:
  8351 ;;		_putch
  8352 ;;		_drawMenu
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           	psect	text25
  8357  005FB2                     __ptext25:
  8358                           	opt stack 0
  8359  005FB2                     _lcd_putc:
  8360                           	opt stack 10
  8361                           
  8362                           ;incstack = 0
  8363                           ;lcd_putc@cha stored from wreg
  8364  005FB2  0101               	movlb	1	; () banked
  8365  005FB4  6F0C               	movwf	lcd_putc@cha& (0+255),b
  8366                           
  8367                           ;vclib_lcd.h: 213: switch (cha) {
  8368  005FB6  D02B               	goto	l9247
  8369  005FB8                     l9233:
  8370  005FB8  0E01               	movlw	1
  8371  005FBA  0101               	movlb	1	; () banked
  8372  005FBC  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  8373  005FBE  0E01               	movlw	1
  8374  005FC0  EC51  F035         	call	_lcd_gotoxy
  8375                           
  8376                           ;vclib_lcd.h: 215: break;
  8377  005FC4  0012               	return	
  8378  005FC6                     l9235:
  8379  005FC6  0E01               	movlw	1
  8380  005FC8  0101               	movlb	1	; () banked
  8381  005FCA  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8382  005FCC  0E00               	movlw	0
  8383  005FCE  EC18  F034         	call	_lcd_send_byte
  8384                           
  8385                           ;vclib_lcd.h: 218: _delay((unsigned long)((2)*(16000000/4000.0)));
  8386  005FD2  0E0B               	movlw	11
  8387  005FD4  0101               	movlb	1	; () banked
  8388  005FD6  6F0B               	movwf	??_lcd_putc& (0+255),b
  8389  005FD8  0E62               	movlw	98
  8390  005FDA                     u17137:
  8391  005FDA  2EE8               	decfsz	wreg,f,c
  8392  005FDC  D7FE               	goto	u17137
  8393  005FDE  2F0B               	decfsz	??_lcd_putc& (0+255),f,b
  8394  005FE0  D7FC               	goto	u17137
  8395  005FE2  D000               	nop2	
  8396                           
  8397                           ;vclib_lcd.h: 223: break;
  8398  005FE4  0012               	return	
  8399  005FE6                     l9239:
  8400  005FE6  0E02               	movlw	2
  8401  005FE8  0101               	movlb	1	; () banked
  8402  005FEA  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  8403  005FEC  0E01               	movlw	1
  8404  005FEE  EC51  F035         	call	_lcd_gotoxy
  8405                           
  8406                           ;vclib_lcd.h: 236: break;
  8407  005FF2  0012               	return	
  8408  005FF4                     l9241:
  8409  005FF4  0E10               	movlw	16
  8410  005FF6  0101               	movlb	1	; () banked
  8411  005FF8  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8412  005FFA  0E00               	movlw	0
  8413  005FFC  EC18  F034         	call	_lcd_send_byte
  8414                           
  8415                           ;vclib_lcd.h: 240: break;
  8416  006000  0012               	return	
  8417  006002                     l9243:
  8418  006002  C10C  F105         	movff	lcd_putc@cha,lcd_send_byte@n
  8419  006006  0E01               	movlw	1
  8420  006008  EC18  F034         	call	_lcd_send_byte
  8421                           
  8422                           ;vclib_lcd.h: 253: }
  8423                           
  8424                           ;vclib_lcd.h: 251: break;
  8425  00600C  0012               	return	
  8426  00600E                     l9247:
  8427  00600E  0101               	movlb	1	; () banked
  8428  006010  510C               	movf	lcd_putc@cha& (0+255),w,b
  8429                           
  8430                           ; Switch size 1, requested type "space"
  8431                           ; Number of cases is 4, Range of values is 7 to 12
  8432                           ; switch strategies available:
  8433                           ; Name         Instructions Cycles
  8434                           ; simple_byte           13     7 (average)
  8435                           ;	Chosen strategy is simple_byte
  8436  006012  0A07               	xorlw	7	; case 7
  8437  006014  B4D8               	btfsc	status,2,c
  8438  006016  D7D0               	goto	l9233
  8439  006018  0A0F               	xorlw	15	; case 8
  8440  00601A  B4D8               	btfsc	status,2,c
  8441  00601C  D7EB               	goto	l9241
  8442  00601E  0A02               	xorlw	2	; case 10
  8443  006020  B4D8               	btfsc	status,2,c
  8444  006022  D7E1               	goto	l9239
  8445  006024  0A06               	xorlw	6	; case 12
  8446  006026  B4D8               	btfsc	status,2,c
  8447  006028  D7CE               	goto	l9235
  8448  00602A  D7EB               	goto	l9243
  8449  00602C                     __end_of_lcd_putc:
  8450                           	opt stack 0
  8451                           tblptru	equ	0xFF8
  8452                           tblptrh	equ	0xFF7
  8453                           tblptrl	equ	0xFF6
  8454                           tablat	equ	0xFF5
  8455                           prodh	equ	0xFF4
  8456                           prodl	equ	0xFF3
  8457                           intcon	equ	0xFF2
  8458                           postinc0	equ	0xFEE
  8459                           wreg	equ	0xFE8
  8460                           postdec1	equ	0xFE5
  8461                           fsr1l	equ	0xFE1
  8462                           indf2	equ	0xFDF
  8463                           postinc2	equ	0xFDE
  8464                           postdec2	equ	0xFDD
  8465                           fsr2h	equ	0xFDA
  8466                           fsr2l	equ	0xFD9
  8467                           status	equ	0xFD8
  8468                           
  8469 ;; *************** function _lcd_gotoxy *****************
  8470 ;; Defined at:
  8471 ;;		line 198 in file "source/../../vclib_lcd.h"
  8472 ;; Parameters:    Size  Location     Type
  8473 ;;  pos             1    wreg     unsigned char 
  8474 ;;  fila            1    8[BANK1 ] unsigned char 
  8475 ;; Auto vars:     Size  Location     Type
  8476 ;;  pos             1    9[BANK1 ] unsigned char 
  8477 ;;  address         1   10[BANK1 ] unsigned char 
  8478 ;; Return value:  Size  Location     Type
  8479 ;;                  1    wreg      void 
  8480 ;; Registers used:
  8481 ;;		wreg, status,2, status,0, cstack
  8482 ;; Tracked objects:
  8483 ;;		On entry : 0/0
  8484 ;;		On exit  : 0/0
  8485 ;;		Unchanged: 0/0
  8486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8487 ;;      Params:         0       0       1       0       0       0       0
  8488 ;;      Locals:         0       0       2       0       0       0       0
  8489 ;;      Temps:          0       0       0       0       0       0       0
  8490 ;;      Totals:         0       0       3       0       0       0       0
  8491 ;;Total ram usage:        3 bytes
  8492 ;; Hardware stack levels used:    1
  8493 ;; Hardware stack levels required when called:   15
  8494 ;; This function calls:
  8495 ;;		_lcd_send_byte
  8496 ;; This function is called by:
  8497 ;;		_lcd_putc
  8498 ;;		_drawValEditor
  8499 ;;		_drawMenu
  8500 ;;		_drawChanVal
  8501 ;;		_drawPass1Lin
  8502 ;;		_drawAdvON
  8503 ;;		_drawSNquest
  8504 ;;		_drawAutoCalibRM
  8505 ;;		_drawCutError
  8506 ;;		_drawCalibProc
  8507 ;;		_lcd_getc
  8508 ;; This function uses a non-reentrant model
  8509 ;;
  8510                           
  8511                           	psect	text26
  8512  006AA2                     __ptext26:
  8513                           	opt stack 0
  8514  006AA2                     _lcd_gotoxy:
  8515                           	opt stack 10
  8516                           
  8517                           ;incstack = 0
  8518                           ;lcd_gotoxy@pos stored from wreg
  8519  006AA2  0101               	movlb	1	; () banked
  8520  006AA4  6F09               	movwf	lcd_gotoxy@pos& (0+255),b
  8521                           
  8522                           ;vclib_lcd.h: 199: unsigned char address;
  8523                           ;vclib_lcd.h: 200: if (fila != 1)
  8524  006AA6  0101               	movlb	1	; () banked
  8525  006AA8  0508               	decf	lcd_gotoxy@fila& (0+255),w,b
  8526  006AAA  B4D8               	btfsc	status,2,c
  8527  006AAC  D002               	goto	l9189
  8528                           
  8529                           ; BSR set to: 1
  8530                           ;vclib_lcd.h: 201: address = 0x40;
  8531  006AAE  0E40               	movlw	64
  8532  006AB0  D001               	goto	L4
  8533  006AB2                     l9189:
  8534                           
  8535                           ; BSR set to: 1
  8536                           ;vclib_lcd.h: 202: else
  8537                           ;vclib_lcd.h: 203: address = 0;
  8538  006AB2  0E00               	movlw	0
  8539  006AB4                     L4:
  8540  006AB4  0101               	movlb	1	; () banked
  8541  006AB6  6F0A               	movwf	lcd_gotoxy@address& (0+255),b
  8542                           
  8543                           ; BSR set to: 1
  8544                           ;vclib_lcd.h: 204: address += pos - 1;
  8545                           
  8546                           ; BSR set to: 1
  8547  006AB8  0101               	movlb	1	; () banked
  8548  006ABA  0509               	decf	lcd_gotoxy@pos& (0+255),w,b
  8549  006ABC  0101               	movlb	1	; () banked
  8550  006ABE  270A               	addwf	lcd_gotoxy@address& (0+255),f,b
  8551                           
  8552                           ; BSR set to: 1
  8553                           ;vclib_lcd.h: 205: lcd_send_byte(0, 0b10000000 | address);
  8554  006AC0  0101               	movlb	1	; () banked
  8555  006AC2  510A               	movf	lcd_gotoxy@address& (0+255),w,b
  8556  006AC4  0980               	iorlw	128
  8557  006AC6  0101               	movlb	1	; () banked
  8558  006AC8  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8559  006ACA  0E00               	movlw	0
  8560  006ACC  EC18  F034         	call	_lcd_send_byte
  8561  006AD0  0012               	return		;funcret
  8562  006AD2                     __end_of_lcd_gotoxy:
  8563                           	opt stack 0
  8564                           tblptru	equ	0xFF8
  8565                           tblptrh	equ	0xFF7
  8566                           tblptrl	equ	0xFF6
  8567                           tablat	equ	0xFF5
  8568                           prodh	equ	0xFF4
  8569                           prodl	equ	0xFF3
  8570                           intcon	equ	0xFF2
  8571                           postinc0	equ	0xFEE
  8572                           wreg	equ	0xFE8
  8573                           postdec1	equ	0xFE5
  8574                           fsr1l	equ	0xFE1
  8575                           indf2	equ	0xFDF
  8576                           postinc2	equ	0xFDE
  8577                           postdec2	equ	0xFDD
  8578                           fsr2h	equ	0xFDA
  8579                           fsr2l	equ	0xFD9
  8580                           status	equ	0xFD8
  8581                           
  8582 ;; *************** function _lcd_send_byte *****************
  8583 ;; Defined at:
  8584 ;;		line 163 in file "source/../../vclib_lcd.h"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;  address         1    wreg     unsigned char 
  8587 ;;  n               1    5[BANK1 ] unsigned char 
  8588 ;; Auto vars:     Size  Location     Type
  8589 ;;  address         1    7[BANK1 ] unsigned char 
  8590 ;; Return value:  Size  Location     Type
  8591 ;;                  1    wreg      void 
  8592 ;; Registers used:
  8593 ;;		wreg, status,2, status,0, cstack
  8594 ;; Tracked objects:
  8595 ;;		On entry : 0/0
  8596 ;;		On exit  : 0/0
  8597 ;;		Unchanged: 0/0
  8598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8599 ;;      Params:         0       0       1       0       0       0       0
  8600 ;;      Locals:         0       0       1       0       0       0       0
  8601 ;;      Temps:          0       0       1       0       0       0       0
  8602 ;;      Totals:         0       0       3       0       0       0       0
  8603 ;;Total ram usage:        3 bytes
  8604 ;; Hardware stack levels used:    1
  8605 ;; Hardware stack levels required when called:   14
  8606 ;; This function calls:
  8607 ;;		_lcd_read_byte
  8608 ;;		_lcd_send_4bits
  8609 ;; This function is called by:
  8610 ;;		_lcd_init
  8611 ;;		_lcd_gotoxy
  8612 ;;		_lcd_putc
  8613 ;;		_lcd_set_cgram_char
  8614 ;;		_lcd_cursor_en
  8615 ;;		_lcd_clear
  8616 ;;		_lcd_shift_right
  8617 ;;		_lcd_shift_left
  8618 ;; This function uses a non-reentrant model
  8619 ;;
  8620                           
  8621                           	psect	text27
  8622  006830                     __ptext27:
  8623                           	opt stack 0
  8624  006830                     _lcd_send_byte:
  8625                           	opt stack 15
  8626                           
  8627                           ;incstack = 0
  8628                           ;lcd_send_byte@address stored from wreg
  8629  006830  0101               	movlb	1	; () banked
  8630  006832  6F07               	movwf	lcd_send_byte@address& (0+255),b
  8631                           
  8632                           ;vclib_lcd.h: 164: PORTBbits.RB1 = 0;
  8633  006834  9281               	bcf	3969,1,c	;volatile
  8634  006836                     l9181:
  8635  006836  ECD2  F033         	call	_lcd_read_byte	;wreg free
  8636  00683A  0101               	movlb	1	; () banked
  8637  00683C  6F06               	movwf	??_lcd_send_byte& (0+255),b
  8638  00683E  0101               	movlb	1	; () banked
  8639  006840  BF06               	btfsc	??_lcd_send_byte& (0+255),7,b
  8640  006842  D7F9               	goto	l9181
  8641                           
  8642                           ; BSR set to: 1
  8643                           ;vclib_lcd.h: 166: PORTBbits.RB1 = address;
  8644  006844  0101               	movlb	1	; () banked
  8645  006846  B107               	btfsc	lcd_send_byte@address& (0+255),0,b
  8646  006848  D002               	bra	u13465
  8647  00684A  9281               	bcf	3969,1,c	;volatile
  8648  00684C  D001               	bra	u13466
  8649  00684E                     u13465:
  8650  00684E  8281               	bsf	3969,1,c	;volatile
  8651  006850                     u13466:
  8652                           
  8653                           ;vclib_lcd.h: 167: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8654  006850  D000               	nop2		;2 cycle nop
  8655  006852  D000               	nop2		;2 cycle nop
  8656                           
  8657                           ;vclib_lcd.h: 168: PORTBbits.RB2 = 0;
  8658  006854  9481               	bcf	3969,2,c	;volatile
  8659                           
  8660                           ;vclib_lcd.h: 169: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8661  006856  D000               	nop2		;2 cycle nop
  8662  006858  D000               	nop2		;2 cycle nop
  8663                           
  8664                           ;vclib_lcd.h: 170: PORTBbits.RB3 = 0;
  8665  00685A  9681               	bcf	3969,3,c	;volatile
  8666                           
  8667                           ;vclib_lcd.h: 171: lcd_send_4bits(n >> 4);
  8668  00685C  0101               	movlb	1	; () banked
  8669  00685E  3905               	swapf	lcd_send_byte@n& (0+255),w,b
  8670  006860  0B0F               	andlw	15
  8671  006862  EC3E  F02E         	call	_lcd_send_4bits
  8672                           
  8673                           ;vclib_lcd.h: 172: lcd_send_4bits(n & 0b00001111 );
  8674  006866  0101               	movlb	1	; () banked
  8675  006868  5105               	movf	lcd_send_byte@n& (0+255),w,b
  8676  00686A  0B0F               	andlw	15
  8677  00686C  EC3E  F02E         	call	_lcd_send_4bits
  8678  006870  0012               	return		;funcret
  8679  006872                     __end_of_lcd_send_byte:
  8680                           	opt stack 0
  8681                           tblptru	equ	0xFF8
  8682                           tblptrh	equ	0xFF7
  8683                           tblptrl	equ	0xFF6
  8684                           tablat	equ	0xFF5
  8685                           prodh	equ	0xFF4
  8686                           prodl	equ	0xFF3
  8687                           intcon	equ	0xFF2
  8688                           postinc0	equ	0xFEE
  8689                           wreg	equ	0xFE8
  8690                           postdec1	equ	0xFE5
  8691                           fsr1l	equ	0xFE1
  8692                           indf2	equ	0xFDF
  8693                           postinc2	equ	0xFDE
  8694                           postdec2	equ	0xFDD
  8695                           fsr2h	equ	0xFDA
  8696                           fsr2l	equ	0xFD9
  8697                           status	equ	0xFD8
  8698                           
  8699 ;; *************** function _lcd_send_4bits *****************
  8700 ;; Defined at:
  8701 ;;		line 151 in file "source/../../vclib_lcd.h"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;  n               1    wreg     unsigned char 
  8704 ;; Auto vars:     Size  Location     Type
  8705 ;;  n               1    4[BANK1 ] unsigned char 
  8706 ;; Return value:  Size  Location     Type
  8707 ;;                  1    wreg      void 
  8708 ;; Registers used:
  8709 ;;		wreg, status,2, cstack
  8710 ;; Tracked objects:
  8711 ;;		On entry : 0/0
  8712 ;;		On exit  : 0/0
  8713 ;;		Unchanged: 0/0
  8714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8715 ;;      Params:         0       0       0       0       0       0       0
  8716 ;;      Locals:         0       0       5       0       0       0       0
  8717 ;;      Temps:          0       0       0       0       0       0       0
  8718 ;;      Totals:         0       0       5       0       0       0       0
  8719 ;;Total ram usage:        5 bytes
  8720 ;; Hardware stack levels used:    1
  8721 ;; Hardware stack levels required when called:   12
  8722 ;; This function calls:
  8723 ;;		Nothing
  8724 ;; This function is called by:
  8725 ;;		_lcd_send_byte
  8726 ;;		_lcd_init
  8727 ;; This function uses a non-reentrant model
  8728 ;;
  8729                           
  8730                           	psect	text28
  8731  005C7C                     __ptext28:
  8732                           	opt stack 0
  8733  005C7C                     _lcd_send_4bits:
  8734                           	opt stack 16
  8735                           
  8736                           ;incstack = 0
  8737                           ;lcd_send_4bits@n stored from wreg
  8738  005C7C  0101               	movlb	1	; () banked
  8739  005C7E  6F04               	movwf	lcd_send_4bits@n& (0+255),b
  8740                           
  8741                           ;vclib_lcd.h: 153: PORTBbits.RB4 = 0 || n & 1;
  8742  005C80  0E01               	movlw	1
  8743  005C82  0101               	movlb	1	; () banked
  8744  005C84  6F00               	movwf	_lcd_send_4bits$1834& (0+255),b
  8745                           
  8746                           ; BSR set to: 1
  8747  005C86  0101               	movlb	1	; () banked
  8748  005C88  B104               	btfsc	lcd_send_4bits@n& (0+255),0,b
  8749  005C8A  D003               	goto	l9151
  8750                           
  8751                           ; BSR set to: 1
  8752  005C8C  0E00               	movlw	0
  8753  005C8E  0101               	movlb	1	; () banked
  8754  005C90  6F00               	movwf	_lcd_send_4bits$1834& (0+255),b
  8755  005C92                     l9151:
  8756                           
  8757                           ; BSR set to: 1
  8758  005C92  0101               	movlb	1	; () banked
  8759  005C94  B100               	btfsc	_lcd_send_4bits$1834& (0+255),0,b
  8760  005C96  D002               	bra	u13385
  8761  005C98  9881               	bcf	3969,4,c	;volatile
  8762  005C9A  D001               	bra	u13386
  8763  005C9C                     u13385:
  8764  005C9C  8881               	bsf	3969,4,c	;volatile
  8765  005C9E                     u13386:
  8766                           
  8767                           ;vclib_lcd.h: 154: PORTBbits.RB5 = 0 || n & 2;
  8768  005C9E  0E01               	movlw	1
  8769  005CA0  0101               	movlb	1	; () banked
  8770  005CA2  6F01               	movwf	_lcd_send_4bits$1835& (0+255),b
  8771                           
  8772                           ; BSR set to: 1
  8773  005CA4  0101               	movlb	1	; () banked
  8774  005CA6  B304               	btfsc	lcd_send_4bits@n& (0+255),1,b
  8775  005CA8  D003               	goto	l9157
  8776                           
  8777                           ; BSR set to: 1
  8778  005CAA  0E00               	movlw	0
  8779  005CAC  0101               	movlb	1	; () banked
  8780  005CAE  6F01               	movwf	_lcd_send_4bits$1835& (0+255),b
  8781  005CB0                     l9157:
  8782                           
  8783                           ; BSR set to: 1
  8784  005CB0  0101               	movlb	1	; () banked
  8785  005CB2  B101               	btfsc	_lcd_send_4bits$1835& (0+255),0,b
  8786  005CB4  D002               	bra	u13405
  8787  005CB6  9A81               	bcf	3969,5,c	;volatile
  8788  005CB8  D001               	bra	u13406
  8789  005CBA                     u13405:
  8790  005CBA  8A81               	bsf	3969,5,c	;volatile
  8791  005CBC                     u13406:
  8792                           
  8793                           ;vclib_lcd.h: 155: PORTBbits.RB6 = 0 || n & 4;
  8794  005CBC  0E01               	movlw	1
  8795  005CBE  0101               	movlb	1	; () banked
  8796  005CC0  6F02               	movwf	_lcd_send_4bits$1836& (0+255),b
  8797                           
  8798                           ; BSR set to: 1
  8799  005CC2  0101               	movlb	1	; () banked
  8800  005CC4  B504               	btfsc	lcd_send_4bits@n& (0+255),2,b
  8801  005CC6  D003               	goto	l9163
  8802                           
  8803                           ; BSR set to: 1
  8804  005CC8  0E00               	movlw	0
  8805  005CCA  0101               	movlb	1	; () banked
  8806  005CCC  6F02               	movwf	_lcd_send_4bits$1836& (0+255),b
  8807  005CCE                     l9163:
  8808                           
  8809                           ; BSR set to: 1
  8810  005CCE  0101               	movlb	1	; () banked
  8811  005CD0  B102               	btfsc	_lcd_send_4bits$1836& (0+255),0,b
  8812  005CD2  D002               	bra	u13425
  8813  005CD4  9C81               	bcf	3969,6,c	;volatile
  8814  005CD6  D001               	bra	u13426
  8815  005CD8                     u13425:
  8816  005CD8  8C81               	bsf	3969,6,c	;volatile
  8817  005CDA                     u13426:
  8818                           
  8819                           ;vclib_lcd.h: 156: PORTBbits.RB7 = 0 || n & 8;
  8820  005CDA  0E01               	movlw	1
  8821  005CDC  0101               	movlb	1	; () banked
  8822  005CDE  6F03               	movwf	_lcd_send_4bits$1837& (0+255),b
  8823                           
  8824                           ; BSR set to: 1
  8825  005CE0  0101               	movlb	1	; () banked
  8826  005CE2  B704               	btfsc	lcd_send_4bits@n& (0+255),3,b
  8827  005CE4  D003               	goto	l9169
  8828                           
  8829                           ; BSR set to: 1
  8830  005CE6  0E00               	movlw	0
  8831  005CE8  0101               	movlb	1	; () banked
  8832  005CEA  6F03               	movwf	_lcd_send_4bits$1837& (0+255),b
  8833  005CEC                     l9169:
  8834                           
  8835                           ; BSR set to: 1
  8836  005CEC  0101               	movlb	1	; () banked
  8837  005CEE  B103               	btfsc	_lcd_send_4bits$1837& (0+255),0,b
  8838  005CF0  D002               	bra	u13445
  8839  005CF2  9E81               	bcf	3969,7,c	;volatile
  8840  005CF4  D001               	bra	u13446
  8841  005CF6                     u13445:
  8842  005CF6  8E81               	bsf	3969,7,c	;volatile
  8843  005CF8                     u13446:
  8844                           
  8845                           ;vclib_lcd.h: 157: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8846  005CF8  D000               	nop2		;2 cycle nop
  8847  005CFA  D000               	nop2		;2 cycle nop
  8848                           
  8849                           ;vclib_lcd.h: 158: PORTBbits.RB3 = 1;
  8850  005CFC  8681               	bsf	3969,3,c	;volatile
  8851                           
  8852                           ;vclib_lcd.h: 159: _delay((unsigned long)((2)*(16000000/4000000.0)));
  8853  005CFE  0E02               	movlw	2
  8854  005D00                     u17147:
  8855  005D00  2EE8               	decfsz	wreg,f,c
  8856  005D02  D7FE               	goto	u17147
  8857  005D04  D000               	nop2		;nop
  8858                           
  8859                           ;vclib_lcd.h: 160: PORTBbits.RB3 = 0;
  8860  005D06  9681               	bcf	3969,3,c	;volatile
  8861  005D08  0012               	return		;funcret
  8862  005D0A                     __end_of_lcd_send_4bits:
  8863                           	opt stack 0
  8864                           tblptru	equ	0xFF8
  8865                           tblptrh	equ	0xFF7
  8866                           tblptrl	equ	0xFF6
  8867                           tablat	equ	0xFF5
  8868                           prodh	equ	0xFF4
  8869                           prodl	equ	0xFF3
  8870                           intcon	equ	0xFF2
  8871                           postinc0	equ	0xFEE
  8872                           wreg	equ	0xFE8
  8873                           postdec1	equ	0xFE5
  8874                           fsr1l	equ	0xFE1
  8875                           indf2	equ	0xFDF
  8876                           postinc2	equ	0xFDE
  8877                           postdec2	equ	0xFDD
  8878                           fsr2h	equ	0xFDA
  8879                           fsr2l	equ	0xFD9
  8880                           status	equ	0xFD8
  8881                           
  8882 ;; *************** function _lcd_read_byte *****************
  8883 ;; Defined at:
  8884 ;;		line 127 in file "source/../../vclib_lcd.h"
  8885 ;; Parameters:    Size  Location     Type
  8886 ;;		None
  8887 ;; Auto vars:     Size  Location     Type
  8888 ;;  high            1    3[BANK1 ] unsigned char 
  8889 ;;  low             1    2[BANK1 ] unsigned char 
  8890 ;; Return value:  Size  Location     Type
  8891 ;;                  1    wreg      unsigned char 
  8892 ;; Registers used:
  8893 ;;		wreg, status,2, status,0, cstack
  8894 ;; Tracked objects:
  8895 ;;		On entry : 0/0
  8896 ;;		On exit  : 0/0
  8897 ;;		Unchanged: 0/0
  8898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8899 ;;      Params:         0       0       0       0       0       0       0
  8900 ;;      Locals:         0       0       2       0       0       0       0
  8901 ;;      Temps:          0       0       0       0       0       0       0
  8902 ;;      Totals:         0       0       2       0       0       0       0
  8903 ;;Total ram usage:        2 bytes
  8904 ;; Hardware stack levels used:    1
  8905 ;; Hardware stack levels required when called:   13
  8906 ;; This function calls:
  8907 ;;		_lcd_read_4bits
  8908 ;; This function is called by:
  8909 ;;		_lcd_send_byte
  8910 ;;		_lcd_getc
  8911 ;; This function uses a non-reentrant model
  8912 ;;
  8913                           
  8914                           	psect	text29
  8915  0067A4                     __ptext29:
  8916                           	opt stack 0
  8917  0067A4                     _lcd_read_byte:
  8918                           	opt stack 15
  8919                           
  8920                           ;vclib_lcd.h: 128: unsigned char low, high;
  8921                           ;vclib_lcd.h: 129: TRISBbits.TRISB4 = 1;
  8922                           
  8923                           ;incstack = 0
  8924  0067A4  8893               	bsf	3987,4,c	;volatile
  8925                           
  8926                           ;vclib_lcd.h: 130: TRISBbits.TRISB5 = 1;
  8927  0067A6  8A93               	bsf	3987,5,c	;volatile
  8928                           
  8929                           ;vclib_lcd.h: 131: TRISBbits.TRISB6 = 1;
  8930  0067A8  8C93               	bsf	3987,6,c	;volatile
  8931                           
  8932                           ;vclib_lcd.h: 132: TRISBbits.TRISB7 = 1;
  8933  0067AA  8E93               	bsf	3987,7,c	;volatile
  8934                           
  8935                           ;vclib_lcd.h: 133: PORTBbits.RB2 = 1;
  8936  0067AC  8481               	bsf	3969,2,c	;volatile
  8937                           
  8938                           ;vclib_lcd.h: 134: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8939  0067AE  D000               	nop2		;2 cycle nop
  8940  0067B0  D000               	nop2		;2 cycle nop
  8941                           
  8942                           ;vclib_lcd.h: 135: PORTBbits.RB3 = 1;
  8943  0067B2  8681               	bsf	3969,3,c	;volatile
  8944                           
  8945                           ;vclib_lcd.h: 136: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8946  0067B4  D000               	nop2		;2 cycle nop
  8947  0067B6  D000               	nop2		;2 cycle nop
  8948                           
  8949                           ;vclib_lcd.h: 137: high = lcd_read_4bits();
  8950  0067B8  EC16  F030         	call	_lcd_read_4bits	;wreg free
  8951  0067BC  0101               	movlb	1	; () banked
  8952  0067BE  6F03               	movwf	lcd_read_byte@high& (0+255),b
  8953                           
  8954                           ; BSR set to: 1
  8955                           ;vclib_lcd.h: 138: PORTBbits.RB3 = 0;
  8956  0067C0  9681               	bcf	3969,3,c	;volatile
  8957                           
  8958                           ; BSR set to: 1
  8959                           ;vclib_lcd.h: 139: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8960  0067C2  D000               	nop2		;2 cycle nop
  8961  0067C4  D000               	nop2		;2 cycle nop
  8962                           
  8963                           ;vclib_lcd.h: 140: PORTBbits.RB3 = 1;
  8964  0067C6  8681               	bsf	3969,3,c	;volatile
  8965                           
  8966                           ;vclib_lcd.h: 141: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8967  0067C8  D000               	nop2		;2 cycle nop
  8968  0067CA  D000               	nop2		;2 cycle nop
  8969                           
  8970                           ;vclib_lcd.h: 142: low = lcd_read_4bits();
  8971  0067CC  EC16  F030         	call	_lcd_read_4bits	;wreg free
  8972  0067D0  0101               	movlb	1	; () banked
  8973  0067D2  6F02               	movwf	lcd_read_byte@low& (0+255),b
  8974                           
  8975                           ; BSR set to: 1
  8976                           ;vclib_lcd.h: 143: PORTBbits.RB3 = 0;
  8977  0067D4  9681               	bcf	3969,3,c	;volatile
  8978                           
  8979                           ; BSR set to: 1
  8980                           ;vclib_lcd.h: 144: TRISBbits.TRISB4 = 0;
  8981  0067D6  9893               	bcf	3987,4,c	;volatile
  8982                           
  8983                           ; BSR set to: 1
  8984                           ;vclib_lcd.h: 145: TRISBbits.TRISB5 = 0;
  8985  0067D8  9A93               	bcf	3987,5,c	;volatile
  8986                           
  8987                           ; BSR set to: 1
  8988                           ;vclib_lcd.h: 146: TRISBbits.TRISB6 = 0;
  8989  0067DA  9C93               	bcf	3987,6,c	;volatile
  8990                           
  8991                           ; BSR set to: 1
  8992                           ;vclib_lcd.h: 147: TRISBbits.TRISB7 = 0;
  8993  0067DC  9E93               	bcf	3987,7,c	;volatile
  8994                           
  8995                           ; BSR set to: 1
  8996                           ;vclib_lcd.h: 148: return ( (high << 4) | low);
  8997  0067DE  0101               	movlb	1	; () banked
  8998  0067E0  3903               	swapf	lcd_read_byte@high& (0+255),w,b
  8999  0067E2  0BF0               	andlw	240
  9000  0067E4  0101               	movlb	1	; () banked
  9001  0067E6  1102               	iorwf	lcd_read_byte@low& (0+255),w,b
  9002  0067E8  0012               	return	
  9003  0067EA                     __end_of_lcd_read_byte:
  9004                           	opt stack 0
  9005                           tblptru	equ	0xFF8
  9006                           tblptrh	equ	0xFF7
  9007                           tblptrl	equ	0xFF6
  9008                           tablat	equ	0xFF5
  9009                           prodh	equ	0xFF4
  9010                           prodl	equ	0xFF3
  9011                           intcon	equ	0xFF2
  9012                           postinc0	equ	0xFEE
  9013                           wreg	equ	0xFE8
  9014                           postdec1	equ	0xFE5
  9015                           fsr1l	equ	0xFE1
  9016                           indf2	equ	0xFDF
  9017                           postinc2	equ	0xFDE
  9018                           postdec2	equ	0xFDD
  9019                           fsr2h	equ	0xFDA
  9020                           fsr2l	equ	0xFD9
  9021                           status	equ	0xFD8
  9022                           
  9023 ;; *************** function _lcd_read_4bits *****************
  9024 ;; Defined at:
  9025 ;;		line 117 in file "source/../../vclib_lcd.h"
  9026 ;; Parameters:    Size  Location     Type
  9027 ;;		None
  9028 ;; Auto vars:     Size  Location     Type
  9029 ;;  n               1    1[BANK1 ] unsigned char 
  9030 ;; Return value:  Size  Location     Type
  9031 ;;                  1    wreg      unsigned char 
  9032 ;; Registers used:
  9033 ;;		wreg, status,2, status,0
  9034 ;; Tracked objects:
  9035 ;;		On entry : 0/0
  9036 ;;		On exit  : 0/0
  9037 ;;		Unchanged: 0/0
  9038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9039 ;;      Params:         0       0       0       0       0       0       0
  9040 ;;      Locals:         0       0       1       0       0       0       0
  9041 ;;      Temps:          0       0       1       0       0       0       0
  9042 ;;      Totals:         0       0       2       0       0       0       0
  9043 ;;Total ram usage:        2 bytes
  9044 ;; Hardware stack levels used:    1
  9045 ;; Hardware stack levels required when called:   12
  9046 ;; This function calls:
  9047 ;;		Nothing
  9048 ;; This function is called by:
  9049 ;;		_lcd_read_byte
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           	psect	text30
  9054  00602C                     __ptext30:
  9055                           	opt stack 0
  9056  00602C                     _lcd_read_4bits:
  9057                           	opt stack 15
  9058                           
  9059                           ;vclib_lcd.h: 118: unsigned char n = 0x00;
  9060                           
  9061                           ; BSR set to: 1
  9062                           ;incstack = 0
  9063  00602C  0E00               	movlw	0
  9064  00602E  0101               	movlb	1	; () banked
  9065  006030  6F01               	movwf	lcd_read_4bits@n& (0+255),b
  9066                           
  9067                           ; BSR set to: 1
  9068                           ;vclib_lcd.h: 120: n |= PORTBbits.RB4;
  9069  006032  A881               	btfss	3969,4,c	;volatile
  9070  006034  D002               	goto	u13330
  9071  006036  0E01               	movlw	1
  9072  006038  D001               	goto	u13336
  9073  00603A                     u13330:
  9074  00603A  0E00               	movlw	0
  9075  00603C                     u13336:
  9076  00603C  0101               	movlb	1	; () banked
  9077  00603E  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9078                           
  9079                           ; BSR set to: 1
  9080                           ;vclib_lcd.h: 121: n |= PORTBbits.RB5 << 1;
  9081  006040  AA81               	btfss	3969,5,c	;volatile
  9082  006042  D004               	goto	u13340
  9083  006044  0101               	movlb	1	; () banked
  9084  006046  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9085  006048  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  9086  00604A  D002               	goto	u13348
  9087  00604C                     u13340:
  9088  00604C  0101               	movlb	1	; () banked
  9089  00604E  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9090  006050                     u13348:
  9091  006050  0101               	movlb	1	; () banked
  9092  006052  90D8               	bcf	status,0,c
  9093  006054  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9094  006056  0101               	movlb	1	; () banked
  9095  006058  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9096                           
  9097                           ; BSR set to: 1
  9098                           ;vclib_lcd.h: 122: n |= PORTBbits.RB6 << 2;
  9099  00605A  AC81               	btfss	3969,6,c	;volatile
  9100  00605C  D004               	goto	u13350
  9101  00605E  0101               	movlb	1	; () banked
  9102  006060  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9103  006062  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  9104  006064  D002               	goto	u13358
  9105  006066                     u13350:
  9106  006066  0101               	movlb	1	; () banked
  9107  006068  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9108  00606A                     u13358:
  9109  00606A  0101               	movlb	1	; () banked
  9110  00606C  90D8               	bcf	status,0,c
  9111  00606E  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9112  006070  0101               	movlb	1	; () banked
  9113  006072  90D8               	bcf	status,0,c
  9114  006074  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9115  006076  0101               	movlb	1	; () banked
  9116  006078  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9117                           
  9118                           ; BSR set to: 1
  9119                           ;vclib_lcd.h: 123: n |= PORTBbits.RB7 << 3;
  9120  00607A  AE81               	btfss	3969,7,c	;volatile
  9121  00607C  D004               	goto	u13360
  9122  00607E  0101               	movlb	1	; () banked
  9123  006080  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9124  006082  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  9125  006084  D002               	goto	u13368
  9126  006086                     u13360:
  9127  006086  0101               	movlb	1	; () banked
  9128  006088  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9129  00608A                     u13368:
  9130  00608A  0101               	movlb	1	; () banked
  9131  00608C  90D8               	bcf	status,0,c
  9132  00608E  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9133  006090  0101               	movlb	1	; () banked
  9134  006092  90D8               	bcf	status,0,c
  9135  006094  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9136  006096  0101               	movlb	1	; () banked
  9137  006098  90D8               	bcf	status,0,c
  9138  00609A  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9139  00609C  0101               	movlb	1	; () banked
  9140  00609E  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9141                           
  9142                           ;vclib_lcd.h: 124: return (n);
  9143  0060A0  0101               	movlb	1	; () banked
  9144  0060A2  5101               	movf	lcd_read_4bits@n& (0+255),w,b
  9145  0060A4  0012               	return	
  9146  0060A6                     __end_of_lcd_read_4bits:
  9147                           	opt stack 0
  9148                           tblptru	equ	0xFF8
  9149                           tblptrh	equ	0xFF7
  9150                           tblptrl	equ	0xFF6
  9151                           tablat	equ	0xFF5
  9152                           prodh	equ	0xFF4
  9153                           prodl	equ	0xFF3
  9154                           intcon	equ	0xFF2
  9155                           postinc0	equ	0xFEE
  9156                           wreg	equ	0xFE8
  9157                           postdec1	equ	0xFE5
  9158                           fsr1l	equ	0xFE1
  9159                           indf2	equ	0xFDF
  9160                           postinc2	equ	0xFDE
  9161                           postdec2	equ	0xFDD
  9162                           fsr2h	equ	0xFDA
  9163                           fsr2l	equ	0xFD9
  9164                           status	equ	0xFD8
  9165                           
  9166 ;; *************** function _isdigit *****************
  9167 ;; Defined at:
  9168 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  9169 ;; Parameters:    Size  Location     Type
  9170 ;;  c               1    wreg     unsigned char 
  9171 ;; Auto vars:     Size  Location     Type
  9172 ;;  c               1    2[BANK1 ] unsigned char 
  9173 ;; Return value:  Size  Location     Type
  9174 ;;		None               void
  9175 ;; Registers used:
  9176 ;;		wreg, status,2, status,0
  9177 ;; Tracked objects:
  9178 ;;		On entry : 0/0
  9179 ;;		On exit  : 0/0
  9180 ;;		Unchanged: 0/0
  9181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9182 ;;      Params:         0       0       0       0       0       0       0
  9183 ;;      Locals:         0       0       2       0       0       0       0
  9184 ;;      Temps:          0       0       1       0       0       0       0
  9185 ;;      Totals:         0       0       3       0       0       0       0
  9186 ;;Total ram usage:        3 bytes
  9187 ;; Hardware stack levels used:    1
  9188 ;; Hardware stack levels required when called:   12
  9189 ;; This function calls:
  9190 ;;		Nothing
  9191 ;; This function is called by:
  9192 ;;		_printf
  9193 ;; This function uses a non-reentrant model
  9194 ;;
  9195                           
  9196                           	psect	text31
  9197  006B88                     __ptext31:
  9198                           	opt stack 0
  9199  006B88                     _isdigit:
  9200                           	opt stack 15
  9201                           
  9202                           ; BSR set to: 1
  9203                           ;incstack = 0
  9204                           ;isdigit@c stored from wreg
  9205  006B88  0101               	movlb	1	; () banked
  9206  006B8A  6F02               	movwf	isdigit@c& (0+255),b
  9207  006B8C  0E00               	movlw	0
  9208  006B8E  0101               	movlb	1	; () banked
  9209  006B90  6F01               	movwf	_isdigit$2660& (0+255),b
  9210                           
  9211                           ; BSR set to: 1
  9212  006B92  0E3A               	movlw	58
  9213  006B94  0101               	movlb	1	; () banked
  9214  006B96  6102               	cpfslt	isdigit@c& (0+255),b
  9215  006B98  D007               	goto	l9585
  9216                           
  9217                           ; BSR set to: 1
  9218  006B9A  0E2F               	movlw	47
  9219  006B9C  0101               	movlb	1	; () banked
  9220  006B9E  6502               	cpfsgt	isdigit@c& (0+255),b
  9221  006BA0  D003               	goto	l9585
  9222                           
  9223                           ; BSR set to: 1
  9224  006BA2  0E01               	movlw	1
  9225  006BA4  0101               	movlb	1	; () banked
  9226  006BA6  6F01               	movwf	_isdigit$2660& (0+255),b
  9227  006BA8                     l9585:
  9228                           
  9229                           ; BSR set to: 1
  9230  006BA8  C101  F100         	movff	_isdigit$2660,??_isdigit
  9231  006BAC  0101               	movlb	1	; () banked
  9232  006BAE  3100               	rrcf	??_isdigit& (0+255),w,b
  9233  006BB0  0012               	return	
  9234  006BB2                     __end_of_isdigit:
  9235                           	opt stack 0
  9236                           tblptru	equ	0xFF8
  9237                           tblptrh	equ	0xFF7
  9238                           tblptrl	equ	0xFF6
  9239                           tablat	equ	0xFF5
  9240                           prodh	equ	0xFF4
  9241                           prodl	equ	0xFF3
  9242                           intcon	equ	0xFF2
  9243                           postinc0	equ	0xFEE
  9244                           wreg	equ	0xFE8
  9245                           postdec1	equ	0xFE5
  9246                           fsr1l	equ	0xFE1
  9247                           indf2	equ	0xFDF
  9248                           postinc2	equ	0xFDE
  9249                           postdec2	equ	0xFDD
  9250                           fsr2h	equ	0xFDA
  9251                           fsr2l	equ	0xFD9
  9252                           status	equ	0xFD8
  9253                           
  9254 ;; *************** function _fround *****************
  9255 ;; Defined at:
  9256 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  9257 ;; Parameters:    Size  Location     Type
  9258 ;;  prec            1    wreg     unsigned char 
  9259 ;; Auto vars:     Size  Location     Type
  9260 ;;  prec            1   44[BANK1 ] unsigned char 
  9261 ;; Return value:  Size  Location     Type
  9262 ;;                  3   35[BANK1 ] unsigned char 
  9263 ;; Registers used:
  9264 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9265 ;; Tracked objects:
  9266 ;;		On entry : 0/0
  9267 ;;		On exit  : 0/0
  9268 ;;		Unchanged: 0/0
  9269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9270 ;;      Params:         0       0       3       0       0       0       0
  9271 ;;      Locals:         0       0       7       0       0       0       0
  9272 ;;      Temps:          0       0       0       0       0       0       0
  9273 ;;      Totals:         0       0      10       0       0       0       0
  9274 ;;Total ram usage:       10 bytes
  9275 ;; Hardware stack levels used:    1
  9276 ;; Hardware stack levels required when called:   14
  9277 ;; This function calls:
  9278 ;;		___awdiv
  9279 ;;		___awmod
  9280 ;;		___ftmul
  9281 ;;		___wmul
  9282 ;; This function is called by:
  9283 ;;		_printf
  9284 ;; This function uses a non-reentrant model
  9285 ;;
  9286                           
  9287                           	psect	text32
  9288  00172C                     __ptext32:
  9289                           	opt stack 0
  9290  00172C                     _fround:
  9291                           	opt stack 13
  9292                           
  9293                           ; BSR set to: 1
  9294                           ;incstack = 0
  9295                           ;fround@prec stored from wreg
  9296  00172C  0101               	movlb	1	; () banked
  9297  00172E  6F2C               	movwf	fround@prec& (0+255),b
  9298                           
  9299                           ;doprnt.c: 413: if(prec>=110)
  9300  001730  0E6D               	movlw	109
  9301  001732  0101               	movlb	1	; () banked
  9302  001734  652C               	cpfsgt	fround@prec& (0+255),b
  9303  001736  D0BA               	goto	l9527
  9304                           
  9305                           ; BSR set to: 1
  9306                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9307  001738  0E00               	movlw	0
  9308  00173A  0101               	movlb	1	; () banked
  9309  00173C  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9310  00173E  0E03               	movlw	3
  9311  001740  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9312  001742  0E00               	movlw	0
  9313  001744  0101               	movlb	1	; () banked
  9314  001746  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9315  001748  0E0A               	movlw	10
  9316  00174A  6F08               	movwf	___awdiv@divisor& (0+255),b
  9317  00174C  0E00               	movlw	0
  9318  00174E  0101               	movlb	1	; () banked
  9319  001750  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9320  001752  0E64               	movlw	100
  9321  001754  6F02               	movwf	___awmod@divisor& (0+255),b
  9322  001756  C12C  F100         	movff	fround@prec,___awmod@dividend
  9323  00175A  0101               	movlb	1	; () banked
  9324  00175C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9325  00175E  ECAD  F02A         	call	___awmod	;wreg free
  9326  001762  C100  F106         	movff	?___awmod,___awdiv@dividend
  9327  001766  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  9328  00176A  ECDE  F027         	call	___awdiv	;wreg free
  9329  00176E  0E09               	movlw	9
  9330  001770  0101               	movlb	1	; () banked
  9331  001772  2506               	addwf	?___awdiv& (0+255),w,b
  9332  001774  0101               	movlb	1	; () banked
  9333  001776  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9334  001778  0E00               	movlw	0
  9335  00177A  0101               	movlb	1	; () banked
  9336  00177C  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9337  00177E  0101               	movlb	1	; () banked
  9338  001780  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9339  001782  ECEB  F034         	call	___wmul	;wreg free
  9340  001786  0E63               	movlw	low __npowers_
  9341  001788  0101               	movlb	1	; () banked
  9342  00178A  250E               	addwf	?___wmul& (0+255),w,b
  9343  00178C  6EF6               	movwf	tblptrl,c
  9344  00178E  0E7D               	movlw	high __npowers_
  9345  001790  0101               	movlb	1	; () banked
  9346  001792  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9347  001794  6EF7               	movwf	tblptrh,c
  9348  001796                     	if	0	;There are less than 3 active tblptr bytes
  9349  001796                     	endif
  9350  001796  0009               	tblrd		*+
  9351  001798  CFF5 F117          	movff	tablat,___ftmul@f2
  9352  00179C  0009               	tblrd		*+
  9353  00179E  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9354  0017A2  000A               	tblrd		*-
  9355  0017A4  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9356  0017A8  0E00               	movlw	0
  9357  0017AA  0101               	movlb	1	; () banked
  9358  0017AC  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9359  0017AE  0E64               	movlw	100
  9360  0017B0  6F08               	movwf	___awdiv@divisor& (0+255),b
  9361  0017B2  C12C  F106         	movff	fround@prec,___awdiv@dividend
  9362  0017B6  0101               	movlb	1	; () banked
  9363  0017B8  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  9364  0017BA  ECDE  F027         	call	___awdiv	;wreg free
  9365  0017BE  0E12               	movlw	18
  9366  0017C0  0101               	movlb	1	; () banked
  9367  0017C2  2506               	addwf	?___awdiv& (0+255),w,b
  9368  0017C4  0101               	movlb	1	; () banked
  9369  0017C6  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9370  0017C8  0E00               	movlw	0
  9371  0017CA  0101               	movlb	1	; () banked
  9372  0017CC  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9373  0017CE  0101               	movlb	1	; () banked
  9374  0017D0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9375  0017D2  0E00               	movlw	0
  9376  0017D4  0101               	movlb	1	; () banked
  9377  0017D6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9378  0017D8  0E03               	movlw	3
  9379  0017DA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9380  0017DC  ECEB  F034         	call	___wmul	;wreg free
  9381  0017E0  0E63               	movlw	low __npowers_
  9382  0017E2  0101               	movlb	1	; () banked
  9383  0017E4  250E               	addwf	?___wmul& (0+255),w,b
  9384  0017E6  6EF6               	movwf	tblptrl,c
  9385  0017E8  0E7D               	movlw	high __npowers_
  9386  0017EA  0101               	movlb	1	; () banked
  9387  0017EC  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9388  0017EE  6EF7               	movwf	tblptrh,c
  9389  0017F0                     	if	0	;There are less than 3 active tblptr bytes
  9390  0017F0                     	endif
  9391  0017F0  0009               	tblrd		*+
  9392  0017F2  CFF5 F114          	movff	tablat,___ftmul@f1
  9393  0017F6  0009               	tblrd		*+
  9394  0017F8  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9395  0017FC  000A               	tblrd		*-
  9396  0017FE  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9397  001802  ECCC  F01A         	call	___ftmul	;wreg free
  9398  001806  C114  F129         	movff	?___ftmul,_fround$3164
  9399  00180A  C115  F12A         	movff	?___ftmul+1,_fround$3164+1
  9400  00180E  C116  F12B         	movff	?___ftmul+2,_fround$3164+2
  9401                           
  9402                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9403  001812  0E00               	movlw	0
  9404  001814  0101               	movlb	1	; () banked
  9405  001816  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9406  001818  0E03               	movlw	3
  9407  00181A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9408  00181C  0E00               	movlw	0
  9409  00181E  0101               	movlb	1	; () banked
  9410  001820  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9411  001822  0E0A               	movlw	10
  9412  001824  6F02               	movwf	___awmod@divisor& (0+255),b
  9413  001826  C12C  F100         	movff	fround@prec,___awmod@dividend
  9414  00182A  0101               	movlb	1	; () banked
  9415  00182C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9416  00182E  ECAD  F02A         	call	___awmod	;wreg free
  9417  001832  C100  F10E         	movff	?___awmod,___wmul@multiplier
  9418  001836  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  9419  00183A  ECEB  F034         	call	___wmul	;wreg free
  9420  00183E  0E63               	movlw	low __npowers_
  9421  001840  0101               	movlb	1	; () banked
  9422  001842  250E               	addwf	?___wmul& (0+255),w,b
  9423  001844  6EF6               	movwf	tblptrl,c
  9424  001846  0E7D               	movlw	high __npowers_
  9425  001848  0101               	movlb	1	; () banked
  9426  00184A  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9427  00184C  6EF7               	movwf	tblptrh,c
  9428  00184E                     	if	0	;There are less than 3 active tblptr bytes
  9429  00184E                     	endif
  9430  00184E  0009               	tblrd		*+
  9431  001850  CFF5 F117          	movff	tablat,___ftmul@f2
  9432  001854  0009               	tblrd		*+
  9433  001856  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9434  00185A  000A               	tblrd		*-
  9435  00185C  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9436  001860  C129  F114         	movff	_fround$3164,___ftmul@f1
  9437  001864  C12A  F115         	movff	_fround$3164+1,___ftmul@f1+1
  9438  001868  C12B  F116         	movff	_fround$3164+2,___ftmul@f1+2
  9439  00186C  ECCC  F01A         	call	___ftmul	;wreg free
  9440  001870  C114  F126         	movff	?___ftmul,_fround$3165
  9441  001874  C115  F127         	movff	?___ftmul+1,_fround$3165+1
  9442  001878  C116  F128         	movff	?___ftmul+2,_fround$3165+2
  9443                           
  9444                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9445  00187C  C126  F114         	movff	_fround$3165,___ftmul@f1
  9446  001880  C127  F115         	movff	_fround$3165+1,___ftmul@f1+1
  9447  001884  C128  F116         	movff	_fround$3165+2,___ftmul@f1+2
  9448  001888  0E00               	movlw	0
  9449  00188A  0101               	movlb	1	; () banked
  9450  00188C  6F17               	movwf	___ftmul@f2& (0+255),b
  9451  00188E  0E00               	movlw	0
  9452  001890  0101               	movlb	1	; () banked
  9453  001892  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9454  001894  0E3F               	movlw	63
  9455  001896  0101               	movlb	1	; () banked
  9456  001898  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9457  00189A  ECCC  F01A         	call	___ftmul	;wreg free
  9458  00189E  C114  F123         	movff	?___ftmul,?_fround
  9459  0018A2  C115  F124         	movff	?___ftmul+1,?_fround+1
  9460  0018A6  C116  F125         	movff	?___ftmul+2,?_fround+2
  9461  0018AA  0012               	return	
  9462  0018AC                     l9527:
  9463                           
  9464                           ;doprnt.c: 415: else if(prec > 10)
  9465  0018AC  0E0A               	movlw	10
  9466  0018AE  0101               	movlb	1	; () banked
  9467  0018B0  652C               	cpfsgt	fround@prec& (0+255),b
  9468  0018B2  D06E               	goto	l9535
  9469                           
  9470                           ; BSR set to: 1
  9471                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9472  0018B4  0E00               	movlw	0
  9473  0018B6  0101               	movlb	1	; () banked
  9474  0018B8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9475  0018BA  0E03               	movlw	3
  9476  0018BC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9477  0018BE  0E00               	movlw	0
  9478  0018C0  0101               	movlb	1	; () banked
  9479  0018C2  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9480  0018C4  0E0A               	movlw	10
  9481  0018C6  6F02               	movwf	___awmod@divisor& (0+255),b
  9482  0018C8  C12C  F100         	movff	fround@prec,___awmod@dividend
  9483  0018CC  0101               	movlb	1	; () banked
  9484  0018CE  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9485  0018D0  ECAD  F02A         	call	___awmod	;wreg free
  9486  0018D4  C100  F10E         	movff	?___awmod,___wmul@multiplier
  9487  0018D8  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  9488  0018DC  ECEB  F034         	call	___wmul	;wreg free
  9489  0018E0  0E63               	movlw	low __npowers_
  9490  0018E2  0101               	movlb	1	; () banked
  9491  0018E4  250E               	addwf	?___wmul& (0+255),w,b
  9492  0018E6  6EF6               	movwf	tblptrl,c
  9493  0018E8  0E7D               	movlw	high __npowers_
  9494  0018EA  0101               	movlb	1	; () banked
  9495  0018EC  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9496  0018EE  6EF7               	movwf	tblptrh,c
  9497  0018F0                     	if	0	;There are less than 3 active tblptr bytes
  9498  0018F0                     	endif
  9499  0018F0  0009               	tblrd		*+
  9500  0018F2  CFF5 F117          	movff	tablat,___ftmul@f2
  9501  0018F6  0009               	tblrd		*+
  9502  0018F8  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9503  0018FC  000A               	tblrd		*-
  9504  0018FE  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9505  001902  0E00               	movlw	0
  9506  001904  0101               	movlb	1	; () banked
  9507  001906  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9508  001908  0E0A               	movlw	10
  9509  00190A  6F08               	movwf	___awdiv@divisor& (0+255),b
  9510  00190C  C12C  F106         	movff	fround@prec,___awdiv@dividend
  9511  001910  0101               	movlb	1	; () banked
  9512  001912  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  9513  001914  ECDE  F027         	call	___awdiv	;wreg free
  9514  001918  0E09               	movlw	9
  9515  00191A  0101               	movlb	1	; () banked
  9516  00191C  2506               	addwf	?___awdiv& (0+255),w,b
  9517  00191E  0101               	movlb	1	; () banked
  9518  001920  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9519  001922  0E00               	movlw	0
  9520  001924  0101               	movlb	1	; () banked
  9521  001926  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9522  001928  0101               	movlb	1	; () banked
  9523  00192A  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9524  00192C  0E00               	movlw	0
  9525  00192E  0101               	movlb	1	; () banked
  9526  001930  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9527  001932  0E03               	movlw	3
  9528  001934  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9529  001936  ECEB  F034         	call	___wmul	;wreg free
  9530  00193A  0E63               	movlw	low __npowers_
  9531  00193C  0101               	movlb	1	; () banked
  9532  00193E  250E               	addwf	?___wmul& (0+255),w,b
  9533  001940  6EF6               	movwf	tblptrl,c
  9534  001942  0E7D               	movlw	high __npowers_
  9535  001944  0101               	movlb	1	; () banked
  9536  001946  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9537  001948  6EF7               	movwf	tblptrh,c
  9538  00194A                     	if	0	;There are less than 3 active tblptr bytes
  9539  00194A                     	endif
  9540  00194A  0009               	tblrd		*+
  9541  00194C  CFF5 F114          	movff	tablat,___ftmul@f1
  9542  001950  0009               	tblrd		*+
  9543  001952  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9544  001956  000A               	tblrd		*-
  9545  001958  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9546  00195C  ECCC  F01A         	call	___ftmul	;wreg free
  9547  001960  C114  F129         	movff	?___ftmul,_fround$3164
  9548  001964  C115  F12A         	movff	?___ftmul+1,_fround$3164+1
  9549  001968  C116  F12B         	movff	?___ftmul+2,_fround$3164+2
  9550                           
  9551                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9552  00196C  C129  F114         	movff	_fround$3164,___ftmul@f1
  9553  001970  C12A  F115         	movff	_fround$3164+1,___ftmul@f1+1
  9554  001974  C12B  F116         	movff	_fround$3164+2,___ftmul@f1+2
  9555  001978  0E00               	movlw	0
  9556  00197A  0101               	movlb	1	; () banked
  9557  00197C  6F17               	movwf	___ftmul@f2& (0+255),b
  9558  00197E  0E00               	movlw	0
  9559  001980  0101               	movlb	1	; () banked
  9560  001982  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9561  001984  0E3F               	movlw	63
  9562  001986  0101               	movlb	1	; () banked
  9563  001988  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9564  00198A  ECCC  F01A         	call	___ftmul	;wreg free
  9565  00198E  D787               	goto	L5
  9566  001990                     l9535:
  9567                           
  9568                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9569  001990  0101               	movlb	1	; () banked
  9570  001992  512C               	movf	fround@prec& (0+255),w,b
  9571  001994  0D03               	mullw	3
  9572  001996  0E63               	movlw	low __npowers_
  9573  001998  24F3               	addwf	prodl,w,c
  9574  00199A  6EF6               	movwf	tblptrl,c
  9575  00199C  0E7D               	movlw	high __npowers_
  9576  00199E  20F4               	addwfc	prodh,w,c
  9577  0019A0  6EF7               	movwf	tblptrh,c
  9578  0019A2                     	if	0	;There are less than 3 active tblptr bytes
  9579  0019A2                     	endif
  9580  0019A2  0009               	tblrd		*+
  9581  0019A4  CFF5 F114          	movff	tablat,___ftmul@f1
  9582  0019A8  0009               	tblrd		*+
  9583  0019AA  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9584  0019AE  000A               	tblrd		*-
  9585  0019B0  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9586  0019B4  0E00               	movlw	0
  9587  0019B6  0101               	movlb	1	; () banked
  9588  0019B8  6F17               	movwf	___ftmul@f2& (0+255),b
  9589  0019BA  0E00               	movlw	0
  9590  0019BC  0101               	movlb	1	; () banked
  9591  0019BE  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9592  0019C0  0E3F               	movlw	63
  9593  0019C2  0101               	movlb	1	; () banked
  9594  0019C4  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9595  0019C6  ECCC  F01A         	call	___ftmul	;wreg free
  9596  0019CA  C114  F123         	movff	?___ftmul,?_fround
  9597  0019CE  C115  F124         	movff	?___ftmul+1,?_fround+1
  9598  0019D2  C116  F125         	movff	?___ftmul+2,?_fround+2
  9599  0019D6  0012               	return	
  9600  0019D8                     __end_of_fround:
  9601                           	opt stack 0
  9602                           tblptru	equ	0xFF8
  9603                           tblptrh	equ	0xFF7
  9604                           tblptrl	equ	0xFF6
  9605                           tablat	equ	0xFF5
  9606                           prodh	equ	0xFF4
  9607                           prodl	equ	0xFF3
  9608                           intcon	equ	0xFF2
  9609                           postinc0	equ	0xFEE
  9610                           wreg	equ	0xFE8
  9611                           postdec1	equ	0xFE5
  9612                           fsr1l	equ	0xFE1
  9613                           indf2	equ	0xFDF
  9614                           postinc2	equ	0xFDE
  9615                           postdec2	equ	0xFDD
  9616                           fsr2h	equ	0xFDA
  9617                           fsr2l	equ	0xFD9
  9618                           status	equ	0xFD8
  9619                           
  9620 ;; *************** function ___wmul *****************
  9621 ;; Defined at:
  9622 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  9623 ;; Parameters:    Size  Location     Type
  9624 ;;  multiplier      2   14[BANK1 ] unsigned int 
  9625 ;;  multiplicand    2   16[BANK1 ] unsigned int 
  9626 ;; Auto vars:     Size  Location     Type
  9627 ;;  product         2   18[BANK1 ] unsigned int 
  9628 ;; Return value:  Size  Location     Type
  9629 ;;                  2   14[BANK1 ] unsigned int 
  9630 ;; Registers used:
  9631 ;;		wreg, status,2, status,0, prodl, prodh
  9632 ;; Tracked objects:
  9633 ;;		On entry : 0/0
  9634 ;;		On exit  : 0/0
  9635 ;;		Unchanged: 0/0
  9636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9637 ;;      Params:         0       0       4       0       0       0       0
  9638 ;;      Locals:         0       0       2       0       0       0       0
  9639 ;;      Temps:          0       0       0       0       0       0       0
  9640 ;;      Totals:         0       0       6       0       0       0       0
  9641 ;;Total ram usage:        6 bytes
  9642 ;; Hardware stack levels used:    1
  9643 ;; Hardware stack levels required when called:   12
  9644 ;; This function calls:
  9645 ;;		Nothing
  9646 ;; This function is called by:
  9647 ;;		_fround
  9648 ;;		_scale
  9649 ;;		_printf
  9650 ;; This function uses a non-reentrant model
  9651 ;;
  9652                           
  9653                           	psect	text33
  9654  0069D6                     __ptext33:
  9655                           	opt stack 0
  9656  0069D6                     ___wmul:
  9657                           	opt stack 14
  9658                           
  9659                           ;incstack = 0
  9660  0069D6  0101               	movlb	1	; () banked
  9661  0069D8  510E               	movf	___wmul@multiplier& (0+255),w,b
  9662  0069DA  0101               	movlb	1	; () banked
  9663  0069DC  0310               	mulwf	___wmul@multiplicand& (0+255),b
  9664  0069DE  CFF3 F112          	movff	prodl,___wmul@product
  9665  0069E2  CFF4 F113          	movff	prodh,___wmul@product+1
  9666  0069E6  0101               	movlb	1	; () banked
  9667  0069E8  510E               	movf	___wmul@multiplier& (0+255),w,b
  9668  0069EA  0101               	movlb	1	; () banked
  9669  0069EC  0311               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9670  0069EE  50F3               	movf	prodl,w,c
  9671  0069F0  0101               	movlb	1	; () banked
  9672  0069F2  2713               	addwf	(___wmul@product+1)& (0+255),f,b
  9673  0069F4  0101               	movlb	1	; () banked
  9674  0069F6  510F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9675  0069F8  0101               	movlb	1	; () banked
  9676  0069FA  0310               	mulwf	___wmul@multiplicand& (0+255),b
  9677  0069FC  50F3               	movf	prodl,w,c
  9678  0069FE  0101               	movlb	1	; () banked
  9679  006A00  2713               	addwf	(___wmul@product+1)& (0+255),f,b
  9680                           
  9681                           ; BSR set to: 1
  9682  006A02  C112  F10E         	movff	___wmul@product,?___wmul
  9683  006A06  C113  F10F         	movff	___wmul@product+1,?___wmul+1
  9684  006A0A  0012               	return	
  9685  006A0C                     __end_of___wmul:
  9686                           	opt stack 0
  9687                           tblptru	equ	0xFF8
  9688                           tblptrh	equ	0xFF7
  9689                           tblptrl	equ	0xFF6
  9690                           tablat	equ	0xFF5
  9691                           prodh	equ	0xFF4
  9692                           prodl	equ	0xFF3
  9693                           intcon	equ	0xFF2
  9694                           postinc0	equ	0xFEE
  9695                           wreg	equ	0xFE8
  9696                           postdec1	equ	0xFE5
  9697                           fsr1l	equ	0xFE1
  9698                           indf2	equ	0xFDF
  9699                           postinc2	equ	0xFDE
  9700                           postdec2	equ	0xFDD
  9701                           fsr2h	equ	0xFDA
  9702                           fsr2l	equ	0xFD9
  9703                           status	equ	0xFD8
  9704                           
  9705 ;; *************** function ___awmod *****************
  9706 ;; Defined at:
  9707 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  9708 ;; Parameters:    Size  Location     Type
  9709 ;;  dividend        2    0[BANK1 ] int 
  9710 ;;  divisor         2    2[BANK1 ] int 
  9711 ;; Auto vars:     Size  Location     Type
  9712 ;;  sign            1    5[BANK1 ] unsigned char 
  9713 ;;  counter         1    4[BANK1 ] unsigned char 
  9714 ;; Return value:  Size  Location     Type
  9715 ;;                  2    0[BANK1 ] int 
  9716 ;; Registers used:
  9717 ;;		wreg, status,2, status,0
  9718 ;; Tracked objects:
  9719 ;;		On entry : 0/0
  9720 ;;		On exit  : 0/0
  9721 ;;		Unchanged: 0/0
  9722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9723 ;;      Params:         0       0       4       0       0       0       0
  9724 ;;      Locals:         0       0       2       0       0       0       0
  9725 ;;      Temps:          0       0       0       0       0       0       0
  9726 ;;      Totals:         0       0       6       0       0       0       0
  9727 ;;Total ram usage:        6 bytes
  9728 ;; Hardware stack levels used:    1
  9729 ;; Hardware stack levels required when called:   12
  9730 ;; This function calls:
  9731 ;;		Nothing
  9732 ;; This function is called by:
  9733 ;;		_fround
  9734 ;;		_scale
  9735 ;; This function uses a non-reentrant model
  9736 ;;
  9737                           
  9738                           	psect	text34
  9739  00555A                     __ptext34:
  9740                           	opt stack 0
  9741  00555A                     ___awmod:
  9742                           	opt stack 14
  9743                           
  9744                           ; BSR set to: 1
  9745                           ;incstack = 0
  9746  00555A  0E00               	movlw	0
  9747  00555C  0101               	movlb	1	; () banked
  9748  00555E  6F05               	movwf	___awmod@sign& (0+255),b
  9749                           
  9750                           ; BSR set to: 1
  9751  005560  0101               	movlb	1	; () banked
  9752  005562  AF01               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9753  005564  D008               	goto	l9471
  9754                           
  9755                           ; BSR set to: 1
  9756  005566  0101               	movlb	1	; () banked
  9757  005568  6D00               	negf	___awmod@dividend& (0+255),b
  9758  00556A  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
  9759  00556C  B0D8               	btfsc	status,0,c
  9760  00556E  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
  9761                           
  9762                           ; BSR set to: 1
  9763  005570  0E01               	movlw	1
  9764  005572  0101               	movlb	1	; () banked
  9765  005574  6F05               	movwf	___awmod@sign& (0+255),b
  9766  005576                     l9471:
  9767                           
  9768                           ; BSR set to: 1
  9769  005576  0101               	movlb	1	; () banked
  9770  005578  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9771  00557A  D005               	goto	l9475
  9772                           
  9773                           ; BSR set to: 1
  9774  00557C  0101               	movlb	1	; () banked
  9775  00557E  6D02               	negf	___awmod@divisor& (0+255),b
  9776  005580  1F03               	comf	(___awmod@divisor+1)& (0+255),f,b
  9777  005582  B0D8               	btfsc	status,0,c
  9778  005584  2B03               	incf	(___awmod@divisor+1)& (0+255),f,b
  9779  005586                     l9475:
  9780                           
  9781                           ; BSR set to: 1
  9782  005586  0101               	movlb	1	; () banked
  9783  005588  5102               	movf	___awmod@divisor& (0+255),w,b
  9784  00558A  0101               	movlb	1	; () banked
  9785  00558C  1103               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9786  00558E  B4D8               	btfsc	status,2,c
  9787  005590  D026               	goto	l9491
  9788                           
  9789                           ; BSR set to: 1
  9790  005592  0E01               	movlw	1
  9791  005594  0101               	movlb	1	; () banked
  9792  005596  6F04               	movwf	___awmod@counter& (0+255),b
  9793  005598  D006               	goto	l9481
  9794  00559A                     l9479:
  9795                           
  9796                           ; BSR set to: 1
  9797  00559A  0101               	movlb	1	; () banked
  9798  00559C  90D8               	bcf	status,0,c
  9799  00559E  3702               	rlcf	___awmod@divisor& (0+255),f,b
  9800  0055A0  3703               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9801  0055A2  0101               	movlb	1	; () banked
  9802  0055A4  2B04               	incf	___awmod@counter& (0+255),f,b
  9803  0055A6                     l9481:
  9804                           
  9805                           ; BSR set to: 1
  9806  0055A6  0101               	movlb	1	; () banked
  9807  0055A8  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9808  0055AA  D7F7               	goto	l9479
  9809  0055AC                     l9483:
  9810                           
  9811                           ; BSR set to: 1
  9812  0055AC  0101               	movlb	1	; () banked
  9813  0055AE  5102               	movf	___awmod@divisor& (0+255),w,b
  9814  0055B0  0101               	movlb	1	; () banked
  9815  0055B2  5D00               	subwf	___awmod@dividend& (0+255),w,b
  9816  0055B4  0101               	movlb	1	; () banked
  9817  0055B6  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
  9818  0055B8  0101               	movlb	1	; () banked
  9819  0055BA  5901               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9820  0055BC  A0D8               	btfss	status,0,c
  9821  0055BE  D008               	goto	l9487
  9822                           
  9823                           ; BSR set to: 1
  9824  0055C0  0101               	movlb	1	; () banked
  9825  0055C2  5102               	movf	___awmod@divisor& (0+255),w,b
  9826  0055C4  0101               	movlb	1	; () banked
  9827  0055C6  5F00               	subwf	___awmod@dividend& (0+255),f,b
  9828  0055C8  0101               	movlb	1	; () banked
  9829  0055CA  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
  9830  0055CC  0101               	movlb	1	; () banked
  9831  0055CE  5B01               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9832  0055D0                     l9487:
  9833                           
  9834                           ; BSR set to: 1
  9835  0055D0  0101               	movlb	1	; () banked
  9836  0055D2  90D8               	bcf	status,0,c
  9837  0055D4  3303               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9838  0055D6  3302               	rrcf	___awmod@divisor& (0+255),f,b
  9839                           
  9840                           ; BSR set to: 1
  9841  0055D8  0101               	movlb	1	; () banked
  9842  0055DA  2F04               	decfsz	___awmod@counter& (0+255),f,b
  9843  0055DC  D7E7               	goto	l9483
  9844  0055DE                     l9491:
  9845                           
  9846                           ; BSR set to: 1
  9847  0055DE  0101               	movlb	1	; () banked
  9848  0055E0  5105               	movf	___awmod@sign& (0+255),w,b
  9849  0055E2  0101               	movlb	1	; () banked
  9850  0055E4  B4D8               	btfsc	status,2,c
  9851  0055E6  D005               	goto	l9495
  9852                           
  9853                           ; BSR set to: 1
  9854  0055E8  0101               	movlb	1	; () banked
  9855  0055EA  6D00               	negf	___awmod@dividend& (0+255),b
  9856  0055EC  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
  9857  0055EE  B0D8               	btfsc	status,0,c
  9858  0055F0  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
  9859  0055F2                     l9495:
  9860                           
  9861                           ; BSR set to: 1
  9862  0055F2  C100  F100         	movff	___awmod@dividend,?___awmod
  9863  0055F6  C101  F101         	movff	___awmod@dividend+1,?___awmod+1
  9864  0055FA  0012               	return	
  9865  0055FC                     __end_of___awmod:
  9866                           	opt stack 0
  9867                           tblptru	equ	0xFF8
  9868                           tblptrh	equ	0xFF7
  9869                           tblptrl	equ	0xFF6
  9870                           tablat	equ	0xFF5
  9871                           prodh	equ	0xFF4
  9872                           prodl	equ	0xFF3
  9873                           intcon	equ	0xFF2
  9874                           postinc0	equ	0xFEE
  9875                           wreg	equ	0xFE8
  9876                           postdec1	equ	0xFE5
  9877                           fsr1l	equ	0xFE1
  9878                           indf2	equ	0xFDF
  9879                           postinc2	equ	0xFDE
  9880                           postdec2	equ	0xFDD
  9881                           fsr2h	equ	0xFDA
  9882                           fsr2l	equ	0xFD9
  9883                           status	equ	0xFD8
  9884                           
  9885 ;; *************** function ___awdiv *****************
  9886 ;; Defined at:
  9887 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  9888 ;; Parameters:    Size  Location     Type
  9889 ;;  dividend        2    6[BANK1 ] int 
  9890 ;;  divisor         2    8[BANK1 ] int 
  9891 ;; Auto vars:     Size  Location     Type
  9892 ;;  quotient        2   12[BANK1 ] int 
  9893 ;;  sign            1   11[BANK1 ] unsigned char 
  9894 ;;  counter         1   10[BANK1 ] unsigned char 
  9895 ;; Return value:  Size  Location     Type
  9896 ;;                  2    6[BANK1 ] int 
  9897 ;; Registers used:
  9898 ;;		wreg, status,2, status,0
  9899 ;; Tracked objects:
  9900 ;;		On entry : 0/0
  9901 ;;		On exit  : 0/0
  9902 ;;		Unchanged: 0/0
  9903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9904 ;;      Params:         0       0       4       0       0       0       0
  9905 ;;      Locals:         0       0       4       0       0       0       0
  9906 ;;      Temps:          0       0       0       0       0       0       0
  9907 ;;      Totals:         0       0       8       0       0       0       0
  9908 ;;Total ram usage:        8 bytes
  9909 ;; Hardware stack levels used:    1
  9910 ;; Hardware stack levels required when called:   12
  9911 ;; This function calls:
  9912 ;;		Nothing
  9913 ;; This function is called by:
  9914 ;;		_fround
  9915 ;;		_scale
  9916 ;;		_printf
  9917 ;; This function uses a non-reentrant model
  9918 ;;
  9919                           
  9920                           	psect	text35
  9921  004FBC                     __ptext35:
  9922                           	opt stack 0
  9923  004FBC                     ___awdiv:
  9924                           	opt stack 14
  9925                           
  9926                           ; BSR set to: 1
  9927                           ;incstack = 0
  9928  004FBC  0E00               	movlw	0
  9929  004FBE  0101               	movlb	1	; () banked
  9930  004FC0  6F0B               	movwf	___awdiv@sign& (0+255),b
  9931                           
  9932                           ; BSR set to: 1
  9933  004FC2  0101               	movlb	1	; () banked
  9934  004FC4  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9935  004FC6  D008               	goto	l9427
  9936                           
  9937                           ; BSR set to: 1
  9938  004FC8  0101               	movlb	1	; () banked
  9939  004FCA  6D08               	negf	___awdiv@divisor& (0+255),b
  9940  004FCC  1F09               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9941  004FCE  B0D8               	btfsc	status,0,c
  9942  004FD0  2B09               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9943                           
  9944                           ; BSR set to: 1
  9945  004FD2  0E01               	movlw	1
  9946  004FD4  0101               	movlb	1	; () banked
  9947  004FD6  6F0B               	movwf	___awdiv@sign& (0+255),b
  9948  004FD8                     l9427:
  9949                           
  9950                           ; BSR set to: 1
  9951  004FD8  0101               	movlb	1	; () banked
  9952  004FDA  AF07               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9953  004FDC  D008               	goto	l9433
  9954                           
  9955                           ; BSR set to: 1
  9956  004FDE  0101               	movlb	1	; () banked
  9957  004FE0  6D06               	negf	___awdiv@dividend& (0+255),b
  9958  004FE2  1F07               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9959  004FE4  B0D8               	btfsc	status,0,c
  9960  004FE6  2B07               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9961                           
  9962                           ; BSR set to: 1
  9963  004FE8  0E01               	movlw	1
  9964  004FEA  0101               	movlb	1	; () banked
  9965  004FEC  1B0B               	xorwf	___awdiv@sign& (0+255),f,b
  9966  004FEE                     l9433:
  9967                           
  9968                           ; BSR set to: 1
  9969  004FEE  0E00               	movlw	0
  9970  004FF0  0101               	movlb	1	; () banked
  9971  004FF2  6F0D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9972  004FF4  0E00               	movlw	0
  9973  004FF6  6F0C               	movwf	___awdiv@quotient& (0+255),b
  9974                           
  9975                           ; BSR set to: 1
  9976  004FF8  0101               	movlb	1	; () banked
  9977  004FFA  5108               	movf	___awdiv@divisor& (0+255),w,b
  9978  004FFC  0101               	movlb	1	; () banked
  9979  004FFE  1109               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9980  005000  B4D8               	btfsc	status,2,c
  9981  005002  D02C               	goto	l9455
  9982                           
  9983                           ; BSR set to: 1
  9984  005004  0E01               	movlw	1
  9985  005006  0101               	movlb	1	; () banked
  9986  005008  6F0A               	movwf	___awdiv@counter& (0+255),b
  9987  00500A  D006               	goto	l9441
  9988  00500C                     l9439:
  9989                           
  9990                           ; BSR set to: 1
  9991  00500C  0101               	movlb	1	; () banked
  9992  00500E  90D8               	bcf	status,0,c
  9993  005010  3708               	rlcf	___awdiv@divisor& (0+255),f,b
  9994  005012  3709               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9995  005014  0101               	movlb	1	; () banked
  9996  005016  2B0A               	incf	___awdiv@counter& (0+255),f,b
  9997  005018                     l9441:
  9998                           
  9999                           ; BSR set to: 1
 10000  005018  0101               	movlb	1	; () banked
 10001  00501A  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10002  00501C  D7F7               	goto	l9439
 10003  00501E                     l9443:
 10004                           
 10005                           ; BSR set to: 1
 10006  00501E  0101               	movlb	1	; () banked
 10007  005020  90D8               	bcf	status,0,c
 10008  005022  370C               	rlcf	___awdiv@quotient& (0+255),f,b
 10009  005024  370D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10010                           
 10011                           ; BSR set to: 1
 10012  005026  0101               	movlb	1	; () banked
 10013  005028  5108               	movf	___awdiv@divisor& (0+255),w,b
 10014  00502A  0101               	movlb	1	; () banked
 10015  00502C  5D06               	subwf	___awdiv@dividend& (0+255),w,b
 10016  00502E  0101               	movlb	1	; () banked
 10017  005030  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10018  005032  0101               	movlb	1	; () banked
 10019  005034  5907               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10020  005036  A0D8               	btfss	status,0,c
 10021  005038  D00A               	goto	l9451
 10022                           
 10023                           ; BSR set to: 1
 10024  00503A  0101               	movlb	1	; () banked
 10025  00503C  5108               	movf	___awdiv@divisor& (0+255),w,b
 10026  00503E  0101               	movlb	1	; () banked
 10027  005040  5F06               	subwf	___awdiv@dividend& (0+255),f,b
 10028  005042  0101               	movlb	1	; () banked
 10029  005044  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10030  005046  0101               	movlb	1	; () banked
 10031  005048  5B07               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10032                           
 10033                           ; BSR set to: 1
 10034  00504A  0101               	movlb	1	; () banked
 10035  00504C  810C               	bsf	___awdiv@quotient& (0+255),0,b
 10036  00504E                     l9451:
 10037                           
 10038                           ; BSR set to: 1
 10039  00504E  0101               	movlb	1	; () banked
 10040  005050  90D8               	bcf	status,0,c
 10041  005052  3309               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10042  005054  3308               	rrcf	___awdiv@divisor& (0+255),f,b
 10043                           
 10044                           ; BSR set to: 1
 10045  005056  0101               	movlb	1	; () banked
 10046  005058  2F0A               	decfsz	___awdiv@counter& (0+255),f,b
 10047  00505A  D7E1               	goto	l9443
 10048  00505C                     l9455:
 10049                           
 10050                           ; BSR set to: 1
 10051  00505C  0101               	movlb	1	; () banked
 10052  00505E  510B               	movf	___awdiv@sign& (0+255),w,b
 10053  005060  0101               	movlb	1	; () banked
 10054  005062  B4D8               	btfsc	status,2,c
 10055  005064  D005               	goto	l9459
 10056                           
 10057                           ; BSR set to: 1
 10058  005066  0101               	movlb	1	; () banked
 10059  005068  6D0C               	negf	___awdiv@quotient& (0+255),b
 10060  00506A  1F0D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10061  00506C  B0D8               	btfsc	status,0,c
 10062  00506E  2B0D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10063  005070                     l9459:
 10064                           
 10065                           ; BSR set to: 1
 10066  005070  C10C  F106         	movff	___awdiv@quotient,?___awdiv
 10067  005074  C10D  F107         	movff	___awdiv@quotient+1,?___awdiv+1
 10068  005078  0012               	return	
 10069  00507A                     __end_of___awdiv:
 10070                           	opt stack 0
 10071                           tblptru	equ	0xFF8
 10072                           tblptrh	equ	0xFF7
 10073                           tblptrl	equ	0xFF6
 10074                           tablat	equ	0xFF5
 10075                           prodh	equ	0xFF4
 10076                           prodl	equ	0xFF3
 10077                           intcon	equ	0xFF2
 10078                           postinc0	equ	0xFEE
 10079                           wreg	equ	0xFE8
 10080                           postdec1	equ	0xFE5
 10081                           fsr1l	equ	0xFE1
 10082                           indf2	equ	0xFDF
 10083                           postinc2	equ	0xFDE
 10084                           postdec2	equ	0xFDD
 10085                           fsr2h	equ	0xFDA
 10086                           fsr2l	equ	0xFD9
 10087                           status	equ	0xFD8
 10088                           
 10089 ;; *************** function __tdiv_to_l_ *****************
 10090 ;; Defined at:
 10091 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
 10092 ;; Parameters:    Size  Location     Type
 10093 ;;  f1              3    0[BANK1 ] float 
 10094 ;;  f2              3    3[BANK1 ] float 
 10095 ;; Auto vars:     Size  Location     Type
 10096 ;;  quot            4    9[BANK1 ] unsigned long 
 10097 ;;  exp1            1   14[BANK1 ] unsigned char 
 10098 ;;  cntr            1   13[BANK1 ] unsigned char 
 10099 ;; Return value:  Size  Location     Type
 10100 ;;                  4    0[BANK1 ] unsigned long 
 10101 ;; Registers used:
 10102 ;;		wreg, status,2, status,0
 10103 ;; Tracked objects:
 10104 ;;		On entry : 0/0
 10105 ;;		On exit  : 0/0
 10106 ;;		Unchanged: 0/0
 10107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10108 ;;      Params:         0       0       6       0       0       0       0
 10109 ;;      Locals:         0       0       6       0       0       0       0
 10110 ;;      Temps:          0       0       3       0       0       0       0
 10111 ;;      Totals:         0       0      15       0       0       0       0
 10112 ;;Total ram usage:       15 bytes
 10113 ;; Hardware stack levels used:    1
 10114 ;; Hardware stack levels required when called:   12
 10115 ;; This function calls:
 10116 ;;		Nothing
 10117 ;; This function is called by:
 10118 ;;		_printf
 10119 ;; This function uses a non-reentrant model
 10120 ;;
 10121                           
 10122                           	psect	text36
 10123  002F7E                     __ptext36:
 10124                           	opt stack 0
 10125  002F7E                     __tdiv_to_l_:
 10126                           	opt stack 15
 10127                           
 10128                           ; BSR set to: 1
 10129                           ;incstack = 0
 10130  002F7E  C102  F106         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 10131  002F82  0101               	movlb	1	; () banked
 10132  002F84  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10133  002F86  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10134  002F88  0101               	movlb	1	; () banked
 10135  002F8A  3501               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10136  002F8C  0101               	movlb	1	; () banked
 10137  002F8E  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10138  002F90  E301               	bnc	u14101
 10139  002F92  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10140  002F94                     u14101:
 10141  002F94  0101               	movlb	1	; () banked
 10142  002F96  5106               	movf	??__tdiv_to_l_& (0+255),w,b
 10143  002F98  0101               	movlb	1	; () banked
 10144  002F9A  6F0E               	movwf	__tdiv_to_l_@exp1& (0+255),b
 10145  002F9C  0101               	movlb	1	; () banked
 10146  002F9E  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10147  002FA0  A4D8               	btfss	status,2,c
 10148  002FA2  D00A               	goto	l9595
 10149                           
 10150                           ; BSR set to: 1
 10151  002FA4  0E00               	movlw	0
 10152  002FA6  0101               	movlb	1	; () banked
 10153  002FA8  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10154  002FAA  0E00               	movlw	0
 10155  002FAC  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10156  002FAE  0E00               	movlw	0
 10157  002FB0  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10158  002FB2  0E00               	movlw	0
 10159  002FB4  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10160                           
 10161                           ; BSR set to: 1
 10162  002FB6  0012               	return	
 10163  002FB8                     l9595:
 10164                           
 10165                           ; BSR set to: 1
 10166  002FB8  C105  F106         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 10167  002FBC  0101               	movlb	1	; () banked
 10168  002FBE  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10169  002FC0  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10170  002FC2  0101               	movlb	1	; () banked
 10171  002FC4  3504               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10172  002FC6  0101               	movlb	1	; () banked
 10173  002FC8  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10174  002FCA  E301               	bnc	u14121
 10175  002FCC  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10176  002FCE                     u14121:
 10177  002FCE  0101               	movlb	1	; () banked
 10178  002FD0  5106               	movf	??__tdiv_to_l_& (0+255),w,b
 10179  002FD2  0101               	movlb	1	; () banked
 10180  002FD4  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10181  002FD6  0101               	movlb	1	; () banked
 10182  002FD8  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 10183  002FDA  A4D8               	btfss	status,2,c
 10184  002FDC  D00A               	goto	l9601
 10185                           
 10186                           ; BSR set to: 1
 10187  002FDE  0E00               	movlw	0
 10188  002FE0  0101               	movlb	1	; () banked
 10189  002FE2  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10190  002FE4  0E00               	movlw	0
 10191  002FE6  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10192  002FE8  0E00               	movlw	0
 10193  002FEA  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10194  002FEC  0E00               	movlw	0
 10195  002FEE  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10196                           
 10197                           ; BSR set to: 1
 10198  002FF0  0012               	return	
 10199  002FF2                     l9601:
 10200                           
 10201                           ; BSR set to: 1
 10202  002FF2  0101               	movlb	1	; () banked
 10203  002FF4  8F01               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
 10204                           
 10205                           ; BSR set to: 1
 10206  002FF6  0EFF               	movlw	255
 10207  002FF8  0101               	movlb	1	; () banked
 10208  002FFA  1700               	andwf	__tdiv_to_l_@f1& (0+255),f,b
 10209  002FFC  0EFF               	movlw	255
 10210  002FFE  0101               	movlb	1	; () banked
 10211  003000  1701               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10212  003002  0E00               	movlw	0
 10213  003004  0101               	movlb	1	; () banked
 10214  003006  1702               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10215  003008  0101               	movlb	1	; () banked
 10216  00300A  8F04               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
 10217                           
 10218                           ; BSR set to: 1
 10219  00300C  0EFF               	movlw	255
 10220  00300E  0101               	movlb	1	; () banked
 10221  003010  1703               	andwf	__tdiv_to_l_@f2& (0+255),f,b
 10222  003012  0EFF               	movlw	255
 10223  003014  0101               	movlb	1	; () banked
 10224  003016  1704               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
 10225  003018  0E00               	movlw	0
 10226  00301A  0101               	movlb	1	; () banked
 10227  00301C  1705               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
 10228                           
 10229                           ; BSR set to: 1
 10230  00301E  0E00               	movlw	0
 10231  003020  0101               	movlb	1	; () banked
 10232  003022  6F09               	movwf	__tdiv_to_l_@quot& (0+255),b
 10233  003024  0E00               	movlw	0
 10234  003026  6F0A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
 10235  003028  0E00               	movlw	0
 10236  00302A  6F0B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
 10237  00302C  0E00               	movlw	0
 10238  00302E  6F0C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
 10239                           
 10240                           ; BSR set to: 1
 10241  003030  0E7F               	movlw	127
 10242  003032  0101               	movlb	1	; () banked
 10243  003034  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10244                           
 10245                           ; BSR set to: 1
 10246  003036  0101               	movlb	1	; () banked
 10247  003038  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 10248  00303A  0F98               	addlw	152
 10249  00303C  0101               	movlb	1	; () banked
 10250  00303E  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10251                           
 10252                           ; BSR set to: 1
 10253  003040  0E18               	movlw	24
 10254  003042  0101               	movlb	1	; () banked
 10255  003044  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10256  003046                     l1349:
 10257                           
 10258                           ; BSR set to: 1
 10259  003046  0101               	movlb	1	; () banked
 10260  003048  90D8               	bcf	status,0,c
 10261  00304A  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 10262  00304C  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10263  00304E  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10264  003050  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10265                           
 10266                           ; BSR set to: 1
 10267  003052  0101               	movlb	1	; () banked
 10268  003054  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10269  003056  0101               	movlb	1	; () banked
 10270  003058  5D00               	subwf	__tdiv_to_l_@f1& (0+255),w,b
 10271  00305A  0101               	movlb	1	; () banked
 10272  00305C  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10273  00305E  0101               	movlb	1	; () banked
 10274  003060  5901               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10275  003062  0101               	movlb	1	; () banked
 10276  003064  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10277  003066  0101               	movlb	1	; () banked
 10278  003068  5902               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
 10279  00306A  A0D8               	btfss	status,0,c
 10280  00306C  D00E               	goto	l1350
 10281                           
 10282                           ; BSR set to: 1
 10283  00306E  0101               	movlb	1	; () banked
 10284  003070  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10285  003072  0101               	movlb	1	; () banked
 10286  003074  5F00               	subwf	__tdiv_to_l_@f1& (0+255),f,b
 10287  003076  0101               	movlb	1	; () banked
 10288  003078  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10289  00307A  0101               	movlb	1	; () banked
 10290  00307C  5B01               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10291  00307E  0101               	movlb	1	; () banked
 10292  003080  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10293  003082  0101               	movlb	1	; () banked
 10294  003084  5B02               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10295                           
 10296                           ; BSR set to: 1
 10297  003086  0101               	movlb	1	; () banked
 10298  003088  8109               	bsf	__tdiv_to_l_@quot& (0+255),0,b
 10299  00308A                     l1350:
 10300                           
 10301                           ; BSR set to: 1
 10302  00308A  0101               	movlb	1	; () banked
 10303  00308C  90D8               	bcf	status,0,c
 10304  00308E  3700               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
 10305  003090  3701               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10306  003092  3702               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10307                           
 10308                           ; BSR set to: 1
 10309  003094  0101               	movlb	1	; () banked
 10310  003096  2F0D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
 10311  003098  D7D6               	goto	l1349
 10312                           
 10313                           ; BSR set to: 1
 10314                           
 10315                           ; BSR set to: 1
 10316  00309A  0101               	movlb	1	; () banked
 10317  00309C  AF0E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
 10318  00309E  D01A               	goto	l9635
 10319                           
 10320                           ; BSR set to: 1
 10321  0030A0  0101               	movlb	1	; () banked
 10322  0030A2  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10323  0030A4  0A80               	xorlw	128
 10324  0030A6  0F97               	addlw	151
 10325  0030A8  B0D8               	btfsc	status,0,c
 10326  0030AA  D00A               	goto	l9631
 10327                           
 10328                           ; BSR set to: 1
 10329  0030AC  0E00               	movlw	0
 10330  0030AE  0101               	movlb	1	; () banked
 10331  0030B0  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10332  0030B2  0E00               	movlw	0
 10333  0030B4  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10334  0030B6  0E00               	movlw	0
 10335  0030B8  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10336  0030BA  0E00               	movlw	0
 10337  0030BC  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10338                           
 10339                           ; BSR set to: 1
 10340  0030BE  0012               	return	
 10341  0030C0                     l9631:
 10342                           
 10343                           ; BSR set to: 1
 10344  0030C0  0101               	movlb	1	; () banked
 10345  0030C2  90D8               	bcf	status,0,c
 10346  0030C4  330C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10347  0030C6  330B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10348  0030C8  330A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10349  0030CA  3309               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
 10350                           
 10351                           ; BSR set to: 1
 10352  0030CC  0101               	movlb	1	; () banked
 10353  0030CE  3F0E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
 10354  0030D0  D7F7               	goto	l9631
 10355                           
 10356                           ; BSR set to: 1
 10357  0030D2  D01B               	goto	l1356
 10358  0030D4                     l9635:
 10359                           
 10360                           ; BSR set to: 1
 10361  0030D4  0E17               	movlw	23
 10362  0030D6  0101               	movlb	1	; () banked
 10363  0030D8  650E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
 10364  0030DA  D012               	goto	l9643
 10365                           
 10366                           ; BSR set to: 1
 10367  0030DC  0E00               	movlw	0
 10368  0030DE  0101               	movlb	1	; () banked
 10369  0030E0  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10370  0030E2  0E00               	movlw	0
 10371  0030E4  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10372  0030E6  0E00               	movlw	0
 10373  0030E8  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10374  0030EA  0E00               	movlw	0
 10375  0030EC  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10376                           
 10377                           ; BSR set to: 1
 10378  0030EE  0012               	return	
 10379  0030F0                     l9641:
 10380                           
 10381                           ; BSR set to: 1
 10382  0030F0  0101               	movlb	1	; () banked
 10383  0030F2  90D8               	bcf	status,0,c
 10384  0030F4  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 10385  0030F6  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10386  0030F8  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10387  0030FA  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10388  0030FC  0101               	movlb	1	; () banked
 10389  0030FE  070E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
 10390  003100                     l9643:
 10391                           
 10392                           ; BSR set to: 1
 10393  003100  0101               	movlb	1	; () banked
 10394  003102  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10395  003104  0101               	movlb	1	; () banked
 10396  003106  A4D8               	btfss	status,2,c
 10397  003108  D7F3               	goto	l9641
 10398  00310A                     l1356:
 10399                           
 10400                           ; BSR set to: 1
 10401  00310A  C109  F100         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 10402  00310E  C10A  F101         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 10403  003112  C10B  F102         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 10404  003116  C10C  F103         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 10405                           
 10406                           ; BSR set to: 1
 10407  00311A  0012               	return		;funcret
 10408  00311C                     __end_of__tdiv_to_l_:
 10409                           	opt stack 0
 10410                           tblptru	equ	0xFF8
 10411                           tblptrh	equ	0xFF7
 10412                           tblptrl	equ	0xFF6
 10413                           tablat	equ	0xFF5
 10414                           prodh	equ	0xFF4
 10415                           prodl	equ	0xFF3
 10416                           intcon	equ	0xFF2
 10417                           postinc0	equ	0xFEE
 10418                           wreg	equ	0xFE8
 10419                           postdec1	equ	0xFE5
 10420                           fsr1l	equ	0xFE1
 10421                           indf2	equ	0xFDF
 10422                           postinc2	equ	0xFDE
 10423                           postdec2	equ	0xFDD
 10424                           fsr2h	equ	0xFDA
 10425                           fsr2l	equ	0xFD9
 10426                           status	equ	0xFD8
 10427                           
 10428 ;; *************** function __div_to_l_ *****************
 10429 ;; Defined at:
 10430 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
 10431 ;; Parameters:    Size  Location     Type
 10432 ;;  f1              3    0[BANK1 ] unsigned long 
 10433 ;;  f2              3    3[BANK1 ] unsigned long 
 10434 ;; Auto vars:     Size  Location     Type
 10435 ;;  quot            4    6[BANK1 ] unsigned long 
 10436 ;;  exp1            1   11[BANK1 ] unsigned char 
 10437 ;;  cntr            1   10[BANK1 ] unsigned char 
 10438 ;; Return value:  Size  Location     Type
 10439 ;;                  4    0[BANK1 ] unsigned long 
 10440 ;; Registers used:
 10441 ;;		wreg, status,2, status,0
 10442 ;; Tracked objects:
 10443 ;;		On entry : 0/0
 10444 ;;		On exit  : 0/0
 10445 ;;		Unchanged: 0/0
 10446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10447 ;;      Params:         0       0       6       0       0       0       0
 10448 ;;      Locals:         0       0       6       0       0       0       0
 10449 ;;      Temps:          0       0       0       0       0       0       0
 10450 ;;      Totals:         0       0      12       0       0       0       0
 10451 ;;Total ram usage:       12 bytes
 10452 ;; Hardware stack levels used:    1
 10453 ;; Hardware stack levels required when called:   12
 10454 ;; This function calls:
 10455 ;;		Nothing
 10456 ;; This function is called by:
 10457 ;;		_printf
 10458 ;; This function uses a non-reentrant model
 10459 ;;
 10460                           
 10461                           	psect	text37
 10462  00311C                     __ptext37:
 10463                           	opt stack 0
 10464  00311C                     __div_to_l_:
 10465                           	opt stack 15
 10466                           
 10467                           ; BSR set to: 1
 10468                           ;incstack = 0
 10469  00311C  0101               	movlb	1	; () banked
 10470  00311E  3502               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
 10471  003120  3503               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
 10472  003122  0101               	movlb	1	; () banked
 10473  003124  6F0B               	movwf	__div_to_l_@exp1& (0+255),b
 10474  003126  0101               	movlb	1	; () banked
 10475  003128  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10476  00312A  A4D8               	btfss	status,2,c
 10477  00312C  D00A               	goto	l9651
 10478                           
 10479                           ; BSR set to: 1
 10480  00312E  0E00               	movlw	0
 10481  003130  0101               	movlb	1	; () banked
 10482  003132  6F00               	movwf	?__div_to_l_& (0+255),b
 10483  003134  0E00               	movlw	0
 10484  003136  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10485  003138  0E00               	movlw	0
 10486  00313A  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10487  00313C  0E00               	movlw	0
 10488  00313E  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10489                           
 10490                           ; BSR set to: 1
 10491  003140  0012               	return	
 10492  003142                     l9651:
 10493                           
 10494                           ; BSR set to: 1
 10495  003142  0101               	movlb	1	; () banked
 10496  003144  3505               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
 10497  003146  3506               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
 10498  003148  0101               	movlb	1	; () banked
 10499  00314A  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
 10500  00314C  0101               	movlb	1	; () banked
 10501  00314E  510A               	movf	__div_to_l_@cntr& (0+255),w,b
 10502  003150  A4D8               	btfss	status,2,c
 10503  003152  D00A               	goto	l9657
 10504                           
 10505                           ; BSR set to: 1
 10506  003154  0E00               	movlw	0
 10507  003156  0101               	movlb	1	; () banked
 10508  003158  6F00               	movwf	?__div_to_l_& (0+255),b
 10509  00315A  0E00               	movlw	0
 10510  00315C  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10511  00315E  0E00               	movlw	0
 10512  003160  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10513  003162  0E00               	movlw	0
 10514  003164  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10515                           
 10516                           ; BSR set to: 1
 10517  003166  0012               	return	
 10518  003168                     l9657:
 10519                           
 10520                           ; BSR set to: 1
 10521  003168  0101               	movlb	1	; () banked
 10522  00316A  8F02               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
 10523                           
 10524                           ; BSR set to: 1
 10525  00316C  0EFF               	movlw	255
 10526  00316E  0101               	movlb	1	; () banked
 10527  003170  1700               	andwf	__div_to_l_@f1& (0+255),f,b
 10528  003172  0EFF               	movlw	255
 10529  003174  1701               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
 10530  003176  0EFF               	movlw	255
 10531  003178  1702               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
 10532  00317A  0E00               	movlw	0
 10533  00317C  1703               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
 10534                           
 10535                           ; BSR set to: 1
 10536  00317E  0101               	movlb	1	; () banked
 10537  003180  8F05               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
 10538  003182  0EFF               	movlw	255
 10539  003184  0101               	movlb	1	; () banked
 10540  003186  1703               	andwf	__div_to_l_@f2& (0+255),f,b
 10541  003188  0EFF               	movlw	255
 10542  00318A  1704               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
 10543  00318C  0EFF               	movlw	255
 10544  00318E  1705               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
 10545  003190  0E00               	movlw	0
 10546  003192  1706               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
 10547                           
 10548                           ; BSR set to: 1
 10549  003194  0E00               	movlw	0
 10550  003196  0101               	movlb	1	; () banked
 10551  003198  6F06               	movwf	__div_to_l_@quot& (0+255),b
 10552  00319A  0E00               	movlw	0
 10553  00319C  6F07               	movwf	(__div_to_l_@quot+1)& (0+255),b
 10554  00319E  0E00               	movlw	0
 10555  0031A0  6F08               	movwf	(__div_to_l_@quot+2)& (0+255),b
 10556  0031A2  0E00               	movlw	0
 10557  0031A4  6F09               	movwf	(__div_to_l_@quot+3)& (0+255),b
 10558                           
 10559                           ; BSR set to: 1
 10560  0031A6  0E7F               	movlw	127
 10561  0031A8  0101               	movlb	1	; () banked
 10562  0031AA  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
 10563                           
 10564                           ; BSR set to: 1
 10565  0031AC  0101               	movlb	1	; () banked
 10566  0031AE  510A               	movf	__div_to_l_@cntr& (0+255),w,b
 10567  0031B0  0FA0               	addlw	160
 10568  0031B2  0101               	movlb	1	; () banked
 10569  0031B4  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
 10570                           
 10571                           ; BSR set to: 1
 10572  0031B6  0E20               	movlw	32
 10573  0031B8  0101               	movlb	1	; () banked
 10574  0031BA  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
 10575  0031BC                     l9671:
 10576                           
 10577                           ; BSR set to: 1
 10578  0031BC  0101               	movlb	1	; () banked
 10579  0031BE  90D8               	bcf	status,0,c
 10580  0031C0  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
 10581  0031C2  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 10582  0031C4  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 10583  0031C6  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 10584                           
 10585                           ; BSR set to: 1
 10586  0031C8  0101               	movlb	1	; () banked
 10587  0031CA  5103               	movf	__div_to_l_@f2& (0+255),w,b
 10588  0031CC  0101               	movlb	1	; () banked
 10589  0031CE  5D00               	subwf	__div_to_l_@f1& (0+255),w,b
 10590  0031D0  0101               	movlb	1	; () banked
 10591  0031D2  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 10592  0031D4  0101               	movlb	1	; () banked
 10593  0031D6  5901               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
 10594  0031D8  0101               	movlb	1	; () banked
 10595  0031DA  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 10596  0031DC  0101               	movlb	1	; () banked
 10597  0031DE  5902               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
 10598  0031E0  0101               	movlb	1	; () banked
 10599  0031E2  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 10600  0031E4  0101               	movlb	1	; () banked
 10601  0031E6  5903               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
 10602  0031E8  A0D8               	btfss	status,0,c
 10603  0031EA  D012               	goto	l9679
 10604                           
 10605                           ; BSR set to: 1
 10606  0031EC  0101               	movlb	1	; () banked
 10607  0031EE  5103               	movf	__div_to_l_@f2& (0+255),w,b
 10608  0031F0  0101               	movlb	1	; () banked
 10609  0031F2  5F00               	subwf	__div_to_l_@f1& (0+255),f,b
 10610  0031F4  0101               	movlb	1	; () banked
 10611  0031F6  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 10612  0031F8  0101               	movlb	1	; () banked
 10613  0031FA  5B01               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
 10614  0031FC  0101               	movlb	1	; () banked
 10615  0031FE  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 10616  003200  0101               	movlb	1	; () banked
 10617  003202  5B02               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
 10618  003204  0101               	movlb	1	; () banked
 10619  003206  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 10620  003208  0101               	movlb	1	; () banked
 10621  00320A  5B03               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
 10622                           
 10623                           ; BSR set to: 1
 10624  00320C  0101               	movlb	1	; () banked
 10625  00320E  8106               	bsf	__div_to_l_@quot& (0+255),0,b
 10626  003210                     l9679:
 10627                           
 10628                           ; BSR set to: 1
 10629  003210  0101               	movlb	1	; () banked
 10630  003212  90D8               	bcf	status,0,c
 10631  003214  3700               	rlcf	__div_to_l_@f1& (0+255),f,b
 10632  003216  3701               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
 10633  003218  3702               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
 10634  00321A  3703               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
 10635                           
 10636                           ; BSR set to: 1
 10637  00321C  0101               	movlb	1	; () banked
 10638  00321E  2F0A               	decfsz	__div_to_l_@cntr& (0+255),f,b
 10639  003220  D7CD               	goto	l9671
 10640                           
 10641                           ; BSR set to: 1
 10642                           
 10643                           ; BSR set to: 1
 10644  003222  0101               	movlb	1	; () banked
 10645  003224  AF0B               	btfss	__div_to_l_@exp1& (0+255),7,b
 10646  003226  D01A               	goto	l9695
 10647                           
 10648                           ; BSR set to: 1
 10649  003228  0101               	movlb	1	; () banked
 10650  00322A  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10651  00322C  0A80               	xorlw	128
 10652  00322E  0F9F               	addlw	159
 10653  003230  B0D8               	btfsc	status,0,c
 10654  003232  D00A               	goto	l9691
 10655                           
 10656                           ; BSR set to: 1
 10657  003234  0E00               	movlw	0
 10658  003236  0101               	movlb	1	; () banked
 10659  003238  6F00               	movwf	?__div_to_l_& (0+255),b
 10660  00323A  0E00               	movlw	0
 10661  00323C  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10662  00323E  0E00               	movlw	0
 10663  003240  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10664  003242  0E00               	movlw	0
 10665  003244  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10666                           
 10667                           ; BSR set to: 1
 10668  003246  0012               	return	
 10669  003248                     l9691:
 10670                           
 10671                           ; BSR set to: 1
 10672  003248  0101               	movlb	1	; () banked
 10673  00324A  90D8               	bcf	status,0,c
 10674  00324C  3309               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
 10675  00324E  3308               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
 10676  003250  3307               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
 10677  003252  3306               	rrcf	__div_to_l_@quot& (0+255),f,b
 10678                           
 10679                           ; BSR set to: 1
 10680  003254  0101               	movlb	1	; () banked
 10681  003256  3F0B               	incfsz	__div_to_l_@exp1& (0+255),f,b
 10682  003258  D7F7               	goto	l9691
 10683                           
 10684                           ; BSR set to: 1
 10685  00325A  D01B               	goto	l1252
 10686  00325C                     l9695:
 10687                           
 10688                           ; BSR set to: 1
 10689  00325C  0E1F               	movlw	31
 10690  00325E  0101               	movlb	1	; () banked
 10691  003260  650B               	cpfsgt	__div_to_l_@exp1& (0+255),b
 10692  003262  D012               	goto	l9703
 10693                           
 10694                           ; BSR set to: 1
 10695  003264  0E00               	movlw	0
 10696  003266  0101               	movlb	1	; () banked
 10697  003268  6F00               	movwf	?__div_to_l_& (0+255),b
 10698  00326A  0E00               	movlw	0
 10699  00326C  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10700  00326E  0E00               	movlw	0
 10701  003270  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10702  003272  0E00               	movlw	0
 10703  003274  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10704                           
 10705                           ; BSR set to: 1
 10706  003276  0012               	return	
 10707  003278                     l9701:
 10708                           
 10709                           ; BSR set to: 1
 10710  003278  0101               	movlb	1	; () banked
 10711  00327A  90D8               	bcf	status,0,c
 10712  00327C  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
 10713  00327E  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 10714  003280  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 10715  003282  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 10716  003284  0101               	movlb	1	; () banked
 10717  003286  070B               	decf	__div_to_l_@exp1& (0+255),f,b
 10718  003288                     l9703:
 10719                           
 10720                           ; BSR set to: 1
 10721  003288  0101               	movlb	1	; () banked
 10722  00328A  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10723  00328C  0101               	movlb	1	; () banked
 10724  00328E  A4D8               	btfss	status,2,c
 10725  003290  D7F3               	goto	l9701
 10726  003292                     l1252:
 10727                           
 10728                           ; BSR set to: 1
 10729  003292  C106  F100         	movff	__div_to_l_@quot,?__div_to_l_
 10730  003296  C107  F101         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 10731  00329A  C108  F102         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 10732  00329E  C109  F103         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 10733                           
 10734                           ; BSR set to: 1
 10735  0032A2  0012               	return		;funcret
 10736  0032A4                     __end_of__div_to_l_:
 10737                           	opt stack 0
 10738                           tblptru	equ	0xFF8
 10739                           tblptrh	equ	0xFF7
 10740                           tblptrl	equ	0xFF6
 10741                           tablat	equ	0xFF5
 10742                           prodh	equ	0xFF4
 10743                           prodl	equ	0xFF3
 10744                           intcon	equ	0xFF2
 10745                           postinc0	equ	0xFEE
 10746                           wreg	equ	0xFE8
 10747                           postdec1	equ	0xFE5
 10748                           fsr1l	equ	0xFE1
 10749                           indf2	equ	0xFDF
 10750                           postinc2	equ	0xFDE
 10751                           postdec2	equ	0xFDD
 10752                           fsr2h	equ	0xFDA
 10753                           fsr2l	equ	0xFD9
 10754                           status	equ	0xFD8
 10755                           
 10756 ;; *************** function ___lltoft *****************
 10757 ;; Defined at:
 10758 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
 10759 ;; Parameters:    Size  Location     Type
 10760 ;;  c               4    8[BANK1 ] unsigned long 
 10761 ;; Auto vars:     Size  Location     Type
 10762 ;;  exp             1   16[BANK1 ] unsigned char 
 10763 ;; Return value:  Size  Location     Type
 10764 ;;                  3    8[BANK1 ] float 
 10765 ;; Registers used:
 10766 ;;		wreg, status,2, status,0, cstack
 10767 ;; Tracked objects:
 10768 ;;		On entry : 0/0
 10769 ;;		On exit  : 0/0
 10770 ;;		Unchanged: 0/0
 10771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10772 ;;      Params:         0       0       4       0       0       0       0
 10773 ;;      Locals:         0       0       1       0       0       0       0
 10774 ;;      Temps:          0       0       4       0       0       0       0
 10775 ;;      Totals:         0       0       9       0       0       0       0
 10776 ;;Total ram usage:        9 bytes
 10777 ;; Hardware stack levels used:    1
 10778 ;; Hardware stack levels required when called:   13
 10779 ;; This function calls:
 10780 ;;		___ftpack
 10781 ;; This function is called by:
 10782 ;;		_printf
 10783 ;; This function uses a non-reentrant model
 10784 ;;
 10785                           
 10786                           	psect	text38
 10787  005F36                     __ptext38:
 10788                           	opt stack 0
 10789  005F36                     ___lltoft:
 10790                           	opt stack 14
 10791                           
 10792                           ; BSR set to: 1
 10793                           ;incstack = 0
 10794  005F36  0E8E               	movlw	142
 10795  005F38  0101               	movlb	1	; () banked
 10796  005F3A  6F10               	movwf	___lltoft@exp& (0+255),b
 10797  005F3C  D008               	goto	l9777
 10798  005F3E                     l9775:
 10799                           
 10800                           ; BSR set to: 1
 10801  005F3E  0101               	movlb	1	; () banked
 10802  005F40  90D8               	bcf	status,0,c
 10803  005F42  330B               	rrcf	(___lltoft@c+3)& (0+255),f,b
 10804  005F44  330A               	rrcf	(___lltoft@c+2)& (0+255),f,b
 10805  005F46  3309               	rrcf	(___lltoft@c+1)& (0+255),f,b
 10806  005F48  3308               	rrcf	___lltoft@c& (0+255),f,b
 10807  005F4A  0101               	movlb	1	; () banked
 10808  005F4C  2B10               	incf	___lltoft@exp& (0+255),f,b
 10809  005F4E                     l9777:
 10810                           
 10811                           ; BSR set to: 1
 10812  005F4E  0E00               	movlw	0
 10813  005F50  0101               	movlb	1	; () banked
 10814  005F52  1508               	andwf	___lltoft@c& (0+255),w,b
 10815  005F54  0101               	movlb	1	; () banked
 10816  005F56  6F0C               	movwf	??___lltoft& (0+255),b
 10817  005F58  0E00               	movlw	0
 10818  005F5A  0101               	movlb	1	; () banked
 10819  005F5C  1509               	andwf	(___lltoft@c+1)& (0+255),w,b
 10820  005F5E  0101               	movlb	1	; () banked
 10821  005F60  6F0D               	movwf	(??___lltoft+1)& (0+255),b
 10822  005F62  0E00               	movlw	0
 10823  005F64  0101               	movlb	1	; () banked
 10824  005F66  150A               	andwf	(___lltoft@c+2)& (0+255),w,b
 10825  005F68  0101               	movlb	1	; () banked
 10826  005F6A  6F0E               	movwf	(??___lltoft+2)& (0+255),b
 10827  005F6C  0EFF               	movlw	255
 10828  005F6E  0101               	movlb	1	; () banked
 10829  005F70  150B               	andwf	(___lltoft@c+3)& (0+255),w,b
 10830  005F72  0101               	movlb	1	; () banked
 10831  005F74  6F0F               	movwf	(??___lltoft+3)& (0+255),b
 10832  005F76  0101               	movlb	1	; () banked
 10833  005F78  510C               	movf	??___lltoft& (0+255),w,b
 10834  005F7A  0101               	movlb	1	; () banked
 10835  005F7C  110D               	iorwf	(??___lltoft+1)& (0+255),w,b
 10836  005F7E  0101               	movlb	1	; () banked
 10837  005F80  110E               	iorwf	(??___lltoft+2)& (0+255),w,b
 10838  005F82  0101               	movlb	1	; () banked
 10839  005F84  110F               	iorwf	(??___lltoft+3)& (0+255),w,b
 10840  005F86  A4D8               	btfss	status,2,c
 10841  005F88  D7DA               	goto	l9775
 10842                           
 10843                           ; BSR set to: 1
 10844                           
 10845                           ; BSR set to: 1
 10846  005F8A  C108  F100         	movff	___lltoft@c,___ftpack@arg
 10847  005F8E  C109  F101         	movff	___lltoft@c+1,___ftpack@arg+1
 10848  005F92  C10A  F102         	movff	___lltoft@c+2,___ftpack@arg+2
 10849  005F96  C110  F103         	movff	___lltoft@exp,___ftpack@exp
 10850  005F9A  0E00               	movlw	0
 10851  005F9C  0101               	movlb	1	; () banked
 10852  005F9E  6F04               	movwf	___ftpack@sign& (0+255),b
 10853  005FA0  EC80  F021         	call	___ftpack	;wreg free
 10854  005FA4  C100  F108         	movff	?___ftpack,?___lltoft
 10855  005FA8  C101  F109         	movff	?___ftpack+1,?___lltoft+1
 10856  005FAC  C102  F10A         	movff	?___ftpack+2,?___lltoft+2
 10857  005FB0  0012               	return	
 10858  005FB2                     __end_of___lltoft:
 10859                           	opt stack 0
 10860                           tblptru	equ	0xFF8
 10861                           tblptrh	equ	0xFF7
 10862                           tblptrl	equ	0xFF6
 10863                           tablat	equ	0xFF5
 10864                           prodh	equ	0xFF4
 10865                           prodl	equ	0xFF3
 10866                           intcon	equ	0xFF2
 10867                           postinc0	equ	0xFEE
 10868                           wreg	equ	0xFE8
 10869                           postdec1	equ	0xFE5
 10870                           fsr1l	equ	0xFE1
 10871                           indf2	equ	0xFDF
 10872                           postinc2	equ	0xFDE
 10873                           postdec2	equ	0xFDD
 10874                           fsr2h	equ	0xFDA
 10875                           fsr2l	equ	0xFD9
 10876                           status	equ	0xFD8
 10877                           
 10878 ;; *************** function ___llmod *****************
 10879 ;; Defined at:
 10880 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
 10881 ;; Parameters:    Size  Location     Type
 10882 ;;  dividend        4   13[BANK1 ] unsigned long 
 10883 ;;  divisor         4   17[BANK1 ] unsigned long 
 10884 ;; Auto vars:     Size  Location     Type
 10885 ;;  counter         1   21[BANK1 ] unsigned char 
 10886 ;; Return value:  Size  Location     Type
 10887 ;;                  4   13[BANK1 ] unsigned long 
 10888 ;; Registers used:
 10889 ;;		wreg, status,2, status,0
 10890 ;; Tracked objects:
 10891 ;;		On entry : 0/0
 10892 ;;		On exit  : 0/0
 10893 ;;		Unchanged: 0/0
 10894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10895 ;;      Params:         0       0       8       0       0       0       0
 10896 ;;      Locals:         0       0       1       0       0       0       0
 10897 ;;      Temps:          0       0       0       0       0       0       0
 10898 ;;      Totals:         0       0       9       0       0       0       0
 10899 ;;Total ram usage:        9 bytes
 10900 ;; Hardware stack levels used:    1
 10901 ;; Hardware stack levels required when called:   12
 10902 ;; This function calls:
 10903 ;;		Nothing
 10904 ;; This function is called by:
 10905 ;;		_printf
 10906 ;; This function uses a non-reentrant model
 10907 ;;
 10908                           
 10909                           	psect	text39
 10910  005874                     __ptext39:
 10911                           	opt stack 0
 10912  005874                     ___llmod:
 10913                           	opt stack 15
 10914                           
 10915                           ;incstack = 0
 10916  005874  0101               	movlb	1	; () banked
 10917  005876  5111               	movf	___llmod@divisor& (0+255),w,b
 10918  005878  0101               	movlb	1	; () banked
 10919  00587A  1112               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 10920  00587C  0101               	movlb	1	; () banked
 10921  00587E  1113               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 10922  005880  0101               	movlb	1	; () banked
 10923  005882  1114               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 10924  005884  B4D8               	btfsc	status,2,c
 10925  005886  D03A               	goto	l1441
 10926                           
 10927                           ; BSR set to: 1
 10928  005888  0E01               	movlw	1
 10929  00588A  0101               	movlb	1	; () banked
 10930  00588C  6F15               	movwf	___llmod@counter& (0+255),b
 10931  00588E  D008               	goto	l9763
 10932  005890                     l9761:
 10933                           
 10934                           ; BSR set to: 1
 10935  005890  0101               	movlb	1	; () banked
 10936  005892  90D8               	bcf	status,0,c
 10937  005894  3711               	rlcf	___llmod@divisor& (0+255),f,b
 10938  005896  3712               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 10939  005898  3713               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 10940  00589A  3714               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 10941  00589C  0101               	movlb	1	; () banked
 10942  00589E  2B15               	incf	___llmod@counter& (0+255),f,b
 10943  0058A0                     l9763:
 10944                           
 10945                           ; BSR set to: 1
 10946  0058A0  0101               	movlb	1	; () banked
 10947  0058A2  AF14               	btfss	(___llmod@divisor+3)& (0+255),7,b
 10948  0058A4  D7F5               	goto	l9761
 10949  0058A6                     l9765:
 10950                           
 10951                           ; BSR set to: 1
 10952  0058A6  0101               	movlb	1	; () banked
 10953  0058A8  5111               	movf	___llmod@divisor& (0+255),w,b
 10954  0058AA  0101               	movlb	1	; () banked
 10955  0058AC  5D0D               	subwf	___llmod@dividend& (0+255),w,b
 10956  0058AE  0101               	movlb	1	; () banked
 10957  0058B0  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
 10958  0058B2  0101               	movlb	1	; () banked
 10959  0058B4  590E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 10960  0058B6  0101               	movlb	1	; () banked
 10961  0058B8  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
 10962  0058BA  0101               	movlb	1	; () banked
 10963  0058BC  590F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 10964  0058BE  0101               	movlb	1	; () banked
 10965  0058C0  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
 10966  0058C2  0101               	movlb	1	; () banked
 10967  0058C4  5910               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 10968  0058C6  A0D8               	btfss	status,0,c
 10969  0058C8  D010               	goto	l9769
 10970                           
 10971                           ; BSR set to: 1
 10972  0058CA  0101               	movlb	1	; () banked
 10973  0058CC  5111               	movf	___llmod@divisor& (0+255),w,b
 10974  0058CE  0101               	movlb	1	; () banked
 10975  0058D0  5F0D               	subwf	___llmod@dividend& (0+255),f,b
 10976  0058D2  0101               	movlb	1	; () banked
 10977  0058D4  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
 10978  0058D6  0101               	movlb	1	; () banked
 10979  0058D8  5B0E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 10980  0058DA  0101               	movlb	1	; () banked
 10981  0058DC  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
 10982  0058DE  0101               	movlb	1	; () banked
 10983  0058E0  5B0F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 10984  0058E2  0101               	movlb	1	; () banked
 10985  0058E4  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
 10986  0058E6  0101               	movlb	1	; () banked
 10987  0058E8  5B10               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 10988  0058EA                     l9769:
 10989                           
 10990                           ; BSR set to: 1
 10991  0058EA  0101               	movlb	1	; () banked
 10992  0058EC  90D8               	bcf	status,0,c
 10993  0058EE  3314               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 10994  0058F0  3313               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 10995  0058F2  3312               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 10996  0058F4  3311               	rrcf	___llmod@divisor& (0+255),f,b
 10997                           
 10998                           ; BSR set to: 1
 10999  0058F6  0101               	movlb	1	; () banked
 11000  0058F8  2F15               	decfsz	___llmod@counter& (0+255),f,b
 11001  0058FA  D7D5               	goto	l9765
 11002  0058FC                     l1441:
 11003                           
 11004                           ; BSR set to: 1
 11005  0058FC  C10D  F10D         	movff	___llmod@dividend,?___llmod
 11006  005900  C10E  F10E         	movff	___llmod@dividend+1,?___llmod+1
 11007  005904  C10F  F10F         	movff	___llmod@dividend+2,?___llmod+2
 11008  005908  C110  F110         	movff	___llmod@dividend+3,?___llmod+3
 11009                           
 11010                           ; BSR set to: 1
 11011  00590C  0012               	return		;funcret
 11012  00590E                     __end_of___llmod:
 11013                           	opt stack 0
 11014                           tblptru	equ	0xFF8
 11015                           tblptrh	equ	0xFF7
 11016                           tblptrl	equ	0xFF6
 11017                           tablat	equ	0xFF5
 11018                           prodh	equ	0xFF4
 11019                           prodl	equ	0xFF3
 11020                           intcon	equ	0xFF2
 11021                           postinc0	equ	0xFEE
 11022                           wreg	equ	0xFE8
 11023                           postdec1	equ	0xFE5
 11024                           fsr1l	equ	0xFE1
 11025                           indf2	equ	0xFDF
 11026                           postinc2	equ	0xFDE
 11027                           postdec2	equ	0xFDD
 11028                           fsr2h	equ	0xFDA
 11029                           fsr2l	equ	0xFD9
 11030                           status	equ	0xFD8
 11031                           
 11032 ;; *************** function ___lldiv *****************
 11033 ;; Defined at:
 11034 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
 11035 ;; Parameters:    Size  Location     Type
 11036 ;;  dividend        4    0[BANK1 ] unsigned long 
 11037 ;;  divisor         4    4[BANK1 ] unsigned long 
 11038 ;; Auto vars:     Size  Location     Type
 11039 ;;  quotient        4    8[BANK1 ] unsigned long 
 11040 ;;  counter         1   12[BANK1 ] unsigned char 
 11041 ;; Return value:  Size  Location     Type
 11042 ;;                  4    0[BANK1 ] unsigned long 
 11043 ;; Registers used:
 11044 ;;		wreg, status,2, status,0
 11045 ;; Tracked objects:
 11046 ;;		On entry : 0/0
 11047 ;;		On exit  : 0/0
 11048 ;;		Unchanged: 0/0
 11049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11050 ;;      Params:         0       0       8       0       0       0       0
 11051 ;;      Locals:         0       0       5       0       0       0       0
 11052 ;;      Temps:          0       0       0       0       0       0       0
 11053 ;;      Totals:         0       0      13       0       0       0       0
 11054 ;;Total ram usage:       13 bytes
 11055 ;; Hardware stack levels used:    1
 11056 ;; Hardware stack levels required when called:   12
 11057 ;; This function calls:
 11058 ;;		Nothing
 11059 ;; This function is called by:
 11060 ;;		_printf
 11061 ;; This function uses a non-reentrant model
 11062 ;;
 11063                           
 11064                           	psect	text40
 11065  00507A                     __ptext40:
 11066                           	opt stack 0
 11067  00507A                     ___lldiv:
 11068                           	opt stack 15
 11069                           
 11070                           ; BSR set to: 1
 11071                           ;incstack = 0
 11072  00507A  0E00               	movlw	0
 11073  00507C  0101               	movlb	1	; () banked
 11074  00507E  6F08               	movwf	___lldiv@quotient& (0+255),b
 11075  005080  0E00               	movlw	0
 11076  005082  6F09               	movwf	(___lldiv@quotient+1)& (0+255),b
 11077  005084  0E00               	movlw	0
 11078  005086  6F0A               	movwf	(___lldiv@quotient+2)& (0+255),b
 11079  005088  0E00               	movlw	0
 11080  00508A  6F0B               	movwf	(___lldiv@quotient+3)& (0+255),b
 11081                           
 11082                           ; BSR set to: 1
 11083  00508C  0101               	movlb	1	; () banked
 11084  00508E  5104               	movf	___lldiv@divisor& (0+255),w,b
 11085  005090  0101               	movlb	1	; () banked
 11086  005092  1105               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 11087  005094  0101               	movlb	1	; () banked
 11088  005096  1106               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 11089  005098  0101               	movlb	1	; () banked
 11090  00509A  1107               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 11091  00509C  B4D8               	btfsc	status,2,c
 11092  00509E  D042               	goto	l1431
 11093                           
 11094                           ; BSR set to: 1
 11095  0050A0  0E01               	movlw	1
 11096  0050A2  0101               	movlb	1	; () banked
 11097  0050A4  6F0C               	movwf	___lldiv@counter& (0+255),b
 11098  0050A6  D008               	goto	l9743
 11099  0050A8                     l9741:
 11100                           
 11101                           ; BSR set to: 1
 11102  0050A8  0101               	movlb	1	; () banked
 11103  0050AA  90D8               	bcf	status,0,c
 11104  0050AC  3704               	rlcf	___lldiv@divisor& (0+255),f,b
 11105  0050AE  3705               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 11106  0050B0  3706               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 11107  0050B2  3707               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 11108  0050B4  0101               	movlb	1	; () banked
 11109  0050B6  2B0C               	incf	___lldiv@counter& (0+255),f,b
 11110  0050B8                     l9743:
 11111                           
 11112                           ; BSR set to: 1
 11113  0050B8  0101               	movlb	1	; () banked
 11114  0050BA  AF07               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 11115  0050BC  D7F5               	goto	l9741
 11116  0050BE                     l9745:
 11117                           
 11118                           ; BSR set to: 1
 11119  0050BE  0101               	movlb	1	; () banked
 11120  0050C0  90D8               	bcf	status,0,c
 11121  0050C2  3708               	rlcf	___lldiv@quotient& (0+255),f,b
 11122  0050C4  3709               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 11123  0050C6  370A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 11124  0050C8  370B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 11125                           
 11126                           ; BSR set to: 1
 11127  0050CA  0101               	movlb	1	; () banked
 11128  0050CC  5104               	movf	___lldiv@divisor& (0+255),w,b
 11129  0050CE  0101               	movlb	1	; () banked
 11130  0050D0  5D00               	subwf	___lldiv@dividend& (0+255),w,b
 11131  0050D2  0101               	movlb	1	; () banked
 11132  0050D4  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11133  0050D6  0101               	movlb	1	; () banked
 11134  0050D8  5901               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 11135  0050DA  0101               	movlb	1	; () banked
 11136  0050DC  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11137  0050DE  0101               	movlb	1	; () banked
 11138  0050E0  5902               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 11139  0050E2  0101               	movlb	1	; () banked
 11140  0050E4  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11141  0050E6  0101               	movlb	1	; () banked
 11142  0050E8  5903               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 11143  0050EA  A0D8               	btfss	status,0,c
 11144  0050EC  D012               	goto	l9753
 11145                           
 11146                           ; BSR set to: 1
 11147  0050EE  0101               	movlb	1	; () banked
 11148  0050F0  5104               	movf	___lldiv@divisor& (0+255),w,b
 11149  0050F2  0101               	movlb	1	; () banked
 11150  0050F4  5F00               	subwf	___lldiv@dividend& (0+255),f,b
 11151  0050F6  0101               	movlb	1	; () banked
 11152  0050F8  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11153  0050FA  0101               	movlb	1	; () banked
 11154  0050FC  5B01               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 11155  0050FE  0101               	movlb	1	; () banked
 11156  005100  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11157  005102  0101               	movlb	1	; () banked
 11158  005104  5B02               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 11159  005106  0101               	movlb	1	; () banked
 11160  005108  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11161  00510A  0101               	movlb	1	; () banked
 11162  00510C  5B03               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 11163                           
 11164                           ; BSR set to: 1
 11165  00510E  0101               	movlb	1	; () banked
 11166  005110  8108               	bsf	___lldiv@quotient& (0+255),0,b
 11167  005112                     l9753:
 11168                           
 11169                           ; BSR set to: 1
 11170  005112  0101               	movlb	1	; () banked
 11171  005114  90D8               	bcf	status,0,c
 11172  005116  3307               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 11173  005118  3306               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 11174  00511A  3305               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 11175  00511C  3304               	rrcf	___lldiv@divisor& (0+255),f,b
 11176                           
 11177                           ; BSR set to: 1
 11178  00511E  0101               	movlb	1	; () banked
 11179  005120  2F0C               	decfsz	___lldiv@counter& (0+255),f,b
 11180  005122  D7CD               	goto	l9745
 11181  005124                     l1431:
 11182                           
 11183                           ; BSR set to: 1
 11184  005124  C108  F100         	movff	___lldiv@quotient,?___lldiv
 11185  005128  C109  F101         	movff	___lldiv@quotient+1,?___lldiv+1
 11186  00512C  C10A  F102         	movff	___lldiv@quotient+2,?___lldiv+2
 11187  005130  C10B  F103         	movff	___lldiv@quotient+3,?___lldiv+3
 11188                           
 11189                           ; BSR set to: 1
 11190  005134  0012               	return		;funcret
 11191  005136                     __end_of___lldiv:
 11192                           	opt stack 0
 11193                           tblptru	equ	0xFF8
 11194                           tblptrh	equ	0xFF7
 11195                           tblptrl	equ	0xFF6
 11196                           tablat	equ	0xFF5
 11197                           prodh	equ	0xFF4
 11198                           prodl	equ	0xFF3
 11199                           intcon	equ	0xFF2
 11200                           postinc0	equ	0xFEE
 11201                           wreg	equ	0xFE8
 11202                           postdec1	equ	0xFE5
 11203                           fsr1l	equ	0xFE1
 11204                           indf2	equ	0xFDF
 11205                           postinc2	equ	0xFDE
 11206                           postdec2	equ	0xFDD
 11207                           fsr2h	equ	0xFDA
 11208                           fsr2l	equ	0xFD9
 11209                           status	equ	0xFD8
 11210                           
 11211 ;; *************** function ___ftsub *****************
 11212 ;; Defined at:
 11213 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
 11214 ;; Parameters:    Size  Location     Type
 11215 ;;  f1              3   57[BANK1 ] float 
 11216 ;;  f2              3   60[BANK1 ] float 
 11217 ;; Auto vars:     Size  Location     Type
 11218 ;;		None
 11219 ;; Return value:  Size  Location     Type
 11220 ;;                  3   57[BANK1 ] float 
 11221 ;; Registers used:
 11222 ;;		wreg, status,2, status,0, cstack
 11223 ;; Tracked objects:
 11224 ;;		On entry : 0/0
 11225 ;;		On exit  : 0/0
 11226 ;;		Unchanged: 0/0
 11227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11228 ;;      Params:         0       0       6       0       0       0       0
 11229 ;;      Locals:         0       0       0       0       0       0       0
 11230 ;;      Temps:          0       0       0       0       0       0       0
 11231 ;;      Totals:         0       0       6       0       0       0       0
 11232 ;;Total ram usage:        6 bytes
 11233 ;; Hardware stack levels used:    1
 11234 ;; Hardware stack levels required when called:   14
 11235 ;; This function calls:
 11236 ;;		___ftadd
 11237 ;; This function is called by:
 11238 ;;		_printf
 11239 ;; This function uses a non-reentrant model
 11240 ;;
 11241                           
 11242                           	psect	text41
 11243  0066C6                     __ptext41:
 11244                           	opt stack 0
 11245  0066C6                     ___ftsub:
 11246                           	opt stack 13
 11247                           
 11248                           ; BSR set to: 1
 11249                           ;incstack = 0
 11250  0066C6  0101               	movlb	1	; () banked
 11251  0066C8  513C               	movf	___ftsub@f2& (0+255),w,b
 11252  0066CA  0101               	movlb	1	; () banked
 11253  0066CC  113D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 11254  0066CE  0101               	movlb	1	; () banked
 11255  0066D0  113E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 11256  0066D2  B4D8               	btfsc	status,2,c
 11257  0066D4  D009               	goto	l9709
 11258                           
 11259                           ; BSR set to: 1
 11260  0066D6  0E00               	movlw	0
 11261  0066D8  0101               	movlb	1	; () banked
 11262  0066DA  1B3C               	xorwf	___ftsub@f2& (0+255),f,b
 11263  0066DC  0E00               	movlw	0
 11264  0066DE  0101               	movlb	1	; () banked
 11265  0066E0  1B3D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 11266  0066E2  0E80               	movlw	128
 11267  0066E4  0101               	movlb	1	; () banked
 11268  0066E6  1B3E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 11269  0066E8                     l9709:
 11270                           
 11271                           ; BSR set to: 1
 11272  0066E8  C139  F12D         	movff	___ftsub@f1,___ftadd@f1
 11273  0066EC  C13A  F12E         	movff	___ftsub@f1+1,___ftadd@f1+1
 11274  0066F0  C13B  F12F         	movff	___ftsub@f1+2,___ftadd@f1+2
 11275  0066F4  C13C  F130         	movff	___ftsub@f2,___ftadd@f2
 11276  0066F8  C13D  F131         	movff	___ftsub@f2+1,___ftadd@f2+1
 11277  0066FC  C13E  F132         	movff	___ftsub@f2+2,___ftadd@f2+2
 11278  006700  EC00  F012         	call	___ftadd	;wreg free
 11279  006704  C12D  F139         	movff	?___ftadd,?___ftsub
 11280  006708  C12E  F13A         	movff	?___ftadd+1,?___ftsub+1
 11281  00670C  C12F  F13B         	movff	?___ftadd+2,?___ftsub+2
 11282  006710  0012               	return	
 11283  006712                     __end_of___ftsub:
 11284                           	opt stack 0
 11285                           tblptru	equ	0xFF8
 11286                           tblptrh	equ	0xFF7
 11287                           tblptrl	equ	0xFF6
 11288                           tablat	equ	0xFF5
 11289                           prodh	equ	0xFF4
 11290                           prodl	equ	0xFF3
 11291                           intcon	equ	0xFF2
 11292                           postinc0	equ	0xFEE
 11293                           wreg	equ	0xFE8
 11294                           postdec1	equ	0xFE5
 11295                           fsr1l	equ	0xFE1
 11296                           indf2	equ	0xFDF
 11297                           postinc2	equ	0xFDE
 11298                           postdec2	equ	0xFDD
 11299                           fsr2h	equ	0xFDA
 11300                           fsr2l	equ	0xFD9
 11301                           status	equ	0xFD8
 11302                           
 11303 ;; *************** function ___ftneg *****************
 11304 ;; Defined at:
 11305 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
 11306 ;; Parameters:    Size  Location     Type
 11307 ;;  f1              3    0[BANK1 ] float 
 11308 ;; Auto vars:     Size  Location     Type
 11309 ;;		None
 11310 ;; Return value:  Size  Location     Type
 11311 ;;                  3    0[BANK1 ] float 
 11312 ;; Registers used:
 11313 ;;		wreg, status,2, status,0
 11314 ;; Tracked objects:
 11315 ;;		On entry : 0/0
 11316 ;;		On exit  : 0/0
 11317 ;;		Unchanged: 0/0
 11318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11319 ;;      Params:         0       0       3       0       0       0       0
 11320 ;;      Locals:         0       0       0       0       0       0       0
 11321 ;;      Temps:          0       0       0       0       0       0       0
 11322 ;;      Totals:         0       0       3       0       0       0       0
 11323 ;;Total ram usage:        3 bytes
 11324 ;; Hardware stack levels used:    1
 11325 ;; Hardware stack levels required when called:   12
 11326 ;; This function calls:
 11327 ;;		Nothing
 11328 ;; This function is called by:
 11329 ;;		_printf
 11330 ;; This function uses a non-reentrant model
 11331 ;;
 11332                           
 11333                           	psect	text42
 11334  006AD2                     __ptext42:
 11335                           	opt stack 0
 11336  006AD2                     ___ftneg:
 11337                           	opt stack 15
 11338                           
 11339                           ;incstack = 0
 11340  006AD2  0101               	movlb	1	; () banked
 11341  006AD4  5100               	movf	___ftneg@f1& (0+255),w,b
 11342  006AD6  0101               	movlb	1	; () banked
 11343  006AD8  1101               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 11344  006ADA  0101               	movlb	1	; () banked
 11345  006ADC  1102               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 11346  006ADE  B4D8               	btfsc	status,2,c
 11347  006AE0  D009               	goto	l1381
 11348                           
 11349                           ; BSR set to: 1
 11350  006AE2  0E00               	movlw	0
 11351  006AE4  0101               	movlb	1	; () banked
 11352  006AE6  1B00               	xorwf	___ftneg@f1& (0+255),f,b
 11353  006AE8  0E00               	movlw	0
 11354  006AEA  0101               	movlb	1	; () banked
 11355  006AEC  1B01               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 11356  006AEE  0E80               	movlw	128
 11357  006AF0  0101               	movlb	1	; () banked
 11358  006AF2  1B02               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 11359  006AF4                     l1381:
 11360                           
 11361                           ; BSR set to: 1
 11362  006AF4  C100  F100         	movff	___ftneg@f1,?___ftneg
 11363  006AF8  C101  F101         	movff	___ftneg@f1+1,?___ftneg+1
 11364  006AFC  C102  F102         	movff	___ftneg@f1+2,?___ftneg+2
 11365                           
 11366                           ; BSR set to: 1
 11367  006B00  0012               	return		;funcret
 11368  006B02                     __end_of___ftneg:
 11369                           	opt stack 0
 11370                           tblptru	equ	0xFF8
 11371                           tblptrh	equ	0xFF7
 11372                           tblptrl	equ	0xFF6
 11373                           tablat	equ	0xFF5
 11374                           prodh	equ	0xFF4
 11375                           prodl	equ	0xFF3
 11376                           intcon	equ	0xFF2
 11377                           postinc0	equ	0xFEE
 11378                           wreg	equ	0xFE8
 11379                           postdec1	equ	0xFE5
 11380                           fsr1l	equ	0xFE1
 11381                           indf2	equ	0xFDF
 11382                           postinc2	equ	0xFDE
 11383                           postdec2	equ	0xFDD
 11384                           fsr2h	equ	0xFDA
 11385                           fsr2l	equ	0xFD9
 11386                           status	equ	0xFD8
 11387                           
 11388 ;; *************** function ___ftge *****************
 11389 ;; Defined at:
 11390 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 11391 ;; Parameters:    Size  Location     Type
 11392 ;;  ff1             3    0[BANK1 ] float 
 11393 ;;  ff2             3    3[BANK1 ] float 
 11394 ;; Auto vars:     Size  Location     Type
 11395 ;;		None
 11396 ;; Return value:  Size  Location     Type
 11397 ;;		None               void
 11398 ;; Registers used:
 11399 ;;		wreg, status,2, status,0
 11400 ;; Tracked objects:
 11401 ;;		On entry : 0/0
 11402 ;;		On exit  : 0/0
 11403 ;;		Unchanged: 0/0
 11404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11405 ;;      Params:         0       0       6       0       0       0       0
 11406 ;;      Locals:         0       0       0       0       0       0       0
 11407 ;;      Temps:          0       0       3       0       0       0       0
 11408 ;;      Totals:         0       0       9       0       0       0       0
 11409 ;;Total ram usage:        9 bytes
 11410 ;; Hardware stack levels used:    1
 11411 ;; Hardware stack levels required when called:   12
 11412 ;; This function calls:
 11413 ;;		Nothing
 11414 ;; This function is called by:
 11415 ;;		_printf
 11416 ;; This function uses a non-reentrant model
 11417 ;;
 11418                           
 11419                           	psect	text43
 11420  004E34                     __ptext43:
 11421                           	opt stack 0
 11422  004E34                     ___ftge:
 11423                           	opt stack 15
 11424                           
 11425                           ; BSR set to: 1
 11426                           ;incstack = 0
 11427  004E34  0101               	movlb	1	; () banked
 11428  004E36  AF02               	btfss	(___ftge@ff1+2)& (0+255),7,b
 11429  004E38  D01D               	goto	l9717
 11430                           
 11431                           ; BSR set to: 1
 11432  004E3A  C100  F106         	movff	___ftge@ff1,??___ftge
 11433  004E3E  C101  F107         	movff	___ftge@ff1+1,??___ftge+1
 11434  004E42  C102  F108         	movff	___ftge@ff1+2,??___ftge+2
 11435  004E46  0101               	movlb	1	; () banked
 11436  004E48  1F06               	comf	??___ftge& (0+255),f,b
 11437  004E4A  1F07               	comf	(??___ftge+1)& (0+255),f,b
 11438  004E4C  1F08               	comf	(??___ftge+2)& (0+255),f,b
 11439  004E4E  2B06               	incf	??___ftge& (0+255),f,b
 11440  004E50  0E00               	movlw	0
 11441  004E52  2307               	addwfc	(??___ftge+1)& (0+255),f,b
 11442  004E54  2308               	addwfc	(??___ftge+2)& (0+255),f,b
 11443  004E56  0E00               	movlw	0
 11444  004E58  0101               	movlb	1	; () banked
 11445  004E5A  2506               	addwf	??___ftge& (0+255),w,b
 11446  004E5C  0101               	movlb	1	; () banked
 11447  004E5E  6F00               	movwf	___ftge@ff1& (0+255),b
 11448  004E60  0E00               	movlw	0
 11449  004E62  0101               	movlb	1	; () banked
 11450  004E64  2107               	addwfc	(??___ftge+1)& (0+255),w,b
 11451  004E66  0101               	movlb	1	; () banked
 11452  004E68  6F01               	movwf	(___ftge@ff1+1)& (0+255),b
 11453  004E6A  0E80               	movlw	128
 11454  004E6C  0101               	movlb	1	; () banked
 11455  004E6E  2108               	addwfc	(??___ftge+2)& (0+255),w,b
 11456  004E70  0101               	movlb	1	; () banked
 11457  004E72  6F02               	movwf	(___ftge@ff1+2)& (0+255),b
 11458  004E74                     l9717:
 11459                           
 11460                           ; BSR set to: 1
 11461  004E74  0101               	movlb	1	; () banked
 11462  004E76  AF05               	btfss	(___ftge@ff2+2)& (0+255),7,b
 11463  004E78  D01D               	goto	l9721
 11464                           
 11465                           ; BSR set to: 1
 11466  004E7A  C103  F106         	movff	___ftge@ff2,??___ftge
 11467  004E7E  C104  F107         	movff	___ftge@ff2+1,??___ftge+1
 11468  004E82  C105  F108         	movff	___ftge@ff2+2,??___ftge+2
 11469  004E86  0101               	movlb	1	; () banked
 11470  004E88  1F06               	comf	??___ftge& (0+255),f,b
 11471  004E8A  1F07               	comf	(??___ftge+1)& (0+255),f,b
 11472  004E8C  1F08               	comf	(??___ftge+2)& (0+255),f,b
 11473  004E8E  2B06               	incf	??___ftge& (0+255),f,b
 11474  004E90  0E00               	movlw	0
 11475  004E92  2307               	addwfc	(??___ftge+1)& (0+255),f,b
 11476  004E94  2308               	addwfc	(??___ftge+2)& (0+255),f,b
 11477  004E96  0E00               	movlw	0
 11478  004E98  0101               	movlb	1	; () banked
 11479  004E9A  2506               	addwf	??___ftge& (0+255),w,b
 11480  004E9C  0101               	movlb	1	; () banked
 11481  004E9E  6F03               	movwf	___ftge@ff2& (0+255),b
 11482  004EA0  0E00               	movlw	0
 11483  004EA2  0101               	movlb	1	; () banked
 11484  004EA4  2107               	addwfc	(??___ftge+1)& (0+255),w,b
 11485  004EA6  0101               	movlb	1	; () banked
 11486  004EA8  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
 11487  004EAA  0E80               	movlw	128
 11488  004EAC  0101               	movlb	1	; () banked
 11489  004EAE  2108               	addwfc	(??___ftge+2)& (0+255),w,b
 11490  004EB0  0101               	movlb	1	; () banked
 11491  004EB2  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
 11492  004EB4                     l9721:
 11493                           
 11494                           ; BSR set to: 1
 11495  004EB4  0E00               	movlw	0
 11496  004EB6  0101               	movlb	1	; () banked
 11497  004EB8  1B00               	xorwf	___ftge@ff1& (0+255),f,b
 11498  004EBA  0E00               	movlw	0
 11499  004EBC  0101               	movlb	1	; () banked
 11500  004EBE  1B01               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 11501  004EC0  0E80               	movlw	128
 11502  004EC2  0101               	movlb	1	; () banked
 11503  004EC4  1B02               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 11504                           
 11505                           ; BSR set to: 1
 11506  004EC6  0E00               	movlw	0
 11507  004EC8  0101               	movlb	1	; () banked
 11508  004ECA  1B03               	xorwf	___ftge@ff2& (0+255),f,b
 11509  004ECC  0E00               	movlw	0
 11510  004ECE  0101               	movlb	1	; () banked
 11511  004ED0  1B04               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 11512  004ED2  0E80               	movlw	128
 11513  004ED4  0101               	movlb	1	; () banked
 11514  004ED6  1B05               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 11515  004ED8  0101               	movlb	1	; () banked
 11516  004EDA  5103               	movf	___ftge@ff2& (0+255),w,b
 11517  004EDC  0101               	movlb	1	; () banked
 11518  004EDE  5D00               	subwf	___ftge@ff1& (0+255),w,b
 11519  004EE0  0101               	movlb	1	; () banked
 11520  004EE2  5104               	movf	(___ftge@ff2+1)& (0+255),w,b
 11521  004EE4  0101               	movlb	1	; () banked
 11522  004EE6  5901               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 11523  004EE8  0101               	movlb	1	; () banked
 11524  004EEA  5105               	movf	(___ftge@ff2+2)& (0+255),w,b
 11525  004EEC  0101               	movlb	1	; () banked
 11526  004EEE  5902               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 11527  004EF0  B0D8               	btfsc	status,0,c
 11528  004EF2  D002               	goto	l9727
 11529                           
 11530                           ; BSR set to: 1
 11531  004EF4  90D8               	bcf	status,0,c
 11532  004EF6  0012               	return	
 11533  004EF8                     l9727:
 11534                           
 11535                           ; BSR set to: 1
 11536  004EF8  80D8               	bsf	status,0,c
 11537                           
 11538                           ; BSR set to: 1
 11539  004EFA  0012               	return	
 11540  004EFC                     __end_of___ftge:
 11541                           	opt stack 0
 11542                           tblptru	equ	0xFF8
 11543                           tblptrh	equ	0xFF7
 11544                           tblptrl	equ	0xFF6
 11545                           tablat	equ	0xFF5
 11546                           prodh	equ	0xFF4
 11547                           prodl	equ	0xFF3
 11548                           intcon	equ	0xFF2
 11549                           postinc0	equ	0xFEE
 11550                           wreg	equ	0xFE8
 11551                           postdec1	equ	0xFE5
 11552                           fsr1l	equ	0xFE1
 11553                           indf2	equ	0xFDF
 11554                           postinc2	equ	0xFDE
 11555                           postdec2	equ	0xFDD
 11556                           fsr2h	equ	0xFDA
 11557                           fsr2l	equ	0xFD9
 11558                           status	equ	0xFD8
 11559                           
 11560 ;; *************** function _clockConfig *****************
 11561 ;; Defined at:
 11562 ;;		line 76 in file "source/SYSConfig.h"
 11563 ;; Parameters:    Size  Location     Type
 11564 ;;		None
 11565 ;; Auto vars:     Size  Location     Type
 11566 ;;		None
 11567 ;; Return value:  Size  Location     Type
 11568 ;;                  1    wreg      void 
 11569 ;; Registers used:
 11570 ;;		wreg, status,2
 11571 ;; Tracked objects:
 11572 ;;		On entry : 0/0
 11573 ;;		On exit  : 0/0
 11574 ;;		Unchanged: 0/0
 11575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11576 ;;      Params:         0       0       0       0       0       0       0
 11577 ;;      Locals:         0       0       0       0       0       0       0
 11578 ;;      Temps:          0       0       0       0       0       0       0
 11579 ;;      Totals:         0       0       0       0       0       0       0
 11580 ;;Total ram usage:        0 bytes
 11581 ;; Hardware stack levels used:    1
 11582 ;; Hardware stack levels required when called:   12
 11583 ;; This function calls:
 11584 ;;		Nothing
 11585 ;; This function is called by:
 11586 ;;		_main
 11587 ;; This function uses a non-reentrant model
 11588 ;;
 11589                           
 11590                           	psect	text44
 11591  006C06                     __ptext44:
 11592                           	opt stack 0
 11593  006C06                     _clockConfig:
 11594                           	opt stack 18
 11595                           
 11596                           ;SYSConfig.h: 77: OSCCONbits.IDLEN = 1;
 11597                           
 11598                           ; BSR set to: 1
 11599                           ;incstack = 0
 11600  006C06  8ED3               	bsf	4051,7,c	;volatile
 11601                           
 11602                           ;SYSConfig.h: 78: OSCCONbits.IRCF = 0b111;
 11603  006C08  88D3               	bsf	4051,4,c	;volatile
 11604  006C0A  8AD3               	bsf	4051,5,c	;volatile
 11605  006C0C  8CD3               	bsf	4051,6,c	;volatile
 11606  006C0E                     l93:
 11607  006C0E  A4D3               	btfss	4051,2,c	;volatile
 11608  006C10  D7FE               	goto	l93
 11609                           
 11610                           ;SYSConfig.h: 80: OSCCONbits.SCS = 0b11;
 11611  006C12  0E03               	movlw	3
 11612  006C14  12D3               	iorwf	4051,f,c	;volatile
 11613                           
 11614                           ;SYSConfig.h: 81: OSCCON2bits.MFIOSEL = 0;
 11615  006C16  98D2               	bcf	4050,4,c	;volatile
 11616                           
 11617                           ;SYSConfig.h: 82: OSCCON2bits.SOSCGO = 0;
 11618  006C18  96D2               	bcf	4050,3,c	;volatile
 11619                           
 11620                           ;SYSConfig.h: 83: OSCTUNEbits.INTSRC = 0;
 11621  006C1A  9E9B               	bcf	3995,7,c	;volatile
 11622                           
 11623                           ;SYSConfig.h: 84: OSCTUNEbits.TUN = 0b011111;
 11624  006C1C  809B               	bsf	3995,0,c	;volatile
 11625  006C1E  829B               	bsf	3995,1,c	;volatile
 11626  006C20  849B               	bsf	3995,2,c	;volatile
 11627  006C22  869B               	bsf	3995,3,c	;volatile
 11628  006C24  889B               	bsf	3995,4,c	;volatile
 11629  006C26  9A9B               	bcf	3995,5,c	;volatile
 11630                           
 11631                           ;SYSConfig.h: 85: OSCTUNEbits.PLLEN = 1;
 11632  006C28  8C9B               	bsf	3995,6,c	;volatile
 11633  006C2A  0012               	return		;funcret
 11634  006C2C                     __end_of_clockConfig:
 11635                           	opt stack 0
 11636                           tblptru	equ	0xFF8
 11637                           tblptrh	equ	0xFF7
 11638                           tblptrl	equ	0xFF6
 11639                           tablat	equ	0xFF5
 11640                           prodh	equ	0xFF4
 11641                           prodl	equ	0xFF3
 11642                           intcon	equ	0xFF2
 11643                           postinc0	equ	0xFEE
 11644                           wreg	equ	0xFE8
 11645                           postdec1	equ	0xFE5
 11646                           fsr1l	equ	0xFE1
 11647                           indf2	equ	0xFDF
 11648                           postinc2	equ	0xFDE
 11649                           postdec2	equ	0xFDD
 11650                           fsr2h	equ	0xFDA
 11651                           fsr2l	equ	0xFD9
 11652                           status	equ	0xFD8
 11653                           
 11654 ;; *************** function _buttonChecking *****************
 11655 ;; Defined at:
 11656 ;;		line 9 in file "source/ButtonController.h"
 11657 ;; Parameters:    Size  Location     Type
 11658 ;;		None
 11659 ;; Auto vars:     Size  Location     Type
 11660 ;;		None
 11661 ;; Return value:  Size  Location     Type
 11662 ;;                  1    wreg      void 
 11663 ;; Registers used:
 11664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11665 ;; Tracked objects:
 11666 ;;		On entry : 0/0
 11667 ;;		On exit  : 0/0
 11668 ;;		Unchanged: 0/0
 11669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11670 ;;      Params:         0       0       0       0       0       0       0
 11671 ;;      Locals:         0       0       0       0       0       0       0
 11672 ;;      Temps:          0       0       0       0       0       0       0
 11673 ;;      Totals:         0       0       0       0       0       0       0
 11674 ;;Total ram usage:        0 bytes
 11675 ;; Hardware stack levels used:    1
 11676 ;; Hardware stack levels required when called:   18
 11677 ;; This function calls:
 11678 ;;		_delay_ms
 11679 ;;		_longPressDOWN
 11680 ;;		_longPressENTER
 11681 ;;		_longPressRETRO
 11682 ;;		_longPressUP
 11683 ;;		_pressDOWN
 11684 ;;		_pressENTER
 11685 ;;		_pressRETRO
 11686 ;;		_pressUP
 11687 ;;		_releaseDOWN
 11688 ;;		_releaseENTER
 11689 ;;		_releaseRETRO
 11690 ;;		_releaseUP
 11691 ;; This function is called by:
 11692 ;;		_main
 11693 ;; This function uses a non-reentrant model
 11694 ;;
 11695                           
 11696                           	psect	text45
 11697  00147A                     __ptext45:
 11698                           	opt stack 0
 11699  00147A                     _buttonChecking:
 11700                           	opt stack 12
 11701                           
 11702                           ;ButtonController.h: 10: if(!PORTAbits.RA2 && lastSttUP) {
 11703                           
 11704                           ;incstack = 0
 11705  00147A  B480               	btfsc	3968,2,c	;volatile
 11706  00147C  D010               	goto	l844
 11707  00147E  0101               	movlb	1	; () banked
 11708  001480  51A2               	movf	_lastSttUP& (0+255),w,b
 11709  001482  0101               	movlb	1	; () banked
 11710  001484  B4D8               	btfsc	status,2,c
 11711  001486  D00B               	goto	l844
 11712                           
 11713                           ; BSR set to: 1
 11714                           ;ButtonController.h: 11: lastSttUP = 0;
 11715  001488  0E00               	movlw	0
 11716  00148A  0101               	movlb	1	; () banked
 11717  00148C  6FA2               	movwf	_lastSttUP& (0+255),b
 11718                           
 11719                           ; BSR set to: 1
 11720                           ;ButtonController.h: 12: delay_ms(200);
 11721  00148E  0E00               	movlw	0
 11722  001490  0101               	movlb	1	; () banked
 11723  001492  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11724  001494  0EC8               	movlw	200
 11725  001496  6F00               	movwf	delay_ms@del& (0+255),b
 11726  001498  ECF5  F033         	call	_delay_ms	;wreg free
 11727                           
 11728                           ;ButtonController.h: 13: }else if(PORTAbits.RA2 && !lastSttUP) {
 11729  00149C  D044               	goto	l11223
 11730  00149E                     l844:
 11731  00149E  A480               	btfss	3968,2,c	;volatile
 11732  0014A0  D016               	goto	l11201
 11733  0014A2  0101               	movlb	1	; () banked
 11734  0014A4  51A2               	movf	_lastSttUP& (0+255),w,b
 11735  0014A6  0101               	movlb	1	; () banked
 11736  0014A8  A4D8               	btfss	status,2,c
 11737  0014AA  D011               	goto	l11201
 11738                           
 11739                           ; BSR set to: 1
 11740                           ;ButtonController.h: 14: lastSttUP = 1;
 11741  0014AC  0E01               	movlw	1
 11742  0014AE  0101               	movlb	1	; () banked
 11743  0014B0  6FA2               	movwf	_lastSttUP& (0+255),b
 11744                           
 11745                           ; BSR set to: 1
 11746                           ;ButtonController.h: 15: if(holdUPcont < 10)
 11747  0014B2  0E0A               	movlw	10
 11748  0014B4  0101               	movlb	1	; () banked
 11749  0014B6  61C9               	cpfslt	_holdUPcont& (0+255),b
 11750  0014B8  D002               	goto	l11199
 11751                           
 11752                           ; BSR set to: 1
 11753                           ;ButtonController.h: 16: pressUP();
 11754  0014BA  EC8C  F022         	call	_pressUP	;wreg free
 11755  0014BE                     l11199:
 11756                           
 11757                           ;ButtonController.h: 17: delay_ms(50);
 11758  0014BE  0E00               	movlw	0
 11759  0014C0  0101               	movlb	1	; () banked
 11760  0014C2  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11761  0014C4  0E32               	movlw	50
 11762  0014C6  6F00               	movwf	delay_ms@del& (0+255),b
 11763  0014C8  ECF5  F033         	call	_delay_ms	;wreg free
 11764                           
 11765                           ;ButtonController.h: 18: }else if(PORTAbits.RA2 == lastSttUP) {
 11766  0014CC  D02C               	goto	l11223
 11767  0014CE                     l11201:
 11768  0014CE  A480               	btfss	3968,2,c	;volatile
 11769  0014D0  D002               	goto	u16670
 11770  0014D2  0E01               	movlw	1
 11771  0014D4  D001               	goto	u16676
 11772  0014D6                     u16670:
 11773  0014D6  0E00               	movlw	0
 11774  0014D8                     u16676:
 11775  0014D8  0101               	movlb	1	; () banked
 11776  0014DA  19A2               	xorwf	_lastSttUP& (0+255),w,b
 11777  0014DC  A4D8               	btfss	status,2,c
 11778  0014DE  D023               	goto	l11223
 11779                           
 11780                           ; BSR set to: 1
 11781                           ;ButtonController.h: 19: if(PORTAbits.RA2) {
 11782  0014E0  A480               	btfss	3968,2,c	;volatile
 11783  0014E2  D006               	goto	l11209
 11784                           
 11785                           ; BSR set to: 1
 11786                           ;ButtonController.h: 20: holdUPcont = 0;
 11787  0014E4  0E00               	movlw	0
 11788  0014E6  0101               	movlb	1	; () banked
 11789  0014E8  6FC9               	movwf	_holdUPcont& (0+255),b
 11790                           
 11791                           ; BSR set to: 1
 11792                           ;ButtonController.h: 21: releaseUP();
 11793  0014EA  EC9D  F036         	call	_releaseUP	;wreg free
 11794                           
 11795                           ;ButtonController.h: 22: }else {
 11796  0014EE  D01B               	goto	l11223
 11797  0014F0                     l11209:
 11798                           
 11799                           ;ButtonController.h: 23: if(!UPsecurLock)
 11800  0014F0  0101               	movlb	1	; () banked
 11801  0014F2  51C2               	movf	_UPsecurLock& (0+255),w,b
 11802  0014F4  A4D8               	btfss	status,2,c
 11803  0014F6  D002               	goto	l11213
 11804                           
 11805                           ; BSR set to: 1
 11806                           ;ButtonController.h: 24: holdUPcont++;
 11807  0014F8  0101               	movlb	1	; () banked
 11808  0014FA  2BC9               	incf	_holdUPcont& (0+255),f,b
 11809  0014FC                     l11213:
 11810                           
 11811                           ; BSR set to: 1
 11812                           ;ButtonController.h: 25: if(holdUPcont > 9) {
 11813  0014FC  0E09               	movlw	9
 11814  0014FE  0101               	movlb	1	; () banked
 11815  001500  65C9               	cpfsgt	_holdUPcont& (0+255),b
 11816  001502  D00A               	goto	l11221
 11817                           
 11818                           ; BSR set to: 1
 11819                           ;ButtonController.h: 26: if(holdUPcont < 26)
 11820  001504  0E1A               	movlw	26
 11821  001506  0101               	movlb	1	; () banked
 11822  001508  61C9               	cpfslt	_holdUPcont& (0+255),b
 11823  00150A  D003               	goto	l11219
 11824                           
 11825                           ; BSR set to: 1
 11826                           ;ButtonController.h: 27: longPressUP();
 11827  00150C  EC41  F031         	call	_longPressUP	;wreg free
 11828  001510  D003               	goto	l11221
 11829  001512                     l11219:
 11830                           
 11831                           ;ButtonController.h: 28: else
 11832                           ;ButtonController.h: 29: UPsecurLock = 1;
 11833  001512  0E01               	movlw	1
 11834  001514  0101               	movlb	1	; () banked
 11835  001516  6FC2               	movwf	_UPsecurLock& (0+255),b
 11836  001518                     l11221:
 11837                           
 11838                           ;ButtonController.h: 30: }
 11839                           ;ButtonController.h: 31: delay_ms(200);
 11840  001518  0E00               	movlw	0
 11841  00151A  0101               	movlb	1	; () banked
 11842  00151C  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11843  00151E  0EC8               	movlw	200
 11844  001520  6F00               	movwf	delay_ms@del& (0+255),b
 11845  001522  ECF5  F033         	call	_delay_ms	;wreg free
 11846  001526                     l11223:
 11847                           
 11848                           ;ButtonController.h: 32: }
 11849                           ;ButtonController.h: 33: }
 11850                           ;ButtonController.h: 34: if(!PORTAbits.RA3 && lastSttDOWN) {
 11851  001526  B680               	btfsc	3968,3,c	;volatile
 11852  001528  D010               	goto	l856
 11853  00152A  0101               	movlb	1	; () banked
 11854  00152C  519F               	movf	_lastSttDOWN& (0+255),w,b
 11855  00152E  0101               	movlb	1	; () banked
 11856  001530  B4D8               	btfsc	status,2,c
 11857  001532  D00B               	goto	l856
 11858                           
 11859                           ; BSR set to: 1
 11860                           ;ButtonController.h: 35: lastSttDOWN = 0;
 11861  001534  0E00               	movlw	0
 11862  001536  0101               	movlb	1	; () banked
 11863  001538  6F9F               	movwf	_lastSttDOWN& (0+255),b
 11864                           
 11865                           ; BSR set to: 1
 11866                           ;ButtonController.h: 36: delay_ms(200);
 11867  00153A  0E00               	movlw	0
 11868  00153C  0101               	movlb	1	; () banked
 11869  00153E  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11870  001540  0EC8               	movlw	200
 11871  001542  6F00               	movwf	delay_ms@del& (0+255),b
 11872  001544  ECF5  F033         	call	_delay_ms	;wreg free
 11873                           
 11874                           ;ButtonController.h: 37: }else if(PORTAbits.RA3 && !lastSttDOWN) {
 11875  001548  D044               	goto	l11263
 11876  00154A                     l856:
 11877  00154A  A680               	btfss	3968,3,c	;volatile
 11878  00154C  D016               	goto	l11241
 11879  00154E  0101               	movlb	1	; () banked
 11880  001550  519F               	movf	_lastSttDOWN& (0+255),w,b
 11881  001552  0101               	movlb	1	; () banked
 11882  001554  A4D8               	btfss	status,2,c
 11883  001556  D011               	goto	l11241
 11884                           
 11885                           ; BSR set to: 1
 11886                           ;ButtonController.h: 38: lastSttDOWN = 1;
 11887  001558  0E01               	movlw	1
 11888  00155A  0101               	movlb	1	; () banked
 11889  00155C  6F9F               	movwf	_lastSttDOWN& (0+255),b
 11890                           
 11891                           ; BSR set to: 1
 11892                           ;ButtonController.h: 39: if(holdDOWNcont < 10)
 11893  00155E  0E0A               	movlw	10
 11894  001560  0101               	movlb	1	; () banked
 11895  001562  61C6               	cpfslt	_holdDOWNcont& (0+255),b
 11896  001564  D002               	goto	l11239
 11897                           
 11898                           ; BSR set to: 1
 11899                           ;ButtonController.h: 40: pressDOWN();
 11900  001566  EC92  F023         	call	_pressDOWN	;wreg free
 11901  00156A                     l11239:
 11902                           
 11903                           ;ButtonController.h: 41: delay_ms(50);
 11904  00156A  0E00               	movlw	0
 11905  00156C  0101               	movlb	1	; () banked
 11906  00156E  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11907  001570  0E32               	movlw	50
 11908  001572  6F00               	movwf	delay_ms@del& (0+255),b
 11909  001574  ECF5  F033         	call	_delay_ms	;wreg free
 11910                           
 11911                           ;ButtonController.h: 42: }else if(PORTAbits.RA3 == lastSttDOWN) {
 11912  001578  D02C               	goto	l11263
 11913  00157A                     l11241:
 11914  00157A  A680               	btfss	3968,3,c	;volatile
 11915  00157C  D002               	goto	u16780
 11916  00157E  0E01               	movlw	1
 11917  001580  D001               	goto	u16786
 11918  001582                     u16780:
 11919  001582  0E00               	movlw	0
 11920  001584                     u16786:
 11921  001584  0101               	movlb	1	; () banked
 11922  001586  199F               	xorwf	_lastSttDOWN& (0+255),w,b
 11923  001588  A4D8               	btfss	status,2,c
 11924  00158A  D023               	goto	l11263
 11925                           
 11926                           ; BSR set to: 1
 11927                           ;ButtonController.h: 43: if(PORTAbits.RA3) {
 11928  00158C  A680               	btfss	3968,3,c	;volatile
 11929  00158E  D006               	goto	l11249
 11930                           
 11931                           ; BSR set to: 1
 11932                           ;ButtonController.h: 44: holdDOWNcont = 0;
 11933  001590  0E00               	movlw	0
 11934  001592  0101               	movlb	1	; () banked
 11935  001594  6FC6               	movwf	_holdDOWNcont& (0+255),b
 11936                           
 11937                           ; BSR set to: 1
 11938                           ;ButtonController.h: 45: releaseDOWN();
 11939  001596  ECA9  F036         	call	_releaseDOWN	;wreg free
 11940                           
 11941                           ;ButtonController.h: 46: }else {
 11942  00159A  D01B               	goto	l11263
 11943  00159C                     l11249:
 11944                           
 11945                           ;ButtonController.h: 47: if(!DOWNsecurLock)
 11946  00159C  0101               	movlb	1	; () banked
 11947  00159E  51BE               	movf	_DOWNsecurLock& (0+255),w,b
 11948  0015A0  A4D8               	btfss	status,2,c
 11949  0015A2  D002               	goto	l11253
 11950                           
 11951                           ; BSR set to: 1
 11952                           ;ButtonController.h: 48: holdDOWNcont++;
 11953  0015A4  0101               	movlb	1	; () banked
 11954  0015A6  2BC6               	incf	_holdDOWNcont& (0+255),f,b
 11955  0015A8                     l11253:
 11956                           
 11957                           ; BSR set to: 1
 11958                           ;ButtonController.h: 49: if(holdDOWNcont > 9) {
 11959  0015A8  0E09               	movlw	9
 11960  0015AA  0101               	movlb	1	; () banked
 11961  0015AC  65C6               	cpfsgt	_holdDOWNcont& (0+255),b
 11962  0015AE  D00A               	goto	l11261
 11963                           
 11964                           ; BSR set to: 1
 11965                           ;ButtonController.h: 50: if(holdDOWNcont < 26)
 11966  0015B0  0E1A               	movlw	26
 11967  0015B2  0101               	movlb	1	; () banked
 11968  0015B4  61C6               	cpfslt	_holdDOWNcont& (0+255),b
 11969  0015B6  D003               	goto	l11259
 11970                           
 11971                           ; BSR set to: 1
 11972                           ;ButtonController.h: 51: longPressDOWN();
 11973  0015B8  ECD9  F035         	call	_longPressDOWN	;wreg free
 11974  0015BC  D003               	goto	l11261
 11975  0015BE                     l11259:
 11976                           
 11977                           ;ButtonController.h: 52: else
 11978                           ;ButtonController.h: 53: DOWNsecurLock = 1;
 11979  0015BE  0E01               	movlw	1
 11980  0015C0  0101               	movlb	1	; () banked
 11981  0015C2  6FBE               	movwf	_DOWNsecurLock& (0+255),b
 11982  0015C4                     l11261:
 11983                           
 11984                           ;ButtonController.h: 54: }
 11985                           ;ButtonController.h: 55: delay_ms(200);
 11986  0015C4  0E00               	movlw	0
 11987  0015C6  0101               	movlb	1	; () banked
 11988  0015C8  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11989  0015CA  0EC8               	movlw	200
 11990  0015CC  6F00               	movwf	delay_ms@del& (0+255),b
 11991  0015CE  ECF5  F033         	call	_delay_ms	;wreg free
 11992  0015D2                     l11263:
 11993                           
 11994                           ;ButtonController.h: 56: }
 11995                           ;ButtonController.h: 57: }
 11996                           ;ButtonController.h: 58: if(!PORTAbits.RA4 && lastSttRETRO) {
 11997  0015D2  B880               	btfsc	3968,4,c	;volatile
 11998  0015D4  D010               	goto	l868
 11999  0015D6  0101               	movlb	1	; () banked
 12000  0015D8  51A1               	movf	_lastSttRETRO& (0+255),w,b
 12001  0015DA  0101               	movlb	1	; () banked
 12002  0015DC  B4D8               	btfsc	status,2,c
 12003  0015DE  D00B               	goto	l868
 12004                           
 12005                           ; BSR set to: 1
 12006                           ;ButtonController.h: 59: lastSttRETRO = 0;
 12007  0015E0  0E00               	movlw	0
 12008  0015E2  0101               	movlb	1	; () banked
 12009  0015E4  6FA1               	movwf	_lastSttRETRO& (0+255),b
 12010                           
 12011                           ; BSR set to: 1
 12012                           ;ButtonController.h: 60: delay_ms(200);
 12013  0015E6  0E00               	movlw	0
 12014  0015E8  0101               	movlb	1	; () banked
 12015  0015EA  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12016  0015EC  0EC8               	movlw	200
 12017  0015EE  6F00               	movwf	delay_ms@del& (0+255),b
 12018  0015F0  ECF5  F033         	call	_delay_ms	;wreg free
 12019                           
 12020                           ;ButtonController.h: 61: }else if(PORTAbits.RA4 && !lastSttRETRO) {
 12021  0015F4  D044               	goto	l11301
 12022  0015F6                     l868:
 12023  0015F6  A880               	btfss	3968,4,c	;volatile
 12024  0015F8  D016               	goto	l11279
 12025  0015FA  0101               	movlb	1	; () banked
 12026  0015FC  51A1               	movf	_lastSttRETRO& (0+255),w,b
 12027  0015FE  0101               	movlb	1	; () banked
 12028  001600  A4D8               	btfss	status,2,c
 12029  001602  D011               	goto	l11279
 12030                           
 12031                           ; BSR set to: 1
 12032                           ;ButtonController.h: 62: lastSttRETRO = 1;
 12033  001604  0E01               	movlw	1
 12034  001606  0101               	movlb	1	; () banked
 12035  001608  6FA1               	movwf	_lastSttRETRO& (0+255),b
 12036                           
 12037                           ; BSR set to: 1
 12038                           ;ButtonController.h: 63: if(holdRETROcont < 10)
 12039  00160A  0E0A               	movlw	10
 12040  00160C  0101               	movlb	1	; () banked
 12041  00160E  61C8               	cpfslt	_holdRETROcont& (0+255),b
 12042  001610  D002               	goto	l871
 12043                           
 12044                           ; BSR set to: 1
 12045                           ;ButtonController.h: 64: pressRETRO();
 12046  001612  EC57  F029         	call	_pressRETRO	;wreg free
 12047  001616                     l871:
 12048                           
 12049                           ;ButtonController.h: 65: delay_ms(50);
 12050  001616  0E00               	movlw	0
 12051  001618  0101               	movlb	1	; () banked
 12052  00161A  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12053  00161C  0E32               	movlw	50
 12054  00161E  6F00               	movwf	delay_ms@del& (0+255),b
 12055  001620  ECF5  F033         	call	_delay_ms	;wreg free
 12056                           
 12057                           ;ButtonController.h: 66: }else if(PORTAbits.RA4 == lastSttRETRO) {
 12058  001624  D02C               	goto	l11301
 12059  001626                     l11279:
 12060  001626  A880               	btfss	3968,4,c	;volatile
 12061  001628  D002               	goto	u16890
 12062  00162A  0E01               	movlw	1
 12063  00162C  D001               	goto	u16896
 12064  00162E                     u16890:
 12065  00162E  0E00               	movlw	0
 12066  001630                     u16896:
 12067  001630  0101               	movlb	1	; () banked
 12068  001632  19A1               	xorwf	_lastSttRETRO& (0+255),w,b
 12069  001634  A4D8               	btfss	status,2,c
 12070  001636  D023               	goto	l11301
 12071                           
 12072                           ; BSR set to: 1
 12073                           ;ButtonController.h: 67: if(PORTAbits.RA4) {
 12074  001638  A880               	btfss	3968,4,c	;volatile
 12075  00163A  D006               	goto	l11287
 12076                           
 12077                           ; BSR set to: 1
 12078                           ;ButtonController.h: 68: holdRETROcont = 0;
 12079  00163C  0E00               	movlw	0
 12080  00163E  0101               	movlb	1	; () banked
 12081  001640  6FC8               	movwf	_holdRETROcont& (0+255),b
 12082                           
 12083                           ; BSR set to: 1
 12084                           ;ButtonController.h: 69: releaseRETRO();
 12085  001642  ECA3  F036         	call	_releaseRETRO	;wreg free
 12086                           
 12087                           ;ButtonController.h: 70: }else {
 12088  001646  D01B               	goto	l11301
 12089  001648                     l11287:
 12090                           
 12091                           ;ButtonController.h: 71: if(!RETROsecurLock)
 12092  001648  0101               	movlb	1	; () banked
 12093  00164A  51C1               	movf	_RETROsecurLock& (0+255),w,b
 12094  00164C  A4D8               	btfss	status,2,c
 12095  00164E  D002               	goto	l11291
 12096                           
 12097                           ; BSR set to: 1
 12098                           ;ButtonController.h: 72: holdRETROcont++;
 12099  001650  0101               	movlb	1	; () banked
 12100  001652  2BC8               	incf	_holdRETROcont& (0+255),f,b
 12101  001654                     l11291:
 12102                           
 12103                           ; BSR set to: 1
 12104                           ;ButtonController.h: 73: if(holdRETROcont > 9) {
 12105  001654  0E09               	movlw	9
 12106  001656  0101               	movlb	1	; () banked
 12107  001658  65C8               	cpfsgt	_holdRETROcont& (0+255),b
 12108  00165A  D00A               	goto	l11299
 12109                           
 12110                           ; BSR set to: 1
 12111                           ;ButtonController.h: 74: if(holdRETROcont < 26)
 12112  00165C  0E1A               	movlw	26
 12113  00165E  0101               	movlb	1	; () banked
 12114  001660  61C8               	cpfslt	_holdRETROcont& (0+255),b
 12115  001662  D003               	goto	l11297
 12116                           
 12117                           ; BSR set to: 1
 12118                           ;ButtonController.h: 75: longPressRETRO();
 12119  001664  EC8A  F032         	call	_longPressRETRO	;wreg free
 12120  001668  D003               	goto	l11299
 12121  00166A                     l11297:
 12122                           
 12123                           ;ButtonController.h: 76: else
 12124                           ;ButtonController.h: 77: RETROsecurLock = 1;
 12125  00166A  0E01               	movlw	1
 12126  00166C  0101               	movlb	1	; () banked
 12127  00166E  6FC1               	movwf	_RETROsecurLock& (0+255),b
 12128  001670                     l11299:
 12129                           
 12130                           ;ButtonController.h: 78: }
 12131                           ;ButtonController.h: 79: delay_ms(200);
 12132  001670  0E00               	movlw	0
 12133  001672  0101               	movlb	1	; () banked
 12134  001674  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12135  001676  0EC8               	movlw	200
 12136  001678  6F00               	movwf	delay_ms@del& (0+255),b
 12137  00167A  ECF5  F033         	call	_delay_ms	;wreg free
 12138  00167E                     l11301:
 12139                           
 12140                           ;ButtonController.h: 80: }
 12141                           ;ButtonController.h: 81: }
 12142                           ;ButtonController.h: 82: if(!PORTAbits.RA5 && lastSttENTER) {
 12143  00167E  BA80               	btfsc	3968,5,c	;volatile
 12144  001680  D010               	goto	l880
 12145  001682  0101               	movlb	1	; () banked
 12146  001684  51A0               	movf	_lastSttENTER& (0+255),w,b
 12147  001686  0101               	movlb	1	; () banked
 12148  001688  B4D8               	btfsc	status,2,c
 12149  00168A  D00B               	goto	l880
 12150                           
 12151                           ; BSR set to: 1
 12152                           ;ButtonController.h: 83: lastSttENTER = 0;
 12153  00168C  0E00               	movlw	0
 12154  00168E  0101               	movlb	1	; () banked
 12155  001690  6FA0               	movwf	_lastSttENTER& (0+255),b
 12156                           
 12157                           ; BSR set to: 1
 12158                           ;ButtonController.h: 84: delay_ms(200);
 12159  001692  0E00               	movlw	0
 12160  001694  0101               	movlb	1	; () banked
 12161  001696  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12162  001698  0EC8               	movlw	200
 12163  00169A  6F00               	movwf	delay_ms@del& (0+255),b
 12164  00169C  ECF5  F033         	call	_delay_ms	;wreg free
 12165                           
 12166                           ;ButtonController.h: 85: }else if(PORTAbits.RA5 && !lastSttENTER) {
 12167  0016A0  0012               	return	
 12168  0016A2                     l880:
 12169  0016A2  AA80               	btfss	3968,5,c	;volatile
 12170  0016A4  D016               	goto	l11319
 12171  0016A6  0101               	movlb	1	; () banked
 12172  0016A8  51A0               	movf	_lastSttENTER& (0+255),w,b
 12173  0016AA  0101               	movlb	1	; () banked
 12174  0016AC  A4D8               	btfss	status,2,c
 12175  0016AE  D011               	goto	l11319
 12176                           
 12177                           ; BSR set to: 1
 12178                           ;ButtonController.h: 86: lastSttENTER = 1;
 12179  0016B0  0E01               	movlw	1
 12180  0016B2  0101               	movlb	1	; () banked
 12181  0016B4  6FA0               	movwf	_lastSttENTER& (0+255),b
 12182                           
 12183                           ; BSR set to: 1
 12184                           ;ButtonController.h: 87: if(holdENTERcont < 10)
 12185  0016B6  0E0A               	movlw	10
 12186  0016B8  0101               	movlb	1	; () banked
 12187  0016BA  61C7               	cpfslt	_holdENTERcont& (0+255),b
 12188  0016BC  D002               	goto	l11317
 12189                           
 12190                           ; BSR set to: 1
 12191                           ;ButtonController.h: 88: pressENTER();
 12192  0016BE  EC7A  F00F         	call	_pressENTER	;wreg free
 12193  0016C2                     l11317:
 12194                           
 12195                           ;ButtonController.h: 89: delay_ms(50);
 12196  0016C2  0E00               	movlw	0
 12197  0016C4  0101               	movlb	1	; () banked
 12198  0016C6  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12199  0016C8  0E32               	movlw	50
 12200  0016CA  6F00               	movwf	delay_ms@del& (0+255),b
 12201  0016CC  ECF5  F033         	call	_delay_ms	;wreg free
 12202                           
 12203                           ;ButtonController.h: 90: }else if(PORTAbits.RA5 == lastSttENTER) {
 12204  0016D0  0012               	return	
 12205  0016D2                     l11319:
 12206  0016D2  AA80               	btfss	3968,5,c	;volatile
 12207  0016D4  D002               	goto	u17000
 12208  0016D6  0E01               	movlw	1
 12209  0016D8  D001               	goto	u17006
 12210  0016DA                     u17000:
 12211  0016DA  0E00               	movlw	0
 12212  0016DC                     u17006:
 12213  0016DC  0101               	movlb	1	; () banked
 12214  0016DE  19A0               	xorwf	_lastSttENTER& (0+255),w,b
 12215  0016E0  A4D8               	btfss	status,2,c
 12216  0016E2  0012               	return	
 12217                           
 12218                           ; BSR set to: 1
 12219                           ;ButtonController.h: 91: if(PORTAbits.RA5) {
 12220  0016E4  AA80               	btfss	3968,5,c	;volatile
 12221  0016E6  D006               	goto	l11327
 12222                           
 12223                           ; BSR set to: 1
 12224                           ;ButtonController.h: 92: holdENTERcont = 0;
 12225  0016E8  0E00               	movlw	0
 12226  0016EA  0101               	movlb	1	; () banked
 12227  0016EC  6FC7               	movwf	_holdENTERcont& (0+255),b
 12228                           
 12229                           ; BSR set to: 1
 12230                           ;ButtonController.h: 93: releaseENTER();
 12231  0016EE  EC8F  F036         	call	_releaseENTER	;wreg free
 12232                           
 12233                           ;ButtonController.h: 94: }else {
 12234  0016F2  0012               	return	
 12235  0016F4                     l11327:
 12236                           
 12237                           ;ButtonController.h: 95: if(!ENTERsecurLock)
 12238  0016F4  0101               	movlb	1	; () banked
 12239  0016F6  51C0               	movf	_ENTERsecurLock& (0+255),w,b
 12240  0016F8  A4D8               	btfss	status,2,c
 12241  0016FA  D002               	goto	l11331
 12242                           
 12243                           ; BSR set to: 1
 12244                           ;ButtonController.h: 96: holdENTERcont++;
 12245  0016FC  0101               	movlb	1	; () banked
 12246  0016FE  2BC7               	incf	_holdENTERcont& (0+255),f,b
 12247  001700                     l11331:
 12248                           
 12249                           ; BSR set to: 1
 12250                           ;ButtonController.h: 97: if(holdENTERcont > 9) {
 12251  001700  0E09               	movlw	9
 12252  001702  0101               	movlb	1	; () banked
 12253  001704  65C7               	cpfsgt	_holdENTERcont& (0+255),b
 12254  001706  D00A               	goto	l11339
 12255                           
 12256                           ; BSR set to: 1
 12257                           ;ButtonController.h: 98: if(holdENTERcont < 26)
 12258  001708  0E1A               	movlw	26
 12259  00170A  0101               	movlb	1	; () banked
 12260  00170C  61C7               	cpfslt	_holdENTERcont& (0+255),b
 12261  00170E  D003               	goto	l11337
 12262                           
 12263                           ; BSR set to: 1
 12264                           ;ButtonController.h: 99: longPressENTER();
 12265  001710  ECEC  F00C         	call	_longPressENTER	;wreg free
 12266  001714  D003               	goto	l11339
 12267  001716                     l11337:
 12268                           
 12269                           ;ButtonController.h: 100: else
 12270                           ;ButtonController.h: 101: ENTERsecurLock = 1;
 12271  001716  0E01               	movlw	1
 12272  001718  0101               	movlb	1	; () banked
 12273  00171A  6FC0               	movwf	_ENTERsecurLock& (0+255),b
 12274  00171C                     l11339:
 12275                           
 12276                           ;ButtonController.h: 102: }
 12277                           ;ButtonController.h: 103: delay_ms(200);
 12278  00171C  0E00               	movlw	0
 12279  00171E  0101               	movlb	1	; () banked
 12280  001720  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12281  001722  0EC8               	movlw	200
 12282  001724  6F00               	movwf	delay_ms@del& (0+255),b
 12283  001726  ECF5  F033         	call	_delay_ms	;wreg free
 12284  00172A  0012               	return	
 12285  00172C                     __end_of_buttonChecking:
 12286                           	opt stack 0
 12287                           tblptru	equ	0xFF8
 12288                           tblptrh	equ	0xFF7
 12289                           tblptrl	equ	0xFF6
 12290                           tablat	equ	0xFF5
 12291                           prodh	equ	0xFF4
 12292                           prodl	equ	0xFF3
 12293                           intcon	equ	0xFF2
 12294                           postinc0	equ	0xFEE
 12295                           wreg	equ	0xFE8
 12296                           postdec1	equ	0xFE5
 12297                           fsr1l	equ	0xFE1
 12298                           indf2	equ	0xFDF
 12299                           postinc2	equ	0xFDE
 12300                           postdec2	equ	0xFDD
 12301                           fsr2h	equ	0xFDA
 12302                           fsr2l	equ	0xFD9
 12303                           status	equ	0xFD8
 12304                           
 12305 ;; *************** function _releaseUP *****************
 12306 ;; Defined at:
 12307 ;;		line 184 in file "source/DisplayProtocol.h"
 12308 ;; Parameters:    Size  Location     Type
 12309 ;;		None
 12310 ;; Auto vars:     Size  Location     Type
 12311 ;;		None
 12312 ;; Return value:  Size  Location     Type
 12313 ;;                  1    wreg      void 
 12314 ;; Registers used:
 12315 ;;		wreg, status,2
 12316 ;; Tracked objects:
 12317 ;;		On entry : 0/0
 12318 ;;		On exit  : 0/0
 12319 ;;		Unchanged: 0/0
 12320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12321 ;;      Params:         0       0       0       0       0       0       0
 12322 ;;      Locals:         0       0       0       0       0       0       0
 12323 ;;      Temps:          0       0       0       0       0       0       0
 12324 ;;      Totals:         0       0       0       0       0       0       0
 12325 ;;Total ram usage:        0 bytes
 12326 ;; Hardware stack levels used:    1
 12327 ;; Hardware stack levels required when called:   12
 12328 ;; This function calls:
 12329 ;;		Nothing
 12330 ;; This function is called by:
 12331 ;;		_buttonChecking
 12332 ;; This function uses a non-reentrant model
 12333 ;;
 12334                           
 12335                           	psect	text46
 12336  006D3A                     __ptext46:
 12337                           	opt stack 0
 12338  006D3A                     _releaseUP:
 12339                           	opt stack 17
 12340                           
 12341                           ;DisplayProtocol.h: 185: UPisLP = 0;
 12342                           
 12343                           ;incstack = 0
 12344  006D3A  0E00               	movlw	0
 12345  006D3C  6E49               	movwf	_UPisLP,c
 12346                           
 12347                           ;DisplayProtocol.h: 186: UPsecurLock = 0;
 12348  006D3E  0E00               	movlw	0
 12349  006D40  0101               	movlb	1	; () banked
 12350  006D42  6FC2               	movwf	_UPsecurLock& (0+255),b
 12351                           
 12352                           ; BSR set to: 1
 12353  006D44  0012               	return		;funcret
 12354  006D46                     __end_of_releaseUP:
 12355                           	opt stack 0
 12356                           tblptru	equ	0xFF8
 12357                           tblptrh	equ	0xFF7
 12358                           tblptrl	equ	0xFF6
 12359                           tablat	equ	0xFF5
 12360                           prodh	equ	0xFF4
 12361                           prodl	equ	0xFF3
 12362                           intcon	equ	0xFF2
 12363                           postinc0	equ	0xFEE
 12364                           wreg	equ	0xFE8
 12365                           postdec1	equ	0xFE5
 12366                           fsr1l	equ	0xFE1
 12367                           indf2	equ	0xFDF
 12368                           postinc2	equ	0xFDE
 12369                           postdec2	equ	0xFDD
 12370                           fsr2h	equ	0xFDA
 12371                           fsr2l	equ	0xFD9
 12372                           status	equ	0xFD8
 12373                           
 12374 ;; *************** function _releaseRETRO *****************
 12375 ;; Defined at:
 12376 ;;		line 275 in file "source/DisplayProtocol.h"
 12377 ;; Parameters:    Size  Location     Type
 12378 ;;		None
 12379 ;; Auto vars:     Size  Location     Type
 12380 ;;		None
 12381 ;; Return value:  Size  Location     Type
 12382 ;;                  1    wreg      void 
 12383 ;; Registers used:
 12384 ;;		wreg, status,2
 12385 ;; Tracked objects:
 12386 ;;		On entry : 0/0
 12387 ;;		On exit  : 0/0
 12388 ;;		Unchanged: 0/0
 12389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12390 ;;      Params:         0       0       0       0       0       0       0
 12391 ;;      Locals:         0       0       0       0       0       0       0
 12392 ;;      Temps:          0       0       0       0       0       0       0
 12393 ;;      Totals:         0       0       0       0       0       0       0
 12394 ;;Total ram usage:        0 bytes
 12395 ;; Hardware stack levels used:    1
 12396 ;; Hardware stack levels required when called:   12
 12397 ;; This function calls:
 12398 ;;		Nothing
 12399 ;; This function is called by:
 12400 ;;		_buttonChecking
 12401 ;; This function uses a non-reentrant model
 12402 ;;
 12403                           
 12404                           	psect	text47
 12405  006D46                     __ptext47:
 12406                           	opt stack 0
 12407  006D46                     _releaseRETRO:
 12408                           	opt stack 17
 12409                           
 12410                           ;DisplayProtocol.h: 276: RETROisLP = 0;
 12411                           
 12412                           ; BSR set to: 1
 12413                           ;incstack = 0
 12414  006D46  0E00               	movlw	0
 12415  006D48  6E48               	movwf	_RETROisLP,c
 12416                           
 12417                           ;DisplayProtocol.h: 277: RETROsecurLock = 0;
 12418  006D4A  0E00               	movlw	0
 12419  006D4C  0101               	movlb	1	; () banked
 12420  006D4E  6FC1               	movwf	_RETROsecurLock& (0+255),b
 12421                           
 12422                           ; BSR set to: 1
 12423  006D50  0012               	return		;funcret
 12424  006D52                     __end_of_releaseRETRO:
 12425                           	opt stack 0
 12426                           tblptru	equ	0xFF8
 12427                           tblptrh	equ	0xFF7
 12428                           tblptrl	equ	0xFF6
 12429                           tablat	equ	0xFF5
 12430                           prodh	equ	0xFF4
 12431                           prodl	equ	0xFF3
 12432                           intcon	equ	0xFF2
 12433                           postinc0	equ	0xFEE
 12434                           wreg	equ	0xFE8
 12435                           postdec1	equ	0xFE5
 12436                           fsr1l	equ	0xFE1
 12437                           indf2	equ	0xFDF
 12438                           postinc2	equ	0xFDE
 12439                           postdec2	equ	0xFDD
 12440                           fsr2h	equ	0xFDA
 12441                           fsr2l	equ	0xFD9
 12442                           status	equ	0xFD8
 12443                           
 12444 ;; *************** function _releaseENTER *****************
 12445 ;; Defined at:
 12446 ;;		line 422 in file "source/DisplayProtocol.h"
 12447 ;; Parameters:    Size  Location     Type
 12448 ;;		None
 12449 ;; Auto vars:     Size  Location     Type
 12450 ;;		None
 12451 ;; Return value:  Size  Location     Type
 12452 ;;                  1    wreg      void 
 12453 ;; Registers used:
 12454 ;;		wreg, status,2
 12455 ;; Tracked objects:
 12456 ;;		On entry : 0/0
 12457 ;;		On exit  : 0/0
 12458 ;;		Unchanged: 0/0
 12459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12460 ;;      Params:         0       0       0       0       0       0       0
 12461 ;;      Locals:         0       0       0       0       0       0       0
 12462 ;;      Temps:          0       0       0       0       0       0       0
 12463 ;;      Totals:         0       0       0       0       0       0       0
 12464 ;;Total ram usage:        0 bytes
 12465 ;; Hardware stack levels used:    1
 12466 ;; Hardware stack levels required when called:   12
 12467 ;; This function calls:
 12468 ;;		Nothing
 12469 ;; This function is called by:
 12470 ;;		_buttonChecking
 12471 ;; This function uses a non-reentrant model
 12472 ;;
 12473                           
 12474                           	psect	text48
 12475  006D1E                     __ptext48:
 12476                           	opt stack 0
 12477  006D1E                     _releaseENTER:
 12478                           	opt stack 17
 12479                           
 12480                           ;DisplayProtocol.h: 423: ENTERisLP = 0;
 12481                           
 12482                           ; BSR set to: 1
 12483                           ;incstack = 0
 12484  006D1E  0E00               	movlw	0
 12485  006D20  0101               	movlb	1	; () banked
 12486  006D22  6FBF               	movwf	_ENTERisLP& (0+255),b
 12487                           
 12488                           ;DisplayProtocol.h: 424: ENTERsecurLock = 0;
 12489  006D24  0E00               	movlw	0
 12490  006D26  0101               	movlb	1	; () banked
 12491  006D28  6FC0               	movwf	_ENTERsecurLock& (0+255),b
 12492                           
 12493                           ; BSR set to: 1
 12494  006D2A  0012               	return		;funcret
 12495  006D2C                     __end_of_releaseENTER:
 12496                           	opt stack 0
 12497                           tblptru	equ	0xFF8
 12498                           tblptrh	equ	0xFF7
 12499                           tblptrl	equ	0xFF6
 12500                           tablat	equ	0xFF5
 12501                           prodh	equ	0xFF4
 12502                           prodl	equ	0xFF3
 12503                           intcon	equ	0xFF2
 12504                           postinc0	equ	0xFEE
 12505                           wreg	equ	0xFE8
 12506                           postdec1	equ	0xFE5
 12507                           fsr1l	equ	0xFE1
 12508                           indf2	equ	0xFDF
 12509                           postinc2	equ	0xFDE
 12510                           postdec2	equ	0xFDD
 12511                           fsr2h	equ	0xFDA
 12512                           fsr2l	equ	0xFD9
 12513                           status	equ	0xFD8
 12514                           
 12515 ;; *************** function _releaseDOWN *****************
 12516 ;; Defined at:
 12517 ;;		line 229 in file "source/DisplayProtocol.h"
 12518 ;; Parameters:    Size  Location     Type
 12519 ;;		None
 12520 ;; Auto vars:     Size  Location     Type
 12521 ;;		None
 12522 ;; Return value:  Size  Location     Type
 12523 ;;                  1    wreg      void 
 12524 ;; Registers used:
 12525 ;;		wreg, status,2
 12526 ;; Tracked objects:
 12527 ;;		On entry : 0/0
 12528 ;;		On exit  : 0/0
 12529 ;;		Unchanged: 0/0
 12530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12531 ;;      Params:         0       0       0       0       0       0       0
 12532 ;;      Locals:         0       0       0       0       0       0       0
 12533 ;;      Temps:          0       0       0       0       0       0       0
 12534 ;;      Totals:         0       0       0       0       0       0       0
 12535 ;;Total ram usage:        0 bytes
 12536 ;; Hardware stack levels used:    1
 12537 ;; Hardware stack levels required when called:   12
 12538 ;; This function calls:
 12539 ;;		Nothing
 12540 ;; This function is called by:
 12541 ;;		_buttonChecking
 12542 ;; This function uses a non-reentrant model
 12543 ;;
 12544                           
 12545                           	psect	text49
 12546  006D52                     __ptext49:
 12547                           	opt stack 0
 12548  006D52                     _releaseDOWN:
 12549                           	opt stack 17
 12550                           
 12551                           ;DisplayProtocol.h: 230: DOWNisLP = 0;
 12552                           
 12553                           ; BSR set to: 1
 12554                           ;incstack = 0
 12555  006D52  0E00               	movlw	0
 12556  006D54  6E45               	movwf	_DOWNisLP,c
 12557                           
 12558                           ;DisplayProtocol.h: 231: DOWNsecurLock = 0;
 12559  006D56  0E00               	movlw	0
 12560  006D58  0101               	movlb	1	; () banked
 12561  006D5A  6FBE               	movwf	_DOWNsecurLock& (0+255),b
 12562                           
 12563                           ; BSR set to: 1
 12564  006D5C  0012               	return		;funcret
 12565  006D5E                     __end_of_releaseDOWN:
 12566                           	opt stack 0
 12567                           tblptru	equ	0xFF8
 12568                           tblptrh	equ	0xFF7
 12569                           tblptrl	equ	0xFF6
 12570                           tablat	equ	0xFF5
 12571                           prodh	equ	0xFF4
 12572                           prodl	equ	0xFF3
 12573                           intcon	equ	0xFF2
 12574                           postinc0	equ	0xFEE
 12575                           wreg	equ	0xFE8
 12576                           postdec1	equ	0xFE5
 12577                           fsr1l	equ	0xFE1
 12578                           indf2	equ	0xFDF
 12579                           postinc2	equ	0xFDE
 12580                           postdec2	equ	0xFDD
 12581                           fsr2h	equ	0xFDA
 12582                           fsr2l	equ	0xFD9
 12583                           status	equ	0xFD8
 12584                           
 12585 ;; *************** function _pressUP *****************
 12586 ;; Defined at:
 12587 ;;		line 135 in file "source/DisplayProtocol.h"
 12588 ;; Parameters:    Size  Location     Type
 12589 ;;		None
 12590 ;; Auto vars:     Size  Location     Type
 12591 ;;		None
 12592 ;; Return value:  Size  Location     Type
 12593 ;;                  1    wreg      void 
 12594 ;; Registers used:
 12595 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12596 ;; Tracked objects:
 12597 ;;		On entry : 0/0
 12598 ;;		On exit  : 0/0
 12599 ;;		Unchanged: 0/0
 12600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12601 ;;      Params:         0       0       0       0       0       0       0
 12602 ;;      Locals:         0       0       0       0       0       0       0
 12603 ;;      Temps:          0       0       1       0       0       0       0
 12604 ;;      Totals:         0       0       1       0       0       0       0
 12605 ;;Total ram usage:        1 bytes
 12606 ;; Hardware stack levels used:    1
 12607 ;; Hardware stack levels required when called:   13
 12608 ;; This function calls:
 12609 ;;		_chanValDigUP
 12610 ;; This function is called by:
 12611 ;;		_buttonChecking
 12612 ;; This function uses a non-reentrant model
 12613 ;;
 12614                           
 12615                           	psect	text50
 12616  004518                     __ptext50:
 12617                           	opt stack 0
 12618  004518                     _pressUP:
 12619                           	opt stack 16
 12620                           
 12621                           ;DisplayProtocol.h: 136: if (actualScreen == 0 || actualScreen == 4) {
 12622                           
 12623                           ; BSR set to: 1
 12624                           ;incstack = 0
 12625  004518  0101               	movlb	1	; () banked
 12626  00451A  51C3               	movf	_actualScreen& (0+255),w,b
 12627  00451C  B4D8               	btfsc	status,2,c
 12628  00451E  D005               	goto	l10577
 12629                           
 12630                           ; BSR set to: 1
 12631  004520  0E04               	movlw	4
 12632  004522  0101               	movlb	1	; () banked
 12633  004524  19C3               	xorwf	_actualScreen& (0+255),w,b
 12634  004526  A4D8               	btfss	status,2,c
 12635  004528  D00C               	goto	l10583
 12636  00452A                     l10577:
 12637                           
 12638                           ; BSR set to: 1
 12639                           ;DisplayProtocol.h: 137: menuSection++;
 12640  00452A  0101               	movlb	1	; () banked
 12641  00452C  2BCA               	incf	_menuSection& (0+255),f,b
 12642                           
 12643                           ; BSR set to: 1
 12644                           ;DisplayProtocol.h: 138: if (menuSection > 3)
 12645  00452E  0101               	movlb	1	; () banked
 12646  004530  51CA               	movf	_menuSection& (0+255),w,b
 12647  004532  0A80               	xorlw	128
 12648  004534  0F7C               	addlw	-132
 12649  004536  A0D8               	btfss	status,0,c
 12650  004538  0012               	return	
 12651                           
 12652                           ; BSR set to: 1
 12653                           ;DisplayProtocol.h: 139: menuSection = 0;
 12654  00453A  0E00               	movlw	0
 12655  00453C  0101               	movlb	1	; () banked
 12656  00453E  6FCA               	movwf	_menuSection& (0+255),b
 12657                           
 12658                           ; BSR set to: 1
 12659                           ;DisplayProtocol.h: 140: } else if (actualScreen == 1) {
 12660  004540  0012               	return	
 12661  004542                     l10583:
 12662                           
 12663                           ; BSR set to: 1
 12664  004542  0101               	movlb	1	; () banked
 12665  004544  05C3               	decf	_actualScreen& (0+255),w,b
 12666  004546  A4D8               	btfss	status,2,c
 12667  004548  D024               	goto	l10589
 12668                           
 12669                           ; BSR set to: 1
 12670                           ;DisplayProtocol.h: 141: introducido[passSection]++;
 12671  00454A  0101               	movlb	1	; () banked
 12672  00454C  51CB               	movf	_passSection& (0+255),w,b
 12673  00454E  0D01               	mullw	1
 12674  004550  0EAF               	movlw	low _introducido
 12675  004552  24F3               	addwf	prodl,w,c
 12676  004554  6ED9               	movwf	fsr2l,c
 12677  004556  0E01               	movlw	high _introducido
 12678  004558  20F4               	addwfc	prodh,w,c
 12679  00455A  6EDA               	movwf	fsr2h,c
 12680  00455C  2ADF               	incf	indf2,f,c
 12681                           
 12682                           ;DisplayProtocol.h: 142: if (introducido[passSection] > 9)
 12683  00455E  0101               	movlb	1	; () banked
 12684  004560  51CB               	movf	_passSection& (0+255),w,b
 12685  004562  0D01               	mullw	1
 12686  004564  0EAF               	movlw	low _introducido
 12687  004566  24F3               	addwf	prodl,w,c
 12688  004568  6ED9               	movwf	fsr2l,c
 12689  00456A  0E01               	movlw	high _introducido
 12690  00456C  20F4               	addwfc	prodh,w,c
 12691  00456E  6EDA               	movwf	fsr2h,c
 12692  004570  50DF               	movf	indf2,w,c
 12693  004572  0A80               	xorlw	128
 12694  004574  0F76               	addlw	-138
 12695  004576  A0D8               	btfss	status,0,c
 12696  004578  0012               	return	
 12697                           
 12698                           ; BSR set to: 1
 12699                           ;DisplayProtocol.h: 143: introducido[passSection] = 0;
 12700  00457A  0101               	movlb	1	; () banked
 12701  00457C  51CB               	movf	_passSection& (0+255),w,b
 12702  00457E  0D01               	mullw	1
 12703  004580  0EAF               	movlw	low _introducido
 12704  004582  24F3               	addwf	prodl,w,c
 12705  004584  6ED9               	movwf	fsr2l,c
 12706  004586  0E01               	movlw	high _introducido
 12707  004588  20F4               	addwfc	prodh,w,c
 12708  00458A  6EDA               	movwf	fsr2h,c
 12709  00458C  0E00               	movlw	0
 12710  00458E  6EDF               	movwf	indf2,c
 12711                           
 12712                           ; BSR set to: 1
 12713                           ;DisplayProtocol.h: 144: } else if (actualScreen == 2 || actualScreen == 3
 12714  004590  0012               	return	
 12715  004592                     l10589:
 12716                           
 12717                           ; BSR set to: 1
 12718                           ;DisplayProtocol.h: 145: || actualScreen == 10 || actualScreen == 11) {
 12719  004592  0E02               	movlw	2
 12720  004594  0101               	movlb	1	; () banked
 12721  004596  19C3               	xorwf	_actualScreen& (0+255),w,b
 12722  004598  B4D8               	btfsc	status,2,c
 12723  00459A  D00F               	goto	l10597
 12724                           
 12725                           ; BSR set to: 1
 12726  00459C  0E03               	movlw	3
 12727  00459E  0101               	movlb	1	; () banked
 12728  0045A0  19C3               	xorwf	_actualScreen& (0+255),w,b
 12729  0045A2  B4D8               	btfsc	status,2,c
 12730  0045A4  D00A               	goto	l10597
 12731                           
 12732                           ; BSR set to: 1
 12733  0045A6  0E0A               	movlw	10
 12734  0045A8  0101               	movlb	1	; () banked
 12735  0045AA  19C3               	xorwf	_actualScreen& (0+255),w,b
 12736  0045AC  B4D8               	btfsc	status,2,c
 12737  0045AE  D005               	goto	l10597
 12738                           
 12739                           ; BSR set to: 1
 12740  0045B0  0E0B               	movlw	11
 12741  0045B2  0101               	movlb	1	; () banked
 12742  0045B4  19C3               	xorwf	_actualScreen& (0+255),w,b
 12743  0045B6  A4D8               	btfss	status,2,c
 12744  0045B8  D011               	goto	l10603
 12745  0045BA                     l10597:
 12746                           
 12747                           ; BSR set to: 1
 12748                           ;DisplayProtocol.h: 146: selSN = !selSN;
 12749  0045BA  0101               	movlb	1	; () banked
 12750  0045BC  51CC               	movf	_selSN& (0+255),w,b
 12751  0045BE  A4D8               	btfss	status,2,c
 12752  0045C0  D002               	goto	u15630
 12753  0045C2  0E01               	movlw	1
 12754  0045C4  D001               	goto	u15640
 12755  0045C6                     u15630:
 12756  0045C6  0E00               	movlw	0
 12757  0045C8                     u15640:
 12758  0045C8  0101               	movlb	1	; () banked
 12759  0045CA  6FCC               	movwf	_selSN& (0+255),b
 12760                           
 12761                           ; BSR set to: 1
 12762                           ;DisplayProtocol.h: 147: if(selSN > 1)
 12763  0045CC  0E01               	movlw	1
 12764  0045CE  0101               	movlb	1	; () banked
 12765  0045D0  65CC               	cpfsgt	_selSN& (0+255),b
 12766  0045D2  0012               	return	
 12767                           
 12768                           ; BSR set to: 1
 12769                           ;DisplayProtocol.h: 148: selSN = 0;
 12770  0045D4  0E00               	movlw	0
 12771  0045D6  0101               	movlb	1	; () banked
 12772  0045D8  6FCC               	movwf	_selSN& (0+255),b
 12773                           
 12774                           ; BSR set to: 1
 12775                           ;DisplayProtocol.h: 149: }else if(actualScreen == 5) {
 12776  0045DA  0012               	return	
 12777  0045DC                     l10603:
 12778                           
 12779                           ; BSR set to: 1
 12780  0045DC  0E05               	movlw	5
 12781  0045DE  0101               	movlb	1	; () banked
 12782  0045E0  19C3               	xorwf	_actualScreen& (0+255),w,b
 12783  0045E2  B4D8               	btfsc	status,2,c
 12784  0045E4  D008               	goto	l10613
 12785  0045E6  D013               	goto	l10615
 12786  0045E8                     l10607:
 12787                           
 12788                           ; BSR set to: 1
 12789                           ;DisplayProtocol.h: 154: chanValDigUP();
 12790  0045E8  EC7E  F025         	call	_chanValDigUP	;wreg free
 12791                           
 12792                           ;DisplayProtocol.h: 155: break;
 12793  0045EC  0012               	return	
 12794  0045EE                     l10609:
 12795                           
 12796                           ;DisplayProtocol.h: 157: chanVals++;
 12797  0045EE  0101               	movlb	1	; () banked
 12798  0045F0  4BBA               	infsnz	_chanVals& (0+255),f,b
 12799  0045F2  2BBB               	incf	(_chanVals+1)& (0+255),f,b
 12800                           
 12801                           ; BSR set to: 1
 12802                           ;DisplayProtocol.h: 159: }
 12803                           ;DisplayProtocol.h: 160: }
 12804                           
 12805                           ;DisplayProtocol.h: 158: break;
 12806  0045F4  0012               	return	
 12807  0045F6                     l10613:
 12808                           
 12809                           ; BSR set to: 1
 12810  0045F6  0101               	movlb	1	; () banked
 12811  0045F8  51CA               	movf	_menuSection& (0+255),w,b
 12812                           
 12813                           ; Switch size 1, requested type "space"
 12814                           ; Number of cases is 3, Range of values is 0 to 2
 12815                           ; switch strategies available:
 12816                           ; Name         Instructions Cycles
 12817                           ; simple_byte           10     6 (average)
 12818                           ;	Chosen strategy is simple_byte
 12819  0045FA  0A00               	xorlw	0	; case 0
 12820  0045FC  B4D8               	btfsc	status,2,c
 12821  0045FE  0012               	return	
 12822  004600  0A01               	xorlw	1	; case 1
 12823  004602  B4D8               	btfsc	status,2,c
 12824  004604  D7F1               	goto	l10607
 12825  004606  0A03               	xorlw	3	; case 2
 12826  004608  A4D8               	btfss	status,2,c
 12827                           
 12828                           ; BSR set to: 1
 12829                           ;DisplayProtocol.h: 161: }else if(actualScreen == 12)
 12830  00460A  0012               	return	
 12831  00460C  D7F0               	goto	l10609
 12832  00460E                     l10615:
 12833                           
 12834                           ; BSR set to: 1
 12835  00460E  0E0C               	movlw	12
 12836  004610  0101               	movlb	1	; () banked
 12837  004612  19C3               	xorwf	_actualScreen& (0+255),w,b
 12838  004614  A4D8               	btfss	status,2,c
 12839  004616  0012               	return	
 12840                           
 12841                           ; BSR set to: 1
 12842                           ;DisplayProtocol.h: 162: chanValDigUP();
 12843  004618  EC7E  F025         	call	_chanValDigUP	;wreg free
 12844  00461C  0012               	return	
 12845  00461E                     __end_of_pressUP:
 12846                           	opt stack 0
 12847                           tblptru	equ	0xFF8
 12848                           tblptrh	equ	0xFF7
 12849                           tblptrl	equ	0xFF6
 12850                           tablat	equ	0xFF5
 12851                           prodh	equ	0xFF4
 12852                           prodl	equ	0xFF3
 12853                           intcon	equ	0xFF2
 12854                           postinc0	equ	0xFEE
 12855                           wreg	equ	0xFE8
 12856                           postdec1	equ	0xFE5
 12857                           fsr1l	equ	0xFE1
 12858                           indf2	equ	0xFDF
 12859                           postinc2	equ	0xFDE
 12860                           postdec2	equ	0xFDD
 12861                           fsr2h	equ	0xFDA
 12862                           fsr2l	equ	0xFD9
 12863                           status	equ	0xFD8
 12864                           
 12865 ;; *************** function _chanValDigUP *****************
 12866 ;; Defined at:
 12867 ;;		line 28 in file "source/DisplayProtocol.h"
 12868 ;; Parameters:    Size  Location     Type
 12869 ;;		None
 12870 ;; Auto vars:     Size  Location     Type
 12871 ;;		None
 12872 ;; Return value:  Size  Location     Type
 12873 ;;                  1    wreg      void 
 12874 ;; Registers used:
 12875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12876 ;; Tracked objects:
 12877 ;;		On entry : 0/0
 12878 ;;		On exit  : 0/0
 12879 ;;		Unchanged: 0/0
 12880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12881 ;;      Params:         0       0       0       0       0       0       0
 12882 ;;      Locals:         0       0       0       0       0       0       0
 12883 ;;      Temps:          0       0       5       0       0       0       0
 12884 ;;      Totals:         0       0       5       0       0       0       0
 12885 ;;Total ram usage:        5 bytes
 12886 ;; Hardware stack levels used:    1
 12887 ;; Hardware stack levels required when called:   12
 12888 ;; This function calls:
 12889 ;;		Nothing
 12890 ;; This function is called by:
 12891 ;;		_pressUP
 12892 ;; This function uses a non-reentrant model
 12893 ;;
 12894                           
 12895                           	psect	text51
 12896  004AFC                     __ptext51:
 12897                           	opt stack 0
 12898  004AFC                     _chanValDigUP:
 12899                           	opt stack 16
 12900                           
 12901                           ;DisplayProtocol.h: 29: chanValdig[chanValSection]++;
 12902                           
 12903                           ;incstack = 0
 12904  004AFC  0101               	movlb	1	; () banked
 12905  004AFE  519D               	movf	_chanValSection& (0+255),w,b
 12906  004B00  0D01               	mullw	1
 12907  004B02  0EA9               	movlw	low _chanValdig
 12908  004B04  24F3               	addwf	prodl,w,c
 12909  004B06  6ED9               	movwf	fsr2l,c
 12910  004B08  0E01               	movlw	high _chanValdig
 12911  004B0A  20F4               	addwfc	prodh,w,c
 12912  004B0C  6EDA               	movwf	fsr2h,c
 12913  004B0E  2ADF               	incf	indf2,f,c
 12914                           
 12915                           ;DisplayProtocol.h: 30: if(chanValdig[chanValSection] > 9) {
 12916  004B10  0101               	movlb	1	; () banked
 12917  004B12  519D               	movf	_chanValSection& (0+255),w,b
 12918  004B14  0D01               	mullw	1
 12919  004B16  0EA9               	movlw	low _chanValdig
 12920  004B18  24F3               	addwf	prodl,w,c
 12921  004B1A  6ED9               	movwf	fsr2l,c
 12922  004B1C  0E01               	movlw	high _chanValdig
 12923  004B1E  20F4               	addwfc	prodh,w,c
 12924  004B20  6EDA               	movwf	fsr2h,c
 12925  004B22  50DF               	movf	indf2,w,c
 12926  004B24  0A80               	xorlw	128
 12927  004B26  0F76               	addlw	-138
 12928  004B28  A0D8               	btfss	status,0,c
 12929  004B2A  0012               	return	
 12930                           
 12931                           ; BSR set to: 1
 12932                           ;DisplayProtocol.h: 31: chanValdig[chanValSection] = 0;
 12933  004B2C  0101               	movlb	1	; () banked
 12934  004B2E  519D               	movf	_chanValSection& (0+255),w,b
 12935  004B30  0D01               	mullw	1
 12936  004B32  0EA9               	movlw	low _chanValdig
 12937  004B34  24F3               	addwf	prodl,w,c
 12938  004B36  6ED9               	movwf	fsr2l,c
 12939  004B38  0E01               	movlw	high _chanValdig
 12940  004B3A  20F4               	addwfc	prodh,w,c
 12941  004B3C  6EDA               	movwf	fsr2h,c
 12942  004B3E  0E00               	movlw	0
 12943  004B40  6EDF               	movwf	indf2,c
 12944                           
 12945                           ; BSR set to: 1
 12946                           ;DisplayProtocol.h: 32: if(chanValSection > 1 && chanValdig[chanValSection - 1] < 9)
 12947  004B42  0101               	movlb	1	; () banked
 12948  004B44  519D               	movf	_chanValSection& (0+255),w,b
 12949  004B46  0A80               	xorlw	128
 12950  004B48  0F7E               	addlw	-130
 12951  004B4A  A0D8               	btfss	status,0,c
 12952  004B4C  0012               	return	
 12953                           
 12954                           ; BSR set to: 1
 12955  004B4E  0EFF               	movlw	255
 12956  004B50  0101               	movlb	1	; () banked
 12957  004B52  6F00               	movwf	??_chanValDigUP& (0+255),b
 12958  004B54  0EFF               	movlw	255
 12959  004B56  0101               	movlb	1	; () banked
 12960  004B58  6F01               	movwf	(??_chanValDigUP+1)& (0+255),b
 12961  004B5A  C19D  F102         	movff	_chanValSection,??_chanValDigUP+2
 12962  004B5E  0101               	movlb	1	; () banked
 12963  004B60  6B03               	clrf	(??_chanValDigUP+3)& (0+255),b
 12964  004B62  BF02               	btfsc	(??_chanValDigUP+2)& (0+255),7,b
 12965  004B64  0703               	decf	(??_chanValDigUP+3)& (0+255),f,b
 12966  004B66  0101               	movlb	1	; () banked
 12967  004B68  5100               	movf	??_chanValDigUP& (0+255),w,b
 12968  004B6A  0101               	movlb	1	; () banked
 12969  004B6C  2702               	addwf	(??_chanValDigUP+2)& (0+255),f,b
 12970  004B6E  0101               	movlb	1	; () banked
 12971  004B70  5101               	movf	(??_chanValDigUP+1)& (0+255),w,b
 12972  004B72  0101               	movlb	1	; () banked
 12973  004B74  2303               	addwfc	(??_chanValDigUP+3)& (0+255),f,b
 12974  004B76  0EA9               	movlw	low _chanValdig
 12975  004B78  0101               	movlb	1	; () banked
 12976  004B7A  2502               	addwf	(??_chanValDigUP+2)& (0+255),w,b
 12977  004B7C  6ED9               	movwf	fsr2l,c
 12978  004B7E  0E01               	movlw	high _chanValdig
 12979  004B80  0101               	movlb	1	; () banked
 12980  004B82  2103               	addwfc	(??_chanValDigUP+3)& (0+255),w,b
 12981  004B84  6EDA               	movwf	fsr2h,c
 12982  004B86  50DF               	movf	indf2,w,c
 12983  004B88  0A80               	xorlw	128
 12984  004B8A  0F77               	addlw	-137
 12985  004B8C  B0D8               	btfsc	status,0,c
 12986  004B8E  0012               	return	
 12987                           
 12988                           ; BSR set to: 1
 12989                           ;DisplayProtocol.h: 33: chanValdig[chanValSection - 1]++;
 12990  004B90  0EFF               	movlw	255
 12991  004B92  0101               	movlb	1	; () banked
 12992  004B94  6F00               	movwf	??_chanValDigUP& (0+255),b
 12993  004B96  0EFF               	movlw	255
 12994  004B98  0101               	movlb	1	; () banked
 12995  004B9A  6F01               	movwf	(??_chanValDigUP+1)& (0+255),b
 12996  004B9C  C19D  F102         	movff	_chanValSection,??_chanValDigUP+2
 12997  004BA0  0101               	movlb	1	; () banked
 12998  004BA2  6B03               	clrf	(??_chanValDigUP+3)& (0+255),b
 12999  004BA4  BF02               	btfsc	(??_chanValDigUP+2)& (0+255),7,b
 13000  004BA6  0703               	decf	(??_chanValDigUP+3)& (0+255),f,b
 13001  004BA8  0101               	movlb	1	; () banked
 13002  004BAA  5100               	movf	??_chanValDigUP& (0+255),w,b
 13003  004BAC  0101               	movlb	1	; () banked
 13004  004BAE  2702               	addwf	(??_chanValDigUP+2)& (0+255),f,b
 13005  004BB0  0101               	movlb	1	; () banked
 13006  004BB2  5101               	movf	(??_chanValDigUP+1)& (0+255),w,b
 13007  004BB4  0101               	movlb	1	; () banked
 13008  004BB6  2303               	addwfc	(??_chanValDigUP+3)& (0+255),f,b
 13009  004BB8  0EA9               	movlw	low _chanValdig
 13010  004BBA  0101               	movlb	1	; () banked
 13011  004BBC  2502               	addwf	(??_chanValDigUP+2)& (0+255),w,b
 13012  004BBE  6ED9               	movwf	fsr2l,c
 13013  004BC0  0E01               	movlw	high _chanValdig
 13014  004BC2  0101               	movlb	1	; () banked
 13015  004BC4  2103               	addwfc	(??_chanValDigUP+3)& (0+255),w,b
 13016  004BC6  6EDA               	movwf	fsr2h,c
 13017  004BC8  2ADF               	incf	indf2,f,c
 13018                           
 13019                           ; BSR set to: 1
 13020  004BCA  0012               	return	
 13021  004BCC                     __end_of_chanValDigUP:
 13022                           	opt stack 0
 13023                           tblptru	equ	0xFF8
 13024                           tblptrh	equ	0xFF7
 13025                           tblptrl	equ	0xFF6
 13026                           tablat	equ	0xFF5
 13027                           prodh	equ	0xFF4
 13028                           prodl	equ	0xFF3
 13029                           intcon	equ	0xFF2
 13030                           postinc0	equ	0xFEE
 13031                           wreg	equ	0xFE8
 13032                           postdec1	equ	0xFE5
 13033                           fsr1l	equ	0xFE1
 13034                           indf2	equ	0xFDF
 13035                           postinc2	equ	0xFDE
 13036                           postdec2	equ	0xFDD
 13037                           fsr2h	equ	0xFDA
 13038                           fsr2l	equ	0xFD9
 13039                           status	equ	0xFD8
 13040                           
 13041 ;; *************** function _pressRETRO *****************
 13042 ;; Defined at:
 13043 ;;		line 234 in file "source/DisplayProtocol.h"
 13044 ;; Parameters:    Size  Location     Type
 13045 ;;		None
 13046 ;; Auto vars:     Size  Location     Type
 13047 ;;		None
 13048 ;; Return value:  Size  Location     Type
 13049 ;;                  1    wreg      void 
 13050 ;; Registers used:
 13051 ;;		wreg, status,2, status,0, cstack
 13052 ;; Tracked objects:
 13053 ;;		On entry : 0/0
 13054 ;;		On exit  : 0/0
 13055 ;;		Unchanged: 0/0
 13056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13057 ;;      Params:         0       0       0       0       0       0       0
 13058 ;;      Locals:         0       0       0       0       0       0       0
 13059 ;;      Temps:          0       0       0       0       0       0       0
 13060 ;;      Totals:         0       0       0       0       0       0       0
 13061 ;;Total ram usage:        0 bytes
 13062 ;; Hardware stack levels used:    1
 13063 ;; Hardware stack levels required when called:   14
 13064 ;; This function calls:
 13065 ;;		_initProtocoll
 13066 ;; This function is called by:
 13067 ;;		_buttonChecking
 13068 ;; This function uses a non-reentrant model
 13069 ;;
 13070                           
 13071                           	psect	text52
 13072  0052AE                     __ptext52:
 13073                           	opt stack 0
 13074  0052AE                     _pressRETRO:
 13075                           	opt stack 15
 13076                           
 13077                           ;DisplayProtocol.h: 235: if (actualScreen == 1) {
 13078                           
 13079                           ; BSR set to: 1
 13080                           ;incstack = 0
 13081  0052AE  0101               	movlb	1	; () banked
 13082  0052B0  05C3               	decf	_actualScreen& (0+255),w,b
 13083  0052B2  A4D8               	btfss	status,2,c
 13084  0052B4  D004               	goto	l10707
 13085                           
 13086                           ; BSR set to: 1
 13087                           ;DisplayProtocol.h: 236: actualScreen = 0;
 13088  0052B6  0E00               	movlw	0
 13089  0052B8  0101               	movlb	1	; () banked
 13090  0052BA  6FC3               	movwf	_actualScreen& (0+255),b
 13091                           
 13092                           ;DisplayProtocol.h: 237: }else if (actualScreen == 2 || actualScreen == 3
 13093  0052BC  0012               	return	
 13094  0052BE                     l10707:
 13095                           
 13096                           ; BSR set to: 1
 13097                           ;DisplayProtocol.h: 238: || actualScreen == 10) {
 13098  0052BE  0E02               	movlw	2
 13099  0052C0  0101               	movlb	1	; () banked
 13100  0052C2  19C3               	xorwf	_actualScreen& (0+255),w,b
 13101  0052C4  B4D8               	btfsc	status,2,c
 13102  0052C6  D00A               	goto	l653
 13103                           
 13104                           ; BSR set to: 1
 13105  0052C8  0E03               	movlw	3
 13106  0052CA  0101               	movlb	1	; () banked
 13107  0052CC  19C3               	xorwf	_actualScreen& (0+255),w,b
 13108  0052CE  B4D8               	btfsc	status,2,c
 13109  0052D0  D005               	goto	l653
 13110                           
 13111                           ; BSR set to: 1
 13112  0052D2  0E0A               	movlw	10
 13113  0052D4  0101               	movlb	1	; () banked
 13114  0052D6  19C3               	xorwf	_actualScreen& (0+255),w,b
 13115  0052D8  A4D8               	btfss	status,2,c
 13116  0052DA  D003               	goto	l10713
 13117  0052DC                     l653:
 13118                           
 13119                           ; BSR set to: 1
 13120                           ;DisplayProtocol.h: 239: actualScreen = tempLastScreen;
 13121  0052DC  C0BE  F1C3         	movff	_tempLastScreen,_actualScreen
 13122                           
 13123                           ;DisplayProtocol.h: 240: }else if(actualScreen == 5) {
 13124  0052E0  0012               	return	
 13125  0052E2                     l10713:
 13126                           
 13127                           ; BSR set to: 1
 13128  0052E2  0E05               	movlw	5
 13129  0052E4  0101               	movlb	1	; () banked
 13130  0052E6  19C3               	xorwf	_actualScreen& (0+255),w,b
 13131  0052E8  A4D8               	btfss	status,2,c
 13132  0052EA  D015               	goto	l10725
 13133                           
 13134                           ; BSR set to: 1
 13135                           ;DisplayProtocol.h: 241: if(menuSection != 2) {
 13136  0052EC  0E02               	movlw	2
 13137  0052EE  0101               	movlb	1	; () banked
 13138  0052F0  19CA               	xorwf	_menuSection& (0+255),w,b
 13139  0052F2  B4D8               	btfsc	status,2,c
 13140  0052F4  D00C               	goto	l10723
 13141                           
 13142                           ; BSR set to: 1
 13143                           ;DisplayProtocol.h: 242: chanValSection++;
 13144  0052F6  0101               	movlb	1	; () banked
 13145  0052F8  2B9D               	incf	_chanValSection& (0+255),f,b
 13146                           
 13147                           ; BSR set to: 1
 13148                           ;DisplayProtocol.h: 243: if(chanValSection > 5)
 13149  0052FA  0101               	movlb	1	; () banked
 13150  0052FC  519D               	movf	_chanValSection& (0+255),w,b
 13151  0052FE  0A80               	xorlw	128
 13152  005300  0F7A               	addlw	-134
 13153  005302  A0D8               	btfss	status,0,c
 13154  005304  0012               	return	
 13155                           
 13156                           ; BSR set to: 1
 13157                           ;DisplayProtocol.h: 244: chanValSection = 0;
 13158  005306  0E00               	movlw	0
 13159  005308  0101               	movlb	1	; () banked
 13160  00530A  6F9D               	movwf	_chanValSection& (0+255),b
 13161                           
 13162                           ; BSR set to: 1
 13163                           ;DisplayProtocol.h: 245: }else
 13164  00530C  0012               	return	
 13165  00530E                     l10723:
 13166                           
 13167                           ; BSR set to: 1
 13168                           ;DisplayProtocol.h: 246: actualScreen = 4;
 13169  00530E  0E04               	movlw	4
 13170  005310  0101               	movlb	1	; () banked
 13171  005312  6FC3               	movwf	_actualScreen& (0+255),b
 13172                           
 13173                           ; BSR set to: 1
 13174                           ;DisplayProtocol.h: 247: }else if(actualScreen == 11)
 13175  005314  0012               	return	
 13176  005316                     l10725:
 13177                           
 13178                           ; BSR set to: 1
 13179  005316  0E0B               	movlw	11
 13180  005318  0101               	movlb	1	; () banked
 13181  00531A  19C3               	xorwf	_actualScreen& (0+255),w,b
 13182  00531C  A4D8               	btfss	status,2,c
 13183  00531E  D004               	goto	l10729
 13184                           
 13185                           ; BSR set to: 1
 13186                           ;DisplayProtocol.h: 248: actualScreen = 4;
 13187  005320  0E04               	movlw	4
 13188  005322  0101               	movlb	1	; () banked
 13189  005324  6FC3               	movwf	_actualScreen& (0+255),b
 13190  005326  0012               	return	
 13191  005328                     l10729:
 13192                           
 13193                           ; BSR set to: 1
 13194                           ;DisplayProtocol.h: 249: else if(actualScreen == 12) {
 13195  005328  0E0C               	movlw	12
 13196  00532A  0101               	movlb	1	; () banked
 13197  00532C  19C3               	xorwf	_actualScreen& (0+255),w,b
 13198  00532E  A4D8               	btfss	status,2,c
 13199  005330  D00C               	goto	l10737
 13200                           
 13201                           ; BSR set to: 1
 13202                           ;DisplayProtocol.h: 250: chanValSection++;
 13203  005332  0101               	movlb	1	; () banked
 13204  005334  2B9D               	incf	_chanValSection& (0+255),f,b
 13205                           
 13206                           ; BSR set to: 1
 13207                           ;DisplayProtocol.h: 251: if(chanValSection > 5)
 13208  005336  0101               	movlb	1	; () banked
 13209  005338  519D               	movf	_chanValSection& (0+255),w,b
 13210  00533A  0A80               	xorlw	128
 13211  00533C  0F7A               	addlw	-134
 13212  00533E  A0D8               	btfss	status,0,c
 13213  005340  0012               	return	
 13214                           
 13215                           ; BSR set to: 1
 13216                           ;DisplayProtocol.h: 252: chanValSection = 0;
 13217  005342  0E00               	movlw	0
 13218  005344  0101               	movlb	1	; () banked
 13219  005346  6F9D               	movwf	_chanValSection& (0+255),b
 13220                           
 13221                           ; BSR set to: 1
 13222                           ;DisplayProtocol.h: 253: }else if(actualScreen == 13) {
 13223  005348  0012               	return	
 13224  00534A                     l10737:
 13225                           
 13226                           ; BSR set to: 1
 13227  00534A  0E0D               	movlw	13
 13228  00534C  0101               	movlb	1	; () banked
 13229  00534E  19C3               	xorwf	_actualScreen& (0+255),w,b
 13230  005350  A4D8               	btfss	status,2,c
 13231  005352  0012               	return	
 13232                           
 13233                           ; BSR set to: 1
 13234                           ;DisplayProtocol.h: 254: initProtocoll(1);
 13235  005354  0E01               	movlw	1
 13236  005356  EC39  F034         	call	_initProtocoll
 13237  00535A  0012               	return	
 13238  00535C                     __end_of_pressRETRO:
 13239                           	opt stack 0
 13240                           tblptru	equ	0xFF8
 13241                           tblptrh	equ	0xFF7
 13242                           tblptrl	equ	0xFF6
 13243                           tablat	equ	0xFF5
 13244                           prodh	equ	0xFF4
 13245                           prodl	equ	0xFF3
 13246                           intcon	equ	0xFF2
 13247                           postinc0	equ	0xFEE
 13248                           wreg	equ	0xFE8
 13249                           postdec1	equ	0xFE5
 13250                           fsr1l	equ	0xFE1
 13251                           indf2	equ	0xFDF
 13252                           postinc2	equ	0xFDE
 13253                           postdec2	equ	0xFDD
 13254                           fsr2h	equ	0xFDA
 13255                           fsr2l	equ	0xFD9
 13256                           status	equ	0xFD8
 13257                           
 13258 ;; *************** function _pressENTER *****************
 13259 ;; Defined at:
 13260 ;;		line 280 in file "source/DisplayProtocol.h"
 13261 ;; Parameters:    Size  Location     Type
 13262 ;;		None
 13263 ;; Auto vars:     Size  Location     Type
 13264 ;;		None
 13265 ;; Return value:  Size  Location     Type
 13266 ;;                  1    wreg      void 
 13267 ;; Registers used:
 13268 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13269 ;; Tracked objects:
 13270 ;;		On entry : 0/0
 13271 ;;		On exit  : 0/0
 13272 ;;		Unchanged: 0/0
 13273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13274 ;;      Params:         0       0       0       0       0       0       0
 13275 ;;      Locals:         0       0       0       0       0       0       0
 13276 ;;      Temps:          0       0       0       0       0       0       0
 13277 ;;      Totals:         0       0       0       0       0       0       0
 13278 ;;Total ram usage:        0 bytes
 13279 ;; Hardware stack levels used:    1
 13280 ;; Hardware stack levels required when called:   17
 13281 ;; This function calls:
 13282 ;;		_checkPass
 13283 ;;		_confirmEdition
 13284 ;;		_desintegrator
 13285 ;;		_initCalib
 13286 ;;		_initProtocoll
 13287 ;;		_setPWM2duty
 13288 ;; This function is called by:
 13289 ;;		_buttonChecking
 13290 ;; This function uses a non-reentrant model
 13291 ;;
 13292                           
 13293                           	psect	text53
 13294  001EF4                     __ptext53:
 13295                           	opt stack 0
 13296  001EF4                     _pressENTER:
 13297                           	opt stack 12
 13298                           
 13299                           ;DisplayProtocol.h: 281: if (actualScreen == 1) {
 13300                           
 13301                           ;incstack = 0
 13302  001EF4  0101               	movlb	1	; () banked
 13303  001EF6  05C3               	decf	_actualScreen& (0+255),w,b
 13304  001EF8  A4D8               	btfss	status,2,c
 13305  001EFA  D018               	goto	l10777
 13306                           
 13307                           ; BSR set to: 1
 13308                           ;DisplayProtocol.h: 282: passSection++;
 13309  001EFC  0101               	movlb	1	; () banked
 13310  001EFE  2BCB               	incf	_passSection& (0+255),f,b
 13311                           
 13312                           ; BSR set to: 1
 13313                           ;DisplayProtocol.h: 283: if (passSection > 3) {
 13314  001F00  0101               	movlb	1	; () banked
 13315  001F02  51CB               	movf	_passSection& (0+255),w,b
 13316  001F04  0A80               	xorlw	128
 13317  001F06  0F7C               	addlw	-132
 13318  001F08  A0D8               	btfss	status,0,c
 13319  001F0A  0012               	return	
 13320                           
 13321                           ; BSR set to: 1
 13322                           ;DisplayProtocol.h: 284: passSection = 0;
 13323  001F0C  0E00               	movlw	0
 13324  001F0E  0101               	movlb	1	; () banked
 13325  001F10  6FCB               	movwf	_passSection& (0+255),b
 13326                           
 13327                           ; BSR set to: 1
 13328                           ;DisplayProtocol.h: 285: if (checkPass())
 13329  001F12  EC85  F02E         	call	_checkPass	;wreg free
 13330  001F16  0900               	iorlw	0
 13331  001F18  B4D8               	btfsc	status,2,c
 13332  001F1A  D004               	goto	l10775
 13333                           
 13334                           ;DisplayProtocol.h: 286: actualScreen = 8;
 13335  001F1C  0E08               	movlw	8
 13336  001F1E  0101               	movlb	1	; () banked
 13337  001F20  6FC3               	movwf	_actualScreen& (0+255),b
 13338  001F22  0012               	return	
 13339  001F24                     l10775:
 13340                           
 13341                           ;DisplayProtocol.h: 287: else
 13342                           ;DisplayProtocol.h: 288: actualScreen = 7;
 13343  001F24  0E07               	movlw	7
 13344  001F26  0101               	movlb	1	; () banked
 13345  001F28  6FC3               	movwf	_actualScreen& (0+255),b
 13346                           
 13347                           ; BSR set to: 1
 13348                           ;DisplayProtocol.h: 289: }
 13349                           ;DisplayProtocol.h: 290: }else if(actualScreen == 4) {
 13350                           
 13351                           ; BSR set to: 1
 13352  001F2A  0012               	return	
 13353  001F2C                     l10777:
 13354                           
 13355                           ; BSR set to: 1
 13356  001F2C  0E04               	movlw	4
 13357  001F2E  0101               	movlb	1	; () banked
 13358  001F30  19C3               	xorwf	_actualScreen& (0+255),w,b
 13359  001F32  B4D8               	btfsc	status,2,c
 13360  001F34  D038               	goto	l10801
 13361  001F36  D046               	goto	l10803
 13362  001F38                     l691:
 13363                           
 13364                           ; BSR set to: 1
 13365                           ;DisplayProtocol.h: 293: tempLastScreen = actualScreen;
 13366  001F38  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 13367                           
 13368                           ; BSR set to: 1
 13369                           ;DisplayProtocol.h: 294: if(processStarted) {
 13370  001F3C  0100               	movlb	0	; () banked
 13371  001F3E  51BB               	movf	_processStarted& (0+255),w,b
 13372  001F40  B4D8               	btfsc	status,2,c
 13373  001F42  D007               	goto	l10785
 13374                           
 13375                           ; BSR set to: 0
 13376                           ;DisplayProtocol.h: 295: actualScreen = 3;
 13377  001F44  0E03               	movlw	3
 13378  001F46  0101               	movlb	1	; () banked
 13379  001F48  6FC3               	movwf	_actualScreen& (0+255),b
 13380                           
 13381                           ;DisplayProtocol.h: 296: selSN = 0;
 13382  001F4A  0E00               	movlw	0
 13383  001F4C  0101               	movlb	1	; () banked
 13384  001F4E  6FCC               	movwf	_selSN& (0+255),b
 13385                           
 13386                           ;DisplayProtocol.h: 297: }else {
 13387  001F50  0012               	return	
 13388  001F52                     l10785:
 13389                           
 13390                           ;DisplayProtocol.h: 298: actualScreen = 2;
 13391  001F52  0E02               	movlw	2
 13392  001F54  0101               	movlb	1	; () banked
 13393  001F56  6FC3               	movwf	_actualScreen& (0+255),b
 13394                           
 13395                           ;DisplayProtocol.h: 299: selSN = 1;
 13396  001F58  0E01               	movlw	1
 13397  001F5A  0101               	movlb	1	; () banked
 13398  001F5C  6FCC               	movwf	_selSN& (0+255),b
 13399                           
 13400                           ; BSR set to: 1
 13401                           ;DisplayProtocol.h: 300: }
 13402                           ;DisplayProtocol.h: 301: break;
 13403  001F5E  0012               	return	
 13404  001F60                     l695:
 13405                           
 13406                           ; BSR set to: 1
 13407                           ;DisplayProtocol.h: 303: chanValf = kgXcorte;
 13408  001F60  C18F  F1B7         	movff	_kgXcorte,_chanValf
 13409  001F64  C190  F1B8         	movff	_kgXcorte+1,_chanValf+1
 13410  001F68  C191  F1B9         	movff	_kgXcorte+2,_chanValf+2
 13411                           
 13412                           ; BSR set to: 1
 13413                           ;DisplayProtocol.h: 304: desintegrator();
 13414  001F6C  EC19  F016         	call	_desintegrator	;wreg free
 13415                           
 13416                           ;DisplayProtocol.h: 305: actualScreen = 5;
 13417  001F70  0E05               	movlw	5
 13418  001F72  0101               	movlb	1	; () banked
 13419  001F74  6FC3               	movwf	_actualScreen& (0+255),b
 13420                           
 13421                           ;DisplayProtocol.h: 306: break;
 13422  001F76  0012               	return	
 13423  001F78                     l696:
 13424                           
 13425                           ; BSR set to: 1
 13426                           ;DisplayProtocol.h: 308: tempLastScreen = actualScreen;
 13427  001F78  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 13428                           
 13429                           ;DisplayProtocol.h: 309: chanVals = numCortes;
 13430  001F7C  C0C6  F1BA         	movff	_numCortes,_chanVals
 13431  001F80  C0C7  F1BB         	movff	_numCortes+1,_chanVals+1
 13432                           
 13433                           ; BSR set to: 1
 13434                           ;DisplayProtocol.h: 310: actualScreen = 5;
 13435  001F84  0E05               	movlw	5
 13436  001F86  0101               	movlb	1	; () banked
 13437  001F88  6FC3               	movwf	_actualScreen& (0+255),b
 13438                           
 13439                           ;DisplayProtocol.h: 311: break;
 13440  001F8A  0012               	return	
 13441  001F8C                     l10793:
 13442                           
 13443                           ; BSR set to: 1
 13444                           ;DisplayProtocol.h: 313: if(!processStarted) {
 13445  001F8C  0100               	movlb	0	; () banked
 13446  001F8E  51BB               	movf	_processStarted& (0+255),w,b
 13447  001F90  A4D8               	btfss	status,2,c
 13448  001F92  0012               	return	
 13449                           
 13450                           ; BSR set to: 0
 13451                           ;DisplayProtocol.h: 314: tempLastScreen = actualScreen;
 13452  001F94  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 13453                           
 13454                           ; BSR set to: 0
 13455                           ;DisplayProtocol.h: 315: selSN = 1;
 13456  001F98  0E01               	movlw	1
 13457  001F9A  0101               	movlb	1	; () banked
 13458  001F9C  6FCC               	movwf	_selSN& (0+255),b
 13459                           
 13460                           ;DisplayProtocol.h: 316: actualScreen = 11;
 13461  001F9E  0E0B               	movlw	11
 13462  001FA0  0101               	movlb	1	; () banked
 13463  001FA2  6FC3               	movwf	_actualScreen& (0+255),b
 13464                           
 13465                           ; BSR set to: 1
 13466                           ;DisplayProtocol.h: 319: }
 13467                           ;DisplayProtocol.h: 320: }
 13468                           
 13469                           ; BSR set to: 1
 13470                           ;DisplayProtocol.h: 317: }
 13471                           ;DisplayProtocol.h: 318: break;
 13472  001FA4  0012               	return	
 13473  001FA6                     l10801:
 13474                           
 13475                           ; BSR set to: 1
 13476  001FA6  0101               	movlb	1	; () banked
 13477  001FA8  51CA               	movf	_menuSection& (0+255),w,b
 13478                           
 13479                           ; Switch size 1, requested type "space"
 13480                           ; Number of cases is 4, Range of values is 0 to 3
 13481                           ; switch strategies available:
 13482                           ; Name         Instructions Cycles
 13483                           ; simple_byte           13     7 (average)
 13484                           ;	Chosen strategy is simple_byte
 13485  001FAA  0A00               	xorlw	0	; case 0
 13486  001FAC  B4D8               	btfsc	status,2,c
 13487  001FAE  D7C4               	goto	l691
 13488  001FB0  0A01               	xorlw	1	; case 1
 13489  001FB2  B4D8               	btfsc	status,2,c
 13490  001FB4  D7D5               	goto	l695
 13491  001FB6  0A03               	xorlw	3	; case 2
 13492  001FB8  B4D8               	btfsc	status,2,c
 13493  001FBA  D7DE               	goto	l696
 13494  001FBC  0A01               	xorlw	1	; case 3
 13495  001FBE  A4D8               	btfss	status,2,c
 13496                           
 13497                           ; BSR set to: 1
 13498                           ;DisplayProtocol.h: 321: }else if(actualScreen == 7)
 13499  001FC0  0012               	return	
 13500  001FC2  D7E4               	goto	l10793
 13501  001FC4                     l10803:
 13502                           
 13503                           ; BSR set to: 1
 13504  001FC4  0E07               	movlw	7
 13505  001FC6  0101               	movlb	1	; () banked
 13506  001FC8  19C3               	xorwf	_actualScreen& (0+255),w,b
 13507  001FCA  A4D8               	btfss	status,2,c
 13508  001FCC  D004               	goto	l10807
 13509                           
 13510                           ; BSR set to: 1
 13511                           ;DisplayProtocol.h: 322: actualScreen = 1;
 13512  001FCE  0E01               	movlw	1
 13513  001FD0  0101               	movlb	1	; () banked
 13514  001FD2  6FC3               	movwf	_actualScreen& (0+255),b
 13515  001FD4  0012               	return	
 13516  001FD6                     l10807:
 13517                           
 13518                           ; BSR set to: 1
 13519                           ;DisplayProtocol.h: 323: else if(actualScreen == 6) {
 13520  001FD6  0E06               	movlw	6
 13521  001FD8  0101               	movlb	1	; () banked
 13522  001FDA  19C3               	xorwf	_actualScreen& (0+255),w,b
 13523  001FDC  B4D8               	btfsc	status,2,c
 13524  001FDE  0012               	return	
 13525                           
 13526                           ; BSR set to: 1
 13527                           
 13528                           ; BSR set to: 1
 13529                           
 13530                           ; BSR set to: 1
 13531                           ;DisplayProtocol.h: 325: }else if(actualScreen == 5) {
 13532  001FE0  0E05               	movlw	5
 13533  001FE2  0101               	movlb	1	; () banked
 13534  001FE4  19C3               	xorwf	_actualScreen& (0+255),w,b
 13535  001FE6  A4D8               	btfss	status,2,c
 13536  001FE8  D018               	goto	l10823
 13537                           
 13538                           ; BSR set to: 1
 13539                           ;DisplayProtocol.h: 326: if(menuSection != 2) {
 13540  001FEA  0E02               	movlw	2
 13541  001FEC  0101               	movlb	1	; () banked
 13542  001FEE  19CA               	xorwf	_menuSection& (0+255),w,b
 13543  001FF0  B4D8               	btfsc	status,2,c
 13544  001FF2  D009               	goto	l10821
 13545                           
 13546                           ; BSR set to: 1
 13547                           ;DisplayProtocol.h: 327: chanValSection--;
 13548  001FF4  0101               	movlb	1	; () banked
 13549  001FF6  079D               	decf	_chanValSection& (0+255),f,b
 13550                           
 13551                           ; BSR set to: 1
 13552                           ;DisplayProtocol.h: 328: if(chanValSection < 0)
 13553  001FF8  0101               	movlb	1	; () banked
 13554  001FFA  AF9D               	btfss	_chanValSection& (0+255),7,b
 13555  001FFC  0012               	return	
 13556                           
 13557                           ; BSR set to: 1
 13558                           ;DisplayProtocol.h: 329: chanValSection = 5;
 13559  001FFE  0E05               	movlw	5
 13560  002000  0101               	movlb	1	; () banked
 13561  002002  6F9D               	movwf	_chanValSection& (0+255),b
 13562                           
 13563                           ; BSR set to: 1
 13564                           ;DisplayProtocol.h: 330: }else
 13565  002004  0012               	return	
 13566  002006                     l10821:
 13567                           
 13568                           ; BSR set to: 1
 13569                           ;DisplayProtocol.h: 331: confirmEdition(!processStarted);
 13570  002006  0100               	movlb	0	; () banked
 13571  002008  51BB               	movf	_processStarted& (0+255),w,b
 13572  00200A  A4D8               	btfss	status,2,c
 13573  00200C  D002               	goto	u16210
 13574  00200E  0E01               	movlw	1
 13575  002010  D001               	goto	u16220
 13576  002012                     u16210:
 13577  002012  0E00               	movlw	0
 13578  002014                     u16220:
 13579  002014  EC9B  F028         	call	_confirmEdition
 13580                           
 13581                           ;DisplayProtocol.h: 332: }else if(actualScreen == 2) {
 13582  002018  0012               	return	
 13583  00201A                     l10823:
 13584  00201A  0E02               	movlw	2
 13585  00201C  0101               	movlb	1	; () banked
 13586  00201E  19C3               	xorwf	_actualScreen& (0+255),w,b
 13587  002020  A4D8               	btfss	status,2,c
 13588  002022  D013               	goto	l10829
 13589                           
 13590                           ; BSR set to: 1
 13591                           ;DisplayProtocol.h: 333: initProtocoll(!selSN);
 13592  002024  0101               	movlb	1	; () banked
 13593  002026  51CC               	movf	_selSN& (0+255),w,b
 13594  002028  A4D8               	btfss	status,2,c
 13595  00202A  D002               	goto	u16240
 13596  00202C  0E01               	movlw	1
 13597  00202E  D001               	goto	u16250
 13598  002030                     u16240:
 13599  002030  0E00               	movlw	0
 13600  002032                     u16250:
 13601  002032  EC39  F034         	call	_initProtocoll
 13602                           
 13603                           ;DisplayProtocol.h: 334: processStarted = !selSN;
 13604  002036  0101               	movlb	1	; () banked
 13605  002038  51CC               	movf	_selSN& (0+255),w,b
 13606  00203A  A4D8               	btfss	status,2,c
 13607  00203C  D002               	goto	u16260
 13608  00203E  0E01               	movlw	1
 13609  002040  D001               	goto	u16270
 13610  002042                     u16260:
 13611  002042  0E00               	movlw	0
 13612  002044                     u16270:
 13613  002044  0100               	movlb	0	; () banked
 13614  002046  6FBB               	movwf	_processStarted& (0+255),b
 13615                           
 13616                           ;DisplayProtocol.h: 335: }else if(actualScreen == 3) {
 13617  002048  0012               	return	
 13618  00204A                     l10829:
 13619  00204A  0E03               	movlw	3
 13620  00204C  0101               	movlb	1	; () banked
 13621  00204E  19C3               	xorwf	_actualScreen& (0+255),w,b
 13622  002050  A4D8               	btfss	status,2,c
 13623  002052  D011               	goto	l10837
 13624                           
 13625                           ; BSR set to: 1
 13626                           ;DisplayProtocol.h: 336: processStarted = selSN;
 13627  002054  C1CC  F0BB         	movff	_selSN,_processStarted
 13628                           
 13629                           ;DisplayProtocol.h: 337: actualScreen = tempLastScreen;
 13630  002058  C0BE  F1C3         	movff	_tempLastScreen,_actualScreen
 13631                           
 13632                           ;DisplayProtocol.h: 338: LATCbits.LATC4 = 0;
 13633  00205C  988B               	bcf	3979,4,c	;volatile
 13634                           
 13635                           ; BSR set to: 1
 13636                           ;DisplayProtocol.h: 339: if(bladeIsUP != 1)
 13637  00205E  0100               	movlb	0	; () banked
 13638  002060  05C8               	decf	_bladeIsUP& (0+255),w,b
 13639  002062  B4D8               	btfsc	status,2,c
 13640  002064  0012               	return	
 13641                           
 13642                           ; BSR set to: 0
 13643                           ;DisplayProtocol.h: 340: setPWM2duty(-400);
 13644  002066  0EFE               	movlw	254
 13645  002068  0101               	movlb	1	; () banked
 13646  00206A  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 13647  00206C  0E70               	movlw	112
 13648  00206E  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 13649  002070  EC87  F02C         	call	_setPWM2duty	;wreg free
 13650                           
 13651                           ;DisplayProtocol.h: 341: }else if(actualScreen == 10) {
 13652  002074  0012               	return	
 13653  002076                     l10837:
 13654  002076  0E0A               	movlw	10
 13655  002078  0101               	movlb	1	; () banked
 13656  00207A  19C3               	xorwf	_actualScreen& (0+255),w,b
 13657  00207C  A4D8               	btfss	status,2,c
 13658  00207E  D00B               	goto	l10843
 13659                           
 13660                           ; BSR set to: 1
 13661                           ;DisplayProtocol.h: 342: if(!selSN)
 13662  002080  0101               	movlb	1	; () banked
 13663  002082  51CC               	movf	_selSN& (0+255),w,b
 13664  002084  A4D8               	btfss	status,2,c
 13665  002086  D004               	goto	l715
 13666                           
 13667                           ; BSR set to: 1
 13668                           ;DisplayProtocol.h: 343: confirmEdition(1);
 13669  002088  0E01               	movlw	1
 13670  00208A  EC9B  F028         	call	_confirmEdition
 13671  00208E  0012               	return	
 13672  002090                     l715:
 13673                           
 13674                           ; BSR set to: 1
 13675                           ;DisplayProtocol.h: 344: else
 13676                           ;DisplayProtocol.h: 345: actualScreen = tempLastScreen;
 13677  002090  C0BE  F1C3         	movff	_tempLastScreen,_actualScreen
 13678                           
 13679                           ; BSR set to: 1
 13680                           ;DisplayProtocol.h: 346: }else if(actualScreen == 8)
 13681  002094  0012               	return	
 13682  002096                     l10843:
 13683                           
 13684                           ; BSR set to: 1
 13685  002096  0E08               	movlw	8
 13686  002098  0101               	movlb	1	; () banked
 13687  00209A  19C3               	xorwf	_actualScreen& (0+255),w,b
 13688  00209C  A4D8               	btfss	status,2,c
 13689  00209E  D004               	goto	l10847
 13690                           
 13691                           ; BSR set to: 1
 13692                           ;DisplayProtocol.h: 347: actualScreen = 4;
 13693  0020A0  0E04               	movlw	4
 13694  0020A2  0101               	movlb	1	; () banked
 13695  0020A4  6FC3               	movwf	_actualScreen& (0+255),b
 13696  0020A6  0012               	return	
 13697  0020A8                     l10847:
 13698                           
 13699                           ; BSR set to: 1
 13700                           ;DisplayProtocol.h: 348: else if(actualScreen == 9)
 13701  0020A8  0E09               	movlw	9
 13702  0020AA  0101               	movlb	1	; () banked
 13703  0020AC  19C3               	xorwf	_actualScreen& (0+255),w,b
 13704  0020AE  A4D8               	btfss	status,2,c
 13705  0020B0  D004               	goto	l10851
 13706                           
 13707                           ; BSR set to: 1
 13708                           ;DisplayProtocol.h: 349: actualScreen = 0;
 13709  0020B2  0E00               	movlw	0
 13710  0020B4  0101               	movlb	1	; () banked
 13711  0020B6  6FC3               	movwf	_actualScreen& (0+255),b
 13712  0020B8  0012               	return	
 13713  0020BA                     l10851:
 13714                           
 13715                           ; BSR set to: 1
 13716                           ;DisplayProtocol.h: 350: else if(actualScreen == 11) {
 13717  0020BA  0E0B               	movlw	11
 13718  0020BC  0101               	movlb	1	; () banked
 13719  0020BE  19C3               	xorwf	_actualScreen& (0+255),w,b
 13720  0020C0  A4D8               	btfss	status,2,c
 13721  0020C2  D044               	goto	l10879
 13722                           
 13723                           ; BSR set to: 1
 13724                           ;DisplayProtocol.h: 351: if(!selSN) {
 13725  0020C4  0101               	movlb	1	; () banked
 13726  0020C6  51CC               	movf	_selSN& (0+255),w,b
 13727  0020C8  A4D8               	btfss	status,2,c
 13728  0020CA  D03C               	goto	l10877
 13729                           
 13730                           ; BSR set to: 1
 13731                           ;DisplayProtocol.h: 352: chanValf = 0;
 13732  0020CC  0E00               	movlw	0
 13733  0020CE  0101               	movlb	1	; () banked
 13734  0020D0  6FB7               	movwf	_chanValf& (0+255),b
 13735  0020D2  0E00               	movlw	0
 13736  0020D4  0101               	movlb	1	; () banked
 13737  0020D6  6FB8               	movwf	(_chanValf+1)& (0+255),b
 13738  0020D8  0E00               	movlw	0
 13739  0020DA  0101               	movlb	1	; () banked
 13740  0020DC  6FB9               	movwf	(_chanValf+2)& (0+255),b
 13741                           
 13742                           ; BSR set to: 1
 13743                           ;DisplayProtocol.h: 353: desintegrator();
 13744  0020DE  EC19  F016         	call	_desintegrator	;wreg free
 13745                           
 13746                           ;DisplayProtocol.h: 354: temptiXcorte = tiXcorte;
 13747  0020E2  C195  F0C3         	movff	_tiXcorte,_temptiXcorte
 13748  0020E6  C196  F0C4         	movff	_tiXcorte+1,_temptiXcorte+1
 13749  0020EA  C197  F0C5         	movff	_tiXcorte+2,_temptiXcorte+2
 13750                           
 13751                           ;DisplayProtocol.h: 355: tiXcorte = 5.0f;
 13752  0020EE  0E00               	movlw	0
 13753  0020F0  0101               	movlb	1	; () banked
 13754  0020F2  6F95               	movwf	_tiXcorte& (0+255),b
 13755  0020F4  0EA0               	movlw	160
 13756  0020F6  0101               	movlb	1	; () banked
 13757  0020F8  6F96               	movwf	(_tiXcorte+1)& (0+255),b
 13758  0020FA  0E40               	movlw	64
 13759  0020FC  0101               	movlb	1	; () banked
 13760  0020FE  6F97               	movwf	(_tiXcorte+2)& (0+255),b
 13761                           
 13762                           ; BSR set to: 1
 13763                           ;DisplayProtocol.h: 356: timsXcorte = 5000.0f;
 13764  002100  0E40               	movlw	64
 13765  002102  6E5A               	movwf	_timsXcorte,c
 13766  002104  0E9C               	movlw	156
 13767  002106  6E5B               	movwf	_timsXcorte+1,c
 13768  002108  0E45               	movlw	69
 13769  00210A  6E5C               	movwf	_timsXcorte+2,c
 13770                           
 13771                           ; BSR set to: 1
 13772                           ;DisplayProtocol.h: 357: tempNumCortes = numCortes;
 13773  00210C  C0C6  F19B         	movff	_numCortes,_tempNumCortes
 13774  002110  C0C7  F19C         	movff	_numCortes+1,_tempNumCortes+1
 13775                           
 13776                           ; BSR set to: 1
 13777                           ;DisplayProtocol.h: 358: numCortes = 1;
 13778  002114  0E00               	movlw	0
 13779  002116  0100               	movlb	0	; () banked
 13780  002118  6FC7               	movwf	(_numCortes+1)& (0+255),b
 13781  00211A  0E01               	movlw	1
 13782  00211C  6FC6               	movwf	_numCortes& (0+255),b
 13783                           
 13784                           ; BSR set to: 0
 13785                           ;DisplayProtocol.h: 359: processState = 0;
 13786  00211E  0E00               	movlw	0
 13787  002120  0100               	movlb	0	; () banked
 13788  002122  6FB5               	movwf	(_processState+1)& (0+255),b
 13789  002124  0E00               	movlw	0
 13790  002126  6FB4               	movwf	_processState& (0+255),b
 13791                           
 13792                           ; BSR set to: 0
 13793                           ;DisplayProtocol.h: 360: processTimer = 0;
 13794  002128  0E00               	movlw	0
 13795  00212A  6E37               	movwf	_processTimer,c
 13796  00212C  0E00               	movlw	0
 13797  00212E  6E38               	movwf	_processTimer+1,c
 13798  002130  0E00               	movlw	0
 13799  002132  6E39               	movwf	_processTimer+2,c
 13800  002134  0E00               	movlw	0
 13801  002136  6E3A               	movwf	_processTimer+3,c
 13802                           
 13803                           ; BSR set to: 0
 13804                           ;DisplayProtocol.h: 361: calibLevel = 0;
 13805  002138  0E00               	movlw	0
 13806  00213A  0101               	movlb	1	; () banked
 13807  00213C  6FC4               	movwf	_calibLevel& (0+255),b
 13808                           
 13809                           ; BSR set to: 1
 13810                           ;DisplayProtocol.h: 362: initCalib();
 13811  00213E  EC97  F034         	call	_initCalib	;wreg free
 13812                           
 13813                           ;DisplayProtocol.h: 363: }else
 13814  002142  0012               	return	
 13815  002144                     l10877:
 13816                           
 13817                           ;DisplayProtocol.h: 364: actualScreen = 4;
 13818  002144  0E04               	movlw	4
 13819  002146  0101               	movlb	1	; () banked
 13820  002148  6FC3               	movwf	_actualScreen& (0+255),b
 13821                           
 13822                           ; BSR set to: 1
 13823                           ;DisplayProtocol.h: 365: }else if(actualScreen == 12) {
 13824  00214A  0012               	return	
 13825  00214C                     l10879:
 13826                           
 13827                           ; BSR set to: 1
 13828  00214C  0E0C               	movlw	12
 13829  00214E  0101               	movlb	1	; () banked
 13830  002150  19C3               	xorwf	_actualScreen& (0+255),w,b
 13831  002152  A4D8               	btfss	status,2,c
 13832  002154  D009               	goto	l10887
 13833                           
 13834                           ; BSR set to: 1
 13835                           ;DisplayProtocol.h: 366: chanValSection--;
 13836  002156  0101               	movlb	1	; () banked
 13837  002158  079D               	decf	_chanValSection& (0+255),f,b
 13838                           
 13839                           ; BSR set to: 1
 13840                           ;DisplayProtocol.h: 367: if(chanValSection < 0)
 13841  00215A  0101               	movlb	1	; () banked
 13842  00215C  AF9D               	btfss	_chanValSection& (0+255),7,b
 13843  00215E  0012               	return	
 13844                           
 13845                           ; BSR set to: 1
 13846                           ;DisplayProtocol.h: 368: chanValSection = 5;
 13847  002160  0E05               	movlw	5
 13848  002162  0101               	movlb	1	; () banked
 13849  002164  6F9D               	movwf	_chanValSection& (0+255),b
 13850                           
 13851                           ; BSR set to: 1
 13852                           ;DisplayProtocol.h: 369: }else if(actualScreen == 13)
 13853  002166  0012               	return	
 13854  002168                     l10887:
 13855                           
 13856                           ; BSR set to: 1
 13857  002168  0E0D               	movlw	13
 13858  00216A  0101               	movlb	1	; () banked
 13859  00216C  19C3               	xorwf	_actualScreen& (0+255),w,b
 13860  00216E  A4D8               	btfss	status,2,c
 13861  002170  0012               	return	
 13862                           
 13863                           ; BSR set to: 1
 13864                           ;DisplayProtocol.h: 370: initProtocoll(1);
 13865  002172  0E01               	movlw	1
 13866  002174  EC39  F034         	call	_initProtocoll
 13867  002178  0012               	return	
 13868  00217A                     __end_of_pressENTER:
 13869                           	opt stack 0
 13870                           tblptru	equ	0xFF8
 13871                           tblptrh	equ	0xFF7
 13872                           tblptrl	equ	0xFF6
 13873                           tablat	equ	0xFF5
 13874                           prodh	equ	0xFF4
 13875                           prodl	equ	0xFF3
 13876                           intcon	equ	0xFF2
 13877                           postinc0	equ	0xFEE
 13878                           wreg	equ	0xFE8
 13879                           postdec1	equ	0xFE5
 13880                           fsr1l	equ	0xFE1
 13881                           indf2	equ	0xFDF
 13882                           postinc2	equ	0xFDE
 13883                           postdec2	equ	0xFDD
 13884                           fsr2h	equ	0xFDA
 13885                           fsr2l	equ	0xFD9
 13886                           status	equ	0xFD8
 13887                           
 13888 ;; *************** function _initProtocoll *****************
 13889 ;; Defined at:
 13890 ;;		line 72 in file "source/DisplayProtocol.h"
 13891 ;; Parameters:    Size  Location     Type
 13892 ;;  init            1    wreg     unsigned char 
 13893 ;; Auto vars:     Size  Location     Type
 13894 ;;  init            1    6[BANK1 ] unsigned char 
 13895 ;; Return value:  Size  Location     Type
 13896 ;;                  1    wreg      void 
 13897 ;; Registers used:
 13898 ;;		wreg, status,2, status,0, cstack
 13899 ;; Tracked objects:
 13900 ;;		On entry : 0/0
 13901 ;;		On exit  : 0/0
 13902 ;;		Unchanged: 0/0
 13903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13904 ;;      Params:         0       0       0       0       0       0       0
 13905 ;;      Locals:         0       0       1       0       0       0       0
 13906 ;;      Temps:          0       0       0       0       0       0       0
 13907 ;;      Totals:         0       0       1       0       0       0       0
 13908 ;;Total ram usage:        1 bytes
 13909 ;; Hardware stack levels used:    1
 13910 ;; Hardware stack levels required when called:   13
 13911 ;; This function calls:
 13912 ;;		_setPWM2duty
 13913 ;; This function is called by:
 13914 ;;		_pressRETRO
 13915 ;;		_pressENTER
 13916 ;; This function uses a non-reentrant model
 13917 ;;
 13918                           
 13919                           	psect	text54
 13920  006872                     __ptext54:
 13921                           	opt stack 0
 13922  006872                     _initProtocoll:
 13923                           	opt stack 15
 13924                           
 13925                           ;incstack = 0
 13926                           ;initProtocoll@init stored from wreg
 13927  006872  0101               	movlb	1	; () banked
 13928  006874  6F06               	movwf	initProtocoll@init& (0+255),b
 13929                           
 13930                           ;DisplayProtocol.h: 73: if(!PORTAbits.RA7)
 13931  006876  BE80               	btfsc	3968,7,c	;volatile
 13932  006878  D003               	goto	l10311
 13933                           
 13934                           ;DisplayProtocol.h: 74: bladeIsUP = 2;
 13935  00687A  0E02               	movlw	2
 13936  00687C  0100               	movlb	0	; () banked
 13937  00687E  6FC8               	movwf	_bladeIsUP& (0+255),b
 13938  006880                     l10311:
 13939                           
 13940                           ;DisplayProtocol.h: 75: if(init) {
 13941  006880  0101               	movlb	1	; () banked
 13942  006882  5106               	movf	initProtocoll@init& (0+255),w,b
 13943  006884  0101               	movlb	1	; () banked
 13944  006886  B4D8               	btfsc	status,2,c
 13945  006888  D011               	goto	l10321
 13946                           
 13947                           ; BSR set to: 1
 13948                           ;DisplayProtocol.h: 76: LATCbits.LATC5 = 0;
 13949  00688A  9A8B               	bcf	3979,5,c	;volatile
 13950                           
 13951                           ; BSR set to: 1
 13952                           ;DisplayProtocol.h: 77: processState = 0;
 13953  00688C  0E00               	movlw	0
 13954  00688E  0100               	movlb	0	; () banked
 13955  006890  6FB5               	movwf	(_processState+1)& (0+255),b
 13956  006892  0E00               	movlw	0
 13957  006894  6FB4               	movwf	_processState& (0+255),b
 13958                           
 13959                           ; BSR set to: 0
 13960                           ;DisplayProtocol.h: 78: if(bladeIsUP != 1)
 13961  006896  0100               	movlb	0	; () banked
 13962  006898  05C8               	decf	_bladeIsUP& (0+255),w,b
 13963  00689A  B4D8               	btfsc	status,2,c
 13964  00689C  D007               	goto	l10321
 13965                           
 13966                           ; BSR set to: 0
 13967                           ;DisplayProtocol.h: 79: setPWM2duty(-400);
 13968  00689E  0EFE               	movlw	254
 13969  0068A0  0101               	movlb	1	; () banked
 13970  0068A2  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 13971  0068A4  0E70               	movlw	112
 13972  0068A6  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 13973  0068A8  EC87  F02C         	call	_setPWM2duty	;wreg free
 13974  0068AC                     l10321:
 13975                           
 13976                           ;DisplayProtocol.h: 80: }
 13977                           ;DisplayProtocol.h: 81: actualScreen = tempLastScreen;
 13978  0068AC  C0BE  F1C3         	movff	_tempLastScreen,_actualScreen
 13979  0068B0  0012               	return		;funcret
 13980  0068B2                     __end_of_initProtocoll:
 13981                           	opt stack 0
 13982                           tblptru	equ	0xFF8
 13983                           tblptrh	equ	0xFF7
 13984                           tblptrl	equ	0xFF6
 13985                           tablat	equ	0xFF5
 13986                           prodh	equ	0xFF4
 13987                           prodl	equ	0xFF3
 13988                           intcon	equ	0xFF2
 13989                           postinc0	equ	0xFEE
 13990                           wreg	equ	0xFE8
 13991                           postdec1	equ	0xFE5
 13992                           fsr1l	equ	0xFE1
 13993                           indf2	equ	0xFDF
 13994                           postinc2	equ	0xFDE
 13995                           postdec2	equ	0xFDD
 13996                           fsr2h	equ	0xFDA
 13997                           fsr2l	equ	0xFD9
 13998                           status	equ	0xFD8
 13999                           
 14000 ;; *************** function _desintegrator *****************
 14001 ;; Defined at:
 14002 ;;		line 46 in file "source/DisplayProtocol.h"
 14003 ;; Parameters:    Size  Location     Type
 14004 ;;		None
 14005 ;; Auto vars:     Size  Location     Type
 14006 ;;  temp2           4   70[BANK1 ] long 
 14007 ;;  temp3           4   66[BANK1 ] long 
 14008 ;;  tempL           4   62[BANK1 ] long 
 14009 ;;  temp            3   59[BANK1 ] float 
 14010 ;;  i               2   74[BANK1 ] int 
 14011 ;; Return value:  Size  Location     Type
 14012 ;;                  1    wreg      void 
 14013 ;; Registers used:
 14014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14015 ;; Tracked objects:
 14016 ;;		On entry : 0/0
 14017 ;;		On exit  : 0/0
 14018 ;;		Unchanged: 0/0
 14019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14020 ;;      Params:         0       0       0       0       0       0       0
 14021 ;;      Locals:         0       0      17       0       0       0       0
 14022 ;;      Temps:          0       0       2       0       0       0       0
 14023 ;;      Totals:         0       0      19       0       0       0       0
 14024 ;;Total ram usage:       19 bytes
 14025 ;; Hardware stack levels used:    1
 14026 ;; Hardware stack levels required when called:   14
 14027 ;; This function calls:
 14028 ;;		___aldiv
 14029 ;;		___ftmul
 14030 ;;		___fttol
 14031 ;;		___lmul
 14032 ;; This function is called by:
 14033 ;;		_pressENTER
 14034 ;; This function uses a non-reentrant model
 14035 ;;
 14036                           
 14037                           	psect	text55
 14038  002C32                     __ptext55:
 14039                           	opt stack 0
 14040  002C32                     _desintegrator:
 14041                           	opt stack 14
 14042                           
 14043                           ;DisplayProtocol.h: 47: chanValSection = 5;
 14044                           
 14045                           ;incstack = 0
 14046  002C32  0E05               	movlw	5
 14047  002C34  0101               	movlb	1	; () banked
 14048  002C36  6F9D               	movwf	_chanValSection& (0+255),b
 14049                           
 14050                           ; BSR set to: 1
 14051                           ;DisplayProtocol.h: 48: float temp = (float)chanValf*1000;
 14052  002C38  C1B7  F114         	movff	_chanValf,___ftmul@f1
 14053  002C3C  C1B8  F115         	movff	_chanValf+1,___ftmul@f1+1
 14054  002C40  C1B9  F116         	movff	_chanValf+2,___ftmul@f1+2
 14055  002C44  0E00               	movlw	0
 14056  002C46  0101               	movlb	1	; () banked
 14057  002C48  6F17               	movwf	___ftmul@f2& (0+255),b
 14058  002C4A  0E7A               	movlw	122
 14059  002C4C  0101               	movlb	1	; () banked
 14060  002C4E  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 14061  002C50  0E44               	movlw	68
 14062  002C52  0101               	movlb	1	; () banked
 14063  002C54  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 14064  002C56  ECCC  F01A         	call	___ftmul	;wreg free
 14065  002C5A  C114  F13B         	movff	?___ftmul,desintegrator@temp
 14066  002C5E  C115  F13C         	movff	?___ftmul+1,desintegrator@temp+1
 14067  002C62  C116  F13D         	movff	?___ftmul+2,desintegrator@temp+2
 14068                           
 14069                           ;DisplayProtocol.h: 49: long tempL = (long)temp;
 14070  002C66  C13B  F12A         	movff	desintegrator@temp,___fttol@f1
 14071  002C6A  C13C  F12B         	movff	desintegrator@temp+1,___fttol@f1+1
 14072  002C6E  C13D  F12C         	movff	desintegrator@temp+2,___fttol@f1+2
 14073  002C72  EC76  F01D         	call	___fttol	;wreg free
 14074  002C76  C12A  F13E         	movff	?___fttol,desintegrator@tempL
 14075  002C7A  C12B  F13F         	movff	?___fttol+1,desintegrator@tempL+1
 14076  002C7E  C12C  F140         	movff	?___fttol+2,desintegrator@tempL+2
 14077  002C82  C12D  F141         	movff	?___fttol+3,desintegrator@tempL+3
 14078                           
 14079                           ;DisplayProtocol.h: 50: long temp2 = 0;
 14080  002C86  0E00               	movlw	0
 14081  002C88  0101               	movlb	1	; () banked
 14082  002C8A  6F46               	movwf	desintegrator@temp2& (0+255),b
 14083  002C8C  0E00               	movlw	0
 14084  002C8E  6F47               	movwf	(desintegrator@temp2+1)& (0+255),b
 14085  002C90  0E00               	movlw	0
 14086  002C92  6F48               	movwf	(desintegrator@temp2+2)& (0+255),b
 14087  002C94  0E00               	movlw	0
 14088  002C96  6F49               	movwf	(desintegrator@temp2+3)& (0+255),b
 14089                           
 14090                           ;DisplayProtocol.h: 51: long temp3 = 0;
 14091  002C98  0E00               	movlw	0
 14092  002C9A  0101               	movlb	1	; () banked
 14093  002C9C  6F42               	movwf	desintegrator@temp3& (0+255),b
 14094  002C9E  0E00               	movlw	0
 14095  002CA0  6F43               	movwf	(desintegrator@temp3+1)& (0+255),b
 14096  002CA2  0E00               	movlw	0
 14097  002CA4  6F44               	movwf	(desintegrator@temp3+2)& (0+255),b
 14098  002CA6  0E00               	movlw	0
 14099  002CA8  6F45               	movwf	(desintegrator@temp3+3)& (0+255),b
 14100                           
 14101                           ;DisplayProtocol.h: 52: int i;
 14102                           ;DisplayProtocol.h: 53: for(i = 0; i < 6; i++) {
 14103  002CAA  0E00               	movlw	0
 14104  002CAC  0101               	movlb	1	; () banked
 14105  002CAE  6F4B               	movwf	(desintegrator@i+1)& (0+255),b
 14106  002CB0  0E00               	movlw	0
 14107  002CB2  6F4A               	movwf	desintegrator@i& (0+255),b
 14108                           
 14109                           ; BSR set to: 1
 14110  002CB4  0101               	movlb	1	; () banked
 14111  002CB6  BF4B               	btfsc	(desintegrator@i+1)& (0+255),7,b
 14112  002CB8  D00A               	goto	l10281
 14113  002CBA  0101               	movlb	1	; () banked
 14114  002CBC  514B               	movf	(desintegrator@i+1)& (0+255),w,b
 14115  002CBE  E106               	bnz	u15220
 14116  002CC0  0E06               	movlw	6
 14117  002CC2  0101               	movlb	1	; () banked
 14118  002CC4  5D4A               	subwf	desintegrator@i& (0+255),w,b
 14119  002CC6  B0D8               	btfsc	status,0,c
 14120  002CC8  0012               	return	
 14121  002CCA  D001               	goto	l10281
 14122  002CCC                     u15220:
 14123                           
 14124                           ; BSR set to: 1
 14125  002CCC  0012               	return	
 14126  002CCE                     l10281:
 14127                           
 14128                           ; BSR set to: 1
 14129                           ;DisplayProtocol.h: 54: temp2 = tempL/exp10[i];
 14130  002CCE  C13E  F100         	movff	desintegrator@tempL,___aldiv@dividend
 14131  002CD2  C13F  F101         	movff	desintegrator@tempL+1,___aldiv@dividend+1
 14132  002CD6  C140  F102         	movff	desintegrator@tempL+2,___aldiv@dividend+2
 14133  002CDA  C141  F103         	movff	desintegrator@tempL+3,___aldiv@dividend+3
 14134  002CDE  0E77               	movlw	low _exp10
 14135  002CE0  0101               	movlb	1	; () banked
 14136  002CE2  6F39               	movwf	??_desintegrator& (0+255),b
 14137  002CE4  0E01               	movlw	high _exp10
 14138  002CE6  0101               	movlb	1	; () banked
 14139  002CE8  6F3A               	movwf	(??_desintegrator+1)& (0+255),b
 14140  002CEA  90D8               	bcf	status,0,c
 14141  002CEC  0101               	movlb	1	; () banked
 14142  002CEE  354A               	rlcf	desintegrator@i& (0+255),w,b
 14143  002CF0  6ED9               	movwf	fsr2l,c
 14144  002CF2  0101               	movlb	1	; () banked
 14145  002CF4  354B               	rlcf	(desintegrator@i+1)& (0+255),w,b
 14146  002CF6  6EDA               	movwf	fsr2h,c
 14147  002CF8  90D8               	bcf	status,0,c
 14148  002CFA  36D9               	rlcf	fsr2l,f,c
 14149  002CFC  36DA               	rlcf	fsr2h,f,c
 14150  002CFE  0101               	movlb	1	; () banked
 14151  002D00  5139               	movf	??_desintegrator& (0+255),w,b
 14152  002D02  26D9               	addwf	fsr2l,f,c
 14153  002D04  0101               	movlb	1	; () banked
 14154  002D06  513A               	movf	(??_desintegrator+1)& (0+255),w,b
 14155  002D08  22DA               	addwfc	fsr2h,f,c
 14156  002D0A  CFDE F104          	movff	postinc2,___aldiv@divisor
 14157  002D0E  CFDE F105          	movff	postinc2,___aldiv@divisor+1
 14158  002D12  CFDE F106          	movff	postinc2,___aldiv@divisor+2
 14159  002D16  CFDE F107          	movff	postinc2,___aldiv@divisor+3
 14160  002D1A  ECDC  F01F         	call	___aldiv	;wreg free
 14161  002D1E  C100  F146         	movff	?___aldiv,desintegrator@temp2
 14162  002D22  C101  F147         	movff	?___aldiv+1,desintegrator@temp2+1
 14163  002D26  C102  F148         	movff	?___aldiv+2,desintegrator@temp2+2
 14164  002D2A  C103  F149         	movff	?___aldiv+3,desintegrator@temp2+3
 14165                           
 14166                           ;DisplayProtocol.h: 55: temp3 = temp2*exp10[i];
 14167  002D2E  0E77               	movlw	low _exp10
 14168  002D30  0101               	movlb	1	; () banked
 14169  002D32  6F39               	movwf	??_desintegrator& (0+255),b
 14170  002D34  0E01               	movlw	high _exp10
 14171  002D36  0101               	movlb	1	; () banked
 14172  002D38  6F3A               	movwf	(??_desintegrator+1)& (0+255),b
 14173  002D3A  90D8               	bcf	status,0,c
 14174  002D3C  0101               	movlb	1	; () banked
 14175  002D3E  354A               	rlcf	desintegrator@i& (0+255),w,b
 14176  002D40  6ED9               	movwf	fsr2l,c
 14177  002D42  0101               	movlb	1	; () banked
 14178  002D44  354B               	rlcf	(desintegrator@i+1)& (0+255),w,b
 14179  002D46  6EDA               	movwf	fsr2h,c
 14180  002D48  90D8               	bcf	status,0,c
 14181  002D4A  36D9               	rlcf	fsr2l,f,c
 14182  002D4C  36DA               	rlcf	fsr2h,f,c
 14183  002D4E  0101               	movlb	1	; () banked
 14184  002D50  5139               	movf	??_desintegrator& (0+255),w,b
 14185  002D52  26D9               	addwf	fsr2l,f,c
 14186  002D54  0101               	movlb	1	; () banked
 14187  002D56  513A               	movf	(??_desintegrator+1)& (0+255),w,b
 14188  002D58  22DA               	addwfc	fsr2h,f,c
 14189  002D5A  CFDE F100          	movff	postinc2,___lmul@multiplier
 14190  002D5E  CFDE F101          	movff	postinc2,___lmul@multiplier+1
 14191  002D62  CFDE F102          	movff	postinc2,___lmul@multiplier+2
 14192  002D66  CFDE F103          	movff	postinc2,___lmul@multiplier+3
 14193  002D6A  C146  F104         	movff	desintegrator@temp2,___lmul@multiplicand
 14194  002D6E  C147  F105         	movff	desintegrator@temp2+1,___lmul@multiplicand+1
 14195  002D72  C148  F106         	movff	desintegrator@temp2+2,___lmul@multiplicand+2
 14196  002D76  C149  F107         	movff	desintegrator@temp2+3,___lmul@multiplicand+3
 14197  002D7A  ECCB  F030         	call	___lmul	;wreg free
 14198  002D7E  C100  F142         	movff	?___lmul,desintegrator@temp3
 14199  002D82  C101  F143         	movff	?___lmul+1,desintegrator@temp3+1
 14200  002D86  C102  F144         	movff	?___lmul+2,desintegrator@temp3+2
 14201  002D8A  C103  F145         	movff	?___lmul+3,desintegrator@temp3+3
 14202                           
 14203                           ;DisplayProtocol.h: 56: chanValdig[i] = temp2;
 14204  002D8E  0EA9               	movlw	low _chanValdig
 14205  002D90  0101               	movlb	1	; () banked
 14206  002D92  254A               	addwf	desintegrator@i& (0+255),w,b
 14207  002D94  6ED9               	movwf	fsr2l,c
 14208  002D96  0E01               	movlw	high _chanValdig
 14209  002D98  0101               	movlb	1	; () banked
 14210  002D9A  214B               	addwfc	(desintegrator@i+1)& (0+255),w,b
 14211  002D9C  6EDA               	movwf	fsr2h,c
 14212  002D9E  C146  FFDF         	movff	desintegrator@temp2,indf2
 14213                           
 14214                           ; BSR set to: 1
 14215                           ;DisplayProtocol.h: 57: tempL -= temp3;
 14216  002DA2  0101               	movlb	1	; () banked
 14217  002DA4  5142               	movf	desintegrator@temp3& (0+255),w,b
 14218  002DA6  0101               	movlb	1	; () banked
 14219  002DA8  5F3E               	subwf	desintegrator@tempL& (0+255),f,b
 14220  002DAA  0101               	movlb	1	; () banked
 14221  002DAC  5143               	movf	(desintegrator@temp3+1)& (0+255),w,b
 14222  002DAE  0101               	movlb	1	; () banked
 14223  002DB0  5B3F               	subwfb	(desintegrator@tempL+1)& (0+255),f,b
 14224  002DB2  0101               	movlb	1	; () banked
 14225  002DB4  5144               	movf	(desintegrator@temp3+2)& (0+255),w,b
 14226  002DB6  0101               	movlb	1	; () banked
 14227  002DB8  5B40               	subwfb	(desintegrator@tempL+2)& (0+255),f,b
 14228  002DBA  0101               	movlb	1	; () banked
 14229  002DBC  5145               	movf	(desintegrator@temp3+3)& (0+255),w,b
 14230  002DBE  0101               	movlb	1	; () banked
 14231  002DC0  5B41               	subwfb	(desintegrator@tempL+3)& (0+255),f,b
 14232                           
 14233                           ; BSR set to: 1
 14234  002DC2  0101               	movlb	1	; () banked
 14235  002DC4  4B4A               	infsnz	desintegrator@i& (0+255),f,b
 14236  002DC6  2B4B               	incf	(desintegrator@i+1)& (0+255),f,b
 14237                           
 14238                           ; BSR set to: 1
 14239  002DC8  0101               	movlb	1	; () banked
 14240  002DCA  BF4B               	btfsc	(desintegrator@i+1)& (0+255),7,b
 14241  002DCC  D780               	goto	l10281
 14242  002DCE  0101               	movlb	1	; () banked
 14243  002DD0  514B               	movf	(desintegrator@i+1)& (0+255),w,b
 14244  002DD2  E101               	bnz	l540
 14245  002DD4  D775               	goto	L6
 14246  002DD6                     l540:
 14247                           
 14248                           ; BSR set to: 1
 14249  002DD6  0012               	return		;funcret
 14250  002DD8                     __end_of_desintegrator:
 14251                           	opt stack 0
 14252                           tblptru	equ	0xFF8
 14253                           tblptrh	equ	0xFF7
 14254                           tblptrl	equ	0xFF6
 14255                           tablat	equ	0xFF5
 14256                           prodh	equ	0xFF4
 14257                           prodl	equ	0xFF3
 14258                           intcon	equ	0xFF2
 14259                           postinc0	equ	0xFEE
 14260                           wreg	equ	0xFE8
 14261                           postdec1	equ	0xFE5
 14262                           fsr1l	equ	0xFE1
 14263                           indf2	equ	0xFDF
 14264                           postinc2	equ	0xFDE
 14265                           postdec2	equ	0xFDD
 14266                           fsr2h	equ	0xFDA
 14267                           fsr2l	equ	0xFD9
 14268                           status	equ	0xFD8
 14269                           
 14270 ;; *************** function ___fttol *****************
 14271 ;; Defined at:
 14272 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 14273 ;; Parameters:    Size  Location     Type
 14274 ;;  f1              3   42[BANK1 ] float 
 14275 ;; Auto vars:     Size  Location     Type
 14276 ;;  lval            4   52[BANK1 ] unsigned long 
 14277 ;;  exp1            1   56[BANK1 ] unsigned char 
 14278 ;;  sign1           1   51[BANK1 ] unsigned char 
 14279 ;; Return value:  Size  Location     Type
 14280 ;;                  4   42[BANK1 ] long 
 14281 ;; Registers used:
 14282 ;;		wreg, status,2, status,0
 14283 ;; Tracked objects:
 14284 ;;		On entry : 0/0
 14285 ;;		On exit  : 0/0
 14286 ;;		Unchanged: 0/0
 14287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14288 ;;      Params:         0       0       4       0       0       0       0
 14289 ;;      Locals:         0       0       6       0       0       0       0
 14290 ;;      Temps:          0       0       5       0       0       0       0
 14291 ;;      Totals:         0       0      15       0       0       0       0
 14292 ;;Total ram usage:       15 bytes
 14293 ;; Hardware stack levels used:    1
 14294 ;; Hardware stack levels required when called:   12
 14295 ;; This function calls:
 14296 ;;		Nothing
 14297 ;; This function is called by:
 14298 ;;		_desintegrator
 14299 ;;		_printf
 14300 ;; This function uses a non-reentrant model
 14301 ;;
 14302                           
 14303                           	psect	text56
 14304  003AEC                     __ptext56:
 14305                           	opt stack 0
 14306  003AEC                     ___fttol:
 14307                           	opt stack 15
 14308                           
 14309                           ; BSR set to: 1
 14310                           ;incstack = 0
 14311  003AEC  C12C  F12E         	movff	___fttol@f1+2,??___fttol
 14312  003AF0  0101               	movlb	1	; () banked
 14313  003AF2  6B2F               	clrf	(??___fttol+1)& (0+255),b
 14314  003AF4  6B30               	clrf	(??___fttol+2)& (0+255),b
 14315  003AF6  0101               	movlb	1	; () banked
 14316  003AF8  352B               	rlcf	(___fttol@f1+1)& (0+255),w,b
 14317  003AFA  0101               	movlb	1	; () banked
 14318  003AFC  372E               	rlcf	??___fttol& (0+255),f,b
 14319  003AFE  E301               	bnc	u7851
 14320  003B00  812F               	bsf	(??___fttol+1)& (0+255),0,b
 14321  003B02                     u7851:
 14322  003B02  0101               	movlb	1	; () banked
 14323  003B04  512E               	movf	??___fttol& (0+255),w,b
 14324  003B06  0101               	movlb	1	; () banked
 14325  003B08  6F38               	movwf	___fttol@exp1& (0+255),b
 14326  003B0A  0101               	movlb	1	; () banked
 14327  003B0C  5138               	movf	___fttol@exp1& (0+255),w,b
 14328  003B0E  A4D8               	btfss	status,2,c
 14329  003B10  D00A               	goto	l6203
 14330                           
 14331                           ; BSR set to: 1
 14332  003B12  0E00               	movlw	0
 14333  003B14  0101               	movlb	1	; () banked
 14334  003B16  6F2A               	movwf	?___fttol& (0+255),b
 14335  003B18  0E00               	movlw	0
 14336  003B1A  6F2B               	movwf	(?___fttol+1)& (0+255),b
 14337  003B1C  0E00               	movlw	0
 14338  003B1E  6F2C               	movwf	(?___fttol+2)& (0+255),b
 14339  003B20  0E00               	movlw	0
 14340  003B22  6F2D               	movwf	(?___fttol+3)& (0+255),b
 14341                           
 14342                           ; BSR set to: 1
 14343  003B24  0012               	return	
 14344  003B26                     l6203:
 14345                           
 14346                           ; BSR set to: 1
 14347  003B26  0E17               	movlw	23
 14348  003B28  0101               	movlb	1	; () banked
 14349  003B2A  6F2E               	movwf	??___fttol& (0+255),b
 14350  003B2C  C12A  F12F         	movff	___fttol@f1,??___fttol+1
 14351  003B30  C12B  F130         	movff	___fttol@f1+1,??___fttol+2
 14352  003B34  C12C  F131         	movff	___fttol@f1+2,??___fttol+3
 14353  003B38  0101               	movlb	1	; () banked
 14354  003B3A  292E               	incf	??___fttol& (0+255),w,b
 14355  003B3C  0101               	movlb	1	; () banked
 14356  003B3E  6F32               	movwf	(??___fttol+4)& (0+255),b
 14357  003B40  D005               	goto	u7870
 14358  003B42                     u7875:
 14359  003B42  0101               	movlb	1	; () banked
 14360  003B44  90D8               	bcf	status,0,c
 14361  003B46  3331               	rrcf	(??___fttol+3)& (0+255),f,b
 14362  003B48  3330               	rrcf	(??___fttol+2)& (0+255),f,b
 14363  003B4A  332F               	rrcf	(??___fttol+1)& (0+255),f,b
 14364  003B4C                     u7870:
 14365  003B4C  0101               	movlb	1	; () banked
 14366  003B4E  2F32               	decfsz	(??___fttol+4)& (0+255),f,b
 14367  003B50  D7F8               	goto	u7875
 14368  003B52  0101               	movlb	1	; () banked
 14369  003B54  512F               	movf	(??___fttol+1)& (0+255),w,b
 14370  003B56  0101               	movlb	1	; () banked
 14371  003B58  6F33               	movwf	___fttol@sign1& (0+255),b
 14372                           
 14373                           ; BSR set to: 1
 14374  003B5A  0101               	movlb	1	; () banked
 14375  003B5C  8F2B               	bsf	(___fttol@f1+1)& (0+255),7,b
 14376                           
 14377                           ; BSR set to: 1
 14378  003B5E  0EFF               	movlw	255
 14379  003B60  0101               	movlb	1	; () banked
 14380  003B62  172A               	andwf	___fttol@f1& (0+255),f,b
 14381  003B64  0EFF               	movlw	255
 14382  003B66  0101               	movlb	1	; () banked
 14383  003B68  172B               	andwf	(___fttol@f1+1)& (0+255),f,b
 14384  003B6A  0E00               	movlw	0
 14385  003B6C  0101               	movlb	1	; () banked
 14386  003B6E  172C               	andwf	(___fttol@f1+2)& (0+255),f,b
 14387                           
 14388                           ; BSR set to: 1
 14389  003B70  0101               	movlb	1	; () banked
 14390  003B72  512A               	movf	___fttol@f1& (0+255),w,b
 14391  003B74  0101               	movlb	1	; () banked
 14392  003B76  6F34               	movwf	___fttol@lval& (0+255),b
 14393  003B78  0101               	movlb	1	; () banked
 14394  003B7A  512B               	movf	(___fttol@f1+1)& (0+255),w,b
 14395  003B7C  0101               	movlb	1	; () banked
 14396  003B7E  6F35               	movwf	(___fttol@lval+1)& (0+255),b
 14397  003B80  0101               	movlb	1	; () banked
 14398  003B82  512C               	movf	(___fttol@f1+2)& (0+255),w,b
 14399  003B84  0101               	movlb	1	; () banked
 14400  003B86  6F36               	movwf	(___fttol@lval+2)& (0+255),b
 14401  003B88  0101               	movlb	1	; () banked
 14402  003B8A  6B37               	clrf	(___fttol@lval+3)& (0+255),b
 14403                           
 14404                           ; BSR set to: 1
 14405  003B8C  0E8E               	movlw	142
 14406  003B8E  0101               	movlb	1	; () banked
 14407  003B90  5F38               	subwf	___fttol@exp1& (0+255),f,b
 14408                           
 14409                           ; BSR set to: 1
 14410  003B92  0101               	movlb	1	; () banked
 14411  003B94  AF38               	btfss	___fttol@exp1& (0+255),7,b
 14412  003B96  D01A               	goto	l6225
 14413                           
 14414                           ; BSR set to: 1
 14415  003B98  0101               	movlb	1	; () banked
 14416  003B9A  5138               	movf	___fttol@exp1& (0+255),w,b
 14417  003B9C  0A80               	xorlw	128
 14418  003B9E  0F8F               	addlw	143
 14419  003BA0  B0D8               	btfsc	status,0,c
 14420  003BA2  D00A               	goto	l6221
 14421                           
 14422                           ; BSR set to: 1
 14423  003BA4  0E00               	movlw	0
 14424  003BA6  0101               	movlb	1	; () banked
 14425  003BA8  6F2A               	movwf	?___fttol& (0+255),b
 14426  003BAA  0E00               	movlw	0
 14427  003BAC  6F2B               	movwf	(?___fttol+1)& (0+255),b
 14428  003BAE  0E00               	movlw	0
 14429  003BB0  6F2C               	movwf	(?___fttol+2)& (0+255),b
 14430  003BB2  0E00               	movlw	0
 14431  003BB4  6F2D               	movwf	(?___fttol+3)& (0+255),b
 14432                           
 14433                           ; BSR set to: 1
 14434  003BB6  0012               	return	
 14435  003BB8                     l6221:
 14436                           
 14437                           ; BSR set to: 1
 14438  003BB8  0101               	movlb	1	; () banked
 14439  003BBA  90D8               	bcf	status,0,c
 14440  003BBC  3337               	rrcf	(___fttol@lval+3)& (0+255),f,b
 14441  003BBE  3336               	rrcf	(___fttol@lval+2)& (0+255),f,b
 14442  003BC0  3335               	rrcf	(___fttol@lval+1)& (0+255),f,b
 14443  003BC2  3334               	rrcf	___fttol@lval& (0+255),f,b
 14444                           
 14445                           ; BSR set to: 1
 14446  003BC4  0101               	movlb	1	; () banked
 14447  003BC6  3F38               	incfsz	___fttol@exp1& (0+255),f,b
 14448  003BC8  D7F7               	goto	l6221
 14449                           
 14450                           ; BSR set to: 1
 14451  003BCA  D01B               	goto	l6235
 14452  003BCC                     l6225:
 14453                           
 14454                           ; BSR set to: 1
 14455  003BCC  0E17               	movlw	23
 14456  003BCE  0101               	movlb	1	; () banked
 14457  003BD0  6538               	cpfsgt	___fttol@exp1& (0+255),b
 14458  003BD2  D012               	goto	l6233
 14459                           
 14460                           ; BSR set to: 1
 14461  003BD4  0E00               	movlw	0
 14462  003BD6  0101               	movlb	1	; () banked
 14463  003BD8  6F2A               	movwf	?___fttol& (0+255),b
 14464  003BDA  0E00               	movlw	0
 14465  003BDC  6F2B               	movwf	(?___fttol+1)& (0+255),b
 14466  003BDE  0E00               	movlw	0
 14467  003BE0  6F2C               	movwf	(?___fttol+2)& (0+255),b
 14468  003BE2  0E00               	movlw	0
 14469  003BE4  6F2D               	movwf	(?___fttol+3)& (0+255),b
 14470                           
 14471                           ; BSR set to: 1
 14472  003BE6  0012               	return	
 14473  003BE8                     l6231:
 14474                           
 14475                           ; BSR set to: 1
 14476  003BE8  0101               	movlb	1	; () banked
 14477  003BEA  90D8               	bcf	status,0,c
 14478  003BEC  3734               	rlcf	___fttol@lval& (0+255),f,b
 14479  003BEE  3735               	rlcf	(___fttol@lval+1)& (0+255),f,b
 14480  003BF0  3736               	rlcf	(___fttol@lval+2)& (0+255),f,b
 14481  003BF2  3737               	rlcf	(___fttol@lval+3)& (0+255),f,b
 14482  003BF4  0101               	movlb	1	; () banked
 14483  003BF6  0738               	decf	___fttol@exp1& (0+255),f,b
 14484  003BF8                     l6233:
 14485                           
 14486                           ; BSR set to: 1
 14487  003BF8  0101               	movlb	1	; () banked
 14488  003BFA  5138               	movf	___fttol@exp1& (0+255),w,b
 14489  003BFC  0101               	movlb	1	; () banked
 14490  003BFE  A4D8               	btfss	status,2,c
 14491  003C00  D7F3               	goto	l6231
 14492  003C02                     l6235:
 14493                           
 14494                           ; BSR set to: 1
 14495  003C02  0101               	movlb	1	; () banked
 14496  003C04  5133               	movf	___fttol@sign1& (0+255),w,b
 14497  003C06  0101               	movlb	1	; () banked
 14498  003C08  B4D8               	btfsc	status,2,c
 14499  003C0A  D009               	goto	l6239
 14500                           
 14501                           ; BSR set to: 1
 14502  003C0C  0101               	movlb	1	; () banked
 14503  003C0E  1F37               	comf	(___fttol@lval+3)& (0+255),f,b
 14504  003C10  1F36               	comf	(___fttol@lval+2)& (0+255),f,b
 14505  003C12  1F35               	comf	(___fttol@lval+1)& (0+255),f,b
 14506  003C14  6D34               	negf	___fttol@lval& (0+255),b
 14507  003C16  0E00               	movlw	0
 14508  003C18  2335               	addwfc	(___fttol@lval+1)& (0+255),f,b
 14509  003C1A  2336               	addwfc	(___fttol@lval+2)& (0+255),f,b
 14510  003C1C  2337               	addwfc	(___fttol@lval+3)& (0+255),f,b
 14511  003C1E                     l6239:
 14512                           
 14513                           ; BSR set to: 1
 14514  003C1E  C134  F12A         	movff	___fttol@lval,?___fttol
 14515  003C22  C135  F12B         	movff	___fttol@lval+1,?___fttol+1
 14516  003C26  C136  F12C         	movff	___fttol@lval+2,?___fttol+2
 14517  003C2A  C137  F12D         	movff	___fttol@lval+3,?___fttol+3
 14518  003C2E  0012               	return	
 14519  003C30                     __end_of___fttol:
 14520                           	opt stack 0
 14521                           tblptru	equ	0xFF8
 14522                           tblptrh	equ	0xFF7
 14523                           tblptrl	equ	0xFF6
 14524                           tablat	equ	0xFF5
 14525                           prodh	equ	0xFF4
 14526                           prodl	equ	0xFF3
 14527                           intcon	equ	0xFF2
 14528                           postinc0	equ	0xFEE
 14529                           wreg	equ	0xFE8
 14530                           postdec1	equ	0xFE5
 14531                           fsr1l	equ	0xFE1
 14532                           indf2	equ	0xFDF
 14533                           postinc2	equ	0xFDE
 14534                           postdec2	equ	0xFDD
 14535                           fsr2h	equ	0xFDA
 14536                           fsr2l	equ	0xFD9
 14537                           status	equ	0xFD8
 14538                           
 14539 ;; *************** function ___aldiv *****************
 14540 ;; Defined at:
 14541 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
 14542 ;; Parameters:    Size  Location     Type
 14543 ;;  dividend        4    0[BANK1 ] long 
 14544 ;;  divisor         4    4[BANK1 ] long 
 14545 ;; Auto vars:     Size  Location     Type
 14546 ;;  quotient        4   10[BANK1 ] long 
 14547 ;;  sign            1    9[BANK1 ] unsigned char 
 14548 ;;  counter         1    8[BANK1 ] unsigned char 
 14549 ;; Return value:  Size  Location     Type
 14550 ;;                  4    0[BANK1 ] long 
 14551 ;; Registers used:
 14552 ;;		wreg, status,2, status,0
 14553 ;; Tracked objects:
 14554 ;;		On entry : 0/0
 14555 ;;		On exit  : 0/0
 14556 ;;		Unchanged: 0/0
 14557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14558 ;;      Params:         0       0       8       0       0       0       0
 14559 ;;      Locals:         0       0       6       0       0       0       0
 14560 ;;      Temps:          0       0       0       0       0       0       0
 14561 ;;      Totals:         0       0      14       0       0       0       0
 14562 ;;Total ram usage:       14 bytes
 14563 ;; Hardware stack levels used:    1
 14564 ;; Hardware stack levels required when called:   12
 14565 ;; This function calls:
 14566 ;;		Nothing
 14567 ;; This function is called by:
 14568 ;;		_desintegrator
 14569 ;; This function uses a non-reentrant model
 14570 ;;
 14571                           
 14572                           	psect	text57
 14573  003FB8                     __ptext57:
 14574                           	opt stack 0
 14575  003FB8                     ___aldiv:
 14576                           	opt stack 15
 14577                           
 14578                           ; BSR set to: 1
 14579                           ;incstack = 0
 14580  003FB8  0E00               	movlw	0
 14581  003FBA  0101               	movlb	1	; () banked
 14582  003FBC  6F09               	movwf	___aldiv@sign& (0+255),b
 14583                           
 14584                           ; BSR set to: 1
 14585  003FBE  0101               	movlb	1	; () banked
 14586  003FC0  AF07               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 14587  003FC2  D00C               	goto	l10149
 14588                           
 14589                           ; BSR set to: 1
 14590  003FC4  0101               	movlb	1	; () banked
 14591  003FC6  1F07               	comf	(___aldiv@divisor+3)& (0+255),f,b
 14592  003FC8  1F06               	comf	(___aldiv@divisor+2)& (0+255),f,b
 14593  003FCA  1F05               	comf	(___aldiv@divisor+1)& (0+255),f,b
 14594  003FCC  6D04               	negf	___aldiv@divisor& (0+255),b
 14595  003FCE  0E00               	movlw	0
 14596  003FD0  2305               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 14597  003FD2  2306               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 14598  003FD4  2307               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 14599                           
 14600                           ; BSR set to: 1
 14601  003FD6  0E01               	movlw	1
 14602  003FD8  0101               	movlb	1	; () banked
 14603  003FDA  6F09               	movwf	___aldiv@sign& (0+255),b
 14604  003FDC                     l10149:
 14605                           
 14606                           ; BSR set to: 1
 14607  003FDC  0101               	movlb	1	; () banked
 14608  003FDE  AF03               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 14609  003FE0  D00C               	goto	l10155
 14610                           
 14611                           ; BSR set to: 1
 14612  003FE2  0101               	movlb	1	; () banked
 14613  003FE4  1F03               	comf	(___aldiv@dividend+3)& (0+255),f,b
 14614  003FE6  1F02               	comf	(___aldiv@dividend+2)& (0+255),f,b
 14615  003FE8  1F01               	comf	(___aldiv@dividend+1)& (0+255),f,b
 14616  003FEA  6D00               	negf	___aldiv@dividend& (0+255),b
 14617  003FEC  0E00               	movlw	0
 14618  003FEE  2301               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 14619  003FF0  2302               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 14620  003FF2  2303               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 14621                           
 14622                           ; BSR set to: 1
 14623  003FF4  0E01               	movlw	1
 14624  003FF6  0101               	movlb	1	; () banked
 14625  003FF8  1B09               	xorwf	___aldiv@sign& (0+255),f,b
 14626  003FFA                     l10155:
 14627                           
 14628                           ; BSR set to: 1
 14629  003FFA  0E00               	movlw	0
 14630  003FFC  0101               	movlb	1	; () banked
 14631  003FFE  6F0A               	movwf	___aldiv@quotient& (0+255),b
 14632  004000  0E00               	movlw	0
 14633  004002  6F0B               	movwf	(___aldiv@quotient+1)& (0+255),b
 14634  004004  0E00               	movlw	0
 14635  004006  6F0C               	movwf	(___aldiv@quotient+2)& (0+255),b
 14636  004008  0E00               	movlw	0
 14637  00400A  6F0D               	movwf	(___aldiv@quotient+3)& (0+255),b
 14638                           
 14639                           ; BSR set to: 1
 14640  00400C  0101               	movlb	1	; () banked
 14641  00400E  5104               	movf	___aldiv@divisor& (0+255),w,b
 14642  004010  0101               	movlb	1	; () banked
 14643  004012  1105               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 14644  004014  0101               	movlb	1	; () banked
 14645  004016  1106               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 14646  004018  0101               	movlb	1	; () banked
 14647  00401A  1107               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 14648  00401C  B4D8               	btfsc	status,2,c
 14649  00401E  D042               	goto	l10177
 14650                           
 14651                           ; BSR set to: 1
 14652  004020  0E01               	movlw	1
 14653  004022  0101               	movlb	1	; () banked
 14654  004024  6F08               	movwf	___aldiv@counter& (0+255),b
 14655  004026  D008               	goto	l10163
 14656  004028                     l10161:
 14657                           
 14658                           ; BSR set to: 1
 14659  004028  0101               	movlb	1	; () banked
 14660  00402A  90D8               	bcf	status,0,c
 14661  00402C  3704               	rlcf	___aldiv@divisor& (0+255),f,b
 14662  00402E  3705               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 14663  004030  3706               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 14664  004032  3707               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 14665  004034  0101               	movlb	1	; () banked
 14666  004036  2B08               	incf	___aldiv@counter& (0+255),f,b
 14667  004038                     l10163:
 14668                           
 14669                           ; BSR set to: 1
 14670  004038  0101               	movlb	1	; () banked
 14671  00403A  AF07               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 14672  00403C  D7F5               	goto	l10161
 14673  00403E                     l10165:
 14674                           
 14675                           ; BSR set to: 1
 14676  00403E  0101               	movlb	1	; () banked
 14677  004040  90D8               	bcf	status,0,c
 14678  004042  370A               	rlcf	___aldiv@quotient& (0+255),f,b
 14679  004044  370B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 14680  004046  370C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 14681  004048  370D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 14682                           
 14683                           ; BSR set to: 1
 14684  00404A  0101               	movlb	1	; () banked
 14685  00404C  5104               	movf	___aldiv@divisor& (0+255),w,b
 14686  00404E  0101               	movlb	1	; () banked
 14687  004050  5D00               	subwf	___aldiv@dividend& (0+255),w,b
 14688  004052  0101               	movlb	1	; () banked
 14689  004054  5105               	movf	(___aldiv@divisor+1)& (0+255),w,b
 14690  004056  0101               	movlb	1	; () banked
 14691  004058  5901               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 14692  00405A  0101               	movlb	1	; () banked
 14693  00405C  5106               	movf	(___aldiv@divisor+2)& (0+255),w,b
 14694  00405E  0101               	movlb	1	; () banked
 14695  004060  5902               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 14696  004062  0101               	movlb	1	; () banked
 14697  004064  5107               	movf	(___aldiv@divisor+3)& (0+255),w,b
 14698  004066  0101               	movlb	1	; () banked
 14699  004068  5903               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 14700  00406A  A0D8               	btfss	status,0,c
 14701  00406C  D012               	goto	l10173
 14702                           
 14703                           ; BSR set to: 1
 14704  00406E  0101               	movlb	1	; () banked
 14705  004070  5104               	movf	___aldiv@divisor& (0+255),w,b
 14706  004072  0101               	movlb	1	; () banked
 14707  004074  5F00               	subwf	___aldiv@dividend& (0+255),f,b
 14708  004076  0101               	movlb	1	; () banked
 14709  004078  5105               	movf	(___aldiv@divisor+1)& (0+255),w,b
 14710  00407A  0101               	movlb	1	; () banked
 14711  00407C  5B01               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 14712  00407E  0101               	movlb	1	; () banked
 14713  004080  5106               	movf	(___aldiv@divisor+2)& (0+255),w,b
 14714  004082  0101               	movlb	1	; () banked
 14715  004084  5B02               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 14716  004086  0101               	movlb	1	; () banked
 14717  004088  5107               	movf	(___aldiv@divisor+3)& (0+255),w,b
 14718  00408A  0101               	movlb	1	; () banked
 14719  00408C  5B03               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 14720                           
 14721                           ; BSR set to: 1
 14722  00408E  0101               	movlb	1	; () banked
 14723  004090  810A               	bsf	___aldiv@quotient& (0+255),0,b
 14724  004092                     l10173:
 14725                           
 14726                           ; BSR set to: 1
 14727  004092  0101               	movlb	1	; () banked
 14728  004094  90D8               	bcf	status,0,c
 14729  004096  3307               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 14730  004098  3306               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 14731  00409A  3305               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 14732  00409C  3304               	rrcf	___aldiv@divisor& (0+255),f,b
 14733                           
 14734                           ; BSR set to: 1
 14735  00409E  0101               	movlb	1	; () banked
 14736  0040A0  2F08               	decfsz	___aldiv@counter& (0+255),f,b
 14737  0040A2  D7CD               	goto	l10165
 14738  0040A4                     l10177:
 14739                           
 14740                           ; BSR set to: 1
 14741  0040A4  0101               	movlb	1	; () banked
 14742  0040A6  5109               	movf	___aldiv@sign& (0+255),w,b
 14743  0040A8  0101               	movlb	1	; () banked
 14744  0040AA  B4D8               	btfsc	status,2,c
 14745  0040AC  D009               	goto	l10181
 14746                           
 14747                           ; BSR set to: 1
 14748  0040AE  0101               	movlb	1	; () banked
 14749  0040B0  1F0D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 14750  0040B2  1F0C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 14751  0040B4  1F0B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 14752  0040B6  6D0A               	negf	___aldiv@quotient& (0+255),b
 14753  0040B8  0E00               	movlw	0
 14754  0040BA  230B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 14755  0040BC  230C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 14756  0040BE  230D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 14757  0040C0                     l10181:
 14758                           
 14759                           ; BSR set to: 1
 14760  0040C0  C10A  F100         	movff	___aldiv@quotient,?___aldiv
 14761  0040C4  C10B  F101         	movff	___aldiv@quotient+1,?___aldiv+1
 14762  0040C8  C10C  F102         	movff	___aldiv@quotient+2,?___aldiv+2
 14763  0040CC  C10D  F103         	movff	___aldiv@quotient+3,?___aldiv+3
 14764  0040D0  0012               	return	
 14765  0040D2                     __end_of___aldiv:
 14766                           	opt stack 0
 14767                           tblptru	equ	0xFF8
 14768                           tblptrh	equ	0xFF7
 14769                           tblptrl	equ	0xFF6
 14770                           tablat	equ	0xFF5
 14771                           prodh	equ	0xFF4
 14772                           prodl	equ	0xFF3
 14773                           intcon	equ	0xFF2
 14774                           postinc0	equ	0xFEE
 14775                           wreg	equ	0xFE8
 14776                           postdec1	equ	0xFE5
 14777                           fsr1l	equ	0xFE1
 14778                           indf2	equ	0xFDF
 14779                           postinc2	equ	0xFDE
 14780                           postdec2	equ	0xFDD
 14781                           fsr2h	equ	0xFDA
 14782                           fsr2l	equ	0xFD9
 14783                           status	equ	0xFD8
 14784                           
 14785 ;; *************** function _checkPass *****************
 14786 ;; Defined at:
 14787 ;;		line 14 in file "source/DisplayProtocol.h"
 14788 ;; Parameters:    Size  Location     Type
 14789 ;;		None
 14790 ;; Auto vars:     Size  Location     Type
 14791 ;;  i               2    5[BANK1 ] int 
 14792 ;;  passOK          1    4[BANK1 ] unsigned char 
 14793 ;; Return value:  Size  Location     Type
 14794 ;;                  1    wreg      unsigned char 
 14795 ;; Registers used:
 14796 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14797 ;; Tracked objects:
 14798 ;;		On entry : 0/0
 14799 ;;		On exit  : 0/0
 14800 ;;		Unchanged: 0/0
 14801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14802 ;;      Params:         0       0       0       0       0       0       0
 14803 ;;      Locals:         0       0       3       0       0       0       0
 14804 ;;      Temps:          0       0       4       0       0       0       0
 14805 ;;      Totals:         0       0       7       0       0       0       0
 14806 ;;Total ram usage:        7 bytes
 14807 ;; Hardware stack levels used:    1
 14808 ;; Hardware stack levels required when called:   12
 14809 ;; This function calls:
 14810 ;;		Nothing
 14811 ;; This function is called by:
 14812 ;;		_pressENTER
 14813 ;; This function uses a non-reentrant model
 14814 ;;
 14815                           
 14816                           	psect	text58
 14817  005D0A                     __ptext58:
 14818                           	opt stack 0
 14819  005D0A                     _checkPass:
 14820                           	opt stack 16
 14821                           
 14822                           ;DisplayProtocol.h: 15: int i;
 14823                           ;DisplayProtocol.h: 16: char passOK = 0;
 14824                           
 14825                           ; BSR set to: 1
 14826                           ;incstack = 0
 14827  005D0A  0E00               	movlw	0
 14828  005D0C  0101               	movlb	1	; () banked
 14829  005D0E  6F04               	movwf	checkPass@passOK& (0+255),b
 14830                           
 14831                           ;DisplayProtocol.h: 17: for (i = 0; i < 4; i++) {
 14832  005D10  0E00               	movlw	0
 14833  005D12  0101               	movlb	1	; () banked
 14834  005D14  6F06               	movwf	(checkPass@i+1)& (0+255),b
 14835  005D16  0E00               	movlw	0
 14836  005D18  6F05               	movwf	checkPass@i& (0+255),b
 14837  005D1A                     l10233:
 14838                           
 14839                           ; BSR set to: 1
 14840  005D1A  0101               	movlb	1	; () banked
 14841  005D1C  BF06               	btfsc	(checkPass@i+1)& (0+255),7,b
 14842  005D1E  D008               	goto	l10237
 14843  005D20  0101               	movlb	1	; () banked
 14844  005D22  5106               	movf	(checkPass@i+1)& (0+255),w,b
 14845  005D24  E136               	bnz	l10247
 14846  005D26  0E04               	movlw	4
 14847  005D28  0101               	movlb	1	; () banked
 14848  005D2A  5D05               	subwf	checkPass@i& (0+255),w,b
 14849  005D2C  B0D8               	btfsc	status,0,c
 14850  005D2E  D031               	goto	l10247
 14851  005D30                     l10237:
 14852                           
 14853                           ; BSR set to: 1
 14854                           ;DisplayProtocol.h: 18: if (introducido[i] == contra[i])
 14855  005D30  0EAB               	movlw	low _contra
 14856  005D32  0101               	movlb	1	; () banked
 14857  005D34  2505               	addwf	checkPass@i& (0+255),w,b
 14858  005D36  6ED9               	movwf	fsr2l,c
 14859  005D38  0E00               	movlw	high _contra
 14860  005D3A  0101               	movlb	1	; () banked
 14861  005D3C  2106               	addwfc	(checkPass@i+1)& (0+255),w,b
 14862  005D3E  6EDA               	movwf	fsr2h,c
 14863  005D40  50DF               	movf	indf2,w,c
 14864  005D42  0101               	movlb	1	; () banked
 14865  005D44  6F00               	movwf	??_checkPass& (0+255),b
 14866  005D46  6B01               	clrf	(??_checkPass+1)& (0+255),b
 14867  005D48  0EAF               	movlw	low _introducido
 14868  005D4A  0101               	movlb	1	; () banked
 14869  005D4C  2505               	addwf	checkPass@i& (0+255),w,b
 14870  005D4E  6ED9               	movwf	fsr2l,c
 14871  005D50  0E01               	movlw	high _introducido
 14872  005D52  0101               	movlb	1	; () banked
 14873  005D54  2106               	addwfc	(checkPass@i+1)& (0+255),w,b
 14874  005D56  6EDA               	movwf	fsr2h,c
 14875  005D58  50DF               	movf	indf2,w,c
 14876  005D5A  0101               	movlb	1	; () banked
 14877  005D5C  6F02               	movwf	(??_checkPass+2)& (0+255),b
 14878  005D5E  6B03               	clrf	(??_checkPass+3)& (0+255),b
 14879  005D60  BF02               	btfsc	(??_checkPass+2)& (0+255),7,b
 14880  005D62  0703               	decf	(??_checkPass+3)& (0+255),f,b
 14881  005D64  0101               	movlb	1	; () banked
 14882  005D66  5100               	movf	??_checkPass& (0+255),w,b
 14883  005D68  0101               	movlb	1	; () banked
 14884  005D6A  1902               	xorwf	(??_checkPass+2)& (0+255),w,b
 14885  005D6C  E10A               	bnz	l10241
 14886  005D6E  0101               	movlb	1	; () banked
 14887  005D70  5101               	movf	(??_checkPass+1)& (0+255),w,b
 14888  005D72  0101               	movlb	1	; () banked
 14889  005D74  1903               	xorwf	(??_checkPass+3)& (0+255),w,b
 14890  005D76  A4D8               	btfss	status,2,c
 14891  005D78  D004               	goto	l10241
 14892                           
 14893                           ; BSR set to: 1
 14894                           ;DisplayProtocol.h: 19: passOK = 1;
 14895  005D7A  0E01               	movlw	1
 14896  005D7C  0101               	movlb	1	; () banked
 14897  005D7E  6F04               	movwf	checkPass@passOK& (0+255),b
 14898  005D80  D004               	goto	l10243
 14899  005D82                     l10241:
 14900                           
 14901                           ; BSR set to: 1
 14902                           ;DisplayProtocol.h: 20: else {
 14903                           ;DisplayProtocol.h: 21: passOK = 0;
 14904  005D82  0E00               	movlw	0
 14905  005D84  0101               	movlb	1	; () banked
 14906  005D86  6F04               	movwf	checkPass@passOK& (0+255),b
 14907                           
 14908                           ;DisplayProtocol.h: 22: break;
 14909  005D88  D004               	goto	l10247
 14910  005D8A                     l10243:
 14911                           
 14912                           ; BSR set to: 1
 14913  005D8A  0101               	movlb	1	; () banked
 14914  005D8C  4B05               	infsnz	checkPass@i& (0+255),f,b
 14915  005D8E  2B06               	incf	(checkPass@i+1)& (0+255),f,b
 14916  005D90  D7C4               	goto	l10233
 14917  005D92                     l10247:
 14918                           
 14919                           ; BSR set to: 1
 14920                           ;DisplayProtocol.h: 23: }
 14921                           ;DisplayProtocol.h: 24: }
 14922                           ;DisplayProtocol.h: 25: return passOK;
 14923  005D92  0101               	movlb	1	; () banked
 14924  005D94  5104               	movf	checkPass@passOK& (0+255),w,b
 14925  005D96  0012               	return	
 14926  005D98                     __end_of_checkPass:
 14927                           	opt stack 0
 14928                           tblptru	equ	0xFF8
 14929                           tblptrh	equ	0xFF7
 14930                           tblptrl	equ	0xFF6
 14931                           tablat	equ	0xFF5
 14932                           prodh	equ	0xFF4
 14933                           prodl	equ	0xFF3
 14934                           intcon	equ	0xFF2
 14935                           postinc0	equ	0xFEE
 14936                           wreg	equ	0xFE8
 14937                           postdec1	equ	0xFE5
 14938                           fsr1l	equ	0xFE1
 14939                           indf2	equ	0xFDF
 14940                           postinc2	equ	0xFDE
 14941                           postdec2	equ	0xFDD
 14942                           fsr2h	equ	0xFDA
 14943                           fsr2l	equ	0xFD9
 14944                           status	equ	0xFD8
 14945                           
 14946 ;; *************** function _pressDOWN *****************
 14947 ;; Defined at:
 14948 ;;		line 189 in file "source/DisplayProtocol.h"
 14949 ;; Parameters:    Size  Location     Type
 14950 ;;		None
 14951 ;; Auto vars:     Size  Location     Type
 14952 ;;		None
 14953 ;; Return value:  Size  Location     Type
 14954 ;;                  1    wreg      void 
 14955 ;; Registers used:
 14956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14957 ;; Tracked objects:
 14958 ;;		On entry : 0/0
 14959 ;;		On exit  : 0/0
 14960 ;;		Unchanged: 0/0
 14961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14962 ;;      Params:         0       0       0       0       0       0       0
 14963 ;;      Locals:         0       0       0       0       0       0       0
 14964 ;;      Temps:          0       0       1       0       0       0       0
 14965 ;;      Totals:         0       0       1       0       0       0       0
 14966 ;;Total ram usage:        1 bytes
 14967 ;; Hardware stack levels used:    1
 14968 ;; Hardware stack levels required when called:   13
 14969 ;; This function calls:
 14970 ;;		_chanValDigDOWN
 14971 ;; This function is called by:
 14972 ;;		_buttonChecking
 14973 ;; This function uses a non-reentrant model
 14974 ;;
 14975                           
 14976                           	psect	text59
 14977  004724                     __ptext59:
 14978                           	opt stack 0
 14979  004724                     _pressDOWN:
 14980                           	opt stack 16
 14981                           
 14982                           ;DisplayProtocol.h: 190: if (actualScreen == 0 || actualScreen == 4) {
 14983                           
 14984                           ; BSR set to: 1
 14985                           ;incstack = 0
 14986  004724  0101               	movlb	1	; () banked
 14987  004726  51C3               	movf	_actualScreen& (0+255),w,b
 14988  004728  B4D8               	btfsc	status,2,c
 14989  00472A  D005               	goto	l10649
 14990                           
 14991                           ; BSR set to: 1
 14992  00472C  0E04               	movlw	4
 14993  00472E  0101               	movlb	1	; () banked
 14994  004730  19C3               	xorwf	_actualScreen& (0+255),w,b
 14995  004732  A4D8               	btfss	status,2,c
 14996  004734  D009               	goto	l10655
 14997  004736                     l10649:
 14998                           
 14999                           ; BSR set to: 1
 15000                           ;DisplayProtocol.h: 191: menuSection--;
 15001  004736  0101               	movlb	1	; () banked
 15002  004738  07CA               	decf	_menuSection& (0+255),f,b
 15003                           
 15004                           ; BSR set to: 1
 15005                           ;DisplayProtocol.h: 192: if (menuSection < 0)
 15006  00473A  0101               	movlb	1	; () banked
 15007  00473C  AFCA               	btfss	_menuSection& (0+255),7,b
 15008  00473E  0012               	return	
 15009                           
 15010                           ; BSR set to: 1
 15011                           ;DisplayProtocol.h: 193: menuSection = 3;
 15012  004740  0E03               	movlw	3
 15013  004742  0101               	movlb	1	; () banked
 15014  004744  6FCA               	movwf	_menuSection& (0+255),b
 15015                           
 15016                           ; BSR set to: 1
 15017                           ;DisplayProtocol.h: 194: } else if (actualScreen == 1) {
 15018  004746  0012               	return	
 15019  004748                     l10655:
 15020                           
 15021                           ; BSR set to: 1
 15022  004748  0101               	movlb	1	; () banked
 15023  00474A  05C3               	decf	_actualScreen& (0+255),w,b
 15024  00474C  A4D8               	btfss	status,2,c
 15025  00474E  D022               	goto	l10661
 15026                           
 15027                           ; BSR set to: 1
 15028                           ;DisplayProtocol.h: 195: introducido[passSection]--;
 15029  004750  0101               	movlb	1	; () banked
 15030  004752  51CB               	movf	_passSection& (0+255),w,b
 15031  004754  0D01               	mullw	1
 15032  004756  0EAF               	movlw	low _introducido
 15033  004758  24F3               	addwf	prodl,w,c
 15034  00475A  6ED9               	movwf	fsr2l,c
 15035  00475C  0E01               	movlw	high _introducido
 15036  00475E  20F4               	addwfc	prodh,w,c
 15037  004760  6EDA               	movwf	fsr2h,c
 15038  004762  06DF               	decf	indf2,f,c
 15039                           
 15040                           ;DisplayProtocol.h: 196: if (introducido[passSection] < 0)
 15041  004764  0101               	movlb	1	; () banked
 15042  004766  51CB               	movf	_passSection& (0+255),w,b
 15043  004768  0D01               	mullw	1
 15044  00476A  0EAF               	movlw	low _introducido
 15045  00476C  24F3               	addwf	prodl,w,c
 15046  00476E  6ED9               	movwf	fsr2l,c
 15047  004770  0E01               	movlw	high _introducido
 15048  004772  20F4               	addwfc	prodh,w,c
 15049  004774  6EDA               	movwf	fsr2h,c
 15050  004776  0E00               	movlw	0
 15051  004778  AEDB               	btfss	plusw2,7,c
 15052  00477A  0012               	return	
 15053                           
 15054                           ; BSR set to: 1
 15055                           ;DisplayProtocol.h: 197: introducido[passSection] = 9;
 15056  00477C  0101               	movlb	1	; () banked
 15057  00477E  51CB               	movf	_passSection& (0+255),w,b
 15058  004780  0D01               	mullw	1
 15059  004782  0EAF               	movlw	low _introducido
 15060  004784  24F3               	addwf	prodl,w,c
 15061  004786  6ED9               	movwf	fsr2l,c
 15062  004788  0E01               	movlw	high _introducido
 15063  00478A  20F4               	addwfc	prodh,w,c
 15064  00478C  6EDA               	movwf	fsr2h,c
 15065  00478E  0E09               	movlw	9
 15066  004790  6EDF               	movwf	indf2,c
 15067                           
 15068                           ; BSR set to: 1
 15069                           ;DisplayProtocol.h: 198: } else if (actualScreen == 2 || actualScreen == 3
 15070  004792  0012               	return	
 15071  004794                     l10661:
 15072                           
 15073                           ; BSR set to: 1
 15074                           ;DisplayProtocol.h: 199: || actualScreen == 10 || actualScreen == 11) {
 15075  004794  0E02               	movlw	2
 15076  004796  0101               	movlb	1	; () banked
 15077  004798  19C3               	xorwf	_actualScreen& (0+255),w,b
 15078  00479A  B4D8               	btfsc	status,2,c
 15079  00479C  D00F               	goto	l10669
 15080                           
 15081                           ; BSR set to: 1
 15082  00479E  0E03               	movlw	3
 15083  0047A0  0101               	movlb	1	; () banked
 15084  0047A2  19C3               	xorwf	_actualScreen& (0+255),w,b
 15085  0047A4  B4D8               	btfsc	status,2,c
 15086  0047A6  D00A               	goto	l10669
 15087                           
 15088                           ; BSR set to: 1
 15089  0047A8  0E0A               	movlw	10
 15090  0047AA  0101               	movlb	1	; () banked
 15091  0047AC  19C3               	xorwf	_actualScreen& (0+255),w,b
 15092  0047AE  B4D8               	btfsc	status,2,c
 15093  0047B0  D005               	goto	l10669
 15094                           
 15095                           ; BSR set to: 1
 15096  0047B2  0E0B               	movlw	11
 15097  0047B4  0101               	movlb	1	; () banked
 15098  0047B6  19C3               	xorwf	_actualScreen& (0+255),w,b
 15099  0047B8  A4D8               	btfss	status,2,c
 15100  0047BA  D011               	goto	l10675
 15101  0047BC                     l10669:
 15102                           
 15103                           ; BSR set to: 1
 15104                           ;DisplayProtocol.h: 200: selSN = !selSN;
 15105  0047BC  0101               	movlb	1	; () banked
 15106  0047BE  51CC               	movf	_selSN& (0+255),w,b
 15107  0047C0  A4D8               	btfss	status,2,c
 15108  0047C2  D002               	goto	u15850
 15109  0047C4  0E01               	movlw	1
 15110  0047C6  D001               	goto	u15860
 15111  0047C8                     u15850:
 15112  0047C8  0E00               	movlw	0
 15113  0047CA                     u15860:
 15114  0047CA  0101               	movlb	1	; () banked
 15115  0047CC  6FCC               	movwf	_selSN& (0+255),b
 15116                           
 15117                           ; BSR set to: 1
 15118                           ;DisplayProtocol.h: 201: if(selSN > 1)
 15119  0047CE  0E01               	movlw	1
 15120  0047D0  0101               	movlb	1	; () banked
 15121  0047D2  65CC               	cpfsgt	_selSN& (0+255),b
 15122  0047D4  0012               	return	
 15123                           
 15124                           ; BSR set to: 1
 15125                           ;DisplayProtocol.h: 202: selSN = 0;
 15126  0047D6  0E00               	movlw	0
 15127  0047D8  0101               	movlb	1	; () banked
 15128  0047DA  6FCC               	movwf	_selSN& (0+255),b
 15129                           
 15130                           ; BSR set to: 1
 15131                           ;DisplayProtocol.h: 203: }else if(actualScreen == 5) {
 15132  0047DC  0012               	return	
 15133  0047DE                     l10675:
 15134                           
 15135                           ; BSR set to: 1
 15136  0047DE  0E05               	movlw	5
 15137  0047E0  0101               	movlb	1	; () banked
 15138  0047E2  19C3               	xorwf	_actualScreen& (0+255),w,b
 15139  0047E4  B4D8               	btfsc	status,2,c
 15140  0047E6  D009               	goto	l10685
 15141  0047E8  D014               	goto	l10687
 15142  0047EA                     l10679:
 15143                           
 15144                           ; BSR set to: 1
 15145                           ;DisplayProtocol.h: 208: chanValDigDOWN();
 15146  0047EA  EC4E  F026         	call	_chanValDigDOWN	;wreg free
 15147                           
 15148                           ;DisplayProtocol.h: 209: break;
 15149  0047EE  0012               	return	
 15150  0047F0                     l10681:
 15151                           
 15152                           ;DisplayProtocol.h: 211: chanVals--;
 15153  0047F0  0101               	movlb	1	; () banked
 15154  0047F2  07BA               	decf	_chanVals& (0+255),f,b
 15155  0047F4  A0D8               	btfss	status,0,c
 15156  0047F6  07BB               	decf	(_chanVals+1)& (0+255),f,b
 15157                           
 15158                           ; BSR set to: 1
 15159                           ;DisplayProtocol.h: 213: }
 15160                           ;DisplayProtocol.h: 214: }
 15161                           
 15162                           ;DisplayProtocol.h: 212: break;
 15163  0047F8  0012               	return	
 15164  0047FA                     l10685:
 15165                           
 15166                           ; BSR set to: 1
 15167  0047FA  0101               	movlb	1	; () banked
 15168  0047FC  51CA               	movf	_menuSection& (0+255),w,b
 15169                           
 15170                           ; Switch size 1, requested type "space"
 15171                           ; Number of cases is 3, Range of values is 0 to 2
 15172                           ; switch strategies available:
 15173                           ; Name         Instructions Cycles
 15174                           ; simple_byte           10     6 (average)
 15175                           ;	Chosen strategy is simple_byte
 15176  0047FE  0A00               	xorlw	0	; case 0
 15177  004800  B4D8               	btfsc	status,2,c
 15178  004802  0012               	return	
 15179  004804  0A01               	xorlw	1	; case 1
 15180  004806  B4D8               	btfsc	status,2,c
 15181  004808  D7F0               	goto	l10679
 15182  00480A  0A03               	xorlw	3	; case 2
 15183  00480C  A4D8               	btfss	status,2,c
 15184                           
 15185                           ; BSR set to: 1
 15186                           ;DisplayProtocol.h: 215: }else if(actualScreen == 12)
 15187  00480E  0012               	return	
 15188  004810  D7EF               	goto	l10681
 15189  004812                     l10687:
 15190                           
 15191                           ; BSR set to: 1
 15192  004812  0E0C               	movlw	12
 15193  004814  0101               	movlb	1	; () banked
 15194  004816  19C3               	xorwf	_actualScreen& (0+255),w,b
 15195  004818  A4D8               	btfss	status,2,c
 15196  00481A  0012               	return	
 15197                           
 15198                           ; BSR set to: 1
 15199                           ;DisplayProtocol.h: 216: chanValDigDOWN();
 15200  00481C  EC4E  F026         	call	_chanValDigDOWN	;wreg free
 15201  004820  0012               	return	
 15202  004822                     __end_of_pressDOWN:
 15203                           	opt stack 0
 15204                           tblptru	equ	0xFF8
 15205                           tblptrh	equ	0xFF7
 15206                           tblptrl	equ	0xFF6
 15207                           tablat	equ	0xFF5
 15208                           prodh	equ	0xFF4
 15209                           prodl	equ	0xFF3
 15210                           intcon	equ	0xFF2
 15211                           postinc0	equ	0xFEE
 15212                           wreg	equ	0xFE8
 15213                           postdec1	equ	0xFE5
 15214                           fsr1l	equ	0xFE1
 15215                           indf2	equ	0xFDF
 15216                           postinc2	equ	0xFDE
 15217                           postdec2	equ	0xFDD
 15218                           plusw2	equ	0xFDB
 15219                           fsr2h	equ	0xFDA
 15220                           fsr2l	equ	0xFD9
 15221                           status	equ	0xFD8
 15222                           
 15223 ;; *************** function _chanValDigDOWN *****************
 15224 ;; Defined at:
 15225 ;;		line 37 in file "source/DisplayProtocol.h"
 15226 ;; Parameters:    Size  Location     Type
 15227 ;;		None
 15228 ;; Auto vars:     Size  Location     Type
 15229 ;;		None
 15230 ;; Return value:  Size  Location     Type
 15231 ;;                  1    wreg      void 
 15232 ;; Registers used:
 15233 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15234 ;; Tracked objects:
 15235 ;;		On entry : 0/0
 15236 ;;		On exit  : 0/0
 15237 ;;		Unchanged: 0/0
 15238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15239 ;;      Params:         0       0       0       0       0       0       0
 15240 ;;      Locals:         0       0       0       0       0       0       0
 15241 ;;      Temps:          0       0       5       0       0       0       0
 15242 ;;      Totals:         0       0       5       0       0       0       0
 15243 ;;Total ram usage:        5 bytes
 15244 ;; Hardware stack levels used:    1
 15245 ;; Hardware stack levels required when called:   12
 15246 ;; This function calls:
 15247 ;;		Nothing
 15248 ;; This function is called by:
 15249 ;;		_pressDOWN
 15250 ;; This function uses a non-reentrant model
 15251 ;;
 15252                           
 15253                           	psect	text60
 15254  004C9C                     __ptext60:
 15255                           	opt stack 0
 15256  004C9C                     _chanValDigDOWN:
 15257                           	opt stack 16
 15258                           
 15259                           ;DisplayProtocol.h: 38: chanValdig[chanValSection]--;
 15260                           
 15261                           ;incstack = 0
 15262  004C9C  0101               	movlb	1	; () banked
 15263  004C9E  519D               	movf	_chanValSection& (0+255),w,b
 15264  004CA0  0D01               	mullw	1
 15265  004CA2  0EA9               	movlw	low _chanValdig
 15266  004CA4  24F3               	addwf	prodl,w,c
 15267  004CA6  6ED9               	movwf	fsr2l,c
 15268  004CA8  0E01               	movlw	high _chanValdig
 15269  004CAA  20F4               	addwfc	prodh,w,c
 15270  004CAC  6EDA               	movwf	fsr2h,c
 15271  004CAE  06DF               	decf	indf2,f,c
 15272                           
 15273                           ;DisplayProtocol.h: 39: if(chanValdig[chanValSection] < 0) {
 15274  004CB0  0101               	movlb	1	; () banked
 15275  004CB2  519D               	movf	_chanValSection& (0+255),w,b
 15276  004CB4  0D01               	mullw	1
 15277  004CB6  0EA9               	movlw	low _chanValdig
 15278  004CB8  24F3               	addwf	prodl,w,c
 15279  004CBA  6ED9               	movwf	fsr2l,c
 15280  004CBC  0E01               	movlw	high _chanValdig
 15281  004CBE  20F4               	addwfc	prodh,w,c
 15282  004CC0  6EDA               	movwf	fsr2h,c
 15283  004CC2  0E00               	movlw	0
 15284  004CC4  AEDB               	btfss	plusw2,7,c
 15285  004CC6  0012               	return	
 15286                           
 15287                           ; BSR set to: 1
 15288                           ;DisplayProtocol.h: 40: chanValdig[chanValSection] = 9;
 15289  004CC8  0101               	movlb	1	; () banked
 15290  004CCA  519D               	movf	_chanValSection& (0+255),w,b
 15291  004CCC  0D01               	mullw	1
 15292  004CCE  0EA9               	movlw	low _chanValdig
 15293  004CD0  24F3               	addwf	prodl,w,c
 15294  004CD2  6ED9               	movwf	fsr2l,c
 15295  004CD4  0E01               	movlw	high _chanValdig
 15296  004CD6  20F4               	addwfc	prodh,w,c
 15297  004CD8  6EDA               	movwf	fsr2h,c
 15298  004CDA  0E09               	movlw	9
 15299  004CDC  6EDF               	movwf	indf2,c
 15300                           
 15301                           ; BSR set to: 1
 15302                           ;DisplayProtocol.h: 41: if(chanValSection > 1 && chanValdig[chanValSection - 1] > 0)
 15303  004CDE  0101               	movlb	1	; () banked
 15304  004CE0  519D               	movf	_chanValSection& (0+255),w,b
 15305  004CE2  0A80               	xorlw	128
 15306  004CE4  0F7E               	addlw	-130
 15307  004CE6  A0D8               	btfss	status,0,c
 15308  004CE8  0012               	return	
 15309                           
 15310                           ; BSR set to: 1
 15311  004CEA  0EFF               	movlw	255
 15312  004CEC  0101               	movlb	1	; () banked
 15313  004CEE  6F00               	movwf	??_chanValDigDOWN& (0+255),b
 15314  004CF0  0EFF               	movlw	255
 15315  004CF2  0101               	movlb	1	; () banked
 15316  004CF4  6F01               	movwf	(??_chanValDigDOWN+1)& (0+255),b
 15317  004CF6  C19D  F102         	movff	_chanValSection,??_chanValDigDOWN+2
 15318  004CFA  0101               	movlb	1	; () banked
 15319  004CFC  6B03               	clrf	(??_chanValDigDOWN+3)& (0+255),b
 15320  004CFE  BF02               	btfsc	(??_chanValDigDOWN+2)& (0+255),7,b
 15321  004D00  0703               	decf	(??_chanValDigDOWN+3)& (0+255),f,b
 15322  004D02  0101               	movlb	1	; () banked
 15323  004D04  5100               	movf	??_chanValDigDOWN& (0+255),w,b
 15324  004D06  0101               	movlb	1	; () banked
 15325  004D08  2702               	addwf	(??_chanValDigDOWN+2)& (0+255),f,b
 15326  004D0A  0101               	movlb	1	; () banked
 15327  004D0C  5101               	movf	(??_chanValDigDOWN+1)& (0+255),w,b
 15328  004D0E  0101               	movlb	1	; () banked
 15329  004D10  2303               	addwfc	(??_chanValDigDOWN+3)& (0+255),f,b
 15330  004D12  0EA9               	movlw	low _chanValdig
 15331  004D14  0101               	movlb	1	; () banked
 15332  004D16  2502               	addwf	(??_chanValDigDOWN+2)& (0+255),w,b
 15333  004D18  6ED9               	movwf	fsr2l,c
 15334  004D1A  0E01               	movlw	high _chanValdig
 15335  004D1C  0101               	movlb	1	; () banked
 15336  004D1E  2103               	addwfc	(??_chanValDigDOWN+3)& (0+255),w,b
 15337  004D20  6EDA               	movwf	fsr2h,c
 15338  004D22  50DF               	movf	indf2,w,c
 15339  004D24  0A80               	xorlw	128
 15340  004D26  0F7F               	addlw	-129
 15341  004D28  A0D8               	btfss	status,0,c
 15342  004D2A  0012               	return	
 15343                           
 15344                           ; BSR set to: 1
 15345                           ;DisplayProtocol.h: 42: chanValdig[chanValSection - 1]--;
 15346  004D2C  0EFF               	movlw	255
 15347  004D2E  0101               	movlb	1	; () banked
 15348  004D30  6F00               	movwf	??_chanValDigDOWN& (0+255),b
 15349  004D32  0EFF               	movlw	255
 15350  004D34  0101               	movlb	1	; () banked
 15351  004D36  6F01               	movwf	(??_chanValDigDOWN+1)& (0+255),b
 15352  004D38  C19D  F102         	movff	_chanValSection,??_chanValDigDOWN+2
 15353  004D3C  0101               	movlb	1	; () banked
 15354  004D3E  6B03               	clrf	(??_chanValDigDOWN+3)& (0+255),b
 15355  004D40  BF02               	btfsc	(??_chanValDigDOWN+2)& (0+255),7,b
 15356  004D42  0703               	decf	(??_chanValDigDOWN+3)& (0+255),f,b
 15357  004D44  0101               	movlb	1	; () banked
 15358  004D46  5100               	movf	??_chanValDigDOWN& (0+255),w,b
 15359  004D48  0101               	movlb	1	; () banked
 15360  004D4A  2702               	addwf	(??_chanValDigDOWN+2)& (0+255),f,b
 15361  004D4C  0101               	movlb	1	; () banked
 15362  004D4E  5101               	movf	(??_chanValDigDOWN+1)& (0+255),w,b
 15363  004D50  0101               	movlb	1	; () banked
 15364  004D52  2303               	addwfc	(??_chanValDigDOWN+3)& (0+255),f,b
 15365  004D54  0EA9               	movlw	low _chanValdig
 15366  004D56  0101               	movlb	1	; () banked
 15367  004D58  2502               	addwf	(??_chanValDigDOWN+2)& (0+255),w,b
 15368  004D5A  6ED9               	movwf	fsr2l,c
 15369  004D5C  0E01               	movlw	high _chanValdig
 15370  004D5E  0101               	movlb	1	; () banked
 15371  004D60  2103               	addwfc	(??_chanValDigDOWN+3)& (0+255),w,b
 15372  004D62  6EDA               	movwf	fsr2h,c
 15373  004D64  06DF               	decf	indf2,f,c
 15374                           
 15375                           ; BSR set to: 1
 15376  004D66  0012               	return	
 15377  004D68                     __end_of_chanValDigDOWN:
 15378                           	opt stack 0
 15379                           tblptru	equ	0xFF8
 15380                           tblptrh	equ	0xFF7
 15381                           tblptrl	equ	0xFF6
 15382                           tablat	equ	0xFF5
 15383                           prodh	equ	0xFF4
 15384                           prodl	equ	0xFF3
 15385                           intcon	equ	0xFF2
 15386                           postinc0	equ	0xFEE
 15387                           wreg	equ	0xFE8
 15388                           postdec1	equ	0xFE5
 15389                           fsr1l	equ	0xFE1
 15390                           indf2	equ	0xFDF
 15391                           postinc2	equ	0xFDE
 15392                           postdec2	equ	0xFDD
 15393                           plusw2	equ	0xFDB
 15394                           fsr2h	equ	0xFDA
 15395                           fsr2l	equ	0xFD9
 15396                           status	equ	0xFD8
 15397                           
 15398 ;; *************** function _longPressUP *****************
 15399 ;; Defined at:
 15400 ;;		line 165 in file "source/DisplayProtocol.h"
 15401 ;; Parameters:    Size  Location     Type
 15402 ;;		None
 15403 ;; Auto vars:     Size  Location     Type
 15404 ;;		None
 15405 ;; Return value:  Size  Location     Type
 15406 ;;                  1    wreg      void 
 15407 ;; Registers used:
 15408 ;;		wreg, status,2, status,0
 15409 ;; Tracked objects:
 15410 ;;		On entry : 0/0
 15411 ;;		On exit  : 0/0
 15412 ;;		Unchanged: 0/0
 15413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15414 ;;      Params:         0       0       0       0       0       0       0
 15415 ;;      Locals:         0       0       0       0       0       0       0
 15416 ;;      Temps:          0       0       0       0       0       0       0
 15417 ;;      Totals:         0       0       0       0       0       0       0
 15418 ;;Total ram usage:        0 bytes
 15419 ;; Hardware stack levels used:    1
 15420 ;; Hardware stack levels required when called:   12
 15421 ;; This function calls:
 15422 ;;		Nothing
 15423 ;; This function is called by:
 15424 ;;		_buttonChecking
 15425 ;; This function uses a non-reentrant model
 15426 ;;
 15427                           
 15428                           	psect	text61
 15429  006282                     __ptext61:
 15430                           	opt stack 0
 15431  006282                     _longPressUP:
 15432                           	opt stack 17
 15433                           
 15434                           ;DisplayProtocol.h: 166: if (!UPisLP) {
 15435                           
 15436                           ; BSR set to: 1
 15437                           ;incstack = 0
 15438  006282  5049               	movf	_UPisLP,w,c
 15439  006284  A4D8               	btfss	status,2,c
 15440  006286  0012               	return	
 15441                           
 15442                           ;DisplayProtocol.h: 167: UPisLP = 1;
 15443  006288  0E01               	movlw	1
 15444  00628A  6E49               	movwf	_UPisLP,c
 15445                           
 15446                           ;DisplayProtocol.h: 168: if (actualScreen == 0 || actualScreen == 4) {
 15447  00628C  0101               	movlb	1	; () banked
 15448  00628E  51C3               	movf	_actualScreen& (0+255),w,b
 15449  006290  B4D8               	btfsc	status,2,c
 15450  006292  D005               	goto	l10625
 15451                           
 15452                           ; BSR set to: 1
 15453  006294  0E04               	movlw	4
 15454  006296  0101               	movlb	1	; () banked
 15455  006298  19C3               	xorwf	_actualScreen& (0+255),w,b
 15456  00629A  A4D8               	btfss	status,2,c
 15457  00629C  D01C               	goto	l10637
 15458  00629E                     l10625:
 15459                           
 15460                           ; BSR set to: 1
 15461                           ;DisplayProtocol.h: 169: if (holdENTERcont > 5) {
 15462  00629E  0E05               	movlw	5
 15463  0062A0  0101               	movlb	1	; () banked
 15464  0062A2  65C7               	cpfsgt	_holdENTERcont& (0+255),b
 15465  0062A4  D014               	goto	l10635
 15466                           
 15467                           ; BSR set to: 1
 15468                           ;DisplayProtocol.h: 170: if (actualScreen == 0) {
 15469  0062A6  0101               	movlb	1	; () banked
 15470  0062A8  51C3               	movf	_actualScreen& (0+255),w,b
 15471  0062AA  A4D8               	btfss	status,2,c
 15472  0062AC  D007               	goto	l10631
 15473                           
 15474                           ; BSR set to: 1
 15475                           ;DisplayProtocol.h: 171: actualScreen = 1;
 15476  0062AE  0E01               	movlw	1
 15477  0062B0  0101               	movlb	1	; () banked
 15478  0062B2  6FC3               	movwf	_actualScreen& (0+255),b
 15479                           
 15480                           ;DisplayProtocol.h: 172: fd = 0;
 15481  0062B4  0E00               	movlw	0
 15482  0062B6  0101               	movlb	1	; () banked
 15483  0062B8  6FC5               	movwf	_fd& (0+255),b
 15484                           
 15485                           ;DisplayProtocol.h: 173: } else if (actualScreen == 4)
 15486  0062BA  0012               	return	
 15487  0062BC                     l10631:
 15488                           
 15489                           ; BSR set to: 1
 15490  0062BC  0E04               	movlw	4
 15491  0062BE  0101               	movlb	1	; () banked
 15492  0062C0  19C3               	xorwf	_actualScreen& (0+255),w,b
 15493  0062C2  A4D8               	btfss	status,2,c
 15494  0062C4  0012               	return	
 15495                           
 15496                           ; BSR set to: 1
 15497                           ;DisplayProtocol.h: 174: actualScreen = 9;
 15498  0062C6  0E09               	movlw	9
 15499  0062C8  0101               	movlb	1	; () banked
 15500  0062CA  6FC3               	movwf	_actualScreen& (0+255),b
 15501                           
 15502                           ; BSR set to: 1
 15503                           ;DisplayProtocol.h: 175: } else
 15504                           
 15505                           ; BSR set to: 1
 15506  0062CC  0012               	return	
 15507  0062CE                     l10635:
 15508                           
 15509                           ; BSR set to: 1
 15510                           ;DisplayProtocol.h: 176: menuSection = 0;
 15511  0062CE  0E00               	movlw	0
 15512  0062D0  0101               	movlb	1	; () banked
 15513  0062D2  6FCA               	movwf	_menuSection& (0+255),b
 15514                           
 15515                           ; BSR set to: 1
 15516                           ;DisplayProtocol.h: 177: }else if(actualScreen == 5) {
 15517  0062D4  0012               	return	
 15518  0062D6                     l10637:
 15519                           
 15520                           ; BSR set to: 1
 15521  0062D6  0E05               	movlw	5
 15522  0062D8  0101               	movlb	1	; () banked
 15523  0062DA  19C3               	xorwf	_actualScreen& (0+255),w,b
 15524  0062DC  A4D8               	btfss	status,2,c
 15525  0062DE  0012               	return	
 15526                           
 15527                           ; BSR set to: 1
 15528                           ;DisplayProtocol.h: 178: if(menuSection == 2)
 15529  0062E0  0E02               	movlw	2
 15530  0062E2  0101               	movlb	1	; () banked
 15531  0062E4  19CA               	xorwf	_menuSection& (0+255),w,b
 15532  0062E6  A4D8               	btfss	status,2,c
 15533  0062E8  0012               	return	
 15534                           
 15535                           ; BSR set to: 1
 15536                           ;DisplayProtocol.h: 179: chanVals += 10;
 15537  0062EA  0E0A               	movlw	10
 15538  0062EC  0101               	movlb	1	; () banked
 15539  0062EE  27BA               	addwf	_chanVals& (0+255),f,b
 15540  0062F0  0E00               	movlw	0
 15541  0062F2  23BB               	addwfc	(_chanVals+1)& (0+255),f,b
 15542                           
 15543                           ; BSR set to: 1
 15544                           
 15545                           ; BSR set to: 1
 15546                           
 15547                           ; BSR set to: 1
 15548  0062F4  0012               	return	
 15549  0062F6                     __end_of_longPressUP:
 15550                           	opt stack 0
 15551                           tblptru	equ	0xFF8
 15552                           tblptrh	equ	0xFF7
 15553                           tblptrl	equ	0xFF6
 15554                           tablat	equ	0xFF5
 15555                           prodh	equ	0xFF4
 15556                           prodl	equ	0xFF3
 15557                           intcon	equ	0xFF2
 15558                           postinc0	equ	0xFEE
 15559                           wreg	equ	0xFE8
 15560                           postdec1	equ	0xFE5
 15561                           fsr1l	equ	0xFE1
 15562                           indf2	equ	0xFDF
 15563                           postinc2	equ	0xFDE
 15564                           postdec2	equ	0xFDD
 15565                           plusw2	equ	0xFDB
 15566                           fsr2h	equ	0xFDA
 15567                           fsr2l	equ	0xFD9
 15568                           status	equ	0xFD8
 15569                           
 15570 ;; *************** function _longPressRETRO *****************
 15571 ;; Defined at:
 15572 ;;		line 259 in file "source/DisplayProtocol.h"
 15573 ;; Parameters:    Size  Location     Type
 15574 ;;		None
 15575 ;; Auto vars:     Size  Location     Type
 15576 ;;		None
 15577 ;; Return value:  Size  Location     Type
 15578 ;;                  1    wreg      void 
 15579 ;; Registers used:
 15580 ;;		wreg, status,2, status,0
 15581 ;; Tracked objects:
 15582 ;;		On entry : 0/0
 15583 ;;		On exit  : 0/0
 15584 ;;		Unchanged: 0/0
 15585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15586 ;;      Params:         0       0       0       0       0       0       0
 15587 ;;      Locals:         0       0       0       0       0       0       0
 15588 ;;      Temps:          0       0       0       0       0       0       0
 15589 ;;      Totals:         0       0       0       0       0       0       0
 15590 ;;Total ram usage:        0 bytes
 15591 ;; Hardware stack levels used:    1
 15592 ;; Hardware stack levels required when called:   12
 15593 ;; This function calls:
 15594 ;;		Nothing
 15595 ;; This function is called by:
 15596 ;;		_buttonChecking
 15597 ;; This function uses a non-reentrant model
 15598 ;;
 15599                           
 15600                           	psect	text62
 15601  006514                     __ptext62:
 15602                           	opt stack 0
 15603  006514                     _longPressRETRO:
 15604                           	opt stack 17
 15605                           
 15606                           ;DisplayProtocol.h: 260: if (!RETROisLP) {
 15607                           
 15608                           ;incstack = 0
 15609  006514  5048               	movf	_RETROisLP,w,c
 15610  006516  A4D8               	btfss	status,2,c
 15611  006518  0012               	return	
 15612                           
 15613                           ;DisplayProtocol.h: 261: RETROisLP = 1;
 15614  00651A  0E01               	movlw	1
 15615  00651C  6E48               	movwf	_RETROisLP,c
 15616                           
 15617                           ;DisplayProtocol.h: 262: if(actualScreen == 0 || actualScreen == 4) {
 15618  00651E  0101               	movlb	1	; () banked
 15619  006520  51C3               	movf	_actualScreen& (0+255),w,b
 15620  006522  B4D8               	btfsc	status,2,c
 15621  006524  D005               	goto	l10747
 15622                           
 15623                           ; BSR set to: 1
 15624  006526  0E04               	movlw	4
 15625  006528  0101               	movlb	1	; () banked
 15626  00652A  19C3               	xorwf	_actualScreen& (0+255),w,b
 15627  00652C  A4D8               	btfss	status,2,c
 15628  00652E  D00D               	goto	l10753
 15629  006530                     l10747:
 15630                           
 15631                           ; BSR set to: 1
 15632                           ;DisplayProtocol.h: 263: if(processStarted) {
 15633  006530  0100               	movlb	0	; () banked
 15634  006532  51BB               	movf	_processStarted& (0+255),w,b
 15635  006534  B4D8               	btfsc	status,2,c
 15636  006536  0012               	return	
 15637                           
 15638                           ; BSR set to: 0
 15639                           ;DisplayProtocol.h: 264: tempLastScreen = actualScreen;
 15640  006538  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 15641                           
 15642                           ; BSR set to: 0
 15643                           ;DisplayProtocol.h: 265: actualScreen = 3;
 15644  00653C  0E03               	movlw	3
 15645  00653E  0101               	movlb	1	; () banked
 15646  006540  6FC3               	movwf	_actualScreen& (0+255),b
 15647                           
 15648                           ;DisplayProtocol.h: 266: selSN = 0;
 15649  006542  0E00               	movlw	0
 15650  006544  0101               	movlb	1	; () banked
 15651  006546  6FCC               	movwf	_selSN& (0+255),b
 15652                           
 15653                           ; BSR set to: 1
 15654                           ;DisplayProtocol.h: 267: }
 15655                           ;DisplayProtocol.h: 268: }else if(actualScreen == 5)
 15656  006548  0012               	return	
 15657  00654A                     l10753:
 15658                           
 15659                           ; BSR set to: 1
 15660  00654A  0E05               	movlw	5
 15661  00654C  0101               	movlb	1	; () banked
 15662  00654E  19C3               	xorwf	_actualScreen& (0+255),w,b
 15663  006550  A4D8               	btfss	status,2,c
 15664  006552  D004               	goto	l10757
 15665                           
 15666                           ; BSR set to: 1
 15667                           ;DisplayProtocol.h: 269: actualScreen = 4;
 15668  006554  0E04               	movlw	4
 15669  006556  0101               	movlb	1	; () banked
 15670  006558  6FC3               	movwf	_actualScreen& (0+255),b
 15671  00655A  0012               	return	
 15672  00655C                     l10757:
 15673                           
 15674                           ; BSR set to: 1
 15675                           ;DisplayProtocol.h: 270: else if(actualScreen == 12)
 15676  00655C  0E0C               	movlw	12
 15677  00655E  0101               	movlb	1	; () banked
 15678  006560  19C3               	xorwf	_actualScreen& (0+255),w,b
 15679  006562  A4D8               	btfss	status,2,c
 15680  006564  0012               	return	
 15681                           
 15682                           ; BSR set to: 1
 15683                           ;DisplayProtocol.h: 271: actualScreen = 4;
 15684  006566  0E04               	movlw	4
 15685  006568  0101               	movlb	1	; () banked
 15686  00656A  6FC3               	movwf	_actualScreen& (0+255),b
 15687                           
 15688                           ; BSR set to: 1
 15689                           
 15690                           ; BSR set to: 1
 15691                           
 15692                           ; BSR set to: 1
 15693  00656C  0012               	return	
 15694  00656E                     __end_of_longPressRETRO:
 15695                           	opt stack 0
 15696                           tblptru	equ	0xFF8
 15697                           tblptrh	equ	0xFF7
 15698                           tblptrl	equ	0xFF6
 15699                           tablat	equ	0xFF5
 15700                           prodh	equ	0xFF4
 15701                           prodl	equ	0xFF3
 15702                           intcon	equ	0xFF2
 15703                           postinc0	equ	0xFEE
 15704                           wreg	equ	0xFE8
 15705                           postdec1	equ	0xFE5
 15706                           fsr1l	equ	0xFE1
 15707                           indf2	equ	0xFDF
 15708                           postinc2	equ	0xFDE
 15709                           postdec2	equ	0xFDD
 15710                           plusw2	equ	0xFDB
 15711                           fsr2h	equ	0xFDA
 15712                           fsr2l	equ	0xFD9
 15713                           status	equ	0xFD8
 15714                           
 15715 ;; *************** function _longPressENTER *****************
 15716 ;; Defined at:
 15717 ;;		line 373 in file "source/DisplayProtocol.h"
 15718 ;; Parameters:    Size  Location     Type
 15719 ;;		None
 15720 ;; Auto vars:     Size  Location     Type
 15721 ;;  temp            3   57[BANK1 ] float 
 15722 ;; Return value:  Size  Location     Type
 15723 ;;                  1    wreg      void 
 15724 ;; Registers used:
 15725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15726 ;; Tracked objects:
 15727 ;;		On entry : 0/0
 15728 ;;		On exit  : 0/0
 15729 ;;		Unchanged: 0/0
 15730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15731 ;;      Params:         0       0       0       0       0       0       0
 15732 ;;      Locals:         0       0       6       0       0       0       0
 15733 ;;      Temps:          0       0       0       0       0       0       0
 15734 ;;      Totals:         0       0       6       0       0       0       0
 15735 ;;Total ram usage:        6 bytes
 15736 ;; Hardware stack levels used:    1
 15737 ;; Hardware stack levels required when called:   17
 15738 ;; This function calls:
 15739 ;;		___ftadd
 15740 ;;		___ftdiv
 15741 ;;		_calcVars2ti
 15742 ;;		_confirmEdition
 15743 ;;		_initCalib
 15744 ;;		_integrator
 15745 ;; This function is called by:
 15746 ;;		_buttonChecking
 15747 ;; This function uses a non-reentrant model
 15748 ;;
 15749                           
 15750                           	psect	text63
 15751  0019D8                     __ptext63:
 15752                           	opt stack 0
 15753  0019D8                     _longPressENTER:
 15754                           	opt stack 12
 15755                           
 15756                           ;DisplayProtocol.h: 374: if (!ENTERisLP) {
 15757                           
 15758                           ;incstack = 0
 15759  0019D8  0101               	movlb	1	; () banked
 15760  0019DA  51BF               	movf	_ENTERisLP& (0+255),w,b
 15761  0019DC  A4D8               	btfss	status,2,c
 15762  0019DE  0012               	return	
 15763                           
 15764                           ; BSR set to: 1
 15765                           ;DisplayProtocol.h: 375: ENTERisLP = 1;
 15766  0019E0  0E01               	movlw	1
 15767  0019E2  0101               	movlb	1	; () banked
 15768  0019E4  6FBF               	movwf	_ENTERisLP& (0+255),b
 15769                           
 15770                           ;DisplayProtocol.h: 376: if(actualScreen == 0 || actualScreen == 4) {
 15771  0019E6  0101               	movlb	1	; () banked
 15772  0019E8  51C3               	movf	_actualScreen& (0+255),w,b
 15773  0019EA  B4D8               	btfsc	status,2,c
 15774  0019EC  D005               	goto	l10897
 15775                           
 15776                           ; BSR set to: 1
 15777  0019EE  0E04               	movlw	4
 15778  0019F0  0101               	movlb	1	; () banked
 15779  0019F2  19C3               	xorwf	_actualScreen& (0+255),w,b
 15780  0019F4  A4D8               	btfss	status,2,c
 15781  0019F6  D025               	goto	l10913
 15782  0019F8                     l10897:
 15783                           
 15784                           ; BSR set to: 1
 15785                           ;DisplayProtocol.h: 377: if (holdUPcont > 5) {
 15786  0019F8  0E05               	movlw	5
 15787  0019FA  0101               	movlb	1	; () banked
 15788  0019FC  65C9               	cpfsgt	_holdUPcont& (0+255),b
 15789  0019FE  D014               	goto	l10907
 15790                           
 15791                           ; BSR set to: 1
 15792                           ;DisplayProtocol.h: 378: if (actualScreen == 0) {
 15793  001A00  0101               	movlb	1	; () banked
 15794  001A02  51C3               	movf	_actualScreen& (0+255),w,b
 15795  001A04  A4D8               	btfss	status,2,c
 15796  001A06  D007               	goto	l10903
 15797                           
 15798                           ; BSR set to: 1
 15799                           ;DisplayProtocol.h: 379: actualScreen = 1;
 15800  001A08  0E01               	movlw	1
 15801  001A0A  0101               	movlb	1	; () banked
 15802  001A0C  6FC3               	movwf	_actualScreen& (0+255),b
 15803                           
 15804                           ;DisplayProtocol.h: 380: fd = 0;
 15805  001A0E  0E00               	movlw	0
 15806  001A10  0101               	movlb	1	; () banked
 15807  001A12  6FC5               	movwf	_fd& (0+255),b
 15808                           
 15809                           ;DisplayProtocol.h: 381: } else if (actualScreen == 4)
 15810  001A14  0012               	return	
 15811  001A16                     l10903:
 15812                           
 15813                           ; BSR set to: 1
 15814  001A16  0E04               	movlw	4
 15815  001A18  0101               	movlb	1	; () banked
 15816  001A1A  19C3               	xorwf	_actualScreen& (0+255),w,b
 15817  001A1C  A4D8               	btfss	status,2,c
 15818  001A1E  0012               	return	
 15819                           
 15820                           ; BSR set to: 1
 15821                           ;DisplayProtocol.h: 382: actualScreen = 9;
 15822  001A20  0E09               	movlw	9
 15823  001A22  0101               	movlb	1	; () banked
 15824  001A24  6FC3               	movwf	_actualScreen& (0+255),b
 15825                           
 15826                           ; BSR set to: 1
 15827                           ;DisplayProtocol.h: 383: } else if(!processStarted) {
 15828                           
 15829                           ; BSR set to: 1
 15830  001A26  0012               	return	
 15831  001A28                     l10907:
 15832                           
 15833                           ; BSR set to: 1
 15834  001A28  0100               	movlb	0	; () banked
 15835  001A2A  51BB               	movf	_processStarted& (0+255),w,b
 15836  001A2C  A4D8               	btfss	status,2,c
 15837  001A2E  0012               	return	
 15838                           
 15839                           ; BSR set to: 0
 15840                           ;DisplayProtocol.h: 384: tempLastScreen = actualScreen;
 15841  001A30  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 15842                           
 15843                           ; BSR set to: 0
 15844                           ;DisplayProtocol.h: 385: actualScreen = 2;
 15845  001A34  0E02               	movlw	2
 15846  001A36  0101               	movlb	1	; () banked
 15847  001A38  6FC3               	movwf	_actualScreen& (0+255),b
 15848                           
 15849                           ;DisplayProtocol.h: 386: selSN = 1;
 15850  001A3A  0E01               	movlw	1
 15851  001A3C  0101               	movlb	1	; () banked
 15852  001A3E  6FCC               	movwf	_selSN& (0+255),b
 15853                           
 15854                           ; BSR set to: 1
 15855                           ;DisplayProtocol.h: 387: }
 15856                           ;DisplayProtocol.h: 388: }else if(actualScreen == 5) {
 15857                           
 15858                           ; BSR set to: 1
 15859  001A40  0012               	return	
 15860  001A42                     l10913:
 15861                           
 15862                           ; BSR set to: 1
 15863  001A42  0E05               	movlw	5
 15864  001A44  0101               	movlb	1	; () banked
 15865  001A46  19C3               	xorwf	_actualScreen& (0+255),w,b
 15866  001A48  A4D8               	btfss	status,2,c
 15867  001A4A  D010               	goto	l10921
 15868                           
 15869                           ; BSR set to: 1
 15870                           ;DisplayProtocol.h: 389: if(menuSection != 2)
 15871  001A4C  0E02               	movlw	2
 15872  001A4E  0101               	movlb	1	; () banked
 15873  001A50  19CA               	xorwf	_menuSection& (0+255),w,b
 15874  001A52  A4D8               	btfss	status,2,c
 15875                           
 15876                           ; BSR set to: 1
 15877                           ;DisplayProtocol.h: 390: integrator();
 15878  001A54  ECBA  F01E         	call	_integrator	;wreg free
 15879                           
 15880                           ;DisplayProtocol.h: 391: confirmEdition(!processStarted);
 15881  001A58  0100               	movlb	0	; () banked
 15882  001A5A  51BB               	movf	_processStarted& (0+255),w,b
 15883  001A5C  A4D8               	btfss	status,2,c
 15884  001A5E  D002               	goto	u16480
 15885  001A60  0E01               	movlw	1
 15886  001A62  D001               	goto	u16490
 15887  001A64                     u16480:
 15888  001A64  0E00               	movlw	0
 15889  001A66                     u16490:
 15890  001A66  EC9B  F028         	call	_confirmEdition
 15891                           
 15892                           ;DisplayProtocol.h: 392: }else if(actualScreen == 12) {
 15893  001A6A  0012               	return	
 15894  001A6C                     l10921:
 15895  001A6C  0E0C               	movlw	12
 15896  001A6E  0101               	movlb	1	; () banked
 15897  001A70  19C3               	xorwf	_actualScreen& (0+255),w,b
 15898  001A72  A4D8               	btfss	status,2,c
 15899  001A74  0012               	return	
 15900                           
 15901                           ; BSR set to: 1
 15902                           ;DisplayProtocol.h: 393: integrator();
 15903  001A76  ECBA  F01E         	call	_integrator	;wreg free
 15904                           
 15905                           ;DisplayProtocol.h: 394: if(calibLevel == 0) {
 15906  001A7A  0101               	movlb	1	; () banked
 15907  001A7C  51C4               	movf	_calibLevel& (0+255),w,b
 15908  001A7E  A4D8               	btfss	status,2,c
 15909  001A80  D043               	goto	l10937
 15910                           
 15911                           ; BSR set to: 1
 15912                           ;DisplayProtocol.h: 395: tempVelocidadMasa1 = (float)chanValf / tiXcorte;
 15913  001A82  C1B7  F112         	movff	_chanValf,___ftdiv@f1
 15914  001A86  C1B8  F113         	movff	_chanValf+1,___ftdiv@f1+1
 15915  001A8A  C1B9  F114         	movff	_chanValf+2,___ftdiv@f1+2
 15916  001A8E  C195  F115         	movff	_tiXcorte,___ftdiv@f2
 15917  001A92  C196  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 15918  001A96  C197  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 15919  001A9A  EC2A  F01C         	call	___ftdiv	;wreg free
 15920  001A9E  C112  F1A3         	movff	?___ftdiv,_tempVelocidadMasa1
 15921  001AA2  C113  F1A4         	movff	?___ftdiv+1,_tempVelocidadMasa1+1
 15922  001AA6  C114  F1A5         	movff	?___ftdiv+2,_tempVelocidadMasa1+2
 15923                           
 15924                           ;DisplayProtocol.h: 396: tiXcorte = (float)0.5 / tempVelocidadMasa1;
 15925  001AAA  0E00               	movlw	0
 15926  001AAC  0101               	movlb	1	; () banked
 15927  001AAE  6F12               	movwf	___ftdiv@f1& (0+255),b
 15928  001AB0  0E00               	movlw	0
 15929  001AB2  0101               	movlb	1	; () banked
 15930  001AB4  6F13               	movwf	(___ftdiv@f1+1)& (0+255),b
 15931  001AB6  0E3F               	movlw	63
 15932  001AB8  0101               	movlb	1	; () banked
 15933  001ABA  6F14               	movwf	(___ftdiv@f1+2)& (0+255),b
 15934  001ABC  C1A3  F115         	movff	_tempVelocidadMasa1,___ftdiv@f2
 15935  001AC0  C1A4  F116         	movff	_tempVelocidadMasa1+1,___ftdiv@f2+1
 15936  001AC4  C1A5  F117         	movff	_tempVelocidadMasa1+2,___ftdiv@f2+2
 15937  001AC8  EC2A  F01C         	call	___ftdiv	;wreg free
 15938  001ACC  C112  F195         	movff	?___ftdiv,_tiXcorte
 15939  001AD0  C113  F196         	movff	?___ftdiv+1,_tiXcorte+1
 15940  001AD4  C114  F197         	movff	?___ftdiv+2,_tiXcorte+2
 15941                           
 15942                           ;DisplayProtocol.h: 397: calibLevel = 1;
 15943  001AD8  0E01               	movlw	1
 15944  001ADA  0101               	movlb	1	; () banked
 15945  001ADC  6FC4               	movwf	_calibLevel& (0+255),b
 15946                           
 15947                           ; BSR set to: 1
 15948                           ;DisplayProtocol.h: 398: numCortes = 1;
 15949  001ADE  0E00               	movlw	0
 15950  001AE0  0100               	movlb	0	; () banked
 15951  001AE2  6FC7               	movwf	(_numCortes+1)& (0+255),b
 15952  001AE4  0E01               	movlw	1
 15953  001AE6  6FC6               	movwf	_numCortes& (0+255),b
 15954                           
 15955                           ; BSR set to: 0
 15956                           ;DisplayProtocol.h: 399: processState = 0;
 15957  001AE8  0E00               	movlw	0
 15958  001AEA  0100               	movlb	0	; () banked
 15959  001AEC  6FB5               	movwf	(_processState+1)& (0+255),b
 15960  001AEE  0E00               	movlw	0
 15961  001AF0  6FB4               	movwf	_processState& (0+255),b
 15962                           
 15963                           ; BSR set to: 0
 15964                           ;DisplayProtocol.h: 400: processTimer = 0;
 15965  001AF2  0E00               	movlw	0
 15966  001AF4  6E37               	movwf	_processTimer,c
 15967  001AF6  0E00               	movlw	0
 15968  001AF8  6E38               	movwf	_processTimer+1,c
 15969  001AFA  0E00               	movlw	0
 15970  001AFC  6E39               	movwf	_processTimer+2,c
 15971  001AFE  0E00               	movlw	0
 15972  001B00  6E3A               	movwf	_processTimer+3,c
 15973                           
 15974                           ;DisplayProtocol.h: 401: initCalib();
 15975  001B02  EC97  F034         	call	_initCalib	;wreg free
 15976                           
 15977                           ;DisplayProtocol.h: 402: }else if(calibLevel == 1) {
 15978  001B06  0012               	return	
 15979  001B08                     l10937:
 15980  001B08  0101               	movlb	1	; () banked
 15981  001B0A  05C4               	decf	_calibLevel& (0+255),w,b
 15982  001B0C  A4D8               	btfss	status,2,c
 15983  001B0E  D043               	goto	l10949
 15984                           
 15985                           ; BSR set to: 1
 15986                           ;DisplayProtocol.h: 403: tempVelocidadMasa2 = (float)chanValf / tiXcorte;
 15987  001B10  C1B7  F112         	movff	_chanValf,___ftdiv@f1
 15988  001B14  C1B8  F113         	movff	_chanValf+1,___ftdiv@f1+1
 15989  001B18  C1B9  F114         	movff	_chanValf+2,___ftdiv@f1+2
 15990  001B1C  C195  F115         	movff	_tiXcorte,___ftdiv@f2
 15991  001B20  C196  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 15992  001B24  C197  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 15993  001B28  EC2A  F01C         	call	___ftdiv	;wreg free
 15994  001B2C  C112  F1A6         	movff	?___ftdiv,_tempVelocidadMasa2
 15995  001B30  C113  F1A7         	movff	?___ftdiv+1,_tempVelocidadMasa2+1
 15996  001B34  C114  F1A8         	movff	?___ftdiv+2,_tempVelocidadMasa2+2
 15997                           
 15998                           ;DisplayProtocol.h: 404: tiXcorte = (float)0.25 / tempVelocidadMasa2;
 15999  001B38  0E00               	movlw	0
 16000  001B3A  0101               	movlb	1	; () banked
 16001  001B3C  6F12               	movwf	___ftdiv@f1& (0+255),b
 16002  001B3E  0E80               	movlw	128
 16003  001B40  0101               	movlb	1	; () banked
 16004  001B42  6F13               	movwf	(___ftdiv@f1+1)& (0+255),b
 16005  001B44  0E3E               	movlw	62
 16006  001B46  0101               	movlb	1	; () banked
 16007  001B48  6F14               	movwf	(___ftdiv@f1+2)& (0+255),b
 16008  001B4A  C1A6  F115         	movff	_tempVelocidadMasa2,___ftdiv@f2
 16009  001B4E  C1A7  F116         	movff	_tempVelocidadMasa2+1,___ftdiv@f2+1
 16010  001B52  C1A8  F117         	movff	_tempVelocidadMasa2+2,___ftdiv@f2+2
 16011  001B56  EC2A  F01C         	call	___ftdiv	;wreg free
 16012  001B5A  C112  F195         	movff	?___ftdiv,_tiXcorte
 16013  001B5E  C113  F196         	movff	?___ftdiv+1,_tiXcorte+1
 16014  001B62  C114  F197         	movff	?___ftdiv+2,_tiXcorte+2
 16015                           
 16016                           ;DisplayProtocol.h: 405: calibLevel = 2;
 16017  001B66  0E02               	movlw	2
 16018  001B68  0101               	movlb	1	; () banked
 16019  001B6A  6FC4               	movwf	_calibLevel& (0+255),b
 16020                           
 16021                           ; BSR set to: 1
 16022                           ;DisplayProtocol.h: 406: numCortes = 1;
 16023  001B6C  0E00               	movlw	0
 16024  001B6E  0100               	movlb	0	; () banked
 16025  001B70  6FC7               	movwf	(_numCortes+1)& (0+255),b
 16026  001B72  0E01               	movlw	1
 16027  001B74  6FC6               	movwf	_numCortes& (0+255),b
 16028                           
 16029                           ; BSR set to: 0
 16030                           ;DisplayProtocol.h: 407: processState = 0;
 16031  001B76  0E00               	movlw	0
 16032  001B78  0100               	movlb	0	; () banked
 16033  001B7A  6FB5               	movwf	(_processState+1)& (0+255),b
 16034  001B7C  0E00               	movlw	0
 16035  001B7E  6FB4               	movwf	_processState& (0+255),b
 16036                           
 16037                           ; BSR set to: 0
 16038                           ;DisplayProtocol.h: 408: processTimer = 0;
 16039  001B80  0E00               	movlw	0
 16040  001B82  6E37               	movwf	_processTimer,c
 16041  001B84  0E00               	movlw	0
 16042  001B86  6E38               	movwf	_processTimer+1,c
 16043  001B88  0E00               	movlw	0
 16044  001B8A  6E39               	movwf	_processTimer+2,c
 16045  001B8C  0E00               	movlw	0
 16046  001B8E  6E3A               	movwf	_processTimer+3,c
 16047                           
 16048                           ;DisplayProtocol.h: 409: initCalib();
 16049  001B90  EC97  F034         	call	_initCalib	;wreg free
 16050                           
 16051                           ;DisplayProtocol.h: 410: }else if(calibLevel == 2) {
 16052  001B94  0012               	return	
 16053  001B96                     l10949:
 16054  001B96  0E02               	movlw	2
 16055  001B98  0101               	movlb	1	; () banked
 16056  001B9A  19C4               	xorwf	_calibLevel& (0+255),w,b
 16057  001B9C  A4D8               	btfss	status,2,c
 16058  001B9E  0012               	return	
 16059                           
 16060                           ; BSR set to: 1
 16061                           ;DisplayProtocol.h: 411: tempVelocidadMasa3 = (float)chanValf / tiXcorte;
 16062  001BA0  C1B7  F112         	movff	_chanValf,___ftdiv@f1
 16063  001BA4  C1B8  F113         	movff	_chanValf+1,___ftdiv@f1+1
 16064  001BA8  C1B9  F114         	movff	_chanValf+2,___ftdiv@f1+2
 16065  001BAC  C195  F115         	movff	_tiXcorte,___ftdiv@f2
 16066  001BB0  C196  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 16067  001BB4  C197  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 16068  001BB8  EC2A  F01C         	call	___ftdiv	;wreg free
 16069  001BBC  C112  F192         	movff	?___ftdiv,_tempVelocidadMasa3
 16070  001BC0  C113  F193         	movff	?___ftdiv+1,_tempVelocidadMasa3+1
 16071  001BC4  C114  F194         	movff	?___ftdiv+2,_tempVelocidadMasa3+2
 16072                           
 16073                           ;DisplayProtocol.h: 412: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 16074  001BC8  C1A6  F130         	movff	_tempVelocidadMasa2,___ftadd@f2
 16075  001BCC  C1A7  F131         	movff	_tempVelocidadMasa2+1,___ftadd@f2+1
 16076  001BD0  C1A8  F132         	movff	_tempVelocidadMasa2+2,___ftadd@f2+2
 16077  001BD4  C1A3  F12D         	movff	_tempVelocidadMasa1,___ftadd@f1
 16078  001BD8  C1A4  F12E         	movff	_tempVelocidadMasa1+1,___ftadd@f1+1
 16079  001BDC  C1A5  F12F         	movff	_tempVelocidadMasa1+2,___ftadd@f1+2
 16080  001BE0  EC00  F012         	call	___ftadd	;wreg free
 16081  001BE4  C12D  F13C         	movff	?___ftadd,_longPressENTER$3163
 16082  001BE8  C12E  F13D         	movff	?___ftadd+1,_longPressENTER$3163+1
 16083  001BEC  C12F  F13E         	movff	?___ftadd+2,_longPressENTER$3163+2
 16084                           
 16085                           ;DisplayProtocol.h: 412: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 16086  001BF0  C13C  F12D         	movff	_longPressENTER$3163,___ftadd@f1
 16087  001BF4  C13D  F12E         	movff	_longPressENTER$3163+1,___ftadd@f1+1
 16088  001BF8  C13E  F12F         	movff	_longPressENTER$3163+2,___ftadd@f1+2
 16089  001BFC  C192  F130         	movff	_tempVelocidadMasa3,___ftadd@f2
 16090  001C00  C193  F131         	movff	_tempVelocidadMasa3+1,___ftadd@f2+1
 16091  001C04  C194  F132         	movff	_tempVelocidadMasa3+2,___ftadd@f2+2
 16092  001C08  EC00  F012         	call	___ftadd	;wreg free
 16093  001C0C  C12D  F139         	movff	?___ftadd,longPressENTER@temp
 16094  001C10  C12E  F13A         	movff	?___ftadd+1,longPressENTER@temp+1
 16095  001C14  C12F  F13B         	movff	?___ftadd+2,longPressENTER@temp+2
 16096                           
 16097                           ;DisplayProtocol.h: 413: chanValf = (float)temp / 3.0f;
 16098  001C18  C139  F112         	movff	longPressENTER@temp,___ftdiv@f1
 16099  001C1C  C13A  F113         	movff	longPressENTER@temp+1,___ftdiv@f1+1
 16100  001C20  C13B  F114         	movff	longPressENTER@temp+2,___ftdiv@f1+2
 16101  001C24  0E00               	movlw	0
 16102  001C26  0101               	movlb	1	; () banked
 16103  001C28  6F15               	movwf	___ftdiv@f2& (0+255),b
 16104  001C2A  0E40               	movlw	64
 16105  001C2C  0101               	movlb	1	; () banked
 16106  001C2E  6F16               	movwf	(___ftdiv@f2+1)& (0+255),b
 16107  001C30  0E40               	movlw	64
 16108  001C32  0101               	movlb	1	; () banked
 16109  001C34  6F17               	movwf	(___ftdiv@f2+2)& (0+255),b
 16110  001C36  EC2A  F01C         	call	___ftdiv	;wreg free
 16111  001C3A  C112  F1B7         	movff	?___ftdiv,_chanValf
 16112  001C3E  C113  F1B8         	movff	?___ftdiv+1,_chanValf+1
 16113  001C42  C114  F1B9         	movff	?___ftdiv+2,_chanValf+2
 16114                           
 16115                           ;DisplayProtocol.h: 414: numCortes = tempNumCortes;
 16116  001C46  C19B  F0C6         	movff	_tempNumCortes,_numCortes
 16117  001C4A  C19C  F0C7         	movff	_tempNumCortes+1,_numCortes+1
 16118                           
 16119                           ;DisplayProtocol.h: 415: calcVars2ti();
 16120  001C4E  ECE4  F032         	call	_calcVars2ti	;wreg free
 16121                           
 16122                           ;DisplayProtocol.h: 416: confirmEdition(!processStarted);
 16123  001C52  0100               	movlb	0	; () banked
 16124  001C54  51BB               	movf	_processStarted& (0+255),w,b
 16125  001C56  A4D8               	btfss	status,2,c
 16126  001C58  D002               	goto	u16540
 16127  001C5A  0E01               	movlw	1
 16128  001C5C  D001               	goto	u16550
 16129  001C5E                     u16540:
 16130  001C5E  0E00               	movlw	0
 16131  001C60                     u16550:
 16132  001C60  EC9B  F028         	call	_confirmEdition
 16133  001C64  0012               	return	
 16134  001C66                     __end_of_longPressENTER:
 16135                           	opt stack 0
 16136                           tblptru	equ	0xFF8
 16137                           tblptrh	equ	0xFF7
 16138                           tblptrl	equ	0xFF6
 16139                           tablat	equ	0xFF5
 16140                           prodh	equ	0xFF4
 16141                           prodl	equ	0xFF3
 16142                           intcon	equ	0xFF2
 16143                           postinc0	equ	0xFEE
 16144                           wreg	equ	0xFE8
 16145                           postdec1	equ	0xFE5
 16146                           fsr1l	equ	0xFE1
 16147                           indf2	equ	0xFDF
 16148                           postinc2	equ	0xFDE
 16149                           postdec2	equ	0xFDD
 16150                           plusw2	equ	0xFDB
 16151                           fsr2h	equ	0xFDA
 16152                           fsr2l	equ	0xFD9
 16153                           status	equ	0xFD8
 16154                           
 16155 ;; *************** function _integrator *****************
 16156 ;; Defined at:
 16157 ;;		line 61 in file "source/DisplayProtocol.h"
 16158 ;; Parameters:    Size  Location     Type
 16159 ;;		None
 16160 ;; Auto vars:     Size  Location     Type
 16161 ;;  temp            4   39[BANK1 ] long 
 16162 ;;  acum            4   35[BANK1 ] long 
 16163 ;;  i               2   43[BANK1 ] int 
 16164 ;; Return value:  Size  Location     Type
 16165 ;;                  1    wreg      void 
 16166 ;; Registers used:
 16167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16168 ;; Tracked objects:
 16169 ;;		On entry : 0/0
 16170 ;;		On exit  : 0/0
 16171 ;;		Unchanged: 0/0
 16172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16173 ;;      Params:         0       0       0       0       0       0       0
 16174 ;;      Locals:         0       0      10       0       0       0       0
 16175 ;;      Temps:          0       0       2       0       0       0       0
 16176 ;;      Totals:         0       0      12       0       0       0       0
 16177 ;;Total ram usage:       12 bytes
 16178 ;; Hardware stack levels used:    1
 16179 ;; Hardware stack levels required when called:   14
 16180 ;; This function calls:
 16181 ;;		___altoft
 16182 ;;		___ftdiv
 16183 ;;		___lmul
 16184 ;; This function is called by:
 16185 ;;		_longPressENTER
 16186 ;; This function uses a non-reentrant model
 16187 ;;
 16188                           
 16189                           	psect	text64
 16190  003D74                     __ptext64:
 16191                           	opt stack 0
 16192  003D74                     _integrator:
 16193                           	opt stack 14
 16194                           
 16195                           ;DisplayProtocol.h: 62: long acum = 0;
 16196                           
 16197                           ;incstack = 0
 16198  003D74  0E00               	movlw	0
 16199  003D76  0101               	movlb	1	; () banked
 16200  003D78  6F23               	movwf	integrator@acum& (0+255),b
 16201  003D7A  0E00               	movlw	0
 16202  003D7C  6F24               	movwf	(integrator@acum+1)& (0+255),b
 16203  003D7E  0E00               	movlw	0
 16204  003D80  6F25               	movwf	(integrator@acum+2)& (0+255),b
 16205  003D82  0E00               	movlw	0
 16206  003D84  6F26               	movwf	(integrator@acum+3)& (0+255),b
 16207                           
 16208                           ;DisplayProtocol.h: 63: long temp = 0;
 16209  003D86  0E00               	movlw	0
 16210  003D88  0101               	movlb	1	; () banked
 16211  003D8A  6F27               	movwf	integrator@temp& (0+255),b
 16212  003D8C  0E00               	movlw	0
 16213  003D8E  6F28               	movwf	(integrator@temp+1)& (0+255),b
 16214  003D90  0E00               	movlw	0
 16215  003D92  6F29               	movwf	(integrator@temp+2)& (0+255),b
 16216  003D94  0E00               	movlw	0
 16217  003D96  6F2A               	movwf	(integrator@temp+3)& (0+255),b
 16218                           
 16219                           ;DisplayProtocol.h: 64: int i;
 16220                           ;DisplayProtocol.h: 65: for(i = 0; i < 6; i++) {
 16221  003D98  0E00               	movlw	0
 16222  003D9A  0101               	movlb	1	; () banked
 16223  003D9C  6F2C               	movwf	(integrator@i+1)& (0+255),b
 16224  003D9E  0E00               	movlw	0
 16225  003DA0  6F2B               	movwf	integrator@i& (0+255),b
 16226  003DA2                     l10293:
 16227                           
 16228                           ; BSR set to: 1
 16229  003DA2  0101               	movlb	1	; () banked
 16230  003DA4  BF2C               	btfsc	(integrator@i+1)& (0+255),7,b
 16231  003DA6  D008               	goto	l10297
 16232  003DA8  0101               	movlb	1	; () banked
 16233  003DAA  512C               	movf	(integrator@i+1)& (0+255),w,b
 16234  003DAC  E152               	bnz	l10305
 16235  003DAE  0E06               	movlw	6
 16236  003DB0  0101               	movlb	1	; () banked
 16237  003DB2  5D2B               	subwf	integrator@i& (0+255),w,b
 16238  003DB4  B0D8               	btfsc	status,0,c
 16239  003DB6  D04D               	goto	l10305
 16240  003DB8                     l10297:
 16241                           
 16242                           ; BSR set to: 1
 16243                           ;DisplayProtocol.h: 66: temp = (long)chanValdig[i]*exp10[i];
 16244  003DB8  0EA9               	movlw	low _chanValdig
 16245  003DBA  0101               	movlb	1	; () banked
 16246  003DBC  252B               	addwf	integrator@i& (0+255),w,b
 16247  003DBE  6ED9               	movwf	fsr2l,c
 16248  003DC0  0E01               	movlw	high _chanValdig
 16249  003DC2  0101               	movlb	1	; () banked
 16250  003DC4  212C               	addwfc	(integrator@i+1)& (0+255),w,b
 16251  003DC6  6EDA               	movwf	fsr2h,c
 16252  003DC8  50DF               	movf	indf2,w,c
 16253  003DCA  0101               	movlb	1	; () banked
 16254  003DCC  6F00               	movwf	___lmul@multiplier& (0+255),b
 16255  003DCE  0E00               	movlw	0
 16256  003DD0  BF00               	btfsc	___lmul@multiplier& (0+255),7,b
 16257  003DD2  0EFF               	movlw	-1
 16258  003DD4  6F01               	movwf	(___lmul@multiplier+1)& (0+255),b
 16259  003DD6  6F02               	movwf	(___lmul@multiplier+2)& (0+255),b
 16260  003DD8  6F03               	movwf	(___lmul@multiplier+3)& (0+255),b
 16261  003DDA  0E77               	movlw	low _exp10
 16262  003DDC  0101               	movlb	1	; () banked
 16263  003DDE  6F21               	movwf	??_integrator& (0+255),b
 16264  003DE0  0E01               	movlw	high _exp10
 16265  003DE2  0101               	movlb	1	; () banked
 16266  003DE4  6F22               	movwf	(??_integrator+1)& (0+255),b
 16267  003DE6  90D8               	bcf	status,0,c
 16268  003DE8  0101               	movlb	1	; () banked
 16269  003DEA  352B               	rlcf	integrator@i& (0+255),w,b
 16270  003DEC  6ED9               	movwf	fsr2l,c
 16271  003DEE  0101               	movlb	1	; () banked
 16272  003DF0  352C               	rlcf	(integrator@i+1)& (0+255),w,b
 16273  003DF2  6EDA               	movwf	fsr2h,c
 16274  003DF4  90D8               	bcf	status,0,c
 16275  003DF6  36D9               	rlcf	fsr2l,f,c
 16276  003DF8  36DA               	rlcf	fsr2h,f,c
 16277  003DFA  0101               	movlb	1	; () banked
 16278  003DFC  5121               	movf	??_integrator& (0+255),w,b
 16279  003DFE  26D9               	addwf	fsr2l,f,c
 16280  003E00  0101               	movlb	1	; () banked
 16281  003E02  5122               	movf	(??_integrator+1)& (0+255),w,b
 16282  003E04  22DA               	addwfc	fsr2h,f,c
 16283  003E06  CFDE F104          	movff	postinc2,___lmul@multiplicand
 16284  003E0A  CFDE F105          	movff	postinc2,___lmul@multiplicand+1
 16285  003E0E  CFDE F106          	movff	postinc2,___lmul@multiplicand+2
 16286  003E12  CFDE F107          	movff	postinc2,___lmul@multiplicand+3
 16287  003E16  ECCB  F030         	call	___lmul	;wreg free
 16288  003E1A  C100  F127         	movff	?___lmul,integrator@temp
 16289  003E1E  C101  F128         	movff	?___lmul+1,integrator@temp+1
 16290  003E22  C102  F129         	movff	?___lmul+2,integrator@temp+2
 16291  003E26  C103  F12A         	movff	?___lmul+3,integrator@temp+3
 16292                           
 16293                           ;DisplayProtocol.h: 67: acum += temp;
 16294  003E2A  0101               	movlb	1	; () banked
 16295  003E2C  5127               	movf	integrator@temp& (0+255),w,b
 16296  003E2E  0101               	movlb	1	; () banked
 16297  003E30  2723               	addwf	integrator@acum& (0+255),f,b
 16298  003E32  0101               	movlb	1	; () banked
 16299  003E34  5128               	movf	(integrator@temp+1)& (0+255),w,b
 16300  003E36  0101               	movlb	1	; () banked
 16301  003E38  2324               	addwfc	(integrator@acum+1)& (0+255),f,b
 16302  003E3A  0101               	movlb	1	; () banked
 16303  003E3C  5129               	movf	(integrator@temp+2)& (0+255),w,b
 16304  003E3E  0101               	movlb	1	; () banked
 16305  003E40  2325               	addwfc	(integrator@acum+2)& (0+255),f,b
 16306  003E42  0101               	movlb	1	; () banked
 16307  003E44  512A               	movf	(integrator@temp+3)& (0+255),w,b
 16308  003E46  0101               	movlb	1	; () banked
 16309  003E48  2326               	addwfc	(integrator@acum+3)& (0+255),f,b
 16310                           
 16311                           ; BSR set to: 1
 16312  003E4A  0101               	movlb	1	; () banked
 16313  003E4C  4B2B               	infsnz	integrator@i& (0+255),f,b
 16314  003E4E  2B2C               	incf	(integrator@i+1)& (0+255),f,b
 16315  003E50  D7A8               	goto	l10293
 16316  003E52                     l10305:
 16317                           
 16318                           ; BSR set to: 1
 16319                           ;DisplayProtocol.h: 68: }
 16320                           ;DisplayProtocol.h: 69: chanValf = (float)acum / 1000;
 16321  003E52  C123  F108         	movff	integrator@acum,___altoft@c
 16322  003E56  C124  F109         	movff	integrator@acum+1,___altoft@c+1
 16323  003E5A  C125  F10A         	movff	integrator@acum+2,___altoft@c+2
 16324  003E5E  C126  F10B         	movff	integrator@acum+3,___altoft@c+3
 16325  003E62  EC4D  F02B         	call	___altoft	;wreg free
 16326  003E66  C108  F112         	movff	?___altoft,___ftdiv@f1
 16327  003E6A  C109  F113         	movff	?___altoft+1,___ftdiv@f1+1
 16328  003E6E  C10A  F114         	movff	?___altoft+2,___ftdiv@f1+2
 16329  003E72  0E00               	movlw	0
 16330  003E74  0101               	movlb	1	; () banked
 16331  003E76  6F15               	movwf	___ftdiv@f2& (0+255),b
 16332  003E78  0E7A               	movlw	122
 16333  003E7A  0101               	movlb	1	; () banked
 16334  003E7C  6F16               	movwf	(___ftdiv@f2+1)& (0+255),b
 16335  003E7E  0E44               	movlw	68
 16336  003E80  0101               	movlb	1	; () banked
 16337  003E82  6F17               	movwf	(___ftdiv@f2+2)& (0+255),b
 16338  003E84  EC2A  F01C         	call	___ftdiv	;wreg free
 16339  003E88  C112  F1B7         	movff	?___ftdiv,_chanValf
 16340  003E8C  C113  F1B8         	movff	?___ftdiv+1,_chanValf+1
 16341  003E90  C114  F1B9         	movff	?___ftdiv+2,_chanValf+2
 16342  003E94  0012               	return		;funcret
 16343  003E96                     __end_of_integrator:
 16344                           	opt stack 0
 16345                           tblptru	equ	0xFF8
 16346                           tblptrh	equ	0xFF7
 16347                           tblptrl	equ	0xFF6
 16348                           tablat	equ	0xFF5
 16349                           prodh	equ	0xFF4
 16350                           prodl	equ	0xFF3
 16351                           intcon	equ	0xFF2
 16352                           postinc0	equ	0xFEE
 16353                           wreg	equ	0xFE8
 16354                           postdec1	equ	0xFE5
 16355                           fsr1l	equ	0xFE1
 16356                           indf2	equ	0xFDF
 16357                           postinc2	equ	0xFDE
 16358                           postdec2	equ	0xFDD
 16359                           plusw2	equ	0xFDB
 16360                           fsr2h	equ	0xFDA
 16361                           fsr2l	equ	0xFD9
 16362                           status	equ	0xFD8
 16363                           
 16364 ;; *************** function ___lmul *****************
 16365 ;; Defined at:
 16366 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
 16367 ;; Parameters:    Size  Location     Type
 16368 ;;  multiplier      4    0[BANK1 ] unsigned long 
 16369 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 16370 ;; Auto vars:     Size  Location     Type
 16371 ;;  product         4    8[BANK1 ] unsigned long 
 16372 ;; Return value:  Size  Location     Type
 16373 ;;                  4    0[BANK1 ] unsigned long 
 16374 ;; Registers used:
 16375 ;;		wreg, status,2, status,0
 16376 ;; Tracked objects:
 16377 ;;		On entry : 0/0
 16378 ;;		On exit  : 0/0
 16379 ;;		Unchanged: 0/0
 16380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16381 ;;      Params:         0       0       8       0       0       0       0
 16382 ;;      Locals:         0       0       4       0       0       0       0
 16383 ;;      Temps:          0       0       0       0       0       0       0
 16384 ;;      Totals:         0       0      12       0       0       0       0
 16385 ;;Total ram usage:       12 bytes
 16386 ;; Hardware stack levels used:    1
 16387 ;; Hardware stack levels required when called:   12
 16388 ;; This function calls:
 16389 ;;		Nothing
 16390 ;; This function is called by:
 16391 ;;		_desintegrator
 16392 ;;		_integrator
 16393 ;; This function uses a non-reentrant model
 16394 ;;
 16395                           
 16396                           	psect	text65
 16397  006196                     __ptext65:
 16398                           	opt stack 0
 16399  006196                     ___lmul:
 16400                           	opt stack 15
 16401                           
 16402                           ;incstack = 0
 16403  006196  0E00               	movlw	0
 16404  006198  0101               	movlb	1	; () banked
 16405  00619A  6F08               	movwf	___lmul@product& (0+255),b
 16406  00619C  0E00               	movlw	0
 16407  00619E  6F09               	movwf	(___lmul@product+1)& (0+255),b
 16408  0061A0  0E00               	movlw	0
 16409  0061A2  6F0A               	movwf	(___lmul@product+2)& (0+255),b
 16410  0061A4  0E00               	movlw	0
 16411  0061A6  6F0B               	movwf	(___lmul@product+3)& (0+255),b
 16412  0061A8                     l10133:
 16413                           
 16414                           ; BSR set to: 1
 16415  0061A8  0101               	movlb	1	; () banked
 16416  0061AA  A100               	btfss	___lmul@multiplier& (0+255),0,b
 16417  0061AC  D010               	goto	l10137
 16418                           
 16419                           ; BSR set to: 1
 16420  0061AE  0101               	movlb	1	; () banked
 16421  0061B0  5104               	movf	___lmul@multiplicand& (0+255),w,b
 16422  0061B2  0101               	movlb	1	; () banked
 16423  0061B4  2708               	addwf	___lmul@product& (0+255),f,b
 16424  0061B6  0101               	movlb	1	; () banked
 16425  0061B8  5105               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 16426  0061BA  0101               	movlb	1	; () banked
 16427  0061BC  2309               	addwfc	(___lmul@product+1)& (0+255),f,b
 16428  0061BE  0101               	movlb	1	; () banked
 16429  0061C0  5106               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 16430  0061C2  0101               	movlb	1	; () banked
 16431  0061C4  230A               	addwfc	(___lmul@product+2)& (0+255),f,b
 16432  0061C6  0101               	movlb	1	; () banked
 16433  0061C8  5107               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 16434  0061CA  0101               	movlb	1	; () banked
 16435  0061CC  230B               	addwfc	(___lmul@product+3)& (0+255),f,b
 16436  0061CE                     l10137:
 16437                           
 16438                           ; BSR set to: 1
 16439  0061CE  0101               	movlb	1	; () banked
 16440  0061D0  90D8               	bcf	status,0,c
 16441  0061D2  3704               	rlcf	___lmul@multiplicand& (0+255),f,b
 16442  0061D4  3705               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 16443  0061D6  3706               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 16444  0061D8  3707               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 16445                           
 16446                           ; BSR set to: 1
 16447  0061DA  0101               	movlb	1	; () banked
 16448  0061DC  90D8               	bcf	status,0,c
 16449  0061DE  3303               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 16450  0061E0  3302               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 16451  0061E2  3301               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 16452  0061E4  3300               	rrcf	___lmul@multiplier& (0+255),f,b
 16453  0061E6  0101               	movlb	1	; () banked
 16454  0061E8  5100               	movf	___lmul@multiplier& (0+255),w,b
 16455  0061EA  0101               	movlb	1	; () banked
 16456  0061EC  1101               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 16457  0061EE  0101               	movlb	1	; () banked
 16458  0061F0  1102               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 16459  0061F2  0101               	movlb	1	; () banked
 16460  0061F4  1103               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 16461  0061F6  A4D8               	btfss	status,2,c
 16462  0061F8  D7D7               	goto	l10133
 16463                           
 16464                           ; BSR set to: 1
 16465  0061FA  C108  F100         	movff	___lmul@product,?___lmul
 16466  0061FE  C109  F101         	movff	___lmul@product+1,?___lmul+1
 16467  006202  C10A  F102         	movff	___lmul@product+2,?___lmul+2
 16468  006206  C10B  F103         	movff	___lmul@product+3,?___lmul+3
 16469                           
 16470                           ; BSR set to: 1
 16471  00620A  0012               	return		;funcret
 16472  00620C                     __end_of___lmul:
 16473                           	opt stack 0
 16474                           tblptru	equ	0xFF8
 16475                           tblptrh	equ	0xFF7
 16476                           tblptrl	equ	0xFF6
 16477                           tablat	equ	0xFF5
 16478                           prodh	equ	0xFF4
 16479                           prodl	equ	0xFF3
 16480                           intcon	equ	0xFF2
 16481                           postinc0	equ	0xFEE
 16482                           wreg	equ	0xFE8
 16483                           postdec1	equ	0xFE5
 16484                           fsr1l	equ	0xFE1
 16485                           indf2	equ	0xFDF
 16486                           postinc2	equ	0xFDE
 16487                           postdec2	equ	0xFDD
 16488                           plusw2	equ	0xFDB
 16489                           fsr2h	equ	0xFDA
 16490                           fsr2l	equ	0xFD9
 16491                           status	equ	0xFD8
 16492                           
 16493 ;; *************** function ___altoft *****************
 16494 ;; Defined at:
 16495 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
 16496 ;; Parameters:    Size  Location     Type
 16497 ;;  c               4    8[BANK1 ] long 
 16498 ;; Auto vars:     Size  Location     Type
 16499 ;;  sign            1   17[BANK1 ] unsigned char 
 16500 ;;  exp             1   16[BANK1 ] unsigned char 
 16501 ;; Return value:  Size  Location     Type
 16502 ;;                  3    8[BANK1 ] float 
 16503 ;; Registers used:
 16504 ;;		wreg, status,2, status,0, cstack
 16505 ;; Tracked objects:
 16506 ;;		On entry : 0/0
 16507 ;;		On exit  : 0/0
 16508 ;;		Unchanged: 0/0
 16509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16510 ;;      Params:         0       0       4       0       0       0       0
 16511 ;;      Locals:         0       0       2       0       0       0       0
 16512 ;;      Temps:          0       0       4       0       0       0       0
 16513 ;;      Totals:         0       0      10       0       0       0       0
 16514 ;;Total ram usage:       10 bytes
 16515 ;; Hardware stack levels used:    1
 16516 ;; Hardware stack levels required when called:   13
 16517 ;; This function calls:
 16518 ;;		___ftpack
 16519 ;; This function is called by:
 16520 ;;		_integrator
 16521 ;; This function uses a non-reentrant model
 16522 ;;
 16523                           
 16524                           	psect	text66
 16525  00569A                     __ptext66:
 16526                           	opt stack 0
 16527  00569A                     ___altoft:
 16528                           	opt stack 14
 16529                           
 16530                           ; BSR set to: 1
 16531                           ;incstack = 0
 16532  00569A  0E00               	movlw	0
 16533  00569C  0101               	movlb	1	; () banked
 16534  00569E  6F11               	movwf	___altoft@sign& (0+255),b
 16535  0056A0  0E8E               	movlw	142
 16536  0056A2  0101               	movlb	1	; () banked
 16537  0056A4  6F10               	movwf	___altoft@exp& (0+255),b
 16538                           
 16539                           ; BSR set to: 1
 16540  0056A6  0101               	movlb	1	; () banked
 16541  0056A8  AF0B               	btfss	(___altoft@c+3)& (0+255),7,b
 16542  0056AA  D015               	goto	l10195
 16543                           
 16544                           ; BSR set to: 1
 16545  0056AC  0101               	movlb	1	; () banked
 16546  0056AE  1F0B               	comf	(___altoft@c+3)& (0+255),f,b
 16547  0056B0  1F0A               	comf	(___altoft@c+2)& (0+255),f,b
 16548  0056B2  1F09               	comf	(___altoft@c+1)& (0+255),f,b
 16549  0056B4  6D08               	negf	___altoft@c& (0+255),b
 16550  0056B6  0E00               	movlw	0
 16551  0056B8  2309               	addwfc	(___altoft@c+1)& (0+255),f,b
 16552  0056BA  230A               	addwfc	(___altoft@c+2)& (0+255),f,b
 16553  0056BC  230B               	addwfc	(___altoft@c+3)& (0+255),f,b
 16554                           
 16555                           ; BSR set to: 1
 16556  0056BE  0E01               	movlw	1
 16557  0056C0  0101               	movlb	1	; () banked
 16558  0056C2  6F11               	movwf	___altoft@sign& (0+255),b
 16559                           
 16560                           ; BSR set to: 1
 16561  0056C4  D008               	goto	l10195
 16562  0056C6                     l10193:
 16563                           
 16564                           ; BSR set to: 1
 16565  0056C6  0101               	movlb	1	; () banked
 16566  0056C8  90D8               	bcf	status,0,c
 16567  0056CA  330B               	rrcf	(___altoft@c+3)& (0+255),f,b
 16568  0056CC  330A               	rrcf	(___altoft@c+2)& (0+255),f,b
 16569  0056CE  3309               	rrcf	(___altoft@c+1)& (0+255),f,b
 16570  0056D0  3308               	rrcf	___altoft@c& (0+255),f,b
 16571  0056D2  0101               	movlb	1	; () banked
 16572  0056D4  2B10               	incf	___altoft@exp& (0+255),f,b
 16573  0056D6                     l10195:
 16574                           
 16575                           ; BSR set to: 1
 16576  0056D6  0E00               	movlw	0
 16577  0056D8  0101               	movlb	1	; () banked
 16578  0056DA  1508               	andwf	___altoft@c& (0+255),w,b
 16579  0056DC  0101               	movlb	1	; () banked
 16580  0056DE  6F0C               	movwf	??___altoft& (0+255),b
 16581  0056E0  0E00               	movlw	0
 16582  0056E2  0101               	movlb	1	; () banked
 16583  0056E4  1509               	andwf	(___altoft@c+1)& (0+255),w,b
 16584  0056E6  0101               	movlb	1	; () banked
 16585  0056E8  6F0D               	movwf	(??___altoft+1)& (0+255),b
 16586  0056EA  0E00               	movlw	0
 16587  0056EC  0101               	movlb	1	; () banked
 16588  0056EE  150A               	andwf	(___altoft@c+2)& (0+255),w,b
 16589  0056F0  0101               	movlb	1	; () banked
 16590  0056F2  6F0E               	movwf	(??___altoft+2)& (0+255),b
 16591  0056F4  0EFF               	movlw	255
 16592  0056F6  0101               	movlb	1	; () banked
 16593  0056F8  150B               	andwf	(___altoft@c+3)& (0+255),w,b
 16594  0056FA  0101               	movlb	1	; () banked
 16595  0056FC  6F0F               	movwf	(??___altoft+3)& (0+255),b
 16596  0056FE  0101               	movlb	1	; () banked
 16597  005700  510C               	movf	??___altoft& (0+255),w,b
 16598  005702  0101               	movlb	1	; () banked
 16599  005704  110D               	iorwf	(??___altoft+1)& (0+255),w,b
 16600  005706  0101               	movlb	1	; () banked
 16601  005708  110E               	iorwf	(??___altoft+2)& (0+255),w,b
 16602  00570A  0101               	movlb	1	; () banked
 16603  00570C  110F               	iorwf	(??___altoft+3)& (0+255),w,b
 16604  00570E  A4D8               	btfss	status,2,c
 16605  005710  D7DA               	goto	l10193
 16606                           
 16607                           ; BSR set to: 1
 16608                           
 16609                           ; BSR set to: 1
 16610  005712  C108  F100         	movff	___altoft@c,___ftpack@arg
 16611  005716  C109  F101         	movff	___altoft@c+1,___ftpack@arg+1
 16612  00571A  C10A  F102         	movff	___altoft@c+2,___ftpack@arg+2
 16613  00571E  C110  F103         	movff	___altoft@exp,___ftpack@exp
 16614  005722  C111  F104         	movff	___altoft@sign,___ftpack@sign
 16615  005726  EC80  F021         	call	___ftpack	;wreg free
 16616  00572A  C100  F108         	movff	?___ftpack,?___altoft
 16617  00572E  C101  F109         	movff	?___ftpack+1,?___altoft+1
 16618  005732  C102  F10A         	movff	?___ftpack+2,?___altoft+2
 16619  005736  0012               	return	
 16620  005738                     __end_of___altoft:
 16621                           	opt stack 0
 16622                           tblptru	equ	0xFF8
 16623                           tblptrh	equ	0xFF7
 16624                           tblptrl	equ	0xFF6
 16625                           tablat	equ	0xFF5
 16626                           prodh	equ	0xFF4
 16627                           prodl	equ	0xFF3
 16628                           intcon	equ	0xFF2
 16629                           postinc0	equ	0xFEE
 16630                           wreg	equ	0xFE8
 16631                           postdec1	equ	0xFE5
 16632                           fsr1l	equ	0xFE1
 16633                           indf2	equ	0xFDF
 16634                           postinc2	equ	0xFDE
 16635                           postdec2	equ	0xFDD
 16636                           plusw2	equ	0xFDB
 16637                           fsr2h	equ	0xFDA
 16638                           fsr2l	equ	0xFD9
 16639                           status	equ	0xFD8
 16640                           
 16641 ;; *************** function _initCalib *****************
 16642 ;; Defined at:
 16643 ;;		line 84 in file "source/DisplayProtocol.h"
 16644 ;; Parameters:    Size  Location     Type
 16645 ;;		None
 16646 ;; Auto vars:     Size  Location     Type
 16647 ;;		None
 16648 ;; Return value:  Size  Location     Type
 16649 ;;                  1    wreg      void 
 16650 ;; Registers used:
 16651 ;;		wreg, status,2, status,0, cstack
 16652 ;; Tracked objects:
 16653 ;;		On entry : 0/0
 16654 ;;		On exit  : 0/0
 16655 ;;		Unchanged: 0/0
 16656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16657 ;;      Params:         0       0       0       0       0       0       0
 16658 ;;      Locals:         0       0       0       0       0       0       0
 16659 ;;      Temps:          0       0       0       0       0       0       0
 16660 ;;      Totals:         0       0       0       0       0       0       0
 16661 ;;Total ram usage:        0 bytes
 16662 ;; Hardware stack levels used:    1
 16663 ;; Hardware stack levels required when called:   13
 16664 ;; This function calls:
 16665 ;;		_setPWM2duty
 16666 ;; This function is called by:
 16667 ;;		_pressENTER
 16668 ;;		_longPressENTER
 16669 ;; This function uses a non-reentrant model
 16670 ;;
 16671                           
 16672                           	psect	text67
 16673  00692E                     __ptext67:
 16674                           	opt stack 0
 16675  00692E                     _initCalib:
 16676                           	opt stack 15
 16677                           
 16678                           ;DisplayProtocol.h: 85: if(!PORTAbits.RA7)
 16679                           
 16680                           ;incstack = 0
 16681  00692E  BE80               	btfsc	3968,7,c	;volatile
 16682  006930  D003               	goto	l554
 16683                           
 16684                           ;DisplayProtocol.h: 86: bladeIsUP = 2;
 16685  006932  0E02               	movlw	2
 16686  006934  0100               	movlb	0	; () banked
 16687  006936  6FC8               	movwf	_bladeIsUP& (0+255),b
 16688  006938                     l554:
 16689                           
 16690                           ;DisplayProtocol.h: 87: processState = 0;
 16691  006938  0E00               	movlw	0
 16692  00693A  0100               	movlb	0	; () banked
 16693  00693C  6FB5               	movwf	(_processState+1)& (0+255),b
 16694  00693E  0E00               	movlw	0
 16695  006940  6FB4               	movwf	_processState& (0+255),b
 16696                           
 16697                           ;DisplayProtocol.h: 88: processStarted = 1;
 16698  006942  0E01               	movlw	1
 16699  006944  0100               	movlb	0	; () banked
 16700  006946  6FBB               	movwf	_processStarted& (0+255),b
 16701                           
 16702                           ; BSR set to: 0
 16703                           ;DisplayProtocol.h: 89: if(bladeIsUP != 1)
 16704  006948  0100               	movlb	0	; () banked
 16705  00694A  05C8               	decf	_bladeIsUP& (0+255),w,b
 16706  00694C  B4D8               	btfsc	status,2,c
 16707  00694E  D007               	goto	l10331
 16708                           
 16709                           ; BSR set to: 0
 16710                           ;DisplayProtocol.h: 90: setPWM2duty(-400);
 16711  006950  0EFE               	movlw	254
 16712  006952  0101               	movlb	1	; () banked
 16713  006954  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 16714  006956  0E70               	movlw	112
 16715  006958  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 16716  00695A  EC87  F02C         	call	_setPWM2duty	;wreg free
 16717  00695E                     l10331:
 16718                           
 16719                           ;DisplayProtocol.h: 91: actualScreen = 6;
 16720  00695E  0E06               	movlw	6
 16721  006960  0101               	movlb	1	; () banked
 16722  006962  6FC3               	movwf	_actualScreen& (0+255),b
 16723                           
 16724                           ; BSR set to: 1
 16725  006964  0012               	return		;funcret
 16726  006966                     __end_of_initCalib:
 16727                           	opt stack 0
 16728                           tblptru	equ	0xFF8
 16729                           tblptrh	equ	0xFF7
 16730                           tblptrl	equ	0xFF6
 16731                           tablat	equ	0xFF5
 16732                           prodh	equ	0xFF4
 16733                           prodl	equ	0xFF3
 16734                           intcon	equ	0xFF2
 16735                           postinc0	equ	0xFEE
 16736                           wreg	equ	0xFE8
 16737                           postdec1	equ	0xFE5
 16738                           fsr1l	equ	0xFE1
 16739                           indf2	equ	0xFDF
 16740                           postinc2	equ	0xFDE
 16741                           postdec2	equ	0xFDD
 16742                           plusw2	equ	0xFDB
 16743                           fsr2h	equ	0xFDA
 16744                           fsr2l	equ	0xFD9
 16745                           status	equ	0xFD8
 16746                           
 16747 ;; *************** function _confirmEdition *****************
 16748 ;; Defined at:
 16749 ;;		line 94 in file "source/DisplayProtocol.h"
 16750 ;; Parameters:    Size  Location     Type
 16751 ;;  yes             1    wreg     unsigned char 
 16752 ;; Auto vars:     Size  Location     Type
 16753 ;;  yes             1   35[BANK1 ] unsigned char 
 16754 ;; Return value:  Size  Location     Type
 16755 ;;                  1    wreg      void 
 16756 ;; Registers used:
 16757 ;;		wreg, status,2, status,0, cstack
 16758 ;; Tracked objects:
 16759 ;;		On entry : 0/0
 16760 ;;		On exit  : 0/0
 16761 ;;		Unchanged: 0/0
 16762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16763 ;;      Params:         0       0       0       0       0       0       0
 16764 ;;      Locals:         0       0       1       0       0       0       0
 16765 ;;      Temps:          0       0       0       0       0       0       0
 16766 ;;      Totals:         0       0       1       0       0       0       0
 16767 ;;Total ram usage:        1 bytes
 16768 ;; Hardware stack levels used:    1
 16769 ;; Hardware stack levels required when called:   16
 16770 ;; This function calls:
 16771 ;;		_saveSysParams
 16772 ;; This function is called by:
 16773 ;;		_pressENTER
 16774 ;;		_longPressENTER
 16775 ;; This function uses a non-reentrant model
 16776 ;;
 16777                           
 16778                           	psect	text68
 16779  005136                     __ptext68:
 16780                           	opt stack 0
 16781  005136                     _confirmEdition:
 16782                           	opt stack 12
 16783                           
 16784                           ; BSR set to: 1
 16785                           ;incstack = 0
 16786                           ;confirmEdition@yes stored from wreg
 16787  005136  0101               	movlb	1	; () banked
 16788  005138  6F23               	movwf	confirmEdition@yes& (0+255),b
 16789                           
 16790                           ;DisplayProtocol.h: 95: switch (menuSection) {
 16791  00513A  D04C               	goto	l10367
 16792  00513C                     l10335:
 16793                           
 16794                           ;DisplayProtocol.h: 99: if(yes) {
 16795  00513C  0101               	movlb	1	; () banked
 16796  00513E  5123               	movf	confirmEdition@yes& (0+255),w,b
 16797  005140  0101               	movlb	1	; () banked
 16798  005142  B4D8               	btfsc	status,2,c
 16799  005144  D00C               	goto	l563
 16800                           
 16801                           ; BSR set to: 1
 16802                           ;DisplayProtocol.h: 100: kgXcorte = chanValf;
 16803  005146  C1B7  F18F         	movff	_chanValf,_kgXcorte
 16804  00514A  C1B8  F190         	movff	_chanValf+1,_kgXcorte+1
 16805  00514E  C1B9  F191         	movff	_chanValf+2,_kgXcorte+2
 16806                           
 16807                           ; BSR set to: 1
 16808                           ;DisplayProtocol.h: 101: actualScreen = 4;
 16809  005152  0E04               	movlw	4
 16810  005154  0101               	movlb	1	; () banked
 16811  005156  6FC3               	movwf	_actualScreen& (0+255),b
 16812                           
 16813                           ; BSR set to: 1
 16814                           ;DisplayProtocol.h: 102: saveSysParams();
 16815  005158  EC64  F02D         	call	_saveSysParams	;wreg free
 16816                           
 16817                           ;DisplayProtocol.h: 103: }else {
 16818  00515C  0012               	return	
 16819  00515E                     l563:
 16820                           
 16821                           ; BSR set to: 1
 16822                           ;DisplayProtocol.h: 104: tempLastScreen = actualScreen;
 16823  00515E  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 16824                           
 16825                           ; BSR set to: 1
 16826                           ;DisplayProtocol.h: 105: selSN = 1;
 16827  005162  0E01               	movlw	1
 16828  005164  0101               	movlb	1	; () banked
 16829  005166  6FCC               	movwf	_selSN& (0+255),b
 16830                           
 16831                           ;DisplayProtocol.h: 106: actualScreen = 10;
 16832  005168  0E0A               	movlw	10
 16833  00516A  0101               	movlb	1	; () banked
 16834  00516C  6FC3               	movwf	_actualScreen& (0+255),b
 16835                           
 16836                           ; BSR set to: 1
 16837                           ;DisplayProtocol.h: 107: }
 16838                           ;DisplayProtocol.h: 108: break;
 16839  00516E  0012               	return	
 16840  005170                     l10345:
 16841                           
 16842                           ; BSR set to: 1
 16843                           ;DisplayProtocol.h: 110: if(yes) {
 16844  005170  0101               	movlb	1	; () banked
 16845  005172  5123               	movf	confirmEdition@yes& (0+255),w,b
 16846  005174  0101               	movlb	1	; () banked
 16847  005176  B4D8               	btfsc	status,2,c
 16848  005178  D00A               	goto	l566
 16849                           
 16850                           ; BSR set to: 1
 16851                           ;DisplayProtocol.h: 111: numCortes = chanVals;
 16852  00517A  C1BA  F0C6         	movff	_chanVals,_numCortes
 16853  00517E  C1BB  F0C7         	movff	_chanVals+1,_numCortes+1
 16854                           
 16855                           ; BSR set to: 1
 16856                           ;DisplayProtocol.h: 112: actualScreen = 4;
 16857  005182  0E04               	movlw	4
 16858  005184  0101               	movlb	1	; () banked
 16859  005186  6FC3               	movwf	_actualScreen& (0+255),b
 16860                           
 16861                           ; BSR set to: 1
 16862                           ;DisplayProtocol.h: 113: saveSysParams();
 16863  005188  EC64  F02D         	call	_saveSysParams	;wreg free
 16864                           
 16865                           ;DisplayProtocol.h: 114: }else {
 16866  00518C  0012               	return	
 16867  00518E                     l566:
 16868                           
 16869                           ; BSR set to: 1
 16870                           ;DisplayProtocol.h: 115: tempLastScreen = actualScreen;
 16871  00518E  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 16872                           
 16873                           ; BSR set to: 1
 16874                           ;DisplayProtocol.h: 116: selSN = 1;
 16875  005192  0E01               	movlw	1
 16876  005194  0101               	movlb	1	; () banked
 16877  005196  6FCC               	movwf	_selSN& (0+255),b
 16878                           
 16879                           ;DisplayProtocol.h: 117: actualScreen = 10;
 16880  005198  0E0A               	movlw	10
 16881  00519A  0101               	movlb	1	; () banked
 16882  00519C  6FC3               	movwf	_actualScreen& (0+255),b
 16883                           
 16884                           ; BSR set to: 1
 16885                           ;DisplayProtocol.h: 118: }
 16886                           ;DisplayProtocol.h: 119: break;
 16887  00519E  0012               	return	
 16888  0051A0                     l10355:
 16889                           
 16890                           ; BSR set to: 1
 16891                           ;DisplayProtocol.h: 121: if(yes) {
 16892  0051A0  0101               	movlb	1	; () banked
 16893  0051A2  5123               	movf	confirmEdition@yes& (0+255),w,b
 16894  0051A4  0101               	movlb	1	; () banked
 16895  0051A6  B4D8               	btfsc	status,2,c
 16896  0051A8  D00C               	goto	l569
 16897                           
 16898                           ; BSR set to: 1
 16899                           ;DisplayProtocol.h: 122: velocidadMasa = chanValf;
 16900  0051AA  C1B7  F198         	movff	_chanValf,_velocidadMasa
 16901  0051AE  C1B8  F199         	movff	_chanValf+1,_velocidadMasa+1
 16902  0051B2  C1B9  F19A         	movff	_chanValf+2,_velocidadMasa+2
 16903                           
 16904                           ; BSR set to: 1
 16905                           ;DisplayProtocol.h: 123: actualScreen = 4;
 16906  0051B6  0E04               	movlw	4
 16907  0051B8  0101               	movlb	1	; () banked
 16908  0051BA  6FC3               	movwf	_actualScreen& (0+255),b
 16909                           
 16910                           ; BSR set to: 1
 16911                           ;DisplayProtocol.h: 124: saveSysParams();
 16912  0051BC  EC64  F02D         	call	_saveSysParams	;wreg free
 16913                           
 16914                           ;DisplayProtocol.h: 125: }else {
 16915  0051C0  0012               	return	
 16916  0051C2                     l569:
 16917                           
 16918                           ; BSR set to: 1
 16919                           ;DisplayProtocol.h: 126: tempLastScreen = actualScreen;
 16920  0051C2  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 16921                           
 16922                           ; BSR set to: 1
 16923                           ;DisplayProtocol.h: 127: selSN = 1;
 16924  0051C6  0E01               	movlw	1
 16925  0051C8  0101               	movlb	1	; () banked
 16926  0051CA  6FCC               	movwf	_selSN& (0+255),b
 16927                           
 16928                           ;DisplayProtocol.h: 128: actualScreen = 10;
 16929  0051CC  0E0A               	movlw	10
 16930  0051CE  0101               	movlb	1	; () banked
 16931  0051D0  6FC3               	movwf	_actualScreen& (0+255),b
 16932                           
 16933                           ; BSR set to: 1
 16934                           ;DisplayProtocol.h: 131: }
 16935                           ;DisplayProtocol.h: 132: }
 16936                           
 16937                           ; BSR set to: 1
 16938                           ;DisplayProtocol.h: 129: }
 16939                           ;DisplayProtocol.h: 130: break;
 16940  0051D2  0012               	return	
 16941  0051D4                     l10367:
 16942  0051D4  0101               	movlb	1	; () banked
 16943  0051D6  51CA               	movf	_menuSection& (0+255),w,b
 16944                           
 16945                           ; Switch size 1, requested type "space"
 16946                           ; Number of cases is 4, Range of values is 0 to 3
 16947                           ; switch strategies available:
 16948                           ; Name         Instructions Cycles
 16949                           ; simple_byte           13     7 (average)
 16950                           ;	Chosen strategy is simple_byte
 16951  0051D8  0A00               	xorlw	0	; case 0
 16952  0051DA  B4D8               	btfsc	status,2,c
 16953  0051DC  0012               	return	
 16954  0051DE  0A01               	xorlw	1	; case 1
 16955  0051E0  B4D8               	btfsc	status,2,c
 16956  0051E2  D7AC               	goto	l10335
 16957  0051E4  0A03               	xorlw	3	; case 2
 16958  0051E6  B4D8               	btfsc	status,2,c
 16959  0051E8  D7C3               	goto	l10345
 16960  0051EA  0A01               	xorlw	1	; case 3
 16961  0051EC  A4D8               	btfss	status,2,c
 16962  0051EE  0012               	return	
 16963  0051F0  D7D7               	goto	l10355
 16964  0051F2                     __end_of_confirmEdition:
 16965                           	opt stack 0
 16966                           tblptru	equ	0xFF8
 16967                           tblptrh	equ	0xFF7
 16968                           tblptrl	equ	0xFF6
 16969                           tablat	equ	0xFF5
 16970                           prodh	equ	0xFF4
 16971                           prodl	equ	0xFF3
 16972                           intcon	equ	0xFF2
 16973                           postinc0	equ	0xFEE
 16974                           wreg	equ	0xFE8
 16975                           postdec1	equ	0xFE5
 16976                           fsr1l	equ	0xFE1
 16977                           indf2	equ	0xFDF
 16978                           postinc2	equ	0xFDE
 16979                           postdec2	equ	0xFDD
 16980                           plusw2	equ	0xFDB
 16981                           fsr2h	equ	0xFDA
 16982                           fsr2l	equ	0xFD9
 16983                           status	equ	0xFD8
 16984                           
 16985 ;; *************** function _saveSysParams *****************
 16986 ;; Defined at:
 16987 ;;		line 111 in file "source/sysParams.h"
 16988 ;; Parameters:    Size  Location     Type
 16989 ;;		None
 16990 ;; Auto vars:     Size  Location     Type
 16991 ;;		None
 16992 ;; Return value:  Size  Location     Type
 16993 ;;                  1    wreg      void 
 16994 ;; Registers used:
 16995 ;;		wreg, status,2, status,0, cstack
 16996 ;; Tracked objects:
 16997 ;;		On entry : 0/0
 16998 ;;		On exit  : 0/0
 16999 ;;		Unchanged: 0/0
 17000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17001 ;;      Params:         0       0       0       0       0       0       0
 17002 ;;      Locals:         0       0       0       0       0       0       0
 17003 ;;      Temps:          0       0       0       0       0       0       0
 17004 ;;      Totals:         0       0       0       0       0       0       0
 17005 ;;Total ram usage:        0 bytes
 17006 ;; Hardware stack levels used:    1
 17007 ;; Hardware stack levels required when called:   15
 17008 ;; This function calls:
 17009 ;;		_calcVars2ti
 17010 ;;		_writeEEPROM
 17011 ;; This function is called by:
 17012 ;;		_confirmEdition
 17013 ;; This function uses a non-reentrant model
 17014 ;;
 17015                           
 17016                           	psect	text69
 17017  005AC8                     __ptext69:
 17018                           	opt stack 0
 17019  005AC8                     _saveSysParams:
 17020                           	opt stack 12
 17021                           
 17022                           ;sysParams.h: 112: calcVars2ti();
 17023                           
 17024                           ;incstack = 0
 17025  005AC8  ECE4  F032         	call	_calcVars2ti	;wreg free
 17026                           
 17027                           ;sysParams.h: 113: EECON1bits.WREN = 1;
 17028  005ACC  84A6               	bsf	4006,2,c	;volatile
 17029                           
 17030                           ;sysParams.h: 114: ie = INTCONbits.GIE;
 17031  005ACE  0E00               	movlw	0
 17032  005AD0  BEF2               	btfsc	intcon,7,c	;volatile
 17033  005AD2  0E01               	movlw	1
 17034  005AD4  0100               	movlb	0	; () banked
 17035  005AD6  6FB8               	movwf	_ie& (0+255),b
 17036                           
 17037                           ; BSR set to: 0
 17038                           ;sysParams.h: 115: INTCONbits.GIE = 0;
 17039  005AD8  9EF2               	bcf	intcon,7,c	;volatile
 17040                           
 17041                           ; BSR set to: 0
 17042                           ;sysParams.h: 117: fData.floatdat = tiXcorte;
 17043  005ADA  C195  F0AF         	movff	_tiXcorte,_fData
 17044  005ADE  C196  F0B0         	movff	_tiXcorte+1,_fData+1
 17045  005AE2  C197  F0B1         	movff	_tiXcorte+2,_fData+2
 17046                           
 17047                           ; BSR set to: 0
 17048                           ;sysParams.h: 119: writeEEPROM(3, fData.floatUB);
 17049  005AE6  C0B1  F100         	movff	_fData+2,writeEEPROM@data
 17050  005AEA  0E03               	movlw	3
 17051  005AEC  EC16  F036         	call	_writeEEPROM
 17052                           
 17053                           ;sysParams.h: 120: writeEEPROM(4, fData.floatHB);
 17054  005AF0  C0B0  F100         	movff	_fData+1,writeEEPROM@data
 17055  005AF4  0E04               	movlw	4
 17056  005AF6  EC16  F036         	call	_writeEEPROM
 17057                           
 17058                           ;sysParams.h: 121: writeEEPROM(5, fData.floatLB);
 17059  005AFA  C0AF  F100         	movff	_fData,writeEEPROM@data
 17060  005AFE  0E05               	movlw	5
 17061  005B00  EC16  F036         	call	_writeEEPROM
 17062                           
 17063                           ;sysParams.h: 122: i16Data.int16dat = numCortes;
 17064  005B04  C0C6  F0B2         	movff	_numCortes,_i16Data
 17065  005B08  C0C7  F0B3         	movff	_numCortes+1,_i16Data+1
 17066                           
 17067                           ;sysParams.h: 123: writeEEPROM(6, i16Data.int16HB);
 17068  005B0C  C0B3  F100         	movff	_i16Data+1,writeEEPROM@data
 17069  005B10  0E06               	movlw	6
 17070  005B12  EC16  F036         	call	_writeEEPROM
 17071                           
 17072                           ;sysParams.h: 124: writeEEPROM(7, i16Data.int16LB);
 17073  005B16  C0B2  F100         	movff	_i16Data,writeEEPROM@data
 17074  005B1A  0E07               	movlw	7
 17075  005B1C  EC16  F036         	call	_writeEEPROM
 17076                           
 17077                           ;sysParams.h: 135: fData.floatdat = velocidadMasa;
 17078  005B20  C198  F0AF         	movff	_velocidadMasa,_fData
 17079  005B24  C199  F0B0         	movff	_velocidadMasa+1,_fData+1
 17080  005B28  C19A  F0B1         	movff	_velocidadMasa+2,_fData+2
 17081                           
 17082                           ;sysParams.h: 137: writeEEPROM(17, fData.floatUB);
 17083  005B2C  C0B1  F100         	movff	_fData+2,writeEEPROM@data
 17084  005B30  0E11               	movlw	17
 17085  005B32  EC16  F036         	call	_writeEEPROM
 17086                           
 17087                           ;sysParams.h: 138: writeEEPROM(18, fData.floatHB);
 17088  005B36  C0B0  F100         	movff	_fData+1,writeEEPROM@data
 17089  005B3A  0E12               	movlw	18
 17090  005B3C  EC16  F036         	call	_writeEEPROM
 17091                           
 17092                           ;sysParams.h: 139: writeEEPROM(19, fData.floatLB);
 17093  005B40  C0AF  F100         	movff	_fData,writeEEPROM@data
 17094  005B44  0E13               	movlw	19
 17095  005B46  EC16  F036         	call	_writeEEPROM
 17096                           
 17097                           ;sysParams.h: 140: EECON1bits.WREN = 0;
 17098  005B4A  94A6               	bcf	4006,2,c	;volatile
 17099                           
 17100                           ;sysParams.h: 141: INTCONbits.GIE = ie;
 17101  005B4C  0100               	movlb	0	; () banked
 17102  005B4E  B1B8               	btfsc	_ie& (0+255),0,b
 17103  005B50  D002               	bra	u14385
 17104  005B52  9EF2               	bcf	intcon,7,c	;volatile
 17105  005B54  D001               	bra	u14386
 17106  005B56                     u14385:
 17107  005B56  8EF2               	bsf	intcon,7,c	;volatile
 17108  005B58                     u14386:
 17109  005B58  0012               	return		;funcret
 17110  005B5A                     __end_of_saveSysParams:
 17111                           	opt stack 0
 17112                           tblptru	equ	0xFF8
 17113                           tblptrh	equ	0xFF7
 17114                           tblptrl	equ	0xFF6
 17115                           tablat	equ	0xFF5
 17116                           prodh	equ	0xFF4
 17117                           prodl	equ	0xFF3
 17118                           intcon	equ	0xFF2
 17119                           postinc0	equ	0xFEE
 17120                           wreg	equ	0xFE8
 17121                           postdec1	equ	0xFE5
 17122                           fsr1l	equ	0xFE1
 17123                           indf2	equ	0xFDF
 17124                           postinc2	equ	0xFDE
 17125                           postdec2	equ	0xFDD
 17126                           plusw2	equ	0xFDB
 17127                           fsr2h	equ	0xFDA
 17128                           fsr2l	equ	0xFD9
 17129                           status	equ	0xFD8
 17130                           
 17131 ;; *************** function _writeEEPROM *****************
 17132 ;; Defined at:
 17133 ;;		line 51 in file "source/sysParams.h"
 17134 ;; Parameters:    Size  Location     Type
 17135 ;;  adr             1    wreg     unsigned char 
 17136 ;;  data            1    0[BANK1 ] unsigned char 
 17137 ;; Auto vars:     Size  Location     Type
 17138 ;;  adr             1    1[BANK1 ] unsigned char 
 17139 ;; Return value:  Size  Location     Type
 17140 ;;                  1    wreg      void 
 17141 ;; Registers used:
 17142 ;;		wreg, status,2
 17143 ;; Tracked objects:
 17144 ;;		On entry : 0/0
 17145 ;;		On exit  : 0/0
 17146 ;;		Unchanged: 0/0
 17147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17148 ;;      Params:         0       0       1       0       0       0       0
 17149 ;;      Locals:         0       0       1       0       0       0       0
 17150 ;;      Temps:          0       0       0       0       0       0       0
 17151 ;;      Totals:         0       0       2       0       0       0       0
 17152 ;;Total ram usage:        2 bytes
 17153 ;; Hardware stack levels used:    1
 17154 ;; Hardware stack levels required when called:   12
 17155 ;; This function calls:
 17156 ;;		Nothing
 17157 ;; This function is called by:
 17158 ;;		_saveSysParams
 17159 ;; This function uses a non-reentrant model
 17160 ;;
 17161                           
 17162                           	psect	text70
 17163  006C2C                     __ptext70:
 17164                           	opt stack 0
 17165  006C2C                     _writeEEPROM:
 17166                           	opt stack 14
 17167                           
 17168                           ;incstack = 0
 17169                           ;writeEEPROM@adr stored from wreg
 17170  006C2C  0101               	movlb	1	; () banked
 17171  006C2E  6F01               	movwf	writeEEPROM@adr& (0+255),b
 17172                           
 17173                           ;sysParams.h: 52: EEADR = adr;
 17174  006C30  C101  FFA9         	movff	writeEEPROM@adr,4009	;volatile
 17175                           
 17176                           ;sysParams.h: 53: EEDATA = data;
 17177  006C34  C100  FFA8         	movff	writeEEPROM@data,4008	;volatile
 17178                           
 17179                           ;sysParams.h: 54: EECON1bits.EEPGD = 0;
 17180  006C38  9EA6               	bcf	4006,7,c	;volatile
 17181                           
 17182                           ;sysParams.h: 55: EECON1bits.CFGS = 0;
 17183  006C3A  9CA6               	bcf	4006,6,c	;volatile
 17184                           
 17185                           ;sysParams.h: 56: EECON2 = 0x55;
 17186  006C3C  0E55               	movlw	85
 17187  006C3E  6EA7               	movwf	4007,c	;volatile
 17188                           
 17189                           ;sysParams.h: 57: EECON2 = 0xAA;
 17190  006C40  0EAA               	movlw	170
 17191  006C42  6EA7               	movwf	4007,c	;volatile
 17192                           
 17193                           ;sysParams.h: 58: EECON1bits.WR = 1;
 17194  006C44  82A6               	bsf	4006,1,c	;volatile
 17195  006C46                     l279:
 17196  006C46  A2A6               	btfss	4006,1,c	;volatile
 17197  006C48  0012               	return	
 17198  006C4A  D7FD               	goto	l279
 17199  006C4C                     __end_of_writeEEPROM:
 17200                           	opt stack 0
 17201                           tblptru	equ	0xFF8
 17202                           tblptrh	equ	0xFF7
 17203                           tblptrl	equ	0xFF6
 17204                           tablat	equ	0xFF5
 17205                           prodh	equ	0xFF4
 17206                           prodl	equ	0xFF3
 17207                           intcon	equ	0xFF2
 17208                           postinc0	equ	0xFEE
 17209                           wreg	equ	0xFE8
 17210                           postdec1	equ	0xFE5
 17211                           fsr1l	equ	0xFE1
 17212                           indf2	equ	0xFDF
 17213                           postinc2	equ	0xFDE
 17214                           postdec2	equ	0xFDD
 17215                           plusw2	equ	0xFDB
 17216                           fsr2h	equ	0xFDA
 17217                           fsr2l	equ	0xFD9
 17218                           status	equ	0xFD8
 17219                           
 17220 ;; *************** function _calcVars2ti *****************
 17221 ;; Defined at:
 17222 ;;		line 87 in file "source/sysParams.h"
 17223 ;; Parameters:    Size  Location     Type
 17224 ;;		None
 17225 ;; Auto vars:     Size  Location     Type
 17226 ;;		None
 17227 ;; Return value:  Size  Location     Type
 17228 ;;                  1    wreg      void 
 17229 ;; Registers used:
 17230 ;;		wreg, status,2, status,0, cstack
 17231 ;; Tracked objects:
 17232 ;;		On entry : 0/0
 17233 ;;		On exit  : 0/0
 17234 ;;		Unchanged: 0/0
 17235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17236 ;;      Params:         0       0       0       0       0       0       0
 17237 ;;      Locals:         0       0       0       0       0       0       0
 17238 ;;      Temps:          0       0       0       0       0       0       0
 17239 ;;      Totals:         0       0       0       0       0       0       0
 17240 ;;Total ram usage:        0 bytes
 17241 ;; Hardware stack levels used:    1
 17242 ;; Hardware stack levels required when called:   14
 17243 ;; This function calls:
 17244 ;;		___ftdiv
 17245 ;;		___ftmul
 17246 ;; This function is called by:
 17247 ;;		_saveSysParams
 17248 ;;		_longPressENTER
 17249 ;; This function uses a non-reentrant model
 17250 ;;
 17251                           
 17252                           	psect	text71
 17253  0065C8                     __ptext71:
 17254                           	opt stack 0
 17255  0065C8                     _calcVars2ti:
 17256                           	opt stack 12
 17257                           
 17258                           ;sysParams.h: 95: tiXcorte = (float)kgXcorte / velocidadMasa;
 17259                           
 17260                           ;incstack = 0
 17261  0065C8  C18F  F112         	movff	_kgXcorte,___ftdiv@f1
 17262  0065CC  C190  F113         	movff	_kgXcorte+1,___ftdiv@f1+1
 17263  0065D0  C191  F114         	movff	_kgXcorte+2,___ftdiv@f1+2
 17264  0065D4  C198  F115         	movff	_velocidadMasa,___ftdiv@f2
 17265  0065D8  C199  F116         	movff	_velocidadMasa+1,___ftdiv@f2+1
 17266  0065DC  C19A  F117         	movff	_velocidadMasa+2,___ftdiv@f2+2
 17267  0065E0  EC2A  F01C         	call	___ftdiv	;wreg free
 17268  0065E4  C112  F195         	movff	?___ftdiv,_tiXcorte
 17269  0065E8  C113  F196         	movff	?___ftdiv+1,_tiXcorte+1
 17270  0065EC  C114  F197         	movff	?___ftdiv+2,_tiXcorte+2
 17271                           
 17272                           ;sysParams.h: 96: timsXcorte = (float)tiXcorte * 1000;
 17273  0065F0  C195  F114         	movff	_tiXcorte,___ftmul@f1
 17274  0065F4  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 17275  0065F8  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 17276  0065FC  0E00               	movlw	0
 17277  0065FE  0101               	movlb	1	; () banked
 17278  006600  6F17               	movwf	___ftmul@f2& (0+255),b
 17279  006602  0E7A               	movlw	122
 17280  006604  0101               	movlb	1	; () banked
 17281  006606  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 17282  006608  0E44               	movlw	68
 17283  00660A  0101               	movlb	1	; () banked
 17284  00660C  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 17285  00660E  ECCC  F01A         	call	___ftmul	;wreg free
 17286  006612  C114  F05A         	movff	?___ftmul,_timsXcorte
 17287  006616  C115  F05B         	movff	?___ftmul+1,_timsXcorte+1
 17288  00661A  C116  F05C         	movff	?___ftmul+2,_timsXcorte+2
 17289  00661E  0012               	return		;funcret
 17290  006620                     __end_of_calcVars2ti:
 17291                           	opt stack 0
 17292                           tblptru	equ	0xFF8
 17293                           tblptrh	equ	0xFF7
 17294                           tblptrl	equ	0xFF6
 17295                           tablat	equ	0xFF5
 17296                           prodh	equ	0xFF4
 17297                           prodl	equ	0xFF3
 17298                           intcon	equ	0xFF2
 17299                           postinc0	equ	0xFEE
 17300                           wreg	equ	0xFE8
 17301                           postdec1	equ	0xFE5
 17302                           fsr1l	equ	0xFE1
 17303                           indf2	equ	0xFDF
 17304                           postinc2	equ	0xFDE
 17305                           postdec2	equ	0xFDD
 17306                           plusw2	equ	0xFDB
 17307                           fsr2h	equ	0xFDA
 17308                           fsr2l	equ	0xFD9
 17309                           status	equ	0xFD8
 17310                           
 17311 ;; *************** function ___ftmul *****************
 17312 ;; Defined at:
 17313 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 17314 ;; Parameters:    Size  Location     Type
 17315 ;;  f1              3   20[BANK1 ] float 
 17316 ;;  f2              3   23[BANK1 ] float 
 17317 ;; Auto vars:     Size  Location     Type
 17318 ;;  f3_as_produc    3   30[BANK1 ] unsigned um
 17319 ;;  sign            1   34[BANK1 ] unsigned char 
 17320 ;;  cntr            1   33[BANK1 ] unsigned char 
 17321 ;;  exp             1   29[BANK1 ] unsigned char 
 17322 ;; Return value:  Size  Location     Type
 17323 ;;                  3   20[BANK1 ] float 
 17324 ;; Registers used:
 17325 ;;		wreg, status,2, status,0, cstack
 17326 ;; Tracked objects:
 17327 ;;		On entry : 0/0
 17328 ;;		On exit  : 0/0
 17329 ;;		Unchanged: 0/0
 17330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17331 ;;      Params:         0       0       6       0       0       0       0
 17332 ;;      Locals:         0       0       6       0       0       0       0
 17333 ;;      Temps:          0       0       3       0       0       0       0
 17334 ;;      Totals:         0       0      15       0       0       0       0
 17335 ;;Total ram usage:       15 bytes
 17336 ;; Hardware stack levels used:    1
 17337 ;; Hardware stack levels required when called:   13
 17338 ;; This function calls:
 17339 ;;		___ftpack
 17340 ;; This function is called by:
 17341 ;;		_calcSysVars
 17342 ;;		_calcVars2ti
 17343 ;;		_desintegrator
 17344 ;;		_fround
 17345 ;;		_scale
 17346 ;;		_printf
 17347 ;; This function uses a non-reentrant model
 17348 ;;
 17349                           
 17350                           	psect	text72
 17351  003598                     __ptext72:
 17352                           	opt stack 0
 17353  003598                     ___ftmul:
 17354                           	opt stack 15
 17355                           
 17356                           ;incstack = 0
 17357  003598  C116  F11A         	movff	___ftmul@f1+2,??___ftmul
 17358  00359C  0101               	movlb	1	; () banked
 17359  00359E  6B1B               	clrf	(??___ftmul+1)& (0+255),b
 17360  0035A0  6B1C               	clrf	(??___ftmul+2)& (0+255),b
 17361  0035A2  0101               	movlb	1	; () banked
 17362  0035A4  3515               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 17363  0035A6  0101               	movlb	1	; () banked
 17364  0035A8  371A               	rlcf	??___ftmul& (0+255),f,b
 17365  0035AA  E301               	bnc	u13821
 17366  0035AC  811B               	bsf	(??___ftmul+1)& (0+255),0,b
 17367  0035AE                     u13821:
 17368  0035AE  0101               	movlb	1	; () banked
 17369  0035B0  511A               	movf	??___ftmul& (0+255),w,b
 17370  0035B2  0101               	movlb	1	; () banked
 17371  0035B4  6F1D               	movwf	___ftmul@exp& (0+255),b
 17372  0035B6  0101               	movlb	1	; () banked
 17373  0035B8  511D               	movf	___ftmul@exp& (0+255),w,b
 17374  0035BA  A4D8               	btfss	status,2,c
 17375  0035BC  D00A               	goto	l9377
 17376                           
 17377                           ; BSR set to: 1
 17378  0035BE  0E00               	movlw	0
 17379  0035C0  0101               	movlb	1	; () banked
 17380  0035C2  6F14               	movwf	?___ftmul& (0+255),b
 17381  0035C4  0E00               	movlw	0
 17382  0035C6  0101               	movlb	1	; () banked
 17383  0035C8  6F15               	movwf	(?___ftmul+1)& (0+255),b
 17384  0035CA  0E00               	movlw	0
 17385  0035CC  0101               	movlb	1	; () banked
 17386  0035CE  6F16               	movwf	(?___ftmul+2)& (0+255),b
 17387                           
 17388                           ; BSR set to: 1
 17389  0035D0  0012               	return	
 17390  0035D2                     l9377:
 17391                           
 17392                           ; BSR set to: 1
 17393  0035D2  C119  F11A         	movff	___ftmul@f2+2,??___ftmul
 17394  0035D6  0101               	movlb	1	; () banked
 17395  0035D8  6B1B               	clrf	(??___ftmul+1)& (0+255),b
 17396  0035DA  6B1C               	clrf	(??___ftmul+2)& (0+255),b
 17397  0035DC  0101               	movlb	1	; () banked
 17398  0035DE  3518               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 17399  0035E0  0101               	movlb	1	; () banked
 17400  0035E2  371A               	rlcf	??___ftmul& (0+255),f,b
 17401  0035E4  E301               	bnc	u13841
 17402  0035E6  811B               	bsf	(??___ftmul+1)& (0+255),0,b
 17403  0035E8                     u13841:
 17404  0035E8  0101               	movlb	1	; () banked
 17405  0035EA  511A               	movf	??___ftmul& (0+255),w,b
 17406  0035EC  0101               	movlb	1	; () banked
 17407  0035EE  6F22               	movwf	___ftmul@sign& (0+255),b
 17408  0035F0  0101               	movlb	1	; () banked
 17409  0035F2  5122               	movf	___ftmul@sign& (0+255),w,b
 17410  0035F4  A4D8               	btfss	status,2,c
 17411  0035F6  D00A               	goto	l9383
 17412                           
 17413                           ; BSR set to: 1
 17414  0035F8  0E00               	movlw	0
 17415  0035FA  0101               	movlb	1	; () banked
 17416  0035FC  6F14               	movwf	?___ftmul& (0+255),b
 17417  0035FE  0E00               	movlw	0
 17418  003600  0101               	movlb	1	; () banked
 17419  003602  6F15               	movwf	(?___ftmul+1)& (0+255),b
 17420  003604  0E00               	movlw	0
 17421  003606  0101               	movlb	1	; () banked
 17422  003608  6F16               	movwf	(?___ftmul+2)& (0+255),b
 17423                           
 17424                           ; BSR set to: 1
 17425  00360A  0012               	return	
 17426  00360C                     l9383:
 17427                           
 17428                           ; BSR set to: 1
 17429  00360C  0101               	movlb	1	; () banked
 17430  00360E  5122               	movf	___ftmul@sign& (0+255),w,b
 17431  003610  0F7B               	addlw	123
 17432  003612  0101               	movlb	1	; () banked
 17433  003614  271D               	addwf	___ftmul@exp& (0+255),f,b
 17434                           
 17435                           ; BSR set to: 1
 17436  003616  C116  F122         	movff	___ftmul@f1+2,___ftmul@sign
 17437  00361A  0101               	movlb	1	; () banked
 17438  00361C  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 17439  00361E  0101               	movlb	1	; () banked
 17440  003620  1B22               	xorwf	___ftmul@sign& (0+255),f,b
 17441  003622  0E80               	movlw	128
 17442  003624  0101               	movlb	1	; () banked
 17443  003626  1722               	andwf	___ftmul@sign& (0+255),f,b
 17444                           
 17445                           ; BSR set to: 1
 17446  003628  0101               	movlb	1	; () banked
 17447  00362A  8F15               	bsf	(___ftmul@f1+1)& (0+255),7,b
 17448                           
 17449                           ; BSR set to: 1
 17450  00362C  0101               	movlb	1	; () banked
 17451  00362E  8F18               	bsf	(___ftmul@f2+1)& (0+255),7,b
 17452                           
 17453                           ; BSR set to: 1
 17454  003630  0EFF               	movlw	255
 17455  003632  0101               	movlb	1	; () banked
 17456  003634  1717               	andwf	___ftmul@f2& (0+255),f,b
 17457  003636  0EFF               	movlw	255
 17458  003638  0101               	movlb	1	; () banked
 17459  00363A  1718               	andwf	(___ftmul@f2+1)& (0+255),f,b
 17460  00363C  0E00               	movlw	0
 17461  00363E  0101               	movlb	1	; () banked
 17462  003640  1719               	andwf	(___ftmul@f2+2)& (0+255),f,b
 17463                           
 17464                           ; BSR set to: 1
 17465  003642  0E00               	movlw	0
 17466  003644  0101               	movlb	1	; () banked
 17467  003646  6F1E               	movwf	___ftmul@f3_as_product& (0+255),b
 17468  003648  0E00               	movlw	0
 17469  00364A  0101               	movlb	1	; () banked
 17470  00364C  6F1F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 17471  00364E  0E00               	movlw	0
 17472  003650  0101               	movlb	1	; () banked
 17473  003652  6F20               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 17474                           
 17475                           ; BSR set to: 1
 17476  003654  0E07               	movlw	7
 17477  003656  0101               	movlb	1	; () banked
 17478  003658  6F21               	movwf	___ftmul@cntr& (0+255),b
 17479  00365A                     l9397:
 17480                           
 17481                           ; BSR set to: 1
 17482  00365A  0101               	movlb	1	; () banked
 17483  00365C  A114               	btfss	___ftmul@f1& (0+255),0,b
 17484  00365E  D00C               	goto	l9401
 17485                           
 17486                           ; BSR set to: 1
 17487  003660  0101               	movlb	1	; () banked
 17488  003662  5117               	movf	___ftmul@f2& (0+255),w,b
 17489  003664  0101               	movlb	1	; () banked
 17490  003666  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 17491  003668  0101               	movlb	1	; () banked
 17492  00366A  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
 17493  00366C  0101               	movlb	1	; () banked
 17494  00366E  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 17495  003670  0101               	movlb	1	; () banked
 17496  003672  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 17497  003674  0101               	movlb	1	; () banked
 17498  003676  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 17499  003678                     l9401:
 17500                           
 17501                           ; BSR set to: 1
 17502  003678  0101               	movlb	1	; () banked
 17503  00367A  90D8               	bcf	status,0,c
 17504  00367C  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 17505  00367E  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 17506  003680  3314               	rrcf	___ftmul@f1& (0+255),f,b
 17507  003682  0101               	movlb	1	; () banked
 17508  003684  90D8               	bcf	status,0,c
 17509  003686  3717               	rlcf	___ftmul@f2& (0+255),f,b
 17510  003688  3718               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 17511  00368A  3719               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 17512                           
 17513                           ; BSR set to: 1
 17514  00368C  0101               	movlb	1	; () banked
 17515  00368E  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
 17516  003690  D7E4               	goto	l9397
 17517                           
 17518                           ; BSR set to: 1
 17519                           
 17520                           ; BSR set to: 1
 17521  003692  0E09               	movlw	9
 17522  003694  0101               	movlb	1	; () banked
 17523  003696  6F21               	movwf	___ftmul@cntr& (0+255),b
 17524  003698                     l9407:
 17525                           
 17526                           ; BSR set to: 1
 17527  003698  0101               	movlb	1	; () banked
 17528  00369A  A114               	btfss	___ftmul@f1& (0+255),0,b
 17529  00369C  D00C               	goto	l9411
 17530                           
 17531                           ; BSR set to: 1
 17532  00369E  0101               	movlb	1	; () banked
 17533  0036A0  5117               	movf	___ftmul@f2& (0+255),w,b
 17534  0036A2  0101               	movlb	1	; () banked
 17535  0036A4  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 17536  0036A6  0101               	movlb	1	; () banked
 17537  0036A8  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
 17538  0036AA  0101               	movlb	1	; () banked
 17539  0036AC  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 17540  0036AE  0101               	movlb	1	; () banked
 17541  0036B0  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 17542  0036B2  0101               	movlb	1	; () banked
 17543  0036B4  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 17544  0036B6                     l9411:
 17545                           
 17546                           ; BSR set to: 1
 17547  0036B6  0101               	movlb	1	; () banked
 17548  0036B8  90D8               	bcf	status,0,c
 17549  0036BA  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 17550  0036BC  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 17551  0036BE  3314               	rrcf	___ftmul@f1& (0+255),f,b
 17552  0036C0  0101               	movlb	1	; () banked
 17553  0036C2  90D8               	bcf	status,0,c
 17554  0036C4  3320               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 17555  0036C6  331F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 17556  0036C8  331E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 17557                           
 17558                           ; BSR set to: 1
 17559  0036CA  0101               	movlb	1	; () banked
 17560  0036CC  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
 17561  0036CE  D7E4               	goto	l9407
 17562                           
 17563                           ; BSR set to: 1
 17564                           
 17565                           ; BSR set to: 1
 17566  0036D0  C11E  F100         	movff	___ftmul@f3_as_product,___ftpack@arg
 17567  0036D4  C11F  F101         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 17568  0036D8  C120  F102         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 17569  0036DC  C11D  F103         	movff	___ftmul@exp,___ftpack@exp
 17570  0036E0  C122  F104         	movff	___ftmul@sign,___ftpack@sign
 17571  0036E4  EC80  F021         	call	___ftpack	;wreg free
 17572  0036E8  C100  F114         	movff	?___ftpack,?___ftmul
 17573  0036EC  C101  F115         	movff	?___ftpack+1,?___ftmul+1
 17574  0036F0  C102  F116         	movff	?___ftpack+2,?___ftmul+2
 17575  0036F4  0012               	return	
 17576  0036F6                     __end_of___ftmul:
 17577                           	opt stack 0
 17578                           tblptru	equ	0xFF8
 17579                           tblptrh	equ	0xFF7
 17580                           tblptrl	equ	0xFF6
 17581                           tablat	equ	0xFF5
 17582                           prodh	equ	0xFF4
 17583                           prodl	equ	0xFF3
 17584                           intcon	equ	0xFF2
 17585                           postinc0	equ	0xFEE
 17586                           wreg	equ	0xFE8
 17587                           postdec1	equ	0xFE5
 17588                           fsr1l	equ	0xFE1
 17589                           indf2	equ	0xFDF
 17590                           postinc2	equ	0xFDE
 17591                           postdec2	equ	0xFDD
 17592                           plusw2	equ	0xFDB
 17593                           fsr2h	equ	0xFDA
 17594                           fsr2l	equ	0xFD9
 17595                           status	equ	0xFD8
 17596                           
 17597 ;; *************** function ___ftdiv *****************
 17598 ;; Defined at:
 17599 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 17600 ;; Parameters:    Size  Location     Type
 17601 ;;  f1              3   18[BANK1 ] float 
 17602 ;;  f2              3   21[BANK1 ] float 
 17603 ;; Auto vars:     Size  Location     Type
 17604 ;;  f3              3   28[BANK1 ] float 
 17605 ;;  sign            1   32[BANK1 ] unsigned char 
 17606 ;;  exp             1   31[BANK1 ] unsigned char 
 17607 ;;  cntr            1   27[BANK1 ] unsigned char 
 17608 ;; Return value:  Size  Location     Type
 17609 ;;                  3   18[BANK1 ] float 
 17610 ;; Registers used:
 17611 ;;		wreg, status,2, status,0, cstack
 17612 ;; Tracked objects:
 17613 ;;		On entry : 0/0
 17614 ;;		On exit  : 0/0
 17615 ;;		Unchanged: 0/0
 17616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17617 ;;      Params:         0       0       6       0       0       0       0
 17618 ;;      Locals:         0       0       6       0       0       0       0
 17619 ;;      Temps:          0       0       3       0       0       0       0
 17620 ;;      Totals:         0       0      15       0       0       0       0
 17621 ;;Total ram usage:       15 bytes
 17622 ;; Hardware stack levels used:    1
 17623 ;; Hardware stack levels required when called:   13
 17624 ;; This function calls:
 17625 ;;		___ftpack
 17626 ;; This function is called by:
 17627 ;;		_calcVars2ti
 17628 ;;		_integrator
 17629 ;;		_longPressENTER
 17630 ;; This function uses a non-reentrant model
 17631 ;;
 17632                           
 17633                           	psect	text73
 17634  003854                     __ptext73:
 17635                           	opt stack 0
 17636  003854                     ___ftdiv:
 17637                           	opt stack 12
 17638                           
 17639                           ;incstack = 0
 17640  003854  C114  F118         	movff	___ftdiv@f1+2,??___ftdiv
 17641  003858  0101               	movlb	1	; () banked
 17642  00385A  6B19               	clrf	(??___ftdiv+1)& (0+255),b
 17643  00385C  6B1A               	clrf	(??___ftdiv+2)& (0+255),b
 17644  00385E  0101               	movlb	1	; () banked
 17645  003860  3513               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 17646  003862  0101               	movlb	1	; () banked
 17647  003864  3718               	rlcf	??___ftdiv& (0+255),f,b
 17648  003866  E301               	bnc	u13771
 17649  003868  8119               	bsf	(??___ftdiv+1)& (0+255),0,b
 17650  00386A                     u13771:
 17651  00386A  0101               	movlb	1	; () banked
 17652  00386C  5118               	movf	??___ftdiv& (0+255),w,b
 17653  00386E  0101               	movlb	1	; () banked
 17654  003870  6F1F               	movwf	___ftdiv@exp& (0+255),b
 17655  003872  0101               	movlb	1	; () banked
 17656  003874  511F               	movf	___ftdiv@exp& (0+255),w,b
 17657  003876  A4D8               	btfss	status,2,c
 17658  003878  D00A               	goto	l9331
 17659                           
 17660                           ; BSR set to: 1
 17661  00387A  0E00               	movlw	0
 17662  00387C  0101               	movlb	1	; () banked
 17663  00387E  6F12               	movwf	?___ftdiv& (0+255),b
 17664  003880  0E00               	movlw	0
 17665  003882  0101               	movlb	1	; () banked
 17666  003884  6F13               	movwf	(?___ftdiv+1)& (0+255),b
 17667  003886  0E00               	movlw	0
 17668  003888  0101               	movlb	1	; () banked
 17669  00388A  6F14               	movwf	(?___ftdiv+2)& (0+255),b
 17670                           
 17671                           ; BSR set to: 1
 17672  00388C  0012               	return	
 17673  00388E                     l9331:
 17674                           
 17675                           ; BSR set to: 1
 17676  00388E  C117  F118         	movff	___ftdiv@f2+2,??___ftdiv
 17677  003892  0101               	movlb	1	; () banked
 17678  003894  6B19               	clrf	(??___ftdiv+1)& (0+255),b
 17679  003896  6B1A               	clrf	(??___ftdiv+2)& (0+255),b
 17680  003898  0101               	movlb	1	; () banked
 17681  00389A  3516               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 17682  00389C  0101               	movlb	1	; () banked
 17683  00389E  3718               	rlcf	??___ftdiv& (0+255),f,b
 17684  0038A0  E301               	bnc	u13791
 17685  0038A2  8119               	bsf	(??___ftdiv+1)& (0+255),0,b
 17686  0038A4                     u13791:
 17687  0038A4  0101               	movlb	1	; () banked
 17688  0038A6  5118               	movf	??___ftdiv& (0+255),w,b
 17689  0038A8  0101               	movlb	1	; () banked
 17690  0038AA  6F20               	movwf	___ftdiv@sign& (0+255),b
 17691  0038AC  0101               	movlb	1	; () banked
 17692  0038AE  5120               	movf	___ftdiv@sign& (0+255),w,b
 17693  0038B0  A4D8               	btfss	status,2,c
 17694  0038B2  D00A               	goto	l9337
 17695                           
 17696                           ; BSR set to: 1
 17697  0038B4  0E00               	movlw	0
 17698  0038B6  0101               	movlb	1	; () banked
 17699  0038B8  6F12               	movwf	?___ftdiv& (0+255),b
 17700  0038BA  0E00               	movlw	0
 17701  0038BC  0101               	movlb	1	; () banked
 17702  0038BE  6F13               	movwf	(?___ftdiv+1)& (0+255),b
 17703  0038C0  0E00               	movlw	0
 17704  0038C2  0101               	movlb	1	; () banked
 17705  0038C4  6F14               	movwf	(?___ftdiv+2)& (0+255),b
 17706                           
 17707                           ; BSR set to: 1
 17708  0038C6  0012               	return	
 17709  0038C8                     l9337:
 17710                           
 17711                           ; BSR set to: 1
 17712  0038C8  0E00               	movlw	0
 17713  0038CA  0101               	movlb	1	; () banked
 17714  0038CC  6F1C               	movwf	___ftdiv@f3& (0+255),b
 17715  0038CE  0E00               	movlw	0
 17716  0038D0  0101               	movlb	1	; () banked
 17717  0038D2  6F1D               	movwf	(___ftdiv@f3+1)& (0+255),b
 17718  0038D4  0E00               	movlw	0
 17719  0038D6  0101               	movlb	1	; () banked
 17720  0038D8  6F1E               	movwf	(___ftdiv@f3+2)& (0+255),b
 17721                           
 17722                           ; BSR set to: 1
 17723  0038DA  0101               	movlb	1	; () banked
 17724  0038DC  5120               	movf	___ftdiv@sign& (0+255),w,b
 17725  0038DE  0F89               	addlw	137
 17726  0038E0  0101               	movlb	1	; () banked
 17727  0038E2  5F1F               	subwf	___ftdiv@exp& (0+255),f,b
 17728                           
 17729                           ; BSR set to: 1
 17730  0038E4  C114  F120         	movff	___ftdiv@f1+2,___ftdiv@sign
 17731                           
 17732                           ; BSR set to: 1
 17733  0038E8  0101               	movlb	1	; () banked
 17734  0038EA  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 17735  0038EC  0101               	movlb	1	; () banked
 17736  0038EE  1B20               	xorwf	___ftdiv@sign& (0+255),f,b
 17737                           
 17738                           ; BSR set to: 1
 17739  0038F0  0E80               	movlw	128
 17740  0038F2  0101               	movlb	1	; () banked
 17741  0038F4  1720               	andwf	___ftdiv@sign& (0+255),f,b
 17742                           
 17743                           ; BSR set to: 1
 17744  0038F6  0101               	movlb	1	; () banked
 17745  0038F8  8F13               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 17746                           
 17747                           ; BSR set to: 1
 17748  0038FA  0EFF               	movlw	255
 17749  0038FC  0101               	movlb	1	; () banked
 17750  0038FE  1712               	andwf	___ftdiv@f1& (0+255),f,b
 17751  003900  0EFF               	movlw	255
 17752  003902  0101               	movlb	1	; () banked
 17753  003904  1713               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 17754  003906  0E00               	movlw	0
 17755  003908  0101               	movlb	1	; () banked
 17756  00390A  1714               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 17757                           
 17758                           ; BSR set to: 1
 17759  00390C  0101               	movlb	1	; () banked
 17760  00390E  8F16               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 17761                           
 17762                           ; BSR set to: 1
 17763  003910  0EFF               	movlw	255
 17764  003912  0101               	movlb	1	; () banked
 17765  003914  1715               	andwf	___ftdiv@f2& (0+255),f,b
 17766  003916  0EFF               	movlw	255
 17767  003918  0101               	movlb	1	; () banked
 17768  00391A  1716               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 17769  00391C  0E00               	movlw	0
 17770  00391E  0101               	movlb	1	; () banked
 17771  003920  1717               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 17772                           
 17773                           ; BSR set to: 1
 17774  003922  0E18               	movlw	24
 17775  003924  0101               	movlb	1	; () banked
 17776  003926  6F1B               	movwf	___ftdiv@cntr& (0+255),b
 17777  003928                     l9357:
 17778                           
 17779                           ; BSR set to: 1
 17780  003928  0101               	movlb	1	; () banked
 17781  00392A  90D8               	bcf	status,0,c
 17782  00392C  371C               	rlcf	___ftdiv@f3& (0+255),f,b
 17783  00392E  371D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 17784  003930  371E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 17785                           
 17786                           ; BSR set to: 1
 17787  003932  0101               	movlb	1	; () banked
 17788  003934  5115               	movf	___ftdiv@f2& (0+255),w,b
 17789  003936  0101               	movlb	1	; () banked
 17790  003938  5D12               	subwf	___ftdiv@f1& (0+255),w,b
 17791  00393A  0101               	movlb	1	; () banked
 17792  00393C  5116               	movf	(___ftdiv@f2+1)& (0+255),w,b
 17793  00393E  0101               	movlb	1	; () banked
 17794  003940  5913               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 17795  003942  0101               	movlb	1	; () banked
 17796  003944  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 17797  003946  0101               	movlb	1	; () banked
 17798  003948  5914               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 17799  00394A  A0D8               	btfss	status,0,c
 17800  00394C  D00E               	goto	l1342
 17801                           
 17802                           ; BSR set to: 1
 17803  00394E  0101               	movlb	1	; () banked
 17804  003950  5115               	movf	___ftdiv@f2& (0+255),w,b
 17805  003952  0101               	movlb	1	; () banked
 17806  003954  5F12               	subwf	___ftdiv@f1& (0+255),f,b
 17807  003956  0101               	movlb	1	; () banked
 17808  003958  5116               	movf	(___ftdiv@f2+1)& (0+255),w,b
 17809  00395A  0101               	movlb	1	; () banked
 17810  00395C  5B13               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 17811  00395E  0101               	movlb	1	; () banked
 17812  003960  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 17813  003962  0101               	movlb	1	; () banked
 17814  003964  5B14               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 17815                           
 17816                           ; BSR set to: 1
 17817  003966  0101               	movlb	1	; () banked
 17818  003968  811C               	bsf	___ftdiv@f3& (0+255),0,b
 17819  00396A                     l1342:
 17820                           
 17821                           ; BSR set to: 1
 17822  00396A  0101               	movlb	1	; () banked
 17823  00396C  90D8               	bcf	status,0,c
 17824  00396E  3712               	rlcf	___ftdiv@f1& (0+255),f,b
 17825  003970  3713               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 17826  003972  3714               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 17827                           
 17828                           ; BSR set to: 1
 17829  003974  0101               	movlb	1	; () banked
 17830  003976  2F1B               	decfsz	___ftdiv@cntr& (0+255),f,b
 17831  003978  D7D7               	goto	l9357
 17832                           
 17833                           ; BSR set to: 1
 17834                           
 17835                           ; BSR set to: 1
 17836  00397A  C11C  F100         	movff	___ftdiv@f3,___ftpack@arg
 17837  00397E  C11D  F101         	movff	___ftdiv@f3+1,___ftpack@arg+1
 17838  003982  C11E  F102         	movff	___ftdiv@f3+2,___ftpack@arg+2
 17839  003986  C11F  F103         	movff	___ftdiv@exp,___ftpack@exp
 17840  00398A  C120  F104         	movff	___ftdiv@sign,___ftpack@sign
 17841  00398E  EC80  F021         	call	___ftpack	;wreg free
 17842  003992  C100  F112         	movff	?___ftpack,?___ftdiv
 17843  003996  C101  F113         	movff	?___ftpack+1,?___ftdiv+1
 17844  00399A  C102  F114         	movff	?___ftpack+2,?___ftdiv+2
 17845  00399E  0012               	return	
 17846  0039A0                     __end_of___ftdiv:
 17847                           	opt stack 0
 17848                           tblptru	equ	0xFF8
 17849                           tblptrh	equ	0xFF7
 17850                           tblptrl	equ	0xFF6
 17851                           tablat	equ	0xFF5
 17852                           prodh	equ	0xFF4
 17853                           prodl	equ	0xFF3
 17854                           intcon	equ	0xFF2
 17855                           postinc0	equ	0xFEE
 17856                           wreg	equ	0xFE8
 17857                           postdec1	equ	0xFE5
 17858                           fsr1l	equ	0xFE1
 17859                           indf2	equ	0xFDF
 17860                           postinc2	equ	0xFDE
 17861                           postdec2	equ	0xFDD
 17862                           plusw2	equ	0xFDB
 17863                           fsr2h	equ	0xFDA
 17864                           fsr2l	equ	0xFD9
 17865                           status	equ	0xFD8
 17866                           
 17867 ;; *************** function ___ftadd *****************
 17868 ;; Defined at:
 17869 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 17870 ;; Parameters:    Size  Location     Type
 17871 ;;  f1              3   45[BANK1 ] float 
 17872 ;;  f2              3   48[BANK1 ] float 
 17873 ;; Auto vars:     Size  Location     Type
 17874 ;;  exp1            1   56[BANK1 ] unsigned char 
 17875 ;;  exp2            1   55[BANK1 ] unsigned char 
 17876 ;;  sign            1   54[BANK1 ] unsigned char 
 17877 ;; Return value:  Size  Location     Type
 17878 ;;                  3   45[BANK1 ] float 
 17879 ;; Registers used:
 17880 ;;		wreg, status,2, status,0, cstack
 17881 ;; Tracked objects:
 17882 ;;		On entry : 0/0
 17883 ;;		On exit  : 0/0
 17884 ;;		Unchanged: 0/0
 17885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17886 ;;      Params:         0       0       6       0       0       0       0
 17887 ;;      Locals:         0       0       3       0       0       0       0
 17888 ;;      Temps:          0       0       3       0       0       0       0
 17889 ;;      Totals:         0       0      12       0       0       0       0
 17890 ;;Total ram usage:       12 bytes
 17891 ;; Hardware stack levels used:    1
 17892 ;; Hardware stack levels required when called:   13
 17893 ;; This function calls:
 17894 ;;		___ftpack
 17895 ;; This function is called by:
 17896 ;;		_longPressENTER
 17897 ;;		_printf
 17898 ;;		___ftsub
 17899 ;; This function uses a non-reentrant model
 17900 ;;
 17901                           
 17902                           	psect	text74
 17903  002400                     __ptext74:
 17904                           	opt stack 0
 17905  002400                     ___ftadd:
 17906                           	opt stack 13
 17907                           
 17908                           ;incstack = 0
 17909  002400  C12F  F133         	movff	___ftadd@f1+2,??___ftadd
 17910  002404  0101               	movlb	1	; () banked
 17911  002406  6B34               	clrf	(??___ftadd+1)& (0+255),b
 17912  002408  6B35               	clrf	(??___ftadd+2)& (0+255),b
 17913  00240A  0101               	movlb	1	; () banked
 17914  00240C  352E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 17915  00240E  0101               	movlb	1	; () banked
 17916  002410  3733               	rlcf	??___ftadd& (0+255),f,b
 17917  002412  E301               	bnc	u13561
 17918  002414  8134               	bsf	(??___ftadd+1)& (0+255),0,b
 17919  002416                     u13561:
 17920  002416  0101               	movlb	1	; () banked
 17921  002418  5133               	movf	??___ftadd& (0+255),w,b
 17922  00241A  0101               	movlb	1	; () banked
 17923  00241C  6F38               	movwf	___ftadd@exp1& (0+255),b
 17924  00241E  C132  F133         	movff	___ftadd@f2+2,??___ftadd
 17925  002422  0101               	movlb	1	; () banked
 17926  002424  6B34               	clrf	(??___ftadd+1)& (0+255),b
 17927  002426  6B35               	clrf	(??___ftadd+2)& (0+255),b
 17928  002428  0101               	movlb	1	; () banked
 17929  00242A  3531               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 17930  00242C  0101               	movlb	1	; () banked
 17931  00242E  3733               	rlcf	??___ftadd& (0+255),f,b
 17932  002430  E301               	bnc	u13571
 17933  002432  8134               	bsf	(??___ftadd+1)& (0+255),0,b
 17934  002434                     u13571:
 17935  002434  0101               	movlb	1	; () banked
 17936  002436  5133               	movf	??___ftadd& (0+255),w,b
 17937  002438  0101               	movlb	1	; () banked
 17938  00243A  6F37               	movwf	___ftadd@exp2& (0+255),b
 17939                           
 17940                           ; BSR set to: 1
 17941  00243C  0101               	movlb	1	; () banked
 17942  00243E  5138               	movf	___ftadd@exp1& (0+255),w,b
 17943  002440  0101               	movlb	1	; () banked
 17944  002442  B4D8               	btfsc	status,2,c
 17945  002444  D011               	goto	l1307
 17946                           
 17947                           ; BSR set to: 1
 17948  002446  0101               	movlb	1	; () banked
 17949  002448  5137               	movf	___ftadd@exp2& (0+255),w,b
 17950  00244A  0101               	movlb	1	; () banked
 17951  00244C  5D38               	subwf	___ftadd@exp1& (0+255),w,b
 17952  00244E  B0D8               	btfsc	status,0,c
 17953  002450  D012               	goto	l9263
 17954                           
 17955                           ; BSR set to: 1
 17956  002452  0101               	movlb	1	; () banked
 17957  002454  5138               	movf	___ftadd@exp1& (0+255),w,b
 17958  002456  0800               	sublw	0
 17959  002458  0101               	movlb	1	; () banked
 17960  00245A  2537               	addwf	___ftadd@exp2& (0+255),w,b
 17961  00245C  0101               	movlb	1	; () banked
 17962  00245E  6F33               	movwf	??___ftadd& (0+255),b
 17963  002460  0E18               	movlw	24
 17964  002462  0101               	movlb	1	; () banked
 17965  002464  6533               	cpfsgt	??___ftadd& (0+255),b
 17966  002466  D007               	goto	l9263
 17967  002468                     l1307:
 17968                           
 17969                           ; BSR set to: 1
 17970  002468  C130  F12D         	movff	___ftadd@f2,?___ftadd
 17971  00246C  C131  F12E         	movff	___ftadd@f2+1,?___ftadd+1
 17972  002470  C132  F12F         	movff	___ftadd@f2+2,?___ftadd+2
 17973  002474  0012               	return	
 17974  002476                     l9263:
 17975                           
 17976                           ; BSR set to: 1
 17977  002476  0101               	movlb	1	; () banked
 17978  002478  5137               	movf	___ftadd@exp2& (0+255),w,b
 17979  00247A  0101               	movlb	1	; () banked
 17980  00247C  B4D8               	btfsc	status,2,c
 17981  00247E  D011               	goto	l1311
 17982                           
 17983                           ; BSR set to: 1
 17984  002480  0101               	movlb	1	; () banked
 17985  002482  5138               	movf	___ftadd@exp1& (0+255),w,b
 17986  002484  0101               	movlb	1	; () banked
 17987  002486  5D37               	subwf	___ftadd@exp2& (0+255),w,b
 17988  002488  B0D8               	btfsc	status,0,c
 17989  00248A  D012               	goto	l9269
 17990                           
 17991                           ; BSR set to: 1
 17992  00248C  0101               	movlb	1	; () banked
 17993  00248E  5137               	movf	___ftadd@exp2& (0+255),w,b
 17994  002490  0800               	sublw	0
 17995  002492  0101               	movlb	1	; () banked
 17996  002494  2538               	addwf	___ftadd@exp1& (0+255),w,b
 17997  002496  0101               	movlb	1	; () banked
 17998  002498  6F33               	movwf	??___ftadd& (0+255),b
 17999  00249A  0E18               	movlw	24
 18000  00249C  0101               	movlb	1	; () banked
 18001  00249E  6533               	cpfsgt	??___ftadd& (0+255),b
 18002  0024A0  D007               	goto	l9269
 18003  0024A2                     l1311:
 18004                           
 18005                           ; BSR set to: 1
 18006  0024A2  C12D  F12D         	movff	___ftadd@f1,?___ftadd
 18007  0024A6  C12E  F12E         	movff	___ftadd@f1+1,?___ftadd+1
 18008  0024AA  C12F  F12F         	movff	___ftadd@f1+2,?___ftadd+2
 18009  0024AE  0012               	return	
 18010  0024B0                     l9269:
 18011                           
 18012                           ; BSR set to: 1
 18013  0024B0  0E06               	movlw	6
 18014  0024B2  0101               	movlb	1	; () banked
 18015  0024B4  6F36               	movwf	___ftadd@sign& (0+255),b
 18016                           
 18017                           ; BSR set to: 1
 18018  0024B6  0101               	movlb	1	; () banked
 18019  0024B8  AF2F               	btfss	(___ftadd@f1+2)& (0+255),7,b
 18020  0024BA  D002               	goto	l9275
 18021                           
 18022                           ; BSR set to: 1
 18023  0024BC  0101               	movlb	1	; () banked
 18024  0024BE  8F36               	bsf	___ftadd@sign& (0+255),7,b
 18025  0024C0                     l9275:
 18026                           
 18027                           ; BSR set to: 1
 18028  0024C0  0101               	movlb	1	; () banked
 18029  0024C2  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
 18030  0024C4  D002               	goto	l1313
 18031                           
 18032                           ; BSR set to: 1
 18033  0024C6  0101               	movlb	1	; () banked
 18034  0024C8  8D36               	bsf	___ftadd@sign& (0+255),6,b
 18035  0024CA                     l1313:
 18036                           
 18037                           ; BSR set to: 1
 18038  0024CA  0101               	movlb	1	; () banked
 18039  0024CC  8F2E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 18040                           
 18041                           ; BSR set to: 1
 18042  0024CE  0EFF               	movlw	255
 18043  0024D0  0101               	movlb	1	; () banked
 18044  0024D2  172D               	andwf	___ftadd@f1& (0+255),f,b
 18045  0024D4  0EFF               	movlw	255
 18046  0024D6  0101               	movlb	1	; () banked
 18047  0024D8  172E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 18048  0024DA  0E00               	movlw	0
 18049  0024DC  0101               	movlb	1	; () banked
 18050  0024DE  172F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 18051  0024E0  0101               	movlb	1	; () banked
 18052  0024E2  8F31               	bsf	(___ftadd@f2+1)& (0+255),7,b
 18053                           
 18054                           ; BSR set to: 1
 18055  0024E4  0EFF               	movlw	255
 18056  0024E6  0101               	movlb	1	; () banked
 18057  0024E8  1730               	andwf	___ftadd@f2& (0+255),f,b
 18058  0024EA  0EFF               	movlw	255
 18059  0024EC  0101               	movlb	1	; () banked
 18060  0024EE  1731               	andwf	(___ftadd@f2+1)& (0+255),f,b
 18061  0024F0  0E00               	movlw	0
 18062  0024F2  0101               	movlb	1	; () banked
 18063  0024F4  1732               	andwf	(___ftadd@f2+2)& (0+255),f,b
 18064                           
 18065                           ; BSR set to: 1
 18066  0024F6  0101               	movlb	1	; () banked
 18067  0024F8  5137               	movf	___ftadd@exp2& (0+255),w,b
 18068  0024FA  0101               	movlb	1	; () banked
 18069  0024FC  5D38               	subwf	___ftadd@exp1& (0+255),w,b
 18070  0024FE  B0D8               	btfsc	status,0,c
 18071  002500  D025               	goto	l9295
 18072  002502                     l9285:
 18073                           
 18074                           ; BSR set to: 1
 18075  002502  0101               	movlb	1	; () banked
 18076  002504  90D8               	bcf	status,0,c
 18077  002506  3730               	rlcf	___ftadd@f2& (0+255),f,b
 18078  002508  3731               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 18079  00250A  3732               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 18080  00250C  0101               	movlb	1	; () banked
 18081  00250E  0737               	decf	___ftadd@exp2& (0+255),f,b
 18082                           
 18083                           ; BSR set to: 1
 18084  002510  0101               	movlb	1	; () banked
 18085  002512  5138               	movf	___ftadd@exp1& (0+255),w,b
 18086  002514  0101               	movlb	1	; () banked
 18087  002516  1937               	xorwf	___ftadd@exp2& (0+255),w,b
 18088  002518  B4D8               	btfsc	status,2,c
 18089  00251A  D011               	goto	l9293
 18090                           
 18091                           ; BSR set to: 1
 18092  00251C  0101               	movlb	1	; () banked
 18093  00251E  0736               	decf	___ftadd@sign& (0+255),f,b
 18094  002520  C136  F133         	movff	___ftadd@sign,??___ftadd
 18095  002524  0E07               	movlw	7
 18096  002526  0101               	movlb	1	; () banked
 18097  002528  1733               	andwf	??___ftadd& (0+255),f,b
 18098  00252A  B4D8               	btfsc	status,2,c
 18099  00252C  D008               	goto	l9293
 18100  00252E  D7E9               	goto	l9285
 18101  002530                     l9291:
 18102                           
 18103                           ; BSR set to: 1
 18104  002530  0101               	movlb	1	; () banked
 18105  002532  90D8               	bcf	status,0,c
 18106  002534  332F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 18107  002536  332E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 18108  002538  332D               	rrcf	___ftadd@f1& (0+255),f,b
 18109  00253A  0101               	movlb	1	; () banked
 18110  00253C  2B38               	incf	___ftadd@exp1& (0+255),f,b
 18111  00253E                     l9293:
 18112                           
 18113                           ; BSR set to: 1
 18114  00253E  0101               	movlb	1	; () banked
 18115  002540  5137               	movf	___ftadd@exp2& (0+255),w,b
 18116  002542  0101               	movlb	1	; () banked
 18117  002544  1938               	xorwf	___ftadd@exp1& (0+255),w,b
 18118  002546  B4D8               	btfsc	status,2,c
 18119  002548  D02B               	goto	l1322
 18120  00254A  D7F2               	goto	l9291
 18121  00254C                     l9295:
 18122                           
 18123                           ; BSR set to: 1
 18124  00254C  0101               	movlb	1	; () banked
 18125  00254E  5138               	movf	___ftadd@exp1& (0+255),w,b
 18126  002550  0101               	movlb	1	; () banked
 18127  002552  5D37               	subwf	___ftadd@exp2& (0+255),w,b
 18128  002554  B0D8               	btfsc	status,0,c
 18129  002556  D024               	goto	l1322
 18130  002558                     l9297:
 18131                           
 18132                           ; BSR set to: 1
 18133  002558  0101               	movlb	1	; () banked
 18134  00255A  90D8               	bcf	status,0,c
 18135  00255C  372D               	rlcf	___ftadd@f1& (0+255),f,b
 18136  00255E  372E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 18137  002560  372F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 18138  002562  0101               	movlb	1	; () banked
 18139  002564  0738               	decf	___ftadd@exp1& (0+255),f,b
 18140                           
 18141                           ; BSR set to: 1
 18142  002566  0101               	movlb	1	; () banked
 18143  002568  5138               	movf	___ftadd@exp1& (0+255),w,b
 18144  00256A  0101               	movlb	1	; () banked
 18145  00256C  1937               	xorwf	___ftadd@exp2& (0+255),w,b
 18146  00256E  B4D8               	btfsc	status,2,c
 18147  002570  D011               	goto	l9305
 18148                           
 18149                           ; BSR set to: 1
 18150  002572  0101               	movlb	1	; () banked
 18151  002574  0736               	decf	___ftadd@sign& (0+255),f,b
 18152  002576  C136  F133         	movff	___ftadd@sign,??___ftadd
 18153  00257A  0E07               	movlw	7
 18154  00257C  0101               	movlb	1	; () banked
 18155  00257E  1733               	andwf	??___ftadd& (0+255),f,b
 18156  002580  B4D8               	btfsc	status,2,c
 18157  002582  D008               	goto	l9305
 18158  002584  D7E9               	goto	l9297
 18159  002586                     l9303:
 18160                           
 18161                           ; BSR set to: 1
 18162  002586  0101               	movlb	1	; () banked
 18163  002588  90D8               	bcf	status,0,c
 18164  00258A  3332               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 18165  00258C  3331               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 18166  00258E  3330               	rrcf	___ftadd@f2& (0+255),f,b
 18167  002590  0101               	movlb	1	; () banked
 18168  002592  2B37               	incf	___ftadd@exp2& (0+255),f,b
 18169  002594                     l9305:
 18170                           
 18171                           ; BSR set to: 1
 18172  002594  0101               	movlb	1	; () banked
 18173  002596  5137               	movf	___ftadd@exp2& (0+255),w,b
 18174  002598  0101               	movlb	1	; () banked
 18175  00259A  1938               	xorwf	___ftadd@exp1& (0+255),w,b
 18176  00259C  A4D8               	btfss	status,2,c
 18177  00259E  D7F3               	goto	l9303
 18178  0025A0                     l1322:
 18179                           
 18180                           ; BSR set to: 1
 18181  0025A0  0101               	movlb	1	; () banked
 18182  0025A2  AF36               	btfss	___ftadd@sign& (0+255),7,b
 18183  0025A4  D012               	goto	l1331
 18184                           
 18185                           ; BSR set to: 1
 18186  0025A6  0EFF               	movlw	255
 18187  0025A8  0101               	movlb	1	; () banked
 18188  0025AA  1B2D               	xorwf	___ftadd@f1& (0+255),f,b
 18189  0025AC  0EFF               	movlw	255
 18190  0025AE  0101               	movlb	1	; () banked
 18191  0025B0  1B2E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 18192  0025B2  0EFF               	movlw	255
 18193  0025B4  0101               	movlb	1	; () banked
 18194  0025B6  1B2F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 18195  0025B8  0E01               	movlw	1
 18196  0025BA  0101               	movlb	1	; () banked
 18197  0025BC  272D               	addwf	___ftadd@f1& (0+255),f,b
 18198  0025BE  0E00               	movlw	0
 18199  0025C0  0101               	movlb	1	; () banked
 18200  0025C2  232E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 18201  0025C4  0E00               	movlw	0
 18202  0025C6  0101               	movlb	1	; () banked
 18203  0025C8  232F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 18204  0025CA                     l1331:
 18205                           
 18206                           ; BSR set to: 1
 18207  0025CA  0101               	movlb	1	; () banked
 18208  0025CC  AD36               	btfss	___ftadd@sign& (0+255),6,b
 18209  0025CE  D012               	goto	l9311
 18210                           
 18211                           ; BSR set to: 1
 18212  0025D0  0EFF               	movlw	255
 18213  0025D2  0101               	movlb	1	; () banked
 18214  0025D4  1B30               	xorwf	___ftadd@f2& (0+255),f,b
 18215  0025D6  0EFF               	movlw	255
 18216  0025D8  0101               	movlb	1	; () banked
 18217  0025DA  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 18218  0025DC  0EFF               	movlw	255
 18219  0025DE  0101               	movlb	1	; () banked
 18220  0025E0  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 18221  0025E2  0E01               	movlw	1
 18222  0025E4  0101               	movlb	1	; () banked
 18223  0025E6  2730               	addwf	___ftadd@f2& (0+255),f,b
 18224  0025E8  0E00               	movlw	0
 18225  0025EA  0101               	movlb	1	; () banked
 18226  0025EC  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18227  0025EE  0E00               	movlw	0
 18228  0025F0  0101               	movlb	1	; () banked
 18229  0025F2  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18230  0025F4                     l9311:
 18231                           
 18232                           ; BSR set to: 1
 18233  0025F4  0E00               	movlw	0
 18234  0025F6  0101               	movlb	1	; () banked
 18235  0025F8  6F36               	movwf	___ftadd@sign& (0+255),b
 18236                           
 18237                           ; BSR set to: 1
 18238  0025FA  0101               	movlb	1	; () banked
 18239  0025FC  512D               	movf	___ftadd@f1& (0+255),w,b
 18240  0025FE  0101               	movlb	1	; () banked
 18241  002600  2730               	addwf	___ftadd@f2& (0+255),f,b
 18242  002602  0101               	movlb	1	; () banked
 18243  002604  512E               	movf	(___ftadd@f1+1)& (0+255),w,b
 18244  002606  0101               	movlb	1	; () banked
 18245  002608  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18246  00260A  0101               	movlb	1	; () banked
 18247  00260C  512F               	movf	(___ftadd@f1+2)& (0+255),w,b
 18248  00260E  0101               	movlb	1	; () banked
 18249  002610  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18250                           
 18251                           ; BSR set to: 1
 18252  002612  0101               	movlb	1	; () banked
 18253  002614  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
 18254  002616  D015               	goto	l9321
 18255                           
 18256                           ; BSR set to: 1
 18257  002618  0EFF               	movlw	255
 18258  00261A  0101               	movlb	1	; () banked
 18259  00261C  1B30               	xorwf	___ftadd@f2& (0+255),f,b
 18260  00261E  0EFF               	movlw	255
 18261  002620  0101               	movlb	1	; () banked
 18262  002622  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 18263  002624  0EFF               	movlw	255
 18264  002626  0101               	movlb	1	; () banked
 18265  002628  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 18266  00262A  0E01               	movlw	1
 18267  00262C  0101               	movlb	1	; () banked
 18268  00262E  2730               	addwf	___ftadd@f2& (0+255),f,b
 18269  002630  0E00               	movlw	0
 18270  002632  0101               	movlb	1	; () banked
 18271  002634  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18272  002636  0E00               	movlw	0
 18273  002638  0101               	movlb	1	; () banked
 18274  00263A  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18275                           
 18276                           ; BSR set to: 1
 18277  00263C  0E01               	movlw	1
 18278  00263E  0101               	movlb	1	; () banked
 18279  002640  6F36               	movwf	___ftadd@sign& (0+255),b
 18280  002642                     l9321:
 18281                           
 18282                           ; BSR set to: 1
 18283  002642  C130  F100         	movff	___ftadd@f2,___ftpack@arg
 18284  002646  C131  F101         	movff	___ftadd@f2+1,___ftpack@arg+1
 18285  00264A  C132  F102         	movff	___ftadd@f2+2,___ftpack@arg+2
 18286  00264E  C138  F103         	movff	___ftadd@exp1,___ftpack@exp
 18287  002652  C136  F104         	movff	___ftadd@sign,___ftpack@sign
 18288  002656  EC80  F021         	call	___ftpack	;wreg free
 18289  00265A  C100  F12D         	movff	?___ftpack,?___ftadd
 18290  00265E  C101  F12E         	movff	?___ftpack+1,?___ftadd+1
 18291  002662  C102  F12F         	movff	?___ftpack+2,?___ftadd+2
 18292  002666  0012               	return	
 18293  002668                     __end_of___ftadd:
 18294                           	opt stack 0
 18295                           tblptru	equ	0xFF8
 18296                           tblptrh	equ	0xFF7
 18297                           tblptrl	equ	0xFF6
 18298                           tablat	equ	0xFF5
 18299                           prodh	equ	0xFF4
 18300                           prodl	equ	0xFF3
 18301                           intcon	equ	0xFF2
 18302                           postinc0	equ	0xFEE
 18303                           wreg	equ	0xFE8
 18304                           postdec1	equ	0xFE5
 18305                           fsr1l	equ	0xFE1
 18306                           indf2	equ	0xFDF
 18307                           postinc2	equ	0xFDE
 18308                           postdec2	equ	0xFDD
 18309                           plusw2	equ	0xFDB
 18310                           fsr2h	equ	0xFDA
 18311                           fsr2l	equ	0xFD9
 18312                           status	equ	0xFD8
 18313                           
 18314 ;; *************** function ___ftpack *****************
 18315 ;; Defined at:
 18316 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 18317 ;; Parameters:    Size  Location     Type
 18318 ;;  arg             3    0[BANK1 ] unsigned um
 18319 ;;  exp             1    3[BANK1 ] unsigned char 
 18320 ;;  sign            1    4[BANK1 ] unsigned char 
 18321 ;; Auto vars:     Size  Location     Type
 18322 ;;		None
 18323 ;; Return value:  Size  Location     Type
 18324 ;;                  3    0[BANK1 ] float 
 18325 ;; Registers used:
 18326 ;;		wreg, status,2, status,0
 18327 ;; Tracked objects:
 18328 ;;		On entry : 0/0
 18329 ;;		On exit  : 0/0
 18330 ;;		Unchanged: 0/0
 18331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18332 ;;      Params:         0       0       5       0       0       0       0
 18333 ;;      Locals:         0       0       0       0       0       0       0
 18334 ;;      Temps:          0       0       3       0       0       0       0
 18335 ;;      Totals:         0       0       8       0       0       0       0
 18336 ;;Total ram usage:        8 bytes
 18337 ;; Hardware stack levels used:    1
 18338 ;; Hardware stack levels required when called:   12
 18339 ;; This function calls:
 18340 ;;		Nothing
 18341 ;; This function is called by:
 18342 ;;		___altoft
 18343 ;;		___ftadd
 18344 ;;		___ftdiv
 18345 ;;		___ftmul
 18346 ;;		___lltoft
 18347 ;; This function uses a non-reentrant model
 18348 ;;
 18349                           
 18350                           	psect	text75
 18351  004300                     __ptext75:
 18352                           	opt stack 0
 18353  004300                     ___ftpack:
 18354                           	opt stack 15
 18355                           
 18356                           ;incstack = 0
 18357  004300  0101               	movlb	1	; () banked
 18358  004302  5103               	movf	___ftpack@exp& (0+255),w,b
 18359  004304  0101               	movlb	1	; () banked
 18360  004306  B4D8               	btfsc	status,2,c
 18361  004308  D008               	goto	l9199
 18362                           
 18363                           ; BSR set to: 1
 18364  00430A  0101               	movlb	1	; () banked
 18365  00430C  5100               	movf	___ftpack@arg& (0+255),w,b
 18366  00430E  0101               	movlb	1	; () banked
 18367  004310  1101               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 18368  004312  0101               	movlb	1	; () banked
 18369  004314  1102               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 18370  004316  A4D8               	btfss	status,2,c
 18371  004318  D011               	goto	l9205
 18372  00431A                     l9199:
 18373                           
 18374                           ; BSR set to: 1
 18375  00431A  0E00               	movlw	0
 18376  00431C  0101               	movlb	1	; () banked
 18377  00431E  6F00               	movwf	?___ftpack& (0+255),b
 18378  004320  0E00               	movlw	0
 18379  004322  0101               	movlb	1	; () banked
 18380  004324  6F01               	movwf	(?___ftpack+1)& (0+255),b
 18381  004326  0E00               	movlw	0
 18382  004328  0101               	movlb	1	; () banked
 18383  00432A  6F02               	movwf	(?___ftpack+2)& (0+255),b
 18384                           
 18385                           ; BSR set to: 1
 18386  00432C  0012               	return	
 18387  00432E                     l9203:
 18388                           
 18389                           ; BSR set to: 1
 18390  00432E  0101               	movlb	1	; () banked
 18391  004330  2B03               	incf	___ftpack@exp& (0+255),f,b
 18392  004332  0101               	movlb	1	; () banked
 18393  004334  90D8               	bcf	status,0,c
 18394  004336  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 18395  004338  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 18396  00433A  3300               	rrcf	___ftpack@arg& (0+255),f,b
 18397  00433C                     l9205:
 18398                           
 18399                           ; BSR set to: 1
 18400  00433C  0E00               	movlw	0
 18401  00433E  0101               	movlb	1	; () banked
 18402  004340  1500               	andwf	___ftpack@arg& (0+255),w,b
 18403  004342  0101               	movlb	1	; () banked
 18404  004344  6F05               	movwf	??___ftpack& (0+255),b
 18405  004346  0E00               	movlw	0
 18406  004348  0101               	movlb	1	; () banked
 18407  00434A  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
 18408  00434C  0101               	movlb	1	; () banked
 18409  00434E  6F06               	movwf	(??___ftpack+1)& (0+255),b
 18410  004350  0EFE               	movlw	254
 18411  004352  0101               	movlb	1	; () banked
 18412  004354  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
 18413  004356  0101               	movlb	1	; () banked
 18414  004358  6F07               	movwf	(??___ftpack+2)& (0+255),b
 18415  00435A  0101               	movlb	1	; () banked
 18416  00435C  5105               	movf	??___ftpack& (0+255),w,b
 18417  00435E  0101               	movlb	1	; () banked
 18418  004360  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
 18419  004362  0101               	movlb	1	; () banked
 18420  004364  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
 18421  004366  B4D8               	btfsc	status,2,c
 18422  004368  D011               	goto	l9211
 18423  00436A  D7E1               	goto	l9203
 18424  00436C                     l9207:
 18425                           
 18426                           ; BSR set to: 1
 18427  00436C  0101               	movlb	1	; () banked
 18428  00436E  2B03               	incf	___ftpack@exp& (0+255),f,b
 18429                           
 18430                           ; BSR set to: 1
 18431  004370  0E01               	movlw	1
 18432  004372  0101               	movlb	1	; () banked
 18433  004374  2700               	addwf	___ftpack@arg& (0+255),f,b
 18434  004376  0E00               	movlw	0
 18435  004378  0101               	movlb	1	; () banked
 18436  00437A  2301               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 18437  00437C  0E00               	movlw	0
 18438  00437E  0101               	movlb	1	; () banked
 18439  004380  2302               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 18440  004382  0101               	movlb	1	; () banked
 18441  004384  90D8               	bcf	status,0,c
 18442  004386  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 18443  004388  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 18444  00438A  3300               	rrcf	___ftpack@arg& (0+255),f,b
 18445  00438C                     l9211:
 18446                           
 18447                           ; BSR set to: 1
 18448  00438C  0E00               	movlw	0
 18449  00438E  0101               	movlb	1	; () banked
 18450  004390  1500               	andwf	___ftpack@arg& (0+255),w,b
 18451  004392  0101               	movlb	1	; () banked
 18452  004394  6F05               	movwf	??___ftpack& (0+255),b
 18453  004396  0E00               	movlw	0
 18454  004398  0101               	movlb	1	; () banked
 18455  00439A  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
 18456  00439C  0101               	movlb	1	; () banked
 18457  00439E  6F06               	movwf	(??___ftpack+1)& (0+255),b
 18458  0043A0  0EFF               	movlw	255
 18459  0043A2  0101               	movlb	1	; () banked
 18460  0043A4  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
 18461  0043A6  0101               	movlb	1	; () banked
 18462  0043A8  6F07               	movwf	(??___ftpack+2)& (0+255),b
 18463  0043AA  0101               	movlb	1	; () banked
 18464  0043AC  5105               	movf	??___ftpack& (0+255),w,b
 18465  0043AE  0101               	movlb	1	; () banked
 18466  0043B0  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
 18467  0043B2  0101               	movlb	1	; () banked
 18468  0043B4  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
 18469  0043B6  B4D8               	btfsc	status,2,c
 18470  0043B8  D008               	goto	l9215
 18471  0043BA  D7D8               	goto	l9207
 18472  0043BC                     l9213:
 18473                           
 18474                           ; BSR set to: 1
 18475  0043BC  0101               	movlb	1	; () banked
 18476  0043BE  0703               	decf	___ftpack@exp& (0+255),f,b
 18477  0043C0  0101               	movlb	1	; () banked
 18478  0043C2  90D8               	bcf	status,0,c
 18479  0043C4  3700               	rlcf	___ftpack@arg& (0+255),f,b
 18480  0043C6  3701               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 18481  0043C8  3702               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 18482  0043CA                     l9215:
 18483                           
 18484                           ; BSR set to: 1
 18485  0043CA  0101               	movlb	1	; () banked
 18486  0043CC  BF01               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 18487  0043CE  D004               	goto	l1284
 18488                           
 18489                           ; BSR set to: 1
 18490  0043D0  0E02               	movlw	2
 18491  0043D2  0101               	movlb	1	; () banked
 18492  0043D4  6103               	cpfslt	___ftpack@exp& (0+255),b
 18493  0043D6  D7F2               	goto	l9213
 18494  0043D8                     l1284:
 18495                           
 18496                           ; BSR set to: 1
 18497  0043D8  0101               	movlb	1	; () banked
 18498  0043DA  B103               	btfsc	___ftpack@exp& (0+255),0,b
 18499  0043DC  D002               	goto	l9221
 18500                           
 18501                           ; BSR set to: 1
 18502  0043DE  0101               	movlb	1	; () banked
 18503  0043E0  9F01               	bcf	(___ftpack@arg+1)& (0+255),7,b
 18504  0043E2                     l9221:
 18505                           
 18506                           ; BSR set to: 1
 18507  0043E2  0101               	movlb	1	; () banked
 18508  0043E4  90D8               	bcf	status,0,c
 18509  0043E6  3303               	rrcf	___ftpack@exp& (0+255),f,b
 18510  0043E8  0101               	movlb	1	; () banked
 18511  0043EA  5103               	movf	___ftpack@exp& (0+255),w,b
 18512  0043EC  0101               	movlb	1	; () banked
 18513  0043EE  1302               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 18514                           
 18515                           ; BSR set to: 1
 18516  0043F0  0101               	movlb	1	; () banked
 18517  0043F2  5104               	movf	___ftpack@sign& (0+255),w,b
 18518  0043F4  0101               	movlb	1	; () banked
 18519  0043F6  B4D8               	btfsc	status,2,c
 18520  0043F8  D002               	goto	l9227
 18521                           
 18522                           ; BSR set to: 1
 18523  0043FA  0101               	movlb	1	; () banked
 18524  0043FC  8F02               	bsf	(___ftpack@arg+2)& (0+255),7,b
 18525  0043FE                     l9227:
 18526                           
 18527                           ; BSR set to: 1
 18528  0043FE  C100  F100         	movff	___ftpack@arg,?___ftpack
 18529  004402  C101  F101         	movff	___ftpack@arg+1,?___ftpack+1
 18530  004406  C102  F102         	movff	___ftpack@arg+2,?___ftpack+2
 18531  00440A  0012               	return	
 18532  00440C                     __end_of___ftpack:
 18533                           	opt stack 0
 18534                           tblptru	equ	0xFF8
 18535                           tblptrh	equ	0xFF7
 18536                           tblptrl	equ	0xFF6
 18537                           tablat	equ	0xFF5
 18538                           prodh	equ	0xFF4
 18539                           prodl	equ	0xFF3
 18540                           intcon	equ	0xFF2
 18541                           postinc0	equ	0xFEE
 18542                           wreg	equ	0xFE8
 18543                           postdec1	equ	0xFE5
 18544                           fsr1l	equ	0xFE1
 18545                           indf2	equ	0xFDF
 18546                           postinc2	equ	0xFDE
 18547                           postdec2	equ	0xFDD
 18548                           plusw2	equ	0xFDB
 18549                           fsr2h	equ	0xFDA
 18550                           fsr2l	equ	0xFD9
 18551                           status	equ	0xFD8
 18552                           
 18553 ;; *************** function _longPressDOWN *****************
 18554 ;; Defined at:
 18555 ;;		line 219 in file "source/DisplayProtocol.h"
 18556 ;; Parameters:    Size  Location     Type
 18557 ;;		None
 18558 ;; Auto vars:     Size  Location     Type
 18559 ;;		None
 18560 ;; Return value:  Size  Location     Type
 18561 ;;                  1    wreg      void 
 18562 ;; Registers used:
 18563 ;;		wreg, status,2, status,0
 18564 ;; Tracked objects:
 18565 ;;		On entry : 0/0
 18566 ;;		On exit  : 0/0
 18567 ;;		Unchanged: 0/0
 18568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18569 ;;      Params:         0       0       0       0       0       0       0
 18570 ;;      Locals:         0       0       0       0       0       0       0
 18571 ;;      Temps:          0       0       0       0       0       0       0
 18572 ;;      Totals:         0       0       0       0       0       0       0
 18573 ;;Total ram usage:        0 bytes
 18574 ;; Hardware stack levels used:    1
 18575 ;; Hardware stack levels required when called:   12
 18576 ;; This function calls:
 18577 ;;		Nothing
 18578 ;; This function is called by:
 18579 ;;		_buttonChecking
 18580 ;; This function uses a non-reentrant model
 18581 ;;
 18582                           
 18583                           	psect	text76
 18584  006BB2                     __ptext76:
 18585                           	opt stack 0
 18586  006BB2                     _longPressDOWN:
 18587                           	opt stack 17
 18588                           
 18589                           ;DisplayProtocol.h: 220: if (!DOWNisLP) {
 18590                           
 18591                           ; BSR set to: 1
 18592                           ;incstack = 0
 18593  006BB2  5045               	movf	_DOWNisLP,w,c
 18594  006BB4  A4D8               	btfss	status,2,c
 18595  006BB6  0012               	return	
 18596                           
 18597                           ;DisplayProtocol.h: 221: DOWNisLP = 1;
 18598  006BB8  0E01               	movlw	1
 18599  006BBA  6E45               	movwf	_DOWNisLP,c
 18600                           
 18601                           ;DisplayProtocol.h: 222: if(actualScreen == 5) {
 18602  006BBC  0E05               	movlw	5
 18603  006BBE  0101               	movlb	1	; () banked
 18604  006BC0  19C3               	xorwf	_actualScreen& (0+255),w,b
 18605  006BC2  A4D8               	btfss	status,2,c
 18606  006BC4  0012               	return	
 18607                           
 18608                           ; BSR set to: 1
 18609                           ;DisplayProtocol.h: 223: if(menuSection == 2)
 18610  006BC6  0E02               	movlw	2
 18611  006BC8  0101               	movlb	1	; () banked
 18612  006BCA  19CA               	xorwf	_menuSection& (0+255),w,b
 18613  006BCC  A4D8               	btfss	status,2,c
 18614  006BCE  0012               	return	
 18615                           
 18616                           ; BSR set to: 1
 18617                           ;DisplayProtocol.h: 224: chanVals -= 10;
 18618  006BD0  0101               	movlb	1	; () banked
 18619  006BD2  0EF6               	movlw	246
 18620  006BD4  27BA               	addwf	_chanVals& (0+255),f,b
 18621  006BD6  0EFF               	movlw	255
 18622  006BD8  23BB               	addwfc	(_chanVals+1)& (0+255),f,b
 18623                           
 18624                           ; BSR set to: 1
 18625                           
 18626                           ; BSR set to: 1
 18627  006BDA  0012               	return	
 18628  006BDC                     __end_of_longPressDOWN:
 18629                           	opt stack 0
 18630                           tblptru	equ	0xFF8
 18631                           tblptrh	equ	0xFF7
 18632                           tblptrl	equ	0xFF6
 18633                           tablat	equ	0xFF5
 18634                           prodh	equ	0xFF4
 18635                           prodl	equ	0xFF3
 18636                           intcon	equ	0xFF2
 18637                           postinc0	equ	0xFEE
 18638                           wreg	equ	0xFE8
 18639                           postdec1	equ	0xFE5
 18640                           fsr1l	equ	0xFE1
 18641                           indf2	equ	0xFDF
 18642                           postinc2	equ	0xFDE
 18643                           postdec2	equ	0xFDD
 18644                           plusw2	equ	0xFDB
 18645                           fsr2h	equ	0xFDA
 18646                           fsr2l	equ	0xFD9
 18647                           status	equ	0xFD8
 18648                           
 18649 ;; *************** function _delay_ms *****************
 18650 ;; Defined at:
 18651 ;;		line 13 in file "source/../../delay.h"
 18652 ;; Parameters:    Size  Location     Type
 18653 ;;  del             2    0[BANK1 ] int 
 18654 ;; Auto vars:     Size  Location     Type
 18655 ;;  i               2    3[BANK1 ] int 
 18656 ;; Return value:  Size  Location     Type
 18657 ;;                  1    wreg      void 
 18658 ;; Registers used:
 18659 ;;		wreg, status,2, status,0
 18660 ;; Tracked objects:
 18661 ;;		On entry : 0/0
 18662 ;;		On exit  : 0/0
 18663 ;;		Unchanged: 0/0
 18664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18665 ;;      Params:         0       0       2       0       0       0       0
 18666 ;;      Locals:         0       0       2       0       0       0       0
 18667 ;;      Temps:          0       0       1       0       0       0       0
 18668 ;;      Totals:         0       0       5       0       0       0       0
 18669 ;;Total ram usage:        5 bytes
 18670 ;; Hardware stack levels used:    1
 18671 ;; Hardware stack levels required when called:   12
 18672 ;; This function calls:
 18673 ;;		Nothing
 18674 ;; This function is called by:
 18675 ;;		_buttonChecking
 18676 ;; This function uses a non-reentrant model
 18677 ;;
 18678                           
 18679                           	psect	text77
 18680  0067EA                     __ptext77:
 18681                           	opt stack 0
 18682  0067EA                     _delay_ms:
 18683                           	opt stack 17
 18684                           
 18685                           ;delay.h: 14: for(int i = 1;i <= del;i++)
 18686                           
 18687                           ;incstack = 0
 18688  0067EA  0E00               	movlw	0
 18689  0067EC  0101               	movlb	1	; () banked
 18690  0067EE  6F04               	movwf	(delay_ms@i+1)& (0+255),b
 18691  0067F0  0E01               	movlw	1
 18692  0067F2  6F03               	movwf	delay_ms@i& (0+255),b
 18693  0067F4  D00C               	goto	l102
 18694  0067F6                     l10371:
 18695                           
 18696                           ; BSR set to: 1
 18697                           ;delay.h: 15: _delay((unsigned long)((1)*(16000000/4000.0)));
 18698  0067F6  0E06               	movlw	6
 18699  0067F8  0101               	movlb	1	; () banked
 18700  0067FA  6F02               	movwf	??_delay_ms& (0+255),b
 18701  0067FC  0E30               	movlw	48
 18702  0067FE                     u17157:
 18703  0067FE  2EE8               	decfsz	wreg,f,c
 18704  006800  D7FE               	goto	u17157
 18705  006802  2F02               	decfsz	??_delay_ms& (0+255),f,b
 18706  006804  D7FC               	goto	u17157
 18707  006806  D000               	nop2	
 18708  006808  0101               	movlb	1	; () banked
 18709  00680A  4B03               	infsnz	delay_ms@i& (0+255),f,b
 18710  00680C  2B04               	incf	(delay_ms@i+1)& (0+255),f,b
 18711  00680E                     l102:
 18712                           
 18713                           ; BSR set to: 1
 18714  00680E  0101               	movlb	1	; () banked
 18715  006810  5103               	movf	delay_ms@i& (0+255),w,b
 18716  006812  0101               	movlb	1	; () banked
 18717  006814  5D00               	subwf	delay_ms@del& (0+255),w,b
 18718  006816  0101               	movlb	1	; () banked
 18719  006818  5101               	movf	(delay_ms@del+1)& (0+255),w,b
 18720  00681A  0A80               	xorlw	128
 18721  00681C  0101               	movlb	1	; () banked
 18722  00681E  6F02               	movwf	??_delay_ms& (0+255),b
 18723  006820  0101               	movlb	1	; () banked
 18724  006822  5104               	movf	(delay_ms@i+1)& (0+255),w,b
 18725  006824  0A80               	xorlw	128
 18726  006826  0101               	movlb	1	; () banked
 18727  006828  5902               	subwfb	??_delay_ms& (0+255),w,b
 18728  00682A  A0D8               	btfss	status,0,c
 18729  00682C  0012               	return	
 18730  00682E  D7E3               	goto	l10371
 18731  006830                     __end_of_delay_ms:
 18732                           	opt stack 0
 18733                           tblptru	equ	0xFF8
 18734                           tblptrh	equ	0xFF7
 18735                           tblptrl	equ	0xFF6
 18736                           tablat	equ	0xFF5
 18737                           prodh	equ	0xFF4
 18738                           prodl	equ	0xFF3
 18739                           intcon	equ	0xFF2
 18740                           postinc0	equ	0xFEE
 18741                           wreg	equ	0xFE8
 18742                           postdec1	equ	0xFE5
 18743                           fsr1l	equ	0xFE1
 18744                           indf2	equ	0xFDF
 18745                           postinc2	equ	0xFDE
 18746                           postdec2	equ	0xFDD
 18747                           plusw2	equ	0xFDB
 18748                           fsr2h	equ	0xFDA
 18749                           fsr2l	equ	0xFD9
 18750                           status	equ	0xFD8
 18751                           
 18752 ;; *************** function _UARTConfig *****************
 18753 ;; Defined at:
 18754 ;;		line 81 in file "source/UARTConfig.h"
 18755 ;; Parameters:    Size  Location     Type
 18756 ;;		None
 18757 ;; Auto vars:     Size  Location     Type
 18758 ;;		None
 18759 ;; Return value:  Size  Location     Type
 18760 ;;                  1    wreg      void 
 18761 ;; Registers used:
 18762 ;;		wreg, status,2
 18763 ;; Tracked objects:
 18764 ;;		On entry : 0/0
 18765 ;;		On exit  : 0/0
 18766 ;;		Unchanged: 0/0
 18767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18768 ;;      Params:         0       0       0       0       0       0       0
 18769 ;;      Locals:         0       0       0       0       0       0       0
 18770 ;;      Temps:          0       0       0       0       0       0       0
 18771 ;;      Totals:         0       0       0       0       0       0       0
 18772 ;;Total ram usage:        0 bytes
 18773 ;; Hardware stack levels used:    1
 18774 ;; Hardware stack levels required when called:   12
 18775 ;; This function calls:
 18776 ;;		Nothing
 18777 ;; This function is called by:
 18778 ;;		_main
 18779 ;; This function uses a non-reentrant model
 18780 ;;
 18781                           
 18782                           	psect	text78
 18783  006966                     __ptext78:
 18784                           	opt stack 0
 18785  006966                     _UARTConfig:
 18786                           	opt stack 18
 18787                           
 18788                           ;UARTConfig.h: 82: RCSTA1bits.SPEN = 0;
 18789                           
 18790                           ; BSR set to: 1
 18791                           ;incstack = 0
 18792  006966  9EAB               	bcf	4011,7,c	;volatile
 18793                           
 18794                           ;UARTConfig.h: 83: SPBRGH1 = 0;
 18795  006968  0E00               	movlw	0
 18796  00696A  6EB0               	movwf	4016,c	;volatile
 18797                           
 18798                           ;UARTConfig.h: 84: SPBRG1 = 34;
 18799  00696C  0E22               	movlw	34
 18800  00696E  6EAF               	movwf	4015,c	;volatile
 18801                           
 18802                           ;UARTConfig.h: 85: ANSELCbits.ANSC6 = 0;
 18803  006970  010F               	movlb	15	; () banked
 18804  006972  9D3A               	bcf	58,6,b	;volatile
 18805                           
 18806                           ; BSR set to: 15
 18807                           ;UARTConfig.h: 86: ANSELCbits.ANSC7 = 0;
 18808  006974  010F               	movlb	15	; () banked
 18809  006976  9F3A               	bcf	58,7,b	;volatile
 18810                           
 18811                           ; BSR set to: 15
 18812                           ;UARTConfig.h: 87: TRISCbits.TRISC6 = 1;
 18813  006978  8C94               	bsf	3988,6,c	;volatile
 18814                           
 18815                           ; BSR set to: 15
 18816                           ;UARTConfig.h: 88: TRISCbits.TRISC7 = 1;
 18817  00697A  8E94               	bsf	3988,7,c	;volatile
 18818                           
 18819                           ; BSR set to: 15
 18820                           ;UARTConfig.h: 89: TXSTA1bits.TX9 = 0;
 18821  00697C  9CAC               	bcf	4012,6,c	;volatile
 18822                           
 18823                           ; BSR set to: 15
 18824                           ;UARTConfig.h: 90: TXSTA1bits.SYNC = 0;
 18825  00697E  98AC               	bcf	4012,4,c	;volatile
 18826                           
 18827                           ; BSR set to: 15
 18828                           ;UARTConfig.h: 91: TXSTA1bits.SENDB = 0;
 18829  006980  96AC               	bcf	4012,3,c	;volatile
 18830                           
 18831                           ; BSR set to: 15
 18832                           ;UARTConfig.h: 92: TXSTA1bits.BRGH = 1;
 18833  006982  84AC               	bsf	4012,2,c	;volatile
 18834                           
 18835                           ; BSR set to: 15
 18836                           ;UARTConfig.h: 93: RCSTA1bits.RX9 = 0;
 18837  006984  9CAB               	bcf	4011,6,c	;volatile
 18838                           
 18839                           ; BSR set to: 15
 18840                           ;UARTConfig.h: 94: BAUDCON1bits.DTRXP = 0;
 18841  006986  9AB8               	bcf	4024,5,c	;volatile
 18842                           
 18843                           ; BSR set to: 15
 18844                           ;UARTConfig.h: 95: BAUDCON1bits.CKTXP = 0;
 18845  006988  98B8               	bcf	4024,4,c	;volatile
 18846                           
 18847                           ; BSR set to: 15
 18848                           ;UARTConfig.h: 96: BAUDCON1bits.BRG16 = 1;
 18849  00698A  86B8               	bsf	4024,3,c	;volatile
 18850                           
 18851                           ; BSR set to: 15
 18852                           ;UARTConfig.h: 97: BAUDCON1bits.WUE = 0;
 18853  00698C  92B8               	bcf	4024,1,c	;volatile
 18854                           
 18855                           ; BSR set to: 15
 18856                           ;UARTConfig.h: 98: BAUDCON1bits.ABDEN = 0;
 18857  00698E  90B8               	bcf	4024,0,c	;volatile
 18858                           
 18859                           ; BSR set to: 15
 18860                           ;UARTConfig.h: 99: RCSTA1bits.CREN = 1;
 18861  006990  88AB               	bsf	4011,4,c	;volatile
 18862                           
 18863                           ; BSR set to: 15
 18864                           ;UARTConfig.h: 100: TXSTA1bits.TXEN = 1;
 18865  006992  8AAC               	bsf	4012,5,c	;volatile
 18866                           
 18867                           ; BSR set to: 15
 18868                           ;UARTConfig.h: 101: IPR1bits.RC1IP = 0;
 18869  006994  9A9F               	bcf	3999,5,c	;volatile
 18870                           
 18871                           ; BSR set to: 15
 18872                           ;UARTConfig.h: 102: PIR1bits.RC1IF = 0;
 18873  006996  9A9E               	bcf	3998,5,c	;volatile
 18874                           
 18875                           ; BSR set to: 15
 18876                           ;UARTConfig.h: 103: PIE1bits.RC1IE = 1;
 18877  006998  8A9D               	bsf	3997,5,c	;volatile
 18878                           
 18879                           ; BSR set to: 15
 18880                           ;UARTConfig.h: 104: RCSTA1bits.SPEN = 1;
 18881  00699A  8EAB               	bsf	4011,7,c	;volatile
 18882                           
 18883                           ; BSR set to: 15
 18884  00699C  0012               	return		;funcret
 18885  00699E                     __end_of_UARTConfig:
 18886                           	opt stack 0
 18887                           tblptru	equ	0xFF8
 18888                           tblptrh	equ	0xFF7
 18889                           tblptrl	equ	0xFF6
 18890                           tablat	equ	0xFF5
 18891                           prodh	equ	0xFF4
 18892                           prodl	equ	0xFF3
 18893                           intcon	equ	0xFF2
 18894                           postinc0	equ	0xFEE
 18895                           wreg	equ	0xFE8
 18896                           postdec1	equ	0xFE5
 18897                           fsr1l	equ	0xFE1
 18898                           indf2	equ	0xFDF
 18899                           postinc2	equ	0xFDE
 18900                           postdec2	equ	0xFDD
 18901                           plusw2	equ	0xFDB
 18902                           fsr2h	equ	0xFDA
 18903                           fsr2l	equ	0xFD9
 18904                           status	equ	0xFD8
 18905                           
 18906 ;; *************** function _PWM2Config *****************
 18907 ;; Defined at:
 18908 ;;		line 130 in file "source/PWMConfig.h"
 18909 ;; Parameters:    Size  Location     Type
 18910 ;;		None
 18911 ;; Auto vars:     Size  Location     Type
 18912 ;;		None
 18913 ;; Return value:  Size  Location     Type
 18914 ;;                  1    wreg      void 
 18915 ;; Registers used:
 18916 ;;		wreg, status,2, status,0, cstack
 18917 ;; Tracked objects:
 18918 ;;		On entry : 0/0
 18919 ;;		On exit  : 0/0
 18920 ;;		Unchanged: 0/0
 18921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18922 ;;      Params:         0       0       0       0       0       0       0
 18923 ;;      Locals:         0       0       0       0       0       0       0
 18924 ;;      Temps:          0       0       0       0       0       0       0
 18925 ;;      Totals:         0       0       0       0       0       0       0
 18926 ;;Total ram usage:        0 bytes
 18927 ;; Hardware stack levels used:    1
 18928 ;; Hardware stack levels required when called:   13
 18929 ;; This function calls:
 18930 ;;		_setPWM2duty
 18931 ;;		_t2config
 18932 ;; This function is called by:
 18933 ;;		_main
 18934 ;; This function uses a non-reentrant model
 18935 ;;
 18936                           
 18937                           	psect	text79
 18938  0064AE                     __ptext79:
 18939                           	opt stack 0
 18940  0064AE                     _PWM2Config:
 18941                           	opt stack 17
 18942                           
 18943                           ;PWMConfig.h: 131: TRISCbits.TRISC0 = 1;
 18944                           
 18945                           ; BSR set to: 15
 18946                           ;incstack = 0
 18947  0064AE  8094               	bsf	3988,0,c	;volatile
 18948                           
 18949                           ;PWMConfig.h: 132: TRISCbits.TRISC1 = 1;
 18950  0064B0  8294               	bsf	3988,1,c	;volatile
 18951                           
 18952                           ;PWMConfig.h: 133: PSTR2CONbits.STR2A = 1;
 18953  0064B2  8063               	bsf	3939,0,c	;volatile
 18954                           
 18955                           ;PWMConfig.h: 134: PSTR2CONbits.STR2B = 1;
 18956  0064B4  8263               	bsf	3939,1,c	;volatile
 18957                           
 18958                           ;PWMConfig.h: 135: PSTR2CONbits.STR2C = 0;
 18959  0064B6  9463               	bcf	3939,2,c	;volatile
 18960                           
 18961                           ;PWMConfig.h: 136: PSTR2CONbits.STR2D = 0;
 18962  0064B8  9663               	bcf	3939,3,c	;volatile
 18963                           
 18964                           ;PWMConfig.h: 137: CCPTMRS0bits.C2TSEL = 0b00;
 18965  0064BA  0EE7               	movlw	-25
 18966  0064BC  010F               	movlb	15	; () banked
 18967  0064BE  1749               	andwf	73,f,b	;volatile
 18968                           
 18969                           ;PWMConfig.h: 138: PR2 = 199;
 18970  0064C0  0EC7               	movlw	199
 18971  0064C2  6EBB               	movwf	4027,c	;volatile
 18972                           
 18973                           ; BSR set to: 15
 18974                           ;PWMConfig.h: 139: ECCP2ASbits.CCP2AS = 0b000;
 18975  0064C4  9864               	bcf	3940,4,c	;volatile
 18976  0064C6  9A64               	bcf	3940,5,c	;volatile
 18977  0064C8  9C64               	bcf	3940,6,c	;volatile
 18978                           
 18979                           ;PWMConfig.h: 140: ECCP2ASbits.PSS2AC = 0b00;
 18980  0064CA  0EF3               	movlw	-13
 18981  0064CC  1664               	andwf	3940,f,c	;volatile
 18982                           
 18983                           ;PWMConfig.h: 141: ECCP2ASbits.PSS2BD = 0b00;
 18984  0064CE  0EFC               	movlw	-4
 18985  0064D0  1664               	andwf	3940,f,c	;volatile
 18986                           
 18987                           ; BSR set to: 15
 18988                           ;PWMConfig.h: 142: PWM2CONbits.P2RSEN = 0;
 18989  0064D2  9E65               	bcf	3941,7,c	;volatile
 18990                           
 18991                           ;PWMConfig.h: 143: ECCP2ASbits.CCP2AS = 1;
 18992  0064D4  5064               	movf	3940,w,c	;volatile
 18993  0064D6  0B8F               	andlw	-113
 18994  0064D8  0910               	iorlw	16
 18995  0064DA  6E64               	movwf	3940,c	;volatile
 18996                           
 18997                           ;PWMConfig.h: 144: CCP2CONbits.P2M = 0b10;
 18998  0064DC  5066               	movf	3942,w,c	;volatile
 18999  0064DE  0B3F               	andlw	-193
 19000  0064E0  0980               	iorlw	128
 19001  0064E2  6E66               	movwf	3942,c	;volatile
 19002                           
 19003                           ;PWMConfig.h: 145: CCP2CONbits.CCP2M = 0b1100;
 19004  0064E4  5066               	movf	3942,w,c	;volatile
 19005  0064E6  0BF0               	andlw	-16
 19006  0064E8  090C               	iorlw	12
 19007  0064EA  6E66               	movwf	3942,c	;volatile
 19008                           
 19009                           ; BSR set to: 15
 19010                           ;PWMConfig.h: 146: setPWM2duty(0);
 19011  0064EC  0E00               	movlw	0
 19012  0064EE  0101               	movlb	1	; () banked
 19013  0064F0  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 19014  0064F2  0E00               	movlw	0
 19015  0064F4  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 19016  0064F6  EC87  F02C         	call	_setPWM2duty	;wreg free
 19017                           
 19018                           ;PWMConfig.h: 147: PWM2CONbits.P2DC = 16;
 19019  0064FA  9065               	bcf	3941,0,c	;volatile
 19020  0064FC  9265               	bcf	3941,1,c	;volatile
 19021  0064FE  9465               	bcf	3941,2,c	;volatile
 19022  006500  9665               	bcf	3941,3,c	;volatile
 19023  006502  8865               	bsf	3941,4,c	;volatile
 19024  006504  9A65               	bcf	3941,5,c	;volatile
 19025  006506  9C65               	bcf	3941,6,c	;volatile
 19026                           
 19027                           ;PWMConfig.h: 148: t2config();
 19028  006508  EC52  F036         	call	_t2config	;wreg free
 19029                           
 19030                           ;PWMConfig.h: 149: TRISCbits.TRISC0 = 0;
 19031  00650C  9094               	bcf	3988,0,c	;volatile
 19032                           
 19033                           ;PWMConfig.h: 150: TRISCbits.TRISC1 = 0;
 19034  00650E  9294               	bcf	3988,1,c	;volatile
 19035                           
 19036                           ;PWMConfig.h: 151: ECCP2ASbits.CCP2ASE = 0;
 19037  006510  9E64               	bcf	3940,7,c	;volatile
 19038  006512  0012               	return		;funcret
 19039  006514                     __end_of_PWM2Config:
 19040                           	opt stack 0
 19041                           tblptru	equ	0xFF8
 19042                           tblptrh	equ	0xFF7
 19043                           tblptrl	equ	0xFF6
 19044                           tablat	equ	0xFF5
 19045                           prodh	equ	0xFF4
 19046                           prodl	equ	0xFF3
 19047                           intcon	equ	0xFF2
 19048                           postinc0	equ	0xFEE
 19049                           wreg	equ	0xFE8
 19050                           postdec1	equ	0xFE5
 19051                           fsr1l	equ	0xFE1
 19052                           indf2	equ	0xFDF
 19053                           postinc2	equ	0xFDE
 19054                           postdec2	equ	0xFDD
 19055                           plusw2	equ	0xFDB
 19056                           fsr2h	equ	0xFDA
 19057                           fsr2l	equ	0xFD9
 19058                           status	equ	0xFD8
 19059                           
 19060 ;; *************** function _t2config *****************
 19061 ;; Defined at:
 19062 ;;		line 26 in file "source/PWMConfig.h"
 19063 ;; Parameters:    Size  Location     Type
 19064 ;;		None
 19065 ;; Auto vars:     Size  Location     Type
 19066 ;;		None
 19067 ;; Return value:  Size  Location     Type
 19068 ;;                  1    wreg      void 
 19069 ;; Registers used:
 19070 ;;		wreg, status,2
 19071 ;; Tracked objects:
 19072 ;;		On entry : 0/0
 19073 ;;		On exit  : 0/0
 19074 ;;		Unchanged: 0/0
 19075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19076 ;;      Params:         0       0       0       0       0       0       0
 19077 ;;      Locals:         0       0       0       0       0       0       0
 19078 ;;      Temps:          0       0       0       0       0       0       0
 19079 ;;      Totals:         0       0       0       0       0       0       0
 19080 ;;Total ram usage:        0 bytes
 19081 ;; Hardware stack levels used:    1
 19082 ;; Hardware stack levels required when called:   12
 19083 ;; This function calls:
 19084 ;;		Nothing
 19085 ;; This function is called by:
 19086 ;;		_PWM2Config
 19087 ;; This function uses a non-reentrant model
 19088 ;;
 19089                           
 19090                           	psect	text80
 19091  006CA4                     __ptext80:
 19092                           	opt stack 0
 19093  006CA4                     _t2config:
 19094                           	opt stack 17
 19095                           
 19096                           ;PWMConfig.h: 27: T2CONbits.TMR2ON = 0;
 19097                           
 19098                           ;incstack = 0
 19099  006CA4  94BA               	bcf	4026,2,c	;volatile
 19100                           
 19101                           ;PWMConfig.h: 28: T2CONbits.T2CKPS = 0b00;
 19102  006CA6  0EFC               	movlw	-4
 19103  006CA8  16BA               	andwf	4026,f,c	;volatile
 19104                           
 19105                           ;PWMConfig.h: 29: T2CONbits.T2OUTPS = 0b1111;
 19106  006CAA  86BA               	bsf	4026,3,c	;volatile
 19107  006CAC  88BA               	bsf	4026,4,c	;volatile
 19108  006CAE  8ABA               	bsf	4026,5,c	;volatile
 19109  006CB0  8CBA               	bsf	4026,6,c	;volatile
 19110                           
 19111                           ;PWMConfig.h: 31: PIR1bits.TMR2IF = 0;
 19112  006CB2  929E               	bcf	3998,1,c	;volatile
 19113                           
 19114                           ;PWMConfig.h: 32: IPR1bits.TMR2IP = 0;
 19115  006CB4  929F               	bcf	3999,1,c	;volatile
 19116                           
 19117                           ;PWMConfig.h: 33: PIE1bits.TMR2IE = 1;
 19118  006CB6  829D               	bsf	3997,1,c	;volatile
 19119                           
 19120                           ;PWMConfig.h: 34: T2CONbits.TMR2ON = 1;
 19121  006CB8  84BA               	bsf	4026,2,c	;volatile
 19122  006CBA  0012               	return		;funcret
 19123  006CBC                     __end_of_t2config:
 19124                           	opt stack 0
 19125                           tblptru	equ	0xFF8
 19126                           tblptrh	equ	0xFF7
 19127                           tblptrl	equ	0xFF6
 19128                           tablat	equ	0xFF5
 19129                           prodh	equ	0xFF4
 19130                           prodl	equ	0xFF3
 19131                           intcon	equ	0xFF2
 19132                           postinc0	equ	0xFEE
 19133                           wreg	equ	0xFE8
 19134                           postdec1	equ	0xFE5
 19135                           fsr1l	equ	0xFE1
 19136                           indf2	equ	0xFDF
 19137                           postinc2	equ	0xFDE
 19138                           postdec2	equ	0xFDD
 19139                           plusw2	equ	0xFDB
 19140                           fsr2h	equ	0xFDA
 19141                           fsr2l	equ	0xFD9
 19142                           status	equ	0xFD8
 19143                           
 19144 ;; *************** function _setPWM2duty *****************
 19145 ;; Defined at:
 19146 ;;		line 37 in file "source/PWMConfig.h"
 19147 ;; Parameters:    Size  Location     Type
 19148 ;;  actuator        2    0[BANK1 ] short 
 19149 ;; Auto vars:     Size  Location     Type
 19150 ;;  act             2    4[BANK1 ] short 
 19151 ;; Return value:  Size  Location     Type
 19152 ;;                  1    wreg      void 
 19153 ;; Registers used:
 19154 ;;		wreg, status,2, status,0
 19155 ;; Tracked objects:
 19156 ;;		On entry : 0/0
 19157 ;;		On exit  : 0/0
 19158 ;;		Unchanged: 0/0
 19159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19160 ;;      Params:         0       0       2       0       0       0       0
 19161 ;;      Locals:         0       0       2       0       0       0       0
 19162 ;;      Temps:          0       0       2       0       0       0       0
 19163 ;;      Totals:         0       0       6       0       0       0       0
 19164 ;;Total ram usage:        6 bytes
 19165 ;; Hardware stack levels used:    1
 19166 ;; Hardware stack levels required when called:   12
 19167 ;; This function calls:
 19168 ;;		Nothing
 19169 ;; This function is called by:
 19170 ;;		_PWM2Config
 19171 ;;		_initProtocoll
 19172 ;;		_initCalib
 19173 ;;		_pressENTER
 19174 ;;		_main
 19175 ;; This function uses a non-reentrant model
 19176 ;;
 19177                           
 19178                           	psect	text81
 19179  00590E                     __ptext81:
 19180                           	opt stack 0
 19181  00590E                     _setPWM2duty:
 19182                           	opt stack 18
 19183                           
 19184                           ;PWMConfig.h: 38: short act = 400;
 19185                           
 19186                           ;incstack = 0
 19187  00590E  0E01               	movlw	1
 19188  005910  0101               	movlb	1	; () banked
 19189  005912  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19190  005914  0E90               	movlw	144
 19191  005916  6F04               	movwf	setPWM2duty@act& (0+255),b
 19192                           
 19193                           ; BSR set to: 1
 19194                           ;PWMConfig.h: 39: if(actuator > 400)
 19195  005918  0101               	movlb	1	; () banked
 19196  00591A  BF01               	btfsc	(setPWM2duty@actuator+1)& (0+255),7,b
 19197  00591C  D00D               	goto	l10125
 19198  00591E  0E91               	movlw	145
 19199  005920  0101               	movlb	1	; () banked
 19200  005922  5D00               	subwf	setPWM2duty@actuator& (0+255),w,b
 19201  005924  0E01               	movlw	1
 19202  005926  0101               	movlb	1	; () banked
 19203  005928  5901               	subwfb	(setPWM2duty@actuator+1)& (0+255),w,b
 19204  00592A  A0D8               	btfss	status,0,c
 19205  00592C  D005               	goto	l10125
 19206                           
 19207                           ; BSR set to: 1
 19208                           ;PWMConfig.h: 40: act = 800;
 19209  00592E  0E03               	movlw	3
 19210  005930  0101               	movlb	1	; () banked
 19211  005932  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19212  005934  0E20               	movlw	32
 19213  005936  D00F               	goto	L7
 19214  005938                     l10125:
 19215                           
 19216                           ; BSR set to: 1
 19217                           ;PWMConfig.h: 41: else if(actuator < -400)
 19218  005938  0101               	movlb	1	; () banked
 19219  00593A  AF01               	btfss	(setPWM2duty@actuator+1)& (0+255),7,b
 19220  00593C  D00E               	goto	l10129
 19221  00593E  0E70               	movlw	112
 19222  005940  0101               	movlb	1	; () banked
 19223  005942  5D00               	subwf	setPWM2duty@actuator& (0+255),w,b
 19224  005944  0EFE               	movlw	254
 19225  005946  0101               	movlb	1	; () banked
 19226  005948  5901               	subwfb	(setPWM2duty@actuator+1)& (0+255),w,b
 19227  00594A  B0D8               	btfsc	status,0,c
 19228  00594C  D006               	goto	l10129
 19229                           
 19230                           ; BSR set to: 1
 19231                           ;PWMConfig.h: 42: act = 0;
 19232  00594E  0E00               	movlw	0
 19233  005950  0101               	movlb	1	; () banked
 19234  005952  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19235  005954  0E00               	movlw	0
 19236  005956                     L7:
 19237  005956  6F04               	movwf	setPWM2duty@act& (0+255),b
 19238  005958  D00A               	goto	l484
 19239  00595A                     l10129:
 19240                           
 19241                           ; BSR set to: 1
 19242                           ;PWMConfig.h: 43: else
 19243                           ;PWMConfig.h: 44: act = actuator + 400;
 19244  00595A  0E90               	movlw	144
 19245  00595C  0101               	movlb	1	; () banked
 19246  00595E  2500               	addwf	setPWM2duty@actuator& (0+255),w,b
 19247  005960  0101               	movlb	1	; () banked
 19248  005962  6F04               	movwf	setPWM2duty@act& (0+255),b
 19249  005964  0E01               	movlw	1
 19250  005966  0101               	movlb	1	; () banked
 19251  005968  2101               	addwfc	(setPWM2duty@actuator+1)& (0+255),w,b
 19252  00596A  0101               	movlb	1	; () banked
 19253  00596C  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19254  00596E                     l484:
 19255                           
 19256                           ; BSR set to: 1
 19257                           ;PWMConfig.h: 45: CCP2CONbits.DC2B = act;
 19258  00596E  C104  F102         	movff	setPWM2duty@act,??_setPWM2duty
 19259  005972  0101               	movlb	1	; () banked
 19260  005974  3B02               	swapf	??_setPWM2duty& (0+255),f,b
 19261  005976  5066               	movf	3942,w,c	;volatile
 19262  005978  0101               	movlb	1	; () banked
 19263  00597A  1902               	xorwf	??_setPWM2duty& (0+255),w,b
 19264  00597C  0BCF               	andlw	-49
 19265  00597E  1902               	xorwf	??_setPWM2duty& (0+255),w,b
 19266  005980  6E66               	movwf	3942,c	;volatile
 19267                           
 19268                           ;PWMConfig.h: 46: CCPR2L = act>>2;
 19269  005982  C104  F102         	movff	setPWM2duty@act,??_setPWM2duty
 19270  005986  C105  F103         	movff	setPWM2duty@act+1,??_setPWM2duty+1
 19271  00598A  0101               	movlb	1	; () banked
 19272  00598C  3503               	rlcf	(??_setPWM2duty+1)& (0+255),w,b
 19273  00598E  3303               	rrcf	(??_setPWM2duty+1)& (0+255),f,b
 19274  005990  3302               	rrcf	??_setPWM2duty& (0+255),f,b
 19275  005992  0101               	movlb	1	; () banked
 19276  005994  3503               	rlcf	(??_setPWM2duty+1)& (0+255),w,b
 19277  005996  3303               	rrcf	(??_setPWM2duty+1)& (0+255),f,b
 19278  005998  3302               	rrcf	??_setPWM2duty& (0+255),f,b
 19279  00599A  0101               	movlb	1	; () banked
 19280  00599C  5102               	movf	??_setPWM2duty& (0+255),w,b
 19281  00599E  6E67               	movwf	3943,c	;volatile
 19282                           
 19283                           ; BSR set to: 1
 19284  0059A0  0012               	return		;funcret
 19285  0059A2                     __end_of_setPWM2duty:
 19286                           	opt stack 0
 19287                           tblptru	equ	0xFF8
 19288                           tblptrh	equ	0xFF7
 19289                           tblptrl	equ	0xFF6
 19290                           tablat	equ	0xFF5
 19291                           prodh	equ	0xFF4
 19292                           prodl	equ	0xFF3
 19293                           intcon	equ	0xFF2
 19294                           postinc0	equ	0xFEE
 19295                           wreg	equ	0xFE8
 19296                           postdec1	equ	0xFE5
 19297                           fsr1l	equ	0xFE1
 19298                           indf2	equ	0xFDF
 19299                           postinc2	equ	0xFDE
 19300                           postdec2	equ	0xFDD
 19301                           plusw2	equ	0xFDB
 19302                           fsr2h	equ	0xFDA
 19303                           fsr2l	equ	0xFD9
 19304                           status	equ	0xFD8
 19305                           
 19306 ;; *************** function _EEPROMConfig *****************
 19307 ;; Defined at:
 19308 ;;		line 71 in file "source/sysParams.h"
 19309 ;; Parameters:    Size  Location     Type
 19310 ;;		None
 19311 ;; Auto vars:     Size  Location     Type
 19312 ;;		None
 19313 ;; Return value:  Size  Location     Type
 19314 ;;                  1    wreg      void 
 19315 ;; Registers used:
 19316 ;;		None
 19317 ;; Tracked objects:
 19318 ;;		On entry : 0/0
 19319 ;;		On exit  : 0/0
 19320 ;;		Unchanged: 0/0
 19321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19322 ;;      Params:         0       0       0       0       0       0       0
 19323 ;;      Locals:         0       0       0       0       0       0       0
 19324 ;;      Temps:          0       0       0       0       0       0       0
 19325 ;;      Totals:         0       0       0       0       0       0       0
 19326 ;;Total ram usage:        0 bytes
 19327 ;; Hardware stack levels used:    1
 19328 ;; Hardware stack levels required when called:   12
 19329 ;; This function calls:
 19330 ;;		Nothing
 19331 ;; This function is called by:
 19332 ;;		_main
 19333 ;; This function uses a non-reentrant model
 19334 ;;
 19335                           
 19336                           	psect	text82
 19337  006D78                     __ptext82:
 19338                           	opt stack 0
 19339  006D78                     _EEPROMConfig:
 19340                           	opt stack 18
 19341                           
 19342                           ;sysParams.h: 72: EECON1bits.WREN = 0;
 19343                           
 19344                           ; BSR set to: 1
 19345                           ;incstack = 0
 19346  006D78  94A6               	bcf	4006,2,c	;volatile
 19347                           
 19348                           ;sysParams.h: 73: EECON1bits.FREE = 0;
 19349  006D7A  98A6               	bcf	4006,4,c	;volatile
 19350  006D7C  0012               	return		;funcret
 19351  006D7E                     __end_of_EEPROMConfig:
 19352                           	opt stack 0
 19353                           tblptru	equ	0xFF8
 19354                           tblptrh	equ	0xFF7
 19355                           tblptrl	equ	0xFF6
 19356                           tablat	equ	0xFF5
 19357                           prodh	equ	0xFF4
 19358                           prodl	equ	0xFF3
 19359                           intcon	equ	0xFF2
 19360                           postinc0	equ	0xFEE
 19361                           wreg	equ	0xFE8
 19362                           postdec1	equ	0xFE5
 19363                           fsr1l	equ	0xFE1
 19364                           indf2	equ	0xFDF
 19365                           postinc2	equ	0xFDE
 19366                           postdec2	equ	0xFDD
 19367                           plusw2	equ	0xFDB
 19368                           fsr2h	equ	0xFDA
 19369                           fsr2l	equ	0xFD9
 19370                           status	equ	0xFD8
 19371                           
 19372 ;; *************** function _isr *****************
 19373 ;; Defined at:
 19374 ;;		line 21 in file "source/main.c"
 19375 ;; Parameters:    Size  Location     Type
 19376 ;;		None
 19377 ;; Auto vars:     Size  Location     Type
 19378 ;;		None
 19379 ;; Return value:  Size  Location     Type
 19380 ;;                  1    wreg      void 
 19381 ;; Registers used:
 19382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19383 ;; Tracked objects:
 19384 ;;		On entry : 0/0
 19385 ;;		On exit  : 0/0
 19386 ;;		Unchanged: 0/0
 19387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19388 ;;      Params:         0       0       0       0       0       0       0
 19389 ;;      Locals:         0       0       0       0       0       0       0
 19390 ;;      Temps:          0      17       0       0       0       0       0
 19391 ;;      Totals:         0      17       0       0       0       0       0
 19392 ;;Total ram usage:       17 bytes
 19393 ;; Hardware stack levels used:    1
 19394 ;; Hardware stack levels required when called:   11
 19395 ;; This function calls:
 19396 ;;		_T2int
 19397 ;;		_UARTint
 19398 ;; This function is called by:
 19399 ;;		Interrupt level 1
 19400 ;; This function uses a non-reentrant model
 19401 ;;
 19402                           
 19403                           	psect	intcodelo
 19404  000018                     __pintcodelo:
 19405                           	opt stack 0
 19406  000018                     _isr:
 19407                           	opt stack 9
 19408                           
 19409                           ;incstack = 0
 19410  000018  805D               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 19411  00001A  CFD8 F094          	movff	status,??_isr
 19412  00001E  CFE8 F095          	movff	wreg,??_isr+1
 19413  000022  CFE0 F096          	movff	bsr,??_isr+2
 19414  000026  CFFA F097          	movff	pclath,??_isr+3
 19415  00002A  CFFB F098          	movff	pclatu,??_isr+4
 19416  00002E  CFE9 F099          	movff	fsr0l,??_isr+5
 19417  000032  CFEA F09A          	movff	fsr0h,??_isr+6
 19418  000036  CFE1 F09B          	movff	fsr1l,??_isr+7
 19419  00003A  CFE2 F09C          	movff	fsr1h,??_isr+8
 19420  00003E  CFD9 F09D          	movff	fsr2l,??_isr+9
 19421  000042  CFDA F09E          	movff	fsr2h,??_isr+10
 19422  000046  CFF3 F09F          	movff	prodl,??_isr+11
 19423  00004A  CFF4 F0A0          	movff	prodh,??_isr+12
 19424  00004E  CFF6 F0A1          	movff	tblptrl,??_isr+13
 19425  000052  CFF7 F0A2          	movff	tblptrh,??_isr+14
 19426  000056  CFF8 F0A3          	movff	tblptru,??_isr+15
 19427  00005A  CFF5 F0A4          	movff	tablat,??_isr+16
 19428                           
 19429                           ;main.c: 22: if(PIE1bits.RC1IE && PIR1bits.RC1IF) {
 19430  00005E  BA9D               	btfsc	3997,5,c	;volatile
 19431  000060  AA9E               	btfss	3998,5,c	;volatile
 19432  000062  D003               	goto	i1l9067
 19433                           
 19434                           ;main.c: 23: UARTint();
 19435  000064  ECF6  F020         	call	_UARTint	;wreg free
 19436                           
 19437                           ;main.c: 24: PIR1bits.RC1IF = 0;
 19438  000068  9A9E               	bcf	3998,5,c	;volatile
 19439  00006A                     i1l9067:
 19440                           
 19441                           ;main.c: 25: }
 19442                           ;main.c: 26: if(PIE1bits.TMR2IE && PIR1bits.TMR2IF) {
 19443  00006A  B29D               	btfsc	3997,1,c	;volatile
 19444  00006C  A29E               	btfss	3998,1,c	;volatile
 19445  00006E  D003               	goto	i1l901
 19446                           
 19447                           ;main.c: 27: T2int();
 19448  000070  EC52  F019         	call	_T2int	;wreg free
 19449                           
 19450                           ;main.c: 28: PIR1bits.TMR2IF = 0;
 19451  000074  929E               	bcf	3998,1,c	;volatile
 19452  000076                     i1l901:
 19453  000076  C0A4  FFF5         	movff	??_isr+16,tablat
 19454  00007A  C0A3  FFF8         	movff	??_isr+15,tblptru
 19455  00007E  C0A2  FFF7         	movff	??_isr+14,tblptrh
 19456  000082  C0A1  FFF6         	movff	??_isr+13,tblptrl
 19457  000086  C0A0  FFF4         	movff	??_isr+12,prodh
 19458  00008A  C09F  FFF3         	movff	??_isr+11,prodl
 19459  00008E  C09E  FFDA         	movff	??_isr+10,fsr2h
 19460  000092  C09D  FFD9         	movff	??_isr+9,fsr2l
 19461  000096  C09C  FFE2         	movff	??_isr+8,fsr1h
 19462  00009A  C09B  FFE1         	movff	??_isr+7,fsr1l
 19463  00009E  C09A  FFEA         	movff	??_isr+6,fsr0h
 19464  0000A2  C099  FFE9         	movff	??_isr+5,fsr0l
 19465  0000A6  C098  FFFB         	movff	??_isr+4,pclatu
 19466  0000AA  C097  FFFA         	movff	??_isr+3,pclath
 19467  0000AE  C096  FFE0         	movff	??_isr+2,bsr
 19468  0000B2  C095  FFE8         	movff	??_isr+1,wreg
 19469  0000B6  C094  FFD8         	movff	??_isr,status
 19470  0000BA  905D               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 19471  0000BC  0010               	retfie	
 19472  0000BE                     __end_of_isr:
 19473                           	opt stack 0
 19474                           pclatu	equ	0xFFB
 19475                           pclath	equ	0xFFA
 19476                           tblptru	equ	0xFF8
 19477                           tblptrh	equ	0xFF7
 19478                           tblptrl	equ	0xFF6
 19479                           tablat	equ	0xFF5
 19480                           prodh	equ	0xFF4
 19481                           prodl	equ	0xFF3
 19482                           intcon	equ	0xFF2
 19483                           postinc0	equ	0xFEE
 19484                           fsr0h	equ	0xFEA
 19485                           fsr0l	equ	0xFE9
 19486                           wreg	equ	0xFE8
 19487                           postdec1	equ	0xFE5
 19488                           fsr1h	equ	0xFE2
 19489                           fsr1l	equ	0xFE1
 19490                           bsr	equ	0xFE0
 19491                           indf2	equ	0xFDF
 19492                           postinc2	equ	0xFDE
 19493                           postdec2	equ	0xFDD
 19494                           plusw2	equ	0xFDB
 19495                           fsr2h	equ	0xFDA
 19496                           fsr2l	equ	0xFD9
 19497                           status	equ	0xFD8
 19498                           
 19499 ;; *************** function _UARTint *****************
 19500 ;; Defined at:
 19501 ;;		line 11 in file "source/UARTConfig.h"
 19502 ;; Parameters:    Size  Location     Type
 19503 ;;		None
 19504 ;; Auto vars:     Size  Location     Type
 19505 ;;  sas             1   51[BANK0 ] unsigned char 
 19506 ;; Return value:  Size  Location     Type
 19507 ;;                  1    wreg      void 
 19508 ;; Registers used:
 19509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19510 ;; Tracked objects:
 19511 ;;		On entry : 0/0
 19512 ;;		On exit  : 0/0
 19513 ;;		Unchanged: 0/0
 19514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19515 ;;      Params:         0       0       0       0       0       0       0
 19516 ;;      Locals:         0       1       0       0       0       0       0
 19517 ;;      Temps:          0       0       0       0       0       0       0
 19518 ;;      Totals:         0       1       0       0       0       0       0
 19519 ;;Total ram usage:        1 bytes
 19520 ;; Hardware stack levels used:    1
 19521 ;; Hardware stack levels required when called:   10
 19522 ;; This function calls:
 19523 ;;		_loadSysParams
 19524 ;;		_putchUART
 19525 ;;		i1_longPressDOWN
 19526 ;;		i1_longPressENTER
 19527 ;;		i1_longPressRETRO
 19528 ;;		i1_longPressUP
 19529 ;;		i1_pressDOWN
 19530 ;;		i1_pressENTER
 19531 ;;		i1_pressRETRO
 19532 ;;		i1_pressUP
 19533 ;;		i1_saveSysParams
 19534 ;;		i1_sysParamInit
 19535 ;; This function is called by:
 19536 ;;		_isr
 19537 ;; This function uses a non-reentrant model
 19538 ;;
 19539                           
 19540                           	psect	text84
 19541  0041EC                     __ptext84:
 19542                           	opt stack 0
 19543  0041EC                     _UARTint:
 19544                           	opt stack 9
 19545                           
 19546                           ;UARTConfig.h: 12: char sas = RCREG1;
 19547                           
 19548                           ;incstack = 0
 19549  0041EC  CFAE F093          	movff	4014,UARTint@sas	;volatile
 19550                           
 19551                           ;UARTConfig.h: 13: if(sas == 'A') {
 19552  0041F0  0E41               	movlw	65
 19553  0041F2  0100               	movlb	0	; () banked
 19554  0041F4  1993               	xorwf	UARTint@sas& (0+255),w,b
 19555  0041F6  A4D8               	btfss	status,2,c
 19556  0041F8  D00D               	goto	i1l8649
 19557                           
 19558                           ; BSR set to: 0
 19559                           ;UARTConfig.h: 14: putchUART(actualScreen);
 19560  0041FA  0101               	movlb	1	; () banked
 19561  0041FC  51C3               	movf	_actualScreen& (0+255),w,b
 19562  0041FE  EC96  F036         	call	_putchUART
 19563                           
 19564                           ;UARTConfig.h: 15: putchUART(menuSection);
 19565  004202  0101               	movlb	1	; () banked
 19566  004204  51CA               	movf	_menuSection& (0+255),w,b
 19567  004206  EC96  F036         	call	_putchUART
 19568                           
 19569                           ;UARTConfig.h: 16: putchUART(passSection);
 19570  00420A  0101               	movlb	1	; () banked
 19571  00420C  51CB               	movf	_passSection& (0+255),w,b
 19572  00420E  EC96  F036         	call	_putchUART
 19573                           
 19574                           ;UARTConfig.h: 17: }else if(sas == 'B') {
 19575  004212  0012               	return	
 19576  004214                     i1l8649:
 19577  004214  0E42               	movlw	66
 19578  004216  0100               	movlb	0	; () banked
 19579  004218  1993               	xorwf	UARTint@sas& (0+255),w,b
 19580  00421A  A4D8               	btfss	status,2,c
 19581  00421C  D003               	goto	i1l8653
 19582                           
 19583                           ; BSR set to: 0
 19584                           ;UARTConfig.h: 18: saveSysParams();
 19585  00421E  ECAD  F02D         	call	i1_saveSysParams	;wreg free
 19586                           
 19587                           ;UARTConfig.h: 19: }else if(sas == 'C') {
 19588  004222  0012               	return	
 19589  004224                     i1l8653:
 19590  004224  0E43               	movlw	67
 19591  004226  0100               	movlb	0	; () banked
 19592  004228  1993               	xorwf	UARTint@sas& (0+255),w,b
 19593  00422A  A4D8               	btfss	status,2,c
 19594  00422C  D003               	goto	i1l8657
 19595                           
 19596                           ; BSR set to: 0
 19597                           ;UARTConfig.h: 20: sysParamInit();
 19598  00422E  EC9C  F02B         	call	i1_sysParamInit	;wreg free
 19599                           
 19600                           ;UARTConfig.h: 21: }else if(sas == 'D') {
 19601  004232  0012               	return	
 19602  004234                     i1l8657:
 19603  004234  0E44               	movlw	68
 19604  004236  0100               	movlb	0	; () banked
 19605  004238  1993               	xorwf	UARTint@sas& (0+255),w,b
 19606  00423A  A4D8               	btfss	status,2,c
 19607  00423C  D003               	goto	i1l8661
 19608                           
 19609                           ; BSR set to: 0
 19610                           ;UARTConfig.h: 22: loadSysParams();
 19611  00423E  ECAE  F033         	call	_loadSysParams	;wreg free
 19612                           
 19613                           ;UARTConfig.h: 23: }else if(sas == 'E') {
 19614  004242  0012               	return	
 19615  004244                     i1l8661:
 19616  004244  0E45               	movlw	69
 19617  004246  0100               	movlb	0	; () banked
 19618  004248  1993               	xorwf	UARTint@sas& (0+255),w,b
 19619  00424A  B4D8               	btfsc	status,2,c
 19620  00424C  0012               	return	
 19621                           
 19622                           ; BSR set to: 0
 19623                           ;UARTConfig.h: 57: else if(sas == 'R') {
 19624                           
 19625                           ; BSR set to: 0
 19626                           
 19627                           ; BSR set to: 0
 19628                           ;UARTConfig.h: 25: }
 19629  00424E  0E52               	movlw	82
 19630  004250  0100               	movlb	0	; () banked
 19631  004252  1993               	xorwf	UARTint@sas& (0+255),w,b
 19632  004254  A4D8               	btfss	status,2,c
 19633  004256  D014               	goto	i1l8675
 19634                           
 19635                           ; BSR set to: 0
 19636                           ;UARTConfig.h: 58: if(actualScreen == 0) {
 19637  004258  0101               	movlb	1	; () banked
 19638  00425A  51C3               	movf	_actualScreen& (0+255),w,b
 19639  00425C  A4D8               	btfss	status,2,c
 19640  00425E  D007               	goto	i1l8671
 19641                           
 19642                           ; BSR set to: 1
 19643                           ;UARTConfig.h: 59: actualScreen = 1;
 19644  004260  0E01               	movlw	1
 19645  004262  0101               	movlb	1	; () banked
 19646  004264  6FC3               	movwf	_actualScreen& (0+255),b
 19647                           
 19648                           ;UARTConfig.h: 60: fd = 0;
 19649  004266  0E00               	movlw	0
 19650  004268  0101               	movlb	1	; () banked
 19651  00426A  6FC5               	movwf	_fd& (0+255),b
 19652                           
 19653                           ;UARTConfig.h: 61: }else if(actualScreen == 4)
 19654  00426C  0012               	return	
 19655  00426E                     i1l8671:
 19656                           
 19657                           ; BSR set to: 1
 19658  00426E  0E04               	movlw	4
 19659  004270  0101               	movlb	1	; () banked
 19660  004272  19C3               	xorwf	_actualScreen& (0+255),w,b
 19661  004274  A4D8               	btfss	status,2,c
 19662  004276  0012               	return	
 19663                           
 19664                           ; BSR set to: 1
 19665                           ;UARTConfig.h: 62: actualScreen = 9;
 19666  004278  0E09               	movlw	9
 19667  00427A  0101               	movlb	1	; () banked
 19668  00427C  6FC3               	movwf	_actualScreen& (0+255),b
 19669                           
 19670                           ; BSR set to: 1
 19671                           ;UARTConfig.h: 63: }else if(sas == 'S')
 19672                           
 19673                           ; BSR set to: 1
 19674  00427E  0012               	return	
 19675  004280                     i1l8675:
 19676  004280  0E53               	movlw	83
 19677  004282  0100               	movlb	0	; () banked
 19678  004284  1993               	xorwf	UARTint@sas& (0+255),w,b
 19679  004286  A4D8               	btfss	status,2,c
 19680  004288  D003               	goto	i1l8679
 19681                           
 19682                           ; BSR set to: 0
 19683                           ;UARTConfig.h: 64: pressUP();
 19684  00428A  EC0F  F023         	call	i1_pressUP	;wreg free
 19685  00428E  0012               	return	
 19686  004290                     i1l8679:
 19687                           
 19688                           ;UARTConfig.h: 65: else if(sas == 'T')
 19689  004290  0E54               	movlw	84
 19690  004292  0100               	movlb	0	; () banked
 19691  004294  1993               	xorwf	UARTint@sas& (0+255),w,b
 19692  004296  A4D8               	btfss	status,2,c
 19693  004298  D003               	goto	i1l8683
 19694                           
 19695                           ; BSR set to: 0
 19696                           ;UARTConfig.h: 66: pressDOWN();
 19697  00429A  EC11  F024         	call	i1_pressDOWN	;wreg free
 19698  00429E  0012               	return	
 19699  0042A0                     i1l8683:
 19700                           
 19701                           ;UARTConfig.h: 67: else if(sas == 'U')
 19702  0042A0  0E55               	movlw	85
 19703  0042A2  0100               	movlb	0	; () banked
 19704  0042A4  1993               	xorwf	UARTint@sas& (0+255),w,b
 19705  0042A6  A4D8               	btfss	status,2,c
 19706  0042A8  D003               	goto	i1l8687
 19707                           
 19708                           ; BSR set to: 0
 19709                           ;UARTConfig.h: 68: pressRETRO();
 19710  0042AA  ECAE  F029         	call	i1_pressRETRO	;wreg free
 19711  0042AE  0012               	return	
 19712  0042B0                     i1l8687:
 19713                           
 19714                           ;UARTConfig.h: 69: else if(sas == 'V')
 19715  0042B0  0E56               	movlw	86
 19716  0042B2  0100               	movlb	0	; () banked
 19717  0042B4  1993               	xorwf	UARTint@sas& (0+255),w,b
 19718  0042B6  A4D8               	btfss	status,2,c
 19719  0042B8  D003               	goto	i1l8691
 19720                           
 19721                           ; BSR set to: 0
 19722                           ;UARTConfig.h: 70: pressENTER();
 19723  0042BA  ECBD  F010         	call	i1_pressENTER	;wreg free
 19724  0042BE  0012               	return	
 19725  0042C0                     i1l8691:
 19726                           
 19727                           ;UARTConfig.h: 71: else if(sas == 'W')
 19728  0042C0  0E57               	movlw	87
 19729  0042C2  0100               	movlb	0	; () banked
 19730  0042C4  1993               	xorwf	UARTint@sas& (0+255),w,b
 19731  0042C6  A4D8               	btfss	status,2,c
 19732  0042C8  D003               	goto	i1l8695
 19733                           
 19734                           ; BSR set to: 0
 19735                           ;UARTConfig.h: 72: longPressUP();
 19736  0042CA  EC7B  F031         	call	i1_longPressUP	;wreg free
 19737  0042CE  0012               	return	
 19738  0042D0                     i1l8695:
 19739                           
 19740                           ;UARTConfig.h: 73: else if(sas == 'X')
 19741  0042D0  0E58               	movlw	88
 19742  0042D2  0100               	movlb	0	; () banked
 19743  0042D4  1993               	xorwf	UARTint@sas& (0+255),w,b
 19744  0042D6  A4D8               	btfss	status,2,c
 19745  0042D8  D003               	goto	i1l8699
 19746                           
 19747                           ; BSR set to: 0
 19748                           ;UARTConfig.h: 74: longPressDOWN();
 19749  0042DA  ECEE  F035         	call	i1_longPressDOWN	;wreg free
 19750  0042DE  0012               	return	
 19751  0042E0                     i1l8699:
 19752                           
 19753                           ;UARTConfig.h: 75: else if(sas == 'Y')
 19754  0042E0  0E59               	movlw	89
 19755  0042E2  0100               	movlb	0	; () banked
 19756  0042E4  1993               	xorwf	UARTint@sas& (0+255),w,b
 19757  0042E6  A4D8               	btfss	status,2,c
 19758  0042E8  D003               	goto	i1l8703
 19759                           
 19760                           ; BSR set to: 0
 19761                           ;UARTConfig.h: 76: longPressRETRO();
 19762  0042EA  ECB7  F032         	call	i1_longPressRETRO	;wreg free
 19763  0042EE  0012               	return	
 19764  0042F0                     i1l8703:
 19765                           
 19766                           ;UARTConfig.h: 77: else if(sas == 'Z')
 19767  0042F0  0E5A               	movlw	90
 19768  0042F2  0100               	movlb	0	; () banked
 19769  0042F4  1993               	xorwf	UARTint@sas& (0+255),w,b
 19770  0042F6  A4D8               	btfss	status,2,c
 19771  0042F8  0012               	return	
 19772                           
 19773                           ; BSR set to: 0
 19774                           ;UARTConfig.h: 78: longPressENTER();
 19775  0042FA  EC33  F00E         	call	i1_longPressENTER	;wreg free
 19776  0042FE  0012               	return	
 19777  004300                     __end_of_UARTint:
 19778                           	opt stack 0
 19779                           pclatu	equ	0xFFB
 19780                           pclath	equ	0xFFA
 19781                           tblptru	equ	0xFF8
 19782                           tblptrh	equ	0xFF7
 19783                           tblptrl	equ	0xFF6
 19784                           tablat	equ	0xFF5
 19785                           prodh	equ	0xFF4
 19786                           prodl	equ	0xFF3
 19787                           intcon	equ	0xFF2
 19788                           postinc0	equ	0xFEE
 19789                           fsr0h	equ	0xFEA
 19790                           fsr0l	equ	0xFE9
 19791                           wreg	equ	0xFE8
 19792                           postdec1	equ	0xFE5
 19793                           fsr1h	equ	0xFE2
 19794                           fsr1l	equ	0xFE1
 19795                           bsr	equ	0xFE0
 19796                           indf2	equ	0xFDF
 19797                           postinc2	equ	0xFDE
 19798                           postdec2	equ	0xFDD
 19799                           plusw2	equ	0xFDB
 19800                           fsr2h	equ	0xFDA
 19801                           fsr2l	equ	0xFD9
 19802                           status	equ	0xFD8
 19803                           
 19804 ;; *************** function i1_sysParamInit *****************
 19805 ;; Defined at:
 19806 ;;		line 166 in file "source/sysParams.h"
 19807 ;; Parameters:    Size  Location     Type
 19808 ;;		None
 19809 ;; Auto vars:     Size  Location     Type
 19810 ;;		None
 19811 ;; Return value:  Size  Location     Type
 19812 ;;                  1    wreg      void 
 19813 ;; Registers used:
 19814 ;;		wreg, status,2, status,0, cstack
 19815 ;; Tracked objects:
 19816 ;;		On entry : 0/0
 19817 ;;		On exit  : 0/0
 19818 ;;		Unchanged: 0/0
 19819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19820 ;;      Params:         0       0       0       0       0       0       0
 19821 ;;      Locals:         0       0       0       0       0       0       0
 19822 ;;      Temps:          0       1       0       0       0       0       0
 19823 ;;      Totals:         0       1       0       0       0       0       0
 19824 ;;Total ram usage:        1 bytes
 19825 ;; Hardware stack levels used:    1
 19826 ;; Hardware stack levels required when called:    7
 19827 ;; This function calls:
 19828 ;;		i1_calcSysVars
 19829 ;;		i1_readEEPROM
 19830 ;; This function is called by:
 19831 ;;		_UARTint
 19832 ;; This function uses a non-reentrant model
 19833 ;;
 19834                           
 19835                           	psect	text85
 19836  005738                     __ptext85:
 19837                           	opt stack 0
 19838  005738                     i1_sysParamInit:
 19839                           	opt stack 11
 19840                           
 19841                           ;sysParams.h: 169: fData.floatUB = readEEPROM(3);
 19842                           
 19843                           ;incstack = 0
 19844  005738  0E03               	movlw	3
 19845  00573A  EC74  F036         	call	i1_readEEPROM
 19846  00573E  0100               	movlb	0	; () banked
 19847  005740  6FB1               	movwf	(_fData+2)& (0+255),b
 19848                           
 19849                           ;sysParams.h: 170: fData.floatHB = readEEPROM(4);
 19850  005742  0E04               	movlw	4
 19851  005744  EC74  F036         	call	i1_readEEPROM
 19852  005748  0100               	movlb	0	; () banked
 19853  00574A  6FB0               	movwf	(_fData+1)& (0+255),b
 19854                           
 19855                           ;sysParams.h: 171: fData.floatLB = readEEPROM(5);
 19856  00574C  0E05               	movlw	5
 19857  00574E  EC74  F036         	call	i1_readEEPROM
 19858  005752  0100               	movlb	0	; () banked
 19859  005754  6FAF               	movwf	_fData& (0+255),b
 19860                           
 19861                           ; BSR set to: 0
 19862                           ;sysParams.h: 172: tiXcorte = fData.floatdat;
 19863  005756  C0AF  F195         	movff	_fData,_tiXcorte
 19864  00575A  C0B0  F196         	movff	_fData+1,_tiXcorte+1
 19865  00575E  C0B1  F197         	movff	_fData+2,_tiXcorte+2
 19866                           
 19867                           ;sysParams.h: 173: i16Data.int16HB = readEEPROM(6);
 19868  005762  0E06               	movlw	6
 19869  005764  EC74  F036         	call	i1_readEEPROM
 19870  005768  0100               	movlb	0	; () banked
 19871  00576A  6FB3               	movwf	(_i16Data+1)& (0+255),b
 19872                           
 19873                           ;sysParams.h: 174: i16Data.int16LB = readEEPROM(7);
 19874  00576C  0E07               	movlw	7
 19875  00576E  EC74  F036         	call	i1_readEEPROM
 19876  005772  0100               	movlb	0	; () banked
 19877  005774  6FB2               	movwf	_i16Data& (0+255),b
 19878                           
 19879                           ; BSR set to: 0
 19880                           ;sysParams.h: 175: numCortes = i16Data.int16dat;
 19881  005776  C0B2  F0C6         	movff	_i16Data,_numCortes
 19882  00577A  C0B3  F0C7         	movff	_i16Data+1,_numCortes+1
 19883                           
 19884                           ;sysParams.h: 187: fData.floatUB = readEEPROM(17);
 19885  00577E  0E11               	movlw	17
 19886  005780  EC74  F036         	call	i1_readEEPROM
 19887  005784  0100               	movlb	0	; () banked
 19888  005786  6FB1               	movwf	(_fData+2)& (0+255),b
 19889                           
 19890                           ;sysParams.h: 188: fData.floatHB = readEEPROM(18);
 19891  005788  0E12               	movlw	18
 19892  00578A  EC74  F036         	call	i1_readEEPROM
 19893  00578E  0100               	movlb	0	; () banked
 19894  005790  6FB0               	movwf	(_fData+1)& (0+255),b
 19895                           
 19896                           ;sysParams.h: 189: fData.floatLB = readEEPROM(19);
 19897  005792  0E13               	movlw	19
 19898  005794  EC74  F036         	call	i1_readEEPROM
 19899  005798  0100               	movlb	0	; () banked
 19900  00579A  6FAF               	movwf	_fData& (0+255),b
 19901                           
 19902                           ; BSR set to: 0
 19903                           ;sysParams.h: 190: velocidadMasa = fData.floatdat;
 19904  00579C  C0AF  F198         	movff	_fData,_velocidadMasa
 19905  0057A0  C0B0  F199         	movff	_fData+1,_velocidadMasa+1
 19906  0057A4  C0B1  F19A         	movff	_fData+2,_velocidadMasa+2
 19907                           
 19908                           ; BSR set to: 0
 19909                           ;sysParams.h: 191: calcSysVars();
 19910  0057A8  EC22  F032         	call	i1_calcSysVars	;wreg free
 19911                           
 19912                           ;sysParams.h: 192: processState = readEEPROM(31);
 19913  0057AC  0E1F               	movlw	31
 19914  0057AE  EC74  F036         	call	i1_readEEPROM
 19915  0057B2  0100               	movlb	0	; () banked
 19916  0057B4  6F7A               	movwf	??i1_sysParamInit& (0+255),b
 19917  0057B6  0100               	movlb	0	; () banked
 19918  0057B8  517A               	movf	??i1_sysParamInit& (0+255),w,b
 19919  0057BA  0100               	movlb	0	; () banked
 19920  0057BC  6FB4               	movwf	_processState& (0+255),b
 19921  0057BE  6BB5               	clrf	(_processState+1)& (0+255),b
 19922                           
 19923                           ;sysParams.h: 193: bladeIsUP = readEEPROM(32);
 19924  0057C0  0E20               	movlw	32
 19925  0057C2  EC74  F036         	call	i1_readEEPROM
 19926  0057C6  0100               	movlb	0	; () banked
 19927  0057C8  6FC8               	movwf	_bladeIsUP& (0+255),b
 19928                           
 19929                           ;sysParams.h: 194: processStarted = readEEPROM(30);
 19930  0057CA  0E1E               	movlw	30
 19931  0057CC  EC74  F036         	call	i1_readEEPROM
 19932  0057D0  0100               	movlb	0	; () banked
 19933  0057D2  6FBB               	movwf	_processStarted& (0+255),b
 19934                           
 19935                           ; BSR set to: 0
 19936  0057D4  0012               	return		;funcret
 19937  0057D6                     __end_ofi1_sysParamInit:
 19938                           	opt stack 0
 19939                           pclatu	equ	0xFFB
 19940                           pclath	equ	0xFFA
 19941                           tblptru	equ	0xFF8
 19942                           tblptrh	equ	0xFF7
 19943                           tblptrl	equ	0xFF6
 19944                           tablat	equ	0xFF5
 19945                           prodh	equ	0xFF4
 19946                           prodl	equ	0xFF3
 19947                           intcon	equ	0xFF2
 19948                           postinc0	equ	0xFEE
 19949                           fsr0h	equ	0xFEA
 19950                           fsr0l	equ	0xFE9
 19951                           wreg	equ	0xFE8
 19952                           postdec1	equ	0xFE5
 19953                           fsr1h	equ	0xFE2
 19954                           fsr1l	equ	0xFE1
 19955                           bsr	equ	0xFE0
 19956                           indf2	equ	0xFDF
 19957                           postinc2	equ	0xFDE
 19958                           postdec2	equ	0xFDD
 19959                           plusw2	equ	0xFDB
 19960                           fsr2h	equ	0xFDA
 19961                           fsr2l	equ	0xFD9
 19962                           status	equ	0xFD8
 19963                           
 19964 ;; *************** function i1_readEEPROM *****************
 19965 ;; Defined at:
 19966 ;;		line 62 in file "source/sysParams.h"
 19967 ;; Parameters:    Size  Location     Type
 19968 ;;  adr             1    wreg     unsigned char 
 19969 ;; Auto vars:     Size  Location     Type
 19970 ;;  adr             1    0[BANK0 ] unsigned char 
 19971 ;; Return value:  Size  Location     Type
 19972 ;;                  1    wreg      unsigned char 
 19973 ;; Registers used:
 19974 ;;		wreg, status,2
 19975 ;; Tracked objects:
 19976 ;;		On entry : 0/0
 19977 ;;		On exit  : 0/0
 19978 ;;		Unchanged: 0/0
 19979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19980 ;;      Params:         0       0       0       0       0       0       0
 19981 ;;      Locals:         0       1       0       0       0       0       0
 19982 ;;      Temps:          0       0       0       0       0       0       0
 19983 ;;      Totals:         0       1       0       0       0       0       0
 19984 ;;Total ram usage:        1 bytes
 19985 ;; Hardware stack levels used:    1
 19986 ;; Hardware stack levels required when called:    4
 19987 ;; This function calls:
 19988 ;;		Nothing
 19989 ;; This function is called by:
 19990 ;;		i1_sysParamInit
 19991 ;; This function uses a non-reentrant model
 19992 ;;
 19993                           
 19994                           	psect	text86
 19995  006CE8                     __ptext86:
 19996                           	opt stack 0
 19997  006CE8                     i1_readEEPROM:
 19998                           	opt stack 13
 19999                           
 20000                           ; BSR set to: 0
 20001                           ;incstack = 0
 20002                           ;i1readEEPROM@adr stored from wreg
 20003  006CE8  0100               	movlb	0	; () banked
 20004  006CEA  6F60               	movwf	i1readEEPROM@adr& (0+255),b
 20005                           
 20006                           ;sysParams.h: 63: EEADR = adr;
 20007  006CEC  C060  FFA9         	movff	i1readEEPROM@adr,4009	;volatile
 20008                           
 20009                           ;sysParams.h: 64: EECON1bits.EEPGD = 0;
 20010  006CF0  9EA6               	bcf	4006,7,c	;volatile
 20011                           
 20012                           ;sysParams.h: 65: EECON1bits.CFGS = 0;
 20013  006CF2  9CA6               	bcf	4006,6,c	;volatile
 20014                           
 20015                           ;sysParams.h: 66: EECON1bits.RD = 1;
 20016  006CF4  80A6               	bsf	4006,0,c	;volatile
 20017  006CF6                     i1l285:
 20018  006CF6  B0A6               	btfsc	4006,0,c	;volatile
 20019  006CF8  D7FE               	goto	i1l285
 20020                           
 20021                           ;sysParams.h: 68: return EEDATA;
 20022  006CFA  50A8               	movf	4008,w,c	;volatile
 20023  006CFC  0012               	return		;funcret
 20024  006CFE                     __end_ofi1_readEEPROM:
 20025                           	opt stack 0
 20026                           pclatu	equ	0xFFB
 20027                           pclath	equ	0xFFA
 20028                           tblptru	equ	0xFF8
 20029                           tblptrh	equ	0xFF7
 20030                           tblptrl	equ	0xFF6
 20031                           tablat	equ	0xFF5
 20032                           prodh	equ	0xFF4
 20033                           prodl	equ	0xFF3
 20034                           intcon	equ	0xFF2
 20035                           postinc0	equ	0xFEE
 20036                           fsr0h	equ	0xFEA
 20037                           fsr0l	equ	0xFE9
 20038                           wreg	equ	0xFE8
 20039                           postdec1	equ	0xFE5
 20040                           fsr1h	equ	0xFE2
 20041                           fsr1l	equ	0xFE1
 20042                           bsr	equ	0xFE0
 20043                           indf2	equ	0xFDF
 20044                           postinc2	equ	0xFDE
 20045                           postdec2	equ	0xFDD
 20046                           plusw2	equ	0xFDB
 20047                           fsr2h	equ	0xFDA
 20048                           fsr2l	equ	0xFD9
 20049                           status	equ	0xFD8
 20050                           
 20051 ;; *************** function i1_pressUP *****************
 20052 ;; Defined at:
 20053 ;;		line 135 in file "source/DisplayProtocol.h"
 20054 ;; Parameters:    Size  Location     Type
 20055 ;;		None
 20056 ;; Auto vars:     Size  Location     Type
 20057 ;;		None
 20058 ;; Return value:  Size  Location     Type
 20059 ;;                  1    wreg      void 
 20060 ;; Registers used:
 20061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20062 ;; Tracked objects:
 20063 ;;		On entry : 0/0
 20064 ;;		On exit  : 0/0
 20065 ;;		Unchanged: 0/0
 20066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20067 ;;      Params:         0       0       0       0       0       0       0
 20068 ;;      Locals:         0       0       0       0       0       0       0
 20069 ;;      Temps:          0       1       0       0       0       0       0
 20070 ;;      Totals:         0       1       0       0       0       0       0
 20071 ;;Total ram usage:        1 bytes
 20072 ;; Hardware stack levels used:    1
 20073 ;; Hardware stack levels required when called:    5
 20074 ;; This function calls:
 20075 ;;		i1_chanValDigUP
 20076 ;; This function is called by:
 20077 ;;		_UARTint
 20078 ;; This function uses a non-reentrant model
 20079 ;;
 20080                           
 20081                           	psect	text87
 20082  00461E                     __ptext87:
 20083                           	opt stack 0
 20084  00461E                     i1_pressUP:
 20085                           	opt stack 13
 20086                           
 20087                           ;DisplayProtocol.h: 136: if (actualScreen == 0 || actualScreen == 4) {
 20088                           
 20089                           ;incstack = 0
 20090  00461E  0101               	movlb	1	; () banked
 20091  004620  51C3               	movf	_actualScreen& (0+255),w,b
 20092  004622  B4D8               	btfsc	status,2,c
 20093  004624  D005               	goto	i1l7961
 20094                           
 20095                           ; BSR set to: 1
 20096  004626  0E04               	movlw	4
 20097  004628  0101               	movlb	1	; () banked
 20098  00462A  19C3               	xorwf	_actualScreen& (0+255),w,b
 20099  00462C  A4D8               	btfss	status,2,c
 20100  00462E  D00C               	goto	i1l7967
 20101  004630                     i1l7961:
 20102                           
 20103                           ; BSR set to: 1
 20104                           ;DisplayProtocol.h: 137: menuSection++;
 20105  004630  0101               	movlb	1	; () banked
 20106  004632  2BCA               	incf	_menuSection& (0+255),f,b
 20107                           
 20108                           ; BSR set to: 1
 20109                           ;DisplayProtocol.h: 138: if (menuSection > 3)
 20110  004634  0101               	movlb	1	; () banked
 20111  004636  51CA               	movf	_menuSection& (0+255),w,b
 20112  004638  0A80               	xorlw	128
 20113  00463A  0F7C               	addlw	-132
 20114  00463C  A0D8               	btfss	status,0,c
 20115  00463E  0012               	return	
 20116                           
 20117                           ; BSR set to: 1
 20118                           ;DisplayProtocol.h: 139: menuSection = 0;
 20119  004640  0E00               	movlw	0
 20120  004642  0101               	movlb	1	; () banked
 20121  004644  6FCA               	movwf	_menuSection& (0+255),b
 20122                           
 20123                           ; BSR set to: 1
 20124                           ;DisplayProtocol.h: 140: } else if (actualScreen == 1) {
 20125  004646  0012               	return	
 20126  004648                     i1l7967:
 20127                           
 20128                           ; BSR set to: 1
 20129  004648  0101               	movlb	1	; () banked
 20130  00464A  05C3               	decf	_actualScreen& (0+255),w,b
 20131  00464C  A4D8               	btfss	status,2,c
 20132  00464E  D024               	goto	i1l7973
 20133                           
 20134                           ; BSR set to: 1
 20135                           ;DisplayProtocol.h: 141: introducido[passSection]++;
 20136  004650  0101               	movlb	1	; () banked
 20137  004652  51CB               	movf	_passSection& (0+255),w,b
 20138  004654  0D01               	mullw	1
 20139  004656  0EAF               	movlw	low _introducido
 20140  004658  24F3               	addwf	prodl,w,c
 20141  00465A  6ED9               	movwf	fsr2l,c
 20142  00465C  0E01               	movlw	high _introducido
 20143  00465E  20F4               	addwfc	prodh,w,c
 20144  004660  6EDA               	movwf	fsr2h,c
 20145  004662  2ADF               	incf	indf2,f,c
 20146                           
 20147                           ;DisplayProtocol.h: 142: if (introducido[passSection] > 9)
 20148  004664  0101               	movlb	1	; () banked
 20149  004666  51CB               	movf	_passSection& (0+255),w,b
 20150  004668  0D01               	mullw	1
 20151  00466A  0EAF               	movlw	low _introducido
 20152  00466C  24F3               	addwf	prodl,w,c
 20153  00466E  6ED9               	movwf	fsr2l,c
 20154  004670  0E01               	movlw	high _introducido
 20155  004672  20F4               	addwfc	prodh,w,c
 20156  004674  6EDA               	movwf	fsr2h,c
 20157  004676  50DF               	movf	indf2,w,c
 20158  004678  0A80               	xorlw	128
 20159  00467A  0F76               	addlw	-138
 20160  00467C  A0D8               	btfss	status,0,c
 20161  00467E  0012               	return	
 20162                           
 20163                           ; BSR set to: 1
 20164                           ;DisplayProtocol.h: 143: introducido[passSection] = 0;
 20165  004680  0101               	movlb	1	; () banked
 20166  004682  51CB               	movf	_passSection& (0+255),w,b
 20167  004684  0D01               	mullw	1
 20168  004686  0EAF               	movlw	low _introducido
 20169  004688  24F3               	addwf	prodl,w,c
 20170  00468A  6ED9               	movwf	fsr2l,c
 20171  00468C  0E01               	movlw	high _introducido
 20172  00468E  20F4               	addwfc	prodh,w,c
 20173  004690  6EDA               	movwf	fsr2h,c
 20174  004692  0E00               	movlw	0
 20175  004694  6EDF               	movwf	indf2,c
 20176                           
 20177                           ; BSR set to: 1
 20178                           ;DisplayProtocol.h: 144: } else if (actualScreen == 2 || actualScreen == 3
 20179  004696  0012               	return	
 20180  004698                     i1l7973:
 20181                           
 20182                           ; BSR set to: 1
 20183                           ;DisplayProtocol.h: 145: || actualScreen == 10 || actualScreen == 11) {
 20184  004698  0E02               	movlw	2
 20185  00469A  0101               	movlb	1	; () banked
 20186  00469C  19C3               	xorwf	_actualScreen& (0+255),w,b
 20187  00469E  B4D8               	btfsc	status,2,c
 20188  0046A0  D00F               	goto	i1l7981
 20189                           
 20190                           ; BSR set to: 1
 20191  0046A2  0E03               	movlw	3
 20192  0046A4  0101               	movlb	1	; () banked
 20193  0046A6  19C3               	xorwf	_actualScreen& (0+255),w,b
 20194  0046A8  B4D8               	btfsc	status,2,c
 20195  0046AA  D00A               	goto	i1l7981
 20196                           
 20197                           ; BSR set to: 1
 20198  0046AC  0E0A               	movlw	10
 20199  0046AE  0101               	movlb	1	; () banked
 20200  0046B0  19C3               	xorwf	_actualScreen& (0+255),w,b
 20201  0046B2  B4D8               	btfsc	status,2,c
 20202  0046B4  D005               	goto	i1l7981
 20203                           
 20204                           ; BSR set to: 1
 20205  0046B6  0E0B               	movlw	11
 20206  0046B8  0101               	movlb	1	; () banked
 20207  0046BA  19C3               	xorwf	_actualScreen& (0+255),w,b
 20208  0046BC  A4D8               	btfss	status,2,c
 20209  0046BE  D011               	goto	i1l7987
 20210  0046C0                     i1l7981:
 20211                           
 20212                           ; BSR set to: 1
 20213                           ;DisplayProtocol.h: 146: selSN = !selSN;
 20214  0046C0  0101               	movlb	1	; () banked
 20215  0046C2  51CC               	movf	_selSN& (0+255),w,b
 20216  0046C4  A4D8               	btfss	status,2,c
 20217  0046C6  D002               	goto	i1u1104_20
 20218  0046C8  0E01               	movlw	1
 20219  0046CA  D001               	goto	i1u1105_20
 20220  0046CC                     i1u1104_20:
 20221  0046CC  0E00               	movlw	0
 20222  0046CE                     i1u1105_20:
 20223  0046CE  0101               	movlb	1	; () banked
 20224  0046D0  6FCC               	movwf	_selSN& (0+255),b
 20225                           
 20226                           ; BSR set to: 1
 20227                           ;DisplayProtocol.h: 147: if(selSN > 1)
 20228  0046D2  0E01               	movlw	1
 20229  0046D4  0101               	movlb	1	; () banked
 20230  0046D6  65CC               	cpfsgt	_selSN& (0+255),b
 20231  0046D8  0012               	return	
 20232                           
 20233                           ; BSR set to: 1
 20234                           ;DisplayProtocol.h: 148: selSN = 0;
 20235  0046DA  0E00               	movlw	0
 20236  0046DC  0101               	movlb	1	; () banked
 20237  0046DE  6FCC               	movwf	_selSN& (0+255),b
 20238                           
 20239                           ; BSR set to: 1
 20240                           ;DisplayProtocol.h: 149: }else if(actualScreen == 5) {
 20241  0046E0  0012               	return	
 20242  0046E2                     i1l7987:
 20243                           
 20244                           ; BSR set to: 1
 20245  0046E2  0E05               	movlw	5
 20246  0046E4  0101               	movlb	1	; () banked
 20247  0046E6  19C3               	xorwf	_actualScreen& (0+255),w,b
 20248  0046E8  B4D8               	btfsc	status,2,c
 20249  0046EA  D008               	goto	i1l7997
 20250  0046EC  D013               	goto	i1l7999
 20251  0046EE                     i1l7991:
 20252                           
 20253                           ; BSR set to: 1
 20254                           ;DisplayProtocol.h: 154: chanValDigUP();
 20255  0046EE  ECE6  F025         	call	i1_chanValDigUP	;wreg free
 20256                           
 20257                           ;DisplayProtocol.h: 155: break;
 20258  0046F2  0012               	return	
 20259  0046F4                     i1l7993:
 20260                           
 20261                           ;DisplayProtocol.h: 157: chanVals++;
 20262  0046F4  0101               	movlb	1	; () banked
 20263  0046F6  4BBA               	infsnz	_chanVals& (0+255),f,b
 20264  0046F8  2BBB               	incf	(_chanVals+1)& (0+255),f,b
 20265                           
 20266                           ; BSR set to: 1
 20267                           ;DisplayProtocol.h: 159: }
 20268                           ;DisplayProtocol.h: 160: }
 20269                           
 20270                           ;DisplayProtocol.h: 158: break;
 20271  0046FA  0012               	return	
 20272  0046FC                     i1l7997:
 20273                           
 20274                           ; BSR set to: 1
 20275  0046FC  0101               	movlb	1	; () banked
 20276  0046FE  51CA               	movf	_menuSection& (0+255),w,b
 20277                           
 20278                           ; Switch size 1, requested type "space"
 20279                           ; Number of cases is 3, Range of values is 0 to 2
 20280                           ; switch strategies available:
 20281                           ; Name         Instructions Cycles
 20282                           ; simple_byte           10     6 (average)
 20283                           ;	Chosen strategy is simple_byte
 20284  004700  0A00               	xorlw	0	; case 0
 20285  004702  B4D8               	btfsc	status,2,c
 20286  004704  0012               	return	
 20287  004706  0A01               	xorlw	1	; case 1
 20288  004708  B4D8               	btfsc	status,2,c
 20289  00470A  D7F1               	goto	i1l7991
 20290  00470C  0A03               	xorlw	3	; case 2
 20291  00470E  A4D8               	btfss	status,2,c
 20292                           
 20293                           ; BSR set to: 1
 20294                           ;DisplayProtocol.h: 161: }else if(actualScreen == 12)
 20295  004710  0012               	return	
 20296  004712  D7F0               	goto	i1l7993
 20297  004714                     i1l7999:
 20298                           
 20299                           ; BSR set to: 1
 20300  004714  0E0C               	movlw	12
 20301  004716  0101               	movlb	1	; () banked
 20302  004718  19C3               	xorwf	_actualScreen& (0+255),w,b
 20303  00471A  A4D8               	btfss	status,2,c
 20304  00471C  0012               	return	
 20305                           
 20306                           ; BSR set to: 1
 20307                           ;DisplayProtocol.h: 162: chanValDigUP();
 20308  00471E  ECE6  F025         	call	i1_chanValDigUP	;wreg free
 20309  004722  0012               	return	
 20310  004724                     __end_ofi1_pressUP:
 20311                           	opt stack 0
 20312                           pclatu	equ	0xFFB
 20313                           pclath	equ	0xFFA
 20314                           tblptru	equ	0xFF8
 20315                           tblptrh	equ	0xFF7
 20316                           tblptrl	equ	0xFF6
 20317                           tablat	equ	0xFF5
 20318                           prodh	equ	0xFF4
 20319                           prodl	equ	0xFF3
 20320                           intcon	equ	0xFF2
 20321                           postinc0	equ	0xFEE
 20322                           fsr0h	equ	0xFEA
 20323                           fsr0l	equ	0xFE9
 20324                           wreg	equ	0xFE8
 20325                           postdec1	equ	0xFE5
 20326                           fsr1h	equ	0xFE2
 20327                           fsr1l	equ	0xFE1
 20328                           bsr	equ	0xFE0
 20329                           indf2	equ	0xFDF
 20330                           postinc2	equ	0xFDE
 20331                           postdec2	equ	0xFDD
 20332                           plusw2	equ	0xFDB
 20333                           fsr2h	equ	0xFDA
 20334                           fsr2l	equ	0xFD9
 20335                           status	equ	0xFD8
 20336                           
 20337 ;; *************** function i1_chanValDigUP *****************
 20338 ;; Defined at:
 20339 ;;		line 28 in file "source/DisplayProtocol.h"
 20340 ;; Parameters:    Size  Location     Type
 20341 ;;		None
 20342 ;; Auto vars:     Size  Location     Type
 20343 ;;		None
 20344 ;; Return value:  Size  Location     Type
 20345 ;;                  1    wreg      void 
 20346 ;; Registers used:
 20347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20348 ;; Tracked objects:
 20349 ;;		On entry : 0/0
 20350 ;;		On exit  : 0/0
 20351 ;;		Unchanged: 0/0
 20352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20353 ;;      Params:         0       0       0       0       0       0       0
 20354 ;;      Locals:         0       0       0       0       0       0       0
 20355 ;;      Temps:          0       5       0       0       0       0       0
 20356 ;;      Totals:         0       5       0       0       0       0       0
 20357 ;;Total ram usage:        5 bytes
 20358 ;; Hardware stack levels used:    1
 20359 ;; Hardware stack levels required when called:    4
 20360 ;; This function calls:
 20361 ;;		Nothing
 20362 ;; This function is called by:
 20363 ;;		i1_pressUP
 20364 ;; This function uses a non-reentrant model
 20365 ;;
 20366                           
 20367                           	psect	text88
 20368  004BCC                     __ptext88:
 20369                           	opt stack 0
 20370  004BCC                     i1_chanValDigUP:
 20371                           	opt stack 13
 20372                           
 20373                           ;DisplayProtocol.h: 29: chanValdig[chanValSection]++;
 20374                           
 20375                           ;incstack = 0
 20376  004BCC  0101               	movlb	1	; () banked
 20377  004BCE  519D               	movf	_chanValSection& (0+255),w,b
 20378  004BD0  0D01               	mullw	1
 20379  004BD2  0EA9               	movlw	low _chanValdig
 20380  004BD4  24F3               	addwf	prodl,w,c
 20381  004BD6  6ED9               	movwf	fsr2l,c
 20382  004BD8  0E01               	movlw	high _chanValdig
 20383  004BDA  20F4               	addwfc	prodh,w,c
 20384  004BDC  6EDA               	movwf	fsr2h,c
 20385  004BDE  2ADF               	incf	indf2,f,c
 20386                           
 20387                           ;DisplayProtocol.h: 30: if(chanValdig[chanValSection] > 9) {
 20388  004BE0  0101               	movlb	1	; () banked
 20389  004BE2  519D               	movf	_chanValSection& (0+255),w,b
 20390  004BE4  0D01               	mullw	1
 20391  004BE6  0EA9               	movlw	low _chanValdig
 20392  004BE8  24F3               	addwf	prodl,w,c
 20393  004BEA  6ED9               	movwf	fsr2l,c
 20394  004BEC  0E01               	movlw	high _chanValdig
 20395  004BEE  20F4               	addwfc	prodh,w,c
 20396  004BF0  6EDA               	movwf	fsr2h,c
 20397  004BF2  50DF               	movf	indf2,w,c
 20398  004BF4  0A80               	xorlw	128
 20399  004BF6  0F76               	addlw	-138
 20400  004BF8  A0D8               	btfss	status,0,c
 20401  004BFA  0012               	return	
 20402                           
 20403                           ; BSR set to: 1
 20404                           ;DisplayProtocol.h: 31: chanValdig[chanValSection] = 0;
 20405  004BFC  0101               	movlb	1	; () banked
 20406  004BFE  519D               	movf	_chanValSection& (0+255),w,b
 20407  004C00  0D01               	mullw	1
 20408  004C02  0EA9               	movlw	low _chanValdig
 20409  004C04  24F3               	addwf	prodl,w,c
 20410  004C06  6ED9               	movwf	fsr2l,c
 20411  004C08  0E01               	movlw	high _chanValdig
 20412  004C0A  20F4               	addwfc	prodh,w,c
 20413  004C0C  6EDA               	movwf	fsr2h,c
 20414  004C0E  0E00               	movlw	0
 20415  004C10  6EDF               	movwf	indf2,c
 20416                           
 20417                           ; BSR set to: 1
 20418                           ;DisplayProtocol.h: 32: if(chanValSection > 1 && chanValdig[chanValSection - 1] < 9)
 20419  004C12  0101               	movlb	1	; () banked
 20420  004C14  519D               	movf	_chanValSection& (0+255),w,b
 20421  004C16  0A80               	xorlw	128
 20422  004C18  0F7E               	addlw	-130
 20423  004C1A  A0D8               	btfss	status,0,c
 20424  004C1C  0012               	return	
 20425                           
 20426                           ; BSR set to: 1
 20427  004C1E  0EFF               	movlw	255
 20428  004C20  0100               	movlb	0	; () banked
 20429  004C22  6F60               	movwf	??i1_chanValDigUP& (0+255),b
 20430  004C24  0EFF               	movlw	255
 20431  004C26  0100               	movlb	0	; () banked
 20432  004C28  6F61               	movwf	(??i1_chanValDigUP+1)& (0+255),b
 20433  004C2A  C19D  F062         	movff	_chanValSection,??i1_chanValDigUP+2
 20434  004C2E  0100               	movlb	0	; () banked
 20435  004C30  6B63               	clrf	(??i1_chanValDigUP+3)& (0+255),b
 20436  004C32  BF62               	btfsc	(??i1_chanValDigUP+2)& (0+255),7,b
 20437  004C34  0763               	decf	(??i1_chanValDigUP+3)& (0+255),f,b
 20438  004C36  0100               	movlb	0	; () banked
 20439  004C38  5160               	movf	??i1_chanValDigUP& (0+255),w,b
 20440  004C3A  0100               	movlb	0	; () banked
 20441  004C3C  2762               	addwf	(??i1_chanValDigUP+2)& (0+255),f,b
 20442  004C3E  0100               	movlb	0	; () banked
 20443  004C40  5161               	movf	(??i1_chanValDigUP+1)& (0+255),w,b
 20444  004C42  0100               	movlb	0	; () banked
 20445  004C44  2363               	addwfc	(??i1_chanValDigUP+3)& (0+255),f,b
 20446  004C46  0EA9               	movlw	low _chanValdig
 20447  004C48  0100               	movlb	0	; () banked
 20448  004C4A  2562               	addwf	(??i1_chanValDigUP+2)& (0+255),w,b
 20449  004C4C  6ED9               	movwf	fsr2l,c
 20450  004C4E  0E01               	movlw	high _chanValdig
 20451  004C50  0100               	movlb	0	; () banked
 20452  004C52  2163               	addwfc	(??i1_chanValDigUP+3)& (0+255),w,b
 20453  004C54  6EDA               	movwf	fsr2h,c
 20454  004C56  50DF               	movf	indf2,w,c
 20455  004C58  0A80               	xorlw	128
 20456  004C5A  0F77               	addlw	-137
 20457  004C5C  B0D8               	btfsc	status,0,c
 20458  004C5E  0012               	return	
 20459                           
 20460                           ; BSR set to: 0
 20461                           ;DisplayProtocol.h: 33: chanValdig[chanValSection - 1]++;
 20462  004C60  0EFF               	movlw	255
 20463  004C62  0100               	movlb	0	; () banked
 20464  004C64  6F60               	movwf	??i1_chanValDigUP& (0+255),b
 20465  004C66  0EFF               	movlw	255
 20466  004C68  0100               	movlb	0	; () banked
 20467  004C6A  6F61               	movwf	(??i1_chanValDigUP+1)& (0+255),b
 20468  004C6C  C19D  F062         	movff	_chanValSection,??i1_chanValDigUP+2
 20469  004C70  0100               	movlb	0	; () banked
 20470  004C72  6B63               	clrf	(??i1_chanValDigUP+3)& (0+255),b
 20471  004C74  BF62               	btfsc	(??i1_chanValDigUP+2)& (0+255),7,b
 20472  004C76  0763               	decf	(??i1_chanValDigUP+3)& (0+255),f,b
 20473  004C78  0100               	movlb	0	; () banked
 20474  004C7A  5160               	movf	??i1_chanValDigUP& (0+255),w,b
 20475  004C7C  0100               	movlb	0	; () banked
 20476  004C7E  2762               	addwf	(??i1_chanValDigUP+2)& (0+255),f,b
 20477  004C80  0100               	movlb	0	; () banked
 20478  004C82  5161               	movf	(??i1_chanValDigUP+1)& (0+255),w,b
 20479  004C84  0100               	movlb	0	; () banked
 20480  004C86  2363               	addwfc	(??i1_chanValDigUP+3)& (0+255),f,b
 20481  004C88  0EA9               	movlw	low _chanValdig
 20482  004C8A  0100               	movlb	0	; () banked
 20483  004C8C  2562               	addwf	(??i1_chanValDigUP+2)& (0+255),w,b
 20484  004C8E  6ED9               	movwf	fsr2l,c
 20485  004C90  0E01               	movlw	high _chanValdig
 20486  004C92  0100               	movlb	0	; () banked
 20487  004C94  2163               	addwfc	(??i1_chanValDigUP+3)& (0+255),w,b
 20488  004C96  6EDA               	movwf	fsr2h,c
 20489  004C98  2ADF               	incf	indf2,f,c
 20490                           
 20491                           ; BSR set to: 0
 20492  004C9A  0012               	return	
 20493  004C9C                     __end_ofi1_chanValDigUP:
 20494                           	opt stack 0
 20495                           pclatu	equ	0xFFB
 20496                           pclath	equ	0xFFA
 20497                           tblptru	equ	0xFF8
 20498                           tblptrh	equ	0xFF7
 20499                           tblptrl	equ	0xFF6
 20500                           tablat	equ	0xFF5
 20501                           prodh	equ	0xFF4
 20502                           prodl	equ	0xFF3
 20503                           intcon	equ	0xFF2
 20504                           postinc0	equ	0xFEE
 20505                           fsr0h	equ	0xFEA
 20506                           fsr0l	equ	0xFE9
 20507                           wreg	equ	0xFE8
 20508                           postdec1	equ	0xFE5
 20509                           fsr1h	equ	0xFE2
 20510                           fsr1l	equ	0xFE1
 20511                           bsr	equ	0xFE0
 20512                           indf2	equ	0xFDF
 20513                           postinc2	equ	0xFDE
 20514                           postdec2	equ	0xFDD
 20515                           plusw2	equ	0xFDB
 20516                           fsr2h	equ	0xFDA
 20517                           fsr2l	equ	0xFD9
 20518                           status	equ	0xFD8
 20519                           
 20520 ;; *************** function i1_pressRETRO *****************
 20521 ;; Defined at:
 20522 ;;		line 234 in file "source/DisplayProtocol.h"
 20523 ;; Parameters:    Size  Location     Type
 20524 ;;		None
 20525 ;; Auto vars:     Size  Location     Type
 20526 ;;		None
 20527 ;; Return value:  Size  Location     Type
 20528 ;;                  1    wreg      void 
 20529 ;; Registers used:
 20530 ;;		wreg, status,2, status,0, cstack
 20531 ;; Tracked objects:
 20532 ;;		On entry : 0/0
 20533 ;;		On exit  : 0/0
 20534 ;;		Unchanged: 0/0
 20535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20536 ;;      Params:         0       0       0       0       0       0       0
 20537 ;;      Locals:         0       0       0       0       0       0       0
 20538 ;;      Temps:          0       0       0       0       0       0       0
 20539 ;;      Totals:         0       0       0       0       0       0       0
 20540 ;;Total ram usage:        0 bytes
 20541 ;; Hardware stack levels used:    1
 20542 ;; Hardware stack levels required when called:    6
 20543 ;; This function calls:
 20544 ;;		i1_initProtocoll
 20545 ;; This function is called by:
 20546 ;;		_UARTint
 20547 ;; This function uses a non-reentrant model
 20548 ;;
 20549                           
 20550                           	psect	text89
 20551  00535C                     __ptext89:
 20552                           	opt stack 0
 20553  00535C                     i1_pressRETRO:
 20554                           	opt stack 12
 20555                           
 20556                           ;DisplayProtocol.h: 235: if (actualScreen == 1) {
 20557                           
 20558                           ;incstack = 0
 20559  00535C  0101               	movlb	1	; () banked
 20560  00535E  05C3               	decf	_actualScreen& (0+255),w,b
 20561  005360  A4D8               	btfss	status,2,c
 20562  005362  D004               	goto	i1l8087
 20563                           
 20564                           ; BSR set to: 1
 20565                           ;DisplayProtocol.h: 236: actualScreen = 0;
 20566  005364  0E00               	movlw	0
 20567  005366  0101               	movlb	1	; () banked
 20568  005368  6FC3               	movwf	_actualScreen& (0+255),b
 20569                           
 20570                           ;DisplayProtocol.h: 237: }else if (actualScreen == 2 || actualScreen == 3
 20571  00536A  0012               	return	
 20572  00536C                     i1l8087:
 20573                           
 20574                           ; BSR set to: 1
 20575                           ;DisplayProtocol.h: 238: || actualScreen == 10) {
 20576  00536C  0E02               	movlw	2
 20577  00536E  0101               	movlb	1	; () banked
 20578  005370  19C3               	xorwf	_actualScreen& (0+255),w,b
 20579  005372  B4D8               	btfsc	status,2,c
 20580  005374  D00A               	goto	i1l653
 20581                           
 20582                           ; BSR set to: 1
 20583  005376  0E03               	movlw	3
 20584  005378  0101               	movlb	1	; () banked
 20585  00537A  19C3               	xorwf	_actualScreen& (0+255),w,b
 20586  00537C  B4D8               	btfsc	status,2,c
 20587  00537E  D005               	goto	i1l653
 20588                           
 20589                           ; BSR set to: 1
 20590  005380  0E0A               	movlw	10
 20591  005382  0101               	movlb	1	; () banked
 20592  005384  19C3               	xorwf	_actualScreen& (0+255),w,b
 20593  005386  A4D8               	btfss	status,2,c
 20594  005388  D003               	goto	i1l8093
 20595  00538A                     i1l653:
 20596                           
 20597                           ; BSR set to: 1
 20598                           ;DisplayProtocol.h: 239: actualScreen = tempLastScreen;
 20599  00538A  C0BE  F1C3         	movff	_tempLastScreen,_actualScreen
 20600                           
 20601                           ;DisplayProtocol.h: 240: }else if(actualScreen == 5) {
 20602  00538E  0012               	return	
 20603  005390                     i1l8093:
 20604                           
 20605                           ; BSR set to: 1
 20606  005390  0E05               	movlw	5
 20607  005392  0101               	movlb	1	; () banked
 20608  005394  19C3               	xorwf	_actualScreen& (0+255),w,b
 20609  005396  A4D8               	btfss	status,2,c
 20610  005398  D015               	goto	i1l8105
 20611                           
 20612                           ; BSR set to: 1
 20613                           ;DisplayProtocol.h: 241: if(menuSection != 2) {
 20614  00539A  0E02               	movlw	2
 20615  00539C  0101               	movlb	1	; () banked
 20616  00539E  19CA               	xorwf	_menuSection& (0+255),w,b
 20617  0053A0  B4D8               	btfsc	status,2,c
 20618  0053A2  D00C               	goto	i1l8103
 20619                           
 20620                           ; BSR set to: 1
 20621                           ;DisplayProtocol.h: 242: chanValSection++;
 20622  0053A4  0101               	movlb	1	; () banked
 20623  0053A6  2B9D               	incf	_chanValSection& (0+255),f,b
 20624                           
 20625                           ; BSR set to: 1
 20626                           ;DisplayProtocol.h: 243: if(chanValSection > 5)
 20627  0053A8  0101               	movlb	1	; () banked
 20628  0053AA  519D               	movf	_chanValSection& (0+255),w,b
 20629  0053AC  0A80               	xorlw	128
 20630  0053AE  0F7A               	addlw	-134
 20631  0053B0  A0D8               	btfss	status,0,c
 20632  0053B2  0012               	return	
 20633                           
 20634                           ; BSR set to: 1
 20635                           ;DisplayProtocol.h: 244: chanValSection = 0;
 20636  0053B4  0E00               	movlw	0
 20637  0053B6  0101               	movlb	1	; () banked
 20638  0053B8  6F9D               	movwf	_chanValSection& (0+255),b
 20639                           
 20640                           ; BSR set to: 1
 20641                           ;DisplayProtocol.h: 245: }else
 20642  0053BA  0012               	return	
 20643  0053BC                     i1l8103:
 20644                           
 20645                           ; BSR set to: 1
 20646                           ;DisplayProtocol.h: 246: actualScreen = 4;
 20647  0053BC  0E04               	movlw	4
 20648  0053BE  0101               	movlb	1	; () banked
 20649  0053C0  6FC3               	movwf	_actualScreen& (0+255),b
 20650                           
 20651                           ; BSR set to: 1
 20652                           ;DisplayProtocol.h: 247: }else if(actualScreen == 11)
 20653  0053C2  0012               	return	
 20654  0053C4                     i1l8105:
 20655                           
 20656                           ; BSR set to: 1
 20657  0053C4  0E0B               	movlw	11
 20658  0053C6  0101               	movlb	1	; () banked
 20659  0053C8  19C3               	xorwf	_actualScreen& (0+255),w,b
 20660  0053CA  A4D8               	btfss	status,2,c
 20661  0053CC  D004               	goto	i1l8109
 20662                           
 20663                           ; BSR set to: 1
 20664                           ;DisplayProtocol.h: 248: actualScreen = 4;
 20665  0053CE  0E04               	movlw	4
 20666  0053D0  0101               	movlb	1	; () banked
 20667  0053D2  6FC3               	movwf	_actualScreen& (0+255),b
 20668  0053D4  0012               	return	
 20669  0053D6                     i1l8109:
 20670                           
 20671                           ; BSR set to: 1
 20672                           ;DisplayProtocol.h: 249: else if(actualScreen == 12) {
 20673  0053D6  0E0C               	movlw	12
 20674  0053D8  0101               	movlb	1	; () banked
 20675  0053DA  19C3               	xorwf	_actualScreen& (0+255),w,b
 20676  0053DC  A4D8               	btfss	status,2,c
 20677  0053DE  D00C               	goto	i1l8117
 20678                           
 20679                           ; BSR set to: 1
 20680                           ;DisplayProtocol.h: 250: chanValSection++;
 20681  0053E0  0101               	movlb	1	; () banked
 20682  0053E2  2B9D               	incf	_chanValSection& (0+255),f,b
 20683                           
 20684                           ; BSR set to: 1
 20685                           ;DisplayProtocol.h: 251: if(chanValSection > 5)
 20686  0053E4  0101               	movlb	1	; () banked
 20687  0053E6  519D               	movf	_chanValSection& (0+255),w,b
 20688  0053E8  0A80               	xorlw	128
 20689  0053EA  0F7A               	addlw	-134
 20690  0053EC  A0D8               	btfss	status,0,c
 20691  0053EE  0012               	return	
 20692                           
 20693                           ; BSR set to: 1
 20694                           ;DisplayProtocol.h: 252: chanValSection = 0;
 20695  0053F0  0E00               	movlw	0
 20696  0053F2  0101               	movlb	1	; () banked
 20697  0053F4  6F9D               	movwf	_chanValSection& (0+255),b
 20698                           
 20699                           ; BSR set to: 1
 20700                           ;DisplayProtocol.h: 253: }else if(actualScreen == 13) {
 20701  0053F6  0012               	return	
 20702  0053F8                     i1l8117:
 20703                           
 20704                           ; BSR set to: 1
 20705  0053F8  0E0D               	movlw	13
 20706  0053FA  0101               	movlb	1	; () banked
 20707  0053FC  19C3               	xorwf	_actualScreen& (0+255),w,b
 20708  0053FE  A4D8               	btfss	status,2,c
 20709  005400  0012               	return	
 20710                           
 20711                           ; BSR set to: 1
 20712                           ;DisplayProtocol.h: 254: initProtocoll(1);
 20713  005402  0E01               	movlw	1
 20714  005404  EC59  F034         	call	i1_initProtocoll
 20715  005408  0012               	return	
 20716  00540A                     __end_ofi1_pressRETRO:
 20717                           	opt stack 0
 20718                           pclatu	equ	0xFFB
 20719                           pclath	equ	0xFFA
 20720                           tblptru	equ	0xFF8
 20721                           tblptrh	equ	0xFF7
 20722                           tblptrl	equ	0xFF6
 20723                           tablat	equ	0xFF5
 20724                           prodh	equ	0xFF4
 20725                           prodl	equ	0xFF3
 20726                           intcon	equ	0xFF2
 20727                           postinc0	equ	0xFEE
 20728                           fsr0h	equ	0xFEA
 20729                           fsr0l	equ	0xFE9
 20730                           wreg	equ	0xFE8
 20731                           postdec1	equ	0xFE5
 20732                           fsr1h	equ	0xFE2
 20733                           fsr1l	equ	0xFE1
 20734                           bsr	equ	0xFE0
 20735                           indf2	equ	0xFDF
 20736                           postinc2	equ	0xFDE
 20737                           postdec2	equ	0xFDD
 20738                           plusw2	equ	0xFDB
 20739                           fsr2h	equ	0xFDA
 20740                           fsr2l	equ	0xFD9
 20741                           status	equ	0xFD8
 20742                           
 20743 ;; *************** function i1_pressENTER *****************
 20744 ;; Defined at:
 20745 ;;		line 280 in file "source/DisplayProtocol.h"
 20746 ;; Parameters:    Size  Location     Type
 20747 ;;		None
 20748 ;; Auto vars:     Size  Location     Type
 20749 ;;		None
 20750 ;; Return value:  Size  Location     Type
 20751 ;;                  1    wreg      void 
 20752 ;; Registers used:
 20753 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20754 ;; Tracked objects:
 20755 ;;		On entry : 0/0
 20756 ;;		On exit  : 0/0
 20757 ;;		Unchanged: 0/0
 20758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20759 ;;      Params:         0       0       0       0       0       0       0
 20760 ;;      Locals:         0       0       0       0       0       0       0
 20761 ;;      Temps:          0       0       0       0       0       0       0
 20762 ;;      Totals:         0       0       0       0       0       0       0
 20763 ;;Total ram usage:        0 bytes
 20764 ;; Hardware stack levels used:    1
 20765 ;; Hardware stack levels required when called:    9
 20766 ;; This function calls:
 20767 ;;		i1_checkPass
 20768 ;;		i1_confirmEdition
 20769 ;;		i1_desintegrator
 20770 ;;		i1_initCalib
 20771 ;;		i1_initProtocoll
 20772 ;;		i1_setPWM2duty
 20773 ;; This function is called by:
 20774 ;;		_UARTint
 20775 ;; This function uses a non-reentrant model
 20776 ;;
 20777                           
 20778                           	psect	text90
 20779  00217A                     __ptext90:
 20780                           	opt stack 0
 20781  00217A                     i1_pressENTER:
 20782                           	opt stack 9
 20783                           
 20784                           ;DisplayProtocol.h: 281: if (actualScreen == 1) {
 20785                           
 20786                           ;incstack = 0
 20787  00217A  0101               	movlb	1	; () banked
 20788  00217C  05C3               	decf	_actualScreen& (0+255),w,b
 20789  00217E  A4D8               	btfss	status,2,c
 20790  002180  D018               	goto	i1l8155
 20791                           
 20792                           ; BSR set to: 1
 20793                           ;DisplayProtocol.h: 282: passSection++;
 20794  002182  0101               	movlb	1	; () banked
 20795  002184  2BCB               	incf	_passSection& (0+255),f,b
 20796                           
 20797                           ; BSR set to: 1
 20798                           ;DisplayProtocol.h: 283: if (passSection > 3) {
 20799  002186  0101               	movlb	1	; () banked
 20800  002188  51CB               	movf	_passSection& (0+255),w,b
 20801  00218A  0A80               	xorlw	128
 20802  00218C  0F7C               	addlw	-132
 20803  00218E  A0D8               	btfss	status,0,c
 20804  002190  0012               	return	
 20805                           
 20806                           ; BSR set to: 1
 20807                           ;DisplayProtocol.h: 284: passSection = 0;
 20808  002192  0E00               	movlw	0
 20809  002194  0101               	movlb	1	; () banked
 20810  002196  6FCB               	movwf	_passSection& (0+255),b
 20811                           
 20812                           ; BSR set to: 1
 20813                           ;DisplayProtocol.h: 285: if (checkPass())
 20814  002198  ECCC  F02E         	call	i1_checkPass	;wreg free
 20815  00219C  0900               	iorlw	0
 20816  00219E  B4D8               	btfsc	status,2,c
 20817  0021A0  D004               	goto	i1l8153
 20818                           
 20819                           ;DisplayProtocol.h: 286: actualScreen = 8;
 20820  0021A2  0E08               	movlw	8
 20821  0021A4  0101               	movlb	1	; () banked
 20822  0021A6  6FC3               	movwf	_actualScreen& (0+255),b
 20823  0021A8  0012               	return	
 20824  0021AA                     i1l8153:
 20825                           
 20826                           ;DisplayProtocol.h: 287: else
 20827                           ;DisplayProtocol.h: 288: actualScreen = 7;
 20828  0021AA  0E07               	movlw	7
 20829  0021AC  0101               	movlb	1	; () banked
 20830  0021AE  6FC3               	movwf	_actualScreen& (0+255),b
 20831                           
 20832                           ; BSR set to: 1
 20833                           ;DisplayProtocol.h: 289: }
 20834                           ;DisplayProtocol.h: 290: }else if(actualScreen == 4) {
 20835                           
 20836                           ; BSR set to: 1
 20837  0021B0  0012               	return	
 20838  0021B2                     i1l8155:
 20839                           
 20840                           ; BSR set to: 1
 20841  0021B2  0E04               	movlw	4
 20842  0021B4  0101               	movlb	1	; () banked
 20843  0021B6  19C3               	xorwf	_actualScreen& (0+255),w,b
 20844  0021B8  B4D8               	btfsc	status,2,c
 20845  0021BA  D038               	goto	i1l8179
 20846  0021BC  D046               	goto	i1l8181
 20847  0021BE                     i1l691:
 20848                           
 20849                           ; BSR set to: 1
 20850                           ;DisplayProtocol.h: 293: tempLastScreen = actualScreen;
 20851  0021BE  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 20852                           
 20853                           ; BSR set to: 1
 20854                           ;DisplayProtocol.h: 294: if(processStarted) {
 20855  0021C2  0100               	movlb	0	; () banked
 20856  0021C4  51BB               	movf	_processStarted& (0+255),w,b
 20857  0021C6  B4D8               	btfsc	status,2,c
 20858  0021C8  D007               	goto	i1l8163
 20859                           
 20860                           ; BSR set to: 0
 20861                           ;DisplayProtocol.h: 295: actualScreen = 3;
 20862  0021CA  0E03               	movlw	3
 20863  0021CC  0101               	movlb	1	; () banked
 20864  0021CE  6FC3               	movwf	_actualScreen& (0+255),b
 20865                           
 20866                           ;DisplayProtocol.h: 296: selSN = 0;
 20867  0021D0  0E00               	movlw	0
 20868  0021D2  0101               	movlb	1	; () banked
 20869  0021D4  6FCC               	movwf	_selSN& (0+255),b
 20870                           
 20871                           ;DisplayProtocol.h: 297: }else {
 20872  0021D6  0012               	return	
 20873  0021D8                     i1l8163:
 20874                           
 20875                           ;DisplayProtocol.h: 298: actualScreen = 2;
 20876  0021D8  0E02               	movlw	2
 20877  0021DA  0101               	movlb	1	; () banked
 20878  0021DC  6FC3               	movwf	_actualScreen& (0+255),b
 20879                           
 20880                           ;DisplayProtocol.h: 299: selSN = 1;
 20881  0021DE  0E01               	movlw	1
 20882  0021E0  0101               	movlb	1	; () banked
 20883  0021E2  6FCC               	movwf	_selSN& (0+255),b
 20884                           
 20885                           ; BSR set to: 1
 20886                           ;DisplayProtocol.h: 300: }
 20887                           ;DisplayProtocol.h: 301: break;
 20888  0021E4  0012               	return	
 20889  0021E6                     i1l695:
 20890                           
 20891                           ; BSR set to: 1
 20892                           ;DisplayProtocol.h: 303: chanValf = kgXcorte;
 20893  0021E6  C18F  F1B7         	movff	_kgXcorte,_chanValf
 20894  0021EA  C190  F1B8         	movff	_kgXcorte+1,_chanValf+1
 20895  0021EE  C191  F1B9         	movff	_kgXcorte+2,_chanValf+2
 20896                           
 20897                           ; BSR set to: 1
 20898                           ;DisplayProtocol.h: 304: desintegrator();
 20899  0021F2  ECEC  F016         	call	i1_desintegrator	;wreg free
 20900                           
 20901                           ;DisplayProtocol.h: 305: actualScreen = 5;
 20902  0021F6  0E05               	movlw	5
 20903  0021F8  0101               	movlb	1	; () banked
 20904  0021FA  6FC3               	movwf	_actualScreen& (0+255),b
 20905                           
 20906                           ;DisplayProtocol.h: 306: break;
 20907  0021FC  0012               	return	
 20908  0021FE                     i1l696:
 20909                           
 20910                           ; BSR set to: 1
 20911                           ;DisplayProtocol.h: 308: tempLastScreen = actualScreen;
 20912  0021FE  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 20913                           
 20914                           ;DisplayProtocol.h: 309: chanVals = numCortes;
 20915  002202  C0C6  F1BA         	movff	_numCortes,_chanVals
 20916  002206  C0C7  F1BB         	movff	_numCortes+1,_chanVals+1
 20917                           
 20918                           ; BSR set to: 1
 20919                           ;DisplayProtocol.h: 310: actualScreen = 5;
 20920  00220A  0E05               	movlw	5
 20921  00220C  0101               	movlb	1	; () banked
 20922  00220E  6FC3               	movwf	_actualScreen& (0+255),b
 20923                           
 20924                           ;DisplayProtocol.h: 311: break;
 20925  002210  0012               	return	
 20926  002212                     i1l8171:
 20927                           
 20928                           ; BSR set to: 1
 20929                           ;DisplayProtocol.h: 313: if(!processStarted) {
 20930  002212  0100               	movlb	0	; () banked
 20931  002214  51BB               	movf	_processStarted& (0+255),w,b
 20932  002216  A4D8               	btfss	status,2,c
 20933  002218  0012               	return	
 20934                           
 20935                           ; BSR set to: 0
 20936                           ;DisplayProtocol.h: 314: tempLastScreen = actualScreen;
 20937  00221A  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 20938                           
 20939                           ; BSR set to: 0
 20940                           ;DisplayProtocol.h: 315: selSN = 1;
 20941  00221E  0E01               	movlw	1
 20942  002220  0101               	movlb	1	; () banked
 20943  002222  6FCC               	movwf	_selSN& (0+255),b
 20944                           
 20945                           ;DisplayProtocol.h: 316: actualScreen = 11;
 20946  002224  0E0B               	movlw	11
 20947  002226  0101               	movlb	1	; () banked
 20948  002228  6FC3               	movwf	_actualScreen& (0+255),b
 20949                           
 20950                           ; BSR set to: 1
 20951                           ;DisplayProtocol.h: 319: }
 20952                           ;DisplayProtocol.h: 320: }
 20953                           
 20954                           ; BSR set to: 1
 20955                           ;DisplayProtocol.h: 317: }
 20956                           ;DisplayProtocol.h: 318: break;
 20957  00222A  0012               	return	
 20958  00222C                     i1l8179:
 20959                           
 20960                           ; BSR set to: 1
 20961  00222C  0101               	movlb	1	; () banked
 20962  00222E  51CA               	movf	_menuSection& (0+255),w,b
 20963                           
 20964                           ; Switch size 1, requested type "space"
 20965                           ; Number of cases is 4, Range of values is 0 to 3
 20966                           ; switch strategies available:
 20967                           ; Name         Instructions Cycles
 20968                           ; simple_byte           13     7 (average)
 20969                           ;	Chosen strategy is simple_byte
 20970  002230  0A00               	xorlw	0	; case 0
 20971  002232  B4D8               	btfsc	status,2,c
 20972  002234  D7C4               	goto	i1l691
 20973  002236  0A01               	xorlw	1	; case 1
 20974  002238  B4D8               	btfsc	status,2,c
 20975  00223A  D7D5               	goto	i1l695
 20976  00223C  0A03               	xorlw	3	; case 2
 20977  00223E  B4D8               	btfsc	status,2,c
 20978  002240  D7DE               	goto	i1l696
 20979  002242  0A01               	xorlw	1	; case 3
 20980  002244  A4D8               	btfss	status,2,c
 20981                           
 20982                           ; BSR set to: 1
 20983                           ;DisplayProtocol.h: 321: }else if(actualScreen == 7)
 20984  002246  0012               	return	
 20985  002248  D7E4               	goto	i1l8171
 20986  00224A                     i1l8181:
 20987                           
 20988                           ; BSR set to: 1
 20989  00224A  0E07               	movlw	7
 20990  00224C  0101               	movlb	1	; () banked
 20991  00224E  19C3               	xorwf	_actualScreen& (0+255),w,b
 20992  002250  A4D8               	btfss	status,2,c
 20993  002252  D004               	goto	i1l8185
 20994                           
 20995                           ; BSR set to: 1
 20996                           ;DisplayProtocol.h: 322: actualScreen = 1;
 20997  002254  0E01               	movlw	1
 20998  002256  0101               	movlb	1	; () banked
 20999  002258  6FC3               	movwf	_actualScreen& (0+255),b
 21000  00225A  0012               	return	
 21001  00225C                     i1l8185:
 21002                           
 21003                           ; BSR set to: 1
 21004                           ;DisplayProtocol.h: 323: else if(actualScreen == 6) {
 21005  00225C  0E06               	movlw	6
 21006  00225E  0101               	movlb	1	; () banked
 21007  002260  19C3               	xorwf	_actualScreen& (0+255),w,b
 21008  002262  B4D8               	btfsc	status,2,c
 21009  002264  0012               	return	
 21010                           
 21011                           ; BSR set to: 1
 21012                           
 21013                           ; BSR set to: 1
 21014                           
 21015                           ; BSR set to: 1
 21016                           ;DisplayProtocol.h: 325: }else if(actualScreen == 5) {
 21017  002266  0E05               	movlw	5
 21018  002268  0101               	movlb	1	; () banked
 21019  00226A  19C3               	xorwf	_actualScreen& (0+255),w,b
 21020  00226C  A4D8               	btfss	status,2,c
 21021  00226E  D018               	goto	i1l8201
 21022                           
 21023                           ; BSR set to: 1
 21024                           ;DisplayProtocol.h: 326: if(menuSection != 2) {
 21025  002270  0E02               	movlw	2
 21026  002272  0101               	movlb	1	; () banked
 21027  002274  19CA               	xorwf	_menuSection& (0+255),w,b
 21028  002276  B4D8               	btfsc	status,2,c
 21029  002278  D009               	goto	i1l8199
 21030                           
 21031                           ; BSR set to: 1
 21032                           ;DisplayProtocol.h: 327: chanValSection--;
 21033  00227A  0101               	movlb	1	; () banked
 21034  00227C  079D               	decf	_chanValSection& (0+255),f,b
 21035                           
 21036                           ; BSR set to: 1
 21037                           ;DisplayProtocol.h: 328: if(chanValSection < 0)
 21038  00227E  0101               	movlb	1	; () banked
 21039  002280  AF9D               	btfss	_chanValSection& (0+255),7,b
 21040  002282  0012               	return	
 21041                           
 21042                           ; BSR set to: 1
 21043                           ;DisplayProtocol.h: 329: chanValSection = 5;
 21044  002284  0E05               	movlw	5
 21045  002286  0101               	movlb	1	; () banked
 21046  002288  6F9D               	movwf	_chanValSection& (0+255),b
 21047                           
 21048                           ; BSR set to: 1
 21049                           ;DisplayProtocol.h: 330: }else
 21050  00228A  0012               	return	
 21051  00228C                     i1l8199:
 21052                           
 21053                           ; BSR set to: 1
 21054                           ;DisplayProtocol.h: 331: confirmEdition(!processStarted);
 21055  00228C  0100               	movlb	0	; () banked
 21056  00228E  51BB               	movf	_processStarted& (0+255),w,b
 21057  002290  A4D8               	btfss	status,2,c
 21058  002292  D002               	goto	i1u1162_20
 21059  002294  0E01               	movlw	1
 21060  002296  D001               	goto	i1u1163_20
 21061  002298                     i1u1162_20:
 21062  002298  0E00               	movlw	0
 21063  00229A                     i1u1163_20:
 21064  00229A  ECF9  F028         	call	i1_confirmEdition
 21065                           
 21066                           ;DisplayProtocol.h: 332: }else if(actualScreen == 2) {
 21067  00229E  0012               	return	
 21068  0022A0                     i1l8201:
 21069  0022A0  0E02               	movlw	2
 21070  0022A2  0101               	movlb	1	; () banked
 21071  0022A4  19C3               	xorwf	_actualScreen& (0+255),w,b
 21072  0022A6  A4D8               	btfss	status,2,c
 21073  0022A8  D013               	goto	i1l8207
 21074                           
 21075                           ; BSR set to: 1
 21076                           ;DisplayProtocol.h: 333: initProtocoll(!selSN);
 21077  0022AA  0101               	movlb	1	; () banked
 21078  0022AC  51CC               	movf	_selSN& (0+255),w,b
 21079  0022AE  A4D8               	btfss	status,2,c
 21080  0022B0  D002               	goto	i1u1165_20
 21081  0022B2  0E01               	movlw	1
 21082  0022B4  D001               	goto	i1u1166_20
 21083  0022B6                     i1u1165_20:
 21084  0022B6  0E00               	movlw	0
 21085  0022B8                     i1u1166_20:
 21086  0022B8  EC59  F034         	call	i1_initProtocoll
 21087                           
 21088                           ;DisplayProtocol.h: 334: processStarted = !selSN;
 21089  0022BC  0101               	movlb	1	; () banked
 21090  0022BE  51CC               	movf	_selSN& (0+255),w,b
 21091  0022C0  A4D8               	btfss	status,2,c
 21092  0022C2  D002               	goto	i1u1167_20
 21093  0022C4  0E01               	movlw	1
 21094  0022C6  D001               	goto	i1u1168_20
 21095  0022C8                     i1u1167_20:
 21096  0022C8  0E00               	movlw	0
 21097  0022CA                     i1u1168_20:
 21098  0022CA  0100               	movlb	0	; () banked
 21099  0022CC  6FBB               	movwf	_processStarted& (0+255),b
 21100                           
 21101                           ;DisplayProtocol.h: 335: }else if(actualScreen == 3) {
 21102  0022CE  0012               	return	
 21103  0022D0                     i1l8207:
 21104  0022D0  0E03               	movlw	3
 21105  0022D2  0101               	movlb	1	; () banked
 21106  0022D4  19C3               	xorwf	_actualScreen& (0+255),w,b
 21107  0022D6  A4D8               	btfss	status,2,c
 21108  0022D8  D011               	goto	i1l8215
 21109                           
 21110                           ; BSR set to: 1
 21111                           ;DisplayProtocol.h: 336: processStarted = selSN;
 21112  0022DA  C1CC  F0BB         	movff	_selSN,_processStarted
 21113                           
 21114                           ;DisplayProtocol.h: 337: actualScreen = tempLastScreen;
 21115  0022DE  C0BE  F1C3         	movff	_tempLastScreen,_actualScreen
 21116                           
 21117                           ;DisplayProtocol.h: 338: LATCbits.LATC4 = 0;
 21118  0022E2  988B               	bcf	3979,4,c	;volatile
 21119                           
 21120                           ; BSR set to: 1
 21121                           ;DisplayProtocol.h: 339: if(bladeIsUP != 1)
 21122  0022E4  0100               	movlb	0	; () banked
 21123  0022E6  05C8               	decf	_bladeIsUP& (0+255),w,b
 21124  0022E8  B4D8               	btfsc	status,2,c
 21125  0022EA  0012               	return	
 21126                           
 21127                           ; BSR set to: 0
 21128                           ;DisplayProtocol.h: 340: setPWM2duty(-400);
 21129  0022EC  0EFE               	movlw	254
 21130  0022EE  0100               	movlb	0	; () banked
 21131  0022F0  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 21132  0022F2  0E70               	movlw	112
 21133  0022F4  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 21134  0022F6  ECD1  F02C         	call	i1_setPWM2duty	;wreg free
 21135                           
 21136                           ;DisplayProtocol.h: 341: }else if(actualScreen == 10) {
 21137  0022FA  0012               	return	
 21138  0022FC                     i1l8215:
 21139  0022FC  0E0A               	movlw	10
 21140  0022FE  0101               	movlb	1	; () banked
 21141  002300  19C3               	xorwf	_actualScreen& (0+255),w,b
 21142  002302  A4D8               	btfss	status,2,c
 21143  002304  D00B               	goto	i1l8221
 21144                           
 21145                           ; BSR set to: 1
 21146                           ;DisplayProtocol.h: 342: if(!selSN)
 21147  002306  0101               	movlb	1	; () banked
 21148  002308  51CC               	movf	_selSN& (0+255),w,b
 21149  00230A  A4D8               	btfss	status,2,c
 21150  00230C  D004               	goto	i1l715
 21151                           
 21152                           ; BSR set to: 1
 21153                           ;DisplayProtocol.h: 343: confirmEdition(1);
 21154  00230E  0E01               	movlw	1
 21155  002310  ECF9  F028         	call	i1_confirmEdition
 21156  002314  0012               	return	
 21157  002316                     i1l715:
 21158                           
 21159                           ; BSR set to: 1
 21160                           ;DisplayProtocol.h: 344: else
 21161                           ;DisplayProtocol.h: 345: actualScreen = tempLastScreen;
 21162  002316  C0BE  F1C3         	movff	_tempLastScreen,_actualScreen
 21163                           
 21164                           ; BSR set to: 1
 21165                           ;DisplayProtocol.h: 346: }else if(actualScreen == 8)
 21166  00231A  0012               	return	
 21167  00231C                     i1l8221:
 21168                           
 21169                           ; BSR set to: 1
 21170  00231C  0E08               	movlw	8
 21171  00231E  0101               	movlb	1	; () banked
 21172  002320  19C3               	xorwf	_actualScreen& (0+255),w,b
 21173  002322  A4D8               	btfss	status,2,c
 21174  002324  D004               	goto	i1l8225
 21175                           
 21176                           ; BSR set to: 1
 21177                           ;DisplayProtocol.h: 347: actualScreen = 4;
 21178  002326  0E04               	movlw	4
 21179  002328  0101               	movlb	1	; () banked
 21180  00232A  6FC3               	movwf	_actualScreen& (0+255),b
 21181  00232C  0012               	return	
 21182  00232E                     i1l8225:
 21183                           
 21184                           ; BSR set to: 1
 21185                           ;DisplayProtocol.h: 348: else if(actualScreen == 9)
 21186  00232E  0E09               	movlw	9
 21187  002330  0101               	movlb	1	; () banked
 21188  002332  19C3               	xorwf	_actualScreen& (0+255),w,b
 21189  002334  A4D8               	btfss	status,2,c
 21190  002336  D004               	goto	i1l8229
 21191                           
 21192                           ; BSR set to: 1
 21193                           ;DisplayProtocol.h: 349: actualScreen = 0;
 21194  002338  0E00               	movlw	0
 21195  00233A  0101               	movlb	1	; () banked
 21196  00233C  6FC3               	movwf	_actualScreen& (0+255),b
 21197  00233E  0012               	return	
 21198  002340                     i1l8229:
 21199                           
 21200                           ; BSR set to: 1
 21201                           ;DisplayProtocol.h: 350: else if(actualScreen == 11) {
 21202  002340  0E0B               	movlw	11
 21203  002342  0101               	movlb	1	; () banked
 21204  002344  19C3               	xorwf	_actualScreen& (0+255),w,b
 21205  002346  A4D8               	btfss	status,2,c
 21206  002348  D044               	goto	i1l8257
 21207                           
 21208                           ; BSR set to: 1
 21209                           ;DisplayProtocol.h: 351: if(!selSN) {
 21210  00234A  0101               	movlb	1	; () banked
 21211  00234C  51CC               	movf	_selSN& (0+255),w,b
 21212  00234E  A4D8               	btfss	status,2,c
 21213  002350  D03C               	goto	i1l8255
 21214                           
 21215                           ; BSR set to: 1
 21216                           ;DisplayProtocol.h: 352: chanValf = 0;
 21217  002352  0E00               	movlw	0
 21218  002354  0101               	movlb	1	; () banked
 21219  002356  6FB7               	movwf	_chanValf& (0+255),b
 21220  002358  0E00               	movlw	0
 21221  00235A  0101               	movlb	1	; () banked
 21222  00235C  6FB8               	movwf	(_chanValf+1)& (0+255),b
 21223  00235E  0E00               	movlw	0
 21224  002360  0101               	movlb	1	; () banked
 21225  002362  6FB9               	movwf	(_chanValf+2)& (0+255),b
 21226                           
 21227                           ; BSR set to: 1
 21228                           ;DisplayProtocol.h: 353: desintegrator();
 21229  002364  ECEC  F016         	call	i1_desintegrator	;wreg free
 21230                           
 21231                           ;DisplayProtocol.h: 354: temptiXcorte = tiXcorte;
 21232  002368  C195  F0C3         	movff	_tiXcorte,_temptiXcorte
 21233  00236C  C196  F0C4         	movff	_tiXcorte+1,_temptiXcorte+1
 21234  002370  C197  F0C5         	movff	_tiXcorte+2,_temptiXcorte+2
 21235                           
 21236                           ;DisplayProtocol.h: 355: tiXcorte = 5.0f;
 21237  002374  0E00               	movlw	0
 21238  002376  0101               	movlb	1	; () banked
 21239  002378  6F95               	movwf	_tiXcorte& (0+255),b
 21240  00237A  0EA0               	movlw	160
 21241  00237C  0101               	movlb	1	; () banked
 21242  00237E  6F96               	movwf	(_tiXcorte+1)& (0+255),b
 21243  002380  0E40               	movlw	64
 21244  002382  0101               	movlb	1	; () banked
 21245  002384  6F97               	movwf	(_tiXcorte+2)& (0+255),b
 21246                           
 21247                           ; BSR set to: 1
 21248                           ;DisplayProtocol.h: 356: timsXcorte = 5000.0f;
 21249  002386  0E40               	movlw	64
 21250  002388  6E5A               	movwf	_timsXcorte,c
 21251  00238A  0E9C               	movlw	156
 21252  00238C  6E5B               	movwf	_timsXcorte+1,c
 21253  00238E  0E45               	movlw	69
 21254  002390  6E5C               	movwf	_timsXcorte+2,c
 21255                           
 21256                           ; BSR set to: 1
 21257                           ;DisplayProtocol.h: 357: tempNumCortes = numCortes;
 21258  002392  C0C6  F19B         	movff	_numCortes,_tempNumCortes
 21259  002396  C0C7  F19C         	movff	_numCortes+1,_tempNumCortes+1
 21260                           
 21261                           ; BSR set to: 1
 21262                           ;DisplayProtocol.h: 358: numCortes = 1;
 21263  00239A  0E00               	movlw	0
 21264  00239C  0100               	movlb	0	; () banked
 21265  00239E  6FC7               	movwf	(_numCortes+1)& (0+255),b
 21266  0023A0  0E01               	movlw	1
 21267  0023A2  6FC6               	movwf	_numCortes& (0+255),b
 21268                           
 21269                           ; BSR set to: 0
 21270                           ;DisplayProtocol.h: 359: processState = 0;
 21271  0023A4  0E00               	movlw	0
 21272  0023A6  0100               	movlb	0	; () banked
 21273  0023A8  6FB5               	movwf	(_processState+1)& (0+255),b
 21274  0023AA  0E00               	movlw	0
 21275  0023AC  6FB4               	movwf	_processState& (0+255),b
 21276                           
 21277                           ; BSR set to: 0
 21278                           ;DisplayProtocol.h: 360: processTimer = 0;
 21279  0023AE  0E00               	movlw	0
 21280  0023B0  6E37               	movwf	_processTimer,c
 21281  0023B2  0E00               	movlw	0
 21282  0023B4  6E38               	movwf	_processTimer+1,c
 21283  0023B6  0E00               	movlw	0
 21284  0023B8  6E39               	movwf	_processTimer+2,c
 21285  0023BA  0E00               	movlw	0
 21286  0023BC  6E3A               	movwf	_processTimer+3,c
 21287                           
 21288                           ; BSR set to: 0
 21289                           ;DisplayProtocol.h: 361: calibLevel = 0;
 21290  0023BE  0E00               	movlw	0
 21291  0023C0  0101               	movlb	1	; () banked
 21292  0023C2  6FC4               	movwf	_calibLevel& (0+255),b
 21293                           
 21294                           ; BSR set to: 1
 21295                           ;DisplayProtocol.h: 362: initCalib();
 21296  0023C4  ECCF  F034         	call	i1_initCalib	;wreg free
 21297                           
 21298                           ;DisplayProtocol.h: 363: }else
 21299  0023C8  0012               	return	
 21300  0023CA                     i1l8255:
 21301                           
 21302                           ;DisplayProtocol.h: 364: actualScreen = 4;
 21303  0023CA  0E04               	movlw	4
 21304  0023CC  0101               	movlb	1	; () banked
 21305  0023CE  6FC3               	movwf	_actualScreen& (0+255),b
 21306                           
 21307                           ; BSR set to: 1
 21308                           ;DisplayProtocol.h: 365: }else if(actualScreen == 12) {
 21309  0023D0  0012               	return	
 21310  0023D2                     i1l8257:
 21311                           
 21312                           ; BSR set to: 1
 21313  0023D2  0E0C               	movlw	12
 21314  0023D4  0101               	movlb	1	; () banked
 21315  0023D6  19C3               	xorwf	_actualScreen& (0+255),w,b
 21316  0023D8  A4D8               	btfss	status,2,c
 21317  0023DA  D009               	goto	i1l8265
 21318                           
 21319                           ; BSR set to: 1
 21320                           ;DisplayProtocol.h: 366: chanValSection--;
 21321  0023DC  0101               	movlb	1	; () banked
 21322  0023DE  079D               	decf	_chanValSection& (0+255),f,b
 21323                           
 21324                           ; BSR set to: 1
 21325                           ;DisplayProtocol.h: 367: if(chanValSection < 0)
 21326  0023E0  0101               	movlb	1	; () banked
 21327  0023E2  AF9D               	btfss	_chanValSection& (0+255),7,b
 21328  0023E4  0012               	return	
 21329                           
 21330                           ; BSR set to: 1
 21331                           ;DisplayProtocol.h: 368: chanValSection = 5;
 21332  0023E6  0E05               	movlw	5
 21333  0023E8  0101               	movlb	1	; () banked
 21334  0023EA  6F9D               	movwf	_chanValSection& (0+255),b
 21335                           
 21336                           ; BSR set to: 1
 21337                           ;DisplayProtocol.h: 369: }else if(actualScreen == 13)
 21338  0023EC  0012               	return	
 21339  0023EE                     i1l8265:
 21340                           
 21341                           ; BSR set to: 1
 21342  0023EE  0E0D               	movlw	13
 21343  0023F0  0101               	movlb	1	; () banked
 21344  0023F2  19C3               	xorwf	_actualScreen& (0+255),w,b
 21345  0023F4  A4D8               	btfss	status,2,c
 21346  0023F6  0012               	return	
 21347                           
 21348                           ; BSR set to: 1
 21349                           ;DisplayProtocol.h: 370: initProtocoll(1);
 21350  0023F8  0E01               	movlw	1
 21351  0023FA  EC59  F034         	call	i1_initProtocoll
 21352  0023FE  0012               	return	
 21353  002400                     __end_ofi1_pressENTER:
 21354                           	opt stack 0
 21355                           pclatu	equ	0xFFB
 21356                           pclath	equ	0xFFA
 21357                           tblptru	equ	0xFF8
 21358                           tblptrh	equ	0xFF7
 21359                           tblptrl	equ	0xFF6
 21360                           tablat	equ	0xFF5
 21361                           prodh	equ	0xFF4
 21362                           prodl	equ	0xFF3
 21363                           intcon	equ	0xFF2
 21364                           postinc0	equ	0xFEE
 21365                           fsr0h	equ	0xFEA
 21366                           fsr0l	equ	0xFE9
 21367                           wreg	equ	0xFE8
 21368                           postdec1	equ	0xFE5
 21369                           fsr1h	equ	0xFE2
 21370                           fsr1l	equ	0xFE1
 21371                           bsr	equ	0xFE0
 21372                           indf2	equ	0xFDF
 21373                           postinc2	equ	0xFDE
 21374                           postdec2	equ	0xFDD
 21375                           plusw2	equ	0xFDB
 21376                           fsr2h	equ	0xFDA
 21377                           fsr2l	equ	0xFD9
 21378                           status	equ	0xFD8
 21379                           
 21380 ;; *************** function i1_initProtocoll *****************
 21381 ;; Defined at:
 21382 ;;		line 72 in file "source/DisplayProtocol.h"
 21383 ;; Parameters:    Size  Location     Type
 21384 ;;  init            1    wreg     unsigned char 
 21385 ;; Auto vars:     Size  Location     Type
 21386 ;;  init            1    6[BANK0 ] unsigned char 
 21387 ;; Return value:  Size  Location     Type
 21388 ;;                  1    wreg      void 
 21389 ;; Registers used:
 21390 ;;		wreg, status,2, status,0, cstack
 21391 ;; Tracked objects:
 21392 ;;		On entry : 0/0
 21393 ;;		On exit  : 0/0
 21394 ;;		Unchanged: 0/0
 21395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21396 ;;      Params:         0       0       0       0       0       0       0
 21397 ;;      Locals:         0       1       0       0       0       0       0
 21398 ;;      Temps:          0       0       0       0       0       0       0
 21399 ;;      Totals:         0       1       0       0       0       0       0
 21400 ;;Total ram usage:        1 bytes
 21401 ;; Hardware stack levels used:    1
 21402 ;; Hardware stack levels required when called:    5
 21403 ;; This function calls:
 21404 ;;		i1_setPWM2duty
 21405 ;; This function is called by:
 21406 ;;		i1_pressRETRO
 21407 ;;		i1_pressENTER
 21408 ;; This function uses a non-reentrant model
 21409 ;;
 21410                           
 21411                           	psect	text91
 21412  0068B2                     __ptext91:
 21413                           	opt stack 0
 21414  0068B2                     i1_initProtocoll:
 21415                           	opt stack 12
 21416                           
 21417                           ;incstack = 0
 21418                           ;i1initProtocoll@init stored from wreg
 21419  0068B2  0100               	movlb	0	; () banked
 21420  0068B4  6F66               	movwf	i1initProtocoll@init& (0+255),b
 21421                           
 21422                           ;DisplayProtocol.h: 73: if(!PORTAbits.RA7)
 21423  0068B6  BE80               	btfsc	3968,7,c	;volatile
 21424  0068B8  D003               	goto	i1l7149
 21425                           
 21426                           ;DisplayProtocol.h: 74: bladeIsUP = 2;
 21427  0068BA  0E02               	movlw	2
 21428  0068BC  0100               	movlb	0	; () banked
 21429  0068BE  6FC8               	movwf	_bladeIsUP& (0+255),b
 21430  0068C0                     i1l7149:
 21431                           
 21432                           ;DisplayProtocol.h: 75: if(init) {
 21433  0068C0  0100               	movlb	0	; () banked
 21434  0068C2  5166               	movf	i1initProtocoll@init& (0+255),w,b
 21435  0068C4  0100               	movlb	0	; () banked
 21436  0068C6  B4D8               	btfsc	status,2,c
 21437  0068C8  D011               	goto	i1l7159
 21438                           
 21439                           ; BSR set to: 0
 21440                           ;DisplayProtocol.h: 76: LATCbits.LATC5 = 0;
 21441  0068CA  9A8B               	bcf	3979,5,c	;volatile
 21442                           
 21443                           ; BSR set to: 0
 21444                           ;DisplayProtocol.h: 77: processState = 0;
 21445  0068CC  0E00               	movlw	0
 21446  0068CE  0100               	movlb	0	; () banked
 21447  0068D0  6FB5               	movwf	(_processState+1)& (0+255),b
 21448  0068D2  0E00               	movlw	0
 21449  0068D4  6FB4               	movwf	_processState& (0+255),b
 21450                           
 21451                           ; BSR set to: 0
 21452                           ;DisplayProtocol.h: 78: if(bladeIsUP != 1)
 21453  0068D6  0100               	movlb	0	; () banked
 21454  0068D8  05C8               	decf	_bladeIsUP& (0+255),w,b
 21455  0068DA  B4D8               	btfsc	status,2,c
 21456  0068DC  D007               	goto	i1l7159
 21457                           
 21458                           ; BSR set to: 0
 21459                           ;DisplayProtocol.h: 79: setPWM2duty(-400);
 21460  0068DE  0EFE               	movlw	254
 21461  0068E0  0100               	movlb	0	; () banked
 21462  0068E2  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 21463  0068E4  0E70               	movlw	112
 21464  0068E6  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 21465  0068E8  ECD1  F02C         	call	i1_setPWM2duty	;wreg free
 21466  0068EC                     i1l7159:
 21467                           
 21468                           ;DisplayProtocol.h: 80: }
 21469                           ;DisplayProtocol.h: 81: actualScreen = tempLastScreen;
 21470  0068EC  C0BE  F1C3         	movff	_tempLastScreen,_actualScreen
 21471  0068F0  0012               	return		;funcret
 21472  0068F2                     __end_ofi1_initProtocoll:
 21473                           	opt stack 0
 21474                           pclatu	equ	0xFFB
 21475                           pclath	equ	0xFFA
 21476                           tblptru	equ	0xFF8
 21477                           tblptrh	equ	0xFF7
 21478                           tblptrl	equ	0xFF6
 21479                           tablat	equ	0xFF5
 21480                           prodh	equ	0xFF4
 21481                           prodl	equ	0xFF3
 21482                           intcon	equ	0xFF2
 21483                           postinc0	equ	0xFEE
 21484                           fsr0h	equ	0xFEA
 21485                           fsr0l	equ	0xFE9
 21486                           wreg	equ	0xFE8
 21487                           postdec1	equ	0xFE5
 21488                           fsr1h	equ	0xFE2
 21489                           fsr1l	equ	0xFE1
 21490                           bsr	equ	0xFE0
 21491                           indf2	equ	0xFDF
 21492                           postinc2	equ	0xFDE
 21493                           postdec2	equ	0xFDD
 21494                           plusw2	equ	0xFDB
 21495                           fsr2h	equ	0xFDA
 21496                           fsr2l	equ	0xFD9
 21497                           status	equ	0xFD8
 21498                           
 21499 ;; *************** function i1_desintegrator *****************
 21500 ;; Defined at:
 21501 ;;		line 46 in file "source/DisplayProtocol.h"
 21502 ;; Parameters:    Size  Location     Type
 21503 ;;		None
 21504 ;; Auto vars:     Size  Location     Type
 21505 ;;  desintegrato    4   36[BANK0 ] long 
 21506 ;;  desintegrato    4   32[BANK0 ] long 
 21507 ;;  desintegrato    4   28[BANK0 ] long 
 21508 ;;  desintegrato    3   25[BANK0 ] float 
 21509 ;;  desintegrato    2   40[BANK0 ] int 
 21510 ;; Return value:  Size  Location     Type
 21511 ;;                  1    wreg      void 
 21512 ;; Registers used:
 21513 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21514 ;; Tracked objects:
 21515 ;;		On entry : 0/0
 21516 ;;		On exit  : 0/0
 21517 ;;		Unchanged: 0/0
 21518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21519 ;;      Params:         0       0       0       0       0       0       0
 21520 ;;      Locals:         0      17       0       0       0       0       0
 21521 ;;      Temps:          0       2       0       0       0       0       0
 21522 ;;      Totals:         0      19       0       0       0       0       0
 21523 ;;Total ram usage:       19 bytes
 21524 ;; Hardware stack levels used:    1
 21525 ;; Hardware stack levels required when called:    6
 21526 ;; This function calls:
 21527 ;;		i1___aldiv
 21528 ;;		i1___ftmul
 21529 ;;		i1___fttol
 21530 ;;		i1___lmul
 21531 ;; This function is called by:
 21532 ;;		i1_pressENTER
 21533 ;; This function uses a non-reentrant model
 21534 ;;
 21535                           
 21536                           	psect	text92
 21537  002DD8                     __ptext92:
 21538                           	opt stack 0
 21539  002DD8                     i1_desintegrator:
 21540                           	opt stack 11
 21541                           
 21542                           ;DisplayProtocol.h: 47: chanValSection = 5;
 21543                           
 21544                           ;incstack = 0
 21545  002DD8  0E05               	movlw	5
 21546  002DDA  0101               	movlb	1	; () banked
 21547  002DDC  6F9D               	movwf	_chanValSection& (0+255),b
 21548                           
 21549                           ; BSR set to: 1
 21550                           ;DisplayProtocol.h: 48: float temp = (float)chanValf*1000;
 21551  002DDE  C1B7  F068         	movff	_chanValf,i1___ftmul@f1
 21552  002DE2  C1B8  F069         	movff	_chanValf+1,i1___ftmul@f1+1
 21553  002DE6  C1B9  F06A         	movff	_chanValf+2,i1___ftmul@f1+2
 21554  002DEA  0E00               	movlw	0
 21555  002DEC  0100               	movlb	0	; () banked
 21556  002DEE  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 21557  002DF0  0E7A               	movlw	122
 21558  002DF2  0100               	movlb	0	; () banked
 21559  002DF4  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 21560  002DF6  0E44               	movlw	68
 21561  002DF8  0100               	movlb	0	; () banked
 21562  002DFA  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 21563  002DFC  EC7B  F01B         	call	i1___ftmul	;wreg free
 21564  002E00  C068  F079         	movff	?i1___ftmul,i1desintegrator@temp
 21565  002E04  C069  F07A         	movff	?i1___ftmul+1,i1desintegrator@temp+1
 21566  002E08  C06A  F07B         	movff	?i1___ftmul+2,i1desintegrator@temp+2
 21567                           
 21568                           ;DisplayProtocol.h: 49: long tempL = (long)temp;
 21569  002E0C  C079  F060         	movff	i1desintegrator@temp,i1___fttol@f1
 21570  002E10  C07A  F061         	movff	i1desintegrator@temp+1,i1___fttol@f1+1
 21571  002E14  C07B  F062         	movff	i1desintegrator@temp+2,i1___fttol@f1+2
 21572  002E18  EC18  F01E         	call	i1___fttol	;wreg free
 21573  002E1C  C060  F07C         	movff	?i1___fttol,i1desintegrator@tempL
 21574  002E20  C061  F07D         	movff	?i1___fttol+1,i1desintegrator@tempL+1
 21575  002E24  C062  F07E         	movff	?i1___fttol+2,i1desintegrator@tempL+2
 21576  002E28  C063  F07F         	movff	?i1___fttol+3,i1desintegrator@tempL+3
 21577                           
 21578                           ;DisplayProtocol.h: 50: long temp2 = 0;
 21579  002E2C  0E00               	movlw	0
 21580  002E2E  0100               	movlb	0	; () banked
 21581  002E30  6F84               	movwf	i1desintegrator@temp2& (0+255),b
 21582  002E32  0E00               	movlw	0
 21583  002E34  6F85               	movwf	(i1desintegrator@temp2+1)& (0+255),b
 21584  002E36  0E00               	movlw	0
 21585  002E38  6F86               	movwf	(i1desintegrator@temp2+2)& (0+255),b
 21586  002E3A  0E00               	movlw	0
 21587  002E3C  6F87               	movwf	(i1desintegrator@temp2+3)& (0+255),b
 21588                           
 21589                           ;DisplayProtocol.h: 51: long temp3 = 0;
 21590  002E3E  0E00               	movlw	0
 21591  002E40  0100               	movlb	0	; () banked
 21592  002E42  6F80               	movwf	i1desintegrator@temp3& (0+255),b
 21593  002E44  0E00               	movlw	0
 21594  002E46  6F81               	movwf	(i1desintegrator@temp3+1)& (0+255),b
 21595  002E48  0E00               	movlw	0
 21596  002E4A  6F82               	movwf	(i1desintegrator@temp3+2)& (0+255),b
 21597  002E4C  0E00               	movlw	0
 21598  002E4E  6F83               	movwf	(i1desintegrator@temp3+3)& (0+255),b
 21599                           
 21600                           ;DisplayProtocol.h: 52: int i;
 21601                           ;DisplayProtocol.h: 53: for(i = 0; i < 6; i++) {
 21602  002E50  0E00               	movlw	0
 21603  002E52  0100               	movlb	0	; () banked
 21604  002E54  6F89               	movwf	(i1desintegrator@i+1)& (0+255),b
 21605  002E56  0E00               	movlw	0
 21606  002E58  6F88               	movwf	i1desintegrator@i& (0+255),b
 21607                           
 21608                           ; BSR set to: 0
 21609  002E5A  0100               	movlb	0	; () banked
 21610  002E5C  BF89               	btfsc	(i1desintegrator@i+1)& (0+255),7,b
 21611  002E5E  D00A               	goto	i1l7119
 21612  002E60  0100               	movlb	0	; () banked
 21613  002E62  5189               	movf	(i1desintegrator@i+1)& (0+255),w,b
 21614  002E64  E106               	bnz	i1u928_20
 21615  002E66  0E06               	movlw	6
 21616  002E68  0100               	movlb	0	; () banked
 21617  002E6A  5D88               	subwf	i1desintegrator@i& (0+255),w,b
 21618  002E6C  B0D8               	btfsc	status,0,c
 21619  002E6E  0012               	return	
 21620  002E70  D001               	goto	i1l7119
 21621  002E72                     i1u928_20:
 21622                           
 21623                           ; BSR set to: 0
 21624  002E72  0012               	return	
 21625  002E74                     i1l7119:
 21626                           
 21627                           ; BSR set to: 0
 21628                           ;DisplayProtocol.h: 54: temp2 = tempL/exp10[i];
 21629  002E74  C07C  F060         	movff	i1desintegrator@tempL,i1___aldiv@dividend
 21630  002E78  C07D  F061         	movff	i1desintegrator@tempL+1,i1___aldiv@dividend+1
 21631  002E7C  C07E  F062         	movff	i1desintegrator@tempL+2,i1___aldiv@dividend+2
 21632  002E80  C07F  F063         	movff	i1desintegrator@tempL+3,i1___aldiv@dividend+3
 21633  002E84  0E77               	movlw	low _exp10
 21634  002E86  0100               	movlb	0	; () banked
 21635  002E88  6F77               	movwf	??i1_desintegrator& (0+255),b
 21636  002E8A  0E01               	movlw	high _exp10
 21637  002E8C  0100               	movlb	0	; () banked
 21638  002E8E  6F78               	movwf	(??i1_desintegrator+1)& (0+255),b
 21639  002E90  90D8               	bcf	status,0,c
 21640  002E92  0100               	movlb	0	; () banked
 21641  002E94  3588               	rlcf	i1desintegrator@i& (0+255),w,b
 21642  002E96  6ED9               	movwf	fsr2l,c
 21643  002E98  0100               	movlb	0	; () banked
 21644  002E9A  3589               	rlcf	(i1desintegrator@i+1)& (0+255),w,b
 21645  002E9C  6EDA               	movwf	fsr2h,c
 21646  002E9E  90D8               	bcf	status,0,c
 21647  002EA0  36D9               	rlcf	fsr2l,f,c
 21648  002EA2  36DA               	rlcf	fsr2h,f,c
 21649  002EA4  0100               	movlb	0	; () banked
 21650  002EA6  5177               	movf	??i1_desintegrator& (0+255),w,b
 21651  002EA8  26D9               	addwf	fsr2l,f,c
 21652  002EAA  0100               	movlb	0	; () banked
 21653  002EAC  5178               	movf	(??i1_desintegrator+1)& (0+255),w,b
 21654  002EAE  22DA               	addwfc	fsr2h,f,c
 21655  002EB0  CFDE F064          	movff	postinc2,i1___aldiv@divisor
 21656  002EB4  CFDE F065          	movff	postinc2,i1___aldiv@divisor+1
 21657  002EB8  CFDE F066          	movff	postinc2,i1___aldiv@divisor+2
 21658  002EBC  CFDE F067          	movff	postinc2,i1___aldiv@divisor+3
 21659  002EC0  EC69  F020         	call	i1___aldiv	;wreg free
 21660  002EC4  C060  F084         	movff	?i1___aldiv,i1desintegrator@temp2
 21661  002EC8  C061  F085         	movff	?i1___aldiv+1,i1desintegrator@temp2+1
 21662  002ECC  C062  F086         	movff	?i1___aldiv+2,i1desintegrator@temp2+2
 21663  002ED0  C063  F087         	movff	?i1___aldiv+3,i1desintegrator@temp2+3
 21664                           
 21665                           ;DisplayProtocol.h: 55: temp3 = temp2*exp10[i];
 21666  002ED4  0E77               	movlw	low _exp10
 21667  002ED6  0100               	movlb	0	; () banked
 21668  002ED8  6F77               	movwf	??i1_desintegrator& (0+255),b
 21669  002EDA  0E01               	movlw	high _exp10
 21670  002EDC  0100               	movlb	0	; () banked
 21671  002EDE  6F78               	movwf	(??i1_desintegrator+1)& (0+255),b
 21672  002EE0  90D8               	bcf	status,0,c
 21673  002EE2  0100               	movlb	0	; () banked
 21674  002EE4  3588               	rlcf	i1desintegrator@i& (0+255),w,b
 21675  002EE6  6ED9               	movwf	fsr2l,c
 21676  002EE8  0100               	movlb	0	; () banked
 21677  002EEA  3589               	rlcf	(i1desintegrator@i+1)& (0+255),w,b
 21678  002EEC  6EDA               	movwf	fsr2h,c
 21679  002EEE  90D8               	bcf	status,0,c
 21680  002EF0  36D9               	rlcf	fsr2l,f,c
 21681  002EF2  36DA               	rlcf	fsr2h,f,c
 21682  002EF4  0100               	movlb	0	; () banked
 21683  002EF6  5177               	movf	??i1_desintegrator& (0+255),w,b
 21684  002EF8  26D9               	addwf	fsr2l,f,c
 21685  002EFA  0100               	movlb	0	; () banked
 21686  002EFC  5178               	movf	(??i1_desintegrator+1)& (0+255),w,b
 21687  002EFE  22DA               	addwfc	fsr2h,f,c
 21688  002F00  CFDE F060          	movff	postinc2,i1___lmul@multiplier
 21689  002F04  CFDE F061          	movff	postinc2,i1___lmul@multiplier+1
 21690  002F08  CFDE F062          	movff	postinc2,i1___lmul@multiplier+2
 21691  002F0C  CFDE F063          	movff	postinc2,i1___lmul@multiplier+3
 21692  002F10  C084  F064         	movff	i1desintegrator@temp2,i1___lmul@multiplicand
 21693  002F14  C085  F065         	movff	i1desintegrator@temp2+1,i1___lmul@multiplicand+1
 21694  002F18  C086  F066         	movff	i1desintegrator@temp2+2,i1___lmul@multiplicand+2
 21695  002F1C  C087  F067         	movff	i1desintegrator@temp2+3,i1___lmul@multiplicand+3
 21696  002F20  EC06  F031         	call	i1___lmul	;wreg free
 21697  002F24  C060  F080         	movff	?i1___lmul,i1desintegrator@temp3
 21698  002F28  C061  F081         	movff	?i1___lmul+1,i1desintegrator@temp3+1
 21699  002F2C  C062  F082         	movff	?i1___lmul+2,i1desintegrator@temp3+2
 21700  002F30  C063  F083         	movff	?i1___lmul+3,i1desintegrator@temp3+3
 21701                           
 21702                           ;DisplayProtocol.h: 56: chanValdig[i] = temp2;
 21703  002F34  0EA9               	movlw	low _chanValdig
 21704  002F36  0100               	movlb	0	; () banked
 21705  002F38  2588               	addwf	i1desintegrator@i& (0+255),w,b
 21706  002F3A  6ED9               	movwf	fsr2l,c
 21707  002F3C  0E01               	movlw	high _chanValdig
 21708  002F3E  0100               	movlb	0	; () banked
 21709  002F40  2189               	addwfc	(i1desintegrator@i+1)& (0+255),w,b
 21710  002F42  6EDA               	movwf	fsr2h,c
 21711  002F44  C084  FFDF         	movff	i1desintegrator@temp2,indf2
 21712                           
 21713                           ; BSR set to: 0
 21714                           ;DisplayProtocol.h: 57: tempL -= temp3;
 21715  002F48  0100               	movlb	0	; () banked
 21716  002F4A  5180               	movf	i1desintegrator@temp3& (0+255),w,b
 21717  002F4C  0100               	movlb	0	; () banked
 21718  002F4E  5F7C               	subwf	i1desintegrator@tempL& (0+255),f,b
 21719  002F50  0100               	movlb	0	; () banked
 21720  002F52  5181               	movf	(i1desintegrator@temp3+1)& (0+255),w,b
 21721  002F54  0100               	movlb	0	; () banked
 21722  002F56  5B7D               	subwfb	(i1desintegrator@tempL+1)& (0+255),f,b
 21723  002F58  0100               	movlb	0	; () banked
 21724  002F5A  5182               	movf	(i1desintegrator@temp3+2)& (0+255),w,b
 21725  002F5C  0100               	movlb	0	; () banked
 21726  002F5E  5B7E               	subwfb	(i1desintegrator@tempL+2)& (0+255),f,b
 21727  002F60  0100               	movlb	0	; () banked
 21728  002F62  5183               	movf	(i1desintegrator@temp3+3)& (0+255),w,b
 21729  002F64  0100               	movlb	0	; () banked
 21730  002F66  5B7F               	subwfb	(i1desintegrator@tempL+3)& (0+255),f,b
 21731                           
 21732                           ; BSR set to: 0
 21733  002F68  0100               	movlb	0	; () banked
 21734  002F6A  4B88               	infsnz	i1desintegrator@i& (0+255),f,b
 21735  002F6C  2B89               	incf	(i1desintegrator@i+1)& (0+255),f,b
 21736                           
 21737                           ; BSR set to: 0
 21738  002F6E  0100               	movlb	0	; () banked
 21739  002F70  BF89               	btfsc	(i1desintegrator@i+1)& (0+255),7,b
 21740  002F72  D780               	goto	i1l7119
 21741  002F74  0100               	movlb	0	; () banked
 21742  002F76  5189               	movf	(i1desintegrator@i+1)& (0+255),w,b
 21743  002F78  E101               	bnz	i1l540
 21744  002F7A  D775               	goto	L8
 21745  002F7C                     i1l540:
 21746                           
 21747                           ; BSR set to: 0
 21748  002F7C  0012               	return		;funcret
 21749  002F7E                     __end_ofi1_desintegrator:
 21750                           	opt stack 0
 21751                           pclatu	equ	0xFFB
 21752                           pclath	equ	0xFFA
 21753                           tblptru	equ	0xFF8
 21754                           tblptrh	equ	0xFF7
 21755                           tblptrl	equ	0xFF6
 21756                           tablat	equ	0xFF5
 21757                           prodh	equ	0xFF4
 21758                           prodl	equ	0xFF3
 21759                           intcon	equ	0xFF2
 21760                           postinc0	equ	0xFEE
 21761                           fsr0h	equ	0xFEA
 21762                           fsr0l	equ	0xFE9
 21763                           wreg	equ	0xFE8
 21764                           postdec1	equ	0xFE5
 21765                           fsr1h	equ	0xFE2
 21766                           fsr1l	equ	0xFE1
 21767                           bsr	equ	0xFE0
 21768                           indf2	equ	0xFDF
 21769                           postinc2	equ	0xFDE
 21770                           postdec2	equ	0xFDD
 21771                           plusw2	equ	0xFDB
 21772                           fsr2h	equ	0xFDA
 21773                           fsr2l	equ	0xFD9
 21774                           status	equ	0xFD8
 21775                           
 21776 ;; *************** function i1___fttol *****************
 21777 ;; Defined at:
 21778 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 21779 ;; Parameters:    Size  Location     Type
 21780 ;;  f1              3    0[BANK0 ] float 
 21781 ;; Auto vars:     Size  Location     Type
 21782 ;;  __fttol         4   10[BANK0 ] unsigned long 
 21783 ;;  __fttol         1   14[BANK0 ] unsigned char 
 21784 ;;  __fttol         1    9[BANK0 ] unsigned char 
 21785 ;; Return value:  Size  Location     Type
 21786 ;;                  4    0[BANK0 ] long 
 21787 ;; Registers used:
 21788 ;;		wreg, status,2, status,0
 21789 ;; Tracked objects:
 21790 ;;		On entry : 0/0
 21791 ;;		On exit  : 0/0
 21792 ;;		Unchanged: 0/0
 21793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21794 ;;      Params:         0       4       0       0       0       0       0
 21795 ;;      Locals:         0       6       0       0       0       0       0
 21796 ;;      Temps:          0       5       0       0       0       0       0
 21797 ;;      Totals:         0      15       0       0       0       0       0
 21798 ;;Total ram usage:       15 bytes
 21799 ;; Hardware stack levels used:    1
 21800 ;; Hardware stack levels required when called:    4
 21801 ;; This function calls:
 21802 ;;		Nothing
 21803 ;; This function is called by:
 21804 ;;		i1_desintegrator
 21805 ;; This function uses a non-reentrant model
 21806 ;;
 21807                           
 21808                           	psect	text93
 21809  003C30                     __ptext93:
 21810                           	opt stack 0
 21811  003C30                     i1___fttol:
 21812                           	opt stack 12
 21813                           
 21814                           ; BSR set to: 0
 21815                           ;incstack = 0
 21816  003C30  C062  F064         	movff	i1___fttol@f1+2,??i1___fttol
 21817  003C34  0100               	movlb	0	; () banked
 21818  003C36  6B65               	clrf	(??i1___fttol+1)& (0+255),b
 21819  003C38  6B66               	clrf	(??i1___fttol+2)& (0+255),b
 21820  003C3A  0100               	movlb	0	; () banked
 21821  003C3C  3561               	rlcf	(i1___fttol@f1+1)& (0+255),w,b
 21822  003C3E  0100               	movlb	0	; () banked
 21823  003C40  3764               	rlcf	??i1___fttol& (0+255),f,b
 21824  003C42  E301               	bnc	u883_21
 21825  003C44  8165               	bsf	(??i1___fttol+1)& (0+255),0,b
 21826  003C46                     u883_21:
 21827  003C46  0100               	movlb	0	; () banked
 21828  003C48  5164               	movf	??i1___fttol& (0+255),w,b
 21829  003C4A  0100               	movlb	0	; () banked
 21830  003C4C  6F6E               	movwf	i1___fttol@exp1& (0+255),b
 21831  003C4E  0100               	movlb	0	; () banked
 21832  003C50  516E               	movf	i1___fttol@exp1& (0+255),w,b
 21833  003C52  A4D8               	btfss	status,2,c
 21834  003C54  D00A               	goto	i1l6847
 21835                           
 21836                           ; BSR set to: 0
 21837  003C56  0E00               	movlw	0
 21838  003C58  0100               	movlb	0	; () banked
 21839  003C5A  6F60               	movwf	?i1___fttol& (0+255),b
 21840  003C5C  0E00               	movlw	0
 21841  003C5E  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 21842  003C60  0E00               	movlw	0
 21843  003C62  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 21844  003C64  0E00               	movlw	0
 21845  003C66  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 21846                           
 21847                           ; BSR set to: 0
 21848  003C68  0012               	return	
 21849  003C6A                     i1l6847:
 21850                           
 21851                           ; BSR set to: 0
 21852  003C6A  0E17               	movlw	23
 21853  003C6C  0100               	movlb	0	; () banked
 21854  003C6E  6F64               	movwf	??i1___fttol& (0+255),b
 21855  003C70  C060  F065         	movff	i1___fttol@f1,??i1___fttol+1
 21856  003C74  C061  F066         	movff	i1___fttol@f1+1,??i1___fttol+2
 21857  003C78  C062  F067         	movff	i1___fttol@f1+2,??i1___fttol+3
 21858  003C7C  0100               	movlb	0	; () banked
 21859  003C7E  2964               	incf	??i1___fttol& (0+255),w,b
 21860  003C80  0100               	movlb	0	; () banked
 21861  003C82  6F68               	movwf	(??i1___fttol+4)& (0+255),b
 21862  003C84  D005               	goto	i1u885_20
 21863  003C86                     i1u885_25:
 21864  003C86  0100               	movlb	0	; () banked
 21865  003C88  90D8               	bcf	status,0,c
 21866  003C8A  3367               	rrcf	(??i1___fttol+3)& (0+255),f,b
 21867  003C8C  3366               	rrcf	(??i1___fttol+2)& (0+255),f,b
 21868  003C8E  3365               	rrcf	(??i1___fttol+1)& (0+255),f,b
 21869  003C90                     i1u885_20:
 21870  003C90  0100               	movlb	0	; () banked
 21871  003C92  2F68               	decfsz	(??i1___fttol+4)& (0+255),f,b
 21872  003C94  D7F8               	goto	i1u885_25
 21873  003C96  0100               	movlb	0	; () banked
 21874  003C98  5165               	movf	(??i1___fttol+1)& (0+255),w,b
 21875  003C9A  0100               	movlb	0	; () banked
 21876  003C9C  6F69               	movwf	i1___fttol@sign1& (0+255),b
 21877                           
 21878                           ; BSR set to: 0
 21879  003C9E  0100               	movlb	0	; () banked
 21880  003CA0  8F61               	bsf	(i1___fttol@f1+1)& (0+255),7,b
 21881                           
 21882                           ; BSR set to: 0
 21883  003CA2  0EFF               	movlw	255
 21884  003CA4  0100               	movlb	0	; () banked
 21885  003CA6  1760               	andwf	i1___fttol@f1& (0+255),f,b
 21886  003CA8  0EFF               	movlw	255
 21887  003CAA  0100               	movlb	0	; () banked
 21888  003CAC  1761               	andwf	(i1___fttol@f1+1)& (0+255),f,b
 21889  003CAE  0E00               	movlw	0
 21890  003CB0  0100               	movlb	0	; () banked
 21891  003CB2  1762               	andwf	(i1___fttol@f1+2)& (0+255),f,b
 21892                           
 21893                           ; BSR set to: 0
 21894  003CB4  0100               	movlb	0	; () banked
 21895  003CB6  5160               	movf	i1___fttol@f1& (0+255),w,b
 21896  003CB8  0100               	movlb	0	; () banked
 21897  003CBA  6F6A               	movwf	i1___fttol@lval& (0+255),b
 21898  003CBC  0100               	movlb	0	; () banked
 21899  003CBE  5161               	movf	(i1___fttol@f1+1)& (0+255),w,b
 21900  003CC0  0100               	movlb	0	; () banked
 21901  003CC2  6F6B               	movwf	(i1___fttol@lval+1)& (0+255),b
 21902  003CC4  0100               	movlb	0	; () banked
 21903  003CC6  5162               	movf	(i1___fttol@f1+2)& (0+255),w,b
 21904  003CC8  0100               	movlb	0	; () banked
 21905  003CCA  6F6C               	movwf	(i1___fttol@lval+2)& (0+255),b
 21906  003CCC  0100               	movlb	0	; () banked
 21907  003CCE  6B6D               	clrf	(i1___fttol@lval+3)& (0+255),b
 21908                           
 21909                           ; BSR set to: 0
 21910  003CD0  0E8E               	movlw	142
 21911  003CD2  0100               	movlb	0	; () banked
 21912  003CD4  5F6E               	subwf	i1___fttol@exp1& (0+255),f,b
 21913                           
 21914                           ; BSR set to: 0
 21915  003CD6  0100               	movlb	0	; () banked
 21916  003CD8  AF6E               	btfss	i1___fttol@exp1& (0+255),7,b
 21917  003CDA  D01A               	goto	i1l6869
 21918                           
 21919                           ; BSR set to: 0
 21920  003CDC  0100               	movlb	0	; () banked
 21921  003CDE  516E               	movf	i1___fttol@exp1& (0+255),w,b
 21922  003CE0  0A80               	xorlw	128
 21923  003CE2  0F8F               	addlw	143
 21924  003CE4  B0D8               	btfsc	status,0,c
 21925  003CE6  D00A               	goto	i1l6865
 21926                           
 21927                           ; BSR set to: 0
 21928  003CE8  0E00               	movlw	0
 21929  003CEA  0100               	movlb	0	; () banked
 21930  003CEC  6F60               	movwf	?i1___fttol& (0+255),b
 21931  003CEE  0E00               	movlw	0
 21932  003CF0  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 21933  003CF2  0E00               	movlw	0
 21934  003CF4  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 21935  003CF6  0E00               	movlw	0
 21936  003CF8  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 21937                           
 21938                           ; BSR set to: 0
 21939  003CFA  0012               	return	
 21940  003CFC                     i1l6865:
 21941                           
 21942                           ; BSR set to: 0
 21943  003CFC  0100               	movlb	0	; () banked
 21944  003CFE  90D8               	bcf	status,0,c
 21945  003D00  336D               	rrcf	(i1___fttol@lval+3)& (0+255),f,b
 21946  003D02  336C               	rrcf	(i1___fttol@lval+2)& (0+255),f,b
 21947  003D04  336B               	rrcf	(i1___fttol@lval+1)& (0+255),f,b
 21948  003D06  336A               	rrcf	i1___fttol@lval& (0+255),f,b
 21949                           
 21950                           ; BSR set to: 0
 21951  003D08  0100               	movlb	0	; () banked
 21952  003D0A  3F6E               	incfsz	i1___fttol@exp1& (0+255),f,b
 21953  003D0C  D7F7               	goto	i1l6865
 21954                           
 21955                           ; BSR set to: 0
 21956  003D0E  D01B               	goto	i1l6879
 21957  003D10                     i1l6869:
 21958                           
 21959                           ; BSR set to: 0
 21960  003D10  0E17               	movlw	23
 21961  003D12  0100               	movlb	0	; () banked
 21962  003D14  656E               	cpfsgt	i1___fttol@exp1& (0+255),b
 21963  003D16  D012               	goto	i1l6877
 21964                           
 21965                           ; BSR set to: 0
 21966  003D18  0E00               	movlw	0
 21967  003D1A  0100               	movlb	0	; () banked
 21968  003D1C  6F60               	movwf	?i1___fttol& (0+255),b
 21969  003D1E  0E00               	movlw	0
 21970  003D20  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 21971  003D22  0E00               	movlw	0
 21972  003D24  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 21973  003D26  0E00               	movlw	0
 21974  003D28  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 21975                           
 21976                           ; BSR set to: 0
 21977  003D2A  0012               	return	
 21978  003D2C                     i1l6875:
 21979                           
 21980                           ; BSR set to: 0
 21981  003D2C  0100               	movlb	0	; () banked
 21982  003D2E  90D8               	bcf	status,0,c
 21983  003D30  376A               	rlcf	i1___fttol@lval& (0+255),f,b
 21984  003D32  376B               	rlcf	(i1___fttol@lval+1)& (0+255),f,b
 21985  003D34  376C               	rlcf	(i1___fttol@lval+2)& (0+255),f,b
 21986  003D36  376D               	rlcf	(i1___fttol@lval+3)& (0+255),f,b
 21987  003D38  0100               	movlb	0	; () banked
 21988  003D3A  076E               	decf	i1___fttol@exp1& (0+255),f,b
 21989  003D3C                     i1l6877:
 21990                           
 21991                           ; BSR set to: 0
 21992  003D3C  0100               	movlb	0	; () banked
 21993  003D3E  516E               	movf	i1___fttol@exp1& (0+255),w,b
 21994  003D40  0100               	movlb	0	; () banked
 21995  003D42  A4D8               	btfss	status,2,c
 21996  003D44  D7F3               	goto	i1l6875
 21997  003D46                     i1l6879:
 21998                           
 21999                           ; BSR set to: 0
 22000  003D46  0100               	movlb	0	; () banked
 22001  003D48  5169               	movf	i1___fttol@sign1& (0+255),w,b
 22002  003D4A  0100               	movlb	0	; () banked
 22003  003D4C  B4D8               	btfsc	status,2,c
 22004  003D4E  D009               	goto	i1l6883
 22005                           
 22006                           ; BSR set to: 0
 22007  003D50  0100               	movlb	0	; () banked
 22008  003D52  1F6D               	comf	(i1___fttol@lval+3)& (0+255),f,b
 22009  003D54  1F6C               	comf	(i1___fttol@lval+2)& (0+255),f,b
 22010  003D56  1F6B               	comf	(i1___fttol@lval+1)& (0+255),f,b
 22011  003D58  6D6A               	negf	i1___fttol@lval& (0+255),b
 22012  003D5A  0E00               	movlw	0
 22013  003D5C  236B               	addwfc	(i1___fttol@lval+1)& (0+255),f,b
 22014  003D5E  236C               	addwfc	(i1___fttol@lval+2)& (0+255),f,b
 22015  003D60  236D               	addwfc	(i1___fttol@lval+3)& (0+255),f,b
 22016  003D62                     i1l6883:
 22017                           
 22018                           ; BSR set to: 0
 22019  003D62  C06A  F060         	movff	i1___fttol@lval,?i1___fttol
 22020  003D66  C06B  F061         	movff	i1___fttol@lval+1,?i1___fttol+1
 22021  003D6A  C06C  F062         	movff	i1___fttol@lval+2,?i1___fttol+2
 22022  003D6E  C06D  F063         	movff	i1___fttol@lval+3,?i1___fttol+3
 22023  003D72  0012               	return	
 22024  003D74                     __end_ofi1___fttol:
 22025                           	opt stack 0
 22026                           pclatu	equ	0xFFB
 22027                           pclath	equ	0xFFA
 22028                           tblptru	equ	0xFF8
 22029                           tblptrh	equ	0xFF7
 22030                           tblptrl	equ	0xFF6
 22031                           tablat	equ	0xFF5
 22032                           prodh	equ	0xFF4
 22033                           prodl	equ	0xFF3
 22034                           intcon	equ	0xFF2
 22035                           postinc0	equ	0xFEE
 22036                           fsr0h	equ	0xFEA
 22037                           fsr0l	equ	0xFE9
 22038                           wreg	equ	0xFE8
 22039                           postdec1	equ	0xFE5
 22040                           fsr1h	equ	0xFE2
 22041                           fsr1l	equ	0xFE1
 22042                           bsr	equ	0xFE0
 22043                           indf2	equ	0xFDF
 22044                           postinc2	equ	0xFDE
 22045                           postdec2	equ	0xFDD
 22046                           plusw2	equ	0xFDB
 22047                           fsr2h	equ	0xFDA
 22048                           fsr2l	equ	0xFD9
 22049                           status	equ	0xFD8
 22050                           
 22051 ;; *************** function i1___aldiv *****************
 22052 ;; Defined at:
 22053 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
 22054 ;; Parameters:    Size  Location     Type
 22055 ;;  dividend        4    0[BANK0 ] long 
 22056 ;;  divisor         4    4[BANK0 ] long 
 22057 ;; Auto vars:     Size  Location     Type
 22058 ;;  __aldiv         4   10[BANK0 ] long 
 22059 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 22060 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 22061 ;; Return value:  Size  Location     Type
 22062 ;;                  4    0[BANK0 ] long 
 22063 ;; Registers used:
 22064 ;;		wreg, status,2, status,0
 22065 ;; Tracked objects:
 22066 ;;		On entry : 0/0
 22067 ;;		On exit  : 0/0
 22068 ;;		Unchanged: 0/0
 22069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22070 ;;      Params:         0       8       0       0       0       0       0
 22071 ;;      Locals:         0       6       0       0       0       0       0
 22072 ;;      Temps:          0       0       0       0       0       0       0
 22073 ;;      Totals:         0      14       0       0       0       0       0
 22074 ;;Total ram usage:       14 bytes
 22075 ;; Hardware stack levels used:    1
 22076 ;; Hardware stack levels required when called:    4
 22077 ;; This function calls:
 22078 ;;		Nothing
 22079 ;; This function is called by:
 22080 ;;		i1_desintegrator
 22081 ;; This function uses a non-reentrant model
 22082 ;;
 22083                           
 22084                           	psect	text94
 22085  0040D2                     __ptext94:
 22086                           	opt stack 0
 22087  0040D2                     i1___aldiv:
 22088                           	opt stack 12
 22089                           
 22090                           ; BSR set to: 0
 22091                           ;incstack = 0
 22092  0040D2  0E00               	movlw	0
 22093  0040D4  0100               	movlb	0	; () banked
 22094  0040D6  6F69               	movwf	i1___aldiv@sign& (0+255),b
 22095                           
 22096                           ; BSR set to: 0
 22097  0040D8  0100               	movlb	0	; () banked
 22098  0040DA  AF67               	btfss	(i1___aldiv@divisor+3)& (0+255),7,b
 22099  0040DC  D00C               	goto	i1l6789
 22100                           
 22101                           ; BSR set to: 0
 22102  0040DE  0100               	movlb	0	; () banked
 22103  0040E0  1F67               	comf	(i1___aldiv@divisor+3)& (0+255),f,b
 22104  0040E2  1F66               	comf	(i1___aldiv@divisor+2)& (0+255),f,b
 22105  0040E4  1F65               	comf	(i1___aldiv@divisor+1)& (0+255),f,b
 22106  0040E6  6D64               	negf	i1___aldiv@divisor& (0+255),b
 22107  0040E8  0E00               	movlw	0
 22108  0040EA  2365               	addwfc	(i1___aldiv@divisor+1)& (0+255),f,b
 22109  0040EC  2366               	addwfc	(i1___aldiv@divisor+2)& (0+255),f,b
 22110  0040EE  2367               	addwfc	(i1___aldiv@divisor+3)& (0+255),f,b
 22111                           
 22112                           ; BSR set to: 0
 22113  0040F0  0E01               	movlw	1
 22114  0040F2  0100               	movlb	0	; () banked
 22115  0040F4  6F69               	movwf	i1___aldiv@sign& (0+255),b
 22116  0040F6                     i1l6789:
 22117                           
 22118                           ; BSR set to: 0
 22119  0040F6  0100               	movlb	0	; () banked
 22120  0040F8  AF63               	btfss	(i1___aldiv@dividend+3)& (0+255),7,b
 22121  0040FA  D00C               	goto	i1l6795
 22122                           
 22123                           ; BSR set to: 0
 22124  0040FC  0100               	movlb	0	; () banked
 22125  0040FE  1F63               	comf	(i1___aldiv@dividend+3)& (0+255),f,b
 22126  004100  1F62               	comf	(i1___aldiv@dividend+2)& (0+255),f,b
 22127  004102  1F61               	comf	(i1___aldiv@dividend+1)& (0+255),f,b
 22128  004104  6D60               	negf	i1___aldiv@dividend& (0+255),b
 22129  004106  0E00               	movlw	0
 22130  004108  2361               	addwfc	(i1___aldiv@dividend+1)& (0+255),f,b
 22131  00410A  2362               	addwfc	(i1___aldiv@dividend+2)& (0+255),f,b
 22132  00410C  2363               	addwfc	(i1___aldiv@dividend+3)& (0+255),f,b
 22133                           
 22134                           ; BSR set to: 0
 22135  00410E  0E01               	movlw	1
 22136  004110  0100               	movlb	0	; () banked
 22137  004112  1B69               	xorwf	i1___aldiv@sign& (0+255),f,b
 22138  004114                     i1l6795:
 22139                           
 22140                           ; BSR set to: 0
 22141  004114  0E00               	movlw	0
 22142  004116  0100               	movlb	0	; () banked
 22143  004118  6F6A               	movwf	i1___aldiv@quotient& (0+255),b
 22144  00411A  0E00               	movlw	0
 22145  00411C  6F6B               	movwf	(i1___aldiv@quotient+1)& (0+255),b
 22146  00411E  0E00               	movlw	0
 22147  004120  6F6C               	movwf	(i1___aldiv@quotient+2)& (0+255),b
 22148  004122  0E00               	movlw	0
 22149  004124  6F6D               	movwf	(i1___aldiv@quotient+3)& (0+255),b
 22150                           
 22151                           ; BSR set to: 0
 22152  004126  0100               	movlb	0	; () banked
 22153  004128  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 22154  00412A  0100               	movlb	0	; () banked
 22155  00412C  1165               	iorwf	(i1___aldiv@divisor+1)& (0+255),w,b
 22156  00412E  0100               	movlb	0	; () banked
 22157  004130  1166               	iorwf	(i1___aldiv@divisor+2)& (0+255),w,b
 22158  004132  0100               	movlb	0	; () banked
 22159  004134  1167               	iorwf	(i1___aldiv@divisor+3)& (0+255),w,b
 22160  004136  B4D8               	btfsc	status,2,c
 22161  004138  D042               	goto	i1l6817
 22162                           
 22163                           ; BSR set to: 0
 22164  00413A  0E01               	movlw	1
 22165  00413C  0100               	movlb	0	; () banked
 22166  00413E  6F68               	movwf	i1___aldiv@counter& (0+255),b
 22167  004140  D008               	goto	i1l6803
 22168  004142                     i1l6801:
 22169                           
 22170                           ; BSR set to: 0
 22171  004142  0100               	movlb	0	; () banked
 22172  004144  90D8               	bcf	status,0,c
 22173  004146  3764               	rlcf	i1___aldiv@divisor& (0+255),f,b
 22174  004148  3765               	rlcf	(i1___aldiv@divisor+1)& (0+255),f,b
 22175  00414A  3766               	rlcf	(i1___aldiv@divisor+2)& (0+255),f,b
 22176  00414C  3767               	rlcf	(i1___aldiv@divisor+3)& (0+255),f,b
 22177  00414E  0100               	movlb	0	; () banked
 22178  004150  2B68               	incf	i1___aldiv@counter& (0+255),f,b
 22179  004152                     i1l6803:
 22180                           
 22181                           ; BSR set to: 0
 22182  004152  0100               	movlb	0	; () banked
 22183  004154  AF67               	btfss	(i1___aldiv@divisor+3)& (0+255),7,b
 22184  004156  D7F5               	goto	i1l6801
 22185  004158                     i1l6805:
 22186                           
 22187                           ; BSR set to: 0
 22188  004158  0100               	movlb	0	; () banked
 22189  00415A  90D8               	bcf	status,0,c
 22190  00415C  376A               	rlcf	i1___aldiv@quotient& (0+255),f,b
 22191  00415E  376B               	rlcf	(i1___aldiv@quotient+1)& (0+255),f,b
 22192  004160  376C               	rlcf	(i1___aldiv@quotient+2)& (0+255),f,b
 22193  004162  376D               	rlcf	(i1___aldiv@quotient+3)& (0+255),f,b
 22194                           
 22195                           ; BSR set to: 0
 22196  004164  0100               	movlb	0	; () banked
 22197  004166  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 22198  004168  0100               	movlb	0	; () banked
 22199  00416A  5D60               	subwf	i1___aldiv@dividend& (0+255),w,b
 22200  00416C  0100               	movlb	0	; () banked
 22201  00416E  5165               	movf	(i1___aldiv@divisor+1)& (0+255),w,b
 22202  004170  0100               	movlb	0	; () banked
 22203  004172  5961               	subwfb	(i1___aldiv@dividend+1)& (0+255),w,b
 22204  004174  0100               	movlb	0	; () banked
 22205  004176  5166               	movf	(i1___aldiv@divisor+2)& (0+255),w,b
 22206  004178  0100               	movlb	0	; () banked
 22207  00417A  5962               	subwfb	(i1___aldiv@dividend+2)& (0+255),w,b
 22208  00417C  0100               	movlb	0	; () banked
 22209  00417E  5167               	movf	(i1___aldiv@divisor+3)& (0+255),w,b
 22210  004180  0100               	movlb	0	; () banked
 22211  004182  5963               	subwfb	(i1___aldiv@dividend+3)& (0+255),w,b
 22212  004184  A0D8               	btfss	status,0,c
 22213  004186  D012               	goto	i1l6813
 22214                           
 22215                           ; BSR set to: 0
 22216  004188  0100               	movlb	0	; () banked
 22217  00418A  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 22218  00418C  0100               	movlb	0	; () banked
 22219  00418E  5F60               	subwf	i1___aldiv@dividend& (0+255),f,b
 22220  004190  0100               	movlb	0	; () banked
 22221  004192  5165               	movf	(i1___aldiv@divisor+1)& (0+255),w,b
 22222  004194  0100               	movlb	0	; () banked
 22223  004196  5B61               	subwfb	(i1___aldiv@dividend+1)& (0+255),f,b
 22224  004198  0100               	movlb	0	; () banked
 22225  00419A  5166               	movf	(i1___aldiv@divisor+2)& (0+255),w,b
 22226  00419C  0100               	movlb	0	; () banked
 22227  00419E  5B62               	subwfb	(i1___aldiv@dividend+2)& (0+255),f,b
 22228  0041A0  0100               	movlb	0	; () banked
 22229  0041A2  5167               	movf	(i1___aldiv@divisor+3)& (0+255),w,b
 22230  0041A4  0100               	movlb	0	; () banked
 22231  0041A6  5B63               	subwfb	(i1___aldiv@dividend+3)& (0+255),f,b
 22232                           
 22233                           ; BSR set to: 0
 22234  0041A8  0100               	movlb	0	; () banked
 22235  0041AA  816A               	bsf	i1___aldiv@quotient& (0+255),0,b
 22236  0041AC                     i1l6813:
 22237                           
 22238                           ; BSR set to: 0
 22239  0041AC  0100               	movlb	0	; () banked
 22240  0041AE  90D8               	bcf	status,0,c
 22241  0041B0  3367               	rrcf	(i1___aldiv@divisor+3)& (0+255),f,b
 22242  0041B2  3366               	rrcf	(i1___aldiv@divisor+2)& (0+255),f,b
 22243  0041B4  3365               	rrcf	(i1___aldiv@divisor+1)& (0+255),f,b
 22244  0041B6  3364               	rrcf	i1___aldiv@divisor& (0+255),f,b
 22245                           
 22246                           ; BSR set to: 0
 22247  0041B8  0100               	movlb	0	; () banked
 22248  0041BA  2F68               	decfsz	i1___aldiv@counter& (0+255),f,b
 22249  0041BC  D7CD               	goto	i1l6805
 22250  0041BE                     i1l6817:
 22251                           
 22252                           ; BSR set to: 0
 22253  0041BE  0100               	movlb	0	; () banked
 22254  0041C0  5169               	movf	i1___aldiv@sign& (0+255),w,b
 22255  0041C2  0100               	movlb	0	; () banked
 22256  0041C4  B4D8               	btfsc	status,2,c
 22257  0041C6  D009               	goto	i1l6821
 22258                           
 22259                           ; BSR set to: 0
 22260  0041C8  0100               	movlb	0	; () banked
 22261  0041CA  1F6D               	comf	(i1___aldiv@quotient+3)& (0+255),f,b
 22262  0041CC  1F6C               	comf	(i1___aldiv@quotient+2)& (0+255),f,b
 22263  0041CE  1F6B               	comf	(i1___aldiv@quotient+1)& (0+255),f,b
 22264  0041D0  6D6A               	negf	i1___aldiv@quotient& (0+255),b
 22265  0041D2  0E00               	movlw	0
 22266  0041D4  236B               	addwfc	(i1___aldiv@quotient+1)& (0+255),f,b
 22267  0041D6  236C               	addwfc	(i1___aldiv@quotient+2)& (0+255),f,b
 22268  0041D8  236D               	addwfc	(i1___aldiv@quotient+3)& (0+255),f,b
 22269  0041DA                     i1l6821:
 22270                           
 22271                           ; BSR set to: 0
 22272  0041DA  C06A  F060         	movff	i1___aldiv@quotient,?i1___aldiv
 22273  0041DE  C06B  F061         	movff	i1___aldiv@quotient+1,?i1___aldiv+1
 22274  0041E2  C06C  F062         	movff	i1___aldiv@quotient+2,?i1___aldiv+2
 22275  0041E6  C06D  F063         	movff	i1___aldiv@quotient+3,?i1___aldiv+3
 22276  0041EA  0012               	return	
 22277  0041EC                     __end_ofi1___aldiv:
 22278                           	opt stack 0
 22279                           pclatu	equ	0xFFB
 22280                           pclath	equ	0xFFA
 22281                           tblptru	equ	0xFF8
 22282                           tblptrh	equ	0xFF7
 22283                           tblptrl	equ	0xFF6
 22284                           tablat	equ	0xFF5
 22285                           prodh	equ	0xFF4
 22286                           prodl	equ	0xFF3
 22287                           intcon	equ	0xFF2
 22288                           postinc0	equ	0xFEE
 22289                           fsr0h	equ	0xFEA
 22290                           fsr0l	equ	0xFE9
 22291                           wreg	equ	0xFE8
 22292                           postdec1	equ	0xFE5
 22293                           fsr1h	equ	0xFE2
 22294                           fsr1l	equ	0xFE1
 22295                           bsr	equ	0xFE0
 22296                           indf2	equ	0xFDF
 22297                           postinc2	equ	0xFDE
 22298                           postdec2	equ	0xFDD
 22299                           plusw2	equ	0xFDB
 22300                           fsr2h	equ	0xFDA
 22301                           fsr2l	equ	0xFD9
 22302                           status	equ	0xFD8
 22303                           
 22304 ;; *************** function i1_checkPass *****************
 22305 ;; Defined at:
 22306 ;;		line 14 in file "source/DisplayProtocol.h"
 22307 ;; Parameters:    Size  Location     Type
 22308 ;;		None
 22309 ;; Auto vars:     Size  Location     Type
 22310 ;;  checkPass       2    5[BANK0 ] int 
 22311 ;;  checkPass       1    4[BANK0 ] unsigned char 
 22312 ;; Return value:  Size  Location     Type
 22313 ;;                  1    wreg      unsigned char 
 22314 ;; Registers used:
 22315 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22316 ;; Tracked objects:
 22317 ;;		On entry : 0/0
 22318 ;;		On exit  : 0/0
 22319 ;;		Unchanged: 0/0
 22320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22321 ;;      Params:         0       0       0       0       0       0       0
 22322 ;;      Locals:         0       3       0       0       0       0       0
 22323 ;;      Temps:          0       4       0       0       0       0       0
 22324 ;;      Totals:         0       7       0       0       0       0       0
 22325 ;;Total ram usage:        7 bytes
 22326 ;; Hardware stack levels used:    1
 22327 ;; Hardware stack levels required when called:    4
 22328 ;; This function calls:
 22329 ;;		Nothing
 22330 ;; This function is called by:
 22331 ;;		i1_pressENTER
 22332 ;; This function uses a non-reentrant model
 22333 ;;
 22334                           
 22335                           	psect	text95
 22336  005D98                     __ptext95:
 22337                           	opt stack 0
 22338  005D98                     i1_checkPass:
 22339                           	opt stack 13
 22340                           
 22341                           ;DisplayProtocol.h: 15: int i;
 22342                           ;DisplayProtocol.h: 16: char passOK = 0;
 22343                           
 22344                           ; BSR set to: 0
 22345                           ;incstack = 0
 22346  005D98  0E00               	movlw	0
 22347  005D9A  0100               	movlb	0	; () banked
 22348  005D9C  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22349                           
 22350                           ;DisplayProtocol.h: 17: for (i = 0; i < 4; i++) {
 22351  005D9E  0E00               	movlw	0
 22352  005DA0  0100               	movlb	0	; () banked
 22353  005DA2  6F66               	movwf	(i1checkPass@i+1)& (0+255),b
 22354  005DA4  0E00               	movlw	0
 22355  005DA6  6F65               	movwf	i1checkPass@i& (0+255),b
 22356  005DA8                     i1l7071:
 22357                           
 22358                           ; BSR set to: 0
 22359  005DA8  0100               	movlb	0	; () banked
 22360  005DAA  BF66               	btfsc	(i1checkPass@i+1)& (0+255),7,b
 22361  005DAC  D008               	goto	i1l7075
 22362  005DAE  0100               	movlb	0	; () banked
 22363  005DB0  5166               	movf	(i1checkPass@i+1)& (0+255),w,b
 22364  005DB2  E136               	bnz	i1l7085
 22365  005DB4  0E04               	movlw	4
 22366  005DB6  0100               	movlb	0	; () banked
 22367  005DB8  5D65               	subwf	i1checkPass@i& (0+255),w,b
 22368  005DBA  B0D8               	btfsc	status,0,c
 22369  005DBC  D031               	goto	i1l7085
 22370  005DBE                     i1l7075:
 22371                           
 22372                           ; BSR set to: 0
 22373                           ;DisplayProtocol.h: 18: if (introducido[i] == contra[i])
 22374  005DBE  0EAB               	movlw	low _contra
 22375  005DC0  0100               	movlb	0	; () banked
 22376  005DC2  2565               	addwf	i1checkPass@i& (0+255),w,b
 22377  005DC4  6ED9               	movwf	fsr2l,c
 22378  005DC6  0E00               	movlw	high _contra
 22379  005DC8  0100               	movlb	0	; () banked
 22380  005DCA  2166               	addwfc	(i1checkPass@i+1)& (0+255),w,b
 22381  005DCC  6EDA               	movwf	fsr2h,c
 22382  005DCE  50DF               	movf	indf2,w,c
 22383  005DD0  0100               	movlb	0	; () banked
 22384  005DD2  6F60               	movwf	??i1_checkPass& (0+255),b
 22385  005DD4  6B61               	clrf	(??i1_checkPass+1)& (0+255),b
 22386  005DD6  0EAF               	movlw	low _introducido
 22387  005DD8  0100               	movlb	0	; () banked
 22388  005DDA  2565               	addwf	i1checkPass@i& (0+255),w,b
 22389  005DDC  6ED9               	movwf	fsr2l,c
 22390  005DDE  0E01               	movlw	high _introducido
 22391  005DE0  0100               	movlb	0	; () banked
 22392  005DE2  2166               	addwfc	(i1checkPass@i+1)& (0+255),w,b
 22393  005DE4  6EDA               	movwf	fsr2h,c
 22394  005DE6  50DF               	movf	indf2,w,c
 22395  005DE8  0100               	movlb	0	; () banked
 22396  005DEA  6F62               	movwf	(??i1_checkPass+2)& (0+255),b
 22397  005DEC  6B63               	clrf	(??i1_checkPass+3)& (0+255),b
 22398  005DEE  BF62               	btfsc	(??i1_checkPass+2)& (0+255),7,b
 22399  005DF0  0763               	decf	(??i1_checkPass+3)& (0+255),f,b
 22400  005DF2  0100               	movlb	0	; () banked
 22401  005DF4  5160               	movf	??i1_checkPass& (0+255),w,b
 22402  005DF6  0100               	movlb	0	; () banked
 22403  005DF8  1962               	xorwf	(??i1_checkPass+2)& (0+255),w,b
 22404  005DFA  E10A               	bnz	i1l7079
 22405  005DFC  0100               	movlb	0	; () banked
 22406  005DFE  5161               	movf	(??i1_checkPass+1)& (0+255),w,b
 22407  005E00  0100               	movlb	0	; () banked
 22408  005E02  1963               	xorwf	(??i1_checkPass+3)& (0+255),w,b
 22409  005E04  A4D8               	btfss	status,2,c
 22410  005E06  D004               	goto	i1l7079
 22411                           
 22412                           ; BSR set to: 0
 22413                           ;DisplayProtocol.h: 19: passOK = 1;
 22414  005E08  0E01               	movlw	1
 22415  005E0A  0100               	movlb	0	; () banked
 22416  005E0C  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22417  005E0E  D004               	goto	i1l7081
 22418  005E10                     i1l7079:
 22419                           
 22420                           ; BSR set to: 0
 22421                           ;DisplayProtocol.h: 20: else {
 22422                           ;DisplayProtocol.h: 21: passOK = 0;
 22423  005E10  0E00               	movlw	0
 22424  005E12  0100               	movlb	0	; () banked
 22425  005E14  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22426                           
 22427                           ;DisplayProtocol.h: 22: break;
 22428  005E16  D004               	goto	i1l7085
 22429  005E18                     i1l7081:
 22430                           
 22431                           ; BSR set to: 0
 22432  005E18  0100               	movlb	0	; () banked
 22433  005E1A  4B65               	infsnz	i1checkPass@i& (0+255),f,b
 22434  005E1C  2B66               	incf	(i1checkPass@i+1)& (0+255),f,b
 22435  005E1E  D7C4               	goto	i1l7071
 22436  005E20                     i1l7085:
 22437                           
 22438                           ; BSR set to: 0
 22439                           ;DisplayProtocol.h: 23: }
 22440                           ;DisplayProtocol.h: 24: }
 22441                           ;DisplayProtocol.h: 25: return passOK;
 22442  005E20  0100               	movlb	0	; () banked
 22443  005E22  5164               	movf	i1checkPass@passOK& (0+255),w,b
 22444  005E24  0012               	return	
 22445  005E26                     __end_ofi1_checkPass:
 22446                           	opt stack 0
 22447                           pclatu	equ	0xFFB
 22448                           pclath	equ	0xFFA
 22449                           tblptru	equ	0xFF8
 22450                           tblptrh	equ	0xFF7
 22451                           tblptrl	equ	0xFF6
 22452                           tablat	equ	0xFF5
 22453                           prodh	equ	0xFF4
 22454                           prodl	equ	0xFF3
 22455                           intcon	equ	0xFF2
 22456                           postinc0	equ	0xFEE
 22457                           fsr0h	equ	0xFEA
 22458                           fsr0l	equ	0xFE9
 22459                           wreg	equ	0xFE8
 22460                           postdec1	equ	0xFE5
 22461                           fsr1h	equ	0xFE2
 22462                           fsr1l	equ	0xFE1
 22463                           bsr	equ	0xFE0
 22464                           indf2	equ	0xFDF
 22465                           postinc2	equ	0xFDE
 22466                           postdec2	equ	0xFDD
 22467                           plusw2	equ	0xFDB
 22468                           fsr2h	equ	0xFDA
 22469                           fsr2l	equ	0xFD9
 22470                           status	equ	0xFD8
 22471                           
 22472 ;; *************** function i1_pressDOWN *****************
 22473 ;; Defined at:
 22474 ;;		line 189 in file "source/DisplayProtocol.h"
 22475 ;; Parameters:    Size  Location     Type
 22476 ;;		None
 22477 ;; Auto vars:     Size  Location     Type
 22478 ;;		None
 22479 ;; Return value:  Size  Location     Type
 22480 ;;                  1    wreg      void 
 22481 ;; Registers used:
 22482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22483 ;; Tracked objects:
 22484 ;;		On entry : 0/0
 22485 ;;		On exit  : 0/0
 22486 ;;		Unchanged: 0/0
 22487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22488 ;;      Params:         0       0       0       0       0       0       0
 22489 ;;      Locals:         0       0       0       0       0       0       0
 22490 ;;      Temps:          0       1       0       0       0       0       0
 22491 ;;      Totals:         0       1       0       0       0       0       0
 22492 ;;Total ram usage:        1 bytes
 22493 ;; Hardware stack levels used:    1
 22494 ;; Hardware stack levels required when called:    5
 22495 ;; This function calls:
 22496 ;;		i1_chanValDigDOWN
 22497 ;; This function is called by:
 22498 ;;		_UARTint
 22499 ;; This function uses a non-reentrant model
 22500 ;;
 22501                           
 22502                           	psect	text96
 22503  004822                     __ptext96:
 22504                           	opt stack 0
 22505  004822                     i1_pressDOWN:
 22506                           	opt stack 13
 22507                           
 22508                           ;DisplayProtocol.h: 190: if (actualScreen == 0 || actualScreen == 4) {
 22509                           
 22510                           ; BSR set to: 0
 22511                           ;incstack = 0
 22512  004822  0101               	movlb	1	; () banked
 22513  004824  51C3               	movf	_actualScreen& (0+255),w,b
 22514  004826  B4D8               	btfsc	status,2,c
 22515  004828  D005               	goto	i1l8031
 22516                           
 22517                           ; BSR set to: 1
 22518  00482A  0E04               	movlw	4
 22519  00482C  0101               	movlb	1	; () banked
 22520  00482E  19C3               	xorwf	_actualScreen& (0+255),w,b
 22521  004830  A4D8               	btfss	status,2,c
 22522  004832  D009               	goto	i1l8037
 22523  004834                     i1l8031:
 22524                           
 22525                           ; BSR set to: 1
 22526                           ;DisplayProtocol.h: 191: menuSection--;
 22527  004834  0101               	movlb	1	; () banked
 22528  004836  07CA               	decf	_menuSection& (0+255),f,b
 22529                           
 22530                           ; BSR set to: 1
 22531                           ;DisplayProtocol.h: 192: if (menuSection < 0)
 22532  004838  0101               	movlb	1	; () banked
 22533  00483A  AFCA               	btfss	_menuSection& (0+255),7,b
 22534  00483C  0012               	return	
 22535                           
 22536                           ; BSR set to: 1
 22537                           ;DisplayProtocol.h: 193: menuSection = 3;
 22538  00483E  0E03               	movlw	3
 22539  004840  0101               	movlb	1	; () banked
 22540  004842  6FCA               	movwf	_menuSection& (0+255),b
 22541                           
 22542                           ; BSR set to: 1
 22543                           ;DisplayProtocol.h: 194: } else if (actualScreen == 1) {
 22544  004844  0012               	return	
 22545  004846                     i1l8037:
 22546                           
 22547                           ; BSR set to: 1
 22548  004846  0101               	movlb	1	; () banked
 22549  004848  05C3               	decf	_actualScreen& (0+255),w,b
 22550  00484A  A4D8               	btfss	status,2,c
 22551  00484C  D022               	goto	i1l8043
 22552                           
 22553                           ; BSR set to: 1
 22554                           ;DisplayProtocol.h: 195: introducido[passSection]--;
 22555  00484E  0101               	movlb	1	; () banked
 22556  004850  51CB               	movf	_passSection& (0+255),w,b
 22557  004852  0D01               	mullw	1
 22558  004854  0EAF               	movlw	low _introducido
 22559  004856  24F3               	addwf	prodl,w,c
 22560  004858  6ED9               	movwf	fsr2l,c
 22561  00485A  0E01               	movlw	high _introducido
 22562  00485C  20F4               	addwfc	prodh,w,c
 22563  00485E  6EDA               	movwf	fsr2h,c
 22564  004860  06DF               	decf	indf2,f,c
 22565                           
 22566                           ;DisplayProtocol.h: 196: if (introducido[passSection] < 0)
 22567  004862  0101               	movlb	1	; () banked
 22568  004864  51CB               	movf	_passSection& (0+255),w,b
 22569  004866  0D01               	mullw	1
 22570  004868  0EAF               	movlw	low _introducido
 22571  00486A  24F3               	addwf	prodl,w,c
 22572  00486C  6ED9               	movwf	fsr2l,c
 22573  00486E  0E01               	movlw	high _introducido
 22574  004870  20F4               	addwfc	prodh,w,c
 22575  004872  6EDA               	movwf	fsr2h,c
 22576  004874  0E00               	movlw	0
 22577  004876  AEDB               	btfss	plusw2,7,c
 22578  004878  0012               	return	
 22579                           
 22580                           ; BSR set to: 1
 22581                           ;DisplayProtocol.h: 197: introducido[passSection] = 9;
 22582  00487A  0101               	movlb	1	; () banked
 22583  00487C  51CB               	movf	_passSection& (0+255),w,b
 22584  00487E  0D01               	mullw	1
 22585  004880  0EAF               	movlw	low _introducido
 22586  004882  24F3               	addwf	prodl,w,c
 22587  004884  6ED9               	movwf	fsr2l,c
 22588  004886  0E01               	movlw	high _introducido
 22589  004888  20F4               	addwfc	prodh,w,c
 22590  00488A  6EDA               	movwf	fsr2h,c
 22591  00488C  0E09               	movlw	9
 22592  00488E  6EDF               	movwf	indf2,c
 22593                           
 22594                           ; BSR set to: 1
 22595                           ;DisplayProtocol.h: 198: } else if (actualScreen == 2 || actualScreen == 3
 22596  004890  0012               	return	
 22597  004892                     i1l8043:
 22598                           
 22599                           ; BSR set to: 1
 22600                           ;DisplayProtocol.h: 199: || actualScreen == 10 || actualScreen == 11) {
 22601  004892  0E02               	movlw	2
 22602  004894  0101               	movlb	1	; () banked
 22603  004896  19C3               	xorwf	_actualScreen& (0+255),w,b
 22604  004898  B4D8               	btfsc	status,2,c
 22605  00489A  D00F               	goto	i1l8051
 22606                           
 22607                           ; BSR set to: 1
 22608  00489C  0E03               	movlw	3
 22609  00489E  0101               	movlb	1	; () banked
 22610  0048A0  19C3               	xorwf	_actualScreen& (0+255),w,b
 22611  0048A2  B4D8               	btfsc	status,2,c
 22612  0048A4  D00A               	goto	i1l8051
 22613                           
 22614                           ; BSR set to: 1
 22615  0048A6  0E0A               	movlw	10
 22616  0048A8  0101               	movlb	1	; () banked
 22617  0048AA  19C3               	xorwf	_actualScreen& (0+255),w,b
 22618  0048AC  B4D8               	btfsc	status,2,c
 22619  0048AE  D005               	goto	i1l8051
 22620                           
 22621                           ; BSR set to: 1
 22622  0048B0  0E0B               	movlw	11
 22623  0048B2  0101               	movlb	1	; () banked
 22624  0048B4  19C3               	xorwf	_actualScreen& (0+255),w,b
 22625  0048B6  A4D8               	btfss	status,2,c
 22626  0048B8  D011               	goto	i1l8057
 22627  0048BA                     i1l8051:
 22628                           
 22629                           ; BSR set to: 1
 22630                           ;DisplayProtocol.h: 200: selSN = !selSN;
 22631  0048BA  0101               	movlb	1	; () banked
 22632  0048BC  51CC               	movf	_selSN& (0+255),w,b
 22633  0048BE  A4D8               	btfss	status,2,c
 22634  0048C0  D002               	goto	i1u1126_20
 22635  0048C2  0E01               	movlw	1
 22636  0048C4  D001               	goto	i1u1127_20
 22637  0048C6                     i1u1126_20:
 22638  0048C6  0E00               	movlw	0
 22639  0048C8                     i1u1127_20:
 22640  0048C8  0101               	movlb	1	; () banked
 22641  0048CA  6FCC               	movwf	_selSN& (0+255),b
 22642                           
 22643                           ; BSR set to: 1
 22644                           ;DisplayProtocol.h: 201: if(selSN > 1)
 22645  0048CC  0E01               	movlw	1
 22646  0048CE  0101               	movlb	1	; () banked
 22647  0048D0  65CC               	cpfsgt	_selSN& (0+255),b
 22648  0048D2  0012               	return	
 22649                           
 22650                           ; BSR set to: 1
 22651                           ;DisplayProtocol.h: 202: selSN = 0;
 22652  0048D4  0E00               	movlw	0
 22653  0048D6  0101               	movlb	1	; () banked
 22654  0048D8  6FCC               	movwf	_selSN& (0+255),b
 22655                           
 22656                           ; BSR set to: 1
 22657                           ;DisplayProtocol.h: 203: }else if(actualScreen == 5) {
 22658  0048DA  0012               	return	
 22659  0048DC                     i1l8057:
 22660                           
 22661                           ; BSR set to: 1
 22662  0048DC  0E05               	movlw	5
 22663  0048DE  0101               	movlb	1	; () banked
 22664  0048E0  19C3               	xorwf	_actualScreen& (0+255),w,b
 22665  0048E2  B4D8               	btfsc	status,2,c
 22666  0048E4  D009               	goto	i1l8067
 22667  0048E6  D014               	goto	i1l8069
 22668  0048E8                     i1l8061:
 22669                           
 22670                           ; BSR set to: 1
 22671                           ;DisplayProtocol.h: 208: chanValDigDOWN();
 22672  0048E8  ECB4  F026         	call	i1_chanValDigDOWN	;wreg free
 22673                           
 22674                           ;DisplayProtocol.h: 209: break;
 22675  0048EC  0012               	return	
 22676  0048EE                     i1l8063:
 22677                           
 22678                           ;DisplayProtocol.h: 211: chanVals--;
 22679  0048EE  0101               	movlb	1	; () banked
 22680  0048F0  07BA               	decf	_chanVals& (0+255),f,b
 22681  0048F2  A0D8               	btfss	status,0,c
 22682  0048F4  07BB               	decf	(_chanVals+1)& (0+255),f,b
 22683                           
 22684                           ; BSR set to: 1
 22685                           ;DisplayProtocol.h: 213: }
 22686                           ;DisplayProtocol.h: 214: }
 22687                           
 22688                           ;DisplayProtocol.h: 212: break;
 22689  0048F6  0012               	return	
 22690  0048F8                     i1l8067:
 22691                           
 22692                           ; BSR set to: 1
 22693  0048F8  0101               	movlb	1	; () banked
 22694  0048FA  51CA               	movf	_menuSection& (0+255),w,b
 22695                           
 22696                           ; Switch size 1, requested type "space"
 22697                           ; Number of cases is 3, Range of values is 0 to 2
 22698                           ; switch strategies available:
 22699                           ; Name         Instructions Cycles
 22700                           ; simple_byte           10     6 (average)
 22701                           ;	Chosen strategy is simple_byte
 22702  0048FC  0A00               	xorlw	0	; case 0
 22703  0048FE  B4D8               	btfsc	status,2,c
 22704  004900  0012               	return	
 22705  004902  0A01               	xorlw	1	; case 1
 22706  004904  B4D8               	btfsc	status,2,c
 22707  004906  D7F0               	goto	i1l8061
 22708  004908  0A03               	xorlw	3	; case 2
 22709  00490A  A4D8               	btfss	status,2,c
 22710                           
 22711                           ; BSR set to: 1
 22712                           ;DisplayProtocol.h: 215: }else if(actualScreen == 12)
 22713  00490C  0012               	return	
 22714  00490E  D7EF               	goto	i1l8063
 22715  004910                     i1l8069:
 22716                           
 22717                           ; BSR set to: 1
 22718  004910  0E0C               	movlw	12
 22719  004912  0101               	movlb	1	; () banked
 22720  004914  19C3               	xorwf	_actualScreen& (0+255),w,b
 22721  004916  A4D8               	btfss	status,2,c
 22722  004918  0012               	return	
 22723                           
 22724                           ; BSR set to: 1
 22725                           ;DisplayProtocol.h: 216: chanValDigDOWN();
 22726  00491A  ECB4  F026         	call	i1_chanValDigDOWN	;wreg free
 22727  00491E  0012               	return	
 22728  004920                     __end_ofi1_pressDOWN:
 22729                           	opt stack 0
 22730                           pclatu	equ	0xFFB
 22731                           pclath	equ	0xFFA
 22732                           tblptru	equ	0xFF8
 22733                           tblptrh	equ	0xFF7
 22734                           tblptrl	equ	0xFF6
 22735                           tablat	equ	0xFF5
 22736                           prodh	equ	0xFF4
 22737                           prodl	equ	0xFF3
 22738                           intcon	equ	0xFF2
 22739                           postinc0	equ	0xFEE
 22740                           fsr0h	equ	0xFEA
 22741                           fsr0l	equ	0xFE9
 22742                           wreg	equ	0xFE8
 22743                           postdec1	equ	0xFE5
 22744                           fsr1h	equ	0xFE2
 22745                           fsr1l	equ	0xFE1
 22746                           bsr	equ	0xFE0
 22747                           indf2	equ	0xFDF
 22748                           postinc2	equ	0xFDE
 22749                           postdec2	equ	0xFDD
 22750                           plusw2	equ	0xFDB
 22751                           fsr2h	equ	0xFDA
 22752                           fsr2l	equ	0xFD9
 22753                           status	equ	0xFD8
 22754                           
 22755 ;; *************** function i1_chanValDigDOWN *****************
 22756 ;; Defined at:
 22757 ;;		line 37 in file "source/DisplayProtocol.h"
 22758 ;; Parameters:    Size  Location     Type
 22759 ;;		None
 22760 ;; Auto vars:     Size  Location     Type
 22761 ;;		None
 22762 ;; Return value:  Size  Location     Type
 22763 ;;                  1    wreg      void 
 22764 ;; Registers used:
 22765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22766 ;; Tracked objects:
 22767 ;;		On entry : 0/0
 22768 ;;		On exit  : 0/0
 22769 ;;		Unchanged: 0/0
 22770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22771 ;;      Params:         0       0       0       0       0       0       0
 22772 ;;      Locals:         0       0       0       0       0       0       0
 22773 ;;      Temps:          0       5       0       0       0       0       0
 22774 ;;      Totals:         0       5       0       0       0       0       0
 22775 ;;Total ram usage:        5 bytes
 22776 ;; Hardware stack levels used:    1
 22777 ;; Hardware stack levels required when called:    4
 22778 ;; This function calls:
 22779 ;;		Nothing
 22780 ;; This function is called by:
 22781 ;;		i1_pressDOWN
 22782 ;; This function uses a non-reentrant model
 22783 ;;
 22784                           
 22785                           	psect	text97
 22786  004D68                     __ptext97:
 22787                           	opt stack 0
 22788  004D68                     i1_chanValDigDOWN:
 22789                           	opt stack 13
 22790                           
 22791                           ;DisplayProtocol.h: 38: chanValdig[chanValSection]--;
 22792                           
 22793                           ;incstack = 0
 22794  004D68  0101               	movlb	1	; () banked
 22795  004D6A  519D               	movf	_chanValSection& (0+255),w,b
 22796  004D6C  0D01               	mullw	1
 22797  004D6E  0EA9               	movlw	low _chanValdig
 22798  004D70  24F3               	addwf	prodl,w,c
 22799  004D72  6ED9               	movwf	fsr2l,c
 22800  004D74  0E01               	movlw	high _chanValdig
 22801  004D76  20F4               	addwfc	prodh,w,c
 22802  004D78  6EDA               	movwf	fsr2h,c
 22803  004D7A  06DF               	decf	indf2,f,c
 22804                           
 22805                           ;DisplayProtocol.h: 39: if(chanValdig[chanValSection] < 0) {
 22806  004D7C  0101               	movlb	1	; () banked
 22807  004D7E  519D               	movf	_chanValSection& (0+255),w,b
 22808  004D80  0D01               	mullw	1
 22809  004D82  0EA9               	movlw	low _chanValdig
 22810  004D84  24F3               	addwf	prodl,w,c
 22811  004D86  6ED9               	movwf	fsr2l,c
 22812  004D88  0E01               	movlw	high _chanValdig
 22813  004D8A  20F4               	addwfc	prodh,w,c
 22814  004D8C  6EDA               	movwf	fsr2h,c
 22815  004D8E  0E00               	movlw	0
 22816  004D90  AEDB               	btfss	plusw2,7,c
 22817  004D92  0012               	return	
 22818                           
 22819                           ; BSR set to: 1
 22820                           ;DisplayProtocol.h: 40: chanValdig[chanValSection] = 9;
 22821  004D94  0101               	movlb	1	; () banked
 22822  004D96  519D               	movf	_chanValSection& (0+255),w,b
 22823  004D98  0D01               	mullw	1
 22824  004D9A  0EA9               	movlw	low _chanValdig
 22825  004D9C  24F3               	addwf	prodl,w,c
 22826  004D9E  6ED9               	movwf	fsr2l,c
 22827  004DA0  0E01               	movlw	high _chanValdig
 22828  004DA2  20F4               	addwfc	prodh,w,c
 22829  004DA4  6EDA               	movwf	fsr2h,c
 22830  004DA6  0E09               	movlw	9
 22831  004DA8  6EDF               	movwf	indf2,c
 22832                           
 22833                           ; BSR set to: 1
 22834                           ;DisplayProtocol.h: 41: if(chanValSection > 1 && chanValdig[chanValSection - 1] > 0)
 22835  004DAA  0101               	movlb	1	; () banked
 22836  004DAC  519D               	movf	_chanValSection& (0+255),w,b
 22837  004DAE  0A80               	xorlw	128
 22838  004DB0  0F7E               	addlw	-130
 22839  004DB2  A0D8               	btfss	status,0,c
 22840  004DB4  0012               	return	
 22841                           
 22842                           ; BSR set to: 1
 22843  004DB6  0EFF               	movlw	255
 22844  004DB8  0100               	movlb	0	; () banked
 22845  004DBA  6F60               	movwf	??i1_chanValDigDOWN& (0+255),b
 22846  004DBC  0EFF               	movlw	255
 22847  004DBE  0100               	movlb	0	; () banked
 22848  004DC0  6F61               	movwf	(??i1_chanValDigDOWN+1)& (0+255),b
 22849  004DC2  C19D  F062         	movff	_chanValSection,??i1_chanValDigDOWN+2
 22850  004DC6  0100               	movlb	0	; () banked
 22851  004DC8  6B63               	clrf	(??i1_chanValDigDOWN+3)& (0+255),b
 22852  004DCA  BF62               	btfsc	(??i1_chanValDigDOWN+2)& (0+255),7,b
 22853  004DCC  0763               	decf	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22854  004DCE  0100               	movlb	0	; () banked
 22855  004DD0  5160               	movf	??i1_chanValDigDOWN& (0+255),w,b
 22856  004DD2  0100               	movlb	0	; () banked
 22857  004DD4  2762               	addwf	(??i1_chanValDigDOWN+2)& (0+255),f,b
 22858  004DD6  0100               	movlb	0	; () banked
 22859  004DD8  5161               	movf	(??i1_chanValDigDOWN+1)& (0+255),w,b
 22860  004DDA  0100               	movlb	0	; () banked
 22861  004DDC  2363               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22862  004DDE  0EA9               	movlw	low _chanValdig
 22863  004DE0  0100               	movlb	0	; () banked
 22864  004DE2  2562               	addwf	(??i1_chanValDigDOWN+2)& (0+255),w,b
 22865  004DE4  6ED9               	movwf	fsr2l,c
 22866  004DE6  0E01               	movlw	high _chanValdig
 22867  004DE8  0100               	movlb	0	; () banked
 22868  004DEA  2163               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),w,b
 22869  004DEC  6EDA               	movwf	fsr2h,c
 22870  004DEE  50DF               	movf	indf2,w,c
 22871  004DF0  0A80               	xorlw	128
 22872  004DF2  0F7F               	addlw	-129
 22873  004DF4  A0D8               	btfss	status,0,c
 22874  004DF6  0012               	return	
 22875                           
 22876                           ; BSR set to: 0
 22877                           ;DisplayProtocol.h: 42: chanValdig[chanValSection - 1]--;
 22878  004DF8  0EFF               	movlw	255
 22879  004DFA  0100               	movlb	0	; () banked
 22880  004DFC  6F60               	movwf	??i1_chanValDigDOWN& (0+255),b
 22881  004DFE  0EFF               	movlw	255
 22882  004E00  0100               	movlb	0	; () banked
 22883  004E02  6F61               	movwf	(??i1_chanValDigDOWN+1)& (0+255),b
 22884  004E04  C19D  F062         	movff	_chanValSection,??i1_chanValDigDOWN+2
 22885  004E08  0100               	movlb	0	; () banked
 22886  004E0A  6B63               	clrf	(??i1_chanValDigDOWN+3)& (0+255),b
 22887  004E0C  BF62               	btfsc	(??i1_chanValDigDOWN+2)& (0+255),7,b
 22888  004E0E  0763               	decf	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22889  004E10  0100               	movlb	0	; () banked
 22890  004E12  5160               	movf	??i1_chanValDigDOWN& (0+255),w,b
 22891  004E14  0100               	movlb	0	; () banked
 22892  004E16  2762               	addwf	(??i1_chanValDigDOWN+2)& (0+255),f,b
 22893  004E18  0100               	movlb	0	; () banked
 22894  004E1A  5161               	movf	(??i1_chanValDigDOWN+1)& (0+255),w,b
 22895  004E1C  0100               	movlb	0	; () banked
 22896  004E1E  2363               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22897  004E20  0EA9               	movlw	low _chanValdig
 22898  004E22  0100               	movlb	0	; () banked
 22899  004E24  2562               	addwf	(??i1_chanValDigDOWN+2)& (0+255),w,b
 22900  004E26  6ED9               	movwf	fsr2l,c
 22901  004E28  0E01               	movlw	high _chanValdig
 22902  004E2A  0100               	movlb	0	; () banked
 22903  004E2C  2163               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),w,b
 22904  004E2E  6EDA               	movwf	fsr2h,c
 22905  004E30  06DF               	decf	indf2,f,c
 22906                           
 22907                           ; BSR set to: 0
 22908  004E32  0012               	return	
 22909  004E34                     __end_ofi1_chanValDigDOWN:
 22910                           	opt stack 0
 22911                           pclatu	equ	0xFFB
 22912                           pclath	equ	0xFFA
 22913                           tblptru	equ	0xFF8
 22914                           tblptrh	equ	0xFF7
 22915                           tblptrl	equ	0xFF6
 22916                           tablat	equ	0xFF5
 22917                           prodh	equ	0xFF4
 22918                           prodl	equ	0xFF3
 22919                           intcon	equ	0xFF2
 22920                           postinc0	equ	0xFEE
 22921                           fsr0h	equ	0xFEA
 22922                           fsr0l	equ	0xFE9
 22923                           wreg	equ	0xFE8
 22924                           postdec1	equ	0xFE5
 22925                           fsr1h	equ	0xFE2
 22926                           fsr1l	equ	0xFE1
 22927                           bsr	equ	0xFE0
 22928                           indf2	equ	0xFDF
 22929                           postinc2	equ	0xFDE
 22930                           postdec2	equ	0xFDD
 22931                           plusw2	equ	0xFDB
 22932                           fsr2h	equ	0xFDA
 22933                           fsr2l	equ	0xFD9
 22934                           status	equ	0xFD8
 22935                           
 22936 ;; *************** function i1_longPressUP *****************
 22937 ;; Defined at:
 22938 ;;		line 165 in file "source/DisplayProtocol.h"
 22939 ;; Parameters:    Size  Location     Type
 22940 ;;		None
 22941 ;; Auto vars:     Size  Location     Type
 22942 ;;		None
 22943 ;; Return value:  Size  Location     Type
 22944 ;;                  1    wreg      void 
 22945 ;; Registers used:
 22946 ;;		wreg, status,2, status,0
 22947 ;; Tracked objects:
 22948 ;;		On entry : 0/0
 22949 ;;		On exit  : 0/0
 22950 ;;		Unchanged: 0/0
 22951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22952 ;;      Params:         0       0       0       0       0       0       0
 22953 ;;      Locals:         0       0       0       0       0       0       0
 22954 ;;      Temps:          0       0       0       0       0       0       0
 22955 ;;      Totals:         0       0       0       0       0       0       0
 22956 ;;Total ram usage:        0 bytes
 22957 ;; Hardware stack levels used:    1
 22958 ;; Hardware stack levels required when called:    4
 22959 ;; This function calls:
 22960 ;;		Nothing
 22961 ;; This function is called by:
 22962 ;;		_UARTint
 22963 ;; This function uses a non-reentrant model
 22964 ;;
 22965                           
 22966                           	psect	text98
 22967  0062F6                     __ptext98:
 22968                           	opt stack 0
 22969  0062F6                     i1_longPressUP:
 22970                           	opt stack 14
 22971                           
 22972                           ;DisplayProtocol.h: 166: if (!UPisLP) {
 22973                           
 22974                           ;incstack = 0
 22975  0062F6  5049               	movf	_UPisLP,w,c
 22976  0062F8  A4D8               	btfss	status,2,c
 22977  0062FA  0012               	return	
 22978                           
 22979                           ;DisplayProtocol.h: 167: UPisLP = 1;
 22980  0062FC  0E01               	movlw	1
 22981  0062FE  6E49               	movwf	_UPisLP,c
 22982                           
 22983                           ;DisplayProtocol.h: 168: if (actualScreen == 0 || actualScreen == 4) {
 22984  006300  0101               	movlb	1	; () banked
 22985  006302  51C3               	movf	_actualScreen& (0+255),w,b
 22986  006304  B4D8               	btfsc	status,2,c
 22987  006306  D005               	goto	i1l8009
 22988                           
 22989                           ; BSR set to: 1
 22990  006308  0E04               	movlw	4
 22991  00630A  0101               	movlb	1	; () banked
 22992  00630C  19C3               	xorwf	_actualScreen& (0+255),w,b
 22993  00630E  A4D8               	btfss	status,2,c
 22994  006310  D01C               	goto	i1l8021
 22995  006312                     i1l8009:
 22996                           
 22997                           ; BSR set to: 1
 22998                           ;DisplayProtocol.h: 169: if (holdENTERcont > 5) {
 22999  006312  0E05               	movlw	5
 23000  006314  0101               	movlb	1	; () banked
 23001  006316  65C7               	cpfsgt	_holdENTERcont& (0+255),b
 23002  006318  D014               	goto	i1l8019
 23003                           
 23004                           ; BSR set to: 1
 23005                           ;DisplayProtocol.h: 170: if (actualScreen == 0) {
 23006  00631A  0101               	movlb	1	; () banked
 23007  00631C  51C3               	movf	_actualScreen& (0+255),w,b
 23008  00631E  A4D8               	btfss	status,2,c
 23009  006320  D007               	goto	i1l8015
 23010                           
 23011                           ; BSR set to: 1
 23012                           ;DisplayProtocol.h: 171: actualScreen = 1;
 23013  006322  0E01               	movlw	1
 23014  006324  0101               	movlb	1	; () banked
 23015  006326  6FC3               	movwf	_actualScreen& (0+255),b
 23016                           
 23017                           ;DisplayProtocol.h: 172: fd = 0;
 23018  006328  0E00               	movlw	0
 23019  00632A  0101               	movlb	1	; () banked
 23020  00632C  6FC5               	movwf	_fd& (0+255),b
 23021                           
 23022                           ;DisplayProtocol.h: 173: } else if (actualScreen == 4)
 23023  00632E  0012               	return	
 23024  006330                     i1l8015:
 23025                           
 23026                           ; BSR set to: 1
 23027  006330  0E04               	movlw	4
 23028  006332  0101               	movlb	1	; () banked
 23029  006334  19C3               	xorwf	_actualScreen& (0+255),w,b
 23030  006336  A4D8               	btfss	status,2,c
 23031  006338  0012               	return	
 23032                           
 23033                           ; BSR set to: 1
 23034                           ;DisplayProtocol.h: 174: actualScreen = 9;
 23035  00633A  0E09               	movlw	9
 23036  00633C  0101               	movlb	1	; () banked
 23037  00633E  6FC3               	movwf	_actualScreen& (0+255),b
 23038                           
 23039                           ; BSR set to: 1
 23040                           ;DisplayProtocol.h: 175: } else
 23041                           
 23042                           ; BSR set to: 1
 23043  006340  0012               	return	
 23044  006342                     i1l8019:
 23045                           
 23046                           ; BSR set to: 1
 23047                           ;DisplayProtocol.h: 176: menuSection = 0;
 23048  006342  0E00               	movlw	0
 23049  006344  0101               	movlb	1	; () banked
 23050  006346  6FCA               	movwf	_menuSection& (0+255),b
 23051                           
 23052                           ; BSR set to: 1
 23053                           ;DisplayProtocol.h: 177: }else if(actualScreen == 5) {
 23054  006348  0012               	return	
 23055  00634A                     i1l8021:
 23056                           
 23057                           ; BSR set to: 1
 23058  00634A  0E05               	movlw	5
 23059  00634C  0101               	movlb	1	; () banked
 23060  00634E  19C3               	xorwf	_actualScreen& (0+255),w,b
 23061  006350  A4D8               	btfss	status,2,c
 23062  006352  0012               	return	
 23063                           
 23064                           ; BSR set to: 1
 23065                           ;DisplayProtocol.h: 178: if(menuSection == 2)
 23066  006354  0E02               	movlw	2
 23067  006356  0101               	movlb	1	; () banked
 23068  006358  19CA               	xorwf	_menuSection& (0+255),w,b
 23069  00635A  A4D8               	btfss	status,2,c
 23070  00635C  0012               	return	
 23071                           
 23072                           ; BSR set to: 1
 23073                           ;DisplayProtocol.h: 179: chanVals += 10;
 23074  00635E  0E0A               	movlw	10
 23075  006360  0101               	movlb	1	; () banked
 23076  006362  27BA               	addwf	_chanVals& (0+255),f,b
 23077  006364  0E00               	movlw	0
 23078  006366  23BB               	addwfc	(_chanVals+1)& (0+255),f,b
 23079                           
 23080                           ; BSR set to: 1
 23081                           
 23082                           ; BSR set to: 1
 23083                           
 23084                           ; BSR set to: 1
 23085  006368  0012               	return	
 23086  00636A                     __end_ofi1_longPressUP:
 23087                           	opt stack 0
 23088                           pclatu	equ	0xFFB
 23089                           pclath	equ	0xFFA
 23090                           tblptru	equ	0xFF8
 23091                           tblptrh	equ	0xFF7
 23092                           tblptrl	equ	0xFF6
 23093                           tablat	equ	0xFF5
 23094                           prodh	equ	0xFF4
 23095                           prodl	equ	0xFF3
 23096                           intcon	equ	0xFF2
 23097                           postinc0	equ	0xFEE
 23098                           fsr0h	equ	0xFEA
 23099                           fsr0l	equ	0xFE9
 23100                           wreg	equ	0xFE8
 23101                           postdec1	equ	0xFE5
 23102                           fsr1h	equ	0xFE2
 23103                           fsr1l	equ	0xFE1
 23104                           bsr	equ	0xFE0
 23105                           indf2	equ	0xFDF
 23106                           postinc2	equ	0xFDE
 23107                           postdec2	equ	0xFDD
 23108                           plusw2	equ	0xFDB
 23109                           fsr2h	equ	0xFDA
 23110                           fsr2l	equ	0xFD9
 23111                           status	equ	0xFD8
 23112                           
 23113 ;; *************** function i1_longPressRETRO *****************
 23114 ;; Defined at:
 23115 ;;		line 259 in file "source/DisplayProtocol.h"
 23116 ;; Parameters:    Size  Location     Type
 23117 ;;		None
 23118 ;; Auto vars:     Size  Location     Type
 23119 ;;		None
 23120 ;; Return value:  Size  Location     Type
 23121 ;;                  1    wreg      void 
 23122 ;; Registers used:
 23123 ;;		wreg, status,2, status,0
 23124 ;; Tracked objects:
 23125 ;;		On entry : 0/0
 23126 ;;		On exit  : 0/0
 23127 ;;		Unchanged: 0/0
 23128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23129 ;;      Params:         0       0       0       0       0       0       0
 23130 ;;      Locals:         0       0       0       0       0       0       0
 23131 ;;      Temps:          0       0       0       0       0       0       0
 23132 ;;      Totals:         0       0       0       0       0       0       0
 23133 ;;Total ram usage:        0 bytes
 23134 ;; Hardware stack levels used:    1
 23135 ;; Hardware stack levels required when called:    4
 23136 ;; This function calls:
 23137 ;;		Nothing
 23138 ;; This function is called by:
 23139 ;;		_UARTint
 23140 ;; This function uses a non-reentrant model
 23141 ;;
 23142                           
 23143                           	psect	text99
 23144  00656E                     __ptext99:
 23145                           	opt stack 0
 23146  00656E                     i1_longPressRETRO:
 23147                           	opt stack 14
 23148                           
 23149                           ;DisplayProtocol.h: 260: if (!RETROisLP) {
 23150                           
 23151                           ;incstack = 0
 23152  00656E  5048               	movf	_RETROisLP,w,c
 23153  006570  A4D8               	btfss	status,2,c
 23154  006572  0012               	return	
 23155                           
 23156                           ;DisplayProtocol.h: 261: RETROisLP = 1;
 23157  006574  0E01               	movlw	1
 23158  006576  6E48               	movwf	_RETROisLP,c
 23159                           
 23160                           ;DisplayProtocol.h: 262: if(actualScreen == 0 || actualScreen == 4) {
 23161  006578  0101               	movlb	1	; () banked
 23162  00657A  51C3               	movf	_actualScreen& (0+255),w,b
 23163  00657C  B4D8               	btfsc	status,2,c
 23164  00657E  D005               	goto	i1l8127
 23165                           
 23166                           ; BSR set to: 1
 23167  006580  0E04               	movlw	4
 23168  006582  0101               	movlb	1	; () banked
 23169  006584  19C3               	xorwf	_actualScreen& (0+255),w,b
 23170  006586  A4D8               	btfss	status,2,c
 23171  006588  D00D               	goto	i1l8133
 23172  00658A                     i1l8127:
 23173                           
 23174                           ; BSR set to: 1
 23175                           ;DisplayProtocol.h: 263: if(processStarted) {
 23176  00658A  0100               	movlb	0	; () banked
 23177  00658C  51BB               	movf	_processStarted& (0+255),w,b
 23178  00658E  B4D8               	btfsc	status,2,c
 23179  006590  0012               	return	
 23180                           
 23181                           ; BSR set to: 0
 23182                           ;DisplayProtocol.h: 264: tempLastScreen = actualScreen;
 23183  006592  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 23184                           
 23185                           ; BSR set to: 0
 23186                           ;DisplayProtocol.h: 265: actualScreen = 3;
 23187  006596  0E03               	movlw	3
 23188  006598  0101               	movlb	1	; () banked
 23189  00659A  6FC3               	movwf	_actualScreen& (0+255),b
 23190                           
 23191                           ;DisplayProtocol.h: 266: selSN = 0;
 23192  00659C  0E00               	movlw	0
 23193  00659E  0101               	movlb	1	; () banked
 23194  0065A0  6FCC               	movwf	_selSN& (0+255),b
 23195                           
 23196                           ; BSR set to: 1
 23197                           ;DisplayProtocol.h: 267: }
 23198                           ;DisplayProtocol.h: 268: }else if(actualScreen == 5)
 23199  0065A2  0012               	return	
 23200  0065A4                     i1l8133:
 23201                           
 23202                           ; BSR set to: 1
 23203  0065A4  0E05               	movlw	5
 23204  0065A6  0101               	movlb	1	; () banked
 23205  0065A8  19C3               	xorwf	_actualScreen& (0+255),w,b
 23206  0065AA  A4D8               	btfss	status,2,c
 23207  0065AC  D004               	goto	i1l8137
 23208                           
 23209                           ; BSR set to: 1
 23210                           ;DisplayProtocol.h: 269: actualScreen = 4;
 23211  0065AE  0E04               	movlw	4
 23212  0065B0  0101               	movlb	1	; () banked
 23213  0065B2  6FC3               	movwf	_actualScreen& (0+255),b
 23214  0065B4  0012               	return	
 23215  0065B6                     i1l8137:
 23216                           
 23217                           ; BSR set to: 1
 23218                           ;DisplayProtocol.h: 270: else if(actualScreen == 12)
 23219  0065B6  0E0C               	movlw	12
 23220  0065B8  0101               	movlb	1	; () banked
 23221  0065BA  19C3               	xorwf	_actualScreen& (0+255),w,b
 23222  0065BC  A4D8               	btfss	status,2,c
 23223  0065BE  0012               	return	
 23224                           
 23225                           ; BSR set to: 1
 23226                           ;DisplayProtocol.h: 271: actualScreen = 4;
 23227  0065C0  0E04               	movlw	4
 23228  0065C2  0101               	movlb	1	; () banked
 23229  0065C4  6FC3               	movwf	_actualScreen& (0+255),b
 23230                           
 23231                           ; BSR set to: 1
 23232                           
 23233                           ; BSR set to: 1
 23234                           
 23235                           ; BSR set to: 1
 23236  0065C6  0012               	return	
 23237  0065C8                     __end_ofi1_longPressRETRO:
 23238                           	opt stack 0
 23239                           pclatu	equ	0xFFB
 23240                           pclath	equ	0xFFA
 23241                           tblptru	equ	0xFF8
 23242                           tblptrh	equ	0xFF7
 23243                           tblptrl	equ	0xFF6
 23244                           tablat	equ	0xFF5
 23245                           prodh	equ	0xFF4
 23246                           prodl	equ	0xFF3
 23247                           intcon	equ	0xFF2
 23248                           postinc0	equ	0xFEE
 23249                           fsr0h	equ	0xFEA
 23250                           fsr0l	equ	0xFE9
 23251                           wreg	equ	0xFE8
 23252                           postdec1	equ	0xFE5
 23253                           fsr1h	equ	0xFE2
 23254                           fsr1l	equ	0xFE1
 23255                           bsr	equ	0xFE0
 23256                           indf2	equ	0xFDF
 23257                           postinc2	equ	0xFDE
 23258                           postdec2	equ	0xFDD
 23259                           plusw2	equ	0xFDB
 23260                           fsr2h	equ	0xFDA
 23261                           fsr2l	equ	0xFD9
 23262                           status	equ	0xFD8
 23263                           
 23264 ;; *************** function i1_longPressENTER *****************
 23265 ;; Defined at:
 23266 ;;		line 373 in file "source/DisplayProtocol.h"
 23267 ;; Parameters:    Size  Location     Type
 23268 ;;		None
 23269 ;; Auto vars:     Size  Location     Type
 23270 ;;  longPressENT    3   45[BANK0 ] float 
 23271 ;; Return value:  Size  Location     Type
 23272 ;;                  1    wreg      void 
 23273 ;; Registers used:
 23274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23275 ;; Tracked objects:
 23276 ;;		On entry : 0/0
 23277 ;;		On exit  : 0/0
 23278 ;;		Unchanged: 0/0
 23279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23280 ;;      Params:         0       0       0       0       0       0       0
 23281 ;;      Locals:         0       6       0       0       0       0       0
 23282 ;;      Temps:          0       0       0       0       0       0       0
 23283 ;;      Totals:         0       6       0       0       0       0       0
 23284 ;;Total ram usage:        6 bytes
 23285 ;; Hardware stack levels used:    1
 23286 ;; Hardware stack levels required when called:    9
 23287 ;; This function calls:
 23288 ;;		i1___ftadd
 23289 ;;		i1___ftdiv
 23290 ;;		i1_calcVars2ti
 23291 ;;		i1_confirmEdition
 23292 ;;		i1_initCalib
 23293 ;;		i1_integrator
 23294 ;; This function is called by:
 23295 ;;		_UARTint
 23296 ;; This function uses a non-reentrant model
 23297 ;;
 23298                           
 23299                           	psect	text100
 23300  001C66                     __ptext100:
 23301                           	opt stack 0
 23302  001C66                     i1_longPressENTER:
 23303                           	opt stack 9
 23304                           
 23305                           ;DisplayProtocol.h: 374: if (!ENTERisLP) {
 23306                           
 23307                           ;incstack = 0
 23308  001C66  0101               	movlb	1	; () banked
 23309  001C68  51BF               	movf	_ENTERisLP& (0+255),w,b
 23310  001C6A  A4D8               	btfss	status,2,c
 23311  001C6C  0012               	return	
 23312                           
 23313                           ; BSR set to: 1
 23314                           ;DisplayProtocol.h: 375: ENTERisLP = 1;
 23315  001C6E  0E01               	movlw	1
 23316  001C70  0101               	movlb	1	; () banked
 23317  001C72  6FBF               	movwf	_ENTERisLP& (0+255),b
 23318                           
 23319                           ;DisplayProtocol.h: 376: if(actualScreen == 0 || actualScreen == 4) {
 23320  001C74  0101               	movlb	1	; () banked
 23321  001C76  51C3               	movf	_actualScreen& (0+255),w,b
 23322  001C78  B4D8               	btfsc	status,2,c
 23323  001C7A  D005               	goto	i1l8275
 23324                           
 23325                           ; BSR set to: 1
 23326  001C7C  0E04               	movlw	4
 23327  001C7E  0101               	movlb	1	; () banked
 23328  001C80  19C3               	xorwf	_actualScreen& (0+255),w,b
 23329  001C82  A4D8               	btfss	status,2,c
 23330  001C84  D025               	goto	i1l8291
 23331  001C86                     i1l8275:
 23332                           
 23333                           ; BSR set to: 1
 23334                           ;DisplayProtocol.h: 377: if (holdUPcont > 5) {
 23335  001C86  0E05               	movlw	5
 23336  001C88  0101               	movlb	1	; () banked
 23337  001C8A  65C9               	cpfsgt	_holdUPcont& (0+255),b
 23338  001C8C  D014               	goto	i1l8285
 23339                           
 23340                           ; BSR set to: 1
 23341                           ;DisplayProtocol.h: 378: if (actualScreen == 0) {
 23342  001C8E  0101               	movlb	1	; () banked
 23343  001C90  51C3               	movf	_actualScreen& (0+255),w,b
 23344  001C92  A4D8               	btfss	status,2,c
 23345  001C94  D007               	goto	i1l8281
 23346                           
 23347                           ; BSR set to: 1
 23348                           ;DisplayProtocol.h: 379: actualScreen = 1;
 23349  001C96  0E01               	movlw	1
 23350  001C98  0101               	movlb	1	; () banked
 23351  001C9A  6FC3               	movwf	_actualScreen& (0+255),b
 23352                           
 23353                           ;DisplayProtocol.h: 380: fd = 0;
 23354  001C9C  0E00               	movlw	0
 23355  001C9E  0101               	movlb	1	; () banked
 23356  001CA0  6FC5               	movwf	_fd& (0+255),b
 23357                           
 23358                           ;DisplayProtocol.h: 381: } else if (actualScreen == 4)
 23359  001CA2  0012               	return	
 23360  001CA4                     i1l8281:
 23361                           
 23362                           ; BSR set to: 1
 23363  001CA4  0E04               	movlw	4
 23364  001CA6  0101               	movlb	1	; () banked
 23365  001CA8  19C3               	xorwf	_actualScreen& (0+255),w,b
 23366  001CAA  A4D8               	btfss	status,2,c
 23367  001CAC  0012               	return	
 23368                           
 23369                           ; BSR set to: 1
 23370                           ;DisplayProtocol.h: 382: actualScreen = 9;
 23371  001CAE  0E09               	movlw	9
 23372  001CB0  0101               	movlb	1	; () banked
 23373  001CB2  6FC3               	movwf	_actualScreen& (0+255),b
 23374                           
 23375                           ; BSR set to: 1
 23376                           ;DisplayProtocol.h: 383: } else if(!processStarted) {
 23377                           
 23378                           ; BSR set to: 1
 23379  001CB4  0012               	return	
 23380  001CB6                     i1l8285:
 23381                           
 23382                           ; BSR set to: 1
 23383  001CB6  0100               	movlb	0	; () banked
 23384  001CB8  51BB               	movf	_processStarted& (0+255),w,b
 23385  001CBA  A4D8               	btfss	status,2,c
 23386  001CBC  0012               	return	
 23387                           
 23388                           ; BSR set to: 0
 23389                           ;DisplayProtocol.h: 384: tempLastScreen = actualScreen;
 23390  001CBE  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 23391                           
 23392                           ; BSR set to: 0
 23393                           ;DisplayProtocol.h: 385: actualScreen = 2;
 23394  001CC2  0E02               	movlw	2
 23395  001CC4  0101               	movlb	1	; () banked
 23396  001CC6  6FC3               	movwf	_actualScreen& (0+255),b
 23397                           
 23398                           ;DisplayProtocol.h: 386: selSN = 1;
 23399  001CC8  0E01               	movlw	1
 23400  001CCA  0101               	movlb	1	; () banked
 23401  001CCC  6FCC               	movwf	_selSN& (0+255),b
 23402                           
 23403                           ; BSR set to: 1
 23404                           ;DisplayProtocol.h: 387: }
 23405                           ;DisplayProtocol.h: 388: }else if(actualScreen == 5) {
 23406                           
 23407                           ; BSR set to: 1
 23408  001CCE  0012               	return	
 23409  001CD0                     i1l8291:
 23410                           
 23411                           ; BSR set to: 1
 23412  001CD0  0E05               	movlw	5
 23413  001CD2  0101               	movlb	1	; () banked
 23414  001CD4  19C3               	xorwf	_actualScreen& (0+255),w,b
 23415  001CD6  A4D8               	btfss	status,2,c
 23416  001CD8  D010               	goto	i1l8299
 23417                           
 23418                           ; BSR set to: 1
 23419                           ;DisplayProtocol.h: 389: if(menuSection != 2)
 23420  001CDA  0E02               	movlw	2
 23421  001CDC  0101               	movlb	1	; () banked
 23422  001CDE  19CA               	xorwf	_menuSection& (0+255),w,b
 23423  001CE0  A4D8               	btfss	status,2,c
 23424                           
 23425                           ; BSR set to: 1
 23426                           ;DisplayProtocol.h: 390: integrator();
 23427  001CE2  EC4B  F01F         	call	i1_integrator	;wreg free
 23428                           
 23429                           ;DisplayProtocol.h: 391: confirmEdition(!processStarted);
 23430  001CE6  0100               	movlb	0	; () banked
 23431  001CE8  51BB               	movf	_processStarted& (0+255),w,b
 23432  001CEA  A4D8               	btfss	status,2,c
 23433  001CEC  D002               	goto	i1u1189_20
 23434  001CEE  0E01               	movlw	1
 23435  001CF0  D001               	goto	i1u1190_20
 23436  001CF2                     i1u1189_20:
 23437  001CF2  0E00               	movlw	0
 23438  001CF4                     i1u1190_20:
 23439  001CF4  ECF9  F028         	call	i1_confirmEdition
 23440                           
 23441                           ;DisplayProtocol.h: 392: }else if(actualScreen == 12) {
 23442  001CF8  0012               	return	
 23443  001CFA                     i1l8299:
 23444  001CFA  0E0C               	movlw	12
 23445  001CFC  0101               	movlb	1	; () banked
 23446  001CFE  19C3               	xorwf	_actualScreen& (0+255),w,b
 23447  001D00  A4D8               	btfss	status,2,c
 23448  001D02  0012               	return	
 23449                           
 23450                           ; BSR set to: 1
 23451                           ;DisplayProtocol.h: 393: integrator();
 23452  001D04  EC4B  F01F         	call	i1_integrator	;wreg free
 23453                           
 23454                           ;DisplayProtocol.h: 394: if(calibLevel == 0) {
 23455  001D08  0101               	movlb	1	; () banked
 23456  001D0A  51C4               	movf	_calibLevel& (0+255),w,b
 23457  001D0C  A4D8               	btfss	status,2,c
 23458  001D0E  D043               	goto	i1l8315
 23459                           
 23460                           ; BSR set to: 1
 23461                           ;DisplayProtocol.h: 395: tempVelocidadMasa1 = (float)chanValf / tiXcorte;
 23462  001D10  C1B7  F072         	movff	_chanValf,i1___ftdiv@f1
 23463  001D14  C1B8  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23464  001D18  C1B9  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23465  001D1C  C195  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23466  001D20  C196  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23467  001D24  C197  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23468  001D28  ECD0  F01C         	call	i1___ftdiv	;wreg free
 23469  001D2C  C072  F1A3         	movff	?i1___ftdiv,_tempVelocidadMasa1
 23470  001D30  C073  F1A4         	movff	?i1___ftdiv+1,_tempVelocidadMasa1+1
 23471  001D34  C074  F1A5         	movff	?i1___ftdiv+2,_tempVelocidadMasa1+2
 23472                           
 23473                           ;DisplayProtocol.h: 396: tiXcorte = (float)0.5 / tempVelocidadMasa1;
 23474  001D38  0E00               	movlw	0
 23475  001D3A  0100               	movlb	0	; () banked
 23476  001D3C  6F72               	movwf	i1___ftdiv@f1& (0+255),b
 23477  001D3E  0E00               	movlw	0
 23478  001D40  0100               	movlb	0	; () banked
 23479  001D42  6F73               	movwf	(i1___ftdiv@f1+1)& (0+255),b
 23480  001D44  0E3F               	movlw	63
 23481  001D46  0100               	movlb	0	; () banked
 23482  001D48  6F74               	movwf	(i1___ftdiv@f1+2)& (0+255),b
 23483  001D4A  C1A3  F075         	movff	_tempVelocidadMasa1,i1___ftdiv@f2
 23484  001D4E  C1A4  F076         	movff	_tempVelocidadMasa1+1,i1___ftdiv@f2+1
 23485  001D52  C1A5  F077         	movff	_tempVelocidadMasa1+2,i1___ftdiv@f2+2
 23486  001D56  ECD0  F01C         	call	i1___ftdiv	;wreg free
 23487  001D5A  C072  F195         	movff	?i1___ftdiv,_tiXcorte
 23488  001D5E  C073  F196         	movff	?i1___ftdiv+1,_tiXcorte+1
 23489  001D62  C074  F197         	movff	?i1___ftdiv+2,_tiXcorte+2
 23490                           
 23491                           ;DisplayProtocol.h: 397: calibLevel = 1;
 23492  001D66  0E01               	movlw	1
 23493  001D68  0101               	movlb	1	; () banked
 23494  001D6A  6FC4               	movwf	_calibLevel& (0+255),b
 23495                           
 23496                           ; BSR set to: 1
 23497                           ;DisplayProtocol.h: 398: numCortes = 1;
 23498  001D6C  0E00               	movlw	0
 23499  001D6E  0100               	movlb	0	; () banked
 23500  001D70  6FC7               	movwf	(_numCortes+1)& (0+255),b
 23501  001D72  0E01               	movlw	1
 23502  001D74  6FC6               	movwf	_numCortes& (0+255),b
 23503                           
 23504                           ; BSR set to: 0
 23505                           ;DisplayProtocol.h: 399: processState = 0;
 23506  001D76  0E00               	movlw	0
 23507  001D78  0100               	movlb	0	; () banked
 23508  001D7A  6FB5               	movwf	(_processState+1)& (0+255),b
 23509  001D7C  0E00               	movlw	0
 23510  001D7E  6FB4               	movwf	_processState& (0+255),b
 23511                           
 23512                           ; BSR set to: 0
 23513                           ;DisplayProtocol.h: 400: processTimer = 0;
 23514  001D80  0E00               	movlw	0
 23515  001D82  6E37               	movwf	_processTimer,c
 23516  001D84  0E00               	movlw	0
 23517  001D86  6E38               	movwf	_processTimer+1,c
 23518  001D88  0E00               	movlw	0
 23519  001D8A  6E39               	movwf	_processTimer+2,c
 23520  001D8C  0E00               	movlw	0
 23521  001D8E  6E3A               	movwf	_processTimer+3,c
 23522                           
 23523                           ;DisplayProtocol.h: 401: initCalib();
 23524  001D90  ECCF  F034         	call	i1_initCalib	;wreg free
 23525                           
 23526                           ;DisplayProtocol.h: 402: }else if(calibLevel == 1) {
 23527  001D94  0012               	return	
 23528  001D96                     i1l8315:
 23529  001D96  0101               	movlb	1	; () banked
 23530  001D98  05C4               	decf	_calibLevel& (0+255),w,b
 23531  001D9A  A4D8               	btfss	status,2,c
 23532  001D9C  D043               	goto	i1l8327
 23533                           
 23534                           ; BSR set to: 1
 23535                           ;DisplayProtocol.h: 403: tempVelocidadMasa2 = (float)chanValf / tiXcorte;
 23536  001D9E  C1B7  F072         	movff	_chanValf,i1___ftdiv@f1
 23537  001DA2  C1B8  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23538  001DA6  C1B9  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23539  001DAA  C195  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23540  001DAE  C196  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23541  001DB2  C197  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23542  001DB6  ECD0  F01C         	call	i1___ftdiv	;wreg free
 23543  001DBA  C072  F1A6         	movff	?i1___ftdiv,_tempVelocidadMasa2
 23544  001DBE  C073  F1A7         	movff	?i1___ftdiv+1,_tempVelocidadMasa2+1
 23545  001DC2  C074  F1A8         	movff	?i1___ftdiv+2,_tempVelocidadMasa2+2
 23546                           
 23547                           ;DisplayProtocol.h: 404: tiXcorte = (float)0.25 / tempVelocidadMasa2;
 23548  001DC6  0E00               	movlw	0
 23549  001DC8  0100               	movlb	0	; () banked
 23550  001DCA  6F72               	movwf	i1___ftdiv@f1& (0+255),b
 23551  001DCC  0E80               	movlw	128
 23552  001DCE  0100               	movlb	0	; () banked
 23553  001DD0  6F73               	movwf	(i1___ftdiv@f1+1)& (0+255),b
 23554  001DD2  0E3E               	movlw	62
 23555  001DD4  0100               	movlb	0	; () banked
 23556  001DD6  6F74               	movwf	(i1___ftdiv@f1+2)& (0+255),b
 23557  001DD8  C1A6  F075         	movff	_tempVelocidadMasa2,i1___ftdiv@f2
 23558  001DDC  C1A7  F076         	movff	_tempVelocidadMasa2+1,i1___ftdiv@f2+1
 23559  001DE0  C1A8  F077         	movff	_tempVelocidadMasa2+2,i1___ftdiv@f2+2
 23560  001DE4  ECD0  F01C         	call	i1___ftdiv	;wreg free
 23561  001DE8  C072  F195         	movff	?i1___ftdiv,_tiXcorte
 23562  001DEC  C073  F196         	movff	?i1___ftdiv+1,_tiXcorte+1
 23563  001DF0  C074  F197         	movff	?i1___ftdiv+2,_tiXcorte+2
 23564                           
 23565                           ;DisplayProtocol.h: 405: calibLevel = 2;
 23566  001DF4  0E02               	movlw	2
 23567  001DF6  0101               	movlb	1	; () banked
 23568  001DF8  6FC4               	movwf	_calibLevel& (0+255),b
 23569                           
 23570                           ; BSR set to: 1
 23571                           ;DisplayProtocol.h: 406: numCortes = 1;
 23572  001DFA  0E00               	movlw	0
 23573  001DFC  0100               	movlb	0	; () banked
 23574  001DFE  6FC7               	movwf	(_numCortes+1)& (0+255),b
 23575  001E00  0E01               	movlw	1
 23576  001E02  6FC6               	movwf	_numCortes& (0+255),b
 23577                           
 23578                           ; BSR set to: 0
 23579                           ;DisplayProtocol.h: 407: processState = 0;
 23580  001E04  0E00               	movlw	0
 23581  001E06  0100               	movlb	0	; () banked
 23582  001E08  6FB5               	movwf	(_processState+1)& (0+255),b
 23583  001E0A  0E00               	movlw	0
 23584  001E0C  6FB4               	movwf	_processState& (0+255),b
 23585                           
 23586                           ; BSR set to: 0
 23587                           ;DisplayProtocol.h: 408: processTimer = 0;
 23588  001E0E  0E00               	movlw	0
 23589  001E10  6E37               	movwf	_processTimer,c
 23590  001E12  0E00               	movlw	0
 23591  001E14  6E38               	movwf	_processTimer+1,c
 23592  001E16  0E00               	movlw	0
 23593  001E18  6E39               	movwf	_processTimer+2,c
 23594  001E1A  0E00               	movlw	0
 23595  001E1C  6E3A               	movwf	_processTimer+3,c
 23596                           
 23597                           ;DisplayProtocol.h: 409: initCalib();
 23598  001E1E  ECCF  F034         	call	i1_initCalib	;wreg free
 23599                           
 23600                           ;DisplayProtocol.h: 410: }else if(calibLevel == 2) {
 23601  001E22  0012               	return	
 23602  001E24                     i1l8327:
 23603  001E24  0E02               	movlw	2
 23604  001E26  0101               	movlb	1	; () banked
 23605  001E28  19C4               	xorwf	_calibLevel& (0+255),w,b
 23606  001E2A  A4D8               	btfss	status,2,c
 23607  001E2C  0012               	return	
 23608                           
 23609                           ; BSR set to: 1
 23610                           ;DisplayProtocol.h: 411: tempVelocidadMasa3 = (float)chanValf / tiXcorte;
 23611  001E2E  C1B7  F072         	movff	_chanValf,i1___ftdiv@f1
 23612  001E32  C1B8  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23613  001E36  C1B9  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23614  001E3A  C195  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23615  001E3E  C196  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23616  001E42  C197  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23617  001E46  ECD0  F01C         	call	i1___ftdiv	;wreg free
 23618  001E4A  C072  F192         	movff	?i1___ftdiv,_tempVelocidadMasa3
 23619  001E4E  C073  F193         	movff	?i1___ftdiv+1,_tempVelocidadMasa3+1
 23620  001E52  C074  F194         	movff	?i1___ftdiv+2,_tempVelocidadMasa3+2
 23621                           
 23622                           ;DisplayProtocol.h: 412: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 23623  001E56  C1A6  F06B         	movff	_tempVelocidadMasa2,i1___ftadd@f2
 23624  001E5A  C1A7  F06C         	movff	_tempVelocidadMasa2+1,i1___ftadd@f2+1
 23625  001E5E  C1A8  F06D         	movff	_tempVelocidadMasa2+2,i1___ftadd@f2+2
 23626  001E62  C1A3  F068         	movff	_tempVelocidadMasa1,i1___ftadd@f1
 23627  001E66  C1A4  F069         	movff	_tempVelocidadMasa1+1,i1___ftadd@f1+1
 23628  001E6A  C1A5  F06A         	movff	_tempVelocidadMasa1+2,i1___ftadd@f1+2
 23629  001E6E  EC34  F013         	call	i1___ftadd	;wreg free
 23630  001E72  C068  F090         	movff	?i1___ftadd,i1_longPressENTER$3382
 23631  001E76  C069  F091         	movff	?i1___ftadd+1,i1_longPressENTER$3382+1
 23632  001E7A  C06A  F092         	movff	?i1___ftadd+2,i1_longPressENTER$3382+2
 23633                           
 23634                           ;DisplayProtocol.h: 412: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 23635  001E7E  C090  F068         	movff	i1_longPressENTER$3382,i1___ftadd@f1
 23636  001E82  C091  F069         	movff	i1_longPressENTER$3382+1,i1___ftadd@f1+1
 23637  001E86  C092  F06A         	movff	i1_longPressENTER$3382+2,i1___ftadd@f1+2
 23638  001E8A  C192  F06B         	movff	_tempVelocidadMasa3,i1___ftadd@f2
 23639  001E8E  C193  F06C         	movff	_tempVelocidadMasa3+1,i1___ftadd@f2+1
 23640  001E92  C194  F06D         	movff	_tempVelocidadMasa3+2,i1___ftadd@f2+2
 23641  001E96  EC34  F013         	call	i1___ftadd	;wreg free
 23642  001E9A  C068  F08D         	movff	?i1___ftadd,i1longPressENTER@temp
 23643  001E9E  C069  F08E         	movff	?i1___ftadd+1,i1longPressENTER@temp+1
 23644  001EA2  C06A  F08F         	movff	?i1___ftadd+2,i1longPressENTER@temp+2
 23645                           
 23646                           ;DisplayProtocol.h: 413: chanValf = (float)temp / 3.0f;
 23647  001EA6  C08D  F072         	movff	i1longPressENTER@temp,i1___ftdiv@f1
 23648  001EAA  C08E  F073         	movff	i1longPressENTER@temp+1,i1___ftdiv@f1+1
 23649  001EAE  C08F  F074         	movff	i1longPressENTER@temp+2,i1___ftdiv@f1+2
 23650  001EB2  0E00               	movlw	0
 23651  001EB4  0100               	movlb	0	; () banked
 23652  001EB6  6F75               	movwf	i1___ftdiv@f2& (0+255),b
 23653  001EB8  0E40               	movlw	64
 23654  001EBA  0100               	movlb	0	; () banked
 23655  001EBC  6F76               	movwf	(i1___ftdiv@f2+1)& (0+255),b
 23656  001EBE  0E40               	movlw	64
 23657  001EC0  0100               	movlb	0	; () banked
 23658  001EC2  6F77               	movwf	(i1___ftdiv@f2+2)& (0+255),b
 23659  001EC4  ECD0  F01C         	call	i1___ftdiv	;wreg free
 23660  001EC8  C072  F1B7         	movff	?i1___ftdiv,_chanValf
 23661  001ECC  C073  F1B8         	movff	?i1___ftdiv+1,_chanValf+1
 23662  001ED0  C074  F1B9         	movff	?i1___ftdiv+2,_chanValf+2
 23663                           
 23664                           ;DisplayProtocol.h: 414: numCortes = tempNumCortes;
 23665  001ED4  C19B  F0C6         	movff	_tempNumCortes,_numCortes
 23666  001ED8  C19C  F0C7         	movff	_tempNumCortes+1,_numCortes+1
 23667                           
 23668                           ;DisplayProtocol.h: 415: calcVars2ti();
 23669  001EDC  EC10  F033         	call	i1_calcVars2ti	;wreg free
 23670                           
 23671                           ;DisplayProtocol.h: 416: confirmEdition(!processStarted);
 23672  001EE0  0100               	movlb	0	; () banked
 23673  001EE2  51BB               	movf	_processStarted& (0+255),w,b
 23674  001EE4  A4D8               	btfss	status,2,c
 23675  001EE6  D002               	goto	i1u1195_20
 23676  001EE8  0E01               	movlw	1
 23677  001EEA  D001               	goto	i1u1196_20
 23678  001EEC                     i1u1195_20:
 23679  001EEC  0E00               	movlw	0
 23680  001EEE                     i1u1196_20:
 23681  001EEE  ECF9  F028         	call	i1_confirmEdition
 23682  001EF2  0012               	return	
 23683  001EF4                     __end_ofi1_longPressENTER:
 23684                           	opt stack 0
 23685                           pclatu	equ	0xFFB
 23686                           pclath	equ	0xFFA
 23687                           tblptru	equ	0xFF8
 23688                           tblptrh	equ	0xFF7
 23689                           tblptrl	equ	0xFF6
 23690                           tablat	equ	0xFF5
 23691                           prodh	equ	0xFF4
 23692                           prodl	equ	0xFF3
 23693                           intcon	equ	0xFF2
 23694                           postinc0	equ	0xFEE
 23695                           fsr0h	equ	0xFEA
 23696                           fsr0l	equ	0xFE9
 23697                           wreg	equ	0xFE8
 23698                           postdec1	equ	0xFE5
 23699                           fsr1h	equ	0xFE2
 23700                           fsr1l	equ	0xFE1
 23701                           bsr	equ	0xFE0
 23702                           indf2	equ	0xFDF
 23703                           postinc2	equ	0xFDE
 23704                           postdec2	equ	0xFDD
 23705                           plusw2	equ	0xFDB
 23706                           fsr2h	equ	0xFDA
 23707                           fsr2l	equ	0xFD9
 23708                           status	equ	0xFD8
 23709                           
 23710 ;; *************** function i1_integrator *****************
 23711 ;; Defined at:
 23712 ;;		line 61 in file "source/DisplayProtocol.h"
 23713 ;; Parameters:    Size  Location     Type
 23714 ;;		None
 23715 ;; Auto vars:     Size  Location     Type
 23716 ;;  integrator      4   39[BANK0 ] long 
 23717 ;;  integrator      4   35[BANK0 ] long 
 23718 ;;  integrator      2   43[BANK0 ] int 
 23719 ;; Return value:  Size  Location     Type
 23720 ;;                  1    wreg      void 
 23721 ;; Registers used:
 23722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23723 ;; Tracked objects:
 23724 ;;		On entry : 0/0
 23725 ;;		On exit  : 0/0
 23726 ;;		Unchanged: 0/0
 23727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23728 ;;      Params:         0       0       0       0       0       0       0
 23729 ;;      Locals:         0      10       0       0       0       0       0
 23730 ;;      Temps:          0       2       0       0       0       0       0
 23731 ;;      Totals:         0      12       0       0       0       0       0
 23732 ;;Total ram usage:       12 bytes
 23733 ;; Hardware stack levels used:    1
 23734 ;; Hardware stack levels required when called:    6
 23735 ;; This function calls:
 23736 ;;		i1___altoft
 23737 ;;		i1___ftdiv
 23738 ;;		i1___lmul
 23739 ;; This function is called by:
 23740 ;;		i1_longPressENTER
 23741 ;; This function uses a non-reentrant model
 23742 ;;
 23743                           
 23744                           	psect	text101
 23745  003E96                     __ptext101:
 23746                           	opt stack 0
 23747  003E96                     i1_integrator:
 23748                           	opt stack 11
 23749                           
 23750                           ;DisplayProtocol.h: 62: long acum = 0;
 23751                           
 23752                           ;incstack = 0
 23753  003E96  0E00               	movlw	0
 23754  003E98  0100               	movlb	0	; () banked
 23755  003E9A  6F83               	movwf	i1integrator@acum& (0+255),b
 23756  003E9C  0E00               	movlw	0
 23757  003E9E  6F84               	movwf	(i1integrator@acum+1)& (0+255),b
 23758  003EA0  0E00               	movlw	0
 23759  003EA2  6F85               	movwf	(i1integrator@acum+2)& (0+255),b
 23760  003EA4  0E00               	movlw	0
 23761  003EA6  6F86               	movwf	(i1integrator@acum+3)& (0+255),b
 23762                           
 23763                           ;DisplayProtocol.h: 63: long temp = 0;
 23764  003EA8  0E00               	movlw	0
 23765  003EAA  0100               	movlb	0	; () banked
 23766  003EAC  6F87               	movwf	i1integrator@temp& (0+255),b
 23767  003EAE  0E00               	movlw	0
 23768  003EB0  6F88               	movwf	(i1integrator@temp+1)& (0+255),b
 23769  003EB2  0E00               	movlw	0
 23770  003EB4  6F89               	movwf	(i1integrator@temp+2)& (0+255),b
 23771  003EB6  0E00               	movlw	0
 23772  003EB8  6F8A               	movwf	(i1integrator@temp+3)& (0+255),b
 23773                           
 23774                           ;DisplayProtocol.h: 64: int i;
 23775                           ;DisplayProtocol.h: 65: for(i = 0; i < 6; i++) {
 23776  003EBA  0E00               	movlw	0
 23777  003EBC  0100               	movlb	0	; () banked
 23778  003EBE  6F8C               	movwf	(i1integrator@i+1)& (0+255),b
 23779  003EC0  0E00               	movlw	0
 23780  003EC2  6F8B               	movwf	i1integrator@i& (0+255),b
 23781  003EC4                     i1l7131:
 23782                           
 23783                           ; BSR set to: 0
 23784  003EC4  0100               	movlb	0	; () banked
 23785  003EC6  BF8C               	btfsc	(i1integrator@i+1)& (0+255),7,b
 23786  003EC8  D008               	goto	i1l7135
 23787  003ECA  0100               	movlb	0	; () banked
 23788  003ECC  518C               	movf	(i1integrator@i+1)& (0+255),w,b
 23789  003ECE  E152               	bnz	i1l7143
 23790  003ED0  0E06               	movlw	6
 23791  003ED2  0100               	movlb	0	; () banked
 23792  003ED4  5D8B               	subwf	i1integrator@i& (0+255),w,b
 23793  003ED6  B0D8               	btfsc	status,0,c
 23794  003ED8  D04D               	goto	i1l7143
 23795  003EDA                     i1l7135:
 23796                           
 23797                           ; BSR set to: 0
 23798                           ;DisplayProtocol.h: 66: temp = (long)chanValdig[i]*exp10[i];
 23799  003EDA  0EA9               	movlw	low _chanValdig
 23800  003EDC  0100               	movlb	0	; () banked
 23801  003EDE  258B               	addwf	i1integrator@i& (0+255),w,b
 23802  003EE0  6ED9               	movwf	fsr2l,c
 23803  003EE2  0E01               	movlw	high _chanValdig
 23804  003EE4  0100               	movlb	0	; () banked
 23805  003EE6  218C               	addwfc	(i1integrator@i+1)& (0+255),w,b
 23806  003EE8  6EDA               	movwf	fsr2h,c
 23807  003EEA  50DF               	movf	indf2,w,c
 23808  003EEC  0100               	movlb	0	; () banked
 23809  003EEE  6F60               	movwf	i1___lmul@multiplier& (0+255),b
 23810  003EF0  0E00               	movlw	0
 23811  003EF2  BF60               	btfsc	i1___lmul@multiplier& (0+255),7,b
 23812  003EF4  0EFF               	movlw	-1
 23813  003EF6  6F61               	movwf	(i1___lmul@multiplier+1)& (0+255),b
 23814  003EF8  6F62               	movwf	(i1___lmul@multiplier+2)& (0+255),b
 23815  003EFA  6F63               	movwf	(i1___lmul@multiplier+3)& (0+255),b
 23816  003EFC  0E77               	movlw	low _exp10
 23817  003EFE  0100               	movlb	0	; () banked
 23818  003F00  6F81               	movwf	??i1_integrator& (0+255),b
 23819  003F02  0E01               	movlw	high _exp10
 23820  003F04  0100               	movlb	0	; () banked
 23821  003F06  6F82               	movwf	(??i1_integrator+1)& (0+255),b
 23822  003F08  90D8               	bcf	status,0,c
 23823  003F0A  0100               	movlb	0	; () banked
 23824  003F0C  358B               	rlcf	i1integrator@i& (0+255),w,b
 23825  003F0E  6ED9               	movwf	fsr2l,c
 23826  003F10  0100               	movlb	0	; () banked
 23827  003F12  358C               	rlcf	(i1integrator@i+1)& (0+255),w,b
 23828  003F14  6EDA               	movwf	fsr2h,c
 23829  003F16  90D8               	bcf	status,0,c
 23830  003F18  36D9               	rlcf	fsr2l,f,c
 23831  003F1A  36DA               	rlcf	fsr2h,f,c
 23832  003F1C  0100               	movlb	0	; () banked
 23833  003F1E  5181               	movf	??i1_integrator& (0+255),w,b
 23834  003F20  26D9               	addwf	fsr2l,f,c
 23835  003F22  0100               	movlb	0	; () banked
 23836  003F24  5182               	movf	(??i1_integrator+1)& (0+255),w,b
 23837  003F26  22DA               	addwfc	fsr2h,f,c
 23838  003F28  CFDE F064          	movff	postinc2,i1___lmul@multiplicand
 23839  003F2C  CFDE F065          	movff	postinc2,i1___lmul@multiplicand+1
 23840  003F30  CFDE F066          	movff	postinc2,i1___lmul@multiplicand+2
 23841  003F34  CFDE F067          	movff	postinc2,i1___lmul@multiplicand+3
 23842  003F38  EC06  F031         	call	i1___lmul	;wreg free
 23843  003F3C  C060  F087         	movff	?i1___lmul,i1integrator@temp
 23844  003F40  C061  F088         	movff	?i1___lmul+1,i1integrator@temp+1
 23845  003F44  C062  F089         	movff	?i1___lmul+2,i1integrator@temp+2
 23846  003F48  C063  F08A         	movff	?i1___lmul+3,i1integrator@temp+3
 23847                           
 23848                           ;DisplayProtocol.h: 67: acum += temp;
 23849  003F4C  0100               	movlb	0	; () banked
 23850  003F4E  5187               	movf	i1integrator@temp& (0+255),w,b
 23851  003F50  0100               	movlb	0	; () banked
 23852  003F52  2783               	addwf	i1integrator@acum& (0+255),f,b
 23853  003F54  0100               	movlb	0	; () banked
 23854  003F56  5188               	movf	(i1integrator@temp+1)& (0+255),w,b
 23855  003F58  0100               	movlb	0	; () banked
 23856  003F5A  2384               	addwfc	(i1integrator@acum+1)& (0+255),f,b
 23857  003F5C  0100               	movlb	0	; () banked
 23858  003F5E  5189               	movf	(i1integrator@temp+2)& (0+255),w,b
 23859  003F60  0100               	movlb	0	; () banked
 23860  003F62  2385               	addwfc	(i1integrator@acum+2)& (0+255),f,b
 23861  003F64  0100               	movlb	0	; () banked
 23862  003F66  518A               	movf	(i1integrator@temp+3)& (0+255),w,b
 23863  003F68  0100               	movlb	0	; () banked
 23864  003F6A  2386               	addwfc	(i1integrator@acum+3)& (0+255),f,b
 23865                           
 23866                           ; BSR set to: 0
 23867  003F6C  0100               	movlb	0	; () banked
 23868  003F6E  4B8B               	infsnz	i1integrator@i& (0+255),f,b
 23869  003F70  2B8C               	incf	(i1integrator@i+1)& (0+255),f,b
 23870  003F72  D7A8               	goto	i1l7131
 23871  003F74                     i1l7143:
 23872                           
 23873                           ; BSR set to: 0
 23874                           ;DisplayProtocol.h: 68: }
 23875                           ;DisplayProtocol.h: 69: chanValf = (float)acum / 1000;
 23876  003F74  C083  F068         	movff	i1integrator@acum,i1___altoft@c
 23877  003F78  C084  F069         	movff	i1integrator@acum+1,i1___altoft@c+1
 23878  003F7C  C085  F06A         	movff	i1integrator@acum+2,i1___altoft@c+2
 23879  003F80  C086  F06B         	movff	i1integrator@acum+3,i1___altoft@c+3
 23880  003F84  ECEB  F02B         	call	i1___altoft	;wreg free
 23881  003F88  C068  F072         	movff	?i1___altoft,i1___ftdiv@f1
 23882  003F8C  C069  F073         	movff	?i1___altoft+1,i1___ftdiv@f1+1
 23883  003F90  C06A  F074         	movff	?i1___altoft+2,i1___ftdiv@f1+2
 23884  003F94  0E00               	movlw	0
 23885  003F96  0100               	movlb	0	; () banked
 23886  003F98  6F75               	movwf	i1___ftdiv@f2& (0+255),b
 23887  003F9A  0E7A               	movlw	122
 23888  003F9C  0100               	movlb	0	; () banked
 23889  003F9E  6F76               	movwf	(i1___ftdiv@f2+1)& (0+255),b
 23890  003FA0  0E44               	movlw	68
 23891  003FA2  0100               	movlb	0	; () banked
 23892  003FA4  6F77               	movwf	(i1___ftdiv@f2+2)& (0+255),b
 23893  003FA6  ECD0  F01C         	call	i1___ftdiv	;wreg free
 23894  003FAA  C072  F1B7         	movff	?i1___ftdiv,_chanValf
 23895  003FAE  C073  F1B8         	movff	?i1___ftdiv+1,_chanValf+1
 23896  003FB2  C074  F1B9         	movff	?i1___ftdiv+2,_chanValf+2
 23897  003FB6  0012               	return		;funcret
 23898  003FB8                     __end_ofi1_integrator:
 23899                           	opt stack 0
 23900                           pclatu	equ	0xFFB
 23901                           pclath	equ	0xFFA
 23902                           tblptru	equ	0xFF8
 23903                           tblptrh	equ	0xFF7
 23904                           tblptrl	equ	0xFF6
 23905                           tablat	equ	0xFF5
 23906                           prodh	equ	0xFF4
 23907                           prodl	equ	0xFF3
 23908                           intcon	equ	0xFF2
 23909                           postinc0	equ	0xFEE
 23910                           fsr0h	equ	0xFEA
 23911                           fsr0l	equ	0xFE9
 23912                           wreg	equ	0xFE8
 23913                           postdec1	equ	0xFE5
 23914                           fsr1h	equ	0xFE2
 23915                           fsr1l	equ	0xFE1
 23916                           bsr	equ	0xFE0
 23917                           indf2	equ	0xFDF
 23918                           postinc2	equ	0xFDE
 23919                           postdec2	equ	0xFDD
 23920                           plusw2	equ	0xFDB
 23921                           fsr2h	equ	0xFDA
 23922                           fsr2l	equ	0xFD9
 23923                           status	equ	0xFD8
 23924                           
 23925 ;; *************** function i1___lmul *****************
 23926 ;; Defined at:
 23927 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
 23928 ;; Parameters:    Size  Location     Type
 23929 ;;  multiplier      4    0[BANK0 ] unsigned long 
 23930 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 23931 ;; Auto vars:     Size  Location     Type
 23932 ;;  __lmul          4    8[BANK0 ] unsigned long 
 23933 ;; Return value:  Size  Location     Type
 23934 ;;                  4    0[BANK0 ] unsigned long 
 23935 ;; Registers used:
 23936 ;;		wreg, status,2, status,0
 23937 ;; Tracked objects:
 23938 ;;		On entry : 0/0
 23939 ;;		On exit  : 0/0
 23940 ;;		Unchanged: 0/0
 23941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23942 ;;      Params:         0       8       0       0       0       0       0
 23943 ;;      Locals:         0       4       0       0       0       0       0
 23944 ;;      Temps:          0       0       0       0       0       0       0
 23945 ;;      Totals:         0      12       0       0       0       0       0
 23946 ;;Total ram usage:       12 bytes
 23947 ;; Hardware stack levels used:    1
 23948 ;; Hardware stack levels required when called:    4
 23949 ;; This function calls:
 23950 ;;		Nothing
 23951 ;; This function is called by:
 23952 ;;		i1_desintegrator
 23953 ;;		i1_integrator
 23954 ;; This function uses a non-reentrant model
 23955 ;;
 23956                           
 23957                           	psect	text102
 23958  00620C                     __ptext102:
 23959                           	opt stack 0
 23960  00620C                     i1___lmul:
 23961                           	opt stack 12
 23962                           
 23963                           ;incstack = 0
 23964  00620C  0E00               	movlw	0
 23965  00620E  0100               	movlb	0	; () banked
 23966  006210  6F68               	movwf	i1___lmul@product& (0+255),b
 23967  006212  0E00               	movlw	0
 23968  006214  6F69               	movwf	(i1___lmul@product+1)& (0+255),b
 23969  006216  0E00               	movlw	0
 23970  006218  6F6A               	movwf	(i1___lmul@product+2)& (0+255),b
 23971  00621A  0E00               	movlw	0
 23972  00621C  6F6B               	movwf	(i1___lmul@product+3)& (0+255),b
 23973  00621E                     i1l6773:
 23974                           
 23975                           ; BSR set to: 0
 23976  00621E  0100               	movlb	0	; () banked
 23977  006220  A160               	btfss	i1___lmul@multiplier& (0+255),0,b
 23978  006222  D010               	goto	i1l6777
 23979                           
 23980                           ; BSR set to: 0
 23981  006224  0100               	movlb	0	; () banked
 23982  006226  5164               	movf	i1___lmul@multiplicand& (0+255),w,b
 23983  006228  0100               	movlb	0	; () banked
 23984  00622A  2768               	addwf	i1___lmul@product& (0+255),f,b
 23985  00622C  0100               	movlb	0	; () banked
 23986  00622E  5165               	movf	(i1___lmul@multiplicand+1)& (0+255),w,b
 23987  006230  0100               	movlb	0	; () banked
 23988  006232  2369               	addwfc	(i1___lmul@product+1)& (0+255),f,b
 23989  006234  0100               	movlb	0	; () banked
 23990  006236  5166               	movf	(i1___lmul@multiplicand+2)& (0+255),w,b
 23991  006238  0100               	movlb	0	; () banked
 23992  00623A  236A               	addwfc	(i1___lmul@product+2)& (0+255),f,b
 23993  00623C  0100               	movlb	0	; () banked
 23994  00623E  5167               	movf	(i1___lmul@multiplicand+3)& (0+255),w,b
 23995  006240  0100               	movlb	0	; () banked
 23996  006242  236B               	addwfc	(i1___lmul@product+3)& (0+255),f,b
 23997  006244                     i1l6777:
 23998                           
 23999                           ; BSR set to: 0
 24000  006244  0100               	movlb	0	; () banked
 24001  006246  90D8               	bcf	status,0,c
 24002  006248  3764               	rlcf	i1___lmul@multiplicand& (0+255),f,b
 24003  00624A  3765               	rlcf	(i1___lmul@multiplicand+1)& (0+255),f,b
 24004  00624C  3766               	rlcf	(i1___lmul@multiplicand+2)& (0+255),f,b
 24005  00624E  3767               	rlcf	(i1___lmul@multiplicand+3)& (0+255),f,b
 24006                           
 24007                           ; BSR set to: 0
 24008  006250  0100               	movlb	0	; () banked
 24009  006252  90D8               	bcf	status,0,c
 24010  006254  3363               	rrcf	(i1___lmul@multiplier+3)& (0+255),f,b
 24011  006256  3362               	rrcf	(i1___lmul@multiplier+2)& (0+255),f,b
 24012  006258  3361               	rrcf	(i1___lmul@multiplier+1)& (0+255),f,b
 24013  00625A  3360               	rrcf	i1___lmul@multiplier& (0+255),f,b
 24014  00625C  0100               	movlb	0	; () banked
 24015  00625E  5160               	movf	i1___lmul@multiplier& (0+255),w,b
 24016  006260  0100               	movlb	0	; () banked
 24017  006262  1161               	iorwf	(i1___lmul@multiplier+1)& (0+255),w,b
 24018  006264  0100               	movlb	0	; () banked
 24019  006266  1162               	iorwf	(i1___lmul@multiplier+2)& (0+255),w,b
 24020  006268  0100               	movlb	0	; () banked
 24021  00626A  1163               	iorwf	(i1___lmul@multiplier+3)& (0+255),w,b
 24022  00626C  A4D8               	btfss	status,2,c
 24023  00626E  D7D7               	goto	i1l6773
 24024                           
 24025                           ; BSR set to: 0
 24026  006270  C068  F060         	movff	i1___lmul@product,?i1___lmul
 24027  006274  C069  F061         	movff	i1___lmul@product+1,?i1___lmul+1
 24028  006278  C06A  F062         	movff	i1___lmul@product+2,?i1___lmul+2
 24029  00627C  C06B  F063         	movff	i1___lmul@product+3,?i1___lmul+3
 24030                           
 24031                           ; BSR set to: 0
 24032  006280  0012               	return		;funcret
 24033  006282                     __end_ofi1___lmul:
 24034                           	opt stack 0
 24035                           pclatu	equ	0xFFB
 24036                           pclath	equ	0xFFA
 24037                           tblptru	equ	0xFF8
 24038                           tblptrh	equ	0xFF7
 24039                           tblptrl	equ	0xFF6
 24040                           tablat	equ	0xFF5
 24041                           prodh	equ	0xFF4
 24042                           prodl	equ	0xFF3
 24043                           intcon	equ	0xFF2
 24044                           postinc0	equ	0xFEE
 24045                           fsr0h	equ	0xFEA
 24046                           fsr0l	equ	0xFE9
 24047                           wreg	equ	0xFE8
 24048                           postdec1	equ	0xFE5
 24049                           fsr1h	equ	0xFE2
 24050                           fsr1l	equ	0xFE1
 24051                           bsr	equ	0xFE0
 24052                           indf2	equ	0xFDF
 24053                           postinc2	equ	0xFDE
 24054                           postdec2	equ	0xFDD
 24055                           plusw2	equ	0xFDB
 24056                           fsr2h	equ	0xFDA
 24057                           fsr2l	equ	0xFD9
 24058                           status	equ	0xFD8
 24059                           
 24060 ;; *************** function i1___altoft *****************
 24061 ;; Defined at:
 24062 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
 24063 ;; Parameters:    Size  Location     Type
 24064 ;;  c               4    8[BANK0 ] long 
 24065 ;; Auto vars:     Size  Location     Type
 24066 ;;  __altoft        1   17[BANK0 ] unsigned char 
 24067 ;;  __altoft        1   16[BANK0 ] unsigned char 
 24068 ;; Return value:  Size  Location     Type
 24069 ;;                  3    8[BANK0 ] float 
 24070 ;; Registers used:
 24071 ;;		wreg, status,2, status,0, cstack
 24072 ;; Tracked objects:
 24073 ;;		On entry : 0/0
 24074 ;;		On exit  : 0/0
 24075 ;;		Unchanged: 0/0
 24076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24077 ;;      Params:         0       4       0       0       0       0       0
 24078 ;;      Locals:         0       2       0       0       0       0       0
 24079 ;;      Temps:          0       4       0       0       0       0       0
 24080 ;;      Totals:         0      10       0       0       0       0       0
 24081 ;;Total ram usage:       10 bytes
 24082 ;; Hardware stack levels used:    1
 24083 ;; Hardware stack levels required when called:    5
 24084 ;; This function calls:
 24085 ;;		i1___ftpack
 24086 ;; This function is called by:
 24087 ;;		i1_integrator
 24088 ;; This function uses a non-reentrant model
 24089 ;;
 24090                           
 24091                           	psect	text103
 24092  0057D6                     __ptext103:
 24093                           	opt stack 0
 24094  0057D6                     i1___altoft:
 24095                           	opt stack 11
 24096                           
 24097                           ; BSR set to: 0
 24098                           ;incstack = 0
 24099  0057D6  0E00               	movlw	0
 24100  0057D8  0100               	movlb	0	; () banked
 24101  0057DA  6F71               	movwf	i1___altoft@sign& (0+255),b
 24102  0057DC  0E8E               	movlw	142
 24103  0057DE  0100               	movlb	0	; () banked
 24104  0057E0  6F70               	movwf	i1___altoft@exp& (0+255),b
 24105                           
 24106                           ; BSR set to: 0
 24107  0057E2  0100               	movlb	0	; () banked
 24108  0057E4  AF6B               	btfss	(i1___altoft@c+3)& (0+255),7,b
 24109  0057E6  D015               	goto	i1l6835
 24110                           
 24111                           ; BSR set to: 0
 24112  0057E8  0100               	movlb	0	; () banked
 24113  0057EA  1F6B               	comf	(i1___altoft@c+3)& (0+255),f,b
 24114  0057EC  1F6A               	comf	(i1___altoft@c+2)& (0+255),f,b
 24115  0057EE  1F69               	comf	(i1___altoft@c+1)& (0+255),f,b
 24116  0057F0  6D68               	negf	i1___altoft@c& (0+255),b
 24117  0057F2  0E00               	movlw	0
 24118  0057F4  2369               	addwfc	(i1___altoft@c+1)& (0+255),f,b
 24119  0057F6  236A               	addwfc	(i1___altoft@c+2)& (0+255),f,b
 24120  0057F8  236B               	addwfc	(i1___altoft@c+3)& (0+255),f,b
 24121                           
 24122                           ; BSR set to: 0
 24123  0057FA  0E01               	movlw	1
 24124  0057FC  0100               	movlb	0	; () banked
 24125  0057FE  6F71               	movwf	i1___altoft@sign& (0+255),b
 24126                           
 24127                           ; BSR set to: 0
 24128  005800  D008               	goto	i1l6835
 24129  005802                     i1l6833:
 24130                           
 24131                           ; BSR set to: 0
 24132  005802  0100               	movlb	0	; () banked
 24133  005804  90D8               	bcf	status,0,c
 24134  005806  336B               	rrcf	(i1___altoft@c+3)& (0+255),f,b
 24135  005808  336A               	rrcf	(i1___altoft@c+2)& (0+255),f,b
 24136  00580A  3369               	rrcf	(i1___altoft@c+1)& (0+255),f,b
 24137  00580C  3368               	rrcf	i1___altoft@c& (0+255),f,b
 24138  00580E  0100               	movlb	0	; () banked
 24139  005810  2B70               	incf	i1___altoft@exp& (0+255),f,b
 24140  005812                     i1l6835:
 24141                           
 24142                           ; BSR set to: 0
 24143  005812  0E00               	movlw	0
 24144  005814  0100               	movlb	0	; () banked
 24145  005816  1568               	andwf	i1___altoft@c& (0+255),w,b
 24146  005818  0100               	movlb	0	; () banked
 24147  00581A  6F6C               	movwf	??i1___altoft& (0+255),b
 24148  00581C  0E00               	movlw	0
 24149  00581E  0100               	movlb	0	; () banked
 24150  005820  1569               	andwf	(i1___altoft@c+1)& (0+255),w,b
 24151  005822  0100               	movlb	0	; () banked
 24152  005824  6F6D               	movwf	(??i1___altoft+1)& (0+255),b
 24153  005826  0E00               	movlw	0
 24154  005828  0100               	movlb	0	; () banked
 24155  00582A  156A               	andwf	(i1___altoft@c+2)& (0+255),w,b
 24156  00582C  0100               	movlb	0	; () banked
 24157  00582E  6F6E               	movwf	(??i1___altoft+2)& (0+255),b
 24158  005830  0EFF               	movlw	255
 24159  005832  0100               	movlb	0	; () banked
 24160  005834  156B               	andwf	(i1___altoft@c+3)& (0+255),w,b
 24161  005836  0100               	movlb	0	; () banked
 24162  005838  6F6F               	movwf	(??i1___altoft+3)& (0+255),b
 24163  00583A  0100               	movlb	0	; () banked
 24164  00583C  516C               	movf	??i1___altoft& (0+255),w,b
 24165  00583E  0100               	movlb	0	; () banked
 24166  005840  116D               	iorwf	(??i1___altoft+1)& (0+255),w,b
 24167  005842  0100               	movlb	0	; () banked
 24168  005844  116E               	iorwf	(??i1___altoft+2)& (0+255),w,b
 24169  005846  0100               	movlb	0	; () banked
 24170  005848  116F               	iorwf	(??i1___altoft+3)& (0+255),w,b
 24171  00584A  A4D8               	btfss	status,2,c
 24172  00584C  D7DA               	goto	i1l6833
 24173                           
 24174                           ; BSR set to: 0
 24175                           
 24176                           ; BSR set to: 0
 24177  00584E  C068  F060         	movff	i1___altoft@c,i1___ftpack@arg
 24178  005852  C069  F061         	movff	i1___altoft@c+1,i1___ftpack@arg+1
 24179  005856  C06A  F062         	movff	i1___altoft@c+2,i1___ftpack@arg+2
 24180  00585A  C070  F063         	movff	i1___altoft@exp,i1___ftpack@exp
 24181  00585E  C071  F064         	movff	i1___altoft@sign,i1___ftpack@sign
 24182  005862  EC06  F022         	call	i1___ftpack	;wreg free
 24183  005866  C060  F068         	movff	?i1___ftpack,?i1___altoft
 24184  00586A  C061  F069         	movff	?i1___ftpack+1,?i1___altoft+1
 24185  00586E  C062  F06A         	movff	?i1___ftpack+2,?i1___altoft+2
 24186  005872  0012               	return	
 24187  005874                     __end_ofi1___altoft:
 24188                           	opt stack 0
 24189                           pclatu	equ	0xFFB
 24190                           pclath	equ	0xFFA
 24191                           tblptru	equ	0xFF8
 24192                           tblptrh	equ	0xFF7
 24193                           tblptrl	equ	0xFF6
 24194                           tablat	equ	0xFF5
 24195                           prodh	equ	0xFF4
 24196                           prodl	equ	0xFF3
 24197                           intcon	equ	0xFF2
 24198                           postinc0	equ	0xFEE
 24199                           fsr0h	equ	0xFEA
 24200                           fsr0l	equ	0xFE9
 24201                           wreg	equ	0xFE8
 24202                           postdec1	equ	0xFE5
 24203                           fsr1h	equ	0xFE2
 24204                           fsr1l	equ	0xFE1
 24205                           bsr	equ	0xFE0
 24206                           indf2	equ	0xFDF
 24207                           postinc2	equ	0xFDE
 24208                           postdec2	equ	0xFDD
 24209                           plusw2	equ	0xFDB
 24210                           fsr2h	equ	0xFDA
 24211                           fsr2l	equ	0xFD9
 24212                           status	equ	0xFD8
 24213                           
 24214 ;; *************** function i1_initCalib *****************
 24215 ;; Defined at:
 24216 ;;		line 84 in file "source/DisplayProtocol.h"
 24217 ;; Parameters:    Size  Location     Type
 24218 ;;		None
 24219 ;; Auto vars:     Size  Location     Type
 24220 ;;		None
 24221 ;; Return value:  Size  Location     Type
 24222 ;;                  1    wreg      void 
 24223 ;; Registers used:
 24224 ;;		wreg, status,2, status,0, cstack
 24225 ;; Tracked objects:
 24226 ;;		On entry : 0/0
 24227 ;;		On exit  : 0/0
 24228 ;;		Unchanged: 0/0
 24229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24230 ;;      Params:         0       0       0       0       0       0       0
 24231 ;;      Locals:         0       0       0       0       0       0       0
 24232 ;;      Temps:          0       0       0       0       0       0       0
 24233 ;;      Totals:         0       0       0       0       0       0       0
 24234 ;;Total ram usage:        0 bytes
 24235 ;; Hardware stack levels used:    1
 24236 ;; Hardware stack levels required when called:    5
 24237 ;; This function calls:
 24238 ;;		i1_setPWM2duty
 24239 ;; This function is called by:
 24240 ;;		i1_pressENTER
 24241 ;;		i1_longPressENTER
 24242 ;; This function uses a non-reentrant model
 24243 ;;
 24244                           
 24245                           	psect	text104
 24246  00699E                     __ptext104:
 24247                           	opt stack 0
 24248  00699E                     i1_initCalib:
 24249                           	opt stack 12
 24250                           
 24251                           ;DisplayProtocol.h: 85: if(!PORTAbits.RA7)
 24252                           
 24253                           ;incstack = 0
 24254  00699E  BE80               	btfsc	3968,7,c	;volatile
 24255  0069A0  D003               	goto	i1l554
 24256                           
 24257                           ;DisplayProtocol.h: 86: bladeIsUP = 2;
 24258  0069A2  0E02               	movlw	2
 24259  0069A4  0100               	movlb	0	; () banked
 24260  0069A6  6FC8               	movwf	_bladeIsUP& (0+255),b
 24261  0069A8                     i1l554:
 24262                           
 24263                           ;DisplayProtocol.h: 87: processState = 0;
 24264  0069A8  0E00               	movlw	0
 24265  0069AA  0100               	movlb	0	; () banked
 24266  0069AC  6FB5               	movwf	(_processState+1)& (0+255),b
 24267  0069AE  0E00               	movlw	0
 24268  0069B0  6FB4               	movwf	_processState& (0+255),b
 24269                           
 24270                           ;DisplayProtocol.h: 88: processStarted = 1;
 24271  0069B2  0E01               	movlw	1
 24272  0069B4  0100               	movlb	0	; () banked
 24273  0069B6  6FBB               	movwf	_processStarted& (0+255),b
 24274                           
 24275                           ; BSR set to: 0
 24276                           ;DisplayProtocol.h: 89: if(bladeIsUP != 1)
 24277  0069B8  0100               	movlb	0	; () banked
 24278  0069BA  05C8               	decf	_bladeIsUP& (0+255),w,b
 24279  0069BC  B4D8               	btfsc	status,2,c
 24280  0069BE  D007               	goto	i1l7169
 24281                           
 24282                           ; BSR set to: 0
 24283                           ;DisplayProtocol.h: 90: setPWM2duty(-400);
 24284  0069C0  0EFE               	movlw	254
 24285  0069C2  0100               	movlb	0	; () banked
 24286  0069C4  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 24287  0069C6  0E70               	movlw	112
 24288  0069C8  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 24289  0069CA  ECD1  F02C         	call	i1_setPWM2duty	;wreg free
 24290  0069CE                     i1l7169:
 24291                           
 24292                           ;DisplayProtocol.h: 91: actualScreen = 6;
 24293  0069CE  0E06               	movlw	6
 24294  0069D0  0101               	movlb	1	; () banked
 24295  0069D2  6FC3               	movwf	_actualScreen& (0+255),b
 24296                           
 24297                           ; BSR set to: 1
 24298  0069D4  0012               	return		;funcret
 24299  0069D6                     __end_ofi1_initCalib:
 24300                           	opt stack 0
 24301                           pclatu	equ	0xFFB
 24302                           pclath	equ	0xFFA
 24303                           tblptru	equ	0xFF8
 24304                           tblptrh	equ	0xFF7
 24305                           tblptrl	equ	0xFF6
 24306                           tablat	equ	0xFF5
 24307                           prodh	equ	0xFF4
 24308                           prodl	equ	0xFF3
 24309                           intcon	equ	0xFF2
 24310                           postinc0	equ	0xFEE
 24311                           fsr0h	equ	0xFEA
 24312                           fsr0l	equ	0xFE9
 24313                           wreg	equ	0xFE8
 24314                           postdec1	equ	0xFE5
 24315                           fsr1h	equ	0xFE2
 24316                           fsr1l	equ	0xFE1
 24317                           bsr	equ	0xFE0
 24318                           indf2	equ	0xFDF
 24319                           postinc2	equ	0xFDE
 24320                           postdec2	equ	0xFDD
 24321                           plusw2	equ	0xFDB
 24322                           fsr2h	equ	0xFDA
 24323                           fsr2l	equ	0xFD9
 24324                           status	equ	0xFD8
 24325                           
 24326 ;; *************** function i1_confirmEdition *****************
 24327 ;; Defined at:
 24328 ;;		line 94 in file "source/DisplayProtocol.h"
 24329 ;; Parameters:    Size  Location     Type
 24330 ;;  yes             1    wreg     unsigned char 
 24331 ;; Auto vars:     Size  Location     Type
 24332 ;;  yes             1   33[BANK0 ] unsigned char 
 24333 ;; Return value:  Size  Location     Type
 24334 ;;                  1    wreg      void 
 24335 ;; Registers used:
 24336 ;;		wreg, status,2, status,0, cstack
 24337 ;; Tracked objects:
 24338 ;;		On entry : 0/0
 24339 ;;		On exit  : 0/0
 24340 ;;		Unchanged: 0/0
 24341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24342 ;;      Params:         0       0       0       0       0       0       0
 24343 ;;      Locals:         0       1       0       0       0       0       0
 24344 ;;      Temps:          0       0       0       0       0       0       0
 24345 ;;      Totals:         0       1       0       0       0       0       0
 24346 ;;Total ram usage:        1 bytes
 24347 ;; Hardware stack levels used:    1
 24348 ;; Hardware stack levels required when called:    8
 24349 ;; This function calls:
 24350 ;;		i1_saveSysParams
 24351 ;; This function is called by:
 24352 ;;		i1_pressENTER
 24353 ;;		i1_longPressENTER
 24354 ;; This function uses a non-reentrant model
 24355 ;;
 24356                           
 24357                           	psect	text105
 24358  0051F2                     __ptext105:
 24359                           	opt stack 0
 24360  0051F2                     i1_confirmEdition:
 24361                           	opt stack 9
 24362                           
 24363                           ; BSR set to: 1
 24364                           ;incstack = 0
 24365                           ;i1confirmEdition@yes stored from wreg
 24366  0051F2  0100               	movlb	0	; () banked
 24367  0051F4  6F81               	movwf	i1confirmEdition@yes& (0+255),b
 24368                           
 24369                           ;DisplayProtocol.h: 95: switch (menuSection) {
 24370  0051F6  D04C               	goto	i1l7205
 24371  0051F8                     i1l7173:
 24372                           
 24373                           ;DisplayProtocol.h: 99: if(yes) {
 24374  0051F8  0100               	movlb	0	; () banked
 24375  0051FA  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 24376  0051FC  0100               	movlb	0	; () banked
 24377  0051FE  B4D8               	btfsc	status,2,c
 24378  005200  D00C               	goto	i1l563
 24379                           
 24380                           ; BSR set to: 0
 24381                           ;DisplayProtocol.h: 100: kgXcorte = chanValf;
 24382  005202  C1B7  F18F         	movff	_chanValf,_kgXcorte
 24383  005206  C1B8  F190         	movff	_chanValf+1,_kgXcorte+1
 24384  00520A  C1B9  F191         	movff	_chanValf+2,_kgXcorte+2
 24385                           
 24386                           ; BSR set to: 0
 24387                           ;DisplayProtocol.h: 101: actualScreen = 4;
 24388  00520E  0E04               	movlw	4
 24389  005210  0101               	movlb	1	; () banked
 24390  005212  6FC3               	movwf	_actualScreen& (0+255),b
 24391                           
 24392                           ; BSR set to: 1
 24393                           ;DisplayProtocol.h: 102: saveSysParams();
 24394  005214  ECAD  F02D         	call	i1_saveSysParams	;wreg free
 24395                           
 24396                           ;DisplayProtocol.h: 103: }else {
 24397  005218  0012               	return	
 24398  00521A                     i1l563:
 24399                           
 24400                           ; BSR set to: 0
 24401                           ;DisplayProtocol.h: 104: tempLastScreen = actualScreen;
 24402  00521A  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 24403                           
 24404                           ; BSR set to: 0
 24405                           ;DisplayProtocol.h: 105: selSN = 1;
 24406  00521E  0E01               	movlw	1
 24407  005220  0101               	movlb	1	; () banked
 24408  005222  6FCC               	movwf	_selSN& (0+255),b
 24409                           
 24410                           ;DisplayProtocol.h: 106: actualScreen = 10;
 24411  005224  0E0A               	movlw	10
 24412  005226  0101               	movlb	1	; () banked
 24413  005228  6FC3               	movwf	_actualScreen& (0+255),b
 24414                           
 24415                           ; BSR set to: 1
 24416                           ;DisplayProtocol.h: 107: }
 24417                           ;DisplayProtocol.h: 108: break;
 24418  00522A  0012               	return	
 24419  00522C                     i1l7183:
 24420                           
 24421                           ; BSR set to: 1
 24422                           ;DisplayProtocol.h: 110: if(yes) {
 24423  00522C  0100               	movlb	0	; () banked
 24424  00522E  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 24425  005230  0100               	movlb	0	; () banked
 24426  005232  B4D8               	btfsc	status,2,c
 24427  005234  D00A               	goto	i1l566
 24428                           
 24429                           ; BSR set to: 0
 24430                           ;DisplayProtocol.h: 111: numCortes = chanVals;
 24431  005236  C1BA  F0C6         	movff	_chanVals,_numCortes
 24432  00523A  C1BB  F0C7         	movff	_chanVals+1,_numCortes+1
 24433                           
 24434                           ; BSR set to: 0
 24435                           ;DisplayProtocol.h: 112: actualScreen = 4;
 24436  00523E  0E04               	movlw	4
 24437  005240  0101               	movlb	1	; () banked
 24438  005242  6FC3               	movwf	_actualScreen& (0+255),b
 24439                           
 24440                           ; BSR set to: 1
 24441                           ;DisplayProtocol.h: 113: saveSysParams();
 24442  005244  ECAD  F02D         	call	i1_saveSysParams	;wreg free
 24443                           
 24444                           ;DisplayProtocol.h: 114: }else {
 24445  005248  0012               	return	
 24446  00524A                     i1l566:
 24447                           
 24448                           ; BSR set to: 0
 24449                           ;DisplayProtocol.h: 115: tempLastScreen = actualScreen;
 24450  00524A  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 24451                           
 24452                           ; BSR set to: 0
 24453                           ;DisplayProtocol.h: 116: selSN = 1;
 24454  00524E  0E01               	movlw	1
 24455  005250  0101               	movlb	1	; () banked
 24456  005252  6FCC               	movwf	_selSN& (0+255),b
 24457                           
 24458                           ;DisplayProtocol.h: 117: actualScreen = 10;
 24459  005254  0E0A               	movlw	10
 24460  005256  0101               	movlb	1	; () banked
 24461  005258  6FC3               	movwf	_actualScreen& (0+255),b
 24462                           
 24463                           ; BSR set to: 1
 24464                           ;DisplayProtocol.h: 118: }
 24465                           ;DisplayProtocol.h: 119: break;
 24466  00525A  0012               	return	
 24467  00525C                     i1l7193:
 24468                           
 24469                           ; BSR set to: 1
 24470                           ;DisplayProtocol.h: 121: if(yes) {
 24471  00525C  0100               	movlb	0	; () banked
 24472  00525E  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 24473  005260  0100               	movlb	0	; () banked
 24474  005262  B4D8               	btfsc	status,2,c
 24475  005264  D00C               	goto	i1l569
 24476                           
 24477                           ; BSR set to: 0
 24478                           ;DisplayProtocol.h: 122: velocidadMasa = chanValf;
 24479  005266  C1B7  F198         	movff	_chanValf,_velocidadMasa
 24480  00526A  C1B8  F199         	movff	_chanValf+1,_velocidadMasa+1
 24481  00526E  C1B9  F19A         	movff	_chanValf+2,_velocidadMasa+2
 24482                           
 24483                           ; BSR set to: 0
 24484                           ;DisplayProtocol.h: 123: actualScreen = 4;
 24485  005272  0E04               	movlw	4
 24486  005274  0101               	movlb	1	; () banked
 24487  005276  6FC3               	movwf	_actualScreen& (0+255),b
 24488                           
 24489                           ; BSR set to: 1
 24490                           ;DisplayProtocol.h: 124: saveSysParams();
 24491  005278  ECAD  F02D         	call	i1_saveSysParams	;wreg free
 24492                           
 24493                           ;DisplayProtocol.h: 125: }else {
 24494  00527C  0012               	return	
 24495  00527E                     i1l569:
 24496                           
 24497                           ; BSR set to: 0
 24498                           ;DisplayProtocol.h: 126: tempLastScreen = actualScreen;
 24499  00527E  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 24500                           
 24501                           ; BSR set to: 0
 24502                           ;DisplayProtocol.h: 127: selSN = 1;
 24503  005282  0E01               	movlw	1
 24504  005284  0101               	movlb	1	; () banked
 24505  005286  6FCC               	movwf	_selSN& (0+255),b
 24506                           
 24507                           ;DisplayProtocol.h: 128: actualScreen = 10;
 24508  005288  0E0A               	movlw	10
 24509  00528A  0101               	movlb	1	; () banked
 24510  00528C  6FC3               	movwf	_actualScreen& (0+255),b
 24511                           
 24512                           ; BSR set to: 1
 24513                           ;DisplayProtocol.h: 131: }
 24514                           ;DisplayProtocol.h: 132: }
 24515                           
 24516                           ; BSR set to: 1
 24517                           ;DisplayProtocol.h: 129: }
 24518                           ;DisplayProtocol.h: 130: break;
 24519  00528E  0012               	return	
 24520  005290                     i1l7205:
 24521  005290  0101               	movlb	1	; () banked
 24522  005292  51CA               	movf	_menuSection& (0+255),w,b
 24523                           
 24524                           ; Switch size 1, requested type "space"
 24525                           ; Number of cases is 4, Range of values is 0 to 3
 24526                           ; switch strategies available:
 24527                           ; Name         Instructions Cycles
 24528                           ; simple_byte           13     7 (average)
 24529                           ;	Chosen strategy is simple_byte
 24530  005294  0A00               	xorlw	0	; case 0
 24531  005296  B4D8               	btfsc	status,2,c
 24532  005298  0012               	return	
 24533  00529A  0A01               	xorlw	1	; case 1
 24534  00529C  B4D8               	btfsc	status,2,c
 24535  00529E  D7AC               	goto	i1l7173
 24536  0052A0  0A03               	xorlw	3	; case 2
 24537  0052A2  B4D8               	btfsc	status,2,c
 24538  0052A4  D7C3               	goto	i1l7183
 24539  0052A6  0A01               	xorlw	1	; case 3
 24540  0052A8  A4D8               	btfss	status,2,c
 24541  0052AA  0012               	return	
 24542  0052AC  D7D7               	goto	i1l7193
 24543  0052AE                     __end_ofi1_confirmEdition:
 24544                           	opt stack 0
 24545                           pclatu	equ	0xFFB
 24546                           pclath	equ	0xFFA
 24547                           tblptru	equ	0xFF8
 24548                           tblptrh	equ	0xFF7
 24549                           tblptrl	equ	0xFF6
 24550                           tablat	equ	0xFF5
 24551                           prodh	equ	0xFF4
 24552                           prodl	equ	0xFF3
 24553                           intcon	equ	0xFF2
 24554                           postinc0	equ	0xFEE
 24555                           fsr0h	equ	0xFEA
 24556                           fsr0l	equ	0xFE9
 24557                           wreg	equ	0xFE8
 24558                           postdec1	equ	0xFE5
 24559                           fsr1h	equ	0xFE2
 24560                           fsr1l	equ	0xFE1
 24561                           bsr	equ	0xFE0
 24562                           indf2	equ	0xFDF
 24563                           postinc2	equ	0xFDE
 24564                           postdec2	equ	0xFDD
 24565                           plusw2	equ	0xFDB
 24566                           fsr2h	equ	0xFDA
 24567                           fsr2l	equ	0xFD9
 24568                           status	equ	0xFD8
 24569                           
 24570 ;; *************** function i1___ftadd *****************
 24571 ;; Defined at:
 24572 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 24573 ;; Parameters:    Size  Location     Type
 24574 ;;  f1              3    8[BANK0 ] float 
 24575 ;;  f2              3   11[BANK0 ] float 
 24576 ;; Auto vars:     Size  Location     Type
 24577 ;;  __ftadd         1   19[BANK0 ] unsigned char 
 24578 ;;  __ftadd         1   18[BANK0 ] unsigned char 
 24579 ;;  __ftadd         1   17[BANK0 ] unsigned char 
 24580 ;; Return value:  Size  Location     Type
 24581 ;;                  3    8[BANK0 ] float 
 24582 ;; Registers used:
 24583 ;;		wreg, status,2, status,0, cstack
 24584 ;; Tracked objects:
 24585 ;;		On entry : 0/0
 24586 ;;		On exit  : 0/0
 24587 ;;		Unchanged: 0/0
 24588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24589 ;;      Params:         0       6       0       0       0       0       0
 24590 ;;      Locals:         0       3       0       0       0       0       0
 24591 ;;      Temps:          0       3       0       0       0       0       0
 24592 ;;      Totals:         0      12       0       0       0       0       0
 24593 ;;Total ram usage:       12 bytes
 24594 ;; Hardware stack levels used:    1
 24595 ;; Hardware stack levels required when called:    5
 24596 ;; This function calls:
 24597 ;;		i1___ftpack
 24598 ;; This function is called by:
 24599 ;;		i1_longPressENTER
 24600 ;; This function uses a non-reentrant model
 24601 ;;
 24602                           
 24603                           	psect	text106
 24604  002668                     __ptext106:
 24605                           	opt stack 0
 24606  002668                     i1___ftadd:
 24607                           	opt stack 12
 24608                           
 24609                           ;incstack = 0
 24610  002668  C06A  F06E         	movff	i1___ftadd@f1+2,??i1___ftadd
 24611  00266C  0100               	movlb	0	; () banked
 24612  00266E  6B6F               	clrf	(??i1___ftadd+1)& (0+255),b
 24613  002670  6B70               	clrf	(??i1___ftadd+2)& (0+255),b
 24614  002672  0100               	movlb	0	; () banked
 24615  002674  3569               	rlcf	(i1___ftadd@f1+1)& (0+255),w,b
 24616  002676  0100               	movlb	0	; () banked
 24617  002678  376E               	rlcf	??i1___ftadd& (0+255),f,b
 24618  00267A  E301               	bnc	u948_21
 24619  00267C  816F               	bsf	(??i1___ftadd+1)& (0+255),0,b
 24620  00267E                     u948_21:
 24621  00267E  0100               	movlb	0	; () banked
 24622  002680  516E               	movf	??i1___ftadd& (0+255),w,b
 24623  002682  0100               	movlb	0	; () banked
 24624  002684  6F73               	movwf	i1___ftadd@exp1& (0+255),b
 24625  002686  C06D  F06E         	movff	i1___ftadd@f2+2,??i1___ftadd
 24626  00268A  0100               	movlb	0	; () banked
 24627  00268C  6B6F               	clrf	(??i1___ftadd+1)& (0+255),b
 24628  00268E  6B70               	clrf	(??i1___ftadd+2)& (0+255),b
 24629  002690  0100               	movlb	0	; () banked
 24630  002692  356C               	rlcf	(i1___ftadd@f2+1)& (0+255),w,b
 24631  002694  0100               	movlb	0	; () banked
 24632  002696  376E               	rlcf	??i1___ftadd& (0+255),f,b
 24633  002698  E301               	bnc	u949_21
 24634  00269A  816F               	bsf	(??i1___ftadd+1)& (0+255),0,b
 24635  00269C                     u949_21:
 24636  00269C  0100               	movlb	0	; () banked
 24637  00269E  516E               	movf	??i1___ftadd& (0+255),w,b
 24638  0026A0  0100               	movlb	0	; () banked
 24639  0026A2  6F72               	movwf	i1___ftadd@exp2& (0+255),b
 24640                           
 24641                           ; BSR set to: 0
 24642  0026A4  0100               	movlb	0	; () banked
 24643  0026A6  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24644  0026A8  0100               	movlb	0	; () banked
 24645  0026AA  B4D8               	btfsc	status,2,c
 24646  0026AC  D011               	goto	i1l1307
 24647                           
 24648                           ; BSR set to: 0
 24649  0026AE  0100               	movlb	0	; () banked
 24650  0026B0  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24651  0026B2  0100               	movlb	0	; () banked
 24652  0026B4  5D73               	subwf	i1___ftadd@exp1& (0+255),w,b
 24653  0026B6  B0D8               	btfsc	status,0,c
 24654  0026B8  D012               	goto	i1l7251
 24655                           
 24656                           ; BSR set to: 0
 24657  0026BA  0100               	movlb	0	; () banked
 24658  0026BC  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24659  0026BE  0800               	sublw	0
 24660  0026C0  0100               	movlb	0	; () banked
 24661  0026C2  2572               	addwf	i1___ftadd@exp2& (0+255),w,b
 24662  0026C4  0100               	movlb	0	; () banked
 24663  0026C6  6F6E               	movwf	??i1___ftadd& (0+255),b
 24664  0026C8  0E18               	movlw	24
 24665  0026CA  0100               	movlb	0	; () banked
 24666  0026CC  656E               	cpfsgt	??i1___ftadd& (0+255),b
 24667  0026CE  D007               	goto	i1l7251
 24668  0026D0                     i1l1307:
 24669                           
 24670                           ; BSR set to: 0
 24671  0026D0  C06B  F068         	movff	i1___ftadd@f2,?i1___ftadd
 24672  0026D4  C06C  F069         	movff	i1___ftadd@f2+1,?i1___ftadd+1
 24673  0026D8  C06D  F06A         	movff	i1___ftadd@f2+2,?i1___ftadd+2
 24674  0026DC  0012               	return	
 24675  0026DE                     i1l7251:
 24676                           
 24677                           ; BSR set to: 0
 24678  0026DE  0100               	movlb	0	; () banked
 24679  0026E0  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24680  0026E2  0100               	movlb	0	; () banked
 24681  0026E4  B4D8               	btfsc	status,2,c
 24682  0026E6  D011               	goto	i1l1311
 24683                           
 24684                           ; BSR set to: 0
 24685  0026E8  0100               	movlb	0	; () banked
 24686  0026EA  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24687  0026EC  0100               	movlb	0	; () banked
 24688  0026EE  5D72               	subwf	i1___ftadd@exp2& (0+255),w,b
 24689  0026F0  B0D8               	btfsc	status,0,c
 24690  0026F2  D012               	goto	i1l7257
 24691                           
 24692                           ; BSR set to: 0
 24693  0026F4  0100               	movlb	0	; () banked
 24694  0026F6  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24695  0026F8  0800               	sublw	0
 24696  0026FA  0100               	movlb	0	; () banked
 24697  0026FC  2573               	addwf	i1___ftadd@exp1& (0+255),w,b
 24698  0026FE  0100               	movlb	0	; () banked
 24699  002700  6F6E               	movwf	??i1___ftadd& (0+255),b
 24700  002702  0E18               	movlw	24
 24701  002704  0100               	movlb	0	; () banked
 24702  002706  656E               	cpfsgt	??i1___ftadd& (0+255),b
 24703  002708  D007               	goto	i1l7257
 24704  00270A                     i1l1311:
 24705                           
 24706                           ; BSR set to: 0
 24707  00270A  C068  F068         	movff	i1___ftadd@f1,?i1___ftadd
 24708  00270E  C069  F069         	movff	i1___ftadd@f1+1,?i1___ftadd+1
 24709  002712  C06A  F06A         	movff	i1___ftadd@f1+2,?i1___ftadd+2
 24710  002716  0012               	return	
 24711  002718                     i1l7257:
 24712                           
 24713                           ; BSR set to: 0
 24714  002718  0E06               	movlw	6
 24715  00271A  0100               	movlb	0	; () banked
 24716  00271C  6F71               	movwf	i1___ftadd@sign& (0+255),b
 24717                           
 24718                           ; BSR set to: 0
 24719  00271E  0100               	movlb	0	; () banked
 24720  002720  AF6A               	btfss	(i1___ftadd@f1+2)& (0+255),7,b
 24721  002722  D002               	goto	i1l7263
 24722                           
 24723                           ; BSR set to: 0
 24724  002724  0100               	movlb	0	; () banked
 24725  002726  8F71               	bsf	i1___ftadd@sign& (0+255),7,b
 24726  002728                     i1l7263:
 24727                           
 24728                           ; BSR set to: 0
 24729  002728  0100               	movlb	0	; () banked
 24730  00272A  AF6D               	btfss	(i1___ftadd@f2+2)& (0+255),7,b
 24731  00272C  D002               	goto	i1l1313
 24732                           
 24733                           ; BSR set to: 0
 24734  00272E  0100               	movlb	0	; () banked
 24735  002730  8D71               	bsf	i1___ftadd@sign& (0+255),6,b
 24736  002732                     i1l1313:
 24737                           
 24738                           ; BSR set to: 0
 24739  002732  0100               	movlb	0	; () banked
 24740  002734  8F69               	bsf	(i1___ftadd@f1+1)& (0+255),7,b
 24741                           
 24742                           ; BSR set to: 0
 24743  002736  0EFF               	movlw	255
 24744  002738  0100               	movlb	0	; () banked
 24745  00273A  1768               	andwf	i1___ftadd@f1& (0+255),f,b
 24746  00273C  0EFF               	movlw	255
 24747  00273E  0100               	movlb	0	; () banked
 24748  002740  1769               	andwf	(i1___ftadd@f1+1)& (0+255),f,b
 24749  002742  0E00               	movlw	0
 24750  002744  0100               	movlb	0	; () banked
 24751  002746  176A               	andwf	(i1___ftadd@f1+2)& (0+255),f,b
 24752  002748  0100               	movlb	0	; () banked
 24753  00274A  8F6C               	bsf	(i1___ftadd@f2+1)& (0+255),7,b
 24754                           
 24755                           ; BSR set to: 0
 24756  00274C  0EFF               	movlw	255
 24757  00274E  0100               	movlb	0	; () banked
 24758  002750  176B               	andwf	i1___ftadd@f2& (0+255),f,b
 24759  002752  0EFF               	movlw	255
 24760  002754  0100               	movlb	0	; () banked
 24761  002756  176C               	andwf	(i1___ftadd@f2+1)& (0+255),f,b
 24762  002758  0E00               	movlw	0
 24763  00275A  0100               	movlb	0	; () banked
 24764  00275C  176D               	andwf	(i1___ftadd@f2+2)& (0+255),f,b
 24765                           
 24766                           ; BSR set to: 0
 24767  00275E  0100               	movlb	0	; () banked
 24768  002760  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24769  002762  0100               	movlb	0	; () banked
 24770  002764  5D73               	subwf	i1___ftadd@exp1& (0+255),w,b
 24771  002766  B0D8               	btfsc	status,0,c
 24772  002768  D025               	goto	i1l7283
 24773  00276A                     i1l7273:
 24774                           
 24775                           ; BSR set to: 0
 24776  00276A  0100               	movlb	0	; () banked
 24777  00276C  90D8               	bcf	status,0,c
 24778  00276E  376B               	rlcf	i1___ftadd@f2& (0+255),f,b
 24779  002770  376C               	rlcf	(i1___ftadd@f2+1)& (0+255),f,b
 24780  002772  376D               	rlcf	(i1___ftadd@f2+2)& (0+255),f,b
 24781  002774  0100               	movlb	0	; () banked
 24782  002776  0772               	decf	i1___ftadd@exp2& (0+255),f,b
 24783                           
 24784                           ; BSR set to: 0
 24785  002778  0100               	movlb	0	; () banked
 24786  00277A  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24787  00277C  0100               	movlb	0	; () banked
 24788  00277E  1972               	xorwf	i1___ftadd@exp2& (0+255),w,b
 24789  002780  B4D8               	btfsc	status,2,c
 24790  002782  D011               	goto	i1l7281
 24791                           
 24792                           ; BSR set to: 0
 24793  002784  0100               	movlb	0	; () banked
 24794  002786  0771               	decf	i1___ftadd@sign& (0+255),f,b
 24795  002788  C071  F06E         	movff	i1___ftadd@sign,??i1___ftadd
 24796  00278C  0E07               	movlw	7
 24797  00278E  0100               	movlb	0	; () banked
 24798  002790  176E               	andwf	??i1___ftadd& (0+255),f,b
 24799  002792  B4D8               	btfsc	status,2,c
 24800  002794  D008               	goto	i1l7281
 24801  002796  D7E9               	goto	i1l7273
 24802  002798                     i1l7279:
 24803                           
 24804                           ; BSR set to: 0
 24805  002798  0100               	movlb	0	; () banked
 24806  00279A  90D8               	bcf	status,0,c
 24807  00279C  336A               	rrcf	(i1___ftadd@f1+2)& (0+255),f,b
 24808  00279E  3369               	rrcf	(i1___ftadd@f1+1)& (0+255),f,b
 24809  0027A0  3368               	rrcf	i1___ftadd@f1& (0+255),f,b
 24810  0027A2  0100               	movlb	0	; () banked
 24811  0027A4  2B73               	incf	i1___ftadd@exp1& (0+255),f,b
 24812  0027A6                     i1l7281:
 24813                           
 24814                           ; BSR set to: 0
 24815  0027A6  0100               	movlb	0	; () banked
 24816  0027A8  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24817  0027AA  0100               	movlb	0	; () banked
 24818  0027AC  1973               	xorwf	i1___ftadd@exp1& (0+255),w,b
 24819  0027AE  B4D8               	btfsc	status,2,c
 24820  0027B0  D02B               	goto	i1l1322
 24821  0027B2  D7F2               	goto	i1l7279
 24822  0027B4                     i1l7283:
 24823                           
 24824                           ; BSR set to: 0
 24825  0027B4  0100               	movlb	0	; () banked
 24826  0027B6  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24827  0027B8  0100               	movlb	0	; () banked
 24828  0027BA  5D72               	subwf	i1___ftadd@exp2& (0+255),w,b
 24829  0027BC  B0D8               	btfsc	status,0,c
 24830  0027BE  D024               	goto	i1l1322
 24831  0027C0                     i1l7285:
 24832                           
 24833                           ; BSR set to: 0
 24834  0027C0  0100               	movlb	0	; () banked
 24835  0027C2  90D8               	bcf	status,0,c
 24836  0027C4  3768               	rlcf	i1___ftadd@f1& (0+255),f,b
 24837  0027C6  3769               	rlcf	(i1___ftadd@f1+1)& (0+255),f,b
 24838  0027C8  376A               	rlcf	(i1___ftadd@f1+2)& (0+255),f,b
 24839  0027CA  0100               	movlb	0	; () banked
 24840  0027CC  0773               	decf	i1___ftadd@exp1& (0+255),f,b
 24841                           
 24842                           ; BSR set to: 0
 24843  0027CE  0100               	movlb	0	; () banked
 24844  0027D0  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24845  0027D2  0100               	movlb	0	; () banked
 24846  0027D4  1972               	xorwf	i1___ftadd@exp2& (0+255),w,b
 24847  0027D6  B4D8               	btfsc	status,2,c
 24848  0027D8  D011               	goto	i1l7293
 24849                           
 24850                           ; BSR set to: 0
 24851  0027DA  0100               	movlb	0	; () banked
 24852  0027DC  0771               	decf	i1___ftadd@sign& (0+255),f,b
 24853  0027DE  C071  F06E         	movff	i1___ftadd@sign,??i1___ftadd
 24854  0027E2  0E07               	movlw	7
 24855  0027E4  0100               	movlb	0	; () banked
 24856  0027E6  176E               	andwf	??i1___ftadd& (0+255),f,b
 24857  0027E8  B4D8               	btfsc	status,2,c
 24858  0027EA  D008               	goto	i1l7293
 24859  0027EC  D7E9               	goto	i1l7285
 24860  0027EE                     i1l7291:
 24861                           
 24862                           ; BSR set to: 0
 24863  0027EE  0100               	movlb	0	; () banked
 24864  0027F0  90D8               	bcf	status,0,c
 24865  0027F2  336D               	rrcf	(i1___ftadd@f2+2)& (0+255),f,b
 24866  0027F4  336C               	rrcf	(i1___ftadd@f2+1)& (0+255),f,b
 24867  0027F6  336B               	rrcf	i1___ftadd@f2& (0+255),f,b
 24868  0027F8  0100               	movlb	0	; () banked
 24869  0027FA  2B72               	incf	i1___ftadd@exp2& (0+255),f,b
 24870  0027FC                     i1l7293:
 24871                           
 24872                           ; BSR set to: 0
 24873  0027FC  0100               	movlb	0	; () banked
 24874  0027FE  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24875  002800  0100               	movlb	0	; () banked
 24876  002802  1973               	xorwf	i1___ftadd@exp1& (0+255),w,b
 24877  002804  A4D8               	btfss	status,2,c
 24878  002806  D7F3               	goto	i1l7291
 24879  002808                     i1l1322:
 24880                           
 24881                           ; BSR set to: 0
 24882  002808  0100               	movlb	0	; () banked
 24883  00280A  AF71               	btfss	i1___ftadd@sign& (0+255),7,b
 24884  00280C  D012               	goto	i1l1331
 24885                           
 24886                           ; BSR set to: 0
 24887  00280E  0EFF               	movlw	255
 24888  002810  0100               	movlb	0	; () banked
 24889  002812  1B68               	xorwf	i1___ftadd@f1& (0+255),f,b
 24890  002814  0EFF               	movlw	255
 24891  002816  0100               	movlb	0	; () banked
 24892  002818  1B69               	xorwf	(i1___ftadd@f1+1)& (0+255),f,b
 24893  00281A  0EFF               	movlw	255
 24894  00281C  0100               	movlb	0	; () banked
 24895  00281E  1B6A               	xorwf	(i1___ftadd@f1+2)& (0+255),f,b
 24896  002820  0E01               	movlw	1
 24897  002822  0100               	movlb	0	; () banked
 24898  002824  2768               	addwf	i1___ftadd@f1& (0+255),f,b
 24899  002826  0E00               	movlw	0
 24900  002828  0100               	movlb	0	; () banked
 24901  00282A  2369               	addwfc	(i1___ftadd@f1+1)& (0+255),f,b
 24902  00282C  0E00               	movlw	0
 24903  00282E  0100               	movlb	0	; () banked
 24904  002830  236A               	addwfc	(i1___ftadd@f1+2)& (0+255),f,b
 24905  002832                     i1l1331:
 24906                           
 24907                           ; BSR set to: 0
 24908  002832  0100               	movlb	0	; () banked
 24909  002834  AD71               	btfss	i1___ftadd@sign& (0+255),6,b
 24910  002836  D012               	goto	i1l7299
 24911                           
 24912                           ; BSR set to: 0
 24913  002838  0EFF               	movlw	255
 24914  00283A  0100               	movlb	0	; () banked
 24915  00283C  1B6B               	xorwf	i1___ftadd@f2& (0+255),f,b
 24916  00283E  0EFF               	movlw	255
 24917  002840  0100               	movlb	0	; () banked
 24918  002842  1B6C               	xorwf	(i1___ftadd@f2+1)& (0+255),f,b
 24919  002844  0EFF               	movlw	255
 24920  002846  0100               	movlb	0	; () banked
 24921  002848  1B6D               	xorwf	(i1___ftadd@f2+2)& (0+255),f,b
 24922  00284A  0E01               	movlw	1
 24923  00284C  0100               	movlb	0	; () banked
 24924  00284E  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 24925  002850  0E00               	movlw	0
 24926  002852  0100               	movlb	0	; () banked
 24927  002854  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 24928  002856  0E00               	movlw	0
 24929  002858  0100               	movlb	0	; () banked
 24930  00285A  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 24931  00285C                     i1l7299:
 24932                           
 24933                           ; BSR set to: 0
 24934  00285C  0E00               	movlw	0
 24935  00285E  0100               	movlb	0	; () banked
 24936  002860  6F71               	movwf	i1___ftadd@sign& (0+255),b
 24937                           
 24938                           ; BSR set to: 0
 24939  002862  0100               	movlb	0	; () banked
 24940  002864  5168               	movf	i1___ftadd@f1& (0+255),w,b
 24941  002866  0100               	movlb	0	; () banked
 24942  002868  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 24943  00286A  0100               	movlb	0	; () banked
 24944  00286C  5169               	movf	(i1___ftadd@f1+1)& (0+255),w,b
 24945  00286E  0100               	movlb	0	; () banked
 24946  002870  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 24947  002872  0100               	movlb	0	; () banked
 24948  002874  516A               	movf	(i1___ftadd@f1+2)& (0+255),w,b
 24949  002876  0100               	movlb	0	; () banked
 24950  002878  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 24951                           
 24952                           ; BSR set to: 0
 24953  00287A  0100               	movlb	0	; () banked
 24954  00287C  AF6D               	btfss	(i1___ftadd@f2+2)& (0+255),7,b
 24955  00287E  D015               	goto	i1l7309
 24956                           
 24957                           ; BSR set to: 0
 24958  002880  0EFF               	movlw	255
 24959  002882  0100               	movlb	0	; () banked
 24960  002884  1B6B               	xorwf	i1___ftadd@f2& (0+255),f,b
 24961  002886  0EFF               	movlw	255
 24962  002888  0100               	movlb	0	; () banked
 24963  00288A  1B6C               	xorwf	(i1___ftadd@f2+1)& (0+255),f,b
 24964  00288C  0EFF               	movlw	255
 24965  00288E  0100               	movlb	0	; () banked
 24966  002890  1B6D               	xorwf	(i1___ftadd@f2+2)& (0+255),f,b
 24967  002892  0E01               	movlw	1
 24968  002894  0100               	movlb	0	; () banked
 24969  002896  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 24970  002898  0E00               	movlw	0
 24971  00289A  0100               	movlb	0	; () banked
 24972  00289C  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 24973  00289E  0E00               	movlw	0
 24974  0028A0  0100               	movlb	0	; () banked
 24975  0028A2  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 24976                           
 24977                           ; BSR set to: 0
 24978  0028A4  0E01               	movlw	1
 24979  0028A6  0100               	movlb	0	; () banked
 24980  0028A8  6F71               	movwf	i1___ftadd@sign& (0+255),b
 24981  0028AA                     i1l7309:
 24982                           
 24983                           ; BSR set to: 0
 24984  0028AA  C06B  F060         	movff	i1___ftadd@f2,i1___ftpack@arg
 24985  0028AE  C06C  F061         	movff	i1___ftadd@f2+1,i1___ftpack@arg+1
 24986  0028B2  C06D  F062         	movff	i1___ftadd@f2+2,i1___ftpack@arg+2
 24987  0028B6  C073  F063         	movff	i1___ftadd@exp1,i1___ftpack@exp
 24988  0028BA  C071  F064         	movff	i1___ftadd@sign,i1___ftpack@sign
 24989  0028BE  EC06  F022         	call	i1___ftpack	;wreg free
 24990  0028C2  C060  F068         	movff	?i1___ftpack,?i1___ftadd
 24991  0028C6  C061  F069         	movff	?i1___ftpack+1,?i1___ftadd+1
 24992  0028CA  C062  F06A         	movff	?i1___ftpack+2,?i1___ftadd+2
 24993  0028CE  0012               	return	
 24994  0028D0                     __end_ofi1___ftadd:
 24995                           	opt stack 0
 24996                           pclatu	equ	0xFFB
 24997                           pclath	equ	0xFFA
 24998                           tblptru	equ	0xFF8
 24999                           tblptrh	equ	0xFF7
 25000                           tblptrl	equ	0xFF6
 25001                           tablat	equ	0xFF5
 25002                           prodh	equ	0xFF4
 25003                           prodl	equ	0xFF3
 25004                           intcon	equ	0xFF2
 25005                           postinc0	equ	0xFEE
 25006                           fsr0h	equ	0xFEA
 25007                           fsr0l	equ	0xFE9
 25008                           wreg	equ	0xFE8
 25009                           postdec1	equ	0xFE5
 25010                           fsr1h	equ	0xFE2
 25011                           fsr1l	equ	0xFE1
 25012                           bsr	equ	0xFE0
 25013                           indf2	equ	0xFDF
 25014                           postinc2	equ	0xFDE
 25015                           postdec2	equ	0xFDD
 25016                           plusw2	equ	0xFDB
 25017                           fsr2h	equ	0xFDA
 25018                           fsr2l	equ	0xFD9
 25019                           status	equ	0xFD8
 25020                           
 25021 ;; *************** function i1_longPressDOWN *****************
 25022 ;; Defined at:
 25023 ;;		line 219 in file "source/DisplayProtocol.h"
 25024 ;; Parameters:    Size  Location     Type
 25025 ;;		None
 25026 ;; Auto vars:     Size  Location     Type
 25027 ;;		None
 25028 ;; Return value:  Size  Location     Type
 25029 ;;                  1    wreg      void 
 25030 ;; Registers used:
 25031 ;;		wreg, status,2, status,0
 25032 ;; Tracked objects:
 25033 ;;		On entry : 0/0
 25034 ;;		On exit  : 0/0
 25035 ;;		Unchanged: 0/0
 25036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25037 ;;      Params:         0       0       0       0       0       0       0
 25038 ;;      Locals:         0       0       0       0       0       0       0
 25039 ;;      Temps:          0       0       0       0       0       0       0
 25040 ;;      Totals:         0       0       0       0       0       0       0
 25041 ;;Total ram usage:        0 bytes
 25042 ;; Hardware stack levels used:    1
 25043 ;; Hardware stack levels required when called:    4
 25044 ;; This function calls:
 25045 ;;		Nothing
 25046 ;; This function is called by:
 25047 ;;		_UARTint
 25048 ;; This function uses a non-reentrant model
 25049 ;;
 25050                           
 25051                           	psect	text107
 25052  006BDC                     __ptext107:
 25053                           	opt stack 0
 25054  006BDC                     i1_longPressDOWN:
 25055                           	opt stack 14
 25056                           
 25057                           ;DisplayProtocol.h: 220: if (!DOWNisLP) {
 25058                           
 25059                           ;incstack = 0
 25060  006BDC  5045               	movf	_DOWNisLP,w,c
 25061  006BDE  A4D8               	btfss	status,2,c
 25062  006BE0  0012               	return	
 25063                           
 25064                           ;DisplayProtocol.h: 221: DOWNisLP = 1;
 25065  006BE2  0E01               	movlw	1
 25066  006BE4  6E45               	movwf	_DOWNisLP,c
 25067                           
 25068                           ;DisplayProtocol.h: 222: if(actualScreen == 5) {
 25069  006BE6  0E05               	movlw	5
 25070  006BE8  0101               	movlb	1	; () banked
 25071  006BEA  19C3               	xorwf	_actualScreen& (0+255),w,b
 25072  006BEC  A4D8               	btfss	status,2,c
 25073  006BEE  0012               	return	
 25074                           
 25075                           ; BSR set to: 1
 25076                           ;DisplayProtocol.h: 223: if(menuSection == 2)
 25077  006BF0  0E02               	movlw	2
 25078  006BF2  0101               	movlb	1	; () banked
 25079  006BF4  19CA               	xorwf	_menuSection& (0+255),w,b
 25080  006BF6  A4D8               	btfss	status,2,c
 25081  006BF8  0012               	return	
 25082                           
 25083                           ; BSR set to: 1
 25084                           ;DisplayProtocol.h: 224: chanVals -= 10;
 25085  006BFA  0101               	movlb	1	; () banked
 25086  006BFC  0EF6               	movlw	246
 25087  006BFE  27BA               	addwf	_chanVals& (0+255),f,b
 25088  006C00  0EFF               	movlw	255
 25089  006C02  23BB               	addwfc	(_chanVals+1)& (0+255),f,b
 25090                           
 25091                           ; BSR set to: 1
 25092                           
 25093                           ; BSR set to: 1
 25094  006C04  0012               	return	
 25095  006C06                     __end_ofi1_longPressDOWN:
 25096                           	opt stack 0
 25097                           pclatu	equ	0xFFB
 25098                           pclath	equ	0xFFA
 25099                           tblptru	equ	0xFF8
 25100                           tblptrh	equ	0xFF7
 25101                           tblptrl	equ	0xFF6
 25102                           tablat	equ	0xFF5
 25103                           prodh	equ	0xFF4
 25104                           prodl	equ	0xFF3
 25105                           intcon	equ	0xFF2
 25106                           postinc0	equ	0xFEE
 25107                           fsr0h	equ	0xFEA
 25108                           fsr0l	equ	0xFE9
 25109                           wreg	equ	0xFE8
 25110                           postdec1	equ	0xFE5
 25111                           fsr1h	equ	0xFE2
 25112                           fsr1l	equ	0xFE1
 25113                           bsr	equ	0xFE0
 25114                           indf2	equ	0xFDF
 25115                           postinc2	equ	0xFDE
 25116                           postdec2	equ	0xFDD
 25117                           plusw2	equ	0xFDB
 25118                           fsr2h	equ	0xFDA
 25119                           fsr2l	equ	0xFD9
 25120                           status	equ	0xFD8
 25121                           
 25122 ;; *************** function _putchUART *****************
 25123 ;; Defined at:
 25124 ;;		line 63 in file "source/IOConfig.h"
 25125 ;; Parameters:    Size  Location     Type
 25126 ;;  val             1    wreg     unsigned char 
 25127 ;; Auto vars:     Size  Location     Type
 25128 ;;  val             1    0[BANK0 ] unsigned char 
 25129 ;; Return value:  Size  Location     Type
 25130 ;;                  1    wreg      void 
 25131 ;; Registers used:
 25132 ;;		wreg
 25133 ;; Tracked objects:
 25134 ;;		On entry : 0/0
 25135 ;;		On exit  : 0/0
 25136 ;;		Unchanged: 0/0
 25137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25138 ;;      Params:         0       0       0       0       0       0       0
 25139 ;;      Locals:         0       1       0       0       0       0       0
 25140 ;;      Temps:          0       0       0       0       0       0       0
 25141 ;;      Totals:         0       1       0       0       0       0       0
 25142 ;;Total ram usage:        1 bytes
 25143 ;; Hardware stack levels used:    1
 25144 ;; Hardware stack levels required when called:    4
 25145 ;; This function calls:
 25146 ;;		Nothing
 25147 ;; This function is called by:
 25148 ;;		_UARTint
 25149 ;; This function uses a non-reentrant model
 25150 ;;
 25151                           
 25152                           	psect	text108
 25153  006D2C                     __ptext108:
 25154                           	opt stack 0
 25155  006D2C                     _putchUART:
 25156                           	opt stack 14
 25157                           
 25158                           ;incstack = 0
 25159                           ;putchUART@val stored from wreg
 25160  006D2C  0100               	movlb	0	; () banked
 25161  006D2E  6F60               	movwf	putchUART@val& (0+255),b
 25162  006D30                     i1l227:
 25163  006D30  A2AC               	btfss	4012,1,c	;volatile
 25164  006D32  D7FE               	goto	i1l227
 25165                           
 25166                           ;IOConfig.h: 65: TXREG1 = val;
 25167  006D34  C060  FFAD         	movff	putchUART@val,4013	;volatile
 25168  006D38  0012               	return		;funcret
 25169  006D3A                     __end_of_putchUART:
 25170                           	opt stack 0
 25171                           pclatu	equ	0xFFB
 25172                           pclath	equ	0xFFA
 25173                           tblptru	equ	0xFF8
 25174                           tblptrh	equ	0xFF7
 25175                           tblptrl	equ	0xFF6
 25176                           tablat	equ	0xFF5
 25177                           prodh	equ	0xFF4
 25178                           prodl	equ	0xFF3
 25179                           intcon	equ	0xFF2
 25180                           postinc0	equ	0xFEE
 25181                           fsr0h	equ	0xFEA
 25182                           fsr0l	equ	0xFE9
 25183                           wreg	equ	0xFE8
 25184                           postdec1	equ	0xFE5
 25185                           fsr1h	equ	0xFE2
 25186                           fsr1l	equ	0xFE1
 25187                           bsr	equ	0xFE0
 25188                           indf2	equ	0xFDF
 25189                           postinc2	equ	0xFDE
 25190                           postdec2	equ	0xFDD
 25191                           plusw2	equ	0xFDB
 25192                           fsr2h	equ	0xFDA
 25193                           fsr2l	equ	0xFD9
 25194                           status	equ	0xFD8
 25195                           
 25196 ;; *************** function _loadSysParams *****************
 25197 ;; Defined at:
 25198 ;;		line 144 in file "source/sysParams.h"
 25199 ;; Parameters:    Size  Location     Type
 25200 ;;		None
 25201 ;; Auto vars:     Size  Location     Type
 25202 ;;		None
 25203 ;; Return value:  Size  Location     Type
 25204 ;;                  1    wreg      void 
 25205 ;; Registers used:
 25206 ;;		wreg, status,2, status,0, cstack
 25207 ;; Tracked objects:
 25208 ;;		On entry : 0/0
 25209 ;;		On exit  : 0/0
 25210 ;;		Unchanged: 0/0
 25211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25212 ;;      Params:         0       0       0       0       0       0       0
 25213 ;;      Locals:         0       0       0       0       0       0       0
 25214 ;;      Temps:          0       0       0       0       0       0       0
 25215 ;;      Totals:         0       0       0       0       0       0       0
 25216 ;;Total ram usage:        0 bytes
 25217 ;; Hardware stack levels used:    1
 25218 ;; Hardware stack levels required when called:    8
 25219 ;; This function calls:
 25220 ;;		i1_calcSysVars
 25221 ;;		i1_saveSysParams
 25222 ;; This function is called by:
 25223 ;;		_UARTint
 25224 ;; This function uses a non-reentrant model
 25225 ;;
 25226                           
 25227                           	psect	text109
 25228  00675C                     __ptext109:
 25229                           	opt stack 0
 25230  00675C                     _loadSysParams:
 25231                           	opt stack 10
 25232                           
 25233                           ;sysParams.h: 145: tiXcorte = 0.5f;
 25234                           
 25235                           ;incstack = 0
 25236  00675C  0E00               	movlw	0
 25237  00675E  0101               	movlb	1	; () banked
 25238  006760  6F95               	movwf	_tiXcorte& (0+255),b
 25239  006762  0E00               	movlw	0
 25240  006764  0101               	movlb	1	; () banked
 25241  006766  6F96               	movwf	(_tiXcorte+1)& (0+255),b
 25242  006768  0E3F               	movlw	63
 25243  00676A  0101               	movlb	1	; () banked
 25244  00676C  6F97               	movwf	(_tiXcorte+2)& (0+255),b
 25245                           
 25246                           ;sysParams.h: 146: numCortes = 20;
 25247  00676E  0E00               	movlw	0
 25248  006770  0100               	movlb	0	; () banked
 25249  006772  6FC7               	movwf	(_numCortes+1)& (0+255),b
 25250  006774  0E14               	movlw	20
 25251  006776  6FC6               	movwf	_numCortes& (0+255),b
 25252                           
 25253                           ;sysParams.h: 148: velocidadMasa = 1.0f;
 25254  006778  0E00               	movlw	0
 25255  00677A  0101               	movlb	1	; () banked
 25256  00677C  6F98               	movwf	_velocidadMasa& (0+255),b
 25257  00677E  0E80               	movlw	128
 25258  006780  0101               	movlb	1	; () banked
 25259  006782  6F99               	movwf	(_velocidadMasa+1)& (0+255),b
 25260  006784  0E3F               	movlw	63
 25261  006786  0101               	movlb	1	; () banked
 25262  006788  6F9A               	movwf	(_velocidadMasa+2)& (0+255),b
 25263                           
 25264                           ;sysParams.h: 149: processState = 0;
 25265  00678A  0E00               	movlw	0
 25266  00678C  0100               	movlb	0	; () banked
 25267  00678E  6FB5               	movwf	(_processState+1)& (0+255),b
 25268  006790  0E00               	movlw	0
 25269  006792  6FB4               	movwf	_processState& (0+255),b
 25270                           
 25271                           ;sysParams.h: 150: processStarted = 0;
 25272  006794  0E00               	movlw	0
 25273  006796  0100               	movlb	0	; () banked
 25274  006798  6FBB               	movwf	_processStarted& (0+255),b
 25275                           
 25276                           ; BSR set to: 0
 25277                           ;sysParams.h: 151: calcSysVars();
 25278  00679A  EC22  F032         	call	i1_calcSysVars	;wreg free
 25279                           
 25280                           ;sysParams.h: 152: saveSysParams();
 25281  00679E  ECAD  F02D         	call	i1_saveSysParams	;wreg free
 25282  0067A2  0012               	return		;funcret
 25283  0067A4                     __end_of_loadSysParams:
 25284                           	opt stack 0
 25285                           pclatu	equ	0xFFB
 25286                           pclath	equ	0xFFA
 25287                           tblptru	equ	0xFF8
 25288                           tblptrh	equ	0xFF7
 25289                           tblptrl	equ	0xFF6
 25290                           tablat	equ	0xFF5
 25291                           prodh	equ	0xFF4
 25292                           prodl	equ	0xFF3
 25293                           intcon	equ	0xFF2
 25294                           postinc0	equ	0xFEE
 25295                           fsr0h	equ	0xFEA
 25296                           fsr0l	equ	0xFE9
 25297                           wreg	equ	0xFE8
 25298                           postdec1	equ	0xFE5
 25299                           fsr1h	equ	0xFE2
 25300                           fsr1l	equ	0xFE1
 25301                           bsr	equ	0xFE0
 25302                           indf2	equ	0xFDF
 25303                           postinc2	equ	0xFDE
 25304                           postdec2	equ	0xFDD
 25305                           plusw2	equ	0xFDB
 25306                           fsr2h	equ	0xFDA
 25307                           fsr2l	equ	0xFD9
 25308                           status	equ	0xFD8
 25309                           
 25310 ;; *************** function i1_saveSysParams *****************
 25311 ;; Defined at:
 25312 ;;		line 111 in file "source/sysParams.h"
 25313 ;; Parameters:    Size  Location     Type
 25314 ;;		None
 25315 ;; Auto vars:     Size  Location     Type
 25316 ;;		None
 25317 ;; Return value:  Size  Location     Type
 25318 ;;                  1    wreg      void 
 25319 ;; Registers used:
 25320 ;;		wreg, status,2, status,0, cstack
 25321 ;; Tracked objects:
 25322 ;;		On entry : 0/0
 25323 ;;		On exit  : 0/0
 25324 ;;		Unchanged: 0/0
 25325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25326 ;;      Params:         0       0       0       0       0       0       0
 25327 ;;      Locals:         0       0       0       0       0       0       0
 25328 ;;      Temps:          0       0       0       0       0       0       0
 25329 ;;      Totals:         0       0       0       0       0       0       0
 25330 ;;Total ram usage:        0 bytes
 25331 ;; Hardware stack levels used:    1
 25332 ;; Hardware stack levels required when called:    7
 25333 ;; This function calls:
 25334 ;;		i1_calcVars2ti
 25335 ;;		i1_writeEEPROM
 25336 ;; This function is called by:
 25337 ;;		_loadSysParams
 25338 ;;		_UARTint
 25339 ;;		i1_confirmEdition
 25340 ;; This function uses a non-reentrant model
 25341 ;;
 25342                           
 25343                           	psect	text110
 25344  005B5A                     __ptext110:
 25345                           	opt stack 0
 25346  005B5A                     i1_saveSysParams:
 25347                           	opt stack 11
 25348                           
 25349                           ;sysParams.h: 112: calcVars2ti();
 25350                           
 25351                           ;incstack = 0
 25352  005B5A  EC10  F033         	call	i1_calcVars2ti	;wreg free
 25353                           
 25354                           ;sysParams.h: 113: EECON1bits.WREN = 1;
 25355  005B5E  84A6               	bsf	4006,2,c	;volatile
 25356                           
 25357                           ;sysParams.h: 114: ie = INTCONbits.GIE;
 25358  005B60  0E00               	movlw	0
 25359  005B62  BEF2               	btfsc	intcon,7,c	;volatile
 25360  005B64  0E01               	movlw	1
 25361  005B66  0100               	movlb	0	; () banked
 25362  005B68  6FB8               	movwf	_ie& (0+255),b
 25363                           
 25364                           ; BSR set to: 0
 25365                           ;sysParams.h: 115: INTCONbits.GIE = 0;
 25366  005B6A  9EF2               	bcf	intcon,7,c	;volatile
 25367                           
 25368                           ; BSR set to: 0
 25369                           ;sysParams.h: 117: fData.floatdat = tiXcorte;
 25370  005B6C  C195  F0AF         	movff	_tiXcorte,_fData
 25371  005B70  C196  F0B0         	movff	_tiXcorte+1,_fData+1
 25372  005B74  C197  F0B1         	movff	_tiXcorte+2,_fData+2
 25373                           
 25374                           ; BSR set to: 0
 25375                           ;sysParams.h: 119: writeEEPROM(3, fData.floatUB);
 25376  005B78  C0B1  F060         	movff	_fData+2,i1writeEEPROM@data
 25377  005B7C  0E03               	movlw	3
 25378  005B7E  EC26  F036         	call	i1_writeEEPROM
 25379                           
 25380                           ;sysParams.h: 120: writeEEPROM(4, fData.floatHB);
 25381  005B82  C0B0  F060         	movff	_fData+1,i1writeEEPROM@data
 25382  005B86  0E04               	movlw	4
 25383  005B88  EC26  F036         	call	i1_writeEEPROM
 25384                           
 25385                           ;sysParams.h: 121: writeEEPROM(5, fData.floatLB);
 25386  005B8C  C0AF  F060         	movff	_fData,i1writeEEPROM@data
 25387  005B90  0E05               	movlw	5
 25388  005B92  EC26  F036         	call	i1_writeEEPROM
 25389                           
 25390                           ;sysParams.h: 122: i16Data.int16dat = numCortes;
 25391  005B96  C0C6  F0B2         	movff	_numCortes,_i16Data
 25392  005B9A  C0C7  F0B3         	movff	_numCortes+1,_i16Data+1
 25393                           
 25394                           ;sysParams.h: 123: writeEEPROM(6, i16Data.int16HB);
 25395  005B9E  C0B3  F060         	movff	_i16Data+1,i1writeEEPROM@data
 25396  005BA2  0E06               	movlw	6
 25397  005BA4  EC26  F036         	call	i1_writeEEPROM
 25398                           
 25399                           ;sysParams.h: 124: writeEEPROM(7, i16Data.int16LB);
 25400  005BA8  C0B2  F060         	movff	_i16Data,i1writeEEPROM@data
 25401  005BAC  0E07               	movlw	7
 25402  005BAE  EC26  F036         	call	i1_writeEEPROM
 25403                           
 25404                           ;sysParams.h: 135: fData.floatdat = velocidadMasa;
 25405  005BB2  C198  F0AF         	movff	_velocidadMasa,_fData
 25406  005BB6  C199  F0B0         	movff	_velocidadMasa+1,_fData+1
 25407  005BBA  C19A  F0B1         	movff	_velocidadMasa+2,_fData+2
 25408                           
 25409                           ;sysParams.h: 137: writeEEPROM(17, fData.floatUB);
 25410  005BBE  C0B1  F060         	movff	_fData+2,i1writeEEPROM@data
 25411  005BC2  0E11               	movlw	17
 25412  005BC4  EC26  F036         	call	i1_writeEEPROM
 25413                           
 25414                           ;sysParams.h: 138: writeEEPROM(18, fData.floatHB);
 25415  005BC8  C0B0  F060         	movff	_fData+1,i1writeEEPROM@data
 25416  005BCC  0E12               	movlw	18
 25417  005BCE  EC26  F036         	call	i1_writeEEPROM
 25418                           
 25419                           ;sysParams.h: 139: writeEEPROM(19, fData.floatLB);
 25420  005BD2  C0AF  F060         	movff	_fData,i1writeEEPROM@data
 25421  005BD6  0E13               	movlw	19
 25422  005BD8  EC26  F036         	call	i1_writeEEPROM
 25423                           
 25424                           ;sysParams.h: 140: EECON1bits.WREN = 0;
 25425  005BDC  94A6               	bcf	4006,2,c	;volatile
 25426                           
 25427                           ;sysParams.h: 141: INTCONbits.GIE = ie;
 25428  005BDE  0100               	movlb	0	; () banked
 25429  005BE0  B1B8               	btfsc	_ie& (0+255),0,b
 25430  005BE2  D002               	bra	i1u870_25
 25431  005BE4  9EF2               	bcf	intcon,7,c	;volatile
 25432  005BE6  D001               	bra	i1u870_26
 25433  005BE8                     i1u870_25:
 25434  005BE8  8EF2               	bsf	intcon,7,c	;volatile
 25435  005BEA                     i1u870_26:
 25436  005BEA  0012               	return		;funcret
 25437  005BEC                     __end_ofi1_saveSysParams:
 25438                           	opt stack 0
 25439                           pclatu	equ	0xFFB
 25440                           pclath	equ	0xFFA
 25441                           tblptru	equ	0xFF8
 25442                           tblptrh	equ	0xFF7
 25443                           tblptrl	equ	0xFF6
 25444                           tablat	equ	0xFF5
 25445                           prodh	equ	0xFF4
 25446                           prodl	equ	0xFF3
 25447                           intcon	equ	0xFF2
 25448                           postinc0	equ	0xFEE
 25449                           fsr0h	equ	0xFEA
 25450                           fsr0l	equ	0xFE9
 25451                           wreg	equ	0xFE8
 25452                           postdec1	equ	0xFE5
 25453                           fsr1h	equ	0xFE2
 25454                           fsr1l	equ	0xFE1
 25455                           bsr	equ	0xFE0
 25456                           indf2	equ	0xFDF
 25457                           postinc2	equ	0xFDE
 25458                           postdec2	equ	0xFDD
 25459                           plusw2	equ	0xFDB
 25460                           fsr2h	equ	0xFDA
 25461                           fsr2l	equ	0xFD9
 25462                           status	equ	0xFD8
 25463                           
 25464 ;; *************** function i1_calcVars2ti *****************
 25465 ;; Defined at:
 25466 ;;		line 87 in file "source/sysParams.h"
 25467 ;; Parameters:    Size  Location     Type
 25468 ;;		None
 25469 ;; Auto vars:     Size  Location     Type
 25470 ;;		None
 25471 ;; Return value:  Size  Location     Type
 25472 ;;                  1    wreg      void 
 25473 ;; Registers used:
 25474 ;;		wreg, status,2, status,0, cstack
 25475 ;; Tracked objects:
 25476 ;;		On entry : 0/0
 25477 ;;		On exit  : 0/0
 25478 ;;		Unchanged: 0/0
 25479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25480 ;;      Params:         0       0       0       0       0       0       0
 25481 ;;      Locals:         0       0       0       0       0       0       0
 25482 ;;      Temps:          0       0       0       0       0       0       0
 25483 ;;      Totals:         0       0       0       0       0       0       0
 25484 ;;Total ram usage:        0 bytes
 25485 ;; Hardware stack levels used:    1
 25486 ;; Hardware stack levels required when called:    6
 25487 ;; This function calls:
 25488 ;;		i1___ftdiv
 25489 ;;		i1___ftmul
 25490 ;; This function is called by:
 25491 ;;		i1_saveSysParams
 25492 ;;		i1_longPressENTER
 25493 ;; This function uses a non-reentrant model
 25494 ;;
 25495                           
 25496                           	psect	text111
 25497  006620                     __ptext111:
 25498                           	opt stack 0
 25499  006620                     i1_calcVars2ti:
 25500                           	opt stack 11
 25501                           
 25502                           ;sysParams.h: 95: tiXcorte = (float)kgXcorte / velocidadMasa;
 25503                           
 25504                           ;incstack = 0
 25505  006620  C18F  F072         	movff	_kgXcorte,i1___ftdiv@f1
 25506  006624  C190  F073         	movff	_kgXcorte+1,i1___ftdiv@f1+1
 25507  006628  C191  F074         	movff	_kgXcorte+2,i1___ftdiv@f1+2
 25508  00662C  C198  F075         	movff	_velocidadMasa,i1___ftdiv@f2
 25509  006630  C199  F076         	movff	_velocidadMasa+1,i1___ftdiv@f2+1
 25510  006634  C19A  F077         	movff	_velocidadMasa+2,i1___ftdiv@f2+2
 25511  006638  ECD0  F01C         	call	i1___ftdiv	;wreg free
 25512  00663C  C072  F195         	movff	?i1___ftdiv,_tiXcorte
 25513  006640  C073  F196         	movff	?i1___ftdiv+1,_tiXcorte+1
 25514  006644  C074  F197         	movff	?i1___ftdiv+2,_tiXcorte+2
 25515                           
 25516                           ;sysParams.h: 96: timsXcorte = (float)tiXcorte * 1000;
 25517  006648  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 25518  00664C  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 25519  006650  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 25520  006654  0E00               	movlw	0
 25521  006656  0100               	movlb	0	; () banked
 25522  006658  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 25523  00665A  0E7A               	movlw	122
 25524  00665C  0100               	movlb	0	; () banked
 25525  00665E  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 25526  006660  0E44               	movlw	68
 25527  006662  0100               	movlb	0	; () banked
 25528  006664  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 25529  006666  EC7B  F01B         	call	i1___ftmul	;wreg free
 25530  00666A  C068  F05A         	movff	?i1___ftmul,_timsXcorte
 25531  00666E  C069  F05B         	movff	?i1___ftmul+1,_timsXcorte+1
 25532  006672  C06A  F05C         	movff	?i1___ftmul+2,_timsXcorte+2
 25533  006676  0012               	return		;funcret
 25534  006678                     __end_ofi1_calcVars2ti:
 25535                           	opt stack 0
 25536                           pclatu	equ	0xFFB
 25537                           pclath	equ	0xFFA
 25538                           tblptru	equ	0xFF8
 25539                           tblptrh	equ	0xFF7
 25540                           tblptrl	equ	0xFF6
 25541                           tablat	equ	0xFF5
 25542                           prodh	equ	0xFF4
 25543                           prodl	equ	0xFF3
 25544                           intcon	equ	0xFF2
 25545                           postinc0	equ	0xFEE
 25546                           fsr0h	equ	0xFEA
 25547                           fsr0l	equ	0xFE9
 25548                           wreg	equ	0xFE8
 25549                           postdec1	equ	0xFE5
 25550                           fsr1h	equ	0xFE2
 25551                           fsr1l	equ	0xFE1
 25552                           bsr	equ	0xFE0
 25553                           indf2	equ	0xFDF
 25554                           postinc2	equ	0xFDE
 25555                           postdec2	equ	0xFDD
 25556                           plusw2	equ	0xFDB
 25557                           fsr2h	equ	0xFDA
 25558                           fsr2l	equ	0xFD9
 25559                           status	equ	0xFD8
 25560                           
 25561 ;; *************** function i1___ftdiv *****************
 25562 ;; Defined at:
 25563 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 25564 ;; Parameters:    Size  Location     Type
 25565 ;;  f1              3   18[BANK0 ] float 
 25566 ;;  f2              3   21[BANK0 ] float 
 25567 ;; Auto vars:     Size  Location     Type
 25568 ;;  __ftdiv         3   28[BANK0 ] float 
 25569 ;;  __ftdiv         1   32[BANK0 ] unsigned char 
 25570 ;;  __ftdiv         1   31[BANK0 ] unsigned char 
 25571 ;;  __ftdiv         1   27[BANK0 ] unsigned char 
 25572 ;; Return value:  Size  Location     Type
 25573 ;;                  3   18[BANK0 ] float 
 25574 ;; Registers used:
 25575 ;;		wreg, status,2, status,0, cstack
 25576 ;; Tracked objects:
 25577 ;;		On entry : 0/0
 25578 ;;		On exit  : 0/0
 25579 ;;		Unchanged: 0/0
 25580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25581 ;;      Params:         0       6       0       0       0       0       0
 25582 ;;      Locals:         0       6       0       0       0       0       0
 25583 ;;      Temps:          0       3       0       0       0       0       0
 25584 ;;      Totals:         0      15       0       0       0       0       0
 25585 ;;Total ram usage:       15 bytes
 25586 ;; Hardware stack levels used:    1
 25587 ;; Hardware stack levels required when called:    5
 25588 ;; This function calls:
 25589 ;;		i1___ftpack
 25590 ;; This function is called by:
 25591 ;;		i1_calcVars2ti
 25592 ;;		i1_integrator
 25593 ;;		i1_longPressENTER
 25594 ;; This function uses a non-reentrant model
 25595 ;;
 25596                           
 25597                           	psect	text112
 25598  0039A0                     __ptext112:
 25599                           	opt stack 0
 25600  0039A0                     i1___ftdiv:
 25601                           	opt stack 11
 25602                           
 25603                           ;incstack = 0
 25604  0039A0  C074  F078         	movff	i1___ftdiv@f1+2,??i1___ftdiv
 25605  0039A4  0100               	movlb	0	; () banked
 25606  0039A6  6B79               	clrf	(??i1___ftdiv+1)& (0+255),b
 25607  0039A8  6B7A               	clrf	(??i1___ftdiv+2)& (0+255),b
 25608  0039AA  0100               	movlb	0	; () banked
 25609  0039AC  3573               	rlcf	(i1___ftdiv@f1+1)& (0+255),w,b
 25610  0039AE  0100               	movlb	0	; () banked
 25611  0039B0  3778               	rlcf	??i1___ftdiv& (0+255),f,b
 25612  0039B2  E301               	bnc	u743_21
 25613  0039B4  8179               	bsf	(??i1___ftdiv+1)& (0+255),0,b
 25614  0039B6                     u743_21:
 25615  0039B6  0100               	movlb	0	; () banked
 25616  0039B8  5178               	movf	??i1___ftdiv& (0+255),w,b
 25617  0039BA  0100               	movlb	0	; () banked
 25618  0039BC  6F7F               	movwf	i1___ftdiv@exp& (0+255),b
 25619  0039BE  0100               	movlb	0	; () banked
 25620  0039C0  517F               	movf	i1___ftdiv@exp& (0+255),w,b
 25621  0039C2  A4D8               	btfss	status,2,c
 25622  0039C4  D00A               	goto	i1l5873
 25623                           
 25624                           ; BSR set to: 0
 25625  0039C6  0E00               	movlw	0
 25626  0039C8  0100               	movlb	0	; () banked
 25627  0039CA  6F72               	movwf	?i1___ftdiv& (0+255),b
 25628  0039CC  0E00               	movlw	0
 25629  0039CE  0100               	movlb	0	; () banked
 25630  0039D0  6F73               	movwf	(?i1___ftdiv+1)& (0+255),b
 25631  0039D2  0E00               	movlw	0
 25632  0039D4  0100               	movlb	0	; () banked
 25633  0039D6  6F74               	movwf	(?i1___ftdiv+2)& (0+255),b
 25634                           
 25635                           ; BSR set to: 0
 25636  0039D8  0012               	return	
 25637  0039DA                     i1l5873:
 25638                           
 25639                           ; BSR set to: 0
 25640  0039DA  C077  F078         	movff	i1___ftdiv@f2+2,??i1___ftdiv
 25641  0039DE  0100               	movlb	0	; () banked
 25642  0039E0  6B79               	clrf	(??i1___ftdiv+1)& (0+255),b
 25643  0039E2  6B7A               	clrf	(??i1___ftdiv+2)& (0+255),b
 25644  0039E4  0100               	movlb	0	; () banked
 25645  0039E6  3576               	rlcf	(i1___ftdiv@f2+1)& (0+255),w,b
 25646  0039E8  0100               	movlb	0	; () banked
 25647  0039EA  3778               	rlcf	??i1___ftdiv& (0+255),f,b
 25648  0039EC  E301               	bnc	u745_21
 25649  0039EE  8179               	bsf	(??i1___ftdiv+1)& (0+255),0,b
 25650  0039F0                     u745_21:
 25651  0039F0  0100               	movlb	0	; () banked
 25652  0039F2  5178               	movf	??i1___ftdiv& (0+255),w,b
 25653  0039F4  0100               	movlb	0	; () banked
 25654  0039F6  6F80               	movwf	i1___ftdiv@sign& (0+255),b
 25655  0039F8  0100               	movlb	0	; () banked
 25656  0039FA  5180               	movf	i1___ftdiv@sign& (0+255),w,b
 25657  0039FC  A4D8               	btfss	status,2,c
 25658  0039FE  D00A               	goto	i1l5879
 25659                           
 25660                           ; BSR set to: 0
 25661  003A00  0E00               	movlw	0
 25662  003A02  0100               	movlb	0	; () banked
 25663  003A04  6F72               	movwf	?i1___ftdiv& (0+255),b
 25664  003A06  0E00               	movlw	0
 25665  003A08  0100               	movlb	0	; () banked
 25666  003A0A  6F73               	movwf	(?i1___ftdiv+1)& (0+255),b
 25667  003A0C  0E00               	movlw	0
 25668  003A0E  0100               	movlb	0	; () banked
 25669  003A10  6F74               	movwf	(?i1___ftdiv+2)& (0+255),b
 25670                           
 25671                           ; BSR set to: 0
 25672  003A12  0012               	return	
 25673  003A14                     i1l5879:
 25674                           
 25675                           ; BSR set to: 0
 25676  003A14  0E00               	movlw	0
 25677  003A16  0100               	movlb	0	; () banked
 25678  003A18  6F7C               	movwf	i1___ftdiv@f3& (0+255),b
 25679  003A1A  0E00               	movlw	0
 25680  003A1C  0100               	movlb	0	; () banked
 25681  003A1E  6F7D               	movwf	(i1___ftdiv@f3+1)& (0+255),b
 25682  003A20  0E00               	movlw	0
 25683  003A22  0100               	movlb	0	; () banked
 25684  003A24  6F7E               	movwf	(i1___ftdiv@f3+2)& (0+255),b
 25685                           
 25686                           ; BSR set to: 0
 25687  003A26  0100               	movlb	0	; () banked
 25688  003A28  5180               	movf	i1___ftdiv@sign& (0+255),w,b
 25689  003A2A  0F89               	addlw	137
 25690  003A2C  0100               	movlb	0	; () banked
 25691  003A2E  5F7F               	subwf	i1___ftdiv@exp& (0+255),f,b
 25692                           
 25693                           ; BSR set to: 0
 25694  003A30  C074  F080         	movff	i1___ftdiv@f1+2,i1___ftdiv@sign
 25695                           
 25696                           ; BSR set to: 0
 25697  003A34  0100               	movlb	0	; () banked
 25698  003A36  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 25699  003A38  0100               	movlb	0	; () banked
 25700  003A3A  1B80               	xorwf	i1___ftdiv@sign& (0+255),f,b
 25701                           
 25702                           ; BSR set to: 0
 25703  003A3C  0E80               	movlw	128
 25704  003A3E  0100               	movlb	0	; () banked
 25705  003A40  1780               	andwf	i1___ftdiv@sign& (0+255),f,b
 25706                           
 25707                           ; BSR set to: 0
 25708  003A42  0100               	movlb	0	; () banked
 25709  003A44  8F73               	bsf	(i1___ftdiv@f1+1)& (0+255),7,b
 25710                           
 25711                           ; BSR set to: 0
 25712  003A46  0EFF               	movlw	255
 25713  003A48  0100               	movlb	0	; () banked
 25714  003A4A  1772               	andwf	i1___ftdiv@f1& (0+255),f,b
 25715  003A4C  0EFF               	movlw	255
 25716  003A4E  0100               	movlb	0	; () banked
 25717  003A50  1773               	andwf	(i1___ftdiv@f1+1)& (0+255),f,b
 25718  003A52  0E00               	movlw	0
 25719  003A54  0100               	movlb	0	; () banked
 25720  003A56  1774               	andwf	(i1___ftdiv@f1+2)& (0+255),f,b
 25721                           
 25722                           ; BSR set to: 0
 25723  003A58  0100               	movlb	0	; () banked
 25724  003A5A  8F76               	bsf	(i1___ftdiv@f2+1)& (0+255),7,b
 25725                           
 25726                           ; BSR set to: 0
 25727  003A5C  0EFF               	movlw	255
 25728  003A5E  0100               	movlb	0	; () banked
 25729  003A60  1775               	andwf	i1___ftdiv@f2& (0+255),f,b
 25730  003A62  0EFF               	movlw	255
 25731  003A64  0100               	movlb	0	; () banked
 25732  003A66  1776               	andwf	(i1___ftdiv@f2+1)& (0+255),f,b
 25733  003A68  0E00               	movlw	0
 25734  003A6A  0100               	movlb	0	; () banked
 25735  003A6C  1777               	andwf	(i1___ftdiv@f2+2)& (0+255),f,b
 25736                           
 25737                           ; BSR set to: 0
 25738  003A6E  0E18               	movlw	24
 25739  003A70  0100               	movlb	0	; () banked
 25740  003A72  6F7B               	movwf	i1___ftdiv@cntr& (0+255),b
 25741  003A74                     i1l5899:
 25742                           
 25743                           ; BSR set to: 0
 25744  003A74  0100               	movlb	0	; () banked
 25745  003A76  90D8               	bcf	status,0,c
 25746  003A78  377C               	rlcf	i1___ftdiv@f3& (0+255),f,b
 25747  003A7A  377D               	rlcf	(i1___ftdiv@f3+1)& (0+255),f,b
 25748  003A7C  377E               	rlcf	(i1___ftdiv@f3+2)& (0+255),f,b
 25749                           
 25750                           ; BSR set to: 0
 25751  003A7E  0100               	movlb	0	; () banked
 25752  003A80  5175               	movf	i1___ftdiv@f2& (0+255),w,b
 25753  003A82  0100               	movlb	0	; () banked
 25754  003A84  5D72               	subwf	i1___ftdiv@f1& (0+255),w,b
 25755  003A86  0100               	movlb	0	; () banked
 25756  003A88  5176               	movf	(i1___ftdiv@f2+1)& (0+255),w,b
 25757  003A8A  0100               	movlb	0	; () banked
 25758  003A8C  5973               	subwfb	(i1___ftdiv@f1+1)& (0+255),w,b
 25759  003A8E  0100               	movlb	0	; () banked
 25760  003A90  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 25761  003A92  0100               	movlb	0	; () banked
 25762  003A94  5974               	subwfb	(i1___ftdiv@f1+2)& (0+255),w,b
 25763  003A96  A0D8               	btfss	status,0,c
 25764  003A98  D00E               	goto	i1l1342
 25765                           
 25766                           ; BSR set to: 0
 25767  003A9A  0100               	movlb	0	; () banked
 25768  003A9C  5175               	movf	i1___ftdiv@f2& (0+255),w,b
 25769  003A9E  0100               	movlb	0	; () banked
 25770  003AA0  5F72               	subwf	i1___ftdiv@f1& (0+255),f,b
 25771  003AA2  0100               	movlb	0	; () banked
 25772  003AA4  5176               	movf	(i1___ftdiv@f2+1)& (0+255),w,b
 25773  003AA6  0100               	movlb	0	; () banked
 25774  003AA8  5B73               	subwfb	(i1___ftdiv@f1+1)& (0+255),f,b
 25775  003AAA  0100               	movlb	0	; () banked
 25776  003AAC  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 25777  003AAE  0100               	movlb	0	; () banked
 25778  003AB0  5B74               	subwfb	(i1___ftdiv@f1+2)& (0+255),f,b
 25779                           
 25780                           ; BSR set to: 0
 25781  003AB2  0100               	movlb	0	; () banked
 25782  003AB4  817C               	bsf	i1___ftdiv@f3& (0+255),0,b
 25783  003AB6                     i1l1342:
 25784                           
 25785                           ; BSR set to: 0
 25786  003AB6  0100               	movlb	0	; () banked
 25787  003AB8  90D8               	bcf	status,0,c
 25788  003ABA  3772               	rlcf	i1___ftdiv@f1& (0+255),f,b
 25789  003ABC  3773               	rlcf	(i1___ftdiv@f1+1)& (0+255),f,b
 25790  003ABE  3774               	rlcf	(i1___ftdiv@f1+2)& (0+255),f,b
 25791                           
 25792                           ; BSR set to: 0
 25793  003AC0  0100               	movlb	0	; () banked
 25794  003AC2  2F7B               	decfsz	i1___ftdiv@cntr& (0+255),f,b
 25795  003AC4  D7D7               	goto	i1l5899
 25796                           
 25797                           ; BSR set to: 0
 25798                           
 25799                           ; BSR set to: 0
 25800  003AC6  C07C  F060         	movff	i1___ftdiv@f3,i1___ftpack@arg
 25801  003ACA  C07D  F061         	movff	i1___ftdiv@f3+1,i1___ftpack@arg+1
 25802  003ACE  C07E  F062         	movff	i1___ftdiv@f3+2,i1___ftpack@arg+2
 25803  003AD2  C07F  F063         	movff	i1___ftdiv@exp,i1___ftpack@exp
 25804  003AD6  C080  F064         	movff	i1___ftdiv@sign,i1___ftpack@sign
 25805  003ADA  EC06  F022         	call	i1___ftpack	;wreg free
 25806  003ADE  C060  F072         	movff	?i1___ftpack,?i1___ftdiv
 25807  003AE2  C061  F073         	movff	?i1___ftpack+1,?i1___ftdiv+1
 25808  003AE6  C062  F074         	movff	?i1___ftpack+2,?i1___ftdiv+2
 25809  003AEA  0012               	return	
 25810  003AEC                     __end_ofi1___ftdiv:
 25811                           	opt stack 0
 25812                           pclatu	equ	0xFFB
 25813                           pclath	equ	0xFFA
 25814                           tblptru	equ	0xFF8
 25815                           tblptrh	equ	0xFF7
 25816                           tblptrl	equ	0xFF6
 25817                           tablat	equ	0xFF5
 25818                           prodh	equ	0xFF4
 25819                           prodl	equ	0xFF3
 25820                           intcon	equ	0xFF2
 25821                           postinc0	equ	0xFEE
 25822                           fsr0h	equ	0xFEA
 25823                           fsr0l	equ	0xFE9
 25824                           wreg	equ	0xFE8
 25825                           postdec1	equ	0xFE5
 25826                           fsr1h	equ	0xFE2
 25827                           fsr1l	equ	0xFE1
 25828                           bsr	equ	0xFE0
 25829                           indf2	equ	0xFDF
 25830                           postinc2	equ	0xFDE
 25831                           postdec2	equ	0xFDD
 25832                           plusw2	equ	0xFDB
 25833                           fsr2h	equ	0xFDA
 25834                           fsr2l	equ	0xFD9
 25835                           status	equ	0xFD8
 25836                           
 25837 ;; *************** function i1_calcSysVars *****************
 25838 ;; Defined at:
 25839 ;;		line 76 in file "source/sysParams.h"
 25840 ;; Parameters:    Size  Location     Type
 25841 ;;		None
 25842 ;; Auto vars:     Size  Location     Type
 25843 ;;  calcSysVars     3   23[BANK0 ] float 
 25844 ;; Return value:  Size  Location     Type
 25845 ;;                  1    wreg      void 
 25846 ;; Registers used:
 25847 ;;		wreg, status,2, status,0, cstack
 25848 ;; Tracked objects:
 25849 ;;		On entry : 0/0
 25850 ;;		On exit  : 0/0
 25851 ;;		Unchanged: 0/0
 25852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25853 ;;      Params:         0       0       0       0       0       0       0
 25854 ;;      Locals:         0       3       0       0       0       0       0
 25855 ;;      Temps:          0       0       0       0       0       0       0
 25856 ;;      Totals:         0       3       0       0       0       0       0
 25857 ;;Total ram usage:        3 bytes
 25858 ;; Hardware stack levels used:    1
 25859 ;; Hardware stack levels required when called:    6
 25860 ;; This function calls:
 25861 ;;		i1___ftmul
 25862 ;; This function is called by:
 25863 ;;		_loadSysParams
 25864 ;;		i1_sysParamInit
 25865 ;; This function uses a non-reentrant model
 25866 ;;
 25867                           
 25868                           	psect	text113
 25869  006444                     __ptext113:
 25870                           	opt stack 0
 25871  006444                     i1_calcSysVars:
 25872                           	opt stack 11
 25873                           
 25874                           ;sysParams.h: 77: float temp = 0;
 25875                           
 25876                           ;incstack = 0
 25877  006444  0E00               	movlw	0
 25878  006446  0100               	movlb	0	; () banked
 25879  006448  6F77               	movwf	i1calcSysVars@temp& (0+255),b
 25880  00644A  0E00               	movlw	0
 25881  00644C  0100               	movlb	0	; () banked
 25882  00644E  6F78               	movwf	(i1calcSysVars@temp+1)& (0+255),b
 25883  006450  0E00               	movlw	0
 25884  006452  0100               	movlb	0	; () banked
 25885  006454  6F79               	movwf	(i1calcSysVars@temp+2)& (0+255),b
 25886                           
 25887                           ; BSR set to: 0
 25888                           ;sysParams.h: 78: timsXcorte = (float)tiXcorte * 1000;
 25889  006456  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 25890  00645A  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 25891  00645E  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 25892  006462  0E00               	movlw	0
 25893  006464  0100               	movlb	0	; () banked
 25894  006466  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 25895  006468  0E7A               	movlw	122
 25896  00646A  0100               	movlb	0	; () banked
 25897  00646C  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 25898  00646E  0E44               	movlw	68
 25899  006470  0100               	movlb	0	; () banked
 25900  006472  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 25901  006474  EC7B  F01B         	call	i1___ftmul	;wreg free
 25902  006478  C068  F05A         	movff	?i1___ftmul,_timsXcorte
 25903  00647C  C069  F05B         	movff	?i1___ftmul+1,_timsXcorte+1
 25904  006480  C06A  F05C         	movff	?i1___ftmul+2,_timsXcorte+2
 25905                           
 25906                           ;sysParams.h: 84: kgXcorte = (float)velocidadMasa * tiXcorte;
 25907  006484  C198  F068         	movff	_velocidadMasa,i1___ftmul@f1
 25908  006488  C199  F069         	movff	_velocidadMasa+1,i1___ftmul@f1+1
 25909  00648C  C19A  F06A         	movff	_velocidadMasa+2,i1___ftmul@f1+2
 25910  006490  C195  F06B         	movff	_tiXcorte,i1___ftmul@f2
 25911  006494  C196  F06C         	movff	_tiXcorte+1,i1___ftmul@f2+1
 25912  006498  C197  F06D         	movff	_tiXcorte+2,i1___ftmul@f2+2
 25913  00649C  EC7B  F01B         	call	i1___ftmul	;wreg free
 25914  0064A0  C068  F18F         	movff	?i1___ftmul,_kgXcorte
 25915  0064A4  C069  F190         	movff	?i1___ftmul+1,_kgXcorte+1
 25916  0064A8  C06A  F191         	movff	?i1___ftmul+2,_kgXcorte+2
 25917  0064AC  0012               	return		;funcret
 25918  0064AE                     __end_ofi1_calcSysVars:
 25919                           	opt stack 0
 25920                           pclatu	equ	0xFFB
 25921                           pclath	equ	0xFFA
 25922                           tblptru	equ	0xFF8
 25923                           tblptrh	equ	0xFF7
 25924                           tblptrl	equ	0xFF6
 25925                           tablat	equ	0xFF5
 25926                           prodh	equ	0xFF4
 25927                           prodl	equ	0xFF3
 25928                           intcon	equ	0xFF2
 25929                           postinc0	equ	0xFEE
 25930                           fsr0h	equ	0xFEA
 25931                           fsr0l	equ	0xFE9
 25932                           wreg	equ	0xFE8
 25933                           postdec1	equ	0xFE5
 25934                           fsr1h	equ	0xFE2
 25935                           fsr1l	equ	0xFE1
 25936                           bsr	equ	0xFE0
 25937                           indf2	equ	0xFDF
 25938                           postinc2	equ	0xFDE
 25939                           postdec2	equ	0xFDD
 25940                           plusw2	equ	0xFDB
 25941                           fsr2h	equ	0xFDA
 25942                           fsr2l	equ	0xFD9
 25943                           status	equ	0xFD8
 25944                           
 25945 ;; *************** function i1___ftmul *****************
 25946 ;; Defined at:
 25947 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 25948 ;; Parameters:    Size  Location     Type
 25949 ;;  f1              3    8[BANK0 ] float 
 25950 ;;  f2              3   11[BANK0 ] float 
 25951 ;; Auto vars:     Size  Location     Type
 25952 ;;  __ftmul         3   18[BANK0 ] unsigned um
 25953 ;;  __ftmul         1   22[BANK0 ] unsigned char 
 25954 ;;  __ftmul         1   21[BANK0 ] unsigned char 
 25955 ;;  __ftmul         1   17[BANK0 ] unsigned char 
 25956 ;; Return value:  Size  Location     Type
 25957 ;;                  3    8[BANK0 ] float 
 25958 ;; Registers used:
 25959 ;;		wreg, status,2, status,0, cstack
 25960 ;; Tracked objects:
 25961 ;;		On entry : 0/0
 25962 ;;		On exit  : 0/0
 25963 ;;		Unchanged: 0/0
 25964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25965 ;;      Params:         0       6       0       0       0       0       0
 25966 ;;      Locals:         0       6       0       0       0       0       0
 25967 ;;      Temps:          0       3       0       0       0       0       0
 25968 ;;      Totals:         0      15       0       0       0       0       0
 25969 ;;Total ram usage:       15 bytes
 25970 ;; Hardware stack levels used:    1
 25971 ;; Hardware stack levels required when called:    5
 25972 ;; This function calls:
 25973 ;;		i1___ftpack
 25974 ;; This function is called by:
 25975 ;;		i1_calcSysVars
 25976 ;;		i1_calcVars2ti
 25977 ;;		i1_desintegrator
 25978 ;; This function uses a non-reentrant model
 25979 ;;
 25980                           
 25981                           	psect	text114
 25982  0036F6                     __ptext114:
 25983                           	opt stack 0
 25984  0036F6                     i1___ftmul:
 25985                           	opt stack 11
 25986                           
 25987                           ;incstack = 0
 25988  0036F6  C06A  F06E         	movff	i1___ftmul@f1+2,??i1___ftmul
 25989  0036FA  0100               	movlb	0	; () banked
 25990  0036FC  6B6F               	clrf	(??i1___ftmul+1)& (0+255),b
 25991  0036FE  6B70               	clrf	(??i1___ftmul+2)& (0+255),b
 25992  003700  0100               	movlb	0	; () banked
 25993  003702  3569               	rlcf	(i1___ftmul@f1+1)& (0+255),w,b
 25994  003704  0100               	movlb	0	; () banked
 25995  003706  376E               	rlcf	??i1___ftmul& (0+255),f,b
 25996  003708  E301               	bnc	u748_21
 25997  00370A  816F               	bsf	(??i1___ftmul+1)& (0+255),0,b
 25998  00370C                     u748_21:
 25999  00370C  0100               	movlb	0	; () banked
 26000  00370E  516E               	movf	??i1___ftmul& (0+255),w,b
 26001  003710  0100               	movlb	0	; () banked
 26002  003712  6F71               	movwf	i1___ftmul@exp& (0+255),b
 26003  003714  0100               	movlb	0	; () banked
 26004  003716  5171               	movf	i1___ftmul@exp& (0+255),w,b
 26005  003718  A4D8               	btfss	status,2,c
 26006  00371A  D00A               	goto	i1l5919
 26007                           
 26008                           ; BSR set to: 0
 26009  00371C  0E00               	movlw	0
 26010  00371E  0100               	movlb	0	; () banked
 26011  003720  6F68               	movwf	?i1___ftmul& (0+255),b
 26012  003722  0E00               	movlw	0
 26013  003724  0100               	movlb	0	; () banked
 26014  003726  6F69               	movwf	(?i1___ftmul+1)& (0+255),b
 26015  003728  0E00               	movlw	0
 26016  00372A  0100               	movlb	0	; () banked
 26017  00372C  6F6A               	movwf	(?i1___ftmul+2)& (0+255),b
 26018                           
 26019                           ; BSR set to: 0
 26020  00372E  0012               	return	
 26021  003730                     i1l5919:
 26022                           
 26023                           ; BSR set to: 0
 26024  003730  C06D  F06E         	movff	i1___ftmul@f2+2,??i1___ftmul
 26025  003734  0100               	movlb	0	; () banked
 26026  003736  6B6F               	clrf	(??i1___ftmul+1)& (0+255),b
 26027  003738  6B70               	clrf	(??i1___ftmul+2)& (0+255),b
 26028  00373A  0100               	movlb	0	; () banked
 26029  00373C  356C               	rlcf	(i1___ftmul@f2+1)& (0+255),w,b
 26030  00373E  0100               	movlb	0	; () banked
 26031  003740  376E               	rlcf	??i1___ftmul& (0+255),f,b
 26032  003742  E301               	bnc	u750_21
 26033  003744  816F               	bsf	(??i1___ftmul+1)& (0+255),0,b
 26034  003746                     u750_21:
 26035  003746  0100               	movlb	0	; () banked
 26036  003748  516E               	movf	??i1___ftmul& (0+255),w,b
 26037  00374A  0100               	movlb	0	; () banked
 26038  00374C  6F76               	movwf	i1___ftmul@sign& (0+255),b
 26039  00374E  0100               	movlb	0	; () banked
 26040  003750  5176               	movf	i1___ftmul@sign& (0+255),w,b
 26041  003752  A4D8               	btfss	status,2,c
 26042  003754  D00A               	goto	i1l5925
 26043                           
 26044                           ; BSR set to: 0
 26045  003756  0E00               	movlw	0
 26046  003758  0100               	movlb	0	; () banked
 26047  00375A  6F68               	movwf	?i1___ftmul& (0+255),b
 26048  00375C  0E00               	movlw	0
 26049  00375E  0100               	movlb	0	; () banked
 26050  003760  6F69               	movwf	(?i1___ftmul+1)& (0+255),b
 26051  003762  0E00               	movlw	0
 26052  003764  0100               	movlb	0	; () banked
 26053  003766  6F6A               	movwf	(?i1___ftmul+2)& (0+255),b
 26054                           
 26055                           ; BSR set to: 0
 26056  003768  0012               	return	
 26057  00376A                     i1l5925:
 26058                           
 26059                           ; BSR set to: 0
 26060  00376A  0100               	movlb	0	; () banked
 26061  00376C  5176               	movf	i1___ftmul@sign& (0+255),w,b
 26062  00376E  0F7B               	addlw	123
 26063  003770  0100               	movlb	0	; () banked
 26064  003772  2771               	addwf	i1___ftmul@exp& (0+255),f,b
 26065                           
 26066                           ; BSR set to: 0
 26067  003774  C06A  F076         	movff	i1___ftmul@f1+2,i1___ftmul@sign
 26068  003778  0100               	movlb	0	; () banked
 26069  00377A  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 26070  00377C  0100               	movlb	0	; () banked
 26071  00377E  1B76               	xorwf	i1___ftmul@sign& (0+255),f,b
 26072  003780  0E80               	movlw	128
 26073  003782  0100               	movlb	0	; () banked
 26074  003784  1776               	andwf	i1___ftmul@sign& (0+255),f,b
 26075                           
 26076                           ; BSR set to: 0
 26077  003786  0100               	movlb	0	; () banked
 26078  003788  8F69               	bsf	(i1___ftmul@f1+1)& (0+255),7,b
 26079                           
 26080                           ; BSR set to: 0
 26081  00378A  0100               	movlb	0	; () banked
 26082  00378C  8F6C               	bsf	(i1___ftmul@f2+1)& (0+255),7,b
 26083                           
 26084                           ; BSR set to: 0
 26085  00378E  0EFF               	movlw	255
 26086  003790  0100               	movlb	0	; () banked
 26087  003792  176B               	andwf	i1___ftmul@f2& (0+255),f,b
 26088  003794  0EFF               	movlw	255
 26089  003796  0100               	movlb	0	; () banked
 26090  003798  176C               	andwf	(i1___ftmul@f2+1)& (0+255),f,b
 26091  00379A  0E00               	movlw	0
 26092  00379C  0100               	movlb	0	; () banked
 26093  00379E  176D               	andwf	(i1___ftmul@f2+2)& (0+255),f,b
 26094                           
 26095                           ; BSR set to: 0
 26096  0037A0  0E00               	movlw	0
 26097  0037A2  0100               	movlb	0	; () banked
 26098  0037A4  6F72               	movwf	i1___ftmul@f3_as_product& (0+255),b
 26099  0037A6  0E00               	movlw	0
 26100  0037A8  0100               	movlb	0	; () banked
 26101  0037AA  6F73               	movwf	(i1___ftmul@f3_as_product+1)& (0+255),b
 26102  0037AC  0E00               	movlw	0
 26103  0037AE  0100               	movlb	0	; () banked
 26104  0037B0  6F74               	movwf	(i1___ftmul@f3_as_product+2)& (0+255),b
 26105                           
 26106                           ; BSR set to: 0
 26107  0037B2  0E07               	movlw	7
 26108  0037B4  0100               	movlb	0	; () banked
 26109  0037B6  6F75               	movwf	i1___ftmul@cntr& (0+255),b
 26110  0037B8                     i1l5939:
 26111                           
 26112                           ; BSR set to: 0
 26113  0037B8  0100               	movlb	0	; () banked
 26114  0037BA  A168               	btfss	i1___ftmul@f1& (0+255),0,b
 26115  0037BC  D00C               	goto	i1l5943
 26116                           
 26117                           ; BSR set to: 0
 26118  0037BE  0100               	movlb	0	; () banked
 26119  0037C0  516B               	movf	i1___ftmul@f2& (0+255),w,b
 26120  0037C2  0100               	movlb	0	; () banked
 26121  0037C4  2772               	addwf	i1___ftmul@f3_as_product& (0+255),f,b
 26122  0037C6  0100               	movlb	0	; () banked
 26123  0037C8  516C               	movf	(i1___ftmul@f2+1)& (0+255),w,b
 26124  0037CA  0100               	movlb	0	; () banked
 26125  0037CC  2373               	addwfc	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 26126  0037CE  0100               	movlb	0	; () banked
 26127  0037D0  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 26128  0037D2  0100               	movlb	0	; () banked
 26129  0037D4  2374               	addwfc	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 26130  0037D6                     i1l5943:
 26131                           
 26132                           ; BSR set to: 0
 26133  0037D6  0100               	movlb	0	; () banked
 26134  0037D8  90D8               	bcf	status,0,c
 26135  0037DA  336A               	rrcf	(i1___ftmul@f1+2)& (0+255),f,b
 26136  0037DC  3369               	rrcf	(i1___ftmul@f1+1)& (0+255),f,b
 26137  0037DE  3368               	rrcf	i1___ftmul@f1& (0+255),f,b
 26138  0037E0  0100               	movlb	0	; () banked
 26139  0037E2  90D8               	bcf	status,0,c
 26140  0037E4  376B               	rlcf	i1___ftmul@f2& (0+255),f,b
 26141  0037E6  376C               	rlcf	(i1___ftmul@f2+1)& (0+255),f,b
 26142  0037E8  376D               	rlcf	(i1___ftmul@f2+2)& (0+255),f,b
 26143                           
 26144                           ; BSR set to: 0
 26145  0037EA  0100               	movlb	0	; () banked
 26146  0037EC  2F75               	decfsz	i1___ftmul@cntr& (0+255),f,b
 26147  0037EE  D7E4               	goto	i1l5939
 26148                           
 26149                           ; BSR set to: 0
 26150                           
 26151                           ; BSR set to: 0
 26152  0037F0  0E09               	movlw	9
 26153  0037F2  0100               	movlb	0	; () banked
 26154  0037F4  6F75               	movwf	i1___ftmul@cntr& (0+255),b
 26155  0037F6                     i1l5949:
 26156                           
 26157                           ; BSR set to: 0
 26158  0037F6  0100               	movlb	0	; () banked
 26159  0037F8  A168               	btfss	i1___ftmul@f1& (0+255),0,b
 26160  0037FA  D00C               	goto	i1l5953
 26161                           
 26162                           ; BSR set to: 0
 26163  0037FC  0100               	movlb	0	; () banked
 26164  0037FE  516B               	movf	i1___ftmul@f2& (0+255),w,b
 26165  003800  0100               	movlb	0	; () banked
 26166  003802  2772               	addwf	i1___ftmul@f3_as_product& (0+255),f,b
 26167  003804  0100               	movlb	0	; () banked
 26168  003806  516C               	movf	(i1___ftmul@f2+1)& (0+255),w,b
 26169  003808  0100               	movlb	0	; () banked
 26170  00380A  2373               	addwfc	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 26171  00380C  0100               	movlb	0	; () banked
 26172  00380E  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 26173  003810  0100               	movlb	0	; () banked
 26174  003812  2374               	addwfc	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 26175  003814                     i1l5953:
 26176                           
 26177                           ; BSR set to: 0
 26178  003814  0100               	movlb	0	; () banked
 26179  003816  90D8               	bcf	status,0,c
 26180  003818  336A               	rrcf	(i1___ftmul@f1+2)& (0+255),f,b
 26181  00381A  3369               	rrcf	(i1___ftmul@f1+1)& (0+255),f,b
 26182  00381C  3368               	rrcf	i1___ftmul@f1& (0+255),f,b
 26183  00381E  0100               	movlb	0	; () banked
 26184  003820  90D8               	bcf	status,0,c
 26185  003822  3374               	rrcf	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 26186  003824  3373               	rrcf	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 26187  003826  3372               	rrcf	i1___ftmul@f3_as_product& (0+255),f,b
 26188                           
 26189                           ; BSR set to: 0
 26190  003828  0100               	movlb	0	; () banked
 26191  00382A  2F75               	decfsz	i1___ftmul@cntr& (0+255),f,b
 26192  00382C  D7E4               	goto	i1l5949
 26193                           
 26194                           ; BSR set to: 0
 26195                           
 26196                           ; BSR set to: 0
 26197  00382E  C072  F060         	movff	i1___ftmul@f3_as_product,i1___ftpack@arg
 26198  003832  C073  F061         	movff	i1___ftmul@f3_as_product+1,i1___ftpack@arg+1
 26199  003836  C074  F062         	movff	i1___ftmul@f3_as_product+2,i1___ftpack@arg+2
 26200  00383A  C071  F063         	movff	i1___ftmul@exp,i1___ftpack@exp
 26201  00383E  C076  F064         	movff	i1___ftmul@sign,i1___ftpack@sign
 26202  003842  EC06  F022         	call	i1___ftpack	;wreg free
 26203  003846  C060  F068         	movff	?i1___ftpack,?i1___ftmul
 26204  00384A  C061  F069         	movff	?i1___ftpack+1,?i1___ftmul+1
 26205  00384E  C062  F06A         	movff	?i1___ftpack+2,?i1___ftmul+2
 26206  003852  0012               	return	
 26207  003854                     __end_ofi1___ftmul:
 26208                           	opt stack 0
 26209                           pclatu	equ	0xFFB
 26210                           pclath	equ	0xFFA
 26211                           tblptru	equ	0xFF8
 26212                           tblptrh	equ	0xFF7
 26213                           tblptrl	equ	0xFF6
 26214                           tablat	equ	0xFF5
 26215                           prodh	equ	0xFF4
 26216                           prodl	equ	0xFF3
 26217                           intcon	equ	0xFF2
 26218                           postinc0	equ	0xFEE
 26219                           fsr0h	equ	0xFEA
 26220                           fsr0l	equ	0xFE9
 26221                           wreg	equ	0xFE8
 26222                           postdec1	equ	0xFE5
 26223                           fsr1h	equ	0xFE2
 26224                           fsr1l	equ	0xFE1
 26225                           bsr	equ	0xFE0
 26226                           indf2	equ	0xFDF
 26227                           postinc2	equ	0xFDE
 26228                           postdec2	equ	0xFDD
 26229                           plusw2	equ	0xFDB
 26230                           fsr2h	equ	0xFDA
 26231                           fsr2l	equ	0xFD9
 26232                           status	equ	0xFD8
 26233                           
 26234 ;; *************** function i1___ftpack *****************
 26235 ;; Defined at:
 26236 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 26237 ;; Parameters:    Size  Location     Type
 26238 ;;  arg             3    0[BANK0 ] unsigned um
 26239 ;;  exp             1    3[BANK0 ] unsigned char 
 26240 ;;  sign            1    4[BANK0 ] unsigned char 
 26241 ;; Auto vars:     Size  Location     Type
 26242 ;;		None
 26243 ;; Return value:  Size  Location     Type
 26244 ;;                  3    0[BANK0 ] float 
 26245 ;; Registers used:
 26246 ;;		wreg, status,2, status,0
 26247 ;; Tracked objects:
 26248 ;;		On entry : 0/0
 26249 ;;		On exit  : 0/0
 26250 ;;		Unchanged: 0/0
 26251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26252 ;;      Params:         0       5       0       0       0       0       0
 26253 ;;      Locals:         0       0       0       0       0       0       0
 26254 ;;      Temps:          0       3       0       0       0       0       0
 26255 ;;      Totals:         0       8       0       0       0       0       0
 26256 ;;Total ram usage:        8 bytes
 26257 ;; Hardware stack levels used:    1
 26258 ;; Hardware stack levels required when called:    4
 26259 ;; This function calls:
 26260 ;;		Nothing
 26261 ;; This function is called by:
 26262 ;;		i1___altoft
 26263 ;;		i1___ftadd
 26264 ;;		i1___ftdiv
 26265 ;;		i1___ftmul
 26266 ;; This function uses a non-reentrant model
 26267 ;;
 26268                           
 26269                           	psect	text115
 26270  00440C                     __ptext115:
 26271                           	opt stack 0
 26272  00440C                     i1___ftpack:
 26273                           	opt stack 11
 26274                           
 26275                           ;incstack = 0
 26276  00440C  0100               	movlb	0	; () banked
 26277  00440E  5163               	movf	i1___ftpack@exp& (0+255),w,b
 26278  004410  0100               	movlb	0	; () banked
 26279  004412  B4D8               	btfsc	status,2,c
 26280  004414  D008               	goto	i1l5567
 26281                           
 26282                           ; BSR set to: 0
 26283  004416  0100               	movlb	0	; () banked
 26284  004418  5160               	movf	i1___ftpack@arg& (0+255),w,b
 26285  00441A  0100               	movlb	0	; () banked
 26286  00441C  1161               	iorwf	(i1___ftpack@arg+1)& (0+255),w,b
 26287  00441E  0100               	movlb	0	; () banked
 26288  004420  1162               	iorwf	(i1___ftpack@arg+2)& (0+255),w,b
 26289  004422  A4D8               	btfss	status,2,c
 26290  004424  D011               	goto	i1l5573
 26291  004426                     i1l5567:
 26292                           
 26293                           ; BSR set to: 0
 26294  004426  0E00               	movlw	0
 26295  004428  0100               	movlb	0	; () banked
 26296  00442A  6F60               	movwf	?i1___ftpack& (0+255),b
 26297  00442C  0E00               	movlw	0
 26298  00442E  0100               	movlb	0	; () banked
 26299  004430  6F61               	movwf	(?i1___ftpack+1)& (0+255),b
 26300  004432  0E00               	movlw	0
 26301  004434  0100               	movlb	0	; () banked
 26302  004436  6F62               	movwf	(?i1___ftpack+2)& (0+255),b
 26303                           
 26304                           ; BSR set to: 0
 26305  004438  0012               	return	
 26306  00443A                     i1l5571:
 26307                           
 26308                           ; BSR set to: 0
 26309  00443A  0100               	movlb	0	; () banked
 26310  00443C  2B63               	incf	i1___ftpack@exp& (0+255),f,b
 26311  00443E  0100               	movlb	0	; () banked
 26312  004440  90D8               	bcf	status,0,c
 26313  004442  3362               	rrcf	(i1___ftpack@arg+2)& (0+255),f,b
 26314  004444  3361               	rrcf	(i1___ftpack@arg+1)& (0+255),f,b
 26315  004446  3360               	rrcf	i1___ftpack@arg& (0+255),f,b
 26316  004448                     i1l5573:
 26317                           
 26318                           ; BSR set to: 0
 26319  004448  0E00               	movlw	0
 26320  00444A  0100               	movlb	0	; () banked
 26321  00444C  1560               	andwf	i1___ftpack@arg& (0+255),w,b
 26322  00444E  0100               	movlb	0	; () banked
 26323  004450  6F65               	movwf	??i1___ftpack& (0+255),b
 26324  004452  0E00               	movlw	0
 26325  004454  0100               	movlb	0	; () banked
 26326  004456  1561               	andwf	(i1___ftpack@arg+1)& (0+255),w,b
 26327  004458  0100               	movlb	0	; () banked
 26328  00445A  6F66               	movwf	(??i1___ftpack+1)& (0+255),b
 26329  00445C  0EFE               	movlw	254
 26330  00445E  0100               	movlb	0	; () banked
 26331  004460  1562               	andwf	(i1___ftpack@arg+2)& (0+255),w,b
 26332  004462  0100               	movlb	0	; () banked
 26333  004464  6F67               	movwf	(??i1___ftpack+2)& (0+255),b
 26334  004466  0100               	movlb	0	; () banked
 26335  004468  5165               	movf	??i1___ftpack& (0+255),w,b
 26336  00446A  0100               	movlb	0	; () banked
 26337  00446C  1166               	iorwf	(??i1___ftpack+1)& (0+255),w,b
 26338  00446E  0100               	movlb	0	; () banked
 26339  004470  1167               	iorwf	(??i1___ftpack+2)& (0+255),w,b
 26340  004472  B4D8               	btfsc	status,2,c
 26341  004474  D011               	goto	i1l5579
 26342  004476  D7E1               	goto	i1l5571
 26343  004478                     i1l5575:
 26344                           
 26345                           ; BSR set to: 0
 26346  004478  0100               	movlb	0	; () banked
 26347  00447A  2B63               	incf	i1___ftpack@exp& (0+255),f,b
 26348                           
 26349                           ; BSR set to: 0
 26350  00447C  0E01               	movlw	1
 26351  00447E  0100               	movlb	0	; () banked
 26352  004480  2760               	addwf	i1___ftpack@arg& (0+255),f,b
 26353  004482  0E00               	movlw	0
 26354  004484  0100               	movlb	0	; () banked
 26355  004486  2361               	addwfc	(i1___ftpack@arg+1)& (0+255),f,b
 26356  004488  0E00               	movlw	0
 26357  00448A  0100               	movlb	0	; () banked
 26358  00448C  2362               	addwfc	(i1___ftpack@arg+2)& (0+255),f,b
 26359  00448E  0100               	movlb	0	; () banked
 26360  004490  90D8               	bcf	status,0,c
 26361  004492  3362               	rrcf	(i1___ftpack@arg+2)& (0+255),f,b
 26362  004494  3361               	rrcf	(i1___ftpack@arg+1)& (0+255),f,b
 26363  004496  3360               	rrcf	i1___ftpack@arg& (0+255),f,b
 26364  004498                     i1l5579:
 26365                           
 26366                           ; BSR set to: 0
 26367  004498  0E00               	movlw	0
 26368  00449A  0100               	movlb	0	; () banked
 26369  00449C  1560               	andwf	i1___ftpack@arg& (0+255),w,b
 26370  00449E  0100               	movlb	0	; () banked
 26371  0044A0  6F65               	movwf	??i1___ftpack& (0+255),b
 26372  0044A2  0E00               	movlw	0
 26373  0044A4  0100               	movlb	0	; () banked
 26374  0044A6  1561               	andwf	(i1___ftpack@arg+1)& (0+255),w,b
 26375  0044A8  0100               	movlb	0	; () banked
 26376  0044AA  6F66               	movwf	(??i1___ftpack+1)& (0+255),b
 26377  0044AC  0EFF               	movlw	255
 26378  0044AE  0100               	movlb	0	; () banked
 26379  0044B0  1562               	andwf	(i1___ftpack@arg+2)& (0+255),w,b
 26380  0044B2  0100               	movlb	0	; () banked
 26381  0044B4  6F67               	movwf	(??i1___ftpack+2)& (0+255),b
 26382  0044B6  0100               	movlb	0	; () banked
 26383  0044B8  5165               	movf	??i1___ftpack& (0+255),w,b
 26384  0044BA  0100               	movlb	0	; () banked
 26385  0044BC  1166               	iorwf	(??i1___ftpack+1)& (0+255),w,b
 26386  0044BE  0100               	movlb	0	; () banked
 26387  0044C0  1167               	iorwf	(??i1___ftpack+2)& (0+255),w,b
 26388  0044C2  B4D8               	btfsc	status,2,c
 26389  0044C4  D008               	goto	i1l5583
 26390  0044C6  D7D8               	goto	i1l5575
 26391  0044C8                     i1l5581:
 26392                           
 26393                           ; BSR set to: 0
 26394  0044C8  0100               	movlb	0	; () banked
 26395  0044CA  0763               	decf	i1___ftpack@exp& (0+255),f,b
 26396  0044CC  0100               	movlb	0	; () banked
 26397  0044CE  90D8               	bcf	status,0,c
 26398  0044D0  3760               	rlcf	i1___ftpack@arg& (0+255),f,b
 26399  0044D2  3761               	rlcf	(i1___ftpack@arg+1)& (0+255),f,b
 26400  0044D4  3762               	rlcf	(i1___ftpack@arg+2)& (0+255),f,b
 26401  0044D6                     i1l5583:
 26402                           
 26403                           ; BSR set to: 0
 26404  0044D6  0100               	movlb	0	; () banked
 26405  0044D8  BF61               	btfsc	(i1___ftpack@arg+1)& (0+255),7,b
 26406  0044DA  D004               	goto	i1l1284
 26407                           
 26408                           ; BSR set to: 0
 26409  0044DC  0E02               	movlw	2
 26410  0044DE  0100               	movlb	0	; () banked
 26411  0044E0  6163               	cpfslt	i1___ftpack@exp& (0+255),b
 26412  0044E2  D7F2               	goto	i1l5581
 26413  0044E4                     i1l1284:
 26414                           
 26415                           ; BSR set to: 0
 26416  0044E4  0100               	movlb	0	; () banked
 26417  0044E6  B163               	btfsc	i1___ftpack@exp& (0+255),0,b
 26418  0044E8  D002               	goto	i1l5589
 26419                           
 26420                           ; BSR set to: 0
 26421  0044EA  0100               	movlb	0	; () banked
 26422  0044EC  9F61               	bcf	(i1___ftpack@arg+1)& (0+255),7,b
 26423  0044EE                     i1l5589:
 26424                           
 26425                           ; BSR set to: 0
 26426  0044EE  0100               	movlb	0	; () banked
 26427  0044F0  90D8               	bcf	status,0,c
 26428  0044F2  3363               	rrcf	i1___ftpack@exp& (0+255),f,b
 26429  0044F4  0100               	movlb	0	; () banked
 26430  0044F6  5163               	movf	i1___ftpack@exp& (0+255),w,b
 26431  0044F8  0100               	movlb	0	; () banked
 26432  0044FA  1362               	iorwf	(i1___ftpack@arg+2)& (0+255),f,b
 26433                           
 26434                           ; BSR set to: 0
 26435  0044FC  0100               	movlb	0	; () banked
 26436  0044FE  5164               	movf	i1___ftpack@sign& (0+255),w,b
 26437  004500  0100               	movlb	0	; () banked
 26438  004502  B4D8               	btfsc	status,2,c
 26439  004504  D002               	goto	i1l5595
 26440                           
 26441                           ; BSR set to: 0
 26442  004506  0100               	movlb	0	; () banked
 26443  004508  8F62               	bsf	(i1___ftpack@arg+2)& (0+255),7,b
 26444  00450A                     i1l5595:
 26445                           
 26446                           ; BSR set to: 0
 26447  00450A  C060  F060         	movff	i1___ftpack@arg,?i1___ftpack
 26448  00450E  C061  F061         	movff	i1___ftpack@arg+1,?i1___ftpack+1
 26449  004512  C062  F062         	movff	i1___ftpack@arg+2,?i1___ftpack+2
 26450  004516  0012               	return	
 26451  004518                     __end_ofi1___ftpack:
 26452                           	opt stack 0
 26453                           pclatu	equ	0xFFB
 26454                           pclath	equ	0xFFA
 26455                           tblptru	equ	0xFF8
 26456                           tblptrh	equ	0xFF7
 26457                           tblptrl	equ	0xFF6
 26458                           tablat	equ	0xFF5
 26459                           prodh	equ	0xFF4
 26460                           prodl	equ	0xFF3
 26461                           intcon	equ	0xFF2
 26462                           postinc0	equ	0xFEE
 26463                           fsr0h	equ	0xFEA
 26464                           fsr0l	equ	0xFE9
 26465                           wreg	equ	0xFE8
 26466                           postdec1	equ	0xFE5
 26467                           fsr1h	equ	0xFE2
 26468                           fsr1l	equ	0xFE1
 26469                           bsr	equ	0xFE0
 26470                           indf2	equ	0xFDF
 26471                           postinc2	equ	0xFDE
 26472                           postdec2	equ	0xFDD
 26473                           plusw2	equ	0xFDB
 26474                           fsr2h	equ	0xFDA
 26475                           fsr2l	equ	0xFD9
 26476                           status	equ	0xFD8
 26477                           
 26478 ;; *************** function _T2int *****************
 26479 ;; Defined at:
 26480 ;;		line 49 in file "source/PWMConfig.h"
 26481 ;; Parameters:    Size  Location     Type
 26482 ;;		None
 26483 ;; Auto vars:     Size  Location     Type
 26484 ;;		None
 26485 ;; Return value:  Size  Location     Type
 26486 ;;                  1    wreg      void 
 26487 ;; Registers used:
 26488 ;;		wreg, status,2, status,0, cstack
 26489 ;; Tracked objects:
 26490 ;;		On entry : 0/0
 26491 ;;		On exit  : 0/0
 26492 ;;		Unchanged: 0/0
 26493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26494 ;;      Params:         0       0       0       0       0       0       0
 26495 ;;      Locals:         0       0       0       0       0       0       0
 26496 ;;      Temps:          0       1       0       0       0       0       0
 26497 ;;      Totals:         0       1       0       0       0       0       0
 26498 ;;Total ram usage:        1 bytes
 26499 ;; Hardware stack levels used:    1
 26500 ;; Hardware stack levels required when called:    6
 26501 ;; This function calls:
 26502 ;;		_saveProcessState
 26503 ;;		i1_setPWM2duty
 26504 ;; This function is called by:
 26505 ;;		_isr
 26506 ;; This function uses a non-reentrant model
 26507 ;;
 26508                           
 26509                           	psect	text116
 26510  0032A4                     __ptext116:
 26511                           	opt stack 0
 26512  0032A4                     _T2int:
 26513                           	opt stack 13
 26514                           
 26515                           ;PWMConfig.h: 50: if(!processStarted)
 26516                           
 26517                           ; BSR set to: 0
 26518                           ;incstack = 0
 26519  0032A4  0100               	movlb	0	; () banked
 26520  0032A6  51BB               	movf	_processStarted& (0+255),w,b
 26521  0032A8  B4D8               	btfsc	status,2,c
 26522                           
 26523                           ; BSR set to: 0
 26524                           ;PWMConfig.h: 51: LATCbits.LATC4 = 0;
 26525  0032AA  988B               	bcf	3979,4,c	;volatile
 26526                           
 26527                           ; BSR set to: 0
 26528                           ;PWMConfig.h: 52: t2Cont1++;
 26529                           
 26530                           ; BSR set to: 0
 26531  0032AC  0100               	movlb	0	; () banked
 26532  0032AE  2BBC               	incf	_t2Cont1& (0+255),f,b
 26533                           
 26534                           ; BSR set to: 0
 26535                           ;PWMConfig.h: 53: if(PORTAbits.RA7 && !lastSttFC1) {
 26536  0032B0  AE80               	btfss	3968,7,c	;volatile
 26537  0032B2  D042               	goto	i1l491
 26538                           
 26539                           ; BSR set to: 0
 26540  0032B4  0100               	movlb	0	; () banked
 26541  0032B6  51B9               	movf	_lastSttFC1& (0+255),w,b
 26542  0032B8  A4D8               	btfss	status,2,c
 26543  0032BA  D03E               	goto	i1l491
 26544                           
 26545                           ; BSR set to: 0
 26546                           ;PWMConfig.h: 54: lastSttFC1 = 1;
 26547  0032BC  0E01               	movlw	1
 26548  0032BE  0100               	movlb	0	; () banked
 26549  0032C0  6FB9               	movwf	_lastSttFC1& (0+255),b
 26550                           
 26551                           ; BSR set to: 0
 26552                           ;PWMConfig.h: 55: setPWM2duty(0);
 26553  0032C2  0E00               	movlw	0
 26554  0032C4  0100               	movlb	0	; () banked
 26555  0032C6  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 26556  0032C8  0E00               	movlw	0
 26557  0032CA  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 26558  0032CC  ECD1  F02C         	call	i1_setPWM2duty	;wreg free
 26559                           
 26560                           ;PWMConfig.h: 56: bladeIsUP = 1;
 26561  0032D0  0E01               	movlw	1
 26562  0032D2  0100               	movlb	0	; () banked
 26563  0032D4  6FC8               	movwf	_bladeIsUP& (0+255),b
 26564                           
 26565                           ; BSR set to: 0
 26566                           ;PWMConfig.h: 57: processTimer = 0;
 26567  0032D6  0E00               	movlw	0
 26568  0032D8  6E37               	movwf	_processTimer,c
 26569  0032DA  0E00               	movlw	0
 26570  0032DC  6E38               	movwf	_processTimer+1,c
 26571  0032DE  0E00               	movlw	0
 26572  0032E0  6E39               	movwf	_processTimer+2,c
 26573  0032E2  0E00               	movlw	0
 26574  0032E4  6E3A               	movwf	_processTimer+3,c
 26575                           
 26576                           ; BSR set to: 0
 26577                           ;PWMConfig.h: 58: securTimer = 0;
 26578  0032E6  0E00               	movlw	0
 26579  0032E8  6E3B               	movwf	_securTimer,c
 26580  0032EA  0E00               	movlw	0
 26581  0032EC  6E3C               	movwf	_securTimer+1,c
 26582  0032EE  0E00               	movlw	0
 26583  0032F0  6E3D               	movwf	_securTimer+2,c
 26584  0032F2  0E00               	movlw	0
 26585  0032F4  6E3E               	movwf	_securTimer+3,c
 26586                           
 26587                           ; BSR set to: 0
 26588                           ;PWMConfig.h: 59: if(processState >= numCortes) {
 26589  0032F6  0100               	movlb	0	; () banked
 26590  0032F8  51C6               	movf	_numCortes& (0+255),w,b
 26591  0032FA  0100               	movlb	0	; () banked
 26592  0032FC  5DB4               	subwf	_processState& (0+255),w,b
 26593  0032FE  0100               	movlb	0	; () banked
 26594  003300  51B5               	movf	(_processState+1)& (0+255),w,b
 26595  003302  0A80               	xorlw	128
 26596  003304  0100               	movlb	0	; () banked
 26597  003306  6F66               	movwf	??_T2int& (0+255),b
 26598  003308  0100               	movlb	0	; () banked
 26599  00330A  51C7               	movf	(_numCortes+1)& (0+255),w,b
 26600  00330C  0A80               	xorlw	128
 26601  00330E  0100               	movlb	0	; () banked
 26602  003310  5966               	subwfb	??_T2int& (0+255),w,b
 26603  003312  A0D8               	btfss	status,0,c
 26604  003314  D00D               	goto	i1l492
 26605                           
 26606                           ; BSR set to: 0
 26607                           ;PWMConfig.h: 60: processStarted = 0;
 26608  003316  0E00               	movlw	0
 26609  003318  0100               	movlb	0	; () banked
 26610  00331A  6FBB               	movwf	_processStarted& (0+255),b
 26611                           
 26612                           ; BSR set to: 0
 26613                           ;PWMConfig.h: 61: saveProcessState();
 26614  00331C  EC79  F034         	call	_saveProcessState	;wreg free
 26615                           
 26616                           ;PWMConfig.h: 62: if(actualScreen == 6)
 26617  003320  0E06               	movlw	6
 26618  003322  0101               	movlb	1	; () banked
 26619  003324  19C3               	xorwf	_actualScreen& (0+255),w,b
 26620  003326  A4D8               	btfss	status,2,c
 26621  003328  D003               	goto	i1l492
 26622                           
 26623                           ; BSR set to: 1
 26624                           ;PWMConfig.h: 63: actualScreen = 12;
 26625  00332A  0E0C               	movlw	12
 26626  00332C  0101               	movlb	1	; () banked
 26627  00332E  6FC3               	movwf	_actualScreen& (0+255),b
 26628  003330                     i1l492:
 26629                           
 26630                           ;PWMConfig.h: 64: }
 26631                           ;PWMConfig.h: 66: t2Cont1 = 0;
 26632  003330  0E00               	movlw	0
 26633  003332  0100               	movlb	0	; () banked
 26634  003334  6FBC               	movwf	_t2Cont1& (0+255),b
 26635                           
 26636                           ;PWMConfig.h: 67: }else if(!PORTAbits.RA7 && lastSttFC1) {
 26637  003336  D01B               	goto	i1l8581
 26638  003338                     i1l491:
 26639                           
 26640                           ; BSR set to: 0
 26641  003338  BE80               	btfsc	3968,7,c	;volatile
 26642  00333A  D00C               	goto	i1l8575
 26643                           
 26644                           ; BSR set to: 0
 26645  00333C  0100               	movlb	0	; () banked
 26646  00333E  51B9               	movf	_lastSttFC1& (0+255),w,b
 26647  003340  B4D8               	btfsc	status,2,c
 26648  003342  D008               	goto	i1l8575
 26649                           
 26650                           ; BSR set to: 0
 26651                           ;PWMConfig.h: 68: if(t2Cont1 > 124)
 26652  003344  0E7C               	movlw	124
 26653  003346  0100               	movlb	0	; () banked
 26654  003348  65BC               	cpfsgt	_t2Cont1& (0+255),b
 26655  00334A  D011               	goto	i1l8581
 26656                           
 26657                           ; BSR set to: 0
 26658                           ;PWMConfig.h: 69: lastSttFC1 = 0;
 26659  00334C  0E00               	movlw	0
 26660  00334E  0100               	movlb	0	; () banked
 26661  003350  6FB9               	movwf	_lastSttFC1& (0+255),b
 26662                           
 26663                           ; BSR set to: 0
 26664                           ;PWMConfig.h: 74: }else if(PORTAbits.RA7 == lastSttFC1) {
 26665  003352  D00D               	goto	i1l8581
 26666  003354                     i1l8575:
 26667                           
 26668                           ; BSR set to: 0
 26669  003354  AE80               	btfss	3968,7,c	;volatile
 26670  003356  D002               	goto	i1u1236_20
 26671  003358  0E01               	movlw	1
 26672  00335A  D001               	goto	i1u1236_26
 26673  00335C                     i1u1236_20:
 26674  00335C  0E00               	movlw	0
 26675  00335E                     i1u1236_26:
 26676  00335E  0100               	movlb	0	; () banked
 26677  003360  19B9               	xorwf	_lastSttFC1& (0+255),w,b
 26678  003362  B4D8               	btfsc	status,2,c
 26679                           
 26680                           ; BSR set to: 0
 26681                           ;PWMConfig.h: 75: if(!PORTAbits.RA7) {
 26682  003364  BE80               	btfsc	3968,7,c	;volatile
 26683  003366  D003               	goto	i1l8581
 26684                           
 26685                           ; BSR set to: 0
 26686                           ;PWMConfig.h: 76: holdFC1cont = 0;
 26687  003368  0E00               	movlw	0
 26688  00336A  0100               	movlb	0	; () banked
 26689  00336C  6FB6               	movwf	_holdFC1cont& (0+255),b
 26690  00336E                     i1l8581:
 26691                           
 26692                           ; BSR set to: 0
 26693                           ;PWMConfig.h: 89: }
 26694                           ;PWMConfig.h: 90: }
 26695                           ;PWMConfig.h: 91: t2Cont2++;
 26696  00336E  0100               	movlb	0	; () banked
 26697  003370  2BBD               	incf	_t2Cont2& (0+255),f,b
 26698                           
 26699                           ; BSR set to: 0
 26700                           ;PWMConfig.h: 92: if(PORTAbits.RA6 && !lastSttFC2) {
 26701  003372  AC80               	btfss	3968,6,c	;volatile
 26702  003374  D03A               	goto	i1l501
 26703                           
 26704                           ; BSR set to: 0
 26705  003376  0100               	movlb	0	; () banked
 26706  003378  51BA               	movf	_lastSttFC2& (0+255),w,b
 26707  00337A  A4D8               	btfss	status,2,c
 26708  00337C  D036               	goto	i1l501
 26709                           
 26710                           ; BSR set to: 0
 26711                           ;PWMConfig.h: 93: lastSttFC2 = 1;
 26712  00337E  0E01               	movlw	1
 26713  003380  0100               	movlb	0	; () banked
 26714  003382  6FBA               	movwf	_lastSttFC2& (0+255),b
 26715                           
 26716                           ; BSR set to: 0
 26717                           ;PWMConfig.h: 94: setPWM2duty(0);
 26718  003384  0E00               	movlw	0
 26719  003386  0100               	movlb	0	; () banked
 26720  003388  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 26721  00338A  0E00               	movlw	0
 26722  00338C  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 26723  00338E  ECD1  F02C         	call	i1_setPWM2duty	;wreg free
 26724                           
 26725                           ;PWMConfig.h: 95: bladeIsUP = 0;
 26726  003392  0E00               	movlw	0
 26727  003394  0100               	movlb	0	; () banked
 26728  003396  6FC8               	movwf	_bladeIsUP& (0+255),b
 26729                           
 26730                           ; BSR set to: 0
 26731                           ;PWMConfig.h: 96: processTimer = 0;
 26732  003398  0E00               	movlw	0
 26733  00339A  6E37               	movwf	_processTimer,c
 26734  00339C  0E00               	movlw	0
 26735  00339E  6E38               	movwf	_processTimer+1,c
 26736  0033A0  0E00               	movlw	0
 26737  0033A2  6E39               	movwf	_processTimer+2,c
 26738  0033A4  0E00               	movlw	0
 26739  0033A6  6E3A               	movwf	_processTimer+3,c
 26740                           
 26741                           ; BSR set to: 0
 26742                           ;PWMConfig.h: 97: securTimer = 0;
 26743  0033A8  0E00               	movlw	0
 26744  0033AA  6E3B               	movwf	_securTimer,c
 26745  0033AC  0E00               	movlw	0
 26746  0033AE  6E3C               	movwf	_securTimer+1,c
 26747  0033B0  0E00               	movlw	0
 26748  0033B2  6E3D               	movwf	_securTimer+2,c
 26749  0033B4  0E00               	movlw	0
 26750  0033B6  6E3E               	movwf	_securTimer+3,c
 26751                           
 26752                           ; BSR set to: 0
 26753                           ;PWMConfig.h: 98: processState++;
 26754  0033B8  0100               	movlb	0	; () banked
 26755  0033BA  4BB4               	infsnz	_processState& (0+255),f,b
 26756  0033BC  2BB5               	incf	(_processState+1)& (0+255),f,b
 26757                           
 26758                           ; BSR set to: 0
 26759                           ;PWMConfig.h: 99: saveProcessState();
 26760  0033BE  EC79  F034         	call	_saveProcessState	;wreg free
 26761                           
 26762                           ;PWMConfig.h: 100: if(processState >= numCortes)
 26763  0033C2  0100               	movlb	0	; () banked
 26764  0033C4  51C6               	movf	_numCortes& (0+255),w,b
 26765  0033C6  0100               	movlb	0	; () banked
 26766  0033C8  5DB4               	subwf	_processState& (0+255),w,b
 26767  0033CA  0100               	movlb	0	; () banked
 26768  0033CC  51B5               	movf	(_processState+1)& (0+255),w,b
 26769  0033CE  0A80               	xorlw	128
 26770  0033D0  0100               	movlb	0	; () banked
 26771  0033D2  6F66               	movwf	??_T2int& (0+255),b
 26772  0033D4  0100               	movlb	0	; () banked
 26773  0033D6  51C7               	movf	(_numCortes+1)& (0+255),w,b
 26774  0033D8  0A80               	xorlw	128
 26775  0033DA  0100               	movlb	0	; () banked
 26776  0033DC  5966               	subwfb	??_T2int& (0+255),w,b
 26777  0033DE  B0D8               	btfsc	status,0,c
 26778                           
 26779                           ; BSR set to: 0
 26780                           ;PWMConfig.h: 101: LATCbits.LATC4 = 0;
 26781  0033E0  988B               	bcf	3979,4,c	;volatile
 26782                           
 26783                           ; BSR set to: 0
 26784                           ;PWMConfig.h: 103: t2Cont2 = 0;
 26785                           
 26786                           ; BSR set to: 0
 26787  0033E2  0E00               	movlw	0
 26788  0033E4  0100               	movlb	0	; () banked
 26789  0033E6  6FBD               	movwf	_t2Cont2& (0+255),b
 26790                           
 26791                           ;PWMConfig.h: 104: }else if(!PORTAbits.RA6 && lastSttFC2) {
 26792  0033E8  0012               	return	
 26793  0033EA                     i1l501:
 26794                           
 26795                           ; BSR set to: 0
 26796  0033EA  BC80               	btfsc	3968,6,c	;volatile
 26797  0033EC  D00C               	goto	i1l8613
 26798                           
 26799                           ; BSR set to: 0
 26800  0033EE  0100               	movlb	0	; () banked
 26801  0033F0  51BA               	movf	_lastSttFC2& (0+255),w,b
 26802  0033F2  B4D8               	btfsc	status,2,c
 26803  0033F4  D008               	goto	i1l8613
 26804                           
 26805                           ; BSR set to: 0
 26806                           ;PWMConfig.h: 105: if(t2Cont2 > 124)
 26807  0033F6  0E7C               	movlw	124
 26808  0033F8  0100               	movlb	0	; () banked
 26809  0033FA  65BD               	cpfsgt	_t2Cont2& (0+255),b
 26810  0033FC  0012               	return	
 26811                           
 26812                           ; BSR set to: 0
 26813                           ;PWMConfig.h: 106: lastSttFC2 = 0;
 26814  0033FE  0E00               	movlw	0
 26815  003400  0100               	movlb	0	; () banked
 26816  003402  6FBA               	movwf	_lastSttFC2& (0+255),b
 26817                           
 26818                           ; BSR set to: 0
 26819                           ;PWMConfig.h: 111: }else if(PORTAbits.RA6 == lastSttFC2) {
 26820  003404  0012               	return	
 26821  003406                     i1l8613:
 26822                           
 26823                           ; BSR set to: 0
 26824  003406  AC80               	btfss	3968,6,c	;volatile
 26825  003408  D002               	goto	i1u1245_20
 26826  00340A  0E01               	movlw	1
 26827  00340C  D001               	goto	i1u1245_26
 26828  00340E                     i1u1245_20:
 26829  00340E  0E00               	movlw	0
 26830  003410                     i1u1245_26:
 26831  003410  0100               	movlb	0	; () banked
 26832  003412  19BA               	xorwf	_lastSttFC2& (0+255),w,b
 26833  003414  A4D8               	btfss	status,2,c
 26834  003416  0012               	return	
 26835                           
 26836                           ; BSR set to: 0
 26837                           ;PWMConfig.h: 112: if(!PORTAbits.RA6) {
 26838  003418  BC80               	btfsc	3968,6,c	;volatile
 26839  00341A  0012               	return	
 26840                           
 26841                           ; BSR set to: 0
 26842                           ;PWMConfig.h: 113: holdFC2cont = 0;
 26843  00341C  0E00               	movlw	0
 26844  00341E  0100               	movlb	0	; () banked
 26845  003420  6FB7               	movwf	_holdFC2cont& (0+255),b
 26846                           
 26847                           ; BSR set to: 0
 26848                           
 26849                           ; BSR set to: 0
 26850                           
 26851                           ; BSR set to: 0
 26852                           
 26853                           ; BSR set to: 0
 26854                           
 26855                           ;PWMConfig.h: 115: }else {
 26856  003422  0012               	return	
 26857  003424                     __end_of_T2int:
 26858                           	opt stack 0
 26859                           pclatu	equ	0xFFB
 26860                           pclath	equ	0xFFA
 26861                           tblptru	equ	0xFF8
 26862                           tblptrh	equ	0xFF7
 26863                           tblptrl	equ	0xFF6
 26864                           tablat	equ	0xFF5
 26865                           prodh	equ	0xFF4
 26866                           prodl	equ	0xFF3
 26867                           intcon	equ	0xFF2
 26868                           postinc0	equ	0xFEE
 26869                           fsr0h	equ	0xFEA
 26870                           fsr0l	equ	0xFE9
 26871                           wreg	equ	0xFE8
 26872                           postdec1	equ	0xFE5
 26873                           fsr1h	equ	0xFE2
 26874                           fsr1l	equ	0xFE1
 26875                           bsr	equ	0xFE0
 26876                           indf2	equ	0xFDF
 26877                           postinc2	equ	0xFDE
 26878                           postdec2	equ	0xFDD
 26879                           plusw2	equ	0xFDB
 26880                           fsr2h	equ	0xFDA
 26881                           fsr2l	equ	0xFD9
 26882                           status	equ	0xFD8
 26883                           
 26884 ;; *************** function i1_setPWM2duty *****************
 26885 ;; Defined at:
 26886 ;;		line 37 in file "source/PWMConfig.h"
 26887 ;; Parameters:    Size  Location     Type
 26888 ;;  actuator        2    0[BANK0 ] short 
 26889 ;; Auto vars:     Size  Location     Type
 26890 ;;  setPWM2duty     2    4[BANK0 ] short 
 26891 ;; Return value:  Size  Location     Type
 26892 ;;                  1    wreg      void 
 26893 ;; Registers used:
 26894 ;;		wreg, status,2, status,0
 26895 ;; Tracked objects:
 26896 ;;		On entry : 0/0
 26897 ;;		On exit  : 0/0
 26898 ;;		Unchanged: 0/0
 26899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26900 ;;      Params:         0       2       0       0       0       0       0
 26901 ;;      Locals:         0       2       0       0       0       0       0
 26902 ;;      Temps:          0       2       0       0       0       0       0
 26903 ;;      Totals:         0       6       0       0       0       0       0
 26904 ;;Total ram usage:        6 bytes
 26905 ;; Hardware stack levels used:    1
 26906 ;; Hardware stack levels required when called:    4
 26907 ;; This function calls:
 26908 ;;		Nothing
 26909 ;; This function is called by:
 26910 ;;		_T2int
 26911 ;;		i1_initProtocoll
 26912 ;;		i1_initCalib
 26913 ;;		i1_pressENTER
 26914 ;; This function uses a non-reentrant model
 26915 ;;
 26916                           
 26917                           	psect	text117
 26918  0059A2                     __ptext117:
 26919                           	opt stack 0
 26920  0059A2                     i1_setPWM2duty:
 26921                           	opt stack 12
 26922                           
 26923                           ;PWMConfig.h: 38: short act = 400;
 26924                           
 26925                           ; BSR set to: 0
 26926                           ;incstack = 0
 26927  0059A2  0E01               	movlw	1
 26928  0059A4  0100               	movlb	0	; () banked
 26929  0059A6  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 26930  0059A8  0E90               	movlw	144
 26931  0059AA  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 26932                           
 26933                           ; BSR set to: 0
 26934                           ;PWMConfig.h: 39: if(actuator > 400)
 26935  0059AC  0100               	movlb	0	; () banked
 26936  0059AE  BF61               	btfsc	(i1setPWM2duty@actuator+1)& (0+255),7,b
 26937  0059B0  D00D               	goto	i1l6765
 26938  0059B2  0E91               	movlw	145
 26939  0059B4  0100               	movlb	0	; () banked
 26940  0059B6  5D60               	subwf	i1setPWM2duty@actuator& (0+255),w,b
 26941  0059B8  0E01               	movlw	1
 26942  0059BA  0100               	movlb	0	; () banked
 26943  0059BC  5961               	subwfb	(i1setPWM2duty@actuator+1)& (0+255),w,b
 26944  0059BE  A0D8               	btfss	status,0,c
 26945  0059C0  D005               	goto	i1l6765
 26946                           
 26947                           ; BSR set to: 0
 26948                           ;PWMConfig.h: 40: act = 800;
 26949  0059C2  0E03               	movlw	3
 26950  0059C4  0100               	movlb	0	; () banked
 26951  0059C6  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 26952  0059C8  0E20               	movlw	32
 26953  0059CA  D00F               	goto	L9
 26954  0059CC                     i1l6765:
 26955                           
 26956                           ; BSR set to: 0
 26957                           ;PWMConfig.h: 41: else if(actuator < -400)
 26958  0059CC  0100               	movlb	0	; () banked
 26959  0059CE  AF61               	btfss	(i1setPWM2duty@actuator+1)& (0+255),7,b
 26960  0059D0  D00E               	goto	i1l6769
 26961  0059D2  0E70               	movlw	112
 26962  0059D4  0100               	movlb	0	; () banked
 26963  0059D6  5D60               	subwf	i1setPWM2duty@actuator& (0+255),w,b
 26964  0059D8  0EFE               	movlw	254
 26965  0059DA  0100               	movlb	0	; () banked
 26966  0059DC  5961               	subwfb	(i1setPWM2duty@actuator+1)& (0+255),w,b
 26967  0059DE  B0D8               	btfsc	status,0,c
 26968  0059E0  D006               	goto	i1l6769
 26969                           
 26970                           ; BSR set to: 0
 26971                           ;PWMConfig.h: 42: act = 0;
 26972  0059E2  0E00               	movlw	0
 26973  0059E4  0100               	movlb	0	; () banked
 26974  0059E6  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 26975  0059E8  0E00               	movlw	0
 26976  0059EA                     L9:
 26977  0059EA  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 26978  0059EC  D00A               	goto	i1l484
 26979  0059EE                     i1l6769:
 26980                           
 26981                           ; BSR set to: 0
 26982                           ;PWMConfig.h: 43: else
 26983                           ;PWMConfig.h: 44: act = actuator + 400;
 26984  0059EE  0E90               	movlw	144
 26985  0059F0  0100               	movlb	0	; () banked
 26986  0059F2  2560               	addwf	i1setPWM2duty@actuator& (0+255),w,b
 26987  0059F4  0100               	movlb	0	; () banked
 26988  0059F6  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 26989  0059F8  0E01               	movlw	1
 26990  0059FA  0100               	movlb	0	; () banked
 26991  0059FC  2161               	addwfc	(i1setPWM2duty@actuator+1)& (0+255),w,b
 26992  0059FE  0100               	movlb	0	; () banked
 26993  005A00  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 26994  005A02                     i1l484:
 26995                           
 26996                           ; BSR set to: 0
 26997                           ;PWMConfig.h: 45: CCP2CONbits.DC2B = act;
 26998  005A02  C064  F062         	movff	i1setPWM2duty@act,??i1_setPWM2duty
 26999  005A06  0100               	movlb	0	; () banked
 27000  005A08  3B62               	swapf	??i1_setPWM2duty& (0+255),f,b
 27001  005A0A  5066               	movf	3942,w,c	;volatile
 27002  005A0C  0100               	movlb	0	; () banked
 27003  005A0E  1962               	xorwf	??i1_setPWM2duty& (0+255),w,b
 27004  005A10  0BCF               	andlw	-49
 27005  005A12  1962               	xorwf	??i1_setPWM2duty& (0+255),w,b
 27006  005A14  6E66               	movwf	3942,c	;volatile
 27007                           
 27008                           ;PWMConfig.h: 46: CCPR2L = act>>2;
 27009  005A16  C064  F062         	movff	i1setPWM2duty@act,??i1_setPWM2duty
 27010  005A1A  C065  F063         	movff	i1setPWM2duty@act+1,??i1_setPWM2duty+1
 27011  005A1E  0100               	movlb	0	; () banked
 27012  005A20  3563               	rlcf	(??i1_setPWM2duty+1)& (0+255),w,b
 27013  005A22  3363               	rrcf	(??i1_setPWM2duty+1)& (0+255),f,b
 27014  005A24  3362               	rrcf	??i1_setPWM2duty& (0+255),f,b
 27015  005A26  0100               	movlb	0	; () banked
 27016  005A28  3563               	rlcf	(??i1_setPWM2duty+1)& (0+255),w,b
 27017  005A2A  3363               	rrcf	(??i1_setPWM2duty+1)& (0+255),f,b
 27018  005A2C  3362               	rrcf	??i1_setPWM2duty& (0+255),f,b
 27019  005A2E  0100               	movlb	0	; () banked
 27020  005A30  5162               	movf	??i1_setPWM2duty& (0+255),w,b
 27021  005A32  6E67               	movwf	3943,c	;volatile
 27022                           
 27023                           ; BSR set to: 0
 27024  005A34  0012               	return		;funcret
 27025  005A36                     __end_ofi1_setPWM2duty:
 27026                           	opt stack 0
 27027                           pclatu	equ	0xFFB
 27028                           pclath	equ	0xFFA
 27029                           tblptru	equ	0xFF8
 27030                           tblptrh	equ	0xFF7
 27031                           tblptrl	equ	0xFF6
 27032                           tablat	equ	0xFF5
 27033                           prodh	equ	0xFF4
 27034                           prodl	equ	0xFF3
 27035                           intcon	equ	0xFF2
 27036                           postinc0	equ	0xFEE
 27037                           fsr0h	equ	0xFEA
 27038                           fsr0l	equ	0xFE9
 27039                           wreg	equ	0xFE8
 27040                           postdec1	equ	0xFE5
 27041                           fsr1h	equ	0xFE2
 27042                           fsr1l	equ	0xFE1
 27043                           bsr	equ	0xFE0
 27044                           indf2	equ	0xFDF
 27045                           postinc2	equ	0xFDE
 27046                           postdec2	equ	0xFDD
 27047                           plusw2	equ	0xFDB
 27048                           fsr2h	equ	0xFDA
 27049                           fsr2l	equ	0xFD9
 27050                           status	equ	0xFD8
 27051                           
 27052 ;; *************** function _saveProcessState *****************
 27053 ;; Defined at:
 27054 ;;		line 155 in file "source/sysParams.h"
 27055 ;; Parameters:    Size  Location     Type
 27056 ;;		None
 27057 ;; Auto vars:     Size  Location     Type
 27058 ;;		None
 27059 ;; Return value:  Size  Location     Type
 27060 ;;                  1    wreg      void 
 27061 ;; Registers used:
 27062 ;;		wreg, status,2, cstack
 27063 ;; Tracked objects:
 27064 ;;		On entry : 0/0
 27065 ;;		On exit  : 0/0
 27066 ;;		Unchanged: 0/0
 27067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27068 ;;      Params:         0       0       0       0       0       0       0
 27069 ;;      Locals:         0       0       0       0       0       0       0
 27070 ;;      Temps:          0       0       0       0       0       0       0
 27071 ;;      Totals:         0       0       0       0       0       0       0
 27072 ;;Total ram usage:        0 bytes
 27073 ;; Hardware stack levels used:    1
 27074 ;; Hardware stack levels required when called:    5
 27075 ;; This function calls:
 27076 ;;		i1_writeEEPROM
 27077 ;; This function is called by:
 27078 ;;		_T2int
 27079 ;; This function uses a non-reentrant model
 27080 ;;
 27081                           
 27082                           	psect	text118
 27083  0068F2                     __ptext118:
 27084                           	opt stack 0
 27085  0068F2                     _saveProcessState:
 27086                           	opt stack 13
 27087                           
 27088                           ;sysParams.h: 156: EECON1bits.WREN = 1;
 27089                           
 27090                           ; BSR set to: 0
 27091                           ;incstack = 0
 27092  0068F2  84A6               	bsf	4006,2,c	;volatile
 27093                           
 27094                           ;sysParams.h: 157: ie = INTCONbits.GIE;
 27095  0068F4  0E00               	movlw	0
 27096  0068F6  BEF2               	btfsc	intcon,7,c	;volatile
 27097  0068F8  0E01               	movlw	1
 27098  0068FA  0100               	movlb	0	; () banked
 27099  0068FC  6FB8               	movwf	_ie& (0+255),b
 27100                           
 27101                           ; BSR set to: 0
 27102                           ;sysParams.h: 158: INTCONbits.GIE = 0;
 27103  0068FE  9EF2               	bcf	intcon,7,c	;volatile
 27104                           
 27105                           ; BSR set to: 0
 27106                           ;sysParams.h: 159: writeEEPROM(30, processStarted);
 27107  006900  C0BB  F060         	movff	_processStarted,i1writeEEPROM@data
 27108  006904  0E1E               	movlw	30
 27109  006906  EC26  F036         	call	i1_writeEEPROM
 27110                           
 27111                           ;sysParams.h: 160: writeEEPROM(31, processState);
 27112  00690A  C0B4  F060         	movff	_processState,i1writeEEPROM@data
 27113  00690E  0E1F               	movlw	31
 27114  006910  EC26  F036         	call	i1_writeEEPROM
 27115                           
 27116                           ;sysParams.h: 161: writeEEPROM(32, bladeIsUP);
 27117  006914  C0C8  F060         	movff	_bladeIsUP,i1writeEEPROM@data
 27118  006918  0E20               	movlw	32
 27119  00691A  EC26  F036         	call	i1_writeEEPROM
 27120                           
 27121                           ;sysParams.h: 162: EECON1bits.WREN = 0;
 27122  00691E  94A6               	bcf	4006,2,c	;volatile
 27123                           
 27124                           ;sysParams.h: 163: INTCONbits.GIE = ie;
 27125  006920  0100               	movlb	0	; () banked
 27126  006922  B1B8               	btfsc	_ie& (0+255),0,b
 27127  006924  D002               	bra	i1u972_25
 27128  006926  9EF2               	bcf	intcon,7,c	;volatile
 27129  006928  D001               	bra	i1u972_26
 27130  00692A                     i1u972_25:
 27131  00692A  8EF2               	bsf	intcon,7,c	;volatile
 27132  00692C                     i1u972_26:
 27133  00692C  0012               	return		;funcret
 27134  00692E                     __end_of_saveProcessState:
 27135                           	opt stack 0
 27136                           pclatu	equ	0xFFB
 27137                           pclath	equ	0xFFA
 27138                           tblptru	equ	0xFF8
 27139                           tblptrh	equ	0xFF7
 27140                           tblptrl	equ	0xFF6
 27141                           tablat	equ	0xFF5
 27142                           prodh	equ	0xFF4
 27143                           prodl	equ	0xFF3
 27144                           intcon	equ	0xFF2
 27145                           postinc0	equ	0xFEE
 27146                           fsr0h	equ	0xFEA
 27147                           fsr0l	equ	0xFE9
 27148                           wreg	equ	0xFE8
 27149                           postdec1	equ	0xFE5
 27150                           fsr1h	equ	0xFE2
 27151                           fsr1l	equ	0xFE1
 27152                           bsr	equ	0xFE0
 27153                           indf2	equ	0xFDF
 27154                           postinc2	equ	0xFDE
 27155                           postdec2	equ	0xFDD
 27156                           plusw2	equ	0xFDB
 27157                           fsr2h	equ	0xFDA
 27158                           fsr2l	equ	0xFD9
 27159                           status	equ	0xFD8
 27160                           
 27161 ;; *************** function i1_writeEEPROM *****************
 27162 ;; Defined at:
 27163 ;;		line 51 in file "source/sysParams.h"
 27164 ;; Parameters:    Size  Location     Type
 27165 ;;  adr             1    wreg     unsigned char 
 27166 ;;  data            1    0[BANK0 ] unsigned char 
 27167 ;; Auto vars:     Size  Location     Type
 27168 ;;  adr             1    1[BANK0 ] unsigned char 
 27169 ;; Return value:  Size  Location     Type
 27170 ;;                  1    wreg      void 
 27171 ;; Registers used:
 27172 ;;		wreg, status,2
 27173 ;; Tracked objects:
 27174 ;;		On entry : 0/0
 27175 ;;		On exit  : 0/0
 27176 ;;		Unchanged: 0/0
 27177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27178 ;;      Params:         0       1       0       0       0       0       0
 27179 ;;      Locals:         0       1       0       0       0       0       0
 27180 ;;      Temps:          0       0       0       0       0       0       0
 27181 ;;      Totals:         0       2       0       0       0       0       0
 27182 ;;Total ram usage:        2 bytes
 27183 ;; Hardware stack levels used:    1
 27184 ;; Hardware stack levels required when called:    4
 27185 ;; This function calls:
 27186 ;;		Nothing
 27187 ;; This function is called by:
 27188 ;;		_saveProcessState
 27189 ;;		i1_saveSysParams
 27190 ;; This function uses a non-reentrant model
 27191 ;;
 27192                           
 27193                           	psect	text119
 27194  006C4C                     __ptext119:
 27195                           	opt stack 0
 27196  006C4C                     i1_writeEEPROM:
 27197                           	opt stack 13
 27198                           
 27199                           ;incstack = 0
 27200                           ;i1writeEEPROM@adr stored from wreg
 27201  006C4C  0100               	movlb	0	; () banked
 27202  006C4E  6F61               	movwf	i1writeEEPROM@adr& (0+255),b
 27203                           
 27204                           ;sysParams.h: 52: EEADR = adr;
 27205  006C50  C061  FFA9         	movff	i1writeEEPROM@adr,4009	;volatile
 27206                           
 27207                           ;sysParams.h: 53: EEDATA = data;
 27208  006C54  C060  FFA8         	movff	i1writeEEPROM@data,4008	;volatile
 27209                           
 27210                           ;sysParams.h: 54: EECON1bits.EEPGD = 0;
 27211  006C58  9EA6               	bcf	4006,7,c	;volatile
 27212                           
 27213                           ;sysParams.h: 55: EECON1bits.CFGS = 0;
 27214  006C5A  9CA6               	bcf	4006,6,c	;volatile
 27215                           
 27216                           ;sysParams.h: 56: EECON2 = 0x55;
 27217  006C5C  0E55               	movlw	85
 27218  006C5E  6EA7               	movwf	4007,c	;volatile
 27219                           
 27220                           ;sysParams.h: 57: EECON2 = 0xAA;
 27221  006C60  0EAA               	movlw	170
 27222  006C62  6EA7               	movwf	4007,c	;volatile
 27223                           
 27224                           ;sysParams.h: 58: EECON1bits.WR = 1;
 27225  006C64  82A6               	bsf	4006,1,c	;volatile
 27226  006C66                     i1l279:
 27227  006C66  A2A6               	btfss	4006,1,c	;volatile
 27228  006C68  0012               	return	
 27229  006C6A  D7FD               	goto	i1l279
 27230  006C6C                     __end_ofi1_writeEEPROM:
 27231                           	opt stack 0
 27232                           pclatu	equ	0xFFB
 27233                           pclath	equ	0xFFA
 27234                           tblptru	equ	0xFF8
 27235                           tblptrh	equ	0xFF7
 27236                           tblptrl	equ	0xFF6
 27237                           tablat	equ	0xFF5
 27238                           prodh	equ	0xFF4
 27239                           prodl	equ	0xFF3
 27240                           intcon	equ	0xFF2
 27241                           postinc0	equ	0xFEE
 27242                           fsr0h	equ	0xFEA
 27243                           fsr0l	equ	0xFE9
 27244                           wreg	equ	0xFE8
 27245                           postdec1	equ	0xFE5
 27246                           fsr1h	equ	0xFE2
 27247                           fsr1l	equ	0xFE1
 27248                           bsr	equ	0xFE0
 27249                           indf2	equ	0xFDF
 27250                           postinc2	equ	0xFDE
 27251                           postdec2	equ	0xFDD
 27252                           plusw2	equ	0xFDB
 27253                           fsr2h	equ	0xFDA
 27254                           fsr2l	equ	0xFD9
 27255                           status	equ	0xFD8
 27256                           
 27257 ;; *************** function _hp_isr *****************
 27258 ;; Defined at:
 27259 ;;		line 14 in file "source/main.c"
 27260 ;; Parameters:    Size  Location     Type
 27261 ;;		None
 27262 ;; Auto vars:     Size  Location     Type
 27263 ;;		None
 27264 ;; Return value:  Size  Location     Type
 27265 ;;                  1    wreg      void 
 27266 ;; Registers used:
 27267 ;;		wreg, status,2, status,0, cstack
 27268 ;; Tracked objects:
 27269 ;;		On entry : 0/0
 27270 ;;		On exit  : 0/0
 27271 ;;		Unchanged: 0/0
 27272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27273 ;;      Params:         0       0       0       0       0       0       0
 27274 ;;      Locals:         0       0       0       0       0       0       0
 27275 ;;      Temps:         14       0       0       0       0       0       0
 27276 ;;      Totals:        14       0       0       0       0       0       0
 27277 ;;Total ram usage:       14 bytes
 27278 ;; Hardware stack levels used:    1
 27279 ;; Hardware stack levels required when called:    3
 27280 ;; This function calls:
 27281 ;;		_T4int
 27282 ;; This function is called by:
 27283 ;;		Interrupt level 2
 27284 ;; This function uses a non-reentrant model
 27285 ;;
 27286                           
 27287                           	psect	intcode
 27288  000008                     __pintcode:
 27289                           	opt stack 0
 27290  000008                     _hp_isr:
 27291                           	opt stack 9
 27292                           
 27293                           ;incstack = 0
 27294  000008  825D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 27295  00000A  CFFA F029          	movff	pclath,??_hp_isr
 27296  00000E  CFFB F02A          	movff	pclatu,??_hp_isr+1
 27297  000012  EF53  F030         	goto	int_func
 27298                           pclatu	equ	0xFFB
 27299                           pclath	equ	0xFFA
 27300                           tblptru	equ	0xFF8
 27301                           tblptrh	equ	0xFF7
 27302                           tblptrl	equ	0xFF6
 27303                           tablat	equ	0xFF5
 27304                           prodh	equ	0xFF4
 27305                           prodl	equ	0xFF3
 27306                           intcon	equ	0xFF2
 27307                           postinc0	equ	0xFEE
 27308                           fsr0h	equ	0xFEA
 27309                           fsr0l	equ	0xFE9
 27310                           wreg	equ	0xFE8
 27311                           postdec1	equ	0xFE5
 27312                           fsr1h	equ	0xFE2
 27313                           fsr1l	equ	0xFE1
 27314                           bsr	equ	0xFE0
 27315                           indf2	equ	0xFDF
 27316                           postinc2	equ	0xFDE
 27317                           postdec2	equ	0xFDD
 27318                           plusw2	equ	0xFDB
 27319                           fsr2h	equ	0xFDA
 27320                           fsr2l	equ	0xFD9
 27321                           status	equ	0xFD8
 27322                           
 27323                           	psect	intcode_body
 27324  0060A6                     __pintcode_body:
 27325                           	opt stack 9
 27326  0060A6                     int_func:
 27327                           	opt stack 9
 27328  0060A6  CFE9 F02B          	movff	fsr0l,??_hp_isr+2
 27329  0060AA  CFEA F02C          	movff	fsr0h,??_hp_isr+3
 27330  0060AE  CFE1 F02D          	movff	fsr1l,??_hp_isr+4
 27331  0060B2  CFE2 F02E          	movff	fsr1h,??_hp_isr+5
 27332  0060B6  CFD9 F02F          	movff	fsr2l,??_hp_isr+6
 27333  0060BA  CFDA F030          	movff	fsr2h,??_hp_isr+7
 27334  0060BE  CFF3 F031          	movff	prodl,??_hp_isr+8
 27335  0060C2  CFF4 F032          	movff	prodh,??_hp_isr+9
 27336  0060C6  CFF6 F033          	movff	tblptrl,??_hp_isr+10
 27337  0060CA  CFF7 F034          	movff	tblptrh,??_hp_isr+11
 27338  0060CE  CFF8 F035          	movff	tblptru,??_hp_isr+12
 27339  0060D2  CFF5 F036          	movff	tablat,??_hp_isr+13
 27340                           
 27341                           ;main.c: 15: if(PIE5bits.TMR4IE && PIR5bits.TMR4IF) {
 27342  0060D6  B07D               	btfsc	3965,0,c	;volatile
 27343  0060D8  A07E               	btfss	3966,0,c	;volatile
 27344  0060DA  D003               	goto	i2l896
 27345                           
 27346                           ;main.c: 16: T4int();
 27347  0060DC  EC12  F01A         	call	_T4int	;wreg free
 27348                           
 27349                           ;main.c: 17: PIR5bits.TMR4IF = 0;
 27350  0060E0  907E               	bcf	3966,0,c	;volatile
 27351  0060E2                     i2l896:
 27352  0060E2  C036  FFF5         	movff	??_hp_isr+13,tablat
 27353  0060E6  C035  FFF8         	movff	??_hp_isr+12,tblptru
 27354  0060EA  C034  FFF7         	movff	??_hp_isr+11,tblptrh
 27355  0060EE  C033  FFF6         	movff	??_hp_isr+10,tblptrl
 27356  0060F2  C032  FFF4         	movff	??_hp_isr+9,prodh
 27357  0060F6  C031  FFF3         	movff	??_hp_isr+8,prodl
 27358  0060FA  C030  FFDA         	movff	??_hp_isr+7,fsr2h
 27359  0060FE  C02F  FFD9         	movff	??_hp_isr+6,fsr2l
 27360  006102  C02E  FFE2         	movff	??_hp_isr+5,fsr1h
 27361  006106  C02D  FFE1         	movff	??_hp_isr+4,fsr1l
 27362  00610A  C02C  FFEA         	movff	??_hp_isr+3,fsr0h
 27363  00610E  C02B  FFE9         	movff	??_hp_isr+2,fsr0l
 27364  006112  C02A  FFFB         	movff	??_hp_isr+1,pclatu
 27365  006116  C029  FFFA         	movff	??_hp_isr,pclath
 27366  00611A  925D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 27367  00611C  0011               	retfie		f
 27368  00611E                     __end_of_hp_isr:
 27369                           	opt stack 0
 27370                           pclatu	equ	0xFFB
 27371                           pclath	equ	0xFFA
 27372                           tblptru	equ	0xFF8
 27373                           tblptrh	equ	0xFF7
 27374                           tblptrl	equ	0xFF6
 27375                           tablat	equ	0xFF5
 27376                           prodh	equ	0xFF4
 27377                           prodl	equ	0xFF3
 27378                           intcon	equ	0xFF2
 27379                           postinc0	equ	0xFEE
 27380                           fsr0h	equ	0xFEA
 27381                           fsr0l	equ	0xFE9
 27382                           wreg	equ	0xFE8
 27383                           postdec1	equ	0xFE5
 27384                           fsr1h	equ	0xFE2
 27385                           fsr1l	equ	0xFE1
 27386                           bsr	equ	0xFE0
 27387                           indf2	equ	0xFDF
 27388                           postinc2	equ	0xFDE
 27389                           postdec2	equ	0xFDD
 27390                           plusw2	equ	0xFDB
 27391                           fsr2h	equ	0xFDA
 27392                           fsr2l	equ	0xFD9
 27393                           status	equ	0xFD8
 27394                           
 27395 ;; *************** function _T4int *****************
 27396 ;; Defined at:
 27397 ;;		line 21 in file "source/T4Config.h"
 27398 ;; Parameters:    Size  Location     Type
 27399 ;;		None
 27400 ;; Auto vars:     Size  Location     Type
 27401 ;;		None
 27402 ;; Return value:  Size  Location     Type
 27403 ;;                  1    wreg      void 
 27404 ;; Registers used:
 27405 ;;		wreg, status,2, status,0, cstack
 27406 ;; Tracked objects:
 27407 ;;		On entry : 0/0
 27408 ;;		On exit  : 0/0
 27409 ;;		Unchanged: 0/0
 27410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27411 ;;      Params:         0       0       0       0       0       0       0
 27412 ;;      Locals:         0       0       0       0       0       0       0
 27413 ;;      Temps:          1       0       0       0       0       0       0
 27414 ;;      Totals:         1       0       0       0       0       0       0
 27415 ;;Total ram usage:        1 bytes
 27416 ;; Hardware stack levels used:    1
 27417 ;; Hardware stack levels required when called:    2
 27418 ;; This function calls:
 27419 ;;		_cutError
 27420 ;;		i2___altoft
 27421 ;;		i2___ftadd
 27422 ;;		i2___ftge
 27423 ;;		i2_setPWM2duty
 27424 ;; This function is called by:
 27425 ;;		_hp_isr
 27426 ;; This function uses a non-reentrant model
 27427 ;;
 27428                           
 27429                           	psect	text121
 27430  003424                     __ptext121:
 27431                           	opt stack 0
 27432  003424                     _T4int:
 27433                           	opt stack 9
 27434                           
 27435                           ;T4Config.h: 22: LATBbits.LATB0 = processStarted;
 27436                           
 27437                           ;incstack = 0
 27438  003424  0100               	movlb	0	; () banked
 27439  003426  B1BB               	btfsc	_processStarted& (0+255),0,b
 27440  003428  D002               	bra	i2u1265_45
 27441  00342A  908A               	bcf	3978,0,c	;volatile
 27442  00342C  D001               	bra	i2u1265_46
 27443  00342E                     i2u1265_45:
 27444  00342E  808A               	bsf	3978,0,c	;volatile
 27445  003430                     i2u1265_46:
 27446  003430  0004               	clrwdt		;# 
 27447                           
 27448                           ;T4Config.h: 24: if(PORTCbits.RC2 || PORTCbits.RC3)
 27449  003432  A482               	btfss	3970,2,c	;volatile
 27450  003434  B682               	btfsc	3970,3,c	;volatile
 27451  003436  D001               	goto	i2l8799
 27452  003438  D002               	goto	i2l8801
 27453  00343A                     i2l8799:
 27454                           
 27455                           ;T4Config.h: 25: cutError();
 27456  00343A  EC98  F035         	call	_cutError	;wreg free
 27457  00343E                     i2l8801:
 27458                           
 27459                           ;T4Config.h: 26: processTimer++;
 27460  00343E  0E01               	movlw	1
 27461  003440  2637               	addwf	_processTimer,f,c
 27462  003442  0E00               	movlw	0
 27463  003444  2238               	addwfc	_processTimer+1,f,c
 27464  003446  2239               	addwfc	_processTimer+2,f,c
 27465  003448  223A               	addwfc	_processTimer+3,f,c
 27466                           
 27467                           ;T4Config.h: 27: if(processStarted) {
 27468  00344A  0100               	movlb	0	; () banked
 27469  00344C  51BB               	movf	_processStarted& (0+255),w,b
 27470  00344E  B4D8               	btfsc	status,2,c
 27471  003450  D04E               	goto	i2l8815
 27472                           
 27473                           ; BSR set to: 0
 27474                           ;T4Config.h: 28: securTimer++;
 27475  003452  0E01               	movlw	1
 27476  003454  263B               	addwf	_securTimer,f,c
 27477  003456  0E00               	movlw	0
 27478  003458  223C               	addwfc	_securTimer+1,f,c
 27479  00345A  223D               	addwfc	_securTimer+2,f,c
 27480  00345C  223E               	addwfc	_securTimer+3,f,c
 27481                           
 27482                           ;T4Config.h: 29: if(bladeIsUP == 1) {
 27483  00345E  0100               	movlb	0	; () banked
 27484  003460  05C8               	decf	_bladeIsUP& (0+255),w,b
 27485  003462  A4D8               	btfss	status,2,c
 27486  003464  D035               	goto	i2l8811
 27487                           
 27488                           ; BSR set to: 0
 27489                           ;T4Config.h: 30: if(securTimer > timsXcorte + maxTimePerCut)
 27490  003466  C05A  F016         	movff	_timsXcorte,i2___ftadd@f2
 27491  00346A  C05B  F017         	movff	_timsXcorte+1,i2___ftadd@f2+1
 27492  00346E  C05C  F018         	movff	_timsXcorte+2,i2___ftadd@f2+2
 27493  003472  C04C  F009         	movff	_maxTimePerCut,i2___altoft@c
 27494  003476  C04D  F00A         	movff	_maxTimePerCut+1,i2___altoft@c+1
 27495  00347A  C04E  F00B         	movff	_maxTimePerCut+2,i2___altoft@c+2
 27496  00347E  C04F  F00C         	movff	_maxTimePerCut+3,i2___altoft@c+3
 27497  003482  EC8F  F030         	call	i2___altoft	;wreg free
 27498  003486  C009  F013         	movff	?i2___altoft,i2___ftadd@f1
 27499  00348A  C00A  F014         	movff	?i2___altoft+1,i2___ftadd@f1+1
 27500  00348E  C00B  F015         	movff	?i2___altoft+2,i2___ftadd@f1+2
 27501  003492  EC43  F015         	call	i2___ftadd	;wreg free
 27502  003496  C013  F01F         	movff	?i2___ftadd,i2___ftge@ff1
 27503  00349A  C014  F020         	movff	?i2___ftadd+1,i2___ftge@ff1+1
 27504  00349E  C015  F021         	movff	?i2___ftadd+2,i2___ftge@ff1+2
 27505  0034A2  C03B  F009         	movff	_securTimer,i2___altoft@c
 27506  0034A6  C03C  F00A         	movff	_securTimer+1,i2___altoft@c+1
 27507  0034AA  C03D  F00B         	movff	_securTimer+2,i2___altoft@c+2
 27508  0034AE  C03E  F00C         	movff	_securTimer+3,i2___altoft@c+3
 27509  0034B2  EC8F  F030         	call	i2___altoft	;wreg free
 27510  0034B6  C009  F022         	movff	?i2___altoft,i2___ftge@ff2
 27511  0034BA  C00A  F023         	movff	?i2___altoft+1,i2___ftge@ff2+1
 27512  0034BE  C00B  F024         	movff	?i2___altoft+2,i2___ftge@ff2+2
 27513  0034C2  ECF6  F02D         	call	i2___ftge	;wreg free
 27514  0034C6  B0D8               	btfsc	status,0,c
 27515  0034C8  D012               	goto	i2l8815
 27516                           
 27517                           ;T4Config.h: 31: cutError();
 27518  0034CA  EC98  F035         	call	_cutError	;wreg free
 27519                           
 27520                           ;T4Config.h: 32: }else {
 27521  0034CE  D00F               	goto	i2l8815
 27522  0034D0                     i2l8811:
 27523                           
 27524                           ;T4Config.h: 33: if(securTimer > maxTimePerCut)
 27525  0034D0  503B               	movf	_securTimer,w,c
 27526  0034D2  5C4C               	subwf	_maxTimePerCut,w,c
 27527  0034D4  503C               	movf	_securTimer+1,w,c
 27528  0034D6  584D               	subwfb	_maxTimePerCut+1,w,c
 27529  0034D8  503D               	movf	_securTimer+2,w,c
 27530  0034DA  584E               	subwfb	_maxTimePerCut+2,w,c
 27531  0034DC  504F               	movf	_maxTimePerCut+3,w,c
 27532  0034DE  0A80               	xorlw	128
 27533  0034E0  6E28               	movwf	??_T4int& (0+255),c
 27534  0034E2  503E               	movf	_securTimer+3,w,c
 27535  0034E4  0A80               	xorlw	128
 27536  0034E6  5828               	subwfb	??_T4int& (0+255),w,c
 27537  0034E8  A0D8               	btfss	status,0,c
 27538                           
 27539                           ;T4Config.h: 34: cutError();
 27540  0034EA  EC98  F035         	call	_cutError	;wreg free
 27541  0034EE                     i2l8815:
 27542                           
 27543                           ;T4Config.h: 35: }
 27544                           ;T4Config.h: 36: }
 27545                           ;T4Config.h: 37: if(bladeIsUP == 1) {
 27546  0034EE  0100               	movlb	0	; () banked
 27547  0034F0  05C8               	decf	_bladeIsUP& (0+255),w,b
 27548  0034F2  A4D8               	btfss	status,2,c
 27549  0034F4  D034               	goto	i2l8827
 27550                           
 27551                           ; BSR set to: 0
 27552                           ;T4Config.h: 38: if(processTimer >= timsXcorte && processStarted && processState < numCo
      +                          rtes) {
 27553  0034F6  C037  F009         	movff	_processTimer,i2___altoft@c
 27554  0034FA  C038  F00A         	movff	_processTimer+1,i2___altoft@c+1
 27555  0034FE  C039  F00B         	movff	_processTimer+2,i2___altoft@c+2
 27556  003502  C03A  F00C         	movff	_processTimer+3,i2___altoft@c+3
 27557  003506  EC8F  F030         	call	i2___altoft	;wreg free
 27558  00350A  C009  F01F         	movff	?i2___altoft,i2___ftge@ff1
 27559  00350E  C00A  F020         	movff	?i2___altoft+1,i2___ftge@ff1+1
 27560  003512  C00B  F021         	movff	?i2___altoft+2,i2___ftge@ff1+2
 27561  003516  C05A  F022         	movff	_timsXcorte,i2___ftge@ff2
 27562  00351A  C05B  F023         	movff	_timsXcorte+1,i2___ftge@ff2+1
 27563  00351E  C05C  F024         	movff	_timsXcorte+2,i2___ftge@ff2+2
 27564  003522  ECF6  F02D         	call	i2___ftge	;wreg free
 27565  003526  A0D8               	btfss	status,0,c
 27566  003528  0012               	return	
 27567  00352A  0100               	movlb	0	; () banked
 27568  00352C  51BB               	movf	_processStarted& (0+255),w,b
 27569  00352E  B4D8               	btfsc	status,2,c
 27570  003530  0012               	return	
 27571                           
 27572                           ; BSR set to: 0
 27573  003532  0100               	movlb	0	; () banked
 27574  003534  51C6               	movf	_numCortes& (0+255),w,b
 27575  003536  0100               	movlb	0	; () banked
 27576  003538  5DB4               	subwf	_processState& (0+255),w,b
 27577  00353A  0100               	movlb	0	; () banked
 27578  00353C  51B5               	movf	(_processState+1)& (0+255),w,b
 27579  00353E  0A80               	xorlw	128
 27580  003540  6E28               	movwf	??_T4int& (0+255),c
 27581  003542  0100               	movlb	0	; () banked
 27582  003544  51C7               	movf	(_numCortes+1)& (0+255),w,b
 27583  003546  0A80               	xorlw	128
 27584  003548  5828               	subwfb	??_T4int& (0+255),w,c
 27585  00354A  B0D8               	btfsc	status,0,c
 27586  00354C  0012               	return	
 27587                           
 27588                           ; BSR set to: 0
 27589                           ;T4Config.h: 39: setPWM2duty(400);
 27590  00354E  0E01               	movlw	1
 27591  003550  6E02               	movwf	i2setPWM2duty@actuator+1,c
 27592  003552  0E90               	movlw	144
 27593  003554  6E01               	movwf	i2setPWM2duty@actuator,c
 27594  003556  ECB5  F031         	call	i2_setPWM2duty	;wreg free
 27595                           
 27596                           ;T4Config.h: 40: LATCbits.LATC4 = 1;
 27597  00355A  888B               	bsf	3979,4,c	;volatile
 27598                           
 27599                           ;T4Config.h: 41: }
 27600                           ;T4Config.h: 42: }else if(bladeIsUP == 0){
 27601  00355C  0012               	return	
 27602  00355E                     i2l8827:
 27603  00355E  0100               	movlb	0	; () banked
 27604  003560  51C8               	movf	_bladeIsUP& (0+255),w,b
 27605  003562  A4D8               	btfss	status,2,c
 27606  003564  0012               	return	
 27607                           
 27608                           ; BSR set to: 0
 27609                           ;T4Config.h: 43: if(processTimer >= timeDOWN && processStarted) {
 27610  003566  5050               	movf	_timeDOWN,w,c
 27611  003568  5C37               	subwf	_processTimer,w,c
 27612  00356A  5051               	movf	_timeDOWN+1,w,c
 27613  00356C  5838               	subwfb	_processTimer+1,w,c
 27614  00356E  5052               	movf	_timeDOWN+2,w,c
 27615  003570  5839               	subwfb	_processTimer+2,w,c
 27616  003572  503A               	movf	_processTimer+3,w,c
 27617  003574  0A80               	xorlw	128
 27618  003576  6E28               	movwf	??_T4int& (0+255),c
 27619  003578  5053               	movf	_timeDOWN+3,w,c
 27620  00357A  0A80               	xorlw	128
 27621  00357C  5828               	subwfb	??_T4int& (0+255),w,c
 27622  00357E  A0D8               	btfss	status,0,c
 27623  003580  0012               	return	
 27624                           
 27625                           ; BSR set to: 0
 27626  003582  0100               	movlb	0	; () banked
 27627  003584  51BB               	movf	_processStarted& (0+255),w,b
 27628  003586  B4D8               	btfsc	status,2,c
 27629  003588  0012               	return	
 27630                           
 27631                           ; BSR set to: 0
 27632                           ;T4Config.h: 44: setPWM2duty(-400);
 27633  00358A  0EFE               	movlw	254
 27634  00358C  6E02               	movwf	i2setPWM2duty@actuator+1,c
 27635  00358E  0E70               	movlw	112
 27636  003590  6E01               	movwf	i2setPWM2duty@actuator,c
 27637  003592  ECB5  F031         	call	i2_setPWM2duty	;wreg free
 27638  003596  0012               	return	
 27639  003598                     __end_of_T4int:
 27640                           	opt stack 0
 27641                           pclatu	equ	0xFFB
 27642                           pclath	equ	0xFFA
 27643                           tblptru	equ	0xFF8
 27644                           tblptrh	equ	0xFF7
 27645                           tblptrl	equ	0xFF6
 27646                           tablat	equ	0xFF5
 27647                           prodh	equ	0xFF4
 27648                           prodl	equ	0xFF3
 27649                           intcon	equ	0xFF2
 27650                           postinc0	equ	0xFEE
 27651                           fsr0h	equ	0xFEA
 27652                           fsr0l	equ	0xFE9
 27653                           wreg	equ	0xFE8
 27654                           postdec1	equ	0xFE5
 27655                           fsr1h	equ	0xFE2
 27656                           fsr1l	equ	0xFE1
 27657                           bsr	equ	0xFE0
 27658                           indf2	equ	0xFDF
 27659                           postinc2	equ	0xFDE
 27660                           postdec2	equ	0xFDD
 27661                           plusw2	equ	0xFDB
 27662                           fsr2h	equ	0xFDA
 27663                           fsr2l	equ	0xFD9
 27664                           status	equ	0xFD8
 27665                           
 27666 ;; *************** function i2_setPWM2duty *****************
 27667 ;; Defined at:
 27668 ;;		line 37 in file "source/PWMConfig.h"
 27669 ;; Parameters:    Size  Location     Type
 27670 ;;  actuator        2    0[COMRAM] short 
 27671 ;; Auto vars:     Size  Location     Type
 27672 ;;  setPWM2duty     2    4[COMRAM] short 
 27673 ;; Return value:  Size  Location     Type
 27674 ;;                  1    wreg      void 
 27675 ;; Registers used:
 27676 ;;		wreg, status,2, status,0
 27677 ;; Tracked objects:
 27678 ;;		On entry : 0/0
 27679 ;;		On exit  : 0/0
 27680 ;;		Unchanged: 0/0
 27681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27682 ;;      Params:         2       0       0       0       0       0       0
 27683 ;;      Locals:         2       0       0       0       0       0       0
 27684 ;;      Temps:          2       0       0       0       0       0       0
 27685 ;;      Totals:         6       0       0       0       0       0       0
 27686 ;;Total ram usage:        6 bytes
 27687 ;; Hardware stack levels used:    1
 27688 ;; This function calls:
 27689 ;;		Nothing
 27690 ;; This function is called by:
 27691 ;;		_T4int
 27692 ;; This function uses a non-reentrant model
 27693 ;;
 27694                           
 27695                           	psect	text122
 27696  00636A                     __ptext122:
 27697                           	opt stack 0
 27698  00636A                     i2_setPWM2duty:
 27699                           	opt stack 10
 27700                           
 27701                           ;PWMConfig.h: 38: short act = 400;
 27702                           
 27703                           ;incstack = 0
 27704  00636A  0E01               	movlw	1
 27705  00636C  6E06               	movwf	i2setPWM2duty@act+1,c
 27706  00636E  0E90               	movlw	144
 27707  006370  6E05               	movwf	i2setPWM2duty@act,c
 27708                           
 27709                           ;PWMConfig.h: 39: if(actuator > 400)
 27710  006372  BE02               	btfsc	i2setPWM2duty@actuator+1,7,c
 27711  006374  D00A               	goto	i2l7951
 27712  006376  0E91               	movlw	145
 27713  006378  5C01               	subwf	i2setPWM2duty@actuator,w,c
 27714  00637A  0E01               	movlw	1
 27715  00637C  5802               	subwfb	i2setPWM2duty@actuator+1,w,c
 27716  00637E  A0D8               	btfss	status,0,c
 27717  006380  D004               	goto	i2l7951
 27718                           
 27719                           ;PWMConfig.h: 40: act = 800;
 27720  006382  0E03               	movlw	3
 27721  006384  6E06               	movwf	i2setPWM2duty@act+1,c
 27722  006386  0E20               	movlw	32
 27723  006388  D00B               	goto	L10
 27724  00638A                     i2l7951:
 27725                           
 27726                           ;PWMConfig.h: 41: else if(actuator < -400)
 27727  00638A  AE02               	btfss	i2setPWM2duty@actuator+1,7,c
 27728  00638C  D00B               	goto	i2l7955
 27729  00638E  0E70               	movlw	112
 27730  006390  5C01               	subwf	i2setPWM2duty@actuator,w,c
 27731  006392  0EFE               	movlw	254
 27732  006394  5802               	subwfb	i2setPWM2duty@actuator+1,w,c
 27733  006396  B0D8               	btfsc	status,0,c
 27734  006398  D005               	goto	i2l7955
 27735                           
 27736                           ;PWMConfig.h: 42: act = 0;
 27737  00639A  0E00               	movlw	0
 27738  00639C  6E06               	movwf	i2setPWM2duty@act+1,c
 27739  00639E  0E00               	movlw	0
 27740  0063A0                     L10:
 27741  0063A0  6E05               	movwf	i2setPWM2duty@act,c
 27742  0063A2  D006               	goto	i2l484
 27743  0063A4                     i2l7955:
 27744                           
 27745                           ;PWMConfig.h: 43: else
 27746                           ;PWMConfig.h: 44: act = actuator + 400;
 27747  0063A4  0E90               	movlw	144
 27748  0063A6  2401               	addwf	i2setPWM2duty@actuator,w,c
 27749  0063A8  6E05               	movwf	i2setPWM2duty@act,c
 27750  0063AA  0E01               	movlw	1
 27751  0063AC  2002               	addwfc	i2setPWM2duty@actuator+1,w,c
 27752  0063AE  6E06               	movwf	i2setPWM2duty@act+1,c
 27753  0063B0                     i2l484:
 27754                           
 27755                           ;PWMConfig.h: 45: CCP2CONbits.DC2B = act;
 27756  0063B0  C005  F003         	movff	i2setPWM2duty@act,??i2_setPWM2duty
 27757  0063B4  3A03               	swapf	??i2_setPWM2duty,f,c
 27758  0063B6  5066               	movf	3942,w,c	;volatile
 27759  0063B8  1803               	xorwf	??i2_setPWM2duty,w,c
 27760  0063BA  0BCF               	andlw	-49
 27761  0063BC  1803               	xorwf	??i2_setPWM2duty,w,c
 27762  0063BE  6E66               	movwf	3942,c	;volatile
 27763                           
 27764                           ;PWMConfig.h: 46: CCPR2L = act>>2;
 27765  0063C0  C005  F003         	movff	i2setPWM2duty@act,??i2_setPWM2duty
 27766  0063C4  C006  F004         	movff	i2setPWM2duty@act+1,??i2_setPWM2duty+1
 27767  0063C8  3404               	rlcf	??i2_setPWM2duty+1,w,c
 27768  0063CA  3204               	rrcf	??i2_setPWM2duty+1,f,c
 27769  0063CC  3203               	rrcf	??i2_setPWM2duty,f,c
 27770  0063CE  3404               	rlcf	??i2_setPWM2duty+1,w,c
 27771  0063D0  3204               	rrcf	??i2_setPWM2duty+1,f,c
 27772  0063D2  3203               	rrcf	??i2_setPWM2duty,f,c
 27773  0063D4  5003               	movf	??i2_setPWM2duty,w,c
 27774  0063D6  6E67               	movwf	3943,c	;volatile
 27775  0063D8  0012               	return		;funcret
 27776  0063DA                     __end_ofi2_setPWM2duty:
 27777                           	opt stack 0
 27778                           pclatu	equ	0xFFB
 27779                           pclath	equ	0xFFA
 27780                           tblptru	equ	0xFF8
 27781                           tblptrh	equ	0xFF7
 27782                           tblptrl	equ	0xFF6
 27783                           tablat	equ	0xFF5
 27784                           prodh	equ	0xFF4
 27785                           prodl	equ	0xFF3
 27786                           intcon	equ	0xFF2
 27787                           postinc0	equ	0xFEE
 27788                           fsr0h	equ	0xFEA
 27789                           fsr0l	equ	0xFE9
 27790                           wreg	equ	0xFE8
 27791                           postdec1	equ	0xFE5
 27792                           fsr1h	equ	0xFE2
 27793                           fsr1l	equ	0xFE1
 27794                           bsr	equ	0xFE0
 27795                           indf2	equ	0xFDF
 27796                           postinc2	equ	0xFDE
 27797                           postdec2	equ	0xFDD
 27798                           plusw2	equ	0xFDB
 27799                           fsr2h	equ	0xFDA
 27800                           fsr2l	equ	0xFD9
 27801                           status	equ	0xFD8
 27802                           
 27803 ;; *************** function i2___ftge *****************
 27804 ;; Defined at:
 27805 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 27806 ;; Parameters:    Size  Location     Type
 27807 ;;  ff1             3   30[COMRAM] float 
 27808 ;;  ff2             3   33[COMRAM] float 
 27809 ;; Auto vars:     Size  Location     Type
 27810 ;;		None
 27811 ;; Return value:  Size  Location     Type
 27812 ;;		None               void
 27813 ;; Registers used:
 27814 ;;		wreg, status,2, status,0
 27815 ;; Tracked objects:
 27816 ;;		On entry : 0/0
 27817 ;;		On exit  : 0/0
 27818 ;;		Unchanged: 0/0
 27819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27820 ;;      Params:         6       0       0       0       0       0       0
 27821 ;;      Locals:         0       0       0       0       0       0       0
 27822 ;;      Temps:          3       0       0       0       0       0       0
 27823 ;;      Totals:         9       0       0       0       0       0       0
 27824 ;;Total ram usage:        9 bytes
 27825 ;; Hardware stack levels used:    1
 27826 ;; This function calls:
 27827 ;;		Nothing
 27828 ;; This function is called by:
 27829 ;;		_T4int
 27830 ;; This function uses a non-reentrant model
 27831 ;;
 27832                           
 27833                           	psect	text123
 27834  005BEC                     __ptext123:
 27835                           	opt stack 0
 27836  005BEC                     i2___ftge:
 27837                           	opt stack 10
 27838                           
 27839                           ;incstack = 0
 27840  005BEC  AE21               	btfss	i2___ftge@ff1+2,7,c
 27841  005BEE  D016               	goto	i2l8423
 27842  005BF0  C01F  F025         	movff	i2___ftge@ff1,??i2___ftge
 27843  005BF4  C020  F026         	movff	i2___ftge@ff1+1,??i2___ftge+1
 27844  005BF8  C021  F027         	movff	i2___ftge@ff1+2,??i2___ftge+2
 27845  005BFC  1E25               	comf	??i2___ftge,f,c
 27846  005BFE  1E26               	comf	??i2___ftge+1,f,c
 27847  005C00  1E27               	comf	??i2___ftge+2,f,c
 27848  005C02  2A25               	incf	??i2___ftge,f,c
 27849  005C04  0E00               	movlw	0
 27850  005C06  2226               	addwfc	??i2___ftge+1,f,c
 27851  005C08  2227               	addwfc	??i2___ftge+2,f,c
 27852  005C0A  0E00               	movlw	0
 27853  005C0C  2425               	addwf	??i2___ftge,w,c
 27854  005C0E  6E1F               	movwf	i2___ftge@ff1,c
 27855  005C10  0E00               	movlw	0
 27856  005C12  2026               	addwfc	??i2___ftge+1,w,c
 27857  005C14  6E20               	movwf	i2___ftge@ff1+1,c
 27858  005C16  0E80               	movlw	128
 27859  005C18  2027               	addwfc	??i2___ftge+2,w,c
 27860  005C1A  6E21               	movwf	i2___ftge@ff1+2,c
 27861  005C1C                     i2l8423:
 27862  005C1C  AE24               	btfss	i2___ftge@ff2+2,7,c
 27863  005C1E  D016               	goto	i2l8427
 27864  005C20  C022  F025         	movff	i2___ftge@ff2,??i2___ftge
 27865  005C24  C023  F026         	movff	i2___ftge@ff2+1,??i2___ftge+1
 27866  005C28  C024  F027         	movff	i2___ftge@ff2+2,??i2___ftge+2
 27867  005C2C  1E25               	comf	??i2___ftge,f,c
 27868  005C2E  1E26               	comf	??i2___ftge+1,f,c
 27869  005C30  1E27               	comf	??i2___ftge+2,f,c
 27870  005C32  2A25               	incf	??i2___ftge,f,c
 27871  005C34  0E00               	movlw	0
 27872  005C36  2226               	addwfc	??i2___ftge+1,f,c
 27873  005C38  2227               	addwfc	??i2___ftge+2,f,c
 27874  005C3A  0E00               	movlw	0
 27875  005C3C  2425               	addwf	??i2___ftge,w,c
 27876  005C3E  6E22               	movwf	i2___ftge@ff2,c
 27877  005C40  0E00               	movlw	0
 27878  005C42  2026               	addwfc	??i2___ftge+1,w,c
 27879  005C44  6E23               	movwf	i2___ftge@ff2+1,c
 27880  005C46  0E80               	movlw	128
 27881  005C48  2027               	addwfc	??i2___ftge+2,w,c
 27882  005C4A  6E24               	movwf	i2___ftge@ff2+2,c
 27883  005C4C                     i2l8427:
 27884  005C4C  0E00               	movlw	0
 27885  005C4E  1A1F               	xorwf	i2___ftge@ff1,f,c
 27886  005C50  0E00               	movlw	0
 27887  005C52  1A20               	xorwf	i2___ftge@ff1+1,f,c
 27888  005C54  0E80               	movlw	128
 27889  005C56  1A21               	xorwf	i2___ftge@ff1+2,f,c
 27890  005C58  0E00               	movlw	0
 27891  005C5A  1A22               	xorwf	i2___ftge@ff2,f,c
 27892  005C5C  0E00               	movlw	0
 27893  005C5E  1A23               	xorwf	i2___ftge@ff2+1,f,c
 27894  005C60  0E80               	movlw	128
 27895  005C62  1A24               	xorwf	i2___ftge@ff2+2,f,c
 27896  005C64  5022               	movf	i2___ftge@ff2,w,c
 27897  005C66  5C1F               	subwf	i2___ftge@ff1,w,c
 27898  005C68  5023               	movf	i2___ftge@ff2+1,w,c
 27899  005C6A  5820               	subwfb	i2___ftge@ff1+1,w,c
 27900  005C6C  5024               	movf	i2___ftge@ff2+2,w,c
 27901  005C6E  5821               	subwfb	i2___ftge@ff1+2,w,c
 27902  005C70  B0D8               	btfsc	status,0,c
 27903  005C72  D002               	goto	i2l8433
 27904  005C74  90D8               	bcf	status,0,c
 27905  005C76  0012               	return	
 27906  005C78                     i2l8433:
 27907  005C78  80D8               	bsf	status,0,c
 27908  005C7A  0012               	return	
 27909  005C7C                     __end_ofi2___ftge:
 27910                           	opt stack 0
 27911                           pclatu	equ	0xFFB
 27912                           pclath	equ	0xFFA
 27913                           tblptru	equ	0xFF8
 27914                           tblptrh	equ	0xFF7
 27915                           tblptrl	equ	0xFF6
 27916                           tablat	equ	0xFF5
 27917                           prodh	equ	0xFF4
 27918                           prodl	equ	0xFF3
 27919                           intcon	equ	0xFF2
 27920                           postinc0	equ	0xFEE
 27921                           fsr0h	equ	0xFEA
 27922                           fsr0l	equ	0xFE9
 27923                           wreg	equ	0xFE8
 27924                           postdec1	equ	0xFE5
 27925                           fsr1h	equ	0xFE2
 27926                           fsr1l	equ	0xFE1
 27927                           bsr	equ	0xFE0
 27928                           indf2	equ	0xFDF
 27929                           postinc2	equ	0xFDE
 27930                           postdec2	equ	0xFDD
 27931                           plusw2	equ	0xFDB
 27932                           fsr2h	equ	0xFDA
 27933                           fsr2l	equ	0xFD9
 27934                           status	equ	0xFD8
 27935                           
 27936 ;; *************** function i2___ftadd *****************
 27937 ;; Defined at:
 27938 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 27939 ;; Parameters:    Size  Location     Type
 27940 ;;  f1              3   18[COMRAM] float 
 27941 ;;  f2              3   21[COMRAM] float 
 27942 ;; Auto vars:     Size  Location     Type
 27943 ;;  __ftadd         1   29[COMRAM] unsigned char 
 27944 ;;  __ftadd         1   28[COMRAM] unsigned char 
 27945 ;;  __ftadd         1   27[COMRAM] unsigned char 
 27946 ;; Return value:  Size  Location     Type
 27947 ;;                  3   18[COMRAM] float 
 27948 ;; Registers used:
 27949 ;;		wreg, status,2, status,0, cstack
 27950 ;; Tracked objects:
 27951 ;;		On entry : 0/0
 27952 ;;		On exit  : 0/0
 27953 ;;		Unchanged: 0/0
 27954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27955 ;;      Params:         6       0       0       0       0       0       0
 27956 ;;      Locals:         3       0       0       0       0       0       0
 27957 ;;      Temps:          3       0       0       0       0       0       0
 27958 ;;      Totals:        12       0       0       0       0       0       0
 27959 ;;Total ram usage:       12 bytes
 27960 ;; Hardware stack levels used:    1
 27961 ;; Hardware stack levels required when called:    1
 27962 ;; This function calls:
 27963 ;;		i2___ftpack
 27964 ;; This function is called by:
 27965 ;;		_T4int
 27966 ;; This function uses a non-reentrant model
 27967 ;;
 27968                           
 27969                           	psect	text124
 27970  002A86                     __ptext124:
 27971                           	opt stack 0
 27972  002A86                     i2___ftadd:
 27973                           	opt stack 9
 27974                           
 27975                           ;incstack = 0
 27976  002A86  C015  F019         	movff	i2___ftadd@f1+2,??i2___ftadd
 27977  002A8A  6A1A               	clrf	(??i2___ftadd+1)& (0+255),c
 27978  002A8C  6A1B               	clrf	(??i2___ftadd+2)& (0+255),c
 27979  002A8E  3414               	rlcf	i2___ftadd@f1+1,w,c
 27980  002A90  3619               	rlcf	??i2___ftadd& (0+255),f,c
 27981  002A92  E301               	bnc	u1199_41
 27982  002A94  801A               	bsf	(??i2___ftadd+1)& (0+255),0,c
 27983  002A96                     u1199_41:
 27984  002A96  5019               	movf	??i2___ftadd,w,c
 27985  002A98  6E1E               	movwf	i2___ftadd@exp1,c
 27986  002A9A  C018  F019         	movff	i2___ftadd@f2+2,??i2___ftadd
 27987  002A9E  6A1A               	clrf	(??i2___ftadd+1)& (0+255),c
 27988  002AA0  6A1B               	clrf	(??i2___ftadd+2)& (0+255),c
 27989  002AA2  3417               	rlcf	i2___ftadd@f2+1,w,c
 27990  002AA4  3619               	rlcf	??i2___ftadd& (0+255),f,c
 27991  002AA6  E301               	bnc	u1200_41
 27992  002AA8  801A               	bsf	(??i2___ftadd+1)& (0+255),0,c
 27993  002AAA                     u1200_41:
 27994  002AAA  5019               	movf	??i2___ftadd,w,c
 27995  002AAC  6E1D               	movwf	i2___ftadd@exp2,c
 27996  002AAE  501E               	movf	i2___ftadd@exp1,w,c
 27997  002AB0  B4D8               	btfsc	status,2,c
 27998  002AB2  D00B               	goto	i2l1307
 27999  002AB4  501D               	movf	i2___ftadd@exp2,w,c
 28000  002AB6  5C1E               	subwf	i2___ftadd@exp1,w,c
 28001  002AB8  B0D8               	btfsc	status,0,c
 28002  002ABA  D00E               	goto	i2l8357
 28003  002ABC  501E               	movf	i2___ftadd@exp1,w,c
 28004  002ABE  0800               	sublw	0
 28005  002AC0  241D               	addwf	i2___ftadd@exp2,w,c
 28006  002AC2  6E19               	movwf	??i2___ftadd& (0+255),c
 28007  002AC4  0E18               	movlw	24
 28008  002AC6  6419               	cpfsgt	??i2___ftadd,c
 28009  002AC8  D007               	goto	i2l8357
 28010  002ACA                     i2l1307:
 28011  002ACA  C016  F013         	movff	i2___ftadd@f2,?i2___ftadd
 28012  002ACE  C017  F014         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 28013  002AD2  C018  F015         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 28014  002AD6  0012               	return	
 28015  002AD8                     i2l8357:
 28016  002AD8  501D               	movf	i2___ftadd@exp2,w,c
 28017  002ADA  B4D8               	btfsc	status,2,c
 28018  002ADC  D00B               	goto	i2l1311
 28019  002ADE  501E               	movf	i2___ftadd@exp1,w,c
 28020  002AE0  5C1D               	subwf	i2___ftadd@exp2,w,c
 28021  002AE2  B0D8               	btfsc	status,0,c
 28022  002AE4  D00E               	goto	i2l8363
 28023  002AE6  501D               	movf	i2___ftadd@exp2,w,c
 28024  002AE8  0800               	sublw	0
 28025  002AEA  241E               	addwf	i2___ftadd@exp1,w,c
 28026  002AEC  6E19               	movwf	??i2___ftadd& (0+255),c
 28027  002AEE  0E18               	movlw	24
 28028  002AF0  6419               	cpfsgt	??i2___ftadd,c
 28029  002AF2  D007               	goto	i2l8363
 28030  002AF4                     i2l1311:
 28031  002AF4  C013  F013         	movff	i2___ftadd@f1,?i2___ftadd
 28032  002AF8  C014  F014         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 28033  002AFC  C015  F015         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 28034  002B00  0012               	return	
 28035  002B02                     i2l8363:
 28036  002B02  0E06               	movlw	6
 28037  002B04  6E1C               	movwf	i2___ftadd@sign,c
 28038  002B06  BE15               	btfsc	i2___ftadd@f1+2,7,c
 28039  002B08  8E1C               	bsf	i2___ftadd@sign,7,c
 28040  002B0A  BE18               	btfsc	i2___ftadd@f2+2,7,c
 28041  002B0C  8C1C               	bsf	i2___ftadd@sign,6,c
 28042  002B0E  8E14               	bsf	i2___ftadd@f1+1,7,c
 28043  002B10  0EFF               	movlw	255
 28044  002B12  1613               	andwf	i2___ftadd@f1,f,c
 28045  002B14  0EFF               	movlw	255
 28046  002B16  1614               	andwf	i2___ftadd@f1+1,f,c
 28047  002B18  0E00               	movlw	0
 28048  002B1A  1615               	andwf	i2___ftadd@f1+2,f,c
 28049  002B1C  8E17               	bsf	i2___ftadd@f2+1,7,c
 28050  002B1E  0EFF               	movlw	255
 28051  002B20  1616               	andwf	i2___ftadd@f2,f,c
 28052  002B22  0EFF               	movlw	255
 28053  002B24  1617               	andwf	i2___ftadd@f2+1,f,c
 28054  002B26  0E00               	movlw	0
 28055  002B28  1618               	andwf	i2___ftadd@f2+2,f,c
 28056  002B2A  501D               	movf	i2___ftadd@exp2,w,c
 28057  002B2C  5C1E               	subwf	i2___ftadd@exp1,w,c
 28058  002B2E  B0D8               	btfsc	status,0,c
 28059  002B30  D01B               	goto	i2l8389
 28060  002B32                     i2l8379:
 28061  002B32  90D8               	bcf	status,0,c
 28062  002B34  3616               	rlcf	i2___ftadd@f2,f,c
 28063  002B36  3617               	rlcf	i2___ftadd@f2+1,f,c
 28064  002B38  3618               	rlcf	i2___ftadd@f2+2,f,c
 28065  002B3A  061D               	decf	i2___ftadd@exp2,f,c
 28066  002B3C  501E               	movf	i2___ftadd@exp1,w,c
 28067  002B3E  181D               	xorwf	i2___ftadd@exp2,w,c
 28068  002B40  B4D8               	btfsc	status,2,c
 28069  002B42  D00D               	goto	i2l8387
 28070  002B44  061C               	decf	i2___ftadd@sign,f,c
 28071  002B46  C01C  F019         	movff	i2___ftadd@sign,??i2___ftadd
 28072  002B4A  0E07               	movlw	7
 28073  002B4C  1619               	andwf	??i2___ftadd,f,c
 28074  002B4E  B4D8               	btfsc	status,2,c
 28075  002B50  D006               	goto	i2l8387
 28076  002B52  D7EF               	goto	i2l8379
 28077  002B54                     i2l8385:
 28078  002B54  90D8               	bcf	status,0,c
 28079  002B56  3215               	rrcf	i2___ftadd@f1+2,f,c
 28080  002B58  3214               	rrcf	i2___ftadd@f1+1,f,c
 28081  002B5A  3213               	rrcf	i2___ftadd@f1,f,c
 28082  002B5C  2A1E               	incf	i2___ftadd@exp1,f,c
 28083  002B5E                     i2l8387:
 28084  002B5E  501D               	movf	i2___ftadd@exp2,w,c
 28085  002B60  181E               	xorwf	i2___ftadd@exp1,w,c
 28086  002B62  B4D8               	btfsc	status,2,c
 28087  002B64  D01F               	goto	i2l1322
 28088  002B66  D7F6               	goto	i2l8385
 28089  002B68                     i2l8389:
 28090  002B68  501E               	movf	i2___ftadd@exp1,w,c
 28091  002B6A  5C1D               	subwf	i2___ftadd@exp2,w,c
 28092  002B6C  B0D8               	btfsc	status,0,c
 28093  002B6E  D01A               	goto	i2l1322
 28094  002B70                     i2l8391:
 28095  002B70  90D8               	bcf	status,0,c
 28096  002B72  3613               	rlcf	i2___ftadd@f1,f,c
 28097  002B74  3614               	rlcf	i2___ftadd@f1+1,f,c
 28098  002B76  3615               	rlcf	i2___ftadd@f1+2,f,c
 28099  002B78  061E               	decf	i2___ftadd@exp1,f,c
 28100  002B7A  501E               	movf	i2___ftadd@exp1,w,c
 28101  002B7C  181D               	xorwf	i2___ftadd@exp2,w,c
 28102  002B7E  B4D8               	btfsc	status,2,c
 28103  002B80  D00D               	goto	i2l8399
 28104  002B82  061C               	decf	i2___ftadd@sign,f,c
 28105  002B84  C01C  F019         	movff	i2___ftadd@sign,??i2___ftadd
 28106  002B88  0E07               	movlw	7
 28107  002B8A  1619               	andwf	??i2___ftadd,f,c
 28108  002B8C  B4D8               	btfsc	status,2,c
 28109  002B8E  D006               	goto	i2l8399
 28110  002B90  D7EF               	goto	i2l8391
 28111  002B92                     i2l8397:
 28112  002B92  90D8               	bcf	status,0,c
 28113  002B94  3218               	rrcf	i2___ftadd@f2+2,f,c
 28114  002B96  3217               	rrcf	i2___ftadd@f2+1,f,c
 28115  002B98  3216               	rrcf	i2___ftadd@f2,f,c
 28116  002B9A  2A1D               	incf	i2___ftadd@exp2,f,c
 28117  002B9C                     i2l8399:
 28118  002B9C  501D               	movf	i2___ftadd@exp2,w,c
 28119  002B9E  181E               	xorwf	i2___ftadd@exp1,w,c
 28120  002BA0  A4D8               	btfss	status,2,c
 28121  002BA2  D7F7               	goto	i2l8397
 28122  002BA4                     i2l1322:
 28123  002BA4  AE1C               	btfss	i2___ftadd@sign,7,c
 28124  002BA6  D00C               	goto	i2l1331
 28125  002BA8  0EFF               	movlw	255
 28126  002BAA  1A13               	xorwf	i2___ftadd@f1,f,c
 28127  002BAC  0EFF               	movlw	255
 28128  002BAE  1A14               	xorwf	i2___ftadd@f1+1,f,c
 28129  002BB0  0EFF               	movlw	255
 28130  002BB2  1A15               	xorwf	i2___ftadd@f1+2,f,c
 28131  002BB4  0E01               	movlw	1
 28132  002BB6  2613               	addwf	i2___ftadd@f1,f,c
 28133  002BB8  0E00               	movlw	0
 28134  002BBA  2214               	addwfc	i2___ftadd@f1+1,f,c
 28135  002BBC  0E00               	movlw	0
 28136  002BBE  2215               	addwfc	i2___ftadd@f1+2,f,c
 28137  002BC0                     i2l1331:
 28138  002BC0  AC1C               	btfss	i2___ftadd@sign,6,c
 28139  002BC2  D00C               	goto	i2l8405
 28140  002BC4  0EFF               	movlw	255
 28141  002BC6  1A16               	xorwf	i2___ftadd@f2,f,c
 28142  002BC8  0EFF               	movlw	255
 28143  002BCA  1A17               	xorwf	i2___ftadd@f2+1,f,c
 28144  002BCC  0EFF               	movlw	255
 28145  002BCE  1A18               	xorwf	i2___ftadd@f2+2,f,c
 28146  002BD0  0E01               	movlw	1
 28147  002BD2  2616               	addwf	i2___ftadd@f2,f,c
 28148  002BD4  0E00               	movlw	0
 28149  002BD6  2217               	addwfc	i2___ftadd@f2+1,f,c
 28150  002BD8  0E00               	movlw	0
 28151  002BDA  2218               	addwfc	i2___ftadd@f2+2,f,c
 28152  002BDC                     i2l8405:
 28153  002BDC  0E00               	movlw	0
 28154  002BDE  6E1C               	movwf	i2___ftadd@sign,c
 28155  002BE0  5013               	movf	i2___ftadd@f1,w,c
 28156  002BE2  2616               	addwf	i2___ftadd@f2,f,c
 28157  002BE4  5014               	movf	i2___ftadd@f1+1,w,c
 28158  002BE6  2217               	addwfc	i2___ftadd@f2+1,f,c
 28159  002BE8  5015               	movf	i2___ftadd@f1+2,w,c
 28160  002BEA  2218               	addwfc	i2___ftadd@f2+2,f,c
 28161  002BEC  AE18               	btfss	i2___ftadd@f2+2,7,c
 28162  002BEE  D00E               	goto	i2l8415
 28163  002BF0  0EFF               	movlw	255
 28164  002BF2  1A16               	xorwf	i2___ftadd@f2,f,c
 28165  002BF4  0EFF               	movlw	255
 28166  002BF6  1A17               	xorwf	i2___ftadd@f2+1,f,c
 28167  002BF8  0EFF               	movlw	255
 28168  002BFA  1A18               	xorwf	i2___ftadd@f2+2,f,c
 28169  002BFC  0E01               	movlw	1
 28170  002BFE  2616               	addwf	i2___ftadd@f2,f,c
 28171  002C00  0E00               	movlw	0
 28172  002C02  2217               	addwfc	i2___ftadd@f2+1,f,c
 28173  002C04  0E00               	movlw	0
 28174  002C06  2218               	addwfc	i2___ftadd@f2+2,f,c
 28175  002C08  0E01               	movlw	1
 28176  002C0A  6E1C               	movwf	i2___ftadd@sign,c
 28177  002C0C                     i2l8415:
 28178  002C0C  C016  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 28179  002C10  C017  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 28180  002C14  C018  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 28181  002C18  C01E  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 28182  002C1C  C01C  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 28183  002C20  EC05  F02A         	call	i2___ftpack	;wreg free
 28184  002C24  C001  F013         	movff	?i2___ftpack,?i2___ftadd
 28185  002C28  C002  F014         	movff	?i2___ftpack+1,?i2___ftadd+1
 28186  002C2C  C003  F015         	movff	?i2___ftpack+2,?i2___ftadd+2
 28187  002C30  0012               	return	
 28188  002C32                     __end_ofi2___ftadd:
 28189                           	opt stack 0
 28190                           pclatu	equ	0xFFB
 28191                           pclath	equ	0xFFA
 28192                           tblptru	equ	0xFF8
 28193                           tblptrh	equ	0xFF7
 28194                           tblptrl	equ	0xFF6
 28195                           tablat	equ	0xFF5
 28196                           prodh	equ	0xFF4
 28197                           prodl	equ	0xFF3
 28198                           intcon	equ	0xFF2
 28199                           postinc0	equ	0xFEE
 28200                           fsr0h	equ	0xFEA
 28201                           fsr0l	equ	0xFE9
 28202                           wreg	equ	0xFE8
 28203                           postdec1	equ	0xFE5
 28204                           fsr1h	equ	0xFE2
 28205                           fsr1l	equ	0xFE1
 28206                           bsr	equ	0xFE0
 28207                           indf2	equ	0xFDF
 28208                           postinc2	equ	0xFDE
 28209                           postdec2	equ	0xFDD
 28210                           plusw2	equ	0xFDB
 28211                           fsr2h	equ	0xFDA
 28212                           fsr2l	equ	0xFD9
 28213                           status	equ	0xFD8
 28214                           
 28215 ;; *************** function i2___altoft *****************
 28216 ;; Defined at:
 28217 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
 28218 ;; Parameters:    Size  Location     Type
 28219 ;;  c               4    8[COMRAM] long 
 28220 ;; Auto vars:     Size  Location     Type
 28221 ;;  __altoft        1   17[COMRAM] unsigned char 
 28222 ;;  __altoft        1   16[COMRAM] unsigned char 
 28223 ;; Return value:  Size  Location     Type
 28224 ;;                  3    8[COMRAM] float 
 28225 ;; Registers used:
 28226 ;;		wreg, status,2, status,0, cstack
 28227 ;; Tracked objects:
 28228 ;;		On entry : 0/0
 28229 ;;		On exit  : 0/0
 28230 ;;		Unchanged: 0/0
 28231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28232 ;;      Params:         4       0       0       0       0       0       0
 28233 ;;      Locals:         2       0       0       0       0       0       0
 28234 ;;      Temps:          4       0       0       0       0       0       0
 28235 ;;      Totals:        10       0       0       0       0       0       0
 28236 ;;Total ram usage:       10 bytes
 28237 ;; Hardware stack levels used:    1
 28238 ;; Hardware stack levels required when called:    1
 28239 ;; This function calls:
 28240 ;;		i2___ftpack
 28241 ;; This function is called by:
 28242 ;;		_T4int
 28243 ;; This function uses a non-reentrant model
 28244 ;;
 28245                           
 28246                           	psect	text125
 28247  00611E                     __ptext125:
 28248                           	opt stack 0
 28249  00611E                     i2___altoft:
 28250                           	opt stack 9
 28251                           
 28252                           ;incstack = 0
 28253  00611E  0E00               	movlw	0
 28254  006120  6E12               	movwf	i2___altoft@sign,c
 28255  006122  0E8E               	movlw	142
 28256  006124  6E11               	movwf	i2___altoft@exp,c
 28257  006126  AE0C               	btfss	i2___altoft@c+3,7,c
 28258  006128  D011               	goto	i2l8343
 28259  00612A  1E0C               	comf	i2___altoft@c+3,f,c
 28260  00612C  1E0B               	comf	i2___altoft@c+2,f,c
 28261  00612E  1E0A               	comf	i2___altoft@c+1,f,c
 28262  006130  6C09               	negf	i2___altoft@c,c
 28263  006132  0E00               	movlw	0
 28264  006134  220A               	addwfc	i2___altoft@c+1,f,c
 28265  006136  220B               	addwfc	i2___altoft@c+2,f,c
 28266  006138  220C               	addwfc	i2___altoft@c+3,f,c
 28267  00613A  0E01               	movlw	1
 28268  00613C  6E12               	movwf	i2___altoft@sign,c
 28269  00613E  D006               	goto	i2l8343
 28270  006140                     i2l8341:
 28271  006140  90D8               	bcf	status,0,c
 28272  006142  320C               	rrcf	i2___altoft@c+3,f,c
 28273  006144  320B               	rrcf	i2___altoft@c+2,f,c
 28274  006146  320A               	rrcf	i2___altoft@c+1,f,c
 28275  006148  3209               	rrcf	i2___altoft@c,f,c
 28276  00614A  2A11               	incf	i2___altoft@exp,f,c
 28277  00614C                     i2l8343:
 28278  00614C  0E00               	movlw	0
 28279  00614E  1409               	andwf	i2___altoft@c,w,c
 28280  006150  6E0D               	movwf	??i2___altoft& (0+255),c
 28281  006152  0E00               	movlw	0
 28282  006154  140A               	andwf	i2___altoft@c+1,w,c
 28283  006156  6E0E               	movwf	(??i2___altoft+1)& (0+255),c
 28284  006158  0E00               	movlw	0
 28285  00615A  140B               	andwf	i2___altoft@c+2,w,c
 28286  00615C  6E0F               	movwf	(??i2___altoft+2)& (0+255),c
 28287  00615E  0EFF               	movlw	255
 28288  006160  140C               	andwf	i2___altoft@c+3,w,c
 28289  006162  6E10               	movwf	(??i2___altoft+3)& (0+255),c
 28290  006164  500D               	movf	??i2___altoft,w,c
 28291  006166  100E               	iorwf	??i2___altoft+1,w,c
 28292  006168  100F               	iorwf	??i2___altoft+2,w,c
 28293  00616A  1010               	iorwf	??i2___altoft+3,w,c
 28294  00616C  A4D8               	btfss	status,2,c
 28295  00616E  D7E8               	goto	i2l8341
 28296  006170  C009  F001         	movff	i2___altoft@c,i2___ftpack@arg
 28297  006174  C00A  F002         	movff	i2___altoft@c+1,i2___ftpack@arg+1
 28298  006178  C00B  F003         	movff	i2___altoft@c+2,i2___ftpack@arg+2
 28299  00617C  C011  F004         	movff	i2___altoft@exp,i2___ftpack@exp
 28300  006180  C012  F005         	movff	i2___altoft@sign,i2___ftpack@sign
 28301  006184  EC05  F02A         	call	i2___ftpack	;wreg free
 28302  006188  C001  F009         	movff	?i2___ftpack,?i2___altoft
 28303  00618C  C002  F00A         	movff	?i2___ftpack+1,?i2___altoft+1
 28304  006190  C003  F00B         	movff	?i2___ftpack+2,?i2___altoft+2
 28305  006194  0012               	return	
 28306  006196                     __end_ofi2___altoft:
 28307                           	opt stack 0
 28308                           pclatu	equ	0xFFB
 28309                           pclath	equ	0xFFA
 28310                           tblptru	equ	0xFF8
 28311                           tblptrh	equ	0xFF7
 28312                           tblptrl	equ	0xFF6
 28313                           tablat	equ	0xFF5
 28314                           prodh	equ	0xFF4
 28315                           prodl	equ	0xFF3
 28316                           intcon	equ	0xFF2
 28317                           postinc0	equ	0xFEE
 28318                           fsr0h	equ	0xFEA
 28319                           fsr0l	equ	0xFE9
 28320                           wreg	equ	0xFE8
 28321                           postdec1	equ	0xFE5
 28322                           fsr1h	equ	0xFE2
 28323                           fsr1l	equ	0xFE1
 28324                           bsr	equ	0xFE0
 28325                           indf2	equ	0xFDF
 28326                           postinc2	equ	0xFDE
 28327                           postdec2	equ	0xFDD
 28328                           plusw2	equ	0xFDB
 28329                           fsr2h	equ	0xFDA
 28330                           fsr2l	equ	0xFD9
 28331                           status	equ	0xFD8
 28332                           
 28333 ;; *************** function i2___ftpack *****************
 28334 ;; Defined at:
 28335 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 28336 ;; Parameters:    Size  Location     Type
 28337 ;;  arg             3    0[COMRAM] unsigned um
 28338 ;;  exp             1    3[COMRAM] unsigned char 
 28339 ;;  sign            1    4[COMRAM] unsigned char 
 28340 ;; Auto vars:     Size  Location     Type
 28341 ;;		None
 28342 ;; Return value:  Size  Location     Type
 28343 ;;                  3    0[COMRAM] float 
 28344 ;; Registers used:
 28345 ;;		wreg, status,2, status,0
 28346 ;; Tracked objects:
 28347 ;;		On entry : 0/0
 28348 ;;		On exit  : 0/0
 28349 ;;		Unchanged: 0/0
 28350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28351 ;;      Params:         5       0       0       0       0       0       0
 28352 ;;      Locals:         0       0       0       0       0       0       0
 28353 ;;      Temps:          3       0       0       0       0       0       0
 28354 ;;      Totals:         8       0       0       0       0       0       0
 28355 ;;Total ram usage:        8 bytes
 28356 ;; Hardware stack levels used:    1
 28357 ;; This function calls:
 28358 ;;		Nothing
 28359 ;; This function is called by:
 28360 ;;		i2___altoft
 28361 ;;		i2___ftadd
 28362 ;; This function uses a non-reentrant model
 28363 ;;
 28364                           
 28365                           	psect	text126
 28366  00540A                     __ptext126:
 28367                           	opt stack 0
 28368  00540A                     i2___ftpack:
 28369                           	opt stack 9
 28370                           
 28371                           ;incstack = 0
 28372  00540A  5004               	movf	i2___ftpack@exp,w,c
 28373  00540C  B4D8               	btfsc	status,2,c
 28374  00540E  D005               	goto	i2l7211
 28375  005410  5001               	movf	i2___ftpack@arg,w,c
 28376  005412  1002               	iorwf	i2___ftpack@arg+1,w,c
 28377  005414  1003               	iorwf	i2___ftpack@arg+2,w,c
 28378  005416  A4D8               	btfss	status,2,c
 28379  005418  D00C               	goto	i2l7217
 28380  00541A                     i2l7211:
 28381  00541A  0E00               	movlw	0
 28382  00541C  6E01               	movwf	?i2___ftpack,c
 28383  00541E  0E00               	movlw	0
 28384  005420  6E02               	movwf	?i2___ftpack+1,c
 28385  005422  0E00               	movlw	0
 28386  005424  6E03               	movwf	?i2___ftpack+2,c
 28387  005426  0012               	return	
 28388  005428                     i2l7215:
 28389  005428  2A04               	incf	i2___ftpack@exp,f,c
 28390  00542A  90D8               	bcf	status,0,c
 28391  00542C  3203               	rrcf	i2___ftpack@arg+2,f,c
 28392  00542E  3202               	rrcf	i2___ftpack@arg+1,f,c
 28393  005430  3201               	rrcf	i2___ftpack@arg,f,c
 28394  005432                     i2l7217:
 28395  005432  0E00               	movlw	0
 28396  005434  1401               	andwf	i2___ftpack@arg,w,c
 28397  005436  6E06               	movwf	??i2___ftpack& (0+255),c
 28398  005438  0E00               	movlw	0
 28399  00543A  1402               	andwf	i2___ftpack@arg+1,w,c
 28400  00543C  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 28401  00543E  0EFE               	movlw	254
 28402  005440  1403               	andwf	i2___ftpack@arg+2,w,c
 28403  005442  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 28404  005444  5006               	movf	??i2___ftpack,w,c
 28405  005446  1007               	iorwf	??i2___ftpack+1,w,c
 28406  005448  1008               	iorwf	??i2___ftpack+2,w,c
 28407  00544A  B4D8               	btfsc	status,2,c
 28408  00544C  D00C               	goto	i2l7223
 28409  00544E  D7EC               	goto	i2l7215
 28410  005450                     i2l7219:
 28411  005450  2A04               	incf	i2___ftpack@exp,f,c
 28412  005452  0E01               	movlw	1
 28413  005454  2601               	addwf	i2___ftpack@arg,f,c
 28414  005456  0E00               	movlw	0
 28415  005458  2202               	addwfc	i2___ftpack@arg+1,f,c
 28416  00545A  0E00               	movlw	0
 28417  00545C  2203               	addwfc	i2___ftpack@arg+2,f,c
 28418  00545E  90D8               	bcf	status,0,c
 28419  005460  3203               	rrcf	i2___ftpack@arg+2,f,c
 28420  005462  3202               	rrcf	i2___ftpack@arg+1,f,c
 28421  005464  3201               	rrcf	i2___ftpack@arg,f,c
 28422  005466                     i2l7223:
 28423  005466  0E00               	movlw	0
 28424  005468  1401               	andwf	i2___ftpack@arg,w,c
 28425  00546A  6E06               	movwf	??i2___ftpack& (0+255),c
 28426  00546C  0E00               	movlw	0
 28427  00546E  1402               	andwf	i2___ftpack@arg+1,w,c
 28428  005470  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 28429  005472  0EFF               	movlw	255
 28430  005474  1403               	andwf	i2___ftpack@arg+2,w,c
 28431  005476  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 28432  005478  5006               	movf	??i2___ftpack,w,c
 28433  00547A  1007               	iorwf	??i2___ftpack+1,w,c
 28434  00547C  1008               	iorwf	??i2___ftpack+2,w,c
 28435  00547E  B4D8               	btfsc	status,2,c
 28436  005480  D006               	goto	i2l7227
 28437  005482  D7E6               	goto	i2l7219
 28438  005484                     i2l7225:
 28439  005484  0604               	decf	i2___ftpack@exp,f,c
 28440  005486  90D8               	bcf	status,0,c
 28441  005488  3601               	rlcf	i2___ftpack@arg,f,c
 28442  00548A  3602               	rlcf	i2___ftpack@arg+1,f,c
 28443  00548C  3603               	rlcf	i2___ftpack@arg+2,f,c
 28444  00548E                     i2l7227:
 28445  00548E  BE02               	btfsc	i2___ftpack@arg+1,7,c
 28446  005490  D003               	goto	i2l1284
 28447  005492  0E02               	movlw	2
 28448  005494  6004               	cpfslt	i2___ftpack@exp,c
 28449  005496  D7F6               	goto	i2l7225
 28450  005498                     i2l1284:
 28451  005498  A004               	btfss	i2___ftpack@exp,0,c
 28452  00549A  9E02               	bcf	i2___ftpack@arg+1,7,c
 28453  00549C  90D8               	bcf	status,0,c
 28454  00549E  3204               	rrcf	i2___ftpack@exp,f,c
 28455  0054A0  5004               	movf	i2___ftpack@exp,w,c
 28456  0054A2  1203               	iorwf	i2___ftpack@arg+2,f,c
 28457  0054A4  5005               	movf	i2___ftpack@sign,w,c
 28458  0054A6  A4D8               	btfss	status,2,c
 28459  0054A8  8E03               	bsf	i2___ftpack@arg+2,7,c
 28460  0054AA  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 28461  0054AE  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 28462  0054B2  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 28463  0054B6  0012               	return	
 28464  0054B8                     __end_ofi2___ftpack:
 28465                           	opt stack 0
 28466                           pclatu	equ	0xFFB
 28467                           pclath	equ	0xFFA
 28468                           tblptru	equ	0xFF8
 28469                           tblptrh	equ	0xFF7
 28470                           tblptrl	equ	0xFF6
 28471                           tablat	equ	0xFF5
 28472                           prodh	equ	0xFF4
 28473                           prodl	equ	0xFF3
 28474                           intcon	equ	0xFF2
 28475                           postinc0	equ	0xFEE
 28476                           fsr0h	equ	0xFEA
 28477                           fsr0l	equ	0xFE9
 28478                           wreg	equ	0xFE8
 28479                           postdec1	equ	0xFE5
 28480                           fsr1h	equ	0xFE2
 28481                           fsr1l	equ	0xFE1
 28482                           bsr	equ	0xFE0
 28483                           indf2	equ	0xFDF
 28484                           postinc2	equ	0xFDE
 28485                           postdec2	equ	0xFDD
 28486                           plusw2	equ	0xFDB
 28487                           fsr2h	equ	0xFDA
 28488                           fsr2l	equ	0xFD9
 28489                           status	equ	0xFD8
 28490                           
 28491 ;; *************** function _cutError *****************
 28492 ;; Defined at:
 28493 ;;		line 12 in file "source/T4Config.h"
 28494 ;; Parameters:    Size  Location     Type
 28495 ;;		None
 28496 ;; Auto vars:     Size  Location     Type
 28497 ;;		None
 28498 ;; Return value:  Size  Location     Type
 28499 ;;                  1    wreg      void 
 28500 ;; Registers used:
 28501 ;;		wreg, status,2
 28502 ;; Tracked objects:
 28503 ;;		On entry : 0/0
 28504 ;;		On exit  : 0/0
 28505 ;;		Unchanged: 0/0
 28506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28507 ;;      Params:         0       0       0       0       0       0       0
 28508 ;;      Locals:         0       0       0       0       0       0       0
 28509 ;;      Temps:          0       0       0       0       0       0       0
 28510 ;;      Totals:         0       0       0       0       0       0       0
 28511 ;;Total ram usage:        0 bytes
 28512 ;; Hardware stack levels used:    1
 28513 ;; This function calls:
 28514 ;;		Nothing
 28515 ;; This function is called by:
 28516 ;;		_T4int
 28517 ;; This function uses a non-reentrant model
 28518 ;;
 28519                           
 28520                           	psect	text127
 28521  006B30                     __ptext127:
 28522                           	opt stack 0
 28523  006B30                     _cutError:
 28524                           	opt stack 10
 28525                           
 28526                           ;T4Config.h: 13: processStarted = 0;
 28527                           
 28528                           ;incstack = 0
 28529  006B30  0E00               	movlw	0
 28530  006B32  0100               	movlb	0	; () banked
 28531  006B34  6FBB               	movwf	_processStarted& (0+255),b
 28532                           
 28533                           ;T4Config.h: 14: processState = 0;
 28534  006B36  0E00               	movlw	0
 28535  006B38  0100               	movlb	0	; () banked
 28536  006B3A  6FB5               	movwf	(_processState+1)& (0+255),b
 28537  006B3C  0E00               	movlw	0
 28538  006B3E  6FB4               	movwf	_processState& (0+255),b
 28539                           
 28540                           ;T4Config.h: 15: securTimer = 0;
 28541  006B40  0E00               	movlw	0
 28542  006B42  6E3B               	movwf	_securTimer,c
 28543  006B44  0E00               	movlw	0
 28544  006B46  6E3C               	movwf	_securTimer+1,c
 28545  006B48  0E00               	movlw	0
 28546  006B4A  6E3D               	movwf	_securTimer+2,c
 28547  006B4C  0E00               	movlw	0
 28548  006B4E  6E3E               	movwf	_securTimer+3,c
 28549                           
 28550                           ; BSR set to: 0
 28551                           ;T4Config.h: 16: tempLastScreen = actualScreen;
 28552  006B50  C1C3  F0BE         	movff	_actualScreen,_tempLastScreen
 28553                           
 28554                           ;T4Config.h: 17: actualScreen = 13;
 28555  006B54  0E0D               	movlw	13
 28556  006B56  0101               	movlb	1	; () banked
 28557  006B58  6FC3               	movwf	_actualScreen& (0+255),b
 28558                           
 28559                           ; BSR set to: 1
 28560                           ;T4Config.h: 18: LATCbits.LATC5 = 1;
 28561  006B5A  8A8B               	bsf	3979,5,c	;volatile
 28562                           
 28563                           ; BSR set to: 1
 28564  006B5C  0012               	return		;funcret
 28565  006B5E                     __end_of_cutError:
 28566                           	opt stack 0
 28567                           pclatu	equ	0xFFB
 28568                           pclath	equ	0xFFA
 28569                           tblptru	equ	0xFF8
 28570                           tblptrh	equ	0xFF7
 28571                           tblptrl	equ	0xFF6
 28572                           tablat	equ	0xFF5
 28573                           prodh	equ	0xFF4
 28574                           prodl	equ	0xFF3
 28575                           intcon	equ	0xFF2
 28576                           postinc0	equ	0xFEE
 28577                           fsr0h	equ	0xFEA
 28578                           fsr0l	equ	0xFE9
 28579                           wreg	equ	0xFE8
 28580                           postdec1	equ	0xFE5
 28581                           fsr1h	equ	0xFE2
 28582                           fsr1l	equ	0xFE1
 28583                           bsr	equ	0xFE0
 28584                           indf2	equ	0xFDF
 28585                           postinc2	equ	0xFDE
 28586                           postdec2	equ	0xFDD
 28587                           plusw2	equ	0xFDB
 28588                           fsr2h	equ	0xFDA
 28589                           fsr2l	equ	0xFD9
 28590                           status	equ	0xFD8
 28591                           pclatu	equ	0xFFB
 28592                           pclath	equ	0xFFA
 28593                           tblptru	equ	0xFF8
 28594                           tblptrh	equ	0xFF7
 28595                           tblptrl	equ	0xFF6
 28596                           tablat	equ	0xFF5
 28597                           prodh	equ	0xFF4
 28598                           prodl	equ	0xFF3
 28599                           intcon	equ	0xFF2
 28600                           postinc0	equ	0xFEE
 28601                           fsr0h	equ	0xFEA
 28602                           fsr0l	equ	0xFE9
 28603                           wreg	equ	0xFE8
 28604                           postdec1	equ	0xFE5
 28605                           fsr1h	equ	0xFE2
 28606                           fsr1l	equ	0xFE1
 28607                           bsr	equ	0xFE0
 28608                           indf2	equ	0xFDF
 28609                           postinc2	equ	0xFDE
 28610                           postdec2	equ	0xFDD
 28611                           plusw2	equ	0xFDB
 28612                           fsr2h	equ	0xFDA
 28613                           fsr2l	equ	0xFD9
 28614                           status	equ	0xFD8
 28615                           
 28616                           	psect	rparam
 28617  0000                     pclatu	equ	0xFFB
 28618                           pclath	equ	0xFFA
 28619                           tblptru	equ	0xFF8
 28620                           tblptrh	equ	0xFF7
 28621                           tblptrl	equ	0xFF6
 28622                           tablat	equ	0xFF5
 28623                           prodh	equ	0xFF4
 28624                           prodl	equ	0xFF3
 28625                           intcon	equ	0xFF2
 28626                           postinc0	equ	0xFEE
 28627                           fsr0h	equ	0xFEA
 28628                           fsr0l	equ	0xFE9
 28629                           wreg	equ	0xFE8
 28630                           postdec1	equ	0xFE5
 28631                           fsr1h	equ	0xFE2
 28632                           fsr1l	equ	0xFE1
 28633                           bsr	equ	0xFE0
 28634                           indf2	equ	0xFDF
 28635                           postinc2	equ	0xFDE
 28636                           postdec2	equ	0xFDD
 28637                           plusw2	equ	0xFDB
 28638                           fsr2h	equ	0xFDA
 28639                           fsr2l	equ	0xFD9
 28640                           status	equ	0xFD8
 28641                           
 28642                           	psect	temp
 28643  00005D                     btemp:
 28644                           	opt stack 0
 28645  00005D                     	ds	1
 28646  0000                     int$flags	set	btemp
 28647                           pclatu	equ	0xFFB
 28648                           pclath	equ	0xFFA
 28649                           tblptru	equ	0xFF8
 28650                           tblptrh	equ	0xFF7
 28651                           tblptrl	equ	0xFF6
 28652                           tablat	equ	0xFF5
 28653                           prodh	equ	0xFF4
 28654                           prodl	equ	0xFF3
 28655                           intcon	equ	0xFF2
 28656                           postinc0	equ	0xFEE
 28657                           fsr0h	equ	0xFEA
 28658                           fsr0l	equ	0xFE9
 28659                           wreg	equ	0xFE8
 28660                           postdec1	equ	0xFE5
 28661                           fsr1h	equ	0xFE2
 28662                           fsr1l	equ	0xFE1
 28663                           bsr	equ	0xFE0
 28664                           indf2	equ	0xFDF
 28665                           postinc2	equ	0xFDE
 28666                           postdec2	equ	0xFDD
 28667                           plusw2	equ	0xFDB
 28668                           fsr2h	equ	0xFDA
 28669                           fsr2l	equ	0xFD9
 28670                           status	equ	0xFD8


Data Sizes:
    Strings     590
    Constant    118
    Data        77
    BSS         83
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      92
    BANK0           160     69     105
    BANK1           256    119     205
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_40(CODE[17]), STR_39(CODE[18]), STR_38(CODE[17]), STR_37(CODE[18]), 
		 -> STR_36(CODE[17]), STR_35(CODE[18]), STR_34(CODE[17]), STR_33(CODE[18]), 
		 -> STR_32(CODE[7]), STR_31(CODE[18]), STR_30(CODE[19]), STR_29(CODE[18]), 
		 -> STR_28(CODE[18]), STR_27(CODE[18]), STR_26(CODE[18]), STR_25(CODE[17]), 
		 -> STR_24(CODE[17]), STR_23(CODE[18]), STR_22(CODE[17]), STR_21(CODE[25]), 
		 -> STR_20(CODE[18]), STR_19(CODE[16]), STR_18(CODE[18]), STR_17(CODE[7]), 
		 -> STR_16(CODE[18]), STR_15(CODE[15]), STR_14(CODE[18]), STR_13(CODE[16]), 
		 -> STR_12(CODE[18]), STR_11(CODE[15]), STR_10(CODE[18]), STR_9(CODE[17]), 
		 -> STR_8(CODE[15]), STR_7(CODE[18]), STR_6(CODE[18]), STR_5(CODE[18]), 
		 -> STR_4(CODE[18]), STR_3(CODE[18]), STR_2(CODE[18]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK1[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _hp_isr in COMRAM

    _hp_isr->_T4int
    _T4int->i2___ftge
    i2___ftge->i2___ftadd
    i2___ftadd->i2___altoft
    i2___altoft->i2___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_UARTint
    _UARTint->i1_longPressENTER
    i1_sysParamInit->i1_calcSysVars
    i1_pressUP->i1_chanValDigUP
    i1_pressRETRO->i1_initProtocoll
    i1_pressENTER->i1_desintegrator
    i1_initProtocoll->i1_setPWM2duty
    i1_desintegrator->i1___ftmul
    i1_pressDOWN->i1_chanValDigDOWN
    i1_longPressENTER->i1_integrator
    i1_integrator->i1___ftdiv
    i1___altoft->i1___ftpack
    i1_initCalib->i1_setPWM2duty
    i1___ftadd->i1___ftpack
    i1_calcVars2ti->i1___ftdiv
    i1___ftdiv->i1___altoft
    i1_calcSysVars->i1___ftmul
    i1___ftmul->i1___ftpack
    _T2int->i1_setPWM2duty
    _saveProcessState->i1_writeEEPROM

Critical Paths under _hp_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _sysParamInit->_calcSysVars
    _calcSysVars->___ftmul
    _lcd_init->_lcd_send_byte
    _drawScreen->_drawSNquest
    _drawSNquest->_printf
    _drawPassWord->_printf
    _drawMenu->_printf
    _drawCutError->_printf
    _drawChanVal->_printf
    _drawCalibProc->_printf
    _drawBadPass->_printf
    _drawPass1Lin->_printf
    _drawAutoCalibRM->_printf
    _drawValEditor->_printf
    _drawAdvON->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_4bits
    _lcd_read_byte->_lcd_read_4bits
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    _pressUP->_chanValDigUP
    _pressRETRO->_initProtocoll
    _pressENTER->_desintegrator
    _initProtocoll->_setPWM2duty
    _desintegrator->___fttol
    ___fttol->_scale
    _pressDOWN->_chanValDigDOWN
    _longPressENTER->___ftadd
    _integrator->___ftdiv
    ___altoft->___ftpack
    _initCalib->_setPWM2duty
    _calcVars2ti->___ftmul
    ___ftmul->___wmul
    ___ftdiv->___altoft
    ___ftadd->_fround
    _PWM2Config->_setPWM2duty

Critical Paths under _isr in BANK1

    None.

Critical Paths under _hp_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _hp_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _hp_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _hp_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _hp_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  964825
                       _EEPROMConfig
                         _PWM2Config
                         _UARTConfig
                     _buttonChecking
                        _clockConfig
                         _drawScreen
                    _interruptConfig
                           _ioConfig
                          _ioInitStt
                           _lcd_init
                        _setPWM2duty
                          _setPWM2on
                       _sysParamInit
                           _t4config
 ---------------------------------------------------------------------------------
 (1) _t4config                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sysParamInit                                         1     1      0    5932
                                             38 BANK1      1     1      0
                        _calcSysVars
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _readEEPROM                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _calcSysVars                                          3     3      0    5901
                                             35 BANK1      3     3      0
                            ___ftmul
 ---------------------------------------------------------------------------------
 (1) _setPWM2on                                            1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             6     6      0    1879
                                              8 BANK1      6     6      0
                     _lcd_send_4bits
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _ioInitStt                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ioConfig                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptConfig                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _drawScreen                                           0     0      0  893557
                          _drawAdvON
                    _drawAutoCalibRM
                        _drawBadPass
                      _drawCalibProc
                        _drawChanVal
                       _drawCutError
                           _drawMenu
                       _drawPassWord
                        _drawSNquest
 ---------------------------------------------------------------------------------
 (2) _drawSNquest                                          3     3      0   69043
                                            116 BANK1      3     3      0
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawPassWord                                         2     2      0  134694
                                            116 BANK1      2     2      0
                       _drawPass1Lin
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawMenu                                             1     1      0   73454
                                            116 BANK1      1     1      0
                         _lcd_gotoxy
                           _lcd_putc
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawCutError                                         0     0      0   68820
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawChanVal                                          0     0      0  137640
                      _drawValEditor
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawCalibProc                                        0     0      0   68820
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawBadPass                                          0     0      0  134595
                       _drawPass1Lin
                             _printf
 ---------------------------------------------------------------------------------
 (3) _drawPass1Lin                                         0     0      0   68820
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawAutoCalibRM                                      0     0      0  137640
                      _drawValEditor
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (3) _drawValEditor                                        0     0      0   68820
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawAdvON                                            1     1      0   68851
                                            116 BANK1      1     1      0
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              54    36     18   65775
                                             63 BANK1     53    35     18
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   13403
                                             35 BANK1      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0    4541
                                             13 BANK1      1     1      0
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (5) _lcd_putc                                             2     2      0    4510
                                             11 BANK1      2     2      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_gotoxy                                           3     2      1    3045
                                              8 BANK1      3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        3     2      1    1403
                                              5 BANK1      3     2      1
                      _lcd_read_byte
                     _lcd_send_4bits
 ---------------------------------------------------------------------------------
 (3) _lcd_send_4bits                                       5     5      0     272
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (3) _lcd_read_byte                                        2     2      0     114
                                              2 BANK1      2     2      0
                     _lcd_read_4bits
 ---------------------------------------------------------------------------------
 (4) _lcd_read_4bits                                       2     2      0      46
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   13124
                                             35 BANK1     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3004
                                             14 BANK1      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1819
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1985
                                              6 BANK1      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     608
                                              0 BANK1     15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     827
                                              0 BANK1     12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2703
                                              8 BANK1      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     848
                                             13 BANK1      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     703
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4927
                                             57 BANK1      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     142
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     828
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (1) _clockConfig                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buttonChecking                                       0     0      0   61986
                           _delay_ms
                      _longPressDOWN
                     _longPressENTER
                     _longPressRETRO
                        _longPressUP
                          _pressDOWN
                         _pressENTER
                         _pressRETRO
                            _pressUP
                        _releaseDOWN
                       _releaseENTER
                       _releaseRETRO
                          _releaseUP
 ---------------------------------------------------------------------------------
 (2) _releaseUP                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseRETRO                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseENTER                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseDOWN                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pressUP                                              1     1      0       0
                                              5 BANK1      1     1      0
                       _chanValDigUP
 ---------------------------------------------------------------------------------
 (3) _chanValDigUP                                         5     5      0       0
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (2) _pressRETRO                                           0     0      0     751
                      _initProtocoll
 ---------------------------------------------------------------------------------
 (2) _pressENTER                                           0     0      0   21346
                          _checkPass
                     _confirmEdition
                      _desintegrator
                          _initCalib
                      _initProtocoll
                        _setPWM2duty
 ---------------------------------------------------------------------------------
 (3) _initProtocoll                                        1     1      0     751
                                              6 BANK1      1     1      0
                        _setPWM2duty
 ---------------------------------------------------------------------------------
 (3) _desintegrator                                       19    19      0    7900
                                             57 BANK1     19    19      0
                            ___aldiv
                            ___ftmul
                            ___fttol
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     508
                                             42 BANK1     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8     599
                                              0 BANK1     14     6      8
 ---------------------------------------------------------------------------------
 (3) _checkPass                                            7     7      0     170
                                              0 BANK1      7     7      0
 ---------------------------------------------------------------------------------
 (2) _pressDOWN                                            1     1      0       0
                                              5 BANK1      1     1      0
                     _chanValDigDOWN
 ---------------------------------------------------------------------------------
 (3) _chanValDigDOWN                                       5     5      0       0
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (2) _longPressUP                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _longPressRETRO                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _longPressENTER                                       6     6      0   38897
                                             57 BANK1      6     6      0
                            ___ftadd
                            ___ftdiv
                        _calcVars2ti
                     _confirmEdition
                          _initCalib
                         _integrator
 ---------------------------------------------------------------------------------
 (3) _integrator                                          12    12      0    7983
                                             33 BANK1     12    12      0
                           ___altoft
                            ___ftdiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     558
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2931
                                              8 BANK1     10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _initCalib                                            0     0      0     720
                        _setPWM2duty
 ---------------------------------------------------------------------------------
 (3) _confirmEdition                                       1     1      0   11085
                                             35 BANK1      1     1      0
                      _saveSysParams
 ---------------------------------------------------------------------------------
 (4) _saveSysParams                                        0     0      0   10992
                        _calcVars2ti
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (5) _writeEEPROM                                          2     1      1     804
                                              0 BANK1      2     1      1
 ---------------------------------------------------------------------------------
 (5) _calcVars2ti                                          0     0      0   10188
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5898
                                             20 BANK1     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    4290
                                             18 BANK1     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4563
                                             45 BANK1     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (2) _longPressDOWN                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     992
                                              0 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 (1) _UARTConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2Config                                           0     0      0     720
                        _setPWM2duty
                           _t2config
 ---------------------------------------------------------------------------------
 (2) _t2config                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setPWM2duty                                          6     4      2     720
                                              0 BANK1      6     4      2
 ---------------------------------------------------------------------------------
 (1) _EEPROMConfig                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _isr                                                17    17      0   24678
                                             52 BANK0     17    17      0
                              _T2int
                            _UARTint
 ---------------------------------------------------------------------------------
 (12) _UARTint                                             1     1      0   24104
                                             51 BANK0      1     1      0
                      _loadSysParams
                          _putchUART
                    i1_longPressDOWN
                   i1_longPressENTER
                   i1_longPressRETRO
                      i1_longPressUP
                        i1_pressDOWN
                       i1_pressENTER
                       i1_pressRETRO
                          i1_pressUP
                    i1_saveSysParams
                     i1_sysParamInit
 ---------------------------------------------------------------------------------
 (13) i1_sysParamInit                                      1     1      0    1100
                                             26 BANK0      1     1      0
                      i1_calcSysVars
                       i1_readEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_readEEPROM                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_pressUP                                           1     1      0       0
                                              5 BANK0      1     1      0
                     i1_chanValDigUP
 ---------------------------------------------------------------------------------
 (14) i1_chanValDigUP                                      5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (13) i1_pressRETRO                                        0     0      0     266
                    i1_initProtocoll
 ---------------------------------------------------------------------------------
 (13) i1_pressENTER                                        0     0      0    5713
                        i1_checkPass
                   i1_confirmEdition
                    i1_desintegrator
                        i1_initCalib
                    i1_initProtocoll
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (14) i1_initProtocoll                                     1     1      0     266
                                              6 BANK0      1     1      0
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (14) i1_desintegrator                                    19    19      0    2132
                                             23 BANK0     19    19      0
                          i1___aldiv
                          i1___ftmul
                          i1___fttol
                           i1___lmul
 ---------------------------------------------------------------------------------
 (15) i1___fttol                                          15    11      4     278
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (15) i1___aldiv                                          14     6      8     352
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (14) i1_checkPass                                         7     7      0     115
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (13) i1_pressDOWN                                         1     1      0       0
                                              5 BANK0      1     1      0
                   i1_chanValDigDOWN
 ---------------------------------------------------------------------------------
 (14) i1_chanValDigDOWN                                    5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (13) i1_longPressUP                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_longPressRETRO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_longPressENTER                                    6     6      0   10324
                                             45 BANK0      6     6      0
                          i1___ftadd
                          i1___ftdiv
                      i1_calcVars2ti
                   i1_confirmEdition
                        i1_initCalib
                       i1_integrator
 ---------------------------------------------------------------------------------
 (14) i1_integrator                                       12    12      0    2280
                                             33 BANK0     12    12      0
                         i1___altoft
                          i1___ftdiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (15) i1___lmul                                           12     4      8     196
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (15) i1___altoft                                         10     6      4     707
                                              8 BANK0     10     6      4
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (14) i1_initCalib                                         0     0      0     244
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (14) i1_confirmEdition                                    1     1      0    2712
                                             33 BANK0      1     1      0
                    i1_saveSysParams
 ---------------------------------------------------------------------------------
 (14) i1___ftadd                                          12     6      6    1487
                                              8 BANK0     12     6      6
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (13) i1_longPressDOWN                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _putchUART                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (13) _loadSysParams                                       0     0      0    3724
                      i1_calcSysVars
                    i1_saveSysParams
 ---------------------------------------------------------------------------------
 (13) i1_saveSysParams                                     0     0      0    2646
                      i1_calcVars2ti
                      i1_writeEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_calcVars2ti                                       0     0      0    2316
                          i1___ftdiv
                          i1___ftmul
 ---------------------------------------------------------------------------------
 (15) i1___ftdiv                                          15     9      6    1239
                                             18 BANK0     15     9      6
                         i1___altoft (ARG)
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (14) i1_calcSysVars                                       3     3      0    1078
                                             23 BANK0      3     3      0
                          i1___ftmul
 ---------------------------------------------------------------------------------
 (15) i1___ftmul                                          15     9      6    1077
                                              8 BANK0     15     9      6
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (16) i1___ftpack                                          8     3      5     543
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (12) _T2int                                               1     1      0     574
                                              6 BANK0      1     1      0
                   _saveProcessState
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (15) i1_setPWM2duty                                       6     4      2     244
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (13) _saveProcessState                                    0     0      0     330
                      i1_writeEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_writeEEPROM                                       2     1      1     330
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (19) _hp_isr                                             14    14      0    2288
                                             40 COMRAM    14    14      0
                              _T4int
 ---------------------------------------------------------------------------------
 (20) _T4int                                               1     1      0    2288
                                             39 COMRAM     1     1      0
                           _cutError
                         i2___altoft
                          i2___ftadd
                           i2___ftge
                      i2_setPWM2duty
 ---------------------------------------------------------------------------------
 (21) i2_setPWM2duty                                       6     4      2     166
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (21) i2___ftge                                            9     3      6     240
                                             30 COMRAM     9     3      6
                         i2___altoft (ARG)
                          i2___ftadd (ARG)
 ---------------------------------------------------------------------------------
 (21) i2___ftadd                                          12     6      6    1279
                                             18 COMRAM    12     6      6
                         i2___altoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (21) i2___altoft                                         10     6      4     603
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (22) i2___ftpack                                          8     3      5     387
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (21) _cutError                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 22
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMConfig
   _PWM2Config
     _setPWM2duty
     _t2config
   _UARTConfig
   _buttonChecking
     _delay_ms
     _longPressDOWN
     _longPressENTER
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       _calcVars2ti
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _confirmEdition
         _saveSysParams
           _calcVars2ti
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _writeEEPROM
       _initCalib
         _setPWM2duty
       _integrator
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___lmul
     _longPressRETRO
     _longPressUP
     _pressDOWN
       _chanValDigDOWN
     _pressENTER
       _checkPass
       _confirmEdition
         _saveSysParams
           _calcVars2ti
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _writeEEPROM
       _desintegrator
         ___aldiv
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
       _initCalib
         _setPWM2duty
       _initProtocoll
         _setPWM2duty
       _setPWM2duty
     _pressRETRO
       _initProtocoll
         _setPWM2duty
     _pressUP
       _chanValDigUP
     _releaseDOWN
     _releaseENTER
     _releaseRETRO
     _releaseUP
   _clockConfig
   _drawScreen
     _drawAdvON
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawAutoCalibRM
       _drawValEditor
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawBadPass
       _drawPass1Lin
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawCalibProc
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawChanVal
       _drawValEditor
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawCutError
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawMenu
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawPassWord
       _drawPass1Lin
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawSNquest
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _interruptConfig
   _ioConfig
   _ioInitStt
   _lcd_init
     _lcd_send_4bits
     _lcd_send_byte
       _lcd_read_byte
         _lcd_read_4bits
       _lcd_send_4bits
   _setPWM2duty
   _setPWM2on
   _sysParamInit
     _calcSysVars
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readEEPROM
   _t4config

 _isr (ROOT)
   _T2int
     _saveProcessState
       i1_writeEEPROM
     i1_setPWM2duty
   _UARTint
     _loadSysParams
       i1_calcSysVars
         i1___ftmul
           i1___ftpack
       i1_saveSysParams
         i1_calcVars2ti
           i1___ftdiv
             i1___altoft (ARG)
               i1___ftpack
             i1___ftpack (ARG)
           i1___ftmul
             i1___ftpack
         i1_writeEEPROM
     _putchUART
     i1_longPressDOWN
     i1_longPressENTER
       i1___ftadd
         i1___ftpack
       i1___ftdiv
         i1___altoft (ARG)
           i1___ftpack
         i1___ftpack (ARG)
       i1_calcVars2ti
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___ftmul
           i1___ftpack
       i1_confirmEdition
         i1_saveSysParams
           i1_calcVars2ti
             i1___ftdiv
               i1___altoft (ARG)
                 i1___ftpack
               i1___ftpack (ARG)
             i1___ftmul
               i1___ftpack
           i1_writeEEPROM
       i1_initCalib
         i1_setPWM2duty
       i1_integrator
         i1___altoft
           i1___ftpack
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___lmul
     i1_longPressRETRO
     i1_longPressUP
     i1_pressDOWN
       i1_chanValDigDOWN
     i1_pressENTER
       i1_checkPass
       i1_confirmEdition
         i1_saveSysParams
           i1_calcVars2ti
             i1___ftdiv
               i1___altoft (ARG)
                 i1___ftpack
               i1___ftpack (ARG)
             i1___ftmul
               i1___ftpack
           i1_writeEEPROM
       i1_desintegrator
         i1___aldiv
         i1___ftmul
           i1___ftpack
         i1___fttol
         i1___lmul
       i1_initCalib
         i1_setPWM2duty
       i1_initProtocoll
         i1_setPWM2duty
       i1_setPWM2duty
     i1_pressRETRO
       i1_initProtocoll
         i1_setPWM2duty
     i1_pressUP
       i1_chanValDigUP
     i1_saveSysParams
       i1_calcVars2ti
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___ftmul
           i1___ftpack
       i1_writeEEPROM
     i1_sysParamInit
       i1_calcSysVars
         i1___ftmul
           i1___ftpack
       i1_readEEPROM

 _hp_isr (ROOT)
   _T4int
     _cutError
     i2___altoft
       i2___ftpack
     i2___ftadd
       i2___altoft (ARG)
         i2___ftpack
       i2___ftpack (ARG)
     i2___ftge
       i2___altoft (ARG)
         i2___ftpack
       i2___ftadd (ARG)
         i2___altoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
     i2_setPWM2duty

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     77      CD       6       80.1%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     45      69       4       65.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      5C       1       97.9%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     192       9        0.0%
DATA                 0      0     192      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Wed Nov 16 23:47:49 2016

      __end_ofi1_pressDOWN 4920               ___altoft@exp 0110                 i1___altoft 57D6  
     __end_ofi1_pressENTER 2400                 i1___ftpack 440C            ?_lcd_send_4bits 0001  
     __end_ofi1_pressRETRO 540A            ??_desintegrator 0139              ___altoft@sign 0111  
         i2setPWM2duty@act 0005                         l93 6C0E             ?_lcd_send_byte 0105  
             ___awdiv@sign 010B                         _fd 01C5                         _ie 00B8  
            _holdRETROcont 01C8           ?i1_saveSysParams 0001                         _pi 0054  
               i2___altoft 611E                         bsr 000FE0            ?_confirmEdition 0001  
      ___wmul@multiplicand 0110     __size_ofi1_calcVars2ti 0058                 i2___ftpack 540A  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000               ___ftadd@exp1 0138               ___ftadd@exp2 0137  
             i1___altoft@c 0068                drawMenu@adv 0174               ___ftadd@sign 0136  
                      l102 680E                        l416 49EE                        l371 290A  
                      l540 2DD6                        l380 29E4                        l516 6C9E  
                      l285 6CCA                        l279 6C46                        l383 2A3E  
                      l377 2986                        l554 6938                        l563 515E  
                      l715 2090                        l484 596E                        l653 52DC  
                      l566 518E                        l399 4A3C                        l569 51C2  
                      l691 1F38                        l844 149E                        l695 1F60  
                      l871 1616                        l696 1F78                        l880 16A2  
                      l856 154A               i1___ftadd@f1 0068               i1___ftadd@f2 006B  
                      l868 15F6                        l975 09F0               __CFG_CPB$OFF 000000  
    i1setPWM2duty@actuator 0060                        _PR2 000FBB                        _PR4 000F52  
             __CFG_CPD$OFF 000000     __size_ofi1_calcSysVars 006A   __size_ofi1_initProtocoll 0040  
                      _isr 0018               i1___ftdiv@f1 0072               i1___ftdiv@f2 0075  
             i1___ftdiv@f3 007C    __end_of_interruptConfig 6D78               ___awmod@sign 0105  
                      prod 000FF3                        wreg 000FE8  __size_ofi1_longPressENTER 028E  
               _TXSTA1bits 000FAC               __CFG_IESO$ON 000000               drawSNquest@i 0174  
__size_ofi1_longPressRETRO 005A               i1___ftmul@f1 0068               i1___ftmul@f2 006B  
             i1___fttol@f1 0060               __CFG_LVP$OFF 000000                i1_checkPass 5D98  
           i1___aldiv@sign 0069               ___ftdiv@cntr 011B             ??_drawCutError 0174  
             ___ftdiv@sign 0120                       l1009 0870                       l1311 24A2  
                     l1313 24CA                       l1322 25A0                       l1331 25CA  
                     l1307 2468                       l1252 3292                       l1342 396A  
                     l1350 308A                       l1431 5124                       l1441 58FC  
                     l1284 43D8                       l1356 310A                       l1381 6AF4  
                     l1349 3046                       l6203 3B26                       l6221 3BB8  
                     l6231 3BE8                       l6233 3BF8                       l6225 3BCC  
                     l6235 3C02            ??_drawCalibProc 0174                       l6239 3C1E  
                     l9211 438C                       l9203 432E                       ?_isr 0001  
                     l9221 43E2                       l9213 43BC                       l9205 433C  
                     l9215 43CA                       l9207 436C                       l9311 25F4  
                     l9303 2586                       l9151 5C92                       l9321 2642  
                     l9305 2594                       l9401 3678                       l9241 5FF4  
                     l9233 5FB8                       l9227 43FE                       l9331 388E  
                     l9411 36B6                       l9163 5CCE                       l9243 6002  
                     l9235 5FC6                       l9157 5CB0                       l9181 6836  
                     l9263 2476                       l9407 3698                       l9239 5FE6  
                     l9247 600E                       l9337 38C8                       l9601 2FF2  
                     l9441 5018                       l9433 4FEE                       l9169 5CEC  
                     l9291 2530                       l9275 24C0                       l9451 504E  
                     l9443 501E                       l9427 4FD8                       l9293 253E  
                     l9285 2502                       l9269 24B0                       l9357 3928  
                     l9701 3278                       l9189 6AB2                       l9199 431A  
                     l9295 254C                       l9383 360C                       l9703 3288  
                     l9631 30C0                       l9439 500C                       l9455 505C  
                     l9471 5576                       l9535 1990                       l9527 18AC  
                     l9297 2558                       l9377 35D2                       l9721 4EB4  
                     l9641 30F0                       l9481 55A6                       l9651 3142  
                     l9643 3100                       l9635 30D4                       l9459 5070  
                     l9483 55AC                       l9491 55DE                       l9475 5586  
                     l9555 0F2C                       l9397 365A                       l9717 4E74  
                     l9709 66E8                       l9741 50A8                       l9573 117C  
                     l9549 0E66                       l9727 4EF8                       l9743 50B8  
                     l9671 31BC                       l9495 55F2                       l9487 55D0  
                     l9479 559A                       l9567 10B6                       l9559 0F52  
                     l9823 00E8                       l9753 5112                       l9745 50BE  
                     l9761 5890                       l9657 3168                       l9585 6BA8  
                     l9763 58A0                       l9691 3248                       l9595 2FB8  
                     l9931 04C6                       l9923 0456                       l9907 03A4  
                     l9843 01B8                       l9819 00D2                       l9765 58A6  
                     l9941 0550                       l9861 0252                       l9853 0224  
                     l9829 011A                       l9837 0190                       l9775 5F3E  
                     l9695 325C                       l9679 3210                       l9951 05C8  
                     l9935 04F4                       l9871 02A2                       l9855 022A  
                     l9847 01FE                       STR_1 7EC7                       STR_2 7ED9  
                     l9769 58EA                       l9777 5F4E                       l9961 0626  
                     l9937 050A                       l9881 02E8                       l9865 0278  
                     l9849 0214                       STR_3 7F21                       STR_4 7EEB  
                     l9947 059A                       l9939 053A                       l9875 02B6  
                     l9867 0284                       l9891 0344                       STR_5 7EFD  
                     STR_6 7F0F                       l9965 068C                       l9885 0300  
                     l9877 02D0                       l9869 028A                       STR_7 7E25  
                     STR_8 7FCB                       l9991 0758                       l9983 0728  
                     l9967 0692                       STR_9 7F88                       l9993 076C  
                     l9897 035E                       l9889 0306                       l9987 074A  
                     l9979 06D8                       l9997 0794                       l9989 0750  
             printf@tmpval 0162                       u7851 3B02                       u7870 3B4C  
                     u7875 3B42             ??_drawPass1Lin 0174              __CFG_FCMEN$ON 000000  
              lcd_putc@cha 010C            __end_of_UARTint 4300                       _main 6712  
     __size_of_calcVars2ti 0058               ___ftpack@arg 0100               i2___altoft@c 0009  
             ___ftpack@exp 0103           lcd_read_byte@low 0102                       fsr0h 000FEA  
                     fsr1h 000FE2                       fsr0l 000FE9                       fsr2h 000FDA  
                     fsr1l 000FE1                       indf2 000FDF                       fsr2l 000FD9  
        initProtocoll@init 0106                       btemp 005D              __CFG_BORV$285 000000  
           ??_drawPassWord 0174               i2___ftadd@f1 0013               i2___ftadd@f2 0016  
                     pclat 000FFA               i2___ftge@ff1 001F               i2___ftge@ff2 0022  
            i1___ftdiv@exp 007F                       prodh 000FF4                       prodl 000FF3  
                     start 00BE            ?_longPressENTER 0001       __size_of_calcSysVars 006A  
          ?_longPressRETRO 0001              drawSNquest@tq 0176      __size_of_sysParamInit 009E  
     __end_of_EEPROMConfig 6D7E               ___ftmul@cntr 0121               ___param_bank 000010  
              _writeEEPROM 6C2C               ___ftmul@sign 0122              i1___ftmul@exp 0071  
             ___fttol@exp1 0138               ___fttol@lval 0134                      ??_isr 0094  
           i1___altoft@exp 0070    i1___ftmul@f3_as_product 0072               _BAUDCON1bits 000FB8  
              i1_initCalib 699E                      l10011 0852                      l10003 0822  
                    l10101 0BE6                      l10021 0898                      l10005 0830  
                    l10111 0C34                      l10103 0BF2                      l10031 09C6  
                    l10015 0874                      l10033 09D4                      l10025 08EA  
                    l10009 083E                      l11001 5536                      l10115 0CBE  
                    l10107 0C0C                      l10125 5938                      l10133 61A8  
                    l10061 0A90                      l10053 0A64                      l10037 09E2  
                    l10117 0CD4                      l10221 13F8                      l10213 130A  
                    l10205 121A                      l10311 6880                      l11031 4F0C  
                    l10129 595A                      l10137 61CE                      l10305 3E52  
                    l10241 5D82                      l10233 5D1A                      l10161 4028  
                    l10321 68AC                      l11201 14CE                      l10081 0B2E  
                    l10073 0AD6                      l10049 0A3C                      l10217 1382  
                    l10209 1292                      l10225 146C                      l11041 4F30  
                    l11033 4F12                      l10331 695E                      l10243 5D8A  
                    l10163 4038                      l10155 3FFA                      l10059 0A8A  
                    l11051 4F56                      l11043 4F38                      l11035 4F1A  
                    l11027 4EFE                      l10237 5D30                      l10181 40C0  
                    l10173 4092                      l10165 403E                      l10149 3FDC  
                    l11301 167E                      l11221 1518                      l11213 14FC  
                    l10093 0B9A                      l10077 0AFE                      l10405 2940  
                    l10501 492E                      l11053 4F5C                      l11045 4F40  
                    l11037 4F22                      l11029 4F06                      l10335 513C  
                    l10247 5D92                      l11223 1526                      l10095 0BA4  
                    l10087 0B62                      l10431 2A0A                      l10415 2980  
                    l10407 2952                      l10511 4960                      l11047 4F48  
                    l11039 4F2A                      l10345 5170                      l10193 56C6  
                    l10177 40A4                      l10281 2CCE                      l11241 157A  
                    l11209 14F0                      l10505 4944                      l11049 4F50  
                    l11057 4F62                      l10371 67F6                      l10355 51A0  
                    l10195 56D6                      l10603 45DC                      l11331 1700  
                    l11219 1512                      l10099 0BDC                      l10427 29DE  
                    l10419 29B0                      l10523 49B8                      l11411 6752  
                    l10293 3DA2                      l10613 45F6                      l11317 16C2  
                    l11261 15C4                      l11253 15A8                      l10445 2A68  
                    l10367 51D4                      l10631 62BC                      l10607 45E8  
                    l10615 460E                      l11327 16F4                      l11319 16D2  
                    l11239 156A                      l11263 15D2                      l10551 5E5C  
                    l10439 2A38                      l10391 28D6                      l10471 4A46  
                    l10527 49D4                      l10519 499E                      l10297 3DB8  
                    l10625 629E                      l10801 1FA6                      l10713 52E2  
                    l10609 45EE                      l11337 1716                      l11249 159C  
                    l10457 5EE6                      l10449 5EB4                      l10465 5F1C  
                    l10481 4A78                      l10635 62CE                      l10803 1FC4  
                    l10723 530E                      l10707 52BE                      l11339 171C  
                    l11291 1654                      l11259 15BE                      l10555 5E86  
                    l10475 4A5C                      l10637 62D6                      l10661 4794  
                    l10821 2006                      l10725 5316                      l10903 1A16  
                    l10655 4748                      l10823 201A                      l10807 1FD6  
                    l10583 4542                      l11287 1648                      l11279 1626  
                    l11199 14BE                      l10399 2904                      l10921 1A6C  
                    l10913 1A42                      l10753 654A                      l10681 47F0  
                    l10649 4736                      l10737 534A                      l10729 5328  
                    l10577 452A                      l11297 166A                      l10497 66B4  
                    l10907 1A28                      l10747 6530                      l10675 47DE  
                    l10851 20BA                      l10843 2096                      l11299 1670  
                    l10757 655C                      l10685 47FA                      l10669 47BC  
                    l10837 2076                      l10829 204A                      l10597 45BA  
                    l10589 4592                      l10679 47EA                      l10687 4812  
                    l10847 20A8                      l10775 1F24                      l10937 1B08  
                    l10793 1F8C                      l10785 1F52                      l10777 1F2C  
                    l10949 1B96                      l10877 2144                      l10887 2168  
                    l10879 214C                      l10991 550E                      l10983 54F0  
                    l10897 19F8                      l10979 54E6                      l10997 552C  
          __end_of___aldiv 40D2    __end_ofi1_desintegrator 2F7E                      ?_main 0001  
          __end_of___awdiv 507A                      _EEADR 000FA9            __end_of___ftadd 2668  
                    STR_10 7E5B                      STR_11 7FDA                      STR_12 7E7F  
                    STR_20 7E01                      STR_13 7FBB                      STR_21 7DB1  
                    STR_22 7F66                      STR_14 7E13                      STR_30 7DCA  
                    STR_15 7FE9                      STR_23 7E6D                      STR_31 7DDD  
                    STR_16 7E5B                      STR_32 7FF8                      STR_24 7F77  
                    STR_40 7F55                      STR_17 7FF8                      STR_25 7F99  
                    STR_33 7DEF                      STR_18 7E7F                      STR_34 7FAA  
                    STR_26 7E91                      STR_19 7FBB                      STR_35 7EB5  
                    STR_27 7EA3                      STR_36 7F33                      STR_28 7E49  
          __end_of___awmod 55FC                      STR_37 7EB5                      STR_29 7E37  
                    STR_38 7F44                      STR_39 7EB5            __end_of___ftdiv 39A0  
          __end_of___ftneg 6B02            __end_of___lldiv 5136            __end_of___ftmul 36F6  
          ___awdiv@divisor 0108            __end_of___llmod 590E            __end_of___ftsub 6712  
            lcd_init@F7567 00BF            __end_of___fttol 3C30                      u14101 2F94  
                    u14121 2FCE                      u13330 603A                      u13340 604C  
                    u13405 5CBA                      u13350 6066                      u13406 5CBC  
                    u13360 6086                      u13336 603C                      u13425 5CD8  
                    u13426 5CDA                      u15220 2CCC                      u13348 6050  
                    u13445 5CF6                      u13358 606A                      u13446 5CF8  
                    u17000 16DA                      u13368 608A                      u13561 2416  
                    u13385 5C9C                      u13465 684E                      u16210 2012  
                    u13386 5C9E                      u13466 6850                      u14530 03EA  
                    u13571 2434                      u16220 2014                      u13821 35AE  
                    u17006 16DC                      u14535 03DE                      u16240 2030  
                    u14720 0868                      u13841 35E8                      u14385 5B56  
                    u14386 5B58                      u16250 2032                      u13771 386A  
                    u17107 54D6                      u16260 2042                      u17117 54FE  
                    u16270 2044                      u15630 45C6                      u13791 38A4  
                    u17127 551C                      u15640 45C8                      u17137 5FDA  
                    u17147 5D00                      u16540 1C5E                      u17157 67FE  
                    u16550 1C60                      u16480 1A64                      u16490 1A66  
                    u15850 47C8                      u15860 47CA                      u16670 14D6  
                    u16780 1582                      u16676 14D8                      u16890 162E  
                    u16786 1584                      u16896 1630                      i1l227 6D30  
                    i1l501 33EA                      i1l540 2F7C                      i1l285 6CF6  
                    i1l279 6C66                      i1l554 69A8                      i1l491 3338  
                    i1l563 521A                      i1l715 2316                      i1l484 5A02  
                    i1l492 3330                      i1l653 538A                      i1l901 0076  
                    i1l566 524A                      i1l569 527E                      i1l691 21BE  
                    i1l695 21E6                      i1l696 21FE                ?_UARTConfig 0001  
                    i2l484 63B0            ___awdiv@counter 010A                      i2l896 60E2  
            __CFG_WDTPS$32 000000                      _T2int 32A4             i1___ftadd@exp1 0073  
           i1___ftadd@exp2 0072                      _T4int 3424    __size_ofi1_chanValDigUP 00D0  
           i1___ftadd@sign 0071                ?_PWM2Config 0001              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000        ___lmul@multiplicand 0104  
            __CFG_WRT3$OFF 000000               ___lltoft@exp 0110             __CFG_EBTR0$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000                      _fData 00AF  
           __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000             __CFG_EBTRB$OFF 000000                      _exp10 0177  
                    _flech 019E            __end_of_dpowers 7D63                      _selSN 01CC  
    __size_ofi1_readEEPROM 0016          lcd_read_byte@high 0103                      _scale 0CF4  
          __end_of_isdigit 6BB2         __CFG_MCLRE$EXTMCLR 000000              ___ftpack@sign 0104  
          ??_drawValEditor 0174                      _putch 6D10           __end_ofi1___lmul 6282  
                    tablat 000FF5           __end_ofi2___ftge 5C7C              drawPassWord@i 0174  
            i1_calcVars2ti 6620             i1___ftdiv@cntr 007B            __end_of_pressUP 461E  
             _sysParamInit 55FC             i1___ftdiv@sign 0080                      plusw2 000FDB  
             ?_setPWM2duty 0100           i1desintegrator@i 0088                      status 000FD8  
          ??_lcd_read_byte 0102         __size_ofi1___aldiv 011A                i1_pressDOWN 4822  
           __CFG_HFOFST$ON 000000         __size_ofi1___ftadd 0268         __size_ofi1___ftdiv 014C  
             putchUART@val 0060         __size_ofi1___ftmul 015E         __size_ofi1___fttol 0144  
            i1_calcSysVars 6444         __size_ofi2___ftadd 01AC             i1___ftpack@arg 0060  
           i1___ftpack@exp 0063               ?_longPressUP 0001            __initialization 5A36  
    __end_ofi1_writeEEPROM 6C6C               __end_of_main 675C                ?i1___altoft 0068  
          ??_lcd_send_byte 0106        i1___lmul@multiplier 0060                ?i1___ftpack 0060  
           i1___ftmul@cntr 0075             i1___ftmul@sign 0076      __end_of_saveSysParams 5B5A  
            lcd_gotoxy@pos 0109      __size_ofi1_integrator 0122                ?i2___altoft 0009  
             ?_releaseDOWN 0001             i1___fttol@exp1 006E              _maxTimePerCut 004C  
              ?i2___ftpack 0001         __size_ofi1_pressUP 0106             i1___fttol@lval 006A  
   __size_of_loadSysParams 0048                     ??_main 0177              ___fttol@sign1 0133  
             i1_readEEPROM 6CE8              __activetblptr 000002             __CFG_PLLCFG$ON 000000  
          i1___altoft@sign 0071                     ?_T2int 0001                     ?_T4int 0001  
     __size_of__tdiv_to_l_ 019E           i1_chanValDigDOWN 4D68           ?_interruptConfig 0001  
       desintegrator@temp2 0146         desintegrator@temp3 0142         desintegrator@tempL 013E  
     __size_of_clockConfig 0026      __size_of_chanValDigUP 00D0           __end_of_t2config 6CBC  
             i1checkPass@i 0065                  ??_UARTint 0093           __end_of_t4config 6B88  
         __end_of___altoft 5738             setPWM2duty@act 0104           ___llmod@dividend 010D  
                   ?_scale 0123                     _EEDATA 000FA8                     _CCPR2L 000F67  
                   _EECON2 000FA7     __size_of_initProtocoll 0040           ___awdiv@dividend 0106  
                   ?_putch 0001           __end_of___ftpack 440C   __size_of_drawAutoCalibRM 0032  
        ??i1_initProtocoll 0066             ?i1_calcVars2ti 0001           __end_of___lltoft 5FB2  
                   i1l1311 270A                     i1l1313 2732                     i1l1322 2808  
                   i1l1331 2832                     i1l1307 26D0                     i1l1342 3AB6  
                   i1l1284 44E4                     i2l1311 2AF4                     i2l1322 2BA4  
                   i2l1331 2BC0                     i2l1307 2ACA                     i1l7131 3EC4  
                   i2l1284 5498                     i1l7205 5290                     i1l8021 634A  
                   i1l7143 3F74                     i1l7135 3EDA                     i1l8015 6330  
                   i1l8031 4834                     i1l7071 5DA8                     i1l7119 2E74  
                   i1l8103 53BC                     i1l8009 6312                     i1l7081 5E18  
                   i1l8201 22A0                     i1l8105 53C4                     i1l5571 443A  
                   i1l7251 26DE                     i1l8019 6342                     i1l8051 48BA  
                   i1l8043 4892                     i1l7075 5DBE                     i1l5581 44C8  
                   i1l5573 4448                     i1l7309 28AA                     i1l7173 51F8  
                   i1l8133 65A4                     i1l8061 48E8                     i1l8037 4846  
                   i1l7085 5E20                     i1l7149 68C0                     i1l8221 231C  
                   i1l8117 53F8                     i1l8109 53D6                     i1l5583 44D6  
                   i1l5575 4478                     i1l5567 4426                     i1l7263 2728  
                   i1l7183 522C                     i1l8127 658A                     i1l8063 48EE  
                   i1l7079 5E10                     i1l7159 68EC                     i1l8215 22FC  
                   i1l8207 22D0                     i1l7281 27A6                     i1l7273 276A  
                   i1l7257 2718                     i1l7193 525C                     i1l7169 69CE  
                   i1l8137 65B6                     i1l8057 48DC                     i1l6801 4142  
                   i1l8225 232E                     i1l8153 21AA                     i1l5595 450A  
                   i1l5579 4498                     i1l7291 27EE                     i1l7283 27B4  
                   i1l8315 1D96                     i1l8067 48F8                     i1l6803 4152  
                   i1l8171 2212                     i1l8163 21D8                     i1l8155 21B2  
                   i1l5589 44EE                     i1l5925 376A                     i1l7293 27FC  
                   i1l7285 27C0                     i1l8069 4910                     i1l6821 41DA  
                   i1l6813 41AC                     i1l6805 4158                     i1l8229 2340  
                   i1l8181 224A                     i1l8093 5390                     i1l5943 37D6  
                   i1l5919 3730                     i1l7279 2798                     i1l8327 1E24  
                   i1l8255 23CA                     i1l8087 536C                     i1l5953 3814  
                   i1l5873 39DA                     i1l6833 5802                     i1l8281 1CA4  
                   i1l6817 41BE                     i1l8265 23EE                     i1l8257 23D2  
                   i1l8185 225C                     i1l5939 37B8                     i1l7299 285C  
                   i1l6835 5812                     i1l8291 1CD0                     i1l8275 1C86  
                   i1l8179 222C                     i1l9067 006A                     i1l6765 59CC  
                   i1l8613 3406                     i1l5949 37F6                     i1l6773 621E  
                   i1l8285 1CB6                     i1l5879 3A14                     i1l6847 3C6A  
                   i1l8199 228C                     i1l8703 42F0                     i1l6769 59EE  
                   i1l6777 6244                     i1l6865 3CFC                     i2l7211 541A  
                   i1l5899 3A74                     i1l8299 1CFA                     i1l6795 4114  
                   i1l6883 3D62                     i1l6875 3D2C                     i1l8581 336E  
                   i1l6789 40F6                     i1l6877 3D3C                     i1l6869 3D10  
                   i1l8661 4244                     i1l8653 4224                     i2l7223 5466  
                   i2l7215 5428                     i1l8575 3354                     i1l6879 3D46  
                   i1l8671 426E                     i2l7225 5484                     i2l7217 5432  
                   i1l7961 4630                     i1l8657 4234                     i1l8649 4214  
                   i2l7227 548E                     i2l7219 5450                     i1l8691 42C0  
                   i1l8683 42A0                     i1l8675 4280                     i1l7981 46C0  
                   i1l7973 4698                     i1l7991 46EE                     i1l7967 4648  
                   i1l8695 42D0                     i1l8687 42B0                     i1l8679 4290  
                   i1l7993 46F4                     i1l7987 46E2                     i1l8699 42E0  
                   i2l8341 6140                     i2l8405 2BDC                     i1l7997 46FC  
                   i2l8343 614C                     i2l8415 2C0C                     i2l8423 5C1C  
                   i1l7999 4714                     i2l8433 5C78                     i2l8363 2B02  
                   i2l8427 5C4C                     i2l8357 2AD8                     i2l8391 2B70  
                   i2l8385 2B54                     i2l8801 343E                     i2l8387 2B5E  
                   i2l8379 2B32                     i2l8811 34D0                     i2l8397 2B92  
                   i2l8389 2B68                     i2l8399 2B9C                     i2l7951 638A  
                   i2l8815 34EE                     i2l7955 63A4                     i2l8827 355E  
                   i2l8799 343A                     _RCREG1 000FAE       __size_of_drawBadPass 0016  
                   u750_21 3746           i1_confirmEdition 51F2                     u743_21 39B6  
                   u745_21 39F0                     u748_21 370C                     _SPBRG1 000FAF  
                   u883_21 3C46                     u948_21 267E                     u949_21 269C  
           ?i1_calcSysVars 0001                     _TXREG1 000FAD             i1_sysParamInit 5738  
     __size_of_drawChanVal 0084           __end_of_delay_ms 6830      __size_ofi1_pressENTER 0286  
                   _UPisLP 0049             integrator@acum 0123           __end_of_ioConfig 6A70  
             i1_integrator 3E96        __size_of_UARTConfig 0038      __size_ofi1_pressRETRO 00AE  
           integrator@temp 0127             __CFG_PWRTEN$ON 000000             __CFG_XINST$OFF 000000  
            _DOWNsecurLock 01BE        __size_of_PWM2Config 0066           __end_of__powers_ 7DB1  
     __size_of_drawSNquest 00F0               _CCPTMRS0bits 000F49           __end_of_drawMenu 2A86  
         __end_of_lcd_init 555A           __end_of_lcd_putc 602C                     ___ftge 4E34  
                   ___lmul 6196           __end_of_cutError 6B5E                  ??___aldiv 0108  
                   ___wmul 69D6                  ??___awdiv 010A                  ??___ftadd 0133  
           __CFG_STVREN$ON 000000                  ??___awmod 0104                  ??___ftdiv 0118  
                ??___ftneg 0103                  ??___lldiv 0108                  ??___ftmul 011A  
                ??___llmod 0115                  ??___ftsub 013F                  ??___fttol 012E  
                   _contra 00AB       __end_of_drawCutError 6B30                     _hp_isr 0008  
                   _selKMT 004B                     _fround 172C             i2___altoft@exp 0011  
                   clear_0 5A9C                     clear_1 5AA8                     clear_2 5AB4  
         ___awdiv@quotient 010C            ___awmod@divisor 0102               _chanValDigUP 4AFC  
          ___awmod@counter 0104                     _printf 00C2       __end_of_drawPass1Lin 6C8A  
 __size_ofi1_longPressDOWN 002A           ?i1_desintegrator 0001          __end_ofi1___aldiv 41EC  
    ___ftmul@f3_as_product 011E          __end_ofi1___ftadd 28D0        _lcd_send_4bits$1834 0100  
      _lcd_send_4bits$1835 0101        _lcd_send_4bits$1836 0102        _lcd_send_4bits$1837 0103  
        __end_ofi1___ftdiv 3AEC           ??_lcd_read_4bits 0100          __end_ofi1___ftmul 3854  
        __end_ofi1___fttol 3D74       __end_of_drawPassWord 4AFC               __pdataCOMRAM 004C  
                ??_isdigit 0100          __end_ofi2___ftadd 2C32             i2___ftadd@exp1 001E  
           i2___ftadd@exp2 001D           i1_longPressENTER 1C66             i2___ftadd@sign 001C  
             __mediumconst 7D3A           i1_longPressRETRO 656E                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                  ??_pressUP 0105  
             i1_pressENTER 217A        __size_ofi1___altoft 009E           ??_chanValDigDOWN 0100  
             i1_pressRETRO 535C        __size_ofi1___ftpack 010C     __end_ofi1_sysParamInit 57D6  
            _loadSysParams 675C                 __accesstop 0060          ?_saveProcessState 0001  
  __end_of__initialization 5ABA                 ___altoft@c 0108        __size_ofi2___altoft 0078  
        __end_ofi1_pressUP 4724            __CFG_PBADEN$OFF 000000      __size_of_EEPROMConfig 0006  
              _UPsecurLock 01C2                 ___ftadd@f1 012D                 ___ftadd@f2 0130  
      __size_ofi2___ftpack 00AE       i1longPressENTER@temp 008D                 ___ftge@ff1 0100  
               ___ftge@ff2 0103            i1___ftpack@sign 0064              ___rparam_used 000001  
       ??_saveProcessState 0062                 ___ftdiv@f1 0112                 ___ftdiv@f2 0115  
               ___ftdiv@f3 011C           ??_lcd_send_4bits 0100            writeEEPROM@data 0100  
               ___ftneg@f1 0100             i2___ftpack@arg 0001              __end_of_T2int 3424  
           i2___ftpack@exp 0004              __end_of_T4int 3598                 ___ftmul@f1 0114  
               ___ftmul@f2 0117           ??_confirmEdition 0123                 ___ftsub@f1 0139  
               ___ftsub@f2 013C                 ___fttol@f1 012A             __pcstackCOMRAM 0001  
              setPWM2on@on 0100               __pidataBANK0 6D5E               __pidataBANK1 6A0C  
             _FC1securLock 0046              _initProtocoll 6872         __size_of_checkPass 008E  
               ___lltoft@c 0108                integrator@i 012B              __end_of_scale 11A2  
            __end_of_putch 6D1E               _FC2securLock 0047                  ?i1___lmul 0060  
                ?i2___ftge 001F               _actualScreen 01C3             lcd_gotoxy@fila 0108  
   __size_ofi1_setPWM2duty 0094                 __div_to_l_ 311C             i1_chanValDigUP 4BCC  
                  ??_T2int 0066                    ??_T4int 0028         __size_of_ioInitStt 0008  
            ?_releaseENTER 0001                 _calibLevel 01C4         __size_of_drawAdvON 004E  
            ?_releaseRETRO 0001            i1___fttol@sign1 0069               _EEPROMConfig 6D78  
        lcd_gotoxy@address 010A            ??i1_calcVars2ti 0081               ?i1_checkPass 0001  
   __size_ofi1_longPressUP 0074            __div_to_l_@exp1 010B            __div_to_l_@cntr 010A  
               _chanValdig 01A9                    ??_scale 0126          i1___aldiv@divisor 0064  
          __div_to_l_@quot 0106                    ??_putch 010D          i1___aldiv@counter 0068  
         ??_longPressENTER 0139                 __pbssBANK0 00A5                 __pbssBANK1 01A9  
           ?_loadSysParams 0001            ??i1_calcSysVars 0077           ??_longPressRETRO 0100  
          ?i1_sysParamInit 0001         __size_of_initCalib 0038      i1_longPressENTER$3382 0090  
            __div_to_l_@f1 0100              __div_to_l_@f2 0103          ??_drawAutoCalibRM 0174  
     __size_of_setPWM2duty 0094             _RETROsecurLock 01C1         __size_of_setPWM2on 001A  
       __CFG_CCP2MX$PORTC1 000000               ?_writeEEPROM 0100             lcd_send_byte@n 0105  
           ?_initProtocoll 0001                    ?___ftge 0100                    ?___lmul 0100  
                  ?___wmul 010E         __size_of_releaseUP 000C         __CFG_CCP3MX$PORTB5 000000  
     __size_of_longPressUP 0074                  ?_t2config 0001                    ?_hp_isr 0001  
                ?_t4config 0001                  ?___altoft 0108                    ?_fround 0123  
           ___lmul@product 0108               ?i1_initCalib 0001                  ?___ftpack 0100  
   __end_ofi1_chanValDigUP 4C9C      __end_of_desintegrator 2DD8                    ?_printf 013F  
                ?___lltoft 0108                 ??i1___lmul 0068                 ??i2___ftge 0025  
                  u1200_41 2AAA         __size_of_pressDOWN 00FE      i2setPWM2duty@actuator 0001  
             ??_UARTConfig 0100       __size_of_releaseDOWN 000C             ??_releaseENTER 0100  
   __size_ofi2_setPWM2duty 0070                    u1199_41 2A96             ??_releaseRETRO 0100  
             ??_PWM2Config 0106            __CFG_WDTEN$SWON 000000                  ?_delay_ms 0100  
 __size_ofi1_saveSysParams 0092                 _drawScreen 4EFC                 _lcd_gotoxy 6AA2  
                ?_ioConfig 0001         __size_of_putchUART 000E     __size_of_longPressDOWN 002A  
                  _SPBRGH1 000FB0          ??i1_longPressDOWN 0060                    _UARTint 41EC  
                ?_drawMenu 0001                  ?_lcd_init 0001                    _i16Data 00B2  
            ??_calcVars2ti 0123          __end_of_checkPass 5D98                  ?_lcd_putc 0001  
                ?_cutError 0001    __size_of_buttonChecking 02B2             _tempLastScreen 00BE  
    __end_of_drawCalibProc 5EB2              ??_calcSysVars 0123                 _holdUPcont 01C9  
             ?i1_pressDOWN 0001                 _readEEPROM 6CBC              i1_setPWM2duty 59A2  
        __end_of_ioInitStt 6D70   __end_ofi1_chanValDigDOWN 4E34          __end_of__npowers_ 7D8A  
                  _t2Cont1 00BC                    _t2Cont2 00BD                    __Hparam 0000  
               _scale$3166 0126      __size_of_drawCutError 002E                 _lastSttFC1 00B9  
               _lastSttFC2 00BA                    __Lparam 0000          __end_of_drawAdvON 66C6  
       __end_of_UARTConfig 699E                 checkPass@i 0105         __end_of_PWM2Config 6514  
             ??i1___altoft 006C      __size_of_drawPass1Lin 001E              i1_longPressUP 62F6  
                  ___aldiv 3FB8            __size_of___ftge 00C8               ??i1___ftpack 0065  
                  ___awdiv 4FBC            __size_of___lmul 0076                    ___ftadd 2400  
                  ___awmod 555A                    ___ftdiv 3854                    ___ftneg 6AD2  
                  ___lldiv 507A            __size_of___wmul 0036                    ___ftmul 3598  
                  ___llmod 5874                    ___ftsub 66C6                    ___fttol 3AEC  
               ??_t2config 0100                 ??_t4config 0100      __size_of_drawPassWord 00EC  
             ??i2___altoft 000D                 ??___altoft 010C            __size_of_hp_isr 6116  
                  __pcinit 5A36               ??i2___ftpack 0006                 ??___ftpack 0105  
          __size_of_fround 02AC                    __ramtop 0600            ?i1_chanValDigUP 0001  
 __end_ofi1_confirmEdition 52AE                 ??___lltoft 010C          __end_of_initCalib 6966  
                  __ptext0 6712                    __ptext1 6B5E                    __ptext2 55FC  
                  __ptext3 6CBC                    __ptext4 63DA                    __ptext5 6C8A  
                  __ptext6 54B8                    __ptext7 6D68                    __ptext8 6A3E  
                  __ptext9 6D70            __size_of_printf 0C32            i1_initProtocoll 68B2  
      i1initProtocoll@init 0066                ?__div_to_l_ 0100                    _dpowers 7D3B  
                _T2CONbits 000FBA                 _integrator 3D74                    _isdigit 6B88  
             __size_of_isr 00A6           ___awmod@dividend 0100            i2___altoft@sign 0012  
         ___aldiv@dividend 0100                  _T4CONbits 000F51                 ??_delay_ms 0102  
        __end_of_setPWM2on 6CA4                 ??_ioConfig 0100                    _pressUP 4518  
                _ENTERisLP 01BF                    _questSN 01BC            ??_loadSysParams 0081  
               ??_drawMenu 0174                 ??_lcd_init 0108          __end_of_releaseUP 6D46  
           __pintcode_body 60A6                 ??_lcd_putc 010B       end_of_initialization 5ABA  
               ??_cutError 0001         __end_ofi1___altoft 5874          i1calcSysVars@temp 0077  
             _drawCutError 6B02      __end_of_drawValEditor 147A         __end_ofi1___ftpack 4518  
     lcd_send_byte@address 0107                  i1u1104_20 46CC                  i1u1105_20 46CE  
                i1u1126_20 48C6                  i1u1127_20 48C8             ?i1_setPWM2duty 0060  
               _securTimer 003B                  i1u1162_20 2298              __Lmediumconst 7D3A  
                i1u1163_20 229A                  i1u1236_20 335C                  i1u1236_26 335E  
                i1u1245_20 340E                  i1u1165_20 22B6                  i1u1245_26 3410  
                  int_func 60A6                  i1u1190_20 1CF4                  i1u1166_20 22B8  
                i1u1167_20 22C8                  i1u1168_20 22CA                  i1u1195_20 1EEC  
             _drawPass1Lin 6C6C                  i1u1196_20 1EEE                  i1u1189_20 1CF2  
       __end_ofi2___altoft 6196              i2_setPWM2duty 636A         __end_ofi2___ftpack 54B8  
                i2u1265_45 342E          __end_of_pressDOWN 4822                  i2u1265_46 3430  
      __end_of_calcVars2ti 6620      __end_of_lcd_read_byte 67EA            ___lldiv@divisor 0104  
             _drawPassWord 4A10            ??_initProtocoll 0106            ___lldiv@counter 010C  
 __end_ofi1_longPressENTER 1EF4   __end_ofi1_longPressRETRO 65C8            lcd_read_4bits@n 0101  
            _longPressDOWN 6BB2             ?i1_longPressUP 0001        __end_of_calcSysVars 6444  
         i1setPWM2duty@act 0064              readEEPROM@adr 0100                    printf@c 0173  
                  printf@f 013F          __end_of_putchUART 6D3A           ___aldiv@quotient 010A  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE                 _pressENTER 1EF4          i1checkPass@passOK 0064  
               _pressRETRO 52AE                  _RETROisLP 0048             __tdiv_to_l_@f1 0100  
           __tdiv_to_l_@f2 0103      __end_of_lcd_send_byte 6872              ??__tdiv_to_l_ 0106  
                _PORTAbits 000F80                  _PORTBbits 000F81                  _PORTCbits 000F82  
               _timsXcorte 005A              ??_clockConfig 0100           i1integrator@acum 0083  
             _holdDOWNcont 01C6           i1integrator@temp 0087                  _TRISAbits 000F92  
                _TRISBbits 000F93                  _TRISCbits 000F94                ?_drawScreen 0001  
              ?_lcd_gotoxy 0108                  i1___aldiv 40D2                  i1___ftadd 2668  
                i1___ftdiv 39A0                  i1___ftmul 36F6                  i1___fttol 3C30  
            ??_drawBadPass 0174     __size_ofi1_writeEEPROM 0020                  i2___ftadd 2A86  
            ??_drawChanVal 0174       __size_ofi1_checkPass 008E     __size_of_saveSysParams 0092  
 __size_of_interruptConfig 0008          ??i1_saveSysParams 0081             ?i2_setPWM2duty 0001  
              ?_readEEPROM 0001                ___ftdiv@exp 011F              ??_drawSNquest 0174  
              printf@width 016C                _CCP2CONbits 000F66         longPressENTER@temp 0139  
        confirmEdition@yes 0123            i2___ftpack@sign 0005       __end_of_releaseENTER 6D2C  
      __size_of__div_to_l_ 0188       __end_of_releaseRETRO 6D52             ?_longPressDOWN 0001  
                i1_pressUP 461E         _tempVelocidadMasa1 01A3         _tempVelocidadMasa2 01A6  
       _tempVelocidadMasa3 0192                ___ftmul@exp 011D    __end_ofi1_initProtocoll 68F2  
              _ECCP2ASbits 000F64       __size_of_writeEEPROM 0020             __end_of___ftge 4EFC  
           __end_of___lmul 620C             __end_of___wmul 6A0C  __size_of_saveProcessState 003C  
            __pidataCOMRAM 6CFE             __end_of_hp_isr 611E             __end_of_fround 19D8  
     __size_ofi1_initCalib 0038        setPWM2duty@actuator 0100             __end_of_printf 0CF4  
              ?_integrator 0001      i1___lmul@multiplicand 0064          __size_ofi1___lmul 0076  
      start_initialization 5A36          __size_ofi2___ftge 0090        __end_of__tdiv_to_l_ 311C  
         ??i1_sysParamInit 007A                 ?i1___aldiv 0060                __end_of_isr 00BE  
               ?i1___ftadd 0068                 ?i1___ftdiv 0072                 ?i1___ftmul 0068  
               ?i1___fttol 0060            _drawAutoCalibRM 6A70        __end_of_clockConfig 6C2C  
               ?i2___ftadd 0013   __size_ofi1_desintegrator 01A6                _calcVars2ti 65C8  
          ??i1_setPWM2duty 0062             _buttonChecking 147A          desintegrator@temp 013B  
              _calcSysVars 63DA            ___llmod@divisor 0111        __end_of_drawBadPass 6CE8  
          ___llmod@counter 0115            ??i1_longPressUP 0060               _lastSttENTER 01A0  
             _lastSttRETRO 01A1        __end_of_drawChanVal 5F36       __size_ofi1_pressDOWN 00FE  
               ?i1_pressUP 0001                   ??___ftge 0106        __size_of_drawScreen 00C0  
                 ??___lmul 0108        __size_of_lcd_gotoxy 0030              i1_writeEEPROM 6C4C  
                 ??___wmul 0112        __end_of_drawSNquest 4A10                ?_pressENTER 0001  
              _chanValChar 00A5                ?_pressRETRO 0001                __pdataBANK0 00BF  
              __pdataBANK1 0177            lcd_send_4bits@n 0104                   ??_hp_isr 0029  
       i1___aldiv@dividend 0060              _saveSysParams 5AC8                   ??_fround 0126  
          i1_longPressDOWN 6BDC            i1readEEPROM@adr 0060                   ??_printf 0151  
        __size_of_t2config 0018          __size_of_t4config 002A          __size_of___altoft 009E  
               fround@prec 012C        __size_of_readEEPROM 0016          __size_of___ftpack 010C  
        __size_of___lltoft 007C                __pbssCOMRAM 0037             writeEEPROM@adr 0101  
            __pcstackBANK0 0060              __pcstackBANK1 0100                  _calFactor 003F  
   __end_of_buttonChecking 172C                   ?_UARTint 0001               _isdigit$2660 0101  
        __size_of_delay_ms 0046           i1___lmul@product 0068          __size_of_ioConfig 0032  
    __end_ofi1_calcVars2ti 6678            ??i2_setPWM2duty 0003              ?_sysParamInit 0001  
  __size_of_lcd_read_4bits 007A              ??_setPWM2duty 0102          __size_of_drawMenu 01B6  
        __size_of_lcd_init 00A2          __size_of_lcd_putc 007A                  _bladeIsUP 00C8  
    __end_ofi1_calcSysVars 64AE         i1___aldiv@quotient 006A          __size_of_cutError 002E  
                _checkPass 5D0A            ??_longPressDOWN 0100        __size_of_integrator 0122  
            ??_longPressUP 0100          ?i1_chanValDigDOWN 0001          ??_interruptConfig 0100  
           ?i1_writeEEPROM 0060    __size_of_chanValDigDOWN 00CC           ??i1_chanValDigUP 0060  
                __pintcode 0008              __pmediumconst 7D3A                   ?___aldiv 0100  
         ?i1_initProtocoll 0001                   ?___awdiv 0106                  __ptext100 1C66  
                __ptext101 3E96                  __ptext110 5B5A                  __ptext102 620C  
                __ptext111 6620                  __ptext103 57D6                  __ptext112 39A0  
                __ptext104 699E                  __ptext121 3424                  __ptext113 6444  
                __ptext105 51F2                  __ptext122 636A                  __ptext114 36F6  
                __ptext106 2668                  __ptext123 5BEC                  __ptext115 440C  
                __ptext107 6BDC                  __ptext124 2A86                  __ptext116 32A4  
                __ptext108 6D2C                  __ptext125 611E                  __ptext117 59A2  
                __ptext109 675C                   ?___ftadd 012D                  __ptext126 540A  
                __ptext118 68F2                  __ptext127 6B30                  __ptext119 6C4C  
       ??i1_chanValDigDOWN 0060                   ?___awmod 0100                   ?___ftdiv 0112  
                 ?___ftneg 0100                  _ioInitStt 6D68                   ?___lldiv 0100  
                 ?___ftmul 0114                   ?___llmod 010D                   ?___ftsub 0139  
                __npowers_ 7D63                   ?___fttol 012A             ?_saveSysParams 0001  
                _drawAdvON 6678              ??_releaseDOWN 0100                __pintcodelo 0018  
         __CFG_PRICLKEN$ON 000000                __tdiv_to_l_ 2F7E    __size_of_lcd_send_4bits 008E  
        ?i1_confirmEdition 0001              ?i1_readEEPROM 0001    __end_of_drawAutoCalibRM 6AA2  
             ??__div_to_l_ 0106    __size_of_confirmEdition 00BC                _clockConfig 6C06  
                 ?_isdigit 0001             __size_of_T2int 0180             __size_of_T4int 0174  
       ??i1_confirmEdition 0081                  _initCalib 692E                  _lastSttUP 01A2  
              ??i1___aldiv 0068                   ?_pressUP 0001                ??i1___ftadd 006E  
              ??i1___ftdiv 0078                ??i1___ftmul 006E                ??i1___fttol 0064  
          ?_buttonChecking 0001                ??i2___ftadd 0019                _drawBadPass 6CD2  
           __size_of_scale 04AE             ??_sysParamInit 0126             __size_of_putch 000E  
      __size_of_pressENTER 0286                  _setPWM2on 6C8A      __size_of_releaseENTER 000E  
      __size_of_pressRETRO 00AE                _drawChanVal 5EB2      __size_of_releaseRETRO 000C  
          ___aldiv@divisor 0104            ___aldiv@counter 0108              _tempNumCortes 019B  
           ___wmul@product 0112                   _LATBbits 000F8A                   _LATCbits 000F8B  
                _releaseUP 6D3A                 ?_checkPass 0001    lcd_init@LCD_INIT_STRING 0109  
                delay_ms@i 0103     __size_of_desintegrator 01A6                   _DOWNisLP 0045  
              _drawSNquest 4920          ??i1_desintegrator 0077                   _IPR1bits 000F9F  
                 _PIE1bits 000F9D                   _IPR5bits 000F7F                   _PIE5bits 000F7D  
                _numCortes 00C6              ?i1_integrator 0001                ??i1_pressUP 0065  
                 _PIR1bits 000F9E         __end_of__div_to_l_ 32A4    __end_ofi1_longPressDOWN 6C06  
                 i1u870_25 5BE8                   i1u870_26 5BEA                   i1u928_20 2E72  
                 _PIR5bits 000F7E                   i1u972_25 692A                   i1u972_26 692C  
                 i1u885_20 3C90                   i1u885_25 3C86          ?i1_longPressENTER 0001  
      __end_of_setPWM2duty 59A2                _holdFC1cont 00B6                _holdFC2cont 00B7  
                 _RCONbits 000FD0          ?i1_longPressRETRO 0001                 UARTint@sas 0093  
  __size_of_longPressENTER 028E                  _pressDOWN 4724    __size_of_longPressRETRO 005A  
               ?_ioInitStt 0001         ??i1_longPressENTER 008D                 ?_drawAdvON 0001  
       ??i1_longPressRETRO 0060           _saveProcessState 68F2              ?_chanValDigUP 0001  
                _putchUART 6D2C        __end_of_longPressUP 62F6             ??i1_readEEPROM 0060  
                 i1___lmul 620C          ___wmul@multiplier 010E                   i2___ftge 5BEC  
   __size_of_drawCalibProc 008C                  lcd_init@i 010D                 printf@flag 0160  
               printf@fval 016E                 printf@prec 0171            i1_saveSysParams 5B5A  
             _releaseENTER 6D1E        __end_of_releaseDOWN 6D5E                 ?_initCalib 0001  
             ??_drawScreen 0177               _releaseRETRO 6D46               ??_lcd_gotoxy 0109  
            ?i1_pressENTER 0001          ___lmul@multiplier 0100                  copy_data0 5A4A  
                copy_data1 5A6A                  copy_data2 5A8A              ?i1_pressRETRO 0001  
         __size_of_UARTint 0114      __end_of_loadSysParams 67A4                 ?_setPWM2on 0001  
             ??_readEEPROM 0100                 ?_releaseUP 0001             ??i1_integrator 0081  
               _EECON1bits 000FA6            ??i1_writeEEPROM 0061                   __Hrparam 0000  
              _lastSttDOWN 019F                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
    __end_of_initProtocoll 68B2            ??_saveSysParams 0123                 ?_pressDOWN 0001  
        __CFG_P2BMX$PORTC0 000000         __end_of_drawScreen 4FBC         __end_of_lcd_gotoxy 6AD2  
         __size_of___aldiv 011A                   _t2config 6CA4              i1integrator@i 008B  
         __size_of___awdiv 00BE             ??_chanValDigUP 0100           __size_of___ftadd 0268  
         __size_of___awmod 00A2                   _t4config 6B5E           __size_of___ftdiv 014C  
         __size_of___ftneg 0030           __size_of___lldiv 00BC                   ___altoft 569A  
         __size_of___ftmul 015E           __size_of___llmod 009A           __size_of___ftsub 004C  
         __size_of___fttol 0144                 ?_putchUART 0001                   ___ftpack 4300  
              _fround$3164 0129                _fround$3165 0126                   ___lltoft 5F36  
            _desintegrator 2C32     __size_of_drawValEditor 02D8                 _ANSELAbits 000F38  
               _ANSELCbits 000F3A             desintegrator@i 014A           ?_drawAutoCalibRM 0001  
             ??_integrator 0121                _menuSection 01CA                   _chanValf 01B7  
                 _chanVals 01BA         __end_of_readEEPROM 6CD2           __size_of_isdigit 002A  
   __size_of_lcd_read_byte 0046                   _delay_ms 67EA              ?_EEPROMConfig 0001  
                 _ioConfig 6A3E              ??i1_checkPass 0060             ??i1_pressENTER 008A  
                 __ptext10 4EFC                   __ptext11 4920                   __ptext20 11A2  
                 __ptext12 4A10                   __ptext21 6678                   __ptext13 28D0  
                 __ptext30 602C                   __ptext22 00C2                   __ptext14 6B02  
                 __ptext31 6B88                   __ptext23 0CF4                   __ptext15 5EB2  
                 __ptext40 507A                   __ptext32 172C                   __ptext24 6D10  
                 __ptext16 5E26                   __ptext41 66C6                   __ptext33 69D6  
                 __ptext25 5FB2                   __ptext17 6CD2                   __ptext50 4518  
                 __ptext42 6AD2                   __ptext34 555A                   __ptext26 6AA2  
                 __ptext18 6C6C                   __ptext51 4AFC                   __ptext43 4E34  
                 __ptext35 4FBC                   __ptext27 6830                   __ptext19 6A70  
                 __ptext60 4C9C                   __ptext52 52AE                   __ptext44 6C06  
                 __ptext36 2F7E                   __ptext28 5C7C                   __ptext61 6282  
                 __ptext53 1EF4                   __ptext45 147A                   __ptext37 311C  
                 __ptext29 67A4                   __ptext70 6C2C                   __ptext62 6514  
                 __ptext54 6872                   __ptext46 6D3A                   __ptext38 5F36  
                 __ptext71 65C8                   __ptext63 19D8                   __ptext55 2C32  
                 __ptext47 6D46                   __ptext39 5874                   __ptext80 6CA4  
                 __ptext72 3598                   __ptext64 3D74                   __ptext56 3AEC  
                 __ptext48 6D1E                   __ptext81 590E                   __ptext73 3854  
                 __ptext65 6196                   __ptext57 3FB8                   __ptext49 6D52  
                 __ptext90 217A                   __ptext82 6D78                   __ptext74 2400  
                 __ptext66 569A                   __ptext58 5D0A                   __ptext91 68B2  
                 __ptext75 4300                   __ptext67 692E                   __ptext59 4724  
                 __ptext92 2DD8                   __ptext84 41EC                   __ptext76 6BB2  
                 __ptext68 5136                   __ptext93 3C30                   __ptext85 5738  
                 __ptext77 67EA                   __ptext69 5AC8                   __ptext94 40D2  
                 __ptext86 6CE8                   __ptext78 6966                   __ptext95 5D98  
                 __ptext87 461E                   __ptext79 64AE                   __ptext96 4822  
                 __ptext88 4BCC                   __ptext97 4D68                   __ptext89 535C  
                 __ptext98 62F6                   __ptext99 656E             _processStarted 00BB  
                 _kgXcorte 018F                   __powers_ 7D8A             ??i1_pressRETRO 0067  
         __size_of_pressUP 0106                   _drawMenu 28D0                   _lcd_init 54B8  
                 _lcd_putc 5FB2               ?_calcVars2ti 0001                   _cutError 6B30  
              _OSCCON2bits 000FD2             _lcd_read_4bits 602C     __size_of_lcd_send_byte 0042  
              _setPWM2duty 590E          i1writeEEPROM@data 0060               ?_calcSysVars 0001  
            __size_of_main 004A              _drawCalibProc 5E26                ??_checkPass 0100  
          calcSysVars@temp 0123                   _passChar 01B3        _longPressENTER$3163 013C  
              _passSection 01CB                   _tiXcorte 0195                   _timeDOWN 0050  
            ??_writeEEPROM 0101             _chanValDigDOWN 4C9C           ?i1_longPressDOWN 0001  
              _longPressUP 6282         __end_of_integrator 3E96               _PSTR2CONbits 000F63  
             ??_pressENTER 014C                   int$flags 005D                ??_ioInitStt 0100  
                 _questKMT 0042               ??_pressRETRO 0107                ??_drawAdvON 0174  
  __end_ofi1_saveSysParams 5BEC              ??i1_initCalib 0066                  printf@len 015C  
                printf@exp 016A                  printf@val 0166       __end_of_sysParamInit 569A  
              _releaseDOWN 6D52             _lcd_send_4bits 5C7C            checkPass@passOK 0104  
           ?_desintegrator 0001                _introducido 01AF                delay_ms@del 0100  
           _confirmEdition 5136             _chanValSection 019D              _velocidadMasa 0198  
      i1confirmEdition@yes 0081                _OSCTUNEbits 000F9B                 _INTCONbits 000FF2  
           ??_EEPROMConfig 0100       i1desintegrator@temp2 0084       i1desintegrator@temp3 0080  
              ??_initCalib 0106       i1desintegrator@tempL 007C                _PWM2CONbits 000F65  
                 isdigit@c 0102               _tempkgXcorte 0057                   scale@scl 0129  
   __end_of_lcd_read_4bits 60A6            _interruptConfig 6D70                   intlevel1 0000  
                 intlevel2 0000                ??_setPWM2on 0100           __tdiv_to_l_@exp1 010E  
         __tdiv_to_l_@cntr 010D         __end_of_pressENTER 217A           __tdiv_to_l_@quot 0109  
           ?_drawCalibProc 0001         __end_of_pressRETRO 535C      __end_ofi1_setPWM2duty 5A36  
            ??i1_pressDOWN 0065           ___lldiv@dividend 0100              _drawValEditor 11A2  
              ??_releaseUP 0100       __end_ofi1_readEEPROM 6CFE        __end_ofi1_checkPass 5E26  
             _temptiXcorte 00C3     __end_of_chanValDigDOWN 4D68                 _RCSTA1bits 000FAB  
         i1writeEEPROM@adr 0061                 _OSCCONbits 000FD3              _lcd_read_byte 67A4  
       _screen_calibVelRes 004A      __end_ofi1_longPressUP 636A             _longPressENTER 19D8  
           _longPressRETRO 6514                ??_pressDOWN 0105                   printf@ap 015E  
                 printf@cp 015A     __end_of_lcd_send_4bits 5D0A     __end_of_confirmEdition 51F2  
                 putch@val 010D                ??_putchUART 0060        i1desintegrator@temp 0079  
            _lcd_send_byte 6830        __end_of_writeEEPROM 6C4C               ?__tdiv_to_l_ 0100  
              _printf$3167 0157           ??_buttonChecking 014C               ?_clockConfig 0001  
               _UARTConfig 6966               _processTimer 0037               _processState 00B4  
     __end_ofi1_integrator 3FB8           ___lldiv@quotient 0108                 _PWM2Config 64AE  
__size_ofi1_chanValDigDOWN 00CC        __end_ofi1_initCalib 69D6               ___aldiv@sign 0109  
        __CFG_T3CMX$PORTC0 000000            i1_desintegrator 2DD8                 _WDTCONbits 000FD1  
            _holdENTERcont 01C7            ?_lcd_read_4bits 0001               ?_drawBadPass 0001  
            ?_drawCutError 0001               ?_drawChanVal 0001   __end_of_saveProcessState 692E  
     __end_of_chanValDigUP 4BCC             _ENTERsecurLock 01C0             ?_drawValEditor 0001  
__size_ofi1_confirmEdition 00BC              ?_drawPass1Lin 0001      __end_ofi2_setPWM2duty 63DA  
        __CFG_FOSC$INTIO67 000000                drawAdvON@on 0174               ?_drawSNquest 0001  
          ?_chanValDigDOWN 0001    __size_ofi1_sysParamInit 009E     __end_of_longPressENTER 1C66  
            ?_drawPassWord 0001             ?_lcd_read_byte 0001     __end_of_longPressRETRO 656E  
    __end_of_longPressDOWN 6BDC  
