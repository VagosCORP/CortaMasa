

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Mar 11 22:19:22 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1,group=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1,group=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1,group=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	text116,global,reloc=2,class=CODE,delta=1
   136                           	psect	text117,global,reloc=2,class=CODE,delta=1
   137                           	psect	text118,global,reloc=2,class=CODE,delta=1
   138                           	psect	text119,global,reloc=2,class=CODE,delta=1
   139                           	psect	text120,global,reloc=2,class=CODE,delta=1
   140                           	psect	text121,global,reloc=2,class=CODE,delta=1
   141                           	psect	text122,global,reloc=2,class=CODE,delta=1
   142                           	psect	text123,global,reloc=2,class=CODE,delta=1
   143                           	psect	text124,global,reloc=2,class=CODE,delta=1
   144                           	psect	text125,global,reloc=2,class=CODE,delta=1
   145                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   146                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   147                           	psect	text127,global,reloc=2,class=CODE,delta=1
   148                           	psect	text128,global,reloc=2,class=CODE,delta=1
   149                           	psect	text129,global,reloc=2,class=CODE,delta=1
   150                           	psect	text130,global,reloc=2,class=CODE,delta=1
   151                           	psect	text131,global,reloc=2,class=CODE,delta=1
   152                           	psect	text132,global,reloc=2,class=CODE,delta=1
   153                           	psect	text133,global,reloc=2,class=CODE,delta=1
   154                           	psect	text134,global,reloc=2,class=CODE,delta=1
   155                           	psect	text135,global,reloc=2,class=CODE,delta=1
   156                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   157                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   158                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   159  0000                     
   160                           ; Version 1.41
   161                           ; Generated 25/01/2017 GMT
   162                           ; 
   163                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   164                           ; All rights reserved.
   165                           ; 
   166                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   167                           ; 
   168                           ; Redistribution and use in source and binary forms, with or without modification, are
   169                           ; permitted provided that the following conditions are met:
   170                           ; 
   171                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   172                           ;        conditions and the following disclaimer.
   173                           ; 
   174                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   175                           ;        of conditions and the following disclaimer in the documentation and/or other
   176                           ;        materials provided with the distribution.
   177                           ; 
   178                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   179                           ;        software without specific prior written permission.
   180                           ; 
   181                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   182                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   183                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   184                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   185                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   186                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   187                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   188                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   189                           ; 
   190                           ; 
   191                           ; Code-generator required, PIC18F25K22 Definitions
   192                           ; 
   193                           ; SFR Addresses
   194  0000                     
   195                           	psect	idataCOMRAM
   196  00729A                     __pidataCOMRAM:
   197                           	opt stack 0
   198                           
   199                           ;initializer for _timeDOWN
   200  00729A  0032               	dw	50
   201  00729C  0000               	dw	0
   202                           
   203                           ;initializer for _maxTimePerCut
   204  00729E  1388               	dw	5000
   205  0072A0  0000               	dw	0
   206                           
   207                           ;initializer for _timsXcorte
   208  0072A2  40                 	db	64
   209  0072A3  1C                 	db	28
   210  0072A4  46                 	db	70
   211                           
   212                           ;initializer for _tempkgXcorte
   213  0072A5  CD                 	db	205
   214  0072A6  CC                 	db	204
   215  0072A7  3D                 	db	61
   216                           
   217                           ;initializer for _pi
   218  0072A8  10                 	db	16
   219  0072A9  49                 	db	73
   220  0072AA  40                 	db	64
   221                           
   222                           	psect	idataBANK0
   223  0072EC                     __pidataBANK0:
   224                           	opt stack 0
   225                           
   226                           ;initializer for lcd_init@F6841
   227  0072EC  28                 	db	40
   228  0072ED  0C                 	db	12
   229  0072EE  01                 	db	1
   230  0072EF  06                 	db	6
   231                           
   232                           ;initializer for _temptiXcorte
   233  0072F0  00                 	db	0
   234  0072F1  20                 	db	32
   235  0072F2  41                 	db	65
   236                           
   237                           ;initializer for _tempNumCortes
   238  0072F3  0001               	dw	1
   239                           
   240                           ;initializer for _numCortes
   241  0072F5  0005               	dw	5
   242                           
   243                           ;initializer for _lastSttENTER
   244  0072F7  01                 	db	1
   245                           
   246                           ;initializer for _lastSttRETRO
   247  0072F8  01                 	db	1
   248                           
   249                           ;initializer for _lastSttDOWN
   250  0072F9  01                 	db	1
   251                           
   252                           ;initializer for _lastSttUP
   253  0072FA  01                 	db	1
   254                           
   255                           	psect	idataBANK1
   256  00708C                     __pidataBANK1:
   257                           	opt stack 0
   258                           
   259                           ;initializer for _exp10
   260  00708C  86A0               	dw	34464
   261  00708E  0001               	dw	1
   262  007090  2710               	dw	10000
   263  007092  0000               	dw	0
   264  007094  03E8               	dw	1000
   265  007096  0000               	dw	0
   266  007098  0064               	dw	100
   267  00709A  0000               	dw	0
   268  00709C  000A               	dw	10
   269  00709E  0000               	dw	0
   270  0070A0  0001               	dw	1
   271  0070A2  0000               	dw	0
   272                           
   273                           ;initializer for _velocidadMasa
   274  0070A4  CD                 	db	205
   275  0070A5  4C                 	db	76
   276  0070A6  3E                 	db	62
   277                           
   278                           ;initializer for _tempVelocidadMasa3
   279  0070A7  CD                 	db	205
   280  0070A8  4C                 	db	76
   281  0070A9  3E                 	db	62
   282                           
   283                           ;initializer for _tiXcorte
   284  0070AA  00                 	db	0
   285  0070AB  20                 	db	32
   286  0070AC  41                 	db	65
   287                           
   288                           ;initializer for _kgXcorte
   289  0070AD  00                 	db	0
   290  0070AE  80                 	db	128
   291  0070AF  3F                 	db	63
   292                           
   293                           ;initializer for _flech
   294  0070B0  7E                 	db	126
   295                           
   296                           ;initializer for _chanValSection
   297  0070B1  05                 	db	5
   298                           
   299                           ;initializer for _tempVelocidadMasa2
   300  0070B2  CD                 	db	205
   301  0070B3  4C                 	db	76
   302  0070B4  3E                 	db	62
   303                           
   304                           ;initializer for _tempVelocidadMasa1
   305  0070B5  CD                 	db	205
   306  0070B6  4C                 	db	76
   307  0070B7  3E                 	db	62
   308                           
   309                           	psect	mediumconst
   310  007CD4                     __pmediumconst:
   311                           	opt stack 0
   312  007CD4  00                 	db	0
   313  007CD5                     _dpowers:
   314                           	opt stack 0
   315  007CD5  0001               	dw	1
   316  007CD7  0000               	dw	0
   317  007CD9  000A               	dw	10
   318  007CDB  0000               	dw	0
   319  007CDD  0064               	dw	100
   320  007CDF  0000               	dw	0
   321  007CE1  03E8               	dw	1000
   322  007CE3  0000               	dw	0
   323  007CE5  2710               	dw	10000
   324  007CE7  0000               	dw	0
   325  007CE9  86A0               	dw	34464
   326  007CEB  0001               	dw	1
   327  007CED  4240               	dw	16960
   328  007CEF  000F               	dw	15
   329  007CF1  9680               	dw	38528
   330  007CF3  0098               	dw	152
   331  007CF5  E100               	dw	57600
   332  007CF7  05F5               	dw	1525
   333  007CF9  CA00               	dw	51712
   334  007CFB  3B9A               	dw	15258
   335  007CFD                     __end_of_dpowers:
   336                           	opt stack 0
   337  007CFD                     __powers_:
   338                           	opt stack 0
   339  007CFD  00                 	db	0
   340  007CFE  80                 	db	128
   341  007CFF  3F                 	db	63
   342  007D00  00                 	db	0
   343  007D01  20                 	db	32
   344  007D02  41                 	db	65
   345  007D03  00                 	db	0
   346  007D04  C8                 	db	200
   347  007D05  42                 	db	66
   348  007D06  00                 	db	0
   349  007D07  7A                 	db	122
   350  007D08  44                 	db	68
   351  007D09  40                 	db	64
   352  007D0A  1C                 	db	28
   353  007D0B  46                 	db	70
   354  007D0C  50                 	db	80
   355  007D0D  C3                 	db	195
   356  007D0E  47                 	db	71
   357  007D0F  24                 	db	36
   358  007D10  74                 	db	116
   359  007D11  49                 	db	73
   360  007D12  97                 	db	151
   361  007D13  18                 	db	24
   362  007D14  4B                 	db	75
   363  007D15  BC                 	db	188
   364  007D16  BE                 	db	190
   365  007D17  4C                 	db	76
   366  007D18  6B                 	db	107
   367  007D19  6E                 	db	110
   368  007D1A  4E                 	db	78
   369  007D1B  03                 	db	3
   370  007D1C  15                 	db	21
   371  007D1D  50                 	db	80
   372  007D1E  79                 	db	121
   373  007D1F  AD                 	db	173
   374  007D20  60                 	db	96
   375  007D21  F3                 	db	243
   376  007D22  49                 	db	73
   377  007D23  71                 	db	113
   378  007D24                     __end_of__powers_:
   379                           	opt stack 0
   380  007D24                     __npowers_:
   381                           	opt stack 0
   382  007D24  00                 	db	0
   383  007D25  80                 	db	128
   384  007D26  3F                 	db	63
   385  007D27  CD                 	db	205
   386  007D28  CC                 	db	204
   387  007D29  3D                 	db	61
   388  007D2A  D7                 	db	215
   389  007D2B  23                 	db	35
   390  007D2C  3C                 	db	60
   391  007D2D  12                 	db	18
   392  007D2E  83                 	db	131
   393  007D2F  3A                 	db	58
   394  007D30  B7                 	db	183
   395  007D31  D1                 	db	209
   396  007D32  38                 	db	56
   397  007D33  C6                 	db	198
   398  007D34  27                 	db	39
   399  007D35  37                 	db	55
   400  007D36  38                 	db	56
   401  007D37  86                 	db	134
   402  007D38  35                 	db	53
   403  007D39  C0                 	db	192
   404  007D3A  D6                 	db	214
   405  007D3B  33                 	db	51
   406  007D3C  CC                 	db	204
   407  007D3D  2B                 	db	43
   408  007D3E  32                 	db	50
   409  007D3F  70                 	db	112
   410  007D40  89                 	db	137
   411  007D41  30                 	db	48
   412  007D42  E7                 	db	231
   413  007D43  DB                 	db	219
   414  007D44  2E                 	db	46
   415  007D45  E5                 	db	229
   416  007D46  3C                 	db	60
   417  007D47  1E                 	db	30
   418  007D48  42                 	db	66
   419  007D49  A2                 	db	162
   420  007D4A  0D                 	db	13
   421  007D4B                     __end_of__npowers_:
   422                           	opt stack 0
   423  0000                     _PR4	set	3922
   424  0000                     _T4CONbits	set	3921
   425  0000                     _CCPTMRS0bits	set	3913
   426  0000                     _ANSELAbits	set	3896
   427  0000                     _ANSELCbits	set	3898
   428  0000                     _WDTCONbits	set	4049
   429  0000                     _PIE5bits	set	3965
   430  0000                     _IPR5bits	set	3967
   431  0000                     _PIR5bits	set	3966
   432  0000                     _BAUDCON1bits	set	4024
   433  0000                     _SPBRG1	set	4015
   434  0000                     _SPBRGH1	set	4016
   435  0000                     _RCSTA1bits	set	4011
   436  0000                     _RCREG1	set	4014
   437  0000                     _PWM2CONbits	set	3941
   438  0000                     _ECCP2ASbits	set	3940
   439  0000                     _PSTR2CONbits	set	3939
   440  0000                     _PORTAbits	set	3968
   441  0000                     _CCPR2L	set	3943
   442  0000                     _CCP2CONbits	set	3942
   443  0000                     _PIE1bits	set	3997
   444  0000                     _IPR1bits	set	3999
   445  0000                     _PIR1bits	set	3998
   446  0000                     _PR2	set	4027
   447  0000                     _T2CONbits	set	4026
   448  0000                     _EECON2	set	4007
   449  0000                     _EECON1bits	set	4006
   450  0000                     _EEDATA	set	4008
   451  0000                     _EEADR	set	4009
   452  0000                     _LATBbits	set	3978
   453  0000                     _LATCbits	set	3979
   454  0000                     _TRISAbits	set	3986
   455  0000                     _TRISCbits	set	3988
   456  0000                     _TXREG1	set	4013
   457  0000                     _TXSTA1bits	set	4012
   458  0000                     _TRISBbits	set	3987
   459  0000                     _PORTBbits	set	3969
   460  0000                     _INTCONbits	set	4082
   461  0000                     _RCONbits	set	4048
   462  0000                     _OSCTUNEbits	set	3995
   463  0000                     _OSCCON2bits	set	4050
   464  0000                     _OSCCONbits	set	4051
   465  007D4B                     STR_21:
   466  007D4B  20                 	db	32
   467  007D4C  20                 	db	32
   468  007D4D  20                 	db	32
   469  007D4E  20                 	db	32
   470  007D4F  25                 	db	37
   471  007D50  63                 	db	99	;'c'
   472  007D51  25                 	db	37
   473  007D52  75                 	db	117	;'u'
   474  007D53  25                 	db	37
   475  007D54  63                 	db	99	;'c'
   476  007D55  25                 	db	37
   477  007D56  75                 	db	117	;'u'
   478  007D57  25                 	db	37
   479  007D58  63                 	db	99	;'c'
   480  007D59  25                 	db	37
   481  007D5A  75                 	db	117	;'u'
   482  007D5B  25                 	db	37
   483  007D5C  63                 	db	99	;'c'
   484  007D5D  25                 	db	37
   485  007D5E  75                 	db	117	;'u'
   486  007D5F  20                 	db	32
   487  007D60  20                 	db	32
   488  007D61  20                 	db	32
   489  007D62  20                 	db	32
   490  007D63  00                 	db	0
   491  007D64                     STR_9:
   492  007D64  20                 	db	32
   493  007D65  20                 	db	32
   494  007D66  20                 	db	32
   495  007D67  20                 	db	32
   496  007D68  44                 	db	68	;'D'
   497  007D69  65                 	db	101	;'e'
   498  007D6A  74                 	db	116	;'t'
   499  007D6B  65                 	db	101	;'e'
   500  007D6C  6E                 	db	110	;'n'
   501  007D6D  69                 	db	105	;'i'
   502  007D6E  64                 	db	100	;'d'
   503  007D6F  6F                 	db	111	;'o'
   504  007D70  20                 	db	32
   505  007D71  20                 	db	32
   506  007D72  20                 	db	32
   507  007D73  20                 	db	32
   508  007D74  20                 	db	32
   509  007D75  20                 	db	32
   510  007D76  20                 	db	32
   511  007D77  00                 	db	0
   512  007D78                     STR_15:
   513  007D78  20                 	db	32
   514  007D79  20                 	db	32
   515  007D7A  25                 	db	37
   516  007D7B  33                 	db	51	;'3'
   517  007D7C  2E                 	db	46
   518  007D7D  33                 	db	51	;'3'
   519  007D7E  66                 	db	102	;'f'
   520  007D7F  20                 	db	32
   521  007D80  6B                 	db	107	;'k'
   522  007D81  67                 	db	103	;'g'
   523  007D82  2F                 	db	47
   524  007D83  73                 	db	115	;'s'
   525  007D84  20                 	db	32
   526  007D85  20                 	db	32
   527  007D86  20                 	db	32
   528  007D87  20                 	db	32
   529  007D88  20                 	db	32
   530  007D89  20                 	db	32
   531  007D8A  00                 	db	0
   532  007D8B                     STR_31:
   533  007D8B  20                 	db	32
   534  007D8C  20                 	db	32
   535  007D8D  20                 	db	32
   536  007D8E  25                 	db	37
   537  007D8F  63                 	db	99	;'c'
   538  007D90  53                 	db	83	;'S'
   539  007D91  49                 	db	73	;'I'
   540  007D92  20                 	db	32
   541  007D93  20                 	db	32
   542  007D94  20                 	db	32
   543  007D95  20                 	db	32
   544  007D96  25                 	db	37
   545  007D97  63                 	db	99	;'c'
   546  007D98  4E                 	db	78	;'N'
   547  007D99  4F                 	db	79	;'O'
   548  007D9A  20                 	db	32
   549  007D9B  20                 	db	32
   550  007D9C  20                 	db	32
   551  007D9D  00                 	db	0
   552  007D9E                     STR_32:
   553  007D9E  50                 	db	80	;'P'
   554  007D9F  65                 	db	101	;'e'
   555  007DA0  73                 	db	115	;'s'
   556  007DA1  6F                 	db	111	;'o'
   557  007DA2  20                 	db	32
   558  007DA3  52                 	db	82	;'R'
   559  007DA4  65                 	db	101	;'e'
   560  007DA5  61                 	db	97	;'a'
   561  007DA6  6C                 	db	108	;'l'
   562  007DA7  3A                 	db	58	;':'
   563  007DA8  20                 	db	32
   564  007DA9  20                 	db	32
   565  007DAA  20                 	db	32
   566  007DAB  20                 	db	32
   567  007DAC  20                 	db	32
   568  007DAD  20                 	db	32
   569  007DAE  0A                 	db	10
   570  007DAF  00                 	db	0
   571  007DB0                     STR_34:
   572  007DB0  47                 	db	71	;'G'
   573  007DB1  75                 	db	117	;'u'
   574  007DB2  69                 	db	105	;'i'
   575  007DB3  6C                 	db	108	;'l'
   576  007DB4  6C                 	db	108	;'l'
   577  007DB5  6F                 	db	111	;'o'
   578  007DB6  74                 	db	116	;'t'
   579  007DB7  69                 	db	105	;'i'
   580  007DB8  6E                 	db	110	;'n'
   581  007DB9  61                 	db	97	;'a'
   582  007DBA  20                 	db	32
   583  007DBB  20                 	db	32
   584  007DBC  20                 	db	32
   585  007DBD  20                 	db	32
   586  007DBE  20                 	db	32
   587  007DBF  20                 	db	32
   588  007DC0  0A                 	db	10
   589  007DC1  00                 	db	0
   590  007DC2                     STR_20:
   591  007DC2  43                 	db	67	;'C'
   592  007DC3  6F                 	db	111	;'o'
   593  007DC4  6E                 	db	110	;'n'
   594  007DC5  74                 	db	116	;'t'
   595  007DC6  72                 	db	114	;'r'
   596  007DC7  61                 	db	97	;'a'
   597  007DC8  73                 	db	115	;'s'
   598  007DC9  65                 	db	101	;'e'
   599  007DCA  6E                 	db	110	;'n'
   600  007DCB  61                 	db	97	;'a'
   601  007DCC  3A                 	db	58	;':'
   602  007DCD  20                 	db	32
   603  007DCE  20                 	db	32
   604  007DCF  20                 	db	32
   605  007DD0  20                 	db	32
   606  007DD1  20                 	db	32
   607  007DD2  0A                 	db	10
   608  007DD3  00                 	db	0
   609  007DD4                     STR_38:
   610  007DD4  41                 	db	65	;'A'
   611  007DD5  75                 	db	117	;'u'
   612  007DD6  74                 	db	116	;'t'
   613  007DD7  6F                 	db	111	;'o'
   614  007DD8  63                 	db	99	;'c'
   615  007DD9  61                 	db	97	;'a'
   616  007DDA  6C                 	db	108	;'l'
   617  007DDB  69                 	db	105	;'i'
   618  007DDC  62                 	db	98	;'b'
   619  007DDD  20                 	db	32
   620  007DDE  63                 	db	99	;'c'
   621  007DDF  6F                 	db	111	;'o'
   622  007DE0  6E                 	db	110	;'n'
   623  007DE1  20                 	db	32
   624  007DE2  20                 	db	32
   625  007DE3  20                 	db	32
   626  007DE4  0A                 	db	10
   627  007DE5  00                 	db	0
   628  007DE6                     STR_36:
   629  007DE6  20                 	db	32
   630  007DE7  20                 	db	32
   631  007DE8  20                 	db	32
   632  007DE9  45                 	db	69	;'E'
   633  007DEA  6E                 	db	110	;'n'
   634  007DEB  74                 	db	116	;'t'
   635  007DEC  65                 	db	101	;'e'
   636  007DED  72                 	db	114	;'r'
   637  007DEE  20                 	db	32
   638  007DEF  70                 	db	112	;'p'
   639  007DF0  61                 	db	97	;'a'
   640  007DF1  72                 	db	114	;'r'
   641  007DF2  61                 	db	97	;'a'
   642  007DF3  3A                 	db	58	;':'
   643  007DF4  20                 	db	32
   644  007DF5  20                 	db	32
   645  007DF6  0A                 	db	10
   646  007DF7  00                 	db	0
   647  007DF8                     STR_14:
   648  007DF8  56                 	db	86	;'V'
   649  007DF9  65                 	db	101	;'e'
   650  007DFA  6C                 	db	108	;'l'
   651  007DFB  6F                 	db	111	;'o'
   652  007DFC  63                 	db	99	;'c'
   653  007DFD  69                 	db	105	;'i'
   654  007DFE  64                 	db	100	;'d'
   655  007DFF  61                 	db	97	;'a'
   656  007E00  64                 	db	100	;'d'
   657  007E01  20                 	db	32
   658  007E02  4D                 	db	77	;'M'
   659  007E03  61                 	db	97	;'a'
   660  007E04  73                 	db	115	;'s'
   661  007E05  61                 	db	97	;'a'
   662  007E06  3A                 	db	58	;':'
   663  007E07  20                 	db	32
   664  007E08  0A                 	db	10
   665  007E09  00                 	db	0
   666  007E0A                     STR_7:
   667  007E0A  45                 	db	69	;'E'
   668  007E0B  73                 	db	115	;'s'
   669  007E0C  74                 	db	116	;'t'
   670  007E0D  61                 	db	97	;'a'
   671  007E0E  64                 	db	100	;'d'
   672  007E0F  6F                 	db	111	;'o'
   673  007E10  20                 	db	32
   674  007E11  70                 	db	112	;'p'
   675  007E12  72                 	db	114	;'r'
   676  007E13  6F                 	db	111	;'o'
   677  007E14  63                 	db	99	;'c'
   678  007E15  65                 	db	101	;'e'
   679  007E16  73                 	db	115	;'s'
   680  007E17  6F                 	db	111	;'o'
   681  007E18  3A                 	db	58	;':'
   682  007E19  20                 	db	32
   683  007E1A  0A                 	db	10
   684  007E1B  00                 	db	0
   685  007E1C                     STR_30:
   686  007E1C  53                 	db	83	;'S'
   687  007E1D  74                 	db	116	;'t'
   688  007E1E  6F                 	db	111	;'o'
   689  007E1F  70                 	db	112	;'p'
   690  007E20  20                 	db	32
   691  007E21  41                 	db	65	;'A'
   692  007E22  75                 	db	117	;'u'
   693  007E23  74                 	db	116	;'t'
   694  007E24  6F                 	db	111	;'o'
   695  007E25  43                 	db	67	;'C'
   696  007E26  61                 	db	97	;'a'
   697  007E27  6C                 	db	108	;'l'
   698  007E28  69                 	db	105	;'i'
   699  007E29  62                 	db	98	;'b'
   700  007E2A  3F                 	db	63	;'?'
   701  007E2B  20                 	db	32
   702  007E2C  0A                 	db	10
   703  007E2D  00                 	db	0
   704  007E2E                     STR_29:
   705  007E2E  49                 	db	73	;'I'
   706  007E2F  6E                 	db	110	;'n'
   707  007E30  69                 	db	105	;'i'
   708  007E31  74                 	db	116	;'t'
   709  007E32  20                 	db	32
   710  007E33  41                 	db	65	;'A'
   711  007E34  75                 	db	117	;'u'
   712  007E35  74                 	db	116	;'t'
   713  007E36  6F                 	db	111	;'o'
   714  007E37  43                 	db	67	;'C'
   715  007E38  61                 	db	97	;'a'
   716  007E39  6C                 	db	108	;'l'
   717  007E3A  69                 	db	105	;'i'
   718  007E3B  62                 	db	98	;'b'
   719  007E3C  3F                 	db	63	;'?'
   720  007E3D  20                 	db	32
   721  007E3E  0A                 	db	10
   722  007E3F  00                 	db	0
   723  007E40                     STR_28:
   724  007E40  47                 	db	71	;'G'
   725  007E41  75                 	db	117	;'u'
   726  007E42  61                 	db	97	;'a'
   727  007E43  72                 	db	114	;'r'
   728  007E44  64                 	db	100	;'d'
   729  007E45  61                 	db	97	;'a'
   730  007E46  72                 	db	114	;'r'
   731  007E47  20                 	db	32
   732  007E48  43                 	db	67	;'C'
   733  007E49  61                 	db	97	;'a'
   734  007E4A  6D                 	db	109	;'m'
   735  007E4B  62                 	db	98	;'b'
   736  007E4C  69                 	db	105	;'i'
   737  007E4D  6F                 	db	111	;'o'
   738  007E4E  3F                 	db	63	;'?'
   739  007E4F  20                 	db	32
   740  007E50  0A                 	db	10
   741  007E51  00                 	db	0
   742  007E52                     STR_10:
   743  007E52  56                 	db	86	;'V'
   744  007E53  61                 	db	97	;'a'
   745  007E54  6C                 	db	108	;'l'
   746  007E55  6F                 	db	111	;'o'
   747  007E56  72                 	db	114	;'r'
   748  007E57  20                 	db	32
   749  007E58  70                 	db	112	;'p'
   750  007E59  6F                 	db	111	;'o'
   751  007E5A  72                 	db	114	;'r'
   752  007E5B  20                 	db	32
   753  007E5C  43                 	db	67	;'C'
   754  007E5D  6F                 	db	111	;'o'
   755  007E5E  72                 	db	114	;'r'
   756  007E5F  74                 	db	116	;'t'
   757  007E60  65                 	db	101	;'e'
   758  007E61  3A                 	db	58	;':'
   759  007E62  0A                 	db	10
   760  007E63  00                 	db	0
   761  007E64                     STR_23:
   762  007E64  4D                 	db	77	;'M'
   763  007E65  6F                 	db	111	;'o'
   764  007E66  64                 	db	100	;'d'
   765  007E67  6F                 	db	111	;'o'
   766  007E68  20                 	db	32
   767  007E69  43                 	db	67	;'C'
   768  007E6A  6F                 	db	111	;'o'
   769  007E6B  6E                 	db	110	;'n'
   770  007E6C  66                 	db	102	;'f'
   771  007E6D  69                 	db	105	;'i'
   772  007E6E  67                 	db	103	;'g'
   773  007E6F  75                 	db	117	;'u'
   774  007E70  72                 	db	114	;'r'
   775  007E71  61                 	db	97	;'a'
   776  007E72  72                 	db	114	;'r'
   777  007E73  3A                 	db	58	;':'
   778  007E74  0A                 	db	10
   779  007E75  00                 	db	0
   780  007E76                     STR_12:
   781  007E76  43                 	db	67	;'C'
   782  007E77  61                 	db	97	;'a'
   783  007E78  6E                 	db	110	;'n'
   784  007E79  74                 	db	116	;'t'
   785  007E7A  69                 	db	105	;'i'
   786  007E7B  64                 	db	100	;'d'
   787  007E7C  61                 	db	97	;'a'
   788  007E7D  64                 	db	100	;'d'
   789  007E7E  20                 	db	32
   790  007E7F  43                 	db	67	;'C'
   791  007E80  6F                 	db	111	;'o'
   792  007E81  72                 	db	114	;'r'
   793  007E82  74                 	db	116	;'t'
   794  007E83  65                 	db	101	;'e'
   795  007E84  73                 	db	115	;'s'
   796  007E85  3A                 	db	58	;':'
   797  007E86  0A                 	db	10
   798  007E87  00                 	db	0
   799  007E88                     STR_26:
   800  007E88  49                 	db	73	;'I'
   801  007E89  6E                 	db	110	;'n'
   802  007E8A  69                 	db	105	;'i'
   803  007E8B  63                 	db	99	;'c'
   804  007E8C  69                 	db	105	;'i'
   805  007E8D  61                 	db	97	;'a'
   806  007E8E  72                 	db	114	;'r'
   807  007E8F  20                 	db	32
   808  007E90  50                 	db	80	;'P'
   809  007E91  72                 	db	114	;'r'
   810  007E92  6F                 	db	111	;'o'
   811  007E93  63                 	db	99	;'c'
   812  007E94  65                 	db	101	;'e'
   813  007E95  73                 	db	115	;'s'
   814  007E96  6F                 	db	111	;'o'
   815  007E97  3F                 	db	63	;'?'
   816  007E98  0A                 	db	10
   817  007E99  00                 	db	0
   818  007E9A                     STR_27:
   819  007E9A  44                 	db	68	;'D'
   820  007E9B  65                 	db	101	;'e'
   821  007E9C  74                 	db	116	;'t'
   822  007E9D  65                 	db	101	;'e'
   823  007E9E  6E                 	db	110	;'n'
   824  007E9F  65                 	db	101	;'e'
   825  007EA0  72                 	db	114	;'r'
   826  007EA1  20                 	db	32
   827  007EA2  50                 	db	80	;'P'
   828  007EA3  72                 	db	114	;'r'
   829  007EA4  6F                 	db	111	;'o'
   830  007EA5  63                 	db	99	;'c'
   831  007EA6  65                 	db	101	;'e'
   832  007EA7  73                 	db	115	;'s'
   833  007EA8  6F                 	db	111	;'o'
   834  007EA9  3F                 	db	63	;'?'
   835  007EAA  0A                 	db	10
   836  007EAB  00                 	db	0
   837  007EAC                     STR_40:
   838  007EAC  41                 	db	65	;'A'
   839  007EAD  75                 	db	117	;'u'
   840  007EAE  74                 	db	116	;'t'
   841  007EAF  6F                 	db	111	;'o'
   842  007EB0  63                 	db	99	;'c'
   843  007EB1  61                 	db	97	;'a'
   844  007EB2  6C                 	db	108	;'l'
   845  007EB3  69                 	db	105	;'i'
   846  007EB4  62                 	db	98	;'b'
   847  007EB5  20                 	db	32
   848  007EB6  75                 	db	117	;'u'
   849  007EB7  73                 	db	115	;'s'
   850  007EB8  61                 	db	97	;'a'
   851  007EB9  6E                 	db	110	;'n'
   852  007EBA  64                 	db	100	;'d'
   853  007EBB  6F                 	db	111	;'o'
   854  007EBC  0A                 	db	10
   855  007EBD  00                 	db	0
   856  007EBE                     STR_13:
   857  007EBE  20                 	db	32
   858  007EBF  20                 	db	32
   859  007EC0  20                 	db	32
   860  007EC1  20                 	db	32
   861  007EC2  20                 	db	32
   862  007EC3  20                 	db	32
   863  007EC4  25                 	db	37
   864  007EC5  64                 	db	100	;'d'
   865  007EC6  20                 	db	32
   866  007EC7  20                 	db	32
   867  007EC8  20                 	db	32
   868  007EC9  20                 	db	32
   869  007ECA  20                 	db	32
   870  007ECB  20                 	db	32
   871  007ECC  20                 	db	32
   872  007ECD  20                 	db	32
   873  007ECE  20                 	db	32
   874  007ECF  00                 	db	0
   875  007ED0                     STR_8:
   876  007ED0  20                 	db	32
   877  007ED1  20                 	db	32
   878  007ED2  20                 	db	32
   879  007ED3  25                 	db	37
   880  007ED4  64                 	db	100	;'d'
   881  007ED5  20                 	db	32
   882  007ED6  2F                 	db	47
   883  007ED7  20                 	db	32
   884  007ED8  25                 	db	37
   885  007ED9  64                 	db	100	;'d'
   886  007EDA  20                 	db	32
   887  007EDB  20                 	db	32
   888  007EDC  20                 	db	32
   889  007EDD  20                 	db	32
   890  007EDE  20                 	db	32
   891  007EDF  20                 	db	32
   892  007EE0  20                 	db	32
   893  007EE1  00                 	db	0
   894  007EE2                     STR_11:
   895  007EE2  20                 	db	32
   896  007EE3  20                 	db	32
   897  007EE4  20                 	db	32
   898  007EE5  25                 	db	37
   899  007EE6  33                 	db	51	;'3'
   900  007EE7  2E                 	db	46
   901  007EE8  33                 	db	51	;'3'
   902  007EE9  66                 	db	102	;'f'
   903  007EEA  20                 	db	32
   904  007EEB  6B                 	db	107	;'k'
   905  007EEC  67                 	db	103	;'g'
   906  007EED  20                 	db	32
   907  007EEE  20                 	db	32
   908  007EEF  20                 	db	32
   909  007EF0  20                 	db	32
   910  007EF1  20                 	db	32
   911  007EF2  20                 	db	32
   912  007EF3  00                 	db	0
   913  007EF4                     STR_1:
   914  007EF4  20                 	db	32
   915  007EF5  25                 	db	37
   916  007EF6  75                 	db	117	;'u'
   917  007EF7  25                 	db	37
   918  007EF8  75                 	db	117	;'u'
   919  007EF9  25                 	db	37
   920  007EFA  75                 	db	117	;'u'
   921  007EFB  2E                 	db	46
   922  007EFC  25                 	db	37
   923  007EFD  75                 	db	117	;'u'
   924  007EFE  25                 	db	37
   925  007EFF  75                 	db	117	;'u'
   926  007F00  25                 	db	37
   927  007F01  63                 	db	99	;'c'
   928  007F02  25                 	db	37
   929  007F03  75                 	db	117	;'u'
   930  007F04  20                 	db	32
   931  007F05  00                 	db	0
   932  007F06                     STR_2:
   933  007F06  20                 	db	32
   934  007F07  25                 	db	37
   935  007F08  75                 	db	117	;'u'
   936  007F09  25                 	db	37
   937  007F0A  75                 	db	117	;'u'
   938  007F0B  25                 	db	37
   939  007F0C  75                 	db	117	;'u'
   940  007F0D  2E                 	db	46
   941  007F0E  25                 	db	37
   942  007F0F  75                 	db	117	;'u'
   943  007F10  25                 	db	37
   944  007F11  63                 	db	99	;'c'
   945  007F12  25                 	db	37
   946  007F13  75                 	db	117	;'u'
   947  007F14  25                 	db	37
   948  007F15  75                 	db	117	;'u'
   949  007F16  20                 	db	32
   950  007F17  00                 	db	0
   951  007F18                     STR_4:
   952  007F18  20                 	db	32
   953  007F19  25                 	db	37
   954  007F1A  75                 	db	117	;'u'
   955  007F1B  25                 	db	37
   956  007F1C  75                 	db	117	;'u'
   957  007F1D  25                 	db	37
   958  007F1E  63                 	db	99	;'c'
   959  007F1F  25                 	db	37
   960  007F20  75                 	db	117	;'u'
   961  007F21  2E                 	db	46
   962  007F22  25                 	db	37
   963  007F23  75                 	db	117	;'u'
   964  007F24  25                 	db	37
   965  007F25  75                 	db	117	;'u'
   966  007F26  25                 	db	37
   967  007F27  75                 	db	117	;'u'
   968  007F28  20                 	db	32
   969  007F29  00                 	db	0
   970  007F2A                     STR_5:
   971  007F2A  20                 	db	32
   972  007F2B  25                 	db	37
   973  007F2C  75                 	db	117	;'u'
   974  007F2D  25                 	db	37
   975  007F2E  63                 	db	99	;'c'
   976  007F2F  25                 	db	37
   977  007F30  75                 	db	117	;'u'
   978  007F31  25                 	db	37
   979  007F32  75                 	db	117	;'u'
   980  007F33  2E                 	db	46
   981  007F34  25                 	db	37
   982  007F35  75                 	db	117	;'u'
   983  007F36  25                 	db	37
   984  007F37  75                 	db	117	;'u'
   985  007F38  25                 	db	37
   986  007F39  75                 	db	117	;'u'
   987  007F3A  20                 	db	32
   988  007F3B  00                 	db	0
   989  007F3C                     STR_6:
   990  007F3C  20                 	db	32
   991  007F3D  25                 	db	37
   992  007F3E  63                 	db	99	;'c'
   993  007F3F  25                 	db	37
   994  007F40  75                 	db	117	;'u'
   995  007F41  25                 	db	37
   996  007F42  75                 	db	117	;'u'
   997  007F43  25                 	db	37
   998  007F44  75                 	db	117	;'u'
   999  007F45  2E                 	db	46
  1000  007F46  25                 	db	37
  1001  007F47  75                 	db	117	;'u'
  1002  007F48  25                 	db	37
  1003  007F49  75                 	db	117	;'u'
  1004  007F4A  25                 	db	37
  1005  007F4B  75                 	db	117	;'u'
  1006  007F4C  20                 	db	32
  1007  007F4D  00                 	db	0
  1008  007F4E                     STR_3:
  1009  007F4E  20                 	db	32
  1010  007F4F  25                 	db	37
  1011  007F50  75                 	db	117	;'u'
  1012  007F51  25                 	db	37
  1013  007F52  75                 	db	117	;'u'
  1014  007F53  25                 	db	37
  1015  007F54  75                 	db	117	;'u'
  1016  007F55  2E                 	db	46
  1017  007F56  25                 	db	37
  1018  007F57  63                 	db	99	;'c'
  1019  007F58  25                 	db	37
  1020  007F59  75                 	db	117	;'u'
  1021  007F5A  25                 	db	37
  1022  007F5B  75                 	db	117	;'u'
  1023  007F5C  25                 	db	37
  1024  007F5D  75                 	db	117	;'u'
  1025  007F5E  20                 	db	32
  1026  007F5F  00                 	db	0
  1027  007F60                     STR_41:
  1028  007F60  20                 	db	32
  1029  007F61  20                 	db	32
  1030  007F62  20                 	db	32
  1031  007F63  20                 	db	32
  1032  007F64  20                 	db	32
  1033  007F65  30                 	db	48	;'0'
  1034  007F66  2E                 	db	46
  1035  007F67  35                 	db	53	;'5'
  1036  007F68  20                 	db	32
  1037  007F69  6B                 	db	107	;'k'
  1038  007F6A  67                 	db	103	;'g'
  1039  007F6B  20                 	db	32
  1040  007F6C  20                 	db	32
  1041  007F6D  20                 	db	32
  1042  007F6E  20                 	db	32
  1043  007F6F  20                 	db	32
  1044  007F70  00                 	db	0
  1045  007F71                     STR_43:
  1046  007F71  20                 	db	32
  1047  007F72  20                 	db	32
  1048  007F73  20                 	db	32
  1049  007F74  20                 	db	32
  1050  007F75  30                 	db	48	;'0'
  1051  007F76  2E                 	db	46
  1052  007F77  32                 	db	50	;'2'
  1053  007F78  35                 	db	53	;'5'
  1054  007F79  20                 	db	32
  1055  007F7A  6B                 	db	107	;'k'
  1056  007F7B  67                 	db	103	;'g'
  1057  007F7C  20                 	db	32
  1058  007F7D  20                 	db	32
  1059  007F7E  20                 	db	32
  1060  007F7F  20                 	db	32
  1061  007F80  20                 	db	32
  1062  007F81  00                 	db	0
  1063  007F82                     STR_22:
  1064  007F82  20                 	db	32
  1065  007F83  20                 	db	32
  1066  007F84  20                 	db	32
  1067  007F85  20                 	db	32
  1068  007F86  20                 	db	32
  1069  007F87  45                 	db	69	;'E'
  1070  007F88  72                 	db	114	;'r'
  1071  007F89  72                 	db	114	;'r'
  1072  007F8A  6F                 	db	111	;'o'
  1073  007F8B  6E                 	db	110	;'n'
  1074  007F8C  65                 	db	101	;'e'
  1075  007F8D  61                 	db	97	;'a'
  1076  007F8E  20                 	db	32
  1077  007F8F  20                 	db	32
  1078  007F90  20                 	db	32
  1079  007F91  20                 	db	32
  1080  007F92  00                 	db	0
  1081  007F93                     STR_24:
  1082  007F93  20                 	db	32
  1083  007F94  20                 	db	32
  1084  007F95  20                 	db	32
  1085  007F96  20                 	db	32
  1086  007F97  49                 	db	73	;'I'
  1087  007F98  6E                 	db	110	;'n'
  1088  007F99  69                 	db	105	;'i'
  1089  007F9A  63                 	db	99	;'c'
  1090  007F9B  69                 	db	105	;'i'
  1091  007F9C  61                 	db	97	;'a'
  1092  007F9D  64                 	db	100	;'d'
  1093  007F9E  6F                 	db	111	;'o'
  1094  007F9F  20                 	db	32
  1095  007FA0  20                 	db	32
  1096  007FA1  20                 	db	32
  1097  007FA2  20                 	db	32
  1098  007FA3  00                 	db	0
  1099  007FA4                     STR_25:
  1100  007FA4  20                 	db	32
  1101  007FA5  20                 	db	32
  1102  007FA6  20                 	db	32
  1103  007FA7  46                 	db	70	;'F'
  1104  007FA8  69                 	db	105	;'i'
  1105  007FA9  6E                 	db	110	;'n'
  1106  007FAA  61                 	db	97	;'a'
  1107  007FAB  6C                 	db	108	;'l'
  1108  007FAC  69                 	db	105	;'i'
  1109  007FAD  7A                 	db	122	;'z'
  1110  007FAE  61                 	db	97	;'a'
  1111  007FAF  64                 	db	100	;'d'
  1112  007FB0  6F                 	db	111	;'o'
  1113  007FB1  20                 	db	32
  1114  007FB2  20                 	db	32
  1115  007FB3  20                 	db	32
  1116  007FB4  00                 	db	0
  1117  007FB5                     STR_35:
  1118  007FB5  20                 	db	32
  1119  007FB6  20                 	db	32
  1120  007FB7  20                 	db	32
  1121  007FB8  20                 	db	32
  1122  007FB9  20                 	db	32
  1123  007FBA  20                 	db	32
  1124  007FBB  54                 	db	84	;'T'
  1125  007FBC  72                 	db	114	;'r'
  1126  007FBD  61                 	db	97	;'a'
  1127  007FBE  6E                 	db	110	;'n'
  1128  007FBF  63                 	db	99	;'c'
  1129  007FC0  61                 	db	97	;'a'
  1130  007FC1  64                 	db	100	;'d'
  1131  007FC2  61                 	db	97	;'a'
  1132  007FC3  20                 	db	32
  1133  007FC4  20                 	db	32
  1134  007FC5  00                 	db	0
  1135  007FC6                     STR_39:
  1136  007FC6  43                 	db	67	;'C'
  1137  007FC7  6F                 	db	111	;'o'
  1138  007FC8  72                 	db	114	;'r'
  1139  007FC9  74                 	db	116	;'t'
  1140  007FCA  65                 	db	101	;'e'
  1141  007FCB  20                 	db	32
  1142  007FCC  72                 	db	114	;'r'
  1143  007FCD  65                 	db	101	;'e'
  1144  007FCE  66                 	db	102	;'f'
  1145  007FCF  65                 	db	101	;'e'
  1146  007FD0  72                 	db	114	;'r'
  1147  007FD1  65                 	db	101	;'e'
  1148  007FD2  6E                 	db	110	;'n'
  1149  007FD3  63                 	db	99	;'c'
  1150  007FD4  69                 	db	105	;'i'
  1151  007FD5  61                 	db	97	;'a'
  1152  007FD6  00                 	db	0
  1153  007FD7                     STR_37:
  1154  007FD7  45                 	db	69	;'E'
  1155  007FD8  6D                 	db	109	;'m'
  1156  007FD9  70                 	db	112	;'p'
  1157  007FDA  65                 	db	101	;'e'
  1158  007FDB  7A                 	db	122	;'z'
  1159  007FDC  61                 	db	97	;'a'
  1160  007FDD  72                 	db	114	;'r'
  1161  007FDE  20                 	db	32
  1162  007FDF  61                 	db	97	;'a'
  1163  007FE0  20                 	db	32
  1164  007FE1  63                 	db	99	;'c'
  1165  007FE2  6F                 	db	111	;'o'
  1166  007FE3  72                 	db	114	;'r'
  1167  007FE4  74                 	db	116	;'t'
  1168  007FE5  61                 	db	97	;'a'
  1169  007FE6  72                 	db	114	;'r'
  1170  007FE7  00                 	db	0
  1171  007FE8                     STR_19:
  1172  007FE8  20                 	db	32
  1173  007FE9  20                 	db	32
  1174  007FEA  20                 	db	32
  1175  007FEB  20                 	db	32
  1176  007FEC  20                 	db	32
  1177  007FED  20                 	db	32
  1178  007FEE  25                 	db	37
  1179  007FEF  64                 	db	100	;'d'
  1180  007FF0  20                 	db	32
  1181  007FF1  20                 	db	32
  1182  007FF2  20                 	db	32
  1183  007FF3  20                 	db	32
  1184  007FF4  20                 	db	32
  1185  007FF5  20                 	db	32
  1186  007FF6  20                 	db	32
  1187  007FF7  00                 	db	0
  1188  007FF8                     STR_17:
  1189  007FF8  6B                 	db	107	;'k'
  1190  007FF9  67                 	db	103	;'g'
  1191  007FFA  20                 	db	32
  1192  007FFB  20                 	db	32
  1193  007FFC  20                 	db	32
  1194  007FFD  20                 	db	32
  1195  007FFE  00                 	db	0
  1196  0000                     
  1197                           ; #config settings
  1198  007FFF  00                 	db	0	; dummy byte at the end
  1199  0000                     
  1200                           	psect	cinit
  1201  005FA8                     __pcinit:
  1202                           	opt stack 0
  1203  005FA8                     start_initialization:
  1204                           	opt stack 0
  1205  005FA8                     __initialization:
  1206                           	opt stack 0
  1207                           
  1208                           ; Initialize objects allocated to BANK1 (44 bytes)
  1209                           ; load TBLPTR registers with __pidataBANK1
  1210  005FA8  0E8C               	movlw	low __pidataBANK1
  1211  005FAA  6EF6               	movwf	tblptrl,c
  1212  005FAC  0E70               	movlw	high __pidataBANK1
  1213  005FAE  6EF7               	movwf	tblptrh,c
  1214  005FB0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1215  005FB2  6EF8               	movwf	tblptru,c
  1216  005FB4  EE01  F077         	lfsr	0,__pdataBANK1
  1217  005FB8  EE10 F02C          	lfsr	1,44
  1218  005FBC                     copy_data0:
  1219  005FBC  0009               	tblrd		*+
  1220  005FBE  CFF5 FFEE          	movff	tablat,postinc0
  1221  005FC2  50E5               	movf	postdec1,w,c
  1222  005FC4  50E1               	movf	fsr1l,w,c
  1223  005FC6  E1FA               	bnz	copy_data0
  1224                           
  1225                           ; Initialize objects allocated to BANK0 (15 bytes)
  1226                           ; load TBLPTR registers with __pidataBANK0
  1227  005FC8  0EEC               	movlw	low __pidataBANK0
  1228  005FCA  6EF6               	movwf	tblptrl,c
  1229  005FCC  0E72               	movlw	high __pidataBANK0
  1230  005FCE  6EF7               	movwf	tblptrh,c
  1231  005FD0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1232  005FD2  6EF8               	movwf	tblptru,c
  1233  005FD4  EE00  F0C9         	lfsr	0,__pdataBANK0
  1234  005FD8  EE10 F00F          	lfsr	1,15
  1235  005FDC                     copy_data1:
  1236  005FDC  0009               	tblrd		*+
  1237  005FDE  CFF5 FFEE          	movff	tablat,postinc0
  1238  005FE2  50E5               	movf	postdec1,w,c
  1239  005FE4  50E1               	movf	fsr1l,w,c
  1240  005FE6  E1FA               	bnz	copy_data1
  1241                           
  1242                           ; Initialize objects allocated to COMRAM (17 bytes)
  1243                           ; load TBLPTR registers with __pidataCOMRAM
  1244  005FE8  0E9A               	movlw	low __pidataCOMRAM
  1245  005FEA  6EF6               	movwf	tblptrl,c
  1246  005FEC  0E72               	movlw	high __pidataCOMRAM
  1247  005FEE  6EF7               	movwf	tblptrh,c
  1248  005FF0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1249  005FF2  6EF8               	movwf	tblptru,c
  1250  005FF4  EE00  F04D         	lfsr	0,__pdataCOMRAM
  1251  005FF8  EE10 F011          	lfsr	1,17
  1252  005FFC                     copy_data2:
  1253  005FFC  0009               	tblrd		*+
  1254  005FFE  CFF5 FFEE          	movff	tablat,postinc0
  1255  006002  50E5               	movf	postdec1,w,c
  1256  006004  50E1               	movf	fsr1l,w,c
  1257  006006  E1FA               	bnz	copy_data2
  1258                           
  1259                           ; Clear objects allocated to BANK1 (29 bytes)
  1260  006008  EE01  F0A3         	lfsr	0,__pbssBANK1
  1261  00600C  0E1D               	movlw	29
  1262  00600E                     clear_0:
  1263  00600E  6AEE               	clrf	postinc0,c
  1264  006010  06E8               	decf	wreg,f,c
  1265  006012  E1FD               	bnz	clear_0
  1266                           
  1267                           ; Clear objects allocated to BANK0 (36 bytes)
  1268  006014  EE00  F0A5         	lfsr	0,__pbssBANK0
  1269  006018  0E24               	movlw	36
  1270  00601A                     clear_1:
  1271  00601A  6AEE               	clrf	postinc0,c
  1272  00601C  06E8               	decf	wreg,f,c
  1273  00601E  E1FD               	bnz	clear_1
  1274                           
  1275                           ; Clear objects allocated to COMRAM (22 bytes)
  1276  006020  EE00  F037         	lfsr	0,__pbssCOMRAM
  1277  006024  0E16               	movlw	22
  1278  006026                     clear_2:
  1279  006026  6AEE               	clrf	postinc0,c
  1280  006028  06E8               	decf	wreg,f,c
  1281  00602A  E1FD               	bnz	clear_2
  1282  00602C                     end_of_initialization:
  1283                           	opt stack 0
  1284  00602C                     __end_of__initialization:
  1285                           	opt stack 0
  1286  00602C  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1287  00602E  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1288  006030  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1289  006032  6EF8               	movwf	tblptru,c
  1290  006034  0100               	movlb	0
  1291  006036  EF62  F036         	goto	_main	;jump to C main() function
  1292                           tblptru	equ	0xFF8
  1293                           tblptrh	equ	0xFF7
  1294                           tblptrl	equ	0xFF6
  1295                           tablat	equ	0xFF5
  1296                           postinc0	equ	0xFEE
  1297                           wreg	equ	0xFE8
  1298                           postdec1	equ	0xFE5
  1299                           fsr1l	equ	0xFE1
  1300                           
  1301                           	psect	bssCOMRAM
  1302  000037                     __pbssCOMRAM:
  1303                           	opt stack 0
  1304  000037                     _securTimer:
  1305                           	opt stack 0
  1306  000037                     	ds	4
  1307  00003B                     _processTimer:
  1308                           	opt stack 0
  1309  00003B                     	ds	4
  1310  00003F                     _questKMT:
  1311                           	opt stack 0
  1312  00003F                     	ds	3
  1313  000042                     _calFactor:
  1314                           	opt stack 0
  1315  000042                     	ds	3
  1316  000045                     _FC2securLock:
  1317                           	opt stack 0
  1318  000045                     	ds	1
  1319  000046                     _holdFC2cont:
  1320                           	opt stack 0
  1321  000046                     	ds	1
  1322  000047                     _FC1securLock:
  1323                           	opt stack 0
  1324  000047                     	ds	1
  1325  000048                     _holdFC1cont:
  1326                           	opt stack 0
  1327  000048                     	ds	1
  1328  000049                     _screen_calibVelRes:
  1329                           	opt stack 0
  1330  000049                     	ds	1
  1331  00004A                     _selKMT:
  1332                           	opt stack 0
  1333  00004A                     	ds	1
  1334  00004B                     _DOWNisLP:
  1335                           	opt stack 0
  1336  00004B                     	ds	1
  1337  00004C                     _UPisLP:
  1338                           	opt stack 0
  1339  00004C                     	ds	1
  1340                           tblptru	equ	0xFF8
  1341                           tblptrh	equ	0xFF7
  1342                           tblptrl	equ	0xFF6
  1343                           tablat	equ	0xFF5
  1344                           postinc0	equ	0xFEE
  1345                           wreg	equ	0xFE8
  1346                           postdec1	equ	0xFE5
  1347                           fsr1l	equ	0xFE1
  1348                           
  1349                           	psect	dataCOMRAM
  1350  00004D                     __pdataCOMRAM:
  1351                           	opt stack 0
  1352  00004D                     _timeDOWN:
  1353                           	opt stack 0
  1354  00004D                     	ds	4
  1355  000051                     _maxTimePerCut:
  1356                           	opt stack 0
  1357  000051                     	ds	4
  1358  000055                     _timsXcorte:
  1359                           	opt stack 0
  1360  000055                     	ds	3
  1361  000058                     _tempkgXcorte:
  1362                           	opt stack 0
  1363  000058                     	ds	3
  1364  00005B                     _pi:
  1365                           	opt stack 0
  1366  00005B                     	ds	3
  1367                           tblptru	equ	0xFF8
  1368                           tblptrh	equ	0xFF7
  1369                           tblptrl	equ	0xFF6
  1370                           tablat	equ	0xFF5
  1371                           postinc0	equ	0xFEE
  1372                           wreg	equ	0xFE8
  1373                           postdec1	equ	0xFE5
  1374                           fsr1l	equ	0xFE1
  1375                           
  1376                           	psect	bssBANK0
  1377  0000A5                     __pbssBANK0:
  1378                           	opt stack 0
  1379  0000A5                     _chanValChar:
  1380                           	opt stack 0
  1381  0000A5                     	ds	6
  1382  0000AB                     _contra:
  1383                           	opt stack 0
  1384  0000AB                     	ds	4
  1385  0000AF                     _fData:
  1386                           	opt stack 0
  1387  0000AF                     	ds	3
  1388  0000B2                     _processState:
  1389                           	opt stack 0
  1390  0000B2                     	ds	2
  1391  0000B4                     _i16Data:
  1392                           	opt stack 0
  1393  0000B4                     	ds	2
  1394  0000B6                     _lastSttFC2:
  1395                           	opt stack 0
  1396  0000B6                     	ds	1
  1397  0000B7                     _lastSttFC1:
  1398                           	opt stack 0
  1399  0000B7                     	ds	1
  1400  0000B8                     _t2Cont2:
  1401                           	opt stack 0
  1402  0000B8                     	ds	1
  1403  0000B9                     _t2Cont1:
  1404                           	opt stack 0
  1405  0000B9                     	ds	1
  1406  0000BA                     _tempLastScreen:
  1407                           	opt stack 0
  1408  0000BA                     	ds	1
  1409  0000BB                     _ie:
  1410                           	opt stack 0
  1411  0000BB                     	ds	1
  1412  0000BC                     _bladeIsDown:
  1413                           	opt stack 0
  1414  0000BC                     	ds	1
  1415  0000BD                     _bladeIsUP:
  1416                           	opt stack 0
  1417  0000BD                     	ds	1
  1418  0000BE                     _calibMode:
  1419                           	opt stack 0
  1420  0000BE                     	ds	1
  1421  0000BF                     _ready2Cut:
  1422                           	opt stack 0
  1423  0000BF                     	ds	1
  1424  0000C0                     _processStarted:
  1425                           	opt stack 0
  1426  0000C0                     	ds	1
  1427  0000C1                     _ENTERsecurLock:
  1428                           	opt stack 0
  1429  0000C1                     	ds	1
  1430  0000C2                     _RETROsecurLock:
  1431                           	opt stack 0
  1432  0000C2                     	ds	1
  1433  0000C3                     _DOWNsecurLock:
  1434                           	opt stack 0
  1435  0000C3                     	ds	1
  1436  0000C4                     _UPsecurLock:
  1437                           	opt stack 0
  1438  0000C4                     	ds	1
  1439  0000C5                     _RETROisLP:
  1440                           	opt stack 0
  1441  0000C5                     	ds	1
  1442  0000C6                     _holdENTERcont:
  1443                           	opt stack 0
  1444  0000C6                     	ds	1
  1445  0000C7                     _holdRETROcont:
  1446                           	opt stack 0
  1447  0000C7                     	ds	1
  1448  0000C8                     _holdDOWNcont:
  1449                           	opt stack 0
  1450  0000C8                     	ds	1
  1451                           tblptru	equ	0xFF8
  1452                           tblptrh	equ	0xFF7
  1453                           tblptrl	equ	0xFF6
  1454                           tablat	equ	0xFF5
  1455                           postinc0	equ	0xFEE
  1456                           wreg	equ	0xFE8
  1457                           postdec1	equ	0xFE5
  1458                           fsr1l	equ	0xFE1
  1459                           
  1460                           	psect	dataBANK0
  1461  0000C9                     __pdataBANK0:
  1462                           	opt stack 0
  1463  0000C9                     lcd_init@F6841:
  1464                           	opt stack 0
  1465  0000C9                     	ds	4
  1466  0000CD                     _temptiXcorte:
  1467                           	opt stack 0
  1468  0000CD                     	ds	3
  1469  0000D0                     _tempNumCortes:
  1470                           	opt stack 0
  1471  0000D0                     	ds	2
  1472  0000D2                     _numCortes:
  1473                           	opt stack 0
  1474  0000D2                     	ds	2
  1475  0000D4                     _lastSttENTER:
  1476                           	opt stack 0
  1477  0000D4                     	ds	1
  1478  0000D5                     _lastSttRETRO:
  1479                           	opt stack 0
  1480  0000D5                     	ds	1
  1481  0000D6                     _lastSttDOWN:
  1482                           	opt stack 0
  1483  0000D6                     	ds	1
  1484  0000D7                     _lastSttUP:
  1485                           	opt stack 0
  1486  0000D7                     	ds	1
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           postinc0	equ	0xFEE
  1492                           wreg	equ	0xFE8
  1493                           postdec1	equ	0xFE5
  1494                           fsr1l	equ	0xFE1
  1495                           
  1496                           	psect	bssBANK1
  1497  0001A3                     __pbssBANK1:
  1498                           	opt stack 0
  1499  0001A3                     _chanValdig:
  1500                           	opt stack 0
  1501  0001A3                     	ds	6
  1502  0001A9                     _passChar:
  1503                           	opt stack 0
  1504  0001A9                     	ds	4
  1505  0001AD                     _introducido:
  1506                           	opt stack 0
  1507  0001AD                     	ds	4
  1508  0001B1                     _chanValf:
  1509                           	opt stack 0
  1510  0001B1                     	ds	3
  1511  0001B4                     _questSN:
  1512                           	opt stack 0
  1513  0001B4                     	ds	2
  1514  0001B6                     _chanVals:
  1515                           	opt stack 0
  1516  0001B6                     	ds	2
  1517  0001B8                     _calibLevel:
  1518                           	opt stack 0
  1519  0001B8                     	ds	1
  1520  0001B9                     _fd:
  1521                           	opt stack 0
  1522  0001B9                     	ds	1
  1523  0001BA                     _selSN:
  1524                           	opt stack 0
  1525  0001BA                     	ds	1
  1526  0001BB                     _passSection:
  1527                           	opt stack 0
  1528  0001BB                     	ds	1
  1529  0001BC                     _menuSection:
  1530                           	opt stack 0
  1531  0001BC                     	ds	1
  1532  0001BD                     _actualScreen:
  1533                           	opt stack 0
  1534  0001BD                     	ds	1
  1535  0001BE                     _ENTERisLP:
  1536                           	opt stack 0
  1537  0001BE                     	ds	1
  1538  0001BF                     _holdUPcont:
  1539                           	opt stack 0
  1540  0001BF                     	ds	1
  1541                           tblptru	equ	0xFF8
  1542                           tblptrh	equ	0xFF7
  1543                           tblptrl	equ	0xFF6
  1544                           tablat	equ	0xFF5
  1545                           postinc0	equ	0xFEE
  1546                           wreg	equ	0xFE8
  1547                           postdec1	equ	0xFE5
  1548                           fsr1l	equ	0xFE1
  1549                           
  1550                           	psect	dataBANK1
  1551  000177                     __pdataBANK1:
  1552                           	opt stack 0
  1553  000177                     _exp10:
  1554                           	opt stack 0
  1555  000177                     	ds	24
  1556  00018F                     _velocidadMasa:
  1557                           	opt stack 0
  1558  00018F                     	ds	3
  1559  000192                     _tempVelocidadMasa3:
  1560                           	opt stack 0
  1561  000192                     	ds	3
  1562  000195                     _tiXcorte:
  1563                           	opt stack 0
  1564  000195                     	ds	3
  1565  000198                     _kgXcorte:
  1566                           	opt stack 0
  1567  000198                     	ds	3
  1568  00019B                     _flech:
  1569                           	opt stack 0
  1570  00019B                     	ds	1
  1571  00019C                     _chanValSection:
  1572                           	opt stack 0
  1573  00019C                     	ds	1
  1574  00019D                     _tempVelocidadMasa2:
  1575                           	opt stack 0
  1576  00019D                     	ds	3
  1577  0001A0                     _tempVelocidadMasa1:
  1578                           	opt stack 0
  1579  0001A0                     	ds	3
  1580                           tblptru	equ	0xFF8
  1581                           tblptrh	equ	0xFF7
  1582                           tblptrl	equ	0xFF6
  1583                           tablat	equ	0xFF5
  1584                           postinc0	equ	0xFEE
  1585                           wreg	equ	0xFE8
  1586                           postdec1	equ	0xFE5
  1587                           fsr1l	equ	0xFE1
  1588                           
  1589                           	psect	cstackBANK1
  1590  000100                     __pcstackBANK1:
  1591                           	opt stack 0
  1592  000100                     ??_isdigit:
  1593  000100                     ??_lcd_read_4bits:
  1594  000100                     ??_checkPass:
  1595  000100                     ??_chanValDigUP:
  1596  000100                     ??_chanValDigDOWN:
  1597  000100                     ?___awmod:
  1598                           	opt stack 0
  1599  000100                     ?___ftpack:
  1600                           	opt stack 0
  1601  000100                     ?___ftneg:
  1602                           	opt stack 0
  1603  000100                     ?__tdiv_to_l_:
  1604                           	opt stack 0
  1605  000100                     ?__div_to_l_:
  1606                           	opt stack 0
  1607  000100                     ?___lmul:
  1608                           	opt stack 0
  1609  000100                     ?___aldiv:
  1610                           	opt stack 0
  1611  000100                     ?___lldiv:
  1612                           	opt stack 0
  1613  000100                     _lcd_send_4bits$1496:
  1614                           	opt stack 0
  1615  000100                     putchUART@val:
  1616                           	opt stack 0
  1617  000100                     writeEEPROM@data:
  1618                           	opt stack 0
  1619  000100                     readEEPROM@adr:
  1620                           	opt stack 0
  1621  000100                     setPWM2on@on:
  1622                           	opt stack 0
  1623  000100                     delay_ms@del:
  1624                           	opt stack 0
  1625  000100                     setPWM2duty@actuator:
  1626                           	opt stack 0
  1627  000100                     ___awmod@dividend:
  1628                           	opt stack 0
  1629  000100                     __div_to_l_@f1:
  1630                           	opt stack 0
  1631  000100                     ___ftpack@arg:
  1632                           	opt stack 0
  1633  000100                     __tdiv_to_l_@f1:
  1634                           	opt stack 0
  1635  000100                     ___ftge@ff1:
  1636                           	opt stack 0
  1637  000100                     ___ftneg@f1:
  1638                           	opt stack 0
  1639  000100                     ___lmul@multiplier:
  1640                           	opt stack 0
  1641  000100                     ___aldiv@dividend:
  1642                           	opt stack 0
  1643  000100                     ___lldiv@dividend:
  1644                           	opt stack 0
  1645                           
  1646                           ; 4 bytes @ 0x0
  1647  000100                     	ds	1
  1648  000101                     lcd_read_4bits@n:
  1649                           	opt stack 0
  1650  000101                     _lcd_send_4bits$1497:
  1651                           	opt stack 0
  1652  000101                     writeEEPROM@adr:
  1653                           	opt stack 0
  1654  000101                     _isdigit$2329:
  1655                           	opt stack 0
  1656                           
  1657                           ; 1 bytes @ 0x1
  1658  000101                     	ds	1
  1659  000102                     ??_delay_ms:
  1660  000102                     ??_setPWM2duty:
  1661  000102                     lcd_read_byte@low:
  1662                           	opt stack 0
  1663  000102                     _lcd_send_4bits$1498:
  1664                           	opt stack 0
  1665  000102                     isdigit@c:
  1666                           	opt stack 0
  1667  000102                     ___awmod@divisor:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0x2
  1671  000102                     	ds	1
  1672  000103                     lcd_read_byte@high:
  1673                           	opt stack 0
  1674  000103                     _lcd_send_4bits$1499:
  1675                           	opt stack 0
  1676  000103                     ___ftpack@exp:
  1677                           	opt stack 0
  1678  000103                     delay_ms@i:
  1679                           	opt stack 0
  1680  000103                     __div_to_l_@f2:
  1681                           	opt stack 0
  1682  000103                     __tdiv_to_l_@f2:
  1683                           	opt stack 0
  1684  000103                     ___ftge@ff2:
  1685                           	opt stack 0
  1686                           
  1687                           ; 3 bytes @ 0x3
  1688  000103                     	ds	1
  1689  000104                     lcd_send_4bits@n:
  1690                           	opt stack 0
  1691  000104                     checkPass@passOK:
  1692                           	opt stack 0
  1693  000104                     ___awmod@counter:
  1694                           	opt stack 0
  1695  000104                     ___ftpack@sign:
  1696                           	opt stack 0
  1697  000104                     setPWM2duty@act:
  1698                           	opt stack 0
  1699  000104                     ___lmul@multiplicand:
  1700                           	opt stack 0
  1701  000104                     ___aldiv@divisor:
  1702                           	opt stack 0
  1703  000104                     ___lldiv@divisor:
  1704                           	opt stack 0
  1705                           
  1706                           ; 4 bytes @ 0x4
  1707  000104                     	ds	1
  1708  000105                     ??___ftpack:
  1709  000105                     lcd_send_byte@n:
  1710                           	opt stack 0
  1711  000105                     ___awmod@sign:
  1712                           	opt stack 0
  1713  000105                     checkPass@i:
  1714                           	opt stack 0
  1715                           
  1716                           ; 2 bytes @ 0x5
  1717  000105                     	ds	1
  1718  000106                     ??__tdiv_to_l_:
  1719  000106                     ??_lcd_send_byte:
  1720  000106                     ??___ftge:
  1721  000106                     ?___awdiv:
  1722                           	opt stack 0
  1723  000106                     initProtocoll@init:
  1724                           	opt stack 0
  1725  000106                     ___awdiv@dividend:
  1726                           	opt stack 0
  1727  000106                     __div_to_l_@quot:
  1728                           	opt stack 0
  1729                           
  1730                           ; 4 bytes @ 0x6
  1731  000106                     	ds	1
  1732  000107                     lcd_send_byte@address:
  1733                           	opt stack 0
  1734                           
  1735                           ; 1 bytes @ 0x7
  1736  000107                     	ds	1
  1737  000108                     ??_lcd_init:
  1738  000108                     ?___altoft:
  1739                           	opt stack 0
  1740  000108                     ?___lltoft:
  1741                           	opt stack 0
  1742  000108                     lcd_gotoxy@fila:
  1743                           	opt stack 0
  1744  000108                     ___aldiv@counter:
  1745                           	opt stack 0
  1746  000108                     ___awdiv@divisor:
  1747                           	opt stack 0
  1748  000108                     ___lmul@product:
  1749                           	opt stack 0
  1750  000108                     ___altoft@c:
  1751                           	opt stack 0
  1752  000108                     ___lldiv@quotient:
  1753                           	opt stack 0
  1754  000108                     ___lltoft@c:
  1755                           	opt stack 0
  1756                           
  1757                           ; 4 bytes @ 0x8
  1758  000108                     	ds	1
  1759  000109                     lcd_gotoxy@pos:
  1760                           	opt stack 0
  1761  000109                     ___aldiv@sign:
  1762                           	opt stack 0
  1763  000109                     lcd_init@LCD_INIT_STRING:
  1764                           	opt stack 0
  1765  000109                     __tdiv_to_l_@quot:
  1766                           	opt stack 0
  1767                           
  1768                           ; 4 bytes @ 0x9
  1769  000109                     	ds	1
  1770  00010A                     lcd_gotoxy@address:
  1771                           	opt stack 0
  1772  00010A                     ___awdiv@counter:
  1773                           	opt stack 0
  1774  00010A                     __div_to_l_@cntr:
  1775                           	opt stack 0
  1776  00010A                     ___aldiv@quotient:
  1777                           	opt stack 0
  1778                           
  1779                           ; 4 bytes @ 0xA
  1780  00010A                     	ds	1
  1781  00010B                     ??_lcd_putc:
  1782  00010B                     ___awdiv@sign:
  1783                           	opt stack 0
  1784  00010B                     __div_to_l_@exp1:
  1785                           	opt stack 0
  1786                           
  1787                           ; 1 bytes @ 0xB
  1788  00010B                     	ds	1
  1789  00010C                     ??___altoft:
  1790  00010C                     ??___lltoft:
  1791  00010C                     lcd_putc@cha:
  1792                           	opt stack 0
  1793  00010C                     ___lldiv@counter:
  1794                           	opt stack 0
  1795  00010C                     ___awdiv@quotient:
  1796                           	opt stack 0
  1797                           
  1798                           ; 2 bytes @ 0xC
  1799  00010C                     	ds	1
  1800  00010D                     ?___llmod:
  1801                           	opt stack 0
  1802  00010D                     lcd_init@i:
  1803                           	opt stack 0
  1804  00010D                     putch@val:
  1805                           	opt stack 0
  1806  00010D                     __tdiv_to_l_@cntr:
  1807                           	opt stack 0
  1808  00010D                     ___llmod@dividend:
  1809                           	opt stack 0
  1810                           
  1811                           ; 4 bytes @ 0xD
  1812  00010D                     	ds	1
  1813  00010E                     ?___wmul:
  1814                           	opt stack 0
  1815  00010E                     __tdiv_to_l_@exp1:
  1816                           	opt stack 0
  1817  00010E                     ___wmul@multiplier:
  1818                           	opt stack 0
  1819                           
  1820                           ; 2 bytes @ 0xE
  1821  00010E                     	ds	2
  1822  000110                     ___altoft@exp:
  1823                           	opt stack 0
  1824  000110                     ___lltoft@exp:
  1825                           	opt stack 0
  1826  000110                     ___wmul@multiplicand:
  1827                           	opt stack 0
  1828                           
  1829                           ; 2 bytes @ 0x10
  1830  000110                     	ds	1
  1831  000111                     ___altoft@sign:
  1832                           	opt stack 0
  1833  000111                     ___llmod@divisor:
  1834                           	opt stack 0
  1835                           
  1836                           ; 4 bytes @ 0x11
  1837  000111                     	ds	1
  1838  000112                     ?___ftdiv:
  1839                           	opt stack 0
  1840  000112                     ___wmul@product:
  1841                           	opt stack 0
  1842  000112                     ___ftdiv@f1:
  1843                           	opt stack 0
  1844                           
  1845                           ; 3 bytes @ 0x12
  1846  000112                     	ds	2
  1847  000114                     ?___ftmul:
  1848                           	opt stack 0
  1849  000114                     ___ftmul@f1:
  1850                           	opt stack 0
  1851                           
  1852                           ; 3 bytes @ 0x14
  1853  000114                     	ds	1
  1854  000115                     ___llmod@counter:
  1855                           	opt stack 0
  1856  000115                     ___ftdiv@f2:
  1857                           	opt stack 0
  1858                           
  1859                           ; 3 bytes @ 0x15
  1860  000115                     	ds	2
  1861  000117                     ___ftmul@f2:
  1862                           	opt stack 0
  1863                           
  1864                           ; 3 bytes @ 0x17
  1865  000117                     	ds	1
  1866  000118                     ??___ftdiv:
  1867                           
  1868                           ; 1 bytes @ 0x18
  1869  000118                     	ds	2
  1870  00011A                     ??___ftmul:
  1871                           
  1872                           ; 1 bytes @ 0x1A
  1873  00011A                     	ds	1
  1874  00011B                     ___ftdiv@cntr:
  1875                           	opt stack 0
  1876                           
  1877                           ; 1 bytes @ 0x1B
  1878  00011B                     	ds	1
  1879  00011C                     ___ftdiv@f3:
  1880                           	opt stack 0
  1881                           
  1882                           ; 3 bytes @ 0x1C
  1883  00011C                     	ds	1
  1884  00011D                     ___ftmul@exp:
  1885                           	opt stack 0
  1886                           
  1887                           ; 1 bytes @ 0x1D
  1888  00011D                     	ds	1
  1889  00011E                     ___ftmul@f3_as_product:
  1890                           	opt stack 0
  1891                           
  1892                           ; 3 bytes @ 0x1E
  1893  00011E                     	ds	1
  1894  00011F                     ___ftdiv@exp:
  1895                           	opt stack 0
  1896                           
  1897                           ; 1 bytes @ 0x1F
  1898  00011F                     	ds	1
  1899  000120                     ___ftdiv@sign:
  1900                           	opt stack 0
  1901                           
  1902                           ; 1 bytes @ 0x20
  1903  000120                     	ds	1
  1904  000121                     ??_integrator:
  1905  000121                     ___ftmul@cntr:
  1906                           	opt stack 0
  1907                           
  1908                           ; 1 bytes @ 0x21
  1909  000121                     	ds	1
  1910  000122                     ___ftmul@sign:
  1911                           	opt stack 0
  1912                           
  1913                           ; 1 bytes @ 0x22
  1914  000122                     	ds	1
  1915  000123                     ?_fround:
  1916                           	opt stack 0
  1917  000123                     ?_scale:
  1918                           	opt stack 0
  1919  000123                     confirmEdition@yes:
  1920                           	opt stack 0
  1921  000123                     calcSysVars@temp:
  1922                           	opt stack 0
  1923  000123                     integrator@acum:
  1924                           	opt stack 0
  1925                           
  1926                           ; 4 bytes @ 0x23
  1927  000123                     	ds	3
  1928  000126                     _fround$2845:
  1929                           	opt stack 0
  1930  000126                     _scale$2846:
  1931                           	opt stack 0
  1932                           
  1933                           ; 3 bytes @ 0x26
  1934  000126                     	ds	1
  1935  000127                     integrator@temp:
  1936                           	opt stack 0
  1937                           
  1938                           ; 4 bytes @ 0x27
  1939  000127                     	ds	2
  1940  000129                     scale@scl:
  1941                           	opt stack 0
  1942  000129                     _fround$2844:
  1943                           	opt stack 0
  1944                           
  1945                           ; 3 bytes @ 0x29
  1946  000129                     	ds	1
  1947  00012A                     ?___fttol:
  1948                           	opt stack 0
  1949  00012A                     ___fttol@f1:
  1950                           	opt stack 0
  1951                           
  1952                           ; 3 bytes @ 0x2A
  1953  00012A                     	ds	1
  1954  00012B                     integrator@i:
  1955                           	opt stack 0
  1956                           
  1957                           ; 2 bytes @ 0x2B
  1958  00012B                     	ds	1
  1959  00012C                     fround@prec:
  1960                           	opt stack 0
  1961                           
  1962                           ; 1 bytes @ 0x2C
  1963  00012C                     	ds	1
  1964  00012D                     ?___ftadd:
  1965                           	opt stack 0
  1966  00012D                     ___ftadd@f1:
  1967                           	opt stack 0
  1968                           
  1969                           ; 3 bytes @ 0x2D
  1970  00012D                     	ds	1
  1971  00012E                     ??___fttol:
  1972                           
  1973                           ; 1 bytes @ 0x2E
  1974  00012E                     	ds	2
  1975  000130                     ___ftadd@f2:
  1976                           	opt stack 0
  1977                           
  1978                           ; 3 bytes @ 0x30
  1979  000130                     	ds	3
  1980  000133                     ??___ftadd:
  1981  000133                     ___fttol@sign1:
  1982                           	opt stack 0
  1983                           
  1984                           ; 1 bytes @ 0x33
  1985  000133                     	ds	1
  1986  000134                     ___fttol@lval:
  1987                           	opt stack 0
  1988                           
  1989                           ; 4 bytes @ 0x34
  1990  000134                     	ds	2
  1991  000136                     ___ftadd@sign:
  1992                           	opt stack 0
  1993                           
  1994                           ; 1 bytes @ 0x36
  1995  000136                     	ds	1
  1996  000137                     ___ftadd@exp2:
  1997                           	opt stack 0
  1998                           
  1999                           ; 1 bytes @ 0x37
  2000  000137                     	ds	1
  2001  000138                     ___ftadd@exp1:
  2002                           	opt stack 0
  2003  000138                     ___fttol@exp1:
  2004                           	opt stack 0
  2005                           
  2006                           ; 1 bytes @ 0x38
  2007  000138                     	ds	1
  2008  000139                     ??_desintegrator:
  2009  000139                     ?___ftsub:
  2010                           	opt stack 0
  2011  000139                     ___ftsub@f1:
  2012                           	opt stack 0
  2013                           
  2014                           ; 3 bytes @ 0x39
  2015  000139                     	ds	2
  2016  00013B                     desintegrator@temp:
  2017                           	opt stack 0
  2018                           
  2019                           ; 3 bytes @ 0x3B
  2020  00013B                     	ds	1
  2021  00013C                     ___ftsub@f2:
  2022                           	opt stack 0
  2023                           
  2024                           ; 3 bytes @ 0x3C
  2025  00013C                     	ds	2
  2026  00013E                     desintegrator@tempL:
  2027                           	opt stack 0
  2028                           
  2029                           ; 4 bytes @ 0x3E
  2030  00013E                     	ds	1
  2031  00013F                     ?_printf:
  2032                           	opt stack 0
  2033  00013F                     printf@f:
  2034                           	opt stack 0
  2035                           
  2036                           ; 2 bytes @ 0x3F
  2037  00013F                     	ds	3
  2038  000142                     desintegrator@temp3:
  2039                           	opt stack 0
  2040                           
  2041                           ; 4 bytes @ 0x42
  2042  000142                     	ds	4
  2043  000146                     desintegrator@temp2:
  2044                           	opt stack 0
  2045                           
  2046                           ; 4 bytes @ 0x46
  2047  000146                     	ds	4
  2048  00014A                     desintegrator@i:
  2049                           	opt stack 0
  2050                           
  2051                           ; 2 bytes @ 0x4A
  2052  00014A                     	ds	2
  2053  00014C                     longPressENTER@temp:
  2054                           	opt stack 0
  2055                           
  2056                           ; 3 bytes @ 0x4C
  2057  00014C                     	ds	3
  2058  00014F                     _longPressENTER$2843:
  2059                           	opt stack 0
  2060                           
  2061                           ; 3 bytes @ 0x4F
  2062  00014F                     	ds	2
  2063  000151                     ??_printf:
  2064                           
  2065                           ; 1 bytes @ 0x51
  2066  000151                     	ds	1
  2067  000152                     
  2068                           ; 1 bytes @ 0x52
  2069  000152                     	ds	5
  2070  000157                     _printf$2847:
  2071                           	opt stack 0
  2072                           
  2073                           ; 3 bytes @ 0x57
  2074  000157                     	ds	3
  2075  00015A                     printf@cp:
  2076                           	opt stack 0
  2077                           
  2078                           ; 2 bytes @ 0x5A
  2079  00015A                     	ds	2
  2080  00015C                     printf@len:
  2081                           	opt stack 0
  2082                           
  2083                           ; 2 bytes @ 0x5C
  2084  00015C                     	ds	2
  2085  00015E                     printf@ap:
  2086                           	opt stack 0
  2087                           
  2088                           ; 2 bytes @ 0x5E
  2089  00015E                     	ds	2
  2090  000160                     printf@flag:
  2091                           	opt stack 0
  2092                           
  2093                           ; 2 bytes @ 0x60
  2094  000160                     	ds	2
  2095  000162                     printf@tmpval:
  2096                           	opt stack 0
  2097                           
  2098                           ; 4 bytes @ 0x62
  2099  000162                     	ds	4
  2100  000166                     printf@val:
  2101                           	opt stack 0
  2102                           
  2103                           ; 4 bytes @ 0x66
  2104  000166                     	ds	4
  2105  00016A                     printf@exp:
  2106                           	opt stack 0
  2107                           
  2108                           ; 2 bytes @ 0x6A
  2109  00016A                     	ds	2
  2110  00016C                     printf@width:
  2111                           	opt stack 0
  2112                           
  2113                           ; 2 bytes @ 0x6C
  2114  00016C                     	ds	2
  2115  00016E                     printf@fval:
  2116                           	opt stack 0
  2117                           
  2118                           ; 3 bytes @ 0x6E
  2119  00016E                     	ds	3
  2120  000171                     printf@prec:
  2121                           	opt stack 0
  2122                           
  2123                           ; 2 bytes @ 0x71
  2124  000171                     	ds	2
  2125  000173                     printf@c:
  2126                           	opt stack 0
  2127                           
  2128                           ; 1 bytes @ 0x73
  2129  000173                     	ds	1
  2130  000174                     drawMenu@adv:
  2131                           	opt stack 0
  2132  000174                     drawAdvON@on:
  2133                           	opt stack 0
  2134  000174                     drawPassWord@i:
  2135                           	opt stack 0
  2136  000174                     drawSNquest@i:
  2137                           	opt stack 0
  2138                           
  2139                           ; 2 bytes @ 0x74
  2140  000174                     	ds	2
  2141  000176                     drawSNquest@tq:
  2142                           	opt stack 0
  2143                           
  2144                           ; 1 bytes @ 0x76
  2145  000176                     	ds	1
  2146  000177                     tblptru	equ	0xFF8
  2147                           tblptrh	equ	0xFF7
  2148                           tblptrl	equ	0xFF6
  2149                           tablat	equ	0xFF5
  2150                           postinc0	equ	0xFEE
  2151                           wreg	equ	0xFE8
  2152                           postdec1	equ	0xFE5
  2153                           fsr1l	equ	0xFE1
  2154                           
  2155                           ; 1 bytes @ 0x77
  2156                           
  2157                           	psect	cstackBANK0
  2158  000060                     __pcstackBANK0:
  2159                           	opt stack 0
  2160  000060                     ??i1_checkPass:
  2161  000060                     ??i1_chanValDigUP:
  2162  000060                     ??i1_chanValDigDOWN:
  2163  000060                     ?i1___ftpack:
  2164                           	opt stack 0
  2165  000060                     ?i1___lmul:
  2166                           	opt stack 0
  2167  000060                     ?i1___aldiv:
  2168                           	opt stack 0
  2169  000060                     ?i1___fttol:
  2170                           	opt stack 0
  2171  000060                     i1putchUART@val:
  2172                           	opt stack 0
  2173  000060                     i1writeEEPROM@data:
  2174                           	opt stack 0
  2175  000060                     i1readEEPROM@adr:
  2176                           	opt stack 0
  2177  000060                     i1setPWM2duty@actuator:
  2178                           	opt stack 0
  2179  000060                     i1___ftpack@arg:
  2180                           	opt stack 0
  2181  000060                     i1___fttol@f1:
  2182                           	opt stack 0
  2183  000060                     i1___lmul@multiplier:
  2184                           	opt stack 0
  2185  000060                     i1___aldiv@dividend:
  2186                           	opt stack 0
  2187                           
  2188                           ; 4 bytes @ 0x0
  2189  000060                     	ds	1
  2190  000061                     i1writeEEPROM@adr:
  2191                           	opt stack 0
  2192                           
  2193                           ; 1 bytes @ 0x1
  2194  000061                     	ds	1
  2195  000062                     ??i1_setPWM2duty:
  2196                           
  2197                           ; 1 bytes @ 0x2
  2198  000062                     	ds	1
  2199  000063                     i1___ftpack@exp:
  2200                           	opt stack 0
  2201                           
  2202                           ; 1 bytes @ 0x3
  2203  000063                     	ds	1
  2204  000064                     ??i1___fttol:
  2205  000064                     i1checkPass@passOK:
  2206                           	opt stack 0
  2207  000064                     i1___ftpack@sign:
  2208                           	opt stack 0
  2209  000064                     i1setPWM2duty@act:
  2210                           	opt stack 0
  2211  000064                     i1___lmul@multiplicand:
  2212                           	opt stack 0
  2213  000064                     i1___aldiv@divisor:
  2214                           	opt stack 0
  2215                           
  2216                           ; 4 bytes @ 0x4
  2217  000064                     	ds	1
  2218  000065                     ??i1___ftpack:
  2219  000065                     i1checkPass@i:
  2220                           	opt stack 0
  2221                           
  2222                           ; 2 bytes @ 0x5
  2223  000065                     	ds	1
  2224  000066                     i1initProtocoll@init:
  2225                           	opt stack 0
  2226                           
  2227                           ; 1 bytes @ 0x6
  2228  000066                     	ds	1
  2229  000067                     ??_T2int:
  2230  000067                     
  2231                           ; 1 bytes @ 0x7
  2232  000067                     	ds	1
  2233  000068                     ?i1___altoft:
  2234                           	opt stack 0
  2235  000068                     ?i1___ftadd:
  2236                           	opt stack 0
  2237  000068                     ?i1___ftmul:
  2238                           	opt stack 0
  2239  000068                     i1___aldiv@counter:
  2240                           	opt stack 0
  2241  000068                     i1___ftadd@f1:
  2242                           	opt stack 0
  2243  000068                     i1___ftmul@f1:
  2244                           	opt stack 0
  2245  000068                     i1___lmul@product:
  2246                           	opt stack 0
  2247  000068                     i1___altoft@c:
  2248                           	opt stack 0
  2249                           
  2250                           ; 4 bytes @ 0x8
  2251  000068                     	ds	1
  2252  000069                     i1___aldiv@sign:
  2253                           	opt stack 0
  2254  000069                     i1___fttol@sign1:
  2255                           	opt stack 0
  2256                           
  2257                           ; 1 bytes @ 0x9
  2258  000069                     	ds	1
  2259  00006A                     i1___aldiv@quotient:
  2260                           	opt stack 0
  2261  00006A                     i1___fttol@lval:
  2262                           	opt stack 0
  2263                           
  2264                           ; 4 bytes @ 0xA
  2265  00006A                     	ds	1
  2266  00006B                     i1___ftadd@f2:
  2267                           	opt stack 0
  2268  00006B                     i1___ftmul@f2:
  2269                           	opt stack 0
  2270                           
  2271                           ; 3 bytes @ 0xB
  2272  00006B                     	ds	1
  2273  00006C                     ??i1___altoft:
  2274                           
  2275                           ; 1 bytes @ 0xC
  2276  00006C                     	ds	2
  2277  00006E                     ??i1___ftadd:
  2278  00006E                     ??i1___ftmul:
  2279  00006E                     i1___fttol@exp1:
  2280                           	opt stack 0
  2281                           
  2282                           ; 1 bytes @ 0xE
  2283  00006E                     	ds	2
  2284  000070                     i1___altoft@exp:
  2285                           	opt stack 0
  2286                           
  2287                           ; 1 bytes @ 0x10
  2288  000070                     	ds	1
  2289  000071                     i1___altoft@sign:
  2290                           	opt stack 0
  2291  000071                     i1___ftadd@sign:
  2292                           	opt stack 0
  2293  000071                     i1___ftmul@exp:
  2294                           	opt stack 0
  2295                           
  2296                           ; 1 bytes @ 0x11
  2297  000071                     	ds	1
  2298  000072                     ?i1___ftdiv:
  2299                           	opt stack 0
  2300  000072                     i1___ftadd@exp2:
  2301                           	opt stack 0
  2302  000072                     i1___ftdiv@f1:
  2303                           	opt stack 0
  2304  000072                     i1___ftmul@f3_as_product:
  2305                           	opt stack 0
  2306                           
  2307                           ; 3 bytes @ 0x12
  2308  000072                     	ds	1
  2309  000073                     i1___ftadd@exp1:
  2310                           	opt stack 0
  2311                           
  2312                           ; 1 bytes @ 0x13
  2313  000073                     	ds	2
  2314  000075                     i1___ftmul@cntr:
  2315                           	opt stack 0
  2316  000075                     i1___ftdiv@f2:
  2317                           	opt stack 0
  2318                           
  2319                           ; 3 bytes @ 0x15
  2320  000075                     	ds	1
  2321  000076                     i1___ftmul@sign:
  2322                           	opt stack 0
  2323                           
  2324                           ; 1 bytes @ 0x16
  2325  000076                     	ds	1
  2326  000077                     ??i1_desintegrator:
  2327  000077                     i1calcSysVars@temp:
  2328                           	opt stack 0
  2329                           
  2330                           ; 3 bytes @ 0x17
  2331  000077                     	ds	1
  2332  000078                     ??i1___ftdiv:
  2333                           
  2334                           ; 1 bytes @ 0x18
  2335  000078                     	ds	1
  2336  000079                     i1desintegrator@temp:
  2337                           	opt stack 0
  2338                           
  2339                           ; 3 bytes @ 0x19
  2340  000079                     	ds	1
  2341  00007A                     
  2342                           ; 1 bytes @ 0x1A
  2343  00007A                     	ds	1
  2344  00007B                     i1___ftdiv@cntr:
  2345                           	opt stack 0
  2346                           
  2347                           ; 1 bytes @ 0x1B
  2348  00007B                     	ds	1
  2349  00007C                     i1___ftdiv@f3:
  2350                           	opt stack 0
  2351  00007C                     i1desintegrator@tempL:
  2352                           	opt stack 0
  2353                           
  2354                           ; 4 bytes @ 0x1C
  2355  00007C                     	ds	3
  2356  00007F                     i1___ftdiv@exp:
  2357                           	opt stack 0
  2358                           
  2359                           ; 1 bytes @ 0x1F
  2360  00007F                     	ds	1
  2361  000080                     i1___ftdiv@sign:
  2362                           	opt stack 0
  2363  000080                     i1desintegrator@temp3:
  2364                           	opt stack 0
  2365                           
  2366                           ; 4 bytes @ 0x20
  2367  000080                     	ds	1
  2368  000081                     ??i1_integrator:
  2369  000081                     i1confirmEdition@yes:
  2370                           	opt stack 0
  2371                           
  2372                           ; 1 bytes @ 0x21
  2373  000081                     	ds	2
  2374  000083                     i1integrator@acum:
  2375                           	opt stack 0
  2376                           
  2377                           ; 4 bytes @ 0x23
  2378  000083                     	ds	1
  2379  000084                     i1desintegrator@temp2:
  2380                           	opt stack 0
  2381                           
  2382                           ; 4 bytes @ 0x24
  2383  000084                     	ds	3
  2384  000087                     i1integrator@temp:
  2385                           	opt stack 0
  2386                           
  2387                           ; 4 bytes @ 0x27
  2388  000087                     	ds	1
  2389  000088                     i1desintegrator@i:
  2390                           	opt stack 0
  2391                           
  2392                           ; 2 bytes @ 0x28
  2393  000088                     	ds	2
  2394  00008A                     
  2395                           ; 1 bytes @ 0x2A
  2396  00008A                     	ds	1
  2397  00008B                     i1integrator@i:
  2398                           	opt stack 0
  2399                           
  2400                           ; 2 bytes @ 0x2B
  2401  00008B                     	ds	2
  2402  00008D                     i1longPressENTER@temp:
  2403                           	opt stack 0
  2404                           
  2405                           ; 3 bytes @ 0x2D
  2406  00008D                     	ds	3
  2407  000090                     i1_longPressENTER$3080:
  2408                           	opt stack 0
  2409                           
  2410                           ; 3 bytes @ 0x30
  2411  000090                     	ds	3
  2412  000093                     UARTint@sas:
  2413                           	opt stack 0
  2414                           
  2415                           ; 1 bytes @ 0x33
  2416  000093                     	ds	1
  2417  000094                     ??_isr:
  2418                           
  2419                           ; 1 bytes @ 0x34
  2420  000094                     	ds	17
  2421                           tblptru	equ	0xFF8
  2422                           tblptrh	equ	0xFF7
  2423                           tblptrl	equ	0xFF6
  2424                           tablat	equ	0xFF5
  2425                           postinc0	equ	0xFEE
  2426                           wreg	equ	0xFE8
  2427                           postdec1	equ	0xFE5
  2428                           fsr1l	equ	0xFE1
  2429                           
  2430                           	psect	cstackCOMRAM
  2431  000001                     __pcstackCOMRAM:
  2432                           	opt stack 0
  2433  000001                     ?i2___ftpack:
  2434                           	opt stack 0
  2435  000001                     i2setPWM2duty@actuator:
  2436                           	opt stack 0
  2437  000001                     i2___ftpack@arg:
  2438                           	opt stack 0
  2439                           
  2440                           ; 3 bytes @ 0x0
  2441  000001                     	ds	2
  2442  000003                     ??i2_setPWM2duty:
  2443                           
  2444                           ; 1 bytes @ 0x2
  2445  000003                     	ds	1
  2446  000004                     i2___ftpack@exp:
  2447                           	opt stack 0
  2448                           
  2449                           ; 1 bytes @ 0x3
  2450  000004                     	ds	1
  2451  000005                     i2___ftpack@sign:
  2452                           	opt stack 0
  2453  000005                     i2setPWM2duty@act:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0x4
  2457  000005                     	ds	1
  2458  000006                     ??i2___ftpack:
  2459                           
  2460                           ; 1 bytes @ 0x5
  2461  000006                     	ds	1
  2462  000007                     
  2463                           ; 1 bytes @ 0x6
  2464  000007                     	ds	2
  2465  000009                     ?i2___altoft:
  2466                           	opt stack 0
  2467  000009                     i2___altoft@c:
  2468                           	opt stack 0
  2469                           
  2470                           ; 4 bytes @ 0x8
  2471  000009                     	ds	4
  2472  00000D                     ??i2___altoft:
  2473                           
  2474                           ; 1 bytes @ 0xC
  2475  00000D                     	ds	4
  2476  000011                     i2___altoft@exp:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0x10
  2480  000011                     	ds	1
  2481  000012                     i2___altoft@sign:
  2482                           	opt stack 0
  2483                           
  2484                           ; 1 bytes @ 0x11
  2485  000012                     	ds	1
  2486  000013                     ?i2___ftadd:
  2487                           	opt stack 0
  2488  000013                     i2___ftadd@f1:
  2489                           	opt stack 0
  2490                           
  2491                           ; 3 bytes @ 0x12
  2492  000013                     	ds	3
  2493  000016                     i2___ftadd@f2:
  2494                           	opt stack 0
  2495                           
  2496                           ; 3 bytes @ 0x15
  2497  000016                     	ds	3
  2498  000019                     ??i2___ftadd:
  2499                           
  2500                           ; 1 bytes @ 0x18
  2501  000019                     	ds	3
  2502  00001C                     i2___ftadd@sign:
  2503                           	opt stack 0
  2504                           
  2505                           ; 1 bytes @ 0x1B
  2506  00001C                     	ds	1
  2507  00001D                     i2___ftadd@exp2:
  2508                           	opt stack 0
  2509                           
  2510                           ; 1 bytes @ 0x1C
  2511  00001D                     	ds	1
  2512  00001E                     i2___ftadd@exp1:
  2513                           	opt stack 0
  2514                           
  2515                           ; 1 bytes @ 0x1D
  2516  00001E                     	ds	1
  2517  00001F                     i2___ftge@ff1:
  2518                           	opt stack 0
  2519                           
  2520                           ; 3 bytes @ 0x1E
  2521  00001F                     	ds	3
  2522  000022                     i2___ftge@ff2:
  2523                           	opt stack 0
  2524                           
  2525                           ; 3 bytes @ 0x21
  2526  000022                     	ds	3
  2527  000025                     ??i2___ftge:
  2528                           
  2529                           ; 1 bytes @ 0x24
  2530  000025                     	ds	3
  2531  000028                     ??_T4int:
  2532                           
  2533                           ; 1 bytes @ 0x27
  2534  000028                     	ds	1
  2535  000029                     ??_hp_isr:
  2536                           
  2537                           ; 1 bytes @ 0x28
  2538  000029                     	ds	14
  2539                           tblptru	equ	0xFF8
  2540                           tblptrh	equ	0xFF7
  2541                           tblptrl	equ	0xFF6
  2542                           tablat	equ	0xFF5
  2543                           postinc0	equ	0xFEE
  2544                           wreg	equ	0xFE8
  2545                           postdec1	equ	0xFE5
  2546                           fsr1l	equ	0xFE1
  2547                           
  2548 ;;
  2549 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2550 ;;
  2551 ;; *************** function _main *****************
  2552 ;; Defined at:
  2553 ;;		line 31 in file "source/main.c"
  2554 ;; Parameters:    Size  Location     Type
  2555 ;;		None
  2556 ;; Auto vars:     Size  Location     Type
  2557 ;;		None
  2558 ;; Return value:  Size  Location     Type
  2559 ;;                  1    wreg      void 
  2560 ;; Registers used:
  2561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2562 ;; Tracked objects:
  2563 ;;		On entry : 0/0
  2564 ;;		On exit  : 0/0
  2565 ;;		Unchanged: 0/0
  2566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2567 ;;      Params:         0       0       0       0       0       0       0
  2568 ;;      Locals:         0       0       0       0       0       0       0
  2569 ;;      Temps:          0       0       0       0       0       0       0
  2570 ;;      Totals:         0       0       0       0       0       0       0
  2571 ;;Total ram usage:        0 bytes
  2572 ;; Hardware stack levels required when called:   22
  2573 ;; This function calls:
  2574 ;;		_EEPROMConfig
  2575 ;;		_PWM2Config
  2576 ;;		_UARTConfig
  2577 ;;		_buttonChecking
  2578 ;;		_clockConfig
  2579 ;;		_drawScreen
  2580 ;;		_interruptConfig
  2581 ;;		_ioConfig
  2582 ;;		_ioInitStt
  2583 ;;		_lcd_init
  2584 ;;		_setPWM2duty
  2585 ;;		_setPWM2on
  2586 ;;		_sysParamInit
  2587 ;;		_t4config
  2588 ;; This function is called by:
  2589 ;;		Startup code after reset
  2590 ;; This function uses a non-reentrant model
  2591 ;;
  2592                           
  2593                           	psect	text0
  2594  006CC4                     __ptext0:
  2595                           	opt stack 0
  2596  006CC4                     _main:
  2597                           	opt stack 9
  2598                           
  2599                           ;main.c: 33: clockConfig();
  2600                           
  2601                           ;incstack = 0
  2602  006CC4  ECB0  F038         	call	_clockConfig	;wreg free
  2603                           
  2604                           ;main.c: 34: t4config();
  2605  006CC8  EC5C  F038         	call	_t4config	;wreg free
  2606                           
  2607                           ;main.c: 35: ioInitStt();
  2608  006CCC  ECB4  F039         	call	_ioInitStt	;wreg free
  2609                           
  2610                           ;main.c: 36: EEPROMConfig();
  2611  006CD0  ECBC  F039         	call	_EEPROMConfig	;wreg free
  2612                           
  2613                           ;main.c: 38: sysParamInit();
  2614  006CD4  EC88  F033         	call	_sysParamInit	;wreg free
  2615                           
  2616                           ;main.c: 39: ioConfig();
  2617  006CD8  EC9F  F037         	call	_ioConfig	;wreg free
  2618                           
  2619                           ;main.c: 40: lcd_init();
  2620  006CDC  EC05  F02E         	call	_lcd_init	;wreg free
  2621                           
  2622                           ;main.c: 41: PWM2Config();
  2623  006CE0  EC8A  F035         	call	_PWM2Config	;wreg free
  2624                           
  2625                           ;main.c: 42: UARTConfig();
  2626  006CE4  EC4C  F037         	call	_UARTConfig	;wreg free
  2627                           
  2628                           ;main.c: 43: interruptConfig();
  2629  006CE8  ECB8  F039         	call	_interruptConfig	;wreg free
  2630  006CEC  0004               	clrwdt		;# 
  2631                           
  2632                           ;main.c: 46: WDTCONbits.SWDTEN = 1;
  2633  006CEE  80D1               	bsf	4049,0,c	;volatile
  2634                           
  2635                           ;main.c: 47: setPWM2duty(-400);
  2636  006CF0  0EFE               	movlw	254
  2637  006CF2  0101               	movlb	1	; () banked
  2638  006CF4  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
  2639  006CF6  0E70               	movlw	112
  2640  006CF8  6F00               	movwf	setPWM2duty@actuator& (0+255),b
  2641  006CFA  EC40  F02F         	call	_setPWM2duty	;wreg free
  2642                           
  2643                           ;main.c: 48: setPWM2on(1);
  2644  006CFE  0E01               	movlw	1
  2645  006D00  EC00  F039         	call	_setPWM2on
  2646  006D04                     l12095:
  2647                           
  2648                           ;main.c: 51: drawScreen();
  2649  006D04  ECB5  F028         	call	_drawScreen	;wreg free
  2650                           
  2651                           ;main.c: 52: buttonChecking();
  2652  006D08  EC35  F011         	call	_buttonChecking	;wreg free
  2653  006D0C  D7FB               	goto	l12095
  2654  006D0E                     __end_of_main:
  2655                           	opt stack 0
  2656                           tblptru	equ	0xFF8
  2657                           tblptrh	equ	0xFF7
  2658                           tblptrl	equ	0xFF6
  2659                           tablat	equ	0xFF5
  2660                           postinc0	equ	0xFEE
  2661                           wreg	equ	0xFE8
  2662                           postdec1	equ	0xFE5
  2663                           fsr1l	equ	0xFE1
  2664                           
  2665 ;; *************** function _t4config *****************
  2666 ;; Defined at:
  2667 ;;		line 41 in file "source/T4Config.h"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;		None
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  1    wreg      void 
  2674 ;; Registers used:
  2675 ;;		wreg, status,2
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2681 ;;      Params:         0       0       0       0       0       0       0
  2682 ;;      Locals:         0       0       0       0       0       0       0
  2683 ;;      Temps:          0       0       0       0       0       0       0
  2684 ;;      Totals:         0       0       0       0       0       0       0
  2685 ;;Total ram usage:        0 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:   12
  2688 ;; This function calls:
  2689 ;;		Nothing
  2690 ;; This function is called by:
  2691 ;;		_main
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text1
  2696  0070B8                     __ptext1:
  2697                           	opt stack 0
  2698  0070B8                     _t4config:
  2699                           	opt stack 18
  2700                           
  2701                           ;T4Config.h: 42: T4CONbits.TMR4ON = 0;
  2702                           
  2703                           ;incstack = 0
  2704  0070B8  010F               	movlb	15	; () banked
  2705  0070BA  9551               	bcf	81,2,b	;volatile
  2706                           
  2707                           ; BSR set to: 15
  2708                           ;T4Config.h: 43: T4CONbits.T4CKPS = 0b01;
  2709  0070BC  010F               	movlb	15	; () banked
  2710  0070BE  5151               	movf	81,w,b	;volatile
  2711  0070C0  0BFC               	andlw	-4
  2712  0070C2  0901               	iorlw	1
  2713  0070C4  6F51               	movwf	81,b	;volatile
  2714                           
  2715                           ;T4Config.h: 44: T4CONbits.T4OUTPS = 0b0100;
  2716  0070C6  010F               	movlb	15	; () banked
  2717  0070C8  5151               	movf	81,w,b	;volatile
  2718  0070CA  0B87               	andlw	-121
  2719  0070CC  0920               	iorlw	32
  2720  0070CE  6F51               	movwf	81,b	;volatile
  2721                           
  2722                           ;T4Config.h: 45: PR4 = 199;
  2723  0070D0  0EC7               	movlw	199
  2724  0070D2  010F               	movlb	15	; () banked
  2725  0070D4  6F52               	movwf	82,b	;volatile
  2726                           
  2727                           ; BSR set to: 15
  2728                           ;T4Config.h: 46: PIR5bits.TMR4IF = 0;
  2729  0070D6  907E               	bcf	3966,0,c	;volatile
  2730                           
  2731                           ; BSR set to: 15
  2732                           ;T4Config.h: 47: IPR5bits.TMR4IP = 1;
  2733  0070D8  807F               	bsf	3967,0,c	;volatile
  2734                           
  2735                           ; BSR set to: 15
  2736                           ;T4Config.h: 48: PIE5bits.TMR4IE = 1;
  2737  0070DA  807D               	bsf	3965,0,c	;volatile
  2738                           
  2739                           ; BSR set to: 15
  2740                           ;T4Config.h: 49: T4CONbits.TMR4ON = 1;
  2741  0070DC  010F               	movlb	15	; () banked
  2742  0070DE  8551               	bsf	81,2,b	;volatile
  2743                           
  2744                           ; BSR set to: 15
  2745  0070E0  0012               	return		;funcret
  2746  0070E2                     __end_of_t4config:
  2747                           	opt stack 0
  2748                           tblptru	equ	0xFF8
  2749                           tblptrh	equ	0xFF7
  2750                           tblptrl	equ	0xFF6
  2751                           tablat	equ	0xFF5
  2752                           postinc0	equ	0xFEE
  2753                           wreg	equ	0xFE8
  2754                           postdec1	equ	0xFE5
  2755                           fsr1l	equ	0xFE1
  2756                           
  2757 ;; *************** function _sysParamInit *****************
  2758 ;; Defined at:
  2759 ;;		line 169 in file "source/sysParams.h"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;		None
  2762 ;; Auto vars:     Size  Location     Type
  2763 ;;		None
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  1    wreg      void 
  2766 ;; Registers used:
  2767 ;;		wreg, status,2, status,0, cstack
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2773 ;;      Params:         0       0       0       0       0       0       0
  2774 ;;      Locals:         0       0       0       0       0       0       0
  2775 ;;      Temps:          0       0       0       0       0       0       0
  2776 ;;      Totals:         0       0       0       0       0       0       0
  2777 ;;Total ram usage:        0 bytes
  2778 ;; Hardware stack levels used:    1
  2779 ;; Hardware stack levels required when called:   15
  2780 ;; This function calls:
  2781 ;;		_calcSysVars
  2782 ;;		_readEEPROM
  2783 ;; This function is called by:
  2784 ;;		_main
  2785 ;; This function uses a non-reentrant model
  2786 ;;
  2787                           
  2788                           	psect	text2
  2789  006710                     __ptext2:
  2790                           	opt stack 0
  2791  006710                     _sysParamInit:
  2792                           	opt stack 15
  2793                           
  2794                           ;sysParams.h: 172: fData.floatUB = readEEPROM(3);
  2795                           
  2796                           ; BSR set to: 15
  2797                           ;incstack = 0
  2798  006710  0E03               	movlw	3
  2799  006712  EC0D  F039         	call	_readEEPROM
  2800  006716  0100               	movlb	0	; () banked
  2801  006718  6FB1               	movwf	(_fData+2)& (0+255),b
  2802                           
  2803                           ;sysParams.h: 173: fData.floatHB = readEEPROM(4);
  2804  00671A  0E04               	movlw	4
  2805  00671C  EC0D  F039         	call	_readEEPROM
  2806  006720  0100               	movlb	0	; () banked
  2807  006722  6FB0               	movwf	(_fData+1)& (0+255),b
  2808                           
  2809                           ;sysParams.h: 174: fData.floatLB = readEEPROM(5);
  2810  006724  0E05               	movlw	5
  2811  006726  EC0D  F039         	call	_readEEPROM
  2812  00672A  0100               	movlb	0	; () banked
  2813  00672C  6FAF               	movwf	_fData& (0+255),b
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;sysParams.h: 175: tiXcorte = fData.floatdat;
  2817  00672E  C0AF  F195         	movff	_fData,_tiXcorte
  2818  006732  C0B0  F196         	movff	_fData+1,_tiXcorte+1
  2819  006736  C0B1  F197         	movff	_fData+2,_tiXcorte+2
  2820                           
  2821                           ;sysParams.h: 176: i16Data.int16HB = readEEPROM(6);
  2822  00673A  0E06               	movlw	6
  2823  00673C  EC0D  F039         	call	_readEEPROM
  2824  006740  0100               	movlb	0	; () banked
  2825  006742  6FB5               	movwf	(_i16Data+1)& (0+255),b
  2826                           
  2827                           ;sysParams.h: 177: i16Data.int16LB = readEEPROM(7);
  2828  006744  0E07               	movlw	7
  2829  006746  EC0D  F039         	call	_readEEPROM
  2830  00674A  0100               	movlb	0	; () banked
  2831  00674C  6FB4               	movwf	_i16Data& (0+255),b
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;sysParams.h: 178: numCortes = i16Data.int16dat;
  2835  00674E  C0B4  F0D2         	movff	_i16Data,_numCortes
  2836  006752  C0B5  F0D3         	movff	_i16Data+1,_numCortes+1
  2837                           
  2838                           ;sysParams.h: 190: fData.floatUB = readEEPROM(17);
  2839  006756  0E11               	movlw	17
  2840  006758  EC0D  F039         	call	_readEEPROM
  2841  00675C  0100               	movlb	0	; () banked
  2842  00675E  6FB1               	movwf	(_fData+2)& (0+255),b
  2843                           
  2844                           ;sysParams.h: 191: fData.floatHB = readEEPROM(18);
  2845  006760  0E12               	movlw	18
  2846  006762  EC0D  F039         	call	_readEEPROM
  2847  006766  0100               	movlb	0	; () banked
  2848  006768  6FB0               	movwf	(_fData+1)& (0+255),b
  2849                           
  2850                           ;sysParams.h: 192: fData.floatLB = readEEPROM(19);
  2851  00676A  0E13               	movlw	19
  2852  00676C  EC0D  F039         	call	_readEEPROM
  2853  006770  0100               	movlb	0	; () banked
  2854  006772  6FAF               	movwf	_fData& (0+255),b
  2855                           
  2856                           ; BSR set to: 0
  2857                           ;sysParams.h: 193: velocidadMasa = fData.floatdat;
  2858  006774  C0AF  F18F         	movff	_fData,_velocidadMasa
  2859  006778  C0B0  F190         	movff	_fData+1,_velocidadMasa+1
  2860  00677C  C0B1  F191         	movff	_fData+2,_velocidadMasa+2
  2861                           
  2862                           ; BSR set to: 0
  2863                           ;sysParams.h: 194: calcSysVars();
  2864  006780  EC20  F035         	call	_calcSysVars	;wreg free
  2865  006784  0012               	return		;funcret
  2866  006786                     __end_of_sysParamInit:
  2867                           	opt stack 0
  2868                           tblptru	equ	0xFF8
  2869                           tblptrh	equ	0xFF7
  2870                           tblptrl	equ	0xFF6
  2871                           tablat	equ	0xFF5
  2872                           postinc0	equ	0xFEE
  2873                           wreg	equ	0xFE8
  2874                           postdec1	equ	0xFE5
  2875                           fsr1l	equ	0xFE1
  2876                           
  2877 ;; *************** function _readEEPROM *****************
  2878 ;; Defined at:
  2879 ;;		line 65 in file "source/sysParams.h"
  2880 ;; Parameters:    Size  Location     Type
  2881 ;;  adr             1    wreg     unsigned char 
  2882 ;; Auto vars:     Size  Location     Type
  2883 ;;  adr             1    0[BANK1 ] unsigned char 
  2884 ;; Return value:  Size  Location     Type
  2885 ;;                  1    wreg      unsigned char 
  2886 ;; Registers used:
  2887 ;;		wreg, status,2
  2888 ;; Tracked objects:
  2889 ;;		On entry : 0/0
  2890 ;;		On exit  : 0/0
  2891 ;;		Unchanged: 0/0
  2892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2893 ;;      Params:         0       0       0       0       0       0       0
  2894 ;;      Locals:         0       0       1       0       0       0       0
  2895 ;;      Temps:          0       0       0       0       0       0       0
  2896 ;;      Totals:         0       0       1       0       0       0       0
  2897 ;;Total ram usage:        1 bytes
  2898 ;; Hardware stack levels used:    1
  2899 ;; Hardware stack levels required when called:   12
  2900 ;; This function calls:
  2901 ;;		Nothing
  2902 ;; This function is called by:
  2903 ;;		_sysParamInit
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           	psect	text3
  2908  00721A                     __ptext3:
  2909                           	opt stack 0
  2910  00721A                     _readEEPROM:
  2911                           	opt stack 17
  2912                           
  2913                           ;incstack = 0
  2914                           ;readEEPROM@adr stored from wreg
  2915  00721A  0101               	movlb	1	; () banked
  2916  00721C  6F00               	movwf	readEEPROM@adr& (0+255),b
  2917                           
  2918                           ;sysParams.h: 66: EEADR = adr;
  2919  00721E  C100  FFA9         	movff	readEEPROM@adr,4009	;volatile
  2920                           
  2921                           ;sysParams.h: 67: EECON1bits.EEPGD = 0;
  2922  007222  9EA6               	bcf	4006,7,c	;volatile
  2923                           
  2924                           ;sysParams.h: 68: EECON1bits.CFGS = 0;
  2925  007224  9CA6               	bcf	4006,6,c	;volatile
  2926                           
  2927                           ;sysParams.h: 69: EECON1bits.RD = 1;
  2928  007226  80A6               	bsf	4006,0,c	;volatile
  2929  007228                     l289:
  2930  007228  B0A6               	btfsc	4006,0,c	;volatile
  2931  00722A  D7FE               	goto	l289
  2932                           
  2933                           ;sysParams.h: 71: return EEDATA;
  2934  00722C  50A8               	movf	4008,w,c	;volatile
  2935  00722E  0012               	return		;funcret
  2936  007230                     __end_of_readEEPROM:
  2937                           	opt stack 0
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           postinc0	equ	0xFEE
  2943                           wreg	equ	0xFE8
  2944                           postdec1	equ	0xFE5
  2945                           fsr1l	equ	0xFE1
  2946                           
  2947 ;; *************** function _calcSysVars *****************
  2948 ;; Defined at:
  2949 ;;		line 79 in file "source/sysParams.h"
  2950 ;; Parameters:    Size  Location     Type
  2951 ;;		None
  2952 ;; Auto vars:     Size  Location     Type
  2953 ;;  temp            3   35[BANK1 ] float 
  2954 ;; Return value:  Size  Location     Type
  2955 ;;                  1    wreg      void 
  2956 ;; Registers used:
  2957 ;;		wreg, status,2, status,0, cstack
  2958 ;; Tracked objects:
  2959 ;;		On entry : 0/0
  2960 ;;		On exit  : 0/0
  2961 ;;		Unchanged: 0/0
  2962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2963 ;;      Params:         0       0       0       0       0       0       0
  2964 ;;      Locals:         0       0       3       0       0       0       0
  2965 ;;      Temps:          0       0       0       0       0       0       0
  2966 ;;      Totals:         0       0       3       0       0       0       0
  2967 ;;Total ram usage:        3 bytes
  2968 ;; Hardware stack levels used:    1
  2969 ;; Hardware stack levels required when called:   14
  2970 ;; This function calls:
  2971 ;;		___ftmul
  2972 ;; This function is called by:
  2973 ;;		_sysParamInit
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text4
  2978  006A40                     __ptext4:
  2979                           	opt stack 0
  2980  006A40                     _calcSysVars:
  2981                           	opt stack 15
  2982                           
  2983                           ;sysParams.h: 80: float temp = 0;
  2984                           
  2985                           ;incstack = 0
  2986  006A40  0E00               	movlw	0
  2987  006A42  0101               	movlb	1	; () banked
  2988  006A44  6F23               	movwf	calcSysVars@temp& (0+255),b
  2989  006A46  0E00               	movlw	0
  2990  006A48  0101               	movlb	1	; () banked
  2991  006A4A  6F24               	movwf	(calcSysVars@temp+1)& (0+255),b
  2992  006A4C  0E00               	movlw	0
  2993  006A4E  0101               	movlb	1	; () banked
  2994  006A50  6F25               	movwf	(calcSysVars@temp+2)& (0+255),b
  2995                           
  2996                           ; BSR set to: 1
  2997                           ;sysParams.h: 81: timsXcorte = (float)tiXcorte * 1000;
  2998  006A52  C195  F114         	movff	_tiXcorte,___ftmul@f1
  2999  006A56  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
  3000  006A5A  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
  3001  006A5E  0E00               	movlw	0
  3002  006A60  0101               	movlb	1	; () banked
  3003  006A62  6F17               	movwf	___ftmul@f2& (0+255),b
  3004  006A64  0E7A               	movlw	122
  3005  006A66  0101               	movlb	1	; () banked
  3006  006A68  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  3007  006A6A  0E44               	movlw	68
  3008  006A6C  0101               	movlb	1	; () banked
  3009  006A6E  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  3010  006A70  EC35  F01C         	call	___ftmul	;wreg free
  3011  006A74  C114  F055         	movff	?___ftmul,_timsXcorte
  3012  006A78  C115  F056         	movff	?___ftmul+1,_timsXcorte+1
  3013  006A7C  C116  F057         	movff	?___ftmul+2,_timsXcorte+2
  3014                           
  3015                           ;sysParams.h: 87: kgXcorte = (float)velocidadMasa * tiXcorte;
  3016  006A80  C18F  F114         	movff	_velocidadMasa,___ftmul@f1
  3017  006A84  C190  F115         	movff	_velocidadMasa+1,___ftmul@f1+1
  3018  006A88  C191  F116         	movff	_velocidadMasa+2,___ftmul@f1+2
  3019  006A8C  C195  F117         	movff	_tiXcorte,___ftmul@f2
  3020  006A90  C196  F118         	movff	_tiXcorte+1,___ftmul@f2+1
  3021  006A94  C197  F119         	movff	_tiXcorte+2,___ftmul@f2+2
  3022  006A98  EC35  F01C         	call	___ftmul	;wreg free
  3023  006A9C  C114  F198         	movff	?___ftmul,_kgXcorte
  3024  006AA0  C115  F199         	movff	?___ftmul+1,_kgXcorte+1
  3025  006AA4  C116  F19A         	movff	?___ftmul+2,_kgXcorte+2
  3026  006AA8  0012               	return		;funcret
  3027  006AAA                     __end_of_calcSysVars:
  3028                           	opt stack 0
  3029                           tblptru	equ	0xFF8
  3030                           tblptrh	equ	0xFF7
  3031                           tblptrl	equ	0xFF6
  3032                           tablat	equ	0xFF5
  3033                           postinc0	equ	0xFEE
  3034                           wreg	equ	0xFE8
  3035                           postdec1	equ	0xFE5
  3036                           fsr1l	equ	0xFE1
  3037                           
  3038 ;; *************** function _setPWM2on *****************
  3039 ;; Defined at:
  3040 ;;		line 170 in file "source/PWMConfig.h"
  3041 ;; Parameters:    Size  Location     Type
  3042 ;;  on              1    wreg     unsigned char 
  3043 ;; Auto vars:     Size  Location     Type
  3044 ;;  on              1    0[BANK1 ] unsigned char 
  3045 ;; Return value:  Size  Location     Type
  3046 ;;                  1    wreg      void 
  3047 ;; Registers used:
  3048 ;;		wreg, status,2
  3049 ;; Tracked objects:
  3050 ;;		On entry : 0/0
  3051 ;;		On exit  : 0/0
  3052 ;;		Unchanged: 0/0
  3053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3054 ;;      Params:         0       0       0       0       0       0       0
  3055 ;;      Locals:         0       0       1       0       0       0       0
  3056 ;;      Temps:          0       0       0       0       0       0       0
  3057 ;;      Totals:         0       0       1       0       0       0       0
  3058 ;;Total ram usage:        1 bytes
  3059 ;; Hardware stack levels used:    1
  3060 ;; Hardware stack levels required when called:   12
  3061 ;; This function calls:
  3062 ;;		Nothing
  3063 ;; This function is called by:
  3064 ;;		_main
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text5
  3069  007200                     __ptext5:
  3070                           	opt stack 0
  3071  007200                     _setPWM2on:
  3072                           	opt stack 18
  3073                           
  3074                           ;incstack = 0
  3075                           ;setPWM2on@on stored from wreg
  3076  007200  0101               	movlb	1	; () banked
  3077  007202  6F00               	movwf	setPWM2on@on& (0+255),b
  3078                           
  3079                           ;PWMConfig.h: 171: if(on) {
  3080  007204  0101               	movlb	1	; () banked
  3081  007206  5100               	movf	setPWM2on@on& (0+255),w,b
  3082  007208  0101               	movlb	1	; () banked
  3083  00720A  B4D8               	btfsc	status,2,c
  3084  00720C  D003               	goto	l550
  3085                           
  3086                           ; BSR set to: 1
  3087                           ;PWMConfig.h: 172: TRISCbits.TRISC0 = 0;
  3088  00720E  9094               	bcf	3988,0,c	;volatile
  3089                           
  3090                           ;PWMConfig.h: 173: TRISCbits.TRISC1 = 0;
  3091  007210  9294               	bcf	3988,1,c	;volatile
  3092                           
  3093                           ;PWMConfig.h: 174: }else {
  3094  007212  0012               	return	
  3095  007214                     l550:
  3096                           
  3097                           ; BSR set to: 1
  3098                           ;PWMConfig.h: 175: TRISCbits.TRISC0 = 1;
  3099  007214  8094               	bsf	3988,0,c	;volatile
  3100                           
  3101                           ;PWMConfig.h: 176: TRISCbits.TRISC1 = 1;
  3102  007216  8294               	bsf	3988,1,c	;volatile
  3103  007218  0012               	return	
  3104  00721A                     __end_of_setPWM2on:
  3105                           	opt stack 0
  3106                           tblptru	equ	0xFF8
  3107                           tblptrh	equ	0xFF7
  3108                           tblptrl	equ	0xFF6
  3109                           tablat	equ	0xFF5
  3110                           postinc0	equ	0xFEE
  3111                           wreg	equ	0xFE8
  3112                           postdec1	equ	0xFE5
  3113                           fsr1l	equ	0xFE1
  3114                           status	equ	0xFD8
  3115                           
  3116 ;; *************** function _lcd_init *****************
  3117 ;; Defined at:
  3118 ;;		line 179 in file "source/../../vclib_lcd.h"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;		None
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;  LCD_INIT_STR    4    9[BANK1 ] unsigned char [4]
  3123 ;;  i               1   13[BANK1 ] unsigned char 
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  1    wreg      void 
  3126 ;; Registers used:
  3127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3133 ;;      Params:         0       0       0       0       0       0       0
  3134 ;;      Locals:         0       0       5       0       0       0       0
  3135 ;;      Temps:          0       0       1       0       0       0       0
  3136 ;;      Totals:         0       0       6       0       0       0       0
  3137 ;;Total ram usage:        6 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:   15
  3140 ;; This function calls:
  3141 ;;		_lcd_send_4bits
  3142 ;;		_lcd_send_byte
  3143 ;; This function is called by:
  3144 ;;		_main
  3145 ;; This function uses a non-reentrant model
  3146 ;;
  3147                           
  3148                           	psect	text6
  3149  005C0A                     __ptext6:
  3150                           	opt stack 0
  3151  005C0A                     _lcd_init:
  3152                           	opt stack 15
  3153                           
  3154                           ;vclib_lcd.h: 180: unsigned char i;
  3155                           ;vclib_lcd.h: 181: unsigned char LCD_INIT_STRING[4] = {0x20 | (2 << 2), 0xc, 1, 6};
  3156                           
  3157                           ; BSR set to: 1
  3158                           ;incstack = 0
  3159  005C0A  C0C9  F109         	movff	lcd_init@F6841,lcd_init@LCD_INIT_STRING
  3160  005C0E  C0CA  F10A         	movff	lcd_init@F6841+1,lcd_init@LCD_INIT_STRING+1
  3161  005C12  C0CB  F10B         	movff	lcd_init@F6841+2,lcd_init@LCD_INIT_STRING+2
  3162  005C16  C0CC  F10C         	movff	lcd_init@F6841+3,lcd_init@LCD_INIT_STRING+3
  3163                           
  3164                           ;vclib_lcd.h: 184: PORTBbits.RB3 = 0;
  3165  005C1A  9681               	bcf	3969,3,c	;volatile
  3166                           
  3167                           ;vclib_lcd.h: 185: PORTBbits.RB1 = 0;
  3168  005C1C  9281               	bcf	3969,1,c	;volatile
  3169                           
  3170                           ;vclib_lcd.h: 186: PORTBbits.RB2 = 0;
  3171  005C1E  9481               	bcf	3969,2,c	;volatile
  3172                           
  3173                           ;vclib_lcd.h: 187: _delay((unsigned long)((15)*(16000000/4000.0)));
  3174  005C20  0E4E               	movlw	78
  3175  005C22  0101               	movlb	1	; () banked
  3176  005C24  6F08               	movwf	??_lcd_init& (0+255),b
  3177  005C26  0EEB               	movlw	235
  3178  005C28                     u17957:
  3179  005C28  2EE8               	decfsz	wreg,f,c
  3180  005C2A  D7FE               	bra	u17957
  3181  005C2C  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3182  005C2E  D7FC               	bra	u17957
  3183                           
  3184                           ;vclib_lcd.h: 188: for (i = 1; i <= 3; ++i) {
  3185  005C30  0E01               	movlw	1
  3186  005C32  0101               	movlb	1	; () banked
  3187  005C34  6F0D               	movwf	lcd_init@i& (0+255),b
  3188  005C36                     l11657:
  3189                           
  3190                           ; BSR set to: 1
  3191  005C36  0E03               	movlw	3
  3192  005C38  0101               	movlb	1	; () banked
  3193  005C3A  650D               	cpfsgt	lcd_init@i& (0+255),b
  3194  005C3C  D001               	goto	l11661
  3195  005C3E  D00F               	goto	l11669
  3196  005C40                     l11661:
  3197                           
  3198                           ; BSR set to: 1
  3199                           ;vclib_lcd.h: 189: lcd_send_4bits(3);
  3200  005C40  0E03               	movlw	3
  3201  005C42  ECF7  F030         	call	_lcd_send_4bits
  3202                           
  3203                           ;vclib_lcd.h: 190: _delay((unsigned long)((5)*(16000000/4000.0)));
  3204  005C46  0E1A               	movlw	26
  3205  005C48  0101               	movlb	1	; () banked
  3206  005C4A  6F08               	movwf	??_lcd_init& (0+255),b
  3207  005C4C  0EF8               	movlw	248
  3208  005C4E                     u17967:
  3209  005C4E  2EE8               	decfsz	wreg,f,c
  3210  005C50  D7FE               	bra	u17967
  3211  005C52  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3212  005C54  D7FC               	bra	u17967
  3213  005C56  F000               	nop	
  3214  005C58  0101               	movlb	1	; () banked
  3215  005C5A  2B0D               	incf	lcd_init@i& (0+255),f,b
  3216  005C5C  D7EC               	goto	l11657
  3217  005C5E                     l11669:
  3218                           
  3219                           ; BSR set to: 1
  3220                           ;vclib_lcd.h: 191: }
  3221                           ;vclib_lcd.h: 192: lcd_send_4bits(2);
  3222  005C5E  0E02               	movlw	2
  3223  005C60  ECF7  F030         	call	_lcd_send_4bits
  3224                           
  3225                           ;vclib_lcd.h: 193: _delay((unsigned long)((5)*(16000000/4000.0)));
  3226  005C64  0E1A               	movlw	26
  3227  005C66  0101               	movlb	1	; () banked
  3228  005C68  6F08               	movwf	??_lcd_init& (0+255),b
  3229  005C6A  0EF8               	movlw	248
  3230  005C6C                     u17977:
  3231  005C6C  2EE8               	decfsz	wreg,f,c
  3232  005C6E  D7FE               	bra	u17977
  3233  005C70  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3234  005C72  D7FC               	bra	u17977
  3235  005C74  F000               	nop	
  3236                           
  3237                           ;vclib_lcd.h: 194: for (i = 0; i <= 3; ++i)
  3238  005C76  0E00               	movlw	0
  3239  005C78  0101               	movlb	1	; () banked
  3240  005C7A  6F0D               	movwf	lcd_init@i& (0+255),b
  3241  005C7C                     l11675:
  3242                           
  3243                           ; BSR set to: 1
  3244  005C7C  0E03               	movlw	3
  3245  005C7E  0101               	movlb	1	; () banked
  3246  005C80  650D               	cpfsgt	lcd_init@i& (0+255),b
  3247  005C82  D001               	goto	l11679
  3248  005C84  0012               	return	
  3249  005C86                     l11679:
  3250                           
  3251                           ; BSR set to: 1
  3252                           ;vclib_lcd.h: 195: lcd_send_byte(0, LCD_INIT_STRING[i]);
  3253  005C86  0101               	movlb	1	; () banked
  3254  005C88  510D               	movf	lcd_init@i& (0+255),w,b
  3255  005C8A  0D01               	mullw	1
  3256  005C8C  0E09               	movlw	low lcd_init@LCD_INIT_STRING
  3257  005C8E  24F3               	addwf	prodl,w,c
  3258  005C90  6ED9               	movwf	fsr2l,c
  3259  005C92  0E01               	movlw	high lcd_init@LCD_INIT_STRING
  3260  005C94  20F4               	addwfc	prodh,w,c
  3261  005C96  6EDA               	movwf	fsr2h,c
  3262  005C98  50DF               	movf	indf2,w,c
  3263  005C9A  0101               	movlb	1	; () banked
  3264  005C9C  6F05               	movwf	lcd_send_byte@n& (0+255),b
  3265  005C9E  0E00               	movlw	0
  3266  005CA0  ECF1  F036         	call	_lcd_send_byte
  3267  005CA4  0101               	movlb	1	; () banked
  3268  005CA6  2B0D               	incf	lcd_init@i& (0+255),f,b
  3269  005CA8  D7E9               	goto	l11675
  3270  005CAA                     __end_of_lcd_init:
  3271                           	opt stack 0
  3272                           tblptru	equ	0xFF8
  3273                           tblptrh	equ	0xFF7
  3274                           tblptrl	equ	0xFF6
  3275                           tablat	equ	0xFF5
  3276                           prodh	equ	0xFF4
  3277                           prodl	equ	0xFF3
  3278                           postinc0	equ	0xFEE
  3279                           wreg	equ	0xFE8
  3280                           postdec1	equ	0xFE5
  3281                           fsr1l	equ	0xFE1
  3282                           indf2	equ	0xFDF
  3283                           fsr2h	equ	0xFDA
  3284                           fsr2l	equ	0xFD9
  3285                           status	equ	0xFD8
  3286                           
  3287 ;; *************** function _ioInitStt *****************
  3288 ;; Defined at:
  3289 ;;		line 86 in file "source/IOConfig.h"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;		None
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;		None
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      void 
  3296 ;; Registers used:
  3297 ;;		None
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3303 ;;      Params:         0       0       0       0       0       0       0
  3304 ;;      Locals:         0       0       0       0       0       0       0
  3305 ;;      Temps:          0       0       0       0       0       0       0
  3306 ;;      Totals:         0       0       0       0       0       0       0
  3307 ;;Total ram usage:        0 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:   12
  3310 ;; This function calls:
  3311 ;;		Nothing
  3312 ;; This function is called by:
  3313 ;;		_main
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           	psect	text7
  3318  007368                     __ptext7:
  3319                           	opt stack 0
  3320  007368                     _ioInitStt:
  3321                           	opt stack 18
  3322                           
  3323                           ;IOConfig.h: 87: LATCbits.LATC4 = 0;
  3324                           
  3325                           ; BSR set to: 1
  3326                           ;incstack = 0
  3327  007368  988B               	bcf	3979,4,c	;volatile
  3328                           
  3329                           ;IOConfig.h: 88: LATBbits.LATB0 = 0;
  3330  00736A  908A               	bcf	3978,0,c	;volatile
  3331                           
  3332                           ;IOConfig.h: 89: LATCbits.LATC5 = 0;
  3333  00736C  9A8B               	bcf	3979,5,c	;volatile
  3334  00736E  0012               	return		;funcret
  3335  007370                     __end_of_ioInitStt:
  3336                           	opt stack 0
  3337                           tblptru	equ	0xFF8
  3338                           tblptrh	equ	0xFF7
  3339                           tblptrl	equ	0xFF6
  3340                           tablat	equ	0xFF5
  3341                           prodh	equ	0xFF4
  3342                           prodl	equ	0xFF3
  3343                           postinc0	equ	0xFEE
  3344                           wreg	equ	0xFE8
  3345                           postdec1	equ	0xFE5
  3346                           fsr1l	equ	0xFE1
  3347                           indf2	equ	0xFDF
  3348                           fsr2h	equ	0xFDA
  3349                           fsr2l	equ	0xFD9
  3350                           status	equ	0xFD8
  3351                           
  3352 ;; *************** function _ioConfig *****************
  3353 ;; Defined at:
  3354 ;;		line 69 in file "source/IOConfig.h"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;		None
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;		None
  3359 ;; Return value:  Size  Location     Type
  3360 ;;                  1    wreg      void 
  3361 ;; Registers used:
  3362 ;;		None
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3368 ;;      Params:         0       0       0       0       0       0       0
  3369 ;;      Locals:         0       0       0       0       0       0       0
  3370 ;;      Temps:          0       0       0       0       0       0       0
  3371 ;;      Totals:         0       0       0       0       0       0       0
  3372 ;;Total ram usage:        0 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; Hardware stack levels required when called:   12
  3375 ;; This function calls:
  3376 ;;		Nothing
  3377 ;; This function is called by:
  3378 ;;		_main
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           	psect	text8
  3383  006F3E                     __ptext8:
  3384                           	opt stack 0
  3385  006F3E                     _ioConfig:
  3386                           	opt stack 18
  3387                           
  3388                           ;IOConfig.h: 70: TRISBbits.TRISB1 = 0;
  3389                           
  3390                           ;incstack = 0
  3391  006F3E  9293               	bcf	3987,1,c	;volatile
  3392                           
  3393                           ;IOConfig.h: 71: TRISBbits.TRISB2 = 0;
  3394  006F40  9493               	bcf	3987,2,c	;volatile
  3395                           
  3396                           ;IOConfig.h: 72: TRISBbits.TRISB3 = 0;
  3397  006F42  9693               	bcf	3987,3,c	;volatile
  3398                           
  3399                           ;IOConfig.h: 73: TRISBbits.TRISB0 = 0;
  3400  006F44  9093               	bcf	3987,0,c	;volatile
  3401                           
  3402                           ;IOConfig.h: 74: TRISCbits.TRISC5 = 0;
  3403  006F46  9A94               	bcf	3988,5,c	;volatile
  3404                           
  3405                           ;IOConfig.h: 75: TRISAbits.TRISA7 = 1;
  3406  006F48  8E92               	bsf	3986,7,c	;volatile
  3407                           
  3408                           ;IOConfig.h: 76: TRISAbits.TRISA6 = 1;
  3409  006F4A  8C92               	bsf	3986,6,c	;volatile
  3410                           
  3411                           ;IOConfig.h: 77: TRISCbits.TRISC2 = 1; ANSELCbits.ANSC2 = 0;
  3412  006F4C  8494               	bsf	3988,2,c	;volatile
  3413  006F4E  010F               	movlb	15	; () banked
  3414  006F50  953A               	bcf	58,2,b	;volatile
  3415                           
  3416                           ;IOConfig.h: 78: TRISCbits.TRISC3 = 1; ANSELCbits.ANSC3 = 0;
  3417  006F52  8694               	bsf	3988,3,c	;volatile
  3418  006F54  010F               	movlb	15	; () banked
  3419  006F56  973A               	bcf	58,3,b	;volatile
  3420                           
  3421                           ;IOConfig.h: 79: TRISAbits.TRISA2 = 1; ANSELAbits.ANSA2 = 0;
  3422  006F58  8492               	bsf	3986,2,c	;volatile
  3423  006F5A  010F               	movlb	15	; () banked
  3424  006F5C  9538               	bcf	56,2,b	;volatile
  3425                           
  3426                           ;IOConfig.h: 80: TRISAbits.TRISA3 = 1; ANSELAbits.ANSA3 = 0;
  3427  006F5E  8692               	bsf	3986,3,c	;volatile
  3428  006F60  010F               	movlb	15	; () banked
  3429  006F62  9738               	bcf	56,3,b	;volatile
  3430                           
  3431                           ;IOConfig.h: 81: TRISAbits.TRISA4 = 1;
  3432  006F64  8892               	bsf	3986,4,c	;volatile
  3433                           
  3434                           ;IOConfig.h: 82: TRISAbits.TRISA5 = 1; ANSELAbits.ANSA5 = 0;
  3435  006F66  8A92               	bsf	3986,5,c	;volatile
  3436  006F68  010F               	movlb	15	; () banked
  3437  006F6A  9B38               	bcf	56,5,b	;volatile
  3438                           
  3439                           ;IOConfig.h: 83: TRISCbits.TRISC4 = 0;
  3440  006F6C  9894               	bcf	3988,4,c	;volatile
  3441                           
  3442                           ; BSR set to: 15
  3443  006F6E  0012               	return		;funcret
  3444  006F70                     __end_of_ioConfig:
  3445                           	opt stack 0
  3446                           tblptru	equ	0xFF8
  3447                           tblptrh	equ	0xFF7
  3448                           tblptrl	equ	0xFF6
  3449                           tablat	equ	0xFF5
  3450                           prodh	equ	0xFF4
  3451                           prodl	equ	0xFF3
  3452                           postinc0	equ	0xFEE
  3453                           wreg	equ	0xFE8
  3454                           postdec1	equ	0xFE5
  3455                           fsr1l	equ	0xFE1
  3456                           indf2	equ	0xFDF
  3457                           fsr2h	equ	0xFDA
  3458                           fsr2l	equ	0xFD9
  3459                           status	equ	0xFD8
  3460                           
  3461 ;; *************** function _interruptConfig *****************
  3462 ;; Defined at:
  3463 ;;		line 89 in file "source/SYSConfig.h"
  3464 ;; Parameters:    Size  Location     Type
  3465 ;;		None
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;		None
  3468 ;; Return value:  Size  Location     Type
  3469 ;;                  1    wreg      void 
  3470 ;; Registers used:
  3471 ;;		None
  3472 ;; Tracked objects:
  3473 ;;		On entry : 0/0
  3474 ;;		On exit  : 0/0
  3475 ;;		Unchanged: 0/0
  3476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3477 ;;      Params:         0       0       0       0       0       0       0
  3478 ;;      Locals:         0       0       0       0       0       0       0
  3479 ;;      Temps:          0       0       0       0       0       0       0
  3480 ;;      Totals:         0       0       0       0       0       0       0
  3481 ;;Total ram usage:        0 bytes
  3482 ;; Hardware stack levels used:    1
  3483 ;; Hardware stack levels required when called:   12
  3484 ;; This function calls:
  3485 ;;		Nothing
  3486 ;; This function is called by:
  3487 ;;		_main
  3488 ;; This function uses a non-reentrant model
  3489 ;;
  3490                           
  3491                           	psect	text9
  3492  007370                     __ptext9:
  3493                           	opt stack 0
  3494  007370                     _interruptConfig:
  3495                           	opt stack 18
  3496                           
  3497                           ;SYSConfig.h: 90: RCONbits.IPEN = 1;
  3498                           
  3499                           ; BSR set to: 15
  3500                           ;incstack = 0
  3501  007370  8ED0               	bsf	4048,7,c	;volatile
  3502                           
  3503                           ;SYSConfig.h: 91: INTCONbits.PEIE = 1;
  3504  007372  8CF2               	bsf	intcon,6,c	;volatile
  3505                           
  3506                           ;SYSConfig.h: 92: INTCONbits.GIE = 1;
  3507  007374  8EF2               	bsf	intcon,7,c	;volatile
  3508  007376  0012               	return		;funcret
  3509  007378                     __end_of_interruptConfig:
  3510                           	opt stack 0
  3511                           tblptru	equ	0xFF8
  3512                           tblptrh	equ	0xFF7
  3513                           tblptrl	equ	0xFF6
  3514                           tablat	equ	0xFF5
  3515                           prodh	equ	0xFF4
  3516                           prodl	equ	0xFF3
  3517                           intcon	equ	0xFF2
  3518                           postinc0	equ	0xFEE
  3519                           wreg	equ	0xFE8
  3520                           postdec1	equ	0xFE5
  3521                           fsr1l	equ	0xFE1
  3522                           indf2	equ	0xFDF
  3523                           fsr2h	equ	0xFDA
  3524                           fsr2l	equ	0xFD9
  3525                           status	equ	0xFD8
  3526                           
  3527 ;; *************** function _drawScreen *****************
  3528 ;; Defined at:
  3529 ;;		line 250 in file "source/screenDrawers.h"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;		None
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;		None
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  1    wreg      void 
  3536 ;; Registers used:
  3537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3543 ;;      Params:         0       0       0       0       0       0       0
  3544 ;;      Locals:         0       0       0       0       0       0       0
  3545 ;;      Temps:          0       0       0       0       0       0       0
  3546 ;;      Totals:         0       0       0       0       0       0       0
  3547 ;;Total ram usage:        0 bytes
  3548 ;; Hardware stack levels used:    1
  3549 ;; Hardware stack levels required when called:   21
  3550 ;; This function calls:
  3551 ;;		_drawAdvON
  3552 ;;		_drawAutoCalibRM
  3553 ;;		_drawBadPass
  3554 ;;		_drawCalibProc
  3555 ;;		_drawChanVal
  3556 ;;		_drawCutError
  3557 ;;		_drawMenu
  3558 ;;		_drawPassWord
  3559 ;;		_drawReady2Cut
  3560 ;;		_drawSNquest
  3561 ;; This function is called by:
  3562 ;;		_main
  3563 ;; This function uses a non-reentrant model
  3564 ;;
  3565                           
  3566                           	psect	text10
  3567  00516A                     __ptext10:
  3568                           	opt stack 0
  3569  00516A                     _drawScreen:
  3570                           	opt stack 9
  3571                           
  3572                           ;screenDrawers.h: 251: switch (actualScreen) {
  3573                           
  3574                           ;incstack = 0
  3575  00516A  D039               	goto	l11737
  3576  00516C                     l11703:
  3577                           
  3578                           ;screenDrawers.h: 253: drawMenu(0);
  3579  00516C  0E00               	movlw	0
  3580  00516E  EC4B  F017         	call	_drawMenu
  3581                           
  3582                           ;screenDrawers.h: 254: break;
  3583  005172  0012               	return	
  3584  005174                     l11705:
  3585                           
  3586                           ;screenDrawers.h: 256: drawPassWord();
  3587  005174  EC3F  F028         	call	_drawPassWord	;wreg free
  3588                           
  3589                           ;screenDrawers.h: 257: break;
  3590  005178  0012               	return	
  3591  00517A                     l11707:
  3592                           
  3593                           ;screenDrawers.h: 259: drawBadPass();
  3594  00517A  EC18  F039         	call	_drawBadPass	;wreg free
  3595                           
  3596                           ;screenDrawers.h: 260: break;
  3597  00517E  0012               	return	
  3598  005180                     l11709:
  3599                           
  3600                           ;screenDrawers.h: 262: drawMenu(1);
  3601  005180  0E01               	movlw	1
  3602  005182  EC4B  F017         	call	_drawMenu
  3603                           
  3604                           ;screenDrawers.h: 263: break;
  3605  005186  0012               	return	
  3606  005188                     l11711:
  3607                           
  3608                           ;screenDrawers.h: 265: drawAdvON(1);
  3609  005188  0E01               	movlw	1
  3610  00518A  EC15  F036         	call	_drawAdvON
  3611                           
  3612                           ;screenDrawers.h: 266: break;
  3613  00518E  0012               	return	
  3614  005190                     l11713:
  3615                           
  3616                           ;screenDrawers.h: 268: drawAdvON(0);
  3617  005190  0E00               	movlw	0
  3618  005192  EC15  F036         	call	_drawAdvON
  3619                           
  3620                           ;screenDrawers.h: 269: break;
  3621  005196  0012               	return	
  3622  005198                     l11715:
  3623                           
  3624                           ;screenDrawers.h: 271: drawChanVal();
  3625  005198  EC12  F032         	call	_drawChanVal	;wreg free
  3626                           
  3627                           ;screenDrawers.h: 272: break;
  3628  00519C  0012               	return	
  3629  00519E                     l11717:
  3630                           
  3631                           ;screenDrawers.h: 274: drawSNquest(0);
  3632  00519E  0E00               	movlw	0
  3633  0051A0  ECA3  F024         	call	_drawSNquest
  3634                           
  3635                           ;screenDrawers.h: 275: break;
  3636  0051A4  0012               	return	
  3637  0051A6                     l11719:
  3638                           
  3639                           ;screenDrawers.h: 277: drawSNquest(1);
  3640  0051A6  0E01               	movlw	1
  3641  0051A8  ECA3  F024         	call	_drawSNquest
  3642                           
  3643                           ;screenDrawers.h: 278: break;
  3644  0051AC  0012               	return	
  3645  0051AE                     l11721:
  3646                           
  3647                           ;screenDrawers.h: 280: drawSNquest(2);
  3648  0051AE  0E02               	movlw	2
  3649  0051B0  ECA3  F024         	call	_drawSNquest
  3650                           
  3651                           ;screenDrawers.h: 281: break;
  3652  0051B4  0012               	return	
  3653  0051B6                     l11723:
  3654                           
  3655                           ;screenDrawers.h: 283: drawSNquest(3);
  3656  0051B6  0E03               	movlw	3
  3657  0051B8  ECA3  F024         	call	_drawSNquest
  3658                           
  3659                           ;screenDrawers.h: 284: break;
  3660  0051BC  0012               	return	
  3661  0051BE                     l11725:
  3662                           
  3663                           ;screenDrawers.h: 286: drawCalibProc();
  3664  0051BE  ECCC  F031         	call	_drawCalibProc	;wreg free
  3665                           
  3666                           ;screenDrawers.h: 287: break;
  3667  0051C2  0012               	return	
  3668  0051C4                     l11727:
  3669                           
  3670                           ;screenDrawers.h: 289: drawAutoCalibRM();
  3671  0051C4  ECB8  F037         	call	_drawAutoCalibRM	;wreg free
  3672                           
  3673                           ;screenDrawers.h: 290: break;
  3674  0051C8  0012               	return	
  3675  0051CA                     l11729:
  3676                           
  3677                           ;screenDrawers.h: 292: drawCutError();
  3678  0051CA  EC18  F038         	call	_drawCutError	;wreg free
  3679                           
  3680                           ;screenDrawers.h: 293: break;
  3681  0051CE  0012               	return	
  3682  0051D0                     l11731:
  3683                           
  3684                           ;screenDrawers.h: 295: drawReady2Cut();
  3685  0051D0  EC01  F038         	call	_drawReady2Cut	;wreg free
  3686                           
  3687                           ;screenDrawers.h: 296: break;
  3688  0051D4  0012               	return	
  3689  0051D6                     l11733:
  3690                           
  3691                           ;screenDrawers.h: 298: drawSNquest(4);
  3692  0051D6  0E04               	movlw	4
  3693  0051D8  ECA3  F024         	call	_drawSNquest
  3694                           
  3695                           ;screenDrawers.h: 300: }
  3696                           ;screenDrawers.h: 301: }
  3697                           
  3698                           ;screenDrawers.h: 299: break;
  3699  0051DC  0012               	return	
  3700  0051DE                     l11737:
  3701  0051DE  0101               	movlb	1	; () banked
  3702  0051E0  51BD               	movf	_actualScreen& (0+255),w,b
  3703                           
  3704                           ; Switch size 1, requested type "space"
  3705                           ; Number of cases is 16, Range of values is 0 to 15
  3706                           ; switch strategies available:
  3707                           ; Name         Instructions Cycles
  3708                           ; simple_byte           49    25 (average)
  3709                           ;	Chosen strategy is simple_byte
  3710  0051E2  0A00               	xorlw	0	; case 0
  3711  0051E4  B4D8               	btfsc	status,2,c
  3712  0051E6  D7C2               	goto	l11703
  3713  0051E8  0A01               	xorlw	1	; case 1
  3714  0051EA  B4D8               	btfsc	status,2,c
  3715  0051EC  D7C3               	goto	l11705
  3716  0051EE  0A03               	xorlw	3	; case 2
  3717  0051F0  B4D8               	btfsc	status,2,c
  3718  0051F2  D7D5               	goto	l11717
  3719  0051F4  0A01               	xorlw	1	; case 3
  3720  0051F6  B4D8               	btfsc	status,2,c
  3721  0051F8  D7D6               	goto	l11719
  3722  0051FA  0A07               	xorlw	7	; case 4
  3723  0051FC  B4D8               	btfsc	status,2,c
  3724  0051FE  D7C0               	goto	l11709
  3725  005200  0A01               	xorlw	1	; case 5
  3726  005202  B4D8               	btfsc	status,2,c
  3727  005204  D7C9               	goto	l11715
  3728  005206  0A03               	xorlw	3	; case 6
  3729  005208  B4D8               	btfsc	status,2,c
  3730  00520A  D7D9               	goto	l11725
  3731  00520C  0A01               	xorlw	1	; case 7
  3732  00520E  B4D8               	btfsc	status,2,c
  3733  005210  D7B4               	goto	l11707
  3734  005212  0A0F               	xorlw	15	; case 8
  3735  005214  B4D8               	btfsc	status,2,c
  3736  005216  D7B8               	goto	l11711
  3737  005218  0A01               	xorlw	1	; case 9
  3738  00521A  B4D8               	btfsc	status,2,c
  3739  00521C  D7B9               	goto	l11713
  3740  00521E  0A03               	xorlw	3	; case 10
  3741  005220  B4D8               	btfsc	status,2,c
  3742  005222  D7C5               	goto	l11721
  3743  005224  0A01               	xorlw	1	; case 11
  3744  005226  B4D8               	btfsc	status,2,c
  3745  005228  D7C6               	goto	l11723
  3746  00522A  0A07               	xorlw	7	; case 12
  3747  00522C  B4D8               	btfsc	status,2,c
  3748  00522E  D7CA               	goto	l11727
  3749  005230  0A01               	xorlw	1	; case 13
  3750  005232  B4D8               	btfsc	status,2,c
  3751  005234  D7CA               	goto	l11729
  3752  005236  0A03               	xorlw	3	; case 14
  3753  005238  B4D8               	btfsc	status,2,c
  3754  00523A  D7CA               	goto	l11731
  3755  00523C  0A01               	xorlw	1	; case 15
  3756  00523E  A4D8               	btfss	status,2,c
  3757  005240  0012               	return	
  3758  005242  D7C9               	goto	l11733
  3759  005244                     __end_of_drawScreen:
  3760                           	opt stack 0
  3761                           tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           prodh	equ	0xFF4
  3766                           prodl	equ	0xFF3
  3767                           intcon	equ	0xFF2
  3768                           postinc0	equ	0xFEE
  3769                           wreg	equ	0xFE8
  3770                           postdec1	equ	0xFE5
  3771                           fsr1l	equ	0xFE1
  3772                           indf2	equ	0xFDF
  3773                           fsr2h	equ	0xFDA
  3774                           fsr2l	equ	0xFD9
  3775                           status	equ	0xFD8
  3776                           
  3777 ;; *************** function _drawSNquest *****************
  3778 ;; Defined at:
  3779 ;;		line 198 in file "source/screenDrawers.h"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;  tq              1    wreg     unsigned char 
  3782 ;; Auto vars:     Size  Location     Type
  3783 ;;  tq              1  118[BANK1 ] unsigned char 
  3784 ;;  i               2  116[BANK1 ] int 
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  1    wreg      void 
  3787 ;; Registers used:
  3788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3794 ;;      Params:         0       0       0       0       0       0       0
  3795 ;;      Locals:         0       0       3       0       0       0       0
  3796 ;;      Temps:          0       0       0       0       0       0       0
  3797 ;;      Totals:         0       0       3       0       0       0       0
  3798 ;;Total ram usage:        3 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:   19
  3801 ;; This function calls:
  3802 ;;		_lcd_gotoxy
  3803 ;;		_printf
  3804 ;; This function is called by:
  3805 ;;		_drawScreen
  3806 ;; This function uses a non-reentrant model
  3807 ;;
  3808                           
  3809                           	psect	text11
  3810  004946                     __ptext11:
  3811                           	opt stack 0
  3812  004946                     _drawSNquest:
  3813                           	opt stack 10
  3814                           
  3815                           ;incstack = 0
  3816                           ;drawSNquest@tq stored from wreg
  3817  004946  0101               	movlb	1	; () banked
  3818  004948  6F76               	movwf	drawSNquest@tq& (0+255),b
  3819                           
  3820                           ;screenDrawers.h: 199: int i;
  3821                           ;screenDrawers.h: 200: for (i = 0; i < 2; i++)
  3822  00494A  0E00               	movlw	0
  3823  00494C  0101               	movlb	1	; () banked
  3824  00494E  6F75               	movwf	(drawSNquest@i+1)& (0+255),b
  3825  004950  0E00               	movlw	0
  3826  004952  6F74               	movwf	drawSNquest@i& (0+255),b
  3827  004954                     l11059:
  3828                           
  3829                           ; BSR set to: 1
  3830  004954  0101               	movlb	1	; () banked
  3831  004956  BF75               	btfsc	(drawSNquest@i+1)& (0+255),7,b
  3832  004958  D008               	goto	l11063
  3833  00495A  0101               	movlb	1	; () banked
  3834  00495C  5175               	movf	(drawSNquest@i+1)& (0+255),w,b
  3835  00495E  E113               	bnz	l11069
  3836  004960  0E02               	movlw	2
  3837  004962  0101               	movlb	1	; () banked
  3838  004964  5D74               	subwf	drawSNquest@i& (0+255),w,b
  3839  004966  B0D8               	btfsc	status,0,c
  3840  004968  D00E               	goto	l11069
  3841  00496A                     l11063:
  3842                           
  3843                           ; BSR set to: 1
  3844                           ;screenDrawers.h: 201: questSN[i] = ' ';
  3845  00496A  0EB4               	movlw	low _questSN
  3846  00496C  0101               	movlb	1	; () banked
  3847  00496E  2574               	addwf	drawSNquest@i& (0+255),w,b
  3848  004970  6ED9               	movwf	fsr2l,c
  3849  004972  0E01               	movlw	high _questSN
  3850  004974  0101               	movlb	1	; () banked
  3851  004976  2175               	addwfc	(drawSNquest@i+1)& (0+255),w,b
  3852  004978  6EDA               	movwf	fsr2h,c
  3853  00497A  0E20               	movlw	32
  3854  00497C  6EDF               	movwf	indf2,c
  3855                           
  3856                           ; BSR set to: 1
  3857  00497E  0101               	movlb	1	; () banked
  3858  004980  4B74               	infsnz	drawSNquest@i& (0+255),f,b
  3859  004982  2B75               	incf	(drawSNquest@i+1)& (0+255),f,b
  3860  004984  D7E7               	goto	l11059
  3861  004986                     l11069:
  3862                           
  3863                           ; BSR set to: 1
  3864                           ;screenDrawers.h: 202: questSN[selSN] = flech;
  3865  004986  0101               	movlb	1	; () banked
  3866  004988  51BA               	movf	_selSN& (0+255),w,b
  3867  00498A  0D01               	mullw	1
  3868  00498C  0EB4               	movlw	low _questSN
  3869  00498E  24F3               	addwf	prodl,w,c
  3870  004990  6ED9               	movwf	fsr2l,c
  3871  004992  0E01               	movlw	high _questSN
  3872  004994  20F4               	addwfc	prodh,w,c
  3873  004996  6EDA               	movwf	fsr2h,c
  3874  004998  C19B  FFDF         	movff	_flech,indf2
  3875                           
  3876                           ; BSR set to: 1
  3877                           ;screenDrawers.h: 203: lcd_gotoxy(1, 1);
  3878  00499C  0E01               	movlw	1
  3879  00499E  0101               	movlb	1	; () banked
  3880  0049A0  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  3881  0049A2  0E01               	movlw	1
  3882  0049A4  ECD1  F037         	call	_lcd_gotoxy
  3883                           
  3884                           ;screenDrawers.h: 204: if (tq == 0)
  3885  0049A8  0101               	movlb	1	; () banked
  3886  0049AA  5176               	movf	drawSNquest@tq& (0+255),w,b
  3887  0049AC  0101               	movlb	1	; () banked
  3888  0049AE  A4D8               	btfss	status,2,c
  3889  0049B0  D009               	goto	l11077
  3890                           
  3891                           ; BSR set to: 1
  3892                           ;screenDrawers.h: 205: printf("Iniciar Proceso?\n");
  3893  0049B2  0E88               	movlw	low STR_26
  3894  0049B4  0101               	movlb	1	; () banked
  3895  0049B6  6F3F               	movwf	printf@f& (0+255),b
  3896  0049B8  0E7E               	movlw	high STR_26
  3897  0049BA  0101               	movlb	1	; () banked
  3898  0049BC  6F40               	movwf	(printf@f+1)& (0+255),b
  3899  0049BE  EC61  F000         	call	_printf	;wreg free
  3900  0049C2  D036               	goto	l420
  3901  0049C4                     l11077:
  3902                           
  3903                           ;screenDrawers.h: 206: else if(tq == 1)
  3904  0049C4  0101               	movlb	1	; () banked
  3905  0049C6  0576               	decf	drawSNquest@tq& (0+255),w,b
  3906  0049C8  A4D8               	btfss	status,2,c
  3907  0049CA  D009               	goto	l11081
  3908                           
  3909                           ; BSR set to: 1
  3910                           ;screenDrawers.h: 207: printf("Detener Proceso?\n");
  3911  0049CC  0E9A               	movlw	low STR_27
  3912  0049CE  0101               	movlb	1	; () banked
  3913  0049D0  6F3F               	movwf	printf@f& (0+255),b
  3914  0049D2  0E7E               	movlw	high STR_27
  3915  0049D4  0101               	movlb	1	; () banked
  3916  0049D6  6F40               	movwf	(printf@f+1)& (0+255),b
  3917  0049D8  EC61  F000         	call	_printf	;wreg free
  3918  0049DC  D029               	goto	l420
  3919  0049DE                     l11081:
  3920                           
  3921                           ;screenDrawers.h: 208: else if(tq == 2)
  3922  0049DE  0E02               	movlw	2
  3923  0049E0  0101               	movlb	1	; () banked
  3924  0049E2  1976               	xorwf	drawSNquest@tq& (0+255),w,b
  3925  0049E4  A4D8               	btfss	status,2,c
  3926  0049E6  D009               	goto	l11085
  3927                           
  3928                           ; BSR set to: 1
  3929                           ;screenDrawers.h: 209: printf("Guardar Cambio? \n");
  3930  0049E8  0E40               	movlw	low STR_28
  3931  0049EA  0101               	movlb	1	; () banked
  3932  0049EC  6F3F               	movwf	printf@f& (0+255),b
  3933  0049EE  0E7E               	movlw	high STR_28
  3934  0049F0  0101               	movlb	1	; () banked
  3935  0049F2  6F40               	movwf	(printf@f+1)& (0+255),b
  3936  0049F4  EC61  F000         	call	_printf	;wreg free
  3937  0049F8  D01B               	goto	l420
  3938  0049FA                     l11085:
  3939                           
  3940                           ;screenDrawers.h: 210: else if(tq == 3)
  3941  0049FA  0E03               	movlw	3
  3942  0049FC  0101               	movlb	1	; () banked
  3943  0049FE  1976               	xorwf	drawSNquest@tq& (0+255),w,b
  3944  004A00  A4D8               	btfss	status,2,c
  3945  004A02  D009               	goto	l11089
  3946                           
  3947                           ; BSR set to: 1
  3948                           ;screenDrawers.h: 211: printf("Init AutoCalib? \n");
  3949  004A04  0E2E               	movlw	low STR_29
  3950  004A06  0101               	movlb	1	; () banked
  3951  004A08  6F3F               	movwf	printf@f& (0+255),b
  3952  004A0A  0E7E               	movlw	high STR_29
  3953  004A0C  0101               	movlb	1	; () banked
  3954  004A0E  6F40               	movwf	(printf@f+1)& (0+255),b
  3955  004A10  EC61  F000         	call	_printf	;wreg free
  3956  004A14  D00D               	goto	l420
  3957  004A16                     l11089:
  3958                           
  3959                           ;screenDrawers.h: 212: else if(tq == 4)
  3960  004A16  0E04               	movlw	4
  3961  004A18  0101               	movlb	1	; () banked
  3962  004A1A  1976               	xorwf	drawSNquest@tq& (0+255),w,b
  3963  004A1C  A4D8               	btfss	status,2,c
  3964  004A1E  D008               	goto	l420
  3965                           
  3966                           ; BSR set to: 1
  3967                           ;screenDrawers.h: 213: printf("Stop AutoCalib? \n");
  3968  004A20  0E1C               	movlw	low STR_30
  3969  004A22  0101               	movlb	1	; () banked
  3970  004A24  6F3F               	movwf	printf@f& (0+255),b
  3971  004A26  0E7E               	movlw	high STR_30
  3972  004A28  0101               	movlb	1	; () banked
  3973  004A2A  6F40               	movwf	(printf@f+1)& (0+255),b
  3974  004A2C  EC61  F000         	call	_printf	;wreg free
  3975  004A30                     l420:
  3976                           
  3977                           ;screenDrawers.h: 214: printf("   %cSI    %cNO   ", questSN[0], questSN[1]);
  3978  004A30  0E8B               	movlw	low STR_31
  3979  004A32  0101               	movlb	1	; () banked
  3980  004A34  6F3F               	movwf	printf@f& (0+255),b
  3981  004A36  0E7D               	movlw	high STR_31
  3982  004A38  0101               	movlb	1	; () banked
  3983  004A3A  6F40               	movwf	(printf@f+1)& (0+255),b
  3984  004A3C  C1B4  F141         	movff	_questSN,?_printf+2
  3985  004A40  0101               	movlb	1	; () banked
  3986  004A42  6B42               	clrf	(?_printf+3)& (0+255),b
  3987  004A44  C1B5  F143         	movff	_questSN+1,?_printf+4
  3988  004A48  0101               	movlb	1	; () banked
  3989  004A4A  6B44               	clrf	(?_printf+5)& (0+255),b
  3990  004A4C  EC61  F000         	call	_printf	;wreg free
  3991  004A50  0012               	return		;funcret
  3992  004A52                     __end_of_drawSNquest:
  3993                           	opt stack 0
  3994                           tblptru	equ	0xFF8
  3995                           tblptrh	equ	0xFF7
  3996                           tblptrl	equ	0xFF6
  3997                           tablat	equ	0xFF5
  3998                           prodh	equ	0xFF4
  3999                           prodl	equ	0xFF3
  4000                           intcon	equ	0xFF2
  4001                           postinc0	equ	0xFEE
  4002                           wreg	equ	0xFE8
  4003                           postdec1	equ	0xFE5
  4004                           fsr1l	equ	0xFE1
  4005                           indf2	equ	0xFDF
  4006                           fsr2h	equ	0xFDA
  4007                           fsr2l	equ	0xFD9
  4008                           status	equ	0xFD8
  4009                           
  4010 ;; *************** function _drawReady2Cut *****************
  4011 ;; Defined at:
  4012 ;;		line 230 in file "source/screenDrawers.h"
  4013 ;; Parameters:    Size  Location     Type
  4014 ;;		None
  4015 ;; Auto vars:     Size  Location     Type
  4016 ;;		None
  4017 ;; Return value:  Size  Location     Type
  4018 ;;                  1    wreg      void 
  4019 ;; Registers used:
  4020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4021 ;; Tracked objects:
  4022 ;;		On entry : 0/0
  4023 ;;		On exit  : 0/0
  4024 ;;		Unchanged: 0/0
  4025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4026 ;;      Params:         0       0       0       0       0       0       0
  4027 ;;      Locals:         0       0       0       0       0       0       0
  4028 ;;      Temps:          0       0       0       0       0       0       0
  4029 ;;      Totals:         0       0       0       0       0       0       0
  4030 ;;Total ram usage:        0 bytes
  4031 ;; Hardware stack levels used:    1
  4032 ;; Hardware stack levels required when called:   19
  4033 ;; This function calls:
  4034 ;;		_lcd_gotoxy
  4035 ;;		_printf
  4036 ;; This function is called by:
  4037 ;;		_drawScreen
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           	psect	text12
  4042  007002                     __ptext12:
  4043                           	opt stack 0
  4044  007002                     _drawReady2Cut:
  4045                           	opt stack 10
  4046                           
  4047                           ;screenDrawers.h: 231: lcd_gotoxy(1, 1);
  4048                           
  4049                           ;incstack = 0
  4050  007002  0E01               	movlw	1
  4051  007004  0101               	movlb	1	; () banked
  4052  007006  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4053  007008  0E01               	movlw	1
  4054  00700A  ECD1  F037         	call	_lcd_gotoxy
  4055                           
  4056                           ;screenDrawers.h: 232: printf("   Enter para:  \n");
  4057  00700E  0EE6               	movlw	low STR_36
  4058  007010  0101               	movlb	1	; () banked
  4059  007012  6F3F               	movwf	printf@f& (0+255),b
  4060  007014  0E7D               	movlw	high STR_36
  4061  007016  0101               	movlb	1	; () banked
  4062  007018  6F40               	movwf	(printf@f+1)& (0+255),b
  4063  00701A  EC61  F000         	call	_printf	;wreg free
  4064                           
  4065                           ;screenDrawers.h: 233: printf("Empezar a cortar");
  4066  00701E  0ED7               	movlw	low STR_37
  4067  007020  0101               	movlb	1	; () banked
  4068  007022  6F3F               	movwf	printf@f& (0+255),b
  4069  007024  0E7F               	movlw	high STR_37
  4070  007026  0101               	movlb	1	; () banked
  4071  007028  6F40               	movwf	(printf@f+1)& (0+255),b
  4072  00702A  EC61  F000         	call	_printf	;wreg free
  4073  00702E  0012               	return		;funcret
  4074  007030                     __end_of_drawReady2Cut:
  4075                           	opt stack 0
  4076                           tblptru	equ	0xFF8
  4077                           tblptrh	equ	0xFF7
  4078                           tblptrl	equ	0xFF6
  4079                           tablat	equ	0xFF5
  4080                           prodh	equ	0xFF4
  4081                           prodl	equ	0xFF3
  4082                           intcon	equ	0xFF2
  4083                           postinc0	equ	0xFEE
  4084                           wreg	equ	0xFE8
  4085                           postdec1	equ	0xFE5
  4086                           fsr1l	equ	0xFE1
  4087                           indf2	equ	0xFDF
  4088                           fsr2h	equ	0xFDA
  4089                           fsr2l	equ	0xFD9
  4090                           status	equ	0xFD8
  4091                           
  4092 ;; *************** function _drawPassWord *****************
  4093 ;; Defined at:
  4094 ;;		line 166 in file "source/screenDrawers.h"
  4095 ;; Parameters:    Size  Location     Type
  4096 ;;		None
  4097 ;; Auto vars:     Size  Location     Type
  4098 ;;  i               2  116[BANK1 ] int 
  4099 ;; Return value:  Size  Location     Type
  4100 ;;                  1    wreg      void 
  4101 ;; Registers used:
  4102 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4103 ;; Tracked objects:
  4104 ;;		On entry : 0/0
  4105 ;;		On exit  : 0/0
  4106 ;;		Unchanged: 0/0
  4107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4108 ;;      Params:         0       0       0       0       0       0       0
  4109 ;;      Locals:         0       0       2       0       0       0       0
  4110 ;;      Temps:          0       0       0       0       0       0       0
  4111 ;;      Totals:         0       0       2       0       0       0       0
  4112 ;;Total ram usage:        2 bytes
  4113 ;; Hardware stack levels used:    1
  4114 ;; Hardware stack levels required when called:   20
  4115 ;; This function calls:
  4116 ;;		_drawPass1Lin
  4117 ;;		_printf
  4118 ;; This function is called by:
  4119 ;;		_drawScreen
  4120 ;; This function uses a non-reentrant model
  4121 ;;
  4122                           
  4123                           	psect	text13
  4124  00507E                     __ptext13:
  4125                           	opt stack 0
  4126  00507E                     _drawPassWord:
  4127                           	opt stack 9
  4128                           
  4129                           ;screenDrawers.h: 167: if (!fd) {
  4130                           
  4131                           ;incstack = 0
  4132  00507E  0101               	movlb	1	; () banked
  4133  005080  51B9               	movf	_fd& (0+255),w,b
  4134  005082  A4D8               	btfss	status,2,c
  4135  005084  D012               	goto	l403
  4136                           
  4137                           ; BSR set to: 1
  4138                           ;screenDrawers.h: 168: passSection = 0;
  4139  005086  0E00               	movlw	0
  4140  005088  0101               	movlb	1	; () banked
  4141  00508A  6FBB               	movwf	_passSection& (0+255),b
  4142                           
  4143                           ;screenDrawers.h: 169: introducido[0] = 0;
  4144  00508C  0E00               	movlw	0
  4145  00508E  0101               	movlb	1	; () banked
  4146  005090  6FAD               	movwf	_introducido& (0+255),b
  4147                           
  4148                           ;screenDrawers.h: 170: introducido[1] = 0;
  4149  005092  0E00               	movlw	0
  4150  005094  0101               	movlb	1	; () banked
  4151  005096  6FAE               	movwf	(_introducido+1)& (0+255),b
  4152                           
  4153                           ;screenDrawers.h: 171: introducido[2] = 0;
  4154  005098  0E00               	movlw	0
  4155  00509A  0101               	movlb	1	; () banked
  4156  00509C  6FAF               	movwf	(_introducido+2)& (0+255),b
  4157                           
  4158                           ;screenDrawers.h: 172: introducido[3] = 0;
  4159  00509E  0E00               	movlw	0
  4160  0050A0  0101               	movlb	1	; () banked
  4161  0050A2  6FB0               	movwf	(_introducido+3)& (0+255),b
  4162                           
  4163                           ;screenDrawers.h: 173: fd = 1;
  4164  0050A4  0E01               	movlw	1
  4165  0050A6  0101               	movlb	1	; () banked
  4166  0050A8  6FB9               	movwf	_fd& (0+255),b
  4167  0050AA                     l403:
  4168                           
  4169                           ; BSR set to: 1
  4170                           ;screenDrawers.h: 174: }
  4171                           ;screenDrawers.h: 175: int i;
  4172                           ;screenDrawers.h: 176: for (i = 0; i < 4; i++)
  4173  0050AA  0E00               	movlw	0
  4174  0050AC  0101               	movlb	1	; () banked
  4175  0050AE  6F75               	movwf	(drawPassWord@i+1)& (0+255),b
  4176  0050B0  0E00               	movlw	0
  4177  0050B2  6F74               	movwf	drawPassWord@i& (0+255),b
  4178  0050B4                     l11029:
  4179                           
  4180                           ; BSR set to: 1
  4181  0050B4  0101               	movlb	1	; () banked
  4182  0050B6  BF75               	btfsc	(drawPassWord@i+1)& (0+255),7,b
  4183  0050B8  D008               	goto	l11033
  4184  0050BA  0101               	movlb	1	; () banked
  4185  0050BC  5175               	movf	(drawPassWord@i+1)& (0+255),w,b
  4186  0050BE  E113               	bnz	l11039
  4187  0050C0  0E04               	movlw	4
  4188  0050C2  0101               	movlb	1	; () banked
  4189  0050C4  5D74               	subwf	drawPassWord@i& (0+255),w,b
  4190  0050C6  B0D8               	btfsc	status,0,c
  4191  0050C8  D00E               	goto	l11039
  4192  0050CA                     l11033:
  4193                           
  4194                           ; BSR set to: 1
  4195                           ;screenDrawers.h: 177: passChar[i] = ' ';
  4196  0050CA  0EA9               	movlw	low _passChar
  4197  0050CC  0101               	movlb	1	; () banked
  4198  0050CE  2574               	addwf	drawPassWord@i& (0+255),w,b
  4199  0050D0  6ED9               	movwf	fsr2l,c
  4200  0050D2  0E01               	movlw	high _passChar
  4201  0050D4  0101               	movlb	1	; () banked
  4202  0050D6  2175               	addwfc	(drawPassWord@i+1)& (0+255),w,b
  4203  0050D8  6EDA               	movwf	fsr2h,c
  4204  0050DA  0E20               	movlw	32
  4205  0050DC  6EDF               	movwf	indf2,c
  4206                           
  4207                           ; BSR set to: 1
  4208  0050DE  0101               	movlb	1	; () banked
  4209  0050E0  4B74               	infsnz	drawPassWord@i& (0+255),f,b
  4210  0050E2  2B75               	incf	(drawPassWord@i+1)& (0+255),f,b
  4211  0050E4  D7E7               	goto	l11029
  4212  0050E6                     l11039:
  4213                           
  4214                           ; BSR set to: 1
  4215                           ;screenDrawers.h: 178: passChar[passSection] = flech;
  4216  0050E6  0101               	movlb	1	; () banked
  4217  0050E8  51BB               	movf	_passSection& (0+255),w,b
  4218  0050EA  0D01               	mullw	1
  4219  0050EC  0EA9               	movlw	low _passChar
  4220  0050EE  24F3               	addwf	prodl,w,c
  4221  0050F0  6ED9               	movwf	fsr2l,c
  4222  0050F2  0E01               	movlw	high _passChar
  4223  0050F4  20F4               	addwfc	prodh,w,c
  4224  0050F6  6EDA               	movwf	fsr2h,c
  4225  0050F8  C19B  FFDF         	movff	_flech,indf2
  4226                           
  4227                           ; BSR set to: 1
  4228                           ;screenDrawers.h: 179: drawPass1Lin();
  4229  0050FC  ECE3  F038         	call	_drawPass1Lin	;wreg free
  4230                           
  4231                           ;screenDrawers.h: 180: printf("    %c%u%c%u%c%u%c%u    ", passChar[0], introducido[0], p
      +                          assChar[1], introducido[1],
  4232                           ;screenDrawers.h: 181: passChar[2], introducido[2], passChar[3], introducido[3]);
  4233  005100  0E4B               	movlw	low STR_21
  4234  005102  0101               	movlb	1	; () banked
  4235  005104  6F3F               	movwf	printf@f& (0+255),b
  4236  005106  0E7D               	movlw	high STR_21
  4237  005108  0101               	movlb	1	; () banked
  4238  00510A  6F40               	movwf	(printf@f+1)& (0+255),b
  4239  00510C  C1A9  F141         	movff	_passChar,?_printf+2
  4240  005110  0101               	movlb	1	; () banked
  4241  005112  6B42               	clrf	(?_printf+3)& (0+255),b
  4242  005114  0101               	movlb	1	; () banked
  4243  005116  51AD               	movf	_introducido& (0+255),w,b
  4244  005118  0101               	movlb	1	; () banked
  4245  00511A  6F43               	movwf	(?_printf+4)& (0+255),b
  4246  00511C  6B44               	clrf	(?_printf+5)& (0+255),b
  4247  00511E  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  4248  005120  0744               	decf	(?_printf+5)& (0+255),f,b
  4249  005122  C1AA  F145         	movff	_passChar+1,?_printf+6
  4250  005126  0101               	movlb	1	; () banked
  4251  005128  6B46               	clrf	(?_printf+7)& (0+255),b
  4252  00512A  0101               	movlb	1	; () banked
  4253  00512C  51AE               	movf	(_introducido+1)& (0+255),w,b
  4254  00512E  0101               	movlb	1	; () banked
  4255  005130  6F47               	movwf	(?_printf+8)& (0+255),b
  4256  005132  6B48               	clrf	(?_printf+9)& (0+255),b
  4257  005134  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  4258  005136  0748               	decf	(?_printf+9)& (0+255),f,b
  4259  005138  C1AB  F149         	movff	_passChar+2,?_printf+10
  4260  00513C  0101               	movlb	1	; () banked
  4261  00513E  6B4A               	clrf	(?_printf+11)& (0+255),b
  4262  005140  0101               	movlb	1	; () banked
  4263  005142  51AF               	movf	(_introducido+2)& (0+255),w,b
  4264  005144  0101               	movlb	1	; () banked
  4265  005146  6F4B               	movwf	(?_printf+12)& (0+255),b
  4266  005148  6B4C               	clrf	(?_printf+13)& (0+255),b
  4267  00514A  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  4268  00514C  074C               	decf	(?_printf+13)& (0+255),f,b
  4269  00514E  C1AC  F14D         	movff	_passChar+3,?_printf+14
  4270  005152  0101               	movlb	1	; () banked
  4271  005154  6B4E               	clrf	(?_printf+15)& (0+255),b
  4272  005156  0101               	movlb	1	; () banked
  4273  005158  51B0               	movf	(_introducido+3)& (0+255),w,b
  4274  00515A  0101               	movlb	1	; () banked
  4275  00515C  6F4F               	movwf	(?_printf+16)& (0+255),b
  4276  00515E  6B50               	clrf	(?_printf+17)& (0+255),b
  4277  005160  BF4F               	btfsc	(?_printf+16)& (0+255),7,b
  4278  005162  0750               	decf	(?_printf+17)& (0+255),f,b
  4279  005164  EC61  F000         	call	_printf	;wreg free
  4280  005168  0012               	return		;funcret
  4281  00516A                     __end_of_drawPassWord:
  4282                           	opt stack 0
  4283                           tblptru	equ	0xFF8
  4284                           tblptrh	equ	0xFF7
  4285                           tblptrl	equ	0xFF6
  4286                           tablat	equ	0xFF5
  4287                           prodh	equ	0xFF4
  4288                           prodl	equ	0xFF3
  4289                           intcon	equ	0xFF2
  4290                           postinc0	equ	0xFEE
  4291                           wreg	equ	0xFE8
  4292                           postdec1	equ	0xFE5
  4293                           fsr1l	equ	0xFE1
  4294                           indf2	equ	0xFDF
  4295                           fsr2h	equ	0xFDA
  4296                           fsr2l	equ	0xFD9
  4297                           status	equ	0xFD8
  4298                           
  4299 ;; *************** function _drawMenu *****************
  4300 ;; Defined at:
  4301 ;;		line 91 in file "source/screenDrawers.h"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  adv             1    wreg     unsigned char 
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  adv             1  116[BANK1 ] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4315 ;;      Params:         0       0       0       0       0       0       0
  4316 ;;      Locals:         0       0       1       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0
  4318 ;;      Totals:         0       0       1       0       0       0       0
  4319 ;;Total ram usage:        1 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:   19
  4322 ;; This function calls:
  4323 ;;		_lcd_gotoxy
  4324 ;;		_lcd_putc
  4325 ;;		_printf
  4326 ;; This function is called by:
  4327 ;;		_drawScreen
  4328 ;; This function uses a non-reentrant model
  4329 ;;
  4330                           
  4331                           	psect	text14
  4332  002E96                     __ptext14:
  4333                           	opt stack 0
  4334  002E96                     _drawMenu:
  4335                           	opt stack 10
  4336                           
  4337                           ;incstack = 0
  4338                           ;drawMenu@adv stored from wreg
  4339  002E96  0101               	movlb	1	; () banked
  4340  002E98  6F74               	movwf	drawMenu@adv& (0+255),b
  4341                           
  4342                           ;screenDrawers.h: 92: switch (menuSection) {
  4343  002E9A  D0C9               	goto	l11003
  4344  002E9C                     l10949:
  4345                           
  4346                           ;screenDrawers.h: 94: lcd_gotoxy(1, 1);
  4347  002E9C  0E01               	movlw	1
  4348  002E9E  0101               	movlb	1	; () banked
  4349  002EA0  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4350  002EA2  0E01               	movlw	1
  4351  002EA4  ECD1  F037         	call	_lcd_gotoxy
  4352                           
  4353                           ;screenDrawers.h: 95: printf("Estado proceso: \n");
  4354  002EA8  0E0A               	movlw	low STR_7
  4355  002EAA  0101               	movlb	1	; () banked
  4356  002EAC  6F3F               	movwf	printf@f& (0+255),b
  4357  002EAE  0E7E               	movlw	high STR_7
  4358  002EB0  0101               	movlb	1	; () banked
  4359  002EB2  6F40               	movwf	(printf@f+1)& (0+255),b
  4360  002EB4  EC61  F000         	call	_printf	;wreg free
  4361                           
  4362                           ;screenDrawers.h: 96: if (adv)
  4363  002EB8  0101               	movlb	1	; () banked
  4364  002EBA  5174               	movf	drawMenu@adv& (0+255),w,b
  4365  002EBC  0101               	movlb	1	; () banked
  4366  002EBE  B4D8               	btfsc	status,2,c
  4367  002EC0  D004               	goto	l10957
  4368                           
  4369                           ; BSR set to: 1
  4370                           ;screenDrawers.h: 97: lcd_putc('A');
  4371  002EC2  0E41               	movlw	65
  4372  002EC4  ECD2  F032         	call	_lcd_putc
  4373  002EC8  D003               	goto	l375
  4374  002ECA                     l10957:
  4375                           
  4376                           ;screenDrawers.h: 98: else
  4377                           ;screenDrawers.h: 99: lcd_putc(' ');
  4378  002ECA  0E20               	movlw	32
  4379  002ECC  ECD2  F032         	call	_lcd_putc
  4380  002ED0                     l375:
  4381                           
  4382                           ;screenDrawers.h: 100: lcd_gotoxy(2, 2);
  4383  002ED0  0E02               	movlw	2
  4384  002ED2  0101               	movlb	1	; () banked
  4385  002ED4  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4386  002ED6  0E02               	movlw	2
  4387  002ED8  ECD1  F037         	call	_lcd_gotoxy
  4388                           
  4389                           ;screenDrawers.h: 101: if(processStarted)
  4390  002EDC  0100               	movlb	0	; () banked
  4391  002EDE  51C0               	movf	_processStarted& (0+255),w,b
  4392  002EE0  B4D8               	btfsc	status,2,c
  4393  002EE2  D011               	goto	l10963
  4394                           
  4395                           ; BSR set to: 0
  4396                           ;screenDrawers.h: 102: printf("   %d / %d       ", processState, numCortes);
  4397  002EE4  0ED0               	movlw	low STR_8
  4398  002EE6  0101               	movlb	1	; () banked
  4399  002EE8  6F3F               	movwf	printf@f& (0+255),b
  4400  002EEA  0E7E               	movlw	high STR_8
  4401  002EEC  0101               	movlb	1	; () banked
  4402  002EEE  6F40               	movwf	(printf@f+1)& (0+255),b
  4403  002EF0  C0B2  F141         	movff	_processState,?_printf+2
  4404  002EF4  C0B3  F142         	movff	_processState+1,?_printf+3
  4405  002EF8  C0D2  F143         	movff	_numCortes,?_printf+4
  4406  002EFC  C0D3  F144         	movff	_numCortes+1,?_printf+5
  4407  002F00  EC61  F000         	call	_printf	;wreg free
  4408  002F04  0012               	return	
  4409  002F06                     l10963:
  4410                           
  4411                           ;screenDrawers.h: 103: else
  4412                           ;screenDrawers.h: 104: printf("    Detenido       ");
  4413  002F06  0E64               	movlw	low STR_9
  4414  002F08  0101               	movlb	1	; () banked
  4415  002F0A  6F3F               	movwf	printf@f& (0+255),b
  4416  002F0C  0E7D               	movlw	high STR_9
  4417  002F0E  0101               	movlb	1	; () banked
  4418  002F10  6F40               	movwf	(printf@f+1)& (0+255),b
  4419  002F12  EC61  F000         	call	_printf	;wreg free
  4420                           
  4421                           ;screenDrawers.h: 105: break;
  4422  002F16  0012               	return	
  4423  002F18                     l10965:
  4424                           
  4425                           ;screenDrawers.h: 107: lcd_gotoxy(1, 1);
  4426  002F18  0E01               	movlw	1
  4427  002F1A  0101               	movlb	1	; () banked
  4428  002F1C  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4429  002F1E  0E01               	movlw	1
  4430  002F20  ECD1  F037         	call	_lcd_gotoxy
  4431                           
  4432                           ;screenDrawers.h: 108: printf("Valor por Corte:\n");
  4433  002F24  0E52               	movlw	low STR_10
  4434  002F26  0101               	movlb	1	; () banked
  4435  002F28  6F3F               	movwf	printf@f& (0+255),b
  4436  002F2A  0E7E               	movlw	high STR_10
  4437  002F2C  0101               	movlb	1	; () banked
  4438  002F2E  6F40               	movwf	(printf@f+1)& (0+255),b
  4439  002F30  EC61  F000         	call	_printf	;wreg free
  4440                           
  4441                           ;screenDrawers.h: 109: if (adv)
  4442  002F34  0101               	movlb	1	; () banked
  4443  002F36  5174               	movf	drawMenu@adv& (0+255),w,b
  4444  002F38  0101               	movlb	1	; () banked
  4445  002F3A  B4D8               	btfsc	status,2,c
  4446  002F3C  D004               	goto	l10973
  4447                           
  4448                           ; BSR set to: 1
  4449                           ;screenDrawers.h: 110: lcd_putc('A');
  4450  002F3E  0E41               	movlw	65
  4451  002F40  ECD2  F032         	call	_lcd_putc
  4452  002F44  D003               	goto	l381
  4453  002F46                     l10973:
  4454                           
  4455                           ;screenDrawers.h: 111: else
  4456                           ;screenDrawers.h: 112: lcd_putc(' ');
  4457  002F46  0E20               	movlw	32
  4458  002F48  ECD2  F032         	call	_lcd_putc
  4459  002F4C                     l381:
  4460                           
  4461                           ;screenDrawers.h: 113: lcd_gotoxy(2, 2);
  4462  002F4C  0E02               	movlw	2
  4463  002F4E  0101               	movlb	1	; () banked
  4464  002F50  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4465  002F52  0E02               	movlw	2
  4466  002F54  ECD1  F037         	call	_lcd_gotoxy
  4467                           
  4468                           ;screenDrawers.h: 114: printf("   %3.3f kg      ", kgXcorte);
  4469  002F58  0EE2               	movlw	low STR_11
  4470  002F5A  0101               	movlb	1	; () banked
  4471  002F5C  6F3F               	movwf	printf@f& (0+255),b
  4472  002F5E  0E7E               	movlw	high STR_11
  4473  002F60  0101               	movlb	1	; () banked
  4474  002F62  6F40               	movwf	(printf@f+1)& (0+255),b
  4475  002F64  C198  F141         	movff	_kgXcorte,?_printf+2
  4476  002F68  C199  F142         	movff	_kgXcorte+1,?_printf+3
  4477  002F6C  C19A  F143         	movff	_kgXcorte+2,?_printf+4
  4478  002F70  EC61  F000         	call	_printf	;wreg free
  4479                           
  4480                           ;screenDrawers.h: 115: break;
  4481  002F74  0012               	return	
  4482  002F76                     l10977:
  4483                           
  4484                           ;screenDrawers.h: 117: lcd_gotoxy(1, 1);
  4485  002F76  0E01               	movlw	1
  4486  002F78  0101               	movlb	1	; () banked
  4487  002F7A  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4488  002F7C  0E01               	movlw	1
  4489  002F7E  ECD1  F037         	call	_lcd_gotoxy
  4490                           
  4491                           ;screenDrawers.h: 118: printf("Cantidad Cortes:\n");
  4492  002F82  0E76               	movlw	low STR_12
  4493  002F84  0101               	movlb	1	; () banked
  4494  002F86  6F3F               	movwf	printf@f& (0+255),b
  4495  002F88  0E7E               	movlw	high STR_12
  4496  002F8A  0101               	movlb	1	; () banked
  4497  002F8C  6F40               	movwf	(printf@f+1)& (0+255),b
  4498  002F8E  EC61  F000         	call	_printf	;wreg free
  4499                           
  4500                           ;screenDrawers.h: 119: if (adv)
  4501  002F92  0101               	movlb	1	; () banked
  4502  002F94  5174               	movf	drawMenu@adv& (0+255),w,b
  4503  002F96  0101               	movlb	1	; () banked
  4504  002F98  B4D8               	btfsc	status,2,c
  4505  002F9A  D004               	goto	l10985
  4506                           
  4507                           ; BSR set to: 1
  4508                           ;screenDrawers.h: 120: lcd_putc('A');
  4509  002F9C  0E41               	movlw	65
  4510  002F9E  ECD2  F032         	call	_lcd_putc
  4511  002FA2  D003               	goto	l384
  4512  002FA4                     l10985:
  4513                           
  4514                           ;screenDrawers.h: 121: else
  4515                           ;screenDrawers.h: 122: lcd_putc(' ');
  4516  002FA4  0E20               	movlw	32
  4517  002FA6  ECD2  F032         	call	_lcd_putc
  4518  002FAA                     l384:
  4519                           
  4520                           ;screenDrawers.h: 123: lcd_gotoxy(2, 2);
  4521  002FAA  0E02               	movlw	2
  4522  002FAC  0101               	movlb	1	; () banked
  4523  002FAE  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4524  002FB0  0E02               	movlw	2
  4525  002FB2  ECD1  F037         	call	_lcd_gotoxy
  4526                           
  4527                           ;screenDrawers.h: 124: printf("      %d         ", numCortes);
  4528  002FB6  0EBE               	movlw	low STR_13
  4529  002FB8  0101               	movlb	1	; () banked
  4530  002FBA  6F3F               	movwf	printf@f& (0+255),b
  4531  002FBC  0E7E               	movlw	high STR_13
  4532  002FBE  0101               	movlb	1	; () banked
  4533  002FC0  6F40               	movwf	(printf@f+1)& (0+255),b
  4534  002FC2  C0D2  F141         	movff	_numCortes,?_printf+2
  4535  002FC6  C0D3  F142         	movff	_numCortes+1,?_printf+3
  4536  002FCA  EC61  F000         	call	_printf	;wreg free
  4537                           
  4538                           ;screenDrawers.h: 125: break;
  4539  002FCE  0012               	return	
  4540  002FD0                     l10989:
  4541                           
  4542                           ;screenDrawers.h: 127: lcd_gotoxy(1, 1);
  4543  002FD0  0E01               	movlw	1
  4544  002FD2  0101               	movlb	1	; () banked
  4545  002FD4  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4546  002FD6  0E01               	movlw	1
  4547  002FD8  ECD1  F037         	call	_lcd_gotoxy
  4548                           
  4549                           ;screenDrawers.h: 128: printf("Velocidad Masa: \n");
  4550  002FDC  0EF8               	movlw	low STR_14
  4551  002FDE  0101               	movlb	1	; () banked
  4552  002FE0  6F3F               	movwf	printf@f& (0+255),b
  4553  002FE2  0E7D               	movlw	high STR_14
  4554  002FE4  0101               	movlb	1	; () banked
  4555  002FE6  6F40               	movwf	(printf@f+1)& (0+255),b
  4556  002FE8  EC61  F000         	call	_printf	;wreg free
  4557                           
  4558                           ;screenDrawers.h: 129: if (adv)
  4559  002FEC  0101               	movlb	1	; () banked
  4560  002FEE  5174               	movf	drawMenu@adv& (0+255),w,b
  4561  002FF0  0101               	movlb	1	; () banked
  4562  002FF2  B4D8               	btfsc	status,2,c
  4563  002FF4  D004               	goto	l10997
  4564                           
  4565                           ; BSR set to: 1
  4566                           ;screenDrawers.h: 130: lcd_putc('A');
  4567  002FF6  0E41               	movlw	65
  4568  002FF8  ECD2  F032         	call	_lcd_putc
  4569  002FFC  D003               	goto	l387
  4570  002FFE                     l10997:
  4571                           
  4572                           ;screenDrawers.h: 131: else
  4573                           ;screenDrawers.h: 132: lcd_putc(' ');
  4574  002FFE  0E20               	movlw	32
  4575  003000  ECD2  F032         	call	_lcd_putc
  4576  003004                     l387:
  4577                           
  4578                           ;screenDrawers.h: 133: lcd_gotoxy(2, 2);
  4579  003004  0E02               	movlw	2
  4580  003006  0101               	movlb	1	; () banked
  4581  003008  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4582  00300A  0E02               	movlw	2
  4583  00300C  ECD1  F037         	call	_lcd_gotoxy
  4584                           
  4585                           ;screenDrawers.h: 134: printf("  %3.3f kg/s      ", velocidadMasa);
  4586  003010  0E78               	movlw	low STR_15
  4587  003012  0101               	movlb	1	; () banked
  4588  003014  6F3F               	movwf	printf@f& (0+255),b
  4589  003016  0E7D               	movlw	high STR_15
  4590  003018  0101               	movlb	1	; () banked
  4591  00301A  6F40               	movwf	(printf@f+1)& (0+255),b
  4592  00301C  C18F  F141         	movff	_velocidadMasa,?_printf+2
  4593  003020  C190  F142         	movff	_velocidadMasa+1,?_printf+3
  4594  003024  C191  F143         	movff	_velocidadMasa+2,?_printf+4
  4595  003028  EC61  F000         	call	_printf	;wreg free
  4596                           
  4597                           ;screenDrawers.h: 136: }
  4598                           ;screenDrawers.h: 137: }
  4599                           
  4600                           ;screenDrawers.h: 135: break;
  4601  00302C  0012               	return	
  4602  00302E                     l11003:
  4603  00302E  0101               	movlb	1	; () banked
  4604  003030  51BC               	movf	_menuSection& (0+255),w,b
  4605                           
  4606                           ; Switch size 1, requested type "space"
  4607                           ; Number of cases is 4, Range of values is 0 to 3
  4608                           ; switch strategies available:
  4609                           ; Name         Instructions Cycles
  4610                           ; simple_byte           13     7 (average)
  4611                           ;	Chosen strategy is simple_byte
  4612  003032  0A00               	xorlw	0	; case 0
  4613  003034  B4D8               	btfsc	status,2,c
  4614  003036  D732               	goto	l10949
  4615  003038  0A01               	xorlw	1	; case 1
  4616  00303A  B4D8               	btfsc	status,2,c
  4617  00303C  D76D               	goto	l10965
  4618  00303E  0A03               	xorlw	3	; case 2
  4619  003040  B4D8               	btfsc	status,2,c
  4620  003042  D799               	goto	l10977
  4621  003044  0A01               	xorlw	1	; case 3
  4622  003046  A4D8               	btfss	status,2,c
  4623  003048  0012               	return	
  4624  00304A  D7C2               	goto	l10989
  4625  00304C                     __end_of_drawMenu:
  4626                           	opt stack 0
  4627                           tblptru	equ	0xFF8
  4628                           tblptrh	equ	0xFF7
  4629                           tblptrl	equ	0xFF6
  4630                           tablat	equ	0xFF5
  4631                           prodh	equ	0xFF4
  4632                           prodl	equ	0xFF3
  4633                           intcon	equ	0xFF2
  4634                           postinc0	equ	0xFEE
  4635                           wreg	equ	0xFE8
  4636                           postdec1	equ	0xFE5
  4637                           fsr1l	equ	0xFE1
  4638                           indf2	equ	0xFDF
  4639                           fsr2h	equ	0xFDA
  4640                           fsr2l	equ	0xFD9
  4641                           status	equ	0xFD8
  4642                           
  4643 ;; *************** function _drawCutError *****************
  4644 ;; Defined at:
  4645 ;;		line 224 in file "source/screenDrawers.h"
  4646 ;; Parameters:    Size  Location     Type
  4647 ;;		None
  4648 ;; Auto vars:     Size  Location     Type
  4649 ;;		None
  4650 ;; Return value:  Size  Location     Type
  4651 ;;                  1    wreg      void 
  4652 ;; Registers used:
  4653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4654 ;; Tracked objects:
  4655 ;;		On entry : 0/0
  4656 ;;		On exit  : 0/0
  4657 ;;		Unchanged: 0/0
  4658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4659 ;;      Params:         0       0       0       0       0       0       0
  4660 ;;      Locals:         0       0       0       0       0       0       0
  4661 ;;      Temps:          0       0       0       0       0       0       0
  4662 ;;      Totals:         0       0       0       0       0       0       0
  4663 ;;Total ram usage:        0 bytes
  4664 ;; Hardware stack levels used:    1
  4665 ;; Hardware stack levels required when called:   19
  4666 ;; This function calls:
  4667 ;;		_lcd_gotoxy
  4668 ;;		_printf
  4669 ;; This function is called by:
  4670 ;;		_drawScreen
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673                           
  4674                           	psect	text15
  4675  007030                     __ptext15:
  4676                           	opt stack 0
  4677  007030                     _drawCutError:
  4678                           	opt stack 10
  4679                           
  4680                           ;screenDrawers.h: 225: lcd_gotoxy(1, 1);
  4681                           
  4682                           ;incstack = 0
  4683  007030  0E01               	movlw	1
  4684  007032  0101               	movlb	1	; () banked
  4685  007034  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4686  007036  0E01               	movlw	1
  4687  007038  ECD1  F037         	call	_lcd_gotoxy
  4688                           
  4689                           ;screenDrawers.h: 226: printf("Guillotina      \n");
  4690  00703C  0EB0               	movlw	low STR_34
  4691  00703E  0101               	movlb	1	; () banked
  4692  007040  6F3F               	movwf	printf@f& (0+255),b
  4693  007042  0E7D               	movlw	high STR_34
  4694  007044  0101               	movlb	1	; () banked
  4695  007046  6F40               	movwf	(printf@f+1)& (0+255),b
  4696  007048  EC61  F000         	call	_printf	;wreg free
  4697                           
  4698                           ;screenDrawers.h: 227: printf("      Trancada  ");
  4699  00704C  0EB5               	movlw	low STR_35
  4700  00704E  0101               	movlb	1	; () banked
  4701  007050  6F3F               	movwf	printf@f& (0+255),b
  4702  007052  0E7F               	movlw	high STR_35
  4703  007054  0101               	movlb	1	; () banked
  4704  007056  6F40               	movwf	(printf@f+1)& (0+255),b
  4705  007058  EC61  F000         	call	_printf	;wreg free
  4706  00705C  0012               	return		;funcret
  4707  00705E                     __end_of_drawCutError:
  4708                           	opt stack 0
  4709                           tblptru	equ	0xFF8
  4710                           tblptrh	equ	0xFF7
  4711                           tblptrl	equ	0xFF6
  4712                           tablat	equ	0xFF5
  4713                           prodh	equ	0xFF4
  4714                           prodl	equ	0xFF3
  4715                           intcon	equ	0xFF2
  4716                           postinc0	equ	0xFEE
  4717                           wreg	equ	0xFE8
  4718                           postdec1	equ	0xFE5
  4719                           fsr1l	equ	0xFE1
  4720                           indf2	equ	0xFDF
  4721                           fsr2h	equ	0xFDA
  4722                           fsr2l	equ	0xFD9
  4723                           status	equ	0xFD8
  4724                           
  4725 ;; *************** function _drawChanVal *****************
  4726 ;; Defined at:
  4727 ;;		line 140 in file "source/screenDrawers.h"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;		None
  4730 ;; Auto vars:     Size  Location     Type
  4731 ;;		None
  4732 ;; Return value:  Size  Location     Type
  4733 ;;                  1    wreg      void 
  4734 ;; Registers used:
  4735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4736 ;; Tracked objects:
  4737 ;;		On entry : 0/0
  4738 ;;		On exit  : 0/0
  4739 ;;		Unchanged: 0/0
  4740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4741 ;;      Params:         0       0       0       0       0       0       0
  4742 ;;      Locals:         0       0       0       0       0       0       0
  4743 ;;      Temps:          0       0       0       0       0       0       0
  4744 ;;      Totals:         0       0       0       0       0       0       0
  4745 ;;Total ram usage:        0 bytes
  4746 ;; Hardware stack levels used:    1
  4747 ;; Hardware stack levels required when called:   20
  4748 ;; This function calls:
  4749 ;;		_drawValEditor
  4750 ;;		_lcd_gotoxy
  4751 ;;		_printf
  4752 ;; This function is called by:
  4753 ;;		_drawScreen
  4754 ;; This function uses a non-reentrant model
  4755 ;;
  4756                           
  4757                           	psect	text16
  4758  006424                     __ptext16:
  4759                           	opt stack 0
  4760  006424                     _drawChanVal:
  4761                           	opt stack 9
  4762                           
  4763                           ;screenDrawers.h: 141: switch (menuSection) {
  4764                           
  4765                           ;incstack = 0
  4766  006424  D034               	goto	l11023
  4767  006426                     l11007:
  4768                           
  4769                           ;screenDrawers.h: 145: lcd_gotoxy(1, 1);
  4770  006426  0E01               	movlw	1
  4771  006428  0101               	movlb	1	; () banked
  4772  00642A  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4773  00642C  0E01               	movlw	1
  4774  00642E  ECD1  F037         	call	_lcd_gotoxy
  4775                           
  4776                           ;screenDrawers.h: 146: printf("Valor por Corte:\n");
  4777  006432  0E52               	movlw	low STR_10
  4778  006434  0101               	movlb	1	; () banked
  4779  006436  6F3F               	movwf	printf@f& (0+255),b
  4780  006438  0E7E               	movlw	high STR_10
  4781  00643A  0101               	movlb	1	; () banked
  4782  00643C  6F40               	movwf	(printf@f+1)& (0+255),b
  4783  00643E  EC61  F000         	call	_printf	;wreg free
  4784                           
  4785                           ;screenDrawers.h: 147: drawValEditor();
  4786  006442  ECC9  F00F         	call	_drawValEditor	;wreg free
  4787                           
  4788                           ;screenDrawers.h: 148: printf("kg    ");
  4789  006446  0EF8               	movlw	low STR_17
  4790  006448  0101               	movlb	1	; () banked
  4791  00644A  6F3F               	movwf	printf@f& (0+255),b
  4792  00644C  0E7F               	movlw	high STR_17
  4793  00644E  0101               	movlb	1	; () banked
  4794  006450  6F40               	movwf	(printf@f+1)& (0+255),b
  4795  006452  EC61  F000         	call	_printf	;wreg free
  4796                           
  4797                           ;screenDrawers.h: 149: break;
  4798  006456  0012               	return	
  4799  006458                     l11015:
  4800                           
  4801                           ;screenDrawers.h: 151: lcd_gotoxy(1, 1);
  4802  006458  0E01               	movlw	1
  4803  00645A  0101               	movlb	1	; () banked
  4804  00645C  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4805  00645E  0E01               	movlw	1
  4806  006460  ECD1  F037         	call	_lcd_gotoxy
  4807                           
  4808                           ;screenDrawers.h: 152: printf("Cantidad Cortes:\n");
  4809  006464  0E76               	movlw	low STR_12
  4810  006466  0101               	movlb	1	; () banked
  4811  006468  6F3F               	movwf	printf@f& (0+255),b
  4812  00646A  0E7E               	movlw	high STR_12
  4813  00646C  0101               	movlb	1	; () banked
  4814  00646E  6F40               	movwf	(printf@f+1)& (0+255),b
  4815  006470  EC61  F000         	call	_printf	;wreg free
  4816                           
  4817                           ;screenDrawers.h: 153: printf("      %d       ", chanVals);
  4818  006474  0EE8               	movlw	low STR_19
  4819  006476  0101               	movlb	1	; () banked
  4820  006478  6F3F               	movwf	printf@f& (0+255),b
  4821  00647A  0E7F               	movlw	high STR_19
  4822  00647C  0101               	movlb	1	; () banked
  4823  00647E  6F40               	movwf	(printf@f+1)& (0+255),b
  4824  006480  C1B6  F141         	movff	_chanVals,?_printf+2
  4825  006484  C1B7  F142         	movff	_chanVals+1,?_printf+3
  4826  006488  EC61  F000         	call	_printf	;wreg free
  4827                           
  4828                           ;screenDrawers.h: 157: }
  4829                           ;screenDrawers.h: 158: }
  4830                           
  4831                           ;screenDrawers.h: 156: break;
  4832                           
  4833                           ;screenDrawers.h: 155: }case (3): {
  4834                           
  4835                           ;screenDrawers.h: 154: break;
  4836  00648C  0012               	return	
  4837  00648E                     l11023:
  4838  00648E  0101               	movlb	1	; () banked
  4839  006490  51BC               	movf	_menuSection& (0+255),w,b
  4840                           
  4841                           ; Switch size 1, requested type "space"
  4842                           ; Number of cases is 4, Range of values is 0 to 3
  4843                           ; switch strategies available:
  4844                           ; Name         Instructions Cycles
  4845                           ; simple_byte           13     7 (average)
  4846                           ;	Chosen strategy is simple_byte
  4847  006492  0A00               	xorlw	0	; case 0
  4848  006494  B4D8               	btfsc	status,2,c
  4849  006496  0012               	return	
  4850  006498  0A01               	xorlw	1	; case 1
  4851  00649A  B4D8               	btfsc	status,2,c
  4852  00649C  D7C4               	goto	l11007
  4853  00649E  0A03               	xorlw	3	; case 2
  4854  0064A0  B4D8               	btfsc	status,2,c
  4855  0064A2  D7DA               	goto	l11015
  4856  0064A4  0A01               	xorlw	1	; case 3
  4857  0064A6  0012               	return	
  4858  0064A8                     __end_of_drawChanVal:
  4859                           	opt stack 0
  4860                           tblptru	equ	0xFF8
  4861                           tblptrh	equ	0xFF7
  4862                           tblptrl	equ	0xFF6
  4863                           tablat	equ	0xFF5
  4864                           prodh	equ	0xFF4
  4865                           prodl	equ	0xFF3
  4866                           intcon	equ	0xFF2
  4867                           postinc0	equ	0xFEE
  4868                           wreg	equ	0xFE8
  4869                           postdec1	equ	0xFE5
  4870                           fsr1l	equ	0xFE1
  4871                           indf2	equ	0xFDF
  4872                           fsr2h	equ	0xFDA
  4873                           fsr2l	equ	0xFD9
  4874                           status	equ	0xFD8
  4875                           
  4876 ;; *************** function _drawCalibProc *****************
  4877 ;; Defined at:
  4878 ;;		line 236 in file "source/screenDrawers.h"
  4879 ;; Parameters:    Size  Location     Type
  4880 ;;		None
  4881 ;; Auto vars:     Size  Location     Type
  4882 ;;		None
  4883 ;; Return value:  Size  Location     Type
  4884 ;;                  1    wreg      void 
  4885 ;; Registers used:
  4886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4887 ;; Tracked objects:
  4888 ;;		On entry : 0/0
  4889 ;;		On exit  : 0/0
  4890 ;;		Unchanged: 0/0
  4891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4892 ;;      Params:         0       0       0       0       0       0       0
  4893 ;;      Locals:         0       0       0       0       0       0       0
  4894 ;;      Temps:          0       0       0       0       0       0       0
  4895 ;;      Totals:         0       0       0       0       0       0       0
  4896 ;;Total ram usage:        0 bytes
  4897 ;; Hardware stack levels used:    1
  4898 ;; Hardware stack levels required when called:   19
  4899 ;; This function calls:
  4900 ;;		_lcd_gotoxy
  4901 ;;		_printf
  4902 ;; This function is called by:
  4903 ;;		_drawScreen
  4904 ;; This function uses a non-reentrant model
  4905 ;;
  4906                           
  4907                           	psect	text17
  4908  006398                     __ptext17:
  4909                           	opt stack 0
  4910  006398                     _drawCalibProc:
  4911                           	opt stack 10
  4912                           
  4913                           ;screenDrawers.h: 237: lcd_gotoxy(1, 1);
  4914                           
  4915                           ;incstack = 0
  4916  006398  0E01               	movlw	1
  4917  00639A  0101               	movlb	1	; () banked
  4918  00639C  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4919  00639E  0E01               	movlw	1
  4920  0063A0  ECD1  F037         	call	_lcd_gotoxy
  4921                           
  4922                           ;screenDrawers.h: 238: if(calibLevel == 0) {
  4923  0063A4  0101               	movlb	1	; () banked
  4924  0063A6  51B8               	movf	_calibLevel& (0+255),w,b
  4925  0063A8  A4D8               	btfss	status,2,c
  4926  0063AA  D011               	goto	l11119
  4927                           
  4928                           ; BSR set to: 1
  4929                           ;screenDrawers.h: 239: printf("Autocalib con   \n");
  4930  0063AC  0ED4               	movlw	low STR_38
  4931  0063AE  0101               	movlb	1	; () banked
  4932  0063B0  6F3F               	movwf	printf@f& (0+255),b
  4933  0063B2  0E7D               	movlw	high STR_38
  4934  0063B4  0101               	movlb	1	; () banked
  4935  0063B6  6F40               	movwf	(printf@f+1)& (0+255),b
  4936  0063B8  EC61  F000         	call	_printf	;wreg free
  4937                           
  4938                           ;screenDrawers.h: 240: printf("Corte referencia");
  4939  0063BC  0EC6               	movlw	low STR_39
  4940  0063BE  0101               	movlb	1	; () banked
  4941  0063C0  6F3F               	movwf	printf@f& (0+255),b
  4942  0063C2  0E7F               	movlw	high STR_39
  4943  0063C4  0101               	movlb	1	; () banked
  4944  0063C6  6F40               	movwf	(printf@f+1)& (0+255),b
  4945  0063C8  EC61  F000         	call	_printf	;wreg free
  4946                           
  4947                           ;screenDrawers.h: 241: }else if(calibLevel == 1) {
  4948  0063CC  0012               	return	
  4949  0063CE                     l11119:
  4950  0063CE  0101               	movlb	1	; () banked
  4951  0063D0  05B8               	decf	_calibLevel& (0+255),w,b
  4952  0063D2  A4D8               	btfss	status,2,c
  4953  0063D4  D011               	goto	l11123
  4954                           
  4955                           ; BSR set to: 1
  4956                           ;screenDrawers.h: 242: printf("Autocalib usando\n");
  4957  0063D6  0EAC               	movlw	low STR_40
  4958  0063D8  0101               	movlb	1	; () banked
  4959  0063DA  6F3F               	movwf	printf@f& (0+255),b
  4960  0063DC  0E7E               	movlw	high STR_40
  4961  0063DE  0101               	movlb	1	; () banked
  4962  0063E0  6F40               	movwf	(printf@f+1)& (0+255),b
  4963  0063E2  EC61  F000         	call	_printf	;wreg free
  4964                           
  4965                           ;screenDrawers.h: 243: printf("     0.5 kg     ");
  4966  0063E6  0E60               	movlw	low STR_41
  4967  0063E8  0101               	movlb	1	; () banked
  4968  0063EA  6F3F               	movwf	printf@f& (0+255),b
  4969  0063EC  0E7F               	movlw	high STR_41
  4970  0063EE  0101               	movlb	1	; () banked
  4971  0063F0  6F40               	movwf	(printf@f+1)& (0+255),b
  4972  0063F2  EC61  F000         	call	_printf	;wreg free
  4973                           
  4974                           ;screenDrawers.h: 244: }else if(calibLevel == 2) {
  4975  0063F6  0012               	return	
  4976  0063F8                     l11123:
  4977  0063F8  0E02               	movlw	2
  4978  0063FA  0101               	movlb	1	; () banked
  4979  0063FC  19B8               	xorwf	_calibLevel& (0+255),w,b
  4980  0063FE  A4D8               	btfss	status,2,c
  4981  006400  0012               	return	
  4982                           
  4983                           ; BSR set to: 1
  4984                           ;screenDrawers.h: 245: printf("Autocalib usando\n");
  4985  006402  0EAC               	movlw	low STR_40
  4986  006404  0101               	movlb	1	; () banked
  4987  006406  6F3F               	movwf	printf@f& (0+255),b
  4988  006408  0E7E               	movlw	high STR_40
  4989  00640A  0101               	movlb	1	; () banked
  4990  00640C  6F40               	movwf	(printf@f+1)& (0+255),b
  4991  00640E  EC61  F000         	call	_printf	;wreg free
  4992                           
  4993                           ;screenDrawers.h: 246: printf("    0.25 kg     ");
  4994  006412  0E71               	movlw	low STR_43
  4995  006414  0101               	movlb	1	; () banked
  4996  006416  6F3F               	movwf	printf@f& (0+255),b
  4997  006418  0E7F               	movlw	high STR_43
  4998  00641A  0101               	movlb	1	; () banked
  4999  00641C  6F40               	movwf	(printf@f+1)& (0+255),b
  5000  00641E  EC61  F000         	call	_printf	;wreg free
  5001  006422  0012               	return	
  5002  006424                     __end_of_drawCalibProc:
  5003                           	opt stack 0
  5004                           tblptru	equ	0xFF8
  5005                           tblptrh	equ	0xFF7
  5006                           tblptrl	equ	0xFF6
  5007                           tablat	equ	0xFF5
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon	equ	0xFF2
  5011                           postinc0	equ	0xFEE
  5012                           wreg	equ	0xFE8
  5013                           postdec1	equ	0xFE5
  5014                           fsr1l	equ	0xFE1
  5015                           indf2	equ	0xFDF
  5016                           fsr2h	equ	0xFDA
  5017                           fsr2l	equ	0xFD9
  5018                           status	equ	0xFD8
  5019                           
  5020 ;; *************** function _drawBadPass *****************
  5021 ;; Defined at:
  5022 ;;		line 184 in file "source/screenDrawers.h"
  5023 ;; Parameters:    Size  Location     Type
  5024 ;;		None
  5025 ;; Auto vars:     Size  Location     Type
  5026 ;;		None
  5027 ;; Return value:  Size  Location     Type
  5028 ;;                  1    wreg      void 
  5029 ;; Registers used:
  5030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5031 ;; Tracked objects:
  5032 ;;		On entry : 0/0
  5033 ;;		On exit  : 0/0
  5034 ;;		Unchanged: 0/0
  5035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5036 ;;      Params:         0       0       0       0       0       0       0
  5037 ;;      Locals:         0       0       0       0       0       0       0
  5038 ;;      Temps:          0       0       0       0       0       0       0
  5039 ;;      Totals:         0       0       0       0       0       0       0
  5040 ;;Total ram usage:        0 bytes
  5041 ;; Hardware stack levels used:    1
  5042 ;; Hardware stack levels required when called:   20
  5043 ;; This function calls:
  5044 ;;		_drawPass1Lin
  5045 ;;		_printf
  5046 ;; This function is called by:
  5047 ;;		_drawScreen
  5048 ;; This function uses a non-reentrant model
  5049 ;;
  5050                           
  5051                           	psect	text18
  5052  007230                     __ptext18:
  5053                           	opt stack 0
  5054  007230                     _drawBadPass:
  5055                           	opt stack 9
  5056                           
  5057                           ;screenDrawers.h: 185: drawPass1Lin();
  5058                           
  5059                           ;incstack = 0
  5060  007230  ECE3  F038         	call	_drawPass1Lin	;wreg free
  5061                           
  5062                           ;screenDrawers.h: 186: printf("     Erronea    ");
  5063  007234  0E82               	movlw	low STR_22
  5064  007236  0101               	movlb	1	; () banked
  5065  007238  6F3F               	movwf	printf@f& (0+255),b
  5066  00723A  0E7F               	movlw	high STR_22
  5067  00723C  0101               	movlb	1	; () banked
  5068  00723E  6F40               	movwf	(printf@f+1)& (0+255),b
  5069  007240  EC61  F000         	call	_printf	;wreg free
  5070  007244  0012               	return		;funcret
  5071  007246                     __end_of_drawBadPass:
  5072                           	opt stack 0
  5073                           tblptru	equ	0xFF8
  5074                           tblptrh	equ	0xFF7
  5075                           tblptrl	equ	0xFF6
  5076                           tablat	equ	0xFF5
  5077                           prodh	equ	0xFF4
  5078                           prodl	equ	0xFF3
  5079                           intcon	equ	0xFF2
  5080                           postinc0	equ	0xFEE
  5081                           wreg	equ	0xFE8
  5082                           postdec1	equ	0xFE5
  5083                           fsr1l	equ	0xFE1
  5084                           indf2	equ	0xFDF
  5085                           fsr2h	equ	0xFDA
  5086                           fsr2l	equ	0xFD9
  5087                           status	equ	0xFD8
  5088                           
  5089 ;; *************** function _drawPass1Lin *****************
  5090 ;; Defined at:
  5091 ;;		line 161 in file "source/screenDrawers.h"
  5092 ;; Parameters:    Size  Location     Type
  5093 ;;		None
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;		None
  5096 ;; Return value:  Size  Location     Type
  5097 ;;                  1    wreg      void 
  5098 ;; Registers used:
  5099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5100 ;; Tracked objects:
  5101 ;;		On entry : 0/0
  5102 ;;		On exit  : 0/0
  5103 ;;		Unchanged: 0/0
  5104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5105 ;;      Params:         0       0       0       0       0       0       0
  5106 ;;      Locals:         0       0       0       0       0       0       0
  5107 ;;      Temps:          0       0       0       0       0       0       0
  5108 ;;      Totals:         0       0       0       0       0       0       0
  5109 ;;Total ram usage:        0 bytes
  5110 ;; Hardware stack levels used:    1
  5111 ;; Hardware stack levels required when called:   19
  5112 ;; This function calls:
  5113 ;;		_lcd_gotoxy
  5114 ;;		_printf
  5115 ;; This function is called by:
  5116 ;;		_drawPassWord
  5117 ;;		_drawBadPass
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text19
  5122  0071C6                     __ptext19:
  5123                           	opt stack 0
  5124  0071C6                     _drawPass1Lin:
  5125                           	opt stack 9
  5126                           
  5127                           ;screenDrawers.h: 162: lcd_gotoxy(1, 1);
  5128                           
  5129                           ;incstack = 0
  5130  0071C6  0E01               	movlw	1
  5131  0071C8  0101               	movlb	1	; () banked
  5132  0071CA  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5133  0071CC  0E01               	movlw	1
  5134  0071CE  ECD1  F037         	call	_lcd_gotoxy
  5135                           
  5136                           ;screenDrawers.h: 163: printf("Contrasena:     \n");
  5137  0071D2  0EC2               	movlw	low STR_20
  5138  0071D4  0101               	movlb	1	; () banked
  5139  0071D6  6F3F               	movwf	printf@f& (0+255),b
  5140  0071D8  0E7D               	movlw	high STR_20
  5141  0071DA  0101               	movlb	1	; () banked
  5142  0071DC  6F40               	movwf	(printf@f+1)& (0+255),b
  5143  0071DE  EC61  F000         	call	_printf	;wreg free
  5144  0071E2  0012               	return		;funcret
  5145  0071E4                     __end_of_drawPass1Lin:
  5146                           	opt stack 0
  5147                           tblptru	equ	0xFF8
  5148                           tblptrh	equ	0xFF7
  5149                           tblptrl	equ	0xFF6
  5150                           tablat	equ	0xFF5
  5151                           prodh	equ	0xFF4
  5152                           prodl	equ	0xFF3
  5153                           intcon	equ	0xFF2
  5154                           postinc0	equ	0xFEE
  5155                           wreg	equ	0xFE8
  5156                           postdec1	equ	0xFE5
  5157                           fsr1l	equ	0xFE1
  5158                           indf2	equ	0xFDF
  5159                           fsr2h	equ	0xFDA
  5160                           fsr2l	equ	0xFD9
  5161                           status	equ	0xFD8
  5162                           
  5163 ;; *************** function _drawAutoCalibRM *****************
  5164 ;; Defined at:
  5165 ;;		line 217 in file "source/screenDrawers.h"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;		None
  5168 ;; Auto vars:     Size  Location     Type
  5169 ;;		None
  5170 ;; Return value:  Size  Location     Type
  5171 ;;                  1    wreg      void 
  5172 ;; Registers used:
  5173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/0
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5179 ;;      Params:         0       0       0       0       0       0       0
  5180 ;;      Locals:         0       0       0       0       0       0       0
  5181 ;;      Temps:          0       0       0       0       0       0       0
  5182 ;;      Totals:         0       0       0       0       0       0       0
  5183 ;;Total ram usage:        0 bytes
  5184 ;; Hardware stack levels used:    1
  5185 ;; Hardware stack levels required when called:   20
  5186 ;; This function calls:
  5187 ;;		_drawValEditor
  5188 ;;		_lcd_gotoxy
  5189 ;;		_printf
  5190 ;; This function is called by:
  5191 ;;		_drawScreen
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           	psect	text20
  5196  006F70                     __ptext20:
  5197                           	opt stack 0
  5198  006F70                     _drawAutoCalibRM:
  5199                           	opt stack 9
  5200                           
  5201                           ;screenDrawers.h: 218: lcd_gotoxy(1, 1);
  5202                           
  5203                           ;incstack = 0
  5204  006F70  0E01               	movlw	1
  5205  006F72  0101               	movlb	1	; () banked
  5206  006F74  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5207  006F76  0E01               	movlw	1
  5208  006F78  ECD1  F037         	call	_lcd_gotoxy
  5209                           
  5210                           ;screenDrawers.h: 219: printf("Peso Real:      \n");
  5211  006F7C  0E9E               	movlw	low STR_32
  5212  006F7E  0101               	movlb	1	; () banked
  5213  006F80  6F3F               	movwf	printf@f& (0+255),b
  5214  006F82  0E7D               	movlw	high STR_32
  5215  006F84  0101               	movlb	1	; () banked
  5216  006F86  6F40               	movwf	(printf@f+1)& (0+255),b
  5217  006F88  EC61  F000         	call	_printf	;wreg free
  5218                           
  5219                           ;screenDrawers.h: 220: drawValEditor();
  5220  006F8C  ECC9  F00F         	call	_drawValEditor	;wreg free
  5221                           
  5222                           ;screenDrawers.h: 221: printf("kg    ");
  5223  006F90  0EF8               	movlw	low STR_17
  5224  006F92  0101               	movlb	1	; () banked
  5225  006F94  6F3F               	movwf	printf@f& (0+255),b
  5226  006F96  0E7F               	movlw	high STR_17
  5227  006F98  0101               	movlb	1	; () banked
  5228  006F9A  6F40               	movwf	(printf@f+1)& (0+255),b
  5229  006F9C  EC61  F000         	call	_printf	;wreg free
  5230  006FA0  0012               	return		;funcret
  5231  006FA2                     __end_of_drawAutoCalibRM:
  5232                           	opt stack 0
  5233                           tblptru	equ	0xFF8
  5234                           tblptrh	equ	0xFF7
  5235                           tblptrl	equ	0xFF6
  5236                           tablat	equ	0xFF5
  5237                           prodh	equ	0xFF4
  5238                           prodl	equ	0xFF3
  5239                           intcon	equ	0xFF2
  5240                           postinc0	equ	0xFEE
  5241                           wreg	equ	0xFE8
  5242                           postdec1	equ	0xFE5
  5243                           fsr1l	equ	0xFE1
  5244                           indf2	equ	0xFDF
  5245                           fsr2h	equ	0xFDA
  5246                           fsr2l	equ	0xFD9
  5247                           status	equ	0xFD8
  5248                           
  5249 ;; *************** function _drawValEditor *****************
  5250 ;; Defined at:
  5251 ;;		line 62 in file "source/screenDrawers.h"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;		None
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;		None
  5256 ;; Return value:  Size  Location     Type
  5257 ;;                  1    wreg      void 
  5258 ;; Registers used:
  5259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5265 ;;      Params:         0       0       0       0       0       0       0
  5266 ;;      Locals:         0       0       0       0       0       0       0
  5267 ;;      Temps:          0       0       0       0       0       0       0
  5268 ;;      Totals:         0       0       0       0       0       0       0
  5269 ;;Total ram usage:        0 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:   19
  5272 ;; This function calls:
  5273 ;;		_lcd_gotoxy
  5274 ;;		_printf
  5275 ;; This function is called by:
  5276 ;;		_drawChanVal
  5277 ;;		_drawAutoCalibRM
  5278 ;; This function uses a non-reentrant model
  5279 ;;
  5280                           
  5281                           	psect	text21
  5282  001F92                     __ptext21:
  5283                           	opt stack 0
  5284  001F92                     _drawValEditor:
  5285                           	opt stack 9
  5286                           
  5287                           ;screenDrawers.h: 63: if(chanValSection == 5) {
  5288                           
  5289                           ;incstack = 0
  5290  001F92  0E05               	movlw	5
  5291  001F94  0101               	movlb	1	; () banked
  5292  001F96  199C               	xorwf	_chanValSection& (0+255),w,b
  5293  001F98  A4D8               	btfss	status,2,c
  5294  001F9A  D037               	goto	l10773
  5295                           
  5296                           ; BSR set to: 1
  5297                           ;screenDrawers.h: 64: printf(" %u%u%u.%u%u%c%u ", chanValdig[0], chanValdig[1],
  5298                           ;screenDrawers.h: 65: chanValdig[2], chanValdig[3], chanValdig[4], flech, chanValdig[5])
      +                          ;
  5299  001F9C  0EF4               	movlw	low STR_1
  5300  001F9E  0101               	movlb	1	; () banked
  5301  001FA0  6F3F               	movwf	printf@f& (0+255),b
  5302  001FA2  0E7E               	movlw	high STR_1
  5303  001FA4  0101               	movlb	1	; () banked
  5304  001FA6  6F40               	movwf	(printf@f+1)& (0+255),b
  5305  001FA8  0101               	movlb	1	; () banked
  5306  001FAA  51A3               	movf	_chanValdig& (0+255),w,b
  5307  001FAC  0101               	movlb	1	; () banked
  5308  001FAE  6F41               	movwf	(?_printf+2)& (0+255),b
  5309  001FB0  6B42               	clrf	(?_printf+3)& (0+255),b
  5310  001FB2  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5311  001FB4  0742               	decf	(?_printf+3)& (0+255),f,b
  5312  001FB6  0101               	movlb	1	; () banked
  5313  001FB8  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5314  001FBA  0101               	movlb	1	; () banked
  5315  001FBC  6F43               	movwf	(?_printf+4)& (0+255),b
  5316  001FBE  6B44               	clrf	(?_printf+5)& (0+255),b
  5317  001FC0  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5318  001FC2  0744               	decf	(?_printf+5)& (0+255),f,b
  5319  001FC4  0101               	movlb	1	; () banked
  5320  001FC6  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5321  001FC8  0101               	movlb	1	; () banked
  5322  001FCA  6F45               	movwf	(?_printf+6)& (0+255),b
  5323  001FCC  6B46               	clrf	(?_printf+7)& (0+255),b
  5324  001FCE  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5325  001FD0  0746               	decf	(?_printf+7)& (0+255),f,b
  5326  001FD2  0101               	movlb	1	; () banked
  5327  001FD4  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5328  001FD6  0101               	movlb	1	; () banked
  5329  001FD8  6F47               	movwf	(?_printf+8)& (0+255),b
  5330  001FDA  6B48               	clrf	(?_printf+9)& (0+255),b
  5331  001FDC  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5332  001FDE  0748               	decf	(?_printf+9)& (0+255),f,b
  5333  001FE0  0101               	movlb	1	; () banked
  5334  001FE2  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5335  001FE4  0101               	movlb	1	; () banked
  5336  001FE6  6F49               	movwf	(?_printf+10)& (0+255),b
  5337  001FE8  6B4A               	clrf	(?_printf+11)& (0+255),b
  5338  001FEA  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5339  001FEC  074A               	decf	(?_printf+11)& (0+255),f,b
  5340  001FEE  C19B  F14B         	movff	_flech,?_printf+12
  5341  001FF2  0101               	movlb	1	; () banked
  5342  001FF4  6B4C               	clrf	(?_printf+13)& (0+255),b
  5343  001FF6  0101               	movlb	1	; () banked
  5344  001FF8  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5345  001FFA  0101               	movlb	1	; () banked
  5346  001FFC  6F4D               	movwf	(?_printf+14)& (0+255),b
  5347  001FFE  6B4E               	clrf	(?_printf+15)& (0+255),b
  5348  002000  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5349  002002  074E               	decf	(?_printf+15)& (0+255),f,b
  5350  002004  EC61  F000         	call	_printf	;wreg free
  5351                           
  5352                           ;screenDrawers.h: 66: }else if(chanValSection == 4) {
  5353  002008  D129               	goto	l10793
  5354  00200A                     l10773:
  5355  00200A  0E04               	movlw	4
  5356  00200C  0101               	movlb	1	; () banked
  5357  00200E  199C               	xorwf	_chanValSection& (0+255),w,b
  5358  002010  A4D8               	btfss	status,2,c
  5359  002012  D037               	goto	l10777
  5360                           
  5361                           ; BSR set to: 1
  5362                           ;screenDrawers.h: 67: printf(" %u%u%u.%u%c%u%u ", chanValdig[0], chanValdig[1],
  5363                           ;screenDrawers.h: 68: chanValdig[2], chanValdig[3], flech, chanValdig[4], chanValdig[5])
      +                          ;
  5364  002014  0E06               	movlw	low STR_2
  5365  002016  0101               	movlb	1	; () banked
  5366  002018  6F3F               	movwf	printf@f& (0+255),b
  5367  00201A  0E7F               	movlw	high STR_2
  5368  00201C  0101               	movlb	1	; () banked
  5369  00201E  6F40               	movwf	(printf@f+1)& (0+255),b
  5370  002020  0101               	movlb	1	; () banked
  5371  002022  51A3               	movf	_chanValdig& (0+255),w,b
  5372  002024  0101               	movlb	1	; () banked
  5373  002026  6F41               	movwf	(?_printf+2)& (0+255),b
  5374  002028  6B42               	clrf	(?_printf+3)& (0+255),b
  5375  00202A  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5376  00202C  0742               	decf	(?_printf+3)& (0+255),f,b
  5377  00202E  0101               	movlb	1	; () banked
  5378  002030  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5379  002032  0101               	movlb	1	; () banked
  5380  002034  6F43               	movwf	(?_printf+4)& (0+255),b
  5381  002036  6B44               	clrf	(?_printf+5)& (0+255),b
  5382  002038  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5383  00203A  0744               	decf	(?_printf+5)& (0+255),f,b
  5384  00203C  0101               	movlb	1	; () banked
  5385  00203E  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5386  002040  0101               	movlb	1	; () banked
  5387  002042  6F45               	movwf	(?_printf+6)& (0+255),b
  5388  002044  6B46               	clrf	(?_printf+7)& (0+255),b
  5389  002046  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5390  002048  0746               	decf	(?_printf+7)& (0+255),f,b
  5391  00204A  0101               	movlb	1	; () banked
  5392  00204C  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5393  00204E  0101               	movlb	1	; () banked
  5394  002050  6F47               	movwf	(?_printf+8)& (0+255),b
  5395  002052  6B48               	clrf	(?_printf+9)& (0+255),b
  5396  002054  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5397  002056  0748               	decf	(?_printf+9)& (0+255),f,b
  5398  002058  C19B  F149         	movff	_flech,?_printf+10
  5399  00205C  0101               	movlb	1	; () banked
  5400  00205E  6B4A               	clrf	(?_printf+11)& (0+255),b
  5401  002060  0101               	movlb	1	; () banked
  5402  002062  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5403  002064  0101               	movlb	1	; () banked
  5404  002066  6F4B               	movwf	(?_printf+12)& (0+255),b
  5405  002068  6B4C               	clrf	(?_printf+13)& (0+255),b
  5406  00206A  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5407  00206C  074C               	decf	(?_printf+13)& (0+255),f,b
  5408  00206E  0101               	movlb	1	; () banked
  5409  002070  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5410  002072  0101               	movlb	1	; () banked
  5411  002074  6F4D               	movwf	(?_printf+14)& (0+255),b
  5412  002076  6B4E               	clrf	(?_printf+15)& (0+255),b
  5413  002078  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5414  00207A  074E               	decf	(?_printf+15)& (0+255),f,b
  5415  00207C  EC61  F000         	call	_printf	;wreg free
  5416                           
  5417                           ;screenDrawers.h: 69: }else if(chanValSection == 3) {
  5418  002080  D0ED               	goto	l10793
  5419  002082                     l10777:
  5420  002082  0E03               	movlw	3
  5421  002084  0101               	movlb	1	; () banked
  5422  002086  199C               	xorwf	_chanValSection& (0+255),w,b
  5423  002088  A4D8               	btfss	status,2,c
  5424  00208A  D037               	goto	l10781
  5425                           
  5426                           ; BSR set to: 1
  5427                           ;screenDrawers.h: 70: printf(" %u%u%u.%c%u%u%u ", chanValdig[0], chanValdig[1],
  5428                           ;screenDrawers.h: 71: chanValdig[2], flech, chanValdig[3], chanValdig[4], chanValdig[5])
      +                          ;
  5429  00208C  0E4E               	movlw	low STR_3
  5430  00208E  0101               	movlb	1	; () banked
  5431  002090  6F3F               	movwf	printf@f& (0+255),b
  5432  002092  0E7F               	movlw	high STR_3
  5433  002094  0101               	movlb	1	; () banked
  5434  002096  6F40               	movwf	(printf@f+1)& (0+255),b
  5435  002098  0101               	movlb	1	; () banked
  5436  00209A  51A3               	movf	_chanValdig& (0+255),w,b
  5437  00209C  0101               	movlb	1	; () banked
  5438  00209E  6F41               	movwf	(?_printf+2)& (0+255),b
  5439  0020A0  6B42               	clrf	(?_printf+3)& (0+255),b
  5440  0020A2  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5441  0020A4  0742               	decf	(?_printf+3)& (0+255),f,b
  5442  0020A6  0101               	movlb	1	; () banked
  5443  0020A8  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5444  0020AA  0101               	movlb	1	; () banked
  5445  0020AC  6F43               	movwf	(?_printf+4)& (0+255),b
  5446  0020AE  6B44               	clrf	(?_printf+5)& (0+255),b
  5447  0020B0  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5448  0020B2  0744               	decf	(?_printf+5)& (0+255),f,b
  5449  0020B4  0101               	movlb	1	; () banked
  5450  0020B6  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5451  0020B8  0101               	movlb	1	; () banked
  5452  0020BA  6F45               	movwf	(?_printf+6)& (0+255),b
  5453  0020BC  6B46               	clrf	(?_printf+7)& (0+255),b
  5454  0020BE  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5455  0020C0  0746               	decf	(?_printf+7)& (0+255),f,b
  5456  0020C2  C19B  F147         	movff	_flech,?_printf+8
  5457  0020C6  0101               	movlb	1	; () banked
  5458  0020C8  6B48               	clrf	(?_printf+9)& (0+255),b
  5459  0020CA  0101               	movlb	1	; () banked
  5460  0020CC  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5461  0020CE  0101               	movlb	1	; () banked
  5462  0020D0  6F49               	movwf	(?_printf+10)& (0+255),b
  5463  0020D2  6B4A               	clrf	(?_printf+11)& (0+255),b
  5464  0020D4  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5465  0020D6  074A               	decf	(?_printf+11)& (0+255),f,b
  5466  0020D8  0101               	movlb	1	; () banked
  5467  0020DA  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5468  0020DC  0101               	movlb	1	; () banked
  5469  0020DE  6F4B               	movwf	(?_printf+12)& (0+255),b
  5470  0020E0  6B4C               	clrf	(?_printf+13)& (0+255),b
  5471  0020E2  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5472  0020E4  074C               	decf	(?_printf+13)& (0+255),f,b
  5473  0020E6  0101               	movlb	1	; () banked
  5474  0020E8  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5475  0020EA  0101               	movlb	1	; () banked
  5476  0020EC  6F4D               	movwf	(?_printf+14)& (0+255),b
  5477  0020EE  6B4E               	clrf	(?_printf+15)& (0+255),b
  5478  0020F0  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5479  0020F2  074E               	decf	(?_printf+15)& (0+255),f,b
  5480  0020F4  EC61  F000         	call	_printf	;wreg free
  5481                           
  5482                           ;screenDrawers.h: 72: }else if(chanValSection == 2) {
  5483  0020F8  D0B1               	goto	l10793
  5484  0020FA                     l10781:
  5485  0020FA  0E02               	movlw	2
  5486  0020FC  0101               	movlb	1	; () banked
  5487  0020FE  199C               	xorwf	_chanValSection& (0+255),w,b
  5488  002100  A4D8               	btfss	status,2,c
  5489  002102  D037               	goto	l10785
  5490                           
  5491                           ; BSR set to: 1
  5492                           ;screenDrawers.h: 73: printf(" %u%u%c%u.%u%u%u ", chanValdig[0], chanValdig[1], flech,
  5493                           ;screenDrawers.h: 74: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5494  002104  0E18               	movlw	low STR_4
  5495  002106  0101               	movlb	1	; () banked
  5496  002108  6F3F               	movwf	printf@f& (0+255),b
  5497  00210A  0E7F               	movlw	high STR_4
  5498  00210C  0101               	movlb	1	; () banked
  5499  00210E  6F40               	movwf	(printf@f+1)& (0+255),b
  5500  002110  0101               	movlb	1	; () banked
  5501  002112  51A3               	movf	_chanValdig& (0+255),w,b
  5502  002114  0101               	movlb	1	; () banked
  5503  002116  6F41               	movwf	(?_printf+2)& (0+255),b
  5504  002118  6B42               	clrf	(?_printf+3)& (0+255),b
  5505  00211A  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5506  00211C  0742               	decf	(?_printf+3)& (0+255),f,b
  5507  00211E  0101               	movlb	1	; () banked
  5508  002120  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5509  002122  0101               	movlb	1	; () banked
  5510  002124  6F43               	movwf	(?_printf+4)& (0+255),b
  5511  002126  6B44               	clrf	(?_printf+5)& (0+255),b
  5512  002128  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5513  00212A  0744               	decf	(?_printf+5)& (0+255),f,b
  5514  00212C  C19B  F145         	movff	_flech,?_printf+6
  5515  002130  0101               	movlb	1	; () banked
  5516  002132  6B46               	clrf	(?_printf+7)& (0+255),b
  5517  002134  0101               	movlb	1	; () banked
  5518  002136  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5519  002138  0101               	movlb	1	; () banked
  5520  00213A  6F47               	movwf	(?_printf+8)& (0+255),b
  5521  00213C  6B48               	clrf	(?_printf+9)& (0+255),b
  5522  00213E  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5523  002140  0748               	decf	(?_printf+9)& (0+255),f,b
  5524  002142  0101               	movlb	1	; () banked
  5525  002144  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5526  002146  0101               	movlb	1	; () banked
  5527  002148  6F49               	movwf	(?_printf+10)& (0+255),b
  5528  00214A  6B4A               	clrf	(?_printf+11)& (0+255),b
  5529  00214C  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5530  00214E  074A               	decf	(?_printf+11)& (0+255),f,b
  5531  002150  0101               	movlb	1	; () banked
  5532  002152  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5533  002154  0101               	movlb	1	; () banked
  5534  002156  6F4B               	movwf	(?_printf+12)& (0+255),b
  5535  002158  6B4C               	clrf	(?_printf+13)& (0+255),b
  5536  00215A  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5537  00215C  074C               	decf	(?_printf+13)& (0+255),f,b
  5538  00215E  0101               	movlb	1	; () banked
  5539  002160  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5540  002162  0101               	movlb	1	; () banked
  5541  002164  6F4D               	movwf	(?_printf+14)& (0+255),b
  5542  002166  6B4E               	clrf	(?_printf+15)& (0+255),b
  5543  002168  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5544  00216A  074E               	decf	(?_printf+15)& (0+255),f,b
  5545  00216C  EC61  F000         	call	_printf	;wreg free
  5546                           
  5547                           ;screenDrawers.h: 75: }else if(chanValSection == 1) {
  5548  002170  D075               	goto	l10793
  5549  002172                     l10785:
  5550  002172  0101               	movlb	1	; () banked
  5551  002174  059C               	decf	_chanValSection& (0+255),w,b
  5552  002176  A4D8               	btfss	status,2,c
  5553  002178  D037               	goto	l10789
  5554                           
  5555                           ; BSR set to: 1
  5556                           ;screenDrawers.h: 76: printf(" %u%c%u%u.%u%u%u ", chanValdig[0], flech, chanValdig[1],
  5557                           ;screenDrawers.h: 77: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5558  00217A  0E2A               	movlw	low STR_5
  5559  00217C  0101               	movlb	1	; () banked
  5560  00217E  6F3F               	movwf	printf@f& (0+255),b
  5561  002180  0E7F               	movlw	high STR_5
  5562  002182  0101               	movlb	1	; () banked
  5563  002184  6F40               	movwf	(printf@f+1)& (0+255),b
  5564  002186  0101               	movlb	1	; () banked
  5565  002188  51A3               	movf	_chanValdig& (0+255),w,b
  5566  00218A  0101               	movlb	1	; () banked
  5567  00218C  6F41               	movwf	(?_printf+2)& (0+255),b
  5568  00218E  6B42               	clrf	(?_printf+3)& (0+255),b
  5569  002190  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5570  002192  0742               	decf	(?_printf+3)& (0+255),f,b
  5571  002194  C19B  F143         	movff	_flech,?_printf+4
  5572  002198  0101               	movlb	1	; () banked
  5573  00219A  6B44               	clrf	(?_printf+5)& (0+255),b
  5574  00219C  0101               	movlb	1	; () banked
  5575  00219E  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5576  0021A0  0101               	movlb	1	; () banked
  5577  0021A2  6F45               	movwf	(?_printf+6)& (0+255),b
  5578  0021A4  6B46               	clrf	(?_printf+7)& (0+255),b
  5579  0021A6  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5580  0021A8  0746               	decf	(?_printf+7)& (0+255),f,b
  5581  0021AA  0101               	movlb	1	; () banked
  5582  0021AC  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5583  0021AE  0101               	movlb	1	; () banked
  5584  0021B0  6F47               	movwf	(?_printf+8)& (0+255),b
  5585  0021B2  6B48               	clrf	(?_printf+9)& (0+255),b
  5586  0021B4  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5587  0021B6  0748               	decf	(?_printf+9)& (0+255),f,b
  5588  0021B8  0101               	movlb	1	; () banked
  5589  0021BA  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5590  0021BC  0101               	movlb	1	; () banked
  5591  0021BE  6F49               	movwf	(?_printf+10)& (0+255),b
  5592  0021C0  6B4A               	clrf	(?_printf+11)& (0+255),b
  5593  0021C2  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5594  0021C4  074A               	decf	(?_printf+11)& (0+255),f,b
  5595  0021C6  0101               	movlb	1	; () banked
  5596  0021C8  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5597  0021CA  0101               	movlb	1	; () banked
  5598  0021CC  6F4B               	movwf	(?_printf+12)& (0+255),b
  5599  0021CE  6B4C               	clrf	(?_printf+13)& (0+255),b
  5600  0021D0  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5601  0021D2  074C               	decf	(?_printf+13)& (0+255),f,b
  5602  0021D4  0101               	movlb	1	; () banked
  5603  0021D6  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5604  0021D8  0101               	movlb	1	; () banked
  5605  0021DA  6F4D               	movwf	(?_printf+14)& (0+255),b
  5606  0021DC  6B4E               	clrf	(?_printf+15)& (0+255),b
  5607  0021DE  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5608  0021E0  074E               	decf	(?_printf+15)& (0+255),f,b
  5609  0021E2  EC61  F000         	call	_printf	;wreg free
  5610                           
  5611                           ;screenDrawers.h: 78: }else if(chanValSection == 0) {
  5612  0021E6  D03A               	goto	l10793
  5613  0021E8                     l10789:
  5614  0021E8  0101               	movlb	1	; () banked
  5615  0021EA  519C               	movf	_chanValSection& (0+255),w,b
  5616  0021EC  A4D8               	btfss	status,2,c
  5617  0021EE  D036               	goto	l10793
  5618                           
  5619                           ; BSR set to: 1
  5620                           ;screenDrawers.h: 79: printf(" %c%u%u%u.%u%u%u ", flech, chanValdig[0], chanValdig[1],
  5621                           ;screenDrawers.h: 80: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5622  0021F0  0E3C               	movlw	low STR_6
  5623  0021F2  0101               	movlb	1	; () banked
  5624  0021F4  6F3F               	movwf	printf@f& (0+255),b
  5625  0021F6  0E7F               	movlw	high STR_6
  5626  0021F8  0101               	movlb	1	; () banked
  5627  0021FA  6F40               	movwf	(printf@f+1)& (0+255),b
  5628  0021FC  C19B  F141         	movff	_flech,?_printf+2
  5629  002200  0101               	movlb	1	; () banked
  5630  002202  6B42               	clrf	(?_printf+3)& (0+255),b
  5631  002204  0101               	movlb	1	; () banked
  5632  002206  51A3               	movf	_chanValdig& (0+255),w,b
  5633  002208  0101               	movlb	1	; () banked
  5634  00220A  6F43               	movwf	(?_printf+4)& (0+255),b
  5635  00220C  6B44               	clrf	(?_printf+5)& (0+255),b
  5636  00220E  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5637  002210  0744               	decf	(?_printf+5)& (0+255),f,b
  5638  002212  0101               	movlb	1	; () banked
  5639  002214  51A4               	movf	(_chanValdig+1)& (0+255),w,b
  5640  002216  0101               	movlb	1	; () banked
  5641  002218  6F45               	movwf	(?_printf+6)& (0+255),b
  5642  00221A  6B46               	clrf	(?_printf+7)& (0+255),b
  5643  00221C  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5644  00221E  0746               	decf	(?_printf+7)& (0+255),f,b
  5645  002220  0101               	movlb	1	; () banked
  5646  002222  51A5               	movf	(_chanValdig+2)& (0+255),w,b
  5647  002224  0101               	movlb	1	; () banked
  5648  002226  6F47               	movwf	(?_printf+8)& (0+255),b
  5649  002228  6B48               	clrf	(?_printf+9)& (0+255),b
  5650  00222A  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5651  00222C  0748               	decf	(?_printf+9)& (0+255),f,b
  5652  00222E  0101               	movlb	1	; () banked
  5653  002230  51A6               	movf	(_chanValdig+3)& (0+255),w,b
  5654  002232  0101               	movlb	1	; () banked
  5655  002234  6F49               	movwf	(?_printf+10)& (0+255),b
  5656  002236  6B4A               	clrf	(?_printf+11)& (0+255),b
  5657  002238  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5658  00223A  074A               	decf	(?_printf+11)& (0+255),f,b
  5659  00223C  0101               	movlb	1	; () banked
  5660  00223E  51A7               	movf	(_chanValdig+4)& (0+255),w,b
  5661  002240  0101               	movlb	1	; () banked
  5662  002242  6F4B               	movwf	(?_printf+12)& (0+255),b
  5663  002244  6B4C               	clrf	(?_printf+13)& (0+255),b
  5664  002246  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5665  002248  074C               	decf	(?_printf+13)& (0+255),f,b
  5666  00224A  0101               	movlb	1	; () banked
  5667  00224C  51A8               	movf	(_chanValdig+5)& (0+255),w,b
  5668  00224E  0101               	movlb	1	; () banked
  5669  002250  6F4D               	movwf	(?_printf+14)& (0+255),b
  5670  002252  6B4E               	clrf	(?_printf+15)& (0+255),b
  5671  002254  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5672  002256  074E               	decf	(?_printf+15)& (0+255),f,b
  5673  002258  EC61  F000         	call	_printf	;wreg free
  5674  00225C                     l10793:
  5675                           
  5676                           ;screenDrawers.h: 81: }
  5677                           ;screenDrawers.h: 82: lcd_gotoxy(11, 2);
  5678  00225C  0E02               	movlw	2
  5679  00225E  0101               	movlb	1	; () banked
  5680  002260  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5681  002262  0E0B               	movlw	11
  5682  002264  ECD1  F037         	call	_lcd_gotoxy
  5683  002268  0012               	return		;funcret
  5684  00226A                     __end_of_drawValEditor:
  5685                           	opt stack 0
  5686                           tblptru	equ	0xFF8
  5687                           tblptrh	equ	0xFF7
  5688                           tblptrl	equ	0xFF6
  5689                           tablat	equ	0xFF5
  5690                           prodh	equ	0xFF4
  5691                           prodl	equ	0xFF3
  5692                           intcon	equ	0xFF2
  5693                           postinc0	equ	0xFEE
  5694                           wreg	equ	0xFE8
  5695                           postdec1	equ	0xFE5
  5696                           fsr1l	equ	0xFE1
  5697                           indf2	equ	0xFDF
  5698                           fsr2h	equ	0xFDA
  5699                           fsr2l	equ	0xFD9
  5700                           status	equ	0xFD8
  5701                           
  5702 ;; *************** function _drawAdvON *****************
  5703 ;; Defined at:
  5704 ;;		line 189 in file "source/screenDrawers.h"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;  on              1    wreg     unsigned char 
  5707 ;; Auto vars:     Size  Location     Type
  5708 ;;  on              1  116[BANK1 ] unsigned char 
  5709 ;; Return value:  Size  Location     Type
  5710 ;;                  1    wreg      void 
  5711 ;; Registers used:
  5712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5713 ;; Tracked objects:
  5714 ;;		On entry : 0/0
  5715 ;;		On exit  : 0/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5718 ;;      Params:         0       0       0       0       0       0       0
  5719 ;;      Locals:         0       0       1       0       0       0       0
  5720 ;;      Temps:          0       0       0       0       0       0       0
  5721 ;;      Totals:         0       0       1       0       0       0       0
  5722 ;;Total ram usage:        1 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; Hardware stack levels required when called:   19
  5725 ;; This function calls:
  5726 ;;		_lcd_gotoxy
  5727 ;;		_printf
  5728 ;; This function is called by:
  5729 ;;		_drawScreen
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           	psect	text22
  5734  006C2A                     __ptext22:
  5735                           	opt stack 0
  5736  006C2A                     _drawAdvON:
  5737                           	opt stack 10
  5738                           
  5739                           ;incstack = 0
  5740                           ;drawAdvON@on stored from wreg
  5741  006C2A  0101               	movlb	1	; () banked
  5742  006C2C  6F74               	movwf	drawAdvON@on& (0+255),b
  5743                           
  5744                           ;screenDrawers.h: 190: lcd_gotoxy(1, 1);
  5745  006C2E  0E01               	movlw	1
  5746  006C30  0101               	movlb	1	; () banked
  5747  006C32  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5748  006C34  0E01               	movlw	1
  5749  006C36  ECD1  F037         	call	_lcd_gotoxy
  5750                           
  5751                           ;screenDrawers.h: 191: printf("Modo Configurar:\n");
  5752  006C3A  0E64               	movlw	low STR_23
  5753  006C3C  0101               	movlb	1	; () banked
  5754  006C3E  6F3F               	movwf	printf@f& (0+255),b
  5755  006C40  0E7E               	movlw	high STR_23
  5756  006C42  0101               	movlb	1	; () banked
  5757  006C44  6F40               	movwf	(printf@f+1)& (0+255),b
  5758  006C46  EC61  F000         	call	_printf	;wreg free
  5759                           
  5760                           ;screenDrawers.h: 192: if(on)
  5761  006C4A  0101               	movlb	1	; () banked
  5762  006C4C  5174               	movf	drawAdvON@on& (0+255),w,b
  5763  006C4E  0101               	movlb	1	; () banked
  5764  006C50  B4D8               	btfsc	status,2,c
  5765  006C52  D009               	goto	l11055
  5766                           
  5767                           ; BSR set to: 1
  5768                           ;screenDrawers.h: 193: printf("    Iniciado    ");
  5769  006C54  0E93               	movlw	low STR_24
  5770  006C56  0101               	movlb	1	; () banked
  5771  006C58  6F3F               	movwf	printf@f& (0+255),b
  5772  006C5A  0E7F               	movlw	high STR_24
  5773  006C5C  0101               	movlb	1	; () banked
  5774  006C5E  6F40               	movwf	(printf@f+1)& (0+255),b
  5775  006C60  EC61  F000         	call	_printf	;wreg free
  5776  006C64  0012               	return	
  5777  006C66                     l11055:
  5778                           
  5779                           ;screenDrawers.h: 194: else
  5780                           ;screenDrawers.h: 195: printf("   Finalizado   ");
  5781  006C66  0EA4               	movlw	low STR_25
  5782  006C68  0101               	movlb	1	; () banked
  5783  006C6A  6F3F               	movwf	printf@f& (0+255),b
  5784  006C6C  0E7F               	movlw	high STR_25
  5785  006C6E  0101               	movlb	1	; () banked
  5786  006C70  6F40               	movwf	(printf@f+1)& (0+255),b
  5787  006C72  EC61  F000         	call	_printf	;wreg free
  5788  006C76  0012               	return	
  5789  006C78                     __end_of_drawAdvON:
  5790                           	opt stack 0
  5791                           tblptru	equ	0xFF8
  5792                           tblptrh	equ	0xFF7
  5793                           tblptrl	equ	0xFF6
  5794                           tablat	equ	0xFF5
  5795                           prodh	equ	0xFF4
  5796                           prodl	equ	0xFF3
  5797                           intcon	equ	0xFF2
  5798                           postinc0	equ	0xFEE
  5799                           wreg	equ	0xFE8
  5800                           postdec1	equ	0xFE5
  5801                           fsr1l	equ	0xFE1
  5802                           indf2	equ	0xFDF
  5803                           fsr2h	equ	0xFDA
  5804                           fsr2l	equ	0xFD9
  5805                           status	equ	0xFD8
  5806                           
  5807 ;; *************** function _printf *****************
  5808 ;; Defined at:
  5809 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;  f               2   63[BANK1 ] PTR const unsigned char 
  5812 ;;		 -> STR_43(17), STR_42(18), STR_41(17), STR_40(18), 
  5813 ;;		 -> STR_39(17), STR_38(18), STR_37(17), STR_36(18), 
  5814 ;;		 -> STR_35(17), STR_34(18), STR_33(7), STR_32(18), 
  5815 ;;		 -> STR_31(19), STR_30(18), STR_29(18), STR_28(18), 
  5816 ;;		 -> STR_27(18), STR_26(18), STR_25(17), STR_24(17), 
  5817 ;;		 -> STR_23(18), STR_22(17), STR_21(25), STR_20(18), 
  5818 ;;		 -> STR_19(16), STR_18(18), STR_17(7), STR_16(18), 
  5819 ;;		 -> STR_15(19), STR_14(18), STR_13(18), STR_12(18), 
  5820 ;;		 -> STR_11(18), STR_10(18), STR_9(20), STR_8(18), 
  5821 ;;		 -> STR_7(18), STR_6(18), STR_5(18), STR_4(18), 
  5822 ;;		 -> STR_3(18), STR_2(18), STR_1(18), 
  5823 ;; Auto vars:     Size  Location     Type
  5824 ;;  val             4  102[BANK1 ] unsigned long 
  5825 ;;  tmpval          4   98[BANK1 ] struct .
  5826 ;;  fval            3  110[BANK1 ] struct .
  5827 ;;  prec            2  113[BANK1 ] int 
  5828 ;;  width           2  108[BANK1 ] int 
  5829 ;;  exp             2  106[BANK1 ] int 
  5830 ;;  flag            2   96[BANK1 ] unsigned short 
  5831 ;;  ap              2   94[BANK1 ] PTR void [1]
  5832 ;;		 -> ?_printf(2), 
  5833 ;;  len             2   92[BANK1 ] unsigned int 
  5834 ;;  cp              2   90[BANK1 ] PTR const unsigned char 
  5835 ;;		 -> printf@c(1), 
  5836 ;;  c               1  115[BANK1 ] char 
  5837 ;;  d               1    0        unsigned char 
  5838 ;; Return value:  Size  Location     Type
  5839 ;;                  2   63[BANK1 ] int 
  5840 ;; Registers used:
  5841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5842 ;; Tracked objects:
  5843 ;;		On entry : 0/0
  5844 ;;		On exit  : 0/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5847 ;;      Params:         0       0      18       0       0       0       0
  5848 ;;      Locals:         0       0      29       0       0       0       0
  5849 ;;      Temps:          0       0       6       0       0       0       0
  5850 ;;      Totals:         0       0      53       0       0       0       0
  5851 ;;Total ram usage:       53 bytes
  5852 ;; Hardware stack levels used:    1
  5853 ;; Hardware stack levels required when called:   18
  5854 ;; This function calls:
  5855 ;;		___awdiv
  5856 ;;		___ftadd
  5857 ;;		___ftge
  5858 ;;		___ftmul
  5859 ;;		___ftneg
  5860 ;;		___ftsub
  5861 ;;		___fttol
  5862 ;;		___lldiv
  5863 ;;		___llmod
  5864 ;;		___lltoft
  5865 ;;		___wmul
  5866 ;;		__div_to_l_
  5867 ;;		__tdiv_to_l_
  5868 ;;		_fround
  5869 ;;		_isdigit
  5870 ;;		_putch
  5871 ;;		_scale
  5872 ;; This function is called by:
  5873 ;;		_drawValEditor
  5874 ;;		_drawMenu
  5875 ;;		_drawChanVal
  5876 ;;		_drawPass1Lin
  5877 ;;		_drawPassWord
  5878 ;;		_drawBadPass
  5879 ;;		_drawAdvON
  5880 ;;		_drawSNquest
  5881 ;;		_drawAutoCalibRM
  5882 ;;		_drawCutError
  5883 ;;		_drawReady2Cut
  5884 ;;		_drawCalibProc
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           
  5888                           	psect	text23
  5889  0000C2                     __ptext23:
  5890                           	opt stack 0
  5891  0000C2                     _printf:
  5892                           	opt stack 10
  5893                           
  5894                           ;doprnt.c: 466: va_list ap;
  5895                           ;doprnt.c: 499: signed char c;
  5896                           ;doprnt.c: 501: int width;
  5897                           ;doprnt.c: 504: int prec;
  5898                           ;doprnt.c: 508: unsigned short flag;
  5899                           ;doprnt.c: 515: char d;
  5900                           ;doprnt.c: 516: double fval;
  5901                           ;doprnt.c: 517: int exp;
  5902                           ;doprnt.c: 523: union {
  5903                           ;doprnt.c: 524: unsigned long vd;
  5904                           ;doprnt.c: 525: double integ;
  5905                           ;doprnt.c: 526: } tmpval;
  5906                           ;doprnt.c: 528: unsigned long val;
  5907                           ;doprnt.c: 529: unsigned len;
  5908                           ;doprnt.c: 530: const char * cp;
  5909                           ;doprnt.c: 533: *ap = __va_start();
  5910                           
  5911                           ;incstack = 0
  5912  0000C2  0E41               	movlw	low (?_printf+2)
  5913  0000C4  0101               	movlb	1	; () banked
  5914  0000C6  6F5E               	movwf	printf@ap& (0+255),b
  5915  0000C8  0E01               	movlw	high (?_printf+2)
  5916  0000CA  0101               	movlb	1	; () banked
  5917  0000CC  6F5F               	movwf	(printf@ap+1)& (0+255),b
  5918                           
  5919                           ;doprnt.c: 536: while(c = *f++) {
  5920  0000CE  EF6A  F006         	goto	l10693
  5921  0000D2                     l10395:
  5922                           
  5923                           ; BSR set to: 1
  5924                           ;doprnt.c: 538: if(c != '%')
  5925  0000D2  0E25               	movlw	37
  5926  0000D4  0101               	movlb	1	; () banked
  5927  0000D6  1973               	xorwf	printf@c& (0+255),w,b
  5928  0000D8  B4D8               	btfsc	status,2,c
  5929  0000DA  D006               	goto	l10399
  5930                           
  5931                           ; BSR set to: 1
  5932                           ;doprnt.c: 540: {
  5933                           ;doprnt.c: 541: (putch(c) );
  5934  0000DC  0101               	movlb	1	; () banked
  5935  0000DE  5173               	movf	printf@c& (0+255),w,b
  5936  0000E0  EC23  F039         	call	_putch
  5937                           
  5938                           ;doprnt.c: 542: continue;
  5939  0000E4  EF6A  F006         	goto	l10693
  5940  0000E8                     l10399:
  5941                           
  5942                           ;doprnt.c: 543: }
  5943                           ;doprnt.c: 546: width = 0;
  5944  0000E8  0E00               	movlw	0
  5945  0000EA  0101               	movlb	1	; () banked
  5946  0000EC  6F6D               	movwf	(printf@width+1)& (0+255),b
  5947  0000EE  0E00               	movlw	0
  5948  0000F0  6F6C               	movwf	printf@width& (0+255),b
  5949                           
  5950                           ;doprnt.c: 548: flag = 0;
  5951  0000F2  0E00               	movlw	0
  5952  0000F4  0101               	movlb	1	; () banked
  5953  0000F6  6F61               	movwf	(printf@flag+1)& (0+255),b
  5954  0000F8  0E00               	movlw	0
  5955  0000FA  6F60               	movwf	printf@flag& (0+255),b
  5956                           
  5957                           ; BSR set to: 1
  5958                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5959  0000FC  C13F  FFF6         	movff	printf@f,tblptrl
  5960  000100  C140  FFF7         	movff	printf@f+1,tblptrh
  5961  000104                     	if	0	;tblptru may be non-zero
  5962  000104                     	endif
  5963  000104                     	if	0	;tblptru may be non-zero
  5964  000104                     	endif
  5965  000104  0008               	tblrd		*
  5966  000106  50F5               	movf	tablat,w,c
  5967  000108  EC71  F038         	call	_isdigit
  5968  00010C  A0D8               	btfss	status,0,c
  5969  00010E  D040               	goto	l10413
  5970                           
  5971                           ;doprnt.c: 598: width = 0;
  5972  000110  0E00               	movlw	0
  5973  000112  0101               	movlb	1	; () banked
  5974  000114  6F6D               	movwf	(printf@width+1)& (0+255),b
  5975  000116  0E00               	movlw	0
  5976  000118  6F6C               	movwf	printf@width& (0+255),b
  5977  00011A                     l10405:
  5978                           
  5979                           ;doprnt.c: 600: width *= 10;
  5980  00011A  C16C  F10E         	movff	printf@width,___wmul@multiplier
  5981  00011E  C16D  F10F         	movff	printf@width+1,___wmul@multiplier+1
  5982  000122  0E00               	movlw	0
  5983  000124  0101               	movlb	1	; () banked
  5984  000126  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5985  000128  0E0A               	movlw	10
  5986  00012A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5987  00012C  EC84  F037         	call	___wmul	;wreg free
  5988  000130  C10E  F16C         	movff	?___wmul,printf@width
  5989  000134  C10F  F16D         	movff	?___wmul+1,printf@width+1
  5990                           
  5991                           ;doprnt.c: 601: width += *f++ - '0';
  5992  000138  0ED0               	movlw	208
  5993  00013A  0101               	movlb	1	; () banked
  5994  00013C  6F51               	movwf	??_printf& (0+255),b
  5995  00013E  0EFF               	movlw	255
  5996  000140  0101               	movlb	1	; () banked
  5997  000142  6F52               	movwf	(??_printf+1)& (0+255),b
  5998  000144  C13F  FFF6         	movff	printf@f,tblptrl
  5999  000148  C140  FFF7         	movff	printf@f+1,tblptrh
  6000  00014C                     	if	0	;tblptru may be non-zero
  6001  00014C                     	endif
  6002  00014C                     	if	0	;tblptru may be non-zero
  6003  00014C                     	endif
  6004  00014C  0008               	tblrd		*
  6005  00014E  50F5               	movf	tablat,w,c
  6006  000150  0101               	movlb	1	; () banked
  6007  000152  6F53               	movwf	(??_printf+2)& (0+255),b
  6008  000154  6B54               	clrf	(??_printf+3)& (0+255),b
  6009  000156  0101               	movlb	1	; () banked
  6010  000158  5151               	movf	??_printf& (0+255),w,b
  6011  00015A  0101               	movlb	1	; () banked
  6012  00015C  2753               	addwf	(??_printf+2)& (0+255),f,b
  6013  00015E  0101               	movlb	1	; () banked
  6014  000160  5152               	movf	(??_printf+1)& (0+255),w,b
  6015  000162  0101               	movlb	1	; () banked
  6016  000164  2354               	addwfc	(??_printf+3)& (0+255),f,b
  6017  000166  0101               	movlb	1	; () banked
  6018  000168  5153               	movf	(??_printf+2)& (0+255),w,b
  6019  00016A  0101               	movlb	1	; () banked
  6020  00016C  276C               	addwf	printf@width& (0+255),f,b
  6021  00016E  0101               	movlb	1	; () banked
  6022  000170  5154               	movf	(??_printf+3)& (0+255),w,b
  6023  000172  0101               	movlb	1	; () banked
  6024  000174  236D               	addwfc	(printf@width+1)& (0+255),f,b
  6025                           
  6026                           ; BSR set to: 1
  6027  000176  0101               	movlb	1	; () banked
  6028  000178  4B3F               	infsnz	printf@f& (0+255),f,b
  6029  00017A  2B40               	incf	(printf@f+1)& (0+255),f,b
  6030                           
  6031                           ; BSR set to: 1
  6032                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6033  00017C  C13F  FFF6         	movff	printf@f,tblptrl
  6034  000180  C140  FFF7         	movff	printf@f+1,tblptrh
  6035  000184                     	if	0	;tblptru may be non-zero
  6036  000184                     	endif
  6037  000184                     	if	0	;tblptru may be non-zero
  6038  000184                     	endif
  6039  000184  0008               	tblrd		*
  6040  000186  50F5               	movf	tablat,w,c
  6041  000188  EC71  F038         	call	_isdigit
  6042  00018C  B0D8               	btfsc	status,0,c
  6043  00018E  D7C5               	goto	l10405
  6044  000190                     l10413:
  6045                           
  6046                           ;doprnt.c: 608: }
  6047                           ;doprnt.c: 611: if(*f == '.') {
  6048  000190  C13F  FFF6         	movff	printf@f,tblptrl
  6049  000194  C140  FFF7         	movff	printf@f+1,tblptrh
  6050  000198                     	if	0	;tblptru may be non-zero
  6051  000198                     	endif
  6052  000198                     	if	0	;tblptru may be non-zero
  6053  000198                     	endif
  6054  000198  0008               	tblrd		*
  6055  00019A  50F5               	movf	tablat,w,c
  6056  00019C  0A2E               	xorlw	46
  6057  00019E  A4D8               	btfss	status,2,c
  6058  0001A0  D039               	goto	l10425
  6059                           
  6060                           ;doprnt.c: 612: flag |= 0x4000;
  6061  0001A2  0101               	movlb	1	; () banked
  6062  0001A4  8D61               	bsf	(printf@flag+1)& (0+255),6,b
  6063                           
  6064                           ;doprnt.c: 613: f++;
  6065  0001A6  0101               	movlb	1	; () banked
  6066  0001A8  4B3F               	infsnz	printf@f& (0+255),f,b
  6067  0001AA  2B40               	incf	(printf@f+1)& (0+255),f,b
  6068                           
  6069                           ; BSR set to: 1
  6070                           ;doprnt.c: 620: {
  6071                           ;doprnt.c: 621: prec = 0;
  6072  0001AC  0E00               	movlw	0
  6073  0001AE  0101               	movlb	1	; () banked
  6074  0001B0  6F72               	movwf	(printf@prec+1)& (0+255),b
  6075  0001B2  0E00               	movlw	0
  6076  0001B4  6F71               	movwf	printf@prec& (0+255),b
  6077                           
  6078                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  6079  0001B6  D023               	goto	l10423
  6080  0001B8                     l10419:
  6081                           
  6082                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  6083  0001B8  C171  F10E         	movff	printf@prec,___wmul@multiplier
  6084  0001BC  C172  F10F         	movff	printf@prec+1,___wmul@multiplier+1
  6085  0001C0  0E00               	movlw	0
  6086  0001C2  0101               	movlb	1	; () banked
  6087  0001C4  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6088  0001C6  0E0A               	movlw	10
  6089  0001C8  6F10               	movwf	___wmul@multiplicand& (0+255),b
  6090  0001CA  EC84  F037         	call	___wmul	;wreg free
  6091  0001CE  C13F  FFF6         	movff	printf@f,tblptrl
  6092  0001D2  C140  FFF7         	movff	printf@f+1,tblptrh
  6093  0001D6                     	if	0	;tblptru may be non-zero
  6094  0001D6                     	endif
  6095  0001D6                     	if	0	;tblptru may be non-zero
  6096  0001D6                     	endif
  6097  0001D6  0008               	tblrd		*
  6098  0001D8  50F5               	movf	tablat,w,c
  6099  0001DA  0101               	movlb	1	; () banked
  6100  0001DC  270E               	addwf	?___wmul& (0+255),f,b
  6101  0001DE  0E00               	movlw	0
  6102  0001E0  0101               	movlb	1	; () banked
  6103  0001E2  230F               	addwfc	(?___wmul+1)& (0+255),f,b
  6104  0001E4  0ED0               	movlw	208
  6105  0001E6  0101               	movlb	1	; () banked
  6106  0001E8  250E               	addwf	?___wmul& (0+255),w,b
  6107  0001EA  0101               	movlb	1	; () banked
  6108  0001EC  6F71               	movwf	printf@prec& (0+255),b
  6109  0001EE  0EFF               	movlw	255
  6110  0001F0  0101               	movlb	1	; () banked
  6111  0001F2  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  6112  0001F4  0101               	movlb	1	; () banked
  6113  0001F6  6F72               	movwf	(printf@prec+1)& (0+255),b
  6114                           
  6115                           ; BSR set to: 1
  6116  0001F8  0101               	movlb	1	; () banked
  6117  0001FA  4B3F               	infsnz	printf@f& (0+255),f,b
  6118  0001FC  2B40               	incf	(printf@f+1)& (0+255),f,b
  6119  0001FE                     l10423:
  6120                           
  6121                           ; BSR set to: 1
  6122  0001FE  C13F  FFF6         	movff	printf@f,tblptrl
  6123  000202  C140  FFF7         	movff	printf@f+1,tblptrh
  6124  000206                     	if	0	;tblptru may be non-zero
  6125  000206                     	endif
  6126  000206                     	if	0	;tblptru may be non-zero
  6127  000206                     	endif
  6128  000206  0008               	tblrd		*
  6129  000208  50F5               	movf	tablat,w,c
  6130  00020A  EC71  F038         	call	_isdigit
  6131  00020E  A0D8               	btfss	status,0,c
  6132  000210  D07A               	goto	l10465
  6133  000212  D7D2               	goto	l10419
  6134  000214                     l10425:
  6135                           
  6136                           ;doprnt.c: 626: prec = 0;
  6137  000214  0E00               	movlw	0
  6138  000216  0101               	movlb	1	; () banked
  6139  000218  6F72               	movwf	(printf@prec+1)& (0+255),b
  6140  00021A  0E00               	movlw	0
  6141  00021C  6F71               	movwf	printf@prec& (0+255),b
  6142                           
  6143                           ; BSR set to: 1
  6144                           ;doprnt.c: 628: flag |= 0x1000;
  6145  00021E  0101               	movlb	1	; () banked
  6146  000220  8961               	bsf	(printf@flag+1)& (0+255),4,b
  6147                           
  6148                           ; BSR set to: 1
  6149                           ;doprnt.c: 630: }
  6150                           ;doprnt.c: 635: switch(c = *f++) {
  6151  000222  D071               	goto	l10465
  6152  000224                     l10429:
  6153                           
  6154                           ; BSR set to: 1
  6155                           ;doprnt.c: 663: flag |= 0x400;
  6156  000224  0101               	movlb	1	; () banked
  6157  000226  8561               	bsf	(printf@flag+1)& (0+255),2,b
  6158                           
  6159                           ; BSR set to: 1
  6160                           ;doprnt.c: 698: case 'i':
  6161                           ;doprnt.c: 699: break;
  6162                           
  6163                           ; BSR set to: 1
  6164                           
  6165                           ;doprnt.c: 697: case 'd':
  6166                           
  6167                           ;doprnt.c: 664: break;
  6168  000228  D08D               	goto	l10467
  6169  00022A                     l10431:
  6170                           
  6171                           ; BSR set to: 1
  6172                           ;doprnt.c: 753: if(prec && prec < len)
  6173  00022A  0101               	movlb	1	; () banked
  6174  00022C  5171               	movf	printf@prec& (0+255),w,b
  6175  00022E  0101               	movlb	1	; () banked
  6176  000230  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  6177  000232  B4D8               	btfsc	status,2,c
  6178  000234  D00E               	goto	l10437
  6179                           
  6180                           ; BSR set to: 1
  6181  000236  0101               	movlb	1	; () banked
  6182  000238  515C               	movf	printf@len& (0+255),w,b
  6183  00023A  0101               	movlb	1	; () banked
  6184  00023C  5D71               	subwf	printf@prec& (0+255),w,b
  6185  00023E  0101               	movlb	1	; () banked
  6186  000240  515D               	movf	(printf@len+1)& (0+255),w,b
  6187  000242  0101               	movlb	1	; () banked
  6188  000244  5972               	subwfb	(printf@prec+1)& (0+255),w,b
  6189  000246  B0D8               	btfsc	status,0,c
  6190  000248  D004               	goto	l10437
  6191                           
  6192                           ; BSR set to: 1
  6193                           ;doprnt.c: 754: len = prec;
  6194  00024A  C171  F15C         	movff	printf@prec,printf@len
  6195  00024E  C172  F15D         	movff	printf@prec+1,printf@len+1
  6196  000252                     l10437:
  6197                           
  6198                           ; BSR set to: 1
  6199                           ;doprnt.c: 757: if(width > len)
  6200  000252  0101               	movlb	1	; () banked
  6201  000254  516C               	movf	printf@width& (0+255),w,b
  6202  000256  0101               	movlb	1	; () banked
  6203  000258  5D5C               	subwf	printf@len& (0+255),w,b
  6204  00025A  0101               	movlb	1	; () banked
  6205  00025C  516D               	movf	(printf@width+1)& (0+255),w,b
  6206  00025E  0101               	movlb	1	; () banked
  6207  000260  595D               	subwfb	(printf@len+1)& (0+255),w,b
  6208  000262  B0D8               	btfsc	status,0,c
  6209  000264  D009               	goto	l10441
  6210                           
  6211                           ; BSR set to: 1
  6212                           ;doprnt.c: 758: width -= len;
  6213  000266  0101               	movlb	1	; () banked
  6214  000268  515C               	movf	printf@len& (0+255),w,b
  6215  00026A  0101               	movlb	1	; () banked
  6216  00026C  5F6C               	subwf	printf@width& (0+255),f,b
  6217  00026E  0101               	movlb	1	; () banked
  6218  000270  515D               	movf	(printf@len+1)& (0+255),w,b
  6219  000272  0101               	movlb	1	; () banked
  6220  000274  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  6221  000276  D009               	goto	l10445
  6222  000278                     l10441:
  6223                           
  6224                           ; BSR set to: 1
  6225                           ;doprnt.c: 759: else
  6226                           ;doprnt.c: 760: width = 0;
  6227  000278  0E00               	movlw	0
  6228  00027A  0101               	movlb	1	; () banked
  6229  00027C  6F6D               	movwf	(printf@width+1)& (0+255),b
  6230  00027E  0E00               	movlw	0
  6231  000280  6F6C               	movwf	printf@width& (0+255),b
  6232                           
  6233                           ; BSR set to: 1
  6234                           ;doprnt.c: 764: while(width--)
  6235  000282  D003               	goto	l10445
  6236  000284                     l10443:
  6237                           
  6238                           ; BSR set to: 1
  6239                           ;doprnt.c: 765: (putch(' ') );
  6240  000284  0E20               	movlw	32
  6241  000286  EC23  F039         	call	_putch
  6242  00028A                     l10445:
  6243  00028A  0101               	movlb	1	; () banked
  6244  00028C  076C               	decf	printf@width& (0+255),f,b
  6245  00028E  A0D8               	btfss	status,0,c
  6246  000290  076D               	decf	(printf@width+1)& (0+255),f,b
  6247  000292  0101               	movlb	1	; () banked
  6248  000294  296C               	incf	printf@width& (0+255),w,b
  6249  000296  E1F6               	bnz	l10443
  6250  000298  0101               	movlb	1	; () banked
  6251  00029A  296D               	incf	(printf@width+1)& (0+255),w,b
  6252  00029C  B4D8               	btfsc	status,2,c
  6253  00029E  D00B               	goto	l10451
  6254  0002A0  D7F1               	goto	l10443
  6255  0002A2                     l10447:
  6256                           
  6257                           ; BSR set to: 1
  6258                           ;doprnt.c: 768: (putch(*cp++) );
  6259  0002A2  C15A  FFD9         	movff	printf@cp,fsr2l
  6260  0002A6  C15B  FFDA         	movff	printf@cp+1,fsr2h
  6261  0002AA  50DF               	movf	indf2,w,c
  6262  0002AC  EC23  F039         	call	_putch
  6263  0002B0  0101               	movlb	1	; () banked
  6264  0002B2  4B5A               	infsnz	printf@cp& (0+255),f,b
  6265  0002B4  2B5B               	incf	(printf@cp+1)& (0+255),f,b
  6266  0002B6                     l10451:
  6267                           
  6268                           ; BSR set to: 1
  6269  0002B6  0101               	movlb	1	; () banked
  6270  0002B8  075C               	decf	printf@len& (0+255),f,b
  6271  0002BA  A0D8               	btfss	status,0,c
  6272  0002BC  075D               	decf	(printf@len+1)& (0+255),f,b
  6273  0002BE  0101               	movlb	1	; () banked
  6274  0002C0  295C               	incf	printf@len& (0+255),w,b
  6275  0002C2  E1EF               	bnz	l10447
  6276  0002C4  0101               	movlb	1	; () banked
  6277  0002C6  295D               	incf	(printf@len+1)& (0+255),w,b
  6278  0002C8  B4D8               	btfsc	status,2,c
  6279  0002CA  EF6A  F006         	goto	l10693
  6280  0002CE  D7E9               	goto	l10447
  6281  0002D0                     l10453:
  6282                           
  6283                           ; BSR set to: 1
  6284                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  6285  0002D0  C15E  FFD9         	movff	printf@ap,fsr2l
  6286  0002D4  C15F  FFDA         	movff	printf@ap+1,fsr2h
  6287  0002D8  50DF               	movf	indf2,w,c
  6288  0002DA  0101               	movlb	1	; () banked
  6289  0002DC  6F73               	movwf	printf@c& (0+255),b
  6290                           
  6291                           ; BSR set to: 1
  6292  0002DE  0E02               	movlw	2
  6293  0002E0  0101               	movlb	1	; () banked
  6294  0002E2  275E               	addwf	printf@ap& (0+255),f,b
  6295  0002E4  0E00               	movlw	0
  6296  0002E6  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  6297  0002E8                     l10457:
  6298                           
  6299                           ; BSR set to: 1
  6300                           ;doprnt.c: 805: cp = (char *)&c;
  6301  0002E8  0E73               	movlw	low printf@c
  6302  0002EA  0101               	movlb	1	; () banked
  6303  0002EC  6F5A               	movwf	printf@cp& (0+255),b
  6304  0002EE  0E01               	movlw	high printf@c
  6305  0002F0  0101               	movlb	1	; () banked
  6306  0002F2  6F5B               	movwf	(printf@cp+1)& (0+255),b
  6307                           
  6308                           ; BSR set to: 1
  6309                           ;doprnt.c: 806: len = 1;
  6310  0002F4  0E00               	movlw	0
  6311  0002F6  0101               	movlb	1	; () banked
  6312  0002F8  6F5D               	movwf	(printf@len+1)& (0+255),b
  6313  0002FA  0E01               	movlw	1
  6314  0002FC  6F5C               	movwf	printf@len& (0+255),b
  6315                           
  6316                           ;doprnt.c: 807: goto dostring;
  6317  0002FE  D795               	goto	l10431
  6318  000300                     l10461:
  6319                           
  6320                           ; BSR set to: 1
  6321                           ;doprnt.c: 818: flag |= 0x40;
  6322  000300  0101               	movlb	1	; () banked
  6323  000302  8D60               	bsf	printf@flag& (0+255),6,b
  6324                           
  6325                           ; BSR set to: 1
  6326                           ;doprnt.c: 822: }
  6327                           
  6328                           ;doprnt.c: 819: break;
  6329  000304  D01F               	goto	l10467
  6330  000306                     l10465:
  6331  000306  C13F  FFF6         	movff	printf@f,tblptrl
  6332  00030A  C140  FFF7         	movff	printf@f+1,tblptrh
  6333  00030E  0101               	movlb	1	; () banked
  6334  000310  4B3F               	infsnz	printf@f& (0+255),f,b
  6335  000312  2B40               	incf	(printf@f+1)& (0+255),f,b
  6336  000314                     	if	0	;tblptru may be non-zero
  6337  000314                     	endif
  6338  000314                     	if	0	;tblptru may be non-zero
  6339  000314                     	endif
  6340  000314  0008               	tblrd		*
  6341  000316  CFF5 F173          	movff	tablat,printf@c
  6342  00031A  0101               	movlb	1	; () banked
  6343  00031C  5173               	movf	printf@c& (0+255),w,b
  6344                           
  6345                           ; Switch size 1, requested type "space"
  6346                           ; Number of cases is 6, Range of values is 0 to 117
  6347                           ; switch strategies available:
  6348                           ; Name         Instructions Cycles
  6349                           ; simple_byte           19    10 (average)
  6350                           ;	Chosen strategy is simple_byte
  6351  00031E  0A00               	xorlw	0	; case 0
  6352  000320  B4D8               	btfsc	status,2,c
  6353  000322  0012               	return	
  6354  000324  0A63               	xorlw	99	; case 99
  6355  000326  B4D8               	btfsc	status,2,c
  6356  000328  D7D3               	goto	l10453
  6357  00032A  0A07               	xorlw	7	; case 100
  6358  00032C  B4D8               	btfsc	status,2,c
  6359  00032E  D00A               	goto	l10467
  6360  000330  0A02               	xorlw	2	; case 102
  6361  000332  B4D8               	btfsc	status,2,c
  6362  000334  D777               	goto	l10429
  6363  000336  0A0F               	xorlw	15	; case 105
  6364  000338  B4D8               	btfsc	status,2,c
  6365  00033A  D004               	goto	l10467
  6366  00033C  0A1C               	xorlw	28	; case 117
  6367  00033E  B4D8               	btfsc	status,2,c
  6368  000340  D7DF               	goto	l10461
  6369  000342  D7D2               	goto	l10457
  6370  000344                     l10467:
  6371                           
  6372                           ; BSR set to: 1
  6373                           ;doprnt.c: 825: if(flag & (0x700)) {
  6374  000344  0E07               	movlw	7
  6375  000346  0101               	movlb	1	; () banked
  6376  000348  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6377  00034A  B4D8               	btfsc	status,2,c
  6378  00034C  D351               	goto	l1013
  6379                           
  6380                           ; BSR set to: 1
  6381                           ;doprnt.c: 827: if(flag & 0x1000)
  6382  00034E  0101               	movlb	1	; () banked
  6383  000350  A961               	btfss	(printf@flag+1)& (0+255),4,b
  6384  000352  D005               	goto	l10473
  6385                           
  6386                           ; BSR set to: 1
  6387                           ;doprnt.c: 829: prec = 6;
  6388  000354  0E00               	movlw	0
  6389  000356  0101               	movlb	1	; () banked
  6390  000358  6F72               	movwf	(printf@prec+1)& (0+255),b
  6391  00035A  0E06               	movlw	6
  6392  00035C  6F71               	movwf	printf@prec& (0+255),b
  6393  00035E                     l10473:
  6394                           
  6395                           ; BSR set to: 1
  6396                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6397  00035E  C15E  FFD9         	movff	printf@ap,fsr2l
  6398  000362  C15F  FFDA         	movff	printf@ap+1,fsr2h
  6399  000366  CFDE F16E          	movff	postinc2,printf@fval
  6400  00036A  CFDE F16F          	movff	postinc2,printf@fval+1
  6401  00036E  CFDD F170          	movff	postdec2,printf@fval+2
  6402                           
  6403                           ; BSR set to: 1
  6404  000372  0E03               	movlw	3
  6405  000374  0101               	movlb	1	; () banked
  6406  000376  275E               	addwf	printf@ap& (0+255),f,b
  6407  000378  0E00               	movlw	0
  6408  00037A  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  6409                           
  6410                           ; BSR set to: 1
  6411                           ;doprnt.c: 831: if(fval < 0.0) {
  6412  00037C  0101               	movlb	1	; () banked
  6413  00037E  AF70               	btfss	(printf@fval+2)& (0+255),7,b
  6414  000380  D011               	goto	l10483
  6415                           
  6416                           ; BSR set to: 1
  6417                           ;doprnt.c: 832: fval = -fval;
  6418  000382  C16E  F100         	movff	printf@fval,___ftneg@f1
  6419  000386  C16F  F101         	movff	printf@fval+1,___ftneg@f1+1
  6420  00038A  C170  F102         	movff	printf@fval+2,___ftneg@f1+2
  6421  00038E  ECE9  F037         	call	___ftneg	;wreg free
  6422  000392  C100  F16E         	movff	?___ftneg,printf@fval
  6423  000396  C101  F16F         	movff	?___ftneg+1,printf@fval+1
  6424  00039A  C102  F170         	movff	?___ftneg+2,printf@fval+2
  6425                           
  6426                           ;doprnt.c: 833: flag |= 0x03;
  6427  00039E  0E03               	movlw	3
  6428  0003A0  0101               	movlb	1	; () banked
  6429  0003A2  1360               	iorwf	printf@flag& (0+255),f,b
  6430  0003A4                     l10483:
  6431                           
  6432                           ; BSR set to: 1
  6433                           ;doprnt.c: 834: }
  6434                           ;doprnt.c: 835: exp = 0;
  6435  0003A4  0E00               	movlw	0
  6436  0003A6  0101               	movlb	1	; () banked
  6437  0003A8  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6438  0003AA  0E00               	movlw	0
  6439  0003AC  6F6A               	movwf	printf@exp& (0+255),b
  6440                           
  6441                           ; BSR set to: 1
  6442                           ;doprnt.c: 836: if( fval!=0) {
  6443  0003AE  0101               	movlb	1	; () banked
  6444  0003B0  516E               	movf	printf@fval& (0+255),w,b
  6445  0003B2  0101               	movlb	1	; () banked
  6446  0003B4  116F               	iorwf	(printf@fval+1)& (0+255),w,b
  6447  0003B6  0101               	movlb	1	; () banked
  6448  0003B8  1170               	iorwf	(printf@fval+2)& (0+255),w,b
  6449  0003BA  B4D8               	btfsc	status,2,c
  6450  0003BC  D09B               	goto	l10511
  6451                           
  6452                           ; BSR set to: 1
  6453                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6454  0003BE  0E82               	movlw	130
  6455  0003C0  0101               	movlb	1	; () banked
  6456  0003C2  6F51               	movwf	??_printf& (0+255),b
  6457  0003C4  0EFF               	movlw	255
  6458  0003C6  0101               	movlb	1	; () banked
  6459  0003C8  6F52               	movwf	(??_printf+1)& (0+255),b
  6460  0003CA  C16E  F153         	movff	printf@fval,??_printf+2
  6461  0003CE  C16F  F154         	movff	printf@fval+1,??_printf+3
  6462  0003D2  C170  F155         	movff	printf@fval+2,??_printf+4
  6463  0003D6  C171  F156         	movff	printf@fval+3,??_printf+5
  6464  0003DA  0E10               	movlw	16
  6465  0003DC  D006               	goto	u15260
  6466  0003DE                     u15265:
  6467  0003DE  0101               	movlb	1	; () banked
  6468  0003E0  90D8               	bcf	status,0,c
  6469  0003E2  3356               	rrcf	(??_printf+5)& (0+255),f,b
  6470  0003E4  3355               	rrcf	(??_printf+4)& (0+255),f,b
  6471  0003E6  3354               	rrcf	(??_printf+3)& (0+255),f,b
  6472  0003E8  3353               	rrcf	(??_printf+2)& (0+255),f,b
  6473  0003EA                     u15260:
  6474  0003EA  2EE8               	decfsz	wreg,f,c
  6475  0003EC  D7F8               	goto	u15265
  6476  0003EE  0101               	movlb	1	; () banked
  6477  0003F0  5153               	movf	(??_printf+2)& (0+255),w,b
  6478  0003F2  0101               	movlb	1	; () banked
  6479  0003F4  2551               	addwf	??_printf& (0+255),w,b
  6480  0003F6  0101               	movlb	1	; () banked
  6481  0003F8  6F6A               	movwf	printf@exp& (0+255),b
  6482  0003FA  0E00               	movlw	0
  6483  0003FC  0101               	movlb	1	; () banked
  6484  0003FE  2152               	addwfc	(??_printf+1)& (0+255),w,b
  6485  000400  0101               	movlb	1	; () banked
  6486  000402  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6487                           
  6488                           ; BSR set to: 1
  6489                           ;doprnt.c: 838: exp--;
  6490  000404  0101               	movlb	1	; () banked
  6491  000406  076A               	decf	printf@exp& (0+255),f,b
  6492  000408  A0D8               	btfss	status,0,c
  6493  00040A  076B               	decf	(printf@exp+1)& (0+255),f,b
  6494                           
  6495                           ; BSR set to: 1
  6496                           ;doprnt.c: 839: exp *= 3;
  6497  00040C  C16A  F10E         	movff	printf@exp,___wmul@multiplier
  6498  000410  C16B  F10F         	movff	printf@exp+1,___wmul@multiplier+1
  6499  000414  0E00               	movlw	0
  6500  000416  0101               	movlb	1	; () banked
  6501  000418  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6502  00041A  0E03               	movlw	3
  6503  00041C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  6504  00041E  EC84  F037         	call	___wmul	;wreg free
  6505  000422  C10E  F16A         	movff	?___wmul,printf@exp
  6506  000426  C10F  F16B         	movff	?___wmul+1,printf@exp+1
  6507                           
  6508                           ;doprnt.c: 840: exp /= 10;
  6509  00042A  C16A  F106         	movff	printf@exp,___awdiv@dividend
  6510  00042E  C16B  F107         	movff	printf@exp+1,___awdiv@dividend+1
  6511  000432  0E00               	movlw	0
  6512  000434  0101               	movlb	1	; () banked
  6513  000436  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  6514  000438  0E0A               	movlw	10
  6515  00043A  6F08               	movwf	___awdiv@divisor& (0+255),b
  6516  00043C  ECE4  F02B         	call	___awdiv	;wreg free
  6517  000440  C106  F16A         	movff	?___awdiv,printf@exp
  6518  000444  C107  F16B         	movff	?___awdiv+1,printf@exp+1
  6519                           
  6520                           ;doprnt.c: 841: if(exp < 0)
  6521  000448  0101               	movlb	1	; () banked
  6522  00044A  AF6B               	btfss	(printf@exp+1)& (0+255),7,b
  6523  00044C  D004               	goto	l10499
  6524                           
  6525                           ; BSR set to: 1
  6526                           ;doprnt.c: 842: exp--;
  6527  00044E  0101               	movlb	1	; () banked
  6528  000450  076A               	decf	printf@exp& (0+255),f,b
  6529  000452  A0D8               	btfss	status,0,c
  6530  000454  076B               	decf	(printf@exp+1)& (0+255),f,b
  6531  000456                     l10499:
  6532                           
  6533                           ; BSR set to: 1
  6534                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6535  000456  0101               	movlb	1	; () banked
  6536  000458  516A               	movf	printf@exp& (0+255),w,b
  6537  00045A  0800               	sublw	0
  6538  00045C  EC7A  F006         	call	_scale
  6539  000460  C123  F162         	movff	?_scale,printf@tmpval
  6540  000464  C124  F163         	movff	?_scale+1,printf@tmpval+1
  6541  000468  C125  F164         	movff	?_scale+2,printf@tmpval+2
  6542                           
  6543                           ;doprnt.c: 847: tmpval.integ *= fval;
  6544  00046C  C162  F114         	movff	printf@tmpval,___ftmul@f1
  6545  000470  C163  F115         	movff	printf@tmpval+1,___ftmul@f1+1
  6546  000474  C164  F116         	movff	printf@tmpval+2,___ftmul@f1+2
  6547  000478  C16E  F117         	movff	printf@fval,___ftmul@f2
  6548  00047C  C16F  F118         	movff	printf@fval+1,___ftmul@f2+1
  6549  000480  C170  F119         	movff	printf@fval+2,___ftmul@f2+2
  6550  000484  EC35  F01C         	call	___ftmul	;wreg free
  6551  000488  C114  F162         	movff	?___ftmul,printf@tmpval
  6552  00048C  C115  F163         	movff	?___ftmul+1,printf@tmpval+1
  6553  000490  C116  F164         	movff	?___ftmul+2,printf@tmpval+2
  6554                           
  6555                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6556  000494  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6557  000498  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6558  00049C  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6559  0004A0  0E00               	movlw	0
  6560  0004A2  0101               	movlb	1	; () banked
  6561  0004A4  6F03               	movwf	___ftge@ff2& (0+255),b
  6562  0004A6  0E80               	movlw	128
  6563  0004A8  0101               	movlb	1	; () banked
  6564  0004AA  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6565  0004AC  0E3F               	movlw	63
  6566  0004AE  0101               	movlb	1	; () banked
  6567  0004B0  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6568  0004B2  ECBE  F02A         	call	___ftge	;wreg free
  6569  0004B6  0101               	movlb	1	; () banked
  6570  0004B8  B0D8               	btfsc	status,0,c
  6571  0004BA  D005               	goto	l10507
  6572                           
  6573                           ; BSR set to: 1
  6574                           ;doprnt.c: 849: exp--;
  6575  0004BC  0101               	movlb	1	; () banked
  6576  0004BE  076A               	decf	printf@exp& (0+255),f,b
  6577  0004C0  A0D8               	btfss	status,0,c
  6578  0004C2  076B               	decf	(printf@exp+1)& (0+255),f,b
  6579  0004C4  D017               	goto	l10511
  6580  0004C6                     l10507:
  6581                           
  6582                           ; BSR set to: 1
  6583                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6584  0004C6  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6585  0004CA  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6586  0004CE  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6587  0004D2  0E00               	movlw	0
  6588  0004D4  0101               	movlb	1	; () banked
  6589  0004D6  6F03               	movwf	___ftge@ff2& (0+255),b
  6590  0004D8  0E20               	movlw	32
  6591  0004DA  0101               	movlb	1	; () banked
  6592  0004DC  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6593  0004DE  0E41               	movlw	65
  6594  0004E0  0101               	movlb	1	; () banked
  6595  0004E2  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6596  0004E4  ECBE  F02A         	call	___ftge	;wreg free
  6597  0004E8  0101               	movlb	1	; () banked
  6598  0004EA  A0D8               	btfss	status,0,c
  6599  0004EC  D003               	goto	l10511
  6600                           
  6601                           ; BSR set to: 1
  6602                           ;doprnt.c: 851: exp++;
  6603  0004EE  0101               	movlb	1	; () banked
  6604  0004F0  4B6A               	infsnz	printf@exp& (0+255),f,b
  6605  0004F2  2B6B               	incf	(printf@exp+1)& (0+255),f,b
  6606  0004F4                     l10511:
  6607                           
  6608                           ; BSR set to: 1
  6609                           ;doprnt.c: 852: }
  6610                           ;doprnt.c: 1112: if(prec <= 12)
  6611  0004F4  0101               	movlb	1	; () banked
  6612  0004F6  BF72               	btfsc	(printf@prec+1)& (0+255),7,b
  6613  0004F8  D008               	goto	l10513
  6614  0004FA  0101               	movlb	1	; () banked
  6615  0004FC  5172               	movf	(printf@prec+1)& (0+255),w,b
  6616  0004FE  E11D               	bnz	l10515
  6617  000500  0E0D               	movlw	13
  6618  000502  0101               	movlb	1	; () banked
  6619  000504  5D71               	subwf	printf@prec& (0+255),w,b
  6620  000506  B0D8               	btfsc	status,0,c
  6621  000508  D018               	goto	l10515
  6622  00050A                     l10513:
  6623                           
  6624                           ; BSR set to: 1
  6625                           ;doprnt.c: 1113: fval += fround(prec);
  6626  00050A  C16E  F12D         	movff	printf@fval,___ftadd@f1
  6627  00050E  C16F  F12E         	movff	printf@fval+1,___ftadd@f1+1
  6628  000512  C170  F12F         	movff	printf@fval+2,___ftadd@f1+2
  6629  000516  0101               	movlb	1	; () banked
  6630  000518  5171               	movf	printf@prec& (0+255),w,b
  6631  00051A  EC8E  F012         	call	_fround
  6632  00051E  C123  F130         	movff	?_fround,___ftadd@f2
  6633  000522  C124  F131         	movff	?_fround+1,___ftadd@f2+1
  6634  000526  C125  F132         	movff	?_fround+2,___ftadd@f2+2
  6635  00052A  ECE4  F013         	call	___ftadd	;wreg free
  6636  00052E  C12D  F16E         	movff	?___ftadd,printf@fval
  6637  000532  C12E  F16F         	movff	?___ftadd+1,printf@fval+1
  6638  000536  C12F  F170         	movff	?___ftadd+2,printf@fval+2
  6639  00053A                     l10515:
  6640                           
  6641                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6642  00053A  0101               	movlb	1	; () banked
  6643  00053C  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  6644  00053E  D008               	goto	l10517
  6645  000540  0101               	movlb	1	; () banked
  6646  000542  516B               	movf	(printf@exp+1)& (0+255),w,b
  6647  000544  E12A               	bnz	l10523
  6648  000546  0E0A               	movlw	10
  6649  000548  0101               	movlb	1	; () banked
  6650  00054A  5D6A               	subwf	printf@exp& (0+255),w,b
  6651  00054C  B0D8               	btfsc	status,0,c
  6652  00054E  D025               	goto	l10523
  6653  000550                     l10517:
  6654                           
  6655                           ; BSR set to: 1
  6656  000550  0101               	movlb	1	; () banked
  6657  000552  516E               	movf	printf@fval& (0+255),w,b
  6658  000554  0101               	movlb	1	; () banked
  6659  000556  116F               	iorwf	(printf@fval+1)& (0+255),w,b
  6660  000558  0101               	movlb	1	; () banked
  6661  00055A  1170               	iorwf	(printf@fval+2)& (0+255),w,b
  6662  00055C  B4D8               	btfsc	status,2,c
  6663  00055E  D063               	goto	l10537
  6664                           
  6665                           ; BSR set to: 1
  6666  000560  C16E  F12A         	movff	printf@fval,___fttol@f1
  6667  000564  C16F  F12B         	movff	printf@fval+1,___fttol@f1+1
  6668  000568  C170  F12C         	movff	printf@fval+2,___fttol@f1+2
  6669  00056C  EC89  F01F         	call	___fttol	;wreg free
  6670  000570  0101               	movlb	1	; () banked
  6671  000572  512A               	movf	?___fttol& (0+255),w,b
  6672  000574  0101               	movlb	1	; () banked
  6673  000576  112B               	iorwf	(?___fttol+1)& (0+255),w,b
  6674  000578  0101               	movlb	1	; () banked
  6675  00057A  112C               	iorwf	(?___fttol+2)& (0+255),w,b
  6676  00057C  0101               	movlb	1	; () banked
  6677  00057E  112D               	iorwf	(?___fttol+3)& (0+255),w,b
  6678  000580  A4D8               	btfss	status,2,c
  6679  000582  D051               	goto	l10537
  6680                           
  6681                           ; BSR set to: 1
  6682  000584  0101               	movlb	1	; () banked
  6683  000586  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  6684  000588  D04E               	goto	l10537
  6685  00058A  0101               	movlb	1	; () banked
  6686  00058C  516B               	movf	(printf@exp+1)& (0+255),w,b
  6687  00058E  E105               	bnz	l10523
  6688  000590  0E02               	movlw	2
  6689  000592  0101               	movlb	1	; () banked
  6690  000594  5D6A               	subwf	printf@exp& (0+255),w,b
  6691  000596  A0D8               	btfss	status,0,c
  6692  000598  D046               	goto	l10537
  6693  00059A                     l10523:
  6694                           
  6695                           ; BSR set to: 1
  6696                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6697  00059A  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6698  00059E  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6699  0005A2  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6700  0005A6  0E70               	movlw	112
  6701  0005A8  0101               	movlb	1	; () banked
  6702  0005AA  6F03               	movwf	___ftge@ff2& (0+255),b
  6703  0005AC  0E89               	movlw	137
  6704  0005AE  0101               	movlb	1	; () banked
  6705  0005B0  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6706  0005B2  0E40               	movlw	64
  6707  0005B4  0101               	movlb	1	; () banked
  6708  0005B6  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6709  0005B8  ECBE  F02A         	call	___ftge	;wreg free
  6710  0005BC  0101               	movlb	1	; () banked
  6711  0005BE  B0D8               	btfsc	status,0,c
  6712  0005C0  D003               	goto	l10527
  6713                           
  6714                           ; BSR set to: 1
  6715                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6716  0005C2  0101               	movlb	1	; () banked
  6717  0005C4  0EF7               	movlw	247
  6718  0005C6  D002               	goto	L1
  6719  0005C8                     l10527:
  6720                           
  6721                           ; BSR set to: 1
  6722                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6723  0005C8  0101               	movlb	1	; () banked
  6724  0005CA  0EF8               	movlw	248
  6725  0005CC                     L1:
  6726  0005CC  276A               	addwf	printf@exp& (0+255),f,b
  6727  0005CE  0EFF               	movlw	255
  6728  0005D0  236B               	addwfc	(printf@exp+1)& (0+255),f,b
  6729                           
  6730                           ; BSR set to: 1
  6731                           ;doprnt.c: 1124: }
  6732                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6733                           
  6734                           ; BSR set to: 1
  6735  0005D2  0101               	movlb	1	; () banked
  6736  0005D4  516A               	movf	printf@exp& (0+255),w,b
  6737  0005D6  EC7A  F006         	call	_scale
  6738  0005DA  C123  F162         	movff	?_scale,printf@tmpval
  6739  0005DE  C124  F163         	movff	?_scale+1,printf@tmpval+1
  6740  0005E2  C125  F164         	movff	?_scale+2,printf@tmpval+2
  6741                           
  6742                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6743  0005E6  C16E  F100         	movff	printf@fval,__tdiv_to_l_@f1
  6744  0005EA  C16F  F101         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  6745  0005EE  C170  F102         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  6746  0005F2  C162  F103         	movff	printf@tmpval,__tdiv_to_l_@f2
  6747  0005F6  C163  F104         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  6748  0005FA  C164  F105         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  6749  0005FE  ECA2  F01A         	call	__tdiv_to_l_	;wreg free
  6750  000602  C100  F166         	movff	?__tdiv_to_l_,printf@val
  6751  000606  C101  F167         	movff	?__tdiv_to_l_+1,printf@val+1
  6752  00060A  C102  F168         	movff	?__tdiv_to_l_+2,printf@val+2
  6753  00060E  C103  F169         	movff	?__tdiv_to_l_+3,printf@val+3
  6754                           
  6755                           ;doprnt.c: 1129: fval = 0.0;
  6756  000612  0E00               	movlw	0
  6757  000614  0101               	movlb	1	; () banked
  6758  000616  6F6E               	movwf	printf@fval& (0+255),b
  6759  000618  0E00               	movlw	0
  6760  00061A  0101               	movlb	1	; () banked
  6761  00061C  6F6F               	movwf	(printf@fval+1)& (0+255),b
  6762  00061E  0E00               	movlw	0
  6763  000620  0101               	movlb	1	; () banked
  6764  000622  6F70               	movwf	(printf@fval+2)& (0+255),b
  6765                           
  6766                           ;doprnt.c: 1130: } else {
  6767  000624  D033               	goto	l10541
  6768  000626                     l10537:
  6769                           
  6770                           ; BSR set to: 1
  6771                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6772  000626  C16E  F12A         	movff	printf@fval,___fttol@f1
  6773  00062A  C16F  F12B         	movff	printf@fval+1,___fttol@f1+1
  6774  00062E  C170  F12C         	movff	printf@fval+2,___fttol@f1+2
  6775  000632  EC89  F01F         	call	___fttol	;wreg free
  6776  000636  C12A  F166         	movff	?___fttol,printf@val
  6777  00063A  C12B  F167         	movff	?___fttol+1,printf@val+1
  6778  00063E  C12C  F168         	movff	?___fttol+2,printf@val+2
  6779  000642  C12D  F169         	movff	?___fttol+3,printf@val+3
  6780                           
  6781                           ;doprnt.c: 1132: fval -= (double)val;
  6782  000646  C16E  F139         	movff	printf@fval,___ftsub@f1
  6783  00064A  C16F  F13A         	movff	printf@fval+1,___ftsub@f1+1
  6784  00064E  C170  F13B         	movff	printf@fval+2,___ftsub@f1+2
  6785  000652  C166  F108         	movff	printf@val,___lltoft@c
  6786  000656  C167  F109         	movff	printf@val+1,___lltoft@c+1
  6787  00065A  C168  F10A         	movff	printf@val+2,___lltoft@c+2
  6788  00065E  C169  F10B         	movff	printf@val+3,___lltoft@c+3
  6789  000662  EC94  F032         	call	___lltoft	;wreg free
  6790  000666  C108  F13C         	movff	?___lltoft,___ftsub@f2
  6791  00066A  C109  F13D         	movff	?___lltoft+1,___ftsub@f2+1
  6792  00066E  C10A  F13E         	movff	?___lltoft+2,___ftsub@f2+2
  6793  000672  EC3C  F036         	call	___ftsub	;wreg free
  6794  000676  C139  F16E         	movff	?___ftsub,printf@fval
  6795  00067A  C13A  F16F         	movff	?___ftsub+1,printf@fval+1
  6796  00067E  C13B  F170         	movff	?___ftsub+2,printf@fval+2
  6797                           
  6798                           ;doprnt.c: 1133: exp = 0;
  6799  000682  0E00               	movlw	0
  6800  000684  0101               	movlb	1	; () banked
  6801  000686  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6802  000688  0E00               	movlw	0
  6803  00068A  6F6A               	movwf	printf@exp& (0+255),b
  6804  00068C                     l10541:
  6805                           
  6806                           ; BSR set to: 1
  6807                           ;doprnt.c: 1134: }
  6808                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6809  00068C  0E01               	movlw	1
  6810  00068E  0101               	movlb	1	; () banked
  6811  000690  6F73               	movwf	printf@c& (0+255),b
  6812  000692                     l10543:
  6813                           
  6814                           ; BSR set to: 1
  6815  000692  0E0A               	movlw	10
  6816  000694  0101               	movlb	1	; () banked
  6817  000696  1973               	xorwf	printf@c& (0+255),w,b
  6818  000698  B4D8               	btfsc	status,2,c
  6819  00069A  D01E               	goto	l10555
  6820                           
  6821                           ; BSR set to: 1
  6822                           ;doprnt.c: 1137: if(val < dpowers[c])
  6823                           
  6824                           ; BSR set to: 1
  6825                           
  6826                           ; BSR set to: 1
  6827  00069C  0101               	movlb	1	; () banked
  6828  00069E  5173               	movf	printf@c& (0+255),w,b
  6829  0006A0  0D04               	mullw	4
  6830  0006A2  0ED5               	movlw	low _dpowers
  6831  0006A4  24F3               	addwf	prodl,w,c
  6832  0006A6  6EF6               	movwf	tblptrl,c
  6833  0006A8  0E7C               	movlw	high _dpowers
  6834  0006AA  20F4               	addwfc	prodh,w,c
  6835  0006AC  6EF7               	movwf	tblptrh,c
  6836  0006AE                     	if	0	;There are less than 3 active tblptr bytes
  6837  0006AE                     	endif
  6838  0006AE  0009               	tblrd		*+
  6839  0006B0  50F5               	movf	tablat,w,c
  6840  0006B2  0101               	movlb	1	; () banked
  6841  0006B4  5D66               	subwf	printf@val& (0+255),w,b
  6842  0006B6  0009               	tblrd		*+
  6843  0006B8  50F5               	movf	tablat,w,c
  6844  0006BA  0101               	movlb	1	; () banked
  6845  0006BC  5967               	subwfb	(printf@val+1)& (0+255),w,b
  6846  0006BE  0009               	tblrd		*+
  6847  0006C0  50F5               	movf	tablat,w,c
  6848  0006C2  0101               	movlb	1	; () banked
  6849  0006C4  5968               	subwfb	(printf@val+2)& (0+255),w,b
  6850  0006C6  0009               	tblrd		*+
  6851  0006C8  50F5               	movf	tablat,w,c
  6852  0006CA  0101               	movlb	1	; () banked
  6853  0006CC  5969               	subwfb	(printf@val+3)& (0+255),w,b
  6854  0006CE  A0D8               	btfss	status,0,c
  6855  0006D0  D003               	goto	l10555
  6856                           
  6857                           ; BSR set to: 1
  6858                           
  6859                           ; BSR set to: 1
  6860                           
  6861                           ; BSR set to: 1
  6862                           ;doprnt.c: 1138: break;
  6863  0006D2  0101               	movlb	1	; () banked
  6864  0006D4  2B73               	incf	printf@c& (0+255),f,b
  6865  0006D6  D7DD               	goto	l10543
  6866  0006D8                     l10555:
  6867                           
  6868                           ; BSR set to: 1
  6869                           ;doprnt.c: 1142: width -= prec + c + exp;
  6870  0006D8  C173  F151         	movff	printf@c,??_printf
  6871  0006DC  0101               	movlb	1	; () banked
  6872  0006DE  6B52               	clrf	(??_printf+1)& (0+255),b
  6873  0006E0  BF51               	btfsc	??_printf& (0+255),7,b
  6874  0006E2  0752               	decf	(??_printf+1)& (0+255),f,b
  6875  0006E4  0101               	movlb	1	; () banked
  6876  0006E6  5171               	movf	printf@prec& (0+255),w,b
  6877  0006E8  0101               	movlb	1	; () banked
  6878  0006EA  2751               	addwf	??_printf& (0+255),f,b
  6879  0006EC  0101               	movlb	1	; () banked
  6880  0006EE  5172               	movf	(printf@prec+1)& (0+255),w,b
  6881  0006F0  0101               	movlb	1	; () banked
  6882  0006F2  2352               	addwfc	(??_printf+1)& (0+255),f,b
  6883  0006F4  0101               	movlb	1	; () banked
  6884  0006F6  516A               	movf	printf@exp& (0+255),w,b
  6885  0006F8  0101               	movlb	1	; () banked
  6886  0006FA  2751               	addwf	??_printf& (0+255),f,b
  6887  0006FC  0101               	movlb	1	; () banked
  6888  0006FE  516B               	movf	(printf@exp+1)& (0+255),w,b
  6889  000700  0101               	movlb	1	; () banked
  6890  000702  2352               	addwfc	(??_printf+1)& (0+255),f,b
  6891  000704  0101               	movlb	1	; () banked
  6892  000706  5151               	movf	??_printf& (0+255),w,b
  6893  000708  0101               	movlb	1	; () banked
  6894  00070A  5F6C               	subwf	printf@width& (0+255),f,b
  6895  00070C  0101               	movlb	1	; () banked
  6896  00070E  5152               	movf	(??_printf+1)& (0+255),w,b
  6897  000710  0101               	movlb	1	; () banked
  6898  000712  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  6899                           
  6900                           ;doprnt.c: 1143: if(
  6901                           ;doprnt.c: 1147: prec)
  6902  000714  0101               	movlb	1	; () banked
  6903  000716  5171               	movf	printf@prec& (0+255),w,b
  6904  000718  0101               	movlb	1	; () banked
  6905  00071A  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  6906  00071C  B4D8               	btfsc	status,2,c
  6907  00071E  D004               	goto	l10559
  6908                           
  6909                           ; BSR set to: 1
  6910                           ;doprnt.c: 1148: width--;
  6911  000720  0101               	movlb	1	; () banked
  6912  000722  076C               	decf	printf@width& (0+255),f,b
  6913  000724  A0D8               	btfss	status,0,c
  6914  000726  076D               	decf	(printf@width+1)& (0+255),f,b
  6915  000728                     l10559:
  6916                           
  6917                           ; BSR set to: 1
  6918                           ;doprnt.c: 1149: if(flag & 0x03)
  6919  000728  0E03               	movlw	3
  6920  00072A  0101               	movlb	1	; () banked
  6921  00072C  1560               	andwf	printf@flag& (0+255),w,b
  6922  00072E  0101               	movlb	1	; () banked
  6923  000730  6F51               	movwf	??_printf& (0+255),b
  6924  000732  0E00               	movlw	0
  6925  000734  0101               	movlb	1	; () banked
  6926  000736  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6927  000738  0101               	movlb	1	; () banked
  6928  00073A  6F52               	movwf	(??_printf+1)& (0+255),b
  6929  00073C  0101               	movlb	1	; () banked
  6930  00073E  5151               	movf	??_printf& (0+255),w,b
  6931  000740  0101               	movlb	1	; () banked
  6932  000742  1152               	iorwf	(??_printf+1)& (0+255),w,b
  6933  000744  B4D8               	btfsc	status,2,c
  6934  000746  D008               	goto	l10567
  6935  000748  D003               	goto	l10565
  6936  00074A                     l10563:
  6937                           
  6938                           ; BSR set to: 1
  6939                           ;doprnt.c: 1181: (putch(' ') );
  6940  00074A  0E20               	movlw	32
  6941  00074C  EC23  F039         	call	_putch
  6942  000750                     l10565:
  6943                           
  6944                           ;doprnt.c: 1182: width--;
  6945  000750  0101               	movlb	1	; () banked
  6946  000752  076C               	decf	printf@width& (0+255),f,b
  6947  000754  A0D8               	btfss	status,0,c
  6948  000756  076D               	decf	(printf@width+1)& (0+255),f,b
  6949  000758                     l10567:
  6950                           
  6951                           ; BSR set to: 1
  6952  000758  0101               	movlb	1	; () banked
  6953  00075A  BF6D               	btfsc	(printf@width+1)& (0+255),7,b
  6954  00075C  D007               	goto	l10569
  6955  00075E  0101               	movlb	1	; () banked
  6956  000760  516D               	movf	(printf@width+1)& (0+255),w,b
  6957  000762  E1F3               	bnz	l10563
  6958  000764  0101               	movlb	1	; () banked
  6959  000766  056C               	decf	printf@width& (0+255),w,b
  6960  000768  B0D8               	btfsc	status,0,c
  6961  00076A  D7EF               	goto	l10563
  6962  00076C                     l10569:
  6963                           
  6964                           ; BSR set to: 1
  6965                           ;doprnt.c: 1183: }
  6966                           ;doprnt.c: 1188: if(flag & 0x03)
  6967  00076C  0E03               	movlw	3
  6968  00076E  0101               	movlb	1	; () banked
  6969  000770  1560               	andwf	printf@flag& (0+255),w,b
  6970  000772  0101               	movlb	1	; () banked
  6971  000774  6F51               	movwf	??_printf& (0+255),b
  6972  000776  0E00               	movlw	0
  6973  000778  0101               	movlb	1	; () banked
  6974  00077A  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6975  00077C  0101               	movlb	1	; () banked
  6976  00077E  6F52               	movwf	(??_printf+1)& (0+255),b
  6977  000780  0101               	movlb	1	; () banked
  6978  000782  5151               	movf	??_printf& (0+255),w,b
  6979  000784  0101               	movlb	1	; () banked
  6980  000786  1152               	iorwf	(??_printf+1)& (0+255),w,b
  6981  000788  B4D8               	btfsc	status,2,c
  6982  00078A  D04B               	goto	l10579
  6983                           
  6984                           ; BSR set to: 1
  6985                           ;doprnt.c: 1190: (putch('-') );
  6986  00078C  0E2D               	movlw	45
  6987  00078E  EC23  F039         	call	_putch
  6988                           
  6989                           ;doprnt.c: 1195: }
  6990                           ;doprnt.c: 1196: while(c--) {
  6991  000792  D047               	goto	l10579
  6992  000794                     l10573:
  6993                           
  6994                           ;doprnt.c: 1200: {
  6995                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6996  000794  C166  F100         	movff	printf@val,___lldiv@dividend
  6997  000798  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  6998  00079C  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  6999  0007A0  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  7000  0007A4  0101               	movlb	1	; () banked
  7001  0007A6  5173               	movf	printf@c& (0+255),w,b
  7002  0007A8  0D04               	mullw	4
  7003  0007AA  0ED5               	movlw	low _dpowers
  7004  0007AC  24F3               	addwf	prodl,w,c
  7005  0007AE  6EF6               	movwf	tblptrl,c
  7006  0007B0  0E7C               	movlw	high _dpowers
  7007  0007B2  20F4               	addwfc	prodh,w,c
  7008  0007B4  6EF7               	movwf	tblptrh,c
  7009  0007B6                     	if	0	;There are less than 3 active tblptr bytes
  7010  0007B6                     	endif
  7011  0007B6  0009               	tblrd		*+
  7012  0007B8  CFF5 F104          	movff	tablat,___lldiv@divisor
  7013  0007BC  0009               	tblrd		*+
  7014  0007BE  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  7015  0007C2  0009               	tblrd		*+
  7016  0007C4  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  7017  0007C8  000A               	tblrd		*-
  7018  0007CA  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  7019  0007CE  EC43  F02C         	call	___lldiv	;wreg free
  7020  0007D2  C100  F162         	movff	?___lldiv,printf@tmpval
  7021  0007D6  C101  F163         	movff	?___lldiv+1,printf@tmpval+1
  7022  0007DA  C102  F164         	movff	?___lldiv+2,printf@tmpval+2
  7023  0007DE  C103  F165         	movff	?___lldiv+3,printf@tmpval+3
  7024                           
  7025                           ;doprnt.c: 1202: tmpval.vd %= 10;
  7026  0007E2  C162  F10D         	movff	printf@tmpval,___llmod@dividend
  7027  0007E6  C163  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  7028  0007EA  C164  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  7029  0007EE  C165  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  7030  0007F2  0E0A               	movlw	10
  7031  0007F4  0101               	movlb	1	; () banked
  7032  0007F6  6F11               	movwf	___llmod@divisor& (0+255),b
  7033  0007F8  0E00               	movlw	0
  7034  0007FA  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  7035  0007FC  0E00               	movlw	0
  7036  0007FE  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  7037  000800  0E00               	movlw	0
  7038  000802  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  7039  000804  ECF3  F02E         	call	___llmod	;wreg free
  7040  000808  C10D  F162         	movff	?___llmod,printf@tmpval
  7041  00080C  C10E  F163         	movff	?___llmod+1,printf@tmpval+1
  7042  000810  C10F  F164         	movff	?___llmod+2,printf@tmpval+2
  7043  000814  C110  F165         	movff	?___llmod+3,printf@tmpval+3
  7044                           
  7045                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  7046  000818  0101               	movlb	1	; () banked
  7047  00081A  5162               	movf	printf@tmpval& (0+255),w,b
  7048  00081C  0F30               	addlw	48
  7049  00081E  EC23  F039         	call	_putch
  7050  000822                     l10579:
  7051  000822  0101               	movlb	1	; () banked
  7052  000824  0773               	decf	printf@c& (0+255),f,b
  7053  000826  0101               	movlb	1	; () banked
  7054  000828  2973               	incf	printf@c& (0+255),w,b
  7055  00082A  B4D8               	btfsc	status,2,c
  7056  00082C  D008               	goto	l10585
  7057  00082E  D7B2               	goto	l10573
  7058  000830                     l10581:
  7059                           
  7060                           ; BSR set to: 1
  7061                           ;doprnt.c: 1208: (putch('0') );
  7062  000830  0E30               	movlw	48
  7063  000832  EC23  F039         	call	_putch
  7064                           
  7065                           ;doprnt.c: 1209: exp--;
  7066  000836  0101               	movlb	1	; () banked
  7067  000838  076A               	decf	printf@exp& (0+255),f,b
  7068  00083A  A0D8               	btfss	status,0,c
  7069  00083C  076B               	decf	(printf@exp+1)& (0+255),f,b
  7070  00083E                     l10585:
  7071                           
  7072                           ; BSR set to: 1
  7073  00083E  0101               	movlb	1	; () banked
  7074  000840  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  7075  000842  D007               	goto	l10587
  7076  000844  0101               	movlb	1	; () banked
  7077  000846  516B               	movf	(printf@exp+1)& (0+255),w,b
  7078  000848  E1F3               	bnz	l10581
  7079  00084A  0101               	movlb	1	; () banked
  7080  00084C  056A               	decf	printf@exp& (0+255),w,b
  7081  00084E  B0D8               	btfsc	status,0,c
  7082  000850  D7EF               	goto	l10581
  7083  000852                     l10587:
  7084                           
  7085                           ; BSR set to: 1
  7086                           ;doprnt.c: 1210: }
  7087                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  7088  000852  0101               	movlb	1	; () banked
  7089  000854  BF72               	btfsc	(printf@prec+1)& (0+255),7,b
  7090  000856  D00C               	goto	l1047
  7091  000858  0101               	movlb	1	; () banked
  7092  00085A  5172               	movf	(printf@prec+1)& (0+255),w,b
  7093  00085C  E105               	bnz	u15450
  7094  00085E  0E09               	movlw	9
  7095  000860  0101               	movlb	1	; () banked
  7096  000862  5D71               	subwf	printf@prec& (0+255),w,b
  7097  000864  A0D8               	btfss	status,0,c
  7098  000866  D004               	goto	l1047
  7099  000868                     u15450:
  7100                           
  7101                           ; BSR set to: 1
  7102                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  7103  000868  0E08               	movlw	8
  7104  00086A  0101               	movlb	1	; () banked
  7105  00086C  6F73               	movwf	printf@c& (0+255),b
  7106  00086E  D002               	goto	l10591
  7107  000870                     l1047:
  7108                           
  7109                           ; BSR set to: 1
  7110                           ;doprnt.c: 1213: else
  7111                           ;doprnt.c: 1214: c = prec;
  7112  000870  C171  F173         	movff	printf@prec,printf@c
  7113  000874                     l10591:
  7114                           
  7115                           ; BSR set to: 1
  7116                           ;doprnt.c: 1215: prec -= c;
  7117  000874  0101               	movlb	1	; () banked
  7118  000876  5173               	movf	printf@c& (0+255),w,b
  7119  000878  0101               	movlb	1	; () banked
  7120  00087A  5F71               	subwf	printf@prec& (0+255),f,b
  7121  00087C  0E00               	movlw	0
  7122  00087E  0101               	movlb	1	; () banked
  7123  000880  BF73               	btfsc	printf@c& (0+255),7,b
  7124  000882  0EFF               	movlw	255
  7125  000884  0101               	movlb	1	; () banked
  7126  000886  5B72               	subwfb	(printf@prec+1)& (0+255),f,b
  7127                           
  7128                           ; BSR set to: 1
  7129                           ;doprnt.c: 1219: if(c)
  7130  000888  0101               	movlb	1	; () banked
  7131  00088A  5173               	movf	printf@c& (0+255),w,b
  7132  00088C  0101               	movlb	1	; () banked
  7133  00088E  B4D8               	btfsc	status,2,c
  7134  000890  D003               	goto	l10597
  7135                           
  7136                           ; BSR set to: 1
  7137                           ;doprnt.c: 1221: (putch('.') );
  7138  000892  0E2E               	movlw	46
  7139  000894  EC23  F039         	call	_putch
  7140  000898                     l10597:
  7141                           
  7142                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7143  000898  0101               	movlb	1	; () banked
  7144  00089A  5173               	movf	printf@c& (0+255),w,b
  7145  00089C  EC7A  F006         	call	_scale
  7146  0008A0  C123  F157         	movff	?_scale,_printf$2847
  7147  0008A4  C124  F158         	movff	?_scale+1,_printf$2847+1
  7148  0008A8  C125  F159         	movff	?_scale+2,_printf$2847+2
  7149                           
  7150                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  7151  0008AC  C16E  F117         	movff	printf@fval,___ftmul@f2
  7152  0008B0  C16F  F118         	movff	printf@fval+1,___ftmul@f2+1
  7153  0008B4  C170  F119         	movff	printf@fval+2,___ftmul@f2+2
  7154  0008B8  C157  F114         	movff	_printf$2847,___ftmul@f1
  7155  0008BC  C158  F115         	movff	_printf$2847+1,___ftmul@f1+1
  7156  0008C0  C159  F116         	movff	_printf$2847+2,___ftmul@f1+2
  7157  0008C4  EC35  F01C         	call	___ftmul	;wreg free
  7158  0008C8  C114  F12A         	movff	?___ftmul,___fttol@f1
  7159  0008CC  C115  F12B         	movff	?___ftmul+1,___fttol@f1+1
  7160  0008D0  C116  F12C         	movff	?___ftmul+2,___fttol@f1+2
  7161  0008D4  EC89  F01F         	call	___fttol	;wreg free
  7162  0008D8  C12A  F166         	movff	?___fttol,printf@val
  7163  0008DC  C12B  F167         	movff	?___fttol+1,printf@val+1
  7164  0008E0  C12C  F168         	movff	?___fttol+2,printf@val+2
  7165  0008E4  C12D  F169         	movff	?___fttol+3,printf@val+3
  7166                           
  7167                           ;doprnt.c: 1228: while(c--) {
  7168  0008E8  D06E               	goto	l10607
  7169  0008EA                     l10601:
  7170                           
  7171                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  7172  0008EA  C166  F100         	movff	printf@val,___lldiv@dividend
  7173  0008EE  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  7174  0008F2  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  7175  0008F6  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  7176  0008FA  0101               	movlb	1	; () banked
  7177  0008FC  5173               	movf	printf@c& (0+255),w,b
  7178  0008FE  0D04               	mullw	4
  7179  000900  0ED5               	movlw	low _dpowers
  7180  000902  24F3               	addwf	prodl,w,c
  7181  000904  6EF6               	movwf	tblptrl,c
  7182  000906  0E7C               	movlw	high _dpowers
  7183  000908  20F4               	addwfc	prodh,w,c
  7184  00090A  6EF7               	movwf	tblptrh,c
  7185  00090C                     	if	0	;There are less than 3 active tblptr bytes
  7186  00090C                     	endif
  7187  00090C  0009               	tblrd		*+
  7188  00090E  CFF5 F104          	movff	tablat,___lldiv@divisor
  7189  000912  0009               	tblrd		*+
  7190  000914  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  7191  000918  0009               	tblrd		*+
  7192  00091A  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  7193  00091E  000A               	tblrd		*-
  7194  000920  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  7195  000924  EC43  F02C         	call	___lldiv	;wreg free
  7196  000928  C100  F162         	movff	?___lldiv,printf@tmpval
  7197  00092C  C101  F163         	movff	?___lldiv+1,printf@tmpval+1
  7198  000930  C102  F164         	movff	?___lldiv+2,printf@tmpval+2
  7199  000934  C103  F165         	movff	?___lldiv+3,printf@tmpval+3
  7200                           
  7201                           ;doprnt.c: 1230: tmpval.vd %= 10;
  7202  000938  C162  F10D         	movff	printf@tmpval,___llmod@dividend
  7203  00093C  C163  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  7204  000940  C164  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  7205  000944  C165  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  7206  000948  0E0A               	movlw	10
  7207  00094A  0101               	movlb	1	; () banked
  7208  00094C  6F11               	movwf	___llmod@divisor& (0+255),b
  7209  00094E  0E00               	movlw	0
  7210  000950  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  7211  000952  0E00               	movlw	0
  7212  000954  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  7213  000956  0E00               	movlw	0
  7214  000958  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  7215  00095A  ECF3  F02E         	call	___llmod	;wreg free
  7216  00095E  C10D  F162         	movff	?___llmod,printf@tmpval
  7217  000962  C10E  F163         	movff	?___llmod+1,printf@tmpval+1
  7218  000966  C10F  F164         	movff	?___llmod+2,printf@tmpval+2
  7219  00096A  C110  F165         	movff	?___llmod+3,printf@tmpval+3
  7220                           
  7221                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  7222  00096E  0101               	movlb	1	; () banked
  7223  000970  5162               	movf	printf@tmpval& (0+255),w,b
  7224  000972  0F30               	addlw	48
  7225  000974  EC23  F039         	call	_putch
  7226                           
  7227                           ;doprnt.c: 1232: val %= dpowers[c];
  7228  000978  C166  F10D         	movff	printf@val,___llmod@dividend
  7229  00097C  C167  F10E         	movff	printf@val+1,___llmod@dividend+1
  7230  000980  C168  F10F         	movff	printf@val+2,___llmod@dividend+2
  7231  000984  C169  F110         	movff	printf@val+3,___llmod@dividend+3
  7232  000988  0101               	movlb	1	; () banked
  7233  00098A  5173               	movf	printf@c& (0+255),w,b
  7234  00098C  0D04               	mullw	4
  7235  00098E  0ED5               	movlw	low _dpowers
  7236  000990  24F3               	addwf	prodl,w,c
  7237  000992  6EF6               	movwf	tblptrl,c
  7238  000994  0E7C               	movlw	high _dpowers
  7239  000996  20F4               	addwfc	prodh,w,c
  7240  000998  6EF7               	movwf	tblptrh,c
  7241  00099A                     	if	0	;There are less than 3 active tblptr bytes
  7242  00099A                     	endif
  7243  00099A  0009               	tblrd		*+
  7244  00099C  CFF5 F111          	movff	tablat,___llmod@divisor
  7245  0009A0  0009               	tblrd		*+
  7246  0009A2  CFF5 F112          	movff	tablat,___llmod@divisor+1
  7247  0009A6  0009               	tblrd		*+
  7248  0009A8  CFF5 F113          	movff	tablat,___llmod@divisor+2
  7249  0009AC  000A               	tblrd		*-
  7250  0009AE  CFF5 F114          	movff	tablat,___llmod@divisor+3
  7251  0009B2  ECF3  F02E         	call	___llmod	;wreg free
  7252  0009B6  C10D  F166         	movff	?___llmod,printf@val
  7253  0009BA  C10E  F167         	movff	?___llmod+1,printf@val+1
  7254  0009BE  C10F  F168         	movff	?___llmod+2,printf@val+2
  7255  0009C2  C110  F169         	movff	?___llmod+3,printf@val+3
  7256  0009C6                     l10607:
  7257  0009C6  0101               	movlb	1	; () banked
  7258  0009C8  0773               	decf	printf@c& (0+255),f,b
  7259  0009CA  0101               	movlb	1	; () banked
  7260  0009CC  2973               	incf	printf@c& (0+255),w,b
  7261  0009CE  B4D8               	btfsc	status,2,c
  7262  0009D0  D008               	goto	l10613
  7263  0009D2  D78B               	goto	l10601
  7264  0009D4                     l10609:
  7265                           
  7266                           ; BSR set to: 1
  7267                           ;doprnt.c: 1236: (putch('0') );
  7268  0009D4  0E30               	movlw	48
  7269  0009D6  EC23  F039         	call	_putch
  7270                           
  7271                           ;doprnt.c: 1237: prec--;
  7272  0009DA  0101               	movlb	1	; () banked
  7273  0009DC  0771               	decf	printf@prec& (0+255),f,b
  7274  0009DE  A0D8               	btfss	status,0,c
  7275  0009E0  0772               	decf	(printf@prec+1)& (0+255),f,b
  7276  0009E2                     l10613:
  7277                           
  7278                           ; BSR set to: 1
  7279  0009E2  0101               	movlb	1	; () banked
  7280  0009E4  5171               	movf	printf@prec& (0+255),w,b
  7281  0009E6  0101               	movlb	1	; () banked
  7282  0009E8  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  7283  0009EA  B4D8               	btfsc	status,2,c
  7284  0009EC  D173               	goto	l10693
  7285  0009EE  D7F2               	goto	l10609
  7286  0009F0                     l1013:
  7287                           
  7288                           ; BSR set to: 1
  7289                           ;doprnt.c: 1246: }
  7290                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  7291  0009F0  0101               	movlb	1	; () banked
  7292  0009F2  BD60               	btfsc	printf@flag& (0+255),6,b
  7293  0009F4  D023               	goto	l10625
  7294                           
  7295                           ; BSR set to: 1
  7296                           ;doprnt.c: 1253: {
  7297                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7298  0009F6  C15E  FFD9         	movff	printf@ap,fsr2l
  7299  0009FA  C15F  FFDA         	movff	printf@ap+1,fsr2h
  7300  0009FE  CFDE F166          	movff	postinc2,printf@val
  7301  000A02  CFDD F167          	movff	postdec2,printf@val+1
  7302  000A06  0101               	movlb	1	; () banked
  7303  000A08  0E00               	movlw	0
  7304  000A0A  BF67               	btfsc	(printf@val+1)& (0+255),7,b
  7305  000A0C  0EFF               	movlw	-1
  7306  000A0E  6F68               	movwf	(printf@val+2)& (0+255),b
  7307  000A10  6F69               	movwf	(printf@val+3)& (0+255),b
  7308                           
  7309                           ; BSR set to: 1
  7310  000A12  0E02               	movlw	2
  7311  000A14  0101               	movlb	1	; () banked
  7312  000A16  275E               	addwf	printf@ap& (0+255),f,b
  7313  000A18  0E00               	movlw	0
  7314  000A1A  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  7315                           
  7316                           ; BSR set to: 1
  7317                           ;doprnt.c: 1261: if((long)val < 0) {
  7318  000A1C  0101               	movlb	1	; () banked
  7319  000A1E  AF69               	btfss	(printf@val+3)& (0+255),7,b
  7320  000A20  D021               	goto	l10629
  7321                           
  7322                           ; BSR set to: 1
  7323                           ;doprnt.c: 1262: flag |= 0x03;
  7324  000A22  0E03               	movlw	3
  7325  000A24  0101               	movlb	1	; () banked
  7326  000A26  1360               	iorwf	printf@flag& (0+255),f,b
  7327                           
  7328                           ; BSR set to: 1
  7329                           ;doprnt.c: 1263: val = -val;
  7330  000A28  0101               	movlb	1	; () banked
  7331  000A2A  1F69               	comf	(printf@val+3)& (0+255),f,b
  7332  000A2C  1F68               	comf	(printf@val+2)& (0+255),f,b
  7333  000A2E  1F67               	comf	(printf@val+1)& (0+255),f,b
  7334  000A30  6D66               	negf	printf@val& (0+255),b
  7335  000A32  0E00               	movlw	0
  7336  000A34  2367               	addwfc	(printf@val+1)& (0+255),f,b
  7337  000A36  2368               	addwfc	(printf@val+2)& (0+255),f,b
  7338  000A38  2369               	addwfc	(printf@val+3)& (0+255),f,b
  7339                           
  7340                           ; BSR set to: 1
  7341                           ;doprnt.c: 1264: }
  7342                           ;doprnt.c: 1266: }
  7343  000A3A  D014               	goto	l10629
  7344  000A3C                     l10625:
  7345                           
  7346                           ; BSR set to: 1
  7347                           ;doprnt.c: 1268: else
  7348                           ;doprnt.c: 1273: {
  7349                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7350  000A3C  C15E  FFD9         	movff	printf@ap,fsr2l
  7351  000A40  C15F  FFDA         	movff	printf@ap+1,fsr2h
  7352  000A44  CFDE F151          	movff	postinc2,??_printf
  7353  000A48  CFDD F152          	movff	postdec2,??_printf+1
  7354  000A4C  C151  F166         	movff	??_printf,printf@val
  7355  000A50  C152  F167         	movff	??_printf+1,printf@val+1
  7356  000A54  0101               	movlb	1	; () banked
  7357  000A56  6B68               	clrf	(printf@val+2)& (0+255),b
  7358  000A58  6B69               	clrf	(printf@val+3)& (0+255),b
  7359                           
  7360                           ; BSR set to: 1
  7361  000A5A  0E02               	movlw	2
  7362  000A5C  0101               	movlb	1	; () banked
  7363  000A5E  275E               	addwf	printf@ap& (0+255),f,b
  7364  000A60  0E00               	movlw	0
  7365  000A62  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  7366  000A64                     l10629:
  7367                           
  7368                           ; BSR set to: 1
  7369                           ;doprnt.c: 1287: }
  7370                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7371  000A64  0101               	movlb	1	; () banked
  7372  000A66  5171               	movf	printf@prec& (0+255),w,b
  7373  000A68  0101               	movlb	1	; () banked
  7374  000A6A  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  7375  000A6C  A4D8               	btfss	status,2,c
  7376  000A6E  D00D               	goto	l10635
  7377                           
  7378                           ; BSR set to: 1
  7379  000A70  0101               	movlb	1	; () banked
  7380  000A72  5166               	movf	printf@val& (0+255),w,b
  7381  000A74  0101               	movlb	1	; () banked
  7382  000A76  1167               	iorwf	(printf@val+1)& (0+255),w,b
  7383  000A78  0101               	movlb	1	; () banked
  7384  000A7A  1168               	iorwf	(printf@val+2)& (0+255),w,b
  7385  000A7C  0101               	movlb	1	; () banked
  7386  000A7E  1169               	iorwf	(printf@val+3)& (0+255),w,b
  7387  000A80  A4D8               	btfss	status,2,c
  7388  000A82  D003               	goto	l10635
  7389                           
  7390                           ; BSR set to: 1
  7391                           ;doprnt.c: 1291: prec++;
  7392  000A84  0101               	movlb	1	; () banked
  7393  000A86  4B71               	infsnz	printf@prec& (0+255),f,b
  7394  000A88  2B72               	incf	(printf@prec+1)& (0+255),f,b
  7395  000A8A                     l10635:
  7396                           
  7397                           ; BSR set to: 1
  7398                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7399  000A8A  0E01               	movlw	1
  7400  000A8C  0101               	movlb	1	; () banked
  7401  000A8E  6F73               	movwf	printf@c& (0+255),b
  7402  000A90                     l10637:
  7403                           
  7404                           ; BSR set to: 1
  7405  000A90  0E0A               	movlw	10
  7406  000A92  0101               	movlb	1	; () banked
  7407  000A94  1973               	xorwf	printf@c& (0+255),w,b
  7408  000A96  B4D8               	btfsc	status,2,c
  7409  000A98  D01E               	goto	l10649
  7410                           
  7411                           ; BSR set to: 1
  7412                           ;doprnt.c: 1306: if(val < dpowers[c])
  7413                           
  7414                           ; BSR set to: 1
  7415                           
  7416                           ; BSR set to: 1
  7417  000A9A  0101               	movlb	1	; () banked
  7418  000A9C  5173               	movf	printf@c& (0+255),w,b
  7419  000A9E  0D04               	mullw	4
  7420  000AA0  0ED5               	movlw	low _dpowers
  7421  000AA2  24F3               	addwf	prodl,w,c
  7422  000AA4  6EF6               	movwf	tblptrl,c
  7423  000AA6  0E7C               	movlw	high _dpowers
  7424  000AA8  20F4               	addwfc	prodh,w,c
  7425  000AAA  6EF7               	movwf	tblptrh,c
  7426  000AAC                     	if	0	;There are less than 3 active tblptr bytes
  7427  000AAC                     	endif
  7428  000AAC  0009               	tblrd		*+
  7429  000AAE  50F5               	movf	tablat,w,c
  7430  000AB0  0101               	movlb	1	; () banked
  7431  000AB2  5D66               	subwf	printf@val& (0+255),w,b
  7432  000AB4  0009               	tblrd		*+
  7433  000AB6  50F5               	movf	tablat,w,c
  7434  000AB8  0101               	movlb	1	; () banked
  7435  000ABA  5967               	subwfb	(printf@val+1)& (0+255),w,b
  7436  000ABC  0009               	tblrd		*+
  7437  000ABE  50F5               	movf	tablat,w,c
  7438  000AC0  0101               	movlb	1	; () banked
  7439  000AC2  5968               	subwfb	(printf@val+2)& (0+255),w,b
  7440  000AC4  0009               	tblrd		*+
  7441  000AC6  50F5               	movf	tablat,w,c
  7442  000AC8  0101               	movlb	1	; () banked
  7443  000ACA  5969               	subwfb	(printf@val+3)& (0+255),w,b
  7444  000ACC  A0D8               	btfss	status,0,c
  7445  000ACE  D003               	goto	l10649
  7446                           
  7447                           ; BSR set to: 1
  7448                           
  7449                           ; BSR set to: 1
  7450                           
  7451                           ; BSR set to: 1
  7452                           ;doprnt.c: 1307: break;
  7453  000AD0  0101               	movlb	1	; () banked
  7454  000AD2  2B73               	incf	printf@c& (0+255),f,b
  7455  000AD4  D7DD               	goto	l10637
  7456  000AD6                     l10649:
  7457                           
  7458                           ; BSR set to: 1
  7459                           ;doprnt.c: 1339: if(c < prec)
  7460  000AD6  0E80               	movlw	128
  7461  000AD8  0101               	movlb	1	; () banked
  7462  000ADA  BF73               	btfsc	printf@c& (0+255),7,b
  7463  000ADC  0E7F               	movlw	127
  7464  000ADE  0101               	movlb	1	; () banked
  7465  000AE0  6F51               	movwf	??_printf& (0+255),b
  7466  000AE2  0101               	movlb	1	; () banked
  7467  000AE4  5171               	movf	printf@prec& (0+255),w,b
  7468  000AE6  0101               	movlb	1	; () banked
  7469  000AE8  5D73               	subwf	printf@c& (0+255),w,b
  7470  000AEA  0101               	movlb	1	; () banked
  7471  000AEC  5172               	movf	(printf@prec+1)& (0+255),w,b
  7472  000AEE  0A80               	xorlw	128
  7473  000AF0  0101               	movlb	1	; () banked
  7474  000AF2  5951               	subwfb	??_printf& (0+255),w,b
  7475  000AF4  B0D8               	btfsc	status,0,c
  7476  000AF6  D003               	goto	l10653
  7477                           
  7478                           ; BSR set to: 1
  7479                           ;doprnt.c: 1340: c = prec;
  7480  000AF8  C171  F173         	movff	printf@prec,printf@c
  7481  000AFC  D018               	goto	l10657
  7482  000AFE                     l10653:
  7483                           
  7484                           ; BSR set to: 1
  7485                           ;doprnt.c: 1341: else if(prec < c)
  7486  000AFE  0101               	movlb	1	; () banked
  7487  000B00  5172               	movf	(printf@prec+1)& (0+255),w,b
  7488  000B02  0A80               	xorlw	128
  7489  000B04  0101               	movlb	1	; () banked
  7490  000B06  6F51               	movwf	??_printf& (0+255),b
  7491  000B08  0101               	movlb	1	; () banked
  7492  000B0A  5173               	movf	printf@c& (0+255),w,b
  7493  000B0C  0101               	movlb	1	; () banked
  7494  000B0E  5D71               	subwf	printf@prec& (0+255),w,b
  7495  000B10  0E80               	movlw	128
  7496  000B12  0101               	movlb	1	; () banked
  7497  000B14  BF73               	btfsc	printf@c& (0+255),7,b
  7498  000B16  0E7F               	movlw	127
  7499  000B18  0101               	movlb	1	; () banked
  7500  000B1A  5951               	subwfb	??_printf& (0+255),w,b
  7501  000B1C  B0D8               	btfsc	status,0,c
  7502  000B1E  D007               	goto	l10657
  7503                           
  7504                           ; BSR set to: 1
  7505                           ;doprnt.c: 1342: prec = c;
  7506  000B20  0101               	movlb	1	; () banked
  7507  000B22  5173               	movf	printf@c& (0+255),w,b
  7508  000B24  0101               	movlb	1	; () banked
  7509  000B26  6F71               	movwf	printf@prec& (0+255),b
  7510  000B28  6B72               	clrf	(printf@prec+1)& (0+255),b
  7511  000B2A  BF71               	btfsc	printf@prec& (0+255),7,b
  7512  000B2C  0772               	decf	(printf@prec+1)& (0+255),f,b
  7513  000B2E                     l10657:
  7514                           
  7515                           ; BSR set to: 1
  7516                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7517  000B2E  0101               	movlb	1	; () banked
  7518  000B30  516C               	movf	printf@width& (0+255),w,b
  7519  000B32  0101               	movlb	1	; () banked
  7520  000B34  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7521  000B36  B4D8               	btfsc	status,2,c
  7522  000B38  D014               	goto	l10663
  7523                           
  7524                           ; BSR set to: 1
  7525  000B3A  0E03               	movlw	3
  7526  000B3C  0101               	movlb	1	; () banked
  7527  000B3E  1560               	andwf	printf@flag& (0+255),w,b
  7528  000B40  0101               	movlb	1	; () banked
  7529  000B42  6F51               	movwf	??_printf& (0+255),b
  7530  000B44  0E00               	movlw	0
  7531  000B46  0101               	movlb	1	; () banked
  7532  000B48  1561               	andwf	(printf@flag+1)& (0+255),w,b
  7533  000B4A  0101               	movlb	1	; () banked
  7534  000B4C  6F52               	movwf	(??_printf+1)& (0+255),b
  7535  000B4E  0101               	movlb	1	; () banked
  7536  000B50  5151               	movf	??_printf& (0+255),w,b
  7537  000B52  0101               	movlb	1	; () banked
  7538  000B54  1152               	iorwf	(??_printf+1)& (0+255),w,b
  7539  000B56  B4D8               	btfsc	status,2,c
  7540  000B58  D004               	goto	l10663
  7541                           
  7542                           ; BSR set to: 1
  7543                           ;doprnt.c: 1346: width--;
  7544  000B5A  0101               	movlb	1	; () banked
  7545  000B5C  076C               	decf	printf@width& (0+255),f,b
  7546  000B5E  A0D8               	btfss	status,0,c
  7547  000B60  076D               	decf	(printf@width+1)& (0+255),f,b
  7548  000B62                     l10663:
  7549                           
  7550                           ; BSR set to: 1
  7551                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7552  000B62  0101               	movlb	1	; () banked
  7553  000B64  AD61               	btfss	(printf@flag+1)& (0+255),6,b
  7554  000B66  D01E               	goto	l10671
  7555                           
  7556                           ; BSR set to: 1
  7557                           ;doprnt.c: 1349: if(width > prec)
  7558  000B68  0101               	movlb	1	; () banked
  7559  000B6A  516C               	movf	printf@width& (0+255),w,b
  7560  000B6C  0101               	movlb	1	; () banked
  7561  000B6E  5D71               	subwf	printf@prec& (0+255),w,b
  7562  000B70  0101               	movlb	1	; () banked
  7563  000B72  5172               	movf	(printf@prec+1)& (0+255),w,b
  7564  000B74  0A80               	xorlw	128
  7565  000B76  0101               	movlb	1	; () banked
  7566  000B78  6F51               	movwf	??_printf& (0+255),b
  7567  000B7A  0101               	movlb	1	; () banked
  7568  000B7C  516D               	movf	(printf@width+1)& (0+255),w,b
  7569  000B7E  0A80               	xorlw	128
  7570  000B80  0101               	movlb	1	; () banked
  7571  000B82  5951               	subwfb	??_printf& (0+255),w,b
  7572  000B84  B0D8               	btfsc	status,0,c
  7573  000B86  D009               	goto	l10669
  7574                           
  7575                           ; BSR set to: 1
  7576                           ;doprnt.c: 1350: width -= prec;
  7577  000B88  0101               	movlb	1	; () banked
  7578  000B8A  5171               	movf	printf@prec& (0+255),w,b
  7579  000B8C  0101               	movlb	1	; () banked
  7580  000B8E  5F6C               	subwf	printf@width& (0+255),f,b
  7581  000B90  0101               	movlb	1	; () banked
  7582  000B92  5172               	movf	(printf@prec+1)& (0+255),w,b
  7583  000B94  0101               	movlb	1	; () banked
  7584  000B96  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  7585  000B98  D005               	goto	l10671
  7586  000B9A                     l10669:
  7587                           
  7588                           ; BSR set to: 1
  7589                           ;doprnt.c: 1351: else
  7590                           ;doprnt.c: 1352: width = 0;
  7591  000B9A  0E00               	movlw	0
  7592  000B9C  0101               	movlb	1	; () banked
  7593  000B9E  6F6D               	movwf	(printf@width+1)& (0+255),b
  7594  000BA0  0E00               	movlw	0
  7595  000BA2  6F6C               	movwf	printf@width& (0+255),b
  7596  000BA4                     l10671:
  7597                           
  7598                           ; BSR set to: 1
  7599                           ;doprnt.c: 1353: }
  7600                           ;doprnt.c: 1381: if(width > c)
  7601  000BA4  0E80               	movlw	128
  7602  000BA6  0101               	movlb	1	; () banked
  7603  000BA8  BF73               	btfsc	printf@c& (0+255),7,b
  7604  000BAA  0E7F               	movlw	127
  7605  000BAC  0101               	movlb	1	; () banked
  7606  000BAE  6F51               	movwf	??_printf& (0+255),b
  7607  000BB0  0101               	movlb	1	; () banked
  7608  000BB2  516C               	movf	printf@width& (0+255),w,b
  7609  000BB4  0101               	movlb	1	; () banked
  7610  000BB6  5D73               	subwf	printf@c& (0+255),w,b
  7611  000BB8  0101               	movlb	1	; () banked
  7612  000BBA  516D               	movf	(printf@width+1)& (0+255),w,b
  7613  000BBC  0A80               	xorlw	128
  7614  000BBE  0101               	movlb	1	; () banked
  7615  000BC0  5951               	subwfb	??_printf& (0+255),w,b
  7616  000BC2  B0D8               	btfsc	status,0,c
  7617  000BC4  D00B               	goto	l10675
  7618                           
  7619                           ; BSR set to: 1
  7620                           ;doprnt.c: 1382: width -= c;
  7621  000BC6  0101               	movlb	1	; () banked
  7622  000BC8  5173               	movf	printf@c& (0+255),w,b
  7623  000BCA  0101               	movlb	1	; () banked
  7624  000BCC  5F6C               	subwf	printf@width& (0+255),f,b
  7625  000BCE  0E00               	movlw	0
  7626  000BD0  0101               	movlb	1	; () banked
  7627  000BD2  BF73               	btfsc	printf@c& (0+255),7,b
  7628  000BD4  0EFF               	movlw	255
  7629  000BD6  0101               	movlb	1	; () banked
  7630  000BD8  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  7631  000BDA  D005               	goto	l10677
  7632  000BDC                     l10675:
  7633                           
  7634                           ; BSR set to: 1
  7635                           ;doprnt.c: 1383: else
  7636                           ;doprnt.c: 1384: width = 0;
  7637  000BDC  0E00               	movlw	0
  7638  000BDE  0101               	movlb	1	; () banked
  7639  000BE0  6F6D               	movwf	(printf@width+1)& (0+255),b
  7640  000BE2  0E00               	movlw	0
  7641  000BE4  6F6C               	movwf	printf@width& (0+255),b
  7642  000BE6                     l10677:
  7643                           
  7644                           ; BSR set to: 1
  7645                           ;doprnt.c: 1422: {
  7646                           ;doprnt.c: 1424: if(width
  7647                           ;doprnt.c: 1428: )
  7648  000BE6  0101               	movlb	1	; () banked
  7649  000BE8  516C               	movf	printf@width& (0+255),w,b
  7650  000BEA  0101               	movlb	1	; () banked
  7651  000BEC  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7652  000BEE  B4D8               	btfsc	status,2,c
  7653  000BF0  D00D               	goto	l10683
  7654  000BF2                     l10679:
  7655                           
  7656                           ; BSR set to: 1
  7657                           ;doprnt.c: 1430: (putch(' ') );
  7658  000BF2  0E20               	movlw	32
  7659  000BF4  EC23  F039         	call	_putch
  7660                           
  7661                           ;doprnt.c: 1431: while(--width);
  7662  000BF8  0101               	movlb	1	; () banked
  7663  000BFA  076C               	decf	printf@width& (0+255),f,b
  7664  000BFC  A0D8               	btfss	status,0,c
  7665  000BFE  076D               	decf	(printf@width+1)& (0+255),f,b
  7666  000C00  0101               	movlb	1	; () banked
  7667  000C02  516C               	movf	printf@width& (0+255),w,b
  7668  000C04  0101               	movlb	1	; () banked
  7669  000C06  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7670  000C08  A4D8               	btfss	status,2,c
  7671  000C0A  D7F3               	goto	l10679
  7672  000C0C                     l10683:
  7673                           
  7674                           ; BSR set to: 1
  7675                           ;doprnt.c: 1438: if(flag & 0x03)
  7676  000C0C  0E03               	movlw	3
  7677  000C0E  0101               	movlb	1	; () banked
  7678  000C10  1560               	andwf	printf@flag& (0+255),w,b
  7679  000C12  0101               	movlb	1	; () banked
  7680  000C14  6F51               	movwf	??_printf& (0+255),b
  7681  000C16  0E00               	movlw	0
  7682  000C18  0101               	movlb	1	; () banked
  7683  000C1A  1561               	andwf	(printf@flag+1)& (0+255),w,b
  7684  000C1C  0101               	movlb	1	; () banked
  7685  000C1E  6F52               	movwf	(??_printf+1)& (0+255),b
  7686  000C20  0101               	movlb	1	; () banked
  7687  000C22  5151               	movf	??_printf& (0+255),w,b
  7688  000C24  0101               	movlb	1	; () banked
  7689  000C26  1152               	iorwf	(??_printf+1)& (0+255),w,b
  7690  000C28  B4D8               	btfsc	status,2,c
  7691  000C2A  D049               	goto	l10691
  7692                           
  7693                           ; BSR set to: 1
  7694                           ;doprnt.c: 1439: (putch('-') );
  7695  000C2C  0E2D               	movlw	45
  7696  000C2E  EC23  F039         	call	_putch
  7697                           
  7698                           ;doprnt.c: 1469: }
  7699                           ;doprnt.c: 1474: while(prec--) {
  7700  000C32  D045               	goto	l10691
  7701  000C34                     l10687:
  7702                           
  7703                           ;doprnt.c: 1478: {
  7704                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7705  000C34  C171  F151         	movff	printf@prec,??_printf
  7706  000C38  C172  F152         	movff	printf@prec+1,??_printf+1
  7707  000C3C  0101               	movlb	1	; () banked
  7708  000C3E  90D8               	bcf	status,0,c
  7709  000C40  3751               	rlcf	??_printf& (0+255),f,b
  7710  000C42  3752               	rlcf	(??_printf+1)& (0+255),f,b
  7711  000C44  0101               	movlb	1	; () banked
  7712  000C46  90D8               	bcf	status,0,c
  7713  000C48  3751               	rlcf	??_printf& (0+255),f,b
  7714  000C4A  3752               	rlcf	(??_printf+1)& (0+255),f,b
  7715  000C4C  0ED5               	movlw	low _dpowers
  7716  000C4E  0101               	movlb	1	; () banked
  7717  000C50  2551               	addwf	??_printf& (0+255),w,b
  7718  000C52  6EF6               	movwf	tblptrl,c
  7719  000C54  0E7C               	movlw	high _dpowers
  7720  000C56  2152               	addwfc	(??_printf+1)& (0+255),w,b
  7721  000C58  6EF7               	movwf	tblptrh,c
  7722  000C5A                     	if	0	;There are less than 3 active tblptr bytes
  7723  000C5A                     	endif
  7724  000C5A  0009               	tblrd		*+
  7725  000C5C  CFF5 F104          	movff	tablat,___lldiv@divisor
  7726  000C60  0009               	tblrd		*+
  7727  000C62  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  7728  000C66  0009               	tblrd		*+
  7729  000C68  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  7730  000C6C  000A               	tblrd		*-
  7731  000C6E  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  7732  000C72  C166  F100         	movff	printf@val,___lldiv@dividend
  7733  000C76  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  7734  000C7A  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  7735  000C7E  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  7736  000C82  EC43  F02C         	call	___lldiv	;wreg free
  7737  000C86  C100  F10D         	movff	?___lldiv,___llmod@dividend
  7738  000C8A  C101  F10E         	movff	?___lldiv+1,___llmod@dividend+1
  7739  000C8E  C102  F10F         	movff	?___lldiv+2,___llmod@dividend+2
  7740  000C92  C103  F110         	movff	?___lldiv+3,___llmod@dividend+3
  7741  000C96  0E0A               	movlw	10
  7742  000C98  0101               	movlb	1	; () banked
  7743  000C9A  6F11               	movwf	___llmod@divisor& (0+255),b
  7744  000C9C  0E00               	movlw	0
  7745  000C9E  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  7746  000CA0  0E00               	movlw	0
  7747  000CA2  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  7748  000CA4  0E00               	movlw	0
  7749  000CA6  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  7750  000CA8  ECF3  F02E         	call	___llmod	;wreg free
  7751  000CAC  0101               	movlb	1	; () banked
  7752  000CAE  510D               	movf	?___llmod& (0+255),w,b
  7753  000CB0  0F30               	addlw	48
  7754  000CB2  0101               	movlb	1	; () banked
  7755  000CB4  6F73               	movwf	printf@c& (0+255),b
  7756                           
  7757                           ; BSR set to: 1
  7758                           ;doprnt.c: 1523: }
  7759                           ;doprnt.c: 1524: (putch(c) );
  7760  000CB6  0101               	movlb	1	; () banked
  7761  000CB8  5173               	movf	printf@c& (0+255),w,b
  7762  000CBA  EC23  F039         	call	_putch
  7763  000CBE                     l10691:
  7764  000CBE  0101               	movlb	1	; () banked
  7765  000CC0  0771               	decf	printf@prec& (0+255),f,b
  7766  000CC2  A0D8               	btfss	status,0,c
  7767  000CC4  0772               	decf	(printf@prec+1)& (0+255),f,b
  7768  000CC6  0101               	movlb	1	; () banked
  7769  000CC8  2971               	incf	printf@prec& (0+255),w,b
  7770  000CCA  E1B4               	bnz	l10687
  7771  000CCC  0101               	movlb	1	; () banked
  7772  000CCE  2972               	incf	(printf@prec+1)& (0+255),w,b
  7773  000CD0  A4D8               	btfss	status,2,c
  7774  000CD2  D7B0               	goto	l10687
  7775  000CD4                     l10693:
  7776  000CD4  C13F  FFF6         	movff	printf@f,tblptrl
  7777  000CD8  C140  FFF7         	movff	printf@f+1,tblptrh
  7778  000CDC  0101               	movlb	1	; () banked
  7779  000CDE  4B3F               	infsnz	printf@f& (0+255),f,b
  7780  000CE0  2B40               	incf	(printf@f+1)& (0+255),f,b
  7781  000CE2                     	if	0	;tblptru may be non-zero
  7782  000CE2                     	endif
  7783  000CE2                     	if	0	;tblptru may be non-zero
  7784  000CE2                     	endif
  7785  000CE2  0008               	tblrd		*
  7786  000CE4  CFF5 F173          	movff	tablat,printf@c
  7787  000CE8  0101               	movlb	1	; () banked
  7788  000CEA  5173               	movf	printf@c& (0+255),w,b
  7789  000CEC  B4D8               	btfsc	status,2,c
  7790  000CEE  0012               	return	
  7791  000CF0  EF69  F000         	goto	l10395
  7792  000CF4                     __end_of_printf:
  7793                           	opt stack 0
  7794                           tblptru	equ	0xFF8
  7795                           tblptrh	equ	0xFF7
  7796                           tblptrl	equ	0xFF6
  7797                           tablat	equ	0xFF5
  7798                           prodh	equ	0xFF4
  7799                           prodl	equ	0xFF3
  7800                           intcon	equ	0xFF2
  7801                           postinc0	equ	0xFEE
  7802                           wreg	equ	0xFE8
  7803                           postdec1	equ	0xFE5
  7804                           fsr1l	equ	0xFE1
  7805                           indf2	equ	0xFDF
  7806                           postinc2	equ	0xFDE
  7807                           postdec2	equ	0xFDD
  7808                           fsr2h	equ	0xFDA
  7809                           fsr2l	equ	0xFD9
  7810                           status	equ	0xFD8
  7811                           
  7812 ;; *************** function _scale *****************
  7813 ;; Defined at:
  7814 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  7815 ;; Parameters:    Size  Location     Type
  7816 ;;  scl             1    wreg     char 
  7817 ;; Auto vars:     Size  Location     Type
  7818 ;;  scl             1   41[BANK1 ] char 
  7819 ;; Return value:  Size  Location     Type
  7820 ;;                  3   35[BANK1 ] char 
  7821 ;; Registers used:
  7822 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7823 ;; Tracked objects:
  7824 ;;		On entry : 0/0
  7825 ;;		On exit  : 0/0
  7826 ;;		Unchanged: 0/0
  7827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7828 ;;      Params:         0       0       3       0       0       0       0
  7829 ;;      Locals:         0       0       4       0       0       0       0
  7830 ;;      Temps:          0       0       0       0       0       0       0
  7831 ;;      Totals:         0       0       7       0       0       0       0
  7832 ;;Total ram usage:        7 bytes
  7833 ;; Hardware stack levels used:    1
  7834 ;; Hardware stack levels required when called:   14
  7835 ;; This function calls:
  7836 ;;		___awdiv
  7837 ;;		___awmod
  7838 ;;		___ftmul
  7839 ;;		___wmul
  7840 ;; This function is called by:
  7841 ;;		_printf
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           	psect	text24
  7846  000CF4                     __ptext24:
  7847                           	opt stack 0
  7848  000CF4                     _scale:
  7849                           	opt stack 13
  7850                           
  7851                           ; BSR set to: 1
  7852                           ;incstack = 0
  7853                           ;scale@scl stored from wreg
  7854  000CF4  0101               	movlb	1	; () banked
  7855  000CF6  6F29               	movwf	scale@scl& (0+255),b
  7856                           
  7857                           ;doprnt.c: 428: if(scl < 0) {
  7858  000CF8  0101               	movlb	1	; () banked
  7859  000CFA  AF29               	btfss	scale@scl& (0+255),7,b
  7860  000CFC  D12A               	goto	l10135
  7861                           
  7862                           ; BSR set to: 1
  7863                           ;doprnt.c: 429: scl = -scl;
  7864  000CFE  0101               	movlb	1	; () banked
  7865  000D00  6D29               	negf	scale@scl& (0+255),b
  7866                           
  7867                           ;doprnt.c: 430: if(scl>=110)
  7868  000D02  0101               	movlb	1	; () banked
  7869  000D04  5129               	movf	scale@scl& (0+255),w,b
  7870  000D06  0A80               	xorlw	128
  7871  000D08  0F12               	addlw	-238
  7872  000D0A  A0D8               	btfss	status,0,c
  7873  000D0C  D0AC               	goto	l10125
  7874                           
  7875                           ; BSR set to: 1
  7876                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7877  000D0E  0E00               	movlw	0
  7878  000D10  0101               	movlb	1	; () banked
  7879  000D12  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7880  000D14  0E03               	movlw	3
  7881  000D16  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7882  000D18  0E00               	movlw	0
  7883  000D1A  0101               	movlb	1	; () banked
  7884  000D1C  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7885  000D1E  0E0A               	movlw	10
  7886  000D20  6F08               	movwf	___awdiv@divisor& (0+255),b
  7887  000D22  0E00               	movlw	0
  7888  000D24  0101               	movlb	1	; () banked
  7889  000D26  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7890  000D28  0E64               	movlw	100
  7891  000D2A  6F02               	movwf	___awmod@divisor& (0+255),b
  7892  000D2C  0101               	movlb	1	; () banked
  7893  000D2E  5129               	movf	scale@scl& (0+255),w,b
  7894  000D30  0101               	movlb	1	; () banked
  7895  000D32  6F00               	movwf	___awmod@dividend& (0+255),b
  7896  000D34  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7897  000D36  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7898  000D38  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7899  000D3A  ECB4  F02D         	call	___awmod	;wreg free
  7900  000D3E  C100  F106         	movff	?___awmod,___awdiv@dividend
  7901  000D42  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  7902  000D46  ECE4  F02B         	call	___awdiv	;wreg free
  7903  000D4A  0E09               	movlw	9
  7904  000D4C  0101               	movlb	1	; () banked
  7905  000D4E  2506               	addwf	?___awdiv& (0+255),w,b
  7906  000D50  0101               	movlb	1	; () banked
  7907  000D52  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7908  000D54  0E00               	movlw	0
  7909  000D56  0101               	movlb	1	; () banked
  7910  000D58  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7911  000D5A  0101               	movlb	1	; () banked
  7912  000D5C  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7913  000D5E  EC84  F037         	call	___wmul	;wreg free
  7914  000D62  0E24               	movlw	low __npowers_
  7915  000D64  0101               	movlb	1	; () banked
  7916  000D66  250E               	addwf	?___wmul& (0+255),w,b
  7917  000D68  6EF6               	movwf	tblptrl,c
  7918  000D6A  0E7D               	movlw	high __npowers_
  7919  000D6C  0101               	movlb	1	; () banked
  7920  000D6E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7921  000D70  6EF7               	movwf	tblptrh,c
  7922  000D72                     	if	0	;There are less than 3 active tblptr bytes
  7923  000D72                     	endif
  7924  000D72  0009               	tblrd		*+
  7925  000D74  CFF5 F117          	movff	tablat,___ftmul@f2
  7926  000D78  0009               	tblrd		*+
  7927  000D7A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  7928  000D7E  000A               	tblrd		*-
  7929  000D80  CFF5 F119          	movff	tablat,___ftmul@f2+2
  7930  000D84  0E00               	movlw	0
  7931  000D86  0101               	movlb	1	; () banked
  7932  000D88  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7933  000D8A  0E64               	movlw	100
  7934  000D8C  6F08               	movwf	___awdiv@divisor& (0+255),b
  7935  000D8E  0101               	movlb	1	; () banked
  7936  000D90  5129               	movf	scale@scl& (0+255),w,b
  7937  000D92  0101               	movlb	1	; () banked
  7938  000D94  6F06               	movwf	___awdiv@dividend& (0+255),b
  7939  000D96  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  7940  000D98  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  7941  000D9A  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7942  000D9C  ECE4  F02B         	call	___awdiv	;wreg free
  7943  000DA0  0E12               	movlw	18
  7944  000DA2  0101               	movlb	1	; () banked
  7945  000DA4  2506               	addwf	?___awdiv& (0+255),w,b
  7946  000DA6  0101               	movlb	1	; () banked
  7947  000DA8  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7948  000DAA  0E00               	movlw	0
  7949  000DAC  0101               	movlb	1	; () banked
  7950  000DAE  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7951  000DB0  0101               	movlb	1	; () banked
  7952  000DB2  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7953  000DB4  0E00               	movlw	0
  7954  000DB6  0101               	movlb	1	; () banked
  7955  000DB8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7956  000DBA  0E03               	movlw	3
  7957  000DBC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7958  000DBE  EC84  F037         	call	___wmul	;wreg free
  7959  000DC2  0E24               	movlw	low __npowers_
  7960  000DC4  0101               	movlb	1	; () banked
  7961  000DC6  250E               	addwf	?___wmul& (0+255),w,b
  7962  000DC8  6EF6               	movwf	tblptrl,c
  7963  000DCA  0E7D               	movlw	high __npowers_
  7964  000DCC  0101               	movlb	1	; () banked
  7965  000DCE  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7966  000DD0  6EF7               	movwf	tblptrh,c
  7967  000DD2                     	if	0	;There are less than 3 active tblptr bytes
  7968  000DD2                     	endif
  7969  000DD2  0009               	tblrd		*+
  7970  000DD4  CFF5 F114          	movff	tablat,___ftmul@f1
  7971  000DD8  0009               	tblrd		*+
  7972  000DDA  CFF5 F115          	movff	tablat,___ftmul@f1+1
  7973  000DDE  000A               	tblrd		*-
  7974  000DE0  CFF5 F116          	movff	tablat,___ftmul@f1+2
  7975  000DE4  EC35  F01C         	call	___ftmul	;wreg free
  7976  000DE8  C114  F126         	movff	?___ftmul,_scale$2846
  7977  000DEC  C115  F127         	movff	?___ftmul+1,_scale$2846+1
  7978  000DF0  C116  F128         	movff	?___ftmul+2,_scale$2846+2
  7979                           
  7980                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7981  000DF4  C126  F114         	movff	_scale$2846,___ftmul@f1
  7982  000DF8  C127  F115         	movff	_scale$2846+1,___ftmul@f1+1
  7983  000DFC  C128  F116         	movff	_scale$2846+2,___ftmul@f1+2
  7984  000E00  0E00               	movlw	0
  7985  000E02  0101               	movlb	1	; () banked
  7986  000E04  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7987  000E06  0E03               	movlw	3
  7988  000E08  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7989  000E0A  0E00               	movlw	0
  7990  000E0C  0101               	movlb	1	; () banked
  7991  000E0E  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7992  000E10  0E0A               	movlw	10
  7993  000E12  6F02               	movwf	___awmod@divisor& (0+255),b
  7994  000E14  0101               	movlb	1	; () banked
  7995  000E16  5129               	movf	scale@scl& (0+255),w,b
  7996  000E18  0101               	movlb	1	; () banked
  7997  000E1A  6F00               	movwf	___awmod@dividend& (0+255),b
  7998  000E1C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7999  000E1E  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8000  000E20  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8001  000E22  ECB4  F02D         	call	___awmod	;wreg free
  8002  000E26  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8003  000E2A  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8004  000E2E  EC84  F037         	call	___wmul	;wreg free
  8005  000E32  0E24               	movlw	low __npowers_
  8006  000E34  0101               	movlb	1	; () banked
  8007  000E36  250E               	addwf	?___wmul& (0+255),w,b
  8008  000E38  6EF6               	movwf	tblptrl,c
  8009  000E3A  0E7D               	movlw	high __npowers_
  8010  000E3C  0101               	movlb	1	; () banked
  8011  000E3E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8012  000E40  6EF7               	movwf	tblptrh,c
  8013  000E42                     	if	0	;There are less than 3 active tblptr bytes
  8014  000E42                     	endif
  8015  000E42  0009               	tblrd		*+
  8016  000E44  CFF5 F117          	movff	tablat,___ftmul@f2
  8017  000E48  0009               	tblrd		*+
  8018  000E4A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8019  000E4E  000A               	tblrd		*-
  8020  000E50  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8021  000E54  EC35  F01C         	call	___ftmul	;wreg free
  8022  000E58  C114  F123         	movff	?___ftmul,?_scale
  8023  000E5C  C115  F124         	movff	?___ftmul+1,?_scale+1
  8024  000E60  C116  F125         	movff	?___ftmul+2,?_scale+2
  8025  000E64  0012               	return	
  8026  000E66                     l10125:
  8027                           
  8028                           ;doprnt.c: 432: else if(scl > 10)
  8029  000E66  0101               	movlb	1	; () banked
  8030  000E68  5129               	movf	scale@scl& (0+255),w,b
  8031  000E6A  0A80               	xorlw	128
  8032  000E6C  0F75               	addlw	-139
  8033  000E6E  A0D8               	btfss	status,0,c
  8034  000E70  D05D               	goto	l10131
  8035                           
  8036                           ; BSR set to: 1
  8037                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  8038  000E72  0E00               	movlw	0
  8039  000E74  0101               	movlb	1	; () banked
  8040  000E76  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8041  000E78  0E0A               	movlw	10
  8042  000E7A  6F08               	movwf	___awdiv@divisor& (0+255),b
  8043  000E7C  0101               	movlb	1	; () banked
  8044  000E7E  5129               	movf	scale@scl& (0+255),w,b
  8045  000E80  0101               	movlb	1	; () banked
  8046  000E82  6F06               	movwf	___awdiv@dividend& (0+255),b
  8047  000E84  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  8048  000E86  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  8049  000E88  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8050  000E8A  ECE4  F02B         	call	___awdiv	;wreg free
  8051  000E8E  0E09               	movlw	9
  8052  000E90  0101               	movlb	1	; () banked
  8053  000E92  2506               	addwf	?___awdiv& (0+255),w,b
  8054  000E94  0101               	movlb	1	; () banked
  8055  000E96  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8056  000E98  0E00               	movlw	0
  8057  000E9A  0101               	movlb	1	; () banked
  8058  000E9C  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8059  000E9E  0101               	movlb	1	; () banked
  8060  000EA0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8061  000EA2  0E00               	movlw	0
  8062  000EA4  0101               	movlb	1	; () banked
  8063  000EA6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8064  000EA8  0E03               	movlw	3
  8065  000EAA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8066  000EAC  EC84  F037         	call	___wmul	;wreg free
  8067  000EB0  0E24               	movlw	low __npowers_
  8068  000EB2  0101               	movlb	1	; () banked
  8069  000EB4  250E               	addwf	?___wmul& (0+255),w,b
  8070  000EB6  6EF6               	movwf	tblptrl,c
  8071  000EB8  0E7D               	movlw	high __npowers_
  8072  000EBA  0101               	movlb	1	; () banked
  8073  000EBC  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8074  000EBE  6EF7               	movwf	tblptrh,c
  8075  000EC0                     	if	0	;There are less than 3 active tblptr bytes
  8076  000EC0                     	endif
  8077  000EC0  0009               	tblrd		*+
  8078  000EC2  CFF5 F114          	movff	tablat,___ftmul@f1
  8079  000EC6  0009               	tblrd		*+
  8080  000EC8  CFF5 F115          	movff	tablat,___ftmul@f1+1
  8081  000ECC  000A               	tblrd		*-
  8082  000ECE  CFF5 F116          	movff	tablat,___ftmul@f1+2
  8083  000ED2  0E00               	movlw	0
  8084  000ED4  0101               	movlb	1	; () banked
  8085  000ED6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8086  000ED8  0E03               	movlw	3
  8087  000EDA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8088  000EDC  0E00               	movlw	0
  8089  000EDE  0101               	movlb	1	; () banked
  8090  000EE0  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8091  000EE2  0E0A               	movlw	10
  8092  000EE4  6F02               	movwf	___awmod@divisor& (0+255),b
  8093  000EE6  0101               	movlb	1	; () banked
  8094  000EE8  5129               	movf	scale@scl& (0+255),w,b
  8095  000EEA  0101               	movlb	1	; () banked
  8096  000EEC  6F00               	movwf	___awmod@dividend& (0+255),b
  8097  000EEE  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8098  000EF0  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8099  000EF2  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8100  000EF4  ECB4  F02D         	call	___awmod	;wreg free
  8101  000EF8  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8102  000EFC  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8103  000F00  EC84  F037         	call	___wmul	;wreg free
  8104  000F04  0E24               	movlw	low __npowers_
  8105  000F06  0101               	movlb	1	; () banked
  8106  000F08  250E               	addwf	?___wmul& (0+255),w,b
  8107  000F0A  6EF6               	movwf	tblptrl,c
  8108  000F0C  0E7D               	movlw	high __npowers_
  8109  000F0E  0101               	movlb	1	; () banked
  8110  000F10  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8111  000F12  6EF7               	movwf	tblptrh,c
  8112  000F14                     	if	0	;There are less than 3 active tblptr bytes
  8113  000F14                     	endif
  8114  000F14  0009               	tblrd		*+
  8115  000F16  CFF5 F117          	movff	tablat,___ftmul@f2
  8116  000F1A  0009               	tblrd		*+
  8117  000F1C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8118  000F20  000A               	tblrd		*-
  8119  000F22  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8120  000F26  EC35  F01C         	call	___ftmul	;wreg free
  8121  000F2A  D796               	goto	L2
  8122  000F2C                     l10131:
  8123                           
  8124                           ;doprnt.c: 434: return _npowers_[scl];
  8125  000F2C  0101               	movlb	1	; () banked
  8126  000F2E  5129               	movf	scale@scl& (0+255),w,b
  8127  000F30  0D03               	mullw	3
  8128  000F32  0E24               	movlw	low __npowers_
  8129  000F34  24F3               	addwf	prodl,w,c
  8130  000F36  6EF6               	movwf	tblptrl,c
  8131  000F38  0E7D               	movlw	high __npowers_
  8132  000F3A  20F4               	addwfc	prodh,w,c
  8133  000F3C  6EF7               	movwf	tblptrh,c
  8134  000F3E                     	if	0	;There are less than 3 active tblptr bytes
  8135  000F3E                     	endif
  8136  000F3E  0009               	tblrd		*+
  8137  000F40  CFF5 F123          	movff	tablat,?_scale
  8138  000F44  0009               	tblrd		*+
  8139  000F46  CFF5 F124          	movff	tablat,?_scale+1
  8140  000F4A  000A               	tblrd		*-
  8141  000F4C  CFF5 F125          	movff	tablat,?_scale+2
  8142                           
  8143                           ; BSR set to: 1
  8144  000F50  0012               	return	
  8145  000F52                     l10135:
  8146                           
  8147                           ; BSR set to: 1
  8148                           ;doprnt.c: 435: }
  8149                           ;doprnt.c: 436: if(scl>=110)
  8150  000F52  0101               	movlb	1	; () banked
  8151  000F54  5129               	movf	scale@scl& (0+255),w,b
  8152  000F56  0A80               	xorlw	128
  8153  000F58  0F12               	addlw	-238
  8154  000F5A  A0D8               	btfss	status,0,c
  8155  000F5C  D0AC               	goto	l10143
  8156                           
  8157                           ; BSR set to: 1
  8158                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8159  000F5E  0E00               	movlw	0
  8160  000F60  0101               	movlb	1	; () banked
  8161  000F62  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8162  000F64  0E03               	movlw	3
  8163  000F66  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8164  000F68  0E00               	movlw	0
  8165  000F6A  0101               	movlb	1	; () banked
  8166  000F6C  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8167  000F6E  0E0A               	movlw	10
  8168  000F70  6F08               	movwf	___awdiv@divisor& (0+255),b
  8169  000F72  0E00               	movlw	0
  8170  000F74  0101               	movlb	1	; () banked
  8171  000F76  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8172  000F78  0E64               	movlw	100
  8173  000F7A  6F02               	movwf	___awmod@divisor& (0+255),b
  8174  000F7C  0101               	movlb	1	; () banked
  8175  000F7E  5129               	movf	scale@scl& (0+255),w,b
  8176  000F80  0101               	movlb	1	; () banked
  8177  000F82  6F00               	movwf	___awmod@dividend& (0+255),b
  8178  000F84  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8179  000F86  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8180  000F88  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8181  000F8A  ECB4  F02D         	call	___awmod	;wreg free
  8182  000F8E  C100  F106         	movff	?___awmod,___awdiv@dividend
  8183  000F92  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  8184  000F96  ECE4  F02B         	call	___awdiv	;wreg free
  8185  000F9A  0E09               	movlw	9
  8186  000F9C  0101               	movlb	1	; () banked
  8187  000F9E  2506               	addwf	?___awdiv& (0+255),w,b
  8188  000FA0  0101               	movlb	1	; () banked
  8189  000FA2  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8190  000FA4  0E00               	movlw	0
  8191  000FA6  0101               	movlb	1	; () banked
  8192  000FA8  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8193  000FAA  0101               	movlb	1	; () banked
  8194  000FAC  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8195  000FAE  EC84  F037         	call	___wmul	;wreg free
  8196  000FB2  0EFD               	movlw	low __powers_
  8197  000FB4  0101               	movlb	1	; () banked
  8198  000FB6  250E               	addwf	?___wmul& (0+255),w,b
  8199  000FB8  6EF6               	movwf	tblptrl,c
  8200  000FBA  0E7C               	movlw	high __powers_
  8201  000FBC  0101               	movlb	1	; () banked
  8202  000FBE  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8203  000FC0  6EF7               	movwf	tblptrh,c
  8204  000FC2                     	if	0	;There are less than 3 active tblptr bytes
  8205  000FC2                     	endif
  8206  000FC2  0009               	tblrd		*+
  8207  000FC4  CFF5 F117          	movff	tablat,___ftmul@f2
  8208  000FC8  0009               	tblrd		*+
  8209  000FCA  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8210  000FCE  000A               	tblrd		*-
  8211  000FD0  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8212  000FD4  0E00               	movlw	0
  8213  000FD6  0101               	movlb	1	; () banked
  8214  000FD8  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8215  000FDA  0E64               	movlw	100
  8216  000FDC  6F08               	movwf	___awdiv@divisor& (0+255),b
  8217  000FDE  0101               	movlb	1	; () banked
  8218  000FE0  5129               	movf	scale@scl& (0+255),w,b
  8219  000FE2  0101               	movlb	1	; () banked
  8220  000FE4  6F06               	movwf	___awdiv@dividend& (0+255),b
  8221  000FE6  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  8222  000FE8  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  8223  000FEA  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8224  000FEC  ECE4  F02B         	call	___awdiv	;wreg free
  8225  000FF0  0E12               	movlw	18
  8226  000FF2  0101               	movlb	1	; () banked
  8227  000FF4  2506               	addwf	?___awdiv& (0+255),w,b
  8228  000FF6  0101               	movlb	1	; () banked
  8229  000FF8  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8230  000FFA  0E00               	movlw	0
  8231  000FFC  0101               	movlb	1	; () banked
  8232  000FFE  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8233  001000  0101               	movlb	1	; () banked
  8234  001002  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8235  001004  0E00               	movlw	0
  8236  001006  0101               	movlb	1	; () banked
  8237  001008  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8238  00100A  0E03               	movlw	3
  8239  00100C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8240  00100E  EC84  F037         	call	___wmul	;wreg free
  8241  001012  0EFD               	movlw	low __powers_
  8242  001014  0101               	movlb	1	; () banked
  8243  001016  250E               	addwf	?___wmul& (0+255),w,b
  8244  001018  6EF6               	movwf	tblptrl,c
  8245  00101A  0E7C               	movlw	high __powers_
  8246  00101C  0101               	movlb	1	; () banked
  8247  00101E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8248  001020  6EF7               	movwf	tblptrh,c
  8249  001022                     	if	0	;There are less than 3 active tblptr bytes
  8250  001022                     	endif
  8251  001022  0009               	tblrd		*+
  8252  001024  CFF5 F114          	movff	tablat,___ftmul@f1
  8253  001028  0009               	tblrd		*+
  8254  00102A  CFF5 F115          	movff	tablat,___ftmul@f1+1
  8255  00102E  000A               	tblrd		*-
  8256  001030  CFF5 F116          	movff	tablat,___ftmul@f1+2
  8257  001034  EC35  F01C         	call	___ftmul	;wreg free
  8258  001038  C114  F126         	movff	?___ftmul,_scale$2846
  8259  00103C  C115  F127         	movff	?___ftmul+1,_scale$2846+1
  8260  001040  C116  F128         	movff	?___ftmul+2,_scale$2846+2
  8261                           
  8262                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  8263  001044  C126  F114         	movff	_scale$2846,___ftmul@f1
  8264  001048  C127  F115         	movff	_scale$2846+1,___ftmul@f1+1
  8265  00104C  C128  F116         	movff	_scale$2846+2,___ftmul@f1+2
  8266  001050  0E00               	movlw	0
  8267  001052  0101               	movlb	1	; () banked
  8268  001054  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8269  001056  0E03               	movlw	3
  8270  001058  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8271  00105A  0E00               	movlw	0
  8272  00105C  0101               	movlb	1	; () banked
  8273  00105E  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8274  001060  0E0A               	movlw	10
  8275  001062  6F02               	movwf	___awmod@divisor& (0+255),b
  8276  001064  0101               	movlb	1	; () banked
  8277  001066  5129               	movf	scale@scl& (0+255),w,b
  8278  001068  0101               	movlb	1	; () banked
  8279  00106A  6F00               	movwf	___awmod@dividend& (0+255),b
  8280  00106C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8281  00106E  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8282  001070  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8283  001072  ECB4  F02D         	call	___awmod	;wreg free
  8284  001076  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8285  00107A  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8286  00107E  EC84  F037         	call	___wmul	;wreg free
  8287  001082  0EFD               	movlw	low __powers_
  8288  001084  0101               	movlb	1	; () banked
  8289  001086  250E               	addwf	?___wmul& (0+255),w,b
  8290  001088  6EF6               	movwf	tblptrl,c
  8291  00108A  0E7C               	movlw	high __powers_
  8292  00108C  0101               	movlb	1	; () banked
  8293  00108E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8294  001090  6EF7               	movwf	tblptrh,c
  8295  001092                     	if	0	;There are less than 3 active tblptr bytes
  8296  001092                     	endif
  8297  001092  0009               	tblrd		*+
  8298  001094  CFF5 F117          	movff	tablat,___ftmul@f2
  8299  001098  0009               	tblrd		*+
  8300  00109A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8301  00109E  000A               	tblrd		*-
  8302  0010A0  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8303  0010A4  EC35  F01C         	call	___ftmul	;wreg free
  8304  0010A8  C114  F123         	movff	?___ftmul,?_scale
  8305  0010AC  C115  F124         	movff	?___ftmul+1,?_scale+1
  8306  0010B0  C116  F125         	movff	?___ftmul+2,?_scale+2
  8307  0010B4  0012               	return	
  8308  0010B6                     l10143:
  8309                           
  8310                           ;doprnt.c: 438: else if(scl > 10)
  8311  0010B6  0101               	movlb	1	; () banked
  8312  0010B8  5129               	movf	scale@scl& (0+255),w,b
  8313  0010BA  0A80               	xorlw	128
  8314  0010BC  0F75               	addlw	-139
  8315  0010BE  A0D8               	btfss	status,0,c
  8316  0010C0  D05D               	goto	l10149
  8317                           
  8318                           ; BSR set to: 1
  8319                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8320  0010C2  0E00               	movlw	0
  8321  0010C4  0101               	movlb	1	; () banked
  8322  0010C6  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8323  0010C8  0E0A               	movlw	10
  8324  0010CA  6F08               	movwf	___awdiv@divisor& (0+255),b
  8325  0010CC  0101               	movlb	1	; () banked
  8326  0010CE  5129               	movf	scale@scl& (0+255),w,b
  8327  0010D0  0101               	movlb	1	; () banked
  8328  0010D2  6F06               	movwf	___awdiv@dividend& (0+255),b
  8329  0010D4  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  8330  0010D6  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  8331  0010D8  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8332  0010DA  ECE4  F02B         	call	___awdiv	;wreg free
  8333  0010DE  0E09               	movlw	9
  8334  0010E0  0101               	movlb	1	; () banked
  8335  0010E2  2506               	addwf	?___awdiv& (0+255),w,b
  8336  0010E4  0101               	movlb	1	; () banked
  8337  0010E6  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8338  0010E8  0E00               	movlw	0
  8339  0010EA  0101               	movlb	1	; () banked
  8340  0010EC  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8341  0010EE  0101               	movlb	1	; () banked
  8342  0010F0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8343  0010F2  0E00               	movlw	0
  8344  0010F4  0101               	movlb	1	; () banked
  8345  0010F6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8346  0010F8  0E03               	movlw	3
  8347  0010FA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8348  0010FC  EC84  F037         	call	___wmul	;wreg free
  8349  001100  0EFD               	movlw	low __powers_
  8350  001102  0101               	movlb	1	; () banked
  8351  001104  250E               	addwf	?___wmul& (0+255),w,b
  8352  001106  6EF6               	movwf	tblptrl,c
  8353  001108  0E7C               	movlw	high __powers_
  8354  00110A  0101               	movlb	1	; () banked
  8355  00110C  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8356  00110E  6EF7               	movwf	tblptrh,c
  8357  001110                     	if	0	;There are less than 3 active tblptr bytes
  8358  001110                     	endif
  8359  001110  0009               	tblrd		*+
  8360  001112  CFF5 F114          	movff	tablat,___ftmul@f1
  8361  001116  0009               	tblrd		*+
  8362  001118  CFF5 F115          	movff	tablat,___ftmul@f1+1
  8363  00111C  000A               	tblrd		*-
  8364  00111E  CFF5 F116          	movff	tablat,___ftmul@f1+2
  8365  001122  0E00               	movlw	0
  8366  001124  0101               	movlb	1	; () banked
  8367  001126  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8368  001128  0E03               	movlw	3
  8369  00112A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8370  00112C  0E00               	movlw	0
  8371  00112E  0101               	movlb	1	; () banked
  8372  001130  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8373  001132  0E0A               	movlw	10
  8374  001134  6F02               	movwf	___awmod@divisor& (0+255),b
  8375  001136  0101               	movlb	1	; () banked
  8376  001138  5129               	movf	scale@scl& (0+255),w,b
  8377  00113A  0101               	movlb	1	; () banked
  8378  00113C  6F00               	movwf	___awmod@dividend& (0+255),b
  8379  00113E  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8380  001140  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8381  001142  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8382  001144  ECB4  F02D         	call	___awmod	;wreg free
  8383  001148  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8384  00114C  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8385  001150  EC84  F037         	call	___wmul	;wreg free
  8386  001154  0EFD               	movlw	low __powers_
  8387  001156  0101               	movlb	1	; () banked
  8388  001158  250E               	addwf	?___wmul& (0+255),w,b
  8389  00115A  6EF6               	movwf	tblptrl,c
  8390  00115C  0E7C               	movlw	high __powers_
  8391  00115E  0101               	movlb	1	; () banked
  8392  001160  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8393  001162  6EF7               	movwf	tblptrh,c
  8394  001164                     	if	0	;There are less than 3 active tblptr bytes
  8395  001164                     	endif
  8396  001164  0009               	tblrd		*+
  8397  001166  CFF5 F117          	movff	tablat,___ftmul@f2
  8398  00116A  0009               	tblrd		*+
  8399  00116C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8400  001170  000A               	tblrd		*-
  8401  001172  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8402  001176  EC35  F01C         	call	___ftmul	;wreg free
  8403  00117A  D796               	goto	L3
  8404  00117C                     l10149:
  8405                           
  8406                           ;doprnt.c: 440: return _powers_[scl];
  8407  00117C  0101               	movlb	1	; () banked
  8408  00117E  5129               	movf	scale@scl& (0+255),w,b
  8409  001180  0D03               	mullw	3
  8410  001182  0EFD               	movlw	low __powers_
  8411  001184  24F3               	addwf	prodl,w,c
  8412  001186  6EF6               	movwf	tblptrl,c
  8413  001188  0E7C               	movlw	high __powers_
  8414  00118A  20F4               	addwfc	prodh,w,c
  8415  00118C  6EF7               	movwf	tblptrh,c
  8416  00118E                     	if	0	;There are less than 3 active tblptr bytes
  8417  00118E                     	endif
  8418  00118E  0009               	tblrd		*+
  8419  001190  CFF5 F123          	movff	tablat,?_scale
  8420  001194  0009               	tblrd		*+
  8421  001196  CFF5 F124          	movff	tablat,?_scale+1
  8422  00119A  000A               	tblrd		*-
  8423  00119C  CFF5 F125          	movff	tablat,?_scale+2
  8424  0011A0  0012               	return	
  8425  0011A2                     __end_of_scale:
  8426                           	opt stack 0
  8427                           tblptru	equ	0xFF8
  8428                           tblptrh	equ	0xFF7
  8429                           tblptrl	equ	0xFF6
  8430                           tablat	equ	0xFF5
  8431                           prodh	equ	0xFF4
  8432                           prodl	equ	0xFF3
  8433                           intcon	equ	0xFF2
  8434                           postinc0	equ	0xFEE
  8435                           wreg	equ	0xFE8
  8436                           postdec1	equ	0xFE5
  8437                           fsr1l	equ	0xFE1
  8438                           indf2	equ	0xFDF
  8439                           postinc2	equ	0xFDE
  8440                           postdec2	equ	0xFDD
  8441                           fsr2h	equ	0xFDA
  8442                           fsr2l	equ	0xFD9
  8443                           status	equ	0xFD8
  8444                           
  8445 ;; *************** function _putch *****************
  8446 ;; Defined at:
  8447 ;;		line 64 in file "source/IOConfig.h"
  8448 ;; Parameters:    Size  Location     Type
  8449 ;;  val             1    wreg     unsigned char 
  8450 ;; Auto vars:     Size  Location     Type
  8451 ;;  val             1   13[BANK1 ] unsigned char 
  8452 ;; Return value:  Size  Location     Type
  8453 ;;                  1    wreg      void 
  8454 ;; Registers used:
  8455 ;;		wreg, status,2, status,0, cstack
  8456 ;; Tracked objects:
  8457 ;;		On entry : 0/0
  8458 ;;		On exit  : 0/0
  8459 ;;		Unchanged: 0/0
  8460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8461 ;;      Params:         0       0       0       0       0       0       0
  8462 ;;      Locals:         0       0       1       0       0       0       0
  8463 ;;      Temps:          0       0       0       0       0       0       0
  8464 ;;      Totals:         0       0       1       0       0       0       0
  8465 ;;Total ram usage:        1 bytes
  8466 ;; Hardware stack levels used:    1
  8467 ;; Hardware stack levels required when called:   17
  8468 ;; This function calls:
  8469 ;;		_lcd_putc
  8470 ;;		_putchUART
  8471 ;; This function is called by:
  8472 ;;		_printf
  8473 ;;		_send_float
  8474 ;;		_send_int32
  8475 ;;		_send_int16
  8476 ;;		_send_float_vt
  8477 ;;		_send_int32_vt
  8478 ;;		_send_int16_vt
  8479 ;; This function uses a non-reentrant model
  8480 ;;
  8481                           
  8482                           	psect	text25
  8483  007246                     __ptext25:
  8484                           	opt stack 0
  8485  007246                     _putch:
  8486                           	opt stack 10
  8487                           
  8488                           ;incstack = 0
  8489                           ;putch@val stored from wreg
  8490  007246  0101               	movlb	1	; () banked
  8491  007248  6F0D               	movwf	putch@val& (0+255),b
  8492                           
  8493                           ;IOConfig.h: 65: lcd_putc(val);
  8494  00724A  0101               	movlb	1	; () banked
  8495  00724C  510D               	movf	putch@val& (0+255),w,b
  8496  00724E  ECD2  F032         	call	_lcd_putc
  8497                           
  8498                           ;IOConfig.h: 66: putchUART(val);
  8499  007252  0101               	movlb	1	; () banked
  8500  007254  510D               	movf	putch@val& (0+255),w,b
  8501  007256  EC7E  F039         	call	_putchUART
  8502  00725A  0012               	return		;funcret
  8503  00725C                     __end_of_putch:
  8504                           	opt stack 0
  8505                           tblptru	equ	0xFF8
  8506                           tblptrh	equ	0xFF7
  8507                           tblptrl	equ	0xFF6
  8508                           tablat	equ	0xFF5
  8509                           prodh	equ	0xFF4
  8510                           prodl	equ	0xFF3
  8511                           intcon	equ	0xFF2
  8512                           postinc0	equ	0xFEE
  8513                           wreg	equ	0xFE8
  8514                           postdec1	equ	0xFE5
  8515                           fsr1l	equ	0xFE1
  8516                           indf2	equ	0xFDF
  8517                           postinc2	equ	0xFDE
  8518                           postdec2	equ	0xFDD
  8519                           fsr2h	equ	0xFDA
  8520                           fsr2l	equ	0xFD9
  8521                           status	equ	0xFD8
  8522                           
  8523 ;; *************** function _putchUART *****************
  8524 ;; Defined at:
  8525 ;;		line 59 in file "source/IOConfig.h"
  8526 ;; Parameters:    Size  Location     Type
  8527 ;;  val             1    wreg     unsigned char 
  8528 ;; Auto vars:     Size  Location     Type
  8529 ;;  val             1    0[BANK1 ] unsigned char 
  8530 ;; Return value:  Size  Location     Type
  8531 ;;                  1    wreg      void 
  8532 ;; Registers used:
  8533 ;;		wreg
  8534 ;; Tracked objects:
  8535 ;;		On entry : 0/0
  8536 ;;		On exit  : 0/0
  8537 ;;		Unchanged: 0/0
  8538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8539 ;;      Params:         0       0       0       0       0       0       0
  8540 ;;      Locals:         0       0       1       0       0       0       0
  8541 ;;      Temps:          0       0       0       0       0       0       0
  8542 ;;      Totals:         0       0       1       0       0       0       0
  8543 ;;Total ram usage:        1 bytes
  8544 ;; Hardware stack levels used:    1
  8545 ;; Hardware stack levels required when called:   12
  8546 ;; This function calls:
  8547 ;;		Nothing
  8548 ;; This function is called by:
  8549 ;;		_putch
  8550 ;; This function uses a non-reentrant model
  8551 ;;
  8552                           
  8553                           	psect	text26
  8554  0072FC                     __ptext26:
  8555                           	opt stack 0
  8556  0072FC                     _putchUART:
  8557                           	opt stack 14
  8558                           
  8559                           ;incstack = 0
  8560                           ;putchUART@val stored from wreg
  8561  0072FC  0101               	movlb	1	; () banked
  8562  0072FE  6F00               	movwf	putchUART@val& (0+255),b
  8563  007300                     l222:
  8564  007300  A2AC               	btfss	4012,1,c	;volatile
  8565  007302  D7FE               	goto	l222
  8566                           
  8567                           ;IOConfig.h: 61: TXREG1 = val;
  8568  007304  C100  FFAD         	movff	putchUART@val,4013	;volatile
  8569  007308  0012               	return		;funcret
  8570  00730A                     __end_of_putchUART:
  8571                           	opt stack 0
  8572                           tblptru	equ	0xFF8
  8573                           tblptrh	equ	0xFF7
  8574                           tblptrl	equ	0xFF6
  8575                           tablat	equ	0xFF5
  8576                           prodh	equ	0xFF4
  8577                           prodl	equ	0xFF3
  8578                           intcon	equ	0xFF2
  8579                           postinc0	equ	0xFEE
  8580                           wreg	equ	0xFE8
  8581                           postdec1	equ	0xFE5
  8582                           fsr1l	equ	0xFE1
  8583                           indf2	equ	0xFDF
  8584                           postinc2	equ	0xFDE
  8585                           postdec2	equ	0xFDD
  8586                           fsr2h	equ	0xFDA
  8587                           fsr2l	equ	0xFD9
  8588                           status	equ	0xFD8
  8589                           
  8590 ;; *************** function _lcd_putc *****************
  8591 ;; Defined at:
  8592 ;;		line 212 in file "source/../../vclib_lcd.h"
  8593 ;; Parameters:    Size  Location     Type
  8594 ;;  cha             1    wreg     unsigned char 
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;  cha             1   12[BANK1 ] unsigned char 
  8597 ;; Return value:  Size  Location     Type
  8598 ;;                  1    wreg      void 
  8599 ;; Registers used:
  8600 ;;		wreg, status,2, status,0, cstack
  8601 ;; Tracked objects:
  8602 ;;		On entry : 0/0
  8603 ;;		On exit  : 0/0
  8604 ;;		Unchanged: 0/0
  8605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8606 ;;      Params:         0       0       0       0       0       0       0
  8607 ;;      Locals:         0       0       1       0       0       0       0
  8608 ;;      Temps:          0       0       1       0       0       0       0
  8609 ;;      Totals:         0       0       2       0       0       0       0
  8610 ;;Total ram usage:        2 bytes
  8611 ;; Hardware stack levels used:    1
  8612 ;; Hardware stack levels required when called:   16
  8613 ;; This function calls:
  8614 ;;		_lcd_gotoxy
  8615 ;;		_lcd_send_byte
  8616 ;; This function is called by:
  8617 ;;		_putch
  8618 ;;		_drawMenu
  8619 ;; This function uses a non-reentrant model
  8620 ;;
  8621                           
  8622                           	psect	text27
  8623  0065A4                     __ptext27:
  8624                           	opt stack 0
  8625  0065A4                     _lcd_putc:
  8626                           	opt stack 10
  8627                           
  8628                           ;incstack = 0
  8629                           ;lcd_putc@cha stored from wreg
  8630  0065A4  0101               	movlb	1	; () banked
  8631  0065A6  6F0C               	movwf	lcd_putc@cha& (0+255),b
  8632                           
  8633                           ;vclib_lcd.h: 213: switch (cha) {
  8634  0065A8  D02B               	goto	l9805
  8635  0065AA                     l9791:
  8636  0065AA  0E01               	movlw	1
  8637  0065AC  0101               	movlb	1	; () banked
  8638  0065AE  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  8639  0065B0  0E01               	movlw	1
  8640  0065B2  ECD1  F037         	call	_lcd_gotoxy
  8641                           
  8642                           ;vclib_lcd.h: 215: break;
  8643  0065B6  0012               	return	
  8644  0065B8                     l9793:
  8645  0065B8  0E01               	movlw	1
  8646  0065BA  0101               	movlb	1	; () banked
  8647  0065BC  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8648  0065BE  0E00               	movlw	0
  8649  0065C0  ECF1  F036         	call	_lcd_send_byte
  8650                           
  8651                           ;vclib_lcd.h: 218: _delay((unsigned long)((2)*(16000000/4000.0)));
  8652  0065C4  0E0B               	movlw	11
  8653  0065C6  0101               	movlb	1	; () banked
  8654  0065C8  6F0B               	movwf	??_lcd_putc& (0+255),b
  8655  0065CA  0E62               	movlw	98
  8656  0065CC                     u17987:
  8657  0065CC  2EE8               	decfsz	wreg,f,c
  8658  0065CE  D7FE               	bra	u17987
  8659  0065D0  2F0B               	decfsz	??_lcd_putc& (0+255),f,b
  8660  0065D2  D7FC               	bra	u17987
  8661  0065D4  F000               	nop	
  8662                           
  8663                           ;vclib_lcd.h: 223: break;
  8664  0065D6  0012               	return	
  8665  0065D8                     l9797:
  8666  0065D8  0E02               	movlw	2
  8667  0065DA  0101               	movlb	1	; () banked
  8668  0065DC  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  8669  0065DE  0E01               	movlw	1
  8670  0065E0  ECD1  F037         	call	_lcd_gotoxy
  8671                           
  8672                           ;vclib_lcd.h: 236: break;
  8673  0065E4  0012               	return	
  8674  0065E6                     l9799:
  8675  0065E6  0E10               	movlw	16
  8676  0065E8  0101               	movlb	1	; () banked
  8677  0065EA  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8678  0065EC  0E00               	movlw	0
  8679  0065EE  ECF1  F036         	call	_lcd_send_byte
  8680                           
  8681                           ;vclib_lcd.h: 240: break;
  8682  0065F2  0012               	return	
  8683  0065F4                     l9801:
  8684  0065F4  C10C  F105         	movff	lcd_putc@cha,lcd_send_byte@n
  8685  0065F8  0E01               	movlw	1
  8686  0065FA  ECF1  F036         	call	_lcd_send_byte
  8687                           
  8688                           ;vclib_lcd.h: 253: }
  8689                           
  8690                           ;vclib_lcd.h: 251: break;
  8691  0065FE  0012               	return	
  8692  006600                     l9805:
  8693  006600  0101               	movlb	1	; () banked
  8694  006602  510C               	movf	lcd_putc@cha& (0+255),w,b
  8695                           
  8696                           ; Switch size 1, requested type "space"
  8697                           ; Number of cases is 4, Range of values is 7 to 12
  8698                           ; switch strategies available:
  8699                           ; Name         Instructions Cycles
  8700                           ; simple_byte           13     7 (average)
  8701                           ;	Chosen strategy is simple_byte
  8702  006604  0A07               	xorlw	7	; case 7
  8703  006606  B4D8               	btfsc	status,2,c
  8704  006608  D7D0               	goto	l9791
  8705  00660A  0A0F               	xorlw	15	; case 8
  8706  00660C  B4D8               	btfsc	status,2,c
  8707  00660E  D7EB               	goto	l9799
  8708  006610  0A02               	xorlw	2	; case 10
  8709  006612  B4D8               	btfsc	status,2,c
  8710  006614  D7E1               	goto	l9797
  8711  006616  0A06               	xorlw	6	; case 12
  8712  006618  B4D8               	btfsc	status,2,c
  8713  00661A  D7CE               	goto	l9793
  8714  00661C  D7EB               	goto	l9801
  8715  00661E                     __end_of_lcd_putc:
  8716                           	opt stack 0
  8717                           tblptru	equ	0xFF8
  8718                           tblptrh	equ	0xFF7
  8719                           tblptrl	equ	0xFF6
  8720                           tablat	equ	0xFF5
  8721                           prodh	equ	0xFF4
  8722                           prodl	equ	0xFF3
  8723                           intcon	equ	0xFF2
  8724                           postinc0	equ	0xFEE
  8725                           wreg	equ	0xFE8
  8726                           postdec1	equ	0xFE5
  8727                           fsr1l	equ	0xFE1
  8728                           indf2	equ	0xFDF
  8729                           postinc2	equ	0xFDE
  8730                           postdec2	equ	0xFDD
  8731                           fsr2h	equ	0xFDA
  8732                           fsr2l	equ	0xFD9
  8733                           status	equ	0xFD8
  8734                           
  8735 ;; *************** function _lcd_gotoxy *****************
  8736 ;; Defined at:
  8737 ;;		line 198 in file "source/../../vclib_lcd.h"
  8738 ;; Parameters:    Size  Location     Type
  8739 ;;  pos             1    wreg     unsigned char 
  8740 ;;  fila            1    8[BANK1 ] unsigned char 
  8741 ;; Auto vars:     Size  Location     Type
  8742 ;;  pos             1    9[BANK1 ] unsigned char 
  8743 ;;  address         1   10[BANK1 ] unsigned char 
  8744 ;; Return value:  Size  Location     Type
  8745 ;;                  1    wreg      void 
  8746 ;; Registers used:
  8747 ;;		wreg, status,2, status,0, cstack
  8748 ;; Tracked objects:
  8749 ;;		On entry : 0/0
  8750 ;;		On exit  : 0/0
  8751 ;;		Unchanged: 0/0
  8752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8753 ;;      Params:         0       0       1       0       0       0       0
  8754 ;;      Locals:         0       0       2       0       0       0       0
  8755 ;;      Temps:          0       0       0       0       0       0       0
  8756 ;;      Totals:         0       0       3       0       0       0       0
  8757 ;;Total ram usage:        3 bytes
  8758 ;; Hardware stack levels used:    1
  8759 ;; Hardware stack levels required when called:   15
  8760 ;; This function calls:
  8761 ;;		_lcd_send_byte
  8762 ;; This function is called by:
  8763 ;;		_lcd_putc
  8764 ;;		_drawValEditor
  8765 ;;		_drawMenu
  8766 ;;		_drawChanVal
  8767 ;;		_drawPass1Lin
  8768 ;;		_drawAdvON
  8769 ;;		_drawSNquest
  8770 ;;		_drawAutoCalibRM
  8771 ;;		_drawCutError
  8772 ;;		_drawReady2Cut
  8773 ;;		_drawCalibProc
  8774 ;;		_lcd_getc
  8775 ;; This function uses a non-reentrant model
  8776 ;;
  8777                           
  8778                           	psect	text28
  8779  006FA2                     __ptext28:
  8780                           	opt stack 0
  8781  006FA2                     _lcd_gotoxy:
  8782                           	opt stack 10
  8783                           
  8784                           ;incstack = 0
  8785                           ;lcd_gotoxy@pos stored from wreg
  8786  006FA2  0101               	movlb	1	; () banked
  8787  006FA4  6F09               	movwf	lcd_gotoxy@pos& (0+255),b
  8788                           
  8789                           ;vclib_lcd.h: 199: unsigned char address;
  8790                           ;vclib_lcd.h: 200: if (fila != 1)
  8791  006FA6  0101               	movlb	1	; () banked
  8792  006FA8  0508               	decf	lcd_gotoxy@fila& (0+255),w,b
  8793  006FAA  B4D8               	btfsc	status,2,c
  8794  006FAC  D002               	goto	l9747
  8795                           
  8796                           ; BSR set to: 1
  8797                           ;vclib_lcd.h: 201: address = 0x40;
  8798  006FAE  0E40               	movlw	64
  8799  006FB0  D001               	goto	L4
  8800  006FB2                     l9747:
  8801                           
  8802                           ; BSR set to: 1
  8803                           ;vclib_lcd.h: 202: else
  8804                           ;vclib_lcd.h: 203: address = 0;
  8805  006FB2  0E00               	movlw	0
  8806  006FB4                     L4:
  8807  006FB4  0101               	movlb	1	; () banked
  8808  006FB6  6F0A               	movwf	lcd_gotoxy@address& (0+255),b
  8809                           
  8810                           ; BSR set to: 1
  8811                           ;vclib_lcd.h: 204: address += pos - 1;
  8812                           
  8813                           ; BSR set to: 1
  8814  006FB8  0101               	movlb	1	; () banked
  8815  006FBA  0509               	decf	lcd_gotoxy@pos& (0+255),w,b
  8816  006FBC  0101               	movlb	1	; () banked
  8817  006FBE  270A               	addwf	lcd_gotoxy@address& (0+255),f,b
  8818                           
  8819                           ; BSR set to: 1
  8820                           ;vclib_lcd.h: 205: lcd_send_byte(0, 0b10000000 | address);
  8821  006FC0  0101               	movlb	1	; () banked
  8822  006FC2  510A               	movf	lcd_gotoxy@address& (0+255),w,b
  8823  006FC4  0980               	iorlw	128
  8824  006FC6  0101               	movlb	1	; () banked
  8825  006FC8  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8826  006FCA  0E00               	movlw	0
  8827  006FCC  ECF1  F036         	call	_lcd_send_byte
  8828  006FD0  0012               	return		;funcret
  8829  006FD2                     __end_of_lcd_gotoxy:
  8830                           	opt stack 0
  8831                           tblptru	equ	0xFF8
  8832                           tblptrh	equ	0xFF7
  8833                           tblptrl	equ	0xFF6
  8834                           tablat	equ	0xFF5
  8835                           prodh	equ	0xFF4
  8836                           prodl	equ	0xFF3
  8837                           intcon	equ	0xFF2
  8838                           postinc0	equ	0xFEE
  8839                           wreg	equ	0xFE8
  8840                           postdec1	equ	0xFE5
  8841                           fsr1l	equ	0xFE1
  8842                           indf2	equ	0xFDF
  8843                           postinc2	equ	0xFDE
  8844                           postdec2	equ	0xFDD
  8845                           fsr2h	equ	0xFDA
  8846                           fsr2l	equ	0xFD9
  8847                           status	equ	0xFD8
  8848                           
  8849 ;; *************** function _lcd_send_byte *****************
  8850 ;; Defined at:
  8851 ;;		line 163 in file "source/../../vclib_lcd.h"
  8852 ;; Parameters:    Size  Location     Type
  8853 ;;  address         1    wreg     unsigned char 
  8854 ;;  n               1    5[BANK1 ] unsigned char 
  8855 ;; Auto vars:     Size  Location     Type
  8856 ;;  address         1    7[BANK1 ] unsigned char 
  8857 ;; Return value:  Size  Location     Type
  8858 ;;                  1    wreg      void 
  8859 ;; Registers used:
  8860 ;;		wreg, status,2, status,0, cstack
  8861 ;; Tracked objects:
  8862 ;;		On entry : 0/0
  8863 ;;		On exit  : 0/0
  8864 ;;		Unchanged: 0/0
  8865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8866 ;;      Params:         0       0       1       0       0       0       0
  8867 ;;      Locals:         0       0       1       0       0       0       0
  8868 ;;      Temps:          0       0       1       0       0       0       0
  8869 ;;      Totals:         0       0       3       0       0       0       0
  8870 ;;Total ram usage:        3 bytes
  8871 ;; Hardware stack levels used:    1
  8872 ;; Hardware stack levels required when called:   14
  8873 ;; This function calls:
  8874 ;;		_lcd_read_byte
  8875 ;;		_lcd_send_4bits
  8876 ;; This function is called by:
  8877 ;;		_lcd_init
  8878 ;;		_lcd_gotoxy
  8879 ;;		_lcd_putc
  8880 ;;		_lcd_set_cgram_char
  8881 ;;		_lcd_cursor_en
  8882 ;;		_lcd_clear
  8883 ;;		_lcd_shift_right
  8884 ;;		_lcd_shift_left
  8885 ;; This function uses a non-reentrant model
  8886 ;;
  8887                           
  8888                           	psect	text29
  8889  006DE2                     __ptext29:
  8890                           	opt stack 0
  8891  006DE2                     _lcd_send_byte:
  8892                           	opt stack 15
  8893                           
  8894                           ;incstack = 0
  8895                           ;lcd_send_byte@address stored from wreg
  8896  006DE2  0101               	movlb	1	; () banked
  8897  006DE4  6F07               	movwf	lcd_send_byte@address& (0+255),b
  8898                           
  8899                           ;vclib_lcd.h: 164: PORTBbits.RB1 = 0;
  8900  006DE6  9281               	bcf	3969,1,c	;volatile
  8901  006DE8                     l9739:
  8902  006DE8  ECAB  F036         	call	_lcd_read_byte	;wreg free
  8903  006DEC  0101               	movlb	1	; () banked
  8904  006DEE  6F06               	movwf	??_lcd_send_byte& (0+255),b
  8905  006DF0  0101               	movlb	1	; () banked
  8906  006DF2  BF06               	btfsc	??_lcd_send_byte& (0+255),7,b
  8907  006DF4  D7F9               	goto	l9739
  8908                           
  8909                           ; BSR set to: 1
  8910                           ;vclib_lcd.h: 166: PORTBbits.RB1 = address;
  8911  006DF6  0101               	movlb	1	; () banked
  8912  006DF8  B107               	btfsc	lcd_send_byte@address& (0+255),0,b
  8913  006DFA  D002               	bra	u14165
  8914  006DFC  9281               	bcf	3969,1,c	;volatile
  8915  006DFE  D001               	bra	u14166
  8916  006E00                     u14165:
  8917  006E00  8281               	bsf	3969,1,c	;volatile
  8918  006E02                     u14166:
  8919                           
  8920                           ;vclib_lcd.h: 167: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8921  006E02  D000               	nop2		;2 cycle nop
  8922  006E04  D000               	nop2		;2 cycle nop
  8923                           
  8924                           ;vclib_lcd.h: 168: PORTBbits.RB2 = 0;
  8925  006E06  9481               	bcf	3969,2,c	;volatile
  8926                           
  8927                           ;vclib_lcd.h: 169: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8928  006E08  D000               	nop2		;2 cycle nop
  8929  006E0A  D000               	nop2		;2 cycle nop
  8930                           
  8931                           ;vclib_lcd.h: 170: PORTBbits.RB3 = 0;
  8932  006E0C  9681               	bcf	3969,3,c	;volatile
  8933                           
  8934                           ;vclib_lcd.h: 171: lcd_send_4bits(n >> 4);
  8935  006E0E  0101               	movlb	1	; () banked
  8936  006E10  3905               	swapf	lcd_send_byte@n& (0+255),w,b
  8937  006E12  0B0F               	andlw	15
  8938  006E14  ECF7  F030         	call	_lcd_send_4bits
  8939                           
  8940                           ;vclib_lcd.h: 172: lcd_send_4bits(n & 0b00001111 );
  8941  006E18  0101               	movlb	1	; () banked
  8942  006E1A  5105               	movf	lcd_send_byte@n& (0+255),w,b
  8943  006E1C  0B0F               	andlw	15
  8944  006E1E  ECF7  F030         	call	_lcd_send_4bits
  8945  006E22  0012               	return		;funcret
  8946  006E24                     __end_of_lcd_send_byte:
  8947                           	opt stack 0
  8948                           tblptru	equ	0xFF8
  8949                           tblptrh	equ	0xFF7
  8950                           tblptrl	equ	0xFF6
  8951                           tablat	equ	0xFF5
  8952                           prodh	equ	0xFF4
  8953                           prodl	equ	0xFF3
  8954                           intcon	equ	0xFF2
  8955                           postinc0	equ	0xFEE
  8956                           wreg	equ	0xFE8
  8957                           postdec1	equ	0xFE5
  8958                           fsr1l	equ	0xFE1
  8959                           indf2	equ	0xFDF
  8960                           postinc2	equ	0xFDE
  8961                           postdec2	equ	0xFDD
  8962                           fsr2h	equ	0xFDA
  8963                           fsr2l	equ	0xFD9
  8964                           status	equ	0xFD8
  8965                           
  8966 ;; *************** function _lcd_send_4bits *****************
  8967 ;; Defined at:
  8968 ;;		line 151 in file "source/../../vclib_lcd.h"
  8969 ;; Parameters:    Size  Location     Type
  8970 ;;  n               1    wreg     unsigned char 
  8971 ;; Auto vars:     Size  Location     Type
  8972 ;;  n               1    4[BANK1 ] unsigned char 
  8973 ;; Return value:  Size  Location     Type
  8974 ;;                  1    wreg      void 
  8975 ;; Registers used:
  8976 ;;		wreg, status,2
  8977 ;; Tracked objects:
  8978 ;;		On entry : 0/0
  8979 ;;		On exit  : 0/0
  8980 ;;		Unchanged: 0/0
  8981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8982 ;;      Params:         0       0       0       0       0       0       0
  8983 ;;      Locals:         0       0       5       0       0       0       0
  8984 ;;      Temps:          0       0       0       0       0       0       0
  8985 ;;      Totals:         0       0       5       0       0       0       0
  8986 ;;Total ram usage:        5 bytes
  8987 ;; Hardware stack levels used:    1
  8988 ;; Hardware stack levels required when called:   12
  8989 ;; This function calls:
  8990 ;;		Nothing
  8991 ;; This function is called by:
  8992 ;;		_lcd_send_byte
  8993 ;;		_lcd_init
  8994 ;; This function uses a non-reentrant model
  8995 ;;
  8996                           
  8997                           	psect	text30
  8998  0061EE                     __ptext30:
  8999                           	opt stack 0
  9000  0061EE                     _lcd_send_4bits:
  9001                           	opt stack 16
  9002                           
  9003                           ;incstack = 0
  9004                           ;lcd_send_4bits@n stored from wreg
  9005  0061EE  0101               	movlb	1	; () banked
  9006  0061F0  6F04               	movwf	lcd_send_4bits@n& (0+255),b
  9007                           
  9008                           ;vclib_lcd.h: 153: PORTBbits.RB4 = 0 || n & 1;
  9009  0061F2  0E01               	movlw	1
  9010  0061F4  0101               	movlb	1	; () banked
  9011  0061F6  6F00               	movwf	_lcd_send_4bits$1496& (0+255),b
  9012                           
  9013                           ; BSR set to: 1
  9014  0061F8  0101               	movlb	1	; () banked
  9015  0061FA  B104               	btfsc	lcd_send_4bits@n& (0+255),0,b
  9016  0061FC  D003               	goto	l9709
  9017                           
  9018                           ; BSR set to: 1
  9019  0061FE  0E00               	movlw	0
  9020  006200  0101               	movlb	1	; () banked
  9021  006202  6F00               	movwf	_lcd_send_4bits$1496& (0+255),b
  9022  006204                     l9709:
  9023                           
  9024                           ; BSR set to: 1
  9025  006204  0101               	movlb	1	; () banked
  9026  006206  B100               	btfsc	_lcd_send_4bits$1496& (0+255),0,b
  9027  006208  D002               	bra	u14085
  9028  00620A  9881               	bcf	3969,4,c	;volatile
  9029  00620C  D001               	bra	u14086
  9030  00620E                     u14085:
  9031  00620E  8881               	bsf	3969,4,c	;volatile
  9032  006210                     u14086:
  9033                           
  9034                           ;vclib_lcd.h: 154: PORTBbits.RB5 = 0 || n & 2;
  9035  006210  0E01               	movlw	1
  9036  006212  0101               	movlb	1	; () banked
  9037  006214  6F01               	movwf	_lcd_send_4bits$1497& (0+255),b
  9038                           
  9039                           ; BSR set to: 1
  9040  006216  0101               	movlb	1	; () banked
  9041  006218  B304               	btfsc	lcd_send_4bits@n& (0+255),1,b
  9042  00621A  D003               	goto	l9715
  9043                           
  9044                           ; BSR set to: 1
  9045  00621C  0E00               	movlw	0
  9046  00621E  0101               	movlb	1	; () banked
  9047  006220  6F01               	movwf	_lcd_send_4bits$1497& (0+255),b
  9048  006222                     l9715:
  9049                           
  9050                           ; BSR set to: 1
  9051  006222  0101               	movlb	1	; () banked
  9052  006224  B101               	btfsc	_lcd_send_4bits$1497& (0+255),0,b
  9053  006226  D002               	bra	u14105
  9054  006228  9A81               	bcf	3969,5,c	;volatile
  9055  00622A  D001               	bra	u14106
  9056  00622C                     u14105:
  9057  00622C  8A81               	bsf	3969,5,c	;volatile
  9058  00622E                     u14106:
  9059                           
  9060                           ;vclib_lcd.h: 155: PORTBbits.RB6 = 0 || n & 4;
  9061  00622E  0E01               	movlw	1
  9062  006230  0101               	movlb	1	; () banked
  9063  006232  6F02               	movwf	_lcd_send_4bits$1498& (0+255),b
  9064                           
  9065                           ; BSR set to: 1
  9066  006234  0101               	movlb	1	; () banked
  9067  006236  B504               	btfsc	lcd_send_4bits@n& (0+255),2,b
  9068  006238  D003               	goto	l9721
  9069                           
  9070                           ; BSR set to: 1
  9071  00623A  0E00               	movlw	0
  9072  00623C  0101               	movlb	1	; () banked
  9073  00623E  6F02               	movwf	_lcd_send_4bits$1498& (0+255),b
  9074  006240                     l9721:
  9075                           
  9076                           ; BSR set to: 1
  9077  006240  0101               	movlb	1	; () banked
  9078  006242  B102               	btfsc	_lcd_send_4bits$1498& (0+255),0,b
  9079  006244  D002               	bra	u14125
  9080  006246  9C81               	bcf	3969,6,c	;volatile
  9081  006248  D001               	bra	u14126
  9082  00624A                     u14125:
  9083  00624A  8C81               	bsf	3969,6,c	;volatile
  9084  00624C                     u14126:
  9085                           
  9086                           ;vclib_lcd.h: 156: PORTBbits.RB7 = 0 || n & 8;
  9087  00624C  0E01               	movlw	1
  9088  00624E  0101               	movlb	1	; () banked
  9089  006250  6F03               	movwf	_lcd_send_4bits$1499& (0+255),b
  9090                           
  9091                           ; BSR set to: 1
  9092  006252  0101               	movlb	1	; () banked
  9093  006254  B704               	btfsc	lcd_send_4bits@n& (0+255),3,b
  9094  006256  D003               	goto	l9727
  9095                           
  9096                           ; BSR set to: 1
  9097  006258  0E00               	movlw	0
  9098  00625A  0101               	movlb	1	; () banked
  9099  00625C  6F03               	movwf	_lcd_send_4bits$1499& (0+255),b
  9100  00625E                     l9727:
  9101                           
  9102                           ; BSR set to: 1
  9103  00625E  0101               	movlb	1	; () banked
  9104  006260  B103               	btfsc	_lcd_send_4bits$1499& (0+255),0,b
  9105  006262  D002               	bra	u14145
  9106  006264  9E81               	bcf	3969,7,c	;volatile
  9107  006266  D001               	bra	u14146
  9108  006268                     u14145:
  9109  006268  8E81               	bsf	3969,7,c	;volatile
  9110  00626A                     u14146:
  9111                           
  9112                           ;vclib_lcd.h: 157: _delay((unsigned long)((1)*(16000000/4000000.0)));
  9113  00626A  D000               	nop2		;2 cycle nop
  9114  00626C  D000               	nop2		;2 cycle nop
  9115                           
  9116                           ;vclib_lcd.h: 158: PORTBbits.RB3 = 1;
  9117  00626E  8681               	bsf	3969,3,c	;volatile
  9118                           
  9119                           ;vclib_lcd.h: 159: _delay((unsigned long)((2)*(16000000/4000000.0)));
  9120  006270  D000               	nop2		;2 cycle nop
  9121  006272  D000               	nop2		;2 cycle nop
  9122  006274  D000               	nop2		;2 cycle nop
  9123  006276  D000               	nop2		;2 cycle nop
  9124                           
  9125                           ;vclib_lcd.h: 160: PORTBbits.RB3 = 0;
  9126  006278  9681               	bcf	3969,3,c	;volatile
  9127  00627A  0012               	return		;funcret
  9128  00627C                     __end_of_lcd_send_4bits:
  9129                           	opt stack 0
  9130                           tblptru	equ	0xFF8
  9131                           tblptrh	equ	0xFF7
  9132                           tblptrl	equ	0xFF6
  9133                           tablat	equ	0xFF5
  9134                           prodh	equ	0xFF4
  9135                           prodl	equ	0xFF3
  9136                           intcon	equ	0xFF2
  9137                           postinc0	equ	0xFEE
  9138                           wreg	equ	0xFE8
  9139                           postdec1	equ	0xFE5
  9140                           fsr1l	equ	0xFE1
  9141                           indf2	equ	0xFDF
  9142                           postinc2	equ	0xFDE
  9143                           postdec2	equ	0xFDD
  9144                           fsr2h	equ	0xFDA
  9145                           fsr2l	equ	0xFD9
  9146                           status	equ	0xFD8
  9147                           
  9148 ;; *************** function _lcd_read_byte *****************
  9149 ;; Defined at:
  9150 ;;		line 127 in file "source/../../vclib_lcd.h"
  9151 ;; Parameters:    Size  Location     Type
  9152 ;;		None
  9153 ;; Auto vars:     Size  Location     Type
  9154 ;;  high            1    3[BANK1 ] unsigned char 
  9155 ;;  low             1    2[BANK1 ] unsigned char 
  9156 ;; Return value:  Size  Location     Type
  9157 ;;                  1    wreg      unsigned char 
  9158 ;; Registers used:
  9159 ;;		wreg, status,2, status,0, cstack
  9160 ;; Tracked objects:
  9161 ;;		On entry : 0/0
  9162 ;;		On exit  : 0/0
  9163 ;;		Unchanged: 0/0
  9164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9165 ;;      Params:         0       0       0       0       0       0       0
  9166 ;;      Locals:         0       0       2       0       0       0       0
  9167 ;;      Temps:          0       0       0       0       0       0       0
  9168 ;;      Totals:         0       0       2       0       0       0       0
  9169 ;;Total ram usage:        2 bytes
  9170 ;; Hardware stack levels used:    1
  9171 ;; Hardware stack levels required when called:   13
  9172 ;; This function calls:
  9173 ;;		_lcd_read_4bits
  9174 ;; This function is called by:
  9175 ;;		_lcd_send_byte
  9176 ;;		_lcd_getc
  9177 ;; This function uses a non-reentrant model
  9178 ;;
  9179                           
  9180                           	psect	text31
  9181  006D56                     __ptext31:
  9182                           	opt stack 0
  9183  006D56                     _lcd_read_byte:
  9184                           	opt stack 15
  9185                           
  9186                           ;vclib_lcd.h: 128: unsigned char low, high;
  9187                           ;vclib_lcd.h: 129: TRISBbits.TRISB4 = 1;
  9188                           
  9189                           ;incstack = 0
  9190  006D56  8893               	bsf	3987,4,c	;volatile
  9191                           
  9192                           ;vclib_lcd.h: 130: TRISBbits.TRISB5 = 1;
  9193  006D58  8A93               	bsf	3987,5,c	;volatile
  9194                           
  9195                           ;vclib_lcd.h: 131: TRISBbits.TRISB6 = 1;
  9196  006D5A  8C93               	bsf	3987,6,c	;volatile
  9197                           
  9198                           ;vclib_lcd.h: 132: TRISBbits.TRISB7 = 1;
  9199  006D5C  8E93               	bsf	3987,7,c	;volatile
  9200                           
  9201                           ;vclib_lcd.h: 133: PORTBbits.RB2 = 1;
  9202  006D5E  8481               	bsf	3969,2,c	;volatile
  9203                           
  9204                           ;vclib_lcd.h: 134: _delay((unsigned long)((1)*(16000000/4000000.0)));
  9205  006D60  D000               	nop2		;2 cycle nop
  9206  006D62  D000               	nop2		;2 cycle nop
  9207                           
  9208                           ;vclib_lcd.h: 135: PORTBbits.RB3 = 1;
  9209  006D64  8681               	bsf	3969,3,c	;volatile
  9210                           
  9211                           ;vclib_lcd.h: 136: _delay((unsigned long)((1)*(16000000/4000000.0)));
  9212  006D66  D000               	nop2		;2 cycle nop
  9213  006D68  D000               	nop2		;2 cycle nop
  9214                           
  9215                           ;vclib_lcd.h: 137: high = lcd_read_4bits();
  9216  006D6A  EC0F  F033         	call	_lcd_read_4bits	;wreg free
  9217  006D6E  0101               	movlb	1	; () banked
  9218  006D70  6F03               	movwf	lcd_read_byte@high& (0+255),b
  9219                           
  9220                           ; BSR set to: 1
  9221                           ;vclib_lcd.h: 138: PORTBbits.RB3 = 0;
  9222  006D72  9681               	bcf	3969,3,c	;volatile
  9223                           
  9224                           ; BSR set to: 1
  9225                           ;vclib_lcd.h: 139: _delay((unsigned long)((1)*(16000000/4000000.0)));
  9226  006D74  D000               	nop2		;2 cycle nop
  9227  006D76  D000               	nop2		;2 cycle nop
  9228                           
  9229                           ;vclib_lcd.h: 140: PORTBbits.RB3 = 1;
  9230  006D78  8681               	bsf	3969,3,c	;volatile
  9231                           
  9232                           ;vclib_lcd.h: 141: _delay((unsigned long)((1)*(16000000/4000000.0)));
  9233  006D7A  D000               	nop2		;2 cycle nop
  9234  006D7C  D000               	nop2		;2 cycle nop
  9235                           
  9236                           ;vclib_lcd.h: 142: low = lcd_read_4bits();
  9237  006D7E  EC0F  F033         	call	_lcd_read_4bits	;wreg free
  9238  006D82  0101               	movlb	1	; () banked
  9239  006D84  6F02               	movwf	lcd_read_byte@low& (0+255),b
  9240                           
  9241                           ; BSR set to: 1
  9242                           ;vclib_lcd.h: 143: PORTBbits.RB3 = 0;
  9243  006D86  9681               	bcf	3969,3,c	;volatile
  9244                           
  9245                           ; BSR set to: 1
  9246                           ;vclib_lcd.h: 144: TRISBbits.TRISB4 = 0;
  9247  006D88  9893               	bcf	3987,4,c	;volatile
  9248                           
  9249                           ; BSR set to: 1
  9250                           ;vclib_lcd.h: 145: TRISBbits.TRISB5 = 0;
  9251  006D8A  9A93               	bcf	3987,5,c	;volatile
  9252                           
  9253                           ; BSR set to: 1
  9254                           ;vclib_lcd.h: 146: TRISBbits.TRISB6 = 0;
  9255  006D8C  9C93               	bcf	3987,6,c	;volatile
  9256                           
  9257                           ; BSR set to: 1
  9258                           ;vclib_lcd.h: 147: TRISBbits.TRISB7 = 0;
  9259  006D8E  9E93               	bcf	3987,7,c	;volatile
  9260                           
  9261                           ; BSR set to: 1
  9262                           ;vclib_lcd.h: 148: return ( (high << 4) | low);
  9263  006D90  0101               	movlb	1	; () banked
  9264  006D92  3903               	swapf	lcd_read_byte@high& (0+255),w,b
  9265  006D94  0BF0               	andlw	240
  9266  006D96  0101               	movlb	1	; () banked
  9267  006D98  1102               	iorwf	lcd_read_byte@low& (0+255),w,b
  9268  006D9A  0012               	return	
  9269  006D9C                     __end_of_lcd_read_byte:
  9270                           	opt stack 0
  9271                           tblptru	equ	0xFF8
  9272                           tblptrh	equ	0xFF7
  9273                           tblptrl	equ	0xFF6
  9274                           tablat	equ	0xFF5
  9275                           prodh	equ	0xFF4
  9276                           prodl	equ	0xFF3
  9277                           intcon	equ	0xFF2
  9278                           postinc0	equ	0xFEE
  9279                           wreg	equ	0xFE8
  9280                           postdec1	equ	0xFE5
  9281                           fsr1l	equ	0xFE1
  9282                           indf2	equ	0xFDF
  9283                           postinc2	equ	0xFDE
  9284                           postdec2	equ	0xFDD
  9285                           fsr2h	equ	0xFDA
  9286                           fsr2l	equ	0xFD9
  9287                           status	equ	0xFD8
  9288                           
  9289 ;; *************** function _lcd_read_4bits *****************
  9290 ;; Defined at:
  9291 ;;		line 117 in file "source/../../vclib_lcd.h"
  9292 ;; Parameters:    Size  Location     Type
  9293 ;;		None
  9294 ;; Auto vars:     Size  Location     Type
  9295 ;;  n               1    1[BANK1 ] unsigned char 
  9296 ;; Return value:  Size  Location     Type
  9297 ;;                  1    wreg      unsigned char 
  9298 ;; Registers used:
  9299 ;;		wreg, status,2, status,0
  9300 ;; Tracked objects:
  9301 ;;		On entry : 0/0
  9302 ;;		On exit  : 0/0
  9303 ;;		Unchanged: 0/0
  9304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9305 ;;      Params:         0       0       0       0       0       0       0
  9306 ;;      Locals:         0       0       1       0       0       0       0
  9307 ;;      Temps:          0       0       1       0       0       0       0
  9308 ;;      Totals:         0       0       2       0       0       0       0
  9309 ;;Total ram usage:        2 bytes
  9310 ;; Hardware stack levels used:    1
  9311 ;; Hardware stack levels required when called:   12
  9312 ;; This function calls:
  9313 ;;		Nothing
  9314 ;; This function is called by:
  9315 ;;		_lcd_read_byte
  9316 ;; This function uses a non-reentrant model
  9317 ;;
  9318                           
  9319                           	psect	text32
  9320  00661E                     __ptext32:
  9321                           	opt stack 0
  9322  00661E                     _lcd_read_4bits:
  9323                           	opt stack 15
  9324                           
  9325                           ;vclib_lcd.h: 118: unsigned char n = 0x00;
  9326                           
  9327                           ; BSR set to: 1
  9328                           ;incstack = 0
  9329  00661E  0E00               	movlw	0
  9330  006620  0101               	movlb	1	; () banked
  9331  006622  6F01               	movwf	lcd_read_4bits@n& (0+255),b
  9332                           
  9333                           ; BSR set to: 1
  9334                           ;vclib_lcd.h: 120: n |= PORTBbits.RB4;
  9335  006624  A881               	btfss	3969,4,c	;volatile
  9336  006626  D002               	goto	u14030
  9337  006628  0E01               	movlw	1
  9338  00662A  D001               	goto	u14036
  9339  00662C                     u14030:
  9340  00662C  0E00               	movlw	0
  9341  00662E                     u14036:
  9342  00662E  0101               	movlb	1	; () banked
  9343  006630  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9344                           
  9345                           ; BSR set to: 1
  9346                           ;vclib_lcd.h: 121: n |= PORTBbits.RB5 << 1;
  9347  006632  AA81               	btfss	3969,5,c	;volatile
  9348  006634  D004               	goto	u14040
  9349  006636  0101               	movlb	1	; () banked
  9350  006638  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9351  00663A  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  9352  00663C  D002               	goto	u14048
  9353  00663E                     u14040:
  9354  00663E  0101               	movlb	1	; () banked
  9355  006640  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9356  006642                     u14048:
  9357  006642  0101               	movlb	1	; () banked
  9358  006644  90D8               	bcf	status,0,c
  9359  006646  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9360  006648  0101               	movlb	1	; () banked
  9361  00664A  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9362                           
  9363                           ; BSR set to: 1
  9364                           ;vclib_lcd.h: 122: n |= PORTBbits.RB6 << 2;
  9365  00664C  AC81               	btfss	3969,6,c	;volatile
  9366  00664E  D004               	goto	u14050
  9367  006650  0101               	movlb	1	; () banked
  9368  006652  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9369  006654  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  9370  006656  D002               	goto	u14058
  9371  006658                     u14050:
  9372  006658  0101               	movlb	1	; () banked
  9373  00665A  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9374  00665C                     u14058:
  9375  00665C  0101               	movlb	1	; () banked
  9376  00665E  90D8               	bcf	status,0,c
  9377  006660  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9378  006662  0101               	movlb	1	; () banked
  9379  006664  90D8               	bcf	status,0,c
  9380  006666  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9381  006668  0101               	movlb	1	; () banked
  9382  00666A  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9383                           
  9384                           ; BSR set to: 1
  9385                           ;vclib_lcd.h: 123: n |= PORTBbits.RB7 << 3;
  9386  00666C  AE81               	btfss	3969,7,c	;volatile
  9387  00666E  D004               	goto	u14060
  9388  006670  0101               	movlb	1	; () banked
  9389  006672  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9390  006674  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  9391  006676  D002               	goto	u14068
  9392  006678                     u14060:
  9393  006678  0101               	movlb	1	; () banked
  9394  00667A  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9395  00667C                     u14068:
  9396  00667C  0101               	movlb	1	; () banked
  9397  00667E  90D8               	bcf	status,0,c
  9398  006680  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9399  006682  0101               	movlb	1	; () banked
  9400  006684  90D8               	bcf	status,0,c
  9401  006686  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9402  006688  0101               	movlb	1	; () banked
  9403  00668A  90D8               	bcf	status,0,c
  9404  00668C  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9405  00668E  0101               	movlb	1	; () banked
  9406  006690  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9407                           
  9408                           ;vclib_lcd.h: 124: return (n);
  9409  006692  0101               	movlb	1	; () banked
  9410  006694  5101               	movf	lcd_read_4bits@n& (0+255),w,b
  9411  006696  0012               	return	
  9412  006698                     __end_of_lcd_read_4bits:
  9413                           	opt stack 0
  9414                           tblptru	equ	0xFF8
  9415                           tblptrh	equ	0xFF7
  9416                           tblptrl	equ	0xFF6
  9417                           tablat	equ	0xFF5
  9418                           prodh	equ	0xFF4
  9419                           prodl	equ	0xFF3
  9420                           intcon	equ	0xFF2
  9421                           postinc0	equ	0xFEE
  9422                           wreg	equ	0xFE8
  9423                           postdec1	equ	0xFE5
  9424                           fsr1l	equ	0xFE1
  9425                           indf2	equ	0xFDF
  9426                           postinc2	equ	0xFDE
  9427                           postdec2	equ	0xFDD
  9428                           fsr2h	equ	0xFDA
  9429                           fsr2l	equ	0xFD9
  9430                           status	equ	0xFD8
  9431                           
  9432 ;; *************** function _isdigit *****************
  9433 ;; Defined at:
  9434 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\isdigit.c"
  9435 ;; Parameters:    Size  Location     Type
  9436 ;;  c               1    wreg     unsigned char 
  9437 ;; Auto vars:     Size  Location     Type
  9438 ;;  c               1    2[BANK1 ] unsigned char 
  9439 ;; Return value:  Size  Location     Type
  9440 ;;		None               void
  9441 ;; Registers used:
  9442 ;;		wreg, status,2, status,0
  9443 ;; Tracked objects:
  9444 ;;		On entry : 0/0
  9445 ;;		On exit  : 0/0
  9446 ;;		Unchanged: 0/0
  9447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9448 ;;      Params:         0       0       0       0       0       0       0
  9449 ;;      Locals:         0       0       2       0       0       0       0
  9450 ;;      Temps:          0       0       1       0       0       0       0
  9451 ;;      Totals:         0       0       3       0       0       0       0
  9452 ;;Total ram usage:        3 bytes
  9453 ;; Hardware stack levels used:    1
  9454 ;; Hardware stack levels required when called:   12
  9455 ;; This function calls:
  9456 ;;		Nothing
  9457 ;; This function is called by:
  9458 ;;		_printf
  9459 ;; This function uses a non-reentrant model
  9460 ;;
  9461                           
  9462                           	psect	text33
  9463  0070E2                     __ptext33:
  9464                           	opt stack 0
  9465  0070E2                     _isdigit:
  9466                           	opt stack 15
  9467                           
  9468                           ; BSR set to: 1
  9469                           ;incstack = 0
  9470                           ;isdigit@c stored from wreg
  9471  0070E2  0101               	movlb	1	; () banked
  9472  0070E4  6F02               	movwf	isdigit@c& (0+255),b
  9473  0070E6  0E00               	movlw	0
  9474  0070E8  0101               	movlb	1	; () banked
  9475  0070EA  6F01               	movwf	_isdigit$2329& (0+255),b
  9476                           
  9477                           ; BSR set to: 1
  9478  0070EC  0E3A               	movlw	58
  9479  0070EE  0101               	movlb	1	; () banked
  9480  0070F0  6102               	cpfslt	isdigit@c& (0+255),b
  9481  0070F2  D007               	goto	l10161
  9482                           
  9483                           ; BSR set to: 1
  9484  0070F4  0E2F               	movlw	47
  9485  0070F6  0101               	movlb	1	; () banked
  9486  0070F8  6502               	cpfsgt	isdigit@c& (0+255),b
  9487  0070FA  D003               	goto	l10161
  9488                           
  9489                           ; BSR set to: 1
  9490  0070FC  0E01               	movlw	1
  9491  0070FE  0101               	movlb	1	; () banked
  9492  007100  6F01               	movwf	_isdigit$2329& (0+255),b
  9493  007102                     l10161:
  9494                           
  9495                           ; BSR set to: 1
  9496  007102  C101  F100         	movff	_isdigit$2329,??_isdigit
  9497  007106  0101               	movlb	1	; () banked
  9498  007108  3100               	rrcf	??_isdigit& (0+255),w,b
  9499  00710A  0012               	return	
  9500  00710C                     __end_of_isdigit:
  9501                           	opt stack 0
  9502                           tblptru	equ	0xFF8
  9503                           tblptrh	equ	0xFF7
  9504                           tblptrl	equ	0xFF6
  9505                           tablat	equ	0xFF5
  9506                           prodh	equ	0xFF4
  9507                           prodl	equ	0xFF3
  9508                           intcon	equ	0xFF2
  9509                           postinc0	equ	0xFEE
  9510                           wreg	equ	0xFE8
  9511                           postdec1	equ	0xFE5
  9512                           fsr1l	equ	0xFE1
  9513                           indf2	equ	0xFDF
  9514                           postinc2	equ	0xFDE
  9515                           postdec2	equ	0xFDD
  9516                           fsr2h	equ	0xFDA
  9517                           fsr2l	equ	0xFD9
  9518                           status	equ	0xFD8
  9519                           
  9520 ;; *************** function _fround *****************
  9521 ;; Defined at:
  9522 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\doprnt.c"
  9523 ;; Parameters:    Size  Location     Type
  9524 ;;  prec            1    wreg     unsigned char 
  9525 ;; Auto vars:     Size  Location     Type
  9526 ;;  prec            1   44[BANK1 ] unsigned char 
  9527 ;; Return value:  Size  Location     Type
  9528 ;;                  3   35[BANK1 ] unsigned char 
  9529 ;; Registers used:
  9530 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9531 ;; Tracked objects:
  9532 ;;		On entry : 0/0
  9533 ;;		On exit  : 0/0
  9534 ;;		Unchanged: 0/0
  9535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9536 ;;      Params:         0       0       3       0       0       0       0
  9537 ;;      Locals:         0       0       7       0       0       0       0
  9538 ;;      Temps:          0       0       0       0       0       0       0
  9539 ;;      Totals:         0       0      10       0       0       0       0
  9540 ;;Total ram usage:       10 bytes
  9541 ;; Hardware stack levels used:    1
  9542 ;; Hardware stack levels required when called:   14
  9543 ;; This function calls:
  9544 ;;		___awdiv
  9545 ;;		___awmod
  9546 ;;		___ftmul
  9547 ;;		___wmul
  9548 ;; This function is called by:
  9549 ;;		_printf
  9550 ;; This function uses a non-reentrant model
  9551 ;;
  9552                           
  9553                           	psect	text34
  9554  00251C                     __ptext34:
  9555                           	opt stack 0
  9556  00251C                     _fround:
  9557                           	opt stack 13
  9558                           
  9559                           ; BSR set to: 1
  9560                           ;incstack = 0
  9561                           ;fround@prec stored from wreg
  9562  00251C  0101               	movlb	1	; () banked
  9563  00251E  6F2C               	movwf	fround@prec& (0+255),b
  9564                           
  9565                           ;doprnt.c: 413: if(prec>=110)
  9566  002520  0E6D               	movlw	109
  9567  002522  0101               	movlb	1	; () banked
  9568  002524  652C               	cpfsgt	fround@prec& (0+255),b
  9569  002526  D0BA               	goto	l10103
  9570                           
  9571                           ; BSR set to: 1
  9572                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9573  002528  0E00               	movlw	0
  9574  00252A  0101               	movlb	1	; () banked
  9575  00252C  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9576  00252E  0E03               	movlw	3
  9577  002530  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9578  002532  0E00               	movlw	0
  9579  002534  0101               	movlb	1	; () banked
  9580  002536  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9581  002538  0E0A               	movlw	10
  9582  00253A  6F08               	movwf	___awdiv@divisor& (0+255),b
  9583  00253C  0E00               	movlw	0
  9584  00253E  0101               	movlb	1	; () banked
  9585  002540  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9586  002542  0E64               	movlw	100
  9587  002544  6F02               	movwf	___awmod@divisor& (0+255),b
  9588  002546  C12C  F100         	movff	fround@prec,___awmod@dividend
  9589  00254A  0101               	movlb	1	; () banked
  9590  00254C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9591  00254E  ECB4  F02D         	call	___awmod	;wreg free
  9592  002552  C100  F106         	movff	?___awmod,___awdiv@dividend
  9593  002556  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  9594  00255A  ECE4  F02B         	call	___awdiv	;wreg free
  9595  00255E  0E09               	movlw	9
  9596  002560  0101               	movlb	1	; () banked
  9597  002562  2506               	addwf	?___awdiv& (0+255),w,b
  9598  002564  0101               	movlb	1	; () banked
  9599  002566  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9600  002568  0E00               	movlw	0
  9601  00256A  0101               	movlb	1	; () banked
  9602  00256C  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9603  00256E  0101               	movlb	1	; () banked
  9604  002570  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9605  002572  EC84  F037         	call	___wmul	;wreg free
  9606  002576  0E24               	movlw	low __npowers_
  9607  002578  0101               	movlb	1	; () banked
  9608  00257A  250E               	addwf	?___wmul& (0+255),w,b
  9609  00257C  6EF6               	movwf	tblptrl,c
  9610  00257E  0E7D               	movlw	high __npowers_
  9611  002580  0101               	movlb	1	; () banked
  9612  002582  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9613  002584  6EF7               	movwf	tblptrh,c
  9614  002586                     	if	0	;There are less than 3 active tblptr bytes
  9615  002586                     	endif
  9616  002586  0009               	tblrd		*+
  9617  002588  CFF5 F117          	movff	tablat,___ftmul@f2
  9618  00258C  0009               	tblrd		*+
  9619  00258E  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9620  002592  000A               	tblrd		*-
  9621  002594  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9622  002598  0E00               	movlw	0
  9623  00259A  0101               	movlb	1	; () banked
  9624  00259C  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9625  00259E  0E64               	movlw	100
  9626  0025A0  6F08               	movwf	___awdiv@divisor& (0+255),b
  9627  0025A2  C12C  F106         	movff	fround@prec,___awdiv@dividend
  9628  0025A6  0101               	movlb	1	; () banked
  9629  0025A8  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  9630  0025AA  ECE4  F02B         	call	___awdiv	;wreg free
  9631  0025AE  0E12               	movlw	18
  9632  0025B0  0101               	movlb	1	; () banked
  9633  0025B2  2506               	addwf	?___awdiv& (0+255),w,b
  9634  0025B4  0101               	movlb	1	; () banked
  9635  0025B6  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9636  0025B8  0E00               	movlw	0
  9637  0025BA  0101               	movlb	1	; () banked
  9638  0025BC  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9639  0025BE  0101               	movlb	1	; () banked
  9640  0025C0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9641  0025C2  0E00               	movlw	0
  9642  0025C4  0101               	movlb	1	; () banked
  9643  0025C6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9644  0025C8  0E03               	movlw	3
  9645  0025CA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9646  0025CC  EC84  F037         	call	___wmul	;wreg free
  9647  0025D0  0E24               	movlw	low __npowers_
  9648  0025D2  0101               	movlb	1	; () banked
  9649  0025D4  250E               	addwf	?___wmul& (0+255),w,b
  9650  0025D6  6EF6               	movwf	tblptrl,c
  9651  0025D8  0E7D               	movlw	high __npowers_
  9652  0025DA  0101               	movlb	1	; () banked
  9653  0025DC  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9654  0025DE  6EF7               	movwf	tblptrh,c
  9655  0025E0                     	if	0	;There are less than 3 active tblptr bytes
  9656  0025E0                     	endif
  9657  0025E0  0009               	tblrd		*+
  9658  0025E2  CFF5 F114          	movff	tablat,___ftmul@f1
  9659  0025E6  0009               	tblrd		*+
  9660  0025E8  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9661  0025EC  000A               	tblrd		*-
  9662  0025EE  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9663  0025F2  EC35  F01C         	call	___ftmul	;wreg free
  9664  0025F6  C114  F129         	movff	?___ftmul,_fround$2844
  9665  0025FA  C115  F12A         	movff	?___ftmul+1,_fround$2844+1
  9666  0025FE  C116  F12B         	movff	?___ftmul+2,_fround$2844+2
  9667                           
  9668                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9669  002602  0E00               	movlw	0
  9670  002604  0101               	movlb	1	; () banked
  9671  002606  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9672  002608  0E03               	movlw	3
  9673  00260A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9674  00260C  0E00               	movlw	0
  9675  00260E  0101               	movlb	1	; () banked
  9676  002610  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9677  002612  0E0A               	movlw	10
  9678  002614  6F02               	movwf	___awmod@divisor& (0+255),b
  9679  002616  C12C  F100         	movff	fround@prec,___awmod@dividend
  9680  00261A  0101               	movlb	1	; () banked
  9681  00261C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9682  00261E  ECB4  F02D         	call	___awmod	;wreg free
  9683  002622  C100  F10E         	movff	?___awmod,___wmul@multiplier
  9684  002626  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  9685  00262A  EC84  F037         	call	___wmul	;wreg free
  9686  00262E  0E24               	movlw	low __npowers_
  9687  002630  0101               	movlb	1	; () banked
  9688  002632  250E               	addwf	?___wmul& (0+255),w,b
  9689  002634  6EF6               	movwf	tblptrl,c
  9690  002636  0E7D               	movlw	high __npowers_
  9691  002638  0101               	movlb	1	; () banked
  9692  00263A  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9693  00263C  6EF7               	movwf	tblptrh,c
  9694  00263E                     	if	0	;There are less than 3 active tblptr bytes
  9695  00263E                     	endif
  9696  00263E  0009               	tblrd		*+
  9697  002640  CFF5 F117          	movff	tablat,___ftmul@f2
  9698  002644  0009               	tblrd		*+
  9699  002646  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9700  00264A  000A               	tblrd		*-
  9701  00264C  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9702  002650  C129  F114         	movff	_fround$2844,___ftmul@f1
  9703  002654  C12A  F115         	movff	_fround$2844+1,___ftmul@f1+1
  9704  002658  C12B  F116         	movff	_fround$2844+2,___ftmul@f1+2
  9705  00265C  EC35  F01C         	call	___ftmul	;wreg free
  9706  002660  C114  F126         	movff	?___ftmul,_fround$2845
  9707  002664  C115  F127         	movff	?___ftmul+1,_fround$2845+1
  9708  002668  C116  F128         	movff	?___ftmul+2,_fround$2845+2
  9709                           
  9710                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9711  00266C  C126  F114         	movff	_fround$2845,___ftmul@f1
  9712  002670  C127  F115         	movff	_fround$2845+1,___ftmul@f1+1
  9713  002674  C128  F116         	movff	_fround$2845+2,___ftmul@f1+2
  9714  002678  0E00               	movlw	0
  9715  00267A  0101               	movlb	1	; () banked
  9716  00267C  6F17               	movwf	___ftmul@f2& (0+255),b
  9717  00267E  0E00               	movlw	0
  9718  002680  0101               	movlb	1	; () banked
  9719  002682  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9720  002684  0E3F               	movlw	63
  9721  002686  0101               	movlb	1	; () banked
  9722  002688  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9723  00268A  EC35  F01C         	call	___ftmul	;wreg free
  9724  00268E  C114  F123         	movff	?___ftmul,?_fround
  9725  002692  C115  F124         	movff	?___ftmul+1,?_fround+1
  9726  002696  C116  F125         	movff	?___ftmul+2,?_fround+2
  9727  00269A  0012               	return	
  9728  00269C                     l10103:
  9729                           
  9730                           ;doprnt.c: 415: else if(prec > 10)
  9731  00269C  0E0A               	movlw	10
  9732  00269E  0101               	movlb	1	; () banked
  9733  0026A0  652C               	cpfsgt	fround@prec& (0+255),b
  9734  0026A2  D06E               	goto	l10111
  9735                           
  9736                           ; BSR set to: 1
  9737                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9738  0026A4  0E00               	movlw	0
  9739  0026A6  0101               	movlb	1	; () banked
  9740  0026A8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9741  0026AA  0E03               	movlw	3
  9742  0026AC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9743  0026AE  0E00               	movlw	0
  9744  0026B0  0101               	movlb	1	; () banked
  9745  0026B2  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9746  0026B4  0E0A               	movlw	10
  9747  0026B6  6F02               	movwf	___awmod@divisor& (0+255),b
  9748  0026B8  C12C  F100         	movff	fround@prec,___awmod@dividend
  9749  0026BC  0101               	movlb	1	; () banked
  9750  0026BE  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9751  0026C0  ECB4  F02D         	call	___awmod	;wreg free
  9752  0026C4  C100  F10E         	movff	?___awmod,___wmul@multiplier
  9753  0026C8  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  9754  0026CC  EC84  F037         	call	___wmul	;wreg free
  9755  0026D0  0E24               	movlw	low __npowers_
  9756  0026D2  0101               	movlb	1	; () banked
  9757  0026D4  250E               	addwf	?___wmul& (0+255),w,b
  9758  0026D6  6EF6               	movwf	tblptrl,c
  9759  0026D8  0E7D               	movlw	high __npowers_
  9760  0026DA  0101               	movlb	1	; () banked
  9761  0026DC  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9762  0026DE  6EF7               	movwf	tblptrh,c
  9763  0026E0                     	if	0	;There are less than 3 active tblptr bytes
  9764  0026E0                     	endif
  9765  0026E0  0009               	tblrd		*+
  9766  0026E2  CFF5 F117          	movff	tablat,___ftmul@f2
  9767  0026E6  0009               	tblrd		*+
  9768  0026E8  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9769  0026EC  000A               	tblrd		*-
  9770  0026EE  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9771  0026F2  0E00               	movlw	0
  9772  0026F4  0101               	movlb	1	; () banked
  9773  0026F6  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9774  0026F8  0E0A               	movlw	10
  9775  0026FA  6F08               	movwf	___awdiv@divisor& (0+255),b
  9776  0026FC  C12C  F106         	movff	fround@prec,___awdiv@dividend
  9777  002700  0101               	movlb	1	; () banked
  9778  002702  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  9779  002704  ECE4  F02B         	call	___awdiv	;wreg free
  9780  002708  0E09               	movlw	9
  9781  00270A  0101               	movlb	1	; () banked
  9782  00270C  2506               	addwf	?___awdiv& (0+255),w,b
  9783  00270E  0101               	movlb	1	; () banked
  9784  002710  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9785  002712  0E00               	movlw	0
  9786  002714  0101               	movlb	1	; () banked
  9787  002716  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9788  002718  0101               	movlb	1	; () banked
  9789  00271A  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9790  00271C  0E00               	movlw	0
  9791  00271E  0101               	movlb	1	; () banked
  9792  002720  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9793  002722  0E03               	movlw	3
  9794  002724  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9795  002726  EC84  F037         	call	___wmul	;wreg free
  9796  00272A  0E24               	movlw	low __npowers_
  9797  00272C  0101               	movlb	1	; () banked
  9798  00272E  250E               	addwf	?___wmul& (0+255),w,b
  9799  002730  6EF6               	movwf	tblptrl,c
  9800  002732  0E7D               	movlw	high __npowers_
  9801  002734  0101               	movlb	1	; () banked
  9802  002736  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9803  002738  6EF7               	movwf	tblptrh,c
  9804  00273A                     	if	0	;There are less than 3 active tblptr bytes
  9805  00273A                     	endif
  9806  00273A  0009               	tblrd		*+
  9807  00273C  CFF5 F114          	movff	tablat,___ftmul@f1
  9808  002740  0009               	tblrd		*+
  9809  002742  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9810  002746  000A               	tblrd		*-
  9811  002748  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9812  00274C  EC35  F01C         	call	___ftmul	;wreg free
  9813  002750  C114  F129         	movff	?___ftmul,_fround$2844
  9814  002754  C115  F12A         	movff	?___ftmul+1,_fround$2844+1
  9815  002758  C116  F12B         	movff	?___ftmul+2,_fround$2844+2
  9816                           
  9817                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9818  00275C  C129  F114         	movff	_fround$2844,___ftmul@f1
  9819  002760  C12A  F115         	movff	_fround$2844+1,___ftmul@f1+1
  9820  002764  C12B  F116         	movff	_fround$2844+2,___ftmul@f1+2
  9821  002768  0E00               	movlw	0
  9822  00276A  0101               	movlb	1	; () banked
  9823  00276C  6F17               	movwf	___ftmul@f2& (0+255),b
  9824  00276E  0E00               	movlw	0
  9825  002770  0101               	movlb	1	; () banked
  9826  002772  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9827  002774  0E3F               	movlw	63
  9828  002776  0101               	movlb	1	; () banked
  9829  002778  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9830  00277A  EC35  F01C         	call	___ftmul	;wreg free
  9831  00277E  D787               	goto	L5
  9832  002780                     l10111:
  9833                           
  9834                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9835  002780  0101               	movlb	1	; () banked
  9836  002782  512C               	movf	fround@prec& (0+255),w,b
  9837  002784  0D03               	mullw	3
  9838  002786  0E24               	movlw	low __npowers_
  9839  002788  24F3               	addwf	prodl,w,c
  9840  00278A  6EF6               	movwf	tblptrl,c
  9841  00278C  0E7D               	movlw	high __npowers_
  9842  00278E  20F4               	addwfc	prodh,w,c
  9843  002790  6EF7               	movwf	tblptrh,c
  9844  002792                     	if	0	;There are less than 3 active tblptr bytes
  9845  002792                     	endif
  9846  002792  0009               	tblrd		*+
  9847  002794  CFF5 F114          	movff	tablat,___ftmul@f1
  9848  002798  0009               	tblrd		*+
  9849  00279A  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9850  00279E  000A               	tblrd		*-
  9851  0027A0  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9852  0027A4  0E00               	movlw	0
  9853  0027A6  0101               	movlb	1	; () banked
  9854  0027A8  6F17               	movwf	___ftmul@f2& (0+255),b
  9855  0027AA  0E00               	movlw	0
  9856  0027AC  0101               	movlb	1	; () banked
  9857  0027AE  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9858  0027B0  0E3F               	movlw	63
  9859  0027B2  0101               	movlb	1	; () banked
  9860  0027B4  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9861  0027B6  EC35  F01C         	call	___ftmul	;wreg free
  9862  0027BA  C114  F123         	movff	?___ftmul,?_fround
  9863  0027BE  C115  F124         	movff	?___ftmul+1,?_fround+1
  9864  0027C2  C116  F125         	movff	?___ftmul+2,?_fround+2
  9865  0027C6  0012               	return	
  9866  0027C8                     __end_of_fround:
  9867                           	opt stack 0
  9868                           tblptru	equ	0xFF8
  9869                           tblptrh	equ	0xFF7
  9870                           tblptrl	equ	0xFF6
  9871                           tablat	equ	0xFF5
  9872                           prodh	equ	0xFF4
  9873                           prodl	equ	0xFF3
  9874                           intcon	equ	0xFF2
  9875                           postinc0	equ	0xFEE
  9876                           wreg	equ	0xFE8
  9877                           postdec1	equ	0xFE5
  9878                           fsr1l	equ	0xFE1
  9879                           indf2	equ	0xFDF
  9880                           postinc2	equ	0xFDE
  9881                           postdec2	equ	0xFDD
  9882                           fsr2h	equ	0xFDA
  9883                           fsr2l	equ	0xFD9
  9884                           status	equ	0xFD8
  9885                           
  9886 ;; *************** function ___wmul *****************
  9887 ;; Defined at:
  9888 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  9889 ;; Parameters:    Size  Location     Type
  9890 ;;  multiplier      2   14[BANK1 ] unsigned int 
  9891 ;;  multiplicand    2   16[BANK1 ] unsigned int 
  9892 ;; Auto vars:     Size  Location     Type
  9893 ;;  product         2   18[BANK1 ] unsigned int 
  9894 ;; Return value:  Size  Location     Type
  9895 ;;                  2   14[BANK1 ] unsigned int 
  9896 ;; Registers used:
  9897 ;;		wreg, status,2, status,0, prodl, prodh
  9898 ;; Tracked objects:
  9899 ;;		On entry : 0/0
  9900 ;;		On exit  : 0/0
  9901 ;;		Unchanged: 0/0
  9902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9903 ;;      Params:         0       0       4       0       0       0       0
  9904 ;;      Locals:         0       0       2       0       0       0       0
  9905 ;;      Temps:          0       0       0       0       0       0       0
  9906 ;;      Totals:         0       0       6       0       0       0       0
  9907 ;;Total ram usage:        6 bytes
  9908 ;; Hardware stack levels used:    1
  9909 ;; Hardware stack levels required when called:   12
  9910 ;; This function calls:
  9911 ;;		Nothing
  9912 ;; This function is called by:
  9913 ;;		_fround
  9914 ;;		_scale
  9915 ;;		_printf
  9916 ;; This function uses a non-reentrant model
  9917 ;;
  9918                           
  9919                           	psect	text35
  9920  006F08                     __ptext35:
  9921                           	opt stack 0
  9922  006F08                     ___wmul:
  9923                           	opt stack 14
  9924                           
  9925                           ;incstack = 0
  9926  006F08  0101               	movlb	1	; () banked
  9927  006F0A  510E               	movf	___wmul@multiplier& (0+255),w,b
  9928  006F0C  0101               	movlb	1	; () banked
  9929  006F0E  0310               	mulwf	___wmul@multiplicand& (0+255),b
  9930  006F10  CFF3 F112          	movff	prodl,___wmul@product
  9931  006F14  CFF4 F113          	movff	prodh,___wmul@product+1
  9932  006F18  0101               	movlb	1	; () banked
  9933  006F1A  510E               	movf	___wmul@multiplier& (0+255),w,b
  9934  006F1C  0101               	movlb	1	; () banked
  9935  006F1E  0311               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9936  006F20  50F3               	movf	prodl,w,c
  9937  006F22  0101               	movlb	1	; () banked
  9938  006F24  2713               	addwf	(___wmul@product+1)& (0+255),f,b
  9939  006F26  0101               	movlb	1	; () banked
  9940  006F28  510F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9941  006F2A  0101               	movlb	1	; () banked
  9942  006F2C  0310               	mulwf	___wmul@multiplicand& (0+255),b
  9943  006F2E  50F3               	movf	prodl,w,c
  9944  006F30  0101               	movlb	1	; () banked
  9945  006F32  2713               	addwf	(___wmul@product+1)& (0+255),f,b
  9946                           
  9947                           ; BSR set to: 1
  9948  006F34  C112  F10E         	movff	___wmul@product,?___wmul
  9949  006F38  C113  F10F         	movff	___wmul@product+1,?___wmul+1
  9950  006F3C  0012               	return	
  9951  006F3E                     __end_of___wmul:
  9952                           	opt stack 0
  9953                           tblptru	equ	0xFF8
  9954                           tblptrh	equ	0xFF7
  9955                           tblptrl	equ	0xFF6
  9956                           tablat	equ	0xFF5
  9957                           prodh	equ	0xFF4
  9958                           prodl	equ	0xFF3
  9959                           intcon	equ	0xFF2
  9960                           postinc0	equ	0xFEE
  9961                           wreg	equ	0xFE8
  9962                           postdec1	equ	0xFE5
  9963                           fsr1l	equ	0xFE1
  9964                           indf2	equ	0xFDF
  9965                           postinc2	equ	0xFDE
  9966                           postdec2	equ	0xFDD
  9967                           fsr2h	equ	0xFDA
  9968                           fsr2l	equ	0xFD9
  9969                           status	equ	0xFD8
  9970                           
  9971 ;; *************** function ___awmod *****************
  9972 ;; Defined at:
  9973 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awmod.c"
  9974 ;; Parameters:    Size  Location     Type
  9975 ;;  dividend        2    0[BANK1 ] int 
  9976 ;;  divisor         2    2[BANK1 ] int 
  9977 ;; Auto vars:     Size  Location     Type
  9978 ;;  sign            1    5[BANK1 ] unsigned char 
  9979 ;;  counter         1    4[BANK1 ] unsigned char 
  9980 ;; Return value:  Size  Location     Type
  9981 ;;                  2    0[BANK1 ] int 
  9982 ;; Registers used:
  9983 ;;		wreg, status,2, status,0
  9984 ;; Tracked objects:
  9985 ;;		On entry : 0/0
  9986 ;;		On exit  : 0/0
  9987 ;;		Unchanged: 0/0
  9988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9989 ;;      Params:         0       0       4       0       0       0       0
  9990 ;;      Locals:         0       0       2       0       0       0       0
  9991 ;;      Temps:          0       0       0       0       0       0       0
  9992 ;;      Totals:         0       0       6       0       0       0       0
  9993 ;;Total ram usage:        6 bytes
  9994 ;; Hardware stack levels used:    1
  9995 ;; Hardware stack levels required when called:   12
  9996 ;; This function calls:
  9997 ;;		Nothing
  9998 ;; This function is called by:
  9999 ;;		_fround
 10000 ;;		_scale
 10001 ;; This function uses a non-reentrant model
 10002 ;;
 10003                           
 10004                           	psect	text36
 10005  005B68                     __ptext36:
 10006                           	opt stack 0
 10007  005B68                     ___awmod:
 10008                           	opt stack 14
 10009                           
 10010                           ; BSR set to: 1
 10011                           ;incstack = 0
 10012  005B68  0E00               	movlw	0
 10013  005B6A  0101               	movlb	1	; () banked
 10014  005B6C  6F05               	movwf	___awmod@sign& (0+255),b
 10015                           
 10016                           ; BSR set to: 1
 10017  005B6E  0101               	movlb	1	; () banked
 10018  005B70  AF01               	btfss	(___awmod@dividend+1)& (0+255),7,b
 10019  005B72  D008               	goto	l10033
 10020                           
 10021                           ; BSR set to: 1
 10022  005B74  0101               	movlb	1	; () banked
 10023  005B76  6D00               	negf	___awmod@dividend& (0+255),b
 10024  005B78  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
 10025  005B7A  B0D8               	btfsc	status,0,c
 10026  005B7C  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
 10027                           
 10028                           ; BSR set to: 1
 10029  005B7E  0E01               	movlw	1
 10030  005B80  0101               	movlb	1	; () banked
 10031  005B82  6F05               	movwf	___awmod@sign& (0+255),b
 10032  005B84                     l10033:
 10033                           
 10034                           ; BSR set to: 1
 10035  005B84  0101               	movlb	1	; () banked
 10036  005B86  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10037  005B88  D005               	goto	l10037
 10038                           
 10039                           ; BSR set to: 1
 10040  005B8A  0101               	movlb	1	; () banked
 10041  005B8C  6D02               	negf	___awmod@divisor& (0+255),b
 10042  005B8E  1F03               	comf	(___awmod@divisor+1)& (0+255),f,b
 10043  005B90  B0D8               	btfsc	status,0,c
 10044  005B92  2B03               	incf	(___awmod@divisor+1)& (0+255),f,b
 10045  005B94                     l10037:
 10046                           
 10047                           ; BSR set to: 1
 10048  005B94  0101               	movlb	1	; () banked
 10049  005B96  5102               	movf	___awmod@divisor& (0+255),w,b
 10050  005B98  0101               	movlb	1	; () banked
 10051  005B9A  1103               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 10052  005B9C  B4D8               	btfsc	status,2,c
 10053  005B9E  D026               	goto	l10053
 10054                           
 10055                           ; BSR set to: 1
 10056  005BA0  0E01               	movlw	1
 10057  005BA2  0101               	movlb	1	; () banked
 10058  005BA4  6F04               	movwf	___awmod@counter& (0+255),b
 10059  005BA6  D006               	goto	l10043
 10060  005BA8                     l10041:
 10061                           
 10062                           ; BSR set to: 1
 10063  005BA8  0101               	movlb	1	; () banked
 10064  005BAA  90D8               	bcf	status,0,c
 10065  005BAC  3702               	rlcf	___awmod@divisor& (0+255),f,b
 10066  005BAE  3703               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 10067  005BB0  0101               	movlb	1	; () banked
 10068  005BB2  2B04               	incf	___awmod@counter& (0+255),f,b
 10069  005BB4                     l10043:
 10070                           
 10071                           ; BSR set to: 1
 10072  005BB4  0101               	movlb	1	; () banked
 10073  005BB6  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
 10074  005BB8  D7F7               	goto	l10041
 10075  005BBA                     l10045:
 10076                           
 10077                           ; BSR set to: 1
 10078  005BBA  0101               	movlb	1	; () banked
 10079  005BBC  5102               	movf	___awmod@divisor& (0+255),w,b
 10080  005BBE  0101               	movlb	1	; () banked
 10081  005BC0  5D00               	subwf	___awmod@dividend& (0+255),w,b
 10082  005BC2  0101               	movlb	1	; () banked
 10083  005BC4  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
 10084  005BC6  0101               	movlb	1	; () banked
 10085  005BC8  5901               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 10086  005BCA  A0D8               	btfss	status,0,c
 10087  005BCC  D008               	goto	l10049
 10088                           
 10089                           ; BSR set to: 1
 10090  005BCE  0101               	movlb	1	; () banked
 10091  005BD0  5102               	movf	___awmod@divisor& (0+255),w,b
 10092  005BD2  0101               	movlb	1	; () banked
 10093  005BD4  5F00               	subwf	___awmod@dividend& (0+255),f,b
 10094  005BD6  0101               	movlb	1	; () banked
 10095  005BD8  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
 10096  005BDA  0101               	movlb	1	; () banked
 10097  005BDC  5B01               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 10098  005BDE                     l10049:
 10099                           
 10100                           ; BSR set to: 1
 10101  005BDE  0101               	movlb	1	; () banked
 10102  005BE0  90D8               	bcf	status,0,c
 10103  005BE2  3303               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 10104  005BE4  3302               	rrcf	___awmod@divisor& (0+255),f,b
 10105                           
 10106                           ; BSR set to: 1
 10107  005BE6  0101               	movlb	1	; () banked
 10108  005BE8  2F04               	decfsz	___awmod@counter& (0+255),f,b
 10109  005BEA  D7E7               	goto	l10045
 10110  005BEC                     l10053:
 10111                           
 10112                           ; BSR set to: 1
 10113  005BEC  0101               	movlb	1	; () banked
 10114  005BEE  5105               	movf	___awmod@sign& (0+255),w,b
 10115  005BF0  0101               	movlb	1	; () banked
 10116  005BF2  B4D8               	btfsc	status,2,c
 10117  005BF4  D005               	goto	l10057
 10118                           
 10119                           ; BSR set to: 1
 10120  005BF6  0101               	movlb	1	; () banked
 10121  005BF8  6D00               	negf	___awmod@dividend& (0+255),b
 10122  005BFA  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
 10123  005BFC  B0D8               	btfsc	status,0,c
 10124  005BFE  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
 10125  005C00                     l10057:
 10126                           
 10127                           ; BSR set to: 1
 10128  005C00  C100  F100         	movff	___awmod@dividend,?___awmod
 10129  005C04  C101  F101         	movff	___awmod@dividend+1,?___awmod+1
 10130  005C08  0012               	return	
 10131  005C0A                     __end_of___awmod:
 10132                           	opt stack 0
 10133                           tblptru	equ	0xFF8
 10134                           tblptrh	equ	0xFF7
 10135                           tblptrl	equ	0xFF6
 10136                           tablat	equ	0xFF5
 10137                           prodh	equ	0xFF4
 10138                           prodl	equ	0xFF3
 10139                           intcon	equ	0xFF2
 10140                           postinc0	equ	0xFEE
 10141                           wreg	equ	0xFE8
 10142                           postdec1	equ	0xFE5
 10143                           fsr1l	equ	0xFE1
 10144                           indf2	equ	0xFDF
 10145                           postinc2	equ	0xFDE
 10146                           postdec2	equ	0xFDD
 10147                           fsr2h	equ	0xFDA
 10148                           fsr2l	equ	0xFD9
 10149                           status	equ	0xFD8
 10150                           
 10151 ;; *************** function ___awdiv *****************
 10152 ;; Defined at:
 10153 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 10154 ;; Parameters:    Size  Location     Type
 10155 ;;  dividend        2    6[BANK1 ] int 
 10156 ;;  divisor         2    8[BANK1 ] int 
 10157 ;; Auto vars:     Size  Location     Type
 10158 ;;  quotient        2   12[BANK1 ] int 
 10159 ;;  sign            1   11[BANK1 ] unsigned char 
 10160 ;;  counter         1   10[BANK1 ] unsigned char 
 10161 ;; Return value:  Size  Location     Type
 10162 ;;                  2    6[BANK1 ] int 
 10163 ;; Registers used:
 10164 ;;		wreg, status,2, status,0
 10165 ;; Tracked objects:
 10166 ;;		On entry : 0/0
 10167 ;;		On exit  : 0/0
 10168 ;;		Unchanged: 0/0
 10169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10170 ;;      Params:         0       0       4       0       0       0       0
 10171 ;;      Locals:         0       0       4       0       0       0       0
 10172 ;;      Temps:          0       0       0       0       0       0       0
 10173 ;;      Totals:         0       0       8       0       0       0       0
 10174 ;;Total ram usage:        8 bytes
 10175 ;; Hardware stack levels used:    1
 10176 ;; Hardware stack levels required when called:   12
 10177 ;; This function calls:
 10178 ;;		Nothing
 10179 ;; This function is called by:
 10180 ;;		_fround
 10181 ;;		_scale
 10182 ;;		_printf
 10183 ;; This function uses a non-reentrant model
 10184 ;;
 10185                           
 10186                           	psect	text37
 10187  0057C8                     __ptext37:
 10188                           	opt stack 0
 10189  0057C8                     ___awdiv:
 10190                           	opt stack 14
 10191                           
 10192                           ; BSR set to: 1
 10193                           ;incstack = 0
 10194  0057C8  0E00               	movlw	0
 10195  0057CA  0101               	movlb	1	; () banked
 10196  0057CC  6F0B               	movwf	___awdiv@sign& (0+255),b
 10197                           
 10198                           ; BSR set to: 1
 10199  0057CE  0101               	movlb	1	; () banked
 10200  0057D0  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10201  0057D2  D008               	goto	l9989
 10202                           
 10203                           ; BSR set to: 1
 10204  0057D4  0101               	movlb	1	; () banked
 10205  0057D6  6D08               	negf	___awdiv@divisor& (0+255),b
 10206  0057D8  1F09               	comf	(___awdiv@divisor+1)& (0+255),f,b
 10207  0057DA  B0D8               	btfsc	status,0,c
 10208  0057DC  2B09               	incf	(___awdiv@divisor+1)& (0+255),f,b
 10209                           
 10210                           ; BSR set to: 1
 10211  0057DE  0E01               	movlw	1
 10212  0057E0  0101               	movlb	1	; () banked
 10213  0057E2  6F0B               	movwf	___awdiv@sign& (0+255),b
 10214  0057E4                     l9989:
 10215                           
 10216                           ; BSR set to: 1
 10217  0057E4  0101               	movlb	1	; () banked
 10218  0057E6  AF07               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 10219  0057E8  D008               	goto	l9995
 10220                           
 10221                           ; BSR set to: 1
 10222  0057EA  0101               	movlb	1	; () banked
 10223  0057EC  6D06               	negf	___awdiv@dividend& (0+255),b
 10224  0057EE  1F07               	comf	(___awdiv@dividend+1)& (0+255),f,b
 10225  0057F0  B0D8               	btfsc	status,0,c
 10226  0057F2  2B07               	incf	(___awdiv@dividend+1)& (0+255),f,b
 10227                           
 10228                           ; BSR set to: 1
 10229  0057F4  0E01               	movlw	1
 10230  0057F6  0101               	movlb	1	; () banked
 10231  0057F8  1B0B               	xorwf	___awdiv@sign& (0+255),f,b
 10232  0057FA                     l9995:
 10233                           
 10234                           ; BSR set to: 1
 10235  0057FA  0E00               	movlw	0
 10236  0057FC  0101               	movlb	1	; () banked
 10237  0057FE  6F0D               	movwf	(___awdiv@quotient+1)& (0+255),b
 10238  005800  0E00               	movlw	0
 10239  005802  6F0C               	movwf	___awdiv@quotient& (0+255),b
 10240                           
 10241                           ; BSR set to: 1
 10242  005804  0101               	movlb	1	; () banked
 10243  005806  5108               	movf	___awdiv@divisor& (0+255),w,b
 10244  005808  0101               	movlb	1	; () banked
 10245  00580A  1109               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 10246  00580C  B4D8               	btfsc	status,2,c
 10247  00580E  D02C               	goto	l10017
 10248                           
 10249                           ; BSR set to: 1
 10250  005810  0E01               	movlw	1
 10251  005812  0101               	movlb	1	; () banked
 10252  005814  6F0A               	movwf	___awdiv@counter& (0+255),b
 10253  005816  D006               	goto	l10003
 10254  005818                     l10001:
 10255                           
 10256                           ; BSR set to: 1
 10257  005818  0101               	movlb	1	; () banked
 10258  00581A  90D8               	bcf	status,0,c
 10259  00581C  3708               	rlcf	___awdiv@divisor& (0+255),f,b
 10260  00581E  3709               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 10261  005820  0101               	movlb	1	; () banked
 10262  005822  2B0A               	incf	___awdiv@counter& (0+255),f,b
 10263  005824                     l10003:
 10264                           
 10265                           ; BSR set to: 1
 10266  005824  0101               	movlb	1	; () banked
 10267  005826  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 10268  005828  D7F7               	goto	l10001
 10269  00582A                     l10005:
 10270                           
 10271                           ; BSR set to: 1
 10272  00582A  0101               	movlb	1	; () banked
 10273  00582C  90D8               	bcf	status,0,c
 10274  00582E  370C               	rlcf	___awdiv@quotient& (0+255),f,b
 10275  005830  370D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 10276                           
 10277                           ; BSR set to: 1
 10278  005832  0101               	movlb	1	; () banked
 10279  005834  5108               	movf	___awdiv@divisor& (0+255),w,b
 10280  005836  0101               	movlb	1	; () banked
 10281  005838  5D06               	subwf	___awdiv@dividend& (0+255),w,b
 10282  00583A  0101               	movlb	1	; () banked
 10283  00583C  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10284  00583E  0101               	movlb	1	; () banked
 10285  005840  5907               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 10286  005842  A0D8               	btfss	status,0,c
 10287  005844  D00A               	goto	l10013
 10288                           
 10289                           ; BSR set to: 1
 10290  005846  0101               	movlb	1	; () banked
 10291  005848  5108               	movf	___awdiv@divisor& (0+255),w,b
 10292  00584A  0101               	movlb	1	; () banked
 10293  00584C  5F06               	subwf	___awdiv@dividend& (0+255),f,b
 10294  00584E  0101               	movlb	1	; () banked
 10295  005850  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
 10296  005852  0101               	movlb	1	; () banked
 10297  005854  5B07               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 10298                           
 10299                           ; BSR set to: 1
 10300  005856  0101               	movlb	1	; () banked
 10301  005858  810C               	bsf	___awdiv@quotient& (0+255),0,b
 10302  00585A                     l10013:
 10303                           
 10304                           ; BSR set to: 1
 10305  00585A  0101               	movlb	1	; () banked
 10306  00585C  90D8               	bcf	status,0,c
 10307  00585E  3309               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 10308  005860  3308               	rrcf	___awdiv@divisor& (0+255),f,b
 10309                           
 10310                           ; BSR set to: 1
 10311  005862  0101               	movlb	1	; () banked
 10312  005864  2F0A               	decfsz	___awdiv@counter& (0+255),f,b
 10313  005866  D7E1               	goto	l10005
 10314  005868                     l10017:
 10315                           
 10316                           ; BSR set to: 1
 10317  005868  0101               	movlb	1	; () banked
 10318  00586A  510B               	movf	___awdiv@sign& (0+255),w,b
 10319  00586C  0101               	movlb	1	; () banked
 10320  00586E  B4D8               	btfsc	status,2,c
 10321  005870  D005               	goto	l10021
 10322                           
 10323                           ; BSR set to: 1
 10324  005872  0101               	movlb	1	; () banked
 10325  005874  6D0C               	negf	___awdiv@quotient& (0+255),b
 10326  005876  1F0D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 10327  005878  B0D8               	btfsc	status,0,c
 10328  00587A  2B0D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 10329  00587C                     l10021:
 10330                           
 10331                           ; BSR set to: 1
 10332  00587C  C10C  F106         	movff	___awdiv@quotient,?___awdiv
 10333  005880  C10D  F107         	movff	___awdiv@quotient+1,?___awdiv+1
 10334  005884  0012               	return	
 10335  005886                     __end_of___awdiv:
 10336                           	opt stack 0
 10337                           tblptru	equ	0xFF8
 10338                           tblptrh	equ	0xFF7
 10339                           tblptrl	equ	0xFF6
 10340                           tablat	equ	0xFF5
 10341                           prodh	equ	0xFF4
 10342                           prodl	equ	0xFF3
 10343                           intcon	equ	0xFF2
 10344                           postinc0	equ	0xFEE
 10345                           wreg	equ	0xFE8
 10346                           postdec1	equ	0xFE5
 10347                           fsr1l	equ	0xFE1
 10348                           indf2	equ	0xFDF
 10349                           postinc2	equ	0xFDE
 10350                           postdec2	equ	0xFDD
 10351                           fsr2h	equ	0xFDA
 10352                           fsr2l	equ	0xFD9
 10353                           status	equ	0xFD8
 10354                           
 10355 ;; *************** function __tdiv_to_l_ *****************
 10356 ;; Defined at:
 10357 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdivl.c"
 10358 ;; Parameters:    Size  Location     Type
 10359 ;;  f1              3    0[BANK1 ] float 
 10360 ;;  f2              3    3[BANK1 ] float 
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;  quot            4    9[BANK1 ] unsigned long 
 10363 ;;  exp1            1   14[BANK1 ] unsigned char 
 10364 ;;  cntr            1   13[BANK1 ] unsigned char 
 10365 ;; Return value:  Size  Location     Type
 10366 ;;                  4    0[BANK1 ] unsigned long 
 10367 ;; Registers used:
 10368 ;;		wreg, status,2, status,0
 10369 ;; Tracked objects:
 10370 ;;		On entry : 0/0
 10371 ;;		On exit  : 0/0
 10372 ;;		Unchanged: 0/0
 10373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10374 ;;      Params:         0       0       6       0       0       0       0
 10375 ;;      Locals:         0       0       6       0       0       0       0
 10376 ;;      Temps:          0       0       3       0       0       0       0
 10377 ;;      Totals:         0       0      15       0       0       0       0
 10378 ;;Total ram usage:       15 bytes
 10379 ;; Hardware stack levels used:    1
 10380 ;; Hardware stack levels required when called:   12
 10381 ;; This function calls:
 10382 ;;		Nothing
 10383 ;; This function is called by:
 10384 ;;		_printf
 10385 ;; This function uses a non-reentrant model
 10386 ;;
 10387                           
 10388                           	psect	text38
 10389  003544                     __ptext38:
 10390                           	opt stack 0
 10391  003544                     __tdiv_to_l_:
 10392                           	opt stack 15
 10393                           
 10394                           ; BSR set to: 1
 10395                           ;incstack = 0
 10396  003544  C102  F106         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 10397  003548  0101               	movlb	1	; () banked
 10398  00354A  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10399  00354C  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10400  00354E  0101               	movlb	1	; () banked
 10401  003550  3501               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10402  003552  0101               	movlb	1	; () banked
 10403  003554  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10404  003556  E301               	bnc	u14831
 10405  003558  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10406  00355A                     u14831:
 10407  00355A  0101               	movlb	1	; () banked
 10408  00355C  5106               	movf	??__tdiv_to_l_& (0+255),w,b
 10409  00355E  0101               	movlb	1	; () banked
 10410  003560  6F0E               	movwf	__tdiv_to_l_@exp1& (0+255),b
 10411  003562  0101               	movlb	1	; () banked
 10412  003564  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10413  003566  A4D8               	btfss	status,2,c
 10414  003568  D00A               	goto	l10171
 10415                           
 10416                           ; BSR set to: 1
 10417  00356A  0E00               	movlw	0
 10418  00356C  0101               	movlb	1	; () banked
 10419  00356E  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10420  003570  0E00               	movlw	0
 10421  003572  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10422  003574  0E00               	movlw	0
 10423  003576  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10424  003578  0E00               	movlw	0
 10425  00357A  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10426                           
 10427                           ; BSR set to: 1
 10428  00357C  0012               	return	
 10429  00357E                     l10171:
 10430                           
 10431                           ; BSR set to: 1
 10432  00357E  C105  F106         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 10433  003582  0101               	movlb	1	; () banked
 10434  003584  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10435  003586  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10436  003588  0101               	movlb	1	; () banked
 10437  00358A  3504               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10438  00358C  0101               	movlb	1	; () banked
 10439  00358E  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10440  003590  E301               	bnc	u14851
 10441  003592  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10442  003594                     u14851:
 10443  003594  0101               	movlb	1	; () banked
 10444  003596  5106               	movf	??__tdiv_to_l_& (0+255),w,b
 10445  003598  0101               	movlb	1	; () banked
 10446  00359A  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10447  00359C  0101               	movlb	1	; () banked
 10448  00359E  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 10449  0035A0  A4D8               	btfss	status,2,c
 10450  0035A2  D00A               	goto	l10177
 10451                           
 10452                           ; BSR set to: 1
 10453  0035A4  0E00               	movlw	0
 10454  0035A6  0101               	movlb	1	; () banked
 10455  0035A8  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10456  0035AA  0E00               	movlw	0
 10457  0035AC  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10458  0035AE  0E00               	movlw	0
 10459  0035B0  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10460  0035B2  0E00               	movlw	0
 10461  0035B4  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10462                           
 10463                           ; BSR set to: 1
 10464  0035B6  0012               	return	
 10465  0035B8                     l10177:
 10466                           
 10467                           ; BSR set to: 1
 10468  0035B8  0101               	movlb	1	; () banked
 10469  0035BA  8F01               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
 10470                           
 10471                           ; BSR set to: 1
 10472  0035BC  0EFF               	movlw	255
 10473  0035BE  0101               	movlb	1	; () banked
 10474  0035C0  1700               	andwf	__tdiv_to_l_@f1& (0+255),f,b
 10475  0035C2  0EFF               	movlw	255
 10476  0035C4  0101               	movlb	1	; () banked
 10477  0035C6  1701               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10478  0035C8  0E00               	movlw	0
 10479  0035CA  0101               	movlb	1	; () banked
 10480  0035CC  1702               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10481  0035CE  0101               	movlb	1	; () banked
 10482  0035D0  8F04               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
 10483                           
 10484                           ; BSR set to: 1
 10485  0035D2  0EFF               	movlw	255
 10486  0035D4  0101               	movlb	1	; () banked
 10487  0035D6  1703               	andwf	__tdiv_to_l_@f2& (0+255),f,b
 10488  0035D8  0EFF               	movlw	255
 10489  0035DA  0101               	movlb	1	; () banked
 10490  0035DC  1704               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
 10491  0035DE  0E00               	movlw	0
 10492  0035E0  0101               	movlb	1	; () banked
 10493  0035E2  1705               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
 10494                           
 10495                           ; BSR set to: 1
 10496  0035E4  0E00               	movlw	0
 10497  0035E6  0101               	movlb	1	; () banked
 10498  0035E8  6F09               	movwf	__tdiv_to_l_@quot& (0+255),b
 10499  0035EA  0E00               	movlw	0
 10500  0035EC  6F0A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
 10501  0035EE  0E00               	movlw	0
 10502  0035F0  6F0B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
 10503  0035F2  0E00               	movlw	0
 10504  0035F4  6F0C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
 10505                           
 10506                           ; BSR set to: 1
 10507  0035F6  0E7F               	movlw	127
 10508  0035F8  0101               	movlb	1	; () banked
 10509  0035FA  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10510                           
 10511                           ; BSR set to: 1
 10512  0035FC  0101               	movlb	1	; () banked
 10513  0035FE  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 10514  003600  0F98               	addlw	152
 10515  003602  0101               	movlb	1	; () banked
 10516  003604  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10517                           
 10518                           ; BSR set to: 1
 10519  003606  0E18               	movlw	24
 10520  003608  0101               	movlb	1	; () banked
 10521  00360A  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10522  00360C                     l1387:
 10523                           
 10524                           ; BSR set to: 1
 10525  00360C  0101               	movlb	1	; () banked
 10526  00360E  90D8               	bcf	status,0,c
 10527  003610  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 10528  003612  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10529  003614  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10530  003616  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10531                           
 10532                           ; BSR set to: 1
 10533  003618  0101               	movlb	1	; () banked
 10534  00361A  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10535  00361C  0101               	movlb	1	; () banked
 10536  00361E  5D00               	subwf	__tdiv_to_l_@f1& (0+255),w,b
 10537  003620  0101               	movlb	1	; () banked
 10538  003622  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10539  003624  0101               	movlb	1	; () banked
 10540  003626  5901               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10541  003628  0101               	movlb	1	; () banked
 10542  00362A  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10543  00362C  0101               	movlb	1	; () banked
 10544  00362E  5902               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
 10545  003630  A0D8               	btfss	status,0,c
 10546  003632  D00E               	goto	l1388
 10547                           
 10548                           ; BSR set to: 1
 10549  003634  0101               	movlb	1	; () banked
 10550  003636  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10551  003638  0101               	movlb	1	; () banked
 10552  00363A  5F00               	subwf	__tdiv_to_l_@f1& (0+255),f,b
 10553  00363C  0101               	movlb	1	; () banked
 10554  00363E  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10555  003640  0101               	movlb	1	; () banked
 10556  003642  5B01               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10557  003644  0101               	movlb	1	; () banked
 10558  003646  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10559  003648  0101               	movlb	1	; () banked
 10560  00364A  5B02               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10561                           
 10562                           ; BSR set to: 1
 10563  00364C  0101               	movlb	1	; () banked
 10564  00364E  8109               	bsf	__tdiv_to_l_@quot& (0+255),0,b
 10565  003650                     l1388:
 10566                           
 10567                           ; BSR set to: 1
 10568  003650  0101               	movlb	1	; () banked
 10569  003652  90D8               	bcf	status,0,c
 10570  003654  3700               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
 10571  003656  3701               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10572  003658  3702               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10573                           
 10574                           ; BSR set to: 1
 10575  00365A  0101               	movlb	1	; () banked
 10576  00365C  2F0D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
 10577  00365E  D7D6               	goto	l1387
 10578                           
 10579                           ; BSR set to: 1
 10580                           
 10581                           ; BSR set to: 1
 10582  003660  0101               	movlb	1	; () banked
 10583  003662  AF0E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
 10584  003664  D01A               	goto	l10211
 10585                           
 10586                           ; BSR set to: 1
 10587  003666  0101               	movlb	1	; () banked
 10588  003668  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10589  00366A  0A80               	xorlw	128
 10590  00366C  0F97               	addlw	151
 10591  00366E  B0D8               	btfsc	status,0,c
 10592  003670  D00A               	goto	l10207
 10593                           
 10594                           ; BSR set to: 1
 10595  003672  0E00               	movlw	0
 10596  003674  0101               	movlb	1	; () banked
 10597  003676  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10598  003678  0E00               	movlw	0
 10599  00367A  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10600  00367C  0E00               	movlw	0
 10601  00367E  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10602  003680  0E00               	movlw	0
 10603  003682  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10604                           
 10605                           ; BSR set to: 1
 10606  003684  0012               	return	
 10607  003686                     l10207:
 10608                           
 10609                           ; BSR set to: 1
 10610  003686  0101               	movlb	1	; () banked
 10611  003688  90D8               	bcf	status,0,c
 10612  00368A  330C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10613  00368C  330B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10614  00368E  330A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10615  003690  3309               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
 10616                           
 10617                           ; BSR set to: 1
 10618  003692  0101               	movlb	1	; () banked
 10619  003694  3F0E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
 10620  003696  D7F7               	goto	l10207
 10621                           
 10622                           ; BSR set to: 1
 10623  003698  D01B               	goto	l1394
 10624  00369A                     l10211:
 10625                           
 10626                           ; BSR set to: 1
 10627  00369A  0E17               	movlw	23
 10628  00369C  0101               	movlb	1	; () banked
 10629  00369E  650E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
 10630  0036A0  D012               	goto	l10219
 10631                           
 10632                           ; BSR set to: 1
 10633  0036A2  0E00               	movlw	0
 10634  0036A4  0101               	movlb	1	; () banked
 10635  0036A6  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10636  0036A8  0E00               	movlw	0
 10637  0036AA  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10638  0036AC  0E00               	movlw	0
 10639  0036AE  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10640  0036B0  0E00               	movlw	0
 10641  0036B2  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10642                           
 10643                           ; BSR set to: 1
 10644  0036B4  0012               	return	
 10645  0036B6                     l10217:
 10646                           
 10647                           ; BSR set to: 1
 10648  0036B6  0101               	movlb	1	; () banked
 10649  0036B8  90D8               	bcf	status,0,c
 10650  0036BA  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 10651  0036BC  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10652  0036BE  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10653  0036C0  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10654  0036C2  0101               	movlb	1	; () banked
 10655  0036C4  070E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
 10656  0036C6                     l10219:
 10657                           
 10658                           ; BSR set to: 1
 10659  0036C6  0101               	movlb	1	; () banked
 10660  0036C8  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10661  0036CA  0101               	movlb	1	; () banked
 10662  0036CC  A4D8               	btfss	status,2,c
 10663  0036CE  D7F3               	goto	l10217
 10664  0036D0                     l1394:
 10665                           
 10666                           ; BSR set to: 1
 10667  0036D0  C109  F100         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 10668  0036D4  C10A  F101         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 10669  0036D8  C10B  F102         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 10670  0036DC  C10C  F103         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 10671                           
 10672                           ; BSR set to: 1
 10673  0036E0  0012               	return		;funcret
 10674  0036E2                     __end_of__tdiv_to_l_:
 10675                           	opt stack 0
 10676                           tblptru	equ	0xFF8
 10677                           tblptrh	equ	0xFF7
 10678                           tblptrl	equ	0xFF6
 10679                           tablat	equ	0xFF5
 10680                           prodh	equ	0xFF4
 10681                           prodl	equ	0xFF3
 10682                           intcon	equ	0xFF2
 10683                           postinc0	equ	0xFEE
 10684                           wreg	equ	0xFE8
 10685                           postdec1	equ	0xFE5
 10686                           fsr1l	equ	0xFE1
 10687                           indf2	equ	0xFDF
 10688                           postinc2	equ	0xFDE
 10689                           postdec2	equ	0xFDD
 10690                           fsr2h	equ	0xFDA
 10691                           fsr2l	equ	0xFD9
 10692                           status	equ	0xFD8
 10693                           
 10694 ;; *************** function __div_to_l_ *****************
 10695 ;; Defined at:
 10696 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fldivl.c"
 10697 ;; Parameters:    Size  Location     Type
 10698 ;;  f1              3    0[BANK1 ] unsigned long 
 10699 ;;  f2              3    3[BANK1 ] unsigned long 
 10700 ;; Auto vars:     Size  Location     Type
 10701 ;;  quot            4    6[BANK1 ] unsigned long 
 10702 ;;  exp1            1   11[BANK1 ] unsigned char 
 10703 ;;  cntr            1   10[BANK1 ] unsigned char 
 10704 ;; Return value:  Size  Location     Type
 10705 ;;                  4    0[BANK1 ] unsigned long 
 10706 ;; Registers used:
 10707 ;;		wreg, status,2, status,0
 10708 ;; Tracked objects:
 10709 ;;		On entry : 0/0
 10710 ;;		On exit  : 0/0
 10711 ;;		Unchanged: 0/0
 10712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10713 ;;      Params:         0       0       6       0       0       0       0
 10714 ;;      Locals:         0       0       6       0       0       0       0
 10715 ;;      Temps:          0       0       0       0       0       0       0
 10716 ;;      Totals:         0       0      12       0       0       0       0
 10717 ;;Total ram usage:       12 bytes
 10718 ;; Hardware stack levels used:    1
 10719 ;; Hardware stack levels required when called:   12
 10720 ;; This function calls:
 10721 ;;		Nothing
 10722 ;; This function is called by:
 10723 ;;		_printf
 10724 ;; This function uses a non-reentrant model
 10725 ;;
 10726                           
 10727                           	psect	text39
 10728  0036E2                     __ptext39:
 10729                           	opt stack 0
 10730  0036E2                     __div_to_l_:
 10731                           	opt stack 15
 10732                           
 10733                           ; BSR set to: 1
 10734                           ;incstack = 0
 10735  0036E2  0101               	movlb	1	; () banked
 10736  0036E4  3502               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
 10737  0036E6  3503               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
 10738  0036E8  0101               	movlb	1	; () banked
 10739  0036EA  6F0B               	movwf	__div_to_l_@exp1& (0+255),b
 10740  0036EC  0101               	movlb	1	; () banked
 10741  0036EE  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10742  0036F0  A4D8               	btfss	status,2,c
 10743  0036F2  D00A               	goto	l10227
 10744                           
 10745                           ; BSR set to: 1
 10746  0036F4  0E00               	movlw	0
 10747  0036F6  0101               	movlb	1	; () banked
 10748  0036F8  6F00               	movwf	?__div_to_l_& (0+255),b
 10749  0036FA  0E00               	movlw	0
 10750  0036FC  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10751  0036FE  0E00               	movlw	0
 10752  003700  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10753  003702  0E00               	movlw	0
 10754  003704  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10755                           
 10756                           ; BSR set to: 1
 10757  003706  0012               	return	
 10758  003708                     l10227:
 10759                           
 10760                           ; BSR set to: 1
 10761  003708  0101               	movlb	1	; () banked
 10762  00370A  3505               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
 10763  00370C  3506               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
 10764  00370E  0101               	movlb	1	; () banked
 10765  003710  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
 10766  003712  0101               	movlb	1	; () banked
 10767  003714  510A               	movf	__div_to_l_@cntr& (0+255),w,b
 10768  003716  A4D8               	btfss	status,2,c
 10769  003718  D00A               	goto	l10233
 10770                           
 10771                           ; BSR set to: 1
 10772  00371A  0E00               	movlw	0
 10773  00371C  0101               	movlb	1	; () banked
 10774  00371E  6F00               	movwf	?__div_to_l_& (0+255),b
 10775  003720  0E00               	movlw	0
 10776  003722  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10777  003724  0E00               	movlw	0
 10778  003726  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10779  003728  0E00               	movlw	0
 10780  00372A  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10781                           
 10782                           ; BSR set to: 1
 10783  00372C  0012               	return	
 10784  00372E                     l10233:
 10785                           
 10786                           ; BSR set to: 1
 10787  00372E  0101               	movlb	1	; () banked
 10788  003730  8F02               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
 10789                           
 10790                           ; BSR set to: 1
 10791  003732  0EFF               	movlw	255
 10792  003734  0101               	movlb	1	; () banked
 10793  003736  1700               	andwf	__div_to_l_@f1& (0+255),f,b
 10794  003738  0EFF               	movlw	255
 10795  00373A  1701               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
 10796  00373C  0EFF               	movlw	255
 10797  00373E  1702               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
 10798  003740  0E00               	movlw	0
 10799  003742  1703               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
 10800                           
 10801                           ; BSR set to: 1
 10802  003744  0101               	movlb	1	; () banked
 10803  003746  8F05               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
 10804  003748  0EFF               	movlw	255
 10805  00374A  0101               	movlb	1	; () banked
 10806  00374C  1703               	andwf	__div_to_l_@f2& (0+255),f,b
 10807  00374E  0EFF               	movlw	255
 10808  003750  1704               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
 10809  003752  0EFF               	movlw	255
 10810  003754  1705               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
 10811  003756  0E00               	movlw	0
 10812  003758  1706               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
 10813                           
 10814                           ; BSR set to: 1
 10815  00375A  0E00               	movlw	0
 10816  00375C  0101               	movlb	1	; () banked
 10817  00375E  6F06               	movwf	__div_to_l_@quot& (0+255),b
 10818  003760  0E00               	movlw	0
 10819  003762  6F07               	movwf	(__div_to_l_@quot+1)& (0+255),b
 10820  003764  0E00               	movlw	0
 10821  003766  6F08               	movwf	(__div_to_l_@quot+2)& (0+255),b
 10822  003768  0E00               	movlw	0
 10823  00376A  6F09               	movwf	(__div_to_l_@quot+3)& (0+255),b
 10824                           
 10825                           ; BSR set to: 1
 10826  00376C  0E7F               	movlw	127
 10827  00376E  0101               	movlb	1	; () banked
 10828  003770  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
 10829                           
 10830                           ; BSR set to: 1
 10831  003772  0101               	movlb	1	; () banked
 10832  003774  510A               	movf	__div_to_l_@cntr& (0+255),w,b
 10833  003776  0FA0               	addlw	160
 10834  003778  0101               	movlb	1	; () banked
 10835  00377A  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
 10836                           
 10837                           ; BSR set to: 1
 10838  00377C  0E20               	movlw	32
 10839  00377E  0101               	movlb	1	; () banked
 10840  003780  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
 10841  003782                     l10247:
 10842                           
 10843                           ; BSR set to: 1
 10844  003782  0101               	movlb	1	; () banked
 10845  003784  90D8               	bcf	status,0,c
 10846  003786  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
 10847  003788  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 10848  00378A  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 10849  00378C  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 10850                           
 10851                           ; BSR set to: 1
 10852  00378E  0101               	movlb	1	; () banked
 10853  003790  5103               	movf	__div_to_l_@f2& (0+255),w,b
 10854  003792  0101               	movlb	1	; () banked
 10855  003794  5D00               	subwf	__div_to_l_@f1& (0+255),w,b
 10856  003796  0101               	movlb	1	; () banked
 10857  003798  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 10858  00379A  0101               	movlb	1	; () banked
 10859  00379C  5901               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
 10860  00379E  0101               	movlb	1	; () banked
 10861  0037A0  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 10862  0037A2  0101               	movlb	1	; () banked
 10863  0037A4  5902               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
 10864  0037A6  0101               	movlb	1	; () banked
 10865  0037A8  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 10866  0037AA  0101               	movlb	1	; () banked
 10867  0037AC  5903               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
 10868  0037AE  A0D8               	btfss	status,0,c
 10869  0037B0  D012               	goto	l10255
 10870                           
 10871                           ; BSR set to: 1
 10872  0037B2  0101               	movlb	1	; () banked
 10873  0037B4  5103               	movf	__div_to_l_@f2& (0+255),w,b
 10874  0037B6  0101               	movlb	1	; () banked
 10875  0037B8  5F00               	subwf	__div_to_l_@f1& (0+255),f,b
 10876  0037BA  0101               	movlb	1	; () banked
 10877  0037BC  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 10878  0037BE  0101               	movlb	1	; () banked
 10879  0037C0  5B01               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
 10880  0037C2  0101               	movlb	1	; () banked
 10881  0037C4  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 10882  0037C6  0101               	movlb	1	; () banked
 10883  0037C8  5B02               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
 10884  0037CA  0101               	movlb	1	; () banked
 10885  0037CC  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 10886  0037CE  0101               	movlb	1	; () banked
 10887  0037D0  5B03               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
 10888                           
 10889                           ; BSR set to: 1
 10890  0037D2  0101               	movlb	1	; () banked
 10891  0037D4  8106               	bsf	__div_to_l_@quot& (0+255),0,b
 10892  0037D6                     l10255:
 10893                           
 10894                           ; BSR set to: 1
 10895  0037D6  0101               	movlb	1	; () banked
 10896  0037D8  90D8               	bcf	status,0,c
 10897  0037DA  3700               	rlcf	__div_to_l_@f1& (0+255),f,b
 10898  0037DC  3701               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
 10899  0037DE  3702               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
 10900  0037E0  3703               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
 10901                           
 10902                           ; BSR set to: 1
 10903  0037E2  0101               	movlb	1	; () banked
 10904  0037E4  2F0A               	decfsz	__div_to_l_@cntr& (0+255),f,b
 10905  0037E6  D7CD               	goto	l10247
 10906                           
 10907                           ; BSR set to: 1
 10908                           
 10909                           ; BSR set to: 1
 10910  0037E8  0101               	movlb	1	; () banked
 10911  0037EA  AF0B               	btfss	__div_to_l_@exp1& (0+255),7,b
 10912  0037EC  D01A               	goto	l10271
 10913                           
 10914                           ; BSR set to: 1
 10915  0037EE  0101               	movlb	1	; () banked
 10916  0037F0  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10917  0037F2  0A80               	xorlw	128
 10918  0037F4  0F9F               	addlw	159
 10919  0037F6  B0D8               	btfsc	status,0,c
 10920  0037F8  D00A               	goto	l10267
 10921                           
 10922                           ; BSR set to: 1
 10923  0037FA  0E00               	movlw	0
 10924  0037FC  0101               	movlb	1	; () banked
 10925  0037FE  6F00               	movwf	?__div_to_l_& (0+255),b
 10926  003800  0E00               	movlw	0
 10927  003802  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10928  003804  0E00               	movlw	0
 10929  003806  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10930  003808  0E00               	movlw	0
 10931  00380A  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10932                           
 10933                           ; BSR set to: 1
 10934  00380C  0012               	return	
 10935  00380E                     l10267:
 10936                           
 10937                           ; BSR set to: 1
 10938  00380E  0101               	movlb	1	; () banked
 10939  003810  90D8               	bcf	status,0,c
 10940  003812  3309               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
 10941  003814  3308               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
 10942  003816  3307               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
 10943  003818  3306               	rrcf	__div_to_l_@quot& (0+255),f,b
 10944                           
 10945                           ; BSR set to: 1
 10946  00381A  0101               	movlb	1	; () banked
 10947  00381C  3F0B               	incfsz	__div_to_l_@exp1& (0+255),f,b
 10948  00381E  D7F7               	goto	l10267
 10949                           
 10950                           ; BSR set to: 1
 10951  003820  D01B               	goto	l1290
 10952  003822                     l10271:
 10953                           
 10954                           ; BSR set to: 1
 10955  003822  0E1F               	movlw	31
 10956  003824  0101               	movlb	1	; () banked
 10957  003826  650B               	cpfsgt	__div_to_l_@exp1& (0+255),b
 10958  003828  D012               	goto	l10279
 10959                           
 10960                           ; BSR set to: 1
 10961  00382A  0E00               	movlw	0
 10962  00382C  0101               	movlb	1	; () banked
 10963  00382E  6F00               	movwf	?__div_to_l_& (0+255),b
 10964  003830  0E00               	movlw	0
 10965  003832  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10966  003834  0E00               	movlw	0
 10967  003836  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10968  003838  0E00               	movlw	0
 10969  00383A  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10970                           
 10971                           ; BSR set to: 1
 10972  00383C  0012               	return	
 10973  00383E                     l10277:
 10974                           
 10975                           ; BSR set to: 1
 10976  00383E  0101               	movlb	1	; () banked
 10977  003840  90D8               	bcf	status,0,c
 10978  003842  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
 10979  003844  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 10980  003846  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 10981  003848  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 10982  00384A  0101               	movlb	1	; () banked
 10983  00384C  070B               	decf	__div_to_l_@exp1& (0+255),f,b
 10984  00384E                     l10279:
 10985                           
 10986                           ; BSR set to: 1
 10987  00384E  0101               	movlb	1	; () banked
 10988  003850  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10989  003852  0101               	movlb	1	; () banked
 10990  003854  A4D8               	btfss	status,2,c
 10991  003856  D7F3               	goto	l10277
 10992  003858                     l1290:
 10993                           
 10994                           ; BSR set to: 1
 10995  003858  C106  F100         	movff	__div_to_l_@quot,?__div_to_l_
 10996  00385C  C107  F101         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 10997  003860  C108  F102         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 10998  003864  C109  F103         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 10999                           
 11000                           ; BSR set to: 1
 11001  003868  0012               	return		;funcret
 11002  00386A                     __end_of__div_to_l_:
 11003                           	opt stack 0
 11004                           tblptru	equ	0xFF8
 11005                           tblptrh	equ	0xFF7
 11006                           tblptrl	equ	0xFF6
 11007                           tablat	equ	0xFF5
 11008                           prodh	equ	0xFF4
 11009                           prodl	equ	0xFF3
 11010                           intcon	equ	0xFF2
 11011                           postinc0	equ	0xFEE
 11012                           wreg	equ	0xFE8
 11013                           postdec1	equ	0xFE5
 11014                           fsr1l	equ	0xFE1
 11015                           indf2	equ	0xFDF
 11016                           postinc2	equ	0xFDE
 11017                           postdec2	equ	0xFDD
 11018                           fsr2h	equ	0xFDA
 11019                           fsr2l	equ	0xFD9
 11020                           status	equ	0xFD8
 11021                           
 11022 ;; *************** function ___lltoft *****************
 11023 ;; Defined at:
 11024 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lltoft.c"
 11025 ;; Parameters:    Size  Location     Type
 11026 ;;  c               4    8[BANK1 ] unsigned long 
 11027 ;; Auto vars:     Size  Location     Type
 11028 ;;  exp             1   16[BANK1 ] unsigned char 
 11029 ;; Return value:  Size  Location     Type
 11030 ;;                  3    8[BANK1 ] float 
 11031 ;; Registers used:
 11032 ;;		wreg, status,2, status,0, cstack
 11033 ;; Tracked objects:
 11034 ;;		On entry : 0/0
 11035 ;;		On exit  : 0/0
 11036 ;;		Unchanged: 0/0
 11037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11038 ;;      Params:         0       0       4       0       0       0       0
 11039 ;;      Locals:         0       0       1       0       0       0       0
 11040 ;;      Temps:          0       0       4       0       0       0       0
 11041 ;;      Totals:         0       0       9       0       0       0       0
 11042 ;;Total ram usage:        9 bytes
 11043 ;; Hardware stack levels used:    1
 11044 ;; Hardware stack levels required when called:   13
 11045 ;; This function calls:
 11046 ;;		___ftpack
 11047 ;; This function is called by:
 11048 ;;		_printf
 11049 ;; This function uses a non-reentrant model
 11050 ;;
 11051                           
 11052                           	psect	text40
 11053  006528                     __ptext40:
 11054                           	opt stack 0
 11055  006528                     ___lltoft:
 11056                           	opt stack 14
 11057                           
 11058                           ; BSR set to: 1
 11059                           ;incstack = 0
 11060  006528  0E8E               	movlw	142
 11061  00652A  0101               	movlb	1	; () banked
 11062  00652C  6F10               	movwf	___lltoft@exp& (0+255),b
 11063  00652E  D008               	goto	l10353
 11064  006530                     l10351:
 11065                           
 11066                           ; BSR set to: 1
 11067  006530  0101               	movlb	1	; () banked
 11068  006532  90D8               	bcf	status,0,c
 11069  006534  330B               	rrcf	(___lltoft@c+3)& (0+255),f,b
 11070  006536  330A               	rrcf	(___lltoft@c+2)& (0+255),f,b
 11071  006538  3309               	rrcf	(___lltoft@c+1)& (0+255),f,b
 11072  00653A  3308               	rrcf	___lltoft@c& (0+255),f,b
 11073  00653C  0101               	movlb	1	; () banked
 11074  00653E  2B10               	incf	___lltoft@exp& (0+255),f,b
 11075  006540                     l10353:
 11076                           
 11077                           ; BSR set to: 1
 11078  006540  0E00               	movlw	0
 11079  006542  0101               	movlb	1	; () banked
 11080  006544  1508               	andwf	___lltoft@c& (0+255),w,b
 11081  006546  0101               	movlb	1	; () banked
 11082  006548  6F0C               	movwf	??___lltoft& (0+255),b
 11083  00654A  0E00               	movlw	0
 11084  00654C  0101               	movlb	1	; () banked
 11085  00654E  1509               	andwf	(___lltoft@c+1)& (0+255),w,b
 11086  006550  0101               	movlb	1	; () banked
 11087  006552  6F0D               	movwf	(??___lltoft+1)& (0+255),b
 11088  006554  0E00               	movlw	0
 11089  006556  0101               	movlb	1	; () banked
 11090  006558  150A               	andwf	(___lltoft@c+2)& (0+255),w,b
 11091  00655A  0101               	movlb	1	; () banked
 11092  00655C  6F0E               	movwf	(??___lltoft+2)& (0+255),b
 11093  00655E  0EFF               	movlw	255
 11094  006560  0101               	movlb	1	; () banked
 11095  006562  150B               	andwf	(___lltoft@c+3)& (0+255),w,b
 11096  006564  0101               	movlb	1	; () banked
 11097  006566  6F0F               	movwf	(??___lltoft+3)& (0+255),b
 11098  006568  0101               	movlb	1	; () banked
 11099  00656A  510C               	movf	??___lltoft& (0+255),w,b
 11100  00656C  0101               	movlb	1	; () banked
 11101  00656E  110D               	iorwf	(??___lltoft+1)& (0+255),w,b
 11102  006570  0101               	movlb	1	; () banked
 11103  006572  110E               	iorwf	(??___lltoft+2)& (0+255),w,b
 11104  006574  0101               	movlb	1	; () banked
 11105  006576  110F               	iorwf	(??___lltoft+3)& (0+255),w,b
 11106  006578  A4D8               	btfss	status,2,c
 11107  00657A  D7DA               	goto	l10351
 11108                           
 11109                           ; BSR set to: 1
 11110                           
 11111                           ; BSR set to: 1
 11112  00657C  C108  F100         	movff	___lltoft@c,___ftpack@arg
 11113  006580  C109  F101         	movff	___lltoft@c+1,___ftpack@arg+1
 11114  006584  C10A  F102         	movff	___lltoft@c+2,___ftpack@arg+2
 11115  006588  C110  F103         	movff	___lltoft@exp,___ftpack@exp
 11116  00658C  0E00               	movlw	0
 11117  00658E  0101               	movlb	1	; () banked
 11118  006590  6F04               	movwf	___ftpack@sign& (0+255),b
 11119  006592  EC29  F025         	call	___ftpack	;wreg free
 11120  006596  C100  F108         	movff	?___ftpack,?___lltoft
 11121  00659A  C101  F109         	movff	?___ftpack+1,?___lltoft+1
 11122  00659E  C102  F10A         	movff	?___ftpack+2,?___lltoft+2
 11123  0065A2  0012               	return	
 11124  0065A4                     __end_of___lltoft:
 11125                           	opt stack 0
 11126                           tblptru	equ	0xFF8
 11127                           tblptrh	equ	0xFF7
 11128                           tblptrl	equ	0xFF6
 11129                           tablat	equ	0xFF5
 11130                           prodh	equ	0xFF4
 11131                           prodl	equ	0xFF3
 11132                           intcon	equ	0xFF2
 11133                           postinc0	equ	0xFEE
 11134                           wreg	equ	0xFE8
 11135                           postdec1	equ	0xFE5
 11136                           fsr1l	equ	0xFE1
 11137                           indf2	equ	0xFDF
 11138                           postinc2	equ	0xFDE
 11139                           postdec2	equ	0xFDD
 11140                           fsr2h	equ	0xFDA
 11141                           fsr2l	equ	0xFD9
 11142                           status	equ	0xFD8
 11143                           
 11144 ;; *************** function ___llmod *****************
 11145 ;; Defined at:
 11146 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\llmod.c"
 11147 ;; Parameters:    Size  Location     Type
 11148 ;;  dividend        4   13[BANK1 ] unsigned long 
 11149 ;;  divisor         4   17[BANK1 ] unsigned long 
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;  counter         1   21[BANK1 ] unsigned char 
 11152 ;; Return value:  Size  Location     Type
 11153 ;;                  4   13[BANK1 ] unsigned long 
 11154 ;; Registers used:
 11155 ;;		wreg, status,2, status,0
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/0
 11158 ;;		On exit  : 0/0
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11161 ;;      Params:         0       0       8       0       0       0       0
 11162 ;;      Locals:         0       0       1       0       0       0       0
 11163 ;;      Temps:          0       0       0       0       0       0       0
 11164 ;;      Totals:         0       0       9       0       0       0       0
 11165 ;;Total ram usage:        9 bytes
 11166 ;; Hardware stack levels used:    1
 11167 ;; Hardware stack levels required when called:   12
 11168 ;; This function calls:
 11169 ;;		Nothing
 11170 ;; This function is called by:
 11171 ;;		_printf
 11172 ;; This function uses a non-reentrant model
 11173 ;;
 11174                           
 11175                           	psect	text41
 11176  005DE6                     __ptext41:
 11177                           	opt stack 0
 11178  005DE6                     ___llmod:
 11179                           	opt stack 15
 11180                           
 11181                           ;incstack = 0
 11182  005DE6  0101               	movlb	1	; () banked
 11183  005DE8  5111               	movf	___llmod@divisor& (0+255),w,b
 11184  005DEA  0101               	movlb	1	; () banked
 11185  005DEC  1112               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 11186  005DEE  0101               	movlb	1	; () banked
 11187  005DF0  1113               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 11188  005DF2  0101               	movlb	1	; () banked
 11189  005DF4  1114               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 11190  005DF6  B4D8               	btfsc	status,2,c
 11191  005DF8  D03A               	goto	l1479
 11192                           
 11193                           ; BSR set to: 1
 11194  005DFA  0E01               	movlw	1
 11195  005DFC  0101               	movlb	1	; () banked
 11196  005DFE  6F15               	movwf	___llmod@counter& (0+255),b
 11197  005E00  D008               	goto	l10339
 11198  005E02                     l10337:
 11199                           
 11200                           ; BSR set to: 1
 11201  005E02  0101               	movlb	1	; () banked
 11202  005E04  90D8               	bcf	status,0,c
 11203  005E06  3711               	rlcf	___llmod@divisor& (0+255),f,b
 11204  005E08  3712               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 11205  005E0A  3713               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 11206  005E0C  3714               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 11207  005E0E  0101               	movlb	1	; () banked
 11208  005E10  2B15               	incf	___llmod@counter& (0+255),f,b
 11209  005E12                     l10339:
 11210                           
 11211                           ; BSR set to: 1
 11212  005E12  0101               	movlb	1	; () banked
 11213  005E14  AF14               	btfss	(___llmod@divisor+3)& (0+255),7,b
 11214  005E16  D7F5               	goto	l10337
 11215  005E18                     l10341:
 11216                           
 11217                           ; BSR set to: 1
 11218  005E18  0101               	movlb	1	; () banked
 11219  005E1A  5111               	movf	___llmod@divisor& (0+255),w,b
 11220  005E1C  0101               	movlb	1	; () banked
 11221  005E1E  5D0D               	subwf	___llmod@dividend& (0+255),w,b
 11222  005E20  0101               	movlb	1	; () banked
 11223  005E22  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
 11224  005E24  0101               	movlb	1	; () banked
 11225  005E26  590E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 11226  005E28  0101               	movlb	1	; () banked
 11227  005E2A  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
 11228  005E2C  0101               	movlb	1	; () banked
 11229  005E2E  590F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 11230  005E30  0101               	movlb	1	; () banked
 11231  005E32  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
 11232  005E34  0101               	movlb	1	; () banked
 11233  005E36  5910               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 11234  005E38  A0D8               	btfss	status,0,c
 11235  005E3A  D010               	goto	l10345
 11236                           
 11237                           ; BSR set to: 1
 11238  005E3C  0101               	movlb	1	; () banked
 11239  005E3E  5111               	movf	___llmod@divisor& (0+255),w,b
 11240  005E40  0101               	movlb	1	; () banked
 11241  005E42  5F0D               	subwf	___llmod@dividend& (0+255),f,b
 11242  005E44  0101               	movlb	1	; () banked
 11243  005E46  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
 11244  005E48  0101               	movlb	1	; () banked
 11245  005E4A  5B0E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 11246  005E4C  0101               	movlb	1	; () banked
 11247  005E4E  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
 11248  005E50  0101               	movlb	1	; () banked
 11249  005E52  5B0F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 11250  005E54  0101               	movlb	1	; () banked
 11251  005E56  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
 11252  005E58  0101               	movlb	1	; () banked
 11253  005E5A  5B10               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 11254  005E5C                     l10345:
 11255                           
 11256                           ; BSR set to: 1
 11257  005E5C  0101               	movlb	1	; () banked
 11258  005E5E  90D8               	bcf	status,0,c
 11259  005E60  3314               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 11260  005E62  3313               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 11261  005E64  3312               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 11262  005E66  3311               	rrcf	___llmod@divisor& (0+255),f,b
 11263                           
 11264                           ; BSR set to: 1
 11265  005E68  0101               	movlb	1	; () banked
 11266  005E6A  2F15               	decfsz	___llmod@counter& (0+255),f,b
 11267  005E6C  D7D5               	goto	l10341
 11268  005E6E                     l1479:
 11269                           
 11270                           ; BSR set to: 1
 11271  005E6E  C10D  F10D         	movff	___llmod@dividend,?___llmod
 11272  005E72  C10E  F10E         	movff	___llmod@dividend+1,?___llmod+1
 11273  005E76  C10F  F10F         	movff	___llmod@dividend+2,?___llmod+2
 11274  005E7A  C110  F110         	movff	___llmod@dividend+3,?___llmod+3
 11275                           
 11276                           ; BSR set to: 1
 11277  005E7E  0012               	return		;funcret
 11278  005E80                     __end_of___llmod:
 11279                           	opt stack 0
 11280                           tblptru	equ	0xFF8
 11281                           tblptrh	equ	0xFF7
 11282                           tblptrl	equ	0xFF6
 11283                           tablat	equ	0xFF5
 11284                           prodh	equ	0xFF4
 11285                           prodl	equ	0xFF3
 11286                           intcon	equ	0xFF2
 11287                           postinc0	equ	0xFEE
 11288                           wreg	equ	0xFE8
 11289                           postdec1	equ	0xFE5
 11290                           fsr1l	equ	0xFE1
 11291                           indf2	equ	0xFDF
 11292                           postinc2	equ	0xFDE
 11293                           postdec2	equ	0xFDD
 11294                           fsr2h	equ	0xFDA
 11295                           fsr2l	equ	0xFD9
 11296                           status	equ	0xFD8
 11297                           
 11298 ;; *************** function ___lldiv *****************
 11299 ;; Defined at:
 11300 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
 11301 ;; Parameters:    Size  Location     Type
 11302 ;;  dividend        4    0[BANK1 ] unsigned long 
 11303 ;;  divisor         4    4[BANK1 ] unsigned long 
 11304 ;; Auto vars:     Size  Location     Type
 11305 ;;  quotient        4    8[BANK1 ] unsigned long 
 11306 ;;  counter         1   12[BANK1 ] unsigned char 
 11307 ;; Return value:  Size  Location     Type
 11308 ;;                  4    0[BANK1 ] unsigned long 
 11309 ;; Registers used:
 11310 ;;		wreg, status,2, status,0
 11311 ;; Tracked objects:
 11312 ;;		On entry : 0/0
 11313 ;;		On exit  : 0/0
 11314 ;;		Unchanged: 0/0
 11315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11316 ;;      Params:         0       0       8       0       0       0       0
 11317 ;;      Locals:         0       0       5       0       0       0       0
 11318 ;;      Temps:          0       0       0       0       0       0       0
 11319 ;;      Totals:         0       0      13       0       0       0       0
 11320 ;;Total ram usage:       13 bytes
 11321 ;; Hardware stack levels used:    1
 11322 ;; Hardware stack levels required when called:   12
 11323 ;; This function calls:
 11324 ;;		Nothing
 11325 ;; This function is called by:
 11326 ;;		_printf
 11327 ;; This function uses a non-reentrant model
 11328 ;;
 11329                           
 11330                           	psect	text42
 11331  005886                     __ptext42:
 11332                           	opt stack 0
 11333  005886                     ___lldiv:
 11334                           	opt stack 15
 11335                           
 11336                           ; BSR set to: 1
 11337                           ;incstack = 0
 11338  005886  0E00               	movlw	0
 11339  005888  0101               	movlb	1	; () banked
 11340  00588A  6F08               	movwf	___lldiv@quotient& (0+255),b
 11341  00588C  0E00               	movlw	0
 11342  00588E  6F09               	movwf	(___lldiv@quotient+1)& (0+255),b
 11343  005890  0E00               	movlw	0
 11344  005892  6F0A               	movwf	(___lldiv@quotient+2)& (0+255),b
 11345  005894  0E00               	movlw	0
 11346  005896  6F0B               	movwf	(___lldiv@quotient+3)& (0+255),b
 11347                           
 11348                           ; BSR set to: 1
 11349  005898  0101               	movlb	1	; () banked
 11350  00589A  5104               	movf	___lldiv@divisor& (0+255),w,b
 11351  00589C  0101               	movlb	1	; () banked
 11352  00589E  1105               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 11353  0058A0  0101               	movlb	1	; () banked
 11354  0058A2  1106               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 11355  0058A4  0101               	movlb	1	; () banked
 11356  0058A6  1107               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 11357  0058A8  B4D8               	btfsc	status,2,c
 11358  0058AA  D042               	goto	l1469
 11359                           
 11360                           ; BSR set to: 1
 11361  0058AC  0E01               	movlw	1
 11362  0058AE  0101               	movlb	1	; () banked
 11363  0058B0  6F0C               	movwf	___lldiv@counter& (0+255),b
 11364  0058B2  D008               	goto	l10319
 11365  0058B4                     l10317:
 11366                           
 11367                           ; BSR set to: 1
 11368  0058B4  0101               	movlb	1	; () banked
 11369  0058B6  90D8               	bcf	status,0,c
 11370  0058B8  3704               	rlcf	___lldiv@divisor& (0+255),f,b
 11371  0058BA  3705               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 11372  0058BC  3706               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 11373  0058BE  3707               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 11374  0058C0  0101               	movlb	1	; () banked
 11375  0058C2  2B0C               	incf	___lldiv@counter& (0+255),f,b
 11376  0058C4                     l10319:
 11377                           
 11378                           ; BSR set to: 1
 11379  0058C4  0101               	movlb	1	; () banked
 11380  0058C6  AF07               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 11381  0058C8  D7F5               	goto	l10317
 11382  0058CA                     l10321:
 11383                           
 11384                           ; BSR set to: 1
 11385  0058CA  0101               	movlb	1	; () banked
 11386  0058CC  90D8               	bcf	status,0,c
 11387  0058CE  3708               	rlcf	___lldiv@quotient& (0+255),f,b
 11388  0058D0  3709               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 11389  0058D2  370A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 11390  0058D4  370B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 11391                           
 11392                           ; BSR set to: 1
 11393  0058D6  0101               	movlb	1	; () banked
 11394  0058D8  5104               	movf	___lldiv@divisor& (0+255),w,b
 11395  0058DA  0101               	movlb	1	; () banked
 11396  0058DC  5D00               	subwf	___lldiv@dividend& (0+255),w,b
 11397  0058DE  0101               	movlb	1	; () banked
 11398  0058E0  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11399  0058E2  0101               	movlb	1	; () banked
 11400  0058E4  5901               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 11401  0058E6  0101               	movlb	1	; () banked
 11402  0058E8  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11403  0058EA  0101               	movlb	1	; () banked
 11404  0058EC  5902               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 11405  0058EE  0101               	movlb	1	; () banked
 11406  0058F0  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11407  0058F2  0101               	movlb	1	; () banked
 11408  0058F4  5903               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 11409  0058F6  A0D8               	btfss	status,0,c
 11410  0058F8  D012               	goto	l10329
 11411                           
 11412                           ; BSR set to: 1
 11413  0058FA  0101               	movlb	1	; () banked
 11414  0058FC  5104               	movf	___lldiv@divisor& (0+255),w,b
 11415  0058FE  0101               	movlb	1	; () banked
 11416  005900  5F00               	subwf	___lldiv@dividend& (0+255),f,b
 11417  005902  0101               	movlb	1	; () banked
 11418  005904  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11419  005906  0101               	movlb	1	; () banked
 11420  005908  5B01               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 11421  00590A  0101               	movlb	1	; () banked
 11422  00590C  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11423  00590E  0101               	movlb	1	; () banked
 11424  005910  5B02               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 11425  005912  0101               	movlb	1	; () banked
 11426  005914  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11427  005916  0101               	movlb	1	; () banked
 11428  005918  5B03               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 11429                           
 11430                           ; BSR set to: 1
 11431  00591A  0101               	movlb	1	; () banked
 11432  00591C  8108               	bsf	___lldiv@quotient& (0+255),0,b
 11433  00591E                     l10329:
 11434                           
 11435                           ; BSR set to: 1
 11436  00591E  0101               	movlb	1	; () banked
 11437  005920  90D8               	bcf	status,0,c
 11438  005922  3307               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 11439  005924  3306               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 11440  005926  3305               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 11441  005928  3304               	rrcf	___lldiv@divisor& (0+255),f,b
 11442                           
 11443                           ; BSR set to: 1
 11444  00592A  0101               	movlb	1	; () banked
 11445  00592C  2F0C               	decfsz	___lldiv@counter& (0+255),f,b
 11446  00592E  D7CD               	goto	l10321
 11447  005930                     l1469:
 11448                           
 11449                           ; BSR set to: 1
 11450  005930  C108  F100         	movff	___lldiv@quotient,?___lldiv
 11451  005934  C109  F101         	movff	___lldiv@quotient+1,?___lldiv+1
 11452  005938  C10A  F102         	movff	___lldiv@quotient+2,?___lldiv+2
 11453  00593C  C10B  F103         	movff	___lldiv@quotient+3,?___lldiv+3
 11454                           
 11455                           ; BSR set to: 1
 11456  005940  0012               	return		;funcret
 11457  005942                     __end_of___lldiv:
 11458                           	opt stack 0
 11459                           tblptru	equ	0xFF8
 11460                           tblptrh	equ	0xFF7
 11461                           tblptrl	equ	0xFF6
 11462                           tablat	equ	0xFF5
 11463                           prodh	equ	0xFF4
 11464                           prodl	equ	0xFF3
 11465                           intcon	equ	0xFF2
 11466                           postinc0	equ	0xFEE
 11467                           wreg	equ	0xFE8
 11468                           postdec1	equ	0xFE5
 11469                           fsr1l	equ	0xFE1
 11470                           indf2	equ	0xFDF
 11471                           postinc2	equ	0xFDE
 11472                           postdec2	equ	0xFDD
 11473                           fsr2h	equ	0xFDA
 11474                           fsr2l	equ	0xFD9
 11475                           status	equ	0xFD8
 11476                           
 11477 ;; *************** function ___ftsub *****************
 11478 ;; Defined at:
 11479 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
 11480 ;; Parameters:    Size  Location     Type
 11481 ;;  f1              3   57[BANK1 ] float 
 11482 ;;  f2              3   60[BANK1 ] float 
 11483 ;; Auto vars:     Size  Location     Type
 11484 ;;		None
 11485 ;; Return value:  Size  Location     Type
 11486 ;;                  3   57[BANK1 ] float 
 11487 ;; Registers used:
 11488 ;;		wreg, status,2, status,0, cstack
 11489 ;; Tracked objects:
 11490 ;;		On entry : 0/0
 11491 ;;		On exit  : 0/0
 11492 ;;		Unchanged: 0/0
 11493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11494 ;;      Params:         0       0       6       0       0       0       0
 11495 ;;      Locals:         0       0       0       0       0       0       0
 11496 ;;      Temps:          0       0       0       0       0       0       0
 11497 ;;      Totals:         0       0       6       0       0       0       0
 11498 ;;Total ram usage:        6 bytes
 11499 ;; Hardware stack levels used:    1
 11500 ;; Hardware stack levels required when called:   14
 11501 ;; This function calls:
 11502 ;;		___ftadd
 11503 ;; This function is called by:
 11504 ;;		_printf
 11505 ;; This function uses a non-reentrant model
 11506 ;;
 11507                           
 11508                           	psect	text43
 11509  006C78                     __ptext43:
 11510                           	opt stack 0
 11511  006C78                     ___ftsub:
 11512                           	opt stack 13
 11513                           
 11514                           ; BSR set to: 1
 11515                           ;incstack = 0
 11516  006C78  0101               	movlb	1	; () banked
 11517  006C7A  513C               	movf	___ftsub@f2& (0+255),w,b
 11518  006C7C  0101               	movlb	1	; () banked
 11519  006C7E  113D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 11520  006C80  0101               	movlb	1	; () banked
 11521  006C82  113E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 11522  006C84  B4D8               	btfsc	status,2,c
 11523  006C86  D009               	goto	l10285
 11524                           
 11525                           ; BSR set to: 1
 11526  006C88  0E00               	movlw	0
 11527  006C8A  0101               	movlb	1	; () banked
 11528  006C8C  1B3C               	xorwf	___ftsub@f2& (0+255),f,b
 11529  006C8E  0E00               	movlw	0
 11530  006C90  0101               	movlb	1	; () banked
 11531  006C92  1B3D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 11532  006C94  0E80               	movlw	128
 11533  006C96  0101               	movlb	1	; () banked
 11534  006C98  1B3E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 11535  006C9A                     l10285:
 11536                           
 11537                           ; BSR set to: 1
 11538  006C9A  C139  F12D         	movff	___ftsub@f1,___ftadd@f1
 11539  006C9E  C13A  F12E         	movff	___ftsub@f1+1,___ftadd@f1+1
 11540  006CA2  C13B  F12F         	movff	___ftsub@f1+2,___ftadd@f1+2
 11541  006CA6  C13C  F130         	movff	___ftsub@f2,___ftadd@f2
 11542  006CAA  C13D  F131         	movff	___ftsub@f2+1,___ftadd@f2+1
 11543  006CAE  C13E  F132         	movff	___ftsub@f2+2,___ftadd@f2+2
 11544  006CB2  ECE4  F013         	call	___ftadd	;wreg free
 11545  006CB6  C12D  F139         	movff	?___ftadd,?___ftsub
 11546  006CBA  C12E  F13A         	movff	?___ftadd+1,?___ftsub+1
 11547  006CBE  C12F  F13B         	movff	?___ftadd+2,?___ftsub+2
 11548  006CC2  0012               	return	
 11549  006CC4                     __end_of___ftsub:
 11550                           	opt stack 0
 11551                           tblptru	equ	0xFF8
 11552                           tblptrh	equ	0xFF7
 11553                           tblptrl	equ	0xFF6
 11554                           tablat	equ	0xFF5
 11555                           prodh	equ	0xFF4
 11556                           prodl	equ	0xFF3
 11557                           intcon	equ	0xFF2
 11558                           postinc0	equ	0xFEE
 11559                           wreg	equ	0xFE8
 11560                           postdec1	equ	0xFE5
 11561                           fsr1l	equ	0xFE1
 11562                           indf2	equ	0xFDF
 11563                           postinc2	equ	0xFDE
 11564                           postdec2	equ	0xFDD
 11565                           fsr2h	equ	0xFDA
 11566                           fsr2l	equ	0xFD9
 11567                           status	equ	0xFD8
 11568                           
 11569 ;; *************** function ___ftneg *****************
 11570 ;; Defined at:
 11571 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
 11572 ;; Parameters:    Size  Location     Type
 11573 ;;  f1              3    0[BANK1 ] float 
 11574 ;; Auto vars:     Size  Location     Type
 11575 ;;		None
 11576 ;; Return value:  Size  Location     Type
 11577 ;;                  3    0[BANK1 ] float 
 11578 ;; Registers used:
 11579 ;;		wreg, status,2, status,0
 11580 ;; Tracked objects:
 11581 ;;		On entry : 0/0
 11582 ;;		On exit  : 0/0
 11583 ;;		Unchanged: 0/0
 11584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11585 ;;      Params:         0       0       3       0       0       0       0
 11586 ;;      Locals:         0       0       0       0       0       0       0
 11587 ;;      Temps:          0       0       0       0       0       0       0
 11588 ;;      Totals:         0       0       3       0       0       0       0
 11589 ;;Total ram usage:        3 bytes
 11590 ;; Hardware stack levels used:    1
 11591 ;; Hardware stack levels required when called:   12
 11592 ;; This function calls:
 11593 ;;		Nothing
 11594 ;; This function is called by:
 11595 ;;		_printf
 11596 ;; This function uses a non-reentrant model
 11597 ;;
 11598                           
 11599                           	psect	text44
 11600  006FD2                     __ptext44:
 11601                           	opt stack 0
 11602  006FD2                     ___ftneg:
 11603                           	opt stack 15
 11604                           
 11605                           ;incstack = 0
 11606  006FD2  0101               	movlb	1	; () banked
 11607  006FD4  5100               	movf	___ftneg@f1& (0+255),w,b
 11608  006FD6  0101               	movlb	1	; () banked
 11609  006FD8  1101               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 11610  006FDA  0101               	movlb	1	; () banked
 11611  006FDC  1102               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 11612  006FDE  B4D8               	btfsc	status,2,c
 11613  006FE0  D009               	goto	l1419
 11614                           
 11615                           ; BSR set to: 1
 11616  006FE2  0E00               	movlw	0
 11617  006FE4  0101               	movlb	1	; () banked
 11618  006FE6  1B00               	xorwf	___ftneg@f1& (0+255),f,b
 11619  006FE8  0E00               	movlw	0
 11620  006FEA  0101               	movlb	1	; () banked
 11621  006FEC  1B01               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 11622  006FEE  0E80               	movlw	128
 11623  006FF0  0101               	movlb	1	; () banked
 11624  006FF2  1B02               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 11625  006FF4                     l1419:
 11626                           
 11627                           ; BSR set to: 1
 11628  006FF4  C100  F100         	movff	___ftneg@f1,?___ftneg
 11629  006FF8  C101  F101         	movff	___ftneg@f1+1,?___ftneg+1
 11630  006FFC  C102  F102         	movff	___ftneg@f1+2,?___ftneg+2
 11631                           
 11632                           ; BSR set to: 1
 11633  007000  0012               	return		;funcret
 11634  007002                     __end_of___ftneg:
 11635                           	opt stack 0
 11636                           tblptru	equ	0xFF8
 11637                           tblptrh	equ	0xFF7
 11638                           tblptrl	equ	0xFF6
 11639                           tablat	equ	0xFF5
 11640                           prodh	equ	0xFF4
 11641                           prodl	equ	0xFF3
 11642                           intcon	equ	0xFF2
 11643                           postinc0	equ	0xFEE
 11644                           wreg	equ	0xFE8
 11645                           postdec1	equ	0xFE5
 11646                           fsr1l	equ	0xFE1
 11647                           indf2	equ	0xFDF
 11648                           postinc2	equ	0xFDE
 11649                           postdec2	equ	0xFDD
 11650                           fsr2h	equ	0xFDA
 11651                           fsr2l	equ	0xFD9
 11652                           status	equ	0xFD8
 11653                           
 11654 ;; *************** function ___ftge *****************
 11655 ;; Defined at:
 11656 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
 11657 ;; Parameters:    Size  Location     Type
 11658 ;;  ff1             3    0[BANK1 ] float 
 11659 ;;  ff2             3    3[BANK1 ] float 
 11660 ;; Auto vars:     Size  Location     Type
 11661 ;;		None
 11662 ;; Return value:  Size  Location     Type
 11663 ;;		None               void
 11664 ;; Registers used:
 11665 ;;		wreg, status,2, status,0
 11666 ;; Tracked objects:
 11667 ;;		On entry : 0/0
 11668 ;;		On exit  : 0/0
 11669 ;;		Unchanged: 0/0
 11670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11671 ;;      Params:         0       0       6       0       0       0       0
 11672 ;;      Locals:         0       0       0       0       0       0       0
 11673 ;;      Temps:          0       0       3       0       0       0       0
 11674 ;;      Totals:         0       0       9       0       0       0       0
 11675 ;;Total ram usage:        9 bytes
 11676 ;; Hardware stack levels used:    1
 11677 ;; Hardware stack levels required when called:   12
 11678 ;; This function calls:
 11679 ;;		Nothing
 11680 ;; This function is called by:
 11681 ;;		_printf
 11682 ;; This function uses a non-reentrant model
 11683 ;;
 11684                           
 11685                           	psect	text45
 11686  00557C                     __ptext45:
 11687                           	opt stack 0
 11688  00557C                     ___ftge:
 11689                           	opt stack 15
 11690                           
 11691                           ; BSR set to: 1
 11692                           ;incstack = 0
 11693  00557C  0101               	movlb	1	; () banked
 11694  00557E  AF02               	btfss	(___ftge@ff1+2)& (0+255),7,b
 11695  005580  D01D               	goto	l10293
 11696                           
 11697                           ; BSR set to: 1
 11698  005582  C100  F106         	movff	___ftge@ff1,??___ftge
 11699  005586  C101  F107         	movff	___ftge@ff1+1,??___ftge+1
 11700  00558A  C102  F108         	movff	___ftge@ff1+2,??___ftge+2
 11701  00558E  0101               	movlb	1	; () banked
 11702  005590  1F06               	comf	??___ftge& (0+255),f,b
 11703  005592  1F07               	comf	(??___ftge+1)& (0+255),f,b
 11704  005594  1F08               	comf	(??___ftge+2)& (0+255),f,b
 11705  005596  2B06               	incf	??___ftge& (0+255),f,b
 11706  005598  0E00               	movlw	0
 11707  00559A  2307               	addwfc	(??___ftge+1)& (0+255),f,b
 11708  00559C  2308               	addwfc	(??___ftge+2)& (0+255),f,b
 11709  00559E  0E00               	movlw	0
 11710  0055A0  0101               	movlb	1	; () banked
 11711  0055A2  2506               	addwf	??___ftge& (0+255),w,b
 11712  0055A4  0101               	movlb	1	; () banked
 11713  0055A6  6F00               	movwf	___ftge@ff1& (0+255),b
 11714  0055A8  0E00               	movlw	0
 11715  0055AA  0101               	movlb	1	; () banked
 11716  0055AC  2107               	addwfc	(??___ftge+1)& (0+255),w,b
 11717  0055AE  0101               	movlb	1	; () banked
 11718  0055B0  6F01               	movwf	(___ftge@ff1+1)& (0+255),b
 11719  0055B2  0E80               	movlw	128
 11720  0055B4  0101               	movlb	1	; () banked
 11721  0055B6  2108               	addwfc	(??___ftge+2)& (0+255),w,b
 11722  0055B8  0101               	movlb	1	; () banked
 11723  0055BA  6F02               	movwf	(___ftge@ff1+2)& (0+255),b
 11724  0055BC                     l10293:
 11725                           
 11726                           ; BSR set to: 1
 11727  0055BC  0101               	movlb	1	; () banked
 11728  0055BE  AF05               	btfss	(___ftge@ff2+2)& (0+255),7,b
 11729  0055C0  D01D               	goto	l10297
 11730                           
 11731                           ; BSR set to: 1
 11732  0055C2  C103  F106         	movff	___ftge@ff2,??___ftge
 11733  0055C6  C104  F107         	movff	___ftge@ff2+1,??___ftge+1
 11734  0055CA  C105  F108         	movff	___ftge@ff2+2,??___ftge+2
 11735  0055CE  0101               	movlb	1	; () banked
 11736  0055D0  1F06               	comf	??___ftge& (0+255),f,b
 11737  0055D2  1F07               	comf	(??___ftge+1)& (0+255),f,b
 11738  0055D4  1F08               	comf	(??___ftge+2)& (0+255),f,b
 11739  0055D6  2B06               	incf	??___ftge& (0+255),f,b
 11740  0055D8  0E00               	movlw	0
 11741  0055DA  2307               	addwfc	(??___ftge+1)& (0+255),f,b
 11742  0055DC  2308               	addwfc	(??___ftge+2)& (0+255),f,b
 11743  0055DE  0E00               	movlw	0
 11744  0055E0  0101               	movlb	1	; () banked
 11745  0055E2  2506               	addwf	??___ftge& (0+255),w,b
 11746  0055E4  0101               	movlb	1	; () banked
 11747  0055E6  6F03               	movwf	___ftge@ff2& (0+255),b
 11748  0055E8  0E00               	movlw	0
 11749  0055EA  0101               	movlb	1	; () banked
 11750  0055EC  2107               	addwfc	(??___ftge+1)& (0+255),w,b
 11751  0055EE  0101               	movlb	1	; () banked
 11752  0055F0  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
 11753  0055F2  0E80               	movlw	128
 11754  0055F4  0101               	movlb	1	; () banked
 11755  0055F6  2108               	addwfc	(??___ftge+2)& (0+255),w,b
 11756  0055F8  0101               	movlb	1	; () banked
 11757  0055FA  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
 11758  0055FC                     l10297:
 11759                           
 11760                           ; BSR set to: 1
 11761  0055FC  0E00               	movlw	0
 11762  0055FE  0101               	movlb	1	; () banked
 11763  005600  1B00               	xorwf	___ftge@ff1& (0+255),f,b
 11764  005602  0E00               	movlw	0
 11765  005604  0101               	movlb	1	; () banked
 11766  005606  1B01               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 11767  005608  0E80               	movlw	128
 11768  00560A  0101               	movlb	1	; () banked
 11769  00560C  1B02               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 11770                           
 11771                           ; BSR set to: 1
 11772  00560E  0E00               	movlw	0
 11773  005610  0101               	movlb	1	; () banked
 11774  005612  1B03               	xorwf	___ftge@ff2& (0+255),f,b
 11775  005614  0E00               	movlw	0
 11776  005616  0101               	movlb	1	; () banked
 11777  005618  1B04               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 11778  00561A  0E80               	movlw	128
 11779  00561C  0101               	movlb	1	; () banked
 11780  00561E  1B05               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 11781  005620  0101               	movlb	1	; () banked
 11782  005622  5103               	movf	___ftge@ff2& (0+255),w,b
 11783  005624  0101               	movlb	1	; () banked
 11784  005626  5D00               	subwf	___ftge@ff1& (0+255),w,b
 11785  005628  0101               	movlb	1	; () banked
 11786  00562A  5104               	movf	(___ftge@ff2+1)& (0+255),w,b
 11787  00562C  0101               	movlb	1	; () banked
 11788  00562E  5901               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 11789  005630  0101               	movlb	1	; () banked
 11790  005632  5105               	movf	(___ftge@ff2+2)& (0+255),w,b
 11791  005634  0101               	movlb	1	; () banked
 11792  005636  5902               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 11793  005638  B0D8               	btfsc	status,0,c
 11794  00563A  D002               	goto	l10303
 11795                           
 11796                           ; BSR set to: 1
 11797  00563C  90D8               	bcf	status,0,c
 11798  00563E  0012               	return	
 11799  005640                     l10303:
 11800                           
 11801                           ; BSR set to: 1
 11802  005640  80D8               	bsf	status,0,c
 11803                           
 11804                           ; BSR set to: 1
 11805  005642  0012               	return	
 11806  005644                     __end_of___ftge:
 11807                           	opt stack 0
 11808                           tblptru	equ	0xFF8
 11809                           tblptrh	equ	0xFF7
 11810                           tblptrl	equ	0xFF6
 11811                           tablat	equ	0xFF5
 11812                           prodh	equ	0xFF4
 11813                           prodl	equ	0xFF3
 11814                           intcon	equ	0xFF2
 11815                           postinc0	equ	0xFEE
 11816                           wreg	equ	0xFE8
 11817                           postdec1	equ	0xFE5
 11818                           fsr1l	equ	0xFE1
 11819                           indf2	equ	0xFDF
 11820                           postinc2	equ	0xFDE
 11821                           postdec2	equ	0xFDD
 11822                           fsr2h	equ	0xFDA
 11823                           fsr2l	equ	0xFD9
 11824                           status	equ	0xFD8
 11825                           
 11826 ;; *************** function _clockConfig *****************
 11827 ;; Defined at:
 11828 ;;		line 76 in file "source/SYSConfig.h"
 11829 ;; Parameters:    Size  Location     Type
 11830 ;;		None
 11831 ;; Auto vars:     Size  Location     Type
 11832 ;;		None
 11833 ;; Return value:  Size  Location     Type
 11834 ;;                  1    wreg      void 
 11835 ;; Registers used:
 11836 ;;		wreg, status,2
 11837 ;; Tracked objects:
 11838 ;;		On entry : 0/0
 11839 ;;		On exit  : 0/0
 11840 ;;		Unchanged: 0/0
 11841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11842 ;;      Params:         0       0       0       0       0       0       0
 11843 ;;      Locals:         0       0       0       0       0       0       0
 11844 ;;      Temps:          0       0       0       0       0       0       0
 11845 ;;      Totals:         0       0       0       0       0       0       0
 11846 ;;Total ram usage:        0 bytes
 11847 ;; Hardware stack levels used:    1
 11848 ;; Hardware stack levels required when called:   12
 11849 ;; This function calls:
 11850 ;;		Nothing
 11851 ;; This function is called by:
 11852 ;;		_main
 11853 ;; This function uses a non-reentrant model
 11854 ;;
 11855                           
 11856                           	psect	text46
 11857  007160                     __ptext46:
 11858                           	opt stack 0
 11859  007160                     _clockConfig:
 11860                           	opt stack 18
 11861                           
 11862                           ;SYSConfig.h: 77: OSCCONbits.IDLEN = 1;
 11863                           
 11864                           ; BSR set to: 1
 11865                           ;incstack = 0
 11866  007160  8ED3               	bsf	4051,7,c	;volatile
 11867                           
 11868                           ;SYSConfig.h: 78: OSCCONbits.IRCF = 0b111;
 11869  007162  88D3               	bsf	4051,4,c	;volatile
 11870  007164  8AD3               	bsf	4051,5,c	;volatile
 11871  007166  8CD3               	bsf	4051,6,c	;volatile
 11872  007168                     l91:
 11873  007168  A4D3               	btfss	4051,2,c	;volatile
 11874  00716A  D7FE               	goto	l91
 11875                           
 11876                           ;SYSConfig.h: 80: OSCCONbits.SCS = 0b11;
 11877  00716C  0E03               	movlw	3
 11878  00716E  12D3               	iorwf	4051,f,c	;volatile
 11879                           
 11880                           ;SYSConfig.h: 81: OSCCON2bits.MFIOSEL = 0;
 11881  007170  98D2               	bcf	4050,4,c	;volatile
 11882                           
 11883                           ;SYSConfig.h: 82: OSCCON2bits.SOSCGO = 0;
 11884  007172  96D2               	bcf	4050,3,c	;volatile
 11885                           
 11886                           ;SYSConfig.h: 83: OSCTUNEbits.INTSRC = 0;
 11887  007174  9E9B               	bcf	3995,7,c	;volatile
 11888                           
 11889                           ;SYSConfig.h: 84: OSCTUNEbits.TUN = 0b011111;
 11890  007176  809B               	bsf	3995,0,c	;volatile
 11891  007178  829B               	bsf	3995,1,c	;volatile
 11892  00717A  849B               	bsf	3995,2,c	;volatile
 11893  00717C  869B               	bsf	3995,3,c	;volatile
 11894  00717E  889B               	bsf	3995,4,c	;volatile
 11895  007180  9A9B               	bcf	3995,5,c	;volatile
 11896                           
 11897                           ;SYSConfig.h: 85: OSCTUNEbits.PLLEN = 1;
 11898  007182  8C9B               	bsf	3995,6,c	;volatile
 11899  007184  0012               	return		;funcret
 11900  007186                     __end_of_clockConfig:
 11901                           	opt stack 0
 11902                           tblptru	equ	0xFF8
 11903                           tblptrh	equ	0xFF7
 11904                           tblptrl	equ	0xFF6
 11905                           tablat	equ	0xFF5
 11906                           prodh	equ	0xFF4
 11907                           prodl	equ	0xFF3
 11908                           intcon	equ	0xFF2
 11909                           postinc0	equ	0xFEE
 11910                           wreg	equ	0xFE8
 11911                           postdec1	equ	0xFE5
 11912                           fsr1l	equ	0xFE1
 11913                           indf2	equ	0xFDF
 11914                           postinc2	equ	0xFDE
 11915                           postdec2	equ	0xFDD
 11916                           fsr2h	equ	0xFDA
 11917                           fsr2l	equ	0xFD9
 11918                           status	equ	0xFD8
 11919                           
 11920 ;; *************** function _buttonChecking *****************
 11921 ;; Defined at:
 11922 ;;		line 9 in file "source/ButtonController.h"
 11923 ;; Parameters:    Size  Location     Type
 11924 ;;		None
 11925 ;; Auto vars:     Size  Location     Type
 11926 ;;		None
 11927 ;; Return value:  Size  Location     Type
 11928 ;;                  1    wreg      void 
 11929 ;; Registers used:
 11930 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11931 ;; Tracked objects:
 11932 ;;		On entry : 0/0
 11933 ;;		On exit  : 0/0
 11934 ;;		Unchanged: 0/0
 11935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11936 ;;      Params:         0       0       0       0       0       0       0
 11937 ;;      Locals:         0       0       0       0       0       0       0
 11938 ;;      Temps:          0       0       0       0       0       0       0
 11939 ;;      Totals:         0       0       0       0       0       0       0
 11940 ;;Total ram usage:        0 bytes
 11941 ;; Hardware stack levels used:    1
 11942 ;; Hardware stack levels required when called:   18
 11943 ;; This function calls:
 11944 ;;		_delay_ms
 11945 ;;		_longPressDOWN
 11946 ;;		_longPressENTER
 11947 ;;		_longPressRETRO
 11948 ;;		_longPressUP
 11949 ;;		_pressDOWN
 11950 ;;		_pressENTER
 11951 ;;		_pressRETRO
 11952 ;;		_pressUP
 11953 ;;		_releaseDOWN
 11954 ;;		_releaseENTER
 11955 ;;		_releaseRETRO
 11956 ;;		_releaseUP
 11957 ;; This function is called by:
 11958 ;;		_main
 11959 ;; This function uses a non-reentrant model
 11960 ;;
 11961                           
 11962                           	psect	text47
 11963  00226A                     __ptext47:
 11964                           	opt stack 0
 11965  00226A                     _buttonChecking:
 11966                           	opt stack 12
 11967                           
 11968                           ;ButtonController.h: 10: if(!PORTAbits.RA2 && lastSttUP) {
 11969                           
 11970                           ;incstack = 0
 11971  00226A  B480               	btfsc	3968,2,c	;volatile
 11972  00226C  D010               	goto	l882
 11973  00226E  0100               	movlb	0	; () banked
 11974  002270  51D7               	movf	_lastSttUP& (0+255),w,b
 11975  002272  0100               	movlb	0	; () banked
 11976  002274  B4D8               	btfsc	status,2,c
 11977  002276  D00B               	goto	l882
 11978                           
 11979                           ; BSR set to: 0
 11980                           ;ButtonController.h: 11: lastSttUP = 0;
 11981  002278  0E00               	movlw	0
 11982  00227A  0100               	movlb	0	; () banked
 11983  00227C  6FD7               	movwf	_lastSttUP& (0+255),b
 11984                           
 11985                           ; BSR set to: 0
 11986                           ;ButtonController.h: 12: delay_ms(200);
 11987  00227E  0E00               	movlw	0
 11988  002280  0101               	movlb	1	; () banked
 11989  002282  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11990  002284  0EC8               	movlw	200
 11991  002286  6F00               	movwf	delay_ms@del& (0+255),b
 11992  002288  ECCE  F036         	call	_delay_ms	;wreg free
 11993                           
 11994                           ;ButtonController.h: 13: }else if(PORTAbits.RA2 && !lastSttUP) {
 11995  00228C  D044               	goto	l11903
 11996  00228E                     l882:
 11997  00228E  A480               	btfss	3968,2,c	;volatile
 11998  002290  D016               	goto	l11881
 11999  002292  0100               	movlb	0	; () banked
 12000  002294  51D7               	movf	_lastSttUP& (0+255),w,b
 12001  002296  0100               	movlb	0	; () banked
 12002  002298  A4D8               	btfss	status,2,c
 12003  00229A  D011               	goto	l11881
 12004                           
 12005                           ; BSR set to: 0
 12006                           ;ButtonController.h: 14: lastSttUP = 1;
 12007  00229C  0E01               	movlw	1
 12008  00229E  0100               	movlb	0	; () banked
 12009  0022A0  6FD7               	movwf	_lastSttUP& (0+255),b
 12010                           
 12011                           ; BSR set to: 0
 12012                           ;ButtonController.h: 15: if(holdUPcont < 10)
 12013  0022A2  0E0A               	movlw	10
 12014  0022A4  0101               	movlb	1	; () banked
 12015  0022A6  61BF               	cpfslt	_holdUPcont& (0+255),b
 12016  0022A8  D002               	goto	l11879
 12017                           
 12018                           ; BSR set to: 1
 12019                           ;ButtonController.h: 16: pressUP();
 12020  0022AA  EC93  F023         	call	_pressUP	;wreg free
 12021  0022AE                     l11879:
 12022                           
 12023                           ;ButtonController.h: 17: delay_ms(50);
 12024  0022AE  0E00               	movlw	0
 12025  0022B0  0101               	movlb	1	; () banked
 12026  0022B2  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12027  0022B4  0E32               	movlw	50
 12028  0022B6  6F00               	movwf	delay_ms@del& (0+255),b
 12029  0022B8  ECCE  F036         	call	_delay_ms	;wreg free
 12030                           
 12031                           ;ButtonController.h: 18: }else if(PORTAbits.RA2 == lastSttUP) {
 12032  0022BC  D02C               	goto	l11903
 12033  0022BE                     l11881:
 12034  0022BE  A480               	btfss	3968,2,c	;volatile
 12035  0022C0  D002               	goto	u17510
 12036  0022C2  0E01               	movlw	1
 12037  0022C4  D001               	goto	u17516
 12038  0022C6                     u17510:
 12039  0022C6  0E00               	movlw	0
 12040  0022C8                     u17516:
 12041  0022C8  0100               	movlb	0	; () banked
 12042  0022CA  19D7               	xorwf	_lastSttUP& (0+255),w,b
 12043  0022CC  A4D8               	btfss	status,2,c
 12044  0022CE  D023               	goto	l11903
 12045                           
 12046                           ; BSR set to: 0
 12047                           ;ButtonController.h: 19: if(PORTAbits.RA2) {
 12048  0022D0  A480               	btfss	3968,2,c	;volatile
 12049  0022D2  D006               	goto	l11889
 12050                           
 12051                           ; BSR set to: 0
 12052                           ;ButtonController.h: 20: holdUPcont = 0;
 12053  0022D4  0E00               	movlw	0
 12054  0022D6  0101               	movlb	1	; () banked
 12055  0022D8  6FBF               	movwf	_holdUPcont& (0+255),b
 12056                           
 12057                           ; BSR set to: 1
 12058                           ;ButtonController.h: 21: releaseUP();
 12059  0022DA  ECA8  F039         	call	_releaseUP	;wreg free
 12060                           
 12061                           ;ButtonController.h: 22: }else {
 12062  0022DE  D01B               	goto	l11903
 12063  0022E0                     l11889:
 12064                           
 12065                           ;ButtonController.h: 23: if(!UPsecurLock)
 12066  0022E0  0100               	movlb	0	; () banked
 12067  0022E2  51C4               	movf	_UPsecurLock& (0+255),w,b
 12068  0022E4  A4D8               	btfss	status,2,c
 12069  0022E6  D002               	goto	l11893
 12070                           
 12071                           ; BSR set to: 0
 12072                           ;ButtonController.h: 24: holdUPcont++;
 12073  0022E8  0101               	movlb	1	; () banked
 12074  0022EA  2BBF               	incf	_holdUPcont& (0+255),f,b
 12075  0022EC                     l11893:
 12076                           
 12077                           ;ButtonController.h: 25: if(holdUPcont > 9) {
 12078  0022EC  0E09               	movlw	9
 12079  0022EE  0101               	movlb	1	; () banked
 12080  0022F0  65BF               	cpfsgt	_holdUPcont& (0+255),b
 12081  0022F2  D00A               	goto	l11901
 12082                           
 12083                           ; BSR set to: 1
 12084                           ;ButtonController.h: 26: if(holdUPcont < 26)
 12085  0022F4  0E1A               	movlw	26
 12086  0022F6  0101               	movlb	1	; () banked
 12087  0022F8  61BF               	cpfslt	_holdUPcont& (0+255),b
 12088  0022FA  D003               	goto	l11899
 12089                           
 12090                           ; BSR set to: 1
 12091                           ;ButtonController.h: 27: longPressUP();
 12092  0022FC  EC74  F034         	call	_longPressUP	;wreg free
 12093  002300  D003               	goto	l11901
 12094  002302                     l11899:
 12095                           
 12096                           ;ButtonController.h: 28: else
 12097                           ;ButtonController.h: 29: UPsecurLock = 1;
 12098  002302  0E01               	movlw	1
 12099  002304  0100               	movlb	0	; () banked
 12100  002306  6FC4               	movwf	_UPsecurLock& (0+255),b
 12101  002308                     l11901:
 12102                           
 12103                           ;ButtonController.h: 30: }
 12104                           ;ButtonController.h: 31: delay_ms(200);
 12105  002308  0E00               	movlw	0
 12106  00230A  0101               	movlb	1	; () banked
 12107  00230C  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12108  00230E  0EC8               	movlw	200
 12109  002310  6F00               	movwf	delay_ms@del& (0+255),b
 12110  002312  ECCE  F036         	call	_delay_ms	;wreg free
 12111  002316                     l11903:
 12112                           
 12113                           ;ButtonController.h: 32: }
 12114                           ;ButtonController.h: 33: }
 12115                           ;ButtonController.h: 34: if(!PORTAbits.RA3 && lastSttDOWN) {
 12116  002316  B680               	btfsc	3968,3,c	;volatile
 12117  002318  D010               	goto	l894
 12118  00231A  0100               	movlb	0	; () banked
 12119  00231C  51D6               	movf	_lastSttDOWN& (0+255),w,b
 12120  00231E  0100               	movlb	0	; () banked
 12121  002320  B4D8               	btfsc	status,2,c
 12122  002322  D00B               	goto	l894
 12123                           
 12124                           ; BSR set to: 0
 12125                           ;ButtonController.h: 35: lastSttDOWN = 0;
 12126  002324  0E00               	movlw	0
 12127  002326  0100               	movlb	0	; () banked
 12128  002328  6FD6               	movwf	_lastSttDOWN& (0+255),b
 12129                           
 12130                           ; BSR set to: 0
 12131                           ;ButtonController.h: 36: delay_ms(200);
 12132  00232A  0E00               	movlw	0
 12133  00232C  0101               	movlb	1	; () banked
 12134  00232E  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12135  002330  0EC8               	movlw	200
 12136  002332  6F00               	movwf	delay_ms@del& (0+255),b
 12137  002334  ECCE  F036         	call	_delay_ms	;wreg free
 12138                           
 12139                           ;ButtonController.h: 37: }else if(PORTAbits.RA3 && !lastSttDOWN) {
 12140  002338  D044               	goto	l11943
 12141  00233A                     l894:
 12142  00233A  A680               	btfss	3968,3,c	;volatile
 12143  00233C  D016               	goto	l11921
 12144  00233E  0100               	movlb	0	; () banked
 12145  002340  51D6               	movf	_lastSttDOWN& (0+255),w,b
 12146  002342  0100               	movlb	0	; () banked
 12147  002344  A4D8               	btfss	status,2,c
 12148  002346  D011               	goto	l11921
 12149                           
 12150                           ; BSR set to: 0
 12151                           ;ButtonController.h: 38: lastSttDOWN = 1;
 12152  002348  0E01               	movlw	1
 12153  00234A  0100               	movlb	0	; () banked
 12154  00234C  6FD6               	movwf	_lastSttDOWN& (0+255),b
 12155                           
 12156                           ; BSR set to: 0
 12157                           ;ButtonController.h: 39: if(holdDOWNcont < 10)
 12158  00234E  0E0A               	movlw	10
 12159  002350  0100               	movlb	0	; () banked
 12160  002352  61C8               	cpfslt	_holdDOWNcont& (0+255),b
 12161  002354  D002               	goto	l11919
 12162                           
 12163                           ; BSR set to: 0
 12164                           ;ButtonController.h: 40: pressDOWN();
 12165  002356  EC35  F026         	call	_pressDOWN	;wreg free
 12166  00235A                     l11919:
 12167                           
 12168                           ;ButtonController.h: 41: delay_ms(50);
 12169  00235A  0E00               	movlw	0
 12170  00235C  0101               	movlb	1	; () banked
 12171  00235E  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12172  002360  0E32               	movlw	50
 12173  002362  6F00               	movwf	delay_ms@del& (0+255),b
 12174  002364  ECCE  F036         	call	_delay_ms	;wreg free
 12175                           
 12176                           ;ButtonController.h: 42: }else if(PORTAbits.RA3 == lastSttDOWN) {
 12177  002368  D02C               	goto	l11943
 12178  00236A                     l11921:
 12179  00236A  A680               	btfss	3968,3,c	;volatile
 12180  00236C  D002               	goto	u17620
 12181  00236E  0E01               	movlw	1
 12182  002370  D001               	goto	u17626
 12183  002372                     u17620:
 12184  002372  0E00               	movlw	0
 12185  002374                     u17626:
 12186  002374  0100               	movlb	0	; () banked
 12187  002376  19D6               	xorwf	_lastSttDOWN& (0+255),w,b
 12188  002378  A4D8               	btfss	status,2,c
 12189  00237A  D023               	goto	l11943
 12190                           
 12191                           ; BSR set to: 0
 12192                           ;ButtonController.h: 43: if(PORTAbits.RA3) {
 12193  00237C  A680               	btfss	3968,3,c	;volatile
 12194  00237E  D006               	goto	l11929
 12195                           
 12196                           ; BSR set to: 0
 12197                           ;ButtonController.h: 44: holdDOWNcont = 0;
 12198  002380  0E00               	movlw	0
 12199  002382  0100               	movlb	0	; () banked
 12200  002384  6FC8               	movwf	_holdDOWNcont& (0+255),b
 12201                           
 12202                           ; BSR set to: 0
 12203                           ;ButtonController.h: 45: releaseDOWN();
 12204  002386  ECAE  F039         	call	_releaseDOWN	;wreg free
 12205                           
 12206                           ;ButtonController.h: 46: }else {
 12207  00238A  D01B               	goto	l11943
 12208  00238C                     l11929:
 12209                           
 12210                           ;ButtonController.h: 47: if(!DOWNsecurLock)
 12211  00238C  0100               	movlb	0	; () banked
 12212  00238E  51C3               	movf	_DOWNsecurLock& (0+255),w,b
 12213  002390  A4D8               	btfss	status,2,c
 12214  002392  D002               	goto	l11933
 12215                           
 12216                           ; BSR set to: 0
 12217                           ;ButtonController.h: 48: holdDOWNcont++;
 12218  002394  0100               	movlb	0	; () banked
 12219  002396  2BC8               	incf	_holdDOWNcont& (0+255),f,b
 12220  002398                     l11933:
 12221                           
 12222                           ; BSR set to: 0
 12223                           ;ButtonController.h: 49: if(holdDOWNcont > 9) {
 12224  002398  0E09               	movlw	9
 12225  00239A  0100               	movlb	0	; () banked
 12226  00239C  65C8               	cpfsgt	_holdDOWNcont& (0+255),b
 12227  00239E  D00A               	goto	l11941
 12228                           
 12229                           ; BSR set to: 0
 12230                           ;ButtonController.h: 50: if(holdDOWNcont < 26)
 12231  0023A0  0E1A               	movlw	26
 12232  0023A2  0100               	movlb	0	; () banked
 12233  0023A4  61C8               	cpfslt	_holdDOWNcont& (0+255),b
 12234  0023A6  D003               	goto	l11939
 12235                           
 12236                           ; BSR set to: 0
 12237                           ;ButtonController.h: 51: longPressDOWN();
 12238  0023A8  EC86  F038         	call	_longPressDOWN	;wreg free
 12239  0023AC  D003               	goto	l11941
 12240  0023AE                     l11939:
 12241                           
 12242                           ;ButtonController.h: 52: else
 12243                           ;ButtonController.h: 53: DOWNsecurLock = 1;
 12244  0023AE  0E01               	movlw	1
 12245  0023B0  0100               	movlb	0	; () banked
 12246  0023B2  6FC3               	movwf	_DOWNsecurLock& (0+255),b
 12247  0023B4                     l11941:
 12248                           
 12249                           ;ButtonController.h: 54: }
 12250                           ;ButtonController.h: 55: delay_ms(200);
 12251  0023B4  0E00               	movlw	0
 12252  0023B6  0101               	movlb	1	; () banked
 12253  0023B8  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12254  0023BA  0EC8               	movlw	200
 12255  0023BC  6F00               	movwf	delay_ms@del& (0+255),b
 12256  0023BE  ECCE  F036         	call	_delay_ms	;wreg free
 12257  0023C2                     l11943:
 12258                           
 12259                           ;ButtonController.h: 56: }
 12260                           ;ButtonController.h: 57: }
 12261                           ;ButtonController.h: 58: if(!PORTAbits.RA4 && lastSttRETRO) {
 12262  0023C2  B880               	btfsc	3968,4,c	;volatile
 12263  0023C4  D010               	goto	l906
 12264  0023C6  0100               	movlb	0	; () banked
 12265  0023C8  51D5               	movf	_lastSttRETRO& (0+255),w,b
 12266  0023CA  0100               	movlb	0	; () banked
 12267  0023CC  B4D8               	btfsc	status,2,c
 12268  0023CE  D00B               	goto	l906
 12269                           
 12270                           ; BSR set to: 0
 12271                           ;ButtonController.h: 59: lastSttRETRO = 0;
 12272  0023D0  0E00               	movlw	0
 12273  0023D2  0100               	movlb	0	; () banked
 12274  0023D4  6FD5               	movwf	_lastSttRETRO& (0+255),b
 12275                           
 12276                           ; BSR set to: 0
 12277                           ;ButtonController.h: 60: delay_ms(200);
 12278  0023D6  0E00               	movlw	0
 12279  0023D8  0101               	movlb	1	; () banked
 12280  0023DA  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12281  0023DC  0EC8               	movlw	200
 12282  0023DE  6F00               	movwf	delay_ms@del& (0+255),b
 12283  0023E0  ECCE  F036         	call	_delay_ms	;wreg free
 12284                           
 12285                           ;ButtonController.h: 61: }else if(PORTAbits.RA4 && !lastSttRETRO) {
 12286  0023E4  D044               	goto	l11981
 12287  0023E6                     l906:
 12288  0023E6  A880               	btfss	3968,4,c	;volatile
 12289  0023E8  D016               	goto	l11959
 12290  0023EA  0100               	movlb	0	; () banked
 12291  0023EC  51D5               	movf	_lastSttRETRO& (0+255),w,b
 12292  0023EE  0100               	movlb	0	; () banked
 12293  0023F0  A4D8               	btfss	status,2,c
 12294  0023F2  D011               	goto	l11959
 12295                           
 12296                           ; BSR set to: 0
 12297                           ;ButtonController.h: 62: lastSttRETRO = 1;
 12298  0023F4  0E01               	movlw	1
 12299  0023F6  0100               	movlb	0	; () banked
 12300  0023F8  6FD5               	movwf	_lastSttRETRO& (0+255),b
 12301                           
 12302                           ; BSR set to: 0
 12303                           ;ButtonController.h: 63: if(holdRETROcont < 10)
 12304  0023FA  0E0A               	movlw	10
 12305  0023FC  0100               	movlb	0	; () banked
 12306  0023FE  61C7               	cpfslt	_holdRETROcont& (0+255),b
 12307  002400  D002               	goto	l909
 12308                           
 12309                           ; BSR set to: 0
 12310                           ;ButtonController.h: 64: pressRETRO();
 12311  002402  EC22  F02B         	call	_pressRETRO	;wreg free
 12312  002406                     l909:
 12313                           
 12314                           ;ButtonController.h: 65: delay_ms(50);
 12315  002406  0E00               	movlw	0
 12316  002408  0101               	movlb	1	; () banked
 12317  00240A  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12318  00240C  0E32               	movlw	50
 12319  00240E  6F00               	movwf	delay_ms@del& (0+255),b
 12320  002410  ECCE  F036         	call	_delay_ms	;wreg free
 12321                           
 12322                           ;ButtonController.h: 66: }else if(PORTAbits.RA4 == lastSttRETRO) {
 12323  002414  D02C               	goto	l11981
 12324  002416                     l11959:
 12325  002416  A880               	btfss	3968,4,c	;volatile
 12326  002418  D002               	goto	u17730
 12327  00241A  0E01               	movlw	1
 12328  00241C  D001               	goto	u17736
 12329  00241E                     u17730:
 12330  00241E  0E00               	movlw	0
 12331  002420                     u17736:
 12332  002420  0100               	movlb	0	; () banked
 12333  002422  19D5               	xorwf	_lastSttRETRO& (0+255),w,b
 12334  002424  A4D8               	btfss	status,2,c
 12335  002426  D023               	goto	l11981
 12336                           
 12337                           ; BSR set to: 0
 12338                           ;ButtonController.h: 67: if(PORTAbits.RA4) {
 12339  002428  A880               	btfss	3968,4,c	;volatile
 12340  00242A  D006               	goto	l11967
 12341                           
 12342                           ; BSR set to: 0
 12343                           ;ButtonController.h: 68: holdRETROcont = 0;
 12344  00242C  0E00               	movlw	0
 12345  00242E  0100               	movlb	0	; () banked
 12346  002430  6FC7               	movwf	_holdRETROcont& (0+255),b
 12347                           
 12348                           ; BSR set to: 0
 12349                           ;ButtonController.h: 69: releaseRETRO();
 12350  002432  EC85  F039         	call	_releaseRETRO	;wreg free
 12351                           
 12352                           ;ButtonController.h: 70: }else {
 12353  002436  D01B               	goto	l11981
 12354  002438                     l11967:
 12355                           
 12356                           ;ButtonController.h: 71: if(!RETROsecurLock)
 12357  002438  0100               	movlb	0	; () banked
 12358  00243A  51C2               	movf	_RETROsecurLock& (0+255),w,b
 12359  00243C  A4D8               	btfss	status,2,c
 12360  00243E  D002               	goto	l11971
 12361                           
 12362                           ; BSR set to: 0
 12363                           ;ButtonController.h: 72: holdRETROcont++;
 12364  002440  0100               	movlb	0	; () banked
 12365  002442  2BC7               	incf	_holdRETROcont& (0+255),f,b
 12366  002444                     l11971:
 12367                           
 12368                           ; BSR set to: 0
 12369                           ;ButtonController.h: 73: if(holdRETROcont > 9) {
 12370  002444  0E09               	movlw	9
 12371  002446  0100               	movlb	0	; () banked
 12372  002448  65C7               	cpfsgt	_holdRETROcont& (0+255),b
 12373  00244A  D00A               	goto	l11979
 12374                           
 12375                           ; BSR set to: 0
 12376                           ;ButtonController.h: 74: if(holdRETROcont < 26)
 12377  00244C  0E1A               	movlw	26
 12378  00244E  0100               	movlb	0	; () banked
 12379  002450  61C7               	cpfslt	_holdRETROcont& (0+255),b
 12380  002452  D003               	goto	l11977
 12381                           
 12382                           ; BSR set to: 0
 12383                           ;ButtonController.h: 75: longPressRETRO();
 12384  002454  EC3D  F027         	call	_longPressRETRO	;wreg free
 12385  002458  D003               	goto	l11979
 12386  00245A                     l11977:
 12387                           
 12388                           ;ButtonController.h: 76: else
 12389                           ;ButtonController.h: 77: RETROsecurLock = 1;
 12390  00245A  0E01               	movlw	1
 12391  00245C  0100               	movlb	0	; () banked
 12392  00245E  6FC2               	movwf	_RETROsecurLock& (0+255),b
 12393  002460                     l11979:
 12394                           
 12395                           ;ButtonController.h: 78: }
 12396                           ;ButtonController.h: 79: delay_ms(200);
 12397  002460  0E00               	movlw	0
 12398  002462  0101               	movlb	1	; () banked
 12399  002464  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12400  002466  0EC8               	movlw	200
 12401  002468  6F00               	movwf	delay_ms@del& (0+255),b
 12402  00246A  ECCE  F036         	call	_delay_ms	;wreg free
 12403  00246E                     l11981:
 12404                           
 12405                           ;ButtonController.h: 80: }
 12406                           ;ButtonController.h: 81: }
 12407                           ;ButtonController.h: 82: if(!PORTAbits.RA5 && lastSttENTER) {
 12408  00246E  BA80               	btfsc	3968,5,c	;volatile
 12409  002470  D010               	goto	l918
 12410  002472  0100               	movlb	0	; () banked
 12411  002474  51D4               	movf	_lastSttENTER& (0+255),w,b
 12412  002476  0100               	movlb	0	; () banked
 12413  002478  B4D8               	btfsc	status,2,c
 12414  00247A  D00B               	goto	l918
 12415                           
 12416                           ; BSR set to: 0
 12417                           ;ButtonController.h: 83: lastSttENTER = 0;
 12418  00247C  0E00               	movlw	0
 12419  00247E  0100               	movlb	0	; () banked
 12420  002480  6FD4               	movwf	_lastSttENTER& (0+255),b
 12421                           
 12422                           ; BSR set to: 0
 12423                           ;ButtonController.h: 84: delay_ms(200);
 12424  002482  0E00               	movlw	0
 12425  002484  0101               	movlb	1	; () banked
 12426  002486  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12427  002488  0EC8               	movlw	200
 12428  00248A  6F00               	movwf	delay_ms@del& (0+255),b
 12429  00248C  ECCE  F036         	call	_delay_ms	;wreg free
 12430                           
 12431                           ;ButtonController.h: 85: }else if(PORTAbits.RA5 && !lastSttENTER) {
 12432  002490  0012               	return	
 12433  002492                     l918:
 12434  002492  AA80               	btfss	3968,5,c	;volatile
 12435  002494  D016               	goto	l11999
 12436  002496  0100               	movlb	0	; () banked
 12437  002498  51D4               	movf	_lastSttENTER& (0+255),w,b
 12438  00249A  0100               	movlb	0	; () banked
 12439  00249C  A4D8               	btfss	status,2,c
 12440  00249E  D011               	goto	l11999
 12441                           
 12442                           ; BSR set to: 0
 12443                           ;ButtonController.h: 86: lastSttENTER = 1;
 12444  0024A0  0E01               	movlw	1
 12445  0024A2  0100               	movlb	0	; () banked
 12446  0024A4  6FD4               	movwf	_lastSttENTER& (0+255),b
 12447                           
 12448                           ; BSR set to: 0
 12449                           ;ButtonController.h: 87: if(holdENTERcont < 10)
 12450  0024A6  0E0A               	movlw	10
 12451  0024A8  0100               	movlb	0	; () banked
 12452  0024AA  61C6               	cpfslt	_holdENTERcont& (0+255),b
 12453  0024AC  D002               	goto	l11997
 12454                           
 12455                           ; BSR set to: 0
 12456                           ;ButtonController.h: 88: pressENTER();
 12457  0024AE  ECD1  F008         	call	_pressENTER	;wreg free
 12458  0024B2                     l11997:
 12459                           
 12460                           ;ButtonController.h: 89: delay_ms(50);
 12461  0024B2  0E00               	movlw	0
 12462  0024B4  0101               	movlb	1	; () banked
 12463  0024B6  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12464  0024B8  0E32               	movlw	50
 12465  0024BA  6F00               	movwf	delay_ms@del& (0+255),b
 12466  0024BC  ECCE  F036         	call	_delay_ms	;wreg free
 12467                           
 12468                           ;ButtonController.h: 90: }else if(PORTAbits.RA5 == lastSttENTER) {
 12469  0024C0  0012               	return	
 12470  0024C2                     l11999:
 12471  0024C2  AA80               	btfss	3968,5,c	;volatile
 12472  0024C4  D002               	goto	u17840
 12473  0024C6  0E01               	movlw	1
 12474  0024C8  D001               	goto	u17846
 12475  0024CA                     u17840:
 12476  0024CA  0E00               	movlw	0
 12477  0024CC                     u17846:
 12478  0024CC  0100               	movlb	0	; () banked
 12479  0024CE  19D4               	xorwf	_lastSttENTER& (0+255),w,b
 12480  0024D0  A4D8               	btfss	status,2,c
 12481  0024D2  0012               	return	
 12482                           
 12483                           ; BSR set to: 0
 12484                           ;ButtonController.h: 91: if(PORTAbits.RA5) {
 12485  0024D4  AA80               	btfss	3968,5,c	;volatile
 12486  0024D6  D006               	goto	l12007
 12487                           
 12488                           ; BSR set to: 0
 12489                           ;ButtonController.h: 92: holdENTERcont = 0;
 12490  0024D8  0E00               	movlw	0
 12491  0024DA  0100               	movlb	0	; () banked
 12492  0024DC  6FC6               	movwf	_holdENTERcont& (0+255),b
 12493                           
 12494                           ; BSR set to: 0
 12495                           ;ButtonController.h: 93: releaseENTER();
 12496  0024DE  EC8C  F039         	call	_releaseENTER	;wreg free
 12497                           
 12498                           ;ButtonController.h: 94: }else {
 12499  0024E2  0012               	return	
 12500  0024E4                     l12007:
 12501                           
 12502                           ;ButtonController.h: 95: if(!ENTERsecurLock)
 12503  0024E4  0100               	movlb	0	; () banked
 12504  0024E6  51C1               	movf	_ENTERsecurLock& (0+255),w,b
 12505  0024E8  A4D8               	btfss	status,2,c
 12506  0024EA  D002               	goto	l12011
 12507                           
 12508                           ; BSR set to: 0
 12509                           ;ButtonController.h: 96: holdENTERcont++;
 12510  0024EC  0100               	movlb	0	; () banked
 12511  0024EE  2BC6               	incf	_holdENTERcont& (0+255),f,b
 12512  0024F0                     l12011:
 12513                           
 12514                           ; BSR set to: 0
 12515                           ;ButtonController.h: 97: if(holdENTERcont > 9) {
 12516  0024F0  0E09               	movlw	9
 12517  0024F2  0100               	movlb	0	; () banked
 12518  0024F4  65C6               	cpfsgt	_holdENTERcont& (0+255),b
 12519  0024F6  D00A               	goto	l12019
 12520                           
 12521                           ; BSR set to: 0
 12522                           ;ButtonController.h: 98: if(holdENTERcont < 26)
 12523  0024F8  0E1A               	movlw	26
 12524  0024FA  0100               	movlb	0	; () banked
 12525  0024FC  61C6               	cpfslt	_holdENTERcont& (0+255),b
 12526  0024FE  D003               	goto	l12017
 12527                           
 12528                           ; BSR set to: 0
 12529                           ;ButtonController.h: 99: longPressENTER();
 12530  002500  EC97  F00C         	call	_longPressENTER	;wreg free
 12531  002504  D003               	goto	l12019
 12532  002506                     l12017:
 12533                           
 12534                           ;ButtonController.h: 100: else
 12535                           ;ButtonController.h: 101: ENTERsecurLock = 1;
 12536  002506  0E01               	movlw	1
 12537  002508  0100               	movlb	0	; () banked
 12538  00250A  6FC1               	movwf	_ENTERsecurLock& (0+255),b
 12539  00250C                     l12019:
 12540                           
 12541                           ;ButtonController.h: 102: }
 12542                           ;ButtonController.h: 103: delay_ms(200);
 12543  00250C  0E00               	movlw	0
 12544  00250E  0101               	movlb	1	; () banked
 12545  002510  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12546  002512  0EC8               	movlw	200
 12547  002514  6F00               	movwf	delay_ms@del& (0+255),b
 12548  002516  ECCE  F036         	call	_delay_ms	;wreg free
 12549  00251A  0012               	return	
 12550  00251C                     __end_of_buttonChecking:
 12551                           	opt stack 0
 12552                           tblptru	equ	0xFF8
 12553                           tblptrh	equ	0xFF7
 12554                           tblptrl	equ	0xFF6
 12555                           tablat	equ	0xFF5
 12556                           prodh	equ	0xFF4
 12557                           prodl	equ	0xFF3
 12558                           intcon	equ	0xFF2
 12559                           postinc0	equ	0xFEE
 12560                           wreg	equ	0xFE8
 12561                           postdec1	equ	0xFE5
 12562                           fsr1l	equ	0xFE1
 12563                           indf2	equ	0xFDF
 12564                           postinc2	equ	0xFDE
 12565                           postdec2	equ	0xFDD
 12566                           fsr2h	equ	0xFDA
 12567                           fsr2l	equ	0xFD9
 12568                           status	equ	0xFD8
 12569                           
 12570 ;; *************** function _releaseUP *****************
 12571 ;; Defined at:
 12572 ;;		line 174 in file "source/DisplayProtocol.h"
 12573 ;; Parameters:    Size  Location     Type
 12574 ;;		None
 12575 ;; Auto vars:     Size  Location     Type
 12576 ;;		None
 12577 ;; Return value:  Size  Location     Type
 12578 ;;                  1    wreg      void 
 12579 ;; Registers used:
 12580 ;;		wreg, status,2
 12581 ;; Tracked objects:
 12582 ;;		On entry : 0/0
 12583 ;;		On exit  : 0/0
 12584 ;;		Unchanged: 0/0
 12585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12586 ;;      Params:         0       0       0       0       0       0       0
 12587 ;;      Locals:         0       0       0       0       0       0       0
 12588 ;;      Temps:          0       0       0       0       0       0       0
 12589 ;;      Totals:         0       0       0       0       0       0       0
 12590 ;;Total ram usage:        0 bytes
 12591 ;; Hardware stack levels used:    1
 12592 ;; Hardware stack levels required when called:   12
 12593 ;; This function calls:
 12594 ;;		Nothing
 12595 ;; This function is called by:
 12596 ;;		_buttonChecking
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           	psect	text48
 12601  007350                     __ptext48:
 12602                           	opt stack 0
 12603  007350                     _releaseUP:
 12604                           	opt stack 17
 12605                           
 12606                           ;DisplayProtocol.h: 175: UPisLP = 0;
 12607                           
 12608                           ;incstack = 0
 12609  007350  0E00               	movlw	0
 12610  007352  6E4C               	movwf	_UPisLP,c
 12611                           
 12612                           ;DisplayProtocol.h: 176: UPsecurLock = 0;
 12613  007354  0E00               	movlw	0
 12614  007356  0100               	movlb	0	; () banked
 12615  007358  6FC4               	movwf	_UPsecurLock& (0+255),b
 12616                           
 12617                           ; BSR set to: 0
 12618  00735A  0012               	return		;funcret
 12619  00735C                     __end_of_releaseUP:
 12620                           	opt stack 0
 12621                           tblptru	equ	0xFF8
 12622                           tblptrh	equ	0xFF7
 12623                           tblptrl	equ	0xFF6
 12624                           tablat	equ	0xFF5
 12625                           prodh	equ	0xFF4
 12626                           prodl	equ	0xFF3
 12627                           intcon	equ	0xFF2
 12628                           postinc0	equ	0xFEE
 12629                           wreg	equ	0xFE8
 12630                           postdec1	equ	0xFE5
 12631                           fsr1l	equ	0xFE1
 12632                           indf2	equ	0xFDF
 12633                           postinc2	equ	0xFDE
 12634                           postdec2	equ	0xFDD
 12635                           fsr2h	equ	0xFDA
 12636                           fsr2l	equ	0xFD9
 12637                           status	equ	0xFD8
 12638                           
 12639 ;; *************** function _releaseRETRO *****************
 12640 ;; Defined at:
 12641 ;;		line 283 in file "source/DisplayProtocol.h"
 12642 ;; Parameters:    Size  Location     Type
 12643 ;;		None
 12644 ;; Auto vars:     Size  Location     Type
 12645 ;;		None
 12646 ;; Return value:  Size  Location     Type
 12647 ;;                  1    wreg      void 
 12648 ;; Registers used:
 12649 ;;		wreg, status,2
 12650 ;; Tracked objects:
 12651 ;;		On entry : 0/0
 12652 ;;		On exit  : 0/0
 12653 ;;		Unchanged: 0/0
 12654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12655 ;;      Params:         0       0       0       0       0       0       0
 12656 ;;      Locals:         0       0       0       0       0       0       0
 12657 ;;      Temps:          0       0       0       0       0       0       0
 12658 ;;      Totals:         0       0       0       0       0       0       0
 12659 ;;Total ram usage:        0 bytes
 12660 ;; Hardware stack levels used:    1
 12661 ;; Hardware stack levels required when called:   12
 12662 ;; This function calls:
 12663 ;;		Nothing
 12664 ;; This function is called by:
 12665 ;;		_buttonChecking
 12666 ;; This function uses a non-reentrant model
 12667 ;;
 12668                           
 12669                           	psect	text49
 12670  00730A                     __ptext49:
 12671                           	opt stack 0
 12672  00730A                     _releaseRETRO:
 12673                           	opt stack 17
 12674                           
 12675                           ;DisplayProtocol.h: 284: RETROisLP = 0;
 12676                           
 12677                           ; BSR set to: 0
 12678                           ;incstack = 0
 12679  00730A  0E00               	movlw	0
 12680  00730C  0100               	movlb	0	; () banked
 12681  00730E  6FC5               	movwf	_RETROisLP& (0+255),b
 12682                           
 12683                           ;DisplayProtocol.h: 285: RETROsecurLock = 0;
 12684  007310  0E00               	movlw	0
 12685  007312  0100               	movlb	0	; () banked
 12686  007314  6FC2               	movwf	_RETROsecurLock& (0+255),b
 12687                           
 12688                           ; BSR set to: 0
 12689  007316  0012               	return		;funcret
 12690  007318                     __end_of_releaseRETRO:
 12691                           	opt stack 0
 12692                           tblptru	equ	0xFF8
 12693                           tblptrh	equ	0xFF7
 12694                           tblptrl	equ	0xFF6
 12695                           tablat	equ	0xFF5
 12696                           prodh	equ	0xFF4
 12697                           prodl	equ	0xFF3
 12698                           intcon	equ	0xFF2
 12699                           postinc0	equ	0xFEE
 12700                           wreg	equ	0xFE8
 12701                           postdec1	equ	0xFE5
 12702                           fsr1l	equ	0xFE1
 12703                           indf2	equ	0xFDF
 12704                           postinc2	equ	0xFDE
 12705                           postdec2	equ	0xFDD
 12706                           fsr2h	equ	0xFDA
 12707                           fsr2l	equ	0xFD9
 12708                           status	equ	0xFD8
 12709                           
 12710 ;; *************** function _releaseENTER *****************
 12711 ;; Defined at:
 12712 ;;		line 486 in file "source/DisplayProtocol.h"
 12713 ;; Parameters:    Size  Location     Type
 12714 ;;		None
 12715 ;; Auto vars:     Size  Location     Type
 12716 ;;		None
 12717 ;; Return value:  Size  Location     Type
 12718 ;;                  1    wreg      void 
 12719 ;; Registers used:
 12720 ;;		wreg, status,2
 12721 ;; Tracked objects:
 12722 ;;		On entry : 0/0
 12723 ;;		On exit  : 0/0
 12724 ;;		Unchanged: 0/0
 12725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12726 ;;      Params:         0       0       0       0       0       0       0
 12727 ;;      Locals:         0       0       0       0       0       0       0
 12728 ;;      Temps:          0       0       0       0       0       0       0
 12729 ;;      Totals:         0       0       0       0       0       0       0
 12730 ;;Total ram usage:        0 bytes
 12731 ;; Hardware stack levels used:    1
 12732 ;; Hardware stack levels required when called:   12
 12733 ;; This function calls:
 12734 ;;		Nothing
 12735 ;; This function is called by:
 12736 ;;		_buttonChecking
 12737 ;; This function uses a non-reentrant model
 12738 ;;
 12739                           
 12740                           	psect	text50
 12741  007318                     __ptext50:
 12742                           	opt stack 0
 12743  007318                     _releaseENTER:
 12744                           	opt stack 17
 12745                           
 12746                           ;DisplayProtocol.h: 487: ENTERisLP = 0;
 12747                           
 12748                           ; BSR set to: 0
 12749                           ;incstack = 0
 12750  007318  0E00               	movlw	0
 12751  00731A  0101               	movlb	1	; () banked
 12752  00731C  6FBE               	movwf	_ENTERisLP& (0+255),b
 12753                           
 12754                           ;DisplayProtocol.h: 488: ENTERsecurLock = 0;
 12755  00731E  0E00               	movlw	0
 12756  007320  0100               	movlb	0	; () banked
 12757  007322  6FC1               	movwf	_ENTERsecurLock& (0+255),b
 12758                           
 12759                           ; BSR set to: 0
 12760  007324  0012               	return		;funcret
 12761  007326                     __end_of_releaseENTER:
 12762                           	opt stack 0
 12763                           tblptru	equ	0xFF8
 12764                           tblptrh	equ	0xFF7
 12765                           tblptrl	equ	0xFF6
 12766                           tablat	equ	0xFF5
 12767                           prodh	equ	0xFF4
 12768                           prodl	equ	0xFF3
 12769                           intcon	equ	0xFF2
 12770                           postinc0	equ	0xFEE
 12771                           wreg	equ	0xFE8
 12772                           postdec1	equ	0xFE5
 12773                           fsr1l	equ	0xFE1
 12774                           indf2	equ	0xFDF
 12775                           postinc2	equ	0xFDE
 12776                           postdec2	equ	0xFDD
 12777                           fsr2h	equ	0xFDA
 12778                           fsr2l	equ	0xFD9
 12779                           status	equ	0xFD8
 12780                           
 12781 ;; *************** function _releaseDOWN *****************
 12782 ;; Defined at:
 12783 ;;		line 220 in file "source/DisplayProtocol.h"
 12784 ;; Parameters:    Size  Location     Type
 12785 ;;		None
 12786 ;; Auto vars:     Size  Location     Type
 12787 ;;		None
 12788 ;; Return value:  Size  Location     Type
 12789 ;;                  1    wreg      void 
 12790 ;; Registers used:
 12791 ;;		wreg, status,2
 12792 ;; Tracked objects:
 12793 ;;		On entry : 0/0
 12794 ;;		On exit  : 0/0
 12795 ;;		Unchanged: 0/0
 12796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12797 ;;      Params:         0       0       0       0       0       0       0
 12798 ;;      Locals:         0       0       0       0       0       0       0
 12799 ;;      Temps:          0       0       0       0       0       0       0
 12800 ;;      Totals:         0       0       0       0       0       0       0
 12801 ;;Total ram usage:        0 bytes
 12802 ;; Hardware stack levels used:    1
 12803 ;; Hardware stack levels required when called:   12
 12804 ;; This function calls:
 12805 ;;		Nothing
 12806 ;; This function is called by:
 12807 ;;		_buttonChecking
 12808 ;; This function uses a non-reentrant model
 12809 ;;
 12810                           
 12811                           	psect	text51
 12812  00735C                     __ptext51:
 12813                           	opt stack 0
 12814  00735C                     _releaseDOWN:
 12815                           	opt stack 17
 12816                           
 12817                           ;DisplayProtocol.h: 221: DOWNisLP = 0;
 12818                           
 12819                           ; BSR set to: 0
 12820                           ;incstack = 0
 12821  00735C  0E00               	movlw	0
 12822  00735E  6E4B               	movwf	_DOWNisLP,c
 12823                           
 12824                           ;DisplayProtocol.h: 222: DOWNsecurLock = 0;
 12825  007360  0E00               	movlw	0
 12826  007362  0100               	movlb	0	; () banked
 12827  007364  6FC3               	movwf	_DOWNsecurLock& (0+255),b
 12828                           
 12829                           ; BSR set to: 0
 12830  007366  0012               	return		;funcret
 12831  007368                     __end_of_releaseDOWN:
 12832                           	opt stack 0
 12833                           tblptru	equ	0xFF8
 12834                           tblptrh	equ	0xFF7
 12835                           tblptrl	equ	0xFF6
 12836                           tablat	equ	0xFF5
 12837                           prodh	equ	0xFF4
 12838                           prodl	equ	0xFF3
 12839                           intcon	equ	0xFF2
 12840                           postinc0	equ	0xFEE
 12841                           wreg	equ	0xFE8
 12842                           postdec1	equ	0xFE5
 12843                           fsr1l	equ	0xFE1
 12844                           indf2	equ	0xFDF
 12845                           postinc2	equ	0xFDE
 12846                           postdec2	equ	0xFDD
 12847                           fsr2h	equ	0xFDA
 12848                           fsr2l	equ	0xFD9
 12849                           status	equ	0xFD8
 12850                           
 12851 ;; *************** function _pressUP *****************
 12852 ;; Defined at:
 12853 ;;		line 124 in file "source/DisplayProtocol.h"
 12854 ;; Parameters:    Size  Location     Type
 12855 ;;		None
 12856 ;; Auto vars:     Size  Location     Type
 12857 ;;		None
 12858 ;; Return value:  Size  Location     Type
 12859 ;;                  1    wreg      void 
 12860 ;; Registers used:
 12861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12862 ;; Tracked objects:
 12863 ;;		On entry : 0/0
 12864 ;;		On exit  : 0/0
 12865 ;;		Unchanged: 0/0
 12866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12867 ;;      Params:         0       0       0       0       0       0       0
 12868 ;;      Locals:         0       0       0       0       0       0       0
 12869 ;;      Temps:          0       0       1       0       0       0       0
 12870 ;;      Totals:         0       0       1       0       0       0       0
 12871 ;;Total ram usage:        1 bytes
 12872 ;; Hardware stack levels used:    1
 12873 ;; Hardware stack levels required when called:   13
 12874 ;; This function calls:
 12875 ;;		_chanValDigUP
 12876 ;; This function is called by:
 12877 ;;		_buttonChecking
 12878 ;; This function uses a non-reentrant model
 12879 ;;
 12880                           
 12881                           	psect	text52
 12882  004726                     __ptext52:
 12883                           	opt stack 0
 12884  004726                     _pressUP:
 12885                           	opt stack 16
 12886                           
 12887                           ;DisplayProtocol.h: 125: if (actualScreen == 0 || actualScreen == 4) {
 12888                           
 12889                           ; BSR set to: 0
 12890                           ;incstack = 0
 12891  004726  0101               	movlb	1	; () banked
 12892  004728  51BD               	movf	_actualScreen& (0+255),w,b
 12893  00472A  B4D8               	btfsc	status,2,c
 12894  00472C  D005               	goto	l11145
 12895                           
 12896                           ; BSR set to: 1
 12897  00472E  0E04               	movlw	4
 12898  004730  0101               	movlb	1	; () banked
 12899  004732  19BD               	xorwf	_actualScreen& (0+255),w,b
 12900  004734  A4D8               	btfss	status,2,c
 12901  004736  D00C               	goto	l11151
 12902  004738                     l11145:
 12903                           
 12904                           ; BSR set to: 1
 12905                           ;DisplayProtocol.h: 126: menuSection++;
 12906  004738  0101               	movlb	1	; () banked
 12907  00473A  2BBC               	incf	_menuSection& (0+255),f,b
 12908                           
 12909                           ; BSR set to: 1
 12910                           ;DisplayProtocol.h: 127: if (menuSection > 3)
 12911  00473C  0101               	movlb	1	; () banked
 12912  00473E  51BC               	movf	_menuSection& (0+255),w,b
 12913  004740  0A80               	xorlw	128
 12914  004742  0F7C               	addlw	-132
 12915  004744  A0D8               	btfss	status,0,c
 12916  004746  0012               	return	
 12917                           
 12918                           ; BSR set to: 1
 12919                           ;DisplayProtocol.h: 128: menuSection = 0;
 12920  004748  0E00               	movlw	0
 12921  00474A  0101               	movlb	1	; () banked
 12922  00474C  6FBC               	movwf	_menuSection& (0+255),b
 12923                           
 12924                           ; BSR set to: 1
 12925                           ;DisplayProtocol.h: 129: } else if (actualScreen == 1) {
 12926  00474E  0012               	return	
 12927  004750                     l11151:
 12928                           
 12929                           ; BSR set to: 1
 12930  004750  0101               	movlb	1	; () banked
 12931  004752  05BD               	decf	_actualScreen& (0+255),w,b
 12932  004754  A4D8               	btfss	status,2,c
 12933  004756  D024               	goto	l11157
 12934                           
 12935                           ; BSR set to: 1
 12936                           ;DisplayProtocol.h: 130: introducido[passSection]++;
 12937  004758  0101               	movlb	1	; () banked
 12938  00475A  51BB               	movf	_passSection& (0+255),w,b
 12939  00475C  0D01               	mullw	1
 12940  00475E  0EAD               	movlw	low _introducido
 12941  004760  24F3               	addwf	prodl,w,c
 12942  004762  6ED9               	movwf	fsr2l,c
 12943  004764  0E01               	movlw	high _introducido
 12944  004766  20F4               	addwfc	prodh,w,c
 12945  004768  6EDA               	movwf	fsr2h,c
 12946  00476A  2ADF               	incf	indf2,f,c
 12947                           
 12948                           ;DisplayProtocol.h: 131: if (introducido[passSection] > 9)
 12949  00476C  0101               	movlb	1	; () banked
 12950  00476E  51BB               	movf	_passSection& (0+255),w,b
 12951  004770  0D01               	mullw	1
 12952  004772  0EAD               	movlw	low _introducido
 12953  004774  24F3               	addwf	prodl,w,c
 12954  004776  6ED9               	movwf	fsr2l,c
 12955  004778  0E01               	movlw	high _introducido
 12956  00477A  20F4               	addwfc	prodh,w,c
 12957  00477C  6EDA               	movwf	fsr2h,c
 12958  00477E  50DF               	movf	indf2,w,c
 12959  004780  0A80               	xorlw	128
 12960  004782  0F76               	addlw	-138
 12961  004784  A0D8               	btfss	status,0,c
 12962  004786  0012               	return	
 12963                           
 12964                           ; BSR set to: 1
 12965                           ;DisplayProtocol.h: 132: introducido[passSection] = 0;
 12966  004788  0101               	movlb	1	; () banked
 12967  00478A  51BB               	movf	_passSection& (0+255),w,b
 12968  00478C  0D01               	mullw	1
 12969  00478E  0EAD               	movlw	low _introducido
 12970  004790  24F3               	addwf	prodl,w,c
 12971  004792  6ED9               	movwf	fsr2l,c
 12972  004794  0E01               	movlw	high _introducido
 12973  004796  20F4               	addwfc	prodh,w,c
 12974  004798  6EDA               	movwf	fsr2h,c
 12975  00479A  0E00               	movlw	0
 12976  00479C  6EDF               	movwf	indf2,c
 12977                           
 12978                           ; BSR set to: 1
 12979                           ;DisplayProtocol.h: 133: } else if (actualScreen == 2 || actualScreen == 3
 12980  00479E  0012               	return	
 12981  0047A0                     l11157:
 12982                           
 12983                           ; BSR set to: 1
 12984                           ;DisplayProtocol.h: 134: || actualScreen == 10 || actualScreen == 11
 12985                           ;DisplayProtocol.h: 135: || actualScreen == 15) {
 12986  0047A0  0E02               	movlw	2
 12987  0047A2  0101               	movlb	1	; () banked
 12988  0047A4  19BD               	xorwf	_actualScreen& (0+255),w,b
 12989  0047A6  B4D8               	btfsc	status,2,c
 12990  0047A8  D014               	goto	l11167
 12991                           
 12992                           ; BSR set to: 1
 12993  0047AA  0E03               	movlw	3
 12994  0047AC  0101               	movlb	1	; () banked
 12995  0047AE  19BD               	xorwf	_actualScreen& (0+255),w,b
 12996  0047B0  B4D8               	btfsc	status,2,c
 12997  0047B2  D00F               	goto	l11167
 12998                           
 12999                           ; BSR set to: 1
 13000  0047B4  0E0A               	movlw	10
 13001  0047B6  0101               	movlb	1	; () banked
 13002  0047B8  19BD               	xorwf	_actualScreen& (0+255),w,b
 13003  0047BA  B4D8               	btfsc	status,2,c
 13004  0047BC  D00A               	goto	l11167
 13005                           
 13006                           ; BSR set to: 1
 13007  0047BE  0E0B               	movlw	11
 13008  0047C0  0101               	movlb	1	; () banked
 13009  0047C2  19BD               	xorwf	_actualScreen& (0+255),w,b
 13010  0047C4  B4D8               	btfsc	status,2,c
 13011  0047C6  D005               	goto	l11167
 13012                           
 13013                           ; BSR set to: 1
 13014  0047C8  0E0F               	movlw	15
 13015  0047CA  0101               	movlb	1	; () banked
 13016  0047CC  19BD               	xorwf	_actualScreen& (0+255),w,b
 13017  0047CE  A4D8               	btfss	status,2,c
 13018  0047D0  D011               	goto	l11173
 13019  0047D2                     l11167:
 13020                           
 13021                           ; BSR set to: 1
 13022                           ;DisplayProtocol.h: 136: selSN = !selSN;
 13023  0047D2  0101               	movlb	1	; () banked
 13024  0047D4  51BA               	movf	_selSN& (0+255),w,b
 13025  0047D6  A4D8               	btfss	status,2,c
 13026  0047D8  D002               	goto	u16330
 13027  0047DA  0E01               	movlw	1
 13028  0047DC  D001               	goto	u16340
 13029  0047DE                     u16330:
 13030  0047DE  0E00               	movlw	0
 13031  0047E0                     u16340:
 13032  0047E0  0101               	movlb	1	; () banked
 13033  0047E2  6FBA               	movwf	_selSN& (0+255),b
 13034                           
 13035                           ; BSR set to: 1
 13036                           ;DisplayProtocol.h: 137: if(selSN > 1)
 13037  0047E4  0E01               	movlw	1
 13038  0047E6  0101               	movlb	1	; () banked
 13039  0047E8  65BA               	cpfsgt	_selSN& (0+255),b
 13040  0047EA  0012               	return	
 13041                           
 13042                           ; BSR set to: 1
 13043                           ;DisplayProtocol.h: 138: selSN = 0;
 13044  0047EC  0E00               	movlw	0
 13045  0047EE  0101               	movlb	1	; () banked
 13046  0047F0  6FBA               	movwf	_selSN& (0+255),b
 13047                           
 13048                           ; BSR set to: 1
 13049                           ;DisplayProtocol.h: 139: }else if(actualScreen == 5) {
 13050  0047F2  0012               	return	
 13051  0047F4                     l11173:
 13052                           
 13053                           ; BSR set to: 1
 13054  0047F4  0E05               	movlw	5
 13055  0047F6  0101               	movlb	1	; () banked
 13056  0047F8  19BD               	xorwf	_actualScreen& (0+255),w,b
 13057  0047FA  B4D8               	btfsc	status,2,c
 13058  0047FC  D008               	goto	l11183
 13059  0047FE  D013               	goto	l11185
 13060  004800                     l11177:
 13061                           
 13062                           ; BSR set to: 1
 13063                           ;DisplayProtocol.h: 144: chanValDigUP();
 13064  004800  EC22  F029         	call	_chanValDigUP	;wreg free
 13065                           
 13066                           ;DisplayProtocol.h: 145: break;
 13067  004804  0012               	return	
 13068  004806                     l11179:
 13069                           
 13070                           ;DisplayProtocol.h: 147: chanVals++;
 13071  004806  0101               	movlb	1	; () banked
 13072  004808  4BB6               	infsnz	_chanVals& (0+255),f,b
 13073  00480A  2BB7               	incf	(_chanVals+1)& (0+255),f,b
 13074                           
 13075                           ; BSR set to: 1
 13076                           ;DisplayProtocol.h: 149: }
 13077                           ;DisplayProtocol.h: 150: }
 13078                           
 13079                           ;DisplayProtocol.h: 148: break;
 13080  00480C  0012               	return	
 13081  00480E                     l11183:
 13082                           
 13083                           ; BSR set to: 1
 13084  00480E  0101               	movlb	1	; () banked
 13085  004810  51BC               	movf	_menuSection& (0+255),w,b
 13086                           
 13087                           ; Switch size 1, requested type "space"
 13088                           ; Number of cases is 3, Range of values is 0 to 2
 13089                           ; switch strategies available:
 13090                           ; Name         Instructions Cycles
 13091                           ; simple_byte           10     6 (average)
 13092                           ;	Chosen strategy is simple_byte
 13093  004812  0A00               	xorlw	0	; case 0
 13094  004814  B4D8               	btfsc	status,2,c
 13095  004816  0012               	return	
 13096  004818  0A01               	xorlw	1	; case 1
 13097  00481A  B4D8               	btfsc	status,2,c
 13098  00481C  D7F1               	goto	l11177
 13099  00481E  0A03               	xorlw	3	; case 2
 13100  004820  A4D8               	btfss	status,2,c
 13101                           
 13102                           ; BSR set to: 1
 13103                           ;DisplayProtocol.h: 151: }else if(actualScreen == 12)
 13104  004822  0012               	return	
 13105  004824  D7F0               	goto	l11179
 13106  004826                     l11185:
 13107                           
 13108                           ; BSR set to: 1
 13109  004826  0E0C               	movlw	12
 13110  004828  0101               	movlb	1	; () banked
 13111  00482A  19BD               	xorwf	_actualScreen& (0+255),w,b
 13112  00482C  A4D8               	btfss	status,2,c
 13113  00482E  0012               	return	
 13114                           
 13115                           ; BSR set to: 1
 13116                           ;DisplayProtocol.h: 152: chanValDigUP();
 13117  004830  EC22  F029         	call	_chanValDigUP	;wreg free
 13118  004834  0012               	return	
 13119  004836                     __end_of_pressUP:
 13120                           	opt stack 0
 13121                           tblptru	equ	0xFF8
 13122                           tblptrh	equ	0xFF7
 13123                           tblptrl	equ	0xFF6
 13124                           tablat	equ	0xFF5
 13125                           prodh	equ	0xFF4
 13126                           prodl	equ	0xFF3
 13127                           intcon	equ	0xFF2
 13128                           postinc0	equ	0xFEE
 13129                           wreg	equ	0xFE8
 13130                           postdec1	equ	0xFE5
 13131                           fsr1l	equ	0xFE1
 13132                           indf2	equ	0xFDF
 13133                           postinc2	equ	0xFDE
 13134                           postdec2	equ	0xFDD
 13135                           fsr2h	equ	0xFDA
 13136                           fsr2l	equ	0xFD9
 13137                           status	equ	0xFD8
 13138                           
 13139 ;; *************** function _chanValDigUP *****************
 13140 ;; Defined at:
 13141 ;;		line 28 in file "source/DisplayProtocol.h"
 13142 ;; Parameters:    Size  Location     Type
 13143 ;;		None
 13144 ;; Auto vars:     Size  Location     Type
 13145 ;;		None
 13146 ;; Return value:  Size  Location     Type
 13147 ;;                  1    wreg      void 
 13148 ;; Registers used:
 13149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13150 ;; Tracked objects:
 13151 ;;		On entry : 0/0
 13152 ;;		On exit  : 0/0
 13153 ;;		Unchanged: 0/0
 13154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13155 ;;      Params:         0       0       0       0       0       0       0
 13156 ;;      Locals:         0       0       0       0       0       0       0
 13157 ;;      Temps:          0       0       5       0       0       0       0
 13158 ;;      Totals:         0       0       5       0       0       0       0
 13159 ;;Total ram usage:        5 bytes
 13160 ;; Hardware stack levels used:    1
 13161 ;; Hardware stack levels required when called:   12
 13162 ;; This function calls:
 13163 ;;		Nothing
 13164 ;; This function is called by:
 13165 ;;		_pressUP
 13166 ;; This function uses a non-reentrant model
 13167 ;;
 13168                           
 13169                           	psect	text53
 13170  005244                     __ptext53:
 13171                           	opt stack 0
 13172  005244                     _chanValDigUP:
 13173                           	opt stack 16
 13174                           
 13175                           ;DisplayProtocol.h: 29: chanValdig[chanValSection]++;
 13176                           
 13177                           ;incstack = 0
 13178  005244  0101               	movlb	1	; () banked
 13179  005246  519C               	movf	_chanValSection& (0+255),w,b
 13180  005248  0D01               	mullw	1
 13181  00524A  0EA3               	movlw	low _chanValdig
 13182  00524C  24F3               	addwf	prodl,w,c
 13183  00524E  6ED9               	movwf	fsr2l,c
 13184  005250  0E01               	movlw	high _chanValdig
 13185  005252  20F4               	addwfc	prodh,w,c
 13186  005254  6EDA               	movwf	fsr2h,c
 13187  005256  2ADF               	incf	indf2,f,c
 13188                           
 13189                           ;DisplayProtocol.h: 30: if(chanValdig[chanValSection] > 9) {
 13190  005258  0101               	movlb	1	; () banked
 13191  00525A  519C               	movf	_chanValSection& (0+255),w,b
 13192  00525C  0D01               	mullw	1
 13193  00525E  0EA3               	movlw	low _chanValdig
 13194  005260  24F3               	addwf	prodl,w,c
 13195  005262  6ED9               	movwf	fsr2l,c
 13196  005264  0E01               	movlw	high _chanValdig
 13197  005266  20F4               	addwfc	prodh,w,c
 13198  005268  6EDA               	movwf	fsr2h,c
 13199  00526A  50DF               	movf	indf2,w,c
 13200  00526C  0A80               	xorlw	128
 13201  00526E  0F76               	addlw	-138
 13202  005270  A0D8               	btfss	status,0,c
 13203  005272  0012               	return	
 13204                           
 13205                           ; BSR set to: 1
 13206                           ;DisplayProtocol.h: 31: chanValdig[chanValSection] = 0;
 13207  005274  0101               	movlb	1	; () banked
 13208  005276  519C               	movf	_chanValSection& (0+255),w,b
 13209  005278  0D01               	mullw	1
 13210  00527A  0EA3               	movlw	low _chanValdig
 13211  00527C  24F3               	addwf	prodl,w,c
 13212  00527E  6ED9               	movwf	fsr2l,c
 13213  005280  0E01               	movlw	high _chanValdig
 13214  005282  20F4               	addwfc	prodh,w,c
 13215  005284  6EDA               	movwf	fsr2h,c
 13216  005286  0E00               	movlw	0
 13217  005288  6EDF               	movwf	indf2,c
 13218                           
 13219                           ; BSR set to: 1
 13220                           ;DisplayProtocol.h: 32: if(chanValSection > 1 && chanValdig[chanValSection - 1] < 9)
 13221  00528A  0101               	movlb	1	; () banked
 13222  00528C  519C               	movf	_chanValSection& (0+255),w,b
 13223  00528E  0A80               	xorlw	128
 13224  005290  0F7E               	addlw	-130
 13225  005292  A0D8               	btfss	status,0,c
 13226  005294  0012               	return	
 13227                           
 13228                           ; BSR set to: 1
 13229  005296  0EFF               	movlw	255
 13230  005298  0101               	movlb	1	; () banked
 13231  00529A  6F00               	movwf	??_chanValDigUP& (0+255),b
 13232  00529C  0EFF               	movlw	255
 13233  00529E  0101               	movlb	1	; () banked
 13234  0052A0  6F01               	movwf	(??_chanValDigUP+1)& (0+255),b
 13235  0052A2  C19C  F102         	movff	_chanValSection,??_chanValDigUP+2
 13236  0052A6  0101               	movlb	1	; () banked
 13237  0052A8  6B03               	clrf	(??_chanValDigUP+3)& (0+255),b
 13238  0052AA  BF02               	btfsc	(??_chanValDigUP+2)& (0+255),7,b
 13239  0052AC  0703               	decf	(??_chanValDigUP+3)& (0+255),f,b
 13240  0052AE  0101               	movlb	1	; () banked
 13241  0052B0  5100               	movf	??_chanValDigUP& (0+255),w,b
 13242  0052B2  0101               	movlb	1	; () banked
 13243  0052B4  2702               	addwf	(??_chanValDigUP+2)& (0+255),f,b
 13244  0052B6  0101               	movlb	1	; () banked
 13245  0052B8  5101               	movf	(??_chanValDigUP+1)& (0+255),w,b
 13246  0052BA  0101               	movlb	1	; () banked
 13247  0052BC  2303               	addwfc	(??_chanValDigUP+3)& (0+255),f,b
 13248  0052BE  0EA3               	movlw	low _chanValdig
 13249  0052C0  0101               	movlb	1	; () banked
 13250  0052C2  2502               	addwf	(??_chanValDigUP+2)& (0+255),w,b
 13251  0052C4  6ED9               	movwf	fsr2l,c
 13252  0052C6  0E01               	movlw	high _chanValdig
 13253  0052C8  0101               	movlb	1	; () banked
 13254  0052CA  2103               	addwfc	(??_chanValDigUP+3)& (0+255),w,b
 13255  0052CC  6EDA               	movwf	fsr2h,c
 13256  0052CE  50DF               	movf	indf2,w,c
 13257  0052D0  0A80               	xorlw	128
 13258  0052D2  0F77               	addlw	-137
 13259  0052D4  B0D8               	btfsc	status,0,c
 13260  0052D6  0012               	return	
 13261                           
 13262                           ; BSR set to: 1
 13263                           ;DisplayProtocol.h: 33: chanValdig[chanValSection - 1]++;
 13264  0052D8  0EFF               	movlw	255
 13265  0052DA  0101               	movlb	1	; () banked
 13266  0052DC  6F00               	movwf	??_chanValDigUP& (0+255),b
 13267  0052DE  0EFF               	movlw	255
 13268  0052E0  0101               	movlb	1	; () banked
 13269  0052E2  6F01               	movwf	(??_chanValDigUP+1)& (0+255),b
 13270  0052E4  C19C  F102         	movff	_chanValSection,??_chanValDigUP+2
 13271  0052E8  0101               	movlb	1	; () banked
 13272  0052EA  6B03               	clrf	(??_chanValDigUP+3)& (0+255),b
 13273  0052EC  BF02               	btfsc	(??_chanValDigUP+2)& (0+255),7,b
 13274  0052EE  0703               	decf	(??_chanValDigUP+3)& (0+255),f,b
 13275  0052F0  0101               	movlb	1	; () banked
 13276  0052F2  5100               	movf	??_chanValDigUP& (0+255),w,b
 13277  0052F4  0101               	movlb	1	; () banked
 13278  0052F6  2702               	addwf	(??_chanValDigUP+2)& (0+255),f,b
 13279  0052F8  0101               	movlb	1	; () banked
 13280  0052FA  5101               	movf	(??_chanValDigUP+1)& (0+255),w,b
 13281  0052FC  0101               	movlb	1	; () banked
 13282  0052FE  2303               	addwfc	(??_chanValDigUP+3)& (0+255),f,b
 13283  005300  0EA3               	movlw	low _chanValdig
 13284  005302  0101               	movlb	1	; () banked
 13285  005304  2502               	addwf	(??_chanValDigUP+2)& (0+255),w,b
 13286  005306  6ED9               	movwf	fsr2l,c
 13287  005308  0E01               	movlw	high _chanValdig
 13288  00530A  0101               	movlb	1	; () banked
 13289  00530C  2103               	addwfc	(??_chanValDigUP+3)& (0+255),w,b
 13290  00530E  6EDA               	movwf	fsr2h,c
 13291  005310  2ADF               	incf	indf2,f,c
 13292                           
 13293                           ; BSR set to: 1
 13294  005312  0012               	return	
 13295  005314                     __end_of_chanValDigUP:
 13296                           	opt stack 0
 13297                           tblptru	equ	0xFF8
 13298                           tblptrh	equ	0xFF7
 13299                           tblptrl	equ	0xFF6
 13300                           tablat	equ	0xFF5
 13301                           prodh	equ	0xFF4
 13302                           prodl	equ	0xFF3
 13303                           intcon	equ	0xFF2
 13304                           postinc0	equ	0xFEE
 13305                           wreg	equ	0xFE8
 13306                           postdec1	equ	0xFE5
 13307                           fsr1l	equ	0xFE1
 13308                           indf2	equ	0xFDF
 13309                           postinc2	equ	0xFDE
 13310                           postdec2	equ	0xFDD
 13311                           fsr2h	equ	0xFDA
 13312                           fsr2l	equ	0xFD9
 13313                           status	equ	0xFD8
 13314                           
 13315 ;; *************** function _pressRETRO *****************
 13316 ;; Defined at:
 13317 ;;		line 225 in file "source/DisplayProtocol.h"
 13318 ;; Parameters:    Size  Location     Type
 13319 ;;		None
 13320 ;; Auto vars:     Size  Location     Type
 13321 ;;		None
 13322 ;; Return value:  Size  Location     Type
 13323 ;;                  1    wreg      void 
 13324 ;; Registers used:
 13325 ;;		wreg, status,2, status,0, cstack
 13326 ;; Tracked objects:
 13327 ;;		On entry : 0/0
 13328 ;;		On exit  : 0/0
 13329 ;;		Unchanged: 0/0
 13330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13331 ;;      Params:         0       0       0       0       0       0       0
 13332 ;;      Locals:         0       0       0       0       0       0       0
 13333 ;;      Temps:          0       0       0       0       0       0       0
 13334 ;;      Totals:         0       0       0       0       0       0       0
 13335 ;;Total ram usage:        0 bytes
 13336 ;; Hardware stack levels used:    1
 13337 ;; Hardware stack levels required when called:   15
 13338 ;; This function calls:
 13339 ;;		_initProtocoll
 13340 ;; This function is called by:
 13341 ;;		_buttonChecking
 13342 ;; This function uses a non-reentrant model
 13343 ;;
 13344                           
 13345                           	psect	text54
 13346  005644                     __ptext54:
 13347                           	opt stack 0
 13348  005644                     _pressRETRO:
 13349                           	opt stack 14
 13350                           
 13351                           ;DisplayProtocol.h: 226: if (actualScreen == 1) {
 13352                           
 13353                           ; BSR set to: 1
 13354                           ;incstack = 0
 13355  005644  0101               	movlb	1	; () banked
 13356  005646  05BD               	decf	_actualScreen& (0+255),w,b
 13357  005648  A4D8               	btfss	status,2,c
 13358  00564A  D004               	goto	l11279
 13359                           
 13360                           ; BSR set to: 1
 13361                           ;DisplayProtocol.h: 227: actualScreen = 0;
 13362  00564C  0E00               	movlw	0
 13363  00564E  0101               	movlb	1	; () banked
 13364  005650  6FBD               	movwf	_actualScreen& (0+255),b
 13365                           
 13366                           ;DisplayProtocol.h: 228: }else if (actualScreen == 2 || actualScreen == 3
 13367  005652  0012               	return	
 13368  005654                     l11279:
 13369                           
 13370                           ; BSR set to: 1
 13371                           ;DisplayProtocol.h: 229: || actualScreen == 10 || actualScreen == 11
 13372                           ;DisplayProtocol.h: 230: || actualScreen == 15) {
 13373  005654  0E02               	movlw	2
 13374  005656  0101               	movlb	1	; () banked
 13375  005658  19BD               	xorwf	_actualScreen& (0+255),w,b
 13376  00565A  B4D8               	btfsc	status,2,c
 13377  00565C  D014               	goto	l680
 13378                           
 13379                           ; BSR set to: 1
 13380  00565E  0E03               	movlw	3
 13381  005660  0101               	movlb	1	; () banked
 13382  005662  19BD               	xorwf	_actualScreen& (0+255),w,b
 13383  005664  B4D8               	btfsc	status,2,c
 13384  005666  D00F               	goto	l680
 13385                           
 13386                           ; BSR set to: 1
 13387  005668  0E0A               	movlw	10
 13388  00566A  0101               	movlb	1	; () banked
 13389  00566C  19BD               	xorwf	_actualScreen& (0+255),w,b
 13390  00566E  B4D8               	btfsc	status,2,c
 13391  005670  D00A               	goto	l680
 13392                           
 13393                           ; BSR set to: 1
 13394  005672  0E0B               	movlw	11
 13395  005674  0101               	movlb	1	; () banked
 13396  005676  19BD               	xorwf	_actualScreen& (0+255),w,b
 13397  005678  B4D8               	btfsc	status,2,c
 13398  00567A  D005               	goto	l680
 13399                           
 13400                           ; BSR set to: 1
 13401  00567C  0E0F               	movlw	15
 13402  00567E  0101               	movlb	1	; () banked
 13403  005680  19BD               	xorwf	_actualScreen& (0+255),w,b
 13404  005682  A4D8               	btfss	status,2,c
 13405  005684  D003               	goto	l11289
 13406  005686                     l680:
 13407                           
 13408                           ; BSR set to: 1
 13409                           ;DisplayProtocol.h: 231: actualScreen = tempLastScreen;
 13410  005686  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 13411                           
 13412                           ;DisplayProtocol.h: 232: }else if(actualScreen == 5) {
 13413  00568A  0012               	return	
 13414  00568C                     l11289:
 13415                           
 13416                           ; BSR set to: 1
 13417  00568C  0E05               	movlw	5
 13418  00568E  0101               	movlb	1	; () banked
 13419  005690  19BD               	xorwf	_actualScreen& (0+255),w,b
 13420  005692  A4D8               	btfss	status,2,c
 13421  005694  D015               	goto	l11301
 13422                           
 13423                           ; BSR set to: 1
 13424                           ;DisplayProtocol.h: 233: if(menuSection != 2) {
 13425  005696  0E02               	movlw	2
 13426  005698  0101               	movlb	1	; () banked
 13427  00569A  19BC               	xorwf	_menuSection& (0+255),w,b
 13428  00569C  B4D8               	btfsc	status,2,c
 13429  00569E  D00C               	goto	l11299
 13430                           
 13431                           ; BSR set to: 1
 13432                           ;DisplayProtocol.h: 234: chanValSection++;
 13433  0056A0  0101               	movlb	1	; () banked
 13434  0056A2  2B9C               	incf	_chanValSection& (0+255),f,b
 13435                           
 13436                           ; BSR set to: 1
 13437                           ;DisplayProtocol.h: 235: if(chanValSection > 5)
 13438  0056A4  0101               	movlb	1	; () banked
 13439  0056A6  519C               	movf	_chanValSection& (0+255),w,b
 13440  0056A8  0A80               	xorlw	128
 13441  0056AA  0F7A               	addlw	-134
 13442  0056AC  A0D8               	btfss	status,0,c
 13443  0056AE  0012               	return	
 13444                           
 13445                           ; BSR set to: 1
 13446                           ;DisplayProtocol.h: 236: chanValSection = 0;
 13447  0056B0  0E00               	movlw	0
 13448  0056B2  0101               	movlb	1	; () banked
 13449  0056B4  6F9C               	movwf	_chanValSection& (0+255),b
 13450                           
 13451                           ; BSR set to: 1
 13452                           ;DisplayProtocol.h: 237: }else
 13453  0056B6  0012               	return	
 13454  0056B8                     l11299:
 13455                           
 13456                           ; BSR set to: 1
 13457                           ;DisplayProtocol.h: 238: actualScreen = 4;
 13458  0056B8  0E04               	movlw	4
 13459  0056BA  0101               	movlb	1	; () banked
 13460  0056BC  6FBD               	movwf	_actualScreen& (0+255),b
 13461                           
 13462                           ; BSR set to: 1
 13463                           ;DisplayProtocol.h: 239: }else if(actualScreen == 11)
 13464  0056BE  0012               	return	
 13465  0056C0                     l11301:
 13466                           
 13467                           ; BSR set to: 1
 13468  0056C0  0E0B               	movlw	11
 13469  0056C2  0101               	movlb	1	; () banked
 13470  0056C4  19BD               	xorwf	_actualScreen& (0+255),w,b
 13471  0056C6  A4D8               	btfss	status,2,c
 13472  0056C8  D004               	goto	l11305
 13473                           
 13474                           ; BSR set to: 1
 13475                           ;DisplayProtocol.h: 240: actualScreen = 4;
 13476  0056CA  0E04               	movlw	4
 13477  0056CC  0101               	movlb	1	; () banked
 13478  0056CE  6FBD               	movwf	_actualScreen& (0+255),b
 13479  0056D0  0012               	return	
 13480  0056D2                     l11305:
 13481                           
 13482                           ; BSR set to: 1
 13483                           ;DisplayProtocol.h: 241: else if(actualScreen == 12) {
 13484  0056D2  0E0C               	movlw	12
 13485  0056D4  0101               	movlb	1	; () banked
 13486  0056D6  19BD               	xorwf	_actualScreen& (0+255),w,b
 13487  0056D8  A4D8               	btfss	status,2,c
 13488  0056DA  D00C               	goto	l11313
 13489                           
 13490                           ; BSR set to: 1
 13491                           ;DisplayProtocol.h: 242: chanValSection++;
 13492  0056DC  0101               	movlb	1	; () banked
 13493  0056DE  2B9C               	incf	_chanValSection& (0+255),f,b
 13494                           
 13495                           ; BSR set to: 1
 13496                           ;DisplayProtocol.h: 243: if(chanValSection > 5)
 13497  0056E0  0101               	movlb	1	; () banked
 13498  0056E2  519C               	movf	_chanValSection& (0+255),w,b
 13499  0056E4  0A80               	xorlw	128
 13500  0056E6  0F7A               	addlw	-134
 13501  0056E8  A0D8               	btfss	status,0,c
 13502  0056EA  0012               	return	
 13503                           
 13504                           ; BSR set to: 1
 13505                           ;DisplayProtocol.h: 244: chanValSection = 0;
 13506  0056EC  0E00               	movlw	0
 13507  0056EE  0101               	movlb	1	; () banked
 13508  0056F0  6F9C               	movwf	_chanValSection& (0+255),b
 13509                           
 13510                           ; BSR set to: 1
 13511                           ;DisplayProtocol.h: 245: }else if(actualScreen == 13) {
 13512  0056F2  0012               	return	
 13513  0056F4                     l11313:
 13514                           
 13515                           ; BSR set to: 1
 13516  0056F4  0E0D               	movlw	13
 13517  0056F6  0101               	movlb	1	; () banked
 13518  0056F8  19BD               	xorwf	_actualScreen& (0+255),w,b
 13519  0056FA  A4D8               	btfss	status,2,c
 13520  0056FC  0012               	return	
 13521                           
 13522                           ; BSR set to: 1
 13523                           ;DisplayProtocol.h: 246: initProtocoll(1);
 13524  0056FE  0E01               	movlw	1
 13525  005700  EC30  F037         	call	_initProtocoll
 13526  005704  0012               	return	
 13527  005706                     __end_of_pressRETRO:
 13528                           	opt stack 0
 13529                           tblptru	equ	0xFF8
 13530                           tblptrh	equ	0xFF7
 13531                           tblptrl	equ	0xFF6
 13532                           tablat	equ	0xFF5
 13533                           prodh	equ	0xFF4
 13534                           prodl	equ	0xFF3
 13535                           intcon	equ	0xFF2
 13536                           postinc0	equ	0xFEE
 13537                           wreg	equ	0xFE8
 13538                           postdec1	equ	0xFE5
 13539                           fsr1l	equ	0xFE1
 13540                           indf2	equ	0xFDF
 13541                           postinc2	equ	0xFDE
 13542                           postdec2	equ	0xFDD
 13543                           fsr2h	equ	0xFDA
 13544                           fsr2l	equ	0xFD9
 13545                           status	equ	0xFD8
 13546                           
 13547 ;; *************** function _pressENTER *****************
 13548 ;; Defined at:
 13549 ;;		line 288 in file "source/DisplayProtocol.h"
 13550 ;; Parameters:    Size  Location     Type
 13551 ;;		None
 13552 ;; Auto vars:     Size  Location     Type
 13553 ;;		None
 13554 ;; Return value:  Size  Location     Type
 13555 ;;                  1    wreg      void 
 13556 ;; Registers used:
 13557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13558 ;; Tracked objects:
 13559 ;;		On entry : 0/0
 13560 ;;		On exit  : 0/0
 13561 ;;		Unchanged: 0/0
 13562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13563 ;;      Params:         0       0       0       0       0       0       0
 13564 ;;      Locals:         0       0       0       0       0       0       0
 13565 ;;      Temps:          0       0       0       0       0       0       0
 13566 ;;      Totals:         0       0       0       0       0       0       0
 13567 ;;Total ram usage:        0 bytes
 13568 ;; Hardware stack levels used:    1
 13569 ;; Hardware stack levels required when called:   17
 13570 ;; This function calls:
 13571 ;;		___ftmul
 13572 ;;		_checkPass
 13573 ;;		_confirmEdition
 13574 ;;		_desintegrator
 13575 ;;		_initProtocoll
 13576 ;;		_setPWM2duty
 13577 ;;		_stopProcess
 13578 ;; This function is called by:
 13579 ;;		_buttonChecking
 13580 ;; This function uses a non-reentrant model
 13581 ;;
 13582                           
 13583                           	psect	text55
 13584  0011A2                     __ptext55:
 13585                           	opt stack 0
 13586  0011A2                     _pressENTER:
 13587                           	opt stack 12
 13588                           
 13589                           ;DisplayProtocol.h: 289: if (actualScreen == 1) {
 13590                           
 13591                           ;incstack = 0
 13592  0011A2  0101               	movlb	1	; () banked
 13593  0011A4  05BD               	decf	_actualScreen& (0+255),w,b
 13594  0011A6  A4D8               	btfss	status,2,c
 13595  0011A8  D018               	goto	l11375
 13596                           
 13597                           ; BSR set to: 1
 13598                           ;DisplayProtocol.h: 290: passSection++;
 13599  0011AA  0101               	movlb	1	; () banked
 13600  0011AC  2BBB               	incf	_passSection& (0+255),f,b
 13601                           
 13602                           ; BSR set to: 1
 13603                           ;DisplayProtocol.h: 291: if (passSection > 3) {
 13604  0011AE  0101               	movlb	1	; () banked
 13605  0011B0  51BB               	movf	_passSection& (0+255),w,b
 13606  0011B2  0A80               	xorlw	128
 13607  0011B4  0F7C               	addlw	-132
 13608  0011B6  A0D8               	btfss	status,0,c
 13609  0011B8  0012               	return	
 13610                           
 13611                           ; BSR set to: 1
 13612                           ;DisplayProtocol.h: 292: passSection = 0;
 13613  0011BA  0E00               	movlw	0
 13614  0011BC  0101               	movlb	1	; () banked
 13615  0011BE  6FBB               	movwf	_passSection& (0+255),b
 13616                           
 13617                           ; BSR set to: 1
 13618                           ;DisplayProtocol.h: 293: if (checkPass())
 13619  0011C0  EC3E  F031         	call	_checkPass	;wreg free
 13620  0011C4  0900               	iorlw	0
 13621  0011C6  B4D8               	btfsc	status,2,c
 13622  0011C8  D004               	goto	l11373
 13623                           
 13624                           ;DisplayProtocol.h: 294: actualScreen = 8;
 13625  0011CA  0E08               	movlw	8
 13626  0011CC  0101               	movlb	1	; () banked
 13627  0011CE  6FBD               	movwf	_actualScreen& (0+255),b
 13628  0011D0  0012               	return	
 13629  0011D2                     l11373:
 13630                           
 13631                           ;DisplayProtocol.h: 295: else
 13632                           ;DisplayProtocol.h: 296: actualScreen = 7;
 13633  0011D2  0E07               	movlw	7
 13634  0011D4  0101               	movlb	1	; () banked
 13635  0011D6  6FBD               	movwf	_actualScreen& (0+255),b
 13636                           
 13637                           ; BSR set to: 1
 13638                           ;DisplayProtocol.h: 297: }
 13639                           ;DisplayProtocol.h: 298: }else if(actualScreen == 4) {
 13640                           
 13641                           ; BSR set to: 1
 13642  0011D8  0012               	return	
 13643  0011DA                     l11375:
 13644                           
 13645                           ; BSR set to: 1
 13646  0011DA  0E04               	movlw	4
 13647  0011DC  0101               	movlb	1	; () banked
 13648  0011DE  19BD               	xorwf	_actualScreen& (0+255),w,b
 13649  0011E0  B4D8               	btfsc	status,2,c
 13650  0011E2  D038               	goto	l11399
 13651  0011E4  D046               	goto	l11401
 13652  0011E6                     l725:
 13653                           
 13654                           ; BSR set to: 1
 13655                           ;DisplayProtocol.h: 301: tempLastScreen = actualScreen;
 13656  0011E6  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 13657                           
 13658                           ; BSR set to: 1
 13659                           ;DisplayProtocol.h: 302: if(processStarted) {
 13660  0011EA  0100               	movlb	0	; () banked
 13661  0011EC  51C0               	movf	_processStarted& (0+255),w,b
 13662  0011EE  B4D8               	btfsc	status,2,c
 13663  0011F0  D007               	goto	l11383
 13664                           
 13665                           ; BSR set to: 0
 13666                           ;DisplayProtocol.h: 303: actualScreen = 3;
 13667  0011F2  0E03               	movlw	3
 13668  0011F4  0101               	movlb	1	; () banked
 13669  0011F6  6FBD               	movwf	_actualScreen& (0+255),b
 13670                           
 13671                           ;DisplayProtocol.h: 304: selSN = 0;
 13672  0011F8  0E00               	movlw	0
 13673  0011FA  0101               	movlb	1	; () banked
 13674  0011FC  6FBA               	movwf	_selSN& (0+255),b
 13675                           
 13676                           ;DisplayProtocol.h: 305: }else {
 13677  0011FE  0012               	return	
 13678  001200                     l11383:
 13679                           
 13680                           ;DisplayProtocol.h: 306: actualScreen = 2;
 13681  001200  0E02               	movlw	2
 13682  001202  0101               	movlb	1	; () banked
 13683  001204  6FBD               	movwf	_actualScreen& (0+255),b
 13684                           
 13685                           ;DisplayProtocol.h: 307: selSN = 1;
 13686  001206  0E01               	movlw	1
 13687  001208  0101               	movlb	1	; () banked
 13688  00120A  6FBA               	movwf	_selSN& (0+255),b
 13689                           
 13690                           ; BSR set to: 1
 13691                           ;DisplayProtocol.h: 308: }
 13692                           ;DisplayProtocol.h: 309: break;
 13693  00120C  0012               	return	
 13694  00120E                     l729:
 13695                           
 13696                           ; BSR set to: 1
 13697                           ;DisplayProtocol.h: 311: chanValf = kgXcorte;
 13698  00120E  C198  F1B1         	movff	_kgXcorte,_chanValf
 13699  001212  C199  F1B2         	movff	_kgXcorte+1,_chanValf+1
 13700  001216  C19A  F1B3         	movff	_kgXcorte+2,_chanValf+2
 13701                           
 13702                           ; BSR set to: 1
 13703                           ;DisplayProtocol.h: 312: desintegrator();
 13704  00121A  ECFC  F018         	call	_desintegrator	;wreg free
 13705                           
 13706                           ;DisplayProtocol.h: 313: actualScreen = 5;
 13707  00121E  0E05               	movlw	5
 13708  001220  0101               	movlb	1	; () banked
 13709  001222  6FBD               	movwf	_actualScreen& (0+255),b
 13710                           
 13711                           ;DisplayProtocol.h: 314: break;
 13712  001224  0012               	return	
 13713  001226                     l730:
 13714                           
 13715                           ; BSR set to: 1
 13716                           ;DisplayProtocol.h: 316: tempLastScreen = actualScreen;
 13717  001226  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 13718                           
 13719                           ;DisplayProtocol.h: 317: chanVals = numCortes;
 13720  00122A  C0D2  F1B6         	movff	_numCortes,_chanVals
 13721  00122E  C0D3  F1B7         	movff	_numCortes+1,_chanVals+1
 13722                           
 13723                           ; BSR set to: 1
 13724                           ;DisplayProtocol.h: 318: actualScreen = 5;
 13725  001232  0E05               	movlw	5
 13726  001234  0101               	movlb	1	; () banked
 13727  001236  6FBD               	movwf	_actualScreen& (0+255),b
 13728                           
 13729                           ;DisplayProtocol.h: 319: break;
 13730  001238  0012               	return	
 13731  00123A                     l11391:
 13732                           
 13733                           ; BSR set to: 1
 13734                           ;DisplayProtocol.h: 321: if(!processStarted) {
 13735  00123A  0100               	movlb	0	; () banked
 13736  00123C  51C0               	movf	_processStarted& (0+255),w,b
 13737  00123E  A4D8               	btfss	status,2,c
 13738  001240  0012               	return	
 13739                           
 13740                           ; BSR set to: 0
 13741                           ;DisplayProtocol.h: 322: tempLastScreen = actualScreen;
 13742  001242  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 13743                           
 13744                           ; BSR set to: 0
 13745                           ;DisplayProtocol.h: 323: selSN = 1;
 13746  001246  0E01               	movlw	1
 13747  001248  0101               	movlb	1	; () banked
 13748  00124A  6FBA               	movwf	_selSN& (0+255),b
 13749                           
 13750                           ;DisplayProtocol.h: 324: actualScreen = 11;
 13751  00124C  0E0B               	movlw	11
 13752  00124E  0101               	movlb	1	; () banked
 13753  001250  6FBD               	movwf	_actualScreen& (0+255),b
 13754                           
 13755                           ; BSR set to: 1
 13756                           ;DisplayProtocol.h: 327: }
 13757                           ;DisplayProtocol.h: 328: }
 13758                           
 13759                           ; BSR set to: 1
 13760                           ;DisplayProtocol.h: 325: }
 13761                           ;DisplayProtocol.h: 326: break;
 13762  001252  0012               	return	
 13763  001254                     l11399:
 13764                           
 13765                           ; BSR set to: 1
 13766  001254  0101               	movlb	1	; () banked
 13767  001256  51BC               	movf	_menuSection& (0+255),w,b
 13768                           
 13769                           ; Switch size 1, requested type "space"
 13770                           ; Number of cases is 4, Range of values is 0 to 3
 13771                           ; switch strategies available:
 13772                           ; Name         Instructions Cycles
 13773                           ; simple_byte           13     7 (average)
 13774                           ;	Chosen strategy is simple_byte
 13775  001258  0A00               	xorlw	0	; case 0
 13776  00125A  B4D8               	btfsc	status,2,c
 13777  00125C  D7C4               	goto	l725
 13778  00125E  0A01               	xorlw	1	; case 1
 13779  001260  B4D8               	btfsc	status,2,c
 13780  001262  D7D5               	goto	l729
 13781  001264  0A03               	xorlw	3	; case 2
 13782  001266  B4D8               	btfsc	status,2,c
 13783  001268  D7DE               	goto	l730
 13784  00126A  0A01               	xorlw	1	; case 3
 13785  00126C  A4D8               	btfss	status,2,c
 13786                           
 13787                           ; BSR set to: 1
 13788                           ;DisplayProtocol.h: 329: }else if(actualScreen == 7)
 13789  00126E  0012               	return	
 13790  001270  D7E4               	goto	l11391
 13791  001272                     l11401:
 13792                           
 13793                           ; BSR set to: 1
 13794  001272  0E07               	movlw	7
 13795  001274  0101               	movlb	1	; () banked
 13796  001276  19BD               	xorwf	_actualScreen& (0+255),w,b
 13797  001278  A4D8               	btfss	status,2,c
 13798  00127A  D004               	goto	l11405
 13799                           
 13800                           ; BSR set to: 1
 13801                           ;DisplayProtocol.h: 330: actualScreen = 1;
 13802  00127C  0E01               	movlw	1
 13803  00127E  0101               	movlb	1	; () banked
 13804  001280  6FBD               	movwf	_actualScreen& (0+255),b
 13805  001282  0012               	return	
 13806  001284                     l11405:
 13807                           
 13808                           ; BSR set to: 1
 13809                           ;DisplayProtocol.h: 331: else if(actualScreen == 6) {
 13810  001284  0E06               	movlw	6
 13811  001286  0101               	movlb	1	; () banked
 13812  001288  19BD               	xorwf	_actualScreen& (0+255),w,b
 13813  00128A  B4D8               	btfsc	status,2,c
 13814  00128C  0012               	return	
 13815                           
 13816                           ; BSR set to: 1
 13817                           
 13818                           ; BSR set to: 1
 13819                           
 13820                           ; BSR set to: 1
 13821                           ;DisplayProtocol.h: 333: }else if(actualScreen == 5) {
 13822  00128E  0E05               	movlw	5
 13823  001290  0101               	movlb	1	; () banked
 13824  001292  19BD               	xorwf	_actualScreen& (0+255),w,b
 13825  001294  A4D8               	btfss	status,2,c
 13826  001296  D018               	goto	l11421
 13827                           
 13828                           ; BSR set to: 1
 13829                           ;DisplayProtocol.h: 334: if(menuSection != 2) {
 13830  001298  0E02               	movlw	2
 13831  00129A  0101               	movlb	1	; () banked
 13832  00129C  19BC               	xorwf	_menuSection& (0+255),w,b
 13833  00129E  B4D8               	btfsc	status,2,c
 13834  0012A0  D009               	goto	l11419
 13835                           
 13836                           ; BSR set to: 1
 13837                           ;DisplayProtocol.h: 335: chanValSection--;
 13838  0012A2  0101               	movlb	1	; () banked
 13839  0012A4  079C               	decf	_chanValSection& (0+255),f,b
 13840                           
 13841                           ; BSR set to: 1
 13842                           ;DisplayProtocol.h: 336: if(chanValSection < 0)
 13843  0012A6  0101               	movlb	1	; () banked
 13844  0012A8  AF9C               	btfss	_chanValSection& (0+255),7,b
 13845  0012AA  0012               	return	
 13846                           
 13847                           ; BSR set to: 1
 13848                           ;DisplayProtocol.h: 337: chanValSection = 5;
 13849  0012AC  0E05               	movlw	5
 13850  0012AE  0101               	movlb	1	; () banked
 13851  0012B0  6F9C               	movwf	_chanValSection& (0+255),b
 13852                           
 13853                           ; BSR set to: 1
 13854                           ;DisplayProtocol.h: 338: }else
 13855  0012B2  0012               	return	
 13856  0012B4                     l11419:
 13857                           
 13858                           ; BSR set to: 1
 13859                           ;DisplayProtocol.h: 339: confirmEdition(!processStarted);
 13860  0012B4  0100               	movlb	0	; () banked
 13861  0012B6  51C0               	movf	_processStarted& (0+255),w,b
 13862  0012B8  A4D8               	btfss	status,2,c
 13863  0012BA  D002               	goto	u16990
 13864  0012BC  0E01               	movlw	1
 13865  0012BE  D001               	goto	u17000
 13866  0012C0                     u16990:
 13867  0012C0  0E00               	movlw	0
 13868  0012C2                     u17000:
 13869  0012C2  ECA1  F02C         	call	_confirmEdition
 13870                           
 13871                           ;DisplayProtocol.h: 340: }else if(actualScreen == 2) {
 13872  0012C6  0012               	return	
 13873  0012C8                     l11421:
 13874  0012C8  0E02               	movlw	2
 13875  0012CA  0101               	movlb	1	; () banked
 13876  0012CC  19BD               	xorwf	_actualScreen& (0+255),w,b
 13877  0012CE  A4D8               	btfss	status,2,c
 13878  0012D0  D018               	goto	l11431
 13879                           
 13880                           ; BSR set to: 1
 13881                           ;DisplayProtocol.h: 341: initProtocoll(!selSN);
 13882  0012D2  0101               	movlb	1	; () banked
 13883  0012D4  51BA               	movf	_selSN& (0+255),w,b
 13884  0012D6  A4D8               	btfss	status,2,c
 13885  0012D8  D002               	goto	u17020
 13886  0012DA  0E01               	movlw	1
 13887  0012DC  D001               	goto	u17030
 13888  0012DE                     u17020:
 13889  0012DE  0E00               	movlw	0
 13890  0012E0                     u17030:
 13891  0012E0  EC30  F037         	call	_initProtocoll
 13892                           
 13893                           ;DisplayProtocol.h: 342: if(!selSN) {
 13894  0012E4  0101               	movlb	1	; () banked
 13895  0012E6  51BA               	movf	_selSN& (0+255),w,b
 13896  0012E8  A4D8               	btfss	status,2,c
 13897  0012EA  D008               	goto	l744
 13898                           
 13899                           ; BSR set to: 1
 13900                           ;DisplayProtocol.h: 343: actualScreen = 14;
 13901  0012EC  0E0E               	movlw	14
 13902  0012EE  0101               	movlb	1	; () banked
 13903  0012F0  6FBD               	movwf	_actualScreen& (0+255),b
 13904                           
 13905                           ;DisplayProtocol.h: 344: ready2Cut = 1;
 13906  0012F2  0E01               	movlw	1
 13907  0012F4  0100               	movlb	0	; () banked
 13908  0012F6  6FBF               	movwf	_ready2Cut& (0+255),b
 13909                           
 13910                           ; BSR set to: 0
 13911                           ;DisplayProtocol.h: 345: LATCbits.LATC4 = 1;
 13912  0012F8  888B               	bsf	3979,4,c	;volatile
 13913                           
 13914                           ;DisplayProtocol.h: 347: }else
 13915  0012FA  0012               	return	
 13916  0012FC                     l744:
 13917                           
 13918                           ; BSR set to: 1
 13919                           ;DisplayProtocol.h: 348: actualScreen = tempLastScreen;
 13920  0012FC  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 13921                           
 13922                           ; BSR set to: 1
 13923                           ;DisplayProtocol.h: 349: }else if(actualScreen == 14) {
 13924  001300  0012               	return	
 13925  001302                     l11431:
 13926                           
 13927                           ; BSR set to: 1
 13928  001302  0E0E               	movlw	14
 13929  001304  0101               	movlb	1	; () banked
 13930  001306  19BD               	xorwf	_actualScreen& (0+255),w,b
 13931  001308  A4D8               	btfss	status,2,c
 13932  00130A  D00A               	goto	l11437
 13933                           
 13934                           ; BSR set to: 1
 13935                           ;DisplayProtocol.h: 351: setPWM2duty(400);
 13936  00130C  0E01               	movlw	1
 13937  00130E  0101               	movlb	1	; () banked
 13938  001310  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 13939  001312  0E90               	movlw	144
 13940  001314  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 13941  001316  EC40  F02F         	call	_setPWM2duty	;wreg free
 13942                           
 13943                           ;DisplayProtocol.h: 352: actualScreen = tempLastScreen;
 13944  00131A  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 13945                           
 13946                           ;DisplayProtocol.h: 353: }else if(actualScreen == 3) {
 13947  00131E  0012               	return	
 13948  001320                     l11437:
 13949  001320  0E03               	movlw	3
 13950  001322  0101               	movlb	1	; () banked
 13951  001324  19BD               	xorwf	_actualScreen& (0+255),w,b
 13952  001326  A4D8               	btfss	status,2,c
 13953  001328  D044               	goto	l11459
 13954                           
 13955                           ; BSR set to: 1
 13956                           ;DisplayProtocol.h: 354: actualScreen = tempLastScreen;
 13957  00132A  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 13958                           
 13959                           ; BSR set to: 1
 13960                           ;DisplayProtocol.h: 355: if(!selSN) {
 13961  00132E  0101               	movlb	1	; () banked
 13962  001330  51BA               	movf	_selSN& (0+255),w,b
 13963  001332  A4D8               	btfss	status,2,c
 13964  001334  0012               	return	
 13965                           
 13966                           ; BSR set to: 1
 13967                           ;DisplayProtocol.h: 356: processState = 0;
 13968  001336  0E00               	movlw	0
 13969  001338  0100               	movlb	0	; () banked
 13970  00133A  6FB3               	movwf	(_processState+1)& (0+255),b
 13971  00133C  0E00               	movlw	0
 13972  00133E  6FB2               	movwf	_processState& (0+255),b
 13973                           
 13974                           ; BSR set to: 0
 13975                           ;DisplayProtocol.h: 357: stopProcess();
 13976  001340  EC39  F039         	call	_stopProcess	;wreg free
 13977                           
 13978                           ;DisplayProtocol.h: 358: if(tempLastScreen == 14)
 13979  001344  0E0E               	movlw	14
 13980  001346  0100               	movlb	0	; () banked
 13981  001348  19BA               	xorwf	_tempLastScreen& (0+255),w,b
 13982  00134A  A4D8               	btfss	status,2,c
 13983  00134C  D003               	goto	l751
 13984                           
 13985                           ; BSR set to: 0
 13986                           ;DisplayProtocol.h: 359: actualScreen = 0;
 13987  00134E  0E00               	movlw	0
 13988  001350  0101               	movlb	1	; () banked
 13989  001352  6FBD               	movwf	_actualScreen& (0+255),b
 13990  001354                     l751:
 13991                           
 13992                           ;DisplayProtocol.h: 360: if(calibMode) {
 13993  001354  0100               	movlb	0	; () banked
 13994  001356  51BE               	movf	_calibMode& (0+255),w,b
 13995  001358  B4D8               	btfsc	status,2,c
 13996  00135A  D027               	goto	l752
 13997                           
 13998                           ; BSR set to: 0
 13999                           ;DisplayProtocol.h: 361: numCortes = tempNumCortes;
 14000  00135C  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 14001  001360  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 14002                           
 14003                           ;DisplayProtocol.h: 362: tiXcorte = temptiXcorte;
 14004  001364  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 14005  001368  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 14006  00136C  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 14007                           
 14008                           ; BSR set to: 0
 14009                           ;DisplayProtocol.h: 363: timsXcorte = (float)tiXcorte * 1000;
 14010  001370  C195  F114         	movff	_tiXcorte,___ftmul@f1
 14011  001374  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 14012  001378  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 14013  00137C  0E00               	movlw	0
 14014  00137E  0101               	movlb	1	; () banked
 14015  001380  6F17               	movwf	___ftmul@f2& (0+255),b
 14016  001382  0E7A               	movlw	122
 14017  001384  0101               	movlb	1	; () banked
 14018  001386  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 14019  001388  0E44               	movlw	68
 14020  00138A  0101               	movlb	1	; () banked
 14021  00138C  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 14022  00138E  EC35  F01C         	call	___ftmul	;wreg free
 14023  001392  C114  F055         	movff	?___ftmul,_timsXcorte
 14024  001396  C115  F056         	movff	?___ftmul+1,_timsXcorte+1
 14025  00139A  C116  F057         	movff	?___ftmul+2,_timsXcorte+2
 14026                           
 14027                           ;DisplayProtocol.h: 364: calibMode = 0;
 14028  00139E  0E00               	movlw	0
 14029  0013A0  0100               	movlb	0	; () banked
 14030  0013A2  6FBE               	movwf	_calibMode& (0+255),b
 14031                           
 14032                           ; BSR set to: 0
 14033                           ;DisplayProtocol.h: 365: actualScreen = 4;
 14034  0013A4  0E04               	movlw	4
 14035  0013A6  0101               	movlb	1	; () banked
 14036  0013A8  6FBD               	movwf	_actualScreen& (0+255),b
 14037  0013AA                     l752:
 14038                           
 14039                           ;DisplayProtocol.h: 366: }
 14040                           ;DisplayProtocol.h: 367: initProtocoll(1);
 14041  0013AA  0E01               	movlw	1
 14042  0013AC  EC30  F037         	call	_initProtocoll
 14043                           
 14044                           ;DisplayProtocol.h: 368: }
 14045                           ;DisplayProtocol.h: 369: }else if(actualScreen == 10) {
 14046  0013B0  0012               	return	
 14047  0013B2                     l11459:
 14048  0013B2  0E0A               	movlw	10
 14049  0013B4  0101               	movlb	1	; () banked
 14050  0013B6  19BD               	xorwf	_actualScreen& (0+255),w,b
 14051  0013B8  A4D8               	btfss	status,2,c
 14052  0013BA  D00B               	goto	l11465
 14053                           
 14054                           ; BSR set to: 1
 14055                           ;DisplayProtocol.h: 370: if(!selSN)
 14056  0013BC  0101               	movlb	1	; () banked
 14057  0013BE  51BA               	movf	_selSN& (0+255),w,b
 14058  0013C0  A4D8               	btfss	status,2,c
 14059  0013C2  D004               	goto	l755
 14060                           
 14061                           ; BSR set to: 1
 14062                           ;DisplayProtocol.h: 371: confirmEdition(1);
 14063  0013C4  0E01               	movlw	1
 14064  0013C6  ECA1  F02C         	call	_confirmEdition
 14065  0013CA  0012               	return	
 14066  0013CC                     l755:
 14067                           
 14068                           ; BSR set to: 1
 14069                           ;DisplayProtocol.h: 372: else
 14070                           ;DisplayProtocol.h: 373: actualScreen = tempLastScreen;
 14071  0013CC  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 14072                           
 14073                           ; BSR set to: 1
 14074                           ;DisplayProtocol.h: 374: }else if(actualScreen == 8)
 14075  0013D0  0012               	return	
 14076  0013D2                     l11465:
 14077                           
 14078                           ; BSR set to: 1
 14079  0013D2  0E08               	movlw	8
 14080  0013D4  0101               	movlb	1	; () banked
 14081  0013D6  19BD               	xorwf	_actualScreen& (0+255),w,b
 14082  0013D8  A4D8               	btfss	status,2,c
 14083  0013DA  D004               	goto	l11469
 14084                           
 14085                           ; BSR set to: 1
 14086                           ;DisplayProtocol.h: 375: actualScreen = 4;
 14087  0013DC  0E04               	movlw	4
 14088  0013DE  0101               	movlb	1	; () banked
 14089  0013E0  6FBD               	movwf	_actualScreen& (0+255),b
 14090  0013E2  0012               	return	
 14091  0013E4                     l11469:
 14092                           
 14093                           ; BSR set to: 1
 14094                           ;DisplayProtocol.h: 376: else if(actualScreen == 9)
 14095  0013E4  0E09               	movlw	9
 14096  0013E6  0101               	movlb	1	; () banked
 14097  0013E8  19BD               	xorwf	_actualScreen& (0+255),w,b
 14098  0013EA  A4D8               	btfss	status,2,c
 14099  0013EC  D004               	goto	l11473
 14100                           
 14101                           ; BSR set to: 1
 14102                           ;DisplayProtocol.h: 377: actualScreen = 0;
 14103  0013EE  0E00               	movlw	0
 14104  0013F0  0101               	movlb	1	; () banked
 14105  0013F2  6FBD               	movwf	_actualScreen& (0+255),b
 14106  0013F4  0012               	return	
 14107  0013F6                     l11473:
 14108                           
 14109                           ; BSR set to: 1
 14110                           ;DisplayProtocol.h: 378: else if(actualScreen == 11) {
 14111  0013F6  0E0B               	movlw	11
 14112  0013F8  0101               	movlb	1	; () banked
 14113  0013FA  19BD               	xorwf	_actualScreen& (0+255),w,b
 14114  0013FC  A4D8               	btfss	status,2,c
 14115  0013FE  D05D               	goto	l11513
 14116                           
 14117                           ; BSR set to: 1
 14118                           ;DisplayProtocol.h: 379: initProtocoll(!selSN);
 14119  001400  0101               	movlb	1	; () banked
 14120  001402  51BA               	movf	_selSN& (0+255),w,b
 14121  001404  A4D8               	btfss	status,2,c
 14122  001406  D002               	goto	u17150
 14123  001408  0E01               	movlw	1
 14124  00140A  D001               	goto	u17160
 14125  00140C                     u17150:
 14126  00140C  0E00               	movlw	0
 14127  00140E                     u17160:
 14128  00140E  EC30  F037         	call	_initProtocoll
 14129                           
 14130                           ;DisplayProtocol.h: 380: if(!selSN) {
 14131  001412  0101               	movlb	1	; () banked
 14132  001414  51BA               	movf	_selSN& (0+255),w,b
 14133  001416  A4D8               	btfss	status,2,c
 14134  001418  D04C               	goto	l11511
 14135                           
 14136                           ; BSR set to: 1
 14137                           ;DisplayProtocol.h: 381: actualScreen = 6;
 14138  00141A  0E06               	movlw	6
 14139  00141C  0101               	movlb	1	; () banked
 14140  00141E  6FBD               	movwf	_actualScreen& (0+255),b
 14141                           
 14142                           ; BSR set to: 1
 14143                           ;DisplayProtocol.h: 382: tempLastScreen = actualScreen;
 14144  001420  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 14145                           
 14146                           ;DisplayProtocol.h: 383: chanValf = 0;
 14147  001424  0E00               	movlw	0
 14148  001426  0101               	movlb	1	; () banked
 14149  001428  6FB1               	movwf	_chanValf& (0+255),b
 14150  00142A  0E00               	movlw	0
 14151  00142C  0101               	movlb	1	; () banked
 14152  00142E  6FB2               	movwf	(_chanValf+1)& (0+255),b
 14153  001430  0E00               	movlw	0
 14154  001432  0101               	movlb	1	; () banked
 14155  001434  6FB3               	movwf	(_chanValf+2)& (0+255),b
 14156                           
 14157                           ; BSR set to: 1
 14158                           ;DisplayProtocol.h: 384: desintegrator();
 14159  001436  ECFC  F018         	call	_desintegrator	;wreg free
 14160                           
 14161                           ;DisplayProtocol.h: 385: temptiXcorte = tiXcorte;
 14162  00143A  C195  F0CD         	movff	_tiXcorte,_temptiXcorte
 14163  00143E  C196  F0CE         	movff	_tiXcorte+1,_temptiXcorte+1
 14164  001442  C197  F0CF         	movff	_tiXcorte+2,_temptiXcorte+2
 14165                           
 14166                           ;DisplayProtocol.h: 386: tiXcorte = 5.0f;
 14167  001446  0E00               	movlw	0
 14168  001448  0101               	movlb	1	; () banked
 14169  00144A  6F95               	movwf	_tiXcorte& (0+255),b
 14170  00144C  0EA0               	movlw	160
 14171  00144E  0101               	movlb	1	; () banked
 14172  001450  6F96               	movwf	(_tiXcorte+1)& (0+255),b
 14173  001452  0E40               	movlw	64
 14174  001454  0101               	movlb	1	; () banked
 14175  001456  6F97               	movwf	(_tiXcorte+2)& (0+255),b
 14176                           
 14177                           ; BSR set to: 1
 14178                           ;DisplayProtocol.h: 387: timsXcorte = 5000.0f;
 14179  001458  0E40               	movlw	64
 14180  00145A  6E55               	movwf	_timsXcorte,c
 14181  00145C  0E9C               	movlw	156
 14182  00145E  6E56               	movwf	_timsXcorte+1,c
 14183  001460  0E45               	movlw	69
 14184  001462  6E57               	movwf	_timsXcorte+2,c
 14185                           
 14186                           ; BSR set to: 1
 14187                           ;DisplayProtocol.h: 388: tempNumCortes = numCortes;
 14188  001464  C0D2  F0D0         	movff	_numCortes,_tempNumCortes
 14189  001468  C0D3  F0D1         	movff	_numCortes+1,_tempNumCortes+1
 14190                           
 14191                           ; BSR set to: 1
 14192                           ;DisplayProtocol.h: 389: numCortes = 1;
 14193  00146C  0E00               	movlw	0
 14194  00146E  0100               	movlb	0	; () banked
 14195  001470  6FD3               	movwf	(_numCortes+1)& (0+255),b
 14196  001472  0E01               	movlw	1
 14197  001474  6FD2               	movwf	_numCortes& (0+255),b
 14198                           
 14199                           ; BSR set to: 0
 14200                           ;DisplayProtocol.h: 390: processState = 0;
 14201  001476  0E00               	movlw	0
 14202  001478  0100               	movlb	0	; () banked
 14203  00147A  6FB3               	movwf	(_processState+1)& (0+255),b
 14204  00147C  0E00               	movlw	0
 14205  00147E  6FB2               	movwf	_processState& (0+255),b
 14206                           
 14207                           ; BSR set to: 0
 14208                           ;DisplayProtocol.h: 391: processTimer = 0;
 14209  001480  0E00               	movlw	0
 14210  001482  6E3B               	movwf	_processTimer,c
 14211  001484  0E00               	movlw	0
 14212  001486  6E3C               	movwf	_processTimer+1,c
 14213  001488  0E00               	movlw	0
 14214  00148A  6E3D               	movwf	_processTimer+2,c
 14215  00148C  0E00               	movlw	0
 14216  00148E  6E3E               	movwf	_processTimer+3,c
 14217                           
 14218                           ; BSR set to: 0
 14219                           ;DisplayProtocol.h: 392: calibLevel = 0;
 14220  001490  0E00               	movlw	0
 14221  001492  0101               	movlb	1	; () banked
 14222  001494  6FB8               	movwf	_calibLevel& (0+255),b
 14223                           
 14224                           ; BSR set to: 1
 14225                           ;DisplayProtocol.h: 393: initProtocoll(1);
 14226  001496  0E01               	movlw	1
 14227  001498  EC30  F037         	call	_initProtocoll
 14228                           
 14229                           ;DisplayProtocol.h: 394: LATCbits.LATC4 = 1;
 14230  00149C  888B               	bsf	3979,4,c	;volatile
 14231                           
 14232                           ;DisplayProtocol.h: 395: ready2Cut = 1;
 14233  00149E  0E01               	movlw	1
 14234  0014A0  0100               	movlb	0	; () banked
 14235  0014A2  6FBF               	movwf	_ready2Cut& (0+255),b
 14236                           
 14237                           ; BSR set to: 0
 14238                           ;DisplayProtocol.h: 396: actualScreen = 14;
 14239  0014A4  0E0E               	movlw	14
 14240  0014A6  0101               	movlb	1	; () banked
 14241  0014A8  6FBD               	movwf	_actualScreen& (0+255),b
 14242                           
 14243                           ; BSR set to: 1
 14244                           ;DisplayProtocol.h: 397: calibMode = 1;
 14245  0014AA  0E01               	movlw	1
 14246  0014AC  0100               	movlb	0	; () banked
 14247  0014AE  6FBE               	movwf	_calibMode& (0+255),b
 14248                           
 14249                           ;DisplayProtocol.h: 398: }else
 14250  0014B0  0012               	return	
 14251  0014B2                     l11511:
 14252                           
 14253                           ;DisplayProtocol.h: 399: actualScreen = 4;
 14254  0014B2  0E04               	movlw	4
 14255  0014B4  0101               	movlb	1	; () banked
 14256  0014B6  6FBD               	movwf	_actualScreen& (0+255),b
 14257                           
 14258                           ; BSR set to: 1
 14259                           ;DisplayProtocol.h: 400: }else if(actualScreen == 12) {
 14260  0014B8  0012               	return	
 14261  0014BA                     l11513:
 14262                           
 14263                           ; BSR set to: 1
 14264  0014BA  0E0C               	movlw	12
 14265  0014BC  0101               	movlb	1	; () banked
 14266  0014BE  19BD               	xorwf	_actualScreen& (0+255),w,b
 14267  0014C0  A4D8               	btfss	status,2,c
 14268  0014C2  D009               	goto	l11521
 14269                           
 14270                           ; BSR set to: 1
 14271                           ;DisplayProtocol.h: 401: chanValSection--;
 14272  0014C4  0101               	movlb	1	; () banked
 14273  0014C6  079C               	decf	_chanValSection& (0+255),f,b
 14274                           
 14275                           ; BSR set to: 1
 14276                           ;DisplayProtocol.h: 402: if(chanValSection < 0)
 14277  0014C8  0101               	movlb	1	; () banked
 14278  0014CA  AF9C               	btfss	_chanValSection& (0+255),7,b
 14279  0014CC  0012               	return	
 14280                           
 14281                           ; BSR set to: 1
 14282                           ;DisplayProtocol.h: 403: chanValSection = 5;
 14283  0014CE  0E05               	movlw	5
 14284  0014D0  0101               	movlb	1	; () banked
 14285  0014D2  6F9C               	movwf	_chanValSection& (0+255),b
 14286                           
 14287                           ; BSR set to: 1
 14288                           ;DisplayProtocol.h: 404: }else if(actualScreen == 15) {
 14289  0014D4  0012               	return	
 14290  0014D6                     l11521:
 14291                           
 14292                           ; BSR set to: 1
 14293  0014D6  0E0F               	movlw	15
 14294  0014D8  0101               	movlb	1	; () banked
 14295  0014DA  19BD               	xorwf	_actualScreen& (0+255),w,b
 14296  0014DC  A4D8               	btfss	status,2,c
 14297  0014DE  D039               	goto	l11537
 14298                           
 14299                           ; BSR set to: 1
 14300                           ;DisplayProtocol.h: 405: if(!selSN) {
 14301  0014E0  0101               	movlb	1	; () banked
 14302  0014E2  51BA               	movf	_selSN& (0+255),w,b
 14303  0014E4  A4D8               	btfss	status,2,c
 14304  0014E6  D02F               	goto	l770
 14305                           
 14306                           ; BSR set to: 1
 14307                           ;DisplayProtocol.h: 406: processState = 0;
 14308  0014E8  0E00               	movlw	0
 14309  0014EA  0100               	movlb	0	; () banked
 14310  0014EC  6FB3               	movwf	(_processState+1)& (0+255),b
 14311  0014EE  0E00               	movlw	0
 14312  0014F0  6FB2               	movwf	_processState& (0+255),b
 14313                           
 14314                           ; BSR set to: 0
 14315                           ;DisplayProtocol.h: 407: stopProcess();
 14316  0014F2  EC39  F039         	call	_stopProcess	;wreg free
 14317                           
 14318                           ;DisplayProtocol.h: 408: numCortes = tempNumCortes;
 14319  0014F6  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 14320  0014FA  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 14321                           
 14322                           ;DisplayProtocol.h: 409: tiXcorte = temptiXcorte;
 14323  0014FE  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 14324  001502  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 14325  001506  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 14326                           
 14327                           ;DisplayProtocol.h: 410: timsXcorte = (float)tiXcorte * 1000;
 14328  00150A  C195  F114         	movff	_tiXcorte,___ftmul@f1
 14329  00150E  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 14330  001512  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 14331  001516  0E00               	movlw	0
 14332  001518  0101               	movlb	1	; () banked
 14333  00151A  6F17               	movwf	___ftmul@f2& (0+255),b
 14334  00151C  0E7A               	movlw	122
 14335  00151E  0101               	movlb	1	; () banked
 14336  001520  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 14337  001522  0E44               	movlw	68
 14338  001524  0101               	movlb	1	; () banked
 14339  001526  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 14340  001528  EC35  F01C         	call	___ftmul	;wreg free
 14341  00152C  C114  F055         	movff	?___ftmul,_timsXcorte
 14342  001530  C115  F056         	movff	?___ftmul+1,_timsXcorte+1
 14343  001534  C116  F057         	movff	?___ftmul+2,_timsXcorte+2
 14344                           
 14345                           ;DisplayProtocol.h: 411: calibMode = 0;
 14346  001538  0E00               	movlw	0
 14347  00153A  0100               	movlb	0	; () banked
 14348  00153C  6FBE               	movwf	_calibMode& (0+255),b
 14349                           
 14350                           ;DisplayProtocol.h: 412: actualScreen = 4;
 14351  00153E  0E04               	movlw	4
 14352  001540  0101               	movlb	1	; () banked
 14353  001542  6FBD               	movwf	_actualScreen& (0+255),b
 14354                           
 14355                           ;DisplayProtocol.h: 413: }else {
 14356  001544  0012               	return	
 14357  001546                     l770:
 14358                           
 14359                           ; BSR set to: 1
 14360                           ;DisplayProtocol.h: 414: actualScreen = tempLastScreen;
 14361  001546  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 14362                           
 14363                           ; BSR set to: 1
 14364                           ;DisplayProtocol.h: 415: tempLastScreen = 6;
 14365  00154A  0E06               	movlw	6
 14366  00154C  0100               	movlb	0	; () banked
 14367  00154E  6FBA               	movwf	_tempLastScreen& (0+255),b
 14368                           
 14369                           ; BSR set to: 0
 14370                           ;DisplayProtocol.h: 416: }
 14371                           ;DisplayProtocol.h: 417: }else if(actualScreen == 13) {
 14372  001550  0012               	return	
 14373  001552                     l11537:
 14374  001552  0E0D               	movlw	13
 14375  001554  0101               	movlb	1	; () banked
 14376  001556  19BD               	xorwf	_actualScreen& (0+255),w,b
 14377  001558  A4D8               	btfss	status,2,c
 14378  00155A  0012               	return	
 14379                           
 14380                           ; BSR set to: 1
 14381                           ;DisplayProtocol.h: 418: initProtocoll(1);
 14382  00155C  0E01               	movlw	1
 14383  00155E  EC30  F037         	call	_initProtocoll
 14384                           
 14385                           ;DisplayProtocol.h: 419: actualScreen = tempLastScreen;
 14386  001562  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 14387  001566  0012               	return	
 14388  001568                     __end_of_pressENTER:
 14389                           	opt stack 0
 14390                           tblptru	equ	0xFF8
 14391                           tblptrh	equ	0xFF7
 14392                           tblptrl	equ	0xFF6
 14393                           tablat	equ	0xFF5
 14394                           prodh	equ	0xFF4
 14395                           prodl	equ	0xFF3
 14396                           intcon	equ	0xFF2
 14397                           postinc0	equ	0xFEE
 14398                           wreg	equ	0xFE8
 14399                           postdec1	equ	0xFE5
 14400                           fsr1l	equ	0xFE1
 14401                           indf2	equ	0xFDF
 14402                           postinc2	equ	0xFDE
 14403                           postdec2	equ	0xFDD
 14404                           fsr2h	equ	0xFDA
 14405                           fsr2l	equ	0xFD9
 14406                           status	equ	0xFD8
 14407                           
 14408 ;; *************** function _checkPass *****************
 14409 ;; Defined at:
 14410 ;;		line 14 in file "source/DisplayProtocol.h"
 14411 ;; Parameters:    Size  Location     Type
 14412 ;;		None
 14413 ;; Auto vars:     Size  Location     Type
 14414 ;;  i               2    5[BANK1 ] int 
 14415 ;;  passOK          1    4[BANK1 ] unsigned char 
 14416 ;; Return value:  Size  Location     Type
 14417 ;;                  1    wreg      unsigned char 
 14418 ;; Registers used:
 14419 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14420 ;; Tracked objects:
 14421 ;;		On entry : 0/0
 14422 ;;		On exit  : 0/0
 14423 ;;		Unchanged: 0/0
 14424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14425 ;;      Params:         0       0       0       0       0       0       0
 14426 ;;      Locals:         0       0       3       0       0       0       0
 14427 ;;      Temps:          0       0       4       0       0       0       0
 14428 ;;      Totals:         0       0       7       0       0       0       0
 14429 ;;Total ram usage:        7 bytes
 14430 ;; Hardware stack levels used:    1
 14431 ;; Hardware stack levels required when called:   12
 14432 ;; This function calls:
 14433 ;;		Nothing
 14434 ;; This function is called by:
 14435 ;;		_pressENTER
 14436 ;; This function uses a non-reentrant model
 14437 ;;
 14438                           
 14439                           	psect	text56
 14440  00627C                     __ptext56:
 14441                           	opt stack 0
 14442  00627C                     _checkPass:
 14443                           	opt stack 16
 14444                           
 14445                           ;DisplayProtocol.h: 15: int i;
 14446                           ;DisplayProtocol.h: 16: char passOK = 0;
 14447                           
 14448                           ;incstack = 0
 14449  00627C  0E00               	movlw	0
 14450  00627E  0101               	movlb	1	; () banked
 14451  006280  6F04               	movwf	checkPass@passOK& (0+255),b
 14452                           
 14453                           ;DisplayProtocol.h: 17: for (i = 0; i < 4; i++) {
 14454  006282  0E00               	movlw	0
 14455  006284  0101               	movlb	1	; () banked
 14456  006286  6F06               	movwf	(checkPass@i+1)& (0+255),b
 14457  006288  0E00               	movlw	0
 14458  00628A  6F05               	movwf	checkPass@i& (0+255),b
 14459  00628C                     l10817:
 14460                           
 14461                           ; BSR set to: 1
 14462  00628C  0101               	movlb	1	; () banked
 14463  00628E  BF06               	btfsc	(checkPass@i+1)& (0+255),7,b
 14464  006290  D008               	goto	l10821
 14465  006292  0101               	movlb	1	; () banked
 14466  006294  5106               	movf	(checkPass@i+1)& (0+255),w,b
 14467  006296  E136               	bnz	l10831
 14468  006298  0E04               	movlw	4
 14469  00629A  0101               	movlb	1	; () banked
 14470  00629C  5D05               	subwf	checkPass@i& (0+255),w,b
 14471  00629E  B0D8               	btfsc	status,0,c
 14472  0062A0  D031               	goto	l10831
 14473  0062A2                     l10821:
 14474                           
 14475                           ; BSR set to: 1
 14476                           ;DisplayProtocol.h: 18: if (introducido[i] == contra[i])
 14477  0062A2  0EAB               	movlw	low _contra
 14478  0062A4  0101               	movlb	1	; () banked
 14479  0062A6  2505               	addwf	checkPass@i& (0+255),w,b
 14480  0062A8  6ED9               	movwf	fsr2l,c
 14481  0062AA  0E00               	movlw	high _contra
 14482  0062AC  0101               	movlb	1	; () banked
 14483  0062AE  2106               	addwfc	(checkPass@i+1)& (0+255),w,b
 14484  0062B0  6EDA               	movwf	fsr2h,c
 14485  0062B2  50DF               	movf	indf2,w,c
 14486  0062B4  0101               	movlb	1	; () banked
 14487  0062B6  6F00               	movwf	??_checkPass& (0+255),b
 14488  0062B8  6B01               	clrf	(??_checkPass+1)& (0+255),b
 14489  0062BA  0EAD               	movlw	low _introducido
 14490  0062BC  0101               	movlb	1	; () banked
 14491  0062BE  2505               	addwf	checkPass@i& (0+255),w,b
 14492  0062C0  6ED9               	movwf	fsr2l,c
 14493  0062C2  0E01               	movlw	high _introducido
 14494  0062C4  0101               	movlb	1	; () banked
 14495  0062C6  2106               	addwfc	(checkPass@i+1)& (0+255),w,b
 14496  0062C8  6EDA               	movwf	fsr2h,c
 14497  0062CA  50DF               	movf	indf2,w,c
 14498  0062CC  0101               	movlb	1	; () banked
 14499  0062CE  6F02               	movwf	(??_checkPass+2)& (0+255),b
 14500  0062D0  6B03               	clrf	(??_checkPass+3)& (0+255),b
 14501  0062D2  BF02               	btfsc	(??_checkPass+2)& (0+255),7,b
 14502  0062D4  0703               	decf	(??_checkPass+3)& (0+255),f,b
 14503  0062D6  0101               	movlb	1	; () banked
 14504  0062D8  5100               	movf	??_checkPass& (0+255),w,b
 14505  0062DA  0101               	movlb	1	; () banked
 14506  0062DC  1902               	xorwf	(??_checkPass+2)& (0+255),w,b
 14507  0062DE  E10A               	bnz	l10825
 14508  0062E0  0101               	movlb	1	; () banked
 14509  0062E2  5101               	movf	(??_checkPass+1)& (0+255),w,b
 14510  0062E4  0101               	movlb	1	; () banked
 14511  0062E6  1903               	xorwf	(??_checkPass+3)& (0+255),w,b
 14512  0062E8  A4D8               	btfss	status,2,c
 14513  0062EA  D004               	goto	l10825
 14514                           
 14515                           ; BSR set to: 1
 14516                           ;DisplayProtocol.h: 19: passOK = 1;
 14517  0062EC  0E01               	movlw	1
 14518  0062EE  0101               	movlb	1	; () banked
 14519  0062F0  6F04               	movwf	checkPass@passOK& (0+255),b
 14520  0062F2  D004               	goto	l10827
 14521  0062F4                     l10825:
 14522                           
 14523                           ; BSR set to: 1
 14524                           ;DisplayProtocol.h: 20: else {
 14525                           ;DisplayProtocol.h: 21: passOK = 0;
 14526  0062F4  0E00               	movlw	0
 14527  0062F6  0101               	movlb	1	; () banked
 14528  0062F8  6F04               	movwf	checkPass@passOK& (0+255),b
 14529                           
 14530                           ;DisplayProtocol.h: 22: break;
 14531  0062FA  D004               	goto	l10831
 14532  0062FC                     l10827:
 14533                           
 14534                           ; BSR set to: 1
 14535  0062FC  0101               	movlb	1	; () banked
 14536  0062FE  4B05               	infsnz	checkPass@i& (0+255),f,b
 14537  006300  2B06               	incf	(checkPass@i+1)& (0+255),f,b
 14538  006302  D7C4               	goto	l10817
 14539  006304                     l10831:
 14540                           
 14541                           ; BSR set to: 1
 14542                           ;DisplayProtocol.h: 23: }
 14543                           ;DisplayProtocol.h: 24: }
 14544                           ;DisplayProtocol.h: 25: return passOK;
 14545  006304  0101               	movlb	1	; () banked
 14546  006306  5104               	movf	checkPass@passOK& (0+255),w,b
 14547  006308  0012               	return	
 14548  00630A                     __end_of_checkPass:
 14549                           	opt stack 0
 14550                           tblptru	equ	0xFF8
 14551                           tblptrh	equ	0xFF7
 14552                           tblptrl	equ	0xFF6
 14553                           tablat	equ	0xFF5
 14554                           prodh	equ	0xFF4
 14555                           prodl	equ	0xFF3
 14556                           intcon	equ	0xFF2
 14557                           postinc0	equ	0xFEE
 14558                           wreg	equ	0xFE8
 14559                           postdec1	equ	0xFE5
 14560                           fsr1l	equ	0xFE1
 14561                           indf2	equ	0xFDF
 14562                           postinc2	equ	0xFDE
 14563                           postdec2	equ	0xFDD
 14564                           fsr2h	equ	0xFDA
 14565                           fsr2l	equ	0xFD9
 14566                           status	equ	0xFD8
 14567                           
 14568 ;; *************** function _pressDOWN *****************
 14569 ;; Defined at:
 14570 ;;		line 179 in file "source/DisplayProtocol.h"
 14571 ;; Parameters:    Size  Location     Type
 14572 ;;		None
 14573 ;; Auto vars:     Size  Location     Type
 14574 ;;		None
 14575 ;; Return value:  Size  Location     Type
 14576 ;;                  1    wreg      void 
 14577 ;; Registers used:
 14578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14579 ;; Tracked objects:
 14580 ;;		On entry : 0/0
 14581 ;;		On exit  : 0/0
 14582 ;;		Unchanged: 0/0
 14583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14584 ;;      Params:         0       0       0       0       0       0       0
 14585 ;;      Locals:         0       0       0       0       0       0       0
 14586 ;;      Temps:          0       0       1       0       0       0       0
 14587 ;;      Totals:         0       0       1       0       0       0       0
 14588 ;;Total ram usage:        1 bytes
 14589 ;; Hardware stack levels used:    1
 14590 ;; Hardware stack levels required when called:   13
 14591 ;; This function calls:
 14592 ;;		_chanValDigDOWN
 14593 ;; This function is called by:
 14594 ;;		_buttonChecking
 14595 ;; This function uses a non-reentrant model
 14596 ;;
 14597                           
 14598                           	psect	text57
 14599  004C6A                     __ptext57:
 14600                           	opt stack 0
 14601  004C6A                     _pressDOWN:
 14602                           	opt stack 16
 14603                           
 14604                           ;DisplayProtocol.h: 180: if (actualScreen == 0 || actualScreen == 4) {
 14605                           
 14606                           ; BSR set to: 1
 14607                           ;incstack = 0
 14608  004C6A  0101               	movlb	1	; () banked
 14609  004C6C  51BD               	movf	_actualScreen& (0+255),w,b
 14610  004C6E  B4D8               	btfsc	status,2,c
 14611  004C70  D005               	goto	l11219
 14612                           
 14613                           ; BSR set to: 1
 14614  004C72  0E04               	movlw	4
 14615  004C74  0101               	movlb	1	; () banked
 14616  004C76  19BD               	xorwf	_actualScreen& (0+255),w,b
 14617  004C78  A4D8               	btfss	status,2,c
 14618  004C7A  D009               	goto	l11225
 14619  004C7C                     l11219:
 14620                           
 14621                           ; BSR set to: 1
 14622                           ;DisplayProtocol.h: 181: menuSection--;
 14623  004C7C  0101               	movlb	1	; () banked
 14624  004C7E  07BC               	decf	_menuSection& (0+255),f,b
 14625                           
 14626                           ; BSR set to: 1
 14627                           ;DisplayProtocol.h: 182: if (menuSection < 0)
 14628  004C80  0101               	movlb	1	; () banked
 14629  004C82  AFBC               	btfss	_menuSection& (0+255),7,b
 14630  004C84  0012               	return	
 14631                           
 14632                           ; BSR set to: 1
 14633                           ;DisplayProtocol.h: 183: menuSection = 3;
 14634  004C86  0E03               	movlw	3
 14635  004C88  0101               	movlb	1	; () banked
 14636  004C8A  6FBC               	movwf	_menuSection& (0+255),b
 14637                           
 14638                           ; BSR set to: 1
 14639                           ;DisplayProtocol.h: 184: } else if (actualScreen == 1) {
 14640  004C8C  0012               	return	
 14641  004C8E                     l11225:
 14642                           
 14643                           ; BSR set to: 1
 14644  004C8E  0101               	movlb	1	; () banked
 14645  004C90  05BD               	decf	_actualScreen& (0+255),w,b
 14646  004C92  A4D8               	btfss	status,2,c
 14647  004C94  D022               	goto	l11231
 14648                           
 14649                           ; BSR set to: 1
 14650                           ;DisplayProtocol.h: 185: introducido[passSection]--;
 14651  004C96  0101               	movlb	1	; () banked
 14652  004C98  51BB               	movf	_passSection& (0+255),w,b
 14653  004C9A  0D01               	mullw	1
 14654  004C9C  0EAD               	movlw	low _introducido
 14655  004C9E  24F3               	addwf	prodl,w,c
 14656  004CA0  6ED9               	movwf	fsr2l,c
 14657  004CA2  0E01               	movlw	high _introducido
 14658  004CA4  20F4               	addwfc	prodh,w,c
 14659  004CA6  6EDA               	movwf	fsr2h,c
 14660  004CA8  06DF               	decf	indf2,f,c
 14661                           
 14662                           ;DisplayProtocol.h: 186: if (introducido[passSection] < 0)
 14663  004CAA  0101               	movlb	1	; () banked
 14664  004CAC  51BB               	movf	_passSection& (0+255),w,b
 14665  004CAE  0D01               	mullw	1
 14666  004CB0  0EAD               	movlw	low _introducido
 14667  004CB2  24F3               	addwf	prodl,w,c
 14668  004CB4  6ED9               	movwf	fsr2l,c
 14669  004CB6  0E01               	movlw	high _introducido
 14670  004CB8  20F4               	addwfc	prodh,w,c
 14671  004CBA  6EDA               	movwf	fsr2h,c
 14672  004CBC  0E00               	movlw	0
 14673  004CBE  AEDB               	btfss	plusw2,7,c
 14674  004CC0  0012               	return	
 14675                           
 14676                           ; BSR set to: 1
 14677                           ;DisplayProtocol.h: 187: introducido[passSection] = 9;
 14678  004CC2  0101               	movlb	1	; () banked
 14679  004CC4  51BB               	movf	_passSection& (0+255),w,b
 14680  004CC6  0D01               	mullw	1
 14681  004CC8  0EAD               	movlw	low _introducido
 14682  004CCA  24F3               	addwf	prodl,w,c
 14683  004CCC  6ED9               	movwf	fsr2l,c
 14684  004CCE  0E01               	movlw	high _introducido
 14685  004CD0  20F4               	addwfc	prodh,w,c
 14686  004CD2  6EDA               	movwf	fsr2h,c
 14687  004CD4  0E09               	movlw	9
 14688  004CD6  6EDF               	movwf	indf2,c
 14689                           
 14690                           ; BSR set to: 1
 14691                           ;DisplayProtocol.h: 188: } else if (actualScreen == 2 || actualScreen == 3
 14692  004CD8  0012               	return	
 14693  004CDA                     l11231:
 14694                           
 14695                           ; BSR set to: 1
 14696                           ;DisplayProtocol.h: 189: || actualScreen == 10 || actualScreen == 11
 14697                           ;DisplayProtocol.h: 190: || actualScreen == 15) {
 14698  004CDA  0E02               	movlw	2
 14699  004CDC  0101               	movlb	1	; () banked
 14700  004CDE  19BD               	xorwf	_actualScreen& (0+255),w,b
 14701  004CE0  B4D8               	btfsc	status,2,c
 14702  004CE2  D014               	goto	l11241
 14703                           
 14704                           ; BSR set to: 1
 14705  004CE4  0E03               	movlw	3
 14706  004CE6  0101               	movlb	1	; () banked
 14707  004CE8  19BD               	xorwf	_actualScreen& (0+255),w,b
 14708  004CEA  B4D8               	btfsc	status,2,c
 14709  004CEC  D00F               	goto	l11241
 14710                           
 14711                           ; BSR set to: 1
 14712  004CEE  0E0A               	movlw	10
 14713  004CF0  0101               	movlb	1	; () banked
 14714  004CF2  19BD               	xorwf	_actualScreen& (0+255),w,b
 14715  004CF4  B4D8               	btfsc	status,2,c
 14716  004CF6  D00A               	goto	l11241
 14717                           
 14718                           ; BSR set to: 1
 14719  004CF8  0E0B               	movlw	11
 14720  004CFA  0101               	movlb	1	; () banked
 14721  004CFC  19BD               	xorwf	_actualScreen& (0+255),w,b
 14722  004CFE  B4D8               	btfsc	status,2,c
 14723  004D00  D005               	goto	l11241
 14724                           
 14725                           ; BSR set to: 1
 14726  004D02  0E0F               	movlw	15
 14727  004D04  0101               	movlb	1	; () banked
 14728  004D06  19BD               	xorwf	_actualScreen& (0+255),w,b
 14729  004D08  A4D8               	btfss	status,2,c
 14730  004D0A  D011               	goto	l11247
 14731  004D0C                     l11241:
 14732                           
 14733                           ; BSR set to: 1
 14734                           ;DisplayProtocol.h: 191: selSN = !selSN;
 14735  004D0C  0101               	movlb	1	; () banked
 14736  004D0E  51BA               	movf	_selSN& (0+255),w,b
 14737  004D10  A4D8               	btfss	status,2,c
 14738  004D12  D002               	goto	u16560
 14739  004D14  0E01               	movlw	1
 14740  004D16  D001               	goto	u16570
 14741  004D18                     u16560:
 14742  004D18  0E00               	movlw	0
 14743  004D1A                     u16570:
 14744  004D1A  0101               	movlb	1	; () banked
 14745  004D1C  6FBA               	movwf	_selSN& (0+255),b
 14746                           
 14747                           ; BSR set to: 1
 14748                           ;DisplayProtocol.h: 192: if(selSN > 1)
 14749  004D1E  0E01               	movlw	1
 14750  004D20  0101               	movlb	1	; () banked
 14751  004D22  65BA               	cpfsgt	_selSN& (0+255),b
 14752  004D24  0012               	return	
 14753                           
 14754                           ; BSR set to: 1
 14755                           ;DisplayProtocol.h: 193: selSN = 0;
 14756  004D26  0E00               	movlw	0
 14757  004D28  0101               	movlb	1	; () banked
 14758  004D2A  6FBA               	movwf	_selSN& (0+255),b
 14759                           
 14760                           ; BSR set to: 1
 14761                           ;DisplayProtocol.h: 194: }else if(actualScreen == 5) {
 14762  004D2C  0012               	return	
 14763  004D2E                     l11247:
 14764                           
 14765                           ; BSR set to: 1
 14766  004D2E  0E05               	movlw	5
 14767  004D30  0101               	movlb	1	; () banked
 14768  004D32  19BD               	xorwf	_actualScreen& (0+255),w,b
 14769  004D34  B4D8               	btfsc	status,2,c
 14770  004D36  D009               	goto	l11257
 14771  004D38  D014               	goto	l11259
 14772  004D3A                     l11251:
 14773                           
 14774                           ; BSR set to: 1
 14775                           ;DisplayProtocol.h: 199: chanValDigDOWN();
 14776  004D3A  ECF2  F029         	call	_chanValDigDOWN	;wreg free
 14777                           
 14778                           ;DisplayProtocol.h: 200: break;
 14779  004D3E  0012               	return	
 14780  004D40                     l11253:
 14781                           
 14782                           ;DisplayProtocol.h: 202: chanVals--;
 14783  004D40  0101               	movlb	1	; () banked
 14784  004D42  07B6               	decf	_chanVals& (0+255),f,b
 14785  004D44  A0D8               	btfss	status,0,c
 14786  004D46  07B7               	decf	(_chanVals+1)& (0+255),f,b
 14787                           
 14788                           ; BSR set to: 1
 14789                           ;DisplayProtocol.h: 204: }
 14790                           ;DisplayProtocol.h: 205: }
 14791                           
 14792                           ;DisplayProtocol.h: 203: break;
 14793  004D48  0012               	return	
 14794  004D4A                     l11257:
 14795                           
 14796                           ; BSR set to: 1
 14797  004D4A  0101               	movlb	1	; () banked
 14798  004D4C  51BC               	movf	_menuSection& (0+255),w,b
 14799                           
 14800                           ; Switch size 1, requested type "space"
 14801                           ; Number of cases is 3, Range of values is 0 to 2
 14802                           ; switch strategies available:
 14803                           ; Name         Instructions Cycles
 14804                           ; simple_byte           10     6 (average)
 14805                           ;	Chosen strategy is simple_byte
 14806  004D4E  0A00               	xorlw	0	; case 0
 14807  004D50  B4D8               	btfsc	status,2,c
 14808  004D52  0012               	return	
 14809  004D54  0A01               	xorlw	1	; case 1
 14810  004D56  B4D8               	btfsc	status,2,c
 14811  004D58  D7F0               	goto	l11251
 14812  004D5A  0A03               	xorlw	3	; case 2
 14813  004D5C  A4D8               	btfss	status,2,c
 14814                           
 14815                           ; BSR set to: 1
 14816                           ;DisplayProtocol.h: 206: }else if(actualScreen == 12)
 14817  004D5E  0012               	return	
 14818  004D60  D7EF               	goto	l11253
 14819  004D62                     l11259:
 14820                           
 14821                           ; BSR set to: 1
 14822  004D62  0E0C               	movlw	12
 14823  004D64  0101               	movlb	1	; () banked
 14824  004D66  19BD               	xorwf	_actualScreen& (0+255),w,b
 14825  004D68  A4D8               	btfss	status,2,c
 14826  004D6A  0012               	return	
 14827                           
 14828                           ; BSR set to: 1
 14829                           ;DisplayProtocol.h: 207: chanValDigDOWN();
 14830  004D6C  ECF2  F029         	call	_chanValDigDOWN	;wreg free
 14831  004D70  0012               	return	
 14832  004D72                     __end_of_pressDOWN:
 14833                           	opt stack 0
 14834                           tblptru	equ	0xFF8
 14835                           tblptrh	equ	0xFF7
 14836                           tblptrl	equ	0xFF6
 14837                           tablat	equ	0xFF5
 14838                           prodh	equ	0xFF4
 14839                           prodl	equ	0xFF3
 14840                           intcon	equ	0xFF2
 14841                           postinc0	equ	0xFEE
 14842                           wreg	equ	0xFE8
 14843                           postdec1	equ	0xFE5
 14844                           fsr1l	equ	0xFE1
 14845                           indf2	equ	0xFDF
 14846                           postinc2	equ	0xFDE
 14847                           postdec2	equ	0xFDD
 14848                           plusw2	equ	0xFDB
 14849                           fsr2h	equ	0xFDA
 14850                           fsr2l	equ	0xFD9
 14851                           status	equ	0xFD8
 14852                           
 14853 ;; *************** function _chanValDigDOWN *****************
 14854 ;; Defined at:
 14855 ;;		line 37 in file "source/DisplayProtocol.h"
 14856 ;; Parameters:    Size  Location     Type
 14857 ;;		None
 14858 ;; Auto vars:     Size  Location     Type
 14859 ;;		None
 14860 ;; Return value:  Size  Location     Type
 14861 ;;                  1    wreg      void 
 14862 ;; Registers used:
 14863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14864 ;; Tracked objects:
 14865 ;;		On entry : 0/0
 14866 ;;		On exit  : 0/0
 14867 ;;		Unchanged: 0/0
 14868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14869 ;;      Params:         0       0       0       0       0       0       0
 14870 ;;      Locals:         0       0       0       0       0       0       0
 14871 ;;      Temps:          0       0       5       0       0       0       0
 14872 ;;      Totals:         0       0       5       0       0       0       0
 14873 ;;Total ram usage:        5 bytes
 14874 ;; Hardware stack levels used:    1
 14875 ;; Hardware stack levels required when called:   12
 14876 ;; This function calls:
 14877 ;;		Nothing
 14878 ;; This function is called by:
 14879 ;;		_pressDOWN
 14880 ;; This function uses a non-reentrant model
 14881 ;;
 14882                           
 14883                           	psect	text58
 14884  0053E4                     __ptext58:
 14885                           	opt stack 0
 14886  0053E4                     _chanValDigDOWN:
 14887                           	opt stack 16
 14888                           
 14889                           ;DisplayProtocol.h: 38: chanValdig[chanValSection]--;
 14890                           
 14891                           ;incstack = 0
 14892  0053E4  0101               	movlb	1	; () banked
 14893  0053E6  519C               	movf	_chanValSection& (0+255),w,b
 14894  0053E8  0D01               	mullw	1
 14895  0053EA  0EA3               	movlw	low _chanValdig
 14896  0053EC  24F3               	addwf	prodl,w,c
 14897  0053EE  6ED9               	movwf	fsr2l,c
 14898  0053F0  0E01               	movlw	high _chanValdig
 14899  0053F2  20F4               	addwfc	prodh,w,c
 14900  0053F4  6EDA               	movwf	fsr2h,c
 14901  0053F6  06DF               	decf	indf2,f,c
 14902                           
 14903                           ;DisplayProtocol.h: 39: if(chanValdig[chanValSection] < 0) {
 14904  0053F8  0101               	movlb	1	; () banked
 14905  0053FA  519C               	movf	_chanValSection& (0+255),w,b
 14906  0053FC  0D01               	mullw	1
 14907  0053FE  0EA3               	movlw	low _chanValdig
 14908  005400  24F3               	addwf	prodl,w,c
 14909  005402  6ED9               	movwf	fsr2l,c
 14910  005404  0E01               	movlw	high _chanValdig
 14911  005406  20F4               	addwfc	prodh,w,c
 14912  005408  6EDA               	movwf	fsr2h,c
 14913  00540A  0E00               	movlw	0
 14914  00540C  AEDB               	btfss	plusw2,7,c
 14915  00540E  0012               	return	
 14916                           
 14917                           ; BSR set to: 1
 14918                           ;DisplayProtocol.h: 40: chanValdig[chanValSection] = 9;
 14919  005410  0101               	movlb	1	; () banked
 14920  005412  519C               	movf	_chanValSection& (0+255),w,b
 14921  005414  0D01               	mullw	1
 14922  005416  0EA3               	movlw	low _chanValdig
 14923  005418  24F3               	addwf	prodl,w,c
 14924  00541A  6ED9               	movwf	fsr2l,c
 14925  00541C  0E01               	movlw	high _chanValdig
 14926  00541E  20F4               	addwfc	prodh,w,c
 14927  005420  6EDA               	movwf	fsr2h,c
 14928  005422  0E09               	movlw	9
 14929  005424  6EDF               	movwf	indf2,c
 14930                           
 14931                           ; BSR set to: 1
 14932                           ;DisplayProtocol.h: 41: if(chanValSection > 1 && chanValdig[chanValSection - 1] > 0)
 14933  005426  0101               	movlb	1	; () banked
 14934  005428  519C               	movf	_chanValSection& (0+255),w,b
 14935  00542A  0A80               	xorlw	128
 14936  00542C  0F7E               	addlw	-130
 14937  00542E  A0D8               	btfss	status,0,c
 14938  005430  0012               	return	
 14939                           
 14940                           ; BSR set to: 1
 14941  005432  0EFF               	movlw	255
 14942  005434  0101               	movlb	1	; () banked
 14943  005436  6F00               	movwf	??_chanValDigDOWN& (0+255),b
 14944  005438  0EFF               	movlw	255
 14945  00543A  0101               	movlb	1	; () banked
 14946  00543C  6F01               	movwf	(??_chanValDigDOWN+1)& (0+255),b
 14947  00543E  C19C  F102         	movff	_chanValSection,??_chanValDigDOWN+2
 14948  005442  0101               	movlb	1	; () banked
 14949  005444  6B03               	clrf	(??_chanValDigDOWN+3)& (0+255),b
 14950  005446  BF02               	btfsc	(??_chanValDigDOWN+2)& (0+255),7,b
 14951  005448  0703               	decf	(??_chanValDigDOWN+3)& (0+255),f,b
 14952  00544A  0101               	movlb	1	; () banked
 14953  00544C  5100               	movf	??_chanValDigDOWN& (0+255),w,b
 14954  00544E  0101               	movlb	1	; () banked
 14955  005450  2702               	addwf	(??_chanValDigDOWN+2)& (0+255),f,b
 14956  005452  0101               	movlb	1	; () banked
 14957  005454  5101               	movf	(??_chanValDigDOWN+1)& (0+255),w,b
 14958  005456  0101               	movlb	1	; () banked
 14959  005458  2303               	addwfc	(??_chanValDigDOWN+3)& (0+255),f,b
 14960  00545A  0EA3               	movlw	low _chanValdig
 14961  00545C  0101               	movlb	1	; () banked
 14962  00545E  2502               	addwf	(??_chanValDigDOWN+2)& (0+255),w,b
 14963  005460  6ED9               	movwf	fsr2l,c
 14964  005462  0E01               	movlw	high _chanValdig
 14965  005464  0101               	movlb	1	; () banked
 14966  005466  2103               	addwfc	(??_chanValDigDOWN+3)& (0+255),w,b
 14967  005468  6EDA               	movwf	fsr2h,c
 14968  00546A  50DF               	movf	indf2,w,c
 14969  00546C  0A80               	xorlw	128
 14970  00546E  0F7F               	addlw	-129
 14971  005470  A0D8               	btfss	status,0,c
 14972  005472  0012               	return	
 14973                           
 14974                           ; BSR set to: 1
 14975                           ;DisplayProtocol.h: 42: chanValdig[chanValSection - 1]--;
 14976  005474  0EFF               	movlw	255
 14977  005476  0101               	movlb	1	; () banked
 14978  005478  6F00               	movwf	??_chanValDigDOWN& (0+255),b
 14979  00547A  0EFF               	movlw	255
 14980  00547C  0101               	movlb	1	; () banked
 14981  00547E  6F01               	movwf	(??_chanValDigDOWN+1)& (0+255),b
 14982  005480  C19C  F102         	movff	_chanValSection,??_chanValDigDOWN+2
 14983  005484  0101               	movlb	1	; () banked
 14984  005486  6B03               	clrf	(??_chanValDigDOWN+3)& (0+255),b
 14985  005488  BF02               	btfsc	(??_chanValDigDOWN+2)& (0+255),7,b
 14986  00548A  0703               	decf	(??_chanValDigDOWN+3)& (0+255),f,b
 14987  00548C  0101               	movlb	1	; () banked
 14988  00548E  5100               	movf	??_chanValDigDOWN& (0+255),w,b
 14989  005490  0101               	movlb	1	; () banked
 14990  005492  2702               	addwf	(??_chanValDigDOWN+2)& (0+255),f,b
 14991  005494  0101               	movlb	1	; () banked
 14992  005496  5101               	movf	(??_chanValDigDOWN+1)& (0+255),w,b
 14993  005498  0101               	movlb	1	; () banked
 14994  00549A  2303               	addwfc	(??_chanValDigDOWN+3)& (0+255),f,b
 14995  00549C  0EA3               	movlw	low _chanValdig
 14996  00549E  0101               	movlb	1	; () banked
 14997  0054A0  2502               	addwf	(??_chanValDigDOWN+2)& (0+255),w,b
 14998  0054A2  6ED9               	movwf	fsr2l,c
 14999  0054A4  0E01               	movlw	high _chanValdig
 15000  0054A6  0101               	movlb	1	; () banked
 15001  0054A8  2103               	addwfc	(??_chanValDigDOWN+3)& (0+255),w,b
 15002  0054AA  6EDA               	movwf	fsr2h,c
 15003  0054AC  06DF               	decf	indf2,f,c
 15004                           
 15005                           ; BSR set to: 1
 15006  0054AE  0012               	return	
 15007  0054B0                     __end_of_chanValDigDOWN:
 15008                           	opt stack 0
 15009                           tblptru	equ	0xFF8
 15010                           tblptrh	equ	0xFF7
 15011                           tblptrl	equ	0xFF6
 15012                           tablat	equ	0xFF5
 15013                           prodh	equ	0xFF4
 15014                           prodl	equ	0xFF3
 15015                           intcon	equ	0xFF2
 15016                           postinc0	equ	0xFEE
 15017                           wreg	equ	0xFE8
 15018                           postdec1	equ	0xFE5
 15019                           fsr1l	equ	0xFE1
 15020                           indf2	equ	0xFDF
 15021                           postinc2	equ	0xFDE
 15022                           postdec2	equ	0xFDD
 15023                           plusw2	equ	0xFDB
 15024                           fsr2h	equ	0xFDA
 15025                           fsr2l	equ	0xFD9
 15026                           status	equ	0xFD8
 15027                           
 15028 ;; *************** function _longPressUP *****************
 15029 ;; Defined at:
 15030 ;;		line 155 in file "source/DisplayProtocol.h"
 15031 ;; Parameters:    Size  Location     Type
 15032 ;;		None
 15033 ;; Auto vars:     Size  Location     Type
 15034 ;;		None
 15035 ;; Return value:  Size  Location     Type
 15036 ;;                  1    wreg      void 
 15037 ;; Registers used:
 15038 ;;		wreg, status,2, status,0
 15039 ;; Tracked objects:
 15040 ;;		On entry : 0/0
 15041 ;;		On exit  : 0/0
 15042 ;;		Unchanged: 0/0
 15043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15044 ;;      Params:         0       0       0       0       0       0       0
 15045 ;;      Locals:         0       0       0       0       0       0       0
 15046 ;;      Temps:          0       0       0       0       0       0       0
 15047 ;;      Totals:         0       0       0       0       0       0       0
 15048 ;;Total ram usage:        0 bytes
 15049 ;; Hardware stack levels used:    1
 15050 ;; Hardware stack levels required when called:   12
 15051 ;; This function calls:
 15052 ;;		Nothing
 15053 ;; This function is called by:
 15054 ;;		_buttonChecking
 15055 ;; This function uses a non-reentrant model
 15056 ;;
 15057                           
 15058                           	psect	text59
 15059  0068E8                     __ptext59:
 15060                           	opt stack 0
 15061  0068E8                     _longPressUP:
 15062                           	opt stack 17
 15063                           
 15064                           ;DisplayProtocol.h: 156: if (!UPisLP) {
 15065                           
 15066                           ; BSR set to: 1
 15067                           ;incstack = 0
 15068  0068E8  504C               	movf	_UPisLP,w,c
 15069  0068EA  A4D8               	btfss	status,2,c
 15070  0068EC  0012               	return	
 15071                           
 15072                           ;DisplayProtocol.h: 157: UPisLP = 1;
 15073  0068EE  0E01               	movlw	1
 15074  0068F0  6E4C               	movwf	_UPisLP,c
 15075                           
 15076                           ;DisplayProtocol.h: 158: if (actualScreen == 0 || actualScreen == 4) {
 15077  0068F2  0101               	movlb	1	; () banked
 15078  0068F4  51BD               	movf	_actualScreen& (0+255),w,b
 15079  0068F6  B4D8               	btfsc	status,2,c
 15080  0068F8  D005               	goto	l11195
 15081                           
 15082                           ; BSR set to: 1
 15083  0068FA  0E04               	movlw	4
 15084  0068FC  0101               	movlb	1	; () banked
 15085  0068FE  19BD               	xorwf	_actualScreen& (0+255),w,b
 15086  006900  A4D8               	btfss	status,2,c
 15087  006902  D01C               	goto	l11207
 15088  006904                     l11195:
 15089                           
 15090                           ; BSR set to: 1
 15091                           ;DisplayProtocol.h: 159: if (holdENTERcont > 5) {
 15092  006904  0E05               	movlw	5
 15093  006906  0100               	movlb	0	; () banked
 15094  006908  65C6               	cpfsgt	_holdENTERcont& (0+255),b
 15095  00690A  D014               	goto	l11205
 15096                           
 15097                           ; BSR set to: 0
 15098                           ;DisplayProtocol.h: 160: if (actualScreen == 0) {
 15099  00690C  0101               	movlb	1	; () banked
 15100  00690E  51BD               	movf	_actualScreen& (0+255),w,b
 15101  006910  A4D8               	btfss	status,2,c
 15102  006912  D007               	goto	l11201
 15103                           
 15104                           ; BSR set to: 1
 15105                           ;DisplayProtocol.h: 161: actualScreen = 1;
 15106  006914  0E01               	movlw	1
 15107  006916  0101               	movlb	1	; () banked
 15108  006918  6FBD               	movwf	_actualScreen& (0+255),b
 15109                           
 15110                           ;DisplayProtocol.h: 162: fd = 0;
 15111  00691A  0E00               	movlw	0
 15112  00691C  0101               	movlb	1	; () banked
 15113  00691E  6FB9               	movwf	_fd& (0+255),b
 15114                           
 15115                           ;DisplayProtocol.h: 163: } else if (actualScreen == 4)
 15116  006920  0012               	return	
 15117  006922                     l11201:
 15118                           
 15119                           ; BSR set to: 1
 15120  006922  0E04               	movlw	4
 15121  006924  0101               	movlb	1	; () banked
 15122  006926  19BD               	xorwf	_actualScreen& (0+255),w,b
 15123  006928  A4D8               	btfss	status,2,c
 15124  00692A  0012               	return	
 15125                           
 15126                           ; BSR set to: 1
 15127                           ;DisplayProtocol.h: 164: actualScreen = 9;
 15128  00692C  0E09               	movlw	9
 15129  00692E  0101               	movlb	1	; () banked
 15130  006930  6FBD               	movwf	_actualScreen& (0+255),b
 15131                           
 15132                           ; BSR set to: 1
 15133                           ;DisplayProtocol.h: 165: } else
 15134                           
 15135                           ; BSR set to: 1
 15136  006932  0012               	return	
 15137  006934                     l11205:
 15138                           
 15139                           ;DisplayProtocol.h: 166: menuSection = 0;
 15140  006934  0E00               	movlw	0
 15141  006936  0101               	movlb	1	; () banked
 15142  006938  6FBC               	movwf	_menuSection& (0+255),b
 15143                           
 15144                           ; BSR set to: 1
 15145                           ;DisplayProtocol.h: 167: }else if(actualScreen == 5) {
 15146  00693A  0012               	return	
 15147  00693C                     l11207:
 15148                           
 15149                           ; BSR set to: 1
 15150  00693C  0E05               	movlw	5
 15151  00693E  0101               	movlb	1	; () banked
 15152  006940  19BD               	xorwf	_actualScreen& (0+255),w,b
 15153  006942  A4D8               	btfss	status,2,c
 15154  006944  0012               	return	
 15155                           
 15156                           ; BSR set to: 1
 15157                           ;DisplayProtocol.h: 168: if(menuSection == 2)
 15158  006946  0E02               	movlw	2
 15159  006948  0101               	movlb	1	; () banked
 15160  00694A  19BC               	xorwf	_menuSection& (0+255),w,b
 15161  00694C  A4D8               	btfss	status,2,c
 15162  00694E  0012               	return	
 15163                           
 15164                           ; BSR set to: 1
 15165                           ;DisplayProtocol.h: 169: chanVals += 10;
 15166  006950  0E0A               	movlw	10
 15167  006952  0101               	movlb	1	; () banked
 15168  006954  27B6               	addwf	_chanVals& (0+255),f,b
 15169  006956  0E00               	movlw	0
 15170  006958  23B7               	addwfc	(_chanVals+1)& (0+255),f,b
 15171                           
 15172                           ; BSR set to: 1
 15173                           
 15174                           ; BSR set to: 1
 15175                           
 15176                           ; BSR set to: 1
 15177  00695A  0012               	return	
 15178  00695C                     __end_of_longPressUP:
 15179                           	opt stack 0
 15180                           tblptru	equ	0xFF8
 15181                           tblptrh	equ	0xFF7
 15182                           tblptrl	equ	0xFF6
 15183                           tablat	equ	0xFF5
 15184                           prodh	equ	0xFF4
 15185                           prodl	equ	0xFF3
 15186                           intcon	equ	0xFF2
 15187                           postinc0	equ	0xFEE
 15188                           wreg	equ	0xFE8
 15189                           postdec1	equ	0xFE5
 15190                           fsr1l	equ	0xFE1
 15191                           indf2	equ	0xFDF
 15192                           postinc2	equ	0xFDE
 15193                           postdec2	equ	0xFDD
 15194                           plusw2	equ	0xFDB
 15195                           fsr2h	equ	0xFDA
 15196                           fsr2l	equ	0xFD9
 15197                           status	equ	0xFD8
 15198                           
 15199 ;; *************** function _longPressRETRO *****************
 15200 ;; Defined at:
 15201 ;;		line 251 in file "source/DisplayProtocol.h"
 15202 ;; Parameters:    Size  Location     Type
 15203 ;;		None
 15204 ;; Auto vars:     Size  Location     Type
 15205 ;;		None
 15206 ;; Return value:  Size  Location     Type
 15207 ;;                  1    wreg      void 
 15208 ;; Registers used:
 15209 ;;		wreg, status,2, status,0, cstack
 15210 ;; Tracked objects:
 15211 ;;		On entry : 0/0
 15212 ;;		On exit  : 0/0
 15213 ;;		Unchanged: 0/0
 15214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15215 ;;      Params:         0       0       0       0       0       0       0
 15216 ;;      Locals:         0       0       0       0       0       0       0
 15217 ;;      Temps:          0       0       0       0       0       0       0
 15218 ;;      Totals:         0       0       0       0       0       0       0
 15219 ;;Total ram usage:        0 bytes
 15220 ;; Hardware stack levels used:    1
 15221 ;; Hardware stack levels required when called:   15
 15222 ;; This function calls:
 15223 ;;		___ftmul
 15224 ;;		_initProtocoll
 15225 ;;		_stopProcess
 15226 ;; This function is called by:
 15227 ;;		_buttonChecking
 15228 ;; This function uses a non-reentrant model
 15229 ;;
 15230                           
 15231                           	psect	text60
 15232  004E7A                     __ptext60:
 15233                           	opt stack 0
 15234  004E7A                     _longPressRETRO:
 15235                           	opt stack 14
 15236                           
 15237                           ;DisplayProtocol.h: 252: if (!RETROisLP) {
 15238                           
 15239                           ;incstack = 0
 15240  004E7A  0100               	movlb	0	; () banked
 15241  004E7C  51C5               	movf	_RETROisLP& (0+255),w,b
 15242  004E7E  A4D8               	btfss	status,2,c
 15243  004E80  0012               	return	
 15244                           
 15245                           ; BSR set to: 0
 15246                           ;DisplayProtocol.h: 253: RETROisLP = 1;
 15247  004E82  0E01               	movlw	1
 15248  004E84  0100               	movlb	0	; () banked
 15249  004E86  6FC5               	movwf	_RETROisLP& (0+255),b
 15250                           
 15251                           ;DisplayProtocol.h: 254: if(actualScreen == 0 || actualScreen == 4
 15252                           ;DisplayProtocol.h: 255: || actualScreen == 14) {
 15253  004E88  0101               	movlb	1	; () banked
 15254  004E8A  51BD               	movf	_actualScreen& (0+255),w,b
 15255  004E8C  B4D8               	btfsc	status,2,c
 15256  004E8E  D00A               	goto	l11325
 15257                           
 15258                           ; BSR set to: 1
 15259  004E90  0E04               	movlw	4
 15260  004E92  0101               	movlb	1	; () banked
 15261  004E94  19BD               	xorwf	_actualScreen& (0+255),w,b
 15262  004E96  B4D8               	btfsc	status,2,c
 15263  004E98  D005               	goto	l11325
 15264                           
 15265                           ; BSR set to: 1
 15266  004E9A  0E0E               	movlw	14
 15267  004E9C  0101               	movlb	1	; () banked
 15268  004E9E  19BD               	xorwf	_actualScreen& (0+255),w,b
 15269  004EA0  A4D8               	btfss	status,2,c
 15270  004EA2  D012               	goto	l11331
 15271  004EA4                     l11325:
 15272                           
 15273                           ; BSR set to: 1
 15274                           ;DisplayProtocol.h: 256: if(processStarted || actualScreen == 14) {
 15275  004EA4  0100               	movlb	0	; () banked
 15276  004EA6  51C0               	movf	_processStarted& (0+255),w,b
 15277  004EA8  A4D8               	btfss	status,2,c
 15278  004EAA  D005               	goto	l702
 15279                           
 15280                           ; BSR set to: 0
 15281  004EAC  0E0E               	movlw	14
 15282  004EAE  0101               	movlb	1	; () banked
 15283  004EB0  19BD               	xorwf	_actualScreen& (0+255),w,b
 15284  004EB2  A4D8               	btfss	status,2,c
 15285  004EB4  0012               	return	
 15286  004EB6                     l702:
 15287                           
 15288                           ;DisplayProtocol.h: 257: tempLastScreen = actualScreen;
 15289  004EB6  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 15290                           
 15291                           ;DisplayProtocol.h: 258: actualScreen = 3;
 15292  004EBA  0E03               	movlw	3
 15293  004EBC  0101               	movlb	1	; () banked
 15294  004EBE  6FBD               	movwf	_actualScreen& (0+255),b
 15295                           
 15296                           ;DisplayProtocol.h: 259: selSN = 0;
 15297  004EC0  0E00               	movlw	0
 15298  004EC2  0101               	movlb	1	; () banked
 15299  004EC4  6FBA               	movwf	_selSN& (0+255),b
 15300                           
 15301                           ; BSR set to: 1
 15302                           ;DisplayProtocol.h: 260: }
 15303                           ;DisplayProtocol.h: 261: }else if(actualScreen == 5)
 15304  004EC6  0012               	return	
 15305  004EC8                     l11331:
 15306                           
 15307                           ; BSR set to: 1
 15308  004EC8  0E05               	movlw	5
 15309  004ECA  0101               	movlb	1	; () banked
 15310  004ECC  19BD               	xorwf	_actualScreen& (0+255),w,b
 15311  004ECE  A4D8               	btfss	status,2,c
 15312  004ED0  D004               	goto	l11335
 15313                           
 15314                           ; BSR set to: 1
 15315                           ;DisplayProtocol.h: 262: actualScreen = 4;
 15316  004ED2  0E04               	movlw	4
 15317  004ED4  0101               	movlb	1	; () banked
 15318  004ED6  6FBD               	movwf	_actualScreen& (0+255),b
 15319  004ED8  0012               	return	
 15320  004EDA                     l11335:
 15321                           
 15322                           ; BSR set to: 1
 15323                           ;DisplayProtocol.h: 263: else if(actualScreen == 12 || actualScreen == 6) {
 15324  004EDA  0E0C               	movlw	12
 15325  004EDC  0101               	movlb	1	; () banked
 15326  004EDE  19BD               	xorwf	_actualScreen& (0+255),w,b
 15327  004EE0  B4D8               	btfsc	status,2,c
 15328  004EE2  D005               	goto	l708
 15329                           
 15330                           ; BSR set to: 1
 15331  004EE4  0E06               	movlw	6
 15332  004EE6  0101               	movlb	1	; () banked
 15333  004EE8  19BD               	xorwf	_actualScreen& (0+255),w,b
 15334  004EEA  A4D8               	btfss	status,2,c
 15335  004EEC  D009               	goto	l11341
 15336  004EEE                     l708:
 15337                           
 15338                           ; BSR set to: 1
 15339                           ;DisplayProtocol.h: 264: tempLastScreen = actualScreen;
 15340  004EEE  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 15341                           
 15342                           ; BSR set to: 1
 15343                           ;DisplayProtocol.h: 265: actualScreen = 15;
 15344  004EF2  0E0F               	movlw	15
 15345  004EF4  0101               	movlb	1	; () banked
 15346  004EF6  6FBD               	movwf	_actualScreen& (0+255),b
 15347                           
 15348                           ;DisplayProtocol.h: 266: selSN = 1;
 15349  004EF8  0E01               	movlw	1
 15350  004EFA  0101               	movlb	1	; () banked
 15351  004EFC  6FBA               	movwf	_selSN& (0+255),b
 15352                           
 15353                           ;DisplayProtocol.h: 267: }else if(actualScreen == 14) {
 15354  004EFE  0012               	return	
 15355  004F00                     l11341:
 15356                           
 15357                           ; BSR set to: 1
 15358  004F00  0E0E               	movlw	14
 15359  004F02  0101               	movlb	1	; () banked
 15360  004F04  19BD               	xorwf	_actualScreen& (0+255),w,b
 15361  004F06  A4D8               	btfss	status,2,c
 15362  004F08  0012               	return	
 15363                           
 15364                           ; BSR set to: 1
 15365                           ;DisplayProtocol.h: 268: processState = 0;
 15366  004F0A  0E00               	movlw	0
 15367  004F0C  0100               	movlb	0	; () banked
 15368  004F0E  6FB3               	movwf	(_processState+1)& (0+255),b
 15369  004F10  0E00               	movlw	0
 15370  004F12  6FB2               	movwf	_processState& (0+255),b
 15371                           
 15372                           ; BSR set to: 0
 15373                           ;DisplayProtocol.h: 269: stopProcess();
 15374  004F14  EC39  F039         	call	_stopProcess	;wreg free
 15375                           
 15376                           ;DisplayProtocol.h: 270: actualScreen = 0;
 15377  004F18  0E00               	movlw	0
 15378  004F1A  0101               	movlb	1	; () banked
 15379  004F1C  6FBD               	movwf	_actualScreen& (0+255),b
 15380                           
 15381                           ; BSR set to: 1
 15382                           ;DisplayProtocol.h: 271: if(calibMode) {
 15383  004F1E  0100               	movlb	0	; () banked
 15384  004F20  51BE               	movf	_calibMode& (0+255),w,b
 15385  004F22  B4D8               	btfsc	status,2,c
 15386  004F24  D027               	goto	l711
 15387                           
 15388                           ; BSR set to: 0
 15389                           ;DisplayProtocol.h: 272: numCortes = tempNumCortes;
 15390  004F26  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 15391  004F2A  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 15392                           
 15393                           ;DisplayProtocol.h: 273: tiXcorte = temptiXcorte;
 15394  004F2E  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 15395  004F32  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 15396  004F36  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 15397                           
 15398                           ; BSR set to: 0
 15399                           ;DisplayProtocol.h: 274: timsXcorte = (float)tiXcorte * 1000;
 15400  004F3A  C195  F114         	movff	_tiXcorte,___ftmul@f1
 15401  004F3E  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 15402  004F42  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 15403  004F46  0E00               	movlw	0
 15404  004F48  0101               	movlb	1	; () banked
 15405  004F4A  6F17               	movwf	___ftmul@f2& (0+255),b
 15406  004F4C  0E7A               	movlw	122
 15407  004F4E  0101               	movlb	1	; () banked
 15408  004F50  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 15409  004F52  0E44               	movlw	68
 15410  004F54  0101               	movlb	1	; () banked
 15411  004F56  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 15412  004F58  EC35  F01C         	call	___ftmul	;wreg free
 15413  004F5C  C114  F055         	movff	?___ftmul,_timsXcorte
 15414  004F60  C115  F056         	movff	?___ftmul+1,_timsXcorte+1
 15415  004F64  C116  F057         	movff	?___ftmul+2,_timsXcorte+2
 15416                           
 15417                           ;DisplayProtocol.h: 275: calibMode = 0;
 15418  004F68  0E00               	movlw	0
 15419  004F6A  0100               	movlb	0	; () banked
 15420  004F6C  6FBE               	movwf	_calibMode& (0+255),b
 15421                           
 15422                           ; BSR set to: 0
 15423                           ;DisplayProtocol.h: 276: actualScreen = 4;
 15424  004F6E  0E04               	movlw	4
 15425  004F70  0101               	movlb	1	; () banked
 15426  004F72  6FBD               	movwf	_actualScreen& (0+255),b
 15427  004F74                     l711:
 15428                           
 15429                           ;DisplayProtocol.h: 277: }
 15430                           ;DisplayProtocol.h: 278: initProtocoll(1);
 15431  004F74  0E01               	movlw	1
 15432  004F76  EC30  F037         	call	_initProtocoll
 15433  004F7A  0012               	return	
 15434  004F7C                     __end_of_longPressRETRO:
 15435                           	opt stack 0
 15436                           tblptru	equ	0xFF8
 15437                           tblptrh	equ	0xFF7
 15438                           tblptrl	equ	0xFF6
 15439                           tablat	equ	0xFF5
 15440                           prodh	equ	0xFF4
 15441                           prodl	equ	0xFF3
 15442                           intcon	equ	0xFF2
 15443                           postinc0	equ	0xFEE
 15444                           wreg	equ	0xFE8
 15445                           postdec1	equ	0xFE5
 15446                           fsr1l	equ	0xFE1
 15447                           indf2	equ	0xFDF
 15448                           postinc2	equ	0xFDE
 15449                           postdec2	equ	0xFDD
 15450                           plusw2	equ	0xFDB
 15451                           fsr2h	equ	0xFDA
 15452                           fsr2l	equ	0xFD9
 15453                           status	equ	0xFD8
 15454                           
 15455 ;; *************** function _stopProcess *****************
 15456 ;; Defined at:
 15457 ;;		line 72 in file "source/PWMConfig.h"
 15458 ;; Parameters:    Size  Location     Type
 15459 ;;		None
 15460 ;; Auto vars:     Size  Location     Type
 15461 ;;		None
 15462 ;; Return value:  Size  Location     Type
 15463 ;;                  1    wreg      void 
 15464 ;; Registers used:
 15465 ;;		wreg, status,2, status,0, cstack
 15466 ;; Tracked objects:
 15467 ;;		On entry : 0/0
 15468 ;;		On exit  : 0/0
 15469 ;;		Unchanged: 0/0
 15470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15471 ;;      Params:         0       0       0       0       0       0       0
 15472 ;;      Locals:         0       0       0       0       0       0       0
 15473 ;;      Temps:          0       0       0       0       0       0       0
 15474 ;;      Totals:         0       0       0       0       0       0       0
 15475 ;;Total ram usage:        0 bytes
 15476 ;; Hardware stack levels used:    1
 15477 ;; Hardware stack levels required when called:   14
 15478 ;; This function calls:
 15479 ;;		_detenerCuchilla
 15480 ;; This function is called by:
 15481 ;;		_longPressRETRO
 15482 ;;		_pressENTER
 15483 ;; This function uses a non-reentrant model
 15484 ;;
 15485                           
 15486                           	psect	text61
 15487  007272                     __ptext61:
 15488                           	opt stack 0
 15489  007272                     _stopProcess:
 15490                           	opt stack 14
 15491                           
 15492                           ;PWMConfig.h: 73: processStarted = 0;
 15493                           
 15494                           ;incstack = 0
 15495  007272  0E00               	movlw	0
 15496  007274  0100               	movlb	0	; () banked
 15497  007276  6FC0               	movwf	_processStarted& (0+255),b
 15498                           
 15499                           ;PWMConfig.h: 74: ready2Cut = 0;
 15500  007278  0E00               	movlw	0
 15501  00727A  0100               	movlb	0	; () banked
 15502  00727C  6FBF               	movwf	_ready2Cut& (0+255),b
 15503                           
 15504                           ; BSR set to: 0
 15505                           ;PWMConfig.h: 75: LATCbits.LATC4 = 0;
 15506  00727E  988B               	bcf	3979,4,c	;volatile
 15507                           
 15508                           ; BSR set to: 0
 15509                           ;PWMConfig.h: 76: detenerCuchilla();
 15510  007280  EC56  F039         	call	_detenerCuchilla	;wreg free
 15511  007284  0012               	return		;funcret
 15512  007286                     __end_of_stopProcess:
 15513                           	opt stack 0
 15514                           tblptru	equ	0xFF8
 15515                           tblptrh	equ	0xFF7
 15516                           tblptrl	equ	0xFF6
 15517                           tablat	equ	0xFF5
 15518                           prodh	equ	0xFF4
 15519                           prodl	equ	0xFF3
 15520                           intcon	equ	0xFF2
 15521                           postinc0	equ	0xFEE
 15522                           wreg	equ	0xFE8
 15523                           postdec1	equ	0xFE5
 15524                           fsr1l	equ	0xFE1
 15525                           indf2	equ	0xFDF
 15526                           postinc2	equ	0xFDE
 15527                           postdec2	equ	0xFDD
 15528                           plusw2	equ	0xFDB
 15529                           fsr2h	equ	0xFDA
 15530                           fsr2l	equ	0xFD9
 15531                           status	equ	0xFD8
 15532                           
 15533 ;; *************** function _detenerCuchilla *****************
 15534 ;; Defined at:
 15535 ;;		line 57 in file "source/PWMConfig.h"
 15536 ;; Parameters:    Size  Location     Type
 15537 ;;		None
 15538 ;; Auto vars:     Size  Location     Type
 15539 ;;		None
 15540 ;; Return value:  Size  Location     Type
 15541 ;;                  1    wreg      void 
 15542 ;; Registers used:
 15543 ;;		wreg, status,2, status,0, cstack
 15544 ;; Tracked objects:
 15545 ;;		On entry : 0/0
 15546 ;;		On exit  : 0/0
 15547 ;;		Unchanged: 0/0
 15548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15549 ;;      Params:         0       0       0       0       0       0       0
 15550 ;;      Locals:         0       0       0       0       0       0       0
 15551 ;;      Temps:          0       0       0       0       0       0       0
 15552 ;;      Totals:         0       0       0       0       0       0       0
 15553 ;;Total ram usage:        0 bytes
 15554 ;; Hardware stack levels used:    1
 15555 ;; Hardware stack levels required when called:   13
 15556 ;; This function calls:
 15557 ;;		_setPWM2duty
 15558 ;; This function is called by:
 15559 ;;		_stopProcess
 15560 ;; This function uses a non-reentrant model
 15561 ;;
 15562                           
 15563                           	psect	text62
 15564  0072AC                     __ptext62:
 15565                           	opt stack 0
 15566  0072AC                     _detenerCuchilla:
 15567                           	opt stack 14
 15568                           
 15569                           ;PWMConfig.h: 58: setPWM2duty(0);
 15570                           
 15571                           ;incstack = 0
 15572  0072AC  0E00               	movlw	0
 15573  0072AE  0101               	movlb	1	; () banked
 15574  0072B0  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 15575  0072B2  0E00               	movlw	0
 15576  0072B4  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 15577  0072B6  EC40  F02F         	call	_setPWM2duty	;wreg free
 15578  0072BA  0012               	return		;funcret
 15579  0072BC                     __end_of_detenerCuchilla:
 15580                           	opt stack 0
 15581                           tblptru	equ	0xFF8
 15582                           tblptrh	equ	0xFF7
 15583                           tblptrl	equ	0xFF6
 15584                           tablat	equ	0xFF5
 15585                           prodh	equ	0xFF4
 15586                           prodl	equ	0xFF3
 15587                           intcon	equ	0xFF2
 15588                           postinc0	equ	0xFEE
 15589                           wreg	equ	0xFE8
 15590                           postdec1	equ	0xFE5
 15591                           fsr1l	equ	0xFE1
 15592                           indf2	equ	0xFDF
 15593                           postinc2	equ	0xFDE
 15594                           postdec2	equ	0xFDD
 15595                           plusw2	equ	0xFDB
 15596                           fsr2h	equ	0xFDA
 15597                           fsr2l	equ	0xFD9
 15598                           status	equ	0xFD8
 15599                           
 15600 ;; *************** function _initProtocoll *****************
 15601 ;; Defined at:
 15602 ;;		line 61 in file "source/PWMConfig.h"
 15603 ;; Parameters:    Size  Location     Type
 15604 ;;  init            1    wreg     unsigned char 
 15605 ;; Auto vars:     Size  Location     Type
 15606 ;;  init            1    6[BANK1 ] unsigned char 
 15607 ;; Return value:  Size  Location     Type
 15608 ;;                  1    wreg      void 
 15609 ;; Registers used:
 15610 ;;		wreg, status,2, status,0, cstack
 15611 ;; Tracked objects:
 15612 ;;		On entry : 0/0
 15613 ;;		On exit  : 0/0
 15614 ;;		Unchanged: 0/0
 15615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15616 ;;      Params:         0       0       0       0       0       0       0
 15617 ;;      Locals:         0       0       1       0       0       0       0
 15618 ;;      Temps:          0       0       0       0       0       0       0
 15619 ;;      Totals:         0       0       1       0       0       0       0
 15620 ;;Total ram usage:        1 bytes
 15621 ;; Hardware stack levels used:    1
 15622 ;; Hardware stack levels required when called:   14
 15623 ;; This function calls:
 15624 ;;		_subirCuchilla
 15625 ;; This function is called by:
 15626 ;;		_pressRETRO
 15627 ;;		_longPressRETRO
 15628 ;;		_pressENTER
 15629 ;; This function uses a non-reentrant model
 15630 ;;
 15631                           
 15632                           	psect	text63
 15633  006E60                     __ptext63:
 15634                           	opt stack 0
 15635  006E60                     _initProtocoll:
 15636                           	opt stack 14
 15637                           
 15638                           ;incstack = 0
 15639                           ;initProtocoll@init stored from wreg
 15640  006E60  0101               	movlb	1	; () banked
 15641  006E62  6F06               	movwf	initProtocoll@init& (0+255),b
 15642                           
 15643                           ;PWMConfig.h: 62: if(init) {
 15644  006E64  0101               	movlb	1	; () banked
 15645  006E66  5106               	movf	initProtocoll@init& (0+255),w,b
 15646  006E68  0101               	movlb	1	; () banked
 15647  006E6A  B4D8               	btfsc	status,2,c
 15648  006E6C  0012               	return	
 15649                           
 15650                           ; BSR set to: 1
 15651                           ;PWMConfig.h: 63: LATCbits.LATC5 = 0;
 15652  006E6E  9A8B               	bcf	3979,5,c	;volatile
 15653                           
 15654                           ; BSR set to: 1
 15655                           ;PWMConfig.h: 64: processTimer = 0;
 15656  006E70  0E00               	movlw	0
 15657  006E72  6E3B               	movwf	_processTimer,c
 15658  006E74  0E00               	movlw	0
 15659  006E76  6E3C               	movwf	_processTimer+1,c
 15660  006E78  0E00               	movlw	0
 15661  006E7A  6E3D               	movwf	_processTimer+2,c
 15662  006E7C  0E00               	movlw	0
 15663  006E7E  6E3E               	movwf	_processTimer+3,c
 15664                           
 15665                           ;PWMConfig.h: 65: processState = 0;
 15666  006E80  0E00               	movlw	0
 15667  006E82  0100               	movlb	0	; () banked
 15668  006E84  6FB3               	movwf	(_processState+1)& (0+255),b
 15669  006E86  0E00               	movlw	0
 15670  006E88  6FB2               	movwf	_processState& (0+255),b
 15671                           
 15672                           ; BSR set to: 0
 15673                           ;PWMConfig.h: 66: if(!bladeIsUP)
 15674  006E8A  0100               	movlb	0	; () banked
 15675  006E8C  51BD               	movf	_bladeIsUP& (0+255),w,b
 15676  006E8E  A4D8               	btfss	status,2,c
 15677  006E90  0012               	return	
 15678                           
 15679                           ; BSR set to: 0
 15680                           ;PWMConfig.h: 67: subirCuchilla();
 15681  006E92  EC5E  F039         	call	_subirCuchilla	;wreg free
 15682  006E96  0012               	return	
 15683  006E98                     __end_of_initProtocoll:
 15684                           	opt stack 0
 15685                           tblptru	equ	0xFF8
 15686                           tblptrh	equ	0xFF7
 15687                           tblptrl	equ	0xFF6
 15688                           tablat	equ	0xFF5
 15689                           prodh	equ	0xFF4
 15690                           prodl	equ	0xFF3
 15691                           intcon	equ	0xFF2
 15692                           postinc0	equ	0xFEE
 15693                           wreg	equ	0xFE8
 15694                           postdec1	equ	0xFE5
 15695                           fsr1l	equ	0xFE1
 15696                           indf2	equ	0xFDF
 15697                           postinc2	equ	0xFDE
 15698                           postdec2	equ	0xFDD
 15699                           plusw2	equ	0xFDB
 15700                           fsr2h	equ	0xFDA
 15701                           fsr2l	equ	0xFD9
 15702                           status	equ	0xFD8
 15703                           
 15704 ;; *************** function _subirCuchilla *****************
 15705 ;; Defined at:
 15706 ;;		line 49 in file "source/PWMConfig.h"
 15707 ;; Parameters:    Size  Location     Type
 15708 ;;		None
 15709 ;; Auto vars:     Size  Location     Type
 15710 ;;		None
 15711 ;; Return value:  Size  Location     Type
 15712 ;;                  1    wreg      void 
 15713 ;; Registers used:
 15714 ;;		wreg, status,2, status,0, cstack
 15715 ;; Tracked objects:
 15716 ;;		On entry : 0/0
 15717 ;;		On exit  : 0/0
 15718 ;;		Unchanged: 0/0
 15719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15720 ;;      Params:         0       0       0       0       0       0       0
 15721 ;;      Locals:         0       0       0       0       0       0       0
 15722 ;;      Temps:          0       0       0       0       0       0       0
 15723 ;;      Totals:         0       0       0       0       0       0       0
 15724 ;;Total ram usage:        0 bytes
 15725 ;; Hardware stack levels used:    1
 15726 ;; Hardware stack levels required when called:   13
 15727 ;; This function calls:
 15728 ;;		_setPWM2duty
 15729 ;; This function is called by:
 15730 ;;		_initProtocoll
 15731 ;;		_initCalib
 15732 ;; This function uses a non-reentrant model
 15733 ;;
 15734                           
 15735                           	psect	text64
 15736  0072BC                     __ptext64:
 15737                           	opt stack 0
 15738  0072BC                     _subirCuchilla:
 15739                           	opt stack 14
 15740                           
 15741                           ;PWMConfig.h: 50: setPWM2duty(-400);
 15742                           
 15743                           ;incstack = 0
 15744  0072BC  0EFE               	movlw	254
 15745  0072BE  0101               	movlb	1	; () banked
 15746  0072C0  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 15747  0072C2  0E70               	movlw	112
 15748  0072C4  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 15749  0072C6  EC40  F02F         	call	_setPWM2duty	;wreg free
 15750  0072CA  0012               	return		;funcret
 15751  0072CC                     __end_of_subirCuchilla:
 15752                           	opt stack 0
 15753                           tblptru	equ	0xFF8
 15754                           tblptrh	equ	0xFF7
 15755                           tblptrl	equ	0xFF6
 15756                           tablat	equ	0xFF5
 15757                           prodh	equ	0xFF4
 15758                           prodl	equ	0xFF3
 15759                           intcon	equ	0xFF2
 15760                           postinc0	equ	0xFEE
 15761                           wreg	equ	0xFE8
 15762                           postdec1	equ	0xFE5
 15763                           fsr1l	equ	0xFE1
 15764                           indf2	equ	0xFDF
 15765                           postinc2	equ	0xFDE
 15766                           postdec2	equ	0xFDD
 15767                           plusw2	equ	0xFDB
 15768                           fsr2h	equ	0xFDA
 15769                           fsr2l	equ	0xFD9
 15770                           status	equ	0xFD8
 15771                           
 15772 ;; *************** function _longPressENTER *****************
 15773 ;; Defined at:
 15774 ;;		line 423 in file "source/DisplayProtocol.h"
 15775 ;; Parameters:    Size  Location     Type
 15776 ;;		None
 15777 ;; Auto vars:     Size  Location     Type
 15778 ;;  temp            3   76[BANK1 ] float 
 15779 ;; Return value:  Size  Location     Type
 15780 ;;                  1    wreg      void 
 15781 ;; Registers used:
 15782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15783 ;; Tracked objects:
 15784 ;;		On entry : 0/0
 15785 ;;		On exit  : 0/0
 15786 ;;		Unchanged: 0/0
 15787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15788 ;;      Params:         0       0       0       0       0       0       0
 15789 ;;      Locals:         0       0       6       0       0       0       0
 15790 ;;      Temps:          0       0       0       0       0       0       0
 15791 ;;      Totals:         0       0       6       0       0       0       0
 15792 ;;Total ram usage:        6 bytes
 15793 ;; Hardware stack levels used:    1
 15794 ;; Hardware stack levels required when called:   17
 15795 ;; This function calls:
 15796 ;;		___ftadd
 15797 ;;		___ftdiv
 15798 ;;		___ftmul
 15799 ;;		_calcVars2ti
 15800 ;;		_confirmEdition
 15801 ;;		_desintegrator
 15802 ;;		_integrator
 15803 ;; This function is called by:
 15804 ;;		_buttonChecking
 15805 ;; This function uses a non-reentrant model
 15806 ;;
 15807                           
 15808                           	psect	text65
 15809  00192E                     __ptext65:
 15810                           	opt stack 0
 15811  00192E                     _longPressENTER:
 15812                           	opt stack 12
 15813                           
 15814                           ;DisplayProtocol.h: 424: if (!ENTERisLP) {
 15815                           
 15816                           ;incstack = 0
 15817  00192E  0101               	movlb	1	; () banked
 15818  001930  51BE               	movf	_ENTERisLP& (0+255),w,b
 15819  001932  A4D8               	btfss	status,2,c
 15820  001934  0012               	return	
 15821                           
 15822                           ; BSR set to: 1
 15823                           ;DisplayProtocol.h: 425: ENTERisLP = 1;
 15824  001936  0E01               	movlw	1
 15825  001938  0101               	movlb	1	; () banked
 15826  00193A  6FBE               	movwf	_ENTERisLP& (0+255),b
 15827                           
 15828                           ;DisplayProtocol.h: 426: if(actualScreen == 0 || actualScreen == 4) {
 15829  00193C  0101               	movlb	1	; () banked
 15830  00193E  51BD               	movf	_actualScreen& (0+255),w,b
 15831  001940  B4D8               	btfsc	status,2,c
 15832  001942  D005               	goto	l11549
 15833                           
 15834                           ; BSR set to: 1
 15835  001944  0E04               	movlw	4
 15836  001946  0101               	movlb	1	; () banked
 15837  001948  19BD               	xorwf	_actualScreen& (0+255),w,b
 15838  00194A  A4D8               	btfss	status,2,c
 15839  00194C  D025               	goto	l11565
 15840  00194E                     l11549:
 15841                           
 15842                           ; BSR set to: 1
 15843                           ;DisplayProtocol.h: 427: if (holdUPcont > 5) {
 15844  00194E  0E05               	movlw	5
 15845  001950  0101               	movlb	1	; () banked
 15846  001952  65BF               	cpfsgt	_holdUPcont& (0+255),b
 15847  001954  D014               	goto	l11559
 15848                           
 15849                           ; BSR set to: 1
 15850                           ;DisplayProtocol.h: 428: if (actualScreen == 0) {
 15851  001956  0101               	movlb	1	; () banked
 15852  001958  51BD               	movf	_actualScreen& (0+255),w,b
 15853  00195A  A4D8               	btfss	status,2,c
 15854  00195C  D007               	goto	l11555
 15855                           
 15856                           ; BSR set to: 1
 15857                           ;DisplayProtocol.h: 429: actualScreen = 1;
 15858  00195E  0E01               	movlw	1
 15859  001960  0101               	movlb	1	; () banked
 15860  001962  6FBD               	movwf	_actualScreen& (0+255),b
 15861                           
 15862                           ;DisplayProtocol.h: 430: fd = 0;
 15863  001964  0E00               	movlw	0
 15864  001966  0101               	movlb	1	; () banked
 15865  001968  6FB9               	movwf	_fd& (0+255),b
 15866                           
 15867                           ;DisplayProtocol.h: 431: } else if (actualScreen == 4)
 15868  00196A  0012               	return	
 15869  00196C                     l11555:
 15870                           
 15871                           ; BSR set to: 1
 15872  00196C  0E04               	movlw	4
 15873  00196E  0101               	movlb	1	; () banked
 15874  001970  19BD               	xorwf	_actualScreen& (0+255),w,b
 15875  001972  A4D8               	btfss	status,2,c
 15876  001974  0012               	return	
 15877                           
 15878                           ; BSR set to: 1
 15879                           ;DisplayProtocol.h: 432: actualScreen = 9;
 15880  001976  0E09               	movlw	9
 15881  001978  0101               	movlb	1	; () banked
 15882  00197A  6FBD               	movwf	_actualScreen& (0+255),b
 15883                           
 15884                           ; BSR set to: 1
 15885                           ;DisplayProtocol.h: 433: } else if(!processStarted) {
 15886                           
 15887                           ; BSR set to: 1
 15888  00197C  0012               	return	
 15889  00197E                     l11559:
 15890                           
 15891                           ; BSR set to: 1
 15892  00197E  0100               	movlb	0	; () banked
 15893  001980  51C0               	movf	_processStarted& (0+255),w,b
 15894  001982  A4D8               	btfss	status,2,c
 15895  001984  0012               	return	
 15896                           
 15897                           ; BSR set to: 0
 15898                           ;DisplayProtocol.h: 434: tempLastScreen = actualScreen;
 15899  001986  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 15900                           
 15901                           ; BSR set to: 0
 15902                           ;DisplayProtocol.h: 435: actualScreen = 2;
 15903  00198A  0E02               	movlw	2
 15904  00198C  0101               	movlb	1	; () banked
 15905  00198E  6FBD               	movwf	_actualScreen& (0+255),b
 15906                           
 15907                           ;DisplayProtocol.h: 436: selSN = 1;
 15908  001990  0E01               	movlw	1
 15909  001992  0101               	movlb	1	; () banked
 15910  001994  6FBA               	movwf	_selSN& (0+255),b
 15911                           
 15912                           ; BSR set to: 1
 15913                           ;DisplayProtocol.h: 437: }
 15914                           ;DisplayProtocol.h: 438: }else if(actualScreen == 5) {
 15915                           
 15916                           ; BSR set to: 1
 15917  001996  0012               	return	
 15918  001998                     l11565:
 15919                           
 15920                           ; BSR set to: 1
 15921  001998  0E05               	movlw	5
 15922  00199A  0101               	movlb	1	; () banked
 15923  00199C  19BD               	xorwf	_actualScreen& (0+255),w,b
 15924  00199E  A4D8               	btfss	status,2,c
 15925  0019A0  D010               	goto	l11573
 15926                           
 15927                           ; BSR set to: 1
 15928                           ;DisplayProtocol.h: 439: if(menuSection != 2)
 15929  0019A2  0E02               	movlw	2
 15930  0019A4  0101               	movlb	1	; () banked
 15931  0019A6  19BC               	xorwf	_menuSection& (0+255),w,b
 15932  0019A8  A4D8               	btfss	status,2,c
 15933                           
 15934                           ; BSR set to: 1
 15935                           ;DisplayProtocol.h: 440: integrator();
 15936  0019AA  ECCD  F020         	call	_integrator	;wreg free
 15937                           
 15938                           ;DisplayProtocol.h: 441: confirmEdition(!processStarted);
 15939  0019AE  0100               	movlb	0	; () banked
 15940  0019B0  51C0               	movf	_processStarted& (0+255),w,b
 15941  0019B2  A4D8               	btfss	status,2,c
 15942  0019B4  D002               	goto	u17320
 15943  0019B6  0E01               	movlw	1
 15944  0019B8  D001               	goto	u17330
 15945  0019BA                     u17320:
 15946  0019BA  0E00               	movlw	0
 15947  0019BC                     u17330:
 15948  0019BC  ECA1  F02C         	call	_confirmEdition
 15949                           
 15950                           ;DisplayProtocol.h: 442: }else if(actualScreen == 12) {
 15951  0019C0  0012               	return	
 15952  0019C2                     l11573:
 15953  0019C2  0E0C               	movlw	12
 15954  0019C4  0101               	movlb	1	; () banked
 15955  0019C6  19BD               	xorwf	_actualScreen& (0+255),w,b
 15956  0019C8  A4D8               	btfss	status,2,c
 15957  0019CA  0012               	return	
 15958                           
 15959                           ; BSR set to: 1
 15960                           ;DisplayProtocol.h: 443: tempLastScreen = 6;
 15961  0019CC  0E06               	movlw	6
 15962  0019CE  0100               	movlb	0	; () banked
 15963  0019D0  6FBA               	movwf	_tempLastScreen& (0+255),b
 15964                           
 15965                           ; BSR set to: 0
 15966                           ;DisplayProtocol.h: 444: integrator();
 15967  0019D2  ECCD  F020         	call	_integrator	;wreg free
 15968                           
 15969                           ;DisplayProtocol.h: 445: if(calibLevel == 0) {
 15970  0019D6  0101               	movlb	1	; () banked
 15971  0019D8  51B8               	movf	_calibLevel& (0+255),w,b
 15972  0019DA  A4D8               	btfss	status,2,c
 15973  0019DC  D069               	goto	l11601
 15974                           
 15975                           ; BSR set to: 1
 15976                           ;DisplayProtocol.h: 446: tempVelocidadMasa1 = (float)chanValf / tiXcorte;
 15977  0019DE  C1B1  F112         	movff	_chanValf,___ftdiv@f1
 15978  0019E2  C1B2  F113         	movff	_chanValf+1,___ftdiv@f1+1
 15979  0019E6  C1B3  F114         	movff	_chanValf+2,___ftdiv@f1+2
 15980  0019EA  C195  F115         	movff	_tiXcorte,___ftdiv@f2
 15981  0019EE  C196  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 15982  0019F2  C197  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 15983  0019F6  EC3D  F01E         	call	___ftdiv	;wreg free
 15984  0019FA  C112  F1A0         	movff	?___ftdiv,_tempVelocidadMasa1
 15985  0019FE  C113  F1A1         	movff	?___ftdiv+1,_tempVelocidadMasa1+1
 15986  001A02  C114  F1A2         	movff	?___ftdiv+2,_tempVelocidadMasa1+2
 15987                           
 15988                           ;DisplayProtocol.h: 447: tiXcorte = (float)0.5f / tempVelocidadMasa1;
 15989  001A06  0E00               	movlw	0
 15990  001A08  0101               	movlb	1	; () banked
 15991  001A0A  6F12               	movwf	___ftdiv@f1& (0+255),b
 15992  001A0C  0E00               	movlw	0
 15993  001A0E  0101               	movlb	1	; () banked
 15994  001A10  6F13               	movwf	(___ftdiv@f1+1)& (0+255),b
 15995  001A12  0E3F               	movlw	63
 15996  001A14  0101               	movlb	1	; () banked
 15997  001A16  6F14               	movwf	(___ftdiv@f1+2)& (0+255),b
 15998  001A18  C1A0  F115         	movff	_tempVelocidadMasa1,___ftdiv@f2
 15999  001A1C  C1A1  F116         	movff	_tempVelocidadMasa1+1,___ftdiv@f2+1
 16000  001A20  C1A2  F117         	movff	_tempVelocidadMasa1+2,___ftdiv@f2+2
 16001  001A24  EC3D  F01E         	call	___ftdiv	;wreg free
 16002  001A28  C112  F195         	movff	?___ftdiv,_tiXcorte
 16003  001A2C  C113  F196         	movff	?___ftdiv+1,_tiXcorte+1
 16004  001A30  C114  F197         	movff	?___ftdiv+2,_tiXcorte+2
 16005                           
 16006                           ;DisplayProtocol.h: 448: timsXcorte = (float)tiXcorte * 1000;
 16007  001A34  C195  F114         	movff	_tiXcorte,___ftmul@f1
 16008  001A38  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 16009  001A3C  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 16010  001A40  0E00               	movlw	0
 16011  001A42  0101               	movlb	1	; () banked
 16012  001A44  6F17               	movwf	___ftmul@f2& (0+255),b
 16013  001A46  0E7A               	movlw	122
 16014  001A48  0101               	movlb	1	; () banked
 16015  001A4A  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 16016  001A4C  0E44               	movlw	68
 16017  001A4E  0101               	movlb	1	; () banked
 16018  001A50  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 16019  001A52  EC35  F01C         	call	___ftmul	;wreg free
 16020  001A56  C114  F055         	movff	?___ftmul,_timsXcorte
 16021  001A5A  C115  F056         	movff	?___ftmul+1,_timsXcorte+1
 16022  001A5E  C116  F057         	movff	?___ftmul+2,_timsXcorte+2
 16023                           
 16024                           ;DisplayProtocol.h: 449: calibLevel = 1;
 16025  001A62  0E01               	movlw	1
 16026  001A64  0101               	movlb	1	; () banked
 16027  001A66  6FB8               	movwf	_calibLevel& (0+255),b
 16028                           
 16029                           ; BSR set to: 1
 16030                           ;DisplayProtocol.h: 450: numCortes = 1;
 16031  001A68  0E00               	movlw	0
 16032  001A6A  0100               	movlb	0	; () banked
 16033  001A6C  6FD3               	movwf	(_numCortes+1)& (0+255),b
 16034  001A6E  0E01               	movlw	1
 16035  001A70  6FD2               	movwf	_numCortes& (0+255),b
 16036                           
 16037                           ; BSR set to: 0
 16038                           ;DisplayProtocol.h: 451: processState = 0;
 16039  001A72  0E00               	movlw	0
 16040  001A74  0100               	movlb	0	; () banked
 16041  001A76  6FB3               	movwf	(_processState+1)& (0+255),b
 16042  001A78  0E00               	movlw	0
 16043  001A7A  6FB2               	movwf	_processState& (0+255),b
 16044                           
 16045                           ; BSR set to: 0
 16046                           ;DisplayProtocol.h: 452: processTimer = 0;
 16047  001A7C  0E00               	movlw	0
 16048  001A7E  6E3B               	movwf	_processTimer,c
 16049  001A80  0E00               	movlw	0
 16050  001A82  6E3C               	movwf	_processTimer+1,c
 16051  001A84  0E00               	movlw	0
 16052  001A86  6E3D               	movwf	_processTimer+2,c
 16053  001A88  0E00               	movlw	0
 16054  001A8A  6E3E               	movwf	_processTimer+3,c
 16055                           
 16056                           ; BSR set to: 0
 16057                           ;DisplayProtocol.h: 454: actualScreen = tempLastScreen;
 16058  001A8C  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 16059                           
 16060                           ; BSR set to: 0
 16061                           ;DisplayProtocol.h: 455: chanValf = (float)0.50f;;
 16062  001A90  0E00               	movlw	0
 16063  001A92  0101               	movlb	1	; () banked
 16064  001A94  6FB1               	movwf	_chanValf& (0+255),b
 16065  001A96  0E00               	movlw	0
 16066  001A98  0101               	movlb	1	; () banked
 16067  001A9A  6FB2               	movwf	(_chanValf+1)& (0+255),b
 16068  001A9C  0E3F               	movlw	63
 16069  001A9E  0101               	movlb	1	; () banked
 16070  001AA0  6FB3               	movwf	(_chanValf+2)& (0+255),b
 16071                           
 16072                           ; BSR set to: 1
 16073                           ;DisplayProtocol.h: 456: desintegrator();
 16074  001AA2  ECFC  F018         	call	_desintegrator	;wreg free
 16075                           
 16076                           ;DisplayProtocol.h: 457: LATCbits.LATC4 = 1;
 16077  001AA6  888B               	bsf	3979,4,c	;volatile
 16078                           
 16079                           ;DisplayProtocol.h: 458: processStarted = 1;
 16080  001AA8  0E01               	movlw	1
 16081  001AAA  0100               	movlb	0	; () banked
 16082  001AAC  6FC0               	movwf	_processStarted& (0+255),b
 16083                           
 16084                           ;DisplayProtocol.h: 459: }else if(calibLevel == 1) {
 16085  001AAE  0012               	return	
 16086  001AB0                     l11601:
 16087  001AB0  0101               	movlb	1	; () banked
 16088  001AB2  05B8               	decf	_calibLevel& (0+255),w,b
 16089  001AB4  A4D8               	btfss	status,2,c
 16090  001AB6  D069               	goto	l11623
 16091                           
 16092                           ; BSR set to: 1
 16093                           ;DisplayProtocol.h: 460: tempVelocidadMasa2 = (float)chanValf / tiXcorte;
 16094  001AB8  C1B1  F112         	movff	_chanValf,___ftdiv@f1
 16095  001ABC  C1B2  F113         	movff	_chanValf+1,___ftdiv@f1+1
 16096  001AC0  C1B3  F114         	movff	_chanValf+2,___ftdiv@f1+2
 16097  001AC4  C195  F115         	movff	_tiXcorte,___ftdiv@f2
 16098  001AC8  C196  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 16099  001ACC  C197  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 16100  001AD0  EC3D  F01E         	call	___ftdiv	;wreg free
 16101  001AD4  C112  F19D         	movff	?___ftdiv,_tempVelocidadMasa2
 16102  001AD8  C113  F19E         	movff	?___ftdiv+1,_tempVelocidadMasa2+1
 16103  001ADC  C114  F19F         	movff	?___ftdiv+2,_tempVelocidadMasa2+2
 16104                           
 16105                           ;DisplayProtocol.h: 461: tiXcorte = (float)0.25f / tempVelocidadMasa2;
 16106  001AE0  0E00               	movlw	0
 16107  001AE2  0101               	movlb	1	; () banked
 16108  001AE4  6F12               	movwf	___ftdiv@f1& (0+255),b
 16109  001AE6  0E80               	movlw	128
 16110  001AE8  0101               	movlb	1	; () banked
 16111  001AEA  6F13               	movwf	(___ftdiv@f1+1)& (0+255),b
 16112  001AEC  0E3E               	movlw	62
 16113  001AEE  0101               	movlb	1	; () banked
 16114  001AF0  6F14               	movwf	(___ftdiv@f1+2)& (0+255),b
 16115  001AF2  C19D  F115         	movff	_tempVelocidadMasa2,___ftdiv@f2
 16116  001AF6  C19E  F116         	movff	_tempVelocidadMasa2+1,___ftdiv@f2+1
 16117  001AFA  C19F  F117         	movff	_tempVelocidadMasa2+2,___ftdiv@f2+2
 16118  001AFE  EC3D  F01E         	call	___ftdiv	;wreg free
 16119  001B02  C112  F195         	movff	?___ftdiv,_tiXcorte
 16120  001B06  C113  F196         	movff	?___ftdiv+1,_tiXcorte+1
 16121  001B0A  C114  F197         	movff	?___ftdiv+2,_tiXcorte+2
 16122                           
 16123                           ;DisplayProtocol.h: 462: timsXcorte = (float)tiXcorte * 1000;
 16124  001B0E  C195  F114         	movff	_tiXcorte,___ftmul@f1
 16125  001B12  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 16126  001B16  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 16127  001B1A  0E00               	movlw	0
 16128  001B1C  0101               	movlb	1	; () banked
 16129  001B1E  6F17               	movwf	___ftmul@f2& (0+255),b
 16130  001B20  0E7A               	movlw	122
 16131  001B22  0101               	movlb	1	; () banked
 16132  001B24  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 16133  001B26  0E44               	movlw	68
 16134  001B28  0101               	movlb	1	; () banked
 16135  001B2A  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 16136  001B2C  EC35  F01C         	call	___ftmul	;wreg free
 16137  001B30  C114  F055         	movff	?___ftmul,_timsXcorte
 16138  001B34  C115  F056         	movff	?___ftmul+1,_timsXcorte+1
 16139  001B38  C116  F057         	movff	?___ftmul+2,_timsXcorte+2
 16140                           
 16141                           ;DisplayProtocol.h: 463: calibLevel = 2;
 16142  001B3C  0E02               	movlw	2
 16143  001B3E  0101               	movlb	1	; () banked
 16144  001B40  6FB8               	movwf	_calibLevel& (0+255),b
 16145                           
 16146                           ; BSR set to: 1
 16147                           ;DisplayProtocol.h: 464: numCortes = 1;
 16148  001B42  0E00               	movlw	0
 16149  001B44  0100               	movlb	0	; () banked
 16150  001B46  6FD3               	movwf	(_numCortes+1)& (0+255),b
 16151  001B48  0E01               	movlw	1
 16152  001B4A  6FD2               	movwf	_numCortes& (0+255),b
 16153                           
 16154                           ; BSR set to: 0
 16155                           ;DisplayProtocol.h: 465: processState = 0;
 16156  001B4C  0E00               	movlw	0
 16157  001B4E  0100               	movlb	0	; () banked
 16158  001B50  6FB3               	movwf	(_processState+1)& (0+255),b
 16159  001B52  0E00               	movlw	0
 16160  001B54  6FB2               	movwf	_processState& (0+255),b
 16161                           
 16162                           ; BSR set to: 0
 16163                           ;DisplayProtocol.h: 466: processTimer = 0;
 16164  001B56  0E00               	movlw	0
 16165  001B58  6E3B               	movwf	_processTimer,c
 16166  001B5A  0E00               	movlw	0
 16167  001B5C  6E3C               	movwf	_processTimer+1,c
 16168  001B5E  0E00               	movlw	0
 16169  001B60  6E3D               	movwf	_processTimer+2,c
 16170  001B62  0E00               	movlw	0
 16171  001B64  6E3E               	movwf	_processTimer+3,c
 16172                           
 16173                           ; BSR set to: 0
 16174                           ;DisplayProtocol.h: 468: actualScreen = tempLastScreen;
 16175  001B66  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 16176                           
 16177                           ; BSR set to: 0
 16178                           ;DisplayProtocol.h: 469: chanValf = (float)0.25f;
 16179  001B6A  0E00               	movlw	0
 16180  001B6C  0101               	movlb	1	; () banked
 16181  001B6E  6FB1               	movwf	_chanValf& (0+255),b
 16182  001B70  0E80               	movlw	128
 16183  001B72  0101               	movlb	1	; () banked
 16184  001B74  6FB2               	movwf	(_chanValf+1)& (0+255),b
 16185  001B76  0E3E               	movlw	62
 16186  001B78  0101               	movlb	1	; () banked
 16187  001B7A  6FB3               	movwf	(_chanValf+2)& (0+255),b
 16188                           
 16189                           ; BSR set to: 1
 16190                           ;DisplayProtocol.h: 470: desintegrator();
 16191  001B7C  ECFC  F018         	call	_desintegrator	;wreg free
 16192                           
 16193                           ;DisplayProtocol.h: 471: LATCbits.LATC4 = 1;
 16194  001B80  888B               	bsf	3979,4,c	;volatile
 16195                           
 16196                           ;DisplayProtocol.h: 472: processStarted = 1;
 16197  001B82  0E01               	movlw	1
 16198  001B84  0100               	movlb	0	; () banked
 16199  001B86  6FC0               	movwf	_processStarted& (0+255),b
 16200                           
 16201                           ;DisplayProtocol.h: 473: }else if(calibLevel == 2) {
 16202  001B88  0012               	return	
 16203  001B8A                     l11623:
 16204  001B8A  0E02               	movlw	2
 16205  001B8C  0101               	movlb	1	; () banked
 16206  001B8E  19B8               	xorwf	_calibLevel& (0+255),w,b
 16207  001B90  A4D8               	btfss	status,2,c
 16208  001B92  0012               	return	
 16209                           
 16210                           ; BSR set to: 1
 16211                           ;DisplayProtocol.h: 474: tempVelocidadMasa3 = (float)chanValf / tiXcorte;
 16212  001B94  C1B1  F112         	movff	_chanValf,___ftdiv@f1
 16213  001B98  C1B2  F113         	movff	_chanValf+1,___ftdiv@f1+1
 16214  001B9C  C1B3  F114         	movff	_chanValf+2,___ftdiv@f1+2
 16215  001BA0  C195  F115         	movff	_tiXcorte,___ftdiv@f2
 16216  001BA4  C196  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 16217  001BA8  C197  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 16218  001BAC  EC3D  F01E         	call	___ftdiv	;wreg free
 16219  001BB0  C112  F192         	movff	?___ftdiv,_tempVelocidadMasa3
 16220  001BB4  C113  F193         	movff	?___ftdiv+1,_tempVelocidadMasa3+1
 16221  001BB8  C114  F194         	movff	?___ftdiv+2,_tempVelocidadMasa3+2
 16222                           
 16223                           ;DisplayProtocol.h: 475: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 16224  001BBC  C19D  F130         	movff	_tempVelocidadMasa2,___ftadd@f2
 16225  001BC0  C19E  F131         	movff	_tempVelocidadMasa2+1,___ftadd@f2+1
 16226  001BC4  C19F  F132         	movff	_tempVelocidadMasa2+2,___ftadd@f2+2
 16227  001BC8  C1A0  F12D         	movff	_tempVelocidadMasa1,___ftadd@f1
 16228  001BCC  C1A1  F12E         	movff	_tempVelocidadMasa1+1,___ftadd@f1+1
 16229  001BD0  C1A2  F12F         	movff	_tempVelocidadMasa1+2,___ftadd@f1+2
 16230  001BD4  ECE4  F013         	call	___ftadd	;wreg free
 16231  001BD8  C12D  F14F         	movff	?___ftadd,_longPressENTER$2843
 16232  001BDC  C12E  F150         	movff	?___ftadd+1,_longPressENTER$2843+1
 16233  001BE0  C12F  F151         	movff	?___ftadd+2,_longPressENTER$2843+2
 16234                           
 16235                           ;DisplayProtocol.h: 475: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 16236  001BE4  C14F  F12D         	movff	_longPressENTER$2843,___ftadd@f1
 16237  001BE8  C150  F12E         	movff	_longPressENTER$2843+1,___ftadd@f1+1
 16238  001BEC  C151  F12F         	movff	_longPressENTER$2843+2,___ftadd@f1+2
 16239  001BF0  C192  F130         	movff	_tempVelocidadMasa3,___ftadd@f2
 16240  001BF4  C193  F131         	movff	_tempVelocidadMasa3+1,___ftadd@f2+1
 16241  001BF8  C194  F132         	movff	_tempVelocidadMasa3+2,___ftadd@f2+2
 16242  001BFC  ECE4  F013         	call	___ftadd	;wreg free
 16243  001C00  C12D  F14C         	movff	?___ftadd,longPressENTER@temp
 16244  001C04  C12E  F14D         	movff	?___ftadd+1,longPressENTER@temp+1
 16245  001C08  C12F  F14E         	movff	?___ftadd+2,longPressENTER@temp+2
 16246                           
 16247                           ;DisplayProtocol.h: 476: chanValf = (float)temp / 3.0f;
 16248  001C0C  C14C  F112         	movff	longPressENTER@temp,___ftdiv@f1
 16249  001C10  C14D  F113         	movff	longPressENTER@temp+1,___ftdiv@f1+1
 16250  001C14  C14E  F114         	movff	longPressENTER@temp+2,___ftdiv@f1+2
 16251  001C18  0E00               	movlw	0
 16252  001C1A  0101               	movlb	1	; () banked
 16253  001C1C  6F15               	movwf	___ftdiv@f2& (0+255),b
 16254  001C1E  0E40               	movlw	64
 16255  001C20  0101               	movlb	1	; () banked
 16256  001C22  6F16               	movwf	(___ftdiv@f2+1)& (0+255),b
 16257  001C24  0E40               	movlw	64
 16258  001C26  0101               	movlb	1	; () banked
 16259  001C28  6F17               	movwf	(___ftdiv@f2+2)& (0+255),b
 16260  001C2A  EC3D  F01E         	call	___ftdiv	;wreg free
 16261  001C2E  C112  F1B1         	movff	?___ftdiv,_chanValf
 16262  001C32  C113  F1B2         	movff	?___ftdiv+1,_chanValf+1
 16263  001C36  C114  F1B3         	movff	?___ftdiv+2,_chanValf+2
 16264                           
 16265                           ;DisplayProtocol.h: 477: numCortes = tempNumCortes;
 16266  001C3A  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 16267  001C3E  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 16268                           
 16269                           ;DisplayProtocol.h: 478: calcVars2ti();
 16270  001C42  ECBD  F035         	call	_calcVars2ti	;wreg free
 16271                           
 16272                           ;DisplayProtocol.h: 479: calibMode = 0;
 16273  001C46  0E00               	movlw	0
 16274  001C48  0100               	movlb	0	; () banked
 16275  001C4A  6FBE               	movwf	_calibMode& (0+255),b
 16276                           
 16277                           ; BSR set to: 0
 16278                           ;DisplayProtocol.h: 480: confirmEdition(!processStarted);
 16279  001C4C  0100               	movlb	0	; () banked
 16280  001C4E  51C0               	movf	_processStarted& (0+255),w,b
 16281  001C50  A4D8               	btfss	status,2,c
 16282  001C52  D002               	goto	u17380
 16283  001C54  0E01               	movlw	1
 16284  001C56  D001               	goto	u17390
 16285  001C58                     u17380:
 16286  001C58  0E00               	movlw	0
 16287  001C5A                     u17390:
 16288  001C5A  ECA1  F02C         	call	_confirmEdition
 16289  001C5E  0012               	return	
 16290  001C60                     __end_of_longPressENTER:
 16291                           	opt stack 0
 16292                           tblptru	equ	0xFF8
 16293                           tblptrh	equ	0xFF7
 16294                           tblptrl	equ	0xFF6
 16295                           tablat	equ	0xFF5
 16296                           prodh	equ	0xFF4
 16297                           prodl	equ	0xFF3
 16298                           intcon	equ	0xFF2
 16299                           postinc0	equ	0xFEE
 16300                           wreg	equ	0xFE8
 16301                           postdec1	equ	0xFE5
 16302                           fsr1l	equ	0xFE1
 16303                           indf2	equ	0xFDF
 16304                           postinc2	equ	0xFDE
 16305                           postdec2	equ	0xFDD
 16306                           plusw2	equ	0xFDB
 16307                           fsr2h	equ	0xFDA
 16308                           fsr2l	equ	0xFD9
 16309                           status	equ	0xFD8
 16310                           
 16311 ;; *************** function _integrator *****************
 16312 ;; Defined at:
 16313 ;;		line 61 in file "source/DisplayProtocol.h"
 16314 ;; Parameters:    Size  Location     Type
 16315 ;;		None
 16316 ;; Auto vars:     Size  Location     Type
 16317 ;;  temp            4   39[BANK1 ] long 
 16318 ;;  acum            4   35[BANK1 ] long 
 16319 ;;  i               2   43[BANK1 ] int 
 16320 ;; Return value:  Size  Location     Type
 16321 ;;                  1    wreg      void 
 16322 ;; Registers used:
 16323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16324 ;; Tracked objects:
 16325 ;;		On entry : 0/0
 16326 ;;		On exit  : 0/0
 16327 ;;		Unchanged: 0/0
 16328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16329 ;;      Params:         0       0       0       0       0       0       0
 16330 ;;      Locals:         0       0      10       0       0       0       0
 16331 ;;      Temps:          0       0       2       0       0       0       0
 16332 ;;      Totals:         0       0      12       0       0       0       0
 16333 ;;Total ram usage:       12 bytes
 16334 ;; Hardware stack levels used:    1
 16335 ;; Hardware stack levels required when called:   14
 16336 ;; This function calls:
 16337 ;;		___altoft
 16338 ;;		___ftdiv
 16339 ;;		___lmul
 16340 ;; This function is called by:
 16341 ;;		_longPressENTER
 16342 ;; This function uses a non-reentrant model
 16343 ;;
 16344                           
 16345                           	psect	text66
 16346  00419A                     __ptext66:
 16347                           	opt stack 0
 16348  00419A                     _integrator:
 16349                           	opt stack 14
 16350                           
 16351                           ;DisplayProtocol.h: 62: long acum = 0;
 16352                           
 16353                           ;incstack = 0
 16354  00419A  0E00               	movlw	0
 16355  00419C  0101               	movlb	1	; () banked
 16356  00419E  6F23               	movwf	integrator@acum& (0+255),b
 16357  0041A0  0E00               	movlw	0
 16358  0041A2  6F24               	movwf	(integrator@acum+1)& (0+255),b
 16359  0041A4  0E00               	movlw	0
 16360  0041A6  6F25               	movwf	(integrator@acum+2)& (0+255),b
 16361  0041A8  0E00               	movlw	0
 16362  0041AA  6F26               	movwf	(integrator@acum+3)& (0+255),b
 16363                           
 16364                           ;DisplayProtocol.h: 63: long temp = 0;
 16365  0041AC  0E00               	movlw	0
 16366  0041AE  0101               	movlb	1	; () banked
 16367  0041B0  6F27               	movwf	integrator@temp& (0+255),b
 16368  0041B2  0E00               	movlw	0
 16369  0041B4  6F28               	movwf	(integrator@temp+1)& (0+255),b
 16370  0041B6  0E00               	movlw	0
 16371  0041B8  6F29               	movwf	(integrator@temp+2)& (0+255),b
 16372  0041BA  0E00               	movlw	0
 16373  0041BC  6F2A               	movwf	(integrator@temp+3)& (0+255),b
 16374                           
 16375                           ;DisplayProtocol.h: 64: int i;
 16376                           ;DisplayProtocol.h: 65: for(i = 0; i < 6; i++) {
 16377  0041BE  0E00               	movlw	0
 16378  0041C0  0101               	movlb	1	; () banked
 16379  0041C2  6F2C               	movwf	(integrator@i+1)& (0+255),b
 16380  0041C4  0E00               	movlw	0
 16381  0041C6  6F2B               	movwf	integrator@i& (0+255),b
 16382  0041C8                     l10877:
 16383                           
 16384                           ; BSR set to: 1
 16385  0041C8  0101               	movlb	1	; () banked
 16386  0041CA  BF2C               	btfsc	(integrator@i+1)& (0+255),7,b
 16387  0041CC  D008               	goto	l10881
 16388  0041CE  0101               	movlb	1	; () banked
 16389  0041D0  512C               	movf	(integrator@i+1)& (0+255),w,b
 16390  0041D2  E152               	bnz	l10889
 16391  0041D4  0E06               	movlw	6
 16392  0041D6  0101               	movlb	1	; () banked
 16393  0041D8  5D2B               	subwf	integrator@i& (0+255),w,b
 16394  0041DA  B0D8               	btfsc	status,0,c
 16395  0041DC  D04D               	goto	l10889
 16396  0041DE                     l10881:
 16397                           
 16398                           ; BSR set to: 1
 16399                           ;DisplayProtocol.h: 66: temp = (long)chanValdig[i]*exp10[i];
 16400  0041DE  0EA3               	movlw	low _chanValdig
 16401  0041E0  0101               	movlb	1	; () banked
 16402  0041E2  252B               	addwf	integrator@i& (0+255),w,b
 16403  0041E4  6ED9               	movwf	fsr2l,c
 16404  0041E6  0E01               	movlw	high _chanValdig
 16405  0041E8  0101               	movlb	1	; () banked
 16406  0041EA  212C               	addwfc	(integrator@i+1)& (0+255),w,b
 16407  0041EC  6EDA               	movwf	fsr2h,c
 16408  0041EE  50DF               	movf	indf2,w,c
 16409  0041F0  0101               	movlb	1	; () banked
 16410  0041F2  6F00               	movwf	___lmul@multiplier& (0+255),b
 16411  0041F4  0E00               	movlw	0
 16412  0041F6  BF00               	btfsc	___lmul@multiplier& (0+255),7,b
 16413  0041F8  0EFF               	movlw	-1
 16414  0041FA  6F01               	movwf	(___lmul@multiplier+1)& (0+255),b
 16415  0041FC  6F02               	movwf	(___lmul@multiplier+2)& (0+255),b
 16416  0041FE  6F03               	movwf	(___lmul@multiplier+3)& (0+255),b
 16417  004200  0E77               	movlw	low _exp10
 16418  004202  0101               	movlb	1	; () banked
 16419  004204  6F21               	movwf	??_integrator& (0+255),b
 16420  004206  0E01               	movlw	high _exp10
 16421  004208  0101               	movlb	1	; () banked
 16422  00420A  6F22               	movwf	(??_integrator+1)& (0+255),b
 16423  00420C  90D8               	bcf	status,0,c
 16424  00420E  0101               	movlb	1	; () banked
 16425  004210  352B               	rlcf	integrator@i& (0+255),w,b
 16426  004212  6ED9               	movwf	fsr2l,c
 16427  004214  0101               	movlb	1	; () banked
 16428  004216  352C               	rlcf	(integrator@i+1)& (0+255),w,b
 16429  004218  6EDA               	movwf	fsr2h,c
 16430  00421A  90D8               	bcf	status,0,c
 16431  00421C  36D9               	rlcf	fsr2l,f,c
 16432  00421E  36DA               	rlcf	fsr2h,f,c
 16433  004220  0101               	movlb	1	; () banked
 16434  004222  5121               	movf	??_integrator& (0+255),w,b
 16435  004224  26D9               	addwf	fsr2l,f,c
 16436  004226  0101               	movlb	1	; () banked
 16437  004228  5122               	movf	(??_integrator+1)& (0+255),w,b
 16438  00422A  22DA               	addwfc	fsr2h,f,c
 16439  00422C  CFDE F104          	movff	postinc2,___lmul@multiplicand
 16440  004230  CFDE F105          	movff	postinc2,___lmul@multiplicand+1
 16441  004234  CFDE F106          	movff	postinc2,___lmul@multiplicand+2
 16442  004238  CFDE F107          	movff	postinc2,___lmul@multiplicand+3
 16443  00423C  ECC3  F033         	call	___lmul	;wreg free
 16444  004240  C100  F127         	movff	?___lmul,integrator@temp
 16445  004244  C101  F128         	movff	?___lmul+1,integrator@temp+1
 16446  004248  C102  F129         	movff	?___lmul+2,integrator@temp+2
 16447  00424C  C103  F12A         	movff	?___lmul+3,integrator@temp+3
 16448                           
 16449                           ;DisplayProtocol.h: 67: acum += temp;
 16450  004250  0101               	movlb	1	; () banked
 16451  004252  5127               	movf	integrator@temp& (0+255),w,b
 16452  004254  0101               	movlb	1	; () banked
 16453  004256  2723               	addwf	integrator@acum& (0+255),f,b
 16454  004258  0101               	movlb	1	; () banked
 16455  00425A  5128               	movf	(integrator@temp+1)& (0+255),w,b
 16456  00425C  0101               	movlb	1	; () banked
 16457  00425E  2324               	addwfc	(integrator@acum+1)& (0+255),f,b
 16458  004260  0101               	movlb	1	; () banked
 16459  004262  5129               	movf	(integrator@temp+2)& (0+255),w,b
 16460  004264  0101               	movlb	1	; () banked
 16461  004266  2325               	addwfc	(integrator@acum+2)& (0+255),f,b
 16462  004268  0101               	movlb	1	; () banked
 16463  00426A  512A               	movf	(integrator@temp+3)& (0+255),w,b
 16464  00426C  0101               	movlb	1	; () banked
 16465  00426E  2326               	addwfc	(integrator@acum+3)& (0+255),f,b
 16466                           
 16467                           ; BSR set to: 1
 16468  004270  0101               	movlb	1	; () banked
 16469  004272  4B2B               	infsnz	integrator@i& (0+255),f,b
 16470  004274  2B2C               	incf	(integrator@i+1)& (0+255),f,b
 16471  004276  D7A8               	goto	l10877
 16472  004278                     l10889:
 16473                           
 16474                           ; BSR set to: 1
 16475                           ;DisplayProtocol.h: 68: }
 16476                           ;DisplayProtocol.h: 69: chanValf = (float)acum / 1000;
 16477  004278  C123  F108         	movff	integrator@acum,___altoft@c
 16478  00427C  C124  F109         	movff	integrator@acum+1,___altoft@c+1
 16479  004280  C125  F10A         	movff	integrator@acum+2,___altoft@c+2
 16480  004284  C126  F10B         	movff	integrator@acum+3,___altoft@c+3
 16481  004288  EC55  F02E         	call	___altoft	;wreg free
 16482  00428C  C108  F112         	movff	?___altoft,___ftdiv@f1
 16483  004290  C109  F113         	movff	?___altoft+1,___ftdiv@f1+1
 16484  004294  C10A  F114         	movff	?___altoft+2,___ftdiv@f1+2
 16485  004298  0E00               	movlw	0
 16486  00429A  0101               	movlb	1	; () banked
 16487  00429C  6F15               	movwf	___ftdiv@f2& (0+255),b
 16488  00429E  0E7A               	movlw	122
 16489  0042A0  0101               	movlb	1	; () banked
 16490  0042A2  6F16               	movwf	(___ftdiv@f2+1)& (0+255),b
 16491  0042A4  0E44               	movlw	68
 16492  0042A6  0101               	movlb	1	; () banked
 16493  0042A8  6F17               	movwf	(___ftdiv@f2+2)& (0+255),b
 16494  0042AA  EC3D  F01E         	call	___ftdiv	;wreg free
 16495  0042AE  C112  F1B1         	movff	?___ftdiv,_chanValf
 16496  0042B2  C113  F1B2         	movff	?___ftdiv+1,_chanValf+1
 16497  0042B6  C114  F1B3         	movff	?___ftdiv+2,_chanValf+2
 16498  0042BA  0012               	return		;funcret
 16499  0042BC                     __end_of_integrator:
 16500                           	opt stack 0
 16501                           tblptru	equ	0xFF8
 16502                           tblptrh	equ	0xFF7
 16503                           tblptrl	equ	0xFF6
 16504                           tablat	equ	0xFF5
 16505                           prodh	equ	0xFF4
 16506                           prodl	equ	0xFF3
 16507                           intcon	equ	0xFF2
 16508                           postinc0	equ	0xFEE
 16509                           wreg	equ	0xFE8
 16510                           postdec1	equ	0xFE5
 16511                           fsr1l	equ	0xFE1
 16512                           indf2	equ	0xFDF
 16513                           postinc2	equ	0xFDE
 16514                           postdec2	equ	0xFDD
 16515                           plusw2	equ	0xFDB
 16516                           fsr2h	equ	0xFDA
 16517                           fsr2l	equ	0xFD9
 16518                           status	equ	0xFD8
 16519                           
 16520 ;; *************** function ___altoft *****************
 16521 ;; Defined at:
 16522 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\altoft.c"
 16523 ;; Parameters:    Size  Location     Type
 16524 ;;  c               4    8[BANK1 ] long 
 16525 ;; Auto vars:     Size  Location     Type
 16526 ;;  sign            1   17[BANK1 ] unsigned char 
 16527 ;;  exp             1   16[BANK1 ] unsigned char 
 16528 ;; Return value:  Size  Location     Type
 16529 ;;                  3    8[BANK1 ] float 
 16530 ;; Registers used:
 16531 ;;		wreg, status,2, status,0, cstack
 16532 ;; Tracked objects:
 16533 ;;		On entry : 0/0
 16534 ;;		On exit  : 0/0
 16535 ;;		Unchanged: 0/0
 16536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16537 ;;      Params:         0       0       4       0       0       0       0
 16538 ;;      Locals:         0       0       2       0       0       0       0
 16539 ;;      Temps:          0       0       4       0       0       0       0
 16540 ;;      Totals:         0       0      10       0       0       0       0
 16541 ;;Total ram usage:       10 bytes
 16542 ;; Hardware stack levels used:    1
 16543 ;; Hardware stack levels required when called:   13
 16544 ;; This function calls:
 16545 ;;		___ftpack
 16546 ;; This function is called by:
 16547 ;;		_integrator
 16548 ;; This function uses a non-reentrant model
 16549 ;;
 16550                           
 16551                           	psect	text67
 16552  005CAA                     __ptext67:
 16553                           	opt stack 0
 16554  005CAA                     ___altoft:
 16555                           	opt stack 14
 16556                           
 16557                           ;incstack = 0
 16558  005CAA  0E00               	movlw	0
 16559  005CAC  0101               	movlb	1	; () banked
 16560  005CAE  6F11               	movwf	___altoft@sign& (0+255),b
 16561  005CB0  0E8E               	movlw	142
 16562  005CB2  0101               	movlb	1	; () banked
 16563  005CB4  6F10               	movwf	___altoft@exp& (0+255),b
 16564                           
 16565                           ; BSR set to: 1
 16566  005CB6  0101               	movlb	1	; () banked
 16567  005CB8  AF0B               	btfss	(___altoft@c+3)& (0+255),7,b
 16568  005CBA  D015               	goto	l10763
 16569                           
 16570                           ; BSR set to: 1
 16571  005CBC  0101               	movlb	1	; () banked
 16572  005CBE  1F0B               	comf	(___altoft@c+3)& (0+255),f,b
 16573  005CC0  1F0A               	comf	(___altoft@c+2)& (0+255),f,b
 16574  005CC2  1F09               	comf	(___altoft@c+1)& (0+255),f,b
 16575  005CC4  6D08               	negf	___altoft@c& (0+255),b
 16576  005CC6  0E00               	movlw	0
 16577  005CC8  2309               	addwfc	(___altoft@c+1)& (0+255),f,b
 16578  005CCA  230A               	addwfc	(___altoft@c+2)& (0+255),f,b
 16579  005CCC  230B               	addwfc	(___altoft@c+3)& (0+255),f,b
 16580                           
 16581                           ; BSR set to: 1
 16582  005CCE  0E01               	movlw	1
 16583  005CD0  0101               	movlb	1	; () banked
 16584  005CD2  6F11               	movwf	___altoft@sign& (0+255),b
 16585                           
 16586                           ; BSR set to: 1
 16587  005CD4  D008               	goto	l10763
 16588  005CD6                     l10761:
 16589                           
 16590                           ; BSR set to: 1
 16591  005CD6  0101               	movlb	1	; () banked
 16592  005CD8  90D8               	bcf	status,0,c
 16593  005CDA  330B               	rrcf	(___altoft@c+3)& (0+255),f,b
 16594  005CDC  330A               	rrcf	(___altoft@c+2)& (0+255),f,b
 16595  005CDE  3309               	rrcf	(___altoft@c+1)& (0+255),f,b
 16596  005CE0  3308               	rrcf	___altoft@c& (0+255),f,b
 16597  005CE2  0101               	movlb	1	; () banked
 16598  005CE4  2B10               	incf	___altoft@exp& (0+255),f,b
 16599  005CE6                     l10763:
 16600                           
 16601                           ; BSR set to: 1
 16602  005CE6  0E00               	movlw	0
 16603  005CE8  0101               	movlb	1	; () banked
 16604  005CEA  1508               	andwf	___altoft@c& (0+255),w,b
 16605  005CEC  0101               	movlb	1	; () banked
 16606  005CEE  6F0C               	movwf	??___altoft& (0+255),b
 16607  005CF0  0E00               	movlw	0
 16608  005CF2  0101               	movlb	1	; () banked
 16609  005CF4  1509               	andwf	(___altoft@c+1)& (0+255),w,b
 16610  005CF6  0101               	movlb	1	; () banked
 16611  005CF8  6F0D               	movwf	(??___altoft+1)& (0+255),b
 16612  005CFA  0E00               	movlw	0
 16613  005CFC  0101               	movlb	1	; () banked
 16614  005CFE  150A               	andwf	(___altoft@c+2)& (0+255),w,b
 16615  005D00  0101               	movlb	1	; () banked
 16616  005D02  6F0E               	movwf	(??___altoft+2)& (0+255),b
 16617  005D04  0EFF               	movlw	255
 16618  005D06  0101               	movlb	1	; () banked
 16619  005D08  150B               	andwf	(___altoft@c+3)& (0+255),w,b
 16620  005D0A  0101               	movlb	1	; () banked
 16621  005D0C  6F0F               	movwf	(??___altoft+3)& (0+255),b
 16622  005D0E  0101               	movlb	1	; () banked
 16623  005D10  510C               	movf	??___altoft& (0+255),w,b
 16624  005D12  0101               	movlb	1	; () banked
 16625  005D14  110D               	iorwf	(??___altoft+1)& (0+255),w,b
 16626  005D16  0101               	movlb	1	; () banked
 16627  005D18  110E               	iorwf	(??___altoft+2)& (0+255),w,b
 16628  005D1A  0101               	movlb	1	; () banked
 16629  005D1C  110F               	iorwf	(??___altoft+3)& (0+255),w,b
 16630  005D1E  A4D8               	btfss	status,2,c
 16631  005D20  D7DA               	goto	l10761
 16632                           
 16633                           ; BSR set to: 1
 16634                           
 16635                           ; BSR set to: 1
 16636  005D22  C108  F100         	movff	___altoft@c,___ftpack@arg
 16637  005D26  C109  F101         	movff	___altoft@c+1,___ftpack@arg+1
 16638  005D2A  C10A  F102         	movff	___altoft@c+2,___ftpack@arg+2
 16639  005D2E  C110  F103         	movff	___altoft@exp,___ftpack@exp
 16640  005D32  C111  F104         	movff	___altoft@sign,___ftpack@sign
 16641  005D36  EC29  F025         	call	___ftpack	;wreg free
 16642  005D3A  C100  F108         	movff	?___ftpack,?___altoft
 16643  005D3E  C101  F109         	movff	?___ftpack+1,?___altoft+1
 16644  005D42  C102  F10A         	movff	?___ftpack+2,?___altoft+2
 16645  005D46  0012               	return	
 16646  005D48                     __end_of___altoft:
 16647                           	opt stack 0
 16648                           tblptru	equ	0xFF8
 16649                           tblptrh	equ	0xFF7
 16650                           tblptrl	equ	0xFF6
 16651                           tablat	equ	0xFF5
 16652                           prodh	equ	0xFF4
 16653                           prodl	equ	0xFF3
 16654                           intcon	equ	0xFF2
 16655                           postinc0	equ	0xFEE
 16656                           wreg	equ	0xFE8
 16657                           postdec1	equ	0xFE5
 16658                           fsr1l	equ	0xFE1
 16659                           indf2	equ	0xFDF
 16660                           postinc2	equ	0xFDE
 16661                           postdec2	equ	0xFDD
 16662                           plusw2	equ	0xFDB
 16663                           fsr2h	equ	0xFDA
 16664                           fsr2l	equ	0xFD9
 16665                           status	equ	0xFD8
 16666                           
 16667 ;; *************** function _desintegrator *****************
 16668 ;; Defined at:
 16669 ;;		line 46 in file "source/DisplayProtocol.h"
 16670 ;; Parameters:    Size  Location     Type
 16671 ;;		None
 16672 ;; Auto vars:     Size  Location     Type
 16673 ;;  temp2           4   70[BANK1 ] long 
 16674 ;;  temp3           4   66[BANK1 ] long 
 16675 ;;  tempL           4   62[BANK1 ] long 
 16676 ;;  temp            3   59[BANK1 ] float 
 16677 ;;  i               2   74[BANK1 ] int 
 16678 ;; Return value:  Size  Location     Type
 16679 ;;                  1    wreg      void 
 16680 ;; Registers used:
 16681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16682 ;; Tracked objects:
 16683 ;;		On entry : 0/0
 16684 ;;		On exit  : 0/0
 16685 ;;		Unchanged: 0/0
 16686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16687 ;;      Params:         0       0       0       0       0       0       0
 16688 ;;      Locals:         0       0      17       0       0       0       0
 16689 ;;      Temps:          0       0       2       0       0       0       0
 16690 ;;      Totals:         0       0      19       0       0       0       0
 16691 ;;Total ram usage:       19 bytes
 16692 ;; Hardware stack levels used:    1
 16693 ;; Hardware stack levels required when called:   14
 16694 ;; This function calls:
 16695 ;;		___aldiv
 16696 ;;		___ftmul
 16697 ;;		___fttol
 16698 ;;		___lmul
 16699 ;; This function is called by:
 16700 ;;		_pressENTER
 16701 ;;		_longPressENTER
 16702 ;; This function uses a non-reentrant model
 16703 ;;
 16704                           
 16705                           	psect	text68
 16706  0031F8                     __ptext68:
 16707                           	opt stack 0
 16708  0031F8                     _desintegrator:
 16709                           	opt stack 14
 16710                           
 16711                           ;DisplayProtocol.h: 47: chanValSection = 5;
 16712                           
 16713                           ;incstack = 0
 16714  0031F8  0E05               	movlw	5
 16715  0031FA  0101               	movlb	1	; () banked
 16716  0031FC  6F9C               	movwf	_chanValSection& (0+255),b
 16717                           
 16718                           ; BSR set to: 1
 16719                           ;DisplayProtocol.h: 48: float temp = (float)chanValf*1000;
 16720  0031FE  C1B1  F114         	movff	_chanValf,___ftmul@f1
 16721  003202  C1B2  F115         	movff	_chanValf+1,___ftmul@f1+1
 16722  003206  C1B3  F116         	movff	_chanValf+2,___ftmul@f1+2
 16723  00320A  0E00               	movlw	0
 16724  00320C  0101               	movlb	1	; () banked
 16725  00320E  6F17               	movwf	___ftmul@f2& (0+255),b
 16726  003210  0E7A               	movlw	122
 16727  003212  0101               	movlb	1	; () banked
 16728  003214  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 16729  003216  0E44               	movlw	68
 16730  003218  0101               	movlb	1	; () banked
 16731  00321A  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 16732  00321C  EC35  F01C         	call	___ftmul	;wreg free
 16733  003220  C114  F13B         	movff	?___ftmul,desintegrator@temp
 16734  003224  C115  F13C         	movff	?___ftmul+1,desintegrator@temp+1
 16735  003228  C116  F13D         	movff	?___ftmul+2,desintegrator@temp+2
 16736                           
 16737                           ;DisplayProtocol.h: 49: long tempL = (long)temp;
 16738  00322C  C13B  F12A         	movff	desintegrator@temp,___fttol@f1
 16739  003230  C13C  F12B         	movff	desintegrator@temp+1,___fttol@f1+1
 16740  003234  C13D  F12C         	movff	desintegrator@temp+2,___fttol@f1+2
 16741  003238  EC89  F01F         	call	___fttol	;wreg free
 16742  00323C  C12A  F13E         	movff	?___fttol,desintegrator@tempL
 16743  003240  C12B  F13F         	movff	?___fttol+1,desintegrator@tempL+1
 16744  003244  C12C  F140         	movff	?___fttol+2,desintegrator@tempL+2
 16745  003248  C12D  F141         	movff	?___fttol+3,desintegrator@tempL+3
 16746                           
 16747                           ;DisplayProtocol.h: 50: long temp2 = 0;
 16748  00324C  0E00               	movlw	0
 16749  00324E  0101               	movlb	1	; () banked
 16750  003250  6F46               	movwf	desintegrator@temp2& (0+255),b
 16751  003252  0E00               	movlw	0
 16752  003254  6F47               	movwf	(desintegrator@temp2+1)& (0+255),b
 16753  003256  0E00               	movlw	0
 16754  003258  6F48               	movwf	(desintegrator@temp2+2)& (0+255),b
 16755  00325A  0E00               	movlw	0
 16756  00325C  6F49               	movwf	(desintegrator@temp2+3)& (0+255),b
 16757                           
 16758                           ;DisplayProtocol.h: 51: long temp3 = 0;
 16759  00325E  0E00               	movlw	0
 16760  003260  0101               	movlb	1	; () banked
 16761  003262  6F42               	movwf	desintegrator@temp3& (0+255),b
 16762  003264  0E00               	movlw	0
 16763  003266  6F43               	movwf	(desintegrator@temp3+1)& (0+255),b
 16764  003268  0E00               	movlw	0
 16765  00326A  6F44               	movwf	(desintegrator@temp3+2)& (0+255),b
 16766  00326C  0E00               	movlw	0
 16767  00326E  6F45               	movwf	(desintegrator@temp3+3)& (0+255),b
 16768                           
 16769                           ;DisplayProtocol.h: 52: int i;
 16770                           ;DisplayProtocol.h: 53: for(i = 0; i < 6; i++) {
 16771  003270  0E00               	movlw	0
 16772  003272  0101               	movlb	1	; () banked
 16773  003274  6F4B               	movwf	(desintegrator@i+1)& (0+255),b
 16774  003276  0E00               	movlw	0
 16775  003278  6F4A               	movwf	desintegrator@i& (0+255),b
 16776                           
 16777                           ; BSR set to: 1
 16778  00327A  0101               	movlb	1	; () banked
 16779  00327C  BF4B               	btfsc	(desintegrator@i+1)& (0+255),7,b
 16780  00327E  D00A               	goto	l10865
 16781  003280  0101               	movlb	1	; () banked
 16782  003282  514B               	movf	(desintegrator@i+1)& (0+255),w,b
 16783  003284  E106               	bnz	u15950
 16784  003286  0E06               	movlw	6
 16785  003288  0101               	movlb	1	; () banked
 16786  00328A  5D4A               	subwf	desintegrator@i& (0+255),w,b
 16787  00328C  B0D8               	btfsc	status,0,c
 16788  00328E  0012               	return	
 16789  003290  D001               	goto	l10865
 16790  003292                     u15950:
 16791                           
 16792                           ; BSR set to: 1
 16793  003292  0012               	return	
 16794  003294                     l10865:
 16795                           
 16796                           ; BSR set to: 1
 16797                           ;DisplayProtocol.h: 54: temp2 = tempL/exp10[i];
 16798  003294  C13E  F100         	movff	desintegrator@tempL,___aldiv@dividend
 16799  003298  C13F  F101         	movff	desintegrator@tempL+1,___aldiv@dividend+1
 16800  00329C  C140  F102         	movff	desintegrator@tempL+2,___aldiv@dividend+2
 16801  0032A0  C141  F103         	movff	desintegrator@tempL+3,___aldiv@dividend+3
 16802  0032A4  0E77               	movlw	low _exp10
 16803  0032A6  0101               	movlb	1	; () banked
 16804  0032A8  6F39               	movwf	??_desintegrator& (0+255),b
 16805  0032AA  0E01               	movlw	high _exp10
 16806  0032AC  0101               	movlb	1	; () banked
 16807  0032AE  6F3A               	movwf	(??_desintegrator+1)& (0+255),b
 16808  0032B0  90D8               	bcf	status,0,c
 16809  0032B2  0101               	movlb	1	; () banked
 16810  0032B4  354A               	rlcf	desintegrator@i& (0+255),w,b
 16811  0032B6  6ED9               	movwf	fsr2l,c
 16812  0032B8  0101               	movlb	1	; () banked
 16813  0032BA  354B               	rlcf	(desintegrator@i+1)& (0+255),w,b
 16814  0032BC  6EDA               	movwf	fsr2h,c
 16815  0032BE  90D8               	bcf	status,0,c
 16816  0032C0  36D9               	rlcf	fsr2l,f,c
 16817  0032C2  36DA               	rlcf	fsr2h,f,c
 16818  0032C4  0101               	movlb	1	; () banked
 16819  0032C6  5139               	movf	??_desintegrator& (0+255),w,b
 16820  0032C8  26D9               	addwf	fsr2l,f,c
 16821  0032CA  0101               	movlb	1	; () banked
 16822  0032CC  513A               	movf	(??_desintegrator+1)& (0+255),w,b
 16823  0032CE  22DA               	addwfc	fsr2h,f,c
 16824  0032D0  CFDE F104          	movff	postinc2,___aldiv@divisor
 16825  0032D4  CFDE F105          	movff	postinc2,___aldiv@divisor+1
 16826  0032D8  CFDE F106          	movff	postinc2,___aldiv@divisor+2
 16827  0032DC  CFDE F107          	movff	postinc2,___aldiv@divisor+3
 16828  0032E0  ECEF  F021         	call	___aldiv	;wreg free
 16829  0032E4  C100  F146         	movff	?___aldiv,desintegrator@temp2
 16830  0032E8  C101  F147         	movff	?___aldiv+1,desintegrator@temp2+1
 16831  0032EC  C102  F148         	movff	?___aldiv+2,desintegrator@temp2+2
 16832  0032F0  C103  F149         	movff	?___aldiv+3,desintegrator@temp2+3
 16833                           
 16834                           ;DisplayProtocol.h: 55: temp3 = temp2*exp10[i];
 16835  0032F4  0E77               	movlw	low _exp10
 16836  0032F6  0101               	movlb	1	; () banked
 16837  0032F8  6F39               	movwf	??_desintegrator& (0+255),b
 16838  0032FA  0E01               	movlw	high _exp10
 16839  0032FC  0101               	movlb	1	; () banked
 16840  0032FE  6F3A               	movwf	(??_desintegrator+1)& (0+255),b
 16841  003300  90D8               	bcf	status,0,c
 16842  003302  0101               	movlb	1	; () banked
 16843  003304  354A               	rlcf	desintegrator@i& (0+255),w,b
 16844  003306  6ED9               	movwf	fsr2l,c
 16845  003308  0101               	movlb	1	; () banked
 16846  00330A  354B               	rlcf	(desintegrator@i+1)& (0+255),w,b
 16847  00330C  6EDA               	movwf	fsr2h,c
 16848  00330E  90D8               	bcf	status,0,c
 16849  003310  36D9               	rlcf	fsr2l,f,c
 16850  003312  36DA               	rlcf	fsr2h,f,c
 16851  003314  0101               	movlb	1	; () banked
 16852  003316  5139               	movf	??_desintegrator& (0+255),w,b
 16853  003318  26D9               	addwf	fsr2l,f,c
 16854  00331A  0101               	movlb	1	; () banked
 16855  00331C  513A               	movf	(??_desintegrator+1)& (0+255),w,b
 16856  00331E  22DA               	addwfc	fsr2h,f,c
 16857  003320  CFDE F100          	movff	postinc2,___lmul@multiplier
 16858  003324  CFDE F101          	movff	postinc2,___lmul@multiplier+1
 16859  003328  CFDE F102          	movff	postinc2,___lmul@multiplier+2
 16860  00332C  CFDE F103          	movff	postinc2,___lmul@multiplier+3
 16861  003330  C146  F104         	movff	desintegrator@temp2,___lmul@multiplicand
 16862  003334  C147  F105         	movff	desintegrator@temp2+1,___lmul@multiplicand+1
 16863  003338  C148  F106         	movff	desintegrator@temp2+2,___lmul@multiplicand+2
 16864  00333C  C149  F107         	movff	desintegrator@temp2+3,___lmul@multiplicand+3
 16865  003340  ECC3  F033         	call	___lmul	;wreg free
 16866  003344  C100  F142         	movff	?___lmul,desintegrator@temp3
 16867  003348  C101  F143         	movff	?___lmul+1,desintegrator@temp3+1
 16868  00334C  C102  F144         	movff	?___lmul+2,desintegrator@temp3+2
 16869  003350  C103  F145         	movff	?___lmul+3,desintegrator@temp3+3
 16870                           
 16871                           ;DisplayProtocol.h: 56: chanValdig[i] = temp2;
 16872  003354  0EA3               	movlw	low _chanValdig
 16873  003356  0101               	movlb	1	; () banked
 16874  003358  254A               	addwf	desintegrator@i& (0+255),w,b
 16875  00335A  6ED9               	movwf	fsr2l,c
 16876  00335C  0E01               	movlw	high _chanValdig
 16877  00335E  0101               	movlb	1	; () banked
 16878  003360  214B               	addwfc	(desintegrator@i+1)& (0+255),w,b
 16879  003362  6EDA               	movwf	fsr2h,c
 16880  003364  C146  FFDF         	movff	desintegrator@temp2,indf2
 16881                           
 16882                           ; BSR set to: 1
 16883                           ;DisplayProtocol.h: 57: tempL -= temp3;
 16884  003368  0101               	movlb	1	; () banked
 16885  00336A  5142               	movf	desintegrator@temp3& (0+255),w,b
 16886  00336C  0101               	movlb	1	; () banked
 16887  00336E  5F3E               	subwf	desintegrator@tempL& (0+255),f,b
 16888  003370  0101               	movlb	1	; () banked
 16889  003372  5143               	movf	(desintegrator@temp3+1)& (0+255),w,b
 16890  003374  0101               	movlb	1	; () banked
 16891  003376  5B3F               	subwfb	(desintegrator@tempL+1)& (0+255),f,b
 16892  003378  0101               	movlb	1	; () banked
 16893  00337A  5144               	movf	(desintegrator@temp3+2)& (0+255),w,b
 16894  00337C  0101               	movlb	1	; () banked
 16895  00337E  5B40               	subwfb	(desintegrator@tempL+2)& (0+255),f,b
 16896  003380  0101               	movlb	1	; () banked
 16897  003382  5145               	movf	(desintegrator@temp3+3)& (0+255),w,b
 16898  003384  0101               	movlb	1	; () banked
 16899  003386  5B41               	subwfb	(desintegrator@tempL+3)& (0+255),f,b
 16900                           
 16901                           ; BSR set to: 1
 16902  003388  0101               	movlb	1	; () banked
 16903  00338A  4B4A               	infsnz	desintegrator@i& (0+255),f,b
 16904  00338C  2B4B               	incf	(desintegrator@i+1)& (0+255),f,b
 16905                           
 16906                           ; BSR set to: 1
 16907  00338E  0101               	movlb	1	; () banked
 16908  003390  BF4B               	btfsc	(desintegrator@i+1)& (0+255),7,b
 16909  003392  D780               	goto	l10865
 16910  003394  0101               	movlb	1	; () banked
 16911  003396  514B               	movf	(desintegrator@i+1)& (0+255),w,b
 16912  003398  E101               	bnz	l574
 16913  00339A  D775               	goto	L6
 16914  00339C                     l574:
 16915                           
 16916                           ; BSR set to: 1
 16917  00339C  0012               	return		;funcret
 16918  00339E                     __end_of_desintegrator:
 16919                           	opt stack 0
 16920                           tblptru	equ	0xFF8
 16921                           tblptrh	equ	0xFF7
 16922                           tblptrl	equ	0xFF6
 16923                           tablat	equ	0xFF5
 16924                           prodh	equ	0xFF4
 16925                           prodl	equ	0xFF3
 16926                           intcon	equ	0xFF2
 16927                           postinc0	equ	0xFEE
 16928                           wreg	equ	0xFE8
 16929                           postdec1	equ	0xFE5
 16930                           fsr1l	equ	0xFE1
 16931                           indf2	equ	0xFDF
 16932                           postinc2	equ	0xFDE
 16933                           postdec2	equ	0xFDD
 16934                           plusw2	equ	0xFDB
 16935                           fsr2h	equ	0xFDA
 16936                           fsr2l	equ	0xFD9
 16937                           status	equ	0xFD8
 16938                           
 16939 ;; *************** function ___lmul *****************
 16940 ;; Defined at:
 16941 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
 16942 ;; Parameters:    Size  Location     Type
 16943 ;;  multiplier      4    0[BANK1 ] unsigned long 
 16944 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 16945 ;; Auto vars:     Size  Location     Type
 16946 ;;  product         4    8[BANK1 ] unsigned long 
 16947 ;; Return value:  Size  Location     Type
 16948 ;;                  4    0[BANK1 ] unsigned long 
 16949 ;; Registers used:
 16950 ;;		wreg, status,2, status,0
 16951 ;; Tracked objects:
 16952 ;;		On entry : 0/0
 16953 ;;		On exit  : 0/0
 16954 ;;		Unchanged: 0/0
 16955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16956 ;;      Params:         0       0       8       0       0       0       0
 16957 ;;      Locals:         0       0       4       0       0       0       0
 16958 ;;      Temps:          0       0       0       0       0       0       0
 16959 ;;      Totals:         0       0      12       0       0       0       0
 16960 ;;Total ram usage:       12 bytes
 16961 ;; Hardware stack levels used:    1
 16962 ;; Hardware stack levels required when called:   12
 16963 ;; This function calls:
 16964 ;;		Nothing
 16965 ;; This function is called by:
 16966 ;;		_desintegrator
 16967 ;;		_integrator
 16968 ;; This function uses a non-reentrant model
 16969 ;;
 16970                           
 16971                           	psect	text69
 16972  006786                     __ptext69:
 16973                           	opt stack 0
 16974  006786                     ___lmul:
 16975                           	opt stack 15
 16976                           
 16977                           ; BSR set to: 1
 16978                           ;incstack = 0
 16979  006786  0E00               	movlw	0
 16980  006788  0101               	movlb	1	; () banked
 16981  00678A  6F08               	movwf	___lmul@product& (0+255),b
 16982  00678C  0E00               	movlw	0
 16983  00678E  6F09               	movwf	(___lmul@product+1)& (0+255),b
 16984  006790  0E00               	movlw	0
 16985  006792  6F0A               	movwf	(___lmul@product+2)& (0+255),b
 16986  006794  0E00               	movlw	0
 16987  006796  6F0B               	movwf	(___lmul@product+3)& (0+255),b
 16988  006798                     l10701:
 16989                           
 16990                           ; BSR set to: 1
 16991  006798  0101               	movlb	1	; () banked
 16992  00679A  A100               	btfss	___lmul@multiplier& (0+255),0,b
 16993  00679C  D010               	goto	l10705
 16994                           
 16995                           ; BSR set to: 1
 16996  00679E  0101               	movlb	1	; () banked
 16997  0067A0  5104               	movf	___lmul@multiplicand& (0+255),w,b
 16998  0067A2  0101               	movlb	1	; () banked
 16999  0067A4  2708               	addwf	___lmul@product& (0+255),f,b
 17000  0067A6  0101               	movlb	1	; () banked
 17001  0067A8  5105               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 17002  0067AA  0101               	movlb	1	; () banked
 17003  0067AC  2309               	addwfc	(___lmul@product+1)& (0+255),f,b
 17004  0067AE  0101               	movlb	1	; () banked
 17005  0067B0  5106               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 17006  0067B2  0101               	movlb	1	; () banked
 17007  0067B4  230A               	addwfc	(___lmul@product+2)& (0+255),f,b
 17008  0067B6  0101               	movlb	1	; () banked
 17009  0067B8  5107               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 17010  0067BA  0101               	movlb	1	; () banked
 17011  0067BC  230B               	addwfc	(___lmul@product+3)& (0+255),f,b
 17012  0067BE                     l10705:
 17013                           
 17014                           ; BSR set to: 1
 17015  0067BE  0101               	movlb	1	; () banked
 17016  0067C0  90D8               	bcf	status,0,c
 17017  0067C2  3704               	rlcf	___lmul@multiplicand& (0+255),f,b
 17018  0067C4  3705               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 17019  0067C6  3706               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 17020  0067C8  3707               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 17021                           
 17022                           ; BSR set to: 1
 17023  0067CA  0101               	movlb	1	; () banked
 17024  0067CC  90D8               	bcf	status,0,c
 17025  0067CE  3303               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 17026  0067D0  3302               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 17027  0067D2  3301               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 17028  0067D4  3300               	rrcf	___lmul@multiplier& (0+255),f,b
 17029  0067D6  0101               	movlb	1	; () banked
 17030  0067D8  5100               	movf	___lmul@multiplier& (0+255),w,b
 17031  0067DA  0101               	movlb	1	; () banked
 17032  0067DC  1101               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 17033  0067DE  0101               	movlb	1	; () banked
 17034  0067E0  1102               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 17035  0067E2  0101               	movlb	1	; () banked
 17036  0067E4  1103               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 17037  0067E6  A4D8               	btfss	status,2,c
 17038  0067E8  D7D7               	goto	l10701
 17039                           
 17040                           ; BSR set to: 1
 17041  0067EA  C108  F100         	movff	___lmul@product,?___lmul
 17042  0067EE  C109  F101         	movff	___lmul@product+1,?___lmul+1
 17043  0067F2  C10A  F102         	movff	___lmul@product+2,?___lmul+2
 17044  0067F6  C10B  F103         	movff	___lmul@product+3,?___lmul+3
 17045                           
 17046                           ; BSR set to: 1
 17047  0067FA  0012               	return		;funcret
 17048  0067FC                     __end_of___lmul:
 17049                           	opt stack 0
 17050                           tblptru	equ	0xFF8
 17051                           tblptrh	equ	0xFF7
 17052                           tblptrl	equ	0xFF6
 17053                           tablat	equ	0xFF5
 17054                           prodh	equ	0xFF4
 17055                           prodl	equ	0xFF3
 17056                           intcon	equ	0xFF2
 17057                           postinc0	equ	0xFEE
 17058                           wreg	equ	0xFE8
 17059                           postdec1	equ	0xFE5
 17060                           fsr1l	equ	0xFE1
 17061                           indf2	equ	0xFDF
 17062                           postinc2	equ	0xFDE
 17063                           postdec2	equ	0xFDD
 17064                           plusw2	equ	0xFDB
 17065                           fsr2h	equ	0xFDA
 17066                           fsr2l	equ	0xFD9
 17067                           status	equ	0xFD8
 17068                           
 17069 ;; *************** function ___fttol *****************
 17070 ;; Defined at:
 17071 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
 17072 ;; Parameters:    Size  Location     Type
 17073 ;;  f1              3   42[BANK1 ] float 
 17074 ;; Auto vars:     Size  Location     Type
 17075 ;;  lval            4   52[BANK1 ] unsigned long 
 17076 ;;  exp1            1   56[BANK1 ] unsigned char 
 17077 ;;  sign1           1   51[BANK1 ] unsigned char 
 17078 ;; Return value:  Size  Location     Type
 17079 ;;                  4   42[BANK1 ] long 
 17080 ;; Registers used:
 17081 ;;		wreg, status,2, status,0
 17082 ;; Tracked objects:
 17083 ;;		On entry : 0/0
 17084 ;;		On exit  : 0/0
 17085 ;;		Unchanged: 0/0
 17086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17087 ;;      Params:         0       0       4       0       0       0       0
 17088 ;;      Locals:         0       0       6       0       0       0       0
 17089 ;;      Temps:          0       0       5       0       0       0       0
 17090 ;;      Totals:         0       0      15       0       0       0       0
 17091 ;;Total ram usage:       15 bytes
 17092 ;; Hardware stack levels used:    1
 17093 ;; Hardware stack levels required when called:   12
 17094 ;; This function calls:
 17095 ;;		Nothing
 17096 ;; This function is called by:
 17097 ;;		_desintegrator
 17098 ;;		_printf
 17099 ;; This function uses a non-reentrant model
 17100 ;;
 17101                           
 17102                           	psect	text70
 17103  003F12                     __ptext70:
 17104                           	opt stack 0
 17105  003F12                     ___fttol:
 17106                           	opt stack 15
 17107                           
 17108                           ; BSR set to: 1
 17109                           ;incstack = 0
 17110  003F12  C12C  F12E         	movff	___fttol@f1+2,??___fttol
 17111  003F16  0101               	movlb	1	; () banked
 17112  003F18  6B2F               	clrf	(??___fttol+1)& (0+255),b
 17113  003F1A  6B30               	clrf	(??___fttol+2)& (0+255),b
 17114  003F1C  0101               	movlb	1	; () banked
 17115  003F1E  352B               	rlcf	(___fttol@f1+1)& (0+255),w,b
 17116  003F20  0101               	movlb	1	; () banked
 17117  003F22  372E               	rlcf	??___fttol& (0+255),f,b
 17118  003F24  E301               	bnc	u8231
 17119  003F26  812F               	bsf	(??___fttol+1)& (0+255),0,b
 17120  003F28                     u8231:
 17121  003F28  0101               	movlb	1	; () banked
 17122  003F2A  512E               	movf	??___fttol& (0+255),w,b
 17123  003F2C  0101               	movlb	1	; () banked
 17124  003F2E  6F38               	movwf	___fttol@exp1& (0+255),b
 17125  003F30  0101               	movlb	1	; () banked
 17126  003F32  5138               	movf	___fttol@exp1& (0+255),w,b
 17127  003F34  A4D8               	btfss	status,2,c
 17128  003F36  D00A               	goto	l6519
 17129                           
 17130                           ; BSR set to: 1
 17131  003F38  0E00               	movlw	0
 17132  003F3A  0101               	movlb	1	; () banked
 17133  003F3C  6F2A               	movwf	?___fttol& (0+255),b
 17134  003F3E  0E00               	movlw	0
 17135  003F40  6F2B               	movwf	(?___fttol+1)& (0+255),b
 17136  003F42  0E00               	movlw	0
 17137  003F44  6F2C               	movwf	(?___fttol+2)& (0+255),b
 17138  003F46  0E00               	movlw	0
 17139  003F48  6F2D               	movwf	(?___fttol+3)& (0+255),b
 17140                           
 17141                           ; BSR set to: 1
 17142  003F4A  0012               	return	
 17143  003F4C                     l6519:
 17144                           
 17145                           ; BSR set to: 1
 17146  003F4C  0E17               	movlw	23
 17147  003F4E  0101               	movlb	1	; () banked
 17148  003F50  6F2E               	movwf	??___fttol& (0+255),b
 17149  003F52  C12A  F12F         	movff	___fttol@f1,??___fttol+1
 17150  003F56  C12B  F130         	movff	___fttol@f1+1,??___fttol+2
 17151  003F5A  C12C  F131         	movff	___fttol@f1+2,??___fttol+3
 17152  003F5E  0101               	movlb	1	; () banked
 17153  003F60  292E               	incf	??___fttol& (0+255),w,b
 17154  003F62  0101               	movlb	1	; () banked
 17155  003F64  6F32               	movwf	(??___fttol+4)& (0+255),b
 17156  003F66  D005               	goto	u8250
 17157  003F68                     u8255:
 17158  003F68  0101               	movlb	1	; () banked
 17159  003F6A  90D8               	bcf	status,0,c
 17160  003F6C  3331               	rrcf	(??___fttol+3)& (0+255),f,b
 17161  003F6E  3330               	rrcf	(??___fttol+2)& (0+255),f,b
 17162  003F70  332F               	rrcf	(??___fttol+1)& (0+255),f,b
 17163  003F72                     u8250:
 17164  003F72  0101               	movlb	1	; () banked
 17165  003F74  2F32               	decfsz	(??___fttol+4)& (0+255),f,b
 17166  003F76  D7F8               	goto	u8255
 17167  003F78  0101               	movlb	1	; () banked
 17168  003F7A  512F               	movf	(??___fttol+1)& (0+255),w,b
 17169  003F7C  0101               	movlb	1	; () banked
 17170  003F7E  6F33               	movwf	___fttol@sign1& (0+255),b
 17171                           
 17172                           ; BSR set to: 1
 17173  003F80  0101               	movlb	1	; () banked
 17174  003F82  8F2B               	bsf	(___fttol@f1+1)& (0+255),7,b
 17175                           
 17176                           ; BSR set to: 1
 17177  003F84  0EFF               	movlw	255
 17178  003F86  0101               	movlb	1	; () banked
 17179  003F88  172A               	andwf	___fttol@f1& (0+255),f,b
 17180  003F8A  0EFF               	movlw	255
 17181  003F8C  0101               	movlb	1	; () banked
 17182  003F8E  172B               	andwf	(___fttol@f1+1)& (0+255),f,b
 17183  003F90  0E00               	movlw	0
 17184  003F92  0101               	movlb	1	; () banked
 17185  003F94  172C               	andwf	(___fttol@f1+2)& (0+255),f,b
 17186                           
 17187                           ; BSR set to: 1
 17188  003F96  0101               	movlb	1	; () banked
 17189  003F98  512A               	movf	___fttol@f1& (0+255),w,b
 17190  003F9A  0101               	movlb	1	; () banked
 17191  003F9C  6F34               	movwf	___fttol@lval& (0+255),b
 17192  003F9E  0101               	movlb	1	; () banked
 17193  003FA0  512B               	movf	(___fttol@f1+1)& (0+255),w,b
 17194  003FA2  0101               	movlb	1	; () banked
 17195  003FA4  6F35               	movwf	(___fttol@lval+1)& (0+255),b
 17196  003FA6  0101               	movlb	1	; () banked
 17197  003FA8  512C               	movf	(___fttol@f1+2)& (0+255),w,b
 17198  003FAA  0101               	movlb	1	; () banked
 17199  003FAC  6F36               	movwf	(___fttol@lval+2)& (0+255),b
 17200  003FAE  0101               	movlb	1	; () banked
 17201  003FB0  6B37               	clrf	(___fttol@lval+3)& (0+255),b
 17202                           
 17203                           ; BSR set to: 1
 17204  003FB2  0E8E               	movlw	142
 17205  003FB4  0101               	movlb	1	; () banked
 17206  003FB6  5F38               	subwf	___fttol@exp1& (0+255),f,b
 17207                           
 17208                           ; BSR set to: 1
 17209  003FB8  0101               	movlb	1	; () banked
 17210  003FBA  AF38               	btfss	___fttol@exp1& (0+255),7,b
 17211  003FBC  D01A               	goto	l6541
 17212                           
 17213                           ; BSR set to: 1
 17214  003FBE  0101               	movlb	1	; () banked
 17215  003FC0  5138               	movf	___fttol@exp1& (0+255),w,b
 17216  003FC2  0A80               	xorlw	128
 17217  003FC4  0F8F               	addlw	143
 17218  003FC6  B0D8               	btfsc	status,0,c
 17219  003FC8  D00A               	goto	l6537
 17220                           
 17221                           ; BSR set to: 1
 17222  003FCA  0E00               	movlw	0
 17223  003FCC  0101               	movlb	1	; () banked
 17224  003FCE  6F2A               	movwf	?___fttol& (0+255),b
 17225  003FD0  0E00               	movlw	0
 17226  003FD2  6F2B               	movwf	(?___fttol+1)& (0+255),b
 17227  003FD4  0E00               	movlw	0
 17228  003FD6  6F2C               	movwf	(?___fttol+2)& (0+255),b
 17229  003FD8  0E00               	movlw	0
 17230  003FDA  6F2D               	movwf	(?___fttol+3)& (0+255),b
 17231                           
 17232                           ; BSR set to: 1
 17233  003FDC  0012               	return	
 17234  003FDE                     l6537:
 17235                           
 17236                           ; BSR set to: 1
 17237  003FDE  0101               	movlb	1	; () banked
 17238  003FE0  90D8               	bcf	status,0,c
 17239  003FE2  3337               	rrcf	(___fttol@lval+3)& (0+255),f,b
 17240  003FE4  3336               	rrcf	(___fttol@lval+2)& (0+255),f,b
 17241  003FE6  3335               	rrcf	(___fttol@lval+1)& (0+255),f,b
 17242  003FE8  3334               	rrcf	___fttol@lval& (0+255),f,b
 17243                           
 17244                           ; BSR set to: 1
 17245  003FEA  0101               	movlb	1	; () banked
 17246  003FEC  3F38               	incfsz	___fttol@exp1& (0+255),f,b
 17247  003FEE  D7F7               	goto	l6537
 17248                           
 17249                           ; BSR set to: 1
 17250  003FF0  D01B               	goto	l6551
 17251  003FF2                     l6541:
 17252                           
 17253                           ; BSR set to: 1
 17254  003FF2  0E17               	movlw	23
 17255  003FF4  0101               	movlb	1	; () banked
 17256  003FF6  6538               	cpfsgt	___fttol@exp1& (0+255),b
 17257  003FF8  D012               	goto	l6549
 17258                           
 17259                           ; BSR set to: 1
 17260  003FFA  0E00               	movlw	0
 17261  003FFC  0101               	movlb	1	; () banked
 17262  003FFE  6F2A               	movwf	?___fttol& (0+255),b
 17263  004000  0E00               	movlw	0
 17264  004002  6F2B               	movwf	(?___fttol+1)& (0+255),b
 17265  004004  0E00               	movlw	0
 17266  004006  6F2C               	movwf	(?___fttol+2)& (0+255),b
 17267  004008  0E00               	movlw	0
 17268  00400A  6F2D               	movwf	(?___fttol+3)& (0+255),b
 17269                           
 17270                           ; BSR set to: 1
 17271  00400C  0012               	return	
 17272  00400E                     l6547:
 17273                           
 17274                           ; BSR set to: 1
 17275  00400E  0101               	movlb	1	; () banked
 17276  004010  90D8               	bcf	status,0,c
 17277  004012  3734               	rlcf	___fttol@lval& (0+255),f,b
 17278  004014  3735               	rlcf	(___fttol@lval+1)& (0+255),f,b
 17279  004016  3736               	rlcf	(___fttol@lval+2)& (0+255),f,b
 17280  004018  3737               	rlcf	(___fttol@lval+3)& (0+255),f,b
 17281  00401A  0101               	movlb	1	; () banked
 17282  00401C  0738               	decf	___fttol@exp1& (0+255),f,b
 17283  00401E                     l6549:
 17284                           
 17285                           ; BSR set to: 1
 17286  00401E  0101               	movlb	1	; () banked
 17287  004020  5138               	movf	___fttol@exp1& (0+255),w,b
 17288  004022  0101               	movlb	1	; () banked
 17289  004024  A4D8               	btfss	status,2,c
 17290  004026  D7F3               	goto	l6547
 17291  004028                     l6551:
 17292                           
 17293                           ; BSR set to: 1
 17294  004028  0101               	movlb	1	; () banked
 17295  00402A  5133               	movf	___fttol@sign1& (0+255),w,b
 17296  00402C  0101               	movlb	1	; () banked
 17297  00402E  B4D8               	btfsc	status,2,c
 17298  004030  D009               	goto	l6555
 17299                           
 17300                           ; BSR set to: 1
 17301  004032  0101               	movlb	1	; () banked
 17302  004034  1F37               	comf	(___fttol@lval+3)& (0+255),f,b
 17303  004036  1F36               	comf	(___fttol@lval+2)& (0+255),f,b
 17304  004038  1F35               	comf	(___fttol@lval+1)& (0+255),f,b
 17305  00403A  6D34               	negf	___fttol@lval& (0+255),b
 17306  00403C  0E00               	movlw	0
 17307  00403E  2335               	addwfc	(___fttol@lval+1)& (0+255),f,b
 17308  004040  2336               	addwfc	(___fttol@lval+2)& (0+255),f,b
 17309  004042  2337               	addwfc	(___fttol@lval+3)& (0+255),f,b
 17310  004044                     l6555:
 17311                           
 17312                           ; BSR set to: 1
 17313  004044  C134  F12A         	movff	___fttol@lval,?___fttol
 17314  004048  C135  F12B         	movff	___fttol@lval+1,?___fttol+1
 17315  00404C  C136  F12C         	movff	___fttol@lval+2,?___fttol+2
 17316  004050  C137  F12D         	movff	___fttol@lval+3,?___fttol+3
 17317  004054  0012               	return	
 17318  004056                     __end_of___fttol:
 17319                           	opt stack 0
 17320                           tblptru	equ	0xFF8
 17321                           tblptrh	equ	0xFF7
 17322                           tblptrl	equ	0xFF6
 17323                           tablat	equ	0xFF5
 17324                           prodh	equ	0xFF4
 17325                           prodl	equ	0xFF3
 17326                           intcon	equ	0xFF2
 17327                           postinc0	equ	0xFEE
 17328                           wreg	equ	0xFE8
 17329                           postdec1	equ	0xFE5
 17330                           fsr1l	equ	0xFE1
 17331                           indf2	equ	0xFDF
 17332                           postinc2	equ	0xFDE
 17333                           postdec2	equ	0xFDD
 17334                           plusw2	equ	0xFDB
 17335                           fsr2h	equ	0xFDA
 17336                           fsr2l	equ	0xFD9
 17337                           status	equ	0xFD8
 17338                           
 17339 ;; *************** function ___aldiv *****************
 17340 ;; Defined at:
 17341 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
 17342 ;; Parameters:    Size  Location     Type
 17343 ;;  dividend        4    0[BANK1 ] long 
 17344 ;;  divisor         4    4[BANK1 ] long 
 17345 ;; Auto vars:     Size  Location     Type
 17346 ;;  quotient        4   10[BANK1 ] long 
 17347 ;;  sign            1    9[BANK1 ] unsigned char 
 17348 ;;  counter         1    8[BANK1 ] unsigned char 
 17349 ;; Return value:  Size  Location     Type
 17350 ;;                  4    0[BANK1 ] long 
 17351 ;; Registers used:
 17352 ;;		wreg, status,2, status,0
 17353 ;; Tracked objects:
 17354 ;;		On entry : 0/0
 17355 ;;		On exit  : 0/0
 17356 ;;		Unchanged: 0/0
 17357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17358 ;;      Params:         0       0       8       0       0       0       0
 17359 ;;      Locals:         0       0       6       0       0       0       0
 17360 ;;      Temps:          0       0       0       0       0       0       0
 17361 ;;      Totals:         0       0      14       0       0       0       0
 17362 ;;Total ram usage:       14 bytes
 17363 ;; Hardware stack levels used:    1
 17364 ;; Hardware stack levels required when called:   12
 17365 ;; This function calls:
 17366 ;;		Nothing
 17367 ;; This function is called by:
 17368 ;;		_desintegrator
 17369 ;; This function uses a non-reentrant model
 17370 ;;
 17371                           
 17372                           	psect	text71
 17373  0043DE                     __ptext71:
 17374                           	opt stack 0
 17375  0043DE                     ___aldiv:
 17376                           	opt stack 15
 17377                           
 17378                           ; BSR set to: 1
 17379                           ;incstack = 0
 17380  0043DE  0E00               	movlw	0
 17381  0043E0  0101               	movlb	1	; () banked
 17382  0043E2  6F09               	movwf	___aldiv@sign& (0+255),b
 17383                           
 17384                           ; BSR set to: 1
 17385  0043E4  0101               	movlb	1	; () banked
 17386  0043E6  AF07               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 17387  0043E8  D00C               	goto	l10717
 17388                           
 17389                           ; BSR set to: 1
 17390  0043EA  0101               	movlb	1	; () banked
 17391  0043EC  1F07               	comf	(___aldiv@divisor+3)& (0+255),f,b
 17392  0043EE  1F06               	comf	(___aldiv@divisor+2)& (0+255),f,b
 17393  0043F0  1F05               	comf	(___aldiv@divisor+1)& (0+255),f,b
 17394  0043F2  6D04               	negf	___aldiv@divisor& (0+255),b
 17395  0043F4  0E00               	movlw	0
 17396  0043F6  2305               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 17397  0043F8  2306               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 17398  0043FA  2307               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 17399                           
 17400                           ; BSR set to: 1
 17401  0043FC  0E01               	movlw	1
 17402  0043FE  0101               	movlb	1	; () banked
 17403  004400  6F09               	movwf	___aldiv@sign& (0+255),b
 17404  004402                     l10717:
 17405                           
 17406                           ; BSR set to: 1
 17407  004402  0101               	movlb	1	; () banked
 17408  004404  AF03               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 17409  004406  D00C               	goto	l10723
 17410                           
 17411                           ; BSR set to: 1
 17412  004408  0101               	movlb	1	; () banked
 17413  00440A  1F03               	comf	(___aldiv@dividend+3)& (0+255),f,b
 17414  00440C  1F02               	comf	(___aldiv@dividend+2)& (0+255),f,b
 17415  00440E  1F01               	comf	(___aldiv@dividend+1)& (0+255),f,b
 17416  004410  6D00               	negf	___aldiv@dividend& (0+255),b
 17417  004412  0E00               	movlw	0
 17418  004414  2301               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 17419  004416  2302               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 17420  004418  2303               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 17421                           
 17422                           ; BSR set to: 1
 17423  00441A  0E01               	movlw	1
 17424  00441C  0101               	movlb	1	; () banked
 17425  00441E  1B09               	xorwf	___aldiv@sign& (0+255),f,b
 17426  004420                     l10723:
 17427                           
 17428                           ; BSR set to: 1
 17429  004420  0E00               	movlw	0
 17430  004422  0101               	movlb	1	; () banked
 17431  004424  6F0A               	movwf	___aldiv@quotient& (0+255),b
 17432  004426  0E00               	movlw	0
 17433  004428  6F0B               	movwf	(___aldiv@quotient+1)& (0+255),b
 17434  00442A  0E00               	movlw	0
 17435  00442C  6F0C               	movwf	(___aldiv@quotient+2)& (0+255),b
 17436  00442E  0E00               	movlw	0
 17437  004430  6F0D               	movwf	(___aldiv@quotient+3)& (0+255),b
 17438                           
 17439                           ; BSR set to: 1
 17440  004432  0101               	movlb	1	; () banked
 17441  004434  5104               	movf	___aldiv@divisor& (0+255),w,b
 17442  004436  0101               	movlb	1	; () banked
 17443  004438  1105               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 17444  00443A  0101               	movlb	1	; () banked
 17445  00443C  1106               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 17446  00443E  0101               	movlb	1	; () banked
 17447  004440  1107               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 17448  004442  B4D8               	btfsc	status,2,c
 17449  004444  D042               	goto	l10745
 17450                           
 17451                           ; BSR set to: 1
 17452  004446  0E01               	movlw	1
 17453  004448  0101               	movlb	1	; () banked
 17454  00444A  6F08               	movwf	___aldiv@counter& (0+255),b
 17455  00444C  D008               	goto	l10731
 17456  00444E                     l10729:
 17457                           
 17458                           ; BSR set to: 1
 17459  00444E  0101               	movlb	1	; () banked
 17460  004450  90D8               	bcf	status,0,c
 17461  004452  3704               	rlcf	___aldiv@divisor& (0+255),f,b
 17462  004454  3705               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 17463  004456  3706               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 17464  004458  3707               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 17465  00445A  0101               	movlb	1	; () banked
 17466  00445C  2B08               	incf	___aldiv@counter& (0+255),f,b
 17467  00445E                     l10731:
 17468                           
 17469                           ; BSR set to: 1
 17470  00445E  0101               	movlb	1	; () banked
 17471  004460  AF07               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 17472  004462  D7F5               	goto	l10729
 17473  004464                     l10733:
 17474                           
 17475                           ; BSR set to: 1
 17476  004464  0101               	movlb	1	; () banked
 17477  004466  90D8               	bcf	status,0,c
 17478  004468  370A               	rlcf	___aldiv@quotient& (0+255),f,b
 17479  00446A  370B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 17480  00446C  370C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 17481  00446E  370D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 17482                           
 17483                           ; BSR set to: 1
 17484  004470  0101               	movlb	1	; () banked
 17485  004472  5104               	movf	___aldiv@divisor& (0+255),w,b
 17486  004474  0101               	movlb	1	; () banked
 17487  004476  5D00               	subwf	___aldiv@dividend& (0+255),w,b
 17488  004478  0101               	movlb	1	; () banked
 17489  00447A  5105               	movf	(___aldiv@divisor+1)& (0+255),w,b
 17490  00447C  0101               	movlb	1	; () banked
 17491  00447E  5901               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 17492  004480  0101               	movlb	1	; () banked
 17493  004482  5106               	movf	(___aldiv@divisor+2)& (0+255),w,b
 17494  004484  0101               	movlb	1	; () banked
 17495  004486  5902               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 17496  004488  0101               	movlb	1	; () banked
 17497  00448A  5107               	movf	(___aldiv@divisor+3)& (0+255),w,b
 17498  00448C  0101               	movlb	1	; () banked
 17499  00448E  5903               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 17500  004490  A0D8               	btfss	status,0,c
 17501  004492  D012               	goto	l10741
 17502                           
 17503                           ; BSR set to: 1
 17504  004494  0101               	movlb	1	; () banked
 17505  004496  5104               	movf	___aldiv@divisor& (0+255),w,b
 17506  004498  0101               	movlb	1	; () banked
 17507  00449A  5F00               	subwf	___aldiv@dividend& (0+255),f,b
 17508  00449C  0101               	movlb	1	; () banked
 17509  00449E  5105               	movf	(___aldiv@divisor+1)& (0+255),w,b
 17510  0044A0  0101               	movlb	1	; () banked
 17511  0044A2  5B01               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 17512  0044A4  0101               	movlb	1	; () banked
 17513  0044A6  5106               	movf	(___aldiv@divisor+2)& (0+255),w,b
 17514  0044A8  0101               	movlb	1	; () banked
 17515  0044AA  5B02               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 17516  0044AC  0101               	movlb	1	; () banked
 17517  0044AE  5107               	movf	(___aldiv@divisor+3)& (0+255),w,b
 17518  0044B0  0101               	movlb	1	; () banked
 17519  0044B2  5B03               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 17520                           
 17521                           ; BSR set to: 1
 17522  0044B4  0101               	movlb	1	; () banked
 17523  0044B6  810A               	bsf	___aldiv@quotient& (0+255),0,b
 17524  0044B8                     l10741:
 17525                           
 17526                           ; BSR set to: 1
 17527  0044B8  0101               	movlb	1	; () banked
 17528  0044BA  90D8               	bcf	status,0,c
 17529  0044BC  3307               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 17530  0044BE  3306               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 17531  0044C0  3305               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 17532  0044C2  3304               	rrcf	___aldiv@divisor& (0+255),f,b
 17533                           
 17534                           ; BSR set to: 1
 17535  0044C4  0101               	movlb	1	; () banked
 17536  0044C6  2F08               	decfsz	___aldiv@counter& (0+255),f,b
 17537  0044C8  D7CD               	goto	l10733
 17538  0044CA                     l10745:
 17539                           
 17540                           ; BSR set to: 1
 17541  0044CA  0101               	movlb	1	; () banked
 17542  0044CC  5109               	movf	___aldiv@sign& (0+255),w,b
 17543  0044CE  0101               	movlb	1	; () banked
 17544  0044D0  B4D8               	btfsc	status,2,c
 17545  0044D2  D009               	goto	l10749
 17546                           
 17547                           ; BSR set to: 1
 17548  0044D4  0101               	movlb	1	; () banked
 17549  0044D6  1F0D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 17550  0044D8  1F0C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 17551  0044DA  1F0B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 17552  0044DC  6D0A               	negf	___aldiv@quotient& (0+255),b
 17553  0044DE  0E00               	movlw	0
 17554  0044E0  230B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 17555  0044E2  230C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 17556  0044E4  230D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 17557  0044E6                     l10749:
 17558                           
 17559                           ; BSR set to: 1
 17560  0044E6  C10A  F100         	movff	___aldiv@quotient,?___aldiv
 17561  0044EA  C10B  F101         	movff	___aldiv@quotient+1,?___aldiv+1
 17562  0044EE  C10C  F102         	movff	___aldiv@quotient+2,?___aldiv+2
 17563  0044F2  C10D  F103         	movff	___aldiv@quotient+3,?___aldiv+3
 17564  0044F6  0012               	return	
 17565  0044F8                     __end_of___aldiv:
 17566                           	opt stack 0
 17567                           tblptru	equ	0xFF8
 17568                           tblptrh	equ	0xFF7
 17569                           tblptrl	equ	0xFF6
 17570                           tablat	equ	0xFF5
 17571                           prodh	equ	0xFF4
 17572                           prodl	equ	0xFF3
 17573                           intcon	equ	0xFF2
 17574                           postinc0	equ	0xFEE
 17575                           wreg	equ	0xFE8
 17576                           postdec1	equ	0xFE5
 17577                           fsr1l	equ	0xFE1
 17578                           indf2	equ	0xFDF
 17579                           postinc2	equ	0xFDE
 17580                           postdec2	equ	0xFDD
 17581                           plusw2	equ	0xFDB
 17582                           fsr2h	equ	0xFDA
 17583                           fsr2l	equ	0xFD9
 17584                           status	equ	0xFD8
 17585                           
 17586 ;; *************** function _confirmEdition *****************
 17587 ;; Defined at:
 17588 ;;		line 83 in file "source/DisplayProtocol.h"
 17589 ;; Parameters:    Size  Location     Type
 17590 ;;  yes             1    wreg     unsigned char 
 17591 ;; Auto vars:     Size  Location     Type
 17592 ;;  yes             1   35[BANK1 ] unsigned char 
 17593 ;; Return value:  Size  Location     Type
 17594 ;;                  1    wreg      void 
 17595 ;; Registers used:
 17596 ;;		wreg, status,2, status,0, cstack
 17597 ;; Tracked objects:
 17598 ;;		On entry : 0/0
 17599 ;;		On exit  : 0/0
 17600 ;;		Unchanged: 0/0
 17601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17602 ;;      Params:         0       0       0       0       0       0       0
 17603 ;;      Locals:         0       0       1       0       0       0       0
 17604 ;;      Temps:          0       0       0       0       0       0       0
 17605 ;;      Totals:         0       0       1       0       0       0       0
 17606 ;;Total ram usage:        1 bytes
 17607 ;; Hardware stack levels used:    1
 17608 ;; Hardware stack levels required when called:   16
 17609 ;; This function calls:
 17610 ;;		_saveSysParams
 17611 ;; This function is called by:
 17612 ;;		_pressENTER
 17613 ;;		_longPressENTER
 17614 ;; This function uses a non-reentrant model
 17615 ;;
 17616                           
 17617                           	psect	text72
 17618  005942                     __ptext72:
 17619                           	opt stack 0
 17620  005942                     _confirmEdition:
 17621                           	opt stack 12
 17622                           
 17623                           ; BSR set to: 1
 17624                           ;incstack = 0
 17625                           ;confirmEdition@yes stored from wreg
 17626  005942  0101               	movlb	1	; () banked
 17627  005944  6F23               	movwf	confirmEdition@yes& (0+255),b
 17628                           
 17629                           ;DisplayProtocol.h: 84: switch (menuSection) {
 17630  005946  D04C               	goto	l10925
 17631  005948                     l10893:
 17632                           
 17633                           ;DisplayProtocol.h: 88: if(yes) {
 17634  005948  0101               	movlb	1	; () banked
 17635  00594A  5123               	movf	confirmEdition@yes& (0+255),w,b
 17636  00594C  0101               	movlb	1	; () banked
 17637  00594E  B4D8               	btfsc	status,2,c
 17638  005950  D00C               	goto	l590
 17639                           
 17640                           ; BSR set to: 1
 17641                           ;DisplayProtocol.h: 89: kgXcorte = chanValf;
 17642  005952  C1B1  F198         	movff	_chanValf,_kgXcorte
 17643  005956  C1B2  F199         	movff	_chanValf+1,_kgXcorte+1
 17644  00595A  C1B3  F19A         	movff	_chanValf+2,_kgXcorte+2
 17645                           
 17646                           ; BSR set to: 1
 17647                           ;DisplayProtocol.h: 90: actualScreen = 4;
 17648  00595E  0E04               	movlw	4
 17649  005960  0101               	movlb	1	; () banked
 17650  005962  6FBD               	movwf	_actualScreen& (0+255),b
 17651                           
 17652                           ; BSR set to: 1
 17653                           ;DisplayProtocol.h: 91: saveSysParams();
 17654  005964  EC1D  F030         	call	_saveSysParams	;wreg free
 17655                           
 17656                           ;DisplayProtocol.h: 92: }else {
 17657  005968  0012               	return	
 17658  00596A                     l590:
 17659                           
 17660                           ; BSR set to: 1
 17661                           ;DisplayProtocol.h: 93: tempLastScreen = actualScreen;
 17662  00596A  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 17663                           
 17664                           ; BSR set to: 1
 17665                           ;DisplayProtocol.h: 94: selSN = 1;
 17666  00596E  0E01               	movlw	1
 17667  005970  0101               	movlb	1	; () banked
 17668  005972  6FBA               	movwf	_selSN& (0+255),b
 17669                           
 17670                           ;DisplayProtocol.h: 95: actualScreen = 10;
 17671  005974  0E0A               	movlw	10
 17672  005976  0101               	movlb	1	; () banked
 17673  005978  6FBD               	movwf	_actualScreen& (0+255),b
 17674                           
 17675                           ; BSR set to: 1
 17676                           ;DisplayProtocol.h: 96: }
 17677                           ;DisplayProtocol.h: 97: break;
 17678  00597A  0012               	return	
 17679  00597C                     l10903:
 17680                           
 17681                           ; BSR set to: 1
 17682                           ;DisplayProtocol.h: 99: if(yes) {
 17683  00597C  0101               	movlb	1	; () banked
 17684  00597E  5123               	movf	confirmEdition@yes& (0+255),w,b
 17685  005980  0101               	movlb	1	; () banked
 17686  005982  B4D8               	btfsc	status,2,c
 17687  005984  D00A               	goto	l593
 17688                           
 17689                           ; BSR set to: 1
 17690                           ;DisplayProtocol.h: 100: numCortes = chanVals;
 17691  005986  C1B6  F0D2         	movff	_chanVals,_numCortes
 17692  00598A  C1B7  F0D3         	movff	_chanVals+1,_numCortes+1
 17693                           
 17694                           ; BSR set to: 1
 17695                           ;DisplayProtocol.h: 101: actualScreen = 4;
 17696  00598E  0E04               	movlw	4
 17697  005990  0101               	movlb	1	; () banked
 17698  005992  6FBD               	movwf	_actualScreen& (0+255),b
 17699                           
 17700                           ; BSR set to: 1
 17701                           ;DisplayProtocol.h: 102: saveSysParams();
 17702  005994  EC1D  F030         	call	_saveSysParams	;wreg free
 17703                           
 17704                           ;DisplayProtocol.h: 103: }else {
 17705  005998  0012               	return	
 17706  00599A                     l593:
 17707                           
 17708                           ; BSR set to: 1
 17709                           ;DisplayProtocol.h: 104: tempLastScreen = actualScreen;
 17710  00599A  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 17711                           
 17712                           ; BSR set to: 1
 17713                           ;DisplayProtocol.h: 105: selSN = 1;
 17714  00599E  0E01               	movlw	1
 17715  0059A0  0101               	movlb	1	; () banked
 17716  0059A2  6FBA               	movwf	_selSN& (0+255),b
 17717                           
 17718                           ;DisplayProtocol.h: 106: actualScreen = 10;
 17719  0059A4  0E0A               	movlw	10
 17720  0059A6  0101               	movlb	1	; () banked
 17721  0059A8  6FBD               	movwf	_actualScreen& (0+255),b
 17722                           
 17723                           ; BSR set to: 1
 17724                           ;DisplayProtocol.h: 107: }
 17725                           ;DisplayProtocol.h: 108: break;
 17726  0059AA  0012               	return	
 17727  0059AC                     l10913:
 17728                           
 17729                           ; BSR set to: 1
 17730                           ;DisplayProtocol.h: 110: if(yes) {
 17731  0059AC  0101               	movlb	1	; () banked
 17732  0059AE  5123               	movf	confirmEdition@yes& (0+255),w,b
 17733  0059B0  0101               	movlb	1	; () banked
 17734  0059B2  B4D8               	btfsc	status,2,c
 17735  0059B4  D00C               	goto	l596
 17736                           
 17737                           ; BSR set to: 1
 17738                           ;DisplayProtocol.h: 111: velocidadMasa = chanValf;
 17739  0059B6  C1B1  F18F         	movff	_chanValf,_velocidadMasa
 17740  0059BA  C1B2  F190         	movff	_chanValf+1,_velocidadMasa+1
 17741  0059BE  C1B3  F191         	movff	_chanValf+2,_velocidadMasa+2
 17742                           
 17743                           ; BSR set to: 1
 17744                           ;DisplayProtocol.h: 112: actualScreen = 4;
 17745  0059C2  0E04               	movlw	4
 17746  0059C4  0101               	movlb	1	; () banked
 17747  0059C6  6FBD               	movwf	_actualScreen& (0+255),b
 17748                           
 17749                           ; BSR set to: 1
 17750                           ;DisplayProtocol.h: 113: saveSysParams();
 17751  0059C8  EC1D  F030         	call	_saveSysParams	;wreg free
 17752                           
 17753                           ;DisplayProtocol.h: 114: }else {
 17754  0059CC  0012               	return	
 17755  0059CE                     l596:
 17756                           
 17757                           ; BSR set to: 1
 17758                           ;DisplayProtocol.h: 115: tempLastScreen = actualScreen;
 17759  0059CE  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 17760                           
 17761                           ; BSR set to: 1
 17762                           ;DisplayProtocol.h: 116: selSN = 1;
 17763  0059D2  0E01               	movlw	1
 17764  0059D4  0101               	movlb	1	; () banked
 17765  0059D6  6FBA               	movwf	_selSN& (0+255),b
 17766                           
 17767                           ;DisplayProtocol.h: 117: actualScreen = 10;
 17768  0059D8  0E0A               	movlw	10
 17769  0059DA  0101               	movlb	1	; () banked
 17770  0059DC  6FBD               	movwf	_actualScreen& (0+255),b
 17771                           
 17772                           ; BSR set to: 1
 17773                           ;DisplayProtocol.h: 120: }
 17774                           ;DisplayProtocol.h: 121: }
 17775                           
 17776                           ; BSR set to: 1
 17777                           ;DisplayProtocol.h: 118: }
 17778                           ;DisplayProtocol.h: 119: break;
 17779  0059DE  0012               	return	
 17780  0059E0                     l10925:
 17781  0059E0  0101               	movlb	1	; () banked
 17782  0059E2  51BC               	movf	_menuSection& (0+255),w,b
 17783                           
 17784                           ; Switch size 1, requested type "space"
 17785                           ; Number of cases is 4, Range of values is 0 to 3
 17786                           ; switch strategies available:
 17787                           ; Name         Instructions Cycles
 17788                           ; simple_byte           13     7 (average)
 17789                           ;	Chosen strategy is simple_byte
 17790  0059E4  0A00               	xorlw	0	; case 0
 17791  0059E6  B4D8               	btfsc	status,2,c
 17792  0059E8  0012               	return	
 17793  0059EA  0A01               	xorlw	1	; case 1
 17794  0059EC  B4D8               	btfsc	status,2,c
 17795  0059EE  D7AC               	goto	l10893
 17796  0059F0  0A03               	xorlw	3	; case 2
 17797  0059F2  B4D8               	btfsc	status,2,c
 17798  0059F4  D7C3               	goto	l10903
 17799  0059F6  0A01               	xorlw	1	; case 3
 17800  0059F8  A4D8               	btfss	status,2,c
 17801  0059FA  0012               	return	
 17802  0059FC  D7D7               	goto	l10913
 17803  0059FE                     __end_of_confirmEdition:
 17804                           	opt stack 0
 17805                           tblptru	equ	0xFF8
 17806                           tblptrh	equ	0xFF7
 17807                           tblptrl	equ	0xFF6
 17808                           tablat	equ	0xFF5
 17809                           prodh	equ	0xFF4
 17810                           prodl	equ	0xFF3
 17811                           intcon	equ	0xFF2
 17812                           postinc0	equ	0xFEE
 17813                           wreg	equ	0xFE8
 17814                           postdec1	equ	0xFE5
 17815                           fsr1l	equ	0xFE1
 17816                           indf2	equ	0xFDF
 17817                           postinc2	equ	0xFDE
 17818                           postdec2	equ	0xFDD
 17819                           plusw2	equ	0xFDB
 17820                           fsr2h	equ	0xFDA
 17821                           fsr2l	equ	0xFD9
 17822                           status	equ	0xFD8
 17823                           
 17824 ;; *************** function _saveSysParams *****************
 17825 ;; Defined at:
 17826 ;;		line 114 in file "source/sysParams.h"
 17827 ;; Parameters:    Size  Location     Type
 17828 ;;		None
 17829 ;; Auto vars:     Size  Location     Type
 17830 ;;		None
 17831 ;; Return value:  Size  Location     Type
 17832 ;;                  1    wreg      void 
 17833 ;; Registers used:
 17834 ;;		wreg, status,2, status,0, cstack
 17835 ;; Tracked objects:
 17836 ;;		On entry : 0/0
 17837 ;;		On exit  : 0/0
 17838 ;;		Unchanged: 0/0
 17839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17840 ;;      Params:         0       0       0       0       0       0       0
 17841 ;;      Locals:         0       0       0       0       0       0       0
 17842 ;;      Temps:          0       0       0       0       0       0       0
 17843 ;;      Totals:         0       0       0       0       0       0       0
 17844 ;;Total ram usage:        0 bytes
 17845 ;; Hardware stack levels used:    1
 17846 ;; Hardware stack levels required when called:   15
 17847 ;; This function calls:
 17848 ;;		_calcVars2ti
 17849 ;;		_writeEEPROM
 17850 ;; This function is called by:
 17851 ;;		_confirmEdition
 17852 ;; This function uses a non-reentrant model
 17853 ;;
 17854                           
 17855                           	psect	text73
 17856  00603A                     __ptext73:
 17857                           	opt stack 0
 17858  00603A                     _saveSysParams:
 17859                           	opt stack 12
 17860                           
 17861                           ;sysParams.h: 115: calcVars2ti();
 17862                           
 17863                           ;incstack = 0
 17864  00603A  ECBD  F035         	call	_calcVars2ti	;wreg free
 17865                           
 17866                           ;sysParams.h: 116: EECON1bits.WREN = 1;
 17867  00603E  84A6               	bsf	4006,2,c	;volatile
 17868                           
 17869                           ;sysParams.h: 117: ie = INTCONbits.GIE;
 17870  006040  0E00               	movlw	0
 17871  006042  BEF2               	btfsc	intcon,7,c	;volatile
 17872  006044  0E01               	movlw	1
 17873  006046  0100               	movlb	0	; () banked
 17874  006048  6FBB               	movwf	_ie& (0+255),b
 17875                           
 17876                           ; BSR set to: 0
 17877                           ;sysParams.h: 118: INTCONbits.GIE = 0;
 17878  00604A  9EF2               	bcf	intcon,7,c	;volatile
 17879                           
 17880                           ; BSR set to: 0
 17881                           ;sysParams.h: 120: fData.floatdat = tiXcorte;
 17882  00604C  C195  F0AF         	movff	_tiXcorte,_fData
 17883  006050  C196  F0B0         	movff	_tiXcorte+1,_fData+1
 17884  006054  C197  F0B1         	movff	_tiXcorte+2,_fData+2
 17885                           
 17886                           ; BSR set to: 0
 17887                           ;sysParams.h: 122: writeEEPROM(3, fData.floatUB);
 17888  006058  C0B1  F100         	movff	_fData+2,writeEEPROM@data
 17889  00605C  0E03               	movlw	3
 17890  00605E  ECC3  F038         	call	_writeEEPROM
 17891                           
 17892                           ;sysParams.h: 123: writeEEPROM(4, fData.floatHB);
 17893  006062  C0B0  F100         	movff	_fData+1,writeEEPROM@data
 17894  006066  0E04               	movlw	4
 17895  006068  ECC3  F038         	call	_writeEEPROM
 17896                           
 17897                           ;sysParams.h: 124: writeEEPROM(5, fData.floatLB);
 17898  00606C  C0AF  F100         	movff	_fData,writeEEPROM@data
 17899  006070  0E05               	movlw	5
 17900  006072  ECC3  F038         	call	_writeEEPROM
 17901                           
 17902                           ;sysParams.h: 125: i16Data.int16dat = numCortes;
 17903  006076  C0D2  F0B4         	movff	_numCortes,_i16Data
 17904  00607A  C0D3  F0B5         	movff	_numCortes+1,_i16Data+1
 17905                           
 17906                           ;sysParams.h: 126: writeEEPROM(6, i16Data.int16HB);
 17907  00607E  C0B5  F100         	movff	_i16Data+1,writeEEPROM@data
 17908  006082  0E06               	movlw	6
 17909  006084  ECC3  F038         	call	_writeEEPROM
 17910                           
 17911                           ;sysParams.h: 127: writeEEPROM(7, i16Data.int16LB);
 17912  006088  C0B4  F100         	movff	_i16Data,writeEEPROM@data
 17913  00608C  0E07               	movlw	7
 17914  00608E  ECC3  F038         	call	_writeEEPROM
 17915                           
 17916                           ;sysParams.h: 138: fData.floatdat = velocidadMasa;
 17917  006092  C18F  F0AF         	movff	_velocidadMasa,_fData
 17918  006096  C190  F0B0         	movff	_velocidadMasa+1,_fData+1
 17919  00609A  C191  F0B1         	movff	_velocidadMasa+2,_fData+2
 17920                           
 17921                           ;sysParams.h: 140: writeEEPROM(17, fData.floatUB);
 17922  00609E  C0B1  F100         	movff	_fData+2,writeEEPROM@data
 17923  0060A2  0E11               	movlw	17
 17924  0060A4  ECC3  F038         	call	_writeEEPROM
 17925                           
 17926                           ;sysParams.h: 141: writeEEPROM(18, fData.floatHB);
 17927  0060A8  C0B0  F100         	movff	_fData+1,writeEEPROM@data
 17928  0060AC  0E12               	movlw	18
 17929  0060AE  ECC3  F038         	call	_writeEEPROM
 17930                           
 17931                           ;sysParams.h: 142: writeEEPROM(19, fData.floatLB);
 17932  0060B2  C0AF  F100         	movff	_fData,writeEEPROM@data
 17933  0060B6  0E13               	movlw	19
 17934  0060B8  ECC3  F038         	call	_writeEEPROM
 17935                           
 17936                           ;sysParams.h: 143: EECON1bits.WREN = 0;
 17937  0060BC  94A6               	bcf	4006,2,c	;volatile
 17938                           
 17939                           ;sysParams.h: 144: INTCONbits.GIE = ie;
 17940  0060BE  0100               	movlb	0	; () banked
 17941  0060C0  B1BB               	btfsc	_ie& (0+255),0,b
 17942  0060C2  D002               	bra	u15115
 17943  0060C4  9EF2               	bcf	intcon,7,c	;volatile
 17944  0060C6  D001               	bra	u15116
 17945  0060C8                     u15115:
 17946  0060C8  8EF2               	bsf	intcon,7,c	;volatile
 17947  0060CA                     u15116:
 17948  0060CA  0012               	return		;funcret
 17949  0060CC                     __end_of_saveSysParams:
 17950                           	opt stack 0
 17951                           tblptru	equ	0xFF8
 17952                           tblptrh	equ	0xFF7
 17953                           tblptrl	equ	0xFF6
 17954                           tablat	equ	0xFF5
 17955                           prodh	equ	0xFF4
 17956                           prodl	equ	0xFF3
 17957                           intcon	equ	0xFF2
 17958                           postinc0	equ	0xFEE
 17959                           wreg	equ	0xFE8
 17960                           postdec1	equ	0xFE5
 17961                           fsr1l	equ	0xFE1
 17962                           indf2	equ	0xFDF
 17963                           postinc2	equ	0xFDE
 17964                           postdec2	equ	0xFDD
 17965                           plusw2	equ	0xFDB
 17966                           fsr2h	equ	0xFDA
 17967                           fsr2l	equ	0xFD9
 17968                           status	equ	0xFD8
 17969                           
 17970 ;; *************** function _writeEEPROM *****************
 17971 ;; Defined at:
 17972 ;;		line 54 in file "source/sysParams.h"
 17973 ;; Parameters:    Size  Location     Type
 17974 ;;  adr             1    wreg     unsigned char 
 17975 ;;  data            1    0[BANK1 ] unsigned char 
 17976 ;; Auto vars:     Size  Location     Type
 17977 ;;  adr             1    1[BANK1 ] unsigned char 
 17978 ;; Return value:  Size  Location     Type
 17979 ;;                  1    wreg      void 
 17980 ;; Registers used:
 17981 ;;		wreg, status,2
 17982 ;; Tracked objects:
 17983 ;;		On entry : 0/0
 17984 ;;		On exit  : 0/0
 17985 ;;		Unchanged: 0/0
 17986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17987 ;;      Params:         0       0       1       0       0       0       0
 17988 ;;      Locals:         0       0       1       0       0       0       0
 17989 ;;      Temps:          0       0       0       0       0       0       0
 17990 ;;      Totals:         0       0       2       0       0       0       0
 17991 ;;Total ram usage:        2 bytes
 17992 ;; Hardware stack levels used:    1
 17993 ;; Hardware stack levels required when called:   12
 17994 ;; This function calls:
 17995 ;;		Nothing
 17996 ;; This function is called by:
 17997 ;;		_saveSysParams
 17998 ;; This function uses a non-reentrant model
 17999 ;;
 18000                           
 18001                           	psect	text74
 18002  007186                     __ptext74:
 18003                           	opt stack 0
 18004  007186                     _writeEEPROM:
 18005                           	opt stack 14
 18006                           
 18007                           ;incstack = 0
 18008                           ;writeEEPROM@adr stored from wreg
 18009  007186  0101               	movlb	1	; () banked
 18010  007188  6F01               	movwf	writeEEPROM@adr& (0+255),b
 18011                           
 18012                           ;sysParams.h: 55: EEADR = adr;
 18013  00718A  C101  FFA9         	movff	writeEEPROM@adr,4009	;volatile
 18014                           
 18015                           ;sysParams.h: 56: EEDATA = data;
 18016  00718E  C100  FFA8         	movff	writeEEPROM@data,4008	;volatile
 18017                           
 18018                           ;sysParams.h: 57: EECON1bits.EEPGD = 0;
 18019  007192  9EA6               	bcf	4006,7,c	;volatile
 18020                           
 18021                           ;sysParams.h: 58: EECON1bits.CFGS = 0;
 18022  007194  9CA6               	bcf	4006,6,c	;volatile
 18023                           
 18024                           ;sysParams.h: 59: EECON2 = 0x55;
 18025  007196  0E55               	movlw	85
 18026  007198  6EA7               	movwf	4007,c	;volatile
 18027                           
 18028                           ;sysParams.h: 60: EECON2 = 0xAA;
 18029  00719A  0EAA               	movlw	170
 18030  00719C  6EA7               	movwf	4007,c	;volatile
 18031                           
 18032                           ;sysParams.h: 61: EECON1bits.WR = 1;
 18033  00719E  82A6               	bsf	4006,1,c	;volatile
 18034  0071A0                     l283:
 18035  0071A0  A2A6               	btfss	4006,1,c	;volatile
 18036  0071A2  0012               	return	
 18037  0071A4  D7FD               	goto	l283
 18038  0071A6                     __end_of_writeEEPROM:
 18039                           	opt stack 0
 18040                           tblptru	equ	0xFF8
 18041                           tblptrh	equ	0xFF7
 18042                           tblptrl	equ	0xFF6
 18043                           tablat	equ	0xFF5
 18044                           prodh	equ	0xFF4
 18045                           prodl	equ	0xFF3
 18046                           intcon	equ	0xFF2
 18047                           postinc0	equ	0xFEE
 18048                           wreg	equ	0xFE8
 18049                           postdec1	equ	0xFE5
 18050                           fsr1l	equ	0xFE1
 18051                           indf2	equ	0xFDF
 18052                           postinc2	equ	0xFDE
 18053                           postdec2	equ	0xFDD
 18054                           plusw2	equ	0xFDB
 18055                           fsr2h	equ	0xFDA
 18056                           fsr2l	equ	0xFD9
 18057                           status	equ	0xFD8
 18058                           
 18059 ;; *************** function _calcVars2ti *****************
 18060 ;; Defined at:
 18061 ;;		line 90 in file "source/sysParams.h"
 18062 ;; Parameters:    Size  Location     Type
 18063 ;;		None
 18064 ;; Auto vars:     Size  Location     Type
 18065 ;;		None
 18066 ;; Return value:  Size  Location     Type
 18067 ;;                  1    wreg      void 
 18068 ;; Registers used:
 18069 ;;		wreg, status,2, status,0, cstack
 18070 ;; Tracked objects:
 18071 ;;		On entry : 0/0
 18072 ;;		On exit  : 0/0
 18073 ;;		Unchanged: 0/0
 18074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18075 ;;      Params:         0       0       0       0       0       0       0
 18076 ;;      Locals:         0       0       0       0       0       0       0
 18077 ;;      Temps:          0       0       0       0       0       0       0
 18078 ;;      Totals:         0       0       0       0       0       0       0
 18079 ;;Total ram usage:        0 bytes
 18080 ;; Hardware stack levels used:    1
 18081 ;; Hardware stack levels required when called:   14
 18082 ;; This function calls:
 18083 ;;		___ftdiv
 18084 ;;		___ftmul
 18085 ;; This function is called by:
 18086 ;;		_saveSysParams
 18087 ;;		_longPressENTER
 18088 ;; This function uses a non-reentrant model
 18089 ;;
 18090                           
 18091                           	psect	text75
 18092  006B7A                     __ptext75:
 18093                           	opt stack 0
 18094  006B7A                     _calcVars2ti:
 18095                           	opt stack 12
 18096                           
 18097                           ;sysParams.h: 98: tiXcorte = (float)kgXcorte / velocidadMasa;
 18098                           
 18099                           ;incstack = 0
 18100  006B7A  C198  F112         	movff	_kgXcorte,___ftdiv@f1
 18101  006B7E  C199  F113         	movff	_kgXcorte+1,___ftdiv@f1+1
 18102  006B82  C19A  F114         	movff	_kgXcorte+2,___ftdiv@f1+2
 18103  006B86  C18F  F115         	movff	_velocidadMasa,___ftdiv@f2
 18104  006B8A  C190  F116         	movff	_velocidadMasa+1,___ftdiv@f2+1
 18105  006B8E  C191  F117         	movff	_velocidadMasa+2,___ftdiv@f2+2
 18106  006B92  EC3D  F01E         	call	___ftdiv	;wreg free
 18107  006B96  C112  F195         	movff	?___ftdiv,_tiXcorte
 18108  006B9A  C113  F196         	movff	?___ftdiv+1,_tiXcorte+1
 18109  006B9E  C114  F197         	movff	?___ftdiv+2,_tiXcorte+2
 18110                           
 18111                           ;sysParams.h: 99: timsXcorte = (float)tiXcorte * 1000;
 18112  006BA2  C195  F114         	movff	_tiXcorte,___ftmul@f1
 18113  006BA6  C196  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 18114  006BAA  C197  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 18115  006BAE  0E00               	movlw	0
 18116  006BB0  0101               	movlb	1	; () banked
 18117  006BB2  6F17               	movwf	___ftmul@f2& (0+255),b
 18118  006BB4  0E7A               	movlw	122
 18119  006BB6  0101               	movlb	1	; () banked
 18120  006BB8  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 18121  006BBA  0E44               	movlw	68
 18122  006BBC  0101               	movlb	1	; () banked
 18123  006BBE  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 18124  006BC0  EC35  F01C         	call	___ftmul	;wreg free
 18125  006BC4  C114  F055         	movff	?___ftmul,_timsXcorte
 18126  006BC8  C115  F056         	movff	?___ftmul+1,_timsXcorte+1
 18127  006BCC  C116  F057         	movff	?___ftmul+2,_timsXcorte+2
 18128  006BD0  0012               	return		;funcret
 18129  006BD2                     __end_of_calcVars2ti:
 18130                           	opt stack 0
 18131                           tblptru	equ	0xFF8
 18132                           tblptrh	equ	0xFF7
 18133                           tblptrl	equ	0xFF6
 18134                           tablat	equ	0xFF5
 18135                           prodh	equ	0xFF4
 18136                           prodl	equ	0xFF3
 18137                           intcon	equ	0xFF2
 18138                           postinc0	equ	0xFEE
 18139                           wreg	equ	0xFE8
 18140                           postdec1	equ	0xFE5
 18141                           fsr1l	equ	0xFE1
 18142                           indf2	equ	0xFDF
 18143                           postinc2	equ	0xFDE
 18144                           postdec2	equ	0xFDD
 18145                           plusw2	equ	0xFDB
 18146                           fsr2h	equ	0xFDA
 18147                           fsr2l	equ	0xFD9
 18148                           status	equ	0xFD8
 18149                           
 18150 ;; *************** function ___ftmul *****************
 18151 ;; Defined at:
 18152 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
 18153 ;; Parameters:    Size  Location     Type
 18154 ;;  f1              3   20[BANK1 ] float 
 18155 ;;  f2              3   23[BANK1 ] float 
 18156 ;; Auto vars:     Size  Location     Type
 18157 ;;  f3_as_produc    3   30[BANK1 ] unsigned um
 18158 ;;  sign            1   34[BANK1 ] unsigned char 
 18159 ;;  cntr            1   33[BANK1 ] unsigned char 
 18160 ;;  exp             1   29[BANK1 ] unsigned char 
 18161 ;; Return value:  Size  Location     Type
 18162 ;;                  3   20[BANK1 ] float 
 18163 ;; Registers used:
 18164 ;;		wreg, status,2, status,0, cstack
 18165 ;; Tracked objects:
 18166 ;;		On entry : 0/0
 18167 ;;		On exit  : 0/0
 18168 ;;		Unchanged: 0/0
 18169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18170 ;;      Params:         0       0       6       0       0       0       0
 18171 ;;      Locals:         0       0       6       0       0       0       0
 18172 ;;      Temps:          0       0       3       0       0       0       0
 18173 ;;      Totals:         0       0      15       0       0       0       0
 18174 ;;Total ram usage:       15 bytes
 18175 ;; Hardware stack levels used:    1
 18176 ;; Hardware stack levels required when called:   13
 18177 ;; This function calls:
 18178 ;;		___ftpack
 18179 ;; This function is called by:
 18180 ;;		_calcSysVars
 18181 ;;		_calcVars2ti
 18182 ;;		_desintegrator
 18183 ;;		_longPressRETRO
 18184 ;;		_pressENTER
 18185 ;;		_longPressENTER
 18186 ;;		_fround
 18187 ;;		_scale
 18188 ;;		_printf
 18189 ;; This function uses a non-reentrant model
 18190 ;;
 18191                           
 18192                           	psect	text76
 18193  00386A                     __ptext76:
 18194                           	opt stack 0
 18195  00386A                     ___ftmul:
 18196                           	opt stack 15
 18197                           
 18198                           ;incstack = 0
 18199  00386A  C116  F11A         	movff	___ftmul@f1+2,??___ftmul
 18200  00386E  0101               	movlb	1	; () banked
 18201  003870  6B1B               	clrf	(??___ftmul+1)& (0+255),b
 18202  003872  6B1C               	clrf	(??___ftmul+2)& (0+255),b
 18203  003874  0101               	movlb	1	; () banked
 18204  003876  3515               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 18205  003878  0101               	movlb	1	; () banked
 18206  00387A  371A               	rlcf	??___ftmul& (0+255),f,b
 18207  00387C  E301               	bnc	u14531
 18208  00387E  811B               	bsf	(??___ftmul+1)& (0+255),0,b
 18209  003880                     u14531:
 18210  003880  0101               	movlb	1	; () banked
 18211  003882  511A               	movf	??___ftmul& (0+255),w,b
 18212  003884  0101               	movlb	1	; () banked
 18213  003886  6F1D               	movwf	___ftmul@exp& (0+255),b
 18214  003888  0101               	movlb	1	; () banked
 18215  00388A  511D               	movf	___ftmul@exp& (0+255),w,b
 18216  00388C  A4D8               	btfss	status,2,c
 18217  00388E  D00A               	goto	l9939
 18218                           
 18219                           ; BSR set to: 1
 18220  003890  0E00               	movlw	0
 18221  003892  0101               	movlb	1	; () banked
 18222  003894  6F14               	movwf	?___ftmul& (0+255),b
 18223  003896  0E00               	movlw	0
 18224  003898  0101               	movlb	1	; () banked
 18225  00389A  6F15               	movwf	(?___ftmul+1)& (0+255),b
 18226  00389C  0E00               	movlw	0
 18227  00389E  0101               	movlb	1	; () banked
 18228  0038A0  6F16               	movwf	(?___ftmul+2)& (0+255),b
 18229                           
 18230                           ; BSR set to: 1
 18231  0038A2  0012               	return	
 18232  0038A4                     l9939:
 18233                           
 18234                           ; BSR set to: 1
 18235  0038A4  C119  F11A         	movff	___ftmul@f2+2,??___ftmul
 18236  0038A8  0101               	movlb	1	; () banked
 18237  0038AA  6B1B               	clrf	(??___ftmul+1)& (0+255),b
 18238  0038AC  6B1C               	clrf	(??___ftmul+2)& (0+255),b
 18239  0038AE  0101               	movlb	1	; () banked
 18240  0038B0  3518               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 18241  0038B2  0101               	movlb	1	; () banked
 18242  0038B4  371A               	rlcf	??___ftmul& (0+255),f,b
 18243  0038B6  E301               	bnc	u14551
 18244  0038B8  811B               	bsf	(??___ftmul+1)& (0+255),0,b
 18245  0038BA                     u14551:
 18246  0038BA  0101               	movlb	1	; () banked
 18247  0038BC  511A               	movf	??___ftmul& (0+255),w,b
 18248  0038BE  0101               	movlb	1	; () banked
 18249  0038C0  6F22               	movwf	___ftmul@sign& (0+255),b
 18250  0038C2  0101               	movlb	1	; () banked
 18251  0038C4  5122               	movf	___ftmul@sign& (0+255),w,b
 18252  0038C6  A4D8               	btfss	status,2,c
 18253  0038C8  D00A               	goto	l9945
 18254                           
 18255                           ; BSR set to: 1
 18256  0038CA  0E00               	movlw	0
 18257  0038CC  0101               	movlb	1	; () banked
 18258  0038CE  6F14               	movwf	?___ftmul& (0+255),b
 18259  0038D0  0E00               	movlw	0
 18260  0038D2  0101               	movlb	1	; () banked
 18261  0038D4  6F15               	movwf	(?___ftmul+1)& (0+255),b
 18262  0038D6  0E00               	movlw	0
 18263  0038D8  0101               	movlb	1	; () banked
 18264  0038DA  6F16               	movwf	(?___ftmul+2)& (0+255),b
 18265                           
 18266                           ; BSR set to: 1
 18267  0038DC  0012               	return	
 18268  0038DE                     l9945:
 18269                           
 18270                           ; BSR set to: 1
 18271  0038DE  0101               	movlb	1	; () banked
 18272  0038E0  5122               	movf	___ftmul@sign& (0+255),w,b
 18273  0038E2  0F7B               	addlw	123
 18274  0038E4  0101               	movlb	1	; () banked
 18275  0038E6  271D               	addwf	___ftmul@exp& (0+255),f,b
 18276                           
 18277                           ; BSR set to: 1
 18278  0038E8  C116  F122         	movff	___ftmul@f1+2,___ftmul@sign
 18279  0038EC  0101               	movlb	1	; () banked
 18280  0038EE  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 18281  0038F0  0101               	movlb	1	; () banked
 18282  0038F2  1B22               	xorwf	___ftmul@sign& (0+255),f,b
 18283  0038F4  0E80               	movlw	128
 18284  0038F6  0101               	movlb	1	; () banked
 18285  0038F8  1722               	andwf	___ftmul@sign& (0+255),f,b
 18286                           
 18287                           ; BSR set to: 1
 18288  0038FA  0101               	movlb	1	; () banked
 18289  0038FC  8F15               	bsf	(___ftmul@f1+1)& (0+255),7,b
 18290                           
 18291                           ; BSR set to: 1
 18292  0038FE  0101               	movlb	1	; () banked
 18293  003900  8F18               	bsf	(___ftmul@f2+1)& (0+255),7,b
 18294                           
 18295                           ; BSR set to: 1
 18296  003902  0EFF               	movlw	255
 18297  003904  0101               	movlb	1	; () banked
 18298  003906  1717               	andwf	___ftmul@f2& (0+255),f,b
 18299  003908  0EFF               	movlw	255
 18300  00390A  0101               	movlb	1	; () banked
 18301  00390C  1718               	andwf	(___ftmul@f2+1)& (0+255),f,b
 18302  00390E  0E00               	movlw	0
 18303  003910  0101               	movlb	1	; () banked
 18304  003912  1719               	andwf	(___ftmul@f2+2)& (0+255),f,b
 18305                           
 18306                           ; BSR set to: 1
 18307  003914  0E00               	movlw	0
 18308  003916  0101               	movlb	1	; () banked
 18309  003918  6F1E               	movwf	___ftmul@f3_as_product& (0+255),b
 18310  00391A  0E00               	movlw	0
 18311  00391C  0101               	movlb	1	; () banked
 18312  00391E  6F1F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 18313  003920  0E00               	movlw	0
 18314  003922  0101               	movlb	1	; () banked
 18315  003924  6F20               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 18316                           
 18317                           ; BSR set to: 1
 18318  003926  0E07               	movlw	7
 18319  003928  0101               	movlb	1	; () banked
 18320  00392A  6F21               	movwf	___ftmul@cntr& (0+255),b
 18321  00392C                     l9959:
 18322                           
 18323                           ; BSR set to: 1
 18324  00392C  0101               	movlb	1	; () banked
 18325  00392E  A114               	btfss	___ftmul@f1& (0+255),0,b
 18326  003930  D00C               	goto	l9963
 18327                           
 18328                           ; BSR set to: 1
 18329  003932  0101               	movlb	1	; () banked
 18330  003934  5117               	movf	___ftmul@f2& (0+255),w,b
 18331  003936  0101               	movlb	1	; () banked
 18332  003938  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 18333  00393A  0101               	movlb	1	; () banked
 18334  00393C  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
 18335  00393E  0101               	movlb	1	; () banked
 18336  003940  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 18337  003942  0101               	movlb	1	; () banked
 18338  003944  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 18339  003946  0101               	movlb	1	; () banked
 18340  003948  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 18341  00394A                     l9963:
 18342                           
 18343                           ; BSR set to: 1
 18344  00394A  0101               	movlb	1	; () banked
 18345  00394C  90D8               	bcf	status,0,c
 18346  00394E  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 18347  003950  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 18348  003952  3314               	rrcf	___ftmul@f1& (0+255),f,b
 18349  003954  0101               	movlb	1	; () banked
 18350  003956  90D8               	bcf	status,0,c
 18351  003958  3717               	rlcf	___ftmul@f2& (0+255),f,b
 18352  00395A  3718               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 18353  00395C  3719               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 18354                           
 18355                           ; BSR set to: 1
 18356  00395E  0101               	movlb	1	; () banked
 18357  003960  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
 18358  003962  D7E4               	goto	l9959
 18359                           
 18360                           ; BSR set to: 1
 18361                           
 18362                           ; BSR set to: 1
 18363  003964  0E09               	movlw	9
 18364  003966  0101               	movlb	1	; () banked
 18365  003968  6F21               	movwf	___ftmul@cntr& (0+255),b
 18366  00396A                     l9969:
 18367                           
 18368                           ; BSR set to: 1
 18369  00396A  0101               	movlb	1	; () banked
 18370  00396C  A114               	btfss	___ftmul@f1& (0+255),0,b
 18371  00396E  D00C               	goto	l9973
 18372                           
 18373                           ; BSR set to: 1
 18374  003970  0101               	movlb	1	; () banked
 18375  003972  5117               	movf	___ftmul@f2& (0+255),w,b
 18376  003974  0101               	movlb	1	; () banked
 18377  003976  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 18378  003978  0101               	movlb	1	; () banked
 18379  00397A  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
 18380  00397C  0101               	movlb	1	; () banked
 18381  00397E  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 18382  003980  0101               	movlb	1	; () banked
 18383  003982  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 18384  003984  0101               	movlb	1	; () banked
 18385  003986  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 18386  003988                     l9973:
 18387                           
 18388                           ; BSR set to: 1
 18389  003988  0101               	movlb	1	; () banked
 18390  00398A  90D8               	bcf	status,0,c
 18391  00398C  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 18392  00398E  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 18393  003990  3314               	rrcf	___ftmul@f1& (0+255),f,b
 18394  003992  0101               	movlb	1	; () banked
 18395  003994  90D8               	bcf	status,0,c
 18396  003996  3320               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 18397  003998  331F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 18398  00399A  331E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 18399                           
 18400                           ; BSR set to: 1
 18401  00399C  0101               	movlb	1	; () banked
 18402  00399E  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
 18403  0039A0  D7E4               	goto	l9969
 18404                           
 18405                           ; BSR set to: 1
 18406                           
 18407                           ; BSR set to: 1
 18408  0039A2  C11E  F100         	movff	___ftmul@f3_as_product,___ftpack@arg
 18409  0039A6  C11F  F101         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 18410  0039AA  C120  F102         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 18411  0039AE  C11D  F103         	movff	___ftmul@exp,___ftpack@exp
 18412  0039B2  C122  F104         	movff	___ftmul@sign,___ftpack@sign
 18413  0039B6  EC29  F025         	call	___ftpack	;wreg free
 18414  0039BA  C100  F114         	movff	?___ftpack,?___ftmul
 18415  0039BE  C101  F115         	movff	?___ftpack+1,?___ftmul+1
 18416  0039C2  C102  F116         	movff	?___ftpack+2,?___ftmul+2
 18417  0039C6  0012               	return	
 18418  0039C8                     __end_of___ftmul:
 18419                           	opt stack 0
 18420                           tblptru	equ	0xFF8
 18421                           tblptrh	equ	0xFF7
 18422                           tblptrl	equ	0xFF6
 18423                           tablat	equ	0xFF5
 18424                           prodh	equ	0xFF4
 18425                           prodl	equ	0xFF3
 18426                           intcon	equ	0xFF2
 18427                           postinc0	equ	0xFEE
 18428                           wreg	equ	0xFE8
 18429                           postdec1	equ	0xFE5
 18430                           fsr1l	equ	0xFE1
 18431                           indf2	equ	0xFDF
 18432                           postinc2	equ	0xFDE
 18433                           postdec2	equ	0xFDD
 18434                           plusw2	equ	0xFDB
 18435                           fsr2h	equ	0xFDA
 18436                           fsr2l	equ	0xFD9
 18437                           status	equ	0xFD8
 18438                           
 18439 ;; *************** function ___ftdiv *****************
 18440 ;; Defined at:
 18441 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
 18442 ;; Parameters:    Size  Location     Type
 18443 ;;  f1              3   18[BANK1 ] float 
 18444 ;;  f2              3   21[BANK1 ] float 
 18445 ;; Auto vars:     Size  Location     Type
 18446 ;;  f3              3   28[BANK1 ] float 
 18447 ;;  sign            1   32[BANK1 ] unsigned char 
 18448 ;;  exp             1   31[BANK1 ] unsigned char 
 18449 ;;  cntr            1   27[BANK1 ] unsigned char 
 18450 ;; Return value:  Size  Location     Type
 18451 ;;                  3   18[BANK1 ] float 
 18452 ;; Registers used:
 18453 ;;		wreg, status,2, status,0, cstack
 18454 ;; Tracked objects:
 18455 ;;		On entry : 0/0
 18456 ;;		On exit  : 0/0
 18457 ;;		Unchanged: 0/0
 18458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18459 ;;      Params:         0       0       6       0       0       0       0
 18460 ;;      Locals:         0       0       6       0       0       0       0
 18461 ;;      Temps:          0       0       3       0       0       0       0
 18462 ;;      Totals:         0       0      15       0       0       0       0
 18463 ;;Total ram usage:       15 bytes
 18464 ;; Hardware stack levels used:    1
 18465 ;; Hardware stack levels required when called:   13
 18466 ;; This function calls:
 18467 ;;		___ftpack
 18468 ;; This function is called by:
 18469 ;;		_calcVars2ti
 18470 ;;		_integrator
 18471 ;;		_longPressENTER
 18472 ;; This function uses a non-reentrant model
 18473 ;;
 18474                           
 18475                           	psect	text77
 18476  003C7A                     __ptext77:
 18477                           	opt stack 0
 18478  003C7A                     ___ftdiv:
 18479                           	opt stack 12
 18480                           
 18481                           ;incstack = 0
 18482  003C7A  C114  F118         	movff	___ftdiv@f1+2,??___ftdiv
 18483  003C7E  0101               	movlb	1	; () banked
 18484  003C80  6B19               	clrf	(??___ftdiv+1)& (0+255),b
 18485  003C82  6B1A               	clrf	(??___ftdiv+2)& (0+255),b
 18486  003C84  0101               	movlb	1	; () banked
 18487  003C86  3513               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 18488  003C88  0101               	movlb	1	; () banked
 18489  003C8A  3718               	rlcf	??___ftdiv& (0+255),f,b
 18490  003C8C  E301               	bnc	u14481
 18491  003C8E  8119               	bsf	(??___ftdiv+1)& (0+255),0,b
 18492  003C90                     u14481:
 18493  003C90  0101               	movlb	1	; () banked
 18494  003C92  5118               	movf	??___ftdiv& (0+255),w,b
 18495  003C94  0101               	movlb	1	; () banked
 18496  003C96  6F1F               	movwf	___ftdiv@exp& (0+255),b
 18497  003C98  0101               	movlb	1	; () banked
 18498  003C9A  511F               	movf	___ftdiv@exp& (0+255),w,b
 18499  003C9C  A4D8               	btfss	status,2,c
 18500  003C9E  D00A               	goto	l9893
 18501                           
 18502                           ; BSR set to: 1
 18503  003CA0  0E00               	movlw	0
 18504  003CA2  0101               	movlb	1	; () banked
 18505  003CA4  6F12               	movwf	?___ftdiv& (0+255),b
 18506  003CA6  0E00               	movlw	0
 18507  003CA8  0101               	movlb	1	; () banked
 18508  003CAA  6F13               	movwf	(?___ftdiv+1)& (0+255),b
 18509  003CAC  0E00               	movlw	0
 18510  003CAE  0101               	movlb	1	; () banked
 18511  003CB0  6F14               	movwf	(?___ftdiv+2)& (0+255),b
 18512                           
 18513                           ; BSR set to: 1
 18514  003CB2  0012               	return	
 18515  003CB4                     l9893:
 18516                           
 18517                           ; BSR set to: 1
 18518  003CB4  C117  F118         	movff	___ftdiv@f2+2,??___ftdiv
 18519  003CB8  0101               	movlb	1	; () banked
 18520  003CBA  6B19               	clrf	(??___ftdiv+1)& (0+255),b
 18521  003CBC  6B1A               	clrf	(??___ftdiv+2)& (0+255),b
 18522  003CBE  0101               	movlb	1	; () banked
 18523  003CC0  3516               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 18524  003CC2  0101               	movlb	1	; () banked
 18525  003CC4  3718               	rlcf	??___ftdiv& (0+255),f,b
 18526  003CC6  E301               	bnc	u14501
 18527  003CC8  8119               	bsf	(??___ftdiv+1)& (0+255),0,b
 18528  003CCA                     u14501:
 18529  003CCA  0101               	movlb	1	; () banked
 18530  003CCC  5118               	movf	??___ftdiv& (0+255),w,b
 18531  003CCE  0101               	movlb	1	; () banked
 18532  003CD0  6F20               	movwf	___ftdiv@sign& (0+255),b
 18533  003CD2  0101               	movlb	1	; () banked
 18534  003CD4  5120               	movf	___ftdiv@sign& (0+255),w,b
 18535  003CD6  A4D8               	btfss	status,2,c
 18536  003CD8  D00A               	goto	l9899
 18537                           
 18538                           ; BSR set to: 1
 18539  003CDA  0E00               	movlw	0
 18540  003CDC  0101               	movlb	1	; () banked
 18541  003CDE  6F12               	movwf	?___ftdiv& (0+255),b
 18542  003CE0  0E00               	movlw	0
 18543  003CE2  0101               	movlb	1	; () banked
 18544  003CE4  6F13               	movwf	(?___ftdiv+1)& (0+255),b
 18545  003CE6  0E00               	movlw	0
 18546  003CE8  0101               	movlb	1	; () banked
 18547  003CEA  6F14               	movwf	(?___ftdiv+2)& (0+255),b
 18548                           
 18549                           ; BSR set to: 1
 18550  003CEC  0012               	return	
 18551  003CEE                     l9899:
 18552                           
 18553                           ; BSR set to: 1
 18554  003CEE  0E00               	movlw	0
 18555  003CF0  0101               	movlb	1	; () banked
 18556  003CF2  6F1C               	movwf	___ftdiv@f3& (0+255),b
 18557  003CF4  0E00               	movlw	0
 18558  003CF6  0101               	movlb	1	; () banked
 18559  003CF8  6F1D               	movwf	(___ftdiv@f3+1)& (0+255),b
 18560  003CFA  0E00               	movlw	0
 18561  003CFC  0101               	movlb	1	; () banked
 18562  003CFE  6F1E               	movwf	(___ftdiv@f3+2)& (0+255),b
 18563                           
 18564                           ; BSR set to: 1
 18565  003D00  0101               	movlb	1	; () banked
 18566  003D02  5120               	movf	___ftdiv@sign& (0+255),w,b
 18567  003D04  0F89               	addlw	137
 18568  003D06  0101               	movlb	1	; () banked
 18569  003D08  5F1F               	subwf	___ftdiv@exp& (0+255),f,b
 18570                           
 18571                           ; BSR set to: 1
 18572  003D0A  C114  F120         	movff	___ftdiv@f1+2,___ftdiv@sign
 18573                           
 18574                           ; BSR set to: 1
 18575  003D0E  0101               	movlb	1	; () banked
 18576  003D10  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 18577  003D12  0101               	movlb	1	; () banked
 18578  003D14  1B20               	xorwf	___ftdiv@sign& (0+255),f,b
 18579                           
 18580                           ; BSR set to: 1
 18581  003D16  0E80               	movlw	128
 18582  003D18  0101               	movlb	1	; () banked
 18583  003D1A  1720               	andwf	___ftdiv@sign& (0+255),f,b
 18584                           
 18585                           ; BSR set to: 1
 18586  003D1C  0101               	movlb	1	; () banked
 18587  003D1E  8F13               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 18588                           
 18589                           ; BSR set to: 1
 18590  003D20  0EFF               	movlw	255
 18591  003D22  0101               	movlb	1	; () banked
 18592  003D24  1712               	andwf	___ftdiv@f1& (0+255),f,b
 18593  003D26  0EFF               	movlw	255
 18594  003D28  0101               	movlb	1	; () banked
 18595  003D2A  1713               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 18596  003D2C  0E00               	movlw	0
 18597  003D2E  0101               	movlb	1	; () banked
 18598  003D30  1714               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 18599                           
 18600                           ; BSR set to: 1
 18601  003D32  0101               	movlb	1	; () banked
 18602  003D34  8F16               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 18603                           
 18604                           ; BSR set to: 1
 18605  003D36  0EFF               	movlw	255
 18606  003D38  0101               	movlb	1	; () banked
 18607  003D3A  1715               	andwf	___ftdiv@f2& (0+255),f,b
 18608  003D3C  0EFF               	movlw	255
 18609  003D3E  0101               	movlb	1	; () banked
 18610  003D40  1716               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 18611  003D42  0E00               	movlw	0
 18612  003D44  0101               	movlb	1	; () banked
 18613  003D46  1717               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 18614                           
 18615                           ; BSR set to: 1
 18616  003D48  0E18               	movlw	24
 18617  003D4A  0101               	movlb	1	; () banked
 18618  003D4C  6F1B               	movwf	___ftdiv@cntr& (0+255),b
 18619  003D4E                     l9919:
 18620                           
 18621                           ; BSR set to: 1
 18622  003D4E  0101               	movlb	1	; () banked
 18623  003D50  90D8               	bcf	status,0,c
 18624  003D52  371C               	rlcf	___ftdiv@f3& (0+255),f,b
 18625  003D54  371D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 18626  003D56  371E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 18627                           
 18628                           ; BSR set to: 1
 18629  003D58  0101               	movlb	1	; () banked
 18630  003D5A  5115               	movf	___ftdiv@f2& (0+255),w,b
 18631  003D5C  0101               	movlb	1	; () banked
 18632  003D5E  5D12               	subwf	___ftdiv@f1& (0+255),w,b
 18633  003D60  0101               	movlb	1	; () banked
 18634  003D62  5116               	movf	(___ftdiv@f2+1)& (0+255),w,b
 18635  003D64  0101               	movlb	1	; () banked
 18636  003D66  5913               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 18637  003D68  0101               	movlb	1	; () banked
 18638  003D6A  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 18639  003D6C  0101               	movlb	1	; () banked
 18640  003D6E  5914               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 18641  003D70  A0D8               	btfss	status,0,c
 18642  003D72  D00E               	goto	l1380
 18643                           
 18644                           ; BSR set to: 1
 18645  003D74  0101               	movlb	1	; () banked
 18646  003D76  5115               	movf	___ftdiv@f2& (0+255),w,b
 18647  003D78  0101               	movlb	1	; () banked
 18648  003D7A  5F12               	subwf	___ftdiv@f1& (0+255),f,b
 18649  003D7C  0101               	movlb	1	; () banked
 18650  003D7E  5116               	movf	(___ftdiv@f2+1)& (0+255),w,b
 18651  003D80  0101               	movlb	1	; () banked
 18652  003D82  5B13               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 18653  003D84  0101               	movlb	1	; () banked
 18654  003D86  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 18655  003D88  0101               	movlb	1	; () banked
 18656  003D8A  5B14               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 18657                           
 18658                           ; BSR set to: 1
 18659  003D8C  0101               	movlb	1	; () banked
 18660  003D8E  811C               	bsf	___ftdiv@f3& (0+255),0,b
 18661  003D90                     l1380:
 18662                           
 18663                           ; BSR set to: 1
 18664  003D90  0101               	movlb	1	; () banked
 18665  003D92  90D8               	bcf	status,0,c
 18666  003D94  3712               	rlcf	___ftdiv@f1& (0+255),f,b
 18667  003D96  3713               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 18668  003D98  3714               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 18669                           
 18670                           ; BSR set to: 1
 18671  003D9A  0101               	movlb	1	; () banked
 18672  003D9C  2F1B               	decfsz	___ftdiv@cntr& (0+255),f,b
 18673  003D9E  D7D7               	goto	l9919
 18674                           
 18675                           ; BSR set to: 1
 18676                           
 18677                           ; BSR set to: 1
 18678  003DA0  C11C  F100         	movff	___ftdiv@f3,___ftpack@arg
 18679  003DA4  C11D  F101         	movff	___ftdiv@f3+1,___ftpack@arg+1
 18680  003DA8  C11E  F102         	movff	___ftdiv@f3+2,___ftpack@arg+2
 18681  003DAC  C11F  F103         	movff	___ftdiv@exp,___ftpack@exp
 18682  003DB0  C120  F104         	movff	___ftdiv@sign,___ftpack@sign
 18683  003DB4  EC29  F025         	call	___ftpack	;wreg free
 18684  003DB8  C100  F112         	movff	?___ftpack,?___ftdiv
 18685  003DBC  C101  F113         	movff	?___ftpack+1,?___ftdiv+1
 18686  003DC0  C102  F114         	movff	?___ftpack+2,?___ftdiv+2
 18687  003DC4  0012               	return	
 18688  003DC6                     __end_of___ftdiv:
 18689                           	opt stack 0
 18690                           tblptru	equ	0xFF8
 18691                           tblptrh	equ	0xFF7
 18692                           tblptrl	equ	0xFF6
 18693                           tablat	equ	0xFF5
 18694                           prodh	equ	0xFF4
 18695                           prodl	equ	0xFF3
 18696                           intcon	equ	0xFF2
 18697                           postinc0	equ	0xFEE
 18698                           wreg	equ	0xFE8
 18699                           postdec1	equ	0xFE5
 18700                           fsr1l	equ	0xFE1
 18701                           indf2	equ	0xFDF
 18702                           postinc2	equ	0xFDE
 18703                           postdec2	equ	0xFDD
 18704                           plusw2	equ	0xFDB
 18705                           fsr2h	equ	0xFDA
 18706                           fsr2l	equ	0xFD9
 18707                           status	equ	0xFD8
 18708                           
 18709 ;; *************** function ___ftadd *****************
 18710 ;; Defined at:
 18711 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
 18712 ;; Parameters:    Size  Location     Type
 18713 ;;  f1              3   45[BANK1 ] float 
 18714 ;;  f2              3   48[BANK1 ] float 
 18715 ;; Auto vars:     Size  Location     Type
 18716 ;;  exp1            1   56[BANK1 ] unsigned char 
 18717 ;;  exp2            1   55[BANK1 ] unsigned char 
 18718 ;;  sign            1   54[BANK1 ] unsigned char 
 18719 ;; Return value:  Size  Location     Type
 18720 ;;                  3   45[BANK1 ] float 
 18721 ;; Registers used:
 18722 ;;		wreg, status,2, status,0, cstack
 18723 ;; Tracked objects:
 18724 ;;		On entry : 0/0
 18725 ;;		On exit  : 0/0
 18726 ;;		Unchanged: 0/0
 18727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18728 ;;      Params:         0       0       6       0       0       0       0
 18729 ;;      Locals:         0       0       3       0       0       0       0
 18730 ;;      Temps:          0       0       3       0       0       0       0
 18731 ;;      Totals:         0       0      12       0       0       0       0
 18732 ;;Total ram usage:       12 bytes
 18733 ;; Hardware stack levels used:    1
 18734 ;; Hardware stack levels required when called:   13
 18735 ;; This function calls:
 18736 ;;		___ftpack
 18737 ;; This function is called by:
 18738 ;;		_longPressENTER
 18739 ;;		_printf
 18740 ;;		___ftsub
 18741 ;; This function uses a non-reentrant model
 18742 ;;
 18743                           
 18744                           	psect	text78
 18745  0027C8                     __ptext78:
 18746                           	opt stack 0
 18747  0027C8                     ___ftadd:
 18748                           	opt stack 13
 18749                           
 18750                           ;incstack = 0
 18751  0027C8  C12F  F133         	movff	___ftadd@f1+2,??___ftadd
 18752  0027CC  0101               	movlb	1	; () banked
 18753  0027CE  6B34               	clrf	(??___ftadd+1)& (0+255),b
 18754  0027D0  6B35               	clrf	(??___ftadd+2)& (0+255),b
 18755  0027D2  0101               	movlb	1	; () banked
 18756  0027D4  352E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 18757  0027D6  0101               	movlb	1	; () banked
 18758  0027D8  3733               	rlcf	??___ftadd& (0+255),f,b
 18759  0027DA  E301               	bnc	u14271
 18760  0027DC  8134               	bsf	(??___ftadd+1)& (0+255),0,b
 18761  0027DE                     u14271:
 18762  0027DE  0101               	movlb	1	; () banked
 18763  0027E0  5133               	movf	??___ftadd& (0+255),w,b
 18764  0027E2  0101               	movlb	1	; () banked
 18765  0027E4  6F38               	movwf	___ftadd@exp1& (0+255),b
 18766  0027E6  C132  F133         	movff	___ftadd@f2+2,??___ftadd
 18767  0027EA  0101               	movlb	1	; () banked
 18768  0027EC  6B34               	clrf	(??___ftadd+1)& (0+255),b
 18769  0027EE  6B35               	clrf	(??___ftadd+2)& (0+255),b
 18770  0027F0  0101               	movlb	1	; () banked
 18771  0027F2  3531               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 18772  0027F4  0101               	movlb	1	; () banked
 18773  0027F6  3733               	rlcf	??___ftadd& (0+255),f,b
 18774  0027F8  E301               	bnc	u14281
 18775  0027FA  8134               	bsf	(??___ftadd+1)& (0+255),0,b
 18776  0027FC                     u14281:
 18777  0027FC  0101               	movlb	1	; () banked
 18778  0027FE  5133               	movf	??___ftadd& (0+255),w,b
 18779  002800  0101               	movlb	1	; () banked
 18780  002802  6F37               	movwf	___ftadd@exp2& (0+255),b
 18781                           
 18782                           ; BSR set to: 1
 18783  002804  0101               	movlb	1	; () banked
 18784  002806  5138               	movf	___ftadd@exp1& (0+255),w,b
 18785  002808  0101               	movlb	1	; () banked
 18786  00280A  B4D8               	btfsc	status,2,c
 18787  00280C  D011               	goto	l1345
 18788                           
 18789                           ; BSR set to: 1
 18790  00280E  0101               	movlb	1	; () banked
 18791  002810  5137               	movf	___ftadd@exp2& (0+255),w,b
 18792  002812  0101               	movlb	1	; () banked
 18793  002814  5D38               	subwf	___ftadd@exp1& (0+255),w,b
 18794  002816  B0D8               	btfsc	status,0,c
 18795  002818  D012               	goto	l9825
 18796                           
 18797                           ; BSR set to: 1
 18798  00281A  0101               	movlb	1	; () banked
 18799  00281C  5138               	movf	___ftadd@exp1& (0+255),w,b
 18800  00281E  0800               	sublw	0
 18801  002820  0101               	movlb	1	; () banked
 18802  002822  2537               	addwf	___ftadd@exp2& (0+255),w,b
 18803  002824  0101               	movlb	1	; () banked
 18804  002826  6F33               	movwf	??___ftadd& (0+255),b
 18805  002828  0E18               	movlw	24
 18806  00282A  0101               	movlb	1	; () banked
 18807  00282C  6533               	cpfsgt	??___ftadd& (0+255),b
 18808  00282E  D007               	goto	l9825
 18809  002830                     l1345:
 18810                           
 18811                           ; BSR set to: 1
 18812  002830  C130  F12D         	movff	___ftadd@f2,?___ftadd
 18813  002834  C131  F12E         	movff	___ftadd@f2+1,?___ftadd+1
 18814  002838  C132  F12F         	movff	___ftadd@f2+2,?___ftadd+2
 18815  00283C  0012               	return	
 18816  00283E                     l9825:
 18817                           
 18818                           ; BSR set to: 1
 18819  00283E  0101               	movlb	1	; () banked
 18820  002840  5137               	movf	___ftadd@exp2& (0+255),w,b
 18821  002842  0101               	movlb	1	; () banked
 18822  002844  B4D8               	btfsc	status,2,c
 18823  002846  D011               	goto	l1349
 18824                           
 18825                           ; BSR set to: 1
 18826  002848  0101               	movlb	1	; () banked
 18827  00284A  5138               	movf	___ftadd@exp1& (0+255),w,b
 18828  00284C  0101               	movlb	1	; () banked
 18829  00284E  5D37               	subwf	___ftadd@exp2& (0+255),w,b
 18830  002850  B0D8               	btfsc	status,0,c
 18831  002852  D012               	goto	l9831
 18832                           
 18833                           ; BSR set to: 1
 18834  002854  0101               	movlb	1	; () banked
 18835  002856  5137               	movf	___ftadd@exp2& (0+255),w,b
 18836  002858  0800               	sublw	0
 18837  00285A  0101               	movlb	1	; () banked
 18838  00285C  2538               	addwf	___ftadd@exp1& (0+255),w,b
 18839  00285E  0101               	movlb	1	; () banked
 18840  002860  6F33               	movwf	??___ftadd& (0+255),b
 18841  002862  0E18               	movlw	24
 18842  002864  0101               	movlb	1	; () banked
 18843  002866  6533               	cpfsgt	??___ftadd& (0+255),b
 18844  002868  D007               	goto	l9831
 18845  00286A                     l1349:
 18846                           
 18847                           ; BSR set to: 1
 18848  00286A  C12D  F12D         	movff	___ftadd@f1,?___ftadd
 18849  00286E  C12E  F12E         	movff	___ftadd@f1+1,?___ftadd+1
 18850  002872  C12F  F12F         	movff	___ftadd@f1+2,?___ftadd+2
 18851  002876  0012               	return	
 18852  002878                     l9831:
 18853                           
 18854                           ; BSR set to: 1
 18855  002878  0E06               	movlw	6
 18856  00287A  0101               	movlb	1	; () banked
 18857  00287C  6F36               	movwf	___ftadd@sign& (0+255),b
 18858                           
 18859                           ; BSR set to: 1
 18860  00287E  0101               	movlb	1	; () banked
 18861  002880  AF2F               	btfss	(___ftadd@f1+2)& (0+255),7,b
 18862  002882  D002               	goto	l9837
 18863                           
 18864                           ; BSR set to: 1
 18865  002884  0101               	movlb	1	; () banked
 18866  002886  8F36               	bsf	___ftadd@sign& (0+255),7,b
 18867  002888                     l9837:
 18868                           
 18869                           ; BSR set to: 1
 18870  002888  0101               	movlb	1	; () banked
 18871  00288A  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
 18872  00288C  D002               	goto	l1351
 18873                           
 18874                           ; BSR set to: 1
 18875  00288E  0101               	movlb	1	; () banked
 18876  002890  8D36               	bsf	___ftadd@sign& (0+255),6,b
 18877  002892                     l1351:
 18878                           
 18879                           ; BSR set to: 1
 18880  002892  0101               	movlb	1	; () banked
 18881  002894  8F2E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 18882                           
 18883                           ; BSR set to: 1
 18884  002896  0EFF               	movlw	255
 18885  002898  0101               	movlb	1	; () banked
 18886  00289A  172D               	andwf	___ftadd@f1& (0+255),f,b
 18887  00289C  0EFF               	movlw	255
 18888  00289E  0101               	movlb	1	; () banked
 18889  0028A0  172E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 18890  0028A2  0E00               	movlw	0
 18891  0028A4  0101               	movlb	1	; () banked
 18892  0028A6  172F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 18893  0028A8  0101               	movlb	1	; () banked
 18894  0028AA  8F31               	bsf	(___ftadd@f2+1)& (0+255),7,b
 18895                           
 18896                           ; BSR set to: 1
 18897  0028AC  0EFF               	movlw	255
 18898  0028AE  0101               	movlb	1	; () banked
 18899  0028B0  1730               	andwf	___ftadd@f2& (0+255),f,b
 18900  0028B2  0EFF               	movlw	255
 18901  0028B4  0101               	movlb	1	; () banked
 18902  0028B6  1731               	andwf	(___ftadd@f2+1)& (0+255),f,b
 18903  0028B8  0E00               	movlw	0
 18904  0028BA  0101               	movlb	1	; () banked
 18905  0028BC  1732               	andwf	(___ftadd@f2+2)& (0+255),f,b
 18906                           
 18907                           ; BSR set to: 1
 18908  0028BE  0101               	movlb	1	; () banked
 18909  0028C0  5137               	movf	___ftadd@exp2& (0+255),w,b
 18910  0028C2  0101               	movlb	1	; () banked
 18911  0028C4  5D38               	subwf	___ftadd@exp1& (0+255),w,b
 18912  0028C6  B0D8               	btfsc	status,0,c
 18913  0028C8  D025               	goto	l9857
 18914  0028CA                     l9847:
 18915                           
 18916                           ; BSR set to: 1
 18917  0028CA  0101               	movlb	1	; () banked
 18918  0028CC  90D8               	bcf	status,0,c
 18919  0028CE  3730               	rlcf	___ftadd@f2& (0+255),f,b
 18920  0028D0  3731               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 18921  0028D2  3732               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 18922  0028D4  0101               	movlb	1	; () banked
 18923  0028D6  0737               	decf	___ftadd@exp2& (0+255),f,b
 18924                           
 18925                           ; BSR set to: 1
 18926  0028D8  0101               	movlb	1	; () banked
 18927  0028DA  5138               	movf	___ftadd@exp1& (0+255),w,b
 18928  0028DC  0101               	movlb	1	; () banked
 18929  0028DE  1937               	xorwf	___ftadd@exp2& (0+255),w,b
 18930  0028E0  B4D8               	btfsc	status,2,c
 18931  0028E2  D011               	goto	l9855
 18932                           
 18933                           ; BSR set to: 1
 18934  0028E4  0101               	movlb	1	; () banked
 18935  0028E6  0736               	decf	___ftadd@sign& (0+255),f,b
 18936  0028E8  C136  F133         	movff	___ftadd@sign,??___ftadd
 18937  0028EC  0E07               	movlw	7
 18938  0028EE  0101               	movlb	1	; () banked
 18939  0028F0  1733               	andwf	??___ftadd& (0+255),f,b
 18940  0028F2  B4D8               	btfsc	status,2,c
 18941  0028F4  D008               	goto	l9855
 18942  0028F6  D7E9               	goto	l9847
 18943  0028F8                     l9853:
 18944                           
 18945                           ; BSR set to: 1
 18946  0028F8  0101               	movlb	1	; () banked
 18947  0028FA  90D8               	bcf	status,0,c
 18948  0028FC  332F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 18949  0028FE  332E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 18950  002900  332D               	rrcf	___ftadd@f1& (0+255),f,b
 18951  002902  0101               	movlb	1	; () banked
 18952  002904  2B38               	incf	___ftadd@exp1& (0+255),f,b
 18953  002906                     l9855:
 18954                           
 18955                           ; BSR set to: 1
 18956  002906  0101               	movlb	1	; () banked
 18957  002908  5137               	movf	___ftadd@exp2& (0+255),w,b
 18958  00290A  0101               	movlb	1	; () banked
 18959  00290C  1938               	xorwf	___ftadd@exp1& (0+255),w,b
 18960  00290E  B4D8               	btfsc	status,2,c
 18961  002910  D02B               	goto	l1360
 18962  002912  D7F2               	goto	l9853
 18963  002914                     l9857:
 18964                           
 18965                           ; BSR set to: 1
 18966  002914  0101               	movlb	1	; () banked
 18967  002916  5138               	movf	___ftadd@exp1& (0+255),w,b
 18968  002918  0101               	movlb	1	; () banked
 18969  00291A  5D37               	subwf	___ftadd@exp2& (0+255),w,b
 18970  00291C  B0D8               	btfsc	status,0,c
 18971  00291E  D024               	goto	l1360
 18972  002920                     l9859:
 18973                           
 18974                           ; BSR set to: 1
 18975  002920  0101               	movlb	1	; () banked
 18976  002922  90D8               	bcf	status,0,c
 18977  002924  372D               	rlcf	___ftadd@f1& (0+255),f,b
 18978  002926  372E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 18979  002928  372F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 18980  00292A  0101               	movlb	1	; () banked
 18981  00292C  0738               	decf	___ftadd@exp1& (0+255),f,b
 18982                           
 18983                           ; BSR set to: 1
 18984  00292E  0101               	movlb	1	; () banked
 18985  002930  5138               	movf	___ftadd@exp1& (0+255),w,b
 18986  002932  0101               	movlb	1	; () banked
 18987  002934  1937               	xorwf	___ftadd@exp2& (0+255),w,b
 18988  002936  B4D8               	btfsc	status,2,c
 18989  002938  D011               	goto	l9867
 18990                           
 18991                           ; BSR set to: 1
 18992  00293A  0101               	movlb	1	; () banked
 18993  00293C  0736               	decf	___ftadd@sign& (0+255),f,b
 18994  00293E  C136  F133         	movff	___ftadd@sign,??___ftadd
 18995  002942  0E07               	movlw	7
 18996  002944  0101               	movlb	1	; () banked
 18997  002946  1733               	andwf	??___ftadd& (0+255),f,b
 18998  002948  B4D8               	btfsc	status,2,c
 18999  00294A  D008               	goto	l9867
 19000  00294C  D7E9               	goto	l9859
 19001  00294E                     l9865:
 19002                           
 19003                           ; BSR set to: 1
 19004  00294E  0101               	movlb	1	; () banked
 19005  002950  90D8               	bcf	status,0,c
 19006  002952  3332               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 19007  002954  3331               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 19008  002956  3330               	rrcf	___ftadd@f2& (0+255),f,b
 19009  002958  0101               	movlb	1	; () banked
 19010  00295A  2B37               	incf	___ftadd@exp2& (0+255),f,b
 19011  00295C                     l9867:
 19012                           
 19013                           ; BSR set to: 1
 19014  00295C  0101               	movlb	1	; () banked
 19015  00295E  5137               	movf	___ftadd@exp2& (0+255),w,b
 19016  002960  0101               	movlb	1	; () banked
 19017  002962  1938               	xorwf	___ftadd@exp1& (0+255),w,b
 19018  002964  A4D8               	btfss	status,2,c
 19019  002966  D7F3               	goto	l9865
 19020  002968                     l1360:
 19021                           
 19022                           ; BSR set to: 1
 19023  002968  0101               	movlb	1	; () banked
 19024  00296A  AF36               	btfss	___ftadd@sign& (0+255),7,b
 19025  00296C  D012               	goto	l1369
 19026                           
 19027                           ; BSR set to: 1
 19028  00296E  0EFF               	movlw	255
 19029  002970  0101               	movlb	1	; () banked
 19030  002972  1B2D               	xorwf	___ftadd@f1& (0+255),f,b
 19031  002974  0EFF               	movlw	255
 19032  002976  0101               	movlb	1	; () banked
 19033  002978  1B2E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 19034  00297A  0EFF               	movlw	255
 19035  00297C  0101               	movlb	1	; () banked
 19036  00297E  1B2F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 19037  002980  0E01               	movlw	1
 19038  002982  0101               	movlb	1	; () banked
 19039  002984  272D               	addwf	___ftadd@f1& (0+255),f,b
 19040  002986  0E00               	movlw	0
 19041  002988  0101               	movlb	1	; () banked
 19042  00298A  232E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 19043  00298C  0E00               	movlw	0
 19044  00298E  0101               	movlb	1	; () banked
 19045  002990  232F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 19046  002992                     l1369:
 19047                           
 19048                           ; BSR set to: 1
 19049  002992  0101               	movlb	1	; () banked
 19050  002994  AD36               	btfss	___ftadd@sign& (0+255),6,b
 19051  002996  D012               	goto	l9873
 19052                           
 19053                           ; BSR set to: 1
 19054  002998  0EFF               	movlw	255
 19055  00299A  0101               	movlb	1	; () banked
 19056  00299C  1B30               	xorwf	___ftadd@f2& (0+255),f,b
 19057  00299E  0EFF               	movlw	255
 19058  0029A0  0101               	movlb	1	; () banked
 19059  0029A2  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 19060  0029A4  0EFF               	movlw	255
 19061  0029A6  0101               	movlb	1	; () banked
 19062  0029A8  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 19063  0029AA  0E01               	movlw	1
 19064  0029AC  0101               	movlb	1	; () banked
 19065  0029AE  2730               	addwf	___ftadd@f2& (0+255),f,b
 19066  0029B0  0E00               	movlw	0
 19067  0029B2  0101               	movlb	1	; () banked
 19068  0029B4  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 19069  0029B6  0E00               	movlw	0
 19070  0029B8  0101               	movlb	1	; () banked
 19071  0029BA  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 19072  0029BC                     l9873:
 19073                           
 19074                           ; BSR set to: 1
 19075  0029BC  0E00               	movlw	0
 19076  0029BE  0101               	movlb	1	; () banked
 19077  0029C0  6F36               	movwf	___ftadd@sign& (0+255),b
 19078                           
 19079                           ; BSR set to: 1
 19080  0029C2  0101               	movlb	1	; () banked
 19081  0029C4  512D               	movf	___ftadd@f1& (0+255),w,b
 19082  0029C6  0101               	movlb	1	; () banked
 19083  0029C8  2730               	addwf	___ftadd@f2& (0+255),f,b
 19084  0029CA  0101               	movlb	1	; () banked
 19085  0029CC  512E               	movf	(___ftadd@f1+1)& (0+255),w,b
 19086  0029CE  0101               	movlb	1	; () banked
 19087  0029D0  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 19088  0029D2  0101               	movlb	1	; () banked
 19089  0029D4  512F               	movf	(___ftadd@f1+2)& (0+255),w,b
 19090  0029D6  0101               	movlb	1	; () banked
 19091  0029D8  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 19092                           
 19093                           ; BSR set to: 1
 19094  0029DA  0101               	movlb	1	; () banked
 19095  0029DC  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
 19096  0029DE  D015               	goto	l9883
 19097                           
 19098                           ; BSR set to: 1
 19099  0029E0  0EFF               	movlw	255
 19100  0029E2  0101               	movlb	1	; () banked
 19101  0029E4  1B30               	xorwf	___ftadd@f2& (0+255),f,b
 19102  0029E6  0EFF               	movlw	255
 19103  0029E8  0101               	movlb	1	; () banked
 19104  0029EA  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 19105  0029EC  0EFF               	movlw	255
 19106  0029EE  0101               	movlb	1	; () banked
 19107  0029F0  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 19108  0029F2  0E01               	movlw	1
 19109  0029F4  0101               	movlb	1	; () banked
 19110  0029F6  2730               	addwf	___ftadd@f2& (0+255),f,b
 19111  0029F8  0E00               	movlw	0
 19112  0029FA  0101               	movlb	1	; () banked
 19113  0029FC  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 19114  0029FE  0E00               	movlw	0
 19115  002A00  0101               	movlb	1	; () banked
 19116  002A02  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 19117                           
 19118                           ; BSR set to: 1
 19119  002A04  0E01               	movlw	1
 19120  002A06  0101               	movlb	1	; () banked
 19121  002A08  6F36               	movwf	___ftadd@sign& (0+255),b
 19122  002A0A                     l9883:
 19123                           
 19124                           ; BSR set to: 1
 19125  002A0A  C130  F100         	movff	___ftadd@f2,___ftpack@arg
 19126  002A0E  C131  F101         	movff	___ftadd@f2+1,___ftpack@arg+1
 19127  002A12  C132  F102         	movff	___ftadd@f2+2,___ftpack@arg+2
 19128  002A16  C138  F103         	movff	___ftadd@exp1,___ftpack@exp
 19129  002A1A  C136  F104         	movff	___ftadd@sign,___ftpack@sign
 19130  002A1E  EC29  F025         	call	___ftpack	;wreg free
 19131  002A22  C100  F12D         	movff	?___ftpack,?___ftadd
 19132  002A26  C101  F12E         	movff	?___ftpack+1,?___ftadd+1
 19133  002A2A  C102  F12F         	movff	?___ftpack+2,?___ftadd+2
 19134  002A2E  0012               	return	
 19135  002A30                     __end_of___ftadd:
 19136                           	opt stack 0
 19137                           tblptru	equ	0xFF8
 19138                           tblptrh	equ	0xFF7
 19139                           tblptrl	equ	0xFF6
 19140                           tablat	equ	0xFF5
 19141                           prodh	equ	0xFF4
 19142                           prodl	equ	0xFF3
 19143                           intcon	equ	0xFF2
 19144                           postinc0	equ	0xFEE
 19145                           wreg	equ	0xFE8
 19146                           postdec1	equ	0xFE5
 19147                           fsr1l	equ	0xFE1
 19148                           indf2	equ	0xFDF
 19149                           postinc2	equ	0xFDE
 19150                           postdec2	equ	0xFDD
 19151                           plusw2	equ	0xFDB
 19152                           fsr2h	equ	0xFDA
 19153                           fsr2l	equ	0xFD9
 19154                           status	equ	0xFD8
 19155                           
 19156 ;; *************** function ___ftpack *****************
 19157 ;; Defined at:
 19158 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
 19159 ;; Parameters:    Size  Location     Type
 19160 ;;  arg             3    0[BANK1 ] unsigned um
 19161 ;;  exp             1    3[BANK1 ] unsigned char 
 19162 ;;  sign            1    4[BANK1 ] unsigned char 
 19163 ;; Auto vars:     Size  Location     Type
 19164 ;;		None
 19165 ;; Return value:  Size  Location     Type
 19166 ;;                  3    0[BANK1 ] float 
 19167 ;; Registers used:
 19168 ;;		wreg, status,2, status,0
 19169 ;; Tracked objects:
 19170 ;;		On entry : 0/0
 19171 ;;		On exit  : 0/0
 19172 ;;		Unchanged: 0/0
 19173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19174 ;;      Params:         0       0       5       0       0       0       0
 19175 ;;      Locals:         0       0       0       0       0       0       0
 19176 ;;      Temps:          0       0       3       0       0       0       0
 19177 ;;      Totals:         0       0       8       0       0       0       0
 19178 ;;Total ram usage:        8 bytes
 19179 ;; Hardware stack levels used:    1
 19180 ;; Hardware stack levels required when called:   12
 19181 ;; This function calls:
 19182 ;;		Nothing
 19183 ;; This function is called by:
 19184 ;;		___altoft
 19185 ;;		___ftadd
 19186 ;;		___ftdiv
 19187 ;;		___ftmul
 19188 ;;		___lltoft
 19189 ;; This function uses a non-reentrant model
 19190 ;;
 19191                           
 19192                           	psect	text79
 19193  004A52                     __ptext79:
 19194                           	opt stack 0
 19195  004A52                     ___ftpack:
 19196                           	opt stack 15
 19197                           
 19198                           ;incstack = 0
 19199  004A52  0101               	movlb	1	; () banked
 19200  004A54  5103               	movf	___ftpack@exp& (0+255),w,b
 19201  004A56  0101               	movlb	1	; () banked
 19202  004A58  B4D8               	btfsc	status,2,c
 19203  004A5A  D008               	goto	l9757
 19204                           
 19205                           ; BSR set to: 1
 19206  004A5C  0101               	movlb	1	; () banked
 19207  004A5E  5100               	movf	___ftpack@arg& (0+255),w,b
 19208  004A60  0101               	movlb	1	; () banked
 19209  004A62  1101               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 19210  004A64  0101               	movlb	1	; () banked
 19211  004A66  1102               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 19212  004A68  A4D8               	btfss	status,2,c
 19213  004A6A  D011               	goto	l9763
 19214  004A6C                     l9757:
 19215                           
 19216                           ; BSR set to: 1
 19217  004A6C  0E00               	movlw	0
 19218  004A6E  0101               	movlb	1	; () banked
 19219  004A70  6F00               	movwf	?___ftpack& (0+255),b
 19220  004A72  0E00               	movlw	0
 19221  004A74  0101               	movlb	1	; () banked
 19222  004A76  6F01               	movwf	(?___ftpack+1)& (0+255),b
 19223  004A78  0E00               	movlw	0
 19224  004A7A  0101               	movlb	1	; () banked
 19225  004A7C  6F02               	movwf	(?___ftpack+2)& (0+255),b
 19226                           
 19227                           ; BSR set to: 1
 19228  004A7E  0012               	return	
 19229  004A80                     l9761:
 19230                           
 19231                           ; BSR set to: 1
 19232  004A80  0101               	movlb	1	; () banked
 19233  004A82  2B03               	incf	___ftpack@exp& (0+255),f,b
 19234  004A84  0101               	movlb	1	; () banked
 19235  004A86  90D8               	bcf	status,0,c
 19236  004A88  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 19237  004A8A  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 19238  004A8C  3300               	rrcf	___ftpack@arg& (0+255),f,b
 19239  004A8E                     l9763:
 19240                           
 19241                           ; BSR set to: 1
 19242  004A8E  0E00               	movlw	0
 19243  004A90  0101               	movlb	1	; () banked
 19244  004A92  1500               	andwf	___ftpack@arg& (0+255),w,b
 19245  004A94  0101               	movlb	1	; () banked
 19246  004A96  6F05               	movwf	??___ftpack& (0+255),b
 19247  004A98  0E00               	movlw	0
 19248  004A9A  0101               	movlb	1	; () banked
 19249  004A9C  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
 19250  004A9E  0101               	movlb	1	; () banked
 19251  004AA0  6F06               	movwf	(??___ftpack+1)& (0+255),b
 19252  004AA2  0EFE               	movlw	254
 19253  004AA4  0101               	movlb	1	; () banked
 19254  004AA6  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
 19255  004AA8  0101               	movlb	1	; () banked
 19256  004AAA  6F07               	movwf	(??___ftpack+2)& (0+255),b
 19257  004AAC  0101               	movlb	1	; () banked
 19258  004AAE  5105               	movf	??___ftpack& (0+255),w,b
 19259  004AB0  0101               	movlb	1	; () banked
 19260  004AB2  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
 19261  004AB4  0101               	movlb	1	; () banked
 19262  004AB6  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
 19263  004AB8  B4D8               	btfsc	status,2,c
 19264  004ABA  D011               	goto	l9769
 19265  004ABC  D7E1               	goto	l9761
 19266  004ABE                     l9765:
 19267                           
 19268                           ; BSR set to: 1
 19269  004ABE  0101               	movlb	1	; () banked
 19270  004AC0  2B03               	incf	___ftpack@exp& (0+255),f,b
 19271                           
 19272                           ; BSR set to: 1
 19273  004AC2  0E01               	movlw	1
 19274  004AC4  0101               	movlb	1	; () banked
 19275  004AC6  2700               	addwf	___ftpack@arg& (0+255),f,b
 19276  004AC8  0E00               	movlw	0
 19277  004ACA  0101               	movlb	1	; () banked
 19278  004ACC  2301               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 19279  004ACE  0E00               	movlw	0
 19280  004AD0  0101               	movlb	1	; () banked
 19281  004AD2  2302               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 19282  004AD4  0101               	movlb	1	; () banked
 19283  004AD6  90D8               	bcf	status,0,c
 19284  004AD8  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 19285  004ADA  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 19286  004ADC  3300               	rrcf	___ftpack@arg& (0+255),f,b
 19287  004ADE                     l9769:
 19288                           
 19289                           ; BSR set to: 1
 19290  004ADE  0E00               	movlw	0
 19291  004AE0  0101               	movlb	1	; () banked
 19292  004AE2  1500               	andwf	___ftpack@arg& (0+255),w,b
 19293  004AE4  0101               	movlb	1	; () banked
 19294  004AE6  6F05               	movwf	??___ftpack& (0+255),b
 19295  004AE8  0E00               	movlw	0
 19296  004AEA  0101               	movlb	1	; () banked
 19297  004AEC  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
 19298  004AEE  0101               	movlb	1	; () banked
 19299  004AF0  6F06               	movwf	(??___ftpack+1)& (0+255),b
 19300  004AF2  0EFF               	movlw	255
 19301  004AF4  0101               	movlb	1	; () banked
 19302  004AF6  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
 19303  004AF8  0101               	movlb	1	; () banked
 19304  004AFA  6F07               	movwf	(??___ftpack+2)& (0+255),b
 19305  004AFC  0101               	movlb	1	; () banked
 19306  004AFE  5105               	movf	??___ftpack& (0+255),w,b
 19307  004B00  0101               	movlb	1	; () banked
 19308  004B02  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
 19309  004B04  0101               	movlb	1	; () banked
 19310  004B06  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
 19311  004B08  B4D8               	btfsc	status,2,c
 19312  004B0A  D008               	goto	l9773
 19313  004B0C  D7D8               	goto	l9765
 19314  004B0E                     l9771:
 19315                           
 19316                           ; BSR set to: 1
 19317  004B0E  0101               	movlb	1	; () banked
 19318  004B10  0703               	decf	___ftpack@exp& (0+255),f,b
 19319  004B12  0101               	movlb	1	; () banked
 19320  004B14  90D8               	bcf	status,0,c
 19321  004B16  3700               	rlcf	___ftpack@arg& (0+255),f,b
 19322  004B18  3701               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 19323  004B1A  3702               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 19324  004B1C                     l9773:
 19325                           
 19326                           ; BSR set to: 1
 19327  004B1C  0101               	movlb	1	; () banked
 19328  004B1E  BF01               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 19329  004B20  D004               	goto	l1322
 19330                           
 19331                           ; BSR set to: 1
 19332  004B22  0E02               	movlw	2
 19333  004B24  0101               	movlb	1	; () banked
 19334  004B26  6103               	cpfslt	___ftpack@exp& (0+255),b
 19335  004B28  D7F2               	goto	l9771
 19336  004B2A                     l1322:
 19337                           
 19338                           ; BSR set to: 1
 19339  004B2A  0101               	movlb	1	; () banked
 19340  004B2C  B103               	btfsc	___ftpack@exp& (0+255),0,b
 19341  004B2E  D002               	goto	l9779
 19342                           
 19343                           ; BSR set to: 1
 19344  004B30  0101               	movlb	1	; () banked
 19345  004B32  9F01               	bcf	(___ftpack@arg+1)& (0+255),7,b
 19346  004B34                     l9779:
 19347                           
 19348                           ; BSR set to: 1
 19349  004B34  0101               	movlb	1	; () banked
 19350  004B36  90D8               	bcf	status,0,c
 19351  004B38  3303               	rrcf	___ftpack@exp& (0+255),f,b
 19352  004B3A  0101               	movlb	1	; () banked
 19353  004B3C  5103               	movf	___ftpack@exp& (0+255),w,b
 19354  004B3E  0101               	movlb	1	; () banked
 19355  004B40  1302               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 19356                           
 19357                           ; BSR set to: 1
 19358  004B42  0101               	movlb	1	; () banked
 19359  004B44  5104               	movf	___ftpack@sign& (0+255),w,b
 19360  004B46  0101               	movlb	1	; () banked
 19361  004B48  B4D8               	btfsc	status,2,c
 19362  004B4A  D002               	goto	l9785
 19363                           
 19364                           ; BSR set to: 1
 19365  004B4C  0101               	movlb	1	; () banked
 19366  004B4E  8F02               	bsf	(___ftpack@arg+2)& (0+255),7,b
 19367  004B50                     l9785:
 19368                           
 19369                           ; BSR set to: 1
 19370  004B50  C100  F100         	movff	___ftpack@arg,?___ftpack
 19371  004B54  C101  F101         	movff	___ftpack@arg+1,?___ftpack+1
 19372  004B58  C102  F102         	movff	___ftpack@arg+2,?___ftpack+2
 19373  004B5C  0012               	return	
 19374  004B5E                     __end_of___ftpack:
 19375                           	opt stack 0
 19376                           tblptru	equ	0xFF8
 19377                           tblptrh	equ	0xFF7
 19378                           tblptrl	equ	0xFF6
 19379                           tablat	equ	0xFF5
 19380                           prodh	equ	0xFF4
 19381                           prodl	equ	0xFF3
 19382                           intcon	equ	0xFF2
 19383                           postinc0	equ	0xFEE
 19384                           wreg	equ	0xFE8
 19385                           postdec1	equ	0xFE5
 19386                           fsr1l	equ	0xFE1
 19387                           indf2	equ	0xFDF
 19388                           postinc2	equ	0xFDE
 19389                           postdec2	equ	0xFDD
 19390                           plusw2	equ	0xFDB
 19391                           fsr2h	equ	0xFDA
 19392                           fsr2l	equ	0xFD9
 19393                           status	equ	0xFD8
 19394                           
 19395 ;; *************** function _longPressDOWN *****************
 19396 ;; Defined at:
 19397 ;;		line 210 in file "source/DisplayProtocol.h"
 19398 ;; Parameters:    Size  Location     Type
 19399 ;;		None
 19400 ;; Auto vars:     Size  Location     Type
 19401 ;;		None
 19402 ;; Return value:  Size  Location     Type
 19403 ;;                  1    wreg      void 
 19404 ;; Registers used:
 19405 ;;		wreg, status,2, status,0
 19406 ;; Tracked objects:
 19407 ;;		On entry : 0/0
 19408 ;;		On exit  : 0/0
 19409 ;;		Unchanged: 0/0
 19410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19411 ;;      Params:         0       0       0       0       0       0       0
 19412 ;;      Locals:         0       0       0       0       0       0       0
 19413 ;;      Temps:          0       0       0       0       0       0       0
 19414 ;;      Totals:         0       0       0       0       0       0       0
 19415 ;;Total ram usage:        0 bytes
 19416 ;; Hardware stack levels used:    1
 19417 ;; Hardware stack levels required when called:   12
 19418 ;; This function calls:
 19419 ;;		Nothing
 19420 ;; This function is called by:
 19421 ;;		_buttonChecking
 19422 ;; This function uses a non-reentrant model
 19423 ;;
 19424                           
 19425                           	psect	text80
 19426  00710C                     __ptext80:
 19427                           	opt stack 0
 19428  00710C                     _longPressDOWN:
 19429                           	opt stack 17
 19430                           
 19431                           ;DisplayProtocol.h: 211: if (!DOWNisLP) {
 19432                           
 19433                           ; BSR set to: 1
 19434                           ;incstack = 0
 19435  00710C  504B               	movf	_DOWNisLP,w,c
 19436  00710E  A4D8               	btfss	status,2,c
 19437  007110  0012               	return	
 19438                           
 19439                           ;DisplayProtocol.h: 212: DOWNisLP = 1;
 19440  007112  0E01               	movlw	1
 19441  007114  6E4B               	movwf	_DOWNisLP,c
 19442                           
 19443                           ;DisplayProtocol.h: 213: if(actualScreen == 5) {
 19444  007116  0E05               	movlw	5
 19445  007118  0101               	movlb	1	; () banked
 19446  00711A  19BD               	xorwf	_actualScreen& (0+255),w,b
 19447  00711C  A4D8               	btfss	status,2,c
 19448  00711E  0012               	return	
 19449                           
 19450                           ; BSR set to: 1
 19451                           ;DisplayProtocol.h: 214: if(menuSection == 2)
 19452  007120  0E02               	movlw	2
 19453  007122  0101               	movlb	1	; () banked
 19454  007124  19BC               	xorwf	_menuSection& (0+255),w,b
 19455  007126  A4D8               	btfss	status,2,c
 19456  007128  0012               	return	
 19457                           
 19458                           ; BSR set to: 1
 19459                           ;DisplayProtocol.h: 215: chanVals -= 10;
 19460  00712A  0101               	movlb	1	; () banked
 19461  00712C  0EF6               	movlw	246
 19462  00712E  27B6               	addwf	_chanVals& (0+255),f,b
 19463  007130  0EFF               	movlw	255
 19464  007132  23B7               	addwfc	(_chanVals+1)& (0+255),f,b
 19465                           
 19466                           ; BSR set to: 1
 19467                           
 19468                           ; BSR set to: 1
 19469  007134  0012               	return	
 19470  007136                     __end_of_longPressDOWN:
 19471                           	opt stack 0
 19472                           tblptru	equ	0xFF8
 19473                           tblptrh	equ	0xFF7
 19474                           tblptrl	equ	0xFF6
 19475                           tablat	equ	0xFF5
 19476                           prodh	equ	0xFF4
 19477                           prodl	equ	0xFF3
 19478                           intcon	equ	0xFF2
 19479                           postinc0	equ	0xFEE
 19480                           wreg	equ	0xFE8
 19481                           postdec1	equ	0xFE5
 19482                           fsr1l	equ	0xFE1
 19483                           indf2	equ	0xFDF
 19484                           postinc2	equ	0xFDE
 19485                           postdec2	equ	0xFDD
 19486                           plusw2	equ	0xFDB
 19487                           fsr2h	equ	0xFDA
 19488                           fsr2l	equ	0xFD9
 19489                           status	equ	0xFD8
 19490                           
 19491 ;; *************** function _delay_ms *****************
 19492 ;; Defined at:
 19493 ;;		line 13 in file "source/../../delay.h"
 19494 ;; Parameters:    Size  Location     Type
 19495 ;;  del             2    0[BANK1 ] int 
 19496 ;; Auto vars:     Size  Location     Type
 19497 ;;  i               2    3[BANK1 ] int 
 19498 ;; Return value:  Size  Location     Type
 19499 ;;                  1    wreg      void 
 19500 ;; Registers used:
 19501 ;;		wreg, status,2, status,0
 19502 ;; Tracked objects:
 19503 ;;		On entry : 0/0
 19504 ;;		On exit  : 0/0
 19505 ;;		Unchanged: 0/0
 19506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19507 ;;      Params:         0       0       2       0       0       0       0
 19508 ;;      Locals:         0       0       2       0       0       0       0
 19509 ;;      Temps:          0       0       1       0       0       0       0
 19510 ;;      Totals:         0       0       5       0       0       0       0
 19511 ;;Total ram usage:        5 bytes
 19512 ;; Hardware stack levels used:    1
 19513 ;; Hardware stack levels required when called:   12
 19514 ;; This function calls:
 19515 ;;		Nothing
 19516 ;; This function is called by:
 19517 ;;		_buttonChecking
 19518 ;; This function uses a non-reentrant model
 19519 ;;
 19520                           
 19521                           	psect	text81
 19522  006D9C                     __ptext81:
 19523                           	opt stack 0
 19524  006D9C                     _delay_ms:
 19525                           	opt stack 17
 19526                           
 19527                           ;delay.h: 14: for(int i = 1;i <= del;i++)
 19528                           
 19529                           ;incstack = 0
 19530  006D9C  0E00               	movlw	0
 19531  006D9E  0101               	movlb	1	; () banked
 19532  006DA0  6F04               	movwf	(delay_ms@i+1)& (0+255),b
 19533  006DA2  0E01               	movlw	1
 19534  006DA4  6F03               	movwf	delay_ms@i& (0+255),b
 19535  006DA6  D00C               	goto	l100
 19536  006DA8                     l10929:
 19537                           
 19538                           ; BSR set to: 1
 19539                           ;delay.h: 15: _delay((unsigned long)((1)*(16000000/4000.0)));
 19540  006DA8  0E06               	movlw	6
 19541  006DAA  0101               	movlb	1	; () banked
 19542  006DAC  6F02               	movwf	??_delay_ms& (0+255),b
 19543  006DAE  0E30               	movlw	48
 19544  006DB0                     u17997:
 19545  006DB0  2EE8               	decfsz	wreg,f,c
 19546  006DB2  D7FE               	bra	u17997
 19547  006DB4  2F02               	decfsz	??_delay_ms& (0+255),f,b
 19548  006DB6  D7FC               	bra	u17997
 19549  006DB8  F000               	nop	
 19550  006DBA  0101               	movlb	1	; () banked
 19551  006DBC  4B03               	infsnz	delay_ms@i& (0+255),f,b
 19552  006DBE  2B04               	incf	(delay_ms@i+1)& (0+255),f,b
 19553  006DC0                     l100:
 19554                           
 19555                           ; BSR set to: 1
 19556  006DC0  0101               	movlb	1	; () banked
 19557  006DC2  5103               	movf	delay_ms@i& (0+255),w,b
 19558  006DC4  0101               	movlb	1	; () banked
 19559  006DC6  5D00               	subwf	delay_ms@del& (0+255),w,b
 19560  006DC8  0101               	movlb	1	; () banked
 19561  006DCA  5101               	movf	(delay_ms@del+1)& (0+255),w,b
 19562  006DCC  0A80               	xorlw	128
 19563  006DCE  0101               	movlb	1	; () banked
 19564  006DD0  6F02               	movwf	??_delay_ms& (0+255),b
 19565  006DD2  0101               	movlb	1	; () banked
 19566  006DD4  5104               	movf	(delay_ms@i+1)& (0+255),w,b
 19567  006DD6  0A80               	xorlw	128
 19568  006DD8  0101               	movlb	1	; () banked
 19569  006DDA  5902               	subwfb	??_delay_ms& (0+255),w,b
 19570  006DDC  A0D8               	btfss	status,0,c
 19571  006DDE  0012               	return	
 19572  006DE0  D7E3               	goto	l10929
 19573  006DE2                     __end_of_delay_ms:
 19574                           	opt stack 0
 19575                           tblptru	equ	0xFF8
 19576                           tblptrh	equ	0xFF7
 19577                           tblptrl	equ	0xFF6
 19578                           tablat	equ	0xFF5
 19579                           prodh	equ	0xFF4
 19580                           prodl	equ	0xFF3
 19581                           intcon	equ	0xFF2
 19582                           postinc0	equ	0xFEE
 19583                           wreg	equ	0xFE8
 19584                           postdec1	equ	0xFE5
 19585                           fsr1l	equ	0xFE1
 19586                           indf2	equ	0xFDF
 19587                           postinc2	equ	0xFDE
 19588                           postdec2	equ	0xFDD
 19589                           plusw2	equ	0xFDB
 19590                           fsr2h	equ	0xFDA
 19591                           fsr2l	equ	0xFD9
 19592                           status	equ	0xFD8
 19593                           
 19594 ;; *************** function _UARTConfig *****************
 19595 ;; Defined at:
 19596 ;;		line 81 in file "source/UARTConfig.h"
 19597 ;; Parameters:    Size  Location     Type
 19598 ;;		None
 19599 ;; Auto vars:     Size  Location     Type
 19600 ;;		None
 19601 ;; Return value:  Size  Location     Type
 19602 ;;                  1    wreg      void 
 19603 ;; Registers used:
 19604 ;;		wreg, status,2
 19605 ;; Tracked objects:
 19606 ;;		On entry : 0/0
 19607 ;;		On exit  : 0/0
 19608 ;;		Unchanged: 0/0
 19609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19610 ;;      Params:         0       0       0       0       0       0       0
 19611 ;;      Locals:         0       0       0       0       0       0       0
 19612 ;;      Temps:          0       0       0       0       0       0       0
 19613 ;;      Totals:         0       0       0       0       0       0       0
 19614 ;;Total ram usage:        0 bytes
 19615 ;; Hardware stack levels used:    1
 19616 ;; Hardware stack levels required when called:   12
 19617 ;; This function calls:
 19618 ;;		Nothing
 19619 ;; This function is called by:
 19620 ;;		_main
 19621 ;; This function uses a non-reentrant model
 19622 ;;
 19623                           
 19624                           	psect	text82
 19625  006E98                     __ptext82:
 19626                           	opt stack 0
 19627  006E98                     _UARTConfig:
 19628                           	opt stack 18
 19629                           
 19630                           ;UARTConfig.h: 82: RCSTA1bits.SPEN = 0;
 19631                           
 19632                           ; BSR set to: 1
 19633                           ;incstack = 0
 19634  006E98  9EAB               	bcf	4011,7,c	;volatile
 19635                           
 19636                           ;UARTConfig.h: 83: SPBRGH1 = 0;
 19637  006E9A  0E00               	movlw	0
 19638  006E9C  6EB0               	movwf	4016,c	;volatile
 19639                           
 19640                           ;UARTConfig.h: 84: SPBRG1 = 34;
 19641  006E9E  0E22               	movlw	34
 19642  006EA0  6EAF               	movwf	4015,c	;volatile
 19643                           
 19644                           ;UARTConfig.h: 85: ANSELCbits.ANSC6 = 0;
 19645  006EA2  010F               	movlb	15	; () banked
 19646  006EA4  9D3A               	bcf	58,6,b	;volatile
 19647                           
 19648                           ; BSR set to: 15
 19649                           ;UARTConfig.h: 86: ANSELCbits.ANSC7 = 0;
 19650  006EA6  010F               	movlb	15	; () banked
 19651  006EA8  9F3A               	bcf	58,7,b	;volatile
 19652                           
 19653                           ; BSR set to: 15
 19654                           ;UARTConfig.h: 87: TRISCbits.TRISC6 = 1;
 19655  006EAA  8C94               	bsf	3988,6,c	;volatile
 19656                           
 19657                           ; BSR set to: 15
 19658                           ;UARTConfig.h: 88: TRISCbits.TRISC7 = 1;
 19659  006EAC  8E94               	bsf	3988,7,c	;volatile
 19660                           
 19661                           ; BSR set to: 15
 19662                           ;UARTConfig.h: 89: TXSTA1bits.TX9 = 0;
 19663  006EAE  9CAC               	bcf	4012,6,c	;volatile
 19664                           
 19665                           ; BSR set to: 15
 19666                           ;UARTConfig.h: 90: TXSTA1bits.SYNC = 0;
 19667  006EB0  98AC               	bcf	4012,4,c	;volatile
 19668                           
 19669                           ; BSR set to: 15
 19670                           ;UARTConfig.h: 91: TXSTA1bits.SENDB = 0;
 19671  006EB2  96AC               	bcf	4012,3,c	;volatile
 19672                           
 19673                           ; BSR set to: 15
 19674                           ;UARTConfig.h: 92: TXSTA1bits.BRGH = 1;
 19675  006EB4  84AC               	bsf	4012,2,c	;volatile
 19676                           
 19677                           ; BSR set to: 15
 19678                           ;UARTConfig.h: 93: RCSTA1bits.RX9 = 0;
 19679  006EB6  9CAB               	bcf	4011,6,c	;volatile
 19680                           
 19681                           ; BSR set to: 15
 19682                           ;UARTConfig.h: 94: BAUDCON1bits.DTRXP = 0;
 19683  006EB8  9AB8               	bcf	4024,5,c	;volatile
 19684                           
 19685                           ; BSR set to: 15
 19686                           ;UARTConfig.h: 95: BAUDCON1bits.CKTXP = 0;
 19687  006EBA  98B8               	bcf	4024,4,c	;volatile
 19688                           
 19689                           ; BSR set to: 15
 19690                           ;UARTConfig.h: 96: BAUDCON1bits.BRG16 = 1;
 19691  006EBC  86B8               	bsf	4024,3,c	;volatile
 19692                           
 19693                           ; BSR set to: 15
 19694                           ;UARTConfig.h: 97: BAUDCON1bits.WUE = 0;
 19695  006EBE  92B8               	bcf	4024,1,c	;volatile
 19696                           
 19697                           ; BSR set to: 15
 19698                           ;UARTConfig.h: 98: BAUDCON1bits.ABDEN = 0;
 19699  006EC0  90B8               	bcf	4024,0,c	;volatile
 19700                           
 19701                           ; BSR set to: 15
 19702                           ;UARTConfig.h: 99: RCSTA1bits.CREN = 1;
 19703  006EC2  88AB               	bsf	4011,4,c	;volatile
 19704                           
 19705                           ; BSR set to: 15
 19706                           ;UARTConfig.h: 100: TXSTA1bits.TXEN = 1;
 19707  006EC4  8AAC               	bsf	4012,5,c	;volatile
 19708                           
 19709                           ; BSR set to: 15
 19710                           ;UARTConfig.h: 101: IPR1bits.RC1IP = 0;
 19711  006EC6  9A9F               	bcf	3999,5,c	;volatile
 19712                           
 19713                           ; BSR set to: 15
 19714                           ;UARTConfig.h: 102: PIR1bits.RC1IF = 0;
 19715  006EC8  9A9E               	bcf	3998,5,c	;volatile
 19716                           
 19717                           ; BSR set to: 15
 19718                           ;UARTConfig.h: 103: PIE1bits.RC1IE = 1;
 19719  006ECA  8A9D               	bsf	3997,5,c	;volatile
 19720                           
 19721                           ; BSR set to: 15
 19722                           ;UARTConfig.h: 104: RCSTA1bits.SPEN = 1;
 19723  006ECC  8EAB               	bsf	4011,7,c	;volatile
 19724                           
 19725                           ; BSR set to: 15
 19726  006ECE  0012               	return		;funcret
 19727  006ED0                     __end_of_UARTConfig:
 19728                           	opt stack 0
 19729                           tblptru	equ	0xFF8
 19730                           tblptrh	equ	0xFF7
 19731                           tblptrl	equ	0xFF6
 19732                           tablat	equ	0xFF5
 19733                           prodh	equ	0xFF4
 19734                           prodl	equ	0xFF3
 19735                           intcon	equ	0xFF2
 19736                           postinc0	equ	0xFEE
 19737                           wreg	equ	0xFE8
 19738                           postdec1	equ	0xFE5
 19739                           fsr1l	equ	0xFE1
 19740                           indf2	equ	0xFDF
 19741                           postinc2	equ	0xFDE
 19742                           postdec2	equ	0xFDD
 19743                           plusw2	equ	0xFDB
 19744                           fsr2h	equ	0xFDA
 19745                           fsr2l	equ	0xFD9
 19746                           status	equ	0xFD8
 19747                           
 19748 ;; *************** function _PWM2Config *****************
 19749 ;; Defined at:
 19750 ;;		line 146 in file "source/PWMConfig.h"
 19751 ;; Parameters:    Size  Location     Type
 19752 ;;		None
 19753 ;; Auto vars:     Size  Location     Type
 19754 ;;		None
 19755 ;; Return value:  Size  Location     Type
 19756 ;;                  1    wreg      void 
 19757 ;; Registers used:
 19758 ;;		wreg, status,2, status,0, cstack
 19759 ;; Tracked objects:
 19760 ;;		On entry : 0/0
 19761 ;;		On exit  : 0/0
 19762 ;;		Unchanged: 0/0
 19763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19764 ;;      Params:         0       0       0       0       0       0       0
 19765 ;;      Locals:         0       0       0       0       0       0       0
 19766 ;;      Temps:          0       0       0       0       0       0       0
 19767 ;;      Totals:         0       0       0       0       0       0       0
 19768 ;;Total ram usage:        0 bytes
 19769 ;; Hardware stack levels used:    1
 19770 ;; Hardware stack levels required when called:   13
 19771 ;; This function calls:
 19772 ;;		_setPWM2duty
 19773 ;;		_t2config
 19774 ;; This function is called by:
 19775 ;;		_main
 19776 ;; This function uses a non-reentrant model
 19777 ;;
 19778                           
 19779                           	psect	text83
 19780  006B14                     __ptext83:
 19781                           	opt stack 0
 19782  006B14                     _PWM2Config:
 19783                           	opt stack 17
 19784                           
 19785                           ;PWMConfig.h: 147: TRISCbits.TRISC0 = 1;
 19786                           
 19787                           ; BSR set to: 15
 19788                           ;incstack = 0
 19789  006B14  8094               	bsf	3988,0,c	;volatile
 19790                           
 19791                           ;PWMConfig.h: 148: TRISCbits.TRISC1 = 1;
 19792  006B16  8294               	bsf	3988,1,c	;volatile
 19793                           
 19794                           ;PWMConfig.h: 149: PSTR2CONbits.STR2A = 1;
 19795  006B18  8063               	bsf	3939,0,c	;volatile
 19796                           
 19797                           ;PWMConfig.h: 150: PSTR2CONbits.STR2B = 1;
 19798  006B1A  8263               	bsf	3939,1,c	;volatile
 19799                           
 19800                           ;PWMConfig.h: 151: PSTR2CONbits.STR2C = 0;
 19801  006B1C  9463               	bcf	3939,2,c	;volatile
 19802                           
 19803                           ;PWMConfig.h: 152: PSTR2CONbits.STR2D = 0;
 19804  006B1E  9663               	bcf	3939,3,c	;volatile
 19805                           
 19806                           ;PWMConfig.h: 153: CCPTMRS0bits.C2TSEL = 0b00;
 19807  006B20  0EE7               	movlw	-25
 19808  006B22  010F               	movlb	15	; () banked
 19809  006B24  1749               	andwf	73,f,b	;volatile
 19810                           
 19811                           ;PWMConfig.h: 154: PR2 = 199;
 19812  006B26  0EC7               	movlw	199
 19813  006B28  6EBB               	movwf	4027,c	;volatile
 19814                           
 19815                           ; BSR set to: 15
 19816                           ;PWMConfig.h: 155: ECCP2ASbits.CCP2AS = 0b000;
 19817  006B2A  9864               	bcf	3940,4,c	;volatile
 19818  006B2C  9A64               	bcf	3940,5,c	;volatile
 19819  006B2E  9C64               	bcf	3940,6,c	;volatile
 19820                           
 19821                           ;PWMConfig.h: 156: ECCP2ASbits.PSS2AC = 0b00;
 19822  006B30  0EF3               	movlw	-13
 19823  006B32  1664               	andwf	3940,f,c	;volatile
 19824                           
 19825                           ;PWMConfig.h: 157: ECCP2ASbits.PSS2BD = 0b00;
 19826  006B34  0EFC               	movlw	-4
 19827  006B36  1664               	andwf	3940,f,c	;volatile
 19828                           
 19829                           ; BSR set to: 15
 19830                           ;PWMConfig.h: 158: PWM2CONbits.P2RSEN = 0;
 19831  006B38  9E65               	bcf	3941,7,c	;volatile
 19832                           
 19833                           ;PWMConfig.h: 159: ECCP2ASbits.CCP2AS = 1;
 19834  006B3A  5064               	movf	3940,w,c	;volatile
 19835  006B3C  0B8F               	andlw	-113
 19836  006B3E  0910               	iorlw	16
 19837  006B40  6E64               	movwf	3940,c	;volatile
 19838                           
 19839                           ;PWMConfig.h: 160: CCP2CONbits.P2M = 0b10;
 19840  006B42  5066               	movf	3942,w,c	;volatile
 19841  006B44  0B3F               	andlw	-193
 19842  006B46  0980               	iorlw	128
 19843  006B48  6E66               	movwf	3942,c	;volatile
 19844                           
 19845                           ;PWMConfig.h: 161: CCP2CONbits.CCP2M = 0b1100;
 19846  006B4A  5066               	movf	3942,w,c	;volatile
 19847  006B4C  0BF0               	andlw	-16
 19848  006B4E  090C               	iorlw	12
 19849  006B50  6E66               	movwf	3942,c	;volatile
 19850                           
 19851                           ; BSR set to: 15
 19852                           ;PWMConfig.h: 162: setPWM2duty(0);
 19853  006B52  0E00               	movlw	0
 19854  006B54  0101               	movlb	1	; () banked
 19855  006B56  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 19856  006B58  0E00               	movlw	0
 19857  006B5A  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 19858  006B5C  EC40  F02F         	call	_setPWM2duty	;wreg free
 19859                           
 19860                           ;PWMConfig.h: 163: PWM2CONbits.P2DC = 16;
 19861  006B60  9065               	bcf	3941,0,c	;volatile
 19862  006B62  9265               	bcf	3941,1,c	;volatile
 19863  006B64  9465               	bcf	3941,2,c	;volatile
 19864  006B66  9665               	bcf	3941,3,c	;volatile
 19865  006B68  8865               	bsf	3941,4,c	;volatile
 19866  006B6A  9A65               	bcf	3941,5,c	;volatile
 19867  006B6C  9C65               	bcf	3941,6,c	;volatile
 19868                           
 19869                           ;PWMConfig.h: 164: t2config();
 19870  006B6E  ECF2  F038         	call	_t2config	;wreg free
 19871                           
 19872                           ;PWMConfig.h: 165: TRISCbits.TRISC0 = 0;
 19873  006B72  9094               	bcf	3988,0,c	;volatile
 19874                           
 19875                           ;PWMConfig.h: 166: TRISCbits.TRISC1 = 0;
 19876  006B74  9294               	bcf	3988,1,c	;volatile
 19877                           
 19878                           ;PWMConfig.h: 167: ECCP2ASbits.CCP2ASE = 0;
 19879  006B76  9E64               	bcf	3940,7,c	;volatile
 19880  006B78  0012               	return		;funcret
 19881  006B7A                     __end_of_PWM2Config:
 19882                           	opt stack 0
 19883                           tblptru	equ	0xFF8
 19884                           tblptrh	equ	0xFF7
 19885                           tblptrl	equ	0xFF6
 19886                           tablat	equ	0xFF5
 19887                           prodh	equ	0xFF4
 19888                           prodl	equ	0xFF3
 19889                           intcon	equ	0xFF2
 19890                           postinc0	equ	0xFEE
 19891                           wreg	equ	0xFE8
 19892                           postdec1	equ	0xFE5
 19893                           fsr1l	equ	0xFE1
 19894                           indf2	equ	0xFDF
 19895                           postinc2	equ	0xFDE
 19896                           postdec2	equ	0xFDD
 19897                           plusw2	equ	0xFDB
 19898                           fsr2h	equ	0xFDA
 19899                           fsr2l	equ	0xFD9
 19900                           status	equ	0xFD8
 19901                           
 19902 ;; *************** function _t2config *****************
 19903 ;; Defined at:
 19904 ;;		line 26 in file "source/PWMConfig.h"
 19905 ;; Parameters:    Size  Location     Type
 19906 ;;		None
 19907 ;; Auto vars:     Size  Location     Type
 19908 ;;		None
 19909 ;; Return value:  Size  Location     Type
 19910 ;;                  1    wreg      void 
 19911 ;; Registers used:
 19912 ;;		wreg, status,2
 19913 ;; Tracked objects:
 19914 ;;		On entry : 0/0
 19915 ;;		On exit  : 0/0
 19916 ;;		Unchanged: 0/0
 19917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19918 ;;      Params:         0       0       0       0       0       0       0
 19919 ;;      Locals:         0       0       0       0       0       0       0
 19920 ;;      Temps:          0       0       0       0       0       0       0
 19921 ;;      Totals:         0       0       0       0       0       0       0
 19922 ;;Total ram usage:        0 bytes
 19923 ;; Hardware stack levels used:    1
 19924 ;; Hardware stack levels required when called:   12
 19925 ;; This function calls:
 19926 ;;		Nothing
 19927 ;; This function is called by:
 19928 ;;		_PWM2Config
 19929 ;; This function uses a non-reentrant model
 19930 ;;
 19931                           
 19932                           	psect	text84
 19933  0071E4                     __ptext84:
 19934                           	opt stack 0
 19935  0071E4                     _t2config:
 19936                           	opt stack 17
 19937                           
 19938                           ;PWMConfig.h: 27: T2CONbits.TMR2ON = 0;
 19939                           
 19940                           ;incstack = 0
 19941  0071E4  94BA               	bcf	4026,2,c	;volatile
 19942                           
 19943                           ;PWMConfig.h: 28: T2CONbits.T2CKPS = 0b00;
 19944  0071E6  0EFC               	movlw	-4
 19945  0071E8  16BA               	andwf	4026,f,c	;volatile
 19946                           
 19947                           ;PWMConfig.h: 29: T2CONbits.T2OUTPS = 0b1111;
 19948  0071EA  86BA               	bsf	4026,3,c	;volatile
 19949  0071EC  88BA               	bsf	4026,4,c	;volatile
 19950  0071EE  8ABA               	bsf	4026,5,c	;volatile
 19951  0071F0  8CBA               	bsf	4026,6,c	;volatile
 19952                           
 19953                           ;PWMConfig.h: 30: PR2 = 199;
 19954  0071F2  0EC7               	movlw	199
 19955  0071F4  6EBB               	movwf	4027,c	;volatile
 19956                           
 19957                           ;PWMConfig.h: 31: PIR1bits.TMR2IF = 0;
 19958  0071F6  929E               	bcf	3998,1,c	;volatile
 19959                           
 19960                           ;PWMConfig.h: 32: IPR1bits.TMR2IP = 0;
 19961  0071F8  929F               	bcf	3999,1,c	;volatile
 19962                           
 19963                           ;PWMConfig.h: 33: PIE1bits.TMR2IE = 1;
 19964  0071FA  829D               	bsf	3997,1,c	;volatile
 19965                           
 19966                           ;PWMConfig.h: 34: T2CONbits.TMR2ON = 1;
 19967  0071FC  84BA               	bsf	4026,2,c	;volatile
 19968  0071FE  0012               	return		;funcret
 19969  007200                     __end_of_t2config:
 19970                           	opt stack 0
 19971                           tblptru	equ	0xFF8
 19972                           tblptrh	equ	0xFF7
 19973                           tblptrl	equ	0xFF6
 19974                           tablat	equ	0xFF5
 19975                           prodh	equ	0xFF4
 19976                           prodl	equ	0xFF3
 19977                           intcon	equ	0xFF2
 19978                           postinc0	equ	0xFEE
 19979                           wreg	equ	0xFE8
 19980                           postdec1	equ	0xFE5
 19981                           fsr1l	equ	0xFE1
 19982                           indf2	equ	0xFDF
 19983                           postinc2	equ	0xFDE
 19984                           postdec2	equ	0xFDD
 19985                           plusw2	equ	0xFDB
 19986                           fsr2h	equ	0xFDA
 19987                           fsr2l	equ	0xFD9
 19988                           status	equ	0xFD8
 19989                           
 19990 ;; *************** function _setPWM2duty *****************
 19991 ;; Defined at:
 19992 ;;		line 37 in file "source/PWMConfig.h"
 19993 ;; Parameters:    Size  Location     Type
 19994 ;;  actuator        2    0[BANK1 ] short 
 19995 ;; Auto vars:     Size  Location     Type
 19996 ;;  act             2    4[BANK1 ] short 
 19997 ;; Return value:  Size  Location     Type
 19998 ;;                  1    wreg      void 
 19999 ;; Registers used:
 20000 ;;		wreg, status,2, status,0
 20001 ;; Tracked objects:
 20002 ;;		On entry : 0/0
 20003 ;;		On exit  : 0/0
 20004 ;;		Unchanged: 0/0
 20005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20006 ;;      Params:         0       0       2       0       0       0       0
 20007 ;;      Locals:         0       0       2       0       0       0       0
 20008 ;;      Temps:          0       0       2       0       0       0       0
 20009 ;;      Totals:         0       0       6       0       0       0       0
 20010 ;;Total ram usage:        6 bytes
 20011 ;; Hardware stack levels used:    1
 20012 ;; Hardware stack levels required when called:   12
 20013 ;; This function calls:
 20014 ;;		Nothing
 20015 ;; This function is called by:
 20016 ;;		_subirCuchilla
 20017 ;;		_detenerCuchilla
 20018 ;;		_PWM2Config
 20019 ;;		_pressENTER
 20020 ;;		_main
 20021 ;; This function uses a non-reentrant model
 20022 ;;
 20023                           
 20024                           	psect	text85
 20025  005E80                     __ptext85:
 20026                           	opt stack 0
 20027  005E80                     _setPWM2duty:
 20028                           	opt stack 18
 20029                           
 20030                           ;PWMConfig.h: 38: short act = 400;
 20031                           
 20032                           ;incstack = 0
 20033  005E80  0E01               	movlw	1
 20034  005E82  0101               	movlb	1	; () banked
 20035  005E84  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 20036  005E86  0E90               	movlw	144
 20037  005E88  6F04               	movwf	setPWM2duty@act& (0+255),b
 20038                           
 20039                           ; BSR set to: 1
 20040                           ;PWMConfig.h: 39: if(actuator > 400)
 20041  005E8A  0101               	movlb	1	; () banked
 20042  005E8C  BF01               	btfsc	(setPWM2duty@actuator+1)& (0+255),7,b
 20043  005E8E  D00D               	goto	l10087
 20044  005E90  0E91               	movlw	145
 20045  005E92  0101               	movlb	1	; () banked
 20046  005E94  5D00               	subwf	setPWM2duty@actuator& (0+255),w,b
 20047  005E96  0E01               	movlw	1
 20048  005E98  0101               	movlb	1	; () banked
 20049  005E9A  5901               	subwfb	(setPWM2duty@actuator+1)& (0+255),w,b
 20050  005E9C  A0D8               	btfss	status,0,c
 20051  005E9E  D005               	goto	l10087
 20052                           
 20053                           ; BSR set to: 1
 20054                           ;PWMConfig.h: 40: act = 800;
 20055  005EA0  0E03               	movlw	3
 20056  005EA2  0101               	movlb	1	; () banked
 20057  005EA4  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 20058  005EA6  0E20               	movlw	32
 20059  005EA8  D00F               	goto	L7
 20060  005EAA                     l10087:
 20061                           
 20062                           ; BSR set to: 1
 20063                           ;PWMConfig.h: 41: else if(actuator < -400)
 20064  005EAA  0101               	movlb	1	; () banked
 20065  005EAC  AF01               	btfss	(setPWM2duty@actuator+1)& (0+255),7,b
 20066  005EAE  D00E               	goto	l10091
 20067  005EB0  0E70               	movlw	112
 20068  005EB2  0101               	movlb	1	; () banked
 20069  005EB4  5D00               	subwf	setPWM2duty@actuator& (0+255),w,b
 20070  005EB6  0EFE               	movlw	254
 20071  005EB8  0101               	movlb	1	; () banked
 20072  005EBA  5901               	subwfb	(setPWM2duty@actuator+1)& (0+255),w,b
 20073  005EBC  B0D8               	btfsc	status,0,c
 20074  005EBE  D006               	goto	l10091
 20075                           
 20076                           ; BSR set to: 1
 20077                           ;PWMConfig.h: 42: act = 0;
 20078  005EC0  0E00               	movlw	0
 20079  005EC2  0101               	movlb	1	; () banked
 20080  005EC4  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 20081  005EC6  0E00               	movlw	0
 20082  005EC8                     L7:
 20083  005EC8  6F04               	movwf	setPWM2duty@act& (0+255),b
 20084  005ECA  D00A               	goto	l495
 20085  005ECC                     l10091:
 20086                           
 20087                           ; BSR set to: 1
 20088                           ;PWMConfig.h: 43: else
 20089                           ;PWMConfig.h: 44: act = actuator + 400;
 20090  005ECC  0E90               	movlw	144
 20091  005ECE  0101               	movlb	1	; () banked
 20092  005ED0  2500               	addwf	setPWM2duty@actuator& (0+255),w,b
 20093  005ED2  0101               	movlb	1	; () banked
 20094  005ED4  6F04               	movwf	setPWM2duty@act& (0+255),b
 20095  005ED6  0E01               	movlw	1
 20096  005ED8  0101               	movlb	1	; () banked
 20097  005EDA  2101               	addwfc	(setPWM2duty@actuator+1)& (0+255),w,b
 20098  005EDC  0101               	movlb	1	; () banked
 20099  005EDE  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 20100  005EE0                     l495:
 20101                           
 20102                           ; BSR set to: 1
 20103                           ;PWMConfig.h: 45: CCP2CONbits.DC2B = act;
 20104  005EE0  C104  F102         	movff	setPWM2duty@act,??_setPWM2duty
 20105  005EE4  0101               	movlb	1	; () banked
 20106  005EE6  3B02               	swapf	??_setPWM2duty& (0+255),f,b
 20107  005EE8  5066               	movf	3942,w,c	;volatile
 20108  005EEA  0101               	movlb	1	; () banked
 20109  005EEC  1902               	xorwf	??_setPWM2duty& (0+255),w,b
 20110  005EEE  0BCF               	andlw	-49
 20111  005EF0  1902               	xorwf	??_setPWM2duty& (0+255),w,b
 20112  005EF2  6E66               	movwf	3942,c	;volatile
 20113                           
 20114                           ;PWMConfig.h: 46: CCPR2L = act>>2;
 20115  005EF4  C104  F102         	movff	setPWM2duty@act,??_setPWM2duty
 20116  005EF8  C105  F103         	movff	setPWM2duty@act+1,??_setPWM2duty+1
 20117  005EFC  0101               	movlb	1	; () banked
 20118  005EFE  3503               	rlcf	(??_setPWM2duty+1)& (0+255),w,b
 20119  005F00  3303               	rrcf	(??_setPWM2duty+1)& (0+255),f,b
 20120  005F02  3302               	rrcf	??_setPWM2duty& (0+255),f,b
 20121  005F04  0101               	movlb	1	; () banked
 20122  005F06  3503               	rlcf	(??_setPWM2duty+1)& (0+255),w,b
 20123  005F08  3303               	rrcf	(??_setPWM2duty+1)& (0+255),f,b
 20124  005F0A  3302               	rrcf	??_setPWM2duty& (0+255),f,b
 20125  005F0C  0101               	movlb	1	; () banked
 20126  005F0E  5102               	movf	??_setPWM2duty& (0+255),w,b
 20127  005F10  6E67               	movwf	3943,c	;volatile
 20128                           
 20129                           ; BSR set to: 1
 20130  005F12  0012               	return		;funcret
 20131  005F14                     __end_of_setPWM2duty:
 20132                           	opt stack 0
 20133                           tblptru	equ	0xFF8
 20134                           tblptrh	equ	0xFF7
 20135                           tblptrl	equ	0xFF6
 20136                           tablat	equ	0xFF5
 20137                           prodh	equ	0xFF4
 20138                           prodl	equ	0xFF3
 20139                           intcon	equ	0xFF2
 20140                           postinc0	equ	0xFEE
 20141                           wreg	equ	0xFE8
 20142                           postdec1	equ	0xFE5
 20143                           fsr1l	equ	0xFE1
 20144                           indf2	equ	0xFDF
 20145                           postinc2	equ	0xFDE
 20146                           postdec2	equ	0xFDD
 20147                           plusw2	equ	0xFDB
 20148                           fsr2h	equ	0xFDA
 20149                           fsr2l	equ	0xFD9
 20150                           status	equ	0xFD8
 20151                           
 20152 ;; *************** function _EEPROMConfig *****************
 20153 ;; Defined at:
 20154 ;;		line 74 in file "source/sysParams.h"
 20155 ;; Parameters:    Size  Location     Type
 20156 ;;		None
 20157 ;; Auto vars:     Size  Location     Type
 20158 ;;		None
 20159 ;; Return value:  Size  Location     Type
 20160 ;;                  1    wreg      void 
 20161 ;; Registers used:
 20162 ;;		None
 20163 ;; Tracked objects:
 20164 ;;		On entry : 0/0
 20165 ;;		On exit  : 0/0
 20166 ;;		Unchanged: 0/0
 20167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20168 ;;      Params:         0       0       0       0       0       0       0
 20169 ;;      Locals:         0       0       0       0       0       0       0
 20170 ;;      Temps:          0       0       0       0       0       0       0
 20171 ;;      Totals:         0       0       0       0       0       0       0
 20172 ;;Total ram usage:        0 bytes
 20173 ;; Hardware stack levels used:    1
 20174 ;; Hardware stack levels required when called:   12
 20175 ;; This function calls:
 20176 ;;		Nothing
 20177 ;; This function is called by:
 20178 ;;		_main
 20179 ;; This function uses a non-reentrant model
 20180 ;;
 20181                           
 20182                           	psect	text86
 20183  007378                     __ptext86:
 20184                           	opt stack 0
 20185  007378                     _EEPROMConfig:
 20186                           	opt stack 18
 20187                           
 20188                           ;sysParams.h: 75: EECON1bits.WREN = 0;
 20189                           
 20190                           ; BSR set to: 1
 20191                           ;incstack = 0
 20192  007378  94A6               	bcf	4006,2,c	;volatile
 20193                           
 20194                           ;sysParams.h: 76: EECON1bits.FREE = 0;
 20195  00737A  98A6               	bcf	4006,4,c	;volatile
 20196  00737C  0012               	return		;funcret
 20197  00737E                     __end_of_EEPROMConfig:
 20198                           	opt stack 0
 20199                           tblptru	equ	0xFF8
 20200                           tblptrh	equ	0xFF7
 20201                           tblptrl	equ	0xFF6
 20202                           tablat	equ	0xFF5
 20203                           prodh	equ	0xFF4
 20204                           prodl	equ	0xFF3
 20205                           intcon	equ	0xFF2
 20206                           postinc0	equ	0xFEE
 20207                           wreg	equ	0xFE8
 20208                           postdec1	equ	0xFE5
 20209                           fsr1l	equ	0xFE1
 20210                           indf2	equ	0xFDF
 20211                           postinc2	equ	0xFDE
 20212                           postdec2	equ	0xFDD
 20213                           plusw2	equ	0xFDB
 20214                           fsr2h	equ	0xFDA
 20215                           fsr2l	equ	0xFD9
 20216                           status	equ	0xFD8
 20217                           
 20218 ;; *************** function _isr *****************
 20219 ;; Defined at:
 20220 ;;		line 20 in file "source/main.c"
 20221 ;; Parameters:    Size  Location     Type
 20222 ;;		None
 20223 ;; Auto vars:     Size  Location     Type
 20224 ;;		None
 20225 ;; Return value:  Size  Location     Type
 20226 ;;                  1    wreg      void 
 20227 ;; Registers used:
 20228 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20229 ;; Tracked objects:
 20230 ;;		On entry : 0/0
 20231 ;;		On exit  : 0/0
 20232 ;;		Unchanged: 0/0
 20233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20234 ;;      Params:         0       0       0       0       0       0       0
 20235 ;;      Locals:         0       0       0       0       0       0       0
 20236 ;;      Temps:          0      17       0       0       0       0       0
 20237 ;;      Totals:         0      17       0       0       0       0       0
 20238 ;;Total ram usage:       17 bytes
 20239 ;; Hardware stack levels used:    1
 20240 ;; Hardware stack levels required when called:   11
 20241 ;; This function calls:
 20242 ;;		_T2int
 20243 ;;		_UARTint
 20244 ;; This function is called by:
 20245 ;;		Interrupt level 1
 20246 ;; This function uses a non-reentrant model
 20247 ;;
 20248                           
 20249                           	psect	intcodelo
 20250  000018                     __pintcodelo:
 20251                           	opt stack 0
 20252  000018                     _isr:
 20253                           	opt stack 9
 20254                           
 20255                           ;incstack = 0
 20256  000018  805E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 20257  00001A  CFD8 F094          	movff	status,??_isr
 20258  00001E  CFE8 F095          	movff	wreg,??_isr+1
 20259  000022  CFE0 F096          	movff	bsr,??_isr+2
 20260  000026  CFFA F097          	movff	pclath,??_isr+3
 20261  00002A  CFFB F098          	movff	pclatu,??_isr+4
 20262  00002E  CFE9 F099          	movff	fsr0l,??_isr+5
 20263  000032  CFEA F09A          	movff	fsr0h,??_isr+6
 20264  000036  CFE1 F09B          	movff	fsr1l,??_isr+7
 20265  00003A  CFE2 F09C          	movff	fsr1h,??_isr+8
 20266  00003E  CFD9 F09D          	movff	fsr2l,??_isr+9
 20267  000042  CFDA F09E          	movff	fsr2h,??_isr+10
 20268  000046  CFF3 F09F          	movff	prodl,??_isr+11
 20269  00004A  CFF4 F0A0          	movff	prodh,??_isr+12
 20270  00004E  CFF6 F0A1          	movff	tblptrl,??_isr+13
 20271  000052  CFF7 F0A2          	movff	tblptrh,??_isr+14
 20272  000056  CFF8 F0A3          	movff	tblptru,??_isr+15
 20273  00005A  CFF5 F0A4          	movff	tablat,??_isr+16
 20274                           
 20275                           ;main.c: 21: if(PIE1bits.RC1IE && PIR1bits.RC1IF) {
 20276  00005E  BA9D               	btfsc	3997,5,c	;volatile
 20277  000060  AA9E               	btfss	3998,5,c	;volatile
 20278  000062  D003               	goto	i1l9625
 20279                           
 20280                           ;main.c: 22: UARTint();
 20281  000064  EC09  F023         	call	_UARTint	;wreg free
 20282                           
 20283                           ;main.c: 23: PIR1bits.RC1IF = 0;
 20284  000068  9A9E               	bcf	3998,5,c	;volatile
 20285  00006A                     i1l9625:
 20286                           
 20287                           ;main.c: 24: }
 20288                           ;main.c: 25: if(PIE1bits.TMR2IE && PIR1bits.TMR2IF) {
 20289  00006A  B29D               	btfsc	3997,1,c	;volatile
 20290  00006C  A29E               	btfss	3998,1,c	;volatile
 20291  00006E  D003               	goto	i1l939
 20292                           
 20293                           ;main.c: 26: T2int();
 20294  000070  EC4C  F016         	call	_T2int	;wreg free
 20295                           
 20296                           ;main.c: 27: PIR1bits.TMR2IF = 0;
 20297  000074  929E               	bcf	3998,1,c	;volatile
 20298  000076                     i1l939:
 20299  000076  C0A4  FFF5         	movff	??_isr+16,tablat
 20300  00007A  C0A3  FFF8         	movff	??_isr+15,tblptru
 20301  00007E  C0A2  FFF7         	movff	??_isr+14,tblptrh
 20302  000082  C0A1  FFF6         	movff	??_isr+13,tblptrl
 20303  000086  C0A0  FFF4         	movff	??_isr+12,prodh
 20304  00008A  C09F  FFF3         	movff	??_isr+11,prodl
 20305  00008E  C09E  FFDA         	movff	??_isr+10,fsr2h
 20306  000092  C09D  FFD9         	movff	??_isr+9,fsr2l
 20307  000096  C09C  FFE2         	movff	??_isr+8,fsr1h
 20308  00009A  C09B  FFE1         	movff	??_isr+7,fsr1l
 20309  00009E  C09A  FFEA         	movff	??_isr+6,fsr0h
 20310  0000A2  C099  FFE9         	movff	??_isr+5,fsr0l
 20311  0000A6  C098  FFFB         	movff	??_isr+4,pclatu
 20312  0000AA  C097  FFFA         	movff	??_isr+3,pclath
 20313  0000AE  C096  FFE0         	movff	??_isr+2,bsr
 20314  0000B2  C095  FFE8         	movff	??_isr+1,wreg
 20315  0000B6  C094  FFD8         	movff	??_isr,status
 20316  0000BA  905E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 20317  0000BC  0010               	retfie	
 20318  0000BE                     __end_of_isr:
 20319                           	opt stack 0
 20320                           pclatu	equ	0xFFB
 20321                           pclath	equ	0xFFA
 20322                           tblptru	equ	0xFF8
 20323                           tblptrh	equ	0xFF7
 20324                           tblptrl	equ	0xFF6
 20325                           tablat	equ	0xFF5
 20326                           prodh	equ	0xFF4
 20327                           prodl	equ	0xFF3
 20328                           intcon	equ	0xFF2
 20329                           postinc0	equ	0xFEE
 20330                           fsr0h	equ	0xFEA
 20331                           fsr0l	equ	0xFE9
 20332                           wreg	equ	0xFE8
 20333                           postdec1	equ	0xFE5
 20334                           fsr1h	equ	0xFE2
 20335                           fsr1l	equ	0xFE1
 20336                           bsr	equ	0xFE0
 20337                           indf2	equ	0xFDF
 20338                           postinc2	equ	0xFDE
 20339                           postdec2	equ	0xFDD
 20340                           plusw2	equ	0xFDB
 20341                           fsr2h	equ	0xFDA
 20342                           fsr2l	equ	0xFD9
 20343                           status	equ	0xFD8
 20344                           
 20345 ;; *************** function _UARTint *****************
 20346 ;; Defined at:
 20347 ;;		line 11 in file "source/UARTConfig.h"
 20348 ;; Parameters:    Size  Location     Type
 20349 ;;		None
 20350 ;; Auto vars:     Size  Location     Type
 20351 ;;  sas             1   51[BANK0 ] unsigned char 
 20352 ;; Return value:  Size  Location     Type
 20353 ;;                  1    wreg      void 
 20354 ;; Registers used:
 20355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20356 ;; Tracked objects:
 20357 ;;		On entry : 0/0
 20358 ;;		On exit  : 0/0
 20359 ;;		Unchanged: 0/0
 20360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20361 ;;      Params:         0       0       0       0       0       0       0
 20362 ;;      Locals:         0       1       0       0       0       0       0
 20363 ;;      Temps:          0       0       0       0       0       0       0
 20364 ;;      Totals:         0       1       0       0       0       0       0
 20365 ;;Total ram usage:        1 bytes
 20366 ;; Hardware stack levels used:    1
 20367 ;; Hardware stack levels required when called:   10
 20368 ;; This function calls:
 20369 ;;		_loadSysParams
 20370 ;;		i1_longPressDOWN
 20371 ;;		i1_longPressENTER
 20372 ;;		i1_longPressRETRO
 20373 ;;		i1_longPressUP
 20374 ;;		i1_pressDOWN
 20375 ;;		i1_pressENTER
 20376 ;;		i1_pressRETRO
 20377 ;;		i1_pressUP
 20378 ;;		i1_putchUART
 20379 ;;		i1_saveSysParams
 20380 ;;		i1_sysParamInit
 20381 ;; This function is called by:
 20382 ;;		_isr
 20383 ;; This function uses a non-reentrant model
 20384 ;;
 20385                           
 20386                           	psect	text88
 20387  004612                     __ptext88:
 20388                           	opt stack 0
 20389  004612                     _UARTint:
 20390                           	opt stack 9
 20391                           
 20392                           ;UARTConfig.h: 12: char sas = RCREG1;
 20393                           
 20394                           ;incstack = 0
 20395  004612  CFAE F093          	movff	4014,UARTint@sas	;volatile
 20396                           
 20397                           ;UARTConfig.h: 13: if(sas == 'A') {
 20398  004616  0E41               	movlw	65
 20399  004618  0100               	movlb	0	; () banked
 20400  00461A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20401  00461C  A4D8               	btfss	status,2,c
 20402  00461E  D00D               	goto	i1l9209
 20403                           
 20404                           ; BSR set to: 0
 20405                           ;UARTConfig.h: 14: putchUART(actualScreen);
 20406  004620  0101               	movlb	1	; () banked
 20407  004622  51BD               	movf	_actualScreen& (0+255),w,b
 20408  004624  EC93  F039         	call	i1_putchUART
 20409                           
 20410                           ;UARTConfig.h: 15: putchUART(menuSection);
 20411  004628  0101               	movlb	1	; () banked
 20412  00462A  51BC               	movf	_menuSection& (0+255),w,b
 20413  00462C  EC93  F039         	call	i1_putchUART
 20414                           
 20415                           ;UARTConfig.h: 16: putchUART(passSection);
 20416  004630  0101               	movlb	1	; () banked
 20417  004632  51BB               	movf	_passSection& (0+255),w,b
 20418  004634  EC93  F039         	call	i1_putchUART
 20419                           
 20420                           ;UARTConfig.h: 17: }else if(sas == 'B') {
 20421  004638  0012               	return	
 20422  00463A                     i1l9209:
 20423  00463A  0E42               	movlw	66
 20424  00463C  0100               	movlb	0	; () banked
 20425  00463E  1993               	xorwf	UARTint@sas& (0+255),w,b
 20426  004640  A4D8               	btfss	status,2,c
 20427  004642  D003               	goto	i1l9213
 20428                           
 20429                           ; BSR set to: 0
 20430                           ;UARTConfig.h: 18: saveSysParams();
 20431  004644  EC66  F030         	call	i1_saveSysParams	;wreg free
 20432                           
 20433                           ;UARTConfig.h: 19: }else if(sas == 'C') {
 20434  004648  0012               	return	
 20435  00464A                     i1l9213:
 20436  00464A  0E43               	movlw	67
 20437  00464C  0100               	movlb	0	; () banked
 20438  00464E  1993               	xorwf	UARTint@sas& (0+255),w,b
 20439  004650  A4D8               	btfss	status,2,c
 20440  004652  D003               	goto	i1l9217
 20441                           
 20442                           ; BSR set to: 0
 20443                           ;UARTConfig.h: 20: sysParamInit();
 20444  004654  ECFE  F033         	call	i1_sysParamInit	;wreg free
 20445                           
 20446                           ;UARTConfig.h: 21: }else if(sas == 'D') {
 20447  004658  0012               	return	
 20448  00465A                     i1l9217:
 20449  00465A  0E44               	movlw	68
 20450  00465C  0100               	movlb	0	; () banked
 20451  00465E  1993               	xorwf	UARTint@sas& (0+255),w,b
 20452  004660  A4D8               	btfss	status,2,c
 20453  004662  D003               	goto	i1l9221
 20454                           
 20455                           ; BSR set to: 0
 20456                           ;UARTConfig.h: 22: loadSysParams();
 20457  004664  EC87  F036         	call	_loadSysParams	;wreg free
 20458                           
 20459                           ;UARTConfig.h: 23: }else if(sas == 'E') {
 20460  004668  0012               	return	
 20461  00466A                     i1l9221:
 20462  00466A  0E45               	movlw	69
 20463  00466C  0100               	movlb	0	; () banked
 20464  00466E  1993               	xorwf	UARTint@sas& (0+255),w,b
 20465  004670  B4D8               	btfsc	status,2,c
 20466  004672  0012               	return	
 20467                           
 20468                           ; BSR set to: 0
 20469                           ;UARTConfig.h: 57: else if(sas == 'R') {
 20470                           
 20471                           ; BSR set to: 0
 20472                           
 20473                           ; BSR set to: 0
 20474                           ;UARTConfig.h: 25: }
 20475  004674  0E52               	movlw	82
 20476  004676  0100               	movlb	0	; () banked
 20477  004678  1993               	xorwf	UARTint@sas& (0+255),w,b
 20478  00467A  A4D8               	btfss	status,2,c
 20479  00467C  D014               	goto	i1l9235
 20480                           
 20481                           ; BSR set to: 0
 20482                           ;UARTConfig.h: 58: if(actualScreen == 0) {
 20483  00467E  0101               	movlb	1	; () banked
 20484  004680  51BD               	movf	_actualScreen& (0+255),w,b
 20485  004682  A4D8               	btfss	status,2,c
 20486  004684  D007               	goto	i1l9231
 20487                           
 20488                           ; BSR set to: 1
 20489                           ;UARTConfig.h: 59: actualScreen = 1;
 20490  004686  0E01               	movlw	1
 20491  004688  0101               	movlb	1	; () banked
 20492  00468A  6FBD               	movwf	_actualScreen& (0+255),b
 20493                           
 20494                           ;UARTConfig.h: 60: fd = 0;
 20495  00468C  0E00               	movlw	0
 20496  00468E  0101               	movlb	1	; () banked
 20497  004690  6FB9               	movwf	_fd& (0+255),b
 20498                           
 20499                           ;UARTConfig.h: 61: }else if(actualScreen == 4)
 20500  004692  0012               	return	
 20501  004694                     i1l9231:
 20502                           
 20503                           ; BSR set to: 1
 20504  004694  0E04               	movlw	4
 20505  004696  0101               	movlb	1	; () banked
 20506  004698  19BD               	xorwf	_actualScreen& (0+255),w,b
 20507  00469A  A4D8               	btfss	status,2,c
 20508  00469C  0012               	return	
 20509                           
 20510                           ; BSR set to: 1
 20511                           ;UARTConfig.h: 62: actualScreen = 9;
 20512  00469E  0E09               	movlw	9
 20513  0046A0  0101               	movlb	1	; () banked
 20514  0046A2  6FBD               	movwf	_actualScreen& (0+255),b
 20515                           
 20516                           ; BSR set to: 1
 20517                           ;UARTConfig.h: 63: }else if(sas == 'S')
 20518                           
 20519                           ; BSR set to: 1
 20520  0046A4  0012               	return	
 20521  0046A6                     i1l9235:
 20522  0046A6  0E53               	movlw	83
 20523  0046A8  0100               	movlb	0	; () banked
 20524  0046AA  1993               	xorwf	UARTint@sas& (0+255),w,b
 20525  0046AC  A4D8               	btfss	status,2,c
 20526  0046AE  D003               	goto	i1l9239
 20527                           
 20528                           ; BSR set to: 0
 20529                           ;UARTConfig.h: 64: pressUP();
 20530  0046B0  EC1B  F024         	call	i1_pressUP	;wreg free
 20531  0046B4  0012               	return	
 20532  0046B6                     i1l9239:
 20533                           
 20534                           ;UARTConfig.h: 65: else if(sas == 'T')
 20535  0046B6  0E54               	movlw	84
 20536  0046B8  0100               	movlb	0	; () banked
 20537  0046BA  1993               	xorwf	UARTint@sas& (0+255),w,b
 20538  0046BC  A4D8               	btfss	status,2,c
 20539  0046BE  D003               	goto	i1l9243
 20540                           
 20541                           ; BSR set to: 0
 20542                           ;UARTConfig.h: 66: pressDOWN();
 20543  0046C0  ECB9  F026         	call	i1_pressDOWN	;wreg free
 20544  0046C4  0012               	return	
 20545  0046C6                     i1l9243:
 20546                           
 20547                           ;UARTConfig.h: 67: else if(sas == 'U')
 20548  0046C6  0E55               	movlw	85
 20549  0046C8  0100               	movlb	0	; () banked
 20550  0046CA  1993               	xorwf	UARTint@sas& (0+255),w,b
 20551  0046CC  A4D8               	btfss	status,2,c
 20552  0046CE  D003               	goto	i1l9247
 20553                           
 20554                           ; BSR set to: 0
 20555                           ;UARTConfig.h: 68: pressRETRO();
 20556  0046D0  EC83  F02B         	call	i1_pressRETRO	;wreg free
 20557  0046D4  0012               	return	
 20558  0046D6                     i1l9247:
 20559                           
 20560                           ;UARTConfig.h: 69: else if(sas == 'V')
 20561  0046D6  0E56               	movlw	86
 20562  0046D8  0100               	movlb	0	; () banked
 20563  0046DA  1993               	xorwf	UARTint@sas& (0+255),w,b
 20564  0046DC  A4D8               	btfss	status,2,c
 20565  0046DE  D003               	goto	i1l9251
 20566                           
 20567                           ; BSR set to: 0
 20568                           ;UARTConfig.h: 70: pressENTER();
 20569  0046E0  ECB4  F00A         	call	i1_pressENTER	;wreg free
 20570  0046E4  0012               	return	
 20571  0046E6                     i1l9251:
 20572                           
 20573                           ;UARTConfig.h: 71: else if(sas == 'W')
 20574  0046E6  0E57               	movlw	87
 20575  0046E8  0100               	movlb	0	; () banked
 20576  0046EA  1993               	xorwf	UARTint@sas& (0+255),w,b
 20577  0046EC  A4D8               	btfss	status,2,c
 20578  0046EE  D003               	goto	i1l9255
 20579                           
 20580                           ; BSR set to: 0
 20581                           ;UARTConfig.h: 72: longPressUP();
 20582  0046F0  ECAE  F034         	call	i1_longPressUP	;wreg free
 20583  0046F4  0012               	return	
 20584  0046F6                     i1l9255:
 20585                           
 20586                           ;UARTConfig.h: 73: else if(sas == 'X')
 20587  0046F6  0E58               	movlw	88
 20588  0046F8  0100               	movlb	0	; () banked
 20589  0046FA  1993               	xorwf	UARTint@sas& (0+255),w,b
 20590  0046FC  A4D8               	btfss	status,2,c
 20591  0046FE  D003               	goto	i1l9259
 20592                           
 20593                           ; BSR set to: 0
 20594                           ;UARTConfig.h: 74: longPressDOWN();
 20595  004700  EC9B  F038         	call	i1_longPressDOWN	;wreg free
 20596  004704  0012               	return	
 20597  004706                     i1l9259:
 20598                           
 20599                           ;UARTConfig.h: 75: else if(sas == 'Y')
 20600  004706  0E59               	movlw	89
 20601  004708  0100               	movlb	0	; () banked
 20602  00470A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20603  00470C  A4D8               	btfss	status,2,c
 20604  00470E  D003               	goto	i1l9263
 20605                           
 20606                           ; BSR set to: 0
 20607                           ;UARTConfig.h: 76: longPressRETRO();
 20608  004710  ECBE  F027         	call	i1_longPressRETRO	;wreg free
 20609  004714  0012               	return	
 20610  004716                     i1l9263:
 20611                           
 20612                           ;UARTConfig.h: 77: else if(sas == 'Z')
 20613  004716  0E5A               	movlw	90
 20614  004718  0100               	movlb	0	; () banked
 20615  00471A  1993               	xorwf	UARTint@sas& (0+255),w,b
 20616  00471C  A4D8               	btfss	status,2,c
 20617  00471E  0012               	return	
 20618                           
 20619                           ; BSR set to: 0
 20620                           ;UARTConfig.h: 78: longPressENTER();
 20621  004720  EC30  F00E         	call	i1_longPressENTER	;wreg free
 20622  004724  0012               	return	
 20623  004726                     __end_of_UARTint:
 20624                           	opt stack 0
 20625                           pclatu	equ	0xFFB
 20626                           pclath	equ	0xFFA
 20627                           tblptru	equ	0xFF8
 20628                           tblptrh	equ	0xFF7
 20629                           tblptrl	equ	0xFF6
 20630                           tablat	equ	0xFF5
 20631                           prodh	equ	0xFF4
 20632                           prodl	equ	0xFF3
 20633                           intcon	equ	0xFF2
 20634                           postinc0	equ	0xFEE
 20635                           fsr0h	equ	0xFEA
 20636                           fsr0l	equ	0xFE9
 20637                           wreg	equ	0xFE8
 20638                           postdec1	equ	0xFE5
 20639                           fsr1h	equ	0xFE2
 20640                           fsr1l	equ	0xFE1
 20641                           bsr	equ	0xFE0
 20642                           indf2	equ	0xFDF
 20643                           postinc2	equ	0xFDE
 20644                           postdec2	equ	0xFDD
 20645                           plusw2	equ	0xFDB
 20646                           fsr2h	equ	0xFDA
 20647                           fsr2l	equ	0xFD9
 20648                           status	equ	0xFD8
 20649                           
 20650 ;; *************** function i1_sysParamInit *****************
 20651 ;; Defined at:
 20652 ;;		line 169 in file "source/sysParams.h"
 20653 ;; Parameters:    Size  Location     Type
 20654 ;;		None
 20655 ;; Auto vars:     Size  Location     Type
 20656 ;;		None
 20657 ;; Return value:  Size  Location     Type
 20658 ;;                  1    wreg      void 
 20659 ;; Registers used:
 20660 ;;		wreg, status,2, status,0, cstack
 20661 ;; Tracked objects:
 20662 ;;		On entry : 0/0
 20663 ;;		On exit  : 0/0
 20664 ;;		Unchanged: 0/0
 20665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20666 ;;      Params:         0       0       0       0       0       0       0
 20667 ;;      Locals:         0       0       0       0       0       0       0
 20668 ;;      Temps:          0       0       0       0       0       0       0
 20669 ;;      Totals:         0       0       0       0       0       0       0
 20670 ;;Total ram usage:        0 bytes
 20671 ;; Hardware stack levels used:    1
 20672 ;; Hardware stack levels required when called:    7
 20673 ;; This function calls:
 20674 ;;		i1_calcSysVars
 20675 ;;		i1_readEEPROM
 20676 ;; This function is called by:
 20677 ;;		_UARTint
 20678 ;; This function uses a non-reentrant model
 20679 ;;
 20680                           
 20681                           	psect	text89
 20682  0067FC                     __ptext89:
 20683                           	opt stack 0
 20684  0067FC                     i1_sysParamInit:
 20685                           	opt stack 11
 20686                           
 20687                           ;sysParams.h: 172: fData.floatUB = readEEPROM(3);
 20688                           
 20689                           ;incstack = 0
 20690  0067FC  0E03               	movlw	3
 20691  0067FE  EC2E  F039         	call	i1_readEEPROM
 20692  006802  0100               	movlb	0	; () banked
 20693  006804  6FB1               	movwf	(_fData+2)& (0+255),b
 20694                           
 20695                           ;sysParams.h: 173: fData.floatHB = readEEPROM(4);
 20696  006806  0E04               	movlw	4
 20697  006808  EC2E  F039         	call	i1_readEEPROM
 20698  00680C  0100               	movlb	0	; () banked
 20699  00680E  6FB0               	movwf	(_fData+1)& (0+255),b
 20700                           
 20701                           ;sysParams.h: 174: fData.floatLB = readEEPROM(5);
 20702  006810  0E05               	movlw	5
 20703  006812  EC2E  F039         	call	i1_readEEPROM
 20704  006816  0100               	movlb	0	; () banked
 20705  006818  6FAF               	movwf	_fData& (0+255),b
 20706                           
 20707                           ; BSR set to: 0
 20708                           ;sysParams.h: 175: tiXcorte = fData.floatdat;
 20709  00681A  C0AF  F195         	movff	_fData,_tiXcorte
 20710  00681E  C0B0  F196         	movff	_fData+1,_tiXcorte+1
 20711  006822  C0B1  F197         	movff	_fData+2,_tiXcorte+2
 20712                           
 20713                           ;sysParams.h: 176: i16Data.int16HB = readEEPROM(6);
 20714  006826  0E06               	movlw	6
 20715  006828  EC2E  F039         	call	i1_readEEPROM
 20716  00682C  0100               	movlb	0	; () banked
 20717  00682E  6FB5               	movwf	(_i16Data+1)& (0+255),b
 20718                           
 20719                           ;sysParams.h: 177: i16Data.int16LB = readEEPROM(7);
 20720  006830  0E07               	movlw	7
 20721  006832  EC2E  F039         	call	i1_readEEPROM
 20722  006836  0100               	movlb	0	; () banked
 20723  006838  6FB4               	movwf	_i16Data& (0+255),b
 20724                           
 20725                           ; BSR set to: 0
 20726                           ;sysParams.h: 178: numCortes = i16Data.int16dat;
 20727  00683A  C0B4  F0D2         	movff	_i16Data,_numCortes
 20728  00683E  C0B5  F0D3         	movff	_i16Data+1,_numCortes+1
 20729                           
 20730                           ;sysParams.h: 190: fData.floatUB = readEEPROM(17);
 20731  006842  0E11               	movlw	17
 20732  006844  EC2E  F039         	call	i1_readEEPROM
 20733  006848  0100               	movlb	0	; () banked
 20734  00684A  6FB1               	movwf	(_fData+2)& (0+255),b
 20735                           
 20736                           ;sysParams.h: 191: fData.floatHB = readEEPROM(18);
 20737  00684C  0E12               	movlw	18
 20738  00684E  EC2E  F039         	call	i1_readEEPROM
 20739  006852  0100               	movlb	0	; () banked
 20740  006854  6FB0               	movwf	(_fData+1)& (0+255),b
 20741                           
 20742                           ;sysParams.h: 192: fData.floatLB = readEEPROM(19);
 20743  006856  0E13               	movlw	19
 20744  006858  EC2E  F039         	call	i1_readEEPROM
 20745  00685C  0100               	movlb	0	; () banked
 20746  00685E  6FAF               	movwf	_fData& (0+255),b
 20747                           
 20748                           ; BSR set to: 0
 20749                           ;sysParams.h: 193: velocidadMasa = fData.floatdat;
 20750  006860  C0AF  F18F         	movff	_fData,_velocidadMasa
 20751  006864  C0B0  F190         	movff	_fData+1,_velocidadMasa+1
 20752  006868  C0B1  F191         	movff	_fData+2,_velocidadMasa+2
 20753                           
 20754                           ; BSR set to: 0
 20755                           ;sysParams.h: 194: calcSysVars();
 20756  00686C  EC55  F035         	call	i1_calcSysVars	;wreg free
 20757  006870  0012               	return		;funcret
 20758  006872                     __end_ofi1_sysParamInit:
 20759                           	opt stack 0
 20760                           pclatu	equ	0xFFB
 20761                           pclath	equ	0xFFA
 20762                           tblptru	equ	0xFF8
 20763                           tblptrh	equ	0xFF7
 20764                           tblptrl	equ	0xFF6
 20765                           tablat	equ	0xFF5
 20766                           prodh	equ	0xFF4
 20767                           prodl	equ	0xFF3
 20768                           intcon	equ	0xFF2
 20769                           postinc0	equ	0xFEE
 20770                           fsr0h	equ	0xFEA
 20771                           fsr0l	equ	0xFE9
 20772                           wreg	equ	0xFE8
 20773                           postdec1	equ	0xFE5
 20774                           fsr1h	equ	0xFE2
 20775                           fsr1l	equ	0xFE1
 20776                           bsr	equ	0xFE0
 20777                           indf2	equ	0xFDF
 20778                           postinc2	equ	0xFDE
 20779                           postdec2	equ	0xFDD
 20780                           plusw2	equ	0xFDB
 20781                           fsr2h	equ	0xFDA
 20782                           fsr2l	equ	0xFD9
 20783                           status	equ	0xFD8
 20784                           
 20785 ;; *************** function i1_readEEPROM *****************
 20786 ;; Defined at:
 20787 ;;		line 65 in file "source/sysParams.h"
 20788 ;; Parameters:    Size  Location     Type
 20789 ;;  adr             1    wreg     unsigned char 
 20790 ;; Auto vars:     Size  Location     Type
 20791 ;;  adr             1    0[BANK0 ] unsigned char 
 20792 ;; Return value:  Size  Location     Type
 20793 ;;                  1    wreg      unsigned char 
 20794 ;; Registers used:
 20795 ;;		wreg, status,2
 20796 ;; Tracked objects:
 20797 ;;		On entry : 0/0
 20798 ;;		On exit  : 0/0
 20799 ;;		Unchanged: 0/0
 20800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20801 ;;      Params:         0       0       0       0       0       0       0
 20802 ;;      Locals:         0       1       0       0       0       0       0
 20803 ;;      Temps:          0       0       0       0       0       0       0
 20804 ;;      Totals:         0       1       0       0       0       0       0
 20805 ;;Total ram usage:        1 bytes
 20806 ;; Hardware stack levels used:    1
 20807 ;; Hardware stack levels required when called:    4
 20808 ;; This function calls:
 20809 ;;		Nothing
 20810 ;; This function is called by:
 20811 ;;		i1_sysParamInit
 20812 ;; This function uses a non-reentrant model
 20813 ;;
 20814                           
 20815                           	psect	text90
 20816  00725C                     __ptext90:
 20817                           	opt stack 0
 20818  00725C                     i1_readEEPROM:
 20819                           	opt stack 13
 20820                           
 20821                           ;incstack = 0
 20822                           ;i1readEEPROM@adr stored from wreg
 20823  00725C  0100               	movlb	0	; () banked
 20824  00725E  6F60               	movwf	i1readEEPROM@adr& (0+255),b
 20825                           
 20826                           ;sysParams.h: 66: EEADR = adr;
 20827  007260  C060  FFA9         	movff	i1readEEPROM@adr,4009	;volatile
 20828                           
 20829                           ;sysParams.h: 67: EECON1bits.EEPGD = 0;
 20830  007264  9EA6               	bcf	4006,7,c	;volatile
 20831                           
 20832                           ;sysParams.h: 68: EECON1bits.CFGS = 0;
 20833  007266  9CA6               	bcf	4006,6,c	;volatile
 20834                           
 20835                           ;sysParams.h: 69: EECON1bits.RD = 1;
 20836  007268  80A6               	bsf	4006,0,c	;volatile
 20837  00726A                     i1l289:
 20838  00726A  B0A6               	btfsc	4006,0,c	;volatile
 20839  00726C  D7FE               	goto	i1l289
 20840                           
 20841                           ;sysParams.h: 71: return EEDATA;
 20842  00726E  50A8               	movf	4008,w,c	;volatile
 20843  007270  0012               	return		;funcret
 20844  007272                     __end_ofi1_readEEPROM:
 20845                           	opt stack 0
 20846                           pclatu	equ	0xFFB
 20847                           pclath	equ	0xFFA
 20848                           tblptru	equ	0xFF8
 20849                           tblptrh	equ	0xFF7
 20850                           tblptrl	equ	0xFF6
 20851                           tablat	equ	0xFF5
 20852                           prodh	equ	0xFF4
 20853                           prodl	equ	0xFF3
 20854                           intcon	equ	0xFF2
 20855                           postinc0	equ	0xFEE
 20856                           fsr0h	equ	0xFEA
 20857                           fsr0l	equ	0xFE9
 20858                           wreg	equ	0xFE8
 20859                           postdec1	equ	0xFE5
 20860                           fsr1h	equ	0xFE2
 20861                           fsr1l	equ	0xFE1
 20862                           bsr	equ	0xFE0
 20863                           indf2	equ	0xFDF
 20864                           postinc2	equ	0xFDE
 20865                           postdec2	equ	0xFDD
 20866                           plusw2	equ	0xFDB
 20867                           fsr2h	equ	0xFDA
 20868                           fsr2l	equ	0xFD9
 20869                           status	equ	0xFD8
 20870                           
 20871 ;; *************** function i1_putchUART *****************
 20872 ;; Defined at:
 20873 ;;		line 59 in file "source/IOConfig.h"
 20874 ;; Parameters:    Size  Location     Type
 20875 ;;  val             1    wreg     unsigned char 
 20876 ;; Auto vars:     Size  Location     Type
 20877 ;;  val             1    0[BANK0 ] unsigned char 
 20878 ;; Return value:  Size  Location     Type
 20879 ;;                  1    wreg      void 
 20880 ;; Registers used:
 20881 ;;		wreg
 20882 ;; Tracked objects:
 20883 ;;		On entry : 0/0
 20884 ;;		On exit  : 0/0
 20885 ;;		Unchanged: 0/0
 20886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20887 ;;      Params:         0       0       0       0       0       0       0
 20888 ;;      Locals:         0       1       0       0       0       0       0
 20889 ;;      Temps:          0       0       0       0       0       0       0
 20890 ;;      Totals:         0       1       0       0       0       0       0
 20891 ;;Total ram usage:        1 bytes
 20892 ;; Hardware stack levels used:    1
 20893 ;; Hardware stack levels required when called:    4
 20894 ;; This function calls:
 20895 ;;		Nothing
 20896 ;; This function is called by:
 20897 ;;		_UARTint
 20898 ;; This function uses a non-reentrant model
 20899 ;;
 20900                           
 20901                           	psect	text91
 20902  007326                     __ptext91:
 20903                           	opt stack 0
 20904  007326                     i1_putchUART:
 20905                           	opt stack 14
 20906                           
 20907                           ;incstack = 0
 20908                           ;i1putchUART@val stored from wreg
 20909  007326  0100               	movlb	0	; () banked
 20910  007328  6F60               	movwf	i1putchUART@val& (0+255),b
 20911  00732A                     i1l222:
 20912  00732A  A2AC               	btfss	4012,1,c	;volatile
 20913  00732C  D7FE               	goto	i1l222
 20914                           
 20915                           ;IOConfig.h: 61: TXREG1 = val;
 20916  00732E  C060  FFAD         	movff	i1putchUART@val,4013	;volatile
 20917  007332  0012               	return		;funcret
 20918  007334                     __end_ofi1_putchUART:
 20919                           	opt stack 0
 20920                           pclatu	equ	0xFFB
 20921                           pclath	equ	0xFFA
 20922                           tblptru	equ	0xFF8
 20923                           tblptrh	equ	0xFF7
 20924                           tblptrl	equ	0xFF6
 20925                           tablat	equ	0xFF5
 20926                           prodh	equ	0xFF4
 20927                           prodl	equ	0xFF3
 20928                           intcon	equ	0xFF2
 20929                           postinc0	equ	0xFEE
 20930                           fsr0h	equ	0xFEA
 20931                           fsr0l	equ	0xFE9
 20932                           wreg	equ	0xFE8
 20933                           postdec1	equ	0xFE5
 20934                           fsr1h	equ	0xFE2
 20935                           fsr1l	equ	0xFE1
 20936                           bsr	equ	0xFE0
 20937                           indf2	equ	0xFDF
 20938                           postinc2	equ	0xFDE
 20939                           postdec2	equ	0xFDD
 20940                           plusw2	equ	0xFDB
 20941                           fsr2h	equ	0xFDA
 20942                           fsr2l	equ	0xFD9
 20943                           status	equ	0xFD8
 20944                           
 20945 ;; *************** function i1_pressUP *****************
 20946 ;; Defined at:
 20947 ;;		line 124 in file "source/DisplayProtocol.h"
 20948 ;; Parameters:    Size  Location     Type
 20949 ;;		None
 20950 ;; Auto vars:     Size  Location     Type
 20951 ;;		None
 20952 ;; Return value:  Size  Location     Type
 20953 ;;                  1    wreg      void 
 20954 ;; Registers used:
 20955 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20956 ;; Tracked objects:
 20957 ;;		On entry : 0/0
 20958 ;;		On exit  : 0/0
 20959 ;;		Unchanged: 0/0
 20960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20961 ;;      Params:         0       0       0       0       0       0       0
 20962 ;;      Locals:         0       0       0       0       0       0       0
 20963 ;;      Temps:          0       1       0       0       0       0       0
 20964 ;;      Totals:         0       1       0       0       0       0       0
 20965 ;;Total ram usage:        1 bytes
 20966 ;; Hardware stack levels used:    1
 20967 ;; Hardware stack levels required when called:    5
 20968 ;; This function calls:
 20969 ;;		i1_chanValDigUP
 20970 ;; This function is called by:
 20971 ;;		_UARTint
 20972 ;; This function uses a non-reentrant model
 20973 ;;
 20974                           
 20975                           	psect	text92
 20976  004836                     __ptext92:
 20977                           	opt stack 0
 20978  004836                     i1_pressUP:
 20979                           	opt stack 13
 20980                           
 20981                           ;DisplayProtocol.h: 125: if (actualScreen == 0 || actualScreen == 4) {
 20982                           
 20983                           ;incstack = 0
 20984  004836  0101               	movlb	1	; () banked
 20985  004838  51BD               	movf	_actualScreen& (0+255),w,b
 20986  00483A  B4D8               	btfsc	status,2,c
 20987  00483C  D005               	goto	i1l8375
 20988                           
 20989                           ; BSR set to: 1
 20990  00483E  0E04               	movlw	4
 20991  004840  0101               	movlb	1	; () banked
 20992  004842  19BD               	xorwf	_actualScreen& (0+255),w,b
 20993  004844  A4D8               	btfss	status,2,c
 20994  004846  D00C               	goto	i1l8381
 20995  004848                     i1l8375:
 20996                           
 20997                           ; BSR set to: 1
 20998                           ;DisplayProtocol.h: 126: menuSection++;
 20999  004848  0101               	movlb	1	; () banked
 21000  00484A  2BBC               	incf	_menuSection& (0+255),f,b
 21001                           
 21002                           ; BSR set to: 1
 21003                           ;DisplayProtocol.h: 127: if (menuSection > 3)
 21004  00484C  0101               	movlb	1	; () banked
 21005  00484E  51BC               	movf	_menuSection& (0+255),w,b
 21006  004850  0A80               	xorlw	128
 21007  004852  0F7C               	addlw	-132
 21008  004854  A0D8               	btfss	status,0,c
 21009  004856  0012               	return	
 21010                           
 21011                           ; BSR set to: 1
 21012                           ;DisplayProtocol.h: 128: menuSection = 0;
 21013  004858  0E00               	movlw	0
 21014  00485A  0101               	movlb	1	; () banked
 21015  00485C  6FBC               	movwf	_menuSection& (0+255),b
 21016                           
 21017                           ; BSR set to: 1
 21018                           ;DisplayProtocol.h: 129: } else if (actualScreen == 1) {
 21019  00485E  0012               	return	
 21020  004860                     i1l8381:
 21021                           
 21022                           ; BSR set to: 1
 21023  004860  0101               	movlb	1	; () banked
 21024  004862  05BD               	decf	_actualScreen& (0+255),w,b
 21025  004864  A4D8               	btfss	status,2,c
 21026  004866  D024               	goto	i1l8387
 21027                           
 21028                           ; BSR set to: 1
 21029                           ;DisplayProtocol.h: 130: introducido[passSection]++;
 21030  004868  0101               	movlb	1	; () banked
 21031  00486A  51BB               	movf	_passSection& (0+255),w,b
 21032  00486C  0D01               	mullw	1
 21033  00486E  0EAD               	movlw	low _introducido
 21034  004870  24F3               	addwf	prodl,w,c
 21035  004872  6ED9               	movwf	fsr2l,c
 21036  004874  0E01               	movlw	high _introducido
 21037  004876  20F4               	addwfc	prodh,w,c
 21038  004878  6EDA               	movwf	fsr2h,c
 21039  00487A  2ADF               	incf	indf2,f,c
 21040                           
 21041                           ;DisplayProtocol.h: 131: if (introducido[passSection] > 9)
 21042  00487C  0101               	movlb	1	; () banked
 21043  00487E  51BB               	movf	_passSection& (0+255),w,b
 21044  004880  0D01               	mullw	1
 21045  004882  0EAD               	movlw	low _introducido
 21046  004884  24F3               	addwf	prodl,w,c
 21047  004886  6ED9               	movwf	fsr2l,c
 21048  004888  0E01               	movlw	high _introducido
 21049  00488A  20F4               	addwfc	prodh,w,c
 21050  00488C  6EDA               	movwf	fsr2h,c
 21051  00488E  50DF               	movf	indf2,w,c
 21052  004890  0A80               	xorlw	128
 21053  004892  0F76               	addlw	-138
 21054  004894  A0D8               	btfss	status,0,c
 21055  004896  0012               	return	
 21056                           
 21057                           ; BSR set to: 1
 21058                           ;DisplayProtocol.h: 132: introducido[passSection] = 0;
 21059  004898  0101               	movlb	1	; () banked
 21060  00489A  51BB               	movf	_passSection& (0+255),w,b
 21061  00489C  0D01               	mullw	1
 21062  00489E  0EAD               	movlw	low _introducido
 21063  0048A0  24F3               	addwf	prodl,w,c
 21064  0048A2  6ED9               	movwf	fsr2l,c
 21065  0048A4  0E01               	movlw	high _introducido
 21066  0048A6  20F4               	addwfc	prodh,w,c
 21067  0048A8  6EDA               	movwf	fsr2h,c
 21068  0048AA  0E00               	movlw	0
 21069  0048AC  6EDF               	movwf	indf2,c
 21070                           
 21071                           ; BSR set to: 1
 21072                           ;DisplayProtocol.h: 133: } else if (actualScreen == 2 || actualScreen == 3
 21073  0048AE  0012               	return	
 21074  0048B0                     i1l8387:
 21075                           
 21076                           ; BSR set to: 1
 21077                           ;DisplayProtocol.h: 134: || actualScreen == 10 || actualScreen == 11
 21078                           ;DisplayProtocol.h: 135: || actualScreen == 15) {
 21079  0048B0  0E02               	movlw	2
 21080  0048B2  0101               	movlb	1	; () banked
 21081  0048B4  19BD               	xorwf	_actualScreen& (0+255),w,b
 21082  0048B6  B4D8               	btfsc	status,2,c
 21083  0048B8  D014               	goto	i1l8397
 21084                           
 21085                           ; BSR set to: 1
 21086  0048BA  0E03               	movlw	3
 21087  0048BC  0101               	movlb	1	; () banked
 21088  0048BE  19BD               	xorwf	_actualScreen& (0+255),w,b
 21089  0048C0  B4D8               	btfsc	status,2,c
 21090  0048C2  D00F               	goto	i1l8397
 21091                           
 21092                           ; BSR set to: 1
 21093  0048C4  0E0A               	movlw	10
 21094  0048C6  0101               	movlb	1	; () banked
 21095  0048C8  19BD               	xorwf	_actualScreen& (0+255),w,b
 21096  0048CA  B4D8               	btfsc	status,2,c
 21097  0048CC  D00A               	goto	i1l8397
 21098                           
 21099                           ; BSR set to: 1
 21100  0048CE  0E0B               	movlw	11
 21101  0048D0  0101               	movlb	1	; () banked
 21102  0048D2  19BD               	xorwf	_actualScreen& (0+255),w,b
 21103  0048D4  B4D8               	btfsc	status,2,c
 21104  0048D6  D005               	goto	i1l8397
 21105                           
 21106                           ; BSR set to: 1
 21107  0048D8  0E0F               	movlw	15
 21108  0048DA  0101               	movlb	1	; () banked
 21109  0048DC  19BD               	xorwf	_actualScreen& (0+255),w,b
 21110  0048DE  A4D8               	btfss	status,2,c
 21111  0048E0  D011               	goto	i1l8403
 21112  0048E2                     i1l8397:
 21113                           
 21114                           ; BSR set to: 1
 21115                           ;DisplayProtocol.h: 136: selSN = !selSN;
 21116  0048E2  0101               	movlb	1	; () banked
 21117  0048E4  51BA               	movf	_selSN& (0+255),w,b
 21118  0048E6  A4D8               	btfss	status,2,c
 21119  0048E8  D002               	goto	i1u1151_20
 21120  0048EA  0E01               	movlw	1
 21121  0048EC  D001               	goto	i1u1152_20
 21122  0048EE                     i1u1151_20:
 21123  0048EE  0E00               	movlw	0
 21124  0048F0                     i1u1152_20:
 21125  0048F0  0101               	movlb	1	; () banked
 21126  0048F2  6FBA               	movwf	_selSN& (0+255),b
 21127                           
 21128                           ; BSR set to: 1
 21129                           ;DisplayProtocol.h: 137: if(selSN > 1)
 21130  0048F4  0E01               	movlw	1
 21131  0048F6  0101               	movlb	1	; () banked
 21132  0048F8  65BA               	cpfsgt	_selSN& (0+255),b
 21133  0048FA  0012               	return	
 21134                           
 21135                           ; BSR set to: 1
 21136                           ;DisplayProtocol.h: 138: selSN = 0;
 21137  0048FC  0E00               	movlw	0
 21138  0048FE  0101               	movlb	1	; () banked
 21139  004900  6FBA               	movwf	_selSN& (0+255),b
 21140                           
 21141                           ; BSR set to: 1
 21142                           ;DisplayProtocol.h: 139: }else if(actualScreen == 5) {
 21143  004902  0012               	return	
 21144  004904                     i1l8403:
 21145                           
 21146                           ; BSR set to: 1
 21147  004904  0E05               	movlw	5
 21148  004906  0101               	movlb	1	; () banked
 21149  004908  19BD               	xorwf	_actualScreen& (0+255),w,b
 21150  00490A  B4D8               	btfsc	status,2,c
 21151  00490C  D008               	goto	i1l8413
 21152  00490E  D013               	goto	i1l8415
 21153  004910                     i1l8407:
 21154                           
 21155                           ; BSR set to: 1
 21156                           ;DisplayProtocol.h: 144: chanValDigUP();
 21157  004910  EC8A  F029         	call	i1_chanValDigUP	;wreg free
 21158                           
 21159                           ;DisplayProtocol.h: 145: break;
 21160  004914  0012               	return	
 21161  004916                     i1l8409:
 21162                           
 21163                           ;DisplayProtocol.h: 147: chanVals++;
 21164  004916  0101               	movlb	1	; () banked
 21165  004918  4BB6               	infsnz	_chanVals& (0+255),f,b
 21166  00491A  2BB7               	incf	(_chanVals+1)& (0+255),f,b
 21167                           
 21168                           ; BSR set to: 1
 21169                           ;DisplayProtocol.h: 149: }
 21170                           ;DisplayProtocol.h: 150: }
 21171                           
 21172                           ;DisplayProtocol.h: 148: break;
 21173  00491C  0012               	return	
 21174  00491E                     i1l8413:
 21175                           
 21176                           ; BSR set to: 1
 21177  00491E  0101               	movlb	1	; () banked
 21178  004920  51BC               	movf	_menuSection& (0+255),w,b
 21179                           
 21180                           ; Switch size 1, requested type "space"
 21181                           ; Number of cases is 3, Range of values is 0 to 2
 21182                           ; switch strategies available:
 21183                           ; Name         Instructions Cycles
 21184                           ; simple_byte           10     6 (average)
 21185                           ;	Chosen strategy is simple_byte
 21186  004922  0A00               	xorlw	0	; case 0
 21187  004924  B4D8               	btfsc	status,2,c
 21188  004926  0012               	return	
 21189  004928  0A01               	xorlw	1	; case 1
 21190  00492A  B4D8               	btfsc	status,2,c
 21191  00492C  D7F1               	goto	i1l8407
 21192  00492E  0A03               	xorlw	3	; case 2
 21193  004930  A4D8               	btfss	status,2,c
 21194                           
 21195                           ; BSR set to: 1
 21196                           ;DisplayProtocol.h: 151: }else if(actualScreen == 12)
 21197  004932  0012               	return	
 21198  004934  D7F0               	goto	i1l8409
 21199  004936                     i1l8415:
 21200                           
 21201                           ; BSR set to: 1
 21202  004936  0E0C               	movlw	12
 21203  004938  0101               	movlb	1	; () banked
 21204  00493A  19BD               	xorwf	_actualScreen& (0+255),w,b
 21205  00493C  A4D8               	btfss	status,2,c
 21206  00493E  0012               	return	
 21207                           
 21208                           ; BSR set to: 1
 21209                           ;DisplayProtocol.h: 152: chanValDigUP();
 21210  004940  EC8A  F029         	call	i1_chanValDigUP	;wreg free
 21211  004944  0012               	return	
 21212  004946                     __end_ofi1_pressUP:
 21213                           	opt stack 0
 21214                           pclatu	equ	0xFFB
 21215                           pclath	equ	0xFFA
 21216                           tblptru	equ	0xFF8
 21217                           tblptrh	equ	0xFF7
 21218                           tblptrl	equ	0xFF6
 21219                           tablat	equ	0xFF5
 21220                           prodh	equ	0xFF4
 21221                           prodl	equ	0xFF3
 21222                           intcon	equ	0xFF2
 21223                           postinc0	equ	0xFEE
 21224                           fsr0h	equ	0xFEA
 21225                           fsr0l	equ	0xFE9
 21226                           wreg	equ	0xFE8
 21227                           postdec1	equ	0xFE5
 21228                           fsr1h	equ	0xFE2
 21229                           fsr1l	equ	0xFE1
 21230                           bsr	equ	0xFE0
 21231                           indf2	equ	0xFDF
 21232                           postinc2	equ	0xFDE
 21233                           postdec2	equ	0xFDD
 21234                           plusw2	equ	0xFDB
 21235                           fsr2h	equ	0xFDA
 21236                           fsr2l	equ	0xFD9
 21237                           status	equ	0xFD8
 21238                           
 21239 ;; *************** function i1_chanValDigUP *****************
 21240 ;; Defined at:
 21241 ;;		line 28 in file "source/DisplayProtocol.h"
 21242 ;; Parameters:    Size  Location     Type
 21243 ;;		None
 21244 ;; Auto vars:     Size  Location     Type
 21245 ;;		None
 21246 ;; Return value:  Size  Location     Type
 21247 ;;                  1    wreg      void 
 21248 ;; Registers used:
 21249 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21250 ;; Tracked objects:
 21251 ;;		On entry : 0/0
 21252 ;;		On exit  : 0/0
 21253 ;;		Unchanged: 0/0
 21254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21255 ;;      Params:         0       0       0       0       0       0       0
 21256 ;;      Locals:         0       0       0       0       0       0       0
 21257 ;;      Temps:          0       5       0       0       0       0       0
 21258 ;;      Totals:         0       5       0       0       0       0       0
 21259 ;;Total ram usage:        5 bytes
 21260 ;; Hardware stack levels used:    1
 21261 ;; Hardware stack levels required when called:    4
 21262 ;; This function calls:
 21263 ;;		Nothing
 21264 ;; This function is called by:
 21265 ;;		i1_pressUP
 21266 ;; This function uses a non-reentrant model
 21267 ;;
 21268                           
 21269                           	psect	text93
 21270  005314                     __ptext93:
 21271                           	opt stack 0
 21272  005314                     i1_chanValDigUP:
 21273                           	opt stack 13
 21274                           
 21275                           ;DisplayProtocol.h: 29: chanValdig[chanValSection]++;
 21276                           
 21277                           ;incstack = 0
 21278  005314  0101               	movlb	1	; () banked
 21279  005316  519C               	movf	_chanValSection& (0+255),w,b
 21280  005318  0D01               	mullw	1
 21281  00531A  0EA3               	movlw	low _chanValdig
 21282  00531C  24F3               	addwf	prodl,w,c
 21283  00531E  6ED9               	movwf	fsr2l,c
 21284  005320  0E01               	movlw	high _chanValdig
 21285  005322  20F4               	addwfc	prodh,w,c
 21286  005324  6EDA               	movwf	fsr2h,c
 21287  005326  2ADF               	incf	indf2,f,c
 21288                           
 21289                           ;DisplayProtocol.h: 30: if(chanValdig[chanValSection] > 9) {
 21290  005328  0101               	movlb	1	; () banked
 21291  00532A  519C               	movf	_chanValSection& (0+255),w,b
 21292  00532C  0D01               	mullw	1
 21293  00532E  0EA3               	movlw	low _chanValdig
 21294  005330  24F3               	addwf	prodl,w,c
 21295  005332  6ED9               	movwf	fsr2l,c
 21296  005334  0E01               	movlw	high _chanValdig
 21297  005336  20F4               	addwfc	prodh,w,c
 21298  005338  6EDA               	movwf	fsr2h,c
 21299  00533A  50DF               	movf	indf2,w,c
 21300  00533C  0A80               	xorlw	128
 21301  00533E  0F76               	addlw	-138
 21302  005340  A0D8               	btfss	status,0,c
 21303  005342  0012               	return	
 21304                           
 21305                           ; BSR set to: 1
 21306                           ;DisplayProtocol.h: 31: chanValdig[chanValSection] = 0;
 21307  005344  0101               	movlb	1	; () banked
 21308  005346  519C               	movf	_chanValSection& (0+255),w,b
 21309  005348  0D01               	mullw	1
 21310  00534A  0EA3               	movlw	low _chanValdig
 21311  00534C  24F3               	addwf	prodl,w,c
 21312  00534E  6ED9               	movwf	fsr2l,c
 21313  005350  0E01               	movlw	high _chanValdig
 21314  005352  20F4               	addwfc	prodh,w,c
 21315  005354  6EDA               	movwf	fsr2h,c
 21316  005356  0E00               	movlw	0
 21317  005358  6EDF               	movwf	indf2,c
 21318                           
 21319                           ; BSR set to: 1
 21320                           ;DisplayProtocol.h: 32: if(chanValSection > 1 && chanValdig[chanValSection - 1] < 9)
 21321  00535A  0101               	movlb	1	; () banked
 21322  00535C  519C               	movf	_chanValSection& (0+255),w,b
 21323  00535E  0A80               	xorlw	128
 21324  005360  0F7E               	addlw	-130
 21325  005362  A0D8               	btfss	status,0,c
 21326  005364  0012               	return	
 21327                           
 21328                           ; BSR set to: 1
 21329  005366  0EFF               	movlw	255
 21330  005368  0100               	movlb	0	; () banked
 21331  00536A  6F60               	movwf	??i1_chanValDigUP& (0+255),b
 21332  00536C  0EFF               	movlw	255
 21333  00536E  0100               	movlb	0	; () banked
 21334  005370  6F61               	movwf	(??i1_chanValDigUP+1)& (0+255),b
 21335  005372  C19C  F062         	movff	_chanValSection,??i1_chanValDigUP+2
 21336  005376  0100               	movlb	0	; () banked
 21337  005378  6B63               	clrf	(??i1_chanValDigUP+3)& (0+255),b
 21338  00537A  BF62               	btfsc	(??i1_chanValDigUP+2)& (0+255),7,b
 21339  00537C  0763               	decf	(??i1_chanValDigUP+3)& (0+255),f,b
 21340  00537E  0100               	movlb	0	; () banked
 21341  005380  5160               	movf	??i1_chanValDigUP& (0+255),w,b
 21342  005382  0100               	movlb	0	; () banked
 21343  005384  2762               	addwf	(??i1_chanValDigUP+2)& (0+255),f,b
 21344  005386  0100               	movlb	0	; () banked
 21345  005388  5161               	movf	(??i1_chanValDigUP+1)& (0+255),w,b
 21346  00538A  0100               	movlb	0	; () banked
 21347  00538C  2363               	addwfc	(??i1_chanValDigUP+3)& (0+255),f,b
 21348  00538E  0EA3               	movlw	low _chanValdig
 21349  005390  0100               	movlb	0	; () banked
 21350  005392  2562               	addwf	(??i1_chanValDigUP+2)& (0+255),w,b
 21351  005394  6ED9               	movwf	fsr2l,c
 21352  005396  0E01               	movlw	high _chanValdig
 21353  005398  0100               	movlb	0	; () banked
 21354  00539A  2163               	addwfc	(??i1_chanValDigUP+3)& (0+255),w,b
 21355  00539C  6EDA               	movwf	fsr2h,c
 21356  00539E  50DF               	movf	indf2,w,c
 21357  0053A0  0A80               	xorlw	128
 21358  0053A2  0F77               	addlw	-137
 21359  0053A4  B0D8               	btfsc	status,0,c
 21360  0053A6  0012               	return	
 21361                           
 21362                           ; BSR set to: 0
 21363                           ;DisplayProtocol.h: 33: chanValdig[chanValSection - 1]++;
 21364  0053A8  0EFF               	movlw	255
 21365  0053AA  0100               	movlb	0	; () banked
 21366  0053AC  6F60               	movwf	??i1_chanValDigUP& (0+255),b
 21367  0053AE  0EFF               	movlw	255
 21368  0053B0  0100               	movlb	0	; () banked
 21369  0053B2  6F61               	movwf	(??i1_chanValDigUP+1)& (0+255),b
 21370  0053B4  C19C  F062         	movff	_chanValSection,??i1_chanValDigUP+2
 21371  0053B8  0100               	movlb	0	; () banked
 21372  0053BA  6B63               	clrf	(??i1_chanValDigUP+3)& (0+255),b
 21373  0053BC  BF62               	btfsc	(??i1_chanValDigUP+2)& (0+255),7,b
 21374  0053BE  0763               	decf	(??i1_chanValDigUP+3)& (0+255),f,b
 21375  0053C0  0100               	movlb	0	; () banked
 21376  0053C2  5160               	movf	??i1_chanValDigUP& (0+255),w,b
 21377  0053C4  0100               	movlb	0	; () banked
 21378  0053C6  2762               	addwf	(??i1_chanValDigUP+2)& (0+255),f,b
 21379  0053C8  0100               	movlb	0	; () banked
 21380  0053CA  5161               	movf	(??i1_chanValDigUP+1)& (0+255),w,b
 21381  0053CC  0100               	movlb	0	; () banked
 21382  0053CE  2363               	addwfc	(??i1_chanValDigUP+3)& (0+255),f,b
 21383  0053D0  0EA3               	movlw	low _chanValdig
 21384  0053D2  0100               	movlb	0	; () banked
 21385  0053D4  2562               	addwf	(??i1_chanValDigUP+2)& (0+255),w,b
 21386  0053D6  6ED9               	movwf	fsr2l,c
 21387  0053D8  0E01               	movlw	high _chanValdig
 21388  0053DA  0100               	movlb	0	; () banked
 21389  0053DC  2163               	addwfc	(??i1_chanValDigUP+3)& (0+255),w,b
 21390  0053DE  6EDA               	movwf	fsr2h,c
 21391  0053E0  2ADF               	incf	indf2,f,c
 21392                           
 21393                           ; BSR set to: 0
 21394  0053E2  0012               	return	
 21395  0053E4                     __end_ofi1_chanValDigUP:
 21396                           	opt stack 0
 21397                           pclatu	equ	0xFFB
 21398                           pclath	equ	0xFFA
 21399                           tblptru	equ	0xFF8
 21400                           tblptrh	equ	0xFF7
 21401                           tblptrl	equ	0xFF6
 21402                           tablat	equ	0xFF5
 21403                           prodh	equ	0xFF4
 21404                           prodl	equ	0xFF3
 21405                           intcon	equ	0xFF2
 21406                           postinc0	equ	0xFEE
 21407                           fsr0h	equ	0xFEA
 21408                           fsr0l	equ	0xFE9
 21409                           wreg	equ	0xFE8
 21410                           postdec1	equ	0xFE5
 21411                           fsr1h	equ	0xFE2
 21412                           fsr1l	equ	0xFE1
 21413                           bsr	equ	0xFE0
 21414                           indf2	equ	0xFDF
 21415                           postinc2	equ	0xFDE
 21416                           postdec2	equ	0xFDD
 21417                           plusw2	equ	0xFDB
 21418                           fsr2h	equ	0xFDA
 21419                           fsr2l	equ	0xFD9
 21420                           status	equ	0xFD8
 21421                           
 21422 ;; *************** function i1_pressRETRO *****************
 21423 ;; Defined at:
 21424 ;;		line 225 in file "source/DisplayProtocol.h"
 21425 ;; Parameters:    Size  Location     Type
 21426 ;;		None
 21427 ;; Auto vars:     Size  Location     Type
 21428 ;;		None
 21429 ;; Return value:  Size  Location     Type
 21430 ;;                  1    wreg      void 
 21431 ;; Registers used:
 21432 ;;		wreg, status,2, status,0, cstack
 21433 ;; Tracked objects:
 21434 ;;		On entry : 0/0
 21435 ;;		On exit  : 0/0
 21436 ;;		Unchanged: 0/0
 21437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21438 ;;      Params:         0       0       0       0       0       0       0
 21439 ;;      Locals:         0       0       0       0       0       0       0
 21440 ;;      Temps:          0       0       0       0       0       0       0
 21441 ;;      Totals:         0       0       0       0       0       0       0
 21442 ;;Total ram usage:        0 bytes
 21443 ;; Hardware stack levels used:    1
 21444 ;; Hardware stack levels required when called:    7
 21445 ;; This function calls:
 21446 ;;		i1_initProtocoll
 21447 ;; This function is called by:
 21448 ;;		_UARTint
 21449 ;; This function uses a non-reentrant model
 21450 ;;
 21451                           
 21452                           	psect	text94
 21453  005706                     __ptext94:
 21454                           	opt stack 0
 21455  005706                     i1_pressRETRO:
 21456                           	opt stack 11
 21457                           
 21458                           ;DisplayProtocol.h: 226: if (actualScreen == 1) {
 21459                           
 21460                           ;incstack = 0
 21461  005706  0101               	movlb	1	; () banked
 21462  005708  05BD               	decf	_actualScreen& (0+255),w,b
 21463  00570A  A4D8               	btfss	status,2,c
 21464  00570C  D004               	goto	i1l8505
 21465                           
 21466                           ; BSR set to: 1
 21467                           ;DisplayProtocol.h: 227: actualScreen = 0;
 21468  00570E  0E00               	movlw	0
 21469  005710  0101               	movlb	1	; () banked
 21470  005712  6FBD               	movwf	_actualScreen& (0+255),b
 21471                           
 21472                           ;DisplayProtocol.h: 228: }else if (actualScreen == 2 || actualScreen == 3
 21473  005714  0012               	return	
 21474  005716                     i1l8505:
 21475                           
 21476                           ; BSR set to: 1
 21477                           ;DisplayProtocol.h: 229: || actualScreen == 10 || actualScreen == 11
 21478                           ;DisplayProtocol.h: 230: || actualScreen == 15) {
 21479  005716  0E02               	movlw	2
 21480  005718  0101               	movlb	1	; () banked
 21481  00571A  19BD               	xorwf	_actualScreen& (0+255),w,b
 21482  00571C  B4D8               	btfsc	status,2,c
 21483  00571E  D014               	goto	i1l680
 21484                           
 21485                           ; BSR set to: 1
 21486  005720  0E03               	movlw	3
 21487  005722  0101               	movlb	1	; () banked
 21488  005724  19BD               	xorwf	_actualScreen& (0+255),w,b
 21489  005726  B4D8               	btfsc	status,2,c
 21490  005728  D00F               	goto	i1l680
 21491                           
 21492                           ; BSR set to: 1
 21493  00572A  0E0A               	movlw	10
 21494  00572C  0101               	movlb	1	; () banked
 21495  00572E  19BD               	xorwf	_actualScreen& (0+255),w,b
 21496  005730  B4D8               	btfsc	status,2,c
 21497  005732  D00A               	goto	i1l680
 21498                           
 21499                           ; BSR set to: 1
 21500  005734  0E0B               	movlw	11
 21501  005736  0101               	movlb	1	; () banked
 21502  005738  19BD               	xorwf	_actualScreen& (0+255),w,b
 21503  00573A  B4D8               	btfsc	status,2,c
 21504  00573C  D005               	goto	i1l680
 21505                           
 21506                           ; BSR set to: 1
 21507  00573E  0E0F               	movlw	15
 21508  005740  0101               	movlb	1	; () banked
 21509  005742  19BD               	xorwf	_actualScreen& (0+255),w,b
 21510  005744  A4D8               	btfss	status,2,c
 21511  005746  D003               	goto	i1l8515
 21512  005748                     i1l680:
 21513                           
 21514                           ; BSR set to: 1
 21515                           ;DisplayProtocol.h: 231: actualScreen = tempLastScreen;
 21516  005748  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 21517                           
 21518                           ;DisplayProtocol.h: 232: }else if(actualScreen == 5) {
 21519  00574C  0012               	return	
 21520  00574E                     i1l8515:
 21521                           
 21522                           ; BSR set to: 1
 21523  00574E  0E05               	movlw	5
 21524  005750  0101               	movlb	1	; () banked
 21525  005752  19BD               	xorwf	_actualScreen& (0+255),w,b
 21526  005754  A4D8               	btfss	status,2,c
 21527  005756  D015               	goto	i1l8527
 21528                           
 21529                           ; BSR set to: 1
 21530                           ;DisplayProtocol.h: 233: if(menuSection != 2) {
 21531  005758  0E02               	movlw	2
 21532  00575A  0101               	movlb	1	; () banked
 21533  00575C  19BC               	xorwf	_menuSection& (0+255),w,b
 21534  00575E  B4D8               	btfsc	status,2,c
 21535  005760  D00C               	goto	i1l8525
 21536                           
 21537                           ; BSR set to: 1
 21538                           ;DisplayProtocol.h: 234: chanValSection++;
 21539  005762  0101               	movlb	1	; () banked
 21540  005764  2B9C               	incf	_chanValSection& (0+255),f,b
 21541                           
 21542                           ; BSR set to: 1
 21543                           ;DisplayProtocol.h: 235: if(chanValSection > 5)
 21544  005766  0101               	movlb	1	; () banked
 21545  005768  519C               	movf	_chanValSection& (0+255),w,b
 21546  00576A  0A80               	xorlw	128
 21547  00576C  0F7A               	addlw	-134
 21548  00576E  A0D8               	btfss	status,0,c
 21549  005770  0012               	return	
 21550                           
 21551                           ; BSR set to: 1
 21552                           ;DisplayProtocol.h: 236: chanValSection = 0;
 21553  005772  0E00               	movlw	0
 21554  005774  0101               	movlb	1	; () banked
 21555  005776  6F9C               	movwf	_chanValSection& (0+255),b
 21556                           
 21557                           ; BSR set to: 1
 21558                           ;DisplayProtocol.h: 237: }else
 21559  005778  0012               	return	
 21560  00577A                     i1l8525:
 21561                           
 21562                           ; BSR set to: 1
 21563                           ;DisplayProtocol.h: 238: actualScreen = 4;
 21564  00577A  0E04               	movlw	4
 21565  00577C  0101               	movlb	1	; () banked
 21566  00577E  6FBD               	movwf	_actualScreen& (0+255),b
 21567                           
 21568                           ; BSR set to: 1
 21569                           ;DisplayProtocol.h: 239: }else if(actualScreen == 11)
 21570  005780  0012               	return	
 21571  005782                     i1l8527:
 21572                           
 21573                           ; BSR set to: 1
 21574  005782  0E0B               	movlw	11
 21575  005784  0101               	movlb	1	; () banked
 21576  005786  19BD               	xorwf	_actualScreen& (0+255),w,b
 21577  005788  A4D8               	btfss	status,2,c
 21578  00578A  D004               	goto	i1l8531
 21579                           
 21580                           ; BSR set to: 1
 21581                           ;DisplayProtocol.h: 240: actualScreen = 4;
 21582  00578C  0E04               	movlw	4
 21583  00578E  0101               	movlb	1	; () banked
 21584  005790  6FBD               	movwf	_actualScreen& (0+255),b
 21585  005792  0012               	return	
 21586  005794                     i1l8531:
 21587                           
 21588                           ; BSR set to: 1
 21589                           ;DisplayProtocol.h: 241: else if(actualScreen == 12) {
 21590  005794  0E0C               	movlw	12
 21591  005796  0101               	movlb	1	; () banked
 21592  005798  19BD               	xorwf	_actualScreen& (0+255),w,b
 21593  00579A  A4D8               	btfss	status,2,c
 21594  00579C  D00C               	goto	i1l8539
 21595                           
 21596                           ; BSR set to: 1
 21597                           ;DisplayProtocol.h: 242: chanValSection++;
 21598  00579E  0101               	movlb	1	; () banked
 21599  0057A0  2B9C               	incf	_chanValSection& (0+255),f,b
 21600                           
 21601                           ; BSR set to: 1
 21602                           ;DisplayProtocol.h: 243: if(chanValSection > 5)
 21603  0057A2  0101               	movlb	1	; () banked
 21604  0057A4  519C               	movf	_chanValSection& (0+255),w,b
 21605  0057A6  0A80               	xorlw	128
 21606  0057A8  0F7A               	addlw	-134
 21607  0057AA  A0D8               	btfss	status,0,c
 21608  0057AC  0012               	return	
 21609                           
 21610                           ; BSR set to: 1
 21611                           ;DisplayProtocol.h: 244: chanValSection = 0;
 21612  0057AE  0E00               	movlw	0
 21613  0057B0  0101               	movlb	1	; () banked
 21614  0057B2  6F9C               	movwf	_chanValSection& (0+255),b
 21615                           
 21616                           ; BSR set to: 1
 21617                           ;DisplayProtocol.h: 245: }else if(actualScreen == 13) {
 21618  0057B4  0012               	return	
 21619  0057B6                     i1l8539:
 21620                           
 21621                           ; BSR set to: 1
 21622  0057B6  0E0D               	movlw	13
 21623  0057B8  0101               	movlb	1	; () banked
 21624  0057BA  19BD               	xorwf	_actualScreen& (0+255),w,b
 21625  0057BC  A4D8               	btfss	status,2,c
 21626  0057BE  0012               	return	
 21627                           
 21628                           ; BSR set to: 1
 21629                           ;DisplayProtocol.h: 246: initProtocoll(1);
 21630  0057C0  0E01               	movlw	1
 21631  0057C2  EC68  F037         	call	i1_initProtocoll
 21632  0057C6  0012               	return	
 21633  0057C8                     __end_ofi1_pressRETRO:
 21634                           	opt stack 0
 21635                           pclatu	equ	0xFFB
 21636                           pclath	equ	0xFFA
 21637                           tblptru	equ	0xFF8
 21638                           tblptrh	equ	0xFF7
 21639                           tblptrl	equ	0xFF6
 21640                           tablat	equ	0xFF5
 21641                           prodh	equ	0xFF4
 21642                           prodl	equ	0xFF3
 21643                           intcon	equ	0xFF2
 21644                           postinc0	equ	0xFEE
 21645                           fsr0h	equ	0xFEA
 21646                           fsr0l	equ	0xFE9
 21647                           wreg	equ	0xFE8
 21648                           postdec1	equ	0xFE5
 21649                           fsr1h	equ	0xFE2
 21650                           fsr1l	equ	0xFE1
 21651                           bsr	equ	0xFE0
 21652                           indf2	equ	0xFDF
 21653                           postinc2	equ	0xFDE
 21654                           postdec2	equ	0xFDD
 21655                           plusw2	equ	0xFDB
 21656                           fsr2h	equ	0xFDA
 21657                           fsr2l	equ	0xFD9
 21658                           status	equ	0xFD8
 21659                           
 21660 ;; *************** function i1_pressENTER *****************
 21661 ;; Defined at:
 21662 ;;		line 288 in file "source/DisplayProtocol.h"
 21663 ;; Parameters:    Size  Location     Type
 21664 ;;		None
 21665 ;; Auto vars:     Size  Location     Type
 21666 ;;		None
 21667 ;; Return value:  Size  Location     Type
 21668 ;;                  1    wreg      void 
 21669 ;; Registers used:
 21670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21671 ;; Tracked objects:
 21672 ;;		On entry : 0/0
 21673 ;;		On exit  : 0/0
 21674 ;;		Unchanged: 0/0
 21675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21676 ;;      Params:         0       0       0       0       0       0       0
 21677 ;;      Locals:         0       0       0       0       0       0       0
 21678 ;;      Temps:          0       0       0       0       0       0       0
 21679 ;;      Totals:         0       0       0       0       0       0       0
 21680 ;;Total ram usage:        0 bytes
 21681 ;; Hardware stack levels used:    1
 21682 ;; Hardware stack levels required when called:    9
 21683 ;; This function calls:
 21684 ;;		i1___ftmul
 21685 ;;		i1_checkPass
 21686 ;;		i1_confirmEdition
 21687 ;;		i1_desintegrator
 21688 ;;		i1_initProtocoll
 21689 ;;		i1_setPWM2duty
 21690 ;;		i1_stopProcess
 21691 ;; This function is called by:
 21692 ;;		_UARTint
 21693 ;; This function uses a non-reentrant model
 21694 ;;
 21695                           
 21696                           	psect	text95
 21697  001568                     __ptext95:
 21698                           	opt stack 0
 21699  001568                     i1_pressENTER:
 21700                           	opt stack 9
 21701                           
 21702                           ;DisplayProtocol.h: 289: if (actualScreen == 1) {
 21703                           
 21704                           ;incstack = 0
 21705  001568  0101               	movlb	1	; () banked
 21706  00156A  05BD               	decf	_actualScreen& (0+255),w,b
 21707  00156C  A4D8               	btfss	status,2,c
 21708  00156E  D018               	goto	i1l8599
 21709                           
 21710                           ; BSR set to: 1
 21711                           ;DisplayProtocol.h: 290: passSection++;
 21712  001570  0101               	movlb	1	; () banked
 21713  001572  2BBB               	incf	_passSection& (0+255),f,b
 21714                           
 21715                           ; BSR set to: 1
 21716                           ;DisplayProtocol.h: 291: if (passSection > 3) {
 21717  001574  0101               	movlb	1	; () banked
 21718  001576  51BB               	movf	_passSection& (0+255),w,b
 21719  001578  0A80               	xorlw	128
 21720  00157A  0F7C               	addlw	-132
 21721  00157C  A0D8               	btfss	status,0,c
 21722  00157E  0012               	return	
 21723                           
 21724                           ; BSR set to: 1
 21725                           ;DisplayProtocol.h: 292: passSection = 0;
 21726  001580  0E00               	movlw	0
 21727  001582  0101               	movlb	1	; () banked
 21728  001584  6FBB               	movwf	_passSection& (0+255),b
 21729                           
 21730                           ; BSR set to: 1
 21731                           ;DisplayProtocol.h: 293: if (checkPass())
 21732  001586  EC85  F031         	call	i1_checkPass	;wreg free
 21733  00158A  0900               	iorlw	0
 21734  00158C  B4D8               	btfsc	status,2,c
 21735  00158E  D004               	goto	i1l8597
 21736                           
 21737                           ;DisplayProtocol.h: 294: actualScreen = 8;
 21738  001590  0E08               	movlw	8
 21739  001592  0101               	movlb	1	; () banked
 21740  001594  6FBD               	movwf	_actualScreen& (0+255),b
 21741  001596  0012               	return	
 21742  001598                     i1l8597:
 21743                           
 21744                           ;DisplayProtocol.h: 295: else
 21745                           ;DisplayProtocol.h: 296: actualScreen = 7;
 21746  001598  0E07               	movlw	7
 21747  00159A  0101               	movlb	1	; () banked
 21748  00159C  6FBD               	movwf	_actualScreen& (0+255),b
 21749                           
 21750                           ; BSR set to: 1
 21751                           ;DisplayProtocol.h: 297: }
 21752                           ;DisplayProtocol.h: 298: }else if(actualScreen == 4) {
 21753                           
 21754                           ; BSR set to: 1
 21755  00159E  0012               	return	
 21756  0015A0                     i1l8599:
 21757                           
 21758                           ; BSR set to: 1
 21759  0015A0  0E04               	movlw	4
 21760  0015A2  0101               	movlb	1	; () banked
 21761  0015A4  19BD               	xorwf	_actualScreen& (0+255),w,b
 21762  0015A6  B4D8               	btfsc	status,2,c
 21763  0015A8  D038               	goto	i1l8623
 21764  0015AA  D046               	goto	i1l8625
 21765  0015AC                     i1l725:
 21766                           
 21767                           ; BSR set to: 1
 21768                           ;DisplayProtocol.h: 301: tempLastScreen = actualScreen;
 21769  0015AC  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 21770                           
 21771                           ; BSR set to: 1
 21772                           ;DisplayProtocol.h: 302: if(processStarted) {
 21773  0015B0  0100               	movlb	0	; () banked
 21774  0015B2  51C0               	movf	_processStarted& (0+255),w,b
 21775  0015B4  B4D8               	btfsc	status,2,c
 21776  0015B6  D007               	goto	i1l8607
 21777                           
 21778                           ; BSR set to: 0
 21779                           ;DisplayProtocol.h: 303: actualScreen = 3;
 21780  0015B8  0E03               	movlw	3
 21781  0015BA  0101               	movlb	1	; () banked
 21782  0015BC  6FBD               	movwf	_actualScreen& (0+255),b
 21783                           
 21784                           ;DisplayProtocol.h: 304: selSN = 0;
 21785  0015BE  0E00               	movlw	0
 21786  0015C0  0101               	movlb	1	; () banked
 21787  0015C2  6FBA               	movwf	_selSN& (0+255),b
 21788                           
 21789                           ;DisplayProtocol.h: 305: }else {
 21790  0015C4  0012               	return	
 21791  0015C6                     i1l8607:
 21792                           
 21793                           ;DisplayProtocol.h: 306: actualScreen = 2;
 21794  0015C6  0E02               	movlw	2
 21795  0015C8  0101               	movlb	1	; () banked
 21796  0015CA  6FBD               	movwf	_actualScreen& (0+255),b
 21797                           
 21798                           ;DisplayProtocol.h: 307: selSN = 1;
 21799  0015CC  0E01               	movlw	1
 21800  0015CE  0101               	movlb	1	; () banked
 21801  0015D0  6FBA               	movwf	_selSN& (0+255),b
 21802                           
 21803                           ; BSR set to: 1
 21804                           ;DisplayProtocol.h: 308: }
 21805                           ;DisplayProtocol.h: 309: break;
 21806  0015D2  0012               	return	
 21807  0015D4                     i1l729:
 21808                           
 21809                           ; BSR set to: 1
 21810                           ;DisplayProtocol.h: 311: chanValf = kgXcorte;
 21811  0015D4  C198  F1B1         	movff	_kgXcorte,_chanValf
 21812  0015D8  C199  F1B2         	movff	_kgXcorte+1,_chanValf+1
 21813  0015DC  C19A  F1B3         	movff	_kgXcorte+2,_chanValf+2
 21814                           
 21815                           ; BSR set to: 1
 21816                           ;DisplayProtocol.h: 312: desintegrator();
 21817  0015E0  ECCF  F019         	call	i1_desintegrator	;wreg free
 21818                           
 21819                           ;DisplayProtocol.h: 313: actualScreen = 5;
 21820  0015E4  0E05               	movlw	5
 21821  0015E6  0101               	movlb	1	; () banked
 21822  0015E8  6FBD               	movwf	_actualScreen& (0+255),b
 21823                           
 21824                           ;DisplayProtocol.h: 314: break;
 21825  0015EA  0012               	return	
 21826  0015EC                     i1l730:
 21827                           
 21828                           ; BSR set to: 1
 21829                           ;DisplayProtocol.h: 316: tempLastScreen = actualScreen;
 21830  0015EC  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 21831                           
 21832                           ;DisplayProtocol.h: 317: chanVals = numCortes;
 21833  0015F0  C0D2  F1B6         	movff	_numCortes,_chanVals
 21834  0015F4  C0D3  F1B7         	movff	_numCortes+1,_chanVals+1
 21835                           
 21836                           ; BSR set to: 1
 21837                           ;DisplayProtocol.h: 318: actualScreen = 5;
 21838  0015F8  0E05               	movlw	5
 21839  0015FA  0101               	movlb	1	; () banked
 21840  0015FC  6FBD               	movwf	_actualScreen& (0+255),b
 21841                           
 21842                           ;DisplayProtocol.h: 319: break;
 21843  0015FE  0012               	return	
 21844  001600                     i1l8615:
 21845                           
 21846                           ; BSR set to: 1
 21847                           ;DisplayProtocol.h: 321: if(!processStarted) {
 21848  001600  0100               	movlb	0	; () banked
 21849  001602  51C0               	movf	_processStarted& (0+255),w,b
 21850  001604  A4D8               	btfss	status,2,c
 21851  001606  0012               	return	
 21852                           
 21853                           ; BSR set to: 0
 21854                           ;DisplayProtocol.h: 322: tempLastScreen = actualScreen;
 21855  001608  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 21856                           
 21857                           ; BSR set to: 0
 21858                           ;DisplayProtocol.h: 323: selSN = 1;
 21859  00160C  0E01               	movlw	1
 21860  00160E  0101               	movlb	1	; () banked
 21861  001610  6FBA               	movwf	_selSN& (0+255),b
 21862                           
 21863                           ;DisplayProtocol.h: 324: actualScreen = 11;
 21864  001612  0E0B               	movlw	11
 21865  001614  0101               	movlb	1	; () banked
 21866  001616  6FBD               	movwf	_actualScreen& (0+255),b
 21867                           
 21868                           ; BSR set to: 1
 21869                           ;DisplayProtocol.h: 327: }
 21870                           ;DisplayProtocol.h: 328: }
 21871                           
 21872                           ; BSR set to: 1
 21873                           ;DisplayProtocol.h: 325: }
 21874                           ;DisplayProtocol.h: 326: break;
 21875  001618  0012               	return	
 21876  00161A                     i1l8623:
 21877                           
 21878                           ; BSR set to: 1
 21879  00161A  0101               	movlb	1	; () banked
 21880  00161C  51BC               	movf	_menuSection& (0+255),w,b
 21881                           
 21882                           ; Switch size 1, requested type "space"
 21883                           ; Number of cases is 4, Range of values is 0 to 3
 21884                           ; switch strategies available:
 21885                           ; Name         Instructions Cycles
 21886                           ; simple_byte           13     7 (average)
 21887                           ;	Chosen strategy is simple_byte
 21888  00161E  0A00               	xorlw	0	; case 0
 21889  001620  B4D8               	btfsc	status,2,c
 21890  001622  D7C4               	goto	i1l725
 21891  001624  0A01               	xorlw	1	; case 1
 21892  001626  B4D8               	btfsc	status,2,c
 21893  001628  D7D5               	goto	i1l729
 21894  00162A  0A03               	xorlw	3	; case 2
 21895  00162C  B4D8               	btfsc	status,2,c
 21896  00162E  D7DE               	goto	i1l730
 21897  001630  0A01               	xorlw	1	; case 3
 21898  001632  A4D8               	btfss	status,2,c
 21899                           
 21900                           ; BSR set to: 1
 21901                           ;DisplayProtocol.h: 329: }else if(actualScreen == 7)
 21902  001634  0012               	return	
 21903  001636  D7E4               	goto	i1l8615
 21904  001638                     i1l8625:
 21905                           
 21906                           ; BSR set to: 1
 21907  001638  0E07               	movlw	7
 21908  00163A  0101               	movlb	1	; () banked
 21909  00163C  19BD               	xorwf	_actualScreen& (0+255),w,b
 21910  00163E  A4D8               	btfss	status,2,c
 21911  001640  D004               	goto	i1l8629
 21912                           
 21913                           ; BSR set to: 1
 21914                           ;DisplayProtocol.h: 330: actualScreen = 1;
 21915  001642  0E01               	movlw	1
 21916  001644  0101               	movlb	1	; () banked
 21917  001646  6FBD               	movwf	_actualScreen& (0+255),b
 21918  001648  0012               	return	
 21919  00164A                     i1l8629:
 21920                           
 21921                           ; BSR set to: 1
 21922                           ;DisplayProtocol.h: 331: else if(actualScreen == 6) {
 21923  00164A  0E06               	movlw	6
 21924  00164C  0101               	movlb	1	; () banked
 21925  00164E  19BD               	xorwf	_actualScreen& (0+255),w,b
 21926  001650  B4D8               	btfsc	status,2,c
 21927  001652  0012               	return	
 21928                           
 21929                           ; BSR set to: 1
 21930                           
 21931                           ; BSR set to: 1
 21932                           
 21933                           ; BSR set to: 1
 21934                           ;DisplayProtocol.h: 333: }else if(actualScreen == 5) {
 21935  001654  0E05               	movlw	5
 21936  001656  0101               	movlb	1	; () banked
 21937  001658  19BD               	xorwf	_actualScreen& (0+255),w,b
 21938  00165A  A4D8               	btfss	status,2,c
 21939  00165C  D018               	goto	i1l8645
 21940                           
 21941                           ; BSR set to: 1
 21942                           ;DisplayProtocol.h: 334: if(menuSection != 2) {
 21943  00165E  0E02               	movlw	2
 21944  001660  0101               	movlb	1	; () banked
 21945  001662  19BC               	xorwf	_menuSection& (0+255),w,b
 21946  001664  B4D8               	btfsc	status,2,c
 21947  001666  D009               	goto	i1l8643
 21948                           
 21949                           ; BSR set to: 1
 21950                           ;DisplayProtocol.h: 335: chanValSection--;
 21951  001668  0101               	movlb	1	; () banked
 21952  00166A  079C               	decf	_chanValSection& (0+255),f,b
 21953                           
 21954                           ; BSR set to: 1
 21955                           ;DisplayProtocol.h: 336: if(chanValSection < 0)
 21956  00166C  0101               	movlb	1	; () banked
 21957  00166E  AF9C               	btfss	_chanValSection& (0+255),7,b
 21958  001670  0012               	return	
 21959                           
 21960                           ; BSR set to: 1
 21961                           ;DisplayProtocol.h: 337: chanValSection = 5;
 21962  001672  0E05               	movlw	5
 21963  001674  0101               	movlb	1	; () banked
 21964  001676  6F9C               	movwf	_chanValSection& (0+255),b
 21965                           
 21966                           ; BSR set to: 1
 21967                           ;DisplayProtocol.h: 338: }else
 21968  001678  0012               	return	
 21969  00167A                     i1l8643:
 21970                           
 21971                           ; BSR set to: 1
 21972                           ;DisplayProtocol.h: 339: confirmEdition(!processStarted);
 21973  00167A  0100               	movlb	0	; () banked
 21974  00167C  51C0               	movf	_processStarted& (0+255),w,b
 21975  00167E  A4D8               	btfss	status,2,c
 21976  001680  D002               	goto	i1u1217_20
 21977  001682  0E01               	movlw	1
 21978  001684  D001               	goto	i1u1218_20
 21979  001686                     i1u1217_20:
 21980  001686  0E00               	movlw	0
 21981  001688                     i1u1218_20:
 21982  001688  ECFF  F02C         	call	i1_confirmEdition
 21983                           
 21984                           ;DisplayProtocol.h: 340: }else if(actualScreen == 2) {
 21985  00168C  0012               	return	
 21986  00168E                     i1l8645:
 21987  00168E  0E02               	movlw	2
 21988  001690  0101               	movlb	1	; () banked
 21989  001692  19BD               	xorwf	_actualScreen& (0+255),w,b
 21990  001694  A4D8               	btfss	status,2,c
 21991  001696  D018               	goto	i1l8655
 21992                           
 21993                           ; BSR set to: 1
 21994                           ;DisplayProtocol.h: 341: initProtocoll(!selSN);
 21995  001698  0101               	movlb	1	; () banked
 21996  00169A  51BA               	movf	_selSN& (0+255),w,b
 21997  00169C  A4D8               	btfss	status,2,c
 21998  00169E  D002               	goto	i1u1220_20
 21999  0016A0  0E01               	movlw	1
 22000  0016A2  D001               	goto	i1u1221_20
 22001  0016A4                     i1u1220_20:
 22002  0016A4  0E00               	movlw	0
 22003  0016A6                     i1u1221_20:
 22004  0016A6  EC68  F037         	call	i1_initProtocoll
 22005                           
 22006                           ;DisplayProtocol.h: 342: if(!selSN) {
 22007  0016AA  0101               	movlb	1	; () banked
 22008  0016AC  51BA               	movf	_selSN& (0+255),w,b
 22009  0016AE  A4D8               	btfss	status,2,c
 22010  0016B0  D008               	goto	i1l744
 22011                           
 22012                           ; BSR set to: 1
 22013                           ;DisplayProtocol.h: 343: actualScreen = 14;
 22014  0016B2  0E0E               	movlw	14
 22015  0016B4  0101               	movlb	1	; () banked
 22016  0016B6  6FBD               	movwf	_actualScreen& (0+255),b
 22017                           
 22018                           ;DisplayProtocol.h: 344: ready2Cut = 1;
 22019  0016B8  0E01               	movlw	1
 22020  0016BA  0100               	movlb	0	; () banked
 22021  0016BC  6FBF               	movwf	_ready2Cut& (0+255),b
 22022                           
 22023                           ; BSR set to: 0
 22024                           ;DisplayProtocol.h: 345: LATCbits.LATC4 = 1;
 22025  0016BE  888B               	bsf	3979,4,c	;volatile
 22026                           
 22027                           ;DisplayProtocol.h: 347: }else
 22028  0016C0  0012               	return	
 22029  0016C2                     i1l744:
 22030                           
 22031                           ; BSR set to: 1
 22032                           ;DisplayProtocol.h: 348: actualScreen = tempLastScreen;
 22033  0016C2  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 22034                           
 22035                           ; BSR set to: 1
 22036                           ;DisplayProtocol.h: 349: }else if(actualScreen == 14) {
 22037  0016C6  0012               	return	
 22038  0016C8                     i1l8655:
 22039                           
 22040                           ; BSR set to: 1
 22041  0016C8  0E0E               	movlw	14
 22042  0016CA  0101               	movlb	1	; () banked
 22043  0016CC  19BD               	xorwf	_actualScreen& (0+255),w,b
 22044  0016CE  A4D8               	btfss	status,2,c
 22045  0016D0  D00A               	goto	i1l8661
 22046                           
 22047                           ; BSR set to: 1
 22048                           ;DisplayProtocol.h: 351: setPWM2duty(400);
 22049  0016D2  0E01               	movlw	1
 22050  0016D4  0100               	movlb	0	; () banked
 22051  0016D6  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 22052  0016D8  0E90               	movlw	144
 22053  0016DA  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 22054  0016DC  EC8A  F02F         	call	i1_setPWM2duty	;wreg free
 22055                           
 22056                           ;DisplayProtocol.h: 352: actualScreen = tempLastScreen;
 22057  0016E0  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 22058                           
 22059                           ;DisplayProtocol.h: 353: }else if(actualScreen == 3) {
 22060  0016E4  0012               	return	
 22061  0016E6                     i1l8661:
 22062  0016E6  0E03               	movlw	3
 22063  0016E8  0101               	movlb	1	; () banked
 22064  0016EA  19BD               	xorwf	_actualScreen& (0+255),w,b
 22065  0016EC  A4D8               	btfss	status,2,c
 22066  0016EE  D044               	goto	i1l8683
 22067                           
 22068                           ; BSR set to: 1
 22069                           ;DisplayProtocol.h: 354: actualScreen = tempLastScreen;
 22070  0016F0  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 22071                           
 22072                           ; BSR set to: 1
 22073                           ;DisplayProtocol.h: 355: if(!selSN) {
 22074  0016F4  0101               	movlb	1	; () banked
 22075  0016F6  51BA               	movf	_selSN& (0+255),w,b
 22076  0016F8  A4D8               	btfss	status,2,c
 22077  0016FA  0012               	return	
 22078                           
 22079                           ; BSR set to: 1
 22080                           ;DisplayProtocol.h: 356: processState = 0;
 22081  0016FC  0E00               	movlw	0
 22082  0016FE  0100               	movlb	0	; () banked
 22083  001700  6FB3               	movwf	(_processState+1)& (0+255),b
 22084  001702  0E00               	movlw	0
 22085  001704  6FB2               	movwf	_processState& (0+255),b
 22086                           
 22087                           ; BSR set to: 0
 22088                           ;DisplayProtocol.h: 357: stopProcess();
 22089  001706  EC43  F039         	call	i1_stopProcess	;wreg free
 22090                           
 22091                           ;DisplayProtocol.h: 358: if(tempLastScreen == 14)
 22092  00170A  0E0E               	movlw	14
 22093  00170C  0100               	movlb	0	; () banked
 22094  00170E  19BA               	xorwf	_tempLastScreen& (0+255),w,b
 22095  001710  A4D8               	btfss	status,2,c
 22096  001712  D003               	goto	i1l751
 22097                           
 22098                           ; BSR set to: 0
 22099                           ;DisplayProtocol.h: 359: actualScreen = 0;
 22100  001714  0E00               	movlw	0
 22101  001716  0101               	movlb	1	; () banked
 22102  001718  6FBD               	movwf	_actualScreen& (0+255),b
 22103  00171A                     i1l751:
 22104                           
 22105                           ;DisplayProtocol.h: 360: if(calibMode) {
 22106  00171A  0100               	movlb	0	; () banked
 22107  00171C  51BE               	movf	_calibMode& (0+255),w,b
 22108  00171E  B4D8               	btfsc	status,2,c
 22109  001720  D027               	goto	i1l752
 22110                           
 22111                           ; BSR set to: 0
 22112                           ;DisplayProtocol.h: 361: numCortes = tempNumCortes;
 22113  001722  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 22114  001726  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 22115                           
 22116                           ;DisplayProtocol.h: 362: tiXcorte = temptiXcorte;
 22117  00172A  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 22118  00172E  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 22119  001732  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 22120                           
 22121                           ; BSR set to: 0
 22122                           ;DisplayProtocol.h: 363: timsXcorte = (float)tiXcorte * 1000;
 22123  001736  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 22124  00173A  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 22125  00173E  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 22126  001742  0E00               	movlw	0
 22127  001744  0100               	movlb	0	; () banked
 22128  001746  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 22129  001748  0E7A               	movlw	122
 22130  00174A  0100               	movlb	0	; () banked
 22131  00174C  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 22132  00174E  0E44               	movlw	68
 22133  001750  0100               	movlb	0	; () banked
 22134  001752  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 22135  001754  ECE4  F01C         	call	i1___ftmul	;wreg free
 22136  001758  C068  F055         	movff	?i1___ftmul,_timsXcorte
 22137  00175C  C069  F056         	movff	?i1___ftmul+1,_timsXcorte+1
 22138  001760  C06A  F057         	movff	?i1___ftmul+2,_timsXcorte+2
 22139                           
 22140                           ;DisplayProtocol.h: 364: calibMode = 0;
 22141  001764  0E00               	movlw	0
 22142  001766  0100               	movlb	0	; () banked
 22143  001768  6FBE               	movwf	_calibMode& (0+255),b
 22144                           
 22145                           ; BSR set to: 0
 22146                           ;DisplayProtocol.h: 365: actualScreen = 4;
 22147  00176A  0E04               	movlw	4
 22148  00176C  0101               	movlb	1	; () banked
 22149  00176E  6FBD               	movwf	_actualScreen& (0+255),b
 22150  001770                     i1l752:
 22151                           
 22152                           ;DisplayProtocol.h: 366: }
 22153                           ;DisplayProtocol.h: 367: initProtocoll(1);
 22154  001770  0E01               	movlw	1
 22155  001772  EC68  F037         	call	i1_initProtocoll
 22156                           
 22157                           ;DisplayProtocol.h: 368: }
 22158                           ;DisplayProtocol.h: 369: }else if(actualScreen == 10) {
 22159  001776  0012               	return	
 22160  001778                     i1l8683:
 22161  001778  0E0A               	movlw	10
 22162  00177A  0101               	movlb	1	; () banked
 22163  00177C  19BD               	xorwf	_actualScreen& (0+255),w,b
 22164  00177E  A4D8               	btfss	status,2,c
 22165  001780  D00B               	goto	i1l8689
 22166                           
 22167                           ; BSR set to: 1
 22168                           ;DisplayProtocol.h: 370: if(!selSN)
 22169  001782  0101               	movlb	1	; () banked
 22170  001784  51BA               	movf	_selSN& (0+255),w,b
 22171  001786  A4D8               	btfss	status,2,c
 22172  001788  D004               	goto	i1l755
 22173                           
 22174                           ; BSR set to: 1
 22175                           ;DisplayProtocol.h: 371: confirmEdition(1);
 22176  00178A  0E01               	movlw	1
 22177  00178C  ECFF  F02C         	call	i1_confirmEdition
 22178  001790  0012               	return	
 22179  001792                     i1l755:
 22180                           
 22181                           ; BSR set to: 1
 22182                           ;DisplayProtocol.h: 372: else
 22183                           ;DisplayProtocol.h: 373: actualScreen = tempLastScreen;
 22184  001792  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 22185                           
 22186                           ; BSR set to: 1
 22187                           ;DisplayProtocol.h: 374: }else if(actualScreen == 8)
 22188  001796  0012               	return	
 22189  001798                     i1l8689:
 22190                           
 22191                           ; BSR set to: 1
 22192  001798  0E08               	movlw	8
 22193  00179A  0101               	movlb	1	; () banked
 22194  00179C  19BD               	xorwf	_actualScreen& (0+255),w,b
 22195  00179E  A4D8               	btfss	status,2,c
 22196  0017A0  D004               	goto	i1l8693
 22197                           
 22198                           ; BSR set to: 1
 22199                           ;DisplayProtocol.h: 375: actualScreen = 4;
 22200  0017A2  0E04               	movlw	4
 22201  0017A4  0101               	movlb	1	; () banked
 22202  0017A6  6FBD               	movwf	_actualScreen& (0+255),b
 22203  0017A8  0012               	return	
 22204  0017AA                     i1l8693:
 22205                           
 22206                           ; BSR set to: 1
 22207                           ;DisplayProtocol.h: 376: else if(actualScreen == 9)
 22208  0017AA  0E09               	movlw	9
 22209  0017AC  0101               	movlb	1	; () banked
 22210  0017AE  19BD               	xorwf	_actualScreen& (0+255),w,b
 22211  0017B0  A4D8               	btfss	status,2,c
 22212  0017B2  D004               	goto	i1l8697
 22213                           
 22214                           ; BSR set to: 1
 22215                           ;DisplayProtocol.h: 377: actualScreen = 0;
 22216  0017B4  0E00               	movlw	0
 22217  0017B6  0101               	movlb	1	; () banked
 22218  0017B8  6FBD               	movwf	_actualScreen& (0+255),b
 22219  0017BA  0012               	return	
 22220  0017BC                     i1l8697:
 22221                           
 22222                           ; BSR set to: 1
 22223                           ;DisplayProtocol.h: 378: else if(actualScreen == 11) {
 22224  0017BC  0E0B               	movlw	11
 22225  0017BE  0101               	movlb	1	; () banked
 22226  0017C0  19BD               	xorwf	_actualScreen& (0+255),w,b
 22227  0017C2  A4D8               	btfss	status,2,c
 22228  0017C4  D05D               	goto	i1l8737
 22229                           
 22230                           ; BSR set to: 1
 22231                           ;DisplayProtocol.h: 379: initProtocoll(!selSN);
 22232  0017C6  0101               	movlb	1	; () banked
 22233  0017C8  51BA               	movf	_selSN& (0+255),w,b
 22234  0017CA  A4D8               	btfss	status,2,c
 22235  0017CC  D002               	goto	i1u1233_20
 22236  0017CE  0E01               	movlw	1
 22237  0017D0  D001               	goto	i1u1234_20
 22238  0017D2                     i1u1233_20:
 22239  0017D2  0E00               	movlw	0
 22240  0017D4                     i1u1234_20:
 22241  0017D4  EC68  F037         	call	i1_initProtocoll
 22242                           
 22243                           ;DisplayProtocol.h: 380: if(!selSN) {
 22244  0017D8  0101               	movlb	1	; () banked
 22245  0017DA  51BA               	movf	_selSN& (0+255),w,b
 22246  0017DC  A4D8               	btfss	status,2,c
 22247  0017DE  D04C               	goto	i1l8735
 22248                           
 22249                           ; BSR set to: 1
 22250                           ;DisplayProtocol.h: 381: actualScreen = 6;
 22251  0017E0  0E06               	movlw	6
 22252  0017E2  0101               	movlb	1	; () banked
 22253  0017E4  6FBD               	movwf	_actualScreen& (0+255),b
 22254                           
 22255                           ; BSR set to: 1
 22256                           ;DisplayProtocol.h: 382: tempLastScreen = actualScreen;
 22257  0017E6  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 22258                           
 22259                           ;DisplayProtocol.h: 383: chanValf = 0;
 22260  0017EA  0E00               	movlw	0
 22261  0017EC  0101               	movlb	1	; () banked
 22262  0017EE  6FB1               	movwf	_chanValf& (0+255),b
 22263  0017F0  0E00               	movlw	0
 22264  0017F2  0101               	movlb	1	; () banked
 22265  0017F4  6FB2               	movwf	(_chanValf+1)& (0+255),b
 22266  0017F6  0E00               	movlw	0
 22267  0017F8  0101               	movlb	1	; () banked
 22268  0017FA  6FB3               	movwf	(_chanValf+2)& (0+255),b
 22269                           
 22270                           ; BSR set to: 1
 22271                           ;DisplayProtocol.h: 384: desintegrator();
 22272  0017FC  ECCF  F019         	call	i1_desintegrator	;wreg free
 22273                           
 22274                           ;DisplayProtocol.h: 385: temptiXcorte = tiXcorte;
 22275  001800  C195  F0CD         	movff	_tiXcorte,_temptiXcorte
 22276  001804  C196  F0CE         	movff	_tiXcorte+1,_temptiXcorte+1
 22277  001808  C197  F0CF         	movff	_tiXcorte+2,_temptiXcorte+2
 22278                           
 22279                           ;DisplayProtocol.h: 386: tiXcorte = 5.0f;
 22280  00180C  0E00               	movlw	0
 22281  00180E  0101               	movlb	1	; () banked
 22282  001810  6F95               	movwf	_tiXcorte& (0+255),b
 22283  001812  0EA0               	movlw	160
 22284  001814  0101               	movlb	1	; () banked
 22285  001816  6F96               	movwf	(_tiXcorte+1)& (0+255),b
 22286  001818  0E40               	movlw	64
 22287  00181A  0101               	movlb	1	; () banked
 22288  00181C  6F97               	movwf	(_tiXcorte+2)& (0+255),b
 22289                           
 22290                           ; BSR set to: 1
 22291                           ;DisplayProtocol.h: 387: timsXcorte = 5000.0f;
 22292  00181E  0E40               	movlw	64
 22293  001820  6E55               	movwf	_timsXcorte,c
 22294  001822  0E9C               	movlw	156
 22295  001824  6E56               	movwf	_timsXcorte+1,c
 22296  001826  0E45               	movlw	69
 22297  001828  6E57               	movwf	_timsXcorte+2,c
 22298                           
 22299                           ; BSR set to: 1
 22300                           ;DisplayProtocol.h: 388: tempNumCortes = numCortes;
 22301  00182A  C0D2  F0D0         	movff	_numCortes,_tempNumCortes
 22302  00182E  C0D3  F0D1         	movff	_numCortes+1,_tempNumCortes+1
 22303                           
 22304                           ; BSR set to: 1
 22305                           ;DisplayProtocol.h: 389: numCortes = 1;
 22306  001832  0E00               	movlw	0
 22307  001834  0100               	movlb	0	; () banked
 22308  001836  6FD3               	movwf	(_numCortes+1)& (0+255),b
 22309  001838  0E01               	movlw	1
 22310  00183A  6FD2               	movwf	_numCortes& (0+255),b
 22311                           
 22312                           ; BSR set to: 0
 22313                           ;DisplayProtocol.h: 390: processState = 0;
 22314  00183C  0E00               	movlw	0
 22315  00183E  0100               	movlb	0	; () banked
 22316  001840  6FB3               	movwf	(_processState+1)& (0+255),b
 22317  001842  0E00               	movlw	0
 22318  001844  6FB2               	movwf	_processState& (0+255),b
 22319                           
 22320                           ; BSR set to: 0
 22321                           ;DisplayProtocol.h: 391: processTimer = 0;
 22322  001846  0E00               	movlw	0
 22323  001848  6E3B               	movwf	_processTimer,c
 22324  00184A  0E00               	movlw	0
 22325  00184C  6E3C               	movwf	_processTimer+1,c
 22326  00184E  0E00               	movlw	0
 22327  001850  6E3D               	movwf	_processTimer+2,c
 22328  001852  0E00               	movlw	0
 22329  001854  6E3E               	movwf	_processTimer+3,c
 22330                           
 22331                           ; BSR set to: 0
 22332                           ;DisplayProtocol.h: 392: calibLevel = 0;
 22333  001856  0E00               	movlw	0
 22334  001858  0101               	movlb	1	; () banked
 22335  00185A  6FB8               	movwf	_calibLevel& (0+255),b
 22336                           
 22337                           ; BSR set to: 1
 22338                           ;DisplayProtocol.h: 393: initProtocoll(1);
 22339  00185C  0E01               	movlw	1
 22340  00185E  EC68  F037         	call	i1_initProtocoll
 22341                           
 22342                           ;DisplayProtocol.h: 394: LATCbits.LATC4 = 1;
 22343  001862  888B               	bsf	3979,4,c	;volatile
 22344                           
 22345                           ;DisplayProtocol.h: 395: ready2Cut = 1;
 22346  001864  0E01               	movlw	1
 22347  001866  0100               	movlb	0	; () banked
 22348  001868  6FBF               	movwf	_ready2Cut& (0+255),b
 22349                           
 22350                           ; BSR set to: 0
 22351                           ;DisplayProtocol.h: 396: actualScreen = 14;
 22352  00186A  0E0E               	movlw	14
 22353  00186C  0101               	movlb	1	; () banked
 22354  00186E  6FBD               	movwf	_actualScreen& (0+255),b
 22355                           
 22356                           ; BSR set to: 1
 22357                           ;DisplayProtocol.h: 397: calibMode = 1;
 22358  001870  0E01               	movlw	1
 22359  001872  0100               	movlb	0	; () banked
 22360  001874  6FBE               	movwf	_calibMode& (0+255),b
 22361                           
 22362                           ;DisplayProtocol.h: 398: }else
 22363  001876  0012               	return	
 22364  001878                     i1l8735:
 22365                           
 22366                           ;DisplayProtocol.h: 399: actualScreen = 4;
 22367  001878  0E04               	movlw	4
 22368  00187A  0101               	movlb	1	; () banked
 22369  00187C  6FBD               	movwf	_actualScreen& (0+255),b
 22370                           
 22371                           ; BSR set to: 1
 22372                           ;DisplayProtocol.h: 400: }else if(actualScreen == 12) {
 22373  00187E  0012               	return	
 22374  001880                     i1l8737:
 22375                           
 22376                           ; BSR set to: 1
 22377  001880  0E0C               	movlw	12
 22378  001882  0101               	movlb	1	; () banked
 22379  001884  19BD               	xorwf	_actualScreen& (0+255),w,b
 22380  001886  A4D8               	btfss	status,2,c
 22381  001888  D009               	goto	i1l8745
 22382                           
 22383                           ; BSR set to: 1
 22384                           ;DisplayProtocol.h: 401: chanValSection--;
 22385  00188A  0101               	movlb	1	; () banked
 22386  00188C  079C               	decf	_chanValSection& (0+255),f,b
 22387                           
 22388                           ; BSR set to: 1
 22389                           ;DisplayProtocol.h: 402: if(chanValSection < 0)
 22390  00188E  0101               	movlb	1	; () banked
 22391  001890  AF9C               	btfss	_chanValSection& (0+255),7,b
 22392  001892  0012               	return	
 22393                           
 22394                           ; BSR set to: 1
 22395                           ;DisplayProtocol.h: 403: chanValSection = 5;
 22396  001894  0E05               	movlw	5
 22397  001896  0101               	movlb	1	; () banked
 22398  001898  6F9C               	movwf	_chanValSection& (0+255),b
 22399                           
 22400                           ; BSR set to: 1
 22401                           ;DisplayProtocol.h: 404: }else if(actualScreen == 15) {
 22402  00189A  0012               	return	
 22403  00189C                     i1l8745:
 22404                           
 22405                           ; BSR set to: 1
 22406  00189C  0E0F               	movlw	15
 22407  00189E  0101               	movlb	1	; () banked
 22408  0018A0  19BD               	xorwf	_actualScreen& (0+255),w,b
 22409  0018A2  A4D8               	btfss	status,2,c
 22410  0018A4  D039               	goto	i1l8761
 22411                           
 22412                           ; BSR set to: 1
 22413                           ;DisplayProtocol.h: 405: if(!selSN) {
 22414  0018A6  0101               	movlb	1	; () banked
 22415  0018A8  51BA               	movf	_selSN& (0+255),w,b
 22416  0018AA  A4D8               	btfss	status,2,c
 22417  0018AC  D02F               	goto	i1l770
 22418                           
 22419                           ; BSR set to: 1
 22420                           ;DisplayProtocol.h: 406: processState = 0;
 22421  0018AE  0E00               	movlw	0
 22422  0018B0  0100               	movlb	0	; () banked
 22423  0018B2  6FB3               	movwf	(_processState+1)& (0+255),b
 22424  0018B4  0E00               	movlw	0
 22425  0018B6  6FB2               	movwf	_processState& (0+255),b
 22426                           
 22427                           ; BSR set to: 0
 22428                           ;DisplayProtocol.h: 407: stopProcess();
 22429  0018B8  EC43  F039         	call	i1_stopProcess	;wreg free
 22430                           
 22431                           ;DisplayProtocol.h: 408: numCortes = tempNumCortes;
 22432  0018BC  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 22433  0018C0  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 22434                           
 22435                           ;DisplayProtocol.h: 409: tiXcorte = temptiXcorte;
 22436  0018C4  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 22437  0018C8  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 22438  0018CC  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 22439                           
 22440                           ;DisplayProtocol.h: 410: timsXcorte = (float)tiXcorte * 1000;
 22441  0018D0  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 22442  0018D4  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 22443  0018D8  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 22444  0018DC  0E00               	movlw	0
 22445  0018DE  0100               	movlb	0	; () banked
 22446  0018E0  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 22447  0018E2  0E7A               	movlw	122
 22448  0018E4  0100               	movlb	0	; () banked
 22449  0018E6  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 22450  0018E8  0E44               	movlw	68
 22451  0018EA  0100               	movlb	0	; () banked
 22452  0018EC  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 22453  0018EE  ECE4  F01C         	call	i1___ftmul	;wreg free
 22454  0018F2  C068  F055         	movff	?i1___ftmul,_timsXcorte
 22455  0018F6  C069  F056         	movff	?i1___ftmul+1,_timsXcorte+1
 22456  0018FA  C06A  F057         	movff	?i1___ftmul+2,_timsXcorte+2
 22457                           
 22458                           ;DisplayProtocol.h: 411: calibMode = 0;
 22459  0018FE  0E00               	movlw	0
 22460  001900  0100               	movlb	0	; () banked
 22461  001902  6FBE               	movwf	_calibMode& (0+255),b
 22462                           
 22463                           ;DisplayProtocol.h: 412: actualScreen = 4;
 22464  001904  0E04               	movlw	4
 22465  001906  0101               	movlb	1	; () banked
 22466  001908  6FBD               	movwf	_actualScreen& (0+255),b
 22467                           
 22468                           ;DisplayProtocol.h: 413: }else {
 22469  00190A  0012               	return	
 22470  00190C                     i1l770:
 22471                           
 22472                           ; BSR set to: 1
 22473                           ;DisplayProtocol.h: 414: actualScreen = tempLastScreen;
 22474  00190C  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 22475                           
 22476                           ; BSR set to: 1
 22477                           ;DisplayProtocol.h: 415: tempLastScreen = 6;
 22478  001910  0E06               	movlw	6
 22479  001912  0100               	movlb	0	; () banked
 22480  001914  6FBA               	movwf	_tempLastScreen& (0+255),b
 22481                           
 22482                           ; BSR set to: 0
 22483                           ;DisplayProtocol.h: 416: }
 22484                           ;DisplayProtocol.h: 417: }else if(actualScreen == 13) {
 22485  001916  0012               	return	
 22486  001918                     i1l8761:
 22487  001918  0E0D               	movlw	13
 22488  00191A  0101               	movlb	1	; () banked
 22489  00191C  19BD               	xorwf	_actualScreen& (0+255),w,b
 22490  00191E  A4D8               	btfss	status,2,c
 22491  001920  0012               	return	
 22492                           
 22493                           ; BSR set to: 1
 22494                           ;DisplayProtocol.h: 418: initProtocoll(1);
 22495  001922  0E01               	movlw	1
 22496  001924  EC68  F037         	call	i1_initProtocoll
 22497                           
 22498                           ;DisplayProtocol.h: 419: actualScreen = tempLastScreen;
 22499  001928  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 22500  00192C  0012               	return	
 22501  00192E                     __end_ofi1_pressENTER:
 22502                           	opt stack 0
 22503                           pclatu	equ	0xFFB
 22504                           pclath	equ	0xFFA
 22505                           tblptru	equ	0xFF8
 22506                           tblptrh	equ	0xFF7
 22507                           tblptrl	equ	0xFF6
 22508                           tablat	equ	0xFF5
 22509                           prodh	equ	0xFF4
 22510                           prodl	equ	0xFF3
 22511                           intcon	equ	0xFF2
 22512                           postinc0	equ	0xFEE
 22513                           fsr0h	equ	0xFEA
 22514                           fsr0l	equ	0xFE9
 22515                           wreg	equ	0xFE8
 22516                           postdec1	equ	0xFE5
 22517                           fsr1h	equ	0xFE2
 22518                           fsr1l	equ	0xFE1
 22519                           bsr	equ	0xFE0
 22520                           indf2	equ	0xFDF
 22521                           postinc2	equ	0xFDE
 22522                           postdec2	equ	0xFDD
 22523                           plusw2	equ	0xFDB
 22524                           fsr2h	equ	0xFDA
 22525                           fsr2l	equ	0xFD9
 22526                           status	equ	0xFD8
 22527                           
 22528 ;; *************** function i1_checkPass *****************
 22529 ;; Defined at:
 22530 ;;		line 14 in file "source/DisplayProtocol.h"
 22531 ;; Parameters:    Size  Location     Type
 22532 ;;		None
 22533 ;; Auto vars:     Size  Location     Type
 22534 ;;  checkPass       2    5[BANK0 ] int 
 22535 ;;  checkPass       1    4[BANK0 ] unsigned char 
 22536 ;; Return value:  Size  Location     Type
 22537 ;;                  1    wreg      unsigned char 
 22538 ;; Registers used:
 22539 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22540 ;; Tracked objects:
 22541 ;;		On entry : 0/0
 22542 ;;		On exit  : 0/0
 22543 ;;		Unchanged: 0/0
 22544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22545 ;;      Params:         0       0       0       0       0       0       0
 22546 ;;      Locals:         0       3       0       0       0       0       0
 22547 ;;      Temps:          0       4       0       0       0       0       0
 22548 ;;      Totals:         0       7       0       0       0       0       0
 22549 ;;Total ram usage:        7 bytes
 22550 ;; Hardware stack levels used:    1
 22551 ;; Hardware stack levels required when called:    4
 22552 ;; This function calls:
 22553 ;;		Nothing
 22554 ;; This function is called by:
 22555 ;;		i1_pressENTER
 22556 ;; This function uses a non-reentrant model
 22557 ;;
 22558                           
 22559                           	psect	text96
 22560  00630A                     __ptext96:
 22561                           	opt stack 0
 22562  00630A                     i1_checkPass:
 22563                           	opt stack 13
 22564                           
 22565                           ;DisplayProtocol.h: 15: int i;
 22566                           ;DisplayProtocol.h: 16: char passOK = 0;
 22567                           
 22568                           ;incstack = 0
 22569  00630A  0E00               	movlw	0
 22570  00630C  0100               	movlb	0	; () banked
 22571  00630E  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22572                           
 22573                           ;DisplayProtocol.h: 17: for (i = 0; i < 4; i++) {
 22574  006310  0E00               	movlw	0
 22575  006312  0100               	movlb	0	; () banked
 22576  006314  6F66               	movwf	(i1checkPass@i+1)& (0+255),b
 22577  006316  0E00               	movlw	0
 22578  006318  6F65               	movwf	i1checkPass@i& (0+255),b
 22579  00631A                     i1l7401:
 22580                           
 22581                           ; BSR set to: 0
 22582  00631A  0100               	movlb	0	; () banked
 22583  00631C  BF66               	btfsc	(i1checkPass@i+1)& (0+255),7,b
 22584  00631E  D008               	goto	i1l7405
 22585  006320  0100               	movlb	0	; () banked
 22586  006322  5166               	movf	(i1checkPass@i+1)& (0+255),w,b
 22587  006324  E136               	bnz	i1l7415
 22588  006326  0E04               	movlw	4
 22589  006328  0100               	movlb	0	; () banked
 22590  00632A  5D65               	subwf	i1checkPass@i& (0+255),w,b
 22591  00632C  B0D8               	btfsc	status,0,c
 22592  00632E  D031               	goto	i1l7415
 22593  006330                     i1l7405:
 22594                           
 22595                           ; BSR set to: 0
 22596                           ;DisplayProtocol.h: 18: if (introducido[i] == contra[i])
 22597  006330  0EAB               	movlw	low _contra
 22598  006332  0100               	movlb	0	; () banked
 22599  006334  2565               	addwf	i1checkPass@i& (0+255),w,b
 22600  006336  6ED9               	movwf	fsr2l,c
 22601  006338  0E00               	movlw	high _contra
 22602  00633A  0100               	movlb	0	; () banked
 22603  00633C  2166               	addwfc	(i1checkPass@i+1)& (0+255),w,b
 22604  00633E  6EDA               	movwf	fsr2h,c
 22605  006340  50DF               	movf	indf2,w,c
 22606  006342  0100               	movlb	0	; () banked
 22607  006344  6F60               	movwf	??i1_checkPass& (0+255),b
 22608  006346  6B61               	clrf	(??i1_checkPass+1)& (0+255),b
 22609  006348  0EAD               	movlw	low _introducido
 22610  00634A  0100               	movlb	0	; () banked
 22611  00634C  2565               	addwf	i1checkPass@i& (0+255),w,b
 22612  00634E  6ED9               	movwf	fsr2l,c
 22613  006350  0E01               	movlw	high _introducido
 22614  006352  0100               	movlb	0	; () banked
 22615  006354  2166               	addwfc	(i1checkPass@i+1)& (0+255),w,b
 22616  006356  6EDA               	movwf	fsr2h,c
 22617  006358  50DF               	movf	indf2,w,c
 22618  00635A  0100               	movlb	0	; () banked
 22619  00635C  6F62               	movwf	(??i1_checkPass+2)& (0+255),b
 22620  00635E  6B63               	clrf	(??i1_checkPass+3)& (0+255),b
 22621  006360  BF62               	btfsc	(??i1_checkPass+2)& (0+255),7,b
 22622  006362  0763               	decf	(??i1_checkPass+3)& (0+255),f,b
 22623  006364  0100               	movlb	0	; () banked
 22624  006366  5160               	movf	??i1_checkPass& (0+255),w,b
 22625  006368  0100               	movlb	0	; () banked
 22626  00636A  1962               	xorwf	(??i1_checkPass+2)& (0+255),w,b
 22627  00636C  E10A               	bnz	i1l7409
 22628  00636E  0100               	movlb	0	; () banked
 22629  006370  5161               	movf	(??i1_checkPass+1)& (0+255),w,b
 22630  006372  0100               	movlb	0	; () banked
 22631  006374  1963               	xorwf	(??i1_checkPass+3)& (0+255),w,b
 22632  006376  A4D8               	btfss	status,2,c
 22633  006378  D004               	goto	i1l7409
 22634                           
 22635                           ; BSR set to: 0
 22636                           ;DisplayProtocol.h: 19: passOK = 1;
 22637  00637A  0E01               	movlw	1
 22638  00637C  0100               	movlb	0	; () banked
 22639  00637E  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22640  006380  D004               	goto	i1l7411
 22641  006382                     i1l7409:
 22642                           
 22643                           ; BSR set to: 0
 22644                           ;DisplayProtocol.h: 20: else {
 22645                           ;DisplayProtocol.h: 21: passOK = 0;
 22646  006382  0E00               	movlw	0
 22647  006384  0100               	movlb	0	; () banked
 22648  006386  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22649                           
 22650                           ;DisplayProtocol.h: 22: break;
 22651  006388  D004               	goto	i1l7415
 22652  00638A                     i1l7411:
 22653                           
 22654                           ; BSR set to: 0
 22655  00638A  0100               	movlb	0	; () banked
 22656  00638C  4B65               	infsnz	i1checkPass@i& (0+255),f,b
 22657  00638E  2B66               	incf	(i1checkPass@i+1)& (0+255),f,b
 22658  006390  D7C4               	goto	i1l7401
 22659  006392                     i1l7415:
 22660                           
 22661                           ; BSR set to: 0
 22662                           ;DisplayProtocol.h: 23: }
 22663                           ;DisplayProtocol.h: 24: }
 22664                           ;DisplayProtocol.h: 25: return passOK;
 22665  006392  0100               	movlb	0	; () banked
 22666  006394  5164               	movf	i1checkPass@passOK& (0+255),w,b
 22667  006396  0012               	return	
 22668  006398                     __end_ofi1_checkPass:
 22669                           	opt stack 0
 22670                           pclatu	equ	0xFFB
 22671                           pclath	equ	0xFFA
 22672                           tblptru	equ	0xFF8
 22673                           tblptrh	equ	0xFF7
 22674                           tblptrl	equ	0xFF6
 22675                           tablat	equ	0xFF5
 22676                           prodh	equ	0xFF4
 22677                           prodl	equ	0xFF3
 22678                           intcon	equ	0xFF2
 22679                           postinc0	equ	0xFEE
 22680                           fsr0h	equ	0xFEA
 22681                           fsr0l	equ	0xFE9
 22682                           wreg	equ	0xFE8
 22683                           postdec1	equ	0xFE5
 22684                           fsr1h	equ	0xFE2
 22685                           fsr1l	equ	0xFE1
 22686                           bsr	equ	0xFE0
 22687                           indf2	equ	0xFDF
 22688                           postinc2	equ	0xFDE
 22689                           postdec2	equ	0xFDD
 22690                           plusw2	equ	0xFDB
 22691                           fsr2h	equ	0xFDA
 22692                           fsr2l	equ	0xFD9
 22693                           status	equ	0xFD8
 22694                           
 22695 ;; *************** function i1_pressDOWN *****************
 22696 ;; Defined at:
 22697 ;;		line 179 in file "source/DisplayProtocol.h"
 22698 ;; Parameters:    Size  Location     Type
 22699 ;;		None
 22700 ;; Auto vars:     Size  Location     Type
 22701 ;;		None
 22702 ;; Return value:  Size  Location     Type
 22703 ;;                  1    wreg      void 
 22704 ;; Registers used:
 22705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22706 ;; Tracked objects:
 22707 ;;		On entry : 0/0
 22708 ;;		On exit  : 0/0
 22709 ;;		Unchanged: 0/0
 22710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22711 ;;      Params:         0       0       0       0       0       0       0
 22712 ;;      Locals:         0       0       0       0       0       0       0
 22713 ;;      Temps:          0       1       0       0       0       0       0
 22714 ;;      Totals:         0       1       0       0       0       0       0
 22715 ;;Total ram usage:        1 bytes
 22716 ;; Hardware stack levels used:    1
 22717 ;; Hardware stack levels required when called:    5
 22718 ;; This function calls:
 22719 ;;		i1_chanValDigDOWN
 22720 ;; This function is called by:
 22721 ;;		_UARTint
 22722 ;; This function uses a non-reentrant model
 22723 ;;
 22724                           
 22725                           	psect	text97
 22726  004D72                     __ptext97:
 22727                           	opt stack 0
 22728  004D72                     i1_pressDOWN:
 22729                           	opt stack 13
 22730                           
 22731                           ;DisplayProtocol.h: 180: if (actualScreen == 0 || actualScreen == 4) {
 22732                           
 22733                           ; BSR set to: 0
 22734                           ;incstack = 0
 22735  004D72  0101               	movlb	1	; () banked
 22736  004D74  51BD               	movf	_actualScreen& (0+255),w,b
 22737  004D76  B4D8               	btfsc	status,2,c
 22738  004D78  D005               	goto	i1l8447
 22739                           
 22740                           ; BSR set to: 1
 22741  004D7A  0E04               	movlw	4
 22742  004D7C  0101               	movlb	1	; () banked
 22743  004D7E  19BD               	xorwf	_actualScreen& (0+255),w,b
 22744  004D80  A4D8               	btfss	status,2,c
 22745  004D82  D009               	goto	i1l8453
 22746  004D84                     i1l8447:
 22747                           
 22748                           ; BSR set to: 1
 22749                           ;DisplayProtocol.h: 181: menuSection--;
 22750  004D84  0101               	movlb	1	; () banked
 22751  004D86  07BC               	decf	_menuSection& (0+255),f,b
 22752                           
 22753                           ; BSR set to: 1
 22754                           ;DisplayProtocol.h: 182: if (menuSection < 0)
 22755  004D88  0101               	movlb	1	; () banked
 22756  004D8A  AFBC               	btfss	_menuSection& (0+255),7,b
 22757  004D8C  0012               	return	
 22758                           
 22759                           ; BSR set to: 1
 22760                           ;DisplayProtocol.h: 183: menuSection = 3;
 22761  004D8E  0E03               	movlw	3
 22762  004D90  0101               	movlb	1	; () banked
 22763  004D92  6FBC               	movwf	_menuSection& (0+255),b
 22764                           
 22765                           ; BSR set to: 1
 22766                           ;DisplayProtocol.h: 184: } else if (actualScreen == 1) {
 22767  004D94  0012               	return	
 22768  004D96                     i1l8453:
 22769                           
 22770                           ; BSR set to: 1
 22771  004D96  0101               	movlb	1	; () banked
 22772  004D98  05BD               	decf	_actualScreen& (0+255),w,b
 22773  004D9A  A4D8               	btfss	status,2,c
 22774  004D9C  D022               	goto	i1l8459
 22775                           
 22776                           ; BSR set to: 1
 22777                           ;DisplayProtocol.h: 185: introducido[passSection]--;
 22778  004D9E  0101               	movlb	1	; () banked
 22779  004DA0  51BB               	movf	_passSection& (0+255),w,b
 22780  004DA2  0D01               	mullw	1
 22781  004DA4  0EAD               	movlw	low _introducido
 22782  004DA6  24F3               	addwf	prodl,w,c
 22783  004DA8  6ED9               	movwf	fsr2l,c
 22784  004DAA  0E01               	movlw	high _introducido
 22785  004DAC  20F4               	addwfc	prodh,w,c
 22786  004DAE  6EDA               	movwf	fsr2h,c
 22787  004DB0  06DF               	decf	indf2,f,c
 22788                           
 22789                           ;DisplayProtocol.h: 186: if (introducido[passSection] < 0)
 22790  004DB2  0101               	movlb	1	; () banked
 22791  004DB4  51BB               	movf	_passSection& (0+255),w,b
 22792  004DB6  0D01               	mullw	1
 22793  004DB8  0EAD               	movlw	low _introducido
 22794  004DBA  24F3               	addwf	prodl,w,c
 22795  004DBC  6ED9               	movwf	fsr2l,c
 22796  004DBE  0E01               	movlw	high _introducido
 22797  004DC0  20F4               	addwfc	prodh,w,c
 22798  004DC2  6EDA               	movwf	fsr2h,c
 22799  004DC4  0E00               	movlw	0
 22800  004DC6  AEDB               	btfss	plusw2,7,c
 22801  004DC8  0012               	return	
 22802                           
 22803                           ; BSR set to: 1
 22804                           ;DisplayProtocol.h: 187: introducido[passSection] = 9;
 22805  004DCA  0101               	movlb	1	; () banked
 22806  004DCC  51BB               	movf	_passSection& (0+255),w,b
 22807  004DCE  0D01               	mullw	1
 22808  004DD0  0EAD               	movlw	low _introducido
 22809  004DD2  24F3               	addwf	prodl,w,c
 22810  004DD4  6ED9               	movwf	fsr2l,c
 22811  004DD6  0E01               	movlw	high _introducido
 22812  004DD8  20F4               	addwfc	prodh,w,c
 22813  004DDA  6EDA               	movwf	fsr2h,c
 22814  004DDC  0E09               	movlw	9
 22815  004DDE  6EDF               	movwf	indf2,c
 22816                           
 22817                           ; BSR set to: 1
 22818                           ;DisplayProtocol.h: 188: } else if (actualScreen == 2 || actualScreen == 3
 22819  004DE0  0012               	return	
 22820  004DE2                     i1l8459:
 22821                           
 22822                           ; BSR set to: 1
 22823                           ;DisplayProtocol.h: 189: || actualScreen == 10 || actualScreen == 11
 22824                           ;DisplayProtocol.h: 190: || actualScreen == 15) {
 22825  004DE2  0E02               	movlw	2
 22826  004DE4  0101               	movlb	1	; () banked
 22827  004DE6  19BD               	xorwf	_actualScreen& (0+255),w,b
 22828  004DE8  B4D8               	btfsc	status,2,c
 22829  004DEA  D014               	goto	i1l8469
 22830                           
 22831                           ; BSR set to: 1
 22832  004DEC  0E03               	movlw	3
 22833  004DEE  0101               	movlb	1	; () banked
 22834  004DF0  19BD               	xorwf	_actualScreen& (0+255),w,b
 22835  004DF2  B4D8               	btfsc	status,2,c
 22836  004DF4  D00F               	goto	i1l8469
 22837                           
 22838                           ; BSR set to: 1
 22839  004DF6  0E0A               	movlw	10
 22840  004DF8  0101               	movlb	1	; () banked
 22841  004DFA  19BD               	xorwf	_actualScreen& (0+255),w,b
 22842  004DFC  B4D8               	btfsc	status,2,c
 22843  004DFE  D00A               	goto	i1l8469
 22844                           
 22845                           ; BSR set to: 1
 22846  004E00  0E0B               	movlw	11
 22847  004E02  0101               	movlb	1	; () banked
 22848  004E04  19BD               	xorwf	_actualScreen& (0+255),w,b
 22849  004E06  B4D8               	btfsc	status,2,c
 22850  004E08  D005               	goto	i1l8469
 22851                           
 22852                           ; BSR set to: 1
 22853  004E0A  0E0F               	movlw	15
 22854  004E0C  0101               	movlb	1	; () banked
 22855  004E0E  19BD               	xorwf	_actualScreen& (0+255),w,b
 22856  004E10  A4D8               	btfss	status,2,c
 22857  004E12  D011               	goto	i1l8475
 22858  004E14                     i1l8469:
 22859                           
 22860                           ; BSR set to: 1
 22861                           ;DisplayProtocol.h: 191: selSN = !selSN;
 22862  004E14  0101               	movlb	1	; () banked
 22863  004E16  51BA               	movf	_selSN& (0+255),w,b
 22864  004E18  A4D8               	btfss	status,2,c
 22865  004E1A  D002               	goto	i1u1174_20
 22866  004E1C  0E01               	movlw	1
 22867  004E1E  D001               	goto	i1u1175_20
 22868  004E20                     i1u1174_20:
 22869  004E20  0E00               	movlw	0
 22870  004E22                     i1u1175_20:
 22871  004E22  0101               	movlb	1	; () banked
 22872  004E24  6FBA               	movwf	_selSN& (0+255),b
 22873                           
 22874                           ; BSR set to: 1
 22875                           ;DisplayProtocol.h: 192: if(selSN > 1)
 22876  004E26  0E01               	movlw	1
 22877  004E28  0101               	movlb	1	; () banked
 22878  004E2A  65BA               	cpfsgt	_selSN& (0+255),b
 22879  004E2C  0012               	return	
 22880                           
 22881                           ; BSR set to: 1
 22882                           ;DisplayProtocol.h: 193: selSN = 0;
 22883  004E2E  0E00               	movlw	0
 22884  004E30  0101               	movlb	1	; () banked
 22885  004E32  6FBA               	movwf	_selSN& (0+255),b
 22886                           
 22887                           ; BSR set to: 1
 22888                           ;DisplayProtocol.h: 194: }else if(actualScreen == 5) {
 22889  004E34  0012               	return	
 22890  004E36                     i1l8475:
 22891                           
 22892                           ; BSR set to: 1
 22893  004E36  0E05               	movlw	5
 22894  004E38  0101               	movlb	1	; () banked
 22895  004E3A  19BD               	xorwf	_actualScreen& (0+255),w,b
 22896  004E3C  B4D8               	btfsc	status,2,c
 22897  004E3E  D009               	goto	i1l8485
 22898  004E40  D014               	goto	i1l8487
 22899  004E42                     i1l8479:
 22900                           
 22901                           ; BSR set to: 1
 22902                           ;DisplayProtocol.h: 199: chanValDigDOWN();
 22903  004E42  EC58  F02A         	call	i1_chanValDigDOWN	;wreg free
 22904                           
 22905                           ;DisplayProtocol.h: 200: break;
 22906  004E46  0012               	return	
 22907  004E48                     i1l8481:
 22908                           
 22909                           ;DisplayProtocol.h: 202: chanVals--;
 22910  004E48  0101               	movlb	1	; () banked
 22911  004E4A  07B6               	decf	_chanVals& (0+255),f,b
 22912  004E4C  A0D8               	btfss	status,0,c
 22913  004E4E  07B7               	decf	(_chanVals+1)& (0+255),f,b
 22914                           
 22915                           ; BSR set to: 1
 22916                           ;DisplayProtocol.h: 204: }
 22917                           ;DisplayProtocol.h: 205: }
 22918                           
 22919                           ;DisplayProtocol.h: 203: break;
 22920  004E50  0012               	return	
 22921  004E52                     i1l8485:
 22922                           
 22923                           ; BSR set to: 1
 22924  004E52  0101               	movlb	1	; () banked
 22925  004E54  51BC               	movf	_menuSection& (0+255),w,b
 22926                           
 22927                           ; Switch size 1, requested type "space"
 22928                           ; Number of cases is 3, Range of values is 0 to 2
 22929                           ; switch strategies available:
 22930                           ; Name         Instructions Cycles
 22931                           ; simple_byte           10     6 (average)
 22932                           ;	Chosen strategy is simple_byte
 22933  004E56  0A00               	xorlw	0	; case 0
 22934  004E58  B4D8               	btfsc	status,2,c
 22935  004E5A  0012               	return	
 22936  004E5C  0A01               	xorlw	1	; case 1
 22937  004E5E  B4D8               	btfsc	status,2,c
 22938  004E60  D7F0               	goto	i1l8479
 22939  004E62  0A03               	xorlw	3	; case 2
 22940  004E64  A4D8               	btfss	status,2,c
 22941                           
 22942                           ; BSR set to: 1
 22943                           ;DisplayProtocol.h: 206: }else if(actualScreen == 12)
 22944  004E66  0012               	return	
 22945  004E68  D7EF               	goto	i1l8481
 22946  004E6A                     i1l8487:
 22947                           
 22948                           ; BSR set to: 1
 22949  004E6A  0E0C               	movlw	12
 22950  004E6C  0101               	movlb	1	; () banked
 22951  004E6E  19BD               	xorwf	_actualScreen& (0+255),w,b
 22952  004E70  A4D8               	btfss	status,2,c
 22953  004E72  0012               	return	
 22954                           
 22955                           ; BSR set to: 1
 22956                           ;DisplayProtocol.h: 207: chanValDigDOWN();
 22957  004E74  EC58  F02A         	call	i1_chanValDigDOWN	;wreg free
 22958  004E78  0012               	return	
 22959  004E7A                     __end_ofi1_pressDOWN:
 22960                           	opt stack 0
 22961                           pclatu	equ	0xFFB
 22962                           pclath	equ	0xFFA
 22963                           tblptru	equ	0xFF8
 22964                           tblptrh	equ	0xFF7
 22965                           tblptrl	equ	0xFF6
 22966                           tablat	equ	0xFF5
 22967                           prodh	equ	0xFF4
 22968                           prodl	equ	0xFF3
 22969                           intcon	equ	0xFF2
 22970                           postinc0	equ	0xFEE
 22971                           fsr0h	equ	0xFEA
 22972                           fsr0l	equ	0xFE9
 22973                           wreg	equ	0xFE8
 22974                           postdec1	equ	0xFE5
 22975                           fsr1h	equ	0xFE2
 22976                           fsr1l	equ	0xFE1
 22977                           bsr	equ	0xFE0
 22978                           indf2	equ	0xFDF
 22979                           postinc2	equ	0xFDE
 22980                           postdec2	equ	0xFDD
 22981                           plusw2	equ	0xFDB
 22982                           fsr2h	equ	0xFDA
 22983                           fsr2l	equ	0xFD9
 22984                           status	equ	0xFD8
 22985                           
 22986 ;; *************** function i1_chanValDigDOWN *****************
 22987 ;; Defined at:
 22988 ;;		line 37 in file "source/DisplayProtocol.h"
 22989 ;; Parameters:    Size  Location     Type
 22990 ;;		None
 22991 ;; Auto vars:     Size  Location     Type
 22992 ;;		None
 22993 ;; Return value:  Size  Location     Type
 22994 ;;                  1    wreg      void 
 22995 ;; Registers used:
 22996 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22997 ;; Tracked objects:
 22998 ;;		On entry : 0/0
 22999 ;;		On exit  : 0/0
 23000 ;;		Unchanged: 0/0
 23001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23002 ;;      Params:         0       0       0       0       0       0       0
 23003 ;;      Locals:         0       0       0       0       0       0       0
 23004 ;;      Temps:          0       5       0       0       0       0       0
 23005 ;;      Totals:         0       5       0       0       0       0       0
 23006 ;;Total ram usage:        5 bytes
 23007 ;; Hardware stack levels used:    1
 23008 ;; Hardware stack levels required when called:    4
 23009 ;; This function calls:
 23010 ;;		Nothing
 23011 ;; This function is called by:
 23012 ;;		i1_pressDOWN
 23013 ;; This function uses a non-reentrant model
 23014 ;;
 23015                           
 23016                           	psect	text98
 23017  0054B0                     __ptext98:
 23018                           	opt stack 0
 23019  0054B0                     i1_chanValDigDOWN:
 23020                           	opt stack 13
 23021                           
 23022                           ;DisplayProtocol.h: 38: chanValdig[chanValSection]--;
 23023                           
 23024                           ;incstack = 0
 23025  0054B0  0101               	movlb	1	; () banked
 23026  0054B2  519C               	movf	_chanValSection& (0+255),w,b
 23027  0054B4  0D01               	mullw	1
 23028  0054B6  0EA3               	movlw	low _chanValdig
 23029  0054B8  24F3               	addwf	prodl,w,c
 23030  0054BA  6ED9               	movwf	fsr2l,c
 23031  0054BC  0E01               	movlw	high _chanValdig
 23032  0054BE  20F4               	addwfc	prodh,w,c
 23033  0054C0  6EDA               	movwf	fsr2h,c
 23034  0054C2  06DF               	decf	indf2,f,c
 23035                           
 23036                           ;DisplayProtocol.h: 39: if(chanValdig[chanValSection] < 0) {
 23037  0054C4  0101               	movlb	1	; () banked
 23038  0054C6  519C               	movf	_chanValSection& (0+255),w,b
 23039  0054C8  0D01               	mullw	1
 23040  0054CA  0EA3               	movlw	low _chanValdig
 23041  0054CC  24F3               	addwf	prodl,w,c
 23042  0054CE  6ED9               	movwf	fsr2l,c
 23043  0054D0  0E01               	movlw	high _chanValdig
 23044  0054D2  20F4               	addwfc	prodh,w,c
 23045  0054D4  6EDA               	movwf	fsr2h,c
 23046  0054D6  0E00               	movlw	0
 23047  0054D8  AEDB               	btfss	plusw2,7,c
 23048  0054DA  0012               	return	
 23049                           
 23050                           ; BSR set to: 1
 23051                           ;DisplayProtocol.h: 40: chanValdig[chanValSection] = 9;
 23052  0054DC  0101               	movlb	1	; () banked
 23053  0054DE  519C               	movf	_chanValSection& (0+255),w,b
 23054  0054E0  0D01               	mullw	1
 23055  0054E2  0EA3               	movlw	low _chanValdig
 23056  0054E4  24F3               	addwf	prodl,w,c
 23057  0054E6  6ED9               	movwf	fsr2l,c
 23058  0054E8  0E01               	movlw	high _chanValdig
 23059  0054EA  20F4               	addwfc	prodh,w,c
 23060  0054EC  6EDA               	movwf	fsr2h,c
 23061  0054EE  0E09               	movlw	9
 23062  0054F0  6EDF               	movwf	indf2,c
 23063                           
 23064                           ; BSR set to: 1
 23065                           ;DisplayProtocol.h: 41: if(chanValSection > 1 && chanValdig[chanValSection - 1] > 0)
 23066  0054F2  0101               	movlb	1	; () banked
 23067  0054F4  519C               	movf	_chanValSection& (0+255),w,b
 23068  0054F6  0A80               	xorlw	128
 23069  0054F8  0F7E               	addlw	-130
 23070  0054FA  A0D8               	btfss	status,0,c
 23071  0054FC  0012               	return	
 23072                           
 23073                           ; BSR set to: 1
 23074  0054FE  0EFF               	movlw	255
 23075  005500  0100               	movlb	0	; () banked
 23076  005502  6F60               	movwf	??i1_chanValDigDOWN& (0+255),b
 23077  005504  0EFF               	movlw	255
 23078  005506  0100               	movlb	0	; () banked
 23079  005508  6F61               	movwf	(??i1_chanValDigDOWN+1)& (0+255),b
 23080  00550A  C19C  F062         	movff	_chanValSection,??i1_chanValDigDOWN+2
 23081  00550E  0100               	movlb	0	; () banked
 23082  005510  6B63               	clrf	(??i1_chanValDigDOWN+3)& (0+255),b
 23083  005512  BF62               	btfsc	(??i1_chanValDigDOWN+2)& (0+255),7,b
 23084  005514  0763               	decf	(??i1_chanValDigDOWN+3)& (0+255),f,b
 23085  005516  0100               	movlb	0	; () banked
 23086  005518  5160               	movf	??i1_chanValDigDOWN& (0+255),w,b
 23087  00551A  0100               	movlb	0	; () banked
 23088  00551C  2762               	addwf	(??i1_chanValDigDOWN+2)& (0+255),f,b
 23089  00551E  0100               	movlb	0	; () banked
 23090  005520  5161               	movf	(??i1_chanValDigDOWN+1)& (0+255),w,b
 23091  005522  0100               	movlb	0	; () banked
 23092  005524  2363               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),f,b
 23093  005526  0EA3               	movlw	low _chanValdig
 23094  005528  0100               	movlb	0	; () banked
 23095  00552A  2562               	addwf	(??i1_chanValDigDOWN+2)& (0+255),w,b
 23096  00552C  6ED9               	movwf	fsr2l,c
 23097  00552E  0E01               	movlw	high _chanValdig
 23098  005530  0100               	movlb	0	; () banked
 23099  005532  2163               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),w,b
 23100  005534  6EDA               	movwf	fsr2h,c
 23101  005536  50DF               	movf	indf2,w,c
 23102  005538  0A80               	xorlw	128
 23103  00553A  0F7F               	addlw	-129
 23104  00553C  A0D8               	btfss	status,0,c
 23105  00553E  0012               	return	
 23106                           
 23107                           ; BSR set to: 0
 23108                           ;DisplayProtocol.h: 42: chanValdig[chanValSection - 1]--;
 23109  005540  0EFF               	movlw	255
 23110  005542  0100               	movlb	0	; () banked
 23111  005544  6F60               	movwf	??i1_chanValDigDOWN& (0+255),b
 23112  005546  0EFF               	movlw	255
 23113  005548  0100               	movlb	0	; () banked
 23114  00554A  6F61               	movwf	(??i1_chanValDigDOWN+1)& (0+255),b
 23115  00554C  C19C  F062         	movff	_chanValSection,??i1_chanValDigDOWN+2
 23116  005550  0100               	movlb	0	; () banked
 23117  005552  6B63               	clrf	(??i1_chanValDigDOWN+3)& (0+255),b
 23118  005554  BF62               	btfsc	(??i1_chanValDigDOWN+2)& (0+255),7,b
 23119  005556  0763               	decf	(??i1_chanValDigDOWN+3)& (0+255),f,b
 23120  005558  0100               	movlb	0	; () banked
 23121  00555A  5160               	movf	??i1_chanValDigDOWN& (0+255),w,b
 23122  00555C  0100               	movlb	0	; () banked
 23123  00555E  2762               	addwf	(??i1_chanValDigDOWN+2)& (0+255),f,b
 23124  005560  0100               	movlb	0	; () banked
 23125  005562  5161               	movf	(??i1_chanValDigDOWN+1)& (0+255),w,b
 23126  005564  0100               	movlb	0	; () banked
 23127  005566  2363               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),f,b
 23128  005568  0EA3               	movlw	low _chanValdig
 23129  00556A  0100               	movlb	0	; () banked
 23130  00556C  2562               	addwf	(??i1_chanValDigDOWN+2)& (0+255),w,b
 23131  00556E  6ED9               	movwf	fsr2l,c
 23132  005570  0E01               	movlw	high _chanValdig
 23133  005572  0100               	movlb	0	; () banked
 23134  005574  2163               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),w,b
 23135  005576  6EDA               	movwf	fsr2h,c
 23136  005578  06DF               	decf	indf2,f,c
 23137                           
 23138                           ; BSR set to: 0
 23139  00557A  0012               	return	
 23140  00557C                     __end_ofi1_chanValDigDOWN:
 23141                           	opt stack 0
 23142                           pclatu	equ	0xFFB
 23143                           pclath	equ	0xFFA
 23144                           tblptru	equ	0xFF8
 23145                           tblptrh	equ	0xFF7
 23146                           tblptrl	equ	0xFF6
 23147                           tablat	equ	0xFF5
 23148                           prodh	equ	0xFF4
 23149                           prodl	equ	0xFF3
 23150                           intcon	equ	0xFF2
 23151                           postinc0	equ	0xFEE
 23152                           fsr0h	equ	0xFEA
 23153                           fsr0l	equ	0xFE9
 23154                           wreg	equ	0xFE8
 23155                           postdec1	equ	0xFE5
 23156                           fsr1h	equ	0xFE2
 23157                           fsr1l	equ	0xFE1
 23158                           bsr	equ	0xFE0
 23159                           indf2	equ	0xFDF
 23160                           postinc2	equ	0xFDE
 23161                           postdec2	equ	0xFDD
 23162                           plusw2	equ	0xFDB
 23163                           fsr2h	equ	0xFDA
 23164                           fsr2l	equ	0xFD9
 23165                           status	equ	0xFD8
 23166                           
 23167 ;; *************** function i1_longPressUP *****************
 23168 ;; Defined at:
 23169 ;;		line 155 in file "source/DisplayProtocol.h"
 23170 ;; Parameters:    Size  Location     Type
 23171 ;;		None
 23172 ;; Auto vars:     Size  Location     Type
 23173 ;;		None
 23174 ;; Return value:  Size  Location     Type
 23175 ;;                  1    wreg      void 
 23176 ;; Registers used:
 23177 ;;		wreg, status,2, status,0
 23178 ;; Tracked objects:
 23179 ;;		On entry : 0/0
 23180 ;;		On exit  : 0/0
 23181 ;;		Unchanged: 0/0
 23182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23183 ;;      Params:         0       0       0       0       0       0       0
 23184 ;;      Locals:         0       0       0       0       0       0       0
 23185 ;;      Temps:          0       0       0       0       0       0       0
 23186 ;;      Totals:         0       0       0       0       0       0       0
 23187 ;;Total ram usage:        0 bytes
 23188 ;; Hardware stack levels used:    1
 23189 ;; Hardware stack levels required when called:    4
 23190 ;; This function calls:
 23191 ;;		Nothing
 23192 ;; This function is called by:
 23193 ;;		_UARTint
 23194 ;; This function uses a non-reentrant model
 23195 ;;
 23196                           
 23197                           	psect	text99
 23198  00695C                     __ptext99:
 23199                           	opt stack 0
 23200  00695C                     i1_longPressUP:
 23201                           	opt stack 14
 23202                           
 23203                           ;DisplayProtocol.h: 156: if (!UPisLP) {
 23204                           
 23205                           ;incstack = 0
 23206  00695C  504C               	movf	_UPisLP,w,c
 23207  00695E  A4D8               	btfss	status,2,c
 23208  006960  0012               	return	
 23209                           
 23210                           ;DisplayProtocol.h: 157: UPisLP = 1;
 23211  006962  0E01               	movlw	1
 23212  006964  6E4C               	movwf	_UPisLP,c
 23213                           
 23214                           ;DisplayProtocol.h: 158: if (actualScreen == 0 || actualScreen == 4) {
 23215  006966  0101               	movlb	1	; () banked
 23216  006968  51BD               	movf	_actualScreen& (0+255),w,b
 23217  00696A  B4D8               	btfsc	status,2,c
 23218  00696C  D005               	goto	i1l8425
 23219                           
 23220                           ; BSR set to: 1
 23221  00696E  0E04               	movlw	4
 23222  006970  0101               	movlb	1	; () banked
 23223  006972  19BD               	xorwf	_actualScreen& (0+255),w,b
 23224  006974  A4D8               	btfss	status,2,c
 23225  006976  D01C               	goto	i1l8437
 23226  006978                     i1l8425:
 23227                           
 23228                           ; BSR set to: 1
 23229                           ;DisplayProtocol.h: 159: if (holdENTERcont > 5) {
 23230  006978  0E05               	movlw	5
 23231  00697A  0100               	movlb	0	; () banked
 23232  00697C  65C6               	cpfsgt	_holdENTERcont& (0+255),b
 23233  00697E  D014               	goto	i1l8435
 23234                           
 23235                           ; BSR set to: 0
 23236                           ;DisplayProtocol.h: 160: if (actualScreen == 0) {
 23237  006980  0101               	movlb	1	; () banked
 23238  006982  51BD               	movf	_actualScreen& (0+255),w,b
 23239  006984  A4D8               	btfss	status,2,c
 23240  006986  D007               	goto	i1l8431
 23241                           
 23242                           ; BSR set to: 1
 23243                           ;DisplayProtocol.h: 161: actualScreen = 1;
 23244  006988  0E01               	movlw	1
 23245  00698A  0101               	movlb	1	; () banked
 23246  00698C  6FBD               	movwf	_actualScreen& (0+255),b
 23247                           
 23248                           ;DisplayProtocol.h: 162: fd = 0;
 23249  00698E  0E00               	movlw	0
 23250  006990  0101               	movlb	1	; () banked
 23251  006992  6FB9               	movwf	_fd& (0+255),b
 23252                           
 23253                           ;DisplayProtocol.h: 163: } else if (actualScreen == 4)
 23254  006994  0012               	return	
 23255  006996                     i1l8431:
 23256                           
 23257                           ; BSR set to: 1
 23258  006996  0E04               	movlw	4
 23259  006998  0101               	movlb	1	; () banked
 23260  00699A  19BD               	xorwf	_actualScreen& (0+255),w,b
 23261  00699C  A4D8               	btfss	status,2,c
 23262  00699E  0012               	return	
 23263                           
 23264                           ; BSR set to: 1
 23265                           ;DisplayProtocol.h: 164: actualScreen = 9;
 23266  0069A0  0E09               	movlw	9
 23267  0069A2  0101               	movlb	1	; () banked
 23268  0069A4  6FBD               	movwf	_actualScreen& (0+255),b
 23269                           
 23270                           ; BSR set to: 1
 23271                           ;DisplayProtocol.h: 165: } else
 23272                           
 23273                           ; BSR set to: 1
 23274  0069A6  0012               	return	
 23275  0069A8                     i1l8435:
 23276                           
 23277                           ;DisplayProtocol.h: 166: menuSection = 0;
 23278  0069A8  0E00               	movlw	0
 23279  0069AA  0101               	movlb	1	; () banked
 23280  0069AC  6FBC               	movwf	_menuSection& (0+255),b
 23281                           
 23282                           ; BSR set to: 1
 23283                           ;DisplayProtocol.h: 167: }else if(actualScreen == 5) {
 23284  0069AE  0012               	return	
 23285  0069B0                     i1l8437:
 23286                           
 23287                           ; BSR set to: 1
 23288  0069B0  0E05               	movlw	5
 23289  0069B2  0101               	movlb	1	; () banked
 23290  0069B4  19BD               	xorwf	_actualScreen& (0+255),w,b
 23291  0069B6  A4D8               	btfss	status,2,c
 23292  0069B8  0012               	return	
 23293                           
 23294                           ; BSR set to: 1
 23295                           ;DisplayProtocol.h: 168: if(menuSection == 2)
 23296  0069BA  0E02               	movlw	2
 23297  0069BC  0101               	movlb	1	; () banked
 23298  0069BE  19BC               	xorwf	_menuSection& (0+255),w,b
 23299  0069C0  A4D8               	btfss	status,2,c
 23300  0069C2  0012               	return	
 23301                           
 23302                           ; BSR set to: 1
 23303                           ;DisplayProtocol.h: 169: chanVals += 10;
 23304  0069C4  0E0A               	movlw	10
 23305  0069C6  0101               	movlb	1	; () banked
 23306  0069C8  27B6               	addwf	_chanVals& (0+255),f,b
 23307  0069CA  0E00               	movlw	0
 23308  0069CC  23B7               	addwfc	(_chanVals+1)& (0+255),f,b
 23309                           
 23310                           ; BSR set to: 1
 23311                           
 23312                           ; BSR set to: 1
 23313                           
 23314                           ; BSR set to: 1
 23315  0069CE  0012               	return	
 23316  0069D0                     __end_ofi1_longPressUP:
 23317                           	opt stack 0
 23318                           pclatu	equ	0xFFB
 23319                           pclath	equ	0xFFA
 23320                           tblptru	equ	0xFF8
 23321                           tblptrh	equ	0xFF7
 23322                           tblptrl	equ	0xFF6
 23323                           tablat	equ	0xFF5
 23324                           prodh	equ	0xFF4
 23325                           prodl	equ	0xFF3
 23326                           intcon	equ	0xFF2
 23327                           postinc0	equ	0xFEE
 23328                           fsr0h	equ	0xFEA
 23329                           fsr0l	equ	0xFE9
 23330                           wreg	equ	0xFE8
 23331                           postdec1	equ	0xFE5
 23332                           fsr1h	equ	0xFE2
 23333                           fsr1l	equ	0xFE1
 23334                           bsr	equ	0xFE0
 23335                           indf2	equ	0xFDF
 23336                           postinc2	equ	0xFDE
 23337                           postdec2	equ	0xFDD
 23338                           plusw2	equ	0xFDB
 23339                           fsr2h	equ	0xFDA
 23340                           fsr2l	equ	0xFD9
 23341                           status	equ	0xFD8
 23342                           
 23343 ;; *************** function i1_longPressRETRO *****************
 23344 ;; Defined at:
 23345 ;;		line 251 in file "source/DisplayProtocol.h"
 23346 ;; Parameters:    Size  Location     Type
 23347 ;;		None
 23348 ;; Auto vars:     Size  Location     Type
 23349 ;;		None
 23350 ;; Return value:  Size  Location     Type
 23351 ;;                  1    wreg      void 
 23352 ;; Registers used:
 23353 ;;		wreg, status,2, status,0, cstack
 23354 ;; Tracked objects:
 23355 ;;		On entry : 0/0
 23356 ;;		On exit  : 0/0
 23357 ;;		Unchanged: 0/0
 23358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23359 ;;      Params:         0       0       0       0       0       0       0
 23360 ;;      Locals:         0       0       0       0       0       0       0
 23361 ;;      Temps:          0       0       0       0       0       0       0
 23362 ;;      Totals:         0       0       0       0       0       0       0
 23363 ;;Total ram usage:        0 bytes
 23364 ;; Hardware stack levels used:    1
 23365 ;; Hardware stack levels required when called:    7
 23366 ;; This function calls:
 23367 ;;		i1___ftmul
 23368 ;;		i1_initProtocoll
 23369 ;;		i1_stopProcess
 23370 ;; This function is called by:
 23371 ;;		_UARTint
 23372 ;; This function uses a non-reentrant model
 23373 ;;
 23374                           
 23375                           	psect	text100
 23376  004F7C                     __ptext100:
 23377                           	opt stack 0
 23378  004F7C                     i1_longPressRETRO:
 23379                           	opt stack 11
 23380                           
 23381                           ;DisplayProtocol.h: 252: if (!RETROisLP) {
 23382                           
 23383                           ;incstack = 0
 23384  004F7C  0100               	movlb	0	; () banked
 23385  004F7E  51C5               	movf	_RETROisLP& (0+255),w,b
 23386  004F80  A4D8               	btfss	status,2,c
 23387  004F82  0012               	return	
 23388                           
 23389                           ; BSR set to: 0
 23390                           ;DisplayProtocol.h: 253: RETROisLP = 1;
 23391  004F84  0E01               	movlw	1
 23392  004F86  0100               	movlb	0	; () banked
 23393  004F88  6FC5               	movwf	_RETROisLP& (0+255),b
 23394                           
 23395                           ;DisplayProtocol.h: 254: if(actualScreen == 0 || actualScreen == 4
 23396                           ;DisplayProtocol.h: 255: || actualScreen == 14) {
 23397  004F8A  0101               	movlb	1	; () banked
 23398  004F8C  51BD               	movf	_actualScreen& (0+255),w,b
 23399  004F8E  B4D8               	btfsc	status,2,c
 23400  004F90  D00A               	goto	i1l8551
 23401                           
 23402                           ; BSR set to: 1
 23403  004F92  0E04               	movlw	4
 23404  004F94  0101               	movlb	1	; () banked
 23405  004F96  19BD               	xorwf	_actualScreen& (0+255),w,b
 23406  004F98  B4D8               	btfsc	status,2,c
 23407  004F9A  D005               	goto	i1l8551
 23408                           
 23409                           ; BSR set to: 1
 23410  004F9C  0E0E               	movlw	14
 23411  004F9E  0101               	movlb	1	; () banked
 23412  004FA0  19BD               	xorwf	_actualScreen& (0+255),w,b
 23413  004FA2  A4D8               	btfss	status,2,c
 23414  004FA4  D012               	goto	i1l8557
 23415  004FA6                     i1l8551:
 23416                           
 23417                           ; BSR set to: 1
 23418                           ;DisplayProtocol.h: 256: if(processStarted || actualScreen == 14) {
 23419  004FA6  0100               	movlb	0	; () banked
 23420  004FA8  51C0               	movf	_processStarted& (0+255),w,b
 23421  004FAA  A4D8               	btfss	status,2,c
 23422  004FAC  D005               	goto	i1l702
 23423                           
 23424                           ; BSR set to: 0
 23425  004FAE  0E0E               	movlw	14
 23426  004FB0  0101               	movlb	1	; () banked
 23427  004FB2  19BD               	xorwf	_actualScreen& (0+255),w,b
 23428  004FB4  A4D8               	btfss	status,2,c
 23429  004FB6  0012               	return	
 23430  004FB8                     i1l702:
 23431                           
 23432                           ;DisplayProtocol.h: 257: tempLastScreen = actualScreen;
 23433  004FB8  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 23434                           
 23435                           ;DisplayProtocol.h: 258: actualScreen = 3;
 23436  004FBC  0E03               	movlw	3
 23437  004FBE  0101               	movlb	1	; () banked
 23438  004FC0  6FBD               	movwf	_actualScreen& (0+255),b
 23439                           
 23440                           ;DisplayProtocol.h: 259: selSN = 0;
 23441  004FC2  0E00               	movlw	0
 23442  004FC4  0101               	movlb	1	; () banked
 23443  004FC6  6FBA               	movwf	_selSN& (0+255),b
 23444                           
 23445                           ; BSR set to: 1
 23446                           ;DisplayProtocol.h: 260: }
 23447                           ;DisplayProtocol.h: 261: }else if(actualScreen == 5)
 23448  004FC8  0012               	return	
 23449  004FCA                     i1l8557:
 23450                           
 23451                           ; BSR set to: 1
 23452  004FCA  0E05               	movlw	5
 23453  004FCC  0101               	movlb	1	; () banked
 23454  004FCE  19BD               	xorwf	_actualScreen& (0+255),w,b
 23455  004FD0  A4D8               	btfss	status,2,c
 23456  004FD2  D004               	goto	i1l8561
 23457                           
 23458                           ; BSR set to: 1
 23459                           ;DisplayProtocol.h: 262: actualScreen = 4;
 23460  004FD4  0E04               	movlw	4
 23461  004FD6  0101               	movlb	1	; () banked
 23462  004FD8  6FBD               	movwf	_actualScreen& (0+255),b
 23463  004FDA  0012               	return	
 23464  004FDC                     i1l8561:
 23465                           
 23466                           ; BSR set to: 1
 23467                           ;DisplayProtocol.h: 263: else if(actualScreen == 12 || actualScreen == 6) {
 23468  004FDC  0E0C               	movlw	12
 23469  004FDE  0101               	movlb	1	; () banked
 23470  004FE0  19BD               	xorwf	_actualScreen& (0+255),w,b
 23471  004FE2  B4D8               	btfsc	status,2,c
 23472  004FE4  D005               	goto	i1l708
 23473                           
 23474                           ; BSR set to: 1
 23475  004FE6  0E06               	movlw	6
 23476  004FE8  0101               	movlb	1	; () banked
 23477  004FEA  19BD               	xorwf	_actualScreen& (0+255),w,b
 23478  004FEC  A4D8               	btfss	status,2,c
 23479  004FEE  D009               	goto	i1l8567
 23480  004FF0                     i1l708:
 23481                           
 23482                           ; BSR set to: 1
 23483                           ;DisplayProtocol.h: 264: tempLastScreen = actualScreen;
 23484  004FF0  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 23485                           
 23486                           ; BSR set to: 1
 23487                           ;DisplayProtocol.h: 265: actualScreen = 15;
 23488  004FF4  0E0F               	movlw	15
 23489  004FF6  0101               	movlb	1	; () banked
 23490  004FF8  6FBD               	movwf	_actualScreen& (0+255),b
 23491                           
 23492                           ;DisplayProtocol.h: 266: selSN = 1;
 23493  004FFA  0E01               	movlw	1
 23494  004FFC  0101               	movlb	1	; () banked
 23495  004FFE  6FBA               	movwf	_selSN& (0+255),b
 23496                           
 23497                           ;DisplayProtocol.h: 267: }else if(actualScreen == 14) {
 23498  005000  0012               	return	
 23499  005002                     i1l8567:
 23500                           
 23501                           ; BSR set to: 1
 23502  005002  0E0E               	movlw	14
 23503  005004  0101               	movlb	1	; () banked
 23504  005006  19BD               	xorwf	_actualScreen& (0+255),w,b
 23505  005008  A4D8               	btfss	status,2,c
 23506  00500A  0012               	return	
 23507                           
 23508                           ; BSR set to: 1
 23509                           ;DisplayProtocol.h: 268: processState = 0;
 23510  00500C  0E00               	movlw	0
 23511  00500E  0100               	movlb	0	; () banked
 23512  005010  6FB3               	movwf	(_processState+1)& (0+255),b
 23513  005012  0E00               	movlw	0
 23514  005014  6FB2               	movwf	_processState& (0+255),b
 23515                           
 23516                           ; BSR set to: 0
 23517                           ;DisplayProtocol.h: 269: stopProcess();
 23518  005016  EC43  F039         	call	i1_stopProcess	;wreg free
 23519                           
 23520                           ;DisplayProtocol.h: 270: actualScreen = 0;
 23521  00501A  0E00               	movlw	0
 23522  00501C  0101               	movlb	1	; () banked
 23523  00501E  6FBD               	movwf	_actualScreen& (0+255),b
 23524                           
 23525                           ; BSR set to: 1
 23526                           ;DisplayProtocol.h: 271: if(calibMode) {
 23527  005020  0100               	movlb	0	; () banked
 23528  005022  51BE               	movf	_calibMode& (0+255),w,b
 23529  005024  B4D8               	btfsc	status,2,c
 23530  005026  D027               	goto	i1l711
 23531                           
 23532                           ; BSR set to: 0
 23533                           ;DisplayProtocol.h: 272: numCortes = tempNumCortes;
 23534  005028  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 23535  00502C  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 23536                           
 23537                           ;DisplayProtocol.h: 273: tiXcorte = temptiXcorte;
 23538  005030  C0CD  F195         	movff	_temptiXcorte,_tiXcorte
 23539  005034  C0CE  F196         	movff	_temptiXcorte+1,_tiXcorte+1
 23540  005038  C0CF  F197         	movff	_temptiXcorte+2,_tiXcorte+2
 23541                           
 23542                           ; BSR set to: 0
 23543                           ;DisplayProtocol.h: 274: timsXcorte = (float)tiXcorte * 1000;
 23544  00503C  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 23545  005040  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 23546  005044  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 23547  005048  0E00               	movlw	0
 23548  00504A  0100               	movlb	0	; () banked
 23549  00504C  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 23550  00504E  0E7A               	movlw	122
 23551  005050  0100               	movlb	0	; () banked
 23552  005052  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 23553  005054  0E44               	movlw	68
 23554  005056  0100               	movlb	0	; () banked
 23555  005058  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 23556  00505A  ECE4  F01C         	call	i1___ftmul	;wreg free
 23557  00505E  C068  F055         	movff	?i1___ftmul,_timsXcorte
 23558  005062  C069  F056         	movff	?i1___ftmul+1,_timsXcorte+1
 23559  005066  C06A  F057         	movff	?i1___ftmul+2,_timsXcorte+2
 23560                           
 23561                           ;DisplayProtocol.h: 275: calibMode = 0;
 23562  00506A  0E00               	movlw	0
 23563  00506C  0100               	movlb	0	; () banked
 23564  00506E  6FBE               	movwf	_calibMode& (0+255),b
 23565                           
 23566                           ; BSR set to: 0
 23567                           ;DisplayProtocol.h: 276: actualScreen = 4;
 23568  005070  0E04               	movlw	4
 23569  005072  0101               	movlb	1	; () banked
 23570  005074  6FBD               	movwf	_actualScreen& (0+255),b
 23571  005076                     i1l711:
 23572                           
 23573                           ;DisplayProtocol.h: 277: }
 23574                           ;DisplayProtocol.h: 278: initProtocoll(1);
 23575  005076  0E01               	movlw	1
 23576  005078  EC68  F037         	call	i1_initProtocoll
 23577  00507C  0012               	return	
 23578  00507E                     __end_ofi1_longPressRETRO:
 23579                           	opt stack 0
 23580                           pclatu	equ	0xFFB
 23581                           pclath	equ	0xFFA
 23582                           tblptru	equ	0xFF8
 23583                           tblptrh	equ	0xFF7
 23584                           tblptrl	equ	0xFF6
 23585                           tablat	equ	0xFF5
 23586                           prodh	equ	0xFF4
 23587                           prodl	equ	0xFF3
 23588                           intcon	equ	0xFF2
 23589                           postinc0	equ	0xFEE
 23590                           fsr0h	equ	0xFEA
 23591                           fsr0l	equ	0xFE9
 23592                           wreg	equ	0xFE8
 23593                           postdec1	equ	0xFE5
 23594                           fsr1h	equ	0xFE2
 23595                           fsr1l	equ	0xFE1
 23596                           bsr	equ	0xFE0
 23597                           indf2	equ	0xFDF
 23598                           postinc2	equ	0xFDE
 23599                           postdec2	equ	0xFDD
 23600                           plusw2	equ	0xFDB
 23601                           fsr2h	equ	0xFDA
 23602                           fsr2l	equ	0xFD9
 23603                           status	equ	0xFD8
 23604                           
 23605 ;; *************** function i1_longPressENTER *****************
 23606 ;; Defined at:
 23607 ;;		line 423 in file "source/DisplayProtocol.h"
 23608 ;; Parameters:    Size  Location     Type
 23609 ;;		None
 23610 ;; Auto vars:     Size  Location     Type
 23611 ;;  longPressENT    3   45[BANK0 ] float 
 23612 ;; Return value:  Size  Location     Type
 23613 ;;                  1    wreg      void 
 23614 ;; Registers used:
 23615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23616 ;; Tracked objects:
 23617 ;;		On entry : 0/0
 23618 ;;		On exit  : 0/0
 23619 ;;		Unchanged: 0/0
 23620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23621 ;;      Params:         0       0       0       0       0       0       0
 23622 ;;      Locals:         0       6       0       0       0       0       0
 23623 ;;      Temps:          0       0       0       0       0       0       0
 23624 ;;      Totals:         0       6       0       0       0       0       0
 23625 ;;Total ram usage:        6 bytes
 23626 ;; Hardware stack levels used:    1
 23627 ;; Hardware stack levels required when called:    9
 23628 ;; This function calls:
 23629 ;;		i1___ftadd
 23630 ;;		i1___ftdiv
 23631 ;;		i1___ftmul
 23632 ;;		i1_calcVars2ti
 23633 ;;		i1_confirmEdition
 23634 ;;		i1_desintegrator
 23635 ;;		i1_integrator
 23636 ;; This function is called by:
 23637 ;;		_UARTint
 23638 ;; This function uses a non-reentrant model
 23639 ;;
 23640                           
 23641                           	psect	text101
 23642  001C60                     __ptext101:
 23643                           	opt stack 0
 23644  001C60                     i1_longPressENTER:
 23645                           	opt stack 9
 23646                           
 23647                           ;DisplayProtocol.h: 424: if (!ENTERisLP) {
 23648                           
 23649                           ;incstack = 0
 23650  001C60  0101               	movlb	1	; () banked
 23651  001C62  51BE               	movf	_ENTERisLP& (0+255),w,b
 23652  001C64  A4D8               	btfss	status,2,c
 23653  001C66  0012               	return	
 23654                           
 23655                           ; BSR set to: 1
 23656                           ;DisplayProtocol.h: 425: ENTERisLP = 1;
 23657  001C68  0E01               	movlw	1
 23658  001C6A  0101               	movlb	1	; () banked
 23659  001C6C  6FBE               	movwf	_ENTERisLP& (0+255),b
 23660                           
 23661                           ;DisplayProtocol.h: 426: if(actualScreen == 0 || actualScreen == 4) {
 23662  001C6E  0101               	movlb	1	; () banked
 23663  001C70  51BD               	movf	_actualScreen& (0+255),w,b
 23664  001C72  B4D8               	btfsc	status,2,c
 23665  001C74  D005               	goto	i1l8773
 23666                           
 23667                           ; BSR set to: 1
 23668  001C76  0E04               	movlw	4
 23669  001C78  0101               	movlb	1	; () banked
 23670  001C7A  19BD               	xorwf	_actualScreen& (0+255),w,b
 23671  001C7C  A4D8               	btfss	status,2,c
 23672  001C7E  D025               	goto	i1l8789
 23673  001C80                     i1l8773:
 23674                           
 23675                           ; BSR set to: 1
 23676                           ;DisplayProtocol.h: 427: if (holdUPcont > 5) {
 23677  001C80  0E05               	movlw	5
 23678  001C82  0101               	movlb	1	; () banked
 23679  001C84  65BF               	cpfsgt	_holdUPcont& (0+255),b
 23680  001C86  D014               	goto	i1l8783
 23681                           
 23682                           ; BSR set to: 1
 23683                           ;DisplayProtocol.h: 428: if (actualScreen == 0) {
 23684  001C88  0101               	movlb	1	; () banked
 23685  001C8A  51BD               	movf	_actualScreen& (0+255),w,b
 23686  001C8C  A4D8               	btfss	status,2,c
 23687  001C8E  D007               	goto	i1l8779
 23688                           
 23689                           ; BSR set to: 1
 23690                           ;DisplayProtocol.h: 429: actualScreen = 1;
 23691  001C90  0E01               	movlw	1
 23692  001C92  0101               	movlb	1	; () banked
 23693  001C94  6FBD               	movwf	_actualScreen& (0+255),b
 23694                           
 23695                           ;DisplayProtocol.h: 430: fd = 0;
 23696  001C96  0E00               	movlw	0
 23697  001C98  0101               	movlb	1	; () banked
 23698  001C9A  6FB9               	movwf	_fd& (0+255),b
 23699                           
 23700                           ;DisplayProtocol.h: 431: } else if (actualScreen == 4)
 23701  001C9C  0012               	return	
 23702  001C9E                     i1l8779:
 23703                           
 23704                           ; BSR set to: 1
 23705  001C9E  0E04               	movlw	4
 23706  001CA0  0101               	movlb	1	; () banked
 23707  001CA2  19BD               	xorwf	_actualScreen& (0+255),w,b
 23708  001CA4  A4D8               	btfss	status,2,c
 23709  001CA6  0012               	return	
 23710                           
 23711                           ; BSR set to: 1
 23712                           ;DisplayProtocol.h: 432: actualScreen = 9;
 23713  001CA8  0E09               	movlw	9
 23714  001CAA  0101               	movlb	1	; () banked
 23715  001CAC  6FBD               	movwf	_actualScreen& (0+255),b
 23716                           
 23717                           ; BSR set to: 1
 23718                           ;DisplayProtocol.h: 433: } else if(!processStarted) {
 23719                           
 23720                           ; BSR set to: 1
 23721  001CAE  0012               	return	
 23722  001CB0                     i1l8783:
 23723                           
 23724                           ; BSR set to: 1
 23725  001CB0  0100               	movlb	0	; () banked
 23726  001CB2  51C0               	movf	_processStarted& (0+255),w,b
 23727  001CB4  A4D8               	btfss	status,2,c
 23728  001CB6  0012               	return	
 23729                           
 23730                           ; BSR set to: 0
 23731                           ;DisplayProtocol.h: 434: tempLastScreen = actualScreen;
 23732  001CB8  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 23733                           
 23734                           ; BSR set to: 0
 23735                           ;DisplayProtocol.h: 435: actualScreen = 2;
 23736  001CBC  0E02               	movlw	2
 23737  001CBE  0101               	movlb	1	; () banked
 23738  001CC0  6FBD               	movwf	_actualScreen& (0+255),b
 23739                           
 23740                           ;DisplayProtocol.h: 436: selSN = 1;
 23741  001CC2  0E01               	movlw	1
 23742  001CC4  0101               	movlb	1	; () banked
 23743  001CC6  6FBA               	movwf	_selSN& (0+255),b
 23744                           
 23745                           ; BSR set to: 1
 23746                           ;DisplayProtocol.h: 437: }
 23747                           ;DisplayProtocol.h: 438: }else if(actualScreen == 5) {
 23748                           
 23749                           ; BSR set to: 1
 23750  001CC8  0012               	return	
 23751  001CCA                     i1l8789:
 23752                           
 23753                           ; BSR set to: 1
 23754  001CCA  0E05               	movlw	5
 23755  001CCC  0101               	movlb	1	; () banked
 23756  001CCE  19BD               	xorwf	_actualScreen& (0+255),w,b
 23757  001CD0  A4D8               	btfss	status,2,c
 23758  001CD2  D010               	goto	i1l8797
 23759                           
 23760                           ; BSR set to: 1
 23761                           ;DisplayProtocol.h: 439: if(menuSection != 2)
 23762  001CD4  0E02               	movlw	2
 23763  001CD6  0101               	movlb	1	; () banked
 23764  001CD8  19BC               	xorwf	_menuSection& (0+255),w,b
 23765  001CDA  A4D8               	btfss	status,2,c
 23766                           
 23767                           ; BSR set to: 1
 23768                           ;DisplayProtocol.h: 440: integrator();
 23769  001CDC  EC5E  F021         	call	i1_integrator	;wreg free
 23770                           
 23771                           ;DisplayProtocol.h: 441: confirmEdition(!processStarted);
 23772  001CE0  0100               	movlb	0	; () banked
 23773  001CE2  51C0               	movf	_processStarted& (0+255),w,b
 23774  001CE4  A4D8               	btfss	status,2,c
 23775  001CE6  D002               	goto	i1u1250_20
 23776  001CE8  0E01               	movlw	1
 23777  001CEA  D001               	goto	i1u1251_20
 23778  001CEC                     i1u1250_20:
 23779  001CEC  0E00               	movlw	0
 23780  001CEE                     i1u1251_20:
 23781  001CEE  ECFF  F02C         	call	i1_confirmEdition
 23782                           
 23783                           ;DisplayProtocol.h: 442: }else if(actualScreen == 12) {
 23784  001CF2  0012               	return	
 23785  001CF4                     i1l8797:
 23786  001CF4  0E0C               	movlw	12
 23787  001CF6  0101               	movlb	1	; () banked
 23788  001CF8  19BD               	xorwf	_actualScreen& (0+255),w,b
 23789  001CFA  A4D8               	btfss	status,2,c
 23790  001CFC  0012               	return	
 23791                           
 23792                           ; BSR set to: 1
 23793                           ;DisplayProtocol.h: 443: tempLastScreen = 6;
 23794  001CFE  0E06               	movlw	6
 23795  001D00  0100               	movlb	0	; () banked
 23796  001D02  6FBA               	movwf	_tempLastScreen& (0+255),b
 23797                           
 23798                           ; BSR set to: 0
 23799                           ;DisplayProtocol.h: 444: integrator();
 23800  001D04  EC5E  F021         	call	i1_integrator	;wreg free
 23801                           
 23802                           ;DisplayProtocol.h: 445: if(calibLevel == 0) {
 23803  001D08  0101               	movlb	1	; () banked
 23804  001D0A  51B8               	movf	_calibLevel& (0+255),w,b
 23805  001D0C  A4D8               	btfss	status,2,c
 23806  001D0E  D069               	goto	i1l8825
 23807                           
 23808                           ; BSR set to: 1
 23809                           ;DisplayProtocol.h: 446: tempVelocidadMasa1 = (float)chanValf / tiXcorte;
 23810  001D10  C1B1  F072         	movff	_chanValf,i1___ftdiv@f1
 23811  001D14  C1B2  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23812  001D18  C1B3  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23813  001D1C  C195  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23814  001D20  C196  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23815  001D24  C197  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23816  001D28  ECE3  F01E         	call	i1___ftdiv	;wreg free
 23817  001D2C  C072  F1A0         	movff	?i1___ftdiv,_tempVelocidadMasa1
 23818  001D30  C073  F1A1         	movff	?i1___ftdiv+1,_tempVelocidadMasa1+1
 23819  001D34  C074  F1A2         	movff	?i1___ftdiv+2,_tempVelocidadMasa1+2
 23820                           
 23821                           ;DisplayProtocol.h: 447: tiXcorte = (float)0.5f / tempVelocidadMasa1;
 23822  001D38  0E00               	movlw	0
 23823  001D3A  0100               	movlb	0	; () banked
 23824  001D3C  6F72               	movwf	i1___ftdiv@f1& (0+255),b
 23825  001D3E  0E00               	movlw	0
 23826  001D40  0100               	movlb	0	; () banked
 23827  001D42  6F73               	movwf	(i1___ftdiv@f1+1)& (0+255),b
 23828  001D44  0E3F               	movlw	63
 23829  001D46  0100               	movlb	0	; () banked
 23830  001D48  6F74               	movwf	(i1___ftdiv@f1+2)& (0+255),b
 23831  001D4A  C1A0  F075         	movff	_tempVelocidadMasa1,i1___ftdiv@f2
 23832  001D4E  C1A1  F076         	movff	_tempVelocidadMasa1+1,i1___ftdiv@f2+1
 23833  001D52  C1A2  F077         	movff	_tempVelocidadMasa1+2,i1___ftdiv@f2+2
 23834  001D56  ECE3  F01E         	call	i1___ftdiv	;wreg free
 23835  001D5A  C072  F195         	movff	?i1___ftdiv,_tiXcorte
 23836  001D5E  C073  F196         	movff	?i1___ftdiv+1,_tiXcorte+1
 23837  001D62  C074  F197         	movff	?i1___ftdiv+2,_tiXcorte+2
 23838                           
 23839                           ;DisplayProtocol.h: 448: timsXcorte = (float)tiXcorte * 1000;
 23840  001D66  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 23841  001D6A  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 23842  001D6E  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 23843  001D72  0E00               	movlw	0
 23844  001D74  0100               	movlb	0	; () banked
 23845  001D76  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 23846  001D78  0E7A               	movlw	122
 23847  001D7A  0100               	movlb	0	; () banked
 23848  001D7C  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 23849  001D7E  0E44               	movlw	68
 23850  001D80  0100               	movlb	0	; () banked
 23851  001D82  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 23852  001D84  ECE4  F01C         	call	i1___ftmul	;wreg free
 23853  001D88  C068  F055         	movff	?i1___ftmul,_timsXcorte
 23854  001D8C  C069  F056         	movff	?i1___ftmul+1,_timsXcorte+1
 23855  001D90  C06A  F057         	movff	?i1___ftmul+2,_timsXcorte+2
 23856                           
 23857                           ;DisplayProtocol.h: 449: calibLevel = 1;
 23858  001D94  0E01               	movlw	1
 23859  001D96  0101               	movlb	1	; () banked
 23860  001D98  6FB8               	movwf	_calibLevel& (0+255),b
 23861                           
 23862                           ; BSR set to: 1
 23863                           ;DisplayProtocol.h: 450: numCortes = 1;
 23864  001D9A  0E00               	movlw	0
 23865  001D9C  0100               	movlb	0	; () banked
 23866  001D9E  6FD3               	movwf	(_numCortes+1)& (0+255),b
 23867  001DA0  0E01               	movlw	1
 23868  001DA2  6FD2               	movwf	_numCortes& (0+255),b
 23869                           
 23870                           ; BSR set to: 0
 23871                           ;DisplayProtocol.h: 451: processState = 0;
 23872  001DA4  0E00               	movlw	0
 23873  001DA6  0100               	movlb	0	; () banked
 23874  001DA8  6FB3               	movwf	(_processState+1)& (0+255),b
 23875  001DAA  0E00               	movlw	0
 23876  001DAC  6FB2               	movwf	_processState& (0+255),b
 23877                           
 23878                           ; BSR set to: 0
 23879                           ;DisplayProtocol.h: 452: processTimer = 0;
 23880  001DAE  0E00               	movlw	0
 23881  001DB0  6E3B               	movwf	_processTimer,c
 23882  001DB2  0E00               	movlw	0
 23883  001DB4  6E3C               	movwf	_processTimer+1,c
 23884  001DB6  0E00               	movlw	0
 23885  001DB8  6E3D               	movwf	_processTimer+2,c
 23886  001DBA  0E00               	movlw	0
 23887  001DBC  6E3E               	movwf	_processTimer+3,c
 23888                           
 23889                           ; BSR set to: 0
 23890                           ;DisplayProtocol.h: 454: actualScreen = tempLastScreen;
 23891  001DBE  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 23892                           
 23893                           ; BSR set to: 0
 23894                           ;DisplayProtocol.h: 455: chanValf = (float)0.50f;;
 23895  001DC2  0E00               	movlw	0
 23896  001DC4  0101               	movlb	1	; () banked
 23897  001DC6  6FB1               	movwf	_chanValf& (0+255),b
 23898  001DC8  0E00               	movlw	0
 23899  001DCA  0101               	movlb	1	; () banked
 23900  001DCC  6FB2               	movwf	(_chanValf+1)& (0+255),b
 23901  001DCE  0E3F               	movlw	63
 23902  001DD0  0101               	movlb	1	; () banked
 23903  001DD2  6FB3               	movwf	(_chanValf+2)& (0+255),b
 23904                           
 23905                           ; BSR set to: 1
 23906                           ;DisplayProtocol.h: 456: desintegrator();
 23907  001DD4  ECCF  F019         	call	i1_desintegrator	;wreg free
 23908                           
 23909                           ;DisplayProtocol.h: 457: LATCbits.LATC4 = 1;
 23910  001DD8  888B               	bsf	3979,4,c	;volatile
 23911                           
 23912                           ;DisplayProtocol.h: 458: processStarted = 1;
 23913  001DDA  0E01               	movlw	1
 23914  001DDC  0100               	movlb	0	; () banked
 23915  001DDE  6FC0               	movwf	_processStarted& (0+255),b
 23916                           
 23917                           ;DisplayProtocol.h: 459: }else if(calibLevel == 1) {
 23918  001DE0  0012               	return	
 23919  001DE2                     i1l8825:
 23920  001DE2  0101               	movlb	1	; () banked
 23921  001DE4  05B8               	decf	_calibLevel& (0+255),w,b
 23922  001DE6  A4D8               	btfss	status,2,c
 23923  001DE8  D069               	goto	i1l8847
 23924                           
 23925                           ; BSR set to: 1
 23926                           ;DisplayProtocol.h: 460: tempVelocidadMasa2 = (float)chanValf / tiXcorte;
 23927  001DEA  C1B1  F072         	movff	_chanValf,i1___ftdiv@f1
 23928  001DEE  C1B2  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23929  001DF2  C1B3  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23930  001DF6  C195  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23931  001DFA  C196  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23932  001DFE  C197  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23933  001E02  ECE3  F01E         	call	i1___ftdiv	;wreg free
 23934  001E06  C072  F19D         	movff	?i1___ftdiv,_tempVelocidadMasa2
 23935  001E0A  C073  F19E         	movff	?i1___ftdiv+1,_tempVelocidadMasa2+1
 23936  001E0E  C074  F19F         	movff	?i1___ftdiv+2,_tempVelocidadMasa2+2
 23937                           
 23938                           ;DisplayProtocol.h: 461: tiXcorte = (float)0.25f / tempVelocidadMasa2;
 23939  001E12  0E00               	movlw	0
 23940  001E14  0100               	movlb	0	; () banked
 23941  001E16  6F72               	movwf	i1___ftdiv@f1& (0+255),b
 23942  001E18  0E80               	movlw	128
 23943  001E1A  0100               	movlb	0	; () banked
 23944  001E1C  6F73               	movwf	(i1___ftdiv@f1+1)& (0+255),b
 23945  001E1E  0E3E               	movlw	62
 23946  001E20  0100               	movlb	0	; () banked
 23947  001E22  6F74               	movwf	(i1___ftdiv@f1+2)& (0+255),b
 23948  001E24  C19D  F075         	movff	_tempVelocidadMasa2,i1___ftdiv@f2
 23949  001E28  C19E  F076         	movff	_tempVelocidadMasa2+1,i1___ftdiv@f2+1
 23950  001E2C  C19F  F077         	movff	_tempVelocidadMasa2+2,i1___ftdiv@f2+2
 23951  001E30  ECE3  F01E         	call	i1___ftdiv	;wreg free
 23952  001E34  C072  F195         	movff	?i1___ftdiv,_tiXcorte
 23953  001E38  C073  F196         	movff	?i1___ftdiv+1,_tiXcorte+1
 23954  001E3C  C074  F197         	movff	?i1___ftdiv+2,_tiXcorte+2
 23955                           
 23956                           ;DisplayProtocol.h: 462: timsXcorte = (float)tiXcorte * 1000;
 23957  001E40  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 23958  001E44  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 23959  001E48  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 23960  001E4C  0E00               	movlw	0
 23961  001E4E  0100               	movlb	0	; () banked
 23962  001E50  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 23963  001E52  0E7A               	movlw	122
 23964  001E54  0100               	movlb	0	; () banked
 23965  001E56  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 23966  001E58  0E44               	movlw	68
 23967  001E5A  0100               	movlb	0	; () banked
 23968  001E5C  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 23969  001E5E  ECE4  F01C         	call	i1___ftmul	;wreg free
 23970  001E62  C068  F055         	movff	?i1___ftmul,_timsXcorte
 23971  001E66  C069  F056         	movff	?i1___ftmul+1,_timsXcorte+1
 23972  001E6A  C06A  F057         	movff	?i1___ftmul+2,_timsXcorte+2
 23973                           
 23974                           ;DisplayProtocol.h: 463: calibLevel = 2;
 23975  001E6E  0E02               	movlw	2
 23976  001E70  0101               	movlb	1	; () banked
 23977  001E72  6FB8               	movwf	_calibLevel& (0+255),b
 23978                           
 23979                           ; BSR set to: 1
 23980                           ;DisplayProtocol.h: 464: numCortes = 1;
 23981  001E74  0E00               	movlw	0
 23982  001E76  0100               	movlb	0	; () banked
 23983  001E78  6FD3               	movwf	(_numCortes+1)& (0+255),b
 23984  001E7A  0E01               	movlw	1
 23985  001E7C  6FD2               	movwf	_numCortes& (0+255),b
 23986                           
 23987                           ; BSR set to: 0
 23988                           ;DisplayProtocol.h: 465: processState = 0;
 23989  001E7E  0E00               	movlw	0
 23990  001E80  0100               	movlb	0	; () banked
 23991  001E82  6FB3               	movwf	(_processState+1)& (0+255),b
 23992  001E84  0E00               	movlw	0
 23993  001E86  6FB2               	movwf	_processState& (0+255),b
 23994                           
 23995                           ; BSR set to: 0
 23996                           ;DisplayProtocol.h: 466: processTimer = 0;
 23997  001E88  0E00               	movlw	0
 23998  001E8A  6E3B               	movwf	_processTimer,c
 23999  001E8C  0E00               	movlw	0
 24000  001E8E  6E3C               	movwf	_processTimer+1,c
 24001  001E90  0E00               	movlw	0
 24002  001E92  6E3D               	movwf	_processTimer+2,c
 24003  001E94  0E00               	movlw	0
 24004  001E96  6E3E               	movwf	_processTimer+3,c
 24005                           
 24006                           ; BSR set to: 0
 24007                           ;DisplayProtocol.h: 468: actualScreen = tempLastScreen;
 24008  001E98  C0BA  F1BD         	movff	_tempLastScreen,_actualScreen
 24009                           
 24010                           ; BSR set to: 0
 24011                           ;DisplayProtocol.h: 469: chanValf = (float)0.25f;
 24012  001E9C  0E00               	movlw	0
 24013  001E9E  0101               	movlb	1	; () banked
 24014  001EA0  6FB1               	movwf	_chanValf& (0+255),b
 24015  001EA2  0E80               	movlw	128
 24016  001EA4  0101               	movlb	1	; () banked
 24017  001EA6  6FB2               	movwf	(_chanValf+1)& (0+255),b
 24018  001EA8  0E3E               	movlw	62
 24019  001EAA  0101               	movlb	1	; () banked
 24020  001EAC  6FB3               	movwf	(_chanValf+2)& (0+255),b
 24021                           
 24022                           ; BSR set to: 1
 24023                           ;DisplayProtocol.h: 470: desintegrator();
 24024  001EAE  ECCF  F019         	call	i1_desintegrator	;wreg free
 24025                           
 24026                           ;DisplayProtocol.h: 471: LATCbits.LATC4 = 1;
 24027  001EB2  888B               	bsf	3979,4,c	;volatile
 24028                           
 24029                           ;DisplayProtocol.h: 472: processStarted = 1;
 24030  001EB4  0E01               	movlw	1
 24031  001EB6  0100               	movlb	0	; () banked
 24032  001EB8  6FC0               	movwf	_processStarted& (0+255),b
 24033                           
 24034                           ;DisplayProtocol.h: 473: }else if(calibLevel == 2) {
 24035  001EBA  0012               	return	
 24036  001EBC                     i1l8847:
 24037  001EBC  0E02               	movlw	2
 24038  001EBE  0101               	movlb	1	; () banked
 24039  001EC0  19B8               	xorwf	_calibLevel& (0+255),w,b
 24040  001EC2  A4D8               	btfss	status,2,c
 24041  001EC4  0012               	return	
 24042                           
 24043                           ; BSR set to: 1
 24044                           ;DisplayProtocol.h: 474: tempVelocidadMasa3 = (float)chanValf / tiXcorte;
 24045  001EC6  C1B1  F072         	movff	_chanValf,i1___ftdiv@f1
 24046  001ECA  C1B2  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 24047  001ECE  C1B3  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 24048  001ED2  C195  F075         	movff	_tiXcorte,i1___ftdiv@f2
 24049  001ED6  C196  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 24050  001EDA  C197  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 24051  001EDE  ECE3  F01E         	call	i1___ftdiv	;wreg free
 24052  001EE2  C072  F192         	movff	?i1___ftdiv,_tempVelocidadMasa3
 24053  001EE6  C073  F193         	movff	?i1___ftdiv+1,_tempVelocidadMasa3+1
 24054  001EEA  C074  F194         	movff	?i1___ftdiv+2,_tempVelocidadMasa3+2
 24055                           
 24056                           ;DisplayProtocol.h: 475: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 24057  001EEE  C19D  F06B         	movff	_tempVelocidadMasa2,i1___ftadd@f2
 24058  001EF2  C19E  F06C         	movff	_tempVelocidadMasa2+1,i1___ftadd@f2+1
 24059  001EF6  C19F  F06D         	movff	_tempVelocidadMasa2+2,i1___ftadd@f2+2
 24060  001EFA  C1A0  F068         	movff	_tempVelocidadMasa1,i1___ftadd@f1
 24061  001EFE  C1A1  F069         	movff	_tempVelocidadMasa1+1,i1___ftadd@f1+1
 24062  001F02  C1A2  F06A         	movff	_tempVelocidadMasa1+2,i1___ftadd@f1+2
 24063  001F06  EC18  F015         	call	i1___ftadd	;wreg free
 24064  001F0A  C068  F090         	movff	?i1___ftadd,i1_longPressENTER$3080
 24065  001F0E  C069  F091         	movff	?i1___ftadd+1,i1_longPressENTER$3080+1
 24066  001F12  C06A  F092         	movff	?i1___ftadd+2,i1_longPressENTER$3080+2
 24067                           
 24068                           ;DisplayProtocol.h: 475: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 24069  001F16  C090  F068         	movff	i1_longPressENTER$3080,i1___ftadd@f1
 24070  001F1A  C091  F069         	movff	i1_longPressENTER$3080+1,i1___ftadd@f1+1
 24071  001F1E  C092  F06A         	movff	i1_longPressENTER$3080+2,i1___ftadd@f1+2
 24072  001F22  C192  F06B         	movff	_tempVelocidadMasa3,i1___ftadd@f2
 24073  001F26  C193  F06C         	movff	_tempVelocidadMasa3+1,i1___ftadd@f2+1
 24074  001F2A  C194  F06D         	movff	_tempVelocidadMasa3+2,i1___ftadd@f2+2
 24075  001F2E  EC18  F015         	call	i1___ftadd	;wreg free
 24076  001F32  C068  F08D         	movff	?i1___ftadd,i1longPressENTER@temp
 24077  001F36  C069  F08E         	movff	?i1___ftadd+1,i1longPressENTER@temp+1
 24078  001F3A  C06A  F08F         	movff	?i1___ftadd+2,i1longPressENTER@temp+2
 24079                           
 24080                           ;DisplayProtocol.h: 476: chanValf = (float)temp / 3.0f;
 24081  001F3E  C08D  F072         	movff	i1longPressENTER@temp,i1___ftdiv@f1
 24082  001F42  C08E  F073         	movff	i1longPressENTER@temp+1,i1___ftdiv@f1+1
 24083  001F46  C08F  F074         	movff	i1longPressENTER@temp+2,i1___ftdiv@f1+2
 24084  001F4A  0E00               	movlw	0
 24085  001F4C  0100               	movlb	0	; () banked
 24086  001F4E  6F75               	movwf	i1___ftdiv@f2& (0+255),b
 24087  001F50  0E40               	movlw	64
 24088  001F52  0100               	movlb	0	; () banked
 24089  001F54  6F76               	movwf	(i1___ftdiv@f2+1)& (0+255),b
 24090  001F56  0E40               	movlw	64
 24091  001F58  0100               	movlb	0	; () banked
 24092  001F5A  6F77               	movwf	(i1___ftdiv@f2+2)& (0+255),b
 24093  001F5C  ECE3  F01E         	call	i1___ftdiv	;wreg free
 24094  001F60  C072  F1B1         	movff	?i1___ftdiv,_chanValf
 24095  001F64  C073  F1B2         	movff	?i1___ftdiv+1,_chanValf+1
 24096  001F68  C074  F1B3         	movff	?i1___ftdiv+2,_chanValf+2
 24097                           
 24098                           ;DisplayProtocol.h: 477: numCortes = tempNumCortes;
 24099  001F6C  C0D0  F0D2         	movff	_tempNumCortes,_numCortes
 24100  001F70  C0D1  F0D3         	movff	_tempNumCortes+1,_numCortes+1
 24101                           
 24102                           ;DisplayProtocol.h: 478: calcVars2ti();
 24103  001F74  ECE9  F035         	call	i1_calcVars2ti	;wreg free
 24104                           
 24105                           ;DisplayProtocol.h: 479: calibMode = 0;
 24106  001F78  0E00               	movlw	0
 24107  001F7A  0100               	movlb	0	; () banked
 24108  001F7C  6FBE               	movwf	_calibMode& (0+255),b
 24109                           
 24110                           ; BSR set to: 0
 24111                           ;DisplayProtocol.h: 480: confirmEdition(!processStarted);
 24112  001F7E  0100               	movlb	0	; () banked
 24113  001F80  51C0               	movf	_processStarted& (0+255),w,b
 24114  001F82  A4D8               	btfss	status,2,c
 24115  001F84  D002               	goto	i1u1256_20
 24116  001F86  0E01               	movlw	1
 24117  001F88  D001               	goto	i1u1257_20
 24118  001F8A                     i1u1256_20:
 24119  001F8A  0E00               	movlw	0
 24120  001F8C                     i1u1257_20:
 24121  001F8C  ECFF  F02C         	call	i1_confirmEdition
 24122  001F90  0012               	return	
 24123  001F92                     __end_ofi1_longPressENTER:
 24124                           	opt stack 0
 24125                           pclatu	equ	0xFFB
 24126                           pclath	equ	0xFFA
 24127                           tblptru	equ	0xFF8
 24128                           tblptrh	equ	0xFF7
 24129                           tblptrl	equ	0xFF6
 24130                           tablat	equ	0xFF5
 24131                           prodh	equ	0xFF4
 24132                           prodl	equ	0xFF3
 24133                           intcon	equ	0xFF2
 24134                           postinc0	equ	0xFEE
 24135                           fsr0h	equ	0xFEA
 24136                           fsr0l	equ	0xFE9
 24137                           wreg	equ	0xFE8
 24138                           postdec1	equ	0xFE5
 24139                           fsr1h	equ	0xFE2
 24140                           fsr1l	equ	0xFE1
 24141                           bsr	equ	0xFE0
 24142                           indf2	equ	0xFDF
 24143                           postinc2	equ	0xFDE
 24144                           postdec2	equ	0xFDD
 24145                           plusw2	equ	0xFDB
 24146                           fsr2h	equ	0xFDA
 24147                           fsr2l	equ	0xFD9
 24148                           status	equ	0xFD8
 24149                           
 24150 ;; *************** function i1_integrator *****************
 24151 ;; Defined at:
 24152 ;;		line 61 in file "source/DisplayProtocol.h"
 24153 ;; Parameters:    Size  Location     Type
 24154 ;;		None
 24155 ;; Auto vars:     Size  Location     Type
 24156 ;;  integrator      4   39[BANK0 ] long 
 24157 ;;  integrator      4   35[BANK0 ] long 
 24158 ;;  integrator      2   43[BANK0 ] int 
 24159 ;; Return value:  Size  Location     Type
 24160 ;;                  1    wreg      void 
 24161 ;; Registers used:
 24162 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24163 ;; Tracked objects:
 24164 ;;		On entry : 0/0
 24165 ;;		On exit  : 0/0
 24166 ;;		Unchanged: 0/0
 24167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24168 ;;      Params:         0       0       0       0       0       0       0
 24169 ;;      Locals:         0      10       0       0       0       0       0
 24170 ;;      Temps:          0       2       0       0       0       0       0
 24171 ;;      Totals:         0      12       0       0       0       0       0
 24172 ;;Total ram usage:       12 bytes
 24173 ;; Hardware stack levels used:    1
 24174 ;; Hardware stack levels required when called:    6
 24175 ;; This function calls:
 24176 ;;		i1___altoft
 24177 ;;		i1___ftdiv
 24178 ;;		i1___lmul
 24179 ;; This function is called by:
 24180 ;;		i1_longPressENTER
 24181 ;; This function uses a non-reentrant model
 24182 ;;
 24183                           
 24184                           	psect	text102
 24185  0042BC                     __ptext102:
 24186                           	opt stack 0
 24187  0042BC                     i1_integrator:
 24188                           	opt stack 11
 24189                           
 24190                           ;DisplayProtocol.h: 62: long acum = 0;
 24191                           
 24192                           ;incstack = 0
 24193  0042BC  0E00               	movlw	0
 24194  0042BE  0100               	movlb	0	; () banked
 24195  0042C0  6F83               	movwf	i1integrator@acum& (0+255),b
 24196  0042C2  0E00               	movlw	0
 24197  0042C4  6F84               	movwf	(i1integrator@acum+1)& (0+255),b
 24198  0042C6  0E00               	movlw	0
 24199  0042C8  6F85               	movwf	(i1integrator@acum+2)& (0+255),b
 24200  0042CA  0E00               	movlw	0
 24201  0042CC  6F86               	movwf	(i1integrator@acum+3)& (0+255),b
 24202                           
 24203                           ;DisplayProtocol.h: 63: long temp = 0;
 24204  0042CE  0E00               	movlw	0
 24205  0042D0  0100               	movlb	0	; () banked
 24206  0042D2  6F87               	movwf	i1integrator@temp& (0+255),b
 24207  0042D4  0E00               	movlw	0
 24208  0042D6  6F88               	movwf	(i1integrator@temp+1)& (0+255),b
 24209  0042D8  0E00               	movlw	0
 24210  0042DA  6F89               	movwf	(i1integrator@temp+2)& (0+255),b
 24211  0042DC  0E00               	movlw	0
 24212  0042DE  6F8A               	movwf	(i1integrator@temp+3)& (0+255),b
 24213                           
 24214                           ;DisplayProtocol.h: 64: int i;
 24215                           ;DisplayProtocol.h: 65: for(i = 0; i < 6; i++) {
 24216  0042E0  0E00               	movlw	0
 24217  0042E2  0100               	movlb	0	; () banked
 24218  0042E4  6F8C               	movwf	(i1integrator@i+1)& (0+255),b
 24219  0042E6  0E00               	movlw	0
 24220  0042E8  6F8B               	movwf	i1integrator@i& (0+255),b
 24221  0042EA                     i1l7461:
 24222                           
 24223                           ; BSR set to: 0
 24224  0042EA  0100               	movlb	0	; () banked
 24225  0042EC  BF8C               	btfsc	(i1integrator@i+1)& (0+255),7,b
 24226  0042EE  D008               	goto	i1l7465
 24227  0042F0  0100               	movlb	0	; () banked
 24228  0042F2  518C               	movf	(i1integrator@i+1)& (0+255),w,b
 24229  0042F4  E152               	bnz	i1l7473
 24230  0042F6  0E06               	movlw	6
 24231  0042F8  0100               	movlb	0	; () banked
 24232  0042FA  5D8B               	subwf	i1integrator@i& (0+255),w,b
 24233  0042FC  B0D8               	btfsc	status,0,c
 24234  0042FE  D04D               	goto	i1l7473
 24235  004300                     i1l7465:
 24236                           
 24237                           ; BSR set to: 0
 24238                           ;DisplayProtocol.h: 66: temp = (long)chanValdig[i]*exp10[i];
 24239  004300  0EA3               	movlw	low _chanValdig
 24240  004302  0100               	movlb	0	; () banked
 24241  004304  258B               	addwf	i1integrator@i& (0+255),w,b
 24242  004306  6ED9               	movwf	fsr2l,c
 24243  004308  0E01               	movlw	high _chanValdig
 24244  00430A  0100               	movlb	0	; () banked
 24245  00430C  218C               	addwfc	(i1integrator@i+1)& (0+255),w,b
 24246  00430E  6EDA               	movwf	fsr2h,c
 24247  004310  50DF               	movf	indf2,w,c
 24248  004312  0100               	movlb	0	; () banked
 24249  004314  6F60               	movwf	i1___lmul@multiplier& (0+255),b
 24250  004316  0E00               	movlw	0
 24251  004318  BF60               	btfsc	i1___lmul@multiplier& (0+255),7,b
 24252  00431A  0EFF               	movlw	-1
 24253  00431C  6F61               	movwf	(i1___lmul@multiplier+1)& (0+255),b
 24254  00431E  6F62               	movwf	(i1___lmul@multiplier+2)& (0+255),b
 24255  004320  6F63               	movwf	(i1___lmul@multiplier+3)& (0+255),b
 24256  004322  0E77               	movlw	low _exp10
 24257  004324  0100               	movlb	0	; () banked
 24258  004326  6F81               	movwf	??i1_integrator& (0+255),b
 24259  004328  0E01               	movlw	high _exp10
 24260  00432A  0100               	movlb	0	; () banked
 24261  00432C  6F82               	movwf	(??i1_integrator+1)& (0+255),b
 24262  00432E  90D8               	bcf	status,0,c
 24263  004330  0100               	movlb	0	; () banked
 24264  004332  358B               	rlcf	i1integrator@i& (0+255),w,b
 24265  004334  6ED9               	movwf	fsr2l,c
 24266  004336  0100               	movlb	0	; () banked
 24267  004338  358C               	rlcf	(i1integrator@i+1)& (0+255),w,b
 24268  00433A  6EDA               	movwf	fsr2h,c
 24269  00433C  90D8               	bcf	status,0,c
 24270  00433E  36D9               	rlcf	fsr2l,f,c
 24271  004340  36DA               	rlcf	fsr2h,f,c
 24272  004342  0100               	movlb	0	; () banked
 24273  004344  5181               	movf	??i1_integrator& (0+255),w,b
 24274  004346  26D9               	addwf	fsr2l,f,c
 24275  004348  0100               	movlb	0	; () banked
 24276  00434A  5182               	movf	(??i1_integrator+1)& (0+255),w,b
 24277  00434C  22DA               	addwfc	fsr2h,f,c
 24278  00434E  CFDE F064          	movff	postinc2,i1___lmul@multiplicand
 24279  004352  CFDE F065          	movff	postinc2,i1___lmul@multiplicand+1
 24280  004356  CFDE F066          	movff	postinc2,i1___lmul@multiplicand+2
 24281  00435A  CFDE F067          	movff	postinc2,i1___lmul@multiplicand+3
 24282  00435E  EC39  F034         	call	i1___lmul	;wreg free
 24283  004362  C060  F087         	movff	?i1___lmul,i1integrator@temp
 24284  004366  C061  F088         	movff	?i1___lmul+1,i1integrator@temp+1
 24285  00436A  C062  F089         	movff	?i1___lmul+2,i1integrator@temp+2
 24286  00436E  C063  F08A         	movff	?i1___lmul+3,i1integrator@temp+3
 24287                           
 24288                           ;DisplayProtocol.h: 67: acum += temp;
 24289  004372  0100               	movlb	0	; () banked
 24290  004374  5187               	movf	i1integrator@temp& (0+255),w,b
 24291  004376  0100               	movlb	0	; () banked
 24292  004378  2783               	addwf	i1integrator@acum& (0+255),f,b
 24293  00437A  0100               	movlb	0	; () banked
 24294  00437C  5188               	movf	(i1integrator@temp+1)& (0+255),w,b
 24295  00437E  0100               	movlb	0	; () banked
 24296  004380  2384               	addwfc	(i1integrator@acum+1)& (0+255),f,b
 24297  004382  0100               	movlb	0	; () banked
 24298  004384  5189               	movf	(i1integrator@temp+2)& (0+255),w,b
 24299  004386  0100               	movlb	0	; () banked
 24300  004388  2385               	addwfc	(i1integrator@acum+2)& (0+255),f,b
 24301  00438A  0100               	movlb	0	; () banked
 24302  00438C  518A               	movf	(i1integrator@temp+3)& (0+255),w,b
 24303  00438E  0100               	movlb	0	; () banked
 24304  004390  2386               	addwfc	(i1integrator@acum+3)& (0+255),f,b
 24305                           
 24306                           ; BSR set to: 0
 24307  004392  0100               	movlb	0	; () banked
 24308  004394  4B8B               	infsnz	i1integrator@i& (0+255),f,b
 24309  004396  2B8C               	incf	(i1integrator@i+1)& (0+255),f,b
 24310  004398  D7A8               	goto	i1l7461
 24311  00439A                     i1l7473:
 24312                           
 24313                           ; BSR set to: 0
 24314                           ;DisplayProtocol.h: 68: }
 24315                           ;DisplayProtocol.h: 69: chanValf = (float)acum / 1000;
 24316  00439A  C083  F068         	movff	i1integrator@acum,i1___altoft@c
 24317  00439E  C084  F069         	movff	i1integrator@acum+1,i1___altoft@c+1
 24318  0043A2  C085  F06A         	movff	i1integrator@acum+2,i1___altoft@c+2
 24319  0043A6  C086  F06B         	movff	i1integrator@acum+3,i1___altoft@c+3
 24320  0043AA  ECA4  F02E         	call	i1___altoft	;wreg free
 24321  0043AE  C068  F072         	movff	?i1___altoft,i1___ftdiv@f1
 24322  0043B2  C069  F073         	movff	?i1___altoft+1,i1___ftdiv@f1+1
 24323  0043B6  C06A  F074         	movff	?i1___altoft+2,i1___ftdiv@f1+2
 24324  0043BA  0E00               	movlw	0
 24325  0043BC  0100               	movlb	0	; () banked
 24326  0043BE  6F75               	movwf	i1___ftdiv@f2& (0+255),b
 24327  0043C0  0E7A               	movlw	122
 24328  0043C2  0100               	movlb	0	; () banked
 24329  0043C4  6F76               	movwf	(i1___ftdiv@f2+1)& (0+255),b
 24330  0043C6  0E44               	movlw	68
 24331  0043C8  0100               	movlb	0	; () banked
 24332  0043CA  6F77               	movwf	(i1___ftdiv@f2+2)& (0+255),b
 24333  0043CC  ECE3  F01E         	call	i1___ftdiv	;wreg free
 24334  0043D0  C072  F1B1         	movff	?i1___ftdiv,_chanValf
 24335  0043D4  C073  F1B2         	movff	?i1___ftdiv+1,_chanValf+1
 24336  0043D8  C074  F1B3         	movff	?i1___ftdiv+2,_chanValf+2
 24337  0043DC  0012               	return		;funcret
 24338  0043DE                     __end_ofi1_integrator:
 24339                           	opt stack 0
 24340                           pclatu	equ	0xFFB
 24341                           pclath	equ	0xFFA
 24342                           tblptru	equ	0xFF8
 24343                           tblptrh	equ	0xFF7
 24344                           tblptrl	equ	0xFF6
 24345                           tablat	equ	0xFF5
 24346                           prodh	equ	0xFF4
 24347                           prodl	equ	0xFF3
 24348                           intcon	equ	0xFF2
 24349                           postinc0	equ	0xFEE
 24350                           fsr0h	equ	0xFEA
 24351                           fsr0l	equ	0xFE9
 24352                           wreg	equ	0xFE8
 24353                           postdec1	equ	0xFE5
 24354                           fsr1h	equ	0xFE2
 24355                           fsr1l	equ	0xFE1
 24356                           bsr	equ	0xFE0
 24357                           indf2	equ	0xFDF
 24358                           postinc2	equ	0xFDE
 24359                           postdec2	equ	0xFDD
 24360                           plusw2	equ	0xFDB
 24361                           fsr2h	equ	0xFDA
 24362                           fsr2l	equ	0xFD9
 24363                           status	equ	0xFD8
 24364                           
 24365 ;; *************** function i1___altoft *****************
 24366 ;; Defined at:
 24367 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\altoft.c"
 24368 ;; Parameters:    Size  Location     Type
 24369 ;;  c               4    8[BANK0 ] long 
 24370 ;; Auto vars:     Size  Location     Type
 24371 ;;  __altoft        1   17[BANK0 ] unsigned char 
 24372 ;;  __altoft        1   16[BANK0 ] unsigned char 
 24373 ;; Return value:  Size  Location     Type
 24374 ;;                  3    8[BANK0 ] float 
 24375 ;; Registers used:
 24376 ;;		wreg, status,2, status,0, cstack
 24377 ;; Tracked objects:
 24378 ;;		On entry : 0/0
 24379 ;;		On exit  : 0/0
 24380 ;;		Unchanged: 0/0
 24381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24382 ;;      Params:         0       4       0       0       0       0       0
 24383 ;;      Locals:         0       2       0       0       0       0       0
 24384 ;;      Temps:          0       4       0       0       0       0       0
 24385 ;;      Totals:         0      10       0       0       0       0       0
 24386 ;;Total ram usage:       10 bytes
 24387 ;; Hardware stack levels used:    1
 24388 ;; Hardware stack levels required when called:    5
 24389 ;; This function calls:
 24390 ;;		i1___ftpack
 24391 ;; This function is called by:
 24392 ;;		i1_integrator
 24393 ;; This function uses a non-reentrant model
 24394 ;;
 24395                           
 24396                           	psect	text103
 24397  005D48                     __ptext103:
 24398                           	opt stack 0
 24399  005D48                     i1___altoft:
 24400                           	opt stack 11
 24401                           
 24402                           ;incstack = 0
 24403  005D48  0E00               	movlw	0
 24404  005D4A  0100               	movlb	0	; () banked
 24405  005D4C  6F71               	movwf	i1___altoft@sign& (0+255),b
 24406  005D4E  0E8E               	movlw	142
 24407  005D50  0100               	movlb	0	; () banked
 24408  005D52  6F70               	movwf	i1___altoft@exp& (0+255),b
 24409                           
 24410                           ; BSR set to: 0
 24411  005D54  0100               	movlb	0	; () banked
 24412  005D56  AF6B               	btfss	(i1___altoft@c+3)& (0+255),7,b
 24413  005D58  D015               	goto	i1l7147
 24414                           
 24415                           ; BSR set to: 0
 24416  005D5A  0100               	movlb	0	; () banked
 24417  005D5C  1F6B               	comf	(i1___altoft@c+3)& (0+255),f,b
 24418  005D5E  1F6A               	comf	(i1___altoft@c+2)& (0+255),f,b
 24419  005D60  1F69               	comf	(i1___altoft@c+1)& (0+255),f,b
 24420  005D62  6D68               	negf	i1___altoft@c& (0+255),b
 24421  005D64  0E00               	movlw	0
 24422  005D66  2369               	addwfc	(i1___altoft@c+1)& (0+255),f,b
 24423  005D68  236A               	addwfc	(i1___altoft@c+2)& (0+255),f,b
 24424  005D6A  236B               	addwfc	(i1___altoft@c+3)& (0+255),f,b
 24425                           
 24426                           ; BSR set to: 0
 24427  005D6C  0E01               	movlw	1
 24428  005D6E  0100               	movlb	0	; () banked
 24429  005D70  6F71               	movwf	i1___altoft@sign& (0+255),b
 24430                           
 24431                           ; BSR set to: 0
 24432  005D72  D008               	goto	i1l7147
 24433  005D74                     i1l7145:
 24434                           
 24435                           ; BSR set to: 0
 24436  005D74  0100               	movlb	0	; () banked
 24437  005D76  90D8               	bcf	status,0,c
 24438  005D78  336B               	rrcf	(i1___altoft@c+3)& (0+255),f,b
 24439  005D7A  336A               	rrcf	(i1___altoft@c+2)& (0+255),f,b
 24440  005D7C  3369               	rrcf	(i1___altoft@c+1)& (0+255),f,b
 24441  005D7E  3368               	rrcf	i1___altoft@c& (0+255),f,b
 24442  005D80  0100               	movlb	0	; () banked
 24443  005D82  2B70               	incf	i1___altoft@exp& (0+255),f,b
 24444  005D84                     i1l7147:
 24445                           
 24446                           ; BSR set to: 0
 24447  005D84  0E00               	movlw	0
 24448  005D86  0100               	movlb	0	; () banked
 24449  005D88  1568               	andwf	i1___altoft@c& (0+255),w,b
 24450  005D8A  0100               	movlb	0	; () banked
 24451  005D8C  6F6C               	movwf	??i1___altoft& (0+255),b
 24452  005D8E  0E00               	movlw	0
 24453  005D90  0100               	movlb	0	; () banked
 24454  005D92  1569               	andwf	(i1___altoft@c+1)& (0+255),w,b
 24455  005D94  0100               	movlb	0	; () banked
 24456  005D96  6F6D               	movwf	(??i1___altoft+1)& (0+255),b
 24457  005D98  0E00               	movlw	0
 24458  005D9A  0100               	movlb	0	; () banked
 24459  005D9C  156A               	andwf	(i1___altoft@c+2)& (0+255),w,b
 24460  005D9E  0100               	movlb	0	; () banked
 24461  005DA0  6F6E               	movwf	(??i1___altoft+2)& (0+255),b
 24462  005DA2  0EFF               	movlw	255
 24463  005DA4  0100               	movlb	0	; () banked
 24464  005DA6  156B               	andwf	(i1___altoft@c+3)& (0+255),w,b
 24465  005DA8  0100               	movlb	0	; () banked
 24466  005DAA  6F6F               	movwf	(??i1___altoft+3)& (0+255),b
 24467  005DAC  0100               	movlb	0	; () banked
 24468  005DAE  516C               	movf	??i1___altoft& (0+255),w,b
 24469  005DB0  0100               	movlb	0	; () banked
 24470  005DB2  116D               	iorwf	(??i1___altoft+1)& (0+255),w,b
 24471  005DB4  0100               	movlb	0	; () banked
 24472  005DB6  116E               	iorwf	(??i1___altoft+2)& (0+255),w,b
 24473  005DB8  0100               	movlb	0	; () banked
 24474  005DBA  116F               	iorwf	(??i1___altoft+3)& (0+255),w,b
 24475  005DBC  A4D8               	btfss	status,2,c
 24476  005DBE  D7DA               	goto	i1l7145
 24477                           
 24478                           ; BSR set to: 0
 24479                           
 24480                           ; BSR set to: 0
 24481  005DC0  C068  F060         	movff	i1___altoft@c,i1___ftpack@arg
 24482  005DC4  C069  F061         	movff	i1___altoft@c+1,i1___ftpack@arg+1
 24483  005DC8  C06A  F062         	movff	i1___altoft@c+2,i1___ftpack@arg+2
 24484  005DCC  C070  F063         	movff	i1___altoft@exp,i1___ftpack@exp
 24485  005DD0  C071  F064         	movff	i1___altoft@sign,i1___ftpack@sign
 24486  005DD4  ECAF  F025         	call	i1___ftpack	;wreg free
 24487  005DD8  C060  F068         	movff	?i1___ftpack,?i1___altoft
 24488  005DDC  C061  F069         	movff	?i1___ftpack+1,?i1___altoft+1
 24489  005DE0  C062  F06A         	movff	?i1___ftpack+2,?i1___altoft+2
 24490  005DE4  0012               	return	
 24491  005DE6                     __end_ofi1___altoft:
 24492                           	opt stack 0
 24493                           pclatu	equ	0xFFB
 24494                           pclath	equ	0xFFA
 24495                           tblptru	equ	0xFF8
 24496                           tblptrh	equ	0xFF7
 24497                           tblptrl	equ	0xFF6
 24498                           tablat	equ	0xFF5
 24499                           prodh	equ	0xFF4
 24500                           prodl	equ	0xFF3
 24501                           intcon	equ	0xFF2
 24502                           postinc0	equ	0xFEE
 24503                           fsr0h	equ	0xFEA
 24504                           fsr0l	equ	0xFE9
 24505                           wreg	equ	0xFE8
 24506                           postdec1	equ	0xFE5
 24507                           fsr1h	equ	0xFE2
 24508                           fsr1l	equ	0xFE1
 24509                           bsr	equ	0xFE0
 24510                           indf2	equ	0xFDF
 24511                           postinc2	equ	0xFDE
 24512                           postdec2	equ	0xFDD
 24513                           plusw2	equ	0xFDB
 24514                           fsr2h	equ	0xFDA
 24515                           fsr2l	equ	0xFD9
 24516                           status	equ	0xFD8
 24517                           
 24518 ;; *************** function i1_desintegrator *****************
 24519 ;; Defined at:
 24520 ;;		line 46 in file "source/DisplayProtocol.h"
 24521 ;; Parameters:    Size  Location     Type
 24522 ;;		None
 24523 ;; Auto vars:     Size  Location     Type
 24524 ;;  desintegrato    4   36[BANK0 ] long 
 24525 ;;  desintegrato    4   32[BANK0 ] long 
 24526 ;;  desintegrato    4   28[BANK0 ] long 
 24527 ;;  desintegrato    3   25[BANK0 ] float 
 24528 ;;  desintegrato    2   40[BANK0 ] int 
 24529 ;; Return value:  Size  Location     Type
 24530 ;;                  1    wreg      void 
 24531 ;; Registers used:
 24532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24533 ;; Tracked objects:
 24534 ;;		On entry : 0/0
 24535 ;;		On exit  : 0/0
 24536 ;;		Unchanged: 0/0
 24537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24538 ;;      Params:         0       0       0       0       0       0       0
 24539 ;;      Locals:         0      17       0       0       0       0       0
 24540 ;;      Temps:          0       2       0       0       0       0       0
 24541 ;;      Totals:         0      19       0       0       0       0       0
 24542 ;;Total ram usage:       19 bytes
 24543 ;; Hardware stack levels used:    1
 24544 ;; Hardware stack levels required when called:    6
 24545 ;; This function calls:
 24546 ;;		i1___aldiv
 24547 ;;		i1___ftmul
 24548 ;;		i1___fttol
 24549 ;;		i1___lmul
 24550 ;; This function is called by:
 24551 ;;		i1_pressENTER
 24552 ;;		i1_longPressENTER
 24553 ;; This function uses a non-reentrant model
 24554 ;;
 24555                           
 24556                           	psect	text104
 24557  00339E                     __ptext104:
 24558                           	opt stack 0
 24559  00339E                     i1_desintegrator:
 24560                           	opt stack 11
 24561                           
 24562                           ;DisplayProtocol.h: 47: chanValSection = 5;
 24563                           
 24564                           ;incstack = 0
 24565  00339E  0E05               	movlw	5
 24566  0033A0  0101               	movlb	1	; () banked
 24567  0033A2  6F9C               	movwf	_chanValSection& (0+255),b
 24568                           
 24569                           ; BSR set to: 1
 24570                           ;DisplayProtocol.h: 48: float temp = (float)chanValf*1000;
 24571  0033A4  C1B1  F068         	movff	_chanValf,i1___ftmul@f1
 24572  0033A8  C1B2  F069         	movff	_chanValf+1,i1___ftmul@f1+1
 24573  0033AC  C1B3  F06A         	movff	_chanValf+2,i1___ftmul@f1+2
 24574  0033B0  0E00               	movlw	0
 24575  0033B2  0100               	movlb	0	; () banked
 24576  0033B4  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 24577  0033B6  0E7A               	movlw	122
 24578  0033B8  0100               	movlb	0	; () banked
 24579  0033BA  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 24580  0033BC  0E44               	movlw	68
 24581  0033BE  0100               	movlb	0	; () banked
 24582  0033C0  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 24583  0033C2  ECE4  F01C         	call	i1___ftmul	;wreg free
 24584  0033C6  C068  F079         	movff	?i1___ftmul,i1desintegrator@temp
 24585  0033CA  C069  F07A         	movff	?i1___ftmul+1,i1desintegrator@temp+1
 24586  0033CE  C06A  F07B         	movff	?i1___ftmul+2,i1desintegrator@temp+2
 24587                           
 24588                           ;DisplayProtocol.h: 49: long tempL = (long)temp;
 24589  0033D2  C079  F060         	movff	i1desintegrator@temp,i1___fttol@f1
 24590  0033D6  C07A  F061         	movff	i1desintegrator@temp+1,i1___fttol@f1+1
 24591  0033DA  C07B  F062         	movff	i1desintegrator@temp+2,i1___fttol@f1+2
 24592  0033DE  EC2B  F020         	call	i1___fttol	;wreg free
 24593  0033E2  C060  F07C         	movff	?i1___fttol,i1desintegrator@tempL
 24594  0033E6  C061  F07D         	movff	?i1___fttol+1,i1desintegrator@tempL+1
 24595  0033EA  C062  F07E         	movff	?i1___fttol+2,i1desintegrator@tempL+2
 24596  0033EE  C063  F07F         	movff	?i1___fttol+3,i1desintegrator@tempL+3
 24597                           
 24598                           ;DisplayProtocol.h: 50: long temp2 = 0;
 24599  0033F2  0E00               	movlw	0
 24600  0033F4  0100               	movlb	0	; () banked
 24601  0033F6  6F84               	movwf	i1desintegrator@temp2& (0+255),b
 24602  0033F8  0E00               	movlw	0
 24603  0033FA  6F85               	movwf	(i1desintegrator@temp2+1)& (0+255),b
 24604  0033FC  0E00               	movlw	0
 24605  0033FE  6F86               	movwf	(i1desintegrator@temp2+2)& (0+255),b
 24606  003400  0E00               	movlw	0
 24607  003402  6F87               	movwf	(i1desintegrator@temp2+3)& (0+255),b
 24608                           
 24609                           ;DisplayProtocol.h: 51: long temp3 = 0;
 24610  003404  0E00               	movlw	0
 24611  003406  0100               	movlb	0	; () banked
 24612  003408  6F80               	movwf	i1desintegrator@temp3& (0+255),b
 24613  00340A  0E00               	movlw	0
 24614  00340C  6F81               	movwf	(i1desintegrator@temp3+1)& (0+255),b
 24615  00340E  0E00               	movlw	0
 24616  003410  6F82               	movwf	(i1desintegrator@temp3+2)& (0+255),b
 24617  003412  0E00               	movlw	0
 24618  003414  6F83               	movwf	(i1desintegrator@temp3+3)& (0+255),b
 24619                           
 24620                           ;DisplayProtocol.h: 52: int i;
 24621                           ;DisplayProtocol.h: 53: for(i = 0; i < 6; i++) {
 24622  003416  0E00               	movlw	0
 24623  003418  0100               	movlb	0	; () banked
 24624  00341A  6F89               	movwf	(i1desintegrator@i+1)& (0+255),b
 24625  00341C  0E00               	movlw	0
 24626  00341E  6F88               	movwf	i1desintegrator@i& (0+255),b
 24627                           
 24628                           ; BSR set to: 0
 24629  003420  0100               	movlb	0	; () banked
 24630  003422  BF89               	btfsc	(i1desintegrator@i+1)& (0+255),7,b
 24631  003424  D00A               	goto	i1l7449
 24632  003426  0100               	movlb	0	; () banked
 24633  003428  5189               	movf	(i1desintegrator@i+1)& (0+255),w,b
 24634  00342A  E106               	bnz	i1u965_20
 24635  00342C  0E06               	movlw	6
 24636  00342E  0100               	movlb	0	; () banked
 24637  003430  5D88               	subwf	i1desintegrator@i& (0+255),w,b
 24638  003432  B0D8               	btfsc	status,0,c
 24639  003434  0012               	return	
 24640  003436  D001               	goto	i1l7449
 24641  003438                     i1u965_20:
 24642                           
 24643                           ; BSR set to: 0
 24644  003438  0012               	return	
 24645  00343A                     i1l7449:
 24646                           
 24647                           ; BSR set to: 0
 24648                           ;DisplayProtocol.h: 54: temp2 = tempL/exp10[i];
 24649  00343A  C07C  F060         	movff	i1desintegrator@tempL,i1___aldiv@dividend
 24650  00343E  C07D  F061         	movff	i1desintegrator@tempL+1,i1___aldiv@dividend+1
 24651  003442  C07E  F062         	movff	i1desintegrator@tempL+2,i1___aldiv@dividend+2
 24652  003446  C07F  F063         	movff	i1desintegrator@tempL+3,i1___aldiv@dividend+3
 24653  00344A  0E77               	movlw	low _exp10
 24654  00344C  0100               	movlb	0	; () banked
 24655  00344E  6F77               	movwf	??i1_desintegrator& (0+255),b
 24656  003450  0E01               	movlw	high _exp10
 24657  003452  0100               	movlb	0	; () banked
 24658  003454  6F78               	movwf	(??i1_desintegrator+1)& (0+255),b
 24659  003456  90D8               	bcf	status,0,c
 24660  003458  0100               	movlb	0	; () banked
 24661  00345A  3588               	rlcf	i1desintegrator@i& (0+255),w,b
 24662  00345C  6ED9               	movwf	fsr2l,c
 24663  00345E  0100               	movlb	0	; () banked
 24664  003460  3589               	rlcf	(i1desintegrator@i+1)& (0+255),w,b
 24665  003462  6EDA               	movwf	fsr2h,c
 24666  003464  90D8               	bcf	status,0,c
 24667  003466  36D9               	rlcf	fsr2l,f,c
 24668  003468  36DA               	rlcf	fsr2h,f,c
 24669  00346A  0100               	movlb	0	; () banked
 24670  00346C  5177               	movf	??i1_desintegrator& (0+255),w,b
 24671  00346E  26D9               	addwf	fsr2l,f,c
 24672  003470  0100               	movlb	0	; () banked
 24673  003472  5178               	movf	(??i1_desintegrator+1)& (0+255),w,b
 24674  003474  22DA               	addwfc	fsr2h,f,c
 24675  003476  CFDE F064          	movff	postinc2,i1___aldiv@divisor
 24676  00347A  CFDE F065          	movff	postinc2,i1___aldiv@divisor+1
 24677  00347E  CFDE F066          	movff	postinc2,i1___aldiv@divisor+2
 24678  003482  CFDE F067          	movff	postinc2,i1___aldiv@divisor+3
 24679  003486  EC7C  F022         	call	i1___aldiv	;wreg free
 24680  00348A  C060  F084         	movff	?i1___aldiv,i1desintegrator@temp2
 24681  00348E  C061  F085         	movff	?i1___aldiv+1,i1desintegrator@temp2+1
 24682  003492  C062  F086         	movff	?i1___aldiv+2,i1desintegrator@temp2+2
 24683  003496  C063  F087         	movff	?i1___aldiv+3,i1desintegrator@temp2+3
 24684                           
 24685                           ;DisplayProtocol.h: 55: temp3 = temp2*exp10[i];
 24686  00349A  0E77               	movlw	low _exp10
 24687  00349C  0100               	movlb	0	; () banked
 24688  00349E  6F77               	movwf	??i1_desintegrator& (0+255),b
 24689  0034A0  0E01               	movlw	high _exp10
 24690  0034A2  0100               	movlb	0	; () banked
 24691  0034A4  6F78               	movwf	(??i1_desintegrator+1)& (0+255),b
 24692  0034A6  90D8               	bcf	status,0,c
 24693  0034A8  0100               	movlb	0	; () banked
 24694  0034AA  3588               	rlcf	i1desintegrator@i& (0+255),w,b
 24695  0034AC  6ED9               	movwf	fsr2l,c
 24696  0034AE  0100               	movlb	0	; () banked
 24697  0034B0  3589               	rlcf	(i1desintegrator@i+1)& (0+255),w,b
 24698  0034B2  6EDA               	movwf	fsr2h,c
 24699  0034B4  90D8               	bcf	status,0,c
 24700  0034B6  36D9               	rlcf	fsr2l,f,c
 24701  0034B8  36DA               	rlcf	fsr2h,f,c
 24702  0034BA  0100               	movlb	0	; () banked
 24703  0034BC  5177               	movf	??i1_desintegrator& (0+255),w,b
 24704  0034BE  26D9               	addwf	fsr2l,f,c
 24705  0034C0  0100               	movlb	0	; () banked
 24706  0034C2  5178               	movf	(??i1_desintegrator+1)& (0+255),w,b
 24707  0034C4  22DA               	addwfc	fsr2h,f,c
 24708  0034C6  CFDE F060          	movff	postinc2,i1___lmul@multiplier
 24709  0034CA  CFDE F061          	movff	postinc2,i1___lmul@multiplier+1
 24710  0034CE  CFDE F062          	movff	postinc2,i1___lmul@multiplier+2
 24711  0034D2  CFDE F063          	movff	postinc2,i1___lmul@multiplier+3
 24712  0034D6  C084  F064         	movff	i1desintegrator@temp2,i1___lmul@multiplicand
 24713  0034DA  C085  F065         	movff	i1desintegrator@temp2+1,i1___lmul@multiplicand+1
 24714  0034DE  C086  F066         	movff	i1desintegrator@temp2+2,i1___lmul@multiplicand+2
 24715  0034E2  C087  F067         	movff	i1desintegrator@temp2+3,i1___lmul@multiplicand+3
 24716  0034E6  EC39  F034         	call	i1___lmul	;wreg free
 24717  0034EA  C060  F080         	movff	?i1___lmul,i1desintegrator@temp3
 24718  0034EE  C061  F081         	movff	?i1___lmul+1,i1desintegrator@temp3+1
 24719  0034F2  C062  F082         	movff	?i1___lmul+2,i1desintegrator@temp3+2
 24720  0034F6  C063  F083         	movff	?i1___lmul+3,i1desintegrator@temp3+3
 24721                           
 24722                           ;DisplayProtocol.h: 56: chanValdig[i] = temp2;
 24723  0034FA  0EA3               	movlw	low _chanValdig
 24724  0034FC  0100               	movlb	0	; () banked
 24725  0034FE  2588               	addwf	i1desintegrator@i& (0+255),w,b
 24726  003500  6ED9               	movwf	fsr2l,c
 24727  003502  0E01               	movlw	high _chanValdig
 24728  003504  0100               	movlb	0	; () banked
 24729  003506  2189               	addwfc	(i1desintegrator@i+1)& (0+255),w,b
 24730  003508  6EDA               	movwf	fsr2h,c
 24731  00350A  C084  FFDF         	movff	i1desintegrator@temp2,indf2
 24732                           
 24733                           ; BSR set to: 0
 24734                           ;DisplayProtocol.h: 57: tempL -= temp3;
 24735  00350E  0100               	movlb	0	; () banked
 24736  003510  5180               	movf	i1desintegrator@temp3& (0+255),w,b
 24737  003512  0100               	movlb	0	; () banked
 24738  003514  5F7C               	subwf	i1desintegrator@tempL& (0+255),f,b
 24739  003516  0100               	movlb	0	; () banked
 24740  003518  5181               	movf	(i1desintegrator@temp3+1)& (0+255),w,b
 24741  00351A  0100               	movlb	0	; () banked
 24742  00351C  5B7D               	subwfb	(i1desintegrator@tempL+1)& (0+255),f,b
 24743  00351E  0100               	movlb	0	; () banked
 24744  003520  5182               	movf	(i1desintegrator@temp3+2)& (0+255),w,b
 24745  003522  0100               	movlb	0	; () banked
 24746  003524  5B7E               	subwfb	(i1desintegrator@tempL+2)& (0+255),f,b
 24747  003526  0100               	movlb	0	; () banked
 24748  003528  5183               	movf	(i1desintegrator@temp3+3)& (0+255),w,b
 24749  00352A  0100               	movlb	0	; () banked
 24750  00352C  5B7F               	subwfb	(i1desintegrator@tempL+3)& (0+255),f,b
 24751                           
 24752                           ; BSR set to: 0
 24753  00352E  0100               	movlb	0	; () banked
 24754  003530  4B88               	infsnz	i1desintegrator@i& (0+255),f,b
 24755  003532  2B89               	incf	(i1desintegrator@i+1)& (0+255),f,b
 24756                           
 24757                           ; BSR set to: 0
 24758  003534  0100               	movlb	0	; () banked
 24759  003536  BF89               	btfsc	(i1desintegrator@i+1)& (0+255),7,b
 24760  003538  D780               	goto	i1l7449
 24761  00353A  0100               	movlb	0	; () banked
 24762  00353C  5189               	movf	(i1desintegrator@i+1)& (0+255),w,b
 24763  00353E  E101               	bnz	i1l574
 24764  003540  D775               	goto	L8
 24765  003542                     i1l574:
 24766                           
 24767                           ; BSR set to: 0
 24768  003542  0012               	return		;funcret
 24769  003544                     __end_ofi1_desintegrator:
 24770                           	opt stack 0
 24771                           pclatu	equ	0xFFB
 24772                           pclath	equ	0xFFA
 24773                           tblptru	equ	0xFF8
 24774                           tblptrh	equ	0xFF7
 24775                           tblptrl	equ	0xFF6
 24776                           tablat	equ	0xFF5
 24777                           prodh	equ	0xFF4
 24778                           prodl	equ	0xFF3
 24779                           intcon	equ	0xFF2
 24780                           postinc0	equ	0xFEE
 24781                           fsr0h	equ	0xFEA
 24782                           fsr0l	equ	0xFE9
 24783                           wreg	equ	0xFE8
 24784                           postdec1	equ	0xFE5
 24785                           fsr1h	equ	0xFE2
 24786                           fsr1l	equ	0xFE1
 24787                           bsr	equ	0xFE0
 24788                           indf2	equ	0xFDF
 24789                           postinc2	equ	0xFDE
 24790                           postdec2	equ	0xFDD
 24791                           plusw2	equ	0xFDB
 24792                           fsr2h	equ	0xFDA
 24793                           fsr2l	equ	0xFD9
 24794                           status	equ	0xFD8
 24795                           
 24796 ;; *************** function i1___lmul *****************
 24797 ;; Defined at:
 24798 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
 24799 ;; Parameters:    Size  Location     Type
 24800 ;;  multiplier      4    0[BANK0 ] unsigned long 
 24801 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 24802 ;; Auto vars:     Size  Location     Type
 24803 ;;  __lmul          4    8[BANK0 ] unsigned long 
 24804 ;; Return value:  Size  Location     Type
 24805 ;;                  4    0[BANK0 ] unsigned long 
 24806 ;; Registers used:
 24807 ;;		wreg, status,2, status,0
 24808 ;; Tracked objects:
 24809 ;;		On entry : 0/0
 24810 ;;		On exit  : 0/0
 24811 ;;		Unchanged: 0/0
 24812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24813 ;;      Params:         0       8       0       0       0       0       0
 24814 ;;      Locals:         0       4       0       0       0       0       0
 24815 ;;      Temps:          0       0       0       0       0       0       0
 24816 ;;      Totals:         0      12       0       0       0       0       0
 24817 ;;Total ram usage:       12 bytes
 24818 ;; Hardware stack levels used:    1
 24819 ;; Hardware stack levels required when called:    4
 24820 ;; This function calls:
 24821 ;;		Nothing
 24822 ;; This function is called by:
 24823 ;;		i1_desintegrator
 24824 ;;		i1_integrator
 24825 ;; This function uses a non-reentrant model
 24826 ;;
 24827                           
 24828                           	psect	text105
 24829  006872                     __ptext105:
 24830                           	opt stack 0
 24831  006872                     i1___lmul:
 24832                           	opt stack 12
 24833                           
 24834                           ; BSR set to: 0
 24835                           ;incstack = 0
 24836  006872  0E00               	movlw	0
 24837  006874  0100               	movlb	0	; () banked
 24838  006876  6F68               	movwf	i1___lmul@product& (0+255),b
 24839  006878  0E00               	movlw	0
 24840  00687A  6F69               	movwf	(i1___lmul@product+1)& (0+255),b
 24841  00687C  0E00               	movlw	0
 24842  00687E  6F6A               	movwf	(i1___lmul@product+2)& (0+255),b
 24843  006880  0E00               	movlw	0
 24844  006882  6F6B               	movwf	(i1___lmul@product+3)& (0+255),b
 24845  006884                     i1l7085:
 24846                           
 24847                           ; BSR set to: 0
 24848  006884  0100               	movlb	0	; () banked
 24849  006886  A160               	btfss	i1___lmul@multiplier& (0+255),0,b
 24850  006888  D010               	goto	i1l7089
 24851                           
 24852                           ; BSR set to: 0
 24853  00688A  0100               	movlb	0	; () banked
 24854  00688C  5164               	movf	i1___lmul@multiplicand& (0+255),w,b
 24855  00688E  0100               	movlb	0	; () banked
 24856  006890  2768               	addwf	i1___lmul@product& (0+255),f,b
 24857  006892  0100               	movlb	0	; () banked
 24858  006894  5165               	movf	(i1___lmul@multiplicand+1)& (0+255),w,b
 24859  006896  0100               	movlb	0	; () banked
 24860  006898  2369               	addwfc	(i1___lmul@product+1)& (0+255),f,b
 24861  00689A  0100               	movlb	0	; () banked
 24862  00689C  5166               	movf	(i1___lmul@multiplicand+2)& (0+255),w,b
 24863  00689E  0100               	movlb	0	; () banked
 24864  0068A0  236A               	addwfc	(i1___lmul@product+2)& (0+255),f,b
 24865  0068A2  0100               	movlb	0	; () banked
 24866  0068A4  5167               	movf	(i1___lmul@multiplicand+3)& (0+255),w,b
 24867  0068A6  0100               	movlb	0	; () banked
 24868  0068A8  236B               	addwfc	(i1___lmul@product+3)& (0+255),f,b
 24869  0068AA                     i1l7089:
 24870                           
 24871                           ; BSR set to: 0
 24872  0068AA  0100               	movlb	0	; () banked
 24873  0068AC  90D8               	bcf	status,0,c
 24874  0068AE  3764               	rlcf	i1___lmul@multiplicand& (0+255),f,b
 24875  0068B0  3765               	rlcf	(i1___lmul@multiplicand+1)& (0+255),f,b
 24876  0068B2  3766               	rlcf	(i1___lmul@multiplicand+2)& (0+255),f,b
 24877  0068B4  3767               	rlcf	(i1___lmul@multiplicand+3)& (0+255),f,b
 24878                           
 24879                           ; BSR set to: 0
 24880  0068B6  0100               	movlb	0	; () banked
 24881  0068B8  90D8               	bcf	status,0,c
 24882  0068BA  3363               	rrcf	(i1___lmul@multiplier+3)& (0+255),f,b
 24883  0068BC  3362               	rrcf	(i1___lmul@multiplier+2)& (0+255),f,b
 24884  0068BE  3361               	rrcf	(i1___lmul@multiplier+1)& (0+255),f,b
 24885  0068C0  3360               	rrcf	i1___lmul@multiplier& (0+255),f,b
 24886  0068C2  0100               	movlb	0	; () banked
 24887  0068C4  5160               	movf	i1___lmul@multiplier& (0+255),w,b
 24888  0068C6  0100               	movlb	0	; () banked
 24889  0068C8  1161               	iorwf	(i1___lmul@multiplier+1)& (0+255),w,b
 24890  0068CA  0100               	movlb	0	; () banked
 24891  0068CC  1162               	iorwf	(i1___lmul@multiplier+2)& (0+255),w,b
 24892  0068CE  0100               	movlb	0	; () banked
 24893  0068D0  1163               	iorwf	(i1___lmul@multiplier+3)& (0+255),w,b
 24894  0068D2  A4D8               	btfss	status,2,c
 24895  0068D4  D7D7               	goto	i1l7085
 24896                           
 24897                           ; BSR set to: 0
 24898  0068D6  C068  F060         	movff	i1___lmul@product,?i1___lmul
 24899  0068DA  C069  F061         	movff	i1___lmul@product+1,?i1___lmul+1
 24900  0068DE  C06A  F062         	movff	i1___lmul@product+2,?i1___lmul+2
 24901  0068E2  C06B  F063         	movff	i1___lmul@product+3,?i1___lmul+3
 24902                           
 24903                           ; BSR set to: 0
 24904  0068E6  0012               	return		;funcret
 24905  0068E8                     __end_ofi1___lmul:
 24906                           	opt stack 0
 24907                           pclatu	equ	0xFFB
 24908                           pclath	equ	0xFFA
 24909                           tblptru	equ	0xFF8
 24910                           tblptrh	equ	0xFF7
 24911                           tblptrl	equ	0xFF6
 24912                           tablat	equ	0xFF5
 24913                           prodh	equ	0xFF4
 24914                           prodl	equ	0xFF3
 24915                           intcon	equ	0xFF2
 24916                           postinc0	equ	0xFEE
 24917                           fsr0h	equ	0xFEA
 24918                           fsr0l	equ	0xFE9
 24919                           wreg	equ	0xFE8
 24920                           postdec1	equ	0xFE5
 24921                           fsr1h	equ	0xFE2
 24922                           fsr1l	equ	0xFE1
 24923                           bsr	equ	0xFE0
 24924                           indf2	equ	0xFDF
 24925                           postinc2	equ	0xFDE
 24926                           postdec2	equ	0xFDD
 24927                           plusw2	equ	0xFDB
 24928                           fsr2h	equ	0xFDA
 24929                           fsr2l	equ	0xFD9
 24930                           status	equ	0xFD8
 24931                           
 24932 ;; *************** function i1___fttol *****************
 24933 ;; Defined at:
 24934 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
 24935 ;; Parameters:    Size  Location     Type
 24936 ;;  f1              3    0[BANK0 ] float 
 24937 ;; Auto vars:     Size  Location     Type
 24938 ;;  __fttol         4   10[BANK0 ] unsigned long 
 24939 ;;  __fttol         1   14[BANK0 ] unsigned char 
 24940 ;;  __fttol         1    9[BANK0 ] unsigned char 
 24941 ;; Return value:  Size  Location     Type
 24942 ;;                  4    0[BANK0 ] long 
 24943 ;; Registers used:
 24944 ;;		wreg, status,2, status,0
 24945 ;; Tracked objects:
 24946 ;;		On entry : 0/0
 24947 ;;		On exit  : 0/0
 24948 ;;		Unchanged: 0/0
 24949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24950 ;;      Params:         0       4       0       0       0       0       0
 24951 ;;      Locals:         0       6       0       0       0       0       0
 24952 ;;      Temps:          0       5       0       0       0       0       0
 24953 ;;      Totals:         0      15       0       0       0       0       0
 24954 ;;Total ram usage:       15 bytes
 24955 ;; Hardware stack levels used:    1
 24956 ;; Hardware stack levels required when called:    4
 24957 ;; This function calls:
 24958 ;;		Nothing
 24959 ;; This function is called by:
 24960 ;;		i1_desintegrator
 24961 ;; This function uses a non-reentrant model
 24962 ;;
 24963                           
 24964                           	psect	text106
 24965  004056                     __ptext106:
 24966                           	opt stack 0
 24967  004056                     i1___fttol:
 24968                           	opt stack 12
 24969                           
 24970                           ; BSR set to: 0
 24971                           ;incstack = 0
 24972  004056  C062  F064         	movff	i1___fttol@f1+2,??i1___fttol
 24973  00405A  0100               	movlb	0	; () banked
 24974  00405C  6B65               	clrf	(??i1___fttol+1)& (0+255),b
 24975  00405E  6B66               	clrf	(??i1___fttol+2)& (0+255),b
 24976  004060  0100               	movlb	0	; () banked
 24977  004062  3561               	rlcf	(i1___fttol@f1+1)& (0+255),w,b
 24978  004064  0100               	movlb	0	; () banked
 24979  004066  3764               	rlcf	??i1___fttol& (0+255),f,b
 24980  004068  E301               	bnc	u919_21
 24981  00406A  8165               	bsf	(??i1___fttol+1)& (0+255),0,b
 24982  00406C                     u919_21:
 24983  00406C  0100               	movlb	0	; () banked
 24984  00406E  5164               	movf	??i1___fttol& (0+255),w,b
 24985  004070  0100               	movlb	0	; () banked
 24986  004072  6F6E               	movwf	i1___fttol@exp1& (0+255),b
 24987  004074  0100               	movlb	0	; () banked
 24988  004076  516E               	movf	i1___fttol@exp1& (0+255),w,b
 24989  004078  A4D8               	btfss	status,2,c
 24990  00407A  D00A               	goto	i1l7159
 24991                           
 24992                           ; BSR set to: 0
 24993  00407C  0E00               	movlw	0
 24994  00407E  0100               	movlb	0	; () banked
 24995  004080  6F60               	movwf	?i1___fttol& (0+255),b
 24996  004082  0E00               	movlw	0
 24997  004084  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 24998  004086  0E00               	movlw	0
 24999  004088  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 25000  00408A  0E00               	movlw	0
 25001  00408C  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 25002                           
 25003                           ; BSR set to: 0
 25004  00408E  0012               	return	
 25005  004090                     i1l7159:
 25006                           
 25007                           ; BSR set to: 0
 25008  004090  0E17               	movlw	23
 25009  004092  0100               	movlb	0	; () banked
 25010  004094  6F64               	movwf	??i1___fttol& (0+255),b
 25011  004096  C060  F065         	movff	i1___fttol@f1,??i1___fttol+1
 25012  00409A  C061  F066         	movff	i1___fttol@f1+1,??i1___fttol+2
 25013  00409E  C062  F067         	movff	i1___fttol@f1+2,??i1___fttol+3
 25014  0040A2  0100               	movlb	0	; () banked
 25015  0040A4  2964               	incf	??i1___fttol& (0+255),w,b
 25016  0040A6  0100               	movlb	0	; () banked
 25017  0040A8  6F68               	movwf	(??i1___fttol+4)& (0+255),b
 25018  0040AA  D005               	goto	i1u921_20
 25019  0040AC                     i1u921_25:
 25020  0040AC  0100               	movlb	0	; () banked
 25021  0040AE  90D8               	bcf	status,0,c
 25022  0040B0  3367               	rrcf	(??i1___fttol+3)& (0+255),f,b
 25023  0040B2  3366               	rrcf	(??i1___fttol+2)& (0+255),f,b
 25024  0040B4  3365               	rrcf	(??i1___fttol+1)& (0+255),f,b
 25025  0040B6                     i1u921_20:
 25026  0040B6  0100               	movlb	0	; () banked
 25027  0040B8  2F68               	decfsz	(??i1___fttol+4)& (0+255),f,b
 25028  0040BA  D7F8               	goto	i1u921_25
 25029  0040BC  0100               	movlb	0	; () banked
 25030  0040BE  5165               	movf	(??i1___fttol+1)& (0+255),w,b
 25031  0040C0  0100               	movlb	0	; () banked
 25032  0040C2  6F69               	movwf	i1___fttol@sign1& (0+255),b
 25033                           
 25034                           ; BSR set to: 0
 25035  0040C4  0100               	movlb	0	; () banked
 25036  0040C6  8F61               	bsf	(i1___fttol@f1+1)& (0+255),7,b
 25037                           
 25038                           ; BSR set to: 0
 25039  0040C8  0EFF               	movlw	255
 25040  0040CA  0100               	movlb	0	; () banked
 25041  0040CC  1760               	andwf	i1___fttol@f1& (0+255),f,b
 25042  0040CE  0EFF               	movlw	255
 25043  0040D0  0100               	movlb	0	; () banked
 25044  0040D2  1761               	andwf	(i1___fttol@f1+1)& (0+255),f,b
 25045  0040D4  0E00               	movlw	0
 25046  0040D6  0100               	movlb	0	; () banked
 25047  0040D8  1762               	andwf	(i1___fttol@f1+2)& (0+255),f,b
 25048                           
 25049                           ; BSR set to: 0
 25050  0040DA  0100               	movlb	0	; () banked
 25051  0040DC  5160               	movf	i1___fttol@f1& (0+255),w,b
 25052  0040DE  0100               	movlb	0	; () banked
 25053  0040E0  6F6A               	movwf	i1___fttol@lval& (0+255),b
 25054  0040E2  0100               	movlb	0	; () banked
 25055  0040E4  5161               	movf	(i1___fttol@f1+1)& (0+255),w,b
 25056  0040E6  0100               	movlb	0	; () banked
 25057  0040E8  6F6B               	movwf	(i1___fttol@lval+1)& (0+255),b
 25058  0040EA  0100               	movlb	0	; () banked
 25059  0040EC  5162               	movf	(i1___fttol@f1+2)& (0+255),w,b
 25060  0040EE  0100               	movlb	0	; () banked
 25061  0040F0  6F6C               	movwf	(i1___fttol@lval+2)& (0+255),b
 25062  0040F2  0100               	movlb	0	; () banked
 25063  0040F4  6B6D               	clrf	(i1___fttol@lval+3)& (0+255),b
 25064                           
 25065                           ; BSR set to: 0
 25066  0040F6  0E8E               	movlw	142
 25067  0040F8  0100               	movlb	0	; () banked
 25068  0040FA  5F6E               	subwf	i1___fttol@exp1& (0+255),f,b
 25069                           
 25070                           ; BSR set to: 0
 25071  0040FC  0100               	movlb	0	; () banked
 25072  0040FE  AF6E               	btfss	i1___fttol@exp1& (0+255),7,b
 25073  004100  D01A               	goto	i1l7181
 25074                           
 25075                           ; BSR set to: 0
 25076  004102  0100               	movlb	0	; () banked
 25077  004104  516E               	movf	i1___fttol@exp1& (0+255),w,b
 25078  004106  0A80               	xorlw	128
 25079  004108  0F8F               	addlw	143
 25080  00410A  B0D8               	btfsc	status,0,c
 25081  00410C  D00A               	goto	i1l7177
 25082                           
 25083                           ; BSR set to: 0
 25084  00410E  0E00               	movlw	0
 25085  004110  0100               	movlb	0	; () banked
 25086  004112  6F60               	movwf	?i1___fttol& (0+255),b
 25087  004114  0E00               	movlw	0
 25088  004116  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 25089  004118  0E00               	movlw	0
 25090  00411A  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 25091  00411C  0E00               	movlw	0
 25092  00411E  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 25093                           
 25094                           ; BSR set to: 0
 25095  004120  0012               	return	
 25096  004122                     i1l7177:
 25097                           
 25098                           ; BSR set to: 0
 25099  004122  0100               	movlb	0	; () banked
 25100  004124  90D8               	bcf	status,0,c
 25101  004126  336D               	rrcf	(i1___fttol@lval+3)& (0+255),f,b
 25102  004128  336C               	rrcf	(i1___fttol@lval+2)& (0+255),f,b
 25103  00412A  336B               	rrcf	(i1___fttol@lval+1)& (0+255),f,b
 25104  00412C  336A               	rrcf	i1___fttol@lval& (0+255),f,b
 25105                           
 25106                           ; BSR set to: 0
 25107  00412E  0100               	movlb	0	; () banked
 25108  004130  3F6E               	incfsz	i1___fttol@exp1& (0+255),f,b
 25109  004132  D7F7               	goto	i1l7177
 25110                           
 25111                           ; BSR set to: 0
 25112  004134  D01B               	goto	i1l7191
 25113  004136                     i1l7181:
 25114                           
 25115                           ; BSR set to: 0
 25116  004136  0E17               	movlw	23
 25117  004138  0100               	movlb	0	; () banked
 25118  00413A  656E               	cpfsgt	i1___fttol@exp1& (0+255),b
 25119  00413C  D012               	goto	i1l7189
 25120                           
 25121                           ; BSR set to: 0
 25122  00413E  0E00               	movlw	0
 25123  004140  0100               	movlb	0	; () banked
 25124  004142  6F60               	movwf	?i1___fttol& (0+255),b
 25125  004144  0E00               	movlw	0
 25126  004146  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 25127  004148  0E00               	movlw	0
 25128  00414A  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 25129  00414C  0E00               	movlw	0
 25130  00414E  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 25131                           
 25132                           ; BSR set to: 0
 25133  004150  0012               	return	
 25134  004152                     i1l7187:
 25135                           
 25136                           ; BSR set to: 0
 25137  004152  0100               	movlb	0	; () banked
 25138  004154  90D8               	bcf	status,0,c
 25139  004156  376A               	rlcf	i1___fttol@lval& (0+255),f,b
 25140  004158  376B               	rlcf	(i1___fttol@lval+1)& (0+255),f,b
 25141  00415A  376C               	rlcf	(i1___fttol@lval+2)& (0+255),f,b
 25142  00415C  376D               	rlcf	(i1___fttol@lval+3)& (0+255),f,b
 25143  00415E  0100               	movlb	0	; () banked
 25144  004160  076E               	decf	i1___fttol@exp1& (0+255),f,b
 25145  004162                     i1l7189:
 25146                           
 25147                           ; BSR set to: 0
 25148  004162  0100               	movlb	0	; () banked
 25149  004164  516E               	movf	i1___fttol@exp1& (0+255),w,b
 25150  004166  0100               	movlb	0	; () banked
 25151  004168  A4D8               	btfss	status,2,c
 25152  00416A  D7F3               	goto	i1l7187
 25153  00416C                     i1l7191:
 25154                           
 25155                           ; BSR set to: 0
 25156  00416C  0100               	movlb	0	; () banked
 25157  00416E  5169               	movf	i1___fttol@sign1& (0+255),w,b
 25158  004170  0100               	movlb	0	; () banked
 25159  004172  B4D8               	btfsc	status,2,c
 25160  004174  D009               	goto	i1l7195
 25161                           
 25162                           ; BSR set to: 0
 25163  004176  0100               	movlb	0	; () banked
 25164  004178  1F6D               	comf	(i1___fttol@lval+3)& (0+255),f,b
 25165  00417A  1F6C               	comf	(i1___fttol@lval+2)& (0+255),f,b
 25166  00417C  1F6B               	comf	(i1___fttol@lval+1)& (0+255),f,b
 25167  00417E  6D6A               	negf	i1___fttol@lval& (0+255),b
 25168  004180  0E00               	movlw	0
 25169  004182  236B               	addwfc	(i1___fttol@lval+1)& (0+255),f,b
 25170  004184  236C               	addwfc	(i1___fttol@lval+2)& (0+255),f,b
 25171  004186  236D               	addwfc	(i1___fttol@lval+3)& (0+255),f,b
 25172  004188                     i1l7195:
 25173                           
 25174                           ; BSR set to: 0
 25175  004188  C06A  F060         	movff	i1___fttol@lval,?i1___fttol
 25176  00418C  C06B  F061         	movff	i1___fttol@lval+1,?i1___fttol+1
 25177  004190  C06C  F062         	movff	i1___fttol@lval+2,?i1___fttol+2
 25178  004194  C06D  F063         	movff	i1___fttol@lval+3,?i1___fttol+3
 25179  004198  0012               	return	
 25180  00419A                     __end_ofi1___fttol:
 25181                           	opt stack 0
 25182                           pclatu	equ	0xFFB
 25183                           pclath	equ	0xFFA
 25184                           tblptru	equ	0xFF8
 25185                           tblptrh	equ	0xFF7
 25186                           tblptrl	equ	0xFF6
 25187                           tablat	equ	0xFF5
 25188                           prodh	equ	0xFF4
 25189                           prodl	equ	0xFF3
 25190                           intcon	equ	0xFF2
 25191                           postinc0	equ	0xFEE
 25192                           fsr0h	equ	0xFEA
 25193                           fsr0l	equ	0xFE9
 25194                           wreg	equ	0xFE8
 25195                           postdec1	equ	0xFE5
 25196                           fsr1h	equ	0xFE2
 25197                           fsr1l	equ	0xFE1
 25198                           bsr	equ	0xFE0
 25199                           indf2	equ	0xFDF
 25200                           postinc2	equ	0xFDE
 25201                           postdec2	equ	0xFDD
 25202                           plusw2	equ	0xFDB
 25203                           fsr2h	equ	0xFDA
 25204                           fsr2l	equ	0xFD9
 25205                           status	equ	0xFD8
 25206                           
 25207 ;; *************** function i1___aldiv *****************
 25208 ;; Defined at:
 25209 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
 25210 ;; Parameters:    Size  Location     Type
 25211 ;;  dividend        4    0[BANK0 ] long 
 25212 ;;  divisor         4    4[BANK0 ] long 
 25213 ;; Auto vars:     Size  Location     Type
 25214 ;;  __aldiv         4   10[BANK0 ] long 
 25215 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 25216 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 25217 ;; Return value:  Size  Location     Type
 25218 ;;                  4    0[BANK0 ] long 
 25219 ;; Registers used:
 25220 ;;		wreg, status,2, status,0
 25221 ;; Tracked objects:
 25222 ;;		On entry : 0/0
 25223 ;;		On exit  : 0/0
 25224 ;;		Unchanged: 0/0
 25225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25226 ;;      Params:         0       8       0       0       0       0       0
 25227 ;;      Locals:         0       6       0       0       0       0       0
 25228 ;;      Temps:          0       0       0       0       0       0       0
 25229 ;;      Totals:         0      14       0       0       0       0       0
 25230 ;;Total ram usage:       14 bytes
 25231 ;; Hardware stack levels used:    1
 25232 ;; Hardware stack levels required when called:    4
 25233 ;; This function calls:
 25234 ;;		Nothing
 25235 ;; This function is called by:
 25236 ;;		i1_desintegrator
 25237 ;; This function uses a non-reentrant model
 25238 ;;
 25239                           
 25240                           	psect	text107
 25241  0044F8                     __ptext107:
 25242                           	opt stack 0
 25243  0044F8                     i1___aldiv:
 25244                           	opt stack 12
 25245                           
 25246                           ; BSR set to: 0
 25247                           ;incstack = 0
 25248  0044F8  0E00               	movlw	0
 25249  0044FA  0100               	movlb	0	; () banked
 25250  0044FC  6F69               	movwf	i1___aldiv@sign& (0+255),b
 25251                           
 25252                           ; BSR set to: 0
 25253  0044FE  0100               	movlb	0	; () banked
 25254  004500  AF67               	btfss	(i1___aldiv@divisor+3)& (0+255),7,b
 25255  004502  D00C               	goto	i1l7101
 25256                           
 25257                           ; BSR set to: 0
 25258  004504  0100               	movlb	0	; () banked
 25259  004506  1F67               	comf	(i1___aldiv@divisor+3)& (0+255),f,b
 25260  004508  1F66               	comf	(i1___aldiv@divisor+2)& (0+255),f,b
 25261  00450A  1F65               	comf	(i1___aldiv@divisor+1)& (0+255),f,b
 25262  00450C  6D64               	negf	i1___aldiv@divisor& (0+255),b
 25263  00450E  0E00               	movlw	0
 25264  004510  2365               	addwfc	(i1___aldiv@divisor+1)& (0+255),f,b
 25265  004512  2366               	addwfc	(i1___aldiv@divisor+2)& (0+255),f,b
 25266  004514  2367               	addwfc	(i1___aldiv@divisor+3)& (0+255),f,b
 25267                           
 25268                           ; BSR set to: 0
 25269  004516  0E01               	movlw	1
 25270  004518  0100               	movlb	0	; () banked
 25271  00451A  6F69               	movwf	i1___aldiv@sign& (0+255),b
 25272  00451C                     i1l7101:
 25273                           
 25274                           ; BSR set to: 0
 25275  00451C  0100               	movlb	0	; () banked
 25276  00451E  AF63               	btfss	(i1___aldiv@dividend+3)& (0+255),7,b
 25277  004520  D00C               	goto	i1l7107
 25278                           
 25279                           ; BSR set to: 0
 25280  004522  0100               	movlb	0	; () banked
 25281  004524  1F63               	comf	(i1___aldiv@dividend+3)& (0+255),f,b
 25282  004526  1F62               	comf	(i1___aldiv@dividend+2)& (0+255),f,b
 25283  004528  1F61               	comf	(i1___aldiv@dividend+1)& (0+255),f,b
 25284  00452A  6D60               	negf	i1___aldiv@dividend& (0+255),b
 25285  00452C  0E00               	movlw	0
 25286  00452E  2361               	addwfc	(i1___aldiv@dividend+1)& (0+255),f,b
 25287  004530  2362               	addwfc	(i1___aldiv@dividend+2)& (0+255),f,b
 25288  004532  2363               	addwfc	(i1___aldiv@dividend+3)& (0+255),f,b
 25289                           
 25290                           ; BSR set to: 0
 25291  004534  0E01               	movlw	1
 25292  004536  0100               	movlb	0	; () banked
 25293  004538  1B69               	xorwf	i1___aldiv@sign& (0+255),f,b
 25294  00453A                     i1l7107:
 25295                           
 25296                           ; BSR set to: 0
 25297  00453A  0E00               	movlw	0
 25298  00453C  0100               	movlb	0	; () banked
 25299  00453E  6F6A               	movwf	i1___aldiv@quotient& (0+255),b
 25300  004540  0E00               	movlw	0
 25301  004542  6F6B               	movwf	(i1___aldiv@quotient+1)& (0+255),b
 25302  004544  0E00               	movlw	0
 25303  004546  6F6C               	movwf	(i1___aldiv@quotient+2)& (0+255),b
 25304  004548  0E00               	movlw	0
 25305  00454A  6F6D               	movwf	(i1___aldiv@quotient+3)& (0+255),b
 25306                           
 25307                           ; BSR set to: 0
 25308  00454C  0100               	movlb	0	; () banked
 25309  00454E  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 25310  004550  0100               	movlb	0	; () banked
 25311  004552  1165               	iorwf	(i1___aldiv@divisor+1)& (0+255),w,b
 25312  004554  0100               	movlb	0	; () banked
 25313  004556  1166               	iorwf	(i1___aldiv@divisor+2)& (0+255),w,b
 25314  004558  0100               	movlb	0	; () banked
 25315  00455A  1167               	iorwf	(i1___aldiv@divisor+3)& (0+255),w,b
 25316  00455C  B4D8               	btfsc	status,2,c
 25317  00455E  D042               	goto	i1l7129
 25318                           
 25319                           ; BSR set to: 0
 25320  004560  0E01               	movlw	1
 25321  004562  0100               	movlb	0	; () banked
 25322  004564  6F68               	movwf	i1___aldiv@counter& (0+255),b
 25323  004566  D008               	goto	i1l7115
 25324  004568                     i1l7113:
 25325                           
 25326                           ; BSR set to: 0
 25327  004568  0100               	movlb	0	; () banked
 25328  00456A  90D8               	bcf	status,0,c
 25329  00456C  3764               	rlcf	i1___aldiv@divisor& (0+255),f,b
 25330  00456E  3765               	rlcf	(i1___aldiv@divisor+1)& (0+255),f,b
 25331  004570  3766               	rlcf	(i1___aldiv@divisor+2)& (0+255),f,b
 25332  004572  3767               	rlcf	(i1___aldiv@divisor+3)& (0+255),f,b
 25333  004574  0100               	movlb	0	; () banked
 25334  004576  2B68               	incf	i1___aldiv@counter& (0+255),f,b
 25335  004578                     i1l7115:
 25336                           
 25337                           ; BSR set to: 0
 25338  004578  0100               	movlb	0	; () banked
 25339  00457A  AF67               	btfss	(i1___aldiv@divisor+3)& (0+255),7,b
 25340  00457C  D7F5               	goto	i1l7113
 25341  00457E                     i1l7117:
 25342                           
 25343                           ; BSR set to: 0
 25344  00457E  0100               	movlb	0	; () banked
 25345  004580  90D8               	bcf	status,0,c
 25346  004582  376A               	rlcf	i1___aldiv@quotient& (0+255),f,b
 25347  004584  376B               	rlcf	(i1___aldiv@quotient+1)& (0+255),f,b
 25348  004586  376C               	rlcf	(i1___aldiv@quotient+2)& (0+255),f,b
 25349  004588  376D               	rlcf	(i1___aldiv@quotient+3)& (0+255),f,b
 25350                           
 25351                           ; BSR set to: 0
 25352  00458A  0100               	movlb	0	; () banked
 25353  00458C  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 25354  00458E  0100               	movlb	0	; () banked
 25355  004590  5D60               	subwf	i1___aldiv@dividend& (0+255),w,b
 25356  004592  0100               	movlb	0	; () banked
 25357  004594  5165               	movf	(i1___aldiv@divisor+1)& (0+255),w,b
 25358  004596  0100               	movlb	0	; () banked
 25359  004598  5961               	subwfb	(i1___aldiv@dividend+1)& (0+255),w,b
 25360  00459A  0100               	movlb	0	; () banked
 25361  00459C  5166               	movf	(i1___aldiv@divisor+2)& (0+255),w,b
 25362  00459E  0100               	movlb	0	; () banked
 25363  0045A0  5962               	subwfb	(i1___aldiv@dividend+2)& (0+255),w,b
 25364  0045A2  0100               	movlb	0	; () banked
 25365  0045A4  5167               	movf	(i1___aldiv@divisor+3)& (0+255),w,b
 25366  0045A6  0100               	movlb	0	; () banked
 25367  0045A8  5963               	subwfb	(i1___aldiv@dividend+3)& (0+255),w,b
 25368  0045AA  A0D8               	btfss	status,0,c
 25369  0045AC  D012               	goto	i1l7125
 25370                           
 25371                           ; BSR set to: 0
 25372  0045AE  0100               	movlb	0	; () banked
 25373  0045B0  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 25374  0045B2  0100               	movlb	0	; () banked
 25375  0045B4  5F60               	subwf	i1___aldiv@dividend& (0+255),f,b
 25376  0045B6  0100               	movlb	0	; () banked
 25377  0045B8  5165               	movf	(i1___aldiv@divisor+1)& (0+255),w,b
 25378  0045BA  0100               	movlb	0	; () banked
 25379  0045BC  5B61               	subwfb	(i1___aldiv@dividend+1)& (0+255),f,b
 25380  0045BE  0100               	movlb	0	; () banked
 25381  0045C0  5166               	movf	(i1___aldiv@divisor+2)& (0+255),w,b
 25382  0045C2  0100               	movlb	0	; () banked
 25383  0045C4  5B62               	subwfb	(i1___aldiv@dividend+2)& (0+255),f,b
 25384  0045C6  0100               	movlb	0	; () banked
 25385  0045C8  5167               	movf	(i1___aldiv@divisor+3)& (0+255),w,b
 25386  0045CA  0100               	movlb	0	; () banked
 25387  0045CC  5B63               	subwfb	(i1___aldiv@dividend+3)& (0+255),f,b
 25388                           
 25389                           ; BSR set to: 0
 25390  0045CE  0100               	movlb	0	; () banked
 25391  0045D0  816A               	bsf	i1___aldiv@quotient& (0+255),0,b
 25392  0045D2                     i1l7125:
 25393                           
 25394                           ; BSR set to: 0
 25395  0045D2  0100               	movlb	0	; () banked
 25396  0045D4  90D8               	bcf	status,0,c
 25397  0045D6  3367               	rrcf	(i1___aldiv@divisor+3)& (0+255),f,b
 25398  0045D8  3366               	rrcf	(i1___aldiv@divisor+2)& (0+255),f,b
 25399  0045DA  3365               	rrcf	(i1___aldiv@divisor+1)& (0+255),f,b
 25400  0045DC  3364               	rrcf	i1___aldiv@divisor& (0+255),f,b
 25401                           
 25402                           ; BSR set to: 0
 25403  0045DE  0100               	movlb	0	; () banked
 25404  0045E0  2F68               	decfsz	i1___aldiv@counter& (0+255),f,b
 25405  0045E2  D7CD               	goto	i1l7117
 25406  0045E4                     i1l7129:
 25407                           
 25408                           ; BSR set to: 0
 25409  0045E4  0100               	movlb	0	; () banked
 25410  0045E6  5169               	movf	i1___aldiv@sign& (0+255),w,b
 25411  0045E8  0100               	movlb	0	; () banked
 25412  0045EA  B4D8               	btfsc	status,2,c
 25413  0045EC  D009               	goto	i1l7133
 25414                           
 25415                           ; BSR set to: 0
 25416  0045EE  0100               	movlb	0	; () banked
 25417  0045F0  1F6D               	comf	(i1___aldiv@quotient+3)& (0+255),f,b
 25418  0045F2  1F6C               	comf	(i1___aldiv@quotient+2)& (0+255),f,b
 25419  0045F4  1F6B               	comf	(i1___aldiv@quotient+1)& (0+255),f,b
 25420  0045F6  6D6A               	negf	i1___aldiv@quotient& (0+255),b
 25421  0045F8  0E00               	movlw	0
 25422  0045FA  236B               	addwfc	(i1___aldiv@quotient+1)& (0+255),f,b
 25423  0045FC  236C               	addwfc	(i1___aldiv@quotient+2)& (0+255),f,b
 25424  0045FE  236D               	addwfc	(i1___aldiv@quotient+3)& (0+255),f,b
 25425  004600                     i1l7133:
 25426                           
 25427                           ; BSR set to: 0
 25428  004600  C06A  F060         	movff	i1___aldiv@quotient,?i1___aldiv
 25429  004604  C06B  F061         	movff	i1___aldiv@quotient+1,?i1___aldiv+1
 25430  004608  C06C  F062         	movff	i1___aldiv@quotient+2,?i1___aldiv+2
 25431  00460C  C06D  F063         	movff	i1___aldiv@quotient+3,?i1___aldiv+3
 25432  004610  0012               	return	
 25433  004612                     __end_ofi1___aldiv:
 25434                           	opt stack 0
 25435                           pclatu	equ	0xFFB
 25436                           pclath	equ	0xFFA
 25437                           tblptru	equ	0xFF8
 25438                           tblptrh	equ	0xFF7
 25439                           tblptrl	equ	0xFF6
 25440                           tablat	equ	0xFF5
 25441                           prodh	equ	0xFF4
 25442                           prodl	equ	0xFF3
 25443                           intcon	equ	0xFF2
 25444                           postinc0	equ	0xFEE
 25445                           fsr0h	equ	0xFEA
 25446                           fsr0l	equ	0xFE9
 25447                           wreg	equ	0xFE8
 25448                           postdec1	equ	0xFE5
 25449                           fsr1h	equ	0xFE2
 25450                           fsr1l	equ	0xFE1
 25451                           bsr	equ	0xFE0
 25452                           indf2	equ	0xFDF
 25453                           postinc2	equ	0xFDE
 25454                           postdec2	equ	0xFDD
 25455                           plusw2	equ	0xFDB
 25456                           fsr2h	equ	0xFDA
 25457                           fsr2l	equ	0xFD9
 25458                           status	equ	0xFD8
 25459                           
 25460 ;; *************** function i1_confirmEdition *****************
 25461 ;; Defined at:
 25462 ;;		line 83 in file "source/DisplayProtocol.h"
 25463 ;; Parameters:    Size  Location     Type
 25464 ;;  yes             1    wreg     unsigned char 
 25465 ;; Auto vars:     Size  Location     Type
 25466 ;;  yes             1   33[BANK0 ] unsigned char 
 25467 ;; Return value:  Size  Location     Type
 25468 ;;                  1    wreg      void 
 25469 ;; Registers used:
 25470 ;;		wreg, status,2, status,0, cstack
 25471 ;; Tracked objects:
 25472 ;;		On entry : 0/0
 25473 ;;		On exit  : 0/0
 25474 ;;		Unchanged: 0/0
 25475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25476 ;;      Params:         0       0       0       0       0       0       0
 25477 ;;      Locals:         0       1       0       0       0       0       0
 25478 ;;      Temps:          0       0       0       0       0       0       0
 25479 ;;      Totals:         0       1       0       0       0       0       0
 25480 ;;Total ram usage:        1 bytes
 25481 ;; Hardware stack levels used:    1
 25482 ;; Hardware stack levels required when called:    8
 25483 ;; This function calls:
 25484 ;;		i1_saveSysParams
 25485 ;; This function is called by:
 25486 ;;		i1_pressENTER
 25487 ;;		i1_longPressENTER
 25488 ;; This function uses a non-reentrant model
 25489 ;;
 25490                           
 25491                           	psect	text108
 25492  0059FE                     __ptext108:
 25493                           	opt stack 0
 25494  0059FE                     i1_confirmEdition:
 25495                           	opt stack 9
 25496                           
 25497                           ; BSR set to: 0
 25498                           ;incstack = 0
 25499                           ;i1confirmEdition@yes stored from wreg
 25500  0059FE  0100               	movlb	0	; () banked
 25501  005A00  6F81               	movwf	i1confirmEdition@yes& (0+255),b
 25502                           
 25503                           ;DisplayProtocol.h: 84: switch (menuSection) {
 25504  005A02  D04C               	goto	i1l7509
 25505  005A04                     i1l7477:
 25506                           
 25507                           ;DisplayProtocol.h: 88: if(yes) {
 25508  005A04  0100               	movlb	0	; () banked
 25509  005A06  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 25510  005A08  0100               	movlb	0	; () banked
 25511  005A0A  B4D8               	btfsc	status,2,c
 25512  005A0C  D00C               	goto	i1l590
 25513                           
 25514                           ; BSR set to: 0
 25515                           ;DisplayProtocol.h: 89: kgXcorte = chanValf;
 25516  005A0E  C1B1  F198         	movff	_chanValf,_kgXcorte
 25517  005A12  C1B2  F199         	movff	_chanValf+1,_kgXcorte+1
 25518  005A16  C1B3  F19A         	movff	_chanValf+2,_kgXcorte+2
 25519                           
 25520                           ; BSR set to: 0
 25521                           ;DisplayProtocol.h: 90: actualScreen = 4;
 25522  005A1A  0E04               	movlw	4
 25523  005A1C  0101               	movlb	1	; () banked
 25524  005A1E  6FBD               	movwf	_actualScreen& (0+255),b
 25525                           
 25526                           ; BSR set to: 1
 25527                           ;DisplayProtocol.h: 91: saveSysParams();
 25528  005A20  EC66  F030         	call	i1_saveSysParams	;wreg free
 25529                           
 25530                           ;DisplayProtocol.h: 92: }else {
 25531  005A24  0012               	return	
 25532  005A26                     i1l590:
 25533                           
 25534                           ; BSR set to: 0
 25535                           ;DisplayProtocol.h: 93: tempLastScreen = actualScreen;
 25536  005A26  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 25537                           
 25538                           ; BSR set to: 0
 25539                           ;DisplayProtocol.h: 94: selSN = 1;
 25540  005A2A  0E01               	movlw	1
 25541  005A2C  0101               	movlb	1	; () banked
 25542  005A2E  6FBA               	movwf	_selSN& (0+255),b
 25543                           
 25544                           ;DisplayProtocol.h: 95: actualScreen = 10;
 25545  005A30  0E0A               	movlw	10
 25546  005A32  0101               	movlb	1	; () banked
 25547  005A34  6FBD               	movwf	_actualScreen& (0+255),b
 25548                           
 25549                           ; BSR set to: 1
 25550                           ;DisplayProtocol.h: 96: }
 25551                           ;DisplayProtocol.h: 97: break;
 25552  005A36  0012               	return	
 25553  005A38                     i1l7487:
 25554                           
 25555                           ; BSR set to: 1
 25556                           ;DisplayProtocol.h: 99: if(yes) {
 25557  005A38  0100               	movlb	0	; () banked
 25558  005A3A  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 25559  005A3C  0100               	movlb	0	; () banked
 25560  005A3E  B4D8               	btfsc	status,2,c
 25561  005A40  D00A               	goto	i1l593
 25562                           
 25563                           ; BSR set to: 0
 25564                           ;DisplayProtocol.h: 100: numCortes = chanVals;
 25565  005A42  C1B6  F0D2         	movff	_chanVals,_numCortes
 25566  005A46  C1B7  F0D3         	movff	_chanVals+1,_numCortes+1
 25567                           
 25568                           ; BSR set to: 0
 25569                           ;DisplayProtocol.h: 101: actualScreen = 4;
 25570  005A4A  0E04               	movlw	4
 25571  005A4C  0101               	movlb	1	; () banked
 25572  005A4E  6FBD               	movwf	_actualScreen& (0+255),b
 25573                           
 25574                           ; BSR set to: 1
 25575                           ;DisplayProtocol.h: 102: saveSysParams();
 25576  005A50  EC66  F030         	call	i1_saveSysParams	;wreg free
 25577                           
 25578                           ;DisplayProtocol.h: 103: }else {
 25579  005A54  0012               	return	
 25580  005A56                     i1l593:
 25581                           
 25582                           ; BSR set to: 0
 25583                           ;DisplayProtocol.h: 104: tempLastScreen = actualScreen;
 25584  005A56  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 25585                           
 25586                           ; BSR set to: 0
 25587                           ;DisplayProtocol.h: 105: selSN = 1;
 25588  005A5A  0E01               	movlw	1
 25589  005A5C  0101               	movlb	1	; () banked
 25590  005A5E  6FBA               	movwf	_selSN& (0+255),b
 25591                           
 25592                           ;DisplayProtocol.h: 106: actualScreen = 10;
 25593  005A60  0E0A               	movlw	10
 25594  005A62  0101               	movlb	1	; () banked
 25595  005A64  6FBD               	movwf	_actualScreen& (0+255),b
 25596                           
 25597                           ; BSR set to: 1
 25598                           ;DisplayProtocol.h: 107: }
 25599                           ;DisplayProtocol.h: 108: break;
 25600  005A66  0012               	return	
 25601  005A68                     i1l7497:
 25602                           
 25603                           ; BSR set to: 1
 25604                           ;DisplayProtocol.h: 110: if(yes) {
 25605  005A68  0100               	movlb	0	; () banked
 25606  005A6A  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 25607  005A6C  0100               	movlb	0	; () banked
 25608  005A6E  B4D8               	btfsc	status,2,c
 25609  005A70  D00C               	goto	i1l596
 25610                           
 25611                           ; BSR set to: 0
 25612                           ;DisplayProtocol.h: 111: velocidadMasa = chanValf;
 25613  005A72  C1B1  F18F         	movff	_chanValf,_velocidadMasa
 25614  005A76  C1B2  F190         	movff	_chanValf+1,_velocidadMasa+1
 25615  005A7A  C1B3  F191         	movff	_chanValf+2,_velocidadMasa+2
 25616                           
 25617                           ; BSR set to: 0
 25618                           ;DisplayProtocol.h: 112: actualScreen = 4;
 25619  005A7E  0E04               	movlw	4
 25620  005A80  0101               	movlb	1	; () banked
 25621  005A82  6FBD               	movwf	_actualScreen& (0+255),b
 25622                           
 25623                           ; BSR set to: 1
 25624                           ;DisplayProtocol.h: 113: saveSysParams();
 25625  005A84  EC66  F030         	call	i1_saveSysParams	;wreg free
 25626                           
 25627                           ;DisplayProtocol.h: 114: }else {
 25628  005A88  0012               	return	
 25629  005A8A                     i1l596:
 25630                           
 25631                           ; BSR set to: 0
 25632                           ;DisplayProtocol.h: 115: tempLastScreen = actualScreen;
 25633  005A8A  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 25634                           
 25635                           ; BSR set to: 0
 25636                           ;DisplayProtocol.h: 116: selSN = 1;
 25637  005A8E  0E01               	movlw	1
 25638  005A90  0101               	movlb	1	; () banked
 25639  005A92  6FBA               	movwf	_selSN& (0+255),b
 25640                           
 25641                           ;DisplayProtocol.h: 117: actualScreen = 10;
 25642  005A94  0E0A               	movlw	10
 25643  005A96  0101               	movlb	1	; () banked
 25644  005A98  6FBD               	movwf	_actualScreen& (0+255),b
 25645                           
 25646                           ; BSR set to: 1
 25647                           ;DisplayProtocol.h: 120: }
 25648                           ;DisplayProtocol.h: 121: }
 25649                           
 25650                           ; BSR set to: 1
 25651                           ;DisplayProtocol.h: 118: }
 25652                           ;DisplayProtocol.h: 119: break;
 25653  005A9A  0012               	return	
 25654  005A9C                     i1l7509:
 25655  005A9C  0101               	movlb	1	; () banked
 25656  005A9E  51BC               	movf	_menuSection& (0+255),w,b
 25657                           
 25658                           ; Switch size 1, requested type "space"
 25659                           ; Number of cases is 4, Range of values is 0 to 3
 25660                           ; switch strategies available:
 25661                           ; Name         Instructions Cycles
 25662                           ; simple_byte           13     7 (average)
 25663                           ;	Chosen strategy is simple_byte
 25664  005AA0  0A00               	xorlw	0	; case 0
 25665  005AA2  B4D8               	btfsc	status,2,c
 25666  005AA4  0012               	return	
 25667  005AA6  0A01               	xorlw	1	; case 1
 25668  005AA8  B4D8               	btfsc	status,2,c
 25669  005AAA  D7AC               	goto	i1l7477
 25670  005AAC  0A03               	xorlw	3	; case 2
 25671  005AAE  B4D8               	btfsc	status,2,c
 25672  005AB0  D7C3               	goto	i1l7487
 25673  005AB2  0A01               	xorlw	1	; case 3
 25674  005AB4  A4D8               	btfss	status,2,c
 25675  005AB6  0012               	return	
 25676  005AB8  D7D7               	goto	i1l7497
 25677  005ABA                     __end_ofi1_confirmEdition:
 25678                           	opt stack 0
 25679                           pclatu	equ	0xFFB
 25680                           pclath	equ	0xFFA
 25681                           tblptru	equ	0xFF8
 25682                           tblptrh	equ	0xFF7
 25683                           tblptrl	equ	0xFF6
 25684                           tablat	equ	0xFF5
 25685                           prodh	equ	0xFF4
 25686                           prodl	equ	0xFF3
 25687                           intcon	equ	0xFF2
 25688                           postinc0	equ	0xFEE
 25689                           fsr0h	equ	0xFEA
 25690                           fsr0l	equ	0xFE9
 25691                           wreg	equ	0xFE8
 25692                           postdec1	equ	0xFE5
 25693                           fsr1h	equ	0xFE2
 25694                           fsr1l	equ	0xFE1
 25695                           bsr	equ	0xFE0
 25696                           indf2	equ	0xFDF
 25697                           postinc2	equ	0xFDE
 25698                           postdec2	equ	0xFDD
 25699                           plusw2	equ	0xFDB
 25700                           fsr2h	equ	0xFDA
 25701                           fsr2l	equ	0xFD9
 25702                           status	equ	0xFD8
 25703                           
 25704 ;; *************** function i1___ftadd *****************
 25705 ;; Defined at:
 25706 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
 25707 ;; Parameters:    Size  Location     Type
 25708 ;;  f1              3    8[BANK0 ] float 
 25709 ;;  f2              3   11[BANK0 ] float 
 25710 ;; Auto vars:     Size  Location     Type
 25711 ;;  __ftadd         1   19[BANK0 ] unsigned char 
 25712 ;;  __ftadd         1   18[BANK0 ] unsigned char 
 25713 ;;  __ftadd         1   17[BANK0 ] unsigned char 
 25714 ;; Return value:  Size  Location     Type
 25715 ;;                  3    8[BANK0 ] float 
 25716 ;; Registers used:
 25717 ;;		wreg, status,2, status,0, cstack
 25718 ;; Tracked objects:
 25719 ;;		On entry : 0/0
 25720 ;;		On exit  : 0/0
 25721 ;;		Unchanged: 0/0
 25722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25723 ;;      Params:         0       6       0       0       0       0       0
 25724 ;;      Locals:         0       3       0       0       0       0       0
 25725 ;;      Temps:          0       3       0       0       0       0       0
 25726 ;;      Totals:         0      12       0       0       0       0       0
 25727 ;;Total ram usage:       12 bytes
 25728 ;; Hardware stack levels used:    1
 25729 ;; Hardware stack levels required when called:    5
 25730 ;; This function calls:
 25731 ;;		i1___ftpack
 25732 ;; This function is called by:
 25733 ;;		i1_longPressENTER
 25734 ;; This function uses a non-reentrant model
 25735 ;;
 25736                           
 25737                           	psect	text109
 25738  002A30                     __ptext109:
 25739                           	opt stack 0
 25740  002A30                     i1___ftadd:
 25741                           	opt stack 12
 25742                           
 25743                           ;incstack = 0
 25744  002A30  C06A  F06E         	movff	i1___ftadd@f1+2,??i1___ftadd
 25745  002A34  0100               	movlb	0	; () banked
 25746  002A36  6B6F               	clrf	(??i1___ftadd+1)& (0+255),b
 25747  002A38  6B70               	clrf	(??i1___ftadd+2)& (0+255),b
 25748  002A3A  0100               	movlb	0	; () banked
 25749  002A3C  3569               	rlcf	(i1___ftadd@f1+1)& (0+255),w,b
 25750  002A3E  0100               	movlb	0	; () banked
 25751  002A40  376E               	rlcf	??i1___ftadd& (0+255),f,b
 25752  002A42  E301               	bnc	u980_21
 25753  002A44  816F               	bsf	(??i1___ftadd+1)& (0+255),0,b
 25754  002A46                     u980_21:
 25755  002A46  0100               	movlb	0	; () banked
 25756  002A48  516E               	movf	??i1___ftadd& (0+255),w,b
 25757  002A4A  0100               	movlb	0	; () banked
 25758  002A4C  6F73               	movwf	i1___ftadd@exp1& (0+255),b
 25759  002A4E  C06D  F06E         	movff	i1___ftadd@f2+2,??i1___ftadd
 25760  002A52  0100               	movlb	0	; () banked
 25761  002A54  6B6F               	clrf	(??i1___ftadd+1)& (0+255),b
 25762  002A56  6B70               	clrf	(??i1___ftadd+2)& (0+255),b
 25763  002A58  0100               	movlb	0	; () banked
 25764  002A5A  356C               	rlcf	(i1___ftadd@f2+1)& (0+255),w,b
 25765  002A5C  0100               	movlb	0	; () banked
 25766  002A5E  376E               	rlcf	??i1___ftadd& (0+255),f,b
 25767  002A60  E301               	bnc	u981_21
 25768  002A62  816F               	bsf	(??i1___ftadd+1)& (0+255),0,b
 25769  002A64                     u981_21:
 25770  002A64  0100               	movlb	0	; () banked
 25771  002A66  516E               	movf	??i1___ftadd& (0+255),w,b
 25772  002A68  0100               	movlb	0	; () banked
 25773  002A6A  6F72               	movwf	i1___ftadd@exp2& (0+255),b
 25774                           
 25775                           ; BSR set to: 0
 25776  002A6C  0100               	movlb	0	; () banked
 25777  002A6E  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25778  002A70  0100               	movlb	0	; () banked
 25779  002A72  B4D8               	btfsc	status,2,c
 25780  002A74  D011               	goto	i1l1345
 25781                           
 25782                           ; BSR set to: 0
 25783  002A76  0100               	movlb	0	; () banked
 25784  002A78  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25785  002A7A  0100               	movlb	0	; () banked
 25786  002A7C  5D73               	subwf	i1___ftadd@exp1& (0+255),w,b
 25787  002A7E  B0D8               	btfsc	status,0,c
 25788  002A80  D012               	goto	i1l7555
 25789                           
 25790                           ; BSR set to: 0
 25791  002A82  0100               	movlb	0	; () banked
 25792  002A84  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25793  002A86  0800               	sublw	0
 25794  002A88  0100               	movlb	0	; () banked
 25795  002A8A  2572               	addwf	i1___ftadd@exp2& (0+255),w,b
 25796  002A8C  0100               	movlb	0	; () banked
 25797  002A8E  6F6E               	movwf	??i1___ftadd& (0+255),b
 25798  002A90  0E18               	movlw	24
 25799  002A92  0100               	movlb	0	; () banked
 25800  002A94  656E               	cpfsgt	??i1___ftadd& (0+255),b
 25801  002A96  D007               	goto	i1l7555
 25802  002A98                     i1l1345:
 25803                           
 25804                           ; BSR set to: 0
 25805  002A98  C06B  F068         	movff	i1___ftadd@f2,?i1___ftadd
 25806  002A9C  C06C  F069         	movff	i1___ftadd@f2+1,?i1___ftadd+1
 25807  002AA0  C06D  F06A         	movff	i1___ftadd@f2+2,?i1___ftadd+2
 25808  002AA4  0012               	return	
 25809  002AA6                     i1l7555:
 25810                           
 25811                           ; BSR set to: 0
 25812  002AA6  0100               	movlb	0	; () banked
 25813  002AA8  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25814  002AAA  0100               	movlb	0	; () banked
 25815  002AAC  B4D8               	btfsc	status,2,c
 25816  002AAE  D011               	goto	i1l1349
 25817                           
 25818                           ; BSR set to: 0
 25819  002AB0  0100               	movlb	0	; () banked
 25820  002AB2  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25821  002AB4  0100               	movlb	0	; () banked
 25822  002AB6  5D72               	subwf	i1___ftadd@exp2& (0+255),w,b
 25823  002AB8  B0D8               	btfsc	status,0,c
 25824  002ABA  D012               	goto	i1l7561
 25825                           
 25826                           ; BSR set to: 0
 25827  002ABC  0100               	movlb	0	; () banked
 25828  002ABE  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25829  002AC0  0800               	sublw	0
 25830  002AC2  0100               	movlb	0	; () banked
 25831  002AC4  2573               	addwf	i1___ftadd@exp1& (0+255),w,b
 25832  002AC6  0100               	movlb	0	; () banked
 25833  002AC8  6F6E               	movwf	??i1___ftadd& (0+255),b
 25834  002ACA  0E18               	movlw	24
 25835  002ACC  0100               	movlb	0	; () banked
 25836  002ACE  656E               	cpfsgt	??i1___ftadd& (0+255),b
 25837  002AD0  D007               	goto	i1l7561
 25838  002AD2                     i1l1349:
 25839                           
 25840                           ; BSR set to: 0
 25841  002AD2  C068  F068         	movff	i1___ftadd@f1,?i1___ftadd
 25842  002AD6  C069  F069         	movff	i1___ftadd@f1+1,?i1___ftadd+1
 25843  002ADA  C06A  F06A         	movff	i1___ftadd@f1+2,?i1___ftadd+2
 25844  002ADE  0012               	return	
 25845  002AE0                     i1l7561:
 25846                           
 25847                           ; BSR set to: 0
 25848  002AE0  0E06               	movlw	6
 25849  002AE2  0100               	movlb	0	; () banked
 25850  002AE4  6F71               	movwf	i1___ftadd@sign& (0+255),b
 25851                           
 25852                           ; BSR set to: 0
 25853  002AE6  0100               	movlb	0	; () banked
 25854  002AE8  AF6A               	btfss	(i1___ftadd@f1+2)& (0+255),7,b
 25855  002AEA  D002               	goto	i1l7567
 25856                           
 25857                           ; BSR set to: 0
 25858  002AEC  0100               	movlb	0	; () banked
 25859  002AEE  8F71               	bsf	i1___ftadd@sign& (0+255),7,b
 25860  002AF0                     i1l7567:
 25861                           
 25862                           ; BSR set to: 0
 25863  002AF0  0100               	movlb	0	; () banked
 25864  002AF2  AF6D               	btfss	(i1___ftadd@f2+2)& (0+255),7,b
 25865  002AF4  D002               	goto	i1l1351
 25866                           
 25867                           ; BSR set to: 0
 25868  002AF6  0100               	movlb	0	; () banked
 25869  002AF8  8D71               	bsf	i1___ftadd@sign& (0+255),6,b
 25870  002AFA                     i1l1351:
 25871                           
 25872                           ; BSR set to: 0
 25873  002AFA  0100               	movlb	0	; () banked
 25874  002AFC  8F69               	bsf	(i1___ftadd@f1+1)& (0+255),7,b
 25875                           
 25876                           ; BSR set to: 0
 25877  002AFE  0EFF               	movlw	255
 25878  002B00  0100               	movlb	0	; () banked
 25879  002B02  1768               	andwf	i1___ftadd@f1& (0+255),f,b
 25880  002B04  0EFF               	movlw	255
 25881  002B06  0100               	movlb	0	; () banked
 25882  002B08  1769               	andwf	(i1___ftadd@f1+1)& (0+255),f,b
 25883  002B0A  0E00               	movlw	0
 25884  002B0C  0100               	movlb	0	; () banked
 25885  002B0E  176A               	andwf	(i1___ftadd@f1+2)& (0+255),f,b
 25886  002B10  0100               	movlb	0	; () banked
 25887  002B12  8F6C               	bsf	(i1___ftadd@f2+1)& (0+255),7,b
 25888                           
 25889                           ; BSR set to: 0
 25890  002B14  0EFF               	movlw	255
 25891  002B16  0100               	movlb	0	; () banked
 25892  002B18  176B               	andwf	i1___ftadd@f2& (0+255),f,b
 25893  002B1A  0EFF               	movlw	255
 25894  002B1C  0100               	movlb	0	; () banked
 25895  002B1E  176C               	andwf	(i1___ftadd@f2+1)& (0+255),f,b
 25896  002B20  0E00               	movlw	0
 25897  002B22  0100               	movlb	0	; () banked
 25898  002B24  176D               	andwf	(i1___ftadd@f2+2)& (0+255),f,b
 25899                           
 25900                           ; BSR set to: 0
 25901  002B26  0100               	movlb	0	; () banked
 25902  002B28  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25903  002B2A  0100               	movlb	0	; () banked
 25904  002B2C  5D73               	subwf	i1___ftadd@exp1& (0+255),w,b
 25905  002B2E  B0D8               	btfsc	status,0,c
 25906  002B30  D025               	goto	i1l7587
 25907  002B32                     i1l7577:
 25908                           
 25909                           ; BSR set to: 0
 25910  002B32  0100               	movlb	0	; () banked
 25911  002B34  90D8               	bcf	status,0,c
 25912  002B36  376B               	rlcf	i1___ftadd@f2& (0+255),f,b
 25913  002B38  376C               	rlcf	(i1___ftadd@f2+1)& (0+255),f,b
 25914  002B3A  376D               	rlcf	(i1___ftadd@f2+2)& (0+255),f,b
 25915  002B3C  0100               	movlb	0	; () banked
 25916  002B3E  0772               	decf	i1___ftadd@exp2& (0+255),f,b
 25917                           
 25918                           ; BSR set to: 0
 25919  002B40  0100               	movlb	0	; () banked
 25920  002B42  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25921  002B44  0100               	movlb	0	; () banked
 25922  002B46  1972               	xorwf	i1___ftadd@exp2& (0+255),w,b
 25923  002B48  B4D8               	btfsc	status,2,c
 25924  002B4A  D011               	goto	i1l7585
 25925                           
 25926                           ; BSR set to: 0
 25927  002B4C  0100               	movlb	0	; () banked
 25928  002B4E  0771               	decf	i1___ftadd@sign& (0+255),f,b
 25929  002B50  C071  F06E         	movff	i1___ftadd@sign,??i1___ftadd
 25930  002B54  0E07               	movlw	7
 25931  002B56  0100               	movlb	0	; () banked
 25932  002B58  176E               	andwf	??i1___ftadd& (0+255),f,b
 25933  002B5A  B4D8               	btfsc	status,2,c
 25934  002B5C  D008               	goto	i1l7585
 25935  002B5E  D7E9               	goto	i1l7577
 25936  002B60                     i1l7583:
 25937                           
 25938                           ; BSR set to: 0
 25939  002B60  0100               	movlb	0	; () banked
 25940  002B62  90D8               	bcf	status,0,c
 25941  002B64  336A               	rrcf	(i1___ftadd@f1+2)& (0+255),f,b
 25942  002B66  3369               	rrcf	(i1___ftadd@f1+1)& (0+255),f,b
 25943  002B68  3368               	rrcf	i1___ftadd@f1& (0+255),f,b
 25944  002B6A  0100               	movlb	0	; () banked
 25945  002B6C  2B73               	incf	i1___ftadd@exp1& (0+255),f,b
 25946  002B6E                     i1l7585:
 25947                           
 25948                           ; BSR set to: 0
 25949  002B6E  0100               	movlb	0	; () banked
 25950  002B70  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 25951  002B72  0100               	movlb	0	; () banked
 25952  002B74  1973               	xorwf	i1___ftadd@exp1& (0+255),w,b
 25953  002B76  B4D8               	btfsc	status,2,c
 25954  002B78  D02B               	goto	i1l1360
 25955  002B7A  D7F2               	goto	i1l7583
 25956  002B7C                     i1l7587:
 25957                           
 25958                           ; BSR set to: 0
 25959  002B7C  0100               	movlb	0	; () banked
 25960  002B7E  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25961  002B80  0100               	movlb	0	; () banked
 25962  002B82  5D72               	subwf	i1___ftadd@exp2& (0+255),w,b
 25963  002B84  B0D8               	btfsc	status,0,c
 25964  002B86  D024               	goto	i1l1360
 25965  002B88                     i1l7589:
 25966                           
 25967                           ; BSR set to: 0
 25968  002B88  0100               	movlb	0	; () banked
 25969  002B8A  90D8               	bcf	status,0,c
 25970  002B8C  3768               	rlcf	i1___ftadd@f1& (0+255),f,b
 25971  002B8E  3769               	rlcf	(i1___ftadd@f1+1)& (0+255),f,b
 25972  002B90  376A               	rlcf	(i1___ftadd@f1+2)& (0+255),f,b
 25973  002B92  0100               	movlb	0	; () banked
 25974  002B94  0773               	decf	i1___ftadd@exp1& (0+255),f,b
 25975                           
 25976                           ; BSR set to: 0
 25977  002B96  0100               	movlb	0	; () banked
 25978  002B98  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 25979  002B9A  0100               	movlb	0	; () banked
 25980  002B9C  1972               	xorwf	i1___ftadd@exp2& (0+255),w,b
 25981  002B9E  B4D8               	btfsc	status,2,c
 25982  002BA0  D011               	goto	i1l7597
 25983                           
 25984                           ; BSR set to: 0
 25985  002BA2  0100               	movlb	0	; () banked
 25986  002BA4  0771               	decf	i1___ftadd@sign& (0+255),f,b
 25987  002BA6  C071  F06E         	movff	i1___ftadd@sign,??i1___ftadd
 25988  002BAA  0E07               	movlw	7
 25989  002BAC  0100               	movlb	0	; () banked
 25990  002BAE  176E               	andwf	??i1___ftadd& (0+255),f,b
 25991  002BB0  B4D8               	btfsc	status,2,c
 25992  002BB2  D008               	goto	i1l7597
 25993  002BB4  D7E9               	goto	i1l7589
 25994  002BB6                     i1l7595:
 25995                           
 25996                           ; BSR set to: 0
 25997  002BB6  0100               	movlb	0	; () banked
 25998  002BB8  90D8               	bcf	status,0,c
 25999  002BBA  336D               	rrcf	(i1___ftadd@f2+2)& (0+255),f,b
 26000  002BBC  336C               	rrcf	(i1___ftadd@f2+1)& (0+255),f,b
 26001  002BBE  336B               	rrcf	i1___ftadd@f2& (0+255),f,b
 26002  002BC0  0100               	movlb	0	; () banked
 26003  002BC2  2B72               	incf	i1___ftadd@exp2& (0+255),f,b
 26004  002BC4                     i1l7597:
 26005                           
 26006                           ; BSR set to: 0
 26007  002BC4  0100               	movlb	0	; () banked
 26008  002BC6  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 26009  002BC8  0100               	movlb	0	; () banked
 26010  002BCA  1973               	xorwf	i1___ftadd@exp1& (0+255),w,b
 26011  002BCC  A4D8               	btfss	status,2,c
 26012  002BCE  D7F3               	goto	i1l7595
 26013  002BD0                     i1l1360:
 26014                           
 26015                           ; BSR set to: 0
 26016  002BD0  0100               	movlb	0	; () banked
 26017  002BD2  AF71               	btfss	i1___ftadd@sign& (0+255),7,b
 26018  002BD4  D012               	goto	i1l1369
 26019                           
 26020                           ; BSR set to: 0
 26021  002BD6  0EFF               	movlw	255
 26022  002BD8  0100               	movlb	0	; () banked
 26023  002BDA  1B68               	xorwf	i1___ftadd@f1& (0+255),f,b
 26024  002BDC  0EFF               	movlw	255
 26025  002BDE  0100               	movlb	0	; () banked
 26026  002BE0  1B69               	xorwf	(i1___ftadd@f1+1)& (0+255),f,b
 26027  002BE2  0EFF               	movlw	255
 26028  002BE4  0100               	movlb	0	; () banked
 26029  002BE6  1B6A               	xorwf	(i1___ftadd@f1+2)& (0+255),f,b
 26030  002BE8  0E01               	movlw	1
 26031  002BEA  0100               	movlb	0	; () banked
 26032  002BEC  2768               	addwf	i1___ftadd@f1& (0+255),f,b
 26033  002BEE  0E00               	movlw	0
 26034  002BF0  0100               	movlb	0	; () banked
 26035  002BF2  2369               	addwfc	(i1___ftadd@f1+1)& (0+255),f,b
 26036  002BF4  0E00               	movlw	0
 26037  002BF6  0100               	movlb	0	; () banked
 26038  002BF8  236A               	addwfc	(i1___ftadd@f1+2)& (0+255),f,b
 26039  002BFA                     i1l1369:
 26040                           
 26041                           ; BSR set to: 0
 26042  002BFA  0100               	movlb	0	; () banked
 26043  002BFC  AD71               	btfss	i1___ftadd@sign& (0+255),6,b
 26044  002BFE  D012               	goto	i1l7603
 26045                           
 26046                           ; BSR set to: 0
 26047  002C00  0EFF               	movlw	255
 26048  002C02  0100               	movlb	0	; () banked
 26049  002C04  1B6B               	xorwf	i1___ftadd@f2& (0+255),f,b
 26050  002C06  0EFF               	movlw	255
 26051  002C08  0100               	movlb	0	; () banked
 26052  002C0A  1B6C               	xorwf	(i1___ftadd@f2+1)& (0+255),f,b
 26053  002C0C  0EFF               	movlw	255
 26054  002C0E  0100               	movlb	0	; () banked
 26055  002C10  1B6D               	xorwf	(i1___ftadd@f2+2)& (0+255),f,b
 26056  002C12  0E01               	movlw	1
 26057  002C14  0100               	movlb	0	; () banked
 26058  002C16  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 26059  002C18  0E00               	movlw	0
 26060  002C1A  0100               	movlb	0	; () banked
 26061  002C1C  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 26062  002C1E  0E00               	movlw	0
 26063  002C20  0100               	movlb	0	; () banked
 26064  002C22  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 26065  002C24                     i1l7603:
 26066                           
 26067                           ; BSR set to: 0
 26068  002C24  0E00               	movlw	0
 26069  002C26  0100               	movlb	0	; () banked
 26070  002C28  6F71               	movwf	i1___ftadd@sign& (0+255),b
 26071                           
 26072                           ; BSR set to: 0
 26073  002C2A  0100               	movlb	0	; () banked
 26074  002C2C  5168               	movf	i1___ftadd@f1& (0+255),w,b
 26075  002C2E  0100               	movlb	0	; () banked
 26076  002C30  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 26077  002C32  0100               	movlb	0	; () banked
 26078  002C34  5169               	movf	(i1___ftadd@f1+1)& (0+255),w,b
 26079  002C36  0100               	movlb	0	; () banked
 26080  002C38  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 26081  002C3A  0100               	movlb	0	; () banked
 26082  002C3C  516A               	movf	(i1___ftadd@f1+2)& (0+255),w,b
 26083  002C3E  0100               	movlb	0	; () banked
 26084  002C40  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 26085                           
 26086                           ; BSR set to: 0
 26087  002C42  0100               	movlb	0	; () banked
 26088  002C44  AF6D               	btfss	(i1___ftadd@f2+2)& (0+255),7,b
 26089  002C46  D015               	goto	i1l7613
 26090                           
 26091                           ; BSR set to: 0
 26092  002C48  0EFF               	movlw	255
 26093  002C4A  0100               	movlb	0	; () banked
 26094  002C4C  1B6B               	xorwf	i1___ftadd@f2& (0+255),f,b
 26095  002C4E  0EFF               	movlw	255
 26096  002C50  0100               	movlb	0	; () banked
 26097  002C52  1B6C               	xorwf	(i1___ftadd@f2+1)& (0+255),f,b
 26098  002C54  0EFF               	movlw	255
 26099  002C56  0100               	movlb	0	; () banked
 26100  002C58  1B6D               	xorwf	(i1___ftadd@f2+2)& (0+255),f,b
 26101  002C5A  0E01               	movlw	1
 26102  002C5C  0100               	movlb	0	; () banked
 26103  002C5E  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 26104  002C60  0E00               	movlw	0
 26105  002C62  0100               	movlb	0	; () banked
 26106  002C64  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 26107  002C66  0E00               	movlw	0
 26108  002C68  0100               	movlb	0	; () banked
 26109  002C6A  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 26110                           
 26111                           ; BSR set to: 0
 26112  002C6C  0E01               	movlw	1
 26113  002C6E  0100               	movlb	0	; () banked
 26114  002C70  6F71               	movwf	i1___ftadd@sign& (0+255),b
 26115  002C72                     i1l7613:
 26116                           
 26117                           ; BSR set to: 0
 26118  002C72  C06B  F060         	movff	i1___ftadd@f2,i1___ftpack@arg
 26119  002C76  C06C  F061         	movff	i1___ftadd@f2+1,i1___ftpack@arg+1
 26120  002C7A  C06D  F062         	movff	i1___ftadd@f2+2,i1___ftpack@arg+2
 26121  002C7E  C073  F063         	movff	i1___ftadd@exp1,i1___ftpack@exp
 26122  002C82  C071  F064         	movff	i1___ftadd@sign,i1___ftpack@sign
 26123  002C86  ECAF  F025         	call	i1___ftpack	;wreg free
 26124  002C8A  C060  F068         	movff	?i1___ftpack,?i1___ftadd
 26125  002C8E  C061  F069         	movff	?i1___ftpack+1,?i1___ftadd+1
 26126  002C92  C062  F06A         	movff	?i1___ftpack+2,?i1___ftadd+2
 26127  002C96  0012               	return	
 26128  002C98                     __end_ofi1___ftadd:
 26129                           	opt stack 0
 26130                           pclatu	equ	0xFFB
 26131                           pclath	equ	0xFFA
 26132                           tblptru	equ	0xFF8
 26133                           tblptrh	equ	0xFF7
 26134                           tblptrl	equ	0xFF6
 26135                           tablat	equ	0xFF5
 26136                           prodh	equ	0xFF4
 26137                           prodl	equ	0xFF3
 26138                           intcon	equ	0xFF2
 26139                           postinc0	equ	0xFEE
 26140                           fsr0h	equ	0xFEA
 26141                           fsr0l	equ	0xFE9
 26142                           wreg	equ	0xFE8
 26143                           postdec1	equ	0xFE5
 26144                           fsr1h	equ	0xFE2
 26145                           fsr1l	equ	0xFE1
 26146                           bsr	equ	0xFE0
 26147                           indf2	equ	0xFDF
 26148                           postinc2	equ	0xFDE
 26149                           postdec2	equ	0xFDD
 26150                           plusw2	equ	0xFDB
 26151                           fsr2h	equ	0xFDA
 26152                           fsr2l	equ	0xFD9
 26153                           status	equ	0xFD8
 26154                           
 26155 ;; *************** function i1_longPressDOWN *****************
 26156 ;; Defined at:
 26157 ;;		line 210 in file "source/DisplayProtocol.h"
 26158 ;; Parameters:    Size  Location     Type
 26159 ;;		None
 26160 ;; Auto vars:     Size  Location     Type
 26161 ;;		None
 26162 ;; Return value:  Size  Location     Type
 26163 ;;                  1    wreg      void 
 26164 ;; Registers used:
 26165 ;;		wreg, status,2, status,0
 26166 ;; Tracked objects:
 26167 ;;		On entry : 0/0
 26168 ;;		On exit  : 0/0
 26169 ;;		Unchanged: 0/0
 26170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26171 ;;      Params:         0       0       0       0       0       0       0
 26172 ;;      Locals:         0       0       0       0       0       0       0
 26173 ;;      Temps:          0       0       0       0       0       0       0
 26174 ;;      Totals:         0       0       0       0       0       0       0
 26175 ;;Total ram usage:        0 bytes
 26176 ;; Hardware stack levels used:    1
 26177 ;; Hardware stack levels required when called:    4
 26178 ;; This function calls:
 26179 ;;		Nothing
 26180 ;; This function is called by:
 26181 ;;		_UARTint
 26182 ;; This function uses a non-reentrant model
 26183 ;;
 26184                           
 26185                           	psect	text110
 26186  007136                     __ptext110:
 26187                           	opt stack 0
 26188  007136                     i1_longPressDOWN:
 26189                           	opt stack 14
 26190                           
 26191                           ;DisplayProtocol.h: 211: if (!DOWNisLP) {
 26192                           
 26193                           ;incstack = 0
 26194  007136  504B               	movf	_DOWNisLP,w,c
 26195  007138  A4D8               	btfss	status,2,c
 26196  00713A  0012               	return	
 26197                           
 26198                           ;DisplayProtocol.h: 212: DOWNisLP = 1;
 26199  00713C  0E01               	movlw	1
 26200  00713E  6E4B               	movwf	_DOWNisLP,c
 26201                           
 26202                           ;DisplayProtocol.h: 213: if(actualScreen == 5) {
 26203  007140  0E05               	movlw	5
 26204  007142  0101               	movlb	1	; () banked
 26205  007144  19BD               	xorwf	_actualScreen& (0+255),w,b
 26206  007146  A4D8               	btfss	status,2,c
 26207  007148  0012               	return	
 26208                           
 26209                           ; BSR set to: 1
 26210                           ;DisplayProtocol.h: 214: if(menuSection == 2)
 26211  00714A  0E02               	movlw	2
 26212  00714C  0101               	movlb	1	; () banked
 26213  00714E  19BC               	xorwf	_menuSection& (0+255),w,b
 26214  007150  A4D8               	btfss	status,2,c
 26215  007152  0012               	return	
 26216                           
 26217                           ; BSR set to: 1
 26218                           ;DisplayProtocol.h: 215: chanVals -= 10;
 26219  007154  0101               	movlb	1	; () banked
 26220  007156  0EF6               	movlw	246
 26221  007158  27B6               	addwf	_chanVals& (0+255),f,b
 26222  00715A  0EFF               	movlw	255
 26223  00715C  23B7               	addwfc	(_chanVals+1)& (0+255),f,b
 26224                           
 26225                           ; BSR set to: 1
 26226                           
 26227                           ; BSR set to: 1
 26228  00715E  0012               	return	
 26229  007160                     __end_ofi1_longPressDOWN:
 26230                           	opt stack 0
 26231                           pclatu	equ	0xFFB
 26232                           pclath	equ	0xFFA
 26233                           tblptru	equ	0xFF8
 26234                           tblptrh	equ	0xFF7
 26235                           tblptrl	equ	0xFF6
 26236                           tablat	equ	0xFF5
 26237                           prodh	equ	0xFF4
 26238                           prodl	equ	0xFF3
 26239                           intcon	equ	0xFF2
 26240                           postinc0	equ	0xFEE
 26241                           fsr0h	equ	0xFEA
 26242                           fsr0l	equ	0xFE9
 26243                           wreg	equ	0xFE8
 26244                           postdec1	equ	0xFE5
 26245                           fsr1h	equ	0xFE2
 26246                           fsr1l	equ	0xFE1
 26247                           bsr	equ	0xFE0
 26248                           indf2	equ	0xFDF
 26249                           postinc2	equ	0xFDE
 26250                           postdec2	equ	0xFDD
 26251                           plusw2	equ	0xFDB
 26252                           fsr2h	equ	0xFDA
 26253                           fsr2l	equ	0xFD9
 26254                           status	equ	0xFD8
 26255                           
 26256 ;; *************** function _loadSysParams *****************
 26257 ;; Defined at:
 26258 ;;		line 147 in file "source/sysParams.h"
 26259 ;; Parameters:    Size  Location     Type
 26260 ;;		None
 26261 ;; Auto vars:     Size  Location     Type
 26262 ;;		None
 26263 ;; Return value:  Size  Location     Type
 26264 ;;                  1    wreg      void 
 26265 ;; Registers used:
 26266 ;;		wreg, status,2, status,0, cstack
 26267 ;; Tracked objects:
 26268 ;;		On entry : 0/0
 26269 ;;		On exit  : 0/0
 26270 ;;		Unchanged: 0/0
 26271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26272 ;;      Params:         0       0       0       0       0       0       0
 26273 ;;      Locals:         0       0       0       0       0       0       0
 26274 ;;      Temps:          0       0       0       0       0       0       0
 26275 ;;      Totals:         0       0       0       0       0       0       0
 26276 ;;Total ram usage:        0 bytes
 26277 ;; Hardware stack levels used:    1
 26278 ;; Hardware stack levels required when called:    8
 26279 ;; This function calls:
 26280 ;;		i1_calcSysVars
 26281 ;;		i1_saveSysParams
 26282 ;; This function is called by:
 26283 ;;		_UARTint
 26284 ;; This function uses a non-reentrant model
 26285 ;;
 26286                           
 26287                           	psect	text111
 26288  006D0E                     __ptext111:
 26289                           	opt stack 0
 26290  006D0E                     _loadSysParams:
 26291                           	opt stack 10
 26292                           
 26293                           ;sysParams.h: 148: tiXcorte = 5.0f;
 26294                           
 26295                           ;incstack = 0
 26296  006D0E  0E00               	movlw	0
 26297  006D10  0101               	movlb	1	; () banked
 26298  006D12  6F95               	movwf	_tiXcorte& (0+255),b
 26299  006D14  0EA0               	movlw	160
 26300  006D16  0101               	movlb	1	; () banked
 26301  006D18  6F96               	movwf	(_tiXcorte+1)& (0+255),b
 26302  006D1A  0E40               	movlw	64
 26303  006D1C  0101               	movlb	1	; () banked
 26304  006D1E  6F97               	movwf	(_tiXcorte+2)& (0+255),b
 26305                           
 26306                           ;sysParams.h: 149: numCortes = 10;
 26307  006D20  0E00               	movlw	0
 26308  006D22  0100               	movlb	0	; () banked
 26309  006D24  6FD3               	movwf	(_numCortes+1)& (0+255),b
 26310  006D26  0E0A               	movlw	10
 26311  006D28  6FD2               	movwf	_numCortes& (0+255),b
 26312                           
 26313                           ;sysParams.h: 151: velocidadMasa = 1.0f;
 26314  006D2A  0E00               	movlw	0
 26315  006D2C  0101               	movlb	1	; () banked
 26316  006D2E  6F8F               	movwf	_velocidadMasa& (0+255),b
 26317  006D30  0E80               	movlw	128
 26318  006D32  0101               	movlb	1	; () banked
 26319  006D34  6F90               	movwf	(_velocidadMasa+1)& (0+255),b
 26320  006D36  0E3F               	movlw	63
 26321  006D38  0101               	movlb	1	; () banked
 26322  006D3A  6F91               	movwf	(_velocidadMasa+2)& (0+255),b
 26323                           
 26324                           ;sysParams.h: 152: processState = 0;
 26325  006D3C  0E00               	movlw	0
 26326  006D3E  0100               	movlb	0	; () banked
 26327  006D40  6FB3               	movwf	(_processState+1)& (0+255),b
 26328  006D42  0E00               	movlw	0
 26329  006D44  6FB2               	movwf	_processState& (0+255),b
 26330                           
 26331                           ;sysParams.h: 153: processStarted = 0;
 26332  006D46  0E00               	movlw	0
 26333  006D48  0100               	movlb	0	; () banked
 26334  006D4A  6FC0               	movwf	_processStarted& (0+255),b
 26335                           
 26336                           ; BSR set to: 0
 26337                           ;sysParams.h: 154: calcSysVars();
 26338  006D4C  EC55  F035         	call	i1_calcSysVars	;wreg free
 26339                           
 26340                           ;sysParams.h: 155: saveSysParams();
 26341  006D50  EC66  F030         	call	i1_saveSysParams	;wreg free
 26342  006D54  0012               	return		;funcret
 26343  006D56                     __end_of_loadSysParams:
 26344                           	opt stack 0
 26345                           pclatu	equ	0xFFB
 26346                           pclath	equ	0xFFA
 26347                           tblptru	equ	0xFF8
 26348                           tblptrh	equ	0xFF7
 26349                           tblptrl	equ	0xFF6
 26350                           tablat	equ	0xFF5
 26351                           prodh	equ	0xFF4
 26352                           prodl	equ	0xFF3
 26353                           intcon	equ	0xFF2
 26354                           postinc0	equ	0xFEE
 26355                           fsr0h	equ	0xFEA
 26356                           fsr0l	equ	0xFE9
 26357                           wreg	equ	0xFE8
 26358                           postdec1	equ	0xFE5
 26359                           fsr1h	equ	0xFE2
 26360                           fsr1l	equ	0xFE1
 26361                           bsr	equ	0xFE0
 26362                           indf2	equ	0xFDF
 26363                           postinc2	equ	0xFDE
 26364                           postdec2	equ	0xFDD
 26365                           plusw2	equ	0xFDB
 26366                           fsr2h	equ	0xFDA
 26367                           fsr2l	equ	0xFD9
 26368                           status	equ	0xFD8
 26369                           
 26370 ;; *************** function i1_saveSysParams *****************
 26371 ;; Defined at:
 26372 ;;		line 114 in file "source/sysParams.h"
 26373 ;; Parameters:    Size  Location     Type
 26374 ;;		None
 26375 ;; Auto vars:     Size  Location     Type
 26376 ;;		None
 26377 ;; Return value:  Size  Location     Type
 26378 ;;                  1    wreg      void 
 26379 ;; Registers used:
 26380 ;;		wreg, status,2, status,0, cstack
 26381 ;; Tracked objects:
 26382 ;;		On entry : 0/0
 26383 ;;		On exit  : 0/0
 26384 ;;		Unchanged: 0/0
 26385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26386 ;;      Params:         0       0       0       0       0       0       0
 26387 ;;      Locals:         0       0       0       0       0       0       0
 26388 ;;      Temps:          0       0       0       0       0       0       0
 26389 ;;      Totals:         0       0       0       0       0       0       0
 26390 ;;Total ram usage:        0 bytes
 26391 ;; Hardware stack levels used:    1
 26392 ;; Hardware stack levels required when called:    7
 26393 ;; This function calls:
 26394 ;;		i1_calcVars2ti
 26395 ;;		i1_writeEEPROM
 26396 ;; This function is called by:
 26397 ;;		_loadSysParams
 26398 ;;		_UARTint
 26399 ;;		i1_confirmEdition
 26400 ;; This function uses a non-reentrant model
 26401 ;;
 26402                           
 26403                           	psect	text112
 26404  0060CC                     __ptext112:
 26405                           	opt stack 0
 26406  0060CC                     i1_saveSysParams:
 26407                           	opt stack 11
 26408                           
 26409                           ;sysParams.h: 115: calcVars2ti();
 26410                           
 26411                           ;incstack = 0
 26412  0060CC  ECE9  F035         	call	i1_calcVars2ti	;wreg free
 26413                           
 26414                           ;sysParams.h: 116: EECON1bits.WREN = 1;
 26415  0060D0  84A6               	bsf	4006,2,c	;volatile
 26416                           
 26417                           ;sysParams.h: 117: ie = INTCONbits.GIE;
 26418  0060D2  0E00               	movlw	0
 26419  0060D4  BEF2               	btfsc	intcon,7,c	;volatile
 26420  0060D6  0E01               	movlw	1
 26421  0060D8  0100               	movlb	0	; () banked
 26422  0060DA  6FBB               	movwf	_ie& (0+255),b
 26423                           
 26424                           ; BSR set to: 0
 26425                           ;sysParams.h: 118: INTCONbits.GIE = 0;
 26426  0060DC  9EF2               	bcf	intcon,7,c	;volatile
 26427                           
 26428                           ; BSR set to: 0
 26429                           ;sysParams.h: 120: fData.floatdat = tiXcorte;
 26430  0060DE  C195  F0AF         	movff	_tiXcorte,_fData
 26431  0060E2  C196  F0B0         	movff	_tiXcorte+1,_fData+1
 26432  0060E6  C197  F0B1         	movff	_tiXcorte+2,_fData+2
 26433                           
 26434                           ; BSR set to: 0
 26435                           ;sysParams.h: 122: writeEEPROM(3, fData.floatUB);
 26436  0060EA  C0B1  F060         	movff	_fData+2,i1writeEEPROM@data
 26437  0060EE  0E03               	movlw	3
 26438  0060F0  ECD3  F038         	call	i1_writeEEPROM
 26439                           
 26440                           ;sysParams.h: 123: writeEEPROM(4, fData.floatHB);
 26441  0060F4  C0B0  F060         	movff	_fData+1,i1writeEEPROM@data
 26442  0060F8  0E04               	movlw	4
 26443  0060FA  ECD3  F038         	call	i1_writeEEPROM
 26444                           
 26445                           ;sysParams.h: 124: writeEEPROM(5, fData.floatLB);
 26446  0060FE  C0AF  F060         	movff	_fData,i1writeEEPROM@data
 26447  006102  0E05               	movlw	5
 26448  006104  ECD3  F038         	call	i1_writeEEPROM
 26449                           
 26450                           ;sysParams.h: 125: i16Data.int16dat = numCortes;
 26451  006108  C0D2  F0B4         	movff	_numCortes,_i16Data
 26452  00610C  C0D3  F0B5         	movff	_numCortes+1,_i16Data+1
 26453                           
 26454                           ;sysParams.h: 126: writeEEPROM(6, i16Data.int16HB);
 26455  006110  C0B5  F060         	movff	_i16Data+1,i1writeEEPROM@data
 26456  006114  0E06               	movlw	6
 26457  006116  ECD3  F038         	call	i1_writeEEPROM
 26458                           
 26459                           ;sysParams.h: 127: writeEEPROM(7, i16Data.int16LB);
 26460  00611A  C0B4  F060         	movff	_i16Data,i1writeEEPROM@data
 26461  00611E  0E07               	movlw	7
 26462  006120  ECD3  F038         	call	i1_writeEEPROM
 26463                           
 26464                           ;sysParams.h: 138: fData.floatdat = velocidadMasa;
 26465  006124  C18F  F0AF         	movff	_velocidadMasa,_fData
 26466  006128  C190  F0B0         	movff	_velocidadMasa+1,_fData+1
 26467  00612C  C191  F0B1         	movff	_velocidadMasa+2,_fData+2
 26468                           
 26469                           ;sysParams.h: 140: writeEEPROM(17, fData.floatUB);
 26470  006130  C0B1  F060         	movff	_fData+2,i1writeEEPROM@data
 26471  006134  0E11               	movlw	17
 26472  006136  ECD3  F038         	call	i1_writeEEPROM
 26473                           
 26474                           ;sysParams.h: 141: writeEEPROM(18, fData.floatHB);
 26475  00613A  C0B0  F060         	movff	_fData+1,i1writeEEPROM@data
 26476  00613E  0E12               	movlw	18
 26477  006140  ECD3  F038         	call	i1_writeEEPROM
 26478                           
 26479                           ;sysParams.h: 142: writeEEPROM(19, fData.floatLB);
 26480  006144  C0AF  F060         	movff	_fData,i1writeEEPROM@data
 26481  006148  0E13               	movlw	19
 26482  00614A  ECD3  F038         	call	i1_writeEEPROM
 26483                           
 26484                           ;sysParams.h: 143: EECON1bits.WREN = 0;
 26485  00614E  94A6               	bcf	4006,2,c	;volatile
 26486                           
 26487                           ;sysParams.h: 144: INTCONbits.GIE = ie;
 26488  006150  0100               	movlb	0	; () banked
 26489  006152  B1BB               	btfsc	_ie& (0+255),0,b
 26490  006154  D002               	bra	i1u908_25
 26491  006156  9EF2               	bcf	intcon,7,c	;volatile
 26492  006158  D001               	bra	i1u908_26
 26493  00615A                     i1u908_25:
 26494  00615A  8EF2               	bsf	intcon,7,c	;volatile
 26495  00615C                     i1u908_26:
 26496  00615C  0012               	return		;funcret
 26497  00615E                     __end_ofi1_saveSysParams:
 26498                           	opt stack 0
 26499                           pclatu	equ	0xFFB
 26500                           pclath	equ	0xFFA
 26501                           tblptru	equ	0xFF8
 26502                           tblptrh	equ	0xFF7
 26503                           tblptrl	equ	0xFF6
 26504                           tablat	equ	0xFF5
 26505                           prodh	equ	0xFF4
 26506                           prodl	equ	0xFF3
 26507                           intcon	equ	0xFF2
 26508                           postinc0	equ	0xFEE
 26509                           fsr0h	equ	0xFEA
 26510                           fsr0l	equ	0xFE9
 26511                           wreg	equ	0xFE8
 26512                           postdec1	equ	0xFE5
 26513                           fsr1h	equ	0xFE2
 26514                           fsr1l	equ	0xFE1
 26515                           bsr	equ	0xFE0
 26516                           indf2	equ	0xFDF
 26517                           postinc2	equ	0xFDE
 26518                           postdec2	equ	0xFDD
 26519                           plusw2	equ	0xFDB
 26520                           fsr2h	equ	0xFDA
 26521                           fsr2l	equ	0xFD9
 26522                           status	equ	0xFD8
 26523                           
 26524 ;; *************** function i1_calcVars2ti *****************
 26525 ;; Defined at:
 26526 ;;		line 90 in file "source/sysParams.h"
 26527 ;; Parameters:    Size  Location     Type
 26528 ;;		None
 26529 ;; Auto vars:     Size  Location     Type
 26530 ;;		None
 26531 ;; Return value:  Size  Location     Type
 26532 ;;                  1    wreg      void 
 26533 ;; Registers used:
 26534 ;;		wreg, status,2, status,0, cstack
 26535 ;; Tracked objects:
 26536 ;;		On entry : 0/0
 26537 ;;		On exit  : 0/0
 26538 ;;		Unchanged: 0/0
 26539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26540 ;;      Params:         0       0       0       0       0       0       0
 26541 ;;      Locals:         0       0       0       0       0       0       0
 26542 ;;      Temps:          0       0       0       0       0       0       0
 26543 ;;      Totals:         0       0       0       0       0       0       0
 26544 ;;Total ram usage:        0 bytes
 26545 ;; Hardware stack levels used:    1
 26546 ;; Hardware stack levels required when called:    6
 26547 ;; This function calls:
 26548 ;;		i1___ftdiv
 26549 ;;		i1___ftmul
 26550 ;; This function is called by:
 26551 ;;		i1_saveSysParams
 26552 ;;		i1_longPressENTER
 26553 ;; This function uses a non-reentrant model
 26554 ;;
 26555                           
 26556                           	psect	text113
 26557  006BD2                     __ptext113:
 26558                           	opt stack 0
 26559  006BD2                     i1_calcVars2ti:
 26560                           	opt stack 11
 26561                           
 26562                           ;sysParams.h: 98: tiXcorte = (float)kgXcorte / velocidadMasa;
 26563                           
 26564                           ;incstack = 0
 26565  006BD2  C198  F072         	movff	_kgXcorte,i1___ftdiv@f1
 26566  006BD6  C199  F073         	movff	_kgXcorte+1,i1___ftdiv@f1+1
 26567  006BDA  C19A  F074         	movff	_kgXcorte+2,i1___ftdiv@f1+2
 26568  006BDE  C18F  F075         	movff	_velocidadMasa,i1___ftdiv@f2
 26569  006BE2  C190  F076         	movff	_velocidadMasa+1,i1___ftdiv@f2+1
 26570  006BE6  C191  F077         	movff	_velocidadMasa+2,i1___ftdiv@f2+2
 26571  006BEA  ECE3  F01E         	call	i1___ftdiv	;wreg free
 26572  006BEE  C072  F195         	movff	?i1___ftdiv,_tiXcorte
 26573  006BF2  C073  F196         	movff	?i1___ftdiv+1,_tiXcorte+1
 26574  006BF6  C074  F197         	movff	?i1___ftdiv+2,_tiXcorte+2
 26575                           
 26576                           ;sysParams.h: 99: timsXcorte = (float)tiXcorte * 1000;
 26577  006BFA  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 26578  006BFE  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 26579  006C02  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 26580  006C06  0E00               	movlw	0
 26581  006C08  0100               	movlb	0	; () banked
 26582  006C0A  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 26583  006C0C  0E7A               	movlw	122
 26584  006C0E  0100               	movlb	0	; () banked
 26585  006C10  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 26586  006C12  0E44               	movlw	68
 26587  006C14  0100               	movlb	0	; () banked
 26588  006C16  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 26589  006C18  ECE4  F01C         	call	i1___ftmul	;wreg free
 26590  006C1C  C068  F055         	movff	?i1___ftmul,_timsXcorte
 26591  006C20  C069  F056         	movff	?i1___ftmul+1,_timsXcorte+1
 26592  006C24  C06A  F057         	movff	?i1___ftmul+2,_timsXcorte+2
 26593  006C28  0012               	return		;funcret
 26594  006C2A                     __end_ofi1_calcVars2ti:
 26595                           	opt stack 0
 26596                           pclatu	equ	0xFFB
 26597                           pclath	equ	0xFFA
 26598                           tblptru	equ	0xFF8
 26599                           tblptrh	equ	0xFF7
 26600                           tblptrl	equ	0xFF6
 26601                           tablat	equ	0xFF5
 26602                           prodh	equ	0xFF4
 26603                           prodl	equ	0xFF3
 26604                           intcon	equ	0xFF2
 26605                           postinc0	equ	0xFEE
 26606                           fsr0h	equ	0xFEA
 26607                           fsr0l	equ	0xFE9
 26608                           wreg	equ	0xFE8
 26609                           postdec1	equ	0xFE5
 26610                           fsr1h	equ	0xFE2
 26611                           fsr1l	equ	0xFE1
 26612                           bsr	equ	0xFE0
 26613                           indf2	equ	0xFDF
 26614                           postinc2	equ	0xFDE
 26615                           postdec2	equ	0xFDD
 26616                           plusw2	equ	0xFDB
 26617                           fsr2h	equ	0xFDA
 26618                           fsr2l	equ	0xFD9
 26619                           status	equ	0xFD8
 26620                           
 26621 ;; *************** function i1___ftdiv *****************
 26622 ;; Defined at:
 26623 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
 26624 ;; Parameters:    Size  Location     Type
 26625 ;;  f1              3   18[BANK0 ] float 
 26626 ;;  f2              3   21[BANK0 ] float 
 26627 ;; Auto vars:     Size  Location     Type
 26628 ;;  __ftdiv         3   28[BANK0 ] float 
 26629 ;;  __ftdiv         1   32[BANK0 ] unsigned char 
 26630 ;;  __ftdiv         1   31[BANK0 ] unsigned char 
 26631 ;;  __ftdiv         1   27[BANK0 ] unsigned char 
 26632 ;; Return value:  Size  Location     Type
 26633 ;;                  3   18[BANK0 ] float 
 26634 ;; Registers used:
 26635 ;;		wreg, status,2, status,0, cstack
 26636 ;; Tracked objects:
 26637 ;;		On entry : 0/0
 26638 ;;		On exit  : 0/0
 26639 ;;		Unchanged: 0/0
 26640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26641 ;;      Params:         0       6       0       0       0       0       0
 26642 ;;      Locals:         0       6       0       0       0       0       0
 26643 ;;      Temps:          0       3       0       0       0       0       0
 26644 ;;      Totals:         0      15       0       0       0       0       0
 26645 ;;Total ram usage:       15 bytes
 26646 ;; Hardware stack levels used:    1
 26647 ;; Hardware stack levels required when called:    5
 26648 ;; This function calls:
 26649 ;;		i1___ftpack
 26650 ;; This function is called by:
 26651 ;;		i1_calcVars2ti
 26652 ;;		i1_integrator
 26653 ;;		i1_longPressENTER
 26654 ;; This function uses a non-reentrant model
 26655 ;;
 26656                           
 26657                           	psect	text114
 26658  003DC6                     __ptext114:
 26659                           	opt stack 0
 26660  003DC6                     i1___ftdiv:
 26661                           	opt stack 11
 26662                           
 26663                           ;incstack = 0
 26664  003DC6  C074  F078         	movff	i1___ftdiv@f1+2,??i1___ftdiv
 26665  003DCA  0100               	movlb	0	; () banked
 26666  003DCC  6B79               	clrf	(??i1___ftdiv+1)& (0+255),b
 26667  003DCE  6B7A               	clrf	(??i1___ftdiv+2)& (0+255),b
 26668  003DD0  0100               	movlb	0	; () banked
 26669  003DD2  3573               	rlcf	(i1___ftdiv@f1+1)& (0+255),w,b
 26670  003DD4  0100               	movlb	0	; () banked
 26671  003DD6  3778               	rlcf	??i1___ftdiv& (0+255),f,b
 26672  003DD8  E301               	bnc	u779_21
 26673  003DDA  8179               	bsf	(??i1___ftdiv+1)& (0+255),0,b
 26674  003DDC                     u779_21:
 26675  003DDC  0100               	movlb	0	; () banked
 26676  003DDE  5178               	movf	??i1___ftdiv& (0+255),w,b
 26677  003DE0  0100               	movlb	0	; () banked
 26678  003DE2  6F7F               	movwf	i1___ftdiv@exp& (0+255),b
 26679  003DE4  0100               	movlb	0	; () banked
 26680  003DE6  517F               	movf	i1___ftdiv@exp& (0+255),w,b
 26681  003DE8  A4D8               	btfss	status,2,c
 26682  003DEA  D00A               	goto	i1l6175
 26683                           
 26684                           ; BSR set to: 0
 26685  003DEC  0E00               	movlw	0
 26686  003DEE  0100               	movlb	0	; () banked
 26687  003DF0  6F72               	movwf	?i1___ftdiv& (0+255),b
 26688  003DF2  0E00               	movlw	0
 26689  003DF4  0100               	movlb	0	; () banked
 26690  003DF6  6F73               	movwf	(?i1___ftdiv+1)& (0+255),b
 26691  003DF8  0E00               	movlw	0
 26692  003DFA  0100               	movlb	0	; () banked
 26693  003DFC  6F74               	movwf	(?i1___ftdiv+2)& (0+255),b
 26694                           
 26695                           ; BSR set to: 0
 26696  003DFE  0012               	return	
 26697  003E00                     i1l6175:
 26698                           
 26699                           ; BSR set to: 0
 26700  003E00  C077  F078         	movff	i1___ftdiv@f2+2,??i1___ftdiv
 26701  003E04  0100               	movlb	0	; () banked
 26702  003E06  6B79               	clrf	(??i1___ftdiv+1)& (0+255),b
 26703  003E08  6B7A               	clrf	(??i1___ftdiv+2)& (0+255),b
 26704  003E0A  0100               	movlb	0	; () banked
 26705  003E0C  3576               	rlcf	(i1___ftdiv@f2+1)& (0+255),w,b
 26706  003E0E  0100               	movlb	0	; () banked
 26707  003E10  3778               	rlcf	??i1___ftdiv& (0+255),f,b
 26708  003E12  E301               	bnc	u781_21
 26709  003E14  8179               	bsf	(??i1___ftdiv+1)& (0+255),0,b
 26710  003E16                     u781_21:
 26711  003E16  0100               	movlb	0	; () banked
 26712  003E18  5178               	movf	??i1___ftdiv& (0+255),w,b
 26713  003E1A  0100               	movlb	0	; () banked
 26714  003E1C  6F80               	movwf	i1___ftdiv@sign& (0+255),b
 26715  003E1E  0100               	movlb	0	; () banked
 26716  003E20  5180               	movf	i1___ftdiv@sign& (0+255),w,b
 26717  003E22  A4D8               	btfss	status,2,c
 26718  003E24  D00A               	goto	i1l6181
 26719                           
 26720                           ; BSR set to: 0
 26721  003E26  0E00               	movlw	0
 26722  003E28  0100               	movlb	0	; () banked
 26723  003E2A  6F72               	movwf	?i1___ftdiv& (0+255),b
 26724  003E2C  0E00               	movlw	0
 26725  003E2E  0100               	movlb	0	; () banked
 26726  003E30  6F73               	movwf	(?i1___ftdiv+1)& (0+255),b
 26727  003E32  0E00               	movlw	0
 26728  003E34  0100               	movlb	0	; () banked
 26729  003E36  6F74               	movwf	(?i1___ftdiv+2)& (0+255),b
 26730                           
 26731                           ; BSR set to: 0
 26732  003E38  0012               	return	
 26733  003E3A                     i1l6181:
 26734                           
 26735                           ; BSR set to: 0
 26736  003E3A  0E00               	movlw	0
 26737  003E3C  0100               	movlb	0	; () banked
 26738  003E3E  6F7C               	movwf	i1___ftdiv@f3& (0+255),b
 26739  003E40  0E00               	movlw	0
 26740  003E42  0100               	movlb	0	; () banked
 26741  003E44  6F7D               	movwf	(i1___ftdiv@f3+1)& (0+255),b
 26742  003E46  0E00               	movlw	0
 26743  003E48  0100               	movlb	0	; () banked
 26744  003E4A  6F7E               	movwf	(i1___ftdiv@f3+2)& (0+255),b
 26745                           
 26746                           ; BSR set to: 0
 26747  003E4C  0100               	movlb	0	; () banked
 26748  003E4E  5180               	movf	i1___ftdiv@sign& (0+255),w,b
 26749  003E50  0F89               	addlw	137
 26750  003E52  0100               	movlb	0	; () banked
 26751  003E54  5F7F               	subwf	i1___ftdiv@exp& (0+255),f,b
 26752                           
 26753                           ; BSR set to: 0
 26754  003E56  C074  F080         	movff	i1___ftdiv@f1+2,i1___ftdiv@sign
 26755                           
 26756                           ; BSR set to: 0
 26757  003E5A  0100               	movlb	0	; () banked
 26758  003E5C  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 26759  003E5E  0100               	movlb	0	; () banked
 26760  003E60  1B80               	xorwf	i1___ftdiv@sign& (0+255),f,b
 26761                           
 26762                           ; BSR set to: 0
 26763  003E62  0E80               	movlw	128
 26764  003E64  0100               	movlb	0	; () banked
 26765  003E66  1780               	andwf	i1___ftdiv@sign& (0+255),f,b
 26766                           
 26767                           ; BSR set to: 0
 26768  003E68  0100               	movlb	0	; () banked
 26769  003E6A  8F73               	bsf	(i1___ftdiv@f1+1)& (0+255),7,b
 26770                           
 26771                           ; BSR set to: 0
 26772  003E6C  0EFF               	movlw	255
 26773  003E6E  0100               	movlb	0	; () banked
 26774  003E70  1772               	andwf	i1___ftdiv@f1& (0+255),f,b
 26775  003E72  0EFF               	movlw	255
 26776  003E74  0100               	movlb	0	; () banked
 26777  003E76  1773               	andwf	(i1___ftdiv@f1+1)& (0+255),f,b
 26778  003E78  0E00               	movlw	0
 26779  003E7A  0100               	movlb	0	; () banked
 26780  003E7C  1774               	andwf	(i1___ftdiv@f1+2)& (0+255),f,b
 26781                           
 26782                           ; BSR set to: 0
 26783  003E7E  0100               	movlb	0	; () banked
 26784  003E80  8F76               	bsf	(i1___ftdiv@f2+1)& (0+255),7,b
 26785                           
 26786                           ; BSR set to: 0
 26787  003E82  0EFF               	movlw	255
 26788  003E84  0100               	movlb	0	; () banked
 26789  003E86  1775               	andwf	i1___ftdiv@f2& (0+255),f,b
 26790  003E88  0EFF               	movlw	255
 26791  003E8A  0100               	movlb	0	; () banked
 26792  003E8C  1776               	andwf	(i1___ftdiv@f2+1)& (0+255),f,b
 26793  003E8E  0E00               	movlw	0
 26794  003E90  0100               	movlb	0	; () banked
 26795  003E92  1777               	andwf	(i1___ftdiv@f2+2)& (0+255),f,b
 26796                           
 26797                           ; BSR set to: 0
 26798  003E94  0E18               	movlw	24
 26799  003E96  0100               	movlb	0	; () banked
 26800  003E98  6F7B               	movwf	i1___ftdiv@cntr& (0+255),b
 26801  003E9A                     i1l6201:
 26802                           
 26803                           ; BSR set to: 0
 26804  003E9A  0100               	movlb	0	; () banked
 26805  003E9C  90D8               	bcf	status,0,c
 26806  003E9E  377C               	rlcf	i1___ftdiv@f3& (0+255),f,b
 26807  003EA0  377D               	rlcf	(i1___ftdiv@f3+1)& (0+255),f,b
 26808  003EA2  377E               	rlcf	(i1___ftdiv@f3+2)& (0+255),f,b
 26809                           
 26810                           ; BSR set to: 0
 26811  003EA4  0100               	movlb	0	; () banked
 26812  003EA6  5175               	movf	i1___ftdiv@f2& (0+255),w,b
 26813  003EA8  0100               	movlb	0	; () banked
 26814  003EAA  5D72               	subwf	i1___ftdiv@f1& (0+255),w,b
 26815  003EAC  0100               	movlb	0	; () banked
 26816  003EAE  5176               	movf	(i1___ftdiv@f2+1)& (0+255),w,b
 26817  003EB0  0100               	movlb	0	; () banked
 26818  003EB2  5973               	subwfb	(i1___ftdiv@f1+1)& (0+255),w,b
 26819  003EB4  0100               	movlb	0	; () banked
 26820  003EB6  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 26821  003EB8  0100               	movlb	0	; () banked
 26822  003EBA  5974               	subwfb	(i1___ftdiv@f1+2)& (0+255),w,b
 26823  003EBC  A0D8               	btfss	status,0,c
 26824  003EBE  D00E               	goto	i1l1380
 26825                           
 26826                           ; BSR set to: 0
 26827  003EC0  0100               	movlb	0	; () banked
 26828  003EC2  5175               	movf	i1___ftdiv@f2& (0+255),w,b
 26829  003EC4  0100               	movlb	0	; () banked
 26830  003EC6  5F72               	subwf	i1___ftdiv@f1& (0+255),f,b
 26831  003EC8  0100               	movlb	0	; () banked
 26832  003ECA  5176               	movf	(i1___ftdiv@f2+1)& (0+255),w,b
 26833  003ECC  0100               	movlb	0	; () banked
 26834  003ECE  5B73               	subwfb	(i1___ftdiv@f1+1)& (0+255),f,b
 26835  003ED0  0100               	movlb	0	; () banked
 26836  003ED2  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 26837  003ED4  0100               	movlb	0	; () banked
 26838  003ED6  5B74               	subwfb	(i1___ftdiv@f1+2)& (0+255),f,b
 26839                           
 26840                           ; BSR set to: 0
 26841  003ED8  0100               	movlb	0	; () banked
 26842  003EDA  817C               	bsf	i1___ftdiv@f3& (0+255),0,b
 26843  003EDC                     i1l1380:
 26844                           
 26845                           ; BSR set to: 0
 26846  003EDC  0100               	movlb	0	; () banked
 26847  003EDE  90D8               	bcf	status,0,c
 26848  003EE0  3772               	rlcf	i1___ftdiv@f1& (0+255),f,b
 26849  003EE2  3773               	rlcf	(i1___ftdiv@f1+1)& (0+255),f,b
 26850  003EE4  3774               	rlcf	(i1___ftdiv@f1+2)& (0+255),f,b
 26851                           
 26852                           ; BSR set to: 0
 26853  003EE6  0100               	movlb	0	; () banked
 26854  003EE8  2F7B               	decfsz	i1___ftdiv@cntr& (0+255),f,b
 26855  003EEA  D7D7               	goto	i1l6201
 26856                           
 26857                           ; BSR set to: 0
 26858                           
 26859                           ; BSR set to: 0
 26860  003EEC  C07C  F060         	movff	i1___ftdiv@f3,i1___ftpack@arg
 26861  003EF0  C07D  F061         	movff	i1___ftdiv@f3+1,i1___ftpack@arg+1
 26862  003EF4  C07E  F062         	movff	i1___ftdiv@f3+2,i1___ftpack@arg+2
 26863  003EF8  C07F  F063         	movff	i1___ftdiv@exp,i1___ftpack@exp
 26864  003EFC  C080  F064         	movff	i1___ftdiv@sign,i1___ftpack@sign
 26865  003F00  ECAF  F025         	call	i1___ftpack	;wreg free
 26866  003F04  C060  F072         	movff	?i1___ftpack,?i1___ftdiv
 26867  003F08  C061  F073         	movff	?i1___ftpack+1,?i1___ftdiv+1
 26868  003F0C  C062  F074         	movff	?i1___ftpack+2,?i1___ftdiv+2
 26869  003F10  0012               	return	
 26870  003F12                     __end_ofi1___ftdiv:
 26871                           	opt stack 0
 26872                           pclatu	equ	0xFFB
 26873                           pclath	equ	0xFFA
 26874                           tblptru	equ	0xFF8
 26875                           tblptrh	equ	0xFF7
 26876                           tblptrl	equ	0xFF6
 26877                           tablat	equ	0xFF5
 26878                           prodh	equ	0xFF4
 26879                           prodl	equ	0xFF3
 26880                           intcon	equ	0xFF2
 26881                           postinc0	equ	0xFEE
 26882                           fsr0h	equ	0xFEA
 26883                           fsr0l	equ	0xFE9
 26884                           wreg	equ	0xFE8
 26885                           postdec1	equ	0xFE5
 26886                           fsr1h	equ	0xFE2
 26887                           fsr1l	equ	0xFE1
 26888                           bsr	equ	0xFE0
 26889                           indf2	equ	0xFDF
 26890                           postinc2	equ	0xFDE
 26891                           postdec2	equ	0xFDD
 26892                           plusw2	equ	0xFDB
 26893                           fsr2h	equ	0xFDA
 26894                           fsr2l	equ	0xFD9
 26895                           status	equ	0xFD8
 26896                           
 26897 ;; *************** function i1_calcSysVars *****************
 26898 ;; Defined at:
 26899 ;;		line 79 in file "source/sysParams.h"
 26900 ;; Parameters:    Size  Location     Type
 26901 ;;		None
 26902 ;; Auto vars:     Size  Location     Type
 26903 ;;  calcSysVars     3   23[BANK0 ] float 
 26904 ;; Return value:  Size  Location     Type
 26905 ;;                  1    wreg      void 
 26906 ;; Registers used:
 26907 ;;		wreg, status,2, status,0, cstack
 26908 ;; Tracked objects:
 26909 ;;		On entry : 0/0
 26910 ;;		On exit  : 0/0
 26911 ;;		Unchanged: 0/0
 26912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26913 ;;      Params:         0       0       0       0       0       0       0
 26914 ;;      Locals:         0       3       0       0       0       0       0
 26915 ;;      Temps:          0       0       0       0       0       0       0
 26916 ;;      Totals:         0       3       0       0       0       0       0
 26917 ;;Total ram usage:        3 bytes
 26918 ;; Hardware stack levels used:    1
 26919 ;; Hardware stack levels required when called:    6
 26920 ;; This function calls:
 26921 ;;		i1___ftmul
 26922 ;; This function is called by:
 26923 ;;		_loadSysParams
 26924 ;;		i1_sysParamInit
 26925 ;; This function uses a non-reentrant model
 26926 ;;
 26927                           
 26928                           	psect	text115
 26929  006AAA                     __ptext115:
 26930                           	opt stack 0
 26931  006AAA                     i1_calcSysVars:
 26932                           	opt stack 11
 26933                           
 26934                           ;sysParams.h: 80: float temp = 0;
 26935                           
 26936                           ;incstack = 0
 26937  006AAA  0E00               	movlw	0
 26938  006AAC  0100               	movlb	0	; () banked
 26939  006AAE  6F77               	movwf	i1calcSysVars@temp& (0+255),b
 26940  006AB0  0E00               	movlw	0
 26941  006AB2  0100               	movlb	0	; () banked
 26942  006AB4  6F78               	movwf	(i1calcSysVars@temp+1)& (0+255),b
 26943  006AB6  0E00               	movlw	0
 26944  006AB8  0100               	movlb	0	; () banked
 26945  006ABA  6F79               	movwf	(i1calcSysVars@temp+2)& (0+255),b
 26946                           
 26947                           ; BSR set to: 0
 26948                           ;sysParams.h: 81: timsXcorte = (float)tiXcorte * 1000;
 26949  006ABC  C195  F068         	movff	_tiXcorte,i1___ftmul@f1
 26950  006AC0  C196  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 26951  006AC4  C197  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 26952  006AC8  0E00               	movlw	0
 26953  006ACA  0100               	movlb	0	; () banked
 26954  006ACC  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 26955  006ACE  0E7A               	movlw	122
 26956  006AD0  0100               	movlb	0	; () banked
 26957  006AD2  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 26958  006AD4  0E44               	movlw	68
 26959  006AD6  0100               	movlb	0	; () banked
 26960  006AD8  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 26961  006ADA  ECE4  F01C         	call	i1___ftmul	;wreg free
 26962  006ADE  C068  F055         	movff	?i1___ftmul,_timsXcorte
 26963  006AE2  C069  F056         	movff	?i1___ftmul+1,_timsXcorte+1
 26964  006AE6  C06A  F057         	movff	?i1___ftmul+2,_timsXcorte+2
 26965                           
 26966                           ;sysParams.h: 87: kgXcorte = (float)velocidadMasa * tiXcorte;
 26967  006AEA  C18F  F068         	movff	_velocidadMasa,i1___ftmul@f1
 26968  006AEE  C190  F069         	movff	_velocidadMasa+1,i1___ftmul@f1+1
 26969  006AF2  C191  F06A         	movff	_velocidadMasa+2,i1___ftmul@f1+2
 26970  006AF6  C195  F06B         	movff	_tiXcorte,i1___ftmul@f2
 26971  006AFA  C196  F06C         	movff	_tiXcorte+1,i1___ftmul@f2+1
 26972  006AFE  C197  F06D         	movff	_tiXcorte+2,i1___ftmul@f2+2
 26973  006B02  ECE4  F01C         	call	i1___ftmul	;wreg free
 26974  006B06  C068  F198         	movff	?i1___ftmul,_kgXcorte
 26975  006B0A  C069  F199         	movff	?i1___ftmul+1,_kgXcorte+1
 26976  006B0E  C06A  F19A         	movff	?i1___ftmul+2,_kgXcorte+2
 26977  006B12  0012               	return		;funcret
 26978  006B14                     __end_ofi1_calcSysVars:
 26979                           	opt stack 0
 26980                           pclatu	equ	0xFFB
 26981                           pclath	equ	0xFFA
 26982                           tblptru	equ	0xFF8
 26983                           tblptrh	equ	0xFF7
 26984                           tblptrl	equ	0xFF6
 26985                           tablat	equ	0xFF5
 26986                           prodh	equ	0xFF4
 26987                           prodl	equ	0xFF3
 26988                           intcon	equ	0xFF2
 26989                           postinc0	equ	0xFEE
 26990                           fsr0h	equ	0xFEA
 26991                           fsr0l	equ	0xFE9
 26992                           wreg	equ	0xFE8
 26993                           postdec1	equ	0xFE5
 26994                           fsr1h	equ	0xFE2
 26995                           fsr1l	equ	0xFE1
 26996                           bsr	equ	0xFE0
 26997                           indf2	equ	0xFDF
 26998                           postinc2	equ	0xFDE
 26999                           postdec2	equ	0xFDD
 27000                           plusw2	equ	0xFDB
 27001                           fsr2h	equ	0xFDA
 27002                           fsr2l	equ	0xFD9
 27003                           status	equ	0xFD8
 27004                           
 27005 ;; *************** function i1___ftmul *****************
 27006 ;; Defined at:
 27007 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
 27008 ;; Parameters:    Size  Location     Type
 27009 ;;  f1              3    8[BANK0 ] float 
 27010 ;;  f2              3   11[BANK0 ] float 
 27011 ;; Auto vars:     Size  Location     Type
 27012 ;;  __ftmul         3   18[BANK0 ] unsigned um
 27013 ;;  __ftmul         1   22[BANK0 ] unsigned char 
 27014 ;;  __ftmul         1   21[BANK0 ] unsigned char 
 27015 ;;  __ftmul         1   17[BANK0 ] unsigned char 
 27016 ;; Return value:  Size  Location     Type
 27017 ;;                  3    8[BANK0 ] float 
 27018 ;; Registers used:
 27019 ;;		wreg, status,2, status,0, cstack
 27020 ;; Tracked objects:
 27021 ;;		On entry : 0/0
 27022 ;;		On exit  : 0/0
 27023 ;;		Unchanged: 0/0
 27024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27025 ;;      Params:         0       6       0       0       0       0       0
 27026 ;;      Locals:         0       6       0       0       0       0       0
 27027 ;;      Temps:          0       3       0       0       0       0       0
 27028 ;;      Totals:         0      15       0       0       0       0       0
 27029 ;;Total ram usage:       15 bytes
 27030 ;; Hardware stack levels used:    1
 27031 ;; Hardware stack levels required when called:    5
 27032 ;; This function calls:
 27033 ;;		i1___ftpack
 27034 ;; This function is called by:
 27035 ;;		i1_calcSysVars
 27036 ;;		i1_calcVars2ti
 27037 ;;		i1_desintegrator
 27038 ;;		i1_longPressRETRO
 27039 ;;		i1_pressENTER
 27040 ;;		i1_longPressENTER
 27041 ;; This function uses a non-reentrant model
 27042 ;;
 27043                           
 27044                           	psect	text116
 27045  0039C8                     __ptext116:
 27046                           	opt stack 0
 27047  0039C8                     i1___ftmul:
 27048                           	opt stack 11
 27049                           
 27050                           ;incstack = 0
 27051  0039C8  C06A  F06E         	movff	i1___ftmul@f1+2,??i1___ftmul
 27052  0039CC  0100               	movlb	0	; () banked
 27053  0039CE  6B6F               	clrf	(??i1___ftmul+1)& (0+255),b
 27054  0039D0  6B70               	clrf	(??i1___ftmul+2)& (0+255),b
 27055  0039D2  0100               	movlb	0	; () banked
 27056  0039D4  3569               	rlcf	(i1___ftmul@f1+1)& (0+255),w,b
 27057  0039D6  0100               	movlb	0	; () banked
 27058  0039D8  376E               	rlcf	??i1___ftmul& (0+255),f,b
 27059  0039DA  E301               	bnc	u784_21
 27060  0039DC  816F               	bsf	(??i1___ftmul+1)& (0+255),0,b
 27061  0039DE                     u784_21:
 27062  0039DE  0100               	movlb	0	; () banked
 27063  0039E0  516E               	movf	??i1___ftmul& (0+255),w,b
 27064  0039E2  0100               	movlb	0	; () banked
 27065  0039E4  6F71               	movwf	i1___ftmul@exp& (0+255),b
 27066  0039E6  0100               	movlb	0	; () banked
 27067  0039E8  5171               	movf	i1___ftmul@exp& (0+255),w,b
 27068  0039EA  A4D8               	btfss	status,2,c
 27069  0039EC  D00A               	goto	i1l6221
 27070                           
 27071                           ; BSR set to: 0
 27072  0039EE  0E00               	movlw	0
 27073  0039F0  0100               	movlb	0	; () banked
 27074  0039F2  6F68               	movwf	?i1___ftmul& (0+255),b
 27075  0039F4  0E00               	movlw	0
 27076  0039F6  0100               	movlb	0	; () banked
 27077  0039F8  6F69               	movwf	(?i1___ftmul+1)& (0+255),b
 27078  0039FA  0E00               	movlw	0
 27079  0039FC  0100               	movlb	0	; () banked
 27080  0039FE  6F6A               	movwf	(?i1___ftmul+2)& (0+255),b
 27081                           
 27082                           ; BSR set to: 0
 27083  003A00  0012               	return	
 27084  003A02                     i1l6221:
 27085                           
 27086                           ; BSR set to: 0
 27087  003A02  C06D  F06E         	movff	i1___ftmul@f2+2,??i1___ftmul
 27088  003A06  0100               	movlb	0	; () banked
 27089  003A08  6B6F               	clrf	(??i1___ftmul+1)& (0+255),b
 27090  003A0A  6B70               	clrf	(??i1___ftmul+2)& (0+255),b
 27091  003A0C  0100               	movlb	0	; () banked
 27092  003A0E  356C               	rlcf	(i1___ftmul@f2+1)& (0+255),w,b
 27093  003A10  0100               	movlb	0	; () banked
 27094  003A12  376E               	rlcf	??i1___ftmul& (0+255),f,b
 27095  003A14  E301               	bnc	u786_21
 27096  003A16  816F               	bsf	(??i1___ftmul+1)& (0+255),0,b
 27097  003A18                     u786_21:
 27098  003A18  0100               	movlb	0	; () banked
 27099  003A1A  516E               	movf	??i1___ftmul& (0+255),w,b
 27100  003A1C  0100               	movlb	0	; () banked
 27101  003A1E  6F76               	movwf	i1___ftmul@sign& (0+255),b
 27102  003A20  0100               	movlb	0	; () banked
 27103  003A22  5176               	movf	i1___ftmul@sign& (0+255),w,b
 27104  003A24  A4D8               	btfss	status,2,c
 27105  003A26  D00A               	goto	i1l6227
 27106                           
 27107                           ; BSR set to: 0
 27108  003A28  0E00               	movlw	0
 27109  003A2A  0100               	movlb	0	; () banked
 27110  003A2C  6F68               	movwf	?i1___ftmul& (0+255),b
 27111  003A2E  0E00               	movlw	0
 27112  003A30  0100               	movlb	0	; () banked
 27113  003A32  6F69               	movwf	(?i1___ftmul+1)& (0+255),b
 27114  003A34  0E00               	movlw	0
 27115  003A36  0100               	movlb	0	; () banked
 27116  003A38  6F6A               	movwf	(?i1___ftmul+2)& (0+255),b
 27117                           
 27118                           ; BSR set to: 0
 27119  003A3A  0012               	return	
 27120  003A3C                     i1l6227:
 27121                           
 27122                           ; BSR set to: 0
 27123  003A3C  0100               	movlb	0	; () banked
 27124  003A3E  5176               	movf	i1___ftmul@sign& (0+255),w,b
 27125  003A40  0F7B               	addlw	123
 27126  003A42  0100               	movlb	0	; () banked
 27127  003A44  2771               	addwf	i1___ftmul@exp& (0+255),f,b
 27128                           
 27129                           ; BSR set to: 0
 27130  003A46  C06A  F076         	movff	i1___ftmul@f1+2,i1___ftmul@sign
 27131  003A4A  0100               	movlb	0	; () banked
 27132  003A4C  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 27133  003A4E  0100               	movlb	0	; () banked
 27134  003A50  1B76               	xorwf	i1___ftmul@sign& (0+255),f,b
 27135  003A52  0E80               	movlw	128
 27136  003A54  0100               	movlb	0	; () banked
 27137  003A56  1776               	andwf	i1___ftmul@sign& (0+255),f,b
 27138                           
 27139                           ; BSR set to: 0
 27140  003A58  0100               	movlb	0	; () banked
 27141  003A5A  8F69               	bsf	(i1___ftmul@f1+1)& (0+255),7,b
 27142                           
 27143                           ; BSR set to: 0
 27144  003A5C  0100               	movlb	0	; () banked
 27145  003A5E  8F6C               	bsf	(i1___ftmul@f2+1)& (0+255),7,b
 27146                           
 27147                           ; BSR set to: 0
 27148  003A60  0EFF               	movlw	255
 27149  003A62  0100               	movlb	0	; () banked
 27150  003A64  176B               	andwf	i1___ftmul@f2& (0+255),f,b
 27151  003A66  0EFF               	movlw	255
 27152  003A68  0100               	movlb	0	; () banked
 27153  003A6A  176C               	andwf	(i1___ftmul@f2+1)& (0+255),f,b
 27154  003A6C  0E00               	movlw	0
 27155  003A6E  0100               	movlb	0	; () banked
 27156  003A70  176D               	andwf	(i1___ftmul@f2+2)& (0+255),f,b
 27157                           
 27158                           ; BSR set to: 0
 27159  003A72  0E00               	movlw	0
 27160  003A74  0100               	movlb	0	; () banked
 27161  003A76  6F72               	movwf	i1___ftmul@f3_as_product& (0+255),b
 27162  003A78  0E00               	movlw	0
 27163  003A7A  0100               	movlb	0	; () banked
 27164  003A7C  6F73               	movwf	(i1___ftmul@f3_as_product+1)& (0+255),b
 27165  003A7E  0E00               	movlw	0
 27166  003A80  0100               	movlb	0	; () banked
 27167  003A82  6F74               	movwf	(i1___ftmul@f3_as_product+2)& (0+255),b
 27168                           
 27169                           ; BSR set to: 0
 27170  003A84  0E07               	movlw	7
 27171  003A86  0100               	movlb	0	; () banked
 27172  003A88  6F75               	movwf	i1___ftmul@cntr& (0+255),b
 27173  003A8A                     i1l6241:
 27174                           
 27175                           ; BSR set to: 0
 27176  003A8A  0100               	movlb	0	; () banked
 27177  003A8C  A168               	btfss	i1___ftmul@f1& (0+255),0,b
 27178  003A8E  D00C               	goto	i1l6245
 27179                           
 27180                           ; BSR set to: 0
 27181  003A90  0100               	movlb	0	; () banked
 27182  003A92  516B               	movf	i1___ftmul@f2& (0+255),w,b
 27183  003A94  0100               	movlb	0	; () banked
 27184  003A96  2772               	addwf	i1___ftmul@f3_as_product& (0+255),f,b
 27185  003A98  0100               	movlb	0	; () banked
 27186  003A9A  516C               	movf	(i1___ftmul@f2+1)& (0+255),w,b
 27187  003A9C  0100               	movlb	0	; () banked
 27188  003A9E  2373               	addwfc	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 27189  003AA0  0100               	movlb	0	; () banked
 27190  003AA2  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 27191  003AA4  0100               	movlb	0	; () banked
 27192  003AA6  2374               	addwfc	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 27193  003AA8                     i1l6245:
 27194                           
 27195                           ; BSR set to: 0
 27196  003AA8  0100               	movlb	0	; () banked
 27197  003AAA  90D8               	bcf	status,0,c
 27198  003AAC  336A               	rrcf	(i1___ftmul@f1+2)& (0+255),f,b
 27199  003AAE  3369               	rrcf	(i1___ftmul@f1+1)& (0+255),f,b
 27200  003AB0  3368               	rrcf	i1___ftmul@f1& (0+255),f,b
 27201  003AB2  0100               	movlb	0	; () banked
 27202  003AB4  90D8               	bcf	status,0,c
 27203  003AB6  376B               	rlcf	i1___ftmul@f2& (0+255),f,b
 27204  003AB8  376C               	rlcf	(i1___ftmul@f2+1)& (0+255),f,b
 27205  003ABA  376D               	rlcf	(i1___ftmul@f2+2)& (0+255),f,b
 27206                           
 27207                           ; BSR set to: 0
 27208  003ABC  0100               	movlb	0	; () banked
 27209  003ABE  2F75               	decfsz	i1___ftmul@cntr& (0+255),f,b
 27210  003AC0  D7E4               	goto	i1l6241
 27211                           
 27212                           ; BSR set to: 0
 27213                           
 27214                           ; BSR set to: 0
 27215  003AC2  0E09               	movlw	9
 27216  003AC4  0100               	movlb	0	; () banked
 27217  003AC6  6F75               	movwf	i1___ftmul@cntr& (0+255),b
 27218  003AC8                     i1l6251:
 27219                           
 27220                           ; BSR set to: 0
 27221  003AC8  0100               	movlb	0	; () banked
 27222  003ACA  A168               	btfss	i1___ftmul@f1& (0+255),0,b
 27223  003ACC  D00C               	goto	i1l6255
 27224                           
 27225                           ; BSR set to: 0
 27226  003ACE  0100               	movlb	0	; () banked
 27227  003AD0  516B               	movf	i1___ftmul@f2& (0+255),w,b
 27228  003AD2  0100               	movlb	0	; () banked
 27229  003AD4  2772               	addwf	i1___ftmul@f3_as_product& (0+255),f,b
 27230  003AD6  0100               	movlb	0	; () banked
 27231  003AD8  516C               	movf	(i1___ftmul@f2+1)& (0+255),w,b
 27232  003ADA  0100               	movlb	0	; () banked
 27233  003ADC  2373               	addwfc	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 27234  003ADE  0100               	movlb	0	; () banked
 27235  003AE0  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 27236  003AE2  0100               	movlb	0	; () banked
 27237  003AE4  2374               	addwfc	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 27238  003AE6                     i1l6255:
 27239                           
 27240                           ; BSR set to: 0
 27241  003AE6  0100               	movlb	0	; () banked
 27242  003AE8  90D8               	bcf	status,0,c
 27243  003AEA  336A               	rrcf	(i1___ftmul@f1+2)& (0+255),f,b
 27244  003AEC  3369               	rrcf	(i1___ftmul@f1+1)& (0+255),f,b
 27245  003AEE  3368               	rrcf	i1___ftmul@f1& (0+255),f,b
 27246  003AF0  0100               	movlb	0	; () banked
 27247  003AF2  90D8               	bcf	status,0,c
 27248  003AF4  3374               	rrcf	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 27249  003AF6  3373               	rrcf	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 27250  003AF8  3372               	rrcf	i1___ftmul@f3_as_product& (0+255),f,b
 27251                           
 27252                           ; BSR set to: 0
 27253  003AFA  0100               	movlb	0	; () banked
 27254  003AFC  2F75               	decfsz	i1___ftmul@cntr& (0+255),f,b
 27255  003AFE  D7E4               	goto	i1l6251
 27256                           
 27257                           ; BSR set to: 0
 27258                           
 27259                           ; BSR set to: 0
 27260  003B00  C072  F060         	movff	i1___ftmul@f3_as_product,i1___ftpack@arg
 27261  003B04  C073  F061         	movff	i1___ftmul@f3_as_product+1,i1___ftpack@arg+1
 27262  003B08  C074  F062         	movff	i1___ftmul@f3_as_product+2,i1___ftpack@arg+2
 27263  003B0C  C071  F063         	movff	i1___ftmul@exp,i1___ftpack@exp
 27264  003B10  C076  F064         	movff	i1___ftmul@sign,i1___ftpack@sign
 27265  003B14  ECAF  F025         	call	i1___ftpack	;wreg free
 27266  003B18  C060  F068         	movff	?i1___ftpack,?i1___ftmul
 27267  003B1C  C061  F069         	movff	?i1___ftpack+1,?i1___ftmul+1
 27268  003B20  C062  F06A         	movff	?i1___ftpack+2,?i1___ftmul+2
 27269  003B24  0012               	return	
 27270  003B26                     __end_ofi1___ftmul:
 27271                           	opt stack 0
 27272                           pclatu	equ	0xFFB
 27273                           pclath	equ	0xFFA
 27274                           tblptru	equ	0xFF8
 27275                           tblptrh	equ	0xFF7
 27276                           tblptrl	equ	0xFF6
 27277                           tablat	equ	0xFF5
 27278                           prodh	equ	0xFF4
 27279                           prodl	equ	0xFF3
 27280                           intcon	equ	0xFF2
 27281                           postinc0	equ	0xFEE
 27282                           fsr0h	equ	0xFEA
 27283                           fsr0l	equ	0xFE9
 27284                           wreg	equ	0xFE8
 27285                           postdec1	equ	0xFE5
 27286                           fsr1h	equ	0xFE2
 27287                           fsr1l	equ	0xFE1
 27288                           bsr	equ	0xFE0
 27289                           indf2	equ	0xFDF
 27290                           postinc2	equ	0xFDE
 27291                           postdec2	equ	0xFDD
 27292                           plusw2	equ	0xFDB
 27293                           fsr2h	equ	0xFDA
 27294                           fsr2l	equ	0xFD9
 27295                           status	equ	0xFD8
 27296                           
 27297 ;; *************** function i1___ftpack *****************
 27298 ;; Defined at:
 27299 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
 27300 ;; Parameters:    Size  Location     Type
 27301 ;;  arg             3    0[BANK0 ] unsigned um
 27302 ;;  exp             1    3[BANK0 ] unsigned char 
 27303 ;;  sign            1    4[BANK0 ] unsigned char 
 27304 ;; Auto vars:     Size  Location     Type
 27305 ;;		None
 27306 ;; Return value:  Size  Location     Type
 27307 ;;                  3    0[BANK0 ] float 
 27308 ;; Registers used:
 27309 ;;		wreg, status,2, status,0
 27310 ;; Tracked objects:
 27311 ;;		On entry : 0/0
 27312 ;;		On exit  : 0/0
 27313 ;;		Unchanged: 0/0
 27314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27315 ;;      Params:         0       5       0       0       0       0       0
 27316 ;;      Locals:         0       0       0       0       0       0       0
 27317 ;;      Temps:          0       3       0       0       0       0       0
 27318 ;;      Totals:         0       8       0       0       0       0       0
 27319 ;;Total ram usage:        8 bytes
 27320 ;; Hardware stack levels used:    1
 27321 ;; Hardware stack levels required when called:    4
 27322 ;; This function calls:
 27323 ;;		Nothing
 27324 ;; This function is called by:
 27325 ;;		i1___altoft
 27326 ;;		i1___ftadd
 27327 ;;		i1___ftdiv
 27328 ;;		i1___ftmul
 27329 ;; This function uses a non-reentrant model
 27330 ;;
 27331                           
 27332                           	psect	text117
 27333  004B5E                     __ptext117:
 27334                           	opt stack 0
 27335  004B5E                     i1___ftpack:
 27336                           	opt stack 11
 27337                           
 27338                           ;incstack = 0
 27339  004B5E  0100               	movlb	0	; () banked
 27340  004B60  5163               	movf	i1___ftpack@exp& (0+255),w,b
 27341  004B62  0100               	movlb	0	; () banked
 27342  004B64  B4D8               	btfsc	status,2,c
 27343  004B66  D008               	goto	i1l5865
 27344                           
 27345                           ; BSR set to: 0
 27346  004B68  0100               	movlb	0	; () banked
 27347  004B6A  5160               	movf	i1___ftpack@arg& (0+255),w,b
 27348  004B6C  0100               	movlb	0	; () banked
 27349  004B6E  1161               	iorwf	(i1___ftpack@arg+1)& (0+255),w,b
 27350  004B70  0100               	movlb	0	; () banked
 27351  004B72  1162               	iorwf	(i1___ftpack@arg+2)& (0+255),w,b
 27352  004B74  A4D8               	btfss	status,2,c
 27353  004B76  D011               	goto	i1l5871
 27354  004B78                     i1l5865:
 27355                           
 27356                           ; BSR set to: 0
 27357  004B78  0E00               	movlw	0
 27358  004B7A  0100               	movlb	0	; () banked
 27359  004B7C  6F60               	movwf	?i1___ftpack& (0+255),b
 27360  004B7E  0E00               	movlw	0
 27361  004B80  0100               	movlb	0	; () banked
 27362  004B82  6F61               	movwf	(?i1___ftpack+1)& (0+255),b
 27363  004B84  0E00               	movlw	0
 27364  004B86  0100               	movlb	0	; () banked
 27365  004B88  6F62               	movwf	(?i1___ftpack+2)& (0+255),b
 27366                           
 27367                           ; BSR set to: 0
 27368  004B8A  0012               	return	
 27369  004B8C                     i1l5869:
 27370                           
 27371                           ; BSR set to: 0
 27372  004B8C  0100               	movlb	0	; () banked
 27373  004B8E  2B63               	incf	i1___ftpack@exp& (0+255),f,b
 27374  004B90  0100               	movlb	0	; () banked
 27375  004B92  90D8               	bcf	status,0,c
 27376  004B94  3362               	rrcf	(i1___ftpack@arg+2)& (0+255),f,b
 27377  004B96  3361               	rrcf	(i1___ftpack@arg+1)& (0+255),f,b
 27378  004B98  3360               	rrcf	i1___ftpack@arg& (0+255),f,b
 27379  004B9A                     i1l5871:
 27380                           
 27381                           ; BSR set to: 0
 27382  004B9A  0E00               	movlw	0
 27383  004B9C  0100               	movlb	0	; () banked
 27384  004B9E  1560               	andwf	i1___ftpack@arg& (0+255),w,b
 27385  004BA0  0100               	movlb	0	; () banked
 27386  004BA2  6F65               	movwf	??i1___ftpack& (0+255),b
 27387  004BA4  0E00               	movlw	0
 27388  004BA6  0100               	movlb	0	; () banked
 27389  004BA8  1561               	andwf	(i1___ftpack@arg+1)& (0+255),w,b
 27390  004BAA  0100               	movlb	0	; () banked
 27391  004BAC  6F66               	movwf	(??i1___ftpack+1)& (0+255),b
 27392  004BAE  0EFE               	movlw	254
 27393  004BB0  0100               	movlb	0	; () banked
 27394  004BB2  1562               	andwf	(i1___ftpack@arg+2)& (0+255),w,b
 27395  004BB4  0100               	movlb	0	; () banked
 27396  004BB6  6F67               	movwf	(??i1___ftpack+2)& (0+255),b
 27397  004BB8  0100               	movlb	0	; () banked
 27398  004BBA  5165               	movf	??i1___ftpack& (0+255),w,b
 27399  004BBC  0100               	movlb	0	; () banked
 27400  004BBE  1166               	iorwf	(??i1___ftpack+1)& (0+255),w,b
 27401  004BC0  0100               	movlb	0	; () banked
 27402  004BC2  1167               	iorwf	(??i1___ftpack+2)& (0+255),w,b
 27403  004BC4  B4D8               	btfsc	status,2,c
 27404  004BC6  D011               	goto	i1l5877
 27405  004BC8  D7E1               	goto	i1l5869
 27406  004BCA                     i1l5873:
 27407                           
 27408                           ; BSR set to: 0
 27409  004BCA  0100               	movlb	0	; () banked
 27410  004BCC  2B63               	incf	i1___ftpack@exp& (0+255),f,b
 27411                           
 27412                           ; BSR set to: 0
 27413  004BCE  0E01               	movlw	1
 27414  004BD0  0100               	movlb	0	; () banked
 27415  004BD2  2760               	addwf	i1___ftpack@arg& (0+255),f,b
 27416  004BD4  0E00               	movlw	0
 27417  004BD6  0100               	movlb	0	; () banked
 27418  004BD8  2361               	addwfc	(i1___ftpack@arg+1)& (0+255),f,b
 27419  004BDA  0E00               	movlw	0
 27420  004BDC  0100               	movlb	0	; () banked
 27421  004BDE  2362               	addwfc	(i1___ftpack@arg+2)& (0+255),f,b
 27422  004BE0  0100               	movlb	0	; () banked
 27423  004BE2  90D8               	bcf	status,0,c
 27424  004BE4  3362               	rrcf	(i1___ftpack@arg+2)& (0+255),f,b
 27425  004BE6  3361               	rrcf	(i1___ftpack@arg+1)& (0+255),f,b
 27426  004BE8  3360               	rrcf	i1___ftpack@arg& (0+255),f,b
 27427  004BEA                     i1l5877:
 27428                           
 27429                           ; BSR set to: 0
 27430  004BEA  0E00               	movlw	0
 27431  004BEC  0100               	movlb	0	; () banked
 27432  004BEE  1560               	andwf	i1___ftpack@arg& (0+255),w,b
 27433  004BF0  0100               	movlb	0	; () banked
 27434  004BF2  6F65               	movwf	??i1___ftpack& (0+255),b
 27435  004BF4  0E00               	movlw	0
 27436  004BF6  0100               	movlb	0	; () banked
 27437  004BF8  1561               	andwf	(i1___ftpack@arg+1)& (0+255),w,b
 27438  004BFA  0100               	movlb	0	; () banked
 27439  004BFC  6F66               	movwf	(??i1___ftpack+1)& (0+255),b
 27440  004BFE  0EFF               	movlw	255
 27441  004C00  0100               	movlb	0	; () banked
 27442  004C02  1562               	andwf	(i1___ftpack@arg+2)& (0+255),w,b
 27443  004C04  0100               	movlb	0	; () banked
 27444  004C06  6F67               	movwf	(??i1___ftpack+2)& (0+255),b
 27445  004C08  0100               	movlb	0	; () banked
 27446  004C0A  5165               	movf	??i1___ftpack& (0+255),w,b
 27447  004C0C  0100               	movlb	0	; () banked
 27448  004C0E  1166               	iorwf	(??i1___ftpack+1)& (0+255),w,b
 27449  004C10  0100               	movlb	0	; () banked
 27450  004C12  1167               	iorwf	(??i1___ftpack+2)& (0+255),w,b
 27451  004C14  B4D8               	btfsc	status,2,c
 27452  004C16  D008               	goto	i1l5881
 27453  004C18  D7D8               	goto	i1l5873
 27454  004C1A                     i1l5879:
 27455                           
 27456                           ; BSR set to: 0
 27457  004C1A  0100               	movlb	0	; () banked
 27458  004C1C  0763               	decf	i1___ftpack@exp& (0+255),f,b
 27459  004C1E  0100               	movlb	0	; () banked
 27460  004C20  90D8               	bcf	status,0,c
 27461  004C22  3760               	rlcf	i1___ftpack@arg& (0+255),f,b
 27462  004C24  3761               	rlcf	(i1___ftpack@arg+1)& (0+255),f,b
 27463  004C26  3762               	rlcf	(i1___ftpack@arg+2)& (0+255),f,b
 27464  004C28                     i1l5881:
 27465                           
 27466                           ; BSR set to: 0
 27467  004C28  0100               	movlb	0	; () banked
 27468  004C2A  BF61               	btfsc	(i1___ftpack@arg+1)& (0+255),7,b
 27469  004C2C  D004               	goto	i1l1322
 27470                           
 27471                           ; BSR set to: 0
 27472  004C2E  0E02               	movlw	2
 27473  004C30  0100               	movlb	0	; () banked
 27474  004C32  6163               	cpfslt	i1___ftpack@exp& (0+255),b
 27475  004C34  D7F2               	goto	i1l5879
 27476  004C36                     i1l1322:
 27477                           
 27478                           ; BSR set to: 0
 27479  004C36  0100               	movlb	0	; () banked
 27480  004C38  B163               	btfsc	i1___ftpack@exp& (0+255),0,b
 27481  004C3A  D002               	goto	i1l5887
 27482                           
 27483                           ; BSR set to: 0
 27484  004C3C  0100               	movlb	0	; () banked
 27485  004C3E  9F61               	bcf	(i1___ftpack@arg+1)& (0+255),7,b
 27486  004C40                     i1l5887:
 27487                           
 27488                           ; BSR set to: 0
 27489  004C40  0100               	movlb	0	; () banked
 27490  004C42  90D8               	bcf	status,0,c
 27491  004C44  3363               	rrcf	i1___ftpack@exp& (0+255),f,b
 27492  004C46  0100               	movlb	0	; () banked
 27493  004C48  5163               	movf	i1___ftpack@exp& (0+255),w,b
 27494  004C4A  0100               	movlb	0	; () banked
 27495  004C4C  1362               	iorwf	(i1___ftpack@arg+2)& (0+255),f,b
 27496                           
 27497                           ; BSR set to: 0
 27498  004C4E  0100               	movlb	0	; () banked
 27499  004C50  5164               	movf	i1___ftpack@sign& (0+255),w,b
 27500  004C52  0100               	movlb	0	; () banked
 27501  004C54  B4D8               	btfsc	status,2,c
 27502  004C56  D002               	goto	i1l5893
 27503                           
 27504                           ; BSR set to: 0
 27505  004C58  0100               	movlb	0	; () banked
 27506  004C5A  8F62               	bsf	(i1___ftpack@arg+2)& (0+255),7,b
 27507  004C5C                     i1l5893:
 27508                           
 27509                           ; BSR set to: 0
 27510  004C5C  C060  F060         	movff	i1___ftpack@arg,?i1___ftpack
 27511  004C60  C061  F061         	movff	i1___ftpack@arg+1,?i1___ftpack+1
 27512  004C64  C062  F062         	movff	i1___ftpack@arg+2,?i1___ftpack+2
 27513  004C68  0012               	return	
 27514  004C6A                     __end_ofi1___ftpack:
 27515                           	opt stack 0
 27516                           pclatu	equ	0xFFB
 27517                           pclath	equ	0xFFA
 27518                           tblptru	equ	0xFF8
 27519                           tblptrh	equ	0xFF7
 27520                           tblptrl	equ	0xFF6
 27521                           tablat	equ	0xFF5
 27522                           prodh	equ	0xFF4
 27523                           prodl	equ	0xFF3
 27524                           intcon	equ	0xFF2
 27525                           postinc0	equ	0xFEE
 27526                           fsr0h	equ	0xFEA
 27527                           fsr0l	equ	0xFE9
 27528                           wreg	equ	0xFE8
 27529                           postdec1	equ	0xFE5
 27530                           fsr1h	equ	0xFE2
 27531                           fsr1l	equ	0xFE1
 27532                           bsr	equ	0xFE0
 27533                           indf2	equ	0xFDF
 27534                           postinc2	equ	0xFDE
 27535                           postdec2	equ	0xFDD
 27536                           plusw2	equ	0xFDB
 27537                           fsr2h	equ	0xFDA
 27538                           fsr2l	equ	0xFD9
 27539                           status	equ	0xFD8
 27540                           
 27541 ;; *************** function _T2int *****************
 27542 ;; Defined at:
 27543 ;;		line 79 in file "source/PWMConfig.h"
 27544 ;; Parameters:    Size  Location     Type
 27545 ;;		None
 27546 ;; Auto vars:     Size  Location     Type
 27547 ;;		None
 27548 ;; Return value:  Size  Location     Type
 27549 ;;                  1    wreg      void 
 27550 ;; Registers used:
 27551 ;;		wreg, status,2, status,0, cstack
 27552 ;; Tracked objects:
 27553 ;;		On entry : 0/0
 27554 ;;		On exit  : 0/0
 27555 ;;		Unchanged: 0/0
 27556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27557 ;;      Params:         0       0       0       0       0       0       0
 27558 ;;      Locals:         0       0       0       0       0       0       0
 27559 ;;      Temps:          0       1       0       0       0       0       0
 27560 ;;      Totals:         0       1       0       0       0       0       0
 27561 ;;Total ram usage:        1 bytes
 27562 ;; Hardware stack levels used:    1
 27563 ;; Hardware stack levels required when called:    7
 27564 ;; This function calls:
 27565 ;;		_saveProcessState
 27566 ;;		i1_detenerCuchilla
 27567 ;;		i1_initProtocoll
 27568 ;;		i1_stopProcess
 27569 ;; This function is called by:
 27570 ;;		_isr
 27571 ;; This function uses a non-reentrant model
 27572 ;;
 27573                           
 27574                           	psect	text118
 27575  002C98                     __ptext118:
 27576                           	opt stack 0
 27577  002C98                     _T2int:
 27578                           	opt stack 12
 27579                           
 27580                           ;PWMConfig.h: 80: if(!processStarted && actualScreen != 14 && !ready2Cut || bladeIsUP &&
      +                           bladeIsDown)
 27581                           
 27582                           ; BSR set to: 0
 27583                           ;incstack = 0
 27584  002C98  0100               	movlb	0	; () banked
 27585  002C9A  51C0               	movf	_processStarted& (0+255),w,b
 27586  002C9C  A4D8               	btfss	status,2,c
 27587  002C9E  D009               	goto	i1l9071
 27588                           
 27589                           ; BSR set to: 0
 27590  002CA0  0E0E               	movlw	14
 27591  002CA2  0101               	movlb	1	; () banked
 27592  002CA4  19BD               	xorwf	_actualScreen& (0+255),w,b
 27593  002CA6  B4D8               	btfsc	status,2,c
 27594  002CA8  D004               	goto	i1l9071
 27595                           
 27596                           ; BSR set to: 1
 27597  002CAA  0100               	movlb	0	; () banked
 27598  002CAC  51BF               	movf	_ready2Cut& (0+255),w,b
 27599  002CAE  B4D8               	btfsc	status,2,c
 27600  002CB0  D007               	goto	i1l9075
 27601  002CB2                     i1l9071:
 27602  002CB2  0100               	movlb	0	; () banked
 27603  002CB4  51BD               	movf	_bladeIsUP& (0+255),w,b
 27604  002CB6  B4D8               	btfsc	status,2,c
 27605  002CB8  D005               	goto	i1l9077
 27606                           
 27607                           ; BSR set to: 0
 27608  002CBA  0100               	movlb	0	; () banked
 27609  002CBC  51BC               	movf	_bladeIsDown& (0+255),w,b
 27610  002CBE  A4D8               	btfss	status,2,c
 27611  002CC0                     i1l9075:
 27612                           
 27613                           ; BSR set to: 0
 27614                           ;PWMConfig.h: 81: stopProcess();
 27615  002CC0  EC43  F039         	call	i1_stopProcess	;wreg free
 27616  002CC4                     i1l9077:
 27617                           
 27618                           ;PWMConfig.h: 82: t2Cont1++;
 27619  002CC4  0100               	movlb	0	; () banked
 27620  002CC6  2BB9               	incf	_t2Cont1& (0+255),f,b
 27621                           
 27622                           ; BSR set to: 0
 27623                           ;PWMConfig.h: 83: if(PORTAbits.RA7 && !lastSttFC1) {
 27624  002CC8  AE80               	btfss	3968,7,c	;volatile
 27625  002CCA  D04D               	goto	i1l523
 27626                           
 27627                           ; BSR set to: 0
 27628  002CCC  0100               	movlb	0	; () banked
 27629  002CCE  51B7               	movf	_lastSttFC1& (0+255),w,b
 27630  002CD0  A4D8               	btfss	status,2,c
 27631  002CD2  D049               	goto	i1l523
 27632                           
 27633                           ; BSR set to: 0
 27634                           ;PWMConfig.h: 84: lastSttFC1 = 1;
 27635  002CD4  0E01               	movlw	1
 27636  002CD6  0100               	movlb	0	; () banked
 27637  002CD8  6FB7               	movwf	_lastSttFC1& (0+255),b
 27638                           
 27639                           ; BSR set to: 0
 27640                           ;PWMConfig.h: 85: detenerCuchilla();
 27641  002CDA  EC66  F039         	call	i1_detenerCuchilla	;wreg free
 27642                           
 27643                           ;PWMConfig.h: 86: bladeIsUP = 1;
 27644  002CDE  0E01               	movlw	1
 27645  002CE0  0100               	movlb	0	; () banked
 27646  002CE2  6FBD               	movwf	_bladeIsUP& (0+255),b
 27647                           
 27648                           ; BSR set to: 0
 27649                           ;PWMConfig.h: 87: processTimer = 0;
 27650  002CE4  0E00               	movlw	0
 27651  002CE6  6E3B               	movwf	_processTimer,c
 27652  002CE8  0E00               	movlw	0
 27653  002CEA  6E3C               	movwf	_processTimer+1,c
 27654  002CEC  0E00               	movlw	0
 27655  002CEE  6E3D               	movwf	_processTimer+2,c
 27656  002CF0  0E00               	movlw	0
 27657  002CF2  6E3E               	movwf	_processTimer+3,c
 27658                           
 27659                           ; BSR set to: 0
 27660                           ;PWMConfig.h: 88: if(processStarted)
 27661  002CF4  0100               	movlb	0	; () banked
 27662  002CF6  51C0               	movf	_processStarted& (0+255),w,b
 27663  002CF8  B4D8               	btfsc	status,2,c
 27664  002CFA  D003               	goto	i1l9095
 27665                           
 27666                           ; BSR set to: 0
 27667                           ;PWMConfig.h: 89: processState++;
 27668  002CFC  0100               	movlb	0	; () banked
 27669  002CFE  4BB2               	infsnz	_processState& (0+255),f,b
 27670  002D00  2BB3               	incf	(_processState+1)& (0+255),f,b
 27671  002D02                     i1l9095:
 27672                           
 27673                           ; BSR set to: 0
 27674                           ;PWMConfig.h: 90: securTimer = 0;
 27675  002D02  0E00               	movlw	0
 27676  002D04  6E37               	movwf	_securTimer,c
 27677  002D06  0E00               	movlw	0
 27678  002D08  6E38               	movwf	_securTimer+1,c
 27679  002D0A  0E00               	movlw	0
 27680  002D0C  6E39               	movwf	_securTimer+2,c
 27681  002D0E  0E00               	movlw	0
 27682  002D10  6E3A               	movwf	_securTimer+3,c
 27683                           
 27684                           ; BSR set to: 0
 27685                           ;PWMConfig.h: 91: if(processStarted && processState >= numCortes) {
 27686  002D12  0100               	movlb	0	; () banked
 27687  002D14  51C0               	movf	_processStarted& (0+255),w,b
 27688  002D16  B4D8               	btfsc	status,2,c
 27689  002D18  D022               	goto	i1l9111
 27690                           
 27691                           ; BSR set to: 0
 27692  002D1A  0100               	movlb	0	; () banked
 27693  002D1C  51D2               	movf	_numCortes& (0+255),w,b
 27694  002D1E  0100               	movlb	0	; () banked
 27695  002D20  5DB2               	subwf	_processState& (0+255),w,b
 27696  002D22  0100               	movlb	0	; () banked
 27697  002D24  51B3               	movf	(_processState+1)& (0+255),w,b
 27698  002D26  0A80               	xorlw	128
 27699  002D28  0100               	movlb	0	; () banked
 27700  002D2A  6F67               	movwf	??_T2int& (0+255),b
 27701  002D2C  0100               	movlb	0	; () banked
 27702  002D2E  51D3               	movf	(_numCortes+1)& (0+255),w,b
 27703  002D30  0A80               	xorlw	128
 27704  002D32  0100               	movlb	0	; () banked
 27705  002D34  5967               	subwfb	??_T2int& (0+255),w,b
 27706  002D36  A0D8               	btfss	status,0,c
 27707  002D38  D012               	goto	i1l9111
 27708                           
 27709                           ; BSR set to: 0
 27710                           ;PWMConfig.h: 92: processStarted = 0;
 27711  002D3A  0E00               	movlw	0
 27712  002D3C  0100               	movlb	0	; () banked
 27713  002D3E  6FC0               	movwf	_processStarted& (0+255),b
 27714                           
 27715                           ; BSR set to: 0
 27716                           ;PWMConfig.h: 93: saveProcessState();
 27717  002D40  EC12  F037         	call	_saveProcessState	;wreg free
 27718                           
 27719                           ;PWMConfig.h: 94: if(calibMode) {
 27720  002D44  0100               	movlb	0	; () banked
 27721  002D46  51BE               	movf	_calibMode& (0+255),w,b
 27722  002D48  B4D8               	btfsc	status,2,c
 27723  002D4A  D006               	goto	i1l9109
 27724                           
 27725                           ; BSR set to: 0
 27726                           ;PWMConfig.h: 95: actualScreen = 12;
 27727  002D4C  0E0C               	movlw	12
 27728  002D4E  0101               	movlb	1	; () banked
 27729  002D50  6FBD               	movwf	_actualScreen& (0+255),b
 27730                           
 27731                           ;PWMConfig.h: 96: tempLastScreen = 6;
 27732  002D52  0E06               	movlw	6
 27733  002D54  0100               	movlb	0	; () banked
 27734  002D56  6FBA               	movwf	_tempLastScreen& (0+255),b
 27735  002D58                     i1l9109:
 27736                           
 27737                           ; BSR set to: 0
 27738                           ;PWMConfig.h: 97: }
 27739                           ;PWMConfig.h: 98: initProtocoll(1);
 27740  002D58  0E01               	movlw	1
 27741  002D5A  EC68  F037         	call	i1_initProtocoll
 27742  002D5E                     i1l9111:
 27743                           
 27744                           ;PWMConfig.h: 99: }
 27745                           ;PWMConfig.h: 100: t2Cont1 = 0;
 27746  002D5E  0E00               	movlw	0
 27747  002D60  0100               	movlb	0	; () banked
 27748  002D62  6FB9               	movwf	_t2Cont1& (0+255),b
 27749                           
 27750                           ;PWMConfig.h: 101: }else if(!PORTAbits.RA7 && lastSttFC1) {
 27751  002D64  D01B               	goto	i1l9125
 27752  002D66                     i1l523:
 27753                           
 27754                           ; BSR set to: 0
 27755  002D66  BE80               	btfsc	3968,7,c	;volatile
 27756  002D68  D00C               	goto	i1l9119
 27757                           
 27758                           ; BSR set to: 0
 27759  002D6A  0100               	movlb	0	; () banked
 27760  002D6C  51B7               	movf	_lastSttFC1& (0+255),w,b
 27761  002D6E  B4D8               	btfsc	status,2,c
 27762  002D70  D008               	goto	i1l9119
 27763                           
 27764                           ; BSR set to: 0
 27765                           ;PWMConfig.h: 102: if(t2Cont1 > 124) {
 27766  002D72  0E7C               	movlw	124
 27767  002D74  0100               	movlb	0	; () banked
 27768  002D76  65B9               	cpfsgt	_t2Cont1& (0+255),b
 27769  002D78  D011               	goto	i1l9125
 27770                           
 27771                           ; BSR set to: 0
 27772                           ;PWMConfig.h: 103: lastSttFC1 = 0;
 27773  002D7A  0E00               	movlw	0
 27774  002D7C  0100               	movlb	0	; () banked
 27775  002D7E  6FB7               	movwf	_lastSttFC1& (0+255),b
 27776  002D80  D00A               	goto	i1l9123
 27777  002D82                     i1l9119:
 27778                           
 27779                           ; BSR set to: 0
 27780  002D82  AE80               	btfss	3968,7,c	;volatile
 27781  002D84  D002               	goto	i1u1303_20
 27782  002D86  0E01               	movlw	1
 27783  002D88  D001               	goto	i1u1303_26
 27784  002D8A                     i1u1303_20:
 27785  002D8A  0E00               	movlw	0
 27786  002D8C                     i1u1303_26:
 27787  002D8C  0100               	movlb	0	; () banked
 27788  002D8E  19B7               	xorwf	_lastSttFC1& (0+255),w,b
 27789  002D90  B4D8               	btfsc	status,2,c
 27790                           
 27791                           ; BSR set to: 0
 27792                           ;PWMConfig.h: 107: if(!PORTAbits.RA7)
 27793  002D92  BE80               	btfsc	3968,7,c	;volatile
 27794  002D94  D003               	goto	i1l9125
 27795  002D96                     i1l9123:
 27796                           
 27797                           ; BSR set to: 0
 27798                           ;PWMConfig.h: 108: bladeIsUP = 0;
 27799  002D96  0E00               	movlw	0
 27800  002D98  0100               	movlb	0	; () banked
 27801  002D9A  6FBD               	movwf	_bladeIsUP& (0+255),b
 27802  002D9C                     i1l9125:
 27803                           
 27804                           ; BSR set to: 0
 27805                           ;PWMConfig.h: 109: }
 27806                           ;PWMConfig.h: 110: t2Cont2++;
 27807  002D9C  0100               	movlb	0	; () banked
 27808  002D9E  2BB8               	incf	_t2Cont2& (0+255),f,b
 27809                           
 27810                           ; BSR set to: 0
 27811                           ;PWMConfig.h: 111: if(PORTAbits.RA6 && !lastSttFC2) {
 27812  002DA0  AC80               	btfss	3968,6,c	;volatile
 27813  002DA2  D059               	goto	i1l533
 27814                           
 27815                           ; BSR set to: 0
 27816  002DA4  0100               	movlb	0	; () banked
 27817  002DA6  51B6               	movf	_lastSttFC2& (0+255),w,b
 27818  002DA8  A4D8               	btfss	status,2,c
 27819  002DAA  D055               	goto	i1l533
 27820                           
 27821                           ; BSR set to: 0
 27822                           ;PWMConfig.h: 112: lastSttFC2 = 1;
 27823  002DAC  0E01               	movlw	1
 27824  002DAE  0100               	movlb	0	; () banked
 27825  002DB0  6FB6               	movwf	_lastSttFC2& (0+255),b
 27826                           
 27827                           ; BSR set to: 0
 27828                           ;PWMConfig.h: 113: detenerCuchilla();
 27829  002DB2  EC66  F039         	call	i1_detenerCuchilla	;wreg free
 27830                           
 27831                           ;PWMConfig.h: 114: bladeIsDown = 1;
 27832  002DB6  0E01               	movlw	1
 27833  002DB8  0100               	movlb	0	; () banked
 27834  002DBA  6FBC               	movwf	_bladeIsDown& (0+255),b
 27835                           
 27836                           ; BSR set to: 0
 27837                           ;PWMConfig.h: 115: processTimer = 0;
 27838  002DBC  0E00               	movlw	0
 27839  002DBE  6E3B               	movwf	_processTimer,c
 27840  002DC0  0E00               	movlw	0
 27841  002DC2  6E3C               	movwf	_processTimer+1,c
 27842  002DC4  0E00               	movlw	0
 27843  002DC6  6E3D               	movwf	_processTimer+2,c
 27844  002DC8  0E00               	movlw	0
 27845  002DCA  6E3E               	movwf	_processTimer+3,c
 27846                           
 27847                           ; BSR set to: 0
 27848                           ;PWMConfig.h: 116: securTimer = 0;
 27849  002DCC  0E00               	movlw	0
 27850  002DCE  6E37               	movwf	_securTimer,c
 27851  002DD0  0E00               	movlw	0
 27852  002DD2  6E38               	movwf	_securTimer+1,c
 27853  002DD4  0E00               	movlw	0
 27854  002DD6  6E39               	movwf	_securTimer+2,c
 27855  002DD8  0E00               	movlw	0
 27856  002DDA  6E3A               	movwf	_securTimer+3,c
 27857                           
 27858                           ; BSR set to: 0
 27859                           ;PWMConfig.h: 117: if(processStarted)
 27860  002DDC  0100               	movlb	0	; () banked
 27861  002DDE  51C0               	movf	_processStarted& (0+255),w,b
 27862  002DE0  B4D8               	btfsc	status,2,c
 27863  002DE2  D003               	goto	i1l9145
 27864                           
 27865                           ; BSR set to: 0
 27866                           ;PWMConfig.h: 118: processState++;
 27867  002DE4  0100               	movlb	0	; () banked
 27868  002DE6  4BB2               	infsnz	_processState& (0+255),f,b
 27869  002DE8  2BB3               	incf	(_processState+1)& (0+255),f,b
 27870  002DEA                     i1l9145:
 27871                           
 27872                           ; BSR set to: 0
 27873                           ;PWMConfig.h: 119: if(ready2Cut) {
 27874  002DEA  0100               	movlb	0	; () banked
 27875  002DEC  51BF               	movf	_ready2Cut& (0+255),w,b
 27876  002DEE  B4D8               	btfsc	status,2,c
 27877  002DF0  D006               	goto	i1l9149
 27878                           
 27879                           ; BSR set to: 0
 27880                           ;PWMConfig.h: 120: processStarted = 1;
 27881  002DF2  0E01               	movlw	1
 27882  002DF4  0100               	movlb	0	; () banked
 27883  002DF6  6FC0               	movwf	_processStarted& (0+255),b
 27884                           
 27885                           ;PWMConfig.h: 121: ready2Cut = 0;
 27886  002DF8  0E00               	movlw	0
 27887  002DFA  0100               	movlb	0	; () banked
 27888  002DFC  6FBF               	movwf	_ready2Cut& (0+255),b
 27889  002DFE                     i1l9149:
 27890                           
 27891                           ; BSR set to: 0
 27892                           ;PWMConfig.h: 122: }
 27893                           ;PWMConfig.h: 123: saveProcessState();
 27894  002DFE  EC12  F037         	call	_saveProcessState	;wreg free
 27895                           
 27896                           ;PWMConfig.h: 124: if(processStarted && processState >= numCortes) {
 27897  002E02  0100               	movlb	0	; () banked
 27898  002E04  51C0               	movf	_processStarted& (0+255),w,b
 27899  002E06  B4D8               	btfsc	status,2,c
 27900  002E08  D022               	goto	i1l9165
 27901                           
 27902                           ; BSR set to: 0
 27903  002E0A  0100               	movlb	0	; () banked
 27904  002E0C  51D2               	movf	_numCortes& (0+255),w,b
 27905  002E0E  0100               	movlb	0	; () banked
 27906  002E10  5DB2               	subwf	_processState& (0+255),w,b
 27907  002E12  0100               	movlb	0	; () banked
 27908  002E14  51B3               	movf	(_processState+1)& (0+255),w,b
 27909  002E16  0A80               	xorlw	128
 27910  002E18  0100               	movlb	0	; () banked
 27911  002E1A  6F67               	movwf	??_T2int& (0+255),b
 27912  002E1C  0100               	movlb	0	; () banked
 27913  002E1E  51D3               	movf	(_numCortes+1)& (0+255),w,b
 27914  002E20  0A80               	xorlw	128
 27915  002E22  0100               	movlb	0	; () banked
 27916  002E24  5967               	subwfb	??_T2int& (0+255),w,b
 27917  002E26  A0D8               	btfss	status,0,c
 27918  002E28  D012               	goto	i1l9165
 27919                           
 27920                           ; BSR set to: 0
 27921                           ;PWMConfig.h: 125: processStarted = 0;
 27922  002E2A  0E00               	movlw	0
 27923  002E2C  0100               	movlb	0	; () banked
 27924  002E2E  6FC0               	movwf	_processStarted& (0+255),b
 27925                           
 27926                           ; BSR set to: 0
 27927                           ;PWMConfig.h: 126: saveProcessState();
 27928  002E30  EC12  F037         	call	_saveProcessState	;wreg free
 27929                           
 27930                           ;PWMConfig.h: 127: if(calibMode) {
 27931  002E34  0100               	movlb	0	; () banked
 27932  002E36  51BE               	movf	_calibMode& (0+255),w,b
 27933  002E38  B4D8               	btfsc	status,2,c
 27934  002E3A  D006               	goto	i1l9163
 27935                           
 27936                           ; BSR set to: 0
 27937                           ;PWMConfig.h: 128: actualScreen = 12;
 27938  002E3C  0E0C               	movlw	12
 27939  002E3E  0101               	movlb	1	; () banked
 27940  002E40  6FBD               	movwf	_actualScreen& (0+255),b
 27941                           
 27942                           ;PWMConfig.h: 129: tempLastScreen = 6;
 27943  002E42  0E06               	movlw	6
 27944  002E44  0100               	movlb	0	; () banked
 27945  002E46  6FBA               	movwf	_tempLastScreen& (0+255),b
 27946  002E48                     i1l9163:
 27947                           
 27948                           ; BSR set to: 0
 27949                           ;PWMConfig.h: 130: }
 27950                           ;PWMConfig.h: 131: initProtocoll(1);
 27951  002E48  0E01               	movlw	1
 27952  002E4A  EC68  F037         	call	i1_initProtocoll
 27953  002E4E                     i1l9165:
 27954                           
 27955                           ;PWMConfig.h: 132: }
 27956                           ;PWMConfig.h: 133: t2Cont2 = 0;
 27957  002E4E  0E00               	movlw	0
 27958  002E50  0100               	movlb	0	; () banked
 27959  002E52  6FB8               	movwf	_t2Cont2& (0+255),b
 27960                           
 27961                           ;PWMConfig.h: 134: }else if(!PORTAbits.RA6 && lastSttFC2) {
 27962  002E54  0012               	return	
 27963  002E56                     i1l533:
 27964                           
 27965                           ; BSR set to: 0
 27966  002E56  BC80               	btfsc	3968,6,c	;volatile
 27967  002E58  D00F               	goto	i1l9173
 27968                           
 27969                           ; BSR set to: 0
 27970  002E5A  0100               	movlb	0	; () banked
 27971  002E5C  51B6               	movf	_lastSttFC2& (0+255),w,b
 27972  002E5E  B4D8               	btfsc	status,2,c
 27973  002E60  D00B               	goto	i1l9173
 27974                           
 27975                           ; BSR set to: 0
 27976                           ;PWMConfig.h: 135: if(t2Cont2 > 124) {
 27977  002E62  0E7C               	movlw	124
 27978  002E64  0100               	movlb	0	; () banked
 27979  002E66  65B8               	cpfsgt	_t2Cont2& (0+255),b
 27980  002E68  0012               	return	
 27981                           
 27982                           ; BSR set to: 0
 27983                           ;PWMConfig.h: 136: lastSttFC2 = 0;
 27984  002E6A  0E00               	movlw	0
 27985  002E6C  0100               	movlb	0	; () banked
 27986  002E6E  6FB6               	movwf	_lastSttFC2& (0+255),b
 27987                           
 27988                           ;PWMConfig.h: 137: bladeIsDown = 0;
 27989  002E70  0E00               	movlw	0
 27990  002E72  0100               	movlb	0	; () banked
 27991  002E74  6FBC               	movwf	_bladeIsDown& (0+255),b
 27992                           
 27993                           ; BSR set to: 0
 27994                           ;PWMConfig.h: 138: }
 27995                           ;PWMConfig.h: 139: }else if(PORTAbits.RA6 == lastSttFC2) {
 27996  002E76  0012               	return	
 27997  002E78                     i1l9173:
 27998                           
 27999                           ; BSR set to: 0
 28000  002E78  AC80               	btfss	3968,6,c	;volatile
 28001  002E7A  D002               	goto	i1u1316_20
 28002  002E7C  0E01               	movlw	1
 28003  002E7E  D001               	goto	i1u1316_26
 28004  002E80                     i1u1316_20:
 28005  002E80  0E00               	movlw	0
 28006  002E82                     i1u1316_26:
 28007  002E82  0100               	movlb	0	; () banked
 28008  002E84  19B6               	xorwf	_lastSttFC2& (0+255),w,b
 28009  002E86  A4D8               	btfss	status,2,c
 28010  002E88  0012               	return	
 28011                           
 28012                           ; BSR set to: 0
 28013                           ;PWMConfig.h: 140: if(!PORTAbits.RA6)
 28014  002E8A  BC80               	btfsc	3968,6,c	;volatile
 28015  002E8C  0012               	return	
 28016                           
 28017                           ; BSR set to: 0
 28018                           ;PWMConfig.h: 141: bladeIsDown = 0;
 28019  002E8E  0E00               	movlw	0
 28020  002E90  0100               	movlb	0	; () banked
 28021  002E92  6FBC               	movwf	_bladeIsDown& (0+255),b
 28022                           
 28023                           ; BSR set to: 0
 28024                           
 28025                           ; BSR set to: 0
 28026                           
 28027                           ; BSR set to: 0
 28028  002E94  0012               	return	
 28029  002E96                     __end_of_T2int:
 28030                           	opt stack 0
 28031                           pclatu	equ	0xFFB
 28032                           pclath	equ	0xFFA
 28033                           tblptru	equ	0xFF8
 28034                           tblptrh	equ	0xFF7
 28035                           tblptrl	equ	0xFF6
 28036                           tablat	equ	0xFF5
 28037                           prodh	equ	0xFF4
 28038                           prodl	equ	0xFF3
 28039                           intcon	equ	0xFF2
 28040                           postinc0	equ	0xFEE
 28041                           fsr0h	equ	0xFEA
 28042                           fsr0l	equ	0xFE9
 28043                           wreg	equ	0xFE8
 28044                           postdec1	equ	0xFE5
 28045                           fsr1h	equ	0xFE2
 28046                           fsr1l	equ	0xFE1
 28047                           bsr	equ	0xFE0
 28048                           indf2	equ	0xFDF
 28049                           postinc2	equ	0xFDE
 28050                           postdec2	equ	0xFDD
 28051                           plusw2	equ	0xFDB
 28052                           fsr2h	equ	0xFDA
 28053                           fsr2l	equ	0xFD9
 28054                           status	equ	0xFD8
 28055                           
 28056 ;; *************** function i1_stopProcess *****************
 28057 ;; Defined at:
 28058 ;;		line 72 in file "source/PWMConfig.h"
 28059 ;; Parameters:    Size  Location     Type
 28060 ;;		None
 28061 ;; Auto vars:     Size  Location     Type
 28062 ;;		None
 28063 ;; Return value:  Size  Location     Type
 28064 ;;                  1    wreg      void 
 28065 ;; Registers used:
 28066 ;;		wreg, status,2, status,0, cstack
 28067 ;; Tracked objects:
 28068 ;;		On entry : 0/0
 28069 ;;		On exit  : 0/0
 28070 ;;		Unchanged: 0/0
 28071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28072 ;;      Params:         0       0       0       0       0       0       0
 28073 ;;      Locals:         0       0       0       0       0       0       0
 28074 ;;      Temps:          0       0       0       0       0       0       0
 28075 ;;      Totals:         0       0       0       0       0       0       0
 28076 ;;Total ram usage:        0 bytes
 28077 ;; Hardware stack levels used:    1
 28078 ;; Hardware stack levels required when called:    6
 28079 ;; This function calls:
 28080 ;;		i1_detenerCuchilla
 28081 ;; This function is called by:
 28082 ;;		_T2int
 28083 ;;		i1_longPressRETRO
 28084 ;;		i1_pressENTER
 28085 ;; This function uses a non-reentrant model
 28086 ;;
 28087                           
 28088                           	psect	text119
 28089  007286                     __ptext119:
 28090                           	opt stack 0
 28091  007286                     i1_stopProcess:
 28092                           	opt stack 11
 28093                           
 28094                           ;PWMConfig.h: 73: processStarted = 0;
 28095                           
 28096                           ; BSR set to: 0
 28097                           ;incstack = 0
 28098  007286  0E00               	movlw	0
 28099  007288  0100               	movlb	0	; () banked
 28100  00728A  6FC0               	movwf	_processStarted& (0+255),b
 28101                           
 28102                           ;PWMConfig.h: 74: ready2Cut = 0;
 28103  00728C  0E00               	movlw	0
 28104  00728E  0100               	movlb	0	; () banked
 28105  007290  6FBF               	movwf	_ready2Cut& (0+255),b
 28106                           
 28107                           ; BSR set to: 0
 28108                           ;PWMConfig.h: 75: LATCbits.LATC4 = 0;
 28109  007292  988B               	bcf	3979,4,c	;volatile
 28110                           
 28111                           ; BSR set to: 0
 28112                           ;PWMConfig.h: 76: detenerCuchilla();
 28113  007294  EC66  F039         	call	i1_detenerCuchilla	;wreg free
 28114  007298  0012               	return		;funcret
 28115  00729A                     __end_ofi1_stopProcess:
 28116                           	opt stack 0
 28117                           pclatu	equ	0xFFB
 28118                           pclath	equ	0xFFA
 28119                           tblptru	equ	0xFF8
 28120                           tblptrh	equ	0xFF7
 28121                           tblptrl	equ	0xFF6
 28122                           tablat	equ	0xFF5
 28123                           prodh	equ	0xFF4
 28124                           prodl	equ	0xFF3
 28125                           intcon	equ	0xFF2
 28126                           postinc0	equ	0xFEE
 28127                           fsr0h	equ	0xFEA
 28128                           fsr0l	equ	0xFE9
 28129                           wreg	equ	0xFE8
 28130                           postdec1	equ	0xFE5
 28131                           fsr1h	equ	0xFE2
 28132                           fsr1l	equ	0xFE1
 28133                           bsr	equ	0xFE0
 28134                           indf2	equ	0xFDF
 28135                           postinc2	equ	0xFDE
 28136                           postdec2	equ	0xFDD
 28137                           plusw2	equ	0xFDB
 28138                           fsr2h	equ	0xFDA
 28139                           fsr2l	equ	0xFD9
 28140                           status	equ	0xFD8
 28141                           
 28142 ;; *************** function i1_detenerCuchilla *****************
 28143 ;; Defined at:
 28144 ;;		line 57 in file "source/PWMConfig.h"
 28145 ;; Parameters:    Size  Location     Type
 28146 ;;		None
 28147 ;; Auto vars:     Size  Location     Type
 28148 ;;		None
 28149 ;; Return value:  Size  Location     Type
 28150 ;;                  1    wreg      void 
 28151 ;; Registers used:
 28152 ;;		wreg, status,2, status,0, cstack
 28153 ;; Tracked objects:
 28154 ;;		On entry : 0/0
 28155 ;;		On exit  : 0/0
 28156 ;;		Unchanged: 0/0
 28157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28158 ;;      Params:         0       0       0       0       0       0       0
 28159 ;;      Locals:         0       0       0       0       0       0       0
 28160 ;;      Temps:          0       0       0       0       0       0       0
 28161 ;;      Totals:         0       0       0       0       0       0       0
 28162 ;;Total ram usage:        0 bytes
 28163 ;; Hardware stack levels used:    1
 28164 ;; Hardware stack levels required when called:    5
 28165 ;; This function calls:
 28166 ;;		i1_setPWM2duty
 28167 ;; This function is called by:
 28168 ;;		_T2int
 28169 ;;		i1_stopProcess
 28170 ;; This function uses a non-reentrant model
 28171 ;;
 28172                           
 28173                           	psect	text120
 28174  0072CC                     __ptext120:
 28175                           	opt stack 0
 28176  0072CC                     i1_detenerCuchilla:
 28177                           	opt stack 11
 28178                           
 28179                           ;PWMConfig.h: 58: setPWM2duty(0);
 28180                           
 28181                           ;incstack = 0
 28182  0072CC  0E00               	movlw	0
 28183  0072CE  0100               	movlb	0	; () banked
 28184  0072D0  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 28185  0072D2  0E00               	movlw	0
 28186  0072D4  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 28187  0072D6  EC8A  F02F         	call	i1_setPWM2duty	;wreg free
 28188  0072DA  0012               	return		;funcret
 28189  0072DC                     __end_ofi1_detenerCuchilla:
 28190                           	opt stack 0
 28191                           pclatu	equ	0xFFB
 28192                           pclath	equ	0xFFA
 28193                           tblptru	equ	0xFF8
 28194                           tblptrh	equ	0xFF7
 28195                           tblptrl	equ	0xFF6
 28196                           tablat	equ	0xFF5
 28197                           prodh	equ	0xFF4
 28198                           prodl	equ	0xFF3
 28199                           intcon	equ	0xFF2
 28200                           postinc0	equ	0xFEE
 28201                           fsr0h	equ	0xFEA
 28202                           fsr0l	equ	0xFE9
 28203                           wreg	equ	0xFE8
 28204                           postdec1	equ	0xFE5
 28205                           fsr1h	equ	0xFE2
 28206                           fsr1l	equ	0xFE1
 28207                           bsr	equ	0xFE0
 28208                           indf2	equ	0xFDF
 28209                           postinc2	equ	0xFDE
 28210                           postdec2	equ	0xFDD
 28211                           plusw2	equ	0xFDB
 28212                           fsr2h	equ	0xFDA
 28213                           fsr2l	equ	0xFD9
 28214                           status	equ	0xFD8
 28215                           
 28216 ;; *************** function i1_initProtocoll *****************
 28217 ;; Defined at:
 28218 ;;		line 61 in file "source/PWMConfig.h"
 28219 ;; Parameters:    Size  Location     Type
 28220 ;;  init            1    wreg     unsigned char 
 28221 ;; Auto vars:     Size  Location     Type
 28222 ;;  init            1    6[BANK0 ] unsigned char 
 28223 ;; Return value:  Size  Location     Type
 28224 ;;                  1    wreg      void 
 28225 ;; Registers used:
 28226 ;;		wreg, status,2, status,0, cstack
 28227 ;; Tracked objects:
 28228 ;;		On entry : 0/0
 28229 ;;		On exit  : 0/0
 28230 ;;		Unchanged: 0/0
 28231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28232 ;;      Params:         0       0       0       0       0       0       0
 28233 ;;      Locals:         0       1       0       0       0       0       0
 28234 ;;      Temps:          0       0       0       0       0       0       0
 28235 ;;      Totals:         0       1       0       0       0       0       0
 28236 ;;Total ram usage:        1 bytes
 28237 ;; Hardware stack levels used:    1
 28238 ;; Hardware stack levels required when called:    6
 28239 ;; This function calls:
 28240 ;;		i1_subirCuchilla
 28241 ;; This function is called by:
 28242 ;;		_T2int
 28243 ;;		i1_pressRETRO
 28244 ;;		i1_longPressRETRO
 28245 ;;		i1_pressENTER
 28246 ;; This function uses a non-reentrant model
 28247 ;;
 28248                           
 28249                           	psect	text121
 28250  006ED0                     __ptext121:
 28251                           	opt stack 0
 28252  006ED0                     i1_initProtocoll:
 28253                           	opt stack 11
 28254                           
 28255                           ;incstack = 0
 28256                           ;i1initProtocoll@init stored from wreg
 28257  006ED0  0100               	movlb	0	; () banked
 28258  006ED2  6F66               	movwf	i1initProtocoll@init& (0+255),b
 28259                           
 28260                           ;PWMConfig.h: 62: if(init) {
 28261  006ED4  0100               	movlb	0	; () banked
 28262  006ED6  5166               	movf	i1initProtocoll@init& (0+255),w,b
 28263  006ED8  0100               	movlb	0	; () banked
 28264  006EDA  B4D8               	btfsc	status,2,c
 28265  006EDC  0012               	return	
 28266                           
 28267                           ; BSR set to: 0
 28268                           ;PWMConfig.h: 63: LATCbits.LATC5 = 0;
 28269  006EDE  9A8B               	bcf	3979,5,c	;volatile
 28270                           
 28271                           ; BSR set to: 0
 28272                           ;PWMConfig.h: 64: processTimer = 0;
 28273  006EE0  0E00               	movlw	0
 28274  006EE2  6E3B               	movwf	_processTimer,c
 28275  006EE4  0E00               	movlw	0
 28276  006EE6  6E3C               	movwf	_processTimer+1,c
 28277  006EE8  0E00               	movlw	0
 28278  006EEA  6E3D               	movwf	_processTimer+2,c
 28279  006EEC  0E00               	movlw	0
 28280  006EEE  6E3E               	movwf	_processTimer+3,c
 28281                           
 28282                           ;PWMConfig.h: 65: processState = 0;
 28283  006EF0  0E00               	movlw	0
 28284  006EF2  0100               	movlb	0	; () banked
 28285  006EF4  6FB3               	movwf	(_processState+1)& (0+255),b
 28286  006EF6  0E00               	movlw	0
 28287  006EF8  6FB2               	movwf	_processState& (0+255),b
 28288                           
 28289                           ; BSR set to: 0
 28290                           ;PWMConfig.h: 66: if(!bladeIsUP)
 28291  006EFA  0100               	movlb	0	; () banked
 28292  006EFC  51BD               	movf	_bladeIsUP& (0+255),w,b
 28293  006EFE  A4D8               	btfss	status,2,c
 28294  006F00  0012               	return	
 28295                           
 28296                           ; BSR set to: 0
 28297                           ;PWMConfig.h: 67: subirCuchilla();
 28298  006F02  EC6E  F039         	call	i1_subirCuchilla	;wreg free
 28299  006F06  0012               	return	
 28300  006F08                     __end_ofi1_initProtocoll:
 28301                           	opt stack 0
 28302                           pclatu	equ	0xFFB
 28303                           pclath	equ	0xFFA
 28304                           tblptru	equ	0xFF8
 28305                           tblptrh	equ	0xFF7
 28306                           tblptrl	equ	0xFF6
 28307                           tablat	equ	0xFF5
 28308                           prodh	equ	0xFF4
 28309                           prodl	equ	0xFF3
 28310                           intcon	equ	0xFF2
 28311                           postinc0	equ	0xFEE
 28312                           fsr0h	equ	0xFEA
 28313                           fsr0l	equ	0xFE9
 28314                           wreg	equ	0xFE8
 28315                           postdec1	equ	0xFE5
 28316                           fsr1h	equ	0xFE2
 28317                           fsr1l	equ	0xFE1
 28318                           bsr	equ	0xFE0
 28319                           indf2	equ	0xFDF
 28320                           postinc2	equ	0xFDE
 28321                           postdec2	equ	0xFDD
 28322                           plusw2	equ	0xFDB
 28323                           fsr2h	equ	0xFDA
 28324                           fsr2l	equ	0xFD9
 28325                           status	equ	0xFD8
 28326                           
 28327 ;; *************** function i1_subirCuchilla *****************
 28328 ;; Defined at:
 28329 ;;		line 49 in file "source/PWMConfig.h"
 28330 ;; Parameters:    Size  Location     Type
 28331 ;;		None
 28332 ;; Auto vars:     Size  Location     Type
 28333 ;;		None
 28334 ;; Return value:  Size  Location     Type
 28335 ;;                  1    wreg      void 
 28336 ;; Registers used:
 28337 ;;		wreg, status,2, status,0, cstack
 28338 ;; Tracked objects:
 28339 ;;		On entry : 0/0
 28340 ;;		On exit  : 0/0
 28341 ;;		Unchanged: 0/0
 28342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28343 ;;      Params:         0       0       0       0       0       0       0
 28344 ;;      Locals:         0       0       0       0       0       0       0
 28345 ;;      Temps:          0       0       0       0       0       0       0
 28346 ;;      Totals:         0       0       0       0       0       0       0
 28347 ;;Total ram usage:        0 bytes
 28348 ;; Hardware stack levels used:    1
 28349 ;; Hardware stack levels required when called:    5
 28350 ;; This function calls:
 28351 ;;		i1_setPWM2duty
 28352 ;; This function is called by:
 28353 ;;		i1_initProtocoll
 28354 ;; This function uses a non-reentrant model
 28355 ;;
 28356                           
 28357                           	psect	text122
 28358  0072DC                     __ptext122:
 28359                           	opt stack 0
 28360  0072DC                     i1_subirCuchilla:
 28361                           	opt stack 11
 28362                           
 28363                           ;PWMConfig.h: 50: setPWM2duty(-400);
 28364                           
 28365                           ;incstack = 0
 28366  0072DC  0EFE               	movlw	254
 28367  0072DE  0100               	movlb	0	; () banked
 28368  0072E0  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 28369  0072E2  0E70               	movlw	112
 28370  0072E4  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 28371  0072E6  EC8A  F02F         	call	i1_setPWM2duty	;wreg free
 28372  0072EA  0012               	return		;funcret
 28373  0072EC                     __end_ofi1_subirCuchilla:
 28374                           	opt stack 0
 28375                           pclatu	equ	0xFFB
 28376                           pclath	equ	0xFFA
 28377                           tblptru	equ	0xFF8
 28378                           tblptrh	equ	0xFF7
 28379                           tblptrl	equ	0xFF6
 28380                           tablat	equ	0xFF5
 28381                           prodh	equ	0xFF4
 28382                           prodl	equ	0xFF3
 28383                           intcon	equ	0xFF2
 28384                           postinc0	equ	0xFEE
 28385                           fsr0h	equ	0xFEA
 28386                           fsr0l	equ	0xFE9
 28387                           wreg	equ	0xFE8
 28388                           postdec1	equ	0xFE5
 28389                           fsr1h	equ	0xFE2
 28390                           fsr1l	equ	0xFE1
 28391                           bsr	equ	0xFE0
 28392                           indf2	equ	0xFDF
 28393                           postinc2	equ	0xFDE
 28394                           postdec2	equ	0xFDD
 28395                           plusw2	equ	0xFDB
 28396                           fsr2h	equ	0xFDA
 28397                           fsr2l	equ	0xFD9
 28398                           status	equ	0xFD8
 28399                           
 28400 ;; *************** function i1_setPWM2duty *****************
 28401 ;; Defined at:
 28402 ;;		line 37 in file "source/PWMConfig.h"
 28403 ;; Parameters:    Size  Location     Type
 28404 ;;  actuator        2    0[BANK0 ] short 
 28405 ;; Auto vars:     Size  Location     Type
 28406 ;;  setPWM2duty     2    4[BANK0 ] short 
 28407 ;; Return value:  Size  Location     Type
 28408 ;;                  1    wreg      void 
 28409 ;; Registers used:
 28410 ;;		wreg, status,2, status,0
 28411 ;; Tracked objects:
 28412 ;;		On entry : 0/0
 28413 ;;		On exit  : 0/0
 28414 ;;		Unchanged: 0/0
 28415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28416 ;;      Params:         0       2       0       0       0       0       0
 28417 ;;      Locals:         0       2       0       0       0       0       0
 28418 ;;      Temps:          0       2       0       0       0       0       0
 28419 ;;      Totals:         0       6       0       0       0       0       0
 28420 ;;Total ram usage:        6 bytes
 28421 ;; Hardware stack levels used:    1
 28422 ;; Hardware stack levels required when called:    4
 28423 ;; This function calls:
 28424 ;;		Nothing
 28425 ;; This function is called by:
 28426 ;;		i1_subirCuchilla
 28427 ;;		i1_detenerCuchilla
 28428 ;;		i1_pressENTER
 28429 ;; This function uses a non-reentrant model
 28430 ;;
 28431                           
 28432                           	psect	text123
 28433  005F14                     __ptext123:
 28434                           	opt stack 0
 28435  005F14                     i1_setPWM2duty:
 28436                           	opt stack 11
 28437                           
 28438                           ;PWMConfig.h: 38: short act = 400;
 28439                           
 28440                           ;incstack = 0
 28441  005F14  0E01               	movlw	1
 28442  005F16  0100               	movlb	0	; () banked
 28443  005F18  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 28444  005F1A  0E90               	movlw	144
 28445  005F1C  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 28446                           
 28447                           ; BSR set to: 0
 28448                           ;PWMConfig.h: 39: if(actuator > 400)
 28449  005F1E  0100               	movlb	0	; () banked
 28450  005F20  BF61               	btfsc	(i1setPWM2duty@actuator+1)& (0+255),7,b
 28451  005F22  D00D               	goto	i1l6629
 28452  005F24  0E91               	movlw	145
 28453  005F26  0100               	movlb	0	; () banked
 28454  005F28  5D60               	subwf	i1setPWM2duty@actuator& (0+255),w,b
 28455  005F2A  0E01               	movlw	1
 28456  005F2C  0100               	movlb	0	; () banked
 28457  005F2E  5961               	subwfb	(i1setPWM2duty@actuator+1)& (0+255),w,b
 28458  005F30  A0D8               	btfss	status,0,c
 28459  005F32  D005               	goto	i1l6629
 28460                           
 28461                           ; BSR set to: 0
 28462                           ;PWMConfig.h: 40: act = 800;
 28463  005F34  0E03               	movlw	3
 28464  005F36  0100               	movlb	0	; () banked
 28465  005F38  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 28466  005F3A  0E20               	movlw	32
 28467  005F3C  D00F               	goto	L9
 28468  005F3E                     i1l6629:
 28469                           
 28470                           ; BSR set to: 0
 28471                           ;PWMConfig.h: 41: else if(actuator < -400)
 28472  005F3E  0100               	movlb	0	; () banked
 28473  005F40  AF61               	btfss	(i1setPWM2duty@actuator+1)& (0+255),7,b
 28474  005F42  D00E               	goto	i1l6633
 28475  005F44  0E70               	movlw	112
 28476  005F46  0100               	movlb	0	; () banked
 28477  005F48  5D60               	subwf	i1setPWM2duty@actuator& (0+255),w,b
 28478  005F4A  0EFE               	movlw	254
 28479  005F4C  0100               	movlb	0	; () banked
 28480  005F4E  5961               	subwfb	(i1setPWM2duty@actuator+1)& (0+255),w,b
 28481  005F50  B0D8               	btfsc	status,0,c
 28482  005F52  D006               	goto	i1l6633
 28483                           
 28484                           ; BSR set to: 0
 28485                           ;PWMConfig.h: 42: act = 0;
 28486  005F54  0E00               	movlw	0
 28487  005F56  0100               	movlb	0	; () banked
 28488  005F58  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 28489  005F5A  0E00               	movlw	0
 28490  005F5C                     L9:
 28491  005F5C  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 28492  005F5E  D00A               	goto	i1l495
 28493  005F60                     i1l6633:
 28494                           
 28495                           ; BSR set to: 0
 28496                           ;PWMConfig.h: 43: else
 28497                           ;PWMConfig.h: 44: act = actuator + 400;
 28498  005F60  0E90               	movlw	144
 28499  005F62  0100               	movlb	0	; () banked
 28500  005F64  2560               	addwf	i1setPWM2duty@actuator& (0+255),w,b
 28501  005F66  0100               	movlb	0	; () banked
 28502  005F68  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 28503  005F6A  0E01               	movlw	1
 28504  005F6C  0100               	movlb	0	; () banked
 28505  005F6E  2161               	addwfc	(i1setPWM2duty@actuator+1)& (0+255),w,b
 28506  005F70  0100               	movlb	0	; () banked
 28507  005F72  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 28508  005F74                     i1l495:
 28509                           
 28510                           ; BSR set to: 0
 28511                           ;PWMConfig.h: 45: CCP2CONbits.DC2B = act;
 28512  005F74  C064  F062         	movff	i1setPWM2duty@act,??i1_setPWM2duty
 28513  005F78  0100               	movlb	0	; () banked
 28514  005F7A  3B62               	swapf	??i1_setPWM2duty& (0+255),f,b
 28515  005F7C  5066               	movf	3942,w,c	;volatile
 28516  005F7E  0100               	movlb	0	; () banked
 28517  005F80  1962               	xorwf	??i1_setPWM2duty& (0+255),w,b
 28518  005F82  0BCF               	andlw	-49
 28519  005F84  1962               	xorwf	??i1_setPWM2duty& (0+255),w,b
 28520  005F86  6E66               	movwf	3942,c	;volatile
 28521                           
 28522                           ;PWMConfig.h: 46: CCPR2L = act>>2;
 28523  005F88  C064  F062         	movff	i1setPWM2duty@act,??i1_setPWM2duty
 28524  005F8C  C065  F063         	movff	i1setPWM2duty@act+1,??i1_setPWM2duty+1
 28525  005F90  0100               	movlb	0	; () banked
 28526  005F92  3563               	rlcf	(??i1_setPWM2duty+1)& (0+255),w,b
 28527  005F94  3363               	rrcf	(??i1_setPWM2duty+1)& (0+255),f,b
 28528  005F96  3362               	rrcf	??i1_setPWM2duty& (0+255),f,b
 28529  005F98  0100               	movlb	0	; () banked
 28530  005F9A  3563               	rlcf	(??i1_setPWM2duty+1)& (0+255),w,b
 28531  005F9C  3363               	rrcf	(??i1_setPWM2duty+1)& (0+255),f,b
 28532  005F9E  3362               	rrcf	??i1_setPWM2duty& (0+255),f,b
 28533  005FA0  0100               	movlb	0	; () banked
 28534  005FA2  5162               	movf	??i1_setPWM2duty& (0+255),w,b
 28535  005FA4  6E67               	movwf	3943,c	;volatile
 28536                           
 28537                           ; BSR set to: 0
 28538  005FA6  0012               	return		;funcret
 28539  005FA8                     __end_ofi1_setPWM2duty:
 28540                           	opt stack 0
 28541                           pclatu	equ	0xFFB
 28542                           pclath	equ	0xFFA
 28543                           tblptru	equ	0xFF8
 28544                           tblptrh	equ	0xFF7
 28545                           tblptrl	equ	0xFF6
 28546                           tablat	equ	0xFF5
 28547                           prodh	equ	0xFF4
 28548                           prodl	equ	0xFF3
 28549                           intcon	equ	0xFF2
 28550                           postinc0	equ	0xFEE
 28551                           fsr0h	equ	0xFEA
 28552                           fsr0l	equ	0xFE9
 28553                           wreg	equ	0xFE8
 28554                           postdec1	equ	0xFE5
 28555                           fsr1h	equ	0xFE2
 28556                           fsr1l	equ	0xFE1
 28557                           bsr	equ	0xFE0
 28558                           indf2	equ	0xFDF
 28559                           postinc2	equ	0xFDE
 28560                           postdec2	equ	0xFDD
 28561                           plusw2	equ	0xFDB
 28562                           fsr2h	equ	0xFDA
 28563                           fsr2l	equ	0xFD9
 28564                           status	equ	0xFD8
 28565                           
 28566 ;; *************** function _saveProcessState *****************
 28567 ;; Defined at:
 28568 ;;		line 158 in file "source/sysParams.h"
 28569 ;; Parameters:    Size  Location     Type
 28570 ;;		None
 28571 ;; Auto vars:     Size  Location     Type
 28572 ;;		None
 28573 ;; Return value:  Size  Location     Type
 28574 ;;                  1    wreg      void 
 28575 ;; Registers used:
 28576 ;;		wreg, status,2, cstack
 28577 ;; Tracked objects:
 28578 ;;		On entry : 0/0
 28579 ;;		On exit  : 0/0
 28580 ;;		Unchanged: 0/0
 28581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28582 ;;      Params:         0       0       0       0       0       0       0
 28583 ;;      Locals:         0       0       0       0       0       0       0
 28584 ;;      Temps:          0       0       0       0       0       0       0
 28585 ;;      Totals:         0       0       0       0       0       0       0
 28586 ;;Total ram usage:        0 bytes
 28587 ;; Hardware stack levels used:    1
 28588 ;; Hardware stack levels required when called:    5
 28589 ;; This function calls:
 28590 ;;		i1_writeEEPROM
 28591 ;; This function is called by:
 28592 ;;		_T2int
 28593 ;; This function uses a non-reentrant model
 28594 ;;
 28595                           
 28596                           	psect	text124
 28597  006E24                     __ptext124:
 28598                           	opt stack 0
 28599  006E24                     _saveProcessState:
 28600                           	opt stack 13
 28601                           
 28602                           ;sysParams.h: 159: EECON1bits.WREN = 1;
 28603                           
 28604                           ; BSR set to: 0
 28605                           ;incstack = 0
 28606  006E24  84A6               	bsf	4006,2,c	;volatile
 28607                           
 28608                           ;sysParams.h: 160: ie = INTCONbits.GIE;
 28609  006E26  0E00               	movlw	0
 28610  006E28  BEF2               	btfsc	intcon,7,c	;volatile
 28611  006E2A  0E01               	movlw	1
 28612  006E2C  0100               	movlb	0	; () banked
 28613  006E2E  6FBB               	movwf	_ie& (0+255),b
 28614                           
 28615                           ; BSR set to: 0
 28616                           ;sysParams.h: 161: INTCONbits.GIE = 0;
 28617  006E30  9EF2               	bcf	intcon,7,c	;volatile
 28618                           
 28619                           ; BSR set to: 0
 28620                           ;sysParams.h: 162: writeEEPROM(30, processStarted);
 28621  006E32  C0C0  F060         	movff	_processStarted,i1writeEEPROM@data
 28622  006E36  0E1E               	movlw	30
 28623  006E38  ECD3  F038         	call	i1_writeEEPROM
 28624                           
 28625                           ;sysParams.h: 163: writeEEPROM(31, processState);
 28626  006E3C  C0B2  F060         	movff	_processState,i1writeEEPROM@data
 28627  006E40  0E1F               	movlw	31
 28628  006E42  ECD3  F038         	call	i1_writeEEPROM
 28629                           
 28630                           ;sysParams.h: 164: writeEEPROM(32, bladeIsUP);
 28631  006E46  C0BD  F060         	movff	_bladeIsUP,i1writeEEPROM@data
 28632  006E4A  0E20               	movlw	32
 28633  006E4C  ECD3  F038         	call	i1_writeEEPROM
 28634                           
 28635                           ;sysParams.h: 165: EECON1bits.WREN = 0;
 28636  006E50  94A6               	bcf	4006,2,c	;volatile
 28637                           
 28638                           ;sysParams.h: 166: INTCONbits.GIE = ie;
 28639  006E52  0100               	movlb	0	; () banked
 28640  006E54  B1BB               	btfsc	_ie& (0+255),0,b
 28641  006E56  D002               	bra	i1u1003_25
 28642  006E58  9EF2               	bcf	intcon,7,c	;volatile
 28643  006E5A  D001               	bra	i1u1003_26
 28644  006E5C                     i1u1003_25:
 28645  006E5C  8EF2               	bsf	intcon,7,c	;volatile
 28646  006E5E                     i1u1003_26:
 28647  006E5E  0012               	return		;funcret
 28648  006E60                     __end_of_saveProcessState:
 28649                           	opt stack 0
 28650                           pclatu	equ	0xFFB
 28651                           pclath	equ	0xFFA
 28652                           tblptru	equ	0xFF8
 28653                           tblptrh	equ	0xFF7
 28654                           tblptrl	equ	0xFF6
 28655                           tablat	equ	0xFF5
 28656                           prodh	equ	0xFF4
 28657                           prodl	equ	0xFF3
 28658                           intcon	equ	0xFF2
 28659                           postinc0	equ	0xFEE
 28660                           fsr0h	equ	0xFEA
 28661                           fsr0l	equ	0xFE9
 28662                           wreg	equ	0xFE8
 28663                           postdec1	equ	0xFE5
 28664                           fsr1h	equ	0xFE2
 28665                           fsr1l	equ	0xFE1
 28666                           bsr	equ	0xFE0
 28667                           indf2	equ	0xFDF
 28668                           postinc2	equ	0xFDE
 28669                           postdec2	equ	0xFDD
 28670                           plusw2	equ	0xFDB
 28671                           fsr2h	equ	0xFDA
 28672                           fsr2l	equ	0xFD9
 28673                           status	equ	0xFD8
 28674                           
 28675 ;; *************** function i1_writeEEPROM *****************
 28676 ;; Defined at:
 28677 ;;		line 54 in file "source/sysParams.h"
 28678 ;; Parameters:    Size  Location     Type
 28679 ;;  adr             1    wreg     unsigned char 
 28680 ;;  data            1    0[BANK0 ] unsigned char 
 28681 ;; Auto vars:     Size  Location     Type
 28682 ;;  adr             1    1[BANK0 ] unsigned char 
 28683 ;; Return value:  Size  Location     Type
 28684 ;;                  1    wreg      void 
 28685 ;; Registers used:
 28686 ;;		wreg, status,2
 28687 ;; Tracked objects:
 28688 ;;		On entry : 0/0
 28689 ;;		On exit  : 0/0
 28690 ;;		Unchanged: 0/0
 28691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28692 ;;      Params:         0       1       0       0       0       0       0
 28693 ;;      Locals:         0       1       0       0       0       0       0
 28694 ;;      Temps:          0       0       0       0       0       0       0
 28695 ;;      Totals:         0       2       0       0       0       0       0
 28696 ;;Total ram usage:        2 bytes
 28697 ;; Hardware stack levels used:    1
 28698 ;; Hardware stack levels required when called:    4
 28699 ;; This function calls:
 28700 ;;		Nothing
 28701 ;; This function is called by:
 28702 ;;		_saveProcessState
 28703 ;;		i1_saveSysParams
 28704 ;; This function uses a non-reentrant model
 28705 ;;
 28706                           
 28707                           	psect	text125
 28708  0071A6                     __ptext125:
 28709                           	opt stack 0
 28710  0071A6                     i1_writeEEPROM:
 28711                           	opt stack 13
 28712                           
 28713                           ;incstack = 0
 28714                           ;i1writeEEPROM@adr stored from wreg
 28715  0071A6  0100               	movlb	0	; () banked
 28716  0071A8  6F61               	movwf	i1writeEEPROM@adr& (0+255),b
 28717                           
 28718                           ;sysParams.h: 55: EEADR = adr;
 28719  0071AA  C061  FFA9         	movff	i1writeEEPROM@adr,4009	;volatile
 28720                           
 28721                           ;sysParams.h: 56: EEDATA = data;
 28722  0071AE  C060  FFA8         	movff	i1writeEEPROM@data,4008	;volatile
 28723                           
 28724                           ;sysParams.h: 57: EECON1bits.EEPGD = 0;
 28725  0071B2  9EA6               	bcf	4006,7,c	;volatile
 28726                           
 28727                           ;sysParams.h: 58: EECON1bits.CFGS = 0;
 28728  0071B4  9CA6               	bcf	4006,6,c	;volatile
 28729                           
 28730                           ;sysParams.h: 59: EECON2 = 0x55;
 28731  0071B6  0E55               	movlw	85
 28732  0071B8  6EA7               	movwf	4007,c	;volatile
 28733                           
 28734                           ;sysParams.h: 60: EECON2 = 0xAA;
 28735  0071BA  0EAA               	movlw	170
 28736  0071BC  6EA7               	movwf	4007,c	;volatile
 28737                           
 28738                           ;sysParams.h: 61: EECON1bits.WR = 1;
 28739  0071BE  82A6               	bsf	4006,1,c	;volatile
 28740  0071C0                     i1l283:
 28741  0071C0  A2A6               	btfss	4006,1,c	;volatile
 28742  0071C2  0012               	return	
 28743  0071C4  D7FD               	goto	i1l283
 28744  0071C6                     __end_ofi1_writeEEPROM:
 28745                           	opt stack 0
 28746                           pclatu	equ	0xFFB
 28747                           pclath	equ	0xFFA
 28748                           tblptru	equ	0xFF8
 28749                           tblptrh	equ	0xFF7
 28750                           tblptrl	equ	0xFF6
 28751                           tablat	equ	0xFF5
 28752                           prodh	equ	0xFF4
 28753                           prodl	equ	0xFF3
 28754                           intcon	equ	0xFF2
 28755                           postinc0	equ	0xFEE
 28756                           fsr0h	equ	0xFEA
 28757                           fsr0l	equ	0xFE9
 28758                           wreg	equ	0xFE8
 28759                           postdec1	equ	0xFE5
 28760                           fsr1h	equ	0xFE2
 28761                           fsr1l	equ	0xFE1
 28762                           bsr	equ	0xFE0
 28763                           indf2	equ	0xFDF
 28764                           postinc2	equ	0xFDE
 28765                           postdec2	equ	0xFDD
 28766                           plusw2	equ	0xFDB
 28767                           fsr2h	equ	0xFDA
 28768                           fsr2l	equ	0xFD9
 28769                           status	equ	0xFD8
 28770                           
 28771 ;; *************** function _hp_isr *****************
 28772 ;; Defined at:
 28773 ;;		line 13 in file "source/main.c"
 28774 ;; Parameters:    Size  Location     Type
 28775 ;;		None
 28776 ;; Auto vars:     Size  Location     Type
 28777 ;;		None
 28778 ;; Return value:  Size  Location     Type
 28779 ;;                  1    wreg      void 
 28780 ;; Registers used:
 28781 ;;		wreg, status,2, status,0, cstack
 28782 ;; Tracked objects:
 28783 ;;		On entry : 0/0
 28784 ;;		On exit  : 0/0
 28785 ;;		Unchanged: 0/0
 28786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28787 ;;      Params:         0       0       0       0       0       0       0
 28788 ;;      Locals:         0       0       0       0       0       0       0
 28789 ;;      Temps:         14       0       0       0       0       0       0
 28790 ;;      Totals:        14       0       0       0       0       0       0
 28791 ;;Total ram usage:       14 bytes
 28792 ;; Hardware stack levels used:    1
 28793 ;; Hardware stack levels required when called:    3
 28794 ;; This function calls:
 28795 ;;		_T4int
 28796 ;; This function is called by:
 28797 ;;		Interrupt level 2
 28798 ;; This function uses a non-reentrant model
 28799 ;;
 28800                           
 28801                           	psect	intcode
 28802  000008                     __pintcode:
 28803                           	opt stack 0
 28804  000008                     _hp_isr:
 28805                           	opt stack 9
 28806                           
 28807                           ;incstack = 0
 28808  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 28809  00000A  EF54  F032         	goto	int_func
 28810                           pclatu	equ	0xFFB
 28811                           pclath	equ	0xFFA
 28812                           tblptru	equ	0xFF8
 28813                           tblptrh	equ	0xFF7
 28814                           tblptrl	equ	0xFF6
 28815                           tablat	equ	0xFF5
 28816                           prodh	equ	0xFF4
 28817                           prodl	equ	0xFF3
 28818                           intcon	equ	0xFF2
 28819                           postinc0	equ	0xFEE
 28820                           fsr0h	equ	0xFEA
 28821                           fsr0l	equ	0xFE9
 28822                           wreg	equ	0xFE8
 28823                           postdec1	equ	0xFE5
 28824                           fsr1h	equ	0xFE2
 28825                           fsr1l	equ	0xFE1
 28826                           bsr	equ	0xFE0
 28827                           indf2	equ	0xFDF
 28828                           postinc2	equ	0xFDE
 28829                           postdec2	equ	0xFDD
 28830                           plusw2	equ	0xFDB
 28831                           fsr2h	equ	0xFDA
 28832                           fsr2l	equ	0xFD9
 28833                           status	equ	0xFD8
 28834                           
 28835                           	psect	intcode_body
 28836  0064A8                     __pintcode_body:
 28837                           	opt stack 9
 28838  0064A8                     int_func:
 28839                           	opt stack 9
 28840  0064A8  CFFA F029          	movff	pclath,??_hp_isr
 28841  0064AC  CFFB F02A          	movff	pclatu,??_hp_isr+1
 28842  0064B0  CFE9 F02B          	movff	fsr0l,??_hp_isr+2
 28843  0064B4  CFEA F02C          	movff	fsr0h,??_hp_isr+3
 28844  0064B8  CFE1 F02D          	movff	fsr1l,??_hp_isr+4
 28845  0064BC  CFE2 F02E          	movff	fsr1h,??_hp_isr+5
 28846  0064C0  CFD9 F02F          	movff	fsr2l,??_hp_isr+6
 28847  0064C4  CFDA F030          	movff	fsr2h,??_hp_isr+7
 28848  0064C8  CFF3 F031          	movff	prodl,??_hp_isr+8
 28849  0064CC  CFF4 F032          	movff	prodh,??_hp_isr+9
 28850  0064D0  CFF6 F033          	movff	tblptrl,??_hp_isr+10
 28851  0064D4  CFF7 F034          	movff	tblptrh,??_hp_isr+11
 28852  0064D8  CFF8 F035          	movff	tblptru,??_hp_isr+12
 28853  0064DC  CFF5 F036          	movff	tablat,??_hp_isr+13
 28854                           
 28855                           ;main.c: 14: if(PIE5bits.TMR4IE && PIR5bits.TMR4IF) {
 28856  0064E0  B07D               	btfsc	3965,0,c	;volatile
 28857  0064E2  A07E               	btfss	3966,0,c	;volatile
 28858  0064E4  D003               	goto	i2l934
 28859                           
 28860                           ;main.c: 15: T4int();
 28861  0064E6  EC93  F01D         	call	_T4int	;wreg free
 28862                           
 28863                           ;main.c: 16: PIR5bits.TMR4IF = 0;
 28864  0064EA  907E               	bcf	3966,0,c	;volatile
 28865  0064EC                     i2l934:
 28866  0064EC  C036  FFF5         	movff	??_hp_isr+13,tablat
 28867  0064F0  C035  FFF8         	movff	??_hp_isr+12,tblptru
 28868  0064F4  C034  FFF7         	movff	??_hp_isr+11,tblptrh
 28869  0064F8  C033  FFF6         	movff	??_hp_isr+10,tblptrl
 28870  0064FC  C032  FFF4         	movff	??_hp_isr+9,prodh
 28871  006500  C031  FFF3         	movff	??_hp_isr+8,prodl
 28872  006504  C030  FFDA         	movff	??_hp_isr+7,fsr2h
 28873  006508  C02F  FFD9         	movff	??_hp_isr+6,fsr2l
 28874  00650C  C02E  FFE2         	movff	??_hp_isr+5,fsr1h
 28875  006510  C02D  FFE1         	movff	??_hp_isr+4,fsr1l
 28876  006514  C02C  FFEA         	movff	??_hp_isr+3,fsr0h
 28877  006518  C02B  FFE9         	movff	??_hp_isr+2,fsr0l
 28878  00651C  C02A  FFFB         	movff	??_hp_isr+1,pclatu
 28879  006520  C029  FFFA         	movff	??_hp_isr,pclath
 28880  006524  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 28881  006526  0011               	retfie		f
 28882  006528                     __end_of_hp_isr:
 28883                           	opt stack 0
 28884                           pclatu	equ	0xFFB
 28885                           pclath	equ	0xFFA
 28886                           tblptru	equ	0xFF8
 28887                           tblptrh	equ	0xFF7
 28888                           tblptrl	equ	0xFF6
 28889                           tablat	equ	0xFF5
 28890                           prodh	equ	0xFF4
 28891                           prodl	equ	0xFF3
 28892                           intcon	equ	0xFF2
 28893                           postinc0	equ	0xFEE
 28894                           fsr0h	equ	0xFEA
 28895                           fsr0l	equ	0xFE9
 28896                           wreg	equ	0xFE8
 28897                           postdec1	equ	0xFE5
 28898                           fsr1h	equ	0xFE2
 28899                           fsr1l	equ	0xFE1
 28900                           bsr	equ	0xFE0
 28901                           indf2	equ	0xFDF
 28902                           postinc2	equ	0xFDE
 28903                           postdec2	equ	0xFDD
 28904                           plusw2	equ	0xFDB
 28905                           fsr2h	equ	0xFDA
 28906                           fsr2l	equ	0xFD9
 28907                           status	equ	0xFD8
 28908                           
 28909 ;; *************** function _T4int *****************
 28910 ;; Defined at:
 28911 ;;		line 21 in file "source/T4Config.h"
 28912 ;; Parameters:    Size  Location     Type
 28913 ;;		None
 28914 ;; Auto vars:     Size  Location     Type
 28915 ;;		None
 28916 ;; Return value:  Size  Location     Type
 28917 ;;                  1    wreg      void 
 28918 ;; Registers used:
 28919 ;;		wreg, status,2, status,0, cstack
 28920 ;; Tracked objects:
 28921 ;;		On entry : 0/0
 28922 ;;		On exit  : 0/0
 28923 ;;		Unchanged: 0/0
 28924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28925 ;;      Params:         0       0       0       0       0       0       0
 28926 ;;      Locals:         0       0       0       0       0       0       0
 28927 ;;      Temps:          1       0       0       0       0       0       0
 28928 ;;      Totals:         1       0       0       0       0       0       0
 28929 ;;Total ram usage:        1 bytes
 28930 ;; Hardware stack levels used:    1
 28931 ;; Hardware stack levels required when called:    2
 28932 ;; This function calls:
 28933 ;;		_bajarCuchilla
 28934 ;;		_cutError
 28935 ;;		i2___altoft
 28936 ;;		i2___ftadd
 28937 ;;		i2___ftge
 28938 ;;		i2_subirCuchilla
 28939 ;; This function is called by:
 28940 ;;		_hp_isr
 28941 ;; This function uses a non-reentrant model
 28942 ;;
 28943                           
 28944                           	psect	text127
 28945  003B26                     __ptext127:
 28946                           	opt stack 0
 28947  003B26                     _T4int:
 28948                           	opt stack 9
 28949                           
 28950                           ;T4Config.h: 22: LATBbits.LATB0 = processStarted;
 28951                           
 28952                           ;incstack = 0
 28953  003B26  0100               	movlb	0	; () banked
 28954  003B28  B1C0               	btfsc	_processStarted& (0+255),0,b
 28955  003B2A  D002               	bra	i2u1336_45
 28956  003B2C  908A               	bcf	3978,0,c	;volatile
 28957  003B2E  D001               	bra	i2u1336_46
 28958  003B30                     i2u1336_45:
 28959  003B30  808A               	bsf	3978,0,c	;volatile
 28960  003B32                     i2u1336_46:
 28961  003B32  0004               	clrwdt		;# 
 28962                           
 28963                           ;T4Config.h: 26: processTimer++;
 28964  003B34  0E01               	movlw	1
 28965  003B36  263B               	addwf	_processTimer,f,c
 28966  003B38  0E00               	movlw	0
 28967  003B3A  223C               	addwfc	_processTimer+1,f,c
 28968  003B3C  223D               	addwfc	_processTimer+2,f,c
 28969  003B3E  223E               	addwfc	_processTimer+3,f,c
 28970                           
 28971                           ;T4Config.h: 27: if(processStarted) {
 28972  003B40  0100               	movlb	0	; () banked
 28973  003B42  51C0               	movf	_processStarted& (0+255),w,b
 28974  003B44  B4D8               	btfsc	status,2,c
 28975  003B46  D039               	goto	i2l9367
 28976                           
 28977                           ; BSR set to: 0
 28978                           ;T4Config.h: 28: securTimer++;
 28979  003B48  0E01               	movlw	1
 28980  003B4A  2637               	addwf	_securTimer,f,c
 28981  003B4C  0E00               	movlw	0
 28982  003B4E  2238               	addwfc	_securTimer+1,f,c
 28983  003B50  2239               	addwfc	_securTimer+2,f,c
 28984  003B52  223A               	addwfc	_securTimer+3,f,c
 28985                           
 28986                           ; BSR set to: 0
 28987                           ;T4Config.h: 29: if(securTimer > timsXcorte + maxTimePerCut)
 28988  003B54  C055  F016         	movff	_timsXcorte,i2___ftadd@f2
 28989  003B58  C056  F017         	movff	_timsXcorte+1,i2___ftadd@f2+1
 28990  003B5C  C057  F018         	movff	_timsXcorte+2,i2___ftadd@f2+2
 28991  003B60  C051  F009         	movff	_maxTimePerCut,i2___altoft@c
 28992  003B64  C052  F00A         	movff	_maxTimePerCut+1,i2___altoft@c+1
 28993  003B68  C053  F00B         	movff	_maxTimePerCut+2,i2___altoft@c+2
 28994  003B6C  C054  F00C         	movff	_maxTimePerCut+3,i2___altoft@c+3
 28995  003B70  EC4C  F033         	call	i2___altoft	;wreg free
 28996  003B74  C009  F013         	movff	?i2___altoft,i2___ftadd@f1
 28997  003B78  C00A  F014         	movff	?i2___altoft+1,i2___ftadd@f1+1
 28998  003B7C  C00B  F015         	movff	?i2___altoft+2,i2___ftadd@f1+2
 28999  003B80  EC26  F018         	call	i2___ftadd	;wreg free
 29000  003B84  C013  F01F         	movff	?i2___ftadd,i2___ftge@ff1
 29001  003B88  C014  F020         	movff	?i2___ftadd+1,i2___ftge@ff1+1
 29002  003B8C  C015  F021         	movff	?i2___ftadd+2,i2___ftge@ff1+2
 29003  003B90  C037  F009         	movff	_securTimer,i2___altoft@c
 29004  003B94  C038  F00A         	movff	_securTimer+1,i2___altoft@c+1
 29005  003B98  C039  F00B         	movff	_securTimer+2,i2___altoft@c+2
 29006  003B9C  C03A  F00C         	movff	_securTimer+3,i2___altoft@c+3
 29007  003BA0  EC4C  F033         	call	i2___altoft	;wreg free
 29008  003BA4  C009  F022         	movff	?i2___altoft,i2___ftge@ff2
 29009  003BA8  C00A  F023         	movff	?i2___altoft+1,i2___ftge@ff2+1
 29010  003BAC  C00B  F024         	movff	?i2___altoft+2,i2___ftge@ff2+2
 29011  003BB0  ECAF  F030         	call	i2___ftge	;wreg free
 29012  003BB4  A0D8               	btfss	status,0,c
 29013                           
 29014                           ;T4Config.h: 30: cutError();
 29015  003BB6  EC2F  F038         	call	_cutError	;wreg free
 29016  003BBA                     i2l9367:
 29017                           
 29018                           ;T4Config.h: 31: }
 29019                           ;T4Config.h: 32: if(bladeIsUP && !bladeIsDown) {
 29020  003BBA  0100               	movlb	0	; () banked
 29021  003BBC  51BD               	movf	_bladeIsUP& (0+255),w,b
 29022  003BBE  B4D8               	btfsc	status,2,c
 29023  003BC0  D033               	goto	i2l9379
 29024                           
 29025                           ; BSR set to: 0
 29026  003BC2  0100               	movlb	0	; () banked
 29027  003BC4  51BC               	movf	_bladeIsDown& (0+255),w,b
 29028  003BC6  A4D8               	btfss	status,2,c
 29029  003BC8  D02F               	goto	i2l9379
 29030                           
 29031                           ; BSR set to: 0
 29032                           ;T4Config.h: 33: if(processTimer >= timsXcorte && processStarted && processState < numCo
      +                          rtes)
 29033  003BCA  C03B  F009         	movff	_processTimer,i2___altoft@c
 29034  003BCE  C03C  F00A         	movff	_processTimer+1,i2___altoft@c+1
 29035  003BD2  C03D  F00B         	movff	_processTimer+2,i2___altoft@c+2
 29036  003BD6  C03E  F00C         	movff	_processTimer+3,i2___altoft@c+3
 29037  003BDA  EC4C  F033         	call	i2___altoft	;wreg free
 29038  003BDE  C009  F01F         	movff	?i2___altoft,i2___ftge@ff1
 29039  003BE2  C00A  F020         	movff	?i2___altoft+1,i2___ftge@ff1+1
 29040  003BE6  C00B  F021         	movff	?i2___altoft+2,i2___ftge@ff1+2
 29041  003BEA  C055  F022         	movff	_timsXcorte,i2___ftge@ff2
 29042  003BEE  C056  F023         	movff	_timsXcorte+1,i2___ftge@ff2+1
 29043  003BF2  C057  F024         	movff	_timsXcorte+2,i2___ftge@ff2+2
 29044  003BF6  ECAF  F030         	call	i2___ftge	;wreg free
 29045  003BFA  A0D8               	btfss	status,0,c
 29046  003BFC  0012               	return	
 29047  003BFE  0100               	movlb	0	; () banked
 29048  003C00  51C0               	movf	_processStarted& (0+255),w,b
 29049  003C02  B4D8               	btfsc	status,2,c
 29050  003C04  0012               	return	
 29051                           
 29052                           ; BSR set to: 0
 29053  003C06  0100               	movlb	0	; () banked
 29054  003C08  51D2               	movf	_numCortes& (0+255),w,b
 29055  003C0A  0100               	movlb	0	; () banked
 29056  003C0C  5DB2               	subwf	_processState& (0+255),w,b
 29057  003C0E  0100               	movlb	0	; () banked
 29058  003C10  51B3               	movf	(_processState+1)& (0+255),w,b
 29059  003C12  0A80               	xorlw	128
 29060  003C14  6E28               	movwf	??_T4int& (0+255),c
 29061  003C16  0100               	movlb	0	; () banked
 29062  003C18  51D3               	movf	(_numCortes+1)& (0+255),w,b
 29063  003C1A  0A80               	xorlw	128
 29064  003C1C  5828               	subwfb	??_T4int& (0+255),w,c
 29065  003C1E  B0D8               	btfsc	status,0,c
 29066  003C20  0012               	return	
 29067                           
 29068                           ; BSR set to: 0
 29069                           ;T4Config.h: 34: bajarCuchilla();
 29070  003C22  ECA1  F039         	call	_bajarCuchilla	;wreg free
 29071                           
 29072                           ;T4Config.h: 35: }else if(bladeIsDown && !bladeIsUP){
 29073  003C26  0012               	return	
 29074  003C28                     i2l9379:
 29075  003C28  0100               	movlb	0	; () banked
 29076  003C2A  51BC               	movf	_bladeIsDown& (0+255),w,b
 29077  003C2C  B4D8               	btfsc	status,2,c
 29078  003C2E  0012               	return	
 29079                           
 29080                           ; BSR set to: 0
 29081  003C30  0100               	movlb	0	; () banked
 29082  003C32  51BD               	movf	_bladeIsUP& (0+255),w,b
 29083  003C34  A4D8               	btfss	status,2,c
 29084  003C36  0012               	return	
 29085                           
 29086                           ; BSR set to: 0
 29087                           ;T4Config.h: 36: if(processTimer >= timsXcorte && processStarted)
 29088  003C38  C03B  F009         	movff	_processTimer,i2___altoft@c
 29089  003C3C  C03C  F00A         	movff	_processTimer+1,i2___altoft@c+1
 29090  003C40  C03D  F00B         	movff	_processTimer+2,i2___altoft@c+2
 29091  003C44  C03E  F00C         	movff	_processTimer+3,i2___altoft@c+3
 29092  003C48  EC4C  F033         	call	i2___altoft	;wreg free
 29093  003C4C  C009  F01F         	movff	?i2___altoft,i2___ftge@ff1
 29094  003C50  C00A  F020         	movff	?i2___altoft+1,i2___ftge@ff1+1
 29095  003C54  C00B  F021         	movff	?i2___altoft+2,i2___ftge@ff1+2
 29096  003C58  C055  F022         	movff	_timsXcorte,i2___ftge@ff2
 29097  003C5C  C056  F023         	movff	_timsXcorte+1,i2___ftge@ff2+1
 29098  003C60  C057  F024         	movff	_timsXcorte+2,i2___ftge@ff2+2
 29099  003C64  ECAF  F030         	call	i2___ftge	;wreg free
 29100  003C68  A0D8               	btfss	status,0,c
 29101  003C6A  0012               	return	
 29102  003C6C  0100               	movlb	0	; () banked
 29103  003C6E  51C0               	movf	_processStarted& (0+255),w,b
 29104  003C70  B4D8               	btfsc	status,2,c
 29105  003C72  0012               	return	
 29106                           
 29107                           ; BSR set to: 0
 29108                           ;T4Config.h: 37: subirCuchilla();
 29109  003C74  EC9A  F039         	call	i2_subirCuchilla	;wreg free
 29110  003C78  0012               	return	
 29111  003C7A                     __end_of_T4int:
 29112                           	opt stack 0
 29113                           pclatu	equ	0xFFB
 29114                           pclath	equ	0xFFA
 29115                           tblptru	equ	0xFF8
 29116                           tblptrh	equ	0xFF7
 29117                           tblptrl	equ	0xFF6
 29118                           tablat	equ	0xFF5
 29119                           prodh	equ	0xFF4
 29120                           prodl	equ	0xFF3
 29121                           intcon	equ	0xFF2
 29122                           postinc0	equ	0xFEE
 29123                           fsr0h	equ	0xFEA
 29124                           fsr0l	equ	0xFE9
 29125                           wreg	equ	0xFE8
 29126                           postdec1	equ	0xFE5
 29127                           fsr1h	equ	0xFE2
 29128                           fsr1l	equ	0xFE1
 29129                           bsr	equ	0xFE0
 29130                           indf2	equ	0xFDF
 29131                           postinc2	equ	0xFDE
 29132                           postdec2	equ	0xFDD
 29133                           plusw2	equ	0xFDB
 29134                           fsr2h	equ	0xFDA
 29135                           fsr2l	equ	0xFD9
 29136                           status	equ	0xFD8
 29137                           
 29138 ;; *************** function i2_subirCuchilla *****************
 29139 ;; Defined at:
 29140 ;;		line 49 in file "source/PWMConfig.h"
 29141 ;; Parameters:    Size  Location     Type
 29142 ;;		None
 29143 ;; Auto vars:     Size  Location     Type
 29144 ;;		None
 29145 ;; Return value:  Size  Location     Type
 29146 ;;                  1    wreg      void 
 29147 ;; Registers used:
 29148 ;;		wreg, status,2, status,0, cstack
 29149 ;; Tracked objects:
 29150 ;;		On entry : 0/0
 29151 ;;		On exit  : 0/0
 29152 ;;		Unchanged: 0/0
 29153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29154 ;;      Params:         0       0       0       0       0       0       0
 29155 ;;      Locals:         0       0       0       0       0       0       0
 29156 ;;      Temps:          0       0       0       0       0       0       0
 29157 ;;      Totals:         0       0       0       0       0       0       0
 29158 ;;Total ram usage:        0 bytes
 29159 ;; Hardware stack levels used:    1
 29160 ;; Hardware stack levels required when called:    1
 29161 ;; This function calls:
 29162 ;;		i2_setPWM2duty
 29163 ;; This function is called by:
 29164 ;;		_T4int
 29165 ;; This function uses a non-reentrant model
 29166 ;;
 29167                           
 29168                           	psect	text128
 29169  007334                     __ptext128:
 29170                           	opt stack 0
 29171  007334                     i2_subirCuchilla:
 29172                           	opt stack 9
 29173                           
 29174                           ;PWMConfig.h: 50: setPWM2duty(-400);
 29175                           
 29176                           ;incstack = 0
 29177  007334  0EFE               	movlw	254
 29178  007336  6E02               	movwf	i2setPWM2duty@actuator+1,c
 29179  007338  0E70               	movlw	112
 29180  00733A  6E01               	movwf	i2setPWM2duty@actuator,c
 29181  00733C  ECE8  F034         	call	i2_setPWM2duty	;wreg free
 29182  007340  0012               	return		;funcret
 29183  007342                     __end_ofi2_subirCuchilla:
 29184                           	opt stack 0
 29185                           pclatu	equ	0xFFB
 29186                           pclath	equ	0xFFA
 29187                           tblptru	equ	0xFF8
 29188                           tblptrh	equ	0xFF7
 29189                           tblptrl	equ	0xFF6
 29190                           tablat	equ	0xFF5
 29191                           prodh	equ	0xFF4
 29192                           prodl	equ	0xFF3
 29193                           intcon	equ	0xFF2
 29194                           postinc0	equ	0xFEE
 29195                           fsr0h	equ	0xFEA
 29196                           fsr0l	equ	0xFE9
 29197                           wreg	equ	0xFE8
 29198                           postdec1	equ	0xFE5
 29199                           fsr1h	equ	0xFE2
 29200                           fsr1l	equ	0xFE1
 29201                           bsr	equ	0xFE0
 29202                           indf2	equ	0xFDF
 29203                           postinc2	equ	0xFDE
 29204                           postdec2	equ	0xFDD
 29205                           plusw2	equ	0xFDB
 29206                           fsr2h	equ	0xFDA
 29207                           fsr2l	equ	0xFD9
 29208                           status	equ	0xFD8
 29209                           
 29210 ;; *************** function i2___ftge *****************
 29211 ;; Defined at:
 29212 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
 29213 ;; Parameters:    Size  Location     Type
 29214 ;;  ff1             3   30[COMRAM] float 
 29215 ;;  ff2             3   33[COMRAM] float 
 29216 ;; Auto vars:     Size  Location     Type
 29217 ;;		None
 29218 ;; Return value:  Size  Location     Type
 29219 ;;		None               void
 29220 ;; Registers used:
 29221 ;;		wreg, status,2, status,0
 29222 ;; Tracked objects:
 29223 ;;		On entry : 0/0
 29224 ;;		On exit  : 0/0
 29225 ;;		Unchanged: 0/0
 29226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29227 ;;      Params:         6       0       0       0       0       0       0
 29228 ;;      Locals:         0       0       0       0       0       0       0
 29229 ;;      Temps:          3       0       0       0       0       0       0
 29230 ;;      Totals:         9       0       0       0       0       0       0
 29231 ;;Total ram usage:        9 bytes
 29232 ;; Hardware stack levels used:    1
 29233 ;; This function calls:
 29234 ;;		Nothing
 29235 ;; This function is called by:
 29236 ;;		_T4int
 29237 ;; This function uses a non-reentrant model
 29238 ;;
 29239                           
 29240                           	psect	text129
 29241  00615E                     __ptext129:
 29242                           	opt stack 0
 29243  00615E                     i2___ftge:
 29244                           	opt stack 10
 29245                           
 29246                           ;incstack = 0
 29247  00615E  AE21               	btfss	i2___ftge@ff1+2,7,c
 29248  006160  D016               	goto	i2l8947
 29249  006162  C01F  F025         	movff	i2___ftge@ff1,??i2___ftge
 29250  006166  C020  F026         	movff	i2___ftge@ff1+1,??i2___ftge+1
 29251  00616A  C021  F027         	movff	i2___ftge@ff1+2,??i2___ftge+2
 29252  00616E  1E25               	comf	??i2___ftge,f,c
 29253  006170  1E26               	comf	??i2___ftge+1,f,c
 29254  006172  1E27               	comf	??i2___ftge+2,f,c
 29255  006174  2A25               	incf	??i2___ftge,f,c
 29256  006176  0E00               	movlw	0
 29257  006178  2226               	addwfc	??i2___ftge+1,f,c
 29258  00617A  2227               	addwfc	??i2___ftge+2,f,c
 29259  00617C  0E00               	movlw	0
 29260  00617E  2425               	addwf	??i2___ftge,w,c
 29261  006180  6E1F               	movwf	i2___ftge@ff1,c
 29262  006182  0E00               	movlw	0
 29263  006184  2026               	addwfc	??i2___ftge+1,w,c
 29264  006186  6E20               	movwf	i2___ftge@ff1+1,c
 29265  006188  0E80               	movlw	128
 29266  00618A  2027               	addwfc	??i2___ftge+2,w,c
 29267  00618C  6E21               	movwf	i2___ftge@ff1+2,c
 29268  00618E                     i2l8947:
 29269  00618E  AE24               	btfss	i2___ftge@ff2+2,7,c
 29270  006190  D016               	goto	i2l8951
 29271  006192  C022  F025         	movff	i2___ftge@ff2,??i2___ftge
 29272  006196  C023  F026         	movff	i2___ftge@ff2+1,??i2___ftge+1
 29273  00619A  C024  F027         	movff	i2___ftge@ff2+2,??i2___ftge+2
 29274  00619E  1E25               	comf	??i2___ftge,f,c
 29275  0061A0  1E26               	comf	??i2___ftge+1,f,c
 29276  0061A2  1E27               	comf	??i2___ftge+2,f,c
 29277  0061A4  2A25               	incf	??i2___ftge,f,c
 29278  0061A6  0E00               	movlw	0
 29279  0061A8  2226               	addwfc	??i2___ftge+1,f,c
 29280  0061AA  2227               	addwfc	??i2___ftge+2,f,c
 29281  0061AC  0E00               	movlw	0
 29282  0061AE  2425               	addwf	??i2___ftge,w,c
 29283  0061B0  6E22               	movwf	i2___ftge@ff2,c
 29284  0061B2  0E00               	movlw	0
 29285  0061B4  2026               	addwfc	??i2___ftge+1,w,c
 29286  0061B6  6E23               	movwf	i2___ftge@ff2+1,c
 29287  0061B8  0E80               	movlw	128
 29288  0061BA  2027               	addwfc	??i2___ftge+2,w,c
 29289  0061BC  6E24               	movwf	i2___ftge@ff2+2,c
 29290  0061BE                     i2l8951:
 29291  0061BE  0E00               	movlw	0
 29292  0061C0  1A1F               	xorwf	i2___ftge@ff1,f,c
 29293  0061C2  0E00               	movlw	0
 29294  0061C4  1A20               	xorwf	i2___ftge@ff1+1,f,c
 29295  0061C6  0E80               	movlw	128
 29296  0061C8  1A21               	xorwf	i2___ftge@ff1+2,f,c
 29297  0061CA  0E00               	movlw	0
 29298  0061CC  1A22               	xorwf	i2___ftge@ff2,f,c
 29299  0061CE  0E00               	movlw	0
 29300  0061D0  1A23               	xorwf	i2___ftge@ff2+1,f,c
 29301  0061D2  0E80               	movlw	128
 29302  0061D4  1A24               	xorwf	i2___ftge@ff2+2,f,c
 29303  0061D6  5022               	movf	i2___ftge@ff2,w,c
 29304  0061D8  5C1F               	subwf	i2___ftge@ff1,w,c
 29305  0061DA  5023               	movf	i2___ftge@ff2+1,w,c
 29306  0061DC  5820               	subwfb	i2___ftge@ff1+1,w,c
 29307  0061DE  5024               	movf	i2___ftge@ff2+2,w,c
 29308  0061E0  5821               	subwfb	i2___ftge@ff1+2,w,c
 29309  0061E2  B0D8               	btfsc	status,0,c
 29310  0061E4  D002               	goto	i2l8957
 29311  0061E6  90D8               	bcf	status,0,c
 29312  0061E8  0012               	return	
 29313  0061EA                     i2l8957:
 29314  0061EA  80D8               	bsf	status,0,c
 29315  0061EC  0012               	return	
 29316  0061EE                     __end_ofi2___ftge:
 29317                           	opt stack 0
 29318                           pclatu	equ	0xFFB
 29319                           pclath	equ	0xFFA
 29320                           tblptru	equ	0xFF8
 29321                           tblptrh	equ	0xFF7
 29322                           tblptrl	equ	0xFF6
 29323                           tablat	equ	0xFF5
 29324                           prodh	equ	0xFF4
 29325                           prodl	equ	0xFF3
 29326                           intcon	equ	0xFF2
 29327                           postinc0	equ	0xFEE
 29328                           fsr0h	equ	0xFEA
 29329                           fsr0l	equ	0xFE9
 29330                           wreg	equ	0xFE8
 29331                           postdec1	equ	0xFE5
 29332                           fsr1h	equ	0xFE2
 29333                           fsr1l	equ	0xFE1
 29334                           bsr	equ	0xFE0
 29335                           indf2	equ	0xFDF
 29336                           postinc2	equ	0xFDE
 29337                           postdec2	equ	0xFDD
 29338                           plusw2	equ	0xFDB
 29339                           fsr2h	equ	0xFDA
 29340                           fsr2l	equ	0xFD9
 29341                           status	equ	0xFD8
 29342                           
 29343 ;; *************** function i2___ftadd *****************
 29344 ;; Defined at:
 29345 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
 29346 ;; Parameters:    Size  Location     Type
 29347 ;;  f1              3   18[COMRAM] float 
 29348 ;;  f2              3   21[COMRAM] float 
 29349 ;; Auto vars:     Size  Location     Type
 29350 ;;  __ftadd         1   29[COMRAM] unsigned char 
 29351 ;;  __ftadd         1   28[COMRAM] unsigned char 
 29352 ;;  __ftadd         1   27[COMRAM] unsigned char 
 29353 ;; Return value:  Size  Location     Type
 29354 ;;                  3   18[COMRAM] float 
 29355 ;; Registers used:
 29356 ;;		wreg, status,2, status,0, cstack
 29357 ;; Tracked objects:
 29358 ;;		On entry : 0/0
 29359 ;;		On exit  : 0/0
 29360 ;;		Unchanged: 0/0
 29361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29362 ;;      Params:         6       0       0       0       0       0       0
 29363 ;;      Locals:         3       0       0       0       0       0       0
 29364 ;;      Temps:          3       0       0       0       0       0       0
 29365 ;;      Totals:        12       0       0       0       0       0       0
 29366 ;;Total ram usage:       12 bytes
 29367 ;; Hardware stack levels used:    1
 29368 ;; Hardware stack levels required when called:    1
 29369 ;; This function calls:
 29370 ;;		i2___ftpack
 29371 ;; This function is called by:
 29372 ;;		_T4int
 29373 ;; This function uses a non-reentrant model
 29374 ;;
 29375                           
 29376                           	psect	text130
 29377  00304C                     __ptext130:
 29378                           	opt stack 0
 29379  00304C                     i2___ftadd:
 29380                           	opt stack 9
 29381                           
 29382                           ;incstack = 0
 29383  00304C  C015  F019         	movff	i2___ftadd@f1+2,??i2___ftadd
 29384  003050  6A1A               	clrf	(??i2___ftadd+1)& (0+255),c
 29385  003052  6A1B               	clrf	(??i2___ftadd+2)& (0+255),c
 29386  003054  3414               	rlcf	i2___ftadd@f1+1,w,c
 29387  003056  3619               	rlcf	??i2___ftadd& (0+255),f,c
 29388  003058  E301               	bnc	u1260_41
 29389  00305A  801A               	bsf	(??i2___ftadd+1)& (0+255),0,c
 29390  00305C                     u1260_41:
 29391  00305C  5019               	movf	??i2___ftadd,w,c
 29392  00305E  6E1E               	movwf	i2___ftadd@exp1,c
 29393  003060  C018  F019         	movff	i2___ftadd@f2+2,??i2___ftadd
 29394  003064  6A1A               	clrf	(??i2___ftadd+1)& (0+255),c
 29395  003066  6A1B               	clrf	(??i2___ftadd+2)& (0+255),c
 29396  003068  3417               	rlcf	i2___ftadd@f2+1,w,c
 29397  00306A  3619               	rlcf	??i2___ftadd& (0+255),f,c
 29398  00306C  E301               	bnc	u1261_41
 29399  00306E  801A               	bsf	(??i2___ftadd+1)& (0+255),0,c
 29400  003070                     u1261_41:
 29401  003070  5019               	movf	??i2___ftadd,w,c
 29402  003072  6E1D               	movwf	i2___ftadd@exp2,c
 29403  003074  501E               	movf	i2___ftadd@exp1,w,c
 29404  003076  B4D8               	btfsc	status,2,c
 29405  003078  D00B               	goto	i2l1345
 29406  00307A  501D               	movf	i2___ftadd@exp2,w,c
 29407  00307C  5C1E               	subwf	i2___ftadd@exp1,w,c
 29408  00307E  B0D8               	btfsc	status,0,c
 29409  003080  D00E               	goto	i2l8881
 29410  003082  501E               	movf	i2___ftadd@exp1,w,c
 29411  003084  0800               	sublw	0
 29412  003086  241D               	addwf	i2___ftadd@exp2,w,c
 29413  003088  6E19               	movwf	??i2___ftadd& (0+255),c
 29414  00308A  0E18               	movlw	24
 29415  00308C  6419               	cpfsgt	??i2___ftadd,c
 29416  00308E  D007               	goto	i2l8881
 29417  003090                     i2l1345:
 29418  003090  C016  F013         	movff	i2___ftadd@f2,?i2___ftadd
 29419  003094  C017  F014         	movff	i2___ftadd@f2+1,?i2___ftadd+1
 29420  003098  C018  F015         	movff	i2___ftadd@f2+2,?i2___ftadd+2
 29421  00309C  0012               	return	
 29422  00309E                     i2l8881:
 29423  00309E  501D               	movf	i2___ftadd@exp2,w,c
 29424  0030A0  B4D8               	btfsc	status,2,c
 29425  0030A2  D00B               	goto	i2l1349
 29426  0030A4  501E               	movf	i2___ftadd@exp1,w,c
 29427  0030A6  5C1D               	subwf	i2___ftadd@exp2,w,c
 29428  0030A8  B0D8               	btfsc	status,0,c
 29429  0030AA  D00E               	goto	i2l8887
 29430  0030AC  501D               	movf	i2___ftadd@exp2,w,c
 29431  0030AE  0800               	sublw	0
 29432  0030B0  241E               	addwf	i2___ftadd@exp1,w,c
 29433  0030B2  6E19               	movwf	??i2___ftadd& (0+255),c
 29434  0030B4  0E18               	movlw	24
 29435  0030B6  6419               	cpfsgt	??i2___ftadd,c
 29436  0030B8  D007               	goto	i2l8887
 29437  0030BA                     i2l1349:
 29438  0030BA  C013  F013         	movff	i2___ftadd@f1,?i2___ftadd
 29439  0030BE  C014  F014         	movff	i2___ftadd@f1+1,?i2___ftadd+1
 29440  0030C2  C015  F015         	movff	i2___ftadd@f1+2,?i2___ftadd+2
 29441  0030C6  0012               	return	
 29442  0030C8                     i2l8887:
 29443  0030C8  0E06               	movlw	6
 29444  0030CA  6E1C               	movwf	i2___ftadd@sign,c
 29445  0030CC  BE15               	btfsc	i2___ftadd@f1+2,7,c
 29446  0030CE  8E1C               	bsf	i2___ftadd@sign,7,c
 29447  0030D0  BE18               	btfsc	i2___ftadd@f2+2,7,c
 29448  0030D2  8C1C               	bsf	i2___ftadd@sign,6,c
 29449  0030D4  8E14               	bsf	i2___ftadd@f1+1,7,c
 29450  0030D6  0EFF               	movlw	255
 29451  0030D8  1613               	andwf	i2___ftadd@f1,f,c
 29452  0030DA  0EFF               	movlw	255
 29453  0030DC  1614               	andwf	i2___ftadd@f1+1,f,c
 29454  0030DE  0E00               	movlw	0
 29455  0030E0  1615               	andwf	i2___ftadd@f1+2,f,c
 29456  0030E2  8E17               	bsf	i2___ftadd@f2+1,7,c
 29457  0030E4  0EFF               	movlw	255
 29458  0030E6  1616               	andwf	i2___ftadd@f2,f,c
 29459  0030E8  0EFF               	movlw	255
 29460  0030EA  1617               	andwf	i2___ftadd@f2+1,f,c
 29461  0030EC  0E00               	movlw	0
 29462  0030EE  1618               	andwf	i2___ftadd@f2+2,f,c
 29463  0030F0  501D               	movf	i2___ftadd@exp2,w,c
 29464  0030F2  5C1E               	subwf	i2___ftadd@exp1,w,c
 29465  0030F4  B0D8               	btfsc	status,0,c
 29466  0030F6  D01B               	goto	i2l8913
 29467  0030F8                     i2l8903:
 29468  0030F8  90D8               	bcf	status,0,c
 29469  0030FA  3616               	rlcf	i2___ftadd@f2,f,c
 29470  0030FC  3617               	rlcf	i2___ftadd@f2+1,f,c
 29471  0030FE  3618               	rlcf	i2___ftadd@f2+2,f,c
 29472  003100  061D               	decf	i2___ftadd@exp2,f,c
 29473  003102  501E               	movf	i2___ftadd@exp1,w,c
 29474  003104  181D               	xorwf	i2___ftadd@exp2,w,c
 29475  003106  B4D8               	btfsc	status,2,c
 29476  003108  D00D               	goto	i2l8911
 29477  00310A  061C               	decf	i2___ftadd@sign,f,c
 29478  00310C  C01C  F019         	movff	i2___ftadd@sign,??i2___ftadd
 29479  003110  0E07               	movlw	7
 29480  003112  1619               	andwf	??i2___ftadd,f,c
 29481  003114  B4D8               	btfsc	status,2,c
 29482  003116  D006               	goto	i2l8911
 29483  003118  D7EF               	goto	i2l8903
 29484  00311A                     i2l8909:
 29485  00311A  90D8               	bcf	status,0,c
 29486  00311C  3215               	rrcf	i2___ftadd@f1+2,f,c
 29487  00311E  3214               	rrcf	i2___ftadd@f1+1,f,c
 29488  003120  3213               	rrcf	i2___ftadd@f1,f,c
 29489  003122  2A1E               	incf	i2___ftadd@exp1,f,c
 29490  003124                     i2l8911:
 29491  003124  501D               	movf	i2___ftadd@exp2,w,c
 29492  003126  181E               	xorwf	i2___ftadd@exp1,w,c
 29493  003128  B4D8               	btfsc	status,2,c
 29494  00312A  D01F               	goto	i2l1360
 29495  00312C  D7F6               	goto	i2l8909
 29496  00312E                     i2l8913:
 29497  00312E  501E               	movf	i2___ftadd@exp1,w,c
 29498  003130  5C1D               	subwf	i2___ftadd@exp2,w,c
 29499  003132  B0D8               	btfsc	status,0,c
 29500  003134  D01A               	goto	i2l1360
 29501  003136                     i2l8915:
 29502  003136  90D8               	bcf	status,0,c
 29503  003138  3613               	rlcf	i2___ftadd@f1,f,c
 29504  00313A  3614               	rlcf	i2___ftadd@f1+1,f,c
 29505  00313C  3615               	rlcf	i2___ftadd@f1+2,f,c
 29506  00313E  061E               	decf	i2___ftadd@exp1,f,c
 29507  003140  501E               	movf	i2___ftadd@exp1,w,c
 29508  003142  181D               	xorwf	i2___ftadd@exp2,w,c
 29509  003144  B4D8               	btfsc	status,2,c
 29510  003146  D00D               	goto	i2l8923
 29511  003148  061C               	decf	i2___ftadd@sign,f,c
 29512  00314A  C01C  F019         	movff	i2___ftadd@sign,??i2___ftadd
 29513  00314E  0E07               	movlw	7
 29514  003150  1619               	andwf	??i2___ftadd,f,c
 29515  003152  B4D8               	btfsc	status,2,c
 29516  003154  D006               	goto	i2l8923
 29517  003156  D7EF               	goto	i2l8915
 29518  003158                     i2l8921:
 29519  003158  90D8               	bcf	status,0,c
 29520  00315A  3218               	rrcf	i2___ftadd@f2+2,f,c
 29521  00315C  3217               	rrcf	i2___ftadd@f2+1,f,c
 29522  00315E  3216               	rrcf	i2___ftadd@f2,f,c
 29523  003160  2A1D               	incf	i2___ftadd@exp2,f,c
 29524  003162                     i2l8923:
 29525  003162  501D               	movf	i2___ftadd@exp2,w,c
 29526  003164  181E               	xorwf	i2___ftadd@exp1,w,c
 29527  003166  A4D8               	btfss	status,2,c
 29528  003168  D7F7               	goto	i2l8921
 29529  00316A                     i2l1360:
 29530  00316A  AE1C               	btfss	i2___ftadd@sign,7,c
 29531  00316C  D00C               	goto	i2l1369
 29532  00316E  0EFF               	movlw	255
 29533  003170  1A13               	xorwf	i2___ftadd@f1,f,c
 29534  003172  0EFF               	movlw	255
 29535  003174  1A14               	xorwf	i2___ftadd@f1+1,f,c
 29536  003176  0EFF               	movlw	255
 29537  003178  1A15               	xorwf	i2___ftadd@f1+2,f,c
 29538  00317A  0E01               	movlw	1
 29539  00317C  2613               	addwf	i2___ftadd@f1,f,c
 29540  00317E  0E00               	movlw	0
 29541  003180  2214               	addwfc	i2___ftadd@f1+1,f,c
 29542  003182  0E00               	movlw	0
 29543  003184  2215               	addwfc	i2___ftadd@f1+2,f,c
 29544  003186                     i2l1369:
 29545  003186  AC1C               	btfss	i2___ftadd@sign,6,c
 29546  003188  D00C               	goto	i2l8929
 29547  00318A  0EFF               	movlw	255
 29548  00318C  1A16               	xorwf	i2___ftadd@f2,f,c
 29549  00318E  0EFF               	movlw	255
 29550  003190  1A17               	xorwf	i2___ftadd@f2+1,f,c
 29551  003192  0EFF               	movlw	255
 29552  003194  1A18               	xorwf	i2___ftadd@f2+2,f,c
 29553  003196  0E01               	movlw	1
 29554  003198  2616               	addwf	i2___ftadd@f2,f,c
 29555  00319A  0E00               	movlw	0
 29556  00319C  2217               	addwfc	i2___ftadd@f2+1,f,c
 29557  00319E  0E00               	movlw	0
 29558  0031A0  2218               	addwfc	i2___ftadd@f2+2,f,c
 29559  0031A2                     i2l8929:
 29560  0031A2  0E00               	movlw	0
 29561  0031A4  6E1C               	movwf	i2___ftadd@sign,c
 29562  0031A6  5013               	movf	i2___ftadd@f1,w,c
 29563  0031A8  2616               	addwf	i2___ftadd@f2,f,c
 29564  0031AA  5014               	movf	i2___ftadd@f1+1,w,c
 29565  0031AC  2217               	addwfc	i2___ftadd@f2+1,f,c
 29566  0031AE  5015               	movf	i2___ftadd@f1+2,w,c
 29567  0031B0  2218               	addwfc	i2___ftadd@f2+2,f,c
 29568  0031B2  AE18               	btfss	i2___ftadd@f2+2,7,c
 29569  0031B4  D00E               	goto	i2l8939
 29570  0031B6  0EFF               	movlw	255
 29571  0031B8  1A16               	xorwf	i2___ftadd@f2,f,c
 29572  0031BA  0EFF               	movlw	255
 29573  0031BC  1A17               	xorwf	i2___ftadd@f2+1,f,c
 29574  0031BE  0EFF               	movlw	255
 29575  0031C0  1A18               	xorwf	i2___ftadd@f2+2,f,c
 29576  0031C2  0E01               	movlw	1
 29577  0031C4  2616               	addwf	i2___ftadd@f2,f,c
 29578  0031C6  0E00               	movlw	0
 29579  0031C8  2217               	addwfc	i2___ftadd@f2+1,f,c
 29580  0031CA  0E00               	movlw	0
 29581  0031CC  2218               	addwfc	i2___ftadd@f2+2,f,c
 29582  0031CE  0E01               	movlw	1
 29583  0031D0  6E1C               	movwf	i2___ftadd@sign,c
 29584  0031D2                     i2l8939:
 29585  0031D2  C016  F001         	movff	i2___ftadd@f2,i2___ftpack@arg
 29586  0031D6  C017  F002         	movff	i2___ftadd@f2+1,i2___ftpack@arg+1
 29587  0031DA  C018  F003         	movff	i2___ftadd@f2+2,i2___ftpack@arg+2
 29588  0031DE  C01E  F004         	movff	i2___ftadd@exp1,i2___ftpack@exp
 29589  0031E2  C01C  F005         	movff	i2___ftadd@sign,i2___ftpack@sign
 29590  0031E6  EC5D  F02D         	call	i2___ftpack	;wreg free
 29591  0031EA  C001  F013         	movff	?i2___ftpack,?i2___ftadd
 29592  0031EE  C002  F014         	movff	?i2___ftpack+1,?i2___ftadd+1
 29593  0031F2  C003  F015         	movff	?i2___ftpack+2,?i2___ftadd+2
 29594  0031F6  0012               	return	
 29595  0031F8                     __end_ofi2___ftadd:
 29596                           	opt stack 0
 29597                           pclatu	equ	0xFFB
 29598                           pclath	equ	0xFFA
 29599                           tblptru	equ	0xFF8
 29600                           tblptrh	equ	0xFF7
 29601                           tblptrl	equ	0xFF6
 29602                           tablat	equ	0xFF5
 29603                           prodh	equ	0xFF4
 29604                           prodl	equ	0xFF3
 29605                           intcon	equ	0xFF2
 29606                           postinc0	equ	0xFEE
 29607                           fsr0h	equ	0xFEA
 29608                           fsr0l	equ	0xFE9
 29609                           wreg	equ	0xFE8
 29610                           postdec1	equ	0xFE5
 29611                           fsr1h	equ	0xFE2
 29612                           fsr1l	equ	0xFE1
 29613                           bsr	equ	0xFE0
 29614                           indf2	equ	0xFDF
 29615                           postinc2	equ	0xFDE
 29616                           postdec2	equ	0xFDD
 29617                           plusw2	equ	0xFDB
 29618                           fsr2h	equ	0xFDA
 29619                           fsr2l	equ	0xFD9
 29620                           status	equ	0xFD8
 29621                           
 29622 ;; *************** function i2___altoft *****************
 29623 ;; Defined at:
 29624 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\altoft.c"
 29625 ;; Parameters:    Size  Location     Type
 29626 ;;  c               4    8[COMRAM] long 
 29627 ;; Auto vars:     Size  Location     Type
 29628 ;;  __altoft        1   17[COMRAM] unsigned char 
 29629 ;;  __altoft        1   16[COMRAM] unsigned char 
 29630 ;; Return value:  Size  Location     Type
 29631 ;;                  3    8[COMRAM] float 
 29632 ;; Registers used:
 29633 ;;		wreg, status,2, status,0, cstack
 29634 ;; Tracked objects:
 29635 ;;		On entry : 0/0
 29636 ;;		On exit  : 0/0
 29637 ;;		Unchanged: 0/0
 29638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29639 ;;      Params:         4       0       0       0       0       0       0
 29640 ;;      Locals:         2       0       0       0       0       0       0
 29641 ;;      Temps:          4       0       0       0       0       0       0
 29642 ;;      Totals:        10       0       0       0       0       0       0
 29643 ;;Total ram usage:       10 bytes
 29644 ;; Hardware stack levels used:    1
 29645 ;; Hardware stack levels required when called:    1
 29646 ;; This function calls:
 29647 ;;		i2___ftpack
 29648 ;; This function is called by:
 29649 ;;		_T4int
 29650 ;; This function uses a non-reentrant model
 29651 ;;
 29652                           
 29653                           	psect	text131
 29654  006698                     __ptext131:
 29655                           	opt stack 0
 29656  006698                     i2___altoft:
 29657                           	opt stack 9
 29658                           
 29659                           ;incstack = 0
 29660  006698  0E00               	movlw	0
 29661  00669A  6E12               	movwf	i2___altoft@sign,c
 29662  00669C  0E8E               	movlw	142
 29663  00669E  6E11               	movwf	i2___altoft@exp,c
 29664  0066A0  AE0C               	btfss	i2___altoft@c+3,7,c
 29665  0066A2  D011               	goto	i2l8867
 29666  0066A4  1E0C               	comf	i2___altoft@c+3,f,c
 29667  0066A6  1E0B               	comf	i2___altoft@c+2,f,c
 29668  0066A8  1E0A               	comf	i2___altoft@c+1,f,c
 29669  0066AA  6C09               	negf	i2___altoft@c,c
 29670  0066AC  0E00               	movlw	0
 29671  0066AE  220A               	addwfc	i2___altoft@c+1,f,c
 29672  0066B0  220B               	addwfc	i2___altoft@c+2,f,c
 29673  0066B2  220C               	addwfc	i2___altoft@c+3,f,c
 29674  0066B4  0E01               	movlw	1
 29675  0066B6  6E12               	movwf	i2___altoft@sign,c
 29676  0066B8  D006               	goto	i2l8867
 29677  0066BA                     i2l8865:
 29678  0066BA  90D8               	bcf	status,0,c
 29679  0066BC  320C               	rrcf	i2___altoft@c+3,f,c
 29680  0066BE  320B               	rrcf	i2___altoft@c+2,f,c
 29681  0066C0  320A               	rrcf	i2___altoft@c+1,f,c
 29682  0066C2  3209               	rrcf	i2___altoft@c,f,c
 29683  0066C4  2A11               	incf	i2___altoft@exp,f,c
 29684  0066C6                     i2l8867:
 29685  0066C6  0E00               	movlw	0
 29686  0066C8  1409               	andwf	i2___altoft@c,w,c
 29687  0066CA  6E0D               	movwf	??i2___altoft& (0+255),c
 29688  0066CC  0E00               	movlw	0
 29689  0066CE  140A               	andwf	i2___altoft@c+1,w,c
 29690  0066D0  6E0E               	movwf	(??i2___altoft+1)& (0+255),c
 29691  0066D2  0E00               	movlw	0
 29692  0066D4  140B               	andwf	i2___altoft@c+2,w,c
 29693  0066D6  6E0F               	movwf	(??i2___altoft+2)& (0+255),c
 29694  0066D8  0EFF               	movlw	255
 29695  0066DA  140C               	andwf	i2___altoft@c+3,w,c
 29696  0066DC  6E10               	movwf	(??i2___altoft+3)& (0+255),c
 29697  0066DE  500D               	movf	??i2___altoft,w,c
 29698  0066E0  100E               	iorwf	??i2___altoft+1,w,c
 29699  0066E2  100F               	iorwf	??i2___altoft+2,w,c
 29700  0066E4  1010               	iorwf	??i2___altoft+3,w,c
 29701  0066E6  A4D8               	btfss	status,2,c
 29702  0066E8  D7E8               	goto	i2l8865
 29703  0066EA  C009  F001         	movff	i2___altoft@c,i2___ftpack@arg
 29704  0066EE  C00A  F002         	movff	i2___altoft@c+1,i2___ftpack@arg+1
 29705  0066F2  C00B  F003         	movff	i2___altoft@c+2,i2___ftpack@arg+2
 29706  0066F6  C011  F004         	movff	i2___altoft@exp,i2___ftpack@exp
 29707  0066FA  C012  F005         	movff	i2___altoft@sign,i2___ftpack@sign
 29708  0066FE  EC5D  F02D         	call	i2___ftpack	;wreg free
 29709  006702  C001  F009         	movff	?i2___ftpack,?i2___altoft
 29710  006706  C002  F00A         	movff	?i2___ftpack+1,?i2___altoft+1
 29711  00670A  C003  F00B         	movff	?i2___ftpack+2,?i2___altoft+2
 29712  00670E  0012               	return	
 29713  006710                     __end_ofi2___altoft:
 29714                           	opt stack 0
 29715                           pclatu	equ	0xFFB
 29716                           pclath	equ	0xFFA
 29717                           tblptru	equ	0xFF8
 29718                           tblptrh	equ	0xFF7
 29719                           tblptrl	equ	0xFF6
 29720                           tablat	equ	0xFF5
 29721                           prodh	equ	0xFF4
 29722                           prodl	equ	0xFF3
 29723                           intcon	equ	0xFF2
 29724                           postinc0	equ	0xFEE
 29725                           fsr0h	equ	0xFEA
 29726                           fsr0l	equ	0xFE9
 29727                           wreg	equ	0xFE8
 29728                           postdec1	equ	0xFE5
 29729                           fsr1h	equ	0xFE2
 29730                           fsr1l	equ	0xFE1
 29731                           bsr	equ	0xFE0
 29732                           indf2	equ	0xFDF
 29733                           postinc2	equ	0xFDE
 29734                           postdec2	equ	0xFDD
 29735                           plusw2	equ	0xFDB
 29736                           fsr2h	equ	0xFDA
 29737                           fsr2l	equ	0xFD9
 29738                           status	equ	0xFD8
 29739                           
 29740 ;; *************** function i2___ftpack *****************
 29741 ;; Defined at:
 29742 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
 29743 ;; Parameters:    Size  Location     Type
 29744 ;;  arg             3    0[COMRAM] unsigned um
 29745 ;;  exp             1    3[COMRAM] unsigned char 
 29746 ;;  sign            1    4[COMRAM] unsigned char 
 29747 ;; Auto vars:     Size  Location     Type
 29748 ;;		None
 29749 ;; Return value:  Size  Location     Type
 29750 ;;                  3    0[COMRAM] float 
 29751 ;; Registers used:
 29752 ;;		wreg, status,2, status,0
 29753 ;; Tracked objects:
 29754 ;;		On entry : 0/0
 29755 ;;		On exit  : 0/0
 29756 ;;		Unchanged: 0/0
 29757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29758 ;;      Params:         5       0       0       0       0       0       0
 29759 ;;      Locals:         0       0       0       0       0       0       0
 29760 ;;      Temps:          3       0       0       0       0       0       0
 29761 ;;      Totals:         8       0       0       0       0       0       0
 29762 ;;Total ram usage:        8 bytes
 29763 ;; Hardware stack levels used:    1
 29764 ;; This function calls:
 29765 ;;		Nothing
 29766 ;; This function is called by:
 29767 ;;		i2___altoft
 29768 ;;		i2___ftadd
 29769 ;; This function uses a non-reentrant model
 29770 ;;
 29771                           
 29772                           	psect	text132
 29773  005ABA                     __ptext132:
 29774                           	opt stack 0
 29775  005ABA                     i2___ftpack:
 29776                           	opt stack 9
 29777                           
 29778                           ;incstack = 0
 29779  005ABA  5004               	movf	i2___ftpack@exp,w,c
 29780  005ABC  B4D8               	btfsc	status,2,c
 29781  005ABE  D005               	goto	i2l7515
 29782  005AC0  5001               	movf	i2___ftpack@arg,w,c
 29783  005AC2  1002               	iorwf	i2___ftpack@arg+1,w,c
 29784  005AC4  1003               	iorwf	i2___ftpack@arg+2,w,c
 29785  005AC6  A4D8               	btfss	status,2,c
 29786  005AC8  D00C               	goto	i2l7521
 29787  005ACA                     i2l7515:
 29788  005ACA  0E00               	movlw	0
 29789  005ACC  6E01               	movwf	?i2___ftpack,c
 29790  005ACE  0E00               	movlw	0
 29791  005AD0  6E02               	movwf	?i2___ftpack+1,c
 29792  005AD2  0E00               	movlw	0
 29793  005AD4  6E03               	movwf	?i2___ftpack+2,c
 29794  005AD6  0012               	return	
 29795  005AD8                     i2l7519:
 29796  005AD8  2A04               	incf	i2___ftpack@exp,f,c
 29797  005ADA  90D8               	bcf	status,0,c
 29798  005ADC  3203               	rrcf	i2___ftpack@arg+2,f,c
 29799  005ADE  3202               	rrcf	i2___ftpack@arg+1,f,c
 29800  005AE0  3201               	rrcf	i2___ftpack@arg,f,c
 29801  005AE2                     i2l7521:
 29802  005AE2  0E00               	movlw	0
 29803  005AE4  1401               	andwf	i2___ftpack@arg,w,c
 29804  005AE6  6E06               	movwf	??i2___ftpack& (0+255),c
 29805  005AE8  0E00               	movlw	0
 29806  005AEA  1402               	andwf	i2___ftpack@arg+1,w,c
 29807  005AEC  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 29808  005AEE  0EFE               	movlw	254
 29809  005AF0  1403               	andwf	i2___ftpack@arg+2,w,c
 29810  005AF2  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 29811  005AF4  5006               	movf	??i2___ftpack,w,c
 29812  005AF6  1007               	iorwf	??i2___ftpack+1,w,c
 29813  005AF8  1008               	iorwf	??i2___ftpack+2,w,c
 29814  005AFA  B4D8               	btfsc	status,2,c
 29815  005AFC  D00C               	goto	i2l7527
 29816  005AFE  D7EC               	goto	i2l7519
 29817  005B00                     i2l7523:
 29818  005B00  2A04               	incf	i2___ftpack@exp,f,c
 29819  005B02  0E01               	movlw	1
 29820  005B04  2601               	addwf	i2___ftpack@arg,f,c
 29821  005B06  0E00               	movlw	0
 29822  005B08  2202               	addwfc	i2___ftpack@arg+1,f,c
 29823  005B0A  0E00               	movlw	0
 29824  005B0C  2203               	addwfc	i2___ftpack@arg+2,f,c
 29825  005B0E  90D8               	bcf	status,0,c
 29826  005B10  3203               	rrcf	i2___ftpack@arg+2,f,c
 29827  005B12  3202               	rrcf	i2___ftpack@arg+1,f,c
 29828  005B14  3201               	rrcf	i2___ftpack@arg,f,c
 29829  005B16                     i2l7527:
 29830  005B16  0E00               	movlw	0
 29831  005B18  1401               	andwf	i2___ftpack@arg,w,c
 29832  005B1A  6E06               	movwf	??i2___ftpack& (0+255),c
 29833  005B1C  0E00               	movlw	0
 29834  005B1E  1402               	andwf	i2___ftpack@arg+1,w,c
 29835  005B20  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 29836  005B22  0EFF               	movlw	255
 29837  005B24  1403               	andwf	i2___ftpack@arg+2,w,c
 29838  005B26  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 29839  005B28  5006               	movf	??i2___ftpack,w,c
 29840  005B2A  1007               	iorwf	??i2___ftpack+1,w,c
 29841  005B2C  1008               	iorwf	??i2___ftpack+2,w,c
 29842  005B2E  B4D8               	btfsc	status,2,c
 29843  005B30  D006               	goto	i2l7531
 29844  005B32  D7E6               	goto	i2l7523
 29845  005B34                     i2l7529:
 29846  005B34  0604               	decf	i2___ftpack@exp,f,c
 29847  005B36  90D8               	bcf	status,0,c
 29848  005B38  3601               	rlcf	i2___ftpack@arg,f,c
 29849  005B3A  3602               	rlcf	i2___ftpack@arg+1,f,c
 29850  005B3C  3603               	rlcf	i2___ftpack@arg+2,f,c
 29851  005B3E                     i2l7531:
 29852  005B3E  BE02               	btfsc	i2___ftpack@arg+1,7,c
 29853  005B40  D003               	goto	i2l1322
 29854  005B42  0E02               	movlw	2
 29855  005B44  6004               	cpfslt	i2___ftpack@exp,c
 29856  005B46  D7F6               	goto	i2l7529
 29857  005B48                     i2l1322:
 29858  005B48  A004               	btfss	i2___ftpack@exp,0,c
 29859  005B4A  9E02               	bcf	i2___ftpack@arg+1,7,c
 29860  005B4C  90D8               	bcf	status,0,c
 29861  005B4E  3204               	rrcf	i2___ftpack@exp,f,c
 29862  005B50  5004               	movf	i2___ftpack@exp,w,c
 29863  005B52  1203               	iorwf	i2___ftpack@arg+2,f,c
 29864  005B54  5005               	movf	i2___ftpack@sign,w,c
 29865  005B56  A4D8               	btfss	status,2,c
 29866  005B58  8E03               	bsf	i2___ftpack@arg+2,7,c
 29867  005B5A  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 29868  005B5E  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 29869  005B62  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 29870  005B66  0012               	return	
 29871  005B68                     __end_ofi2___ftpack:
 29872                           	opt stack 0
 29873                           pclatu	equ	0xFFB
 29874                           pclath	equ	0xFFA
 29875                           tblptru	equ	0xFF8
 29876                           tblptrh	equ	0xFF7
 29877                           tblptrl	equ	0xFF6
 29878                           tablat	equ	0xFF5
 29879                           prodh	equ	0xFF4
 29880                           prodl	equ	0xFF3
 29881                           intcon	equ	0xFF2
 29882                           postinc0	equ	0xFEE
 29883                           fsr0h	equ	0xFEA
 29884                           fsr0l	equ	0xFE9
 29885                           wreg	equ	0xFE8
 29886                           postdec1	equ	0xFE5
 29887                           fsr1h	equ	0xFE2
 29888                           fsr1l	equ	0xFE1
 29889                           bsr	equ	0xFE0
 29890                           indf2	equ	0xFDF
 29891                           postinc2	equ	0xFDE
 29892                           postdec2	equ	0xFDD
 29893                           plusw2	equ	0xFDB
 29894                           fsr2h	equ	0xFDA
 29895                           fsr2l	equ	0xFD9
 29896                           status	equ	0xFD8
 29897                           
 29898 ;; *************** function _cutError *****************
 29899 ;; Defined at:
 29900 ;;		line 12 in file "source/T4Config.h"
 29901 ;; Parameters:    Size  Location     Type
 29902 ;;		None
 29903 ;; Auto vars:     Size  Location     Type
 29904 ;;		None
 29905 ;; Return value:  Size  Location     Type
 29906 ;;                  1    wreg      void 
 29907 ;; Registers used:
 29908 ;;		wreg, status,2
 29909 ;; Tracked objects:
 29910 ;;		On entry : 0/0
 29911 ;;		On exit  : 0/0
 29912 ;;		Unchanged: 0/0
 29913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 29914 ;;      Params:         0       0       0       0       0       0       0
 29915 ;;      Locals:         0       0       0       0       0       0       0
 29916 ;;      Temps:          0       0       0       0       0       0       0
 29917 ;;      Totals:         0       0       0       0       0       0       0
 29918 ;;Total ram usage:        0 bytes
 29919 ;; Hardware stack levels used:    1
 29920 ;; This function calls:
 29921 ;;		Nothing
 29922 ;; This function is called by:
 29923 ;;		_T4int
 29924 ;; This function uses a non-reentrant model
 29925 ;;
 29926                           
 29927                           	psect	text133
 29928  00705E                     __ptext133:
 29929                           	opt stack 0
 29930  00705E                     _cutError:
 29931                           	opt stack 10
 29932                           
 29933                           ;T4Config.h: 13: processStarted = 0;
 29934                           
 29935                           ;incstack = 0
 29936  00705E  0E00               	movlw	0
 29937  007060  0100               	movlb	0	; () banked
 29938  007062  6FC0               	movwf	_processStarted& (0+255),b
 29939                           
 29940                           ;T4Config.h: 14: processState = 0;
 29941  007064  0E00               	movlw	0
 29942  007066  0100               	movlb	0	; () banked
 29943  007068  6FB3               	movwf	(_processState+1)& (0+255),b
 29944  00706A  0E00               	movlw	0
 29945  00706C  6FB2               	movwf	_processState& (0+255),b
 29946                           
 29947                           ;T4Config.h: 15: securTimer = 0;
 29948  00706E  0E00               	movlw	0
 29949  007070  6E37               	movwf	_securTimer,c
 29950  007072  0E00               	movlw	0
 29951  007074  6E38               	movwf	_securTimer+1,c
 29952  007076  0E00               	movlw	0
 29953  007078  6E39               	movwf	_securTimer+2,c
 29954  00707A  0E00               	movlw	0
 29955  00707C  6E3A               	movwf	_securTimer+3,c
 29956                           
 29957                           ; BSR set to: 0
 29958                           ;T4Config.h: 16: tempLastScreen = actualScreen;
 29959  00707E  C1BD  F0BA         	movff	_actualScreen,_tempLastScreen
 29960                           
 29961                           ;T4Config.h: 17: actualScreen = 13;
 29962  007082  0E0D               	movlw	13
 29963  007084  0101               	movlb	1	; () banked
 29964  007086  6FBD               	movwf	_actualScreen& (0+255),b
 29965                           
 29966                           ; BSR set to: 1
 29967                           ;T4Config.h: 18: LATCbits.LATC5 = 1;
 29968  007088  8A8B               	bsf	3979,5,c	;volatile
 29969                           
 29970                           ; BSR set to: 1
 29971  00708A  0012               	return		;funcret
 29972  00708C                     __end_of_cutError:
 29973                           	opt stack 0
 29974                           pclatu	equ	0xFFB
 29975                           pclath	equ	0xFFA
 29976                           tblptru	equ	0xFF8
 29977                           tblptrh	equ	0xFF7
 29978                           tblptrl	equ	0xFF6
 29979                           tablat	equ	0xFF5
 29980                           prodh	equ	0xFF4
 29981                           prodl	equ	0xFF3
 29982                           intcon	equ	0xFF2
 29983                           postinc0	equ	0xFEE
 29984                           fsr0h	equ	0xFEA
 29985                           fsr0l	equ	0xFE9
 29986                           wreg	equ	0xFE8
 29987                           postdec1	equ	0xFE5
 29988                           fsr1h	equ	0xFE2
 29989                           fsr1l	equ	0xFE1
 29990                           bsr	equ	0xFE0
 29991                           indf2	equ	0xFDF
 29992                           postinc2	equ	0xFDE
 29993                           postdec2	equ	0xFDD
 29994                           plusw2	equ	0xFDB
 29995                           fsr2h	equ	0xFDA
 29996                           fsr2l	equ	0xFD9
 29997                           status	equ	0xFD8
 29998                           
 29999 ;; *************** function _bajarCuchilla *****************
 30000 ;; Defined at:
 30001 ;;		line 53 in file "source/PWMConfig.h"
 30002 ;; Parameters:    Size  Location     Type
 30003 ;;		None
 30004 ;; Auto vars:     Size  Location     Type
 30005 ;;		None
 30006 ;; Return value:  Size  Location     Type
 30007 ;;                  1    wreg      void 
 30008 ;; Registers used:
 30009 ;;		wreg, status,2, status,0, cstack
 30010 ;; Tracked objects:
 30011 ;;		On entry : 0/0
 30012 ;;		On exit  : 0/0
 30013 ;;		Unchanged: 0/0
 30014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 30015 ;;      Params:         0       0       0       0       0       0       0
 30016 ;;      Locals:         0       0       0       0       0       0       0
 30017 ;;      Temps:          0       0       0       0       0       0       0
 30018 ;;      Totals:         0       0       0       0       0       0       0
 30019 ;;Total ram usage:        0 bytes
 30020 ;; Hardware stack levels used:    1
 30021 ;; Hardware stack levels required when called:    1
 30022 ;; This function calls:
 30023 ;;		i2_setPWM2duty
 30024 ;; This function is called by:
 30025 ;;		_T4int
 30026 ;; This function uses a non-reentrant model
 30027 ;;
 30028                           
 30029                           	psect	text134
 30030  007342                     __ptext134:
 30031                           	opt stack 0
 30032  007342                     _bajarCuchilla:
 30033                           	opt stack 9
 30034                           
 30035                           ;PWMConfig.h: 54: setPWM2duty(400);
 30036                           
 30037                           ; BSR set to: 1
 30038                           ;incstack = 0
 30039  007342  0E01               	movlw	1
 30040  007344  6E02               	movwf	i2setPWM2duty@actuator+1,c
 30041  007346  0E90               	movlw	144
 30042  007348  6E01               	movwf	i2setPWM2duty@actuator,c
 30043  00734A  ECE8  F034         	call	i2_setPWM2duty	;wreg free
 30044  00734E  0012               	return		;funcret
 30045  007350                     __end_of_bajarCuchilla:
 30046                           	opt stack 0
 30047                           pclatu	equ	0xFFB
 30048                           pclath	equ	0xFFA
 30049                           tblptru	equ	0xFF8
 30050                           tblptrh	equ	0xFF7
 30051                           tblptrl	equ	0xFF6
 30052                           tablat	equ	0xFF5
 30053                           prodh	equ	0xFF4
 30054                           prodl	equ	0xFF3
 30055                           intcon	equ	0xFF2
 30056                           postinc0	equ	0xFEE
 30057                           fsr0h	equ	0xFEA
 30058                           fsr0l	equ	0xFE9
 30059                           wreg	equ	0xFE8
 30060                           postdec1	equ	0xFE5
 30061                           fsr1h	equ	0xFE2
 30062                           fsr1l	equ	0xFE1
 30063                           bsr	equ	0xFE0
 30064                           indf2	equ	0xFDF
 30065                           postinc2	equ	0xFDE
 30066                           postdec2	equ	0xFDD
 30067                           plusw2	equ	0xFDB
 30068                           fsr2h	equ	0xFDA
 30069                           fsr2l	equ	0xFD9
 30070                           status	equ	0xFD8
 30071                           
 30072 ;; *************** function i2_setPWM2duty *****************
 30073 ;; Defined at:
 30074 ;;		line 37 in file "source/PWMConfig.h"
 30075 ;; Parameters:    Size  Location     Type
 30076 ;;  actuator        2    0[COMRAM] short 
 30077 ;; Auto vars:     Size  Location     Type
 30078 ;;  setPWM2duty     2    4[COMRAM] short 
 30079 ;; Return value:  Size  Location     Type
 30080 ;;                  1    wreg      void 
 30081 ;; Registers used:
 30082 ;;		wreg, status,2, status,0
 30083 ;; Tracked objects:
 30084 ;;		On entry : 0/0
 30085 ;;		On exit  : 0/0
 30086 ;;		Unchanged: 0/0
 30087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 30088 ;;      Params:         2       0       0       0       0       0       0
 30089 ;;      Locals:         2       0       0       0       0       0       0
 30090 ;;      Temps:          2       0       0       0       0       0       0
 30091 ;;      Totals:         6       0       0       0       0       0       0
 30092 ;;Total ram usage:        6 bytes
 30093 ;; Hardware stack levels used:    1
 30094 ;; This function calls:
 30095 ;;		Nothing
 30096 ;; This function is called by:
 30097 ;;		_bajarCuchilla
 30098 ;;		i2_subirCuchilla
 30099 ;; This function uses a non-reentrant model
 30100 ;;
 30101                           
 30102                           	psect	text135
 30103  0069D0                     __ptext135:
 30104                           	opt stack 0
 30105  0069D0                     i2_setPWM2duty:
 30106                           	opt stack 9
 30107                           
 30108                           ;PWMConfig.h: 38: short act = 400;
 30109                           
 30110                           ;incstack = 0
 30111  0069D0  0E01               	movlw	1
 30112  0069D2  6E06               	movwf	i2setPWM2duty@act+1,c
 30113  0069D4  0E90               	movlw	144
 30114  0069D6  6E05               	movwf	i2setPWM2duty@act,c
 30115                           
 30116                           ;PWMConfig.h: 39: if(actuator > 400)
 30117  0069D8  BE02               	btfsc	i2setPWM2duty@actuator+1,7,c
 30118  0069DA  D00A               	goto	i2l7377
 30119  0069DC  0E91               	movlw	145
 30120  0069DE  5C01               	subwf	i2setPWM2duty@actuator,w,c
 30121  0069E0  0E01               	movlw	1
 30122  0069E2  5802               	subwfb	i2setPWM2duty@actuator+1,w,c
 30123  0069E4  A0D8               	btfss	status,0,c
 30124  0069E6  D004               	goto	i2l7377
 30125                           
 30126                           ;PWMConfig.h: 40: act = 800;
 30127  0069E8  0E03               	movlw	3
 30128  0069EA  6E06               	movwf	i2setPWM2duty@act+1,c
 30129  0069EC  0E20               	movlw	32
 30130  0069EE  D00B               	goto	L10
 30131  0069F0                     i2l7377:
 30132                           
 30133                           ;PWMConfig.h: 41: else if(actuator < -400)
 30134  0069F0  AE02               	btfss	i2setPWM2duty@actuator+1,7,c
 30135  0069F2  D00B               	goto	i2l7381
 30136  0069F4  0E70               	movlw	112
 30137  0069F6  5C01               	subwf	i2setPWM2duty@actuator,w,c
 30138  0069F8  0EFE               	movlw	254
 30139  0069FA  5802               	subwfb	i2setPWM2duty@actuator+1,w,c
 30140  0069FC  B0D8               	btfsc	status,0,c
 30141  0069FE  D005               	goto	i2l7381
 30142                           
 30143                           ;PWMConfig.h: 42: act = 0;
 30144  006A00  0E00               	movlw	0
 30145  006A02  6E06               	movwf	i2setPWM2duty@act+1,c
 30146  006A04  0E00               	movlw	0
 30147  006A06                     L10:
 30148  006A06  6E05               	movwf	i2setPWM2duty@act,c
 30149  006A08  D006               	goto	i2l495
 30150  006A0A                     i2l7381:
 30151                           
 30152                           ;PWMConfig.h: 43: else
 30153                           ;PWMConfig.h: 44: act = actuator + 400;
 30154  006A0A  0E90               	movlw	144
 30155  006A0C  2401               	addwf	i2setPWM2duty@actuator,w,c
 30156  006A0E  6E05               	movwf	i2setPWM2duty@act,c
 30157  006A10  0E01               	movlw	1
 30158  006A12  2002               	addwfc	i2setPWM2duty@actuator+1,w,c
 30159  006A14  6E06               	movwf	i2setPWM2duty@act+1,c
 30160  006A16                     i2l495:
 30161                           
 30162                           ;PWMConfig.h: 45: CCP2CONbits.DC2B = act;
 30163  006A16  C005  F003         	movff	i2setPWM2duty@act,??i2_setPWM2duty
 30164  006A1A  3A03               	swapf	??i2_setPWM2duty,f,c
 30165  006A1C  5066               	movf	3942,w,c	;volatile
 30166  006A1E  1803               	xorwf	??i2_setPWM2duty,w,c
 30167  006A20  0BCF               	andlw	-49
 30168  006A22  1803               	xorwf	??i2_setPWM2duty,w,c
 30169  006A24  6E66               	movwf	3942,c	;volatile
 30170                           
 30171                           ;PWMConfig.h: 46: CCPR2L = act>>2;
 30172  006A26  C005  F003         	movff	i2setPWM2duty@act,??i2_setPWM2duty
 30173  006A2A  C006  F004         	movff	i2setPWM2duty@act+1,??i2_setPWM2duty+1
 30174  006A2E  3404               	rlcf	??i2_setPWM2duty+1,w,c
 30175  006A30  3204               	rrcf	??i2_setPWM2duty+1,f,c
 30176  006A32  3203               	rrcf	??i2_setPWM2duty,f,c
 30177  006A34  3404               	rlcf	??i2_setPWM2duty+1,w,c
 30178  006A36  3204               	rrcf	??i2_setPWM2duty+1,f,c
 30179  006A38  3203               	rrcf	??i2_setPWM2duty,f,c
 30180  006A3A  5003               	movf	??i2_setPWM2duty,w,c
 30181  006A3C  6E67               	movwf	3943,c	;volatile
 30182  006A3E  0012               	return		;funcret
 30183  006A40                     __end_ofi2_setPWM2duty:
 30184                           	opt stack 0
 30185                           pclatu	equ	0xFFB
 30186                           pclath	equ	0xFFA
 30187                           tblptru	equ	0xFF8
 30188                           tblptrh	equ	0xFF7
 30189                           tblptrl	equ	0xFF6
 30190                           tablat	equ	0xFF5
 30191                           prodh	equ	0xFF4
 30192                           prodl	equ	0xFF3
 30193                           intcon	equ	0xFF2
 30194                           postinc0	equ	0xFEE
 30195                           fsr0h	equ	0xFEA
 30196                           fsr0l	equ	0xFE9
 30197                           wreg	equ	0xFE8
 30198                           postdec1	equ	0xFE5
 30199                           fsr1h	equ	0xFE2
 30200                           fsr1l	equ	0xFE1
 30201                           bsr	equ	0xFE0
 30202                           indf2	equ	0xFDF
 30203                           postinc2	equ	0xFDE
 30204                           postdec2	equ	0xFDD
 30205                           plusw2	equ	0xFDB
 30206                           fsr2h	equ	0xFDA
 30207                           fsr2l	equ	0xFD9
 30208                           status	equ	0xFD8
 30209                           pclatu	equ	0xFFB
 30210                           pclath	equ	0xFFA
 30211                           tblptru	equ	0xFF8
 30212                           tblptrh	equ	0xFF7
 30213                           tblptrl	equ	0xFF6
 30214                           tablat	equ	0xFF5
 30215                           prodh	equ	0xFF4
 30216                           prodl	equ	0xFF3
 30217                           intcon	equ	0xFF2
 30218                           postinc0	equ	0xFEE
 30219                           fsr0h	equ	0xFEA
 30220                           fsr0l	equ	0xFE9
 30221                           wreg	equ	0xFE8
 30222                           postdec1	equ	0xFE5
 30223                           fsr1h	equ	0xFE2
 30224                           fsr1l	equ	0xFE1
 30225                           bsr	equ	0xFE0
 30226                           indf2	equ	0xFDF
 30227                           postinc2	equ	0xFDE
 30228                           postdec2	equ	0xFDD
 30229                           plusw2	equ	0xFDB
 30230                           fsr2h	equ	0xFDA
 30231                           fsr2l	equ	0xFD9
 30232                           status	equ	0xFD8
 30233                           
 30234                           	psect	rparam
 30235  0000                     pclatu	equ	0xFFB
 30236                           pclath	equ	0xFFA
 30237                           tblptru	equ	0xFF8
 30238                           tblptrh	equ	0xFF7
 30239                           tblptrl	equ	0xFF6
 30240                           tablat	equ	0xFF5
 30241                           prodh	equ	0xFF4
 30242                           prodl	equ	0xFF3
 30243                           intcon	equ	0xFF2
 30244                           postinc0	equ	0xFEE
 30245                           fsr0h	equ	0xFEA
 30246                           fsr0l	equ	0xFE9
 30247                           wreg	equ	0xFE8
 30248                           postdec1	equ	0xFE5
 30249                           fsr1h	equ	0xFE2
 30250                           fsr1l	equ	0xFE1
 30251                           bsr	equ	0xFE0
 30252                           indf2	equ	0xFDF
 30253                           postinc2	equ	0xFDE
 30254                           postdec2	equ	0xFDD
 30255                           plusw2	equ	0xFDB
 30256                           fsr2h	equ	0xFDA
 30257                           fsr2l	equ	0xFD9
 30258                           status	equ	0xFD8
 30259                           
 30260                           	psect	temp
 30261  00005E                     btemp:
 30262                           	opt stack 0
 30263  00005E                     	ds	1
 30264  0000                     int$flags	set	btemp
 30265                           pclatu	equ	0xFFB
 30266                           pclath	equ	0xFFA
 30267                           tblptru	equ	0xFF8
 30268                           tblptrh	equ	0xFF7
 30269                           tblptrl	equ	0xFF6
 30270                           tablat	equ	0xFF5
 30271                           prodh	equ	0xFF4
 30272                           prodl	equ	0xFF3
 30273                           intcon	equ	0xFF2
 30274                           postinc0	equ	0xFEE
 30275                           fsr0h	equ	0xFEA
 30276                           fsr0l	equ	0xFE9
 30277                           wreg	equ	0xFE8
 30278                           postdec1	equ	0xFE5
 30279                           fsr1h	equ	0xFE2
 30280                           fsr1l	equ	0xFE1
 30281                           bsr	equ	0xFE0
 30282                           indf2	equ	0xFDF
 30283                           postinc2	equ	0xFDE
 30284                           postdec2	equ	0xFDD
 30285                           plusw2	equ	0xFDB
 30286                           fsr2h	equ	0xFDA
 30287                           fsr2l	equ	0xFD9
 30288                           status	equ	0xFD8


Data Sizes:
    Strings     692
    Constant    118
    Data        76
    BSS         87
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      93
    BANK0           160     69     120
    BANK1           256    119     192
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_43(CODE[17]), STR_42(CODE[18]), STR_41(CODE[17]), STR_40(CODE[18]), 
		 -> STR_39(CODE[17]), STR_38(CODE[18]), STR_37(CODE[17]), STR_36(CODE[18]), 
		 -> STR_35(CODE[17]), STR_34(CODE[18]), STR_33(CODE[7]), STR_32(CODE[18]), 
		 -> STR_31(CODE[19]), STR_30(CODE[18]), STR_29(CODE[18]), STR_28(CODE[18]), 
		 -> STR_27(CODE[18]), STR_26(CODE[18]), STR_25(CODE[17]), STR_24(CODE[17]), 
		 -> STR_23(CODE[18]), STR_22(CODE[17]), STR_21(CODE[25]), STR_20(CODE[18]), 
		 -> STR_19(CODE[16]), STR_18(CODE[18]), STR_17(CODE[7]), STR_16(CODE[18]), 
		 -> STR_15(CODE[19]), STR_14(CODE[18]), STR_13(CODE[18]), STR_12(CODE[18]), 
		 -> STR_11(CODE[18]), STR_10(CODE[18]), STR_9(CODE[20]), STR_8(CODE[18]), 
		 -> STR_7(CODE[18]), STR_6(CODE[18]), STR_5(CODE[18]), STR_4(CODE[18]), 
		 -> STR_3(CODE[18]), STR_2(CODE[18]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK1[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _hp_isr in COMRAM

    _hp_isr->_T4int
    _T4int->i2___ftge
    i2_subirCuchilla->i2_setPWM2duty
    i2___ftge->i2___ftadd
    i2___ftadd->i2___altoft
    i2___altoft->i2___ftpack
    _bajarCuchilla->i2_setPWM2duty

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_UARTint
    _UARTint->i1_longPressENTER
    i1_sysParamInit->i1_calcSysVars
    i1_pressUP->i1_chanValDigUP
    i1_pressRETRO->i1_initProtocoll
    i1_pressENTER->i1_desintegrator
    i1_pressDOWN->i1_chanValDigDOWN
    i1_longPressRETRO->i1___ftmul
    i1_longPressENTER->i1_integrator
    i1_integrator->i1___ftdiv
    i1___altoft->i1___ftpack
    i1_desintegrator->i1___ftmul
    i1___ftadd->i1___ftpack
    i1_calcVars2ti->i1___ftdiv
    i1___ftdiv->i1___altoft
    i1_calcSysVars->i1___ftmul
    i1___ftmul->i1___ftpack
    _T2int->i1_initProtocoll
    i1_detenerCuchilla->i1_setPWM2duty
    i1_subirCuchilla->i1_setPWM2duty
    _saveProcessState->i1_writeEEPROM

Critical Paths under _hp_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _sysParamInit->_calcSysVars
    _calcSysVars->___ftmul
    _lcd_init->_lcd_send_byte
    _drawScreen->_drawSNquest
    _drawSNquest->_printf
    _drawReady2Cut->_printf
    _drawPassWord->_printf
    _drawMenu->_printf
    _drawCutError->_printf
    _drawChanVal->_printf
    _drawCalibProc->_printf
    _drawBadPass->_printf
    _drawPass1Lin->_printf
    _drawAutoCalibRM->_printf
    _drawValEditor->_printf
    _drawAdvON->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_4bits
    _lcd_read_byte->_lcd_read_4bits
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    _buttonChecking->_longPressENTER
    _pressUP->_chanValDigUP
    _pressRETRO->_initProtocoll
    _pressENTER->_desintegrator
    _pressDOWN->_chanValDigDOWN
    _longPressRETRO->___ftmul
    _detenerCuchilla->_setPWM2duty
    _subirCuchilla->_setPWM2duty
    _longPressENTER->_desintegrator
    _integrator->___ftdiv
    ___altoft->___ftpack
    _desintegrator->___fttol
    ___fttol->_scale
    _calcVars2ti->___ftmul
    ___ftmul->___wmul
    ___ftdiv->___altoft
    ___ftadd->_fround
    _PWM2Config->_setPWM2duty

Critical Paths under _isr in BANK1

    None.

Critical Paths under _hp_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _hp_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _hp_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _hp_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _hp_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 1105682
                       _EEPROMConfig
                         _PWM2Config
                         _UARTConfig
                     _buttonChecking
                        _clockConfig
                         _drawScreen
                    _interruptConfig
                           _ioConfig
                          _ioInitStt
                           _lcd_init
                        _setPWM2duty
                          _setPWM2on
                       _sysParamInit
                           _t4config
 ---------------------------------------------------------------------------------
 (1) _t4config                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sysParamInit                                         0     0      0    6702
                        _calcSysVars
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _readEEPROM                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _calcSysVars                                          3     3      0    6671
                                             35 BANK1      3     3      0
                            ___ftmul
 ---------------------------------------------------------------------------------
 (1) _setPWM2on                                            1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             6     6      0    1879
                                              8 BANK1      6     6      0
                     _lcd_send_4bits
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _ioInitStt                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ioConfig                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptConfig                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _drawScreen                                           0     0      0 1002105
                          _drawAdvON
                    _drawAutoCalibRM
                        _drawBadPass
                      _drawCalibProc
                        _drawChanVal
                       _drawCutError
                           _drawMenu
                       _drawPassWord
                      _drawReady2Cut
                        _drawSNquest
 ---------------------------------------------------------------------------------
 (2) _drawSNquest                                          3     3      0   71915
                                            116 BANK1      3     3      0
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawReady2Cut                                        0     0      0   71661
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawPassWord                                         2     2      0  140299
                                            116 BANK1      2     2      0
                       _drawPass1Lin
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawMenu                                             1     1      0   76372
                                            116 BANK1      1     1      0
                         _lcd_gotoxy
                           _lcd_putc
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawCutError                                         0     0      0   71661
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawChanVal                                          0     0      0  143322
                      _drawValEditor
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawCalibProc                                        0     0      0   71661
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawBadPass                                          0     0      0  140200
                       _drawPass1Lin
                             _printf
 ---------------------------------------------------------------------------------
 (3) _drawPass1Lin                                         0     0      0   71661
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawAutoCalibRM                                      0     0      0  143322
                      _drawValEditor
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (3) _drawValEditor                                        0     0      0   71661
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawAdvON                                            1     1      0   71692
                                            116 BANK1      1     1      0
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              54    36     18   68539
                                             63 BANK1     53    35     18
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   14173
                                             35 BANK1      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0    4680
                                             13 BANK1      1     1      0
                           _lcd_putc
                          _putchUART
 ---------------------------------------------------------------------------------
 (5) _putchUART                                            1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (5) _lcd_putc                                             2     2      0    4587
                                             11 BANK1      2     2      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_gotoxy                                           3     2      1    3122
                                              8 BANK1      3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        3     2      1    1403
                                              5 BANK1      3     2      1
                      _lcd_read_byte
                     _lcd_send_4bits
 ---------------------------------------------------------------------------------
 (3) _lcd_send_4bits                                       5     5      0     272
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (3) _lcd_read_byte                                        2     2      0     114
                                              2 BANK1      2     2      0
                     _lcd_read_4bits
 ---------------------------------------------------------------------------------
 (4) _lcd_read_4bits                                       2     2      0      46
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   13894
                                             35 BANK1     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3004
                                             14 BANK1      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1819
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1985
                                              6 BANK1      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     608
                                              0 BANK1     15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     827
                                              0 BANK1     12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2703
                                              8 BANK1      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     848
                                             13 BANK1      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     703
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4927
                                             57 BANK1      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     142
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     912
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (1) _clockConfig                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buttonChecking                                       0     0      0   93777
                           _delay_ms
                      _longPressDOWN
                     _longPressENTER
                     _longPressRETRO
                        _longPressUP
                          _pressDOWN
                         _pressENTER
                         _pressRETRO
                            _pressUP
                        _releaseDOWN
                       _releaseENTER
                       _releaseRETRO
                          _releaseUP
 ---------------------------------------------------------------------------------
 (2) _releaseUP                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseRETRO                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseENTER                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseDOWN                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pressUP                                              1     1      0       0
                                              5 BANK1      1     1      0
                       _chanValDigUP
 ---------------------------------------------------------------------------------
 (3) _chanValDigUP                                         5     5      0       0
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (2) _pressRETRO                                           0     0      0     625
                      _initProtocoll
 ---------------------------------------------------------------------------------
 (2) _pressENTER                                           0     0      0   29176
                            ___ftmul
                          _checkPass
                     _confirmEdition
                      _desintegrator
                      _initProtocoll
                        _setPWM2duty
                        _stopProcess
 ---------------------------------------------------------------------------------
 (3) _checkPass                                            7     7      0     170
                                              0 BANK1      7     7      0
 ---------------------------------------------------------------------------------
 (2) _pressDOWN                                            1     1      0       0
                                              5 BANK1      1     1      0
                     _chanValDigDOWN
 ---------------------------------------------------------------------------------
 (3) _chanValDigDOWN                                       5     5      0       0
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (2) _longPressUP                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _longPressRETRO                                       0     0      0    7887
                            ___ftmul
                      _initProtocoll
                        _stopProcess
 ---------------------------------------------------------------------------------
 (3) _stopProcess                                          0     0      0     594
                    _detenerCuchilla
 ---------------------------------------------------------------------------------
 (4) _detenerCuchilla                                      0     0      0     594
                        _setPWM2duty
 ---------------------------------------------------------------------------------
 (3) _initProtocoll                                        1     1      0     625
                                              6 BANK1      1     1      0
                      _subirCuchilla
 ---------------------------------------------------------------------------------
 (4) _subirCuchilla                                        0     0      0     594
                        _setPWM2duty
 ---------------------------------------------------------------------------------
 (2) _longPressENTER                                       6     6      0   55097
                                             76 BANK1      6     6      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                        _calcVars2ti
                     _confirmEdition
                      _desintegrator
                         _integrator
 ---------------------------------------------------------------------------------
 (3) _integrator                                          12    12      0    8025
                                             33 BANK1     12    12      0
                           ___altoft
                            ___ftdiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2973
                                              8 BANK1     10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _desintegrator                                       19    19      0    8670
                                             57 BANK1     19    19      0
                            ___aldiv
                            ___ftmul
                            ___fttol
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     558
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     508
                                             42 BANK1     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8     599
                                              0 BANK1     14     6      8
 ---------------------------------------------------------------------------------
 (3) _confirmEdition                                       1     1      0   11855
                                             35 BANK1      1     1      0
                      _saveSysParams
 ---------------------------------------------------------------------------------
 (4) _saveSysParams                                        0     0      0   11762
                        _calcVars2ti
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (5) _writeEEPROM                                          2     1      1     804
                                              0 BANK1      2     1      1
 ---------------------------------------------------------------------------------
 (5) _calcVars2ti                                          0     0      0   10958
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    6668
                                             20 BANK1     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    4290
                                             18 BANK1     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4563
                                             45 BANK1     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (2) _longPressDOWN                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     992
                                              0 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 (1) _UARTConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2Config                                           0     0      0     594
                        _setPWM2duty
                           _t2config
 ---------------------------------------------------------------------------------
 (2) _t2config                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setPWM2duty                                          6     4      2     594
                                              0 BANK1      6     4      2
 ---------------------------------------------------------------------------------
 (1) _EEPROMConfig                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _isr                                                17    17      0   33469
                                             52 BANK0     17    17      0
                              _T2int
                            _UARTint
 ---------------------------------------------------------------------------------
 (12) _UARTint                                             1     1      0   32541
                                             51 BANK0      1     1      0
                      _loadSysParams
                    i1_longPressDOWN
                   i1_longPressENTER
                   i1_longPressRETRO
                      i1_longPressUP
                        i1_pressDOWN
                       i1_pressENTER
                       i1_pressRETRO
                          i1_pressUP
                        i1_putchUART
                    i1_saveSysParams
                     i1_sysParamInit
 ---------------------------------------------------------------------------------
 (13) i1_sysParamInit                                      0     0      0    1360
                      i1_calcSysVars
                       i1_readEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_readEEPROM                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_putchUART                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_pressUP                                           1     1      0       0
                                              5 BANK0      1     1      0
                     i1_chanValDigUP
 ---------------------------------------------------------------------------------
 (14) i1_chanValDigUP                                      5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (13) i1_pressRETRO                                        0     0      0     214
                    i1_initProtocoll
 ---------------------------------------------------------------------------------
 (13) i1_pressENTER                                        0     0      0    7414
                          i1___ftmul
                        i1_checkPass
                   i1_confirmEdition
                    i1_desintegrator
                    i1_initProtocoll
                      i1_setPWM2duty
                      i1_stopProcess
 ---------------------------------------------------------------------------------
 (14) i1_checkPass                                         7     7      0     115
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (13) i1_pressDOWN                                         1     1      0       0
                                              5 BANK0      1     1      0
                   i1_chanValDigDOWN
 ---------------------------------------------------------------------------------
 (14) i1_chanValDigDOWN                                    5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (13) i1_longPressUP                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_longPressRETRO                                    0     0      0    1743
                          i1___ftmul
                    i1_initProtocoll
                      i1_stopProcess
 ---------------------------------------------------------------------------------
 (13) i1_longPressENTER                                    6     6      0   14329
                                             45 BANK0      6     6      0
                          i1___ftadd
                          i1___ftdiv
                          i1___ftmul
                      i1_calcVars2ti
                   i1_confirmEdition
                    i1_desintegrator
                       i1_integrator
 ---------------------------------------------------------------------------------
 (14) i1_integrator                                       12    12      0    2280
                                             33 BANK0     12    12      0
                         i1___altoft
                          i1___ftdiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (15) i1___altoft                                         10     6      4     707
                                              8 BANK0     10     6      4
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (14) i1_desintegrator                                    19    19      0    2392
                                             23 BANK0     19    19      0
                          i1___aldiv
                          i1___ftmul
                          i1___fttol
                           i1___lmul
 ---------------------------------------------------------------------------------
 (15) i1___lmul                                           12     4      8     196
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (15) i1___fttol                                          15    11      4     278
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (15) i1___aldiv                                          14     6      8     352
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (14) i1_confirmEdition                                    1     1      0    2972
                                             33 BANK0      1     1      0
                    i1_saveSysParams
 ---------------------------------------------------------------------------------
 (14) i1___ftadd                                          12     6      6    1487
                                              8 BANK0     12     6      6
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (13) i1_longPressDOWN                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _loadSysParams                                       0     0      0    4244
                      i1_calcSysVars
                    i1_saveSysParams
 ---------------------------------------------------------------------------------
 (13) i1_saveSysParams                                     0     0      0    2906
                      i1_calcVars2ti
                      i1_writeEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_calcVars2ti                                       0     0      0    2576
                          i1___ftdiv
                          i1___ftmul
 ---------------------------------------------------------------------------------
 (15) i1___ftdiv                                          15     9      6    1239
                                             18 BANK0     15     9      6
                         i1___altoft (ARG)
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (14) i1_calcSysVars                                       3     3      0    1338
                                             23 BANK0      3     3      0
                          i1___ftmul
 ---------------------------------------------------------------------------------
 (15) i1___ftmul                                          15     9      6    1337
                                              8 BANK0     15     9      6
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (16) i1___ftpack                                          8     3      5     543
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (12) _T2int                                               1     1      0     928
                                              7 BANK0      1     1      0
                   _saveProcessState
                  i1_detenerCuchilla
                    i1_initProtocoll
                      i1_stopProcess
 ---------------------------------------------------------------------------------
 (14) i1_stopProcess                                       0     0      0     192
                  i1_detenerCuchilla
 ---------------------------------------------------------------------------------
 (15) i1_detenerCuchilla                                   0     0      0     192
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (14) i1_initProtocoll                                     1     1      0     214
                                              6 BANK0      1     1      0
                    i1_subirCuchilla
 ---------------------------------------------------------------------------------
 (15) i1_subirCuchilla                                     0     0      0     192
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (16) i1_setPWM2duty                                       6     4      2     192
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (13) _saveProcessState                                    0     0      0     330
                      i1_writeEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_writeEEPROM                                       2     1      1     330
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (19) _hp_isr                                             14    14      0    2532
                                             40 COMRAM    14    14      0
                              _T4int
 ---------------------------------------------------------------------------------
 (20) _T4int                                               1     1      0    2532
                                             39 COMRAM     1     1      0
                      _bajarCuchilla
                           _cutError
                         i2___altoft
                          i2___ftadd
                           i2___ftge
                    i2_subirCuchilla
 ---------------------------------------------------------------------------------
 (21) i2_subirCuchilla                                     0     0      0     166
                      i2_setPWM2duty
 ---------------------------------------------------------------------------------
 (21) i2___ftge                                            9     3      6     292
                                             30 COMRAM     9     3      6
                         i2___altoft (ARG)
                          i2___ftadd (ARG)
 ---------------------------------------------------------------------------------
 (21) i2___ftadd                                          12     6      6    1279
                                             18 COMRAM    12     6      6
                         i2___altoft (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (21) i2___altoft                                         10     6      4     629
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (22) i2___ftpack                                          8     3      5     387
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (21) _cutError                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (21) _bajarCuchilla                                       0     0      0     166
                      i2_setPWM2duty
 ---------------------------------------------------------------------------------
 (22) i2_setPWM2duty                                       6     4      2     166
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 22
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMConfig
   _PWM2Config
     _setPWM2duty
     _t2config
   _UARTConfig
   _buttonChecking
     _delay_ms
     _longPressDOWN
     _longPressENTER
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _calcVars2ti
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _confirmEdition
         _saveSysParams
           _calcVars2ti
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _writeEEPROM
       _desintegrator
         ___aldiv
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
       _integrator
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___lmul
     _longPressRETRO
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _initProtocoll
         _subirCuchilla
           _setPWM2duty
       _stopProcess
         _detenerCuchilla
           _setPWM2duty
     _longPressUP
     _pressDOWN
       _chanValDigDOWN
     _pressENTER
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _checkPass
       _confirmEdition
         _saveSysParams
           _calcVars2ti
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _writeEEPROM
       _desintegrator
         ___aldiv
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
       _initProtocoll
         _subirCuchilla
           _setPWM2duty
       _setPWM2duty
       _stopProcess
         _detenerCuchilla
           _setPWM2duty
     _pressRETRO
       _initProtocoll
         _subirCuchilla
           _setPWM2duty
     _pressUP
       _chanValDigUP
     _releaseDOWN
     _releaseENTER
     _releaseRETRO
     _releaseUP
   _clockConfig
   _drawScreen
     _drawAdvON
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawAutoCalibRM
       _drawValEditor
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _putchUART
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawBadPass
       _drawPass1Lin
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _putchUART
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawCalibProc
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawChanVal
       _drawValEditor
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _putchUART
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawCutError
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawMenu
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawPassWord
       _drawPass1Lin
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _putchUART
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawReady2Cut
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawSNquest
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
           _putchUART
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _interruptConfig
   _ioConfig
   _ioInitStt
   _lcd_init
     _lcd_send_4bits
     _lcd_send_byte
       _lcd_read_byte
         _lcd_read_4bits
       _lcd_send_4bits
   _setPWM2duty
   _setPWM2on
   _sysParamInit
     _calcSysVars
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readEEPROM
   _t4config

 _isr (ROOT)
   _T2int
     _saveProcessState
       i1_writeEEPROM
     i1_detenerCuchilla
       i1_setPWM2duty
     i1_initProtocoll
       i1_subirCuchilla
         i1_setPWM2duty
     i1_stopProcess
       i1_detenerCuchilla
         i1_setPWM2duty
   _UARTint
     _loadSysParams
       i1_calcSysVars
         i1___ftmul
           i1___ftpack
       i1_saveSysParams
         i1_calcVars2ti
           i1___ftdiv
             i1___altoft (ARG)
               i1___ftpack
             i1___ftpack (ARG)
           i1___ftmul
             i1___ftpack
         i1_writeEEPROM
     i1_longPressDOWN
     i1_longPressENTER
       i1___ftadd
         i1___ftpack
       i1___ftdiv
         i1___altoft (ARG)
           i1___ftpack
         i1___ftpack (ARG)
       i1___ftmul
         i1___ftpack
       i1_calcVars2ti
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___ftmul
           i1___ftpack
       i1_confirmEdition
         i1_saveSysParams
           i1_calcVars2ti
             i1___ftdiv
               i1___altoft (ARG)
                 i1___ftpack
               i1___ftpack (ARG)
             i1___ftmul
               i1___ftpack
           i1_writeEEPROM
       i1_desintegrator
         i1___aldiv
         i1___ftmul
           i1___ftpack
         i1___fttol
         i1___lmul
       i1_integrator
         i1___altoft
           i1___ftpack
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___lmul
     i1_longPressRETRO
       i1___ftmul
         i1___ftpack
       i1_initProtocoll
         i1_subirCuchilla
           i1_setPWM2duty
       i1_stopProcess
         i1_detenerCuchilla
           i1_setPWM2duty
     i1_longPressUP
     i1_pressDOWN
       i1_chanValDigDOWN
     i1_pressENTER
       i1___ftmul
         i1___ftpack
       i1_checkPass
       i1_confirmEdition
         i1_saveSysParams
           i1_calcVars2ti
             i1___ftdiv
               i1___altoft (ARG)
                 i1___ftpack
               i1___ftpack (ARG)
             i1___ftmul
               i1___ftpack
           i1_writeEEPROM
       i1_desintegrator
         i1___aldiv
         i1___ftmul
           i1___ftpack
         i1___fttol
         i1___lmul
       i1_initProtocoll
         i1_subirCuchilla
           i1_setPWM2duty
       i1_setPWM2duty
       i1_stopProcess
         i1_detenerCuchilla
           i1_setPWM2duty
     i1_pressRETRO
       i1_initProtocoll
         i1_subirCuchilla
           i1_setPWM2duty
     i1_pressUP
       i1_chanValDigUP
     i1_putchUART
     i1_saveSysParams
       i1_calcVars2ti
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___ftmul
           i1___ftpack
       i1_writeEEPROM
     i1_sysParamInit
       i1_calcSysVars
         i1___ftmul
           i1___ftpack
       i1_readEEPROM

 _hp_isr (ROOT)
   _T4int
     _bajarCuchilla
       i2_setPWM2duty
     _cutError
     i2___altoft
       i2___ftpack
     i2___ftadd
       i2___altoft (ARG)
         i2___ftpack
       i2___ftpack (ARG)
     i2___ftge
       i2___altoft (ARG)
         i2___ftpack
       i2___ftadd (ARG)
         i2___altoft (ARG)
           i2___ftpack
         i2___ftpack (ARG)
     i2_subirCuchilla
       i2_setPWM2duty

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     77      C0       6       75.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     45      78       4       75.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      5D       1       98.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     195       9        0.0%
DATA                 0      0     195      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Mar 11 22:19:22 2017

       __end_ofi1_pressDOWN 4E7A                ___altoft@exp 0110                  i1___altoft 5D48  
      __end_ofi1_pressENTER 192E                  i1___ftpack 4B5E             ?_lcd_send_4bits 0001  
      __end_ofi1_pressRETRO 57C8             ??_desintegrator 0139               ___altoft@sign 0111  
          i2setPWM2duty@act 0005                          l91 7168              ?_lcd_send_byte 0105  
              ___awdiv@sign 010B                          _fd 01B9                          _ie 00BB  
             _holdRETROcont 00C7            ?i1_saveSysParams 0001                          _pi 005B  
                i2___altoft 6698                          bsr 000FE0             ?_confirmEdition 0001  
       ___wmul@multiplicand 0110               _subirCuchilla 72BC      __size_ofi1_calcVars2ti 0058  
       __end_ofi1_putchUART 7334                  i2___ftpack 5ABA                __CFG_CP0$OFF 000000  
              __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000                __CFG_CP3$OFF 000000  
              ___ftadd@exp1 0138                ___ftadd@exp2 0137                i1___altoft@c 0068  
               drawMenu@adv 0174                ___ftadd@sign 0136                         l100 6DC0  
                       l222 7300                         l403 50AA                         l420 4A30  
                       l283 71A0                         l381 2F4C                         l702 4EB6  
                       l550 7214                         l711 4F74                         l375 2ED0  
                       l384 2FAA                         l289 7228                         l730 1226  
                       l387 3004                         l708 4EEE                         l725 11E6  
                       l590 596A                         l574 339C                         l495 5EE0  
                       l751 1354                         l752 13AA                         l744 12FC  
                       l680 5686                         l593 599A                         l729 120E  
                       l770 1546                         l906 23E6                         l755 13CC  
                       l596 59CE                         l909 2406                         l918 2492  
              i1___ftadd@f1 0068                         l882 228E                i1___ftadd@f2 006B  
                       l894 233A                __CFG_CPB$OFF 000000       i1setPWM2duty@actuator 0060  
                       _PR2 000FBB                         _PR4 000F52                __CFG_CPD$OFF 000000  
    __size_ofi1_calcSysVars 006A    __size_ofi1_initProtocoll 0038                         _isr 0018  
              i1___ftdiv@f1 0072                i1___ftdiv@f2 0075                i1___ftdiv@f3 007C  
   __end_of_interruptConfig 7378                ___awmod@sign 0105                         prod 000FF3  
                       wreg 000FE8   __size_ofi1_longPressENTER 0332                  _TXSTA1bits 000FAC  
              __CFG_IESO$ON 000000                drawSNquest@i 0174   __size_ofi1_longPressRETRO 0102  
              i1___ftmul@f1 0068                i1___ftmul@f2 006B                i1___fttol@f1 0060  
              __CFG_LVP$OFF 000000                 i1_checkPass 630A              i1___aldiv@sign 0069  
  __size_ofi2_subirCuchilla 000E                ___ftdiv@cntr 011B              ??_drawCutError 0174  
              ___ftdiv@sign 0120                        l1013 09F0                        l1047 0870  
                      l1322 4B2A                        l1351 2892                        l1360 2968  
                      l1345 2830                        l1290 3858                        l1419 6FF4  
                      l1380 3D90                        l1349 286A                        l1369 2992  
                      l1394 36D0                        l1387 360C                        l1388 3650  
                      l1469 5930                        l1479 5E6E             ??_drawCalibProc 0174  
                      l6541 3FF2                        l6551 4028                        l6519 3F4C  
                      l6537 3FDE                        l6555 4044                        l6547 400E  
                      ?_isr 0001                        l6549 401E                        l9721 6240  
                      l9801 65F4                        l9715 6222                        l9709 6204  
                      l9805 6600                        l9831 2878                        l9727 625E  
                      l9761 4A80                        l9825 283E                        l9771 4B0E  
                      l9763 4A8E                        l9739 6DE8                        l9747 6FB2  
                      l9773 4B1C                        l9765 4ABE                        l9757 4A6C  
                      l9853 28F8                        l9837 2888                        l9855 2906  
                      l9847 28CA                        l9919 3D4E                        l9791 65AA  
                      STR_1 7EF4                        STR_2 7F06                        l9785 4B50  
                      l9769 4ADE                        l9873 29BC                        l9865 294E  
                      l9857 2914                        l9945 38DE                        l9793 65B8  
                      STR_3 7F4E                        STR_4 7F18                        l9779 4B34  
                      l9883 2A0A                        l9867 295C                        l9859 2920  
                      l9963 394A                        l9939 38A4                        STR_5 7F2A  
                      STR_6 7F3C                        l9893 3CB4                        l9973 3988  
                      l9797 65D8                        STR_7 7E0A                        STR_8 7ED0  
                      l9959 392C                        l9799 65E6                        STR_9 7D64  
                      l9969 396A                        l9899 3CEE                        l9995 57FA  
                      l9989 57E4                printf@tmpval 0162                        u8231 3F28  
                      u8250 3F72                        u8255 3F68              ??_drawPass1Lin 0174  
             __CFG_FCMEN$ON 000000                 lcd_putc@cha 010C             __end_of_UARTint 4726  
               _stopProcess 7272                        _main 6CC4        __size_of_calcVars2ti 0058  
              ___ftpack@arg 0100                i2___altoft@c 0009                ___ftpack@exp 0103  
          lcd_read_byte@low 0102                        fsr0h 000FEA                        fsr1h 000FE2  
                      fsr2h 000FDA                        fsr0l 000FE9                        indf2 000FDF  
                      fsr1l 000FE1                        fsr2l 000FD9           initProtocoll@init 0106  
                      btemp 005E               __CFG_BORV$285 000000              ??_drawPassWord 0174  
              i2___ftadd@f1 0013                i2___ftadd@f2 0016                i2___ftge@ff1 001F  
              i2___ftge@ff2 0022               i1___ftdiv@exp 007F                        prodh 000FF4  
                      prodl 000FF3                        start 00BE             ?_longPressENTER 0001  
      __size_of_calcSysVars 006A             ?_longPressRETRO 0001               drawSNquest@tq 0176  
     __size_of_sysParamInit 0076        __end_of_EEPROMConfig 737E                ___ftmul@cntr 0121  
           _detenerCuchilla 72AC                ___param_bank 000000                 _writeEEPROM 7186  
              ___ftmul@sign 0122               i1___ftmul@exp 0071                ___fttol@exp1 0138  
              ___fttol@lval 0134                       ??_isr 0094              i1___altoft@exp 0070  
            ?_subirCuchilla 0001     i1___ftmul@f3_as_product 0072                _BAUDCON1bits 000FB8  
                     l10001 5818                       l10003 5824                       l10021 587C  
                     l10013 585A                       l10005 582A                       l10111 2780  
                     l10103 269C                       l10017 5868                       l10041 5BA8  
                     l10033 5B84                       l10211 369A                       l10043 5BB4  
                     l10131 0F2C                       l11003 302E                       l10045 5BBA  
                     l10053 5BEC                       l10037 5B94                       l10125 0E66  
                     l10303 5640                       l10207 3686                       l10143 10B6  
                     l10135 0F52                       l11015 6458                       l11007 6426  
                     l11023 648E                       l11201 6922                       l10321 58CA  
                     l10233 372E                       l10217 36B6                       l10057 5C00  
                     l10049 5BDE                       l10161 7102                       l11033 50CA  
                     l10091 5ECC                       l12011 24F0                       l10227 3708  
                     l10219 36C6                       l10171 357E                       l11123 63F8  
                     l11205 6934                       l11301 56C0                       l10317 58B4  
                     l10341 5E18                       l10149 117C                       l10405 011A  
                     l10413 0190                       l11029 50B4                       l10087 5EAA  
                     l11207 693C                       l11231 4CDA                       l11151 4750  
                     l12007 24E4                       l10319 58C4                       l10351 6530  
                     l10271 3822                       l10255 37D6                       l10247 3782  
                     l10511 04F4                       l10431 022A                       l10423 01FE  
                     l11055 6C66                       l11119 63CE                       l11039 50E6  
                     l11063 496A                       l11241 4D0C                       l11225 4C8E  
                     l11401 1272                       l11313 56F4                       l11305 56D2  
                     l11145 4738                       l12017 2506                       l10329 591E  
                     l10345 5E5C                       l10337 5E02                       l10353 6540  
                     l10177 35B8                       l10601 08EA                       l10513 050A  
                     l10441 0278                       l10425 0214                       l11081 49DE  
                     l11331 4EC8                       l11251 4D3A                       l11219 4C7C  
                     l12019 250C                       l10339 5E12                       l10267 380E  
                     l10523 059A                       l10515 053A                       l10507 04C6  
                     l10451 02B6                       l10443 0284                       l10419 01B8  
                     l11059 4954                       l10701 6798                       l11341 4F00  
                     l11325 4EA4                       l11253 4D40                       l11421 12C8  
                     l11405 1284                       l11173 47F4                       l11157 47A0  
                     l10293 55BC                       l10285 6C9A                       l10277 383E  
                     l10613 09E2                       l10541 068C                       l10517 0550  
                     l10461 0300                       l10453 02D0                       l10445 028A  
                     l10437 0252                       l10429 0224                       l11085 49FA  
                     l11077 49C4                       l11069 4986                       l11335 4EDA  
                     l11247 4D2E                       l11511 14B2                       l11431 1302  
                     l11183 480E                       l11167 47D2                       l10279 384E  
                     l10607 09C6                       l10543 0692                       l10527 05C8  
                     l10447 02A2                       l10705 67BE                       l11601 1AB0  
                     l11257 4D4A                       l11521 14D6                       l11513 14BA  
                     l11177 4800                       l11185 4826                       l10297 55FC  
                     l10625 0A3C                       l10609 09D4                       l10537 0626  
                     l10473 035E                       l10457 02E8                       l10465 0306  
                     l11089 4A16                       l10731 445E                       l10723 4420  
                     l11195 6904                       l11259 4D62                       l11419 12B4  
                     l11179 4806                       l10635 0A8A                       l10563 074A  
                     l10555 06D8                       l10483 03A4                       l10467 0344  
                     l10395 00D2                       l10741 44B8                       l10733 4464  
                     l10717 4402                       l10821 62A2                       l11437 1320  
                     l11373 11D2                       l10653 0AFE                       l10637 0A90  
                     l10629 0A64                       l10581 0830                       l10573 0794  
                     l10565 0750                       l10903 597C                       l11623 1B8A  
                     l10831 6304                       l11391 123A                       l11383 1200  
                     l11375 11DA                       l11279 5654                       l10671 0BA4  
                     l10663 0B62                       l10591 0874                       l10567 0758  
                     l10559 0728                       l10399 00E8                       l11711 5188  
                     l11703 516C                       l12095 6D04                       l10913 59AC  
                     l10729 444E                       l10745 44CA                       l10761 5CD6  
                     l10825 62F4                       l10817 628C                       l11537 1552  
                     l11473 13F6                       l11465 13D2                       l11289 568C  
                     l10657 0B2E                       l10649 0AD6                       l10585 083E  
                     l10569 076C                       l11721 51AE                       l11713 5190  
                     l11705 5174                       l10763 5CE6                       l11555 196C  
                     l10827 62FC                       l11459 13B2                       l11299 56B8  
                     l10691 0CBE                       l10683 0C0C                       l10675 0BDC  
                     l10587 0852                       l10579 0822                       l10499 0456  
                     l11731 51D0                       l11723 51B6                       l11715 5198  
                     l11707 517A                       l10925 59E0                       l10749 44E6  
                     l11573 19C2                       l11565 1998                       l11549 194E  
                     l11469 13E4                       l11901 2308                       l10677 0BE6  
                     l10669 0B9A                       l10597 0898                       l10693 0CD4  
                     l10781 20FA                       l10773 200A                       l11733 51D6  
                     l11725 51BE                       l11717 519E                       l11709 5180  
                     l11661 5C40                       l11559 197E                       l11399 1254  
                     l11903 2316                       l10687 0C34                       l10679 0BF2  
                     l11727 51C4                       l11719 51A6                       l10929 6DA8  
                     l10865 3294                       l10881 41DE                       l11921 236A  
                     l10785 2172                       l10777 2082                       l10793 225C  
                     l11729 51CA                       l11737 51DE                       l11657 5C36  
                     l10963 2F06                       l11675 5C7C                       l10893 5948  
                     l10877 41C8                       l11941 23B4                       l11933 2398  
                     l10789 21E8                       l10973 2F46                       l10965 2F18  
                     l10957 2ECA                       l10949 2E9C                       l11669 5C5E  
                     l11919 235A                       l11943 23C2                       l11679 5C86  
                     l10889 4278                       l11929 238C                       l11881 22BE  
                     l10985 2FA4                       l10977 2F76                       l11971 2444  
                     l11939 23AE                       l11981 246E                       l11893 22EC  
                     l10997 2FFE                       l10989 2FD0                       l11967 2438  
                     l11959 2416                       l11879 22AE                       l11977 245A  
                     l11889 22E0                       l11979 2460                       l11899 2302  
                     l11997 24B2                       l11999 24C2             __end_of___aldiv 44F8  
   __end_ofi1_desintegrator 3544                       ?_main 0001             __end_of___awdiv 5886  
                     _EEADR 000FA9             __end_of___ftadd 2A30                       STR_10 7E52  
                     STR_11 7EE2                       STR_12 7E76                       STR_20 7DC2  
                     STR_13 7EBE                       STR_21 7D4B                       STR_22 7F82  
                     STR_30 7E1C                       STR_14 7DF8                       STR_23 7E64  
                     STR_31 7D8B                       STR_15 7D78                       STR_16 7E52  
                     STR_24 7F93                       STR_40 7EAC                       STR_32 7D9E  
                     STR_33 7FF8                       STR_17 7FF8                       STR_25 7FA4  
                     STR_41 7F60                       STR_18 7E76                       STR_42 7EAC  
                     STR_26 7E88                       STR_34 7DB0                       STR_19 7FE8  
                     STR_35 7FB5                       STR_43 7F71                       STR_27 7E9A  
                     STR_28 7E40                       STR_36 7DE6             __end_of___awmod 5C0A  
                     STR_37 7FD7                       STR_29 7E2E                       STR_38 7DD4  
                     STR_39 7FC6             __end_of___ftdiv 3DC6             __end_of___ftneg 7002  
           __end_of___lldiv 5942             __end_of___ftmul 39C8             ___awdiv@divisor 0108  
             lcd_init@F6841 00C9             __end_of___llmod 5E80             __end_of___ftsub 6CC4  
           __end_of___fttol 4056                       u14030 662C                       u14040 663E  
                     u14105 622C                       u14050 6658                       u14106 622E  
                     u14060 6678                       u14036 662E                       u14125 624A  
                     u14126 624C                       u14048 6642                       u14145 6268  
                     u14058 665C                       u14146 626A                       u15115 60C8  
                     u15116 60CA                       u14068 667C                       u14501 3CCA  
                     u14085 620E                       u14165 6E00                       u14086 6210  
                     u14166 6E02                       u14271 27DE                       u17000 12C2  
                     u14281 27FC                       u14531 3880                       u17020 12DE  
                     u15260 03EA                       u17030 12E0                       u14551 38BA  
                     u14481 3C90                       u15265 03DE                       u16330 47DE  
                     u15450 0868                       u16340 47E0                       u17150 140C  
                     u14831 355A                       u17320 19BA                       u17160 140E  
                     u17330 19BC                       u14851 3594                       u17510 22C6  
                     u16560 4D18                       u16570 4D1A                       u17380 1C58  
                     u17620 2372                       u17516 22C8                       u15950 3292  
                     u17390 1C5A                       u17730 241E                       u17626 2374  
                     u17840 24CA                       u17736 2420                       u16990 12C0  
                     u17846 24CC                       u17957 5C28                       i1l222 732A  
                     u17967 5C4E                       u17977 5C6C                       u17987 65CC  
                     u17997 6DB0                       i1l283 71C0                       i1l523 2D66  
                     i1l533 2E56                       i1l702 4FB8                       i1l711 5076  
                     i1l289 726A                       i1l730 15EC                       i1l708 4FF0  
                     i1l725 15AC                       i1l590 5A26                       i1l574 3542  
                     i1l495 5F74                       i1l751 171A                       i1l752 1770  
                     i1l744 16C2                       i1l680 5748                       i1l593 5A56  
                     i1l729 15D4                       i1l770 190C                       i1l755 1792  
                     i1l596 5A8A                 ?_UARTConfig 0001                       i1l939 0076  
                     i2l495 6A16                       i2l934 64EC             ___awdiv@counter 010A  
             __CFG_WDTPS$32 000000                       _T2int 2C98              i1___ftadd@exp1 0073  
            i1___ftadd@exp2 0072                       _T4int 3B26     __size_ofi1_chanValDigUP 00D0  
            i1___ftadd@sign 0071                 ?_PWM2Config 0001               __CFG_WRT0$OFF 000000  
             __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000         ___lmul@multiplicand 0104  
             __CFG_WRT3$OFF 000000                ___lltoft@exp 0110              __CFG_EBTR0$OFF 000000  
            __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000                       _fData 00AF  
            __CFG_EBTR3$OFF 000000             ??_drawReady2Cut 0174               __CFG_WRTB$OFF 000000  
             __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000  
                     _exp10 0177                       _flech 019B             __end_of_dpowers 7CFD  
                     _selSN 01BA       __size_ofi1_readEEPROM 0016           lcd_read_byte@high 0103  
                     _scale 0CF4             __end_of_isdigit 710C          __CFG_MCLRE$EXTMCLR 000000  
             ___ftpack@sign 0104             ??_drawValEditor 0174                       _putch 7246  
          __end_ofi1___lmul 68E8                       pclath 000FFA                       tablat 000FF5  
          __end_ofi2___ftge 61EE               drawPassWord@i 0174               i1_calcVars2ti 6BD2  
            i1___ftdiv@cntr 007B             __end_of_pressUP 4836                _sysParamInit 6710  
            i1___ftdiv@sign 0080                       plusw2 000FDB                ?_setPWM2duty 0100  
          i1desintegrator@i 0088       __end_ofi1_stopProcess 729A                       status 000FD8  
           ??_lcd_read_byte 0102          __size_ofi1___aldiv 011A                 i1_pressDOWN 4D72  
            __CFG_HFOFST$ON 000000          __size_ofi1___ftadd 0268          __size_ofi1___ftdiv 014C  
              putchUART@val 0100          __size_ofi1___ftmul 015E          __size_ofi1___fttol 0144  
             i1_calcSysVars 6AAA          __size_ofi2___ftadd 01AC              i1___ftpack@arg 0060  
            i1___ftpack@exp 0063                ?_longPressUP 0001                 i1_putchUART 7326  
           __initialization 5FA8       __end_ofi1_writeEEPROM 71C6                __end_of_main 6D0E  
               ?i1___altoft 0068             ??_lcd_send_byte 0106         i1___lmul@multiplier 0060  
               ?i1___ftpack 0060              i1___ftmul@cntr 0075              i1___ftmul@sign 0076  
     __end_of_saveSysParams 60CC               lcd_gotoxy@pos 0109       __size_ofi1_integrator 0122  
               ?i2___altoft 0009                ?_releaseDOWN 0001              i1___fttol@exp1 006E  
             _maxTimePerCut 0051                 ?i2___ftpack 0001          __size_ofi1_pressUP 0110  
            i1___fttol@lval 006A      __size_of_loadSysParams 0048                      ??_main 0177  
             ___fttol@sign1 0133                i1_readEEPROM 725C               __activetblptr 000002  
    __size_of_bajarCuchilla 000E              __CFG_PLLCFG$ON 000000             i1___altoft@sign 0071  
                    ?_T2int 0001                      ?_T4int 0001        __size_of__tdiv_to_l_ 019E  
          i1_chanValDigDOWN 54B0            ?_interruptConfig 0001             i1_subirCuchilla 72DC  
        desintegrator@temp2 0146          desintegrator@temp3 0142          desintegrator@tempL 013E  
      __size_of_clockConfig 0026       __size_of_chanValDigUP 00D0            __end_of_t2config 7200  
              i1checkPass@i 0065                   ??_UARTint 0093            __end_of_t4config 70E2  
          __end_of___altoft 5D48              setPWM2duty@act 0104            ___llmod@dividend 010D  
                    ?_scale 0123                      _EEDATA 000FA8                      _CCPR2L 000F67  
                    _EECON2 000FA7      __size_of_initProtocoll 0038            ___awdiv@dividend 0106  
                    ?_putch 0001            __end_of___ftpack 4B5E    __size_of_drawAutoCalibRM 0032  
         ??i1_initProtocoll 0066              ?i1_calcVars2ti 0001            __end_of___lltoft 65A4  
                    i1l1322 4C36                      i1l1351 2AFA                      i1l1360 2BD0  
                    i1l1345 2A98                      i1l1380 3EDC                      i1l1349 2AD2  
                    i1l1369 2BFA                      i1l6201 3E9A                      i2l1322 5B48  
                    i1l6221 3A02                      i1l7101 451C                      i2l1360 316A  
                    i2l1345 3090                      i1l6241 3A8A                      i1l7113 4568  
                    i1l6251 3AC8                      i1l6227 3A3C                      i1l7115 4578  
                    i1l7107 453A                      i2l1349 30BA                      i1l6245 3AA8  
                    i1l6181 3E3A                      i1l7133 4600                      i1l7125 45D2  
                    i1l7117 457E                      i1l6255 3AE6                      i1l6175 3E00  
                    i2l1369 3186                      i1l7129 45E4                      i1l7145 5D74  
                    i1l7401 631A                      i1l7147 5D84                      i1l7411 638A  
                    i1l7181 4136                      i1l7085 6884                      i1l7405 6330  
                    i1l9111 2D5E                      i1l7191 416C                      i1l7159 4090  
                    i1l7415 6392                      i1l6633 5F60                      i1l7177 4122  
                    i1l7089 68AA                      i1l7409 6382                      i1l9123 2D96  
                    i1l7603 2C24                      i1l7195 4188                      i1l7187 4152  
                    i1l8403 4904                      i1l6629 5F3E                      i1l9125 2D9C  
                    i1l9109 2D58                      i1l7613 2C72                      i1l7509 5A9C  
                    i1l7189 4162                      i1l7461 42EA                      i1l8413 491E  
                    i1l9221 466A                      i1l9213 464A                      i1l9119 2D82  
                    i1l9071 2CB2                      i1l5871 4B9A                      i1l8431 6996  
                    i1l8407 4910                      i1l8415 4936                      i1l9231 4694  
                    i1l9145 2DEA                      i1l5881 4C28                      i1l5873 4BCA  
                    i1l5865 4B78                      i1l7561 2AE0                      i1l7449 343A  
                    i1l7473 439A                      i1l7465 4300                      i1l8425 6978  
                    i1l8505 5716                      i1l8409 4916                      i1l9217 465A  
                    i1l9209 463A                      i1l9163 2E48                      i1l9075 2CC0  
                    i1l7555 2AA6                      i1l8435 69A8                      i1l8531 5794  
                    i1l8515 574E                      i1l9251 46E6                      i1l9243 46C6  
                    i1l9235 46A6                      i1l9173 2E78                      i1l9165 2E4E  
                    i1l9149 2DFE                      i1l9077 2CC4                      i1l5893 4C5C  
                    i1l5877 4BEA                      i1l5869 4B8C                      i1l7477 5A04  
                    i1l8437 69B0                      i1l8453 4D96                      i1l8525 577A  
                    i1l8381 4860                      i1l9095 2D02                      i1l5887 4C40  
                    i1l5879 4C1A                      i1l7583 2B60                      i1l7567 2AF0  
                    i1l7487 5A38                      i1l8551 4FA6                      i1l8447 4D84  
                    i1l8615 1600                      i1l8607 15C6                      i1l8623 161A  
                    i1l8527 5782                      i1l8375 4848                      i1l9263 4716  
                    i1l9255 46F6                      i1l9247 46D6                      i1l9239 46B6  
                    i1l7585 2B6E                      i1l7577 2B32                      i1l7497 5A68  
                    i1l8561 4FDC                      i1l8481 4E48                      i1l8625 1638  
                    i1l7595 2BB6                      i1l7587 2B7C                      i1l8475 4E36  
                    i1l8459 4DE2                      i1l8643 167A                      i1l8539 57B6  
                    i1l8387 48B0                      i1l9259 4706                      i1l7597 2BC4  
                    i1l7589 2B88                      i1l8557 4FCA                      i1l8485 4E52  
                    i1l8469 4E14                      i1l8661 16E6                      i1l8645 168E  
                    i1l8629 164A                      i1l8397 48E2                      i1l8567 5002  
                    i1l8479 4E42                      i1l8487 4E6A                      i1l8735 1878  
                    i1l8655 16C8                      i1l8825 1DE2                      i1l8761 1918  
                    i1l8745 189C                      i1l8737 1880                      i1l9625 006A  
                    i1l8683 1778                      i1l8773 1C80                      i1l8693 17AA  
                    i1l8597 1598                      i1l8847 1EBC                      i1l8783 1CB0  
                    i1l8599 15A0                      i2l7521 5AE2                      i1l8697 17BC  
                    i1l8689 1798                      i2l7531 5B3E                      i2l7523 5B00  
                    i2l7515 5ACA                      i1l8779 1C9E                      i2l7381 6A0A  
                    i1l8797 1CF4                      i1l8789 1CCA                      i2l7527 5B16  
                    i2l7519 5AD8                      i2l7377 69F0                      i2l7529 5B34  
                    i2l8911 3124                      i2l8903 30F8                      i2l9367 3BBA  
                    i2l8921 3158                      i2l8913 312E                      i2l8923 3162  
                    i2l8915 3136                      i2l9379 3C28                      i2l8909 311A  
                    i2l8951 61BE                      i2l8865 66BA                      i2l8929 31A2  
                    i2l8881 309E                      i2l8867 66C6                      i2l8939 31D2  
                    i2l8947 618E                      i2l8957 61EA                      i2l8887 30C8  
                    _RCREG1 000FAE        __size_of_drawBadPass 0016            i1_confirmEdition 59FE  
                    _SPBRG1 000FAF                      u781_21 3E16                      u919_21 406C  
   __end_of_detenerCuchilla 72BC                      u784_21 39DE                      u786_21 3A18  
                    u779_21 3DDC                      u980_21 2A46                      u981_21 2A64  
            ?i1_calcSysVars 0001                      _TXREG1 000FAD              i1_sysParamInit 67FC  
      __size_of_drawChanVal 0084           ??i2_subirCuchilla 0007            __end_of_delay_ms 6DE2  
     __size_ofi1_pressENTER 03C6                      _UPisLP 004C              integrator@acum 0123  
          __end_of_ioConfig 6F70                i1_integrator 42BC         __size_of_UARTConfig 0038  
     __size_ofi1_pressRETRO 00C2              integrator@temp 0127              i1putchUART@val 0060  
            __CFG_PWRTEN$ON 000000              __CFG_XINST$OFF 000000               _DOWNsecurLock 00C3  
       __size_of_PWM2Config 0066            __end_of__powers_ 7D24        __size_of_drawSNquest 010C  
              _CCPTMRS0bits 000F49            __end_of_drawMenu 304C            __end_of_lcd_init 5CAA  
          __end_of_lcd_putc 661E                      ___ftge 557C                      ___lmul 6786  
          __end_of_cutError 708C             ??_subirCuchilla 0106                   ??___aldiv 0108  
                    ___wmul 6F08                   ??___awdiv 010A                   ??___ftadd 0133  
            __CFG_STVREN$ON 000000                   ??___awmod 0104                   ??___ftdiv 0118  
                 ??___ftneg 0103                   ??___lldiv 0108                   ??___ftmul 011A  
                 ??___llmod 0115                   ??___ftsub 013F                   ??___fttol 012E  
                    _contra 00AB        __end_of_drawCutError 705E                      _hp_isr 0008  
                    _selKMT 004A                      _fround 251C              i2___altoft@exp 0011  
                    clear_0 600E                      clear_1 601A                      clear_2 6026  
          ___awdiv@quotient 010C             ___awmod@divisor 0102                _chanValDigUP 5244  
           ___awmod@counter 0104                      _printf 00C2        __end_of_drawPass1Lin 71E4  
  __size_ofi1_longPressDOWN 002A            ?i1_desintegrator 0001           __end_ofi1___aldiv 4612  
     ___ftmul@f3_as_product 011E           __end_ofi1___ftadd 2C98         _lcd_send_4bits$1496 0100  
       _lcd_send_4bits$1497 0101         _lcd_send_4bits$1498 0102         _lcd_send_4bits$1499 0103  
         __end_ofi1___ftdiv 3F12            ??_lcd_read_4bits 0100           __end_ofi1___ftmul 3B26  
         __end_ofi1___fttol 419A        __end_of_drawPassWord 516A                __pdataCOMRAM 004D  
                 ??_isdigit 0100           __end_ofi2___ftadd 31F8              i2___ftadd@exp1 001E  
            i2___ftadd@exp2 001D            i1_longPressENTER 1C60              i2___ftadd@sign 001C  
              __mediumconst 7CD4            i1_longPressRETRO 4F7C                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8                   ??_pressUP 0105  
              i1_pressENTER 1568         __size_ofi1___altoft 009E            ??_chanValDigDOWN 0100  
              i1_pressRETRO 5706         __size_ofi1___ftpack 010C      __end_ofi1_sysParamInit 6872  
             _loadSysParams 6D0E                  __accesstop 0060           ?_saveProcessState 0001  
   __end_of__initialization 602C                  ___altoft@c 0108         __size_ofi2___altoft 0078  
         __end_ofi1_pressUP 4946             __CFG_PBADEN$OFF 000000       __size_of_EEPROMConfig 0006  
               _UPsecurLock 00C4                  ___ftadd@f1 012D                  ___ftadd@f2 0130  
       __size_ofi2___ftpack 00AE        i1longPressENTER@temp 008D                  ___ftge@ff1 0100  
                ___ftge@ff2 0103               _bajarCuchilla 7342             i1___ftpack@sign 0064  
             ___rparam_used 000001          ??_saveProcessState 0062                  ___ftdiv@f1 0112  
                ___ftdiv@f2 0115                  ___ftdiv@f3 011C            ??_lcd_send_4bits 0100  
           writeEEPROM@data 0100                  ___ftneg@f1 0100              i2___ftpack@arg 0001  
             __end_of_T2int 2E96              i2___ftpack@exp 0004               __end_of_T4int 3C7A  
                ___ftmul@f1 0114                  ___ftmul@f2 0117            ??_confirmEdition 0123  
                ___ftsub@f1 0139                  ___ftsub@f2 013C                  ___fttol@f1 012A  
            __pcstackCOMRAM 0001                 setPWM2on@on 0100                __pidataBANK0 72EC  
              __pidataBANK1 708C                _FC1securLock 0047               _initProtocoll 6E60  
        __size_of_checkPass 008E                  ___lltoft@c 0108                 integrator@i 012B  
             __end_of_scale 11A2               __end_of_putch 725C                _FC2securLock 0045  
   __end_ofi1_subirCuchilla 72EC                   ?i1___lmul 0060                   ?i2___ftge 001F  
              _actualScreen 01BD              lcd_gotoxy@fila 0108      __size_ofi1_setPWM2duty 0094  
                __div_to_l_ 36E2              i1_chanValDigUP 5314                     ??_T2int 0067  
                   ??_T4int 0028          __size_of_ioInitStt 0008               ?_releaseENTER 0001  
                _calibLevel 01B8          __size_of_drawAdvON 004E               ?_releaseRETRO 0001  
           i1___fttol@sign1 0069                _EEPROMConfig 7378           lcd_gotoxy@address 010A  
           ??i1_calcVars2ti 0081                ?i1_checkPass 0001      __size_ofi1_longPressUP 0074  
           __div_to_l_@exp1 010B             __div_to_l_@cntr 010A                  _chanValdig 01A3  
                   ??_scale 0126           i1___aldiv@divisor 0064             __div_to_l_@quot 0106  
                   ??_putch 010D           i1___aldiv@counter 0068            ??_longPressENTER 014C  
                __pbssBANK0 00A5                  __pbssBANK1 01A3              ?_loadSysParams 0001  
           ??i1_calcSysVars 0077            ??_longPressRETRO 0123             ?i1_sysParamInit 0001  
            ?_bajarCuchilla 0001                ?_stopProcess 0001            ?_detenerCuchilla 0001  
     i1_longPressENTER$3080 0090               __div_to_l_@f1 0100               __div_to_l_@f2 0103  
         ??_drawAutoCalibRM 0174        __size_of_setPWM2duty 0094              _RETROsecurLock 00C2  
        __size_of_setPWM2on 001A          __CFG_CCP2MX$PORTC1 000000                ?_writeEEPROM 0100  
            lcd_send_byte@n 0105              ?_initProtocoll 0001                     ?___ftge 0100  
                   ?___lmul 0100                     ?___wmul 010E          __size_of_releaseUP 000C  
        __CFG_CCP3MX$PORTB5 000000        __size_of_longPressUP 0074                   ?_t2config 0001  
                   ?_hp_isr 0001                   ?_t4config 0001                   ?___altoft 0108  
                   ?_fround 0123              ___lmul@product 0108                   ?___ftpack 0100  
    __end_ofi1_chanValDigUP 53E4       __end_of_desintegrator 339E                     ?_printf 013F  
                 ?___lltoft 0108                  ??i1___lmul 0068                  ??i2___ftge 0025  
        __size_of_pressDOWN 0108       i2setPWM2duty@actuator 0001                ??_UARTConfig 0100  
                   u1260_41 305C                     u1261_41 3070        __size_of_releaseDOWN 000C  
            ??_releaseENTER 0100      __size_ofi2_setPWM2duty 0070              ??_releaseRETRO 0100  
              ??_PWM2Config 0106             __CFG_WDTEN$SWON 000000                   ?_delay_ms 0100  
  __size_ofi1_saveSysParams 0092                  _drawScreen 516A                  _lcd_gotoxy 6FA2  
                 ?_ioConfig 0001          __size_of_putchUART 000E      __size_of_longPressDOWN 002A  
                   _SPBRGH1 000FB0           ??i1_longPressDOWN 0060                     _UARTint 4612  
                 ?_drawMenu 0001                   ?_lcd_init 0001                     _i16Data 00B4  
             ??_calcVars2ti 0123           __end_of_checkPass 630A                   ?_lcd_putc 0001  
                 ?_cutError 0001     __size_of_buttonChecking 02B2              _tempLastScreen 00BA  
     __end_of_drawCalibProc 6424               ??_calcSysVars 0123                  _holdUPcont 01BF  
              ?i1_pressDOWN 0001                  _readEEPROM 721A               i1_setPWM2duty 5F14  
         __end_of_ioInitStt 7370    __end_ofi1_chanValDigDOWN 557C           __end_of__npowers_ 7D4B  
                   _t2Cont1 00B9                     _t2Cont2 00B8                     __Hparam 0000  
                _scale$2846 0126       __size_of_drawCutError 002E                  _lastSttFC1 00B7  
                _lastSttFC2 00B6                     __Lparam 0000           __end_of_drawAdvON 6C78  
        __end_of_UARTConfig 6ED0                ?i1_putchUART 0001                  checkPass@i 0105  
        __end_of_PWM2Config 6B7A                ??i1___altoft 006C       __size_of_drawPass1Lin 001E  
             i1_longPressUP 695C                     ___aldiv 43DE             __size_of___ftge 00C8  
              ??i1___ftpack 0065                     ___awdiv 57C8             __size_of___lmul 0076  
                   ___ftadd 27C8                     ___awmod 5B68                     ___ftdiv 3C7A  
                   ___ftneg 6FD2                     ___lldiv 5886             __size_of___wmul 0036  
                   ___ftmul 386A                     ___llmod 5DE6                     ___ftsub 6C78  
                   ___fttol 3F12                  ??_t2config 0100                  ??_t4config 0100  
     __size_of_drawPassWord 00EC                ??i2___altoft 000D                  ??___altoft 010C  
           __size_of_hp_isr 6520                     __pcinit 5FA8                ??i2___ftpack 0006  
                ??___ftpack 0105            ?i1_subirCuchilla 0001             __size_of_fround 02AC  
                   __ramtop 0600             ?i1_chanValDigUP 0001    __end_ofi1_confirmEdition 5ABA  
                ??___lltoft 010C                     __ptext0 6CC4                     __ptext1 70B8  
                   __ptext2 6710                     __ptext3 721A                     __ptext4 6A40  
                   __ptext5 7200                     __ptext6 5C0A                     __ptext7 7368  
                   __ptext8 6F3E                     __ptext9 7370             __size_of_printf 0C32  
           i1_initProtocoll 6ED0         i1initProtocoll@init 0066                 ?__div_to_l_ 0100  
                   _dpowers 7CD5                   _T2CONbits 000FBA                  _integrator 419A  
                   _isdigit 70E2                __size_of_isr 00A6            ___awmod@dividend 0100  
           i2___altoft@sign 0012            ___aldiv@dividend 0100                   _T4CONbits 000F51  
                ??_delay_ms 0102           __end_of_setPWM2on 721A                  ??_ioConfig 0100  
           i2_subirCuchilla 7334                     _pressUP 4726                   _ENTERisLP 01BE  
                   _questSN 01B4             ??_loadSysParams 0081       __end_of_drawReady2Cut 7030  
                ??_drawMenu 0174                  ??_lcd_init 0108           __end_of_releaseUP 735C  
            __pintcode_body 64A8                  ??_lcd_putc 010B        end_of_initialization 602C  
                ??_cutError 0001             ??_bajarCuchilla 0007          __end_ofi1___altoft 5DE6  
         i1calcSysVars@temp 0077                _drawCutError 7030       __end_of_drawValEditor 226A  
        __end_ofi1___ftpack 4C6A                   i1u1003_25 6E5C                   i1u1003_26 6E5E  
      lcd_send_byte@address 0107                   i1u1220_20 16A4                   i1u1221_20 16A6  
                 i1u1303_20 2D8A                   i1u1151_20 48EE              ?i1_setPWM2duty 0060  
                 i1u1303_26 2D8C                   i1u1152_20 48F0                   i1u1233_20 17D2  
                 i1u1217_20 1686                  _securTimer 0037                   i1u1250_20 1CEC  
                 i1u1234_20 17D4                   i1u1218_20 1688               __Lmediumconst 7CD4  
                 i1u1251_20 1CEE                   i1u1316_20 2E80                   i1u1316_26 2E82  
                   int_func 64A8                   i1u1174_20 4E20                   i1u1175_20 4E22  
                 i1u1256_20 1F8A                   i1u1257_20 1F8C                _drawPass1Lin 71C6  
        __end_ofi2___altoft 6710               i2_setPWM2duty 69D0                   i2u1336_45 3B30  
        __end_ofi2___ftpack 5B68                   i2u1336_46 3B32           __end_of_pressDOWN 4D72  
       __end_of_calcVars2ti 6BD2       __end_of_lcd_read_byte 6D9C             ___lldiv@divisor 0104  
              _drawPassWord 507E             ??_initProtocoll 0106             ___lldiv@counter 010C  
  __end_ofi1_longPressENTER 1F92    __end_ofi1_longPressRETRO 507E             lcd_read_4bits@n 0101  
             _longPressDOWN 710C              ?i1_longPressUP 0001         __end_of_calcSysVars 6AAA  
          i1setPWM2duty@act 0064               readEEPROM@adr 0100                     printf@c 0173  
                   printf@f 013F           __end_of_putchUART 730A            ___aldiv@quotient 010A  
                   postdec1 000FE5                     postdec2 000FDD                     postinc0 000FEE  
                   postinc2 000FDE                  _pressENTER 11A2           i1checkPass@passOK 0064  
                _pressRETRO 5644                   _RETROisLP 00C5              __tdiv_to_l_@f1 0100  
            __tdiv_to_l_@f2 0103       __end_of_lcd_send_byte 6E24               ??__tdiv_to_l_ 0106  
                 _PORTAbits 000F80                   _PORTBbits 000F81                  _timsXcorte 0055  
             ??_clockConfig 0100            i1integrator@acum 0083      __size_ofi1_stopProcess 0014  
              _holdDOWNcont 00C8            i1integrator@temp 0087                   _TRISAbits 000F92  
                 _TRISBbits 000F93                   _TRISCbits 000F94                 ?_drawScreen 0001  
               ?_lcd_gotoxy 0108                   i1___aldiv 44F8                   i1___ftadd 2A30  
                 i1___ftdiv 3DC6                   i1___ftmul 39C8                   i1___fttol 4056  
             ??_drawBadPass 0174      __size_ofi1_writeEEPROM 0020                   i2___ftadd 304C  
             ??_drawChanVal 0174        __size_ofi1_checkPass 008E      __size_of_saveSysParams 0092  
  __size_of_interruptConfig 0008           ??i1_saveSysParams 0081              ?i2_setPWM2duty 0001  
               ?_readEEPROM 0001                 ___ftdiv@exp 011F               ??_drawSNquest 0174  
               printf@width 016C                 _CCP2CONbits 000F66          longPressENTER@temp 014C  
         confirmEdition@yes 0123             i2___ftpack@sign 0005        __end_of_releaseENTER 7326  
      __size_of_stopProcess 0014         __size_of__div_to_l_ 0188        __end_of_releaseRETRO 7318  
            ?_longPressDOWN 0001                   i1_pressUP 4836          _tempVelocidadMasa1 01A0  
        _tempVelocidadMasa2 019D          _tempVelocidadMasa3 0192                 ___ftmul@exp 011D  
   __end_ofi1_initProtocoll 6F08                 _ECCP2ASbits 000F64        __size_of_writeEEPROM 0020  
            __end_of___ftge 5644              __end_of___lmul 67FC       __end_of_subirCuchilla 72CC  
            __end_of___wmul 6F3E   __size_of_saveProcessState 003C               __pidataCOMRAM 729A  
   __end_ofi2_subirCuchilla 7342              __end_of_hp_isr 6528              __end_of_fround 27C8  
       setPWM2duty@actuator 0100              __end_of_printf 0CF4                 ?_integrator 0001  
     i1___lmul@multiplicand 0064           __size_ofi1___lmul 0076         start_initialization 5FA8  
         __size_ofi2___ftge 0090         __end_of__tdiv_to_l_ 36E2            ??i1_sysParamInit 007A  
                ?i1___aldiv 0060                 __end_of_isr 00BE                  ?i1___ftadd 0068  
                ?i1___ftdiv 0072                  ?i1___ftmul 0068                  ?i1___fttol 0060  
           _drawAutoCalibRM 6F70         __end_of_clockConfig 7186                  ?i2___ftadd 0013  
  __size_ofi1_desintegrator 01A6                 _calcVars2ti 6B7A             ??i1_setPWM2duty 0062  
            _buttonChecking 226A           desintegrator@temp 013B                 _calcSysVars 6A40  
           ___llmod@divisor 0111               i1_stopProcess 7286         __end_of_drawBadPass 7246  
           ___llmod@counter 0115             ??i1_longPressUP 0060                _lastSttENTER 00D4  
              _lastSttRETRO 00D5         __end_of_drawChanVal 64A8        __size_ofi1_pressDOWN 0108  
                ?i1_pressUP 0001                    ??___ftge 0106         __size_of_drawScreen 00DA  
                  ??___lmul 0108         __size_of_lcd_gotoxy 0030               i1_writeEEPROM 71A6  
                  ??___wmul 0112         __end_of_drawSNquest 4A52                 ?_pressENTER 0001  
               _chanValChar 00A5        __size_ofi1_putchUART 000E                 ?_pressRETRO 0001  
               __pdataBANK0 00C9                 __pdataBANK1 0177             lcd_send_4bits@n 0104  
               _bladeIsDown 00BC                    ??_hp_isr 0029          i1___aldiv@dividend 0060  
             _saveSysParams 603A                    ??_fround 0126             i1_longPressDOWN 7136  
           i1readEEPROM@adr 0060                    ??_printf 0151           __size_of_t2config 001C  
         __size_of_t4config 002A           __size_of___altoft 009E                  fround@prec 012C  
       __size_of_readEEPROM 0016           __size_of___ftpack 010C           __size_of___lltoft 007C  
               __pbssCOMRAM 0037              writeEEPROM@adr 0101               __pcstackBANK0 0060  
             __pcstackBANK1 0100                   _calFactor 0042      __end_of_buttonChecking 251C  
              _isdigit$2329 0101                    ?_UARTint 0001           __size_of_delay_ms 0046  
          i1___lmul@product 0068           __size_of_ioConfig 0032       __end_ofi1_calcVars2ti 6C2A  
           ??i2_setPWM2duty 0003               ?_sysParamInit 0001                   _calibMode 00BE  
   __size_of_lcd_read_4bits 007A               ??_setPWM2duty 0102           __size_of_drawMenu 01B6  
         __size_of_lcd_init 00A0           __size_of_lcd_putc 007A                   _bladeIsUP 00BD  
            ?i1_stopProcess 0001       __end_ofi1_calcSysVars 6B14          i1___aldiv@quotient 006A  
         __size_of_cutError 002E                   _checkPass 627C             ??_longPressDOWN 0100  
         i1_detenerCuchilla 72CC         __size_of_integrator 0122               ??_longPressUP 0100  
         ?i1_chanValDigDOWN 0001           ??_interruptConfig 0100          ?i1_detenerCuchilla 0001  
            ?i1_writeEEPROM 0060     __size_of_chanValDigDOWN 00CC            ??i1_chanValDigUP 0060  
                 __pintcode 0008               __pmediumconst 7CD4                    ?___aldiv 0100  
  __size_of_detenerCuchilla 0010            ?i1_initProtocoll 0001                    ?___awdiv 0106  
                 __ptext100 4F7C                   __ptext101 1C60                   __ptext110 7136  
                 __ptext102 42BC                   __ptext111 6D0E                   __ptext103 5D48  
                 __ptext120 72CC                   __ptext112 60CC                   __ptext104 339E  
                 __ptext121 6ED0                   __ptext113 6BD2                   __ptext105 6872  
                 __ptext130 304C                   __ptext122 72DC                   __ptext114 3DC6  
                 __ptext106 4056                   __ptext131 6698                   __ptext123 5F14  
                 __ptext115 6AAA                   __ptext107 44F8                   __ptext132 5ABA  
                 __ptext124 6E24                   __ptext116 39C8                   __ptext108 59FE  
                 __ptext133 705E                   __ptext125 71A6                   __ptext117 4B5E  
                 __ptext109 2A30                    ?___ftadd 012D                   __ptext134 7342  
                 __ptext118 2C98                   __ptext135 69D0                   __ptext127 3B26  
                 __ptext119 7286                   __ptext128 7334                   __ptext129 615E  
        ??i1_chanValDigDOWN 0060                    ?___awmod 0100                    ?___ftdiv 0112  
                  ?___ftneg 0100                   _ioInitStt 7368                    ?___lldiv 0100  
                  ?___ftmul 0114                    ?___llmod 010D                    ?___ftsub 0139  
                 __npowers_ 7D24                    ?___fttol 012A              ?_saveSysParams 0001  
                 _drawAdvON 6C2A               ??_releaseDOWN 0100                 __pintcodelo 0018  
       ??i1_detenerCuchilla 0066            __CFG_PRICLKEN$ON 000000                 __tdiv_to_l_ 3544  
   __size_of_lcd_send_4bits 008E            ?i2_subirCuchilla 0001           ?i1_confirmEdition 0001  
             ?i1_readEEPROM 0001     __end_of_drawAutoCalibRM 6FA2                ??__div_to_l_ 0106  
   __size_of_confirmEdition 00BC                 _clockConfig 7160                    ?_isdigit 0001  
            __size_of_T2int 01FE              __size_of_T4int 0154          ??i1_confirmEdition 0081  
                 _lastSttUP 00D7                 ??i1___aldiv 0068                    ?_pressUP 0001  
               ??i1___ftadd 006E                 ??i1___ftdiv 0078                 ??i1___ftmul 006E  
               ??i1___fttol 0064             ?_buttonChecking 0001                   _ready2Cut 00BF  
               ??i2___ftadd 0019                 _drawBadPass 7230              __size_of_scale 04AE  
            ??_sysParamInit 0126              __size_of_putch 0016         __size_of_pressENTER 03C6  
                 _setPWM2on 7200       __size_of_releaseENTER 000E         __size_of_pressRETRO 00C2  
               _drawChanVal 6424       __size_of_releaseRETRO 000E             ___aldiv@divisor 0104  
 __end_ofi1_detenerCuchilla 72DC             ___aldiv@counter 0108               _tempNumCortes 00D0  
            ___wmul@product 0112                    _LATBbits 000F8A                    _LATCbits 000F8B  
                 _releaseUP 7350                  ?_checkPass 0001     lcd_init@LCD_INIT_STRING 0109  
                 delay_ms@i 0103      __size_of_desintegrator 01A6                    _DOWNisLP 004B  
               _drawSNquest 4946           ??i1_desintegrator 0077                    _IPR1bits 000F9F  
                  _PIE1bits 000F9D                    _IPR5bits 000F7F                    _PIE5bits 000F7D  
                 _numCortes 00D2               ?i1_integrator 0001                 ??i1_pressUP 0065  
                  i1u921_20 40B6                    i1u921_25 40AC                    _PIR1bits 000F9E  
        __end_of__div_to_l_ 386A     __end_ofi1_longPressDOWN 7160                    i1u908_25 615A  
                  i1u908_26 615C                    _PIR5bits 000F7E                    i1u965_20 3438  
         ?i1_longPressENTER 0001         __end_of_setPWM2duty 5F14                 _holdFC1cont 0048  
               _holdFC2cont 0046                    _RCONbits 000FD0           ?i1_longPressRETRO 0001  
                UARTint@sas 0093     __size_of_longPressENTER 0332                   _pressDOWN 4C6A  
   __size_of_longPressRETRO 0102                  ?_ioInitStt 0001          ??i1_longPressENTER 008D  
                ?_drawAdvON 0001          ??i1_longPressRETRO 0077            _saveProcessState 6E24  
             ?_chanValDigUP 0001                   _putchUART 72FC         __end_of_longPressUP 695C  
            ??i1_readEEPROM 0060                    i1___lmul 6872           ___wmul@multiplier 010E  
                  i2___ftge 615E      __size_of_drawCalibProc 008C                   lcd_init@i 010D  
                printf@flag 0160                  printf@fval 016E                  printf@prec 0171  
           i1_saveSysParams 60CC                _releaseENTER 7318         __end_of_releaseDOWN 7368  
              ??_drawScreen 0177                _releaseRETRO 730A                ??_lcd_gotoxy 0109  
  __size_ofi1_subirCuchilla 0010               ?i1_pressENTER 0001           ___lmul@multiplier 0100  
                 copy_data0 5FBC                   copy_data1 5FDC                   copy_data2 5FFC  
             ?i1_pressRETRO 0001            __size_of_UARTint 0114       __end_of_loadSysParams 6D56  
           ??i1_stopProcess 0066                  ?_setPWM2on 0001       __end_of_bajarCuchilla 7350  
              ??_readEEPROM 0100                  ?_releaseUP 0001              ??i1_integrator 0081  
                _EECON1bits 000FA6             ??i1_writeEEPROM 0061                    __Hrparam 0000  
               _lastSttDOWN 00D6                    __Lrparam 0000          __CFG_BOREN$SBORDIS 000000  
     __end_of_initProtocoll 6E98             ??_saveSysParams 0123                  ?_pressDOWN 0001  
         __CFG_P2BMX$PORTC0 000000          __end_of_drawScreen 5244          __end_of_lcd_gotoxy 6FD2  
          __size_of___aldiv 011A                    _t2config 71E4               i1integrator@i 008B  
          __size_of___awdiv 00BE              ??_chanValDigUP 0100            __size_of___ftadd 0268  
          __size_of___awmod 00A2                    _t4config 70B8            __size_of___ftdiv 014C  
    __size_of_drawReady2Cut 002E            __size_of___ftneg 0030            __size_of___lldiv 00BC  
                  ___altoft 5CAA            __size_of___ftmul 015E            __size_of___llmod 009A  
          __size_of___ftsub 004C            __size_of___fttol 0144                  ?_putchUART 0001  
                  ___ftpack 4A52                 _fround$2844 0129                 _fround$2845 0126  
                  ___lltoft 6528               _desintegrator 31F8      __size_of_drawValEditor 02D8  
                _ANSELAbits 000F38                  _ANSELCbits 000F3A              desintegrator@i 014A  
          ?_drawAutoCalibRM 0001           ??_detenerCuchilla 0106                ??_integrator 0121  
               _menuSection 01BC                    _chanValf 01B1                    _chanVals 01B6  
        __end_of_readEEPROM 7230            __size_of_isdigit 002A      __size_of_lcd_read_byte 0046  
                  _delay_ms 6D9C               ?_EEPROMConfig 0001                    _ioConfig 6F3E  
             ??i1_checkPass 0060              ??i1_pressENTER 008A                    __ptext10 516A  
                  __ptext11 4946                    __ptext20 6F70                    __ptext12 7002  
                  __ptext21 1F92                    __ptext13 507E                    __ptext30 61EE  
                  __ptext22 6C2A                    __ptext14 2E96                    __ptext31 6D56  
                  __ptext23 00C2                    __ptext15 7030                    __ptext40 6528  
                  __ptext32 661E                    __ptext24 0CF4                    __ptext16 6424  
                  __ptext41 5DE6                    __ptext33 70E2                    __ptext25 7246  
                  __ptext17 6398                    __ptext50 7318                    __ptext42 5886  
                  __ptext34 251C                    __ptext26 72FC                    __ptext18 7230  
                  __ptext51 735C                    __ptext43 6C78                    __ptext35 6F08  
                  __ptext27 65A4                    __ptext19 71C6                    __ptext60 4E7A  
                  __ptext52 4726                    __ptext44 6FD2                    __ptext36 5B68  
                  __ptext28 6FA2                    __ptext61 7272                    __ptext53 5244  
                  __ptext45 557C                    __ptext37 57C8                    __ptext29 6DE2  
                  __ptext70 3F12                    __ptext62 72AC                    __ptext54 5644  
                  __ptext46 7160                    __ptext38 3544                    __ptext71 43DE  
                  __ptext63 6E60                    __ptext55 11A2                    __ptext47 226A  
                  __ptext39 36E2                    __ptext80 710C                    __ptext72 5942  
                  __ptext64 72BC                    __ptext56 627C                    __ptext48 7350  
                  __ptext81 6D9C                    __ptext73 603A                    __ptext65 192E  
                  __ptext57 4C6A                    __ptext49 730A                    __ptext90 725C  
                  __ptext82 6E98                    __ptext74 7186                    __ptext66 419A  
                  __ptext58 53E4                    __ptext91 7326                    __ptext83 6B14  
                  __ptext75 6B7A                    __ptext67 5CAA                    __ptext59 68E8  
                  __ptext92 4836                    __ptext84 71E4                    __ptext76 386A  
                  __ptext68 31F8                    __ptext93 5314                    __ptext85 5E80  
                  __ptext77 3C7A                    __ptext69 6786                    __ptext94 5706  
                  __ptext86 7378                    __ptext78 27C8                    __ptext95 1568  
                  __ptext79 4A52                    __ptext96 630A                    __ptext88 4612  
                  __ptext97 4D72                    __ptext89 67FC                    __ptext98 54B0  
                  __ptext99 695C              _processStarted 00C0                    _kgXcorte 0198  
                  __powers_ 7CFD              ??i1_pressRETRO 0067            __size_of_pressUP 0110  
                  _drawMenu 2E96                    _lcd_init 5C0A                    _lcd_putc 65A4  
              ?_calcVars2ti 0001                    _cutError 705E                 _OSCCON2bits 000FD2  
            _lcd_read_4bits 661E               ??_stopProcess 0106      __size_of_lcd_send_byte 0042  
__size_ofi1_detenerCuchilla 0010                 _setPWM2duty 5E80           i1writeEEPROM@data 0060  
              ?_calcSysVars 0001               __size_of_main 004A               _drawCalibProc 6398  
               ??_checkPass 0100             calcSysVars@temp 0123                    _passChar 01A9  
       _longPressENTER$2843 014F                 _passSection 01BB                    _tiXcorte 0195  
                  _timeDOWN 004D               ??_writeEEPROM 0101              _chanValDigDOWN 53E4  
          ?i1_longPressDOWN 0001                 _longPressUP 68E8          __end_of_integrator 42BC  
              _PSTR2CONbits 000F63                ??_pressENTER 014C                    int$flags 005E  
               ??_ioInitStt 0100                    _questKMT 003F                ??_pressRETRO 0107  
               ??_drawAdvON 0174     __end_ofi1_saveSysParams 615E                   printf@len 015C  
                 printf@exp 016A                   printf@val 0166        __end_of_sysParamInit 6786  
               _releaseDOWN 735C              _lcd_send_4bits 61EE             checkPass@passOK 0104  
            ?_desintegrator 0001                 _introducido 01AD                 delay_ms@del 0100  
            _confirmEdition 5942              _chanValSection 019C               _velocidadMasa 018F  
       i1confirmEdition@yes 0081                 _OSCTUNEbits 000F9B                  _INTCONbits 000FF2  
            ??_EEPROMConfig 0100        i1desintegrator@temp2 0084        i1desintegrator@temp3 0080  
      i1desintegrator@tempL 007C                 _PWM2CONbits 000F65                    isdigit@c 0102  
              _tempkgXcorte 0058                    scale@scl 0129      __end_of_lcd_read_4bits 6698  
           _interruptConfig 7370               _drawReady2Cut 7002                    intlevel1 0000  
                  intlevel2 0000                 ??_setPWM2on 0100            __tdiv_to_l_@exp1 010E  
          __tdiv_to_l_@cntr 010D          __end_of_pressENTER 1568            __tdiv_to_l_@quot 0109  
            ?_drawCalibProc 0001      __size_of_subirCuchilla 0010          __end_of_pressRETRO 5706  
     __end_ofi1_setPWM2duty 5FA8               ??i1_pressDOWN 0065            ___lldiv@dividend 0100  
             _drawValEditor 1F92           ??i1_subirCuchilla 0066                 ??_releaseUP 0100  
      __end_ofi1_readEEPROM 7272         __end_ofi1_checkPass 6398                _temptiXcorte 00CD  
    __end_of_chanValDigDOWN 54B0                  _RCSTA1bits 000FAB            i1writeEEPROM@adr 0061  
                _OSCCONbits 000FD3               ??i1_putchUART 0060               _lcd_read_byte 6D56  
        _screen_calibVelRes 0049       __end_ofi1_longPressUP 69D0              _longPressENTER 192E  
       __end_of_stopProcess 7286              _longPressRETRO 4E7A                 ??_pressDOWN 0105  
                  printf@ap 015E                    printf@cp 015A      __end_of_lcd_send_4bits 627C  
    __end_of_confirmEdition 59FE                    putch@val 010D                 ??_putchUART 0100  
       i1desintegrator@temp 0079               _lcd_send_byte 6DE2         __end_of_writeEEPROM 71A6  
              ?__tdiv_to_l_ 0100                 _printf$2847 0157            ??_buttonChecking 0152  
              ?_clockConfig 0001                  _UARTConfig 6E98                _processTimer 003B  
              _processState 00B2        __end_ofi1_integrator 43DE            ___lldiv@quotient 0108  
                _PWM2Config 6B14   __size_ofi1_chanValDigDOWN 00CC                ___aldiv@sign 0109  
         __CFG_T3CMX$PORTC0 000000             i1_desintegrator 339E                  _WDTCONbits 000FD1  
             _holdENTERcont 00C6             ?_lcd_read_4bits 0001                ?_drawBadPass 0001  
            ?_drawReady2Cut 0001               ?_drawCutError 0001                ?_drawChanVal 0001  
  __end_of_saveProcessState 6E60        __end_of_chanValDigUP 5314              _ENTERsecurLock 00C1  
            ?_drawValEditor 0001   __size_ofi1_confirmEdition 00BC               ?_drawPass1Lin 0001  
     __end_ofi2_setPWM2duty 6A40           __CFG_FOSC$INTIO67 000000                 drawAdvON@on 0174  
              ?_drawSNquest 0001             ?_chanValDigDOWN 0001     __size_ofi1_sysParamInit 0076  
    __end_of_longPressENTER 1C60               ?_drawPassWord 0001              ?_lcd_read_byte 0001  
    __end_of_longPressRETRO 4F7C       __end_of_longPressDOWN 7136  
