

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Nov 06 17:05:47 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	text92,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	text98,global,reloc=2,class=CODE,delta=1
   118                           	psect	text99,global,reloc=2,class=CODE,delta=1
   119                           	psect	text100,global,reloc=2,class=CODE,delta=1
   120                           	psect	text101,global,reloc=2,class=CODE,delta=1
   121                           	psect	text102,global,reloc=2,class=CODE,delta=1
   122                           	psect	text103,global,reloc=2,class=CODE,delta=1
   123                           	psect	text104,global,reloc=2,class=CODE,delta=1
   124                           	psect	text105,global,reloc=2,class=CODE,delta=1
   125                           	psect	text106,global,reloc=2,class=CODE,delta=1
   126                           	psect	text107,global,reloc=2,class=CODE,delta=1
   127                           	psect	text108,global,reloc=2,class=CODE,delta=1
   128                           	psect	text109,global,reloc=2,class=CODE,delta=1
   129                           	psect	text110,global,reloc=2,class=CODE,delta=1
   130                           	psect	text111,global,reloc=2,class=CODE,delta=1
   131                           	psect	text112,global,reloc=2,class=CODE,delta=1
   132                           	psect	text113,global,reloc=2,class=CODE,delta=1
   133                           	psect	text114,global,reloc=2,class=CODE,delta=1
   134                           	psect	text115,global,reloc=2,class=CODE,delta=1
   135                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   136                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   137                           	psect	text117,global,reloc=2,class=CODE,delta=1
   138                           	psect	text118,global,reloc=2,class=CODE,delta=1
   139                           	psect	text119,global,reloc=2,class=CODE,delta=1
   140                           	psect	text120,global,reloc=2,class=CODE,delta=1
   141                           	psect	text121,global,reloc=2,class=CODE,delta=1
   142                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   143                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   144                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   145  0000                     
   146                           	psect	idataCOMRAM
   147  006C4C                     __pidataCOMRAM:
   148                           	opt stack 0
   149                           
   150                           ;initializer for _timeDOWN
   151  006C4C  03E8               	dw	1000
   152  006C4E  0000               	dw	0
   153                           
   154                           ;initializer for _pi
   155  006C50  10                 	db	16
   156  006C51  49                 	db	73
   157  006C52  40                 	db	64
   158                           
   159                           ;initializer for _tempkgXcorte
   160  006C53  CD                 	db	205
   161  006C54  CC                 	db	204
   162  006C55  3D                 	db	61
   163                           
   164                           ;initializer for _timsXcorte
   165  006C56  40                 	db	64
   166  006C57  1C                 	db	28
   167  006C58  46                 	db	70
   168                           
   169                           	psect	idataBANK0
   170  006C0C                     __pidataBANK0:
   171                           	opt stack 0
   172                           
   173                           ;initializer for lcd_init@F7567
   174  006C0C  28                 	db	40
   175  006C0D  0C                 	db	12
   176  006C0E  01                 	db	1
   177  006C0F  06                 	db	6
   178                           
   179                           ;initializer for _diamTubo
   180  006C10  00                 	db	0
   181  006C11  A0                 	db	160
   182  006C12  41                 	db	65
   183                           
   184                           ;initializer for _kgXcorte
   185  006C13  00                 	db	0
   186  006C14  80                 	db	128
   187  006C15  3F                 	db	63
   188                           
   189                           ;initializer for _temptiXcorte
   190  006C16  00                 	db	0
   191  006C17  20                 	db	32
   192  006C18  41                 	db	65
   193                           
   194                           ;initializer for _tiXcorte
   195  006C19  00                 	db	0
   196  006C1A  20                 	db	32
   197  006C1B  41                 	db	65
   198                           
   199                           ;initializer for _velocidadMasa
   200  006C1C  CD                 	db	205
   201  006C1D  4C                 	db	76
   202  006C1E  3E                 	db	62
   203                           
   204                           ;initializer for _numCortes
   205  006C1F  0005               	dw	5
   206                           
   207                           	psect	idataBANK1
   208  006AEA                     __pidataBANK1:
   209                           	opt stack 0
   210                           
   211                           ;initializer for _exp10
   212  006AEA  86A0               	dw	34464
   213  006AEC  0001               	dw	1
   214  006AEE  2710               	dw	10000
   215  006AF0  0000               	dw	0
   216  006AF2  03E8               	dw	1000
   217  006AF4  0000               	dw	0
   218  006AF6  0064               	dw	100
   219  006AF8  0000               	dw	0
   220  006AFA  000A               	dw	10
   221  006AFC  0000               	dw	0
   222  006AFE  0001               	dw	1
   223  006B00  0000               	dw	0
   224                           
   225                           ;initializer for _tempVelocidadMasa3
   226  006B02  CD                 	db	205
   227  006B03  4C                 	db	76
   228  006B04  3E                 	db	62
   229                           
   230                           ;initializer for _tempNumCortes
   231  006B05  0001               	dw	1
   232                           
   233                           ;initializer for _chanValSection
   234  006B07  05                 	db	5
   235                           
   236                           ;initializer for _flech
   237  006B08  7E                 	db	126
   238                           
   239                           ;initializer for _lastSttDOWN
   240  006B09  01                 	db	1
   241                           
   242                           ;initializer for _lastSttENTER
   243  006B0A  01                 	db	1
   244                           
   245                           ;initializer for _lastSttRETRO
   246  006B0B  01                 	db	1
   247                           
   248                           ;initializer for _lastSttUP
   249  006B0C  01                 	db	1
   250                           
   251                           ;initializer for _tempVelocidadMasa1
   252  006B0D  CD                 	db	205
   253  006B0E  4C                 	db	76
   254  006B0F  3E                 	db	62
   255                           
   256                           ;initializer for _tempVelocidadMasa2
   257  006B10  CD                 	db	205
   258  006B11  4C                 	db	76
   259  006B12  3E                 	db	62
   260                           
   261                           	psect	mediumconst
   262  007D34                     __pmediumconst:
   263                           	opt stack 0
   264  007D34  00                 	db	0
   265  007D35                     _dpowers:
   266                           	opt stack 0
   267  007D35  0001               	dw	1
   268  007D37  0000               	dw	0
   269  007D39  000A               	dw	10
   270  007D3B  0000               	dw	0
   271  007D3D  0064               	dw	100
   272  007D3F  0000               	dw	0
   273  007D41  03E8               	dw	1000
   274  007D43  0000               	dw	0
   275  007D45  2710               	dw	10000
   276  007D47  0000               	dw	0
   277  007D49  86A0               	dw	34464
   278  007D4B  0001               	dw	1
   279  007D4D  4240               	dw	16960
   280  007D4F  000F               	dw	15
   281  007D51  9680               	dw	38528
   282  007D53  0098               	dw	152
   283  007D55  E100               	dw	57600
   284  007D57  05F5               	dw	1525
   285  007D59  CA00               	dw	51712
   286  007D5B  3B9A               	dw	15258
   287  007D5D                     __end_of_dpowers:
   288                           	opt stack 0
   289  007D5D                     __npowers_:
   290                           	opt stack 0
   291  007D5D  00                 	db	0
   292  007D5E  80                 	db	128
   293  007D5F  3F                 	db	63
   294  007D60  CD                 	db	205
   295  007D61  CC                 	db	204
   296  007D62  3D                 	db	61
   297  007D63  D7                 	db	215
   298  007D64  23                 	db	35
   299  007D65  3C                 	db	60
   300  007D66  12                 	db	18
   301  007D67  83                 	db	131
   302  007D68  3A                 	db	58
   303  007D69  B7                 	db	183
   304  007D6A  D1                 	db	209
   305  007D6B  38                 	db	56
   306  007D6C  C6                 	db	198
   307  007D6D  27                 	db	39
   308  007D6E  37                 	db	55
   309  007D6F  38                 	db	56
   310  007D70  86                 	db	134
   311  007D71  35                 	db	53
   312  007D72  C0                 	db	192
   313  007D73  D6                 	db	214
   314  007D74  33                 	db	51
   315  007D75  CC                 	db	204
   316  007D76  2B                 	db	43
   317  007D77  32                 	db	50
   318  007D78  70                 	db	112
   319  007D79  89                 	db	137
   320  007D7A  30                 	db	48
   321  007D7B  E7                 	db	231
   322  007D7C  DB                 	db	219
   323  007D7D  2E                 	db	46
   324  007D7E  E5                 	db	229
   325  007D7F  3C                 	db	60
   326  007D80  1E                 	db	30
   327  007D81  42                 	db	66
   328  007D82  A2                 	db	162
   329  007D83  0D                 	db	13
   330  007D84                     __end_of__npowers_:
   331                           	opt stack 0
   332  007D84                     __powers_:
   333                           	opt stack 0
   334  007D84  00                 	db	0
   335  007D85  80                 	db	128
   336  007D86  3F                 	db	63
   337  007D87  00                 	db	0
   338  007D88  20                 	db	32
   339  007D89  41                 	db	65
   340  007D8A  00                 	db	0
   341  007D8B  C8                 	db	200
   342  007D8C  42                 	db	66
   343  007D8D  00                 	db	0
   344  007D8E  7A                 	db	122
   345  007D8F  44                 	db	68
   346  007D90  40                 	db	64
   347  007D91  1C                 	db	28
   348  007D92  46                 	db	70
   349  007D93  50                 	db	80
   350  007D94  C3                 	db	195
   351  007D95  47                 	db	71
   352  007D96  24                 	db	36
   353  007D97  74                 	db	116
   354  007D98  49                 	db	73
   355  007D99  97                 	db	151
   356  007D9A  18                 	db	24
   357  007D9B  4B                 	db	75
   358  007D9C  BC                 	db	188
   359  007D9D  BE                 	db	190
   360  007D9E  4C                 	db	76
   361  007D9F  6B                 	db	107
   362  007DA0  6E                 	db	110
   363  007DA1  4E                 	db	78
   364  007DA2  03                 	db	3
   365  007DA3  15                 	db	21
   366  007DA4  50                 	db	80
   367  007DA5  79                 	db	121
   368  007DA6  AD                 	db	173
   369  007DA7  60                 	db	96
   370  007DA8  F3                 	db	243
   371  007DA9  49                 	db	73
   372  007DAA  71                 	db	113
   373  007DAB                     __end_of__powers_:
   374                           	opt stack 0
   375  0000                     _ANSELAbits	set	3896
   376  0000                     _ANSELCbits	set	3898
   377  0000                     _CCPTMRS0bits	set	3913
   378  0000                     _PR4	set	3922
   379  0000                     _T4CONbits	set	3921
   380  0000                     _BAUDCON1bits	set	4024
   381  0000                     _CCP2CONbits	set	3942
   382  0000                     _CCPR2L	set	3943
   383  0000                     _ECCP2ASbits	set	3940
   384  0000                     _EEADR	set	4009
   385  0000                     _EECON1bits	set	4006
   386  0000                     _EECON2	set	4007
   387  0000                     _EEDATA	set	4008
   388  0000                     _INTCONbits	set	4082
   389  0000                     _IPR1bits	set	3999
   390  0000                     _IPR5bits	set	3967
   391  0000                     _LATBbits	set	3978
   392  0000                     _LATCbits	set	3979
   393  0000                     _OSCCON2bits	set	4050
   394  0000                     _OSCCONbits	set	4051
   395  0000                     _OSCTUNEbits	set	3995
   396  0000                     _PIE1bits	set	3997
   397  0000                     _PIE5bits	set	3965
   398  0000                     _PIR1bits	set	3998
   399  0000                     _PIR5bits	set	3966
   400  0000                     _PORTAbits	set	3968
   401  0000                     _PORTBbits	set	3969
   402  0000                     _PR2	set	4027
   403  0000                     _PSTR2CONbits	set	3939
   404  0000                     _PWM2CONbits	set	3941
   405  0000                     _RCONbits	set	4048
   406  0000                     _RCREG1	set	4014
   407  0000                     _RCSTA1bits	set	4011
   408  0000                     _SPBRG1	set	4015
   409  0000                     _SPBRGH1	set	4016
   410  0000                     _T2CONbits	set	4026
   411  0000                     _TRISAbits	set	3986
   412  0000                     _TRISBbits	set	3987
   413  0000                     _TRISCbits	set	3988
   414  0000                     _TXREG1	set	4013
   415  0000                     _TXSTA1bits	set	4012
   416  0000                     _WDTCONbits	set	4049
   417  007DAB                     STR_25:
   418  007DAB  20                 	db	32
   419  007DAC  20                 	db	32
   420  007DAD  20                 	db	32
   421  007DAE  20                 	db	32
   422  007DAF  25                 	db	37
   423  007DB0  63                 	db	99	;'c'
   424  007DB1  25                 	db	37
   425  007DB2  75                 	db	117	;'u'
   426  007DB3  25                 	db	37
   427  007DB4  63                 	db	99	;'c'
   428  007DB5  25                 	db	37
   429  007DB6  75                 	db	117	;'u'
   430  007DB7  25                 	db	37
   431  007DB8  63                 	db	99	;'c'
   432  007DB9  25                 	db	37
   433  007DBA  75                 	db	117	;'u'
   434  007DBB  25                 	db	37
   435  007DBC  63                 	db	99	;'c'
   436  007DBD  25                 	db	37
   437  007DBE  75                 	db	117	;'u'
   438  007DBF  20                 	db	32
   439  007DC0  20                 	db	32
   440  007DC1  20                 	db	32
   441  007DC2  20                 	db	32
   442  007DC3  00                 	db	0
   443  007DC4                     STR_34:
   444  007DC4  20                 	db	32
   445  007DC5  20                 	db	32
   446  007DC6  20                 	db	32
   447  007DC7  25                 	db	37
   448  007DC8  63                 	db	99	;'c'
   449  007DC9  53                 	db	83	;'S'
   450  007DCA  49                 	db	73	;'I'
   451  007DCB  20                 	db	32
   452  007DCC  20                 	db	32
   453  007DCD  20                 	db	32
   454  007DCE  20                 	db	32
   455  007DCF  25                 	db	37
   456  007DD0  63                 	db	99	;'c'
   457  007DD1  4E                 	db	78	;'N'
   458  007DD2  4F                 	db	79	;'O'
   459  007DD3  20                 	db	32
   460  007DD4  20                 	db	32
   461  007DD5  20                 	db	32
   462  007DD6  00                 	db	0
   463  007DD7                     STR_35:
   464  007DD7  50                 	db	80	;'P'
   465  007DD8  65                 	db	101	;'e'
   466  007DD9  73                 	db	115	;'s'
   467  007DDA  6F                 	db	111	;'o'
   468  007DDB  20                 	db	32
   469  007DDC  52                 	db	82	;'R'
   470  007DDD  65                 	db	101	;'e'
   471  007DDE  61                 	db	97	;'a'
   472  007DDF  6C                 	db	108	;'l'
   473  007DE0  3A                 	db	58	;':'
   474  007DE1  20                 	db	32
   475  007DE2  20                 	db	32
   476  007DE3  20                 	db	32
   477  007DE4  20                 	db	32
   478  007DE5  20                 	db	32
   479  007DE6  20                 	db	32
   480  007DE7  0A                 	db	10
   481  007DE8  00                 	db	0
   482  007DE9                     STR_24:
   483  007DE9  43                 	db	67	;'C'
   484  007DEA  6F                 	db	111	;'o'
   485  007DEB  6E                 	db	110	;'n'
   486  007DEC  74                 	db	116	;'t'
   487  007DED  72                 	db	114	;'r'
   488  007DEE  61                 	db	97	;'a'
   489  007DEF  73                 	db	115	;'s'
   490  007DF0  65                 	db	101	;'e'
   491  007DF1  6E                 	db	110	;'n'
   492  007DF2  61                 	db	97	;'a'
   493  007DF3  3A                 	db	58	;':'
   494  007DF4  20                 	db	32
   495  007DF5  20                 	db	32
   496  007DF6  20                 	db	32
   497  007DF7  20                 	db	32
   498  007DF8  20                 	db	32
   499  007DF9  0A                 	db	10
   500  007DFA  00                 	db	0
   501  007DFB                     STR_14:
   502  007DFB  44                 	db	68	;'D'
   503  007DFC  69                 	db	105	;'i'
   504  007DFD  61                 	db	97	;'a'
   505  007DFE  6D                 	db	109	;'m'
   506  007DFF  65                 	db	101	;'e'
   507  007E00  74                 	db	116	;'t'
   508  007E01  72                 	db	114	;'r'
   509  007E02  6F                 	db	111	;'o'
   510  007E03  20                 	db	32
   511  007E04  54                 	db	84	;'T'
   512  007E05  75                 	db	117	;'u'
   513  007E06  62                 	db	98	;'b'
   514  007E07  6F                 	db	111	;'o'
   515  007E08  3A                 	db	58	;':'
   516  007E09  20                 	db	32
   517  007E0A  20                 	db	32
   518  007E0B  0A                 	db	10
   519  007E0C  00                 	db	0
   520  007E0D                     STR_16:
   521  007E0D  56                 	db	86	;'V'
   522  007E0E  65                 	db	101	;'e'
   523  007E0F  6C                 	db	108	;'l'
   524  007E10  6F                 	db	111	;'o'
   525  007E11  63                 	db	99	;'c'
   526  007E12  69                 	db	105	;'i'
   527  007E13  64                 	db	100	;'d'
   528  007E14  61                 	db	97	;'a'
   529  007E15  64                 	db	100	;'d'
   530  007E16  20                 	db	32
   531  007E17  4D                 	db	77	;'M'
   532  007E18  61                 	db	97	;'a'
   533  007E19  73                 	db	115	;'s'
   534  007E1A  61                 	db	97	;'a'
   535  007E1B  3A                 	db	58	;':'
   536  007E1C  20                 	db	32
   537  007E1D  0A                 	db	10
   538  007E1E  00                 	db	0
   539  007E1F                     STR_7:
   540  007E1F  45                 	db	69	;'E'
   541  007E20  73                 	db	115	;'s'
   542  007E21  74                 	db	116	;'t'
   543  007E22  61                 	db	97	;'a'
   544  007E23  64                 	db	100	;'d'
   545  007E24  6F                 	db	111	;'o'
   546  007E25  20                 	db	32
   547  007E26  70                 	db	112	;'p'
   548  007E27  72                 	db	114	;'r'
   549  007E28  6F                 	db	111	;'o'
   550  007E29  63                 	db	99	;'c'
   551  007E2A  65                 	db	101	;'e'
   552  007E2B  73                 	db	115	;'s'
   553  007E2C  6F                 	db	111	;'o'
   554  007E2D  3A                 	db	58	;':'
   555  007E2E  20                 	db	32
   556  007E2F  0A                 	db	10
   557  007E30  00                 	db	0
   558  007E31                     STR_33:
   559  007E31  49                 	db	73	;'I'
   560  007E32  6E                 	db	110	;'n'
   561  007E33  69                 	db	105	;'i'
   562  007E34  74                 	db	116	;'t'
   563  007E35  20                 	db	32
   564  007E36  41                 	db	65	;'A'
   565  007E37  75                 	db	117	;'u'
   566  007E38  74                 	db	116	;'t'
   567  007E39  6F                 	db	111	;'o'
   568  007E3A  43                 	db	67	;'C'
   569  007E3B  61                 	db	97	;'a'
   570  007E3C  6C                 	db	108	;'l'
   571  007E3D  69                 	db	105	;'i'
   572  007E3E  62                 	db	98	;'b'
   573  007E3F  3F                 	db	63	;'?'
   574  007E40  20                 	db	32
   575  007E41  0A                 	db	10
   576  007E42  00                 	db	0
   577  007E43                     STR_32:
   578  007E43  47                 	db	71	;'G'
   579  007E44  75                 	db	117	;'u'
   580  007E45  61                 	db	97	;'a'
   581  007E46  72                 	db	114	;'r'
   582  007E47  64                 	db	100	;'d'
   583  007E48  61                 	db	97	;'a'
   584  007E49  72                 	db	114	;'r'
   585  007E4A  20                 	db	32
   586  007E4B  43                 	db	67	;'C'
   587  007E4C  61                 	db	97	;'a'
   588  007E4D  6D                 	db	109	;'m'
   589  007E4E  62                 	db	98	;'b'
   590  007E4F  69                 	db	105	;'i'
   591  007E50  6F                 	db	111	;'o'
   592  007E51  3F                 	db	63	;'?'
   593  007E52  20                 	db	32
   594  007E53  0A                 	db	10
   595  007E54  00                 	db	0
   596  007E55                     STR_10:
   597  007E55  56                 	db	86	;'V'
   598  007E56  61                 	db	97	;'a'
   599  007E57  6C                 	db	108	;'l'
   600  007E58  6F                 	db	111	;'o'
   601  007E59  72                 	db	114	;'r'
   602  007E5A  20                 	db	32
   603  007E5B  70                 	db	112	;'p'
   604  007E5C  6F                 	db	111	;'o'
   605  007E5D  72                 	db	114	;'r'
   606  007E5E  20                 	db	32
   607  007E5F  43                 	db	67	;'C'
   608  007E60  6F                 	db	111	;'o'
   609  007E61  72                 	db	114	;'r'
   610  007E62  74                 	db	116	;'t'
   611  007E63  65                 	db	101	;'e'
   612  007E64  3A                 	db	58	;':'
   613  007E65  0A                 	db	10
   614  007E66  00                 	db	0
   615  007E67                     STR_27:
   616  007E67  4D                 	db	77	;'M'
   617  007E68  6F                 	db	111	;'o'
   618  007E69  64                 	db	100	;'d'
   619  007E6A  6F                 	db	111	;'o'
   620  007E6B  20                 	db	32
   621  007E6C  43                 	db	67	;'C'
   622  007E6D  6F                 	db	111	;'o'
   623  007E6E  6E                 	db	110	;'n'
   624  007E6F  66                 	db	102	;'f'
   625  007E70  69                 	db	105	;'i'
   626  007E71  67                 	db	103	;'g'
   627  007E72  75                 	db	117	;'u'
   628  007E73  72                 	db	114	;'r'
   629  007E74  61                 	db	97	;'a'
   630  007E75  72                 	db	114	;'r'
   631  007E76  3A                 	db	58	;':'
   632  007E77  0A                 	db	10
   633  007E78  00                 	db	0
   634  007E79                     STR_12:
   635  007E79  43                 	db	67	;'C'
   636  007E7A  61                 	db	97	;'a'
   637  007E7B  6E                 	db	110	;'n'
   638  007E7C  74                 	db	116	;'t'
   639  007E7D  69                 	db	105	;'i'
   640  007E7E  64                 	db	100	;'d'
   641  007E7F  61                 	db	97	;'a'
   642  007E80  64                 	db	100	;'d'
   643  007E81  20                 	db	32
   644  007E82  43                 	db	67	;'C'
   645  007E83  6F                 	db	111	;'o'
   646  007E84  72                 	db	114	;'r'
   647  007E85  74                 	db	116	;'t'
   648  007E86  65                 	db	101	;'e'
   649  007E87  73                 	db	115	;'s'
   650  007E88  3A                 	db	58	;':'
   651  007E89  0A                 	db	10
   652  007E8A  00                 	db	0
   653  007E8B                     STR_30:
   654  007E8B  49                 	db	73	;'I'
   655  007E8C  6E                 	db	110	;'n'
   656  007E8D  69                 	db	105	;'i'
   657  007E8E  63                 	db	99	;'c'
   658  007E8F  69                 	db	105	;'i'
   659  007E90  61                 	db	97	;'a'
   660  007E91  72                 	db	114	;'r'
   661  007E92  20                 	db	32
   662  007E93  50                 	db	80	;'P'
   663  007E94  72                 	db	114	;'r'
   664  007E95  6F                 	db	111	;'o'
   665  007E96  63                 	db	99	;'c'
   666  007E97  65                 	db	101	;'e'
   667  007E98  73                 	db	115	;'s'
   668  007E99  6F                 	db	111	;'o'
   669  007E9A  3F                 	db	63	;'?'
   670  007E9B  0A                 	db	10
   671  007E9C  00                 	db	0
   672  007E9D                     STR_31:
   673  007E9D  44                 	db	68	;'D'
   674  007E9E  65                 	db	101	;'e'
   675  007E9F  74                 	db	116	;'t'
   676  007EA0  65                 	db	101	;'e'
   677  007EA1  6E                 	db	110	;'n'
   678  007EA2  65                 	db	101	;'e'
   679  007EA3  72                 	db	114	;'r'
   680  007EA4  20                 	db	32
   681  007EA5  50                 	db	80	;'P'
   682  007EA6  72                 	db	114	;'r'
   683  007EA7  6F                 	db	111	;'o'
   684  007EA8  63                 	db	99	;'c'
   685  007EA9  65                 	db	101	;'e'
   686  007EAA  73                 	db	115	;'s'
   687  007EAB  6F                 	db	111	;'o'
   688  007EAC  3F                 	db	63	;'?'
   689  007EAD  0A                 	db	10
   690  007EAE  00                 	db	0
   691  007EAF                     STR_37:
   692  007EAF  41                 	db	65	;'A'
   693  007EB0  75                 	db	117	;'u'
   694  007EB1  74                 	db	116	;'t'
   695  007EB2  6F                 	db	111	;'o'
   696  007EB3  63                 	db	99	;'c'
   697  007EB4  61                 	db	97	;'a'
   698  007EB5  6C                 	db	108	;'l'
   699  007EB6  69                 	db	105	;'i'
   700  007EB7  62                 	db	98	;'b'
   701  007EB8  20                 	db	32
   702  007EB9  75                 	db	117	;'u'
   703  007EBA  73                 	db	115	;'s'
   704  007EBB  61                 	db	97	;'a'
   705  007EBC  6E                 	db	110	;'n'
   706  007EBD  64                 	db	100	;'d'
   707  007EBE  6F                 	db	111	;'o'
   708  007EBF  0A                 	db	10
   709  007EC0  00                 	db	0
   710  007EC1                     STR_1:
   711  007EC1  20                 	db	32
   712  007EC2  25                 	db	37
   713  007EC3  75                 	db	117	;'u'
   714  007EC4  25                 	db	37
   715  007EC5  75                 	db	117	;'u'
   716  007EC6  25                 	db	37
   717  007EC7  75                 	db	117	;'u'
   718  007EC8  2E                 	db	46
   719  007EC9  25                 	db	37
   720  007ECA  75                 	db	117	;'u'
   721  007ECB  25                 	db	37
   722  007ECC  75                 	db	117	;'u'
   723  007ECD  25                 	db	37
   724  007ECE  63                 	db	99	;'c'
   725  007ECF  25                 	db	37
   726  007ED0  75                 	db	117	;'u'
   727  007ED1  20                 	db	32
   728  007ED2  00                 	db	0
   729  007ED3                     STR_2:
   730  007ED3  20                 	db	32
   731  007ED4  25                 	db	37
   732  007ED5  75                 	db	117	;'u'
   733  007ED6  25                 	db	37
   734  007ED7  75                 	db	117	;'u'
   735  007ED8  25                 	db	37
   736  007ED9  75                 	db	117	;'u'
   737  007EDA  2E                 	db	46
   738  007EDB  25                 	db	37
   739  007EDC  75                 	db	117	;'u'
   740  007EDD  25                 	db	37
   741  007EDE  63                 	db	99	;'c'
   742  007EDF  25                 	db	37
   743  007EE0  75                 	db	117	;'u'
   744  007EE1  25                 	db	37
   745  007EE2  75                 	db	117	;'u'
   746  007EE3  20                 	db	32
   747  007EE4  00                 	db	0
   748  007EE5                     STR_4:
   749  007EE5  20                 	db	32
   750  007EE6  25                 	db	37
   751  007EE7  75                 	db	117	;'u'
   752  007EE8  25                 	db	37
   753  007EE9  75                 	db	117	;'u'
   754  007EEA  25                 	db	37
   755  007EEB  63                 	db	99	;'c'
   756  007EEC  25                 	db	37
   757  007EED  75                 	db	117	;'u'
   758  007EEE  2E                 	db	46
   759  007EEF  25                 	db	37
   760  007EF0  75                 	db	117	;'u'
   761  007EF1  25                 	db	37
   762  007EF2  75                 	db	117	;'u'
   763  007EF3  25                 	db	37
   764  007EF4  75                 	db	117	;'u'
   765  007EF5  20                 	db	32
   766  007EF6  00                 	db	0
   767  007EF7                     STR_5:
   768  007EF7  20                 	db	32
   769  007EF8  25                 	db	37
   770  007EF9  75                 	db	117	;'u'
   771  007EFA  25                 	db	37
   772  007EFB  63                 	db	99	;'c'
   773  007EFC  25                 	db	37
   774  007EFD  75                 	db	117	;'u'
   775  007EFE  25                 	db	37
   776  007EFF  75                 	db	117	;'u'
   777  007F00  2E                 	db	46
   778  007F01  25                 	db	37
   779  007F02  75                 	db	117	;'u'
   780  007F03  25                 	db	37
   781  007F04  75                 	db	117	;'u'
   782  007F05  25                 	db	37
   783  007F06  75                 	db	117	;'u'
   784  007F07  20                 	db	32
   785  007F08  00                 	db	0
   786  007F09                     STR_6:
   787  007F09  20                 	db	32
   788  007F0A  25                 	db	37
   789  007F0B  63                 	db	99	;'c'
   790  007F0C  25                 	db	37
   791  007F0D  75                 	db	117	;'u'
   792  007F0E  25                 	db	37
   793  007F0F  75                 	db	117	;'u'
   794  007F10  25                 	db	37
   795  007F11  75                 	db	117	;'u'
   796  007F12  2E                 	db	46
   797  007F13  25                 	db	37
   798  007F14  75                 	db	117	;'u'
   799  007F15  25                 	db	37
   800  007F16  75                 	db	117	;'u'
   801  007F17  25                 	db	37
   802  007F18  75                 	db	117	;'u'
   803  007F19  20                 	db	32
   804  007F1A  00                 	db	0
   805  007F1B                     STR_3:
   806  007F1B  20                 	db	32
   807  007F1C  25                 	db	37
   808  007F1D  75                 	db	117	;'u'
   809  007F1E  25                 	db	37
   810  007F1F  75                 	db	117	;'u'
   811  007F20  25                 	db	37
   812  007F21  75                 	db	117	;'u'
   813  007F22  2E                 	db	46
   814  007F23  25                 	db	37
   815  007F24  63                 	db	99	;'c'
   816  007F25  25                 	db	37
   817  007F26  75                 	db	117	;'u'
   818  007F27  25                 	db	37
   819  007F28  75                 	db	117	;'u'
   820  007F29  25                 	db	37
   821  007F2A  75                 	db	117	;'u'
   822  007F2B  20                 	db	32
   823  007F2C  00                 	db	0
   824  007F2D                     STR_38:
   825  007F2D  20                 	db	32
   826  007F2E  20                 	db	32
   827  007F2F  20                 	db	32
   828  007F30  20                 	db	32
   829  007F31  20                 	db	32
   830  007F32  20                 	db	32
   831  007F33  20                 	db	32
   832  007F34  31                 	db	49	;'1'
   833  007F35  20                 	db	32
   834  007F36  6B                 	db	107	;'k'
   835  007F37  67                 	db	103	;'g'
   836  007F38  20                 	db	32
   837  007F39  20                 	db	32
   838  007F3A  20                 	db	32
   839  007F3B  20                 	db	32
   840  007F3C  20                 	db	32
   841  007F3D  00                 	db	0
   842  007F3E                     STR_40:
   843  007F3E  20                 	db	32
   844  007F3F  20                 	db	32
   845  007F40  20                 	db	32
   846  007F41  20                 	db	32
   847  007F42  20                 	db	32
   848  007F43  30                 	db	48	;'0'
   849  007F44  2E                 	db	46
   850  007F45  35                 	db	53	;'5'
   851  007F46  20                 	db	32
   852  007F47  6B                 	db	107	;'k'
   853  007F48  67                 	db	103	;'g'
   854  007F49  20                 	db	32
   855  007F4A  20                 	db	32
   856  007F4B  20                 	db	32
   857  007F4C  20                 	db	32
   858  007F4D  20                 	db	32
   859  007F4E  00                 	db	0
   860  007F4F                     STR_42:
   861  007F4F  20                 	db	32
   862  007F50  20                 	db	32
   863  007F51  20                 	db	32
   864  007F52  20                 	db	32
   865  007F53  30                 	db	48	;'0'
   866  007F54  2E                 	db	46
   867  007F55  32                 	db	50	;'2'
   868  007F56  35                 	db	53	;'5'
   869  007F57  20                 	db	32
   870  007F58  6B                 	db	107	;'k'
   871  007F59  67                 	db	103	;'g'
   872  007F5A  20                 	db	32
   873  007F5B  20                 	db	32
   874  007F5C  20                 	db	32
   875  007F5D  20                 	db	32
   876  007F5E  20                 	db	32
   877  007F5F  00                 	db	0
   878  007F60                     STR_26:
   879  007F60  20                 	db	32
   880  007F61  20                 	db	32
   881  007F62  20                 	db	32
   882  007F63  20                 	db	32
   883  007F64  20                 	db	32
   884  007F65  45                 	db	69	;'E'
   885  007F66  72                 	db	114	;'r'
   886  007F67  72                 	db	114	;'r'
   887  007F68  6F                 	db	111	;'o'
   888  007F69  6E                 	db	110	;'n'
   889  007F6A  65                 	db	101	;'e'
   890  007F6B  61                 	db	97	;'a'
   891  007F6C  20                 	db	32
   892  007F6D  20                 	db	32
   893  007F6E  20                 	db	32
   894  007F6F  20                 	db	32
   895  007F70  00                 	db	0
   896  007F71                     STR_28:
   897  007F71  20                 	db	32
   898  007F72  20                 	db	32
   899  007F73  20                 	db	32
   900  007F74  20                 	db	32
   901  007F75  49                 	db	73	;'I'
   902  007F76  6E                 	db	110	;'n'
   903  007F77  69                 	db	105	;'i'
   904  007F78  63                 	db	99	;'c'
   905  007F79  69                 	db	105	;'i'
   906  007F7A  61                 	db	97	;'a'
   907  007F7B  64                 	db	100	;'d'
   908  007F7C  6F                 	db	111	;'o'
   909  007F7D  20                 	db	32
   910  007F7E  20                 	db	32
   911  007F7F  20                 	db	32
   912  007F80  20                 	db	32
   913  007F81  00                 	db	0
   914  007F82                     STR_9:
   915  007F82  20                 	db	32
   916  007F83  20                 	db	32
   917  007F84  20                 	db	32
   918  007F85  20                 	db	32
   919  007F86  44                 	db	68	;'D'
   920  007F87  65                 	db	101	;'e'
   921  007F88  74                 	db	116	;'t'
   922  007F89  65                 	db	101	;'e'
   923  007F8A  6E                 	db	110	;'n'
   924  007F8B  69                 	db	105	;'i'
   925  007F8C  64                 	db	100	;'d'
   926  007F8D  6F                 	db	111	;'o'
   927  007F8E  20                 	db	32
   928  007F8F  20                 	db	32
   929  007F90  20                 	db	32
   930  007F91  20                 	db	32
   931  007F92  00                 	db	0
   932  007F93                     STR_29:
   933  007F93  20                 	db	32
   934  007F94  20                 	db	32
   935  007F95  20                 	db	32
   936  007F96  46                 	db	70	;'F'
   937  007F97  69                 	db	105	;'i'
   938  007F98  6E                 	db	110	;'n'
   939  007F99  61                 	db	97	;'a'
   940  007F9A  6C                 	db	108	;'l'
   941  007F9B  69                 	db	105	;'i'
   942  007F9C  7A                 	db	122	;'z'
   943  007F9D  61                 	db	97	;'a'
   944  007F9E  64                 	db	100	;'d'
   945  007F9F  6F                 	db	111	;'o'
   946  007FA0  20                 	db	32
   947  007FA1  20                 	db	32
   948  007FA2  20                 	db	32
   949  007FA3  00                 	db	0
   950  007FA4                     STR_13:
   951  007FA4  20                 	db	32
   952  007FA5  20                 	db	32
   953  007FA6  20                 	db	32
   954  007FA7  20                 	db	32
   955  007FA8  20                 	db	32
   956  007FA9  20                 	db	32
   957  007FAA  25                 	db	37
   958  007FAB  64                 	db	100	;'d'
   959  007FAC  20                 	db	32
   960  007FAD  20                 	db	32
   961  007FAE  20                 	db	32
   962  007FAF  20                 	db	32
   963  007FB0  20                 	db	32
   964  007FB1  20                 	db	32
   965  007FB2  20                 	db	32
   966  007FB3  00                 	db	0
   967  007FB4                     STR_8:
   968  007FB4  20                 	db	32
   969  007FB5  20                 	db	32
   970  007FB6  20                 	db	32
   971  007FB7  25                 	db	37
   972  007FB8  64                 	db	100	;'d'
   973  007FB9  20                 	db	32
   974  007FBA  2F                 	db	47
   975  007FBB  20                 	db	32
   976  007FBC  25                 	db	37
   977  007FBD  64                 	db	100	;'d'
   978  007FBE  20                 	db	32
   979  007FBF  20                 	db	32
   980  007FC0  20                 	db	32
   981  007FC1  20                 	db	32
   982  007FC2  00                 	db	0
   983  007FC3                     STR_11:
   984  007FC3  20                 	db	32
   985  007FC4  20                 	db	32
   986  007FC5  20                 	db	32
   987  007FC6  25                 	db	37
   988  007FC7  33                 	db	51	;'3'
   989  007FC8  2E                 	db	46
   990  007FC9  33                 	db	51	;'3'
   991  007FCA  66                 	db	102	;'f'
   992  007FCB  20                 	db	32
   993  007FCC  6B                 	db	107	;'k'
   994  007FCD  67                 	db	103	;'g'
   995  007FCE  20                 	db	32
   996  007FCF  20                 	db	32
   997  007FD0  20                 	db	32
   998  007FD1  00                 	db	0
   999  007FD2                     STR_15:
  1000  007FD2  20                 	db	32
  1001  007FD3  20                 	db	32
  1002  007FD4  20                 	db	32
  1003  007FD5  25                 	db	37
  1004  007FD6  33                 	db	51	;'3'
  1005  007FD7  2E                 	db	46
  1006  007FD8  33                 	db	51	;'3'
  1007  007FD9  66                 	db	102	;'f'
  1008  007FDA  20                 	db	32
  1009  007FDB  6D                 	db	109	;'m'
  1010  007FDC  6D                 	db	109	;'m'
  1011  007FDD  20                 	db	32
  1012  007FDE  20                 	db	32
  1013  007FDF  20                 	db	32
  1014  007FE0  00                 	db	0
  1015  007FE1                     STR_17:
  1016  007FE1  20                 	db	32
  1017  007FE2  20                 	db	32
  1018  007FE3  25                 	db	37
  1019  007FE4  33                 	db	51	;'3'
  1020  007FE5  2E                 	db	46
  1021  007FE6  33                 	db	51	;'3'
  1022  007FE7  66                 	db	102	;'f'
  1023  007FE8  20                 	db	32
  1024  007FE9  6B                 	db	107	;'k'
  1025  007FEA  67                 	db	103	;'g'
  1026  007FEB  2F                 	db	47
  1027  007FEC  73                 	db	115	;'s'
  1028  007FED  20                 	db	32
  1029  007FEE  20                 	db	32
  1030  007FEF  00                 	db	0
  1031  007FF0                     STR_19:
  1032  007FF0  6B                 	db	107	;'k'
  1033  007FF1  67                 	db	103	;'g'
  1034  007FF2  20                 	db	32
  1035  007FF3  20                 	db	32
  1036  007FF4  20                 	db	32
  1037  007FF5  20                 	db	32
  1038  007FF6  00                 	db	0
  1039  007FF7                     STR_23:
  1040  007FF7  6D                 	db	109	;'m'
  1041  007FF8  6D                 	db	109	;'m'
  1042  007FF9  20                 	db	32
  1043  007FFA  20                 	db	32
  1044  007FFB  20                 	db	32
  1045  007FFC  20                 	db	32
  1046  007FFD  00                 	db	0
  1047  0000                     
  1048                           ; #config settings
  1049  007FFE  00                 	db	0	; dummy byte at the end
  1050  0000                     
  1051                           	psect	cinit
  1052  005C06                     __pcinit:
  1053                           	opt stack 0
  1054  005C06                     start_initialization:
  1055                           	opt stack 0
  1056  005C06                     __initialization:
  1057                           	opt stack 0
  1058                           
  1059                           ; Initialize objects allocated to BANK1 (41 bytes)
  1060                           ; load TBLPTR registers with __pidataBANK1
  1061  005C06  0EEA               	movlw	low __pidataBANK1
  1062  005C08  6EF6               	movwf	tblptrl,c
  1063  005C0A  0E6A               	movlw	high __pidataBANK1
  1064  005C0C  6EF7               	movwf	tblptrh,c
  1065  005C0E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1066  005C10  6EF8               	movwf	tblptru,c
  1067  005C12  EE01  F077         	lfsr	0,__pdataBANK1
  1068  005C16  EE10 F029          	lfsr	1,41
  1069  005C1A                     copy_data0:
  1070  005C1A  0009               	tblrd		*+
  1071  005C1C  CFF5 FFEE          	movff	tablat,postinc0
  1072  005C20  50E5               	movf	postdec1,w,c
  1073  005C22  50E1               	movf	fsr1l,w,c
  1074  005C24  E1FA               	bnz	copy_data0
  1075                           
  1076                           ; Initialize objects allocated to BANK0 (21 bytes)
  1077                           ; load TBLPTR registers with __pidataBANK0
  1078  005C26  0E0C               	movlw	low __pidataBANK0
  1079  005C28  6EF6               	movwf	tblptrl,c
  1080  005C2A  0E6C               	movlw	high __pidataBANK0
  1081  005C2C  6EF7               	movwf	tblptrh,c
  1082  005C2E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1083  005C30  6EF8               	movwf	tblptru,c
  1084  005C32  EE00  F0A5         	lfsr	0,__pdataBANK0
  1085  005C36  EE10 F015          	lfsr	1,21
  1086  005C3A                     copy_data1:
  1087  005C3A  0009               	tblrd		*+
  1088  005C3C  CFF5 FFEE          	movff	tablat,postinc0
  1089  005C40  50E5               	movf	postdec1,w,c
  1090  005C42  50E1               	movf	fsr1l,w,c
  1091  005C44  E1FA               	bnz	copy_data1
  1092                           
  1093                           ; Initialize objects allocated to COMRAM (13 bytes)
  1094                           ; load TBLPTR registers with __pidataCOMRAM
  1095  005C46  0E4C               	movlw	low __pidataCOMRAM
  1096  005C48  6EF6               	movwf	tblptrl,c
  1097  005C4A  0E6C               	movlw	high __pidataCOMRAM
  1098  005C4C  6EF7               	movwf	tblptrh,c
  1099  005C4E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1100  005C50  6EF8               	movwf	tblptru,c
  1101  005C52  EE00  F043         	lfsr	0,__pdataCOMRAM
  1102  005C56  EE10 F00D          	lfsr	1,13
  1103  005C5A                     copy_data2:
  1104  005C5A  0009               	tblrd		*+
  1105  005C5C  CFF5 FFEE          	movff	tablat,postinc0
  1106  005C60  50E5               	movf	postdec1,w,c
  1107  005C62  50E1               	movf	fsr1l,w,c
  1108  005C64  E1FA               	bnz	copy_data2
  1109                           
  1110                           ; Clear objects allocated to BANK1 (36 bytes)
  1111  005C66  EE01  F0A0         	lfsr	0,__pbssBANK1
  1112  005C6A  0E24               	movlw	36
  1113  005C6C                     clear_0:
  1114  005C6C  6AEE               	clrf	postinc0,c
  1115  005C6E  06E8               	decf	wreg,f,c
  1116  005C70  E1FD               	bnz	clear_0
  1117                           
  1118                           ; Clear objects allocated to BANK0 (18 bytes)
  1119  005C72  EE00  F0BA         	lfsr	0,__pbssBANK0
  1120  005C76  0E12               	movlw	18
  1121  005C78                     clear_1:
  1122  005C78  6AEE               	clrf	postinc0,c
  1123  005C7A  06E8               	decf	wreg,f,c
  1124  005C7C  E1FD               	bnz	clear_1
  1125                           
  1126                           ; Clear objects allocated to COMRAM (24 bytes)
  1127  005C7E  EE00  F02B         	lfsr	0,__pbssCOMRAM
  1128  005C82  0E18               	movlw	24
  1129  005C84                     clear_2:
  1130  005C84  6AEE               	clrf	postinc0,c
  1131  005C86  06E8               	decf	wreg,f,c
  1132  005C88  E1FD               	bnz	clear_2
  1133  005C8A                     end_of_initialization:
  1134                           	opt stack 0
  1135  005C8A                     __end_of__initialization:
  1136                           	opt stack 0
  1137  005C8A  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1138  005C8C  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1139  005C8E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1140  005C90  6EF8               	movwf	tblptru,c
  1141  005C92  0100               	movlb	0
  1142  005C94  EF9B  F033         	goto	_main	;jump to C main() function
  1143                           tblptru	equ	0xFF8
  1144                           tblptrh	equ	0xFF7
  1145                           tblptrl	equ	0xFF6
  1146                           tablat	equ	0xFF5
  1147                           postinc0	equ	0xFEE
  1148                           wreg	equ	0xFE8
  1149                           postdec1	equ	0xFE5
  1150                           fsr1l	equ	0xFE1
  1151                           
  1152                           	psect	bssCOMRAM
  1153  00002B                     __pbssCOMRAM:
  1154                           	opt stack 0
  1155  00002B                     _processTimer:
  1156                           	opt stack 0
  1157  00002B                     	ds	4
  1158  00002F                     _calFactor:
  1159                           	opt stack 0
  1160  00002F                     	ds	3
  1161  000032                     _questKMT:
  1162                           	opt stack 0
  1163  000032                     	ds	3
  1164  000035                     _processState:
  1165                           	opt stack 0
  1166  000035                     	ds	2
  1167  000037                     _DOWNisLP:
  1168                           	opt stack 0
  1169  000037                     	ds	1
  1170  000038                     _FC1securLock:
  1171                           	opt stack 0
  1172  000038                     	ds	1
  1173  000039                     _FC2securLock:
  1174                           	opt stack 0
  1175  000039                     	ds	1
  1176  00003A                     _ProcessStarted:
  1177                           	opt stack 0
  1178  00003A                     	ds	1
  1179  00003B                     _RETROisLP:
  1180                           	opt stack 0
  1181  00003B                     	ds	1
  1182  00003C                     _UPisLP:
  1183                           	opt stack 0
  1184  00003C                     	ds	1
  1185  00003D                     _holdFC1cont:
  1186                           	opt stack 0
  1187  00003D                     	ds	1
  1188  00003E                     _holdFC2cont:
  1189                           	opt stack 0
  1190  00003E                     	ds	1
  1191  00003F                     _lastSttFC1:
  1192                           	opt stack 0
  1193  00003F                     	ds	1
  1194  000040                     _lastSttFC2:
  1195                           	opt stack 0
  1196  000040                     	ds	1
  1197  000041                     _screen_calibVelRes:
  1198                           	opt stack 0
  1199  000041                     	ds	1
  1200  000042                     _selKMT:
  1201                           	opt stack 0
  1202  000042                     	ds	1
  1203                           tblptru	equ	0xFF8
  1204                           tblptrh	equ	0xFF7
  1205                           tblptrl	equ	0xFF6
  1206                           tablat	equ	0xFF5
  1207                           postinc0	equ	0xFEE
  1208                           wreg	equ	0xFE8
  1209                           postdec1	equ	0xFE5
  1210                           fsr1l	equ	0xFE1
  1211                           
  1212                           	psect	dataCOMRAM
  1213  000043                     __pdataCOMRAM:
  1214                           	opt stack 0
  1215  000043                     _timeDOWN:
  1216                           	opt stack 0
  1217  000043                     	ds	4
  1218  000047                     _pi:
  1219                           	opt stack 0
  1220  000047                     	ds	3
  1221  00004A                     _tempkgXcorte:
  1222                           	opt stack 0
  1223  00004A                     	ds	3
  1224  00004D                     _timsXcorte:
  1225                           	opt stack 0
  1226  00004D                     	ds	3
  1227                           tblptru	equ	0xFF8
  1228                           tblptrh	equ	0xFF7
  1229                           tblptrl	equ	0xFF6
  1230                           tablat	equ	0xFF5
  1231                           postinc0	equ	0xFEE
  1232                           wreg	equ	0xFE8
  1233                           postdec1	equ	0xFE5
  1234                           fsr1l	equ	0xFE1
  1235                           
  1236                           	psect	bssBANK0
  1237  0000BA                     __pbssBANK0:
  1238                           	opt stack 0
  1239  0000BA                     _chanValChar:
  1240                           	opt stack 0
  1241  0000BA                     	ds	6
  1242  0000C0                     _contra:
  1243                           	opt stack 0
  1244  0000C0                     	ds	4
  1245  0000C4                     _fData:
  1246                           	opt stack 0
  1247  0000C4                     	ds	3
  1248  0000C7                     _i16Data:
  1249                           	opt stack 0
  1250  0000C7                     	ds	2
  1251  0000C9                     _bladeIsUP:
  1252                           	opt stack 0
  1253  0000C9                     	ds	1
  1254  0000CA                     _ie:
  1255                           	opt stack 0
  1256  0000CA                     	ds	1
  1257  0000CB                     _tempLastScreen:
  1258                           	opt stack 0
  1259  0000CB                     	ds	1
  1260                           tblptru	equ	0xFF8
  1261                           tblptrh	equ	0xFF7
  1262                           tblptrl	equ	0xFF6
  1263                           tablat	equ	0xFF5
  1264                           postinc0	equ	0xFEE
  1265                           wreg	equ	0xFE8
  1266                           postdec1	equ	0xFE5
  1267                           fsr1l	equ	0xFE1
  1268                           
  1269                           	psect	dataBANK0
  1270  0000A5                     __pdataBANK0:
  1271                           	opt stack 0
  1272  0000A5                     lcd_init@F7567:
  1273                           	opt stack 0
  1274  0000A5                     	ds	4
  1275  0000A9                     _diamTubo:
  1276                           	opt stack 0
  1277  0000A9                     	ds	3
  1278  0000AC                     _kgXcorte:
  1279                           	opt stack 0
  1280  0000AC                     	ds	3
  1281  0000AF                     _temptiXcorte:
  1282                           	opt stack 0
  1283  0000AF                     	ds	3
  1284  0000B2                     _tiXcorte:
  1285                           	opt stack 0
  1286  0000B2                     	ds	3
  1287  0000B5                     _velocidadMasa:
  1288                           	opt stack 0
  1289  0000B5                     	ds	3
  1290  0000B8                     _numCortes:
  1291                           	opt stack 0
  1292  0000B8                     	ds	2
  1293                           tblptru	equ	0xFF8
  1294                           tblptrh	equ	0xFF7
  1295                           tblptrl	equ	0xFF6
  1296                           tablat	equ	0xFF5
  1297                           postinc0	equ	0xFEE
  1298                           wreg	equ	0xFE8
  1299                           postdec1	equ	0xFE5
  1300                           fsr1l	equ	0xFE1
  1301                           
  1302                           	psect	bssBANK1
  1303  0001A0                     __pbssBANK1:
  1304                           	opt stack 0
  1305  0001A0                     _chanValdig:
  1306                           	opt stack 0
  1307  0001A0                     	ds	6
  1308  0001A6                     _introducido:
  1309                           	opt stack 0
  1310  0001A6                     	ds	4
  1311  0001AA                     _passChar:
  1312                           	opt stack 0
  1313  0001AA                     	ds	4
  1314  0001AE                     _chanValf:
  1315                           	opt stack 0
  1316  0001AE                     	ds	3
  1317  0001B1                     _chanVals:
  1318                           	opt stack 0
  1319  0001B1                     	ds	2
  1320  0001B3                     _questSN:
  1321                           	opt stack 0
  1322  0001B3                     	ds	2
  1323  0001B5                     _DOWNsecurLock:
  1324                           	opt stack 0
  1325  0001B5                     	ds	1
  1326  0001B6                     _ENTERisLP:
  1327                           	opt stack 0
  1328  0001B6                     	ds	1
  1329  0001B7                     _ENTERsecurLock:
  1330                           	opt stack 0
  1331  0001B7                     	ds	1
  1332  0001B8                     _RETROsecurLock:
  1333                           	opt stack 0
  1334  0001B8                     	ds	1
  1335  0001B9                     _UPsecurLock:
  1336                           	opt stack 0
  1337  0001B9                     	ds	1
  1338  0001BA                     _actualScreen:
  1339                           	opt stack 0
  1340  0001BA                     	ds	1
  1341  0001BB                     _calibLevel:
  1342                           	opt stack 0
  1343  0001BB                     	ds	1
  1344  0001BC                     _fd:
  1345                           	opt stack 0
  1346  0001BC                     	ds	1
  1347  0001BD                     _holdDOWNcont:
  1348                           	opt stack 0
  1349  0001BD                     	ds	1
  1350  0001BE                     _holdENTERcont:
  1351                           	opt stack 0
  1352  0001BE                     	ds	1
  1353  0001BF                     _holdRETROcont:
  1354                           	opt stack 0
  1355  0001BF                     	ds	1
  1356  0001C0                     _holdUPcont:
  1357                           	opt stack 0
  1358  0001C0                     	ds	1
  1359  0001C1                     _menuSection:
  1360                           	opt stack 0
  1361  0001C1                     	ds	1
  1362  0001C2                     _passSection:
  1363                           	opt stack 0
  1364  0001C2                     	ds	1
  1365  0001C3                     _selSN:
  1366                           	opt stack 0
  1367  0001C3                     	ds	1
  1368                           tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           postinc0	equ	0xFEE
  1373                           wreg	equ	0xFE8
  1374                           postdec1	equ	0xFE5
  1375                           fsr1l	equ	0xFE1
  1376                           
  1377                           	psect	dataBANK1
  1378  000177                     __pdataBANK1:
  1379                           	opt stack 0
  1380  000177                     _exp10:
  1381                           	opt stack 0
  1382  000177                     	ds	24
  1383  00018F                     _tempVelocidadMasa3:
  1384                           	opt stack 0
  1385  00018F                     	ds	3
  1386  000192                     _tempNumCortes:
  1387                           	opt stack 0
  1388  000192                     	ds	2
  1389  000194                     _chanValSection:
  1390                           	opt stack 0
  1391  000194                     	ds	1
  1392  000195                     _flech:
  1393                           	opt stack 0
  1394  000195                     	ds	1
  1395  000196                     _lastSttDOWN:
  1396                           	opt stack 0
  1397  000196                     	ds	1
  1398  000197                     _lastSttENTER:
  1399                           	opt stack 0
  1400  000197                     	ds	1
  1401  000198                     _lastSttRETRO:
  1402                           	opt stack 0
  1403  000198                     	ds	1
  1404  000199                     _lastSttUP:
  1405                           	opt stack 0
  1406  000199                     	ds	1
  1407  00019A                     _tempVelocidadMasa1:
  1408                           	opt stack 0
  1409  00019A                     	ds	3
  1410  00019D                     _tempVelocidadMasa2:
  1411                           	opt stack 0
  1412  00019D                     	ds	3
  1413                           tblptru	equ	0xFF8
  1414                           tblptrh	equ	0xFF7
  1415                           tblptrl	equ	0xFF6
  1416                           tablat	equ	0xFF5
  1417                           postinc0	equ	0xFEE
  1418                           wreg	equ	0xFE8
  1419                           postdec1	equ	0xFE5
  1420                           fsr1l	equ	0xFE1
  1421                           
  1422                           	psect	cstackBANK1
  1423  000100                     __pcstackBANK1:
  1424                           	opt stack 0
  1425  000100                     ??_isdigit:
  1426  000100                     ??_lcd_read_4bits:
  1427  000100                     ??_checkPass:
  1428  000100                     ??_chanValDigUP:
  1429  000100                     ??_chanValDigDOWN:
  1430  000100                     ?___awmod:
  1431                           	opt stack 0
  1432  000100                     ?___ftpack:
  1433                           	opt stack 0
  1434  000100                     ?___ftneg:
  1435                           	opt stack 0
  1436  000100                     ?__tdiv_to_l_:
  1437                           	opt stack 0
  1438  000100                     ?__div_to_l_:
  1439                           	opt stack 0
  1440  000100                     ?___lmul:
  1441                           	opt stack 0
  1442  000100                     ?___aldiv:
  1443                           	opt stack 0
  1444  000100                     ?___lldiv:
  1445                           	opt stack 0
  1446  000100                     _lcd_send_4bits$1688:
  1447                           	opt stack 0
  1448  000100                     writeEEPROM@data:
  1449                           	opt stack 0
  1450  000100                     readEEPROM@adr:
  1451                           	opt stack 0
  1452  000100                     setPWM2on@on:
  1453                           	opt stack 0
  1454  000100                     delay_ms@del:
  1455                           	opt stack 0
  1456  000100                     setPWM2duty@actuator:
  1457                           	opt stack 0
  1458  000100                     ___awmod@dividend:
  1459                           	opt stack 0
  1460  000100                     __div_to_l_@f1:
  1461                           	opt stack 0
  1462  000100                     ___ftpack@arg:
  1463                           	opt stack 0
  1464  000100                     __tdiv_to_l_@f1:
  1465                           	opt stack 0
  1466  000100                     ___ftge@ff1:
  1467                           	opt stack 0
  1468  000100                     ___ftneg@f1:
  1469                           	opt stack 0
  1470  000100                     ___lmul@multiplier:
  1471                           	opt stack 0
  1472  000100                     ___aldiv@dividend:
  1473                           	opt stack 0
  1474  000100                     ___lldiv@dividend:
  1475                           	opt stack 0
  1476                           
  1477                           ; 4 bytes @ 0x0
  1478  000100                     	ds	1
  1479  000101                     lcd_read_4bits@n:
  1480                           	opt stack 0
  1481  000101                     _lcd_send_4bits$1689:
  1482                           	opt stack 0
  1483  000101                     writeEEPROM@adr:
  1484                           	opt stack 0
  1485  000101                     _isdigit$2496:
  1486                           	opt stack 0
  1487                           
  1488                           ; 1 bytes @ 0x1
  1489  000101                     	ds	1
  1490  000102                     ??_delay_ms:
  1491  000102                     ??_setPWM2duty:
  1492  000102                     lcd_read_byte@low:
  1493                           	opt stack 0
  1494  000102                     _lcd_send_4bits$1690:
  1495                           	opt stack 0
  1496  000102                     isdigit@c:
  1497                           	opt stack 0
  1498  000102                     ___awmod@divisor:
  1499                           	opt stack 0
  1500                           
  1501                           ; 2 bytes @ 0x2
  1502  000102                     	ds	1
  1503  000103                     lcd_read_byte@high:
  1504                           	opt stack 0
  1505  000103                     _lcd_send_4bits$1691:
  1506                           	opt stack 0
  1507  000103                     ___ftpack@exp:
  1508                           	opt stack 0
  1509  000103                     delay_ms@i:
  1510                           	opt stack 0
  1511  000103                     __div_to_l_@f2:
  1512                           	opt stack 0
  1513  000103                     __tdiv_to_l_@f2:
  1514                           	opt stack 0
  1515  000103                     ___ftge@ff2:
  1516                           	opt stack 0
  1517                           
  1518                           ; 3 bytes @ 0x3
  1519  000103                     	ds	1
  1520  000104                     lcd_send_4bits@n:
  1521                           	opt stack 0
  1522  000104                     checkPass@passOK:
  1523                           	opt stack 0
  1524  000104                     ___awmod@counter:
  1525                           	opt stack 0
  1526  000104                     ___ftpack@sign:
  1527                           	opt stack 0
  1528  000104                     setPWM2duty@act:
  1529                           	opt stack 0
  1530  000104                     ___lmul@multiplicand:
  1531                           	opt stack 0
  1532  000104                     ___aldiv@divisor:
  1533                           	opt stack 0
  1534  000104                     ___lldiv@divisor:
  1535                           	opt stack 0
  1536                           
  1537                           ; 4 bytes @ 0x4
  1538  000104                     	ds	1
  1539  000105                     ??___ftpack:
  1540  000105                     lcd_send_byte@n:
  1541                           	opt stack 0
  1542  000105                     ___awmod@sign:
  1543                           	opt stack 0
  1544  000105                     checkPass@i:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0x5
  1548  000105                     	ds	1
  1549  000106                     ??__tdiv_to_l_:
  1550  000106                     ??_lcd_send_byte:
  1551  000106                     ??___ftge:
  1552  000106                     ?___awdiv:
  1553                           	opt stack 0
  1554  000106                     ___awdiv@dividend:
  1555                           	opt stack 0
  1556  000106                     __div_to_l_@quot:
  1557                           	opt stack 0
  1558                           
  1559                           ; 4 bytes @ 0x6
  1560  000106                     	ds	1
  1561  000107                     lcd_send_byte@address:
  1562                           	opt stack 0
  1563                           
  1564                           ; 1 bytes @ 0x7
  1565  000107                     	ds	1
  1566  000108                     ??_lcd_init:
  1567  000108                     ?___altoft:
  1568                           	opt stack 0
  1569  000108                     ?___lltoft:
  1570                           	opt stack 0
  1571  000108                     lcd_gotoxy@fila:
  1572                           	opt stack 0
  1573  000108                     ___aldiv@counter:
  1574                           	opt stack 0
  1575  000108                     ___awdiv@divisor:
  1576                           	opt stack 0
  1577  000108                     ___lmul@product:
  1578                           	opt stack 0
  1579  000108                     ___altoft@c:
  1580                           	opt stack 0
  1581  000108                     ___lldiv@quotient:
  1582                           	opt stack 0
  1583  000108                     ___lltoft@c:
  1584                           	opt stack 0
  1585                           
  1586                           ; 4 bytes @ 0x8
  1587  000108                     	ds	1
  1588  000109                     lcd_gotoxy@pos:
  1589                           	opt stack 0
  1590  000109                     ___aldiv@sign:
  1591                           	opt stack 0
  1592  000109                     lcd_init@LCD_INIT_STRING:
  1593                           	opt stack 0
  1594  000109                     __tdiv_to_l_@quot:
  1595                           	opt stack 0
  1596                           
  1597                           ; 4 bytes @ 0x9
  1598  000109                     	ds	1
  1599  00010A                     lcd_gotoxy@address:
  1600                           	opt stack 0
  1601  00010A                     ___awdiv@counter:
  1602                           	opt stack 0
  1603  00010A                     __div_to_l_@cntr:
  1604                           	opt stack 0
  1605  00010A                     ___aldiv@quotient:
  1606                           	opt stack 0
  1607                           
  1608                           ; 4 bytes @ 0xA
  1609  00010A                     	ds	1
  1610  00010B                     ??_lcd_putc:
  1611  00010B                     ___awdiv@sign:
  1612                           	opt stack 0
  1613  00010B                     __div_to_l_@exp1:
  1614                           	opt stack 0
  1615                           
  1616                           ; 1 bytes @ 0xB
  1617  00010B                     	ds	1
  1618  00010C                     ??___altoft:
  1619  00010C                     ??___lltoft:
  1620  00010C                     lcd_putc@cha:
  1621                           	opt stack 0
  1622  00010C                     ___lldiv@counter:
  1623                           	opt stack 0
  1624  00010C                     ___awdiv@quotient:
  1625                           	opt stack 0
  1626                           
  1627                           ; 2 bytes @ 0xC
  1628  00010C                     	ds	1
  1629  00010D                     ?___llmod:
  1630                           	opt stack 0
  1631  00010D                     lcd_init@i:
  1632                           	opt stack 0
  1633  00010D                     putch@val:
  1634                           	opt stack 0
  1635  00010D                     __tdiv_to_l_@cntr:
  1636                           	opt stack 0
  1637  00010D                     ___llmod@dividend:
  1638                           	opt stack 0
  1639                           
  1640                           ; 4 bytes @ 0xD
  1641  00010D                     	ds	1
  1642  00010E                     ?___wmul:
  1643                           	opt stack 0
  1644  00010E                     __tdiv_to_l_@exp1:
  1645                           	opt stack 0
  1646  00010E                     ___wmul@multiplier:
  1647                           	opt stack 0
  1648                           
  1649                           ; 2 bytes @ 0xE
  1650  00010E                     	ds	2
  1651  000110                     ___altoft@exp:
  1652                           	opt stack 0
  1653  000110                     ___lltoft@exp:
  1654                           	opt stack 0
  1655  000110                     ___wmul@multiplicand:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0x10
  1659  000110                     	ds	1
  1660  000111                     ___altoft@sign:
  1661                           	opt stack 0
  1662  000111                     ___llmod@divisor:
  1663                           	opt stack 0
  1664                           
  1665                           ; 4 bytes @ 0x11
  1666  000111                     	ds	1
  1667  000112                     ?___ftdiv:
  1668                           	opt stack 0
  1669  000112                     ___wmul@product:
  1670                           	opt stack 0
  1671  000112                     ___ftdiv@f1:
  1672                           	opt stack 0
  1673                           
  1674                           ; 3 bytes @ 0x12
  1675  000112                     	ds	2
  1676  000114                     ?___ftmul:
  1677                           	opt stack 0
  1678  000114                     ___ftmul@f1:
  1679                           	opt stack 0
  1680                           
  1681                           ; 3 bytes @ 0x14
  1682  000114                     	ds	1
  1683  000115                     ___llmod@counter:
  1684                           	opt stack 0
  1685  000115                     ___ftdiv@f2:
  1686                           	opt stack 0
  1687                           
  1688                           ; 3 bytes @ 0x15
  1689  000115                     	ds	2
  1690  000117                     ___ftmul@f2:
  1691                           	opt stack 0
  1692                           
  1693                           ; 3 bytes @ 0x17
  1694  000117                     	ds	1
  1695  000118                     ??___ftdiv:
  1696                           
  1697                           ; 1 bytes @ 0x18
  1698  000118                     	ds	2
  1699  00011A                     ??___ftmul:
  1700                           
  1701                           ; 1 bytes @ 0x1A
  1702  00011A                     	ds	1
  1703  00011B                     ___ftdiv@cntr:
  1704                           	opt stack 0
  1705                           
  1706                           ; 1 bytes @ 0x1B
  1707  00011B                     	ds	1
  1708  00011C                     ___ftdiv@f3:
  1709                           	opt stack 0
  1710                           
  1711                           ; 3 bytes @ 0x1C
  1712  00011C                     	ds	1
  1713  00011D                     ___ftmul@exp:
  1714                           	opt stack 0
  1715                           
  1716                           ; 1 bytes @ 0x1D
  1717  00011D                     	ds	1
  1718  00011E                     ___ftmul@f3_as_product:
  1719                           	opt stack 0
  1720                           
  1721                           ; 3 bytes @ 0x1E
  1722  00011E                     	ds	1
  1723  00011F                     ___ftdiv@exp:
  1724                           	opt stack 0
  1725                           
  1726                           ; 1 bytes @ 0x1F
  1727  00011F                     	ds	1
  1728  000120                     ___ftdiv@sign:
  1729                           	opt stack 0
  1730                           
  1731                           ; 1 bytes @ 0x20
  1732  000120                     	ds	1
  1733  000121                     ??_integrator:
  1734  000121                     ___ftmul@cntr:
  1735                           	opt stack 0
  1736                           
  1737                           ; 1 bytes @ 0x21
  1738  000121                     	ds	1
  1739  000122                     ___ftmul@sign:
  1740                           	opt stack 0
  1741                           
  1742                           ; 1 bytes @ 0x22
  1743  000122                     	ds	1
  1744  000123                     ?_fround:
  1745                           	opt stack 0
  1746  000123                     ?_scale:
  1747                           	opt stack 0
  1748  000123                     confirmEdition@yes:
  1749                           	opt stack 0
  1750  000123                     calcSysVars@temp:
  1751                           	opt stack 0
  1752  000123                     integrator@acum:
  1753                           	opt stack 0
  1754                           
  1755                           ; 4 bytes @ 0x23
  1756  000123                     	ds	3
  1757  000126                     _fround$2993:
  1758                           	opt stack 0
  1759  000126                     _scale$2994:
  1760                           	opt stack 0
  1761                           
  1762                           ; 3 bytes @ 0x26
  1763  000126                     	ds	1
  1764  000127                     integrator@temp:
  1765                           	opt stack 0
  1766                           
  1767                           ; 4 bytes @ 0x27
  1768  000127                     	ds	2
  1769  000129                     scale@scl:
  1770                           	opt stack 0
  1771  000129                     _fround$2992:
  1772                           	opt stack 0
  1773                           
  1774                           ; 3 bytes @ 0x29
  1775  000129                     	ds	1
  1776  00012A                     ?___fttol:
  1777                           	opt stack 0
  1778  00012A                     ___fttol@f1:
  1779                           	opt stack 0
  1780                           
  1781                           ; 3 bytes @ 0x2A
  1782  00012A                     	ds	1
  1783  00012B                     integrator@i:
  1784                           	opt stack 0
  1785                           
  1786                           ; 2 bytes @ 0x2B
  1787  00012B                     	ds	1
  1788  00012C                     fround@prec:
  1789                           	opt stack 0
  1790                           
  1791                           ; 1 bytes @ 0x2C
  1792  00012C                     	ds	1
  1793  00012D                     ?___ftadd:
  1794                           	opt stack 0
  1795  00012D                     ___ftadd@f1:
  1796                           	opt stack 0
  1797                           
  1798                           ; 3 bytes @ 0x2D
  1799  00012D                     	ds	1
  1800  00012E                     ??___fttol:
  1801                           
  1802                           ; 1 bytes @ 0x2E
  1803  00012E                     	ds	2
  1804  000130                     ___ftadd@f2:
  1805                           	opt stack 0
  1806                           
  1807                           ; 3 bytes @ 0x30
  1808  000130                     	ds	3
  1809  000133                     ??___ftadd:
  1810  000133                     ___fttol@sign1:
  1811                           	opt stack 0
  1812                           
  1813                           ; 1 bytes @ 0x33
  1814  000133                     	ds	1
  1815  000134                     ___fttol@lval:
  1816                           	opt stack 0
  1817                           
  1818                           ; 4 bytes @ 0x34
  1819  000134                     	ds	2
  1820  000136                     ___ftadd@sign:
  1821                           	opt stack 0
  1822                           
  1823                           ; 1 bytes @ 0x36
  1824  000136                     	ds	1
  1825  000137                     ___ftadd@exp2:
  1826                           	opt stack 0
  1827                           
  1828                           ; 1 bytes @ 0x37
  1829  000137                     	ds	1
  1830  000138                     ___ftadd@exp1:
  1831                           	opt stack 0
  1832  000138                     ___fttol@exp1:
  1833                           	opt stack 0
  1834                           
  1835                           ; 1 bytes @ 0x38
  1836  000138                     	ds	1
  1837  000139                     ??_desintegrator:
  1838  000139                     ?___ftsub:
  1839                           	opt stack 0
  1840  000139                     longPressENTER@temp:
  1841                           	opt stack 0
  1842  000139                     ___ftsub@f1:
  1843                           	opt stack 0
  1844                           
  1845                           ; 3 bytes @ 0x39
  1846  000139                     	ds	2
  1847  00013B                     desintegrator@temp:
  1848                           	opt stack 0
  1849                           
  1850                           ; 3 bytes @ 0x3B
  1851  00013B                     	ds	1
  1852  00013C                     ___ftsub@f2:
  1853                           	opt stack 0
  1854  00013C                     _longPressENTER$2991:
  1855                           	opt stack 0
  1856                           
  1857                           ; 3 bytes @ 0x3C
  1858  00013C                     	ds	2
  1859  00013E                     desintegrator@tempL:
  1860                           	opt stack 0
  1861                           
  1862                           ; 4 bytes @ 0x3E
  1863  00013E                     	ds	1
  1864  00013F                     ?_printf:
  1865                           	opt stack 0
  1866  00013F                     printf@f:
  1867                           	opt stack 0
  1868                           
  1869                           ; 2 bytes @ 0x3F
  1870  00013F                     	ds	3
  1871  000142                     desintegrator@temp3:
  1872                           	opt stack 0
  1873                           
  1874                           ; 4 bytes @ 0x42
  1875  000142                     	ds	4
  1876  000146                     desintegrator@temp2:
  1877                           	opt stack 0
  1878                           
  1879                           ; 4 bytes @ 0x46
  1880  000146                     	ds	4
  1881  00014A                     desintegrator@i:
  1882                           	opt stack 0
  1883                           
  1884                           ; 2 bytes @ 0x4A
  1885  00014A                     	ds	2
  1886  00014C                     
  1887                           ; 1 bytes @ 0x4C
  1888  00014C                     	ds	5
  1889  000151                     ??_printf:
  1890                           
  1891                           ; 1 bytes @ 0x51
  1892  000151                     	ds	6
  1893  000157                     _printf$2995:
  1894                           	opt stack 0
  1895                           
  1896                           ; 3 bytes @ 0x57
  1897  000157                     	ds	3
  1898  00015A                     printf@cp:
  1899                           	opt stack 0
  1900                           
  1901                           ; 2 bytes @ 0x5A
  1902  00015A                     	ds	2
  1903  00015C                     printf@len:
  1904                           	opt stack 0
  1905                           
  1906                           ; 2 bytes @ 0x5C
  1907  00015C                     	ds	2
  1908  00015E                     printf@ap:
  1909                           	opt stack 0
  1910                           
  1911                           ; 2 bytes @ 0x5E
  1912  00015E                     	ds	2
  1913  000160                     printf@flag:
  1914                           	opt stack 0
  1915                           
  1916                           ; 2 bytes @ 0x60
  1917  000160                     	ds	2
  1918  000162                     printf@tmpval:
  1919                           	opt stack 0
  1920                           
  1921                           ; 4 bytes @ 0x62
  1922  000162                     	ds	4
  1923  000166                     printf@val:
  1924                           	opt stack 0
  1925                           
  1926                           ; 4 bytes @ 0x66
  1927  000166                     	ds	4
  1928  00016A                     printf@exp:
  1929                           	opt stack 0
  1930                           
  1931                           ; 2 bytes @ 0x6A
  1932  00016A                     	ds	2
  1933  00016C                     printf@width:
  1934                           	opt stack 0
  1935                           
  1936                           ; 2 bytes @ 0x6C
  1937  00016C                     	ds	2
  1938  00016E                     printf@fval:
  1939                           	opt stack 0
  1940                           
  1941                           ; 3 bytes @ 0x6E
  1942  00016E                     	ds	3
  1943  000171                     printf@prec:
  1944                           	opt stack 0
  1945                           
  1946                           ; 2 bytes @ 0x71
  1947  000171                     	ds	2
  1948  000173                     printf@c:
  1949                           	opt stack 0
  1950                           
  1951                           ; 1 bytes @ 0x73
  1952  000173                     	ds	1
  1953  000174                     drawMenu@adv:
  1954                           	opt stack 0
  1955  000174                     drawAdvON@on:
  1956                           	opt stack 0
  1957  000174                     drawPassWord@i:
  1958                           	opt stack 0
  1959  000174                     drawSNquest@i:
  1960                           	opt stack 0
  1961                           
  1962                           ; 2 bytes @ 0x74
  1963  000174                     	ds	2
  1964  000176                     drawSNquest@tq:
  1965                           	opt stack 0
  1966                           
  1967                           ; 1 bytes @ 0x76
  1968  000176                     	ds	1
  1969  000177                     tblptru	equ	0xFF8
  1970                           tblptrh	equ	0xFF7
  1971                           tblptrl	equ	0xFF6
  1972                           tablat	equ	0xFF5
  1973                           postinc0	equ	0xFEE
  1974                           wreg	equ	0xFE8
  1975                           postdec1	equ	0xFE5
  1976                           fsr1l	equ	0xFE1
  1977                           
  1978                           ; 1 bytes @ 0x77
  1979                           
  1980                           	psect	cstackBANK0
  1981  000060                     __pcstackBANK0:
  1982                           	opt stack 0
  1983  000060                     ??i1_checkPass:
  1984  000060                     ??i1_chanValDigUP:
  1985  000060                     ??i1_chanValDigDOWN:
  1986  000060                     ?i1___ftpack:
  1987                           	opt stack 0
  1988  000060                     ?i1___lmul:
  1989                           	opt stack 0
  1990  000060                     ?i1___aldiv:
  1991                           	opt stack 0
  1992  000060                     ?i1___fttol:
  1993                           	opt stack 0
  1994  000060                     putchUART@val:
  1995                           	opt stack 0
  1996  000060                     i1writeEEPROM@data:
  1997                           	opt stack 0
  1998  000060                     i1readEEPROM@adr:
  1999                           	opt stack 0
  2000  000060                     i1delay_ms@del:
  2001                           	opt stack 0
  2002  000060                     i1setPWM2duty@actuator:
  2003                           	opt stack 0
  2004  000060                     i1___ftpack@arg:
  2005                           	opt stack 0
  2006  000060                     i1___fttol@f1:
  2007                           	opt stack 0
  2008  000060                     i1___lmul@multiplier:
  2009                           	opt stack 0
  2010  000060                     i1___aldiv@dividend:
  2011                           	opt stack 0
  2012                           
  2013                           ; 4 bytes @ 0x0
  2014  000060                     	ds	1
  2015  000061                     i1writeEEPROM@adr:
  2016                           	opt stack 0
  2017                           
  2018                           ; 1 bytes @ 0x1
  2019  000061                     	ds	1
  2020  000062                     ??i1_delay_ms:
  2021  000062                     ??i1_setPWM2duty:
  2022                           
  2023                           ; 1 bytes @ 0x2
  2024  000062                     	ds	1
  2025  000063                     i1___ftpack@exp:
  2026                           	opt stack 0
  2027  000063                     i1delay_ms@i:
  2028                           	opt stack 0
  2029                           
  2030                           ; 2 bytes @ 0x3
  2031  000063                     	ds	1
  2032  000064                     ??i1___fttol:
  2033  000064                     i1checkPass@passOK:
  2034                           	opt stack 0
  2035  000064                     i1___ftpack@sign:
  2036                           	opt stack 0
  2037  000064                     i1setPWM2duty@act:
  2038                           	opt stack 0
  2039  000064                     i1___lmul@multiplicand:
  2040                           	opt stack 0
  2041  000064                     i1___aldiv@divisor:
  2042                           	opt stack 0
  2043                           
  2044                           ; 4 bytes @ 0x4
  2045  000064                     	ds	1
  2046  000065                     ??i1___ftpack:
  2047  000065                     i1checkPass@i:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0x5
  2051  000065                     	ds	1
  2052  000066                     ??_T2int:
  2053                           
  2054                           ; 1 bytes @ 0x6
  2055  000066                     	ds	2
  2056  000068                     ?i1___altoft:
  2057                           	opt stack 0
  2058  000068                     ?i1___ftadd:
  2059                           	opt stack 0
  2060  000068                     ?i1___ftmul:
  2061                           	opt stack 0
  2062  000068                     i1___aldiv@counter:
  2063                           	opt stack 0
  2064  000068                     i1___ftadd@f1:
  2065                           	opt stack 0
  2066  000068                     i1___ftmul@f1:
  2067                           	opt stack 0
  2068  000068                     i1___lmul@product:
  2069                           	opt stack 0
  2070  000068                     i1___altoft@c:
  2071                           	opt stack 0
  2072                           
  2073                           ; 4 bytes @ 0x8
  2074  000068                     	ds	1
  2075  000069                     i1___aldiv@sign:
  2076                           	opt stack 0
  2077  000069                     i1___fttol@sign1:
  2078                           	opt stack 0
  2079                           
  2080                           ; 1 bytes @ 0x9
  2081  000069                     	ds	1
  2082  00006A                     i1___aldiv@quotient:
  2083                           	opt stack 0
  2084  00006A                     i1___fttol@lval:
  2085                           	opt stack 0
  2086                           
  2087                           ; 4 bytes @ 0xA
  2088  00006A                     	ds	1
  2089  00006B                     i1___ftadd@f2:
  2090                           	opt stack 0
  2091  00006B                     i1___ftmul@f2:
  2092                           	opt stack 0
  2093                           
  2094                           ; 3 bytes @ 0xB
  2095  00006B                     	ds	1
  2096  00006C                     ??i1___altoft:
  2097                           
  2098                           ; 1 bytes @ 0xC
  2099  00006C                     	ds	2
  2100  00006E                     ??i1___ftadd:
  2101  00006E                     ??i1___ftmul:
  2102  00006E                     i1___fttol@exp1:
  2103                           	opt stack 0
  2104                           
  2105                           ; 1 bytes @ 0xE
  2106  00006E                     	ds	2
  2107  000070                     i1___altoft@exp:
  2108                           	opt stack 0
  2109                           
  2110                           ; 1 bytes @ 0x10
  2111  000070                     	ds	1
  2112  000071                     i1___altoft@sign:
  2113                           	opt stack 0
  2114  000071                     i1___ftadd@sign:
  2115                           	opt stack 0
  2116  000071                     i1___ftmul@exp:
  2117                           	opt stack 0
  2118                           
  2119                           ; 1 bytes @ 0x11
  2120  000071                     	ds	1
  2121  000072                     ?i1___ftdiv:
  2122                           	opt stack 0
  2123  000072                     i1___ftadd@exp2:
  2124                           	opt stack 0
  2125  000072                     i1___ftdiv@f1:
  2126                           	opt stack 0
  2127  000072                     i1___ftmul@f3_as_product:
  2128                           	opt stack 0
  2129                           
  2130                           ; 3 bytes @ 0x12
  2131  000072                     	ds	1
  2132  000073                     i1___ftadd@exp1:
  2133                           	opt stack 0
  2134                           
  2135                           ; 1 bytes @ 0x13
  2136  000073                     	ds	2
  2137  000075                     i1___ftmul@cntr:
  2138                           	opt stack 0
  2139  000075                     i1___ftdiv@f2:
  2140                           	opt stack 0
  2141                           
  2142                           ; 3 bytes @ 0x15
  2143  000075                     	ds	1
  2144  000076                     i1___ftmul@sign:
  2145                           	opt stack 0
  2146                           
  2147                           ; 1 bytes @ 0x16
  2148  000076                     	ds	1
  2149  000077                     ??i1_desintegrator:
  2150  000077                     i1calcSysVars@temp:
  2151                           	opt stack 0
  2152                           
  2153                           ; 3 bytes @ 0x17
  2154  000077                     	ds	1
  2155  000078                     ??i1___ftdiv:
  2156                           
  2157                           ; 1 bytes @ 0x18
  2158  000078                     	ds	1
  2159  000079                     i1desintegrator@temp:
  2160                           	opt stack 0
  2161                           
  2162                           ; 3 bytes @ 0x19
  2163  000079                     	ds	1
  2164  00007A                     
  2165                           ; 1 bytes @ 0x1A
  2166  00007A                     	ds	1
  2167  00007B                     i1___ftdiv@cntr:
  2168                           	opt stack 0
  2169                           
  2170                           ; 1 bytes @ 0x1B
  2171  00007B                     	ds	1
  2172  00007C                     i1___ftdiv@f3:
  2173                           	opt stack 0
  2174  00007C                     i1desintegrator@tempL:
  2175                           	opt stack 0
  2176                           
  2177                           ; 4 bytes @ 0x1C
  2178  00007C                     	ds	3
  2179  00007F                     i1___ftdiv@exp:
  2180                           	opt stack 0
  2181                           
  2182                           ; 1 bytes @ 0x1F
  2183  00007F                     	ds	1
  2184  000080                     i1___ftdiv@sign:
  2185                           	opt stack 0
  2186  000080                     i1desintegrator@temp3:
  2187                           	opt stack 0
  2188                           
  2189                           ; 4 bytes @ 0x20
  2190  000080                     	ds	1
  2191  000081                     ??i1_integrator:
  2192  000081                     i1confirmEdition@yes:
  2193                           	opt stack 0
  2194                           
  2195                           ; 1 bytes @ 0x21
  2196  000081                     	ds	2
  2197  000083                     i1integrator@acum:
  2198                           	opt stack 0
  2199                           
  2200                           ; 4 bytes @ 0x23
  2201  000083                     	ds	1
  2202  000084                     i1desintegrator@temp2:
  2203                           	opt stack 0
  2204                           
  2205                           ; 4 bytes @ 0x24
  2206  000084                     	ds	3
  2207  000087                     i1integrator@temp:
  2208                           	opt stack 0
  2209                           
  2210                           ; 4 bytes @ 0x27
  2211  000087                     	ds	1
  2212  000088                     i1desintegrator@i:
  2213                           	opt stack 0
  2214                           
  2215                           ; 2 bytes @ 0x28
  2216  000088                     	ds	2
  2217  00008A                     
  2218                           ; 1 bytes @ 0x2A
  2219  00008A                     	ds	1
  2220  00008B                     i1integrator@i:
  2221                           	opt stack 0
  2222                           
  2223                           ; 2 bytes @ 0x2B
  2224  00008B                     	ds	2
  2225  00008D                     i1longPressENTER@temp:
  2226                           	opt stack 0
  2227                           
  2228                           ; 3 bytes @ 0x2D
  2229  00008D                     	ds	3
  2230  000090                     i1_longPressENTER$3198:
  2231                           	opt stack 0
  2232                           
  2233                           ; 3 bytes @ 0x30
  2234  000090                     	ds	3
  2235  000093                     UARTint@sas:
  2236                           	opt stack 0
  2237                           
  2238                           ; 1 bytes @ 0x33
  2239  000093                     	ds	1
  2240  000094                     ??_isr:
  2241                           
  2242                           ; 1 bytes @ 0x34
  2243  000094                     	ds	17
  2244                           tblptru	equ	0xFF8
  2245                           tblptrh	equ	0xFF7
  2246                           tblptrl	equ	0xFF6
  2247                           tablat	equ	0xFF5
  2248                           postinc0	equ	0xFEE
  2249                           wreg	equ	0xFE8
  2250                           postdec1	equ	0xFE5
  2251                           fsr1l	equ	0xFE1
  2252                           
  2253                           	psect	cstackCOMRAM
  2254  000001                     __pcstackCOMRAM:
  2255                           	opt stack 0
  2256  000001                     ?i2___ftpack:
  2257                           	opt stack 0
  2258  000001                     i2setPWM2duty@actuator:
  2259                           	opt stack 0
  2260  000001                     i2___ftpack@arg:
  2261                           	opt stack 0
  2262                           
  2263                           ; 3 bytes @ 0x0
  2264  000001                     	ds	2
  2265  000003                     ??i2_setPWM2duty:
  2266                           
  2267                           ; 1 bytes @ 0x2
  2268  000003                     	ds	1
  2269  000004                     i2___ftpack@exp:
  2270                           	opt stack 0
  2271                           
  2272                           ; 1 bytes @ 0x3
  2273  000004                     	ds	1
  2274  000005                     i2___ftpack@sign:
  2275                           	opt stack 0
  2276  000005                     i2setPWM2duty@act:
  2277                           	opt stack 0
  2278                           
  2279                           ; 2 bytes @ 0x4
  2280  000005                     	ds	1
  2281  000006                     ??i2___ftpack:
  2282                           
  2283                           ; 1 bytes @ 0x5
  2284  000006                     	ds	3
  2285  000009                     ?i2___altoft:
  2286                           	opt stack 0
  2287  000009                     i2___altoft@c:
  2288                           	opt stack 0
  2289                           
  2290                           ; 4 bytes @ 0x8
  2291  000009                     	ds	4
  2292  00000D                     ??i2___altoft:
  2293                           
  2294                           ; 1 bytes @ 0xC
  2295  00000D                     	ds	4
  2296  000011                     i2___altoft@exp:
  2297                           	opt stack 0
  2298                           
  2299                           ; 1 bytes @ 0x10
  2300  000011                     	ds	1
  2301  000012                     i2___altoft@sign:
  2302                           	opt stack 0
  2303                           
  2304                           ; 1 bytes @ 0x11
  2305  000012                     	ds	1
  2306  000013                     i2___ftge@ff1:
  2307                           	opt stack 0
  2308                           
  2309                           ; 3 bytes @ 0x12
  2310  000013                     	ds	3
  2311  000016                     i2___ftge@ff2:
  2312                           	opt stack 0
  2313                           
  2314                           ; 3 bytes @ 0x15
  2315  000016                     	ds	3
  2316  000019                     ??i2___ftge:
  2317                           
  2318                           ; 1 bytes @ 0x18
  2319  000019                     	ds	3
  2320  00001C                     ??_T4int:
  2321                           
  2322                           ; 1 bytes @ 0x1B
  2323  00001C                     	ds	1
  2324  00001D                     ??_hp_isr:
  2325                           
  2326                           ; 1 bytes @ 0x1C
  2327  00001D                     	ds	14
  2328                           tblptru	equ	0xFF8
  2329                           tblptrh	equ	0xFF7
  2330                           tblptrl	equ	0xFF6
  2331                           tablat	equ	0xFF5
  2332                           postinc0	equ	0xFEE
  2333                           wreg	equ	0xFE8
  2334                           postdec1	equ	0xFE5
  2335                           fsr1l	equ	0xFE1
  2336                           
  2337 ;;
  2338 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2339 ;;
  2340 ;; *************** function _main *****************
  2341 ;; Defined at:
  2342 ;;		line 32 in file "source/main.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;		None
  2345 ;; Auto vars:     Size  Location     Type
  2346 ;;		None
  2347 ;; Return value:  Size  Location     Type
  2348 ;;                  1    wreg      void 
  2349 ;; Registers used:
  2350 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2351 ;; Tracked objects:
  2352 ;;		On entry : 0/0
  2353 ;;		On exit  : 0/0
  2354 ;;		Unchanged: 0/0
  2355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2356 ;;      Params:         0       0       0       0       0       0       0
  2357 ;;      Locals:         0       0       0       0       0       0       0
  2358 ;;      Temps:          0       0       0       0       0       0       0
  2359 ;;      Totals:         0       0       0       0       0       0       0
  2360 ;;Total ram usage:        0 bytes
  2361 ;; Hardware stack levels required when called:   22
  2362 ;; This function calls:
  2363 ;;		_EEPROMConfig
  2364 ;;		_PWM2Config
  2365 ;;		_UARTConfig
  2366 ;;		_buttonChecking
  2367 ;;		_clockConfig
  2368 ;;		_drawScreen
  2369 ;;		_interruptConfig
  2370 ;;		_ioConfig
  2371 ;;		_ioInitStt
  2372 ;;		_lcd_init
  2373 ;;		_setPWM2duty
  2374 ;;		_setPWM2on
  2375 ;;		_sysParamInit
  2376 ;;		_t4config
  2377 ;; This function is called by:
  2378 ;;		Startup code after reset
  2379 ;; This function uses a non-reentrant model
  2380 ;;
  2381                           
  2382                           	psect	text0
  2383  006736                     __ptext0:
  2384                           	opt stack 0
  2385  006736                     _main:
  2386                           	opt stack 9
  2387                           
  2388                           ;main.c: 34: clockConfig();
  2389                           
  2390                           ;incstack = 0
  2391  006736  EC8A  F035         	call	_clockConfig	;wreg free
  2392                           
  2393                           ;main.c: 35: t4config();
  2394  00673A  EC21  F035         	call	_t4config	;wreg free
  2395                           
  2396                           ;main.c: 36: ioInitStt();
  2397  00673E  EC3F  F036         	call	_ioInitStt	;wreg free
  2398                           
  2399                           ;main.c: 37: EEPROMConfig();
  2400  006742  EC47  F036         	call	_EEPROMConfig	;wreg free
  2401                           
  2402                           ;main.c: 39: sysParamInit();
  2403  006746  EC48  F02B         	call	_sysParamInit	;wreg free
  2404                           
  2405                           ;main.c: 40: ioConfig();
  2406  00674A  ECA6  F034         	call	_ioConfig	;wreg free
  2407                           
  2408                           ;main.c: 41: lcd_init();
  2409  00674E  ECA6  F02A         	call	_lcd_init	;wreg free
  2410                           
  2411                           ;main.c: 42: PWM2Config();
  2412  006752  EC6B  F032         	call	_PWM2Config	;wreg free
  2413                           
  2414                           ;main.c: 43: UARTConfig();
  2415  006756  EC6F  F034         	call	_UARTConfig	;wreg free
  2416                           
  2417                           ;main.c: 44: interruptConfig();
  2418  00675A  EC43  F036         	call	_interruptConfig	;wreg free
  2419  00675E  0004               	clrwdt		;# 
  2420                           
  2421                           ;main.c: 46: WDTCONbits.SWDTEN = 1;
  2422  006760  80D1               	bsf	4049,0,c	;volatile
  2423                           
  2424                           ;main.c: 47: setPWM2duty(-400);
  2425  006762  0EFE               	movlw	254
  2426  006764  0101               	movlb	1	; () banked
  2427  006766  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
  2428  006768  0E70               	movlw	112
  2429  00676A  6F00               	movwf	setPWM2duty@actuator& (0+255),b
  2430  00676C  EC6F  F02D         	call	_setPWM2duty	;wreg free
  2431                           
  2432                           ;main.c: 48: setPWM2on(1);
  2433  006770  0E01               	movlw	1
  2434  006772  ECCC  F035         	call	_setPWM2on
  2435  006776                     l12613:
  2436                           
  2437                           ;main.c: 51: drawScreen();
  2438  006776  EC9D  F029         	call	_drawScreen	;wreg free
  2439                           
  2440                           ;main.c: 52: buttonChecking();
  2441  00677A  ECDD  F00F         	call	_buttonChecking	;wreg free
  2442  00677E  D7FB               	goto	l12613
  2443  006780                     __end_of_main:
  2444                           	opt stack 0
  2445                           tblptru	equ	0xFF8
  2446                           tblptrh	equ	0xFF7
  2447                           tblptrl	equ	0xFF6
  2448                           tablat	equ	0xFF5
  2449                           postinc0	equ	0xFEE
  2450                           wreg	equ	0xFE8
  2451                           postdec1	equ	0xFE5
  2452                           fsr1l	equ	0xFE1
  2453                           
  2454 ;; *************** function _t4config *****************
  2455 ;; Defined at:
  2456 ;;		line 28 in file "source/T4Config.h"
  2457 ;; Parameters:    Size  Location     Type
  2458 ;;		None
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;		None
  2461 ;; Return value:  Size  Location     Type
  2462 ;;                  1    wreg      void 
  2463 ;; Registers used:
  2464 ;;		wreg, status,2
  2465 ;; Tracked objects:
  2466 ;;		On entry : 0/0
  2467 ;;		On exit  : 0/0
  2468 ;;		Unchanged: 0/0
  2469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2470 ;;      Params:         0       0       0       0       0       0       0
  2471 ;;      Locals:         0       0       0       0       0       0       0
  2472 ;;      Temps:          0       0       0       0       0       0       0
  2473 ;;      Totals:         0       0       0       0       0       0       0
  2474 ;;Total ram usage:        0 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:   12
  2477 ;; This function calls:
  2478 ;;		Nothing
  2479 ;; This function is called by:
  2480 ;;		_main
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	text1
  2485  006A42                     __ptext1:
  2486                           	opt stack 0
  2487  006A42                     _t4config:
  2488                           	opt stack 18
  2489                           
  2490                           ;T4Config.h: 29: T4CONbits.TMR4ON = 0;
  2491                           
  2492                           ;incstack = 0
  2493  006A42  010F               	movlb	15	; () banked
  2494  006A44  9551               	bcf	81,2,b	;volatile
  2495                           
  2496                           ; BSR set to: 15
  2497                           ;T4Config.h: 30: T4CONbits.T4CKPS = 0b01;
  2498  006A46  010F               	movlb	15	; () banked
  2499  006A48  5151               	movf	81,w,b	;volatile
  2500  006A4A  0BFC               	andlw	-4
  2501  006A4C  0901               	iorlw	1
  2502  006A4E  6F51               	movwf	81,b	;volatile
  2503                           
  2504                           ;T4Config.h: 31: T4CONbits.T4OUTPS = 0b0100;
  2505  006A50  010F               	movlb	15	; () banked
  2506  006A52  5151               	movf	81,w,b	;volatile
  2507  006A54  0B87               	andlw	-121
  2508  006A56  0920               	iorlw	32
  2509  006A58  6F51               	movwf	81,b	;volatile
  2510                           
  2511                           ;T4Config.h: 32: PR4 = 199;
  2512  006A5A  0EC7               	movlw	199
  2513  006A5C  010F               	movlb	15	; () banked
  2514  006A5E  6F52               	movwf	82,b	;volatile
  2515                           
  2516                           ; BSR set to: 15
  2517                           ;T4Config.h: 33: PIR5bits.TMR4IF = 0;
  2518  006A60  907E               	bcf	3966,0,c	;volatile
  2519                           
  2520                           ; BSR set to: 15
  2521                           ;T4Config.h: 34: IPR5bits.TMR4IP = 1;
  2522  006A62  807F               	bsf	3967,0,c	;volatile
  2523                           
  2524                           ; BSR set to: 15
  2525                           ;T4Config.h: 35: PIE5bits.TMR4IE = 1;
  2526  006A64  807D               	bsf	3965,0,c	;volatile
  2527                           
  2528                           ; BSR set to: 15
  2529                           ;T4Config.h: 36: T4CONbits.TMR4ON = 1;
  2530  006A66  010F               	movlb	15	; () banked
  2531  006A68  8551               	bsf	81,2,b	;volatile
  2532                           
  2533                           ; BSR set to: 15
  2534  006A6A  0012               	return		;funcret
  2535  006A6C                     __end_of_t4config:
  2536                           	opt stack 0
  2537                           tblptru	equ	0xFF8
  2538                           tblptrh	equ	0xFF7
  2539                           tblptrl	equ	0xFF6
  2540                           tablat	equ	0xFF5
  2541                           postinc0	equ	0xFEE
  2542                           wreg	equ	0xFE8
  2543                           postdec1	equ	0xFE5
  2544                           fsr1l	equ	0xFE1
  2545                           
  2546 ;; *************** function _sysParamInit *****************
  2547 ;; Defined at:
  2548 ;;		line 163 in file "source/sysParams.h"
  2549 ;; Parameters:    Size  Location     Type
  2550 ;;		None
  2551 ;; Auto vars:     Size  Location     Type
  2552 ;;		None
  2553 ;; Return value:  Size  Location     Type
  2554 ;;                  1    wreg      void 
  2555 ;; Registers used:
  2556 ;;		wreg, status,2, status,0, cstack
  2557 ;; Tracked objects:
  2558 ;;		On entry : 0/0
  2559 ;;		On exit  : 0/0
  2560 ;;		Unchanged: 0/0
  2561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2562 ;;      Params:         0       0       0       0       0       0       0
  2563 ;;      Locals:         0       0       0       0       0       0       0
  2564 ;;      Temps:          0       0       0       0       0       0       0
  2565 ;;      Totals:         0       0       0       0       0       0       0
  2566 ;;Total ram usage:        0 bytes
  2567 ;; Hardware stack levels used:    1
  2568 ;; Hardware stack levels required when called:   15
  2569 ;; This function calls:
  2570 ;;		_calcSysVars
  2571 ;;		_readEEPROM
  2572 ;; This function is called by:
  2573 ;;		_main
  2574 ;; This function uses a non-reentrant model
  2575 ;;
  2576                           
  2577                           	psect	text2
  2578  005690                     __ptext2:
  2579                           	opt stack 0
  2580  005690                     _sysParamInit:
  2581                           	opt stack 15
  2582                           
  2583                           ;sysParams.h: 166: fData.floatUB = readEEPROM(3);
  2584                           
  2585                           ; BSR set to: 15
  2586                           ;incstack = 0
  2587  005690  0E03               	movlw	3
  2588  005692  ECE5  F035         	call	_readEEPROM
  2589  005696  0100               	movlb	0	; () banked
  2590  005698  6FC6               	movwf	(_fData+2)& (0+255),b
  2591                           
  2592                           ;sysParams.h: 167: fData.floatHB = readEEPROM(4);
  2593  00569A  0E04               	movlw	4
  2594  00569C  ECE5  F035         	call	_readEEPROM
  2595  0056A0  0100               	movlb	0	; () banked
  2596  0056A2  6FC5               	movwf	(_fData+1)& (0+255),b
  2597                           
  2598                           ;sysParams.h: 168: fData.floatLB = readEEPROM(5);
  2599  0056A4  0E05               	movlw	5
  2600  0056A6  ECE5  F035         	call	_readEEPROM
  2601  0056AA  0100               	movlb	0	; () banked
  2602  0056AC  6FC4               	movwf	_fData& (0+255),b
  2603                           
  2604                           ; BSR set to: 0
  2605                           ;sysParams.h: 169: tiXcorte = fData.floatdat;
  2606  0056AE  C0C4  F0B2         	movff	_fData,_tiXcorte
  2607  0056B2  C0C5  F0B3         	movff	_fData+1,_tiXcorte+1
  2608  0056B6  C0C6  F0B4         	movff	_fData+2,_tiXcorte+2
  2609                           
  2610                           ;sysParams.h: 170: i16Data.int16HB = readEEPROM(6);
  2611  0056BA  0E06               	movlw	6
  2612  0056BC  ECE5  F035         	call	_readEEPROM
  2613  0056C0  0100               	movlb	0	; () banked
  2614  0056C2  6FC8               	movwf	(_i16Data+1)& (0+255),b
  2615                           
  2616                           ;sysParams.h: 171: i16Data.int16LB = readEEPROM(7);
  2617  0056C4  0E07               	movlw	7
  2618  0056C6  ECE5  F035         	call	_readEEPROM
  2619  0056CA  0100               	movlb	0	; () banked
  2620  0056CC  6FC7               	movwf	_i16Data& (0+255),b
  2621                           
  2622                           ; BSR set to: 0
  2623                           ;sysParams.h: 172: numCortes = i16Data.int16dat;
  2624  0056CE  C0C7  F0B8         	movff	_i16Data,_numCortes
  2625  0056D2  C0C8  F0B9         	movff	_i16Data+1,_numCortes+1
  2626                           
  2627                           ;sysParams.h: 174: fData.floatUB = readEEPROM(9);
  2628  0056D6  0E09               	movlw	9
  2629  0056D8  ECE5  F035         	call	_readEEPROM
  2630  0056DC  0100               	movlb	0	; () banked
  2631  0056DE  6FC6               	movwf	(_fData+2)& (0+255),b
  2632                           
  2633                           ;sysParams.h: 175: fData.floatHB = readEEPROM(10);
  2634  0056E0  0E0A               	movlw	10
  2635  0056E2  ECE5  F035         	call	_readEEPROM
  2636  0056E6  0100               	movlb	0	; () banked
  2637  0056E8  6FC5               	movwf	(_fData+1)& (0+255),b
  2638                           
  2639                           ;sysParams.h: 176: fData.floatLB = readEEPROM(11);
  2640  0056EA  0E0B               	movlw	11
  2641  0056EC  ECE5  F035         	call	_readEEPROM
  2642  0056F0  0100               	movlb	0	; () banked
  2643  0056F2  6FC4               	movwf	_fData& (0+255),b
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;sysParams.h: 177: diamTubo = fData.floatdat;
  2647  0056F4  C0C4  F0A9         	movff	_fData,_diamTubo
  2648  0056F8  C0C5  F0AA         	movff	_fData+1,_diamTubo+1
  2649  0056FC  C0C6  F0AB         	movff	_fData+2,_diamTubo+2
  2650                           
  2651                           ;sysParams.h: 184: fData.floatUB = readEEPROM(17);
  2652  005700  0E11               	movlw	17
  2653  005702  ECE5  F035         	call	_readEEPROM
  2654  005706  0100               	movlb	0	; () banked
  2655  005708  6FC6               	movwf	(_fData+2)& (0+255),b
  2656                           
  2657                           ;sysParams.h: 185: fData.floatHB = readEEPROM(18);
  2658  00570A  0E12               	movlw	18
  2659  00570C  ECE5  F035         	call	_readEEPROM
  2660  005710  0100               	movlb	0	; () banked
  2661  005712  6FC5               	movwf	(_fData+1)& (0+255),b
  2662                           
  2663                           ;sysParams.h: 186: fData.floatLB = readEEPROM(19);
  2664  005714  0E13               	movlw	19
  2665  005716  ECE5  F035         	call	_readEEPROM
  2666  00571A  0100               	movlb	0	; () banked
  2667  00571C  6FC4               	movwf	_fData& (0+255),b
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;sysParams.h: 187: velocidadMasa = fData.floatdat;
  2671  00571E  C0C4  F0B5         	movff	_fData,_velocidadMasa
  2672  005722  C0C5  F0B6         	movff	_fData+1,_velocidadMasa+1
  2673  005726  C0C6  F0B7         	movff	_fData+2,_velocidadMasa+2
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;sysParams.h: 188: calcSysVars();
  2677  00572A  EC01  F032         	call	_calcSysVars	;wreg free
  2678  00572E  0012               	return		;funcret
  2679  005730                     __end_of_sysParamInit:
  2680                           	opt stack 0
  2681                           tblptru	equ	0xFF8
  2682                           tblptrh	equ	0xFF7
  2683                           tblptrl	equ	0xFF6
  2684                           tablat	equ	0xFF5
  2685                           postinc0	equ	0xFEE
  2686                           wreg	equ	0xFE8
  2687                           postdec1	equ	0xFE5
  2688                           fsr1l	equ	0xFE1
  2689                           
  2690 ;; *************** function _readEEPROM *****************
  2691 ;; Defined at:
  2692 ;;		line 62 in file "source/sysParams.h"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;  adr             1    wreg     unsigned char 
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;  adr             1    0[BANK1 ] unsigned char 
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  1    wreg      unsigned char 
  2699 ;; Registers used:
  2700 ;;		wreg, status,2
  2701 ;; Tracked objects:
  2702 ;;		On entry : 0/0
  2703 ;;		On exit  : 0/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2706 ;;      Params:         0       0       0       0       0       0       0
  2707 ;;      Locals:         0       0       1       0       0       0       0
  2708 ;;      Temps:          0       0       0       0       0       0       0
  2709 ;;      Totals:         0       0       1       0       0       0       0
  2710 ;;Total ram usage:        1 bytes
  2711 ;; Hardware stack levels used:    1
  2712 ;; Hardware stack levels required when called:   12
  2713 ;; This function calls:
  2714 ;;		Nothing
  2715 ;; This function is called by:
  2716 ;;		_sysParamInit
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text3
  2721  006BCA                     __ptext3:
  2722                           	opt stack 0
  2723  006BCA                     _readEEPROM:
  2724                           	opt stack 17
  2725                           
  2726                           ;incstack = 0
  2727                           ;readEEPROM@adr stored from wreg
  2728  006BCA  0101               	movlb	1	; () banked
  2729  006BCC  6F00               	movwf	readEEPROM@adr& (0+255),b
  2730                           
  2731                           ;sysParams.h: 63: EEADR = adr;
  2732  006BCE  C100  FFA9         	movff	readEEPROM@adr,4009	;volatile
  2733                           
  2734                           ;sysParams.h: 64: EECON1bits.EEPGD = 0;
  2735  006BD2  9EA6               	bcf	4006,7,c	;volatile
  2736                           
  2737                           ;sysParams.h: 65: EECON1bits.CFGS = 0;
  2738  006BD4  9CA6               	bcf	4006,6,c	;volatile
  2739                           
  2740                           ;sysParams.h: 66: EECON1bits.RD = 1;
  2741  006BD6  80A6               	bsf	4006,0,c	;volatile
  2742  006BD8                     l281:
  2743  006BD8  B0A6               	btfsc	4006,0,c	;volatile
  2744  006BDA  D7FE               	goto	l281
  2745                           
  2746                           ;sysParams.h: 68: return EEDATA;
  2747  006BDC  50A8               	movf	4008,w,c	;volatile
  2748  006BDE  0012               	return		;funcret
  2749  006BE0                     __end_of_readEEPROM:
  2750                           	opt stack 0
  2751                           tblptru	equ	0xFF8
  2752                           tblptrh	equ	0xFF7
  2753                           tblptrl	equ	0xFF6
  2754                           tablat	equ	0xFF5
  2755                           postinc0	equ	0xFEE
  2756                           wreg	equ	0xFE8
  2757                           postdec1	equ	0xFE5
  2758                           fsr1l	equ	0xFE1
  2759                           
  2760 ;; *************** function _calcSysVars *****************
  2761 ;; Defined at:
  2762 ;;		line 76 in file "source/sysParams.h"
  2763 ;; Parameters:    Size  Location     Type
  2764 ;;		None
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;  temp            3   35[BANK1 ] float 
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  1    wreg      void 
  2769 ;; Registers used:
  2770 ;;		wreg, status,2, status,0, cstack
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2776 ;;      Params:         0       0       0       0       0       0       0
  2777 ;;      Locals:         0       0       3       0       0       0       0
  2778 ;;      Temps:          0       0       0       0       0       0       0
  2779 ;;      Totals:         0       0       3       0       0       0       0
  2780 ;;Total ram usage:        3 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; Hardware stack levels required when called:   14
  2783 ;; This function calls:
  2784 ;;		___ftmul
  2785 ;; This function is called by:
  2786 ;;		_sysParamInit
  2787 ;; This function uses a non-reentrant model
  2788 ;;
  2789                           
  2790                           	psect	text4
  2791  006402                     __ptext4:
  2792                           	opt stack 0
  2793  006402                     _calcSysVars:
  2794                           	opt stack 15
  2795                           
  2796                           ;sysParams.h: 77: float temp = 0;
  2797                           
  2798                           ;incstack = 0
  2799  006402  0E00               	movlw	0
  2800  006404  0101               	movlb	1	; () banked
  2801  006406  6F23               	movwf	calcSysVars@temp& (0+255),b
  2802  006408  0E00               	movlw	0
  2803  00640A  0101               	movlb	1	; () banked
  2804  00640C  6F24               	movwf	(calcSysVars@temp+1)& (0+255),b
  2805  00640E  0E00               	movlw	0
  2806  006410  0101               	movlb	1	; () banked
  2807  006412  6F25               	movwf	(calcSysVars@temp+2)& (0+255),b
  2808                           
  2809                           ; BSR set to: 1
  2810                           ;sysParams.h: 78: timsXcorte = (float)tiXcorte * 1000;
  2811  006414  C0B2  F114         	movff	_tiXcorte,___ftmul@f1
  2812  006418  C0B3  F115         	movff	_tiXcorte+1,___ftmul@f1+1
  2813  00641C  C0B4  F116         	movff	_tiXcorte+2,___ftmul@f1+2
  2814  006420  0E00               	movlw	0
  2815  006422  0101               	movlb	1	; () banked
  2816  006424  6F17               	movwf	___ftmul@f2& (0+255),b
  2817  006426  0E7A               	movlw	122
  2818  006428  0101               	movlb	1	; () banked
  2819  00642A  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  2820  00642C  0E44               	movlw	68
  2821  00642E  0101               	movlb	1	; () banked
  2822  006430  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  2823  006432  EC06  F01A         	call	___ftmul	;wreg free
  2824  006436  C114  F04D         	movff	?___ftmul,_timsXcorte
  2825  00643A  C115  F04E         	movff	?___ftmul+1,_timsXcorte+1
  2826  00643E  C116  F04F         	movff	?___ftmul+2,_timsXcorte+2
  2827                           
  2828                           ;sysParams.h: 84: kgXcorte = (float)velocidadMasa * tiXcorte;
  2829  006442  C0B5  F114         	movff	_velocidadMasa,___ftmul@f1
  2830  006446  C0B6  F115         	movff	_velocidadMasa+1,___ftmul@f1+1
  2831  00644A  C0B7  F116         	movff	_velocidadMasa+2,___ftmul@f1+2
  2832  00644E  C0B2  F117         	movff	_tiXcorte,___ftmul@f2
  2833  006452  C0B3  F118         	movff	_tiXcorte+1,___ftmul@f2+1
  2834  006456  C0B4  F119         	movff	_tiXcorte+2,___ftmul@f2+2
  2835  00645A  EC06  F01A         	call	___ftmul	;wreg free
  2836  00645E  C114  F0AC         	movff	?___ftmul,_kgXcorte
  2837  006462  C115  F0AD         	movff	?___ftmul+1,_kgXcorte+1
  2838  006466  C116  F0AE         	movff	?___ftmul+2,_kgXcorte+2
  2839  00646A  0012               	return		;funcret
  2840  00646C                     __end_of_calcSysVars:
  2841                           	opt stack 0
  2842                           tblptru	equ	0xFF8
  2843                           tblptrh	equ	0xFF7
  2844                           tblptrl	equ	0xFF6
  2845                           tablat	equ	0xFF5
  2846                           postinc0	equ	0xFEE
  2847                           wreg	equ	0xFE8
  2848                           postdec1	equ	0xFE5
  2849                           fsr1l	equ	0xFE1
  2850                           
  2851 ;; *************** function _setPWM2on *****************
  2852 ;; Defined at:
  2853 ;;		line 140 in file "source/PWMConfig.h"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;  on              1    wreg     unsigned char 
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;  on              1    0[BANK1 ] unsigned char 
  2858 ;; Return value:  Size  Location     Type
  2859 ;;                  1    wreg      void 
  2860 ;; Registers used:
  2861 ;;		wreg, status,2
  2862 ;; Tracked objects:
  2863 ;;		On entry : 0/0
  2864 ;;		On exit  : 0/0
  2865 ;;		Unchanged: 0/0
  2866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2867 ;;      Params:         0       0       0       0       0       0       0
  2868 ;;      Locals:         0       0       1       0       0       0       0
  2869 ;;      Temps:          0       0       0       0       0       0       0
  2870 ;;      Totals:         0       0       1       0       0       0       0
  2871 ;;Total ram usage:        1 bytes
  2872 ;; Hardware stack levels used:    1
  2873 ;; Hardware stack levels required when called:   12
  2874 ;; This function calls:
  2875 ;;		Nothing
  2876 ;; This function is called by:
  2877 ;;		_main
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           	psect	text5
  2882  006B98                     __ptext5:
  2883                           	opt stack 0
  2884  006B98                     _setPWM2on:
  2885                           	opt stack 18
  2886                           
  2887                           ;incstack = 0
  2888                           ;setPWM2on@on stored from wreg
  2889  006B98  0101               	movlb	1	; () banked
  2890  006B9A  6F00               	movwf	setPWM2on@on& (0+255),b
  2891                           
  2892                           ;PWMConfig.h: 141: if(on) {
  2893  006B9C  0101               	movlb	1	; () banked
  2894  006B9E  5100               	movf	setPWM2on@on& (0+255),w,b
  2895  006BA0  0101               	movlb	1	; () banked
  2896  006BA2  B4D8               	btfsc	status,2,c
  2897  006BA4  D003               	goto	l513
  2898                           
  2899                           ; BSR set to: 1
  2900                           ;PWMConfig.h: 142: TRISCbits.TRISC0 = 0;
  2901  006BA6  9094               	bcf	3988,0,c	;volatile
  2902                           
  2903                           ;PWMConfig.h: 143: TRISCbits.TRISC1 = 0;
  2904  006BA8  9294               	bcf	3988,1,c	;volatile
  2905                           
  2906                           ;PWMConfig.h: 144: }else {
  2907  006BAA  0012               	return	
  2908  006BAC                     l513:
  2909                           
  2910                           ; BSR set to: 1
  2911                           ;PWMConfig.h: 145: TRISCbits.TRISC0 = 1;
  2912  006BAC  8094               	bsf	3988,0,c	;volatile
  2913                           
  2914                           ;PWMConfig.h: 146: TRISCbits.TRISC1 = 1;
  2915  006BAE  8294               	bsf	3988,1,c	;volatile
  2916  006BB0  0012               	return	
  2917  006BB2                     __end_of_setPWM2on:
  2918                           	opt stack 0
  2919                           tblptru	equ	0xFF8
  2920                           tblptrh	equ	0xFF7
  2921                           tblptrl	equ	0xFF6
  2922                           tablat	equ	0xFF5
  2923                           postinc0	equ	0xFEE
  2924                           wreg	equ	0xFE8
  2925                           postdec1	equ	0xFE5
  2926                           fsr1l	equ	0xFE1
  2927                           status	equ	0xFD8
  2928                           
  2929 ;; *************** function _lcd_init *****************
  2930 ;; Defined at:
  2931 ;;		line 179 in file "source/../../vclib_lcd.h"
  2932 ;; Parameters:    Size  Location     Type
  2933 ;;		None
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  LCD_INIT_STR    4    9[BANK1 ] unsigned char [4]
  2936 ;;  i               1   13[BANK1 ] unsigned char 
  2937 ;; Return value:  Size  Location     Type
  2938 ;;                  1    wreg      void 
  2939 ;; Registers used:
  2940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2941 ;; Tracked objects:
  2942 ;;		On entry : 0/0
  2943 ;;		On exit  : 0/0
  2944 ;;		Unchanged: 0/0
  2945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2946 ;;      Params:         0       0       0       0       0       0       0
  2947 ;;      Locals:         0       0       5       0       0       0       0
  2948 ;;      Temps:          0       0       1       0       0       0       0
  2949 ;;      Totals:         0       0       6       0       0       0       0
  2950 ;;Total ram usage:        6 bytes
  2951 ;; Hardware stack levels used:    1
  2952 ;; Hardware stack levels required when called:   15
  2953 ;; This function calls:
  2954 ;;		_lcd_send_4bits
  2955 ;;		_lcd_send_byte
  2956 ;; This function is called by:
  2957 ;;		_main
  2958 ;; This function uses a non-reentrant model
  2959 ;;
  2960                           
  2961                           	psect	text6
  2962  00554C                     __ptext6:
  2963                           	opt stack 0
  2964  00554C                     _lcd_init:
  2965                           	opt stack 15
  2966                           
  2967                           ;vclib_lcd.h: 180: unsigned char i;
  2968                           ;vclib_lcd.h: 181: unsigned char LCD_INIT_STRING[4] = {0x20 | (2 << 2), 0xc, 1, 6};
  2969                           
  2970                           ; BSR set to: 1
  2971                           ;incstack = 0
  2972  00554C  C0A5  F109         	movff	lcd_init@F7567,lcd_init@LCD_INIT_STRING
  2973  005550  C0A6  F10A         	movff	lcd_init@F7567+1,lcd_init@LCD_INIT_STRING+1
  2974  005554  C0A7  F10B         	movff	lcd_init@F7567+2,lcd_init@LCD_INIT_STRING+2
  2975  005558  C0A8  F10C         	movff	lcd_init@F7567+3,lcd_init@LCD_INIT_STRING+3
  2976                           
  2977                           ;vclib_lcd.h: 184: PORTBbits.RB3 = 0;
  2978  00555C  9681               	bcf	3969,3,c	;volatile
  2979                           
  2980                           ;vclib_lcd.h: 185: PORTBbits.RB1 = 0;
  2981  00555E  9281               	bcf	3969,1,c	;volatile
  2982                           
  2983                           ;vclib_lcd.h: 186: PORTBbits.RB2 = 0;
  2984  005560  9481               	bcf	3969,2,c	;volatile
  2985                           
  2986                           ;vclib_lcd.h: 187: _delay((unsigned long)((15)*(16000000/4000.0)));
  2987  005562  0E4E               	movlw	78
  2988  005564  0101               	movlb	1	; () banked
  2989  005566  6F08               	movwf	??_lcd_init& (0+255),b
  2990  005568  0EEB               	movlw	235
  2991  00556A                     u18917:
  2992  00556A  2EE8               	decfsz	wreg,f,c
  2993  00556C  D7FE               	goto	u18917
  2994  00556E  2F08               	decfsz	??_lcd_init& (0+255),f,b
  2995  005570  D7FC               	goto	u18917
  2996  005572  F000               	nop	
  2997                           
  2998                           ;vclib_lcd.h: 188: for (i = 1; i <= 3; ++i) {
  2999  005574  0E01               	movlw	1
  3000  005576  0101               	movlb	1	; () banked
  3001  005578  6F0D               	movwf	lcd_init@i& (0+255),b
  3002  00557A                     l12005:
  3003                           
  3004                           ; BSR set to: 1
  3005  00557A  0E03               	movlw	3
  3006  00557C  0101               	movlb	1	; () banked
  3007  00557E  650D               	cpfsgt	lcd_init@i& (0+255),b
  3008  005580  D001               	goto	l12009
  3009  005582  D00F               	goto	l12017
  3010  005584                     l12009:
  3011                           
  3012                           ; BSR set to: 1
  3013                           ;vclib_lcd.h: 189: lcd_send_4bits(3);
  3014  005584  0E03               	movlw	3
  3015  005586  EC94  F02E         	call	_lcd_send_4bits
  3016                           
  3017                           ;vclib_lcd.h: 190: _delay((unsigned long)((5)*(16000000/4000.0)));
  3018  00558A  0E1A               	movlw	26
  3019  00558C  0101               	movlb	1	; () banked
  3020  00558E  6F08               	movwf	??_lcd_init& (0+255),b
  3021  005590  0EF8               	movlw	248
  3022  005592                     u18927:
  3023  005592  2EE8               	decfsz	wreg,f,c
  3024  005594  D7FE               	goto	u18927
  3025  005596  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3026  005598  D7FC               	goto	u18927
  3027  00559A  D000               	nop2	
  3028  00559C  0101               	movlb	1	; () banked
  3029  00559E  2B0D               	incf	lcd_init@i& (0+255),f,b
  3030  0055A0  D7EC               	goto	l12005
  3031  0055A2                     l12017:
  3032                           
  3033                           ; BSR set to: 1
  3034                           ;vclib_lcd.h: 191: }
  3035                           ;vclib_lcd.h: 192: lcd_send_4bits(2);
  3036  0055A2  0E02               	movlw	2
  3037  0055A4  EC94  F02E         	call	_lcd_send_4bits
  3038                           
  3039                           ;vclib_lcd.h: 193: _delay((unsigned long)((5)*(16000000/4000.0)));
  3040  0055A8  0E1A               	movlw	26
  3041  0055AA  0101               	movlb	1	; () banked
  3042  0055AC  6F08               	movwf	??_lcd_init& (0+255),b
  3043  0055AE  0EF8               	movlw	248
  3044  0055B0                     u18937:
  3045  0055B0  2EE8               	decfsz	wreg,f,c
  3046  0055B2  D7FE               	goto	u18937
  3047  0055B4  2F08               	decfsz	??_lcd_init& (0+255),f,b
  3048  0055B6  D7FC               	goto	u18937
  3049  0055B8  D000               	nop2	
  3050                           
  3051                           ;vclib_lcd.h: 194: for (i = 0; i <= 3; ++i)
  3052  0055BA  0E00               	movlw	0
  3053  0055BC  0101               	movlb	1	; () banked
  3054  0055BE  6F0D               	movwf	lcd_init@i& (0+255),b
  3055  0055C0                     l12023:
  3056                           
  3057                           ; BSR set to: 1
  3058  0055C0  0E03               	movlw	3
  3059  0055C2  0101               	movlb	1	; () banked
  3060  0055C4  650D               	cpfsgt	lcd_init@i& (0+255),b
  3061  0055C6  D001               	goto	l12027
  3062  0055C8  0012               	return	
  3063  0055CA                     l12027:
  3064                           
  3065                           ; BSR set to: 1
  3066                           ;vclib_lcd.h: 195: lcd_send_byte(0, LCD_INIT_STRING[i]);
  3067  0055CA  0101               	movlb	1	; () banked
  3068  0055CC  510D               	movf	lcd_init@i& (0+255),w,b
  3069  0055CE  0D01               	mullw	1
  3070  0055D0  0E09               	movlw	low lcd_init@LCD_INIT_STRING
  3071  0055D2  24F3               	addwf	prodl,w,c
  3072  0055D4  6ED9               	movwf	fsr2l,c
  3073  0055D6  0E01               	movlw	high lcd_init@LCD_INIT_STRING
  3074  0055D8  20F4               	addwfc	prodh,w,c
  3075  0055DA  6EDA               	movwf	fsr2h,c
  3076  0055DC  50DF               	movf	indf2,w,c
  3077  0055DE  0101               	movlb	1	; () banked
  3078  0055E0  6F05               	movwf	lcd_send_byte@n& (0+255),b
  3079  0055E2  0E00               	movlw	0
  3080  0055E4  EC4E  F034         	call	_lcd_send_byte
  3081  0055E8  0101               	movlb	1	; () banked
  3082  0055EA  2B0D               	incf	lcd_init@i& (0+255),f,b
  3083  0055EC  D7E9               	goto	l12023
  3084  0055EE                     __end_of_lcd_init:
  3085                           	opt stack 0
  3086                           tblptru	equ	0xFF8
  3087                           tblptrh	equ	0xFF7
  3088                           tblptrl	equ	0xFF6
  3089                           tablat	equ	0xFF5
  3090                           prodh	equ	0xFF4
  3091                           prodl	equ	0xFF3
  3092                           postinc0	equ	0xFEE
  3093                           wreg	equ	0xFE8
  3094                           postdec1	equ	0xFE5
  3095                           fsr1l	equ	0xFE1
  3096                           indf2	equ	0xFDF
  3097                           fsr2h	equ	0xFDA
  3098                           fsr2l	equ	0xFD9
  3099                           status	equ	0xFD8
  3100                           
  3101 ;; *************** function _ioInitStt *****************
  3102 ;; Defined at:
  3103 ;;		line 85 in file "source/IOConfig.h"
  3104 ;; Parameters:    Size  Location     Type
  3105 ;;		None
  3106 ;; Auto vars:     Size  Location     Type
  3107 ;;		None
  3108 ;; Return value:  Size  Location     Type
  3109 ;;                  1    wreg      void 
  3110 ;; Registers used:
  3111 ;;		None
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3117 ;;      Params:         0       0       0       0       0       0       0
  3118 ;;      Locals:         0       0       0       0       0       0       0
  3119 ;;      Temps:          0       0       0       0       0       0       0
  3120 ;;      Totals:         0       0       0       0       0       0       0
  3121 ;;Total ram usage:        0 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:   12
  3124 ;; This function calls:
  3125 ;;		Nothing
  3126 ;; This function is called by:
  3127 ;;		_main
  3128 ;; This function uses a non-reentrant model
  3129 ;;
  3130                           
  3131                           	psect	text7
  3132  006C7E                     __ptext7:
  3133                           	opt stack 0
  3134  006C7E                     _ioInitStt:
  3135                           	opt stack 18
  3136                           
  3137                           ;IOConfig.h: 86: LATCbits.LATC4 = 0;
  3138                           
  3139                           ; BSR set to: 1
  3140                           ;incstack = 0
  3141  006C7E  988B               	bcf	3979,4,c	;volatile
  3142                           
  3143                           ;IOConfig.h: 87: LATBbits.LATB0 = 0;
  3144  006C80  908A               	bcf	3978,0,c	;volatile
  3145                           
  3146                           ;IOConfig.h: 88: LATCbits.LATC5 = 0;
  3147  006C82  9A8B               	bcf	3979,5,c	;volatile
  3148  006C84  0012               	return		;funcret
  3149  006C86                     __end_of_ioInitStt:
  3150                           	opt stack 0
  3151                           tblptru	equ	0xFF8
  3152                           tblptrh	equ	0xFF7
  3153                           tblptrl	equ	0xFF6
  3154                           tablat	equ	0xFF5
  3155                           prodh	equ	0xFF4
  3156                           prodl	equ	0xFF3
  3157                           postinc0	equ	0xFEE
  3158                           wreg	equ	0xFE8
  3159                           postdec1	equ	0xFE5
  3160                           fsr1l	equ	0xFE1
  3161                           indf2	equ	0xFDF
  3162                           fsr2h	equ	0xFDA
  3163                           fsr2l	equ	0xFD9
  3164                           status	equ	0xFD8
  3165                           
  3166 ;; *************** function _ioConfig *****************
  3167 ;; Defined at:
  3168 ;;		line 68 in file "source/IOConfig.h"
  3169 ;; Parameters:    Size  Location     Type
  3170 ;;		None
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;		None
  3173 ;; Return value:  Size  Location     Type
  3174 ;;                  1    wreg      void 
  3175 ;; Registers used:
  3176 ;;		None
  3177 ;; Tracked objects:
  3178 ;;		On entry : 0/0
  3179 ;;		On exit  : 0/0
  3180 ;;		Unchanged: 0/0
  3181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3182 ;;      Params:         0       0       0       0       0       0       0
  3183 ;;      Locals:         0       0       0       0       0       0       0
  3184 ;;      Temps:          0       0       0       0       0       0       0
  3185 ;;      Totals:         0       0       0       0       0       0       0
  3186 ;;Total ram usage:        0 bytes
  3187 ;; Hardware stack levels used:    1
  3188 ;; Hardware stack levels required when called:   12
  3189 ;; This function calls:
  3190 ;;		Nothing
  3191 ;; This function is called by:
  3192 ;;		_main
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           	psect	text8
  3197  00694C                     __ptext8:
  3198                           	opt stack 0
  3199  00694C                     _ioConfig:
  3200                           	opt stack 18
  3201                           
  3202                           ;IOConfig.h: 69: TRISBbits.TRISB1 = 0;
  3203                           
  3204                           ;incstack = 0
  3205  00694C  9293               	bcf	3987,1,c	;volatile
  3206                           
  3207                           ;IOConfig.h: 70: TRISBbits.TRISB2 = 0;
  3208  00694E  9493               	bcf	3987,2,c	;volatile
  3209                           
  3210                           ;IOConfig.h: 71: TRISBbits.TRISB3 = 0;
  3211  006950  9693               	bcf	3987,3,c	;volatile
  3212                           
  3213                           ;IOConfig.h: 72: TRISBbits.TRISB0 = 0;
  3214  006952  9093               	bcf	3987,0,c	;volatile
  3215                           
  3216                           ;IOConfig.h: 73: TRISCbits.TRISC5 = 0;
  3217  006954  9A94               	bcf	3988,5,c	;volatile
  3218                           
  3219                           ;IOConfig.h: 74: TRISAbits.TRISA7 = 1;
  3220  006956  8E92               	bsf	3986,7,c	;volatile
  3221                           
  3222                           ;IOConfig.h: 75: TRISAbits.TRISA6 = 1;
  3223  006958  8C92               	bsf	3986,6,c	;volatile
  3224                           
  3225                           ;IOConfig.h: 76: TRISCbits.TRISC2 = 1; ANSELCbits.ANSC2 = 0;
  3226  00695A  8494               	bsf	3988,2,c	;volatile
  3227  00695C  010F               	movlb	15	; () banked
  3228  00695E  953A               	bcf	58,2,b	;volatile
  3229                           
  3230                           ;IOConfig.h: 77: TRISCbits.TRISC3 = 1; ANSELCbits.ANSC3 = 0;
  3231  006960  8694               	bsf	3988,3,c	;volatile
  3232  006962  010F               	movlb	15	; () banked
  3233  006964  973A               	bcf	58,3,b	;volatile
  3234                           
  3235                           ;IOConfig.h: 78: TRISAbits.TRISA2 = 1; ANSELAbits.ANSA2 = 0;
  3236  006966  8492               	bsf	3986,2,c	;volatile
  3237  006968  010F               	movlb	15	; () banked
  3238  00696A  9538               	bcf	56,2,b	;volatile
  3239                           
  3240                           ;IOConfig.h: 79: TRISAbits.TRISA3 = 1; ANSELAbits.ANSA3 = 0;
  3241  00696C  8692               	bsf	3986,3,c	;volatile
  3242  00696E  010F               	movlb	15	; () banked
  3243  006970  9738               	bcf	56,3,b	;volatile
  3244                           
  3245                           ;IOConfig.h: 80: TRISAbits.TRISA4 = 1;
  3246  006972  8892               	bsf	3986,4,c	;volatile
  3247                           
  3248                           ;IOConfig.h: 81: TRISAbits.TRISA5 = 1; ANSELAbits.ANSA5 = 0;
  3249  006974  8A92               	bsf	3986,5,c	;volatile
  3250  006976  010F               	movlb	15	; () banked
  3251  006978  9B38               	bcf	56,5,b	;volatile
  3252                           
  3253                           ;IOConfig.h: 82: TRISCbits.TRISC4 = 0;
  3254  00697A  9894               	bcf	3988,4,c	;volatile
  3255                           
  3256                           ; BSR set to: 15
  3257  00697C  0012               	return		;funcret
  3258  00697E                     __end_of_ioConfig:
  3259                           	opt stack 0
  3260                           tblptru	equ	0xFF8
  3261                           tblptrh	equ	0xFF7
  3262                           tblptrl	equ	0xFF6
  3263                           tablat	equ	0xFF5
  3264                           prodh	equ	0xFF4
  3265                           prodl	equ	0xFF3
  3266                           postinc0	equ	0xFEE
  3267                           wreg	equ	0xFE8
  3268                           postdec1	equ	0xFE5
  3269                           fsr1l	equ	0xFE1
  3270                           indf2	equ	0xFDF
  3271                           fsr2h	equ	0xFDA
  3272                           fsr2l	equ	0xFD9
  3273                           status	equ	0xFD8
  3274                           
  3275 ;; *************** function _interruptConfig *****************
  3276 ;; Defined at:
  3277 ;;		line 89 in file "source/SYSConfig.h"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;		None
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;		None
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      void 
  3284 ;; Registers used:
  3285 ;;		None
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3291 ;;      Params:         0       0       0       0       0       0       0
  3292 ;;      Locals:         0       0       0       0       0       0       0
  3293 ;;      Temps:          0       0       0       0       0       0       0
  3294 ;;      Totals:         0       0       0       0       0       0       0
  3295 ;;Total ram usage:        0 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:   12
  3298 ;; This function calls:
  3299 ;;		Nothing
  3300 ;; This function is called by:
  3301 ;;		_main
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           	psect	text9
  3306  006C86                     __ptext9:
  3307                           	opt stack 0
  3308  006C86                     _interruptConfig:
  3309                           	opt stack 18
  3310                           
  3311                           ;SYSConfig.h: 90: RCONbits.IPEN = 1;
  3312                           
  3313                           ; BSR set to: 15
  3314                           ;incstack = 0
  3315  006C86  8ED0               	bsf	4048,7,c	;volatile
  3316                           
  3317                           ;SYSConfig.h: 91: INTCONbits.PEIE = 1;
  3318  006C88  8CF2               	bsf	intcon,6,c	;volatile
  3319                           
  3320                           ;SYSConfig.h: 92: INTCONbits.GIE = 1;
  3321  006C8A  8EF2               	bsf	intcon,7,c	;volatile
  3322  006C8C  0012               	return		;funcret
  3323  006C8E                     __end_of_interruptConfig:
  3324                           	opt stack 0
  3325                           tblptru	equ	0xFF8
  3326                           tblptrh	equ	0xFF7
  3327                           tblptrl	equ	0xFF6
  3328                           tablat	equ	0xFF5
  3329                           prodh	equ	0xFF4
  3330                           prodl	equ	0xFF3
  3331                           intcon	equ	0xFF2
  3332                           postinc0	equ	0xFEE
  3333                           wreg	equ	0xFE8
  3334                           postdec1	equ	0xFE5
  3335                           fsr1l	equ	0xFE1
  3336                           indf2	equ	0xFDF
  3337                           fsr2h	equ	0xFDA
  3338                           fsr2l	equ	0xFD9
  3339                           status	equ	0xFD8
  3340                           
  3341 ;; *************** function _drawScreen *****************
  3342 ;; Defined at:
  3343 ;;		line 249 in file "source/screenDrawers.h"
  3344 ;; Parameters:    Size  Location     Type
  3345 ;;		None
  3346 ;; Auto vars:     Size  Location     Type
  3347 ;;		None
  3348 ;; Return value:  Size  Location     Type
  3349 ;;                  1    wreg      void 
  3350 ;; Registers used:
  3351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3352 ;; Tracked objects:
  3353 ;;		On entry : 0/0
  3354 ;;		On exit  : 0/0
  3355 ;;		Unchanged: 0/0
  3356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3357 ;;      Params:         0       0       0       0       0       0       0
  3358 ;;      Locals:         0       0       0       0       0       0       0
  3359 ;;      Temps:          0       0       0       0       0       0       0
  3360 ;;      Totals:         0       0       0       0       0       0       0
  3361 ;;Total ram usage:        0 bytes
  3362 ;; Hardware stack levels used:    1
  3363 ;; Hardware stack levels required when called:   21
  3364 ;; This function calls:
  3365 ;;		_drawAdvON
  3366 ;;		_drawAutoCalibRM
  3367 ;;		_drawBadPass
  3368 ;;		_drawCalibProc
  3369 ;;		_drawChanVal
  3370 ;;		_drawMenu
  3371 ;;		_drawPassWord
  3372 ;;		_drawSNquest
  3373 ;; This function is called by:
  3374 ;;		_main
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           	psect	text10
  3379  00533A                     __ptext10:
  3380                           	opt stack 0
  3381  00533A                     _drawScreen:
  3382                           	opt stack 9
  3383                           
  3384                           ;screenDrawers.h: 250: switch (actualScreen) {
  3385                           
  3386                           ;incstack = 0
  3387  00533A  D02F               	goto	l12081
  3388  00533C                     l12053:
  3389                           
  3390                           ;screenDrawers.h: 252: drawMenu(0);
  3391  00533C  0E00               	movlw	0
  3392  00533E  ECF4  F014         	call	_drawMenu
  3393                           
  3394                           ;screenDrawers.h: 253: break;
  3395  005342  0012               	return	
  3396  005344                     l12055:
  3397                           
  3398                           ;screenDrawers.h: 255: drawPassWord();
  3399  005344  EC50  F025         	call	_drawPassWord	;wreg free
  3400                           
  3401                           ;screenDrawers.h: 256: break;
  3402  005348  0012               	return	
  3403  00534A                     l12057:
  3404                           
  3405                           ;screenDrawers.h: 258: drawBadPass();
  3406  00534A  ECF0  F035         	call	_drawBadPass	;wreg free
  3407                           
  3408                           ;screenDrawers.h: 259: break;
  3409  00534E  0012               	return	
  3410  005350                     l12059:
  3411                           
  3412                           ;screenDrawers.h: 261: drawMenu(1);
  3413  005350  0E01               	movlw	1
  3414  005352  ECF4  F014         	call	_drawMenu
  3415                           
  3416                           ;screenDrawers.h: 262: break;
  3417  005356  0012               	return	
  3418  005358                     l12061:
  3419                           
  3420                           ;screenDrawers.h: 264: drawAdvON(1);
  3421  005358  0E01               	movlw	1
  3422  00535A  EC4E  F033         	call	_drawAdvON
  3423                           
  3424                           ;screenDrawers.h: 265: break;
  3425  00535E  0012               	return	
  3426  005360                     l12063:
  3427                           
  3428                           ;screenDrawers.h: 267: drawAdvON(0);
  3429  005360  0E00               	movlw	0
  3430  005362  EC4E  F033         	call	_drawAdvON
  3431                           
  3432                           ;screenDrawers.h: 268: break;
  3433  005366  0012               	return	
  3434  005368                     l12065:
  3435                           
  3436                           ;screenDrawers.h: 270: drawChanVal();
  3437  005368  EC25  F028         	call	_drawChanVal	;wreg free
  3438                           
  3439                           ;screenDrawers.h: 271: break;
  3440  00536C  0012               	return	
  3441  00536E                     l12067:
  3442                           
  3443                           ;screenDrawers.h: 273: drawSNquest(0);
  3444  00536E  0E00               	movlw	0
  3445  005370  ECD8  F024         	call	_drawSNquest
  3446                           
  3447                           ;screenDrawers.h: 274: break;
  3448  005374  0012               	return	
  3449  005376                     l12069:
  3450                           
  3451                           ;screenDrawers.h: 276: drawSNquest(1);
  3452  005376  0E01               	movlw	1
  3453  005378  ECD8  F024         	call	_drawSNquest
  3454                           
  3455                           ;screenDrawers.h: 277: break;
  3456  00537C  0012               	return	
  3457  00537E                     l12071:
  3458                           
  3459                           ;screenDrawers.h: 279: drawSNquest(2);
  3460  00537E  0E02               	movlw	2
  3461  005380  ECD8  F024         	call	_drawSNquest
  3462                           
  3463                           ;screenDrawers.h: 280: break;
  3464  005384  0012               	return	
  3465  005386                     l12073:
  3466                           
  3467                           ;screenDrawers.h: 282: drawSNquest(3);
  3468  005386  0E03               	movlw	3
  3469  005388  ECD8  F024         	call	_drawSNquest
  3470                           
  3471                           ;screenDrawers.h: 283: break;
  3472  00538C  0012               	return	
  3473  00538E                     l12075:
  3474                           
  3475                           ;screenDrawers.h: 285: drawCalibProc();
  3476  00538E  EC69  F02F         	call	_drawCalibProc	;wreg free
  3477                           
  3478                           ;screenDrawers.h: 286: break;
  3479  005392  0012               	return	
  3480  005394                     l12077:
  3481                           
  3482                           ;screenDrawers.h: 288: drawAutoCalibRM();
  3483  005394  ECBF  F034         	call	_drawAutoCalibRM	;wreg free
  3484                           
  3485                           ;screenDrawers.h: 290: }
  3486                           ;screenDrawers.h: 291: }
  3487                           
  3488                           ;screenDrawers.h: 289: break;
  3489  005398  0012               	return	
  3490  00539A                     l12081:
  3491  00539A  0101               	movlb	1	; () banked
  3492  00539C  51BA               	movf	_actualScreen& (0+255),w,b
  3493                           
  3494                           ; Switch size 1, requested type "space"
  3495                           ; Number of cases is 13, Range of values is 0 to 12
  3496                           ; switch strategies available:
  3497                           ; Name         Instructions Cycles
  3498                           ; simple_byte           40    21 (average)
  3499                           ;	Chosen strategy is simple_byte
  3500  00539E  0A00               	xorlw	0	; case 0
  3501  0053A0  B4D8               	btfsc	status,2,c
  3502  0053A2  D7CC               	goto	l12053
  3503  0053A4  0A01               	xorlw	1	; case 1
  3504  0053A6  B4D8               	btfsc	status,2,c
  3505  0053A8  D7CD               	goto	l12055
  3506  0053AA  0A03               	xorlw	3	; case 2
  3507  0053AC  B4D8               	btfsc	status,2,c
  3508  0053AE  D7DF               	goto	l12067
  3509  0053B0  0A01               	xorlw	1	; case 3
  3510  0053B2  B4D8               	btfsc	status,2,c
  3511  0053B4  D7E0               	goto	l12069
  3512  0053B6  0A07               	xorlw	7	; case 4
  3513  0053B8  B4D8               	btfsc	status,2,c
  3514  0053BA  D7CA               	goto	l12059
  3515  0053BC  0A01               	xorlw	1	; case 5
  3516  0053BE  B4D8               	btfsc	status,2,c
  3517  0053C0  D7D3               	goto	l12065
  3518  0053C2  0A03               	xorlw	3	; case 6
  3519  0053C4  B4D8               	btfsc	status,2,c
  3520  0053C6  D7E3               	goto	l12075
  3521  0053C8  0A01               	xorlw	1	; case 7
  3522  0053CA  B4D8               	btfsc	status,2,c
  3523  0053CC  D7BE               	goto	l12057
  3524  0053CE  0A0F               	xorlw	15	; case 8
  3525  0053D0  B4D8               	btfsc	status,2,c
  3526  0053D2  D7C2               	goto	l12061
  3527  0053D4  0A01               	xorlw	1	; case 9
  3528  0053D6  B4D8               	btfsc	status,2,c
  3529  0053D8  D7C3               	goto	l12063
  3530  0053DA  0A03               	xorlw	3	; case 10
  3531  0053DC  B4D8               	btfsc	status,2,c
  3532  0053DE  D7CF               	goto	l12071
  3533  0053E0  0A01               	xorlw	1	; case 11
  3534  0053E2  B4D8               	btfsc	status,2,c
  3535  0053E4  D7D0               	goto	l12073
  3536  0053E6  0A07               	xorlw	7	; case 12
  3537  0053E8  A4D8               	btfss	status,2,c
  3538  0053EA  0012               	return	
  3539  0053EC  D7D3               	goto	l12077
  3540  0053EE                     __end_of_drawScreen:
  3541                           	opt stack 0
  3542                           tblptru	equ	0xFF8
  3543                           tblptrh	equ	0xFF7
  3544                           tblptrl	equ	0xFF6
  3545                           tablat	equ	0xFF5
  3546                           prodh	equ	0xFF4
  3547                           prodl	equ	0xFF3
  3548                           intcon	equ	0xFF2
  3549                           postinc0	equ	0xFEE
  3550                           wreg	equ	0xFE8
  3551                           postdec1	equ	0xFE5
  3552                           fsr1l	equ	0xFE1
  3553                           indf2	equ	0xFDF
  3554                           fsr2h	equ	0xFDA
  3555                           fsr2l	equ	0xFD9
  3556                           status	equ	0xFD8
  3557                           
  3558 ;; *************** function _drawSNquest *****************
  3559 ;; Defined at:
  3560 ;;		line 211 in file "source/screenDrawers.h"
  3561 ;; Parameters:    Size  Location     Type
  3562 ;;  tq              1    wreg     unsigned char 
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;  tq              1  118[BANK1 ] unsigned char 
  3565 ;;  i               2  116[BANK1 ] int 
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  1    wreg      void 
  3568 ;; Registers used:
  3569 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3575 ;;      Params:         0       0       0       0       0       0       0
  3576 ;;      Locals:         0       0       3       0       0       0       0
  3577 ;;      Temps:          0       0       0       0       0       0       0
  3578 ;;      Totals:         0       0       3       0       0       0       0
  3579 ;;Total ram usage:        3 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; Hardware stack levels required when called:   19
  3582 ;; This function calls:
  3583 ;;		_lcd_gotoxy
  3584 ;;		_printf
  3585 ;; This function is called by:
  3586 ;;		_drawScreen
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	text11
  3591  0049B0                     __ptext11:
  3592                           	opt stack 0
  3593  0049B0                     _drawSNquest:
  3594                           	opt stack 10
  3595                           
  3596                           ;incstack = 0
  3597                           ;drawSNquest@tq stored from wreg
  3598  0049B0  0101               	movlb	1	; () banked
  3599  0049B2  6F76               	movwf	drawSNquest@tq& (0+255),b
  3600                           
  3601                           ;screenDrawers.h: 212: int i;
  3602                           ;screenDrawers.h: 213: for (i = 0; i < 2; i++)
  3603  0049B4  0E00               	movlw	0
  3604  0049B6  0101               	movlb	1	; () banked
  3605  0049B8  6F75               	movwf	(drawSNquest@i+1)& (0+255),b
  3606  0049BA  0E00               	movlw	0
  3607  0049BC  6F74               	movwf	drawSNquest@i& (0+255),b
  3608  0049BE                     l11055:
  3609                           
  3610                           ; BSR set to: 1
  3611  0049BE  0101               	movlb	1	; () banked
  3612  0049C0  BF75               	btfsc	(drawSNquest@i+1)& (0+255),7,b
  3613  0049C2  D008               	goto	l11059
  3614  0049C4  0101               	movlb	1	; () banked
  3615  0049C6  5175               	movf	(drawSNquest@i+1)& (0+255),w,b
  3616  0049C8  E113               	bnz	l11065
  3617  0049CA  0E02               	movlw	2
  3618  0049CC  0101               	movlb	1	; () banked
  3619  0049CE  5D74               	subwf	drawSNquest@i& (0+255),w,b
  3620  0049D0  B0D8               	btfsc	status,0,c
  3621  0049D2  D00E               	goto	l11065
  3622  0049D4                     l11059:
  3623                           
  3624                           ; BSR set to: 1
  3625                           ;screenDrawers.h: 214: questSN[i] = ' ';
  3626  0049D4  0EB3               	movlw	low _questSN
  3627  0049D6  0101               	movlb	1	; () banked
  3628  0049D8  2574               	addwf	drawSNquest@i& (0+255),w,b
  3629  0049DA  6ED9               	movwf	fsr2l,c
  3630  0049DC  0E01               	movlw	high _questSN
  3631  0049DE  0101               	movlb	1	; () banked
  3632  0049E0  2175               	addwfc	(drawSNquest@i+1)& (0+255),w,b
  3633  0049E2  6EDA               	movwf	fsr2h,c
  3634  0049E4  0E20               	movlw	32
  3635  0049E6  6EDF               	movwf	indf2,c
  3636                           
  3637                           ; BSR set to: 1
  3638  0049E8  0101               	movlb	1	; () banked
  3639  0049EA  4B74               	infsnz	drawSNquest@i& (0+255),f,b
  3640  0049EC  2B75               	incf	(drawSNquest@i+1)& (0+255),f,b
  3641  0049EE  D7E7               	goto	l11055
  3642  0049F0                     l11065:
  3643                           
  3644                           ; BSR set to: 1
  3645                           ;screenDrawers.h: 215: questSN[selSN] = flech;
  3646  0049F0  0101               	movlb	1	; () banked
  3647  0049F2  51C3               	movf	_selSN& (0+255),w,b
  3648  0049F4  0D01               	mullw	1
  3649  0049F6  0EB3               	movlw	low _questSN
  3650  0049F8  24F3               	addwf	prodl,w,c
  3651  0049FA  6ED9               	movwf	fsr2l,c
  3652  0049FC  0E01               	movlw	high _questSN
  3653  0049FE  20F4               	addwfc	prodh,w,c
  3654  004A00  6EDA               	movwf	fsr2h,c
  3655  004A02  C195  FFDF         	movff	_flech,indf2
  3656                           
  3657                           ; BSR set to: 1
  3658                           ;screenDrawers.h: 216: lcd_gotoxy(1, 1);
  3659  004A06  0E01               	movlw	1
  3660  004A08  0101               	movlb	1	; () banked
  3661  004A0A  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  3662  004A0C  0E01               	movlw	1
  3663  004A0E  ECF1  F034         	call	_lcd_gotoxy
  3664                           
  3665                           ;screenDrawers.h: 217: if (tq == 0)
  3666  004A12  0101               	movlb	1	; () banked
  3667  004A14  5176               	movf	drawSNquest@tq& (0+255),w,b
  3668  004A16  0101               	movlb	1	; () banked
  3669  004A18  A4D8               	btfss	status,2,c
  3670  004A1A  D009               	goto	l11073
  3671                           
  3672                           ; BSR set to: 1
  3673                           ;screenDrawers.h: 218: printf("Iniciar Proceso?\n");
  3674  004A1C  0E8B               	movlw	low STR_30
  3675  004A1E  0101               	movlb	1	; () banked
  3676  004A20  6F3F               	movwf	printf@f& (0+255),b
  3677  004A22  0E7E               	movlw	high STR_30
  3678  004A24  0101               	movlb	1	; () banked
  3679  004A26  6F40               	movwf	(printf@f+1)& (0+255),b
  3680  004A28  EC61  F000         	call	_printf	;wreg free
  3681  004A2C  D028               	goto	l416
  3682  004A2E                     l11073:
  3683                           
  3684                           ;screenDrawers.h: 219: else if(tq == 1)
  3685  004A2E  0101               	movlb	1	; () banked
  3686  004A30  0576               	decf	drawSNquest@tq& (0+255),w,b
  3687  004A32  A4D8               	btfss	status,2,c
  3688  004A34  D009               	goto	l11077
  3689                           
  3690                           ; BSR set to: 1
  3691                           ;screenDrawers.h: 220: printf("Detener Proceso?\n");
  3692  004A36  0E9D               	movlw	low STR_31
  3693  004A38  0101               	movlb	1	; () banked
  3694  004A3A  6F3F               	movwf	printf@f& (0+255),b
  3695  004A3C  0E7E               	movlw	high STR_31
  3696  004A3E  0101               	movlb	1	; () banked
  3697  004A40  6F40               	movwf	(printf@f+1)& (0+255),b
  3698  004A42  EC61  F000         	call	_printf	;wreg free
  3699  004A46  D01B               	goto	l416
  3700  004A48                     l11077:
  3701                           
  3702                           ;screenDrawers.h: 221: else if(tq == 2)
  3703  004A48  0E02               	movlw	2
  3704  004A4A  0101               	movlb	1	; () banked
  3705  004A4C  1976               	xorwf	drawSNquest@tq& (0+255),w,b
  3706  004A4E  A4D8               	btfss	status,2,c
  3707  004A50  D009               	goto	l11081
  3708                           
  3709                           ; BSR set to: 1
  3710                           ;screenDrawers.h: 222: printf("Guardar Cambio? \n");
  3711  004A52  0E43               	movlw	low STR_32
  3712  004A54  0101               	movlb	1	; () banked
  3713  004A56  6F3F               	movwf	printf@f& (0+255),b
  3714  004A58  0E7E               	movlw	high STR_32
  3715  004A5A  0101               	movlb	1	; () banked
  3716  004A5C  6F40               	movwf	(printf@f+1)& (0+255),b
  3717  004A5E  EC61  F000         	call	_printf	;wreg free
  3718  004A62  D00D               	goto	l416
  3719  004A64                     l11081:
  3720                           
  3721                           ;screenDrawers.h: 223: else if(tq == 3)
  3722  004A64  0E03               	movlw	3
  3723  004A66  0101               	movlb	1	; () banked
  3724  004A68  1976               	xorwf	drawSNquest@tq& (0+255),w,b
  3725  004A6A  A4D8               	btfss	status,2,c
  3726  004A6C  D008               	goto	l416
  3727                           
  3728                           ; BSR set to: 1
  3729                           ;screenDrawers.h: 224: printf("Init AutoCalib? \n");
  3730  004A6E  0E31               	movlw	low STR_33
  3731  004A70  0101               	movlb	1	; () banked
  3732  004A72  6F3F               	movwf	printf@f& (0+255),b
  3733  004A74  0E7E               	movlw	high STR_33
  3734  004A76  0101               	movlb	1	; () banked
  3735  004A78  6F40               	movwf	(printf@f+1)& (0+255),b
  3736  004A7A  EC61  F000         	call	_printf	;wreg free
  3737  004A7E                     l416:
  3738                           
  3739                           ;screenDrawers.h: 225: printf("   %cSI    %cNO   ", questSN[0], questSN[1]);
  3740  004A7E  0EC4               	movlw	low STR_34
  3741  004A80  0101               	movlb	1	; () banked
  3742  004A82  6F3F               	movwf	printf@f& (0+255),b
  3743  004A84  0E7D               	movlw	high STR_34
  3744  004A86  0101               	movlb	1	; () banked
  3745  004A88  6F40               	movwf	(printf@f+1)& (0+255),b
  3746  004A8A  C1B3  F141         	movff	_questSN,?_printf+2
  3747  004A8E  0101               	movlb	1	; () banked
  3748  004A90  6B42               	clrf	(?_printf+3)& (0+255),b
  3749  004A92  C1B4  F143         	movff	_questSN+1,?_printf+4
  3750  004A96  0101               	movlb	1	; () banked
  3751  004A98  6B44               	clrf	(?_printf+5)& (0+255),b
  3752  004A9A  EC61  F000         	call	_printf	;wreg free
  3753  004A9E  0012               	return		;funcret
  3754  004AA0                     __end_of_drawSNquest:
  3755                           	opt stack 0
  3756                           tblptru	equ	0xFF8
  3757                           tblptrh	equ	0xFF7
  3758                           tblptrl	equ	0xFF6
  3759                           tablat	equ	0xFF5
  3760                           prodh	equ	0xFF4
  3761                           prodl	equ	0xFF3
  3762                           intcon	equ	0xFF2
  3763                           postinc0	equ	0xFEE
  3764                           wreg	equ	0xFE8
  3765                           postdec1	equ	0xFE5
  3766                           fsr1l	equ	0xFE1
  3767                           indf2	equ	0xFDF
  3768                           fsr2h	equ	0xFDA
  3769                           fsr2l	equ	0xFD9
  3770                           status	equ	0xFD8
  3771                           
  3772 ;; *************** function _drawPassWord *****************
  3773 ;; Defined at:
  3774 ;;		line 179 in file "source/screenDrawers.h"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;		None
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;  i               2  116[BANK1 ] int 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      void 
  3781 ;; Registers used:
  3782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3788 ;;      Params:         0       0       0       0       0       0       0
  3789 ;;      Locals:         0       0       2       0       0       0       0
  3790 ;;      Temps:          0       0       0       0       0       0       0
  3791 ;;      Totals:         0       0       2       0       0       0       0
  3792 ;;Total ram usage:        2 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:   20
  3795 ;; This function calls:
  3796 ;;		_drawPass1Lin
  3797 ;;		_printf
  3798 ;; This function is called by:
  3799 ;;		_drawScreen
  3800 ;; This function uses a non-reentrant model
  3801 ;;
  3802                           
  3803                           	psect	text12
  3804  004AA0                     __ptext12:
  3805                           	opt stack 0
  3806  004AA0                     _drawPassWord:
  3807                           	opt stack 9
  3808                           
  3809                           ;screenDrawers.h: 180: if (!fd) {
  3810                           
  3811                           ;incstack = 0
  3812  004AA0  0101               	movlb	1	; () banked
  3813  004AA2  51BC               	movf	_fd& (0+255),w,b
  3814  004AA4  A4D8               	btfss	status,2,c
  3815  004AA6  D012               	goto	l399
  3816                           
  3817                           ; BSR set to: 1
  3818                           ;screenDrawers.h: 181: passSection = 0;
  3819  004AA8  0E00               	movlw	0
  3820  004AAA  0101               	movlb	1	; () banked
  3821  004AAC  6FC2               	movwf	_passSection& (0+255),b
  3822                           
  3823                           ;screenDrawers.h: 182: introducido[0] = 0;
  3824  004AAE  0E00               	movlw	0
  3825  004AB0  0101               	movlb	1	; () banked
  3826  004AB2  6FA6               	movwf	_introducido& (0+255),b
  3827                           
  3828                           ;screenDrawers.h: 183: introducido[1] = 0;
  3829  004AB4  0E00               	movlw	0
  3830  004AB6  0101               	movlb	1	; () banked
  3831  004AB8  6FA7               	movwf	(_introducido+1)& (0+255),b
  3832                           
  3833                           ;screenDrawers.h: 184: introducido[2] = 0;
  3834  004ABA  0E00               	movlw	0
  3835  004ABC  0101               	movlb	1	; () banked
  3836  004ABE  6FA8               	movwf	(_introducido+2)& (0+255),b
  3837                           
  3838                           ;screenDrawers.h: 185: introducido[3] = 0;
  3839  004AC0  0E00               	movlw	0
  3840  004AC2  0101               	movlb	1	; () banked
  3841  004AC4  6FA9               	movwf	(_introducido+3)& (0+255),b
  3842                           
  3843                           ;screenDrawers.h: 186: fd = 1;
  3844  004AC6  0E01               	movlw	1
  3845  004AC8  0101               	movlb	1	; () banked
  3846  004ACA  6FBC               	movwf	_fd& (0+255),b
  3847  004ACC                     l399:
  3848                           
  3849                           ; BSR set to: 1
  3850                           ;screenDrawers.h: 187: }
  3851                           ;screenDrawers.h: 188: int i;
  3852                           ;screenDrawers.h: 189: for (i = 0; i < 4; i++)
  3853  004ACC  0E00               	movlw	0
  3854  004ACE  0101               	movlb	1	; () banked
  3855  004AD0  6F75               	movwf	(drawPassWord@i+1)& (0+255),b
  3856  004AD2  0E00               	movlw	0
  3857  004AD4  6F74               	movwf	drawPassWord@i& (0+255),b
  3858  004AD6                     l11025:
  3859                           
  3860                           ; BSR set to: 1
  3861  004AD6  0101               	movlb	1	; () banked
  3862  004AD8  BF75               	btfsc	(drawPassWord@i+1)& (0+255),7,b
  3863  004ADA  D008               	goto	l11029
  3864  004ADC  0101               	movlb	1	; () banked
  3865  004ADE  5175               	movf	(drawPassWord@i+1)& (0+255),w,b
  3866  004AE0  E113               	bnz	l11035
  3867  004AE2  0E04               	movlw	4
  3868  004AE4  0101               	movlb	1	; () banked
  3869  004AE6  5D74               	subwf	drawPassWord@i& (0+255),w,b
  3870  004AE8  B0D8               	btfsc	status,0,c
  3871  004AEA  D00E               	goto	l11035
  3872  004AEC                     l11029:
  3873                           
  3874                           ; BSR set to: 1
  3875                           ;screenDrawers.h: 190: passChar[i] = ' ';
  3876  004AEC  0EAA               	movlw	low _passChar
  3877  004AEE  0101               	movlb	1	; () banked
  3878  004AF0  2574               	addwf	drawPassWord@i& (0+255),w,b
  3879  004AF2  6ED9               	movwf	fsr2l,c
  3880  004AF4  0E01               	movlw	high _passChar
  3881  004AF6  0101               	movlb	1	; () banked
  3882  004AF8  2175               	addwfc	(drawPassWord@i+1)& (0+255),w,b
  3883  004AFA  6EDA               	movwf	fsr2h,c
  3884  004AFC  0E20               	movlw	32
  3885  004AFE  6EDF               	movwf	indf2,c
  3886                           
  3887                           ; BSR set to: 1
  3888  004B00  0101               	movlb	1	; () banked
  3889  004B02  4B74               	infsnz	drawPassWord@i& (0+255),f,b
  3890  004B04  2B75               	incf	(drawPassWord@i+1)& (0+255),f,b
  3891  004B06  D7E7               	goto	l11025
  3892  004B08                     l11035:
  3893                           
  3894                           ; BSR set to: 1
  3895                           ;screenDrawers.h: 191: passChar[passSection] = flech;
  3896  004B08  0101               	movlb	1	; () banked
  3897  004B0A  51C2               	movf	_passSection& (0+255),w,b
  3898  004B0C  0D01               	mullw	1
  3899  004B0E  0EAA               	movlw	low _passChar
  3900  004B10  24F3               	addwf	prodl,w,c
  3901  004B12  6ED9               	movwf	fsr2l,c
  3902  004B14  0E01               	movlw	high _passChar
  3903  004B16  20F4               	addwfc	prodh,w,c
  3904  004B18  6EDA               	movwf	fsr2h,c
  3905  004B1A  C195  FFDF         	movff	_flech,indf2
  3906                           
  3907                           ; BSR set to: 1
  3908                           ;screenDrawers.h: 192: drawPass1Lin();
  3909  004B1E  ECBD  F035         	call	_drawPass1Lin	;wreg free
  3910                           
  3911                           ;screenDrawers.h: 193: printf("    %c%u%c%u%c%u%c%u    ", passChar[0], introducido[0], p
      +                          assChar[1], introducido[1],
  3912                           ;screenDrawers.h: 194: passChar[2], introducido[2], passChar[3], introducido[3]);
  3913  004B22  0EAB               	movlw	low STR_25
  3914  004B24  0101               	movlb	1	; () banked
  3915  004B26  6F3F               	movwf	printf@f& (0+255),b
  3916  004B28  0E7D               	movlw	high STR_25
  3917  004B2A  0101               	movlb	1	; () banked
  3918  004B2C  6F40               	movwf	(printf@f+1)& (0+255),b
  3919  004B2E  C1AA  F141         	movff	_passChar,?_printf+2
  3920  004B32  0101               	movlb	1	; () banked
  3921  004B34  6B42               	clrf	(?_printf+3)& (0+255),b
  3922  004B36  0101               	movlb	1	; () banked
  3923  004B38  51A6               	movf	_introducido& (0+255),w,b
  3924  004B3A  0101               	movlb	1	; () banked
  3925  004B3C  6F43               	movwf	(?_printf+4)& (0+255),b
  3926  004B3E  6B44               	clrf	(?_printf+5)& (0+255),b
  3927  004B40  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  3928  004B42  0744               	decf	(?_printf+5)& (0+255),f,b
  3929  004B44  C1AB  F145         	movff	_passChar+1,?_printf+6
  3930  004B48  0101               	movlb	1	; () banked
  3931  004B4A  6B46               	clrf	(?_printf+7)& (0+255),b
  3932  004B4C  0101               	movlb	1	; () banked
  3933  004B4E  51A7               	movf	(_introducido+1)& (0+255),w,b
  3934  004B50  0101               	movlb	1	; () banked
  3935  004B52  6F47               	movwf	(?_printf+8)& (0+255),b
  3936  004B54  6B48               	clrf	(?_printf+9)& (0+255),b
  3937  004B56  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  3938  004B58  0748               	decf	(?_printf+9)& (0+255),f,b
  3939  004B5A  C1AC  F149         	movff	_passChar+2,?_printf+10
  3940  004B5E  0101               	movlb	1	; () banked
  3941  004B60  6B4A               	clrf	(?_printf+11)& (0+255),b
  3942  004B62  0101               	movlb	1	; () banked
  3943  004B64  51A8               	movf	(_introducido+2)& (0+255),w,b
  3944  004B66  0101               	movlb	1	; () banked
  3945  004B68  6F4B               	movwf	(?_printf+12)& (0+255),b
  3946  004B6A  6B4C               	clrf	(?_printf+13)& (0+255),b
  3947  004B6C  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  3948  004B6E  074C               	decf	(?_printf+13)& (0+255),f,b
  3949  004B70  C1AD  F14D         	movff	_passChar+3,?_printf+14
  3950  004B74  0101               	movlb	1	; () banked
  3951  004B76  6B4E               	clrf	(?_printf+15)& (0+255),b
  3952  004B78  0101               	movlb	1	; () banked
  3953  004B7A  51A9               	movf	(_introducido+3)& (0+255),w,b
  3954  004B7C  0101               	movlb	1	; () banked
  3955  004B7E  6F4F               	movwf	(?_printf+16)& (0+255),b
  3956  004B80  6B50               	clrf	(?_printf+17)& (0+255),b
  3957  004B82  BF4F               	btfsc	(?_printf+16)& (0+255),7,b
  3958  004B84  0750               	decf	(?_printf+17)& (0+255),f,b
  3959  004B86  EC61  F000         	call	_printf	;wreg free
  3960  004B8A  0012               	return		;funcret
  3961  004B8C                     __end_of_drawPassWord:
  3962                           	opt stack 0
  3963                           tblptru	equ	0xFF8
  3964                           tblptrh	equ	0xFF7
  3965                           tblptrl	equ	0xFF6
  3966                           tablat	equ	0xFF5
  3967                           prodh	equ	0xFF4
  3968                           prodl	equ	0xFF3
  3969                           intcon	equ	0xFF2
  3970                           postinc0	equ	0xFEE
  3971                           wreg	equ	0xFE8
  3972                           postdec1	equ	0xFE5
  3973                           fsr1l	equ	0xFE1
  3974                           indf2	equ	0xFDF
  3975                           fsr2h	equ	0xFDA
  3976                           fsr2l	equ	0xFD9
  3977                           status	equ	0xFD8
  3978                           
  3979 ;; *************** function _drawMenu *****************
  3980 ;; Defined at:
  3981 ;;		line 88 in file "source/screenDrawers.h"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  adv             1    wreg     unsigned char 
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;  adv             1  116[BANK1 ] unsigned char 
  3986 ;; Return value:  Size  Location     Type
  3987 ;;                  1    wreg      void 
  3988 ;; Registers used:
  3989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3990 ;; Tracked objects:
  3991 ;;		On entry : 0/0
  3992 ;;		On exit  : 0/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3995 ;;      Params:         0       0       0       0       0       0       0
  3996 ;;      Locals:         0       0       1       0       0       0       0
  3997 ;;      Temps:          0       0       0       0       0       0       0
  3998 ;;      Totals:         0       0       1       0       0       0       0
  3999 ;;Total ram usage:        1 bytes
  4000 ;; Hardware stack levels used:    1
  4001 ;; Hardware stack levels required when called:   19
  4002 ;; This function calls:
  4003 ;;		_lcd_gotoxy
  4004 ;;		_lcd_putc
  4005 ;;		_printf
  4006 ;; This function is called by:
  4007 ;;		_drawScreen
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           	psect	text13
  4012  0029E8                     __ptext13:
  4013                           	opt stack 0
  4014  0029E8                     _drawMenu:
  4015                           	opt stack 10
  4016                           
  4017                           ;incstack = 0
  4018                           ;drawMenu@adv stored from wreg
  4019  0029E8  0101               	movlb	1	; () banked
  4020  0029EA  6F74               	movwf	drawMenu@adv& (0+255),b
  4021                           
  4022                           ;screenDrawers.h: 89: switch (menuSection) {
  4023  0029EC  D0F7               	goto	l10991
  4024  0029EE                     l10925:
  4025                           
  4026                           ;screenDrawers.h: 91: lcd_gotoxy(1, 1);
  4027  0029EE  0E01               	movlw	1
  4028  0029F0  0101               	movlb	1	; () banked
  4029  0029F2  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4030  0029F4  0E01               	movlw	1
  4031  0029F6  ECF1  F034         	call	_lcd_gotoxy
  4032                           
  4033                           ;screenDrawers.h: 92: printf("Estado proceso: \n");
  4034  0029FA  0E1F               	movlw	low STR_7
  4035  0029FC  0101               	movlb	1	; () banked
  4036  0029FE  6F3F               	movwf	printf@f& (0+255),b
  4037  002A00  0E7E               	movlw	high STR_7
  4038  002A02  0101               	movlb	1	; () banked
  4039  002A04  6F40               	movwf	(printf@f+1)& (0+255),b
  4040  002A06  EC61  F000         	call	_printf	;wreg free
  4041                           
  4042                           ;screenDrawers.h: 93: if (adv)
  4043  002A0A  0101               	movlb	1	; () banked
  4044  002A0C  5174               	movf	drawMenu@adv& (0+255),w,b
  4045  002A0E  0101               	movlb	1	; () banked
  4046  002A10  B4D8               	btfsc	status,2,c
  4047  002A12  D004               	goto	l10933
  4048                           
  4049                           ; BSR set to: 1
  4050                           ;screenDrawers.h: 94: lcd_putc('A');
  4051  002A14  0E41               	movlw	65
  4052  002A16  ECED  F02F         	call	_lcd_putc
  4053  002A1A  D003               	goto	l367
  4054  002A1C                     l10933:
  4055                           
  4056                           ;screenDrawers.h: 95: else
  4057                           ;screenDrawers.h: 96: lcd_putc(' ');
  4058  002A1C  0E20               	movlw	32
  4059  002A1E  ECED  F02F         	call	_lcd_putc
  4060  002A22                     l367:
  4061                           
  4062                           ;screenDrawers.h: 97: lcd_gotoxy(2, 2);
  4063  002A22  0E02               	movlw	2
  4064  002A24  0101               	movlb	1	; () banked
  4065  002A26  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4066  002A28  0E02               	movlw	2
  4067  002A2A  ECF1  F034         	call	_lcd_gotoxy
  4068                           
  4069                           ;screenDrawers.h: 98: if (ProcessStarted)
  4070  002A2E  503A               	movf	_ProcessStarted,w,c
  4071  002A30  B4D8               	btfsc	status,2,c
  4072  002A32  D011               	goto	l10939
  4073                           
  4074                           ;screenDrawers.h: 99: printf("   %d / %d    ", processState, numCortes);
  4075  002A34  0EB4               	movlw	low STR_8
  4076  002A36  0101               	movlb	1	; () banked
  4077  002A38  6F3F               	movwf	printf@f& (0+255),b
  4078  002A3A  0E7F               	movlw	high STR_8
  4079  002A3C  0101               	movlb	1	; () banked
  4080  002A3E  6F40               	movwf	(printf@f+1)& (0+255),b
  4081  002A40  C035  F141         	movff	_processState,?_printf+2
  4082  002A44  C036  F142         	movff	_processState+1,?_printf+3
  4083  002A48  C0B8  F143         	movff	_numCortes,?_printf+4
  4084  002A4C  C0B9  F144         	movff	_numCortes+1,?_printf+5
  4085  002A50  EC61  F000         	call	_printf	;wreg free
  4086  002A54  0012               	return	
  4087  002A56                     l10939:
  4088                           
  4089                           ;screenDrawers.h: 100: else
  4090                           ;screenDrawers.h: 101: printf("    Detenido    ");
  4091  002A56  0E82               	movlw	low STR_9
  4092  002A58  0101               	movlb	1	; () banked
  4093  002A5A  6F3F               	movwf	printf@f& (0+255),b
  4094  002A5C  0E7F               	movlw	high STR_9
  4095  002A5E  0101               	movlb	1	; () banked
  4096  002A60  6F40               	movwf	(printf@f+1)& (0+255),b
  4097  002A62  EC61  F000         	call	_printf	;wreg free
  4098                           
  4099                           ;screenDrawers.h: 102: break;
  4100  002A66  0012               	return	
  4101  002A68                     l10941:
  4102                           
  4103                           ;screenDrawers.h: 104: lcd_gotoxy(1, 1);
  4104  002A68  0E01               	movlw	1
  4105  002A6A  0101               	movlb	1	; () banked
  4106  002A6C  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4107  002A6E  0E01               	movlw	1
  4108  002A70  ECF1  F034         	call	_lcd_gotoxy
  4109                           
  4110                           ;screenDrawers.h: 105: printf("Valor por Corte:\n");
  4111  002A74  0E55               	movlw	low STR_10
  4112  002A76  0101               	movlb	1	; () banked
  4113  002A78  6F3F               	movwf	printf@f& (0+255),b
  4114  002A7A  0E7E               	movlw	high STR_10
  4115  002A7C  0101               	movlb	1	; () banked
  4116  002A7E  6F40               	movwf	(printf@f+1)& (0+255),b
  4117  002A80  EC61  F000         	call	_printf	;wreg free
  4118                           
  4119                           ;screenDrawers.h: 106: if (adv)
  4120  002A84  0101               	movlb	1	; () banked
  4121  002A86  5174               	movf	drawMenu@adv& (0+255),w,b
  4122  002A88  0101               	movlb	1	; () banked
  4123  002A8A  B4D8               	btfsc	status,2,c
  4124  002A8C  D004               	goto	l10949
  4125                           
  4126                           ; BSR set to: 1
  4127                           ;screenDrawers.h: 107: lcd_putc('A');
  4128  002A8E  0E41               	movlw	65
  4129  002A90  ECED  F02F         	call	_lcd_putc
  4130  002A94  D003               	goto	l373
  4131  002A96                     l10949:
  4132                           
  4133                           ;screenDrawers.h: 108: else
  4134                           ;screenDrawers.h: 109: lcd_putc(' ');
  4135  002A96  0E20               	movlw	32
  4136  002A98  ECED  F02F         	call	_lcd_putc
  4137  002A9C                     l373:
  4138                           
  4139                           ;screenDrawers.h: 110: lcd_gotoxy(2, 2);
  4140  002A9C  0E02               	movlw	2
  4141  002A9E  0101               	movlb	1	; () banked
  4142  002AA0  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4143  002AA2  0E02               	movlw	2
  4144  002AA4  ECF1  F034         	call	_lcd_gotoxy
  4145                           
  4146                           ;screenDrawers.h: 111: printf("   %3.3f kg   ", kgXcorte);
  4147  002AA8  0EC3               	movlw	low STR_11
  4148  002AAA  0101               	movlb	1	; () banked
  4149  002AAC  6F3F               	movwf	printf@f& (0+255),b
  4150  002AAE  0E7F               	movlw	high STR_11
  4151  002AB0  0101               	movlb	1	; () banked
  4152  002AB2  6F40               	movwf	(printf@f+1)& (0+255),b
  4153  002AB4  C0AC  F141         	movff	_kgXcorte,?_printf+2
  4154  002AB8  C0AD  F142         	movff	_kgXcorte+1,?_printf+3
  4155  002ABC  C0AE  F143         	movff	_kgXcorte+2,?_printf+4
  4156  002AC0  EC61  F000         	call	_printf	;wreg free
  4157                           
  4158                           ;screenDrawers.h: 112: break;
  4159  002AC4  0012               	return	
  4160  002AC6                     l10953:
  4161                           
  4162                           ;screenDrawers.h: 114: lcd_gotoxy(1, 1);
  4163  002AC6  0E01               	movlw	1
  4164  002AC8  0101               	movlb	1	; () banked
  4165  002ACA  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4166  002ACC  0E01               	movlw	1
  4167  002ACE  ECF1  F034         	call	_lcd_gotoxy
  4168                           
  4169                           ;screenDrawers.h: 115: printf("Cantidad Cortes:\n");
  4170  002AD2  0E79               	movlw	low STR_12
  4171  002AD4  0101               	movlb	1	; () banked
  4172  002AD6  6F3F               	movwf	printf@f& (0+255),b
  4173  002AD8  0E7E               	movlw	high STR_12
  4174  002ADA  0101               	movlb	1	; () banked
  4175  002ADC  6F40               	movwf	(printf@f+1)& (0+255),b
  4176  002ADE  EC61  F000         	call	_printf	;wreg free
  4177                           
  4178                           ;screenDrawers.h: 116: if (adv)
  4179  002AE2  0101               	movlb	1	; () banked
  4180  002AE4  5174               	movf	drawMenu@adv& (0+255),w,b
  4181  002AE6  0101               	movlb	1	; () banked
  4182  002AE8  B4D8               	btfsc	status,2,c
  4183  002AEA  D004               	goto	l10961
  4184                           
  4185                           ; BSR set to: 1
  4186                           ;screenDrawers.h: 117: lcd_putc('A');
  4187  002AEC  0E41               	movlw	65
  4188  002AEE  ECED  F02F         	call	_lcd_putc
  4189  002AF2  D003               	goto	l376
  4190  002AF4                     l10961:
  4191                           
  4192                           ;screenDrawers.h: 118: else
  4193                           ;screenDrawers.h: 119: lcd_putc(' ');
  4194  002AF4  0E20               	movlw	32
  4195  002AF6  ECED  F02F         	call	_lcd_putc
  4196  002AFA                     l376:
  4197                           
  4198                           ;screenDrawers.h: 120: lcd_gotoxy(2, 2);
  4199  002AFA  0E02               	movlw	2
  4200  002AFC  0101               	movlb	1	; () banked
  4201  002AFE  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4202  002B00  0E02               	movlw	2
  4203  002B02  ECF1  F034         	call	_lcd_gotoxy
  4204                           
  4205                           ;screenDrawers.h: 121: printf("      %d       ", numCortes);
  4206  002B06  0EA4               	movlw	low STR_13
  4207  002B08  0101               	movlb	1	; () banked
  4208  002B0A  6F3F               	movwf	printf@f& (0+255),b
  4209  002B0C  0E7F               	movlw	high STR_13
  4210  002B0E  0101               	movlb	1	; () banked
  4211  002B10  6F40               	movwf	(printf@f+1)& (0+255),b
  4212  002B12  C0B8  F141         	movff	_numCortes,?_printf+2
  4213  002B16  C0B9  F142         	movff	_numCortes+1,?_printf+3
  4214  002B1A  EC61  F000         	call	_printf	;wreg free
  4215                           
  4216                           ;screenDrawers.h: 122: break;
  4217  002B1E  0012               	return	
  4218  002B20                     l10965:
  4219                           
  4220                           ;screenDrawers.h: 124: lcd_gotoxy(1, 1);
  4221  002B20  0E01               	movlw	1
  4222  002B22  0101               	movlb	1	; () banked
  4223  002B24  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4224  002B26  0E01               	movlw	1
  4225  002B28  ECF1  F034         	call	_lcd_gotoxy
  4226                           
  4227                           ;screenDrawers.h: 125: printf("Diametro Tubo:  \n");
  4228  002B2C  0EFB               	movlw	low STR_14
  4229  002B2E  0101               	movlb	1	; () banked
  4230  002B30  6F3F               	movwf	printf@f& (0+255),b
  4231  002B32  0E7D               	movlw	high STR_14
  4232  002B34  0101               	movlb	1	; () banked
  4233  002B36  6F40               	movwf	(printf@f+1)& (0+255),b
  4234  002B38  EC61  F000         	call	_printf	;wreg free
  4235                           
  4236                           ;screenDrawers.h: 126: if (adv)
  4237  002B3C  0101               	movlb	1	; () banked
  4238  002B3E  5174               	movf	drawMenu@adv& (0+255),w,b
  4239  002B40  0101               	movlb	1	; () banked
  4240  002B42  B4D8               	btfsc	status,2,c
  4241  002B44  D004               	goto	l10973
  4242                           
  4243                           ; BSR set to: 1
  4244                           ;screenDrawers.h: 127: lcd_putc('A');
  4245  002B46  0E41               	movlw	65
  4246  002B48  ECED  F02F         	call	_lcd_putc
  4247  002B4C  D003               	goto	l379
  4248  002B4E                     l10973:
  4249                           
  4250                           ;screenDrawers.h: 128: else
  4251                           ;screenDrawers.h: 129: lcd_putc(' ');
  4252  002B4E  0E20               	movlw	32
  4253  002B50  ECED  F02F         	call	_lcd_putc
  4254  002B54                     l379:
  4255                           
  4256                           ;screenDrawers.h: 130: lcd_gotoxy(2, 2);
  4257  002B54  0E02               	movlw	2
  4258  002B56  0101               	movlb	1	; () banked
  4259  002B58  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4260  002B5A  0E02               	movlw	2
  4261  002B5C  ECF1  F034         	call	_lcd_gotoxy
  4262                           
  4263                           ;screenDrawers.h: 131: printf("   %3.3f mm   ", diamTubo);
  4264  002B60  0ED2               	movlw	low STR_15
  4265  002B62  0101               	movlb	1	; () banked
  4266  002B64  6F3F               	movwf	printf@f& (0+255),b
  4267  002B66  0E7F               	movlw	high STR_15
  4268  002B68  0101               	movlb	1	; () banked
  4269  002B6A  6F40               	movwf	(printf@f+1)& (0+255),b
  4270  002B6C  C0A9  F141         	movff	_diamTubo,?_printf+2
  4271  002B70  C0AA  F142         	movff	_diamTubo+1,?_printf+3
  4272  002B74  C0AB  F143         	movff	_diamTubo+2,?_printf+4
  4273  002B78  EC61  F000         	call	_printf	;wreg free
  4274                           
  4275                           ;screenDrawers.h: 132: break;
  4276  002B7C  0012               	return	
  4277  002B7E                     l10977:
  4278                           
  4279                           ;screenDrawers.h: 134: lcd_gotoxy(1, 1);
  4280  002B7E  0E01               	movlw	1
  4281  002B80  0101               	movlb	1	; () banked
  4282  002B82  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4283  002B84  0E01               	movlw	1
  4284  002B86  ECF1  F034         	call	_lcd_gotoxy
  4285                           
  4286                           ;screenDrawers.h: 135: printf("Velocidad Masa: \n");
  4287  002B8A  0E0D               	movlw	low STR_16
  4288  002B8C  0101               	movlb	1	; () banked
  4289  002B8E  6F3F               	movwf	printf@f& (0+255),b
  4290  002B90  0E7E               	movlw	high STR_16
  4291  002B92  0101               	movlb	1	; () banked
  4292  002B94  6F40               	movwf	(printf@f+1)& (0+255),b
  4293  002B96  EC61  F000         	call	_printf	;wreg free
  4294                           
  4295                           ;screenDrawers.h: 136: if (adv)
  4296  002B9A  0101               	movlb	1	; () banked
  4297  002B9C  5174               	movf	drawMenu@adv& (0+255),w,b
  4298  002B9E  0101               	movlb	1	; () banked
  4299  002BA0  B4D8               	btfsc	status,2,c
  4300  002BA2  D004               	goto	l10985
  4301                           
  4302                           ; BSR set to: 1
  4303                           ;screenDrawers.h: 137: lcd_putc('A');
  4304  002BA4  0E41               	movlw	65
  4305  002BA6  ECED  F02F         	call	_lcd_putc
  4306  002BAA  D003               	goto	l382
  4307  002BAC                     l10985:
  4308                           
  4309                           ;screenDrawers.h: 138: else
  4310                           ;screenDrawers.h: 139: lcd_putc(' ');
  4311  002BAC  0E20               	movlw	32
  4312  002BAE  ECED  F02F         	call	_lcd_putc
  4313  002BB2                     l382:
  4314                           
  4315                           ;screenDrawers.h: 140: lcd_gotoxy(2, 2);
  4316  002BB2  0E02               	movlw	2
  4317  002BB4  0101               	movlb	1	; () banked
  4318  002BB6  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4319  002BB8  0E02               	movlw	2
  4320  002BBA  ECF1  F034         	call	_lcd_gotoxy
  4321                           
  4322                           ;screenDrawers.h: 141: printf("  %3.3f kg/s  ", velocidadMasa);
  4323  002BBE  0EE1               	movlw	low STR_17
  4324  002BC0  0101               	movlb	1	; () banked
  4325  002BC2  6F3F               	movwf	printf@f& (0+255),b
  4326  002BC4  0E7F               	movlw	high STR_17
  4327  002BC6  0101               	movlb	1	; () banked
  4328  002BC8  6F40               	movwf	(printf@f+1)& (0+255),b
  4329  002BCA  C0B5  F141         	movff	_velocidadMasa,?_printf+2
  4330  002BCE  C0B6  F142         	movff	_velocidadMasa+1,?_printf+3
  4331  002BD2  C0B7  F143         	movff	_velocidadMasa+2,?_printf+4
  4332  002BD6  EC61  F000         	call	_printf	;wreg free
  4333                           
  4334                           ;screenDrawers.h: 143: }
  4335                           ;screenDrawers.h: 144: }
  4336                           
  4337                           ;screenDrawers.h: 142: break;
  4338  002BDA  0012               	return	
  4339  002BDC                     l10991:
  4340  002BDC  0101               	movlb	1	; () banked
  4341  002BDE  51C1               	movf	_menuSection& (0+255),w,b
  4342                           
  4343                           ; Switch size 1, requested type "space"
  4344                           ; Number of cases is 5, Range of values is 0 to 4
  4345                           ; switch strategies available:
  4346                           ; Name         Instructions Cycles
  4347                           ; simple_byte           16     9 (average)
  4348                           ;	Chosen strategy is simple_byte
  4349  002BE0  0A00               	xorlw	0	; case 0
  4350  002BE2  B4D8               	btfsc	status,2,c
  4351  002BE4  D704               	goto	l10925
  4352  002BE6  0A01               	xorlw	1	; case 1
  4353  002BE8  B4D8               	btfsc	status,2,c
  4354  002BEA  D73E               	goto	l10941
  4355  002BEC  0A03               	xorlw	3	; case 2
  4356  002BEE  B4D8               	btfsc	status,2,c
  4357  002BF0  D76A               	goto	l10953
  4358  002BF2  0A01               	xorlw	1	; case 3
  4359  002BF4  B4D8               	btfsc	status,2,c
  4360  002BF6  D794               	goto	l10965
  4361  002BF8  0A07               	xorlw	7	; case 4
  4362  002BFA  A4D8               	btfss	status,2,c
  4363  002BFC  0012               	return	
  4364  002BFE  D7BF               	goto	l10977
  4365  002C00                     __end_of_drawMenu:
  4366                           	opt stack 0
  4367                           tblptru	equ	0xFF8
  4368                           tblptrh	equ	0xFF7
  4369                           tblptrl	equ	0xFF6
  4370                           tablat	equ	0xFF5
  4371                           prodh	equ	0xFF4
  4372                           prodl	equ	0xFF3
  4373                           intcon	equ	0xFF2
  4374                           postinc0	equ	0xFEE
  4375                           wreg	equ	0xFE8
  4376                           postdec1	equ	0xFE5
  4377                           fsr1l	equ	0xFE1
  4378                           indf2	equ	0xFDF
  4379                           fsr2h	equ	0xFDA
  4380                           fsr2l	equ	0xFD9
  4381                           status	equ	0xFD8
  4382                           
  4383 ;; *************** function _drawChanVal *****************
  4384 ;; Defined at:
  4385 ;;		line 147 in file "source/screenDrawers.h"
  4386 ;; Parameters:    Size  Location     Type
  4387 ;;		None
  4388 ;; Auto vars:     Size  Location     Type
  4389 ;;		None
  4390 ;; Return value:  Size  Location     Type
  4391 ;;                  1    wreg      void 
  4392 ;; Registers used:
  4393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4394 ;; Tracked objects:
  4395 ;;		On entry : 0/0
  4396 ;;		On exit  : 0/0
  4397 ;;		Unchanged: 0/0
  4398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4399 ;;      Params:         0       0       0       0       0       0       0
  4400 ;;      Locals:         0       0       0       0       0       0       0
  4401 ;;      Temps:          0       0       0       0       0       0       0
  4402 ;;      Totals:         0       0       0       0       0       0       0
  4403 ;;Total ram usage:        0 bytes
  4404 ;; Hardware stack levels used:    1
  4405 ;; Hardware stack levels required when called:   20
  4406 ;; This function calls:
  4407 ;;		_drawValEditor
  4408 ;;		_lcd_gotoxy
  4409 ;;		_printf
  4410 ;; This function is called by:
  4411 ;;		_drawScreen
  4412 ;; This function uses a non-reentrant model
  4413 ;;
  4414                           
  4415                           	psect	text14
  4416  00504A                     __ptext14:
  4417                           	opt stack 0
  4418  00504A                     _drawChanVal:
  4419                           	opt stack 9
  4420                           
  4421                           ;screenDrawers.h: 148: switch (menuSection) {
  4422                           
  4423                           ;incstack = 0
  4424  00504A  D04D               	goto	l11019
  4425  00504C                     l10995:
  4426                           
  4427                           ;screenDrawers.h: 152: lcd_gotoxy(1, 1);
  4428  00504C  0E01               	movlw	1
  4429  00504E  0101               	movlb	1	; () banked
  4430  005050  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4431  005052  0E01               	movlw	1
  4432  005054  ECF1  F034         	call	_lcd_gotoxy
  4433                           
  4434                           ;screenDrawers.h: 153: printf("Valor por Corte:\n");
  4435  005058  0E55               	movlw	low STR_10
  4436  00505A  0101               	movlb	1	; () banked
  4437  00505C  6F3F               	movwf	printf@f& (0+255),b
  4438  00505E  0E7E               	movlw	high STR_10
  4439  005060  0101               	movlb	1	; () banked
  4440  005062  6F40               	movwf	(printf@f+1)& (0+255),b
  4441  005064  EC61  F000         	call	_printf	;wreg free
  4442                           
  4443                           ;screenDrawers.h: 154: drawValEditor();
  4444  005068  ECB5  F00B         	call	_drawValEditor	;wreg free
  4445                           
  4446                           ;screenDrawers.h: 155: printf("kg    ");
  4447  00506C  0EF0               	movlw	low STR_19
  4448  00506E  0101               	movlb	1	; () banked
  4449  005070  6F3F               	movwf	printf@f& (0+255),b
  4450  005072  0E7F               	movlw	high STR_19
  4451  005074  0101               	movlb	1	; () banked
  4452  005076  6F40               	movwf	(printf@f+1)& (0+255),b
  4453  005078  EC61  F000         	call	_printf	;wreg free
  4454                           
  4455                           ;screenDrawers.h: 156: break;
  4456  00507C  0012               	return	
  4457  00507E                     l11003:
  4458                           
  4459                           ;screenDrawers.h: 158: lcd_gotoxy(1, 1);
  4460  00507E  0E01               	movlw	1
  4461  005080  0101               	movlb	1	; () banked
  4462  005082  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4463  005084  0E01               	movlw	1
  4464  005086  ECF1  F034         	call	_lcd_gotoxy
  4465                           
  4466                           ;screenDrawers.h: 159: printf("Cantidad Cortes:\n");
  4467  00508A  0E79               	movlw	low STR_12
  4468  00508C  0101               	movlb	1	; () banked
  4469  00508E  6F3F               	movwf	printf@f& (0+255),b
  4470  005090  0E7E               	movlw	high STR_12
  4471  005092  0101               	movlb	1	; () banked
  4472  005094  6F40               	movwf	(printf@f+1)& (0+255),b
  4473  005096  EC61  F000         	call	_printf	;wreg free
  4474                           
  4475                           ;screenDrawers.h: 160: printf("      %d       ", chanVals);
  4476  00509A  0EA4               	movlw	low STR_13
  4477  00509C  0101               	movlb	1	; () banked
  4478  00509E  6F3F               	movwf	printf@f& (0+255),b
  4479  0050A0  0E7F               	movlw	high STR_13
  4480  0050A2  0101               	movlb	1	; () banked
  4481  0050A4  6F40               	movwf	(printf@f+1)& (0+255),b
  4482  0050A6  C1B1  F141         	movff	_chanVals,?_printf+2
  4483  0050AA  C1B2  F142         	movff	_chanVals+1,?_printf+3
  4484  0050AE  EC61  F000         	call	_printf	;wreg free
  4485                           
  4486                           ;screenDrawers.h: 161: break;
  4487  0050B2  0012               	return	
  4488  0050B4                     l11009:
  4489                           
  4490                           ;screenDrawers.h: 163: lcd_gotoxy(1, 1);
  4491  0050B4  0E01               	movlw	1
  4492  0050B6  0101               	movlb	1	; () banked
  4493  0050B8  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4494  0050BA  0E01               	movlw	1
  4495  0050BC  ECF1  F034         	call	_lcd_gotoxy
  4496                           
  4497                           ;screenDrawers.h: 164: printf("Diametro Tubo:  \n");
  4498  0050C0  0EFB               	movlw	low STR_14
  4499  0050C2  0101               	movlb	1	; () banked
  4500  0050C4  6F3F               	movwf	printf@f& (0+255),b
  4501  0050C6  0E7D               	movlw	high STR_14
  4502  0050C8  0101               	movlb	1	; () banked
  4503  0050CA  6F40               	movwf	(printf@f+1)& (0+255),b
  4504  0050CC  EC61  F000         	call	_printf	;wreg free
  4505                           
  4506                           ;screenDrawers.h: 165: drawValEditor();
  4507  0050D0  ECB5  F00B         	call	_drawValEditor	;wreg free
  4508                           
  4509                           ;screenDrawers.h: 166: printf("mm    ");
  4510  0050D4  0EF7               	movlw	low STR_23
  4511  0050D6  0101               	movlb	1	; () banked
  4512  0050D8  6F3F               	movwf	printf@f& (0+255),b
  4513  0050DA  0E7F               	movlw	high STR_23
  4514  0050DC  0101               	movlb	1	; () banked
  4515  0050DE  6F40               	movwf	(printf@f+1)& (0+255),b
  4516  0050E0  EC61  F000         	call	_printf	;wreg free
  4517                           
  4518                           ;screenDrawers.h: 170: }
  4519                           ;screenDrawers.h: 171: }
  4520                           
  4521                           ;screenDrawers.h: 169: break;
  4522                           
  4523                           ;screenDrawers.h: 168: }case (4): {
  4524                           
  4525                           ;screenDrawers.h: 167: break;
  4526  0050E4  0012               	return	
  4527  0050E6                     l11019:
  4528  0050E6  0101               	movlb	1	; () banked
  4529  0050E8  51C1               	movf	_menuSection& (0+255),w,b
  4530                           
  4531                           ; Switch size 1, requested type "space"
  4532                           ; Number of cases is 5, Range of values is 0 to 4
  4533                           ; switch strategies available:
  4534                           ; Name         Instructions Cycles
  4535                           ; simple_byte           16     9 (average)
  4536                           ;	Chosen strategy is simple_byte
  4537  0050EA  0A00               	xorlw	0	; case 0
  4538  0050EC  B4D8               	btfsc	status,2,c
  4539  0050EE  0012               	return	
  4540  0050F0  0A01               	xorlw	1	; case 1
  4541  0050F2  B4D8               	btfsc	status,2,c
  4542  0050F4  D7AB               	goto	l10995
  4543  0050F6  0A03               	xorlw	3	; case 2
  4544  0050F8  B4D8               	btfsc	status,2,c
  4545  0050FA  D7C1               	goto	l11003
  4546  0050FC  0A01               	xorlw	1	; case 3
  4547  0050FE  B4D8               	btfsc	status,2,c
  4548  005100  D7D9               	goto	l11009
  4549  005102  0A07               	xorlw	7	; case 4
  4550  005104  0012               	return	
  4551  005106                     __end_of_drawChanVal:
  4552                           	opt stack 0
  4553                           tblptru	equ	0xFF8
  4554                           tblptrh	equ	0xFF7
  4555                           tblptrl	equ	0xFF6
  4556                           tablat	equ	0xFF5
  4557                           prodh	equ	0xFF4
  4558                           prodl	equ	0xFF3
  4559                           intcon	equ	0xFF2
  4560                           postinc0	equ	0xFEE
  4561                           wreg	equ	0xFE8
  4562                           postdec1	equ	0xFE5
  4563                           fsr1l	equ	0xFE1
  4564                           indf2	equ	0xFDF
  4565                           fsr2h	equ	0xFDA
  4566                           fsr2l	equ	0xFD9
  4567                           status	equ	0xFD8
  4568                           
  4569 ;; *************** function _drawCalibProc *****************
  4570 ;; Defined at:
  4571 ;;		line 235 in file "source/screenDrawers.h"
  4572 ;; Parameters:    Size  Location     Type
  4573 ;;		None
  4574 ;; Auto vars:     Size  Location     Type
  4575 ;;		None
  4576 ;; Return value:  Size  Location     Type
  4577 ;;                  1    wreg      void 
  4578 ;; Registers used:
  4579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/0
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4585 ;;      Params:         0       0       0       0       0       0       0
  4586 ;;      Locals:         0       0       0       0       0       0       0
  4587 ;;      Temps:          0       0       0       0       0       0       0
  4588 ;;      Totals:         0       0       0       0       0       0       0
  4589 ;;Total ram usage:        0 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; Hardware stack levels required when called:   19
  4592 ;; This function calls:
  4593 ;;		_lcd_gotoxy
  4594 ;;		_printf
  4595 ;; This function is called by:
  4596 ;;		_drawScreen
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           	psect	text15
  4601  005ED2                     __ptext15:
  4602                           	opt stack 0
  4603  005ED2                     _drawCalibProc:
  4604                           	opt stack 10
  4605                           
  4606                           ;screenDrawers.h: 236: lcd_gotoxy(1, 1);
  4607                           
  4608                           ;incstack = 0
  4609  005ED2  0E01               	movlw	1
  4610  005ED4  0101               	movlb	1	; () banked
  4611  005ED6  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4612  005ED8  0E01               	movlw	1
  4613  005EDA  ECF1  F034         	call	_lcd_gotoxy
  4614                           
  4615                           ;screenDrawers.h: 237: if(calibLevel == 0) {
  4616  005EDE  0101               	movlb	1	; () banked
  4617  005EE0  51BB               	movf	_calibLevel& (0+255),w,b
  4618  005EE2  A4D8               	btfss	status,2,c
  4619  005EE4  D011               	goto	l11099
  4620                           
  4621                           ; BSR set to: 1
  4622                           ;screenDrawers.h: 238: printf("Autocalib usando\n");
  4623  005EE6  0EAF               	movlw	low STR_37
  4624  005EE8  0101               	movlb	1	; () banked
  4625  005EEA  6F3F               	movwf	printf@f& (0+255),b
  4626  005EEC  0E7E               	movlw	high STR_37
  4627  005EEE  0101               	movlb	1	; () banked
  4628  005EF0  6F40               	movwf	(printf@f+1)& (0+255),b
  4629  005EF2  EC61  F000         	call	_printf	;wreg free
  4630                           
  4631                           ;screenDrawers.h: 239: printf("       1 kg     ");
  4632  005EF6  0E2D               	movlw	low STR_38
  4633  005EF8  0101               	movlb	1	; () banked
  4634  005EFA  6F3F               	movwf	printf@f& (0+255),b
  4635  005EFC  0E7F               	movlw	high STR_38
  4636  005EFE  0101               	movlb	1	; () banked
  4637  005F00  6F40               	movwf	(printf@f+1)& (0+255),b
  4638  005F02  EC61  F000         	call	_printf	;wreg free
  4639                           
  4640                           ;screenDrawers.h: 240: }else if(calibLevel == 1) {
  4641  005F06  0012               	return	
  4642  005F08                     l11099:
  4643  005F08  0101               	movlb	1	; () banked
  4644  005F0A  05BB               	decf	_calibLevel& (0+255),w,b
  4645  005F0C  A4D8               	btfss	status,2,c
  4646  005F0E  D011               	goto	l11103
  4647                           
  4648                           ; BSR set to: 1
  4649                           ;screenDrawers.h: 241: printf("Autocalib usando\n");
  4650  005F10  0EAF               	movlw	low STR_37
  4651  005F12  0101               	movlb	1	; () banked
  4652  005F14  6F3F               	movwf	printf@f& (0+255),b
  4653  005F16  0E7E               	movlw	high STR_37
  4654  005F18  0101               	movlb	1	; () banked
  4655  005F1A  6F40               	movwf	(printf@f+1)& (0+255),b
  4656  005F1C  EC61  F000         	call	_printf	;wreg free
  4657                           
  4658                           ;screenDrawers.h: 242: printf("     0.5 kg     ");
  4659  005F20  0E3E               	movlw	low STR_40
  4660  005F22  0101               	movlb	1	; () banked
  4661  005F24  6F3F               	movwf	printf@f& (0+255),b
  4662  005F26  0E7F               	movlw	high STR_40
  4663  005F28  0101               	movlb	1	; () banked
  4664  005F2A  6F40               	movwf	(printf@f+1)& (0+255),b
  4665  005F2C  EC61  F000         	call	_printf	;wreg free
  4666                           
  4667                           ;screenDrawers.h: 243: }else if(calibLevel == 2) {
  4668  005F30  0012               	return	
  4669  005F32                     l11103:
  4670  005F32  0E02               	movlw	2
  4671  005F34  0101               	movlb	1	; () banked
  4672  005F36  19BB               	xorwf	_calibLevel& (0+255),w,b
  4673  005F38  A4D8               	btfss	status,2,c
  4674  005F3A  0012               	return	
  4675                           
  4676                           ; BSR set to: 1
  4677                           ;screenDrawers.h: 244: printf("Autocalib usando\n");
  4678  005F3C  0EAF               	movlw	low STR_37
  4679  005F3E  0101               	movlb	1	; () banked
  4680  005F40  6F3F               	movwf	printf@f& (0+255),b
  4681  005F42  0E7E               	movlw	high STR_37
  4682  005F44  0101               	movlb	1	; () banked
  4683  005F46  6F40               	movwf	(printf@f+1)& (0+255),b
  4684  005F48  EC61  F000         	call	_printf	;wreg free
  4685                           
  4686                           ;screenDrawers.h: 245: printf("    0.25 kg     ");
  4687  005F4C  0E4F               	movlw	low STR_42
  4688  005F4E  0101               	movlb	1	; () banked
  4689  005F50  6F3F               	movwf	printf@f& (0+255),b
  4690  005F52  0E7F               	movlw	high STR_42
  4691  005F54  0101               	movlb	1	; () banked
  4692  005F56  6F40               	movwf	(printf@f+1)& (0+255),b
  4693  005F58  EC61  F000         	call	_printf	;wreg free
  4694  005F5C  0012               	return	
  4695  005F5E                     __end_of_drawCalibProc:
  4696                           	opt stack 0
  4697                           tblptru	equ	0xFF8
  4698                           tblptrh	equ	0xFF7
  4699                           tblptrl	equ	0xFF6
  4700                           tablat	equ	0xFF5
  4701                           prodh	equ	0xFF4
  4702                           prodl	equ	0xFF3
  4703                           intcon	equ	0xFF2
  4704                           postinc0	equ	0xFEE
  4705                           wreg	equ	0xFE8
  4706                           postdec1	equ	0xFE5
  4707                           fsr1l	equ	0xFE1
  4708                           indf2	equ	0xFDF
  4709                           fsr2h	equ	0xFDA
  4710                           fsr2l	equ	0xFD9
  4711                           status	equ	0xFD8
  4712                           
  4713 ;; *************** function _drawBadPass *****************
  4714 ;; Defined at:
  4715 ;;		line 197 in file "source/screenDrawers.h"
  4716 ;; Parameters:    Size  Location     Type
  4717 ;;		None
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;		None
  4720 ;; Return value:  Size  Location     Type
  4721 ;;                  1    wreg      void 
  4722 ;; Registers used:
  4723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4724 ;; Tracked objects:
  4725 ;;		On entry : 0/0
  4726 ;;		On exit  : 0/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4729 ;;      Params:         0       0       0       0       0       0       0
  4730 ;;      Locals:         0       0       0       0       0       0       0
  4731 ;;      Temps:          0       0       0       0       0       0       0
  4732 ;;      Totals:         0       0       0       0       0       0       0
  4733 ;;Total ram usage:        0 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; Hardware stack levels required when called:   20
  4736 ;; This function calls:
  4737 ;;		_drawPass1Lin
  4738 ;;		_printf
  4739 ;; This function is called by:
  4740 ;;		_drawScreen
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           	psect	text16
  4745  006BE0                     __ptext16:
  4746                           	opt stack 0
  4747  006BE0                     _drawBadPass:
  4748                           	opt stack 9
  4749                           
  4750                           ;screenDrawers.h: 198: drawPass1Lin();
  4751                           
  4752                           ;incstack = 0
  4753  006BE0  ECBD  F035         	call	_drawPass1Lin	;wreg free
  4754                           
  4755                           ;screenDrawers.h: 199: printf("     Erronea    ");
  4756  006BE4  0E60               	movlw	low STR_26
  4757  006BE6  0101               	movlb	1	; () banked
  4758  006BE8  6F3F               	movwf	printf@f& (0+255),b
  4759  006BEA  0E7F               	movlw	high STR_26
  4760  006BEC  0101               	movlb	1	; () banked
  4761  006BEE  6F40               	movwf	(printf@f+1)& (0+255),b
  4762  006BF0  EC61  F000         	call	_printf	;wreg free
  4763  006BF4  0012               	return		;funcret
  4764  006BF6                     __end_of_drawBadPass:
  4765                           	opt stack 0
  4766                           tblptru	equ	0xFF8
  4767                           tblptrh	equ	0xFF7
  4768                           tblptrl	equ	0xFF6
  4769                           tablat	equ	0xFF5
  4770                           prodh	equ	0xFF4
  4771                           prodl	equ	0xFF3
  4772                           intcon	equ	0xFF2
  4773                           postinc0	equ	0xFEE
  4774                           wreg	equ	0xFE8
  4775                           postdec1	equ	0xFE5
  4776                           fsr1l	equ	0xFE1
  4777                           indf2	equ	0xFDF
  4778                           fsr2h	equ	0xFDA
  4779                           fsr2l	equ	0xFD9
  4780                           status	equ	0xFD8
  4781                           
  4782 ;; *************** function _drawPass1Lin *****************
  4783 ;; Defined at:
  4784 ;;		line 174 in file "source/screenDrawers.h"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;		None
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;		None
  4789 ;; Return value:  Size  Location     Type
  4790 ;;                  1    wreg      void 
  4791 ;; Registers used:
  4792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4793 ;; Tracked objects:
  4794 ;;		On entry : 0/0
  4795 ;;		On exit  : 0/0
  4796 ;;		Unchanged: 0/0
  4797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4798 ;;      Params:         0       0       0       0       0       0       0
  4799 ;;      Locals:         0       0       0       0       0       0       0
  4800 ;;      Temps:          0       0       0       0       0       0       0
  4801 ;;      Totals:         0       0       0       0       0       0       0
  4802 ;;Total ram usage:        0 bytes
  4803 ;; Hardware stack levels used:    1
  4804 ;; Hardware stack levels required when called:   19
  4805 ;; This function calls:
  4806 ;;		_lcd_gotoxy
  4807 ;;		_printf
  4808 ;; This function is called by:
  4809 ;;		_drawPassWord
  4810 ;;		_drawBadPass
  4811 ;; This function uses a non-reentrant model
  4812 ;;
  4813                           
  4814                           	psect	text17
  4815  006B7A                     __ptext17:
  4816                           	opt stack 0
  4817  006B7A                     _drawPass1Lin:
  4818                           	opt stack 9
  4819                           
  4820                           ;screenDrawers.h: 175: lcd_gotoxy(1, 1);
  4821                           
  4822                           ;incstack = 0
  4823  006B7A  0E01               	movlw	1
  4824  006B7C  0101               	movlb	1	; () banked
  4825  006B7E  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4826  006B80  0E01               	movlw	1
  4827  006B82  ECF1  F034         	call	_lcd_gotoxy
  4828                           
  4829                           ;screenDrawers.h: 176: printf("Contrasena:     \n");
  4830  006B86  0EE9               	movlw	low STR_24
  4831  006B88  0101               	movlb	1	; () banked
  4832  006B8A  6F3F               	movwf	printf@f& (0+255),b
  4833  006B8C  0E7D               	movlw	high STR_24
  4834  006B8E  0101               	movlb	1	; () banked
  4835  006B90  6F40               	movwf	(printf@f+1)& (0+255),b
  4836  006B92  EC61  F000         	call	_printf	;wreg free
  4837  006B96  0012               	return		;funcret
  4838  006B98                     __end_of_drawPass1Lin:
  4839                           	opt stack 0
  4840                           tblptru	equ	0xFF8
  4841                           tblptrh	equ	0xFF7
  4842                           tblptrl	equ	0xFF6
  4843                           tablat	equ	0xFF5
  4844                           prodh	equ	0xFF4
  4845                           prodl	equ	0xFF3
  4846                           intcon	equ	0xFF2
  4847                           postinc0	equ	0xFEE
  4848                           wreg	equ	0xFE8
  4849                           postdec1	equ	0xFE5
  4850                           fsr1l	equ	0xFE1
  4851                           indf2	equ	0xFDF
  4852                           fsr2h	equ	0xFDA
  4853                           fsr2l	equ	0xFD9
  4854                           status	equ	0xFD8
  4855                           
  4856 ;; *************** function _drawAutoCalibRM *****************
  4857 ;; Defined at:
  4858 ;;		line 228 in file "source/screenDrawers.h"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;		None
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;		None
  4863 ;; Return value:  Size  Location     Type
  4864 ;;                  1    wreg      void 
  4865 ;; Registers used:
  4866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4867 ;; Tracked objects:
  4868 ;;		On entry : 0/0
  4869 ;;		On exit  : 0/0
  4870 ;;		Unchanged: 0/0
  4871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4872 ;;      Params:         0       0       0       0       0       0       0
  4873 ;;      Locals:         0       0       0       0       0       0       0
  4874 ;;      Temps:          0       0       0       0       0       0       0
  4875 ;;      Totals:         0       0       0       0       0       0       0
  4876 ;;Total ram usage:        0 bytes
  4877 ;; Hardware stack levels used:    1
  4878 ;; Hardware stack levels required when called:   20
  4879 ;; This function calls:
  4880 ;;		_drawValEditor
  4881 ;;		_lcd_gotoxy
  4882 ;;		_printf
  4883 ;; This function is called by:
  4884 ;;		_drawScreen
  4885 ;; This function uses a non-reentrant model
  4886 ;;
  4887                           
  4888                           	psect	text18
  4889  00697E                     __ptext18:
  4890                           	opt stack 0
  4891  00697E                     _drawAutoCalibRM:
  4892                           	opt stack 9
  4893                           
  4894                           ;screenDrawers.h: 229: lcd_gotoxy(1, 1);
  4895                           
  4896                           ;incstack = 0
  4897  00697E  0E01               	movlw	1
  4898  006980  0101               	movlb	1	; () banked
  4899  006982  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  4900  006984  0E01               	movlw	1
  4901  006986  ECF1  F034         	call	_lcd_gotoxy
  4902                           
  4903                           ;screenDrawers.h: 230: printf("Peso Real:      \n");
  4904  00698A  0ED7               	movlw	low STR_35
  4905  00698C  0101               	movlb	1	; () banked
  4906  00698E  6F3F               	movwf	printf@f& (0+255),b
  4907  006990  0E7D               	movlw	high STR_35
  4908  006992  0101               	movlb	1	; () banked
  4909  006994  6F40               	movwf	(printf@f+1)& (0+255),b
  4910  006996  EC61  F000         	call	_printf	;wreg free
  4911                           
  4912                           ;screenDrawers.h: 231: drawValEditor();
  4913  00699A  ECB5  F00B         	call	_drawValEditor	;wreg free
  4914                           
  4915                           ;screenDrawers.h: 232: printf("kg    ");
  4916  00699E  0EF0               	movlw	low STR_19
  4917  0069A0  0101               	movlb	1	; () banked
  4918  0069A2  6F3F               	movwf	printf@f& (0+255),b
  4919  0069A4  0E7F               	movlw	high STR_19
  4920  0069A6  0101               	movlb	1	; () banked
  4921  0069A8  6F40               	movwf	(printf@f+1)& (0+255),b
  4922  0069AA  EC61  F000         	call	_printf	;wreg free
  4923  0069AE  0012               	return		;funcret
  4924  0069B0                     __end_of_drawAutoCalibRM:
  4925                           	opt stack 0
  4926                           tblptru	equ	0xFF8
  4927                           tblptrh	equ	0xFF7
  4928                           tblptrl	equ	0xFF6
  4929                           tablat	equ	0xFF5
  4930                           prodh	equ	0xFF4
  4931                           prodl	equ	0xFF3
  4932                           intcon	equ	0xFF2
  4933                           postinc0	equ	0xFEE
  4934                           wreg	equ	0xFE8
  4935                           postdec1	equ	0xFE5
  4936                           fsr1l	equ	0xFE1
  4937                           indf2	equ	0xFDF
  4938                           fsr2h	equ	0xFDA
  4939                           fsr2l	equ	0xFD9
  4940                           status	equ	0xFD8
  4941                           
  4942 ;; *************** function _drawValEditor *****************
  4943 ;; Defined at:
  4944 ;;		line 59 in file "source/screenDrawers.h"
  4945 ;; Parameters:    Size  Location     Type
  4946 ;;		None
  4947 ;; Auto vars:     Size  Location     Type
  4948 ;;		None
  4949 ;; Return value:  Size  Location     Type
  4950 ;;                  1    wreg      void 
  4951 ;; Registers used:
  4952 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4953 ;; Tracked objects:
  4954 ;;		On entry : 0/0
  4955 ;;		On exit  : 0/0
  4956 ;;		Unchanged: 0/0
  4957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4958 ;;      Params:         0       0       0       0       0       0       0
  4959 ;;      Locals:         0       0       0       0       0       0       0
  4960 ;;      Temps:          0       0       0       0       0       0       0
  4961 ;;      Totals:         0       0       0       0       0       0       0
  4962 ;;Total ram usage:        0 bytes
  4963 ;; Hardware stack levels used:    1
  4964 ;; Hardware stack levels required when called:   19
  4965 ;; This function calls:
  4966 ;;		_lcd_gotoxy
  4967 ;;		_printf
  4968 ;; This function is called by:
  4969 ;;		_drawChanVal
  4970 ;;		_drawAutoCalibRM
  4971 ;; This function uses a non-reentrant model
  4972 ;;
  4973                           
  4974                           	psect	text19
  4975  00176A                     __ptext19:
  4976                           	opt stack 0
  4977  00176A                     _drawValEditor:
  4978                           	opt stack 9
  4979                           
  4980                           ;screenDrawers.h: 60: if(chanValSection == 5) {
  4981                           
  4982                           ;incstack = 0
  4983  00176A  0E05               	movlw	5
  4984  00176C  0101               	movlb	1	; () banked
  4985  00176E  1994               	xorwf	_chanValSection& (0+255),w,b
  4986  001770  A4D8               	btfss	status,2,c
  4987  001772  D037               	goto	l10501
  4988                           
  4989                           ; BSR set to: 1
  4990                           ;screenDrawers.h: 61: printf(" %u%u%u.%u%u%c%u ", chanValdig[0], chanValdig[1],
  4991                           ;screenDrawers.h: 62: chanValdig[2], chanValdig[3], chanValdig[4], flech, chanValdig[5])
      +                          ;
  4992  001774  0EC1               	movlw	low STR_1
  4993  001776  0101               	movlb	1	; () banked
  4994  001778  6F3F               	movwf	printf@f& (0+255),b
  4995  00177A  0E7E               	movlw	high STR_1
  4996  00177C  0101               	movlb	1	; () banked
  4997  00177E  6F40               	movwf	(printf@f+1)& (0+255),b
  4998  001780  0101               	movlb	1	; () banked
  4999  001782  51A0               	movf	_chanValdig& (0+255),w,b
  5000  001784  0101               	movlb	1	; () banked
  5001  001786  6F41               	movwf	(?_printf+2)& (0+255),b
  5002  001788  6B42               	clrf	(?_printf+3)& (0+255),b
  5003  00178A  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5004  00178C  0742               	decf	(?_printf+3)& (0+255),f,b
  5005  00178E  0101               	movlb	1	; () banked
  5006  001790  51A1               	movf	(_chanValdig+1)& (0+255),w,b
  5007  001792  0101               	movlb	1	; () banked
  5008  001794  6F43               	movwf	(?_printf+4)& (0+255),b
  5009  001796  6B44               	clrf	(?_printf+5)& (0+255),b
  5010  001798  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5011  00179A  0744               	decf	(?_printf+5)& (0+255),f,b
  5012  00179C  0101               	movlb	1	; () banked
  5013  00179E  51A2               	movf	(_chanValdig+2)& (0+255),w,b
  5014  0017A0  0101               	movlb	1	; () banked
  5015  0017A2  6F45               	movwf	(?_printf+6)& (0+255),b
  5016  0017A4  6B46               	clrf	(?_printf+7)& (0+255),b
  5017  0017A6  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5018  0017A8  0746               	decf	(?_printf+7)& (0+255),f,b
  5019  0017AA  0101               	movlb	1	; () banked
  5020  0017AC  51A3               	movf	(_chanValdig+3)& (0+255),w,b
  5021  0017AE  0101               	movlb	1	; () banked
  5022  0017B0  6F47               	movwf	(?_printf+8)& (0+255),b
  5023  0017B2  6B48               	clrf	(?_printf+9)& (0+255),b
  5024  0017B4  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5025  0017B6  0748               	decf	(?_printf+9)& (0+255),f,b
  5026  0017B8  0101               	movlb	1	; () banked
  5027  0017BA  51A4               	movf	(_chanValdig+4)& (0+255),w,b
  5028  0017BC  0101               	movlb	1	; () banked
  5029  0017BE  6F49               	movwf	(?_printf+10)& (0+255),b
  5030  0017C0  6B4A               	clrf	(?_printf+11)& (0+255),b
  5031  0017C2  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5032  0017C4  074A               	decf	(?_printf+11)& (0+255),f,b
  5033  0017C6  C195  F14B         	movff	_flech,?_printf+12
  5034  0017CA  0101               	movlb	1	; () banked
  5035  0017CC  6B4C               	clrf	(?_printf+13)& (0+255),b
  5036  0017CE  0101               	movlb	1	; () banked
  5037  0017D0  51A5               	movf	(_chanValdig+5)& (0+255),w,b
  5038  0017D2  0101               	movlb	1	; () banked
  5039  0017D4  6F4D               	movwf	(?_printf+14)& (0+255),b
  5040  0017D6  6B4E               	clrf	(?_printf+15)& (0+255),b
  5041  0017D8  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5042  0017DA  074E               	decf	(?_printf+15)& (0+255),f,b
  5043  0017DC  EC61  F000         	call	_printf	;wreg free
  5044                           
  5045                           ;screenDrawers.h: 63: }else if(chanValSection == 4) {
  5046  0017E0  D129               	goto	l10521
  5047  0017E2                     l10501:
  5048  0017E2  0E04               	movlw	4
  5049  0017E4  0101               	movlb	1	; () banked
  5050  0017E6  1994               	xorwf	_chanValSection& (0+255),w,b
  5051  0017E8  A4D8               	btfss	status,2,c
  5052  0017EA  D037               	goto	l10505
  5053                           
  5054                           ; BSR set to: 1
  5055                           ;screenDrawers.h: 64: printf(" %u%u%u.%u%c%u%u ", chanValdig[0], chanValdig[1],
  5056                           ;screenDrawers.h: 65: chanValdig[2], chanValdig[3], flech, chanValdig[4], chanValdig[5])
      +                          ;
  5057  0017EC  0ED3               	movlw	low STR_2
  5058  0017EE  0101               	movlb	1	; () banked
  5059  0017F0  6F3F               	movwf	printf@f& (0+255),b
  5060  0017F2  0E7E               	movlw	high STR_2
  5061  0017F4  0101               	movlb	1	; () banked
  5062  0017F6  6F40               	movwf	(printf@f+1)& (0+255),b
  5063  0017F8  0101               	movlb	1	; () banked
  5064  0017FA  51A0               	movf	_chanValdig& (0+255),w,b
  5065  0017FC  0101               	movlb	1	; () banked
  5066  0017FE  6F41               	movwf	(?_printf+2)& (0+255),b
  5067  001800  6B42               	clrf	(?_printf+3)& (0+255),b
  5068  001802  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5069  001804  0742               	decf	(?_printf+3)& (0+255),f,b
  5070  001806  0101               	movlb	1	; () banked
  5071  001808  51A1               	movf	(_chanValdig+1)& (0+255),w,b
  5072  00180A  0101               	movlb	1	; () banked
  5073  00180C  6F43               	movwf	(?_printf+4)& (0+255),b
  5074  00180E  6B44               	clrf	(?_printf+5)& (0+255),b
  5075  001810  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5076  001812  0744               	decf	(?_printf+5)& (0+255),f,b
  5077  001814  0101               	movlb	1	; () banked
  5078  001816  51A2               	movf	(_chanValdig+2)& (0+255),w,b
  5079  001818  0101               	movlb	1	; () banked
  5080  00181A  6F45               	movwf	(?_printf+6)& (0+255),b
  5081  00181C  6B46               	clrf	(?_printf+7)& (0+255),b
  5082  00181E  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5083  001820  0746               	decf	(?_printf+7)& (0+255),f,b
  5084  001822  0101               	movlb	1	; () banked
  5085  001824  51A3               	movf	(_chanValdig+3)& (0+255),w,b
  5086  001826  0101               	movlb	1	; () banked
  5087  001828  6F47               	movwf	(?_printf+8)& (0+255),b
  5088  00182A  6B48               	clrf	(?_printf+9)& (0+255),b
  5089  00182C  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5090  00182E  0748               	decf	(?_printf+9)& (0+255),f,b
  5091  001830  C195  F149         	movff	_flech,?_printf+10
  5092  001834  0101               	movlb	1	; () banked
  5093  001836  6B4A               	clrf	(?_printf+11)& (0+255),b
  5094  001838  0101               	movlb	1	; () banked
  5095  00183A  51A4               	movf	(_chanValdig+4)& (0+255),w,b
  5096  00183C  0101               	movlb	1	; () banked
  5097  00183E  6F4B               	movwf	(?_printf+12)& (0+255),b
  5098  001840  6B4C               	clrf	(?_printf+13)& (0+255),b
  5099  001842  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5100  001844  074C               	decf	(?_printf+13)& (0+255),f,b
  5101  001846  0101               	movlb	1	; () banked
  5102  001848  51A5               	movf	(_chanValdig+5)& (0+255),w,b
  5103  00184A  0101               	movlb	1	; () banked
  5104  00184C  6F4D               	movwf	(?_printf+14)& (0+255),b
  5105  00184E  6B4E               	clrf	(?_printf+15)& (0+255),b
  5106  001850  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5107  001852  074E               	decf	(?_printf+15)& (0+255),f,b
  5108  001854  EC61  F000         	call	_printf	;wreg free
  5109                           
  5110                           ;screenDrawers.h: 66: }else if(chanValSection == 3) {
  5111  001858  D0ED               	goto	l10521
  5112  00185A                     l10505:
  5113  00185A  0E03               	movlw	3
  5114  00185C  0101               	movlb	1	; () banked
  5115  00185E  1994               	xorwf	_chanValSection& (0+255),w,b
  5116  001860  A4D8               	btfss	status,2,c
  5117  001862  D037               	goto	l10509
  5118                           
  5119                           ; BSR set to: 1
  5120                           ;screenDrawers.h: 67: printf(" %u%u%u.%c%u%u%u ", chanValdig[0], chanValdig[1],
  5121                           ;screenDrawers.h: 68: chanValdig[2], flech, chanValdig[3], chanValdig[4], chanValdig[5])
      +                          ;
  5122  001864  0E1B               	movlw	low STR_3
  5123  001866  0101               	movlb	1	; () banked
  5124  001868  6F3F               	movwf	printf@f& (0+255),b
  5125  00186A  0E7F               	movlw	high STR_3
  5126  00186C  0101               	movlb	1	; () banked
  5127  00186E  6F40               	movwf	(printf@f+1)& (0+255),b
  5128  001870  0101               	movlb	1	; () banked
  5129  001872  51A0               	movf	_chanValdig& (0+255),w,b
  5130  001874  0101               	movlb	1	; () banked
  5131  001876  6F41               	movwf	(?_printf+2)& (0+255),b
  5132  001878  6B42               	clrf	(?_printf+3)& (0+255),b
  5133  00187A  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5134  00187C  0742               	decf	(?_printf+3)& (0+255),f,b
  5135  00187E  0101               	movlb	1	; () banked
  5136  001880  51A1               	movf	(_chanValdig+1)& (0+255),w,b
  5137  001882  0101               	movlb	1	; () banked
  5138  001884  6F43               	movwf	(?_printf+4)& (0+255),b
  5139  001886  6B44               	clrf	(?_printf+5)& (0+255),b
  5140  001888  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5141  00188A  0744               	decf	(?_printf+5)& (0+255),f,b
  5142  00188C  0101               	movlb	1	; () banked
  5143  00188E  51A2               	movf	(_chanValdig+2)& (0+255),w,b
  5144  001890  0101               	movlb	1	; () banked
  5145  001892  6F45               	movwf	(?_printf+6)& (0+255),b
  5146  001894  6B46               	clrf	(?_printf+7)& (0+255),b
  5147  001896  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5148  001898  0746               	decf	(?_printf+7)& (0+255),f,b
  5149  00189A  C195  F147         	movff	_flech,?_printf+8
  5150  00189E  0101               	movlb	1	; () banked
  5151  0018A0  6B48               	clrf	(?_printf+9)& (0+255),b
  5152  0018A2  0101               	movlb	1	; () banked
  5153  0018A4  51A3               	movf	(_chanValdig+3)& (0+255),w,b
  5154  0018A6  0101               	movlb	1	; () banked
  5155  0018A8  6F49               	movwf	(?_printf+10)& (0+255),b
  5156  0018AA  6B4A               	clrf	(?_printf+11)& (0+255),b
  5157  0018AC  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5158  0018AE  074A               	decf	(?_printf+11)& (0+255),f,b
  5159  0018B0  0101               	movlb	1	; () banked
  5160  0018B2  51A4               	movf	(_chanValdig+4)& (0+255),w,b
  5161  0018B4  0101               	movlb	1	; () banked
  5162  0018B6  6F4B               	movwf	(?_printf+12)& (0+255),b
  5163  0018B8  6B4C               	clrf	(?_printf+13)& (0+255),b
  5164  0018BA  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5165  0018BC  074C               	decf	(?_printf+13)& (0+255),f,b
  5166  0018BE  0101               	movlb	1	; () banked
  5167  0018C0  51A5               	movf	(_chanValdig+5)& (0+255),w,b
  5168  0018C2  0101               	movlb	1	; () banked
  5169  0018C4  6F4D               	movwf	(?_printf+14)& (0+255),b
  5170  0018C6  6B4E               	clrf	(?_printf+15)& (0+255),b
  5171  0018C8  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5172  0018CA  074E               	decf	(?_printf+15)& (0+255),f,b
  5173  0018CC  EC61  F000         	call	_printf	;wreg free
  5174                           
  5175                           ;screenDrawers.h: 69: }else if(chanValSection == 2) {
  5176  0018D0  D0B1               	goto	l10521
  5177  0018D2                     l10509:
  5178  0018D2  0E02               	movlw	2
  5179  0018D4  0101               	movlb	1	; () banked
  5180  0018D6  1994               	xorwf	_chanValSection& (0+255),w,b
  5181  0018D8  A4D8               	btfss	status,2,c
  5182  0018DA  D037               	goto	l10513
  5183                           
  5184                           ; BSR set to: 1
  5185                           ;screenDrawers.h: 70: printf(" %u%u%c%u.%u%u%u ", chanValdig[0], chanValdig[1], flech,
  5186                           ;screenDrawers.h: 71: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5187  0018DC  0EE5               	movlw	low STR_4
  5188  0018DE  0101               	movlb	1	; () banked
  5189  0018E0  6F3F               	movwf	printf@f& (0+255),b
  5190  0018E2  0E7E               	movlw	high STR_4
  5191  0018E4  0101               	movlb	1	; () banked
  5192  0018E6  6F40               	movwf	(printf@f+1)& (0+255),b
  5193  0018E8  0101               	movlb	1	; () banked
  5194  0018EA  51A0               	movf	_chanValdig& (0+255),w,b
  5195  0018EC  0101               	movlb	1	; () banked
  5196  0018EE  6F41               	movwf	(?_printf+2)& (0+255),b
  5197  0018F0  6B42               	clrf	(?_printf+3)& (0+255),b
  5198  0018F2  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5199  0018F4  0742               	decf	(?_printf+3)& (0+255),f,b
  5200  0018F6  0101               	movlb	1	; () banked
  5201  0018F8  51A1               	movf	(_chanValdig+1)& (0+255),w,b
  5202  0018FA  0101               	movlb	1	; () banked
  5203  0018FC  6F43               	movwf	(?_printf+4)& (0+255),b
  5204  0018FE  6B44               	clrf	(?_printf+5)& (0+255),b
  5205  001900  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5206  001902  0744               	decf	(?_printf+5)& (0+255),f,b
  5207  001904  C195  F145         	movff	_flech,?_printf+6
  5208  001908  0101               	movlb	1	; () banked
  5209  00190A  6B46               	clrf	(?_printf+7)& (0+255),b
  5210  00190C  0101               	movlb	1	; () banked
  5211  00190E  51A2               	movf	(_chanValdig+2)& (0+255),w,b
  5212  001910  0101               	movlb	1	; () banked
  5213  001912  6F47               	movwf	(?_printf+8)& (0+255),b
  5214  001914  6B48               	clrf	(?_printf+9)& (0+255),b
  5215  001916  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5216  001918  0748               	decf	(?_printf+9)& (0+255),f,b
  5217  00191A  0101               	movlb	1	; () banked
  5218  00191C  51A3               	movf	(_chanValdig+3)& (0+255),w,b
  5219  00191E  0101               	movlb	1	; () banked
  5220  001920  6F49               	movwf	(?_printf+10)& (0+255),b
  5221  001922  6B4A               	clrf	(?_printf+11)& (0+255),b
  5222  001924  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5223  001926  074A               	decf	(?_printf+11)& (0+255),f,b
  5224  001928  0101               	movlb	1	; () banked
  5225  00192A  51A4               	movf	(_chanValdig+4)& (0+255),w,b
  5226  00192C  0101               	movlb	1	; () banked
  5227  00192E  6F4B               	movwf	(?_printf+12)& (0+255),b
  5228  001930  6B4C               	clrf	(?_printf+13)& (0+255),b
  5229  001932  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5230  001934  074C               	decf	(?_printf+13)& (0+255),f,b
  5231  001936  0101               	movlb	1	; () banked
  5232  001938  51A5               	movf	(_chanValdig+5)& (0+255),w,b
  5233  00193A  0101               	movlb	1	; () banked
  5234  00193C  6F4D               	movwf	(?_printf+14)& (0+255),b
  5235  00193E  6B4E               	clrf	(?_printf+15)& (0+255),b
  5236  001940  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5237  001942  074E               	decf	(?_printf+15)& (0+255),f,b
  5238  001944  EC61  F000         	call	_printf	;wreg free
  5239                           
  5240                           ;screenDrawers.h: 72: }else if(chanValSection == 1) {
  5241  001948  D075               	goto	l10521
  5242  00194A                     l10513:
  5243  00194A  0101               	movlb	1	; () banked
  5244  00194C  0594               	decf	_chanValSection& (0+255),w,b
  5245  00194E  A4D8               	btfss	status,2,c
  5246  001950  D037               	goto	l10517
  5247                           
  5248                           ; BSR set to: 1
  5249                           ;screenDrawers.h: 73: printf(" %u%c%u%u.%u%u%u ", chanValdig[0], flech, chanValdig[1],
  5250                           ;screenDrawers.h: 74: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5251  001952  0EF7               	movlw	low STR_5
  5252  001954  0101               	movlb	1	; () banked
  5253  001956  6F3F               	movwf	printf@f& (0+255),b
  5254  001958  0E7E               	movlw	high STR_5
  5255  00195A  0101               	movlb	1	; () banked
  5256  00195C  6F40               	movwf	(printf@f+1)& (0+255),b
  5257  00195E  0101               	movlb	1	; () banked
  5258  001960  51A0               	movf	_chanValdig& (0+255),w,b
  5259  001962  0101               	movlb	1	; () banked
  5260  001964  6F41               	movwf	(?_printf+2)& (0+255),b
  5261  001966  6B42               	clrf	(?_printf+3)& (0+255),b
  5262  001968  BF41               	btfsc	(?_printf+2)& (0+255),7,b
  5263  00196A  0742               	decf	(?_printf+3)& (0+255),f,b
  5264  00196C  C195  F143         	movff	_flech,?_printf+4
  5265  001970  0101               	movlb	1	; () banked
  5266  001972  6B44               	clrf	(?_printf+5)& (0+255),b
  5267  001974  0101               	movlb	1	; () banked
  5268  001976  51A1               	movf	(_chanValdig+1)& (0+255),w,b
  5269  001978  0101               	movlb	1	; () banked
  5270  00197A  6F45               	movwf	(?_printf+6)& (0+255),b
  5271  00197C  6B46               	clrf	(?_printf+7)& (0+255),b
  5272  00197E  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5273  001980  0746               	decf	(?_printf+7)& (0+255),f,b
  5274  001982  0101               	movlb	1	; () banked
  5275  001984  51A2               	movf	(_chanValdig+2)& (0+255),w,b
  5276  001986  0101               	movlb	1	; () banked
  5277  001988  6F47               	movwf	(?_printf+8)& (0+255),b
  5278  00198A  6B48               	clrf	(?_printf+9)& (0+255),b
  5279  00198C  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5280  00198E  0748               	decf	(?_printf+9)& (0+255),f,b
  5281  001990  0101               	movlb	1	; () banked
  5282  001992  51A3               	movf	(_chanValdig+3)& (0+255),w,b
  5283  001994  0101               	movlb	1	; () banked
  5284  001996  6F49               	movwf	(?_printf+10)& (0+255),b
  5285  001998  6B4A               	clrf	(?_printf+11)& (0+255),b
  5286  00199A  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5287  00199C  074A               	decf	(?_printf+11)& (0+255),f,b
  5288  00199E  0101               	movlb	1	; () banked
  5289  0019A0  51A4               	movf	(_chanValdig+4)& (0+255),w,b
  5290  0019A2  0101               	movlb	1	; () banked
  5291  0019A4  6F4B               	movwf	(?_printf+12)& (0+255),b
  5292  0019A6  6B4C               	clrf	(?_printf+13)& (0+255),b
  5293  0019A8  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5294  0019AA  074C               	decf	(?_printf+13)& (0+255),f,b
  5295  0019AC  0101               	movlb	1	; () banked
  5296  0019AE  51A5               	movf	(_chanValdig+5)& (0+255),w,b
  5297  0019B0  0101               	movlb	1	; () banked
  5298  0019B2  6F4D               	movwf	(?_printf+14)& (0+255),b
  5299  0019B4  6B4E               	clrf	(?_printf+15)& (0+255),b
  5300  0019B6  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5301  0019B8  074E               	decf	(?_printf+15)& (0+255),f,b
  5302  0019BA  EC61  F000         	call	_printf	;wreg free
  5303                           
  5304                           ;screenDrawers.h: 75: }else if(chanValSection == 0) {
  5305  0019BE  D03A               	goto	l10521
  5306  0019C0                     l10517:
  5307  0019C0  0101               	movlb	1	; () banked
  5308  0019C2  5194               	movf	_chanValSection& (0+255),w,b
  5309  0019C4  A4D8               	btfss	status,2,c
  5310  0019C6  D036               	goto	l10521
  5311                           
  5312                           ; BSR set to: 1
  5313                           ;screenDrawers.h: 76: printf(" %c%u%u%u.%u%u%u ", flech, chanValdig[0], chanValdig[1],
  5314                           ;screenDrawers.h: 77: chanValdig[2], chanValdig[3], chanValdig[4], chanValdig[5]);
  5315  0019C8  0E09               	movlw	low STR_6
  5316  0019CA  0101               	movlb	1	; () banked
  5317  0019CC  6F3F               	movwf	printf@f& (0+255),b
  5318  0019CE  0E7F               	movlw	high STR_6
  5319  0019D0  0101               	movlb	1	; () banked
  5320  0019D2  6F40               	movwf	(printf@f+1)& (0+255),b
  5321  0019D4  C195  F141         	movff	_flech,?_printf+2
  5322  0019D8  0101               	movlb	1	; () banked
  5323  0019DA  6B42               	clrf	(?_printf+3)& (0+255),b
  5324  0019DC  0101               	movlb	1	; () banked
  5325  0019DE  51A0               	movf	_chanValdig& (0+255),w,b
  5326  0019E0  0101               	movlb	1	; () banked
  5327  0019E2  6F43               	movwf	(?_printf+4)& (0+255),b
  5328  0019E4  6B44               	clrf	(?_printf+5)& (0+255),b
  5329  0019E6  BF43               	btfsc	(?_printf+4)& (0+255),7,b
  5330  0019E8  0744               	decf	(?_printf+5)& (0+255),f,b
  5331  0019EA  0101               	movlb	1	; () banked
  5332  0019EC  51A1               	movf	(_chanValdig+1)& (0+255),w,b
  5333  0019EE  0101               	movlb	1	; () banked
  5334  0019F0  6F45               	movwf	(?_printf+6)& (0+255),b
  5335  0019F2  6B46               	clrf	(?_printf+7)& (0+255),b
  5336  0019F4  BF45               	btfsc	(?_printf+6)& (0+255),7,b
  5337  0019F6  0746               	decf	(?_printf+7)& (0+255),f,b
  5338  0019F8  0101               	movlb	1	; () banked
  5339  0019FA  51A2               	movf	(_chanValdig+2)& (0+255),w,b
  5340  0019FC  0101               	movlb	1	; () banked
  5341  0019FE  6F47               	movwf	(?_printf+8)& (0+255),b
  5342  001A00  6B48               	clrf	(?_printf+9)& (0+255),b
  5343  001A02  BF47               	btfsc	(?_printf+8)& (0+255),7,b
  5344  001A04  0748               	decf	(?_printf+9)& (0+255),f,b
  5345  001A06  0101               	movlb	1	; () banked
  5346  001A08  51A3               	movf	(_chanValdig+3)& (0+255),w,b
  5347  001A0A  0101               	movlb	1	; () banked
  5348  001A0C  6F49               	movwf	(?_printf+10)& (0+255),b
  5349  001A0E  6B4A               	clrf	(?_printf+11)& (0+255),b
  5350  001A10  BF49               	btfsc	(?_printf+10)& (0+255),7,b
  5351  001A12  074A               	decf	(?_printf+11)& (0+255),f,b
  5352  001A14  0101               	movlb	1	; () banked
  5353  001A16  51A4               	movf	(_chanValdig+4)& (0+255),w,b
  5354  001A18  0101               	movlb	1	; () banked
  5355  001A1A  6F4B               	movwf	(?_printf+12)& (0+255),b
  5356  001A1C  6B4C               	clrf	(?_printf+13)& (0+255),b
  5357  001A1E  BF4B               	btfsc	(?_printf+12)& (0+255),7,b
  5358  001A20  074C               	decf	(?_printf+13)& (0+255),f,b
  5359  001A22  0101               	movlb	1	; () banked
  5360  001A24  51A5               	movf	(_chanValdig+5)& (0+255),w,b
  5361  001A26  0101               	movlb	1	; () banked
  5362  001A28  6F4D               	movwf	(?_printf+14)& (0+255),b
  5363  001A2A  6B4E               	clrf	(?_printf+15)& (0+255),b
  5364  001A2C  BF4D               	btfsc	(?_printf+14)& (0+255),7,b
  5365  001A2E  074E               	decf	(?_printf+15)& (0+255),f,b
  5366  001A30  EC61  F000         	call	_printf	;wreg free
  5367  001A34                     l10521:
  5368                           
  5369                           ;screenDrawers.h: 78: }
  5370                           ;screenDrawers.h: 79: lcd_gotoxy(11, 2);
  5371  001A34  0E02               	movlw	2
  5372  001A36  0101               	movlb	1	; () banked
  5373  001A38  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5374  001A3A  0E0B               	movlw	11
  5375  001A3C  ECF1  F034         	call	_lcd_gotoxy
  5376  001A40  0012               	return		;funcret
  5377  001A42                     __end_of_drawValEditor:
  5378                           	opt stack 0
  5379                           tblptru	equ	0xFF8
  5380                           tblptrh	equ	0xFF7
  5381                           tblptrl	equ	0xFF6
  5382                           tablat	equ	0xFF5
  5383                           prodh	equ	0xFF4
  5384                           prodl	equ	0xFF3
  5385                           intcon	equ	0xFF2
  5386                           postinc0	equ	0xFEE
  5387                           wreg	equ	0xFE8
  5388                           postdec1	equ	0xFE5
  5389                           fsr1l	equ	0xFE1
  5390                           indf2	equ	0xFDF
  5391                           fsr2h	equ	0xFDA
  5392                           fsr2l	equ	0xFD9
  5393                           status	equ	0xFD8
  5394                           
  5395 ;; *************** function _drawAdvON *****************
  5396 ;; Defined at:
  5397 ;;		line 202 in file "source/screenDrawers.h"
  5398 ;; Parameters:    Size  Location     Type
  5399 ;;  on              1    wreg     unsigned char 
  5400 ;; Auto vars:     Size  Location     Type
  5401 ;;  on              1  116[BANK1 ] unsigned char 
  5402 ;; Return value:  Size  Location     Type
  5403 ;;                  1    wreg      void 
  5404 ;; Registers used:
  5405 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5406 ;; Tracked objects:
  5407 ;;		On entry : 0/0
  5408 ;;		On exit  : 0/0
  5409 ;;		Unchanged: 0/0
  5410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5411 ;;      Params:         0       0       0       0       0       0       0
  5412 ;;      Locals:         0       0       1       0       0       0       0
  5413 ;;      Temps:          0       0       0       0       0       0       0
  5414 ;;      Totals:         0       0       1       0       0       0       0
  5415 ;;Total ram usage:        1 bytes
  5416 ;; Hardware stack levels used:    1
  5417 ;; Hardware stack levels required when called:   19
  5418 ;; This function calls:
  5419 ;;		_lcd_gotoxy
  5420 ;;		_printf
  5421 ;; This function is called by:
  5422 ;;		_drawScreen
  5423 ;; This function uses a non-reentrant model
  5424 ;;
  5425                           
  5426                           	psect	text20
  5427  00669C                     __ptext20:
  5428                           	opt stack 0
  5429  00669C                     _drawAdvON:
  5430                           	opt stack 10
  5431                           
  5432                           ;incstack = 0
  5433                           ;drawAdvON@on stored from wreg
  5434  00669C  0101               	movlb	1	; () banked
  5435  00669E  6F74               	movwf	drawAdvON@on& (0+255),b
  5436                           
  5437                           ;screenDrawers.h: 203: lcd_gotoxy(1, 1);
  5438  0066A0  0E01               	movlw	1
  5439  0066A2  0101               	movlb	1	; () banked
  5440  0066A4  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  5441  0066A6  0E01               	movlw	1
  5442  0066A8  ECF1  F034         	call	_lcd_gotoxy
  5443                           
  5444                           ;screenDrawers.h: 204: printf("Modo Configurar:\n");
  5445  0066AC  0E67               	movlw	low STR_27
  5446  0066AE  0101               	movlb	1	; () banked
  5447  0066B0  6F3F               	movwf	printf@f& (0+255),b
  5448  0066B2  0E7E               	movlw	high STR_27
  5449  0066B4  0101               	movlb	1	; () banked
  5450  0066B6  6F40               	movwf	(printf@f+1)& (0+255),b
  5451  0066B8  EC61  F000         	call	_printf	;wreg free
  5452                           
  5453                           ;screenDrawers.h: 205: if(on)
  5454  0066BC  0101               	movlb	1	; () banked
  5455  0066BE  5174               	movf	drawAdvON@on& (0+255),w,b
  5456  0066C0  0101               	movlb	1	; () banked
  5457  0066C2  B4D8               	btfsc	status,2,c
  5458  0066C4  D009               	goto	l11051
  5459                           
  5460                           ; BSR set to: 1
  5461                           ;screenDrawers.h: 206: printf("    Iniciado    ");
  5462  0066C6  0E71               	movlw	low STR_28
  5463  0066C8  0101               	movlb	1	; () banked
  5464  0066CA  6F3F               	movwf	printf@f& (0+255),b
  5465  0066CC  0E7F               	movlw	high STR_28
  5466  0066CE  0101               	movlb	1	; () banked
  5467  0066D0  6F40               	movwf	(printf@f+1)& (0+255),b
  5468  0066D2  EC61  F000         	call	_printf	;wreg free
  5469  0066D6  0012               	return	
  5470  0066D8                     l11051:
  5471                           
  5472                           ;screenDrawers.h: 207: else
  5473                           ;screenDrawers.h: 208: printf("   Finalizado   ");
  5474  0066D8  0E93               	movlw	low STR_29
  5475  0066DA  0101               	movlb	1	; () banked
  5476  0066DC  6F3F               	movwf	printf@f& (0+255),b
  5477  0066DE  0E7F               	movlw	high STR_29
  5478  0066E0  0101               	movlb	1	; () banked
  5479  0066E2  6F40               	movwf	(printf@f+1)& (0+255),b
  5480  0066E4  EC61  F000         	call	_printf	;wreg free
  5481  0066E8  0012               	return	
  5482  0066EA                     __end_of_drawAdvON:
  5483                           	opt stack 0
  5484                           tblptru	equ	0xFF8
  5485                           tblptrh	equ	0xFF7
  5486                           tblptrl	equ	0xFF6
  5487                           tablat	equ	0xFF5
  5488                           prodh	equ	0xFF4
  5489                           prodl	equ	0xFF3
  5490                           intcon	equ	0xFF2
  5491                           postinc0	equ	0xFEE
  5492                           wreg	equ	0xFE8
  5493                           postdec1	equ	0xFE5
  5494                           fsr1l	equ	0xFE1
  5495                           indf2	equ	0xFDF
  5496                           fsr2h	equ	0xFDA
  5497                           fsr2l	equ	0xFD9
  5498                           status	equ	0xFD8
  5499                           
  5500 ;; *************** function _printf *****************
  5501 ;; Defined at:
  5502 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  5503 ;; Parameters:    Size  Location     Type
  5504 ;;  f               2   63[BANK1 ] PTR const unsigned char 
  5505 ;;		 -> STR_42(17), STR_41(18), STR_40(17), STR_39(18), 
  5506 ;;		 -> STR_38(17), STR_37(18), STR_36(7), STR_35(18), 
  5507 ;;		 -> STR_34(19), STR_33(18), STR_32(18), STR_31(18), 
  5508 ;;		 -> STR_30(18), STR_29(17), STR_28(17), STR_27(18), 
  5509 ;;		 -> STR_26(17), STR_25(25), STR_24(18), STR_23(7), 
  5510 ;;		 -> STR_22(18), STR_21(16), STR_20(18), STR_19(7), 
  5511 ;;		 -> STR_18(18), STR_17(15), STR_16(18), STR_15(15), 
  5512 ;;		 -> STR_14(18), STR_13(16), STR_12(18), STR_11(15), 
  5513 ;;		 -> STR_10(18), STR_9(17), STR_8(15), STR_7(18), 
  5514 ;;		 -> STR_6(18), STR_5(18), STR_4(18), STR_3(18), 
  5515 ;;		 -> STR_2(18), STR_1(18), 
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;  val             4  102[BANK1 ] unsigned long 
  5518 ;;  tmpval          4   98[BANK1 ] struct .
  5519 ;;  fval            3  110[BANK1 ] struct .
  5520 ;;  prec            2  113[BANK1 ] int 
  5521 ;;  width           2  108[BANK1 ] int 
  5522 ;;  exp             2  106[BANK1 ] int 
  5523 ;;  flag            2   96[BANK1 ] unsigned short 
  5524 ;;  ap              2   94[BANK1 ] PTR void [1]
  5525 ;;		 -> ?_printf(2), 
  5526 ;;  len             2   92[BANK1 ] unsigned int 
  5527 ;;  cp              2   90[BANK1 ] PTR const unsigned char 
  5528 ;;		 -> printf@c(1), 
  5529 ;;  c               1  115[BANK1 ] char 
  5530 ;;  d               1    0        unsigned char 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  2   63[BANK1 ] int 
  5533 ;; Registers used:
  5534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5540 ;;      Params:         0       0      18       0       0       0       0
  5541 ;;      Locals:         0       0      29       0       0       0       0
  5542 ;;      Temps:          0       0       6       0       0       0       0
  5543 ;;      Totals:         0       0      53       0       0       0       0
  5544 ;;Total ram usage:       53 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; Hardware stack levels required when called:   18
  5547 ;; This function calls:
  5548 ;;		___awdiv
  5549 ;;		___ftadd
  5550 ;;		___ftge
  5551 ;;		___ftmul
  5552 ;;		___ftneg
  5553 ;;		___ftsub
  5554 ;;		___fttol
  5555 ;;		___lldiv
  5556 ;;		___llmod
  5557 ;;		___lltoft
  5558 ;;		___wmul
  5559 ;;		__div_to_l_
  5560 ;;		__tdiv_to_l_
  5561 ;;		_fround
  5562 ;;		_isdigit
  5563 ;;		_putch
  5564 ;;		_scale
  5565 ;; This function is called by:
  5566 ;;		_drawValEditor
  5567 ;;		_drawMenu
  5568 ;;		_drawChanVal
  5569 ;;		_drawPass1Lin
  5570 ;;		_drawPassWord
  5571 ;;		_drawBadPass
  5572 ;;		_drawAdvON
  5573 ;;		_drawSNquest
  5574 ;;		_drawAutoCalibRM
  5575 ;;		_drawCalibProc
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           	psect	text21
  5580  0000C2                     __ptext21:
  5581                           	opt stack 0
  5582  0000C2                     _printf:
  5583                           	opt stack 10
  5584                           
  5585                           ;doprnt.c: 466: va_list ap;
  5586                           ;doprnt.c: 499: signed char c;
  5587                           ;doprnt.c: 501: int width;
  5588                           ;doprnt.c: 504: int prec;
  5589                           ;doprnt.c: 508: unsigned short flag;
  5590                           ;doprnt.c: 515: char d;
  5591                           ;doprnt.c: 516: double fval;
  5592                           ;doprnt.c: 517: int exp;
  5593                           ;doprnt.c: 523: union {
  5594                           ;doprnt.c: 524: unsigned long vd;
  5595                           ;doprnt.c: 525: double integ;
  5596                           ;doprnt.c: 526: } tmpval;
  5597                           ;doprnt.c: 528: unsigned long val;
  5598                           ;doprnt.c: 529: unsigned len;
  5599                           ;doprnt.c: 530: const char * cp;
  5600                           ;doprnt.c: 533: *ap = __va_start();
  5601                           
  5602                           ;incstack = 0
  5603  0000C2  0E41               	movlw	low (?_printf+2)
  5604  0000C4  0101               	movlb	1	; () banked
  5605  0000C6  6F5E               	movwf	printf@ap& (0+255),b
  5606  0000C8  0E01               	movlw	high (?_printf+2)
  5607  0000CA  0101               	movlb	1	; () banked
  5608  0000CC  6F5F               	movwf	(printf@ap+1)& (0+255),b
  5609                           
  5610                           ;doprnt.c: 536: while(c = *f++) {
  5611  0000CE  EF6A  F006         	goto	l10267
  5612  0000D2                     l9969:
  5613                           
  5614                           ; BSR set to: 1
  5615                           ;doprnt.c: 538: if(c != '%')
  5616  0000D2  0E25               	movlw	37
  5617  0000D4  0101               	movlb	1	; () banked
  5618  0000D6  1973               	xorwf	printf@c& (0+255),w,b
  5619  0000D8  B4D8               	btfsc	status,2,c
  5620  0000DA  D006               	goto	l9973
  5621                           
  5622                           ; BSR set to: 1
  5623                           ;doprnt.c: 540: {
  5624                           ;doprnt.c: 541: (putch(c) );
  5625  0000DC  0101               	movlb	1	; () banked
  5626  0000DE  5173               	movf	printf@c& (0+255),w,b
  5627  0000E0  EC11  F036         	call	_putch
  5628                           
  5629                           ;doprnt.c: 542: continue;
  5630  0000E4  EF6A  F006         	goto	l10267
  5631  0000E8                     l9973:
  5632                           
  5633                           ;doprnt.c: 543: }
  5634                           ;doprnt.c: 546: width = 0;
  5635  0000E8  0E00               	movlw	0
  5636  0000EA  0101               	movlb	1	; () banked
  5637  0000EC  6F6D               	movwf	(printf@width+1)& (0+255),b
  5638  0000EE  0E00               	movlw	0
  5639  0000F0  6F6C               	movwf	printf@width& (0+255),b
  5640                           
  5641                           ;doprnt.c: 548: flag = 0;
  5642  0000F2  0E00               	movlw	0
  5643  0000F4  0101               	movlb	1	; () banked
  5644  0000F6  6F61               	movwf	(printf@flag+1)& (0+255),b
  5645  0000F8  0E00               	movlw	0
  5646  0000FA  6F60               	movwf	printf@flag& (0+255),b
  5647                           
  5648                           ; BSR set to: 1
  5649                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5650  0000FC  C13F  FFF6         	movff	printf@f,tblptrl
  5651  000100  C140  FFF7         	movff	printf@f+1,tblptrh
  5652  000104                     	if	0	;tblptru may be non-zero
  5653  000104                     	endif
  5654  000104                     	if	0	;tblptru may be non-zero
  5655  000104                     	endif
  5656  000104  0008               	tblrd		*
  5657  000106  50F5               	movf	tablat,w,c
  5658  000108  EC36  F035         	call	_isdigit
  5659  00010C  A0D8               	btfss	status,0,c
  5660  00010E  D040               	goto	l9987
  5661                           
  5662                           ;doprnt.c: 598: width = 0;
  5663  000110  0E00               	movlw	0
  5664  000112  0101               	movlb	1	; () banked
  5665  000114  6F6D               	movwf	(printf@width+1)& (0+255),b
  5666  000116  0E00               	movlw	0
  5667  000118  6F6C               	movwf	printf@width& (0+255),b
  5668  00011A                     l9979:
  5669                           
  5670                           ;doprnt.c: 600: width *= 10;
  5671  00011A  C16C  F10E         	movff	printf@width,___wmul@multiplier
  5672  00011E  C16D  F10F         	movff	printf@width+1,___wmul@multiplier+1
  5673  000122  0E00               	movlw	0
  5674  000124  0101               	movlb	1	; () banked
  5675  000126  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5676  000128  0E0A               	movlw	10
  5677  00012A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5678  00012C  EC8B  F034         	call	___wmul	;wreg free
  5679  000130  C10E  F16C         	movff	?___wmul,printf@width
  5680  000134  C10F  F16D         	movff	?___wmul+1,printf@width+1
  5681                           
  5682                           ;doprnt.c: 601: width += *f++ - '0';
  5683  000138  0ED0               	movlw	208
  5684  00013A  0101               	movlb	1	; () banked
  5685  00013C  6F51               	movwf	??_printf& (0+255),b
  5686  00013E  0EFF               	movlw	255
  5687  000140  0101               	movlb	1	; () banked
  5688  000142  6F52               	movwf	(??_printf+1)& (0+255),b
  5689  000144  C13F  FFF6         	movff	printf@f,tblptrl
  5690  000148  C140  FFF7         	movff	printf@f+1,tblptrh
  5691  00014C                     	if	0	;tblptru may be non-zero
  5692  00014C                     	endif
  5693  00014C                     	if	0	;tblptru may be non-zero
  5694  00014C                     	endif
  5695  00014C  0008               	tblrd		*
  5696  00014E  50F5               	movf	tablat,w,c
  5697  000150  0101               	movlb	1	; () banked
  5698  000152  6F53               	movwf	(??_printf+2)& (0+255),b
  5699  000154  6B54               	clrf	(??_printf+3)& (0+255),b
  5700  000156  0101               	movlb	1	; () banked
  5701  000158  5151               	movf	??_printf& (0+255),w,b
  5702  00015A  0101               	movlb	1	; () banked
  5703  00015C  2753               	addwf	(??_printf+2)& (0+255),f,b
  5704  00015E  0101               	movlb	1	; () banked
  5705  000160  5152               	movf	(??_printf+1)& (0+255),w,b
  5706  000162  0101               	movlb	1	; () banked
  5707  000164  2354               	addwfc	(??_printf+3)& (0+255),f,b
  5708  000166  0101               	movlb	1	; () banked
  5709  000168  5153               	movf	(??_printf+2)& (0+255),w,b
  5710  00016A  0101               	movlb	1	; () banked
  5711  00016C  276C               	addwf	printf@width& (0+255),f,b
  5712  00016E  0101               	movlb	1	; () banked
  5713  000170  5154               	movf	(??_printf+3)& (0+255),w,b
  5714  000172  0101               	movlb	1	; () banked
  5715  000174  236D               	addwfc	(printf@width+1)& (0+255),f,b
  5716                           
  5717                           ; BSR set to: 1
  5718  000176  0101               	movlb	1	; () banked
  5719  000178  4B3F               	infsnz	printf@f& (0+255),f,b
  5720  00017A  2B40               	incf	(printf@f+1)& (0+255),f,b
  5721                           
  5722                           ; BSR set to: 1
  5723                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5724  00017C  C13F  FFF6         	movff	printf@f,tblptrl
  5725  000180  C140  FFF7         	movff	printf@f+1,tblptrh
  5726  000184                     	if	0	;tblptru may be non-zero
  5727  000184                     	endif
  5728  000184                     	if	0	;tblptru may be non-zero
  5729  000184                     	endif
  5730  000184  0008               	tblrd		*
  5731  000186  50F5               	movf	tablat,w,c
  5732  000188  EC36  F035         	call	_isdigit
  5733  00018C  B0D8               	btfsc	status,0,c
  5734  00018E  D7C5               	goto	l9979
  5735  000190                     l9987:
  5736                           
  5737                           ;doprnt.c: 608: }
  5738                           ;doprnt.c: 611: if(*f == '.') {
  5739  000190  C13F  FFF6         	movff	printf@f,tblptrl
  5740  000194  C140  FFF7         	movff	printf@f+1,tblptrh
  5741  000198                     	if	0	;tblptru may be non-zero
  5742  000198                     	endif
  5743  000198                     	if	0	;tblptru may be non-zero
  5744  000198                     	endif
  5745  000198  0008               	tblrd		*
  5746  00019A  50F5               	movf	tablat,w,c
  5747  00019C  0A2E               	xorlw	46
  5748  00019E  A4D8               	btfss	status,2,c
  5749  0001A0  D039               	goto	l9999
  5750                           
  5751                           ;doprnt.c: 612: flag |= 0x4000;
  5752  0001A2  0101               	movlb	1	; () banked
  5753  0001A4  8D61               	bsf	(printf@flag+1)& (0+255),6,b
  5754                           
  5755                           ;doprnt.c: 613: f++;
  5756  0001A6  0101               	movlb	1	; () banked
  5757  0001A8  4B3F               	infsnz	printf@f& (0+255),f,b
  5758  0001AA  2B40               	incf	(printf@f+1)& (0+255),f,b
  5759                           
  5760                           ; BSR set to: 1
  5761                           ;doprnt.c: 620: {
  5762                           ;doprnt.c: 621: prec = 0;
  5763  0001AC  0E00               	movlw	0
  5764  0001AE  0101               	movlb	1	; () banked
  5765  0001B0  6F72               	movwf	(printf@prec+1)& (0+255),b
  5766  0001B2  0E00               	movlw	0
  5767  0001B4  6F71               	movwf	printf@prec& (0+255),b
  5768                           
  5769                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  5770  0001B6  D023               	goto	l9997
  5771  0001B8                     l9993:
  5772                           
  5773                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  5774  0001B8  C171  F10E         	movff	printf@prec,___wmul@multiplier
  5775  0001BC  C172  F10F         	movff	printf@prec+1,___wmul@multiplier+1
  5776  0001C0  0E00               	movlw	0
  5777  0001C2  0101               	movlb	1	; () banked
  5778  0001C4  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5779  0001C6  0E0A               	movlw	10
  5780  0001C8  6F10               	movwf	___wmul@multiplicand& (0+255),b
  5781  0001CA  EC8B  F034         	call	___wmul	;wreg free
  5782  0001CE  C13F  FFF6         	movff	printf@f,tblptrl
  5783  0001D2  C140  FFF7         	movff	printf@f+1,tblptrh
  5784  0001D6                     	if	0	;tblptru may be non-zero
  5785  0001D6                     	endif
  5786  0001D6                     	if	0	;tblptru may be non-zero
  5787  0001D6                     	endif
  5788  0001D6  0008               	tblrd		*
  5789  0001D8  50F5               	movf	tablat,w,c
  5790  0001DA  0101               	movlb	1	; () banked
  5791  0001DC  270E               	addwf	?___wmul& (0+255),f,b
  5792  0001DE  0E00               	movlw	0
  5793  0001E0  0101               	movlb	1	; () banked
  5794  0001E2  230F               	addwfc	(?___wmul+1)& (0+255),f,b
  5795  0001E4  0ED0               	movlw	208
  5796  0001E6  0101               	movlb	1	; () banked
  5797  0001E8  250E               	addwf	?___wmul& (0+255),w,b
  5798  0001EA  0101               	movlb	1	; () banked
  5799  0001EC  6F71               	movwf	printf@prec& (0+255),b
  5800  0001EE  0EFF               	movlw	255
  5801  0001F0  0101               	movlb	1	; () banked
  5802  0001F2  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  5803  0001F4  0101               	movlb	1	; () banked
  5804  0001F6  6F72               	movwf	(printf@prec+1)& (0+255),b
  5805                           
  5806                           ; BSR set to: 1
  5807  0001F8  0101               	movlb	1	; () banked
  5808  0001FA  4B3F               	infsnz	printf@f& (0+255),f,b
  5809  0001FC  2B40               	incf	(printf@f+1)& (0+255),f,b
  5810  0001FE                     l9997:
  5811                           
  5812                           ; BSR set to: 1
  5813  0001FE  C13F  FFF6         	movff	printf@f,tblptrl
  5814  000202  C140  FFF7         	movff	printf@f+1,tblptrh
  5815  000206                     	if	0	;tblptru may be non-zero
  5816  000206                     	endif
  5817  000206                     	if	0	;tblptru may be non-zero
  5818  000206                     	endif
  5819  000206  0008               	tblrd		*
  5820  000208  50F5               	movf	tablat,w,c
  5821  00020A  EC36  F035         	call	_isdigit
  5822  00020E  A0D8               	btfss	status,0,c
  5823  000210  D07A               	goto	l10039
  5824  000212  D7D2               	goto	l9993
  5825  000214                     l9999:
  5826                           
  5827                           ;doprnt.c: 626: prec = 0;
  5828  000214  0E00               	movlw	0
  5829  000216  0101               	movlb	1	; () banked
  5830  000218  6F72               	movwf	(printf@prec+1)& (0+255),b
  5831  00021A  0E00               	movlw	0
  5832  00021C  6F71               	movwf	printf@prec& (0+255),b
  5833                           
  5834                           ; BSR set to: 1
  5835                           ;doprnt.c: 628: flag |= 0x1000;
  5836  00021E  0101               	movlb	1	; () banked
  5837  000220  8961               	bsf	(printf@flag+1)& (0+255),4,b
  5838                           
  5839                           ; BSR set to: 1
  5840                           ;doprnt.c: 630: }
  5841                           ;doprnt.c: 635: switch(c = *f++) {
  5842  000222  D071               	goto	l10039
  5843  000224                     l10003:
  5844                           
  5845                           ; BSR set to: 1
  5846                           ;doprnt.c: 663: flag |= 0x400;
  5847  000224  0101               	movlb	1	; () banked
  5848  000226  8561               	bsf	(printf@flag+1)& (0+255),2,b
  5849                           
  5850                           ; BSR set to: 1
  5851                           ;doprnt.c: 698: case 'i':
  5852                           ;doprnt.c: 699: break;
  5853                           
  5854                           ; BSR set to: 1
  5855                           
  5856                           ;doprnt.c: 697: case 'd':
  5857                           
  5858                           ;doprnt.c: 664: break;
  5859  000228  D08D               	goto	l10041
  5860  00022A                     l10005:
  5861                           
  5862                           ; BSR set to: 1
  5863                           ;doprnt.c: 753: if(prec && prec < len)
  5864  00022A  0101               	movlb	1	; () banked
  5865  00022C  5171               	movf	printf@prec& (0+255),w,b
  5866  00022E  0101               	movlb	1	; () banked
  5867  000230  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  5868  000232  B4D8               	btfsc	status,2,c
  5869  000234  D00E               	goto	l10011
  5870                           
  5871                           ; BSR set to: 1
  5872  000236  0101               	movlb	1	; () banked
  5873  000238  515C               	movf	printf@len& (0+255),w,b
  5874  00023A  0101               	movlb	1	; () banked
  5875  00023C  5D71               	subwf	printf@prec& (0+255),w,b
  5876  00023E  0101               	movlb	1	; () banked
  5877  000240  515D               	movf	(printf@len+1)& (0+255),w,b
  5878  000242  0101               	movlb	1	; () banked
  5879  000244  5972               	subwfb	(printf@prec+1)& (0+255),w,b
  5880  000246  B0D8               	btfsc	status,0,c
  5881  000248  D004               	goto	l10011
  5882                           
  5883                           ; BSR set to: 1
  5884                           ;doprnt.c: 754: len = prec;
  5885  00024A  C171  F15C         	movff	printf@prec,printf@len
  5886  00024E  C172  F15D         	movff	printf@prec+1,printf@len+1
  5887  000252                     l10011:
  5888                           
  5889                           ; BSR set to: 1
  5890                           ;doprnt.c: 757: if(width > len)
  5891  000252  0101               	movlb	1	; () banked
  5892  000254  516C               	movf	printf@width& (0+255),w,b
  5893  000256  0101               	movlb	1	; () banked
  5894  000258  5D5C               	subwf	printf@len& (0+255),w,b
  5895  00025A  0101               	movlb	1	; () banked
  5896  00025C  516D               	movf	(printf@width+1)& (0+255),w,b
  5897  00025E  0101               	movlb	1	; () banked
  5898  000260  595D               	subwfb	(printf@len+1)& (0+255),w,b
  5899  000262  B0D8               	btfsc	status,0,c
  5900  000264  D009               	goto	l10015
  5901                           
  5902                           ; BSR set to: 1
  5903                           ;doprnt.c: 758: width -= len;
  5904  000266  0101               	movlb	1	; () banked
  5905  000268  515C               	movf	printf@len& (0+255),w,b
  5906  00026A  0101               	movlb	1	; () banked
  5907  00026C  5F6C               	subwf	printf@width& (0+255),f,b
  5908  00026E  0101               	movlb	1	; () banked
  5909  000270  515D               	movf	(printf@len+1)& (0+255),w,b
  5910  000272  0101               	movlb	1	; () banked
  5911  000274  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  5912  000276  D009               	goto	l10019
  5913  000278                     l10015:
  5914                           
  5915                           ; BSR set to: 1
  5916                           ;doprnt.c: 759: else
  5917                           ;doprnt.c: 760: width = 0;
  5918  000278  0E00               	movlw	0
  5919  00027A  0101               	movlb	1	; () banked
  5920  00027C  6F6D               	movwf	(printf@width+1)& (0+255),b
  5921  00027E  0E00               	movlw	0
  5922  000280  6F6C               	movwf	printf@width& (0+255),b
  5923                           
  5924                           ; BSR set to: 1
  5925                           ;doprnt.c: 764: while(width--)
  5926  000282  D003               	goto	l10019
  5927  000284                     l10017:
  5928                           
  5929                           ; BSR set to: 1
  5930                           ;doprnt.c: 765: (putch(' ') );
  5931  000284  0E20               	movlw	32
  5932  000286  EC11  F036         	call	_putch
  5933  00028A                     l10019:
  5934  00028A  0101               	movlb	1	; () banked
  5935  00028C  076C               	decf	printf@width& (0+255),f,b
  5936  00028E  A0D8               	btfss	status,0,c
  5937  000290  076D               	decf	(printf@width+1)& (0+255),f,b
  5938  000292  0101               	movlb	1	; () banked
  5939  000294  296C               	incf	printf@width& (0+255),w,b
  5940  000296  E1F6               	bnz	l10017
  5941  000298  0101               	movlb	1	; () banked
  5942  00029A  296D               	incf	(printf@width+1)& (0+255),w,b
  5943  00029C  B4D8               	btfsc	status,2,c
  5944  00029E  D00B               	goto	l10025
  5945  0002A0  D7F1               	goto	l10017
  5946  0002A2                     l10021:
  5947                           
  5948                           ; BSR set to: 1
  5949                           ;doprnt.c: 768: (putch(*cp++) );
  5950  0002A2  C15A  FFD9         	movff	printf@cp,fsr2l
  5951  0002A6  C15B  FFDA         	movff	printf@cp+1,fsr2h
  5952  0002AA  50DF               	movf	indf2,w,c
  5953  0002AC  EC11  F036         	call	_putch
  5954  0002B0  0101               	movlb	1	; () banked
  5955  0002B2  4B5A               	infsnz	printf@cp& (0+255),f,b
  5956  0002B4  2B5B               	incf	(printf@cp+1)& (0+255),f,b
  5957  0002B6                     l10025:
  5958                           
  5959                           ; BSR set to: 1
  5960  0002B6  0101               	movlb	1	; () banked
  5961  0002B8  075C               	decf	printf@len& (0+255),f,b
  5962  0002BA  A0D8               	btfss	status,0,c
  5963  0002BC  075D               	decf	(printf@len+1)& (0+255),f,b
  5964  0002BE  0101               	movlb	1	; () banked
  5965  0002C0  295C               	incf	printf@len& (0+255),w,b
  5966  0002C2  E1EF               	bnz	l10021
  5967  0002C4  0101               	movlb	1	; () banked
  5968  0002C6  295D               	incf	(printf@len+1)& (0+255),w,b
  5969  0002C8  B4D8               	btfsc	status,2,c
  5970  0002CA  EF6A  F006         	goto	l10267
  5971  0002CE  D7E9               	goto	l10021
  5972  0002D0                     l10027:
  5973                           
  5974                           ; BSR set to: 1
  5975                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5976  0002D0  C15E  FFD9         	movff	printf@ap,fsr2l
  5977  0002D4  C15F  FFDA         	movff	printf@ap+1,fsr2h
  5978  0002D8  50DF               	movf	indf2,w,c
  5979  0002DA  0101               	movlb	1	; () banked
  5980  0002DC  6F73               	movwf	printf@c& (0+255),b
  5981                           
  5982                           ; BSR set to: 1
  5983  0002DE  0E02               	movlw	2
  5984  0002E0  0101               	movlb	1	; () banked
  5985  0002E2  275E               	addwf	printf@ap& (0+255),f,b
  5986  0002E4  0E00               	movlw	0
  5987  0002E6  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  5988  0002E8                     l10031:
  5989                           
  5990                           ; BSR set to: 1
  5991                           ;doprnt.c: 805: cp = (char *)&c;
  5992  0002E8  0E73               	movlw	low printf@c
  5993  0002EA  0101               	movlb	1	; () banked
  5994  0002EC  6F5A               	movwf	printf@cp& (0+255),b
  5995  0002EE  0E01               	movlw	high printf@c
  5996  0002F0  0101               	movlb	1	; () banked
  5997  0002F2  6F5B               	movwf	(printf@cp+1)& (0+255),b
  5998                           
  5999                           ; BSR set to: 1
  6000                           ;doprnt.c: 806: len = 1;
  6001  0002F4  0E00               	movlw	0
  6002  0002F6  0101               	movlb	1	; () banked
  6003  0002F8  6F5D               	movwf	(printf@len+1)& (0+255),b
  6004  0002FA  0E01               	movlw	1
  6005  0002FC  6F5C               	movwf	printf@len& (0+255),b
  6006                           
  6007                           ;doprnt.c: 807: goto dostring;
  6008  0002FE  D795               	goto	l10005
  6009  000300                     l10035:
  6010                           
  6011                           ; BSR set to: 1
  6012                           ;doprnt.c: 818: flag |= 0x40;
  6013  000300  0101               	movlb	1	; () banked
  6014  000302  8D60               	bsf	printf@flag& (0+255),6,b
  6015                           
  6016                           ; BSR set to: 1
  6017                           ;doprnt.c: 822: }
  6018                           
  6019                           ;doprnt.c: 819: break;
  6020  000304  D01F               	goto	l10041
  6021  000306                     l10039:
  6022  000306  C13F  FFF6         	movff	printf@f,tblptrl
  6023  00030A  C140  FFF7         	movff	printf@f+1,tblptrh
  6024  00030E  0101               	movlb	1	; () banked
  6025  000310  4B3F               	infsnz	printf@f& (0+255),f,b
  6026  000312  2B40               	incf	(printf@f+1)& (0+255),f,b
  6027  000314                     	if	0	;tblptru may be non-zero
  6028  000314                     	endif
  6029  000314                     	if	0	;tblptru may be non-zero
  6030  000314                     	endif
  6031  000314  0008               	tblrd		*
  6032  000316  CFF5 F173          	movff	tablat,printf@c
  6033  00031A  0101               	movlb	1	; () banked
  6034  00031C  5173               	movf	printf@c& (0+255),w,b
  6035                           
  6036                           ; Switch size 1, requested type "space"
  6037                           ; Number of cases is 6, Range of values is 0 to 117
  6038                           ; switch strategies available:
  6039                           ; Name         Instructions Cycles
  6040                           ; simple_byte           19    10 (average)
  6041                           ;	Chosen strategy is simple_byte
  6042  00031E  0A00               	xorlw	0	; case 0
  6043  000320  B4D8               	btfsc	status,2,c
  6044  000322  0012               	return	
  6045  000324  0A63               	xorlw	99	; case 99
  6046  000326  B4D8               	btfsc	status,2,c
  6047  000328  D7D3               	goto	l10027
  6048  00032A  0A07               	xorlw	7	; case 100
  6049  00032C  B4D8               	btfsc	status,2,c
  6050  00032E  D00A               	goto	l10041
  6051  000330  0A02               	xorlw	2	; case 102
  6052  000332  B4D8               	btfsc	status,2,c
  6053  000334  D777               	goto	l10003
  6054  000336  0A0F               	xorlw	15	; case 105
  6055  000338  B4D8               	btfsc	status,2,c
  6056  00033A  D004               	goto	l10041
  6057  00033C  0A1C               	xorlw	28	; case 117
  6058  00033E  B4D8               	btfsc	status,2,c
  6059  000340  D7DF               	goto	l10035
  6060  000342  D7D2               	goto	l10031
  6061  000344                     l10041:
  6062                           
  6063                           ; BSR set to: 1
  6064                           ;doprnt.c: 825: if(flag & (0x700)) {
  6065  000344  0E07               	movlw	7
  6066  000346  0101               	movlb	1	; () banked
  6067  000348  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6068  00034A  B4D8               	btfsc	status,2,c
  6069  00034C  D351               	goto	l955
  6070                           
  6071                           ; BSR set to: 1
  6072                           ;doprnt.c: 827: if(flag & 0x1000)
  6073  00034E  0101               	movlb	1	; () banked
  6074  000350  A961               	btfss	(printf@flag+1)& (0+255),4,b
  6075  000352  D005               	goto	l10047
  6076                           
  6077                           ; BSR set to: 1
  6078                           ;doprnt.c: 829: prec = 6;
  6079  000354  0E00               	movlw	0
  6080  000356  0101               	movlb	1	; () banked
  6081  000358  6F72               	movwf	(printf@prec+1)& (0+255),b
  6082  00035A  0E06               	movlw	6
  6083  00035C  6F71               	movwf	printf@prec& (0+255),b
  6084  00035E                     l10047:
  6085                           
  6086                           ; BSR set to: 1
  6087                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  6088  00035E  C15E  FFD9         	movff	printf@ap,fsr2l
  6089  000362  C15F  FFDA         	movff	printf@ap+1,fsr2h
  6090  000366  CFDE F16E          	movff	postinc2,printf@fval
  6091  00036A  CFDE F16F          	movff	postinc2,printf@fval+1
  6092  00036E  CFDD F170          	movff	postdec2,printf@fval+2
  6093                           
  6094                           ; BSR set to: 1
  6095  000372  0E03               	movlw	3
  6096  000374  0101               	movlb	1	; () banked
  6097  000376  275E               	addwf	printf@ap& (0+255),f,b
  6098  000378  0E00               	movlw	0
  6099  00037A  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  6100                           
  6101                           ; BSR set to: 1
  6102                           ;doprnt.c: 831: if(fval < 0.0) {
  6103  00037C  0101               	movlb	1	; () banked
  6104  00037E  AF70               	btfss	(printf@fval+2)& (0+255),7,b
  6105  000380  D011               	goto	l10057
  6106                           
  6107                           ; BSR set to: 1
  6108                           ;doprnt.c: 832: fval = -fval;
  6109  000382  C16E  F100         	movff	printf@fval,___ftneg@f1
  6110  000386  C16F  F101         	movff	printf@fval+1,___ftneg@f1+1
  6111  00038A  C170  F102         	movff	printf@fval+2,___ftneg@f1+2
  6112  00038E  EC09  F035         	call	___ftneg	;wreg free
  6113  000392  C100  F16E         	movff	?___ftneg,printf@fval
  6114  000396  C101  F16F         	movff	?___ftneg+1,printf@fval+1
  6115  00039A  C102  F170         	movff	?___ftneg+2,printf@fval+2
  6116                           
  6117                           ;doprnt.c: 833: flag |= 0x03;
  6118  00039E  0E03               	movlw	3
  6119  0003A0  0101               	movlb	1	; () banked
  6120  0003A2  1360               	iorwf	printf@flag& (0+255),f,b
  6121  0003A4                     l10057:
  6122                           
  6123                           ; BSR set to: 1
  6124                           ;doprnt.c: 834: }
  6125                           ;doprnt.c: 835: exp = 0;
  6126  0003A4  0E00               	movlw	0
  6127  0003A6  0101               	movlb	1	; () banked
  6128  0003A8  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6129  0003AA  0E00               	movlw	0
  6130  0003AC  6F6A               	movwf	printf@exp& (0+255),b
  6131                           
  6132                           ; BSR set to: 1
  6133                           ;doprnt.c: 836: if( fval!=0) {
  6134  0003AE  0101               	movlb	1	; () banked
  6135  0003B0  516E               	movf	printf@fval& (0+255),w,b
  6136  0003B2  0101               	movlb	1	; () banked
  6137  0003B4  116F               	iorwf	(printf@fval+1)& (0+255),w,b
  6138  0003B6  0101               	movlb	1	; () banked
  6139  0003B8  1170               	iorwf	(printf@fval+2)& (0+255),w,b
  6140  0003BA  B4D8               	btfsc	status,2,c
  6141  0003BC  D09B               	goto	l10085
  6142                           
  6143                           ; BSR set to: 1
  6144                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  6145  0003BE  0E82               	movlw	130
  6146  0003C0  0101               	movlb	1	; () banked
  6147  0003C2  6F51               	movwf	??_printf& (0+255),b
  6148  0003C4  0EFF               	movlw	255
  6149  0003C6  0101               	movlb	1	; () banked
  6150  0003C8  6F52               	movwf	(??_printf+1)& (0+255),b
  6151  0003CA  C16E  F153         	movff	printf@fval,??_printf+2
  6152  0003CE  C16F  F154         	movff	printf@fval+1,??_printf+3
  6153  0003D2  C170  F155         	movff	printf@fval+2,??_printf+4
  6154  0003D6  C171  F156         	movff	printf@fval+3,??_printf+5
  6155  0003DA  0E10               	movlw	16
  6156  0003DC  D006               	goto	u14230
  6157  0003DE                     u14235:
  6158  0003DE  0101               	movlb	1	; () banked
  6159  0003E0  90D8               	bcf	status,0,c
  6160  0003E2  3356               	rrcf	(??_printf+5)& (0+255),f,b
  6161  0003E4  3355               	rrcf	(??_printf+4)& (0+255),f,b
  6162  0003E6  3354               	rrcf	(??_printf+3)& (0+255),f,b
  6163  0003E8  3353               	rrcf	(??_printf+2)& (0+255),f,b
  6164  0003EA                     u14230:
  6165  0003EA  2EE8               	decfsz	wreg,f,c
  6166  0003EC  D7F8               	goto	u14235
  6167  0003EE  0101               	movlb	1	; () banked
  6168  0003F0  5153               	movf	(??_printf+2)& (0+255),w,b
  6169  0003F2  0101               	movlb	1	; () banked
  6170  0003F4  2551               	addwf	??_printf& (0+255),w,b
  6171  0003F6  0101               	movlb	1	; () banked
  6172  0003F8  6F6A               	movwf	printf@exp& (0+255),b
  6173  0003FA  0E00               	movlw	0
  6174  0003FC  0101               	movlb	1	; () banked
  6175  0003FE  2152               	addwfc	(??_printf+1)& (0+255),w,b
  6176  000400  0101               	movlb	1	; () banked
  6177  000402  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6178                           
  6179                           ; BSR set to: 1
  6180                           ;doprnt.c: 838: exp--;
  6181  000404  0101               	movlb	1	; () banked
  6182  000406  076A               	decf	printf@exp& (0+255),f,b
  6183  000408  A0D8               	btfss	status,0,c
  6184  00040A  076B               	decf	(printf@exp+1)& (0+255),f,b
  6185                           
  6186                           ; BSR set to: 1
  6187                           ;doprnt.c: 839: exp *= 3;
  6188  00040C  C16A  F10E         	movff	printf@exp,___wmul@multiplier
  6189  000410  C16B  F10F         	movff	printf@exp+1,___wmul@multiplier+1
  6190  000414  0E00               	movlw	0
  6191  000416  0101               	movlb	1	; () banked
  6192  000418  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6193  00041A  0E03               	movlw	3
  6194  00041C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  6195  00041E  EC8B  F034         	call	___wmul	;wreg free
  6196  000422  C10E  F16A         	movff	?___wmul,printf@exp
  6197  000426  C10F  F16B         	movff	?___wmul+1,printf@exp+1
  6198                           
  6199                           ;doprnt.c: 840: exp /= 10;
  6200  00042A  C16A  F106         	movff	printf@exp,___awdiv@dividend
  6201  00042E  C16B  F107         	movff	printf@exp+1,___awdiv@dividend+1
  6202  000432  0E00               	movlw	0
  6203  000434  0101               	movlb	1	; () banked
  6204  000436  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  6205  000438  0E0A               	movlw	10
  6206  00043A  6F08               	movwf	___awdiv@divisor& (0+255),b
  6207  00043C  ECC6  F027         	call	___awdiv	;wreg free
  6208  000440  C106  F16A         	movff	?___awdiv,printf@exp
  6209  000444  C107  F16B         	movff	?___awdiv+1,printf@exp+1
  6210                           
  6211                           ;doprnt.c: 841: if(exp < 0)
  6212  000448  0101               	movlb	1	; () banked
  6213  00044A  AF6B               	btfss	(printf@exp+1)& (0+255),7,b
  6214  00044C  D004               	goto	l10073
  6215                           
  6216                           ; BSR set to: 1
  6217                           ;doprnt.c: 842: exp--;
  6218  00044E  0101               	movlb	1	; () banked
  6219  000450  076A               	decf	printf@exp& (0+255),f,b
  6220  000452  A0D8               	btfss	status,0,c
  6221  000454  076B               	decf	(printf@exp+1)& (0+255),f,b
  6222  000456                     l10073:
  6223                           
  6224                           ; BSR set to: 1
  6225                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  6226  000456  0101               	movlb	1	; () banked
  6227  000458  516A               	movf	printf@exp& (0+255),w,b
  6228  00045A  0800               	sublw	0
  6229  00045C  EC7A  F006         	call	_scale
  6230  000460  C123  F162         	movff	?_scale,printf@tmpval
  6231  000464  C124  F163         	movff	?_scale+1,printf@tmpval+1
  6232  000468  C125  F164         	movff	?_scale+2,printf@tmpval+2
  6233                           
  6234                           ;doprnt.c: 847: tmpval.integ *= fval;
  6235  00046C  C162  F114         	movff	printf@tmpval,___ftmul@f1
  6236  000470  C163  F115         	movff	printf@tmpval+1,___ftmul@f1+1
  6237  000474  C164  F116         	movff	printf@tmpval+2,___ftmul@f1+2
  6238  000478  C16E  F117         	movff	printf@fval,___ftmul@f2
  6239  00047C  C16F  F118         	movff	printf@fval+1,___ftmul@f2+1
  6240  000480  C170  F119         	movff	printf@fval+2,___ftmul@f2+2
  6241  000484  EC06  F01A         	call	___ftmul	;wreg free
  6242  000488  C114  F162         	movff	?___ftmul,printf@tmpval
  6243  00048C  C115  F163         	movff	?___ftmul+1,printf@tmpval+1
  6244  000490  C116  F164         	movff	?___ftmul+2,printf@tmpval+2
  6245                           
  6246                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  6247  000494  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6248  000498  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6249  00049C  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6250  0004A0  0E00               	movlw	0
  6251  0004A2  0101               	movlb	1	; () banked
  6252  0004A4  6F03               	movwf	___ftge@ff2& (0+255),b
  6253  0004A6  0E80               	movlw	128
  6254  0004A8  0101               	movlb	1	; () banked
  6255  0004AA  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6256  0004AC  0E3F               	movlw	63
  6257  0004AE  0101               	movlb	1	; () banked
  6258  0004B0  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6259  0004B2  EC62  F027         	call	___ftge	;wreg free
  6260  0004B6  0101               	movlb	1	; () banked
  6261  0004B8  B0D8               	btfsc	status,0,c
  6262  0004BA  D005               	goto	l10081
  6263                           
  6264                           ; BSR set to: 1
  6265                           ;doprnt.c: 849: exp--;
  6266  0004BC  0101               	movlb	1	; () banked
  6267  0004BE  076A               	decf	printf@exp& (0+255),f,b
  6268  0004C0  A0D8               	btfss	status,0,c
  6269  0004C2  076B               	decf	(printf@exp+1)& (0+255),f,b
  6270  0004C4  D017               	goto	l10085
  6271  0004C6                     l10081:
  6272                           
  6273                           ; BSR set to: 1
  6274                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  6275  0004C6  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6276  0004CA  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6277  0004CE  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6278  0004D2  0E00               	movlw	0
  6279  0004D4  0101               	movlb	1	; () banked
  6280  0004D6  6F03               	movwf	___ftge@ff2& (0+255),b
  6281  0004D8  0E20               	movlw	32
  6282  0004DA  0101               	movlb	1	; () banked
  6283  0004DC  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6284  0004DE  0E41               	movlw	65
  6285  0004E0  0101               	movlb	1	; () banked
  6286  0004E2  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6287  0004E4  EC62  F027         	call	___ftge	;wreg free
  6288  0004E8  0101               	movlb	1	; () banked
  6289  0004EA  A0D8               	btfss	status,0,c
  6290  0004EC  D003               	goto	l10085
  6291                           
  6292                           ; BSR set to: 1
  6293                           ;doprnt.c: 851: exp++;
  6294  0004EE  0101               	movlb	1	; () banked
  6295  0004F0  4B6A               	infsnz	printf@exp& (0+255),f,b
  6296  0004F2  2B6B               	incf	(printf@exp+1)& (0+255),f,b
  6297  0004F4                     l10085:
  6298                           
  6299                           ; BSR set to: 1
  6300                           ;doprnt.c: 852: }
  6301                           ;doprnt.c: 1112: if(prec <= 12)
  6302  0004F4  0101               	movlb	1	; () banked
  6303  0004F6  BF72               	btfsc	(printf@prec+1)& (0+255),7,b
  6304  0004F8  D008               	goto	l10087
  6305  0004FA  0101               	movlb	1	; () banked
  6306  0004FC  5172               	movf	(printf@prec+1)& (0+255),w,b
  6307  0004FE  E11D               	bnz	l10089
  6308  000500  0E0D               	movlw	13
  6309  000502  0101               	movlb	1	; () banked
  6310  000504  5D71               	subwf	printf@prec& (0+255),w,b
  6311  000506  B0D8               	btfsc	status,0,c
  6312  000508  D018               	goto	l10089
  6313  00050A                     l10087:
  6314                           
  6315                           ; BSR set to: 1
  6316                           ;doprnt.c: 1113: fval += fround(prec);
  6317  00050A  C16E  F12D         	movff	printf@fval,___ftadd@f1
  6318  00050E  C16F  F12E         	movff	printf@fval+1,___ftadd@f1+1
  6319  000512  C170  F12F         	movff	printf@fval+2,___ftadd@f1+2
  6320  000516  0101               	movlb	1	; () banked
  6321  000518  5171               	movf	printf@prec& (0+255),w,b
  6322  00051A  EC36  F011         	call	_fround
  6323  00051E  C123  F130         	movff	?_fround,___ftadd@f2
  6324  000522  C124  F131         	movff	?_fround+1,___ftadd@f2+1
  6325  000526  C125  F132         	movff	?_fround+2,___ftadd@f2+2
  6326  00052A  EC8C  F012         	call	___ftadd	;wreg free
  6327  00052E  C12D  F16E         	movff	?___ftadd,printf@fval
  6328  000532  C12E  F16F         	movff	?___ftadd+1,printf@fval+1
  6329  000536  C12F  F170         	movff	?___ftadd+2,printf@fval+2
  6330  00053A                     l10089:
  6331                           
  6332                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  6333  00053A  0101               	movlb	1	; () banked
  6334  00053C  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  6335  00053E  D008               	goto	l10091
  6336  000540  0101               	movlb	1	; () banked
  6337  000542  516B               	movf	(printf@exp+1)& (0+255),w,b
  6338  000544  E12A               	bnz	l10097
  6339  000546  0E0A               	movlw	10
  6340  000548  0101               	movlb	1	; () banked
  6341  00054A  5D6A               	subwf	printf@exp& (0+255),w,b
  6342  00054C  B0D8               	btfsc	status,0,c
  6343  00054E  D025               	goto	l10097
  6344  000550                     l10091:
  6345                           
  6346                           ; BSR set to: 1
  6347  000550  0101               	movlb	1	; () banked
  6348  000552  516E               	movf	printf@fval& (0+255),w,b
  6349  000554  0101               	movlb	1	; () banked
  6350  000556  116F               	iorwf	(printf@fval+1)& (0+255),w,b
  6351  000558  0101               	movlb	1	; () banked
  6352  00055A  1170               	iorwf	(printf@fval+2)& (0+255),w,b
  6353  00055C  B4D8               	btfsc	status,2,c
  6354  00055E  D063               	goto	l10111
  6355                           
  6356                           ; BSR set to: 1
  6357  000560  C16E  F12A         	movff	printf@fval,___fttol@f1
  6358  000564  C16F  F12B         	movff	printf@fval+1,___fttol@f1+1
  6359  000568  C170  F12C         	movff	printf@fval+2,___fttol@f1+2
  6360  00056C  ECB0  F01C         	call	___fttol	;wreg free
  6361  000570  0101               	movlb	1	; () banked
  6362  000572  512A               	movf	?___fttol& (0+255),w,b
  6363  000574  0101               	movlb	1	; () banked
  6364  000576  112B               	iorwf	(?___fttol+1)& (0+255),w,b
  6365  000578  0101               	movlb	1	; () banked
  6366  00057A  112C               	iorwf	(?___fttol+2)& (0+255),w,b
  6367  00057C  0101               	movlb	1	; () banked
  6368  00057E  112D               	iorwf	(?___fttol+3)& (0+255),w,b
  6369  000580  A4D8               	btfss	status,2,c
  6370  000582  D051               	goto	l10111
  6371                           
  6372                           ; BSR set to: 1
  6373  000584  0101               	movlb	1	; () banked
  6374  000586  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  6375  000588  D04E               	goto	l10111
  6376  00058A  0101               	movlb	1	; () banked
  6377  00058C  516B               	movf	(printf@exp+1)& (0+255),w,b
  6378  00058E  E105               	bnz	l10097
  6379  000590  0E02               	movlw	2
  6380  000592  0101               	movlb	1	; () banked
  6381  000594  5D6A               	subwf	printf@exp& (0+255),w,b
  6382  000596  A0D8               	btfss	status,0,c
  6383  000598  D046               	goto	l10111
  6384  00059A                     l10097:
  6385                           
  6386                           ; BSR set to: 1
  6387                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  6388  00059A  C162  F100         	movff	printf@tmpval,___ftge@ff1
  6389  00059E  C163  F101         	movff	printf@tmpval+1,___ftge@ff1+1
  6390  0005A2  C164  F102         	movff	printf@tmpval+2,___ftge@ff1+2
  6391  0005A6  0E70               	movlw	112
  6392  0005A8  0101               	movlb	1	; () banked
  6393  0005AA  6F03               	movwf	___ftge@ff2& (0+255),b
  6394  0005AC  0E89               	movlw	137
  6395  0005AE  0101               	movlb	1	; () banked
  6396  0005B0  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
  6397  0005B2  0E40               	movlw	64
  6398  0005B4  0101               	movlb	1	; () banked
  6399  0005B6  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
  6400  0005B8  EC62  F027         	call	___ftge	;wreg free
  6401  0005BC  0101               	movlb	1	; () banked
  6402  0005BE  B0D8               	btfsc	status,0,c
  6403  0005C0  D003               	goto	l10101
  6404                           
  6405                           ; BSR set to: 1
  6406                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  6407  0005C2  0101               	movlb	1	; () banked
  6408  0005C4  0EF7               	movlw	247
  6409  0005C6  D002               	goto	L1
  6410  0005C8                     l10101:
  6411                           
  6412                           ; BSR set to: 1
  6413                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  6414  0005C8  0101               	movlb	1	; () banked
  6415  0005CA  0EF8               	movlw	248
  6416  0005CC                     L1:
  6417  0005CC  276A               	addwf	printf@exp& (0+255),f,b
  6418  0005CE  0EFF               	movlw	255
  6419  0005D0  236B               	addwfc	(printf@exp+1)& (0+255),f,b
  6420                           
  6421                           ; BSR set to: 1
  6422                           ;doprnt.c: 1124: }
  6423                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  6424                           
  6425                           ; BSR set to: 1
  6426  0005D2  0101               	movlb	1	; () banked
  6427  0005D4  516A               	movf	printf@exp& (0+255),w,b
  6428  0005D6  EC7A  F006         	call	_scale
  6429  0005DA  C123  F162         	movff	?_scale,printf@tmpval
  6430  0005DE  C124  F163         	movff	?_scale+1,printf@tmpval+1
  6431  0005E2  C125  F164         	movff	?_scale+2,printf@tmpval+2
  6432                           
  6433                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  6434  0005E6  C16E  F100         	movff	printf@fval,__tdiv_to_l_@f1
  6435  0005EA  C16F  F101         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  6436  0005EE  C170  F102         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  6437  0005F2  C162  F103         	movff	printf@tmpval,__tdiv_to_l_@f2
  6438  0005F6  C163  F104         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  6439  0005FA  C164  F105         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  6440  0005FE  ECA6  F017         	call	__tdiv_to_l_	;wreg free
  6441  000602  C100  F166         	movff	?__tdiv_to_l_,printf@val
  6442  000606  C101  F167         	movff	?__tdiv_to_l_+1,printf@val+1
  6443  00060A  C102  F168         	movff	?__tdiv_to_l_+2,printf@val+2
  6444  00060E  C103  F169         	movff	?__tdiv_to_l_+3,printf@val+3
  6445                           
  6446                           ;doprnt.c: 1129: fval = 0.0;
  6447  000612  0E00               	movlw	0
  6448  000614  0101               	movlb	1	; () banked
  6449  000616  6F6E               	movwf	printf@fval& (0+255),b
  6450  000618  0E00               	movlw	0
  6451  00061A  0101               	movlb	1	; () banked
  6452  00061C  6F6F               	movwf	(printf@fval+1)& (0+255),b
  6453  00061E  0E00               	movlw	0
  6454  000620  0101               	movlb	1	; () banked
  6455  000622  6F70               	movwf	(printf@fval+2)& (0+255),b
  6456                           
  6457                           ;doprnt.c: 1130: } else {
  6458  000624  D033               	goto	l10115
  6459  000626                     l10111:
  6460                           
  6461                           ; BSR set to: 1
  6462                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6463  000626  C16E  F12A         	movff	printf@fval,___fttol@f1
  6464  00062A  C16F  F12B         	movff	printf@fval+1,___fttol@f1+1
  6465  00062E  C170  F12C         	movff	printf@fval+2,___fttol@f1+2
  6466  000632  ECB0  F01C         	call	___fttol	;wreg free
  6467  000636  C12A  F166         	movff	?___fttol,printf@val
  6468  00063A  C12B  F167         	movff	?___fttol+1,printf@val+1
  6469  00063E  C12C  F168         	movff	?___fttol+2,printf@val+2
  6470  000642  C12D  F169         	movff	?___fttol+3,printf@val+3
  6471                           
  6472                           ;doprnt.c: 1132: fval -= (double)val;
  6473  000646  C16E  F139         	movff	printf@fval,___ftsub@f1
  6474  00064A  C16F  F13A         	movff	printf@fval+1,___ftsub@f1+1
  6475  00064E  C170  F13B         	movff	printf@fval+2,___ftsub@f1+2
  6476  000652  C166  F108         	movff	printf@val,___lltoft@c
  6477  000656  C167  F109         	movff	printf@val+1,___lltoft@c+1
  6478  00065A  C168  F10A         	movff	printf@val+2,___lltoft@c+2
  6479  00065E  C169  F10B         	movff	printf@val+3,___lltoft@c+3
  6480  000662  ECAF  F02F         	call	___lltoft	;wreg free
  6481  000666  C108  F13C         	movff	?___lltoft,___ftsub@f2
  6482  00066A  C109  F13D         	movff	?___lltoft+1,___ftsub@f2+1
  6483  00066E  C10A  F13E         	movff	?___lltoft+2,___ftsub@f2+2
  6484  000672  EC75  F033         	call	___ftsub	;wreg free
  6485  000676  C139  F16E         	movff	?___ftsub,printf@fval
  6486  00067A  C13A  F16F         	movff	?___ftsub+1,printf@fval+1
  6487  00067E  C13B  F170         	movff	?___ftsub+2,printf@fval+2
  6488                           
  6489                           ;doprnt.c: 1133: exp = 0;
  6490  000682  0E00               	movlw	0
  6491  000684  0101               	movlb	1	; () banked
  6492  000686  6F6B               	movwf	(printf@exp+1)& (0+255),b
  6493  000688  0E00               	movlw	0
  6494  00068A  6F6A               	movwf	printf@exp& (0+255),b
  6495  00068C                     l10115:
  6496                           
  6497                           ; BSR set to: 1
  6498                           ;doprnt.c: 1134: }
  6499                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6500  00068C  0E01               	movlw	1
  6501  00068E  0101               	movlb	1	; () banked
  6502  000690  6F73               	movwf	printf@c& (0+255),b
  6503  000692                     l10117:
  6504                           
  6505                           ; BSR set to: 1
  6506  000692  0E0A               	movlw	10
  6507  000694  0101               	movlb	1	; () banked
  6508  000696  1973               	xorwf	printf@c& (0+255),w,b
  6509  000698  B4D8               	btfsc	status,2,c
  6510  00069A  D01E               	goto	l10129
  6511                           
  6512                           ; BSR set to: 1
  6513                           ;doprnt.c: 1137: if(val < dpowers[c])
  6514                           
  6515                           ; BSR set to: 1
  6516                           
  6517                           ; BSR set to: 1
  6518  00069C  0101               	movlb	1	; () banked
  6519  00069E  5173               	movf	printf@c& (0+255),w,b
  6520  0006A0  0D04               	mullw	4
  6521  0006A2  0E35               	movlw	low _dpowers
  6522  0006A4  24F3               	addwf	prodl,w,c
  6523  0006A6  6EF6               	movwf	tblptrl,c
  6524  0006A8  0E7D               	movlw	high _dpowers
  6525  0006AA  20F4               	addwfc	prodh,w,c
  6526  0006AC  6EF7               	movwf	tblptrh,c
  6527  0006AE                     	if	0	;There are less than 3 active tblptr bytes
  6528  0006AE                     	endif
  6529  0006AE  0009               	tblrd		*+
  6530  0006B0  50F5               	movf	tablat,w,c
  6531  0006B2  0101               	movlb	1	; () banked
  6532  0006B4  5D66               	subwf	printf@val& (0+255),w,b
  6533  0006B6  0009               	tblrd		*+
  6534  0006B8  50F5               	movf	tablat,w,c
  6535  0006BA  0101               	movlb	1	; () banked
  6536  0006BC  5967               	subwfb	(printf@val+1)& (0+255),w,b
  6537  0006BE  0009               	tblrd		*+
  6538  0006C0  50F5               	movf	tablat,w,c
  6539  0006C2  0101               	movlb	1	; () banked
  6540  0006C4  5968               	subwfb	(printf@val+2)& (0+255),w,b
  6541  0006C6  0009               	tblrd		*+
  6542  0006C8  50F5               	movf	tablat,w,c
  6543  0006CA  0101               	movlb	1	; () banked
  6544  0006CC  5969               	subwfb	(printf@val+3)& (0+255),w,b
  6545  0006CE  A0D8               	btfss	status,0,c
  6546  0006D0  D003               	goto	l10129
  6547                           
  6548                           ; BSR set to: 1
  6549                           
  6550                           ; BSR set to: 1
  6551                           
  6552                           ; BSR set to: 1
  6553                           ;doprnt.c: 1138: break;
  6554  0006D2  0101               	movlb	1	; () banked
  6555  0006D4  2B73               	incf	printf@c& (0+255),f,b
  6556  0006D6  D7DD               	goto	l10117
  6557  0006D8                     l10129:
  6558                           
  6559                           ; BSR set to: 1
  6560                           ;doprnt.c: 1142: width -= prec + c + exp;
  6561  0006D8  C173  F151         	movff	printf@c,??_printf
  6562  0006DC  0101               	movlb	1	; () banked
  6563  0006DE  6B52               	clrf	(??_printf+1)& (0+255),b
  6564  0006E0  BF51               	btfsc	??_printf& (0+255),7,b
  6565  0006E2  0752               	decf	(??_printf+1)& (0+255),f,b
  6566  0006E4  0101               	movlb	1	; () banked
  6567  0006E6  5171               	movf	printf@prec& (0+255),w,b
  6568  0006E8  0101               	movlb	1	; () banked
  6569  0006EA  2751               	addwf	??_printf& (0+255),f,b
  6570  0006EC  0101               	movlb	1	; () banked
  6571  0006EE  5172               	movf	(printf@prec+1)& (0+255),w,b
  6572  0006F0  0101               	movlb	1	; () banked
  6573  0006F2  2352               	addwfc	(??_printf+1)& (0+255),f,b
  6574  0006F4  0101               	movlb	1	; () banked
  6575  0006F6  516A               	movf	printf@exp& (0+255),w,b
  6576  0006F8  0101               	movlb	1	; () banked
  6577  0006FA  2751               	addwf	??_printf& (0+255),f,b
  6578  0006FC  0101               	movlb	1	; () banked
  6579  0006FE  516B               	movf	(printf@exp+1)& (0+255),w,b
  6580  000700  0101               	movlb	1	; () banked
  6581  000702  2352               	addwfc	(??_printf+1)& (0+255),f,b
  6582  000704  0101               	movlb	1	; () banked
  6583  000706  5151               	movf	??_printf& (0+255),w,b
  6584  000708  0101               	movlb	1	; () banked
  6585  00070A  5F6C               	subwf	printf@width& (0+255),f,b
  6586  00070C  0101               	movlb	1	; () banked
  6587  00070E  5152               	movf	(??_printf+1)& (0+255),w,b
  6588  000710  0101               	movlb	1	; () banked
  6589  000712  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  6590                           
  6591                           ;doprnt.c: 1143: if(
  6592                           ;doprnt.c: 1147: prec)
  6593  000714  0101               	movlb	1	; () banked
  6594  000716  5171               	movf	printf@prec& (0+255),w,b
  6595  000718  0101               	movlb	1	; () banked
  6596  00071A  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  6597  00071C  B4D8               	btfsc	status,2,c
  6598  00071E  D004               	goto	l10133
  6599                           
  6600                           ; BSR set to: 1
  6601                           ;doprnt.c: 1148: width--;
  6602  000720  0101               	movlb	1	; () banked
  6603  000722  076C               	decf	printf@width& (0+255),f,b
  6604  000724  A0D8               	btfss	status,0,c
  6605  000726  076D               	decf	(printf@width+1)& (0+255),f,b
  6606  000728                     l10133:
  6607                           
  6608                           ; BSR set to: 1
  6609                           ;doprnt.c: 1149: if(flag & 0x03)
  6610  000728  0E03               	movlw	3
  6611  00072A  0101               	movlb	1	; () banked
  6612  00072C  1560               	andwf	printf@flag& (0+255),w,b
  6613  00072E  0101               	movlb	1	; () banked
  6614  000730  6F51               	movwf	??_printf& (0+255),b
  6615  000732  0E00               	movlw	0
  6616  000734  0101               	movlb	1	; () banked
  6617  000736  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6618  000738  0101               	movlb	1	; () banked
  6619  00073A  6F52               	movwf	(??_printf+1)& (0+255),b
  6620  00073C  0101               	movlb	1	; () banked
  6621  00073E  5151               	movf	??_printf& (0+255),w,b
  6622  000740  0101               	movlb	1	; () banked
  6623  000742  1152               	iorwf	(??_printf+1)& (0+255),w,b
  6624  000744  B4D8               	btfsc	status,2,c
  6625  000746  D008               	goto	l10141
  6626  000748  D003               	goto	l10139
  6627  00074A                     l10137:
  6628                           
  6629                           ; BSR set to: 1
  6630                           ;doprnt.c: 1181: (putch(' ') );
  6631  00074A  0E20               	movlw	32
  6632  00074C  EC11  F036         	call	_putch
  6633  000750                     l10139:
  6634                           
  6635                           ;doprnt.c: 1182: width--;
  6636  000750  0101               	movlb	1	; () banked
  6637  000752  076C               	decf	printf@width& (0+255),f,b
  6638  000754  A0D8               	btfss	status,0,c
  6639  000756  076D               	decf	(printf@width+1)& (0+255),f,b
  6640  000758                     l10141:
  6641                           
  6642                           ; BSR set to: 1
  6643  000758  0101               	movlb	1	; () banked
  6644  00075A  BF6D               	btfsc	(printf@width+1)& (0+255),7,b
  6645  00075C  D007               	goto	l10143
  6646  00075E  0101               	movlb	1	; () banked
  6647  000760  516D               	movf	(printf@width+1)& (0+255),w,b
  6648  000762  E1F3               	bnz	l10137
  6649  000764  0101               	movlb	1	; () banked
  6650  000766  056C               	decf	printf@width& (0+255),w,b
  6651  000768  B0D8               	btfsc	status,0,c
  6652  00076A  D7EF               	goto	l10137
  6653  00076C                     l10143:
  6654                           
  6655                           ; BSR set to: 1
  6656                           ;doprnt.c: 1183: }
  6657                           ;doprnt.c: 1188: if(flag & 0x03)
  6658  00076C  0E03               	movlw	3
  6659  00076E  0101               	movlb	1	; () banked
  6660  000770  1560               	andwf	printf@flag& (0+255),w,b
  6661  000772  0101               	movlb	1	; () banked
  6662  000774  6F51               	movwf	??_printf& (0+255),b
  6663  000776  0E00               	movlw	0
  6664  000778  0101               	movlb	1	; () banked
  6665  00077A  1561               	andwf	(printf@flag+1)& (0+255),w,b
  6666  00077C  0101               	movlb	1	; () banked
  6667  00077E  6F52               	movwf	(??_printf+1)& (0+255),b
  6668  000780  0101               	movlb	1	; () banked
  6669  000782  5151               	movf	??_printf& (0+255),w,b
  6670  000784  0101               	movlb	1	; () banked
  6671  000786  1152               	iorwf	(??_printf+1)& (0+255),w,b
  6672  000788  B4D8               	btfsc	status,2,c
  6673  00078A  D04B               	goto	l10153
  6674                           
  6675                           ; BSR set to: 1
  6676                           ;doprnt.c: 1190: (putch('-') );
  6677  00078C  0E2D               	movlw	45
  6678  00078E  EC11  F036         	call	_putch
  6679                           
  6680                           ;doprnt.c: 1195: }
  6681                           ;doprnt.c: 1196: while(c--) {
  6682  000792  D047               	goto	l10153
  6683  000794                     l10147:
  6684                           
  6685                           ;doprnt.c: 1200: {
  6686                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6687  000794  C166  F100         	movff	printf@val,___lldiv@dividend
  6688  000798  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  6689  00079C  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  6690  0007A0  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  6691  0007A4  0101               	movlb	1	; () banked
  6692  0007A6  5173               	movf	printf@c& (0+255),w,b
  6693  0007A8  0D04               	mullw	4
  6694  0007AA  0E35               	movlw	low _dpowers
  6695  0007AC  24F3               	addwf	prodl,w,c
  6696  0007AE  6EF6               	movwf	tblptrl,c
  6697  0007B0  0E7D               	movlw	high _dpowers
  6698  0007B2  20F4               	addwfc	prodh,w,c
  6699  0007B4  6EF7               	movwf	tblptrh,c
  6700  0007B6                     	if	0	;There are less than 3 active tblptr bytes
  6701  0007B6                     	endif
  6702  0007B6  0009               	tblrd		*+
  6703  0007B8  CFF5 F104          	movff	tablat,___lldiv@divisor
  6704  0007BC  0009               	tblrd		*+
  6705  0007BE  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  6706  0007C2  0009               	tblrd		*+
  6707  0007C4  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  6708  0007C8  000A               	tblrd		*-
  6709  0007CA  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  6710  0007CE  EC83  F028         	call	___lldiv	;wreg free
  6711  0007D2  C100  F162         	movff	?___lldiv,printf@tmpval
  6712  0007D6  C101  F163         	movff	?___lldiv+1,printf@tmpval+1
  6713  0007DA  C102  F164         	movff	?___lldiv+2,printf@tmpval+2
  6714  0007DE  C103  F165         	movff	?___lldiv+3,printf@tmpval+3
  6715                           
  6716                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6717  0007E2  C162  F10D         	movff	printf@tmpval,___llmod@dividend
  6718  0007E6  C163  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  6719  0007EA  C164  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  6720  0007EE  C165  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  6721  0007F2  0E0A               	movlw	10
  6722  0007F4  0101               	movlb	1	; () banked
  6723  0007F6  6F11               	movwf	___llmod@divisor& (0+255),b
  6724  0007F8  0E00               	movlw	0
  6725  0007FA  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  6726  0007FC  0E00               	movlw	0
  6727  0007FE  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  6728  000800  0E00               	movlw	0
  6729  000802  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  6730  000804  EC22  F02D         	call	___llmod	;wreg free
  6731  000808  C10D  F162         	movff	?___llmod,printf@tmpval
  6732  00080C  C10E  F163         	movff	?___llmod+1,printf@tmpval+1
  6733  000810  C10F  F164         	movff	?___llmod+2,printf@tmpval+2
  6734  000814  C110  F165         	movff	?___llmod+3,printf@tmpval+3
  6735                           
  6736                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  6737  000818  0101               	movlb	1	; () banked
  6738  00081A  5162               	movf	printf@tmpval& (0+255),w,b
  6739  00081C  0F30               	addlw	48
  6740  00081E  EC11  F036         	call	_putch
  6741  000822                     l10153:
  6742  000822  0101               	movlb	1	; () banked
  6743  000824  0773               	decf	printf@c& (0+255),f,b
  6744  000826  0101               	movlb	1	; () banked
  6745  000828  2973               	incf	printf@c& (0+255),w,b
  6746  00082A  B4D8               	btfsc	status,2,c
  6747  00082C  D008               	goto	l10159
  6748  00082E  D7B2               	goto	l10147
  6749  000830                     l10155:
  6750                           
  6751                           ; BSR set to: 1
  6752                           ;doprnt.c: 1208: (putch('0') );
  6753  000830  0E30               	movlw	48
  6754  000832  EC11  F036         	call	_putch
  6755                           
  6756                           ;doprnt.c: 1209: exp--;
  6757  000836  0101               	movlb	1	; () banked
  6758  000838  076A               	decf	printf@exp& (0+255),f,b
  6759  00083A  A0D8               	btfss	status,0,c
  6760  00083C  076B               	decf	(printf@exp+1)& (0+255),f,b
  6761  00083E                     l10159:
  6762                           
  6763                           ; BSR set to: 1
  6764  00083E  0101               	movlb	1	; () banked
  6765  000840  BF6B               	btfsc	(printf@exp+1)& (0+255),7,b
  6766  000842  D007               	goto	l10161
  6767  000844  0101               	movlb	1	; () banked
  6768  000846  516B               	movf	(printf@exp+1)& (0+255),w,b
  6769  000848  E1F3               	bnz	l10155
  6770  00084A  0101               	movlb	1	; () banked
  6771  00084C  056A               	decf	printf@exp& (0+255),w,b
  6772  00084E  B0D8               	btfsc	status,0,c
  6773  000850  D7EF               	goto	l10155
  6774  000852                     l10161:
  6775                           
  6776                           ; BSR set to: 1
  6777                           ;doprnt.c: 1210: }
  6778                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6779  000852  0101               	movlb	1	; () banked
  6780  000854  BF72               	btfsc	(printf@prec+1)& (0+255),7,b
  6781  000856  D00C               	goto	l989
  6782  000858  0101               	movlb	1	; () banked
  6783  00085A  5172               	movf	(printf@prec+1)& (0+255),w,b
  6784  00085C  E105               	bnz	u14420
  6785  00085E  0E09               	movlw	9
  6786  000860  0101               	movlb	1	; () banked
  6787  000862  5D71               	subwf	printf@prec& (0+255),w,b
  6788  000864  A0D8               	btfss	status,0,c
  6789  000866  D004               	goto	l989
  6790  000868                     u14420:
  6791                           
  6792                           ; BSR set to: 1
  6793                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6794  000868  0E08               	movlw	8
  6795  00086A  0101               	movlb	1	; () banked
  6796  00086C  6F73               	movwf	printf@c& (0+255),b
  6797  00086E  D002               	goto	l10165
  6798  000870                     l989:
  6799                           
  6800                           ; BSR set to: 1
  6801                           ;doprnt.c: 1213: else
  6802                           ;doprnt.c: 1214: c = prec;
  6803  000870  C171  F173         	movff	printf@prec,printf@c
  6804  000874                     l10165:
  6805                           
  6806                           ; BSR set to: 1
  6807                           ;doprnt.c: 1215: prec -= c;
  6808  000874  0101               	movlb	1	; () banked
  6809  000876  5173               	movf	printf@c& (0+255),w,b
  6810  000878  0101               	movlb	1	; () banked
  6811  00087A  5F71               	subwf	printf@prec& (0+255),f,b
  6812  00087C  0E00               	movlw	0
  6813  00087E  0101               	movlb	1	; () banked
  6814  000880  BF73               	btfsc	printf@c& (0+255),7,b
  6815  000882  0EFF               	movlw	255
  6816  000884  0101               	movlb	1	; () banked
  6817  000886  5B72               	subwfb	(printf@prec+1)& (0+255),f,b
  6818                           
  6819                           ; BSR set to: 1
  6820                           ;doprnt.c: 1219: if(c)
  6821  000888  0101               	movlb	1	; () banked
  6822  00088A  5173               	movf	printf@c& (0+255),w,b
  6823  00088C  0101               	movlb	1	; () banked
  6824  00088E  B4D8               	btfsc	status,2,c
  6825  000890  D003               	goto	l10171
  6826                           
  6827                           ; BSR set to: 1
  6828                           ;doprnt.c: 1221: (putch('.') );
  6829  000892  0E2E               	movlw	46
  6830  000894  EC11  F036         	call	_putch
  6831  000898                     l10171:
  6832                           
  6833                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6834  000898  0101               	movlb	1	; () banked
  6835  00089A  5173               	movf	printf@c& (0+255),w,b
  6836  00089C  EC7A  F006         	call	_scale
  6837  0008A0  C123  F157         	movff	?_scale,_printf$2995
  6838  0008A4  C124  F158         	movff	?_scale+1,_printf$2995+1
  6839  0008A8  C125  F159         	movff	?_scale+2,_printf$2995+2
  6840                           
  6841                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6842  0008AC  C16E  F117         	movff	printf@fval,___ftmul@f2
  6843  0008B0  C16F  F118         	movff	printf@fval+1,___ftmul@f2+1
  6844  0008B4  C170  F119         	movff	printf@fval+2,___ftmul@f2+2
  6845  0008B8  C157  F114         	movff	_printf$2995,___ftmul@f1
  6846  0008BC  C158  F115         	movff	_printf$2995+1,___ftmul@f1+1
  6847  0008C0  C159  F116         	movff	_printf$2995+2,___ftmul@f1+2
  6848  0008C4  EC06  F01A         	call	___ftmul	;wreg free
  6849  0008C8  C114  F12A         	movff	?___ftmul,___fttol@f1
  6850  0008CC  C115  F12B         	movff	?___ftmul+1,___fttol@f1+1
  6851  0008D0  C116  F12C         	movff	?___ftmul+2,___fttol@f1+2
  6852  0008D4  ECB0  F01C         	call	___fttol	;wreg free
  6853  0008D8  C12A  F166         	movff	?___fttol,printf@val
  6854  0008DC  C12B  F167         	movff	?___fttol+1,printf@val+1
  6855  0008E0  C12C  F168         	movff	?___fttol+2,printf@val+2
  6856  0008E4  C12D  F169         	movff	?___fttol+3,printf@val+3
  6857                           
  6858                           ;doprnt.c: 1228: while(c--) {
  6859  0008E8  D06E               	goto	l10181
  6860  0008EA                     l10175:
  6861                           
  6862                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6863  0008EA  C166  F100         	movff	printf@val,___lldiv@dividend
  6864  0008EE  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  6865  0008F2  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  6866  0008F6  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  6867  0008FA  0101               	movlb	1	; () banked
  6868  0008FC  5173               	movf	printf@c& (0+255),w,b
  6869  0008FE  0D04               	mullw	4
  6870  000900  0E35               	movlw	low _dpowers
  6871  000902  24F3               	addwf	prodl,w,c
  6872  000904  6EF6               	movwf	tblptrl,c
  6873  000906  0E7D               	movlw	high _dpowers
  6874  000908  20F4               	addwfc	prodh,w,c
  6875  00090A  6EF7               	movwf	tblptrh,c
  6876  00090C                     	if	0	;There are less than 3 active tblptr bytes
  6877  00090C                     	endif
  6878  00090C  0009               	tblrd		*+
  6879  00090E  CFF5 F104          	movff	tablat,___lldiv@divisor
  6880  000912  0009               	tblrd		*+
  6881  000914  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  6882  000918  0009               	tblrd		*+
  6883  00091A  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  6884  00091E  000A               	tblrd		*-
  6885  000920  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  6886  000924  EC83  F028         	call	___lldiv	;wreg free
  6887  000928  C100  F162         	movff	?___lldiv,printf@tmpval
  6888  00092C  C101  F163         	movff	?___lldiv+1,printf@tmpval+1
  6889  000930  C102  F164         	movff	?___lldiv+2,printf@tmpval+2
  6890  000934  C103  F165         	movff	?___lldiv+3,printf@tmpval+3
  6891                           
  6892                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6893  000938  C162  F10D         	movff	printf@tmpval,___llmod@dividend
  6894  00093C  C163  F10E         	movff	printf@tmpval+1,___llmod@dividend+1
  6895  000940  C164  F10F         	movff	printf@tmpval+2,___llmod@dividend+2
  6896  000944  C165  F110         	movff	printf@tmpval+3,___llmod@dividend+3
  6897  000948  0E0A               	movlw	10
  6898  00094A  0101               	movlb	1	; () banked
  6899  00094C  6F11               	movwf	___llmod@divisor& (0+255),b
  6900  00094E  0E00               	movlw	0
  6901  000950  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  6902  000952  0E00               	movlw	0
  6903  000954  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  6904  000956  0E00               	movlw	0
  6905  000958  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  6906  00095A  EC22  F02D         	call	___llmod	;wreg free
  6907  00095E  C10D  F162         	movff	?___llmod,printf@tmpval
  6908  000962  C10E  F163         	movff	?___llmod+1,printf@tmpval+1
  6909  000966  C10F  F164         	movff	?___llmod+2,printf@tmpval+2
  6910  00096A  C110  F165         	movff	?___llmod+3,printf@tmpval+3
  6911                           
  6912                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  6913  00096E  0101               	movlb	1	; () banked
  6914  000970  5162               	movf	printf@tmpval& (0+255),w,b
  6915  000972  0F30               	addlw	48
  6916  000974  EC11  F036         	call	_putch
  6917                           
  6918                           ;doprnt.c: 1232: val %= dpowers[c];
  6919  000978  C166  F10D         	movff	printf@val,___llmod@dividend
  6920  00097C  C167  F10E         	movff	printf@val+1,___llmod@dividend+1
  6921  000980  C168  F10F         	movff	printf@val+2,___llmod@dividend+2
  6922  000984  C169  F110         	movff	printf@val+3,___llmod@dividend+3
  6923  000988  0101               	movlb	1	; () banked
  6924  00098A  5173               	movf	printf@c& (0+255),w,b
  6925  00098C  0D04               	mullw	4
  6926  00098E  0E35               	movlw	low _dpowers
  6927  000990  24F3               	addwf	prodl,w,c
  6928  000992  6EF6               	movwf	tblptrl,c
  6929  000994  0E7D               	movlw	high _dpowers
  6930  000996  20F4               	addwfc	prodh,w,c
  6931  000998  6EF7               	movwf	tblptrh,c
  6932  00099A                     	if	0	;There are less than 3 active tblptr bytes
  6933  00099A                     	endif
  6934  00099A  0009               	tblrd		*+
  6935  00099C  CFF5 F111          	movff	tablat,___llmod@divisor
  6936  0009A0  0009               	tblrd		*+
  6937  0009A2  CFF5 F112          	movff	tablat,___llmod@divisor+1
  6938  0009A6  0009               	tblrd		*+
  6939  0009A8  CFF5 F113          	movff	tablat,___llmod@divisor+2
  6940  0009AC  000A               	tblrd		*-
  6941  0009AE  CFF5 F114          	movff	tablat,___llmod@divisor+3
  6942  0009B2  EC22  F02D         	call	___llmod	;wreg free
  6943  0009B6  C10D  F166         	movff	?___llmod,printf@val
  6944  0009BA  C10E  F167         	movff	?___llmod+1,printf@val+1
  6945  0009BE  C10F  F168         	movff	?___llmod+2,printf@val+2
  6946  0009C2  C110  F169         	movff	?___llmod+3,printf@val+3
  6947  0009C6                     l10181:
  6948  0009C6  0101               	movlb	1	; () banked
  6949  0009C8  0773               	decf	printf@c& (0+255),f,b
  6950  0009CA  0101               	movlb	1	; () banked
  6951  0009CC  2973               	incf	printf@c& (0+255),w,b
  6952  0009CE  B4D8               	btfsc	status,2,c
  6953  0009D0  D008               	goto	l10187
  6954  0009D2  D78B               	goto	l10175
  6955  0009D4                     l10183:
  6956                           
  6957                           ; BSR set to: 1
  6958                           ;doprnt.c: 1236: (putch('0') );
  6959  0009D4  0E30               	movlw	48
  6960  0009D6  EC11  F036         	call	_putch
  6961                           
  6962                           ;doprnt.c: 1237: prec--;
  6963  0009DA  0101               	movlb	1	; () banked
  6964  0009DC  0771               	decf	printf@prec& (0+255),f,b
  6965  0009DE  A0D8               	btfss	status,0,c
  6966  0009E0  0772               	decf	(printf@prec+1)& (0+255),f,b
  6967  0009E2                     l10187:
  6968                           
  6969                           ; BSR set to: 1
  6970  0009E2  0101               	movlb	1	; () banked
  6971  0009E4  5171               	movf	printf@prec& (0+255),w,b
  6972  0009E6  0101               	movlb	1	; () banked
  6973  0009E8  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  6974  0009EA  B4D8               	btfsc	status,2,c
  6975  0009EC  D173               	goto	l10267
  6976  0009EE  D7F2               	goto	l10183
  6977  0009F0                     l955:
  6978                           
  6979                           ; BSR set to: 1
  6980                           ;doprnt.c: 1246: }
  6981                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  6982  0009F0  0101               	movlb	1	; () banked
  6983  0009F2  BD60               	btfsc	printf@flag& (0+255),6,b
  6984  0009F4  D023               	goto	l10199
  6985                           
  6986                           ; BSR set to: 1
  6987                           ;doprnt.c: 1253: {
  6988                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6989  0009F6  C15E  FFD9         	movff	printf@ap,fsr2l
  6990  0009FA  C15F  FFDA         	movff	printf@ap+1,fsr2h
  6991  0009FE  CFDE F166          	movff	postinc2,printf@val
  6992  000A02  CFDD F167          	movff	postdec2,printf@val+1
  6993  000A06  0101               	movlb	1	; () banked
  6994  000A08  0E00               	movlw	0
  6995  000A0A  BF67               	btfsc	(printf@val+1)& (0+255),7,b
  6996  000A0C  0EFF               	movlw	-1
  6997  000A0E  6F68               	movwf	(printf@val+2)& (0+255),b
  6998  000A10  6F69               	movwf	(printf@val+3)& (0+255),b
  6999                           
  7000                           ; BSR set to: 1
  7001  000A12  0E02               	movlw	2
  7002  000A14  0101               	movlb	1	; () banked
  7003  000A16  275E               	addwf	printf@ap& (0+255),f,b
  7004  000A18  0E00               	movlw	0
  7005  000A1A  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  7006                           
  7007                           ; BSR set to: 1
  7008                           ;doprnt.c: 1261: if((long)val < 0) {
  7009  000A1C  0101               	movlb	1	; () banked
  7010  000A1E  AF69               	btfss	(printf@val+3)& (0+255),7,b
  7011  000A20  D021               	goto	l10203
  7012                           
  7013                           ; BSR set to: 1
  7014                           ;doprnt.c: 1262: flag |= 0x03;
  7015  000A22  0E03               	movlw	3
  7016  000A24  0101               	movlb	1	; () banked
  7017  000A26  1360               	iorwf	printf@flag& (0+255),f,b
  7018                           
  7019                           ; BSR set to: 1
  7020                           ;doprnt.c: 1263: val = -val;
  7021  000A28  0101               	movlb	1	; () banked
  7022  000A2A  1F69               	comf	(printf@val+3)& (0+255),f,b
  7023  000A2C  1F68               	comf	(printf@val+2)& (0+255),f,b
  7024  000A2E  1F67               	comf	(printf@val+1)& (0+255),f,b
  7025  000A30  6D66               	negf	printf@val& (0+255),b
  7026  000A32  0E00               	movlw	0
  7027  000A34  2367               	addwfc	(printf@val+1)& (0+255),f,b
  7028  000A36  2368               	addwfc	(printf@val+2)& (0+255),f,b
  7029  000A38  2369               	addwfc	(printf@val+3)& (0+255),f,b
  7030                           
  7031                           ; BSR set to: 1
  7032                           ;doprnt.c: 1264: }
  7033                           ;doprnt.c: 1266: }
  7034  000A3A  D014               	goto	l10203
  7035  000A3C                     l10199:
  7036                           
  7037                           ; BSR set to: 1
  7038                           ;doprnt.c: 1268: else
  7039                           ;doprnt.c: 1273: {
  7040                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7041  000A3C  C15E  FFD9         	movff	printf@ap,fsr2l
  7042  000A40  C15F  FFDA         	movff	printf@ap+1,fsr2h
  7043  000A44  CFDE F151          	movff	postinc2,??_printf
  7044  000A48  CFDD F152          	movff	postdec2,??_printf+1
  7045  000A4C  C151  F166         	movff	??_printf,printf@val
  7046  000A50  C152  F167         	movff	??_printf+1,printf@val+1
  7047  000A54  0101               	movlb	1	; () banked
  7048  000A56  6B68               	clrf	(printf@val+2)& (0+255),b
  7049  000A58  6B69               	clrf	(printf@val+3)& (0+255),b
  7050                           
  7051                           ; BSR set to: 1
  7052  000A5A  0E02               	movlw	2
  7053  000A5C  0101               	movlb	1	; () banked
  7054  000A5E  275E               	addwf	printf@ap& (0+255),f,b
  7055  000A60  0E00               	movlw	0
  7056  000A62  235F               	addwfc	(printf@ap+1)& (0+255),f,b
  7057  000A64                     l10203:
  7058                           
  7059                           ; BSR set to: 1
  7060                           ;doprnt.c: 1287: }
  7061                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  7062  000A64  0101               	movlb	1	; () banked
  7063  000A66  5171               	movf	printf@prec& (0+255),w,b
  7064  000A68  0101               	movlb	1	; () banked
  7065  000A6A  1172               	iorwf	(printf@prec+1)& (0+255),w,b
  7066  000A6C  A4D8               	btfss	status,2,c
  7067  000A6E  D00D               	goto	l10209
  7068                           
  7069                           ; BSR set to: 1
  7070  000A70  0101               	movlb	1	; () banked
  7071  000A72  5166               	movf	printf@val& (0+255),w,b
  7072  000A74  0101               	movlb	1	; () banked
  7073  000A76  1167               	iorwf	(printf@val+1)& (0+255),w,b
  7074  000A78  0101               	movlb	1	; () banked
  7075  000A7A  1168               	iorwf	(printf@val+2)& (0+255),w,b
  7076  000A7C  0101               	movlb	1	; () banked
  7077  000A7E  1169               	iorwf	(printf@val+3)& (0+255),w,b
  7078  000A80  A4D8               	btfss	status,2,c
  7079  000A82  D003               	goto	l10209
  7080                           
  7081                           ; BSR set to: 1
  7082                           ;doprnt.c: 1291: prec++;
  7083  000A84  0101               	movlb	1	; () banked
  7084  000A86  4B71               	infsnz	printf@prec& (0+255),f,b
  7085  000A88  2B72               	incf	(printf@prec+1)& (0+255),f,b
  7086  000A8A                     l10209:
  7087                           
  7088                           ; BSR set to: 1
  7089                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7090  000A8A  0E01               	movlw	1
  7091  000A8C  0101               	movlb	1	; () banked
  7092  000A8E  6F73               	movwf	printf@c& (0+255),b
  7093  000A90                     l10211:
  7094                           
  7095                           ; BSR set to: 1
  7096  000A90  0E0A               	movlw	10
  7097  000A92  0101               	movlb	1	; () banked
  7098  000A94  1973               	xorwf	printf@c& (0+255),w,b
  7099  000A96  B4D8               	btfsc	status,2,c
  7100  000A98  D01E               	goto	l10223
  7101                           
  7102                           ; BSR set to: 1
  7103                           ;doprnt.c: 1306: if(val < dpowers[c])
  7104                           
  7105                           ; BSR set to: 1
  7106                           
  7107                           ; BSR set to: 1
  7108  000A9A  0101               	movlb	1	; () banked
  7109  000A9C  5173               	movf	printf@c& (0+255),w,b
  7110  000A9E  0D04               	mullw	4
  7111  000AA0  0E35               	movlw	low _dpowers
  7112  000AA2  24F3               	addwf	prodl,w,c
  7113  000AA4  6EF6               	movwf	tblptrl,c
  7114  000AA6  0E7D               	movlw	high _dpowers
  7115  000AA8  20F4               	addwfc	prodh,w,c
  7116  000AAA  6EF7               	movwf	tblptrh,c
  7117  000AAC                     	if	0	;There are less than 3 active tblptr bytes
  7118  000AAC                     	endif
  7119  000AAC  0009               	tblrd		*+
  7120  000AAE  50F5               	movf	tablat,w,c
  7121  000AB0  0101               	movlb	1	; () banked
  7122  000AB2  5D66               	subwf	printf@val& (0+255),w,b
  7123  000AB4  0009               	tblrd		*+
  7124  000AB6  50F5               	movf	tablat,w,c
  7125  000AB8  0101               	movlb	1	; () banked
  7126  000ABA  5967               	subwfb	(printf@val+1)& (0+255),w,b
  7127  000ABC  0009               	tblrd		*+
  7128  000ABE  50F5               	movf	tablat,w,c
  7129  000AC0  0101               	movlb	1	; () banked
  7130  000AC2  5968               	subwfb	(printf@val+2)& (0+255),w,b
  7131  000AC4  0009               	tblrd		*+
  7132  000AC6  50F5               	movf	tablat,w,c
  7133  000AC8  0101               	movlb	1	; () banked
  7134  000ACA  5969               	subwfb	(printf@val+3)& (0+255),w,b
  7135  000ACC  A0D8               	btfss	status,0,c
  7136  000ACE  D003               	goto	l10223
  7137                           
  7138                           ; BSR set to: 1
  7139                           
  7140                           ; BSR set to: 1
  7141                           
  7142                           ; BSR set to: 1
  7143                           ;doprnt.c: 1307: break;
  7144  000AD0  0101               	movlb	1	; () banked
  7145  000AD2  2B73               	incf	printf@c& (0+255),f,b
  7146  000AD4  D7DD               	goto	l10211
  7147  000AD6                     l10223:
  7148                           
  7149                           ; BSR set to: 1
  7150                           ;doprnt.c: 1339: if(c < prec)
  7151  000AD6  0E80               	movlw	128
  7152  000AD8  0101               	movlb	1	; () banked
  7153  000ADA  BF73               	btfsc	printf@c& (0+255),7,b
  7154  000ADC  0E7F               	movlw	127
  7155  000ADE  0101               	movlb	1	; () banked
  7156  000AE0  6F51               	movwf	??_printf& (0+255),b
  7157  000AE2  0101               	movlb	1	; () banked
  7158  000AE4  5171               	movf	printf@prec& (0+255),w,b
  7159  000AE6  0101               	movlb	1	; () banked
  7160  000AE8  5D73               	subwf	printf@c& (0+255),w,b
  7161  000AEA  0101               	movlb	1	; () banked
  7162  000AEC  5172               	movf	(printf@prec+1)& (0+255),w,b
  7163  000AEE  0A80               	xorlw	128
  7164  000AF0  0101               	movlb	1	; () banked
  7165  000AF2  5951               	subwfb	??_printf& (0+255),w,b
  7166  000AF4  B0D8               	btfsc	status,0,c
  7167  000AF6  D003               	goto	l10227
  7168                           
  7169                           ; BSR set to: 1
  7170                           ;doprnt.c: 1340: c = prec;
  7171  000AF8  C171  F173         	movff	printf@prec,printf@c
  7172  000AFC  D018               	goto	l10231
  7173  000AFE                     l10227:
  7174                           
  7175                           ; BSR set to: 1
  7176                           ;doprnt.c: 1341: else if(prec < c)
  7177  000AFE  0101               	movlb	1	; () banked
  7178  000B00  5172               	movf	(printf@prec+1)& (0+255),w,b
  7179  000B02  0A80               	xorlw	128
  7180  000B04  0101               	movlb	1	; () banked
  7181  000B06  6F51               	movwf	??_printf& (0+255),b
  7182  000B08  0101               	movlb	1	; () banked
  7183  000B0A  5173               	movf	printf@c& (0+255),w,b
  7184  000B0C  0101               	movlb	1	; () banked
  7185  000B0E  5D71               	subwf	printf@prec& (0+255),w,b
  7186  000B10  0E80               	movlw	128
  7187  000B12  0101               	movlb	1	; () banked
  7188  000B14  BF73               	btfsc	printf@c& (0+255),7,b
  7189  000B16  0E7F               	movlw	127
  7190  000B18  0101               	movlb	1	; () banked
  7191  000B1A  5951               	subwfb	??_printf& (0+255),w,b
  7192  000B1C  B0D8               	btfsc	status,0,c
  7193  000B1E  D007               	goto	l10231
  7194                           
  7195                           ; BSR set to: 1
  7196                           ;doprnt.c: 1342: prec = c;
  7197  000B20  0101               	movlb	1	; () banked
  7198  000B22  5173               	movf	printf@c& (0+255),w,b
  7199  000B24  0101               	movlb	1	; () banked
  7200  000B26  6F71               	movwf	printf@prec& (0+255),b
  7201  000B28  6B72               	clrf	(printf@prec+1)& (0+255),b
  7202  000B2A  BF71               	btfsc	printf@prec& (0+255),7,b
  7203  000B2C  0772               	decf	(printf@prec+1)& (0+255),f,b
  7204  000B2E                     l10231:
  7205                           
  7206                           ; BSR set to: 1
  7207                           ;doprnt.c: 1345: if(width && flag & 0x03)
  7208  000B2E  0101               	movlb	1	; () banked
  7209  000B30  516C               	movf	printf@width& (0+255),w,b
  7210  000B32  0101               	movlb	1	; () banked
  7211  000B34  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7212  000B36  B4D8               	btfsc	status,2,c
  7213  000B38  D014               	goto	l10237
  7214                           
  7215                           ; BSR set to: 1
  7216  000B3A  0E03               	movlw	3
  7217  000B3C  0101               	movlb	1	; () banked
  7218  000B3E  1560               	andwf	printf@flag& (0+255),w,b
  7219  000B40  0101               	movlb	1	; () banked
  7220  000B42  6F51               	movwf	??_printf& (0+255),b
  7221  000B44  0E00               	movlw	0
  7222  000B46  0101               	movlb	1	; () banked
  7223  000B48  1561               	andwf	(printf@flag+1)& (0+255),w,b
  7224  000B4A  0101               	movlb	1	; () banked
  7225  000B4C  6F52               	movwf	(??_printf+1)& (0+255),b
  7226  000B4E  0101               	movlb	1	; () banked
  7227  000B50  5151               	movf	??_printf& (0+255),w,b
  7228  000B52  0101               	movlb	1	; () banked
  7229  000B54  1152               	iorwf	(??_printf+1)& (0+255),w,b
  7230  000B56  B4D8               	btfsc	status,2,c
  7231  000B58  D004               	goto	l10237
  7232                           
  7233                           ; BSR set to: 1
  7234                           ;doprnt.c: 1346: width--;
  7235  000B5A  0101               	movlb	1	; () banked
  7236  000B5C  076C               	decf	printf@width& (0+255),f,b
  7237  000B5E  A0D8               	btfss	status,0,c
  7238  000B60  076D               	decf	(printf@width+1)& (0+255),f,b
  7239  000B62                     l10237:
  7240                           
  7241                           ; BSR set to: 1
  7242                           ;doprnt.c: 1348: if(flag & 0x4000) {
  7243  000B62  0101               	movlb	1	; () banked
  7244  000B64  AD61               	btfss	(printf@flag+1)& (0+255),6,b
  7245  000B66  D01E               	goto	l10245
  7246                           
  7247                           ; BSR set to: 1
  7248                           ;doprnt.c: 1349: if(width > prec)
  7249  000B68  0101               	movlb	1	; () banked
  7250  000B6A  516C               	movf	printf@width& (0+255),w,b
  7251  000B6C  0101               	movlb	1	; () banked
  7252  000B6E  5D71               	subwf	printf@prec& (0+255),w,b
  7253  000B70  0101               	movlb	1	; () banked
  7254  000B72  5172               	movf	(printf@prec+1)& (0+255),w,b
  7255  000B74  0A80               	xorlw	128
  7256  000B76  0101               	movlb	1	; () banked
  7257  000B78  6F51               	movwf	??_printf& (0+255),b
  7258  000B7A  0101               	movlb	1	; () banked
  7259  000B7C  516D               	movf	(printf@width+1)& (0+255),w,b
  7260  000B7E  0A80               	xorlw	128
  7261  000B80  0101               	movlb	1	; () banked
  7262  000B82  5951               	subwfb	??_printf& (0+255),w,b
  7263  000B84  B0D8               	btfsc	status,0,c
  7264  000B86  D009               	goto	l10243
  7265                           
  7266                           ; BSR set to: 1
  7267                           ;doprnt.c: 1350: width -= prec;
  7268  000B88  0101               	movlb	1	; () banked
  7269  000B8A  5171               	movf	printf@prec& (0+255),w,b
  7270  000B8C  0101               	movlb	1	; () banked
  7271  000B8E  5F6C               	subwf	printf@width& (0+255),f,b
  7272  000B90  0101               	movlb	1	; () banked
  7273  000B92  5172               	movf	(printf@prec+1)& (0+255),w,b
  7274  000B94  0101               	movlb	1	; () banked
  7275  000B96  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  7276  000B98  D005               	goto	l10245
  7277  000B9A                     l10243:
  7278                           
  7279                           ; BSR set to: 1
  7280                           ;doprnt.c: 1351: else
  7281                           ;doprnt.c: 1352: width = 0;
  7282  000B9A  0E00               	movlw	0
  7283  000B9C  0101               	movlb	1	; () banked
  7284  000B9E  6F6D               	movwf	(printf@width+1)& (0+255),b
  7285  000BA0  0E00               	movlw	0
  7286  000BA2  6F6C               	movwf	printf@width& (0+255),b
  7287  000BA4                     l10245:
  7288                           
  7289                           ; BSR set to: 1
  7290                           ;doprnt.c: 1353: }
  7291                           ;doprnt.c: 1381: if(width > c)
  7292  000BA4  0E80               	movlw	128
  7293  000BA6  0101               	movlb	1	; () banked
  7294  000BA8  BF73               	btfsc	printf@c& (0+255),7,b
  7295  000BAA  0E7F               	movlw	127
  7296  000BAC  0101               	movlb	1	; () banked
  7297  000BAE  6F51               	movwf	??_printf& (0+255),b
  7298  000BB0  0101               	movlb	1	; () banked
  7299  000BB2  516C               	movf	printf@width& (0+255),w,b
  7300  000BB4  0101               	movlb	1	; () banked
  7301  000BB6  5D73               	subwf	printf@c& (0+255),w,b
  7302  000BB8  0101               	movlb	1	; () banked
  7303  000BBA  516D               	movf	(printf@width+1)& (0+255),w,b
  7304  000BBC  0A80               	xorlw	128
  7305  000BBE  0101               	movlb	1	; () banked
  7306  000BC0  5951               	subwfb	??_printf& (0+255),w,b
  7307  000BC2  B0D8               	btfsc	status,0,c
  7308  000BC4  D00B               	goto	l10249
  7309                           
  7310                           ; BSR set to: 1
  7311                           ;doprnt.c: 1382: width -= c;
  7312  000BC6  0101               	movlb	1	; () banked
  7313  000BC8  5173               	movf	printf@c& (0+255),w,b
  7314  000BCA  0101               	movlb	1	; () banked
  7315  000BCC  5F6C               	subwf	printf@width& (0+255),f,b
  7316  000BCE  0E00               	movlw	0
  7317  000BD0  0101               	movlb	1	; () banked
  7318  000BD2  BF73               	btfsc	printf@c& (0+255),7,b
  7319  000BD4  0EFF               	movlw	255
  7320  000BD6  0101               	movlb	1	; () banked
  7321  000BD8  5B6D               	subwfb	(printf@width+1)& (0+255),f,b
  7322  000BDA  D005               	goto	l10251
  7323  000BDC                     l10249:
  7324                           
  7325                           ; BSR set to: 1
  7326                           ;doprnt.c: 1383: else
  7327                           ;doprnt.c: 1384: width = 0;
  7328  000BDC  0E00               	movlw	0
  7329  000BDE  0101               	movlb	1	; () banked
  7330  000BE0  6F6D               	movwf	(printf@width+1)& (0+255),b
  7331  000BE2  0E00               	movlw	0
  7332  000BE4  6F6C               	movwf	printf@width& (0+255),b
  7333  000BE6                     l10251:
  7334                           
  7335                           ; BSR set to: 1
  7336                           ;doprnt.c: 1422: {
  7337                           ;doprnt.c: 1424: if(width
  7338                           ;doprnt.c: 1428: )
  7339  000BE6  0101               	movlb	1	; () banked
  7340  000BE8  516C               	movf	printf@width& (0+255),w,b
  7341  000BEA  0101               	movlb	1	; () banked
  7342  000BEC  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7343  000BEE  B4D8               	btfsc	status,2,c
  7344  000BF0  D00D               	goto	l10257
  7345  000BF2                     l10253:
  7346                           
  7347                           ; BSR set to: 1
  7348                           ;doprnt.c: 1430: (putch(' ') );
  7349  000BF2  0E20               	movlw	32
  7350  000BF4  EC11  F036         	call	_putch
  7351                           
  7352                           ;doprnt.c: 1431: while(--width);
  7353  000BF8  0101               	movlb	1	; () banked
  7354  000BFA  076C               	decf	printf@width& (0+255),f,b
  7355  000BFC  A0D8               	btfss	status,0,c
  7356  000BFE  076D               	decf	(printf@width+1)& (0+255),f,b
  7357  000C00  0101               	movlb	1	; () banked
  7358  000C02  516C               	movf	printf@width& (0+255),w,b
  7359  000C04  0101               	movlb	1	; () banked
  7360  000C06  116D               	iorwf	(printf@width+1)& (0+255),w,b
  7361  000C08  A4D8               	btfss	status,2,c
  7362  000C0A  D7F3               	goto	l10253
  7363  000C0C                     l10257:
  7364                           
  7365                           ; BSR set to: 1
  7366                           ;doprnt.c: 1438: if(flag & 0x03)
  7367  000C0C  0E03               	movlw	3
  7368  000C0E  0101               	movlb	1	; () banked
  7369  000C10  1560               	andwf	printf@flag& (0+255),w,b
  7370  000C12  0101               	movlb	1	; () banked
  7371  000C14  6F51               	movwf	??_printf& (0+255),b
  7372  000C16  0E00               	movlw	0
  7373  000C18  0101               	movlb	1	; () banked
  7374  000C1A  1561               	andwf	(printf@flag+1)& (0+255),w,b
  7375  000C1C  0101               	movlb	1	; () banked
  7376  000C1E  6F52               	movwf	(??_printf+1)& (0+255),b
  7377  000C20  0101               	movlb	1	; () banked
  7378  000C22  5151               	movf	??_printf& (0+255),w,b
  7379  000C24  0101               	movlb	1	; () banked
  7380  000C26  1152               	iorwf	(??_printf+1)& (0+255),w,b
  7381  000C28  B4D8               	btfsc	status,2,c
  7382  000C2A  D049               	goto	l10265
  7383                           
  7384                           ; BSR set to: 1
  7385                           ;doprnt.c: 1439: (putch('-') );
  7386  000C2C  0E2D               	movlw	45
  7387  000C2E  EC11  F036         	call	_putch
  7388                           
  7389                           ;doprnt.c: 1469: }
  7390                           ;doprnt.c: 1474: while(prec--) {
  7391  000C32  D045               	goto	l10265
  7392  000C34                     l10261:
  7393                           
  7394                           ;doprnt.c: 1478: {
  7395                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7396  000C34  C171  F151         	movff	printf@prec,??_printf
  7397  000C38  C172  F152         	movff	printf@prec+1,??_printf+1
  7398  000C3C  0101               	movlb	1	; () banked
  7399  000C3E  90D8               	bcf	status,0,c
  7400  000C40  3751               	rlcf	??_printf& (0+255),f,b
  7401  000C42  3752               	rlcf	(??_printf+1)& (0+255),f,b
  7402  000C44  0101               	movlb	1	; () banked
  7403  000C46  90D8               	bcf	status,0,c
  7404  000C48  3751               	rlcf	??_printf& (0+255),f,b
  7405  000C4A  3752               	rlcf	(??_printf+1)& (0+255),f,b
  7406  000C4C  0E35               	movlw	low _dpowers
  7407  000C4E  0101               	movlb	1	; () banked
  7408  000C50  2551               	addwf	??_printf& (0+255),w,b
  7409  000C52  6EF6               	movwf	tblptrl,c
  7410  000C54  0E7D               	movlw	high _dpowers
  7411  000C56  2152               	addwfc	(??_printf+1)& (0+255),w,b
  7412  000C58  6EF7               	movwf	tblptrh,c
  7413  000C5A                     	if	0	;There are less than 3 active tblptr bytes
  7414  000C5A                     	endif
  7415  000C5A  0009               	tblrd		*+
  7416  000C5C  CFF5 F104          	movff	tablat,___lldiv@divisor
  7417  000C60  0009               	tblrd		*+
  7418  000C62  CFF5 F105          	movff	tablat,___lldiv@divisor+1
  7419  000C66  0009               	tblrd		*+
  7420  000C68  CFF5 F106          	movff	tablat,___lldiv@divisor+2
  7421  000C6C  000A               	tblrd		*-
  7422  000C6E  CFF5 F107          	movff	tablat,___lldiv@divisor+3
  7423  000C72  C166  F100         	movff	printf@val,___lldiv@dividend
  7424  000C76  C167  F101         	movff	printf@val+1,___lldiv@dividend+1
  7425  000C7A  C168  F102         	movff	printf@val+2,___lldiv@dividend+2
  7426  000C7E  C169  F103         	movff	printf@val+3,___lldiv@dividend+3
  7427  000C82  EC83  F028         	call	___lldiv	;wreg free
  7428  000C86  C100  F10D         	movff	?___lldiv,___llmod@dividend
  7429  000C8A  C101  F10E         	movff	?___lldiv+1,___llmod@dividend+1
  7430  000C8E  C102  F10F         	movff	?___lldiv+2,___llmod@dividend+2
  7431  000C92  C103  F110         	movff	?___lldiv+3,___llmod@dividend+3
  7432  000C96  0E0A               	movlw	10
  7433  000C98  0101               	movlb	1	; () banked
  7434  000C9A  6F11               	movwf	___llmod@divisor& (0+255),b
  7435  000C9C  0E00               	movlw	0
  7436  000C9E  6F12               	movwf	(___llmod@divisor+1)& (0+255),b
  7437  000CA0  0E00               	movlw	0
  7438  000CA2  6F13               	movwf	(___llmod@divisor+2)& (0+255),b
  7439  000CA4  0E00               	movlw	0
  7440  000CA6  6F14               	movwf	(___llmod@divisor+3)& (0+255),b
  7441  000CA8  EC22  F02D         	call	___llmod	;wreg free
  7442  000CAC  0101               	movlb	1	; () banked
  7443  000CAE  510D               	movf	?___llmod& (0+255),w,b
  7444  000CB0  0F30               	addlw	48
  7445  000CB2  0101               	movlb	1	; () banked
  7446  000CB4  6F73               	movwf	printf@c& (0+255),b
  7447                           
  7448                           ; BSR set to: 1
  7449                           ;doprnt.c: 1523: }
  7450                           ;doprnt.c: 1524: (putch(c) );
  7451  000CB6  0101               	movlb	1	; () banked
  7452  000CB8  5173               	movf	printf@c& (0+255),w,b
  7453  000CBA  EC11  F036         	call	_putch
  7454  000CBE                     l10265:
  7455  000CBE  0101               	movlb	1	; () banked
  7456  000CC0  0771               	decf	printf@prec& (0+255),f,b
  7457  000CC2  A0D8               	btfss	status,0,c
  7458  000CC4  0772               	decf	(printf@prec+1)& (0+255),f,b
  7459  000CC6  0101               	movlb	1	; () banked
  7460  000CC8  2971               	incf	printf@prec& (0+255),w,b
  7461  000CCA  E1B4               	bnz	l10261
  7462  000CCC  0101               	movlb	1	; () banked
  7463  000CCE  2972               	incf	(printf@prec+1)& (0+255),w,b
  7464  000CD0  A4D8               	btfss	status,2,c
  7465  000CD2  D7B0               	goto	l10261
  7466  000CD4                     l10267:
  7467  000CD4  C13F  FFF6         	movff	printf@f,tblptrl
  7468  000CD8  C140  FFF7         	movff	printf@f+1,tblptrh
  7469  000CDC  0101               	movlb	1	; () banked
  7470  000CDE  4B3F               	infsnz	printf@f& (0+255),f,b
  7471  000CE0  2B40               	incf	(printf@f+1)& (0+255),f,b
  7472  000CE2                     	if	0	;tblptru may be non-zero
  7473  000CE2                     	endif
  7474  000CE2                     	if	0	;tblptru may be non-zero
  7475  000CE2                     	endif
  7476  000CE2  0008               	tblrd		*
  7477  000CE4  CFF5 F173          	movff	tablat,printf@c
  7478  000CE8  0101               	movlb	1	; () banked
  7479  000CEA  5173               	movf	printf@c& (0+255),w,b
  7480  000CEC  B4D8               	btfsc	status,2,c
  7481  000CEE  0012               	return	
  7482  000CF0  EF69  F000         	goto	l9969
  7483  000CF4                     __end_of_printf:
  7484                           	opt stack 0
  7485                           tblptru	equ	0xFF8
  7486                           tblptrh	equ	0xFF7
  7487                           tblptrl	equ	0xFF6
  7488                           tablat	equ	0xFF5
  7489                           prodh	equ	0xFF4
  7490                           prodl	equ	0xFF3
  7491                           intcon	equ	0xFF2
  7492                           postinc0	equ	0xFEE
  7493                           wreg	equ	0xFE8
  7494                           postdec1	equ	0xFE5
  7495                           fsr1l	equ	0xFE1
  7496                           indf2	equ	0xFDF
  7497                           postinc2	equ	0xFDE
  7498                           postdec2	equ	0xFDD
  7499                           fsr2h	equ	0xFDA
  7500                           fsr2l	equ	0xFD9
  7501                           status	equ	0xFD8
  7502                           
  7503 ;; *************** function _scale *****************
  7504 ;; Defined at:
  7505 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  7506 ;; Parameters:    Size  Location     Type
  7507 ;;  scl             1    wreg     char 
  7508 ;; Auto vars:     Size  Location     Type
  7509 ;;  scl             1   41[BANK1 ] char 
  7510 ;; Return value:  Size  Location     Type
  7511 ;;                  3   35[BANK1 ] char 
  7512 ;; Registers used:
  7513 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7514 ;; Tracked objects:
  7515 ;;		On entry : 0/0
  7516 ;;		On exit  : 0/0
  7517 ;;		Unchanged: 0/0
  7518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7519 ;;      Params:         0       0       3       0       0       0       0
  7520 ;;      Locals:         0       0       4       0       0       0       0
  7521 ;;      Temps:          0       0       0       0       0       0       0
  7522 ;;      Totals:         0       0       7       0       0       0       0
  7523 ;;Total ram usage:        7 bytes
  7524 ;; Hardware stack levels used:    1
  7525 ;; Hardware stack levels required when called:   14
  7526 ;; This function calls:
  7527 ;;		___awdiv
  7528 ;;		___awmod
  7529 ;;		___ftmul
  7530 ;;		___wmul
  7531 ;; This function is called by:
  7532 ;;		_printf
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536                           	psect	text22
  7537  000CF4                     __ptext22:
  7538                           	opt stack 0
  7539  000CF4                     _scale:
  7540                           	opt stack 13
  7541                           
  7542                           ; BSR set to: 1
  7543                           ;incstack = 0
  7544                           ;scale@scl stored from wreg
  7545  000CF4  0101               	movlb	1	; () banked
  7546  000CF6  6F29               	movwf	scale@scl& (0+255),b
  7547                           
  7548                           ;doprnt.c: 428: if(scl < 0) {
  7549  000CF8  0101               	movlb	1	; () banked
  7550  000CFA  AF29               	btfss	scale@scl& (0+255),7,b
  7551  000CFC  D12A               	goto	l9685
  7552                           
  7553                           ; BSR set to: 1
  7554                           ;doprnt.c: 429: scl = -scl;
  7555  000CFE  0101               	movlb	1	; () banked
  7556  000D00  6D29               	negf	scale@scl& (0+255),b
  7557                           
  7558                           ;doprnt.c: 430: if(scl>=110)
  7559  000D02  0101               	movlb	1	; () banked
  7560  000D04  5129               	movf	scale@scl& (0+255),w,b
  7561  000D06  0A80               	xorlw	128
  7562  000D08  0F12               	addlw	-238
  7563  000D0A  A0D8               	btfss	status,0,c
  7564  000D0C  D0AC               	goto	l9675
  7565                           
  7566                           ; BSR set to: 1
  7567                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7568  000D0E  0E00               	movlw	0
  7569  000D10  0101               	movlb	1	; () banked
  7570  000D12  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7571  000D14  0E03               	movlw	3
  7572  000D16  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7573  000D18  0E00               	movlw	0
  7574  000D1A  0101               	movlb	1	; () banked
  7575  000D1C  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7576  000D1E  0E0A               	movlw	10
  7577  000D20  6F08               	movwf	___awdiv@divisor& (0+255),b
  7578  000D22  0E00               	movlw	0
  7579  000D24  0101               	movlb	1	; () banked
  7580  000D26  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7581  000D28  0E64               	movlw	100
  7582  000D2A  6F02               	movwf	___awmod@divisor& (0+255),b
  7583  000D2C  0101               	movlb	1	; () banked
  7584  000D2E  5129               	movf	scale@scl& (0+255),w,b
  7585  000D30  0101               	movlb	1	; () banked
  7586  000D32  6F00               	movwf	___awmod@dividend& (0+255),b
  7587  000D34  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7588  000D36  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7589  000D38  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7590  000D3A  ECF7  F02A         	call	___awmod	;wreg free
  7591  000D3E  C100  F106         	movff	?___awmod,___awdiv@dividend
  7592  000D42  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  7593  000D46  ECC6  F027         	call	___awdiv	;wreg free
  7594  000D4A  0E09               	movlw	9
  7595  000D4C  0101               	movlb	1	; () banked
  7596  000D4E  2506               	addwf	?___awdiv& (0+255),w,b
  7597  000D50  0101               	movlb	1	; () banked
  7598  000D52  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7599  000D54  0E00               	movlw	0
  7600  000D56  0101               	movlb	1	; () banked
  7601  000D58  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7602  000D5A  0101               	movlb	1	; () banked
  7603  000D5C  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7604  000D5E  EC8B  F034         	call	___wmul	;wreg free
  7605  000D62  0E5D               	movlw	low __npowers_
  7606  000D64  0101               	movlb	1	; () banked
  7607  000D66  250E               	addwf	?___wmul& (0+255),w,b
  7608  000D68  6EF6               	movwf	tblptrl,c
  7609  000D6A  0E7D               	movlw	high __npowers_
  7610  000D6C  0101               	movlb	1	; () banked
  7611  000D6E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7612  000D70  6EF7               	movwf	tblptrh,c
  7613  000D72                     	if	0	;There are less than 3 active tblptr bytes
  7614  000D72                     	endif
  7615  000D72  0009               	tblrd		*+
  7616  000D74  CFF5 F117          	movff	tablat,___ftmul@f2
  7617  000D78  0009               	tblrd		*+
  7618  000D7A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  7619  000D7E  000A               	tblrd		*-
  7620  000D80  CFF5 F119          	movff	tablat,___ftmul@f2+2
  7621  000D84  0E00               	movlw	0
  7622  000D86  0101               	movlb	1	; () banked
  7623  000D88  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7624  000D8A  0E64               	movlw	100
  7625  000D8C  6F08               	movwf	___awdiv@divisor& (0+255),b
  7626  000D8E  0101               	movlb	1	; () banked
  7627  000D90  5129               	movf	scale@scl& (0+255),w,b
  7628  000D92  0101               	movlb	1	; () banked
  7629  000D94  6F06               	movwf	___awdiv@dividend& (0+255),b
  7630  000D96  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  7631  000D98  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  7632  000D9A  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7633  000D9C  ECC6  F027         	call	___awdiv	;wreg free
  7634  000DA0  0E12               	movlw	18
  7635  000DA2  0101               	movlb	1	; () banked
  7636  000DA4  2506               	addwf	?___awdiv& (0+255),w,b
  7637  000DA6  0101               	movlb	1	; () banked
  7638  000DA8  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7639  000DAA  0E00               	movlw	0
  7640  000DAC  0101               	movlb	1	; () banked
  7641  000DAE  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7642  000DB0  0101               	movlb	1	; () banked
  7643  000DB2  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7644  000DB4  0E00               	movlw	0
  7645  000DB6  0101               	movlb	1	; () banked
  7646  000DB8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7647  000DBA  0E03               	movlw	3
  7648  000DBC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7649  000DBE  EC8B  F034         	call	___wmul	;wreg free
  7650  000DC2  0E5D               	movlw	low __npowers_
  7651  000DC4  0101               	movlb	1	; () banked
  7652  000DC6  250E               	addwf	?___wmul& (0+255),w,b
  7653  000DC8  6EF6               	movwf	tblptrl,c
  7654  000DCA  0E7D               	movlw	high __npowers_
  7655  000DCC  0101               	movlb	1	; () banked
  7656  000DCE  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7657  000DD0  6EF7               	movwf	tblptrh,c
  7658  000DD2                     	if	0	;There are less than 3 active tblptr bytes
  7659  000DD2                     	endif
  7660  000DD2  0009               	tblrd		*+
  7661  000DD4  CFF5 F114          	movff	tablat,___ftmul@f1
  7662  000DD8  0009               	tblrd		*+
  7663  000DDA  CFF5 F115          	movff	tablat,___ftmul@f1+1
  7664  000DDE  000A               	tblrd		*-
  7665  000DE0  CFF5 F116          	movff	tablat,___ftmul@f1+2
  7666  000DE4  EC06  F01A         	call	___ftmul	;wreg free
  7667  000DE8  C114  F126         	movff	?___ftmul,_scale$2994
  7668  000DEC  C115  F127         	movff	?___ftmul+1,_scale$2994+1
  7669  000DF0  C116  F128         	movff	?___ftmul+2,_scale$2994+2
  7670                           
  7671                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7672  000DF4  C126  F114         	movff	_scale$2994,___ftmul@f1
  7673  000DF8  C127  F115         	movff	_scale$2994+1,___ftmul@f1+1
  7674  000DFC  C128  F116         	movff	_scale$2994+2,___ftmul@f1+2
  7675  000E00  0E00               	movlw	0
  7676  000E02  0101               	movlb	1	; () banked
  7677  000E04  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7678  000E06  0E03               	movlw	3
  7679  000E08  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7680  000E0A  0E00               	movlw	0
  7681  000E0C  0101               	movlb	1	; () banked
  7682  000E0E  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7683  000E10  0E0A               	movlw	10
  7684  000E12  6F02               	movwf	___awmod@divisor& (0+255),b
  7685  000E14  0101               	movlb	1	; () banked
  7686  000E16  5129               	movf	scale@scl& (0+255),w,b
  7687  000E18  0101               	movlb	1	; () banked
  7688  000E1A  6F00               	movwf	___awmod@dividend& (0+255),b
  7689  000E1C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7690  000E1E  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7691  000E20  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7692  000E22  ECF7  F02A         	call	___awmod	;wreg free
  7693  000E26  C100  F10E         	movff	?___awmod,___wmul@multiplier
  7694  000E2A  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  7695  000E2E  EC8B  F034         	call	___wmul	;wreg free
  7696  000E32  0E5D               	movlw	low __npowers_
  7697  000E34  0101               	movlb	1	; () banked
  7698  000E36  250E               	addwf	?___wmul& (0+255),w,b
  7699  000E38  6EF6               	movwf	tblptrl,c
  7700  000E3A  0E7D               	movlw	high __npowers_
  7701  000E3C  0101               	movlb	1	; () banked
  7702  000E3E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7703  000E40  6EF7               	movwf	tblptrh,c
  7704  000E42                     	if	0	;There are less than 3 active tblptr bytes
  7705  000E42                     	endif
  7706  000E42  0009               	tblrd		*+
  7707  000E44  CFF5 F117          	movff	tablat,___ftmul@f2
  7708  000E48  0009               	tblrd		*+
  7709  000E4A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  7710  000E4E  000A               	tblrd		*-
  7711  000E50  CFF5 F119          	movff	tablat,___ftmul@f2+2
  7712  000E54  EC06  F01A         	call	___ftmul	;wreg free
  7713  000E58  C114  F123         	movff	?___ftmul,?_scale
  7714  000E5C  C115  F124         	movff	?___ftmul+1,?_scale+1
  7715  000E60  C116  F125         	movff	?___ftmul+2,?_scale+2
  7716  000E64  0012               	return	
  7717  000E66                     l9675:
  7718                           
  7719                           ;doprnt.c: 432: else if(scl > 10)
  7720  000E66  0101               	movlb	1	; () banked
  7721  000E68  5129               	movf	scale@scl& (0+255),w,b
  7722  000E6A  0A80               	xorlw	128
  7723  000E6C  0F75               	addlw	-139
  7724  000E6E  A0D8               	btfss	status,0,c
  7725  000E70  D05D               	goto	l9681
  7726                           
  7727                           ; BSR set to: 1
  7728                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7729  000E72  0E00               	movlw	0
  7730  000E74  0101               	movlb	1	; () banked
  7731  000E76  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7732  000E78  0E0A               	movlw	10
  7733  000E7A  6F08               	movwf	___awdiv@divisor& (0+255),b
  7734  000E7C  0101               	movlb	1	; () banked
  7735  000E7E  5129               	movf	scale@scl& (0+255),w,b
  7736  000E80  0101               	movlb	1	; () banked
  7737  000E82  6F06               	movwf	___awdiv@dividend& (0+255),b
  7738  000E84  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  7739  000E86  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  7740  000E88  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7741  000E8A  ECC6  F027         	call	___awdiv	;wreg free
  7742  000E8E  0E09               	movlw	9
  7743  000E90  0101               	movlb	1	; () banked
  7744  000E92  2506               	addwf	?___awdiv& (0+255),w,b
  7745  000E94  0101               	movlb	1	; () banked
  7746  000E96  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7747  000E98  0E00               	movlw	0
  7748  000E9A  0101               	movlb	1	; () banked
  7749  000E9C  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7750  000E9E  0101               	movlb	1	; () banked
  7751  000EA0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7752  000EA2  0E00               	movlw	0
  7753  000EA4  0101               	movlb	1	; () banked
  7754  000EA6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7755  000EA8  0E03               	movlw	3
  7756  000EAA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7757  000EAC  EC8B  F034         	call	___wmul	;wreg free
  7758  000EB0  0E5D               	movlw	low __npowers_
  7759  000EB2  0101               	movlb	1	; () banked
  7760  000EB4  250E               	addwf	?___wmul& (0+255),w,b
  7761  000EB6  6EF6               	movwf	tblptrl,c
  7762  000EB8  0E7D               	movlw	high __npowers_
  7763  000EBA  0101               	movlb	1	; () banked
  7764  000EBC  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7765  000EBE  6EF7               	movwf	tblptrh,c
  7766  000EC0                     	if	0	;There are less than 3 active tblptr bytes
  7767  000EC0                     	endif
  7768  000EC0  0009               	tblrd		*+
  7769  000EC2  CFF5 F114          	movff	tablat,___ftmul@f1
  7770  000EC6  0009               	tblrd		*+
  7771  000EC8  CFF5 F115          	movff	tablat,___ftmul@f1+1
  7772  000ECC  000A               	tblrd		*-
  7773  000ECE  CFF5 F116          	movff	tablat,___ftmul@f1+2
  7774  000ED2  0E00               	movlw	0
  7775  000ED4  0101               	movlb	1	; () banked
  7776  000ED6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7777  000ED8  0E03               	movlw	3
  7778  000EDA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7779  000EDC  0E00               	movlw	0
  7780  000EDE  0101               	movlb	1	; () banked
  7781  000EE0  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7782  000EE2  0E0A               	movlw	10
  7783  000EE4  6F02               	movwf	___awmod@divisor& (0+255),b
  7784  000EE6  0101               	movlb	1	; () banked
  7785  000EE8  5129               	movf	scale@scl& (0+255),w,b
  7786  000EEA  0101               	movlb	1	; () banked
  7787  000EEC  6F00               	movwf	___awmod@dividend& (0+255),b
  7788  000EEE  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7789  000EF0  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7790  000EF2  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7791  000EF4  ECF7  F02A         	call	___awmod	;wreg free
  7792  000EF8  C100  F10E         	movff	?___awmod,___wmul@multiplier
  7793  000EFC  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  7794  000F00  EC8B  F034         	call	___wmul	;wreg free
  7795  000F04  0E5D               	movlw	low __npowers_
  7796  000F06  0101               	movlb	1	; () banked
  7797  000F08  250E               	addwf	?___wmul& (0+255),w,b
  7798  000F0A  6EF6               	movwf	tblptrl,c
  7799  000F0C  0E7D               	movlw	high __npowers_
  7800  000F0E  0101               	movlb	1	; () banked
  7801  000F10  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7802  000F12  6EF7               	movwf	tblptrh,c
  7803  000F14                     	if	0	;There are less than 3 active tblptr bytes
  7804  000F14                     	endif
  7805  000F14  0009               	tblrd		*+
  7806  000F16  CFF5 F117          	movff	tablat,___ftmul@f2
  7807  000F1A  0009               	tblrd		*+
  7808  000F1C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  7809  000F20  000A               	tblrd		*-
  7810  000F22  CFF5 F119          	movff	tablat,___ftmul@f2+2
  7811  000F26  EC06  F01A         	call	___ftmul	;wreg free
  7812  000F2A  D796               	goto	L2
  7813  000F2C                     l9681:
  7814                           
  7815                           ;doprnt.c: 434: return _npowers_[scl];
  7816  000F2C  0101               	movlb	1	; () banked
  7817  000F2E  5129               	movf	scale@scl& (0+255),w,b
  7818  000F30  0D03               	mullw	3
  7819  000F32  0E5D               	movlw	low __npowers_
  7820  000F34  24F3               	addwf	prodl,w,c
  7821  000F36  6EF6               	movwf	tblptrl,c
  7822  000F38  0E7D               	movlw	high __npowers_
  7823  000F3A  20F4               	addwfc	prodh,w,c
  7824  000F3C  6EF7               	movwf	tblptrh,c
  7825  000F3E                     	if	0	;There are less than 3 active tblptr bytes
  7826  000F3E                     	endif
  7827  000F3E  0009               	tblrd		*+
  7828  000F40  CFF5 F123          	movff	tablat,?_scale
  7829  000F44  0009               	tblrd		*+
  7830  000F46  CFF5 F124          	movff	tablat,?_scale+1
  7831  000F4A  000A               	tblrd		*-
  7832  000F4C  CFF5 F125          	movff	tablat,?_scale+2
  7833                           
  7834                           ; BSR set to: 1
  7835  000F50  0012               	return	
  7836  000F52                     l9685:
  7837                           
  7838                           ; BSR set to: 1
  7839                           ;doprnt.c: 435: }
  7840                           ;doprnt.c: 436: if(scl>=110)
  7841  000F52  0101               	movlb	1	; () banked
  7842  000F54  5129               	movf	scale@scl& (0+255),w,b
  7843  000F56  0A80               	xorlw	128
  7844  000F58  0F12               	addlw	-238
  7845  000F5A  A0D8               	btfss	status,0,c
  7846  000F5C  D0AC               	goto	l9693
  7847                           
  7848                           ; BSR set to: 1
  7849                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7850  000F5E  0E00               	movlw	0
  7851  000F60  0101               	movlb	1	; () banked
  7852  000F62  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7853  000F64  0E03               	movlw	3
  7854  000F66  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7855  000F68  0E00               	movlw	0
  7856  000F6A  0101               	movlb	1	; () banked
  7857  000F6C  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7858  000F6E  0E0A               	movlw	10
  7859  000F70  6F08               	movwf	___awdiv@divisor& (0+255),b
  7860  000F72  0E00               	movlw	0
  7861  000F74  0101               	movlb	1	; () banked
  7862  000F76  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7863  000F78  0E64               	movlw	100
  7864  000F7A  6F02               	movwf	___awmod@divisor& (0+255),b
  7865  000F7C  0101               	movlb	1	; () banked
  7866  000F7E  5129               	movf	scale@scl& (0+255),w,b
  7867  000F80  0101               	movlb	1	; () banked
  7868  000F82  6F00               	movwf	___awmod@dividend& (0+255),b
  7869  000F84  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7870  000F86  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7871  000F88  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7872  000F8A  ECF7  F02A         	call	___awmod	;wreg free
  7873  000F8E  C100  F106         	movff	?___awmod,___awdiv@dividend
  7874  000F92  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  7875  000F96  ECC6  F027         	call	___awdiv	;wreg free
  7876  000F9A  0E09               	movlw	9
  7877  000F9C  0101               	movlb	1	; () banked
  7878  000F9E  2506               	addwf	?___awdiv& (0+255),w,b
  7879  000FA0  0101               	movlb	1	; () banked
  7880  000FA2  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7881  000FA4  0E00               	movlw	0
  7882  000FA6  0101               	movlb	1	; () banked
  7883  000FA8  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7884  000FAA  0101               	movlb	1	; () banked
  7885  000FAC  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7886  000FAE  EC8B  F034         	call	___wmul	;wreg free
  7887  000FB2  0E84               	movlw	low __powers_
  7888  000FB4  0101               	movlb	1	; () banked
  7889  000FB6  250E               	addwf	?___wmul& (0+255),w,b
  7890  000FB8  6EF6               	movwf	tblptrl,c
  7891  000FBA  0E7D               	movlw	high __powers_
  7892  000FBC  0101               	movlb	1	; () banked
  7893  000FBE  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7894  000FC0  6EF7               	movwf	tblptrh,c
  7895  000FC2                     	if	0	;There are less than 3 active tblptr bytes
  7896  000FC2                     	endif
  7897  000FC2  0009               	tblrd		*+
  7898  000FC4  CFF5 F117          	movff	tablat,___ftmul@f2
  7899  000FC8  0009               	tblrd		*+
  7900  000FCA  CFF5 F118          	movff	tablat,___ftmul@f2+1
  7901  000FCE  000A               	tblrd		*-
  7902  000FD0  CFF5 F119          	movff	tablat,___ftmul@f2+2
  7903  000FD4  0E00               	movlw	0
  7904  000FD6  0101               	movlb	1	; () banked
  7905  000FD8  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  7906  000FDA  0E64               	movlw	100
  7907  000FDC  6F08               	movwf	___awdiv@divisor& (0+255),b
  7908  000FDE  0101               	movlb	1	; () banked
  7909  000FE0  5129               	movf	scale@scl& (0+255),w,b
  7910  000FE2  0101               	movlb	1	; () banked
  7911  000FE4  6F06               	movwf	___awdiv@dividend& (0+255),b
  7912  000FE6  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  7913  000FE8  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  7914  000FEA  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  7915  000FEC  ECC6  F027         	call	___awdiv	;wreg free
  7916  000FF0  0E12               	movlw	18
  7917  000FF2  0101               	movlb	1	; () banked
  7918  000FF4  2506               	addwf	?___awdiv& (0+255),w,b
  7919  000FF6  0101               	movlb	1	; () banked
  7920  000FF8  6F0E               	movwf	___wmul@multiplier& (0+255),b
  7921  000FFA  0E00               	movlw	0
  7922  000FFC  0101               	movlb	1	; () banked
  7923  000FFE  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  7924  001000  0101               	movlb	1	; () banked
  7925  001002  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  7926  001004  0E00               	movlw	0
  7927  001006  0101               	movlb	1	; () banked
  7928  001008  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7929  00100A  0E03               	movlw	3
  7930  00100C  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7931  00100E  EC8B  F034         	call	___wmul	;wreg free
  7932  001012  0E84               	movlw	low __powers_
  7933  001014  0101               	movlb	1	; () banked
  7934  001016  250E               	addwf	?___wmul& (0+255),w,b
  7935  001018  6EF6               	movwf	tblptrl,c
  7936  00101A  0E7D               	movlw	high __powers_
  7937  00101C  0101               	movlb	1	; () banked
  7938  00101E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7939  001020  6EF7               	movwf	tblptrh,c
  7940  001022                     	if	0	;There are less than 3 active tblptr bytes
  7941  001022                     	endif
  7942  001022  0009               	tblrd		*+
  7943  001024  CFF5 F114          	movff	tablat,___ftmul@f1
  7944  001028  0009               	tblrd		*+
  7945  00102A  CFF5 F115          	movff	tablat,___ftmul@f1+1
  7946  00102E  000A               	tblrd		*-
  7947  001030  CFF5 F116          	movff	tablat,___ftmul@f1+2
  7948  001034  EC06  F01A         	call	___ftmul	;wreg free
  7949  001038  C114  F126         	movff	?___ftmul,_scale$2994
  7950  00103C  C115  F127         	movff	?___ftmul+1,_scale$2994+1
  7951  001040  C116  F128         	movff	?___ftmul+2,_scale$2994+2
  7952                           
  7953                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7954  001044  C126  F114         	movff	_scale$2994,___ftmul@f1
  7955  001048  C127  F115         	movff	_scale$2994+1,___ftmul@f1+1
  7956  00104C  C128  F116         	movff	_scale$2994+2,___ftmul@f1+2
  7957  001050  0E00               	movlw	0
  7958  001052  0101               	movlb	1	; () banked
  7959  001054  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7960  001056  0E03               	movlw	3
  7961  001058  6F10               	movwf	___wmul@multiplicand& (0+255),b
  7962  00105A  0E00               	movlw	0
  7963  00105C  0101               	movlb	1	; () banked
  7964  00105E  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  7965  001060  0E0A               	movlw	10
  7966  001062  6F02               	movwf	___awmod@divisor& (0+255),b
  7967  001064  0101               	movlb	1	; () banked
  7968  001066  5129               	movf	scale@scl& (0+255),w,b
  7969  001068  0101               	movlb	1	; () banked
  7970  00106A  6F00               	movwf	___awmod@dividend& (0+255),b
  7971  00106C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  7972  00106E  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  7973  001070  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  7974  001072  ECF7  F02A         	call	___awmod	;wreg free
  7975  001076  C100  F10E         	movff	?___awmod,___wmul@multiplier
  7976  00107A  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  7977  00107E  EC8B  F034         	call	___wmul	;wreg free
  7978  001082  0E84               	movlw	low __powers_
  7979  001084  0101               	movlb	1	; () banked
  7980  001086  250E               	addwf	?___wmul& (0+255),w,b
  7981  001088  6EF6               	movwf	tblptrl,c
  7982  00108A  0E7D               	movlw	high __powers_
  7983  00108C  0101               	movlb	1	; () banked
  7984  00108E  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  7985  001090  6EF7               	movwf	tblptrh,c
  7986  001092                     	if	0	;There are less than 3 active tblptr bytes
  7987  001092                     	endif
  7988  001092  0009               	tblrd		*+
  7989  001094  CFF5 F117          	movff	tablat,___ftmul@f2
  7990  001098  0009               	tblrd		*+
  7991  00109A  CFF5 F118          	movff	tablat,___ftmul@f2+1
  7992  00109E  000A               	tblrd		*-
  7993  0010A0  CFF5 F119          	movff	tablat,___ftmul@f2+2
  7994  0010A4  EC06  F01A         	call	___ftmul	;wreg free
  7995  0010A8  C114  F123         	movff	?___ftmul,?_scale
  7996  0010AC  C115  F124         	movff	?___ftmul+1,?_scale+1
  7997  0010B0  C116  F125         	movff	?___ftmul+2,?_scale+2
  7998  0010B4  0012               	return	
  7999  0010B6                     l9693:
  8000                           
  8001                           ;doprnt.c: 438: else if(scl > 10)
  8002  0010B6  0101               	movlb	1	; () banked
  8003  0010B8  5129               	movf	scale@scl& (0+255),w,b
  8004  0010BA  0A80               	xorlw	128
  8005  0010BC  0F75               	addlw	-139
  8006  0010BE  A0D8               	btfss	status,0,c
  8007  0010C0  D05D               	goto	l9699
  8008                           
  8009                           ; BSR set to: 1
  8010                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  8011  0010C2  0E00               	movlw	0
  8012  0010C4  0101               	movlb	1	; () banked
  8013  0010C6  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  8014  0010C8  0E0A               	movlw	10
  8015  0010CA  6F08               	movwf	___awdiv@divisor& (0+255),b
  8016  0010CC  0101               	movlb	1	; () banked
  8017  0010CE  5129               	movf	scale@scl& (0+255),w,b
  8018  0010D0  0101               	movlb	1	; () banked
  8019  0010D2  6F06               	movwf	___awdiv@dividend& (0+255),b
  8020  0010D4  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  8021  0010D6  BF06               	btfsc	___awdiv@dividend& (0+255),7,b
  8022  0010D8  0707               	decf	(___awdiv@dividend+1)& (0+255),f,b
  8023  0010DA  ECC6  F027         	call	___awdiv	;wreg free
  8024  0010DE  0E09               	movlw	9
  8025  0010E0  0101               	movlb	1	; () banked
  8026  0010E2  2506               	addwf	?___awdiv& (0+255),w,b
  8027  0010E4  0101               	movlb	1	; () banked
  8028  0010E6  6F0E               	movwf	___wmul@multiplier& (0+255),b
  8029  0010E8  0E00               	movlw	0
  8030  0010EA  0101               	movlb	1	; () banked
  8031  0010EC  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  8032  0010EE  0101               	movlb	1	; () banked
  8033  0010F0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  8034  0010F2  0E00               	movlw	0
  8035  0010F4  0101               	movlb	1	; () banked
  8036  0010F6  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8037  0010F8  0E03               	movlw	3
  8038  0010FA  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8039  0010FC  EC8B  F034         	call	___wmul	;wreg free
  8040  001100  0E84               	movlw	low __powers_
  8041  001102  0101               	movlb	1	; () banked
  8042  001104  250E               	addwf	?___wmul& (0+255),w,b
  8043  001106  6EF6               	movwf	tblptrl,c
  8044  001108  0E7D               	movlw	high __powers_
  8045  00110A  0101               	movlb	1	; () banked
  8046  00110C  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8047  00110E  6EF7               	movwf	tblptrh,c
  8048  001110                     	if	0	;There are less than 3 active tblptr bytes
  8049  001110                     	endif
  8050  001110  0009               	tblrd		*+
  8051  001112  CFF5 F114          	movff	tablat,___ftmul@f1
  8052  001116  0009               	tblrd		*+
  8053  001118  CFF5 F115          	movff	tablat,___ftmul@f1+1
  8054  00111C  000A               	tblrd		*-
  8055  00111E  CFF5 F116          	movff	tablat,___ftmul@f1+2
  8056  001122  0E00               	movlw	0
  8057  001124  0101               	movlb	1	; () banked
  8058  001126  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8059  001128  0E03               	movlw	3
  8060  00112A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  8061  00112C  0E00               	movlw	0
  8062  00112E  0101               	movlb	1	; () banked
  8063  001130  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  8064  001132  0E0A               	movlw	10
  8065  001134  6F02               	movwf	___awmod@divisor& (0+255),b
  8066  001136  0101               	movlb	1	; () banked
  8067  001138  5129               	movf	scale@scl& (0+255),w,b
  8068  00113A  0101               	movlb	1	; () banked
  8069  00113C  6F00               	movwf	___awmod@dividend& (0+255),b
  8070  00113E  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  8071  001140  BF00               	btfsc	___awmod@dividend& (0+255),7,b
  8072  001142  0701               	decf	(___awmod@dividend+1)& (0+255),f,b
  8073  001144  ECF7  F02A         	call	___awmod	;wreg free
  8074  001148  C100  F10E         	movff	?___awmod,___wmul@multiplier
  8075  00114C  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  8076  001150  EC8B  F034         	call	___wmul	;wreg free
  8077  001154  0E84               	movlw	low __powers_
  8078  001156  0101               	movlb	1	; () banked
  8079  001158  250E               	addwf	?___wmul& (0+255),w,b
  8080  00115A  6EF6               	movwf	tblptrl,c
  8081  00115C  0E7D               	movlw	high __powers_
  8082  00115E  0101               	movlb	1	; () banked
  8083  001160  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  8084  001162  6EF7               	movwf	tblptrh,c
  8085  001164                     	if	0	;There are less than 3 active tblptr bytes
  8086  001164                     	endif
  8087  001164  0009               	tblrd		*+
  8088  001166  CFF5 F117          	movff	tablat,___ftmul@f2
  8089  00116A  0009               	tblrd		*+
  8090  00116C  CFF5 F118          	movff	tablat,___ftmul@f2+1
  8091  001170  000A               	tblrd		*-
  8092  001172  CFF5 F119          	movff	tablat,___ftmul@f2+2
  8093  001176  EC06  F01A         	call	___ftmul	;wreg free
  8094  00117A  D796               	goto	L3
  8095  00117C                     l9699:
  8096                           
  8097                           ;doprnt.c: 440: return _powers_[scl];
  8098  00117C  0101               	movlb	1	; () banked
  8099  00117E  5129               	movf	scale@scl& (0+255),w,b
  8100  001180  0D03               	mullw	3
  8101  001182  0E84               	movlw	low __powers_
  8102  001184  24F3               	addwf	prodl,w,c
  8103  001186  6EF6               	movwf	tblptrl,c
  8104  001188  0E7D               	movlw	high __powers_
  8105  00118A  20F4               	addwfc	prodh,w,c
  8106  00118C  6EF7               	movwf	tblptrh,c
  8107  00118E                     	if	0	;There are less than 3 active tblptr bytes
  8108  00118E                     	endif
  8109  00118E  0009               	tblrd		*+
  8110  001190  CFF5 F123          	movff	tablat,?_scale
  8111  001194  0009               	tblrd		*+
  8112  001196  CFF5 F124          	movff	tablat,?_scale+1
  8113  00119A  000A               	tblrd		*-
  8114  00119C  CFF5 F125          	movff	tablat,?_scale+2
  8115  0011A0  0012               	return	
  8116  0011A2                     __end_of_scale:
  8117                           	opt stack 0
  8118                           tblptru	equ	0xFF8
  8119                           tblptrh	equ	0xFF7
  8120                           tblptrl	equ	0xFF6
  8121                           tablat	equ	0xFF5
  8122                           prodh	equ	0xFF4
  8123                           prodl	equ	0xFF3
  8124                           intcon	equ	0xFF2
  8125                           postinc0	equ	0xFEE
  8126                           wreg	equ	0xFE8
  8127                           postdec1	equ	0xFE5
  8128                           fsr1l	equ	0xFE1
  8129                           indf2	equ	0xFDF
  8130                           postinc2	equ	0xFDE
  8131                           postdec2	equ	0xFDD
  8132                           fsr2h	equ	0xFDA
  8133                           fsr2l	equ	0xFD9
  8134                           status	equ	0xFD8
  8135                           
  8136 ;; *************** function _putch *****************
  8137 ;; Defined at:
  8138 ;;		line 59 in file "source/IOConfig.h"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;  val             1    wreg     unsigned char 
  8141 ;; Auto vars:     Size  Location     Type
  8142 ;;  val             1   13[BANK1 ] unsigned char 
  8143 ;; Return value:  Size  Location     Type
  8144 ;;                  1    wreg      void 
  8145 ;; Registers used:
  8146 ;;		wreg, status,2, status,0, cstack
  8147 ;; Tracked objects:
  8148 ;;		On entry : 0/0
  8149 ;;		On exit  : 0/0
  8150 ;;		Unchanged: 0/0
  8151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8152 ;;      Params:         0       0       0       0       0       0       0
  8153 ;;      Locals:         0       0       1       0       0       0       0
  8154 ;;      Temps:          0       0       0       0       0       0       0
  8155 ;;      Totals:         0       0       1       0       0       0       0
  8156 ;;Total ram usage:        1 bytes
  8157 ;; Hardware stack levels used:    1
  8158 ;; Hardware stack levels required when called:   17
  8159 ;; This function calls:
  8160 ;;		_lcd_putc
  8161 ;; This function is called by:
  8162 ;;		_printf
  8163 ;;		_send_float
  8164 ;;		_send_int32
  8165 ;;		_send_int16
  8166 ;;		_send_float_vt
  8167 ;;		_send_int32_vt
  8168 ;;		_send_int16_vt
  8169 ;; This function uses a non-reentrant model
  8170 ;;
  8171                           
  8172                           	psect	text23
  8173  006C22                     __ptext23:
  8174                           	opt stack 0
  8175  006C22                     _putch:
  8176                           	opt stack 10
  8177                           
  8178                           ;incstack = 0
  8179                           ;putch@val stored from wreg
  8180  006C22  0101               	movlb	1	; () banked
  8181  006C24  6F0D               	movwf	putch@val& (0+255),b
  8182                           
  8183                           ;IOConfig.h: 60: lcd_putc(val);
  8184  006C26  0101               	movlb	1	; () banked
  8185  006C28  510D               	movf	putch@val& (0+255),w,b
  8186  006C2A  ECED  F02F         	call	_lcd_putc
  8187  006C2E  0012               	return		;funcret
  8188  006C30                     __end_of_putch:
  8189                           	opt stack 0
  8190                           tblptru	equ	0xFF8
  8191                           tblptrh	equ	0xFF7
  8192                           tblptrl	equ	0xFF6
  8193                           tablat	equ	0xFF5
  8194                           prodh	equ	0xFF4
  8195                           prodl	equ	0xFF3
  8196                           intcon	equ	0xFF2
  8197                           postinc0	equ	0xFEE
  8198                           wreg	equ	0xFE8
  8199                           postdec1	equ	0xFE5
  8200                           fsr1l	equ	0xFE1
  8201                           indf2	equ	0xFDF
  8202                           postinc2	equ	0xFDE
  8203                           postdec2	equ	0xFDD
  8204                           fsr2h	equ	0xFDA
  8205                           fsr2l	equ	0xFD9
  8206                           status	equ	0xFD8
  8207                           
  8208 ;; *************** function _lcd_putc *****************
  8209 ;; Defined at:
  8210 ;;		line 212 in file "source/../../vclib_lcd.h"
  8211 ;; Parameters:    Size  Location     Type
  8212 ;;  cha             1    wreg     unsigned char 
  8213 ;; Auto vars:     Size  Location     Type
  8214 ;;  cha             1   12[BANK1 ] unsigned char 
  8215 ;; Return value:  Size  Location     Type
  8216 ;;                  1    wreg      void 
  8217 ;; Registers used:
  8218 ;;		wreg, status,2, status,0, cstack
  8219 ;; Tracked objects:
  8220 ;;		On entry : 0/0
  8221 ;;		On exit  : 0/0
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8224 ;;      Params:         0       0       0       0       0       0       0
  8225 ;;      Locals:         0       0       1       0       0       0       0
  8226 ;;      Temps:          0       0       1       0       0       0       0
  8227 ;;      Totals:         0       0       2       0       0       0       0
  8228 ;;Total ram usage:        2 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; Hardware stack levels required when called:   16
  8231 ;; This function calls:
  8232 ;;		_lcd_gotoxy
  8233 ;;		_lcd_send_byte
  8234 ;; This function is called by:
  8235 ;;		_putch
  8236 ;;		_drawMenu
  8237 ;; This function uses a non-reentrant model
  8238 ;;
  8239                           
  8240                           	psect	text24
  8241  005FDA                     __ptext24:
  8242                           	opt stack 0
  8243  005FDA                     _lcd_putc:
  8244                           	opt stack 10
  8245                           
  8246                           ;incstack = 0
  8247                           ;lcd_putc@cha stored from wreg
  8248  005FDA  0101               	movlb	1	; () banked
  8249  005FDC  6F0C               	movwf	lcd_putc@cha& (0+255),b
  8250                           
  8251                           ;vclib_lcd.h: 213: switch (cha) {
  8252  005FDE  D02B               	goto	l9279
  8253  005FE0                     l9265:
  8254  005FE0  0E01               	movlw	1
  8255  005FE2  0101               	movlb	1	; () banked
  8256  005FE4  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  8257  005FE6  0E01               	movlw	1
  8258  005FE8  ECF1  F034         	call	_lcd_gotoxy
  8259                           
  8260                           ;vclib_lcd.h: 215: break;
  8261  005FEC  0012               	return	
  8262  005FEE                     l9267:
  8263  005FEE  0E01               	movlw	1
  8264  005FF0  0101               	movlb	1	; () banked
  8265  005FF2  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8266  005FF4  0E00               	movlw	0
  8267  005FF6  EC4E  F034         	call	_lcd_send_byte
  8268                           
  8269                           ;vclib_lcd.h: 218: _delay((unsigned long)((2)*(16000000/4000.0)));
  8270  005FFA  0E0B               	movlw	11
  8271  005FFC  0101               	movlb	1	; () banked
  8272  005FFE  6F0B               	movwf	??_lcd_putc& (0+255),b
  8273  006000  0E62               	movlw	98
  8274  006002                     u18947:
  8275  006002  2EE8               	decfsz	wreg,f,c
  8276  006004  D7FE               	goto	u18947
  8277  006006  2F0B               	decfsz	??_lcd_putc& (0+255),f,b
  8278  006008  D7FC               	goto	u18947
  8279  00600A  D000               	nop2	
  8280                           
  8281                           ;vclib_lcd.h: 223: break;
  8282  00600C  0012               	return	
  8283  00600E                     l9271:
  8284  00600E  0E02               	movlw	2
  8285  006010  0101               	movlb	1	; () banked
  8286  006012  6F08               	movwf	lcd_gotoxy@fila& (0+255),b
  8287  006014  0E01               	movlw	1
  8288  006016  ECF1  F034         	call	_lcd_gotoxy
  8289                           
  8290                           ;vclib_lcd.h: 236: break;
  8291  00601A  0012               	return	
  8292  00601C                     l9273:
  8293  00601C  0E10               	movlw	16
  8294  00601E  0101               	movlb	1	; () banked
  8295  006020  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8296  006022  0E00               	movlw	0
  8297  006024  EC4E  F034         	call	_lcd_send_byte
  8298                           
  8299                           ;vclib_lcd.h: 240: break;
  8300  006028  0012               	return	
  8301  00602A                     l9275:
  8302  00602A  C10C  F105         	movff	lcd_putc@cha,lcd_send_byte@n
  8303  00602E  0E01               	movlw	1
  8304  006030  EC4E  F034         	call	_lcd_send_byte
  8305                           
  8306                           ;vclib_lcd.h: 253: }
  8307                           
  8308                           ;vclib_lcd.h: 251: break;
  8309  006034  0012               	return	
  8310  006036                     l9279:
  8311  006036  0101               	movlb	1	; () banked
  8312  006038  510C               	movf	lcd_putc@cha& (0+255),w,b
  8313                           
  8314                           ; Switch size 1, requested type "space"
  8315                           ; Number of cases is 4, Range of values is 7 to 12
  8316                           ; switch strategies available:
  8317                           ; Name         Instructions Cycles
  8318                           ; simple_byte           13     7 (average)
  8319                           ;	Chosen strategy is simple_byte
  8320  00603A  0A07               	xorlw	7	; case 7
  8321  00603C  B4D8               	btfsc	status,2,c
  8322  00603E  D7D0               	goto	l9265
  8323  006040  0A0F               	xorlw	15	; case 8
  8324  006042  B4D8               	btfsc	status,2,c
  8325  006044  D7EB               	goto	l9273
  8326  006046  0A02               	xorlw	2	; case 10
  8327  006048  B4D8               	btfsc	status,2,c
  8328  00604A  D7E1               	goto	l9271
  8329  00604C  0A06               	xorlw	6	; case 12
  8330  00604E  B4D8               	btfsc	status,2,c
  8331  006050  D7CE               	goto	l9267
  8332  006052  D7EB               	goto	l9275
  8333  006054                     __end_of_lcd_putc:
  8334                           	opt stack 0
  8335                           tblptru	equ	0xFF8
  8336                           tblptrh	equ	0xFF7
  8337                           tblptrl	equ	0xFF6
  8338                           tablat	equ	0xFF5
  8339                           prodh	equ	0xFF4
  8340                           prodl	equ	0xFF3
  8341                           intcon	equ	0xFF2
  8342                           postinc0	equ	0xFEE
  8343                           wreg	equ	0xFE8
  8344                           postdec1	equ	0xFE5
  8345                           fsr1l	equ	0xFE1
  8346                           indf2	equ	0xFDF
  8347                           postinc2	equ	0xFDE
  8348                           postdec2	equ	0xFDD
  8349                           fsr2h	equ	0xFDA
  8350                           fsr2l	equ	0xFD9
  8351                           status	equ	0xFD8
  8352                           
  8353 ;; *************** function _lcd_gotoxy *****************
  8354 ;; Defined at:
  8355 ;;		line 198 in file "source/../../vclib_lcd.h"
  8356 ;; Parameters:    Size  Location     Type
  8357 ;;  pos             1    wreg     unsigned char 
  8358 ;;  fila            1    8[BANK1 ] unsigned char 
  8359 ;; Auto vars:     Size  Location     Type
  8360 ;;  pos             1    9[BANK1 ] unsigned char 
  8361 ;;  address         1   10[BANK1 ] unsigned char 
  8362 ;; Return value:  Size  Location     Type
  8363 ;;                  1    wreg      void 
  8364 ;; Registers used:
  8365 ;;		wreg, status,2, status,0, cstack
  8366 ;; Tracked objects:
  8367 ;;		On entry : 0/0
  8368 ;;		On exit  : 0/0
  8369 ;;		Unchanged: 0/0
  8370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8371 ;;      Params:         0       0       1       0       0       0       0
  8372 ;;      Locals:         0       0       2       0       0       0       0
  8373 ;;      Temps:          0       0       0       0       0       0       0
  8374 ;;      Totals:         0       0       3       0       0       0       0
  8375 ;;Total ram usage:        3 bytes
  8376 ;; Hardware stack levels used:    1
  8377 ;; Hardware stack levels required when called:   15
  8378 ;; This function calls:
  8379 ;;		_lcd_send_byte
  8380 ;; This function is called by:
  8381 ;;		_lcd_putc
  8382 ;;		_drawValEditor
  8383 ;;		_drawMenu
  8384 ;;		_drawChanVal
  8385 ;;		_drawPass1Lin
  8386 ;;		_drawAdvON
  8387 ;;		_drawSNquest
  8388 ;;		_drawAutoCalibRM
  8389 ;;		_drawCalibProc
  8390 ;;		_lcd_getc
  8391 ;; This function uses a non-reentrant model
  8392 ;;
  8393                           
  8394                           	psect	text25
  8395  0069E2                     __ptext25:
  8396                           	opt stack 0
  8397  0069E2                     _lcd_gotoxy:
  8398                           	opt stack 10
  8399                           
  8400                           ;incstack = 0
  8401                           ;lcd_gotoxy@pos stored from wreg
  8402  0069E2  0101               	movlb	1	; () banked
  8403  0069E4  6F09               	movwf	lcd_gotoxy@pos& (0+255),b
  8404                           
  8405                           ;vclib_lcd.h: 199: unsigned char address;
  8406                           ;vclib_lcd.h: 200: if (fila != 1)
  8407  0069E6  0101               	movlb	1	; () banked
  8408  0069E8  0508               	decf	lcd_gotoxy@fila& (0+255),w,b
  8409  0069EA  B4D8               	btfsc	status,2,c
  8410  0069EC  D002               	goto	l9185
  8411                           
  8412                           ; BSR set to: 1
  8413                           ;vclib_lcd.h: 201: address = 0x40;
  8414  0069EE  0E40               	movlw	64
  8415  0069F0  D001               	goto	L4
  8416  0069F2                     l9185:
  8417                           
  8418                           ; BSR set to: 1
  8419                           ;vclib_lcd.h: 202: else
  8420                           ;vclib_lcd.h: 203: address = 0;
  8421  0069F2  0E00               	movlw	0
  8422  0069F4                     L4:
  8423  0069F4  0101               	movlb	1	; () banked
  8424  0069F6  6F0A               	movwf	lcd_gotoxy@address& (0+255),b
  8425                           
  8426                           ; BSR set to: 1
  8427                           ;vclib_lcd.h: 204: address += pos - 1;
  8428                           
  8429                           ; BSR set to: 1
  8430  0069F8  0101               	movlb	1	; () banked
  8431  0069FA  0509               	decf	lcd_gotoxy@pos& (0+255),w,b
  8432  0069FC  0101               	movlb	1	; () banked
  8433  0069FE  270A               	addwf	lcd_gotoxy@address& (0+255),f,b
  8434                           
  8435                           ; BSR set to: 1
  8436                           ;vclib_lcd.h: 205: lcd_send_byte(0, 0b10000000 | address);
  8437  006A00  0101               	movlb	1	; () banked
  8438  006A02  510A               	movf	lcd_gotoxy@address& (0+255),w,b
  8439  006A04  0980               	iorlw	128
  8440  006A06  0101               	movlb	1	; () banked
  8441  006A08  6F05               	movwf	lcd_send_byte@n& (0+255),b
  8442  006A0A  0E00               	movlw	0
  8443  006A0C  EC4E  F034         	call	_lcd_send_byte
  8444  006A10  0012               	return		;funcret
  8445  006A12                     __end_of_lcd_gotoxy:
  8446                           	opt stack 0
  8447                           tblptru	equ	0xFF8
  8448                           tblptrh	equ	0xFF7
  8449                           tblptrl	equ	0xFF6
  8450                           tablat	equ	0xFF5
  8451                           prodh	equ	0xFF4
  8452                           prodl	equ	0xFF3
  8453                           intcon	equ	0xFF2
  8454                           postinc0	equ	0xFEE
  8455                           wreg	equ	0xFE8
  8456                           postdec1	equ	0xFE5
  8457                           fsr1l	equ	0xFE1
  8458                           indf2	equ	0xFDF
  8459                           postinc2	equ	0xFDE
  8460                           postdec2	equ	0xFDD
  8461                           fsr2h	equ	0xFDA
  8462                           fsr2l	equ	0xFD9
  8463                           status	equ	0xFD8
  8464                           
  8465 ;; *************** function _lcd_send_byte *****************
  8466 ;; Defined at:
  8467 ;;		line 163 in file "source/../../vclib_lcd.h"
  8468 ;; Parameters:    Size  Location     Type
  8469 ;;  address         1    wreg     unsigned char 
  8470 ;;  n               1    5[BANK1 ] unsigned char 
  8471 ;; Auto vars:     Size  Location     Type
  8472 ;;  address         1    7[BANK1 ] unsigned char 
  8473 ;; Return value:  Size  Location     Type
  8474 ;;                  1    wreg      void 
  8475 ;; Registers used:
  8476 ;;		wreg, status,2, status,0, cstack
  8477 ;; Tracked objects:
  8478 ;;		On entry : 0/0
  8479 ;;		On exit  : 0/0
  8480 ;;		Unchanged: 0/0
  8481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8482 ;;      Params:         0       0       1       0       0       0       0
  8483 ;;      Locals:         0       0       1       0       0       0       0
  8484 ;;      Temps:          0       0       1       0       0       0       0
  8485 ;;      Totals:         0       0       3       0       0       0       0
  8486 ;;Total ram usage:        3 bytes
  8487 ;; Hardware stack levels used:    1
  8488 ;; Hardware stack levels required when called:   14
  8489 ;; This function calls:
  8490 ;;		_lcd_read_byte
  8491 ;;		_lcd_send_4bits
  8492 ;; This function is called by:
  8493 ;;		_lcd_init
  8494 ;;		_lcd_gotoxy
  8495 ;;		_lcd_putc
  8496 ;;		_lcd_set_cgram_char
  8497 ;;		_lcd_cursor_en
  8498 ;;		_lcd_clear
  8499 ;;		_lcd_shift_right
  8500 ;;		_lcd_shift_left
  8501 ;; This function uses a non-reentrant model
  8502 ;;
  8503                           
  8504                           	psect	text26
  8505  00689C                     __ptext26:
  8506                           	opt stack 0
  8507  00689C                     _lcd_send_byte:
  8508                           	opt stack 15
  8509                           
  8510                           ;incstack = 0
  8511                           ;lcd_send_byte@address stored from wreg
  8512  00689C  0101               	movlb	1	; () banked
  8513  00689E  6F07               	movwf	lcd_send_byte@address& (0+255),b
  8514                           
  8515                           ;vclib_lcd.h: 164: PORTBbits.RB1 = 0;
  8516  0068A0  9281               	bcf	3969,1,c	;volatile
  8517  0068A2                     l9177:
  8518  0068A2  ECE5  F033         	call	_lcd_read_byte	;wreg free
  8519  0068A6  0101               	movlb	1	; () banked
  8520  0068A8  6F06               	movwf	??_lcd_send_byte& (0+255),b
  8521  0068AA  0101               	movlb	1	; () banked
  8522  0068AC  BF06               	btfsc	??_lcd_send_byte& (0+255),7,b
  8523  0068AE  D7F9               	goto	l9177
  8524                           
  8525                           ; BSR set to: 1
  8526                           ;vclib_lcd.h: 166: PORTBbits.RB1 = address;
  8527  0068B0  0101               	movlb	1	; () banked
  8528  0068B2  B107               	btfsc	lcd_send_byte@address& (0+255),0,b
  8529  0068B4  D002               	bra	u12965
  8530  0068B6  9281               	bcf	3969,1,c	;volatile
  8531  0068B8  D001               	bra	u12966
  8532  0068BA                     u12965:
  8533  0068BA  8281               	bsf	3969,1,c	;volatile
  8534  0068BC                     u12966:
  8535                           
  8536                           ;vclib_lcd.h: 167: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8537  0068BC  D000               	nop2		;2 cycle nop
  8538  0068BE  D000               	nop2		;2 cycle nop
  8539                           
  8540                           ;vclib_lcd.h: 168: PORTBbits.RB2 = 0;
  8541  0068C0  9481               	bcf	3969,2,c	;volatile
  8542                           
  8543                           ;vclib_lcd.h: 169: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8544  0068C2  D000               	nop2		;2 cycle nop
  8545  0068C4  D000               	nop2		;2 cycle nop
  8546                           
  8547                           ;vclib_lcd.h: 170: PORTBbits.RB3 = 0;
  8548  0068C6  9681               	bcf	3969,3,c	;volatile
  8549                           
  8550                           ;vclib_lcd.h: 171: lcd_send_4bits(n >> 4);
  8551  0068C8  0101               	movlb	1	; () banked
  8552  0068CA  3905               	swapf	lcd_send_byte@n& (0+255),w,b
  8553  0068CC  0B0F               	andlw	15
  8554  0068CE  EC94  F02E         	call	_lcd_send_4bits
  8555                           
  8556                           ;vclib_lcd.h: 172: lcd_send_4bits(n & 0b00001111 );
  8557  0068D2  0101               	movlb	1	; () banked
  8558  0068D4  5105               	movf	lcd_send_byte@n& (0+255),w,b
  8559  0068D6  0B0F               	andlw	15
  8560  0068D8  EC94  F02E         	call	_lcd_send_4bits
  8561  0068DC  0012               	return		;funcret
  8562  0068DE                     __end_of_lcd_send_byte:
  8563                           	opt stack 0
  8564                           tblptru	equ	0xFF8
  8565                           tblptrh	equ	0xFF7
  8566                           tblptrl	equ	0xFF6
  8567                           tablat	equ	0xFF5
  8568                           prodh	equ	0xFF4
  8569                           prodl	equ	0xFF3
  8570                           intcon	equ	0xFF2
  8571                           postinc0	equ	0xFEE
  8572                           wreg	equ	0xFE8
  8573                           postdec1	equ	0xFE5
  8574                           fsr1l	equ	0xFE1
  8575                           indf2	equ	0xFDF
  8576                           postinc2	equ	0xFDE
  8577                           postdec2	equ	0xFDD
  8578                           fsr2h	equ	0xFDA
  8579                           fsr2l	equ	0xFD9
  8580                           status	equ	0xFD8
  8581                           
  8582 ;; *************** function _lcd_send_4bits *****************
  8583 ;; Defined at:
  8584 ;;		line 151 in file "source/../../vclib_lcd.h"
  8585 ;; Parameters:    Size  Location     Type
  8586 ;;  n               1    wreg     unsigned char 
  8587 ;; Auto vars:     Size  Location     Type
  8588 ;;  n               1    4[BANK1 ] unsigned char 
  8589 ;; Return value:  Size  Location     Type
  8590 ;;                  1    wreg      void 
  8591 ;; Registers used:
  8592 ;;		wreg, status,2, cstack
  8593 ;; Tracked objects:
  8594 ;;		On entry : 0/0
  8595 ;;		On exit  : 0/0
  8596 ;;		Unchanged: 0/0
  8597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8598 ;;      Params:         0       0       0       0       0       0       0
  8599 ;;      Locals:         0       0       5       0       0       0       0
  8600 ;;      Temps:          0       0       0       0       0       0       0
  8601 ;;      Totals:         0       0       5       0       0       0       0
  8602 ;;Total ram usage:        5 bytes
  8603 ;; Hardware stack levels used:    1
  8604 ;; Hardware stack levels required when called:   12
  8605 ;; This function calls:
  8606 ;;		Nothing
  8607 ;; This function is called by:
  8608 ;;		_lcd_send_byte
  8609 ;;		_lcd_init
  8610 ;; This function uses a non-reentrant model
  8611 ;;
  8612                           
  8613                           	psect	text27
  8614  005D28                     __ptext27:
  8615                           	opt stack 0
  8616  005D28                     _lcd_send_4bits:
  8617                           	opt stack 16
  8618                           
  8619                           ;incstack = 0
  8620                           ;lcd_send_4bits@n stored from wreg
  8621  005D28  0101               	movlb	1	; () banked
  8622  005D2A  6F04               	movwf	lcd_send_4bits@n& (0+255),b
  8623                           
  8624                           ;vclib_lcd.h: 153: PORTBbits.RB4 = 0 || n & 1;
  8625  005D2C  0E01               	movlw	1
  8626  005D2E  0101               	movlb	1	; () banked
  8627  005D30  6F00               	movwf	_lcd_send_4bits$1688& (0+255),b
  8628                           
  8629                           ; BSR set to: 1
  8630  005D32  0101               	movlb	1	; () banked
  8631  005D34  B104               	btfsc	lcd_send_4bits@n& (0+255),0,b
  8632  005D36  D003               	goto	l9147
  8633                           
  8634                           ; BSR set to: 1
  8635  005D38  0E00               	movlw	0
  8636  005D3A  0101               	movlb	1	; () banked
  8637  005D3C  6F00               	movwf	_lcd_send_4bits$1688& (0+255),b
  8638  005D3E                     l9147:
  8639                           
  8640                           ; BSR set to: 1
  8641  005D3E  0101               	movlb	1	; () banked
  8642  005D40  B100               	btfsc	_lcd_send_4bits$1688& (0+255),0,b
  8643  005D42  D002               	bra	u12885
  8644  005D44  9881               	bcf	3969,4,c	;volatile
  8645  005D46  D001               	bra	u12886
  8646  005D48                     u12885:
  8647  005D48  8881               	bsf	3969,4,c	;volatile
  8648  005D4A                     u12886:
  8649                           
  8650                           ;vclib_lcd.h: 154: PORTBbits.RB5 = 0 || n & 2;
  8651  005D4A  0E01               	movlw	1
  8652  005D4C  0101               	movlb	1	; () banked
  8653  005D4E  6F01               	movwf	_lcd_send_4bits$1689& (0+255),b
  8654                           
  8655                           ; BSR set to: 1
  8656  005D50  0101               	movlb	1	; () banked
  8657  005D52  B304               	btfsc	lcd_send_4bits@n& (0+255),1,b
  8658  005D54  D003               	goto	l9153
  8659                           
  8660                           ; BSR set to: 1
  8661  005D56  0E00               	movlw	0
  8662  005D58  0101               	movlb	1	; () banked
  8663  005D5A  6F01               	movwf	_lcd_send_4bits$1689& (0+255),b
  8664  005D5C                     l9153:
  8665                           
  8666                           ; BSR set to: 1
  8667  005D5C  0101               	movlb	1	; () banked
  8668  005D5E  B101               	btfsc	_lcd_send_4bits$1689& (0+255),0,b
  8669  005D60  D002               	bra	u12905
  8670  005D62  9A81               	bcf	3969,5,c	;volatile
  8671  005D64  D001               	bra	u12906
  8672  005D66                     u12905:
  8673  005D66  8A81               	bsf	3969,5,c	;volatile
  8674  005D68                     u12906:
  8675                           
  8676                           ;vclib_lcd.h: 155: PORTBbits.RB6 = 0 || n & 4;
  8677  005D68  0E01               	movlw	1
  8678  005D6A  0101               	movlb	1	; () banked
  8679  005D6C  6F02               	movwf	_lcd_send_4bits$1690& (0+255),b
  8680                           
  8681                           ; BSR set to: 1
  8682  005D6E  0101               	movlb	1	; () banked
  8683  005D70  B504               	btfsc	lcd_send_4bits@n& (0+255),2,b
  8684  005D72  D003               	goto	l9159
  8685                           
  8686                           ; BSR set to: 1
  8687  005D74  0E00               	movlw	0
  8688  005D76  0101               	movlb	1	; () banked
  8689  005D78  6F02               	movwf	_lcd_send_4bits$1690& (0+255),b
  8690  005D7A                     l9159:
  8691                           
  8692                           ; BSR set to: 1
  8693  005D7A  0101               	movlb	1	; () banked
  8694  005D7C  B102               	btfsc	_lcd_send_4bits$1690& (0+255),0,b
  8695  005D7E  D002               	bra	u12925
  8696  005D80  9C81               	bcf	3969,6,c	;volatile
  8697  005D82  D001               	bra	u12926
  8698  005D84                     u12925:
  8699  005D84  8C81               	bsf	3969,6,c	;volatile
  8700  005D86                     u12926:
  8701                           
  8702                           ;vclib_lcd.h: 156: PORTBbits.RB7 = 0 || n & 8;
  8703  005D86  0E01               	movlw	1
  8704  005D88  0101               	movlb	1	; () banked
  8705  005D8A  6F03               	movwf	_lcd_send_4bits$1691& (0+255),b
  8706                           
  8707                           ; BSR set to: 1
  8708  005D8C  0101               	movlb	1	; () banked
  8709  005D8E  B704               	btfsc	lcd_send_4bits@n& (0+255),3,b
  8710  005D90  D003               	goto	l9165
  8711                           
  8712                           ; BSR set to: 1
  8713  005D92  0E00               	movlw	0
  8714  005D94  0101               	movlb	1	; () banked
  8715  005D96  6F03               	movwf	_lcd_send_4bits$1691& (0+255),b
  8716  005D98                     l9165:
  8717                           
  8718                           ; BSR set to: 1
  8719  005D98  0101               	movlb	1	; () banked
  8720  005D9A  B103               	btfsc	_lcd_send_4bits$1691& (0+255),0,b
  8721  005D9C  D002               	bra	u12945
  8722  005D9E  9E81               	bcf	3969,7,c	;volatile
  8723  005DA0  D001               	bra	u12946
  8724  005DA2                     u12945:
  8725  005DA2  8E81               	bsf	3969,7,c	;volatile
  8726  005DA4                     u12946:
  8727                           
  8728                           ;vclib_lcd.h: 157: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8729  005DA4  D000               	nop2		;2 cycle nop
  8730  005DA6  D000               	nop2		;2 cycle nop
  8731                           
  8732                           ;vclib_lcd.h: 158: PORTBbits.RB3 = 1;
  8733  005DA8  8681               	bsf	3969,3,c	;volatile
  8734                           
  8735                           ;vclib_lcd.h: 159: _delay((unsigned long)((2)*(16000000/4000000.0)));
  8736  005DAA  0E02               	movlw	2
  8737  005DAC                     u18957:
  8738  005DAC  2EE8               	decfsz	wreg,f,c
  8739  005DAE  D7FE               	goto	u18957
  8740  005DB0  D000               	nop2		;nop
  8741                           
  8742                           ;vclib_lcd.h: 160: PORTBbits.RB3 = 0;
  8743  005DB2  9681               	bcf	3969,3,c	;volatile
  8744  005DB4  0012               	return		;funcret
  8745  005DB6                     __end_of_lcd_send_4bits:
  8746                           	opt stack 0
  8747                           tblptru	equ	0xFF8
  8748                           tblptrh	equ	0xFF7
  8749                           tblptrl	equ	0xFF6
  8750                           tablat	equ	0xFF5
  8751                           prodh	equ	0xFF4
  8752                           prodl	equ	0xFF3
  8753                           intcon	equ	0xFF2
  8754                           postinc0	equ	0xFEE
  8755                           wreg	equ	0xFE8
  8756                           postdec1	equ	0xFE5
  8757                           fsr1l	equ	0xFE1
  8758                           indf2	equ	0xFDF
  8759                           postinc2	equ	0xFDE
  8760                           postdec2	equ	0xFDD
  8761                           fsr2h	equ	0xFDA
  8762                           fsr2l	equ	0xFD9
  8763                           status	equ	0xFD8
  8764                           
  8765 ;; *************** function _lcd_read_byte *****************
  8766 ;; Defined at:
  8767 ;;		line 127 in file "source/../../vclib_lcd.h"
  8768 ;; Parameters:    Size  Location     Type
  8769 ;;		None
  8770 ;; Auto vars:     Size  Location     Type
  8771 ;;  high            1    3[BANK1 ] unsigned char 
  8772 ;;  low             1    2[BANK1 ] unsigned char 
  8773 ;; Return value:  Size  Location     Type
  8774 ;;                  1    wreg      unsigned char 
  8775 ;; Registers used:
  8776 ;;		wreg, status,2, status,0, cstack
  8777 ;; Tracked objects:
  8778 ;;		On entry : 0/0
  8779 ;;		On exit  : 0/0
  8780 ;;		Unchanged: 0/0
  8781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8782 ;;      Params:         0       0       0       0       0       0       0
  8783 ;;      Locals:         0       0       2       0       0       0       0
  8784 ;;      Temps:          0       0       0       0       0       0       0
  8785 ;;      Totals:         0       0       2       0       0       0       0
  8786 ;;Total ram usage:        2 bytes
  8787 ;; Hardware stack levels used:    1
  8788 ;; Hardware stack levels required when called:   13
  8789 ;; This function calls:
  8790 ;;		_lcd_read_4bits
  8791 ;; This function is called by:
  8792 ;;		_lcd_send_byte
  8793 ;;		_lcd_getc
  8794 ;; This function uses a non-reentrant model
  8795 ;;
  8796                           
  8797                           	psect	text28
  8798  0067CA                     __ptext28:
  8799                           	opt stack 0
  8800  0067CA                     _lcd_read_byte:
  8801                           	opt stack 15
  8802                           
  8803                           ;vclib_lcd.h: 128: unsigned char low, high;
  8804                           ;vclib_lcd.h: 129: TRISBbits.TRISB4 = 1;
  8805                           
  8806                           ;incstack = 0
  8807  0067CA  8893               	bsf	3987,4,c	;volatile
  8808                           
  8809                           ;vclib_lcd.h: 130: TRISBbits.TRISB5 = 1;
  8810  0067CC  8A93               	bsf	3987,5,c	;volatile
  8811                           
  8812                           ;vclib_lcd.h: 131: TRISBbits.TRISB6 = 1;
  8813  0067CE  8C93               	bsf	3987,6,c	;volatile
  8814                           
  8815                           ;vclib_lcd.h: 132: TRISBbits.TRISB7 = 1;
  8816  0067D0  8E93               	bsf	3987,7,c	;volatile
  8817                           
  8818                           ;vclib_lcd.h: 133: PORTBbits.RB2 = 1;
  8819  0067D2  8481               	bsf	3969,2,c	;volatile
  8820                           
  8821                           ;vclib_lcd.h: 134: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8822  0067D4  D000               	nop2		;2 cycle nop
  8823  0067D6  D000               	nop2		;2 cycle nop
  8824                           
  8825                           ;vclib_lcd.h: 135: PORTBbits.RB3 = 1;
  8826  0067D8  8681               	bsf	3969,3,c	;volatile
  8827                           
  8828                           ;vclib_lcd.h: 136: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8829  0067DA  D000               	nop2		;2 cycle nop
  8830  0067DC  D000               	nop2		;2 cycle nop
  8831                           
  8832                           ;vclib_lcd.h: 137: high = lcd_read_4bits();
  8833  0067DE  EC2A  F030         	call	_lcd_read_4bits	;wreg free
  8834  0067E2  0101               	movlb	1	; () banked
  8835  0067E4  6F03               	movwf	lcd_read_byte@high& (0+255),b
  8836                           
  8837                           ; BSR set to: 1
  8838                           ;vclib_lcd.h: 138: PORTBbits.RB3 = 0;
  8839  0067E6  9681               	bcf	3969,3,c	;volatile
  8840                           
  8841                           ; BSR set to: 1
  8842                           ;vclib_lcd.h: 139: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8843  0067E8  D000               	nop2		;2 cycle nop
  8844  0067EA  D000               	nop2		;2 cycle nop
  8845                           
  8846                           ;vclib_lcd.h: 140: PORTBbits.RB3 = 1;
  8847  0067EC  8681               	bsf	3969,3,c	;volatile
  8848                           
  8849                           ;vclib_lcd.h: 141: _delay((unsigned long)((1)*(16000000/4000000.0)));
  8850  0067EE  D000               	nop2		;2 cycle nop
  8851  0067F0  D000               	nop2		;2 cycle nop
  8852                           
  8853                           ;vclib_lcd.h: 142: low = lcd_read_4bits();
  8854  0067F2  EC2A  F030         	call	_lcd_read_4bits	;wreg free
  8855  0067F6  0101               	movlb	1	; () banked
  8856  0067F8  6F02               	movwf	lcd_read_byte@low& (0+255),b
  8857                           
  8858                           ; BSR set to: 1
  8859                           ;vclib_lcd.h: 143: PORTBbits.RB3 = 0;
  8860  0067FA  9681               	bcf	3969,3,c	;volatile
  8861                           
  8862                           ; BSR set to: 1
  8863                           ;vclib_lcd.h: 144: TRISBbits.TRISB4 = 0;
  8864  0067FC  9893               	bcf	3987,4,c	;volatile
  8865                           
  8866                           ; BSR set to: 1
  8867                           ;vclib_lcd.h: 145: TRISBbits.TRISB5 = 0;
  8868  0067FE  9A93               	bcf	3987,5,c	;volatile
  8869                           
  8870                           ; BSR set to: 1
  8871                           ;vclib_lcd.h: 146: TRISBbits.TRISB6 = 0;
  8872  006800  9C93               	bcf	3987,6,c	;volatile
  8873                           
  8874                           ; BSR set to: 1
  8875                           ;vclib_lcd.h: 147: TRISBbits.TRISB7 = 0;
  8876  006802  9E93               	bcf	3987,7,c	;volatile
  8877                           
  8878                           ; BSR set to: 1
  8879                           ;vclib_lcd.h: 148: return ( (high << 4) | low);
  8880  006804  0101               	movlb	1	; () banked
  8881  006806  3903               	swapf	lcd_read_byte@high& (0+255),w,b
  8882  006808  0BF0               	andlw	240
  8883  00680A  0101               	movlb	1	; () banked
  8884  00680C  1102               	iorwf	lcd_read_byte@low& (0+255),w,b
  8885  00680E  0012               	return	
  8886  006810                     __end_of_lcd_read_byte:
  8887                           	opt stack 0
  8888                           tblptru	equ	0xFF8
  8889                           tblptrh	equ	0xFF7
  8890                           tblptrl	equ	0xFF6
  8891                           tablat	equ	0xFF5
  8892                           prodh	equ	0xFF4
  8893                           prodl	equ	0xFF3
  8894                           intcon	equ	0xFF2
  8895                           postinc0	equ	0xFEE
  8896                           wreg	equ	0xFE8
  8897                           postdec1	equ	0xFE5
  8898                           fsr1l	equ	0xFE1
  8899                           indf2	equ	0xFDF
  8900                           postinc2	equ	0xFDE
  8901                           postdec2	equ	0xFDD
  8902                           fsr2h	equ	0xFDA
  8903                           fsr2l	equ	0xFD9
  8904                           status	equ	0xFD8
  8905                           
  8906 ;; *************** function _lcd_read_4bits *****************
  8907 ;; Defined at:
  8908 ;;		line 117 in file "source/../../vclib_lcd.h"
  8909 ;; Parameters:    Size  Location     Type
  8910 ;;		None
  8911 ;; Auto vars:     Size  Location     Type
  8912 ;;  n               1    1[BANK1 ] unsigned char 
  8913 ;; Return value:  Size  Location     Type
  8914 ;;                  1    wreg      unsigned char 
  8915 ;; Registers used:
  8916 ;;		wreg, status,2, status,0
  8917 ;; Tracked objects:
  8918 ;;		On entry : 0/0
  8919 ;;		On exit  : 0/0
  8920 ;;		Unchanged: 0/0
  8921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8922 ;;      Params:         0       0       0       0       0       0       0
  8923 ;;      Locals:         0       0       1       0       0       0       0
  8924 ;;      Temps:          0       0       1       0       0       0       0
  8925 ;;      Totals:         0       0       2       0       0       0       0
  8926 ;;Total ram usage:        2 bytes
  8927 ;; Hardware stack levels used:    1
  8928 ;; Hardware stack levels required when called:   12
  8929 ;; This function calls:
  8930 ;;		Nothing
  8931 ;; This function is called by:
  8932 ;;		_lcd_read_byte
  8933 ;; This function uses a non-reentrant model
  8934 ;;
  8935                           
  8936                           	psect	text29
  8937  006054                     __ptext29:
  8938                           	opt stack 0
  8939  006054                     _lcd_read_4bits:
  8940                           	opt stack 15
  8941                           
  8942                           ;vclib_lcd.h: 118: unsigned char n = 0x00;
  8943                           
  8944                           ; BSR set to: 1
  8945                           ;incstack = 0
  8946  006054  0E00               	movlw	0
  8947  006056  0101               	movlb	1	; () banked
  8948  006058  6F01               	movwf	lcd_read_4bits@n& (0+255),b
  8949                           
  8950                           ; BSR set to: 1
  8951                           ;vclib_lcd.h: 120: n |= PORTBbits.RB4;
  8952  00605A  A881               	btfss	3969,4,c	;volatile
  8953  00605C  D002               	goto	u12830
  8954  00605E  0E01               	movlw	1
  8955  006060  D001               	goto	u12836
  8956  006062                     u12830:
  8957  006062  0E00               	movlw	0
  8958  006064                     u12836:
  8959  006064  0101               	movlb	1	; () banked
  8960  006066  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  8961                           
  8962                           ; BSR set to: 1
  8963                           ;vclib_lcd.h: 121: n |= PORTBbits.RB5 << 1;
  8964  006068  AA81               	btfss	3969,5,c	;volatile
  8965  00606A  D004               	goto	u12840
  8966  00606C  0101               	movlb	1	; () banked
  8967  00606E  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  8968  006070  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  8969  006072  D002               	goto	u12848
  8970  006074                     u12840:
  8971  006074  0101               	movlb	1	; () banked
  8972  006076  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  8973  006078                     u12848:
  8974  006078  0101               	movlb	1	; () banked
  8975  00607A  90D8               	bcf	status,0,c
  8976  00607C  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  8977  00607E  0101               	movlb	1	; () banked
  8978  006080  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  8979                           
  8980                           ; BSR set to: 1
  8981                           ;vclib_lcd.h: 122: n |= PORTBbits.RB6 << 2;
  8982  006082  AC81               	btfss	3969,6,c	;volatile
  8983  006084  D004               	goto	u12850
  8984  006086  0101               	movlb	1	; () banked
  8985  006088  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  8986  00608A  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  8987  00608C  D002               	goto	u12858
  8988  00608E                     u12850:
  8989  00608E  0101               	movlb	1	; () banked
  8990  006090  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  8991  006092                     u12858:
  8992  006092  0101               	movlb	1	; () banked
  8993  006094  90D8               	bcf	status,0,c
  8994  006096  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  8995  006098  0101               	movlb	1	; () banked
  8996  00609A  90D8               	bcf	status,0,c
  8997  00609C  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  8998  00609E  0101               	movlb	1	; () banked
  8999  0060A0  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9000                           
  9001                           ; BSR set to: 1
  9002                           ;vclib_lcd.h: 123: n |= PORTBbits.RB7 << 3;
  9003  0060A2  AE81               	btfss	3969,7,c	;volatile
  9004  0060A4  D004               	goto	u12860
  9005  0060A6  0101               	movlb	1	; () banked
  9006  0060A8  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9007  0060AA  2B00               	incf	??_lcd_read_4bits& (0+255),f,b
  9008  0060AC  D002               	goto	u12868
  9009  0060AE                     u12860:
  9010  0060AE  0101               	movlb	1	; () banked
  9011  0060B0  6B00               	clrf	??_lcd_read_4bits& (0+255),b
  9012  0060B2                     u12868:
  9013  0060B2  0101               	movlb	1	; () banked
  9014  0060B4  90D8               	bcf	status,0,c
  9015  0060B6  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9016  0060B8  0101               	movlb	1	; () banked
  9017  0060BA  90D8               	bcf	status,0,c
  9018  0060BC  3700               	rlcf	??_lcd_read_4bits& (0+255),f,b
  9019  0060BE  0101               	movlb	1	; () banked
  9020  0060C0  90D8               	bcf	status,0,c
  9021  0060C2  3500               	rlcf	??_lcd_read_4bits& (0+255),w,b
  9022  0060C4  0101               	movlb	1	; () banked
  9023  0060C6  1301               	iorwf	lcd_read_4bits@n& (0+255),f,b
  9024                           
  9025                           ;vclib_lcd.h: 124: return (n);
  9026  0060C8  0101               	movlb	1	; () banked
  9027  0060CA  5101               	movf	lcd_read_4bits@n& (0+255),w,b
  9028  0060CC  0012               	return	
  9029  0060CE                     __end_of_lcd_read_4bits:
  9030                           	opt stack 0
  9031                           tblptru	equ	0xFF8
  9032                           tblptrh	equ	0xFF7
  9033                           tblptrl	equ	0xFF6
  9034                           tablat	equ	0xFF5
  9035                           prodh	equ	0xFF4
  9036                           prodl	equ	0xFF3
  9037                           intcon	equ	0xFF2
  9038                           postinc0	equ	0xFEE
  9039                           wreg	equ	0xFE8
  9040                           postdec1	equ	0xFE5
  9041                           fsr1l	equ	0xFE1
  9042                           indf2	equ	0xFDF
  9043                           postinc2	equ	0xFDE
  9044                           postdec2	equ	0xFDD
  9045                           fsr2h	equ	0xFDA
  9046                           fsr2l	equ	0xFD9
  9047                           status	equ	0xFD8
  9048                           
  9049 ;; *************** function _isdigit *****************
  9050 ;; Defined at:
  9051 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\isdigit.c"
  9052 ;; Parameters:    Size  Location     Type
  9053 ;;  c               1    wreg     unsigned char 
  9054 ;; Auto vars:     Size  Location     Type
  9055 ;;  c               1    2[BANK1 ] unsigned char 
  9056 ;; Return value:  Size  Location     Type
  9057 ;;		None               void
  9058 ;; Registers used:
  9059 ;;		wreg, status,2, status,0
  9060 ;; Tracked objects:
  9061 ;;		On entry : 0/0
  9062 ;;		On exit  : 0/0
  9063 ;;		Unchanged: 0/0
  9064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9065 ;;      Params:         0       0       0       0       0       0       0
  9066 ;;      Locals:         0       0       2       0       0       0       0
  9067 ;;      Temps:          0       0       1       0       0       0       0
  9068 ;;      Totals:         0       0       3       0       0       0       0
  9069 ;;Total ram usage:        3 bytes
  9070 ;; Hardware stack levels used:    1
  9071 ;; Hardware stack levels required when called:   12
  9072 ;; This function calls:
  9073 ;;		Nothing
  9074 ;; This function is called by:
  9075 ;;		_printf
  9076 ;; This function uses a non-reentrant model
  9077 ;;
  9078                           
  9079                           	psect	text30
  9080  006A6C                     __ptext30:
  9081                           	opt stack 0
  9082  006A6C                     _isdigit:
  9083                           	opt stack 15
  9084                           
  9085                           ; BSR set to: 1
  9086                           ;incstack = 0
  9087                           ;isdigit@c stored from wreg
  9088  006A6C  0101               	movlb	1	; () banked
  9089  006A6E  6F02               	movwf	isdigit@c& (0+255),b
  9090  006A70  0E00               	movlw	0
  9091  006A72  0101               	movlb	1	; () banked
  9092  006A74  6F01               	movwf	_isdigit$2496& (0+255),b
  9093                           
  9094                           ; BSR set to: 1
  9095  006A76  0E3A               	movlw	58
  9096  006A78  0101               	movlb	1	; () banked
  9097  006A7A  6102               	cpfslt	isdigit@c& (0+255),b
  9098  006A7C  D007               	goto	l9711
  9099                           
  9100                           ; BSR set to: 1
  9101  006A7E  0E2F               	movlw	47
  9102  006A80  0101               	movlb	1	; () banked
  9103  006A82  6502               	cpfsgt	isdigit@c& (0+255),b
  9104  006A84  D003               	goto	l9711
  9105                           
  9106                           ; BSR set to: 1
  9107  006A86  0E01               	movlw	1
  9108  006A88  0101               	movlb	1	; () banked
  9109  006A8A  6F01               	movwf	_isdigit$2496& (0+255),b
  9110  006A8C                     l9711:
  9111                           
  9112                           ; BSR set to: 1
  9113  006A8C  C101  F100         	movff	_isdigit$2496,??_isdigit
  9114  006A90  0101               	movlb	1	; () banked
  9115  006A92  3100               	rrcf	??_isdigit& (0+255),w,b
  9116  006A94  0012               	return	
  9117  006A96                     __end_of_isdigit:
  9118                           	opt stack 0
  9119                           tblptru	equ	0xFF8
  9120                           tblptrh	equ	0xFF7
  9121                           tblptrl	equ	0xFF6
  9122                           tablat	equ	0xFF5
  9123                           prodh	equ	0xFF4
  9124                           prodl	equ	0xFF3
  9125                           intcon	equ	0xFF2
  9126                           postinc0	equ	0xFEE
  9127                           wreg	equ	0xFE8
  9128                           postdec1	equ	0xFE5
  9129                           fsr1l	equ	0xFE1
  9130                           indf2	equ	0xFDF
  9131                           postinc2	equ	0xFDE
  9132                           postdec2	equ	0xFDD
  9133                           fsr2h	equ	0xFDA
  9134                           fsr2l	equ	0xFD9
  9135                           status	equ	0xFD8
  9136                           
  9137 ;; *************** function _fround *****************
  9138 ;; Defined at:
  9139 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  9140 ;; Parameters:    Size  Location     Type
  9141 ;;  prec            1    wreg     unsigned char 
  9142 ;; Auto vars:     Size  Location     Type
  9143 ;;  prec            1   44[BANK1 ] unsigned char 
  9144 ;; Return value:  Size  Location     Type
  9145 ;;                  3   35[BANK1 ] unsigned char 
  9146 ;; Registers used:
  9147 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9148 ;; Tracked objects:
  9149 ;;		On entry : 0/0
  9150 ;;		On exit  : 0/0
  9151 ;;		Unchanged: 0/0
  9152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9153 ;;      Params:         0       0       3       0       0       0       0
  9154 ;;      Locals:         0       0       7       0       0       0       0
  9155 ;;      Temps:          0       0       0       0       0       0       0
  9156 ;;      Totals:         0       0      10       0       0       0       0
  9157 ;;Total ram usage:       10 bytes
  9158 ;; Hardware stack levels used:    1
  9159 ;; Hardware stack levels required when called:   14
  9160 ;; This function calls:
  9161 ;;		___awdiv
  9162 ;;		___awmod
  9163 ;;		___ftmul
  9164 ;;		___wmul
  9165 ;; This function is called by:
  9166 ;;		_printf
  9167 ;; This function uses a non-reentrant model
  9168 ;;
  9169                           
  9170                           	psect	text31
  9171  00226C                     __ptext31:
  9172                           	opt stack 0
  9173  00226C                     _fround:
  9174                           	opt stack 13
  9175                           
  9176                           ; BSR set to: 1
  9177                           ;incstack = 0
  9178                           ;fround@prec stored from wreg
  9179  00226C  0101               	movlb	1	; () banked
  9180  00226E  6F2C               	movwf	fround@prec& (0+255),b
  9181                           
  9182                           ;doprnt.c: 413: if(prec>=110)
  9183  002270  0E6D               	movlw	109
  9184  002272  0101               	movlb	1	; () banked
  9185  002274  652C               	cpfsgt	fround@prec& (0+255),b
  9186  002276  D0BA               	goto	l9653
  9187                           
  9188                           ; BSR set to: 1
  9189                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9190  002278  0E00               	movlw	0
  9191  00227A  0101               	movlb	1	; () banked
  9192  00227C  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9193  00227E  0E03               	movlw	3
  9194  002280  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9195  002282  0E00               	movlw	0
  9196  002284  0101               	movlb	1	; () banked
  9197  002286  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9198  002288  0E0A               	movlw	10
  9199  00228A  6F08               	movwf	___awdiv@divisor& (0+255),b
  9200  00228C  0E00               	movlw	0
  9201  00228E  0101               	movlb	1	; () banked
  9202  002290  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9203  002292  0E64               	movlw	100
  9204  002294  6F02               	movwf	___awmod@divisor& (0+255),b
  9205  002296  C12C  F100         	movff	fround@prec,___awmod@dividend
  9206  00229A  0101               	movlb	1	; () banked
  9207  00229C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9208  00229E  ECF7  F02A         	call	___awmod	;wreg free
  9209  0022A2  C100  F106         	movff	?___awmod,___awdiv@dividend
  9210  0022A6  C101  F107         	movff	?___awmod+1,___awdiv@dividend+1
  9211  0022AA  ECC6  F027         	call	___awdiv	;wreg free
  9212  0022AE  0E09               	movlw	9
  9213  0022B0  0101               	movlb	1	; () banked
  9214  0022B2  2506               	addwf	?___awdiv& (0+255),w,b
  9215  0022B4  0101               	movlb	1	; () banked
  9216  0022B6  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9217  0022B8  0E00               	movlw	0
  9218  0022BA  0101               	movlb	1	; () banked
  9219  0022BC  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9220  0022BE  0101               	movlb	1	; () banked
  9221  0022C0  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9222  0022C2  EC8B  F034         	call	___wmul	;wreg free
  9223  0022C6  0E5D               	movlw	low __npowers_
  9224  0022C8  0101               	movlb	1	; () banked
  9225  0022CA  250E               	addwf	?___wmul& (0+255),w,b
  9226  0022CC  6EF6               	movwf	tblptrl,c
  9227  0022CE  0E7D               	movlw	high __npowers_
  9228  0022D0  0101               	movlb	1	; () banked
  9229  0022D2  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9230  0022D4  6EF7               	movwf	tblptrh,c
  9231  0022D6                     	if	0	;There are less than 3 active tblptr bytes
  9232  0022D6                     	endif
  9233  0022D6  0009               	tblrd		*+
  9234  0022D8  CFF5 F117          	movff	tablat,___ftmul@f2
  9235  0022DC  0009               	tblrd		*+
  9236  0022DE  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9237  0022E2  000A               	tblrd		*-
  9238  0022E4  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9239  0022E8  0E00               	movlw	0
  9240  0022EA  0101               	movlb	1	; () banked
  9241  0022EC  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9242  0022EE  0E64               	movlw	100
  9243  0022F0  6F08               	movwf	___awdiv@divisor& (0+255),b
  9244  0022F2  C12C  F106         	movff	fround@prec,___awdiv@dividend
  9245  0022F6  0101               	movlb	1	; () banked
  9246  0022F8  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  9247  0022FA  ECC6  F027         	call	___awdiv	;wreg free
  9248  0022FE  0E12               	movlw	18
  9249  002300  0101               	movlb	1	; () banked
  9250  002302  2506               	addwf	?___awdiv& (0+255),w,b
  9251  002304  0101               	movlb	1	; () banked
  9252  002306  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9253  002308  0E00               	movlw	0
  9254  00230A  0101               	movlb	1	; () banked
  9255  00230C  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9256  00230E  0101               	movlb	1	; () banked
  9257  002310  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9258  002312  0E00               	movlw	0
  9259  002314  0101               	movlb	1	; () banked
  9260  002316  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9261  002318  0E03               	movlw	3
  9262  00231A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9263  00231C  EC8B  F034         	call	___wmul	;wreg free
  9264  002320  0E5D               	movlw	low __npowers_
  9265  002322  0101               	movlb	1	; () banked
  9266  002324  250E               	addwf	?___wmul& (0+255),w,b
  9267  002326  6EF6               	movwf	tblptrl,c
  9268  002328  0E7D               	movlw	high __npowers_
  9269  00232A  0101               	movlb	1	; () banked
  9270  00232C  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9271  00232E  6EF7               	movwf	tblptrh,c
  9272  002330                     	if	0	;There are less than 3 active tblptr bytes
  9273  002330                     	endif
  9274  002330  0009               	tblrd		*+
  9275  002332  CFF5 F114          	movff	tablat,___ftmul@f1
  9276  002336  0009               	tblrd		*+
  9277  002338  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9278  00233C  000A               	tblrd		*-
  9279  00233E  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9280  002342  EC06  F01A         	call	___ftmul	;wreg free
  9281  002346  C114  F129         	movff	?___ftmul,_fround$2992
  9282  00234A  C115  F12A         	movff	?___ftmul+1,_fround$2992+1
  9283  00234E  C116  F12B         	movff	?___ftmul+2,_fround$2992+2
  9284                           
  9285                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9286  002352  0E00               	movlw	0
  9287  002354  0101               	movlb	1	; () banked
  9288  002356  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9289  002358  0E03               	movlw	3
  9290  00235A  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9291  00235C  0E00               	movlw	0
  9292  00235E  0101               	movlb	1	; () banked
  9293  002360  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9294  002362  0E0A               	movlw	10
  9295  002364  6F02               	movwf	___awmod@divisor& (0+255),b
  9296  002366  C12C  F100         	movff	fround@prec,___awmod@dividend
  9297  00236A  0101               	movlb	1	; () banked
  9298  00236C  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9299  00236E  ECF7  F02A         	call	___awmod	;wreg free
  9300  002372  C100  F10E         	movff	?___awmod,___wmul@multiplier
  9301  002376  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  9302  00237A  EC8B  F034         	call	___wmul	;wreg free
  9303  00237E  0E5D               	movlw	low __npowers_
  9304  002380  0101               	movlb	1	; () banked
  9305  002382  250E               	addwf	?___wmul& (0+255),w,b
  9306  002384  6EF6               	movwf	tblptrl,c
  9307  002386  0E7D               	movlw	high __npowers_
  9308  002388  0101               	movlb	1	; () banked
  9309  00238A  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9310  00238C  6EF7               	movwf	tblptrh,c
  9311  00238E                     	if	0	;There are less than 3 active tblptr bytes
  9312  00238E                     	endif
  9313  00238E  0009               	tblrd		*+
  9314  002390  CFF5 F117          	movff	tablat,___ftmul@f2
  9315  002394  0009               	tblrd		*+
  9316  002396  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9317  00239A  000A               	tblrd		*-
  9318  00239C  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9319  0023A0  C129  F114         	movff	_fround$2992,___ftmul@f1
  9320  0023A4  C12A  F115         	movff	_fround$2992+1,___ftmul@f1+1
  9321  0023A8  C12B  F116         	movff	_fround$2992+2,___ftmul@f1+2
  9322  0023AC  EC06  F01A         	call	___ftmul	;wreg free
  9323  0023B0  C114  F126         	movff	?___ftmul,_fround$2993
  9324  0023B4  C115  F127         	movff	?___ftmul+1,_fround$2993+1
  9325  0023B8  C116  F128         	movff	?___ftmul+2,_fround$2993+2
  9326                           
  9327                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  9328  0023BC  C126  F114         	movff	_fround$2993,___ftmul@f1
  9329  0023C0  C127  F115         	movff	_fround$2993+1,___ftmul@f1+1
  9330  0023C4  C128  F116         	movff	_fround$2993+2,___ftmul@f1+2
  9331  0023C8  0E00               	movlw	0
  9332  0023CA  0101               	movlb	1	; () banked
  9333  0023CC  6F17               	movwf	___ftmul@f2& (0+255),b
  9334  0023CE  0E00               	movlw	0
  9335  0023D0  0101               	movlb	1	; () banked
  9336  0023D2  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9337  0023D4  0E3F               	movlw	63
  9338  0023D6  0101               	movlb	1	; () banked
  9339  0023D8  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9340  0023DA  EC06  F01A         	call	___ftmul	;wreg free
  9341  0023DE  C114  F123         	movff	?___ftmul,?_fround
  9342  0023E2  C115  F124         	movff	?___ftmul+1,?_fround+1
  9343  0023E6  C116  F125         	movff	?___ftmul+2,?_fround+2
  9344  0023EA  0012               	return	
  9345  0023EC                     l9653:
  9346                           
  9347                           ;doprnt.c: 415: else if(prec > 10)
  9348  0023EC  0E0A               	movlw	10
  9349  0023EE  0101               	movlb	1	; () banked
  9350  0023F0  652C               	cpfsgt	fround@prec& (0+255),b
  9351  0023F2  D06E               	goto	l9661
  9352                           
  9353                           ; BSR set to: 1
  9354                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9355  0023F4  0E00               	movlw	0
  9356  0023F6  0101               	movlb	1	; () banked
  9357  0023F8  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9358  0023FA  0E03               	movlw	3
  9359  0023FC  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9360  0023FE  0E00               	movlw	0
  9361  002400  0101               	movlb	1	; () banked
  9362  002402  6F03               	movwf	(___awmod@divisor+1)& (0+255),b
  9363  002404  0E0A               	movlw	10
  9364  002406  6F02               	movwf	___awmod@divisor& (0+255),b
  9365  002408  C12C  F100         	movff	fround@prec,___awmod@dividend
  9366  00240C  0101               	movlb	1	; () banked
  9367  00240E  6B01               	clrf	(___awmod@dividend+1)& (0+255),b
  9368  002410  ECF7  F02A         	call	___awmod	;wreg free
  9369  002414  C100  F10E         	movff	?___awmod,___wmul@multiplier
  9370  002418  C101  F10F         	movff	?___awmod+1,___wmul@multiplier+1
  9371  00241C  EC8B  F034         	call	___wmul	;wreg free
  9372  002420  0E5D               	movlw	low __npowers_
  9373  002422  0101               	movlb	1	; () banked
  9374  002424  250E               	addwf	?___wmul& (0+255),w,b
  9375  002426  6EF6               	movwf	tblptrl,c
  9376  002428  0E7D               	movlw	high __npowers_
  9377  00242A  0101               	movlb	1	; () banked
  9378  00242C  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9379  00242E  6EF7               	movwf	tblptrh,c
  9380  002430                     	if	0	;There are less than 3 active tblptr bytes
  9381  002430                     	endif
  9382  002430  0009               	tblrd		*+
  9383  002432  CFF5 F117          	movff	tablat,___ftmul@f2
  9384  002436  0009               	tblrd		*+
  9385  002438  CFF5 F118          	movff	tablat,___ftmul@f2+1
  9386  00243C  000A               	tblrd		*-
  9387  00243E  CFF5 F119          	movff	tablat,___ftmul@f2+2
  9388  002442  0E00               	movlw	0
  9389  002444  0101               	movlb	1	; () banked
  9390  002446  6F09               	movwf	(___awdiv@divisor+1)& (0+255),b
  9391  002448  0E0A               	movlw	10
  9392  00244A  6F08               	movwf	___awdiv@divisor& (0+255),b
  9393  00244C  C12C  F106         	movff	fround@prec,___awdiv@dividend
  9394  002450  0101               	movlb	1	; () banked
  9395  002452  6B07               	clrf	(___awdiv@dividend+1)& (0+255),b
  9396  002454  ECC6  F027         	call	___awdiv	;wreg free
  9397  002458  0E09               	movlw	9
  9398  00245A  0101               	movlb	1	; () banked
  9399  00245C  2506               	addwf	?___awdiv& (0+255),w,b
  9400  00245E  0101               	movlb	1	; () banked
  9401  002460  6F0E               	movwf	___wmul@multiplier& (0+255),b
  9402  002462  0E00               	movlw	0
  9403  002464  0101               	movlb	1	; () banked
  9404  002466  2107               	addwfc	(?___awdiv+1)& (0+255),w,b
  9405  002468  0101               	movlb	1	; () banked
  9406  00246A  6F0F               	movwf	(___wmul@multiplier+1)& (0+255),b
  9407  00246C  0E00               	movlw	0
  9408  00246E  0101               	movlb	1	; () banked
  9409  002470  6F11               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9410  002472  0E03               	movlw	3
  9411  002474  6F10               	movwf	___wmul@multiplicand& (0+255),b
  9412  002476  EC8B  F034         	call	___wmul	;wreg free
  9413  00247A  0E5D               	movlw	low __npowers_
  9414  00247C  0101               	movlb	1	; () banked
  9415  00247E  250E               	addwf	?___wmul& (0+255),w,b
  9416  002480  6EF6               	movwf	tblptrl,c
  9417  002482  0E7D               	movlw	high __npowers_
  9418  002484  0101               	movlb	1	; () banked
  9419  002486  210F               	addwfc	(?___wmul+1)& (0+255),w,b
  9420  002488  6EF7               	movwf	tblptrh,c
  9421  00248A                     	if	0	;There are less than 3 active tblptr bytes
  9422  00248A                     	endif
  9423  00248A  0009               	tblrd		*+
  9424  00248C  CFF5 F114          	movff	tablat,___ftmul@f1
  9425  002490  0009               	tblrd		*+
  9426  002492  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9427  002496  000A               	tblrd		*-
  9428  002498  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9429  00249C  EC06  F01A         	call	___ftmul	;wreg free
  9430  0024A0  C114  F129         	movff	?___ftmul,_fround$2992
  9431  0024A4  C115  F12A         	movff	?___ftmul+1,_fround$2992+1
  9432  0024A8  C116  F12B         	movff	?___ftmul+2,_fround$2992+2
  9433                           
  9434                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  9435  0024AC  C129  F114         	movff	_fround$2992,___ftmul@f1
  9436  0024B0  C12A  F115         	movff	_fround$2992+1,___ftmul@f1+1
  9437  0024B4  C12B  F116         	movff	_fround$2992+2,___ftmul@f1+2
  9438  0024B8  0E00               	movlw	0
  9439  0024BA  0101               	movlb	1	; () banked
  9440  0024BC  6F17               	movwf	___ftmul@f2& (0+255),b
  9441  0024BE  0E00               	movlw	0
  9442  0024C0  0101               	movlb	1	; () banked
  9443  0024C2  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9444  0024C4  0E3F               	movlw	63
  9445  0024C6  0101               	movlb	1	; () banked
  9446  0024C8  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9447  0024CA  EC06  F01A         	call	___ftmul	;wreg free
  9448  0024CE  D787               	goto	L5
  9449  0024D0                     l9661:
  9450                           
  9451                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  9452  0024D0  0101               	movlb	1	; () banked
  9453  0024D2  512C               	movf	fround@prec& (0+255),w,b
  9454  0024D4  0D03               	mullw	3
  9455  0024D6  0E5D               	movlw	low __npowers_
  9456  0024D8  24F3               	addwf	prodl,w,c
  9457  0024DA  6EF6               	movwf	tblptrl,c
  9458  0024DC  0E7D               	movlw	high __npowers_
  9459  0024DE  20F4               	addwfc	prodh,w,c
  9460  0024E0  6EF7               	movwf	tblptrh,c
  9461  0024E2                     	if	0	;There are less than 3 active tblptr bytes
  9462  0024E2                     	endif
  9463  0024E2  0009               	tblrd		*+
  9464  0024E4  CFF5 F114          	movff	tablat,___ftmul@f1
  9465  0024E8  0009               	tblrd		*+
  9466  0024EA  CFF5 F115          	movff	tablat,___ftmul@f1+1
  9467  0024EE  000A               	tblrd		*-
  9468  0024F0  CFF5 F116          	movff	tablat,___ftmul@f1+2
  9469  0024F4  0E00               	movlw	0
  9470  0024F6  0101               	movlb	1	; () banked
  9471  0024F8  6F17               	movwf	___ftmul@f2& (0+255),b
  9472  0024FA  0E00               	movlw	0
  9473  0024FC  0101               	movlb	1	; () banked
  9474  0024FE  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
  9475  002500  0E3F               	movlw	63
  9476  002502  0101               	movlb	1	; () banked
  9477  002504  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
  9478  002506  EC06  F01A         	call	___ftmul	;wreg free
  9479  00250A  C114  F123         	movff	?___ftmul,?_fround
  9480  00250E  C115  F124         	movff	?___ftmul+1,?_fround+1
  9481  002512  C116  F125         	movff	?___ftmul+2,?_fround+2
  9482  002516  0012               	return	
  9483  002518                     __end_of_fround:
  9484                           	opt stack 0
  9485                           tblptru	equ	0xFF8
  9486                           tblptrh	equ	0xFF7
  9487                           tblptrl	equ	0xFF6
  9488                           tablat	equ	0xFF5
  9489                           prodh	equ	0xFF4
  9490                           prodl	equ	0xFF3
  9491                           intcon	equ	0xFF2
  9492                           postinc0	equ	0xFEE
  9493                           wreg	equ	0xFE8
  9494                           postdec1	equ	0xFE5
  9495                           fsr1l	equ	0xFE1
  9496                           indf2	equ	0xFDF
  9497                           postinc2	equ	0xFDE
  9498                           postdec2	equ	0xFDD
  9499                           fsr2h	equ	0xFDA
  9500                           fsr2l	equ	0xFD9
  9501                           status	equ	0xFD8
  9502                           
  9503 ;; *************** function ___wmul *****************
  9504 ;; Defined at:
  9505 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul16.c"
  9506 ;; Parameters:    Size  Location     Type
  9507 ;;  multiplier      2   14[BANK1 ] unsigned int 
  9508 ;;  multiplicand    2   16[BANK1 ] unsigned int 
  9509 ;; Auto vars:     Size  Location     Type
  9510 ;;  product         2   18[BANK1 ] unsigned int 
  9511 ;; Return value:  Size  Location     Type
  9512 ;;                  2   14[BANK1 ] unsigned int 
  9513 ;; Registers used:
  9514 ;;		wreg, status,2, status,0, prodl, prodh
  9515 ;; Tracked objects:
  9516 ;;		On entry : 0/0
  9517 ;;		On exit  : 0/0
  9518 ;;		Unchanged: 0/0
  9519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9520 ;;      Params:         0       0       4       0       0       0       0
  9521 ;;      Locals:         0       0       2       0       0       0       0
  9522 ;;      Temps:          0       0       0       0       0       0       0
  9523 ;;      Totals:         0       0       6       0       0       0       0
  9524 ;;Total ram usage:        6 bytes
  9525 ;; Hardware stack levels used:    1
  9526 ;; Hardware stack levels required when called:   12
  9527 ;; This function calls:
  9528 ;;		Nothing
  9529 ;; This function is called by:
  9530 ;;		_fround
  9531 ;;		_scale
  9532 ;;		_printf
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           	psect	text32
  9537  006916                     __ptext32:
  9538                           	opt stack 0
  9539  006916                     ___wmul:
  9540                           	opt stack 14
  9541                           
  9542                           ;incstack = 0
  9543  006916  0101               	movlb	1	; () banked
  9544  006918  510E               	movf	___wmul@multiplier& (0+255),w,b
  9545  00691A  0101               	movlb	1	; () banked
  9546  00691C  0310               	mulwf	___wmul@multiplicand& (0+255),b
  9547  00691E  CFF3 F112          	movff	prodl,___wmul@product
  9548  006922  CFF4 F113          	movff	prodh,___wmul@product+1
  9549  006926  0101               	movlb	1	; () banked
  9550  006928  510E               	movf	___wmul@multiplier& (0+255),w,b
  9551  00692A  0101               	movlb	1	; () banked
  9552  00692C  0311               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9553  00692E  50F3               	movf	prodl,w,c
  9554  006930  0101               	movlb	1	; () banked
  9555  006932  2713               	addwf	(___wmul@product+1)& (0+255),f,b
  9556  006934  0101               	movlb	1	; () banked
  9557  006936  510F               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9558  006938  0101               	movlb	1	; () banked
  9559  00693A  0310               	mulwf	___wmul@multiplicand& (0+255),b
  9560  00693C  50F3               	movf	prodl,w,c
  9561  00693E  0101               	movlb	1	; () banked
  9562  006940  2713               	addwf	(___wmul@product+1)& (0+255),f,b
  9563                           
  9564                           ; BSR set to: 1
  9565  006942  C112  F10E         	movff	___wmul@product,?___wmul
  9566  006946  C113  F10F         	movff	___wmul@product+1,?___wmul+1
  9567  00694A  0012               	return	
  9568  00694C                     __end_of___wmul:
  9569                           	opt stack 0
  9570                           tblptru	equ	0xFF8
  9571                           tblptrh	equ	0xFF7
  9572                           tblptrl	equ	0xFF6
  9573                           tablat	equ	0xFF5
  9574                           prodh	equ	0xFF4
  9575                           prodl	equ	0xFF3
  9576                           intcon	equ	0xFF2
  9577                           postinc0	equ	0xFEE
  9578                           wreg	equ	0xFE8
  9579                           postdec1	equ	0xFE5
  9580                           fsr1l	equ	0xFE1
  9581                           indf2	equ	0xFDF
  9582                           postinc2	equ	0xFDE
  9583                           postdec2	equ	0xFDD
  9584                           fsr2h	equ	0xFDA
  9585                           fsr2l	equ	0xFD9
  9586                           status	equ	0xFD8
  9587                           
  9588 ;; *************** function ___awmod *****************
  9589 ;; Defined at:
  9590 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awmod.c"
  9591 ;; Parameters:    Size  Location     Type
  9592 ;;  dividend        2    0[BANK1 ] int 
  9593 ;;  divisor         2    2[BANK1 ] int 
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;  sign            1    5[BANK1 ] unsigned char 
  9596 ;;  counter         1    4[BANK1 ] unsigned char 
  9597 ;; Return value:  Size  Location     Type
  9598 ;;                  2    0[BANK1 ] int 
  9599 ;; Registers used:
  9600 ;;		wreg, status,2, status,0
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/0
  9603 ;;		On exit  : 0/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9606 ;;      Params:         0       0       4       0       0       0       0
  9607 ;;      Locals:         0       0       2       0       0       0       0
  9608 ;;      Temps:          0       0       0       0       0       0       0
  9609 ;;      Totals:         0       0       6       0       0       0       0
  9610 ;;Total ram usage:        6 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:   12
  9613 ;; This function calls:
  9614 ;;		Nothing
  9615 ;; This function is called by:
  9616 ;;		_fround
  9617 ;;		_scale
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621                           	psect	text33
  9622  0055EE                     __ptext33:
  9623                           	opt stack 0
  9624  0055EE                     ___awmod:
  9625                           	opt stack 14
  9626                           
  9627                           ; BSR set to: 1
  9628                           ;incstack = 0
  9629  0055EE  0E00               	movlw	0
  9630  0055F0  0101               	movlb	1	; () banked
  9631  0055F2  6F05               	movwf	___awmod@sign& (0+255),b
  9632                           
  9633                           ; BSR set to: 1
  9634  0055F4  0101               	movlb	1	; () banked
  9635  0055F6  AF01               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9636  0055F8  D008               	goto	l9503
  9637                           
  9638                           ; BSR set to: 1
  9639  0055FA  0101               	movlb	1	; () banked
  9640  0055FC  6D00               	negf	___awmod@dividend& (0+255),b
  9641  0055FE  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
  9642  005600  B0D8               	btfsc	status,0,c
  9643  005602  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
  9644                           
  9645                           ; BSR set to: 1
  9646  005604  0E01               	movlw	1
  9647  005606  0101               	movlb	1	; () banked
  9648  005608  6F05               	movwf	___awmod@sign& (0+255),b
  9649  00560A                     l9503:
  9650                           
  9651                           ; BSR set to: 1
  9652  00560A  0101               	movlb	1	; () banked
  9653  00560C  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9654  00560E  D005               	goto	l9507
  9655                           
  9656                           ; BSR set to: 1
  9657  005610  0101               	movlb	1	; () banked
  9658  005612  6D02               	negf	___awmod@divisor& (0+255),b
  9659  005614  1F03               	comf	(___awmod@divisor+1)& (0+255),f,b
  9660  005616  B0D8               	btfsc	status,0,c
  9661  005618  2B03               	incf	(___awmod@divisor+1)& (0+255),f,b
  9662  00561A                     l9507:
  9663                           
  9664                           ; BSR set to: 1
  9665  00561A  0101               	movlb	1	; () banked
  9666  00561C  5102               	movf	___awmod@divisor& (0+255),w,b
  9667  00561E  0101               	movlb	1	; () banked
  9668  005620  1103               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9669  005622  B4D8               	btfsc	status,2,c
  9670  005624  D026               	goto	l9523
  9671                           
  9672                           ; BSR set to: 1
  9673  005626  0E01               	movlw	1
  9674  005628  0101               	movlb	1	; () banked
  9675  00562A  6F04               	movwf	___awmod@counter& (0+255),b
  9676  00562C  D006               	goto	l9513
  9677  00562E                     l9511:
  9678                           
  9679                           ; BSR set to: 1
  9680  00562E  0101               	movlb	1	; () banked
  9681  005630  90D8               	bcf	status,0,c
  9682  005632  3702               	rlcf	___awmod@divisor& (0+255),f,b
  9683  005634  3703               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9684  005636  0101               	movlb	1	; () banked
  9685  005638  2B04               	incf	___awmod@counter& (0+255),f,b
  9686  00563A                     l9513:
  9687                           
  9688                           ; BSR set to: 1
  9689  00563A  0101               	movlb	1	; () banked
  9690  00563C  AF03               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9691  00563E  D7F7               	goto	l9511
  9692  005640                     l9515:
  9693                           
  9694                           ; BSR set to: 1
  9695  005640  0101               	movlb	1	; () banked
  9696  005642  5102               	movf	___awmod@divisor& (0+255),w,b
  9697  005644  0101               	movlb	1	; () banked
  9698  005646  5D00               	subwf	___awmod@dividend& (0+255),w,b
  9699  005648  0101               	movlb	1	; () banked
  9700  00564A  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
  9701  00564C  0101               	movlb	1	; () banked
  9702  00564E  5901               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9703  005650  A0D8               	btfss	status,0,c
  9704  005652  D008               	goto	l9519
  9705                           
  9706                           ; BSR set to: 1
  9707  005654  0101               	movlb	1	; () banked
  9708  005656  5102               	movf	___awmod@divisor& (0+255),w,b
  9709  005658  0101               	movlb	1	; () banked
  9710  00565A  5F00               	subwf	___awmod@dividend& (0+255),f,b
  9711  00565C  0101               	movlb	1	; () banked
  9712  00565E  5103               	movf	(___awmod@divisor+1)& (0+255),w,b
  9713  005660  0101               	movlb	1	; () banked
  9714  005662  5B01               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9715  005664                     l9519:
  9716                           
  9717                           ; BSR set to: 1
  9718  005664  0101               	movlb	1	; () banked
  9719  005666  90D8               	bcf	status,0,c
  9720  005668  3303               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9721  00566A  3302               	rrcf	___awmod@divisor& (0+255),f,b
  9722                           
  9723                           ; BSR set to: 1
  9724  00566C  0101               	movlb	1	; () banked
  9725  00566E  2F04               	decfsz	___awmod@counter& (0+255),f,b
  9726  005670  D7E7               	goto	l9515
  9727  005672                     l9523:
  9728                           
  9729                           ; BSR set to: 1
  9730  005672  0101               	movlb	1	; () banked
  9731  005674  5105               	movf	___awmod@sign& (0+255),w,b
  9732  005676  0101               	movlb	1	; () banked
  9733  005678  B4D8               	btfsc	status,2,c
  9734  00567A  D005               	goto	l9527
  9735                           
  9736                           ; BSR set to: 1
  9737  00567C  0101               	movlb	1	; () banked
  9738  00567E  6D00               	negf	___awmod@dividend& (0+255),b
  9739  005680  1F01               	comf	(___awmod@dividend+1)& (0+255),f,b
  9740  005682  B0D8               	btfsc	status,0,c
  9741  005684  2B01               	incf	(___awmod@dividend+1)& (0+255),f,b
  9742  005686                     l9527:
  9743                           
  9744                           ; BSR set to: 1
  9745  005686  C100  F100         	movff	___awmod@dividend,?___awmod
  9746  00568A  C101  F101         	movff	___awmod@dividend+1,?___awmod+1
  9747  00568E  0012               	return	
  9748  005690                     __end_of___awmod:
  9749                           	opt stack 0
  9750                           tblptru	equ	0xFF8
  9751                           tblptrh	equ	0xFF7
  9752                           tblptrl	equ	0xFF6
  9753                           tablat	equ	0xFF5
  9754                           prodh	equ	0xFF4
  9755                           prodl	equ	0xFF3
  9756                           intcon	equ	0xFF2
  9757                           postinc0	equ	0xFEE
  9758                           wreg	equ	0xFE8
  9759                           postdec1	equ	0xFE5
  9760                           fsr1l	equ	0xFE1
  9761                           indf2	equ	0xFDF
  9762                           postinc2	equ	0xFDE
  9763                           postdec2	equ	0xFDD
  9764                           fsr2h	equ	0xFDA
  9765                           fsr2l	equ	0xFD9
  9766                           status	equ	0xFD8
  9767                           
  9768 ;; *************** function ___awdiv *****************
  9769 ;; Defined at:
  9770 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\awdiv.c"
  9771 ;; Parameters:    Size  Location     Type
  9772 ;;  dividend        2    6[BANK1 ] int 
  9773 ;;  divisor         2    8[BANK1 ] int 
  9774 ;; Auto vars:     Size  Location     Type
  9775 ;;  quotient        2   12[BANK1 ] int 
  9776 ;;  sign            1   11[BANK1 ] unsigned char 
  9777 ;;  counter         1   10[BANK1 ] unsigned char 
  9778 ;; Return value:  Size  Location     Type
  9779 ;;                  2    6[BANK1 ] int 
  9780 ;; Registers used:
  9781 ;;		wreg, status,2, status,0
  9782 ;; Tracked objects:
  9783 ;;		On entry : 0/0
  9784 ;;		On exit  : 0/0
  9785 ;;		Unchanged: 0/0
  9786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9787 ;;      Params:         0       0       4       0       0       0       0
  9788 ;;      Locals:         0       0       4       0       0       0       0
  9789 ;;      Temps:          0       0       0       0       0       0       0
  9790 ;;      Totals:         0       0       8       0       0       0       0
  9791 ;;Total ram usage:        8 bytes
  9792 ;; Hardware stack levels used:    1
  9793 ;; Hardware stack levels required when called:   12
  9794 ;; This function calls:
  9795 ;;		Nothing
  9796 ;; This function is called by:
  9797 ;;		_fround
  9798 ;;		_scale
  9799 ;;		_printf
  9800 ;; This function uses a non-reentrant model
  9801 ;;
  9802                           
  9803                           	psect	text34
  9804  004F8C                     __ptext34:
  9805                           	opt stack 0
  9806  004F8C                     ___awdiv:
  9807                           	opt stack 14
  9808                           
  9809                           ; BSR set to: 1
  9810                           ;incstack = 0
  9811  004F8C  0E00               	movlw	0
  9812  004F8E  0101               	movlb	1	; () banked
  9813  004F90  6F0B               	movwf	___awdiv@sign& (0+255),b
  9814                           
  9815                           ; BSR set to: 1
  9816  004F92  0101               	movlb	1	; () banked
  9817  004F94  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9818  004F96  D008               	goto	l9459
  9819                           
  9820                           ; BSR set to: 1
  9821  004F98  0101               	movlb	1	; () banked
  9822  004F9A  6D08               	negf	___awdiv@divisor& (0+255),b
  9823  004F9C  1F09               	comf	(___awdiv@divisor+1)& (0+255),f,b
  9824  004F9E  B0D8               	btfsc	status,0,c
  9825  004FA0  2B09               	incf	(___awdiv@divisor+1)& (0+255),f,b
  9826                           
  9827                           ; BSR set to: 1
  9828  004FA2  0E01               	movlw	1
  9829  004FA4  0101               	movlb	1	; () banked
  9830  004FA6  6F0B               	movwf	___awdiv@sign& (0+255),b
  9831  004FA8                     l9459:
  9832                           
  9833                           ; BSR set to: 1
  9834  004FA8  0101               	movlb	1	; () banked
  9835  004FAA  AF07               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  9836  004FAC  D008               	goto	l9465
  9837                           
  9838                           ; BSR set to: 1
  9839  004FAE  0101               	movlb	1	; () banked
  9840  004FB0  6D06               	negf	___awdiv@dividend& (0+255),b
  9841  004FB2  1F07               	comf	(___awdiv@dividend+1)& (0+255),f,b
  9842  004FB4  B0D8               	btfsc	status,0,c
  9843  004FB6  2B07               	incf	(___awdiv@dividend+1)& (0+255),f,b
  9844                           
  9845                           ; BSR set to: 1
  9846  004FB8  0E01               	movlw	1
  9847  004FBA  0101               	movlb	1	; () banked
  9848  004FBC  1B0B               	xorwf	___awdiv@sign& (0+255),f,b
  9849  004FBE                     l9465:
  9850                           
  9851                           ; BSR set to: 1
  9852  004FBE  0E00               	movlw	0
  9853  004FC0  0101               	movlb	1	; () banked
  9854  004FC2  6F0D               	movwf	(___awdiv@quotient+1)& (0+255),b
  9855  004FC4  0E00               	movlw	0
  9856  004FC6  6F0C               	movwf	___awdiv@quotient& (0+255),b
  9857                           
  9858                           ; BSR set to: 1
  9859  004FC8  0101               	movlb	1	; () banked
  9860  004FCA  5108               	movf	___awdiv@divisor& (0+255),w,b
  9861  004FCC  0101               	movlb	1	; () banked
  9862  004FCE  1109               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  9863  004FD0  B4D8               	btfsc	status,2,c
  9864  004FD2  D02C               	goto	l9487
  9865                           
  9866                           ; BSR set to: 1
  9867  004FD4  0E01               	movlw	1
  9868  004FD6  0101               	movlb	1	; () banked
  9869  004FD8  6F0A               	movwf	___awdiv@counter& (0+255),b
  9870  004FDA  D006               	goto	l9473
  9871  004FDC                     l9471:
  9872                           
  9873                           ; BSR set to: 1
  9874  004FDC  0101               	movlb	1	; () banked
  9875  004FDE  90D8               	bcf	status,0,c
  9876  004FE0  3708               	rlcf	___awdiv@divisor& (0+255),f,b
  9877  004FE2  3709               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  9878  004FE4  0101               	movlb	1	; () banked
  9879  004FE6  2B0A               	incf	___awdiv@counter& (0+255),f,b
  9880  004FE8                     l9473:
  9881                           
  9882                           ; BSR set to: 1
  9883  004FE8  0101               	movlb	1	; () banked
  9884  004FEA  AF09               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  9885  004FEC  D7F7               	goto	l9471
  9886  004FEE                     l9475:
  9887                           
  9888                           ; BSR set to: 1
  9889  004FEE  0101               	movlb	1	; () banked
  9890  004FF0  90D8               	bcf	status,0,c
  9891  004FF2  370C               	rlcf	___awdiv@quotient& (0+255),f,b
  9892  004FF4  370D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  9893                           
  9894                           ; BSR set to: 1
  9895  004FF6  0101               	movlb	1	; () banked
  9896  004FF8  5108               	movf	___awdiv@divisor& (0+255),w,b
  9897  004FFA  0101               	movlb	1	; () banked
  9898  004FFC  5D06               	subwf	___awdiv@dividend& (0+255),w,b
  9899  004FFE  0101               	movlb	1	; () banked
  9900  005000  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9901  005002  0101               	movlb	1	; () banked
  9902  005004  5907               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  9903  005006  A0D8               	btfss	status,0,c
  9904  005008  D00A               	goto	l9483
  9905                           
  9906                           ; BSR set to: 1
  9907  00500A  0101               	movlb	1	; () banked
  9908  00500C  5108               	movf	___awdiv@divisor& (0+255),w,b
  9909  00500E  0101               	movlb	1	; () banked
  9910  005010  5F06               	subwf	___awdiv@dividend& (0+255),f,b
  9911  005012  0101               	movlb	1	; () banked
  9912  005014  5109               	movf	(___awdiv@divisor+1)& (0+255),w,b
  9913  005016  0101               	movlb	1	; () banked
  9914  005018  5B07               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  9915                           
  9916                           ; BSR set to: 1
  9917  00501A  0101               	movlb	1	; () banked
  9918  00501C  810C               	bsf	___awdiv@quotient& (0+255),0,b
  9919  00501E                     l9483:
  9920                           
  9921                           ; BSR set to: 1
  9922  00501E  0101               	movlb	1	; () banked
  9923  005020  90D8               	bcf	status,0,c
  9924  005022  3309               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  9925  005024  3308               	rrcf	___awdiv@divisor& (0+255),f,b
  9926                           
  9927                           ; BSR set to: 1
  9928  005026  0101               	movlb	1	; () banked
  9929  005028  2F0A               	decfsz	___awdiv@counter& (0+255),f,b
  9930  00502A  D7E1               	goto	l9475
  9931  00502C                     l9487:
  9932                           
  9933                           ; BSR set to: 1
  9934  00502C  0101               	movlb	1	; () banked
  9935  00502E  510B               	movf	___awdiv@sign& (0+255),w,b
  9936  005030  0101               	movlb	1	; () banked
  9937  005032  B4D8               	btfsc	status,2,c
  9938  005034  D005               	goto	l9491
  9939                           
  9940                           ; BSR set to: 1
  9941  005036  0101               	movlb	1	; () banked
  9942  005038  6D0C               	negf	___awdiv@quotient& (0+255),b
  9943  00503A  1F0D               	comf	(___awdiv@quotient+1)& (0+255),f,b
  9944  00503C  B0D8               	btfsc	status,0,c
  9945  00503E  2B0D               	incf	(___awdiv@quotient+1)& (0+255),f,b
  9946  005040                     l9491:
  9947                           
  9948                           ; BSR set to: 1
  9949  005040  C10C  F106         	movff	___awdiv@quotient,?___awdiv
  9950  005044  C10D  F107         	movff	___awdiv@quotient+1,?___awdiv+1
  9951  005048  0012               	return	
  9952  00504A                     __end_of___awdiv:
  9953                           	opt stack 0
  9954                           tblptru	equ	0xFF8
  9955                           tblptrh	equ	0xFF7
  9956                           tblptrl	equ	0xFF6
  9957                           tablat	equ	0xFF5
  9958                           prodh	equ	0xFF4
  9959                           prodl	equ	0xFF3
  9960                           intcon	equ	0xFF2
  9961                           postinc0	equ	0xFEE
  9962                           wreg	equ	0xFE8
  9963                           postdec1	equ	0xFE5
  9964                           fsr1l	equ	0xFE1
  9965                           indf2	equ	0xFDF
  9966                           postinc2	equ	0xFDE
  9967                           postdec2	equ	0xFDD
  9968                           fsr2h	equ	0xFDA
  9969                           fsr2l	equ	0xFD9
  9970                           status	equ	0xFD8
  9971                           
  9972 ;; *************** function __tdiv_to_l_ *****************
  9973 ;; Defined at:
  9974 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdivl.c"
  9975 ;; Parameters:    Size  Location     Type
  9976 ;;  f1              3    0[BANK1 ] float 
  9977 ;;  f2              3    3[BANK1 ] float 
  9978 ;; Auto vars:     Size  Location     Type
  9979 ;;  quot            4    9[BANK1 ] unsigned long 
  9980 ;;  exp1            1   14[BANK1 ] unsigned char 
  9981 ;;  cntr            1   13[BANK1 ] unsigned char 
  9982 ;; Return value:  Size  Location     Type
  9983 ;;                  4    0[BANK1 ] unsigned long 
  9984 ;; Registers used:
  9985 ;;		wreg, status,2, status,0
  9986 ;; Tracked objects:
  9987 ;;		On entry : 0/0
  9988 ;;		On exit  : 0/0
  9989 ;;		Unchanged: 0/0
  9990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9991 ;;      Params:         0       0       6       0       0       0       0
  9992 ;;      Locals:         0       0       6       0       0       0       0
  9993 ;;      Temps:          0       0       3       0       0       0       0
  9994 ;;      Totals:         0       0      15       0       0       0       0
  9995 ;;Total ram usage:       15 bytes
  9996 ;; Hardware stack levels used:    1
  9997 ;; Hardware stack levels required when called:   12
  9998 ;; This function calls:
  9999 ;;		Nothing
 10000 ;; This function is called by:
 10001 ;;		_printf
 10002 ;; This function uses a non-reentrant model
 10003 ;;
 10004                           
 10005                           	psect	text35
 10006  002F4C                     __ptext35:
 10007                           	opt stack 0
 10008  002F4C                     __tdiv_to_l_:
 10009                           	opt stack 15
 10010                           
 10011                           ; BSR set to: 1
 10012                           ;incstack = 0
 10013  002F4C  C102  F106         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 10014  002F50  0101               	movlb	1	; () banked
 10015  002F52  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10016  002F54  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10017  002F56  0101               	movlb	1	; () banked
 10018  002F58  3501               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10019  002F5A  0101               	movlb	1	; () banked
 10020  002F5C  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10021  002F5E  E301               	bnc	u13791
 10022  002F60  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10023  002F62                     u13791:
 10024  002F62  0101               	movlb	1	; () banked
 10025  002F64  5106               	movf	??__tdiv_to_l_& (0+255),w,b
 10026  002F66  0101               	movlb	1	; () banked
 10027  002F68  6F0E               	movwf	__tdiv_to_l_@exp1& (0+255),b
 10028  002F6A  0101               	movlb	1	; () banked
 10029  002F6C  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10030  002F6E  A4D8               	btfss	status,2,c
 10031  002F70  D00A               	goto	l9721
 10032                           
 10033                           ; BSR set to: 1
 10034  002F72  0E00               	movlw	0
 10035  002F74  0101               	movlb	1	; () banked
 10036  002F76  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10037  002F78  0E00               	movlw	0
 10038  002F7A  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10039  002F7C  0E00               	movlw	0
 10040  002F7E  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10041  002F80  0E00               	movlw	0
 10042  002F82  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10043                           
 10044                           ; BSR set to: 1
 10045  002F84  0012               	return	
 10046  002F86                     l9721:
 10047                           
 10048                           ; BSR set to: 1
 10049  002F86  C105  F106         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 10050  002F8A  0101               	movlb	1	; () banked
 10051  002F8C  6B07               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 10052  002F8E  6B08               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 10053  002F90  0101               	movlb	1	; () banked
 10054  002F92  3504               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10055  002F94  0101               	movlb	1	; () banked
 10056  002F96  3706               	rlcf	??__tdiv_to_l_& (0+255),f,b
 10057  002F98  E301               	bnc	u13811
 10058  002F9A  8107               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 10059  002F9C                     u13811:
 10060  002F9C  0101               	movlb	1	; () banked
 10061  002F9E  5106               	movf	??__tdiv_to_l_& (0+255),w,b
 10062  002FA0  0101               	movlb	1	; () banked
 10063  002FA2  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10064  002FA4  0101               	movlb	1	; () banked
 10065  002FA6  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 10066  002FA8  A4D8               	btfss	status,2,c
 10067  002FAA  D00A               	goto	l9727
 10068                           
 10069                           ; BSR set to: 1
 10070  002FAC  0E00               	movlw	0
 10071  002FAE  0101               	movlb	1	; () banked
 10072  002FB0  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10073  002FB2  0E00               	movlw	0
 10074  002FB4  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10075  002FB6  0E00               	movlw	0
 10076  002FB8  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10077  002FBA  0E00               	movlw	0
 10078  002FBC  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10079                           
 10080                           ; BSR set to: 1
 10081  002FBE  0012               	return	
 10082  002FC0                     l9727:
 10083                           
 10084                           ; BSR set to: 1
 10085  002FC0  0101               	movlb	1	; () banked
 10086  002FC2  8F01               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
 10087                           
 10088                           ; BSR set to: 1
 10089  002FC4  0EFF               	movlw	255
 10090  002FC6  0101               	movlb	1	; () banked
 10091  002FC8  1700               	andwf	__tdiv_to_l_@f1& (0+255),f,b
 10092  002FCA  0EFF               	movlw	255
 10093  002FCC  0101               	movlb	1	; () banked
 10094  002FCE  1701               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10095  002FD0  0E00               	movlw	0
 10096  002FD2  0101               	movlb	1	; () banked
 10097  002FD4  1702               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10098  002FD6  0101               	movlb	1	; () banked
 10099  002FD8  8F04               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
 10100                           
 10101                           ; BSR set to: 1
 10102  002FDA  0EFF               	movlw	255
 10103  002FDC  0101               	movlb	1	; () banked
 10104  002FDE  1703               	andwf	__tdiv_to_l_@f2& (0+255),f,b
 10105  002FE0  0EFF               	movlw	255
 10106  002FE2  0101               	movlb	1	; () banked
 10107  002FE4  1704               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
 10108  002FE6  0E00               	movlw	0
 10109  002FE8  0101               	movlb	1	; () banked
 10110  002FEA  1705               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
 10111                           
 10112                           ; BSR set to: 1
 10113  002FEC  0E00               	movlw	0
 10114  002FEE  0101               	movlb	1	; () banked
 10115  002FF0  6F09               	movwf	__tdiv_to_l_@quot& (0+255),b
 10116  002FF2  0E00               	movlw	0
 10117  002FF4  6F0A               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
 10118  002FF6  0E00               	movlw	0
 10119  002FF8  6F0B               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
 10120  002FFA  0E00               	movlw	0
 10121  002FFC  6F0C               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
 10122                           
 10123                           ; BSR set to: 1
 10124  002FFE  0E7F               	movlw	127
 10125  003000  0101               	movlb	1	; () banked
 10126  003002  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10127                           
 10128                           ; BSR set to: 1
 10129  003004  0101               	movlb	1	; () banked
 10130  003006  510D               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 10131  003008  0F98               	addlw	152
 10132  00300A  0101               	movlb	1	; () banked
 10133  00300C  5F0E               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 10134                           
 10135                           ; BSR set to: 1
 10136  00300E  0E18               	movlw	24
 10137  003010  0101               	movlb	1	; () banked
 10138  003012  6F0D               	movwf	__tdiv_to_l_@cntr& (0+255),b
 10139  003014                     l1329:
 10140                           
 10141                           ; BSR set to: 1
 10142  003014  0101               	movlb	1	; () banked
 10143  003016  90D8               	bcf	status,0,c
 10144  003018  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 10145  00301A  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10146  00301C  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10147  00301E  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10148                           
 10149                           ; BSR set to: 1
 10150  003020  0101               	movlb	1	; () banked
 10151  003022  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10152  003024  0101               	movlb	1	; () banked
 10153  003026  5D00               	subwf	__tdiv_to_l_@f1& (0+255),w,b
 10154  003028  0101               	movlb	1	; () banked
 10155  00302A  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10156  00302C  0101               	movlb	1	; () banked
 10157  00302E  5901               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
 10158  003030  0101               	movlb	1	; () banked
 10159  003032  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10160  003034  0101               	movlb	1	; () banked
 10161  003036  5902               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
 10162  003038  A0D8               	btfss	status,0,c
 10163  00303A  D00E               	goto	l1330
 10164                           
 10165                           ; BSR set to: 1
 10166  00303C  0101               	movlb	1	; () banked
 10167  00303E  5103               	movf	__tdiv_to_l_@f2& (0+255),w,b
 10168  003040  0101               	movlb	1	; () banked
 10169  003042  5F00               	subwf	__tdiv_to_l_@f1& (0+255),f,b
 10170  003044  0101               	movlb	1	; () banked
 10171  003046  5104               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 10172  003048  0101               	movlb	1	; () banked
 10173  00304A  5B01               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10174  00304C  0101               	movlb	1	; () banked
 10175  00304E  5105               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 10176  003050  0101               	movlb	1	; () banked
 10177  003052  5B02               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10178                           
 10179                           ; BSR set to: 1
 10180  003054  0101               	movlb	1	; () banked
 10181  003056  8109               	bsf	__tdiv_to_l_@quot& (0+255),0,b
 10182  003058                     l1330:
 10183                           
 10184                           ; BSR set to: 1
 10185  003058  0101               	movlb	1	; () banked
 10186  00305A  90D8               	bcf	status,0,c
 10187  00305C  3700               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
 10188  00305E  3701               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 10189  003060  3702               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 10190                           
 10191                           ; BSR set to: 1
 10192  003062  0101               	movlb	1	; () banked
 10193  003064  2F0D               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
 10194  003066  D7D6               	goto	l1329
 10195                           
 10196                           ; BSR set to: 1
 10197                           
 10198                           ; BSR set to: 1
 10199  003068  0101               	movlb	1	; () banked
 10200  00306A  AF0E               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
 10201  00306C  D01A               	goto	l9761
 10202                           
 10203                           ; BSR set to: 1
 10204  00306E  0101               	movlb	1	; () banked
 10205  003070  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10206  003072  0A80               	xorlw	128
 10207  003074  0F97               	addlw	151
 10208  003076  B0D8               	btfsc	status,0,c
 10209  003078  D00A               	goto	l9757
 10210                           
 10211                           ; BSR set to: 1
 10212  00307A  0E00               	movlw	0
 10213  00307C  0101               	movlb	1	; () banked
 10214  00307E  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10215  003080  0E00               	movlw	0
 10216  003082  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10217  003084  0E00               	movlw	0
 10218  003086  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10219  003088  0E00               	movlw	0
 10220  00308A  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10221                           
 10222                           ; BSR set to: 1
 10223  00308C  0012               	return	
 10224  00308E                     l9757:
 10225                           
 10226                           ; BSR set to: 1
 10227  00308E  0101               	movlb	1	; () banked
 10228  003090  90D8               	bcf	status,0,c
 10229  003092  330C               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10230  003094  330B               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10231  003096  330A               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10232  003098  3309               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
 10233                           
 10234                           ; BSR set to: 1
 10235  00309A  0101               	movlb	1	; () banked
 10236  00309C  3F0E               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
 10237  00309E  D7F7               	goto	l9757
 10238                           
 10239                           ; BSR set to: 1
 10240  0030A0  D01B               	goto	l1336
 10241  0030A2                     l9761:
 10242                           
 10243                           ; BSR set to: 1
 10244  0030A2  0E17               	movlw	23
 10245  0030A4  0101               	movlb	1	; () banked
 10246  0030A6  650E               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
 10247  0030A8  D012               	goto	l9769
 10248                           
 10249                           ; BSR set to: 1
 10250  0030AA  0E00               	movlw	0
 10251  0030AC  0101               	movlb	1	; () banked
 10252  0030AE  6F00               	movwf	?__tdiv_to_l_& (0+255),b
 10253  0030B0  0E00               	movlw	0
 10254  0030B2  6F01               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 10255  0030B4  0E00               	movlw	0
 10256  0030B6  6F02               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 10257  0030B8  0E00               	movlw	0
 10258  0030BA  6F03               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 10259                           
 10260                           ; BSR set to: 1
 10261  0030BC  0012               	return	
 10262  0030BE                     l9767:
 10263                           
 10264                           ; BSR set to: 1
 10265  0030BE  0101               	movlb	1	; () banked
 10266  0030C0  90D8               	bcf	status,0,c
 10267  0030C2  3709               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 10268  0030C4  370A               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 10269  0030C6  370B               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 10270  0030C8  370C               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 10271  0030CA  0101               	movlb	1	; () banked
 10272  0030CC  070E               	decf	__tdiv_to_l_@exp1& (0+255),f,b
 10273  0030CE                     l9769:
 10274                           
 10275                           ; BSR set to: 1
 10276  0030CE  0101               	movlb	1	; () banked
 10277  0030D0  510E               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 10278  0030D2  0101               	movlb	1	; () banked
 10279  0030D4  A4D8               	btfss	status,2,c
 10280  0030D6  D7F3               	goto	l9767
 10281  0030D8                     l1336:
 10282                           
 10283                           ; BSR set to: 1
 10284  0030D8  C109  F100         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 10285  0030DC  C10A  F101         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 10286  0030E0  C10B  F102         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 10287  0030E4  C10C  F103         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 10288                           
 10289                           ; BSR set to: 1
 10290  0030E8  0012               	return		;funcret
 10291  0030EA                     __end_of__tdiv_to_l_:
 10292                           	opt stack 0
 10293                           tblptru	equ	0xFF8
 10294                           tblptrh	equ	0xFF7
 10295                           tblptrl	equ	0xFF6
 10296                           tablat	equ	0xFF5
 10297                           prodh	equ	0xFF4
 10298                           prodl	equ	0xFF3
 10299                           intcon	equ	0xFF2
 10300                           postinc0	equ	0xFEE
 10301                           wreg	equ	0xFE8
 10302                           postdec1	equ	0xFE5
 10303                           fsr1l	equ	0xFE1
 10304                           indf2	equ	0xFDF
 10305                           postinc2	equ	0xFDE
 10306                           postdec2	equ	0xFDD
 10307                           fsr2h	equ	0xFDA
 10308                           fsr2l	equ	0xFD9
 10309                           status	equ	0xFD8
 10310                           
 10311 ;; *************** function __div_to_l_ *****************
 10312 ;; Defined at:
 10313 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fldivl.c"
 10314 ;; Parameters:    Size  Location     Type
 10315 ;;  f1              3    0[BANK1 ] unsigned long 
 10316 ;;  f2              3    3[BANK1 ] unsigned long 
 10317 ;; Auto vars:     Size  Location     Type
 10318 ;;  quot            4    6[BANK1 ] unsigned long 
 10319 ;;  exp1            1   11[BANK1 ] unsigned char 
 10320 ;;  cntr            1   10[BANK1 ] unsigned char 
 10321 ;; Return value:  Size  Location     Type
 10322 ;;                  4    0[BANK1 ] unsigned long 
 10323 ;; Registers used:
 10324 ;;		wreg, status,2, status,0
 10325 ;; Tracked objects:
 10326 ;;		On entry : 0/0
 10327 ;;		On exit  : 0/0
 10328 ;;		Unchanged: 0/0
 10329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10330 ;;      Params:         0       0       6       0       0       0       0
 10331 ;;      Locals:         0       0       6       0       0       0       0
 10332 ;;      Temps:          0       0       0       0       0       0       0
 10333 ;;      Totals:         0       0      12       0       0       0       0
 10334 ;;Total ram usage:       12 bytes
 10335 ;; Hardware stack levels used:    1
 10336 ;; Hardware stack levels required when called:   12
 10337 ;; This function calls:
 10338 ;;		Nothing
 10339 ;; This function is called by:
 10340 ;;		_printf
 10341 ;; This function uses a non-reentrant model
 10342 ;;
 10343                           
 10344                           	psect	text36
 10345  003284                     __ptext36:
 10346                           	opt stack 0
 10347  003284                     __div_to_l_:
 10348                           	opt stack 15
 10349                           
 10350                           ; BSR set to: 1
 10351                           ;incstack = 0
 10352  003284  0101               	movlb	1	; () banked
 10353  003286  3502               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
 10354  003288  3503               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
 10355  00328A  0101               	movlb	1	; () banked
 10356  00328C  6F0B               	movwf	__div_to_l_@exp1& (0+255),b
 10357  00328E  0101               	movlb	1	; () banked
 10358  003290  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10359  003292  A4D8               	btfss	status,2,c
 10360  003294  D00A               	goto	l9777
 10361                           
 10362                           ; BSR set to: 1
 10363  003296  0E00               	movlw	0
 10364  003298  0101               	movlb	1	; () banked
 10365  00329A  6F00               	movwf	?__div_to_l_& (0+255),b
 10366  00329C  0E00               	movlw	0
 10367  00329E  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10368  0032A0  0E00               	movlw	0
 10369  0032A2  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10370  0032A4  0E00               	movlw	0
 10371  0032A6  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10372                           
 10373                           ; BSR set to: 1
 10374  0032A8  0012               	return	
 10375  0032AA                     l9777:
 10376                           
 10377                           ; BSR set to: 1
 10378  0032AA  0101               	movlb	1	; () banked
 10379  0032AC  3505               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
 10380  0032AE  3506               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
 10381  0032B0  0101               	movlb	1	; () banked
 10382  0032B2  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
 10383  0032B4  0101               	movlb	1	; () banked
 10384  0032B6  510A               	movf	__div_to_l_@cntr& (0+255),w,b
 10385  0032B8  A4D8               	btfss	status,2,c
 10386  0032BA  D00A               	goto	l9783
 10387                           
 10388                           ; BSR set to: 1
 10389  0032BC  0E00               	movlw	0
 10390  0032BE  0101               	movlb	1	; () banked
 10391  0032C0  6F00               	movwf	?__div_to_l_& (0+255),b
 10392  0032C2  0E00               	movlw	0
 10393  0032C4  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10394  0032C6  0E00               	movlw	0
 10395  0032C8  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10396  0032CA  0E00               	movlw	0
 10397  0032CC  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10398                           
 10399                           ; BSR set to: 1
 10400  0032CE  0012               	return	
 10401  0032D0                     l9783:
 10402                           
 10403                           ; BSR set to: 1
 10404  0032D0  0101               	movlb	1	; () banked
 10405  0032D2  8F02               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
 10406                           
 10407                           ; BSR set to: 1
 10408  0032D4  0EFF               	movlw	255
 10409  0032D6  0101               	movlb	1	; () banked
 10410  0032D8  1700               	andwf	__div_to_l_@f1& (0+255),f,b
 10411  0032DA  0EFF               	movlw	255
 10412  0032DC  1701               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
 10413  0032DE  0EFF               	movlw	255
 10414  0032E0  1702               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
 10415  0032E2  0E00               	movlw	0
 10416  0032E4  1703               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
 10417                           
 10418                           ; BSR set to: 1
 10419  0032E6  0101               	movlb	1	; () banked
 10420  0032E8  8F05               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
 10421  0032EA  0EFF               	movlw	255
 10422  0032EC  0101               	movlb	1	; () banked
 10423  0032EE  1703               	andwf	__div_to_l_@f2& (0+255),f,b
 10424  0032F0  0EFF               	movlw	255
 10425  0032F2  1704               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
 10426  0032F4  0EFF               	movlw	255
 10427  0032F6  1705               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
 10428  0032F8  0E00               	movlw	0
 10429  0032FA  1706               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
 10430                           
 10431                           ; BSR set to: 1
 10432  0032FC  0E00               	movlw	0
 10433  0032FE  0101               	movlb	1	; () banked
 10434  003300  6F06               	movwf	__div_to_l_@quot& (0+255),b
 10435  003302  0E00               	movlw	0
 10436  003304  6F07               	movwf	(__div_to_l_@quot+1)& (0+255),b
 10437  003306  0E00               	movlw	0
 10438  003308  6F08               	movwf	(__div_to_l_@quot+2)& (0+255),b
 10439  00330A  0E00               	movlw	0
 10440  00330C  6F09               	movwf	(__div_to_l_@quot+3)& (0+255),b
 10441                           
 10442                           ; BSR set to: 1
 10443  00330E  0E7F               	movlw	127
 10444  003310  0101               	movlb	1	; () banked
 10445  003312  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
 10446                           
 10447                           ; BSR set to: 1
 10448  003314  0101               	movlb	1	; () banked
 10449  003316  510A               	movf	__div_to_l_@cntr& (0+255),w,b
 10450  003318  0FA0               	addlw	160
 10451  00331A  0101               	movlb	1	; () banked
 10452  00331C  5F0B               	subwf	__div_to_l_@exp1& (0+255),f,b
 10453                           
 10454                           ; BSR set to: 1
 10455  00331E  0E20               	movlw	32
 10456  003320  0101               	movlb	1	; () banked
 10457  003322  6F0A               	movwf	__div_to_l_@cntr& (0+255),b
 10458  003324                     l9797:
 10459                           
 10460                           ; BSR set to: 1
 10461  003324  0101               	movlb	1	; () banked
 10462  003326  90D8               	bcf	status,0,c
 10463  003328  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
 10464  00332A  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 10465  00332C  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 10466  00332E  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 10467                           
 10468                           ; BSR set to: 1
 10469  003330  0101               	movlb	1	; () banked
 10470  003332  5103               	movf	__div_to_l_@f2& (0+255),w,b
 10471  003334  0101               	movlb	1	; () banked
 10472  003336  5D00               	subwf	__div_to_l_@f1& (0+255),w,b
 10473  003338  0101               	movlb	1	; () banked
 10474  00333A  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 10475  00333C  0101               	movlb	1	; () banked
 10476  00333E  5901               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
 10477  003340  0101               	movlb	1	; () banked
 10478  003342  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 10479  003344  0101               	movlb	1	; () banked
 10480  003346  5902               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
 10481  003348  0101               	movlb	1	; () banked
 10482  00334A  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 10483  00334C  0101               	movlb	1	; () banked
 10484  00334E  5903               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
 10485  003350  A0D8               	btfss	status,0,c
 10486  003352  D012               	goto	l9805
 10487                           
 10488                           ; BSR set to: 1
 10489  003354  0101               	movlb	1	; () banked
 10490  003356  5103               	movf	__div_to_l_@f2& (0+255),w,b
 10491  003358  0101               	movlb	1	; () banked
 10492  00335A  5F00               	subwf	__div_to_l_@f1& (0+255),f,b
 10493  00335C  0101               	movlb	1	; () banked
 10494  00335E  5104               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 10495  003360  0101               	movlb	1	; () banked
 10496  003362  5B01               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
 10497  003364  0101               	movlb	1	; () banked
 10498  003366  5105               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 10499  003368  0101               	movlb	1	; () banked
 10500  00336A  5B02               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
 10501  00336C  0101               	movlb	1	; () banked
 10502  00336E  5106               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 10503  003370  0101               	movlb	1	; () banked
 10504  003372  5B03               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
 10505                           
 10506                           ; BSR set to: 1
 10507  003374  0101               	movlb	1	; () banked
 10508  003376  8106               	bsf	__div_to_l_@quot& (0+255),0,b
 10509  003378                     l9805:
 10510                           
 10511                           ; BSR set to: 1
 10512  003378  0101               	movlb	1	; () banked
 10513  00337A  90D8               	bcf	status,0,c
 10514  00337C  3700               	rlcf	__div_to_l_@f1& (0+255),f,b
 10515  00337E  3701               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
 10516  003380  3702               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
 10517  003382  3703               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
 10518                           
 10519                           ; BSR set to: 1
 10520  003384  0101               	movlb	1	; () banked
 10521  003386  2F0A               	decfsz	__div_to_l_@cntr& (0+255),f,b
 10522  003388  D7CD               	goto	l9797
 10523                           
 10524                           ; BSR set to: 1
 10525                           
 10526                           ; BSR set to: 1
 10527  00338A  0101               	movlb	1	; () banked
 10528  00338C  AF0B               	btfss	__div_to_l_@exp1& (0+255),7,b
 10529  00338E  D01A               	goto	l9821
 10530                           
 10531                           ; BSR set to: 1
 10532  003390  0101               	movlb	1	; () banked
 10533  003392  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10534  003394  0A80               	xorlw	128
 10535  003396  0F9F               	addlw	159
 10536  003398  B0D8               	btfsc	status,0,c
 10537  00339A  D00A               	goto	l9817
 10538                           
 10539                           ; BSR set to: 1
 10540  00339C  0E00               	movlw	0
 10541  00339E  0101               	movlb	1	; () banked
 10542  0033A0  6F00               	movwf	?__div_to_l_& (0+255),b
 10543  0033A2  0E00               	movlw	0
 10544  0033A4  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10545  0033A6  0E00               	movlw	0
 10546  0033A8  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10547  0033AA  0E00               	movlw	0
 10548  0033AC  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10549                           
 10550                           ; BSR set to: 1
 10551  0033AE  0012               	return	
 10552  0033B0                     l9817:
 10553                           
 10554                           ; BSR set to: 1
 10555  0033B0  0101               	movlb	1	; () banked
 10556  0033B2  90D8               	bcf	status,0,c
 10557  0033B4  3309               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
 10558  0033B6  3308               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
 10559  0033B8  3307               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
 10560  0033BA  3306               	rrcf	__div_to_l_@quot& (0+255),f,b
 10561                           
 10562                           ; BSR set to: 1
 10563  0033BC  0101               	movlb	1	; () banked
 10564  0033BE  3F0B               	incfsz	__div_to_l_@exp1& (0+255),f,b
 10565  0033C0  D7F7               	goto	l9817
 10566                           
 10567                           ; BSR set to: 1
 10568  0033C2  D01B               	goto	l1232
 10569  0033C4                     l9821:
 10570                           
 10571                           ; BSR set to: 1
 10572  0033C4  0E1F               	movlw	31
 10573  0033C6  0101               	movlb	1	; () banked
 10574  0033C8  650B               	cpfsgt	__div_to_l_@exp1& (0+255),b
 10575  0033CA  D012               	goto	l9829
 10576                           
 10577                           ; BSR set to: 1
 10578  0033CC  0E00               	movlw	0
 10579  0033CE  0101               	movlb	1	; () banked
 10580  0033D0  6F00               	movwf	?__div_to_l_& (0+255),b
 10581  0033D2  0E00               	movlw	0
 10582  0033D4  6F01               	movwf	(?__div_to_l_+1)& (0+255),b
 10583  0033D6  0E00               	movlw	0
 10584  0033D8  6F02               	movwf	(?__div_to_l_+2)& (0+255),b
 10585  0033DA  0E00               	movlw	0
 10586  0033DC  6F03               	movwf	(?__div_to_l_+3)& (0+255),b
 10587                           
 10588                           ; BSR set to: 1
 10589  0033DE  0012               	return	
 10590  0033E0                     l9827:
 10591                           
 10592                           ; BSR set to: 1
 10593  0033E0  0101               	movlb	1	; () banked
 10594  0033E2  90D8               	bcf	status,0,c
 10595  0033E4  3706               	rlcf	__div_to_l_@quot& (0+255),f,b
 10596  0033E6  3707               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 10597  0033E8  3708               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 10598  0033EA  3709               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 10599  0033EC  0101               	movlb	1	; () banked
 10600  0033EE  070B               	decf	__div_to_l_@exp1& (0+255),f,b
 10601  0033F0                     l9829:
 10602                           
 10603                           ; BSR set to: 1
 10604  0033F0  0101               	movlb	1	; () banked
 10605  0033F2  510B               	movf	__div_to_l_@exp1& (0+255),w,b
 10606  0033F4  0101               	movlb	1	; () banked
 10607  0033F6  A4D8               	btfss	status,2,c
 10608  0033F8  D7F3               	goto	l9827
 10609  0033FA                     l1232:
 10610                           
 10611                           ; BSR set to: 1
 10612  0033FA  C106  F100         	movff	__div_to_l_@quot,?__div_to_l_
 10613  0033FE  C107  F101         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 10614  003402  C108  F102         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 10615  003406  C109  F103         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 10616                           
 10617                           ; BSR set to: 1
 10618  00340A  0012               	return		;funcret
 10619  00340C                     __end_of__div_to_l_:
 10620                           	opt stack 0
 10621                           tblptru	equ	0xFF8
 10622                           tblptrh	equ	0xFF7
 10623                           tblptrl	equ	0xFF6
 10624                           tablat	equ	0xFF5
 10625                           prodh	equ	0xFF4
 10626                           prodl	equ	0xFF3
 10627                           intcon	equ	0xFF2
 10628                           postinc0	equ	0xFEE
 10629                           wreg	equ	0xFE8
 10630                           postdec1	equ	0xFE5
 10631                           fsr1l	equ	0xFE1
 10632                           indf2	equ	0xFDF
 10633                           postinc2	equ	0xFDE
 10634                           postdec2	equ	0xFDD
 10635                           fsr2h	equ	0xFDA
 10636                           fsr2l	equ	0xFD9
 10637                           status	equ	0xFD8
 10638                           
 10639 ;; *************** function ___lltoft *****************
 10640 ;; Defined at:
 10641 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lltoft.c"
 10642 ;; Parameters:    Size  Location     Type
 10643 ;;  c               4    8[BANK1 ] unsigned long 
 10644 ;; Auto vars:     Size  Location     Type
 10645 ;;  exp             1   16[BANK1 ] unsigned char 
 10646 ;; Return value:  Size  Location     Type
 10647 ;;                  3    8[BANK1 ] float 
 10648 ;; Registers used:
 10649 ;;		wreg, status,2, status,0, cstack
 10650 ;; Tracked objects:
 10651 ;;		On entry : 0/0
 10652 ;;		On exit  : 0/0
 10653 ;;		Unchanged: 0/0
 10654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10655 ;;      Params:         0       0       4       0       0       0       0
 10656 ;;      Locals:         0       0       1       0       0       0       0
 10657 ;;      Temps:          0       0       4       0       0       0       0
 10658 ;;      Totals:         0       0       9       0       0       0       0
 10659 ;;Total ram usage:        9 bytes
 10660 ;; Hardware stack levels used:    1
 10661 ;; Hardware stack levels required when called:   13
 10662 ;; This function calls:
 10663 ;;		___ftpack
 10664 ;; This function is called by:
 10665 ;;		_printf
 10666 ;; This function uses a non-reentrant model
 10667 ;;
 10668                           
 10669                           	psect	text37
 10670  005F5E                     __ptext37:
 10671                           	opt stack 0
 10672  005F5E                     ___lltoft:
 10673                           	opt stack 14
 10674                           
 10675                           ; BSR set to: 1
 10676                           ;incstack = 0
 10677  005F5E  0E8E               	movlw	142
 10678  005F60  0101               	movlb	1	; () banked
 10679  005F62  6F10               	movwf	___lltoft@exp& (0+255),b
 10680  005F64  D008               	goto	l9903
 10681  005F66                     l9901:
 10682                           
 10683                           ; BSR set to: 1
 10684  005F66  0101               	movlb	1	; () banked
 10685  005F68  90D8               	bcf	status,0,c
 10686  005F6A  330B               	rrcf	(___lltoft@c+3)& (0+255),f,b
 10687  005F6C  330A               	rrcf	(___lltoft@c+2)& (0+255),f,b
 10688  005F6E  3309               	rrcf	(___lltoft@c+1)& (0+255),f,b
 10689  005F70  3308               	rrcf	___lltoft@c& (0+255),f,b
 10690  005F72  0101               	movlb	1	; () banked
 10691  005F74  2B10               	incf	___lltoft@exp& (0+255),f,b
 10692  005F76                     l9903:
 10693                           
 10694                           ; BSR set to: 1
 10695  005F76  0E00               	movlw	0
 10696  005F78  0101               	movlb	1	; () banked
 10697  005F7A  1508               	andwf	___lltoft@c& (0+255),w,b
 10698  005F7C  0101               	movlb	1	; () banked
 10699  005F7E  6F0C               	movwf	??___lltoft& (0+255),b
 10700  005F80  0E00               	movlw	0
 10701  005F82  0101               	movlb	1	; () banked
 10702  005F84  1509               	andwf	(___lltoft@c+1)& (0+255),w,b
 10703  005F86  0101               	movlb	1	; () banked
 10704  005F88  6F0D               	movwf	(??___lltoft+1)& (0+255),b
 10705  005F8A  0E00               	movlw	0
 10706  005F8C  0101               	movlb	1	; () banked
 10707  005F8E  150A               	andwf	(___lltoft@c+2)& (0+255),w,b
 10708  005F90  0101               	movlb	1	; () banked
 10709  005F92  6F0E               	movwf	(??___lltoft+2)& (0+255),b
 10710  005F94  0EFF               	movlw	255
 10711  005F96  0101               	movlb	1	; () banked
 10712  005F98  150B               	andwf	(___lltoft@c+3)& (0+255),w,b
 10713  005F9A  0101               	movlb	1	; () banked
 10714  005F9C  6F0F               	movwf	(??___lltoft+3)& (0+255),b
 10715  005F9E  0101               	movlb	1	; () banked
 10716  005FA0  510C               	movf	??___lltoft& (0+255),w,b
 10717  005FA2  0101               	movlb	1	; () banked
 10718  005FA4  110D               	iorwf	(??___lltoft+1)& (0+255),w,b
 10719  005FA6  0101               	movlb	1	; () banked
 10720  005FA8  110E               	iorwf	(??___lltoft+2)& (0+255),w,b
 10721  005FAA  0101               	movlb	1	; () banked
 10722  005FAC  110F               	iorwf	(??___lltoft+3)& (0+255),w,b
 10723  005FAE  A4D8               	btfss	status,2,c
 10724  005FB0  D7DA               	goto	l9901
 10725                           
 10726                           ; BSR set to: 1
 10727                           
 10728                           ; BSR set to: 1
 10729  005FB2  C108  F100         	movff	___lltoft@c,___ftpack@arg
 10730  005FB6  C109  F101         	movff	___lltoft@c+1,___ftpack@arg+1
 10731  005FBA  C10A  F102         	movff	___lltoft@c+2,___ftpack@arg+2
 10732  005FBE  C110  F103         	movff	___lltoft@exp,___ftpack@exp
 10733  005FC2  0E00               	movlw	0
 10734  005FC4  0101               	movlb	1	; () banked
 10735  005FC6  6F04               	movwf	___ftpack@sign& (0+255),b
 10736  005FC8  ECCC  F021         	call	___ftpack	;wreg free
 10737  005FCC  C100  F108         	movff	?___ftpack,?___lltoft
 10738  005FD0  C101  F109         	movff	?___ftpack+1,?___lltoft+1
 10739  005FD4  C102  F10A         	movff	?___ftpack+2,?___lltoft+2
 10740  005FD8  0012               	return	
 10741  005FDA                     __end_of___lltoft:
 10742                           	opt stack 0
 10743                           tblptru	equ	0xFF8
 10744                           tblptrh	equ	0xFF7
 10745                           tblptrl	equ	0xFF6
 10746                           tablat	equ	0xFF5
 10747                           prodh	equ	0xFF4
 10748                           prodl	equ	0xFF3
 10749                           intcon	equ	0xFF2
 10750                           postinc0	equ	0xFEE
 10751                           wreg	equ	0xFE8
 10752                           postdec1	equ	0xFE5
 10753                           fsr1l	equ	0xFE1
 10754                           indf2	equ	0xFDF
 10755                           postinc2	equ	0xFDE
 10756                           postdec2	equ	0xFDD
 10757                           fsr2h	equ	0xFDA
 10758                           fsr2l	equ	0xFD9
 10759                           status	equ	0xFD8
 10760                           
 10761 ;; *************** function ___llmod *****************
 10762 ;; Defined at:
 10763 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\llmod.c"
 10764 ;; Parameters:    Size  Location     Type
 10765 ;;  dividend        4   13[BANK1 ] unsigned long 
 10766 ;;  divisor         4   17[BANK1 ] unsigned long 
 10767 ;; Auto vars:     Size  Location     Type
 10768 ;;  counter         1   21[BANK1 ] unsigned char 
 10769 ;; Return value:  Size  Location     Type
 10770 ;;                  4   13[BANK1 ] unsigned long 
 10771 ;; Registers used:
 10772 ;;		wreg, status,2, status,0
 10773 ;; Tracked objects:
 10774 ;;		On entry : 0/0
 10775 ;;		On exit  : 0/0
 10776 ;;		Unchanged: 0/0
 10777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10778 ;;      Params:         0       0       8       0       0       0       0
 10779 ;;      Locals:         0       0       1       0       0       0       0
 10780 ;;      Temps:          0       0       0       0       0       0       0
 10781 ;;      Totals:         0       0       9       0       0       0       0
 10782 ;;Total ram usage:        9 bytes
 10783 ;; Hardware stack levels used:    1
 10784 ;; Hardware stack levels required when called:   12
 10785 ;; This function calls:
 10786 ;;		Nothing
 10787 ;; This function is called by:
 10788 ;;		_printf
 10789 ;; This function uses a non-reentrant model
 10790 ;;
 10791                           
 10792                           	psect	text38
 10793  005A44                     __ptext38:
 10794                           	opt stack 0
 10795  005A44                     ___llmod:
 10796                           	opt stack 15
 10797                           
 10798                           ;incstack = 0
 10799  005A44  0101               	movlb	1	; () banked
 10800  005A46  5111               	movf	___llmod@divisor& (0+255),w,b
 10801  005A48  0101               	movlb	1	; () banked
 10802  005A4A  1112               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 10803  005A4C  0101               	movlb	1	; () banked
 10804  005A4E  1113               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 10805  005A50  0101               	movlb	1	; () banked
 10806  005A52  1114               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 10807  005A54  B4D8               	btfsc	status,2,c
 10808  005A56  D03A               	goto	l1421
 10809                           
 10810                           ; BSR set to: 1
 10811  005A58  0E01               	movlw	1
 10812  005A5A  0101               	movlb	1	; () banked
 10813  005A5C  6F15               	movwf	___llmod@counter& (0+255),b
 10814  005A5E  D008               	goto	l9889
 10815  005A60                     l9887:
 10816                           
 10817                           ; BSR set to: 1
 10818  005A60  0101               	movlb	1	; () banked
 10819  005A62  90D8               	bcf	status,0,c
 10820  005A64  3711               	rlcf	___llmod@divisor& (0+255),f,b
 10821  005A66  3712               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 10822  005A68  3713               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 10823  005A6A  3714               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 10824  005A6C  0101               	movlb	1	; () banked
 10825  005A6E  2B15               	incf	___llmod@counter& (0+255),f,b
 10826  005A70                     l9889:
 10827                           
 10828                           ; BSR set to: 1
 10829  005A70  0101               	movlb	1	; () banked
 10830  005A72  AF14               	btfss	(___llmod@divisor+3)& (0+255),7,b
 10831  005A74  D7F5               	goto	l9887
 10832  005A76                     l9891:
 10833                           
 10834                           ; BSR set to: 1
 10835  005A76  0101               	movlb	1	; () banked
 10836  005A78  5111               	movf	___llmod@divisor& (0+255),w,b
 10837  005A7A  0101               	movlb	1	; () banked
 10838  005A7C  5D0D               	subwf	___llmod@dividend& (0+255),w,b
 10839  005A7E  0101               	movlb	1	; () banked
 10840  005A80  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
 10841  005A82  0101               	movlb	1	; () banked
 10842  005A84  590E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 10843  005A86  0101               	movlb	1	; () banked
 10844  005A88  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
 10845  005A8A  0101               	movlb	1	; () banked
 10846  005A8C  590F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 10847  005A8E  0101               	movlb	1	; () banked
 10848  005A90  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
 10849  005A92  0101               	movlb	1	; () banked
 10850  005A94  5910               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 10851  005A96  A0D8               	btfss	status,0,c
 10852  005A98  D010               	goto	l9895
 10853                           
 10854                           ; BSR set to: 1
 10855  005A9A  0101               	movlb	1	; () banked
 10856  005A9C  5111               	movf	___llmod@divisor& (0+255),w,b
 10857  005A9E  0101               	movlb	1	; () banked
 10858  005AA0  5F0D               	subwf	___llmod@dividend& (0+255),f,b
 10859  005AA2  0101               	movlb	1	; () banked
 10860  005AA4  5112               	movf	(___llmod@divisor+1)& (0+255),w,b
 10861  005AA6  0101               	movlb	1	; () banked
 10862  005AA8  5B0E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 10863  005AAA  0101               	movlb	1	; () banked
 10864  005AAC  5113               	movf	(___llmod@divisor+2)& (0+255),w,b
 10865  005AAE  0101               	movlb	1	; () banked
 10866  005AB0  5B0F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 10867  005AB2  0101               	movlb	1	; () banked
 10868  005AB4  5114               	movf	(___llmod@divisor+3)& (0+255),w,b
 10869  005AB6  0101               	movlb	1	; () banked
 10870  005AB8  5B10               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 10871  005ABA                     l9895:
 10872                           
 10873                           ; BSR set to: 1
 10874  005ABA  0101               	movlb	1	; () banked
 10875  005ABC  90D8               	bcf	status,0,c
 10876  005ABE  3314               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 10877  005AC0  3313               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 10878  005AC2  3312               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 10879  005AC4  3311               	rrcf	___llmod@divisor& (0+255),f,b
 10880                           
 10881                           ; BSR set to: 1
 10882  005AC6  0101               	movlb	1	; () banked
 10883  005AC8  2F15               	decfsz	___llmod@counter& (0+255),f,b
 10884  005ACA  D7D5               	goto	l9891
 10885  005ACC                     l1421:
 10886                           
 10887                           ; BSR set to: 1
 10888  005ACC  C10D  F10D         	movff	___llmod@dividend,?___llmod
 10889  005AD0  C10E  F10E         	movff	___llmod@dividend+1,?___llmod+1
 10890  005AD4  C10F  F10F         	movff	___llmod@dividend+2,?___llmod+2
 10891  005AD8  C110  F110         	movff	___llmod@dividend+3,?___llmod+3
 10892                           
 10893                           ; BSR set to: 1
 10894  005ADC  0012               	return		;funcret
 10895  005ADE                     __end_of___llmod:
 10896                           	opt stack 0
 10897                           tblptru	equ	0xFF8
 10898                           tblptrh	equ	0xFF7
 10899                           tblptrl	equ	0xFF6
 10900                           tablat	equ	0xFF5
 10901                           prodh	equ	0xFF4
 10902                           prodl	equ	0xFF3
 10903                           intcon	equ	0xFF2
 10904                           postinc0	equ	0xFEE
 10905                           wreg	equ	0xFE8
 10906                           postdec1	equ	0xFE5
 10907                           fsr1l	equ	0xFE1
 10908                           indf2	equ	0xFDF
 10909                           postinc2	equ	0xFDE
 10910                           postdec2	equ	0xFDD
 10911                           fsr2h	equ	0xFDA
 10912                           fsr2l	equ	0xFD9
 10913                           status	equ	0xFD8
 10914                           
 10915 ;; *************** function ___lldiv *****************
 10916 ;; Defined at:
 10917 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lldiv.c"
 10918 ;; Parameters:    Size  Location     Type
 10919 ;;  dividend        4    0[BANK1 ] unsigned long 
 10920 ;;  divisor         4    4[BANK1 ] unsigned long 
 10921 ;; Auto vars:     Size  Location     Type
 10922 ;;  quotient        4    8[BANK1 ] unsigned long 
 10923 ;;  counter         1   12[BANK1 ] unsigned char 
 10924 ;; Return value:  Size  Location     Type
 10925 ;;                  4    0[BANK1 ] unsigned long 
 10926 ;; Registers used:
 10927 ;;		wreg, status,2, status,0
 10928 ;; Tracked objects:
 10929 ;;		On entry : 0/0
 10930 ;;		On exit  : 0/0
 10931 ;;		Unchanged: 0/0
 10932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10933 ;;      Params:         0       0       8       0       0       0       0
 10934 ;;      Locals:         0       0       5       0       0       0       0
 10935 ;;      Temps:          0       0       0       0       0       0       0
 10936 ;;      Totals:         0       0      13       0       0       0       0
 10937 ;;Total ram usage:       13 bytes
 10938 ;; Hardware stack levels used:    1
 10939 ;; Hardware stack levels required when called:   12
 10940 ;; This function calls:
 10941 ;;		Nothing
 10942 ;; This function is called by:
 10943 ;;		_printf
 10944 ;; This function uses a non-reentrant model
 10945 ;;
 10946                           
 10947                           	psect	text39
 10948  005106                     __ptext39:
 10949                           	opt stack 0
 10950  005106                     ___lldiv:
 10951                           	opt stack 15
 10952                           
 10953                           ; BSR set to: 1
 10954                           ;incstack = 0
 10955  005106  0E00               	movlw	0
 10956  005108  0101               	movlb	1	; () banked
 10957  00510A  6F08               	movwf	___lldiv@quotient& (0+255),b
 10958  00510C  0E00               	movlw	0
 10959  00510E  6F09               	movwf	(___lldiv@quotient+1)& (0+255),b
 10960  005110  0E00               	movlw	0
 10961  005112  6F0A               	movwf	(___lldiv@quotient+2)& (0+255),b
 10962  005114  0E00               	movlw	0
 10963  005116  6F0B               	movwf	(___lldiv@quotient+3)& (0+255),b
 10964                           
 10965                           ; BSR set to: 1
 10966  005118  0101               	movlb	1	; () banked
 10967  00511A  5104               	movf	___lldiv@divisor& (0+255),w,b
 10968  00511C  0101               	movlb	1	; () banked
 10969  00511E  1105               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 10970  005120  0101               	movlb	1	; () banked
 10971  005122  1106               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 10972  005124  0101               	movlb	1	; () banked
 10973  005126  1107               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 10974  005128  B4D8               	btfsc	status,2,c
 10975  00512A  D042               	goto	l1411
 10976                           
 10977                           ; BSR set to: 1
 10978  00512C  0E01               	movlw	1
 10979  00512E  0101               	movlb	1	; () banked
 10980  005130  6F0C               	movwf	___lldiv@counter& (0+255),b
 10981  005132  D008               	goto	l9869
 10982  005134                     l9867:
 10983                           
 10984                           ; BSR set to: 1
 10985  005134  0101               	movlb	1	; () banked
 10986  005136  90D8               	bcf	status,0,c
 10987  005138  3704               	rlcf	___lldiv@divisor& (0+255),f,b
 10988  00513A  3705               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 10989  00513C  3706               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 10990  00513E  3707               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 10991  005140  0101               	movlb	1	; () banked
 10992  005142  2B0C               	incf	___lldiv@counter& (0+255),f,b
 10993  005144                     l9869:
 10994                           
 10995                           ; BSR set to: 1
 10996  005144  0101               	movlb	1	; () banked
 10997  005146  AF07               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 10998  005148  D7F5               	goto	l9867
 10999  00514A                     l9871:
 11000                           
 11001                           ; BSR set to: 1
 11002  00514A  0101               	movlb	1	; () banked
 11003  00514C  90D8               	bcf	status,0,c
 11004  00514E  3708               	rlcf	___lldiv@quotient& (0+255),f,b
 11005  005150  3709               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 11006  005152  370A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 11007  005154  370B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 11008                           
 11009                           ; BSR set to: 1
 11010  005156  0101               	movlb	1	; () banked
 11011  005158  5104               	movf	___lldiv@divisor& (0+255),w,b
 11012  00515A  0101               	movlb	1	; () banked
 11013  00515C  5D00               	subwf	___lldiv@dividend& (0+255),w,b
 11014  00515E  0101               	movlb	1	; () banked
 11015  005160  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11016  005162  0101               	movlb	1	; () banked
 11017  005164  5901               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 11018  005166  0101               	movlb	1	; () banked
 11019  005168  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11020  00516A  0101               	movlb	1	; () banked
 11021  00516C  5902               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 11022  00516E  0101               	movlb	1	; () banked
 11023  005170  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11024  005172  0101               	movlb	1	; () banked
 11025  005174  5903               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 11026  005176  A0D8               	btfss	status,0,c
 11027  005178  D012               	goto	l9879
 11028                           
 11029                           ; BSR set to: 1
 11030  00517A  0101               	movlb	1	; () banked
 11031  00517C  5104               	movf	___lldiv@divisor& (0+255),w,b
 11032  00517E  0101               	movlb	1	; () banked
 11033  005180  5F00               	subwf	___lldiv@dividend& (0+255),f,b
 11034  005182  0101               	movlb	1	; () banked
 11035  005184  5105               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11036  005186  0101               	movlb	1	; () banked
 11037  005188  5B01               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 11038  00518A  0101               	movlb	1	; () banked
 11039  00518C  5106               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11040  00518E  0101               	movlb	1	; () banked
 11041  005190  5B02               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 11042  005192  0101               	movlb	1	; () banked
 11043  005194  5107               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11044  005196  0101               	movlb	1	; () banked
 11045  005198  5B03               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 11046                           
 11047                           ; BSR set to: 1
 11048  00519A  0101               	movlb	1	; () banked
 11049  00519C  8108               	bsf	___lldiv@quotient& (0+255),0,b
 11050  00519E                     l9879:
 11051                           
 11052                           ; BSR set to: 1
 11053  00519E  0101               	movlb	1	; () banked
 11054  0051A0  90D8               	bcf	status,0,c
 11055  0051A2  3307               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 11056  0051A4  3306               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 11057  0051A6  3305               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 11058  0051A8  3304               	rrcf	___lldiv@divisor& (0+255),f,b
 11059                           
 11060                           ; BSR set to: 1
 11061  0051AA  0101               	movlb	1	; () banked
 11062  0051AC  2F0C               	decfsz	___lldiv@counter& (0+255),f,b
 11063  0051AE  D7CD               	goto	l9871
 11064  0051B0                     l1411:
 11065                           
 11066                           ; BSR set to: 1
 11067  0051B0  C108  F100         	movff	___lldiv@quotient,?___lldiv
 11068  0051B4  C109  F101         	movff	___lldiv@quotient+1,?___lldiv+1
 11069  0051B8  C10A  F102         	movff	___lldiv@quotient+2,?___lldiv+2
 11070  0051BC  C10B  F103         	movff	___lldiv@quotient+3,?___lldiv+3
 11071                           
 11072                           ; BSR set to: 1
 11073  0051C0  0012               	return		;funcret
 11074  0051C2                     __end_of___lldiv:
 11075                           	opt stack 0
 11076                           tblptru	equ	0xFF8
 11077                           tblptrh	equ	0xFF7
 11078                           tblptrl	equ	0xFF6
 11079                           tablat	equ	0xFF5
 11080                           prodh	equ	0xFF4
 11081                           prodl	equ	0xFF3
 11082                           intcon	equ	0xFF2
 11083                           postinc0	equ	0xFEE
 11084                           wreg	equ	0xFE8
 11085                           postdec1	equ	0xFE5
 11086                           fsr1l	equ	0xFE1
 11087                           indf2	equ	0xFDF
 11088                           postinc2	equ	0xFDE
 11089                           postdec2	equ	0xFDD
 11090                           fsr2h	equ	0xFDA
 11091                           fsr2l	equ	0xFD9
 11092                           status	equ	0xFD8
 11093                           
 11094 ;; *************** function ___ftsub *****************
 11095 ;; Defined at:
 11096 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftsub.c"
 11097 ;; Parameters:    Size  Location     Type
 11098 ;;  f1              3   57[BANK1 ] float 
 11099 ;;  f2              3   60[BANK1 ] float 
 11100 ;; Auto vars:     Size  Location     Type
 11101 ;;		None
 11102 ;; Return value:  Size  Location     Type
 11103 ;;                  3   57[BANK1 ] float 
 11104 ;; Registers used:
 11105 ;;		wreg, status,2, status,0, cstack
 11106 ;; Tracked objects:
 11107 ;;		On entry : 0/0
 11108 ;;		On exit  : 0/0
 11109 ;;		Unchanged: 0/0
 11110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11111 ;;      Params:         0       0       6       0       0       0       0
 11112 ;;      Locals:         0       0       0       0       0       0       0
 11113 ;;      Temps:          0       0       0       0       0       0       0
 11114 ;;      Totals:         0       0       6       0       0       0       0
 11115 ;;Total ram usage:        6 bytes
 11116 ;; Hardware stack levels used:    1
 11117 ;; Hardware stack levels required when called:   14
 11118 ;; This function calls:
 11119 ;;		___ftadd
 11120 ;; This function is called by:
 11121 ;;		_printf
 11122 ;; This function uses a non-reentrant model
 11123 ;;
 11124                           
 11125                           	psect	text40
 11126  0066EA                     __ptext40:
 11127                           	opt stack 0
 11128  0066EA                     ___ftsub:
 11129                           	opt stack 13
 11130                           
 11131                           ; BSR set to: 1
 11132                           ;incstack = 0
 11133  0066EA  0101               	movlb	1	; () banked
 11134  0066EC  513C               	movf	___ftsub@f2& (0+255),w,b
 11135  0066EE  0101               	movlb	1	; () banked
 11136  0066F0  113D               	iorwf	(___ftsub@f2+1)& (0+255),w,b
 11137  0066F2  0101               	movlb	1	; () banked
 11138  0066F4  113E               	iorwf	(___ftsub@f2+2)& (0+255),w,b
 11139  0066F6  B4D8               	btfsc	status,2,c
 11140  0066F8  D009               	goto	l9835
 11141                           
 11142                           ; BSR set to: 1
 11143  0066FA  0E00               	movlw	0
 11144  0066FC  0101               	movlb	1	; () banked
 11145  0066FE  1B3C               	xorwf	___ftsub@f2& (0+255),f,b
 11146  006700  0E00               	movlw	0
 11147  006702  0101               	movlb	1	; () banked
 11148  006704  1B3D               	xorwf	(___ftsub@f2+1)& (0+255),f,b
 11149  006706  0E80               	movlw	128
 11150  006708  0101               	movlb	1	; () banked
 11151  00670A  1B3E               	xorwf	(___ftsub@f2+2)& (0+255),f,b
 11152  00670C                     l9835:
 11153                           
 11154                           ; BSR set to: 1
 11155  00670C  C139  F12D         	movff	___ftsub@f1,___ftadd@f1
 11156  006710  C13A  F12E         	movff	___ftsub@f1+1,___ftadd@f1+1
 11157  006714  C13B  F12F         	movff	___ftsub@f1+2,___ftadd@f1+2
 11158  006718  C13C  F130         	movff	___ftsub@f2,___ftadd@f2
 11159  00671C  C13D  F131         	movff	___ftsub@f2+1,___ftadd@f2+1
 11160  006720  C13E  F132         	movff	___ftsub@f2+2,___ftadd@f2+2
 11161  006724  EC8C  F012         	call	___ftadd	;wreg free
 11162  006728  C12D  F139         	movff	?___ftadd,?___ftsub
 11163  00672C  C12E  F13A         	movff	?___ftadd+1,?___ftsub+1
 11164  006730  C12F  F13B         	movff	?___ftadd+2,?___ftsub+2
 11165  006734  0012               	return	
 11166  006736                     __end_of___ftsub:
 11167                           	opt stack 0
 11168                           tblptru	equ	0xFF8
 11169                           tblptrh	equ	0xFF7
 11170                           tblptrl	equ	0xFF6
 11171                           tablat	equ	0xFF5
 11172                           prodh	equ	0xFF4
 11173                           prodl	equ	0xFF3
 11174                           intcon	equ	0xFF2
 11175                           postinc0	equ	0xFEE
 11176                           wreg	equ	0xFE8
 11177                           postdec1	equ	0xFE5
 11178                           fsr1l	equ	0xFE1
 11179                           indf2	equ	0xFDF
 11180                           postinc2	equ	0xFDE
 11181                           postdec2	equ	0xFDD
 11182                           fsr2h	equ	0xFDA
 11183                           fsr2l	equ	0xFD9
 11184                           status	equ	0xFD8
 11185                           
 11186 ;; *************** function ___ftneg *****************
 11187 ;; Defined at:
 11188 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftneg.c"
 11189 ;; Parameters:    Size  Location     Type
 11190 ;;  f1              3    0[BANK1 ] float 
 11191 ;; Auto vars:     Size  Location     Type
 11192 ;;		None
 11193 ;; Return value:  Size  Location     Type
 11194 ;;                  3    0[BANK1 ] float 
 11195 ;; Registers used:
 11196 ;;		wreg, status,2, status,0
 11197 ;; Tracked objects:
 11198 ;;		On entry : 0/0
 11199 ;;		On exit  : 0/0
 11200 ;;		Unchanged: 0/0
 11201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11202 ;;      Params:         0       0       3       0       0       0       0
 11203 ;;      Locals:         0       0       0       0       0       0       0
 11204 ;;      Temps:          0       0       0       0       0       0       0
 11205 ;;      Totals:         0       0       3       0       0       0       0
 11206 ;;Total ram usage:        3 bytes
 11207 ;; Hardware stack levels used:    1
 11208 ;; Hardware stack levels required when called:   12
 11209 ;; This function calls:
 11210 ;;		Nothing
 11211 ;; This function is called by:
 11212 ;;		_printf
 11213 ;; This function uses a non-reentrant model
 11214 ;;
 11215                           
 11216                           	psect	text41
 11217  006A12                     __ptext41:
 11218                           	opt stack 0
 11219  006A12                     ___ftneg:
 11220                           	opt stack 15
 11221                           
 11222                           ;incstack = 0
 11223  006A12  0101               	movlb	1	; () banked
 11224  006A14  5100               	movf	___ftneg@f1& (0+255),w,b
 11225  006A16  0101               	movlb	1	; () banked
 11226  006A18  1101               	iorwf	(___ftneg@f1+1)& (0+255),w,b
 11227  006A1A  0101               	movlb	1	; () banked
 11228  006A1C  1102               	iorwf	(___ftneg@f1+2)& (0+255),w,b
 11229  006A1E  B4D8               	btfsc	status,2,c
 11230  006A20  D009               	goto	l1361
 11231                           
 11232                           ; BSR set to: 1
 11233  006A22  0E00               	movlw	0
 11234  006A24  0101               	movlb	1	; () banked
 11235  006A26  1B00               	xorwf	___ftneg@f1& (0+255),f,b
 11236  006A28  0E00               	movlw	0
 11237  006A2A  0101               	movlb	1	; () banked
 11238  006A2C  1B01               	xorwf	(___ftneg@f1+1)& (0+255),f,b
 11239  006A2E  0E80               	movlw	128
 11240  006A30  0101               	movlb	1	; () banked
 11241  006A32  1B02               	xorwf	(___ftneg@f1+2)& (0+255),f,b
 11242  006A34                     l1361:
 11243                           
 11244                           ; BSR set to: 1
 11245  006A34  C100  F100         	movff	___ftneg@f1,?___ftneg
 11246  006A38  C101  F101         	movff	___ftneg@f1+1,?___ftneg+1
 11247  006A3C  C102  F102         	movff	___ftneg@f1+2,?___ftneg+2
 11248                           
 11249                           ; BSR set to: 1
 11250  006A40  0012               	return		;funcret
 11251  006A42                     __end_of___ftneg:
 11252                           	opt stack 0
 11253                           tblptru	equ	0xFF8
 11254                           tblptrh	equ	0xFF7
 11255                           tblptrl	equ	0xFF6
 11256                           tablat	equ	0xFF5
 11257                           prodh	equ	0xFF4
 11258                           prodl	equ	0xFF3
 11259                           intcon	equ	0xFF2
 11260                           postinc0	equ	0xFEE
 11261                           wreg	equ	0xFE8
 11262                           postdec1	equ	0xFE5
 11263                           fsr1l	equ	0xFE1
 11264                           indf2	equ	0xFDF
 11265                           postinc2	equ	0xFDE
 11266                           postdec2	equ	0xFDD
 11267                           fsr2h	equ	0xFDA
 11268                           fsr2l	equ	0xFD9
 11269                           status	equ	0xFD8
 11270                           
 11271 ;; *************** function ___ftge *****************
 11272 ;; Defined at:
 11273 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 11274 ;; Parameters:    Size  Location     Type
 11275 ;;  ff1             3    0[BANK1 ] float 
 11276 ;;  ff2             3    3[BANK1 ] float 
 11277 ;; Auto vars:     Size  Location     Type
 11278 ;;		None
 11279 ;; Return value:  Size  Location     Type
 11280 ;;		None               void
 11281 ;; Registers used:
 11282 ;;		wreg, status,2, status,0
 11283 ;; Tracked objects:
 11284 ;;		On entry : 0/0
 11285 ;;		On exit  : 0/0
 11286 ;;		Unchanged: 0/0
 11287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11288 ;;      Params:         0       0       6       0       0       0       0
 11289 ;;      Locals:         0       0       0       0       0       0       0
 11290 ;;      Temps:          0       0       3       0       0       0       0
 11291 ;;      Totals:         0       0       9       0       0       0       0
 11292 ;;Total ram usage:        9 bytes
 11293 ;; Hardware stack levels used:    1
 11294 ;; Hardware stack levels required when called:   12
 11295 ;; This function calls:
 11296 ;;		Nothing
 11297 ;; This function is called by:
 11298 ;;		_printf
 11299 ;; This function uses a non-reentrant model
 11300 ;;
 11301                           
 11302                           	psect	text42
 11303  004EC4                     __ptext42:
 11304                           	opt stack 0
 11305  004EC4                     ___ftge:
 11306                           	opt stack 15
 11307                           
 11308                           ; BSR set to: 1
 11309                           ;incstack = 0
 11310  004EC4  0101               	movlb	1	; () banked
 11311  004EC6  AF02               	btfss	(___ftge@ff1+2)& (0+255),7,b
 11312  004EC8  D01D               	goto	l9843
 11313                           
 11314                           ; BSR set to: 1
 11315  004ECA  C100  F106         	movff	___ftge@ff1,??___ftge
 11316  004ECE  C101  F107         	movff	___ftge@ff1+1,??___ftge+1
 11317  004ED2  C102  F108         	movff	___ftge@ff1+2,??___ftge+2
 11318  004ED6  0101               	movlb	1	; () banked
 11319  004ED8  1F06               	comf	??___ftge& (0+255),f,b
 11320  004EDA  1F07               	comf	(??___ftge+1)& (0+255),f,b
 11321  004EDC  1F08               	comf	(??___ftge+2)& (0+255),f,b
 11322  004EDE  2B06               	incf	??___ftge& (0+255),f,b
 11323  004EE0  0E00               	movlw	0
 11324  004EE2  2307               	addwfc	(??___ftge+1)& (0+255),f,b
 11325  004EE4  2308               	addwfc	(??___ftge+2)& (0+255),f,b
 11326  004EE6  0E00               	movlw	0
 11327  004EE8  0101               	movlb	1	; () banked
 11328  004EEA  2506               	addwf	??___ftge& (0+255),w,b
 11329  004EEC  0101               	movlb	1	; () banked
 11330  004EEE  6F00               	movwf	___ftge@ff1& (0+255),b
 11331  004EF0  0E00               	movlw	0
 11332  004EF2  0101               	movlb	1	; () banked
 11333  004EF4  2107               	addwfc	(??___ftge+1)& (0+255),w,b
 11334  004EF6  0101               	movlb	1	; () banked
 11335  004EF8  6F01               	movwf	(___ftge@ff1+1)& (0+255),b
 11336  004EFA  0E80               	movlw	128
 11337  004EFC  0101               	movlb	1	; () banked
 11338  004EFE  2108               	addwfc	(??___ftge+2)& (0+255),w,b
 11339  004F00  0101               	movlb	1	; () banked
 11340  004F02  6F02               	movwf	(___ftge@ff1+2)& (0+255),b
 11341  004F04                     l9843:
 11342                           
 11343                           ; BSR set to: 1
 11344  004F04  0101               	movlb	1	; () banked
 11345  004F06  AF05               	btfss	(___ftge@ff2+2)& (0+255),7,b
 11346  004F08  D01D               	goto	l9847
 11347                           
 11348                           ; BSR set to: 1
 11349  004F0A  C103  F106         	movff	___ftge@ff2,??___ftge
 11350  004F0E  C104  F107         	movff	___ftge@ff2+1,??___ftge+1
 11351  004F12  C105  F108         	movff	___ftge@ff2+2,??___ftge+2
 11352  004F16  0101               	movlb	1	; () banked
 11353  004F18  1F06               	comf	??___ftge& (0+255),f,b
 11354  004F1A  1F07               	comf	(??___ftge+1)& (0+255),f,b
 11355  004F1C  1F08               	comf	(??___ftge+2)& (0+255),f,b
 11356  004F1E  2B06               	incf	??___ftge& (0+255),f,b
 11357  004F20  0E00               	movlw	0
 11358  004F22  2307               	addwfc	(??___ftge+1)& (0+255),f,b
 11359  004F24  2308               	addwfc	(??___ftge+2)& (0+255),f,b
 11360  004F26  0E00               	movlw	0
 11361  004F28  0101               	movlb	1	; () banked
 11362  004F2A  2506               	addwf	??___ftge& (0+255),w,b
 11363  004F2C  0101               	movlb	1	; () banked
 11364  004F2E  6F03               	movwf	___ftge@ff2& (0+255),b
 11365  004F30  0E00               	movlw	0
 11366  004F32  0101               	movlb	1	; () banked
 11367  004F34  2107               	addwfc	(??___ftge+1)& (0+255),w,b
 11368  004F36  0101               	movlb	1	; () banked
 11369  004F38  6F04               	movwf	(___ftge@ff2+1)& (0+255),b
 11370  004F3A  0E80               	movlw	128
 11371  004F3C  0101               	movlb	1	; () banked
 11372  004F3E  2108               	addwfc	(??___ftge+2)& (0+255),w,b
 11373  004F40  0101               	movlb	1	; () banked
 11374  004F42  6F05               	movwf	(___ftge@ff2+2)& (0+255),b
 11375  004F44                     l9847:
 11376                           
 11377                           ; BSR set to: 1
 11378  004F44  0E00               	movlw	0
 11379  004F46  0101               	movlb	1	; () banked
 11380  004F48  1B00               	xorwf	___ftge@ff1& (0+255),f,b
 11381  004F4A  0E00               	movlw	0
 11382  004F4C  0101               	movlb	1	; () banked
 11383  004F4E  1B01               	xorwf	(___ftge@ff1+1)& (0+255),f,b
 11384  004F50  0E80               	movlw	128
 11385  004F52  0101               	movlb	1	; () banked
 11386  004F54  1B02               	xorwf	(___ftge@ff1+2)& (0+255),f,b
 11387                           
 11388                           ; BSR set to: 1
 11389  004F56  0E00               	movlw	0
 11390  004F58  0101               	movlb	1	; () banked
 11391  004F5A  1B03               	xorwf	___ftge@ff2& (0+255),f,b
 11392  004F5C  0E00               	movlw	0
 11393  004F5E  0101               	movlb	1	; () banked
 11394  004F60  1B04               	xorwf	(___ftge@ff2+1)& (0+255),f,b
 11395  004F62  0E80               	movlw	128
 11396  004F64  0101               	movlb	1	; () banked
 11397  004F66  1B05               	xorwf	(___ftge@ff2+2)& (0+255),f,b
 11398  004F68  0101               	movlb	1	; () banked
 11399  004F6A  5103               	movf	___ftge@ff2& (0+255),w,b
 11400  004F6C  0101               	movlb	1	; () banked
 11401  004F6E  5D00               	subwf	___ftge@ff1& (0+255),w,b
 11402  004F70  0101               	movlb	1	; () banked
 11403  004F72  5104               	movf	(___ftge@ff2+1)& (0+255),w,b
 11404  004F74  0101               	movlb	1	; () banked
 11405  004F76  5901               	subwfb	(___ftge@ff1+1)& (0+255),w,b
 11406  004F78  0101               	movlb	1	; () banked
 11407  004F7A  5105               	movf	(___ftge@ff2+2)& (0+255),w,b
 11408  004F7C  0101               	movlb	1	; () banked
 11409  004F7E  5902               	subwfb	(___ftge@ff1+2)& (0+255),w,b
 11410  004F80  B0D8               	btfsc	status,0,c
 11411  004F82  D002               	goto	l9853
 11412                           
 11413                           ; BSR set to: 1
 11414  004F84  90D8               	bcf	status,0,c
 11415  004F86  0012               	return	
 11416  004F88                     l9853:
 11417                           
 11418                           ; BSR set to: 1
 11419  004F88  80D8               	bsf	status,0,c
 11420                           
 11421                           ; BSR set to: 1
 11422  004F8A  0012               	return	
 11423  004F8C                     __end_of___ftge:
 11424                           	opt stack 0
 11425                           tblptru	equ	0xFF8
 11426                           tblptrh	equ	0xFF7
 11427                           tblptrl	equ	0xFF6
 11428                           tablat	equ	0xFF5
 11429                           prodh	equ	0xFF4
 11430                           prodl	equ	0xFF3
 11431                           intcon	equ	0xFF2
 11432                           postinc0	equ	0xFEE
 11433                           wreg	equ	0xFE8
 11434                           postdec1	equ	0xFE5
 11435                           fsr1l	equ	0xFE1
 11436                           indf2	equ	0xFDF
 11437                           postinc2	equ	0xFDE
 11438                           postdec2	equ	0xFDD
 11439                           fsr2h	equ	0xFDA
 11440                           fsr2l	equ	0xFD9
 11441                           status	equ	0xFD8
 11442                           
 11443 ;; *************** function _clockConfig *****************
 11444 ;; Defined at:
 11445 ;;		line 76 in file "source/SYSConfig.h"
 11446 ;; Parameters:    Size  Location     Type
 11447 ;;		None
 11448 ;; Auto vars:     Size  Location     Type
 11449 ;;		None
 11450 ;; Return value:  Size  Location     Type
 11451 ;;                  1    wreg      void 
 11452 ;; Registers used:
 11453 ;;		wreg, status,2
 11454 ;; Tracked objects:
 11455 ;;		On entry : 0/0
 11456 ;;		On exit  : 0/0
 11457 ;;		Unchanged: 0/0
 11458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11459 ;;      Params:         0       0       0       0       0       0       0
 11460 ;;      Locals:         0       0       0       0       0       0       0
 11461 ;;      Temps:          0       0       0       0       0       0       0
 11462 ;;      Totals:         0       0       0       0       0       0       0
 11463 ;;Total ram usage:        0 bytes
 11464 ;; Hardware stack levels used:    1
 11465 ;; Hardware stack levels required when called:   12
 11466 ;; This function calls:
 11467 ;;		Nothing
 11468 ;; This function is called by:
 11469 ;;		_main
 11470 ;; This function uses a non-reentrant model
 11471 ;;
 11472                           
 11473                           	psect	text43
 11474  006B14                     __ptext43:
 11475                           	opt stack 0
 11476  006B14                     _clockConfig:
 11477                           	opt stack 18
 11478                           
 11479                           ;SYSConfig.h: 77: OSCCONbits.IDLEN = 1;
 11480                           
 11481                           ; BSR set to: 1
 11482                           ;incstack = 0
 11483  006B14  8ED3               	bsf	4051,7,c	;volatile
 11484                           
 11485                           ;SYSConfig.h: 78: OSCCONbits.IRCF = 0b111;
 11486  006B16  88D3               	bsf	4051,4,c	;volatile
 11487  006B18  8AD3               	bsf	4051,5,c	;volatile
 11488  006B1A  8CD3               	bsf	4051,6,c	;volatile
 11489  006B1C                     l91:
 11490  006B1C  A4D3               	btfss	4051,2,c	;volatile
 11491  006B1E  D7FE               	goto	l91
 11492                           
 11493                           ;SYSConfig.h: 80: OSCCONbits.SCS = 0b11;
 11494  006B20  0E03               	movlw	3
 11495  006B22  12D3               	iorwf	4051,f,c	;volatile
 11496                           
 11497                           ;SYSConfig.h: 81: OSCCON2bits.MFIOSEL = 0;
 11498  006B24  98D2               	bcf	4050,4,c	;volatile
 11499                           
 11500                           ;SYSConfig.h: 82: OSCCON2bits.SOSCGO = 0;
 11501  006B26  96D2               	bcf	4050,3,c	;volatile
 11502                           
 11503                           ;SYSConfig.h: 83: OSCTUNEbits.INTSRC = 0;
 11504  006B28  9E9B               	bcf	3995,7,c	;volatile
 11505                           
 11506                           ;SYSConfig.h: 84: OSCTUNEbits.TUN = 0b011111;
 11507  006B2A  809B               	bsf	3995,0,c	;volatile
 11508  006B2C  829B               	bsf	3995,1,c	;volatile
 11509  006B2E  849B               	bsf	3995,2,c	;volatile
 11510  006B30  869B               	bsf	3995,3,c	;volatile
 11511  006B32  889B               	bsf	3995,4,c	;volatile
 11512  006B34  9A9B               	bcf	3995,5,c	;volatile
 11513                           
 11514                           ;SYSConfig.h: 85: OSCTUNEbits.PLLEN = 1;
 11515  006B36  8C9B               	bsf	3995,6,c	;volatile
 11516  006B38  0012               	return		;funcret
 11517  006B3A                     __end_of_clockConfig:
 11518                           	opt stack 0
 11519                           tblptru	equ	0xFF8
 11520                           tblptrh	equ	0xFF7
 11521                           tblptrl	equ	0xFF6
 11522                           tablat	equ	0xFF5
 11523                           prodh	equ	0xFF4
 11524                           prodl	equ	0xFF3
 11525                           intcon	equ	0xFF2
 11526                           postinc0	equ	0xFEE
 11527                           wreg	equ	0xFE8
 11528                           postdec1	equ	0xFE5
 11529                           fsr1l	equ	0xFE1
 11530                           indf2	equ	0xFDF
 11531                           postinc2	equ	0xFDE
 11532                           postdec2	equ	0xFDD
 11533                           fsr2h	equ	0xFDA
 11534                           fsr2l	equ	0xFD9
 11535                           status	equ	0xFD8
 11536                           
 11537 ;; *************** function _buttonChecking *****************
 11538 ;; Defined at:
 11539 ;;		line 9 in file "source/ButtonController.h"
 11540 ;; Parameters:    Size  Location     Type
 11541 ;;		None
 11542 ;; Auto vars:     Size  Location     Type
 11543 ;;		None
 11544 ;; Return value:  Size  Location     Type
 11545 ;;                  1    wreg      void 
 11546 ;; Registers used:
 11547 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11548 ;; Tracked objects:
 11549 ;;		On entry : 0/0
 11550 ;;		On exit  : 0/0
 11551 ;;		Unchanged: 0/0
 11552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11553 ;;      Params:         0       0       0       0       0       0       0
 11554 ;;      Locals:         0       0       0       0       0       0       0
 11555 ;;      Temps:          0       0       0       0       0       0       0
 11556 ;;      Totals:         0       0       0       0       0       0       0
 11557 ;;Total ram usage:        0 bytes
 11558 ;; Hardware stack levels used:    1
 11559 ;; Hardware stack levels required when called:   18
 11560 ;; This function calls:
 11561 ;;		_delay_ms
 11562 ;;		_longPressDOWN
 11563 ;;		_longPressENTER
 11564 ;;		_longPressRETRO
 11565 ;;		_longPressUP
 11566 ;;		_pressDOWN
 11567 ;;		_pressENTER
 11568 ;;		_pressRETRO
 11569 ;;		_pressUP
 11570 ;;		_releaseDOWN
 11571 ;;		_releaseENTER
 11572 ;;		_releaseRETRO
 11573 ;;		_releaseUP
 11574 ;; This function is called by:
 11575 ;;		_main
 11576 ;; This function uses a non-reentrant model
 11577 ;;
 11578                           
 11579                           	psect	text44
 11580  001FBA                     __ptext44:
 11581                           	opt stack 0
 11582  001FBA                     _buttonChecking:
 11583                           	opt stack 12
 11584                           
 11585                           ;ButtonController.h: 10: if(!PORTAbits.RA2 && lastSttUP) {
 11586                           
 11587                           ;incstack = 0
 11588  001FBA  B480               	btfsc	3968,2,c	;volatile
 11589  001FBC  D010               	goto	l824
 11590  001FBE  0101               	movlb	1	; () banked
 11591  001FC0  5199               	movf	_lastSttUP& (0+255),w,b
 11592  001FC2  0101               	movlb	1	; () banked
 11593  001FC4  B4D8               	btfsc	status,2,c
 11594  001FC6  D00B               	goto	l824
 11595                           
 11596                           ; BSR set to: 1
 11597                           ;ButtonController.h: 11: lastSttUP = 0;
 11598  001FC8  0E00               	movlw	0
 11599  001FCA  0101               	movlb	1	; () banked
 11600  001FCC  6F99               	movwf	_lastSttUP& (0+255),b
 11601                           
 11602                           ; BSR set to: 1
 11603                           ;ButtonController.h: 12: delay_ms(200);
 11604  001FCE  0E00               	movlw	0
 11605  001FD0  0101               	movlb	1	; () banked
 11606  001FD2  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11607  001FD4  0EC8               	movlw	200
 11608  001FD6  6F00               	movwf	delay_ms@del& (0+255),b
 11609  001FD8  EC08  F034         	call	_delay_ms	;wreg free
 11610                           
 11611                           ;ButtonController.h: 13: }else if(PORTAbits.RA2 && !lastSttUP) {
 11612  001FDC  D044               	goto	l12409
 11613  001FDE                     l824:
 11614  001FDE  A480               	btfss	3968,2,c	;volatile
 11615  001FE0  D016               	goto	l12387
 11616  001FE2  0101               	movlb	1	; () banked
 11617  001FE4  5199               	movf	_lastSttUP& (0+255),w,b
 11618  001FE6  0101               	movlb	1	; () banked
 11619  001FE8  A4D8               	btfss	status,2,c
 11620  001FEA  D011               	goto	l12387
 11621                           
 11622                           ; BSR set to: 1
 11623                           ;ButtonController.h: 14: lastSttUP = 1;
 11624  001FEC  0E01               	movlw	1
 11625  001FEE  0101               	movlb	1	; () banked
 11626  001FF0  6F99               	movwf	_lastSttUP& (0+255),b
 11627                           
 11628                           ; BSR set to: 1
 11629                           ;ButtonController.h: 15: if(holdUPcont < 10)
 11630  001FF2  0E0A               	movlw	10
 11631  001FF4  0101               	movlb	1	; () banked
 11632  001FF6  61C0               	cpfslt	_holdUPcont& (0+255),b
 11633  001FF8  D002               	goto	l12385
 11634                           
 11635                           ; BSR set to: 1
 11636                           ;ButtonController.h: 16: pressUP();
 11637  001FFA  ECBA  F020         	call	_pressUP	;wreg free
 11638  001FFE                     l12385:
 11639                           
 11640                           ;ButtonController.h: 17: delay_ms(50);
 11641  001FFE  0E00               	movlw	0
 11642  002000  0101               	movlb	1	; () banked
 11643  002002  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11644  002004  0E32               	movlw	50
 11645  002006  6F00               	movwf	delay_ms@del& (0+255),b
 11646  002008  EC08  F034         	call	_delay_ms	;wreg free
 11647                           
 11648                           ;ButtonController.h: 18: }else if(PORTAbits.RA2 == lastSttUP) {
 11649  00200C  D02C               	goto	l12409
 11650  00200E                     l12387:
 11651  00200E  A480               	btfss	3968,2,c	;volatile
 11652  002010  D002               	goto	u18440
 11653  002012  0E01               	movlw	1
 11654  002014  D001               	goto	u18446
 11655  002016                     u18440:
 11656  002016  0E00               	movlw	0
 11657  002018                     u18446:
 11658  002018  0101               	movlb	1	; () banked
 11659  00201A  1999               	xorwf	_lastSttUP& (0+255),w,b
 11660  00201C  A4D8               	btfss	status,2,c
 11661  00201E  D023               	goto	l12409
 11662                           
 11663                           ; BSR set to: 1
 11664                           ;ButtonController.h: 19: if(PORTAbits.RA2) {
 11665  002020  A480               	btfss	3968,2,c	;volatile
 11666  002022  D006               	goto	l12395
 11667                           
 11668                           ; BSR set to: 1
 11669                           ;ButtonController.h: 20: holdUPcont = 0;
 11670  002024  0E00               	movlw	0
 11671  002026  0101               	movlb	1	; () banked
 11672  002028  6FC0               	movwf	_holdUPcont& (0+255),b
 11673                           
 11674                           ; BSR set to: 1
 11675                           ;ButtonController.h: 21: releaseUP();
 11676  00202A  EC2D  F036         	call	_releaseUP	;wreg free
 11677                           
 11678                           ;ButtonController.h: 22: }else {
 11679  00202E  D01B               	goto	l12409
 11680  002030                     l12395:
 11681                           
 11682                           ;ButtonController.h: 23: if(!UPsecurLock)
 11683  002030  0101               	movlb	1	; () banked
 11684  002032  51B9               	movf	_UPsecurLock& (0+255),w,b
 11685  002034  A4D8               	btfss	status,2,c
 11686  002036  D002               	goto	l12399
 11687                           
 11688                           ; BSR set to: 1
 11689                           ;ButtonController.h: 24: holdUPcont++;
 11690  002038  0101               	movlb	1	; () banked
 11691  00203A  2BC0               	incf	_holdUPcont& (0+255),f,b
 11692  00203C                     l12399:
 11693                           
 11694                           ; BSR set to: 1
 11695                           ;ButtonController.h: 25: if(holdUPcont > 9) {
 11696  00203C  0E09               	movlw	9
 11697  00203E  0101               	movlb	1	; () banked
 11698  002040  65C0               	cpfsgt	_holdUPcont& (0+255),b
 11699  002042  D00A               	goto	l12407
 11700                           
 11701                           ; BSR set to: 1
 11702                           ;ButtonController.h: 26: if(holdUPcont < 26)
 11703  002044  0E1A               	movlw	26
 11704  002046  0101               	movlb	1	; () banked
 11705  002048  61C0               	cpfslt	_holdUPcont& (0+255),b
 11706  00204A  D003               	goto	l12405
 11707                           
 11708                           ; BSR set to: 1
 11709                           ;ButtonController.h: 27: longPressUP();
 11710  00204C  EC55  F031         	call	_longPressUP	;wreg free
 11711  002050  D003               	goto	l12407
 11712  002052                     l12405:
 11713                           
 11714                           ;ButtonController.h: 28: else
 11715                           ;ButtonController.h: 29: UPsecurLock = 1;
 11716  002052  0E01               	movlw	1
 11717  002054  0101               	movlb	1	; () banked
 11718  002056  6FB9               	movwf	_UPsecurLock& (0+255),b
 11719  002058                     l12407:
 11720                           
 11721                           ;ButtonController.h: 30: }
 11722                           ;ButtonController.h: 31: delay_ms(200);
 11723  002058  0E00               	movlw	0
 11724  00205A  0101               	movlb	1	; () banked
 11725  00205C  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11726  00205E  0EC8               	movlw	200
 11727  002060  6F00               	movwf	delay_ms@del& (0+255),b
 11728  002062  EC08  F034         	call	_delay_ms	;wreg free
 11729  002066                     l12409:
 11730                           
 11731                           ;ButtonController.h: 32: }
 11732                           ;ButtonController.h: 33: }
 11733                           ;ButtonController.h: 34: if(!PORTAbits.RA3 && lastSttDOWN) {
 11734  002066  B680               	btfsc	3968,3,c	;volatile
 11735  002068  D010               	goto	l836
 11736  00206A  0101               	movlb	1	; () banked
 11737  00206C  5196               	movf	_lastSttDOWN& (0+255),w,b
 11738  00206E  0101               	movlb	1	; () banked
 11739  002070  B4D8               	btfsc	status,2,c
 11740  002072  D00B               	goto	l836
 11741                           
 11742                           ; BSR set to: 1
 11743                           ;ButtonController.h: 35: lastSttDOWN = 0;
 11744  002074  0E00               	movlw	0
 11745  002076  0101               	movlb	1	; () banked
 11746  002078  6F96               	movwf	_lastSttDOWN& (0+255),b
 11747                           
 11748                           ; BSR set to: 1
 11749                           ;ButtonController.h: 36: delay_ms(200);
 11750  00207A  0E00               	movlw	0
 11751  00207C  0101               	movlb	1	; () banked
 11752  00207E  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11753  002080  0EC8               	movlw	200
 11754  002082  6F00               	movwf	delay_ms@del& (0+255),b
 11755  002084  EC08  F034         	call	_delay_ms	;wreg free
 11756                           
 11757                           ;ButtonController.h: 37: }else if(PORTAbits.RA3 && !lastSttDOWN) {
 11758  002088  D044               	goto	l12449
 11759  00208A                     l836:
 11760  00208A  A680               	btfss	3968,3,c	;volatile
 11761  00208C  D016               	goto	l12427
 11762  00208E  0101               	movlb	1	; () banked
 11763  002090  5196               	movf	_lastSttDOWN& (0+255),w,b
 11764  002092  0101               	movlb	1	; () banked
 11765  002094  A4D8               	btfss	status,2,c
 11766  002096  D011               	goto	l12427
 11767                           
 11768                           ; BSR set to: 1
 11769                           ;ButtonController.h: 38: lastSttDOWN = 1;
 11770  002098  0E01               	movlw	1
 11771  00209A  0101               	movlb	1	; () banked
 11772  00209C  6F96               	movwf	_lastSttDOWN& (0+255),b
 11773                           
 11774                           ; BSR set to: 1
 11775                           ;ButtonController.h: 39: if(holdDOWNcont < 10)
 11776  00209E  0E0A               	movlw	10
 11777  0020A0  0101               	movlb	1	; () banked
 11778  0020A2  61BD               	cpfslt	_holdDOWNcont& (0+255),b
 11779  0020A4  D002               	goto	l12425
 11780                           
 11781                           ; BSR set to: 1
 11782                           ;ButtonController.h: 40: pressDOWN();
 11783  0020A6  ECD8  F022         	call	_pressDOWN	;wreg free
 11784  0020AA                     l12425:
 11785                           
 11786                           ;ButtonController.h: 41: delay_ms(50);
 11787  0020AA  0E00               	movlw	0
 11788  0020AC  0101               	movlb	1	; () banked
 11789  0020AE  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11790  0020B0  0E32               	movlw	50
 11791  0020B2  6F00               	movwf	delay_ms@del& (0+255),b
 11792  0020B4  EC08  F034         	call	_delay_ms	;wreg free
 11793                           
 11794                           ;ButtonController.h: 42: }else if(PORTAbits.RA3 == lastSttDOWN) {
 11795  0020B8  D02C               	goto	l12449
 11796  0020BA                     l12427:
 11797  0020BA  A680               	btfss	3968,3,c	;volatile
 11798  0020BC  D002               	goto	u18550
 11799  0020BE  0E01               	movlw	1
 11800  0020C0  D001               	goto	u18556
 11801  0020C2                     u18550:
 11802  0020C2  0E00               	movlw	0
 11803  0020C4                     u18556:
 11804  0020C4  0101               	movlb	1	; () banked
 11805  0020C6  1996               	xorwf	_lastSttDOWN& (0+255),w,b
 11806  0020C8  A4D8               	btfss	status,2,c
 11807  0020CA  D023               	goto	l12449
 11808                           
 11809                           ; BSR set to: 1
 11810                           ;ButtonController.h: 43: if(PORTAbits.RA3) {
 11811  0020CC  A680               	btfss	3968,3,c	;volatile
 11812  0020CE  D006               	goto	l12435
 11813                           
 11814                           ; BSR set to: 1
 11815                           ;ButtonController.h: 44: holdDOWNcont = 0;
 11816  0020D0  0E00               	movlw	0
 11817  0020D2  0101               	movlb	1	; () banked
 11818  0020D4  6FBD               	movwf	_holdDOWNcont& (0+255),b
 11819                           
 11820                           ; BSR set to: 1
 11821                           ;ButtonController.h: 45: releaseDOWN();
 11822  0020D6  EC39  F036         	call	_releaseDOWN	;wreg free
 11823                           
 11824                           ;ButtonController.h: 46: }else {
 11825  0020DA  D01B               	goto	l12449
 11826  0020DC                     l12435:
 11827                           
 11828                           ;ButtonController.h: 47: if(!DOWNsecurLock)
 11829  0020DC  0101               	movlb	1	; () banked
 11830  0020DE  51B5               	movf	_DOWNsecurLock& (0+255),w,b
 11831  0020E0  A4D8               	btfss	status,2,c
 11832  0020E2  D002               	goto	l12439
 11833                           
 11834                           ; BSR set to: 1
 11835                           ;ButtonController.h: 48: holdDOWNcont++;
 11836  0020E4  0101               	movlb	1	; () banked
 11837  0020E6  2BBD               	incf	_holdDOWNcont& (0+255),f,b
 11838  0020E8                     l12439:
 11839                           
 11840                           ; BSR set to: 1
 11841                           ;ButtonController.h: 49: if(holdDOWNcont > 9) {
 11842  0020E8  0E09               	movlw	9
 11843  0020EA  0101               	movlb	1	; () banked
 11844  0020EC  65BD               	cpfsgt	_holdDOWNcont& (0+255),b
 11845  0020EE  D00A               	goto	l12447
 11846                           
 11847                           ; BSR set to: 1
 11848                           ;ButtonController.h: 50: if(holdDOWNcont < 26)
 11849  0020F0  0E1A               	movlw	26
 11850  0020F2  0101               	movlb	1	; () banked
 11851  0020F4  61BD               	cpfslt	_holdDOWNcont& (0+255),b
 11852  0020F6  D003               	goto	l12445
 11853                           
 11854                           ; BSR set to: 1
 11855                           ;ButtonController.h: 51: longPressDOWN();
 11856  0020F8  EC4B  F035         	call	_longPressDOWN	;wreg free
 11857  0020FC  D003               	goto	l12447
 11858  0020FE                     l12445:
 11859                           
 11860                           ;ButtonController.h: 52: else
 11861                           ;ButtonController.h: 53: DOWNsecurLock = 1;
 11862  0020FE  0E01               	movlw	1
 11863  002100  0101               	movlb	1	; () banked
 11864  002102  6FB5               	movwf	_DOWNsecurLock& (0+255),b
 11865  002104                     l12447:
 11866                           
 11867                           ;ButtonController.h: 54: }
 11868                           ;ButtonController.h: 55: delay_ms(200);
 11869  002104  0E00               	movlw	0
 11870  002106  0101               	movlb	1	; () banked
 11871  002108  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11872  00210A  0EC8               	movlw	200
 11873  00210C  6F00               	movwf	delay_ms@del& (0+255),b
 11874  00210E  EC08  F034         	call	_delay_ms	;wreg free
 11875  002112                     l12449:
 11876                           
 11877                           ;ButtonController.h: 56: }
 11878                           ;ButtonController.h: 57: }
 11879                           ;ButtonController.h: 58: if(!PORTAbits.RA4 && lastSttRETRO) {
 11880  002112  B880               	btfsc	3968,4,c	;volatile
 11881  002114  D010               	goto	l848
 11882  002116  0101               	movlb	1	; () banked
 11883  002118  5198               	movf	_lastSttRETRO& (0+255),w,b
 11884  00211A  0101               	movlb	1	; () banked
 11885  00211C  B4D8               	btfsc	status,2,c
 11886  00211E  D00B               	goto	l848
 11887                           
 11888                           ; BSR set to: 1
 11889                           ;ButtonController.h: 59: lastSttRETRO = 0;
 11890  002120  0E00               	movlw	0
 11891  002122  0101               	movlb	1	; () banked
 11892  002124  6F98               	movwf	_lastSttRETRO& (0+255),b
 11893                           
 11894                           ; BSR set to: 1
 11895                           ;ButtonController.h: 60: delay_ms(200);
 11896  002126  0E00               	movlw	0
 11897  002128  0101               	movlb	1	; () banked
 11898  00212A  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11899  00212C  0EC8               	movlw	200
 11900  00212E  6F00               	movwf	delay_ms@del& (0+255),b
 11901  002130  EC08  F034         	call	_delay_ms	;wreg free
 11902                           
 11903                           ;ButtonController.h: 61: }else if(PORTAbits.RA4 && !lastSttRETRO) {
 11904  002134  D044               	goto	l12487
 11905  002136                     l848:
 11906  002136  A880               	btfss	3968,4,c	;volatile
 11907  002138  D016               	goto	l12465
 11908  00213A  0101               	movlb	1	; () banked
 11909  00213C  5198               	movf	_lastSttRETRO& (0+255),w,b
 11910  00213E  0101               	movlb	1	; () banked
 11911  002140  A4D8               	btfss	status,2,c
 11912  002142  D011               	goto	l12465
 11913                           
 11914                           ; BSR set to: 1
 11915                           ;ButtonController.h: 62: lastSttRETRO = 1;
 11916  002144  0E01               	movlw	1
 11917  002146  0101               	movlb	1	; () banked
 11918  002148  6F98               	movwf	_lastSttRETRO& (0+255),b
 11919                           
 11920                           ; BSR set to: 1
 11921                           ;ButtonController.h: 63: if(holdRETROcont < 10)
 11922  00214A  0E0A               	movlw	10
 11923  00214C  0101               	movlb	1	; () banked
 11924  00214E  61BF               	cpfslt	_holdRETROcont& (0+255),b
 11925  002150  D002               	goto	l851
 11926                           
 11927                           ; BSR set to: 1
 11928                           ;ButtonController.h: 64: pressRETRO();
 11929  002152  EC86  F02C         	call	_pressRETRO	;wreg free
 11930  002156                     l851:
 11931                           
 11932                           ;ButtonController.h: 65: delay_ms(50);
 11933  002156  0E00               	movlw	0
 11934  002158  0101               	movlb	1	; () banked
 11935  00215A  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 11936  00215C  0E32               	movlw	50
 11937  00215E  6F00               	movwf	delay_ms@del& (0+255),b
 11938  002160  EC08  F034         	call	_delay_ms	;wreg free
 11939                           
 11940                           ;ButtonController.h: 66: }else if(PORTAbits.RA4 == lastSttRETRO) {
 11941  002164  D02C               	goto	l12487
 11942  002166                     l12465:
 11943  002166  A880               	btfss	3968,4,c	;volatile
 11944  002168  D002               	goto	u18660
 11945  00216A  0E01               	movlw	1
 11946  00216C  D001               	goto	u18666
 11947  00216E                     u18660:
 11948  00216E  0E00               	movlw	0
 11949  002170                     u18666:
 11950  002170  0101               	movlb	1	; () banked
 11951  002172  1998               	xorwf	_lastSttRETRO& (0+255),w,b
 11952  002174  A4D8               	btfss	status,2,c
 11953  002176  D023               	goto	l12487
 11954                           
 11955                           ; BSR set to: 1
 11956                           ;ButtonController.h: 67: if(PORTAbits.RA4) {
 11957  002178  A880               	btfss	3968,4,c	;volatile
 11958  00217A  D006               	goto	l12473
 11959                           
 11960                           ; BSR set to: 1
 11961                           ;ButtonController.h: 68: holdRETROcont = 0;
 11962  00217C  0E00               	movlw	0
 11963  00217E  0101               	movlb	1	; () banked
 11964  002180  6FBF               	movwf	_holdRETROcont& (0+255),b
 11965                           
 11966                           ; BSR set to: 1
 11967                           ;ButtonController.h: 69: releaseRETRO();
 11968  002182  EC33  F036         	call	_releaseRETRO	;wreg free
 11969                           
 11970                           ;ButtonController.h: 70: }else {
 11971  002186  D01B               	goto	l12487
 11972  002188                     l12473:
 11973                           
 11974                           ;ButtonController.h: 71: if(!RETROsecurLock)
 11975  002188  0101               	movlb	1	; () banked
 11976  00218A  51B8               	movf	_RETROsecurLock& (0+255),w,b
 11977  00218C  A4D8               	btfss	status,2,c
 11978  00218E  D002               	goto	l12477
 11979                           
 11980                           ; BSR set to: 1
 11981                           ;ButtonController.h: 72: holdRETROcont++;
 11982  002190  0101               	movlb	1	; () banked
 11983  002192  2BBF               	incf	_holdRETROcont& (0+255),f,b
 11984  002194                     l12477:
 11985                           
 11986                           ; BSR set to: 1
 11987                           ;ButtonController.h: 73: if(holdRETROcont > 9) {
 11988  002194  0E09               	movlw	9
 11989  002196  0101               	movlb	1	; () banked
 11990  002198  65BF               	cpfsgt	_holdRETROcont& (0+255),b
 11991  00219A  D00A               	goto	l12485
 11992                           
 11993                           ; BSR set to: 1
 11994                           ;ButtonController.h: 74: if(holdRETROcont < 26)
 11995  00219C  0E1A               	movlw	26
 11996  00219E  0101               	movlb	1	; () banked
 11997  0021A0  61BF               	cpfslt	_holdRETROcont& (0+255),b
 11998  0021A2  D003               	goto	l12483
 11999                           
 12000                           ; BSR set to: 1
 12001                           ;ButtonController.h: 75: longPressRETRO();
 12002  0021A4  EC9E  F032         	call	_longPressRETRO	;wreg free
 12003  0021A8  D003               	goto	l12485
 12004  0021AA                     l12483:
 12005                           
 12006                           ;ButtonController.h: 76: else
 12007                           ;ButtonController.h: 77: RETROsecurLock = 1;
 12008  0021AA  0E01               	movlw	1
 12009  0021AC  0101               	movlb	1	; () banked
 12010  0021AE  6FB8               	movwf	_RETROsecurLock& (0+255),b
 12011  0021B0                     l12485:
 12012                           
 12013                           ;ButtonController.h: 78: }
 12014                           ;ButtonController.h: 79: delay_ms(200);
 12015  0021B0  0E00               	movlw	0
 12016  0021B2  0101               	movlb	1	; () banked
 12017  0021B4  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12018  0021B6  0EC8               	movlw	200
 12019  0021B8  6F00               	movwf	delay_ms@del& (0+255),b
 12020  0021BA  EC08  F034         	call	_delay_ms	;wreg free
 12021  0021BE                     l12487:
 12022                           
 12023                           ;ButtonController.h: 80: }
 12024                           ;ButtonController.h: 81: }
 12025                           ;ButtonController.h: 82: if(!PORTAbits.RA5 && lastSttENTER) {
 12026  0021BE  BA80               	btfsc	3968,5,c	;volatile
 12027  0021C0  D010               	goto	l860
 12028  0021C2  0101               	movlb	1	; () banked
 12029  0021C4  5197               	movf	_lastSttENTER& (0+255),w,b
 12030  0021C6  0101               	movlb	1	; () banked
 12031  0021C8  B4D8               	btfsc	status,2,c
 12032  0021CA  D00B               	goto	l860
 12033                           
 12034                           ; BSR set to: 1
 12035                           ;ButtonController.h: 83: lastSttENTER = 0;
 12036  0021CC  0E00               	movlw	0
 12037  0021CE  0101               	movlb	1	; () banked
 12038  0021D0  6F97               	movwf	_lastSttENTER& (0+255),b
 12039                           
 12040                           ; BSR set to: 1
 12041                           ;ButtonController.h: 84: delay_ms(200);
 12042  0021D2  0E00               	movlw	0
 12043  0021D4  0101               	movlb	1	; () banked
 12044  0021D6  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12045  0021D8  0EC8               	movlw	200
 12046  0021DA  6F00               	movwf	delay_ms@del& (0+255),b
 12047  0021DC  EC08  F034         	call	_delay_ms	;wreg free
 12048                           
 12049                           ;ButtonController.h: 85: }else if(PORTAbits.RA5 && !lastSttENTER) {
 12050  0021E0  0012               	return	
 12051  0021E2                     l860:
 12052  0021E2  AA80               	btfss	3968,5,c	;volatile
 12053  0021E4  D016               	goto	l12505
 12054  0021E6  0101               	movlb	1	; () banked
 12055  0021E8  5197               	movf	_lastSttENTER& (0+255),w,b
 12056  0021EA  0101               	movlb	1	; () banked
 12057  0021EC  A4D8               	btfss	status,2,c
 12058  0021EE  D011               	goto	l12505
 12059                           
 12060                           ; BSR set to: 1
 12061                           ;ButtonController.h: 86: lastSttENTER = 1;
 12062  0021F0  0E01               	movlw	1
 12063  0021F2  0101               	movlb	1	; () banked
 12064  0021F4  6F97               	movwf	_lastSttENTER& (0+255),b
 12065                           
 12066                           ; BSR set to: 1
 12067                           ;ButtonController.h: 87: if(holdENTERcont < 10)
 12068  0021F6  0E0A               	movlw	10
 12069  0021F8  0101               	movlb	1	; () banked
 12070  0021FA  61BE               	cpfslt	_holdENTERcont& (0+255),b
 12071  0021FC  D002               	goto	l12503
 12072                           
 12073                           ; BSR set to: 1
 12074                           ;ButtonController.h: 88: pressENTER();
 12075  0021FE  EC21  F00D         	call	_pressENTER	;wreg free
 12076  002202                     l12503:
 12077                           
 12078                           ;ButtonController.h: 89: delay_ms(50);
 12079  002202  0E00               	movlw	0
 12080  002204  0101               	movlb	1	; () banked
 12081  002206  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12082  002208  0E32               	movlw	50
 12083  00220A  6F00               	movwf	delay_ms@del& (0+255),b
 12084  00220C  EC08  F034         	call	_delay_ms	;wreg free
 12085                           
 12086                           ;ButtonController.h: 90: }else if(PORTAbits.RA5 == lastSttENTER) {
 12087  002210  0012               	return	
 12088  002212                     l12505:
 12089  002212  AA80               	btfss	3968,5,c	;volatile
 12090  002214  D002               	goto	u18770
 12091  002216  0E01               	movlw	1
 12092  002218  D001               	goto	u18776
 12093  00221A                     u18770:
 12094  00221A  0E00               	movlw	0
 12095  00221C                     u18776:
 12096  00221C  0101               	movlb	1	; () banked
 12097  00221E  1997               	xorwf	_lastSttENTER& (0+255),w,b
 12098  002220  A4D8               	btfss	status,2,c
 12099  002222  0012               	return	
 12100                           
 12101                           ; BSR set to: 1
 12102                           ;ButtonController.h: 91: if(PORTAbits.RA5) {
 12103  002224  AA80               	btfss	3968,5,c	;volatile
 12104  002226  D006               	goto	l12513
 12105                           
 12106                           ; BSR set to: 1
 12107                           ;ButtonController.h: 92: holdENTERcont = 0;
 12108  002228  0E00               	movlw	0
 12109  00222A  0101               	movlb	1	; () banked
 12110  00222C  6FBE               	movwf	_holdENTERcont& (0+255),b
 12111                           
 12112                           ; BSR set to: 1
 12113                           ;ButtonController.h: 93: releaseENTER();
 12114  00222E  EC18  F036         	call	_releaseENTER	;wreg free
 12115                           
 12116                           ;ButtonController.h: 94: }else {
 12117  002232  0012               	return	
 12118  002234                     l12513:
 12119                           
 12120                           ;ButtonController.h: 95: if(!ENTERsecurLock)
 12121  002234  0101               	movlb	1	; () banked
 12122  002236  51B7               	movf	_ENTERsecurLock& (0+255),w,b
 12123  002238  A4D8               	btfss	status,2,c
 12124  00223A  D002               	goto	l12517
 12125                           
 12126                           ; BSR set to: 1
 12127                           ;ButtonController.h: 96: holdENTERcont++;
 12128  00223C  0101               	movlb	1	; () banked
 12129  00223E  2BBE               	incf	_holdENTERcont& (0+255),f,b
 12130  002240                     l12517:
 12131                           
 12132                           ; BSR set to: 1
 12133                           ;ButtonController.h: 97: if(holdENTERcont > 9) {
 12134  002240  0E09               	movlw	9
 12135  002242  0101               	movlb	1	; () banked
 12136  002244  65BE               	cpfsgt	_holdENTERcont& (0+255),b
 12137  002246  D00A               	goto	l12525
 12138                           
 12139                           ; BSR set to: 1
 12140                           ;ButtonController.h: 98: if(holdENTERcont < 26)
 12141  002248  0E1A               	movlw	26
 12142  00224A  0101               	movlb	1	; () banked
 12143  00224C  61BE               	cpfslt	_holdENTERcont& (0+255),b
 12144  00224E  D003               	goto	l12523
 12145                           
 12146                           ; BSR set to: 1
 12147                           ;ButtonController.h: 99: longPressENTER();
 12148  002250  ECD1  F008         	call	_longPressENTER	;wreg free
 12149  002254  D003               	goto	l12525
 12150  002256                     l12523:
 12151                           
 12152                           ;ButtonController.h: 100: else
 12153                           ;ButtonController.h: 101: ENTERsecurLock = 1;
 12154  002256  0E01               	movlw	1
 12155  002258  0101               	movlb	1	; () banked
 12156  00225A  6FB7               	movwf	_ENTERsecurLock& (0+255),b
 12157  00225C                     l12525:
 12158                           
 12159                           ;ButtonController.h: 102: }
 12160                           ;ButtonController.h: 103: delay_ms(200);
 12161  00225C  0E00               	movlw	0
 12162  00225E  0101               	movlb	1	; () banked
 12163  002260  6F01               	movwf	(delay_ms@del+1)& (0+255),b
 12164  002262  0EC8               	movlw	200
 12165  002264  6F00               	movwf	delay_ms@del& (0+255),b
 12166  002266  EC08  F034         	call	_delay_ms	;wreg free
 12167  00226A  0012               	return	
 12168  00226C                     __end_of_buttonChecking:
 12169                           	opt stack 0
 12170                           tblptru	equ	0xFF8
 12171                           tblptrh	equ	0xFF7
 12172                           tblptrl	equ	0xFF6
 12173                           tablat	equ	0xFF5
 12174                           prodh	equ	0xFF4
 12175                           prodl	equ	0xFF3
 12176                           intcon	equ	0xFF2
 12177                           postinc0	equ	0xFEE
 12178                           wreg	equ	0xFE8
 12179                           postdec1	equ	0xFE5
 12180                           fsr1l	equ	0xFE1
 12181                           indf2	equ	0xFDF
 12182                           postinc2	equ	0xFDE
 12183                           postdec2	equ	0xFDD
 12184                           fsr2h	equ	0xFDA
 12185                           fsr2l	equ	0xFD9
 12186                           status	equ	0xFD8
 12187                           
 12188 ;; *************** function _releaseUP *****************
 12189 ;; Defined at:
 12190 ;;		line 176 in file "source/DisplayProtocol.h"
 12191 ;; Parameters:    Size  Location     Type
 12192 ;;		None
 12193 ;; Auto vars:     Size  Location     Type
 12194 ;;		None
 12195 ;; Return value:  Size  Location     Type
 12196 ;;                  1    wreg      void 
 12197 ;; Registers used:
 12198 ;;		wreg, status,2
 12199 ;; Tracked objects:
 12200 ;;		On entry : 0/0
 12201 ;;		On exit  : 0/0
 12202 ;;		Unchanged: 0/0
 12203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12204 ;;      Params:         0       0       0       0       0       0       0
 12205 ;;      Locals:         0       0       0       0       0       0       0
 12206 ;;      Temps:          0       0       0       0       0       0       0
 12207 ;;      Totals:         0       0       0       0       0       0       0
 12208 ;;Total ram usage:        0 bytes
 12209 ;; Hardware stack levels used:    1
 12210 ;; Hardware stack levels required when called:   12
 12211 ;; This function calls:
 12212 ;;		Nothing
 12213 ;; This function is called by:
 12214 ;;		_buttonChecking
 12215 ;; This function uses a non-reentrant model
 12216 ;;
 12217                           
 12218                           	psect	text45
 12219  006C5A                     __ptext45:
 12220                           	opt stack 0
 12221  006C5A                     _releaseUP:
 12222                           	opt stack 17
 12223                           
 12224                           ;DisplayProtocol.h: 177: UPisLP = 0;
 12225                           
 12226                           ;incstack = 0
 12227  006C5A  0E00               	movlw	0
 12228  006C5C  6E3C               	movwf	_UPisLP,c
 12229                           
 12230                           ;DisplayProtocol.h: 178: UPsecurLock = 0;
 12231  006C5E  0E00               	movlw	0
 12232  006C60  0101               	movlb	1	; () banked
 12233  006C62  6FB9               	movwf	_UPsecurLock& (0+255),b
 12234                           
 12235                           ; BSR set to: 1
 12236  006C64  0012               	return		;funcret
 12237  006C66                     __end_of_releaseUP:
 12238                           	opt stack 0
 12239                           tblptru	equ	0xFF8
 12240                           tblptrh	equ	0xFF7
 12241                           tblptrl	equ	0xFF6
 12242                           tablat	equ	0xFF5
 12243                           prodh	equ	0xFF4
 12244                           prodl	equ	0xFF3
 12245                           intcon	equ	0xFF2
 12246                           postinc0	equ	0xFEE
 12247                           wreg	equ	0xFE8
 12248                           postdec1	equ	0xFE5
 12249                           fsr1l	equ	0xFE1
 12250                           indf2	equ	0xFDF
 12251                           postinc2	equ	0xFDE
 12252                           postdec2	equ	0xFDD
 12253                           fsr2h	equ	0xFDA
 12254                           fsr2l	equ	0xFD9
 12255                           status	equ	0xFD8
 12256                           
 12257 ;; *************** function _releaseRETRO *****************
 12258 ;; Defined at:
 12259 ;;		line 268 in file "source/DisplayProtocol.h"
 12260 ;; Parameters:    Size  Location     Type
 12261 ;;		None
 12262 ;; Auto vars:     Size  Location     Type
 12263 ;;		None
 12264 ;; Return value:  Size  Location     Type
 12265 ;;                  1    wreg      void 
 12266 ;; Registers used:
 12267 ;;		wreg, status,2
 12268 ;; Tracked objects:
 12269 ;;		On entry : 0/0
 12270 ;;		On exit  : 0/0
 12271 ;;		Unchanged: 0/0
 12272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12273 ;;      Params:         0       0       0       0       0       0       0
 12274 ;;      Locals:         0       0       0       0       0       0       0
 12275 ;;      Temps:          0       0       0       0       0       0       0
 12276 ;;      Totals:         0       0       0       0       0       0       0
 12277 ;;Total ram usage:        0 bytes
 12278 ;; Hardware stack levels used:    1
 12279 ;; Hardware stack levels required when called:   12
 12280 ;; This function calls:
 12281 ;;		Nothing
 12282 ;; This function is called by:
 12283 ;;		_buttonChecking
 12284 ;; This function uses a non-reentrant model
 12285 ;;
 12286                           
 12287                           	psect	text46
 12288  006C66                     __ptext46:
 12289                           	opt stack 0
 12290  006C66                     _releaseRETRO:
 12291                           	opt stack 17
 12292                           
 12293                           ;DisplayProtocol.h: 269: RETROisLP = 0;
 12294                           
 12295                           ; BSR set to: 1
 12296                           ;incstack = 0
 12297  006C66  0E00               	movlw	0
 12298  006C68  6E3B               	movwf	_RETROisLP,c
 12299                           
 12300                           ;DisplayProtocol.h: 270: RETROsecurLock = 0;
 12301  006C6A  0E00               	movlw	0
 12302  006C6C  0101               	movlb	1	; () banked
 12303  006C6E  6FB8               	movwf	_RETROsecurLock& (0+255),b
 12304                           
 12305                           ; BSR set to: 1
 12306  006C70  0012               	return		;funcret
 12307  006C72                     __end_of_releaseRETRO:
 12308                           	opt stack 0
 12309                           tblptru	equ	0xFF8
 12310                           tblptrh	equ	0xFF7
 12311                           tblptrl	equ	0xFF6
 12312                           tablat	equ	0xFF5
 12313                           prodh	equ	0xFF4
 12314                           prodl	equ	0xFF3
 12315                           intcon	equ	0xFF2
 12316                           postinc0	equ	0xFEE
 12317                           wreg	equ	0xFE8
 12318                           postdec1	equ	0xFE5
 12319                           fsr1l	equ	0xFE1
 12320                           indf2	equ	0xFDF
 12321                           postinc2	equ	0xFDE
 12322                           postdec2	equ	0xFDD
 12323                           fsr2h	equ	0xFDA
 12324                           fsr2l	equ	0xFD9
 12325                           status	equ	0xFD8
 12326                           
 12327 ;; *************** function _releaseENTER *****************
 12328 ;; Defined at:
 12329 ;;		line 440 in file "source/DisplayProtocol.h"
 12330 ;; Parameters:    Size  Location     Type
 12331 ;;		None
 12332 ;; Auto vars:     Size  Location     Type
 12333 ;;		None
 12334 ;; Return value:  Size  Location     Type
 12335 ;;                  1    wreg      void 
 12336 ;; Registers used:
 12337 ;;		wreg, status,2
 12338 ;; Tracked objects:
 12339 ;;		On entry : 0/0
 12340 ;;		On exit  : 0/0
 12341 ;;		Unchanged: 0/0
 12342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12343 ;;      Params:         0       0       0       0       0       0       0
 12344 ;;      Locals:         0       0       0       0       0       0       0
 12345 ;;      Temps:          0       0       0       0       0       0       0
 12346 ;;      Totals:         0       0       0       0       0       0       0
 12347 ;;Total ram usage:        0 bytes
 12348 ;; Hardware stack levels used:    1
 12349 ;; Hardware stack levels required when called:   12
 12350 ;; This function calls:
 12351 ;;		Nothing
 12352 ;; This function is called by:
 12353 ;;		_buttonChecking
 12354 ;; This function uses a non-reentrant model
 12355 ;;
 12356                           
 12357                           	psect	text47
 12358  006C30                     __ptext47:
 12359                           	opt stack 0
 12360  006C30                     _releaseENTER:
 12361                           	opt stack 17
 12362                           
 12363                           ;DisplayProtocol.h: 441: ENTERisLP = 0;
 12364                           
 12365                           ; BSR set to: 1
 12366                           ;incstack = 0
 12367  006C30  0E00               	movlw	0
 12368  006C32  0101               	movlb	1	; () banked
 12369  006C34  6FB6               	movwf	_ENTERisLP& (0+255),b
 12370                           
 12371                           ;DisplayProtocol.h: 442: ENTERsecurLock = 0;
 12372  006C36  0E00               	movlw	0
 12373  006C38  0101               	movlb	1	; () banked
 12374  006C3A  6FB7               	movwf	_ENTERsecurLock& (0+255),b
 12375                           
 12376                           ; BSR set to: 1
 12377  006C3C  0012               	return		;funcret
 12378  006C3E                     __end_of_releaseENTER:
 12379                           	opt stack 0
 12380                           tblptru	equ	0xFF8
 12381                           tblptrh	equ	0xFF7
 12382                           tblptrl	equ	0xFF6
 12383                           tablat	equ	0xFF5
 12384                           prodh	equ	0xFF4
 12385                           prodl	equ	0xFF3
 12386                           intcon	equ	0xFF2
 12387                           postinc0	equ	0xFEE
 12388                           wreg	equ	0xFE8
 12389                           postdec1	equ	0xFE5
 12390                           fsr1l	equ	0xFE1
 12391                           indf2	equ	0xFDF
 12392                           postinc2	equ	0xFDE
 12393                           postdec2	equ	0xFDD
 12394                           fsr2h	equ	0xFDA
 12395                           fsr2l	equ	0xFD9
 12396                           status	equ	0xFD8
 12397                           
 12398 ;; *************** function _releaseDOWN *****************
 12399 ;; Defined at:
 12400 ;;		line 224 in file "source/DisplayProtocol.h"
 12401 ;; Parameters:    Size  Location     Type
 12402 ;;		None
 12403 ;; Auto vars:     Size  Location     Type
 12404 ;;		None
 12405 ;; Return value:  Size  Location     Type
 12406 ;;                  1    wreg      void 
 12407 ;; Registers used:
 12408 ;;		wreg, status,2
 12409 ;; Tracked objects:
 12410 ;;		On entry : 0/0
 12411 ;;		On exit  : 0/0
 12412 ;;		Unchanged: 0/0
 12413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12414 ;;      Params:         0       0       0       0       0       0       0
 12415 ;;      Locals:         0       0       0       0       0       0       0
 12416 ;;      Temps:          0       0       0       0       0       0       0
 12417 ;;      Totals:         0       0       0       0       0       0       0
 12418 ;;Total ram usage:        0 bytes
 12419 ;; Hardware stack levels used:    1
 12420 ;; Hardware stack levels required when called:   12
 12421 ;; This function calls:
 12422 ;;		Nothing
 12423 ;; This function is called by:
 12424 ;;		_buttonChecking
 12425 ;; This function uses a non-reentrant model
 12426 ;;
 12427                           
 12428                           	psect	text48
 12429  006C72                     __ptext48:
 12430                           	opt stack 0
 12431  006C72                     _releaseDOWN:
 12432                           	opt stack 17
 12433                           
 12434                           ;DisplayProtocol.h: 225: DOWNisLP = 0;
 12435                           
 12436                           ; BSR set to: 1
 12437                           ;incstack = 0
 12438  006C72  0E00               	movlw	0
 12439  006C74  6E37               	movwf	_DOWNisLP,c
 12440                           
 12441                           ;DisplayProtocol.h: 226: DOWNsecurLock = 0;
 12442  006C76  0E00               	movlw	0
 12443  006C78  0101               	movlb	1	; () banked
 12444  006C7A  6FB5               	movwf	_DOWNsecurLock& (0+255),b
 12445                           
 12446                           ; BSR set to: 1
 12447  006C7C  0012               	return		;funcret
 12448  006C7E                     __end_of_releaseDOWN:
 12449                           	opt stack 0
 12450                           tblptru	equ	0xFF8
 12451                           tblptrh	equ	0xFF7
 12452                           tblptrl	equ	0xFF6
 12453                           tablat	equ	0xFF5
 12454                           prodh	equ	0xFF4
 12455                           prodl	equ	0xFF3
 12456                           intcon	equ	0xFF2
 12457                           postinc0	equ	0xFEE
 12458                           wreg	equ	0xFE8
 12459                           postdec1	equ	0xFE5
 12460                           fsr1l	equ	0xFE1
 12461                           indf2	equ	0xFDF
 12462                           postinc2	equ	0xFDE
 12463                           postdec2	equ	0xFDD
 12464                           fsr2h	equ	0xFDA
 12465                           fsr2l	equ	0xFD9
 12466                           status	equ	0xFD8
 12467                           
 12468 ;; *************** function _pressUP *****************
 12469 ;; Defined at:
 12470 ;;		line 124 in file "source/DisplayProtocol.h"
 12471 ;; Parameters:    Size  Location     Type
 12472 ;;		None
 12473 ;; Auto vars:     Size  Location     Type
 12474 ;;		None
 12475 ;; Return value:  Size  Location     Type
 12476 ;;                  1    wreg      void 
 12477 ;; Registers used:
 12478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12479 ;; Tracked objects:
 12480 ;;		On entry : 0/0
 12481 ;;		On exit  : 0/0
 12482 ;;		Unchanged: 0/0
 12483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12484 ;;      Params:         0       0       0       0       0       0       0
 12485 ;;      Locals:         0       0       0       0       0       0       0
 12486 ;;      Temps:          0       0       1       0       0       0       0
 12487 ;;      Totals:         0       0       1       0       0       0       0
 12488 ;;Total ram usage:        1 bytes
 12489 ;; Hardware stack levels used:    1
 12490 ;; Hardware stack levels required when called:   13
 12491 ;; This function calls:
 12492 ;;		_chanValDigUP
 12493 ;; This function is called by:
 12494 ;;		_buttonChecking
 12495 ;; This function uses a non-reentrant model
 12496 ;;
 12497                           
 12498                           	psect	text49
 12499  004174                     __ptext49:
 12500                           	opt stack 0
 12501  004174                     _pressUP:
 12502                           	opt stack 16
 12503                           
 12504                           ;DisplayProtocol.h: 125: if (actualScreen == 0 || actualScreen == 4) {
 12505                           
 12506                           ; BSR set to: 1
 12507                           ;incstack = 0
 12508  004174  0101               	movlb	1	; () banked
 12509  004176  51BA               	movf	_actualScreen& (0+255),w,b
 12510  004178  B4D8               	btfsc	status,2,c
 12511  00417A  D005               	goto	l11125
 12512                           
 12513                           ; BSR set to: 1
 12514  00417C  0E04               	movlw	4
 12515  00417E  0101               	movlb	1	; () banked
 12516  004180  19BA               	xorwf	_actualScreen& (0+255),w,b
 12517  004182  A4D8               	btfss	status,2,c
 12518  004184  D00C               	goto	l11131
 12519  004186                     l11125:
 12520                           
 12521                           ; BSR set to: 1
 12522                           ;DisplayProtocol.h: 126: menuSection++;
 12523  004186  0101               	movlb	1	; () banked
 12524  004188  2BC1               	incf	_menuSection& (0+255),f,b
 12525                           
 12526                           ; BSR set to: 1
 12527                           ;DisplayProtocol.h: 127: if (menuSection > 4)
 12528  00418A  0101               	movlb	1	; () banked
 12529  00418C  51C1               	movf	_menuSection& (0+255),w,b
 12530  00418E  0A80               	xorlw	128
 12531  004190  0F7B               	addlw	-133
 12532  004192  A0D8               	btfss	status,0,c
 12533  004194  0012               	return	
 12534                           
 12535                           ; BSR set to: 1
 12536                           ;DisplayProtocol.h: 128: menuSection = 0;
 12537  004196  0E00               	movlw	0
 12538  004198  0101               	movlb	1	; () banked
 12539  00419A  6FC1               	movwf	_menuSection& (0+255),b
 12540                           
 12541                           ; BSR set to: 1
 12542                           ;DisplayProtocol.h: 129: } else if (actualScreen == 1) {
 12543  00419C  0012               	return	
 12544  00419E                     l11131:
 12545                           
 12546                           ; BSR set to: 1
 12547  00419E  0101               	movlb	1	; () banked
 12548  0041A0  05BA               	decf	_actualScreen& (0+255),w,b
 12549  0041A2  A4D8               	btfss	status,2,c
 12550  0041A4  D024               	goto	l11137
 12551                           
 12552                           ; BSR set to: 1
 12553                           ;DisplayProtocol.h: 130: introducido[passSection]++;
 12554  0041A6  0101               	movlb	1	; () banked
 12555  0041A8  51C2               	movf	_passSection& (0+255),w,b
 12556  0041AA  0D01               	mullw	1
 12557  0041AC  0EA6               	movlw	low _introducido
 12558  0041AE  24F3               	addwf	prodl,w,c
 12559  0041B0  6ED9               	movwf	fsr2l,c
 12560  0041B2  0E01               	movlw	high _introducido
 12561  0041B4  20F4               	addwfc	prodh,w,c
 12562  0041B6  6EDA               	movwf	fsr2h,c
 12563  0041B8  2ADF               	incf	indf2,f,c
 12564                           
 12565                           ;DisplayProtocol.h: 131: if (introducido[passSection] > 9)
 12566  0041BA  0101               	movlb	1	; () banked
 12567  0041BC  51C2               	movf	_passSection& (0+255),w,b
 12568  0041BE  0D01               	mullw	1
 12569  0041C0  0EA6               	movlw	low _introducido
 12570  0041C2  24F3               	addwf	prodl,w,c
 12571  0041C4  6ED9               	movwf	fsr2l,c
 12572  0041C6  0E01               	movlw	high _introducido
 12573  0041C8  20F4               	addwfc	prodh,w,c
 12574  0041CA  6EDA               	movwf	fsr2h,c
 12575  0041CC  50DF               	movf	indf2,w,c
 12576  0041CE  0A80               	xorlw	128
 12577  0041D0  0F76               	addlw	-138
 12578  0041D2  A0D8               	btfss	status,0,c
 12579  0041D4  0012               	return	
 12580                           
 12581                           ; BSR set to: 1
 12582                           ;DisplayProtocol.h: 132: introducido[passSection] = 0;
 12583  0041D6  0101               	movlb	1	; () banked
 12584  0041D8  51C2               	movf	_passSection& (0+255),w,b
 12585  0041DA  0D01               	mullw	1
 12586  0041DC  0EA6               	movlw	low _introducido
 12587  0041DE  24F3               	addwf	prodl,w,c
 12588  0041E0  6ED9               	movwf	fsr2l,c
 12589  0041E2  0E01               	movlw	high _introducido
 12590  0041E4  20F4               	addwfc	prodh,w,c
 12591  0041E6  6EDA               	movwf	fsr2h,c
 12592  0041E8  0E00               	movlw	0
 12593  0041EA  6EDF               	movwf	indf2,c
 12594                           
 12595                           ; BSR set to: 1
 12596                           ;DisplayProtocol.h: 133: } else if (actualScreen == 2 || actualScreen == 3
 12597  0041EC  0012               	return	
 12598  0041EE                     l11137:
 12599                           
 12600                           ; BSR set to: 1
 12601                           ;DisplayProtocol.h: 134: || actualScreen == 10 || actualScreen == 11) {
 12602  0041EE  0E02               	movlw	2
 12603  0041F0  0101               	movlb	1	; () banked
 12604  0041F2  19BA               	xorwf	_actualScreen& (0+255),w,b
 12605  0041F4  B4D8               	btfsc	status,2,c
 12606  0041F6  D00F               	goto	l11145
 12607                           
 12608                           ; BSR set to: 1
 12609  0041F8  0E03               	movlw	3
 12610  0041FA  0101               	movlb	1	; () banked
 12611  0041FC  19BA               	xorwf	_actualScreen& (0+255),w,b
 12612  0041FE  B4D8               	btfsc	status,2,c
 12613  004200  D00A               	goto	l11145
 12614                           
 12615                           ; BSR set to: 1
 12616  004202  0E0A               	movlw	10
 12617  004204  0101               	movlb	1	; () banked
 12618  004206  19BA               	xorwf	_actualScreen& (0+255),w,b
 12619  004208  B4D8               	btfsc	status,2,c
 12620  00420A  D005               	goto	l11145
 12621                           
 12622                           ; BSR set to: 1
 12623  00420C  0E0B               	movlw	11
 12624  00420E  0101               	movlb	1	; () banked
 12625  004210  19BA               	xorwf	_actualScreen& (0+255),w,b
 12626  004212  A4D8               	btfss	status,2,c
 12627  004214  D011               	goto	l11151
 12628  004216                     l11145:
 12629                           
 12630                           ; BSR set to: 1
 12631                           ;DisplayProtocol.h: 135: selSN = !selSN;
 12632  004216  0101               	movlb	1	; () banked
 12633  004218  51C3               	movf	_selSN& (0+255),w,b
 12634  00421A  A4D8               	btfss	status,2,c
 12635  00421C  D002               	goto	u15920
 12636  00421E  0E01               	movlw	1
 12637  004220  D001               	goto	u15930
 12638  004222                     u15920:
 12639  004222  0E00               	movlw	0
 12640  004224                     u15930:
 12641  004224  0101               	movlb	1	; () banked
 12642  004226  6FC3               	movwf	_selSN& (0+255),b
 12643                           
 12644                           ; BSR set to: 1
 12645                           ;DisplayProtocol.h: 136: if(selSN > 1)
 12646  004228  0E01               	movlw	1
 12647  00422A  0101               	movlb	1	; () banked
 12648  00422C  65C3               	cpfsgt	_selSN& (0+255),b
 12649  00422E  0012               	return	
 12650                           
 12651                           ; BSR set to: 1
 12652                           ;DisplayProtocol.h: 137: selSN = 0;
 12653  004230  0E00               	movlw	0
 12654  004232  0101               	movlb	1	; () banked
 12655  004234  6FC3               	movwf	_selSN& (0+255),b
 12656                           
 12657                           ; BSR set to: 1
 12658                           ;DisplayProtocol.h: 138: }else if(actualScreen == 5) {
 12659  004236  0012               	return	
 12660  004238                     l11151:
 12661                           
 12662                           ; BSR set to: 1
 12663  004238  0E05               	movlw	5
 12664  00423A  0101               	movlb	1	; () banked
 12665  00423C  19BA               	xorwf	_actualScreen& (0+255),w,b
 12666  00423E  B4D8               	btfsc	status,2,c
 12667  004240  D00B               	goto	l11163
 12668  004242  D019               	goto	l11165
 12669  004244                     l11155:
 12670                           
 12671                           ; BSR set to: 1
 12672                           ;DisplayProtocol.h: 143: chanValDigUP();
 12673  004244  ECC6  F025         	call	_chanValDigUP	;wreg free
 12674                           
 12675                           ;DisplayProtocol.h: 144: break;
 12676  004248  0012               	return	
 12677  00424A                     l11157:
 12678                           
 12679                           ;DisplayProtocol.h: 146: chanVals++;
 12680  00424A  0101               	movlb	1	; () banked
 12681  00424C  4BB1               	infsnz	_chanVals& (0+255),f,b
 12682  00424E  2BB2               	incf	(_chanVals+1)& (0+255),f,b
 12683                           
 12684                           ;DisplayProtocol.h: 147: break;
 12685  004250  0012               	return	
 12686  004252                     l11159:
 12687                           
 12688                           ; BSR set to: 1
 12689                           ;DisplayProtocol.h: 149: chanValDigUP();
 12690  004252  ECC6  F025         	call	_chanValDigUP	;wreg free
 12691                           
 12692                           ;DisplayProtocol.h: 151: }
 12693                           ;DisplayProtocol.h: 152: }
 12694                           
 12695                           ;DisplayProtocol.h: 150: break;
 12696  004256  0012               	return	
 12697  004258                     l11163:
 12698  004258  0101               	movlb	1	; () banked
 12699  00425A  51C1               	movf	_menuSection& (0+255),w,b
 12700                           
 12701                           ; Switch size 1, requested type "space"
 12702                           ; Number of cases is 4, Range of values is 0 to 3
 12703                           ; switch strategies available:
 12704                           ; Name         Instructions Cycles
 12705                           ; simple_byte           13     7 (average)
 12706                           ;	Chosen strategy is simple_byte
 12707  00425C  0A00               	xorlw	0	; case 0
 12708  00425E  B4D8               	btfsc	status,2,c
 12709  004260  0012               	return	
 12710  004262  0A01               	xorlw	1	; case 1
 12711  004264  B4D8               	btfsc	status,2,c
 12712  004266  D7EE               	goto	l11155
 12713  004268  0A03               	xorlw	3	; case 2
 12714  00426A  B4D8               	btfsc	status,2,c
 12715  00426C  D7EE               	goto	l11157
 12716  00426E  0A01               	xorlw	1	; case 3
 12717  004270  A4D8               	btfss	status,2,c
 12718                           
 12719                           ; BSR set to: 1
 12720                           ;DisplayProtocol.h: 153: }else if(actualScreen == 12)
 12721  004272  0012               	return	
 12722  004274  D7EE               	goto	l11159
 12723  004276                     l11165:
 12724                           
 12725                           ; BSR set to: 1
 12726  004276  0E0C               	movlw	12
 12727  004278  0101               	movlb	1	; () banked
 12728  00427A  19BA               	xorwf	_actualScreen& (0+255),w,b
 12729  00427C  A4D8               	btfss	status,2,c
 12730  00427E  0012               	return	
 12731                           
 12732                           ; BSR set to: 1
 12733                           ;DisplayProtocol.h: 154: chanValDigUP();
 12734  004280  ECC6  F025         	call	_chanValDigUP	;wreg free
 12735  004284  0012               	return	
 12736  004286                     __end_of_pressUP:
 12737                           	opt stack 0
 12738                           tblptru	equ	0xFF8
 12739                           tblptrh	equ	0xFF7
 12740                           tblptrl	equ	0xFF6
 12741                           tablat	equ	0xFF5
 12742                           prodh	equ	0xFF4
 12743                           prodl	equ	0xFF3
 12744                           intcon	equ	0xFF2
 12745                           postinc0	equ	0xFEE
 12746                           wreg	equ	0xFE8
 12747                           postdec1	equ	0xFE5
 12748                           fsr1l	equ	0xFE1
 12749                           indf2	equ	0xFDF
 12750                           postinc2	equ	0xFDE
 12751                           postdec2	equ	0xFDD
 12752                           fsr2h	equ	0xFDA
 12753                           fsr2l	equ	0xFD9
 12754                           status	equ	0xFD8
 12755                           
 12756 ;; *************** function _chanValDigUP *****************
 12757 ;; Defined at:
 12758 ;;		line 28 in file "source/DisplayProtocol.h"
 12759 ;; Parameters:    Size  Location     Type
 12760 ;;		None
 12761 ;; Auto vars:     Size  Location     Type
 12762 ;;		None
 12763 ;; Return value:  Size  Location     Type
 12764 ;;                  1    wreg      void 
 12765 ;; Registers used:
 12766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12767 ;; Tracked objects:
 12768 ;;		On entry : 0/0
 12769 ;;		On exit  : 0/0
 12770 ;;		Unchanged: 0/0
 12771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12772 ;;      Params:         0       0       0       0       0       0       0
 12773 ;;      Locals:         0       0       0       0       0       0       0
 12774 ;;      Temps:          0       0       5       0       0       0       0
 12775 ;;      Totals:         0       0       5       0       0       0       0
 12776 ;;Total ram usage:        5 bytes
 12777 ;; Hardware stack levels used:    1
 12778 ;; Hardware stack levels required when called:   12
 12779 ;; This function calls:
 12780 ;;		Nothing
 12781 ;; This function is called by:
 12782 ;;		_pressUP
 12783 ;; This function uses a non-reentrant model
 12784 ;;
 12785                           
 12786                           	psect	text50
 12787  004B8C                     __ptext50:
 12788                           	opt stack 0
 12789  004B8C                     _chanValDigUP:
 12790                           	opt stack 16
 12791                           
 12792                           ;DisplayProtocol.h: 29: chanValdig[chanValSection]++;
 12793                           
 12794                           ;incstack = 0
 12795  004B8C  0101               	movlb	1	; () banked
 12796  004B8E  5194               	movf	_chanValSection& (0+255),w,b
 12797  004B90  0D01               	mullw	1
 12798  004B92  0EA0               	movlw	low _chanValdig
 12799  004B94  24F3               	addwf	prodl,w,c
 12800  004B96  6ED9               	movwf	fsr2l,c
 12801  004B98  0E01               	movlw	high _chanValdig
 12802  004B9A  20F4               	addwfc	prodh,w,c
 12803  004B9C  6EDA               	movwf	fsr2h,c
 12804  004B9E  2ADF               	incf	indf2,f,c
 12805                           
 12806                           ;DisplayProtocol.h: 30: if(chanValdig[chanValSection] > 9) {
 12807  004BA0  0101               	movlb	1	; () banked
 12808  004BA2  5194               	movf	_chanValSection& (0+255),w,b
 12809  004BA4  0D01               	mullw	1
 12810  004BA6  0EA0               	movlw	low _chanValdig
 12811  004BA8  24F3               	addwf	prodl,w,c
 12812  004BAA  6ED9               	movwf	fsr2l,c
 12813  004BAC  0E01               	movlw	high _chanValdig
 12814  004BAE  20F4               	addwfc	prodh,w,c
 12815  004BB0  6EDA               	movwf	fsr2h,c
 12816  004BB2  50DF               	movf	indf2,w,c
 12817  004BB4  0A80               	xorlw	128
 12818  004BB6  0F76               	addlw	-138
 12819  004BB8  A0D8               	btfss	status,0,c
 12820  004BBA  0012               	return	
 12821                           
 12822                           ; BSR set to: 1
 12823                           ;DisplayProtocol.h: 31: chanValdig[chanValSection] = 0;
 12824  004BBC  0101               	movlb	1	; () banked
 12825  004BBE  5194               	movf	_chanValSection& (0+255),w,b
 12826  004BC0  0D01               	mullw	1
 12827  004BC2  0EA0               	movlw	low _chanValdig
 12828  004BC4  24F3               	addwf	prodl,w,c
 12829  004BC6  6ED9               	movwf	fsr2l,c
 12830  004BC8  0E01               	movlw	high _chanValdig
 12831  004BCA  20F4               	addwfc	prodh,w,c
 12832  004BCC  6EDA               	movwf	fsr2h,c
 12833  004BCE  0E00               	movlw	0
 12834  004BD0  6EDF               	movwf	indf2,c
 12835                           
 12836                           ; BSR set to: 1
 12837                           ;DisplayProtocol.h: 32: if(chanValSection > 1 && chanValdig[chanValSection - 1] < 9)
 12838  004BD2  0101               	movlb	1	; () banked
 12839  004BD4  5194               	movf	_chanValSection& (0+255),w,b
 12840  004BD6  0A80               	xorlw	128
 12841  004BD8  0F7E               	addlw	-130
 12842  004BDA  A0D8               	btfss	status,0,c
 12843  004BDC  0012               	return	
 12844                           
 12845                           ; BSR set to: 1
 12846  004BDE  0EFF               	movlw	255
 12847  004BE0  0101               	movlb	1	; () banked
 12848  004BE2  6F00               	movwf	??_chanValDigUP& (0+255),b
 12849  004BE4  0EFF               	movlw	255
 12850  004BE6  0101               	movlb	1	; () banked
 12851  004BE8  6F01               	movwf	(??_chanValDigUP+1)& (0+255),b
 12852  004BEA  C194  F102         	movff	_chanValSection,??_chanValDigUP+2
 12853  004BEE  0101               	movlb	1	; () banked
 12854  004BF0  6B03               	clrf	(??_chanValDigUP+3)& (0+255),b
 12855  004BF2  BF02               	btfsc	(??_chanValDigUP+2)& (0+255),7,b
 12856  004BF4  0703               	decf	(??_chanValDigUP+3)& (0+255),f,b
 12857  004BF6  0101               	movlb	1	; () banked
 12858  004BF8  5100               	movf	??_chanValDigUP& (0+255),w,b
 12859  004BFA  0101               	movlb	1	; () banked
 12860  004BFC  2702               	addwf	(??_chanValDigUP+2)& (0+255),f,b
 12861  004BFE  0101               	movlb	1	; () banked
 12862  004C00  5101               	movf	(??_chanValDigUP+1)& (0+255),w,b
 12863  004C02  0101               	movlb	1	; () banked
 12864  004C04  2303               	addwfc	(??_chanValDigUP+3)& (0+255),f,b
 12865  004C06  0EA0               	movlw	low _chanValdig
 12866  004C08  0101               	movlb	1	; () banked
 12867  004C0A  2502               	addwf	(??_chanValDigUP+2)& (0+255),w,b
 12868  004C0C  6ED9               	movwf	fsr2l,c
 12869  004C0E  0E01               	movlw	high _chanValdig
 12870  004C10  0101               	movlb	1	; () banked
 12871  004C12  2103               	addwfc	(??_chanValDigUP+3)& (0+255),w,b
 12872  004C14  6EDA               	movwf	fsr2h,c
 12873  004C16  50DF               	movf	indf2,w,c
 12874  004C18  0A80               	xorlw	128
 12875  004C1A  0F77               	addlw	-137
 12876  004C1C  B0D8               	btfsc	status,0,c
 12877  004C1E  0012               	return	
 12878                           
 12879                           ; BSR set to: 1
 12880                           ;DisplayProtocol.h: 33: chanValdig[chanValSection - 1]++;
 12881  004C20  0EFF               	movlw	255
 12882  004C22  0101               	movlb	1	; () banked
 12883  004C24  6F00               	movwf	??_chanValDigUP& (0+255),b
 12884  004C26  0EFF               	movlw	255
 12885  004C28  0101               	movlb	1	; () banked
 12886  004C2A  6F01               	movwf	(??_chanValDigUP+1)& (0+255),b
 12887  004C2C  C194  F102         	movff	_chanValSection,??_chanValDigUP+2
 12888  004C30  0101               	movlb	1	; () banked
 12889  004C32  6B03               	clrf	(??_chanValDigUP+3)& (0+255),b
 12890  004C34  BF02               	btfsc	(??_chanValDigUP+2)& (0+255),7,b
 12891  004C36  0703               	decf	(??_chanValDigUP+3)& (0+255),f,b
 12892  004C38  0101               	movlb	1	; () banked
 12893  004C3A  5100               	movf	??_chanValDigUP& (0+255),w,b
 12894  004C3C  0101               	movlb	1	; () banked
 12895  004C3E  2702               	addwf	(??_chanValDigUP+2)& (0+255),f,b
 12896  004C40  0101               	movlb	1	; () banked
 12897  004C42  5101               	movf	(??_chanValDigUP+1)& (0+255),w,b
 12898  004C44  0101               	movlb	1	; () banked
 12899  004C46  2303               	addwfc	(??_chanValDigUP+3)& (0+255),f,b
 12900  004C48  0EA0               	movlw	low _chanValdig
 12901  004C4A  0101               	movlb	1	; () banked
 12902  004C4C  2502               	addwf	(??_chanValDigUP+2)& (0+255),w,b
 12903  004C4E  6ED9               	movwf	fsr2l,c
 12904  004C50  0E01               	movlw	high _chanValdig
 12905  004C52  0101               	movlb	1	; () banked
 12906  004C54  2103               	addwfc	(??_chanValDigUP+3)& (0+255),w,b
 12907  004C56  6EDA               	movwf	fsr2h,c
 12908  004C58  2ADF               	incf	indf2,f,c
 12909                           
 12910                           ; BSR set to: 1
 12911  004C5A  0012               	return	
 12912  004C5C                     __end_of_chanValDigUP:
 12913                           	opt stack 0
 12914                           tblptru	equ	0xFF8
 12915                           tblptrh	equ	0xFF7
 12916                           tblptrl	equ	0xFF6
 12917                           tablat	equ	0xFF5
 12918                           prodh	equ	0xFF4
 12919                           prodl	equ	0xFF3
 12920                           intcon	equ	0xFF2
 12921                           postinc0	equ	0xFEE
 12922                           wreg	equ	0xFE8
 12923                           postdec1	equ	0xFE5
 12924                           fsr1l	equ	0xFE1
 12925                           indf2	equ	0xFDF
 12926                           postinc2	equ	0xFDE
 12927                           postdec2	equ	0xFDD
 12928                           fsr2h	equ	0xFDA
 12929                           fsr2l	equ	0xFD9
 12930                           status	equ	0xFD8
 12931                           
 12932 ;; *************** function _pressRETRO *****************
 12933 ;; Defined at:
 12934 ;;		line 229 in file "source/DisplayProtocol.h"
 12935 ;; Parameters:    Size  Location     Type
 12936 ;;		None
 12937 ;; Auto vars:     Size  Location     Type
 12938 ;;		None
 12939 ;; Return value:  Size  Location     Type
 12940 ;;                  1    wreg      void 
 12941 ;; Registers used:
 12942 ;;		wreg, status,2, status,0
 12943 ;; Tracked objects:
 12944 ;;		On entry : 0/0
 12945 ;;		On exit  : 0/0
 12946 ;;		Unchanged: 0/0
 12947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 12948 ;;      Params:         0       0       0       0       0       0       0
 12949 ;;      Locals:         0       0       0       0       0       0       0
 12950 ;;      Temps:          0       0       0       0       0       0       0
 12951 ;;      Totals:         0       0       0       0       0       0       0
 12952 ;;Total ram usage:        0 bytes
 12953 ;; Hardware stack levels used:    1
 12954 ;; Hardware stack levels required when called:   12
 12955 ;; This function calls:
 12956 ;;		Nothing
 12957 ;; This function is called by:
 12958 ;;		_buttonChecking
 12959 ;; This function uses a non-reentrant model
 12960 ;;
 12961                           
 12962                           	psect	text51
 12963  00590C                     __ptext51:
 12964                           	opt stack 0
 12965  00590C                     _pressRETRO:
 12966                           	opt stack 17
 12967                           
 12968                           ;DisplayProtocol.h: 230: if (actualScreen == 1) {
 12969                           
 12970                           ; BSR set to: 1
 12971                           ;incstack = 0
 12972  00590C  0101               	movlb	1	; () banked
 12973  00590E  05BA               	decf	_actualScreen& (0+255),w,b
 12974  005910  A4D8               	btfss	status,2,c
 12975  005912  D004               	goto	l11259
 12976                           
 12977                           ; BSR set to: 1
 12978                           ;DisplayProtocol.h: 231: actualScreen = 0;
 12979  005914  0E00               	movlw	0
 12980  005916  0101               	movlb	1	; () banked
 12981  005918  6FBA               	movwf	_actualScreen& (0+255),b
 12982                           
 12983                           ;DisplayProtocol.h: 232: }else if (actualScreen == 2 || actualScreen == 3
 12984  00591A  0012               	return	
 12985  00591C                     l11259:
 12986                           
 12987                           ; BSR set to: 1
 12988                           ;DisplayProtocol.h: 233: || actualScreen == 10) {
 12989  00591C  0E02               	movlw	2
 12990  00591E  0101               	movlb	1	; () banked
 12991  005920  19BA               	xorwf	_actualScreen& (0+255),w,b
 12992  005922  B4D8               	btfsc	status,2,c
 12993  005924  D00A               	goto	l644
 12994                           
 12995                           ; BSR set to: 1
 12996  005926  0E03               	movlw	3
 12997  005928  0101               	movlb	1	; () banked
 12998  00592A  19BA               	xorwf	_actualScreen& (0+255),w,b
 12999  00592C  B4D8               	btfsc	status,2,c
 13000  00592E  D005               	goto	l644
 13001                           
 13002                           ; BSR set to: 1
 13003  005930  0E0A               	movlw	10
 13004  005932  0101               	movlb	1	; () banked
 13005  005934  19BA               	xorwf	_actualScreen& (0+255),w,b
 13006  005936  A4D8               	btfss	status,2,c
 13007  005938  D003               	goto	l11265
 13008  00593A                     l644:
 13009                           
 13010                           ; BSR set to: 1
 13011                           ;DisplayProtocol.h: 234: actualScreen = tempLastScreen;
 13012  00593A  C0CB  F1BA         	movff	_tempLastScreen,_actualScreen
 13013                           
 13014                           ;DisplayProtocol.h: 235: }else if(actualScreen == 5) {
 13015  00593E  0012               	return	
 13016  005940                     l11265:
 13017                           
 13018                           ; BSR set to: 1
 13019  005940  0E05               	movlw	5
 13020  005942  0101               	movlb	1	; () banked
 13021  005944  19BA               	xorwf	_actualScreen& (0+255),w,b
 13022  005946  A4D8               	btfss	status,2,c
 13023  005948  D015               	goto	l11277
 13024                           
 13025                           ; BSR set to: 1
 13026                           ;DisplayProtocol.h: 236: if(menuSection != 2) {
 13027  00594A  0E02               	movlw	2
 13028  00594C  0101               	movlb	1	; () banked
 13029  00594E  19C1               	xorwf	_menuSection& (0+255),w,b
 13030  005950  B4D8               	btfsc	status,2,c
 13031  005952  D00C               	goto	l11275
 13032                           
 13033                           ; BSR set to: 1
 13034                           ;DisplayProtocol.h: 237: chanValSection++;
 13035  005954  0101               	movlb	1	; () banked
 13036  005956  2B94               	incf	_chanValSection& (0+255),f,b
 13037                           
 13038                           ; BSR set to: 1
 13039                           ;DisplayProtocol.h: 238: if(chanValSection > 5)
 13040  005958  0101               	movlb	1	; () banked
 13041  00595A  5194               	movf	_chanValSection& (0+255),w,b
 13042  00595C  0A80               	xorlw	128
 13043  00595E  0F7A               	addlw	-134
 13044  005960  A0D8               	btfss	status,0,c
 13045  005962  0012               	return	
 13046                           
 13047                           ; BSR set to: 1
 13048                           ;DisplayProtocol.h: 239: chanValSection = 0;
 13049  005964  0E00               	movlw	0
 13050  005966  0101               	movlb	1	; () banked
 13051  005968  6F94               	movwf	_chanValSection& (0+255),b
 13052                           
 13053                           ; BSR set to: 1
 13054                           ;DisplayProtocol.h: 240: }else
 13055  00596A  0012               	return	
 13056  00596C                     l11275:
 13057                           
 13058                           ; BSR set to: 1
 13059                           ;DisplayProtocol.h: 241: actualScreen = 4;
 13060  00596C  0E04               	movlw	4
 13061  00596E  0101               	movlb	1	; () banked
 13062  005970  6FBA               	movwf	_actualScreen& (0+255),b
 13063                           
 13064                           ; BSR set to: 1
 13065                           ;DisplayProtocol.h: 242: }else if(actualScreen == 11)
 13066  005972  0012               	return	
 13067  005974                     l11277:
 13068                           
 13069                           ; BSR set to: 1
 13070  005974  0E0B               	movlw	11
 13071  005976  0101               	movlb	1	; () banked
 13072  005978  19BA               	xorwf	_actualScreen& (0+255),w,b
 13073  00597A  A4D8               	btfss	status,2,c
 13074  00597C  D004               	goto	l11281
 13075                           
 13076                           ; BSR set to: 1
 13077                           ;DisplayProtocol.h: 243: actualScreen = 4;
 13078  00597E  0E04               	movlw	4
 13079  005980  0101               	movlb	1	; () banked
 13080  005982  6FBA               	movwf	_actualScreen& (0+255),b
 13081  005984  0012               	return	
 13082  005986                     l11281:
 13083                           
 13084                           ; BSR set to: 1
 13085                           ;DisplayProtocol.h: 244: else if(actualScreen == 12) {
 13086  005986  0E0C               	movlw	12
 13087  005988  0101               	movlb	1	; () banked
 13088  00598A  19BA               	xorwf	_actualScreen& (0+255),w,b
 13089  00598C  A4D8               	btfss	status,2,c
 13090  00598E  0012               	return	
 13091                           
 13092                           ; BSR set to: 1
 13093                           ;DisplayProtocol.h: 245: chanValSection++;
 13094  005990  0101               	movlb	1	; () banked
 13095  005992  2B94               	incf	_chanValSection& (0+255),f,b
 13096                           
 13097                           ; BSR set to: 1
 13098                           ;DisplayProtocol.h: 246: if(chanValSection > 5)
 13099  005994  0101               	movlb	1	; () banked
 13100  005996  5194               	movf	_chanValSection& (0+255),w,b
 13101  005998  0A80               	xorlw	128
 13102  00599A  0F7A               	addlw	-134
 13103  00599C  A0D8               	btfss	status,0,c
 13104  00599E  0012               	return	
 13105                           
 13106                           ; BSR set to: 1
 13107                           ;DisplayProtocol.h: 247: chanValSection = 0;
 13108  0059A0  0E00               	movlw	0
 13109  0059A2  0101               	movlb	1	; () banked
 13110  0059A4  6F94               	movwf	_chanValSection& (0+255),b
 13111                           
 13112                           ; BSR set to: 1
 13113                           
 13114                           ; BSR set to: 1
 13115                           
 13116                           ; BSR set to: 1
 13117                           
 13118                           ; BSR set to: 1
 13119                           
 13120                           ; BSR set to: 1
 13121  0059A6  0012               	return	
 13122  0059A8                     __end_of_pressRETRO:
 13123                           	opt stack 0
 13124                           tblptru	equ	0xFF8
 13125                           tblptrh	equ	0xFF7
 13126                           tblptrl	equ	0xFF6
 13127                           tablat	equ	0xFF5
 13128                           prodh	equ	0xFF4
 13129                           prodl	equ	0xFF3
 13130                           intcon	equ	0xFF2
 13131                           postinc0	equ	0xFEE
 13132                           wreg	equ	0xFE8
 13133                           postdec1	equ	0xFE5
 13134                           fsr1l	equ	0xFE1
 13135                           indf2	equ	0xFDF
 13136                           postinc2	equ	0xFDE
 13137                           postdec2	equ	0xFDD
 13138                           fsr2h	equ	0xFDA
 13139                           fsr2l	equ	0xFD9
 13140                           status	equ	0xFD8
 13141                           
 13142 ;; *************** function _pressENTER *****************
 13143 ;; Defined at:
 13144 ;;		line 273 in file "source/DisplayProtocol.h"
 13145 ;; Parameters:    Size  Location     Type
 13146 ;;		None
 13147 ;; Auto vars:     Size  Location     Type
 13148 ;;		None
 13149 ;; Return value:  Size  Location     Type
 13150 ;;                  1    wreg      void 
 13151 ;; Registers used:
 13152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13153 ;; Tracked objects:
 13154 ;;		On entry : 0/0
 13155 ;;		On exit  : 0/0
 13156 ;;		Unchanged: 0/0
 13157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13158 ;;      Params:         0       0       0       0       0       0       0
 13159 ;;      Locals:         0       0       0       0       0       0       0
 13160 ;;      Temps:          0       0       0       0       0       0       0
 13161 ;;      Totals:         0       0       0       0       0       0       0
 13162 ;;Total ram usage:        0 bytes
 13163 ;; Hardware stack levels used:    1
 13164 ;; Hardware stack levels required when called:   17
 13165 ;; This function calls:
 13166 ;;		_checkPass
 13167 ;;		_confirmEdition
 13168 ;;		_desintegrator
 13169 ;;		_setPWM2duty
 13170 ;; This function is called by:
 13171 ;;		_buttonChecking
 13172 ;; This function uses a non-reentrant model
 13173 ;;
 13174                           
 13175                           	psect	text52
 13176  001A42                     __ptext52:
 13177                           	opt stack 0
 13178  001A42                     _pressENTER:
 13179                           	opt stack 12
 13180                           
 13181                           ;DisplayProtocol.h: 274: if (actualScreen == 1) {
 13182                           
 13183                           ; BSR set to: 1
 13184                           ;incstack = 0
 13185  001A42  0101               	movlb	1	; () banked
 13186  001A44  05BA               	decf	_actualScreen& (0+255),w,b
 13187  001A46  A4D8               	btfss	status,2,c
 13188  001A48  D018               	goto	l11325
 13189                           
 13190                           ; BSR set to: 1
 13191                           ;DisplayProtocol.h: 275: passSection++;
 13192  001A4A  0101               	movlb	1	; () banked
 13193  001A4C  2BC2               	incf	_passSection& (0+255),f,b
 13194                           
 13195                           ; BSR set to: 1
 13196                           ;DisplayProtocol.h: 276: if (passSection > 3) {
 13197  001A4E  0101               	movlb	1	; () banked
 13198  001A50  51C2               	movf	_passSection& (0+255),w,b
 13199  001A52  0A80               	xorlw	128
 13200  001A54  0F7C               	addlw	-132
 13201  001A56  A0D8               	btfss	status,0,c
 13202  001A58  0012               	return	
 13203                           
 13204                           ; BSR set to: 1
 13205                           ;DisplayProtocol.h: 277: passSection = 0;
 13206  001A5A  0E00               	movlw	0
 13207  001A5C  0101               	movlb	1	; () banked
 13208  001A5E  6FC2               	movwf	_passSection& (0+255),b
 13209                           
 13210                           ; BSR set to: 1
 13211                           ;DisplayProtocol.h: 278: if (checkPass())
 13212  001A60  ECDB  F02E         	call	_checkPass	;wreg free
 13213  001A64  0900               	iorlw	0
 13214  001A66  B4D8               	btfsc	status,2,c
 13215  001A68  D004               	goto	l11323
 13216                           
 13217                           ;DisplayProtocol.h: 279: actualScreen = 8;
 13218  001A6A  0E08               	movlw	8
 13219  001A6C  0101               	movlb	1	; () banked
 13220  001A6E  6FBA               	movwf	_actualScreen& (0+255),b
 13221  001A70  0012               	return	
 13222  001A72                     l11323:
 13223                           
 13224                           ;DisplayProtocol.h: 280: else
 13225                           ;DisplayProtocol.h: 281: actualScreen = 7;
 13226  001A72  0E07               	movlw	7
 13227  001A74  0101               	movlb	1	; () banked
 13228  001A76  6FBA               	movwf	_actualScreen& (0+255),b
 13229                           
 13230                           ; BSR set to: 1
 13231                           ;DisplayProtocol.h: 282: }
 13232                           ;DisplayProtocol.h: 283: }else if(actualScreen == 4) {
 13233                           
 13234                           ; BSR set to: 1
 13235  001A78  0012               	return	
 13236  001A7A                     l11325:
 13237                           
 13238                           ; BSR set to: 1
 13239  001A7A  0E04               	movlw	4
 13240  001A7C  0101               	movlb	1	; () banked
 13241  001A7E  19BA               	xorwf	_actualScreen& (0+255),w,b
 13242  001A80  B4D8               	btfsc	status,2,c
 13243  001A82  D042               	goto	l11353
 13244  001A84  D053               	goto	l11355
 13245  001A86                     l680:
 13246                           
 13247                           ; BSR set to: 1
 13248                           ;DisplayProtocol.h: 286: tempLastScreen = actualScreen;
 13249  001A86  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 13250                           
 13251                           ; BSR set to: 1
 13252                           ;DisplayProtocol.h: 287: if(ProcessStarted) {
 13253  001A8A  503A               	movf	_ProcessStarted,w,c
 13254  001A8C  B4D8               	btfsc	status,2,c
 13255  001A8E  D007               	goto	l11333
 13256                           
 13257                           ; BSR set to: 1
 13258                           ;DisplayProtocol.h: 288: actualScreen = 3;
 13259  001A90  0E03               	movlw	3
 13260  001A92  0101               	movlb	1	; () banked
 13261  001A94  6FBA               	movwf	_actualScreen& (0+255),b
 13262                           
 13263                           ;DisplayProtocol.h: 289: selSN = 0;
 13264  001A96  0E00               	movlw	0
 13265  001A98  0101               	movlb	1	; () banked
 13266  001A9A  6FC3               	movwf	_selSN& (0+255),b
 13267                           
 13268                           ;DisplayProtocol.h: 290: }else {
 13269  001A9C  0012               	return	
 13270  001A9E                     l11333:
 13271                           
 13272                           ; BSR set to: 1
 13273                           ;DisplayProtocol.h: 291: actualScreen = 2;
 13274  001A9E  0E02               	movlw	2
 13275  001AA0  0101               	movlb	1	; () banked
 13276  001AA2  6FBA               	movwf	_actualScreen& (0+255),b
 13277                           
 13278                           ;DisplayProtocol.h: 292: selSN = 1;
 13279  001AA4  0E01               	movlw	1
 13280  001AA6  0101               	movlb	1	; () banked
 13281  001AA8  6FC3               	movwf	_selSN& (0+255),b
 13282                           
 13283                           ; BSR set to: 1
 13284                           ;DisplayProtocol.h: 293: }
 13285                           ;DisplayProtocol.h: 294: break;
 13286  001AAA  0012               	return	
 13287  001AAC                     l684:
 13288                           
 13289                           ; BSR set to: 1
 13290                           ;DisplayProtocol.h: 296: chanValf = kgXcorte;
 13291  001AAC  C0AC  F1AE         	movff	_kgXcorte,_chanValf
 13292  001AB0  C0AD  F1AF         	movff	_kgXcorte+1,_chanValf+1
 13293  001AB4  C0AE  F1B0         	movff	_kgXcorte+2,_chanValf+2
 13294                           
 13295                           ; BSR set to: 1
 13296                           ;DisplayProtocol.h: 297: desintegrator();
 13297  001AB8  EC00  F016         	call	_desintegrator	;wreg free
 13298                           
 13299                           ;DisplayProtocol.h: 298: actualScreen = 5;
 13300  001ABC  0E05               	movlw	5
 13301  001ABE  0101               	movlb	1	; () banked
 13302  001AC0  6FBA               	movwf	_actualScreen& (0+255),b
 13303                           
 13304                           ;DisplayProtocol.h: 299: break;
 13305  001AC2  0012               	return	
 13306  001AC4                     l685:
 13307                           
 13308                           ; BSR set to: 1
 13309                           ;DisplayProtocol.h: 301: tempLastScreen = actualScreen;
 13310  001AC4  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 13311                           
 13312                           ;DisplayProtocol.h: 302: chanVals = numCortes;
 13313  001AC8  C0B8  F1B1         	movff	_numCortes,_chanVals
 13314  001ACC  C0B9  F1B2         	movff	_numCortes+1,_chanVals+1
 13315                           
 13316                           ; BSR set to: 1
 13317                           ;DisplayProtocol.h: 303: actualScreen = 5;
 13318  001AD0  0E05               	movlw	5
 13319  001AD2  0101               	movlb	1	; () banked
 13320  001AD4  6FBA               	movwf	_actualScreen& (0+255),b
 13321                           
 13322                           ;DisplayProtocol.h: 304: break;
 13323  001AD6  0012               	return	
 13324  001AD8                     l686:
 13325                           
 13326                           ; BSR set to: 1
 13327                           ;DisplayProtocol.h: 306: chanValf = diamTubo;
 13328  001AD8  C0A9  F1AE         	movff	_diamTubo,_chanValf
 13329  001ADC  C0AA  F1AF         	movff	_diamTubo+1,_chanValf+1
 13330  001AE0  C0AB  F1B0         	movff	_diamTubo+2,_chanValf+2
 13331                           
 13332                           ; BSR set to: 1
 13333                           ;DisplayProtocol.h: 307: desintegrator();
 13334  001AE4  EC00  F016         	call	_desintegrator	;wreg free
 13335                           
 13336                           ;DisplayProtocol.h: 308: actualScreen = 5;
 13337  001AE8  0E05               	movlw	5
 13338  001AEA  0101               	movlb	1	; () banked
 13339  001AEC  6FBA               	movwf	_actualScreen& (0+255),b
 13340                           
 13341                           ;DisplayProtocol.h: 309: break;
 13342  001AEE  0012               	return	
 13343  001AF0                     l11345:
 13344                           
 13345                           ; BSR set to: 1
 13346                           ;DisplayProtocol.h: 311: if(!ProcessStarted) {
 13347  001AF0  503A               	movf	_ProcessStarted,w,c
 13348  001AF2  A4D8               	btfss	status,2,c
 13349  001AF4  0012               	return	
 13350                           
 13351                           ; BSR set to: 1
 13352                           ;DisplayProtocol.h: 312: tempLastScreen = actualScreen;
 13353  001AF6  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 13354                           
 13355                           ; BSR set to: 1
 13356                           ;DisplayProtocol.h: 313: selSN = 1;
 13357  001AFA  0E01               	movlw	1
 13358  001AFC  0101               	movlb	1	; () banked
 13359  001AFE  6FC3               	movwf	_selSN& (0+255),b
 13360                           
 13361                           ;DisplayProtocol.h: 314: actualScreen = 11;
 13362  001B00  0E0B               	movlw	11
 13363  001B02  0101               	movlb	1	; () banked
 13364  001B04  6FBA               	movwf	_actualScreen& (0+255),b
 13365                           
 13366                           ; BSR set to: 1
 13367                           ;DisplayProtocol.h: 317: }
 13368                           ;DisplayProtocol.h: 318: }
 13369                           
 13370                           ; BSR set to: 1
 13371                           ;DisplayProtocol.h: 315: }
 13372                           ;DisplayProtocol.h: 316: break;
 13373  001B06  0012               	return	
 13374  001B08                     l11353:
 13375                           
 13376                           ; BSR set to: 1
 13377  001B08  0101               	movlb	1	; () banked
 13378  001B0A  51C1               	movf	_menuSection& (0+255),w,b
 13379                           
 13380                           ; Switch size 1, requested type "space"
 13381                           ; Number of cases is 5, Range of values is 0 to 4
 13382                           ; switch strategies available:
 13383                           ; Name         Instructions Cycles
 13384                           ; simple_byte           16     9 (average)
 13385                           ;	Chosen strategy is simple_byte
 13386  001B0C  0A00               	xorlw	0	; case 0
 13387  001B0E  B4D8               	btfsc	status,2,c
 13388  001B10  D7BA               	goto	l680
 13389  001B12  0A01               	xorlw	1	; case 1
 13390  001B14  B4D8               	btfsc	status,2,c
 13391  001B16  D7CA               	goto	l684
 13392  001B18  0A03               	xorlw	3	; case 2
 13393  001B1A  B4D8               	btfsc	status,2,c
 13394  001B1C  D7D3               	goto	l685
 13395  001B1E  0A01               	xorlw	1	; case 3
 13396  001B20  B4D8               	btfsc	status,2,c
 13397  001B22  D7DA               	goto	l686
 13398  001B24  0A07               	xorlw	7	; case 4
 13399  001B26  A4D8               	btfss	status,2,c
 13400                           
 13401                           ; BSR set to: 1
 13402                           ;DisplayProtocol.h: 319: }else if(actualScreen == 7)
 13403  001B28  0012               	return	
 13404  001B2A  D7E2               	goto	l11345
 13405  001B2C                     l11355:
 13406                           
 13407                           ; BSR set to: 1
 13408  001B2C  0E07               	movlw	7
 13409  001B2E  0101               	movlb	1	; () banked
 13410  001B30  19BA               	xorwf	_actualScreen& (0+255),w,b
 13411  001B32  A4D8               	btfss	status,2,c
 13412  001B34  D004               	goto	l11359
 13413                           
 13414                           ; BSR set to: 1
 13415                           ;DisplayProtocol.h: 320: actualScreen = 1;
 13416  001B36  0E01               	movlw	1
 13417  001B38  0101               	movlb	1	; () banked
 13418  001B3A  6FBA               	movwf	_actualScreen& (0+255),b
 13419  001B3C  0012               	return	
 13420  001B3E                     l11359:
 13421                           
 13422                           ; BSR set to: 1
 13423                           ;DisplayProtocol.h: 321: else if(actualScreen == 6) {
 13424  001B3E  0E06               	movlw	6
 13425  001B40  0101               	movlb	1	; () banked
 13426  001B42  19BA               	xorwf	_actualScreen& (0+255),w,b
 13427  001B44  B4D8               	btfsc	status,2,c
 13428  001B46  0012               	return	
 13429                           
 13430                           ; BSR set to: 1
 13431                           
 13432                           ; BSR set to: 1
 13433                           
 13434                           ; BSR set to: 1
 13435                           ;DisplayProtocol.h: 323: }else if(actualScreen == 5) {
 13436  001B48  0E05               	movlw	5
 13437  001B4A  0101               	movlb	1	; () banked
 13438  001B4C  19BA               	xorwf	_actualScreen& (0+255),w,b
 13439  001B4E  A4D8               	btfss	status,2,c
 13440  001B50  D017               	goto	l11375
 13441                           
 13442                           ; BSR set to: 1
 13443                           ;DisplayProtocol.h: 324: if(menuSection != 2) {
 13444  001B52  0E02               	movlw	2
 13445  001B54  0101               	movlb	1	; () banked
 13446  001B56  19C1               	xorwf	_menuSection& (0+255),w,b
 13447  001B58  B4D8               	btfsc	status,2,c
 13448  001B5A  D009               	goto	l11373
 13449                           
 13450                           ; BSR set to: 1
 13451                           ;DisplayProtocol.h: 325: chanValSection--;
 13452  001B5C  0101               	movlb	1	; () banked
 13453  001B5E  0794               	decf	_chanValSection& (0+255),f,b
 13454                           
 13455                           ; BSR set to: 1
 13456                           ;DisplayProtocol.h: 326: if(chanValSection < 0)
 13457  001B60  0101               	movlb	1	; () banked
 13458  001B62  AF94               	btfss	_chanValSection& (0+255),7,b
 13459  001B64  0012               	return	
 13460                           
 13461                           ; BSR set to: 1
 13462                           ;DisplayProtocol.h: 327: chanValSection = 5;
 13463  001B66  0E05               	movlw	5
 13464  001B68  0101               	movlb	1	; () banked
 13465  001B6A  6F94               	movwf	_chanValSection& (0+255),b
 13466                           
 13467                           ; BSR set to: 1
 13468                           ;DisplayProtocol.h: 328: }else
 13469  001B6C  0012               	return	
 13470  001B6E                     l11373:
 13471                           
 13472                           ; BSR set to: 1
 13473                           ;DisplayProtocol.h: 329: confirmEdition(!ProcessStarted);
 13474  001B6E  503A               	movf	_ProcessStarted,w,c
 13475  001B70  A4D8               	btfss	status,2,c
 13476  001B72  D002               	goto	u16490
 13477  001B74  0E01               	movlw	1
 13478  001B76  D001               	goto	u16500
 13479  001B78                     u16490:
 13480  001B78  0E00               	movlw	0
 13481  001B7A                     u16500:
 13482  001B7A  ECE2  F023         	call	_confirmEdition
 13483                           
 13484                           ;DisplayProtocol.h: 330: }else if(actualScreen == 2) {
 13485  001B7E  0012               	return	
 13486  001B80                     l11375:
 13487  001B80  0E02               	movlw	2
 13488  001B82  0101               	movlb	1	; () banked
 13489  001B84  19BA               	xorwf	_actualScreen& (0+255),w,b
 13490  001B86  A4D8               	btfss	status,2,c
 13491  001B88  D020               	goto	l11387
 13492                           
 13493                           ; BSR set to: 1
 13494                           ;DisplayProtocol.h: 331: ProcessStarted = !selSN;
 13495  001B8A  0101               	movlb	1	; () banked
 13496  001B8C  51C3               	movf	_selSN& (0+255),w,b
 13497  001B8E  A4D8               	btfss	status,2,c
 13498  001B90  D002               	goto	u16520
 13499  001B92  0E01               	movlw	1
 13500  001B94  D001               	goto	u16530
 13501  001B96                     u16520:
 13502  001B96  0E00               	movlw	0
 13503  001B98                     u16530:
 13504  001B98  6E3A               	movwf	_ProcessStarted,c
 13505                           
 13506                           ;DisplayProtocol.h: 332: bladeIsUP = 2;
 13507  001B9A  0E02               	movlw	2
 13508  001B9C  0100               	movlb	0	; () banked
 13509  001B9E  6FC9               	movwf	_bladeIsUP& (0+255),b
 13510                           
 13511                           ;DisplayProtocol.h: 333: if(ProcessStarted && bladeIsUP != 1) {
 13512  001BA0  503A               	movf	_ProcessStarted,w,c
 13513  001BA2  B4D8               	btfsc	status,2,c
 13514  001BA4  D00F               	goto	l11385
 13515                           
 13516                           ; BSR set to: 0
 13517  001BA6  0100               	movlb	0	; () banked
 13518  001BA8  05C9               	decf	_bladeIsUP& (0+255),w,b
 13519  001BAA  B4D8               	btfsc	status,2,c
 13520  001BAC  D00B               	goto	l11385
 13521                           
 13522                           ; BSR set to: 0
 13523                           ;DisplayProtocol.h: 334: processState = 0;
 13524  001BAE  0E00               	movlw	0
 13525  001BB0  6E36               	movwf	_processState+1,c
 13526  001BB2  0E00               	movlw	0
 13527  001BB4  6E35               	movwf	_processState,c
 13528                           
 13529                           ; BSR set to: 0
 13530                           ;DisplayProtocol.h: 335: setPWM2duty(-400);
 13531  001BB6  0EFE               	movlw	254
 13532  001BB8  0101               	movlb	1	; () banked
 13533  001BBA  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 13534  001BBC  0E70               	movlw	112
 13535  001BBE  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 13536  001BC0  EC6F  F02D         	call	_setPWM2duty	;wreg free
 13537  001BC4                     l11385:
 13538                           
 13539                           ;DisplayProtocol.h: 336: }
 13540                           ;DisplayProtocol.h: 337: actualScreen = tempLastScreen;
 13541  001BC4  C0CB  F1BA         	movff	_tempLastScreen,_actualScreen
 13542                           
 13543                           ;DisplayProtocol.h: 338: }else if(actualScreen == 3) {
 13544  001BC8  0012               	return	
 13545  001BCA                     l11387:
 13546  001BCA  0E03               	movlw	3
 13547  001BCC  0101               	movlb	1	; () banked
 13548  001BCE  19BA               	xorwf	_actualScreen& (0+255),w,b
 13549  001BD0  A4D8               	btfss	status,2,c
 13550  001BD2  D005               	goto	l11391
 13551                           
 13552                           ; BSR set to: 1
 13553                           ;DisplayProtocol.h: 339: ProcessStarted = selSN;
 13554  001BD4  C1C3  F03A         	movff	_selSN,_ProcessStarted
 13555                           
 13556                           ;DisplayProtocol.h: 340: actualScreen = tempLastScreen;
 13557  001BD8  C0CB  F1BA         	movff	_tempLastScreen,_actualScreen
 13558                           
 13559                           ;DisplayProtocol.h: 341: }else if(actualScreen == 10) {
 13560  001BDC  0012               	return	
 13561  001BDE                     l11391:
 13562                           
 13563                           ; BSR set to: 1
 13564  001BDE  0E0A               	movlw	10
 13565  001BE0  0101               	movlb	1	; () banked
 13566  001BE2  19BA               	xorwf	_actualScreen& (0+255),w,b
 13567  001BE4  A4D8               	btfss	status,2,c
 13568  001BE6  D00B               	goto	l11397
 13569                           
 13570                           ; BSR set to: 1
 13571                           ;DisplayProtocol.h: 342: if(!selSN)
 13572  001BE8  0101               	movlb	1	; () banked
 13573  001BEA  51C3               	movf	_selSN& (0+255),w,b
 13574  001BEC  A4D8               	btfss	status,2,c
 13575  001BEE  D004               	goto	l705
 13576                           
 13577                           ; BSR set to: 1
 13578                           ;DisplayProtocol.h: 343: confirmEdition(1);
 13579  001BF0  0E01               	movlw	1
 13580  001BF2  ECE2  F023         	call	_confirmEdition
 13581  001BF6  0012               	return	
 13582  001BF8                     l705:
 13583                           
 13584                           ; BSR set to: 1
 13585                           ;DisplayProtocol.h: 344: else
 13586                           ;DisplayProtocol.h: 345: actualScreen = tempLastScreen;
 13587  001BF8  C0CB  F1BA         	movff	_tempLastScreen,_actualScreen
 13588                           
 13589                           ; BSR set to: 1
 13590                           ;DisplayProtocol.h: 346: }else if(actualScreen == 8)
 13591  001BFC  0012               	return	
 13592  001BFE                     l11397:
 13593                           
 13594                           ; BSR set to: 1
 13595  001BFE  0E08               	movlw	8
 13596  001C00  0101               	movlb	1	; () banked
 13597  001C02  19BA               	xorwf	_actualScreen& (0+255),w,b
 13598  001C04  A4D8               	btfss	status,2,c
 13599  001C06  D004               	goto	l11401
 13600                           
 13601                           ; BSR set to: 1
 13602                           ;DisplayProtocol.h: 347: actualScreen = 4;
 13603  001C08  0E04               	movlw	4
 13604  001C0A  0101               	movlb	1	; () banked
 13605  001C0C  6FBA               	movwf	_actualScreen& (0+255),b
 13606  001C0E  0012               	return	
 13607  001C10                     l11401:
 13608                           
 13609                           ; BSR set to: 1
 13610                           ;DisplayProtocol.h: 348: else if(actualScreen == 9)
 13611  001C10  0E09               	movlw	9
 13612  001C12  0101               	movlb	1	; () banked
 13613  001C14  19BA               	xorwf	_actualScreen& (0+255),w,b
 13614  001C16  A4D8               	btfss	status,2,c
 13615  001C18  D004               	goto	l11405
 13616                           
 13617                           ; BSR set to: 1
 13618                           ;DisplayProtocol.h: 349: actualScreen = 0;
 13619  001C1A  0E00               	movlw	0
 13620  001C1C  0101               	movlb	1	; () banked
 13621  001C1E  6FBA               	movwf	_actualScreen& (0+255),b
 13622  001C20  0012               	return	
 13623  001C22                     l11405:
 13624                           
 13625                           ; BSR set to: 1
 13626                           ;DisplayProtocol.h: 350: else if(actualScreen == 11) {
 13627  001C22  0E0B               	movlw	11
 13628  001C24  0101               	movlb	1	; () banked
 13629  001C26  19BA               	xorwf	_actualScreen& (0+255),w,b
 13630  001C28  A4D8               	btfss	status,2,c
 13631  001C2A  D05B               	goto	l11445
 13632                           
 13633                           ; BSR set to: 1
 13634                           ;DisplayProtocol.h: 351: if(!selSN) {
 13635  001C2C  0101               	movlb	1	; () banked
 13636  001C2E  51C3               	movf	_selSN& (0+255),w,b
 13637  001C30  A4D8               	btfss	status,2,c
 13638  001C32  D053               	goto	l11443
 13639                           
 13640                           ; BSR set to: 1
 13641                           ;DisplayProtocol.h: 352: chanValf = 0;
 13642  001C34  0E00               	movlw	0
 13643  001C36  0101               	movlb	1	; () banked
 13644  001C38  6FAE               	movwf	_chanValf& (0+255),b
 13645  001C3A  0E00               	movlw	0
 13646  001C3C  0101               	movlb	1	; () banked
 13647  001C3E  6FAF               	movwf	(_chanValf+1)& (0+255),b
 13648  001C40  0E00               	movlw	0
 13649  001C42  0101               	movlb	1	; () banked
 13650  001C44  6FB0               	movwf	(_chanValf+2)& (0+255),b
 13651                           
 13652                           ; BSR set to: 1
 13653                           ;DisplayProtocol.h: 353: desintegrator();
 13654  001C46  EC00  F016         	call	_desintegrator	;wreg free
 13655                           
 13656                           ;DisplayProtocol.h: 354: temptiXcorte = tiXcorte;
 13657  001C4A  C0B2  F0AF         	movff	_tiXcorte,_temptiXcorte
 13658  001C4E  C0B3  F0B0         	movff	_tiXcorte+1,_temptiXcorte+1
 13659  001C52  C0B4  F0B1         	movff	_tiXcorte+2,_temptiXcorte+2
 13660                           
 13661                           ;DisplayProtocol.h: 355: tiXcorte = 5.0f;
 13662  001C56  0E00               	movlw	0
 13663  001C58  0100               	movlb	0	; () banked
 13664  001C5A  6FB2               	movwf	_tiXcorte& (0+255),b
 13665  001C5C  0EA0               	movlw	160
 13666  001C5E  0100               	movlb	0	; () banked
 13667  001C60  6FB3               	movwf	(_tiXcorte+1)& (0+255),b
 13668  001C62  0E40               	movlw	64
 13669  001C64  0100               	movlb	0	; () banked
 13670  001C66  6FB4               	movwf	(_tiXcorte+2)& (0+255),b
 13671                           
 13672                           ; BSR set to: 0
 13673                           ;DisplayProtocol.h: 356: timsXcorte = 5000.0f;
 13674  001C68  0E40               	movlw	64
 13675  001C6A  6E4D               	movwf	_timsXcorte,c
 13676  001C6C  0E9C               	movlw	156
 13677  001C6E  6E4E               	movwf	_timsXcorte+1,c
 13678  001C70  0E45               	movlw	69
 13679  001C72  6E4F               	movwf	_timsXcorte+2,c
 13680                           
 13681                           ; BSR set to: 0
 13682                           ;DisplayProtocol.h: 357: tempNumCortes = numCortes;
 13683  001C74  C0B8  F192         	movff	_numCortes,_tempNumCortes
 13684  001C78  C0B9  F193         	movff	_numCortes+1,_tempNumCortes+1
 13685                           
 13686                           ; BSR set to: 0
 13687                           ;DisplayProtocol.h: 358: numCortes = 1;
 13688  001C7C  0E00               	movlw	0
 13689  001C7E  0100               	movlb	0	; () banked
 13690  001C80  6FB9               	movwf	(_numCortes+1)& (0+255),b
 13691  001C82  0E01               	movlw	1
 13692  001C84  6FB8               	movwf	_numCortes& (0+255),b
 13693                           
 13694                           ; BSR set to: 0
 13695                           ;DisplayProtocol.h: 359: processState = 0;
 13696  001C86  0E00               	movlw	0
 13697  001C88  6E36               	movwf	_processState+1,c
 13698  001C8A  0E00               	movlw	0
 13699  001C8C  6E35               	movwf	_processState,c
 13700                           
 13701                           ; BSR set to: 0
 13702                           ;DisplayProtocol.h: 360: processTimer = 0;
 13703  001C8E  0E00               	movlw	0
 13704  001C90  6E2B               	movwf	_processTimer,c
 13705  001C92  0E00               	movlw	0
 13706  001C94  6E2C               	movwf	_processTimer+1,c
 13707  001C96  0E00               	movlw	0
 13708  001C98  6E2D               	movwf	_processTimer+2,c
 13709  001C9A  0E00               	movlw	0
 13710  001C9C  6E2E               	movwf	_processTimer+3,c
 13711                           
 13712                           ; BSR set to: 0
 13713                           ;DisplayProtocol.h: 361: bladeIsUP = 2;
 13714  001C9E  0E02               	movlw	2
 13715  001CA0  0100               	movlb	0	; () banked
 13716  001CA2  6FC9               	movwf	_bladeIsUP& (0+255),b
 13717                           
 13718                           ; BSR set to: 0
 13719                           ;DisplayProtocol.h: 362: ProcessStarted = 1;
 13720  001CA4  0E01               	movlw	1
 13721  001CA6  6E3A               	movwf	_ProcessStarted,c
 13722                           
 13723                           ; BSR set to: 0
 13724                           ;DisplayProtocol.h: 363: if(ProcessStarted && bladeIsUP != 1) {
 13725  001CA8  503A               	movf	_ProcessStarted,w,c
 13726  001CAA  B4D8               	btfsc	status,2,c
 13727  001CAC  D00F               	goto	l11439
 13728                           
 13729                           ; BSR set to: 0
 13730  001CAE  0100               	movlb	0	; () banked
 13731  001CB0  05C9               	decf	_bladeIsUP& (0+255),w,b
 13732  001CB2  B4D8               	btfsc	status,2,c
 13733  001CB4  D00B               	goto	l11439
 13734                           
 13735                           ; BSR set to: 0
 13736                           ;DisplayProtocol.h: 364: processState = 0;
 13737  001CB6  0E00               	movlw	0
 13738  001CB8  6E36               	movwf	_processState+1,c
 13739  001CBA  0E00               	movlw	0
 13740  001CBC  6E35               	movwf	_processState,c
 13741                           
 13742                           ; BSR set to: 0
 13743                           ;DisplayProtocol.h: 365: setPWM2duty(-400);
 13744  001CBE  0EFE               	movlw	254
 13745  001CC0  0101               	movlb	1	; () banked
 13746  001CC2  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 13747  001CC4  0E70               	movlw	112
 13748  001CC6  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 13749  001CC8  EC6F  F02D         	call	_setPWM2duty	;wreg free
 13750  001CCC                     l11439:
 13751                           
 13752                           ;DisplayProtocol.h: 366: }
 13753                           ;DisplayProtocol.h: 367: calibLevel = 0;
 13754  001CCC  0E00               	movlw	0
 13755  001CCE  0101               	movlb	1	; () banked
 13756  001CD0  6FBB               	movwf	_calibLevel& (0+255),b
 13757                           
 13758                           ; BSR set to: 1
 13759                           ;DisplayProtocol.h: 368: actualScreen = 6;
 13760  001CD2  0E06               	movlw	6
 13761  001CD4  0101               	movlb	1	; () banked
 13762  001CD6  6FBA               	movwf	_actualScreen& (0+255),b
 13763                           
 13764                           ;DisplayProtocol.h: 369: }else
 13765  001CD8  0012               	return	
 13766  001CDA                     l11443:
 13767                           
 13768                           ; BSR set to: 1
 13769                           ;DisplayProtocol.h: 370: actualScreen = 4;
 13770  001CDA  0E04               	movlw	4
 13771  001CDC  0101               	movlb	1	; () banked
 13772  001CDE  6FBA               	movwf	_actualScreen& (0+255),b
 13773                           
 13774                           ; BSR set to: 1
 13775                           ;DisplayProtocol.h: 371: }else if(actualScreen == 12) {
 13776  001CE0  0012               	return	
 13777  001CE2                     l11445:
 13778                           
 13779                           ; BSR set to: 1
 13780  001CE2  0E0C               	movlw	12
 13781  001CE4  0101               	movlb	1	; () banked
 13782  001CE6  19BA               	xorwf	_actualScreen& (0+255),w,b
 13783  001CE8  A4D8               	btfss	status,2,c
 13784  001CEA  0012               	return	
 13785                           
 13786                           ; BSR set to: 1
 13787                           ;DisplayProtocol.h: 372: chanValSection--;
 13788  001CEC  0101               	movlb	1	; () banked
 13789  001CEE  0794               	decf	_chanValSection& (0+255),f,b
 13790                           
 13791                           ; BSR set to: 1
 13792                           ;DisplayProtocol.h: 373: if(chanValSection < 0)
 13793  001CF0  0101               	movlb	1	; () banked
 13794  001CF2  AF94               	btfss	_chanValSection& (0+255),7,b
 13795  001CF4  0012               	return	
 13796                           
 13797                           ; BSR set to: 1
 13798                           ;DisplayProtocol.h: 374: chanValSection = 5;
 13799  001CF6  0E05               	movlw	5
 13800  001CF8  0101               	movlb	1	; () banked
 13801  001CFA  6F94               	movwf	_chanValSection& (0+255),b
 13802                           
 13803                           ; BSR set to: 1
 13804                           
 13805                           ; BSR set to: 1
 13806                           
 13807                           ; BSR set to: 1
 13808                           
 13809                           ; BSR set to: 1
 13810                           
 13811                           ; BSR set to: 1
 13812                           
 13813                           ; BSR set to: 1
 13814                           
 13815                           ; BSR set to: 1
 13816                           
 13817                           ; BSR set to: 1
 13818                           
 13819                           ; BSR set to: 1
 13820                           
 13821                           ; BSR set to: 1
 13822                           
 13823                           ; BSR set to: 1
 13824                           
 13825                           ; BSR set to: 1
 13826  001CFC  0012               	return	
 13827  001CFE                     __end_of_pressENTER:
 13828                           	opt stack 0
 13829                           tblptru	equ	0xFF8
 13830                           tblptrh	equ	0xFF7
 13831                           tblptrl	equ	0xFF6
 13832                           tablat	equ	0xFF5
 13833                           prodh	equ	0xFF4
 13834                           prodl	equ	0xFF3
 13835                           intcon	equ	0xFF2
 13836                           postinc0	equ	0xFEE
 13837                           wreg	equ	0xFE8
 13838                           postdec1	equ	0xFE5
 13839                           fsr1l	equ	0xFE1
 13840                           indf2	equ	0xFDF
 13841                           postinc2	equ	0xFDE
 13842                           postdec2	equ	0xFDD
 13843                           fsr2h	equ	0xFDA
 13844                           fsr2l	equ	0xFD9
 13845                           status	equ	0xFD8
 13846                           
 13847 ;; *************** function _desintegrator *****************
 13848 ;; Defined at:
 13849 ;;		line 46 in file "source/DisplayProtocol.h"
 13850 ;; Parameters:    Size  Location     Type
 13851 ;;		None
 13852 ;; Auto vars:     Size  Location     Type
 13853 ;;  temp2           4   70[BANK1 ] long 
 13854 ;;  temp3           4   66[BANK1 ] long 
 13855 ;;  tempL           4   62[BANK1 ] long 
 13856 ;;  temp            3   59[BANK1 ] float 
 13857 ;;  i               2   74[BANK1 ] int 
 13858 ;; Return value:  Size  Location     Type
 13859 ;;                  1    wreg      void 
 13860 ;; Registers used:
 13861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13862 ;; Tracked objects:
 13863 ;;		On entry : 0/0
 13864 ;;		On exit  : 0/0
 13865 ;;		Unchanged: 0/0
 13866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13867 ;;      Params:         0       0       0       0       0       0       0
 13868 ;;      Locals:         0       0      17       0       0       0       0
 13869 ;;      Temps:          0       0       2       0       0       0       0
 13870 ;;      Totals:         0       0      19       0       0       0       0
 13871 ;;Total ram usage:       19 bytes
 13872 ;; Hardware stack levels used:    1
 13873 ;; Hardware stack levels required when called:   14
 13874 ;; This function calls:
 13875 ;;		___aldiv
 13876 ;;		___ftmul
 13877 ;;		___fttol
 13878 ;;		___lmul
 13879 ;; This function is called by:
 13880 ;;		_pressENTER
 13881 ;; This function uses a non-reentrant model
 13882 ;;
 13883                           
 13884                           	psect	text53
 13885  002C00                     __ptext53:
 13886                           	opt stack 0
 13887  002C00                     _desintegrator:
 13888                           	opt stack 14
 13889                           
 13890                           ;DisplayProtocol.h: 47: chanValSection = 5;
 13891                           
 13892                           ;incstack = 0
 13893  002C00  0E05               	movlw	5
 13894  002C02  0101               	movlb	1	; () banked
 13895  002C04  6F94               	movwf	_chanValSection& (0+255),b
 13896                           
 13897                           ; BSR set to: 1
 13898                           ;DisplayProtocol.h: 48: float temp = (float)chanValf*1000;
 13899  002C06  C1AE  F114         	movff	_chanValf,___ftmul@f1
 13900  002C0A  C1AF  F115         	movff	_chanValf+1,___ftmul@f1+1
 13901  002C0E  C1B0  F116         	movff	_chanValf+2,___ftmul@f1+2
 13902  002C12  0E00               	movlw	0
 13903  002C14  0101               	movlb	1	; () banked
 13904  002C16  6F17               	movwf	___ftmul@f2& (0+255),b
 13905  002C18  0E7A               	movlw	122
 13906  002C1A  0101               	movlb	1	; () banked
 13907  002C1C  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 13908  002C1E  0E44               	movlw	68
 13909  002C20  0101               	movlb	1	; () banked
 13910  002C22  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 13911  002C24  EC06  F01A         	call	___ftmul	;wreg free
 13912  002C28  C114  F13B         	movff	?___ftmul,desintegrator@temp
 13913  002C2C  C115  F13C         	movff	?___ftmul+1,desintegrator@temp+1
 13914  002C30  C116  F13D         	movff	?___ftmul+2,desintegrator@temp+2
 13915                           
 13916                           ;DisplayProtocol.h: 49: long tempL = (long)temp;
 13917  002C34  C13B  F12A         	movff	desintegrator@temp,___fttol@f1
 13918  002C38  C13C  F12B         	movff	desintegrator@temp+1,___fttol@f1+1
 13919  002C3C  C13D  F12C         	movff	desintegrator@temp+2,___fttol@f1+2
 13920  002C40  ECB0  F01C         	call	___fttol	;wreg free
 13921  002C44  C12A  F13E         	movff	?___fttol,desintegrator@tempL
 13922  002C48  C12B  F13F         	movff	?___fttol+1,desintegrator@tempL+1
 13923  002C4C  C12C  F140         	movff	?___fttol+2,desintegrator@tempL+2
 13924  002C50  C12D  F141         	movff	?___fttol+3,desintegrator@tempL+3
 13925                           
 13926                           ;DisplayProtocol.h: 50: long temp2 = 0;
 13927  002C54  0E00               	movlw	0
 13928  002C56  0101               	movlb	1	; () banked
 13929  002C58  6F46               	movwf	desintegrator@temp2& (0+255),b
 13930  002C5A  0E00               	movlw	0
 13931  002C5C  6F47               	movwf	(desintegrator@temp2+1)& (0+255),b
 13932  002C5E  0E00               	movlw	0
 13933  002C60  6F48               	movwf	(desintegrator@temp2+2)& (0+255),b
 13934  002C62  0E00               	movlw	0
 13935  002C64  6F49               	movwf	(desintegrator@temp2+3)& (0+255),b
 13936                           
 13937                           ;DisplayProtocol.h: 51: long temp3 = 0;
 13938  002C66  0E00               	movlw	0
 13939  002C68  0101               	movlb	1	; () banked
 13940  002C6A  6F42               	movwf	desintegrator@temp3& (0+255),b
 13941  002C6C  0E00               	movlw	0
 13942  002C6E  6F43               	movwf	(desintegrator@temp3+1)& (0+255),b
 13943  002C70  0E00               	movlw	0
 13944  002C72  6F44               	movwf	(desintegrator@temp3+2)& (0+255),b
 13945  002C74  0E00               	movlw	0
 13946  002C76  6F45               	movwf	(desintegrator@temp3+3)& (0+255),b
 13947                           
 13948                           ;DisplayProtocol.h: 52: int i;
 13949                           ;DisplayProtocol.h: 53: for(i = 0; i < 6; i++) {
 13950  002C78  0E00               	movlw	0
 13951  002C7A  0101               	movlb	1	; () banked
 13952  002C7C  6F4B               	movwf	(desintegrator@i+1)& (0+255),b
 13953  002C7E  0E00               	movlw	0
 13954  002C80  6F4A               	movwf	desintegrator@i& (0+255),b
 13955                           
 13956                           ; BSR set to: 1
 13957  002C82  0101               	movlb	1	; () banked
 13958  002C84  BF4B               	btfsc	(desintegrator@i+1)& (0+255),7,b
 13959  002C86  D00A               	goto	l10589
 13960  002C88  0101               	movlb	1	; () banked
 13961  002C8A  514B               	movf	(desintegrator@i+1)& (0+255),w,b
 13962  002C8C  E106               	bnz	u15110
 13963  002C8E  0E06               	movlw	6
 13964  002C90  0101               	movlb	1	; () banked
 13965  002C92  5D4A               	subwf	desintegrator@i& (0+255),w,b
 13966  002C94  B0D8               	btfsc	status,0,c
 13967  002C96  0012               	return	
 13968  002C98  D001               	goto	l10589
 13969  002C9A                     u15110:
 13970                           
 13971                           ; BSR set to: 1
 13972  002C9A  0012               	return	
 13973  002C9C                     l10589:
 13974                           
 13975                           ; BSR set to: 1
 13976                           ;DisplayProtocol.h: 54: temp2 = tempL/exp10[i];
 13977  002C9C  C13E  F100         	movff	desintegrator@tempL,___aldiv@dividend
 13978  002CA0  C13F  F101         	movff	desintegrator@tempL+1,___aldiv@dividend+1
 13979  002CA4  C140  F102         	movff	desintegrator@tempL+2,___aldiv@dividend+2
 13980  002CA8  C141  F103         	movff	desintegrator@tempL+3,___aldiv@dividend+3
 13981  002CAC  0E77               	movlw	low _exp10
 13982  002CAE  0101               	movlb	1	; () banked
 13983  002CB0  6F39               	movwf	??_desintegrator& (0+255),b
 13984  002CB2  0E01               	movlw	high _exp10
 13985  002CB4  0101               	movlb	1	; () banked
 13986  002CB6  6F3A               	movwf	(??_desintegrator+1)& (0+255),b
 13987  002CB8  90D8               	bcf	status,0,c
 13988  002CBA  0101               	movlb	1	; () banked
 13989  002CBC  354A               	rlcf	desintegrator@i& (0+255),w,b
 13990  002CBE  6ED9               	movwf	fsr2l,c
 13991  002CC0  0101               	movlb	1	; () banked
 13992  002CC2  354B               	rlcf	(desintegrator@i+1)& (0+255),w,b
 13993  002CC4  6EDA               	movwf	fsr2h,c
 13994  002CC6  90D8               	bcf	status,0,c
 13995  002CC8  36D9               	rlcf	fsr2l,f,c
 13996  002CCA  36DA               	rlcf	fsr2h,f,c
 13997  002CCC  0101               	movlb	1	; () banked
 13998  002CCE  5139               	movf	??_desintegrator& (0+255),w,b
 13999  002CD0  26D9               	addwf	fsr2l,f,c
 14000  002CD2  0101               	movlb	1	; () banked
 14001  002CD4  513A               	movf	(??_desintegrator+1)& (0+255),w,b
 14002  002CD6  22DA               	addwfc	fsr2h,f,c
 14003  002CD8  CFDE F104          	movff	postinc2,___aldiv@divisor
 14004  002CDC  CFDE F105          	movff	postinc2,___aldiv@divisor+1
 14005  002CE0  CFDE F106          	movff	postinc2,___aldiv@divisor+2
 14006  002CE4  CFDE F107          	movff	postinc2,___aldiv@divisor+3
 14007  002CE8  EC16  F01F         	call	___aldiv	;wreg free
 14008  002CEC  C100  F146         	movff	?___aldiv,desintegrator@temp2
 14009  002CF0  C101  F147         	movff	?___aldiv+1,desintegrator@temp2+1
 14010  002CF4  C102  F148         	movff	?___aldiv+2,desintegrator@temp2+2
 14011  002CF8  C103  F149         	movff	?___aldiv+3,desintegrator@temp2+3
 14012                           
 14013                           ;DisplayProtocol.h: 55: temp3 = temp2*exp10[i];
 14014  002CFC  0E77               	movlw	low _exp10
 14015  002CFE  0101               	movlb	1	; () banked
 14016  002D00  6F39               	movwf	??_desintegrator& (0+255),b
 14017  002D02  0E01               	movlw	high _exp10
 14018  002D04  0101               	movlb	1	; () banked
 14019  002D06  6F3A               	movwf	(??_desintegrator+1)& (0+255),b
 14020  002D08  90D8               	bcf	status,0,c
 14021  002D0A  0101               	movlb	1	; () banked
 14022  002D0C  354A               	rlcf	desintegrator@i& (0+255),w,b
 14023  002D0E  6ED9               	movwf	fsr2l,c
 14024  002D10  0101               	movlb	1	; () banked
 14025  002D12  354B               	rlcf	(desintegrator@i+1)& (0+255),w,b
 14026  002D14  6EDA               	movwf	fsr2h,c
 14027  002D16  90D8               	bcf	status,0,c
 14028  002D18  36D9               	rlcf	fsr2l,f,c
 14029  002D1A  36DA               	rlcf	fsr2h,f,c
 14030  002D1C  0101               	movlb	1	; () banked
 14031  002D1E  5139               	movf	??_desintegrator& (0+255),w,b
 14032  002D20  26D9               	addwf	fsr2l,f,c
 14033  002D22  0101               	movlb	1	; () banked
 14034  002D24  513A               	movf	(??_desintegrator+1)& (0+255),w,b
 14035  002D26  22DA               	addwfc	fsr2h,f,c
 14036  002D28  CFDE F100          	movff	postinc2,___lmul@multiplier
 14037  002D2C  CFDE F101          	movff	postinc2,___lmul@multiplier+1
 14038  002D30  CFDE F102          	movff	postinc2,___lmul@multiplier+2
 14039  002D34  CFDE F103          	movff	postinc2,___lmul@multiplier+3
 14040  002D38  C146  F104         	movff	desintegrator@temp2,___lmul@multiplicand
 14041  002D3C  C147  F105         	movff	desintegrator@temp2+1,___lmul@multiplicand+1
 14042  002D40  C148  F106         	movff	desintegrator@temp2+2,___lmul@multiplicand+2
 14043  002D44  C149  F107         	movff	desintegrator@temp2+3,___lmul@multiplicand+3
 14044  002D48  ECDF  F030         	call	___lmul	;wreg free
 14045  002D4C  C100  F142         	movff	?___lmul,desintegrator@temp3
 14046  002D50  C101  F143         	movff	?___lmul+1,desintegrator@temp3+1
 14047  002D54  C102  F144         	movff	?___lmul+2,desintegrator@temp3+2
 14048  002D58  C103  F145         	movff	?___lmul+3,desintegrator@temp3+3
 14049                           
 14050                           ;DisplayProtocol.h: 56: chanValdig[i] = temp2;
 14051  002D5C  0EA0               	movlw	low _chanValdig
 14052  002D5E  0101               	movlb	1	; () banked
 14053  002D60  254A               	addwf	desintegrator@i& (0+255),w,b
 14054  002D62  6ED9               	movwf	fsr2l,c
 14055  002D64  0E01               	movlw	high _chanValdig
 14056  002D66  0101               	movlb	1	; () banked
 14057  002D68  214B               	addwfc	(desintegrator@i+1)& (0+255),w,b
 14058  002D6A  6EDA               	movwf	fsr2h,c
 14059  002D6C  C146  FFDF         	movff	desintegrator@temp2,indf2
 14060                           
 14061                           ; BSR set to: 1
 14062                           ;DisplayProtocol.h: 57: tempL -= temp3;
 14063  002D70  0101               	movlb	1	; () banked
 14064  002D72  5142               	movf	desintegrator@temp3& (0+255),w,b
 14065  002D74  0101               	movlb	1	; () banked
 14066  002D76  5F3E               	subwf	desintegrator@tempL& (0+255),f,b
 14067  002D78  0101               	movlb	1	; () banked
 14068  002D7A  5143               	movf	(desintegrator@temp3+1)& (0+255),w,b
 14069  002D7C  0101               	movlb	1	; () banked
 14070  002D7E  5B3F               	subwfb	(desintegrator@tempL+1)& (0+255),f,b
 14071  002D80  0101               	movlb	1	; () banked
 14072  002D82  5144               	movf	(desintegrator@temp3+2)& (0+255),w,b
 14073  002D84  0101               	movlb	1	; () banked
 14074  002D86  5B40               	subwfb	(desintegrator@tempL+2)& (0+255),f,b
 14075  002D88  0101               	movlb	1	; () banked
 14076  002D8A  5145               	movf	(desintegrator@temp3+3)& (0+255),w,b
 14077  002D8C  0101               	movlb	1	; () banked
 14078  002D8E  5B41               	subwfb	(desintegrator@tempL+3)& (0+255),f,b
 14079                           
 14080                           ; BSR set to: 1
 14081  002D90  0101               	movlb	1	; () banked
 14082  002D92  4B4A               	infsnz	desintegrator@i& (0+255),f,b
 14083  002D94  2B4B               	incf	(desintegrator@i+1)& (0+255),f,b
 14084                           
 14085                           ; BSR set to: 1
 14086  002D96  0101               	movlb	1	; () banked
 14087  002D98  BF4B               	btfsc	(desintegrator@i+1)& (0+255),7,b
 14088  002D9A  D780               	goto	l10589
 14089  002D9C  0101               	movlb	1	; () banked
 14090  002D9E  514B               	movf	(desintegrator@i+1)& (0+255),w,b
 14091  002DA0  E101               	bnz	l537
 14092  002DA2  D775               	goto	L6
 14093  002DA4                     l537:
 14094                           
 14095                           ; BSR set to: 1
 14096  002DA4  0012               	return		;funcret
 14097  002DA6                     __end_of_desintegrator:
 14098                           	opt stack 0
 14099                           tblptru	equ	0xFF8
 14100                           tblptrh	equ	0xFF7
 14101                           tblptrl	equ	0xFF6
 14102                           tablat	equ	0xFF5
 14103                           prodh	equ	0xFF4
 14104                           prodl	equ	0xFF3
 14105                           intcon	equ	0xFF2
 14106                           postinc0	equ	0xFEE
 14107                           wreg	equ	0xFE8
 14108                           postdec1	equ	0xFE5
 14109                           fsr1l	equ	0xFE1
 14110                           indf2	equ	0xFDF
 14111                           postinc2	equ	0xFDE
 14112                           postdec2	equ	0xFDD
 14113                           fsr2h	equ	0xFDA
 14114                           fsr2l	equ	0xFD9
 14115                           status	equ	0xFD8
 14116                           
 14117 ;; *************** function ___fttol *****************
 14118 ;; Defined at:
 14119 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 14120 ;; Parameters:    Size  Location     Type
 14121 ;;  f1              3   42[BANK1 ] float 
 14122 ;; Auto vars:     Size  Location     Type
 14123 ;;  lval            4   52[BANK1 ] unsigned long 
 14124 ;;  exp1            1   56[BANK1 ] unsigned char 
 14125 ;;  sign1           1   51[BANK1 ] unsigned char 
 14126 ;; Return value:  Size  Location     Type
 14127 ;;                  4   42[BANK1 ] long 
 14128 ;; Registers used:
 14129 ;;		wreg, status,2, status,0
 14130 ;; Tracked objects:
 14131 ;;		On entry : 0/0
 14132 ;;		On exit  : 0/0
 14133 ;;		Unchanged: 0/0
 14134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14135 ;;      Params:         0       0       4       0       0       0       0
 14136 ;;      Locals:         0       0       6       0       0       0       0
 14137 ;;      Temps:          0       0       5       0       0       0       0
 14138 ;;      Totals:         0       0      15       0       0       0       0
 14139 ;;Total ram usage:       15 bytes
 14140 ;; Hardware stack levels used:    1
 14141 ;; Hardware stack levels required when called:   12
 14142 ;; This function calls:
 14143 ;;		Nothing
 14144 ;; This function is called by:
 14145 ;;		_desintegrator
 14146 ;;		_printf
 14147 ;; This function uses a non-reentrant model
 14148 ;;
 14149                           
 14150                           	psect	text54
 14151  003960                     __ptext54:
 14152                           	opt stack 0
 14153  003960                     ___fttol:
 14154                           	opt stack 15
 14155                           
 14156                           ; BSR set to: 1
 14157                           ;incstack = 0
 14158  003960  C12C  F12E         	movff	___fttol@f1+2,??___fttol
 14159  003964  0101               	movlb	1	; () banked
 14160  003966  6B2F               	clrf	(??___fttol+1)& (0+255),b
 14161  003968  6B30               	clrf	(??___fttol+2)& (0+255),b
 14162  00396A  0101               	movlb	1	; () banked
 14163  00396C  352B               	rlcf	(___fttol@f1+1)& (0+255),w,b
 14164  00396E  0101               	movlb	1	; () banked
 14165  003970  372E               	rlcf	??___fttol& (0+255),f,b
 14166  003972  E301               	bnc	u7601
 14167  003974  812F               	bsf	(??___fttol+1)& (0+255),0,b
 14168  003976                     u7601:
 14169  003976  0101               	movlb	1	; () banked
 14170  003978  512E               	movf	??___fttol& (0+255),w,b
 14171  00397A  0101               	movlb	1	; () banked
 14172  00397C  6F38               	movwf	___fttol@exp1& (0+255),b
 14173  00397E  0101               	movlb	1	; () banked
 14174  003980  5138               	movf	___fttol@exp1& (0+255),w,b
 14175  003982  A4D8               	btfss	status,2,c
 14176  003984  D00A               	goto	l6191
 14177                           
 14178                           ; BSR set to: 1
 14179  003986  0E00               	movlw	0
 14180  003988  0101               	movlb	1	; () banked
 14181  00398A  6F2A               	movwf	?___fttol& (0+255),b
 14182  00398C  0E00               	movlw	0
 14183  00398E  6F2B               	movwf	(?___fttol+1)& (0+255),b
 14184  003990  0E00               	movlw	0
 14185  003992  6F2C               	movwf	(?___fttol+2)& (0+255),b
 14186  003994  0E00               	movlw	0
 14187  003996  6F2D               	movwf	(?___fttol+3)& (0+255),b
 14188                           
 14189                           ; BSR set to: 1
 14190  003998  0012               	return	
 14191  00399A                     l6191:
 14192                           
 14193                           ; BSR set to: 1
 14194  00399A  0E17               	movlw	23
 14195  00399C  0101               	movlb	1	; () banked
 14196  00399E  6F2E               	movwf	??___fttol& (0+255),b
 14197  0039A0  C12A  F12F         	movff	___fttol@f1,??___fttol+1
 14198  0039A4  C12B  F130         	movff	___fttol@f1+1,??___fttol+2
 14199  0039A8  C12C  F131         	movff	___fttol@f1+2,??___fttol+3
 14200  0039AC  0101               	movlb	1	; () banked
 14201  0039AE  292E               	incf	??___fttol& (0+255),w,b
 14202  0039B0  0101               	movlb	1	; () banked
 14203  0039B2  6F32               	movwf	(??___fttol+4)& (0+255),b
 14204  0039B4  D005               	goto	u7620
 14205  0039B6                     u7625:
 14206  0039B6  0101               	movlb	1	; () banked
 14207  0039B8  90D8               	bcf	status,0,c
 14208  0039BA  3331               	rrcf	(??___fttol+3)& (0+255),f,b
 14209  0039BC  3330               	rrcf	(??___fttol+2)& (0+255),f,b
 14210  0039BE  332F               	rrcf	(??___fttol+1)& (0+255),f,b
 14211  0039C0                     u7620:
 14212  0039C0  0101               	movlb	1	; () banked
 14213  0039C2  2F32               	decfsz	(??___fttol+4)& (0+255),f,b
 14214  0039C4  D7F8               	goto	u7625
 14215  0039C6  0101               	movlb	1	; () banked
 14216  0039C8  512F               	movf	(??___fttol+1)& (0+255),w,b
 14217  0039CA  0101               	movlb	1	; () banked
 14218  0039CC  6F33               	movwf	___fttol@sign1& (0+255),b
 14219                           
 14220                           ; BSR set to: 1
 14221  0039CE  0101               	movlb	1	; () banked
 14222  0039D0  8F2B               	bsf	(___fttol@f1+1)& (0+255),7,b
 14223                           
 14224                           ; BSR set to: 1
 14225  0039D2  0EFF               	movlw	255
 14226  0039D4  0101               	movlb	1	; () banked
 14227  0039D6  172A               	andwf	___fttol@f1& (0+255),f,b
 14228  0039D8  0EFF               	movlw	255
 14229  0039DA  0101               	movlb	1	; () banked
 14230  0039DC  172B               	andwf	(___fttol@f1+1)& (0+255),f,b
 14231  0039DE  0E00               	movlw	0
 14232  0039E0  0101               	movlb	1	; () banked
 14233  0039E2  172C               	andwf	(___fttol@f1+2)& (0+255),f,b
 14234                           
 14235                           ; BSR set to: 1
 14236  0039E4  0101               	movlb	1	; () banked
 14237  0039E6  512A               	movf	___fttol@f1& (0+255),w,b
 14238  0039E8  0101               	movlb	1	; () banked
 14239  0039EA  6F34               	movwf	___fttol@lval& (0+255),b
 14240  0039EC  0101               	movlb	1	; () banked
 14241  0039EE  512B               	movf	(___fttol@f1+1)& (0+255),w,b
 14242  0039F0  0101               	movlb	1	; () banked
 14243  0039F2  6F35               	movwf	(___fttol@lval+1)& (0+255),b
 14244  0039F4  0101               	movlb	1	; () banked
 14245  0039F6  512C               	movf	(___fttol@f1+2)& (0+255),w,b
 14246  0039F8  0101               	movlb	1	; () banked
 14247  0039FA  6F36               	movwf	(___fttol@lval+2)& (0+255),b
 14248  0039FC  0101               	movlb	1	; () banked
 14249  0039FE  6B37               	clrf	(___fttol@lval+3)& (0+255),b
 14250                           
 14251                           ; BSR set to: 1
 14252  003A00  0E8E               	movlw	142
 14253  003A02  0101               	movlb	1	; () banked
 14254  003A04  5F38               	subwf	___fttol@exp1& (0+255),f,b
 14255                           
 14256                           ; BSR set to: 1
 14257  003A06  0101               	movlb	1	; () banked
 14258  003A08  AF38               	btfss	___fttol@exp1& (0+255),7,b
 14259  003A0A  D01A               	goto	l6213
 14260                           
 14261                           ; BSR set to: 1
 14262  003A0C  0101               	movlb	1	; () banked
 14263  003A0E  5138               	movf	___fttol@exp1& (0+255),w,b
 14264  003A10  0A80               	xorlw	128
 14265  003A12  0F8F               	addlw	143
 14266  003A14  B0D8               	btfsc	status,0,c
 14267  003A16  D00A               	goto	l6209
 14268                           
 14269                           ; BSR set to: 1
 14270  003A18  0E00               	movlw	0
 14271  003A1A  0101               	movlb	1	; () banked
 14272  003A1C  6F2A               	movwf	?___fttol& (0+255),b
 14273  003A1E  0E00               	movlw	0
 14274  003A20  6F2B               	movwf	(?___fttol+1)& (0+255),b
 14275  003A22  0E00               	movlw	0
 14276  003A24  6F2C               	movwf	(?___fttol+2)& (0+255),b
 14277  003A26  0E00               	movlw	0
 14278  003A28  6F2D               	movwf	(?___fttol+3)& (0+255),b
 14279                           
 14280                           ; BSR set to: 1
 14281  003A2A  0012               	return	
 14282  003A2C                     l6209:
 14283                           
 14284                           ; BSR set to: 1
 14285  003A2C  0101               	movlb	1	; () banked
 14286  003A2E  90D8               	bcf	status,0,c
 14287  003A30  3337               	rrcf	(___fttol@lval+3)& (0+255),f,b
 14288  003A32  3336               	rrcf	(___fttol@lval+2)& (0+255),f,b
 14289  003A34  3335               	rrcf	(___fttol@lval+1)& (0+255),f,b
 14290  003A36  3334               	rrcf	___fttol@lval& (0+255),f,b
 14291                           
 14292                           ; BSR set to: 1
 14293  003A38  0101               	movlb	1	; () banked
 14294  003A3A  3F38               	incfsz	___fttol@exp1& (0+255),f,b
 14295  003A3C  D7F7               	goto	l6209
 14296                           
 14297                           ; BSR set to: 1
 14298  003A3E  D01B               	goto	l6223
 14299  003A40                     l6213:
 14300                           
 14301                           ; BSR set to: 1
 14302  003A40  0E17               	movlw	23
 14303  003A42  0101               	movlb	1	; () banked
 14304  003A44  6538               	cpfsgt	___fttol@exp1& (0+255),b
 14305  003A46  D012               	goto	l6221
 14306                           
 14307                           ; BSR set to: 1
 14308  003A48  0E00               	movlw	0
 14309  003A4A  0101               	movlb	1	; () banked
 14310  003A4C  6F2A               	movwf	?___fttol& (0+255),b
 14311  003A4E  0E00               	movlw	0
 14312  003A50  6F2B               	movwf	(?___fttol+1)& (0+255),b
 14313  003A52  0E00               	movlw	0
 14314  003A54  6F2C               	movwf	(?___fttol+2)& (0+255),b
 14315  003A56  0E00               	movlw	0
 14316  003A58  6F2D               	movwf	(?___fttol+3)& (0+255),b
 14317                           
 14318                           ; BSR set to: 1
 14319  003A5A  0012               	return	
 14320  003A5C                     l6219:
 14321                           
 14322                           ; BSR set to: 1
 14323  003A5C  0101               	movlb	1	; () banked
 14324  003A5E  90D8               	bcf	status,0,c
 14325  003A60  3734               	rlcf	___fttol@lval& (0+255),f,b
 14326  003A62  3735               	rlcf	(___fttol@lval+1)& (0+255),f,b
 14327  003A64  3736               	rlcf	(___fttol@lval+2)& (0+255),f,b
 14328  003A66  3737               	rlcf	(___fttol@lval+3)& (0+255),f,b
 14329  003A68  0101               	movlb	1	; () banked
 14330  003A6A  0738               	decf	___fttol@exp1& (0+255),f,b
 14331  003A6C                     l6221:
 14332                           
 14333                           ; BSR set to: 1
 14334  003A6C  0101               	movlb	1	; () banked
 14335  003A6E  5138               	movf	___fttol@exp1& (0+255),w,b
 14336  003A70  0101               	movlb	1	; () banked
 14337  003A72  A4D8               	btfss	status,2,c
 14338  003A74  D7F3               	goto	l6219
 14339  003A76                     l6223:
 14340                           
 14341                           ; BSR set to: 1
 14342  003A76  0101               	movlb	1	; () banked
 14343  003A78  5133               	movf	___fttol@sign1& (0+255),w,b
 14344  003A7A  0101               	movlb	1	; () banked
 14345  003A7C  B4D8               	btfsc	status,2,c
 14346  003A7E  D009               	goto	l6227
 14347                           
 14348                           ; BSR set to: 1
 14349  003A80  0101               	movlb	1	; () banked
 14350  003A82  1F37               	comf	(___fttol@lval+3)& (0+255),f,b
 14351  003A84  1F36               	comf	(___fttol@lval+2)& (0+255),f,b
 14352  003A86  1F35               	comf	(___fttol@lval+1)& (0+255),f,b
 14353  003A88  6D34               	negf	___fttol@lval& (0+255),b
 14354  003A8A  0E00               	movlw	0
 14355  003A8C  2335               	addwfc	(___fttol@lval+1)& (0+255),f,b
 14356  003A8E  2336               	addwfc	(___fttol@lval+2)& (0+255),f,b
 14357  003A90  2337               	addwfc	(___fttol@lval+3)& (0+255),f,b
 14358  003A92                     l6227:
 14359                           
 14360                           ; BSR set to: 1
 14361  003A92  C134  F12A         	movff	___fttol@lval,?___fttol
 14362  003A96  C135  F12B         	movff	___fttol@lval+1,?___fttol+1
 14363  003A9A  C136  F12C         	movff	___fttol@lval+2,?___fttol+2
 14364  003A9E  C137  F12D         	movff	___fttol@lval+3,?___fttol+3
 14365  003AA2  0012               	return	
 14366  003AA4                     __end_of___fttol:
 14367                           	opt stack 0
 14368                           tblptru	equ	0xFF8
 14369                           tblptrh	equ	0xFF7
 14370                           tblptrl	equ	0xFF6
 14371                           tablat	equ	0xFF5
 14372                           prodh	equ	0xFF4
 14373                           prodl	equ	0xFF3
 14374                           intcon	equ	0xFF2
 14375                           postinc0	equ	0xFEE
 14376                           wreg	equ	0xFE8
 14377                           postdec1	equ	0xFE5
 14378                           fsr1l	equ	0xFE1
 14379                           indf2	equ	0xFDF
 14380                           postinc2	equ	0xFDE
 14381                           postdec2	equ	0xFDD
 14382                           fsr2h	equ	0xFDA
 14383                           fsr2l	equ	0xFD9
 14384                           status	equ	0xFD8
 14385                           
 14386 ;; *************** function ___aldiv *****************
 14387 ;; Defined at:
 14388 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
 14389 ;; Parameters:    Size  Location     Type
 14390 ;;  dividend        4    0[BANK1 ] long 
 14391 ;;  divisor         4    4[BANK1 ] long 
 14392 ;; Auto vars:     Size  Location     Type
 14393 ;;  quotient        4   10[BANK1 ] long 
 14394 ;;  sign            1    9[BANK1 ] unsigned char 
 14395 ;;  counter         1    8[BANK1 ] unsigned char 
 14396 ;; Return value:  Size  Location     Type
 14397 ;;                  4    0[BANK1 ] long 
 14398 ;; Registers used:
 14399 ;;		wreg, status,2, status,0
 14400 ;; Tracked objects:
 14401 ;;		On entry : 0/0
 14402 ;;		On exit  : 0/0
 14403 ;;		Unchanged: 0/0
 14404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14405 ;;      Params:         0       0       8       0       0       0       0
 14406 ;;      Locals:         0       0       6       0       0       0       0
 14407 ;;      Temps:          0       0       0       0       0       0       0
 14408 ;;      Totals:         0       0      14       0       0       0       0
 14409 ;;Total ram usage:       14 bytes
 14410 ;; Hardware stack levels used:    1
 14411 ;; Hardware stack levels required when called:   12
 14412 ;; This function calls:
 14413 ;;		Nothing
 14414 ;; This function is called by:
 14415 ;;		_desintegrator
 14416 ;; This function uses a non-reentrant model
 14417 ;;
 14418                           
 14419                           	psect	text55
 14420  003E2C                     __ptext55:
 14421                           	opt stack 0
 14422  003E2C                     ___aldiv:
 14423                           	opt stack 15
 14424                           
 14425                           ; BSR set to: 1
 14426                           ;incstack = 0
 14427  003E2C  0E00               	movlw	0
 14428  003E2E  0101               	movlb	1	; () banked
 14429  003E30  6F09               	movwf	___aldiv@sign& (0+255),b
 14430                           
 14431                           ; BSR set to: 1
 14432  003E32  0101               	movlb	1	; () banked
 14433  003E34  AF07               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 14434  003E36  D00C               	goto	l10287
 14435                           
 14436                           ; BSR set to: 1
 14437  003E38  0101               	movlb	1	; () banked
 14438  003E3A  1F07               	comf	(___aldiv@divisor+3)& (0+255),f,b
 14439  003E3C  1F06               	comf	(___aldiv@divisor+2)& (0+255),f,b
 14440  003E3E  1F05               	comf	(___aldiv@divisor+1)& (0+255),f,b
 14441  003E40  6D04               	negf	___aldiv@divisor& (0+255),b
 14442  003E42  0E00               	movlw	0
 14443  003E44  2305               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 14444  003E46  2306               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 14445  003E48  2307               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 14446                           
 14447                           ; BSR set to: 1
 14448  003E4A  0E01               	movlw	1
 14449  003E4C  0101               	movlb	1	; () banked
 14450  003E4E  6F09               	movwf	___aldiv@sign& (0+255),b
 14451  003E50                     l10287:
 14452                           
 14453                           ; BSR set to: 1
 14454  003E50  0101               	movlb	1	; () banked
 14455  003E52  AF03               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 14456  003E54  D00C               	goto	l10293
 14457                           
 14458                           ; BSR set to: 1
 14459  003E56  0101               	movlb	1	; () banked
 14460  003E58  1F03               	comf	(___aldiv@dividend+3)& (0+255),f,b
 14461  003E5A  1F02               	comf	(___aldiv@dividend+2)& (0+255),f,b
 14462  003E5C  1F01               	comf	(___aldiv@dividend+1)& (0+255),f,b
 14463  003E5E  6D00               	negf	___aldiv@dividend& (0+255),b
 14464  003E60  0E00               	movlw	0
 14465  003E62  2301               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 14466  003E64  2302               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 14467  003E66  2303               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 14468                           
 14469                           ; BSR set to: 1
 14470  003E68  0E01               	movlw	1
 14471  003E6A  0101               	movlb	1	; () banked
 14472  003E6C  1B09               	xorwf	___aldiv@sign& (0+255),f,b
 14473  003E6E                     l10293:
 14474                           
 14475                           ; BSR set to: 1
 14476  003E6E  0E00               	movlw	0
 14477  003E70  0101               	movlb	1	; () banked
 14478  003E72  6F0A               	movwf	___aldiv@quotient& (0+255),b
 14479  003E74  0E00               	movlw	0
 14480  003E76  6F0B               	movwf	(___aldiv@quotient+1)& (0+255),b
 14481  003E78  0E00               	movlw	0
 14482  003E7A  6F0C               	movwf	(___aldiv@quotient+2)& (0+255),b
 14483  003E7C  0E00               	movlw	0
 14484  003E7E  6F0D               	movwf	(___aldiv@quotient+3)& (0+255),b
 14485                           
 14486                           ; BSR set to: 1
 14487  003E80  0101               	movlb	1	; () banked
 14488  003E82  5104               	movf	___aldiv@divisor& (0+255),w,b
 14489  003E84  0101               	movlb	1	; () banked
 14490  003E86  1105               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 14491  003E88  0101               	movlb	1	; () banked
 14492  003E8A  1106               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 14493  003E8C  0101               	movlb	1	; () banked
 14494  003E8E  1107               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 14495  003E90  B4D8               	btfsc	status,2,c
 14496  003E92  D042               	goto	l10315
 14497                           
 14498                           ; BSR set to: 1
 14499  003E94  0E01               	movlw	1
 14500  003E96  0101               	movlb	1	; () banked
 14501  003E98  6F08               	movwf	___aldiv@counter& (0+255),b
 14502  003E9A  D008               	goto	l10301
 14503  003E9C                     l10299:
 14504                           
 14505                           ; BSR set to: 1
 14506  003E9C  0101               	movlb	1	; () banked
 14507  003E9E  90D8               	bcf	status,0,c
 14508  003EA0  3704               	rlcf	___aldiv@divisor& (0+255),f,b
 14509  003EA2  3705               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 14510  003EA4  3706               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 14511  003EA6  3707               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 14512  003EA8  0101               	movlb	1	; () banked
 14513  003EAA  2B08               	incf	___aldiv@counter& (0+255),f,b
 14514  003EAC                     l10301:
 14515                           
 14516                           ; BSR set to: 1
 14517  003EAC  0101               	movlb	1	; () banked
 14518  003EAE  AF07               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 14519  003EB0  D7F5               	goto	l10299
 14520  003EB2                     l10303:
 14521                           
 14522                           ; BSR set to: 1
 14523  003EB2  0101               	movlb	1	; () banked
 14524  003EB4  90D8               	bcf	status,0,c
 14525  003EB6  370A               	rlcf	___aldiv@quotient& (0+255),f,b
 14526  003EB8  370B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 14527  003EBA  370C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 14528  003EBC  370D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 14529                           
 14530                           ; BSR set to: 1
 14531  003EBE  0101               	movlb	1	; () banked
 14532  003EC0  5104               	movf	___aldiv@divisor& (0+255),w,b
 14533  003EC2  0101               	movlb	1	; () banked
 14534  003EC4  5D00               	subwf	___aldiv@dividend& (0+255),w,b
 14535  003EC6  0101               	movlb	1	; () banked
 14536  003EC8  5105               	movf	(___aldiv@divisor+1)& (0+255),w,b
 14537  003ECA  0101               	movlb	1	; () banked
 14538  003ECC  5901               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 14539  003ECE  0101               	movlb	1	; () banked
 14540  003ED0  5106               	movf	(___aldiv@divisor+2)& (0+255),w,b
 14541  003ED2  0101               	movlb	1	; () banked
 14542  003ED4  5902               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 14543  003ED6  0101               	movlb	1	; () banked
 14544  003ED8  5107               	movf	(___aldiv@divisor+3)& (0+255),w,b
 14545  003EDA  0101               	movlb	1	; () banked
 14546  003EDC  5903               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 14547  003EDE  A0D8               	btfss	status,0,c
 14548  003EE0  D012               	goto	l10311
 14549                           
 14550                           ; BSR set to: 1
 14551  003EE2  0101               	movlb	1	; () banked
 14552  003EE4  5104               	movf	___aldiv@divisor& (0+255),w,b
 14553  003EE6  0101               	movlb	1	; () banked
 14554  003EE8  5F00               	subwf	___aldiv@dividend& (0+255),f,b
 14555  003EEA  0101               	movlb	1	; () banked
 14556  003EEC  5105               	movf	(___aldiv@divisor+1)& (0+255),w,b
 14557  003EEE  0101               	movlb	1	; () banked
 14558  003EF0  5B01               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 14559  003EF2  0101               	movlb	1	; () banked
 14560  003EF4  5106               	movf	(___aldiv@divisor+2)& (0+255),w,b
 14561  003EF6  0101               	movlb	1	; () banked
 14562  003EF8  5B02               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 14563  003EFA  0101               	movlb	1	; () banked
 14564  003EFC  5107               	movf	(___aldiv@divisor+3)& (0+255),w,b
 14565  003EFE  0101               	movlb	1	; () banked
 14566  003F00  5B03               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 14567                           
 14568                           ; BSR set to: 1
 14569  003F02  0101               	movlb	1	; () banked
 14570  003F04  810A               	bsf	___aldiv@quotient& (0+255),0,b
 14571  003F06                     l10311:
 14572                           
 14573                           ; BSR set to: 1
 14574  003F06  0101               	movlb	1	; () banked
 14575  003F08  90D8               	bcf	status,0,c
 14576  003F0A  3307               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 14577  003F0C  3306               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 14578  003F0E  3305               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 14579  003F10  3304               	rrcf	___aldiv@divisor& (0+255),f,b
 14580                           
 14581                           ; BSR set to: 1
 14582  003F12  0101               	movlb	1	; () banked
 14583  003F14  2F08               	decfsz	___aldiv@counter& (0+255),f,b
 14584  003F16  D7CD               	goto	l10303
 14585  003F18                     l10315:
 14586                           
 14587                           ; BSR set to: 1
 14588  003F18  0101               	movlb	1	; () banked
 14589  003F1A  5109               	movf	___aldiv@sign& (0+255),w,b
 14590  003F1C  0101               	movlb	1	; () banked
 14591  003F1E  B4D8               	btfsc	status,2,c
 14592  003F20  D009               	goto	l10319
 14593                           
 14594                           ; BSR set to: 1
 14595  003F22  0101               	movlb	1	; () banked
 14596  003F24  1F0D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 14597  003F26  1F0C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 14598  003F28  1F0B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 14599  003F2A  6D0A               	negf	___aldiv@quotient& (0+255),b
 14600  003F2C  0E00               	movlw	0
 14601  003F2E  230B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 14602  003F30  230C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 14603  003F32  230D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 14604  003F34                     l10319:
 14605                           
 14606                           ; BSR set to: 1
 14607  003F34  C10A  F100         	movff	___aldiv@quotient,?___aldiv
 14608  003F38  C10B  F101         	movff	___aldiv@quotient+1,?___aldiv+1
 14609  003F3C  C10C  F102         	movff	___aldiv@quotient+2,?___aldiv+2
 14610  003F40  C10D  F103         	movff	___aldiv@quotient+3,?___aldiv+3
 14611  003F44  0012               	return	
 14612  003F46                     __end_of___aldiv:
 14613                           	opt stack 0
 14614                           tblptru	equ	0xFF8
 14615                           tblptrh	equ	0xFF7
 14616                           tblptrl	equ	0xFF6
 14617                           tablat	equ	0xFF5
 14618                           prodh	equ	0xFF4
 14619                           prodl	equ	0xFF3
 14620                           intcon	equ	0xFF2
 14621                           postinc0	equ	0xFEE
 14622                           wreg	equ	0xFE8
 14623                           postdec1	equ	0xFE5
 14624                           fsr1l	equ	0xFE1
 14625                           indf2	equ	0xFDF
 14626                           postinc2	equ	0xFDE
 14627                           postdec2	equ	0xFDD
 14628                           fsr2h	equ	0xFDA
 14629                           fsr2l	equ	0xFD9
 14630                           status	equ	0xFD8
 14631                           
 14632 ;; *************** function _checkPass *****************
 14633 ;; Defined at:
 14634 ;;		line 14 in file "source/DisplayProtocol.h"
 14635 ;; Parameters:    Size  Location     Type
 14636 ;;		None
 14637 ;; Auto vars:     Size  Location     Type
 14638 ;;  i               2    5[BANK1 ] int 
 14639 ;;  passOK          1    4[BANK1 ] unsigned char 
 14640 ;; Return value:  Size  Location     Type
 14641 ;;                  1    wreg      unsigned char 
 14642 ;; Registers used:
 14643 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14644 ;; Tracked objects:
 14645 ;;		On entry : 0/0
 14646 ;;		On exit  : 0/0
 14647 ;;		Unchanged: 0/0
 14648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14649 ;;      Params:         0       0       0       0       0       0       0
 14650 ;;      Locals:         0       0       3       0       0       0       0
 14651 ;;      Temps:          0       0       4       0       0       0       0
 14652 ;;      Totals:         0       0       7       0       0       0       0
 14653 ;;Total ram usage:        7 bytes
 14654 ;; Hardware stack levels used:    1
 14655 ;; Hardware stack levels required when called:   12
 14656 ;; This function calls:
 14657 ;;		Nothing
 14658 ;; This function is called by:
 14659 ;;		_pressENTER
 14660 ;; This function uses a non-reentrant model
 14661 ;;
 14662                           
 14663                           	psect	text56
 14664  005DB6                     __ptext56:
 14665                           	opt stack 0
 14666  005DB6                     _checkPass:
 14667                           	opt stack 16
 14668                           
 14669                           ;DisplayProtocol.h: 15: int i;
 14670                           ;DisplayProtocol.h: 16: char passOK = 0;
 14671                           
 14672                           ; BSR set to: 1
 14673                           ;incstack = 0
 14674  005DB6  0E00               	movlw	0
 14675  005DB8  0101               	movlb	1	; () banked
 14676  005DBA  6F04               	movwf	checkPass@passOK& (0+255),b
 14677                           
 14678                           ;DisplayProtocol.h: 17: for (i = 0; i < 4; i++) {
 14679  005DBC  0E00               	movlw	0
 14680  005DBE  0101               	movlb	1	; () banked
 14681  005DC0  6F06               	movwf	(checkPass@i+1)& (0+255),b
 14682  005DC2  0E00               	movlw	0
 14683  005DC4  6F05               	movwf	checkPass@i& (0+255),b
 14684  005DC6                     l10541:
 14685                           
 14686                           ; BSR set to: 1
 14687  005DC6  0101               	movlb	1	; () banked
 14688  005DC8  BF06               	btfsc	(checkPass@i+1)& (0+255),7,b
 14689  005DCA  D008               	goto	l10545
 14690  005DCC  0101               	movlb	1	; () banked
 14691  005DCE  5106               	movf	(checkPass@i+1)& (0+255),w,b
 14692  005DD0  E136               	bnz	l10555
 14693  005DD2  0E04               	movlw	4
 14694  005DD4  0101               	movlb	1	; () banked
 14695  005DD6  5D05               	subwf	checkPass@i& (0+255),w,b
 14696  005DD8  B0D8               	btfsc	status,0,c
 14697  005DDA  D031               	goto	l10555
 14698  005DDC                     l10545:
 14699                           
 14700                           ; BSR set to: 1
 14701                           ;DisplayProtocol.h: 18: if (introducido[i] == contra[i])
 14702  005DDC  0EC0               	movlw	low _contra
 14703  005DDE  0101               	movlb	1	; () banked
 14704  005DE0  2505               	addwf	checkPass@i& (0+255),w,b
 14705  005DE2  6ED9               	movwf	fsr2l,c
 14706  005DE4  0E00               	movlw	high _contra
 14707  005DE6  0101               	movlb	1	; () banked
 14708  005DE8  2106               	addwfc	(checkPass@i+1)& (0+255),w,b
 14709  005DEA  6EDA               	movwf	fsr2h,c
 14710  005DEC  50DF               	movf	indf2,w,c
 14711  005DEE  0101               	movlb	1	; () banked
 14712  005DF0  6F00               	movwf	??_checkPass& (0+255),b
 14713  005DF2  6B01               	clrf	(??_checkPass+1)& (0+255),b
 14714  005DF4  0EA6               	movlw	low _introducido
 14715  005DF6  0101               	movlb	1	; () banked
 14716  005DF8  2505               	addwf	checkPass@i& (0+255),w,b
 14717  005DFA  6ED9               	movwf	fsr2l,c
 14718  005DFC  0E01               	movlw	high _introducido
 14719  005DFE  0101               	movlb	1	; () banked
 14720  005E00  2106               	addwfc	(checkPass@i+1)& (0+255),w,b
 14721  005E02  6EDA               	movwf	fsr2h,c
 14722  005E04  50DF               	movf	indf2,w,c
 14723  005E06  0101               	movlb	1	; () banked
 14724  005E08  6F02               	movwf	(??_checkPass+2)& (0+255),b
 14725  005E0A  6B03               	clrf	(??_checkPass+3)& (0+255),b
 14726  005E0C  BF02               	btfsc	(??_checkPass+2)& (0+255),7,b
 14727  005E0E  0703               	decf	(??_checkPass+3)& (0+255),f,b
 14728  005E10  0101               	movlb	1	; () banked
 14729  005E12  5100               	movf	??_checkPass& (0+255),w,b
 14730  005E14  0101               	movlb	1	; () banked
 14731  005E16  1902               	xorwf	(??_checkPass+2)& (0+255),w,b
 14732  005E18  E10A               	bnz	l10549
 14733  005E1A  0101               	movlb	1	; () banked
 14734  005E1C  5101               	movf	(??_checkPass+1)& (0+255),w,b
 14735  005E1E  0101               	movlb	1	; () banked
 14736  005E20  1903               	xorwf	(??_checkPass+3)& (0+255),w,b
 14737  005E22  A4D8               	btfss	status,2,c
 14738  005E24  D004               	goto	l10549
 14739                           
 14740                           ; BSR set to: 1
 14741                           ;DisplayProtocol.h: 19: passOK = 1;
 14742  005E26  0E01               	movlw	1
 14743  005E28  0101               	movlb	1	; () banked
 14744  005E2A  6F04               	movwf	checkPass@passOK& (0+255),b
 14745  005E2C  D004               	goto	l10551
 14746  005E2E                     l10549:
 14747                           
 14748                           ; BSR set to: 1
 14749                           ;DisplayProtocol.h: 20: else {
 14750                           ;DisplayProtocol.h: 21: passOK = 0;
 14751  005E2E  0E00               	movlw	0
 14752  005E30  0101               	movlb	1	; () banked
 14753  005E32  6F04               	movwf	checkPass@passOK& (0+255),b
 14754                           
 14755                           ;DisplayProtocol.h: 22: break;
 14756  005E34  D004               	goto	l10555
 14757  005E36                     l10551:
 14758                           
 14759                           ; BSR set to: 1
 14760  005E36  0101               	movlb	1	; () banked
 14761  005E38  4B05               	infsnz	checkPass@i& (0+255),f,b
 14762  005E3A  2B06               	incf	(checkPass@i+1)& (0+255),f,b
 14763  005E3C  D7C4               	goto	l10541
 14764  005E3E                     l10555:
 14765                           
 14766                           ; BSR set to: 1
 14767                           ;DisplayProtocol.h: 23: }
 14768                           ;DisplayProtocol.h: 24: }
 14769                           ;DisplayProtocol.h: 25: return passOK;
 14770  005E3E  0101               	movlb	1	; () banked
 14771  005E40  5104               	movf	checkPass@passOK& (0+255),w,b
 14772  005E42  0012               	return	
 14773  005E44                     __end_of_checkPass:
 14774                           	opt stack 0
 14775                           tblptru	equ	0xFF8
 14776                           tblptrh	equ	0xFF7
 14777                           tblptrl	equ	0xFF6
 14778                           tablat	equ	0xFF5
 14779                           prodh	equ	0xFF4
 14780                           prodl	equ	0xFF3
 14781                           intcon	equ	0xFF2
 14782                           postinc0	equ	0xFEE
 14783                           wreg	equ	0xFE8
 14784                           postdec1	equ	0xFE5
 14785                           fsr1l	equ	0xFE1
 14786                           indf2	equ	0xFDF
 14787                           postinc2	equ	0xFDE
 14788                           postdec2	equ	0xFDD
 14789                           fsr2h	equ	0xFDA
 14790                           fsr2l	equ	0xFD9
 14791                           status	equ	0xFD8
 14792                           
 14793 ;; *************** function _pressDOWN *****************
 14794 ;; Defined at:
 14795 ;;		line 181 in file "source/DisplayProtocol.h"
 14796 ;; Parameters:    Size  Location     Type
 14797 ;;		None
 14798 ;; Auto vars:     Size  Location     Type
 14799 ;;		None
 14800 ;; Return value:  Size  Location     Type
 14801 ;;                  1    wreg      void 
 14802 ;; Registers used:
 14803 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14804 ;; Tracked objects:
 14805 ;;		On entry : 0/0
 14806 ;;		On exit  : 0/0
 14807 ;;		Unchanged: 0/0
 14808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14809 ;;      Params:         0       0       0       0       0       0       0
 14810 ;;      Locals:         0       0       0       0       0       0       0
 14811 ;;      Temps:          0       0       1       0       0       0       0
 14812 ;;      Totals:         0       0       1       0       0       0       0
 14813 ;;Total ram usage:        1 bytes
 14814 ;; Hardware stack levels used:    1
 14815 ;; Hardware stack levels required when called:   13
 14816 ;; This function calls:
 14817 ;;		_chanValDigDOWN
 14818 ;; This function is called by:
 14819 ;;		_buttonChecking
 14820 ;; This function uses a non-reentrant model
 14821 ;;
 14822                           
 14823                           	psect	text57
 14824  0045B0                     __ptext57:
 14825                           	opt stack 0
 14826  0045B0                     _pressDOWN:
 14827                           	opt stack 16
 14828                           
 14829                           ;DisplayProtocol.h: 182: if (actualScreen == 0 || actualScreen == 4) {
 14830                           
 14831                           ; BSR set to: 1
 14832                           ;incstack = 0
 14833  0045B0  0101               	movlb	1	; () banked
 14834  0045B2  51BA               	movf	_actualScreen& (0+255),w,b
 14835  0045B4  B4D8               	btfsc	status,2,c
 14836  0045B6  D005               	goto	l11199
 14837                           
 14838                           ; BSR set to: 1
 14839  0045B8  0E04               	movlw	4
 14840  0045BA  0101               	movlb	1	; () banked
 14841  0045BC  19BA               	xorwf	_actualScreen& (0+255),w,b
 14842  0045BE  A4D8               	btfss	status,2,c
 14843  0045C0  D009               	goto	l11205
 14844  0045C2                     l11199:
 14845                           
 14846                           ; BSR set to: 1
 14847                           ;DisplayProtocol.h: 183: menuSection--;
 14848  0045C2  0101               	movlb	1	; () banked
 14849  0045C4  07C1               	decf	_menuSection& (0+255),f,b
 14850                           
 14851                           ; BSR set to: 1
 14852                           ;DisplayProtocol.h: 184: if (menuSection < 0)
 14853  0045C6  0101               	movlb	1	; () banked
 14854  0045C8  AFC1               	btfss	_menuSection& (0+255),7,b
 14855  0045CA  0012               	return	
 14856                           
 14857                           ; BSR set to: 1
 14858                           ;DisplayProtocol.h: 185: menuSection = 4;
 14859  0045CC  0E04               	movlw	4
 14860  0045CE  0101               	movlb	1	; () banked
 14861  0045D0  6FC1               	movwf	_menuSection& (0+255),b
 14862                           
 14863                           ; BSR set to: 1
 14864                           ;DisplayProtocol.h: 186: } else if (actualScreen == 1) {
 14865  0045D2  0012               	return	
 14866  0045D4                     l11205:
 14867                           
 14868                           ; BSR set to: 1
 14869  0045D4  0101               	movlb	1	; () banked
 14870  0045D6  05BA               	decf	_actualScreen& (0+255),w,b
 14871  0045D8  A4D8               	btfss	status,2,c
 14872  0045DA  D022               	goto	l11211
 14873                           
 14874                           ; BSR set to: 1
 14875                           ;DisplayProtocol.h: 187: introducido[passSection]--;
 14876  0045DC  0101               	movlb	1	; () banked
 14877  0045DE  51C2               	movf	_passSection& (0+255),w,b
 14878  0045E0  0D01               	mullw	1
 14879  0045E2  0EA6               	movlw	low _introducido
 14880  0045E4  24F3               	addwf	prodl,w,c
 14881  0045E6  6ED9               	movwf	fsr2l,c
 14882  0045E8  0E01               	movlw	high _introducido
 14883  0045EA  20F4               	addwfc	prodh,w,c
 14884  0045EC  6EDA               	movwf	fsr2h,c
 14885  0045EE  06DF               	decf	indf2,f,c
 14886                           
 14887                           ;DisplayProtocol.h: 188: if (introducido[passSection] < 0)
 14888  0045F0  0101               	movlb	1	; () banked
 14889  0045F2  51C2               	movf	_passSection& (0+255),w,b
 14890  0045F4  0D01               	mullw	1
 14891  0045F6  0EA6               	movlw	low _introducido
 14892  0045F8  24F3               	addwf	prodl,w,c
 14893  0045FA  6ED9               	movwf	fsr2l,c
 14894  0045FC  0E01               	movlw	high _introducido
 14895  0045FE  20F4               	addwfc	prodh,w,c
 14896  004600  6EDA               	movwf	fsr2h,c
 14897  004602  0E00               	movlw	0
 14898  004604  AEDB               	btfss	plusw2,7,c
 14899  004606  0012               	return	
 14900                           
 14901                           ; BSR set to: 1
 14902                           ;DisplayProtocol.h: 189: introducido[passSection] = 9;
 14903  004608  0101               	movlb	1	; () banked
 14904  00460A  51C2               	movf	_passSection& (0+255),w,b
 14905  00460C  0D01               	mullw	1
 14906  00460E  0EA6               	movlw	low _introducido
 14907  004610  24F3               	addwf	prodl,w,c
 14908  004612  6ED9               	movwf	fsr2l,c
 14909  004614  0E01               	movlw	high _introducido
 14910  004616  20F4               	addwfc	prodh,w,c
 14911  004618  6EDA               	movwf	fsr2h,c
 14912  00461A  0E09               	movlw	9
 14913  00461C  6EDF               	movwf	indf2,c
 14914                           
 14915                           ; BSR set to: 1
 14916                           ;DisplayProtocol.h: 190: } else if (actualScreen == 2 || actualScreen == 3
 14917  00461E  0012               	return	
 14918  004620                     l11211:
 14919                           
 14920                           ; BSR set to: 1
 14921                           ;DisplayProtocol.h: 191: || actualScreen == 10 || actualScreen == 11) {
 14922  004620  0E02               	movlw	2
 14923  004622  0101               	movlb	1	; () banked
 14924  004624  19BA               	xorwf	_actualScreen& (0+255),w,b
 14925  004626  B4D8               	btfsc	status,2,c
 14926  004628  D00F               	goto	l11219
 14927                           
 14928                           ; BSR set to: 1
 14929  00462A  0E03               	movlw	3
 14930  00462C  0101               	movlb	1	; () banked
 14931  00462E  19BA               	xorwf	_actualScreen& (0+255),w,b
 14932  004630  B4D8               	btfsc	status,2,c
 14933  004632  D00A               	goto	l11219
 14934                           
 14935                           ; BSR set to: 1
 14936  004634  0E0A               	movlw	10
 14937  004636  0101               	movlb	1	; () banked
 14938  004638  19BA               	xorwf	_actualScreen& (0+255),w,b
 14939  00463A  B4D8               	btfsc	status,2,c
 14940  00463C  D005               	goto	l11219
 14941                           
 14942                           ; BSR set to: 1
 14943  00463E  0E0B               	movlw	11
 14944  004640  0101               	movlb	1	; () banked
 14945  004642  19BA               	xorwf	_actualScreen& (0+255),w,b
 14946  004644  A4D8               	btfss	status,2,c
 14947  004646  D011               	goto	l11225
 14948  004648                     l11219:
 14949                           
 14950                           ; BSR set to: 1
 14951                           ;DisplayProtocol.h: 192: selSN = !selSN;
 14952  004648  0101               	movlb	1	; () banked
 14953  00464A  51C3               	movf	_selSN& (0+255),w,b
 14954  00464C  A4D8               	btfss	status,2,c
 14955  00464E  D002               	goto	u16140
 14956  004650  0E01               	movlw	1
 14957  004652  D001               	goto	u16150
 14958  004654                     u16140:
 14959  004654  0E00               	movlw	0
 14960  004656                     u16150:
 14961  004656  0101               	movlb	1	; () banked
 14962  004658  6FC3               	movwf	_selSN& (0+255),b
 14963                           
 14964                           ; BSR set to: 1
 14965                           ;DisplayProtocol.h: 193: if(selSN > 1)
 14966  00465A  0E01               	movlw	1
 14967  00465C  0101               	movlb	1	; () banked
 14968  00465E  65C3               	cpfsgt	_selSN& (0+255),b
 14969  004660  0012               	return	
 14970                           
 14971                           ; BSR set to: 1
 14972                           ;DisplayProtocol.h: 194: selSN = 0;
 14973  004662  0E00               	movlw	0
 14974  004664  0101               	movlb	1	; () banked
 14975  004666  6FC3               	movwf	_selSN& (0+255),b
 14976                           
 14977                           ; BSR set to: 1
 14978                           ;DisplayProtocol.h: 195: }else if(actualScreen == 5) {
 14979  004668  0012               	return	
 14980  00466A                     l11225:
 14981                           
 14982                           ; BSR set to: 1
 14983  00466A  0E05               	movlw	5
 14984  00466C  0101               	movlb	1	; () banked
 14985  00466E  19BA               	xorwf	_actualScreen& (0+255),w,b
 14986  004670  B4D8               	btfsc	status,2,c
 14987  004672  D00C               	goto	l11237
 14988  004674  D01A               	goto	l11239
 14989  004676                     l11229:
 14990                           
 14991                           ; BSR set to: 1
 14992                           ;DisplayProtocol.h: 200: chanValDigDOWN();
 14993  004676  EC96  F026         	call	_chanValDigDOWN	;wreg free
 14994                           
 14995                           ;DisplayProtocol.h: 201: break;
 14996  00467A  0012               	return	
 14997  00467C                     l11231:
 14998                           
 14999                           ;DisplayProtocol.h: 203: chanVals--;
 15000  00467C  0101               	movlb	1	; () banked
 15001  00467E  07B1               	decf	_chanVals& (0+255),f,b
 15002  004680  A0D8               	btfss	status,0,c
 15003  004682  07B2               	decf	(_chanVals+1)& (0+255),f,b
 15004                           
 15005                           ;DisplayProtocol.h: 204: break;
 15006  004684  0012               	return	
 15007  004686                     l11233:
 15008                           
 15009                           ; BSR set to: 1
 15010                           ;DisplayProtocol.h: 206: chanValDigDOWN();
 15011  004686  EC96  F026         	call	_chanValDigDOWN	;wreg free
 15012                           
 15013                           ;DisplayProtocol.h: 208: }
 15014                           ;DisplayProtocol.h: 209: }
 15015                           
 15016                           ;DisplayProtocol.h: 207: break;
 15017  00468A  0012               	return	
 15018  00468C                     l11237:
 15019  00468C  0101               	movlb	1	; () banked
 15020  00468E  51C1               	movf	_menuSection& (0+255),w,b
 15021                           
 15022                           ; Switch size 1, requested type "space"
 15023                           ; Number of cases is 4, Range of values is 0 to 3
 15024                           ; switch strategies available:
 15025                           ; Name         Instructions Cycles
 15026                           ; simple_byte           13     7 (average)
 15027                           ;	Chosen strategy is simple_byte
 15028  004690  0A00               	xorlw	0	; case 0
 15029  004692  B4D8               	btfsc	status,2,c
 15030  004694  0012               	return	
 15031  004696  0A01               	xorlw	1	; case 1
 15032  004698  B4D8               	btfsc	status,2,c
 15033  00469A  D7ED               	goto	l11229
 15034  00469C  0A03               	xorlw	3	; case 2
 15035  00469E  B4D8               	btfsc	status,2,c
 15036  0046A0  D7ED               	goto	l11231
 15037  0046A2  0A01               	xorlw	1	; case 3
 15038  0046A4  A4D8               	btfss	status,2,c
 15039                           
 15040                           ; BSR set to: 1
 15041                           ;DisplayProtocol.h: 210: }else if(actualScreen == 12)
 15042  0046A6  0012               	return	
 15043  0046A8  D7EE               	goto	l11233
 15044  0046AA                     l11239:
 15045                           
 15046                           ; BSR set to: 1
 15047  0046AA  0E0C               	movlw	12
 15048  0046AC  0101               	movlb	1	; () banked
 15049  0046AE  19BA               	xorwf	_actualScreen& (0+255),w,b
 15050  0046B0  A4D8               	btfss	status,2,c
 15051  0046B2  0012               	return	
 15052                           
 15053                           ; BSR set to: 1
 15054                           ;DisplayProtocol.h: 211: chanValDigDOWN();
 15055  0046B4  EC96  F026         	call	_chanValDigDOWN	;wreg free
 15056  0046B8  0012               	return	
 15057  0046BA                     __end_of_pressDOWN:
 15058                           	opt stack 0
 15059                           tblptru	equ	0xFF8
 15060                           tblptrh	equ	0xFF7
 15061                           tblptrl	equ	0xFF6
 15062                           tablat	equ	0xFF5
 15063                           prodh	equ	0xFF4
 15064                           prodl	equ	0xFF3
 15065                           intcon	equ	0xFF2
 15066                           postinc0	equ	0xFEE
 15067                           wreg	equ	0xFE8
 15068                           postdec1	equ	0xFE5
 15069                           fsr1l	equ	0xFE1
 15070                           indf2	equ	0xFDF
 15071                           postinc2	equ	0xFDE
 15072                           postdec2	equ	0xFDD
 15073                           plusw2	equ	0xFDB
 15074                           fsr2h	equ	0xFDA
 15075                           fsr2l	equ	0xFD9
 15076                           status	equ	0xFD8
 15077                           
 15078 ;; *************** function _chanValDigDOWN *****************
 15079 ;; Defined at:
 15080 ;;		line 37 in file "source/DisplayProtocol.h"
 15081 ;; Parameters:    Size  Location     Type
 15082 ;;		None
 15083 ;; Auto vars:     Size  Location     Type
 15084 ;;		None
 15085 ;; Return value:  Size  Location     Type
 15086 ;;                  1    wreg      void 
 15087 ;; Registers used:
 15088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15089 ;; Tracked objects:
 15090 ;;		On entry : 0/0
 15091 ;;		On exit  : 0/0
 15092 ;;		Unchanged: 0/0
 15093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15094 ;;      Params:         0       0       0       0       0       0       0
 15095 ;;      Locals:         0       0       0       0       0       0       0
 15096 ;;      Temps:          0       0       5       0       0       0       0
 15097 ;;      Totals:         0       0       5       0       0       0       0
 15098 ;;Total ram usage:        5 bytes
 15099 ;; Hardware stack levels used:    1
 15100 ;; Hardware stack levels required when called:   12
 15101 ;; This function calls:
 15102 ;;		Nothing
 15103 ;; This function is called by:
 15104 ;;		_pressDOWN
 15105 ;; This function uses a non-reentrant model
 15106 ;;
 15107                           
 15108                           	psect	text58
 15109  004D2C                     __ptext58:
 15110                           	opt stack 0
 15111  004D2C                     _chanValDigDOWN:
 15112                           	opt stack 16
 15113                           
 15114                           ;DisplayProtocol.h: 38: chanValdig[chanValSection]--;
 15115                           
 15116                           ;incstack = 0
 15117  004D2C  0101               	movlb	1	; () banked
 15118  004D2E  5194               	movf	_chanValSection& (0+255),w,b
 15119  004D30  0D01               	mullw	1
 15120  004D32  0EA0               	movlw	low _chanValdig
 15121  004D34  24F3               	addwf	prodl,w,c
 15122  004D36  6ED9               	movwf	fsr2l,c
 15123  004D38  0E01               	movlw	high _chanValdig
 15124  004D3A  20F4               	addwfc	prodh,w,c
 15125  004D3C  6EDA               	movwf	fsr2h,c
 15126  004D3E  06DF               	decf	indf2,f,c
 15127                           
 15128                           ;DisplayProtocol.h: 39: if(chanValdig[chanValSection] < 0) {
 15129  004D40  0101               	movlb	1	; () banked
 15130  004D42  5194               	movf	_chanValSection& (0+255),w,b
 15131  004D44  0D01               	mullw	1
 15132  004D46  0EA0               	movlw	low _chanValdig
 15133  004D48  24F3               	addwf	prodl,w,c
 15134  004D4A  6ED9               	movwf	fsr2l,c
 15135  004D4C  0E01               	movlw	high _chanValdig
 15136  004D4E  20F4               	addwfc	prodh,w,c
 15137  004D50  6EDA               	movwf	fsr2h,c
 15138  004D52  0E00               	movlw	0
 15139  004D54  AEDB               	btfss	plusw2,7,c
 15140  004D56  0012               	return	
 15141                           
 15142                           ; BSR set to: 1
 15143                           ;DisplayProtocol.h: 40: chanValdig[chanValSection] = 9;
 15144  004D58  0101               	movlb	1	; () banked
 15145  004D5A  5194               	movf	_chanValSection& (0+255),w,b
 15146  004D5C  0D01               	mullw	1
 15147  004D5E  0EA0               	movlw	low _chanValdig
 15148  004D60  24F3               	addwf	prodl,w,c
 15149  004D62  6ED9               	movwf	fsr2l,c
 15150  004D64  0E01               	movlw	high _chanValdig
 15151  004D66  20F4               	addwfc	prodh,w,c
 15152  004D68  6EDA               	movwf	fsr2h,c
 15153  004D6A  0E09               	movlw	9
 15154  004D6C  6EDF               	movwf	indf2,c
 15155                           
 15156                           ; BSR set to: 1
 15157                           ;DisplayProtocol.h: 41: if(chanValSection > 1 && chanValdig[chanValSection - 1] > 0)
 15158  004D6E  0101               	movlb	1	; () banked
 15159  004D70  5194               	movf	_chanValSection& (0+255),w,b
 15160  004D72  0A80               	xorlw	128
 15161  004D74  0F7E               	addlw	-130
 15162  004D76  A0D8               	btfss	status,0,c
 15163  004D78  0012               	return	
 15164                           
 15165                           ; BSR set to: 1
 15166  004D7A  0EFF               	movlw	255
 15167  004D7C  0101               	movlb	1	; () banked
 15168  004D7E  6F00               	movwf	??_chanValDigDOWN& (0+255),b
 15169  004D80  0EFF               	movlw	255
 15170  004D82  0101               	movlb	1	; () banked
 15171  004D84  6F01               	movwf	(??_chanValDigDOWN+1)& (0+255),b
 15172  004D86  C194  F102         	movff	_chanValSection,??_chanValDigDOWN+2
 15173  004D8A  0101               	movlb	1	; () banked
 15174  004D8C  6B03               	clrf	(??_chanValDigDOWN+3)& (0+255),b
 15175  004D8E  BF02               	btfsc	(??_chanValDigDOWN+2)& (0+255),7,b
 15176  004D90  0703               	decf	(??_chanValDigDOWN+3)& (0+255),f,b
 15177  004D92  0101               	movlb	1	; () banked
 15178  004D94  5100               	movf	??_chanValDigDOWN& (0+255),w,b
 15179  004D96  0101               	movlb	1	; () banked
 15180  004D98  2702               	addwf	(??_chanValDigDOWN+2)& (0+255),f,b
 15181  004D9A  0101               	movlb	1	; () banked
 15182  004D9C  5101               	movf	(??_chanValDigDOWN+1)& (0+255),w,b
 15183  004D9E  0101               	movlb	1	; () banked
 15184  004DA0  2303               	addwfc	(??_chanValDigDOWN+3)& (0+255),f,b
 15185  004DA2  0EA0               	movlw	low _chanValdig
 15186  004DA4  0101               	movlb	1	; () banked
 15187  004DA6  2502               	addwf	(??_chanValDigDOWN+2)& (0+255),w,b
 15188  004DA8  6ED9               	movwf	fsr2l,c
 15189  004DAA  0E01               	movlw	high _chanValdig
 15190  004DAC  0101               	movlb	1	; () banked
 15191  004DAE  2103               	addwfc	(??_chanValDigDOWN+3)& (0+255),w,b
 15192  004DB0  6EDA               	movwf	fsr2h,c
 15193  004DB2  50DF               	movf	indf2,w,c
 15194  004DB4  0A80               	xorlw	128
 15195  004DB6  0F7F               	addlw	-129
 15196  004DB8  A0D8               	btfss	status,0,c
 15197  004DBA  0012               	return	
 15198                           
 15199                           ; BSR set to: 1
 15200                           ;DisplayProtocol.h: 42: chanValdig[chanValSection - 1]--;
 15201  004DBC  0EFF               	movlw	255
 15202  004DBE  0101               	movlb	1	; () banked
 15203  004DC0  6F00               	movwf	??_chanValDigDOWN& (0+255),b
 15204  004DC2  0EFF               	movlw	255
 15205  004DC4  0101               	movlb	1	; () banked
 15206  004DC6  6F01               	movwf	(??_chanValDigDOWN+1)& (0+255),b
 15207  004DC8  C194  F102         	movff	_chanValSection,??_chanValDigDOWN+2
 15208  004DCC  0101               	movlb	1	; () banked
 15209  004DCE  6B03               	clrf	(??_chanValDigDOWN+3)& (0+255),b
 15210  004DD0  BF02               	btfsc	(??_chanValDigDOWN+2)& (0+255),7,b
 15211  004DD2  0703               	decf	(??_chanValDigDOWN+3)& (0+255),f,b
 15212  004DD4  0101               	movlb	1	; () banked
 15213  004DD6  5100               	movf	??_chanValDigDOWN& (0+255),w,b
 15214  004DD8  0101               	movlb	1	; () banked
 15215  004DDA  2702               	addwf	(??_chanValDigDOWN+2)& (0+255),f,b
 15216  004DDC  0101               	movlb	1	; () banked
 15217  004DDE  5101               	movf	(??_chanValDigDOWN+1)& (0+255),w,b
 15218  004DE0  0101               	movlb	1	; () banked
 15219  004DE2  2303               	addwfc	(??_chanValDigDOWN+3)& (0+255),f,b
 15220  004DE4  0EA0               	movlw	low _chanValdig
 15221  004DE6  0101               	movlb	1	; () banked
 15222  004DE8  2502               	addwf	(??_chanValDigDOWN+2)& (0+255),w,b
 15223  004DEA  6ED9               	movwf	fsr2l,c
 15224  004DEC  0E01               	movlw	high _chanValdig
 15225  004DEE  0101               	movlb	1	; () banked
 15226  004DF0  2103               	addwfc	(??_chanValDigDOWN+3)& (0+255),w,b
 15227  004DF2  6EDA               	movwf	fsr2h,c
 15228  004DF4  06DF               	decf	indf2,f,c
 15229                           
 15230                           ; BSR set to: 1
 15231  004DF6  0012               	return	
 15232  004DF8                     __end_of_chanValDigDOWN:
 15233                           	opt stack 0
 15234                           tblptru	equ	0xFF8
 15235                           tblptrh	equ	0xFF7
 15236                           tblptrl	equ	0xFF6
 15237                           tablat	equ	0xFF5
 15238                           prodh	equ	0xFF4
 15239                           prodl	equ	0xFF3
 15240                           intcon	equ	0xFF2
 15241                           postinc0	equ	0xFEE
 15242                           wreg	equ	0xFE8
 15243                           postdec1	equ	0xFE5
 15244                           fsr1l	equ	0xFE1
 15245                           indf2	equ	0xFDF
 15246                           postinc2	equ	0xFDE
 15247                           postdec2	equ	0xFDD
 15248                           plusw2	equ	0xFDB
 15249                           fsr2h	equ	0xFDA
 15250                           fsr2l	equ	0xFD9
 15251                           status	equ	0xFD8
 15252                           
 15253 ;; *************** function _longPressUP *****************
 15254 ;; Defined at:
 15255 ;;		line 157 in file "source/DisplayProtocol.h"
 15256 ;; Parameters:    Size  Location     Type
 15257 ;;		None
 15258 ;; Auto vars:     Size  Location     Type
 15259 ;;		None
 15260 ;; Return value:  Size  Location     Type
 15261 ;;                  1    wreg      void 
 15262 ;; Registers used:
 15263 ;;		wreg, status,2, status,0
 15264 ;; Tracked objects:
 15265 ;;		On entry : 0/0
 15266 ;;		On exit  : 0/0
 15267 ;;		Unchanged: 0/0
 15268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15269 ;;      Params:         0       0       0       0       0       0       0
 15270 ;;      Locals:         0       0       0       0       0       0       0
 15271 ;;      Temps:          0       0       0       0       0       0       0
 15272 ;;      Totals:         0       0       0       0       0       0       0
 15273 ;;Total ram usage:        0 bytes
 15274 ;; Hardware stack levels used:    1
 15275 ;; Hardware stack levels required when called:   12
 15276 ;; This function calls:
 15277 ;;		Nothing
 15278 ;; This function is called by:
 15279 ;;		_buttonChecking
 15280 ;; This function uses a non-reentrant model
 15281 ;;
 15282                           
 15283                           	psect	text59
 15284  0062AA                     __ptext59:
 15285                           	opt stack 0
 15286  0062AA                     _longPressUP:
 15287                           	opt stack 17
 15288                           
 15289                           ;DisplayProtocol.h: 158: if (!UPisLP) {
 15290                           
 15291                           ; BSR set to: 1
 15292                           ;incstack = 0
 15293  0062AA  503C               	movf	_UPisLP,w,c
 15294  0062AC  A4D8               	btfss	status,2,c
 15295  0062AE  0012               	return	
 15296                           
 15297                           ;DisplayProtocol.h: 159: UPisLP = 1;
 15298  0062B0  0E01               	movlw	1
 15299  0062B2  6E3C               	movwf	_UPisLP,c
 15300                           
 15301                           ;DisplayProtocol.h: 160: if (actualScreen == 0 || actualScreen == 4) {
 15302  0062B4  0101               	movlb	1	; () banked
 15303  0062B6  51BA               	movf	_actualScreen& (0+255),w,b
 15304  0062B8  B4D8               	btfsc	status,2,c
 15305  0062BA  D005               	goto	l11175
 15306                           
 15307                           ; BSR set to: 1
 15308  0062BC  0E04               	movlw	4
 15309  0062BE  0101               	movlb	1	; () banked
 15310  0062C0  19BA               	xorwf	_actualScreen& (0+255),w,b
 15311  0062C2  A4D8               	btfss	status,2,c
 15312  0062C4  D01C               	goto	l11187
 15313  0062C6                     l11175:
 15314                           
 15315                           ; BSR set to: 1
 15316                           ;DisplayProtocol.h: 161: if (holdENTERcont > 5) {
 15317  0062C6  0E05               	movlw	5
 15318  0062C8  0101               	movlb	1	; () banked
 15319  0062CA  65BE               	cpfsgt	_holdENTERcont& (0+255),b
 15320  0062CC  D014               	goto	l11185
 15321                           
 15322                           ; BSR set to: 1
 15323                           ;DisplayProtocol.h: 162: if (actualScreen == 0) {
 15324  0062CE  0101               	movlb	1	; () banked
 15325  0062D0  51BA               	movf	_actualScreen& (0+255),w,b
 15326  0062D2  A4D8               	btfss	status,2,c
 15327  0062D4  D007               	goto	l11181
 15328                           
 15329                           ; BSR set to: 1
 15330                           ;DisplayProtocol.h: 163: actualScreen = 1;
 15331  0062D6  0E01               	movlw	1
 15332  0062D8  0101               	movlb	1	; () banked
 15333  0062DA  6FBA               	movwf	_actualScreen& (0+255),b
 15334                           
 15335                           ;DisplayProtocol.h: 164: fd = 0;
 15336  0062DC  0E00               	movlw	0
 15337  0062DE  0101               	movlb	1	; () banked
 15338  0062E0  6FBC               	movwf	_fd& (0+255),b
 15339                           
 15340                           ;DisplayProtocol.h: 165: } else if (actualScreen == 4)
 15341  0062E2  0012               	return	
 15342  0062E4                     l11181:
 15343                           
 15344                           ; BSR set to: 1
 15345  0062E4  0E04               	movlw	4
 15346  0062E6  0101               	movlb	1	; () banked
 15347  0062E8  19BA               	xorwf	_actualScreen& (0+255),w,b
 15348  0062EA  A4D8               	btfss	status,2,c
 15349  0062EC  0012               	return	
 15350                           
 15351                           ; BSR set to: 1
 15352                           ;DisplayProtocol.h: 166: actualScreen = 9;
 15353  0062EE  0E09               	movlw	9
 15354  0062F0  0101               	movlb	1	; () banked
 15355  0062F2  6FBA               	movwf	_actualScreen& (0+255),b
 15356                           
 15357                           ; BSR set to: 1
 15358                           ;DisplayProtocol.h: 167: } else
 15359                           
 15360                           ; BSR set to: 1
 15361  0062F4  0012               	return	
 15362  0062F6                     l11185:
 15363                           
 15364                           ; BSR set to: 1
 15365                           ;DisplayProtocol.h: 168: menuSection = 0;
 15366  0062F6  0E00               	movlw	0
 15367  0062F8  0101               	movlb	1	; () banked
 15368  0062FA  6FC1               	movwf	_menuSection& (0+255),b
 15369                           
 15370                           ; BSR set to: 1
 15371                           ;DisplayProtocol.h: 169: }else if(actualScreen == 5) {
 15372  0062FC  0012               	return	
 15373  0062FE                     l11187:
 15374                           
 15375                           ; BSR set to: 1
 15376  0062FE  0E05               	movlw	5
 15377  006300  0101               	movlb	1	; () banked
 15378  006302  19BA               	xorwf	_actualScreen& (0+255),w,b
 15379  006304  A4D8               	btfss	status,2,c
 15380  006306  0012               	return	
 15381                           
 15382                           ; BSR set to: 1
 15383                           ;DisplayProtocol.h: 170: if(menuSection == 2)
 15384  006308  0E02               	movlw	2
 15385  00630A  0101               	movlb	1	; () banked
 15386  00630C  19C1               	xorwf	_menuSection& (0+255),w,b
 15387  00630E  A4D8               	btfss	status,2,c
 15388  006310  0012               	return	
 15389                           
 15390                           ; BSR set to: 1
 15391                           ;DisplayProtocol.h: 171: chanVals += 10;
 15392  006312  0E0A               	movlw	10
 15393  006314  0101               	movlb	1	; () banked
 15394  006316  27B1               	addwf	_chanVals& (0+255),f,b
 15395  006318  0E00               	movlw	0
 15396  00631A  23B2               	addwfc	(_chanVals+1)& (0+255),f,b
 15397                           
 15398                           ; BSR set to: 1
 15399                           
 15400                           ; BSR set to: 1
 15401                           
 15402                           ; BSR set to: 1
 15403  00631C  0012               	return	
 15404  00631E                     __end_of_longPressUP:
 15405                           	opt stack 0
 15406                           tblptru	equ	0xFF8
 15407                           tblptrh	equ	0xFF7
 15408                           tblptrl	equ	0xFF6
 15409                           tablat	equ	0xFF5
 15410                           prodh	equ	0xFF4
 15411                           prodl	equ	0xFF3
 15412                           intcon	equ	0xFF2
 15413                           postinc0	equ	0xFEE
 15414                           wreg	equ	0xFE8
 15415                           postdec1	equ	0xFE5
 15416                           fsr1l	equ	0xFE1
 15417                           indf2	equ	0xFDF
 15418                           postinc2	equ	0xFDE
 15419                           postdec2	equ	0xFDD
 15420                           plusw2	equ	0xFDB
 15421                           fsr2h	equ	0xFDA
 15422                           fsr2l	equ	0xFD9
 15423                           status	equ	0xFD8
 15424                           
 15425 ;; *************** function _longPressRETRO *****************
 15426 ;; Defined at:
 15427 ;;		line 252 in file "source/DisplayProtocol.h"
 15428 ;; Parameters:    Size  Location     Type
 15429 ;;		None
 15430 ;; Auto vars:     Size  Location     Type
 15431 ;;		None
 15432 ;; Return value:  Size  Location     Type
 15433 ;;                  1    wreg      void 
 15434 ;; Registers used:
 15435 ;;		wreg, status,2, status,0
 15436 ;; Tracked objects:
 15437 ;;		On entry : 0/0
 15438 ;;		On exit  : 0/0
 15439 ;;		Unchanged: 0/0
 15440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15441 ;;      Params:         0       0       0       0       0       0       0
 15442 ;;      Locals:         0       0       0       0       0       0       0
 15443 ;;      Temps:          0       0       0       0       0       0       0
 15444 ;;      Totals:         0       0       0       0       0       0       0
 15445 ;;Total ram usage:        0 bytes
 15446 ;; Hardware stack levels used:    1
 15447 ;; Hardware stack levels required when called:   12
 15448 ;; This function calls:
 15449 ;;		Nothing
 15450 ;; This function is called by:
 15451 ;;		_buttonChecking
 15452 ;; This function uses a non-reentrant model
 15453 ;;
 15454                           
 15455                           	psect	text60
 15456  00653C                     __ptext60:
 15457                           	opt stack 0
 15458  00653C                     _longPressRETRO:
 15459                           	opt stack 17
 15460                           
 15461                           ;DisplayProtocol.h: 253: if (!RETROisLP) {
 15462                           
 15463                           ;incstack = 0
 15464  00653C  503B               	movf	_RETROisLP,w,c
 15465  00653E  A4D8               	btfss	status,2,c
 15466  006540  0012               	return	
 15467                           
 15468                           ;DisplayProtocol.h: 254: RETROisLP = 1;
 15469  006542  0E01               	movlw	1
 15470  006544  6E3B               	movwf	_RETROisLP,c
 15471                           
 15472                           ;DisplayProtocol.h: 255: if(actualScreen == 0 || actualScreen == 4) {
 15473  006546  0101               	movlb	1	; () banked
 15474  006548  51BA               	movf	_actualScreen& (0+255),w,b
 15475  00654A  B4D8               	btfsc	status,2,c
 15476  00654C  D005               	goto	l11295
 15477                           
 15478                           ; BSR set to: 1
 15479  00654E  0E04               	movlw	4
 15480  006550  0101               	movlb	1	; () banked
 15481  006552  19BA               	xorwf	_actualScreen& (0+255),w,b
 15482  006554  A4D8               	btfss	status,2,c
 15483  006556  D00C               	goto	l11301
 15484  006558                     l11295:
 15485                           
 15486                           ; BSR set to: 1
 15487                           ;DisplayProtocol.h: 256: if(ProcessStarted) {
 15488  006558  503A               	movf	_ProcessStarted,w,c
 15489  00655A  B4D8               	btfsc	status,2,c
 15490  00655C  0012               	return	
 15491                           
 15492                           ; BSR set to: 1
 15493                           ;DisplayProtocol.h: 257: tempLastScreen = actualScreen;
 15494  00655E  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 15495                           
 15496                           ; BSR set to: 1
 15497                           ;DisplayProtocol.h: 258: actualScreen = 3;
 15498  006562  0E03               	movlw	3
 15499  006564  0101               	movlb	1	; () banked
 15500  006566  6FBA               	movwf	_actualScreen& (0+255),b
 15501                           
 15502                           ;DisplayProtocol.h: 259: selSN = 0;
 15503  006568  0E00               	movlw	0
 15504  00656A  0101               	movlb	1	; () banked
 15505  00656C  6FC3               	movwf	_selSN& (0+255),b
 15506                           
 15507                           ; BSR set to: 1
 15508                           ;DisplayProtocol.h: 260: }
 15509                           ;DisplayProtocol.h: 261: }else if(actualScreen == 5)
 15510  00656E  0012               	return	
 15511  006570                     l11301:
 15512                           
 15513                           ; BSR set to: 1
 15514  006570  0E05               	movlw	5
 15515  006572  0101               	movlb	1	; () banked
 15516  006574  19BA               	xorwf	_actualScreen& (0+255),w,b
 15517  006576  A4D8               	btfss	status,2,c
 15518  006578  D004               	goto	l11305
 15519                           
 15520                           ; BSR set to: 1
 15521                           ;DisplayProtocol.h: 262: actualScreen = 4;
 15522  00657A  0E04               	movlw	4
 15523  00657C  0101               	movlb	1	; () banked
 15524  00657E  6FBA               	movwf	_actualScreen& (0+255),b
 15525  006580  0012               	return	
 15526  006582                     l11305:
 15527                           
 15528                           ; BSR set to: 1
 15529                           ;DisplayProtocol.h: 263: else if(actualScreen == 12)
 15530  006582  0E0C               	movlw	12
 15531  006584  0101               	movlb	1	; () banked
 15532  006586  19BA               	xorwf	_actualScreen& (0+255),w,b
 15533  006588  A4D8               	btfss	status,2,c
 15534  00658A  0012               	return	
 15535                           
 15536                           ; BSR set to: 1
 15537                           ;DisplayProtocol.h: 264: actualScreen = 4;
 15538  00658C  0E04               	movlw	4
 15539  00658E  0101               	movlb	1	; () banked
 15540  006590  6FBA               	movwf	_actualScreen& (0+255),b
 15541                           
 15542                           ; BSR set to: 1
 15543                           
 15544                           ; BSR set to: 1
 15545                           
 15546                           ; BSR set to: 1
 15547  006592  0012               	return	
 15548  006594                     __end_of_longPressRETRO:
 15549                           	opt stack 0
 15550                           tblptru	equ	0xFF8
 15551                           tblptrh	equ	0xFF7
 15552                           tblptrl	equ	0xFF6
 15553                           tablat	equ	0xFF5
 15554                           prodh	equ	0xFF4
 15555                           prodl	equ	0xFF3
 15556                           intcon	equ	0xFF2
 15557                           postinc0	equ	0xFEE
 15558                           wreg	equ	0xFE8
 15559                           postdec1	equ	0xFE5
 15560                           fsr1l	equ	0xFE1
 15561                           indf2	equ	0xFDF
 15562                           postinc2	equ	0xFDE
 15563                           postdec2	equ	0xFDD
 15564                           plusw2	equ	0xFDB
 15565                           fsr2h	equ	0xFDA
 15566                           fsr2l	equ	0xFD9
 15567                           status	equ	0xFD8
 15568                           
 15569 ;; *************** function _longPressENTER *****************
 15570 ;; Defined at:
 15571 ;;		line 379 in file "source/DisplayProtocol.h"
 15572 ;; Parameters:    Size  Location     Type
 15573 ;;		None
 15574 ;; Auto vars:     Size  Location     Type
 15575 ;;  temp            3   57[BANK1 ] float 
 15576 ;; Return value:  Size  Location     Type
 15577 ;;                  1    wreg      void 
 15578 ;; Registers used:
 15579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15580 ;; Tracked objects:
 15581 ;;		On entry : 0/0
 15582 ;;		On exit  : 0/0
 15583 ;;		Unchanged: 0/0
 15584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15585 ;;      Params:         0       0       0       0       0       0       0
 15586 ;;      Locals:         0       0       6       0       0       0       0
 15587 ;;      Temps:          0       0       0       0       0       0       0
 15588 ;;      Totals:         0       0       6       0       0       0       0
 15589 ;;Total ram usage:        6 bytes
 15590 ;; Hardware stack levels used:    1
 15591 ;; Hardware stack levels required when called:   17
 15592 ;; This function calls:
 15593 ;;		___ftadd
 15594 ;;		___ftdiv
 15595 ;;		_calcVars2ti
 15596 ;;		_confirmEdition
 15597 ;;		_integrator
 15598 ;;		_setPWM2duty
 15599 ;; This function is called by:
 15600 ;;		_buttonChecking
 15601 ;; This function uses a non-reentrant model
 15602 ;;
 15603                           
 15604                           	psect	text61
 15605  0011A2                     __ptext61:
 15606                           	opt stack 0
 15607  0011A2                     _longPressENTER:
 15608                           	opt stack 12
 15609                           
 15610                           ;DisplayProtocol.h: 380: if (!ENTERisLP) {
 15611                           
 15612                           ;incstack = 0
 15613  0011A2  0101               	movlb	1	; () banked
 15614  0011A4  51B6               	movf	_ENTERisLP& (0+255),w,b
 15615  0011A6  A4D8               	btfss	status,2,c
 15616  0011A8  0012               	return	
 15617                           
 15618                           ; BSR set to: 1
 15619                           ;DisplayProtocol.h: 381: ENTERisLP = 1;
 15620  0011AA  0E01               	movlw	1
 15621  0011AC  0101               	movlb	1	; () banked
 15622  0011AE  6FB6               	movwf	_ENTERisLP& (0+255),b
 15623                           
 15624                           ;DisplayProtocol.h: 382: if(actualScreen == 0 || actualScreen == 4) {
 15625  0011B0  0101               	movlb	1	; () banked
 15626  0011B2  51BA               	movf	_actualScreen& (0+255),w,b
 15627  0011B4  B4D8               	btfsc	status,2,c
 15628  0011B6  D005               	goto	l11459
 15629                           
 15630                           ; BSR set to: 1
 15631  0011B8  0E04               	movlw	4
 15632  0011BA  0101               	movlb	1	; () banked
 15633  0011BC  19BA               	xorwf	_actualScreen& (0+255),w,b
 15634  0011BE  A4D8               	btfss	status,2,c
 15635  0011C0  D024               	goto	l11475
 15636  0011C2                     l11459:
 15637                           
 15638                           ; BSR set to: 1
 15639                           ;DisplayProtocol.h: 383: if (holdUPcont > 5) {
 15640  0011C2  0E05               	movlw	5
 15641  0011C4  0101               	movlb	1	; () banked
 15642  0011C6  65C0               	cpfsgt	_holdUPcont& (0+255),b
 15643  0011C8  D014               	goto	l11469
 15644                           
 15645                           ; BSR set to: 1
 15646                           ;DisplayProtocol.h: 384: if (actualScreen == 0) {
 15647  0011CA  0101               	movlb	1	; () banked
 15648  0011CC  51BA               	movf	_actualScreen& (0+255),w,b
 15649  0011CE  A4D8               	btfss	status,2,c
 15650  0011D0  D007               	goto	l11465
 15651                           
 15652                           ; BSR set to: 1
 15653                           ;DisplayProtocol.h: 385: actualScreen = 1;
 15654  0011D2  0E01               	movlw	1
 15655  0011D4  0101               	movlb	1	; () banked
 15656  0011D6  6FBA               	movwf	_actualScreen& (0+255),b
 15657                           
 15658                           ;DisplayProtocol.h: 386: fd = 0;
 15659  0011D8  0E00               	movlw	0
 15660  0011DA  0101               	movlb	1	; () banked
 15661  0011DC  6FBC               	movwf	_fd& (0+255),b
 15662                           
 15663                           ;DisplayProtocol.h: 387: } else if (actualScreen == 4)
 15664  0011DE  0012               	return	
 15665  0011E0                     l11465:
 15666                           
 15667                           ; BSR set to: 1
 15668  0011E0  0E04               	movlw	4
 15669  0011E2  0101               	movlb	1	; () banked
 15670  0011E4  19BA               	xorwf	_actualScreen& (0+255),w,b
 15671  0011E6  A4D8               	btfss	status,2,c
 15672  0011E8  0012               	return	
 15673                           
 15674                           ; BSR set to: 1
 15675                           ;DisplayProtocol.h: 388: actualScreen = 9;
 15676  0011EA  0E09               	movlw	9
 15677  0011EC  0101               	movlb	1	; () banked
 15678  0011EE  6FBA               	movwf	_actualScreen& (0+255),b
 15679                           
 15680                           ; BSR set to: 1
 15681                           ;DisplayProtocol.h: 389: } else if(!ProcessStarted) {
 15682                           
 15683                           ; BSR set to: 1
 15684  0011F0  0012               	return	
 15685  0011F2                     l11469:
 15686                           
 15687                           ; BSR set to: 1
 15688  0011F2  503A               	movf	_ProcessStarted,w,c
 15689  0011F4  A4D8               	btfss	status,2,c
 15690  0011F6  0012               	return	
 15691                           
 15692                           ; BSR set to: 1
 15693                           ;DisplayProtocol.h: 390: tempLastScreen = actualScreen;
 15694  0011F8  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 15695                           
 15696                           ; BSR set to: 1
 15697                           ;DisplayProtocol.h: 391: actualScreen = 2;
 15698  0011FC  0E02               	movlw	2
 15699  0011FE  0101               	movlb	1	; () banked
 15700  001200  6FBA               	movwf	_actualScreen& (0+255),b
 15701                           
 15702                           ;DisplayProtocol.h: 392: selSN = 1;
 15703  001202  0E01               	movlw	1
 15704  001204  0101               	movlb	1	; () banked
 15705  001206  6FC3               	movwf	_selSN& (0+255),b
 15706                           
 15707                           ; BSR set to: 1
 15708                           ;DisplayProtocol.h: 393: }
 15709                           ;DisplayProtocol.h: 394: }else if(actualScreen == 5) {
 15710                           
 15711                           ; BSR set to: 1
 15712  001208  0012               	return	
 15713  00120A                     l11475:
 15714                           
 15715                           ; BSR set to: 1
 15716  00120A  0E05               	movlw	5
 15717  00120C  0101               	movlb	1	; () banked
 15718  00120E  19BA               	xorwf	_actualScreen& (0+255),w,b
 15719  001210  A4D8               	btfss	status,2,c
 15720  001212  D00F               	goto	l11483
 15721                           
 15722                           ; BSR set to: 1
 15723                           ;DisplayProtocol.h: 395: if(menuSection != 2)
 15724  001214  0E02               	movlw	2
 15725  001216  0101               	movlb	1	; () banked
 15726  001218  19C1               	xorwf	_menuSection& (0+255),w,b
 15727  00121A  A4D8               	btfss	status,2,c
 15728                           
 15729                           ; BSR set to: 1
 15730                           ;DisplayProtocol.h: 396: integrator();
 15731  00121C  ECF4  F01D         	call	_integrator	;wreg free
 15732                           
 15733                           ;DisplayProtocol.h: 397: confirmEdition(!ProcessStarted);
 15734  001220  503A               	movf	_ProcessStarted,w,c
 15735  001222  A4D8               	btfss	status,2,c
 15736  001224  D002               	goto	u16760
 15737  001226  0E01               	movlw	1
 15738  001228  D001               	goto	u16770
 15739  00122A                     u16760:
 15740  00122A  0E00               	movlw	0
 15741  00122C                     u16770:
 15742  00122C  ECE2  F023         	call	_confirmEdition
 15743                           
 15744                           ;DisplayProtocol.h: 398: }else if(actualScreen == 12) {
 15745  001230  0012               	return	
 15746  001232                     l11483:
 15747  001232  0E0C               	movlw	12
 15748  001234  0101               	movlb	1	; () banked
 15749  001236  19BA               	xorwf	_actualScreen& (0+255),w,b
 15750  001238  A4D8               	btfss	status,2,c
 15751  00123A  0012               	return	
 15752                           
 15753                           ; BSR set to: 1
 15754                           ;DisplayProtocol.h: 399: integrator();
 15755  00123C  ECF4  F01D         	call	_integrator	;wreg free
 15756                           
 15757                           ;DisplayProtocol.h: 400: if(calibLevel == 0) {
 15758  001240  0101               	movlb	1	; () banked
 15759  001242  51BB               	movf	_calibLevel& (0+255),w,b
 15760  001244  A4D8               	btfss	status,2,c
 15761  001246  D05A               	goto	l11513
 15762                           
 15763                           ; BSR set to: 1
 15764                           ;DisplayProtocol.h: 401: tempVelocidadMasa1 = (float)chanValf / tiXcorte;
 15765  001248  C1AE  F112         	movff	_chanValf,___ftdiv@f1
 15766  00124C  C1AF  F113         	movff	_chanValf+1,___ftdiv@f1+1
 15767  001250  C1B0  F114         	movff	_chanValf+2,___ftdiv@f1+2
 15768  001254  C0B2  F115         	movff	_tiXcorte,___ftdiv@f2
 15769  001258  C0B3  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 15770  00125C  C0B4  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 15771  001260  EC64  F01B         	call	___ftdiv	;wreg free
 15772  001264  C112  F19A         	movff	?___ftdiv,_tempVelocidadMasa1
 15773  001268  C113  F19B         	movff	?___ftdiv+1,_tempVelocidadMasa1+1
 15774  00126C  C114  F19C         	movff	?___ftdiv+2,_tempVelocidadMasa1+2
 15775                           
 15776                           ;DisplayProtocol.h: 402: tiXcorte = (float)0.5 / tempVelocidadMasa1;
 15777  001270  0E00               	movlw	0
 15778  001272  0101               	movlb	1	; () banked
 15779  001274  6F12               	movwf	___ftdiv@f1& (0+255),b
 15780  001276  0E00               	movlw	0
 15781  001278  0101               	movlb	1	; () banked
 15782  00127A  6F13               	movwf	(___ftdiv@f1+1)& (0+255),b
 15783  00127C  0E3F               	movlw	63
 15784  00127E  0101               	movlb	1	; () banked
 15785  001280  6F14               	movwf	(___ftdiv@f1+2)& (0+255),b
 15786  001282  C19A  F115         	movff	_tempVelocidadMasa1,___ftdiv@f2
 15787  001286  C19B  F116         	movff	_tempVelocidadMasa1+1,___ftdiv@f2+1
 15788  00128A  C19C  F117         	movff	_tempVelocidadMasa1+2,___ftdiv@f2+2
 15789  00128E  EC64  F01B         	call	___ftdiv	;wreg free
 15790  001292  C112  F0B2         	movff	?___ftdiv,_tiXcorte
 15791  001296  C113  F0B3         	movff	?___ftdiv+1,_tiXcorte+1
 15792  00129A  C114  F0B4         	movff	?___ftdiv+2,_tiXcorte+2
 15793                           
 15794                           ;DisplayProtocol.h: 403: calibLevel = 1;
 15795  00129E  0E01               	movlw	1
 15796  0012A0  0101               	movlb	1	; () banked
 15797  0012A2  6FBB               	movwf	_calibLevel& (0+255),b
 15798                           
 15799                           ; BSR set to: 1
 15800                           ;DisplayProtocol.h: 404: numCortes = 1;
 15801  0012A4  0E00               	movlw	0
 15802  0012A6  0100               	movlb	0	; () banked
 15803  0012A8  6FB9               	movwf	(_numCortes+1)& (0+255),b
 15804  0012AA  0E01               	movlw	1
 15805  0012AC  6FB8               	movwf	_numCortes& (0+255),b
 15806                           
 15807                           ; BSR set to: 0
 15808                           ;DisplayProtocol.h: 405: processState = 0;
 15809  0012AE  0E00               	movlw	0
 15810  0012B0  6E36               	movwf	_processState+1,c
 15811  0012B2  0E00               	movlw	0
 15812  0012B4  6E35               	movwf	_processState,c
 15813                           
 15814                           ; BSR set to: 0
 15815                           ;DisplayProtocol.h: 406: processTimer = 0;
 15816  0012B6  0E00               	movlw	0
 15817  0012B8  6E2B               	movwf	_processTimer,c
 15818  0012BA  0E00               	movlw	0
 15819  0012BC  6E2C               	movwf	_processTimer+1,c
 15820  0012BE  0E00               	movlw	0
 15821  0012C0  6E2D               	movwf	_processTimer+2,c
 15822  0012C2  0E00               	movlw	0
 15823  0012C4  6E2E               	movwf	_processTimer+3,c
 15824                           
 15825                           ; BSR set to: 0
 15826                           ;DisplayProtocol.h: 407: bladeIsUP = 2;
 15827  0012C6  0E02               	movlw	2
 15828  0012C8  0100               	movlb	0	; () banked
 15829  0012CA  6FC9               	movwf	_bladeIsUP& (0+255),b
 15830                           
 15831                           ; BSR set to: 0
 15832                           ;DisplayProtocol.h: 408: ProcessStarted = 1;
 15833  0012CC  0E01               	movlw	1
 15834  0012CE  6E3A               	movwf	_ProcessStarted,c
 15835                           
 15836                           ; BSR set to: 0
 15837                           ;DisplayProtocol.h: 409: if(ProcessStarted && bladeIsUP != 1) {
 15838  0012D0  503A               	movf	_ProcessStarted,w,c
 15839  0012D2  B4D8               	btfsc	status,2,c
 15840  0012D4  D00F               	goto	l11511
 15841                           
 15842                           ; BSR set to: 0
 15843  0012D6  0100               	movlb	0	; () banked
 15844  0012D8  05C9               	decf	_bladeIsUP& (0+255),w,b
 15845  0012DA  B4D8               	btfsc	status,2,c
 15846  0012DC  D00B               	goto	l11511
 15847                           
 15848                           ; BSR set to: 0
 15849                           ;DisplayProtocol.h: 410: processState = 0;
 15850  0012DE  0E00               	movlw	0
 15851  0012E0  6E36               	movwf	_processState+1,c
 15852  0012E2  0E00               	movlw	0
 15853  0012E4  6E35               	movwf	_processState,c
 15854                           
 15855                           ; BSR set to: 0
 15856                           ;DisplayProtocol.h: 411: setPWM2duty(-400);
 15857  0012E6  0EFE               	movlw	254
 15858  0012E8  0101               	movlb	1	; () banked
 15859  0012EA  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 15860  0012EC  0E70               	movlw	112
 15861  0012EE  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 15862  0012F0  EC6F  F02D         	call	_setPWM2duty	;wreg free
 15863  0012F4                     l11511:
 15864                           
 15865                           ;DisplayProtocol.h: 412: }
 15866                           ;DisplayProtocol.h: 413: actualScreen = 6;
 15867  0012F4  0E06               	movlw	6
 15868  0012F6  0101               	movlb	1	; () banked
 15869  0012F8  6FBA               	movwf	_actualScreen& (0+255),b
 15870                           
 15871                           ;DisplayProtocol.h: 414: }else if(calibLevel == 1) {
 15872  0012FA  0012               	return	
 15873  0012FC                     l11513:
 15874                           
 15875                           ; BSR set to: 1
 15876  0012FC  0101               	movlb	1	; () banked
 15877  0012FE  05BB               	decf	_calibLevel& (0+255),w,b
 15878  001300  A4D8               	btfss	status,2,c
 15879  001302  D05A               	goto	l11539
 15880                           
 15881                           ; BSR set to: 1
 15882                           ;DisplayProtocol.h: 415: tempVelocidadMasa2 = (float)chanValf / tiXcorte;
 15883  001304  C1AE  F112         	movff	_chanValf,___ftdiv@f1
 15884  001308  C1AF  F113         	movff	_chanValf+1,___ftdiv@f1+1
 15885  00130C  C1B0  F114         	movff	_chanValf+2,___ftdiv@f1+2
 15886  001310  C0B2  F115         	movff	_tiXcorte,___ftdiv@f2
 15887  001314  C0B3  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 15888  001318  C0B4  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 15889  00131C  EC64  F01B         	call	___ftdiv	;wreg free
 15890  001320  C112  F19D         	movff	?___ftdiv,_tempVelocidadMasa2
 15891  001324  C113  F19E         	movff	?___ftdiv+1,_tempVelocidadMasa2+1
 15892  001328  C114  F19F         	movff	?___ftdiv+2,_tempVelocidadMasa2+2
 15893                           
 15894                           ;DisplayProtocol.h: 416: tiXcorte = (float)0.25 / tempVelocidadMasa2;
 15895  00132C  0E00               	movlw	0
 15896  00132E  0101               	movlb	1	; () banked
 15897  001330  6F12               	movwf	___ftdiv@f1& (0+255),b
 15898  001332  0E80               	movlw	128
 15899  001334  0101               	movlb	1	; () banked
 15900  001336  6F13               	movwf	(___ftdiv@f1+1)& (0+255),b
 15901  001338  0E3E               	movlw	62
 15902  00133A  0101               	movlb	1	; () banked
 15903  00133C  6F14               	movwf	(___ftdiv@f1+2)& (0+255),b
 15904  00133E  C19D  F115         	movff	_tempVelocidadMasa2,___ftdiv@f2
 15905  001342  C19E  F116         	movff	_tempVelocidadMasa2+1,___ftdiv@f2+1
 15906  001346  C19F  F117         	movff	_tempVelocidadMasa2+2,___ftdiv@f2+2
 15907  00134A  EC64  F01B         	call	___ftdiv	;wreg free
 15908  00134E  C112  F0B2         	movff	?___ftdiv,_tiXcorte
 15909  001352  C113  F0B3         	movff	?___ftdiv+1,_tiXcorte+1
 15910  001356  C114  F0B4         	movff	?___ftdiv+2,_tiXcorte+2
 15911                           
 15912                           ;DisplayProtocol.h: 417: calibLevel = 2;
 15913  00135A  0E02               	movlw	2
 15914  00135C  0101               	movlb	1	; () banked
 15915  00135E  6FBB               	movwf	_calibLevel& (0+255),b
 15916                           
 15917                           ; BSR set to: 1
 15918                           ;DisplayProtocol.h: 418: numCortes = 1;
 15919  001360  0E00               	movlw	0
 15920  001362  0100               	movlb	0	; () banked
 15921  001364  6FB9               	movwf	(_numCortes+1)& (0+255),b
 15922  001366  0E01               	movlw	1
 15923  001368  6FB8               	movwf	_numCortes& (0+255),b
 15924                           
 15925                           ; BSR set to: 0
 15926                           ;DisplayProtocol.h: 419: processState = 0;
 15927  00136A  0E00               	movlw	0
 15928  00136C  6E36               	movwf	_processState+1,c
 15929  00136E  0E00               	movlw	0
 15930  001370  6E35               	movwf	_processState,c
 15931                           
 15932                           ; BSR set to: 0
 15933                           ;DisplayProtocol.h: 420: processTimer = 0;
 15934  001372  0E00               	movlw	0
 15935  001374  6E2B               	movwf	_processTimer,c
 15936  001376  0E00               	movlw	0
 15937  001378  6E2C               	movwf	_processTimer+1,c
 15938  00137A  0E00               	movlw	0
 15939  00137C  6E2D               	movwf	_processTimer+2,c
 15940  00137E  0E00               	movlw	0
 15941  001380  6E2E               	movwf	_processTimer+3,c
 15942                           
 15943                           ; BSR set to: 0
 15944                           ;DisplayProtocol.h: 421: bladeIsUP = 2;
 15945  001382  0E02               	movlw	2
 15946  001384  0100               	movlb	0	; () banked
 15947  001386  6FC9               	movwf	_bladeIsUP& (0+255),b
 15948                           
 15949                           ; BSR set to: 0
 15950                           ;DisplayProtocol.h: 422: ProcessStarted = 1;
 15951  001388  0E01               	movlw	1
 15952  00138A  6E3A               	movwf	_ProcessStarted,c
 15953                           
 15954                           ; BSR set to: 0
 15955                           ;DisplayProtocol.h: 423: if(ProcessStarted && bladeIsUP != 1) {
 15956  00138C  503A               	movf	_ProcessStarted,w,c
 15957  00138E  B4D8               	btfsc	status,2,c
 15958  001390  D00F               	goto	l11537
 15959                           
 15960                           ; BSR set to: 0
 15961  001392  0100               	movlb	0	; () banked
 15962  001394  05C9               	decf	_bladeIsUP& (0+255),w,b
 15963  001396  B4D8               	btfsc	status,2,c
 15964  001398  D00B               	goto	l11537
 15965                           
 15966                           ; BSR set to: 0
 15967                           ;DisplayProtocol.h: 424: processState = 0;
 15968  00139A  0E00               	movlw	0
 15969  00139C  6E36               	movwf	_processState+1,c
 15970  00139E  0E00               	movlw	0
 15971  0013A0  6E35               	movwf	_processState,c
 15972                           
 15973                           ; BSR set to: 0
 15974                           ;DisplayProtocol.h: 425: setPWM2duty(-400);
 15975  0013A2  0EFE               	movlw	254
 15976  0013A4  0101               	movlb	1	; () banked
 15977  0013A6  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 15978  0013A8  0E70               	movlw	112
 15979  0013AA  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 15980  0013AC  EC6F  F02D         	call	_setPWM2duty	;wreg free
 15981  0013B0                     l11537:
 15982                           
 15983                           ;DisplayProtocol.h: 426: }
 15984                           ;DisplayProtocol.h: 427: actualScreen = 6;
 15985  0013B0  0E06               	movlw	6
 15986  0013B2  0101               	movlb	1	; () banked
 15987  0013B4  6FBA               	movwf	_actualScreen& (0+255),b
 15988                           
 15989                           ;DisplayProtocol.h: 428: }else if(calibLevel == 2) {
 15990  0013B6  0012               	return	
 15991  0013B8                     l11539:
 15992                           
 15993                           ; BSR set to: 1
 15994  0013B8  0E02               	movlw	2
 15995  0013BA  0101               	movlb	1	; () banked
 15996  0013BC  19BB               	xorwf	_calibLevel& (0+255),w,b
 15997  0013BE  A4D8               	btfss	status,2,c
 15998  0013C0  0012               	return	
 15999                           
 16000                           ; BSR set to: 1
 16001                           ;DisplayProtocol.h: 429: tempVelocidadMasa3 = (float)chanValf / tiXcorte;
 16002  0013C2  C1AE  F112         	movff	_chanValf,___ftdiv@f1
 16003  0013C6  C1AF  F113         	movff	_chanValf+1,___ftdiv@f1+1
 16004  0013CA  C1B0  F114         	movff	_chanValf+2,___ftdiv@f1+2
 16005  0013CE  C0B2  F115         	movff	_tiXcorte,___ftdiv@f2
 16006  0013D2  C0B3  F116         	movff	_tiXcorte+1,___ftdiv@f2+1
 16007  0013D6  C0B4  F117         	movff	_tiXcorte+2,___ftdiv@f2+2
 16008  0013DA  EC64  F01B         	call	___ftdiv	;wreg free
 16009  0013DE  C112  F18F         	movff	?___ftdiv,_tempVelocidadMasa3
 16010  0013E2  C113  F190         	movff	?___ftdiv+1,_tempVelocidadMasa3+1
 16011  0013E6  C114  F191         	movff	?___ftdiv+2,_tempVelocidadMasa3+2
 16012                           
 16013                           ;DisplayProtocol.h: 430: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 16014  0013EA  C19D  F130         	movff	_tempVelocidadMasa2,___ftadd@f2
 16015  0013EE  C19E  F131         	movff	_tempVelocidadMasa2+1,___ftadd@f2+1
 16016  0013F2  C19F  F132         	movff	_tempVelocidadMasa2+2,___ftadd@f2+2
 16017  0013F6  C19A  F12D         	movff	_tempVelocidadMasa1,___ftadd@f1
 16018  0013FA  C19B  F12E         	movff	_tempVelocidadMasa1+1,___ftadd@f1+1
 16019  0013FE  C19C  F12F         	movff	_tempVelocidadMasa1+2,___ftadd@f1+2
 16020  001402  EC8C  F012         	call	___ftadd	;wreg free
 16021  001406  C12D  F13C         	movff	?___ftadd,_longPressENTER$2991
 16022  00140A  C12E  F13D         	movff	?___ftadd+1,_longPressENTER$2991+1
 16023  00140E  C12F  F13E         	movff	?___ftadd+2,_longPressENTER$2991+2
 16024                           
 16025                           ;DisplayProtocol.h: 430: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 16026  001412  C13C  F12D         	movff	_longPressENTER$2991,___ftadd@f1
 16027  001416  C13D  F12E         	movff	_longPressENTER$2991+1,___ftadd@f1+1
 16028  00141A  C13E  F12F         	movff	_longPressENTER$2991+2,___ftadd@f1+2
 16029  00141E  C18F  F130         	movff	_tempVelocidadMasa3,___ftadd@f2
 16030  001422  C190  F131         	movff	_tempVelocidadMasa3+1,___ftadd@f2+1
 16031  001426  C191  F132         	movff	_tempVelocidadMasa3+2,___ftadd@f2+2
 16032  00142A  EC8C  F012         	call	___ftadd	;wreg free
 16033  00142E  C12D  F139         	movff	?___ftadd,longPressENTER@temp
 16034  001432  C12E  F13A         	movff	?___ftadd+1,longPressENTER@temp+1
 16035  001436  C12F  F13B         	movff	?___ftadd+2,longPressENTER@temp+2
 16036                           
 16037                           ;DisplayProtocol.h: 431: chanValf = (float)temp / 3.0f;
 16038  00143A  C139  F112         	movff	longPressENTER@temp,___ftdiv@f1
 16039  00143E  C13A  F113         	movff	longPressENTER@temp+1,___ftdiv@f1+1
 16040  001442  C13B  F114         	movff	longPressENTER@temp+2,___ftdiv@f1+2
 16041  001446  0E00               	movlw	0
 16042  001448  0101               	movlb	1	; () banked
 16043  00144A  6F15               	movwf	___ftdiv@f2& (0+255),b
 16044  00144C  0E40               	movlw	64
 16045  00144E  0101               	movlb	1	; () banked
 16046  001450  6F16               	movwf	(___ftdiv@f2+1)& (0+255),b
 16047  001452  0E40               	movlw	64
 16048  001454  0101               	movlb	1	; () banked
 16049  001456  6F17               	movwf	(___ftdiv@f2+2)& (0+255),b
 16050  001458  EC64  F01B         	call	___ftdiv	;wreg free
 16051  00145C  C112  F1AE         	movff	?___ftdiv,_chanValf
 16052  001460  C113  F1AF         	movff	?___ftdiv+1,_chanValf+1
 16053  001464  C114  F1B0         	movff	?___ftdiv+2,_chanValf+2
 16054                           
 16055                           ;DisplayProtocol.h: 432: numCortes = tempNumCortes;
 16056  001468  C192  F0B8         	movff	_tempNumCortes,_numCortes
 16057  00146C  C193  F0B9         	movff	_tempNumCortes+1,_numCortes+1
 16058                           
 16059                           ;DisplayProtocol.h: 433: calcVars2ti();
 16060  001470  ECCA  F032         	call	_calcVars2ti	;wreg free
 16061                           
 16062                           ;DisplayProtocol.h: 434: confirmEdition(!ProcessStarted);
 16063  001474  503A               	movf	_ProcessStarted,w,c
 16064  001476  A4D8               	btfss	status,2,c
 16065  001478  D002               	goto	u16860
 16066  00147A  0E01               	movlw	1
 16067  00147C  D001               	goto	u16870
 16068  00147E                     u16860:
 16069  00147E  0E00               	movlw	0
 16070  001480                     u16870:
 16071  001480  ECE2  F023         	call	_confirmEdition
 16072  001484  0012               	return	
 16073  001486                     __end_of_longPressENTER:
 16074                           	opt stack 0
 16075                           tblptru	equ	0xFF8
 16076                           tblptrh	equ	0xFF7
 16077                           tblptrl	equ	0xFF6
 16078                           tablat	equ	0xFF5
 16079                           prodh	equ	0xFF4
 16080                           prodl	equ	0xFF3
 16081                           intcon	equ	0xFF2
 16082                           postinc0	equ	0xFEE
 16083                           wreg	equ	0xFE8
 16084                           postdec1	equ	0xFE5
 16085                           fsr1l	equ	0xFE1
 16086                           indf2	equ	0xFDF
 16087                           postinc2	equ	0xFDE
 16088                           postdec2	equ	0xFDD
 16089                           plusw2	equ	0xFDB
 16090                           fsr2h	equ	0xFDA
 16091                           fsr2l	equ	0xFD9
 16092                           status	equ	0xFD8
 16093                           
 16094 ;; *************** function _integrator *****************
 16095 ;; Defined at:
 16096 ;;		line 61 in file "source/DisplayProtocol.h"
 16097 ;; Parameters:    Size  Location     Type
 16098 ;;		None
 16099 ;; Auto vars:     Size  Location     Type
 16100 ;;  temp            4   39[BANK1 ] long 
 16101 ;;  acum            4   35[BANK1 ] long 
 16102 ;;  i               2   43[BANK1 ] int 
 16103 ;; Return value:  Size  Location     Type
 16104 ;;                  1    wreg      void 
 16105 ;; Registers used:
 16106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16107 ;; Tracked objects:
 16108 ;;		On entry : 0/0
 16109 ;;		On exit  : 0/0
 16110 ;;		Unchanged: 0/0
 16111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16112 ;;      Params:         0       0       0       0       0       0       0
 16113 ;;      Locals:         0       0      10       0       0       0       0
 16114 ;;      Temps:          0       0       2       0       0       0       0
 16115 ;;      Totals:         0       0      12       0       0       0       0
 16116 ;;Total ram usage:       12 bytes
 16117 ;; Hardware stack levels used:    1
 16118 ;; Hardware stack levels required when called:   14
 16119 ;; This function calls:
 16120 ;;		___altoft
 16121 ;;		___ftdiv
 16122 ;;		___lmul
 16123 ;; This function is called by:
 16124 ;;		_longPressENTER
 16125 ;; This function uses a non-reentrant model
 16126 ;;
 16127                           
 16128                           	psect	text62
 16129  003BE8                     __ptext62:
 16130                           	opt stack 0
 16131  003BE8                     _integrator:
 16132                           	opt stack 14
 16133                           
 16134                           ;DisplayProtocol.h: 62: long acum = 0;
 16135                           
 16136                           ;incstack = 0
 16137  003BE8  0E00               	movlw	0
 16138  003BEA  0101               	movlb	1	; () banked
 16139  003BEC  6F23               	movwf	integrator@acum& (0+255),b
 16140  003BEE  0E00               	movlw	0
 16141  003BF0  6F24               	movwf	(integrator@acum+1)& (0+255),b
 16142  003BF2  0E00               	movlw	0
 16143  003BF4  6F25               	movwf	(integrator@acum+2)& (0+255),b
 16144  003BF6  0E00               	movlw	0
 16145  003BF8  6F26               	movwf	(integrator@acum+3)& (0+255),b
 16146                           
 16147                           ;DisplayProtocol.h: 63: long temp = 0;
 16148  003BFA  0E00               	movlw	0
 16149  003BFC  0101               	movlb	1	; () banked
 16150  003BFE  6F27               	movwf	integrator@temp& (0+255),b
 16151  003C00  0E00               	movlw	0
 16152  003C02  6F28               	movwf	(integrator@temp+1)& (0+255),b
 16153  003C04  0E00               	movlw	0
 16154  003C06  6F29               	movwf	(integrator@temp+2)& (0+255),b
 16155  003C08  0E00               	movlw	0
 16156  003C0A  6F2A               	movwf	(integrator@temp+3)& (0+255),b
 16157                           
 16158                           ;DisplayProtocol.h: 64: int i;
 16159                           ;DisplayProtocol.h: 65: for(i = 0; i < 6; i++) {
 16160  003C0C  0E00               	movlw	0
 16161  003C0E  0101               	movlb	1	; () banked
 16162  003C10  6F2C               	movwf	(integrator@i+1)& (0+255),b
 16163  003C12  0E00               	movlw	0
 16164  003C14  6F2B               	movwf	integrator@i& (0+255),b
 16165  003C16                     l10601:
 16166                           
 16167                           ; BSR set to: 1
 16168  003C16  0101               	movlb	1	; () banked
 16169  003C18  BF2C               	btfsc	(integrator@i+1)& (0+255),7,b
 16170  003C1A  D008               	goto	l10605
 16171  003C1C  0101               	movlb	1	; () banked
 16172  003C1E  512C               	movf	(integrator@i+1)& (0+255),w,b
 16173  003C20  E152               	bnz	l10613
 16174  003C22  0E06               	movlw	6
 16175  003C24  0101               	movlb	1	; () banked
 16176  003C26  5D2B               	subwf	integrator@i& (0+255),w,b
 16177  003C28  B0D8               	btfsc	status,0,c
 16178  003C2A  D04D               	goto	l10613
 16179  003C2C                     l10605:
 16180                           
 16181                           ; BSR set to: 1
 16182                           ;DisplayProtocol.h: 66: temp = (long)chanValdig[i]*exp10[i];
 16183  003C2C  0EA0               	movlw	low _chanValdig
 16184  003C2E  0101               	movlb	1	; () banked
 16185  003C30  252B               	addwf	integrator@i& (0+255),w,b
 16186  003C32  6ED9               	movwf	fsr2l,c
 16187  003C34  0E01               	movlw	high _chanValdig
 16188  003C36  0101               	movlb	1	; () banked
 16189  003C38  212C               	addwfc	(integrator@i+1)& (0+255),w,b
 16190  003C3A  6EDA               	movwf	fsr2h,c
 16191  003C3C  50DF               	movf	indf2,w,c
 16192  003C3E  0101               	movlb	1	; () banked
 16193  003C40  6F00               	movwf	___lmul@multiplier& (0+255),b
 16194  003C42  0E00               	movlw	0
 16195  003C44  BF00               	btfsc	___lmul@multiplier& (0+255),7,b
 16196  003C46  0EFF               	movlw	-1
 16197  003C48  6F01               	movwf	(___lmul@multiplier+1)& (0+255),b
 16198  003C4A  6F02               	movwf	(___lmul@multiplier+2)& (0+255),b
 16199  003C4C  6F03               	movwf	(___lmul@multiplier+3)& (0+255),b
 16200  003C4E  0E77               	movlw	low _exp10
 16201  003C50  0101               	movlb	1	; () banked
 16202  003C52  6F21               	movwf	??_integrator& (0+255),b
 16203  003C54  0E01               	movlw	high _exp10
 16204  003C56  0101               	movlb	1	; () banked
 16205  003C58  6F22               	movwf	(??_integrator+1)& (0+255),b
 16206  003C5A  90D8               	bcf	status,0,c
 16207  003C5C  0101               	movlb	1	; () banked
 16208  003C5E  352B               	rlcf	integrator@i& (0+255),w,b
 16209  003C60  6ED9               	movwf	fsr2l,c
 16210  003C62  0101               	movlb	1	; () banked
 16211  003C64  352C               	rlcf	(integrator@i+1)& (0+255),w,b
 16212  003C66  6EDA               	movwf	fsr2h,c
 16213  003C68  90D8               	bcf	status,0,c
 16214  003C6A  36D9               	rlcf	fsr2l,f,c
 16215  003C6C  36DA               	rlcf	fsr2h,f,c
 16216  003C6E  0101               	movlb	1	; () banked
 16217  003C70  5121               	movf	??_integrator& (0+255),w,b
 16218  003C72  26D9               	addwf	fsr2l,f,c
 16219  003C74  0101               	movlb	1	; () banked
 16220  003C76  5122               	movf	(??_integrator+1)& (0+255),w,b
 16221  003C78  22DA               	addwfc	fsr2h,f,c
 16222  003C7A  CFDE F104          	movff	postinc2,___lmul@multiplicand
 16223  003C7E  CFDE F105          	movff	postinc2,___lmul@multiplicand+1
 16224  003C82  CFDE F106          	movff	postinc2,___lmul@multiplicand+2
 16225  003C86  CFDE F107          	movff	postinc2,___lmul@multiplicand+3
 16226  003C8A  ECDF  F030         	call	___lmul	;wreg free
 16227  003C8E  C100  F127         	movff	?___lmul,integrator@temp
 16228  003C92  C101  F128         	movff	?___lmul+1,integrator@temp+1
 16229  003C96  C102  F129         	movff	?___lmul+2,integrator@temp+2
 16230  003C9A  C103  F12A         	movff	?___lmul+3,integrator@temp+3
 16231                           
 16232                           ;DisplayProtocol.h: 67: acum += temp;
 16233  003C9E  0101               	movlb	1	; () banked
 16234  003CA0  5127               	movf	integrator@temp& (0+255),w,b
 16235  003CA2  0101               	movlb	1	; () banked
 16236  003CA4  2723               	addwf	integrator@acum& (0+255),f,b
 16237  003CA6  0101               	movlb	1	; () banked
 16238  003CA8  5128               	movf	(integrator@temp+1)& (0+255),w,b
 16239  003CAA  0101               	movlb	1	; () banked
 16240  003CAC  2324               	addwfc	(integrator@acum+1)& (0+255),f,b
 16241  003CAE  0101               	movlb	1	; () banked
 16242  003CB0  5129               	movf	(integrator@temp+2)& (0+255),w,b
 16243  003CB2  0101               	movlb	1	; () banked
 16244  003CB4  2325               	addwfc	(integrator@acum+2)& (0+255),f,b
 16245  003CB6  0101               	movlb	1	; () banked
 16246  003CB8  512A               	movf	(integrator@temp+3)& (0+255),w,b
 16247  003CBA  0101               	movlb	1	; () banked
 16248  003CBC  2326               	addwfc	(integrator@acum+3)& (0+255),f,b
 16249                           
 16250                           ; BSR set to: 1
 16251  003CBE  0101               	movlb	1	; () banked
 16252  003CC0  4B2B               	infsnz	integrator@i& (0+255),f,b
 16253  003CC2  2B2C               	incf	(integrator@i+1)& (0+255),f,b
 16254  003CC4  D7A8               	goto	l10601
 16255  003CC6                     l10613:
 16256                           
 16257                           ; BSR set to: 1
 16258                           ;DisplayProtocol.h: 68: }
 16259                           ;DisplayProtocol.h: 69: chanValf = (float)acum / 1000;
 16260  003CC6  C123  F108         	movff	integrator@acum,___altoft@c
 16261  003CCA  C124  F109         	movff	integrator@acum+1,___altoft@c+1
 16262  003CCE  C125  F10A         	movff	integrator@acum+2,___altoft@c+2
 16263  003CD2  C126  F10B         	movff	integrator@acum+3,___altoft@c+3
 16264  003CD6  ECE8  F02B         	call	___altoft	;wreg free
 16265  003CDA  C108  F112         	movff	?___altoft,___ftdiv@f1
 16266  003CDE  C109  F113         	movff	?___altoft+1,___ftdiv@f1+1
 16267  003CE2  C10A  F114         	movff	?___altoft+2,___ftdiv@f1+2
 16268  003CE6  0E00               	movlw	0
 16269  003CE8  0101               	movlb	1	; () banked
 16270  003CEA  6F15               	movwf	___ftdiv@f2& (0+255),b
 16271  003CEC  0E7A               	movlw	122
 16272  003CEE  0101               	movlb	1	; () banked
 16273  003CF0  6F16               	movwf	(___ftdiv@f2+1)& (0+255),b
 16274  003CF2  0E44               	movlw	68
 16275  003CF4  0101               	movlb	1	; () banked
 16276  003CF6  6F17               	movwf	(___ftdiv@f2+2)& (0+255),b
 16277  003CF8  EC64  F01B         	call	___ftdiv	;wreg free
 16278  003CFC  C112  F1AE         	movff	?___ftdiv,_chanValf
 16279  003D00  C113  F1AF         	movff	?___ftdiv+1,_chanValf+1
 16280  003D04  C114  F1B0         	movff	?___ftdiv+2,_chanValf+2
 16281  003D08  0012               	return		;funcret
 16282  003D0A                     __end_of_integrator:
 16283                           	opt stack 0
 16284                           tblptru	equ	0xFF8
 16285                           tblptrh	equ	0xFF7
 16286                           tblptrl	equ	0xFF6
 16287                           tablat	equ	0xFF5
 16288                           prodh	equ	0xFF4
 16289                           prodl	equ	0xFF3
 16290                           intcon	equ	0xFF2
 16291                           postinc0	equ	0xFEE
 16292                           wreg	equ	0xFE8
 16293                           postdec1	equ	0xFE5
 16294                           fsr1l	equ	0xFE1
 16295                           indf2	equ	0xFDF
 16296                           postinc2	equ	0xFDE
 16297                           postdec2	equ	0xFDD
 16298                           plusw2	equ	0xFDB
 16299                           fsr2h	equ	0xFDA
 16300                           fsr2l	equ	0xFD9
 16301                           status	equ	0xFD8
 16302                           
 16303 ;; *************** function ___lmul *****************
 16304 ;; Defined at:
 16305 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
 16306 ;; Parameters:    Size  Location     Type
 16307 ;;  multiplier      4    0[BANK1 ] unsigned long 
 16308 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 16309 ;; Auto vars:     Size  Location     Type
 16310 ;;  product         4    8[BANK1 ] unsigned long 
 16311 ;; Return value:  Size  Location     Type
 16312 ;;                  4    0[BANK1 ] unsigned long 
 16313 ;; Registers used:
 16314 ;;		wreg, status,2, status,0
 16315 ;; Tracked objects:
 16316 ;;		On entry : 0/0
 16317 ;;		On exit  : 0/0
 16318 ;;		Unchanged: 0/0
 16319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16320 ;;      Params:         0       0       8       0       0       0       0
 16321 ;;      Locals:         0       0       4       0       0       0       0
 16322 ;;      Temps:          0       0       0       0       0       0       0
 16323 ;;      Totals:         0       0      12       0       0       0       0
 16324 ;;Total ram usage:       12 bytes
 16325 ;; Hardware stack levels used:    1
 16326 ;; Hardware stack levels required when called:   12
 16327 ;; This function calls:
 16328 ;;		Nothing
 16329 ;; This function is called by:
 16330 ;;		_desintegrator
 16331 ;;		_integrator
 16332 ;; This function uses a non-reentrant model
 16333 ;;
 16334                           
 16335                           	psect	text63
 16336  0061BE                     __ptext63:
 16337                           	opt stack 0
 16338  0061BE                     ___lmul:
 16339                           	opt stack 15
 16340                           
 16341                           ;incstack = 0
 16342  0061BE  0E00               	movlw	0
 16343  0061C0  0101               	movlb	1	; () banked
 16344  0061C2  6F08               	movwf	___lmul@product& (0+255),b
 16345  0061C4  0E00               	movlw	0
 16346  0061C6  6F09               	movwf	(___lmul@product+1)& (0+255),b
 16347  0061C8  0E00               	movlw	0
 16348  0061CA  6F0A               	movwf	(___lmul@product+2)& (0+255),b
 16349  0061CC  0E00               	movlw	0
 16350  0061CE  6F0B               	movwf	(___lmul@product+3)& (0+255),b
 16351  0061D0                     l10271:
 16352                           
 16353                           ; BSR set to: 1
 16354  0061D0  0101               	movlb	1	; () banked
 16355  0061D2  A100               	btfss	___lmul@multiplier& (0+255),0,b
 16356  0061D4  D010               	goto	l10275
 16357                           
 16358                           ; BSR set to: 1
 16359  0061D6  0101               	movlb	1	; () banked
 16360  0061D8  5104               	movf	___lmul@multiplicand& (0+255),w,b
 16361  0061DA  0101               	movlb	1	; () banked
 16362  0061DC  2708               	addwf	___lmul@product& (0+255),f,b
 16363  0061DE  0101               	movlb	1	; () banked
 16364  0061E0  5105               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 16365  0061E2  0101               	movlb	1	; () banked
 16366  0061E4  2309               	addwfc	(___lmul@product+1)& (0+255),f,b
 16367  0061E6  0101               	movlb	1	; () banked
 16368  0061E8  5106               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 16369  0061EA  0101               	movlb	1	; () banked
 16370  0061EC  230A               	addwfc	(___lmul@product+2)& (0+255),f,b
 16371  0061EE  0101               	movlb	1	; () banked
 16372  0061F0  5107               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 16373  0061F2  0101               	movlb	1	; () banked
 16374  0061F4  230B               	addwfc	(___lmul@product+3)& (0+255),f,b
 16375  0061F6                     l10275:
 16376                           
 16377                           ; BSR set to: 1
 16378  0061F6  0101               	movlb	1	; () banked
 16379  0061F8  90D8               	bcf	status,0,c
 16380  0061FA  3704               	rlcf	___lmul@multiplicand& (0+255),f,b
 16381  0061FC  3705               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 16382  0061FE  3706               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 16383  006200  3707               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 16384                           
 16385                           ; BSR set to: 1
 16386  006202  0101               	movlb	1	; () banked
 16387  006204  90D8               	bcf	status,0,c
 16388  006206  3303               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 16389  006208  3302               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 16390  00620A  3301               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 16391  00620C  3300               	rrcf	___lmul@multiplier& (0+255),f,b
 16392  00620E  0101               	movlb	1	; () banked
 16393  006210  5100               	movf	___lmul@multiplier& (0+255),w,b
 16394  006212  0101               	movlb	1	; () banked
 16395  006214  1101               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 16396  006216  0101               	movlb	1	; () banked
 16397  006218  1102               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 16398  00621A  0101               	movlb	1	; () banked
 16399  00621C  1103               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 16400  00621E  A4D8               	btfss	status,2,c
 16401  006220  D7D7               	goto	l10271
 16402                           
 16403                           ; BSR set to: 1
 16404  006222  C108  F100         	movff	___lmul@product,?___lmul
 16405  006226  C109  F101         	movff	___lmul@product+1,?___lmul+1
 16406  00622A  C10A  F102         	movff	___lmul@product+2,?___lmul+2
 16407  00622E  C10B  F103         	movff	___lmul@product+3,?___lmul+3
 16408                           
 16409                           ; BSR set to: 1
 16410  006232  0012               	return		;funcret
 16411  006234                     __end_of___lmul:
 16412                           	opt stack 0
 16413                           tblptru	equ	0xFF8
 16414                           tblptrh	equ	0xFF7
 16415                           tblptrl	equ	0xFF6
 16416                           tablat	equ	0xFF5
 16417                           prodh	equ	0xFF4
 16418                           prodl	equ	0xFF3
 16419                           intcon	equ	0xFF2
 16420                           postinc0	equ	0xFEE
 16421                           wreg	equ	0xFE8
 16422                           postdec1	equ	0xFE5
 16423                           fsr1l	equ	0xFE1
 16424                           indf2	equ	0xFDF
 16425                           postinc2	equ	0xFDE
 16426                           postdec2	equ	0xFDD
 16427                           plusw2	equ	0xFDB
 16428                           fsr2h	equ	0xFDA
 16429                           fsr2l	equ	0xFD9
 16430                           status	equ	0xFD8
 16431                           
 16432 ;; *************** function ___altoft *****************
 16433 ;; Defined at:
 16434 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
 16435 ;; Parameters:    Size  Location     Type
 16436 ;;  c               4    8[BANK1 ] long 
 16437 ;; Auto vars:     Size  Location     Type
 16438 ;;  sign            1   17[BANK1 ] unsigned char 
 16439 ;;  exp             1   16[BANK1 ] unsigned char 
 16440 ;; Return value:  Size  Location     Type
 16441 ;;                  3    8[BANK1 ] float 
 16442 ;; Registers used:
 16443 ;;		wreg, status,2, status,0, cstack
 16444 ;; Tracked objects:
 16445 ;;		On entry : 0/0
 16446 ;;		On exit  : 0/0
 16447 ;;		Unchanged: 0/0
 16448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16449 ;;      Params:         0       0       4       0       0       0       0
 16450 ;;      Locals:         0       0       2       0       0       0       0
 16451 ;;      Temps:          0       0       4       0       0       0       0
 16452 ;;      Totals:         0       0      10       0       0       0       0
 16453 ;;Total ram usage:       10 bytes
 16454 ;; Hardware stack levels used:    1
 16455 ;; Hardware stack levels required when called:   13
 16456 ;; This function calls:
 16457 ;;		___ftpack
 16458 ;; This function is called by:
 16459 ;;		_integrator
 16460 ;; This function uses a non-reentrant model
 16461 ;;
 16462                           
 16463                           	psect	text64
 16464  0057D0                     __ptext64:
 16465                           	opt stack 0
 16466  0057D0                     ___altoft:
 16467                           	opt stack 14
 16468                           
 16469                           ; BSR set to: 1
 16470                           ;incstack = 0
 16471  0057D0  0E00               	movlw	0
 16472  0057D2  0101               	movlb	1	; () banked
 16473  0057D4  6F11               	movwf	___altoft@sign& (0+255),b
 16474  0057D6  0E8E               	movlw	142
 16475  0057D8  0101               	movlb	1	; () banked
 16476  0057DA  6F10               	movwf	___altoft@exp& (0+255),b
 16477                           
 16478                           ; BSR set to: 1
 16479  0057DC  0101               	movlb	1	; () banked
 16480  0057DE  AF0B               	btfss	(___altoft@c+3)& (0+255),7,b
 16481  0057E0  D015               	goto	l10333
 16482                           
 16483                           ; BSR set to: 1
 16484  0057E2  0101               	movlb	1	; () banked
 16485  0057E4  1F0B               	comf	(___altoft@c+3)& (0+255),f,b
 16486  0057E6  1F0A               	comf	(___altoft@c+2)& (0+255),f,b
 16487  0057E8  1F09               	comf	(___altoft@c+1)& (0+255),f,b
 16488  0057EA  6D08               	negf	___altoft@c& (0+255),b
 16489  0057EC  0E00               	movlw	0
 16490  0057EE  2309               	addwfc	(___altoft@c+1)& (0+255),f,b
 16491  0057F0  230A               	addwfc	(___altoft@c+2)& (0+255),f,b
 16492  0057F2  230B               	addwfc	(___altoft@c+3)& (0+255),f,b
 16493                           
 16494                           ; BSR set to: 1
 16495  0057F4  0E01               	movlw	1
 16496  0057F6  0101               	movlb	1	; () banked
 16497  0057F8  6F11               	movwf	___altoft@sign& (0+255),b
 16498                           
 16499                           ; BSR set to: 1
 16500  0057FA  D008               	goto	l10333
 16501  0057FC                     l10331:
 16502                           
 16503                           ; BSR set to: 1
 16504  0057FC  0101               	movlb	1	; () banked
 16505  0057FE  90D8               	bcf	status,0,c
 16506  005800  330B               	rrcf	(___altoft@c+3)& (0+255),f,b
 16507  005802  330A               	rrcf	(___altoft@c+2)& (0+255),f,b
 16508  005804  3309               	rrcf	(___altoft@c+1)& (0+255),f,b
 16509  005806  3308               	rrcf	___altoft@c& (0+255),f,b
 16510  005808  0101               	movlb	1	; () banked
 16511  00580A  2B10               	incf	___altoft@exp& (0+255),f,b
 16512  00580C                     l10333:
 16513                           
 16514                           ; BSR set to: 1
 16515  00580C  0E00               	movlw	0
 16516  00580E  0101               	movlb	1	; () banked
 16517  005810  1508               	andwf	___altoft@c& (0+255),w,b
 16518  005812  0101               	movlb	1	; () banked
 16519  005814  6F0C               	movwf	??___altoft& (0+255),b
 16520  005816  0E00               	movlw	0
 16521  005818  0101               	movlb	1	; () banked
 16522  00581A  1509               	andwf	(___altoft@c+1)& (0+255),w,b
 16523  00581C  0101               	movlb	1	; () banked
 16524  00581E  6F0D               	movwf	(??___altoft+1)& (0+255),b
 16525  005820  0E00               	movlw	0
 16526  005822  0101               	movlb	1	; () banked
 16527  005824  150A               	andwf	(___altoft@c+2)& (0+255),w,b
 16528  005826  0101               	movlb	1	; () banked
 16529  005828  6F0E               	movwf	(??___altoft+2)& (0+255),b
 16530  00582A  0EFF               	movlw	255
 16531  00582C  0101               	movlb	1	; () banked
 16532  00582E  150B               	andwf	(___altoft@c+3)& (0+255),w,b
 16533  005830  0101               	movlb	1	; () banked
 16534  005832  6F0F               	movwf	(??___altoft+3)& (0+255),b
 16535  005834  0101               	movlb	1	; () banked
 16536  005836  510C               	movf	??___altoft& (0+255),w,b
 16537  005838  0101               	movlb	1	; () banked
 16538  00583A  110D               	iorwf	(??___altoft+1)& (0+255),w,b
 16539  00583C  0101               	movlb	1	; () banked
 16540  00583E  110E               	iorwf	(??___altoft+2)& (0+255),w,b
 16541  005840  0101               	movlb	1	; () banked
 16542  005842  110F               	iorwf	(??___altoft+3)& (0+255),w,b
 16543  005844  A4D8               	btfss	status,2,c
 16544  005846  D7DA               	goto	l10331
 16545                           
 16546                           ; BSR set to: 1
 16547                           
 16548                           ; BSR set to: 1
 16549  005848  C108  F100         	movff	___altoft@c,___ftpack@arg
 16550  00584C  C109  F101         	movff	___altoft@c+1,___ftpack@arg+1
 16551  005850  C10A  F102         	movff	___altoft@c+2,___ftpack@arg+2
 16552  005854  C110  F103         	movff	___altoft@exp,___ftpack@exp
 16553  005858  C111  F104         	movff	___altoft@sign,___ftpack@sign
 16554  00585C  ECCC  F021         	call	___ftpack	;wreg free
 16555  005860  C100  F108         	movff	?___ftpack,?___altoft
 16556  005864  C101  F109         	movff	?___ftpack+1,?___altoft+1
 16557  005868  C102  F10A         	movff	?___ftpack+2,?___altoft+2
 16558  00586C  0012               	return	
 16559  00586E                     __end_of___altoft:
 16560                           	opt stack 0
 16561                           tblptru	equ	0xFF8
 16562                           tblptrh	equ	0xFF7
 16563                           tblptrl	equ	0xFF6
 16564                           tablat	equ	0xFF5
 16565                           prodh	equ	0xFF4
 16566                           prodl	equ	0xFF3
 16567                           intcon	equ	0xFF2
 16568                           postinc0	equ	0xFEE
 16569                           wreg	equ	0xFE8
 16570                           postdec1	equ	0xFE5
 16571                           fsr1l	equ	0xFE1
 16572                           indf2	equ	0xFDF
 16573                           postinc2	equ	0xFDE
 16574                           postdec2	equ	0xFDD
 16575                           plusw2	equ	0xFDB
 16576                           fsr2h	equ	0xFDA
 16577                           fsr2l	equ	0xFD9
 16578                           status	equ	0xFD8
 16579                           
 16580 ;; *************** function _confirmEdition *****************
 16581 ;; Defined at:
 16582 ;;		line 72 in file "source/DisplayProtocol.h"
 16583 ;; Parameters:    Size  Location     Type
 16584 ;;  yes             1    wreg     unsigned char 
 16585 ;; Auto vars:     Size  Location     Type
 16586 ;;  yes             1   35[BANK1 ] unsigned char 
 16587 ;; Return value:  Size  Location     Type
 16588 ;;                  1    wreg      void 
 16589 ;; Registers used:
 16590 ;;		wreg, status,2, status,0, cstack
 16591 ;; Tracked objects:
 16592 ;;		On entry : 0/0
 16593 ;;		On exit  : 0/0
 16594 ;;		Unchanged: 0/0
 16595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16596 ;;      Params:         0       0       0       0       0       0       0
 16597 ;;      Locals:         0       0       1       0       0       0       0
 16598 ;;      Temps:          0       0       0       0       0       0       0
 16599 ;;      Totals:         0       0       1       0       0       0       0
 16600 ;;Total ram usage:        1 bytes
 16601 ;; Hardware stack levels used:    1
 16602 ;; Hardware stack levels required when called:   16
 16603 ;; This function calls:
 16604 ;;		_saveSysParams
 16605 ;; This function is called by:
 16606 ;;		_pressENTER
 16607 ;;		_longPressENTER
 16608 ;; This function uses a non-reentrant model
 16609 ;;
 16610                           
 16611                           	psect	text65
 16612  0047C4                     __ptext65:
 16613                           	opt stack 0
 16614  0047C4                     _confirmEdition:
 16615                           	opt stack 12
 16616                           
 16617                           ;incstack = 0
 16618                           ;confirmEdition@yes stored from wreg
 16619  0047C4  0101               	movlb	1	; () banked
 16620  0047C6  6F23               	movwf	confirmEdition@yes& (0+255),b
 16621                           
 16622                           ;DisplayProtocol.h: 73: switch (menuSection) {
 16623  0047C8  D066               	goto	l10659
 16624  0047CA                     l10617:
 16625                           
 16626                           ;DisplayProtocol.h: 77: if(yes) {
 16627  0047CA  0101               	movlb	1	; () banked
 16628  0047CC  5123               	movf	confirmEdition@yes& (0+255),w,b
 16629  0047CE  0101               	movlb	1	; () banked
 16630  0047D0  B4D8               	btfsc	status,2,c
 16631  0047D2  D00C               	goto	l549
 16632                           
 16633                           ; BSR set to: 1
 16634                           ;DisplayProtocol.h: 78: kgXcorte = chanValf;
 16635  0047D4  C1AE  F0AC         	movff	_chanValf,_kgXcorte
 16636  0047D8  C1AF  F0AD         	movff	_chanValf+1,_kgXcorte+1
 16637  0047DC  C1B0  F0AE         	movff	_chanValf+2,_kgXcorte+2
 16638                           
 16639                           ; BSR set to: 1
 16640                           ;DisplayProtocol.h: 79: actualScreen = 4;
 16641  0047E0  0E04               	movlw	4
 16642  0047E2  0101               	movlb	1	; () banked
 16643  0047E4  6FBA               	movwf	_actualScreen& (0+255),b
 16644                           
 16645                           ; BSR set to: 1
 16646                           ;DisplayProtocol.h: 80: saveSysParams();
 16647  0047E6  ECE1  F028         	call	_saveSysParams	;wreg free
 16648                           
 16649                           ;DisplayProtocol.h: 81: }else {
 16650  0047EA  0012               	return	
 16651  0047EC                     l549:
 16652                           
 16653                           ; BSR set to: 1
 16654                           ;DisplayProtocol.h: 82: tempLastScreen = actualScreen;
 16655  0047EC  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 16656                           
 16657                           ; BSR set to: 1
 16658                           ;DisplayProtocol.h: 83: selSN = 1;
 16659  0047F0  0E01               	movlw	1
 16660  0047F2  0101               	movlb	1	; () banked
 16661  0047F4  6FC3               	movwf	_selSN& (0+255),b
 16662                           
 16663                           ;DisplayProtocol.h: 84: actualScreen = 10;
 16664  0047F6  0E0A               	movlw	10
 16665  0047F8  0101               	movlb	1	; () banked
 16666  0047FA  6FBA               	movwf	_actualScreen& (0+255),b
 16667                           
 16668                           ; BSR set to: 1
 16669                           ;DisplayProtocol.h: 85: }
 16670                           ;DisplayProtocol.h: 86: break;
 16671  0047FC  0012               	return	
 16672  0047FE                     l10627:
 16673                           
 16674                           ; BSR set to: 1
 16675                           ;DisplayProtocol.h: 88: if(yes) {
 16676  0047FE  0101               	movlb	1	; () banked
 16677  004800  5123               	movf	confirmEdition@yes& (0+255),w,b
 16678  004802  0101               	movlb	1	; () banked
 16679  004804  B4D8               	btfsc	status,2,c
 16680  004806  D00A               	goto	l552
 16681                           
 16682                           ; BSR set to: 1
 16683                           ;DisplayProtocol.h: 89: numCortes = chanVals;
 16684  004808  C1B1  F0B8         	movff	_chanVals,_numCortes
 16685  00480C  C1B2  F0B9         	movff	_chanVals+1,_numCortes+1
 16686                           
 16687                           ; BSR set to: 1
 16688                           ;DisplayProtocol.h: 90: actualScreen = 4;
 16689  004810  0E04               	movlw	4
 16690  004812  0101               	movlb	1	; () banked
 16691  004814  6FBA               	movwf	_actualScreen& (0+255),b
 16692                           
 16693                           ; BSR set to: 1
 16694                           ;DisplayProtocol.h: 91: saveSysParams();
 16695  004816  ECE1  F028         	call	_saveSysParams	;wreg free
 16696                           
 16697                           ;DisplayProtocol.h: 92: }else {
 16698  00481A  0012               	return	
 16699  00481C                     l552:
 16700                           
 16701                           ; BSR set to: 1
 16702                           ;DisplayProtocol.h: 93: tempLastScreen = actualScreen;
 16703  00481C  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 16704                           
 16705                           ; BSR set to: 1
 16706                           ;DisplayProtocol.h: 94: selSN = 1;
 16707  004820  0E01               	movlw	1
 16708  004822  0101               	movlb	1	; () banked
 16709  004824  6FC3               	movwf	_selSN& (0+255),b
 16710                           
 16711                           ;DisplayProtocol.h: 95: actualScreen = 10;
 16712  004826  0E0A               	movlw	10
 16713  004828  0101               	movlb	1	; () banked
 16714  00482A  6FBA               	movwf	_actualScreen& (0+255),b
 16715                           
 16716                           ; BSR set to: 1
 16717                           ;DisplayProtocol.h: 96: }
 16718                           ;DisplayProtocol.h: 97: break;
 16719  00482C  0012               	return	
 16720  00482E                     l10637:
 16721                           
 16722                           ; BSR set to: 1
 16723                           ;DisplayProtocol.h: 99: if(yes) {
 16724  00482E  0101               	movlb	1	; () banked
 16725  004830  5123               	movf	confirmEdition@yes& (0+255),w,b
 16726  004832  0101               	movlb	1	; () banked
 16727  004834  B4D8               	btfsc	status,2,c
 16728  004836  D00C               	goto	l555
 16729                           
 16730                           ; BSR set to: 1
 16731                           ;DisplayProtocol.h: 100: diamTubo = chanValf;
 16732  004838  C1AE  F0A9         	movff	_chanValf,_diamTubo
 16733  00483C  C1AF  F0AA         	movff	_chanValf+1,_diamTubo+1
 16734  004840  C1B0  F0AB         	movff	_chanValf+2,_diamTubo+2
 16735                           
 16736                           ; BSR set to: 1
 16737                           ;DisplayProtocol.h: 101: actualScreen = 4;
 16738  004844  0E04               	movlw	4
 16739  004846  0101               	movlb	1	; () banked
 16740  004848  6FBA               	movwf	_actualScreen& (0+255),b
 16741                           
 16742                           ; BSR set to: 1
 16743                           ;DisplayProtocol.h: 102: saveSysParams();
 16744  00484A  ECE1  F028         	call	_saveSysParams	;wreg free
 16745                           
 16746                           ;DisplayProtocol.h: 103: }else {
 16747  00484E  0012               	return	
 16748  004850                     l555:
 16749                           
 16750                           ; BSR set to: 1
 16751                           ;DisplayProtocol.h: 104: tempLastScreen = actualScreen;
 16752  004850  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 16753                           
 16754                           ; BSR set to: 1
 16755                           ;DisplayProtocol.h: 105: selSN = 1;
 16756  004854  0E01               	movlw	1
 16757  004856  0101               	movlb	1	; () banked
 16758  004858  6FC3               	movwf	_selSN& (0+255),b
 16759                           
 16760                           ;DisplayProtocol.h: 106: actualScreen = 10;
 16761  00485A  0E0A               	movlw	10
 16762  00485C  0101               	movlb	1	; () banked
 16763  00485E  6FBA               	movwf	_actualScreen& (0+255),b
 16764                           
 16765                           ; BSR set to: 1
 16766                           ;DisplayProtocol.h: 107: }
 16767                           ;DisplayProtocol.h: 108: break;
 16768  004860  0012               	return	
 16769  004862                     l10647:
 16770                           
 16771                           ; BSR set to: 1
 16772                           ;DisplayProtocol.h: 110: if(yes) {
 16773  004862  0101               	movlb	1	; () banked
 16774  004864  5123               	movf	confirmEdition@yes& (0+255),w,b
 16775  004866  0101               	movlb	1	; () banked
 16776  004868  B4D8               	btfsc	status,2,c
 16777  00486A  D00C               	goto	l558
 16778                           
 16779                           ; BSR set to: 1
 16780                           ;DisplayProtocol.h: 111: velocidadMasa = chanValf;
 16781  00486C  C1AE  F0B5         	movff	_chanValf,_velocidadMasa
 16782  004870  C1AF  F0B6         	movff	_chanValf+1,_velocidadMasa+1
 16783  004874  C1B0  F0B7         	movff	_chanValf+2,_velocidadMasa+2
 16784                           
 16785                           ; BSR set to: 1
 16786                           ;DisplayProtocol.h: 112: actualScreen = 4;
 16787  004878  0E04               	movlw	4
 16788  00487A  0101               	movlb	1	; () banked
 16789  00487C  6FBA               	movwf	_actualScreen& (0+255),b
 16790                           
 16791                           ; BSR set to: 1
 16792                           ;DisplayProtocol.h: 113: saveSysParams();
 16793  00487E  ECE1  F028         	call	_saveSysParams	;wreg free
 16794                           
 16795                           ;DisplayProtocol.h: 114: }else {
 16796  004882  0012               	return	
 16797  004884                     l558:
 16798                           
 16799                           ; BSR set to: 1
 16800                           ;DisplayProtocol.h: 115: tempLastScreen = actualScreen;
 16801  004884  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 16802                           
 16803                           ; BSR set to: 1
 16804                           ;DisplayProtocol.h: 116: selSN = 1;
 16805  004888  0E01               	movlw	1
 16806  00488A  0101               	movlb	1	; () banked
 16807  00488C  6FC3               	movwf	_selSN& (0+255),b
 16808                           
 16809                           ;DisplayProtocol.h: 117: actualScreen = 10;
 16810  00488E  0E0A               	movlw	10
 16811  004890  0101               	movlb	1	; () banked
 16812  004892  6FBA               	movwf	_actualScreen& (0+255),b
 16813                           
 16814                           ; BSR set to: 1
 16815                           ;DisplayProtocol.h: 120: }
 16816                           ;DisplayProtocol.h: 121: }
 16817                           
 16818                           ; BSR set to: 1
 16819                           ;DisplayProtocol.h: 118: }
 16820                           ;DisplayProtocol.h: 119: break;
 16821  004894  0012               	return	
 16822  004896                     l10659:
 16823  004896  0101               	movlb	1	; () banked
 16824  004898  51C1               	movf	_menuSection& (0+255),w,b
 16825                           
 16826                           ; Switch size 1, requested type "space"
 16827                           ; Number of cases is 5, Range of values is 0 to 4
 16828                           ; switch strategies available:
 16829                           ; Name         Instructions Cycles
 16830                           ; simple_byte           16     9 (average)
 16831                           ;	Chosen strategy is simple_byte
 16832  00489A  0A00               	xorlw	0	; case 0
 16833  00489C  B4D8               	btfsc	status,2,c
 16834  00489E  0012               	return	
 16835  0048A0  0A01               	xorlw	1	; case 1
 16836  0048A2  B4D8               	btfsc	status,2,c
 16837  0048A4  D792               	goto	l10617
 16838  0048A6  0A03               	xorlw	3	; case 2
 16839  0048A8  B4D8               	btfsc	status,2,c
 16840  0048AA  D7A9               	goto	l10627
 16841  0048AC  0A01               	xorlw	1	; case 3
 16842  0048AE  B4D8               	btfsc	status,2,c
 16843  0048B0  D7BE               	goto	l10637
 16844  0048B2  0A07               	xorlw	7	; case 4
 16845  0048B4  A4D8               	btfss	status,2,c
 16846  0048B6  0012               	return	
 16847  0048B8  D7D4               	goto	l10647
 16848  0048BA                     __end_of_confirmEdition:
 16849                           	opt stack 0
 16850                           tblptru	equ	0xFF8
 16851                           tblptrh	equ	0xFF7
 16852                           tblptrl	equ	0xFF6
 16853                           tablat	equ	0xFF5
 16854                           prodh	equ	0xFF4
 16855                           prodl	equ	0xFF3
 16856                           intcon	equ	0xFF2
 16857                           postinc0	equ	0xFEE
 16858                           wreg	equ	0xFE8
 16859                           postdec1	equ	0xFE5
 16860                           fsr1l	equ	0xFE1
 16861                           indf2	equ	0xFDF
 16862                           postinc2	equ	0xFDE
 16863                           postdec2	equ	0xFDD
 16864                           plusw2	equ	0xFDB
 16865                           fsr2h	equ	0xFDA
 16866                           fsr2l	equ	0xFD9
 16867                           status	equ	0xFD8
 16868                           
 16869 ;; *************** function _saveSysParams *****************
 16870 ;; Defined at:
 16871 ;;		line 111 in file "source/sysParams.h"
 16872 ;; Parameters:    Size  Location     Type
 16873 ;;		None
 16874 ;; Auto vars:     Size  Location     Type
 16875 ;;		None
 16876 ;; Return value:  Size  Location     Type
 16877 ;;                  1    wreg      void 
 16878 ;; Registers used:
 16879 ;;		wreg, status,2, status,0, cstack
 16880 ;; Tracked objects:
 16881 ;;		On entry : 0/0
 16882 ;;		On exit  : 0/0
 16883 ;;		Unchanged: 0/0
 16884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16885 ;;      Params:         0       0       0       0       0       0       0
 16886 ;;      Locals:         0       0       0       0       0       0       0
 16887 ;;      Temps:          0       0       0       0       0       0       0
 16888 ;;      Totals:         0       0       0       0       0       0       0
 16889 ;;Total ram usage:        0 bytes
 16890 ;; Hardware stack levels used:    1
 16891 ;; Hardware stack levels required when called:   15
 16892 ;; This function calls:
 16893 ;;		_calcVars2ti
 16894 ;;		_writeEEPROM
 16895 ;; This function is called by:
 16896 ;;		_confirmEdition
 16897 ;; This function uses a non-reentrant model
 16898 ;;
 16899                           
 16900                           	psect	text66
 16901  0051C2                     __ptext66:
 16902                           	opt stack 0
 16903  0051C2                     _saveSysParams:
 16904                           	opt stack 12
 16905                           
 16906                           ;sysParams.h: 112: calcVars2ti();
 16907                           
 16908                           ;incstack = 0
 16909  0051C2  ECCA  F032         	call	_calcVars2ti	;wreg free
 16910                           
 16911                           ;sysParams.h: 113: EECON1bits.WREN = 1;
 16912  0051C6  84A6               	bsf	4006,2,c	;volatile
 16913                           
 16914                           ;sysParams.h: 114: ie = INTCONbits.GIE;
 16915  0051C8  0E00               	movlw	0
 16916  0051CA  BEF2               	btfsc	intcon,7,c	;volatile
 16917  0051CC  0E01               	movlw	1
 16918  0051CE  0100               	movlb	0	; () banked
 16919  0051D0  6FCA               	movwf	_ie& (0+255),b
 16920                           
 16921                           ; BSR set to: 0
 16922                           ;sysParams.h: 115: INTCONbits.GIE = 0;
 16923  0051D2  9EF2               	bcf	intcon,7,c	;volatile
 16924                           
 16925                           ; BSR set to: 0
 16926                           ;sysParams.h: 117: fData.floatdat = tiXcorte;
 16927  0051D4  C0B2  F0C4         	movff	_tiXcorte,_fData
 16928  0051D8  C0B3  F0C5         	movff	_tiXcorte+1,_fData+1
 16929  0051DC  C0B4  F0C6         	movff	_tiXcorte+2,_fData+2
 16930                           
 16931                           ; BSR set to: 0
 16932                           ;sysParams.h: 119: writeEEPROM(3, fData.floatUB);
 16933  0051E0  C0C6  F100         	movff	_fData+2,writeEEPROM@data
 16934  0051E4  0E03               	movlw	3
 16935  0051E6  EC9D  F035         	call	_writeEEPROM
 16936                           
 16937                           ;sysParams.h: 120: writeEEPROM(4, fData.floatHB);
 16938  0051EA  C0C5  F100         	movff	_fData+1,writeEEPROM@data
 16939  0051EE  0E04               	movlw	4
 16940  0051F0  EC9D  F035         	call	_writeEEPROM
 16941                           
 16942                           ;sysParams.h: 121: writeEEPROM(5, fData.floatLB);
 16943  0051F4  C0C4  F100         	movff	_fData,writeEEPROM@data
 16944  0051F8  0E05               	movlw	5
 16945  0051FA  EC9D  F035         	call	_writeEEPROM
 16946                           
 16947                           ;sysParams.h: 122: i16Data.int16dat = numCortes;
 16948  0051FE  C0B8  F0C7         	movff	_numCortes,_i16Data
 16949  005202  C0B9  F0C8         	movff	_numCortes+1,_i16Data+1
 16950                           
 16951                           ;sysParams.h: 123: writeEEPROM(6, i16Data.int16HB);
 16952  005206  C0C8  F100         	movff	_i16Data+1,writeEEPROM@data
 16953  00520A  0E06               	movlw	6
 16954  00520C  EC9D  F035         	call	_writeEEPROM
 16955                           
 16956                           ;sysParams.h: 124: writeEEPROM(7, i16Data.int16LB);
 16957  005210  C0C7  F100         	movff	_i16Data,writeEEPROM@data
 16958  005214  0E07               	movlw	7
 16959  005216  EC9D  F035         	call	_writeEEPROM
 16960                           
 16961                           ;sysParams.h: 125: fData.floatdat = diamTubo;
 16962  00521A  C0A9  F0C4         	movff	_diamTubo,_fData
 16963  00521E  C0AA  F0C5         	movff	_diamTubo+1,_fData+1
 16964  005222  C0AB  F0C6         	movff	_diamTubo+2,_fData+2
 16965                           
 16966                           ;sysParams.h: 127: writeEEPROM(9, fData.floatUB);
 16967  005226  C0C6  F100         	movff	_fData+2,writeEEPROM@data
 16968  00522A  0E09               	movlw	9
 16969  00522C  EC9D  F035         	call	_writeEEPROM
 16970                           
 16971                           ;sysParams.h: 128: writeEEPROM(10, fData.floatHB);
 16972  005230  C0C5  F100         	movff	_fData+1,writeEEPROM@data
 16973  005234  0E0A               	movlw	10
 16974  005236  EC9D  F035         	call	_writeEEPROM
 16975                           
 16976                           ;sysParams.h: 129: writeEEPROM(11, fData.floatLB);
 16977  00523A  C0C4  F100         	movff	_fData,writeEEPROM@data
 16978  00523E  0E0B               	movlw	11
 16979  005240  EC9D  F035         	call	_writeEEPROM
 16980                           
 16981                           ;sysParams.h: 135: fData.floatdat = velocidadMasa;
 16982  005244  C0B5  F0C4         	movff	_velocidadMasa,_fData
 16983  005248  C0B6  F0C5         	movff	_velocidadMasa+1,_fData+1
 16984  00524C  C0B7  F0C6         	movff	_velocidadMasa+2,_fData+2
 16985                           
 16986                           ;sysParams.h: 137: writeEEPROM(17, fData.floatUB);
 16987  005250  C0C6  F100         	movff	_fData+2,writeEEPROM@data
 16988  005254  0E11               	movlw	17
 16989  005256  EC9D  F035         	call	_writeEEPROM
 16990                           
 16991                           ;sysParams.h: 138: writeEEPROM(18, fData.floatHB);
 16992  00525A  C0C5  F100         	movff	_fData+1,writeEEPROM@data
 16993  00525E  0E12               	movlw	18
 16994  005260  EC9D  F035         	call	_writeEEPROM
 16995                           
 16996                           ;sysParams.h: 139: writeEEPROM(19, fData.floatLB);
 16997  005264  C0C4  F100         	movff	_fData,writeEEPROM@data
 16998  005268  0E13               	movlw	19
 16999  00526A  EC9D  F035         	call	_writeEEPROM
 17000                           
 17001                           ;sysParams.h: 140: EECON1bits.WREN = 0;
 17002  00526E  94A6               	bcf	4006,2,c	;volatile
 17003                           
 17004                           ;sysParams.h: 141: INTCONbits.GIE = ie;
 17005  005270  0100               	movlb	0	; () banked
 17006  005272  B1CA               	btfsc	_ie& (0+255),0,b
 17007  005274  D002               	bra	u14085
 17008  005276  9EF2               	bcf	intcon,7,c	;volatile
 17009  005278  D001               	bra	u14086
 17010  00527A                     u14085:
 17011  00527A  8EF2               	bsf	intcon,7,c	;volatile
 17012  00527C                     u14086:
 17013  00527C  0012               	return		;funcret
 17014  00527E                     __end_of_saveSysParams:
 17015                           	opt stack 0
 17016                           tblptru	equ	0xFF8
 17017                           tblptrh	equ	0xFF7
 17018                           tblptrl	equ	0xFF6
 17019                           tablat	equ	0xFF5
 17020                           prodh	equ	0xFF4
 17021                           prodl	equ	0xFF3
 17022                           intcon	equ	0xFF2
 17023                           postinc0	equ	0xFEE
 17024                           wreg	equ	0xFE8
 17025                           postdec1	equ	0xFE5
 17026                           fsr1l	equ	0xFE1
 17027                           indf2	equ	0xFDF
 17028                           postinc2	equ	0xFDE
 17029                           postdec2	equ	0xFDD
 17030                           plusw2	equ	0xFDB
 17031                           fsr2h	equ	0xFDA
 17032                           fsr2l	equ	0xFD9
 17033                           status	equ	0xFD8
 17034                           
 17035 ;; *************** function _writeEEPROM *****************
 17036 ;; Defined at:
 17037 ;;		line 51 in file "source/sysParams.h"
 17038 ;; Parameters:    Size  Location     Type
 17039 ;;  adr             1    wreg     unsigned char 
 17040 ;;  data            1    0[BANK1 ] unsigned char 
 17041 ;; Auto vars:     Size  Location     Type
 17042 ;;  adr             1    1[BANK1 ] unsigned char 
 17043 ;; Return value:  Size  Location     Type
 17044 ;;                  1    wreg      void 
 17045 ;; Registers used:
 17046 ;;		wreg, status,2
 17047 ;; Tracked objects:
 17048 ;;		On entry : 0/0
 17049 ;;		On exit  : 0/0
 17050 ;;		Unchanged: 0/0
 17051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17052 ;;      Params:         0       0       1       0       0       0       0
 17053 ;;      Locals:         0       0       1       0       0       0       0
 17054 ;;      Temps:          0       0       0       0       0       0       0
 17055 ;;      Totals:         0       0       2       0       0       0       0
 17056 ;;Total ram usage:        2 bytes
 17057 ;; Hardware stack levels used:    1
 17058 ;; Hardware stack levels required when called:   12
 17059 ;; This function calls:
 17060 ;;		Nothing
 17061 ;; This function is called by:
 17062 ;;		_saveSysParams
 17063 ;; This function uses a non-reentrant model
 17064 ;;
 17065                           
 17066                           	psect	text67
 17067  006B3A                     __ptext67:
 17068                           	opt stack 0
 17069  006B3A                     _writeEEPROM:
 17070                           	opt stack 14
 17071                           
 17072                           ;incstack = 0
 17073                           ;writeEEPROM@adr stored from wreg
 17074  006B3A  0101               	movlb	1	; () banked
 17075  006B3C  6F01               	movwf	writeEEPROM@adr& (0+255),b
 17076                           
 17077                           ;sysParams.h: 52: EEADR = adr;
 17078  006B3E  C101  FFA9         	movff	writeEEPROM@adr,4009	;volatile
 17079                           
 17080                           ;sysParams.h: 53: EEDATA = data;
 17081  006B42  C100  FFA8         	movff	writeEEPROM@data,4008	;volatile
 17082                           
 17083                           ;sysParams.h: 54: EECON1bits.EEPGD = 0;
 17084  006B46  9EA6               	bcf	4006,7,c	;volatile
 17085                           
 17086                           ;sysParams.h: 55: EECON1bits.CFGS = 0;
 17087  006B48  9CA6               	bcf	4006,6,c	;volatile
 17088                           
 17089                           ;sysParams.h: 56: EECON2 = 0x55;
 17090  006B4A  0E55               	movlw	85
 17091  006B4C  6EA7               	movwf	4007,c	;volatile
 17092                           
 17093                           ;sysParams.h: 57: EECON2 = 0xAA;
 17094  006B4E  0EAA               	movlw	170
 17095  006B50  6EA7               	movwf	4007,c	;volatile
 17096                           
 17097                           ;sysParams.h: 58: EECON1bits.WR = 1;
 17098  006B52  82A6               	bsf	4006,1,c	;volatile
 17099  006B54                     l275:
 17100  006B54  A2A6               	btfss	4006,1,c	;volatile
 17101  006B56  0012               	return	
 17102  006B58  D7FD               	goto	l275
 17103  006B5A                     __end_of_writeEEPROM:
 17104                           	opt stack 0
 17105                           tblptru	equ	0xFF8
 17106                           tblptrh	equ	0xFF7
 17107                           tblptrl	equ	0xFF6
 17108                           tablat	equ	0xFF5
 17109                           prodh	equ	0xFF4
 17110                           prodl	equ	0xFF3
 17111                           intcon	equ	0xFF2
 17112                           postinc0	equ	0xFEE
 17113                           wreg	equ	0xFE8
 17114                           postdec1	equ	0xFE5
 17115                           fsr1l	equ	0xFE1
 17116                           indf2	equ	0xFDF
 17117                           postinc2	equ	0xFDE
 17118                           postdec2	equ	0xFDD
 17119                           plusw2	equ	0xFDB
 17120                           fsr2h	equ	0xFDA
 17121                           fsr2l	equ	0xFD9
 17122                           status	equ	0xFD8
 17123                           
 17124 ;; *************** function _calcVars2ti *****************
 17125 ;; Defined at:
 17126 ;;		line 87 in file "source/sysParams.h"
 17127 ;; Parameters:    Size  Location     Type
 17128 ;;		None
 17129 ;; Auto vars:     Size  Location     Type
 17130 ;;		None
 17131 ;; Return value:  Size  Location     Type
 17132 ;;                  1    wreg      void 
 17133 ;; Registers used:
 17134 ;;		wreg, status,2, status,0, cstack
 17135 ;; Tracked objects:
 17136 ;;		On entry : 0/0
 17137 ;;		On exit  : 0/0
 17138 ;;		Unchanged: 0/0
 17139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17140 ;;      Params:         0       0       0       0       0       0       0
 17141 ;;      Locals:         0       0       0       0       0       0       0
 17142 ;;      Temps:          0       0       0       0       0       0       0
 17143 ;;      Totals:         0       0       0       0       0       0       0
 17144 ;;Total ram usage:        0 bytes
 17145 ;; Hardware stack levels used:    1
 17146 ;; Hardware stack levels required when called:   14
 17147 ;; This function calls:
 17148 ;;		___ftdiv
 17149 ;;		___ftmul
 17150 ;; This function is called by:
 17151 ;;		_saveSysParams
 17152 ;;		_longPressENTER
 17153 ;; This function uses a non-reentrant model
 17154 ;;
 17155                           
 17156                           	psect	text68
 17157  006594                     __ptext68:
 17158                           	opt stack 0
 17159  006594                     _calcVars2ti:
 17160                           	opt stack 12
 17161                           
 17162                           ;sysParams.h: 95: tiXcorte = (float)kgXcorte / velocidadMasa;
 17163                           
 17164                           ;incstack = 0
 17165  006594  C0AC  F112         	movff	_kgXcorte,___ftdiv@f1
 17166  006598  C0AD  F113         	movff	_kgXcorte+1,___ftdiv@f1+1
 17167  00659C  C0AE  F114         	movff	_kgXcorte+2,___ftdiv@f1+2
 17168  0065A0  C0B5  F115         	movff	_velocidadMasa,___ftdiv@f2
 17169  0065A4  C0B6  F116         	movff	_velocidadMasa+1,___ftdiv@f2+1
 17170  0065A8  C0B7  F117         	movff	_velocidadMasa+2,___ftdiv@f2+2
 17171  0065AC  EC64  F01B         	call	___ftdiv	;wreg free
 17172  0065B0  C112  F0B2         	movff	?___ftdiv,_tiXcorte
 17173  0065B4  C113  F0B3         	movff	?___ftdiv+1,_tiXcorte+1
 17174  0065B8  C114  F0B4         	movff	?___ftdiv+2,_tiXcorte+2
 17175                           
 17176                           ;sysParams.h: 96: timsXcorte = (float)tiXcorte * 1000;
 17177  0065BC  C0B2  F114         	movff	_tiXcorte,___ftmul@f1
 17178  0065C0  C0B3  F115         	movff	_tiXcorte+1,___ftmul@f1+1
 17179  0065C4  C0B4  F116         	movff	_tiXcorte+2,___ftmul@f1+2
 17180  0065C8  0E00               	movlw	0
 17181  0065CA  0101               	movlb	1	; () banked
 17182  0065CC  6F17               	movwf	___ftmul@f2& (0+255),b
 17183  0065CE  0E7A               	movlw	122
 17184  0065D0  0101               	movlb	1	; () banked
 17185  0065D2  6F18               	movwf	(___ftmul@f2+1)& (0+255),b
 17186  0065D4  0E44               	movlw	68
 17187  0065D6  0101               	movlb	1	; () banked
 17188  0065D8  6F19               	movwf	(___ftmul@f2+2)& (0+255),b
 17189  0065DA  EC06  F01A         	call	___ftmul	;wreg free
 17190  0065DE  C114  F04D         	movff	?___ftmul,_timsXcorte
 17191  0065E2  C115  F04E         	movff	?___ftmul+1,_timsXcorte+1
 17192  0065E6  C116  F04F         	movff	?___ftmul+2,_timsXcorte+2
 17193  0065EA  0012               	return		;funcret
 17194  0065EC                     __end_of_calcVars2ti:
 17195                           	opt stack 0
 17196                           tblptru	equ	0xFF8
 17197                           tblptrh	equ	0xFF7
 17198                           tblptrl	equ	0xFF6
 17199                           tablat	equ	0xFF5
 17200                           prodh	equ	0xFF4
 17201                           prodl	equ	0xFF3
 17202                           intcon	equ	0xFF2
 17203                           postinc0	equ	0xFEE
 17204                           wreg	equ	0xFE8
 17205                           postdec1	equ	0xFE5
 17206                           fsr1l	equ	0xFE1
 17207                           indf2	equ	0xFDF
 17208                           postinc2	equ	0xFDE
 17209                           postdec2	equ	0xFDD
 17210                           plusw2	equ	0xFDB
 17211                           fsr2h	equ	0xFDA
 17212                           fsr2l	equ	0xFD9
 17213                           status	equ	0xFD8
 17214                           
 17215 ;; *************** function ___ftmul *****************
 17216 ;; Defined at:
 17217 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 17218 ;; Parameters:    Size  Location     Type
 17219 ;;  f1              3   20[BANK1 ] float 
 17220 ;;  f2              3   23[BANK1 ] float 
 17221 ;; Auto vars:     Size  Location     Type
 17222 ;;  f3_as_produc    3   30[BANK1 ] unsigned um
 17223 ;;  sign            1   34[BANK1 ] unsigned char 
 17224 ;;  cntr            1   33[BANK1 ] unsigned char 
 17225 ;;  exp             1   29[BANK1 ] unsigned char 
 17226 ;; Return value:  Size  Location     Type
 17227 ;;                  3   20[BANK1 ] float 
 17228 ;; Registers used:
 17229 ;;		wreg, status,2, status,0, cstack
 17230 ;; Tracked objects:
 17231 ;;		On entry : 0/0
 17232 ;;		On exit  : 0/0
 17233 ;;		Unchanged: 0/0
 17234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17235 ;;      Params:         0       0       6       0       0       0       0
 17236 ;;      Locals:         0       0       6       0       0       0       0
 17237 ;;      Temps:          0       0       3       0       0       0       0
 17238 ;;      Totals:         0       0      15       0       0       0       0
 17239 ;;Total ram usage:       15 bytes
 17240 ;; Hardware stack levels used:    1
 17241 ;; Hardware stack levels required when called:   13
 17242 ;; This function calls:
 17243 ;;		___ftpack
 17244 ;; This function is called by:
 17245 ;;		_calcSysVars
 17246 ;;		_calcVars2ti
 17247 ;;		_desintegrator
 17248 ;;		_fround
 17249 ;;		_scale
 17250 ;;		_printf
 17251 ;; This function uses a non-reentrant model
 17252 ;;
 17253                           
 17254                           	psect	text69
 17255  00340C                     __ptext69:
 17256                           	opt stack 0
 17257  00340C                     ___ftmul:
 17258                           	opt stack 15
 17259                           
 17260                           ;incstack = 0
 17261  00340C  C116  F11A         	movff	___ftmul@f1+2,??___ftmul
 17262  003410  0101               	movlb	1	; () banked
 17263  003412  6B1B               	clrf	(??___ftmul+1)& (0+255),b
 17264  003414  6B1C               	clrf	(??___ftmul+2)& (0+255),b
 17265  003416  0101               	movlb	1	; () banked
 17266  003418  3515               	rlcf	(___ftmul@f1+1)& (0+255),w,b
 17267  00341A  0101               	movlb	1	; () banked
 17268  00341C  371A               	rlcf	??___ftmul& (0+255),f,b
 17269  00341E  E301               	bnc	u13401
 17270  003420  811B               	bsf	(??___ftmul+1)& (0+255),0,b
 17271  003422                     u13401:
 17272  003422  0101               	movlb	1	; () banked
 17273  003424  511A               	movf	??___ftmul& (0+255),w,b
 17274  003426  0101               	movlb	1	; () banked
 17275  003428  6F1D               	movwf	___ftmul@exp& (0+255),b
 17276  00342A  0101               	movlb	1	; () banked
 17277  00342C  511D               	movf	___ftmul@exp& (0+255),w,b
 17278  00342E  A4D8               	btfss	status,2,c
 17279  003430  D00A               	goto	l9409
 17280                           
 17281                           ; BSR set to: 1
 17282  003432  0E00               	movlw	0
 17283  003434  0101               	movlb	1	; () banked
 17284  003436  6F14               	movwf	?___ftmul& (0+255),b
 17285  003438  0E00               	movlw	0
 17286  00343A  0101               	movlb	1	; () banked
 17287  00343C  6F15               	movwf	(?___ftmul+1)& (0+255),b
 17288  00343E  0E00               	movlw	0
 17289  003440  0101               	movlb	1	; () banked
 17290  003442  6F16               	movwf	(?___ftmul+2)& (0+255),b
 17291                           
 17292                           ; BSR set to: 1
 17293  003444  0012               	return	
 17294  003446                     l9409:
 17295                           
 17296                           ; BSR set to: 1
 17297  003446  C119  F11A         	movff	___ftmul@f2+2,??___ftmul
 17298  00344A  0101               	movlb	1	; () banked
 17299  00344C  6B1B               	clrf	(??___ftmul+1)& (0+255),b
 17300  00344E  6B1C               	clrf	(??___ftmul+2)& (0+255),b
 17301  003450  0101               	movlb	1	; () banked
 17302  003452  3518               	rlcf	(___ftmul@f2+1)& (0+255),w,b
 17303  003454  0101               	movlb	1	; () banked
 17304  003456  371A               	rlcf	??___ftmul& (0+255),f,b
 17305  003458  E301               	bnc	u13421
 17306  00345A  811B               	bsf	(??___ftmul+1)& (0+255),0,b
 17307  00345C                     u13421:
 17308  00345C  0101               	movlb	1	; () banked
 17309  00345E  511A               	movf	??___ftmul& (0+255),w,b
 17310  003460  0101               	movlb	1	; () banked
 17311  003462  6F22               	movwf	___ftmul@sign& (0+255),b
 17312  003464  0101               	movlb	1	; () banked
 17313  003466  5122               	movf	___ftmul@sign& (0+255),w,b
 17314  003468  A4D8               	btfss	status,2,c
 17315  00346A  D00A               	goto	l9415
 17316                           
 17317                           ; BSR set to: 1
 17318  00346C  0E00               	movlw	0
 17319  00346E  0101               	movlb	1	; () banked
 17320  003470  6F14               	movwf	?___ftmul& (0+255),b
 17321  003472  0E00               	movlw	0
 17322  003474  0101               	movlb	1	; () banked
 17323  003476  6F15               	movwf	(?___ftmul+1)& (0+255),b
 17324  003478  0E00               	movlw	0
 17325  00347A  0101               	movlb	1	; () banked
 17326  00347C  6F16               	movwf	(?___ftmul+2)& (0+255),b
 17327                           
 17328                           ; BSR set to: 1
 17329  00347E  0012               	return	
 17330  003480                     l9415:
 17331                           
 17332                           ; BSR set to: 1
 17333  003480  0101               	movlb	1	; () banked
 17334  003482  5122               	movf	___ftmul@sign& (0+255),w,b
 17335  003484  0F7B               	addlw	123
 17336  003486  0101               	movlb	1	; () banked
 17337  003488  271D               	addwf	___ftmul@exp& (0+255),f,b
 17338                           
 17339                           ; BSR set to: 1
 17340  00348A  C116  F122         	movff	___ftmul@f1+2,___ftmul@sign
 17341  00348E  0101               	movlb	1	; () banked
 17342  003490  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 17343  003492  0101               	movlb	1	; () banked
 17344  003494  1B22               	xorwf	___ftmul@sign& (0+255),f,b
 17345  003496  0E80               	movlw	128
 17346  003498  0101               	movlb	1	; () banked
 17347  00349A  1722               	andwf	___ftmul@sign& (0+255),f,b
 17348                           
 17349                           ; BSR set to: 1
 17350  00349C  0101               	movlb	1	; () banked
 17351  00349E  8F15               	bsf	(___ftmul@f1+1)& (0+255),7,b
 17352                           
 17353                           ; BSR set to: 1
 17354  0034A0  0101               	movlb	1	; () banked
 17355  0034A2  8F18               	bsf	(___ftmul@f2+1)& (0+255),7,b
 17356                           
 17357                           ; BSR set to: 1
 17358  0034A4  0EFF               	movlw	255
 17359  0034A6  0101               	movlb	1	; () banked
 17360  0034A8  1717               	andwf	___ftmul@f2& (0+255),f,b
 17361  0034AA  0EFF               	movlw	255
 17362  0034AC  0101               	movlb	1	; () banked
 17363  0034AE  1718               	andwf	(___ftmul@f2+1)& (0+255),f,b
 17364  0034B0  0E00               	movlw	0
 17365  0034B2  0101               	movlb	1	; () banked
 17366  0034B4  1719               	andwf	(___ftmul@f2+2)& (0+255),f,b
 17367                           
 17368                           ; BSR set to: 1
 17369  0034B6  0E00               	movlw	0
 17370  0034B8  0101               	movlb	1	; () banked
 17371  0034BA  6F1E               	movwf	___ftmul@f3_as_product& (0+255),b
 17372  0034BC  0E00               	movlw	0
 17373  0034BE  0101               	movlb	1	; () banked
 17374  0034C0  6F1F               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
 17375  0034C2  0E00               	movlw	0
 17376  0034C4  0101               	movlb	1	; () banked
 17377  0034C6  6F20               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
 17378                           
 17379                           ; BSR set to: 1
 17380  0034C8  0E07               	movlw	7
 17381  0034CA  0101               	movlb	1	; () banked
 17382  0034CC  6F21               	movwf	___ftmul@cntr& (0+255),b
 17383  0034CE                     l9429:
 17384                           
 17385                           ; BSR set to: 1
 17386  0034CE  0101               	movlb	1	; () banked
 17387  0034D0  A114               	btfss	___ftmul@f1& (0+255),0,b
 17388  0034D2  D00C               	goto	l9433
 17389                           
 17390                           ; BSR set to: 1
 17391  0034D4  0101               	movlb	1	; () banked
 17392  0034D6  5117               	movf	___ftmul@f2& (0+255),w,b
 17393  0034D8  0101               	movlb	1	; () banked
 17394  0034DA  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 17395  0034DC  0101               	movlb	1	; () banked
 17396  0034DE  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
 17397  0034E0  0101               	movlb	1	; () banked
 17398  0034E2  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 17399  0034E4  0101               	movlb	1	; () banked
 17400  0034E6  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 17401  0034E8  0101               	movlb	1	; () banked
 17402  0034EA  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 17403  0034EC                     l9433:
 17404                           
 17405                           ; BSR set to: 1
 17406  0034EC  0101               	movlb	1	; () banked
 17407  0034EE  90D8               	bcf	status,0,c
 17408  0034F0  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 17409  0034F2  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 17410  0034F4  3314               	rrcf	___ftmul@f1& (0+255),f,b
 17411  0034F6  0101               	movlb	1	; () banked
 17412  0034F8  90D8               	bcf	status,0,c
 17413  0034FA  3717               	rlcf	___ftmul@f2& (0+255),f,b
 17414  0034FC  3718               	rlcf	(___ftmul@f2+1)& (0+255),f,b
 17415  0034FE  3719               	rlcf	(___ftmul@f2+2)& (0+255),f,b
 17416                           
 17417                           ; BSR set to: 1
 17418  003500  0101               	movlb	1	; () banked
 17419  003502  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
 17420  003504  D7E4               	goto	l9429
 17421                           
 17422                           ; BSR set to: 1
 17423                           
 17424                           ; BSR set to: 1
 17425  003506  0E09               	movlw	9
 17426  003508  0101               	movlb	1	; () banked
 17427  00350A  6F21               	movwf	___ftmul@cntr& (0+255),b
 17428  00350C                     l9439:
 17429                           
 17430                           ; BSR set to: 1
 17431  00350C  0101               	movlb	1	; () banked
 17432  00350E  A114               	btfss	___ftmul@f1& (0+255),0,b
 17433  003510  D00C               	goto	l9443
 17434                           
 17435                           ; BSR set to: 1
 17436  003512  0101               	movlb	1	; () banked
 17437  003514  5117               	movf	___ftmul@f2& (0+255),w,b
 17438  003516  0101               	movlb	1	; () banked
 17439  003518  271E               	addwf	___ftmul@f3_as_product& (0+255),f,b
 17440  00351A  0101               	movlb	1	; () banked
 17441  00351C  5118               	movf	(___ftmul@f2+1)& (0+255),w,b
 17442  00351E  0101               	movlb	1	; () banked
 17443  003520  231F               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
 17444  003522  0101               	movlb	1	; () banked
 17445  003524  5119               	movf	(___ftmul@f2+2)& (0+255),w,b
 17446  003526  0101               	movlb	1	; () banked
 17447  003528  2320               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
 17448  00352A                     l9443:
 17449                           
 17450                           ; BSR set to: 1
 17451  00352A  0101               	movlb	1	; () banked
 17452  00352C  90D8               	bcf	status,0,c
 17453  00352E  3316               	rrcf	(___ftmul@f1+2)& (0+255),f,b
 17454  003530  3315               	rrcf	(___ftmul@f1+1)& (0+255),f,b
 17455  003532  3314               	rrcf	___ftmul@f1& (0+255),f,b
 17456  003534  0101               	movlb	1	; () banked
 17457  003536  90D8               	bcf	status,0,c
 17458  003538  3320               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
 17459  00353A  331F               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
 17460  00353C  331E               	rrcf	___ftmul@f3_as_product& (0+255),f,b
 17461                           
 17462                           ; BSR set to: 1
 17463  00353E  0101               	movlb	1	; () banked
 17464  003540  2F21               	decfsz	___ftmul@cntr& (0+255),f,b
 17465  003542  D7E4               	goto	l9439
 17466                           
 17467                           ; BSR set to: 1
 17468                           
 17469                           ; BSR set to: 1
 17470  003544  C11E  F100         	movff	___ftmul@f3_as_product,___ftpack@arg
 17471  003548  C11F  F101         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 17472  00354C  C120  F102         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 17473  003550  C11D  F103         	movff	___ftmul@exp,___ftpack@exp
 17474  003554  C122  F104         	movff	___ftmul@sign,___ftpack@sign
 17475  003558  ECCC  F021         	call	___ftpack	;wreg free
 17476  00355C  C100  F114         	movff	?___ftpack,?___ftmul
 17477  003560  C101  F115         	movff	?___ftpack+1,?___ftmul+1
 17478  003564  C102  F116         	movff	?___ftpack+2,?___ftmul+2
 17479  003568  0012               	return	
 17480  00356A                     __end_of___ftmul:
 17481                           	opt stack 0
 17482                           tblptru	equ	0xFF8
 17483                           tblptrh	equ	0xFF7
 17484                           tblptrl	equ	0xFF6
 17485                           tablat	equ	0xFF5
 17486                           prodh	equ	0xFF4
 17487                           prodl	equ	0xFF3
 17488                           intcon	equ	0xFF2
 17489                           postinc0	equ	0xFEE
 17490                           wreg	equ	0xFE8
 17491                           postdec1	equ	0xFE5
 17492                           fsr1l	equ	0xFE1
 17493                           indf2	equ	0xFDF
 17494                           postinc2	equ	0xFDE
 17495                           postdec2	equ	0xFDD
 17496                           plusw2	equ	0xFDB
 17497                           fsr2h	equ	0xFDA
 17498                           fsr2l	equ	0xFD9
 17499                           status	equ	0xFD8
 17500                           
 17501 ;; *************** function ___ftdiv *****************
 17502 ;; Defined at:
 17503 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 17504 ;; Parameters:    Size  Location     Type
 17505 ;;  f1              3   18[BANK1 ] float 
 17506 ;;  f2              3   21[BANK1 ] float 
 17507 ;; Auto vars:     Size  Location     Type
 17508 ;;  f3              3   28[BANK1 ] float 
 17509 ;;  sign            1   32[BANK1 ] unsigned char 
 17510 ;;  exp             1   31[BANK1 ] unsigned char 
 17511 ;;  cntr            1   27[BANK1 ] unsigned char 
 17512 ;; Return value:  Size  Location     Type
 17513 ;;                  3   18[BANK1 ] float 
 17514 ;; Registers used:
 17515 ;;		wreg, status,2, status,0, cstack
 17516 ;; Tracked objects:
 17517 ;;		On entry : 0/0
 17518 ;;		On exit  : 0/0
 17519 ;;		Unchanged: 0/0
 17520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17521 ;;      Params:         0       0       6       0       0       0       0
 17522 ;;      Locals:         0       0       6       0       0       0       0
 17523 ;;      Temps:          0       0       3       0       0       0       0
 17524 ;;      Totals:         0       0      15       0       0       0       0
 17525 ;;Total ram usage:       15 bytes
 17526 ;; Hardware stack levels used:    1
 17527 ;; Hardware stack levels required when called:   13
 17528 ;; This function calls:
 17529 ;;		___ftpack
 17530 ;; This function is called by:
 17531 ;;		_calcVars2ti
 17532 ;;		_integrator
 17533 ;;		_longPressENTER
 17534 ;; This function uses a non-reentrant model
 17535 ;;
 17536                           
 17537                           	psect	text70
 17538  0036C8                     __ptext70:
 17539                           	opt stack 0
 17540  0036C8                     ___ftdiv:
 17541                           	opt stack 12
 17542                           
 17543                           ;incstack = 0
 17544  0036C8  C114  F118         	movff	___ftdiv@f1+2,??___ftdiv
 17545  0036CC  0101               	movlb	1	; () banked
 17546  0036CE  6B19               	clrf	(??___ftdiv+1)& (0+255),b
 17547  0036D0  6B1A               	clrf	(??___ftdiv+2)& (0+255),b
 17548  0036D2  0101               	movlb	1	; () banked
 17549  0036D4  3513               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
 17550  0036D6  0101               	movlb	1	; () banked
 17551  0036D8  3718               	rlcf	??___ftdiv& (0+255),f,b
 17552  0036DA  E301               	bnc	u13351
 17553  0036DC  8119               	bsf	(??___ftdiv+1)& (0+255),0,b
 17554  0036DE                     u13351:
 17555  0036DE  0101               	movlb	1	; () banked
 17556  0036E0  5118               	movf	??___ftdiv& (0+255),w,b
 17557  0036E2  0101               	movlb	1	; () banked
 17558  0036E4  6F1F               	movwf	___ftdiv@exp& (0+255),b
 17559  0036E6  0101               	movlb	1	; () banked
 17560  0036E8  511F               	movf	___ftdiv@exp& (0+255),w,b
 17561  0036EA  A4D8               	btfss	status,2,c
 17562  0036EC  D00A               	goto	l9363
 17563                           
 17564                           ; BSR set to: 1
 17565  0036EE  0E00               	movlw	0
 17566  0036F0  0101               	movlb	1	; () banked
 17567  0036F2  6F12               	movwf	?___ftdiv& (0+255),b
 17568  0036F4  0E00               	movlw	0
 17569  0036F6  0101               	movlb	1	; () banked
 17570  0036F8  6F13               	movwf	(?___ftdiv+1)& (0+255),b
 17571  0036FA  0E00               	movlw	0
 17572  0036FC  0101               	movlb	1	; () banked
 17573  0036FE  6F14               	movwf	(?___ftdiv+2)& (0+255),b
 17574                           
 17575                           ; BSR set to: 1
 17576  003700  0012               	return	
 17577  003702                     l9363:
 17578                           
 17579                           ; BSR set to: 1
 17580  003702  C117  F118         	movff	___ftdiv@f2+2,??___ftdiv
 17581  003706  0101               	movlb	1	; () banked
 17582  003708  6B19               	clrf	(??___ftdiv+1)& (0+255),b
 17583  00370A  6B1A               	clrf	(??___ftdiv+2)& (0+255),b
 17584  00370C  0101               	movlb	1	; () banked
 17585  00370E  3516               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
 17586  003710  0101               	movlb	1	; () banked
 17587  003712  3718               	rlcf	??___ftdiv& (0+255),f,b
 17588  003714  E301               	bnc	u13371
 17589  003716  8119               	bsf	(??___ftdiv+1)& (0+255),0,b
 17590  003718                     u13371:
 17591  003718  0101               	movlb	1	; () banked
 17592  00371A  5118               	movf	??___ftdiv& (0+255),w,b
 17593  00371C  0101               	movlb	1	; () banked
 17594  00371E  6F20               	movwf	___ftdiv@sign& (0+255),b
 17595  003720  0101               	movlb	1	; () banked
 17596  003722  5120               	movf	___ftdiv@sign& (0+255),w,b
 17597  003724  A4D8               	btfss	status,2,c
 17598  003726  D00A               	goto	l9369
 17599                           
 17600                           ; BSR set to: 1
 17601  003728  0E00               	movlw	0
 17602  00372A  0101               	movlb	1	; () banked
 17603  00372C  6F12               	movwf	?___ftdiv& (0+255),b
 17604  00372E  0E00               	movlw	0
 17605  003730  0101               	movlb	1	; () banked
 17606  003732  6F13               	movwf	(?___ftdiv+1)& (0+255),b
 17607  003734  0E00               	movlw	0
 17608  003736  0101               	movlb	1	; () banked
 17609  003738  6F14               	movwf	(?___ftdiv+2)& (0+255),b
 17610                           
 17611                           ; BSR set to: 1
 17612  00373A  0012               	return	
 17613  00373C                     l9369:
 17614                           
 17615                           ; BSR set to: 1
 17616  00373C  0E00               	movlw	0
 17617  00373E  0101               	movlb	1	; () banked
 17618  003740  6F1C               	movwf	___ftdiv@f3& (0+255),b
 17619  003742  0E00               	movlw	0
 17620  003744  0101               	movlb	1	; () banked
 17621  003746  6F1D               	movwf	(___ftdiv@f3+1)& (0+255),b
 17622  003748  0E00               	movlw	0
 17623  00374A  0101               	movlb	1	; () banked
 17624  00374C  6F1E               	movwf	(___ftdiv@f3+2)& (0+255),b
 17625                           
 17626                           ; BSR set to: 1
 17627  00374E  0101               	movlb	1	; () banked
 17628  003750  5120               	movf	___ftdiv@sign& (0+255),w,b
 17629  003752  0F89               	addlw	137
 17630  003754  0101               	movlb	1	; () banked
 17631  003756  5F1F               	subwf	___ftdiv@exp& (0+255),f,b
 17632                           
 17633                           ; BSR set to: 1
 17634  003758  C114  F120         	movff	___ftdiv@f1+2,___ftdiv@sign
 17635                           
 17636                           ; BSR set to: 1
 17637  00375C  0101               	movlb	1	; () banked
 17638  00375E  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 17639  003760  0101               	movlb	1	; () banked
 17640  003762  1B20               	xorwf	___ftdiv@sign& (0+255),f,b
 17641                           
 17642                           ; BSR set to: 1
 17643  003764  0E80               	movlw	128
 17644  003766  0101               	movlb	1	; () banked
 17645  003768  1720               	andwf	___ftdiv@sign& (0+255),f,b
 17646                           
 17647                           ; BSR set to: 1
 17648  00376A  0101               	movlb	1	; () banked
 17649  00376C  8F13               	bsf	(___ftdiv@f1+1)& (0+255),7,b
 17650                           
 17651                           ; BSR set to: 1
 17652  00376E  0EFF               	movlw	255
 17653  003770  0101               	movlb	1	; () banked
 17654  003772  1712               	andwf	___ftdiv@f1& (0+255),f,b
 17655  003774  0EFF               	movlw	255
 17656  003776  0101               	movlb	1	; () banked
 17657  003778  1713               	andwf	(___ftdiv@f1+1)& (0+255),f,b
 17658  00377A  0E00               	movlw	0
 17659  00377C  0101               	movlb	1	; () banked
 17660  00377E  1714               	andwf	(___ftdiv@f1+2)& (0+255),f,b
 17661                           
 17662                           ; BSR set to: 1
 17663  003780  0101               	movlb	1	; () banked
 17664  003782  8F16               	bsf	(___ftdiv@f2+1)& (0+255),7,b
 17665                           
 17666                           ; BSR set to: 1
 17667  003784  0EFF               	movlw	255
 17668  003786  0101               	movlb	1	; () banked
 17669  003788  1715               	andwf	___ftdiv@f2& (0+255),f,b
 17670  00378A  0EFF               	movlw	255
 17671  00378C  0101               	movlb	1	; () banked
 17672  00378E  1716               	andwf	(___ftdiv@f2+1)& (0+255),f,b
 17673  003790  0E00               	movlw	0
 17674  003792  0101               	movlb	1	; () banked
 17675  003794  1717               	andwf	(___ftdiv@f2+2)& (0+255),f,b
 17676                           
 17677                           ; BSR set to: 1
 17678  003796  0E18               	movlw	24
 17679  003798  0101               	movlb	1	; () banked
 17680  00379A  6F1B               	movwf	___ftdiv@cntr& (0+255),b
 17681  00379C                     l9389:
 17682                           
 17683                           ; BSR set to: 1
 17684  00379C  0101               	movlb	1	; () banked
 17685  00379E  90D8               	bcf	status,0,c
 17686  0037A0  371C               	rlcf	___ftdiv@f3& (0+255),f,b
 17687  0037A2  371D               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
 17688  0037A4  371E               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
 17689                           
 17690                           ; BSR set to: 1
 17691  0037A6  0101               	movlb	1	; () banked
 17692  0037A8  5115               	movf	___ftdiv@f2& (0+255),w,b
 17693  0037AA  0101               	movlb	1	; () banked
 17694  0037AC  5D12               	subwf	___ftdiv@f1& (0+255),w,b
 17695  0037AE  0101               	movlb	1	; () banked
 17696  0037B0  5116               	movf	(___ftdiv@f2+1)& (0+255),w,b
 17697  0037B2  0101               	movlb	1	; () banked
 17698  0037B4  5913               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
 17699  0037B6  0101               	movlb	1	; () banked
 17700  0037B8  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 17701  0037BA  0101               	movlb	1	; () banked
 17702  0037BC  5914               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
 17703  0037BE  A0D8               	btfss	status,0,c
 17704  0037C0  D00E               	goto	l1322
 17705                           
 17706                           ; BSR set to: 1
 17707  0037C2  0101               	movlb	1	; () banked
 17708  0037C4  5115               	movf	___ftdiv@f2& (0+255),w,b
 17709  0037C6  0101               	movlb	1	; () banked
 17710  0037C8  5F12               	subwf	___ftdiv@f1& (0+255),f,b
 17711  0037CA  0101               	movlb	1	; () banked
 17712  0037CC  5116               	movf	(___ftdiv@f2+1)& (0+255),w,b
 17713  0037CE  0101               	movlb	1	; () banked
 17714  0037D0  5B13               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
 17715  0037D2  0101               	movlb	1	; () banked
 17716  0037D4  5117               	movf	(___ftdiv@f2+2)& (0+255),w,b
 17717  0037D6  0101               	movlb	1	; () banked
 17718  0037D8  5B14               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
 17719                           
 17720                           ; BSR set to: 1
 17721  0037DA  0101               	movlb	1	; () banked
 17722  0037DC  811C               	bsf	___ftdiv@f3& (0+255),0,b
 17723  0037DE                     l1322:
 17724                           
 17725                           ; BSR set to: 1
 17726  0037DE  0101               	movlb	1	; () banked
 17727  0037E0  90D8               	bcf	status,0,c
 17728  0037E2  3712               	rlcf	___ftdiv@f1& (0+255),f,b
 17729  0037E4  3713               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
 17730  0037E6  3714               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
 17731                           
 17732                           ; BSR set to: 1
 17733  0037E8  0101               	movlb	1	; () banked
 17734  0037EA  2F1B               	decfsz	___ftdiv@cntr& (0+255),f,b
 17735  0037EC  D7D7               	goto	l9389
 17736                           
 17737                           ; BSR set to: 1
 17738                           
 17739                           ; BSR set to: 1
 17740  0037EE  C11C  F100         	movff	___ftdiv@f3,___ftpack@arg
 17741  0037F2  C11D  F101         	movff	___ftdiv@f3+1,___ftpack@arg+1
 17742  0037F6  C11E  F102         	movff	___ftdiv@f3+2,___ftpack@arg+2
 17743  0037FA  C11F  F103         	movff	___ftdiv@exp,___ftpack@exp
 17744  0037FE  C120  F104         	movff	___ftdiv@sign,___ftpack@sign
 17745  003802  ECCC  F021         	call	___ftpack	;wreg free
 17746  003806  C100  F112         	movff	?___ftpack,?___ftdiv
 17747  00380A  C101  F113         	movff	?___ftpack+1,?___ftdiv+1
 17748  00380E  C102  F114         	movff	?___ftpack+2,?___ftdiv+2
 17749  003812  0012               	return	
 17750  003814                     __end_of___ftdiv:
 17751                           	opt stack 0
 17752                           tblptru	equ	0xFF8
 17753                           tblptrh	equ	0xFF7
 17754                           tblptrl	equ	0xFF6
 17755                           tablat	equ	0xFF5
 17756                           prodh	equ	0xFF4
 17757                           prodl	equ	0xFF3
 17758                           intcon	equ	0xFF2
 17759                           postinc0	equ	0xFEE
 17760                           wreg	equ	0xFE8
 17761                           postdec1	equ	0xFE5
 17762                           fsr1l	equ	0xFE1
 17763                           indf2	equ	0xFDF
 17764                           postinc2	equ	0xFDE
 17765                           postdec2	equ	0xFDD
 17766                           plusw2	equ	0xFDB
 17767                           fsr2h	equ	0xFDA
 17768                           fsr2l	equ	0xFD9
 17769                           status	equ	0xFD8
 17770                           
 17771 ;; *************** function ___ftadd *****************
 17772 ;; Defined at:
 17773 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 17774 ;; Parameters:    Size  Location     Type
 17775 ;;  f1              3   45[BANK1 ] float 
 17776 ;;  f2              3   48[BANK1 ] float 
 17777 ;; Auto vars:     Size  Location     Type
 17778 ;;  exp1            1   56[BANK1 ] unsigned char 
 17779 ;;  exp2            1   55[BANK1 ] unsigned char 
 17780 ;;  sign            1   54[BANK1 ] unsigned char 
 17781 ;; Return value:  Size  Location     Type
 17782 ;;                  3   45[BANK1 ] float 
 17783 ;; Registers used:
 17784 ;;		wreg, status,2, status,0, cstack
 17785 ;; Tracked objects:
 17786 ;;		On entry : 0/0
 17787 ;;		On exit  : 0/0
 17788 ;;		Unchanged: 0/0
 17789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17790 ;;      Params:         0       0       6       0       0       0       0
 17791 ;;      Locals:         0       0       3       0       0       0       0
 17792 ;;      Temps:          0       0       3       0       0       0       0
 17793 ;;      Totals:         0       0      12       0       0       0       0
 17794 ;;Total ram usage:       12 bytes
 17795 ;; Hardware stack levels used:    1
 17796 ;; Hardware stack levels required when called:   13
 17797 ;; This function calls:
 17798 ;;		___ftpack
 17799 ;; This function is called by:
 17800 ;;		_longPressENTER
 17801 ;;		_printf
 17802 ;;		___ftsub
 17803 ;; This function uses a non-reentrant model
 17804 ;;
 17805                           
 17806                           	psect	text71
 17807  002518                     __ptext71:
 17808                           	opt stack 0
 17809  002518                     ___ftadd:
 17810                           	opt stack 13
 17811                           
 17812                           ;incstack = 0
 17813  002518  C12F  F133         	movff	___ftadd@f1+2,??___ftadd
 17814  00251C  0101               	movlb	1	; () banked
 17815  00251E  6B34               	clrf	(??___ftadd+1)& (0+255),b
 17816  002520  6B35               	clrf	(??___ftadd+2)& (0+255),b
 17817  002522  0101               	movlb	1	; () banked
 17818  002524  352E               	rlcf	(___ftadd@f1+1)& (0+255),w,b
 17819  002526  0101               	movlb	1	; () banked
 17820  002528  3733               	rlcf	??___ftadd& (0+255),f,b
 17821  00252A  E301               	bnc	u13141
 17822  00252C  8134               	bsf	(??___ftadd+1)& (0+255),0,b
 17823  00252E                     u13141:
 17824  00252E  0101               	movlb	1	; () banked
 17825  002530  5133               	movf	??___ftadd& (0+255),w,b
 17826  002532  0101               	movlb	1	; () banked
 17827  002534  6F38               	movwf	___ftadd@exp1& (0+255),b
 17828  002536  C132  F133         	movff	___ftadd@f2+2,??___ftadd
 17829  00253A  0101               	movlb	1	; () banked
 17830  00253C  6B34               	clrf	(??___ftadd+1)& (0+255),b
 17831  00253E  6B35               	clrf	(??___ftadd+2)& (0+255),b
 17832  002540  0101               	movlb	1	; () banked
 17833  002542  3531               	rlcf	(___ftadd@f2+1)& (0+255),w,b
 17834  002544  0101               	movlb	1	; () banked
 17835  002546  3733               	rlcf	??___ftadd& (0+255),f,b
 17836  002548  E301               	bnc	u13151
 17837  00254A  8134               	bsf	(??___ftadd+1)& (0+255),0,b
 17838  00254C                     u13151:
 17839  00254C  0101               	movlb	1	; () banked
 17840  00254E  5133               	movf	??___ftadd& (0+255),w,b
 17841  002550  0101               	movlb	1	; () banked
 17842  002552  6F37               	movwf	___ftadd@exp2& (0+255),b
 17843                           
 17844                           ; BSR set to: 1
 17845  002554  0101               	movlb	1	; () banked
 17846  002556  5138               	movf	___ftadd@exp1& (0+255),w,b
 17847  002558  0101               	movlb	1	; () banked
 17848  00255A  B4D8               	btfsc	status,2,c
 17849  00255C  D011               	goto	l1287
 17850                           
 17851                           ; BSR set to: 1
 17852  00255E  0101               	movlb	1	; () banked
 17853  002560  5137               	movf	___ftadd@exp2& (0+255),w,b
 17854  002562  0101               	movlb	1	; () banked
 17855  002564  5D38               	subwf	___ftadd@exp1& (0+255),w,b
 17856  002566  B0D8               	btfsc	status,0,c
 17857  002568  D012               	goto	l9295
 17858                           
 17859                           ; BSR set to: 1
 17860  00256A  0101               	movlb	1	; () banked
 17861  00256C  5138               	movf	___ftadd@exp1& (0+255),w,b
 17862  00256E  0800               	sublw	0
 17863  002570  0101               	movlb	1	; () banked
 17864  002572  2537               	addwf	___ftadd@exp2& (0+255),w,b
 17865  002574  0101               	movlb	1	; () banked
 17866  002576  6F33               	movwf	??___ftadd& (0+255),b
 17867  002578  0E18               	movlw	24
 17868  00257A  0101               	movlb	1	; () banked
 17869  00257C  6533               	cpfsgt	??___ftadd& (0+255),b
 17870  00257E  D007               	goto	l9295
 17871  002580                     l1287:
 17872                           
 17873                           ; BSR set to: 1
 17874  002580  C130  F12D         	movff	___ftadd@f2,?___ftadd
 17875  002584  C131  F12E         	movff	___ftadd@f2+1,?___ftadd+1
 17876  002588  C132  F12F         	movff	___ftadd@f2+2,?___ftadd+2
 17877  00258C  0012               	return	
 17878  00258E                     l9295:
 17879                           
 17880                           ; BSR set to: 1
 17881  00258E  0101               	movlb	1	; () banked
 17882  002590  5137               	movf	___ftadd@exp2& (0+255),w,b
 17883  002592  0101               	movlb	1	; () banked
 17884  002594  B4D8               	btfsc	status,2,c
 17885  002596  D011               	goto	l1291
 17886                           
 17887                           ; BSR set to: 1
 17888  002598  0101               	movlb	1	; () banked
 17889  00259A  5138               	movf	___ftadd@exp1& (0+255),w,b
 17890  00259C  0101               	movlb	1	; () banked
 17891  00259E  5D37               	subwf	___ftadd@exp2& (0+255),w,b
 17892  0025A0  B0D8               	btfsc	status,0,c
 17893  0025A2  D012               	goto	l9301
 17894                           
 17895                           ; BSR set to: 1
 17896  0025A4  0101               	movlb	1	; () banked
 17897  0025A6  5137               	movf	___ftadd@exp2& (0+255),w,b
 17898  0025A8  0800               	sublw	0
 17899  0025AA  0101               	movlb	1	; () banked
 17900  0025AC  2538               	addwf	___ftadd@exp1& (0+255),w,b
 17901  0025AE  0101               	movlb	1	; () banked
 17902  0025B0  6F33               	movwf	??___ftadd& (0+255),b
 17903  0025B2  0E18               	movlw	24
 17904  0025B4  0101               	movlb	1	; () banked
 17905  0025B6  6533               	cpfsgt	??___ftadd& (0+255),b
 17906  0025B8  D007               	goto	l9301
 17907  0025BA                     l1291:
 17908                           
 17909                           ; BSR set to: 1
 17910  0025BA  C12D  F12D         	movff	___ftadd@f1,?___ftadd
 17911  0025BE  C12E  F12E         	movff	___ftadd@f1+1,?___ftadd+1
 17912  0025C2  C12F  F12F         	movff	___ftadd@f1+2,?___ftadd+2
 17913  0025C6  0012               	return	
 17914  0025C8                     l9301:
 17915                           
 17916                           ; BSR set to: 1
 17917  0025C8  0E06               	movlw	6
 17918  0025CA  0101               	movlb	1	; () banked
 17919  0025CC  6F36               	movwf	___ftadd@sign& (0+255),b
 17920                           
 17921                           ; BSR set to: 1
 17922  0025CE  0101               	movlb	1	; () banked
 17923  0025D0  AF2F               	btfss	(___ftadd@f1+2)& (0+255),7,b
 17924  0025D2  D002               	goto	l9307
 17925                           
 17926                           ; BSR set to: 1
 17927  0025D4  0101               	movlb	1	; () banked
 17928  0025D6  8F36               	bsf	___ftadd@sign& (0+255),7,b
 17929  0025D8                     l9307:
 17930                           
 17931                           ; BSR set to: 1
 17932  0025D8  0101               	movlb	1	; () banked
 17933  0025DA  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
 17934  0025DC  D002               	goto	l1293
 17935                           
 17936                           ; BSR set to: 1
 17937  0025DE  0101               	movlb	1	; () banked
 17938  0025E0  8D36               	bsf	___ftadd@sign& (0+255),6,b
 17939  0025E2                     l1293:
 17940                           
 17941                           ; BSR set to: 1
 17942  0025E2  0101               	movlb	1	; () banked
 17943  0025E4  8F2E               	bsf	(___ftadd@f1+1)& (0+255),7,b
 17944                           
 17945                           ; BSR set to: 1
 17946  0025E6  0EFF               	movlw	255
 17947  0025E8  0101               	movlb	1	; () banked
 17948  0025EA  172D               	andwf	___ftadd@f1& (0+255),f,b
 17949  0025EC  0EFF               	movlw	255
 17950  0025EE  0101               	movlb	1	; () banked
 17951  0025F0  172E               	andwf	(___ftadd@f1+1)& (0+255),f,b
 17952  0025F2  0E00               	movlw	0
 17953  0025F4  0101               	movlb	1	; () banked
 17954  0025F6  172F               	andwf	(___ftadd@f1+2)& (0+255),f,b
 17955  0025F8  0101               	movlb	1	; () banked
 17956  0025FA  8F31               	bsf	(___ftadd@f2+1)& (0+255),7,b
 17957                           
 17958                           ; BSR set to: 1
 17959  0025FC  0EFF               	movlw	255
 17960  0025FE  0101               	movlb	1	; () banked
 17961  002600  1730               	andwf	___ftadd@f2& (0+255),f,b
 17962  002602  0EFF               	movlw	255
 17963  002604  0101               	movlb	1	; () banked
 17964  002606  1731               	andwf	(___ftadd@f2+1)& (0+255),f,b
 17965  002608  0E00               	movlw	0
 17966  00260A  0101               	movlb	1	; () banked
 17967  00260C  1732               	andwf	(___ftadd@f2+2)& (0+255),f,b
 17968                           
 17969                           ; BSR set to: 1
 17970  00260E  0101               	movlb	1	; () banked
 17971  002610  5137               	movf	___ftadd@exp2& (0+255),w,b
 17972  002612  0101               	movlb	1	; () banked
 17973  002614  5D38               	subwf	___ftadd@exp1& (0+255),w,b
 17974  002616  B0D8               	btfsc	status,0,c
 17975  002618  D025               	goto	l9327
 17976  00261A                     l9317:
 17977                           
 17978                           ; BSR set to: 1
 17979  00261A  0101               	movlb	1	; () banked
 17980  00261C  90D8               	bcf	status,0,c
 17981  00261E  3730               	rlcf	___ftadd@f2& (0+255),f,b
 17982  002620  3731               	rlcf	(___ftadd@f2+1)& (0+255),f,b
 17983  002622  3732               	rlcf	(___ftadd@f2+2)& (0+255),f,b
 17984  002624  0101               	movlb	1	; () banked
 17985  002626  0737               	decf	___ftadd@exp2& (0+255),f,b
 17986                           
 17987                           ; BSR set to: 1
 17988  002628  0101               	movlb	1	; () banked
 17989  00262A  5138               	movf	___ftadd@exp1& (0+255),w,b
 17990  00262C  0101               	movlb	1	; () banked
 17991  00262E  1937               	xorwf	___ftadd@exp2& (0+255),w,b
 17992  002630  B4D8               	btfsc	status,2,c
 17993  002632  D011               	goto	l9325
 17994                           
 17995                           ; BSR set to: 1
 17996  002634  0101               	movlb	1	; () banked
 17997  002636  0736               	decf	___ftadd@sign& (0+255),f,b
 17998  002638  C136  F133         	movff	___ftadd@sign,??___ftadd
 17999  00263C  0E07               	movlw	7
 18000  00263E  0101               	movlb	1	; () banked
 18001  002640  1733               	andwf	??___ftadd& (0+255),f,b
 18002  002642  B4D8               	btfsc	status,2,c
 18003  002644  D008               	goto	l9325
 18004  002646  D7E9               	goto	l9317
 18005  002648                     l9323:
 18006                           
 18007                           ; BSR set to: 1
 18008  002648  0101               	movlb	1	; () banked
 18009  00264A  90D8               	bcf	status,0,c
 18010  00264C  332F               	rrcf	(___ftadd@f1+2)& (0+255),f,b
 18011  00264E  332E               	rrcf	(___ftadd@f1+1)& (0+255),f,b
 18012  002650  332D               	rrcf	___ftadd@f1& (0+255),f,b
 18013  002652  0101               	movlb	1	; () banked
 18014  002654  2B38               	incf	___ftadd@exp1& (0+255),f,b
 18015  002656                     l9325:
 18016                           
 18017                           ; BSR set to: 1
 18018  002656  0101               	movlb	1	; () banked
 18019  002658  5137               	movf	___ftadd@exp2& (0+255),w,b
 18020  00265A  0101               	movlb	1	; () banked
 18021  00265C  1938               	xorwf	___ftadd@exp1& (0+255),w,b
 18022  00265E  B4D8               	btfsc	status,2,c
 18023  002660  D02B               	goto	l1302
 18024  002662  D7F2               	goto	l9323
 18025  002664                     l9327:
 18026                           
 18027                           ; BSR set to: 1
 18028  002664  0101               	movlb	1	; () banked
 18029  002666  5138               	movf	___ftadd@exp1& (0+255),w,b
 18030  002668  0101               	movlb	1	; () banked
 18031  00266A  5D37               	subwf	___ftadd@exp2& (0+255),w,b
 18032  00266C  B0D8               	btfsc	status,0,c
 18033  00266E  D024               	goto	l1302
 18034  002670                     l9329:
 18035                           
 18036                           ; BSR set to: 1
 18037  002670  0101               	movlb	1	; () banked
 18038  002672  90D8               	bcf	status,0,c
 18039  002674  372D               	rlcf	___ftadd@f1& (0+255),f,b
 18040  002676  372E               	rlcf	(___ftadd@f1+1)& (0+255),f,b
 18041  002678  372F               	rlcf	(___ftadd@f1+2)& (0+255),f,b
 18042  00267A  0101               	movlb	1	; () banked
 18043  00267C  0738               	decf	___ftadd@exp1& (0+255),f,b
 18044                           
 18045                           ; BSR set to: 1
 18046  00267E  0101               	movlb	1	; () banked
 18047  002680  5138               	movf	___ftadd@exp1& (0+255),w,b
 18048  002682  0101               	movlb	1	; () banked
 18049  002684  1937               	xorwf	___ftadd@exp2& (0+255),w,b
 18050  002686  B4D8               	btfsc	status,2,c
 18051  002688  D011               	goto	l9337
 18052                           
 18053                           ; BSR set to: 1
 18054  00268A  0101               	movlb	1	; () banked
 18055  00268C  0736               	decf	___ftadd@sign& (0+255),f,b
 18056  00268E  C136  F133         	movff	___ftadd@sign,??___ftadd
 18057  002692  0E07               	movlw	7
 18058  002694  0101               	movlb	1	; () banked
 18059  002696  1733               	andwf	??___ftadd& (0+255),f,b
 18060  002698  B4D8               	btfsc	status,2,c
 18061  00269A  D008               	goto	l9337
 18062  00269C  D7E9               	goto	l9329
 18063  00269E                     l9335:
 18064                           
 18065                           ; BSR set to: 1
 18066  00269E  0101               	movlb	1	; () banked
 18067  0026A0  90D8               	bcf	status,0,c
 18068  0026A2  3332               	rrcf	(___ftadd@f2+2)& (0+255),f,b
 18069  0026A4  3331               	rrcf	(___ftadd@f2+1)& (0+255),f,b
 18070  0026A6  3330               	rrcf	___ftadd@f2& (0+255),f,b
 18071  0026A8  0101               	movlb	1	; () banked
 18072  0026AA  2B37               	incf	___ftadd@exp2& (0+255),f,b
 18073  0026AC                     l9337:
 18074                           
 18075                           ; BSR set to: 1
 18076  0026AC  0101               	movlb	1	; () banked
 18077  0026AE  5137               	movf	___ftadd@exp2& (0+255),w,b
 18078  0026B0  0101               	movlb	1	; () banked
 18079  0026B2  1938               	xorwf	___ftadd@exp1& (0+255),w,b
 18080  0026B4  A4D8               	btfss	status,2,c
 18081  0026B6  D7F3               	goto	l9335
 18082  0026B8                     l1302:
 18083                           
 18084                           ; BSR set to: 1
 18085  0026B8  0101               	movlb	1	; () banked
 18086  0026BA  AF36               	btfss	___ftadd@sign& (0+255),7,b
 18087  0026BC  D012               	goto	l1311
 18088                           
 18089                           ; BSR set to: 1
 18090  0026BE  0EFF               	movlw	255
 18091  0026C0  0101               	movlb	1	; () banked
 18092  0026C2  1B2D               	xorwf	___ftadd@f1& (0+255),f,b
 18093  0026C4  0EFF               	movlw	255
 18094  0026C6  0101               	movlb	1	; () banked
 18095  0026C8  1B2E               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 18096  0026CA  0EFF               	movlw	255
 18097  0026CC  0101               	movlb	1	; () banked
 18098  0026CE  1B2F               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 18099  0026D0  0E01               	movlw	1
 18100  0026D2  0101               	movlb	1	; () banked
 18101  0026D4  272D               	addwf	___ftadd@f1& (0+255),f,b
 18102  0026D6  0E00               	movlw	0
 18103  0026D8  0101               	movlb	1	; () banked
 18104  0026DA  232E               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 18105  0026DC  0E00               	movlw	0
 18106  0026DE  0101               	movlb	1	; () banked
 18107  0026E0  232F               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 18108  0026E2                     l1311:
 18109                           
 18110                           ; BSR set to: 1
 18111  0026E2  0101               	movlb	1	; () banked
 18112  0026E4  AD36               	btfss	___ftadd@sign& (0+255),6,b
 18113  0026E6  D012               	goto	l9343
 18114                           
 18115                           ; BSR set to: 1
 18116  0026E8  0EFF               	movlw	255
 18117  0026EA  0101               	movlb	1	; () banked
 18118  0026EC  1B30               	xorwf	___ftadd@f2& (0+255),f,b
 18119  0026EE  0EFF               	movlw	255
 18120  0026F0  0101               	movlb	1	; () banked
 18121  0026F2  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 18122  0026F4  0EFF               	movlw	255
 18123  0026F6  0101               	movlb	1	; () banked
 18124  0026F8  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 18125  0026FA  0E01               	movlw	1
 18126  0026FC  0101               	movlb	1	; () banked
 18127  0026FE  2730               	addwf	___ftadd@f2& (0+255),f,b
 18128  002700  0E00               	movlw	0
 18129  002702  0101               	movlb	1	; () banked
 18130  002704  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18131  002706  0E00               	movlw	0
 18132  002708  0101               	movlb	1	; () banked
 18133  00270A  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18134  00270C                     l9343:
 18135                           
 18136                           ; BSR set to: 1
 18137  00270C  0E00               	movlw	0
 18138  00270E  0101               	movlb	1	; () banked
 18139  002710  6F36               	movwf	___ftadd@sign& (0+255),b
 18140                           
 18141                           ; BSR set to: 1
 18142  002712  0101               	movlb	1	; () banked
 18143  002714  512D               	movf	___ftadd@f1& (0+255),w,b
 18144  002716  0101               	movlb	1	; () banked
 18145  002718  2730               	addwf	___ftadd@f2& (0+255),f,b
 18146  00271A  0101               	movlb	1	; () banked
 18147  00271C  512E               	movf	(___ftadd@f1+1)& (0+255),w,b
 18148  00271E  0101               	movlb	1	; () banked
 18149  002720  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18150  002722  0101               	movlb	1	; () banked
 18151  002724  512F               	movf	(___ftadd@f1+2)& (0+255),w,b
 18152  002726  0101               	movlb	1	; () banked
 18153  002728  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18154                           
 18155                           ; BSR set to: 1
 18156  00272A  0101               	movlb	1	; () banked
 18157  00272C  AF32               	btfss	(___ftadd@f2+2)& (0+255),7,b
 18158  00272E  D015               	goto	l9353
 18159                           
 18160                           ; BSR set to: 1
 18161  002730  0EFF               	movlw	255
 18162  002732  0101               	movlb	1	; () banked
 18163  002734  1B30               	xorwf	___ftadd@f2& (0+255),f,b
 18164  002736  0EFF               	movlw	255
 18165  002738  0101               	movlb	1	; () banked
 18166  00273A  1B31               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 18167  00273C  0EFF               	movlw	255
 18168  00273E  0101               	movlb	1	; () banked
 18169  002740  1B32               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 18170  002742  0E01               	movlw	1
 18171  002744  0101               	movlb	1	; () banked
 18172  002746  2730               	addwf	___ftadd@f2& (0+255),f,b
 18173  002748  0E00               	movlw	0
 18174  00274A  0101               	movlb	1	; () banked
 18175  00274C  2331               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 18176  00274E  0E00               	movlw	0
 18177  002750  0101               	movlb	1	; () banked
 18178  002752  2332               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 18179                           
 18180                           ; BSR set to: 1
 18181  002754  0E01               	movlw	1
 18182  002756  0101               	movlb	1	; () banked
 18183  002758  6F36               	movwf	___ftadd@sign& (0+255),b
 18184  00275A                     l9353:
 18185                           
 18186                           ; BSR set to: 1
 18187  00275A  C130  F100         	movff	___ftadd@f2,___ftpack@arg
 18188  00275E  C131  F101         	movff	___ftadd@f2+1,___ftpack@arg+1
 18189  002762  C132  F102         	movff	___ftadd@f2+2,___ftpack@arg+2
 18190  002766  C138  F103         	movff	___ftadd@exp1,___ftpack@exp
 18191  00276A  C136  F104         	movff	___ftadd@sign,___ftpack@sign
 18192  00276E  ECCC  F021         	call	___ftpack	;wreg free
 18193  002772  C100  F12D         	movff	?___ftpack,?___ftadd
 18194  002776  C101  F12E         	movff	?___ftpack+1,?___ftadd+1
 18195  00277A  C102  F12F         	movff	?___ftpack+2,?___ftadd+2
 18196  00277E  0012               	return	
 18197  002780                     __end_of___ftadd:
 18198                           	opt stack 0
 18199                           tblptru	equ	0xFF8
 18200                           tblptrh	equ	0xFF7
 18201                           tblptrl	equ	0xFF6
 18202                           tablat	equ	0xFF5
 18203                           prodh	equ	0xFF4
 18204                           prodl	equ	0xFF3
 18205                           intcon	equ	0xFF2
 18206                           postinc0	equ	0xFEE
 18207                           wreg	equ	0xFE8
 18208                           postdec1	equ	0xFE5
 18209                           fsr1l	equ	0xFE1
 18210                           indf2	equ	0xFDF
 18211                           postinc2	equ	0xFDE
 18212                           postdec2	equ	0xFDD
 18213                           plusw2	equ	0xFDB
 18214                           fsr2h	equ	0xFDA
 18215                           fsr2l	equ	0xFD9
 18216                           status	equ	0xFD8
 18217                           
 18218 ;; *************** function ___ftpack *****************
 18219 ;; Defined at:
 18220 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 18221 ;; Parameters:    Size  Location     Type
 18222 ;;  arg             3    0[BANK1 ] unsigned um
 18223 ;;  exp             1    3[BANK1 ] unsigned char 
 18224 ;;  sign            1    4[BANK1 ] unsigned char 
 18225 ;; Auto vars:     Size  Location     Type
 18226 ;;		None
 18227 ;; Return value:  Size  Location     Type
 18228 ;;                  3    0[BANK1 ] float 
 18229 ;; Registers used:
 18230 ;;		wreg, status,2, status,0
 18231 ;; Tracked objects:
 18232 ;;		On entry : 0/0
 18233 ;;		On exit  : 0/0
 18234 ;;		Unchanged: 0/0
 18235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18236 ;;      Params:         0       0       5       0       0       0       0
 18237 ;;      Locals:         0       0       0       0       0       0       0
 18238 ;;      Temps:          0       0       3       0       0       0       0
 18239 ;;      Totals:         0       0       8       0       0       0       0
 18240 ;;Total ram usage:        8 bytes
 18241 ;; Hardware stack levels used:    1
 18242 ;; Hardware stack levels required when called:   12
 18243 ;; This function calls:
 18244 ;;		Nothing
 18245 ;; This function is called by:
 18246 ;;		___altoft
 18247 ;;		___ftadd
 18248 ;;		___ftdiv
 18249 ;;		___ftmul
 18250 ;;		___lltoft
 18251 ;; This function uses a non-reentrant model
 18252 ;;
 18253                           
 18254                           	psect	text72
 18255  004398                     __ptext72:
 18256                           	opt stack 0
 18257  004398                     ___ftpack:
 18258                           	opt stack 15
 18259                           
 18260                           ;incstack = 0
 18261  004398  0101               	movlb	1	; () banked
 18262  00439A  5103               	movf	___ftpack@exp& (0+255),w,b
 18263  00439C  0101               	movlb	1	; () banked
 18264  00439E  B4D8               	btfsc	status,2,c
 18265  0043A0  D008               	goto	l9195
 18266                           
 18267                           ; BSR set to: 1
 18268  0043A2  0101               	movlb	1	; () banked
 18269  0043A4  5100               	movf	___ftpack@arg& (0+255),w,b
 18270  0043A6  0101               	movlb	1	; () banked
 18271  0043A8  1101               	iorwf	(___ftpack@arg+1)& (0+255),w,b
 18272  0043AA  0101               	movlb	1	; () banked
 18273  0043AC  1102               	iorwf	(___ftpack@arg+2)& (0+255),w,b
 18274  0043AE  A4D8               	btfss	status,2,c
 18275  0043B0  D011               	goto	l9201
 18276  0043B2                     l9195:
 18277                           
 18278                           ; BSR set to: 1
 18279  0043B2  0E00               	movlw	0
 18280  0043B4  0101               	movlb	1	; () banked
 18281  0043B6  6F00               	movwf	?___ftpack& (0+255),b
 18282  0043B8  0E00               	movlw	0
 18283  0043BA  0101               	movlb	1	; () banked
 18284  0043BC  6F01               	movwf	(?___ftpack+1)& (0+255),b
 18285  0043BE  0E00               	movlw	0
 18286  0043C0  0101               	movlb	1	; () banked
 18287  0043C2  6F02               	movwf	(?___ftpack+2)& (0+255),b
 18288                           
 18289                           ; BSR set to: 1
 18290  0043C4  0012               	return	
 18291  0043C6                     l9199:
 18292                           
 18293                           ; BSR set to: 1
 18294  0043C6  0101               	movlb	1	; () banked
 18295  0043C8  2B03               	incf	___ftpack@exp& (0+255),f,b
 18296  0043CA  0101               	movlb	1	; () banked
 18297  0043CC  90D8               	bcf	status,0,c
 18298  0043CE  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 18299  0043D0  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 18300  0043D2  3300               	rrcf	___ftpack@arg& (0+255),f,b
 18301  0043D4                     l9201:
 18302                           
 18303                           ; BSR set to: 1
 18304  0043D4  0E00               	movlw	0
 18305  0043D6  0101               	movlb	1	; () banked
 18306  0043D8  1500               	andwf	___ftpack@arg& (0+255),w,b
 18307  0043DA  0101               	movlb	1	; () banked
 18308  0043DC  6F05               	movwf	??___ftpack& (0+255),b
 18309  0043DE  0E00               	movlw	0
 18310  0043E0  0101               	movlb	1	; () banked
 18311  0043E2  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
 18312  0043E4  0101               	movlb	1	; () banked
 18313  0043E6  6F06               	movwf	(??___ftpack+1)& (0+255),b
 18314  0043E8  0EFE               	movlw	254
 18315  0043EA  0101               	movlb	1	; () banked
 18316  0043EC  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
 18317  0043EE  0101               	movlb	1	; () banked
 18318  0043F0  6F07               	movwf	(??___ftpack+2)& (0+255),b
 18319  0043F2  0101               	movlb	1	; () banked
 18320  0043F4  5105               	movf	??___ftpack& (0+255),w,b
 18321  0043F6  0101               	movlb	1	; () banked
 18322  0043F8  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
 18323  0043FA  0101               	movlb	1	; () banked
 18324  0043FC  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
 18325  0043FE  B4D8               	btfsc	status,2,c
 18326  004400  D011               	goto	l9207
 18327  004402  D7E1               	goto	l9199
 18328  004404                     l9203:
 18329                           
 18330                           ; BSR set to: 1
 18331  004404  0101               	movlb	1	; () banked
 18332  004406  2B03               	incf	___ftpack@exp& (0+255),f,b
 18333                           
 18334                           ; BSR set to: 1
 18335  004408  0E01               	movlw	1
 18336  00440A  0101               	movlb	1	; () banked
 18337  00440C  2700               	addwf	___ftpack@arg& (0+255),f,b
 18338  00440E  0E00               	movlw	0
 18339  004410  0101               	movlb	1	; () banked
 18340  004412  2301               	addwfc	(___ftpack@arg+1)& (0+255),f,b
 18341  004414  0E00               	movlw	0
 18342  004416  0101               	movlb	1	; () banked
 18343  004418  2302               	addwfc	(___ftpack@arg+2)& (0+255),f,b
 18344  00441A  0101               	movlb	1	; () banked
 18345  00441C  90D8               	bcf	status,0,c
 18346  00441E  3302               	rrcf	(___ftpack@arg+2)& (0+255),f,b
 18347  004420  3301               	rrcf	(___ftpack@arg+1)& (0+255),f,b
 18348  004422  3300               	rrcf	___ftpack@arg& (0+255),f,b
 18349  004424                     l9207:
 18350                           
 18351                           ; BSR set to: 1
 18352  004424  0E00               	movlw	0
 18353  004426  0101               	movlb	1	; () banked
 18354  004428  1500               	andwf	___ftpack@arg& (0+255),w,b
 18355  00442A  0101               	movlb	1	; () banked
 18356  00442C  6F05               	movwf	??___ftpack& (0+255),b
 18357  00442E  0E00               	movlw	0
 18358  004430  0101               	movlb	1	; () banked
 18359  004432  1501               	andwf	(___ftpack@arg+1)& (0+255),w,b
 18360  004434  0101               	movlb	1	; () banked
 18361  004436  6F06               	movwf	(??___ftpack+1)& (0+255),b
 18362  004438  0EFF               	movlw	255
 18363  00443A  0101               	movlb	1	; () banked
 18364  00443C  1502               	andwf	(___ftpack@arg+2)& (0+255),w,b
 18365  00443E  0101               	movlb	1	; () banked
 18366  004440  6F07               	movwf	(??___ftpack+2)& (0+255),b
 18367  004442  0101               	movlb	1	; () banked
 18368  004444  5105               	movf	??___ftpack& (0+255),w,b
 18369  004446  0101               	movlb	1	; () banked
 18370  004448  1106               	iorwf	(??___ftpack+1)& (0+255),w,b
 18371  00444A  0101               	movlb	1	; () banked
 18372  00444C  1107               	iorwf	(??___ftpack+2)& (0+255),w,b
 18373  00444E  B4D8               	btfsc	status,2,c
 18374  004450  D008               	goto	l9211
 18375  004452  D7D8               	goto	l9203
 18376  004454                     l9209:
 18377                           
 18378                           ; BSR set to: 1
 18379  004454  0101               	movlb	1	; () banked
 18380  004456  0703               	decf	___ftpack@exp& (0+255),f,b
 18381  004458  0101               	movlb	1	; () banked
 18382  00445A  90D8               	bcf	status,0,c
 18383  00445C  3700               	rlcf	___ftpack@arg& (0+255),f,b
 18384  00445E  3701               	rlcf	(___ftpack@arg+1)& (0+255),f,b
 18385  004460  3702               	rlcf	(___ftpack@arg+2)& (0+255),f,b
 18386  004462                     l9211:
 18387                           
 18388                           ; BSR set to: 1
 18389  004462  0101               	movlb	1	; () banked
 18390  004464  BF01               	btfsc	(___ftpack@arg+1)& (0+255),7,b
 18391  004466  D004               	goto	l1264
 18392                           
 18393                           ; BSR set to: 1
 18394  004468  0E02               	movlw	2
 18395  00446A  0101               	movlb	1	; () banked
 18396  00446C  6103               	cpfslt	___ftpack@exp& (0+255),b
 18397  00446E  D7F2               	goto	l9209
 18398  004470                     l1264:
 18399                           
 18400                           ; BSR set to: 1
 18401  004470  0101               	movlb	1	; () banked
 18402  004472  B103               	btfsc	___ftpack@exp& (0+255),0,b
 18403  004474  D002               	goto	l9217
 18404                           
 18405                           ; BSR set to: 1
 18406  004476  0101               	movlb	1	; () banked
 18407  004478  9F01               	bcf	(___ftpack@arg+1)& (0+255),7,b
 18408  00447A                     l9217:
 18409                           
 18410                           ; BSR set to: 1
 18411  00447A  0101               	movlb	1	; () banked
 18412  00447C  90D8               	bcf	status,0,c
 18413  00447E  3303               	rrcf	___ftpack@exp& (0+255),f,b
 18414  004480  0101               	movlb	1	; () banked
 18415  004482  5103               	movf	___ftpack@exp& (0+255),w,b
 18416  004484  0101               	movlb	1	; () banked
 18417  004486  1302               	iorwf	(___ftpack@arg+2)& (0+255),f,b
 18418                           
 18419                           ; BSR set to: 1
 18420  004488  0101               	movlb	1	; () banked
 18421  00448A  5104               	movf	___ftpack@sign& (0+255),w,b
 18422  00448C  0101               	movlb	1	; () banked
 18423  00448E  B4D8               	btfsc	status,2,c
 18424  004490  D002               	goto	l9223
 18425                           
 18426                           ; BSR set to: 1
 18427  004492  0101               	movlb	1	; () banked
 18428  004494  8F02               	bsf	(___ftpack@arg+2)& (0+255),7,b
 18429  004496                     l9223:
 18430                           
 18431                           ; BSR set to: 1
 18432  004496  C100  F100         	movff	___ftpack@arg,?___ftpack
 18433  00449A  C101  F101         	movff	___ftpack@arg+1,?___ftpack+1
 18434  00449E  C102  F102         	movff	___ftpack@arg+2,?___ftpack+2
 18435  0044A2  0012               	return	
 18436  0044A4                     __end_of___ftpack:
 18437                           	opt stack 0
 18438                           tblptru	equ	0xFF8
 18439                           tblptrh	equ	0xFF7
 18440                           tblptrl	equ	0xFF6
 18441                           tablat	equ	0xFF5
 18442                           prodh	equ	0xFF4
 18443                           prodl	equ	0xFF3
 18444                           intcon	equ	0xFF2
 18445                           postinc0	equ	0xFEE
 18446                           wreg	equ	0xFE8
 18447                           postdec1	equ	0xFE5
 18448                           fsr1l	equ	0xFE1
 18449                           indf2	equ	0xFDF
 18450                           postinc2	equ	0xFDE
 18451                           postdec2	equ	0xFDD
 18452                           plusw2	equ	0xFDB
 18453                           fsr2h	equ	0xFDA
 18454                           fsr2l	equ	0xFD9
 18455                           status	equ	0xFD8
 18456                           
 18457 ;; *************** function _longPressDOWN *****************
 18458 ;; Defined at:
 18459 ;;		line 214 in file "source/DisplayProtocol.h"
 18460 ;; Parameters:    Size  Location     Type
 18461 ;;		None
 18462 ;; Auto vars:     Size  Location     Type
 18463 ;;		None
 18464 ;; Return value:  Size  Location     Type
 18465 ;;                  1    wreg      void 
 18466 ;; Registers used:
 18467 ;;		wreg, status,2, status,0
 18468 ;; Tracked objects:
 18469 ;;		On entry : 0/0
 18470 ;;		On exit  : 0/0
 18471 ;;		Unchanged: 0/0
 18472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18473 ;;      Params:         0       0       0       0       0       0       0
 18474 ;;      Locals:         0       0       0       0       0       0       0
 18475 ;;      Temps:          0       0       0       0       0       0       0
 18476 ;;      Totals:         0       0       0       0       0       0       0
 18477 ;;Total ram usage:        0 bytes
 18478 ;; Hardware stack levels used:    1
 18479 ;; Hardware stack levels required when called:   12
 18480 ;; This function calls:
 18481 ;;		Nothing
 18482 ;; This function is called by:
 18483 ;;		_buttonChecking
 18484 ;; This function uses a non-reentrant model
 18485 ;;
 18486                           
 18487                           	psect	text73
 18488  006A96                     __ptext73:
 18489                           	opt stack 0
 18490  006A96                     _longPressDOWN:
 18491                           	opt stack 17
 18492                           
 18493                           ;DisplayProtocol.h: 215: if (!DOWNisLP) {
 18494                           
 18495                           ; BSR set to: 1
 18496                           ;incstack = 0
 18497  006A96  5037               	movf	_DOWNisLP,w,c
 18498  006A98  A4D8               	btfss	status,2,c
 18499  006A9A  0012               	return	
 18500                           
 18501                           ;DisplayProtocol.h: 216: DOWNisLP = 1;
 18502  006A9C  0E01               	movlw	1
 18503  006A9E  6E37               	movwf	_DOWNisLP,c
 18504                           
 18505                           ;DisplayProtocol.h: 217: if(actualScreen == 5) {
 18506  006AA0  0E05               	movlw	5
 18507  006AA2  0101               	movlb	1	; () banked
 18508  006AA4  19BA               	xorwf	_actualScreen& (0+255),w,b
 18509  006AA6  A4D8               	btfss	status,2,c
 18510  006AA8  0012               	return	
 18511                           
 18512                           ; BSR set to: 1
 18513                           ;DisplayProtocol.h: 218: if(menuSection == 2)
 18514  006AAA  0E02               	movlw	2
 18515  006AAC  0101               	movlb	1	; () banked
 18516  006AAE  19C1               	xorwf	_menuSection& (0+255),w,b
 18517  006AB0  A4D8               	btfss	status,2,c
 18518  006AB2  0012               	return	
 18519                           
 18520                           ; BSR set to: 1
 18521                           ;DisplayProtocol.h: 219: chanVals -= 10;
 18522  006AB4  0101               	movlb	1	; () banked
 18523  006AB6  0EF6               	movlw	246
 18524  006AB8  27B1               	addwf	_chanVals& (0+255),f,b
 18525  006ABA  0EFF               	movlw	255
 18526  006ABC  23B2               	addwfc	(_chanVals+1)& (0+255),f,b
 18527                           
 18528                           ; BSR set to: 1
 18529                           
 18530                           ; BSR set to: 1
 18531  006ABE  0012               	return	
 18532  006AC0                     __end_of_longPressDOWN:
 18533                           	opt stack 0
 18534                           tblptru	equ	0xFF8
 18535                           tblptrh	equ	0xFF7
 18536                           tblptrl	equ	0xFF6
 18537                           tablat	equ	0xFF5
 18538                           prodh	equ	0xFF4
 18539                           prodl	equ	0xFF3
 18540                           intcon	equ	0xFF2
 18541                           postinc0	equ	0xFEE
 18542                           wreg	equ	0xFE8
 18543                           postdec1	equ	0xFE5
 18544                           fsr1l	equ	0xFE1
 18545                           indf2	equ	0xFDF
 18546                           postinc2	equ	0xFDE
 18547                           postdec2	equ	0xFDD
 18548                           plusw2	equ	0xFDB
 18549                           fsr2h	equ	0xFDA
 18550                           fsr2l	equ	0xFD9
 18551                           status	equ	0xFD8
 18552                           
 18553 ;; *************** function _delay_ms *****************
 18554 ;; Defined at:
 18555 ;;		line 13 in file "source/../../delay.h"
 18556 ;; Parameters:    Size  Location     Type
 18557 ;;  del             2    0[BANK1 ] int 
 18558 ;; Auto vars:     Size  Location     Type
 18559 ;;  i               2    3[BANK1 ] int 
 18560 ;; Return value:  Size  Location     Type
 18561 ;;                  1    wreg      void 
 18562 ;; Registers used:
 18563 ;;		wreg, status,2, status,0
 18564 ;; Tracked objects:
 18565 ;;		On entry : 0/0
 18566 ;;		On exit  : 0/0
 18567 ;;		Unchanged: 0/0
 18568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18569 ;;      Params:         0       0       2       0       0       0       0
 18570 ;;      Locals:         0       0       2       0       0       0       0
 18571 ;;      Temps:          0       0       1       0       0       0       0
 18572 ;;      Totals:         0       0       5       0       0       0       0
 18573 ;;Total ram usage:        5 bytes
 18574 ;; Hardware stack levels used:    1
 18575 ;; Hardware stack levels required when called:   12
 18576 ;; This function calls:
 18577 ;;		Nothing
 18578 ;; This function is called by:
 18579 ;;		_buttonChecking
 18580 ;; This function uses a non-reentrant model
 18581 ;;
 18582                           
 18583                           	psect	text74
 18584  006810                     __ptext74:
 18585                           	opt stack 0
 18586  006810                     _delay_ms:
 18587                           	opt stack 17
 18588                           
 18589                           ;delay.h: 14: for(int i = 1;i <= del;i++)
 18590                           
 18591                           ;incstack = 0
 18592  006810  0E00               	movlw	0
 18593  006812  0101               	movlb	1	; () banked
 18594  006814  6F04               	movwf	(delay_ms@i+1)& (0+255),b
 18595  006816  0E01               	movlw	1
 18596  006818  6F03               	movwf	delay_ms@i& (0+255),b
 18597  00681A  D00C               	goto	l100
 18598  00681C                     l10881:
 18599                           
 18600                           ; BSR set to: 1
 18601                           ;delay.h: 15: _delay((unsigned long)((1)*(16000000/4000.0)));
 18602  00681C  0E06               	movlw	6
 18603  00681E  0101               	movlb	1	; () banked
 18604  006820  6F02               	movwf	??_delay_ms& (0+255),b
 18605  006822  0E30               	movlw	48
 18606  006824                     u18967:
 18607  006824  2EE8               	decfsz	wreg,f,c
 18608  006826  D7FE               	goto	u18967
 18609  006828  2F02               	decfsz	??_delay_ms& (0+255),f,b
 18610  00682A  D7FC               	goto	u18967
 18611  00682C  D000               	nop2	
 18612  00682E  0101               	movlb	1	; () banked
 18613  006830  4B03               	infsnz	delay_ms@i& (0+255),f,b
 18614  006832  2B04               	incf	(delay_ms@i+1)& (0+255),f,b
 18615  006834                     l100:
 18616                           
 18617                           ; BSR set to: 1
 18618  006834  0101               	movlb	1	; () banked
 18619  006836  5103               	movf	delay_ms@i& (0+255),w,b
 18620  006838  0101               	movlb	1	; () banked
 18621  00683A  5D00               	subwf	delay_ms@del& (0+255),w,b
 18622  00683C  0101               	movlb	1	; () banked
 18623  00683E  5101               	movf	(delay_ms@del+1)& (0+255),w,b
 18624  006840  0A80               	xorlw	128
 18625  006842  0101               	movlb	1	; () banked
 18626  006844  6F02               	movwf	??_delay_ms& (0+255),b
 18627  006846  0101               	movlb	1	; () banked
 18628  006848  5104               	movf	(delay_ms@i+1)& (0+255),w,b
 18629  00684A  0A80               	xorlw	128
 18630  00684C  0101               	movlb	1	; () banked
 18631  00684E  5902               	subwfb	??_delay_ms& (0+255),w,b
 18632  006850  A0D8               	btfss	status,0,c
 18633  006852  0012               	return	
 18634  006854  D7E3               	goto	l10881
 18635  006856                     __end_of_delay_ms:
 18636                           	opt stack 0
 18637                           tblptru	equ	0xFF8
 18638                           tblptrh	equ	0xFF7
 18639                           tblptrl	equ	0xFF6
 18640                           tablat	equ	0xFF5
 18641                           prodh	equ	0xFF4
 18642                           prodl	equ	0xFF3
 18643                           intcon	equ	0xFF2
 18644                           postinc0	equ	0xFEE
 18645                           wreg	equ	0xFE8
 18646                           postdec1	equ	0xFE5
 18647                           fsr1l	equ	0xFE1
 18648                           indf2	equ	0xFDF
 18649                           postinc2	equ	0xFDE
 18650                           postdec2	equ	0xFDD
 18651                           plusw2	equ	0xFDB
 18652                           fsr2h	equ	0xFDA
 18653                           fsr2l	equ	0xFD9
 18654                           status	equ	0xFD8
 18655                           
 18656 ;; *************** function _UARTConfig *****************
 18657 ;; Defined at:
 18658 ;;		line 81 in file "source/UARTConfig.h"
 18659 ;; Parameters:    Size  Location     Type
 18660 ;;		None
 18661 ;; Auto vars:     Size  Location     Type
 18662 ;;		None
 18663 ;; Return value:  Size  Location     Type
 18664 ;;                  1    wreg      void 
 18665 ;; Registers used:
 18666 ;;		wreg, status,2
 18667 ;; Tracked objects:
 18668 ;;		On entry : 0/0
 18669 ;;		On exit  : 0/0
 18670 ;;		Unchanged: 0/0
 18671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18672 ;;      Params:         0       0       0       0       0       0       0
 18673 ;;      Locals:         0       0       0       0       0       0       0
 18674 ;;      Temps:          0       0       0       0       0       0       0
 18675 ;;      Totals:         0       0       0       0       0       0       0
 18676 ;;Total ram usage:        0 bytes
 18677 ;; Hardware stack levels used:    1
 18678 ;; Hardware stack levels required when called:   12
 18679 ;; This function calls:
 18680 ;;		Nothing
 18681 ;; This function is called by:
 18682 ;;		_main
 18683 ;; This function uses a non-reentrant model
 18684 ;;
 18685                           
 18686                           	psect	text75
 18687  0068DE                     __ptext75:
 18688                           	opt stack 0
 18689  0068DE                     _UARTConfig:
 18690                           	opt stack 18
 18691                           
 18692                           ;UARTConfig.h: 82: RCSTA1bits.SPEN = 0;
 18693                           
 18694                           ; BSR set to: 1
 18695                           ;incstack = 0
 18696  0068DE  9EAB               	bcf	4011,7,c	;volatile
 18697                           
 18698                           ;UARTConfig.h: 83: SPBRGH1 = 0;
 18699  0068E0  0E00               	movlw	0
 18700  0068E2  6EB0               	movwf	4016,c	;volatile
 18701                           
 18702                           ;UARTConfig.h: 84: SPBRG1 = 34;
 18703  0068E4  0E22               	movlw	34
 18704  0068E6  6EAF               	movwf	4015,c	;volatile
 18705                           
 18706                           ;UARTConfig.h: 85: ANSELCbits.ANSC6 = 0;
 18707  0068E8  010F               	movlb	15	; () banked
 18708  0068EA  9D3A               	bcf	58,6,b	;volatile
 18709                           
 18710                           ; BSR set to: 15
 18711                           ;UARTConfig.h: 86: ANSELCbits.ANSC7 = 0;
 18712  0068EC  010F               	movlb	15	; () banked
 18713  0068EE  9F3A               	bcf	58,7,b	;volatile
 18714                           
 18715                           ; BSR set to: 15
 18716                           ;UARTConfig.h: 87: TRISCbits.TRISC6 = 1;
 18717  0068F0  8C94               	bsf	3988,6,c	;volatile
 18718                           
 18719                           ; BSR set to: 15
 18720                           ;UARTConfig.h: 88: TRISCbits.TRISC7 = 1;
 18721  0068F2  8E94               	bsf	3988,7,c	;volatile
 18722                           
 18723                           ; BSR set to: 15
 18724                           ;UARTConfig.h: 89: TXSTA1bits.TX9 = 0;
 18725  0068F4  9CAC               	bcf	4012,6,c	;volatile
 18726                           
 18727                           ; BSR set to: 15
 18728                           ;UARTConfig.h: 90: TXSTA1bits.SYNC = 0;
 18729  0068F6  98AC               	bcf	4012,4,c	;volatile
 18730                           
 18731                           ; BSR set to: 15
 18732                           ;UARTConfig.h: 91: TXSTA1bits.SENDB = 0;
 18733  0068F8  96AC               	bcf	4012,3,c	;volatile
 18734                           
 18735                           ; BSR set to: 15
 18736                           ;UARTConfig.h: 92: TXSTA1bits.BRGH = 1;
 18737  0068FA  84AC               	bsf	4012,2,c	;volatile
 18738                           
 18739                           ; BSR set to: 15
 18740                           ;UARTConfig.h: 93: RCSTA1bits.RX9 = 0;
 18741  0068FC  9CAB               	bcf	4011,6,c	;volatile
 18742                           
 18743                           ; BSR set to: 15
 18744                           ;UARTConfig.h: 94: BAUDCON1bits.DTRXP = 0;
 18745  0068FE  9AB8               	bcf	4024,5,c	;volatile
 18746                           
 18747                           ; BSR set to: 15
 18748                           ;UARTConfig.h: 95: BAUDCON1bits.CKTXP = 0;
 18749  006900  98B8               	bcf	4024,4,c	;volatile
 18750                           
 18751                           ; BSR set to: 15
 18752                           ;UARTConfig.h: 96: BAUDCON1bits.BRG16 = 1;
 18753  006902  86B8               	bsf	4024,3,c	;volatile
 18754                           
 18755                           ; BSR set to: 15
 18756                           ;UARTConfig.h: 97: BAUDCON1bits.WUE = 0;
 18757  006904  92B8               	bcf	4024,1,c	;volatile
 18758                           
 18759                           ; BSR set to: 15
 18760                           ;UARTConfig.h: 98: BAUDCON1bits.ABDEN = 0;
 18761  006906  90B8               	bcf	4024,0,c	;volatile
 18762                           
 18763                           ; BSR set to: 15
 18764                           ;UARTConfig.h: 99: RCSTA1bits.CREN = 1;
 18765  006908  88AB               	bsf	4011,4,c	;volatile
 18766                           
 18767                           ; BSR set to: 15
 18768                           ;UARTConfig.h: 100: TXSTA1bits.TXEN = 1;
 18769  00690A  8AAC               	bsf	4012,5,c	;volatile
 18770                           
 18771                           ; BSR set to: 15
 18772                           ;UARTConfig.h: 101: IPR1bits.RC1IP = 0;
 18773  00690C  9A9F               	bcf	3999,5,c	;volatile
 18774                           
 18775                           ; BSR set to: 15
 18776                           ;UARTConfig.h: 102: PIR1bits.RC1IF = 0;
 18777  00690E  9A9E               	bcf	3998,5,c	;volatile
 18778                           
 18779                           ; BSR set to: 15
 18780                           ;UARTConfig.h: 103: PIE1bits.RC1IE = 1;
 18781  006910  8A9D               	bsf	3997,5,c	;volatile
 18782                           
 18783                           ; BSR set to: 15
 18784                           ;UARTConfig.h: 104: RCSTA1bits.SPEN = 1;
 18785  006912  8EAB               	bsf	4011,7,c	;volatile
 18786                           
 18787                           ; BSR set to: 15
 18788  006914  0012               	return		;funcret
 18789  006916                     __end_of_UARTConfig:
 18790                           	opt stack 0
 18791                           tblptru	equ	0xFF8
 18792                           tblptrh	equ	0xFF7
 18793                           tblptrl	equ	0xFF6
 18794                           tablat	equ	0xFF5
 18795                           prodh	equ	0xFF4
 18796                           prodl	equ	0xFF3
 18797                           intcon	equ	0xFF2
 18798                           postinc0	equ	0xFEE
 18799                           wreg	equ	0xFE8
 18800                           postdec1	equ	0xFE5
 18801                           fsr1l	equ	0xFE1
 18802                           indf2	equ	0xFDF
 18803                           postinc2	equ	0xFDE
 18804                           postdec2	equ	0xFDD
 18805                           plusw2	equ	0xFDB
 18806                           fsr2h	equ	0xFDA
 18807                           fsr2l	equ	0xFD9
 18808                           status	equ	0xFD8
 18809                           
 18810 ;; *************** function _PWM2Config *****************
 18811 ;; Defined at:
 18812 ;;		line 116 in file "source/PWMConfig.h"
 18813 ;; Parameters:    Size  Location     Type
 18814 ;;		None
 18815 ;; Auto vars:     Size  Location     Type
 18816 ;;		None
 18817 ;; Return value:  Size  Location     Type
 18818 ;;                  1    wreg      void 
 18819 ;; Registers used:
 18820 ;;		wreg, status,2, status,0, cstack
 18821 ;; Tracked objects:
 18822 ;;		On entry : 0/0
 18823 ;;		On exit  : 0/0
 18824 ;;		Unchanged: 0/0
 18825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18826 ;;      Params:         0       0       0       0       0       0       0
 18827 ;;      Locals:         0       0       0       0       0       0       0
 18828 ;;      Temps:          0       0       0       0       0       0       0
 18829 ;;      Totals:         0       0       0       0       0       0       0
 18830 ;;Total ram usage:        0 bytes
 18831 ;; Hardware stack levels used:    1
 18832 ;; Hardware stack levels required when called:   13
 18833 ;; This function calls:
 18834 ;;		_setPWM2duty
 18835 ;;		_t2config
 18836 ;; This function is called by:
 18837 ;;		_main
 18838 ;; This function uses a non-reentrant model
 18839 ;;
 18840                           
 18841                           	psect	text76
 18842  0064D6                     __ptext76:
 18843                           	opt stack 0
 18844  0064D6                     _PWM2Config:
 18845                           	opt stack 17
 18846                           
 18847                           ;PWMConfig.h: 117: TRISCbits.TRISC0 = 1;
 18848                           
 18849                           ; BSR set to: 15
 18850                           ;incstack = 0
 18851  0064D6  8094               	bsf	3988,0,c	;volatile
 18852                           
 18853                           ;PWMConfig.h: 118: TRISCbits.TRISC1 = 1;
 18854  0064D8  8294               	bsf	3988,1,c	;volatile
 18855                           
 18856                           ;PWMConfig.h: 119: PSTR2CONbits.STR2A = 1;
 18857  0064DA  8063               	bsf	3939,0,c	;volatile
 18858                           
 18859                           ;PWMConfig.h: 120: PSTR2CONbits.STR2B = 1;
 18860  0064DC  8263               	bsf	3939,1,c	;volatile
 18861                           
 18862                           ;PWMConfig.h: 121: PSTR2CONbits.STR2C = 0;
 18863  0064DE  9463               	bcf	3939,2,c	;volatile
 18864                           
 18865                           ;PWMConfig.h: 122: PSTR2CONbits.STR2D = 0;
 18866  0064E0  9663               	bcf	3939,3,c	;volatile
 18867                           
 18868                           ;PWMConfig.h: 123: CCPTMRS0bits.C2TSEL = 0b00;
 18869  0064E2  0EE7               	movlw	-25
 18870  0064E4  010F               	movlb	15	; () banked
 18871  0064E6  1749               	andwf	73,f,b	;volatile
 18872                           
 18873                           ;PWMConfig.h: 124: PR2 = 199;
 18874  0064E8  0EC7               	movlw	199
 18875  0064EA  6EBB               	movwf	4027,c	;volatile
 18876                           
 18877                           ; BSR set to: 15
 18878                           ;PWMConfig.h: 125: ECCP2ASbits.CCP2AS = 0b000;
 18879  0064EC  9864               	bcf	3940,4,c	;volatile
 18880  0064EE  9A64               	bcf	3940,5,c	;volatile
 18881  0064F0  9C64               	bcf	3940,6,c	;volatile
 18882                           
 18883                           ;PWMConfig.h: 126: ECCP2ASbits.PSS2AC = 0b00;
 18884  0064F2  0EF3               	movlw	-13
 18885  0064F4  1664               	andwf	3940,f,c	;volatile
 18886                           
 18887                           ;PWMConfig.h: 127: ECCP2ASbits.PSS2BD = 0b00;
 18888  0064F6  0EFC               	movlw	-4
 18889  0064F8  1664               	andwf	3940,f,c	;volatile
 18890                           
 18891                           ; BSR set to: 15
 18892                           ;PWMConfig.h: 128: PWM2CONbits.P2RSEN = 0;
 18893  0064FA  9E65               	bcf	3941,7,c	;volatile
 18894                           
 18895                           ;PWMConfig.h: 129: ECCP2ASbits.CCP2AS = 1;
 18896  0064FC  5064               	movf	3940,w,c	;volatile
 18897  0064FE  0B8F               	andlw	-113
 18898  006500  0910               	iorlw	16
 18899  006502  6E64               	movwf	3940,c	;volatile
 18900                           
 18901                           ;PWMConfig.h: 130: CCP2CONbits.P2M = 0b10;
 18902  006504  5066               	movf	3942,w,c	;volatile
 18903  006506  0B3F               	andlw	-193
 18904  006508  0980               	iorlw	128
 18905  00650A  6E66               	movwf	3942,c	;volatile
 18906                           
 18907                           ;PWMConfig.h: 131: CCP2CONbits.CCP2M = 0b1100;
 18908  00650C  5066               	movf	3942,w,c	;volatile
 18909  00650E  0BF0               	andlw	-16
 18910  006510  090C               	iorlw	12
 18911  006512  6E66               	movwf	3942,c	;volatile
 18912                           
 18913                           ; BSR set to: 15
 18914                           ;PWMConfig.h: 132: setPWM2duty(0);
 18915  006514  0E00               	movlw	0
 18916  006516  0101               	movlb	1	; () banked
 18917  006518  6F01               	movwf	(setPWM2duty@actuator+1)& (0+255),b
 18918  00651A  0E00               	movlw	0
 18919  00651C  6F00               	movwf	setPWM2duty@actuator& (0+255),b
 18920  00651E  EC6F  F02D         	call	_setPWM2duty	;wreg free
 18921                           
 18922                           ;PWMConfig.h: 133: PWM2CONbits.P2DC = 16;
 18923  006522  9065               	bcf	3941,0,c	;volatile
 18924  006524  9265               	bcf	3941,1,c	;volatile
 18925  006526  9465               	bcf	3941,2,c	;volatile
 18926  006528  9665               	bcf	3941,3,c	;volatile
 18927  00652A  8865               	bsf	3941,4,c	;volatile
 18928  00652C  9A65               	bcf	3941,5,c	;volatile
 18929  00652E  9C65               	bcf	3941,6,c	;volatile
 18930                           
 18931                           ;PWMConfig.h: 134: t2config();
 18932  006530  ECD9  F035         	call	_t2config	;wreg free
 18933                           
 18934                           ;PWMConfig.h: 135: TRISCbits.TRISC0 = 0;
 18935  006534  9094               	bcf	3988,0,c	;volatile
 18936                           
 18937                           ;PWMConfig.h: 136: TRISCbits.TRISC1 = 0;
 18938  006536  9294               	bcf	3988,1,c	;volatile
 18939                           
 18940                           ;PWMConfig.h: 137: ECCP2ASbits.CCP2ASE = 0;
 18941  006538  9E64               	bcf	3940,7,c	;volatile
 18942  00653A  0012               	return		;funcret
 18943  00653C                     __end_of_PWM2Config:
 18944                           	opt stack 0
 18945                           tblptru	equ	0xFF8
 18946                           tblptrh	equ	0xFF7
 18947                           tblptrl	equ	0xFF6
 18948                           tablat	equ	0xFF5
 18949                           prodh	equ	0xFF4
 18950                           prodl	equ	0xFF3
 18951                           intcon	equ	0xFF2
 18952                           postinc0	equ	0xFEE
 18953                           wreg	equ	0xFE8
 18954                           postdec1	equ	0xFE5
 18955                           fsr1l	equ	0xFE1
 18956                           indf2	equ	0xFDF
 18957                           postinc2	equ	0xFDE
 18958                           postdec2	equ	0xFDD
 18959                           plusw2	equ	0xFDB
 18960                           fsr2h	equ	0xFDA
 18961                           fsr2l	equ	0xFD9
 18962                           status	equ	0xFD8
 18963                           
 18964 ;; *************** function _t2config *****************
 18965 ;; Defined at:
 18966 ;;		line 23 in file "source/PWMConfig.h"
 18967 ;; Parameters:    Size  Location     Type
 18968 ;;		None
 18969 ;; Auto vars:     Size  Location     Type
 18970 ;;		None
 18971 ;; Return value:  Size  Location     Type
 18972 ;;                  1    wreg      void 
 18973 ;; Registers used:
 18974 ;;		wreg, status,2
 18975 ;; Tracked objects:
 18976 ;;		On entry : 0/0
 18977 ;;		On exit  : 0/0
 18978 ;;		Unchanged: 0/0
 18979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18980 ;;      Params:         0       0       0       0       0       0       0
 18981 ;;      Locals:         0       0       0       0       0       0       0
 18982 ;;      Temps:          0       0       0       0       0       0       0
 18983 ;;      Totals:         0       0       0       0       0       0       0
 18984 ;;Total ram usage:        0 bytes
 18985 ;; Hardware stack levels used:    1
 18986 ;; Hardware stack levels required when called:   12
 18987 ;; This function calls:
 18988 ;;		Nothing
 18989 ;; This function is called by:
 18990 ;;		_PWM2Config
 18991 ;; This function uses a non-reentrant model
 18992 ;;
 18993                           
 18994                           	psect	text77
 18995  006BB2                     __ptext77:
 18996                           	opt stack 0
 18997  006BB2                     _t2config:
 18998                           	opt stack 17
 18999                           
 19000                           ;PWMConfig.h: 24: T2CONbits.TMR2ON = 0;
 19001                           
 19002                           ;incstack = 0
 19003  006BB2  94BA               	bcf	4026,2,c	;volatile
 19004                           
 19005                           ;PWMConfig.h: 25: T2CONbits.T2CKPS = 0b00;
 19006  006BB4  0EFC               	movlw	-4
 19007  006BB6  16BA               	andwf	4026,f,c	;volatile
 19008                           
 19009                           ;PWMConfig.h: 26: T2CONbits.T2OUTPS = 0b1111;
 19010  006BB8  86BA               	bsf	4026,3,c	;volatile
 19011  006BBA  88BA               	bsf	4026,4,c	;volatile
 19012  006BBC  8ABA               	bsf	4026,5,c	;volatile
 19013  006BBE  8CBA               	bsf	4026,6,c	;volatile
 19014                           
 19015                           ;PWMConfig.h: 28: PIR1bits.TMR2IF = 0;
 19016  006BC0  929E               	bcf	3998,1,c	;volatile
 19017                           
 19018                           ;PWMConfig.h: 29: IPR1bits.TMR2IP = 0;
 19019  006BC2  929F               	bcf	3999,1,c	;volatile
 19020                           
 19021                           ;PWMConfig.h: 30: PIE1bits.TMR2IE = 1;
 19022  006BC4  829D               	bsf	3997,1,c	;volatile
 19023                           
 19024                           ;PWMConfig.h: 31: T2CONbits.TMR2ON = 1;
 19025  006BC6  84BA               	bsf	4026,2,c	;volatile
 19026  006BC8  0012               	return		;funcret
 19027  006BCA                     __end_of_t2config:
 19028                           	opt stack 0
 19029                           tblptru	equ	0xFF8
 19030                           tblptrh	equ	0xFF7
 19031                           tblptrl	equ	0xFF6
 19032                           tablat	equ	0xFF5
 19033                           prodh	equ	0xFF4
 19034                           prodl	equ	0xFF3
 19035                           intcon	equ	0xFF2
 19036                           postinc0	equ	0xFEE
 19037                           wreg	equ	0xFE8
 19038                           postdec1	equ	0xFE5
 19039                           fsr1l	equ	0xFE1
 19040                           indf2	equ	0xFDF
 19041                           postinc2	equ	0xFDE
 19042                           postdec2	equ	0xFDD
 19043                           plusw2	equ	0xFDB
 19044                           fsr2h	equ	0xFDA
 19045                           fsr2l	equ	0xFD9
 19046                           status	equ	0xFD8
 19047                           
 19048 ;; *************** function _setPWM2duty *****************
 19049 ;; Defined at:
 19050 ;;		line 34 in file "source/PWMConfig.h"
 19051 ;; Parameters:    Size  Location     Type
 19052 ;;  actuator        2    0[BANK1 ] short 
 19053 ;; Auto vars:     Size  Location     Type
 19054 ;;  act             2    4[BANK1 ] short 
 19055 ;; Return value:  Size  Location     Type
 19056 ;;                  1    wreg      void 
 19057 ;; Registers used:
 19058 ;;		wreg, status,2, status,0
 19059 ;; Tracked objects:
 19060 ;;		On entry : 0/0
 19061 ;;		On exit  : 0/0
 19062 ;;		Unchanged: 0/0
 19063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19064 ;;      Params:         0       0       2       0       0       0       0
 19065 ;;      Locals:         0       0       2       0       0       0       0
 19066 ;;      Temps:          0       0       2       0       0       0       0
 19067 ;;      Totals:         0       0       6       0       0       0       0
 19068 ;;Total ram usage:        6 bytes
 19069 ;; Hardware stack levels used:    1
 19070 ;; Hardware stack levels required when called:   12
 19071 ;; This function calls:
 19072 ;;		Nothing
 19073 ;; This function is called by:
 19074 ;;		_PWM2Config
 19075 ;;		_pressENTER
 19076 ;;		_longPressENTER
 19077 ;;		_main
 19078 ;; This function uses a non-reentrant model
 19079 ;;
 19080                           
 19081                           	psect	text78
 19082  005ADE                     __ptext78:
 19083                           	opt stack 0
 19084  005ADE                     _setPWM2duty:
 19085                           	opt stack 18
 19086                           
 19087                           ;PWMConfig.h: 35: short act = 400;
 19088                           
 19089                           ;incstack = 0
 19090  005ADE  0E01               	movlw	1
 19091  005AE0  0101               	movlb	1	; () banked
 19092  005AE2  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19093  005AE4  0E90               	movlw	144
 19094  005AE6  6F04               	movwf	setPWM2duty@act& (0+255),b
 19095                           
 19096                           ; BSR set to: 1
 19097                           ;PWMConfig.h: 36: if(actuator > 400)
 19098  005AE8  0101               	movlb	1	; () banked
 19099  005AEA  BF01               	btfsc	(setPWM2duty@actuator+1)& (0+255),7,b
 19100  005AEC  D00D               	goto	l10533
 19101  005AEE  0E91               	movlw	145
 19102  005AF0  0101               	movlb	1	; () banked
 19103  005AF2  5D00               	subwf	setPWM2duty@actuator& (0+255),w,b
 19104  005AF4  0E01               	movlw	1
 19105  005AF6  0101               	movlb	1	; () banked
 19106  005AF8  5901               	subwfb	(setPWM2duty@actuator+1)& (0+255),w,b
 19107  005AFA  A0D8               	btfss	status,0,c
 19108  005AFC  D005               	goto	l10533
 19109                           
 19110                           ; BSR set to: 1
 19111                           ;PWMConfig.h: 37: act = 800;
 19112  005AFE  0E03               	movlw	3
 19113  005B00  0101               	movlb	1	; () banked
 19114  005B02  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19115  005B04  0E20               	movlw	32
 19116  005B06  D00F               	goto	L7
 19117  005B08                     l10533:
 19118                           
 19119                           ; BSR set to: 1
 19120                           ;PWMConfig.h: 38: else if(actuator < -400)
 19121  005B08  0101               	movlb	1	; () banked
 19122  005B0A  AF01               	btfss	(setPWM2duty@actuator+1)& (0+255),7,b
 19123  005B0C  D00E               	goto	l10537
 19124  005B0E  0E70               	movlw	112
 19125  005B10  0101               	movlb	1	; () banked
 19126  005B12  5D00               	subwf	setPWM2duty@actuator& (0+255),w,b
 19127  005B14  0EFE               	movlw	254
 19128  005B16  0101               	movlb	1	; () banked
 19129  005B18  5901               	subwfb	(setPWM2duty@actuator+1)& (0+255),w,b
 19130  005B1A  B0D8               	btfsc	status,0,c
 19131  005B1C  D006               	goto	l10537
 19132                           
 19133                           ; BSR set to: 1
 19134                           ;PWMConfig.h: 39: act = 0;
 19135  005B1E  0E00               	movlw	0
 19136  005B20  0101               	movlb	1	; () banked
 19137  005B22  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19138  005B24  0E00               	movlw	0
 19139  005B26                     L7:
 19140  005B26  6F04               	movwf	setPWM2duty@act& (0+255),b
 19141  005B28  D00A               	goto	l476
 19142  005B2A                     l10537:
 19143                           
 19144                           ; BSR set to: 1
 19145                           ;PWMConfig.h: 40: else
 19146                           ;PWMConfig.h: 41: act = actuator + 400;
 19147  005B2A  0E90               	movlw	144
 19148  005B2C  0101               	movlb	1	; () banked
 19149  005B2E  2500               	addwf	setPWM2duty@actuator& (0+255),w,b
 19150  005B30  0101               	movlb	1	; () banked
 19151  005B32  6F04               	movwf	setPWM2duty@act& (0+255),b
 19152  005B34  0E01               	movlw	1
 19153  005B36  0101               	movlb	1	; () banked
 19154  005B38  2101               	addwfc	(setPWM2duty@actuator+1)& (0+255),w,b
 19155  005B3A  0101               	movlb	1	; () banked
 19156  005B3C  6F05               	movwf	(setPWM2duty@act+1)& (0+255),b
 19157  005B3E                     l476:
 19158                           
 19159                           ; BSR set to: 1
 19160                           ;PWMConfig.h: 42: CCP2CONbits.DC2B = act;
 19161  005B3E  C104  F102         	movff	setPWM2duty@act,??_setPWM2duty
 19162  005B42  0101               	movlb	1	; () banked
 19163  005B44  3B02               	swapf	??_setPWM2duty& (0+255),f,b
 19164  005B46  5066               	movf	3942,w,c	;volatile
 19165  005B48  0101               	movlb	1	; () banked
 19166  005B4A  1902               	xorwf	??_setPWM2duty& (0+255),w,b
 19167  005B4C  0BCF               	andlw	-49
 19168  005B4E  1902               	xorwf	??_setPWM2duty& (0+255),w,b
 19169  005B50  6E66               	movwf	3942,c	;volatile
 19170                           
 19171                           ;PWMConfig.h: 43: CCPR2L = act>>2;
 19172  005B52  C104  F102         	movff	setPWM2duty@act,??_setPWM2duty
 19173  005B56  C105  F103         	movff	setPWM2duty@act+1,??_setPWM2duty+1
 19174  005B5A  0101               	movlb	1	; () banked
 19175  005B5C  3503               	rlcf	(??_setPWM2duty+1)& (0+255),w,b
 19176  005B5E  3303               	rrcf	(??_setPWM2duty+1)& (0+255),f,b
 19177  005B60  3302               	rrcf	??_setPWM2duty& (0+255),f,b
 19178  005B62  0101               	movlb	1	; () banked
 19179  005B64  3503               	rlcf	(??_setPWM2duty+1)& (0+255),w,b
 19180  005B66  3303               	rrcf	(??_setPWM2duty+1)& (0+255),f,b
 19181  005B68  3302               	rrcf	??_setPWM2duty& (0+255),f,b
 19182  005B6A  0101               	movlb	1	; () banked
 19183  005B6C  5102               	movf	??_setPWM2duty& (0+255),w,b
 19184  005B6E  6E67               	movwf	3943,c	;volatile
 19185                           
 19186                           ; BSR set to: 1
 19187  005B70  0012               	return		;funcret
 19188  005B72                     __end_of_setPWM2duty:
 19189                           	opt stack 0
 19190                           tblptru	equ	0xFF8
 19191                           tblptrh	equ	0xFF7
 19192                           tblptrl	equ	0xFF6
 19193                           tablat	equ	0xFF5
 19194                           prodh	equ	0xFF4
 19195                           prodl	equ	0xFF3
 19196                           intcon	equ	0xFF2
 19197                           postinc0	equ	0xFEE
 19198                           wreg	equ	0xFE8
 19199                           postdec1	equ	0xFE5
 19200                           fsr1l	equ	0xFE1
 19201                           indf2	equ	0xFDF
 19202                           postinc2	equ	0xFDE
 19203                           postdec2	equ	0xFDD
 19204                           plusw2	equ	0xFDB
 19205                           fsr2h	equ	0xFDA
 19206                           fsr2l	equ	0xFD9
 19207                           status	equ	0xFD8
 19208                           
 19209 ;; *************** function _EEPROMConfig *****************
 19210 ;; Defined at:
 19211 ;;		line 71 in file "source/sysParams.h"
 19212 ;; Parameters:    Size  Location     Type
 19213 ;;		None
 19214 ;; Auto vars:     Size  Location     Type
 19215 ;;		None
 19216 ;; Return value:  Size  Location     Type
 19217 ;;                  1    wreg      void 
 19218 ;; Registers used:
 19219 ;;		None
 19220 ;; Tracked objects:
 19221 ;;		On entry : 0/0
 19222 ;;		On exit  : 0/0
 19223 ;;		Unchanged: 0/0
 19224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19225 ;;      Params:         0       0       0       0       0       0       0
 19226 ;;      Locals:         0       0       0       0       0       0       0
 19227 ;;      Temps:          0       0       0       0       0       0       0
 19228 ;;      Totals:         0       0       0       0       0       0       0
 19229 ;;Total ram usage:        0 bytes
 19230 ;; Hardware stack levels used:    1
 19231 ;; Hardware stack levels required when called:   12
 19232 ;; This function calls:
 19233 ;;		Nothing
 19234 ;; This function is called by:
 19235 ;;		_main
 19236 ;; This function uses a non-reentrant model
 19237 ;;
 19238                           
 19239                           	psect	text79
 19240  006C8E                     __ptext79:
 19241                           	opt stack 0
 19242  006C8E                     _EEPROMConfig:
 19243                           	opt stack 18
 19244                           
 19245                           ;sysParams.h: 72: EECON1bits.WREN = 0;
 19246                           
 19247                           ; BSR set to: 1
 19248                           ;incstack = 0
 19249  006C8E  94A6               	bcf	4006,2,c	;volatile
 19250                           
 19251                           ;sysParams.h: 73: EECON1bits.FREE = 0;
 19252  006C90  98A6               	bcf	4006,4,c	;volatile
 19253  006C92  0012               	return		;funcret
 19254  006C94                     __end_of_EEPROMConfig:
 19255                           	opt stack 0
 19256                           tblptru	equ	0xFF8
 19257                           tblptrh	equ	0xFF7
 19258                           tblptrl	equ	0xFF6
 19259                           tablat	equ	0xFF5
 19260                           prodh	equ	0xFF4
 19261                           prodl	equ	0xFF3
 19262                           intcon	equ	0xFF2
 19263                           postinc0	equ	0xFEE
 19264                           wreg	equ	0xFE8
 19265                           postdec1	equ	0xFE5
 19266                           fsr1l	equ	0xFE1
 19267                           indf2	equ	0xFDF
 19268                           postinc2	equ	0xFDE
 19269                           postdec2	equ	0xFDD
 19270                           plusw2	equ	0xFDB
 19271                           fsr2h	equ	0xFDA
 19272                           fsr2l	equ	0xFD9
 19273                           status	equ	0xFD8
 19274                           
 19275 ;; *************** function _isr *****************
 19276 ;; Defined at:
 19277 ;;		line 21 in file "source/main.c"
 19278 ;; Parameters:    Size  Location     Type
 19279 ;;		None
 19280 ;; Auto vars:     Size  Location     Type
 19281 ;;		None
 19282 ;; Return value:  Size  Location     Type
 19283 ;;                  1    wreg      void 
 19284 ;; Registers used:
 19285 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19286 ;; Tracked objects:
 19287 ;;		On entry : 0/0
 19288 ;;		On exit  : 0/0
 19289 ;;		Unchanged: 0/0
 19290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19291 ;;      Params:         0       0       0       0       0       0       0
 19292 ;;      Locals:         0       0       0       0       0       0       0
 19293 ;;      Temps:          0      17       0       0       0       0       0
 19294 ;;      Totals:         0      17       0       0       0       0       0
 19295 ;;Total ram usage:       17 bytes
 19296 ;; Hardware stack levels used:    1
 19297 ;; Hardware stack levels required when called:   11
 19298 ;; This function calls:
 19299 ;;		_T2int
 19300 ;;		_UARTint
 19301 ;; This function is called by:
 19302 ;;		Interrupt level 1
 19303 ;; This function uses a non-reentrant model
 19304 ;;
 19305                           
 19306                           	psect	intcodelo
 19307  000018                     __pintcodelo:
 19308                           	opt stack 0
 19309  000018                     _isr:
 19310                           	opt stack 9
 19311                           
 19312                           ;incstack = 0
 19313  000018  8050               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 19314  00001A  CFD8 F094          	movff	status,??_isr
 19315  00001E  CFE8 F095          	movff	wreg,??_isr+1
 19316  000022  CFE0 F096          	movff	bsr,??_isr+2
 19317  000026  CFFA F097          	movff	pclath,??_isr+3
 19318  00002A  CFFB F098          	movff	pclatu,??_isr+4
 19319  00002E  CFE9 F099          	movff	fsr0l,??_isr+5
 19320  000032  CFEA F09A          	movff	fsr0h,??_isr+6
 19321  000036  CFE1 F09B          	movff	fsr1l,??_isr+7
 19322  00003A  CFE2 F09C          	movff	fsr1h,??_isr+8
 19323  00003E  CFD9 F09D          	movff	fsr2l,??_isr+9
 19324  000042  CFDA F09E          	movff	fsr2h,??_isr+10
 19325  000046  CFF3 F09F          	movff	prodl,??_isr+11
 19326  00004A  CFF4 F0A0          	movff	prodh,??_isr+12
 19327  00004E  CFF6 F0A1          	movff	tblptrl,??_isr+13
 19328  000052  CFF7 F0A2          	movff	tblptrh,??_isr+14
 19329  000056  CFF8 F0A3          	movff	tblptru,??_isr+15
 19330  00005A  CFF5 F0A4          	movff	tablat,??_isr+16
 19331                           
 19332                           ;main.c: 22: if(PIE1bits.RC1IE && PIR1bits.RC1IF) {
 19333  00005E  BA9D               	btfsc	3997,5,c	;volatile
 19334  000060  AA9E               	btfss	3998,5,c	;volatile
 19335  000062  D003               	goto	i1l12581
 19336                           
 19337                           ;main.c: 23: UARTint();
 19338  000064  EC30  F020         	call	_UARTint	;wreg free
 19339                           
 19340                           ;main.c: 24: PIR1bits.RC1IF = 0;
 19341  000068  9A9E               	bcf	3998,5,c	;volatile
 19342  00006A                     i1l12581:
 19343                           
 19344                           ;main.c: 25: }
 19345                           ;main.c: 26: if(PIE1bits.TMR2IE && PIR1bits.TMR2IF) {
 19346  00006A  B29D               	btfsc	3997,1,c	;volatile
 19347  00006C  A29E               	btfss	3998,1,c	;volatile
 19348  00006E  D003               	goto	i1l881
 19349                           
 19350                           ;main.c: 27: T2int();
 19351  000070  EC75  F018         	call	_T2int	;wreg free
 19352                           
 19353                           ;main.c: 28: PIR1bits.TMR2IF = 0;
 19354  000074  929E               	bcf	3998,1,c	;volatile
 19355  000076                     i1l881:
 19356  000076  C0A4  FFF5         	movff	??_isr+16,tablat
 19357  00007A  C0A3  FFF8         	movff	??_isr+15,tblptru
 19358  00007E  C0A2  FFF7         	movff	??_isr+14,tblptrh
 19359  000082  C0A1  FFF6         	movff	??_isr+13,tblptrl
 19360  000086  C0A0  FFF4         	movff	??_isr+12,prodh
 19361  00008A  C09F  FFF3         	movff	??_isr+11,prodl
 19362  00008E  C09E  FFDA         	movff	??_isr+10,fsr2h
 19363  000092  C09D  FFD9         	movff	??_isr+9,fsr2l
 19364  000096  C09C  FFE2         	movff	??_isr+8,fsr1h
 19365  00009A  C09B  FFE1         	movff	??_isr+7,fsr1l
 19366  00009E  C09A  FFEA         	movff	??_isr+6,fsr0h
 19367  0000A2  C099  FFE9         	movff	??_isr+5,fsr0l
 19368  0000A6  C098  FFFB         	movff	??_isr+4,pclatu
 19369  0000AA  C097  FFFA         	movff	??_isr+3,pclath
 19370  0000AE  C096  FFE0         	movff	??_isr+2,bsr
 19371  0000B2  C095  FFE8         	movff	??_isr+1,wreg
 19372  0000B6  C094  FFD8         	movff	??_isr,status
 19373  0000BA  9050               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 19374  0000BC  0010               	retfie	
 19375  0000BE                     __end_of_isr:
 19376                           	opt stack 0
 19377                           pclatu	equ	0xFFB
 19378                           pclath	equ	0xFFA
 19379                           tblptru	equ	0xFF8
 19380                           tblptrh	equ	0xFF7
 19381                           tblptrl	equ	0xFF6
 19382                           tablat	equ	0xFF5
 19383                           prodh	equ	0xFF4
 19384                           prodl	equ	0xFF3
 19385                           intcon	equ	0xFF2
 19386                           postinc0	equ	0xFEE
 19387                           fsr0h	equ	0xFEA
 19388                           fsr0l	equ	0xFE9
 19389                           wreg	equ	0xFE8
 19390                           postdec1	equ	0xFE5
 19391                           fsr1h	equ	0xFE2
 19392                           fsr1l	equ	0xFE1
 19393                           bsr	equ	0xFE0
 19394                           indf2	equ	0xFDF
 19395                           postinc2	equ	0xFDE
 19396                           postdec2	equ	0xFDD
 19397                           plusw2	equ	0xFDB
 19398                           fsr2h	equ	0xFDA
 19399                           fsr2l	equ	0xFD9
 19400                           status	equ	0xFD8
 19401                           
 19402 ;; *************** function _UARTint *****************
 19403 ;; Defined at:
 19404 ;;		line 11 in file "source/UARTConfig.h"
 19405 ;; Parameters:    Size  Location     Type
 19406 ;;		None
 19407 ;; Auto vars:     Size  Location     Type
 19408 ;;  sas             1   51[BANK0 ] unsigned char 
 19409 ;; Return value:  Size  Location     Type
 19410 ;;                  1    wreg      void 
 19411 ;; Registers used:
 19412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19413 ;; Tracked objects:
 19414 ;;		On entry : 0/0
 19415 ;;		On exit  : 0/0
 19416 ;;		Unchanged: 0/0
 19417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19418 ;;      Params:         0       0       0       0       0       0       0
 19419 ;;      Locals:         0       1       0       0       0       0       0
 19420 ;;      Temps:          0       0       0       0       0       0       0
 19421 ;;      Totals:         0       1       0       0       0       0       0
 19422 ;;Total ram usage:        1 bytes
 19423 ;; Hardware stack levels used:    1
 19424 ;; Hardware stack levels required when called:   10
 19425 ;; This function calls:
 19426 ;;		_loadSysParams
 19427 ;;		_putchUART
 19428 ;;		i1_longPressDOWN
 19429 ;;		i1_longPressENTER
 19430 ;;		i1_longPressRETRO
 19431 ;;		i1_longPressUP
 19432 ;;		i1_pressDOWN
 19433 ;;		i1_pressENTER
 19434 ;;		i1_pressRETRO
 19435 ;;		i1_pressUP
 19436 ;;		i1_saveSysParams
 19437 ;;		i1_sysParamInit
 19438 ;; This function is called by:
 19439 ;;		_isr
 19440 ;; This function uses a non-reentrant model
 19441 ;;
 19442                           
 19443                           	psect	text81
 19444  004060                     __ptext81:
 19445                           	opt stack 0
 19446  004060                     _UARTint:
 19447                           	opt stack 9
 19448                           
 19449                           ;UARTConfig.h: 12: char sas = RCREG1;
 19450                           
 19451                           ;incstack = 0
 19452  004060  CFAE F093          	movff	4014,UARTint@sas	;volatile
 19453                           
 19454                           ;UARTConfig.h: 13: if(sas == 'A') {
 19455  004064  0E41               	movlw	65
 19456  004066  0100               	movlb	0	; () banked
 19457  004068  1993               	xorwf	UARTint@sas& (0+255),w,b
 19458  00406A  A4D8               	btfss	status,2,c
 19459  00406C  D00D               	goto	i1l12211
 19460                           
 19461                           ; BSR set to: 0
 19462                           ;UARTConfig.h: 14: putchUART(actualScreen);
 19463  00406E  0101               	movlb	1	; () banked
 19464  004070  51BA               	movf	_actualScreen& (0+255),w,b
 19465  004072  EC1F  F036         	call	_putchUART
 19466                           
 19467                           ;UARTConfig.h: 15: putchUART(menuSection);
 19468  004076  0101               	movlb	1	; () banked
 19469  004078  51C1               	movf	_menuSection& (0+255),w,b
 19470  00407A  EC1F  F036         	call	_putchUART
 19471                           
 19472                           ;UARTConfig.h: 16: putchUART(passSection);
 19473  00407E  0101               	movlb	1	; () banked
 19474  004080  51C2               	movf	_passSection& (0+255),w,b
 19475  004082  EC1F  F036         	call	_putchUART
 19476                           
 19477                           ;UARTConfig.h: 17: }else if(sas == 'B') {
 19478  004086  0012               	return	
 19479  004088                     i1l12211:
 19480  004088  0E42               	movlw	66
 19481  00408A  0100               	movlb	0	; () banked
 19482  00408C  1993               	xorwf	UARTint@sas& (0+255),w,b
 19483  00408E  A4D8               	btfss	status,2,c
 19484  004090  D003               	goto	i1l12215
 19485                           
 19486                           ; BSR set to: 0
 19487                           ;UARTConfig.h: 18: saveSysParams();
 19488  004092  EC3F  F029         	call	i1_saveSysParams	;wreg free
 19489                           
 19490                           ;UARTConfig.h: 19: }else if(sas == 'C') {
 19491  004096  0012               	return	
 19492  004098                     i1l12215:
 19493  004098  0E43               	movlw	67
 19494  00409A  0100               	movlb	0	; () banked
 19495  00409C  1993               	xorwf	UARTint@sas& (0+255),w,b
 19496  00409E  A4D8               	btfss	status,2,c
 19497  0040A0  D003               	goto	i1l12219
 19498                           
 19499                           ; BSR set to: 0
 19500                           ;UARTConfig.h: 20: sysParamInit();
 19501  0040A2  EC98  F02B         	call	i1_sysParamInit	;wreg free
 19502                           
 19503                           ;UARTConfig.h: 21: }else if(sas == 'D') {
 19504  0040A6  0012               	return	
 19505  0040A8                     i1l12219:
 19506  0040A8  0E44               	movlw	68
 19507  0040AA  0100               	movlb	0	; () banked
 19508  0040AC  1993               	xorwf	UARTint@sas& (0+255),w,b
 19509  0040AE  A4D8               	btfss	status,2,c
 19510  0040B0  D003               	goto	i1l12223
 19511                           
 19512                           ; BSR set to: 0
 19513                           ;UARTConfig.h: 22: loadSysParams();
 19514  0040B2  ECC0  F033         	call	_loadSysParams	;wreg free
 19515                           
 19516                           ;UARTConfig.h: 23: }else if(sas == 'E') {
 19517  0040B6  0012               	return	
 19518  0040B8                     i1l12223:
 19519  0040B8  0E45               	movlw	69
 19520  0040BA  0100               	movlb	0	; () banked
 19521  0040BC  1993               	xorwf	UARTint@sas& (0+255),w,b
 19522  0040BE  B4D8               	btfsc	status,2,c
 19523  0040C0  0012               	return	
 19524                           
 19525                           ; BSR set to: 0
 19526                           ;UARTConfig.h: 57: else if(sas == 'R') {
 19527                           
 19528                           ; BSR set to: 0
 19529                           
 19530                           ; BSR set to: 0
 19531                           ;UARTConfig.h: 25: }
 19532  0040C2  0E52               	movlw	82
 19533  0040C4  0100               	movlb	0	; () banked
 19534  0040C6  1993               	xorwf	UARTint@sas& (0+255),w,b
 19535  0040C8  A4D8               	btfss	status,2,c
 19536  0040CA  D014               	goto	i1l12237
 19537                           
 19538                           ; BSR set to: 0
 19539                           ;UARTConfig.h: 58: if(actualScreen == 0) {
 19540  0040CC  0101               	movlb	1	; () banked
 19541  0040CE  51BA               	movf	_actualScreen& (0+255),w,b
 19542  0040D0  A4D8               	btfss	status,2,c
 19543  0040D2  D007               	goto	i1l12233
 19544                           
 19545                           ; BSR set to: 1
 19546                           ;UARTConfig.h: 59: actualScreen = 1;
 19547  0040D4  0E01               	movlw	1
 19548  0040D6  0101               	movlb	1	; () banked
 19549  0040D8  6FBA               	movwf	_actualScreen& (0+255),b
 19550                           
 19551                           ;UARTConfig.h: 60: fd = 0;
 19552  0040DA  0E00               	movlw	0
 19553  0040DC  0101               	movlb	1	; () banked
 19554  0040DE  6FBC               	movwf	_fd& (0+255),b
 19555                           
 19556                           ;UARTConfig.h: 61: }else if(actualScreen == 4)
 19557  0040E0  0012               	return	
 19558  0040E2                     i1l12233:
 19559                           
 19560                           ; BSR set to: 1
 19561  0040E2  0E04               	movlw	4
 19562  0040E4  0101               	movlb	1	; () banked
 19563  0040E6  19BA               	xorwf	_actualScreen& (0+255),w,b
 19564  0040E8  A4D8               	btfss	status,2,c
 19565  0040EA  0012               	return	
 19566                           
 19567                           ; BSR set to: 1
 19568                           ;UARTConfig.h: 62: actualScreen = 9;
 19569  0040EC  0E09               	movlw	9
 19570  0040EE  0101               	movlb	1	; () banked
 19571  0040F0  6FBA               	movwf	_actualScreen& (0+255),b
 19572                           
 19573                           ; BSR set to: 1
 19574                           ;UARTConfig.h: 63: }else if(sas == 'S')
 19575                           
 19576                           ; BSR set to: 1
 19577  0040F2  0012               	return	
 19578  0040F4                     i1l12237:
 19579  0040F4  0E53               	movlw	83
 19580  0040F6  0100               	movlb	0	; () banked
 19581  0040F8  1993               	xorwf	UARTint@sas& (0+255),w,b
 19582  0040FA  A4D8               	btfss	status,2,c
 19583  0040FC  D003               	goto	i1l12241
 19584                           
 19585                           ; BSR set to: 0
 19586                           ;UARTConfig.h: 64: pressUP();
 19587  0040FE  EC43  F021         	call	i1_pressUP	;wreg free
 19588  004102  0012               	return	
 19589  004104                     i1l12241:
 19590                           
 19591                           ;UARTConfig.h: 65: else if(sas == 'T')
 19592  004104  0E54               	movlw	84
 19593  004106  0100               	movlb	0	; () banked
 19594  004108  1993               	xorwf	UARTint@sas& (0+255),w,b
 19595  00410A  A4D8               	btfss	status,2,c
 19596  00410C  D003               	goto	i1l12245
 19597                           
 19598                           ; BSR set to: 0
 19599                           ;UARTConfig.h: 66: pressDOWN();
 19600  00410E  EC5D  F023         	call	i1_pressDOWN	;wreg free
 19601  004112  0012               	return	
 19602  004114                     i1l12245:
 19603                           
 19604                           ;UARTConfig.h: 67: else if(sas == 'U')
 19605  004114  0E55               	movlw	85
 19606  004116  0100               	movlb	0	; () banked
 19607  004118  1993               	xorwf	UARTint@sas& (0+255),w,b
 19608  00411A  A4D8               	btfss	status,2,c
 19609  00411C  D003               	goto	i1l12249
 19610                           
 19611                           ; BSR set to: 0
 19612                           ;UARTConfig.h: 68: pressRETRO();
 19613  00411E  ECD4  F02C         	call	i1_pressRETRO	;wreg free
 19614  004122  0012               	return	
 19615  004124                     i1l12249:
 19616                           
 19617                           ;UARTConfig.h: 69: else if(sas == 'V')
 19618  004124  0E56               	movlw	86
 19619  004126  0100               	movlb	0	; () banked
 19620  004128  1993               	xorwf	UARTint@sas& (0+255),w,b
 19621  00412A  A4D8               	btfss	status,2,c
 19622  00412C  D003               	goto	i1l12253
 19623                           
 19624                           ; BSR set to: 0
 19625                           ;UARTConfig.h: 70: pressENTER();
 19626  00412E  EC7F  F00E         	call	i1_pressENTER	;wreg free
 19627  004132  0012               	return	
 19628  004134                     i1l12253:
 19629                           
 19630                           ;UARTConfig.h: 71: else if(sas == 'W')
 19631  004134  0E57               	movlw	87
 19632  004136  0100               	movlb	0	; () banked
 19633  004138  1993               	xorwf	UARTint@sas& (0+255),w,b
 19634  00413A  A4D8               	btfss	status,2,c
 19635  00413C  D003               	goto	i1l12257
 19636                           
 19637                           ; BSR set to: 0
 19638                           ;UARTConfig.h: 72: longPressUP();
 19639  00413E  EC8F  F031         	call	i1_longPressUP	;wreg free
 19640  004142  0012               	return	
 19641  004144                     i1l12257:
 19642                           
 19643                           ;UARTConfig.h: 73: else if(sas == 'X')
 19644  004144  0E58               	movlw	88
 19645  004146  0100               	movlb	0	; () banked
 19646  004148  1993               	xorwf	UARTint@sas& (0+255),w,b
 19647  00414A  A4D8               	btfss	status,2,c
 19648  00414C  D003               	goto	i1l12261
 19649                           
 19650                           ; BSR set to: 0
 19651                           ;UARTConfig.h: 74: longPressDOWN();
 19652  00414E  EC60  F035         	call	i1_longPressDOWN	;wreg free
 19653  004152  0012               	return	
 19654  004154                     i1l12261:
 19655                           
 19656                           ;UARTConfig.h: 75: else if(sas == 'Y')
 19657  004154  0E59               	movlw	89
 19658  004156  0100               	movlb	0	; () banked
 19659  004158  1993               	xorwf	UARTint@sas& (0+255),w,b
 19660  00415A  A4D8               	btfss	status,2,c
 19661  00415C  D003               	goto	i1l12265
 19662                           
 19663                           ; BSR set to: 0
 19664                           ;UARTConfig.h: 76: longPressRETRO();
 19665  00415E  ECF6  F032         	call	i1_longPressRETRO	;wreg free
 19666  004162  0012               	return	
 19667  004164                     i1l12265:
 19668                           
 19669                           ;UARTConfig.h: 77: else if(sas == 'Z')
 19670  004164  0E5A               	movlw	90
 19671  004166  0100               	movlb	0	; () banked
 19672  004168  1993               	xorwf	UARTint@sas& (0+255),w,b
 19673  00416A  A4D8               	btfss	status,2,c
 19674  00416C  0012               	return	
 19675                           
 19676                           ; BSR set to: 0
 19677                           ;UARTConfig.h: 78: longPressENTER();
 19678  00416E  EC43  F00A         	call	i1_longPressENTER	;wreg free
 19679  004172  0012               	return	
 19680  004174                     __end_of_UARTint:
 19681                           	opt stack 0
 19682                           pclatu	equ	0xFFB
 19683                           pclath	equ	0xFFA
 19684                           tblptru	equ	0xFF8
 19685                           tblptrh	equ	0xFF7
 19686                           tblptrl	equ	0xFF6
 19687                           tablat	equ	0xFF5
 19688                           prodh	equ	0xFF4
 19689                           prodl	equ	0xFF3
 19690                           intcon	equ	0xFF2
 19691                           postinc0	equ	0xFEE
 19692                           fsr0h	equ	0xFEA
 19693                           fsr0l	equ	0xFE9
 19694                           wreg	equ	0xFE8
 19695                           postdec1	equ	0xFE5
 19696                           fsr1h	equ	0xFE2
 19697                           fsr1l	equ	0xFE1
 19698                           bsr	equ	0xFE0
 19699                           indf2	equ	0xFDF
 19700                           postinc2	equ	0xFDE
 19701                           postdec2	equ	0xFDD
 19702                           plusw2	equ	0xFDB
 19703                           fsr2h	equ	0xFDA
 19704                           fsr2l	equ	0xFD9
 19705                           status	equ	0xFD8
 19706                           
 19707 ;; *************** function i1_sysParamInit *****************
 19708 ;; Defined at:
 19709 ;;		line 163 in file "source/sysParams.h"
 19710 ;; Parameters:    Size  Location     Type
 19711 ;;		None
 19712 ;; Auto vars:     Size  Location     Type
 19713 ;;		None
 19714 ;; Return value:  Size  Location     Type
 19715 ;;                  1    wreg      void 
 19716 ;; Registers used:
 19717 ;;		wreg, status,2, status,0, cstack
 19718 ;; Tracked objects:
 19719 ;;		On entry : 0/0
 19720 ;;		On exit  : 0/0
 19721 ;;		Unchanged: 0/0
 19722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19723 ;;      Params:         0       0       0       0       0       0       0
 19724 ;;      Locals:         0       0       0       0       0       0       0
 19725 ;;      Temps:          0       0       0       0       0       0       0
 19726 ;;      Totals:         0       0       0       0       0       0       0
 19727 ;;Total ram usage:        0 bytes
 19728 ;; Hardware stack levels used:    1
 19729 ;; Hardware stack levels required when called:    7
 19730 ;; This function calls:
 19731 ;;		i1_calcSysVars
 19732 ;;		i1_readEEPROM
 19733 ;; This function is called by:
 19734 ;;		_UARTint
 19735 ;; This function uses a non-reentrant model
 19736 ;;
 19737                           
 19738                           	psect	text82
 19739  005730                     __ptext82:
 19740                           	opt stack 0
 19741  005730                     i1_sysParamInit:
 19742                           	opt stack 11
 19743                           
 19744                           ;sysParams.h: 166: fData.floatUB = readEEPROM(3);
 19745                           
 19746                           ;incstack = 0
 19747  005730  0E03               	movlw	3
 19748  005732  ECFB  F035         	call	i1_readEEPROM
 19749  005736  0100               	movlb	0	; () banked
 19750  005738  6FC6               	movwf	(_fData+2)& (0+255),b
 19751                           
 19752                           ;sysParams.h: 167: fData.floatHB = readEEPROM(4);
 19753  00573A  0E04               	movlw	4
 19754  00573C  ECFB  F035         	call	i1_readEEPROM
 19755  005740  0100               	movlb	0	; () banked
 19756  005742  6FC5               	movwf	(_fData+1)& (0+255),b
 19757                           
 19758                           ;sysParams.h: 168: fData.floatLB = readEEPROM(5);
 19759  005744  0E05               	movlw	5
 19760  005746  ECFB  F035         	call	i1_readEEPROM
 19761  00574A  0100               	movlb	0	; () banked
 19762  00574C  6FC4               	movwf	_fData& (0+255),b
 19763                           
 19764                           ; BSR set to: 0
 19765                           ;sysParams.h: 169: tiXcorte = fData.floatdat;
 19766  00574E  C0C4  F0B2         	movff	_fData,_tiXcorte
 19767  005752  C0C5  F0B3         	movff	_fData+1,_tiXcorte+1
 19768  005756  C0C6  F0B4         	movff	_fData+2,_tiXcorte+2
 19769                           
 19770                           ;sysParams.h: 170: i16Data.int16HB = readEEPROM(6);
 19771  00575A  0E06               	movlw	6
 19772  00575C  ECFB  F035         	call	i1_readEEPROM
 19773  005760  0100               	movlb	0	; () banked
 19774  005762  6FC8               	movwf	(_i16Data+1)& (0+255),b
 19775                           
 19776                           ;sysParams.h: 171: i16Data.int16LB = readEEPROM(7);
 19777  005764  0E07               	movlw	7
 19778  005766  ECFB  F035         	call	i1_readEEPROM
 19779  00576A  0100               	movlb	0	; () banked
 19780  00576C  6FC7               	movwf	_i16Data& (0+255),b
 19781                           
 19782                           ; BSR set to: 0
 19783                           ;sysParams.h: 172: numCortes = i16Data.int16dat;
 19784  00576E  C0C7  F0B8         	movff	_i16Data,_numCortes
 19785  005772  C0C8  F0B9         	movff	_i16Data+1,_numCortes+1
 19786                           
 19787                           ;sysParams.h: 174: fData.floatUB = readEEPROM(9);
 19788  005776  0E09               	movlw	9
 19789  005778  ECFB  F035         	call	i1_readEEPROM
 19790  00577C  0100               	movlb	0	; () banked
 19791  00577E  6FC6               	movwf	(_fData+2)& (0+255),b
 19792                           
 19793                           ;sysParams.h: 175: fData.floatHB = readEEPROM(10);
 19794  005780  0E0A               	movlw	10
 19795  005782  ECFB  F035         	call	i1_readEEPROM
 19796  005786  0100               	movlb	0	; () banked
 19797  005788  6FC5               	movwf	(_fData+1)& (0+255),b
 19798                           
 19799                           ;sysParams.h: 176: fData.floatLB = readEEPROM(11);
 19800  00578A  0E0B               	movlw	11
 19801  00578C  ECFB  F035         	call	i1_readEEPROM
 19802  005790  0100               	movlb	0	; () banked
 19803  005792  6FC4               	movwf	_fData& (0+255),b
 19804                           
 19805                           ; BSR set to: 0
 19806                           ;sysParams.h: 177: diamTubo = fData.floatdat;
 19807  005794  C0C4  F0A9         	movff	_fData,_diamTubo
 19808  005798  C0C5  F0AA         	movff	_fData+1,_diamTubo+1
 19809  00579C  C0C6  F0AB         	movff	_fData+2,_diamTubo+2
 19810                           
 19811                           ;sysParams.h: 184: fData.floatUB = readEEPROM(17);
 19812  0057A0  0E11               	movlw	17
 19813  0057A2  ECFB  F035         	call	i1_readEEPROM
 19814  0057A6  0100               	movlb	0	; () banked
 19815  0057A8  6FC6               	movwf	(_fData+2)& (0+255),b
 19816                           
 19817                           ;sysParams.h: 185: fData.floatHB = readEEPROM(18);
 19818  0057AA  0E12               	movlw	18
 19819  0057AC  ECFB  F035         	call	i1_readEEPROM
 19820  0057B0  0100               	movlb	0	; () banked
 19821  0057B2  6FC5               	movwf	(_fData+1)& (0+255),b
 19822                           
 19823                           ;sysParams.h: 186: fData.floatLB = readEEPROM(19);
 19824  0057B4  0E13               	movlw	19
 19825  0057B6  ECFB  F035         	call	i1_readEEPROM
 19826  0057BA  0100               	movlb	0	; () banked
 19827  0057BC  6FC4               	movwf	_fData& (0+255),b
 19828                           
 19829                           ; BSR set to: 0
 19830                           ;sysParams.h: 187: velocidadMasa = fData.floatdat;
 19831  0057BE  C0C4  F0B5         	movff	_fData,_velocidadMasa
 19832  0057C2  C0C5  F0B6         	movff	_fData+1,_velocidadMasa+1
 19833  0057C6  C0C6  F0B7         	movff	_fData+2,_velocidadMasa+2
 19834                           
 19835                           ; BSR set to: 0
 19836                           ;sysParams.h: 188: calcSysVars();
 19837  0057CA  EC36  F032         	call	i1_calcSysVars	;wreg free
 19838  0057CE  0012               	return		;funcret
 19839  0057D0                     __end_ofi1_sysParamInit:
 19840                           	opt stack 0
 19841                           pclatu	equ	0xFFB
 19842                           pclath	equ	0xFFA
 19843                           tblptru	equ	0xFF8
 19844                           tblptrh	equ	0xFF7
 19845                           tblptrl	equ	0xFF6
 19846                           tablat	equ	0xFF5
 19847                           prodh	equ	0xFF4
 19848                           prodl	equ	0xFF3
 19849                           intcon	equ	0xFF2
 19850                           postinc0	equ	0xFEE
 19851                           fsr0h	equ	0xFEA
 19852                           fsr0l	equ	0xFE9
 19853                           wreg	equ	0xFE8
 19854                           postdec1	equ	0xFE5
 19855                           fsr1h	equ	0xFE2
 19856                           fsr1l	equ	0xFE1
 19857                           bsr	equ	0xFE0
 19858                           indf2	equ	0xFDF
 19859                           postinc2	equ	0xFDE
 19860                           postdec2	equ	0xFDD
 19861                           plusw2	equ	0xFDB
 19862                           fsr2h	equ	0xFDA
 19863                           fsr2l	equ	0xFD9
 19864                           status	equ	0xFD8
 19865                           
 19866 ;; *************** function i1_readEEPROM *****************
 19867 ;; Defined at:
 19868 ;;		line 62 in file "source/sysParams.h"
 19869 ;; Parameters:    Size  Location     Type
 19870 ;;  adr             1    wreg     unsigned char 
 19871 ;; Auto vars:     Size  Location     Type
 19872 ;;  adr             1    0[BANK0 ] unsigned char 
 19873 ;; Return value:  Size  Location     Type
 19874 ;;                  1    wreg      unsigned char 
 19875 ;; Registers used:
 19876 ;;		wreg, status,2
 19877 ;; Tracked objects:
 19878 ;;		On entry : 0/0
 19879 ;;		On exit  : 0/0
 19880 ;;		Unchanged: 0/0
 19881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19882 ;;      Params:         0       0       0       0       0       0       0
 19883 ;;      Locals:         0       1       0       0       0       0       0
 19884 ;;      Temps:          0       0       0       0       0       0       0
 19885 ;;      Totals:         0       1       0       0       0       0       0
 19886 ;;Total ram usage:        1 bytes
 19887 ;; Hardware stack levels used:    1
 19888 ;; Hardware stack levels required when called:    4
 19889 ;; This function calls:
 19890 ;;		Nothing
 19891 ;; This function is called by:
 19892 ;;		i1_sysParamInit
 19893 ;; This function uses a non-reentrant model
 19894 ;;
 19895                           
 19896                           	psect	text83
 19897  006BF6                     __ptext83:
 19898                           	opt stack 0
 19899  006BF6                     i1_readEEPROM:
 19900                           	opt stack 13
 19901                           
 19902                           ;incstack = 0
 19903                           ;i1readEEPROM@adr stored from wreg
 19904  006BF6  0100               	movlb	0	; () banked
 19905  006BF8  6F60               	movwf	i1readEEPROM@adr& (0+255),b
 19906                           
 19907                           ;sysParams.h: 63: EEADR = adr;
 19908  006BFA  C060  FFA9         	movff	i1readEEPROM@adr,4009	;volatile
 19909                           
 19910                           ;sysParams.h: 64: EECON1bits.EEPGD = 0;
 19911  006BFE  9EA6               	bcf	4006,7,c	;volatile
 19912                           
 19913                           ;sysParams.h: 65: EECON1bits.CFGS = 0;
 19914  006C00  9CA6               	bcf	4006,6,c	;volatile
 19915                           
 19916                           ;sysParams.h: 66: EECON1bits.RD = 1;
 19917  006C02  80A6               	bsf	4006,0,c	;volatile
 19918  006C04                     i1l281:
 19919  006C04  B0A6               	btfsc	4006,0,c	;volatile
 19920  006C06  D7FE               	goto	i1l281
 19921                           
 19922                           ;sysParams.h: 68: return EEDATA;
 19923  006C08  50A8               	movf	4008,w,c	;volatile
 19924  006C0A  0012               	return		;funcret
 19925  006C0C                     __end_ofi1_readEEPROM:
 19926                           	opt stack 0
 19927                           pclatu	equ	0xFFB
 19928                           pclath	equ	0xFFA
 19929                           tblptru	equ	0xFF8
 19930                           tblptrh	equ	0xFF7
 19931                           tblptrl	equ	0xFF6
 19932                           tablat	equ	0xFF5
 19933                           prodh	equ	0xFF4
 19934                           prodl	equ	0xFF3
 19935                           intcon	equ	0xFF2
 19936                           postinc0	equ	0xFEE
 19937                           fsr0h	equ	0xFEA
 19938                           fsr0l	equ	0xFE9
 19939                           wreg	equ	0xFE8
 19940                           postdec1	equ	0xFE5
 19941                           fsr1h	equ	0xFE2
 19942                           fsr1l	equ	0xFE1
 19943                           bsr	equ	0xFE0
 19944                           indf2	equ	0xFDF
 19945                           postinc2	equ	0xFDE
 19946                           postdec2	equ	0xFDD
 19947                           plusw2	equ	0xFDB
 19948                           fsr2h	equ	0xFDA
 19949                           fsr2l	equ	0xFD9
 19950                           status	equ	0xFD8
 19951                           
 19952 ;; *************** function i1_pressUP *****************
 19953 ;; Defined at:
 19954 ;;		line 124 in file "source/DisplayProtocol.h"
 19955 ;; Parameters:    Size  Location     Type
 19956 ;;		None
 19957 ;; Auto vars:     Size  Location     Type
 19958 ;;		None
 19959 ;; Return value:  Size  Location     Type
 19960 ;;                  1    wreg      void 
 19961 ;; Registers used:
 19962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19963 ;; Tracked objects:
 19964 ;;		On entry : 0/0
 19965 ;;		On exit  : 0/0
 19966 ;;		Unchanged: 0/0
 19967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19968 ;;      Params:         0       0       0       0       0       0       0
 19969 ;;      Locals:         0       0       0       0       0       0       0
 19970 ;;      Temps:          0       1       0       0       0       0       0
 19971 ;;      Totals:         0       1       0       0       0       0       0
 19972 ;;Total ram usage:        1 bytes
 19973 ;; Hardware stack levels used:    1
 19974 ;; Hardware stack levels required when called:    5
 19975 ;; This function calls:
 19976 ;;		i1_chanValDigUP
 19977 ;; This function is called by:
 19978 ;;		_UARTint
 19979 ;; This function uses a non-reentrant model
 19980 ;;
 19981                           
 19982                           	psect	text84
 19983  004286                     __ptext84:
 19984                           	opt stack 0
 19985  004286                     i1_pressUP:
 19986                           	opt stack 13
 19987                           
 19988                           ;DisplayProtocol.h: 125: if (actualScreen == 0 || actualScreen == 4) {
 19989                           
 19990                           ;incstack = 0
 19991  004286  0101               	movlb	1	; () banked
 19992  004288  51BA               	movf	_actualScreen& (0+255),w,b
 19993  00428A  B4D8               	btfsc	status,2,c
 19994  00428C  D005               	goto	i1l11569
 19995                           
 19996                           ; BSR set to: 1
 19997  00428E  0E04               	movlw	4
 19998  004290  0101               	movlb	1	; () banked
 19999  004292  19BA               	xorwf	_actualScreen& (0+255),w,b
 20000  004294  A4D8               	btfss	status,2,c
 20001  004296  D00C               	goto	i1l11575
 20002  004298                     i1l11569:
 20003                           
 20004                           ; BSR set to: 1
 20005                           ;DisplayProtocol.h: 126: menuSection++;
 20006  004298  0101               	movlb	1	; () banked
 20007  00429A  2BC1               	incf	_menuSection& (0+255),f,b
 20008                           
 20009                           ; BSR set to: 1
 20010                           ;DisplayProtocol.h: 127: if (menuSection > 4)
 20011  00429C  0101               	movlb	1	; () banked
 20012  00429E  51C1               	movf	_menuSection& (0+255),w,b
 20013  0042A0  0A80               	xorlw	128
 20014  0042A2  0F7B               	addlw	-133
 20015  0042A4  A0D8               	btfss	status,0,c
 20016  0042A6  0012               	return	
 20017                           
 20018                           ; BSR set to: 1
 20019                           ;DisplayProtocol.h: 128: menuSection = 0;
 20020  0042A8  0E00               	movlw	0
 20021  0042AA  0101               	movlb	1	; () banked
 20022  0042AC  6FC1               	movwf	_menuSection& (0+255),b
 20023                           
 20024                           ; BSR set to: 1
 20025                           ;DisplayProtocol.h: 129: } else if (actualScreen == 1) {
 20026  0042AE  0012               	return	
 20027  0042B0                     i1l11575:
 20028                           
 20029                           ; BSR set to: 1
 20030  0042B0  0101               	movlb	1	; () banked
 20031  0042B2  05BA               	decf	_actualScreen& (0+255),w,b
 20032  0042B4  A4D8               	btfss	status,2,c
 20033  0042B6  D024               	goto	i1l11581
 20034                           
 20035                           ; BSR set to: 1
 20036                           ;DisplayProtocol.h: 130: introducido[passSection]++;
 20037  0042B8  0101               	movlb	1	; () banked
 20038  0042BA  51C2               	movf	_passSection& (0+255),w,b
 20039  0042BC  0D01               	mullw	1
 20040  0042BE  0EA6               	movlw	low _introducido
 20041  0042C0  24F3               	addwf	prodl,w,c
 20042  0042C2  6ED9               	movwf	fsr2l,c
 20043  0042C4  0E01               	movlw	high _introducido
 20044  0042C6  20F4               	addwfc	prodh,w,c
 20045  0042C8  6EDA               	movwf	fsr2h,c
 20046  0042CA  2ADF               	incf	indf2,f,c
 20047                           
 20048                           ;DisplayProtocol.h: 131: if (introducido[passSection] > 9)
 20049  0042CC  0101               	movlb	1	; () banked
 20050  0042CE  51C2               	movf	_passSection& (0+255),w,b
 20051  0042D0  0D01               	mullw	1
 20052  0042D2  0EA6               	movlw	low _introducido
 20053  0042D4  24F3               	addwf	prodl,w,c
 20054  0042D6  6ED9               	movwf	fsr2l,c
 20055  0042D8  0E01               	movlw	high _introducido
 20056  0042DA  20F4               	addwfc	prodh,w,c
 20057  0042DC  6EDA               	movwf	fsr2h,c
 20058  0042DE  50DF               	movf	indf2,w,c
 20059  0042E0  0A80               	xorlw	128
 20060  0042E2  0F76               	addlw	-138
 20061  0042E4  A0D8               	btfss	status,0,c
 20062  0042E6  0012               	return	
 20063                           
 20064                           ; BSR set to: 1
 20065                           ;DisplayProtocol.h: 132: introducido[passSection] = 0;
 20066  0042E8  0101               	movlb	1	; () banked
 20067  0042EA  51C2               	movf	_passSection& (0+255),w,b
 20068  0042EC  0D01               	mullw	1
 20069  0042EE  0EA6               	movlw	low _introducido
 20070  0042F0  24F3               	addwf	prodl,w,c
 20071  0042F2  6ED9               	movwf	fsr2l,c
 20072  0042F4  0E01               	movlw	high _introducido
 20073  0042F6  20F4               	addwfc	prodh,w,c
 20074  0042F8  6EDA               	movwf	fsr2h,c
 20075  0042FA  0E00               	movlw	0
 20076  0042FC  6EDF               	movwf	indf2,c
 20077                           
 20078                           ; BSR set to: 1
 20079                           ;DisplayProtocol.h: 133: } else if (actualScreen == 2 || actualScreen == 3
 20080  0042FE  0012               	return	
 20081  004300                     i1l11581:
 20082                           
 20083                           ; BSR set to: 1
 20084                           ;DisplayProtocol.h: 134: || actualScreen == 10 || actualScreen == 11) {
 20085  004300  0E02               	movlw	2
 20086  004302  0101               	movlb	1	; () banked
 20087  004304  19BA               	xorwf	_actualScreen& (0+255),w,b
 20088  004306  B4D8               	btfsc	status,2,c
 20089  004308  D00F               	goto	i1l11589
 20090                           
 20091                           ; BSR set to: 1
 20092  00430A  0E03               	movlw	3
 20093  00430C  0101               	movlb	1	; () banked
 20094  00430E  19BA               	xorwf	_actualScreen& (0+255),w,b
 20095  004310  B4D8               	btfsc	status,2,c
 20096  004312  D00A               	goto	i1l11589
 20097                           
 20098                           ; BSR set to: 1
 20099  004314  0E0A               	movlw	10
 20100  004316  0101               	movlb	1	; () banked
 20101  004318  19BA               	xorwf	_actualScreen& (0+255),w,b
 20102  00431A  B4D8               	btfsc	status,2,c
 20103  00431C  D005               	goto	i1l11589
 20104                           
 20105                           ; BSR set to: 1
 20106  00431E  0E0B               	movlw	11
 20107  004320  0101               	movlb	1	; () banked
 20108  004322  19BA               	xorwf	_actualScreen& (0+255),w,b
 20109  004324  A4D8               	btfss	status,2,c
 20110  004326  D011               	goto	i1l11595
 20111  004328                     i1l11589:
 20112                           
 20113                           ; BSR set to: 1
 20114                           ;DisplayProtocol.h: 135: selSN = !selSN;
 20115  004328  0101               	movlb	1	; () banked
 20116  00432A  51C3               	movf	_selSN& (0+255),w,b
 20117  00432C  A4D8               	btfss	status,2,c
 20118  00432E  D002               	goto	i1u1698_20
 20119  004330  0E01               	movlw	1
 20120  004332  D001               	goto	i1u1699_20
 20121  004334                     i1u1698_20:
 20122  004334  0E00               	movlw	0
 20123  004336                     i1u1699_20:
 20124  004336  0101               	movlb	1	; () banked
 20125  004338  6FC3               	movwf	_selSN& (0+255),b
 20126                           
 20127                           ; BSR set to: 1
 20128                           ;DisplayProtocol.h: 136: if(selSN > 1)
 20129  00433A  0E01               	movlw	1
 20130  00433C  0101               	movlb	1	; () banked
 20131  00433E  65C3               	cpfsgt	_selSN& (0+255),b
 20132  004340  0012               	return	
 20133                           
 20134                           ; BSR set to: 1
 20135                           ;DisplayProtocol.h: 137: selSN = 0;
 20136  004342  0E00               	movlw	0
 20137  004344  0101               	movlb	1	; () banked
 20138  004346  6FC3               	movwf	_selSN& (0+255),b
 20139                           
 20140                           ; BSR set to: 1
 20141                           ;DisplayProtocol.h: 138: }else if(actualScreen == 5) {
 20142  004348  0012               	return	
 20143  00434A                     i1l11595:
 20144                           
 20145                           ; BSR set to: 1
 20146  00434A  0E05               	movlw	5
 20147  00434C  0101               	movlb	1	; () banked
 20148  00434E  19BA               	xorwf	_actualScreen& (0+255),w,b
 20149  004350  B4D8               	btfsc	status,2,c
 20150  004352  D00B               	goto	i1l11607
 20151  004354  D019               	goto	i1l11609
 20152  004356                     i1l11599:
 20153                           
 20154                           ; BSR set to: 1
 20155                           ;DisplayProtocol.h: 143: chanValDigUP();
 20156  004356  EC2E  F026         	call	i1_chanValDigUP	;wreg free
 20157                           
 20158                           ;DisplayProtocol.h: 144: break;
 20159  00435A  0012               	return	
 20160  00435C                     i1l11601:
 20161                           
 20162                           ;DisplayProtocol.h: 146: chanVals++;
 20163  00435C  0101               	movlb	1	; () banked
 20164  00435E  4BB1               	infsnz	_chanVals& (0+255),f,b
 20165  004360  2BB2               	incf	(_chanVals+1)& (0+255),f,b
 20166                           
 20167                           ;DisplayProtocol.h: 147: break;
 20168  004362  0012               	return	
 20169  004364                     i1l11603:
 20170                           
 20171                           ; BSR set to: 1
 20172                           ;DisplayProtocol.h: 149: chanValDigUP();
 20173  004364  EC2E  F026         	call	i1_chanValDigUP	;wreg free
 20174                           
 20175                           ;DisplayProtocol.h: 151: }
 20176                           ;DisplayProtocol.h: 152: }
 20177                           
 20178                           ;DisplayProtocol.h: 150: break;
 20179  004368  0012               	return	
 20180  00436A                     i1l11607:
 20181  00436A  0101               	movlb	1	; () banked
 20182  00436C  51C1               	movf	_menuSection& (0+255),w,b
 20183                           
 20184                           ; Switch size 1, requested type "space"
 20185                           ; Number of cases is 4, Range of values is 0 to 3
 20186                           ; switch strategies available:
 20187                           ; Name         Instructions Cycles
 20188                           ; simple_byte           13     7 (average)
 20189                           ;	Chosen strategy is simple_byte
 20190  00436E  0A00               	xorlw	0	; case 0
 20191  004370  B4D8               	btfsc	status,2,c
 20192  004372  0012               	return	
 20193  004374  0A01               	xorlw	1	; case 1
 20194  004376  B4D8               	btfsc	status,2,c
 20195  004378  D7EE               	goto	i1l11599
 20196  00437A  0A03               	xorlw	3	; case 2
 20197  00437C  B4D8               	btfsc	status,2,c
 20198  00437E  D7EE               	goto	i1l11601
 20199  004380  0A01               	xorlw	1	; case 3
 20200  004382  A4D8               	btfss	status,2,c
 20201                           
 20202                           ; BSR set to: 1
 20203                           ;DisplayProtocol.h: 153: }else if(actualScreen == 12)
 20204  004384  0012               	return	
 20205  004386  D7EE               	goto	i1l11603
 20206  004388                     i1l11609:
 20207                           
 20208                           ; BSR set to: 1
 20209  004388  0E0C               	movlw	12
 20210  00438A  0101               	movlb	1	; () banked
 20211  00438C  19BA               	xorwf	_actualScreen& (0+255),w,b
 20212  00438E  A4D8               	btfss	status,2,c
 20213  004390  0012               	return	
 20214                           
 20215                           ; BSR set to: 1
 20216                           ;DisplayProtocol.h: 154: chanValDigUP();
 20217  004392  EC2E  F026         	call	i1_chanValDigUP	;wreg free
 20218  004396  0012               	return	
 20219  004398                     __end_ofi1_pressUP:
 20220                           	opt stack 0
 20221                           pclatu	equ	0xFFB
 20222                           pclath	equ	0xFFA
 20223                           tblptru	equ	0xFF8
 20224                           tblptrh	equ	0xFF7
 20225                           tblptrl	equ	0xFF6
 20226                           tablat	equ	0xFF5
 20227                           prodh	equ	0xFF4
 20228                           prodl	equ	0xFF3
 20229                           intcon	equ	0xFF2
 20230                           postinc0	equ	0xFEE
 20231                           fsr0h	equ	0xFEA
 20232                           fsr0l	equ	0xFE9
 20233                           wreg	equ	0xFE8
 20234                           postdec1	equ	0xFE5
 20235                           fsr1h	equ	0xFE2
 20236                           fsr1l	equ	0xFE1
 20237                           bsr	equ	0xFE0
 20238                           indf2	equ	0xFDF
 20239                           postinc2	equ	0xFDE
 20240                           postdec2	equ	0xFDD
 20241                           plusw2	equ	0xFDB
 20242                           fsr2h	equ	0xFDA
 20243                           fsr2l	equ	0xFD9
 20244                           status	equ	0xFD8
 20245                           
 20246 ;; *************** function i1_chanValDigUP *****************
 20247 ;; Defined at:
 20248 ;;		line 28 in file "source/DisplayProtocol.h"
 20249 ;; Parameters:    Size  Location     Type
 20250 ;;		None
 20251 ;; Auto vars:     Size  Location     Type
 20252 ;;		None
 20253 ;; Return value:  Size  Location     Type
 20254 ;;                  1    wreg      void 
 20255 ;; Registers used:
 20256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20257 ;; Tracked objects:
 20258 ;;		On entry : 0/0
 20259 ;;		On exit  : 0/0
 20260 ;;		Unchanged: 0/0
 20261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20262 ;;      Params:         0       0       0       0       0       0       0
 20263 ;;      Locals:         0       0       0       0       0       0       0
 20264 ;;      Temps:          0       5       0       0       0       0       0
 20265 ;;      Totals:         0       5       0       0       0       0       0
 20266 ;;Total ram usage:        5 bytes
 20267 ;; Hardware stack levels used:    1
 20268 ;; Hardware stack levels required when called:    4
 20269 ;; This function calls:
 20270 ;;		Nothing
 20271 ;; This function is called by:
 20272 ;;		i1_pressUP
 20273 ;; This function uses a non-reentrant model
 20274 ;;
 20275                           
 20276                           	psect	text85
 20277  004C5C                     __ptext85:
 20278                           	opt stack 0
 20279  004C5C                     i1_chanValDigUP:
 20280                           	opt stack 13
 20281                           
 20282                           ;DisplayProtocol.h: 29: chanValdig[chanValSection]++;
 20283                           
 20284                           ;incstack = 0
 20285  004C5C  0101               	movlb	1	; () banked
 20286  004C5E  5194               	movf	_chanValSection& (0+255),w,b
 20287  004C60  0D01               	mullw	1
 20288  004C62  0EA0               	movlw	low _chanValdig
 20289  004C64  24F3               	addwf	prodl,w,c
 20290  004C66  6ED9               	movwf	fsr2l,c
 20291  004C68  0E01               	movlw	high _chanValdig
 20292  004C6A  20F4               	addwfc	prodh,w,c
 20293  004C6C  6EDA               	movwf	fsr2h,c
 20294  004C6E  2ADF               	incf	indf2,f,c
 20295                           
 20296                           ;DisplayProtocol.h: 30: if(chanValdig[chanValSection] > 9) {
 20297  004C70  0101               	movlb	1	; () banked
 20298  004C72  5194               	movf	_chanValSection& (0+255),w,b
 20299  004C74  0D01               	mullw	1
 20300  004C76  0EA0               	movlw	low _chanValdig
 20301  004C78  24F3               	addwf	prodl,w,c
 20302  004C7A  6ED9               	movwf	fsr2l,c
 20303  004C7C  0E01               	movlw	high _chanValdig
 20304  004C7E  20F4               	addwfc	prodh,w,c
 20305  004C80  6EDA               	movwf	fsr2h,c
 20306  004C82  50DF               	movf	indf2,w,c
 20307  004C84  0A80               	xorlw	128
 20308  004C86  0F76               	addlw	-138
 20309  004C88  A0D8               	btfss	status,0,c
 20310  004C8A  0012               	return	
 20311                           
 20312                           ; BSR set to: 1
 20313                           ;DisplayProtocol.h: 31: chanValdig[chanValSection] = 0;
 20314  004C8C  0101               	movlb	1	; () banked
 20315  004C8E  5194               	movf	_chanValSection& (0+255),w,b
 20316  004C90  0D01               	mullw	1
 20317  004C92  0EA0               	movlw	low _chanValdig
 20318  004C94  24F3               	addwf	prodl,w,c
 20319  004C96  6ED9               	movwf	fsr2l,c
 20320  004C98  0E01               	movlw	high _chanValdig
 20321  004C9A  20F4               	addwfc	prodh,w,c
 20322  004C9C  6EDA               	movwf	fsr2h,c
 20323  004C9E  0E00               	movlw	0
 20324  004CA0  6EDF               	movwf	indf2,c
 20325                           
 20326                           ; BSR set to: 1
 20327                           ;DisplayProtocol.h: 32: if(chanValSection > 1 && chanValdig[chanValSection - 1] < 9)
 20328  004CA2  0101               	movlb	1	; () banked
 20329  004CA4  5194               	movf	_chanValSection& (0+255),w,b
 20330  004CA6  0A80               	xorlw	128
 20331  004CA8  0F7E               	addlw	-130
 20332  004CAA  A0D8               	btfss	status,0,c
 20333  004CAC  0012               	return	
 20334                           
 20335                           ; BSR set to: 1
 20336  004CAE  0EFF               	movlw	255
 20337  004CB0  0100               	movlb	0	; () banked
 20338  004CB2  6F60               	movwf	??i1_chanValDigUP& (0+255),b
 20339  004CB4  0EFF               	movlw	255
 20340  004CB6  0100               	movlb	0	; () banked
 20341  004CB8  6F61               	movwf	(??i1_chanValDigUP+1)& (0+255),b
 20342  004CBA  C194  F062         	movff	_chanValSection,??i1_chanValDigUP+2
 20343  004CBE  0100               	movlb	0	; () banked
 20344  004CC0  6B63               	clrf	(??i1_chanValDigUP+3)& (0+255),b
 20345  004CC2  BF62               	btfsc	(??i1_chanValDigUP+2)& (0+255),7,b
 20346  004CC4  0763               	decf	(??i1_chanValDigUP+3)& (0+255),f,b
 20347  004CC6  0100               	movlb	0	; () banked
 20348  004CC8  5160               	movf	??i1_chanValDigUP& (0+255),w,b
 20349  004CCA  0100               	movlb	0	; () banked
 20350  004CCC  2762               	addwf	(??i1_chanValDigUP+2)& (0+255),f,b
 20351  004CCE  0100               	movlb	0	; () banked
 20352  004CD0  5161               	movf	(??i1_chanValDigUP+1)& (0+255),w,b
 20353  004CD2  0100               	movlb	0	; () banked
 20354  004CD4  2363               	addwfc	(??i1_chanValDigUP+3)& (0+255),f,b
 20355  004CD6  0EA0               	movlw	low _chanValdig
 20356  004CD8  0100               	movlb	0	; () banked
 20357  004CDA  2562               	addwf	(??i1_chanValDigUP+2)& (0+255),w,b
 20358  004CDC  6ED9               	movwf	fsr2l,c
 20359  004CDE  0E01               	movlw	high _chanValdig
 20360  004CE0  0100               	movlb	0	; () banked
 20361  004CE2  2163               	addwfc	(??i1_chanValDigUP+3)& (0+255),w,b
 20362  004CE4  6EDA               	movwf	fsr2h,c
 20363  004CE6  50DF               	movf	indf2,w,c
 20364  004CE8  0A80               	xorlw	128
 20365  004CEA  0F77               	addlw	-137
 20366  004CEC  B0D8               	btfsc	status,0,c
 20367  004CEE  0012               	return	
 20368                           
 20369                           ; BSR set to: 0
 20370                           ;DisplayProtocol.h: 33: chanValdig[chanValSection - 1]++;
 20371  004CF0  0EFF               	movlw	255
 20372  004CF2  0100               	movlb	0	; () banked
 20373  004CF4  6F60               	movwf	??i1_chanValDigUP& (0+255),b
 20374  004CF6  0EFF               	movlw	255
 20375  004CF8  0100               	movlb	0	; () banked
 20376  004CFA  6F61               	movwf	(??i1_chanValDigUP+1)& (0+255),b
 20377  004CFC  C194  F062         	movff	_chanValSection,??i1_chanValDigUP+2
 20378  004D00  0100               	movlb	0	; () banked
 20379  004D02  6B63               	clrf	(??i1_chanValDigUP+3)& (0+255),b
 20380  004D04  BF62               	btfsc	(??i1_chanValDigUP+2)& (0+255),7,b
 20381  004D06  0763               	decf	(??i1_chanValDigUP+3)& (0+255),f,b
 20382  004D08  0100               	movlb	0	; () banked
 20383  004D0A  5160               	movf	??i1_chanValDigUP& (0+255),w,b
 20384  004D0C  0100               	movlb	0	; () banked
 20385  004D0E  2762               	addwf	(??i1_chanValDigUP+2)& (0+255),f,b
 20386  004D10  0100               	movlb	0	; () banked
 20387  004D12  5161               	movf	(??i1_chanValDigUP+1)& (0+255),w,b
 20388  004D14  0100               	movlb	0	; () banked
 20389  004D16  2363               	addwfc	(??i1_chanValDigUP+3)& (0+255),f,b
 20390  004D18  0EA0               	movlw	low _chanValdig
 20391  004D1A  0100               	movlb	0	; () banked
 20392  004D1C  2562               	addwf	(??i1_chanValDigUP+2)& (0+255),w,b
 20393  004D1E  6ED9               	movwf	fsr2l,c
 20394  004D20  0E01               	movlw	high _chanValdig
 20395  004D22  0100               	movlb	0	; () banked
 20396  004D24  2163               	addwfc	(??i1_chanValDigUP+3)& (0+255),w,b
 20397  004D26  6EDA               	movwf	fsr2h,c
 20398  004D28  2ADF               	incf	indf2,f,c
 20399                           
 20400                           ; BSR set to: 0
 20401  004D2A  0012               	return	
 20402  004D2C                     __end_ofi1_chanValDigUP:
 20403                           	opt stack 0
 20404                           pclatu	equ	0xFFB
 20405                           pclath	equ	0xFFA
 20406                           tblptru	equ	0xFF8
 20407                           tblptrh	equ	0xFF7
 20408                           tblptrl	equ	0xFF6
 20409                           tablat	equ	0xFF5
 20410                           prodh	equ	0xFF4
 20411                           prodl	equ	0xFF3
 20412                           intcon	equ	0xFF2
 20413                           postinc0	equ	0xFEE
 20414                           fsr0h	equ	0xFEA
 20415                           fsr0l	equ	0xFE9
 20416                           wreg	equ	0xFE8
 20417                           postdec1	equ	0xFE5
 20418                           fsr1h	equ	0xFE2
 20419                           fsr1l	equ	0xFE1
 20420                           bsr	equ	0xFE0
 20421                           indf2	equ	0xFDF
 20422                           postinc2	equ	0xFDE
 20423                           postdec2	equ	0xFDD
 20424                           plusw2	equ	0xFDB
 20425                           fsr2h	equ	0xFDA
 20426                           fsr2l	equ	0xFD9
 20427                           status	equ	0xFD8
 20428                           
 20429 ;; *************** function i1_pressRETRO *****************
 20430 ;; Defined at:
 20431 ;;		line 229 in file "source/DisplayProtocol.h"
 20432 ;; Parameters:    Size  Location     Type
 20433 ;;		None
 20434 ;; Auto vars:     Size  Location     Type
 20435 ;;		None
 20436 ;; Return value:  Size  Location     Type
 20437 ;;                  1    wreg      void 
 20438 ;; Registers used:
 20439 ;;		wreg, status,2, status,0
 20440 ;; Tracked objects:
 20441 ;;		On entry : 0/0
 20442 ;;		On exit  : 0/0
 20443 ;;		Unchanged: 0/0
 20444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20445 ;;      Params:         0       0       0       0       0       0       0
 20446 ;;      Locals:         0       0       0       0       0       0       0
 20447 ;;      Temps:          0       0       0       0       0       0       0
 20448 ;;      Totals:         0       0       0       0       0       0       0
 20449 ;;Total ram usage:        0 bytes
 20450 ;; Hardware stack levels used:    1
 20451 ;; Hardware stack levels required when called:    4
 20452 ;; This function calls:
 20453 ;;		Nothing
 20454 ;; This function is called by:
 20455 ;;		_UARTint
 20456 ;; This function uses a non-reentrant model
 20457 ;;
 20458                           
 20459                           	psect	text86
 20460  0059A8                     __ptext86:
 20461                           	opt stack 0
 20462  0059A8                     i1_pressRETRO:
 20463                           	opt stack 14
 20464                           
 20465                           ;DisplayProtocol.h: 230: if (actualScreen == 1) {
 20466                           
 20467                           ;incstack = 0
 20468  0059A8  0101               	movlb	1	; () banked
 20469  0059AA  05BA               	decf	_actualScreen& (0+255),w,b
 20470  0059AC  A4D8               	btfss	status,2,c
 20471  0059AE  D004               	goto	i1l11699
 20472                           
 20473                           ; BSR set to: 1
 20474                           ;DisplayProtocol.h: 231: actualScreen = 0;
 20475  0059B0  0E00               	movlw	0
 20476  0059B2  0101               	movlb	1	; () banked
 20477  0059B4  6FBA               	movwf	_actualScreen& (0+255),b
 20478                           
 20479                           ;DisplayProtocol.h: 232: }else if (actualScreen == 2 || actualScreen == 3
 20480  0059B6  0012               	return	
 20481  0059B8                     i1l11699:
 20482                           
 20483                           ; BSR set to: 1
 20484                           ;DisplayProtocol.h: 233: || actualScreen == 10) {
 20485  0059B8  0E02               	movlw	2
 20486  0059BA  0101               	movlb	1	; () banked
 20487  0059BC  19BA               	xorwf	_actualScreen& (0+255),w,b
 20488  0059BE  B4D8               	btfsc	status,2,c
 20489  0059C0  D00A               	goto	i1l644
 20490                           
 20491                           ; BSR set to: 1
 20492  0059C2  0E03               	movlw	3
 20493  0059C4  0101               	movlb	1	; () banked
 20494  0059C6  19BA               	xorwf	_actualScreen& (0+255),w,b
 20495  0059C8  B4D8               	btfsc	status,2,c
 20496  0059CA  D005               	goto	i1l644
 20497                           
 20498                           ; BSR set to: 1
 20499  0059CC  0E0A               	movlw	10
 20500  0059CE  0101               	movlb	1	; () banked
 20501  0059D0  19BA               	xorwf	_actualScreen& (0+255),w,b
 20502  0059D2  A4D8               	btfss	status,2,c
 20503  0059D4  D003               	goto	i1l11705
 20504  0059D6                     i1l644:
 20505                           
 20506                           ; BSR set to: 1
 20507                           ;DisplayProtocol.h: 234: actualScreen = tempLastScreen;
 20508  0059D6  C0CB  F1BA         	movff	_tempLastScreen,_actualScreen
 20509                           
 20510                           ;DisplayProtocol.h: 235: }else if(actualScreen == 5) {
 20511  0059DA  0012               	return	
 20512  0059DC                     i1l11705:
 20513                           
 20514                           ; BSR set to: 1
 20515  0059DC  0E05               	movlw	5
 20516  0059DE  0101               	movlb	1	; () banked
 20517  0059E0  19BA               	xorwf	_actualScreen& (0+255),w,b
 20518  0059E2  A4D8               	btfss	status,2,c
 20519  0059E4  D015               	goto	i1l11717
 20520                           
 20521                           ; BSR set to: 1
 20522                           ;DisplayProtocol.h: 236: if(menuSection != 2) {
 20523  0059E6  0E02               	movlw	2
 20524  0059E8  0101               	movlb	1	; () banked
 20525  0059EA  19C1               	xorwf	_menuSection& (0+255),w,b
 20526  0059EC  B4D8               	btfsc	status,2,c
 20527  0059EE  D00C               	goto	i1l11715
 20528                           
 20529                           ; BSR set to: 1
 20530                           ;DisplayProtocol.h: 237: chanValSection++;
 20531  0059F0  0101               	movlb	1	; () banked
 20532  0059F2  2B94               	incf	_chanValSection& (0+255),f,b
 20533                           
 20534                           ; BSR set to: 1
 20535                           ;DisplayProtocol.h: 238: if(chanValSection > 5)
 20536  0059F4  0101               	movlb	1	; () banked
 20537  0059F6  5194               	movf	_chanValSection& (0+255),w,b
 20538  0059F8  0A80               	xorlw	128
 20539  0059FA  0F7A               	addlw	-134
 20540  0059FC  A0D8               	btfss	status,0,c
 20541  0059FE  0012               	return	
 20542                           
 20543                           ; BSR set to: 1
 20544                           ;DisplayProtocol.h: 239: chanValSection = 0;
 20545  005A00  0E00               	movlw	0
 20546  005A02  0101               	movlb	1	; () banked
 20547  005A04  6F94               	movwf	_chanValSection& (0+255),b
 20548                           
 20549                           ; BSR set to: 1
 20550                           ;DisplayProtocol.h: 240: }else
 20551  005A06  0012               	return	
 20552  005A08                     i1l11715:
 20553                           
 20554                           ; BSR set to: 1
 20555                           ;DisplayProtocol.h: 241: actualScreen = 4;
 20556  005A08  0E04               	movlw	4
 20557  005A0A  0101               	movlb	1	; () banked
 20558  005A0C  6FBA               	movwf	_actualScreen& (0+255),b
 20559                           
 20560                           ; BSR set to: 1
 20561                           ;DisplayProtocol.h: 242: }else if(actualScreen == 11)
 20562  005A0E  0012               	return	
 20563  005A10                     i1l11717:
 20564                           
 20565                           ; BSR set to: 1
 20566  005A10  0E0B               	movlw	11
 20567  005A12  0101               	movlb	1	; () banked
 20568  005A14  19BA               	xorwf	_actualScreen& (0+255),w,b
 20569  005A16  A4D8               	btfss	status,2,c
 20570  005A18  D004               	goto	i1l11721
 20571                           
 20572                           ; BSR set to: 1
 20573                           ;DisplayProtocol.h: 243: actualScreen = 4;
 20574  005A1A  0E04               	movlw	4
 20575  005A1C  0101               	movlb	1	; () banked
 20576  005A1E  6FBA               	movwf	_actualScreen& (0+255),b
 20577  005A20  0012               	return	
 20578  005A22                     i1l11721:
 20579                           
 20580                           ; BSR set to: 1
 20581                           ;DisplayProtocol.h: 244: else if(actualScreen == 12) {
 20582  005A22  0E0C               	movlw	12
 20583  005A24  0101               	movlb	1	; () banked
 20584  005A26  19BA               	xorwf	_actualScreen& (0+255),w,b
 20585  005A28  A4D8               	btfss	status,2,c
 20586  005A2A  0012               	return	
 20587                           
 20588                           ; BSR set to: 1
 20589                           ;DisplayProtocol.h: 245: chanValSection++;
 20590  005A2C  0101               	movlb	1	; () banked
 20591  005A2E  2B94               	incf	_chanValSection& (0+255),f,b
 20592                           
 20593                           ; BSR set to: 1
 20594                           ;DisplayProtocol.h: 246: if(chanValSection > 5)
 20595  005A30  0101               	movlb	1	; () banked
 20596  005A32  5194               	movf	_chanValSection& (0+255),w,b
 20597  005A34  0A80               	xorlw	128
 20598  005A36  0F7A               	addlw	-134
 20599  005A38  A0D8               	btfss	status,0,c
 20600  005A3A  0012               	return	
 20601                           
 20602                           ; BSR set to: 1
 20603                           ;DisplayProtocol.h: 247: chanValSection = 0;
 20604  005A3C  0E00               	movlw	0
 20605  005A3E  0101               	movlb	1	; () banked
 20606  005A40  6F94               	movwf	_chanValSection& (0+255),b
 20607                           
 20608                           ; BSR set to: 1
 20609                           
 20610                           ; BSR set to: 1
 20611                           
 20612                           ; BSR set to: 1
 20613                           
 20614                           ; BSR set to: 1
 20615                           
 20616                           ; BSR set to: 1
 20617  005A42  0012               	return	
 20618  005A44                     __end_ofi1_pressRETRO:
 20619                           	opt stack 0
 20620                           pclatu	equ	0xFFB
 20621                           pclath	equ	0xFFA
 20622                           tblptru	equ	0xFF8
 20623                           tblptrh	equ	0xFF7
 20624                           tblptrl	equ	0xFF6
 20625                           tablat	equ	0xFF5
 20626                           prodh	equ	0xFF4
 20627                           prodl	equ	0xFF3
 20628                           intcon	equ	0xFF2
 20629                           postinc0	equ	0xFEE
 20630                           fsr0h	equ	0xFEA
 20631                           fsr0l	equ	0xFE9
 20632                           wreg	equ	0xFE8
 20633                           postdec1	equ	0xFE5
 20634                           fsr1h	equ	0xFE2
 20635                           fsr1l	equ	0xFE1
 20636                           bsr	equ	0xFE0
 20637                           indf2	equ	0xFDF
 20638                           postinc2	equ	0xFDE
 20639                           postdec2	equ	0xFDD
 20640                           plusw2	equ	0xFDB
 20641                           fsr2h	equ	0xFDA
 20642                           fsr2l	equ	0xFD9
 20643                           status	equ	0xFD8
 20644                           
 20645 ;; *************** function i1_pressENTER *****************
 20646 ;; Defined at:
 20647 ;;		line 273 in file "source/DisplayProtocol.h"
 20648 ;; Parameters:    Size  Location     Type
 20649 ;;		None
 20650 ;; Auto vars:     Size  Location     Type
 20651 ;;		None
 20652 ;; Return value:  Size  Location     Type
 20653 ;;                  1    wreg      void 
 20654 ;; Registers used:
 20655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20656 ;; Tracked objects:
 20657 ;;		On entry : 0/0
 20658 ;;		On exit  : 0/0
 20659 ;;		Unchanged: 0/0
 20660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20661 ;;      Params:         0       0       0       0       0       0       0
 20662 ;;      Locals:         0       0       0       0       0       0       0
 20663 ;;      Temps:          0       0       0       0       0       0       0
 20664 ;;      Totals:         0       0       0       0       0       0       0
 20665 ;;Total ram usage:        0 bytes
 20666 ;; Hardware stack levels used:    1
 20667 ;; Hardware stack levels required when called:    9
 20668 ;; This function calls:
 20669 ;;		i1_checkPass
 20670 ;;		i1_confirmEdition
 20671 ;;		i1_desintegrator
 20672 ;;		i1_setPWM2duty
 20673 ;; This function is called by:
 20674 ;;		_UARTint
 20675 ;; This function uses a non-reentrant model
 20676 ;;
 20677                           
 20678                           	psect	text87
 20679  001CFE                     __ptext87:
 20680                           	opt stack 0
 20681  001CFE                     i1_pressENTER:
 20682                           	opt stack 9
 20683                           
 20684                           ;DisplayProtocol.h: 274: if (actualScreen == 1) {
 20685                           
 20686                           ; BSR set to: 1
 20687                           ;incstack = 0
 20688  001CFE  0101               	movlb	1	; () banked
 20689  001D00  05BA               	decf	_actualScreen& (0+255),w,b
 20690  001D02  A4D8               	btfss	status,2,c
 20691  001D04  D018               	goto	i1l11763
 20692                           
 20693                           ; BSR set to: 1
 20694                           ;DisplayProtocol.h: 275: passSection++;
 20695  001D06  0101               	movlb	1	; () banked
 20696  001D08  2BC2               	incf	_passSection& (0+255),f,b
 20697                           
 20698                           ; BSR set to: 1
 20699                           ;DisplayProtocol.h: 276: if (passSection > 3) {
 20700  001D0A  0101               	movlb	1	; () banked
 20701  001D0C  51C2               	movf	_passSection& (0+255),w,b
 20702  001D0E  0A80               	xorlw	128
 20703  001D10  0F7C               	addlw	-132
 20704  001D12  A0D8               	btfss	status,0,c
 20705  001D14  0012               	return	
 20706                           
 20707                           ; BSR set to: 1
 20708                           ;DisplayProtocol.h: 277: passSection = 0;
 20709  001D16  0E00               	movlw	0
 20710  001D18  0101               	movlb	1	; () banked
 20711  001D1A  6FC2               	movwf	_passSection& (0+255),b
 20712                           
 20713                           ; BSR set to: 1
 20714                           ;DisplayProtocol.h: 278: if (checkPass())
 20715  001D1C  EC22  F02F         	call	i1_checkPass	;wreg free
 20716  001D20  0900               	iorlw	0
 20717  001D22  B4D8               	btfsc	status,2,c
 20718  001D24  D004               	goto	i1l11761
 20719                           
 20720                           ;DisplayProtocol.h: 279: actualScreen = 8;
 20721  001D26  0E08               	movlw	8
 20722  001D28  0101               	movlb	1	; () banked
 20723  001D2A  6FBA               	movwf	_actualScreen& (0+255),b
 20724  001D2C  0012               	return	
 20725  001D2E                     i1l11761:
 20726                           
 20727                           ;DisplayProtocol.h: 280: else
 20728                           ;DisplayProtocol.h: 281: actualScreen = 7;
 20729  001D2E  0E07               	movlw	7
 20730  001D30  0101               	movlb	1	; () banked
 20731  001D32  6FBA               	movwf	_actualScreen& (0+255),b
 20732                           
 20733                           ; BSR set to: 1
 20734                           ;DisplayProtocol.h: 282: }
 20735                           ;DisplayProtocol.h: 283: }else if(actualScreen == 4) {
 20736                           
 20737                           ; BSR set to: 1
 20738  001D34  0012               	return	
 20739  001D36                     i1l11763:
 20740                           
 20741                           ; BSR set to: 1
 20742  001D36  0E04               	movlw	4
 20743  001D38  0101               	movlb	1	; () banked
 20744  001D3A  19BA               	xorwf	_actualScreen& (0+255),w,b
 20745  001D3C  B4D8               	btfsc	status,2,c
 20746  001D3E  D042               	goto	i1l11791
 20747  001D40  D053               	goto	i1l11793
 20748  001D42                     i1l680:
 20749                           
 20750                           ; BSR set to: 1
 20751                           ;DisplayProtocol.h: 286: tempLastScreen = actualScreen;
 20752  001D42  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 20753                           
 20754                           ; BSR set to: 1
 20755                           ;DisplayProtocol.h: 287: if(ProcessStarted) {
 20756  001D46  503A               	movf	_ProcessStarted,w,c
 20757  001D48  B4D8               	btfsc	status,2,c
 20758  001D4A  D007               	goto	i1l11771
 20759                           
 20760                           ; BSR set to: 1
 20761                           ;DisplayProtocol.h: 288: actualScreen = 3;
 20762  001D4C  0E03               	movlw	3
 20763  001D4E  0101               	movlb	1	; () banked
 20764  001D50  6FBA               	movwf	_actualScreen& (0+255),b
 20765                           
 20766                           ;DisplayProtocol.h: 289: selSN = 0;
 20767  001D52  0E00               	movlw	0
 20768  001D54  0101               	movlb	1	; () banked
 20769  001D56  6FC3               	movwf	_selSN& (0+255),b
 20770                           
 20771                           ;DisplayProtocol.h: 290: }else {
 20772  001D58  0012               	return	
 20773  001D5A                     i1l11771:
 20774                           
 20775                           ; BSR set to: 1
 20776                           ;DisplayProtocol.h: 291: actualScreen = 2;
 20777  001D5A  0E02               	movlw	2
 20778  001D5C  0101               	movlb	1	; () banked
 20779  001D5E  6FBA               	movwf	_actualScreen& (0+255),b
 20780                           
 20781                           ;DisplayProtocol.h: 292: selSN = 1;
 20782  001D60  0E01               	movlw	1
 20783  001D62  0101               	movlb	1	; () banked
 20784  001D64  6FC3               	movwf	_selSN& (0+255),b
 20785                           
 20786                           ; BSR set to: 1
 20787                           ;DisplayProtocol.h: 293: }
 20788                           ;DisplayProtocol.h: 294: break;
 20789  001D66  0012               	return	
 20790  001D68                     i1l684:
 20791                           
 20792                           ; BSR set to: 1
 20793                           ;DisplayProtocol.h: 296: chanValf = kgXcorte;
 20794  001D68  C0AC  F1AE         	movff	_kgXcorte,_chanValf
 20795  001D6C  C0AD  F1AF         	movff	_kgXcorte+1,_chanValf+1
 20796  001D70  C0AE  F1B0         	movff	_kgXcorte+2,_chanValf+2
 20797                           
 20798                           ; BSR set to: 1
 20799                           ;DisplayProtocol.h: 297: desintegrator();
 20800  001D74  ECD3  F016         	call	i1_desintegrator	;wreg free
 20801                           
 20802                           ;DisplayProtocol.h: 298: actualScreen = 5;
 20803  001D78  0E05               	movlw	5
 20804  001D7A  0101               	movlb	1	; () banked
 20805  001D7C  6FBA               	movwf	_actualScreen& (0+255),b
 20806                           
 20807                           ;DisplayProtocol.h: 299: break;
 20808  001D7E  0012               	return	
 20809  001D80                     i1l685:
 20810                           
 20811                           ; BSR set to: 1
 20812                           ;DisplayProtocol.h: 301: tempLastScreen = actualScreen;
 20813  001D80  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 20814                           
 20815                           ;DisplayProtocol.h: 302: chanVals = numCortes;
 20816  001D84  C0B8  F1B1         	movff	_numCortes,_chanVals
 20817  001D88  C0B9  F1B2         	movff	_numCortes+1,_chanVals+1
 20818                           
 20819                           ; BSR set to: 1
 20820                           ;DisplayProtocol.h: 303: actualScreen = 5;
 20821  001D8C  0E05               	movlw	5
 20822  001D8E  0101               	movlb	1	; () banked
 20823  001D90  6FBA               	movwf	_actualScreen& (0+255),b
 20824                           
 20825                           ;DisplayProtocol.h: 304: break;
 20826  001D92  0012               	return	
 20827  001D94                     i1l686:
 20828                           
 20829                           ; BSR set to: 1
 20830                           ;DisplayProtocol.h: 306: chanValf = diamTubo;
 20831  001D94  C0A9  F1AE         	movff	_diamTubo,_chanValf
 20832  001D98  C0AA  F1AF         	movff	_diamTubo+1,_chanValf+1
 20833  001D9C  C0AB  F1B0         	movff	_diamTubo+2,_chanValf+2
 20834                           
 20835                           ; BSR set to: 1
 20836                           ;DisplayProtocol.h: 307: desintegrator();
 20837  001DA0  ECD3  F016         	call	i1_desintegrator	;wreg free
 20838                           
 20839                           ;DisplayProtocol.h: 308: actualScreen = 5;
 20840  001DA4  0E05               	movlw	5
 20841  001DA6  0101               	movlb	1	; () banked
 20842  001DA8  6FBA               	movwf	_actualScreen& (0+255),b
 20843                           
 20844                           ;DisplayProtocol.h: 309: break;
 20845  001DAA  0012               	return	
 20846  001DAC                     i1l11783:
 20847                           
 20848                           ; BSR set to: 1
 20849                           ;DisplayProtocol.h: 311: if(!ProcessStarted) {
 20850  001DAC  503A               	movf	_ProcessStarted,w,c
 20851  001DAE  A4D8               	btfss	status,2,c
 20852  001DB0  0012               	return	
 20853                           
 20854                           ; BSR set to: 1
 20855                           ;DisplayProtocol.h: 312: tempLastScreen = actualScreen;
 20856  001DB2  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 20857                           
 20858                           ; BSR set to: 1
 20859                           ;DisplayProtocol.h: 313: selSN = 1;
 20860  001DB6  0E01               	movlw	1
 20861  001DB8  0101               	movlb	1	; () banked
 20862  001DBA  6FC3               	movwf	_selSN& (0+255),b
 20863                           
 20864                           ;DisplayProtocol.h: 314: actualScreen = 11;
 20865  001DBC  0E0B               	movlw	11
 20866  001DBE  0101               	movlb	1	; () banked
 20867  001DC0  6FBA               	movwf	_actualScreen& (0+255),b
 20868                           
 20869                           ; BSR set to: 1
 20870                           ;DisplayProtocol.h: 317: }
 20871                           ;DisplayProtocol.h: 318: }
 20872                           
 20873                           ; BSR set to: 1
 20874                           ;DisplayProtocol.h: 315: }
 20875                           ;DisplayProtocol.h: 316: break;
 20876  001DC2  0012               	return	
 20877  001DC4                     i1l11791:
 20878                           
 20879                           ; BSR set to: 1
 20880  001DC4  0101               	movlb	1	; () banked
 20881  001DC6  51C1               	movf	_menuSection& (0+255),w,b
 20882                           
 20883                           ; Switch size 1, requested type "space"
 20884                           ; Number of cases is 5, Range of values is 0 to 4
 20885                           ; switch strategies available:
 20886                           ; Name         Instructions Cycles
 20887                           ; simple_byte           16     9 (average)
 20888                           ;	Chosen strategy is simple_byte
 20889  001DC8  0A00               	xorlw	0	; case 0
 20890  001DCA  B4D8               	btfsc	status,2,c
 20891  001DCC  D7BA               	goto	i1l680
 20892  001DCE  0A01               	xorlw	1	; case 1
 20893  001DD0  B4D8               	btfsc	status,2,c
 20894  001DD2  D7CA               	goto	i1l684
 20895  001DD4  0A03               	xorlw	3	; case 2
 20896  001DD6  B4D8               	btfsc	status,2,c
 20897  001DD8  D7D3               	goto	i1l685
 20898  001DDA  0A01               	xorlw	1	; case 3
 20899  001DDC  B4D8               	btfsc	status,2,c
 20900  001DDE  D7DA               	goto	i1l686
 20901  001DE0  0A07               	xorlw	7	; case 4
 20902  001DE2  A4D8               	btfss	status,2,c
 20903                           
 20904                           ; BSR set to: 1
 20905                           ;DisplayProtocol.h: 319: }else if(actualScreen == 7)
 20906  001DE4  0012               	return	
 20907  001DE6  D7E2               	goto	i1l11783
 20908  001DE8                     i1l11793:
 20909                           
 20910                           ; BSR set to: 1
 20911  001DE8  0E07               	movlw	7
 20912  001DEA  0101               	movlb	1	; () banked
 20913  001DEC  19BA               	xorwf	_actualScreen& (0+255),w,b
 20914  001DEE  A4D8               	btfss	status,2,c
 20915  001DF0  D004               	goto	i1l11797
 20916                           
 20917                           ; BSR set to: 1
 20918                           ;DisplayProtocol.h: 320: actualScreen = 1;
 20919  001DF2  0E01               	movlw	1
 20920  001DF4  0101               	movlb	1	; () banked
 20921  001DF6  6FBA               	movwf	_actualScreen& (0+255),b
 20922  001DF8  0012               	return	
 20923  001DFA                     i1l11797:
 20924                           
 20925                           ; BSR set to: 1
 20926                           ;DisplayProtocol.h: 321: else if(actualScreen == 6) {
 20927  001DFA  0E06               	movlw	6
 20928  001DFC  0101               	movlb	1	; () banked
 20929  001DFE  19BA               	xorwf	_actualScreen& (0+255),w,b
 20930  001E00  B4D8               	btfsc	status,2,c
 20931  001E02  0012               	return	
 20932                           
 20933                           ; BSR set to: 1
 20934                           
 20935                           ; BSR set to: 1
 20936                           
 20937                           ; BSR set to: 1
 20938                           ;DisplayProtocol.h: 323: }else if(actualScreen == 5) {
 20939  001E04  0E05               	movlw	5
 20940  001E06  0101               	movlb	1	; () banked
 20941  001E08  19BA               	xorwf	_actualScreen& (0+255),w,b
 20942  001E0A  A4D8               	btfss	status,2,c
 20943  001E0C  D017               	goto	i1l11813
 20944                           
 20945                           ; BSR set to: 1
 20946                           ;DisplayProtocol.h: 324: if(menuSection != 2) {
 20947  001E0E  0E02               	movlw	2
 20948  001E10  0101               	movlb	1	; () banked
 20949  001E12  19C1               	xorwf	_menuSection& (0+255),w,b
 20950  001E14  B4D8               	btfsc	status,2,c
 20951  001E16  D009               	goto	i1l11811
 20952                           
 20953                           ; BSR set to: 1
 20954                           ;DisplayProtocol.h: 325: chanValSection--;
 20955  001E18  0101               	movlb	1	; () banked
 20956  001E1A  0794               	decf	_chanValSection& (0+255),f,b
 20957                           
 20958                           ; BSR set to: 1
 20959                           ;DisplayProtocol.h: 326: if(chanValSection < 0)
 20960  001E1C  0101               	movlb	1	; () banked
 20961  001E1E  AF94               	btfss	_chanValSection& (0+255),7,b
 20962  001E20  0012               	return	
 20963                           
 20964                           ; BSR set to: 1
 20965                           ;DisplayProtocol.h: 327: chanValSection = 5;
 20966  001E22  0E05               	movlw	5
 20967  001E24  0101               	movlb	1	; () banked
 20968  001E26  6F94               	movwf	_chanValSection& (0+255),b
 20969                           
 20970                           ; BSR set to: 1
 20971                           ;DisplayProtocol.h: 328: }else
 20972  001E28  0012               	return	
 20973  001E2A                     i1l11811:
 20974                           
 20975                           ; BSR set to: 1
 20976                           ;DisplayProtocol.h: 329: confirmEdition(!ProcessStarted);
 20977  001E2A  503A               	movf	_ProcessStarted,w,c
 20978  001E2C  A4D8               	btfss	status,2,c
 20979  001E2E  D002               	goto	i1u1755_20
 20980  001E30  0E01               	movlw	1
 20981  001E32  D001               	goto	i1u1756_20
 20982  001E34                     i1u1755_20:
 20983  001E34  0E00               	movlw	0
 20984  001E36                     i1u1756_20:
 20985  001E36  EC5D  F024         	call	i1_confirmEdition
 20986                           
 20987                           ;DisplayProtocol.h: 330: }else if(actualScreen == 2) {
 20988  001E3A  0012               	return	
 20989  001E3C                     i1l11813:
 20990  001E3C  0E02               	movlw	2
 20991  001E3E  0101               	movlb	1	; () banked
 20992  001E40  19BA               	xorwf	_actualScreen& (0+255),w,b
 20993  001E42  A4D8               	btfss	status,2,c
 20994  001E44  D020               	goto	i1l11825
 20995                           
 20996                           ; BSR set to: 1
 20997                           ;DisplayProtocol.h: 331: ProcessStarted = !selSN;
 20998  001E46  0101               	movlb	1	; () banked
 20999  001E48  51C3               	movf	_selSN& (0+255),w,b
 21000  001E4A  A4D8               	btfss	status,2,c
 21001  001E4C  D002               	goto	i1u1758_20
 21002  001E4E  0E01               	movlw	1
 21003  001E50  D001               	goto	i1u1759_20
 21004  001E52                     i1u1758_20:
 21005  001E52  0E00               	movlw	0
 21006  001E54                     i1u1759_20:
 21007  001E54  6E3A               	movwf	_ProcessStarted,c
 21008                           
 21009                           ;DisplayProtocol.h: 332: bladeIsUP = 2;
 21010  001E56  0E02               	movlw	2
 21011  001E58  0100               	movlb	0	; () banked
 21012  001E5A  6FC9               	movwf	_bladeIsUP& (0+255),b
 21013                           
 21014                           ;DisplayProtocol.h: 333: if(ProcessStarted && bladeIsUP != 1) {
 21015  001E5C  503A               	movf	_ProcessStarted,w,c
 21016  001E5E  B4D8               	btfsc	status,2,c
 21017  001E60  D00F               	goto	i1l11823
 21018                           
 21019                           ; BSR set to: 0
 21020  001E62  0100               	movlb	0	; () banked
 21021  001E64  05C9               	decf	_bladeIsUP& (0+255),w,b
 21022  001E66  B4D8               	btfsc	status,2,c
 21023  001E68  D00B               	goto	i1l11823
 21024                           
 21025                           ; BSR set to: 0
 21026                           ;DisplayProtocol.h: 334: processState = 0;
 21027  001E6A  0E00               	movlw	0
 21028  001E6C  6E36               	movwf	_processState+1,c
 21029  001E6E  0E00               	movlw	0
 21030  001E70  6E35               	movwf	_processState,c
 21031                           
 21032                           ; BSR set to: 0
 21033                           ;DisplayProtocol.h: 335: setPWM2duty(-400);
 21034  001E72  0EFE               	movlw	254
 21035  001E74  0100               	movlb	0	; () banked
 21036  001E76  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 21037  001E78  0E70               	movlw	112
 21038  001E7A  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 21039  001E7C  ECB9  F02D         	call	i1_setPWM2duty	;wreg free
 21040  001E80                     i1l11823:
 21041                           
 21042                           ;DisplayProtocol.h: 336: }
 21043                           ;DisplayProtocol.h: 337: actualScreen = tempLastScreen;
 21044  001E80  C0CB  F1BA         	movff	_tempLastScreen,_actualScreen
 21045                           
 21046                           ;DisplayProtocol.h: 338: }else if(actualScreen == 3) {
 21047  001E84  0012               	return	
 21048  001E86                     i1l11825:
 21049  001E86  0E03               	movlw	3
 21050  001E88  0101               	movlb	1	; () banked
 21051  001E8A  19BA               	xorwf	_actualScreen& (0+255),w,b
 21052  001E8C  A4D8               	btfss	status,2,c
 21053  001E8E  D005               	goto	i1l11829
 21054                           
 21055                           ; BSR set to: 1
 21056                           ;DisplayProtocol.h: 339: ProcessStarted = selSN;
 21057  001E90  C1C3  F03A         	movff	_selSN,_ProcessStarted
 21058                           
 21059                           ;DisplayProtocol.h: 340: actualScreen = tempLastScreen;
 21060  001E94  C0CB  F1BA         	movff	_tempLastScreen,_actualScreen
 21061                           
 21062                           ;DisplayProtocol.h: 341: }else if(actualScreen == 10) {
 21063  001E98  0012               	return	
 21064  001E9A                     i1l11829:
 21065                           
 21066                           ; BSR set to: 1
 21067  001E9A  0E0A               	movlw	10
 21068  001E9C  0101               	movlb	1	; () banked
 21069  001E9E  19BA               	xorwf	_actualScreen& (0+255),w,b
 21070  001EA0  A4D8               	btfss	status,2,c
 21071  001EA2  D00B               	goto	i1l11835
 21072                           
 21073                           ; BSR set to: 1
 21074                           ;DisplayProtocol.h: 342: if(!selSN)
 21075  001EA4  0101               	movlb	1	; () banked
 21076  001EA6  51C3               	movf	_selSN& (0+255),w,b
 21077  001EA8  A4D8               	btfss	status,2,c
 21078  001EAA  D004               	goto	i1l705
 21079                           
 21080                           ; BSR set to: 1
 21081                           ;DisplayProtocol.h: 343: confirmEdition(1);
 21082  001EAC  0E01               	movlw	1
 21083  001EAE  EC5D  F024         	call	i1_confirmEdition
 21084  001EB2  0012               	return	
 21085  001EB4                     i1l705:
 21086                           
 21087                           ; BSR set to: 1
 21088                           ;DisplayProtocol.h: 344: else
 21089                           ;DisplayProtocol.h: 345: actualScreen = tempLastScreen;
 21090  001EB4  C0CB  F1BA         	movff	_tempLastScreen,_actualScreen
 21091                           
 21092                           ; BSR set to: 1
 21093                           ;DisplayProtocol.h: 346: }else if(actualScreen == 8)
 21094  001EB8  0012               	return	
 21095  001EBA                     i1l11835:
 21096                           
 21097                           ; BSR set to: 1
 21098  001EBA  0E08               	movlw	8
 21099  001EBC  0101               	movlb	1	; () banked
 21100  001EBE  19BA               	xorwf	_actualScreen& (0+255),w,b
 21101  001EC0  A4D8               	btfss	status,2,c
 21102  001EC2  D004               	goto	i1l11839
 21103                           
 21104                           ; BSR set to: 1
 21105                           ;DisplayProtocol.h: 347: actualScreen = 4;
 21106  001EC4  0E04               	movlw	4
 21107  001EC6  0101               	movlb	1	; () banked
 21108  001EC8  6FBA               	movwf	_actualScreen& (0+255),b
 21109  001ECA  0012               	return	
 21110  001ECC                     i1l11839:
 21111                           
 21112                           ; BSR set to: 1
 21113                           ;DisplayProtocol.h: 348: else if(actualScreen == 9)
 21114  001ECC  0E09               	movlw	9
 21115  001ECE  0101               	movlb	1	; () banked
 21116  001ED0  19BA               	xorwf	_actualScreen& (0+255),w,b
 21117  001ED2  A4D8               	btfss	status,2,c
 21118  001ED4  D004               	goto	i1l11843
 21119                           
 21120                           ; BSR set to: 1
 21121                           ;DisplayProtocol.h: 349: actualScreen = 0;
 21122  001ED6  0E00               	movlw	0
 21123  001ED8  0101               	movlb	1	; () banked
 21124  001EDA  6FBA               	movwf	_actualScreen& (0+255),b
 21125  001EDC  0012               	return	
 21126  001EDE                     i1l11843:
 21127                           
 21128                           ; BSR set to: 1
 21129                           ;DisplayProtocol.h: 350: else if(actualScreen == 11) {
 21130  001EDE  0E0B               	movlw	11
 21131  001EE0  0101               	movlb	1	; () banked
 21132  001EE2  19BA               	xorwf	_actualScreen& (0+255),w,b
 21133  001EE4  A4D8               	btfss	status,2,c
 21134  001EE6  D05B               	goto	i1l11883
 21135                           
 21136                           ; BSR set to: 1
 21137                           ;DisplayProtocol.h: 351: if(!selSN) {
 21138  001EE8  0101               	movlb	1	; () banked
 21139  001EEA  51C3               	movf	_selSN& (0+255),w,b
 21140  001EEC  A4D8               	btfss	status,2,c
 21141  001EEE  D053               	goto	i1l11881
 21142                           
 21143                           ; BSR set to: 1
 21144                           ;DisplayProtocol.h: 352: chanValf = 0;
 21145  001EF0  0E00               	movlw	0
 21146  001EF2  0101               	movlb	1	; () banked
 21147  001EF4  6FAE               	movwf	_chanValf& (0+255),b
 21148  001EF6  0E00               	movlw	0
 21149  001EF8  0101               	movlb	1	; () banked
 21150  001EFA  6FAF               	movwf	(_chanValf+1)& (0+255),b
 21151  001EFC  0E00               	movlw	0
 21152  001EFE  0101               	movlb	1	; () banked
 21153  001F00  6FB0               	movwf	(_chanValf+2)& (0+255),b
 21154                           
 21155                           ; BSR set to: 1
 21156                           ;DisplayProtocol.h: 353: desintegrator();
 21157  001F02  ECD3  F016         	call	i1_desintegrator	;wreg free
 21158                           
 21159                           ;DisplayProtocol.h: 354: temptiXcorte = tiXcorte;
 21160  001F06  C0B2  F0AF         	movff	_tiXcorte,_temptiXcorte
 21161  001F0A  C0B3  F0B0         	movff	_tiXcorte+1,_temptiXcorte+1
 21162  001F0E  C0B4  F0B1         	movff	_tiXcorte+2,_temptiXcorte+2
 21163                           
 21164                           ;DisplayProtocol.h: 355: tiXcorte = 5.0f;
 21165  001F12  0E00               	movlw	0
 21166  001F14  0100               	movlb	0	; () banked
 21167  001F16  6FB2               	movwf	_tiXcorte& (0+255),b
 21168  001F18  0EA0               	movlw	160
 21169  001F1A  0100               	movlb	0	; () banked
 21170  001F1C  6FB3               	movwf	(_tiXcorte+1)& (0+255),b
 21171  001F1E  0E40               	movlw	64
 21172  001F20  0100               	movlb	0	; () banked
 21173  001F22  6FB4               	movwf	(_tiXcorte+2)& (0+255),b
 21174                           
 21175                           ; BSR set to: 0
 21176                           ;DisplayProtocol.h: 356: timsXcorte = 5000.0f;
 21177  001F24  0E40               	movlw	64
 21178  001F26  6E4D               	movwf	_timsXcorte,c
 21179  001F28  0E9C               	movlw	156
 21180  001F2A  6E4E               	movwf	_timsXcorte+1,c
 21181  001F2C  0E45               	movlw	69
 21182  001F2E  6E4F               	movwf	_timsXcorte+2,c
 21183                           
 21184                           ; BSR set to: 0
 21185                           ;DisplayProtocol.h: 357: tempNumCortes = numCortes;
 21186  001F30  C0B8  F192         	movff	_numCortes,_tempNumCortes
 21187  001F34  C0B9  F193         	movff	_numCortes+1,_tempNumCortes+1
 21188                           
 21189                           ; BSR set to: 0
 21190                           ;DisplayProtocol.h: 358: numCortes = 1;
 21191  001F38  0E00               	movlw	0
 21192  001F3A  0100               	movlb	0	; () banked
 21193  001F3C  6FB9               	movwf	(_numCortes+1)& (0+255),b
 21194  001F3E  0E01               	movlw	1
 21195  001F40  6FB8               	movwf	_numCortes& (0+255),b
 21196                           
 21197                           ; BSR set to: 0
 21198                           ;DisplayProtocol.h: 359: processState = 0;
 21199  001F42  0E00               	movlw	0
 21200  001F44  6E36               	movwf	_processState+1,c
 21201  001F46  0E00               	movlw	0
 21202  001F48  6E35               	movwf	_processState,c
 21203                           
 21204                           ; BSR set to: 0
 21205                           ;DisplayProtocol.h: 360: processTimer = 0;
 21206  001F4A  0E00               	movlw	0
 21207  001F4C  6E2B               	movwf	_processTimer,c
 21208  001F4E  0E00               	movlw	0
 21209  001F50  6E2C               	movwf	_processTimer+1,c
 21210  001F52  0E00               	movlw	0
 21211  001F54  6E2D               	movwf	_processTimer+2,c
 21212  001F56  0E00               	movlw	0
 21213  001F58  6E2E               	movwf	_processTimer+3,c
 21214                           
 21215                           ; BSR set to: 0
 21216                           ;DisplayProtocol.h: 361: bladeIsUP = 2;
 21217  001F5A  0E02               	movlw	2
 21218  001F5C  0100               	movlb	0	; () banked
 21219  001F5E  6FC9               	movwf	_bladeIsUP& (0+255),b
 21220                           
 21221                           ; BSR set to: 0
 21222                           ;DisplayProtocol.h: 362: ProcessStarted = 1;
 21223  001F60  0E01               	movlw	1
 21224  001F62  6E3A               	movwf	_ProcessStarted,c
 21225                           
 21226                           ; BSR set to: 0
 21227                           ;DisplayProtocol.h: 363: if(ProcessStarted && bladeIsUP != 1) {
 21228  001F64  503A               	movf	_ProcessStarted,w,c
 21229  001F66  B4D8               	btfsc	status,2,c
 21230  001F68  D00F               	goto	i1l11877
 21231                           
 21232                           ; BSR set to: 0
 21233  001F6A  0100               	movlb	0	; () banked
 21234  001F6C  05C9               	decf	_bladeIsUP& (0+255),w,b
 21235  001F6E  B4D8               	btfsc	status,2,c
 21236  001F70  D00B               	goto	i1l11877
 21237                           
 21238                           ; BSR set to: 0
 21239                           ;DisplayProtocol.h: 364: processState = 0;
 21240  001F72  0E00               	movlw	0
 21241  001F74  6E36               	movwf	_processState+1,c
 21242  001F76  0E00               	movlw	0
 21243  001F78  6E35               	movwf	_processState,c
 21244                           
 21245                           ; BSR set to: 0
 21246                           ;DisplayProtocol.h: 365: setPWM2duty(-400);
 21247  001F7A  0EFE               	movlw	254
 21248  001F7C  0100               	movlb	0	; () banked
 21249  001F7E  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 21250  001F80  0E70               	movlw	112
 21251  001F82  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 21252  001F84  ECB9  F02D         	call	i1_setPWM2duty	;wreg free
 21253  001F88                     i1l11877:
 21254                           
 21255                           ;DisplayProtocol.h: 366: }
 21256                           ;DisplayProtocol.h: 367: calibLevel = 0;
 21257  001F88  0E00               	movlw	0
 21258  001F8A  0101               	movlb	1	; () banked
 21259  001F8C  6FBB               	movwf	_calibLevel& (0+255),b
 21260                           
 21261                           ; BSR set to: 1
 21262                           ;DisplayProtocol.h: 368: actualScreen = 6;
 21263  001F8E  0E06               	movlw	6
 21264  001F90  0101               	movlb	1	; () banked
 21265  001F92  6FBA               	movwf	_actualScreen& (0+255),b
 21266                           
 21267                           ;DisplayProtocol.h: 369: }else
 21268  001F94  0012               	return	
 21269  001F96                     i1l11881:
 21270                           
 21271                           ; BSR set to: 1
 21272                           ;DisplayProtocol.h: 370: actualScreen = 4;
 21273  001F96  0E04               	movlw	4
 21274  001F98  0101               	movlb	1	; () banked
 21275  001F9A  6FBA               	movwf	_actualScreen& (0+255),b
 21276                           
 21277                           ; BSR set to: 1
 21278                           ;DisplayProtocol.h: 371: }else if(actualScreen == 12) {
 21279  001F9C  0012               	return	
 21280  001F9E                     i1l11883:
 21281                           
 21282                           ; BSR set to: 1
 21283  001F9E  0E0C               	movlw	12
 21284  001FA0  0101               	movlb	1	; () banked
 21285  001FA2  19BA               	xorwf	_actualScreen& (0+255),w,b
 21286  001FA4  A4D8               	btfss	status,2,c
 21287  001FA6  0012               	return	
 21288                           
 21289                           ; BSR set to: 1
 21290                           ;DisplayProtocol.h: 372: chanValSection--;
 21291  001FA8  0101               	movlb	1	; () banked
 21292  001FAA  0794               	decf	_chanValSection& (0+255),f,b
 21293                           
 21294                           ; BSR set to: 1
 21295                           ;DisplayProtocol.h: 373: if(chanValSection < 0)
 21296  001FAC  0101               	movlb	1	; () banked
 21297  001FAE  AF94               	btfss	_chanValSection& (0+255),7,b
 21298  001FB0  0012               	return	
 21299                           
 21300                           ; BSR set to: 1
 21301                           ;DisplayProtocol.h: 374: chanValSection = 5;
 21302  001FB2  0E05               	movlw	5
 21303  001FB4  0101               	movlb	1	; () banked
 21304  001FB6  6F94               	movwf	_chanValSection& (0+255),b
 21305                           
 21306                           ; BSR set to: 1
 21307                           
 21308                           ; BSR set to: 1
 21309                           
 21310                           ; BSR set to: 1
 21311                           
 21312                           ; BSR set to: 1
 21313                           
 21314                           ; BSR set to: 1
 21315                           
 21316                           ; BSR set to: 1
 21317                           
 21318                           ; BSR set to: 1
 21319                           
 21320                           ; BSR set to: 1
 21321                           
 21322                           ; BSR set to: 1
 21323                           
 21324                           ; BSR set to: 1
 21325                           
 21326                           ; BSR set to: 1
 21327                           
 21328                           ; BSR set to: 1
 21329  001FB8  0012               	return	
 21330  001FBA                     __end_ofi1_pressENTER:
 21331                           	opt stack 0
 21332                           pclatu	equ	0xFFB
 21333                           pclath	equ	0xFFA
 21334                           tblptru	equ	0xFF8
 21335                           tblptrh	equ	0xFF7
 21336                           tblptrl	equ	0xFF6
 21337                           tablat	equ	0xFF5
 21338                           prodh	equ	0xFF4
 21339                           prodl	equ	0xFF3
 21340                           intcon	equ	0xFF2
 21341                           postinc0	equ	0xFEE
 21342                           fsr0h	equ	0xFEA
 21343                           fsr0l	equ	0xFE9
 21344                           wreg	equ	0xFE8
 21345                           postdec1	equ	0xFE5
 21346                           fsr1h	equ	0xFE2
 21347                           fsr1l	equ	0xFE1
 21348                           bsr	equ	0xFE0
 21349                           indf2	equ	0xFDF
 21350                           postinc2	equ	0xFDE
 21351                           postdec2	equ	0xFDD
 21352                           plusw2	equ	0xFDB
 21353                           fsr2h	equ	0xFDA
 21354                           fsr2l	equ	0xFD9
 21355                           status	equ	0xFD8
 21356                           
 21357 ;; *************** function i1_desintegrator *****************
 21358 ;; Defined at:
 21359 ;;		line 46 in file "source/DisplayProtocol.h"
 21360 ;; Parameters:    Size  Location     Type
 21361 ;;		None
 21362 ;; Auto vars:     Size  Location     Type
 21363 ;;  desintegrato    4   36[BANK0 ] long 
 21364 ;;  desintegrato    4   32[BANK0 ] long 
 21365 ;;  desintegrato    4   28[BANK0 ] long 
 21366 ;;  desintegrato    3   25[BANK0 ] float 
 21367 ;;  desintegrato    2   40[BANK0 ] int 
 21368 ;; Return value:  Size  Location     Type
 21369 ;;                  1    wreg      void 
 21370 ;; Registers used:
 21371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21372 ;; Tracked objects:
 21373 ;;		On entry : 0/0
 21374 ;;		On exit  : 0/0
 21375 ;;		Unchanged: 0/0
 21376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21377 ;;      Params:         0       0       0       0       0       0       0
 21378 ;;      Locals:         0      17       0       0       0       0       0
 21379 ;;      Temps:          0       2       0       0       0       0       0
 21380 ;;      Totals:         0      19       0       0       0       0       0
 21381 ;;Total ram usage:       19 bytes
 21382 ;; Hardware stack levels used:    1
 21383 ;; Hardware stack levels required when called:    6
 21384 ;; This function calls:
 21385 ;;		i1___aldiv
 21386 ;;		i1___ftmul
 21387 ;;		i1___fttol
 21388 ;;		i1___lmul
 21389 ;; This function is called by:
 21390 ;;		i1_pressENTER
 21391 ;; This function uses a non-reentrant model
 21392 ;;
 21393                           
 21394                           	psect	text88
 21395  002DA6                     __ptext88:
 21396                           	opt stack 0
 21397  002DA6                     i1_desintegrator:
 21398                           	opt stack 11
 21399                           
 21400                           ;DisplayProtocol.h: 47: chanValSection = 5;
 21401                           
 21402                           ;incstack = 0
 21403  002DA6  0E05               	movlw	5
 21404  002DA8  0101               	movlb	1	; () banked
 21405  002DAA  6F94               	movwf	_chanValSection& (0+255),b
 21406                           
 21407                           ; BSR set to: 1
 21408                           ;DisplayProtocol.h: 48: float temp = (float)chanValf*1000;
 21409  002DAC  C1AE  F068         	movff	_chanValf,i1___ftmul@f1
 21410  002DB0  C1AF  F069         	movff	_chanValf+1,i1___ftmul@f1+1
 21411  002DB4  C1B0  F06A         	movff	_chanValf+2,i1___ftmul@f1+2
 21412  002DB8  0E00               	movlw	0
 21413  002DBA  0100               	movlb	0	; () banked
 21414  002DBC  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 21415  002DBE  0E7A               	movlw	122
 21416  002DC0  0100               	movlb	0	; () banked
 21417  002DC2  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 21418  002DC4  0E44               	movlw	68
 21419  002DC6  0100               	movlb	0	; () banked
 21420  002DC8  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 21421  002DCA  ECB5  F01A         	call	i1___ftmul	;wreg free
 21422  002DCE  C068  F079         	movff	?i1___ftmul,i1desintegrator@temp
 21423  002DD2  C069  F07A         	movff	?i1___ftmul+1,i1desintegrator@temp+1
 21424  002DD6  C06A  F07B         	movff	?i1___ftmul+2,i1desintegrator@temp+2
 21425                           
 21426                           ;DisplayProtocol.h: 49: long tempL = (long)temp;
 21427  002DDA  C079  F060         	movff	i1desintegrator@temp,i1___fttol@f1
 21428  002DDE  C07A  F061         	movff	i1desintegrator@temp+1,i1___fttol@f1+1
 21429  002DE2  C07B  F062         	movff	i1desintegrator@temp+2,i1___fttol@f1+2
 21430  002DE6  EC52  F01D         	call	i1___fttol	;wreg free
 21431  002DEA  C060  F07C         	movff	?i1___fttol,i1desintegrator@tempL
 21432  002DEE  C061  F07D         	movff	?i1___fttol+1,i1desintegrator@tempL+1
 21433  002DF2  C062  F07E         	movff	?i1___fttol+2,i1desintegrator@tempL+2
 21434  002DF6  C063  F07F         	movff	?i1___fttol+3,i1desintegrator@tempL+3
 21435                           
 21436                           ;DisplayProtocol.h: 50: long temp2 = 0;
 21437  002DFA  0E00               	movlw	0
 21438  002DFC  0100               	movlb	0	; () banked
 21439  002DFE  6F84               	movwf	i1desintegrator@temp2& (0+255),b
 21440  002E00  0E00               	movlw	0
 21441  002E02  6F85               	movwf	(i1desintegrator@temp2+1)& (0+255),b
 21442  002E04  0E00               	movlw	0
 21443  002E06  6F86               	movwf	(i1desintegrator@temp2+2)& (0+255),b
 21444  002E08  0E00               	movlw	0
 21445  002E0A  6F87               	movwf	(i1desintegrator@temp2+3)& (0+255),b
 21446                           
 21447                           ;DisplayProtocol.h: 51: long temp3 = 0;
 21448  002E0C  0E00               	movlw	0
 21449  002E0E  0100               	movlb	0	; () banked
 21450  002E10  6F80               	movwf	i1desintegrator@temp3& (0+255),b
 21451  002E12  0E00               	movlw	0
 21452  002E14  6F81               	movwf	(i1desintegrator@temp3+1)& (0+255),b
 21453  002E16  0E00               	movlw	0
 21454  002E18  6F82               	movwf	(i1desintegrator@temp3+2)& (0+255),b
 21455  002E1A  0E00               	movlw	0
 21456  002E1C  6F83               	movwf	(i1desintegrator@temp3+3)& (0+255),b
 21457                           
 21458                           ;DisplayProtocol.h: 52: int i;
 21459                           ;DisplayProtocol.h: 53: for(i = 0; i < 6; i++) {
 21460  002E1E  0E00               	movlw	0
 21461  002E20  0100               	movlb	0	; () banked
 21462  002E22  6F89               	movwf	(i1desintegrator@i+1)& (0+255),b
 21463  002E24  0E00               	movlw	0
 21464  002E26  6F88               	movwf	i1desintegrator@i& (0+255),b
 21465                           
 21466                           ; BSR set to: 0
 21467  002E28  0100               	movlb	0	; () banked
 21468  002E2A  BF89               	btfsc	(i1desintegrator@i+1)& (0+255),7,b
 21469  002E2C  D00A               	goto	i1l10737
 21470  002E2E  0100               	movlb	0	; () banked
 21471  002E30  5189               	movf	(i1desintegrator@i+1)& (0+255),w,b
 21472  002E32  E106               	bnz	i1u1531_20
 21473  002E34  0E06               	movlw	6
 21474  002E36  0100               	movlb	0	; () banked
 21475  002E38  5D88               	subwf	i1desintegrator@i& (0+255),w,b
 21476  002E3A  B0D8               	btfsc	status,0,c
 21477  002E3C  0012               	return	
 21478  002E3E  D001               	goto	i1l10737
 21479  002E40                     i1u1531_20:
 21480                           
 21481                           ; BSR set to: 0
 21482  002E40  0012               	return	
 21483  002E42                     i1l10737:
 21484                           
 21485                           ; BSR set to: 0
 21486                           ;DisplayProtocol.h: 54: temp2 = tempL/exp10[i];
 21487  002E42  C07C  F060         	movff	i1desintegrator@tempL,i1___aldiv@dividend
 21488  002E46  C07D  F061         	movff	i1desintegrator@tempL+1,i1___aldiv@dividend+1
 21489  002E4A  C07E  F062         	movff	i1desintegrator@tempL+2,i1___aldiv@dividend+2
 21490  002E4E  C07F  F063         	movff	i1desintegrator@tempL+3,i1___aldiv@dividend+3
 21491  002E52  0E77               	movlw	low _exp10
 21492  002E54  0100               	movlb	0	; () banked
 21493  002E56  6F77               	movwf	??i1_desintegrator& (0+255),b
 21494  002E58  0E01               	movlw	high _exp10
 21495  002E5A  0100               	movlb	0	; () banked
 21496  002E5C  6F78               	movwf	(??i1_desintegrator+1)& (0+255),b
 21497  002E5E  90D8               	bcf	status,0,c
 21498  002E60  0100               	movlb	0	; () banked
 21499  002E62  3588               	rlcf	i1desintegrator@i& (0+255),w,b
 21500  002E64  6ED9               	movwf	fsr2l,c
 21501  002E66  0100               	movlb	0	; () banked
 21502  002E68  3589               	rlcf	(i1desintegrator@i+1)& (0+255),w,b
 21503  002E6A  6EDA               	movwf	fsr2h,c
 21504  002E6C  90D8               	bcf	status,0,c
 21505  002E6E  36D9               	rlcf	fsr2l,f,c
 21506  002E70  36DA               	rlcf	fsr2h,f,c
 21507  002E72  0100               	movlb	0	; () banked
 21508  002E74  5177               	movf	??i1_desintegrator& (0+255),w,b
 21509  002E76  26D9               	addwf	fsr2l,f,c
 21510  002E78  0100               	movlb	0	; () banked
 21511  002E7A  5178               	movf	(??i1_desintegrator+1)& (0+255),w,b
 21512  002E7C  22DA               	addwfc	fsr2h,f,c
 21513  002E7E  CFDE F064          	movff	postinc2,i1___aldiv@divisor
 21514  002E82  CFDE F065          	movff	postinc2,i1___aldiv@divisor+1
 21515  002E86  CFDE F066          	movff	postinc2,i1___aldiv@divisor+2
 21516  002E8A  CFDE F067          	movff	postinc2,i1___aldiv@divisor+3
 21517  002E8E  ECA3  F01F         	call	i1___aldiv	;wreg free
 21518  002E92  C060  F084         	movff	?i1___aldiv,i1desintegrator@temp2
 21519  002E96  C061  F085         	movff	?i1___aldiv+1,i1desintegrator@temp2+1
 21520  002E9A  C062  F086         	movff	?i1___aldiv+2,i1desintegrator@temp2+2
 21521  002E9E  C063  F087         	movff	?i1___aldiv+3,i1desintegrator@temp2+3
 21522                           
 21523                           ;DisplayProtocol.h: 55: temp3 = temp2*exp10[i];
 21524  002EA2  0E77               	movlw	low _exp10
 21525  002EA4  0100               	movlb	0	; () banked
 21526  002EA6  6F77               	movwf	??i1_desintegrator& (0+255),b
 21527  002EA8  0E01               	movlw	high _exp10
 21528  002EAA  0100               	movlb	0	; () banked
 21529  002EAC  6F78               	movwf	(??i1_desintegrator+1)& (0+255),b
 21530  002EAE  90D8               	bcf	status,0,c
 21531  002EB0  0100               	movlb	0	; () banked
 21532  002EB2  3588               	rlcf	i1desintegrator@i& (0+255),w,b
 21533  002EB4  6ED9               	movwf	fsr2l,c
 21534  002EB6  0100               	movlb	0	; () banked
 21535  002EB8  3589               	rlcf	(i1desintegrator@i+1)& (0+255),w,b
 21536  002EBA  6EDA               	movwf	fsr2h,c
 21537  002EBC  90D8               	bcf	status,0,c
 21538  002EBE  36D9               	rlcf	fsr2l,f,c
 21539  002EC0  36DA               	rlcf	fsr2h,f,c
 21540  002EC2  0100               	movlb	0	; () banked
 21541  002EC4  5177               	movf	??i1_desintegrator& (0+255),w,b
 21542  002EC6  26D9               	addwf	fsr2l,f,c
 21543  002EC8  0100               	movlb	0	; () banked
 21544  002ECA  5178               	movf	(??i1_desintegrator+1)& (0+255),w,b
 21545  002ECC  22DA               	addwfc	fsr2h,f,c
 21546  002ECE  CFDE F060          	movff	postinc2,i1___lmul@multiplier
 21547  002ED2  CFDE F061          	movff	postinc2,i1___lmul@multiplier+1
 21548  002ED6  CFDE F062          	movff	postinc2,i1___lmul@multiplier+2
 21549  002EDA  CFDE F063          	movff	postinc2,i1___lmul@multiplier+3
 21550  002EDE  C084  F064         	movff	i1desintegrator@temp2,i1___lmul@multiplicand
 21551  002EE2  C085  F065         	movff	i1desintegrator@temp2+1,i1___lmul@multiplicand+1
 21552  002EE6  C086  F066         	movff	i1desintegrator@temp2+2,i1___lmul@multiplicand+2
 21553  002EEA  C087  F067         	movff	i1desintegrator@temp2+3,i1___lmul@multiplicand+3
 21554  002EEE  EC1A  F031         	call	i1___lmul	;wreg free
 21555  002EF2  C060  F080         	movff	?i1___lmul,i1desintegrator@temp3
 21556  002EF6  C061  F081         	movff	?i1___lmul+1,i1desintegrator@temp3+1
 21557  002EFA  C062  F082         	movff	?i1___lmul+2,i1desintegrator@temp3+2
 21558  002EFE  C063  F083         	movff	?i1___lmul+3,i1desintegrator@temp3+3
 21559                           
 21560                           ;DisplayProtocol.h: 56: chanValdig[i] = temp2;
 21561  002F02  0EA0               	movlw	low _chanValdig
 21562  002F04  0100               	movlb	0	; () banked
 21563  002F06  2588               	addwf	i1desintegrator@i& (0+255),w,b
 21564  002F08  6ED9               	movwf	fsr2l,c
 21565  002F0A  0E01               	movlw	high _chanValdig
 21566  002F0C  0100               	movlb	0	; () banked
 21567  002F0E  2189               	addwfc	(i1desintegrator@i+1)& (0+255),w,b
 21568  002F10  6EDA               	movwf	fsr2h,c
 21569  002F12  C084  FFDF         	movff	i1desintegrator@temp2,indf2
 21570                           
 21571                           ; BSR set to: 0
 21572                           ;DisplayProtocol.h: 57: tempL -= temp3;
 21573  002F16  0100               	movlb	0	; () banked
 21574  002F18  5180               	movf	i1desintegrator@temp3& (0+255),w,b
 21575  002F1A  0100               	movlb	0	; () banked
 21576  002F1C  5F7C               	subwf	i1desintegrator@tempL& (0+255),f,b
 21577  002F1E  0100               	movlb	0	; () banked
 21578  002F20  5181               	movf	(i1desintegrator@temp3+1)& (0+255),w,b
 21579  002F22  0100               	movlb	0	; () banked
 21580  002F24  5B7D               	subwfb	(i1desintegrator@tempL+1)& (0+255),f,b
 21581  002F26  0100               	movlb	0	; () banked
 21582  002F28  5182               	movf	(i1desintegrator@temp3+2)& (0+255),w,b
 21583  002F2A  0100               	movlb	0	; () banked
 21584  002F2C  5B7E               	subwfb	(i1desintegrator@tempL+2)& (0+255),f,b
 21585  002F2E  0100               	movlb	0	; () banked
 21586  002F30  5183               	movf	(i1desintegrator@temp3+3)& (0+255),w,b
 21587  002F32  0100               	movlb	0	; () banked
 21588  002F34  5B7F               	subwfb	(i1desintegrator@tempL+3)& (0+255),f,b
 21589                           
 21590                           ; BSR set to: 0
 21591  002F36  0100               	movlb	0	; () banked
 21592  002F38  4B88               	infsnz	i1desintegrator@i& (0+255),f,b
 21593  002F3A  2B89               	incf	(i1desintegrator@i+1)& (0+255),f,b
 21594                           
 21595                           ; BSR set to: 0
 21596  002F3C  0100               	movlb	0	; () banked
 21597  002F3E  BF89               	btfsc	(i1desintegrator@i+1)& (0+255),7,b
 21598  002F40  D780               	goto	i1l10737
 21599  002F42  0100               	movlb	0	; () banked
 21600  002F44  5189               	movf	(i1desintegrator@i+1)& (0+255),w,b
 21601  002F46  E101               	bnz	i1l537
 21602  002F48  D775               	goto	L8
 21603  002F4A                     i1l537:
 21604                           
 21605                           ; BSR set to: 0
 21606  002F4A  0012               	return		;funcret
 21607  002F4C                     __end_ofi1_desintegrator:
 21608                           	opt stack 0
 21609                           pclatu	equ	0xFFB
 21610                           pclath	equ	0xFFA
 21611                           tblptru	equ	0xFF8
 21612                           tblptrh	equ	0xFF7
 21613                           tblptrl	equ	0xFF6
 21614                           tablat	equ	0xFF5
 21615                           prodh	equ	0xFF4
 21616                           prodl	equ	0xFF3
 21617                           intcon	equ	0xFF2
 21618                           postinc0	equ	0xFEE
 21619                           fsr0h	equ	0xFEA
 21620                           fsr0l	equ	0xFE9
 21621                           wreg	equ	0xFE8
 21622                           postdec1	equ	0xFE5
 21623                           fsr1h	equ	0xFE2
 21624                           fsr1l	equ	0xFE1
 21625                           bsr	equ	0xFE0
 21626                           indf2	equ	0xFDF
 21627                           postinc2	equ	0xFDE
 21628                           postdec2	equ	0xFDD
 21629                           plusw2	equ	0xFDB
 21630                           fsr2h	equ	0xFDA
 21631                           fsr2l	equ	0xFD9
 21632                           status	equ	0xFD8
 21633                           
 21634 ;; *************** function i1___fttol *****************
 21635 ;; Defined at:
 21636 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\fttol.c"
 21637 ;; Parameters:    Size  Location     Type
 21638 ;;  f1              3    0[BANK0 ] float 
 21639 ;; Auto vars:     Size  Location     Type
 21640 ;;  __fttol         4   10[BANK0 ] unsigned long 
 21641 ;;  __fttol         1   14[BANK0 ] unsigned char 
 21642 ;;  __fttol         1    9[BANK0 ] unsigned char 
 21643 ;; Return value:  Size  Location     Type
 21644 ;;                  4    0[BANK0 ] long 
 21645 ;; Registers used:
 21646 ;;		wreg, status,2, status,0
 21647 ;; Tracked objects:
 21648 ;;		On entry : 0/0
 21649 ;;		On exit  : 0/0
 21650 ;;		Unchanged: 0/0
 21651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21652 ;;      Params:         0       4       0       0       0       0       0
 21653 ;;      Locals:         0       6       0       0       0       0       0
 21654 ;;      Temps:          0       5       0       0       0       0       0
 21655 ;;      Totals:         0      15       0       0       0       0       0
 21656 ;;Total ram usage:       15 bytes
 21657 ;; Hardware stack levels used:    1
 21658 ;; Hardware stack levels required when called:    4
 21659 ;; This function calls:
 21660 ;;		Nothing
 21661 ;; This function is called by:
 21662 ;;		i1_desintegrator
 21663 ;; This function uses a non-reentrant model
 21664 ;;
 21665                           
 21666                           	psect	text89
 21667  003AA4                     __ptext89:
 21668                           	opt stack 0
 21669  003AA4                     i1___fttol:
 21670                           	opt stack 12
 21671                           
 21672                           ; BSR set to: 0
 21673                           ;incstack = 0
 21674  003AA4  C062  F064         	movff	i1___fttol@f1+2,??i1___fttol
 21675  003AA8  0100               	movlb	0	; () banked
 21676  003AAA  6B65               	clrf	(??i1___fttol+1)& (0+255),b
 21677  003AAC  6B66               	clrf	(??i1___fttol+2)& (0+255),b
 21678  003AAE  0100               	movlb	0	; () banked
 21679  003AB0  3561               	rlcf	(i1___fttol@f1+1)& (0+255),w,b
 21680  003AB2  0100               	movlb	0	; () banked
 21681  003AB4  3764               	rlcf	??i1___fttol& (0+255),f,b
 21682  003AB6  E301               	bnc	u1486_21
 21683  003AB8  8165               	bsf	(??i1___fttol+1)& (0+255),0,b
 21684  003ABA                     u1486_21:
 21685  003ABA  0100               	movlb	0	; () banked
 21686  003ABC  5164               	movf	??i1___fttol& (0+255),w,b
 21687  003ABE  0100               	movlb	0	; () banked
 21688  003AC0  6F6E               	movwf	i1___fttol@exp1& (0+255),b
 21689  003AC2  0100               	movlb	0	; () banked
 21690  003AC4  516E               	movf	i1___fttol@exp1& (0+255),w,b
 21691  003AC6  A4D8               	btfss	status,2,c
 21692  003AC8  D00A               	goto	i1l10457
 21693                           
 21694                           ; BSR set to: 0
 21695  003ACA  0E00               	movlw	0
 21696  003ACC  0100               	movlb	0	; () banked
 21697  003ACE  6F60               	movwf	?i1___fttol& (0+255),b
 21698  003AD0  0E00               	movlw	0
 21699  003AD2  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 21700  003AD4  0E00               	movlw	0
 21701  003AD6  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 21702  003AD8  0E00               	movlw	0
 21703  003ADA  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 21704                           
 21705                           ; BSR set to: 0
 21706  003ADC  0012               	return	
 21707  003ADE                     i1l10457:
 21708                           
 21709                           ; BSR set to: 0
 21710  003ADE  0E17               	movlw	23
 21711  003AE0  0100               	movlb	0	; () banked
 21712  003AE2  6F64               	movwf	??i1___fttol& (0+255),b
 21713  003AE4  C060  F065         	movff	i1___fttol@f1,??i1___fttol+1
 21714  003AE8  C061  F066         	movff	i1___fttol@f1+1,??i1___fttol+2
 21715  003AEC  C062  F067         	movff	i1___fttol@f1+2,??i1___fttol+3
 21716  003AF0  0100               	movlb	0	; () banked
 21717  003AF2  2964               	incf	??i1___fttol& (0+255),w,b
 21718  003AF4  0100               	movlb	0	; () banked
 21719  003AF6  6F68               	movwf	(??i1___fttol+4)& (0+255),b
 21720  003AF8  D005               	goto	i1u1488_20
 21721  003AFA                     i1u1488_25:
 21722  003AFA  0100               	movlb	0	; () banked
 21723  003AFC  90D8               	bcf	status,0,c
 21724  003AFE  3367               	rrcf	(??i1___fttol+3)& (0+255),f,b
 21725  003B00  3366               	rrcf	(??i1___fttol+2)& (0+255),f,b
 21726  003B02  3365               	rrcf	(??i1___fttol+1)& (0+255),f,b
 21727  003B04                     i1u1488_20:
 21728  003B04  0100               	movlb	0	; () banked
 21729  003B06  2F68               	decfsz	(??i1___fttol+4)& (0+255),f,b
 21730  003B08  D7F8               	goto	i1u1488_25
 21731  003B0A  0100               	movlb	0	; () banked
 21732  003B0C  5165               	movf	(??i1___fttol+1)& (0+255),w,b
 21733  003B0E  0100               	movlb	0	; () banked
 21734  003B10  6F69               	movwf	i1___fttol@sign1& (0+255),b
 21735                           
 21736                           ; BSR set to: 0
 21737  003B12  0100               	movlb	0	; () banked
 21738  003B14  8F61               	bsf	(i1___fttol@f1+1)& (0+255),7,b
 21739                           
 21740                           ; BSR set to: 0
 21741  003B16  0EFF               	movlw	255
 21742  003B18  0100               	movlb	0	; () banked
 21743  003B1A  1760               	andwf	i1___fttol@f1& (0+255),f,b
 21744  003B1C  0EFF               	movlw	255
 21745  003B1E  0100               	movlb	0	; () banked
 21746  003B20  1761               	andwf	(i1___fttol@f1+1)& (0+255),f,b
 21747  003B22  0E00               	movlw	0
 21748  003B24  0100               	movlb	0	; () banked
 21749  003B26  1762               	andwf	(i1___fttol@f1+2)& (0+255),f,b
 21750                           
 21751                           ; BSR set to: 0
 21752  003B28  0100               	movlb	0	; () banked
 21753  003B2A  5160               	movf	i1___fttol@f1& (0+255),w,b
 21754  003B2C  0100               	movlb	0	; () banked
 21755  003B2E  6F6A               	movwf	i1___fttol@lval& (0+255),b
 21756  003B30  0100               	movlb	0	; () banked
 21757  003B32  5161               	movf	(i1___fttol@f1+1)& (0+255),w,b
 21758  003B34  0100               	movlb	0	; () banked
 21759  003B36  6F6B               	movwf	(i1___fttol@lval+1)& (0+255),b
 21760  003B38  0100               	movlb	0	; () banked
 21761  003B3A  5162               	movf	(i1___fttol@f1+2)& (0+255),w,b
 21762  003B3C  0100               	movlb	0	; () banked
 21763  003B3E  6F6C               	movwf	(i1___fttol@lval+2)& (0+255),b
 21764  003B40  0100               	movlb	0	; () banked
 21765  003B42  6B6D               	clrf	(i1___fttol@lval+3)& (0+255),b
 21766                           
 21767                           ; BSR set to: 0
 21768  003B44  0E8E               	movlw	142
 21769  003B46  0100               	movlb	0	; () banked
 21770  003B48  5F6E               	subwf	i1___fttol@exp1& (0+255),f,b
 21771                           
 21772                           ; BSR set to: 0
 21773  003B4A  0100               	movlb	0	; () banked
 21774  003B4C  AF6E               	btfss	i1___fttol@exp1& (0+255),7,b
 21775  003B4E  D01A               	goto	i1l10479
 21776                           
 21777                           ; BSR set to: 0
 21778  003B50  0100               	movlb	0	; () banked
 21779  003B52  516E               	movf	i1___fttol@exp1& (0+255),w,b
 21780  003B54  0A80               	xorlw	128
 21781  003B56  0F8F               	addlw	143
 21782  003B58  B0D8               	btfsc	status,0,c
 21783  003B5A  D00A               	goto	i1l10475
 21784                           
 21785                           ; BSR set to: 0
 21786  003B5C  0E00               	movlw	0
 21787  003B5E  0100               	movlb	0	; () banked
 21788  003B60  6F60               	movwf	?i1___fttol& (0+255),b
 21789  003B62  0E00               	movlw	0
 21790  003B64  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 21791  003B66  0E00               	movlw	0
 21792  003B68  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 21793  003B6A  0E00               	movlw	0
 21794  003B6C  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 21795                           
 21796                           ; BSR set to: 0
 21797  003B6E  0012               	return	
 21798  003B70                     i1l10475:
 21799                           
 21800                           ; BSR set to: 0
 21801  003B70  0100               	movlb	0	; () banked
 21802  003B72  90D8               	bcf	status,0,c
 21803  003B74  336D               	rrcf	(i1___fttol@lval+3)& (0+255),f,b
 21804  003B76  336C               	rrcf	(i1___fttol@lval+2)& (0+255),f,b
 21805  003B78  336B               	rrcf	(i1___fttol@lval+1)& (0+255),f,b
 21806  003B7A  336A               	rrcf	i1___fttol@lval& (0+255),f,b
 21807                           
 21808                           ; BSR set to: 0
 21809  003B7C  0100               	movlb	0	; () banked
 21810  003B7E  3F6E               	incfsz	i1___fttol@exp1& (0+255),f,b
 21811  003B80  D7F7               	goto	i1l10475
 21812                           
 21813                           ; BSR set to: 0
 21814  003B82  D01B               	goto	i1l10489
 21815  003B84                     i1l10479:
 21816                           
 21817                           ; BSR set to: 0
 21818  003B84  0E17               	movlw	23
 21819  003B86  0100               	movlb	0	; () banked
 21820  003B88  656E               	cpfsgt	i1___fttol@exp1& (0+255),b
 21821  003B8A  D012               	goto	i1l10487
 21822                           
 21823                           ; BSR set to: 0
 21824  003B8C  0E00               	movlw	0
 21825  003B8E  0100               	movlb	0	; () banked
 21826  003B90  6F60               	movwf	?i1___fttol& (0+255),b
 21827  003B92  0E00               	movlw	0
 21828  003B94  6F61               	movwf	(?i1___fttol+1)& (0+255),b
 21829  003B96  0E00               	movlw	0
 21830  003B98  6F62               	movwf	(?i1___fttol+2)& (0+255),b
 21831  003B9A  0E00               	movlw	0
 21832  003B9C  6F63               	movwf	(?i1___fttol+3)& (0+255),b
 21833                           
 21834                           ; BSR set to: 0
 21835  003B9E  0012               	return	
 21836  003BA0                     i1l10485:
 21837                           
 21838                           ; BSR set to: 0
 21839  003BA0  0100               	movlb	0	; () banked
 21840  003BA2  90D8               	bcf	status,0,c
 21841  003BA4  376A               	rlcf	i1___fttol@lval& (0+255),f,b
 21842  003BA6  376B               	rlcf	(i1___fttol@lval+1)& (0+255),f,b
 21843  003BA8  376C               	rlcf	(i1___fttol@lval+2)& (0+255),f,b
 21844  003BAA  376D               	rlcf	(i1___fttol@lval+3)& (0+255),f,b
 21845  003BAC  0100               	movlb	0	; () banked
 21846  003BAE  076E               	decf	i1___fttol@exp1& (0+255),f,b
 21847  003BB0                     i1l10487:
 21848                           
 21849                           ; BSR set to: 0
 21850  003BB0  0100               	movlb	0	; () banked
 21851  003BB2  516E               	movf	i1___fttol@exp1& (0+255),w,b
 21852  003BB4  0100               	movlb	0	; () banked
 21853  003BB6  A4D8               	btfss	status,2,c
 21854  003BB8  D7F3               	goto	i1l10485
 21855  003BBA                     i1l10489:
 21856                           
 21857                           ; BSR set to: 0
 21858  003BBA  0100               	movlb	0	; () banked
 21859  003BBC  5169               	movf	i1___fttol@sign1& (0+255),w,b
 21860  003BBE  0100               	movlb	0	; () banked
 21861  003BC0  B4D8               	btfsc	status,2,c
 21862  003BC2  D009               	goto	i1l10493
 21863                           
 21864                           ; BSR set to: 0
 21865  003BC4  0100               	movlb	0	; () banked
 21866  003BC6  1F6D               	comf	(i1___fttol@lval+3)& (0+255),f,b
 21867  003BC8  1F6C               	comf	(i1___fttol@lval+2)& (0+255),f,b
 21868  003BCA  1F6B               	comf	(i1___fttol@lval+1)& (0+255),f,b
 21869  003BCC  6D6A               	negf	i1___fttol@lval& (0+255),b
 21870  003BCE  0E00               	movlw	0
 21871  003BD0  236B               	addwfc	(i1___fttol@lval+1)& (0+255),f,b
 21872  003BD2  236C               	addwfc	(i1___fttol@lval+2)& (0+255),f,b
 21873  003BD4  236D               	addwfc	(i1___fttol@lval+3)& (0+255),f,b
 21874  003BD6                     i1l10493:
 21875                           
 21876                           ; BSR set to: 0
 21877  003BD6  C06A  F060         	movff	i1___fttol@lval,?i1___fttol
 21878  003BDA  C06B  F061         	movff	i1___fttol@lval+1,?i1___fttol+1
 21879  003BDE  C06C  F062         	movff	i1___fttol@lval+2,?i1___fttol+2
 21880  003BE2  C06D  F063         	movff	i1___fttol@lval+3,?i1___fttol+3
 21881  003BE6  0012               	return	
 21882  003BE8                     __end_ofi1___fttol:
 21883                           	opt stack 0
 21884                           pclatu	equ	0xFFB
 21885                           pclath	equ	0xFFA
 21886                           tblptru	equ	0xFF8
 21887                           tblptrh	equ	0xFF7
 21888                           tblptrl	equ	0xFF6
 21889                           tablat	equ	0xFF5
 21890                           prodh	equ	0xFF4
 21891                           prodl	equ	0xFF3
 21892                           intcon	equ	0xFF2
 21893                           postinc0	equ	0xFEE
 21894                           fsr0h	equ	0xFEA
 21895                           fsr0l	equ	0xFE9
 21896                           wreg	equ	0xFE8
 21897                           postdec1	equ	0xFE5
 21898                           fsr1h	equ	0xFE2
 21899                           fsr1l	equ	0xFE1
 21900                           bsr	equ	0xFE0
 21901                           indf2	equ	0xFDF
 21902                           postinc2	equ	0xFDE
 21903                           postdec2	equ	0xFDD
 21904                           plusw2	equ	0xFDB
 21905                           fsr2h	equ	0xFDA
 21906                           fsr2l	equ	0xFD9
 21907                           status	equ	0xFD8
 21908                           
 21909 ;; *************** function i1___aldiv *****************
 21910 ;; Defined at:
 21911 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\aldiv.c"
 21912 ;; Parameters:    Size  Location     Type
 21913 ;;  dividend        4    0[BANK0 ] long 
 21914 ;;  divisor         4    4[BANK0 ] long 
 21915 ;; Auto vars:     Size  Location     Type
 21916 ;;  __aldiv         4   10[BANK0 ] long 
 21917 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 21918 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 21919 ;; Return value:  Size  Location     Type
 21920 ;;                  4    0[BANK0 ] long 
 21921 ;; Registers used:
 21922 ;;		wreg, status,2, status,0
 21923 ;; Tracked objects:
 21924 ;;		On entry : 0/0
 21925 ;;		On exit  : 0/0
 21926 ;;		Unchanged: 0/0
 21927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21928 ;;      Params:         0       8       0       0       0       0       0
 21929 ;;      Locals:         0       6       0       0       0       0       0
 21930 ;;      Temps:          0       0       0       0       0       0       0
 21931 ;;      Totals:         0      14       0       0       0       0       0
 21932 ;;Total ram usage:       14 bytes
 21933 ;; Hardware stack levels used:    1
 21934 ;; Hardware stack levels required when called:    4
 21935 ;; This function calls:
 21936 ;;		Nothing
 21937 ;; This function is called by:
 21938 ;;		i1_desintegrator
 21939 ;; This function uses a non-reentrant model
 21940 ;;
 21941                           
 21942                           	psect	text90
 21943  003F46                     __ptext90:
 21944                           	opt stack 0
 21945  003F46                     i1___aldiv:
 21946                           	opt stack 12
 21947                           
 21948                           ; BSR set to: 0
 21949                           ;incstack = 0
 21950  003F46  0E00               	movlw	0
 21951  003F48  0100               	movlb	0	; () banked
 21952  003F4A  6F69               	movwf	i1___aldiv@sign& (0+255),b
 21953                           
 21954                           ; BSR set to: 0
 21955  003F4C  0100               	movlb	0	; () banked
 21956  003F4E  AF67               	btfss	(i1___aldiv@divisor+3)& (0+255),7,b
 21957  003F50  D00C               	goto	i1l10399
 21958                           
 21959                           ; BSR set to: 0
 21960  003F52  0100               	movlb	0	; () banked
 21961  003F54  1F67               	comf	(i1___aldiv@divisor+3)& (0+255),f,b
 21962  003F56  1F66               	comf	(i1___aldiv@divisor+2)& (0+255),f,b
 21963  003F58  1F65               	comf	(i1___aldiv@divisor+1)& (0+255),f,b
 21964  003F5A  6D64               	negf	i1___aldiv@divisor& (0+255),b
 21965  003F5C  0E00               	movlw	0
 21966  003F5E  2365               	addwfc	(i1___aldiv@divisor+1)& (0+255),f,b
 21967  003F60  2366               	addwfc	(i1___aldiv@divisor+2)& (0+255),f,b
 21968  003F62  2367               	addwfc	(i1___aldiv@divisor+3)& (0+255),f,b
 21969                           
 21970                           ; BSR set to: 0
 21971  003F64  0E01               	movlw	1
 21972  003F66  0100               	movlb	0	; () banked
 21973  003F68  6F69               	movwf	i1___aldiv@sign& (0+255),b
 21974  003F6A                     i1l10399:
 21975                           
 21976                           ; BSR set to: 0
 21977  003F6A  0100               	movlb	0	; () banked
 21978  003F6C  AF63               	btfss	(i1___aldiv@dividend+3)& (0+255),7,b
 21979  003F6E  D00C               	goto	i1l10405
 21980                           
 21981                           ; BSR set to: 0
 21982  003F70  0100               	movlb	0	; () banked
 21983  003F72  1F63               	comf	(i1___aldiv@dividend+3)& (0+255),f,b
 21984  003F74  1F62               	comf	(i1___aldiv@dividend+2)& (0+255),f,b
 21985  003F76  1F61               	comf	(i1___aldiv@dividend+1)& (0+255),f,b
 21986  003F78  6D60               	negf	i1___aldiv@dividend& (0+255),b
 21987  003F7A  0E00               	movlw	0
 21988  003F7C  2361               	addwfc	(i1___aldiv@dividend+1)& (0+255),f,b
 21989  003F7E  2362               	addwfc	(i1___aldiv@dividend+2)& (0+255),f,b
 21990  003F80  2363               	addwfc	(i1___aldiv@dividend+3)& (0+255),f,b
 21991                           
 21992                           ; BSR set to: 0
 21993  003F82  0E01               	movlw	1
 21994  003F84  0100               	movlb	0	; () banked
 21995  003F86  1B69               	xorwf	i1___aldiv@sign& (0+255),f,b
 21996  003F88                     i1l10405:
 21997                           
 21998                           ; BSR set to: 0
 21999  003F88  0E00               	movlw	0
 22000  003F8A  0100               	movlb	0	; () banked
 22001  003F8C  6F6A               	movwf	i1___aldiv@quotient& (0+255),b
 22002  003F8E  0E00               	movlw	0
 22003  003F90  6F6B               	movwf	(i1___aldiv@quotient+1)& (0+255),b
 22004  003F92  0E00               	movlw	0
 22005  003F94  6F6C               	movwf	(i1___aldiv@quotient+2)& (0+255),b
 22006  003F96  0E00               	movlw	0
 22007  003F98  6F6D               	movwf	(i1___aldiv@quotient+3)& (0+255),b
 22008                           
 22009                           ; BSR set to: 0
 22010  003F9A  0100               	movlb	0	; () banked
 22011  003F9C  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 22012  003F9E  0100               	movlb	0	; () banked
 22013  003FA0  1165               	iorwf	(i1___aldiv@divisor+1)& (0+255),w,b
 22014  003FA2  0100               	movlb	0	; () banked
 22015  003FA4  1166               	iorwf	(i1___aldiv@divisor+2)& (0+255),w,b
 22016  003FA6  0100               	movlb	0	; () banked
 22017  003FA8  1167               	iorwf	(i1___aldiv@divisor+3)& (0+255),w,b
 22018  003FAA  B4D8               	btfsc	status,2,c
 22019  003FAC  D042               	goto	i1l10427
 22020                           
 22021                           ; BSR set to: 0
 22022  003FAE  0E01               	movlw	1
 22023  003FB0  0100               	movlb	0	; () banked
 22024  003FB2  6F68               	movwf	i1___aldiv@counter& (0+255),b
 22025  003FB4  D008               	goto	i1l10413
 22026  003FB6                     i1l10411:
 22027                           
 22028                           ; BSR set to: 0
 22029  003FB6  0100               	movlb	0	; () banked
 22030  003FB8  90D8               	bcf	status,0,c
 22031  003FBA  3764               	rlcf	i1___aldiv@divisor& (0+255),f,b
 22032  003FBC  3765               	rlcf	(i1___aldiv@divisor+1)& (0+255),f,b
 22033  003FBE  3766               	rlcf	(i1___aldiv@divisor+2)& (0+255),f,b
 22034  003FC0  3767               	rlcf	(i1___aldiv@divisor+3)& (0+255),f,b
 22035  003FC2  0100               	movlb	0	; () banked
 22036  003FC4  2B68               	incf	i1___aldiv@counter& (0+255),f,b
 22037  003FC6                     i1l10413:
 22038                           
 22039                           ; BSR set to: 0
 22040  003FC6  0100               	movlb	0	; () banked
 22041  003FC8  AF67               	btfss	(i1___aldiv@divisor+3)& (0+255),7,b
 22042  003FCA  D7F5               	goto	i1l10411
 22043  003FCC                     i1l10415:
 22044                           
 22045                           ; BSR set to: 0
 22046  003FCC  0100               	movlb	0	; () banked
 22047  003FCE  90D8               	bcf	status,0,c
 22048  003FD0  376A               	rlcf	i1___aldiv@quotient& (0+255),f,b
 22049  003FD2  376B               	rlcf	(i1___aldiv@quotient+1)& (0+255),f,b
 22050  003FD4  376C               	rlcf	(i1___aldiv@quotient+2)& (0+255),f,b
 22051  003FD6  376D               	rlcf	(i1___aldiv@quotient+3)& (0+255),f,b
 22052                           
 22053                           ; BSR set to: 0
 22054  003FD8  0100               	movlb	0	; () banked
 22055  003FDA  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 22056  003FDC  0100               	movlb	0	; () banked
 22057  003FDE  5D60               	subwf	i1___aldiv@dividend& (0+255),w,b
 22058  003FE0  0100               	movlb	0	; () banked
 22059  003FE2  5165               	movf	(i1___aldiv@divisor+1)& (0+255),w,b
 22060  003FE4  0100               	movlb	0	; () banked
 22061  003FE6  5961               	subwfb	(i1___aldiv@dividend+1)& (0+255),w,b
 22062  003FE8  0100               	movlb	0	; () banked
 22063  003FEA  5166               	movf	(i1___aldiv@divisor+2)& (0+255),w,b
 22064  003FEC  0100               	movlb	0	; () banked
 22065  003FEE  5962               	subwfb	(i1___aldiv@dividend+2)& (0+255),w,b
 22066  003FF0  0100               	movlb	0	; () banked
 22067  003FF2  5167               	movf	(i1___aldiv@divisor+3)& (0+255),w,b
 22068  003FF4  0100               	movlb	0	; () banked
 22069  003FF6  5963               	subwfb	(i1___aldiv@dividend+3)& (0+255),w,b
 22070  003FF8  A0D8               	btfss	status,0,c
 22071  003FFA  D012               	goto	i1l10423
 22072                           
 22073                           ; BSR set to: 0
 22074  003FFC  0100               	movlb	0	; () banked
 22075  003FFE  5164               	movf	i1___aldiv@divisor& (0+255),w,b
 22076  004000  0100               	movlb	0	; () banked
 22077  004002  5F60               	subwf	i1___aldiv@dividend& (0+255),f,b
 22078  004004  0100               	movlb	0	; () banked
 22079  004006  5165               	movf	(i1___aldiv@divisor+1)& (0+255),w,b
 22080  004008  0100               	movlb	0	; () banked
 22081  00400A  5B61               	subwfb	(i1___aldiv@dividend+1)& (0+255),f,b
 22082  00400C  0100               	movlb	0	; () banked
 22083  00400E  5166               	movf	(i1___aldiv@divisor+2)& (0+255),w,b
 22084  004010  0100               	movlb	0	; () banked
 22085  004012  5B62               	subwfb	(i1___aldiv@dividend+2)& (0+255),f,b
 22086  004014  0100               	movlb	0	; () banked
 22087  004016  5167               	movf	(i1___aldiv@divisor+3)& (0+255),w,b
 22088  004018  0100               	movlb	0	; () banked
 22089  00401A  5B63               	subwfb	(i1___aldiv@dividend+3)& (0+255),f,b
 22090                           
 22091                           ; BSR set to: 0
 22092  00401C  0100               	movlb	0	; () banked
 22093  00401E  816A               	bsf	i1___aldiv@quotient& (0+255),0,b
 22094  004020                     i1l10423:
 22095                           
 22096                           ; BSR set to: 0
 22097  004020  0100               	movlb	0	; () banked
 22098  004022  90D8               	bcf	status,0,c
 22099  004024  3367               	rrcf	(i1___aldiv@divisor+3)& (0+255),f,b
 22100  004026  3366               	rrcf	(i1___aldiv@divisor+2)& (0+255),f,b
 22101  004028  3365               	rrcf	(i1___aldiv@divisor+1)& (0+255),f,b
 22102  00402A  3364               	rrcf	i1___aldiv@divisor& (0+255),f,b
 22103                           
 22104                           ; BSR set to: 0
 22105  00402C  0100               	movlb	0	; () banked
 22106  00402E  2F68               	decfsz	i1___aldiv@counter& (0+255),f,b
 22107  004030  D7CD               	goto	i1l10415
 22108  004032                     i1l10427:
 22109                           
 22110                           ; BSR set to: 0
 22111  004032  0100               	movlb	0	; () banked
 22112  004034  5169               	movf	i1___aldiv@sign& (0+255),w,b
 22113  004036  0100               	movlb	0	; () banked
 22114  004038  B4D8               	btfsc	status,2,c
 22115  00403A  D009               	goto	i1l10431
 22116                           
 22117                           ; BSR set to: 0
 22118  00403C  0100               	movlb	0	; () banked
 22119  00403E  1F6D               	comf	(i1___aldiv@quotient+3)& (0+255),f,b
 22120  004040  1F6C               	comf	(i1___aldiv@quotient+2)& (0+255),f,b
 22121  004042  1F6B               	comf	(i1___aldiv@quotient+1)& (0+255),f,b
 22122  004044  6D6A               	negf	i1___aldiv@quotient& (0+255),b
 22123  004046  0E00               	movlw	0
 22124  004048  236B               	addwfc	(i1___aldiv@quotient+1)& (0+255),f,b
 22125  00404A  236C               	addwfc	(i1___aldiv@quotient+2)& (0+255),f,b
 22126  00404C  236D               	addwfc	(i1___aldiv@quotient+3)& (0+255),f,b
 22127  00404E                     i1l10431:
 22128                           
 22129                           ; BSR set to: 0
 22130  00404E  C06A  F060         	movff	i1___aldiv@quotient,?i1___aldiv
 22131  004052  C06B  F061         	movff	i1___aldiv@quotient+1,?i1___aldiv+1
 22132  004056  C06C  F062         	movff	i1___aldiv@quotient+2,?i1___aldiv+2
 22133  00405A  C06D  F063         	movff	i1___aldiv@quotient+3,?i1___aldiv+3
 22134  00405E  0012               	return	
 22135  004060                     __end_ofi1___aldiv:
 22136                           	opt stack 0
 22137                           pclatu	equ	0xFFB
 22138                           pclath	equ	0xFFA
 22139                           tblptru	equ	0xFF8
 22140                           tblptrh	equ	0xFF7
 22141                           tblptrl	equ	0xFF6
 22142                           tablat	equ	0xFF5
 22143                           prodh	equ	0xFF4
 22144                           prodl	equ	0xFF3
 22145                           intcon	equ	0xFF2
 22146                           postinc0	equ	0xFEE
 22147                           fsr0h	equ	0xFEA
 22148                           fsr0l	equ	0xFE9
 22149                           wreg	equ	0xFE8
 22150                           postdec1	equ	0xFE5
 22151                           fsr1h	equ	0xFE2
 22152                           fsr1l	equ	0xFE1
 22153                           bsr	equ	0xFE0
 22154                           indf2	equ	0xFDF
 22155                           postinc2	equ	0xFDE
 22156                           postdec2	equ	0xFDD
 22157                           plusw2	equ	0xFDB
 22158                           fsr2h	equ	0xFDA
 22159                           fsr2l	equ	0xFD9
 22160                           status	equ	0xFD8
 22161                           
 22162 ;; *************** function i1_checkPass *****************
 22163 ;; Defined at:
 22164 ;;		line 14 in file "source/DisplayProtocol.h"
 22165 ;; Parameters:    Size  Location     Type
 22166 ;;		None
 22167 ;; Auto vars:     Size  Location     Type
 22168 ;;  checkPass       2    5[BANK0 ] int 
 22169 ;;  checkPass       1    4[BANK0 ] unsigned char 
 22170 ;; Return value:  Size  Location     Type
 22171 ;;                  1    wreg      unsigned char 
 22172 ;; Registers used:
 22173 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22174 ;; Tracked objects:
 22175 ;;		On entry : 0/0
 22176 ;;		On exit  : 0/0
 22177 ;;		Unchanged: 0/0
 22178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22179 ;;      Params:         0       0       0       0       0       0       0
 22180 ;;      Locals:         0       3       0       0       0       0       0
 22181 ;;      Temps:          0       4       0       0       0       0       0
 22182 ;;      Totals:         0       7       0       0       0       0       0
 22183 ;;Total ram usage:        7 bytes
 22184 ;; Hardware stack levels used:    1
 22185 ;; Hardware stack levels required when called:    4
 22186 ;; This function calls:
 22187 ;;		Nothing
 22188 ;; This function is called by:
 22189 ;;		i1_pressENTER
 22190 ;; This function uses a non-reentrant model
 22191 ;;
 22192                           
 22193                           	psect	text91
 22194  005E44                     __ptext91:
 22195                           	opt stack 0
 22196  005E44                     i1_checkPass:
 22197                           	opt stack 13
 22198                           
 22199                           ;DisplayProtocol.h: 15: int i;
 22200                           ;DisplayProtocol.h: 16: char passOK = 0;
 22201                           
 22202                           ; BSR set to: 0
 22203                           ;incstack = 0
 22204  005E44  0E00               	movlw	0
 22205  005E46  0100               	movlb	0	; () banked
 22206  005E48  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22207                           
 22208                           ;DisplayProtocol.h: 17: for (i = 0; i < 4; i++) {
 22209  005E4A  0E00               	movlw	0
 22210  005E4C  0100               	movlb	0	; () banked
 22211  005E4E  6F66               	movwf	(i1checkPass@i+1)& (0+255),b
 22212  005E50  0E00               	movlw	0
 22213  005E52  6F65               	movwf	i1checkPass@i& (0+255),b
 22214  005E54                     i1l10689:
 22215                           
 22216                           ; BSR set to: 0
 22217  005E54  0100               	movlb	0	; () banked
 22218  005E56  BF66               	btfsc	(i1checkPass@i+1)& (0+255),7,b
 22219  005E58  D008               	goto	i1l10693
 22220  005E5A  0100               	movlb	0	; () banked
 22221  005E5C  5166               	movf	(i1checkPass@i+1)& (0+255),w,b
 22222  005E5E  E136               	bnz	i1l10703
 22223  005E60  0E04               	movlw	4
 22224  005E62  0100               	movlb	0	; () banked
 22225  005E64  5D65               	subwf	i1checkPass@i& (0+255),w,b
 22226  005E66  B0D8               	btfsc	status,0,c
 22227  005E68  D031               	goto	i1l10703
 22228  005E6A                     i1l10693:
 22229                           
 22230                           ; BSR set to: 0
 22231                           ;DisplayProtocol.h: 18: if (introducido[i] == contra[i])
 22232  005E6A  0EC0               	movlw	low _contra
 22233  005E6C  0100               	movlb	0	; () banked
 22234  005E6E  2565               	addwf	i1checkPass@i& (0+255),w,b
 22235  005E70  6ED9               	movwf	fsr2l,c
 22236  005E72  0E00               	movlw	high _contra
 22237  005E74  0100               	movlb	0	; () banked
 22238  005E76  2166               	addwfc	(i1checkPass@i+1)& (0+255),w,b
 22239  005E78  6EDA               	movwf	fsr2h,c
 22240  005E7A  50DF               	movf	indf2,w,c
 22241  005E7C  0100               	movlb	0	; () banked
 22242  005E7E  6F60               	movwf	??i1_checkPass& (0+255),b
 22243  005E80  6B61               	clrf	(??i1_checkPass+1)& (0+255),b
 22244  005E82  0EA6               	movlw	low _introducido
 22245  005E84  0100               	movlb	0	; () banked
 22246  005E86  2565               	addwf	i1checkPass@i& (0+255),w,b
 22247  005E88  6ED9               	movwf	fsr2l,c
 22248  005E8A  0E01               	movlw	high _introducido
 22249  005E8C  0100               	movlb	0	; () banked
 22250  005E8E  2166               	addwfc	(i1checkPass@i+1)& (0+255),w,b
 22251  005E90  6EDA               	movwf	fsr2h,c
 22252  005E92  50DF               	movf	indf2,w,c
 22253  005E94  0100               	movlb	0	; () banked
 22254  005E96  6F62               	movwf	(??i1_checkPass+2)& (0+255),b
 22255  005E98  6B63               	clrf	(??i1_checkPass+3)& (0+255),b
 22256  005E9A  BF62               	btfsc	(??i1_checkPass+2)& (0+255),7,b
 22257  005E9C  0763               	decf	(??i1_checkPass+3)& (0+255),f,b
 22258  005E9E  0100               	movlb	0	; () banked
 22259  005EA0  5160               	movf	??i1_checkPass& (0+255),w,b
 22260  005EA2  0100               	movlb	0	; () banked
 22261  005EA4  1962               	xorwf	(??i1_checkPass+2)& (0+255),w,b
 22262  005EA6  E10A               	bnz	i1l10697
 22263  005EA8  0100               	movlb	0	; () banked
 22264  005EAA  5161               	movf	(??i1_checkPass+1)& (0+255),w,b
 22265  005EAC  0100               	movlb	0	; () banked
 22266  005EAE  1963               	xorwf	(??i1_checkPass+3)& (0+255),w,b
 22267  005EB0  A4D8               	btfss	status,2,c
 22268  005EB2  D004               	goto	i1l10697
 22269                           
 22270                           ; BSR set to: 0
 22271                           ;DisplayProtocol.h: 19: passOK = 1;
 22272  005EB4  0E01               	movlw	1
 22273  005EB6  0100               	movlb	0	; () banked
 22274  005EB8  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22275  005EBA  D004               	goto	i1l10699
 22276  005EBC                     i1l10697:
 22277                           
 22278                           ; BSR set to: 0
 22279                           ;DisplayProtocol.h: 20: else {
 22280                           ;DisplayProtocol.h: 21: passOK = 0;
 22281  005EBC  0E00               	movlw	0
 22282  005EBE  0100               	movlb	0	; () banked
 22283  005EC0  6F64               	movwf	i1checkPass@passOK& (0+255),b
 22284                           
 22285                           ;DisplayProtocol.h: 22: break;
 22286  005EC2  D004               	goto	i1l10703
 22287  005EC4                     i1l10699:
 22288                           
 22289                           ; BSR set to: 0
 22290  005EC4  0100               	movlb	0	; () banked
 22291  005EC6  4B65               	infsnz	i1checkPass@i& (0+255),f,b
 22292  005EC8  2B66               	incf	(i1checkPass@i+1)& (0+255),f,b
 22293  005ECA  D7C4               	goto	i1l10689
 22294  005ECC                     i1l10703:
 22295                           
 22296                           ; BSR set to: 0
 22297                           ;DisplayProtocol.h: 23: }
 22298                           ;DisplayProtocol.h: 24: }
 22299                           ;DisplayProtocol.h: 25: return passOK;
 22300  005ECC  0100               	movlb	0	; () banked
 22301  005ECE  5164               	movf	i1checkPass@passOK& (0+255),w,b
 22302  005ED0  0012               	return	
 22303  005ED2                     __end_ofi1_checkPass:
 22304                           	opt stack 0
 22305                           pclatu	equ	0xFFB
 22306                           pclath	equ	0xFFA
 22307                           tblptru	equ	0xFF8
 22308                           tblptrh	equ	0xFF7
 22309                           tblptrl	equ	0xFF6
 22310                           tablat	equ	0xFF5
 22311                           prodh	equ	0xFF4
 22312                           prodl	equ	0xFF3
 22313                           intcon	equ	0xFF2
 22314                           postinc0	equ	0xFEE
 22315                           fsr0h	equ	0xFEA
 22316                           fsr0l	equ	0xFE9
 22317                           wreg	equ	0xFE8
 22318                           postdec1	equ	0xFE5
 22319                           fsr1h	equ	0xFE2
 22320                           fsr1l	equ	0xFE1
 22321                           bsr	equ	0xFE0
 22322                           indf2	equ	0xFDF
 22323                           postinc2	equ	0xFDE
 22324                           postdec2	equ	0xFDD
 22325                           plusw2	equ	0xFDB
 22326                           fsr2h	equ	0xFDA
 22327                           fsr2l	equ	0xFD9
 22328                           status	equ	0xFD8
 22329                           
 22330 ;; *************** function i1_pressDOWN *****************
 22331 ;; Defined at:
 22332 ;;		line 181 in file "source/DisplayProtocol.h"
 22333 ;; Parameters:    Size  Location     Type
 22334 ;;		None
 22335 ;; Auto vars:     Size  Location     Type
 22336 ;;		None
 22337 ;; Return value:  Size  Location     Type
 22338 ;;                  1    wreg      void 
 22339 ;; Registers used:
 22340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22341 ;; Tracked objects:
 22342 ;;		On entry : 0/0
 22343 ;;		On exit  : 0/0
 22344 ;;		Unchanged: 0/0
 22345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22346 ;;      Params:         0       0       0       0       0       0       0
 22347 ;;      Locals:         0       0       0       0       0       0       0
 22348 ;;      Temps:          0       1       0       0       0       0       0
 22349 ;;      Totals:         0       1       0       0       0       0       0
 22350 ;;Total ram usage:        1 bytes
 22351 ;; Hardware stack levels used:    1
 22352 ;; Hardware stack levels required when called:    5
 22353 ;; This function calls:
 22354 ;;		i1_chanValDigDOWN
 22355 ;; This function is called by:
 22356 ;;		_UARTint
 22357 ;; This function uses a non-reentrant model
 22358 ;;
 22359                           
 22360                           	psect	text92
 22361  0046BA                     __ptext92:
 22362                           	opt stack 0
 22363  0046BA                     i1_pressDOWN:
 22364                           	opt stack 13
 22365                           
 22366                           ;DisplayProtocol.h: 182: if (actualScreen == 0 || actualScreen == 4) {
 22367                           
 22368                           ; BSR set to: 0
 22369                           ;incstack = 0
 22370  0046BA  0101               	movlb	1	; () banked
 22371  0046BC  51BA               	movf	_actualScreen& (0+255),w,b
 22372  0046BE  B4D8               	btfsc	status,2,c
 22373  0046C0  D005               	goto	i1l11641
 22374                           
 22375                           ; BSR set to: 1
 22376  0046C2  0E04               	movlw	4
 22377  0046C4  0101               	movlb	1	; () banked
 22378  0046C6  19BA               	xorwf	_actualScreen& (0+255),w,b
 22379  0046C8  A4D8               	btfss	status,2,c
 22380  0046CA  D009               	goto	i1l11647
 22381  0046CC                     i1l11641:
 22382                           
 22383                           ; BSR set to: 1
 22384                           ;DisplayProtocol.h: 183: menuSection--;
 22385  0046CC  0101               	movlb	1	; () banked
 22386  0046CE  07C1               	decf	_menuSection& (0+255),f,b
 22387                           
 22388                           ; BSR set to: 1
 22389                           ;DisplayProtocol.h: 184: if (menuSection < 0)
 22390  0046D0  0101               	movlb	1	; () banked
 22391  0046D2  AFC1               	btfss	_menuSection& (0+255),7,b
 22392  0046D4  0012               	return	
 22393                           
 22394                           ; BSR set to: 1
 22395                           ;DisplayProtocol.h: 185: menuSection = 4;
 22396  0046D6  0E04               	movlw	4
 22397  0046D8  0101               	movlb	1	; () banked
 22398  0046DA  6FC1               	movwf	_menuSection& (0+255),b
 22399                           
 22400                           ; BSR set to: 1
 22401                           ;DisplayProtocol.h: 186: } else if (actualScreen == 1) {
 22402  0046DC  0012               	return	
 22403  0046DE                     i1l11647:
 22404                           
 22405                           ; BSR set to: 1
 22406  0046DE  0101               	movlb	1	; () banked
 22407  0046E0  05BA               	decf	_actualScreen& (0+255),w,b
 22408  0046E2  A4D8               	btfss	status,2,c
 22409  0046E4  D022               	goto	i1l11653
 22410                           
 22411                           ; BSR set to: 1
 22412                           ;DisplayProtocol.h: 187: introducido[passSection]--;
 22413  0046E6  0101               	movlb	1	; () banked
 22414  0046E8  51C2               	movf	_passSection& (0+255),w,b
 22415  0046EA  0D01               	mullw	1
 22416  0046EC  0EA6               	movlw	low _introducido
 22417  0046EE  24F3               	addwf	prodl,w,c
 22418  0046F0  6ED9               	movwf	fsr2l,c
 22419  0046F2  0E01               	movlw	high _introducido
 22420  0046F4  20F4               	addwfc	prodh,w,c
 22421  0046F6  6EDA               	movwf	fsr2h,c
 22422  0046F8  06DF               	decf	indf2,f,c
 22423                           
 22424                           ;DisplayProtocol.h: 188: if (introducido[passSection] < 0)
 22425  0046FA  0101               	movlb	1	; () banked
 22426  0046FC  51C2               	movf	_passSection& (0+255),w,b
 22427  0046FE  0D01               	mullw	1
 22428  004700  0EA6               	movlw	low _introducido
 22429  004702  24F3               	addwf	prodl,w,c
 22430  004704  6ED9               	movwf	fsr2l,c
 22431  004706  0E01               	movlw	high _introducido
 22432  004708  20F4               	addwfc	prodh,w,c
 22433  00470A  6EDA               	movwf	fsr2h,c
 22434  00470C  0E00               	movlw	0
 22435  00470E  AEDB               	btfss	plusw2,7,c
 22436  004710  0012               	return	
 22437                           
 22438                           ; BSR set to: 1
 22439                           ;DisplayProtocol.h: 189: introducido[passSection] = 9;
 22440  004712  0101               	movlb	1	; () banked
 22441  004714  51C2               	movf	_passSection& (0+255),w,b
 22442  004716  0D01               	mullw	1
 22443  004718  0EA6               	movlw	low _introducido
 22444  00471A  24F3               	addwf	prodl,w,c
 22445  00471C  6ED9               	movwf	fsr2l,c
 22446  00471E  0E01               	movlw	high _introducido
 22447  004720  20F4               	addwfc	prodh,w,c
 22448  004722  6EDA               	movwf	fsr2h,c
 22449  004724  0E09               	movlw	9
 22450  004726  6EDF               	movwf	indf2,c
 22451                           
 22452                           ; BSR set to: 1
 22453                           ;DisplayProtocol.h: 190: } else if (actualScreen == 2 || actualScreen == 3
 22454  004728  0012               	return	
 22455  00472A                     i1l11653:
 22456                           
 22457                           ; BSR set to: 1
 22458                           ;DisplayProtocol.h: 191: || actualScreen == 10 || actualScreen == 11) {
 22459  00472A  0E02               	movlw	2
 22460  00472C  0101               	movlb	1	; () banked
 22461  00472E  19BA               	xorwf	_actualScreen& (0+255),w,b
 22462  004730  B4D8               	btfsc	status,2,c
 22463  004732  D00F               	goto	i1l11661
 22464                           
 22465                           ; BSR set to: 1
 22466  004734  0E03               	movlw	3
 22467  004736  0101               	movlb	1	; () banked
 22468  004738  19BA               	xorwf	_actualScreen& (0+255),w,b
 22469  00473A  B4D8               	btfsc	status,2,c
 22470  00473C  D00A               	goto	i1l11661
 22471                           
 22472                           ; BSR set to: 1
 22473  00473E  0E0A               	movlw	10
 22474  004740  0101               	movlb	1	; () banked
 22475  004742  19BA               	xorwf	_actualScreen& (0+255),w,b
 22476  004744  B4D8               	btfsc	status,2,c
 22477  004746  D005               	goto	i1l11661
 22478                           
 22479                           ; BSR set to: 1
 22480  004748  0E0B               	movlw	11
 22481  00474A  0101               	movlb	1	; () banked
 22482  00474C  19BA               	xorwf	_actualScreen& (0+255),w,b
 22483  00474E  A4D8               	btfss	status,2,c
 22484  004750  D011               	goto	i1l11667
 22485  004752                     i1l11661:
 22486                           
 22487                           ; BSR set to: 1
 22488                           ;DisplayProtocol.h: 192: selSN = !selSN;
 22489  004752  0101               	movlb	1	; () banked
 22490  004754  51C3               	movf	_selSN& (0+255),w,b
 22491  004756  A4D8               	btfss	status,2,c
 22492  004758  D002               	goto	i1u1720_20
 22493  00475A  0E01               	movlw	1
 22494  00475C  D001               	goto	i1u1721_20
 22495  00475E                     i1u1720_20:
 22496  00475E  0E00               	movlw	0
 22497  004760                     i1u1721_20:
 22498  004760  0101               	movlb	1	; () banked
 22499  004762  6FC3               	movwf	_selSN& (0+255),b
 22500                           
 22501                           ; BSR set to: 1
 22502                           ;DisplayProtocol.h: 193: if(selSN > 1)
 22503  004764  0E01               	movlw	1
 22504  004766  0101               	movlb	1	; () banked
 22505  004768  65C3               	cpfsgt	_selSN& (0+255),b
 22506  00476A  0012               	return	
 22507                           
 22508                           ; BSR set to: 1
 22509                           ;DisplayProtocol.h: 194: selSN = 0;
 22510  00476C  0E00               	movlw	0
 22511  00476E  0101               	movlb	1	; () banked
 22512  004770  6FC3               	movwf	_selSN& (0+255),b
 22513                           
 22514                           ; BSR set to: 1
 22515                           ;DisplayProtocol.h: 195: }else if(actualScreen == 5) {
 22516  004772  0012               	return	
 22517  004774                     i1l11667:
 22518                           
 22519                           ; BSR set to: 1
 22520  004774  0E05               	movlw	5
 22521  004776  0101               	movlb	1	; () banked
 22522  004778  19BA               	xorwf	_actualScreen& (0+255),w,b
 22523  00477A  B4D8               	btfsc	status,2,c
 22524  00477C  D00C               	goto	i1l11679
 22525  00477E  D01A               	goto	i1l11681
 22526  004780                     i1l11671:
 22527                           
 22528                           ; BSR set to: 1
 22529                           ;DisplayProtocol.h: 200: chanValDigDOWN();
 22530  004780  ECFC  F026         	call	i1_chanValDigDOWN	;wreg free
 22531                           
 22532                           ;DisplayProtocol.h: 201: break;
 22533  004784  0012               	return	
 22534  004786                     i1l11673:
 22535                           
 22536                           ;DisplayProtocol.h: 203: chanVals--;
 22537  004786  0101               	movlb	1	; () banked
 22538  004788  07B1               	decf	_chanVals& (0+255),f,b
 22539  00478A  A0D8               	btfss	status,0,c
 22540  00478C  07B2               	decf	(_chanVals+1)& (0+255),f,b
 22541                           
 22542                           ;DisplayProtocol.h: 204: break;
 22543  00478E  0012               	return	
 22544  004790                     i1l11675:
 22545                           
 22546                           ; BSR set to: 1
 22547                           ;DisplayProtocol.h: 206: chanValDigDOWN();
 22548  004790  ECFC  F026         	call	i1_chanValDigDOWN	;wreg free
 22549                           
 22550                           ;DisplayProtocol.h: 208: }
 22551                           ;DisplayProtocol.h: 209: }
 22552                           
 22553                           ;DisplayProtocol.h: 207: break;
 22554  004794  0012               	return	
 22555  004796                     i1l11679:
 22556  004796  0101               	movlb	1	; () banked
 22557  004798  51C1               	movf	_menuSection& (0+255),w,b
 22558                           
 22559                           ; Switch size 1, requested type "space"
 22560                           ; Number of cases is 4, Range of values is 0 to 3
 22561                           ; switch strategies available:
 22562                           ; Name         Instructions Cycles
 22563                           ; simple_byte           13     7 (average)
 22564                           ;	Chosen strategy is simple_byte
 22565  00479A  0A00               	xorlw	0	; case 0
 22566  00479C  B4D8               	btfsc	status,2,c
 22567  00479E  0012               	return	
 22568  0047A0  0A01               	xorlw	1	; case 1
 22569  0047A2  B4D8               	btfsc	status,2,c
 22570  0047A4  D7ED               	goto	i1l11671
 22571  0047A6  0A03               	xorlw	3	; case 2
 22572  0047A8  B4D8               	btfsc	status,2,c
 22573  0047AA  D7ED               	goto	i1l11673
 22574  0047AC  0A01               	xorlw	1	; case 3
 22575  0047AE  A4D8               	btfss	status,2,c
 22576                           
 22577                           ; BSR set to: 1
 22578                           ;DisplayProtocol.h: 210: }else if(actualScreen == 12)
 22579  0047B0  0012               	return	
 22580  0047B2  D7EE               	goto	i1l11675
 22581  0047B4                     i1l11681:
 22582                           
 22583                           ; BSR set to: 1
 22584  0047B4  0E0C               	movlw	12
 22585  0047B6  0101               	movlb	1	; () banked
 22586  0047B8  19BA               	xorwf	_actualScreen& (0+255),w,b
 22587  0047BA  A4D8               	btfss	status,2,c
 22588  0047BC  0012               	return	
 22589                           
 22590                           ; BSR set to: 1
 22591                           ;DisplayProtocol.h: 211: chanValDigDOWN();
 22592  0047BE  ECFC  F026         	call	i1_chanValDigDOWN	;wreg free
 22593  0047C2  0012               	return	
 22594  0047C4                     __end_ofi1_pressDOWN:
 22595                           	opt stack 0
 22596                           pclatu	equ	0xFFB
 22597                           pclath	equ	0xFFA
 22598                           tblptru	equ	0xFF8
 22599                           tblptrh	equ	0xFF7
 22600                           tblptrl	equ	0xFF6
 22601                           tablat	equ	0xFF5
 22602                           prodh	equ	0xFF4
 22603                           prodl	equ	0xFF3
 22604                           intcon	equ	0xFF2
 22605                           postinc0	equ	0xFEE
 22606                           fsr0h	equ	0xFEA
 22607                           fsr0l	equ	0xFE9
 22608                           wreg	equ	0xFE8
 22609                           postdec1	equ	0xFE5
 22610                           fsr1h	equ	0xFE2
 22611                           fsr1l	equ	0xFE1
 22612                           bsr	equ	0xFE0
 22613                           indf2	equ	0xFDF
 22614                           postinc2	equ	0xFDE
 22615                           postdec2	equ	0xFDD
 22616                           plusw2	equ	0xFDB
 22617                           fsr2h	equ	0xFDA
 22618                           fsr2l	equ	0xFD9
 22619                           status	equ	0xFD8
 22620                           
 22621 ;; *************** function i1_chanValDigDOWN *****************
 22622 ;; Defined at:
 22623 ;;		line 37 in file "source/DisplayProtocol.h"
 22624 ;; Parameters:    Size  Location     Type
 22625 ;;		None
 22626 ;; Auto vars:     Size  Location     Type
 22627 ;;		None
 22628 ;; Return value:  Size  Location     Type
 22629 ;;                  1    wreg      void 
 22630 ;; Registers used:
 22631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22632 ;; Tracked objects:
 22633 ;;		On entry : 0/0
 22634 ;;		On exit  : 0/0
 22635 ;;		Unchanged: 0/0
 22636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22637 ;;      Params:         0       0       0       0       0       0       0
 22638 ;;      Locals:         0       0       0       0       0       0       0
 22639 ;;      Temps:          0       5       0       0       0       0       0
 22640 ;;      Totals:         0       5       0       0       0       0       0
 22641 ;;Total ram usage:        5 bytes
 22642 ;; Hardware stack levels used:    1
 22643 ;; Hardware stack levels required when called:    4
 22644 ;; This function calls:
 22645 ;;		Nothing
 22646 ;; This function is called by:
 22647 ;;		i1_pressDOWN
 22648 ;; This function uses a non-reentrant model
 22649 ;;
 22650                           
 22651                           	psect	text93
 22652  004DF8                     __ptext93:
 22653                           	opt stack 0
 22654  004DF8                     i1_chanValDigDOWN:
 22655                           	opt stack 13
 22656                           
 22657                           ;DisplayProtocol.h: 38: chanValdig[chanValSection]--;
 22658                           
 22659                           ;incstack = 0
 22660  004DF8  0101               	movlb	1	; () banked
 22661  004DFA  5194               	movf	_chanValSection& (0+255),w,b
 22662  004DFC  0D01               	mullw	1
 22663  004DFE  0EA0               	movlw	low _chanValdig
 22664  004E00  24F3               	addwf	prodl,w,c
 22665  004E02  6ED9               	movwf	fsr2l,c
 22666  004E04  0E01               	movlw	high _chanValdig
 22667  004E06  20F4               	addwfc	prodh,w,c
 22668  004E08  6EDA               	movwf	fsr2h,c
 22669  004E0A  06DF               	decf	indf2,f,c
 22670                           
 22671                           ;DisplayProtocol.h: 39: if(chanValdig[chanValSection] < 0) {
 22672  004E0C  0101               	movlb	1	; () banked
 22673  004E0E  5194               	movf	_chanValSection& (0+255),w,b
 22674  004E10  0D01               	mullw	1
 22675  004E12  0EA0               	movlw	low _chanValdig
 22676  004E14  24F3               	addwf	prodl,w,c
 22677  004E16  6ED9               	movwf	fsr2l,c
 22678  004E18  0E01               	movlw	high _chanValdig
 22679  004E1A  20F4               	addwfc	prodh,w,c
 22680  004E1C  6EDA               	movwf	fsr2h,c
 22681  004E1E  0E00               	movlw	0
 22682  004E20  AEDB               	btfss	plusw2,7,c
 22683  004E22  0012               	return	
 22684                           
 22685                           ; BSR set to: 1
 22686                           ;DisplayProtocol.h: 40: chanValdig[chanValSection] = 9;
 22687  004E24  0101               	movlb	1	; () banked
 22688  004E26  5194               	movf	_chanValSection& (0+255),w,b
 22689  004E28  0D01               	mullw	1
 22690  004E2A  0EA0               	movlw	low _chanValdig
 22691  004E2C  24F3               	addwf	prodl,w,c
 22692  004E2E  6ED9               	movwf	fsr2l,c
 22693  004E30  0E01               	movlw	high _chanValdig
 22694  004E32  20F4               	addwfc	prodh,w,c
 22695  004E34  6EDA               	movwf	fsr2h,c
 22696  004E36  0E09               	movlw	9
 22697  004E38  6EDF               	movwf	indf2,c
 22698                           
 22699                           ; BSR set to: 1
 22700                           ;DisplayProtocol.h: 41: if(chanValSection > 1 && chanValdig[chanValSection - 1] > 0)
 22701  004E3A  0101               	movlb	1	; () banked
 22702  004E3C  5194               	movf	_chanValSection& (0+255),w,b
 22703  004E3E  0A80               	xorlw	128
 22704  004E40  0F7E               	addlw	-130
 22705  004E42  A0D8               	btfss	status,0,c
 22706  004E44  0012               	return	
 22707                           
 22708                           ; BSR set to: 1
 22709  004E46  0EFF               	movlw	255
 22710  004E48  0100               	movlb	0	; () banked
 22711  004E4A  6F60               	movwf	??i1_chanValDigDOWN& (0+255),b
 22712  004E4C  0EFF               	movlw	255
 22713  004E4E  0100               	movlb	0	; () banked
 22714  004E50  6F61               	movwf	(??i1_chanValDigDOWN+1)& (0+255),b
 22715  004E52  C194  F062         	movff	_chanValSection,??i1_chanValDigDOWN+2
 22716  004E56  0100               	movlb	0	; () banked
 22717  004E58  6B63               	clrf	(??i1_chanValDigDOWN+3)& (0+255),b
 22718  004E5A  BF62               	btfsc	(??i1_chanValDigDOWN+2)& (0+255),7,b
 22719  004E5C  0763               	decf	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22720  004E5E  0100               	movlb	0	; () banked
 22721  004E60  5160               	movf	??i1_chanValDigDOWN& (0+255),w,b
 22722  004E62  0100               	movlb	0	; () banked
 22723  004E64  2762               	addwf	(??i1_chanValDigDOWN+2)& (0+255),f,b
 22724  004E66  0100               	movlb	0	; () banked
 22725  004E68  5161               	movf	(??i1_chanValDigDOWN+1)& (0+255),w,b
 22726  004E6A  0100               	movlb	0	; () banked
 22727  004E6C  2363               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22728  004E6E  0EA0               	movlw	low _chanValdig
 22729  004E70  0100               	movlb	0	; () banked
 22730  004E72  2562               	addwf	(??i1_chanValDigDOWN+2)& (0+255),w,b
 22731  004E74  6ED9               	movwf	fsr2l,c
 22732  004E76  0E01               	movlw	high _chanValdig
 22733  004E78  0100               	movlb	0	; () banked
 22734  004E7A  2163               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),w,b
 22735  004E7C  6EDA               	movwf	fsr2h,c
 22736  004E7E  50DF               	movf	indf2,w,c
 22737  004E80  0A80               	xorlw	128
 22738  004E82  0F7F               	addlw	-129
 22739  004E84  A0D8               	btfss	status,0,c
 22740  004E86  0012               	return	
 22741                           
 22742                           ; BSR set to: 0
 22743                           ;DisplayProtocol.h: 42: chanValdig[chanValSection - 1]--;
 22744  004E88  0EFF               	movlw	255
 22745  004E8A  0100               	movlb	0	; () banked
 22746  004E8C  6F60               	movwf	??i1_chanValDigDOWN& (0+255),b
 22747  004E8E  0EFF               	movlw	255
 22748  004E90  0100               	movlb	0	; () banked
 22749  004E92  6F61               	movwf	(??i1_chanValDigDOWN+1)& (0+255),b
 22750  004E94  C194  F062         	movff	_chanValSection,??i1_chanValDigDOWN+2
 22751  004E98  0100               	movlb	0	; () banked
 22752  004E9A  6B63               	clrf	(??i1_chanValDigDOWN+3)& (0+255),b
 22753  004E9C  BF62               	btfsc	(??i1_chanValDigDOWN+2)& (0+255),7,b
 22754  004E9E  0763               	decf	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22755  004EA0  0100               	movlb	0	; () banked
 22756  004EA2  5160               	movf	??i1_chanValDigDOWN& (0+255),w,b
 22757  004EA4  0100               	movlb	0	; () banked
 22758  004EA6  2762               	addwf	(??i1_chanValDigDOWN+2)& (0+255),f,b
 22759  004EA8  0100               	movlb	0	; () banked
 22760  004EAA  5161               	movf	(??i1_chanValDigDOWN+1)& (0+255),w,b
 22761  004EAC  0100               	movlb	0	; () banked
 22762  004EAE  2363               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),f,b
 22763  004EB0  0EA0               	movlw	low _chanValdig
 22764  004EB2  0100               	movlb	0	; () banked
 22765  004EB4  2562               	addwf	(??i1_chanValDigDOWN+2)& (0+255),w,b
 22766  004EB6  6ED9               	movwf	fsr2l,c
 22767  004EB8  0E01               	movlw	high _chanValdig
 22768  004EBA  0100               	movlb	0	; () banked
 22769  004EBC  2163               	addwfc	(??i1_chanValDigDOWN+3)& (0+255),w,b
 22770  004EBE  6EDA               	movwf	fsr2h,c
 22771  004EC0  06DF               	decf	indf2,f,c
 22772                           
 22773                           ; BSR set to: 0
 22774  004EC2  0012               	return	
 22775  004EC4                     __end_ofi1_chanValDigDOWN:
 22776                           	opt stack 0
 22777                           pclatu	equ	0xFFB
 22778                           pclath	equ	0xFFA
 22779                           tblptru	equ	0xFF8
 22780                           tblptrh	equ	0xFF7
 22781                           tblptrl	equ	0xFF6
 22782                           tablat	equ	0xFF5
 22783                           prodh	equ	0xFF4
 22784                           prodl	equ	0xFF3
 22785                           intcon	equ	0xFF2
 22786                           postinc0	equ	0xFEE
 22787                           fsr0h	equ	0xFEA
 22788                           fsr0l	equ	0xFE9
 22789                           wreg	equ	0xFE8
 22790                           postdec1	equ	0xFE5
 22791                           fsr1h	equ	0xFE2
 22792                           fsr1l	equ	0xFE1
 22793                           bsr	equ	0xFE0
 22794                           indf2	equ	0xFDF
 22795                           postinc2	equ	0xFDE
 22796                           postdec2	equ	0xFDD
 22797                           plusw2	equ	0xFDB
 22798                           fsr2h	equ	0xFDA
 22799                           fsr2l	equ	0xFD9
 22800                           status	equ	0xFD8
 22801                           
 22802 ;; *************** function i1_longPressUP *****************
 22803 ;; Defined at:
 22804 ;;		line 157 in file "source/DisplayProtocol.h"
 22805 ;; Parameters:    Size  Location     Type
 22806 ;;		None
 22807 ;; Auto vars:     Size  Location     Type
 22808 ;;		None
 22809 ;; Return value:  Size  Location     Type
 22810 ;;                  1    wreg      void 
 22811 ;; Registers used:
 22812 ;;		wreg, status,2, status,0
 22813 ;; Tracked objects:
 22814 ;;		On entry : 0/0
 22815 ;;		On exit  : 0/0
 22816 ;;		Unchanged: 0/0
 22817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22818 ;;      Params:         0       0       0       0       0       0       0
 22819 ;;      Locals:         0       0       0       0       0       0       0
 22820 ;;      Temps:          0       0       0       0       0       0       0
 22821 ;;      Totals:         0       0       0       0       0       0       0
 22822 ;;Total ram usage:        0 bytes
 22823 ;; Hardware stack levels used:    1
 22824 ;; Hardware stack levels required when called:    4
 22825 ;; This function calls:
 22826 ;;		Nothing
 22827 ;; This function is called by:
 22828 ;;		_UARTint
 22829 ;; This function uses a non-reentrant model
 22830 ;;
 22831                           
 22832                           	psect	text94
 22833  00631E                     __ptext94:
 22834                           	opt stack 0
 22835  00631E                     i1_longPressUP:
 22836                           	opt stack 14
 22837                           
 22838                           ;DisplayProtocol.h: 158: if (!UPisLP) {
 22839                           
 22840                           ;incstack = 0
 22841  00631E  503C               	movf	_UPisLP,w,c
 22842  006320  A4D8               	btfss	status,2,c
 22843  006322  0012               	return	
 22844                           
 22845                           ;DisplayProtocol.h: 159: UPisLP = 1;
 22846  006324  0E01               	movlw	1
 22847  006326  6E3C               	movwf	_UPisLP,c
 22848                           
 22849                           ;DisplayProtocol.h: 160: if (actualScreen == 0 || actualScreen == 4) {
 22850  006328  0101               	movlb	1	; () banked
 22851  00632A  51BA               	movf	_actualScreen& (0+255),w,b
 22852  00632C  B4D8               	btfsc	status,2,c
 22853  00632E  D005               	goto	i1l11619
 22854                           
 22855                           ; BSR set to: 1
 22856  006330  0E04               	movlw	4
 22857  006332  0101               	movlb	1	; () banked
 22858  006334  19BA               	xorwf	_actualScreen& (0+255),w,b
 22859  006336  A4D8               	btfss	status,2,c
 22860  006338  D01C               	goto	i1l11631
 22861  00633A                     i1l11619:
 22862                           
 22863                           ; BSR set to: 1
 22864                           ;DisplayProtocol.h: 161: if (holdENTERcont > 5) {
 22865  00633A  0E05               	movlw	5
 22866  00633C  0101               	movlb	1	; () banked
 22867  00633E  65BE               	cpfsgt	_holdENTERcont& (0+255),b
 22868  006340  D014               	goto	i1l11629
 22869                           
 22870                           ; BSR set to: 1
 22871                           ;DisplayProtocol.h: 162: if (actualScreen == 0) {
 22872  006342  0101               	movlb	1	; () banked
 22873  006344  51BA               	movf	_actualScreen& (0+255),w,b
 22874  006346  A4D8               	btfss	status,2,c
 22875  006348  D007               	goto	i1l11625
 22876                           
 22877                           ; BSR set to: 1
 22878                           ;DisplayProtocol.h: 163: actualScreen = 1;
 22879  00634A  0E01               	movlw	1
 22880  00634C  0101               	movlb	1	; () banked
 22881  00634E  6FBA               	movwf	_actualScreen& (0+255),b
 22882                           
 22883                           ;DisplayProtocol.h: 164: fd = 0;
 22884  006350  0E00               	movlw	0
 22885  006352  0101               	movlb	1	; () banked
 22886  006354  6FBC               	movwf	_fd& (0+255),b
 22887                           
 22888                           ;DisplayProtocol.h: 165: } else if (actualScreen == 4)
 22889  006356  0012               	return	
 22890  006358                     i1l11625:
 22891                           
 22892                           ; BSR set to: 1
 22893  006358  0E04               	movlw	4
 22894  00635A  0101               	movlb	1	; () banked
 22895  00635C  19BA               	xorwf	_actualScreen& (0+255),w,b
 22896  00635E  A4D8               	btfss	status,2,c
 22897  006360  0012               	return	
 22898                           
 22899                           ; BSR set to: 1
 22900                           ;DisplayProtocol.h: 166: actualScreen = 9;
 22901  006362  0E09               	movlw	9
 22902  006364  0101               	movlb	1	; () banked
 22903  006366  6FBA               	movwf	_actualScreen& (0+255),b
 22904                           
 22905                           ; BSR set to: 1
 22906                           ;DisplayProtocol.h: 167: } else
 22907                           
 22908                           ; BSR set to: 1
 22909  006368  0012               	return	
 22910  00636A                     i1l11629:
 22911                           
 22912                           ; BSR set to: 1
 22913                           ;DisplayProtocol.h: 168: menuSection = 0;
 22914  00636A  0E00               	movlw	0
 22915  00636C  0101               	movlb	1	; () banked
 22916  00636E  6FC1               	movwf	_menuSection& (0+255),b
 22917                           
 22918                           ; BSR set to: 1
 22919                           ;DisplayProtocol.h: 169: }else if(actualScreen == 5) {
 22920  006370  0012               	return	
 22921  006372                     i1l11631:
 22922                           
 22923                           ; BSR set to: 1
 22924  006372  0E05               	movlw	5
 22925  006374  0101               	movlb	1	; () banked
 22926  006376  19BA               	xorwf	_actualScreen& (0+255),w,b
 22927  006378  A4D8               	btfss	status,2,c
 22928  00637A  0012               	return	
 22929                           
 22930                           ; BSR set to: 1
 22931                           ;DisplayProtocol.h: 170: if(menuSection == 2)
 22932  00637C  0E02               	movlw	2
 22933  00637E  0101               	movlb	1	; () banked
 22934  006380  19C1               	xorwf	_menuSection& (0+255),w,b
 22935  006382  A4D8               	btfss	status,2,c
 22936  006384  0012               	return	
 22937                           
 22938                           ; BSR set to: 1
 22939                           ;DisplayProtocol.h: 171: chanVals += 10;
 22940  006386  0E0A               	movlw	10
 22941  006388  0101               	movlb	1	; () banked
 22942  00638A  27B1               	addwf	_chanVals& (0+255),f,b
 22943  00638C  0E00               	movlw	0
 22944  00638E  23B2               	addwfc	(_chanVals+1)& (0+255),f,b
 22945                           
 22946                           ; BSR set to: 1
 22947                           
 22948                           ; BSR set to: 1
 22949                           
 22950                           ; BSR set to: 1
 22951  006390  0012               	return	
 22952  006392                     __end_ofi1_longPressUP:
 22953                           	opt stack 0
 22954                           pclatu	equ	0xFFB
 22955                           pclath	equ	0xFFA
 22956                           tblptru	equ	0xFF8
 22957                           tblptrh	equ	0xFF7
 22958                           tblptrl	equ	0xFF6
 22959                           tablat	equ	0xFF5
 22960                           prodh	equ	0xFF4
 22961                           prodl	equ	0xFF3
 22962                           intcon	equ	0xFF2
 22963                           postinc0	equ	0xFEE
 22964                           fsr0h	equ	0xFEA
 22965                           fsr0l	equ	0xFE9
 22966                           wreg	equ	0xFE8
 22967                           postdec1	equ	0xFE5
 22968                           fsr1h	equ	0xFE2
 22969                           fsr1l	equ	0xFE1
 22970                           bsr	equ	0xFE0
 22971                           indf2	equ	0xFDF
 22972                           postinc2	equ	0xFDE
 22973                           postdec2	equ	0xFDD
 22974                           plusw2	equ	0xFDB
 22975                           fsr2h	equ	0xFDA
 22976                           fsr2l	equ	0xFD9
 22977                           status	equ	0xFD8
 22978                           
 22979 ;; *************** function i1_longPressRETRO *****************
 22980 ;; Defined at:
 22981 ;;		line 252 in file "source/DisplayProtocol.h"
 22982 ;; Parameters:    Size  Location     Type
 22983 ;;		None
 22984 ;; Auto vars:     Size  Location     Type
 22985 ;;		None
 22986 ;; Return value:  Size  Location     Type
 22987 ;;                  1    wreg      void 
 22988 ;; Registers used:
 22989 ;;		wreg, status,2, status,0
 22990 ;; Tracked objects:
 22991 ;;		On entry : 0/0
 22992 ;;		On exit  : 0/0
 22993 ;;		Unchanged: 0/0
 22994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22995 ;;      Params:         0       0       0       0       0       0       0
 22996 ;;      Locals:         0       0       0       0       0       0       0
 22997 ;;      Temps:          0       0       0       0       0       0       0
 22998 ;;      Totals:         0       0       0       0       0       0       0
 22999 ;;Total ram usage:        0 bytes
 23000 ;; Hardware stack levels used:    1
 23001 ;; Hardware stack levels required when called:    4
 23002 ;; This function calls:
 23003 ;;		Nothing
 23004 ;; This function is called by:
 23005 ;;		_UARTint
 23006 ;; This function uses a non-reentrant model
 23007 ;;
 23008                           
 23009                           	psect	text95
 23010  0065EC                     __ptext95:
 23011                           	opt stack 0
 23012  0065EC                     i1_longPressRETRO:
 23013                           	opt stack 14
 23014                           
 23015                           ;DisplayProtocol.h: 253: if (!RETROisLP) {
 23016                           
 23017                           ;incstack = 0
 23018  0065EC  503B               	movf	_RETROisLP,w,c
 23019  0065EE  A4D8               	btfss	status,2,c
 23020  0065F0  0012               	return	
 23021                           
 23022                           ;DisplayProtocol.h: 254: RETROisLP = 1;
 23023  0065F2  0E01               	movlw	1
 23024  0065F4  6E3B               	movwf	_RETROisLP,c
 23025                           
 23026                           ;DisplayProtocol.h: 255: if(actualScreen == 0 || actualScreen == 4) {
 23027  0065F6  0101               	movlb	1	; () banked
 23028  0065F8  51BA               	movf	_actualScreen& (0+255),w,b
 23029  0065FA  B4D8               	btfsc	status,2,c
 23030  0065FC  D005               	goto	i1l11735
 23031                           
 23032                           ; BSR set to: 1
 23033  0065FE  0E04               	movlw	4
 23034  006600  0101               	movlb	1	; () banked
 23035  006602  19BA               	xorwf	_actualScreen& (0+255),w,b
 23036  006604  A4D8               	btfss	status,2,c
 23037  006606  D00C               	goto	i1l11741
 23038  006608                     i1l11735:
 23039                           
 23040                           ; BSR set to: 1
 23041                           ;DisplayProtocol.h: 256: if(ProcessStarted) {
 23042  006608  503A               	movf	_ProcessStarted,w,c
 23043  00660A  B4D8               	btfsc	status,2,c
 23044  00660C  0012               	return	
 23045                           
 23046                           ; BSR set to: 1
 23047                           ;DisplayProtocol.h: 257: tempLastScreen = actualScreen;
 23048  00660E  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 23049                           
 23050                           ; BSR set to: 1
 23051                           ;DisplayProtocol.h: 258: actualScreen = 3;
 23052  006612  0E03               	movlw	3
 23053  006614  0101               	movlb	1	; () banked
 23054  006616  6FBA               	movwf	_actualScreen& (0+255),b
 23055                           
 23056                           ;DisplayProtocol.h: 259: selSN = 0;
 23057  006618  0E00               	movlw	0
 23058  00661A  0101               	movlb	1	; () banked
 23059  00661C  6FC3               	movwf	_selSN& (0+255),b
 23060                           
 23061                           ; BSR set to: 1
 23062                           ;DisplayProtocol.h: 260: }
 23063                           ;DisplayProtocol.h: 261: }else if(actualScreen == 5)
 23064  00661E  0012               	return	
 23065  006620                     i1l11741:
 23066                           
 23067                           ; BSR set to: 1
 23068  006620  0E05               	movlw	5
 23069  006622  0101               	movlb	1	; () banked
 23070  006624  19BA               	xorwf	_actualScreen& (0+255),w,b
 23071  006626  A4D8               	btfss	status,2,c
 23072  006628  D004               	goto	i1l11745
 23073                           
 23074                           ; BSR set to: 1
 23075                           ;DisplayProtocol.h: 262: actualScreen = 4;
 23076  00662A  0E04               	movlw	4
 23077  00662C  0101               	movlb	1	; () banked
 23078  00662E  6FBA               	movwf	_actualScreen& (0+255),b
 23079  006630  0012               	return	
 23080  006632                     i1l11745:
 23081                           
 23082                           ; BSR set to: 1
 23083                           ;DisplayProtocol.h: 263: else if(actualScreen == 12)
 23084  006632  0E0C               	movlw	12
 23085  006634  0101               	movlb	1	; () banked
 23086  006636  19BA               	xorwf	_actualScreen& (0+255),w,b
 23087  006638  A4D8               	btfss	status,2,c
 23088  00663A  0012               	return	
 23089                           
 23090                           ; BSR set to: 1
 23091                           ;DisplayProtocol.h: 264: actualScreen = 4;
 23092  00663C  0E04               	movlw	4
 23093  00663E  0101               	movlb	1	; () banked
 23094  006640  6FBA               	movwf	_actualScreen& (0+255),b
 23095                           
 23096                           ; BSR set to: 1
 23097                           
 23098                           ; BSR set to: 1
 23099                           
 23100                           ; BSR set to: 1
 23101  006642  0012               	return	
 23102  006644                     __end_ofi1_longPressRETRO:
 23103                           	opt stack 0
 23104                           pclatu	equ	0xFFB
 23105                           pclath	equ	0xFFA
 23106                           tblptru	equ	0xFF8
 23107                           tblptrh	equ	0xFF7
 23108                           tblptrl	equ	0xFF6
 23109                           tablat	equ	0xFF5
 23110                           prodh	equ	0xFF4
 23111                           prodl	equ	0xFF3
 23112                           intcon	equ	0xFF2
 23113                           postinc0	equ	0xFEE
 23114                           fsr0h	equ	0xFEA
 23115                           fsr0l	equ	0xFE9
 23116                           wreg	equ	0xFE8
 23117                           postdec1	equ	0xFE5
 23118                           fsr1h	equ	0xFE2
 23119                           fsr1l	equ	0xFE1
 23120                           bsr	equ	0xFE0
 23121                           indf2	equ	0xFDF
 23122                           postinc2	equ	0xFDE
 23123                           postdec2	equ	0xFDD
 23124                           plusw2	equ	0xFDB
 23125                           fsr2h	equ	0xFDA
 23126                           fsr2l	equ	0xFD9
 23127                           status	equ	0xFD8
 23128                           
 23129 ;; *************** function i1_longPressENTER *****************
 23130 ;; Defined at:
 23131 ;;		line 379 in file "source/DisplayProtocol.h"
 23132 ;; Parameters:    Size  Location     Type
 23133 ;;		None
 23134 ;; Auto vars:     Size  Location     Type
 23135 ;;  longPressENT    3   45[BANK0 ] float 
 23136 ;; Return value:  Size  Location     Type
 23137 ;;                  1    wreg      void 
 23138 ;; Registers used:
 23139 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23140 ;; Tracked objects:
 23141 ;;		On entry : 0/0
 23142 ;;		On exit  : 0/0
 23143 ;;		Unchanged: 0/0
 23144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23145 ;;      Params:         0       0       0       0       0       0       0
 23146 ;;      Locals:         0       6       0       0       0       0       0
 23147 ;;      Temps:          0       0       0       0       0       0       0
 23148 ;;      Totals:         0       6       0       0       0       0       0
 23149 ;;Total ram usage:        6 bytes
 23150 ;; Hardware stack levels used:    1
 23151 ;; Hardware stack levels required when called:    9
 23152 ;; This function calls:
 23153 ;;		i1___ftadd
 23154 ;;		i1___ftdiv
 23155 ;;		i1_calcVars2ti
 23156 ;;		i1_confirmEdition
 23157 ;;		i1_integrator
 23158 ;;		i1_setPWM2duty
 23159 ;; This function is called by:
 23160 ;;		_UARTint
 23161 ;; This function uses a non-reentrant model
 23162 ;;
 23163                           
 23164                           	psect	text96
 23165  001486                     __ptext96:
 23166                           	opt stack 0
 23167  001486                     i1_longPressENTER:
 23168                           	opt stack 9
 23169                           
 23170                           ;DisplayProtocol.h: 380: if (!ENTERisLP) {
 23171                           
 23172                           ;incstack = 0
 23173  001486  0101               	movlb	1	; () banked
 23174  001488  51B6               	movf	_ENTERisLP& (0+255),w,b
 23175  00148A  A4D8               	btfss	status,2,c
 23176  00148C  0012               	return	
 23177                           
 23178                           ; BSR set to: 1
 23179                           ;DisplayProtocol.h: 381: ENTERisLP = 1;
 23180  00148E  0E01               	movlw	1
 23181  001490  0101               	movlb	1	; () banked
 23182  001492  6FB6               	movwf	_ENTERisLP& (0+255),b
 23183                           
 23184                           ;DisplayProtocol.h: 382: if(actualScreen == 0 || actualScreen == 4) {
 23185  001494  0101               	movlb	1	; () banked
 23186  001496  51BA               	movf	_actualScreen& (0+255),w,b
 23187  001498  B4D8               	btfsc	status,2,c
 23188  00149A  D005               	goto	i1l11897
 23189                           
 23190                           ; BSR set to: 1
 23191  00149C  0E04               	movlw	4
 23192  00149E  0101               	movlb	1	; () banked
 23193  0014A0  19BA               	xorwf	_actualScreen& (0+255),w,b
 23194  0014A2  A4D8               	btfss	status,2,c
 23195  0014A4  D024               	goto	i1l11913
 23196  0014A6                     i1l11897:
 23197                           
 23198                           ; BSR set to: 1
 23199                           ;DisplayProtocol.h: 383: if (holdUPcont > 5) {
 23200  0014A6  0E05               	movlw	5
 23201  0014A8  0101               	movlb	1	; () banked
 23202  0014AA  65C0               	cpfsgt	_holdUPcont& (0+255),b
 23203  0014AC  D014               	goto	i1l11907
 23204                           
 23205                           ; BSR set to: 1
 23206                           ;DisplayProtocol.h: 384: if (actualScreen == 0) {
 23207  0014AE  0101               	movlb	1	; () banked
 23208  0014B0  51BA               	movf	_actualScreen& (0+255),w,b
 23209  0014B2  A4D8               	btfss	status,2,c
 23210  0014B4  D007               	goto	i1l11903
 23211                           
 23212                           ; BSR set to: 1
 23213                           ;DisplayProtocol.h: 385: actualScreen = 1;
 23214  0014B6  0E01               	movlw	1
 23215  0014B8  0101               	movlb	1	; () banked
 23216  0014BA  6FBA               	movwf	_actualScreen& (0+255),b
 23217                           
 23218                           ;DisplayProtocol.h: 386: fd = 0;
 23219  0014BC  0E00               	movlw	0
 23220  0014BE  0101               	movlb	1	; () banked
 23221  0014C0  6FBC               	movwf	_fd& (0+255),b
 23222                           
 23223                           ;DisplayProtocol.h: 387: } else if (actualScreen == 4)
 23224  0014C2  0012               	return	
 23225  0014C4                     i1l11903:
 23226                           
 23227                           ; BSR set to: 1
 23228  0014C4  0E04               	movlw	4
 23229  0014C6  0101               	movlb	1	; () banked
 23230  0014C8  19BA               	xorwf	_actualScreen& (0+255),w,b
 23231  0014CA  A4D8               	btfss	status,2,c
 23232  0014CC  0012               	return	
 23233                           
 23234                           ; BSR set to: 1
 23235                           ;DisplayProtocol.h: 388: actualScreen = 9;
 23236  0014CE  0E09               	movlw	9
 23237  0014D0  0101               	movlb	1	; () banked
 23238  0014D2  6FBA               	movwf	_actualScreen& (0+255),b
 23239                           
 23240                           ; BSR set to: 1
 23241                           ;DisplayProtocol.h: 389: } else if(!ProcessStarted) {
 23242                           
 23243                           ; BSR set to: 1
 23244  0014D4  0012               	return	
 23245  0014D6                     i1l11907:
 23246                           
 23247                           ; BSR set to: 1
 23248  0014D6  503A               	movf	_ProcessStarted,w,c
 23249  0014D8  A4D8               	btfss	status,2,c
 23250  0014DA  0012               	return	
 23251                           
 23252                           ; BSR set to: 1
 23253                           ;DisplayProtocol.h: 390: tempLastScreen = actualScreen;
 23254  0014DC  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 23255                           
 23256                           ; BSR set to: 1
 23257                           ;DisplayProtocol.h: 391: actualScreen = 2;
 23258  0014E0  0E02               	movlw	2
 23259  0014E2  0101               	movlb	1	; () banked
 23260  0014E4  6FBA               	movwf	_actualScreen& (0+255),b
 23261                           
 23262                           ;DisplayProtocol.h: 392: selSN = 1;
 23263  0014E6  0E01               	movlw	1
 23264  0014E8  0101               	movlb	1	; () banked
 23265  0014EA  6FC3               	movwf	_selSN& (0+255),b
 23266                           
 23267                           ; BSR set to: 1
 23268                           ;DisplayProtocol.h: 393: }
 23269                           ;DisplayProtocol.h: 394: }else if(actualScreen == 5) {
 23270                           
 23271                           ; BSR set to: 1
 23272  0014EC  0012               	return	
 23273  0014EE                     i1l11913:
 23274                           
 23275                           ; BSR set to: 1
 23276  0014EE  0E05               	movlw	5
 23277  0014F0  0101               	movlb	1	; () banked
 23278  0014F2  19BA               	xorwf	_actualScreen& (0+255),w,b
 23279  0014F4  A4D8               	btfss	status,2,c
 23280  0014F6  D00F               	goto	i1l11921
 23281                           
 23282                           ; BSR set to: 1
 23283                           ;DisplayProtocol.h: 395: if(menuSection != 2)
 23284  0014F8  0E02               	movlw	2
 23285  0014FA  0101               	movlb	1	; () banked
 23286  0014FC  19C1               	xorwf	_menuSection& (0+255),w,b
 23287  0014FE  A4D8               	btfss	status,2,c
 23288                           
 23289                           ; BSR set to: 1
 23290                           ;DisplayProtocol.h: 396: integrator();
 23291  001500  EC85  F01E         	call	i1_integrator	;wreg free
 23292                           
 23293                           ;DisplayProtocol.h: 397: confirmEdition(!ProcessStarted);
 23294  001504  503A               	movf	_ProcessStarted,w,c
 23295  001506  A4D8               	btfss	status,2,c
 23296  001508  D002               	goto	i1u1782_20
 23297  00150A  0E01               	movlw	1
 23298  00150C  D001               	goto	i1u1783_20
 23299  00150E                     i1u1782_20:
 23300  00150E  0E00               	movlw	0
 23301  001510                     i1u1783_20:
 23302  001510  EC5D  F024         	call	i1_confirmEdition
 23303                           
 23304                           ;DisplayProtocol.h: 398: }else if(actualScreen == 12) {
 23305  001514  0012               	return	
 23306  001516                     i1l11921:
 23307  001516  0E0C               	movlw	12
 23308  001518  0101               	movlb	1	; () banked
 23309  00151A  19BA               	xorwf	_actualScreen& (0+255),w,b
 23310  00151C  A4D8               	btfss	status,2,c
 23311  00151E  0012               	return	
 23312                           
 23313                           ; BSR set to: 1
 23314                           ;DisplayProtocol.h: 399: integrator();
 23315  001520  EC85  F01E         	call	i1_integrator	;wreg free
 23316                           
 23317                           ;DisplayProtocol.h: 400: if(calibLevel == 0) {
 23318  001524  0101               	movlb	1	; () banked
 23319  001526  51BB               	movf	_calibLevel& (0+255),w,b
 23320  001528  A4D8               	btfss	status,2,c
 23321  00152A  D05A               	goto	i1l11951
 23322                           
 23323                           ; BSR set to: 1
 23324                           ;DisplayProtocol.h: 401: tempVelocidadMasa1 = (float)chanValf / tiXcorte;
 23325  00152C  C1AE  F072         	movff	_chanValf,i1___ftdiv@f1
 23326  001530  C1AF  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23327  001534  C1B0  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23328  001538  C0B2  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23329  00153C  C0B3  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23330  001540  C0B4  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23331  001544  EC0A  F01C         	call	i1___ftdiv	;wreg free
 23332  001548  C072  F19A         	movff	?i1___ftdiv,_tempVelocidadMasa1
 23333  00154C  C073  F19B         	movff	?i1___ftdiv+1,_tempVelocidadMasa1+1
 23334  001550  C074  F19C         	movff	?i1___ftdiv+2,_tempVelocidadMasa1+2
 23335                           
 23336                           ;DisplayProtocol.h: 402: tiXcorte = (float)0.5 / tempVelocidadMasa1;
 23337  001554  0E00               	movlw	0
 23338  001556  0100               	movlb	0	; () banked
 23339  001558  6F72               	movwf	i1___ftdiv@f1& (0+255),b
 23340  00155A  0E00               	movlw	0
 23341  00155C  0100               	movlb	0	; () banked
 23342  00155E  6F73               	movwf	(i1___ftdiv@f1+1)& (0+255),b
 23343  001560  0E3F               	movlw	63
 23344  001562  0100               	movlb	0	; () banked
 23345  001564  6F74               	movwf	(i1___ftdiv@f1+2)& (0+255),b
 23346  001566  C19A  F075         	movff	_tempVelocidadMasa1,i1___ftdiv@f2
 23347  00156A  C19B  F076         	movff	_tempVelocidadMasa1+1,i1___ftdiv@f2+1
 23348  00156E  C19C  F077         	movff	_tempVelocidadMasa1+2,i1___ftdiv@f2+2
 23349  001572  EC0A  F01C         	call	i1___ftdiv	;wreg free
 23350  001576  C072  F0B2         	movff	?i1___ftdiv,_tiXcorte
 23351  00157A  C073  F0B3         	movff	?i1___ftdiv+1,_tiXcorte+1
 23352  00157E  C074  F0B4         	movff	?i1___ftdiv+2,_tiXcorte+2
 23353                           
 23354                           ;DisplayProtocol.h: 403: calibLevel = 1;
 23355  001582  0E01               	movlw	1
 23356  001584  0101               	movlb	1	; () banked
 23357  001586  6FBB               	movwf	_calibLevel& (0+255),b
 23358                           
 23359                           ; BSR set to: 1
 23360                           ;DisplayProtocol.h: 404: numCortes = 1;
 23361  001588  0E00               	movlw	0
 23362  00158A  0100               	movlb	0	; () banked
 23363  00158C  6FB9               	movwf	(_numCortes+1)& (0+255),b
 23364  00158E  0E01               	movlw	1
 23365  001590  6FB8               	movwf	_numCortes& (0+255),b
 23366                           
 23367                           ; BSR set to: 0
 23368                           ;DisplayProtocol.h: 405: processState = 0;
 23369  001592  0E00               	movlw	0
 23370  001594  6E36               	movwf	_processState+1,c
 23371  001596  0E00               	movlw	0
 23372  001598  6E35               	movwf	_processState,c
 23373                           
 23374                           ; BSR set to: 0
 23375                           ;DisplayProtocol.h: 406: processTimer = 0;
 23376  00159A  0E00               	movlw	0
 23377  00159C  6E2B               	movwf	_processTimer,c
 23378  00159E  0E00               	movlw	0
 23379  0015A0  6E2C               	movwf	_processTimer+1,c
 23380  0015A2  0E00               	movlw	0
 23381  0015A4  6E2D               	movwf	_processTimer+2,c
 23382  0015A6  0E00               	movlw	0
 23383  0015A8  6E2E               	movwf	_processTimer+3,c
 23384                           
 23385                           ; BSR set to: 0
 23386                           ;DisplayProtocol.h: 407: bladeIsUP = 2;
 23387  0015AA  0E02               	movlw	2
 23388  0015AC  0100               	movlb	0	; () banked
 23389  0015AE  6FC9               	movwf	_bladeIsUP& (0+255),b
 23390                           
 23391                           ; BSR set to: 0
 23392                           ;DisplayProtocol.h: 408: ProcessStarted = 1;
 23393  0015B0  0E01               	movlw	1
 23394  0015B2  6E3A               	movwf	_ProcessStarted,c
 23395                           
 23396                           ; BSR set to: 0
 23397                           ;DisplayProtocol.h: 409: if(ProcessStarted && bladeIsUP != 1) {
 23398  0015B4  503A               	movf	_ProcessStarted,w,c
 23399  0015B6  B4D8               	btfsc	status,2,c
 23400  0015B8  D00F               	goto	i1l11949
 23401                           
 23402                           ; BSR set to: 0
 23403  0015BA  0100               	movlb	0	; () banked
 23404  0015BC  05C9               	decf	_bladeIsUP& (0+255),w,b
 23405  0015BE  B4D8               	btfsc	status,2,c
 23406  0015C0  D00B               	goto	i1l11949
 23407                           
 23408                           ; BSR set to: 0
 23409                           ;DisplayProtocol.h: 410: processState = 0;
 23410  0015C2  0E00               	movlw	0
 23411  0015C4  6E36               	movwf	_processState+1,c
 23412  0015C6  0E00               	movlw	0
 23413  0015C8  6E35               	movwf	_processState,c
 23414                           
 23415                           ; BSR set to: 0
 23416                           ;DisplayProtocol.h: 411: setPWM2duty(-400);
 23417  0015CA  0EFE               	movlw	254
 23418  0015CC  0100               	movlb	0	; () banked
 23419  0015CE  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 23420  0015D0  0E70               	movlw	112
 23421  0015D2  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 23422  0015D4  ECB9  F02D         	call	i1_setPWM2duty	;wreg free
 23423  0015D8                     i1l11949:
 23424                           
 23425                           ;DisplayProtocol.h: 412: }
 23426                           ;DisplayProtocol.h: 413: actualScreen = 6;
 23427  0015D8  0E06               	movlw	6
 23428  0015DA  0101               	movlb	1	; () banked
 23429  0015DC  6FBA               	movwf	_actualScreen& (0+255),b
 23430                           
 23431                           ;DisplayProtocol.h: 414: }else if(calibLevel == 1) {
 23432  0015DE  0012               	return	
 23433  0015E0                     i1l11951:
 23434                           
 23435                           ; BSR set to: 1
 23436  0015E0  0101               	movlb	1	; () banked
 23437  0015E2  05BB               	decf	_calibLevel& (0+255),w,b
 23438  0015E4  A4D8               	btfss	status,2,c
 23439  0015E6  D05A               	goto	i1l11977
 23440                           
 23441                           ; BSR set to: 1
 23442                           ;DisplayProtocol.h: 415: tempVelocidadMasa2 = (float)chanValf / tiXcorte;
 23443  0015E8  C1AE  F072         	movff	_chanValf,i1___ftdiv@f1
 23444  0015EC  C1AF  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23445  0015F0  C1B0  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23446  0015F4  C0B2  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23447  0015F8  C0B3  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23448  0015FC  C0B4  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23449  001600  EC0A  F01C         	call	i1___ftdiv	;wreg free
 23450  001604  C072  F19D         	movff	?i1___ftdiv,_tempVelocidadMasa2
 23451  001608  C073  F19E         	movff	?i1___ftdiv+1,_tempVelocidadMasa2+1
 23452  00160C  C074  F19F         	movff	?i1___ftdiv+2,_tempVelocidadMasa2+2
 23453                           
 23454                           ;DisplayProtocol.h: 416: tiXcorte = (float)0.25 / tempVelocidadMasa2;
 23455  001610  0E00               	movlw	0
 23456  001612  0100               	movlb	0	; () banked
 23457  001614  6F72               	movwf	i1___ftdiv@f1& (0+255),b
 23458  001616  0E80               	movlw	128
 23459  001618  0100               	movlb	0	; () banked
 23460  00161A  6F73               	movwf	(i1___ftdiv@f1+1)& (0+255),b
 23461  00161C  0E3E               	movlw	62
 23462  00161E  0100               	movlb	0	; () banked
 23463  001620  6F74               	movwf	(i1___ftdiv@f1+2)& (0+255),b
 23464  001622  C19D  F075         	movff	_tempVelocidadMasa2,i1___ftdiv@f2
 23465  001626  C19E  F076         	movff	_tempVelocidadMasa2+1,i1___ftdiv@f2+1
 23466  00162A  C19F  F077         	movff	_tempVelocidadMasa2+2,i1___ftdiv@f2+2
 23467  00162E  EC0A  F01C         	call	i1___ftdiv	;wreg free
 23468  001632  C072  F0B2         	movff	?i1___ftdiv,_tiXcorte
 23469  001636  C073  F0B3         	movff	?i1___ftdiv+1,_tiXcorte+1
 23470  00163A  C074  F0B4         	movff	?i1___ftdiv+2,_tiXcorte+2
 23471                           
 23472                           ;DisplayProtocol.h: 417: calibLevel = 2;
 23473  00163E  0E02               	movlw	2
 23474  001640  0101               	movlb	1	; () banked
 23475  001642  6FBB               	movwf	_calibLevel& (0+255),b
 23476                           
 23477                           ; BSR set to: 1
 23478                           ;DisplayProtocol.h: 418: numCortes = 1;
 23479  001644  0E00               	movlw	0
 23480  001646  0100               	movlb	0	; () banked
 23481  001648  6FB9               	movwf	(_numCortes+1)& (0+255),b
 23482  00164A  0E01               	movlw	1
 23483  00164C  6FB8               	movwf	_numCortes& (0+255),b
 23484                           
 23485                           ; BSR set to: 0
 23486                           ;DisplayProtocol.h: 419: processState = 0;
 23487  00164E  0E00               	movlw	0
 23488  001650  6E36               	movwf	_processState+1,c
 23489  001652  0E00               	movlw	0
 23490  001654  6E35               	movwf	_processState,c
 23491                           
 23492                           ; BSR set to: 0
 23493                           ;DisplayProtocol.h: 420: processTimer = 0;
 23494  001656  0E00               	movlw	0
 23495  001658  6E2B               	movwf	_processTimer,c
 23496  00165A  0E00               	movlw	0
 23497  00165C  6E2C               	movwf	_processTimer+1,c
 23498  00165E  0E00               	movlw	0
 23499  001660  6E2D               	movwf	_processTimer+2,c
 23500  001662  0E00               	movlw	0
 23501  001664  6E2E               	movwf	_processTimer+3,c
 23502                           
 23503                           ; BSR set to: 0
 23504                           ;DisplayProtocol.h: 421: bladeIsUP = 2;
 23505  001666  0E02               	movlw	2
 23506  001668  0100               	movlb	0	; () banked
 23507  00166A  6FC9               	movwf	_bladeIsUP& (0+255),b
 23508                           
 23509                           ; BSR set to: 0
 23510                           ;DisplayProtocol.h: 422: ProcessStarted = 1;
 23511  00166C  0E01               	movlw	1
 23512  00166E  6E3A               	movwf	_ProcessStarted,c
 23513                           
 23514                           ; BSR set to: 0
 23515                           ;DisplayProtocol.h: 423: if(ProcessStarted && bladeIsUP != 1) {
 23516  001670  503A               	movf	_ProcessStarted,w,c
 23517  001672  B4D8               	btfsc	status,2,c
 23518  001674  D00F               	goto	i1l11975
 23519                           
 23520                           ; BSR set to: 0
 23521  001676  0100               	movlb	0	; () banked
 23522  001678  05C9               	decf	_bladeIsUP& (0+255),w,b
 23523  00167A  B4D8               	btfsc	status,2,c
 23524  00167C  D00B               	goto	i1l11975
 23525                           
 23526                           ; BSR set to: 0
 23527                           ;DisplayProtocol.h: 424: processState = 0;
 23528  00167E  0E00               	movlw	0
 23529  001680  6E36               	movwf	_processState+1,c
 23530  001682  0E00               	movlw	0
 23531  001684  6E35               	movwf	_processState,c
 23532                           
 23533                           ; BSR set to: 0
 23534                           ;DisplayProtocol.h: 425: setPWM2duty(-400);
 23535  001686  0EFE               	movlw	254
 23536  001688  0100               	movlb	0	; () banked
 23537  00168A  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 23538  00168C  0E70               	movlw	112
 23539  00168E  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 23540  001690  ECB9  F02D         	call	i1_setPWM2duty	;wreg free
 23541  001694                     i1l11975:
 23542                           
 23543                           ;DisplayProtocol.h: 426: }
 23544                           ;DisplayProtocol.h: 427: actualScreen = 6;
 23545  001694  0E06               	movlw	6
 23546  001696  0101               	movlb	1	; () banked
 23547  001698  6FBA               	movwf	_actualScreen& (0+255),b
 23548                           
 23549                           ;DisplayProtocol.h: 428: }else if(calibLevel == 2) {
 23550  00169A  0012               	return	
 23551  00169C                     i1l11977:
 23552                           
 23553                           ; BSR set to: 1
 23554  00169C  0E02               	movlw	2
 23555  00169E  0101               	movlb	1	; () banked
 23556  0016A0  19BB               	xorwf	_calibLevel& (0+255),w,b
 23557  0016A2  A4D8               	btfss	status,2,c
 23558  0016A4  0012               	return	
 23559                           
 23560                           ; BSR set to: 1
 23561                           ;DisplayProtocol.h: 429: tempVelocidadMasa3 = (float)chanValf / tiXcorte;
 23562  0016A6  C1AE  F072         	movff	_chanValf,i1___ftdiv@f1
 23563  0016AA  C1AF  F073         	movff	_chanValf+1,i1___ftdiv@f1+1
 23564  0016AE  C1B0  F074         	movff	_chanValf+2,i1___ftdiv@f1+2
 23565  0016B2  C0B2  F075         	movff	_tiXcorte,i1___ftdiv@f2
 23566  0016B6  C0B3  F076         	movff	_tiXcorte+1,i1___ftdiv@f2+1
 23567  0016BA  C0B4  F077         	movff	_tiXcorte+2,i1___ftdiv@f2+2
 23568  0016BE  EC0A  F01C         	call	i1___ftdiv	;wreg free
 23569  0016C2  C072  F18F         	movff	?i1___ftdiv,_tempVelocidadMasa3
 23570  0016C6  C073  F190         	movff	?i1___ftdiv+1,_tempVelocidadMasa3+1
 23571  0016CA  C074  F191         	movff	?i1___ftdiv+2,_tempVelocidadMasa3+2
 23572                           
 23573                           ;DisplayProtocol.h: 430: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 23574  0016CE  C19D  F06B         	movff	_tempVelocidadMasa2,i1___ftadd@f2
 23575  0016D2  C19E  F06C         	movff	_tempVelocidadMasa2+1,i1___ftadd@f2+1
 23576  0016D6  C19F  F06D         	movff	_tempVelocidadMasa2+2,i1___ftadd@f2+2
 23577  0016DA  C19A  F068         	movff	_tempVelocidadMasa1,i1___ftadd@f1
 23578  0016DE  C19B  F069         	movff	_tempVelocidadMasa1+1,i1___ftadd@f1+1
 23579  0016E2  C19C  F06A         	movff	_tempVelocidadMasa1+2,i1___ftadd@f1+2
 23580  0016E6  ECC0  F013         	call	i1___ftadd	;wreg free
 23581  0016EA  C068  F090         	movff	?i1___ftadd,i1_longPressENTER$3198
 23582  0016EE  C069  F091         	movff	?i1___ftadd+1,i1_longPressENTER$3198+1
 23583  0016F2  C06A  F092         	movff	?i1___ftadd+2,i1_longPressENTER$3198+2
 23584                           
 23585                           ;DisplayProtocol.h: 430: float temp = (float)tempVelocidadMasa1 + tempVelocidadMasa2+ te
      +                          mpVelocidadMasa3;
 23586  0016F6  C090  F068         	movff	i1_longPressENTER$3198,i1___ftadd@f1
 23587  0016FA  C091  F069         	movff	i1_longPressENTER$3198+1,i1___ftadd@f1+1
 23588  0016FE  C092  F06A         	movff	i1_longPressENTER$3198+2,i1___ftadd@f1+2
 23589  001702  C18F  F06B         	movff	_tempVelocidadMasa3,i1___ftadd@f2
 23590  001706  C190  F06C         	movff	_tempVelocidadMasa3+1,i1___ftadd@f2+1
 23591  00170A  C191  F06D         	movff	_tempVelocidadMasa3+2,i1___ftadd@f2+2
 23592  00170E  ECC0  F013         	call	i1___ftadd	;wreg free
 23593  001712  C068  F08D         	movff	?i1___ftadd,i1longPressENTER@temp
 23594  001716  C069  F08E         	movff	?i1___ftadd+1,i1longPressENTER@temp+1
 23595  00171A  C06A  F08F         	movff	?i1___ftadd+2,i1longPressENTER@temp+2
 23596                           
 23597                           ;DisplayProtocol.h: 431: chanValf = (float)temp / 3.0f;
 23598  00171E  C08D  F072         	movff	i1longPressENTER@temp,i1___ftdiv@f1
 23599  001722  C08E  F073         	movff	i1longPressENTER@temp+1,i1___ftdiv@f1+1
 23600  001726  C08F  F074         	movff	i1longPressENTER@temp+2,i1___ftdiv@f1+2
 23601  00172A  0E00               	movlw	0
 23602  00172C  0100               	movlb	0	; () banked
 23603  00172E  6F75               	movwf	i1___ftdiv@f2& (0+255),b
 23604  001730  0E40               	movlw	64
 23605  001732  0100               	movlb	0	; () banked
 23606  001734  6F76               	movwf	(i1___ftdiv@f2+1)& (0+255),b
 23607  001736  0E40               	movlw	64
 23608  001738  0100               	movlb	0	; () banked
 23609  00173A  6F77               	movwf	(i1___ftdiv@f2+2)& (0+255),b
 23610  00173C  EC0A  F01C         	call	i1___ftdiv	;wreg free
 23611  001740  C072  F1AE         	movff	?i1___ftdiv,_chanValf
 23612  001744  C073  F1AF         	movff	?i1___ftdiv+1,_chanValf+1
 23613  001748  C074  F1B0         	movff	?i1___ftdiv+2,_chanValf+2
 23614                           
 23615                           ;DisplayProtocol.h: 432: numCortes = tempNumCortes;
 23616  00174C  C192  F0B8         	movff	_tempNumCortes,_numCortes
 23617  001750  C193  F0B9         	movff	_tempNumCortes+1,_numCortes+1
 23618                           
 23619                           ;DisplayProtocol.h: 433: calcVars2ti();
 23620  001754  EC22  F033         	call	i1_calcVars2ti	;wreg free
 23621                           
 23622                           ;DisplayProtocol.h: 434: confirmEdition(!ProcessStarted);
 23623  001758  503A               	movf	_ProcessStarted,w,c
 23624  00175A  A4D8               	btfss	status,2,c
 23625  00175C  D002               	goto	i1u1792_20
 23626  00175E  0E01               	movlw	1
 23627  001760  D001               	goto	i1u1793_20
 23628  001762                     i1u1792_20:
 23629  001762  0E00               	movlw	0
 23630  001764                     i1u1793_20:
 23631  001764  EC5D  F024         	call	i1_confirmEdition
 23632  001768  0012               	return	
 23633  00176A                     __end_ofi1_longPressENTER:
 23634                           	opt stack 0
 23635                           pclatu	equ	0xFFB
 23636                           pclath	equ	0xFFA
 23637                           tblptru	equ	0xFF8
 23638                           tblptrh	equ	0xFF7
 23639                           tblptrl	equ	0xFF6
 23640                           tablat	equ	0xFF5
 23641                           prodh	equ	0xFF4
 23642                           prodl	equ	0xFF3
 23643                           intcon	equ	0xFF2
 23644                           postinc0	equ	0xFEE
 23645                           fsr0h	equ	0xFEA
 23646                           fsr0l	equ	0xFE9
 23647                           wreg	equ	0xFE8
 23648                           postdec1	equ	0xFE5
 23649                           fsr1h	equ	0xFE2
 23650                           fsr1l	equ	0xFE1
 23651                           bsr	equ	0xFE0
 23652                           indf2	equ	0xFDF
 23653                           postinc2	equ	0xFDE
 23654                           postdec2	equ	0xFDD
 23655                           plusw2	equ	0xFDB
 23656                           fsr2h	equ	0xFDA
 23657                           fsr2l	equ	0xFD9
 23658                           status	equ	0xFD8
 23659                           
 23660 ;; *************** function i1_integrator *****************
 23661 ;; Defined at:
 23662 ;;		line 61 in file "source/DisplayProtocol.h"
 23663 ;; Parameters:    Size  Location     Type
 23664 ;;		None
 23665 ;; Auto vars:     Size  Location     Type
 23666 ;;  integrator      4   39[BANK0 ] long 
 23667 ;;  integrator      4   35[BANK0 ] long 
 23668 ;;  integrator      2   43[BANK0 ] int 
 23669 ;; Return value:  Size  Location     Type
 23670 ;;                  1    wreg      void 
 23671 ;; Registers used:
 23672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23673 ;; Tracked objects:
 23674 ;;		On entry : 0/0
 23675 ;;		On exit  : 0/0
 23676 ;;		Unchanged: 0/0
 23677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23678 ;;      Params:         0       0       0       0       0       0       0
 23679 ;;      Locals:         0      10       0       0       0       0       0
 23680 ;;      Temps:          0       2       0       0       0       0       0
 23681 ;;      Totals:         0      12       0       0       0       0       0
 23682 ;;Total ram usage:       12 bytes
 23683 ;; Hardware stack levels used:    1
 23684 ;; Hardware stack levels required when called:    6
 23685 ;; This function calls:
 23686 ;;		i1___altoft
 23687 ;;		i1___ftdiv
 23688 ;;		i1___lmul
 23689 ;; This function is called by:
 23690 ;;		i1_longPressENTER
 23691 ;; This function uses a non-reentrant model
 23692 ;;
 23693                           
 23694                           	psect	text97
 23695  003D0A                     __ptext97:
 23696                           	opt stack 0
 23697  003D0A                     i1_integrator:
 23698                           	opt stack 11
 23699                           
 23700                           ;DisplayProtocol.h: 62: long acum = 0;
 23701                           
 23702                           ;incstack = 0
 23703  003D0A  0E00               	movlw	0
 23704  003D0C  0100               	movlb	0	; () banked
 23705  003D0E  6F83               	movwf	i1integrator@acum& (0+255),b
 23706  003D10  0E00               	movlw	0
 23707  003D12  6F84               	movwf	(i1integrator@acum+1)& (0+255),b
 23708  003D14  0E00               	movlw	0
 23709  003D16  6F85               	movwf	(i1integrator@acum+2)& (0+255),b
 23710  003D18  0E00               	movlw	0
 23711  003D1A  6F86               	movwf	(i1integrator@acum+3)& (0+255),b
 23712                           
 23713                           ;DisplayProtocol.h: 63: long temp = 0;
 23714  003D1C  0E00               	movlw	0
 23715  003D1E  0100               	movlb	0	; () banked
 23716  003D20  6F87               	movwf	i1integrator@temp& (0+255),b
 23717  003D22  0E00               	movlw	0
 23718  003D24  6F88               	movwf	(i1integrator@temp+1)& (0+255),b
 23719  003D26  0E00               	movlw	0
 23720  003D28  6F89               	movwf	(i1integrator@temp+2)& (0+255),b
 23721  003D2A  0E00               	movlw	0
 23722  003D2C  6F8A               	movwf	(i1integrator@temp+3)& (0+255),b
 23723                           
 23724                           ;DisplayProtocol.h: 64: int i;
 23725                           ;DisplayProtocol.h: 65: for(i = 0; i < 6; i++) {
 23726  003D2E  0E00               	movlw	0
 23727  003D30  0100               	movlb	0	; () banked
 23728  003D32  6F8C               	movwf	(i1integrator@i+1)& (0+255),b
 23729  003D34  0E00               	movlw	0
 23730  003D36  6F8B               	movwf	i1integrator@i& (0+255),b
 23731  003D38                     i1l10749:
 23732                           
 23733                           ; BSR set to: 0
 23734  003D38  0100               	movlb	0	; () banked
 23735  003D3A  BF8C               	btfsc	(i1integrator@i+1)& (0+255),7,b
 23736  003D3C  D008               	goto	i1l10753
 23737  003D3E  0100               	movlb	0	; () banked
 23738  003D40  518C               	movf	(i1integrator@i+1)& (0+255),w,b
 23739  003D42  E152               	bnz	i1l10761
 23740  003D44  0E06               	movlw	6
 23741  003D46  0100               	movlb	0	; () banked
 23742  003D48  5D8B               	subwf	i1integrator@i& (0+255),w,b
 23743  003D4A  B0D8               	btfsc	status,0,c
 23744  003D4C  D04D               	goto	i1l10761
 23745  003D4E                     i1l10753:
 23746                           
 23747                           ; BSR set to: 0
 23748                           ;DisplayProtocol.h: 66: temp = (long)chanValdig[i]*exp10[i];
 23749  003D4E  0EA0               	movlw	low _chanValdig
 23750  003D50  0100               	movlb	0	; () banked
 23751  003D52  258B               	addwf	i1integrator@i& (0+255),w,b
 23752  003D54  6ED9               	movwf	fsr2l,c
 23753  003D56  0E01               	movlw	high _chanValdig
 23754  003D58  0100               	movlb	0	; () banked
 23755  003D5A  218C               	addwfc	(i1integrator@i+1)& (0+255),w,b
 23756  003D5C  6EDA               	movwf	fsr2h,c
 23757  003D5E  50DF               	movf	indf2,w,c
 23758  003D60  0100               	movlb	0	; () banked
 23759  003D62  6F60               	movwf	i1___lmul@multiplier& (0+255),b
 23760  003D64  0E00               	movlw	0
 23761  003D66  BF60               	btfsc	i1___lmul@multiplier& (0+255),7,b
 23762  003D68  0EFF               	movlw	-1
 23763  003D6A  6F61               	movwf	(i1___lmul@multiplier+1)& (0+255),b
 23764  003D6C  6F62               	movwf	(i1___lmul@multiplier+2)& (0+255),b
 23765  003D6E  6F63               	movwf	(i1___lmul@multiplier+3)& (0+255),b
 23766  003D70  0E77               	movlw	low _exp10
 23767  003D72  0100               	movlb	0	; () banked
 23768  003D74  6F81               	movwf	??i1_integrator& (0+255),b
 23769  003D76  0E01               	movlw	high _exp10
 23770  003D78  0100               	movlb	0	; () banked
 23771  003D7A  6F82               	movwf	(??i1_integrator+1)& (0+255),b
 23772  003D7C  90D8               	bcf	status,0,c
 23773  003D7E  0100               	movlb	0	; () banked
 23774  003D80  358B               	rlcf	i1integrator@i& (0+255),w,b
 23775  003D82  6ED9               	movwf	fsr2l,c
 23776  003D84  0100               	movlb	0	; () banked
 23777  003D86  358C               	rlcf	(i1integrator@i+1)& (0+255),w,b
 23778  003D88  6EDA               	movwf	fsr2h,c
 23779  003D8A  90D8               	bcf	status,0,c
 23780  003D8C  36D9               	rlcf	fsr2l,f,c
 23781  003D8E  36DA               	rlcf	fsr2h,f,c
 23782  003D90  0100               	movlb	0	; () banked
 23783  003D92  5181               	movf	??i1_integrator& (0+255),w,b
 23784  003D94  26D9               	addwf	fsr2l,f,c
 23785  003D96  0100               	movlb	0	; () banked
 23786  003D98  5182               	movf	(??i1_integrator+1)& (0+255),w,b
 23787  003D9A  22DA               	addwfc	fsr2h,f,c
 23788  003D9C  CFDE F064          	movff	postinc2,i1___lmul@multiplicand
 23789  003DA0  CFDE F065          	movff	postinc2,i1___lmul@multiplicand+1
 23790  003DA4  CFDE F066          	movff	postinc2,i1___lmul@multiplicand+2
 23791  003DA8  CFDE F067          	movff	postinc2,i1___lmul@multiplicand+3
 23792  003DAC  EC1A  F031         	call	i1___lmul	;wreg free
 23793  003DB0  C060  F087         	movff	?i1___lmul,i1integrator@temp
 23794  003DB4  C061  F088         	movff	?i1___lmul+1,i1integrator@temp+1
 23795  003DB8  C062  F089         	movff	?i1___lmul+2,i1integrator@temp+2
 23796  003DBC  C063  F08A         	movff	?i1___lmul+3,i1integrator@temp+3
 23797                           
 23798                           ;DisplayProtocol.h: 67: acum += temp;
 23799  003DC0  0100               	movlb	0	; () banked
 23800  003DC2  5187               	movf	i1integrator@temp& (0+255),w,b
 23801  003DC4  0100               	movlb	0	; () banked
 23802  003DC6  2783               	addwf	i1integrator@acum& (0+255),f,b
 23803  003DC8  0100               	movlb	0	; () banked
 23804  003DCA  5188               	movf	(i1integrator@temp+1)& (0+255),w,b
 23805  003DCC  0100               	movlb	0	; () banked
 23806  003DCE  2384               	addwfc	(i1integrator@acum+1)& (0+255),f,b
 23807  003DD0  0100               	movlb	0	; () banked
 23808  003DD2  5189               	movf	(i1integrator@temp+2)& (0+255),w,b
 23809  003DD4  0100               	movlb	0	; () banked
 23810  003DD6  2385               	addwfc	(i1integrator@acum+2)& (0+255),f,b
 23811  003DD8  0100               	movlb	0	; () banked
 23812  003DDA  518A               	movf	(i1integrator@temp+3)& (0+255),w,b
 23813  003DDC  0100               	movlb	0	; () banked
 23814  003DDE  2386               	addwfc	(i1integrator@acum+3)& (0+255),f,b
 23815                           
 23816                           ; BSR set to: 0
 23817  003DE0  0100               	movlb	0	; () banked
 23818  003DE2  4B8B               	infsnz	i1integrator@i& (0+255),f,b
 23819  003DE4  2B8C               	incf	(i1integrator@i+1)& (0+255),f,b
 23820  003DE6  D7A8               	goto	i1l10749
 23821  003DE8                     i1l10761:
 23822                           
 23823                           ; BSR set to: 0
 23824                           ;DisplayProtocol.h: 68: }
 23825                           ;DisplayProtocol.h: 69: chanValf = (float)acum / 1000;
 23826  003DE8  C083  F068         	movff	i1integrator@acum,i1___altoft@c
 23827  003DEC  C084  F069         	movff	i1integrator@acum+1,i1___altoft@c+1
 23828  003DF0  C085  F06A         	movff	i1integrator@acum+2,i1___altoft@c+2
 23829  003DF4  C086  F06B         	movff	i1integrator@acum+3,i1___altoft@c+3
 23830  003DF8  EC37  F02C         	call	i1___altoft	;wreg free
 23831  003DFC  C068  F072         	movff	?i1___altoft,i1___ftdiv@f1
 23832  003E00  C069  F073         	movff	?i1___altoft+1,i1___ftdiv@f1+1
 23833  003E04  C06A  F074         	movff	?i1___altoft+2,i1___ftdiv@f1+2
 23834  003E08  0E00               	movlw	0
 23835  003E0A  0100               	movlb	0	; () banked
 23836  003E0C  6F75               	movwf	i1___ftdiv@f2& (0+255),b
 23837  003E0E  0E7A               	movlw	122
 23838  003E10  0100               	movlb	0	; () banked
 23839  003E12  6F76               	movwf	(i1___ftdiv@f2+1)& (0+255),b
 23840  003E14  0E44               	movlw	68
 23841  003E16  0100               	movlb	0	; () banked
 23842  003E18  6F77               	movwf	(i1___ftdiv@f2+2)& (0+255),b
 23843  003E1A  EC0A  F01C         	call	i1___ftdiv	;wreg free
 23844  003E1E  C072  F1AE         	movff	?i1___ftdiv,_chanValf
 23845  003E22  C073  F1AF         	movff	?i1___ftdiv+1,_chanValf+1
 23846  003E26  C074  F1B0         	movff	?i1___ftdiv+2,_chanValf+2
 23847  003E2A  0012               	return		;funcret
 23848  003E2C                     __end_ofi1_integrator:
 23849                           	opt stack 0
 23850                           pclatu	equ	0xFFB
 23851                           pclath	equ	0xFFA
 23852                           tblptru	equ	0xFF8
 23853                           tblptrh	equ	0xFF7
 23854                           tblptrl	equ	0xFF6
 23855                           tablat	equ	0xFF5
 23856                           prodh	equ	0xFF4
 23857                           prodl	equ	0xFF3
 23858                           intcon	equ	0xFF2
 23859                           postinc0	equ	0xFEE
 23860                           fsr0h	equ	0xFEA
 23861                           fsr0l	equ	0xFE9
 23862                           wreg	equ	0xFE8
 23863                           postdec1	equ	0xFE5
 23864                           fsr1h	equ	0xFE2
 23865                           fsr1l	equ	0xFE1
 23866                           bsr	equ	0xFE0
 23867                           indf2	equ	0xFDF
 23868                           postinc2	equ	0xFDE
 23869                           postdec2	equ	0xFDD
 23870                           plusw2	equ	0xFDB
 23871                           fsr2h	equ	0xFDA
 23872                           fsr2l	equ	0xFD9
 23873                           status	equ	0xFD8
 23874                           
 23875 ;; *************** function i1___lmul *****************
 23876 ;; Defined at:
 23877 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul32.c"
 23878 ;; Parameters:    Size  Location     Type
 23879 ;;  multiplier      4    0[BANK0 ] unsigned long 
 23880 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 23881 ;; Auto vars:     Size  Location     Type
 23882 ;;  __lmul          4    8[BANK0 ] unsigned long 
 23883 ;; Return value:  Size  Location     Type
 23884 ;;                  4    0[BANK0 ] unsigned long 
 23885 ;; Registers used:
 23886 ;;		wreg, status,2, status,0
 23887 ;; Tracked objects:
 23888 ;;		On entry : 0/0
 23889 ;;		On exit  : 0/0
 23890 ;;		Unchanged: 0/0
 23891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23892 ;;      Params:         0       8       0       0       0       0       0
 23893 ;;      Locals:         0       4       0       0       0       0       0
 23894 ;;      Temps:          0       0       0       0       0       0       0
 23895 ;;      Totals:         0      12       0       0       0       0       0
 23896 ;;Total ram usage:       12 bytes
 23897 ;; Hardware stack levels used:    1
 23898 ;; Hardware stack levels required when called:    4
 23899 ;; This function calls:
 23900 ;;		Nothing
 23901 ;; This function is called by:
 23902 ;;		i1_desintegrator
 23903 ;;		i1_integrator
 23904 ;; This function uses a non-reentrant model
 23905 ;;
 23906                           
 23907                           	psect	text98
 23908  006234                     __ptext98:
 23909                           	opt stack 0
 23910  006234                     i1___lmul:
 23911                           	opt stack 12
 23912                           
 23913                           ;incstack = 0
 23914  006234  0E00               	movlw	0
 23915  006236  0100               	movlb	0	; () banked
 23916  006238  6F68               	movwf	i1___lmul@product& (0+255),b
 23917  00623A  0E00               	movlw	0
 23918  00623C  6F69               	movwf	(i1___lmul@product+1)& (0+255),b
 23919  00623E  0E00               	movlw	0
 23920  006240  6F6A               	movwf	(i1___lmul@product+2)& (0+255),b
 23921  006242  0E00               	movlw	0
 23922  006244  6F6B               	movwf	(i1___lmul@product+3)& (0+255),b
 23923  006246                     i1l10383:
 23924                           
 23925                           ; BSR set to: 0
 23926  006246  0100               	movlb	0	; () banked
 23927  006248  A160               	btfss	i1___lmul@multiplier& (0+255),0,b
 23928  00624A  D010               	goto	i1l10387
 23929                           
 23930                           ; BSR set to: 0
 23931  00624C  0100               	movlb	0	; () banked
 23932  00624E  5164               	movf	i1___lmul@multiplicand& (0+255),w,b
 23933  006250  0100               	movlb	0	; () banked
 23934  006252  2768               	addwf	i1___lmul@product& (0+255),f,b
 23935  006254  0100               	movlb	0	; () banked
 23936  006256  5165               	movf	(i1___lmul@multiplicand+1)& (0+255),w,b
 23937  006258  0100               	movlb	0	; () banked
 23938  00625A  2369               	addwfc	(i1___lmul@product+1)& (0+255),f,b
 23939  00625C  0100               	movlb	0	; () banked
 23940  00625E  5166               	movf	(i1___lmul@multiplicand+2)& (0+255),w,b
 23941  006260  0100               	movlb	0	; () banked
 23942  006262  236A               	addwfc	(i1___lmul@product+2)& (0+255),f,b
 23943  006264  0100               	movlb	0	; () banked
 23944  006266  5167               	movf	(i1___lmul@multiplicand+3)& (0+255),w,b
 23945  006268  0100               	movlb	0	; () banked
 23946  00626A  236B               	addwfc	(i1___lmul@product+3)& (0+255),f,b
 23947  00626C                     i1l10387:
 23948                           
 23949                           ; BSR set to: 0
 23950  00626C  0100               	movlb	0	; () banked
 23951  00626E  90D8               	bcf	status,0,c
 23952  006270  3764               	rlcf	i1___lmul@multiplicand& (0+255),f,b
 23953  006272  3765               	rlcf	(i1___lmul@multiplicand+1)& (0+255),f,b
 23954  006274  3766               	rlcf	(i1___lmul@multiplicand+2)& (0+255),f,b
 23955  006276  3767               	rlcf	(i1___lmul@multiplicand+3)& (0+255),f,b
 23956                           
 23957                           ; BSR set to: 0
 23958  006278  0100               	movlb	0	; () banked
 23959  00627A  90D8               	bcf	status,0,c
 23960  00627C  3363               	rrcf	(i1___lmul@multiplier+3)& (0+255),f,b
 23961  00627E  3362               	rrcf	(i1___lmul@multiplier+2)& (0+255),f,b
 23962  006280  3361               	rrcf	(i1___lmul@multiplier+1)& (0+255),f,b
 23963  006282  3360               	rrcf	i1___lmul@multiplier& (0+255),f,b
 23964  006284  0100               	movlb	0	; () banked
 23965  006286  5160               	movf	i1___lmul@multiplier& (0+255),w,b
 23966  006288  0100               	movlb	0	; () banked
 23967  00628A  1161               	iorwf	(i1___lmul@multiplier+1)& (0+255),w,b
 23968  00628C  0100               	movlb	0	; () banked
 23969  00628E  1162               	iorwf	(i1___lmul@multiplier+2)& (0+255),w,b
 23970  006290  0100               	movlb	0	; () banked
 23971  006292  1163               	iorwf	(i1___lmul@multiplier+3)& (0+255),w,b
 23972  006294  A4D8               	btfss	status,2,c
 23973  006296  D7D7               	goto	i1l10383
 23974                           
 23975                           ; BSR set to: 0
 23976  006298  C068  F060         	movff	i1___lmul@product,?i1___lmul
 23977  00629C  C069  F061         	movff	i1___lmul@product+1,?i1___lmul+1
 23978  0062A0  C06A  F062         	movff	i1___lmul@product+2,?i1___lmul+2
 23979  0062A4  C06B  F063         	movff	i1___lmul@product+3,?i1___lmul+3
 23980                           
 23981                           ; BSR set to: 0
 23982  0062A8  0012               	return		;funcret
 23983  0062AA                     __end_ofi1___lmul:
 23984                           	opt stack 0
 23985                           pclatu	equ	0xFFB
 23986                           pclath	equ	0xFFA
 23987                           tblptru	equ	0xFF8
 23988                           tblptrh	equ	0xFF7
 23989                           tblptrl	equ	0xFF6
 23990                           tablat	equ	0xFF5
 23991                           prodh	equ	0xFF4
 23992                           prodl	equ	0xFF3
 23993                           intcon	equ	0xFF2
 23994                           postinc0	equ	0xFEE
 23995                           fsr0h	equ	0xFEA
 23996                           fsr0l	equ	0xFE9
 23997                           wreg	equ	0xFE8
 23998                           postdec1	equ	0xFE5
 23999                           fsr1h	equ	0xFE2
 24000                           fsr1l	equ	0xFE1
 24001                           bsr	equ	0xFE0
 24002                           indf2	equ	0xFDF
 24003                           postinc2	equ	0xFDE
 24004                           postdec2	equ	0xFDD
 24005                           plusw2	equ	0xFDB
 24006                           fsr2h	equ	0xFDA
 24007                           fsr2l	equ	0xFD9
 24008                           status	equ	0xFD8
 24009                           
 24010 ;; *************** function i1___altoft *****************
 24011 ;; Defined at:
 24012 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
 24013 ;; Parameters:    Size  Location     Type
 24014 ;;  c               4    8[BANK0 ] long 
 24015 ;; Auto vars:     Size  Location     Type
 24016 ;;  __altoft        1   17[BANK0 ] unsigned char 
 24017 ;;  __altoft        1   16[BANK0 ] unsigned char 
 24018 ;; Return value:  Size  Location     Type
 24019 ;;                  3    8[BANK0 ] float 
 24020 ;; Registers used:
 24021 ;;		wreg, status,2, status,0, cstack
 24022 ;; Tracked objects:
 24023 ;;		On entry : 0/0
 24024 ;;		On exit  : 0/0
 24025 ;;		Unchanged: 0/0
 24026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24027 ;;      Params:         0       4       0       0       0       0       0
 24028 ;;      Locals:         0       2       0       0       0       0       0
 24029 ;;      Temps:          0       4       0       0       0       0       0
 24030 ;;      Totals:         0      10       0       0       0       0       0
 24031 ;;Total ram usage:       10 bytes
 24032 ;; Hardware stack levels used:    1
 24033 ;; Hardware stack levels required when called:    5
 24034 ;; This function calls:
 24035 ;;		i1___ftpack
 24036 ;; This function is called by:
 24037 ;;		i1_integrator
 24038 ;; This function uses a non-reentrant model
 24039 ;;
 24040                           
 24041                           	psect	text99
 24042  00586E                     __ptext99:
 24043                           	opt stack 0
 24044  00586E                     i1___altoft:
 24045                           	opt stack 11
 24046                           
 24047                           ; BSR set to: 0
 24048                           ;incstack = 0
 24049  00586E  0E00               	movlw	0
 24050  005870  0100               	movlb	0	; () banked
 24051  005872  6F71               	movwf	i1___altoft@sign& (0+255),b
 24052  005874  0E8E               	movlw	142
 24053  005876  0100               	movlb	0	; () banked
 24054  005878  6F70               	movwf	i1___altoft@exp& (0+255),b
 24055                           
 24056                           ; BSR set to: 0
 24057  00587A  0100               	movlb	0	; () banked
 24058  00587C  AF6B               	btfss	(i1___altoft@c+3)& (0+255),7,b
 24059  00587E  D015               	goto	i1l10445
 24060                           
 24061                           ; BSR set to: 0
 24062  005880  0100               	movlb	0	; () banked
 24063  005882  1F6B               	comf	(i1___altoft@c+3)& (0+255),f,b
 24064  005884  1F6A               	comf	(i1___altoft@c+2)& (0+255),f,b
 24065  005886  1F69               	comf	(i1___altoft@c+1)& (0+255),f,b
 24066  005888  6D68               	negf	i1___altoft@c& (0+255),b
 24067  00588A  0E00               	movlw	0
 24068  00588C  2369               	addwfc	(i1___altoft@c+1)& (0+255),f,b
 24069  00588E  236A               	addwfc	(i1___altoft@c+2)& (0+255),f,b
 24070  005890  236B               	addwfc	(i1___altoft@c+3)& (0+255),f,b
 24071                           
 24072                           ; BSR set to: 0
 24073  005892  0E01               	movlw	1
 24074  005894  0100               	movlb	0	; () banked
 24075  005896  6F71               	movwf	i1___altoft@sign& (0+255),b
 24076                           
 24077                           ; BSR set to: 0
 24078  005898  D008               	goto	i1l10445
 24079  00589A                     i1l10443:
 24080                           
 24081                           ; BSR set to: 0
 24082  00589A  0100               	movlb	0	; () banked
 24083  00589C  90D8               	bcf	status,0,c
 24084  00589E  336B               	rrcf	(i1___altoft@c+3)& (0+255),f,b
 24085  0058A0  336A               	rrcf	(i1___altoft@c+2)& (0+255),f,b
 24086  0058A2  3369               	rrcf	(i1___altoft@c+1)& (0+255),f,b
 24087  0058A4  3368               	rrcf	i1___altoft@c& (0+255),f,b
 24088  0058A6  0100               	movlb	0	; () banked
 24089  0058A8  2B70               	incf	i1___altoft@exp& (0+255),f,b
 24090  0058AA                     i1l10445:
 24091                           
 24092                           ; BSR set to: 0
 24093  0058AA  0E00               	movlw	0
 24094  0058AC  0100               	movlb	0	; () banked
 24095  0058AE  1568               	andwf	i1___altoft@c& (0+255),w,b
 24096  0058B0  0100               	movlb	0	; () banked
 24097  0058B2  6F6C               	movwf	??i1___altoft& (0+255),b
 24098  0058B4  0E00               	movlw	0
 24099  0058B6  0100               	movlb	0	; () banked
 24100  0058B8  1569               	andwf	(i1___altoft@c+1)& (0+255),w,b
 24101  0058BA  0100               	movlb	0	; () banked
 24102  0058BC  6F6D               	movwf	(??i1___altoft+1)& (0+255),b
 24103  0058BE  0E00               	movlw	0
 24104  0058C0  0100               	movlb	0	; () banked
 24105  0058C2  156A               	andwf	(i1___altoft@c+2)& (0+255),w,b
 24106  0058C4  0100               	movlb	0	; () banked
 24107  0058C6  6F6E               	movwf	(??i1___altoft+2)& (0+255),b
 24108  0058C8  0EFF               	movlw	255
 24109  0058CA  0100               	movlb	0	; () banked
 24110  0058CC  156B               	andwf	(i1___altoft@c+3)& (0+255),w,b
 24111  0058CE  0100               	movlb	0	; () banked
 24112  0058D0  6F6F               	movwf	(??i1___altoft+3)& (0+255),b
 24113  0058D2  0100               	movlb	0	; () banked
 24114  0058D4  516C               	movf	??i1___altoft& (0+255),w,b
 24115  0058D6  0100               	movlb	0	; () banked
 24116  0058D8  116D               	iorwf	(??i1___altoft+1)& (0+255),w,b
 24117  0058DA  0100               	movlb	0	; () banked
 24118  0058DC  116E               	iorwf	(??i1___altoft+2)& (0+255),w,b
 24119  0058DE  0100               	movlb	0	; () banked
 24120  0058E0  116F               	iorwf	(??i1___altoft+3)& (0+255),w,b
 24121  0058E2  A4D8               	btfss	status,2,c
 24122  0058E4  D7DA               	goto	i1l10443
 24123                           
 24124                           ; BSR set to: 0
 24125                           
 24126                           ; BSR set to: 0
 24127  0058E6  C068  F060         	movff	i1___altoft@c,i1___ftpack@arg
 24128  0058EA  C069  F061         	movff	i1___altoft@c+1,i1___ftpack@arg+1
 24129  0058EE  C06A  F062         	movff	i1___altoft@c+2,i1___ftpack@arg+2
 24130  0058F2  C070  F063         	movff	i1___altoft@exp,i1___ftpack@exp
 24131  0058F6  C071  F064         	movff	i1___altoft@sign,i1___ftpack@sign
 24132  0058FA  EC52  F022         	call	i1___ftpack	;wreg free
 24133  0058FE  C060  F068         	movff	?i1___ftpack,?i1___altoft
 24134  005902  C061  F069         	movff	?i1___ftpack+1,?i1___altoft+1
 24135  005906  C062  F06A         	movff	?i1___ftpack+2,?i1___altoft+2
 24136  00590A  0012               	return	
 24137  00590C                     __end_ofi1___altoft:
 24138                           	opt stack 0
 24139                           pclatu	equ	0xFFB
 24140                           pclath	equ	0xFFA
 24141                           tblptru	equ	0xFF8
 24142                           tblptrh	equ	0xFF7
 24143                           tblptrl	equ	0xFF6
 24144                           tablat	equ	0xFF5
 24145                           prodh	equ	0xFF4
 24146                           prodl	equ	0xFF3
 24147                           intcon	equ	0xFF2
 24148                           postinc0	equ	0xFEE
 24149                           fsr0h	equ	0xFEA
 24150                           fsr0l	equ	0xFE9
 24151                           wreg	equ	0xFE8
 24152                           postdec1	equ	0xFE5
 24153                           fsr1h	equ	0xFE2
 24154                           fsr1l	equ	0xFE1
 24155                           bsr	equ	0xFE0
 24156                           indf2	equ	0xFDF
 24157                           postinc2	equ	0xFDE
 24158                           postdec2	equ	0xFDD
 24159                           plusw2	equ	0xFDB
 24160                           fsr2h	equ	0xFDA
 24161                           fsr2l	equ	0xFD9
 24162                           status	equ	0xFD8
 24163                           
 24164 ;; *************** function i1_confirmEdition *****************
 24165 ;; Defined at:
 24166 ;;		line 72 in file "source/DisplayProtocol.h"
 24167 ;; Parameters:    Size  Location     Type
 24168 ;;  yes             1    wreg     unsigned char 
 24169 ;; Auto vars:     Size  Location     Type
 24170 ;;  yes             1   33[BANK0 ] unsigned char 
 24171 ;; Return value:  Size  Location     Type
 24172 ;;                  1    wreg      void 
 24173 ;; Registers used:
 24174 ;;		wreg, status,2, status,0, cstack
 24175 ;; Tracked objects:
 24176 ;;		On entry : 0/0
 24177 ;;		On exit  : 0/0
 24178 ;;		Unchanged: 0/0
 24179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24180 ;;      Params:         0       0       0       0       0       0       0
 24181 ;;      Locals:         0       1       0       0       0       0       0
 24182 ;;      Temps:          0       0       0       0       0       0       0
 24183 ;;      Totals:         0       1       0       0       0       0       0
 24184 ;;Total ram usage:        1 bytes
 24185 ;; Hardware stack levels used:    1
 24186 ;; Hardware stack levels required when called:    8
 24187 ;; This function calls:
 24188 ;;		i1_saveSysParams
 24189 ;; This function is called by:
 24190 ;;		i1_pressENTER
 24191 ;;		i1_longPressENTER
 24192 ;; This function uses a non-reentrant model
 24193 ;;
 24194                           
 24195                           	psect	text100
 24196  0048BA                     __ptext100:
 24197                           	opt stack 0
 24198  0048BA                     i1_confirmEdition:
 24199                           	opt stack 9
 24200                           
 24201                           ;incstack = 0
 24202                           ;i1confirmEdition@yes stored from wreg
 24203  0048BA  0100               	movlb	0	; () banked
 24204  0048BC  6F81               	movwf	i1confirmEdition@yes& (0+255),b
 24205                           
 24206                           ;DisplayProtocol.h: 73: switch (menuSection) {
 24207  0048BE  D066               	goto	i1l10807
 24208  0048C0                     i1l10765:
 24209                           
 24210                           ;DisplayProtocol.h: 77: if(yes) {
 24211  0048C0  0100               	movlb	0	; () banked
 24212  0048C2  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 24213  0048C4  0100               	movlb	0	; () banked
 24214  0048C6  B4D8               	btfsc	status,2,c
 24215  0048C8  D00C               	goto	i1l549
 24216                           
 24217                           ; BSR set to: 0
 24218                           ;DisplayProtocol.h: 78: kgXcorte = chanValf;
 24219  0048CA  C1AE  F0AC         	movff	_chanValf,_kgXcorte
 24220  0048CE  C1AF  F0AD         	movff	_chanValf+1,_kgXcorte+1
 24221  0048D2  C1B0  F0AE         	movff	_chanValf+2,_kgXcorte+2
 24222                           
 24223                           ; BSR set to: 0
 24224                           ;DisplayProtocol.h: 79: actualScreen = 4;
 24225  0048D6  0E04               	movlw	4
 24226  0048D8  0101               	movlb	1	; () banked
 24227  0048DA  6FBA               	movwf	_actualScreen& (0+255),b
 24228                           
 24229                           ; BSR set to: 1
 24230                           ;DisplayProtocol.h: 80: saveSysParams();
 24231  0048DC  EC3F  F029         	call	i1_saveSysParams	;wreg free
 24232                           
 24233                           ;DisplayProtocol.h: 81: }else {
 24234  0048E0  0012               	return	
 24235  0048E2                     i1l549:
 24236                           
 24237                           ; BSR set to: 0
 24238                           ;DisplayProtocol.h: 82: tempLastScreen = actualScreen;
 24239  0048E2  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 24240                           
 24241                           ; BSR set to: 0
 24242                           ;DisplayProtocol.h: 83: selSN = 1;
 24243  0048E6  0E01               	movlw	1
 24244  0048E8  0101               	movlb	1	; () banked
 24245  0048EA  6FC3               	movwf	_selSN& (0+255),b
 24246                           
 24247                           ;DisplayProtocol.h: 84: actualScreen = 10;
 24248  0048EC  0E0A               	movlw	10
 24249  0048EE  0101               	movlb	1	; () banked
 24250  0048F0  6FBA               	movwf	_actualScreen& (0+255),b
 24251                           
 24252                           ; BSR set to: 1
 24253                           ;DisplayProtocol.h: 85: }
 24254                           ;DisplayProtocol.h: 86: break;
 24255  0048F2  0012               	return	
 24256  0048F4                     i1l10775:
 24257                           
 24258                           ; BSR set to: 1
 24259                           ;DisplayProtocol.h: 88: if(yes) {
 24260  0048F4  0100               	movlb	0	; () banked
 24261  0048F6  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 24262  0048F8  0100               	movlb	0	; () banked
 24263  0048FA  B4D8               	btfsc	status,2,c
 24264  0048FC  D00A               	goto	i1l552
 24265                           
 24266                           ; BSR set to: 0
 24267                           ;DisplayProtocol.h: 89: numCortes = chanVals;
 24268  0048FE  C1B1  F0B8         	movff	_chanVals,_numCortes
 24269  004902  C1B2  F0B9         	movff	_chanVals+1,_numCortes+1
 24270                           
 24271                           ; BSR set to: 0
 24272                           ;DisplayProtocol.h: 90: actualScreen = 4;
 24273  004906  0E04               	movlw	4
 24274  004908  0101               	movlb	1	; () banked
 24275  00490A  6FBA               	movwf	_actualScreen& (0+255),b
 24276                           
 24277                           ; BSR set to: 1
 24278                           ;DisplayProtocol.h: 91: saveSysParams();
 24279  00490C  EC3F  F029         	call	i1_saveSysParams	;wreg free
 24280                           
 24281                           ;DisplayProtocol.h: 92: }else {
 24282  004910  0012               	return	
 24283  004912                     i1l552:
 24284                           
 24285                           ; BSR set to: 0
 24286                           ;DisplayProtocol.h: 93: tempLastScreen = actualScreen;
 24287  004912  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 24288                           
 24289                           ; BSR set to: 0
 24290                           ;DisplayProtocol.h: 94: selSN = 1;
 24291  004916  0E01               	movlw	1
 24292  004918  0101               	movlb	1	; () banked
 24293  00491A  6FC3               	movwf	_selSN& (0+255),b
 24294                           
 24295                           ;DisplayProtocol.h: 95: actualScreen = 10;
 24296  00491C  0E0A               	movlw	10
 24297  00491E  0101               	movlb	1	; () banked
 24298  004920  6FBA               	movwf	_actualScreen& (0+255),b
 24299                           
 24300                           ; BSR set to: 1
 24301                           ;DisplayProtocol.h: 96: }
 24302                           ;DisplayProtocol.h: 97: break;
 24303  004922  0012               	return	
 24304  004924                     i1l10785:
 24305                           
 24306                           ; BSR set to: 1
 24307                           ;DisplayProtocol.h: 99: if(yes) {
 24308  004924  0100               	movlb	0	; () banked
 24309  004926  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 24310  004928  0100               	movlb	0	; () banked
 24311  00492A  B4D8               	btfsc	status,2,c
 24312  00492C  D00C               	goto	i1l555
 24313                           
 24314                           ; BSR set to: 0
 24315                           ;DisplayProtocol.h: 100: diamTubo = chanValf;
 24316  00492E  C1AE  F0A9         	movff	_chanValf,_diamTubo
 24317  004932  C1AF  F0AA         	movff	_chanValf+1,_diamTubo+1
 24318  004936  C1B0  F0AB         	movff	_chanValf+2,_diamTubo+2
 24319                           
 24320                           ; BSR set to: 0
 24321                           ;DisplayProtocol.h: 101: actualScreen = 4;
 24322  00493A  0E04               	movlw	4
 24323  00493C  0101               	movlb	1	; () banked
 24324  00493E  6FBA               	movwf	_actualScreen& (0+255),b
 24325                           
 24326                           ; BSR set to: 1
 24327                           ;DisplayProtocol.h: 102: saveSysParams();
 24328  004940  EC3F  F029         	call	i1_saveSysParams	;wreg free
 24329                           
 24330                           ;DisplayProtocol.h: 103: }else {
 24331  004944  0012               	return	
 24332  004946                     i1l555:
 24333                           
 24334                           ; BSR set to: 0
 24335                           ;DisplayProtocol.h: 104: tempLastScreen = actualScreen;
 24336  004946  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 24337                           
 24338                           ; BSR set to: 0
 24339                           ;DisplayProtocol.h: 105: selSN = 1;
 24340  00494A  0E01               	movlw	1
 24341  00494C  0101               	movlb	1	; () banked
 24342  00494E  6FC3               	movwf	_selSN& (0+255),b
 24343                           
 24344                           ;DisplayProtocol.h: 106: actualScreen = 10;
 24345  004950  0E0A               	movlw	10
 24346  004952  0101               	movlb	1	; () banked
 24347  004954  6FBA               	movwf	_actualScreen& (0+255),b
 24348                           
 24349                           ; BSR set to: 1
 24350                           ;DisplayProtocol.h: 107: }
 24351                           ;DisplayProtocol.h: 108: break;
 24352  004956  0012               	return	
 24353  004958                     i1l10795:
 24354                           
 24355                           ; BSR set to: 1
 24356                           ;DisplayProtocol.h: 110: if(yes) {
 24357  004958  0100               	movlb	0	; () banked
 24358  00495A  5181               	movf	i1confirmEdition@yes& (0+255),w,b
 24359  00495C  0100               	movlb	0	; () banked
 24360  00495E  B4D8               	btfsc	status,2,c
 24361  004960  D00C               	goto	i1l558
 24362                           
 24363                           ; BSR set to: 0
 24364                           ;DisplayProtocol.h: 111: velocidadMasa = chanValf;
 24365  004962  C1AE  F0B5         	movff	_chanValf,_velocidadMasa
 24366  004966  C1AF  F0B6         	movff	_chanValf+1,_velocidadMasa+1
 24367  00496A  C1B0  F0B7         	movff	_chanValf+2,_velocidadMasa+2
 24368                           
 24369                           ; BSR set to: 0
 24370                           ;DisplayProtocol.h: 112: actualScreen = 4;
 24371  00496E  0E04               	movlw	4
 24372  004970  0101               	movlb	1	; () banked
 24373  004972  6FBA               	movwf	_actualScreen& (0+255),b
 24374                           
 24375                           ; BSR set to: 1
 24376                           ;DisplayProtocol.h: 113: saveSysParams();
 24377  004974  EC3F  F029         	call	i1_saveSysParams	;wreg free
 24378                           
 24379                           ;DisplayProtocol.h: 114: }else {
 24380  004978  0012               	return	
 24381  00497A                     i1l558:
 24382                           
 24383                           ; BSR set to: 0
 24384                           ;DisplayProtocol.h: 115: tempLastScreen = actualScreen;
 24385  00497A  C1BA  F0CB         	movff	_actualScreen,_tempLastScreen
 24386                           
 24387                           ; BSR set to: 0
 24388                           ;DisplayProtocol.h: 116: selSN = 1;
 24389  00497E  0E01               	movlw	1
 24390  004980  0101               	movlb	1	; () banked
 24391  004982  6FC3               	movwf	_selSN& (0+255),b
 24392                           
 24393                           ;DisplayProtocol.h: 117: actualScreen = 10;
 24394  004984  0E0A               	movlw	10
 24395  004986  0101               	movlb	1	; () banked
 24396  004988  6FBA               	movwf	_actualScreen& (0+255),b
 24397                           
 24398                           ; BSR set to: 1
 24399                           ;DisplayProtocol.h: 120: }
 24400                           ;DisplayProtocol.h: 121: }
 24401                           
 24402                           ; BSR set to: 1
 24403                           ;DisplayProtocol.h: 118: }
 24404                           ;DisplayProtocol.h: 119: break;
 24405  00498A  0012               	return	
 24406  00498C                     i1l10807:
 24407  00498C  0101               	movlb	1	; () banked
 24408  00498E  51C1               	movf	_menuSection& (0+255),w,b
 24409                           
 24410                           ; Switch size 1, requested type "space"
 24411                           ; Number of cases is 5, Range of values is 0 to 4
 24412                           ; switch strategies available:
 24413                           ; Name         Instructions Cycles
 24414                           ; simple_byte           16     9 (average)
 24415                           ;	Chosen strategy is simple_byte
 24416  004990  0A00               	xorlw	0	; case 0
 24417  004992  B4D8               	btfsc	status,2,c
 24418  004994  0012               	return	
 24419  004996  0A01               	xorlw	1	; case 1
 24420  004998  B4D8               	btfsc	status,2,c
 24421  00499A  D792               	goto	i1l10765
 24422  00499C  0A03               	xorlw	3	; case 2
 24423  00499E  B4D8               	btfsc	status,2,c
 24424  0049A0  D7A9               	goto	i1l10775
 24425  0049A2  0A01               	xorlw	1	; case 3
 24426  0049A4  B4D8               	btfsc	status,2,c
 24427  0049A6  D7BE               	goto	i1l10785
 24428  0049A8  0A07               	xorlw	7	; case 4
 24429  0049AA  A4D8               	btfss	status,2,c
 24430  0049AC  0012               	return	
 24431  0049AE  D7D4               	goto	i1l10795
 24432  0049B0                     __end_ofi1_confirmEdition:
 24433                           	opt stack 0
 24434                           pclatu	equ	0xFFB
 24435                           pclath	equ	0xFFA
 24436                           tblptru	equ	0xFF8
 24437                           tblptrh	equ	0xFF7
 24438                           tblptrl	equ	0xFF6
 24439                           tablat	equ	0xFF5
 24440                           prodh	equ	0xFF4
 24441                           prodl	equ	0xFF3
 24442                           intcon	equ	0xFF2
 24443                           postinc0	equ	0xFEE
 24444                           fsr0h	equ	0xFEA
 24445                           fsr0l	equ	0xFE9
 24446                           wreg	equ	0xFE8
 24447                           postdec1	equ	0xFE5
 24448                           fsr1h	equ	0xFE2
 24449                           fsr1l	equ	0xFE1
 24450                           bsr	equ	0xFE0
 24451                           indf2	equ	0xFDF
 24452                           postinc2	equ	0xFDE
 24453                           postdec2	equ	0xFDD
 24454                           plusw2	equ	0xFDB
 24455                           fsr2h	equ	0xFDA
 24456                           fsr2l	equ	0xFD9
 24457                           status	equ	0xFD8
 24458                           
 24459 ;; *************** function i1___ftadd *****************
 24460 ;; Defined at:
 24461 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftadd.c"
 24462 ;; Parameters:    Size  Location     Type
 24463 ;;  f1              3    8[BANK0 ] float 
 24464 ;;  f2              3   11[BANK0 ] float 
 24465 ;; Auto vars:     Size  Location     Type
 24466 ;;  __ftadd         1   19[BANK0 ] unsigned char 
 24467 ;;  __ftadd         1   18[BANK0 ] unsigned char 
 24468 ;;  __ftadd         1   17[BANK0 ] unsigned char 
 24469 ;; Return value:  Size  Location     Type
 24470 ;;                  3    8[BANK0 ] float 
 24471 ;; Registers used:
 24472 ;;		wreg, status,2, status,0, cstack
 24473 ;; Tracked objects:
 24474 ;;		On entry : 0/0
 24475 ;;		On exit  : 0/0
 24476 ;;		Unchanged: 0/0
 24477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24478 ;;      Params:         0       6       0       0       0       0       0
 24479 ;;      Locals:         0       3       0       0       0       0       0
 24480 ;;      Temps:          0       3       0       0       0       0       0
 24481 ;;      Totals:         0      12       0       0       0       0       0
 24482 ;;Total ram usage:       12 bytes
 24483 ;; Hardware stack levels used:    1
 24484 ;; Hardware stack levels required when called:    5
 24485 ;; This function calls:
 24486 ;;		i1___ftpack
 24487 ;; This function is called by:
 24488 ;;		i1_longPressENTER
 24489 ;; This function uses a non-reentrant model
 24490 ;;
 24491                           
 24492                           	psect	text101
 24493  002780                     __ptext101:
 24494                           	opt stack 0
 24495  002780                     i1___ftadd:
 24496                           	opt stack 12
 24497                           
 24498                           ;incstack = 0
 24499  002780  C06A  F06E         	movff	i1___ftadd@f1+2,??i1___ftadd
 24500  002784  0100               	movlb	0	; () banked
 24501  002786  6B6F               	clrf	(??i1___ftadd+1)& (0+255),b
 24502  002788  6B70               	clrf	(??i1___ftadd+2)& (0+255),b
 24503  00278A  0100               	movlb	0	; () banked
 24504  00278C  3569               	rlcf	(i1___ftadd@f1+1)& (0+255),w,b
 24505  00278E  0100               	movlb	0	; () banked
 24506  002790  376E               	rlcf	??i1___ftadd& (0+255),f,b
 24507  002792  E301               	bnc	u1539_21
 24508  002794  816F               	bsf	(??i1___ftadd+1)& (0+255),0,b
 24509  002796                     u1539_21:
 24510  002796  0100               	movlb	0	; () banked
 24511  002798  516E               	movf	??i1___ftadd& (0+255),w,b
 24512  00279A  0100               	movlb	0	; () banked
 24513  00279C  6F73               	movwf	i1___ftadd@exp1& (0+255),b
 24514  00279E  C06D  F06E         	movff	i1___ftadd@f2+2,??i1___ftadd
 24515  0027A2  0100               	movlb	0	; () banked
 24516  0027A4  6B6F               	clrf	(??i1___ftadd+1)& (0+255),b
 24517  0027A6  6B70               	clrf	(??i1___ftadd+2)& (0+255),b
 24518  0027A8  0100               	movlb	0	; () banked
 24519  0027AA  356C               	rlcf	(i1___ftadd@f2+1)& (0+255),w,b
 24520  0027AC  0100               	movlb	0	; () banked
 24521  0027AE  376E               	rlcf	??i1___ftadd& (0+255),f,b
 24522  0027B0  E301               	bnc	u1540_21
 24523  0027B2  816F               	bsf	(??i1___ftadd+1)& (0+255),0,b
 24524  0027B4                     u1540_21:
 24525  0027B4  0100               	movlb	0	; () banked
 24526  0027B6  516E               	movf	??i1___ftadd& (0+255),w,b
 24527  0027B8  0100               	movlb	0	; () banked
 24528  0027BA  6F72               	movwf	i1___ftadd@exp2& (0+255),b
 24529                           
 24530                           ; BSR set to: 0
 24531  0027BC  0100               	movlb	0	; () banked
 24532  0027BE  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24533  0027C0  0100               	movlb	0	; () banked
 24534  0027C2  B4D8               	btfsc	status,2,c
 24535  0027C4  D011               	goto	i1l1287
 24536                           
 24537                           ; BSR set to: 0
 24538  0027C6  0100               	movlb	0	; () banked
 24539  0027C8  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24540  0027CA  0100               	movlb	0	; () banked
 24541  0027CC  5D73               	subwf	i1___ftadd@exp1& (0+255),w,b
 24542  0027CE  B0D8               	btfsc	status,0,c
 24543  0027D0  D012               	goto	i1l10817
 24544                           
 24545                           ; BSR set to: 0
 24546  0027D2  0100               	movlb	0	; () banked
 24547  0027D4  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24548  0027D6  0800               	sublw	0
 24549  0027D8  0100               	movlb	0	; () banked
 24550  0027DA  2572               	addwf	i1___ftadd@exp2& (0+255),w,b
 24551  0027DC  0100               	movlb	0	; () banked
 24552  0027DE  6F6E               	movwf	??i1___ftadd& (0+255),b
 24553  0027E0  0E18               	movlw	24
 24554  0027E2  0100               	movlb	0	; () banked
 24555  0027E4  656E               	cpfsgt	??i1___ftadd& (0+255),b
 24556  0027E6  D007               	goto	i1l10817
 24557  0027E8                     i1l1287:
 24558                           
 24559                           ; BSR set to: 0
 24560  0027E8  C06B  F068         	movff	i1___ftadd@f2,?i1___ftadd
 24561  0027EC  C06C  F069         	movff	i1___ftadd@f2+1,?i1___ftadd+1
 24562  0027F0  C06D  F06A         	movff	i1___ftadd@f2+2,?i1___ftadd+2
 24563  0027F4  0012               	return	
 24564  0027F6                     i1l10817:
 24565                           
 24566                           ; BSR set to: 0
 24567  0027F6  0100               	movlb	0	; () banked
 24568  0027F8  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24569  0027FA  0100               	movlb	0	; () banked
 24570  0027FC  B4D8               	btfsc	status,2,c
 24571  0027FE  D011               	goto	i1l1291
 24572                           
 24573                           ; BSR set to: 0
 24574  002800  0100               	movlb	0	; () banked
 24575  002802  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24576  002804  0100               	movlb	0	; () banked
 24577  002806  5D72               	subwf	i1___ftadd@exp2& (0+255),w,b
 24578  002808  B0D8               	btfsc	status,0,c
 24579  00280A  D012               	goto	i1l10823
 24580                           
 24581                           ; BSR set to: 0
 24582  00280C  0100               	movlb	0	; () banked
 24583  00280E  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24584  002810  0800               	sublw	0
 24585  002812  0100               	movlb	0	; () banked
 24586  002814  2573               	addwf	i1___ftadd@exp1& (0+255),w,b
 24587  002816  0100               	movlb	0	; () banked
 24588  002818  6F6E               	movwf	??i1___ftadd& (0+255),b
 24589  00281A  0E18               	movlw	24
 24590  00281C  0100               	movlb	0	; () banked
 24591  00281E  656E               	cpfsgt	??i1___ftadd& (0+255),b
 24592  002820  D007               	goto	i1l10823
 24593  002822                     i1l1291:
 24594                           
 24595                           ; BSR set to: 0
 24596  002822  C068  F068         	movff	i1___ftadd@f1,?i1___ftadd
 24597  002826  C069  F069         	movff	i1___ftadd@f1+1,?i1___ftadd+1
 24598  00282A  C06A  F06A         	movff	i1___ftadd@f1+2,?i1___ftadd+2
 24599  00282E  0012               	return	
 24600  002830                     i1l10823:
 24601                           
 24602                           ; BSR set to: 0
 24603  002830  0E06               	movlw	6
 24604  002832  0100               	movlb	0	; () banked
 24605  002834  6F71               	movwf	i1___ftadd@sign& (0+255),b
 24606                           
 24607                           ; BSR set to: 0
 24608  002836  0100               	movlb	0	; () banked
 24609  002838  AF6A               	btfss	(i1___ftadd@f1+2)& (0+255),7,b
 24610  00283A  D002               	goto	i1l10829
 24611                           
 24612                           ; BSR set to: 0
 24613  00283C  0100               	movlb	0	; () banked
 24614  00283E  8F71               	bsf	i1___ftadd@sign& (0+255),7,b
 24615  002840                     i1l10829:
 24616                           
 24617                           ; BSR set to: 0
 24618  002840  0100               	movlb	0	; () banked
 24619  002842  AF6D               	btfss	(i1___ftadd@f2+2)& (0+255),7,b
 24620  002844  D002               	goto	i1l1293
 24621                           
 24622                           ; BSR set to: 0
 24623  002846  0100               	movlb	0	; () banked
 24624  002848  8D71               	bsf	i1___ftadd@sign& (0+255),6,b
 24625  00284A                     i1l1293:
 24626                           
 24627                           ; BSR set to: 0
 24628  00284A  0100               	movlb	0	; () banked
 24629  00284C  8F69               	bsf	(i1___ftadd@f1+1)& (0+255),7,b
 24630                           
 24631                           ; BSR set to: 0
 24632  00284E  0EFF               	movlw	255
 24633  002850  0100               	movlb	0	; () banked
 24634  002852  1768               	andwf	i1___ftadd@f1& (0+255),f,b
 24635  002854  0EFF               	movlw	255
 24636  002856  0100               	movlb	0	; () banked
 24637  002858  1769               	andwf	(i1___ftadd@f1+1)& (0+255),f,b
 24638  00285A  0E00               	movlw	0
 24639  00285C  0100               	movlb	0	; () banked
 24640  00285E  176A               	andwf	(i1___ftadd@f1+2)& (0+255),f,b
 24641  002860  0100               	movlb	0	; () banked
 24642  002862  8F6C               	bsf	(i1___ftadd@f2+1)& (0+255),7,b
 24643                           
 24644                           ; BSR set to: 0
 24645  002864  0EFF               	movlw	255
 24646  002866  0100               	movlb	0	; () banked
 24647  002868  176B               	andwf	i1___ftadd@f2& (0+255),f,b
 24648  00286A  0EFF               	movlw	255
 24649  00286C  0100               	movlb	0	; () banked
 24650  00286E  176C               	andwf	(i1___ftadd@f2+1)& (0+255),f,b
 24651  002870  0E00               	movlw	0
 24652  002872  0100               	movlb	0	; () banked
 24653  002874  176D               	andwf	(i1___ftadd@f2+2)& (0+255),f,b
 24654                           
 24655                           ; BSR set to: 0
 24656  002876  0100               	movlb	0	; () banked
 24657  002878  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24658  00287A  0100               	movlb	0	; () banked
 24659  00287C  5D73               	subwf	i1___ftadd@exp1& (0+255),w,b
 24660  00287E  B0D8               	btfsc	status,0,c
 24661  002880  D025               	goto	i1l10849
 24662  002882                     i1l10839:
 24663                           
 24664                           ; BSR set to: 0
 24665  002882  0100               	movlb	0	; () banked
 24666  002884  90D8               	bcf	status,0,c
 24667  002886  376B               	rlcf	i1___ftadd@f2& (0+255),f,b
 24668  002888  376C               	rlcf	(i1___ftadd@f2+1)& (0+255),f,b
 24669  00288A  376D               	rlcf	(i1___ftadd@f2+2)& (0+255),f,b
 24670  00288C  0100               	movlb	0	; () banked
 24671  00288E  0772               	decf	i1___ftadd@exp2& (0+255),f,b
 24672                           
 24673                           ; BSR set to: 0
 24674  002890  0100               	movlb	0	; () banked
 24675  002892  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24676  002894  0100               	movlb	0	; () banked
 24677  002896  1972               	xorwf	i1___ftadd@exp2& (0+255),w,b
 24678  002898  B4D8               	btfsc	status,2,c
 24679  00289A  D011               	goto	i1l10847
 24680                           
 24681                           ; BSR set to: 0
 24682  00289C  0100               	movlb	0	; () banked
 24683  00289E  0771               	decf	i1___ftadd@sign& (0+255),f,b
 24684  0028A0  C071  F06E         	movff	i1___ftadd@sign,??i1___ftadd
 24685  0028A4  0E07               	movlw	7
 24686  0028A6  0100               	movlb	0	; () banked
 24687  0028A8  176E               	andwf	??i1___ftadd& (0+255),f,b
 24688  0028AA  B4D8               	btfsc	status,2,c
 24689  0028AC  D008               	goto	i1l10847
 24690  0028AE  D7E9               	goto	i1l10839
 24691  0028B0                     i1l10845:
 24692                           
 24693                           ; BSR set to: 0
 24694  0028B0  0100               	movlb	0	; () banked
 24695  0028B2  90D8               	bcf	status,0,c
 24696  0028B4  336A               	rrcf	(i1___ftadd@f1+2)& (0+255),f,b
 24697  0028B6  3369               	rrcf	(i1___ftadd@f1+1)& (0+255),f,b
 24698  0028B8  3368               	rrcf	i1___ftadd@f1& (0+255),f,b
 24699  0028BA  0100               	movlb	0	; () banked
 24700  0028BC  2B73               	incf	i1___ftadd@exp1& (0+255),f,b
 24701  0028BE                     i1l10847:
 24702                           
 24703                           ; BSR set to: 0
 24704  0028BE  0100               	movlb	0	; () banked
 24705  0028C0  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24706  0028C2  0100               	movlb	0	; () banked
 24707  0028C4  1973               	xorwf	i1___ftadd@exp1& (0+255),w,b
 24708  0028C6  B4D8               	btfsc	status,2,c
 24709  0028C8  D02B               	goto	i1l1302
 24710  0028CA  D7F2               	goto	i1l10845
 24711  0028CC                     i1l10849:
 24712                           
 24713                           ; BSR set to: 0
 24714  0028CC  0100               	movlb	0	; () banked
 24715  0028CE  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24716  0028D0  0100               	movlb	0	; () banked
 24717  0028D2  5D72               	subwf	i1___ftadd@exp2& (0+255),w,b
 24718  0028D4  B0D8               	btfsc	status,0,c
 24719  0028D6  D024               	goto	i1l1302
 24720  0028D8                     i1l10851:
 24721                           
 24722                           ; BSR set to: 0
 24723  0028D8  0100               	movlb	0	; () banked
 24724  0028DA  90D8               	bcf	status,0,c
 24725  0028DC  3768               	rlcf	i1___ftadd@f1& (0+255),f,b
 24726  0028DE  3769               	rlcf	(i1___ftadd@f1+1)& (0+255),f,b
 24727  0028E0  376A               	rlcf	(i1___ftadd@f1+2)& (0+255),f,b
 24728  0028E2  0100               	movlb	0	; () banked
 24729  0028E4  0773               	decf	i1___ftadd@exp1& (0+255),f,b
 24730                           
 24731                           ; BSR set to: 0
 24732  0028E6  0100               	movlb	0	; () banked
 24733  0028E8  5173               	movf	i1___ftadd@exp1& (0+255),w,b
 24734  0028EA  0100               	movlb	0	; () banked
 24735  0028EC  1972               	xorwf	i1___ftadd@exp2& (0+255),w,b
 24736  0028EE  B4D8               	btfsc	status,2,c
 24737  0028F0  D011               	goto	i1l10859
 24738                           
 24739                           ; BSR set to: 0
 24740  0028F2  0100               	movlb	0	; () banked
 24741  0028F4  0771               	decf	i1___ftadd@sign& (0+255),f,b
 24742  0028F6  C071  F06E         	movff	i1___ftadd@sign,??i1___ftadd
 24743  0028FA  0E07               	movlw	7
 24744  0028FC  0100               	movlb	0	; () banked
 24745  0028FE  176E               	andwf	??i1___ftadd& (0+255),f,b
 24746  002900  B4D8               	btfsc	status,2,c
 24747  002902  D008               	goto	i1l10859
 24748  002904  D7E9               	goto	i1l10851
 24749  002906                     i1l10857:
 24750                           
 24751                           ; BSR set to: 0
 24752  002906  0100               	movlb	0	; () banked
 24753  002908  90D8               	bcf	status,0,c
 24754  00290A  336D               	rrcf	(i1___ftadd@f2+2)& (0+255),f,b
 24755  00290C  336C               	rrcf	(i1___ftadd@f2+1)& (0+255),f,b
 24756  00290E  336B               	rrcf	i1___ftadd@f2& (0+255),f,b
 24757  002910  0100               	movlb	0	; () banked
 24758  002912  2B72               	incf	i1___ftadd@exp2& (0+255),f,b
 24759  002914                     i1l10859:
 24760                           
 24761                           ; BSR set to: 0
 24762  002914  0100               	movlb	0	; () banked
 24763  002916  5172               	movf	i1___ftadd@exp2& (0+255),w,b
 24764  002918  0100               	movlb	0	; () banked
 24765  00291A  1973               	xorwf	i1___ftadd@exp1& (0+255),w,b
 24766  00291C  A4D8               	btfss	status,2,c
 24767  00291E  D7F3               	goto	i1l10857
 24768  002920                     i1l1302:
 24769                           
 24770                           ; BSR set to: 0
 24771  002920  0100               	movlb	0	; () banked
 24772  002922  AF71               	btfss	i1___ftadd@sign& (0+255),7,b
 24773  002924  D012               	goto	i1l1311
 24774                           
 24775                           ; BSR set to: 0
 24776  002926  0EFF               	movlw	255
 24777  002928  0100               	movlb	0	; () banked
 24778  00292A  1B68               	xorwf	i1___ftadd@f1& (0+255),f,b
 24779  00292C  0EFF               	movlw	255
 24780  00292E  0100               	movlb	0	; () banked
 24781  002930  1B69               	xorwf	(i1___ftadd@f1+1)& (0+255),f,b
 24782  002932  0EFF               	movlw	255
 24783  002934  0100               	movlb	0	; () banked
 24784  002936  1B6A               	xorwf	(i1___ftadd@f1+2)& (0+255),f,b
 24785  002938  0E01               	movlw	1
 24786  00293A  0100               	movlb	0	; () banked
 24787  00293C  2768               	addwf	i1___ftadd@f1& (0+255),f,b
 24788  00293E  0E00               	movlw	0
 24789  002940  0100               	movlb	0	; () banked
 24790  002942  2369               	addwfc	(i1___ftadd@f1+1)& (0+255),f,b
 24791  002944  0E00               	movlw	0
 24792  002946  0100               	movlb	0	; () banked
 24793  002948  236A               	addwfc	(i1___ftadd@f1+2)& (0+255),f,b
 24794  00294A                     i1l1311:
 24795                           
 24796                           ; BSR set to: 0
 24797  00294A  0100               	movlb	0	; () banked
 24798  00294C  AD71               	btfss	i1___ftadd@sign& (0+255),6,b
 24799  00294E  D012               	goto	i1l10865
 24800                           
 24801                           ; BSR set to: 0
 24802  002950  0EFF               	movlw	255
 24803  002952  0100               	movlb	0	; () banked
 24804  002954  1B6B               	xorwf	i1___ftadd@f2& (0+255),f,b
 24805  002956  0EFF               	movlw	255
 24806  002958  0100               	movlb	0	; () banked
 24807  00295A  1B6C               	xorwf	(i1___ftadd@f2+1)& (0+255),f,b
 24808  00295C  0EFF               	movlw	255
 24809  00295E  0100               	movlb	0	; () banked
 24810  002960  1B6D               	xorwf	(i1___ftadd@f2+2)& (0+255),f,b
 24811  002962  0E01               	movlw	1
 24812  002964  0100               	movlb	0	; () banked
 24813  002966  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 24814  002968  0E00               	movlw	0
 24815  00296A  0100               	movlb	0	; () banked
 24816  00296C  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 24817  00296E  0E00               	movlw	0
 24818  002970  0100               	movlb	0	; () banked
 24819  002972  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 24820  002974                     i1l10865:
 24821                           
 24822                           ; BSR set to: 0
 24823  002974  0E00               	movlw	0
 24824  002976  0100               	movlb	0	; () banked
 24825  002978  6F71               	movwf	i1___ftadd@sign& (0+255),b
 24826                           
 24827                           ; BSR set to: 0
 24828  00297A  0100               	movlb	0	; () banked
 24829  00297C  5168               	movf	i1___ftadd@f1& (0+255),w,b
 24830  00297E  0100               	movlb	0	; () banked
 24831  002980  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 24832  002982  0100               	movlb	0	; () banked
 24833  002984  5169               	movf	(i1___ftadd@f1+1)& (0+255),w,b
 24834  002986  0100               	movlb	0	; () banked
 24835  002988  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 24836  00298A  0100               	movlb	0	; () banked
 24837  00298C  516A               	movf	(i1___ftadd@f1+2)& (0+255),w,b
 24838  00298E  0100               	movlb	0	; () banked
 24839  002990  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 24840                           
 24841                           ; BSR set to: 0
 24842  002992  0100               	movlb	0	; () banked
 24843  002994  AF6D               	btfss	(i1___ftadd@f2+2)& (0+255),7,b
 24844  002996  D015               	goto	i1l10875
 24845                           
 24846                           ; BSR set to: 0
 24847  002998  0EFF               	movlw	255
 24848  00299A  0100               	movlb	0	; () banked
 24849  00299C  1B6B               	xorwf	i1___ftadd@f2& (0+255),f,b
 24850  00299E  0EFF               	movlw	255
 24851  0029A0  0100               	movlb	0	; () banked
 24852  0029A2  1B6C               	xorwf	(i1___ftadd@f2+1)& (0+255),f,b
 24853  0029A4  0EFF               	movlw	255
 24854  0029A6  0100               	movlb	0	; () banked
 24855  0029A8  1B6D               	xorwf	(i1___ftadd@f2+2)& (0+255),f,b
 24856  0029AA  0E01               	movlw	1
 24857  0029AC  0100               	movlb	0	; () banked
 24858  0029AE  276B               	addwf	i1___ftadd@f2& (0+255),f,b
 24859  0029B0  0E00               	movlw	0
 24860  0029B2  0100               	movlb	0	; () banked
 24861  0029B4  236C               	addwfc	(i1___ftadd@f2+1)& (0+255),f,b
 24862  0029B6  0E00               	movlw	0
 24863  0029B8  0100               	movlb	0	; () banked
 24864  0029BA  236D               	addwfc	(i1___ftadd@f2+2)& (0+255),f,b
 24865                           
 24866                           ; BSR set to: 0
 24867  0029BC  0E01               	movlw	1
 24868  0029BE  0100               	movlb	0	; () banked
 24869  0029C0  6F71               	movwf	i1___ftadd@sign& (0+255),b
 24870  0029C2                     i1l10875:
 24871                           
 24872                           ; BSR set to: 0
 24873  0029C2  C06B  F060         	movff	i1___ftadd@f2,i1___ftpack@arg
 24874  0029C6  C06C  F061         	movff	i1___ftadd@f2+1,i1___ftpack@arg+1
 24875  0029CA  C06D  F062         	movff	i1___ftadd@f2+2,i1___ftpack@arg+2
 24876  0029CE  C073  F063         	movff	i1___ftadd@exp1,i1___ftpack@exp
 24877  0029D2  C071  F064         	movff	i1___ftadd@sign,i1___ftpack@sign
 24878  0029D6  EC52  F022         	call	i1___ftpack	;wreg free
 24879  0029DA  C060  F068         	movff	?i1___ftpack,?i1___ftadd
 24880  0029DE  C061  F069         	movff	?i1___ftpack+1,?i1___ftadd+1
 24881  0029E2  C062  F06A         	movff	?i1___ftpack+2,?i1___ftadd+2
 24882  0029E6  0012               	return	
 24883  0029E8                     __end_ofi1___ftadd:
 24884                           	opt stack 0
 24885                           pclatu	equ	0xFFB
 24886                           pclath	equ	0xFFA
 24887                           tblptru	equ	0xFF8
 24888                           tblptrh	equ	0xFF7
 24889                           tblptrl	equ	0xFF6
 24890                           tablat	equ	0xFF5
 24891                           prodh	equ	0xFF4
 24892                           prodl	equ	0xFF3
 24893                           intcon	equ	0xFF2
 24894                           postinc0	equ	0xFEE
 24895                           fsr0h	equ	0xFEA
 24896                           fsr0l	equ	0xFE9
 24897                           wreg	equ	0xFE8
 24898                           postdec1	equ	0xFE5
 24899                           fsr1h	equ	0xFE2
 24900                           fsr1l	equ	0xFE1
 24901                           bsr	equ	0xFE0
 24902                           indf2	equ	0xFDF
 24903                           postinc2	equ	0xFDE
 24904                           postdec2	equ	0xFDD
 24905                           plusw2	equ	0xFDB
 24906                           fsr2h	equ	0xFDA
 24907                           fsr2l	equ	0xFD9
 24908                           status	equ	0xFD8
 24909                           
 24910 ;; *************** function i1_longPressDOWN *****************
 24911 ;; Defined at:
 24912 ;;		line 214 in file "source/DisplayProtocol.h"
 24913 ;; Parameters:    Size  Location     Type
 24914 ;;		None
 24915 ;; Auto vars:     Size  Location     Type
 24916 ;;		None
 24917 ;; Return value:  Size  Location     Type
 24918 ;;                  1    wreg      void 
 24919 ;; Registers used:
 24920 ;;		wreg, status,2, status,0
 24921 ;; Tracked objects:
 24922 ;;		On entry : 0/0
 24923 ;;		On exit  : 0/0
 24924 ;;		Unchanged: 0/0
 24925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24926 ;;      Params:         0       0       0       0       0       0       0
 24927 ;;      Locals:         0       0       0       0       0       0       0
 24928 ;;      Temps:          0       0       0       0       0       0       0
 24929 ;;      Totals:         0       0       0       0       0       0       0
 24930 ;;Total ram usage:        0 bytes
 24931 ;; Hardware stack levels used:    1
 24932 ;; Hardware stack levels required when called:    4
 24933 ;; This function calls:
 24934 ;;		Nothing
 24935 ;; This function is called by:
 24936 ;;		_UARTint
 24937 ;; This function uses a non-reentrant model
 24938 ;;
 24939                           
 24940                           	psect	text102
 24941  006AC0                     __ptext102:
 24942                           	opt stack 0
 24943  006AC0                     i1_longPressDOWN:
 24944                           	opt stack 14
 24945                           
 24946                           ;DisplayProtocol.h: 215: if (!DOWNisLP) {
 24947                           
 24948                           ;incstack = 0
 24949  006AC0  5037               	movf	_DOWNisLP,w,c
 24950  006AC2  A4D8               	btfss	status,2,c
 24951  006AC4  0012               	return	
 24952                           
 24953                           ;DisplayProtocol.h: 216: DOWNisLP = 1;
 24954  006AC6  0E01               	movlw	1
 24955  006AC8  6E37               	movwf	_DOWNisLP,c
 24956                           
 24957                           ;DisplayProtocol.h: 217: if(actualScreen == 5) {
 24958  006ACA  0E05               	movlw	5
 24959  006ACC  0101               	movlb	1	; () banked
 24960  006ACE  19BA               	xorwf	_actualScreen& (0+255),w,b
 24961  006AD0  A4D8               	btfss	status,2,c
 24962  006AD2  0012               	return	
 24963                           
 24964                           ; BSR set to: 1
 24965                           ;DisplayProtocol.h: 218: if(menuSection == 2)
 24966  006AD4  0E02               	movlw	2
 24967  006AD6  0101               	movlb	1	; () banked
 24968  006AD8  19C1               	xorwf	_menuSection& (0+255),w,b
 24969  006ADA  A4D8               	btfss	status,2,c
 24970  006ADC  0012               	return	
 24971                           
 24972                           ; BSR set to: 1
 24973                           ;DisplayProtocol.h: 219: chanVals -= 10;
 24974  006ADE  0101               	movlb	1	; () banked
 24975  006AE0  0EF6               	movlw	246
 24976  006AE2  27B1               	addwf	_chanVals& (0+255),f,b
 24977  006AE4  0EFF               	movlw	255
 24978  006AE6  23B2               	addwfc	(_chanVals+1)& (0+255),f,b
 24979                           
 24980                           ; BSR set to: 1
 24981                           
 24982                           ; BSR set to: 1
 24983  006AE8  0012               	return	
 24984  006AEA                     __end_ofi1_longPressDOWN:
 24985                           	opt stack 0
 24986                           pclatu	equ	0xFFB
 24987                           pclath	equ	0xFFA
 24988                           tblptru	equ	0xFF8
 24989                           tblptrh	equ	0xFF7
 24990                           tblptrl	equ	0xFF6
 24991                           tablat	equ	0xFF5
 24992                           prodh	equ	0xFF4
 24993                           prodl	equ	0xFF3
 24994                           intcon	equ	0xFF2
 24995                           postinc0	equ	0xFEE
 24996                           fsr0h	equ	0xFEA
 24997                           fsr0l	equ	0xFE9
 24998                           wreg	equ	0xFE8
 24999                           postdec1	equ	0xFE5
 25000                           fsr1h	equ	0xFE2
 25001                           fsr1l	equ	0xFE1
 25002                           bsr	equ	0xFE0
 25003                           indf2	equ	0xFDF
 25004                           postinc2	equ	0xFDE
 25005                           postdec2	equ	0xFDD
 25006                           plusw2	equ	0xFDB
 25007                           fsr2h	equ	0xFDA
 25008                           fsr2l	equ	0xFD9
 25009                           status	equ	0xFD8
 25010                           
 25011 ;; *************** function _putchUART *****************
 25012 ;; Defined at:
 25013 ;;		line 63 in file "source/IOConfig.h"
 25014 ;; Parameters:    Size  Location     Type
 25015 ;;  val             1    wreg     unsigned char 
 25016 ;; Auto vars:     Size  Location     Type
 25017 ;;  val             1    0[BANK0 ] unsigned char 
 25018 ;; Return value:  Size  Location     Type
 25019 ;;                  1    wreg      void 
 25020 ;; Registers used:
 25021 ;;		wreg
 25022 ;; Tracked objects:
 25023 ;;		On entry : 0/0
 25024 ;;		On exit  : 0/0
 25025 ;;		Unchanged: 0/0
 25026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25027 ;;      Params:         0       0       0       0       0       0       0
 25028 ;;      Locals:         0       1       0       0       0       0       0
 25029 ;;      Temps:          0       0       0       0       0       0       0
 25030 ;;      Totals:         0       1       0       0       0       0       0
 25031 ;;Total ram usage:        1 bytes
 25032 ;; Hardware stack levels used:    1
 25033 ;; Hardware stack levels required when called:    4
 25034 ;; This function calls:
 25035 ;;		Nothing
 25036 ;; This function is called by:
 25037 ;;		_UARTint
 25038 ;; This function uses a non-reentrant model
 25039 ;;
 25040                           
 25041                           	psect	text103
 25042  006C3E                     __ptext103:
 25043                           	opt stack 0
 25044  006C3E                     _putchUART:
 25045                           	opt stack 14
 25046                           
 25047                           ;incstack = 0
 25048                           ;putchUART@val stored from wreg
 25049  006C3E  0100               	movlb	0	; () banked
 25050  006C40  6F60               	movwf	putchUART@val& (0+255),b
 25051  006C42                     i1l225:
 25052  006C42  A2AC               	btfss	4012,1,c	;volatile
 25053  006C44  D7FE               	goto	i1l225
 25054                           
 25055                           ;IOConfig.h: 65: TXREG1 = val;
 25056  006C46  C060  FFAD         	movff	putchUART@val,4013	;volatile
 25057  006C4A  0012               	return		;funcret
 25058  006C4C                     __end_of_putchUART:
 25059                           	opt stack 0
 25060                           pclatu	equ	0xFFB
 25061                           pclath	equ	0xFFA
 25062                           tblptru	equ	0xFF8
 25063                           tblptrh	equ	0xFF7
 25064                           tblptrl	equ	0xFF6
 25065                           tablat	equ	0xFF5
 25066                           prodh	equ	0xFF4
 25067                           prodl	equ	0xFF3
 25068                           intcon	equ	0xFF2
 25069                           postinc0	equ	0xFEE
 25070                           fsr0h	equ	0xFEA
 25071                           fsr0l	equ	0xFE9
 25072                           wreg	equ	0xFE8
 25073                           postdec1	equ	0xFE5
 25074                           fsr1h	equ	0xFE2
 25075                           fsr1l	equ	0xFE1
 25076                           bsr	equ	0xFE0
 25077                           indf2	equ	0xFDF
 25078                           postinc2	equ	0xFDE
 25079                           postdec2	equ	0xFDD
 25080                           plusw2	equ	0xFDB
 25081                           fsr2h	equ	0xFDA
 25082                           fsr2l	equ	0xFD9
 25083                           status	equ	0xFD8
 25084                           
 25085 ;; *************** function _loadSysParams *****************
 25086 ;; Defined at:
 25087 ;;		line 144 in file "source/sysParams.h"
 25088 ;; Parameters:    Size  Location     Type
 25089 ;;		None
 25090 ;; Auto vars:     Size  Location     Type
 25091 ;;		None
 25092 ;; Return value:  Size  Location     Type
 25093 ;;                  1    wreg      void 
 25094 ;; Registers used:
 25095 ;;		wreg, status,2, status,0, cstack
 25096 ;; Tracked objects:
 25097 ;;		On entry : 0/0
 25098 ;;		On exit  : 0/0
 25099 ;;		Unchanged: 0/0
 25100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25101 ;;      Params:         0       0       0       0       0       0       0
 25102 ;;      Locals:         0       0       0       0       0       0       0
 25103 ;;      Temps:          0       0       0       0       0       0       0
 25104 ;;      Totals:         0       0       0       0       0       0       0
 25105 ;;Total ram usage:        0 bytes
 25106 ;; Hardware stack levels used:    1
 25107 ;; Hardware stack levels required when called:    8
 25108 ;; This function calls:
 25109 ;;		i1_calcSysVars
 25110 ;;		i1_saveSysParams
 25111 ;; This function is called by:
 25112 ;;		_UARTint
 25113 ;; This function uses a non-reentrant model
 25114 ;;
 25115                           
 25116                           	psect	text104
 25117  006780                     __ptext104:
 25118                           	opt stack 0
 25119  006780                     _loadSysParams:
 25120                           	opt stack 10
 25121                           
 25122                           ;sysParams.h: 145: tiXcorte = 10.0f;
 25123                           
 25124                           ;incstack = 0
 25125  006780  0E00               	movlw	0
 25126  006782  0100               	movlb	0	; () banked
 25127  006784  6FB2               	movwf	_tiXcorte& (0+255),b
 25128  006786  0E20               	movlw	32
 25129  006788  0100               	movlb	0	; () banked
 25130  00678A  6FB3               	movwf	(_tiXcorte+1)& (0+255),b
 25131  00678C  0E41               	movlw	65
 25132  00678E  0100               	movlb	0	; () banked
 25133  006790  6FB4               	movwf	(_tiXcorte+2)& (0+255),b
 25134                           
 25135                           ;sysParams.h: 146: numCortes = 5;
 25136  006792  0E00               	movlw	0
 25137  006794  0100               	movlb	0	; () banked
 25138  006796  6FB9               	movwf	(_numCortes+1)& (0+255),b
 25139  006798  0E05               	movlw	5
 25140  00679A  6FB8               	movwf	_numCortes& (0+255),b
 25141                           
 25142                           ;sysParams.h: 147: diamTubo = 20.000f;
 25143  00679C  0E00               	movlw	0
 25144  00679E  0100               	movlb	0	; () banked
 25145  0067A0  6FA9               	movwf	_diamTubo& (0+255),b
 25146  0067A2  0EA0               	movlw	160
 25147  0067A4  0100               	movlb	0	; () banked
 25148  0067A6  6FAA               	movwf	(_diamTubo+1)& (0+255),b
 25149  0067A8  0E41               	movlw	65
 25150  0067AA  0100               	movlb	0	; () banked
 25151  0067AC  6FAB               	movwf	(_diamTubo+2)& (0+255),b
 25152                           
 25153                           ;sysParams.h: 148: velocidadMasa = 0.2;
 25154  0067AE  0ECD               	movlw	205
 25155  0067B0  0100               	movlb	0	; () banked
 25156  0067B2  6FB5               	movwf	_velocidadMasa& (0+255),b
 25157  0067B4  0E4C               	movlw	76
 25158  0067B6  0100               	movlb	0	; () banked
 25159  0067B8  6FB6               	movwf	(_velocidadMasa+1)& (0+255),b
 25160  0067BA  0E3E               	movlw	62
 25161  0067BC  0100               	movlb	0	; () banked
 25162  0067BE  6FB7               	movwf	(_velocidadMasa+2)& (0+255),b
 25163                           
 25164                           ; BSR set to: 0
 25165                           ;sysParams.h: 149: calcSysVars();
 25166  0067C0  EC36  F032         	call	i1_calcSysVars	;wreg free
 25167                           
 25168                           ;sysParams.h: 150: saveSysParams();
 25169  0067C4  EC3F  F029         	call	i1_saveSysParams	;wreg free
 25170  0067C8  0012               	return		;funcret
 25171  0067CA                     __end_of_loadSysParams:
 25172                           	opt stack 0
 25173                           pclatu	equ	0xFFB
 25174                           pclath	equ	0xFFA
 25175                           tblptru	equ	0xFF8
 25176                           tblptrh	equ	0xFF7
 25177                           tblptrl	equ	0xFF6
 25178                           tablat	equ	0xFF5
 25179                           prodh	equ	0xFF4
 25180                           prodl	equ	0xFF3
 25181                           intcon	equ	0xFF2
 25182                           postinc0	equ	0xFEE
 25183                           fsr0h	equ	0xFEA
 25184                           fsr0l	equ	0xFE9
 25185                           wreg	equ	0xFE8
 25186                           postdec1	equ	0xFE5
 25187                           fsr1h	equ	0xFE2
 25188                           fsr1l	equ	0xFE1
 25189                           bsr	equ	0xFE0
 25190                           indf2	equ	0xFDF
 25191                           postinc2	equ	0xFDE
 25192                           postdec2	equ	0xFDD
 25193                           plusw2	equ	0xFDB
 25194                           fsr2h	equ	0xFDA
 25195                           fsr2l	equ	0xFD9
 25196                           status	equ	0xFD8
 25197                           
 25198 ;; *************** function i1_saveSysParams *****************
 25199 ;; Defined at:
 25200 ;;		line 111 in file "source/sysParams.h"
 25201 ;; Parameters:    Size  Location     Type
 25202 ;;		None
 25203 ;; Auto vars:     Size  Location     Type
 25204 ;;		None
 25205 ;; Return value:  Size  Location     Type
 25206 ;;                  1    wreg      void 
 25207 ;; Registers used:
 25208 ;;		wreg, status,2, status,0, cstack
 25209 ;; Tracked objects:
 25210 ;;		On entry : 0/0
 25211 ;;		On exit  : 0/0
 25212 ;;		Unchanged: 0/0
 25213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25214 ;;      Params:         0       0       0       0       0       0       0
 25215 ;;      Locals:         0       0       0       0       0       0       0
 25216 ;;      Temps:          0       0       0       0       0       0       0
 25217 ;;      Totals:         0       0       0       0       0       0       0
 25218 ;;Total ram usage:        0 bytes
 25219 ;; Hardware stack levels used:    1
 25220 ;; Hardware stack levels required when called:    7
 25221 ;; This function calls:
 25222 ;;		i1_calcVars2ti
 25223 ;;		i1_writeEEPROM
 25224 ;; This function is called by:
 25225 ;;		_loadSysParams
 25226 ;;		_UARTint
 25227 ;;		i1_confirmEdition
 25228 ;; This function uses a non-reentrant model
 25229 ;;
 25230                           
 25231                           	psect	text105
 25232  00527E                     __ptext105:
 25233                           	opt stack 0
 25234  00527E                     i1_saveSysParams:
 25235                           	opt stack 11
 25236                           
 25237                           ;sysParams.h: 112: calcVars2ti();
 25238                           
 25239                           ;incstack = 0
 25240  00527E  EC22  F033         	call	i1_calcVars2ti	;wreg free
 25241                           
 25242                           ;sysParams.h: 113: EECON1bits.WREN = 1;
 25243  005282  84A6               	bsf	4006,2,c	;volatile
 25244                           
 25245                           ;sysParams.h: 114: ie = INTCONbits.GIE;
 25246  005284  0E00               	movlw	0
 25247  005286  BEF2               	btfsc	intcon,7,c	;volatile
 25248  005288  0E01               	movlw	1
 25249  00528A  0100               	movlb	0	; () banked
 25250  00528C  6FCA               	movwf	_ie& (0+255),b
 25251                           
 25252                           ; BSR set to: 0
 25253                           ;sysParams.h: 115: INTCONbits.GIE = 0;
 25254  00528E  9EF2               	bcf	intcon,7,c	;volatile
 25255                           
 25256                           ; BSR set to: 0
 25257                           ;sysParams.h: 117: fData.floatdat = tiXcorte;
 25258  005290  C0B2  F0C4         	movff	_tiXcorte,_fData
 25259  005294  C0B3  F0C5         	movff	_tiXcorte+1,_fData+1
 25260  005298  C0B4  F0C6         	movff	_tiXcorte+2,_fData+2
 25261                           
 25262                           ; BSR set to: 0
 25263                           ;sysParams.h: 119: writeEEPROM(3, fData.floatUB);
 25264  00529C  C0C6  F060         	movff	_fData+2,i1writeEEPROM@data
 25265  0052A0  0E03               	movlw	3
 25266  0052A2  ECAD  F035         	call	i1_writeEEPROM
 25267                           
 25268                           ;sysParams.h: 120: writeEEPROM(4, fData.floatHB);
 25269  0052A6  C0C5  F060         	movff	_fData+1,i1writeEEPROM@data
 25270  0052AA  0E04               	movlw	4
 25271  0052AC  ECAD  F035         	call	i1_writeEEPROM
 25272                           
 25273                           ;sysParams.h: 121: writeEEPROM(5, fData.floatLB);
 25274  0052B0  C0C4  F060         	movff	_fData,i1writeEEPROM@data
 25275  0052B4  0E05               	movlw	5
 25276  0052B6  ECAD  F035         	call	i1_writeEEPROM
 25277                           
 25278                           ;sysParams.h: 122: i16Data.int16dat = numCortes;
 25279  0052BA  C0B8  F0C7         	movff	_numCortes,_i16Data
 25280  0052BE  C0B9  F0C8         	movff	_numCortes+1,_i16Data+1
 25281                           
 25282                           ;sysParams.h: 123: writeEEPROM(6, i16Data.int16HB);
 25283  0052C2  C0C8  F060         	movff	_i16Data+1,i1writeEEPROM@data
 25284  0052C6  0E06               	movlw	6
 25285  0052C8  ECAD  F035         	call	i1_writeEEPROM
 25286                           
 25287                           ;sysParams.h: 124: writeEEPROM(7, i16Data.int16LB);
 25288  0052CC  C0C7  F060         	movff	_i16Data,i1writeEEPROM@data
 25289  0052D0  0E07               	movlw	7
 25290  0052D2  ECAD  F035         	call	i1_writeEEPROM
 25291                           
 25292                           ;sysParams.h: 125: fData.floatdat = diamTubo;
 25293  0052D6  C0A9  F0C4         	movff	_diamTubo,_fData
 25294  0052DA  C0AA  F0C5         	movff	_diamTubo+1,_fData+1
 25295  0052DE  C0AB  F0C6         	movff	_diamTubo+2,_fData+2
 25296                           
 25297                           ;sysParams.h: 127: writeEEPROM(9, fData.floatUB);
 25298  0052E2  C0C6  F060         	movff	_fData+2,i1writeEEPROM@data
 25299  0052E6  0E09               	movlw	9
 25300  0052E8  ECAD  F035         	call	i1_writeEEPROM
 25301                           
 25302                           ;sysParams.h: 128: writeEEPROM(10, fData.floatHB);
 25303  0052EC  C0C5  F060         	movff	_fData+1,i1writeEEPROM@data
 25304  0052F0  0E0A               	movlw	10
 25305  0052F2  ECAD  F035         	call	i1_writeEEPROM
 25306                           
 25307                           ;sysParams.h: 129: writeEEPROM(11, fData.floatLB);
 25308  0052F6  C0C4  F060         	movff	_fData,i1writeEEPROM@data
 25309  0052FA  0E0B               	movlw	11
 25310  0052FC  ECAD  F035         	call	i1_writeEEPROM
 25311                           
 25312                           ;sysParams.h: 135: fData.floatdat = velocidadMasa;
 25313  005300  C0B5  F0C4         	movff	_velocidadMasa,_fData
 25314  005304  C0B6  F0C5         	movff	_velocidadMasa+1,_fData+1
 25315  005308  C0B7  F0C6         	movff	_velocidadMasa+2,_fData+2
 25316                           
 25317                           ;sysParams.h: 137: writeEEPROM(17, fData.floatUB);
 25318  00530C  C0C6  F060         	movff	_fData+2,i1writeEEPROM@data
 25319  005310  0E11               	movlw	17
 25320  005312  ECAD  F035         	call	i1_writeEEPROM
 25321                           
 25322                           ;sysParams.h: 138: writeEEPROM(18, fData.floatHB);
 25323  005316  C0C5  F060         	movff	_fData+1,i1writeEEPROM@data
 25324  00531A  0E12               	movlw	18
 25325  00531C  ECAD  F035         	call	i1_writeEEPROM
 25326                           
 25327                           ;sysParams.h: 139: writeEEPROM(19, fData.floatLB);
 25328  005320  C0C4  F060         	movff	_fData,i1writeEEPROM@data
 25329  005324  0E13               	movlw	19
 25330  005326  ECAD  F035         	call	i1_writeEEPROM
 25331                           
 25332                           ;sysParams.h: 140: EECON1bits.WREN = 0;
 25333  00532A  94A6               	bcf	4006,2,c	;volatile
 25334                           
 25335                           ;sysParams.h: 141: INTCONbits.GIE = ie;
 25336  00532C  0100               	movlb	0	; () banked
 25337  00532E  B1CA               	btfsc	_ie& (0+255),0,b
 25338  005330  D002               	bra	i1u1475_25
 25339  005332  9EF2               	bcf	intcon,7,c	;volatile
 25340  005334  D001               	bra	i1u1475_26
 25341  005336                     i1u1475_25:
 25342  005336  8EF2               	bsf	intcon,7,c	;volatile
 25343  005338                     i1u1475_26:
 25344  005338  0012               	return		;funcret
 25345  00533A                     __end_ofi1_saveSysParams:
 25346                           	opt stack 0
 25347                           pclatu	equ	0xFFB
 25348                           pclath	equ	0xFFA
 25349                           tblptru	equ	0xFF8
 25350                           tblptrh	equ	0xFF7
 25351                           tblptrl	equ	0xFF6
 25352                           tablat	equ	0xFF5
 25353                           prodh	equ	0xFF4
 25354                           prodl	equ	0xFF3
 25355                           intcon	equ	0xFF2
 25356                           postinc0	equ	0xFEE
 25357                           fsr0h	equ	0xFEA
 25358                           fsr0l	equ	0xFE9
 25359                           wreg	equ	0xFE8
 25360                           postdec1	equ	0xFE5
 25361                           fsr1h	equ	0xFE2
 25362                           fsr1l	equ	0xFE1
 25363                           bsr	equ	0xFE0
 25364                           indf2	equ	0xFDF
 25365                           postinc2	equ	0xFDE
 25366                           postdec2	equ	0xFDD
 25367                           plusw2	equ	0xFDB
 25368                           fsr2h	equ	0xFDA
 25369                           fsr2l	equ	0xFD9
 25370                           status	equ	0xFD8
 25371                           
 25372 ;; *************** function i1_calcVars2ti *****************
 25373 ;; Defined at:
 25374 ;;		line 87 in file "source/sysParams.h"
 25375 ;; Parameters:    Size  Location     Type
 25376 ;;		None
 25377 ;; Auto vars:     Size  Location     Type
 25378 ;;		None
 25379 ;; Return value:  Size  Location     Type
 25380 ;;                  1    wreg      void 
 25381 ;; Registers used:
 25382 ;;		wreg, status,2, status,0, cstack
 25383 ;; Tracked objects:
 25384 ;;		On entry : 0/0
 25385 ;;		On exit  : 0/0
 25386 ;;		Unchanged: 0/0
 25387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25388 ;;      Params:         0       0       0       0       0       0       0
 25389 ;;      Locals:         0       0       0       0       0       0       0
 25390 ;;      Temps:          0       0       0       0       0       0       0
 25391 ;;      Totals:         0       0       0       0       0       0       0
 25392 ;;Total ram usage:        0 bytes
 25393 ;; Hardware stack levels used:    1
 25394 ;; Hardware stack levels required when called:    6
 25395 ;; This function calls:
 25396 ;;		i1___ftdiv
 25397 ;;		i1___ftmul
 25398 ;; This function is called by:
 25399 ;;		i1_saveSysParams
 25400 ;;		i1_longPressENTER
 25401 ;; This function uses a non-reentrant model
 25402 ;;
 25403                           
 25404                           	psect	text106
 25405  006644                     __ptext106:
 25406                           	opt stack 0
 25407  006644                     i1_calcVars2ti:
 25408                           	opt stack 11
 25409                           
 25410                           ;sysParams.h: 95: tiXcorte = (float)kgXcorte / velocidadMasa;
 25411                           
 25412                           ;incstack = 0
 25413  006644  C0AC  F072         	movff	_kgXcorte,i1___ftdiv@f1
 25414  006648  C0AD  F073         	movff	_kgXcorte+1,i1___ftdiv@f1+1
 25415  00664C  C0AE  F074         	movff	_kgXcorte+2,i1___ftdiv@f1+2
 25416  006650  C0B5  F075         	movff	_velocidadMasa,i1___ftdiv@f2
 25417  006654  C0B6  F076         	movff	_velocidadMasa+1,i1___ftdiv@f2+1
 25418  006658  C0B7  F077         	movff	_velocidadMasa+2,i1___ftdiv@f2+2
 25419  00665C  EC0A  F01C         	call	i1___ftdiv	;wreg free
 25420  006660  C072  F0B2         	movff	?i1___ftdiv,_tiXcorte
 25421  006664  C073  F0B3         	movff	?i1___ftdiv+1,_tiXcorte+1
 25422  006668  C074  F0B4         	movff	?i1___ftdiv+2,_tiXcorte+2
 25423                           
 25424                           ;sysParams.h: 96: timsXcorte = (float)tiXcorte * 1000;
 25425  00666C  C0B2  F068         	movff	_tiXcorte,i1___ftmul@f1
 25426  006670  C0B3  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 25427  006674  C0B4  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 25428  006678  0E00               	movlw	0
 25429  00667A  0100               	movlb	0	; () banked
 25430  00667C  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 25431  00667E  0E7A               	movlw	122
 25432  006680  0100               	movlb	0	; () banked
 25433  006682  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 25434  006684  0E44               	movlw	68
 25435  006686  0100               	movlb	0	; () banked
 25436  006688  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 25437  00668A  ECB5  F01A         	call	i1___ftmul	;wreg free
 25438  00668E  C068  F04D         	movff	?i1___ftmul,_timsXcorte
 25439  006692  C069  F04E         	movff	?i1___ftmul+1,_timsXcorte+1
 25440  006696  C06A  F04F         	movff	?i1___ftmul+2,_timsXcorte+2
 25441  00669A  0012               	return		;funcret
 25442  00669C                     __end_ofi1_calcVars2ti:
 25443                           	opt stack 0
 25444                           pclatu	equ	0xFFB
 25445                           pclath	equ	0xFFA
 25446                           tblptru	equ	0xFF8
 25447                           tblptrh	equ	0xFF7
 25448                           tblptrl	equ	0xFF6
 25449                           tablat	equ	0xFF5
 25450                           prodh	equ	0xFF4
 25451                           prodl	equ	0xFF3
 25452                           intcon	equ	0xFF2
 25453                           postinc0	equ	0xFEE
 25454                           fsr0h	equ	0xFEA
 25455                           fsr0l	equ	0xFE9
 25456                           wreg	equ	0xFE8
 25457                           postdec1	equ	0xFE5
 25458                           fsr1h	equ	0xFE2
 25459                           fsr1l	equ	0xFE1
 25460                           bsr	equ	0xFE0
 25461                           indf2	equ	0xFDF
 25462                           postinc2	equ	0xFDE
 25463                           postdec2	equ	0xFDD
 25464                           plusw2	equ	0xFDB
 25465                           fsr2h	equ	0xFDA
 25466                           fsr2l	equ	0xFD9
 25467                           status	equ	0xFD8
 25468                           
 25469 ;; *************** function i1___ftdiv *****************
 25470 ;; Defined at:
 25471 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftdiv.c"
 25472 ;; Parameters:    Size  Location     Type
 25473 ;;  f1              3   18[BANK0 ] float 
 25474 ;;  f2              3   21[BANK0 ] float 
 25475 ;; Auto vars:     Size  Location     Type
 25476 ;;  __ftdiv         3   28[BANK0 ] float 
 25477 ;;  __ftdiv         1   32[BANK0 ] unsigned char 
 25478 ;;  __ftdiv         1   31[BANK0 ] unsigned char 
 25479 ;;  __ftdiv         1   27[BANK0 ] unsigned char 
 25480 ;; Return value:  Size  Location     Type
 25481 ;;                  3   18[BANK0 ] float 
 25482 ;; Registers used:
 25483 ;;		wreg, status,2, status,0, cstack
 25484 ;; Tracked objects:
 25485 ;;		On entry : 0/0
 25486 ;;		On exit  : 0/0
 25487 ;;		Unchanged: 0/0
 25488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25489 ;;      Params:         0       6       0       0       0       0       0
 25490 ;;      Locals:         0       6       0       0       0       0       0
 25491 ;;      Temps:          0       3       0       0       0       0       0
 25492 ;;      Totals:         0      15       0       0       0       0       0
 25493 ;;Total ram usage:       15 bytes
 25494 ;; Hardware stack levels used:    1
 25495 ;; Hardware stack levels required when called:    5
 25496 ;; This function calls:
 25497 ;;		i1___ftpack
 25498 ;; This function is called by:
 25499 ;;		i1_calcVars2ti
 25500 ;;		i1_integrator
 25501 ;;		i1_longPressENTER
 25502 ;; This function uses a non-reentrant model
 25503 ;;
 25504                           
 25505                           	psect	text107
 25506  003814                     __ptext107:
 25507                           	opt stack 0
 25508  003814                     i1___ftdiv:
 25509                           	opt stack 11
 25510                           
 25511                           ;incstack = 0
 25512  003814  C074  F078         	movff	i1___ftdiv@f1+2,??i1___ftdiv
 25513  003818  0100               	movlb	0	; () banked
 25514  00381A  6B79               	clrf	(??i1___ftdiv+1)& (0+255),b
 25515  00381C  6B7A               	clrf	(??i1___ftdiv+2)& (0+255),b
 25516  00381E  0100               	movlb	0	; () banked
 25517  003820  3573               	rlcf	(i1___ftdiv@f1+1)& (0+255),w,b
 25518  003822  0100               	movlb	0	; () banked
 25519  003824  3778               	rlcf	??i1___ftdiv& (0+255),f,b
 25520  003826  E301               	bnc	u1358_21
 25521  003828  8179               	bsf	(??i1___ftdiv+1)& (0+255),0,b
 25522  00382A                     u1358_21:
 25523  00382A  0100               	movlb	0	; () banked
 25524  00382C  5178               	movf	??i1___ftdiv& (0+255),w,b
 25525  00382E  0100               	movlb	0	; () banked
 25526  003830  6F7F               	movwf	i1___ftdiv@exp& (0+255),b
 25527  003832  0100               	movlb	0	; () banked
 25528  003834  517F               	movf	i1___ftdiv@exp& (0+255),w,b
 25529  003836  A4D8               	btfss	status,2,c
 25530  003838  D00A               	goto	i1l9537
 25531                           
 25532                           ; BSR set to: 0
 25533  00383A  0E00               	movlw	0
 25534  00383C  0100               	movlb	0	; () banked
 25535  00383E  6F72               	movwf	?i1___ftdiv& (0+255),b
 25536  003840  0E00               	movlw	0
 25537  003842  0100               	movlb	0	; () banked
 25538  003844  6F73               	movwf	(?i1___ftdiv+1)& (0+255),b
 25539  003846  0E00               	movlw	0
 25540  003848  0100               	movlb	0	; () banked
 25541  00384A  6F74               	movwf	(?i1___ftdiv+2)& (0+255),b
 25542                           
 25543                           ; BSR set to: 0
 25544  00384C  0012               	return	
 25545  00384E                     i1l9537:
 25546                           
 25547                           ; BSR set to: 0
 25548  00384E  C077  F078         	movff	i1___ftdiv@f2+2,??i1___ftdiv
 25549  003852  0100               	movlb	0	; () banked
 25550  003854  6B79               	clrf	(??i1___ftdiv+1)& (0+255),b
 25551  003856  6B7A               	clrf	(??i1___ftdiv+2)& (0+255),b
 25552  003858  0100               	movlb	0	; () banked
 25553  00385A  3576               	rlcf	(i1___ftdiv@f2+1)& (0+255),w,b
 25554  00385C  0100               	movlb	0	; () banked
 25555  00385E  3778               	rlcf	??i1___ftdiv& (0+255),f,b
 25556  003860  E301               	bnc	u1360_21
 25557  003862  8179               	bsf	(??i1___ftdiv+1)& (0+255),0,b
 25558  003864                     u1360_21:
 25559  003864  0100               	movlb	0	; () banked
 25560  003866  5178               	movf	??i1___ftdiv& (0+255),w,b
 25561  003868  0100               	movlb	0	; () banked
 25562  00386A  6F80               	movwf	i1___ftdiv@sign& (0+255),b
 25563  00386C  0100               	movlb	0	; () banked
 25564  00386E  5180               	movf	i1___ftdiv@sign& (0+255),w,b
 25565  003870  A4D8               	btfss	status,2,c
 25566  003872  D00A               	goto	i1l9543
 25567                           
 25568                           ; BSR set to: 0
 25569  003874  0E00               	movlw	0
 25570  003876  0100               	movlb	0	; () banked
 25571  003878  6F72               	movwf	?i1___ftdiv& (0+255),b
 25572  00387A  0E00               	movlw	0
 25573  00387C  0100               	movlb	0	; () banked
 25574  00387E  6F73               	movwf	(?i1___ftdiv+1)& (0+255),b
 25575  003880  0E00               	movlw	0
 25576  003882  0100               	movlb	0	; () banked
 25577  003884  6F74               	movwf	(?i1___ftdiv+2)& (0+255),b
 25578                           
 25579                           ; BSR set to: 0
 25580  003886  0012               	return	
 25581  003888                     i1l9543:
 25582                           
 25583                           ; BSR set to: 0
 25584  003888  0E00               	movlw	0
 25585  00388A  0100               	movlb	0	; () banked
 25586  00388C  6F7C               	movwf	i1___ftdiv@f3& (0+255),b
 25587  00388E  0E00               	movlw	0
 25588  003890  0100               	movlb	0	; () banked
 25589  003892  6F7D               	movwf	(i1___ftdiv@f3+1)& (0+255),b
 25590  003894  0E00               	movlw	0
 25591  003896  0100               	movlb	0	; () banked
 25592  003898  6F7E               	movwf	(i1___ftdiv@f3+2)& (0+255),b
 25593                           
 25594                           ; BSR set to: 0
 25595  00389A  0100               	movlb	0	; () banked
 25596  00389C  5180               	movf	i1___ftdiv@sign& (0+255),w,b
 25597  00389E  0F89               	addlw	137
 25598  0038A0  0100               	movlb	0	; () banked
 25599  0038A2  5F7F               	subwf	i1___ftdiv@exp& (0+255),f,b
 25600                           
 25601                           ; BSR set to: 0
 25602  0038A4  C074  F080         	movff	i1___ftdiv@f1+2,i1___ftdiv@sign
 25603                           
 25604                           ; BSR set to: 0
 25605  0038A8  0100               	movlb	0	; () banked
 25606  0038AA  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 25607  0038AC  0100               	movlb	0	; () banked
 25608  0038AE  1B80               	xorwf	i1___ftdiv@sign& (0+255),f,b
 25609                           
 25610                           ; BSR set to: 0
 25611  0038B0  0E80               	movlw	128
 25612  0038B2  0100               	movlb	0	; () banked
 25613  0038B4  1780               	andwf	i1___ftdiv@sign& (0+255),f,b
 25614                           
 25615                           ; BSR set to: 0
 25616  0038B6  0100               	movlb	0	; () banked
 25617  0038B8  8F73               	bsf	(i1___ftdiv@f1+1)& (0+255),7,b
 25618                           
 25619                           ; BSR set to: 0
 25620  0038BA  0EFF               	movlw	255
 25621  0038BC  0100               	movlb	0	; () banked
 25622  0038BE  1772               	andwf	i1___ftdiv@f1& (0+255),f,b
 25623  0038C0  0EFF               	movlw	255
 25624  0038C2  0100               	movlb	0	; () banked
 25625  0038C4  1773               	andwf	(i1___ftdiv@f1+1)& (0+255),f,b
 25626  0038C6  0E00               	movlw	0
 25627  0038C8  0100               	movlb	0	; () banked
 25628  0038CA  1774               	andwf	(i1___ftdiv@f1+2)& (0+255),f,b
 25629                           
 25630                           ; BSR set to: 0
 25631  0038CC  0100               	movlb	0	; () banked
 25632  0038CE  8F76               	bsf	(i1___ftdiv@f2+1)& (0+255),7,b
 25633                           
 25634                           ; BSR set to: 0
 25635  0038D0  0EFF               	movlw	255
 25636  0038D2  0100               	movlb	0	; () banked
 25637  0038D4  1775               	andwf	i1___ftdiv@f2& (0+255),f,b
 25638  0038D6  0EFF               	movlw	255
 25639  0038D8  0100               	movlb	0	; () banked
 25640  0038DA  1776               	andwf	(i1___ftdiv@f2+1)& (0+255),f,b
 25641  0038DC  0E00               	movlw	0
 25642  0038DE  0100               	movlb	0	; () banked
 25643  0038E0  1777               	andwf	(i1___ftdiv@f2+2)& (0+255),f,b
 25644                           
 25645                           ; BSR set to: 0
 25646  0038E2  0E18               	movlw	24
 25647  0038E4  0100               	movlb	0	; () banked
 25648  0038E6  6F7B               	movwf	i1___ftdiv@cntr& (0+255),b
 25649  0038E8                     i1l9563:
 25650                           
 25651                           ; BSR set to: 0
 25652  0038E8  0100               	movlb	0	; () banked
 25653  0038EA  90D8               	bcf	status,0,c
 25654  0038EC  377C               	rlcf	i1___ftdiv@f3& (0+255),f,b
 25655  0038EE  377D               	rlcf	(i1___ftdiv@f3+1)& (0+255),f,b
 25656  0038F0  377E               	rlcf	(i1___ftdiv@f3+2)& (0+255),f,b
 25657                           
 25658                           ; BSR set to: 0
 25659  0038F2  0100               	movlb	0	; () banked
 25660  0038F4  5175               	movf	i1___ftdiv@f2& (0+255),w,b
 25661  0038F6  0100               	movlb	0	; () banked
 25662  0038F8  5D72               	subwf	i1___ftdiv@f1& (0+255),w,b
 25663  0038FA  0100               	movlb	0	; () banked
 25664  0038FC  5176               	movf	(i1___ftdiv@f2+1)& (0+255),w,b
 25665  0038FE  0100               	movlb	0	; () banked
 25666  003900  5973               	subwfb	(i1___ftdiv@f1+1)& (0+255),w,b
 25667  003902  0100               	movlb	0	; () banked
 25668  003904  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 25669  003906  0100               	movlb	0	; () banked
 25670  003908  5974               	subwfb	(i1___ftdiv@f1+2)& (0+255),w,b
 25671  00390A  A0D8               	btfss	status,0,c
 25672  00390C  D00E               	goto	i1l1322
 25673                           
 25674                           ; BSR set to: 0
 25675  00390E  0100               	movlb	0	; () banked
 25676  003910  5175               	movf	i1___ftdiv@f2& (0+255),w,b
 25677  003912  0100               	movlb	0	; () banked
 25678  003914  5F72               	subwf	i1___ftdiv@f1& (0+255),f,b
 25679  003916  0100               	movlb	0	; () banked
 25680  003918  5176               	movf	(i1___ftdiv@f2+1)& (0+255),w,b
 25681  00391A  0100               	movlb	0	; () banked
 25682  00391C  5B73               	subwfb	(i1___ftdiv@f1+1)& (0+255),f,b
 25683  00391E  0100               	movlb	0	; () banked
 25684  003920  5177               	movf	(i1___ftdiv@f2+2)& (0+255),w,b
 25685  003922  0100               	movlb	0	; () banked
 25686  003924  5B74               	subwfb	(i1___ftdiv@f1+2)& (0+255),f,b
 25687                           
 25688                           ; BSR set to: 0
 25689  003926  0100               	movlb	0	; () banked
 25690  003928  817C               	bsf	i1___ftdiv@f3& (0+255),0,b
 25691  00392A                     i1l1322:
 25692                           
 25693                           ; BSR set to: 0
 25694  00392A  0100               	movlb	0	; () banked
 25695  00392C  90D8               	bcf	status,0,c
 25696  00392E  3772               	rlcf	i1___ftdiv@f1& (0+255),f,b
 25697  003930  3773               	rlcf	(i1___ftdiv@f1+1)& (0+255),f,b
 25698  003932  3774               	rlcf	(i1___ftdiv@f1+2)& (0+255),f,b
 25699                           
 25700                           ; BSR set to: 0
 25701  003934  0100               	movlb	0	; () banked
 25702  003936  2F7B               	decfsz	i1___ftdiv@cntr& (0+255),f,b
 25703  003938  D7D7               	goto	i1l9563
 25704                           
 25705                           ; BSR set to: 0
 25706                           
 25707                           ; BSR set to: 0
 25708  00393A  C07C  F060         	movff	i1___ftdiv@f3,i1___ftpack@arg
 25709  00393E  C07D  F061         	movff	i1___ftdiv@f3+1,i1___ftpack@arg+1
 25710  003942  C07E  F062         	movff	i1___ftdiv@f3+2,i1___ftpack@arg+2
 25711  003946  C07F  F063         	movff	i1___ftdiv@exp,i1___ftpack@exp
 25712  00394A  C080  F064         	movff	i1___ftdiv@sign,i1___ftpack@sign
 25713  00394E  EC52  F022         	call	i1___ftpack	;wreg free
 25714  003952  C060  F072         	movff	?i1___ftpack,?i1___ftdiv
 25715  003956  C061  F073         	movff	?i1___ftpack+1,?i1___ftdiv+1
 25716  00395A  C062  F074         	movff	?i1___ftpack+2,?i1___ftdiv+2
 25717  00395E  0012               	return	
 25718  003960                     __end_ofi1___ftdiv:
 25719                           	opt stack 0
 25720                           pclatu	equ	0xFFB
 25721                           pclath	equ	0xFFA
 25722                           tblptru	equ	0xFF8
 25723                           tblptrh	equ	0xFF7
 25724                           tblptrl	equ	0xFF6
 25725                           tablat	equ	0xFF5
 25726                           prodh	equ	0xFF4
 25727                           prodl	equ	0xFF3
 25728                           intcon	equ	0xFF2
 25729                           postinc0	equ	0xFEE
 25730                           fsr0h	equ	0xFEA
 25731                           fsr0l	equ	0xFE9
 25732                           wreg	equ	0xFE8
 25733                           postdec1	equ	0xFE5
 25734                           fsr1h	equ	0xFE2
 25735                           fsr1l	equ	0xFE1
 25736                           bsr	equ	0xFE0
 25737                           indf2	equ	0xFDF
 25738                           postinc2	equ	0xFDE
 25739                           postdec2	equ	0xFDD
 25740                           plusw2	equ	0xFDB
 25741                           fsr2h	equ	0xFDA
 25742                           fsr2l	equ	0xFD9
 25743                           status	equ	0xFD8
 25744                           
 25745 ;; *************** function i1_calcSysVars *****************
 25746 ;; Defined at:
 25747 ;;		line 76 in file "source/sysParams.h"
 25748 ;; Parameters:    Size  Location     Type
 25749 ;;		None
 25750 ;; Auto vars:     Size  Location     Type
 25751 ;;  calcSysVars     3   23[BANK0 ] float 
 25752 ;; Return value:  Size  Location     Type
 25753 ;;                  1    wreg      void 
 25754 ;; Registers used:
 25755 ;;		wreg, status,2, status,0, cstack
 25756 ;; Tracked objects:
 25757 ;;		On entry : 0/0
 25758 ;;		On exit  : 0/0
 25759 ;;		Unchanged: 0/0
 25760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25761 ;;      Params:         0       0       0       0       0       0       0
 25762 ;;      Locals:         0       3       0       0       0       0       0
 25763 ;;      Temps:          0       0       0       0       0       0       0
 25764 ;;      Totals:         0       3       0       0       0       0       0
 25765 ;;Total ram usage:        3 bytes
 25766 ;; Hardware stack levels used:    1
 25767 ;; Hardware stack levels required when called:    6
 25768 ;; This function calls:
 25769 ;;		i1___ftmul
 25770 ;; This function is called by:
 25771 ;;		_loadSysParams
 25772 ;;		i1_sysParamInit
 25773 ;; This function uses a non-reentrant model
 25774 ;;
 25775                           
 25776                           	psect	text108
 25777  00646C                     __ptext108:
 25778                           	opt stack 0
 25779  00646C                     i1_calcSysVars:
 25780                           	opt stack 11
 25781                           
 25782                           ;sysParams.h: 77: float temp = 0;
 25783                           
 25784                           ;incstack = 0
 25785  00646C  0E00               	movlw	0
 25786  00646E  0100               	movlb	0	; () banked
 25787  006470  6F77               	movwf	i1calcSysVars@temp& (0+255),b
 25788  006472  0E00               	movlw	0
 25789  006474  0100               	movlb	0	; () banked
 25790  006476  6F78               	movwf	(i1calcSysVars@temp+1)& (0+255),b
 25791  006478  0E00               	movlw	0
 25792  00647A  0100               	movlb	0	; () banked
 25793  00647C  6F79               	movwf	(i1calcSysVars@temp+2)& (0+255),b
 25794                           
 25795                           ; BSR set to: 0
 25796                           ;sysParams.h: 78: timsXcorte = (float)tiXcorte * 1000;
 25797  00647E  C0B2  F068         	movff	_tiXcorte,i1___ftmul@f1
 25798  006482  C0B3  F069         	movff	_tiXcorte+1,i1___ftmul@f1+1
 25799  006486  C0B4  F06A         	movff	_tiXcorte+2,i1___ftmul@f1+2
 25800  00648A  0E00               	movlw	0
 25801  00648C  0100               	movlb	0	; () banked
 25802  00648E  6F6B               	movwf	i1___ftmul@f2& (0+255),b
 25803  006490  0E7A               	movlw	122
 25804  006492  0100               	movlb	0	; () banked
 25805  006494  6F6C               	movwf	(i1___ftmul@f2+1)& (0+255),b
 25806  006496  0E44               	movlw	68
 25807  006498  0100               	movlb	0	; () banked
 25808  00649A  6F6D               	movwf	(i1___ftmul@f2+2)& (0+255),b
 25809  00649C  ECB5  F01A         	call	i1___ftmul	;wreg free
 25810  0064A0  C068  F04D         	movff	?i1___ftmul,_timsXcorte
 25811  0064A4  C069  F04E         	movff	?i1___ftmul+1,_timsXcorte+1
 25812  0064A8  C06A  F04F         	movff	?i1___ftmul+2,_timsXcorte+2
 25813                           
 25814                           ;sysParams.h: 84: kgXcorte = (float)velocidadMasa * tiXcorte;
 25815  0064AC  C0B5  F068         	movff	_velocidadMasa,i1___ftmul@f1
 25816  0064B0  C0B6  F069         	movff	_velocidadMasa+1,i1___ftmul@f1+1
 25817  0064B4  C0B7  F06A         	movff	_velocidadMasa+2,i1___ftmul@f1+2
 25818  0064B8  C0B2  F06B         	movff	_tiXcorte,i1___ftmul@f2
 25819  0064BC  C0B3  F06C         	movff	_tiXcorte+1,i1___ftmul@f2+1
 25820  0064C0  C0B4  F06D         	movff	_tiXcorte+2,i1___ftmul@f2+2
 25821  0064C4  ECB5  F01A         	call	i1___ftmul	;wreg free
 25822  0064C8  C068  F0AC         	movff	?i1___ftmul,_kgXcorte
 25823  0064CC  C069  F0AD         	movff	?i1___ftmul+1,_kgXcorte+1
 25824  0064D0  C06A  F0AE         	movff	?i1___ftmul+2,_kgXcorte+2
 25825  0064D4  0012               	return		;funcret
 25826  0064D6                     __end_ofi1_calcSysVars:
 25827                           	opt stack 0
 25828                           pclatu	equ	0xFFB
 25829                           pclath	equ	0xFFA
 25830                           tblptru	equ	0xFF8
 25831                           tblptrh	equ	0xFF7
 25832                           tblptrl	equ	0xFF6
 25833                           tablat	equ	0xFF5
 25834                           prodh	equ	0xFF4
 25835                           prodl	equ	0xFF3
 25836                           intcon	equ	0xFF2
 25837                           postinc0	equ	0xFEE
 25838                           fsr0h	equ	0xFEA
 25839                           fsr0l	equ	0xFE9
 25840                           wreg	equ	0xFE8
 25841                           postdec1	equ	0xFE5
 25842                           fsr1h	equ	0xFE2
 25843                           fsr1l	equ	0xFE1
 25844                           bsr	equ	0xFE0
 25845                           indf2	equ	0xFDF
 25846                           postinc2	equ	0xFDE
 25847                           postdec2	equ	0xFDD
 25848                           plusw2	equ	0xFDB
 25849                           fsr2h	equ	0xFDA
 25850                           fsr2l	equ	0xFD9
 25851                           status	equ	0xFD8
 25852                           
 25853 ;; *************** function i1___ftmul *****************
 25854 ;; Defined at:
 25855 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftmul.c"
 25856 ;; Parameters:    Size  Location     Type
 25857 ;;  f1              3    8[BANK0 ] float 
 25858 ;;  f2              3   11[BANK0 ] float 
 25859 ;; Auto vars:     Size  Location     Type
 25860 ;;  __ftmul         3   18[BANK0 ] unsigned um
 25861 ;;  __ftmul         1   22[BANK0 ] unsigned char 
 25862 ;;  __ftmul         1   21[BANK0 ] unsigned char 
 25863 ;;  __ftmul         1   17[BANK0 ] unsigned char 
 25864 ;; Return value:  Size  Location     Type
 25865 ;;                  3    8[BANK0 ] float 
 25866 ;; Registers used:
 25867 ;;		wreg, status,2, status,0, cstack
 25868 ;; Tracked objects:
 25869 ;;		On entry : 0/0
 25870 ;;		On exit  : 0/0
 25871 ;;		Unchanged: 0/0
 25872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25873 ;;      Params:         0       6       0       0       0       0       0
 25874 ;;      Locals:         0       6       0       0       0       0       0
 25875 ;;      Temps:          0       3       0       0       0       0       0
 25876 ;;      Totals:         0      15       0       0       0       0       0
 25877 ;;Total ram usage:       15 bytes
 25878 ;; Hardware stack levels used:    1
 25879 ;; Hardware stack levels required when called:    5
 25880 ;; This function calls:
 25881 ;;		i1___ftpack
 25882 ;; This function is called by:
 25883 ;;		i1_calcSysVars
 25884 ;;		i1_calcVars2ti
 25885 ;;		i1_desintegrator
 25886 ;; This function uses a non-reentrant model
 25887 ;;
 25888                           
 25889                           	psect	text109
 25890  00356A                     __ptext109:
 25891                           	opt stack 0
 25892  00356A                     i1___ftmul:
 25893                           	opt stack 11
 25894                           
 25895                           ;incstack = 0
 25896  00356A  C06A  F06E         	movff	i1___ftmul@f1+2,??i1___ftmul
 25897  00356E  0100               	movlb	0	; () banked
 25898  003570  6B6F               	clrf	(??i1___ftmul+1)& (0+255),b
 25899  003572  6B70               	clrf	(??i1___ftmul+2)& (0+255),b
 25900  003574  0100               	movlb	0	; () banked
 25901  003576  3569               	rlcf	(i1___ftmul@f1+1)& (0+255),w,b
 25902  003578  0100               	movlb	0	; () banked
 25903  00357A  376E               	rlcf	??i1___ftmul& (0+255),f,b
 25904  00357C  E301               	bnc	u1363_21
 25905  00357E  816F               	bsf	(??i1___ftmul+1)& (0+255),0,b
 25906  003580                     u1363_21:
 25907  003580  0100               	movlb	0	; () banked
 25908  003582  516E               	movf	??i1___ftmul& (0+255),w,b
 25909  003584  0100               	movlb	0	; () banked
 25910  003586  6F71               	movwf	i1___ftmul@exp& (0+255),b
 25911  003588  0100               	movlb	0	; () banked
 25912  00358A  5171               	movf	i1___ftmul@exp& (0+255),w,b
 25913  00358C  A4D8               	btfss	status,2,c
 25914  00358E  D00A               	goto	i1l9583
 25915                           
 25916                           ; BSR set to: 0
 25917  003590  0E00               	movlw	0
 25918  003592  0100               	movlb	0	; () banked
 25919  003594  6F68               	movwf	?i1___ftmul& (0+255),b
 25920  003596  0E00               	movlw	0
 25921  003598  0100               	movlb	0	; () banked
 25922  00359A  6F69               	movwf	(?i1___ftmul+1)& (0+255),b
 25923  00359C  0E00               	movlw	0
 25924  00359E  0100               	movlb	0	; () banked
 25925  0035A0  6F6A               	movwf	(?i1___ftmul+2)& (0+255),b
 25926                           
 25927                           ; BSR set to: 0
 25928  0035A2  0012               	return	
 25929  0035A4                     i1l9583:
 25930                           
 25931                           ; BSR set to: 0
 25932  0035A4  C06D  F06E         	movff	i1___ftmul@f2+2,??i1___ftmul
 25933  0035A8  0100               	movlb	0	; () banked
 25934  0035AA  6B6F               	clrf	(??i1___ftmul+1)& (0+255),b
 25935  0035AC  6B70               	clrf	(??i1___ftmul+2)& (0+255),b
 25936  0035AE  0100               	movlb	0	; () banked
 25937  0035B0  356C               	rlcf	(i1___ftmul@f2+1)& (0+255),w,b
 25938  0035B2  0100               	movlb	0	; () banked
 25939  0035B4  376E               	rlcf	??i1___ftmul& (0+255),f,b
 25940  0035B6  E301               	bnc	u1365_21
 25941  0035B8  816F               	bsf	(??i1___ftmul+1)& (0+255),0,b
 25942  0035BA                     u1365_21:
 25943  0035BA  0100               	movlb	0	; () banked
 25944  0035BC  516E               	movf	??i1___ftmul& (0+255),w,b
 25945  0035BE  0100               	movlb	0	; () banked
 25946  0035C0  6F76               	movwf	i1___ftmul@sign& (0+255),b
 25947  0035C2  0100               	movlb	0	; () banked
 25948  0035C4  5176               	movf	i1___ftmul@sign& (0+255),w,b
 25949  0035C6  A4D8               	btfss	status,2,c
 25950  0035C8  D00A               	goto	i1l9589
 25951                           
 25952                           ; BSR set to: 0
 25953  0035CA  0E00               	movlw	0
 25954  0035CC  0100               	movlb	0	; () banked
 25955  0035CE  6F68               	movwf	?i1___ftmul& (0+255),b
 25956  0035D0  0E00               	movlw	0
 25957  0035D2  0100               	movlb	0	; () banked
 25958  0035D4  6F69               	movwf	(?i1___ftmul+1)& (0+255),b
 25959  0035D6  0E00               	movlw	0
 25960  0035D8  0100               	movlb	0	; () banked
 25961  0035DA  6F6A               	movwf	(?i1___ftmul+2)& (0+255),b
 25962                           
 25963                           ; BSR set to: 0
 25964  0035DC  0012               	return	
 25965  0035DE                     i1l9589:
 25966                           
 25967                           ; BSR set to: 0
 25968  0035DE  0100               	movlb	0	; () banked
 25969  0035E0  5176               	movf	i1___ftmul@sign& (0+255),w,b
 25970  0035E2  0F7B               	addlw	123
 25971  0035E4  0100               	movlb	0	; () banked
 25972  0035E6  2771               	addwf	i1___ftmul@exp& (0+255),f,b
 25973                           
 25974                           ; BSR set to: 0
 25975  0035E8  C06A  F076         	movff	i1___ftmul@f1+2,i1___ftmul@sign
 25976  0035EC  0100               	movlb	0	; () banked
 25977  0035EE  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 25978  0035F0  0100               	movlb	0	; () banked
 25979  0035F2  1B76               	xorwf	i1___ftmul@sign& (0+255),f,b
 25980  0035F4  0E80               	movlw	128
 25981  0035F6  0100               	movlb	0	; () banked
 25982  0035F8  1776               	andwf	i1___ftmul@sign& (0+255),f,b
 25983                           
 25984                           ; BSR set to: 0
 25985  0035FA  0100               	movlb	0	; () banked
 25986  0035FC  8F69               	bsf	(i1___ftmul@f1+1)& (0+255),7,b
 25987                           
 25988                           ; BSR set to: 0
 25989  0035FE  0100               	movlb	0	; () banked
 25990  003600  8F6C               	bsf	(i1___ftmul@f2+1)& (0+255),7,b
 25991                           
 25992                           ; BSR set to: 0
 25993  003602  0EFF               	movlw	255
 25994  003604  0100               	movlb	0	; () banked
 25995  003606  176B               	andwf	i1___ftmul@f2& (0+255),f,b
 25996  003608  0EFF               	movlw	255
 25997  00360A  0100               	movlb	0	; () banked
 25998  00360C  176C               	andwf	(i1___ftmul@f2+1)& (0+255),f,b
 25999  00360E  0E00               	movlw	0
 26000  003610  0100               	movlb	0	; () banked
 26001  003612  176D               	andwf	(i1___ftmul@f2+2)& (0+255),f,b
 26002                           
 26003                           ; BSR set to: 0
 26004  003614  0E00               	movlw	0
 26005  003616  0100               	movlb	0	; () banked
 26006  003618  6F72               	movwf	i1___ftmul@f3_as_product& (0+255),b
 26007  00361A  0E00               	movlw	0
 26008  00361C  0100               	movlb	0	; () banked
 26009  00361E  6F73               	movwf	(i1___ftmul@f3_as_product+1)& (0+255),b
 26010  003620  0E00               	movlw	0
 26011  003622  0100               	movlb	0	; () banked
 26012  003624  6F74               	movwf	(i1___ftmul@f3_as_product+2)& (0+255),b
 26013                           
 26014                           ; BSR set to: 0
 26015  003626  0E07               	movlw	7
 26016  003628  0100               	movlb	0	; () banked
 26017  00362A  6F75               	movwf	i1___ftmul@cntr& (0+255),b
 26018  00362C                     i1l9603:
 26019                           
 26020                           ; BSR set to: 0
 26021  00362C  0100               	movlb	0	; () banked
 26022  00362E  A168               	btfss	i1___ftmul@f1& (0+255),0,b
 26023  003630  D00C               	goto	i1l9607
 26024                           
 26025                           ; BSR set to: 0
 26026  003632  0100               	movlb	0	; () banked
 26027  003634  516B               	movf	i1___ftmul@f2& (0+255),w,b
 26028  003636  0100               	movlb	0	; () banked
 26029  003638  2772               	addwf	i1___ftmul@f3_as_product& (0+255),f,b
 26030  00363A  0100               	movlb	0	; () banked
 26031  00363C  516C               	movf	(i1___ftmul@f2+1)& (0+255),w,b
 26032  00363E  0100               	movlb	0	; () banked
 26033  003640  2373               	addwfc	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 26034  003642  0100               	movlb	0	; () banked
 26035  003644  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 26036  003646  0100               	movlb	0	; () banked
 26037  003648  2374               	addwfc	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 26038  00364A                     i1l9607:
 26039                           
 26040                           ; BSR set to: 0
 26041  00364A  0100               	movlb	0	; () banked
 26042  00364C  90D8               	bcf	status,0,c
 26043  00364E  336A               	rrcf	(i1___ftmul@f1+2)& (0+255),f,b
 26044  003650  3369               	rrcf	(i1___ftmul@f1+1)& (0+255),f,b
 26045  003652  3368               	rrcf	i1___ftmul@f1& (0+255),f,b
 26046  003654  0100               	movlb	0	; () banked
 26047  003656  90D8               	bcf	status,0,c
 26048  003658  376B               	rlcf	i1___ftmul@f2& (0+255),f,b
 26049  00365A  376C               	rlcf	(i1___ftmul@f2+1)& (0+255),f,b
 26050  00365C  376D               	rlcf	(i1___ftmul@f2+2)& (0+255),f,b
 26051                           
 26052                           ; BSR set to: 0
 26053  00365E  0100               	movlb	0	; () banked
 26054  003660  2F75               	decfsz	i1___ftmul@cntr& (0+255),f,b
 26055  003662  D7E4               	goto	i1l9603
 26056                           
 26057                           ; BSR set to: 0
 26058                           
 26059                           ; BSR set to: 0
 26060  003664  0E09               	movlw	9
 26061  003666  0100               	movlb	0	; () banked
 26062  003668  6F75               	movwf	i1___ftmul@cntr& (0+255),b
 26063  00366A                     i1l9613:
 26064                           
 26065                           ; BSR set to: 0
 26066  00366A  0100               	movlb	0	; () banked
 26067  00366C  A168               	btfss	i1___ftmul@f1& (0+255),0,b
 26068  00366E  D00C               	goto	i1l9617
 26069                           
 26070                           ; BSR set to: 0
 26071  003670  0100               	movlb	0	; () banked
 26072  003672  516B               	movf	i1___ftmul@f2& (0+255),w,b
 26073  003674  0100               	movlb	0	; () banked
 26074  003676  2772               	addwf	i1___ftmul@f3_as_product& (0+255),f,b
 26075  003678  0100               	movlb	0	; () banked
 26076  00367A  516C               	movf	(i1___ftmul@f2+1)& (0+255),w,b
 26077  00367C  0100               	movlb	0	; () banked
 26078  00367E  2373               	addwfc	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 26079  003680  0100               	movlb	0	; () banked
 26080  003682  516D               	movf	(i1___ftmul@f2+2)& (0+255),w,b
 26081  003684  0100               	movlb	0	; () banked
 26082  003686  2374               	addwfc	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 26083  003688                     i1l9617:
 26084                           
 26085                           ; BSR set to: 0
 26086  003688  0100               	movlb	0	; () banked
 26087  00368A  90D8               	bcf	status,0,c
 26088  00368C  336A               	rrcf	(i1___ftmul@f1+2)& (0+255),f,b
 26089  00368E  3369               	rrcf	(i1___ftmul@f1+1)& (0+255),f,b
 26090  003690  3368               	rrcf	i1___ftmul@f1& (0+255),f,b
 26091  003692  0100               	movlb	0	; () banked
 26092  003694  90D8               	bcf	status,0,c
 26093  003696  3374               	rrcf	(i1___ftmul@f3_as_product+2)& (0+255),f,b
 26094  003698  3373               	rrcf	(i1___ftmul@f3_as_product+1)& (0+255),f,b
 26095  00369A  3372               	rrcf	i1___ftmul@f3_as_product& (0+255),f,b
 26096                           
 26097                           ; BSR set to: 0
 26098  00369C  0100               	movlb	0	; () banked
 26099  00369E  2F75               	decfsz	i1___ftmul@cntr& (0+255),f,b
 26100  0036A0  D7E4               	goto	i1l9613
 26101                           
 26102                           ; BSR set to: 0
 26103                           
 26104                           ; BSR set to: 0
 26105  0036A2  C072  F060         	movff	i1___ftmul@f3_as_product,i1___ftpack@arg
 26106  0036A6  C073  F061         	movff	i1___ftmul@f3_as_product+1,i1___ftpack@arg+1
 26107  0036AA  C074  F062         	movff	i1___ftmul@f3_as_product+2,i1___ftpack@arg+2
 26108  0036AE  C071  F063         	movff	i1___ftmul@exp,i1___ftpack@exp
 26109  0036B2  C076  F064         	movff	i1___ftmul@sign,i1___ftpack@sign
 26110  0036B6  EC52  F022         	call	i1___ftpack	;wreg free
 26111  0036BA  C060  F068         	movff	?i1___ftpack,?i1___ftmul
 26112  0036BE  C061  F069         	movff	?i1___ftpack+1,?i1___ftmul+1
 26113  0036C2  C062  F06A         	movff	?i1___ftpack+2,?i1___ftmul+2
 26114  0036C6  0012               	return	
 26115  0036C8                     __end_ofi1___ftmul:
 26116                           	opt stack 0
 26117                           pclatu	equ	0xFFB
 26118                           pclath	equ	0xFFA
 26119                           tblptru	equ	0xFF8
 26120                           tblptrh	equ	0xFF7
 26121                           tblptrl	equ	0xFF6
 26122                           tablat	equ	0xFF5
 26123                           prodh	equ	0xFF4
 26124                           prodl	equ	0xFF3
 26125                           intcon	equ	0xFF2
 26126                           postinc0	equ	0xFEE
 26127                           fsr0h	equ	0xFEA
 26128                           fsr0l	equ	0xFE9
 26129                           wreg	equ	0xFE8
 26130                           postdec1	equ	0xFE5
 26131                           fsr1h	equ	0xFE2
 26132                           fsr1l	equ	0xFE1
 26133                           bsr	equ	0xFE0
 26134                           indf2	equ	0xFDF
 26135                           postinc2	equ	0xFDE
 26136                           postdec2	equ	0xFDD
 26137                           plusw2	equ	0xFDB
 26138                           fsr2h	equ	0xFDA
 26139                           fsr2l	equ	0xFD9
 26140                           status	equ	0xFD8
 26141                           
 26142 ;; *************** function i1___ftpack *****************
 26143 ;; Defined at:
 26144 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 26145 ;; Parameters:    Size  Location     Type
 26146 ;;  arg             3    0[BANK0 ] unsigned um
 26147 ;;  exp             1    3[BANK0 ] unsigned char 
 26148 ;;  sign            1    4[BANK0 ] unsigned char 
 26149 ;; Auto vars:     Size  Location     Type
 26150 ;;		None
 26151 ;; Return value:  Size  Location     Type
 26152 ;;                  3    0[BANK0 ] float 
 26153 ;; Registers used:
 26154 ;;		wreg, status,2, status,0
 26155 ;; Tracked objects:
 26156 ;;		On entry : 0/0
 26157 ;;		On exit  : 0/0
 26158 ;;		Unchanged: 0/0
 26159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26160 ;;      Params:         0       5       0       0       0       0       0
 26161 ;;      Locals:         0       0       0       0       0       0       0
 26162 ;;      Temps:          0       3       0       0       0       0       0
 26163 ;;      Totals:         0       8       0       0       0       0       0
 26164 ;;Total ram usage:        8 bytes
 26165 ;; Hardware stack levels used:    1
 26166 ;; Hardware stack levels required when called:    4
 26167 ;; This function calls:
 26168 ;;		Nothing
 26169 ;; This function is called by:
 26170 ;;		i1___altoft
 26171 ;;		i1___ftadd
 26172 ;;		i1___ftdiv
 26173 ;;		i1___ftmul
 26174 ;; This function uses a non-reentrant model
 26175 ;;
 26176                           
 26177                           	psect	text110
 26178  0044A4                     __ptext110:
 26179                           	opt stack 0
 26180  0044A4                     i1___ftpack:
 26181                           	opt stack 11
 26182                           
 26183                           ;incstack = 0
 26184  0044A4  0100               	movlb	0	; () banked
 26185  0044A6  5163               	movf	i1___ftpack@exp& (0+255),w,b
 26186  0044A8  0100               	movlb	0	; () banked
 26187  0044AA  B4D8               	btfsc	status,2,c
 26188  0044AC  D008               	goto	i1l9231
 26189                           
 26190                           ; BSR set to: 0
 26191  0044AE  0100               	movlb	0	; () banked
 26192  0044B0  5160               	movf	i1___ftpack@arg& (0+255),w,b
 26193  0044B2  0100               	movlb	0	; () banked
 26194  0044B4  1161               	iorwf	(i1___ftpack@arg+1)& (0+255),w,b
 26195  0044B6  0100               	movlb	0	; () banked
 26196  0044B8  1162               	iorwf	(i1___ftpack@arg+2)& (0+255),w,b
 26197  0044BA  A4D8               	btfss	status,2,c
 26198  0044BC  D011               	goto	i1l9237
 26199  0044BE                     i1l9231:
 26200                           
 26201                           ; BSR set to: 0
 26202  0044BE  0E00               	movlw	0
 26203  0044C0  0100               	movlb	0	; () banked
 26204  0044C2  6F60               	movwf	?i1___ftpack& (0+255),b
 26205  0044C4  0E00               	movlw	0
 26206  0044C6  0100               	movlb	0	; () banked
 26207  0044C8  6F61               	movwf	(?i1___ftpack+1)& (0+255),b
 26208  0044CA  0E00               	movlw	0
 26209  0044CC  0100               	movlb	0	; () banked
 26210  0044CE  6F62               	movwf	(?i1___ftpack+2)& (0+255),b
 26211                           
 26212                           ; BSR set to: 0
 26213  0044D0  0012               	return	
 26214  0044D2                     i1l9235:
 26215                           
 26216                           ; BSR set to: 0
 26217  0044D2  0100               	movlb	0	; () banked
 26218  0044D4  2B63               	incf	i1___ftpack@exp& (0+255),f,b
 26219  0044D6  0100               	movlb	0	; () banked
 26220  0044D8  90D8               	bcf	status,0,c
 26221  0044DA  3362               	rrcf	(i1___ftpack@arg+2)& (0+255),f,b
 26222  0044DC  3361               	rrcf	(i1___ftpack@arg+1)& (0+255),f,b
 26223  0044DE  3360               	rrcf	i1___ftpack@arg& (0+255),f,b
 26224  0044E0                     i1l9237:
 26225                           
 26226                           ; BSR set to: 0
 26227  0044E0  0E00               	movlw	0
 26228  0044E2  0100               	movlb	0	; () banked
 26229  0044E4  1560               	andwf	i1___ftpack@arg& (0+255),w,b
 26230  0044E6  0100               	movlb	0	; () banked
 26231  0044E8  6F65               	movwf	??i1___ftpack& (0+255),b
 26232  0044EA  0E00               	movlw	0
 26233  0044EC  0100               	movlb	0	; () banked
 26234  0044EE  1561               	andwf	(i1___ftpack@arg+1)& (0+255),w,b
 26235  0044F0  0100               	movlb	0	; () banked
 26236  0044F2  6F66               	movwf	(??i1___ftpack+1)& (0+255),b
 26237  0044F4  0EFE               	movlw	254
 26238  0044F6  0100               	movlb	0	; () banked
 26239  0044F8  1562               	andwf	(i1___ftpack@arg+2)& (0+255),w,b
 26240  0044FA  0100               	movlb	0	; () banked
 26241  0044FC  6F67               	movwf	(??i1___ftpack+2)& (0+255),b
 26242  0044FE  0100               	movlb	0	; () banked
 26243  004500  5165               	movf	??i1___ftpack& (0+255),w,b
 26244  004502  0100               	movlb	0	; () banked
 26245  004504  1166               	iorwf	(??i1___ftpack+1)& (0+255),w,b
 26246  004506  0100               	movlb	0	; () banked
 26247  004508  1167               	iorwf	(??i1___ftpack+2)& (0+255),w,b
 26248  00450A  B4D8               	btfsc	status,2,c
 26249  00450C  D011               	goto	i1l9243
 26250  00450E  D7E1               	goto	i1l9235
 26251  004510                     i1l9239:
 26252                           
 26253                           ; BSR set to: 0
 26254  004510  0100               	movlb	0	; () banked
 26255  004512  2B63               	incf	i1___ftpack@exp& (0+255),f,b
 26256                           
 26257                           ; BSR set to: 0
 26258  004514  0E01               	movlw	1
 26259  004516  0100               	movlb	0	; () banked
 26260  004518  2760               	addwf	i1___ftpack@arg& (0+255),f,b
 26261  00451A  0E00               	movlw	0
 26262  00451C  0100               	movlb	0	; () banked
 26263  00451E  2361               	addwfc	(i1___ftpack@arg+1)& (0+255),f,b
 26264  004520  0E00               	movlw	0
 26265  004522  0100               	movlb	0	; () banked
 26266  004524  2362               	addwfc	(i1___ftpack@arg+2)& (0+255),f,b
 26267  004526  0100               	movlb	0	; () banked
 26268  004528  90D8               	bcf	status,0,c
 26269  00452A  3362               	rrcf	(i1___ftpack@arg+2)& (0+255),f,b
 26270  00452C  3361               	rrcf	(i1___ftpack@arg+1)& (0+255),f,b
 26271  00452E  3360               	rrcf	i1___ftpack@arg& (0+255),f,b
 26272  004530                     i1l9243:
 26273                           
 26274                           ; BSR set to: 0
 26275  004530  0E00               	movlw	0
 26276  004532  0100               	movlb	0	; () banked
 26277  004534  1560               	andwf	i1___ftpack@arg& (0+255),w,b
 26278  004536  0100               	movlb	0	; () banked
 26279  004538  6F65               	movwf	??i1___ftpack& (0+255),b
 26280  00453A  0E00               	movlw	0
 26281  00453C  0100               	movlb	0	; () banked
 26282  00453E  1561               	andwf	(i1___ftpack@arg+1)& (0+255),w,b
 26283  004540  0100               	movlb	0	; () banked
 26284  004542  6F66               	movwf	(??i1___ftpack+1)& (0+255),b
 26285  004544  0EFF               	movlw	255
 26286  004546  0100               	movlb	0	; () banked
 26287  004548  1562               	andwf	(i1___ftpack@arg+2)& (0+255),w,b
 26288  00454A  0100               	movlb	0	; () banked
 26289  00454C  6F67               	movwf	(??i1___ftpack+2)& (0+255),b
 26290  00454E  0100               	movlb	0	; () banked
 26291  004550  5165               	movf	??i1___ftpack& (0+255),w,b
 26292  004552  0100               	movlb	0	; () banked
 26293  004554  1166               	iorwf	(??i1___ftpack+1)& (0+255),w,b
 26294  004556  0100               	movlb	0	; () banked
 26295  004558  1167               	iorwf	(??i1___ftpack+2)& (0+255),w,b
 26296  00455A  B4D8               	btfsc	status,2,c
 26297  00455C  D008               	goto	i1l9247
 26298  00455E  D7D8               	goto	i1l9239
 26299  004560                     i1l9245:
 26300                           
 26301                           ; BSR set to: 0
 26302  004560  0100               	movlb	0	; () banked
 26303  004562  0763               	decf	i1___ftpack@exp& (0+255),f,b
 26304  004564  0100               	movlb	0	; () banked
 26305  004566  90D8               	bcf	status,0,c
 26306  004568  3760               	rlcf	i1___ftpack@arg& (0+255),f,b
 26307  00456A  3761               	rlcf	(i1___ftpack@arg+1)& (0+255),f,b
 26308  00456C  3762               	rlcf	(i1___ftpack@arg+2)& (0+255),f,b
 26309  00456E                     i1l9247:
 26310                           
 26311                           ; BSR set to: 0
 26312  00456E  0100               	movlb	0	; () banked
 26313  004570  BF61               	btfsc	(i1___ftpack@arg+1)& (0+255),7,b
 26314  004572  D004               	goto	i1l1264
 26315                           
 26316                           ; BSR set to: 0
 26317  004574  0E02               	movlw	2
 26318  004576  0100               	movlb	0	; () banked
 26319  004578  6163               	cpfslt	i1___ftpack@exp& (0+255),b
 26320  00457A  D7F2               	goto	i1l9245
 26321  00457C                     i1l1264:
 26322                           
 26323                           ; BSR set to: 0
 26324  00457C  0100               	movlb	0	; () banked
 26325  00457E  B163               	btfsc	i1___ftpack@exp& (0+255),0,b
 26326  004580  D002               	goto	i1l9253
 26327                           
 26328                           ; BSR set to: 0
 26329  004582  0100               	movlb	0	; () banked
 26330  004584  9F61               	bcf	(i1___ftpack@arg+1)& (0+255),7,b
 26331  004586                     i1l9253:
 26332                           
 26333                           ; BSR set to: 0
 26334  004586  0100               	movlb	0	; () banked
 26335  004588  90D8               	bcf	status,0,c
 26336  00458A  3363               	rrcf	i1___ftpack@exp& (0+255),f,b
 26337  00458C  0100               	movlb	0	; () banked
 26338  00458E  5163               	movf	i1___ftpack@exp& (0+255),w,b
 26339  004590  0100               	movlb	0	; () banked
 26340  004592  1362               	iorwf	(i1___ftpack@arg+2)& (0+255),f,b
 26341                           
 26342                           ; BSR set to: 0
 26343  004594  0100               	movlb	0	; () banked
 26344  004596  5164               	movf	i1___ftpack@sign& (0+255),w,b
 26345  004598  0100               	movlb	0	; () banked
 26346  00459A  B4D8               	btfsc	status,2,c
 26347  00459C  D002               	goto	i1l9259
 26348                           
 26349                           ; BSR set to: 0
 26350  00459E  0100               	movlb	0	; () banked
 26351  0045A0  8F62               	bsf	(i1___ftpack@arg+2)& (0+255),7,b
 26352  0045A2                     i1l9259:
 26353                           
 26354                           ; BSR set to: 0
 26355  0045A2  C060  F060         	movff	i1___ftpack@arg,?i1___ftpack
 26356  0045A6  C061  F061         	movff	i1___ftpack@arg+1,?i1___ftpack+1
 26357  0045AA  C062  F062         	movff	i1___ftpack@arg+2,?i1___ftpack+2
 26358  0045AE  0012               	return	
 26359  0045B0                     __end_ofi1___ftpack:
 26360                           	opt stack 0
 26361                           pclatu	equ	0xFFB
 26362                           pclath	equ	0xFFA
 26363                           tblptru	equ	0xFF8
 26364                           tblptrh	equ	0xFF7
 26365                           tblptrl	equ	0xFF6
 26366                           tablat	equ	0xFF5
 26367                           prodh	equ	0xFF4
 26368                           prodl	equ	0xFF3
 26369                           intcon	equ	0xFF2
 26370                           postinc0	equ	0xFEE
 26371                           fsr0h	equ	0xFEA
 26372                           fsr0l	equ	0xFE9
 26373                           wreg	equ	0xFE8
 26374                           postdec1	equ	0xFE5
 26375                           fsr1h	equ	0xFE2
 26376                           fsr1l	equ	0xFE1
 26377                           bsr	equ	0xFE0
 26378                           indf2	equ	0xFDF
 26379                           postinc2	equ	0xFDE
 26380                           postdec2	equ	0xFDD
 26381                           plusw2	equ	0xFDB
 26382                           fsr2h	equ	0xFDA
 26383                           fsr2l	equ	0xFD9
 26384                           status	equ	0xFD8
 26385                           
 26386 ;; *************** function _T2int *****************
 26387 ;; Defined at:
 26388 ;;		line 46 in file "source/PWMConfig.h"
 26389 ;; Parameters:    Size  Location     Type
 26390 ;;		None
 26391 ;; Auto vars:     Size  Location     Type
 26392 ;;		None
 26393 ;; Return value:  Size  Location     Type
 26394 ;;                  1    wreg      void 
 26395 ;; Registers used:
 26396 ;;		wreg, status,2, status,0, cstack
 26397 ;; Tracked objects:
 26398 ;;		On entry : 0/0
 26399 ;;		On exit  : 0/0
 26400 ;;		Unchanged: 0/0
 26401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26402 ;;      Params:         0       0       0       0       0       0       0
 26403 ;;      Locals:         0       0       0       0       0       0       0
 26404 ;;      Temps:          0       1       0       0       0       0       0
 26405 ;;      Totals:         0       1       0       0       0       0       0
 26406 ;;Total ram usage:        1 bytes
 26407 ;; Hardware stack levels used:    1
 26408 ;; Hardware stack levels required when called:    6
 26409 ;; This function calls:
 26410 ;;		_saveProcessState
 26411 ;;		i1_delay_ms
 26412 ;;		i1_setPWM2duty
 26413 ;; This function is called by:
 26414 ;;		_isr
 26415 ;; This function uses a non-reentrant model
 26416 ;;
 26417                           
 26418                           	psect	text111
 26419  0030EA                     __ptext111:
 26420                           	opt stack 0
 26421  0030EA                     _T2int:
 26422                           	opt stack 13
 26423                           
 26424                           ;PWMConfig.h: 47: if(PORTAbits.RA7 && !lastSttFC1) {
 26425                           
 26426                           ; BSR set to: 0
 26427                           ;incstack = 0
 26428  0030EA  AE80               	btfss	3968,7,c	;volatile
 26429  0030EC  D039               	goto	i1l482
 26430  0030EE  503F               	movf	_lastSttFC1,w,c
 26431  0030F0  A4D8               	btfss	status,2,c
 26432  0030F2  D036               	goto	i1l482
 26433                           
 26434                           ;PWMConfig.h: 48: lastSttFC1 = 0;
 26435  0030F4  0E00               	movlw	0
 26436  0030F6  6E3F               	movwf	_lastSttFC1,c
 26437                           
 26438                           ;PWMConfig.h: 49: setPWM2duty(0);
 26439  0030F8  0E00               	movlw	0
 26440  0030FA  0100               	movlb	0	; () banked
 26441  0030FC  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 26442  0030FE  0E00               	movlw	0
 26443  003100  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 26444  003102  ECB9  F02D         	call	i1_setPWM2duty	;wreg free
 26445                           
 26446                           ;PWMConfig.h: 50: bladeIsUP = 1;
 26447  003106  0E01               	movlw	1
 26448  003108  0100               	movlb	0	; () banked
 26449  00310A  6FC9               	movwf	_bladeIsUP& (0+255),b
 26450                           
 26451                           ; BSR set to: 0
 26452                           ;PWMConfig.h: 51: processTimer = 0;
 26453  00310C  0E00               	movlw	0
 26454  00310E  6E2B               	movwf	_processTimer,c
 26455  003110  0E00               	movlw	0
 26456  003112  6E2C               	movwf	_processTimer+1,c
 26457  003114  0E00               	movlw	0
 26458  003116  6E2D               	movwf	_processTimer+2,c
 26459  003118  0E00               	movlw	0
 26460  00311A  6E2E               	movwf	_processTimer+3,c
 26461                           
 26462                           ; BSR set to: 0
 26463                           ;PWMConfig.h: 52: if(processState >= numCortes) {
 26464  00311C  0100               	movlb	0	; () banked
 26465  00311E  51B8               	movf	_numCortes& (0+255),w,b
 26466  003120  5C35               	subwf	_processState,w,c
 26467  003122  5036               	movf	_processState+1,w,c
 26468  003124  0A80               	xorlw	128
 26469  003126  0100               	movlb	0	; () banked
 26470  003128  6F66               	movwf	??_T2int& (0+255),b
 26471  00312A  0100               	movlb	0	; () banked
 26472  00312C  51B9               	movf	(_numCortes+1)& (0+255),w,b
 26473  00312E  0A80               	xorlw	128
 26474  003130  0100               	movlb	0	; () banked
 26475  003132  5966               	subwfb	??_T2int& (0+255),w,b
 26476  003134  A0D8               	btfss	status,0,c
 26477  003136  D00C               	goto	i1l12105
 26478                           
 26479                           ; BSR set to: 0
 26480                           ;PWMConfig.h: 53: ProcessStarted = 0;
 26481  003138  0E00               	movlw	0
 26482  00313A  6E3A               	movwf	_ProcessStarted,c
 26483                           
 26484                           ; BSR set to: 0
 26485                           ;PWMConfig.h: 54: saveProcessState();
 26486  00313C  ECD8  F034         	call	_saveProcessState	;wreg free
 26487                           
 26488                           ;PWMConfig.h: 55: if(actualScreen == 6)
 26489  003140  0E06               	movlw	6
 26490  003142  0101               	movlb	1	; () banked
 26491  003144  19BA               	xorwf	_actualScreen& (0+255),w,b
 26492  003146  A4D8               	btfss	status,2,c
 26493  003148  D003               	goto	i1l12105
 26494                           
 26495                           ; BSR set to: 1
 26496                           ;PWMConfig.h: 56: actualScreen = 12;
 26497  00314A  0E0C               	movlw	12
 26498  00314C  0101               	movlb	1	; () banked
 26499  00314E  6FBA               	movwf	_actualScreen& (0+255),b
 26500  003150                     i1l12105:
 26501                           
 26502                           ;PWMConfig.h: 57: }
 26503                           ;PWMConfig.h: 58: delay_ms(200);
 26504  003150  0E00               	movlw	0
 26505  003152  0100               	movlb	0	; () banked
 26506  003154  6F61               	movwf	(i1delay_ms@del+1)& (0+255),b
 26507  003156  0EC8               	movlw	200
 26508  003158  6F60               	movwf	i1delay_ms@del& (0+255),b
 26509  00315A  EC2B  F034         	call	i1_delay_ms	;wreg free
 26510                           
 26511                           ;PWMConfig.h: 59: }else if(!PORTAbits.RA7 && lastSttFC1) {
 26512  00315E  D02F               	goto	i1l12133
 26513  003160                     i1l482:
 26514  003160  BE80               	btfsc	3968,7,c	;volatile
 26515  003162  D00D               	goto	i1l12113
 26516  003164  503F               	movf	_lastSttFC1,w,c
 26517  003166  B4D8               	btfsc	status,2,c
 26518  003168  D00A               	goto	i1l12113
 26519                           
 26520                           ;PWMConfig.h: 60: lastSttFC1 = 1;
 26521  00316A  0E01               	movlw	1
 26522  00316C  6E3F               	movwf	_lastSttFC1,c
 26523                           
 26524                           ;PWMConfig.h: 64: delay_ms(50);
 26525  00316E  0E00               	movlw	0
 26526  003170  0100               	movlb	0	; () banked
 26527  003172  6F61               	movwf	(i1delay_ms@del+1)& (0+255),b
 26528  003174  0E32               	movlw	50
 26529  003176  6F60               	movwf	i1delay_ms@del& (0+255),b
 26530  003178  EC2B  F034         	call	i1_delay_ms	;wreg free
 26531                           
 26532                           ;PWMConfig.h: 65: }else if(PORTAbits.RA7 == lastSttFC1) {
 26533  00317C  D020               	goto	i1l12133
 26534  00317E                     i1l12113:
 26535  00317E  AE80               	btfss	3968,7,c	;volatile
 26536  003180  D002               	goto	i1u1805_20
 26537  003182  0E01               	movlw	1
 26538  003184  D001               	goto	i1u1805_26
 26539  003186                     i1u1805_20:
 26540  003186  0E00               	movlw	0
 26541  003188                     i1u1805_26:
 26542  003188  183F               	xorwf	_lastSttFC1,w,c
 26543  00318A  A4D8               	btfss	status,2,c
 26544  00318C  D018               	goto	i1l12133
 26545                           
 26546                           ;PWMConfig.h: 66: if(!PORTAbits.RA7) {
 26547  00318E  BE80               	btfsc	3968,7,c	;volatile
 26548  003190  D003               	goto	i1l12119
 26549                           
 26550                           ;PWMConfig.h: 67: holdFC1cont = 0;
 26551  003192  0E00               	movlw	0
 26552  003194  6E3D               	movwf	_holdFC1cont,c
 26553                           
 26554                           ;PWMConfig.h: 69: }else {
 26555  003196  D013               	goto	i1l12133
 26556  003198                     i1l12119:
 26557                           
 26558                           ;PWMConfig.h: 70: if(!FC1securLock)
 26559  003198  5038               	movf	_FC1securLock,w,c
 26560  00319A  B4D8               	btfsc	status,2,c
 26561                           
 26562                           ;PWMConfig.h: 71: holdFC1cont++;
 26563  00319C  2A3D               	incf	_holdFC1cont,f,c
 26564                           
 26565                           ;PWMConfig.h: 72: if(holdFC1cont > 9) {
 26566  00319E  0E09               	movlw	9
 26567  0031A0  643D               	cpfsgt	_holdFC1cont,c
 26568  0031A2  D006               	goto	i1l12131
 26569                           
 26570                           ;PWMConfig.h: 73: if(holdFC1cont < 26) {
 26571  0031A4  0E1A               	movlw	26
 26572  0031A6  603D               	cpfslt	_holdFC1cont,c
 26573  0031A8  D001               	goto	i1l12129
 26574  0031AA  D002               	goto	i1l12131
 26575  0031AC                     i1l12129:
 26576                           
 26577                           ;PWMConfig.h: 76: FC1securLock = 1;
 26578  0031AC  0E01               	movlw	1
 26579  0031AE  6E38               	movwf	_FC1securLock,c
 26580  0031B0                     i1l12131:
 26581                           
 26582                           ;PWMConfig.h: 77: }
 26583                           ;PWMConfig.h: 78: delay_ms(200);
 26584  0031B0  0E00               	movlw	0
 26585  0031B2  0100               	movlb	0	; () banked
 26586  0031B4  6F61               	movwf	(i1delay_ms@del+1)& (0+255),b
 26587  0031B6  0EC8               	movlw	200
 26588  0031B8  6F60               	movwf	i1delay_ms@del& (0+255),b
 26589  0031BA  EC2B  F034         	call	i1_delay_ms	;wreg free
 26590  0031BE                     i1l12133:
 26591                           
 26592                           ;PWMConfig.h: 79: }
 26593                           ;PWMConfig.h: 80: }
 26594                           ;PWMConfig.h: 81: if(PORTAbits.RA6 && !lastSttFC2) {
 26595  0031BE  AC80               	btfss	3968,6,c	;volatile
 26596  0031C0  D031               	goto	i1l495
 26597  0031C2  5040               	movf	_lastSttFC2,w,c
 26598  0031C4  A4D8               	btfss	status,2,c
 26599  0031C6  D02E               	goto	i1l495
 26600                           
 26601                           ;PWMConfig.h: 82: lastSttFC2 = 0;
 26602  0031C8  0E00               	movlw	0
 26603  0031CA  6E40               	movwf	_lastSttFC2,c
 26604                           
 26605                           ;PWMConfig.h: 83: setPWM2duty(0);
 26606  0031CC  0E00               	movlw	0
 26607  0031CE  0100               	movlb	0	; () banked
 26608  0031D0  6F61               	movwf	(i1setPWM2duty@actuator+1)& (0+255),b
 26609  0031D2  0E00               	movlw	0
 26610  0031D4  6F60               	movwf	i1setPWM2duty@actuator& (0+255),b
 26611  0031D6  ECB9  F02D         	call	i1_setPWM2duty	;wreg free
 26612                           
 26613                           ;PWMConfig.h: 84: bladeIsUP = 0;
 26614  0031DA  0E00               	movlw	0
 26615  0031DC  0100               	movlb	0	; () banked
 26616  0031DE  6FC9               	movwf	_bladeIsUP& (0+255),b
 26617                           
 26618                           ; BSR set to: 0
 26619                           ;PWMConfig.h: 85: processTimer = 0;
 26620  0031E0  0E00               	movlw	0
 26621  0031E2  6E2B               	movwf	_processTimer,c
 26622  0031E4  0E00               	movlw	0
 26623  0031E6  6E2C               	movwf	_processTimer+1,c
 26624  0031E8  0E00               	movlw	0
 26625  0031EA  6E2D               	movwf	_processTimer+2,c
 26626  0031EC  0E00               	movlw	0
 26627  0031EE  6E2E               	movwf	_processTimer+3,c
 26628                           
 26629                           ; BSR set to: 0
 26630                           ;PWMConfig.h: 86: processState++;
 26631  0031F0  4A35               	infsnz	_processState,f,c
 26632  0031F2  2A36               	incf	_processState+1,f,c
 26633                           
 26634                           ; BSR set to: 0
 26635                           ;PWMConfig.h: 87: saveProcessState();
 26636  0031F4  ECD8  F034         	call	_saveProcessState	;wreg free
 26637                           
 26638                           ;PWMConfig.h: 88: if(processState >= numCortes)
 26639  0031F8  0100               	movlb	0	; () banked
 26640  0031FA  51B8               	movf	_numCortes& (0+255),w,b
 26641  0031FC  5C35               	subwf	_processState,w,c
 26642  0031FE  5036               	movf	_processState+1,w,c
 26643  003200  0A80               	xorlw	128
 26644  003202  0100               	movlb	0	; () banked
 26645  003204  6F66               	movwf	??_T2int& (0+255),b
 26646  003206  0100               	movlb	0	; () banked
 26647  003208  51B9               	movf	(_numCortes+1)& (0+255),w,b
 26648  00320A  0A80               	xorlw	128
 26649  00320C  0100               	movlb	0	; () banked
 26650  00320E  5966               	subwfb	??_T2int& (0+255),w,b
 26651  003210  B0D8               	btfsc	status,0,c
 26652                           
 26653                           ; BSR set to: 0
 26654                           ;PWMConfig.h: 89: LATCbits.LATC4 = 0;
 26655  003212  988B               	bcf	3979,4,c	;volatile
 26656                           
 26657                           ; BSR set to: 0
 26658                           ;PWMConfig.h: 90: delay_ms(200);
 26659                           
 26660                           ; BSR set to: 0
 26661  003214  0E00               	movlw	0
 26662  003216  0100               	movlb	0	; () banked
 26663  003218  6F61               	movwf	(i1delay_ms@del+1)& (0+255),b
 26664  00321A  0EC8               	movlw	200
 26665  00321C  6F60               	movwf	i1delay_ms@del& (0+255),b
 26666  00321E  EC2B  F034         	call	i1_delay_ms	;wreg free
 26667                           
 26668                           ;PWMConfig.h: 91: }else if(!PORTAbits.RA6 && lastSttFC2) {
 26669  003222  0012               	return	
 26670  003224                     i1l495:
 26671  003224  BC80               	btfsc	3968,6,c	;volatile
 26672  003226  D00D               	goto	i1l12161
 26673  003228  5040               	movf	_lastSttFC2,w,c
 26674  00322A  B4D8               	btfsc	status,2,c
 26675  00322C  D00A               	goto	i1l12161
 26676                           
 26677                           ;PWMConfig.h: 92: lastSttFC2 = 1;
 26678  00322E  0E01               	movlw	1
 26679  003230  6E40               	movwf	_lastSttFC2,c
 26680                           
 26681                           ;PWMConfig.h: 96: delay_ms(50);
 26682  003232  0E00               	movlw	0
 26683  003234  0100               	movlb	0	; () banked
 26684  003236  6F61               	movwf	(i1delay_ms@del+1)& (0+255),b
 26685  003238  0E32               	movlw	50
 26686  00323A  6F60               	movwf	i1delay_ms@del& (0+255),b
 26687  00323C  EC2B  F034         	call	i1_delay_ms	;wreg free
 26688                           
 26689                           ;PWMConfig.h: 97: }else if(PORTAbits.RA6 == lastSttFC2) {
 26690  003240  0012               	return	
 26691  003242                     i1l12161:
 26692  003242  AC80               	btfss	3968,6,c	;volatile
 26693  003244  D002               	goto	i1u1816_20
 26694  003246  0E01               	movlw	1
 26695  003248  D001               	goto	i1u1816_26
 26696  00324A                     i1u1816_20:
 26697  00324A  0E00               	movlw	0
 26698  00324C                     i1u1816_26:
 26699  00324C  1840               	xorwf	_lastSttFC2,w,c
 26700  00324E  A4D8               	btfss	status,2,c
 26701  003250  0012               	return	
 26702                           
 26703                           ;PWMConfig.h: 98: if(!PORTAbits.RA6) {
 26704  003252  BC80               	btfsc	3968,6,c	;volatile
 26705  003254  D003               	goto	i1l12167
 26706                           
 26707                           ;PWMConfig.h: 99: holdFC2cont = 0;
 26708  003256  0E00               	movlw	0
 26709  003258  6E3E               	movwf	_holdFC2cont,c
 26710                           
 26711                           ;PWMConfig.h: 101: }else {
 26712  00325A  0012               	return	
 26713  00325C                     i1l12167:
 26714                           
 26715                           ;PWMConfig.h: 102: if(!FC2securLock)
 26716  00325C  5039               	movf	_FC2securLock,w,c
 26717  00325E  B4D8               	btfsc	status,2,c
 26718                           
 26719                           ;PWMConfig.h: 103: holdFC2cont++;
 26720  003260  2A3E               	incf	_holdFC2cont,f,c
 26721                           
 26722                           ;PWMConfig.h: 104: if(holdFC2cont > 9) {
 26723  003262  0E09               	movlw	9
 26724  003264  643E               	cpfsgt	_holdFC2cont,c
 26725  003266  D006               	goto	i1l12179
 26726                           
 26727                           ;PWMConfig.h: 105: if(holdFC2cont < 26) {
 26728  003268  0E1A               	movlw	26
 26729  00326A  603E               	cpfslt	_holdFC2cont,c
 26730  00326C  D001               	goto	i1l12177
 26731  00326E  D002               	goto	i1l12179
 26732  003270                     i1l12177:
 26733                           
 26734                           ;PWMConfig.h: 108: FC2securLock = 1;
 26735  003270  0E01               	movlw	1
 26736  003272  6E39               	movwf	_FC2securLock,c
 26737  003274                     i1l12179:
 26738                           
 26739                           ;PWMConfig.h: 109: }
 26740                           ;PWMConfig.h: 110: delay_ms(200);
 26741  003274  0E00               	movlw	0
 26742  003276  0100               	movlb	0	; () banked
 26743  003278  6F61               	movwf	(i1delay_ms@del+1)& (0+255),b
 26744  00327A  0EC8               	movlw	200
 26745  00327C  6F60               	movwf	i1delay_ms@del& (0+255),b
 26746  00327E  EC2B  F034         	call	i1_delay_ms	;wreg free
 26747  003282  0012               	return	
 26748  003284                     __end_of_T2int:
 26749                           	opt stack 0
 26750                           pclatu	equ	0xFFB
 26751                           pclath	equ	0xFFA
 26752                           tblptru	equ	0xFF8
 26753                           tblptrh	equ	0xFF7
 26754                           tblptrl	equ	0xFF6
 26755                           tablat	equ	0xFF5
 26756                           prodh	equ	0xFF4
 26757                           prodl	equ	0xFF3
 26758                           intcon	equ	0xFF2
 26759                           postinc0	equ	0xFEE
 26760                           fsr0h	equ	0xFEA
 26761                           fsr0l	equ	0xFE9
 26762                           wreg	equ	0xFE8
 26763                           postdec1	equ	0xFE5
 26764                           fsr1h	equ	0xFE2
 26765                           fsr1l	equ	0xFE1
 26766                           bsr	equ	0xFE0
 26767                           indf2	equ	0xFDF
 26768                           postinc2	equ	0xFDE
 26769                           postdec2	equ	0xFDD
 26770                           plusw2	equ	0xFDB
 26771                           fsr2h	equ	0xFDA
 26772                           fsr2l	equ	0xFD9
 26773                           status	equ	0xFD8
 26774                           
 26775 ;; *************** function i1_setPWM2duty *****************
 26776 ;; Defined at:
 26777 ;;		line 34 in file "source/PWMConfig.h"
 26778 ;; Parameters:    Size  Location     Type
 26779 ;;  actuator        2    0[BANK0 ] short 
 26780 ;; Auto vars:     Size  Location     Type
 26781 ;;  setPWM2duty     2    4[BANK0 ] short 
 26782 ;; Return value:  Size  Location     Type
 26783 ;;                  1    wreg      void 
 26784 ;; Registers used:
 26785 ;;		wreg, status,2, status,0
 26786 ;; Tracked objects:
 26787 ;;		On entry : 0/0
 26788 ;;		On exit  : 0/0
 26789 ;;		Unchanged: 0/0
 26790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26791 ;;      Params:         0       2       0       0       0       0       0
 26792 ;;      Locals:         0       2       0       0       0       0       0
 26793 ;;      Temps:          0       2       0       0       0       0       0
 26794 ;;      Totals:         0       6       0       0       0       0       0
 26795 ;;Total ram usage:        6 bytes
 26796 ;; Hardware stack levels used:    1
 26797 ;; Hardware stack levels required when called:    4
 26798 ;; This function calls:
 26799 ;;		Nothing
 26800 ;; This function is called by:
 26801 ;;		_T2int
 26802 ;;		i1_pressENTER
 26803 ;;		i1_longPressENTER
 26804 ;; This function uses a non-reentrant model
 26805 ;;
 26806                           
 26807                           	psect	text112
 26808  005B72                     __ptext112:
 26809                           	opt stack 0
 26810  005B72                     i1_setPWM2duty:
 26811                           	opt stack 13
 26812                           
 26813                           ;PWMConfig.h: 35: short act = 400;
 26814                           
 26815                           ;incstack = 0
 26816  005B72  0E01               	movlw	1
 26817  005B74  0100               	movlb	0	; () banked
 26818  005B76  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 26819  005B78  0E90               	movlw	144
 26820  005B7A  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 26821                           
 26822                           ; BSR set to: 0
 26823                           ;PWMConfig.h: 36: if(actuator > 400)
 26824  005B7C  0100               	movlb	0	; () banked
 26825  005B7E  BF61               	btfsc	(i1setPWM2duty@actuator+1)& (0+255),7,b
 26826  005B80  D00D               	goto	i1l10681
 26827  005B82  0E91               	movlw	145
 26828  005B84  0100               	movlb	0	; () banked
 26829  005B86  5D60               	subwf	i1setPWM2duty@actuator& (0+255),w,b
 26830  005B88  0E01               	movlw	1
 26831  005B8A  0100               	movlb	0	; () banked
 26832  005B8C  5961               	subwfb	(i1setPWM2duty@actuator+1)& (0+255),w,b
 26833  005B8E  A0D8               	btfss	status,0,c
 26834  005B90  D005               	goto	i1l10681
 26835                           
 26836                           ; BSR set to: 0
 26837                           ;PWMConfig.h: 37: act = 800;
 26838  005B92  0E03               	movlw	3
 26839  005B94  0100               	movlb	0	; () banked
 26840  005B96  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 26841  005B98  0E20               	movlw	32
 26842  005B9A  D00F               	goto	L9
 26843  005B9C                     i1l10681:
 26844                           
 26845                           ; BSR set to: 0
 26846                           ;PWMConfig.h: 38: else if(actuator < -400)
 26847  005B9C  0100               	movlb	0	; () banked
 26848  005B9E  AF61               	btfss	(i1setPWM2duty@actuator+1)& (0+255),7,b
 26849  005BA0  D00E               	goto	i1l10685
 26850  005BA2  0E70               	movlw	112
 26851  005BA4  0100               	movlb	0	; () banked
 26852  005BA6  5D60               	subwf	i1setPWM2duty@actuator& (0+255),w,b
 26853  005BA8  0EFE               	movlw	254
 26854  005BAA  0100               	movlb	0	; () banked
 26855  005BAC  5961               	subwfb	(i1setPWM2duty@actuator+1)& (0+255),w,b
 26856  005BAE  B0D8               	btfsc	status,0,c
 26857  005BB0  D006               	goto	i1l10685
 26858                           
 26859                           ; BSR set to: 0
 26860                           ;PWMConfig.h: 39: act = 0;
 26861  005BB2  0E00               	movlw	0
 26862  005BB4  0100               	movlb	0	; () banked
 26863  005BB6  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 26864  005BB8  0E00               	movlw	0
 26865  005BBA                     L9:
 26866  005BBA  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 26867  005BBC  D00A               	goto	i1l476
 26868  005BBE                     i1l10685:
 26869                           
 26870                           ; BSR set to: 0
 26871                           ;PWMConfig.h: 40: else
 26872                           ;PWMConfig.h: 41: act = actuator + 400;
 26873  005BBE  0E90               	movlw	144
 26874  005BC0  0100               	movlb	0	; () banked
 26875  005BC2  2560               	addwf	i1setPWM2duty@actuator& (0+255),w,b
 26876  005BC4  0100               	movlb	0	; () banked
 26877  005BC6  6F64               	movwf	i1setPWM2duty@act& (0+255),b
 26878  005BC8  0E01               	movlw	1
 26879  005BCA  0100               	movlb	0	; () banked
 26880  005BCC  2161               	addwfc	(i1setPWM2duty@actuator+1)& (0+255),w,b
 26881  005BCE  0100               	movlb	0	; () banked
 26882  005BD0  6F65               	movwf	(i1setPWM2duty@act+1)& (0+255),b
 26883  005BD2                     i1l476:
 26884                           
 26885                           ; BSR set to: 0
 26886                           ;PWMConfig.h: 42: CCP2CONbits.DC2B = act;
 26887  005BD2  C064  F062         	movff	i1setPWM2duty@act,??i1_setPWM2duty
 26888  005BD6  0100               	movlb	0	; () banked
 26889  005BD8  3B62               	swapf	??i1_setPWM2duty& (0+255),f,b
 26890  005BDA  5066               	movf	3942,w,c	;volatile
 26891  005BDC  0100               	movlb	0	; () banked
 26892  005BDE  1962               	xorwf	??i1_setPWM2duty& (0+255),w,b
 26893  005BE0  0BCF               	andlw	-49
 26894  005BE2  1962               	xorwf	??i1_setPWM2duty& (0+255),w,b
 26895  005BE4  6E66               	movwf	3942,c	;volatile
 26896                           
 26897                           ;PWMConfig.h: 43: CCPR2L = act>>2;
 26898  005BE6  C064  F062         	movff	i1setPWM2duty@act,??i1_setPWM2duty
 26899  005BEA  C065  F063         	movff	i1setPWM2duty@act+1,??i1_setPWM2duty+1
 26900  005BEE  0100               	movlb	0	; () banked
 26901  005BF0  3563               	rlcf	(??i1_setPWM2duty+1)& (0+255),w,b
 26902  005BF2  3363               	rrcf	(??i1_setPWM2duty+1)& (0+255),f,b
 26903  005BF4  3362               	rrcf	??i1_setPWM2duty& (0+255),f,b
 26904  005BF6  0100               	movlb	0	; () banked
 26905  005BF8  3563               	rlcf	(??i1_setPWM2duty+1)& (0+255),w,b
 26906  005BFA  3363               	rrcf	(??i1_setPWM2duty+1)& (0+255),f,b
 26907  005BFC  3362               	rrcf	??i1_setPWM2duty& (0+255),f,b
 26908  005BFE  0100               	movlb	0	; () banked
 26909  005C00  5162               	movf	??i1_setPWM2duty& (0+255),w,b
 26910  005C02  6E67               	movwf	3943,c	;volatile
 26911                           
 26912                           ; BSR set to: 0
 26913  005C04  0012               	return		;funcret
 26914  005C06                     __end_ofi1_setPWM2duty:
 26915                           	opt stack 0
 26916                           pclatu	equ	0xFFB
 26917                           pclath	equ	0xFFA
 26918                           tblptru	equ	0xFF8
 26919                           tblptrh	equ	0xFF7
 26920                           tblptrl	equ	0xFF6
 26921                           tablat	equ	0xFF5
 26922                           prodh	equ	0xFF4
 26923                           prodl	equ	0xFF3
 26924                           intcon	equ	0xFF2
 26925                           postinc0	equ	0xFEE
 26926                           fsr0h	equ	0xFEA
 26927                           fsr0l	equ	0xFE9
 26928                           wreg	equ	0xFE8
 26929                           postdec1	equ	0xFE5
 26930                           fsr1h	equ	0xFE2
 26931                           fsr1l	equ	0xFE1
 26932                           bsr	equ	0xFE0
 26933                           indf2	equ	0xFDF
 26934                           postinc2	equ	0xFDE
 26935                           postdec2	equ	0xFDD
 26936                           plusw2	equ	0xFDB
 26937                           fsr2h	equ	0xFDA
 26938                           fsr2l	equ	0xFD9
 26939                           status	equ	0xFD8
 26940                           
 26941 ;; *************** function i1_delay_ms *****************
 26942 ;; Defined at:
 26943 ;;		line 13 in file "source/../../delay.h"
 26944 ;; Parameters:    Size  Location     Type
 26945 ;;  del             2    0[BANK0 ] int 
 26946 ;; Auto vars:     Size  Location     Type
 26947 ;;  delay_ms        2    3[BANK0 ] int 
 26948 ;; Return value:  Size  Location     Type
 26949 ;;                  1    wreg      void 
 26950 ;; Registers used:
 26951 ;;		wreg, status,2, status,0
 26952 ;; Tracked objects:
 26953 ;;		On entry : 0/0
 26954 ;;		On exit  : 0/0
 26955 ;;		Unchanged: 0/0
 26956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26957 ;;      Params:         0       2       0       0       0       0       0
 26958 ;;      Locals:         0       2       0       0       0       0       0
 26959 ;;      Temps:          0       1       0       0       0       0       0
 26960 ;;      Totals:         0       5       0       0       0       0       0
 26961 ;;Total ram usage:        5 bytes
 26962 ;; Hardware stack levels used:    1
 26963 ;; Hardware stack levels required when called:    4
 26964 ;; This function calls:
 26965 ;;		Nothing
 26966 ;; This function is called by:
 26967 ;;		_T2int
 26968 ;; This function uses a non-reentrant model
 26969 ;;
 26970                           
 26971                           	psect	text113
 26972  006856                     __ptext113:
 26973                           	opt stack 0
 26974  006856                     i1_delay_ms:
 26975                           	opt stack 14
 26976                           
 26977                           ;delay.h: 14: for(int i = 1;i <= del;i++)
 26978                           
 26979                           ; BSR set to: 0
 26980                           ;incstack = 0
 26981  006856  0E00               	movlw	0
 26982  006858  0100               	movlb	0	; () banked
 26983  00685A  6F64               	movwf	(i1delay_ms@i+1)& (0+255),b
 26984  00685C  0E01               	movlw	1
 26985  00685E  6F63               	movwf	i1delay_ms@i& (0+255),b
 26986  006860  D00C               	goto	i1l100
 26987  006862                     i1l11549:
 26988                           
 26989                           ; BSR set to: 0
 26990                           ;delay.h: 15: _delay((unsigned long)((1)*(16000000/4000.0)));
 26991  006862  0E06               	movlw	6
 26992  006864  0100               	movlb	0	; () banked
 26993  006866  6F62               	movwf	??i1_delay_ms& (0+255),b
 26994  006868  0E30               	movlw	48
 26995  00686A                     i1u1897_27:
 26996  00686A  2EE8               	decfsz	wreg,f,c
 26997  00686C  D7FE               	goto	i1u1897_27
 26998  00686E  2F62               	decfsz	??i1_delay_ms& (0+255),f,b
 26999  006870  D7FC               	goto	i1u1897_27
 27000  006872  D000               	nop2	
 27001  006874  0100               	movlb	0	; () banked
 27002  006876  4B63               	infsnz	i1delay_ms@i& (0+255),f,b
 27003  006878  2B64               	incf	(i1delay_ms@i+1)& (0+255),f,b
 27004  00687A                     i1l100:
 27005                           
 27006                           ; BSR set to: 0
 27007  00687A  0100               	movlb	0	; () banked
 27008  00687C  5163               	movf	i1delay_ms@i& (0+255),w,b
 27009  00687E  0100               	movlb	0	; () banked
 27010  006880  5D60               	subwf	i1delay_ms@del& (0+255),w,b
 27011  006882  0100               	movlb	0	; () banked
 27012  006884  5161               	movf	(i1delay_ms@del+1)& (0+255),w,b
 27013  006886  0A80               	xorlw	128
 27014  006888  0100               	movlb	0	; () banked
 27015  00688A  6F62               	movwf	??i1_delay_ms& (0+255),b
 27016  00688C  0100               	movlb	0	; () banked
 27017  00688E  5164               	movf	(i1delay_ms@i+1)& (0+255),w,b
 27018  006890  0A80               	xorlw	128
 27019  006892  0100               	movlb	0	; () banked
 27020  006894  5962               	subwfb	??i1_delay_ms& (0+255),w,b
 27021  006896  A0D8               	btfss	status,0,c
 27022  006898  0012               	return	
 27023  00689A  D7E3               	goto	i1l11549
 27024  00689C                     __end_ofi1_delay_ms:
 27025                           	opt stack 0
 27026                           pclatu	equ	0xFFB
 27027                           pclath	equ	0xFFA
 27028                           tblptru	equ	0xFF8
 27029                           tblptrh	equ	0xFF7
 27030                           tblptrl	equ	0xFF6
 27031                           tablat	equ	0xFF5
 27032                           prodh	equ	0xFF4
 27033                           prodl	equ	0xFF3
 27034                           intcon	equ	0xFF2
 27035                           postinc0	equ	0xFEE
 27036                           fsr0h	equ	0xFEA
 27037                           fsr0l	equ	0xFE9
 27038                           wreg	equ	0xFE8
 27039                           postdec1	equ	0xFE5
 27040                           fsr1h	equ	0xFE2
 27041                           fsr1l	equ	0xFE1
 27042                           bsr	equ	0xFE0
 27043                           indf2	equ	0xFDF
 27044                           postinc2	equ	0xFDE
 27045                           postdec2	equ	0xFDD
 27046                           plusw2	equ	0xFDB
 27047                           fsr2h	equ	0xFDA
 27048                           fsr2l	equ	0xFD9
 27049                           status	equ	0xFD8
 27050                           
 27051 ;; *************** function _saveProcessState *****************
 27052 ;; Defined at:
 27053 ;;		line 153 in file "source/sysParams.h"
 27054 ;; Parameters:    Size  Location     Type
 27055 ;;		None
 27056 ;; Auto vars:     Size  Location     Type
 27057 ;;		None
 27058 ;; Return value:  Size  Location     Type
 27059 ;;                  1    wreg      void 
 27060 ;; Registers used:
 27061 ;;		wreg, status,2, cstack
 27062 ;; Tracked objects:
 27063 ;;		On entry : 0/0
 27064 ;;		On exit  : 0/0
 27065 ;;		Unchanged: 0/0
 27066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27067 ;;      Params:         0       0       0       0       0       0       0
 27068 ;;      Locals:         0       0       0       0       0       0       0
 27069 ;;      Temps:          0       0       0       0       0       0       0
 27070 ;;      Totals:         0       0       0       0       0       0       0
 27071 ;;Total ram usage:        0 bytes
 27072 ;; Hardware stack levels used:    1
 27073 ;; Hardware stack levels required when called:    5
 27074 ;; This function calls:
 27075 ;;		i1_writeEEPROM
 27076 ;; This function is called by:
 27077 ;;		_T2int
 27078 ;; This function uses a non-reentrant model
 27079 ;;
 27080                           
 27081                           	psect	text114
 27082  0069B0                     __ptext114:
 27083                           	opt stack 0
 27084  0069B0                     _saveProcessState:
 27085                           	opt stack 13
 27086                           
 27087                           ;sysParams.h: 154: EECON1bits.WREN = 1;
 27088                           
 27089                           ; BSR set to: 0
 27090                           ;incstack = 0
 27091  0069B0  84A6               	bsf	4006,2,c	;volatile
 27092                           
 27093                           ;sysParams.h: 155: ie = INTCONbits.GIE;
 27094  0069B2  0E00               	movlw	0
 27095  0069B4  BEF2               	btfsc	intcon,7,c	;volatile
 27096  0069B6  0E01               	movlw	1
 27097  0069B8  0100               	movlb	0	; () banked
 27098  0069BA  6FCA               	movwf	_ie& (0+255),b
 27099                           
 27100                           ; BSR set to: 0
 27101                           ;sysParams.h: 156: INTCONbits.GIE = 0;
 27102  0069BC  9EF2               	bcf	intcon,7,c	;volatile
 27103                           
 27104                           ; BSR set to: 0
 27105                           ;sysParams.h: 157: writeEEPROM(30, ProcessStarted);
 27106  0069BE  C03A  F060         	movff	_ProcessStarted,i1writeEEPROM@data
 27107  0069C2  0E1E               	movlw	30
 27108  0069C4  ECAD  F035         	call	i1_writeEEPROM
 27109                           
 27110                           ;sysParams.h: 158: writeEEPROM(31, processState);
 27111  0069C8  C035  F060         	movff	_processState,i1writeEEPROM@data
 27112  0069CC  0E1F               	movlw	31
 27113  0069CE  ECAD  F035         	call	i1_writeEEPROM
 27114                           
 27115                           ;sysParams.h: 159: EECON1bits.WREN = 0;
 27116  0069D2  94A6               	bcf	4006,2,c	;volatile
 27117                           
 27118                           ;sysParams.h: 160: INTCONbits.GIE = ie;
 27119  0069D4  0100               	movlb	0	; () banked
 27120  0069D6  B1CA               	btfsc	_ie& (0+255),0,b
 27121  0069D8  D002               	bra	i1u1563_25
 27122  0069DA  9EF2               	bcf	intcon,7,c	;volatile
 27123  0069DC  D001               	bra	i1u1563_26
 27124  0069DE                     i1u1563_25:
 27125  0069DE  8EF2               	bsf	intcon,7,c	;volatile
 27126  0069E0                     i1u1563_26:
 27127  0069E0  0012               	return		;funcret
 27128  0069E2                     __end_of_saveProcessState:
 27129                           	opt stack 0
 27130                           pclatu	equ	0xFFB
 27131                           pclath	equ	0xFFA
 27132                           tblptru	equ	0xFF8
 27133                           tblptrh	equ	0xFF7
 27134                           tblptrl	equ	0xFF6
 27135                           tablat	equ	0xFF5
 27136                           prodh	equ	0xFF4
 27137                           prodl	equ	0xFF3
 27138                           intcon	equ	0xFF2
 27139                           postinc0	equ	0xFEE
 27140                           fsr0h	equ	0xFEA
 27141                           fsr0l	equ	0xFE9
 27142                           wreg	equ	0xFE8
 27143                           postdec1	equ	0xFE5
 27144                           fsr1h	equ	0xFE2
 27145                           fsr1l	equ	0xFE1
 27146                           bsr	equ	0xFE0
 27147                           indf2	equ	0xFDF
 27148                           postinc2	equ	0xFDE
 27149                           postdec2	equ	0xFDD
 27150                           plusw2	equ	0xFDB
 27151                           fsr2h	equ	0xFDA
 27152                           fsr2l	equ	0xFD9
 27153                           status	equ	0xFD8
 27154                           
 27155 ;; *************** function i1_writeEEPROM *****************
 27156 ;; Defined at:
 27157 ;;		line 51 in file "source/sysParams.h"
 27158 ;; Parameters:    Size  Location     Type
 27159 ;;  adr             1    wreg     unsigned char 
 27160 ;;  data            1    0[BANK0 ] unsigned char 
 27161 ;; Auto vars:     Size  Location     Type
 27162 ;;  adr             1    1[BANK0 ] unsigned char 
 27163 ;; Return value:  Size  Location     Type
 27164 ;;                  1    wreg      void 
 27165 ;; Registers used:
 27166 ;;		wreg, status,2
 27167 ;; Tracked objects:
 27168 ;;		On entry : 0/0
 27169 ;;		On exit  : 0/0
 27170 ;;		Unchanged: 0/0
 27171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27172 ;;      Params:         0       1       0       0       0       0       0
 27173 ;;      Locals:         0       1       0       0       0       0       0
 27174 ;;      Temps:          0       0       0       0       0       0       0
 27175 ;;      Totals:         0       2       0       0       0       0       0
 27176 ;;Total ram usage:        2 bytes
 27177 ;; Hardware stack levels used:    1
 27178 ;; Hardware stack levels required when called:    4
 27179 ;; This function calls:
 27180 ;;		Nothing
 27181 ;; This function is called by:
 27182 ;;		_saveProcessState
 27183 ;;		i1_saveSysParams
 27184 ;; This function uses a non-reentrant model
 27185 ;;
 27186                           
 27187                           	psect	text115
 27188  006B5A                     __ptext115:
 27189                           	opt stack 0
 27190  006B5A                     i1_writeEEPROM:
 27191                           	opt stack 13
 27192                           
 27193                           ;incstack = 0
 27194                           ;i1writeEEPROM@adr stored from wreg
 27195  006B5A  0100               	movlb	0	; () banked
 27196  006B5C  6F61               	movwf	i1writeEEPROM@adr& (0+255),b
 27197                           
 27198                           ;sysParams.h: 52: EEADR = adr;
 27199  006B5E  C061  FFA9         	movff	i1writeEEPROM@adr,4009	;volatile
 27200                           
 27201                           ;sysParams.h: 53: EEDATA = data;
 27202  006B62  C060  FFA8         	movff	i1writeEEPROM@data,4008	;volatile
 27203                           
 27204                           ;sysParams.h: 54: EECON1bits.EEPGD = 0;
 27205  006B66  9EA6               	bcf	4006,7,c	;volatile
 27206                           
 27207                           ;sysParams.h: 55: EECON1bits.CFGS = 0;
 27208  006B68  9CA6               	bcf	4006,6,c	;volatile
 27209                           
 27210                           ;sysParams.h: 56: EECON2 = 0x55;
 27211  006B6A  0E55               	movlw	85
 27212  006B6C  6EA7               	movwf	4007,c	;volatile
 27213                           
 27214                           ;sysParams.h: 57: EECON2 = 0xAA;
 27215  006B6E  0EAA               	movlw	170
 27216  006B70  6EA7               	movwf	4007,c	;volatile
 27217                           
 27218                           ;sysParams.h: 58: EECON1bits.WR = 1;
 27219  006B72  82A6               	bsf	4006,1,c	;volatile
 27220  006B74                     i1l275:
 27221  006B74  A2A6               	btfss	4006,1,c	;volatile
 27222  006B76  0012               	return	
 27223  006B78  D7FD               	goto	i1l275
 27224  006B7A                     __end_ofi1_writeEEPROM:
 27225                           	opt stack 0
 27226                           pclatu	equ	0xFFB
 27227                           pclath	equ	0xFFA
 27228                           tblptru	equ	0xFF8
 27229                           tblptrh	equ	0xFF7
 27230                           tblptrl	equ	0xFF6
 27231                           tablat	equ	0xFF5
 27232                           prodh	equ	0xFF4
 27233                           prodl	equ	0xFF3
 27234                           intcon	equ	0xFF2
 27235                           postinc0	equ	0xFEE
 27236                           fsr0h	equ	0xFEA
 27237                           fsr0l	equ	0xFE9
 27238                           wreg	equ	0xFE8
 27239                           postdec1	equ	0xFE5
 27240                           fsr1h	equ	0xFE2
 27241                           fsr1l	equ	0xFE1
 27242                           bsr	equ	0xFE0
 27243                           indf2	equ	0xFDF
 27244                           postinc2	equ	0xFDE
 27245                           postdec2	equ	0xFDD
 27246                           plusw2	equ	0xFDB
 27247                           fsr2h	equ	0xFDA
 27248                           fsr2l	equ	0xFD9
 27249                           status	equ	0xFD8
 27250                           
 27251 ;; *************** function _hp_isr *****************
 27252 ;; Defined at:
 27253 ;;		line 14 in file "source/main.c"
 27254 ;; Parameters:    Size  Location     Type
 27255 ;;		None
 27256 ;; Auto vars:     Size  Location     Type
 27257 ;;		None
 27258 ;; Return value:  Size  Location     Type
 27259 ;;                  1    wreg      void 
 27260 ;; Registers used:
 27261 ;;		wreg, status,2, status,0, cstack
 27262 ;; Tracked objects:
 27263 ;;		On entry : 0/0
 27264 ;;		On exit  : 0/0
 27265 ;;		Unchanged: 0/0
 27266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27267 ;;      Params:         0       0       0       0       0       0       0
 27268 ;;      Locals:         0       0       0       0       0       0       0
 27269 ;;      Temps:         14       0       0       0       0       0       0
 27270 ;;      Totals:        14       0       0       0       0       0       0
 27271 ;;Total ram usage:       14 bytes
 27272 ;; Hardware stack levels used:    1
 27273 ;; Hardware stack levels required when called:    3
 27274 ;; This function calls:
 27275 ;;		_T4int
 27276 ;; This function is called by:
 27277 ;;		Interrupt level 2
 27278 ;; This function uses a non-reentrant model
 27279 ;;
 27280                           
 27281                           	psect	intcode
 27282  000008                     __pintcode:
 27283                           	opt stack 0
 27284  000008                     _hp_isr:
 27285                           	opt stack 9
 27286                           
 27287                           ;incstack = 0
 27288  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 27289  00000A  CFFA F01D          	movff	pclath,??_hp_isr
 27290  00000E  CFFB F01E          	movff	pclatu,??_hp_isr+1
 27291  000012  EF67  F030         	goto	int_func
 27292                           pclatu	equ	0xFFB
 27293                           pclath	equ	0xFFA
 27294                           tblptru	equ	0xFF8
 27295                           tblptrh	equ	0xFF7
 27296                           tblptrl	equ	0xFF6
 27297                           tablat	equ	0xFF5
 27298                           prodh	equ	0xFF4
 27299                           prodl	equ	0xFF3
 27300                           intcon	equ	0xFF2
 27301                           postinc0	equ	0xFEE
 27302                           fsr0h	equ	0xFEA
 27303                           fsr0l	equ	0xFE9
 27304                           wreg	equ	0xFE8
 27305                           postdec1	equ	0xFE5
 27306                           fsr1h	equ	0xFE2
 27307                           fsr1l	equ	0xFE1
 27308                           bsr	equ	0xFE0
 27309                           indf2	equ	0xFDF
 27310                           postinc2	equ	0xFDE
 27311                           postdec2	equ	0xFDD
 27312                           plusw2	equ	0xFDB
 27313                           fsr2h	equ	0xFDA
 27314                           fsr2l	equ	0xFD9
 27315                           status	equ	0xFD8
 27316                           
 27317                           	psect	intcode_body
 27318  0060CE                     __pintcode_body:
 27319                           	opt stack 9
 27320  0060CE                     int_func:
 27321                           	opt stack 9
 27322  0060CE  CFE9 F01F          	movff	fsr0l,??_hp_isr+2
 27323  0060D2  CFEA F020          	movff	fsr0h,??_hp_isr+3
 27324  0060D6  CFE1 F021          	movff	fsr1l,??_hp_isr+4
 27325  0060DA  CFE2 F022          	movff	fsr1h,??_hp_isr+5
 27326  0060DE  CFD9 F023          	movff	fsr2l,??_hp_isr+6
 27327  0060E2  CFDA F024          	movff	fsr2h,??_hp_isr+7
 27328  0060E6  CFF3 F025          	movff	prodl,??_hp_isr+8
 27329  0060EA  CFF4 F026          	movff	prodh,??_hp_isr+9
 27330  0060EE  CFF6 F027          	movff	tblptrl,??_hp_isr+10
 27331  0060F2  CFF7 F028          	movff	tblptrh,??_hp_isr+11
 27332  0060F6  CFF8 F029          	movff	tblptru,??_hp_isr+12
 27333  0060FA  CFF5 F02A          	movff	tablat,??_hp_isr+13
 27334                           
 27335                           ;main.c: 15: if(PIE5bits.TMR4IE && PIR5bits.TMR4IF) {
 27336  0060FE  B07D               	btfsc	3965,0,c	;volatile
 27337  006100  A07E               	btfss	3966,0,c	;volatile
 27338  006102  D003               	goto	i2l876
 27339                           
 27340                           ;main.c: 16: T4int();
 27341  006104  ECF7  F029         	call	_T4int	;wreg free
 27342                           
 27343                           ;main.c: 17: PIR5bits.TMR4IF = 0;
 27344  006108  907E               	bcf	3966,0,c	;volatile
 27345  00610A                     i2l876:
 27346  00610A  C02A  FFF5         	movff	??_hp_isr+13,tablat
 27347  00610E  C029  FFF8         	movff	??_hp_isr+12,tblptru
 27348  006112  C028  FFF7         	movff	??_hp_isr+11,tblptrh
 27349  006116  C027  FFF6         	movff	??_hp_isr+10,tblptrl
 27350  00611A  C026  FFF4         	movff	??_hp_isr+9,prodh
 27351  00611E  C025  FFF3         	movff	??_hp_isr+8,prodl
 27352  006122  C024  FFDA         	movff	??_hp_isr+7,fsr2h
 27353  006126  C023  FFD9         	movff	??_hp_isr+6,fsr2l
 27354  00612A  C022  FFE2         	movff	??_hp_isr+5,fsr1h
 27355  00612E  C021  FFE1         	movff	??_hp_isr+4,fsr1l
 27356  006132  C020  FFEA         	movff	??_hp_isr+3,fsr0h
 27357  006136  C01F  FFE9         	movff	??_hp_isr+2,fsr0l
 27358  00613A  C01E  FFFB         	movff	??_hp_isr+1,pclatu
 27359  00613E  C01D  FFFA         	movff	??_hp_isr,pclath
 27360  006142  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 27361  006144  0011               	retfie		f
 27362  006146                     __end_of_hp_isr:
 27363                           	opt stack 0
 27364                           pclatu	equ	0xFFB
 27365                           pclath	equ	0xFFA
 27366                           tblptru	equ	0xFF8
 27367                           tblptrh	equ	0xFF7
 27368                           tblptrl	equ	0xFF6
 27369                           tablat	equ	0xFF5
 27370                           prodh	equ	0xFF4
 27371                           prodl	equ	0xFF3
 27372                           intcon	equ	0xFF2
 27373                           postinc0	equ	0xFEE
 27374                           fsr0h	equ	0xFEA
 27375                           fsr0l	equ	0xFE9
 27376                           wreg	equ	0xFE8
 27377                           postdec1	equ	0xFE5
 27378                           fsr1h	equ	0xFE2
 27379                           fsr1l	equ	0xFE1
 27380                           bsr	equ	0xFE0
 27381                           indf2	equ	0xFDF
 27382                           postinc2	equ	0xFDE
 27383                           postdec2	equ	0xFDD
 27384                           plusw2	equ	0xFDB
 27385                           fsr2h	equ	0xFDA
 27386                           fsr2l	equ	0xFD9
 27387                           status	equ	0xFD8
 27388                           
 27389 ;; *************** function _T4int *****************
 27390 ;; Defined at:
 27391 ;;		line 13 in file "source/T4Config.h"
 27392 ;; Parameters:    Size  Location     Type
 27393 ;;		None
 27394 ;; Auto vars:     Size  Location     Type
 27395 ;;		None
 27396 ;; Return value:  Size  Location     Type
 27397 ;;                  1    wreg      void 
 27398 ;; Registers used:
 27399 ;;		wreg, status,2, status,0, cstack
 27400 ;; Tracked objects:
 27401 ;;		On entry : 0/0
 27402 ;;		On exit  : 0/0
 27403 ;;		Unchanged: 0/0
 27404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27405 ;;      Params:         0       0       0       0       0       0       0
 27406 ;;      Locals:         0       0       0       0       0       0       0
 27407 ;;      Temps:          1       0       0       0       0       0       0
 27408 ;;      Totals:         1       0       0       0       0       0       0
 27409 ;;Total ram usage:        1 bytes
 27410 ;; Hardware stack levels used:    1
 27411 ;; Hardware stack levels required when called:    2
 27412 ;; This function calls:
 27413 ;;		i2___altoft
 27414 ;;		i2___ftge
 27415 ;;		i2_setPWM2duty
 27416 ;; This function is called by:
 27417 ;;		_hp_isr
 27418 ;; This function uses a non-reentrant model
 27419 ;;
 27420                           
 27421                           	psect	text117
 27422  0053EE                     __ptext117:
 27423                           	opt stack 0
 27424  0053EE                     _T4int:
 27425                           	opt stack 9
 27426                           
 27427                           ;incstack = 0
 27428  0053EE  0004               	clrwdt		;# 
 27429                           
 27430                           ;T4Config.h: 15: processTimer++;
 27431  0053F0  0E01               	movlw	1
 27432  0053F2  262B               	addwf	_processTimer,f,c
 27433  0053F4  0E00               	movlw	0
 27434  0053F6  222C               	addwfc	_processTimer+1,f,c
 27435  0053F8  222D               	addwfc	_processTimer+2,f,c
 27436  0053FA  222E               	addwfc	_processTimer+3,f,c
 27437                           
 27438                           ;T4Config.h: 16: if(bladeIsUP == 1) {
 27439  0053FC  0100               	movlb	0	; () banked
 27440  0053FE  05C9               	decf	_bladeIsUP& (0+255),w,b
 27441  005400  A4D8               	btfss	status,2,c
 27442  005402  D031               	goto	i2l8823
 27443                           
 27444                           ; BSR set to: 0
 27445                           ;T4Config.h: 17: if(processTimer >= timsXcorte && ProcessStarted && processState < numCo
      +                          rtes) {
 27446  005404  C02B  F009         	movff	_processTimer,i2___altoft@c
 27447  005408  C02C  F00A         	movff	_processTimer+1,i2___altoft@c+1
 27448  00540C  C02D  F00B         	movff	_processTimer+2,i2___altoft@c+2
 27449  005410  C02E  F00C         	movff	_processTimer+3,i2___altoft@c+3
 27450  005414  ECA3  F030         	call	i2___altoft	;wreg free
 27451  005418  C009  F013         	movff	?i2___altoft,i2___ftge@ff1
 27452  00541C  C00A  F014         	movff	?i2___altoft+1,i2___ftge@ff1+1
 27453  005420  C00B  F015         	movff	?i2___altoft+2,i2___ftge@ff1+2
 27454  005424  C04D  F016         	movff	_timsXcorte,i2___ftge@ff2
 27455  005428  C04E  F017         	movff	_timsXcorte+1,i2___ftge@ff2+1
 27456  00542C  C04F  F018         	movff	_timsXcorte+2,i2___ftge@ff2+2
 27457  005430  EC4C  F02E         	call	i2___ftge	;wreg free
 27458  005434  A0D8               	btfss	status,0,c
 27459  005436  0012               	return	
 27460  005438  503A               	movf	_ProcessStarted,w,c
 27461  00543A  B4D8               	btfsc	status,2,c
 27462  00543C  0012               	return	
 27463  00543E  0100               	movlb	0	; () banked
 27464  005440  51B8               	movf	_numCortes& (0+255),w,b
 27465  005442  5C35               	subwf	_processState,w,c
 27466  005444  5036               	movf	_processState+1,w,c
 27467  005446  0A80               	xorlw	128
 27468  005448  6E1C               	movwf	??_T4int& (0+255),c
 27469  00544A  0100               	movlb	0	; () banked
 27470  00544C  51B9               	movf	(_numCortes+1)& (0+255),w,b
 27471  00544E  0A80               	xorlw	128
 27472  005450  581C               	subwfb	??_T4int& (0+255),w,c
 27473  005452  B0D8               	btfsc	status,0,c
 27474  005454  0012               	return	
 27475                           
 27476                           ; BSR set to: 0
 27477                           ;T4Config.h: 18: setPWM2duty(400);
 27478  005456  0E01               	movlw	1
 27479  005458  6E02               	movwf	i2setPWM2duty@actuator+1,c
 27480  00545A  0E90               	movlw	144
 27481  00545C  6E01               	movwf	i2setPWM2duty@actuator,c
 27482  00545E  ECC9  F031         	call	i2_setPWM2duty	;wreg free
 27483                           
 27484                           ;T4Config.h: 19: LATCbits.LATC4 = 1;
 27485  005462  888B               	bsf	3979,4,c	;volatile
 27486                           
 27487                           ;T4Config.h: 20: }
 27488                           ;T4Config.h: 21: }else if(bladeIsUP == 0){
 27489  005464  0012               	return	
 27490  005466                     i2l8823:
 27491  005466  0100               	movlb	0	; () banked
 27492  005468  51C9               	movf	_bladeIsUP& (0+255),w,b
 27493  00546A  A4D8               	btfss	status,2,c
 27494  00546C  0012               	return	
 27495                           
 27496                           ; BSR set to: 0
 27497                           ;T4Config.h: 22: if(processTimer >= timeDOWN && ProcessStarted) {
 27498  00546E  5043               	movf	_timeDOWN,w,c
 27499  005470  5C2B               	subwf	_processTimer,w,c
 27500  005472  5044               	movf	_timeDOWN+1,w,c
 27501  005474  582C               	subwfb	_processTimer+1,w,c
 27502  005476  5045               	movf	_timeDOWN+2,w,c
 27503  005478  582D               	subwfb	_processTimer+2,w,c
 27504  00547A  502E               	movf	_processTimer+3,w,c
 27505  00547C  0A80               	xorlw	128
 27506  00547E  6E1C               	movwf	??_T4int& (0+255),c
 27507  005480  5046               	movf	_timeDOWN+3,w,c
 27508  005482  0A80               	xorlw	128
 27509  005484  581C               	subwfb	??_T4int& (0+255),w,c
 27510  005486  A0D8               	btfss	status,0,c
 27511  005488  0012               	return	
 27512                           
 27513                           ; BSR set to: 0
 27514  00548A  503A               	movf	_ProcessStarted,w,c
 27515  00548C  B4D8               	btfsc	status,2,c
 27516  00548E  0012               	return	
 27517                           
 27518                           ; BSR set to: 0
 27519                           ;T4Config.h: 23: setPWM2duty(-400);
 27520  005490  0EFE               	movlw	254
 27521  005492  6E02               	movwf	i2setPWM2duty@actuator+1,c
 27522  005494  0E70               	movlw	112
 27523  005496  6E01               	movwf	i2setPWM2duty@actuator,c
 27524  005498  ECC9  F031         	call	i2_setPWM2duty	;wreg free
 27525  00549C  0012               	return	
 27526  00549E                     __end_of_T4int:
 27527                           	opt stack 0
 27528                           pclatu	equ	0xFFB
 27529                           pclath	equ	0xFFA
 27530                           tblptru	equ	0xFF8
 27531                           tblptrh	equ	0xFF7
 27532                           tblptrl	equ	0xFF6
 27533                           tablat	equ	0xFF5
 27534                           prodh	equ	0xFF4
 27535                           prodl	equ	0xFF3
 27536                           intcon	equ	0xFF2
 27537                           postinc0	equ	0xFEE
 27538                           fsr0h	equ	0xFEA
 27539                           fsr0l	equ	0xFE9
 27540                           wreg	equ	0xFE8
 27541                           postdec1	equ	0xFE5
 27542                           fsr1h	equ	0xFE2
 27543                           fsr1l	equ	0xFE1
 27544                           bsr	equ	0xFE0
 27545                           indf2	equ	0xFDF
 27546                           postinc2	equ	0xFDE
 27547                           postdec2	equ	0xFDD
 27548                           plusw2	equ	0xFDB
 27549                           fsr2h	equ	0xFDA
 27550                           fsr2l	equ	0xFD9
 27551                           status	equ	0xFD8
 27552                           
 27553 ;; *************** function i2_setPWM2duty *****************
 27554 ;; Defined at:
 27555 ;;		line 34 in file "source/PWMConfig.h"
 27556 ;; Parameters:    Size  Location     Type
 27557 ;;  actuator        2    0[COMRAM] short 
 27558 ;; Auto vars:     Size  Location     Type
 27559 ;;  setPWM2duty     2    4[COMRAM] short 
 27560 ;; Return value:  Size  Location     Type
 27561 ;;                  1    wreg      void 
 27562 ;; Registers used:
 27563 ;;		wreg, status,2, status,0
 27564 ;; Tracked objects:
 27565 ;;		On entry : 0/0
 27566 ;;		On exit  : 0/0
 27567 ;;		Unchanged: 0/0
 27568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27569 ;;      Params:         2       0       0       0       0       0       0
 27570 ;;      Locals:         2       0       0       0       0       0       0
 27571 ;;      Temps:          2       0       0       0       0       0       0
 27572 ;;      Totals:         6       0       0       0       0       0       0
 27573 ;;Total ram usage:        6 bytes
 27574 ;; Hardware stack levels used:    1
 27575 ;; This function calls:
 27576 ;;		Nothing
 27577 ;; This function is called by:
 27578 ;;		_T4int
 27579 ;; This function uses a non-reentrant model
 27580 ;;
 27581                           
 27582                           	psect	text118
 27583  006392                     __ptext118:
 27584                           	opt stack 0
 27585  006392                     i2_setPWM2duty:
 27586                           	opt stack 10
 27587                           
 27588                           ;PWMConfig.h: 35: short act = 400;
 27589                           
 27590                           ;incstack = 0
 27591  006392  0E01               	movlw	1
 27592  006394  6E06               	movwf	i2setPWM2duty@act+1,c
 27593  006396  0E90               	movlw	144
 27594  006398  6E05               	movwf	i2setPWM2duty@act,c
 27595                           
 27596                           ;PWMConfig.h: 36: if(actuator > 400)
 27597  00639A  BE02               	btfsc	i2setPWM2duty@actuator+1,7,c
 27598  00639C  D00A               	goto	i2l7977
 27599  00639E  0E91               	movlw	145
 27600  0063A0  5C01               	subwf	i2setPWM2duty@actuator,w,c
 27601  0063A2  0E01               	movlw	1
 27602  0063A4  5802               	subwfb	i2setPWM2duty@actuator+1,w,c
 27603  0063A6  A0D8               	btfss	status,0,c
 27604  0063A8  D004               	goto	i2l7977
 27605                           
 27606                           ;PWMConfig.h: 37: act = 800;
 27607  0063AA  0E03               	movlw	3
 27608  0063AC  6E06               	movwf	i2setPWM2duty@act+1,c
 27609  0063AE  0E20               	movlw	32
 27610  0063B0  D00B               	goto	L10
 27611  0063B2                     i2l7977:
 27612                           
 27613                           ;PWMConfig.h: 38: else if(actuator < -400)
 27614  0063B2  AE02               	btfss	i2setPWM2duty@actuator+1,7,c
 27615  0063B4  D00B               	goto	i2l7981
 27616  0063B6  0E70               	movlw	112
 27617  0063B8  5C01               	subwf	i2setPWM2duty@actuator,w,c
 27618  0063BA  0EFE               	movlw	254
 27619  0063BC  5802               	subwfb	i2setPWM2duty@actuator+1,w,c
 27620  0063BE  B0D8               	btfsc	status,0,c
 27621  0063C0  D005               	goto	i2l7981
 27622                           
 27623                           ;PWMConfig.h: 39: act = 0;
 27624  0063C2  0E00               	movlw	0
 27625  0063C4  6E06               	movwf	i2setPWM2duty@act+1,c
 27626  0063C6  0E00               	movlw	0
 27627  0063C8                     L10:
 27628  0063C8  6E05               	movwf	i2setPWM2duty@act,c
 27629  0063CA  D006               	goto	i2l476
 27630  0063CC                     i2l7981:
 27631                           
 27632                           ;PWMConfig.h: 40: else
 27633                           ;PWMConfig.h: 41: act = actuator + 400;
 27634  0063CC  0E90               	movlw	144
 27635  0063CE  2401               	addwf	i2setPWM2duty@actuator,w,c
 27636  0063D0  6E05               	movwf	i2setPWM2duty@act,c
 27637  0063D2  0E01               	movlw	1
 27638  0063D4  2002               	addwfc	i2setPWM2duty@actuator+1,w,c
 27639  0063D6  6E06               	movwf	i2setPWM2duty@act+1,c
 27640  0063D8                     i2l476:
 27641                           
 27642                           ;PWMConfig.h: 42: CCP2CONbits.DC2B = act;
 27643  0063D8  C005  F003         	movff	i2setPWM2duty@act,??i2_setPWM2duty
 27644  0063DC  3A03               	swapf	??i2_setPWM2duty,f,c
 27645  0063DE  5066               	movf	3942,w,c	;volatile
 27646  0063E0  1803               	xorwf	??i2_setPWM2duty,w,c
 27647  0063E2  0BCF               	andlw	-49
 27648  0063E4  1803               	xorwf	??i2_setPWM2duty,w,c
 27649  0063E6  6E66               	movwf	3942,c	;volatile
 27650                           
 27651                           ;PWMConfig.h: 43: CCPR2L = act>>2;
 27652  0063E8  C005  F003         	movff	i2setPWM2duty@act,??i2_setPWM2duty
 27653  0063EC  C006  F004         	movff	i2setPWM2duty@act+1,??i2_setPWM2duty+1
 27654  0063F0  3404               	rlcf	??i2_setPWM2duty+1,w,c
 27655  0063F2  3204               	rrcf	??i2_setPWM2duty+1,f,c
 27656  0063F4  3203               	rrcf	??i2_setPWM2duty,f,c
 27657  0063F6  3404               	rlcf	??i2_setPWM2duty+1,w,c
 27658  0063F8  3204               	rrcf	??i2_setPWM2duty+1,f,c
 27659  0063FA  3203               	rrcf	??i2_setPWM2duty,f,c
 27660  0063FC  5003               	movf	??i2_setPWM2duty,w,c
 27661  0063FE  6E67               	movwf	3943,c	;volatile
 27662  006400  0012               	return		;funcret
 27663  006402                     __end_ofi2_setPWM2duty:
 27664                           	opt stack 0
 27665                           pclatu	equ	0xFFB
 27666                           pclath	equ	0xFFA
 27667                           tblptru	equ	0xFF8
 27668                           tblptrh	equ	0xFF7
 27669                           tblptrl	equ	0xFF6
 27670                           tablat	equ	0xFF5
 27671                           prodh	equ	0xFF4
 27672                           prodl	equ	0xFF3
 27673                           intcon	equ	0xFF2
 27674                           postinc0	equ	0xFEE
 27675                           fsr0h	equ	0xFEA
 27676                           fsr0l	equ	0xFE9
 27677                           wreg	equ	0xFE8
 27678                           postdec1	equ	0xFE5
 27679                           fsr1h	equ	0xFE2
 27680                           fsr1l	equ	0xFE1
 27681                           bsr	equ	0xFE0
 27682                           indf2	equ	0xFDF
 27683                           postinc2	equ	0xFDE
 27684                           postdec2	equ	0xFDD
 27685                           plusw2	equ	0xFDB
 27686                           fsr2h	equ	0xFDA
 27687                           fsr2l	equ	0xFD9
 27688                           status	equ	0xFD8
 27689                           
 27690 ;; *************** function i2___ftge *****************
 27691 ;; Defined at:
 27692 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\ftge.c"
 27693 ;; Parameters:    Size  Location     Type
 27694 ;;  ff1             3   18[COMRAM] float 
 27695 ;;  ff2             3   21[COMRAM] float 
 27696 ;; Auto vars:     Size  Location     Type
 27697 ;;		None
 27698 ;; Return value:  Size  Location     Type
 27699 ;;		None               void
 27700 ;; Registers used:
 27701 ;;		wreg, status,2, status,0
 27702 ;; Tracked objects:
 27703 ;;		On entry : 0/0
 27704 ;;		On exit  : 0/0
 27705 ;;		Unchanged: 0/0
 27706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27707 ;;      Params:         6       0       0       0       0       0       0
 27708 ;;      Locals:         0       0       0       0       0       0       0
 27709 ;;      Temps:          3       0       0       0       0       0       0
 27710 ;;      Totals:         9       0       0       0       0       0       0
 27711 ;;Total ram usage:        9 bytes
 27712 ;; Hardware stack levels used:    1
 27713 ;; This function calls:
 27714 ;;		Nothing
 27715 ;; This function is called by:
 27716 ;;		_T4int
 27717 ;; This function uses a non-reentrant model
 27718 ;;
 27719                           
 27720                           	psect	text119
 27721  005C98                     __ptext119:
 27722                           	opt stack 0
 27723  005C98                     i2___ftge:
 27724                           	opt stack 10
 27725                           
 27726                           ;incstack = 0
 27727  005C98  AE15               	btfss	i2___ftge@ff1+2,7,c
 27728  005C9A  D016               	goto	i2l8421
 27729  005C9C  C013  F019         	movff	i2___ftge@ff1,??i2___ftge
 27730  005CA0  C014  F01A         	movff	i2___ftge@ff1+1,??i2___ftge+1
 27731  005CA4  C015  F01B         	movff	i2___ftge@ff1+2,??i2___ftge+2
 27732  005CA8  1E19               	comf	??i2___ftge,f,c
 27733  005CAA  1E1A               	comf	??i2___ftge+1,f,c
 27734  005CAC  1E1B               	comf	??i2___ftge+2,f,c
 27735  005CAE  2A19               	incf	??i2___ftge,f,c
 27736  005CB0  0E00               	movlw	0
 27737  005CB2  221A               	addwfc	??i2___ftge+1,f,c
 27738  005CB4  221B               	addwfc	??i2___ftge+2,f,c
 27739  005CB6  0E00               	movlw	0
 27740  005CB8  2419               	addwf	??i2___ftge,w,c
 27741  005CBA  6E13               	movwf	i2___ftge@ff1,c
 27742  005CBC  0E00               	movlw	0
 27743  005CBE  201A               	addwfc	??i2___ftge+1,w,c
 27744  005CC0  6E14               	movwf	i2___ftge@ff1+1,c
 27745  005CC2  0E80               	movlw	128
 27746  005CC4  201B               	addwfc	??i2___ftge+2,w,c
 27747  005CC6  6E15               	movwf	i2___ftge@ff1+2,c
 27748  005CC8                     i2l8421:
 27749  005CC8  AE18               	btfss	i2___ftge@ff2+2,7,c
 27750  005CCA  D016               	goto	i2l8425
 27751  005CCC  C016  F019         	movff	i2___ftge@ff2,??i2___ftge
 27752  005CD0  C017  F01A         	movff	i2___ftge@ff2+1,??i2___ftge+1
 27753  005CD4  C018  F01B         	movff	i2___ftge@ff2+2,??i2___ftge+2
 27754  005CD8  1E19               	comf	??i2___ftge,f,c
 27755  005CDA  1E1A               	comf	??i2___ftge+1,f,c
 27756  005CDC  1E1B               	comf	??i2___ftge+2,f,c
 27757  005CDE  2A19               	incf	??i2___ftge,f,c
 27758  005CE0  0E00               	movlw	0
 27759  005CE2  221A               	addwfc	??i2___ftge+1,f,c
 27760  005CE4  221B               	addwfc	??i2___ftge+2,f,c
 27761  005CE6  0E00               	movlw	0
 27762  005CE8  2419               	addwf	??i2___ftge,w,c
 27763  005CEA  6E16               	movwf	i2___ftge@ff2,c
 27764  005CEC  0E00               	movlw	0
 27765  005CEE  201A               	addwfc	??i2___ftge+1,w,c
 27766  005CF0  6E17               	movwf	i2___ftge@ff2+1,c
 27767  005CF2  0E80               	movlw	128
 27768  005CF4  201B               	addwfc	??i2___ftge+2,w,c
 27769  005CF6  6E18               	movwf	i2___ftge@ff2+2,c
 27770  005CF8                     i2l8425:
 27771  005CF8  0E00               	movlw	0
 27772  005CFA  1A13               	xorwf	i2___ftge@ff1,f,c
 27773  005CFC  0E00               	movlw	0
 27774  005CFE  1A14               	xorwf	i2___ftge@ff1+1,f,c
 27775  005D00  0E80               	movlw	128
 27776  005D02  1A15               	xorwf	i2___ftge@ff1+2,f,c
 27777  005D04  0E00               	movlw	0
 27778  005D06  1A16               	xorwf	i2___ftge@ff2,f,c
 27779  005D08  0E00               	movlw	0
 27780  005D0A  1A17               	xorwf	i2___ftge@ff2+1,f,c
 27781  005D0C  0E80               	movlw	128
 27782  005D0E  1A18               	xorwf	i2___ftge@ff2+2,f,c
 27783  005D10  5016               	movf	i2___ftge@ff2,w,c
 27784  005D12  5C13               	subwf	i2___ftge@ff1,w,c
 27785  005D14  5017               	movf	i2___ftge@ff2+1,w,c
 27786  005D16  5814               	subwfb	i2___ftge@ff1+1,w,c
 27787  005D18  5018               	movf	i2___ftge@ff2+2,w,c
 27788  005D1A  5815               	subwfb	i2___ftge@ff1+2,w,c
 27789  005D1C  B0D8               	btfsc	status,0,c
 27790  005D1E  D002               	goto	i2l8431
 27791  005D20  90D8               	bcf	status,0,c
 27792  005D22  0012               	return	
 27793  005D24                     i2l8431:
 27794  005D24  80D8               	bsf	status,0,c
 27795  005D26  0012               	return	
 27796  005D28                     __end_ofi2___ftge:
 27797                           	opt stack 0
 27798                           pclatu	equ	0xFFB
 27799                           pclath	equ	0xFFA
 27800                           tblptru	equ	0xFF8
 27801                           tblptrh	equ	0xFF7
 27802                           tblptrl	equ	0xFF6
 27803                           tablat	equ	0xFF5
 27804                           prodh	equ	0xFF4
 27805                           prodl	equ	0xFF3
 27806                           intcon	equ	0xFF2
 27807                           postinc0	equ	0xFEE
 27808                           fsr0h	equ	0xFEA
 27809                           fsr0l	equ	0xFE9
 27810                           wreg	equ	0xFE8
 27811                           postdec1	equ	0xFE5
 27812                           fsr1h	equ	0xFE2
 27813                           fsr1l	equ	0xFE1
 27814                           bsr	equ	0xFE0
 27815                           indf2	equ	0xFDF
 27816                           postinc2	equ	0xFDE
 27817                           postdec2	equ	0xFDD
 27818                           plusw2	equ	0xFDB
 27819                           fsr2h	equ	0xFDA
 27820                           fsr2l	equ	0xFD9
 27821                           status	equ	0xFD8
 27822                           
 27823 ;; *************** function i2___altoft *****************
 27824 ;; Defined at:
 27825 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\altoft.c"
 27826 ;; Parameters:    Size  Location     Type
 27827 ;;  c               4    8[COMRAM] long 
 27828 ;; Auto vars:     Size  Location     Type
 27829 ;;  __altoft        1   17[COMRAM] unsigned char 
 27830 ;;  __altoft        1   16[COMRAM] unsigned char 
 27831 ;; Return value:  Size  Location     Type
 27832 ;;                  3    8[COMRAM] float 
 27833 ;; Registers used:
 27834 ;;		wreg, status,2, status,0, cstack
 27835 ;; Tracked objects:
 27836 ;;		On entry : 0/0
 27837 ;;		On exit  : 0/0
 27838 ;;		Unchanged: 0/0
 27839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27840 ;;      Params:         4       0       0       0       0       0       0
 27841 ;;      Locals:         2       0       0       0       0       0       0
 27842 ;;      Temps:          4       0       0       0       0       0       0
 27843 ;;      Totals:        10       0       0       0       0       0       0
 27844 ;;Total ram usage:       10 bytes
 27845 ;; Hardware stack levels used:    1
 27846 ;; Hardware stack levels required when called:    1
 27847 ;; This function calls:
 27848 ;;		i2___ftpack
 27849 ;; This function is called by:
 27850 ;;		_T4int
 27851 ;; This function uses a non-reentrant model
 27852 ;;
 27853                           
 27854                           	psect	text120
 27855  006146                     __ptext120:
 27856                           	opt stack 0
 27857  006146                     i2___altoft:
 27858                           	opt stack 9
 27859                           
 27860                           ;incstack = 0
 27861  006146  0E00               	movlw	0
 27862  006148  6E12               	movwf	i2___altoft@sign,c
 27863  00614A  0E8E               	movlw	142
 27864  00614C  6E11               	movwf	i2___altoft@exp,c
 27865  00614E  AE0C               	btfss	i2___altoft@c+3,7,c
 27866  006150  D011               	goto	i2l8411
 27867  006152  1E0C               	comf	i2___altoft@c+3,f,c
 27868  006154  1E0B               	comf	i2___altoft@c+2,f,c
 27869  006156  1E0A               	comf	i2___altoft@c+1,f,c
 27870  006158  6C09               	negf	i2___altoft@c,c
 27871  00615A  0E00               	movlw	0
 27872  00615C  220A               	addwfc	i2___altoft@c+1,f,c
 27873  00615E  220B               	addwfc	i2___altoft@c+2,f,c
 27874  006160  220C               	addwfc	i2___altoft@c+3,f,c
 27875  006162  0E01               	movlw	1
 27876  006164  6E12               	movwf	i2___altoft@sign,c
 27877  006166  D006               	goto	i2l8411
 27878  006168                     i2l8409:
 27879  006168  90D8               	bcf	status,0,c
 27880  00616A  320C               	rrcf	i2___altoft@c+3,f,c
 27881  00616C  320B               	rrcf	i2___altoft@c+2,f,c
 27882  00616E  320A               	rrcf	i2___altoft@c+1,f,c
 27883  006170  3209               	rrcf	i2___altoft@c,f,c
 27884  006172  2A11               	incf	i2___altoft@exp,f,c
 27885  006174                     i2l8411:
 27886  006174  0E00               	movlw	0
 27887  006176  1409               	andwf	i2___altoft@c,w,c
 27888  006178  6E0D               	movwf	??i2___altoft& (0+255),c
 27889  00617A  0E00               	movlw	0
 27890  00617C  140A               	andwf	i2___altoft@c+1,w,c
 27891  00617E  6E0E               	movwf	(??i2___altoft+1)& (0+255),c
 27892  006180  0E00               	movlw	0
 27893  006182  140B               	andwf	i2___altoft@c+2,w,c
 27894  006184  6E0F               	movwf	(??i2___altoft+2)& (0+255),c
 27895  006186  0EFF               	movlw	255
 27896  006188  140C               	andwf	i2___altoft@c+3,w,c
 27897  00618A  6E10               	movwf	(??i2___altoft+3)& (0+255),c
 27898  00618C  500D               	movf	??i2___altoft,w,c
 27899  00618E  100E               	iorwf	??i2___altoft+1,w,c
 27900  006190  100F               	iorwf	??i2___altoft+2,w,c
 27901  006192  1010               	iorwf	??i2___altoft+3,w,c
 27902  006194  A4D8               	btfss	status,2,c
 27903  006196  D7E8               	goto	i2l8409
 27904  006198  C009  F001         	movff	i2___altoft@c,i2___ftpack@arg
 27905  00619C  C00A  F002         	movff	i2___altoft@c+1,i2___ftpack@arg+1
 27906  0061A0  C00B  F003         	movff	i2___altoft@c+2,i2___ftpack@arg+2
 27907  0061A4  C011  F004         	movff	i2___altoft@exp,i2___ftpack@exp
 27908  0061A8  C012  F005         	movff	i2___altoft@sign,i2___ftpack@sign
 27909  0061AC  EC4F  F02A         	call	i2___ftpack	;wreg free
 27910  0061B0  C001  F009         	movff	?i2___ftpack,?i2___altoft
 27911  0061B4  C002  F00A         	movff	?i2___ftpack+1,?i2___altoft+1
 27912  0061B8  C003  F00B         	movff	?i2___ftpack+2,?i2___altoft+2
 27913  0061BC  0012               	return	
 27914  0061BE                     __end_ofi2___altoft:
 27915                           	opt stack 0
 27916                           pclatu	equ	0xFFB
 27917                           pclath	equ	0xFFA
 27918                           tblptru	equ	0xFF8
 27919                           tblptrh	equ	0xFF7
 27920                           tblptrl	equ	0xFF6
 27921                           tablat	equ	0xFF5
 27922                           prodh	equ	0xFF4
 27923                           prodl	equ	0xFF3
 27924                           intcon	equ	0xFF2
 27925                           postinc0	equ	0xFEE
 27926                           fsr0h	equ	0xFEA
 27927                           fsr0l	equ	0xFE9
 27928                           wreg	equ	0xFE8
 27929                           postdec1	equ	0xFE5
 27930                           fsr1h	equ	0xFE2
 27931                           fsr1l	equ	0xFE1
 27932                           bsr	equ	0xFE0
 27933                           indf2	equ	0xFDF
 27934                           postinc2	equ	0xFDE
 27935                           postdec2	equ	0xFDD
 27936                           plusw2	equ	0xFDB
 27937                           fsr2h	equ	0xFDA
 27938                           fsr2l	equ	0xFD9
 27939                           status	equ	0xFD8
 27940                           
 27941 ;; *************** function i2___ftpack *****************
 27942 ;; Defined at:
 27943 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\float.c"
 27944 ;; Parameters:    Size  Location     Type
 27945 ;;  arg             3    0[COMRAM] unsigned um
 27946 ;;  exp             1    3[COMRAM] unsigned char 
 27947 ;;  sign            1    4[COMRAM] unsigned char 
 27948 ;; Auto vars:     Size  Location     Type
 27949 ;;		None
 27950 ;; Return value:  Size  Location     Type
 27951 ;;                  3    0[COMRAM] float 
 27952 ;; Registers used:
 27953 ;;		wreg, status,2, status,0
 27954 ;; Tracked objects:
 27955 ;;		On entry : 0/0
 27956 ;;		On exit  : 0/0
 27957 ;;		Unchanged: 0/0
 27958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27959 ;;      Params:         5       0       0       0       0       0       0
 27960 ;;      Locals:         0       0       0       0       0       0       0
 27961 ;;      Temps:          3       0       0       0       0       0       0
 27962 ;;      Totals:         8       0       0       0       0       0       0
 27963 ;;Total ram usage:        8 bytes
 27964 ;; Hardware stack levels used:    1
 27965 ;; This function calls:
 27966 ;;		Nothing
 27967 ;; This function is called by:
 27968 ;;		i2___altoft
 27969 ;; This function uses a non-reentrant model
 27970 ;;
 27971                           
 27972                           	psect	text121
 27973  00549E                     __ptext121:
 27974                           	opt stack 0
 27975  00549E                     i2___ftpack:
 27976                           	opt stack 9
 27977                           
 27978                           ;incstack = 0
 27979  00549E  5004               	movf	i2___ftpack@exp,w,c
 27980  0054A0  B4D8               	btfsc	status,2,c
 27981  0054A2  D005               	goto	i2l7183
 27982  0054A4  5001               	movf	i2___ftpack@arg,w,c
 27983  0054A6  1002               	iorwf	i2___ftpack@arg+1,w,c
 27984  0054A8  1003               	iorwf	i2___ftpack@arg+2,w,c
 27985  0054AA  A4D8               	btfss	status,2,c
 27986  0054AC  D00C               	goto	i2l7189
 27987  0054AE                     i2l7183:
 27988  0054AE  0E00               	movlw	0
 27989  0054B0  6E01               	movwf	?i2___ftpack,c
 27990  0054B2  0E00               	movlw	0
 27991  0054B4  6E02               	movwf	?i2___ftpack+1,c
 27992  0054B6  0E00               	movlw	0
 27993  0054B8  6E03               	movwf	?i2___ftpack+2,c
 27994  0054BA  0012               	return	
 27995  0054BC                     i2l7187:
 27996  0054BC  2A04               	incf	i2___ftpack@exp,f,c
 27997  0054BE  90D8               	bcf	status,0,c
 27998  0054C0  3203               	rrcf	i2___ftpack@arg+2,f,c
 27999  0054C2  3202               	rrcf	i2___ftpack@arg+1,f,c
 28000  0054C4  3201               	rrcf	i2___ftpack@arg,f,c
 28001  0054C6                     i2l7189:
 28002  0054C6  0E00               	movlw	0
 28003  0054C8  1401               	andwf	i2___ftpack@arg,w,c
 28004  0054CA  6E06               	movwf	??i2___ftpack& (0+255),c
 28005  0054CC  0E00               	movlw	0
 28006  0054CE  1402               	andwf	i2___ftpack@arg+1,w,c
 28007  0054D0  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 28008  0054D2  0EFE               	movlw	254
 28009  0054D4  1403               	andwf	i2___ftpack@arg+2,w,c
 28010  0054D6  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 28011  0054D8  5006               	movf	??i2___ftpack,w,c
 28012  0054DA  1007               	iorwf	??i2___ftpack+1,w,c
 28013  0054DC  1008               	iorwf	??i2___ftpack+2,w,c
 28014  0054DE  B4D8               	btfsc	status,2,c
 28015  0054E0  D00C               	goto	i2l7195
 28016  0054E2  D7EC               	goto	i2l7187
 28017  0054E4                     i2l7191:
 28018  0054E4  2A04               	incf	i2___ftpack@exp,f,c
 28019  0054E6  0E01               	movlw	1
 28020  0054E8  2601               	addwf	i2___ftpack@arg,f,c
 28021  0054EA  0E00               	movlw	0
 28022  0054EC  2202               	addwfc	i2___ftpack@arg+1,f,c
 28023  0054EE  0E00               	movlw	0
 28024  0054F0  2203               	addwfc	i2___ftpack@arg+2,f,c
 28025  0054F2  90D8               	bcf	status,0,c
 28026  0054F4  3203               	rrcf	i2___ftpack@arg+2,f,c
 28027  0054F6  3202               	rrcf	i2___ftpack@arg+1,f,c
 28028  0054F8  3201               	rrcf	i2___ftpack@arg,f,c
 28029  0054FA                     i2l7195:
 28030  0054FA  0E00               	movlw	0
 28031  0054FC  1401               	andwf	i2___ftpack@arg,w,c
 28032  0054FE  6E06               	movwf	??i2___ftpack& (0+255),c
 28033  005500  0E00               	movlw	0
 28034  005502  1402               	andwf	i2___ftpack@arg+1,w,c
 28035  005504  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 28036  005506  0EFF               	movlw	255
 28037  005508  1403               	andwf	i2___ftpack@arg+2,w,c
 28038  00550A  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 28039  00550C  5006               	movf	??i2___ftpack,w,c
 28040  00550E  1007               	iorwf	??i2___ftpack+1,w,c
 28041  005510  1008               	iorwf	??i2___ftpack+2,w,c
 28042  005512  B4D8               	btfsc	status,2,c
 28043  005514  D006               	goto	i2l7199
 28044  005516  D7E6               	goto	i2l7191
 28045  005518                     i2l7197:
 28046  005518  0604               	decf	i2___ftpack@exp,f,c
 28047  00551A  90D8               	bcf	status,0,c
 28048  00551C  3601               	rlcf	i2___ftpack@arg,f,c
 28049  00551E  3602               	rlcf	i2___ftpack@arg+1,f,c
 28050  005520  3603               	rlcf	i2___ftpack@arg+2,f,c
 28051  005522                     i2l7199:
 28052  005522  BE02               	btfsc	i2___ftpack@arg+1,7,c
 28053  005524  D003               	goto	i2l1264
 28054  005526  0E02               	movlw	2
 28055  005528  6004               	cpfslt	i2___ftpack@exp,c
 28056  00552A  D7F6               	goto	i2l7197
 28057  00552C                     i2l1264:
 28058  00552C  A004               	btfss	i2___ftpack@exp,0,c
 28059  00552E  9E02               	bcf	i2___ftpack@arg+1,7,c
 28060  005530  90D8               	bcf	status,0,c
 28061  005532  3204               	rrcf	i2___ftpack@exp,f,c
 28062  005534  5004               	movf	i2___ftpack@exp,w,c
 28063  005536  1203               	iorwf	i2___ftpack@arg+2,f,c
 28064  005538  5005               	movf	i2___ftpack@sign,w,c
 28065  00553A  A4D8               	btfss	status,2,c
 28066  00553C  8E03               	bsf	i2___ftpack@arg+2,7,c
 28067  00553E  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 28068  005542  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 28069  005546  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 28070  00554A  0012               	return	
 28071  00554C                     __end_ofi2___ftpack:
 28072                           	opt stack 0
 28073                           pclatu	equ	0xFFB
 28074                           pclath	equ	0xFFA
 28075                           tblptru	equ	0xFF8
 28076                           tblptrh	equ	0xFF7
 28077                           tblptrl	equ	0xFF6
 28078                           tablat	equ	0xFF5
 28079                           prodh	equ	0xFF4
 28080                           prodl	equ	0xFF3
 28081                           intcon	equ	0xFF2
 28082                           postinc0	equ	0xFEE
 28083                           fsr0h	equ	0xFEA
 28084                           fsr0l	equ	0xFE9
 28085                           wreg	equ	0xFE8
 28086                           postdec1	equ	0xFE5
 28087                           fsr1h	equ	0xFE2
 28088                           fsr1l	equ	0xFE1
 28089                           bsr	equ	0xFE0
 28090                           indf2	equ	0xFDF
 28091                           postinc2	equ	0xFDE
 28092                           postdec2	equ	0xFDD
 28093                           plusw2	equ	0xFDB
 28094                           fsr2h	equ	0xFDA
 28095                           fsr2l	equ	0xFD9
 28096                           status	equ	0xFD8
 28097                           pclatu	equ	0xFFB
 28098                           pclath	equ	0xFFA
 28099                           tblptru	equ	0xFF8
 28100                           tblptrh	equ	0xFF7
 28101                           tblptrl	equ	0xFF6
 28102                           tablat	equ	0xFF5
 28103                           prodh	equ	0xFF4
 28104                           prodl	equ	0xFF3
 28105                           intcon	equ	0xFF2
 28106                           postinc0	equ	0xFEE
 28107                           fsr0h	equ	0xFEA
 28108                           fsr0l	equ	0xFE9
 28109                           wreg	equ	0xFE8
 28110                           postdec1	equ	0xFE5
 28111                           fsr1h	equ	0xFE2
 28112                           fsr1l	equ	0xFE1
 28113                           bsr	equ	0xFE0
 28114                           indf2	equ	0xFDF
 28115                           postinc2	equ	0xFDE
 28116                           postdec2	equ	0xFDD
 28117                           plusw2	equ	0xFDB
 28118                           fsr2h	equ	0xFDA
 28119                           fsr2l	equ	0xFD9
 28120                           status	equ	0xFD8
 28121                           
 28122                           	psect	rparam
 28123  0000                     pclatu	equ	0xFFB
 28124                           pclath	equ	0xFFA
 28125                           tblptru	equ	0xFF8
 28126                           tblptrh	equ	0xFF7
 28127                           tblptrl	equ	0xFF6
 28128                           tablat	equ	0xFF5
 28129                           prodh	equ	0xFF4
 28130                           prodl	equ	0xFF3
 28131                           intcon	equ	0xFF2
 28132                           postinc0	equ	0xFEE
 28133                           fsr0h	equ	0xFEA
 28134                           fsr0l	equ	0xFE9
 28135                           wreg	equ	0xFE8
 28136                           postdec1	equ	0xFE5
 28137                           fsr1h	equ	0xFE2
 28138                           fsr1l	equ	0xFE1
 28139                           bsr	equ	0xFE0
 28140                           indf2	equ	0xFDF
 28141                           postinc2	equ	0xFDE
 28142                           postdec2	equ	0xFDD
 28143                           plusw2	equ	0xFDB
 28144                           fsr2h	equ	0xFDA
 28145                           fsr2l	equ	0xFD9
 28146                           status	equ	0xFD8
 28147                           
 28148                           	psect	temp
 28149  000050                     btemp:
 28150                           	opt stack 0
 28151  000050                     	ds	1
 28152  0000                     int$flags	set	btemp
 28153                           pclatu	equ	0xFFB
 28154                           pclath	equ	0xFFA
 28155                           tblptru	equ	0xFF8
 28156                           tblptrh	equ	0xFF7
 28157                           tblptrl	equ	0xFF6
 28158                           tablat	equ	0xFF5
 28159                           prodh	equ	0xFF4
 28160                           prodl	equ	0xFF3
 28161                           intcon	equ	0xFF2
 28162                           postinc0	equ	0xFEE
 28163                           fsr0h	equ	0xFEA
 28164                           fsr0l	equ	0xFE9
 28165                           wreg	equ	0xFE8
 28166                           postdec1	equ	0xFE5
 28167                           fsr1h	equ	0xFE2
 28168                           fsr1l	equ	0xFE1
 28169                           bsr	equ	0xFE0
 28170                           indf2	equ	0xFDF
 28171                           postinc2	equ	0xFDE
 28172                           postdec2	equ	0xFDD
 28173                           plusw2	equ	0xFDB
 28174                           fsr2h	equ	0xFDA
 28175                           fsr2l	equ	0xFD9
 28176                           status	equ	0xFD8


Data Sizes:
    Strings     595
    Constant    118
    Data        75
    BSS         78
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     42      79
    BANK0           160     69     108
    BANK1           256    119     196
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK1[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_42(CODE[17]), STR_41(CODE[18]), STR_40(CODE[17]), STR_39(CODE[18]), 
		 -> STR_38(CODE[17]), STR_37(CODE[18]), STR_36(CODE[7]), STR_35(CODE[18]), 
		 -> STR_34(CODE[19]), STR_33(CODE[18]), STR_32(CODE[18]), STR_31(CODE[18]), 
		 -> STR_30(CODE[18]), STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[18]), 
		 -> STR_26(CODE[17]), STR_25(CODE[25]), STR_24(CODE[18]), STR_23(CODE[7]), 
		 -> STR_22(CODE[18]), STR_21(CODE[16]), STR_20(CODE[18]), STR_19(CODE[7]), 
		 -> STR_18(CODE[18]), STR_17(CODE[15]), STR_16(CODE[18]), STR_15(CODE[15]), 
		 -> STR_14(CODE[18]), STR_13(CODE[16]), STR_12(CODE[18]), STR_11(CODE[15]), 
		 -> STR_10(CODE[18]), STR_9(CODE[17]), STR_8(CODE[15]), STR_7(CODE[18]), 
		 -> STR_6(CODE[18]), STR_5(CODE[18]), STR_4(CODE[18]), STR_3(CODE[18]), 
		 -> STR_2(CODE[18]), STR_1(CODE[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK1[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _hp_isr in COMRAM

    _hp_isr->_T4int
    _T4int->i2___ftge
    i2___ftge->i2___altoft
    i2___altoft->i2___ftpack

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_UARTint
    _UARTint->i1_longPressENTER
    i1_sysParamInit->i1_calcSysVars
    i1_pressUP->i1_chanValDigUP
    i1_pressENTER->i1_desintegrator
    i1_desintegrator->i1___ftmul
    i1_pressDOWN->i1_chanValDigDOWN
    i1_longPressENTER->i1_integrator
    i1_integrator->i1___ftdiv
    i1___altoft->i1___ftpack
    i1___ftadd->i1___ftpack
    i1_calcVars2ti->i1___ftdiv
    i1___ftdiv->i1___altoft
    i1_calcSysVars->i1___ftmul
    i1___ftmul->i1___ftpack
    _T2int->i1_setPWM2duty
    _saveProcessState->i1_writeEEPROM

Critical Paths under _hp_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _sysParamInit->_calcSysVars
    _calcSysVars->___ftmul
    _lcd_init->_lcd_send_byte
    _drawScreen->_drawSNquest
    _drawSNquest->_printf
    _drawPassWord->_printf
    _drawMenu->_printf
    _drawChanVal->_printf
    _drawCalibProc->_printf
    _drawBadPass->_printf
    _drawPass1Lin->_printf
    _drawAutoCalibRM->_printf
    _drawValEditor->_printf
    _drawAdvON->_printf
    _printf->___ftsub
    _scale->___ftmul
    _putch->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_send_byte->_lcd_send_4bits
    _lcd_read_byte->_lcd_read_4bits
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___ftsub->___ftadd
    _pressUP->_chanValDigUP
    _pressENTER->_desintegrator
    _desintegrator->___fttol
    ___fttol->_scale
    _pressDOWN->_chanValDigDOWN
    _longPressENTER->___ftadd
    _integrator->___ftdiv
    ___altoft->___ftpack
    _calcVars2ti->___ftmul
    ___ftmul->___wmul
    ___ftdiv->___altoft
    ___ftadd->_fround
    _PWM2Config->_setPWM2duty

Critical Paths under _isr in BANK1

    None.

Critical Paths under _hp_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _hp_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _hp_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _hp_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _hp_isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  897012
                       _EEPROMConfig
                         _PWM2Config
                         _UARTConfig
                     _buttonChecking
                        _clockConfig
                         _drawScreen
                    _interruptConfig
                           _ioConfig
                          _ioInitStt
                           _lcd_init
                        _setPWM2duty
                          _setPWM2on
                       _sysParamInit
                           _t4config
 ---------------------------------------------------------------------------------
 (1) _t4config                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _sysParamInit                                         0     0      0    5932
                        _calcSysVars
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (2) _readEEPROM                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _calcSysVars                                          3     3      0    5901
                                             35 BANK1      3     3      0
                            ___ftmul
 ---------------------------------------------------------------------------------
 (1) _setPWM2on                                            1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             6     6      0    1879
                                              8 BANK1      6     6      0
                     _lcd_send_4bits
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _ioInitStt                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ioConfig                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _interruptConfig                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _drawScreen                                           0     0      0  827134
                          _drawAdvON
                    _drawAutoCalibRM
                        _drawBadPass
                      _drawCalibProc
                        _drawChanVal
                           _drawMenu
                       _drawPassWord
                        _drawSNquest
 ---------------------------------------------------------------------------------
 (2) _drawSNquest                                          3     3      0   69253
                                            116 BANK1      3     3      0
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawPassWord                                         2     2      0  134960
                                            116 BANK1      2     2      0
                       _drawPass1Lin
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawMenu                                             1     1      0   73849
                                            116 BANK1      1     1      0
                         _lcd_gotoxy
                           _lcd_putc
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawChanVal                                          0     0      0  138060
                      _drawValEditor
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawCalibProc                                        0     0      0   69030
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawBadPass                                          0     0      0  134861
                       _drawPass1Lin
                             _printf
 ---------------------------------------------------------------------------------
 (3) _drawPass1Lin                                         0     0      0   69030
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawAutoCalibRM                                      0     0      0  138060
                      _drawValEditor
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (3) _drawValEditor                                        0     0      0   69030
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (2) _drawAdvON                                            1     1      0   69061
                                            116 BANK1      1     1      0
                         _lcd_gotoxy
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              54    36     18   65831
                                             63 BANK1     53    35     18
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3   13403
                                             35 BANK1      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0    4695
                                             13 BANK1      1     1      0
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (5) _lcd_putc                                             2     2      0    4664
                                             11 BANK1      2     2      0
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (6) _lcd_gotoxy                                           3     2      1    3199
                                              8 BANK1      3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (2) _lcd_send_byte                                        3     2      1    1403
                                              5 BANK1      3     2      1
                      _lcd_read_byte
                     _lcd_send_4bits
 ---------------------------------------------------------------------------------
 (3) _lcd_send_4bits                                       5     5      0     272
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (3) _lcd_read_byte                                        2     2      0     114
                                              2 BANK1      2     2      0
                     _lcd_read_4bits
 ---------------------------------------------------------------------------------
 (4) _lcd_read_4bits                                       2     2      0      46
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3   13124
                                             35 BANK1     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    3004
                                             14 BANK1      6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1819
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1985
                                              6 BANK1      8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     608
                                              0 BANK1     15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          12     6      6     827
                                              0 BANK1     12     6      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    2703
                                              8 BANK1      9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     848
                                             13 BANK1      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     703
                                              0 BANK1     13     5      8
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    4843
                                             57 BANK1      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     142
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     744
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (1) _clockConfig                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _buttonChecking                                       0     0      0   60442
                           _delay_ms
                      _longPressDOWN
                     _longPressENTER
                     _longPressRETRO
                        _longPressUP
                          _pressDOWN
                         _pressENTER
                         _pressRETRO
                            _pressUP
                        _releaseDOWN
                       _releaseENTER
                       _releaseRETRO
                          _releaseUP
 ---------------------------------------------------------------------------------
 (2) _releaseUP                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseRETRO                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseENTER                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _releaseDOWN                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pressUP                                              1     1      0       0
                                              5 BANK1      1     1      0
                       _chanValDigUP
 ---------------------------------------------------------------------------------
 (3) _chanValDigUP                                         5     5      0       0
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (2) _pressRETRO                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _pressENTER                                           0     0      0   20172
                          _checkPass
                     _confirmEdition
                      _desintegrator
                        _setPWM2duty
 ---------------------------------------------------------------------------------
 (3) _desintegrator                                       19    19      0    7900
                                             57 BANK1     19    19      0
                            ___aldiv
                            ___ftmul
                            ___fttol
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     508
                                             42 BANK1     15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8     599
                                              0 BANK1     14     6      8
 ---------------------------------------------------------------------------------
 (3) _checkPass                                            7     7      0     170
                                              0 BANK1      7     7      0
 ---------------------------------------------------------------------------------
 (2) _pressDOWN                                            1     1      0       0
                                              5 BANK1      1     1      0
                     _chanValDigDOWN
 ---------------------------------------------------------------------------------
 (3) _chanValDigDOWN                                       5     5      0       0
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (2) _longPressUP                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _longPressRETRO                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _longPressENTER                                       6     6      0   39026
                                             57 BANK1      6     6      0
                            ___ftadd
                            ___ftdiv
                        _calcVars2ti
                     _confirmEdition
                         _integrator
                        _setPWM2duty
 ---------------------------------------------------------------------------------
 (3) _integrator                                          12    12      0    7899
                                             33 BANK1     12    12      0
                           ___altoft
                            ___ftdiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     558
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    2847
                                              8 BANK1     10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) _confirmEdition                                       1     1      0   11305
                                             35 BANK1      1     1      0
                      _saveSysParams
 ---------------------------------------------------------------------------------
 (4) _saveSysParams                                        0     0      0   11181
                        _calcVars2ti
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (5) _writeEEPROM                                          2     1      1     993
                                              0 BANK1      2     1      1
 ---------------------------------------------------------------------------------
 (5) _calcVars2ti                                          0     0      0   10188
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5898
                                             20 BANK1     15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             15     9      6    4290
                                             18 BANK1     15     9      6
                           ___altoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    4479
                                             45 BANK1     12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (2) _longPressDOWN                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2    1244
                                              0 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 (1) _UARTConfig                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM2Config                                           0     0      0     797
                        _setPWM2duty
                           _t2config
 ---------------------------------------------------------------------------------
 (2) _t2config                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _setPWM2duty                                          6     4      2     797
                                              0 BANK1      6     4      2
 ---------------------------------------------------------------------------------
 (1) _EEPROMConfig                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _isr                                                17    17      0   34578
                                             52 BANK0     17    17      0
                              _T2int
                            _UARTint
 ---------------------------------------------------------------------------------
 (12) _UARTint                                             1     1      0   33406
                                             51 BANK0      1     1      0
                      _loadSysParams
                          _putchUART
                    i1_longPressDOWN
                   i1_longPressENTER
                   i1_longPressRETRO
                      i1_longPressUP
                        i1_pressDOWN
                       i1_pressENTER
                       i1_pressRETRO
                          i1_pressUP
                    i1_saveSysParams
                     i1_sysParamInit
 ---------------------------------------------------------------------------------
 (13) i1_sysParamInit                                      0     0      0    1565
                      i1_calcSysVars
                       i1_readEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_readEEPROM                                        1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (13) i1_pressUP                                           1     1      0       0
                                              5 BANK0      1     1      0
                     i1_chanValDigUP
 ---------------------------------------------------------------------------------
 (14) i1_chanValDigUP                                      5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (13) i1_pressRETRO                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_pressENTER                                        0     0      0    7527
                        i1_checkPass
                   i1_confirmEdition
                    i1_desintegrator
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (14) i1_desintegrator                                    19    19      0    3065
                                             23 BANK0     19    19      0
                          i1___aldiv
                          i1___ftmul
                          i1___fttol
                           i1___lmul
 ---------------------------------------------------------------------------------
 (15) i1___fttol                                          15    11      4     406
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (15) i1___aldiv                                          14     6      8     515
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (14) i1_checkPass                                         7     7      0     170
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (13) i1_pressDOWN                                         1     1      0       0
                                              5 BANK0      1     1      0
                   i1_chanValDigDOWN
 ---------------------------------------------------------------------------------
 (14) i1_chanValDigDOWN                                    5     5      0       0
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (13) i1_longPressUP                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_longPressRETRO                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (13) i1_longPressENTER                                    6     6      0   14730
                                             45 BANK0      6     6      0
                          i1___ftadd
                          i1___ftdiv
                      i1_calcVars2ti
                   i1_confirmEdition
                       i1_integrator
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (14) i1_integrator                                       12    12      0    3225
                                             33 BANK0     12    12      0
                         i1___altoft
                          i1___ftdiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (15) i1___lmul                                           12     4      8     276
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (15) i1___altoft                                         10     6      4    1002
                                              8 BANK0     10     6      4
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (14) i1_confirmEdition                                    1     1      0    3915
                                             33 BANK0      1     1      0
                    i1_saveSysParams
 ---------------------------------------------------------------------------------
 (14) i1___ftadd                                          12     6      6    2128
                                              8 BANK0     12     6      6
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (13) i1_longPressDOWN                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _putchUART                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (13) _loadSysParams                                       0     0      0    5325
                      i1_calcSysVars
                    i1_saveSysParams
 ---------------------------------------------------------------------------------
 (13) i1_saveSysParams                                     0     0      0    3791
                      i1_calcVars2ti
                      i1_writeEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_calcVars2ti                                       0     0      0    3274
                          i1___ftdiv
                          i1___ftmul
 ---------------------------------------------------------------------------------
 (15) i1___ftdiv                                          15     9      6    1743
                                             18 BANK0     15     9      6
                         i1___altoft (ARG)
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (14) i1_calcSysVars                                       3     3      0    1534
                                             23 BANK0      3     3      0
                          i1___ftmul
 ---------------------------------------------------------------------------------
 (15) i1___ftmul                                          15     9      6    1531
                                              8 BANK0     15     9      6
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (16) i1___ftpack                                          8     3      5     763
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (12) _T2int                                               1     1      0    1172
                                              6 BANK0      1     1      0
                   _saveProcessState
                         i1_delay_ms
                      i1_setPWM2duty
 ---------------------------------------------------------------------------------
 (14) i1_setPWM2duty                                       6     4      2     377
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (13) i1_delay_ms                                          5     3      2     278
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (13) _saveProcessState                                    0     0      0     517
                      i1_writeEEPROM
 ---------------------------------------------------------------------------------
 (14) i1_writeEEPROM                                       2     1      1     517
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (19) _hp_isr                                             14    14      0     827
                                             28 COMRAM    14    14      0
                              _T4int
 ---------------------------------------------------------------------------------
 (20) _T4int                                               1     1      0     827
                                             27 COMRAM     1     1      0
                         i2___altoft
                           i2___ftge
                      i2_setPWM2duty
 ---------------------------------------------------------------------------------
 (21) i2_setPWM2duty                                       6     4      2     166
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (21) i2___ftge                                            9     3      6     188
                                             18 COMRAM     9     3      6
                         i2___altoft (ARG)
 ---------------------------------------------------------------------------------
 (21) i2___altoft                                         10     6      4     473
                                              8 COMRAM    10     6      4
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (22) i2___ftpack                                          8     3      5     309
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 22
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROMConfig
   _PWM2Config
     _setPWM2duty
     _t2config
   _UARTConfig
   _buttonChecking
     _delay_ms
     _longPressDOWN
     _longPressENTER
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv
         ___altoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       _calcVars2ti
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _confirmEdition
         _saveSysParams
           _calcVars2ti
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _writeEEPROM
       _integrator
         ___altoft
           ___ftpack
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___lmul
       _setPWM2duty
     _longPressRETRO
     _longPressUP
     _pressDOWN
       _chanValDigDOWN
     _pressENTER
       _checkPass
       _confirmEdition
         _saveSysParams
           _calcVars2ti
             ___ftdiv
               ___altoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           _writeEEPROM
       _desintegrator
         ___aldiv
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lmul
       _setPWM2duty
     _pressRETRO
     _pressUP
       _chanValDigUP
     _releaseDOWN
     _releaseENTER
     _releaseRETRO
     _releaseUP
   _clockConfig
   _drawScreen
     _drawAdvON
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawAutoCalibRM
       _drawValEditor
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawBadPass
       _drawPass1Lin
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawCalibProc
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawChanVal
       _drawValEditor
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawMenu
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _lcd_putc
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawPassWord
       _drawPass1Lin
         _lcd_gotoxy
           _lcd_send_byte
             _lcd_read_byte
               _lcd_read_4bits
             _lcd_send_4bits
         _printf
           ___awdiv
             ___awmod (ARG)
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftge
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftpack
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           ___lltoft
             ___ftpack
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           __div_to_l_
           __tdiv_to_l_
           _fround
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _isdigit
           _putch
             _lcd_putc
               _lcd_gotoxy
                 _lcd_send_byte
                   _lcd_read_byte
                     _lcd_read_4bits
                   _lcd_send_4bits
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
           _scale
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _drawSNquest
       _lcd_gotoxy
         _lcd_send_byte
           _lcd_read_byte
             _lcd_read_4bits
           _lcd_send_4bits
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _isdigit
         _putch
           _lcd_putc
             _lcd_gotoxy
               _lcd_send_byte
                 _lcd_read_byte
                   _lcd_read_4bits
                 _lcd_send_4bits
             _lcd_send_byte
               _lcd_read_byte
                 _lcd_read_4bits
               _lcd_send_4bits
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
   _interruptConfig
   _ioConfig
   _ioInitStt
   _lcd_init
     _lcd_send_4bits
     _lcd_send_byte
       _lcd_read_byte
         _lcd_read_4bits
       _lcd_send_4bits
   _setPWM2duty
   _setPWM2on
   _sysParamInit
     _calcSysVars
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readEEPROM
   _t4config

 _isr (ROOT)
   _T2int
     _saveProcessState
       i1_writeEEPROM
     i1_delay_ms
     i1_setPWM2duty
   _UARTint
     _loadSysParams
       i1_calcSysVars
         i1___ftmul
           i1___ftpack
       i1_saveSysParams
         i1_calcVars2ti
           i1___ftdiv
             i1___altoft (ARG)
               i1___ftpack
             i1___ftpack (ARG)
           i1___ftmul
             i1___ftpack
         i1_writeEEPROM
     _putchUART
     i1_longPressDOWN
     i1_longPressENTER
       i1___ftadd
         i1___ftpack
       i1___ftdiv
         i1___altoft (ARG)
           i1___ftpack
         i1___ftpack (ARG)
       i1_calcVars2ti
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___ftmul
           i1___ftpack
       i1_confirmEdition
         i1_saveSysParams
           i1_calcVars2ti
             i1___ftdiv
               i1___altoft (ARG)
                 i1___ftpack
               i1___ftpack (ARG)
             i1___ftmul
               i1___ftpack
           i1_writeEEPROM
       i1_integrator
         i1___altoft
           i1___ftpack
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___lmul
       i1_setPWM2duty
     i1_longPressRETRO
     i1_longPressUP
     i1_pressDOWN
       i1_chanValDigDOWN
     i1_pressENTER
       i1_checkPass
       i1_confirmEdition
         i1_saveSysParams
           i1_calcVars2ti
             i1___ftdiv
               i1___altoft (ARG)
                 i1___ftpack
               i1___ftpack (ARG)
             i1___ftmul
               i1___ftpack
           i1_writeEEPROM
       i1_desintegrator
         i1___aldiv
         i1___ftmul
           i1___ftpack
         i1___fttol
         i1___lmul
       i1_setPWM2duty
     i1_pressRETRO
     i1_pressUP
       i1_chanValDigUP
     i1_saveSysParams
       i1_calcVars2ti
         i1___ftdiv
           i1___altoft (ARG)
             i1___ftpack
           i1___ftpack (ARG)
         i1___ftmul
           i1___ftpack
       i1_writeEEPROM
     i1_sysParamInit
       i1_calcSysVars
         i1___ftmul
           i1___ftpack
       i1_readEEPROM

 _hp_isr (ROOT)
   _T4int
     i2___altoft
       i2___ftpack
     i2___ftge
       i2___altoft (ARG)
         i2___ftpack
     i2_setPWM2duty

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     77      C4       6       76.6%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     45      6C       4       67.5%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2A      4F       1       84.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     17F       9        0.0%
DATA                 0      0     17F      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Nov 06 17:05:47 2016

      __end_ofi1_pressDOWN 47C4               ___altoft@exp 0110                 i1___altoft 586E  
     __end_ofi1_pressENTER 1FBA                 i1___ftpack 44A4            ?_lcd_send_4bits 0001  
     __end_ofi1_pressRETRO 5A44            ??_desintegrator 0139              ___altoft@sign 0111  
         i2setPWM2duty@act 0005                         l91 6B1C             ?_lcd_send_byte 0105  
             ___awdiv@sign 010B                         _fd 01BC                         _ie 00CA  
            _holdRETROcont 01BF           ?i1_saveSysParams 0001                         _pi 0047  
               i2___altoft 6146                         bsr 000FE0            ?_confirmEdition 0001  
      ___wmul@multiplicand 0110     __size_ofi1_calcVars2ti 0058                 i2___ftpack 549E  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000               ___ftadd@exp1 0138               ___ftadd@exp2 0137  
             i1___altoft@c 0068                drawMenu@adv 0174               ___ftadd@sign 0136  
                      l100 6834                        l416 4A7E                        l513 6BAC  
                      l281 6BD8                        l275 6B54                        l373 2A9C  
                      l382 2BB2                        l367 2A22                        l552 481C  
                      l376 2AFA                        l537 2DA4                        l705 1BF8  
                      l555 4850                        l379 2B54                        l476 5B3E  
                      l644 593A                        l549 47EC                        l558 4884  
                      l399 4ACC                        l680 1A86                        l824 1FDE  
                      l851 2156                        l684 1AAC                        l860 21E2  
                      l836 208A                        l685 1AC4                        l686 1AD8  
                      l848 2136               i1___ftadd@f1 0068               i1___ftadd@f2 006B  
                      l955 09F0                        l989 0870               __CFG_CPB$OFF 000000  
    i1setPWM2duty@actuator 0060                        _PR2 000FBB                        _PR4 000F52  
             __CFG_CPD$OFF 000000                 i1_delay_ms 6856     __size_ofi1_calcSysVars 006A  
                      _isr 0018               i1___ftdiv@f1 0072               i1___ftdiv@f2 0075  
             i1___ftdiv@f3 007C    __end_of_interruptConfig 6C8E               ___awmod@sign 0105  
                      prod 000FF3                        wreg 000FE8  __size_ofi1_longPressENTER 02E4  
               _TXSTA1bits 000FAC               __CFG_IESO$ON 000000               drawSNquest@i 0174  
__size_ofi1_longPressRETRO 0058               i1___ftmul@f1 0068               i1___ftmul@f2 006B  
             i1___fttol@f1 0060               __CFG_LVP$OFF 000000                i1_checkPass 5E44  
           i1___aldiv@sign 0069               ___ftdiv@cntr 011B               ___ftdiv@sign 0120  
                     l1302 26B8                       l1311 26E2                       l1232 33FA  
                     l1322 37DE                       l1330 3058                       l1411 51B0  
                     l1421 5ACC                       l1264 4470                       l1336 30D8  
                     l1361 6A34                       l1329 3014                       l1291 25BA  
                     l1293 25E2                       l1287 2580                       l6221 3A6C  
                     l6213 3A40                       l6223 3A76                       l6209 3A2C  
                     l6227 3A92                       l6219 3A5C            ??_drawCalibProc 0174  
                     l6191 399A                       l9201 43D4                       l9211 4462  
                     l9203 4404                       ?_isr 0001                       l9301 25C8  
                     l9223 4496                       l9207 4424                       l9217 447A  
                     l9209 4454                       l9153 5D5C                       l9323 2648  
                     l9307 25D8                       l9147 5D3E                       l9325 2656  
                     l9317 261A                       l9165 5D98                       l9343 270C  
                     l9335 269E                       l9327 2664                       l9415 3480  
                     l9511 562E                       l9503 560A                       l9159 5D7A  
                     l9271 600E                       l9353 275A                       l9337 26AC  
                     l9329 2670                       l9433 34EC                       l9409 3446  
                     l9513 563A                       l9177 68A2                       l9185 69F2  
                     l9273 601C                       l9265 5FE0                       l9195 43B2  
                     l9363 3702                       l9443 352A                       l9515 5640  
                     l9523 5672                       l9507 561A                       l9275 602A  
                     l9267 5FEE                       l9429 34CE                       l9199 43C6  
                     l9295 258E                       l9439 350C                       l9471 4FDC  
                     l9527 5686                       l9519 5664                       l9711 6A8C  
                     l9279 6036                       l9369 373C                       l9721 2F86  
                     l9473 4FE8                       l9465 4FBE                       l9491 5040  
                     l9483 501E                       l9475 4FEE                       l9459 4FA8  
                     l9389 379C                       l9901 5F66                       l9821 33C4  
                     l9805 3378                       l9661 24D0                       l9653 23EC  
                     l9903 5F76                       l9727 2FC0                       l9487 502C  
                     l9817 33B0                       l9761 30A2                       l9681 0F2C  
                     l9843 4F04                       l9835 670C                       l9827 33E0  
                     l9675 0E66                       l9853 4F88                       l9829 33F0  
                     l9757 308E                       l9693 10B6                       l9685 0F52  
                     l9847 4F44                       l9871 514A                       l9783 32D0  
                     l9767 30BE                       STR_1 7EC1                       STR_2 7ED3  
                     l9777 32AA                       l9769 30CE                       STR_3 7F1B  
                     STR_4 7EE5                       l9867 5134                       l9891 5A76  
                     l9699 117C                       STR_5 7EF7                       STR_6 7F09  
                     l9869 5144                       l9797 3324                       l9973 00E8  
                     STR_7 7E1F                       STR_8 7FB4                       l9879 519E  
                     l9895 5ABA                       l9887 5A60                       STR_9 7F82  
                     l9889 5A70                       l9993 01B8                       l9969 00D2  
                     l9979 011A                       l9987 0190                       l9997 01FE  
                     l9999 0214               printf@tmpval 0162                       u7601 3976  
                     u7620 39C0                       u7625 39B6             ??_drawPass1Lin 0174  
            __CFG_FCMEN$ON 000000                lcd_putc@cha 010C            __end_of_UARTint 4174  
                     _main 6736       __size_of_calcVars2ti 0058               ___ftpack@arg 0100  
             i2___altoft@c 0009               ___ftpack@exp 0103           lcd_read_byte@low 0102  
                     fsr0h 000FEA                       fsr1h 000FE2                       fsr0l 000FE9  
                     fsr2h 000FDA                       fsr1l 000FE1                       indf2 000FDF  
                     fsr2l 000FD9                       btemp 0050              __CFG_BORV$285 000000  
           ??_drawPassWord 0174                       pclat 000FFA               i2___ftge@ff1 0013  
             i2___ftge@ff2 0016              i1___ftdiv@exp 007F                       prodh 000FF4  
                     prodl 000FF3                       start 00BE            ?_longPressENTER 0001  
     __size_of_calcSysVars 006A            ?_longPressRETRO 0001              drawSNquest@tq 0176  
    __size_of_sysParamInit 00A0       __end_of_EEPROMConfig 6C94               ___ftmul@cntr 0121  
             ___param_bank 000010                _writeEEPROM 6B3A               ___ftmul@sign 0122  
            i1___ftmul@exp 0071               ___fttol@exp1 0138               ___fttol@lval 0134  
                    ??_isr 0094             i1___altoft@exp 0070    i1___ftmul@f3_as_product 0072  
             _BAUDCON1bits 000FB8                      l10011 0252                      l10003 0224  
                    l10101 05C8                      l10021 02A2                      l10005 022A  
                    l10111 0626                      l10031 02E8                      l10015 0278  
                    l10025 02B6                      l10017 0284                      l10041 0344  
                    l10211 0A90                      l10203 0A64                      l10115 068C  
                    l10035 0300                      l10027 02D0                      l10019 028A  
                    l11003 507E                      l10301 3EAC                      l10141 0758  
                    l10133 0728                      l10117 0692                      l10311 3F06  
                    l10303 3EB2                      l10231 0B2E                      l10223 0AD6  
                    l10143 076C                      l10047 035E                      l10039 0306  
                    l11103 5F32                      l10209 0A8A                      l10161 0852  
                    l10153 0822                      l10137 074A                      l10129 06D8  
                    l10081 04C6                      l10073 0456                      l10057 03A4  
                    l11009 50B4                      l11025 4AD6                      l10331 57FC  
                    l11211 4620                      l10315 3F18                      l11131 419E  
                    l10251 0BE6                      l10243 0B9A                      l10227 0AFE  
                    l10171 0898                      l10155 0830                      l10147 0794  
                    l10139 0750                      l10091 0550                      l11051 66D8  
                    l11019 50E6                      l11035 4B08                      l10333 580C  
                    l11301 6570                      l11205 45D4                      l11125 4186  
                    l10261 0C34                      l10253 0BF2                      l10245 0BA4  
                    l10237 0B62                      l10181 09C6                      l10165 0874  
                    l10085 04F4                      l10501 17E2                      l11029 4AEC  
                    l12005 557A                      l10271 61D0                      l11231 467C  
                    l10319 3F34                      l11151 4238                      l10183 09D4  
                    l10175 08EA                      l10159 083E                      l10087 050A  
                    l11055 49BE                      l12023 55C0                      l10601 3C16  
                    l11305 6582                      l11233 4686                      l11225 466A  
                    l11401 1C10                      l11145 4216                      l11137 41EE  
                    l10265 0CBE                      l10257 0C0C                      l10249 0BDC  
                    l10097 059A                      l10089 053A                      l10513 194A  
                    l10505 185A                      l10521 1A34                      l11081 4A64  
                    l11073 4A2E                      l11065 49F0                      l12017 55A2  
                    l12009 5584                      l10275 61F6                      l11219 4648  
                    l11323 1A72                      l11155 4244                      l11163 4258  
                    l10187 09E2                      l10267 0CD4                      l11059 49D4  
                    l12027 55CA                      l10533 5B08                      l10613 3CC6  
                    l10605 3C2C                      l11181 62E4                      l11229 4676  
                    l11237 468C                      l10541 5DC6                      l10293 3E6E  
                    l11405 1C22                      l11333 1A9E                      l11325 1A7A  
                    l11157 424A                      l11165 4276                      l10517 19C0  
                    l10509 18D2                      l11077 4A48                      l12061 5358  
                    l12053 533C                      l11511 12F4                      l11175 62C6  
                    l11239 46AA                      l10551 5E36                      l10287 3E50  
                    l11159 4252                      l10199 0A3C                      l12071 537E  
                    l12063 5360                      l12055 5344                      l10537 5B2A  
                    l10617 47CA                      l11513 12FC                      l11185 62F6  
                    l10545 5DDC                      l11345 1AF0                      l11353 1B08  
                    l11281 5986                      l11265 5940                      l12073 5386  
                    l12065 5368                      l12057 534A                      l12081 539A  
                    l10627 47FE                      l11187 62FE                      l10555 5E3E  
                    l10299 3E9C                      l11443 1CDA                      l11355 1B2C  
                    l11275 596C                      l11259 591C                      l11099 5F08  
                    l12075 538E                      l12067 536E                      l12059 5350  
                    l10637 482E                      l10549 5E2E                      l11445 1CE2  
                    l11373 1B6E                      l11277 5974                      l12405 2052  
                    l12077 5394                      l12069 5376                      l10647 4862  
                    l11295 6558                      l11199 45C2                      l11439 1CCC  
                    l11391 1BDE                      l11375 1B80                      l11359 1B3E  
                    l12503 2202                      l12407 2058                      l11537 13B0  
                    l11465 11E0                      l11385 1BC4                      l12513 2234  
                    l12505 2212                      l12425 20AA                      l12409 2066  
                    l10659 4896                      l11539 13B8                      l11483 1232  
                    l11475 120A                      l11459 11C2                      l11387 1BCA  
                    l12523 2256                      l12435 20DC                      l12427 20BA  
                    l11469 11F2                      l10589 2C9C                      l11397 1BFE  
                    l12525 225C                      l12517 2240                      l12445 20FE  
                    l10941 2A68                      l10933 2A1C                      l10925 29EE  
                    l12613 6776                      l12447 2104                      l12439 20E8  
                    l10881 681C                      l12473 2188                      l12465 2166  
                    l12449 2112                      l12385 1FFE                      l10961 2AF4  
                    l10953 2AC6                      l12483 21AA                      l12395 2030  
                    l12387 200E                      l10939 2A56                      l12485 21B0  
                    l12477 2194                      l10973 2B4E                      l10965 2B20  
                    l10949 2A96                      l12487 21BE                      l12399 203C  
                    l10991 2BDC                      l10985 2BAC                      l10977 2B7E  
                    l10995 504C            __end_of___aldiv 3F46    __end_ofi1_desintegrator 2F4C  
                    ?_main 0001            __end_of___awdiv 504A                      _EEADR 000FA9  
          __end_of___ftadd 2780                      STR_10 7E55                      STR_11 7FC3  
                    STR_20 7E79                      STR_12 7E79                      STR_21 7FA4  
                    STR_13 7FA4                      STR_22 7DFB                      STR_30 7E8B  
                    STR_14 7DFB                      STR_23 7FF7                      STR_15 7FD2  
                    STR_31 7E9D                      STR_40 7F3E                      STR_32 7E43  
                    STR_16 7E0D                      STR_24 7DE9                      STR_41 7EAF  
                    STR_17 7FE1                      STR_33 7E31                      STR_25 7DAB  
                    STR_18 7E55                      STR_26 7F60                      STR_42 7F4F  
                    STR_34 7DC4                      STR_19 7FF0                      STR_27 7E67  
                    STR_35 7DD7                      STR_36 7FF0                      STR_28 7F71  
          __end_of___awmod 5690                      STR_29 7F93                      STR_37 7EAF  
                    STR_38 7F2D                      STR_39 7EAF            __end_of___ftdiv 3814  
          __end_of___ftneg 6A42            __end_of___lldiv 51C2            __end_of___ftmul 356A  
          ___awdiv@divisor 0108            __end_of___llmod 5ADE            __end_of___ftsub 6736  
            lcd_init@F7567 00A5                      u13141 252E            __end_of___fttol 3AA4  
                    u13151 254C                      u13401 3422                      u13421 345C  
                    u15110 2C9A                      u14230 03EA                      u13351 36DE  
                    u13371 3718                      u14235 03DE                      u14420 0868  
                    u14085 527A                      u14086 527C                      u12830 6062  
                    u12840 6074                      u12905 5D66                      u12850 608E  
                    u12906 5D68                      u13811 2F9C                      u16140 4654  
                    u12860 60AE                      u12836 6064                      u12925 5D84  
                    u16150 4656                      u12926 5D86                      u12848 6078  
                    u12945 5DA2                      u12858 6092                      u12946 5DA4  
                    u16500 1B7A                      u12868 60B2                      u12885 5D48  
                    u12965 68BA                      u12886 5D4A                      u12966 68BC  
                    u13791 2F62                      u16520 1B96                      u16530 1B98  
                    u15920 4222                      u16490 1B78                      u15930 4224  
                    u16760 122A                      u18440 2016                      u16770 122C  
                    u16860 147E                      u16870 1480                      u18550 20C2  
                    u18446 2018                      i1l100 687A                      u18660 216E  
                    u18556 20C4                      u18770 221A                      u18666 2170  
                    u18917 556A                      u18927 5592                      u18776 221C  
                    i1l225 6C42                      u18937 55B0                      u18947 6002  
                    u18957 5DAC                      u18967 6824                      i1l281 6C04  
                    i1l275 6B74                      i1l552 4912                      i1l537 2F4A  
                    i1l705 1EB4                      i1l482 3160                      i1l555 4946  
                    i1l476 5BD2                      i1l644 59D6                      i1l549 48E2  
                    i1l558 497A                      i1l495 3224                      i1l680 1D42  
                    i1l684 1D68                      i1l685 1D80                      i1l686 1D94  
              ?_UARTConfig 0001                      i1l881 0076                      i2l476 63D8  
                    i2l876 610A            ___awdiv@counter 010A              __CFG_WDTPS$32 000000  
                    _T2int 30EA             i1___ftadd@exp1 0073             i1___ftadd@exp2 0072  
                    _T4int 53EE    __size_ofi1_chanValDigUP 00D0             i1___ftadd@sign 0071  
              ?_PWM2Config 0001              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000        ___lmul@multiplicand 0104              __CFG_WRT3$OFF 000000  
             ___lltoft@exp 0110             __CFG_EBTR0$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000                      _fData 00C4             __CFG_EBTR3$OFF 000000  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
           __CFG_EBTRB$OFF 000000                      _exp10 0177                      _flech 0195  
          __end_of_dpowers 7D5D                i1delay_ms@i 0063                      _selSN 01C3  
    __size_ofi1_readEEPROM 0016          lcd_read_byte@high 0103                      _scale 0CF4  
          __end_of_isdigit 6A96         __CFG_MCLRE$EXTMCLR 000000              ___ftpack@sign 0104  
          ??_drawValEditor 0174                      _putch 6C22           __end_ofi1___lmul 62AA  
                    tablat 000FF5           __end_ofi2___ftge 5D28              drawPassWord@i 0174  
            i1_calcVars2ti 6644             i1___ftdiv@cntr 007B            __end_of_pressUP 4286  
             _sysParamInit 5690             i1___ftdiv@sign 0080                      plusw2 000FDB  
             ?_setPWM2duty 0100           i1desintegrator@i 0088                      status 000FD8  
          ??_lcd_read_byte 0102         __size_ofi1___aldiv 011A                i1_pressDOWN 46BA  
           __CFG_HFOFST$ON 000000         __size_ofi1___ftadd 0268         __size_ofi1___ftdiv 014C  
             putchUART@val 0060         __size_ofi1___ftmul 015E         __size_ofi1___fttol 0144  
            i1_calcSysVars 646C             i1___ftpack@arg 0060             i1___ftpack@exp 0063  
             ?_longPressUP 0001            __initialization 5C06      __end_ofi1_writeEEPROM 6B7A  
             __end_of_main 6780                ?i1___altoft 0068            ??_lcd_send_byte 0106  
      i1___lmul@multiplier 0060                ?i1___ftpack 0060             i1___ftmul@cntr 0075  
           i1___ftmul@sign 0076      __end_of_saveSysParams 527E              lcd_gotoxy@pos 0109  
    __size_ofi1_integrator 0122                ?i2___altoft 0009               ?_releaseDOWN 0001  
           i1___fttol@exp1 006E                ?i2___ftpack 0001         __size_ofi1_pressUP 0112  
           i1___fttol@lval 006A     __size_of_loadSysParams 004A                     ??_main 0177  
            ___fttol@sign1 0133               i1_readEEPROM 6BF6              __activetblptr 000002  
              ?i1_delay_ms 0060             __CFG_PLLCFG$ON 000000            i1___altoft@sign 0071  
                   ?_T2int 0001                     ?_T4int 0001       __size_of__tdiv_to_l_ 019E  
         i1_chanValDigDOWN 4DF8           ?_interruptConfig 0001         desintegrator@temp2 0146  
       desintegrator@temp3 0142         desintegrator@tempL 013E       __size_of_clockConfig 0026  
    __size_of_chanValDigUP 00D0           __end_of_t2config 6BCA               i1checkPass@i 0065  
                ??_UARTint 0093           __end_of_t4config 6A6C           __end_of___altoft 586E  
           setPWM2duty@act 0104           ___llmod@dividend 010D                     ?_scale 0123  
                   _EEDATA 000FA8                     _CCPR2L 000F67                     _EECON2 000FA7  
         ___awdiv@dividend 0106                     ?_putch 0001           __end_of___ftpack 44A4  
 __size_of_drawAutoCalibRM 0032             ?i1_calcVars2ti 0001           __end_of___lltoft 5FDA  
                   i1l1302 2920                     i1l1311 294A                     i1l1322 392A  
                   i1l1264 457C                     i1l1291 2822                     i1l1293 284A  
                   i1l1287 27E8                     i2l1264 552C                     i1l9231 44BE  
                   i1l9243 4530                     i1l9235 44D2                     i1l9253 4586  
                   i1l9245 4560                     i1l9237 44E0                     i1l9247 456E  
                   i1l9239 4510                     i1l9259 45A2                     i1l9603 362C  
                   i1l9613 366A                     i1l9607 364A                     i1l9543 3888  
                   i1l9617 3688                     i1l9537 384E                     i1l9563 38E8  
                   i2l7191 54E4                     i2l7183 54AE                     i1l9583 35A4  
                   i2l7195 54FA                     i2l7187 54BC                     i2l8411 6174  
                   i2l7197 5518                     i2l7189 54C6                     i2l8421 5CC8  
                   i1l9589 35DE                     i2l7199 5522                     i2l8431 5D24  
                   i2l8409 6168                     i2l8425 5CF8                     i2l8823 5466  
                   i2l7981 63CC                     i2l7977 63B2                     _RCREG1 000FAE  
     __size_of_drawBadPass 0016           i1_confirmEdition 48BA                     _SPBRG1 000FAF  
           ?i1_calcSysVars 0001                     _TXREG1 000FAD             i1_sysParamInit 5730  
     __size_of_drawChanVal 00BC           __end_of_delay_ms 6856      __size_ofi1_pressENTER 02BC  
                   _UPisLP 003C             integrator@acum 0123           __end_of_ioConfig 697E  
             i1_integrator 3D0A        __size_of_UARTConfig 0038      __size_ofi1_pressRETRO 009C  
           integrator@temp 0127             __CFG_PWRTEN$ON 000000             __CFG_XINST$OFF 000000  
            _DOWNsecurLock 01B5        __size_of_PWM2Config 0066           __end_of__powers_ 7DAB  
     __size_of_drawSNquest 00F0               _CCPTMRS0bits 000F49           __end_of_drawMenu 2C00  
         __end_of_lcd_init 55EE           __end_of_lcd_putc 6054                     ___ftge 4EC4  
                   ___lmul 61BE                  ??___aldiv 0108                     ___wmul 6916  
                ??___awdiv 010A                  ??___ftadd 0133             __CFG_STVREN$ON 000000  
                ??___awmod 0104                  ??___ftdiv 0118                  ??___ftneg 0103  
                ??___lldiv 0108                  ??___ftmul 011A                  ??___llmod 0115  
                ??___ftsub 013F                  ??___fttol 012E                     _contra 00C0  
                   _hp_isr 0008                     _selKMT 0042                     _fround 226C  
           i2___altoft@exp 0011                     clear_0 5C6C                     clear_1 5C78  
                   clear_2 5C84           ___awdiv@quotient 010C            ___awmod@divisor 0102  
             _chanValDigUP 4B8C            ___awmod@counter 0104                     _printf 00C2  
     __end_of_drawPass1Lin 6B98   __size_ofi1_longPressDOWN 002A           ?i1_desintegrator 0001  
        __end_ofi1___aldiv 4060      ___ftmul@f3_as_product 011E          __end_ofi1___ftadd 29E8  
      _lcd_send_4bits$1690 0102        _lcd_send_4bits$1691 0103        _lcd_send_4bits$1688 0100  
      _lcd_send_4bits$1689 0101          __end_ofi1___ftdiv 3960           ??_lcd_read_4bits 0100  
        __end_ofi1___ftmul 36C8          __end_ofi1___fttol 3BE8       __end_of_drawPassWord 4B8C  
             __pdataCOMRAM 0043                  ??_isdigit 0100           i1_longPressENTER 1486  
             __mediumconst 7D34           i1_longPressRETRO 65EC                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                  ??_pressUP 0105  
             i1_pressENTER 1CFE        __size_ofi1___altoft 009E           ??_chanValDigDOWN 0100  
             i1_pressRETRO 59A8        __size_ofi1___ftpack 010C     __end_ofi1_sysParamInit 57D0  
            _loadSysParams 6780                 __accesstop 0060          ?_saveProcessState 0001  
  __end_of__initialization 5C8A                 ___altoft@c 0108        __size_ofi2___altoft 0078  
        __end_ofi1_pressUP 4398            __CFG_PBADEN$OFF 000000      __size_of_EEPROMConfig 0006  
              _UPsecurLock 01B9                 ___ftadd@f1 012D                 ___ftadd@f2 0130  
      __size_ofi2___ftpack 00AE       i1longPressENTER@temp 008D                 ___ftge@ff1 0100  
               ___ftge@ff2 0103            i1___ftpack@sign 0064              ___rparam_used 000001  
       ??_saveProcessState 0062                 ___ftdiv@f1 0112                 ___ftdiv@f2 0115  
               ___ftdiv@f3 011C           ??_lcd_send_4bits 0100            writeEEPROM@data 0100  
               ___ftneg@f1 0100        __size_ofi1_delay_ms 0046             i2___ftpack@arg 0001  
            __end_of_T2int 3284             i2___ftpack@exp 0004              __end_of_T4int 549E  
               ___ftmul@f1 0114                 ___ftmul@f2 0117           ??_confirmEdition 0123  
               ___ftsub@f1 0139                 ___ftsub@f2 013C                 ___fttol@f1 012A  
           __pcstackCOMRAM 0001                setPWM2on@on 0100               __pidataBANK0 6C0C  
             __pidataBANK1 6AEA               _FC1securLock 0038         __size_of_checkPass 008E  
               ___lltoft@c 0108                integrator@i 012B              __end_of_scale 11A2  
            __end_of_putch 6C30               _FC2securLock 0039                  ?i1___lmul 0060  
                ?i2___ftge 0013               _actualScreen 01BA             lcd_gotoxy@fila 0108  
   __size_ofi1_setPWM2duty 0094                 __div_to_l_ 3284             i1_chanValDigUP 4C5C  
                  ??_T2int 0066                    ??_T4int 001C         __size_of_ioInitStt 0008  
            ?_releaseENTER 0001                 _calibLevel 01BB         __size_of_drawAdvON 004E  
            ?_releaseRETRO 0001            i1___fttol@sign1 0069               _EEPROMConfig 6C8E  
        lcd_gotoxy@address 010A            ??i1_calcVars2ti 0081               ?i1_checkPass 0001  
   __size_ofi1_longPressUP 0074            __div_to_l_@exp1 010B            __div_to_l_@cntr 010A  
               _chanValdig 01A0                    ??_scale 0126          i1___aldiv@divisor 0064  
          __div_to_l_@quot 0106                    ??_putch 010D          i1___aldiv@counter 0068  
         ??_longPressENTER 0139                 __pbssBANK0 00BA                 __pbssBANK1 01A0  
           ?_loadSysParams 0001            ??i1_calcSysVars 0077           ??_longPressRETRO 0100  
          ?i1_sysParamInit 0001      i1_longPressENTER$3198 0090              __div_to_l_@f1 0100  
            __div_to_l_@f2 0103          ??_drawAutoCalibRM 0174       __size_of_setPWM2duty 0094  
           _RETROsecurLock 01B8         __size_of_setPWM2on 001A         __CFG_CCP2MX$PORTC1 000000  
             ?_writeEEPROM 0100             lcd_send_byte@n 0105                    ?___ftge 0100  
                  ?___lmul 0100                    ?___wmul 010E         __size_of_releaseUP 000C  
       __CFG_CCP3MX$PORTB5 000000       __size_of_longPressUP 0074                  ?_t2config 0001  
                  ?_hp_isr 0001                  ?_t4config 0001                  ?___altoft 0108  
                  ?_fround 0123             ___lmul@product 0108                  ?___ftpack 0100  
   __end_ofi1_chanValDigUP 4D2C      __end_of_desintegrator 2DA6                    ?_printf 013F  
                ?___lltoft 0108                 ??i1___lmul 0068                 ??i2___ftge 0019  
       __size_of_pressDOWN 010A      i2setPWM2duty@actuator 0001               ??_UARTConfig 0100  
     __size_of_releaseDOWN 000C                    u1360_21 3864             ??_releaseENTER 0100  
                  u1363_21 3580                    u1540_21 27B4                    i1l10411 3FB6  
                  i1l10413 3FC6                    i1l10405 3F88                    i1l10431 404E  
                  i1l10423 4020                    i1l10415 3FCC                    i1l12113 317E  
                  i1l12105 3150                    u1365_21 35BA                    i1l12131 31B0  
                  i1l10443 589A                    i1l10427 4032                    i1l12211 4088  
                  i1l12133 31BE                    i1l10445 58AA                    i1l12119 3198  
                  i1l10383 6246                    i1l10703 5ECC                    i1l12223 40B8  
                  i1l12215 4098                    i1l12161 3242                    i1l12129 31AC  
                  u1358_21 382A                    i1l10457 3ADE                    i1l11601 435C  
                  i1l12241 4104                    i1l12233 40E2                    i1l10387 626C  
                  i1l10475 3B70                    i1l11603 4364                    i1l12219 40A8  
                  i1l10493 3BD6                    i1l10485 3BA0                    i1l12261 4154  
                  i1l12253 4134                    i1l12245 4114                    i1l12237 40F4  
                  i1l12167 325C                    i1l10823 2830                    i1l10807 498C  
                  i1l11631 6372                    i1l10399 3F6A                    i1l10487 3BB0  
                  i1l10479 3B84                    i1l11607 436A                    i1l10681 5B9C  
                  i1l12177 3270                    i1l10817 27F6                    i1l10761 3DE8  
                  i1l10753 3D4E                    i1l11625 6358                    i1l11641 46CC  
                  i1l10489 3BBA                    i1l10737 2E42                    i1l11721 5A22  
                  i1l11705 59DC                    i1l11609 4388                    i1l12265 4164  
                  i1l12257 4144                    i1l12249 4124     __size_ofi2_setPWM2duty 0070  
                  i1l12179 3274                    i1l10851 28D8                    i1l11619 633A  
                  i1l11811 1E2A                    i1l11715 5A08                    i1l11549 6862  
                  i1l10685 5BBE                    i1l10845 28B0                    i1l10829 2840  
                  i1l10765 48C0                    i1l10749 3D38                    i1l11741 6620  
                  i1l11629 636A                    i1l11661 4752                    i1l11653 472A  
                  i1l10693 5E6A                    i1l11813 1E3C                    i1l11717 5A10  
                  i1l11581 4300                    i1l10847 28BE                    i1l10839 2882  
                  i1l10775 48F4                    i1l11903 14C4                    i1l11735 6608  
                  i1l11671 4780                    i1l11647 46DE                    i1l11823 1E80  
                  i1l11575 42B0                    i1l10865 2974                    i1l10857 2906  
                  i1l10849 28CC                    i1l10785 4924                    i1l11921 1516  
                  i1l11913 14EE                    i1l11745 6632                    i1l11673 4786  
                  i1l11681 47B4                    i1l10697 5EBC                    i1l10689 5E54  
                  i1l11825 1E86                    i1l11761 1D2E                    i1l11569 4298  
                  i1l10875 29C2                    i1l10859 2914                    i1l10795 4958  
                  i1l11907 14D6                    i1l11675 4790                    i1l11667 4774  
                  i1l10699 5EC4                    i1l11843 1EDE                    i1l11835 1EBA  
                  i1l11771 1D5A                    i1l11763 1D36                    i1l11595 434A  
                  i1l11829 1E9A                    i1l11589 4328                    i1l12581 006A  
                  i1l11951 15E0                    i1l11679 4796                    i1l11839 1ECC  
                  i1l11783 1DAC                    i1l11791 1DC4                    i1l11599 4356  
                  i1l11881 1F96                    i1l11793 1DE8                    i1l11883 1F9E  
                  i1l11699 59B8                    i1l11949 15D8                    i1l11877 1F88  
                  i1l11797 1DFA                    i1l11975 1694                    i1l11977 169C  
                  i1l11897 14A6                    u1539_21 2796                    u1486_21 3ABA  
           ??_releaseRETRO 0100               ??_PWM2Config 0106            __CFG_WDTEN$SWON 000000  
                ?_delay_ms 0100   __size_ofi1_saveSysParams 00BC                 _drawScreen 533A  
               _lcd_gotoxy 69E2                  ?_ioConfig 0001         __size_of_putchUART 000E  
   __size_of_longPressDOWN 002A                    _SPBRGH1 000FB0          ??i1_longPressDOWN 0060  
                  _UARTint 4060                  ?_drawMenu 0001                  ?_lcd_init 0001  
                  _i16Data 00C7              ??_calcVars2ti 0123          __end_of_checkPass 5E44  
                ?_lcd_putc 0001    __size_of_buttonChecking 02B2             _tempLastScreen 00CB  
    __end_of_drawCalibProc 5F5E              ??_calcSysVars 0123                 _holdUPcont 01C0  
             ?i1_pressDOWN 0001                 _readEEPROM 6BCA              i1_setPWM2duty 5B72  
        __end_of_ioInitStt 6C86   __end_ofi1_chanValDigDOWN 4EC4          __end_of__npowers_ 7D84  
                  __Hparam 0000                 _scale$2994 0126                 _lastSttFC1 003F  
               _lastSttFC2 0040                    __Lparam 0000          __end_of_drawAdvON 66EA  
       __end_of_UARTConfig 6916                 checkPass@i 0105         __end_of_PWM2Config 653C  
             ??i1___altoft 006C      __size_of_drawPass1Lin 001E              i1_longPressUP 631E  
                  ___aldiv 3E2C            __size_of___ftge 00C8               ??i1___ftpack 0065  
                  ___awdiv 4F8C            __size_of___lmul 0076                    ___ftadd 2518  
                  ___awmod 55EE                    ___ftdiv 36C8                    ___ftneg 6A12  
                  ___lldiv 5106            __size_of___wmul 0036                    ___ftmul 340C  
                  ___llmod 5A44                    ___ftsub 66EA                    ___fttol 3960  
               ??_t2config 0100                 ??_t4config 0100      __size_of_drawPassWord 00EC  
             ??i2___altoft 000D                 ??___altoft 010C            __size_of_hp_isr 613E  
                  __pcinit 5C06               ??i2___ftpack 0006                 ??___ftpack 0105  
          __size_of_fround 02AC                    __ramtop 0600            ?i1_chanValDigUP 0001  
 __end_ofi1_confirmEdition 49B0                 ??___lltoft 010C                    __ptext0 6736  
                  __ptext1 6A42                    __ptext2 5690                    __ptext3 6BCA  
                  __ptext4 6402                    __ptext5 6B98                    __ptext6 554C  
                  __ptext7 6C7E                    __ptext8 694C                    __ptext9 6C86  
          __size_of_printf 0C32              i1delay_ms@del 0060               ??i1_delay_ms 0062  
              ?__div_to_l_ 0100                    _dpowers 7D35                  _T2CONbits 000FBA  
               _integrator 3BE8                    _isdigit 6A6C               __size_of_isr 00A6  
         ___awmod@dividend 0100            i2___altoft@sign 0012           ___aldiv@dividend 0100  
                _T4CONbits 000F51                 ??_delay_ms 0102          __end_of_setPWM2on 6BB2  
               ??_ioConfig 0100                    _pressUP 4174                  _ENTERisLP 01B6  
                  _questSN 01B3            ??_loadSysParams 0081                 ??_drawMenu 0174  
               ??_lcd_init 0108          __end_of_releaseUP 6C66             __pintcode_body 60CE  
               ??_lcd_putc 010B       end_of_initialization 5C8A         __end_ofi1___altoft 590C  
        i1calcSysVars@temp 0077      __end_of_drawValEditor 1A42         __end_ofi1___ftpack 45B0  
     lcd_send_byte@address 0107             ?i1_setPWM2duty 0060              __Lmediumconst 7D34  
                  int_func 60CE                  i1u1531_20 2E40               _drawPass1Lin 6B7A  
                i1u1720_20 475E                  i1u1721_20 4760         __end_ofi2___altoft 61BE  
                i1u1563_25 69DE                  i1u1475_25 5336                  i1u1563_26 69E0  
                i1u1475_26 5338                  i1u1805_20 3186                  i1u1805_26 3188  
                i1u1816_20 324A                  i1u1488_20 3B04                  i1u1488_25 3AFA  
                i1u1816_26 324C                  i1u1755_20 1E34                  i1u1756_20 1E36  
                i1u1782_20 150E                  i1u1758_20 1E52                  i1u1783_20 1510  
                i1u1759_20 1E54                  i1u1792_20 1762                  i1u1793_20 1764  
                i1u1698_20 4334                  i1u1699_20 4336              i2_setPWM2duty 6392  
       __end_ofi2___ftpack 554C                  i1u1897_27 686A          __end_of_pressDOWN 46BA  
      __end_of_calcVars2ti 65EC      __end_of_lcd_read_byte 6810            ___lldiv@divisor 0104  
             _drawPassWord 4AA0            ___lldiv@counter 010C   __end_ofi1_longPressENTER 176A  
       __end_ofi1_delay_ms 689C   __end_ofi1_longPressRETRO 6644            lcd_read_4bits@n 0101  
            _longPressDOWN 6A96             ?i1_longPressUP 0001        __end_of_calcSysVars 646C  
         i1setPWM2duty@act 0064              readEEPROM@adr 0100                    printf@c 0173  
                  printf@f 013F          __end_of_putchUART 6C4C           ___aldiv@quotient 010A  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc2 000FDE                 _pressENTER 1A42          i1checkPass@passOK 0064  
               _pressRETRO 590C                  _RETROisLP 003B             __tdiv_to_l_@f1 0100  
           __tdiv_to_l_@f2 0103      __end_of_lcd_send_byte 68DE              ??__tdiv_to_l_ 0106  
                _PORTAbits 000F80                  _PORTBbits 000F81                 _timsXcorte 004D  
            ??_clockConfig 0100           i1integrator@acum 0083               _holdDOWNcont 01BD  
         i1integrator@temp 0087                  _TRISAbits 000F92                  _TRISBbits 000F93  
                _TRISCbits 000F94                ?_drawScreen 0001                ?_lcd_gotoxy 0108  
                i1___aldiv 3F46                  i1___ftadd 2780                  i1___ftdiv 3814  
                i1___ftmul 356A                  i1___fttol 3AA4              ??_drawBadPass 0174  
           _ProcessStarted 003A     __size_ofi1_writeEEPROM 0020              ??_drawChanVal 0174  
     __size_ofi1_checkPass 008E     __size_of_saveSysParams 00BC   __size_of_interruptConfig 0008  
        ??i1_saveSysParams 0081             ?i2_setPWM2duty 0001                ?_readEEPROM 0001  
              ___ftdiv@exp 011F              ??_drawSNquest 0174                printf@width 016C  
              _CCP2CONbits 000F66         longPressENTER@temp 0139          confirmEdition@yes 0123  
          i2___ftpack@sign 0005       __end_of_releaseENTER 6C3E        __size_of__div_to_l_ 0188  
     __end_of_releaseRETRO 6C72             ?_longPressDOWN 0001                  i1_pressUP 4286  
       _tempVelocidadMasa1 019A         _tempVelocidadMasa2 019D         _tempVelocidadMasa3 018F  
              ___ftmul@exp 011D                _ECCP2ASbits 000F64       __size_of_writeEEPROM 0020  
           __end_of___ftge 4F8C             __end_of___lmul 6234             __end_of___wmul 694C  
__size_of_saveProcessState 0032              __pidataCOMRAM 6C4C             __end_of_hp_isr 6146  
           __end_of_fround 2518        setPWM2duty@actuator 0100             __end_of_printf 0CF4  
              ?_integrator 0001      i1___lmul@multiplicand 0064          __size_ofi1___lmul 0076  
      start_initialization 5C06          __size_ofi2___ftge 0090        __end_of__tdiv_to_l_ 30EA  
         ??i1_sysParamInit 007A                 ?i1___aldiv 0060                __end_of_isr 00BE  
               ?i1___ftadd 0068                 ?i1___ftdiv 0072                 ?i1___ftmul 0068  
               ?i1___fttol 0060            _drawAutoCalibRM 697E        __end_of_clockConfig 6B3A  
 __size_ofi1_desintegrator 01A6                _calcVars2ti 6594            ??i1_setPWM2duty 0062  
           _buttonChecking 1FBA          desintegrator@temp 013B                _calcSysVars 6402  
          ___llmod@divisor 0111        __end_of_drawBadPass 6BF6            ___llmod@counter 0115  
          ??i1_longPressUP 0060               _lastSttENTER 0197               _lastSttRETRO 0198  
      __end_of_drawChanVal 5106       __size_ofi1_pressDOWN 010A                 ?i1_pressUP 0001  
                 ??___ftge 0106        __size_of_drawScreen 00B4                   ??___lmul 0108  
      __size_of_lcd_gotoxy 0030              i1_writeEEPROM 6B5A                   ??___wmul 0112  
      __end_of_drawSNquest 4AA0                ?_pressENTER 0001                _chanValChar 00BA  
              ?_pressRETRO 0001                __pdataBANK0 00A5                __pdataBANK1 0177  
          lcd_send_4bits@n 0104                   ??_hp_isr 001D         i1___aldiv@dividend 0060  
            _saveSysParams 51C2                   ??_fround 0126            i1_longPressDOWN 6AC0  
          i1readEEPROM@adr 0060                   ??_printf 0151          __size_of_t2config 0018  
        __size_of_t4config 002A          __size_of___altoft 009E                 fround@prec 012C  
      __size_of_readEEPROM 0016          __size_of___ftpack 010C          __size_of___lltoft 007C  
              __pbssCOMRAM 002B             writeEEPROM@adr 0101              __pcstackBANK0 0060  
            __pcstackBANK1 0100                  _calFactor 002F     __end_of_buttonChecking 226C  
                 ?_UARTint 0001               _isdigit$2496 0101          __size_of_delay_ms 0046  
         i1___lmul@product 0068          __size_of_ioConfig 0032      __end_ofi1_calcVars2ti 669C  
          ??i2_setPWM2duty 0003              ?_sysParamInit 0001    __size_of_lcd_read_4bits 007A  
            ??_setPWM2duty 0102          __size_of_drawMenu 0218          __size_of_lcd_init 00A2  
        __size_of_lcd_putc 007A                  _bladeIsUP 00C9      __end_ofi1_calcSysVars 64D6  
       i1___aldiv@quotient 006A                  _checkPass 5DB6            ??_longPressDOWN 0100  
      __size_of_integrator 0122              ??_longPressUP 0100          ?i1_chanValDigDOWN 0001  
        ??_interruptConfig 0100             ?i1_writeEEPROM 0060    __size_of_chanValDigDOWN 00CC  
         ??i1_chanValDigUP 0060                  __pintcode 0008              __pmediumconst 7D34  
                 ?___aldiv 0100                   ?___awdiv 0106                  __ptext100 48BA  
                __ptext101 2780                  __ptext110 44A4                  __ptext102 6AC0  
                __ptext111 30EA                  __ptext103 6C3E                  __ptext120 6146  
                __ptext112 5B72                  __ptext104 6780                  __ptext121 549E  
                __ptext113 6856                  __ptext105 527E                  __ptext114 69B0  
                __ptext106 6644                  __ptext115 6B5A                  __ptext107 3814  
                __ptext108 646C                  __ptext117 53EE                  __ptext109 356A  
                 ?___ftadd 012D                  __ptext118 6392                  __ptext119 5C98  
       ??i1_chanValDigDOWN 0060                   ?___awmod 0100                   ?___ftdiv 0112  
                 ?___ftneg 0100                  _ioInitStt 6C7E                   ?___lldiv 0100  
                 ?___ftmul 0114                   ?___llmod 010D                   ?___ftsub 0139  
                __npowers_ 7D5D                   ?___fttol 012A             ?_saveSysParams 0001  
                _drawAdvON 669C              ??_releaseDOWN 0100                __pintcodelo 0018  
         __CFG_PRICLKEN$ON 000000                __tdiv_to_l_ 2F4C    __size_of_lcd_send_4bits 008E  
        ?i1_confirmEdition 0001              ?i1_readEEPROM 0001    __end_of_drawAutoCalibRM 69B0  
             ??__div_to_l_ 0106    __size_of_confirmEdition 00F6                _clockConfig 6B14  
                 ?_isdigit 0001             __size_of_T2int 019A             __size_of_T4int 00B0  
       ??i1_confirmEdition 0081                  _lastSttUP 0199                ??i1___aldiv 0068  
                 ?_pressUP 0001                ??i1___ftadd 006E                ??i1___ftdiv 0078  
              ??i1___ftmul 006E                ??i1___fttol 0064            ?_buttonChecking 0001  
              _drawBadPass 6BE0             __size_of_scale 04AE             ??_sysParamInit 0126  
           __size_of_putch 000E        __size_of_pressENTER 02BC                  _setPWM2on 6B98  
    __size_of_releaseENTER 000E        __size_of_pressRETRO 009C                _drawChanVal 504A  
    __size_of_releaseRETRO 000C            ___aldiv@divisor 0104            ___aldiv@counter 0108  
            _tempNumCortes 0192             ___wmul@product 0112                   _LATBbits 000F8A  
                 _LATCbits 000F8B                  _releaseUP 6C5A                 ?_checkPass 0001  
  lcd_init@LCD_INIT_STRING 0109                  delay_ms@i 0103     __size_of_desintegrator 01A6  
                 _DOWNisLP 0037                _drawSNquest 49B0          ??i1_desintegrator 0077  
                 _IPR1bits 000F9F                   _PIE1bits 000F9D                   _IPR5bits 000F7F  
                 _PIE5bits 000F7D                  _numCortes 00B8              ?i1_integrator 0001  
              ??i1_pressUP 0065                   _PIR1bits 000F9E         __end_of__div_to_l_ 340C  
  __end_ofi1_longPressDOWN 6AEA                   _PIR5bits 000F7E          ?i1_longPressENTER 0001  
      __end_of_setPWM2duty 5B72                _holdFC1cont 003D                _holdFC2cont 003E  
                 _RCONbits 000FD0          ?i1_longPressRETRO 0001                 UARTint@sas 0093  
  __size_of_longPressENTER 02E4                  _pressDOWN 45B0    __size_of_longPressRETRO 0058  
               ?_ioInitStt 0001         ??i1_longPressENTER 008D                 ?_drawAdvON 0001  
       ??i1_longPressRETRO 0060           _saveProcessState 69B0              ?_chanValDigUP 0001  
                _putchUART 6C3E        __end_of_longPressUP 631E             ??i1_readEEPROM 0060  
                 i1___lmul 6234          ___wmul@multiplier 010E                   i2___ftge 5C98  
   __size_of_drawCalibProc 008C                  lcd_init@i 010D                 printf@flag 0160  
               printf@fval 016E                 printf@prec 0171            i1_saveSysParams 527E  
             _releaseENTER 6C30        __end_of_releaseDOWN 6C7E               ??_drawScreen 0177  
             _releaseRETRO 6C66               ??_lcd_gotoxy 0109              ?i1_pressENTER 0001  
        ___lmul@multiplier 0100                  copy_data0 5C1A                  copy_data1 5C3A  
                copy_data2 5C5A              ?i1_pressRETRO 0001           __size_of_UARTint 0114  
    __end_of_loadSysParams 67CA                 ?_setPWM2on 0001               ??_readEEPROM 0100  
               ?_releaseUP 0001             ??i1_integrator 0081                 _EECON1bits 000FA6  
          ??i1_writeEEPROM 0061                   __Hrparam 0000                _lastSttDOWN 0196  
                 __Lrparam 0000         __CFG_BOREN$SBORDIS 000000            ??_saveSysParams 0123  
               ?_pressDOWN 0001          __CFG_P2BMX$PORTC0 000000         __end_of_drawScreen 53EE  
       __end_of_lcd_gotoxy 6A12           __size_of___aldiv 011A                   _t2config 6BB2  
            i1integrator@i 008B           __size_of___awdiv 00BE             ??_chanValDigUP 0100  
         __size_of___ftadd 0268           __size_of___awmod 00A2                   _t4config 6A42  
         __size_of___ftdiv 014C           __size_of___ftneg 0030           __size_of___lldiv 00BC  
                 ___altoft 57D0           __size_of___ftmul 015E           __size_of___llmod 009A  
         __size_of___ftsub 004C           __size_of___fttol 0144                 ?_putchUART 0001  
                 ___ftpack 4398                _fround$2992 0129                _fround$2993 0126  
                 ___lltoft 5F5E              _desintegrator 2C00     __size_of_drawValEditor 02D8  
               _ANSELAbits 000F38                 _ANSELCbits 000F3A             desintegrator@i 014A  
         ?_drawAutoCalibRM 0001               ??_integrator 0121                _menuSection 01C1  
                 _chanValf 01AE                   _chanVals 01B1         __end_of_readEEPROM 6BE0  
                 _diamTubo 00A9           __size_of_isdigit 002A     __size_of_lcd_read_byte 0046  
                 _delay_ms 6810              ?_EEPROMConfig 0001                   _ioConfig 694C  
            ??i1_checkPass 0060             ??i1_pressENTER 008A                   __ptext10 533A  
                 __ptext11 49B0                   __ptext20 669C                   __ptext12 4AA0  
                 __ptext21 00C2                   __ptext13 29E8                   __ptext30 6A6C  
                 __ptext22 0CF4                   __ptext14 504A                   __ptext31 226C  
                 __ptext23 6C22                   __ptext15 5ED2                   __ptext40 66EA  
                 __ptext32 6916                   __ptext24 5FDA                   __ptext16 6BE0  
                 __ptext41 6A12                   __ptext33 55EE                   __ptext25 69E2  
                 __ptext17 6B7A                   __ptext50 4B8C                   __ptext42 4EC4  
                 __ptext34 4F8C                   __ptext26 689C                   __ptext18 697E  
                 __ptext51 590C                   __ptext43 6B14                   __ptext35 2F4C  
                 __ptext27 5D28                   __ptext19 176A                   __ptext60 653C  
                 __ptext52 1A42                   __ptext44 1FBA                   __ptext36 3284  
                 __ptext28 67CA                   __ptext61 11A2                   __ptext53 2C00  
                 __ptext45 6C5A                   __ptext37 5F5E                   __ptext29 6054  
                 __ptext70 36C8                   __ptext62 3BE8                   __ptext54 3960  
                 __ptext46 6C66                   __ptext38 5A44                   __ptext71 2518  
                 __ptext63 61BE                   __ptext55 3E2C                   __ptext47 6C30  
                 __ptext39 5106                   __ptext72 4398                   __ptext64 57D0  
                 __ptext56 5DB6                   __ptext48 6C72                   __ptext81 4060  
                 __ptext73 6A96                   __ptext65 47C4                   __ptext57 45B0  
                 __ptext49 4174                   __ptext90 3F46                   __ptext82 5730  
                 __ptext74 6810                   __ptext66 51C2                   __ptext58 4D2C  
                 __ptext91 5E44                   __ptext83 6BF6                   __ptext75 68DE  
                 __ptext67 6B3A                   __ptext59 62AA                   __ptext92 46BA  
                 __ptext84 4286                   __ptext76 64D6                   __ptext68 6594  
                 __ptext93 4DF8                   __ptext85 4C5C                   __ptext77 6BB2  
                 __ptext69 340C                   __ptext94 631E                   __ptext86 59A8  
                 __ptext78 5ADE                   __ptext95 65EC                   __ptext87 1CFE  
                 __ptext79 6C8E                   __ptext96 1486                   __ptext88 2DA6  
                 __ptext97 3D0A                   __ptext89 3AA4                   __ptext98 6234  
                 __ptext99 586E                   _kgXcorte 00AC                   __powers_ 7D84  
           ??i1_pressRETRO 0060           __size_of_pressUP 0112                   _drawMenu 29E8  
                 _lcd_init 554C                   _lcd_putc 5FDA               ?_calcVars2ti 0001  
              _OSCCON2bits 000FD2             _lcd_read_4bits 6054     __size_of_lcd_send_byte 0042  
              _setPWM2duty 5ADE          i1writeEEPROM@data 0060               ?_calcSysVars 0001  
            __size_of_main 004A              _drawCalibProc 5ED2                ??_checkPass 0100  
          calcSysVars@temp 0123                   _passChar 01AA        _longPressENTER$2991 013C  
              _passSection 01C2                   _tiXcorte 00B2                   _timeDOWN 0043  
            ??_writeEEPROM 0101             _chanValDigDOWN 4D2C           ?i1_longPressDOWN 0001  
              _longPressUP 62AA         __end_of_integrator 3D0A               _PSTR2CONbits 000F63  
             ??_pressENTER 014C                   int$flags 0050                ??_ioInitStt 0100  
                 _questKMT 0032               ??_pressRETRO 0100                ??_drawAdvON 0174  
  __end_ofi1_saveSysParams 533A                  printf@len 015C                  printf@exp 016A  
                printf@val 0166       __end_of_sysParamInit 5730                _releaseDOWN 6C72  
           _lcd_send_4bits 5D28            checkPass@passOK 0104             ?_desintegrator 0001  
              _introducido 01A6                delay_ms@del 0100             _confirmEdition 47C4  
           _chanValSection 0194              _velocidadMasa 00B5        i1confirmEdition@yes 0081  
              _OSCTUNEbits 000F9B                 _INTCONbits 000FF2             ??_EEPROMConfig 0100  
     i1desintegrator@temp2 0084       i1desintegrator@temp3 0080       i1desintegrator@tempL 007C  
              _PWM2CONbits 000F65                   isdigit@c 0102               _tempkgXcorte 004A  
                 scale@scl 0129     __end_of_lcd_read_4bits 60CE            _interruptConfig 6C86  
                 intlevel1 0000                   intlevel2 0000                ??_setPWM2on 0100  
         __tdiv_to_l_@exp1 010E           __tdiv_to_l_@cntr 010D         __end_of_pressENTER 1CFE  
         __tdiv_to_l_@quot 0109             ?_drawCalibProc 0001         __end_of_pressRETRO 59A8  
    __end_ofi1_setPWM2duty 5C06              ??i1_pressDOWN 0065           ___lldiv@dividend 0100  
            _drawValEditor 176A                ??_releaseUP 0100       __end_ofi1_readEEPROM 6C0C  
      __end_ofi1_checkPass 5ED2               _temptiXcorte 00AF     __end_of_chanValDigDOWN 4DF8  
               _RCSTA1bits 000FAB           i1writeEEPROM@adr 0061                 _OSCCONbits 000FD3  
            _lcd_read_byte 67CA         _screen_calibVelRes 0041      __end_ofi1_longPressUP 6392  
           _longPressENTER 11A2             _longPressRETRO 653C                ??_pressDOWN 0105  
                 printf@ap 015E                   printf@cp 015A     __end_of_lcd_send_4bits 5DB6  
   __end_of_confirmEdition 48BA                   putch@val 010D                ??_putchUART 0060  
      i1desintegrator@temp 0079              _lcd_send_byte 689C        __end_of_writeEEPROM 6B5A  
             ?__tdiv_to_l_ 0100                _printf$2995 0157           ??_buttonChecking 014C  
             ?_clockConfig 0001                 _UARTConfig 68DE               _processTimer 002B  
             _processState 0035       __end_ofi1_integrator 3E2C           ___lldiv@quotient 0108  
               _PWM2Config 64D6  __size_ofi1_chanValDigDOWN 00CC               ___aldiv@sign 0109  
        __CFG_T3CMX$PORTC0 000000            i1_desintegrator 2DA6                 _WDTCONbits 000FD1  
            _holdENTERcont 01BE            ?_lcd_read_4bits 0001               ?_drawBadPass 0001  
             ?_drawChanVal 0001   __end_of_saveProcessState 69E2       __end_of_chanValDigUP 4C5C  
           _ENTERsecurLock 01B7             ?_drawValEditor 0001  __size_ofi1_confirmEdition 00F6  
            ?_drawPass1Lin 0001      __end_ofi2_setPWM2duty 6402          __CFG_FOSC$INTIO67 000000  
              drawAdvON@on 0174               ?_drawSNquest 0001            ?_chanValDigDOWN 0001  
  __size_ofi1_sysParamInit 00A0     __end_of_longPressENTER 1486              ?_drawPassWord 0001  
           ?_lcd_read_byte 0001     __end_of_longPressRETRO 6594      __end_of_longPressDOWN 6AC0  
